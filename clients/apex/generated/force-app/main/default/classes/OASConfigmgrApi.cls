/*
 * Adobe Experience Manager OSGI config (AEM) API
 * Swagger AEM OSGI is an OpenAPI specification for Adobe Experience Manager (AEM) OSGI Configurations API
 *
 * OpenAPI spec version: 1.0.0-pre.0
 * Contact: opensource@shinesolutions.com
 *
 * NOTE: This class is auto generated by the OAS code generator program.
 * https://github.com/OAS-api/OAS-codegen.git
 * Do not edit the class manually.
 */

public class OASConfigmgrApi {
    OASClient client;

    public OASConfigmgrApi(OASClient client) {
        this.client = client;
    }

    public OASConfigmgrApi() {
        this.client = new OASClient();
    }

    public OASClient getClient() {
        return this.client;
    }

    /**
     * 
     * 
     * @param post  (optional)
     * @param apply  (optional)
     * @param r_delete  (optional)
     * @param action  (optional)
     * @param location  (optional)
     * @param propertylist  (optional)
     * @param showPlaceholder  (optional)
     * @param maximumCacheEntries  (optional)
     * @param afScriptingCompatversion  (optional)
     * @param makeFileNameUnique  (optional)
     * @param generatingCompliantData  (optional)
     * @return OASAdaptiveFormAndInteractiveCommuni
     * @throws OAS.ApiException if fails to make API call
     */
    public OASAdaptiveFormAndInteractiveCommuni adaptiveFormAndInteractiveCommunicationWebChannelConfiguration(Map<String, Object> params) {
        List<OAS.Param> query = new List<OAS.Param>();

        // cast query params to verify their expected type
        query.addAll(client.makeParam('post', (Boolean) params.get('post')));
        query.addAll(client.makeParam('apply', (Boolean) params.get('apply')));
        query.addAll(client.makeParam('delete', (Boolean) params.get('r_delete')));
        query.addAll(client.makeParam('action', (String) params.get('action')));
        query.addAll(client.makeParam('$location', (String) params.get('location')));
        query.addAll(client.makeParam('propertylist', (List<String>) params.get('propertylist'), 'csv'));
        query.addAll(client.makeParam('showPlaceholder', (Boolean) params.get('showPlaceholder')));
        query.addAll(client.makeParam('maximumCacheEntries', (Integer) params.get('maximumCacheEntries')));
        query.addAll(client.makeParam('af.scripting.compatversion', (String) params.get('afScriptingCompatversion')));
        query.addAll(client.makeParam('makeFileNameUnique', (Boolean) params.get('makeFileNameUnique')));
        query.addAll(client.makeParam('generatingCompliantData', (Boolean) params.get('generatingCompliantData')));

        List<OAS.Param> form = new List<OAS.Param>();

        return (OASAdaptiveFormAndInteractiveCommuni) client.invoke(
            'POST', '/system/console/configMgr/Adaptive Form and Interactive Communication Web Channel Configuration', '',
            query, form,
            new Map<String, Object>(),
            new Map<String, Object>(),
            new List<String>{ 'application/json', 'text/plain' },
            new List<String>(),
            new List<String> { 'aemAuth' },
            OASAdaptiveFormAndInteractiveCommuni.class
        );
    }
    /**
     * 
     * 
     * @param post  (optional)
     * @param apply  (optional)
     * @param r_delete  (optional)
     * @param action  (optional)
     * @param location  (optional)
     * @param propertylist  (optional)
     * @param fontList  (optional)
     * @return OASAdaptiveFormAndInteractiveCommuni
     * @throws OAS.ApiException if fails to make API call
     */
    public OASAdaptiveFormAndInteractiveCommuni adaptiveFormAndInteractiveCommunicationWebChannelThemeConfigur(Map<String, Object> params) {
        List<OAS.Param> query = new List<OAS.Param>();

        // cast query params to verify their expected type
        query.addAll(client.makeParam('post', (Boolean) params.get('post')));
        query.addAll(client.makeParam('apply', (Boolean) params.get('apply')));
        query.addAll(client.makeParam('delete', (Boolean) params.get('r_delete')));
        query.addAll(client.makeParam('action', (String) params.get('action')));
        query.addAll(client.makeParam('$location', (String) params.get('location')));
        query.addAll(client.makeParam('propertylist', (List<String>) params.get('propertylist'), 'csv'));
        query.addAll(client.makeParams('fontList', (List<String>) params.get('fontList')));

        List<OAS.Param> form = new List<OAS.Param>();

        return (OASAdaptiveFormAndInteractiveCommuni) client.invoke(
            'POST', '/system/console/configMgr/Adaptive Form and Interactive Communication Web Channel Theme Configuration', '',
            query, form,
            new Map<String, Object>(),
            new Map<String, Object>(),
            new List<String>{ 'application/json', 'text/plain' },
            new List<String>(),
            new List<String> { 'aemAuth' },
            OASAdaptiveFormAndInteractiveCommuni.class
        );
    }
    /**
     * 
     * 
     * @param post  (optional)
     * @param apply  (optional)
     * @param r_delete  (optional)
     * @param action  (optional)
     * @param location  (optional)
     * @param propertylist  (optional)
     * @param cqAnalyticsComponentQueryCacheSize  (optional)
     * @return OASAnalyticsComponentQueryCacheServi
     * @throws OAS.ApiException if fails to make API call
     */
    public OASAnalyticsComponentQueryCacheServi analyticsComponentQueryCacheService(Map<String, Object> params) {
        List<OAS.Param> query = new List<OAS.Param>();

        // cast query params to verify their expected type
        query.addAll(client.makeParam('post', (Boolean) params.get('post')));
        query.addAll(client.makeParam('apply', (Boolean) params.get('apply')));
        query.addAll(client.makeParam('delete', (Boolean) params.get('r_delete')));
        query.addAll(client.makeParam('action', (String) params.get('action')));
        query.addAll(client.makeParam('$location', (String) params.get('location')));
        query.addAll(client.makeParam('propertylist', (List<String>) params.get('propertylist'), 'csv'));
        query.addAll(client.makeParam('cq.analytics.component.query.cache.size', (Integer) params.get('cqAnalyticsComponentQueryCacheSize')));

        List<OAS.Param> form = new List<OAS.Param>();

        return (OASAnalyticsComponentQueryCacheServi) client.invoke(
            'POST', '/system/console/configMgr/Analytics Component Query Cache Service', '',
            query, form,
            new Map<String, Object>(),
            new Map<String, Object>(),
            new List<String>{ 'application/json', 'text/plain' },
            new List<String>(),
            new List<String> { 'aemAuth' },
            OASAnalyticsComponentQueryCacheServi.class
        );
    }
    /**
     * 
     * 
     * @param post  (optional)
     * @param apply  (optional)
     * @param r_delete  (optional)
     * @param action  (optional)
     * @param location  (optional)
     * @param propertylist  (optional)
     * @param styleString  (optional)
     * @return OASApacheSlingHealthCheckResultHTMLS
     * @throws OAS.ApiException if fails to make API call
     */
    public OASApacheSlingHealthCheckResultHTMLS apacheSlingHealthCheckResultHTMLSerializer(Map<String, Object> params) {
        List<OAS.Param> query = new List<OAS.Param>();

        // cast query params to verify their expected type
        query.addAll(client.makeParam('post', (Boolean) params.get('post')));
        query.addAll(client.makeParam('apply', (Boolean) params.get('apply')));
        query.addAll(client.makeParam('delete', (Boolean) params.get('r_delete')));
        query.addAll(client.makeParam('action', (String) params.get('action')));
        query.addAll(client.makeParam('$location', (String) params.get('location')));
        query.addAll(client.makeParam('propertylist', (List<String>) params.get('propertylist'), 'csv'));
        query.addAll(client.makeParam('styleString', (String) params.get('styleString')));

        List<OAS.Param> form = new List<OAS.Param>();

        return (OASApacheSlingHealthCheckResultHTMLS) client.invoke(
            'POST', '/system/console/configMgr/Apache Sling Health Check Result HTML Serializer', '',
            query, form,
            new Map<String, Object>(),
            new Map<String, Object>(),
            new List<String>{ 'application/json', 'text/plain' },
            new List<String>(),
            new List<String> { 'aemAuth' },
            OASApacheSlingHealthCheckResultHTMLS.class
        );
    }
    /**
     * 
     * 
     * @param post  (optional)
     * @param apply  (optional)
     * @param r_delete  (optional)
     * @param action  (optional)
     * @param location  (optional)
     * @param propertylist  (optional)
     * @param formsManagerConfigIncludeOOTBTemplates  (optional)
     * @param formsManagerConfigIncludeDeprecatedTemplates  (optional)
     * @return OASComAdobeAemFormsndocumentsConfigA
     * @throws OAS.ApiException if fails to make API call
     */
    public OASComAdobeAemFormsndocumentsConfigA comAdobeAemFormsndocumentsConfigAEMFormsManagerConfiguration(Map<String, Object> params) {
        List<OAS.Param> query = new List<OAS.Param>();

        // cast query params to verify their expected type
        query.addAll(client.makeParam('post', (Boolean) params.get('post')));
        query.addAll(client.makeParam('apply', (Boolean) params.get('apply')));
        query.addAll(client.makeParam('delete', (Boolean) params.get('r_delete')));
        query.addAll(client.makeParam('action', (String) params.get('action')));
        query.addAll(client.makeParam('$location', (String) params.get('location')));
        query.addAll(client.makeParam('propertylist', (List<String>) params.get('propertylist'), 'csv'));
        query.addAll(client.makeParam('formsManagerConfig.includeOOTBTemplates', (Boolean) params.get('formsManagerConfigIncludeOOTBTemplates')));
        query.addAll(client.makeParam('formsManagerConfig.includeDeprecatedTemplates', (Boolean) params.get('formsManagerConfigIncludeDeprecatedTemplates')));

        List<OAS.Param> form = new List<OAS.Param>();

        return (OASComAdobeAemFormsndocumentsConfigA) client.invoke(
            'POST', '/system/console/configMgr/com.adobe.aem.formsndocuments.config.AEMFormsManagerConfiguration', '',
            query, form,
            new Map<String, Object>(),
            new Map<String, Object>(),
            new List<String>{ 'application/json', 'text/plain' },
            new List<String>(),
            new List<String> { 'aemAuth' },
            OASComAdobeAemFormsndocumentsConfigA.class
        );
    }
    /**
     * 
     * 
     * @param post  (optional)
     * @param apply  (optional)
     * @param r_delete  (optional)
     * @param action  (optional)
     * @param location  (optional)
     * @param propertylist  (optional)
     * @param isTransactionRecordingEnabled  (optional)
     * @return OASComAdobeAemTransactionCoreImplTra
     * @throws OAS.ApiException if fails to make API call
     */
    public OASComAdobeAemTransactionCoreImplTra comAdobeAemTransactionCoreImplTransactionRecorder(Map<String, Object> params) {
        List<OAS.Param> query = new List<OAS.Param>();

        // cast query params to verify their expected type
        query.addAll(client.makeParam('post', (Boolean) params.get('post')));
        query.addAll(client.makeParam('apply', (Boolean) params.get('apply')));
        query.addAll(client.makeParam('delete', (Boolean) params.get('r_delete')));
        query.addAll(client.makeParam('action', (String) params.get('action')));
        query.addAll(client.makeParam('$location', (String) params.get('location')));
        query.addAll(client.makeParam('propertylist', (List<String>) params.get('propertylist'), 'csv'));
        query.addAll(client.makeParam('isTransactionRecordingEnabled', (Boolean) params.get('isTransactionRecordingEnabled')));

        List<OAS.Param> form = new List<OAS.Param>();

        return (OASComAdobeAemTransactionCoreImplTra) client.invoke(
            'POST', '/system/console/configMgr/com.adobe.aem.transaction.core.impl.TransactionRecorder', '',
            query, form,
            new Map<String, Object>(),
            new Map<String, Object>(),
            new List<String>{ 'application/json', 'text/plain' },
            new List<String>(),
            new List<String> { 'aemAuth' },
            OASComAdobeAemTransactionCoreImplTra.class
        );
    }
    /**
     * 
     * 
     * @param post  (optional)
     * @param apply  (optional)
     * @param r_delete  (optional)
     * @param action  (optional)
     * @param location  (optional)
     * @param propertylist  (optional)
     * @param hcName  (optional)
     * @param hcTags  (optional)
     * @param hcMbeanName  (optional)
     * @return OASComAdobeAemUpgradePrechecksHcImpl
     * @throws OAS.ApiException if fails to make API call
     */
    public OASComAdobeAemUpgradePrechecksHcImpl comAdobeAemUpgradePrechecksHcImplDeprecateIndexesHC(Map<String, Object> params) {
        List<OAS.Param> query = new List<OAS.Param>();

        // cast query params to verify their expected type
        query.addAll(client.makeParam('post', (Boolean) params.get('post')));
        query.addAll(client.makeParam('apply', (Boolean) params.get('apply')));
        query.addAll(client.makeParam('delete', (Boolean) params.get('r_delete')));
        query.addAll(client.makeParam('action', (String) params.get('action')));
        query.addAll(client.makeParam('$location', (String) params.get('location')));
        query.addAll(client.makeParam('propertylist', (List<String>) params.get('propertylist'), 'csv'));
        query.addAll(client.makeParam('hc.name', (String) params.get('hcName')));
        query.addAll(client.makeParams('hc.tags', (List<String>) params.get('hcTags')));
        query.addAll(client.makeParam('hc.mbean.name', (String) params.get('hcMbeanName')));

        List<OAS.Param> form = new List<OAS.Param>();

        return (OASComAdobeAemUpgradePrechecksHcImpl) client.invoke(
            'POST', '/system/console/configMgr/com.adobe.aem.upgrade.prechecks.hc.impl.DeprecateIndexesHC', '',
            query, form,
            new Map<String, Object>(),
            new Map<String, Object>(),
            new List<String>{ 'application/json', 'text/plain' },
            new List<String>(),
            new List<String> { 'aemAuth' },
            OASComAdobeAemUpgradePrechecksHcImpl.class
        );
    }
    /**
     * 
     * 
     * @param post  (optional)
     * @param apply  (optional)
     * @param r_delete  (optional)
     * @param action  (optional)
     * @param location  (optional)
     * @param propertylist  (optional)
     * @param hcName  (optional)
     * @param hcTags  (optional)
     * @param hcMbeanName  (optional)
     * @return OASComAdobeAemUpgradePrechecksHcImpl
     * @throws OAS.ApiException if fails to make API call
     */
    public OASComAdobeAemUpgradePrechecksHcImpl comAdobeAemUpgradePrechecksHcImplReplicationAgentsDisabledHC(Map<String, Object> params) {
        List<OAS.Param> query = new List<OAS.Param>();

        // cast query params to verify their expected type
        query.addAll(client.makeParam('post', (Boolean) params.get('post')));
        query.addAll(client.makeParam('apply', (Boolean) params.get('apply')));
        query.addAll(client.makeParam('delete', (Boolean) params.get('r_delete')));
        query.addAll(client.makeParam('action', (String) params.get('action')));
        query.addAll(client.makeParam('$location', (String) params.get('location')));
        query.addAll(client.makeParam('propertylist', (List<String>) params.get('propertylist'), 'csv'));
        query.addAll(client.makeParam('hc.name', (String) params.get('hcName')));
        query.addAll(client.makeParams('hc.tags', (List<String>) params.get('hcTags')));
        query.addAll(client.makeParam('hc.mbean.name', (String) params.get('hcMbeanName')));

        List<OAS.Param> form = new List<OAS.Param>();

        return (OASComAdobeAemUpgradePrechecksHcImpl) client.invoke(
            'POST', '/system/console/configMgr/com.adobe.aem.upgrade.prechecks.hc.impl.ReplicationAgentsDisabledHC', '',
            query, form,
            new Map<String, Object>(),
            new Map<String, Object>(),
            new List<String>{ 'application/json', 'text/plain' },
            new List<String>(),
            new List<String> { 'aemAuth' },
            OASComAdobeAemUpgradePrechecksHcImpl.class
        );
    }
    /**
     * 
     * 
     * @param post  (optional)
     * @param apply  (optional)
     * @param r_delete  (optional)
     * @param action  (optional)
     * @param location  (optional)
     * @param propertylist  (optional)
     * @param preUpgradeMaintenanceTasks  (optional)
     * @param preUpgradeHcTags  (optional)
     * @return OASComAdobeAemUpgradePrechecksMbeanI
     * @throws OAS.ApiException if fails to make API call
     */
    public OASComAdobeAemUpgradePrechecksMbeanI comAdobeAemUpgradePrechecksMbeanImplPreUpgradeTasksMBeanImpl(Map<String, Object> params) {
        List<OAS.Param> query = new List<OAS.Param>();

        // cast query params to verify their expected type
        query.addAll(client.makeParam('post', (Boolean) params.get('post')));
        query.addAll(client.makeParam('apply', (Boolean) params.get('apply')));
        query.addAll(client.makeParam('delete', (Boolean) params.get('r_delete')));
        query.addAll(client.makeParam('action', (String) params.get('action')));
        query.addAll(client.makeParam('$location', (String) params.get('location')));
        query.addAll(client.makeParam('propertylist', (List<String>) params.get('propertylist'), 'csv'));
        query.addAll(client.makeParams('pre-upgrade.maintenance.tasks', (List<String>) params.get('preUpgradeMaintenanceTasks')));
        query.addAll(client.makeParams('pre-upgrade.hc.tags', (List<String>) params.get('preUpgradeHcTags')));

        List<OAS.Param> form = new List<OAS.Param>();

        return (OASComAdobeAemUpgradePrechecksMbeanI) client.invoke(
            'POST', '/system/console/configMgr/com.adobe.aem.upgrade.prechecks.mbean.impl.PreUpgradeTasksMBeanImpl', '',
            query, form,
            new Map<String, Object>(),
            new Map<String, Object>(),
            new List<String>{ 'application/json', 'text/plain' },
            new List<String>(),
            new List<String> { 'aemAuth' },
            OASComAdobeAemUpgradePrechecksMbeanI.class
        );
    }
    /**
     * 
     * 
     * @param post  (optional)
     * @param apply  (optional)
     * @param r_delete  (optional)
     * @param action  (optional)
     * @param location  (optional)
     * @param propertylist  (optional)
     * @param rootPath  (optional)
     * @param fixInconsistencies  (optional)
     * @return OASComAdobeAemUpgradePrechecksTasksI
     * @throws OAS.ApiException if fails to make API call
     */
    public OASComAdobeAemUpgradePrechecksTasksI comAdobeAemUpgradePrechecksTasksImplConsistencyCheckTaskImpl(Map<String, Object> params) {
        List<OAS.Param> query = new List<OAS.Param>();

        // cast query params to verify their expected type
        query.addAll(client.makeParam('post', (Boolean) params.get('post')));
        query.addAll(client.makeParam('apply', (Boolean) params.get('apply')));
        query.addAll(client.makeParam('delete', (Boolean) params.get('r_delete')));
        query.addAll(client.makeParam('action', (String) params.get('action')));
        query.addAll(client.makeParam('$location', (String) params.get('location')));
        query.addAll(client.makeParam('propertylist', (List<String>) params.get('propertylist'), 'csv'));
        query.addAll(client.makeParam('root.path', (String) params.get('rootPath')));
        query.addAll(client.makeParam('fix.inconsistencies', (Boolean) params.get('fixInconsistencies')));

        List<OAS.Param> form = new List<OAS.Param>();

        return (OASComAdobeAemUpgradePrechecksTasksI) client.invoke(
            'POST', '/system/console/configMgr/com.adobe.aem.upgrade.prechecks.tasks.impl.ConsistencyCheckTaskImpl', '',
            query, form,
            new Map<String, Object>(),
            new Map<String, Object>(),
            new List<String>{ 'application/json', 'text/plain' },
            new List<String>(),
            new List<String> { 'aemAuth' },
            OASComAdobeAemUpgradePrechecksTasksI.class
        );
    }
    /**
     * 
     * 
     * @param post  (optional)
     * @param apply  (optional)
     * @param r_delete  (optional)
     * @param action  (optional)
     * @param location  (optional)
     * @param propertylist  (optional)
     * @param cqAccountmanagerTokenValidityPeriod  (optional)
     * @param cqAccountmanagerConfigRequestnewaccountMail  (optional)
     * @param cqAccountmanagerConfigRequestnewpwdMail  (optional)
     * @return OASComAdobeCqAccountApiAccountManage
     * @throws OAS.ApiException if fails to make API call
     */
    public OASComAdobeCqAccountApiAccountManage comAdobeCqAccountApiAccountManagementService(Map<String, Object> params) {
        List<OAS.Param> query = new List<OAS.Param>();

        // cast query params to verify their expected type
        query.addAll(client.makeParam('post', (Boolean) params.get('post')));
        query.addAll(client.makeParam('apply', (Boolean) params.get('apply')));
        query.addAll(client.makeParam('delete', (Boolean) params.get('r_delete')));
        query.addAll(client.makeParam('action', (String) params.get('action')));
        query.addAll(client.makeParam('$location', (String) params.get('location')));
        query.addAll(client.makeParam('propertylist', (List<String>) params.get('propertylist'), 'csv'));
        query.addAll(client.makeParam('cq.accountmanager.token.validity.period', (Integer) params.get('cqAccountmanagerTokenValidityPeriod')));
        query.addAll(client.makeParam('cq.accountmanager.config.requestnewaccount.mail', (String) params.get('cqAccountmanagerConfigRequestnewaccountMail')));
        query.addAll(client.makeParam('cq.accountmanager.config.requestnewpwd.mail', (String) params.get('cqAccountmanagerConfigRequestnewpwdMail')));

        List<OAS.Param> form = new List<OAS.Param>();

        return (OASComAdobeCqAccountApiAccountManage) client.invoke(
            'POST', '/system/console/configMgr/com.adobe.cq.account.api.AccountManagementService', '',
            query, form,
            new Map<String, Object>(),
            new Map<String, Object>(),
            new List<String>{ 'application/json', 'text/plain' },
            new List<String>(),
            new List<String> { 'aemAuth' },
            OASComAdobeCqAccountApiAccountManage.class
        );
    }
    /**
     * 
     * 
     * @param post  (optional)
     * @param apply  (optional)
     * @param r_delete  (optional)
     * @param action  (optional)
     * @param location  (optional)
     * @param propertylist  (optional)
     * @param cqAccountmanagerConfigInformnewaccountMail  (optional)
     * @param cqAccountmanagerConfigInformnewpwdMail  (optional)
     * @return OASComAdobeCqAccountImplAccountManag
     * @throws OAS.ApiException if fails to make API call
     */
    public OASComAdobeCqAccountImplAccountManag comAdobeCqAccountImplAccountManagementServlet(Map<String, Object> params) {
        List<OAS.Param> query = new List<OAS.Param>();

        // cast query params to verify their expected type
        query.addAll(client.makeParam('post', (Boolean) params.get('post')));
        query.addAll(client.makeParam('apply', (Boolean) params.get('apply')));
        query.addAll(client.makeParam('delete', (Boolean) params.get('r_delete')));
        query.addAll(client.makeParam('action', (String) params.get('action')));
        query.addAll(client.makeParam('$location', (String) params.get('location')));
        query.addAll(client.makeParam('propertylist', (List<String>) params.get('propertylist'), 'csv'));
        query.addAll(client.makeParam('cq.accountmanager.config.informnewaccount.mail', (String) params.get('cqAccountmanagerConfigInformnewaccountMail')));
        query.addAll(client.makeParam('cq.accountmanager.config.informnewpwd.mail', (String) params.get('cqAccountmanagerConfigInformnewpwdMail')));

        List<OAS.Param> form = new List<OAS.Param>();

        return (OASComAdobeCqAccountImplAccountManag) client.invoke(
            'POST', '/system/console/configMgr/com.adobe.cq.account.impl.AccountManagementServlet', '',
            query, form,
            new Map<String, Object>(),
            new Map<String, Object>(),
            new List<String>{ 'application/json', 'text/plain' },
            new List<String>(),
            new List<String> { 'aemAuth' },
            OASComAdobeCqAccountImplAccountManag.class
        );
    }
    /**
     * 
     * 
     * @param post  (optional)
     * @param apply  (optional)
     * @param r_delete  (optional)
     * @param action  (optional)
     * @param location  (optional)
     * @param propertylist  (optional)
     * @param cqAddressLocationDefaultMaxResults  (optional)
     * @return OASComAdobeCqAddressImplLocationLoca
     * @throws OAS.ApiException if fails to make API call
     */
    public OASComAdobeCqAddressImplLocationLoca comAdobeCqAddressImplLocationLocationListServlet(Map<String, Object> params) {
        List<OAS.Param> query = new List<OAS.Param>();

        // cast query params to verify their expected type
        query.addAll(client.makeParam('post', (Boolean) params.get('post')));
        query.addAll(client.makeParam('apply', (Boolean) params.get('apply')));
        query.addAll(client.makeParam('delete', (Boolean) params.get('r_delete')));
        query.addAll(client.makeParam('action', (String) params.get('action')));
        query.addAll(client.makeParam('$location', (String) params.get('location')));
        query.addAll(client.makeParam('propertylist', (List<String>) params.get('propertylist'), 'csv'));
        query.addAll(client.makeParam('cq.address.location.default.maxResults', (Integer) params.get('cqAddressLocationDefaultMaxResults')));

        List<OAS.Param> form = new List<OAS.Param>();

        return (OASComAdobeCqAddressImplLocationLoca) client.invoke(
            'POST', '/system/console/configMgr/com.adobe.cq.address.impl.location.LocationListServlet', '',
            query, form,
            new Map<String, Object>(),
            new Map<String, Object>(),
            new List<String>{ 'application/json', 'text/plain' },
            new List<String>(),
            new List<String> { 'aemAuth' },
            OASComAdobeCqAddressImplLocationLoca.class
        );
    }
    /**
     * 
     * 
     * @param post  (optional)
     * @param apply  (optional)
     * @param r_delete  (optional)
     * @param action  (optional)
     * @param location  (optional)
     * @param propertylist  (optional)
     * @param auditlogRuleName  (optional)
     * @param auditlogRuleContentpath  (optional)
     * @param auditlogRuleMinimumage  (optional)
     * @param auditlogRuleTypes  (optional)
     * @return OASComAdobeCqAuditPurgeDamInfo
     * @throws OAS.ApiException if fails to make API call
     */
    public OASComAdobeCqAuditPurgeDamInfo comAdobeCqAuditPurgeDam(Map<String, Object> params) {
        List<OAS.Param> query = new List<OAS.Param>();

        // cast query params to verify their expected type
        query.addAll(client.makeParam('post', (Boolean) params.get('post')));
        query.addAll(client.makeParam('apply', (Boolean) params.get('apply')));
        query.addAll(client.makeParam('delete', (Boolean) params.get('r_delete')));
        query.addAll(client.makeParam('action', (String) params.get('action')));
        query.addAll(client.makeParam('$location', (String) params.get('location')));
        query.addAll(client.makeParam('propertylist', (List<String>) params.get('propertylist'), 'csv'));
        query.addAll(client.makeParam('auditlog.rule.name', (String) params.get('auditlogRuleName')));
        query.addAll(client.makeParam('auditlog.rule.contentpath', (String) params.get('auditlogRuleContentpath')));
        query.addAll(client.makeParam('auditlog.rule.minimumage', (Integer) params.get('auditlogRuleMinimumage')));
        query.addAll(client.makeParam('auditlog.rule.types', (String) params.get('auditlogRuleTypes')));

        List<OAS.Param> form = new List<OAS.Param>();

        return (OASComAdobeCqAuditPurgeDamInfo) client.invoke(
            'POST', '/system/console/configMgr/com.adobe.cq.audit.purge.Dam', '',
            query, form,
            new Map<String, Object>(),
            new Map<String, Object>(),
            new List<String>{ 'application/json', 'text/plain' },
            new List<String>(),
            new List<String> { 'aemAuth' },
            OASComAdobeCqAuditPurgeDamInfo.class
        );
    }
    /**
     * 
     * 
     * @param post  (optional)
     * @param apply  (optional)
     * @param r_delete  (optional)
     * @param action  (optional)
     * @param location  (optional)
     * @param propertylist  (optional)
     * @param auditlogRuleName  (optional)
     * @param auditlogRuleContentpath  (optional)
     * @param auditlogRuleMinimumage  (optional)
     * @param auditlogRuleTypes  (optional)
     * @return OASComAdobeCqAuditPurgePagesInfo
     * @throws OAS.ApiException if fails to make API call
     */
    public OASComAdobeCqAuditPurgePagesInfo comAdobeCqAuditPurgePages(Map<String, Object> params) {
        List<OAS.Param> query = new List<OAS.Param>();

        // cast query params to verify their expected type
        query.addAll(client.makeParam('post', (Boolean) params.get('post')));
        query.addAll(client.makeParam('apply', (Boolean) params.get('apply')));
        query.addAll(client.makeParam('delete', (Boolean) params.get('r_delete')));
        query.addAll(client.makeParam('action', (String) params.get('action')));
        query.addAll(client.makeParam('$location', (String) params.get('location')));
        query.addAll(client.makeParam('propertylist', (List<String>) params.get('propertylist'), 'csv'));
        query.addAll(client.makeParam('auditlog.rule.name', (String) params.get('auditlogRuleName')));
        query.addAll(client.makeParam('auditlog.rule.contentpath', (String) params.get('auditlogRuleContentpath')));
        query.addAll(client.makeParam('auditlog.rule.minimumage', (Integer) params.get('auditlogRuleMinimumage')));
        query.addAll(client.makeParam('auditlog.rule.types', (String) params.get('auditlogRuleTypes')));

        List<OAS.Param> form = new List<OAS.Param>();

        return (OASComAdobeCqAuditPurgePagesInfo) client.invoke(
            'POST', '/system/console/configMgr/com.adobe.cq.audit.purge.Pages', '',
            query, form,
            new Map<String, Object>(),
            new Map<String, Object>(),
            new List<String>{ 'application/json', 'text/plain' },
            new List<String>(),
            new List<String> { 'aemAuth' },
            OASComAdobeCqAuditPurgePagesInfo.class
        );
    }
    /**
     * 
     * 
     * @param post  (optional)
     * @param apply  (optional)
     * @param r_delete  (optional)
     * @param action  (optional)
     * @param location  (optional)
     * @param propertylist  (optional)
     * @param auditlogRuleName  (optional)
     * @param auditlogRuleContentpath  (optional)
     * @param auditlogRuleMinimumage  (optional)
     * @param auditlogRuleTypes  (optional)
     * @return OASComAdobeCqAuditPurgeReplicationIn
     * @throws OAS.ApiException if fails to make API call
     */
    public OASComAdobeCqAuditPurgeReplicationIn comAdobeCqAuditPurgeReplication(Map<String, Object> params) {
        List<OAS.Param> query = new List<OAS.Param>();

        // cast query params to verify their expected type
        query.addAll(client.makeParam('post', (Boolean) params.get('post')));
        query.addAll(client.makeParam('apply', (Boolean) params.get('apply')));
        query.addAll(client.makeParam('delete', (Boolean) params.get('r_delete')));
        query.addAll(client.makeParam('action', (String) params.get('action')));
        query.addAll(client.makeParam('$location', (String) params.get('location')));
        query.addAll(client.makeParam('propertylist', (List<String>) params.get('propertylist'), 'csv'));
        query.addAll(client.makeParam('auditlog.rule.name', (String) params.get('auditlogRuleName')));
        query.addAll(client.makeParam('auditlog.rule.contentpath', (String) params.get('auditlogRuleContentpath')));
        query.addAll(client.makeParam('auditlog.rule.minimumage', (Integer) params.get('auditlogRuleMinimumage')));
        query.addAll(client.makeParam('auditlog.rule.types', (String) params.get('auditlogRuleTypes')));

        List<OAS.Param> form = new List<OAS.Param>();

        return (OASComAdobeCqAuditPurgeReplicationIn) client.invoke(
            'POST', '/system/console/configMgr/com.adobe.cq.audit.purge.Replication', '',
            query, form,
            new Map<String, Object>(),
            new Map<String, Object>(),
            new List<String>{ 'application/json', 'text/plain' },
            new List<String>(),
            new List<String> { 'aemAuth' },
            OASComAdobeCqAuditPurgeReplicationIn.class
        );
    }
    /**
     * 
     * 
     * @param post  (optional)
     * @param apply  (optional)
     * @param r_delete  (optional)
     * @param action  (optional)
     * @param location  (optional)
     * @param propertylist  (optional)
     * @param serviceRanking  (optional)
     * @param keypairId  (optional)
     * @param keypairAlias  (optional)
     * @param cdnrewriterAttributes  (optional)
     * @param cdnRewriterDistributionDomain  (optional)
     * @return OASComAdobeCqCdnRewriterImplAWSCloud
     * @throws OAS.ApiException if fails to make API call
     */
    public OASComAdobeCqCdnRewriterImplAWSCloud comAdobeCqCdnRewriterImplAWSCloudFrontRewriter(Map<String, Object> params) {
        List<OAS.Param> query = new List<OAS.Param>();

        // cast query params to verify their expected type
        query.addAll(client.makeParam('post', (Boolean) params.get('post')));
        query.addAll(client.makeParam('apply', (Boolean) params.get('apply')));
        query.addAll(client.makeParam('delete', (Boolean) params.get('r_delete')));
        query.addAll(client.makeParam('action', (String) params.get('action')));
        query.addAll(client.makeParam('$location', (String) params.get('location')));
        query.addAll(client.makeParam('propertylist', (List<String>) params.get('propertylist'), 'csv'));
        query.addAll(client.makeParam('service.ranking', (Integer) params.get('serviceRanking')));
        query.addAll(client.makeParam('keypair.id', (String) params.get('keypairId')));
        query.addAll(client.makeParam('keypair.alias', (String) params.get('keypairAlias')));
        query.addAll(client.makeParams('cdnrewriter.attributes', (List<String>) params.get('cdnrewriterAttributes')));
        query.addAll(client.makeParam('cdn.rewriter.distribution.domain', (String) params.get('cdnRewriterDistributionDomain')));

        List<OAS.Param> form = new List<OAS.Param>();

        return (OASComAdobeCqCdnRewriterImplAWSCloud) client.invoke(
            'POST', '/system/console/configMgr/com.adobe.cq.cdn.rewriter.impl.AWSCloudFrontRewriter', '',
            query, form,
            new Map<String, Object>(),
            new Map<String, Object>(),
            new List<String>{ 'application/json', 'text/plain' },
            new List<String>(),
            new List<String> { 'aemAuth' },
            OASComAdobeCqCdnRewriterImplAWSCloud.class
        );
    }
    /**
     * 
     * 
     * @param post  (optional)
     * @param apply  (optional)
     * @param r_delete  (optional)
     * @param action  (optional)
     * @param location  (optional)
     * @param propertylist  (optional)
     * @param cdnConfigDistributionDomain  (optional)
     * @param cdnConfigEnableRewriting  (optional)
     * @param cdnConfigPathPrefixes  (optional)
     * @param cdnConfigCdnttl  (optional)
     * @param cdnConfigApplicationProtocol  (optional)
     * @return OASComAdobeCqCdnRewriterImplCDNConfi
     * @throws OAS.ApiException if fails to make API call
     */
    public OASComAdobeCqCdnRewriterImplCDNConfi comAdobeCqCdnRewriterImplCDNConfigServiceImpl(Map<String, Object> params) {
        List<OAS.Param> query = new List<OAS.Param>();

        // cast query params to verify their expected type
        query.addAll(client.makeParam('post', (Boolean) params.get('post')));
        query.addAll(client.makeParam('apply', (Boolean) params.get('apply')));
        query.addAll(client.makeParam('delete', (Boolean) params.get('r_delete')));
        query.addAll(client.makeParam('action', (String) params.get('action')));
        query.addAll(client.makeParam('$location', (String) params.get('location')));
        query.addAll(client.makeParam('propertylist', (List<String>) params.get('propertylist'), 'csv'));
        query.addAll(client.makeParam('cdn.config.distribution.domain', (String) params.get('cdnConfigDistributionDomain')));
        query.addAll(client.makeParam('cdn.config.enable.rewriting', (Boolean) params.get('cdnConfigEnableRewriting')));
        query.addAll(client.makeParams('cdn.config.path.prefixes', (List<String>) params.get('cdnConfigPathPrefixes')));
        query.addAll(client.makeParam('cdn.config.cdnttl', (Integer) params.get('cdnConfigCdnttl')));
        query.addAll(client.makeParam('cdn.config.application.protocol', (String) params.get('cdnConfigApplicationProtocol')));

        List<OAS.Param> form = new List<OAS.Param>();

        return (OASComAdobeCqCdnRewriterImplCDNConfi) client.invoke(
            'POST', '/system/console/configMgr/com.adobe.cq.cdn.rewriter.impl.CDNConfigServiceImpl', '',
            query, form,
            new Map<String, Object>(),
            new Map<String, Object>(),
            new List<String>{ 'application/json', 'text/plain' },
            new List<String>(),
            new List<String> { 'aemAuth' },
            OASComAdobeCqCdnRewriterImplCDNConfi.class
        );
    }
    /**
     * 
     * 
     * @param post  (optional)
     * @param apply  (optional)
     * @param r_delete  (optional)
     * @param action  (optional)
     * @param location  (optional)
     * @param propertylist  (optional)
     * @param serviceRanking  (optional)
     * @param cdnrewriterAttributes  (optional)
     * @param cdnRewriterDistributionDomain  (optional)
     * @return OASComAdobeCqCdnRewriterImplCDNRewri
     * @throws OAS.ApiException if fails to make API call
     */
    public OASComAdobeCqCdnRewriterImplCDNRewri comAdobeCqCdnRewriterImplCDNRewriter(Map<String, Object> params) {
        List<OAS.Param> query = new List<OAS.Param>();

        // cast query params to verify their expected type
        query.addAll(client.makeParam('post', (Boolean) params.get('post')));
        query.addAll(client.makeParam('apply', (Boolean) params.get('apply')));
        query.addAll(client.makeParam('delete', (Boolean) params.get('r_delete')));
        query.addAll(client.makeParam('action', (String) params.get('action')));
        query.addAll(client.makeParam('$location', (String) params.get('location')));
        query.addAll(client.makeParam('propertylist', (List<String>) params.get('propertylist'), 'csv'));
        query.addAll(client.makeParam('service.ranking', (Integer) params.get('serviceRanking')));
        query.addAll(client.makeParams('cdnrewriter.attributes', (List<String>) params.get('cdnrewriterAttributes')));
        query.addAll(client.makeParam('cdn.rewriter.distribution.domain', (String) params.get('cdnRewriterDistributionDomain')));

        List<OAS.Param> form = new List<OAS.Param>();

        return (OASComAdobeCqCdnRewriterImplCDNRewri) client.invoke(
            'POST', '/system/console/configMgr/com.adobe.cq.cdn.rewriter.impl.CDNRewriter', '',
            query, form,
            new Map<String, Object>(),
            new Map<String, Object>(),
            new List<String>{ 'application/json', 'text/plain' },
            new List<String>(),
            new List<String> { 'aemAuth' },
            OASComAdobeCqCdnRewriterImplCDNRewri.class
        );
    }
    /**
     * 
     * 
     * @param post  (optional)
     * @param apply  (optional)
     * @param r_delete  (optional)
     * @param action  (optional)
     * @param location  (optional)
     * @param propertylist  (optional)
     * @param flushAgents  (optional)
     * @return OASComAdobeCqCloudconfigCoreImplConf
     * @throws OAS.ApiException if fails to make API call
     */
    public OASComAdobeCqCloudconfigCoreImplConf comAdobeCqCloudconfigCoreImplConfigurationReplicationEventHandle(Map<String, Object> params) {
        List<OAS.Param> query = new List<OAS.Param>();

        // cast query params to verify their expected type
        query.addAll(client.makeParam('post', (Boolean) params.get('post')));
        query.addAll(client.makeParam('apply', (Boolean) params.get('apply')));
        query.addAll(client.makeParam('delete', (Boolean) params.get('r_delete')));
        query.addAll(client.makeParam('action', (String) params.get('action')));
        query.addAll(client.makeParam('$location', (String) params.get('location')));
        query.addAll(client.makeParam('propertylist', (List<String>) params.get('propertylist'), 'csv'));
        query.addAll(client.makeParams('flush.agents', (List<String>) params.get('flushAgents')));

        List<OAS.Param> form = new List<OAS.Param>();

        return (OASComAdobeCqCloudconfigCoreImplConf) client.invoke(
            'POST', '/system/console/configMgr/com.adobe.cq.cloudconfig.core.impl.ConfigurationReplicationEventHandler', '',
            query, form,
            new Map<String, Object>(),
            new Map<String, Object>(),
            new List<String>{ 'application/json', 'text/plain' },
            new List<String>(),
            new List<String> { 'aemAuth' },
            OASComAdobeCqCloudconfigCoreImplConf.class
        );
    }
    /**
     * 
     * 
     * @param post  (optional)
     * @param apply  (optional)
     * @param r_delete  (optional)
     * @param action  (optional)
     * @param location  (optional)
     * @param propertylist  (optional)
     * @param cqCommerceAssetHandlerActive  (optional)
     * @param cqCommerceAssetHandlerName  (optional)
     * @return OASComAdobeCqCommerceImplAssetDynami
     * @throws OAS.ApiException if fails to make API call
     */
    public OASComAdobeCqCommerceImplAssetDynami comAdobeCqCommerceImplAssetDynamicImageHandler(Map<String, Object> params) {
        List<OAS.Param> query = new List<OAS.Param>();

        // cast query params to verify their expected type
        query.addAll(client.makeParam('post', (Boolean) params.get('post')));
        query.addAll(client.makeParam('apply', (Boolean) params.get('apply')));
        query.addAll(client.makeParam('delete', (Boolean) params.get('r_delete')));
        query.addAll(client.makeParam('action', (String) params.get('action')));
        query.addAll(client.makeParam('$location', (String) params.get('location')));
        query.addAll(client.makeParam('propertylist', (List<String>) params.get('propertylist'), 'csv'));
        query.addAll(client.makeParam('cq.commerce.asset.handler.active', (Boolean) params.get('cqCommerceAssetHandlerActive')));
        query.addAll(client.makeParam('cq.commerce.asset.handler.name', (String) params.get('cqCommerceAssetHandlerName')));

        List<OAS.Param> form = new List<OAS.Param>();

        return (OASComAdobeCqCommerceImplAssetDynami) client.invoke(
            'POST', '/system/console/configMgr/com.adobe.cq.commerce.impl.asset.DynamicImageHandler', '',
            query, form,
            new Map<String, Object>(),
            new Map<String, Object>(),
            new List<String>{ 'application/json', 'text/plain' },
            new List<String>(),
            new List<String> { 'aemAuth' },
            OASComAdobeCqCommerceImplAssetDynami.class
        );
    }
    /**
     * 
     * 
     * @param post  (optional)
     * @param apply  (optional)
     * @param r_delete  (optional)
     * @param action  (optional)
     * @param location  (optional)
     * @param propertylist  (optional)
     * @param cqCommerceAssetHandlerFallback  (optional)
     * @return OASComAdobeCqCommerceImplAssetProduc
     * @throws OAS.ApiException if fails to make API call
     */
    public OASComAdobeCqCommerceImplAssetProduc comAdobeCqCommerceImplAssetProductAssetHandlerProviderImpl(Map<String, Object> params) {
        List<OAS.Param> query = new List<OAS.Param>();

        // cast query params to verify their expected type
        query.addAll(client.makeParam('post', (Boolean) params.get('post')));
        query.addAll(client.makeParam('apply', (Boolean) params.get('apply')));
        query.addAll(client.makeParam('delete', (Boolean) params.get('r_delete')));
        query.addAll(client.makeParam('action', (String) params.get('action')));
        query.addAll(client.makeParam('$location', (String) params.get('location')));
        query.addAll(client.makeParam('propertylist', (List<String>) params.get('propertylist'), 'csv'));
        query.addAll(client.makeParam('cq.commerce.asset.handler.fallback', (String) params.get('cqCommerceAssetHandlerFallback')));

        List<OAS.Param> form = new List<OAS.Param>();

        return (OASComAdobeCqCommerceImplAssetProduc) client.invoke(
            'POST', '/system/console/configMgr/com.adobe.cq.commerce.impl.asset.ProductAssetHandlerProviderImpl', '',
            query, form,
            new Map<String, Object>(),
            new Map<String, Object>(),
            new List<String>{ 'application/json', 'text/plain' },
            new List<String>(),
            new List<String> { 'aemAuth' },
            OASComAdobeCqCommerceImplAssetProduc.class
        );
    }
    /**
     * 
     * 
     * @param post  (optional)
     * @param apply  (optional)
     * @param r_delete  (optional)
     * @param action  (optional)
     * @param location  (optional)
     * @param propertylist  (optional)
     * @param cqCommerceAssetHandlerActive  (optional)
     * @param cqCommerceAssetHandlerName  (optional)
     * @return OASComAdobeCqCommerceImplAssetStatic
     * @throws OAS.ApiException if fails to make API call
     */
    public OASComAdobeCqCommerceImplAssetStatic comAdobeCqCommerceImplAssetStaticImageHandler(Map<String, Object> params) {
        List<OAS.Param> query = new List<OAS.Param>();

        // cast query params to verify their expected type
        query.addAll(client.makeParam('post', (Boolean) params.get('post')));
        query.addAll(client.makeParam('apply', (Boolean) params.get('apply')));
        query.addAll(client.makeParam('delete', (Boolean) params.get('r_delete')));
        query.addAll(client.makeParam('action', (String) params.get('action')));
        query.addAll(client.makeParam('$location', (String) params.get('location')));
        query.addAll(client.makeParam('propertylist', (List<String>) params.get('propertylist'), 'csv'));
        query.addAll(client.makeParam('cq.commerce.asset.handler.active', (Boolean) params.get('cqCommerceAssetHandlerActive')));
        query.addAll(client.makeParam('cq.commerce.asset.handler.name', (String) params.get('cqCommerceAssetHandlerName')));

        List<OAS.Param> form = new List<OAS.Param>();

        return (OASComAdobeCqCommerceImplAssetStatic) client.invoke(
            'POST', '/system/console/configMgr/com.adobe.cq.commerce.impl.asset.StaticImageHandler', '',
            query, form,
            new Map<String, Object>(),
            new Map<String, Object>(),
            new List<String>{ 'application/json', 'text/plain' },
            new List<String>(),
            new List<String> { 'aemAuth' },
            OASComAdobeCqCommerceImplAssetStatic.class
        );
    }
    /**
     * 
     * 
     * @param post  (optional)
     * @param apply  (optional)
     * @param r_delete  (optional)
     * @param action  (optional)
     * @param location  (optional)
     * @param propertylist  (optional)
     * @param cqCommerceAssetHandlerActive  (optional)
     * @param cqCommerceAssetHandlerName  (optional)
     * @return OASComAdobeCqCommerceImplAssetVideoH
     * @throws OAS.ApiException if fails to make API call
     */
    public OASComAdobeCqCommerceImplAssetVideoH comAdobeCqCommerceImplAssetVideoHandler(Map<String, Object> params) {
        List<OAS.Param> query = new List<OAS.Param>();

        // cast query params to verify their expected type
        query.addAll(client.makeParam('post', (Boolean) params.get('post')));
        query.addAll(client.makeParam('apply', (Boolean) params.get('apply')));
        query.addAll(client.makeParam('delete', (Boolean) params.get('r_delete')));
        query.addAll(client.makeParam('action', (String) params.get('action')));
        query.addAll(client.makeParam('$location', (String) params.get('location')));
        query.addAll(client.makeParam('propertylist', (List<String>) params.get('propertylist'), 'csv'));
        query.addAll(client.makeParam('cq.commerce.asset.handler.active', (Boolean) params.get('cqCommerceAssetHandlerActive')));
        query.addAll(client.makeParam('cq.commerce.asset.handler.name', (String) params.get('cqCommerceAssetHandlerName')));

        List<OAS.Param> form = new List<OAS.Param>();

        return (OASComAdobeCqCommerceImplAssetVideoH) client.invoke(
            'POST', '/system/console/configMgr/com.adobe.cq.commerce.impl.asset.VideoHandler', '',
            query, form,
            new Map<String, Object>(),
            new Map<String, Object>(),
            new List<String>{ 'application/json', 'text/plain' },
            new List<String>(),
            new List<String> { 'aemAuth' },
            OASComAdobeCqCommerceImplAssetVideoH.class
        );
    }
    /**
     * 
     * 
     * @param post  (optional)
     * @param apply  (optional)
     * @param r_delete  (optional)
     * @param action  (optional)
     * @param location  (optional)
     * @param propertylist  (optional)
     * @param cqCommercePromotionRoot  (optional)
     * @return OASComAdobeCqCommerceImplPromotionPr
     * @throws OAS.ApiException if fails to make API call
     */
    public OASComAdobeCqCommerceImplPromotionPr comAdobeCqCommerceImplPromotionPromotionManagerImpl(Map<String, Object> params) {
        List<OAS.Param> query = new List<OAS.Param>();

        // cast query params to verify their expected type
        query.addAll(client.makeParam('post', (Boolean) params.get('post')));
        query.addAll(client.makeParam('apply', (Boolean) params.get('apply')));
        query.addAll(client.makeParam('delete', (Boolean) params.get('r_delete')));
        query.addAll(client.makeParam('action', (String) params.get('action')));
        query.addAll(client.makeParam('$location', (String) params.get('location')));
        query.addAll(client.makeParam('propertylist', (List<String>) params.get('propertylist'), 'csv'));
        query.addAll(client.makeParam('cq.commerce.promotion.root', (String) params.get('cqCommercePromotionRoot')));

        List<OAS.Param> form = new List<OAS.Param>();

        return (OASComAdobeCqCommerceImplPromotionPr) client.invoke(
            'POST', '/system/console/configMgr/com.adobe.cq.commerce.impl.promotion.PromotionManagerImpl', '',
            query, form,
            new Map<String, Object>(),
            new Map<String, Object>(),
            new List<String>{ 'application/json', 'text/plain' },
            new List<String>(),
            new List<String> { 'aemAuth' },
            OASComAdobeCqCommerceImplPromotionPr.class
        );
    }
    /**
     * 
     * 
     * @param post  (optional)
     * @param apply  (optional)
     * @param r_delete  (optional)
     * @param action  (optional)
     * @param location  (optional)
     * @param propertylist  (optional)
     * @param cqCommerceCataloggeneratorBucketsize  (optional)
     * @param cqCommerceCataloggeneratorBucketname  (optional)
     * @param cqCommerceCataloggeneratorExcludedtemplateproperties  (optional)
     * @return OASComAdobeCqCommercePimImplCatalogg
     * @throws OAS.ApiException if fails to make API call
     */
    public OASComAdobeCqCommercePimImplCatalogg comAdobeCqCommercePimImplCataloggeneratorCatalogGeneratorImpl(Map<String, Object> params) {
        List<OAS.Param> query = new List<OAS.Param>();

        // cast query params to verify their expected type
        query.addAll(client.makeParam('post', (Boolean) params.get('post')));
        query.addAll(client.makeParam('apply', (Boolean) params.get('apply')));
        query.addAll(client.makeParam('delete', (Boolean) params.get('r_delete')));
        query.addAll(client.makeParam('action', (String) params.get('action')));
        query.addAll(client.makeParam('$location', (String) params.get('location')));
        query.addAll(client.makeParam('propertylist', (List<String>) params.get('propertylist'), 'csv'));
        query.addAll(client.makeParam('cq.commerce.cataloggenerator.bucketsize', (Integer) params.get('cqCommerceCataloggeneratorBucketsize')));
        query.addAll(client.makeParam('cq.commerce.cataloggenerator.bucketname', (String) params.get('cqCommerceCataloggeneratorBucketname')));
        query.addAll(client.makeParams('cq.commerce.cataloggenerator.excludedtemplateproperties', (List<String>) params.get('cqCommerceCataloggeneratorExcludedtemplateproperties')));

        List<OAS.Param> form = new List<OAS.Param>();

        return (OASComAdobeCqCommercePimImplCatalogg) client.invoke(
            'POST', '/system/console/configMgr/com.adobe.cq.commerce.pim.impl.cataloggenerator.CatalogGeneratorImpl', '',
            query, form,
            new Map<String, Object>(),
            new Map<String, Object>(),
            new List<String>{ 'application/json', 'text/plain' },
            new List<String>(),
            new List<String> { 'aemAuth' },
            OASComAdobeCqCommercePimImplCatalogg.class
        );
    }
    /**
     * 
     * 
     * @param post  (optional)
     * @param apply  (optional)
     * @param r_delete  (optional)
     * @param action  (optional)
     * @param location  (optional)
     * @param propertylist  (optional)
     * @param cqCommercePageeventlistenerEnabled  (optional)
     * @return OASComAdobeCqCommercePimImplPageEven
     * @throws OAS.ApiException if fails to make API call
     */
    public OASComAdobeCqCommercePimImplPageEven comAdobeCqCommercePimImplPageEventListener(Map<String, Object> params) {
        List<OAS.Param> query = new List<OAS.Param>();

        // cast query params to verify their expected type
        query.addAll(client.makeParam('post', (Boolean) params.get('post')));
        query.addAll(client.makeParam('apply', (Boolean) params.get('apply')));
        query.addAll(client.makeParam('delete', (Boolean) params.get('r_delete')));
        query.addAll(client.makeParam('action', (String) params.get('action')));
        query.addAll(client.makeParam('$location', (String) params.get('location')));
        query.addAll(client.makeParam('propertylist', (List<String>) params.get('propertylist'), 'csv'));
        query.addAll(client.makeParam('cq.commerce.pageeventlistener.enabled', (Boolean) params.get('cqCommercePageeventlistenerEnabled')));

        List<OAS.Param> form = new List<OAS.Param>();

        return (OASComAdobeCqCommercePimImplPageEven) client.invoke(
            'POST', '/system/console/configMgr/com.adobe.cq.commerce.pim.impl.PageEventListener', '',
            query, form,
            new Map<String, Object>(),
            new Map<String, Object>(),
            new List<String>{ 'application/json', 'text/plain' },
            new List<String>(),
            new List<String> { 'aemAuth' },
            OASComAdobeCqCommercePimImplPageEven.class
        );
    }
    /**
     * 
     * 
     * @param post  (optional)
     * @param apply  (optional)
     * @param r_delete  (optional)
     * @param action  (optional)
     * @param location  (optional)
     * @param propertylist  (optional)
     * @param feedGeneratorAlgorithm  (optional)
     * @return OASComAdobeCqCommercePimImplProductf
     * @throws OAS.ApiException if fails to make API call
     */
    public OASComAdobeCqCommercePimImplProductf comAdobeCqCommercePimImplProductfeedProductFeedServiceImpl(Map<String, Object> params) {
        List<OAS.Param> query = new List<OAS.Param>();

        // cast query params to verify their expected type
        query.addAll(client.makeParam('post', (Boolean) params.get('post')));
        query.addAll(client.makeParam('apply', (Boolean) params.get('apply')));
        query.addAll(client.makeParam('delete', (Boolean) params.get('r_delete')));
        query.addAll(client.makeParam('action', (String) params.get('action')));
        query.addAll(client.makeParam('$location', (String) params.get('location')));
        query.addAll(client.makeParam('propertylist', (List<String>) params.get('propertylist'), 'csv'));
        query.addAll(client.makeParam('Feed generator algorithm', (String) params.get('feedGeneratorAlgorithm')));

        List<OAS.Param> form = new List<OAS.Param>();

        return (OASComAdobeCqCommercePimImplProductf) client.invoke(
            'POST', '/system/console/configMgr/com.adobe.cq.commerce.pim.impl.productfeed.ProductFeedServiceImpl', '',
            query, form,
            new Map<String, Object>(),
            new Map<String, Object>(),
            new List<String>{ 'application/json', 'text/plain' },
            new List<String>(),
            new List<String> { 'aemAuth' },
            OASComAdobeCqCommercePimImplProductf.class
        );
    }
    /**
     * 
     * 
     * @param post  (optional)
     * @param apply  (optional)
     * @param r_delete  (optional)
     * @param action  (optional)
     * @param location  (optional)
     * @param propertylist  (optional)
     * @param reportingservicesUrl  (optional)
     * @return OASComAdobeCqContentinsightImplRepor
     * @throws OAS.ApiException if fails to make API call
     */
    public OASComAdobeCqContentinsightImplRepor comAdobeCqContentinsightImplReportingServicesSettingsProvider(Map<String, Object> params) {
        List<OAS.Param> query = new List<OAS.Param>();

        // cast query params to verify their expected type
        query.addAll(client.makeParam('post', (Boolean) params.get('post')));
        query.addAll(client.makeParam('apply', (Boolean) params.get('apply')));
        query.addAll(client.makeParam('delete', (Boolean) params.get('r_delete')));
        query.addAll(client.makeParam('action', (String) params.get('action')));
        query.addAll(client.makeParam('$location', (String) params.get('location')));
        query.addAll(client.makeParam('propertylist', (List<String>) params.get('propertylist'), 'csv'));
        query.addAll(client.makeParam('reportingservices.url', (String) params.get('reportingservicesUrl')));

        List<OAS.Param> form = new List<OAS.Param>();

        return (OASComAdobeCqContentinsightImplRepor) client.invoke(
            'POST', '/system/console/configMgr/com.adobe.cq.contentinsight.impl.ReportingServicesSettingsProvider', '',
            query, form,
            new Map<String, Object>(),
            new Map<String, Object>(),
            new List<String>{ 'application/json', 'text/plain' },
            new List<String>(),
            new List<String> { 'aemAuth' },
            OASComAdobeCqContentinsightImplRepor.class
        );
    }
    /**
     * 
     * 
     * @param post  (optional)
     * @param apply  (optional)
     * @param r_delete  (optional)
     * @param action  (optional)
     * @param location  (optional)
     * @param propertylist  (optional)
     * @param brightedgeUrl  (optional)
     * @return OASComAdobeCqContentinsightImplServl
     * @throws OAS.ApiException if fails to make API call
     */
    public OASComAdobeCqContentinsightImplServl comAdobeCqContentinsightImplServletsBrightEdgeProxyServlet(Map<String, Object> params) {
        List<OAS.Param> query = new List<OAS.Param>();

        // cast query params to verify their expected type
        query.addAll(client.makeParam('post', (Boolean) params.get('post')));
        query.addAll(client.makeParam('apply', (Boolean) params.get('apply')));
        query.addAll(client.makeParam('delete', (Boolean) params.get('r_delete')));
        query.addAll(client.makeParam('action', (String) params.get('action')));
        query.addAll(client.makeParam('$location', (String) params.get('location')));
        query.addAll(client.makeParam('propertylist', (List<String>) params.get('propertylist'), 'csv'));
        query.addAll(client.makeParam('brightedge.url', (String) params.get('brightedgeUrl')));

        List<OAS.Param> form = new List<OAS.Param>();

        return (OASComAdobeCqContentinsightImplServl) client.invoke(
            'POST', '/system/console/configMgr/com.adobe.cq.contentinsight.impl.servlets.BrightEdgeProxyServlet', '',
            query, form,
            new Map<String, Object>(),
            new Map<String, Object>(),
            new List<String>{ 'application/json', 'text/plain' },
            new List<String>(),
            new List<String> { 'aemAuth' },
            OASComAdobeCqContentinsightImplServl.class
        );
    }
    /**
     * 
     * 
     * @param post  (optional)
     * @param apply  (optional)
     * @param r_delete  (optional)
     * @param action  (optional)
     * @param location  (optional)
     * @param propertylist  (optional)
     * @param reportingservicesProxyWhitelist  (optional)
     * @return OASComAdobeCqContentinsightImplServl
     * @throws OAS.ApiException if fails to make API call
     */
    public OASComAdobeCqContentinsightImplServl comAdobeCqContentinsightImplServletsReportingServicesProxyServle(Map<String, Object> params) {
        List<OAS.Param> query = new List<OAS.Param>();

        // cast query params to verify their expected type
        query.addAll(client.makeParam('post', (Boolean) params.get('post')));
        query.addAll(client.makeParam('apply', (Boolean) params.get('apply')));
        query.addAll(client.makeParam('delete', (Boolean) params.get('r_delete')));
        query.addAll(client.makeParam('action', (String) params.get('action')));
        query.addAll(client.makeParam('$location', (String) params.get('location')));
        query.addAll(client.makeParam('propertylist', (List<String>) params.get('propertylist'), 'csv'));
        query.addAll(client.makeParams('reportingservices.proxy.whitelist', (List<String>) params.get('reportingservicesProxyWhitelist')));

        List<OAS.Param> form = new List<OAS.Param>();

        return (OASComAdobeCqContentinsightImplServl) client.invoke(
            'POST', '/system/console/configMgr/com.adobe.cq.contentinsight.impl.servlets.ReportingServicesProxyServlet', '',
            query, form,
            new Map<String, Object>(),
            new Map<String, Object>(),
            new List<String>{ 'application/json', 'text/plain' },
            new List<String>(),
            new List<String> { 'aemAuth' },
            OASComAdobeCqContentinsightImplServl.class
        );
    }
    /**
     * 
     * 
     * @param post  (optional)
     * @param apply  (optional)
     * @param r_delete  (optional)
     * @param action  (optional)
     * @param location  (optional)
     * @param propertylist  (optional)
     * @param damCfmComponentResourceType  (optional)
     * @param damCfmComponentFileReferenceProp  (optional)
     * @param damCfmComponentElementsProp  (optional)
     * @param damCfmComponentVariationProp  (optional)
     * @return OASComAdobeCqDamCfmImplComponentComp
     * @throws OAS.ApiException if fails to make API call
     */
    public OASComAdobeCqDamCfmImplComponentComp comAdobeCqDamCfmImplComponentComponentConfigImpl(Map<String, Object> params) {
        List<OAS.Param> query = new List<OAS.Param>();

        // cast query params to verify their expected type
        query.addAll(client.makeParam('post', (Boolean) params.get('post')));
        query.addAll(client.makeParam('apply', (Boolean) params.get('apply')));
        query.addAll(client.makeParam('delete', (Boolean) params.get('r_delete')));
        query.addAll(client.makeParam('action', (String) params.get('action')));
        query.addAll(client.makeParam('$location', (String) params.get('location')));
        query.addAll(client.makeParam('propertylist', (List<String>) params.get('propertylist'), 'csv'));
        query.addAll(client.makeParam('dam.cfm.component.resourceType', (String) params.get('damCfmComponentResourceType')));
        query.addAll(client.makeParam('dam.cfm.component.fileReferenceProp', (String) params.get('damCfmComponentFileReferenceProp')));
        query.addAll(client.makeParam('dam.cfm.component.elementsProp', (String) params.get('damCfmComponentElementsProp')));
        query.addAll(client.makeParam('dam.cfm.component.variationProp', (String) params.get('damCfmComponentVariationProp')));

        List<OAS.Param> form = new List<OAS.Param>();

        return (OASComAdobeCqDamCfmImplComponentComp) client.invoke(
            'POST', '/system/console/configMgr/com.adobe.cq.dam.cfm.impl.component.ComponentConfigImpl', '',
            query, form,
            new Map<String, Object>(),
            new Map<String, Object>(),
            new List<String>{ 'application/json', 'text/plain' },
            new List<String>(),
            new List<String> { 'aemAuth' },
            OASComAdobeCqDamCfmImplComponentComp.class
        );
    }
    /**
     * 
     * 
     * @param post  (optional)
     * @param apply  (optional)
     * @param r_delete  (optional)
     * @param action  (optional)
     * @param location  (optional)
     * @param propertylist  (optional)
     * @param damCfmResourceTypes  (optional)
     * @param damCfmReferenceProperties  (optional)
     * @return OASComAdobeCqDamCfmImplConfFeatureCo
     * @throws OAS.ApiException if fails to make API call
     */
    public OASComAdobeCqDamCfmImplConfFeatureCo comAdobeCqDamCfmImplConfFeatureConfigImpl(Map<String, Object> params) {
        List<OAS.Param> query = new List<OAS.Param>();

        // cast query params to verify their expected type
        query.addAll(client.makeParam('post', (Boolean) params.get('post')));
        query.addAll(client.makeParam('apply', (Boolean) params.get('apply')));
        query.addAll(client.makeParam('delete', (Boolean) params.get('r_delete')));
        query.addAll(client.makeParam('action', (String) params.get('action')));
        query.addAll(client.makeParam('$location', (String) params.get('location')));
        query.addAll(client.makeParam('propertylist', (List<String>) params.get('propertylist'), 'csv'));
        query.addAll(client.makeParams('dam.cfm.resourceTypes', (List<String>) params.get('damCfmResourceTypes')));
        query.addAll(client.makeParams('dam.cfm.referenceProperties', (List<String>) params.get('damCfmReferenceProperties')));

        List<OAS.Param> form = new List<OAS.Param>();

        return (OASComAdobeCqDamCfmImplConfFeatureCo) client.invoke(
            'POST', '/system/console/configMgr/com.adobe.cq.dam.cfm.impl.conf.FeatureConfigImpl', '',
            query, form,
            new Map<String, Object>(),
            new Map<String, Object>(),
            new List<String>{ 'application/json', 'text/plain' },
            new List<String>(),
            new List<String> { 'aemAuth' },
            OASComAdobeCqDamCfmImplConfFeatureCo.class
        );
    }
    /**
     * 
     * 
     * @param post  (optional)
     * @param apply  (optional)
     * @param r_delete  (optional)
     * @param action  (optional)
     * @param location  (optional)
     * @param propertylist  (optional)
     * @param pipelineType  (optional)
     * @return OASComAdobeCqDamCfmImplContentRewrit
     * @throws OAS.ApiException if fails to make API call
     */
    public OASComAdobeCqDamCfmImplContentRewrit comAdobeCqDamCfmImplContentRewriterAssetProcessor(Map<String, Object> params) {
        List<OAS.Param> query = new List<OAS.Param>();

        // cast query params to verify their expected type
        query.addAll(client.makeParam('post', (Boolean) params.get('post')));
        query.addAll(client.makeParam('apply', (Boolean) params.get('apply')));
        query.addAll(client.makeParam('delete', (Boolean) params.get('r_delete')));
        query.addAll(client.makeParam('action', (String) params.get('action')));
        query.addAll(client.makeParam('$location', (String) params.get('location')));
        query.addAll(client.makeParam('propertylist', (List<String>) params.get('propertylist'), 'csv'));
        query.addAll(client.makeParam('pipeline.type', (String) params.get('pipelineType')));

        List<OAS.Param> form = new List<OAS.Param>();

        return (OASComAdobeCqDamCfmImplContentRewrit) client.invoke(
            'POST', '/system/console/configMgr/com.adobe.cq.dam.cfm.impl.content.rewriter.AssetProcessor', '',
            query, form,
            new Map<String, Object>(),
            new Map<String, Object>(),
            new List<String>{ 'application/json', 'text/plain' },
            new List<String>(),
            new List<String> { 'aemAuth' },
            OASComAdobeCqDamCfmImplContentRewrit.class
        );
    }
    /**
     * 
     * 
     * @param post  (optional)
     * @param apply  (optional)
     * @param r_delete  (optional)
     * @param action  (optional)
     * @param location  (optional)
     * @param propertylist  (optional)
     * @param pipelineType  (optional)
     * @return OASComAdobeCqDamCfmImplContentRewrit
     * @throws OAS.ApiException if fails to make API call
     */
    public OASComAdobeCqDamCfmImplContentRewrit comAdobeCqDamCfmImplContentRewriterParRangeFilter(Map<String, Object> params) {
        List<OAS.Param> query = new List<OAS.Param>();

        // cast query params to verify their expected type
        query.addAll(client.makeParam('post', (Boolean) params.get('post')));
        query.addAll(client.makeParam('apply', (Boolean) params.get('apply')));
        query.addAll(client.makeParam('delete', (Boolean) params.get('r_delete')));
        query.addAll(client.makeParam('action', (String) params.get('action')));
        query.addAll(client.makeParam('$location', (String) params.get('location')));
        query.addAll(client.makeParam('propertylist', (List<String>) params.get('propertylist'), 'csv'));
        query.addAll(client.makeParam('pipeline.type', (String) params.get('pipelineType')));

        List<OAS.Param> form = new List<OAS.Param>();

        return (OASComAdobeCqDamCfmImplContentRewrit) client.invoke(
            'POST', '/system/console/configMgr/com.adobe.cq.dam.cfm.impl.content.rewriter.ParRangeFilter', '',
            query, form,
            new Map<String, Object>(),
            new Map<String, Object>(),
            new List<String>{ 'application/json', 'text/plain' },
            new List<String>(),
            new List<String> { 'aemAuth' },
            OASComAdobeCqDamCfmImplContentRewrit.class
        );
    }
    /**
     * 
     * 
     * @param post  (optional)
     * @param apply  (optional)
     * @param r_delete  (optional)
     * @param action  (optional)
     * @param location  (optional)
     * @param propertylist  (optional)
     * @param pipelineType  (optional)
     * @return OASComAdobeCqDamCfmImplContentRewrit
     * @throws OAS.ApiException if fails to make API call
     */
    public OASComAdobeCqDamCfmImplContentRewrit comAdobeCqDamCfmImplContentRewriterPayloadFilter(Map<String, Object> params) {
        List<OAS.Param> query = new List<OAS.Param>();

        // cast query params to verify their expected type
        query.addAll(client.makeParam('post', (Boolean) params.get('post')));
        query.addAll(client.makeParam('apply', (Boolean) params.get('apply')));
        query.addAll(client.makeParam('delete', (Boolean) params.get('r_delete')));
        query.addAll(client.makeParam('action', (String) params.get('action')));
        query.addAll(client.makeParam('$location', (String) params.get('location')));
        query.addAll(client.makeParam('propertylist', (List<String>) params.get('propertylist'), 'csv'));
        query.addAll(client.makeParam('pipeline.type', (String) params.get('pipelineType')));

        List<OAS.Param> form = new List<OAS.Param>();

        return (OASComAdobeCqDamCfmImplContentRewrit) client.invoke(
            'POST', '/system/console/configMgr/com.adobe.cq.dam.cfm.impl.content.rewriter.PayloadFilter', '',
            query, form,
            new Map<String, Object>(),
            new Map<String, Object>(),
            new List<String>{ 'application/json', 'text/plain' },
            new List<String>(),
            new List<String> { 'aemAuth' },
            OASComAdobeCqDamCfmImplContentRewrit.class
        );
    }
    /**
     * 
     * 
     * @param post  (optional)
     * @param apply  (optional)
     * @param r_delete  (optional)
     * @param action  (optional)
     * @param location  (optional)
     * @param propertylist  (optional)
     * @param maxMemory  (optional)
     * @return OASComAdobeCqDamDmProcessImagePTiffM
     * @throws OAS.ApiException if fails to make API call
     */
    public OASComAdobeCqDamDmProcessImagePTiffM comAdobeCqDamDmProcessImagePTiffManagerImpl(Map<String, Object> params) {
        List<OAS.Param> query = new List<OAS.Param>();

        // cast query params to verify their expected type
        query.addAll(client.makeParam('post', (Boolean) params.get('post')));
        query.addAll(client.makeParam('apply', (Boolean) params.get('apply')));
        query.addAll(client.makeParam('delete', (Boolean) params.get('r_delete')));
        query.addAll(client.makeParam('action', (String) params.get('action')));
        query.addAll(client.makeParam('$location', (String) params.get('location')));
        query.addAll(client.makeParam('propertylist', (List<String>) params.get('propertylist'), 'csv'));
        query.addAll(client.makeParam('maxMemory', (Integer) params.get('maxMemory')));

        List<OAS.Param> form = new List<OAS.Param>();

        return (OASComAdobeCqDamDmProcessImagePTiffM) client.invoke(
            'POST', '/system/console/configMgr/com.adobe.cq.dam.dm.process.image.PTiffManagerImpl', '',
            query, form,
            new Map<String, Object>(),
            new Map<String, Object>(),
            new List<String>{ 'application/json', 'text/plain' },
            new List<String>(),
            new List<String> { 'aemAuth' },
            OASComAdobeCqDamDmProcessImagePTiffM.class
        );
    }
    /**
     * 
     * 
     * @param post  (optional)
     * @param apply  (optional)
     * @param r_delete  (optional)
     * @param action  (optional)
     * @param location  (optional)
     * @param propertylist  (optional)
     * @param dmreplicateonmodifyEnabled  (optional)
     * @param dmreplicateonmodifyForcesyncdeletes  (optional)
     * @return OASComAdobeCqDamIpsImplReplicationTr
     * @throws OAS.ApiException if fails to make API call
     */
    public OASComAdobeCqDamIpsImplReplicationTr comAdobeCqDamIpsImplReplicationTriggerReplicateOnModifyWorker(Map<String, Object> params) {
        List<OAS.Param> query = new List<OAS.Param>();

        // cast query params to verify their expected type
        query.addAll(client.makeParam('post', (Boolean) params.get('post')));
        query.addAll(client.makeParam('apply', (Boolean) params.get('apply')));
        query.addAll(client.makeParam('delete', (Boolean) params.get('r_delete')));
        query.addAll(client.makeParam('action', (String) params.get('action')));
        query.addAll(client.makeParam('$location', (String) params.get('location')));
        query.addAll(client.makeParam('propertylist', (List<String>) params.get('propertylist'), 'csv'));
        query.addAll(client.makeParam('dmreplicateonmodify.enabled', (Boolean) params.get('dmreplicateonmodifyEnabled')));
        query.addAll(client.makeParam('dmreplicateonmodify.forcesyncdeletes', (Boolean) params.get('dmreplicateonmodifyForcesyncdeletes')));

        List<OAS.Param> form = new List<OAS.Param>();

        return (OASComAdobeCqDamIpsImplReplicationTr) client.invoke(
            'POST', '/system/console/configMgr/com.adobe.cq.dam.ips.impl.replication.trigger.ReplicateOnModifyWorker', '',
            query, form,
            new Map<String, Object>(),
            new Map<String, Object>(),
            new List<String>{ 'application/json', 'text/plain' },
            new List<String>(),
            new List<String> { 'aemAuth' },
            OASComAdobeCqDamIpsImplReplicationTr.class
        );
    }
    /**
     * 
     * 
     * @param post  (optional)
     * @param apply  (optional)
     * @param r_delete  (optional)
     * @param action  (optional)
     * @param location  (optional)
     * @param propertylist  (optional)
     * @param comAdobeDamMacSyncClientSoTimeout  (optional)
     * @return OASComAdobeCqDamMacSyncHelperImplMAC
     * @throws OAS.ApiException if fails to make API call
     */
    public OASComAdobeCqDamMacSyncHelperImplMAC comAdobeCqDamMacSyncHelperImplMACSyncClientImpl(Map<String, Object> params) {
        List<OAS.Param> query = new List<OAS.Param>();

        // cast query params to verify their expected type
        query.addAll(client.makeParam('post', (Boolean) params.get('post')));
        query.addAll(client.makeParam('apply', (Boolean) params.get('apply')));
        query.addAll(client.makeParam('delete', (Boolean) params.get('r_delete')));
        query.addAll(client.makeParam('action', (String) params.get('action')));
        query.addAll(client.makeParam('$location', (String) params.get('location')));
        query.addAll(client.makeParam('propertylist', (List<String>) params.get('propertylist'), 'csv'));
        query.addAll(client.makeParam('com.adobe.dam.mac.sync.client.so.timeout', (Integer) params.get('comAdobeDamMacSyncClientSoTimeout')));

        List<OAS.Param> form = new List<OAS.Param>();

        return (OASComAdobeCqDamMacSyncHelperImplMAC) client.invoke(
            'POST', '/system/console/configMgr/com.adobe.cq.dam.mac.sync.helper.impl.MACSyncClientImpl', '',
            query, form,
            new Map<String, Object>(),
            new Map<String, Object>(),
            new List<String>{ 'application/json', 'text/plain' },
            new List<String>(),
            new List<String> { 'aemAuth' },
            OASComAdobeCqDamMacSyncHelperImplMAC.class
        );
    }
    /**
     * 
     * 
     * @param post  (optional)
     * @param apply  (optional)
     * @param r_delete  (optional)
     * @param action  (optional)
     * @param location  (optional)
     * @param propertylist  (optional)
     * @param comAdobeCqDamMacSyncDamsyncserviceRegisteredPaths  (optional)
     * @param comAdobeCqDamMacSyncDamsyncserviceSyncRenditions  (optional)
     * @param comAdobeCqDamMacSyncDamsyncserviceReplicateThreadWaitMs  (optional)
     * @param comAdobeCqDamMacSyncDamsyncservicePlatform  (optional)
     * @return OASComAdobeCqDamMacSyncImplDAMSyncSe
     * @throws OAS.ApiException if fails to make API call
     */
    public OASComAdobeCqDamMacSyncImplDAMSyncSe comAdobeCqDamMacSyncImplDAMSyncServiceImpl(Map<String, Object> params) {
        List<OAS.Param> query = new List<OAS.Param>();

        // cast query params to verify their expected type
        query.addAll(client.makeParam('post', (Boolean) params.get('post')));
        query.addAll(client.makeParam('apply', (Boolean) params.get('apply')));
        query.addAll(client.makeParam('delete', (Boolean) params.get('r_delete')));
        query.addAll(client.makeParam('action', (String) params.get('action')));
        query.addAll(client.makeParam('$location', (String) params.get('location')));
        query.addAll(client.makeParam('propertylist', (List<String>) params.get('propertylist'), 'csv'));
        query.addAll(client.makeParams('com.adobe.cq.dam.mac.sync.damsyncservice.registered_paths', (List<String>) params.get('comAdobeCqDamMacSyncDamsyncserviceRegisteredPaths')));
        query.addAll(client.makeParam('com.adobe.cq.dam.mac.sync.damsyncservice.sync.renditions', (Boolean) params.get('comAdobeCqDamMacSyncDamsyncserviceSyncRenditions')));
        query.addAll(client.makeParam('com.adobe.cq.dam.mac.sync.damsyncservice.replicate.thread.wait.ms', (Integer) params.get('comAdobeCqDamMacSyncDamsyncserviceReplicateThreadWaitMs')));
        query.addAll(client.makeParam('com.adobe.cq.dam.mac.sync.damsyncservice.platform', (String) params.get('comAdobeCqDamMacSyncDamsyncservicePlatform')));

        List<OAS.Param> form = new List<OAS.Param>();

        return (OASComAdobeCqDamMacSyncImplDAMSyncSe) client.invoke(
            'POST', '/system/console/configMgr/com.adobe.cq.dam.mac.sync.impl.DAMSyncServiceImpl', '',
            query, form,
            new Map<String, Object>(),
            new Map<String, Object>(),
            new List<String>{ 'application/json', 'text/plain' },
            new List<String>(),
            new List<String> { 'aemAuth' },
            OASComAdobeCqDamMacSyncImplDAMSyncSe.class
        );
    }
    /**
     * 
     * 
     * @param post  (optional)
     * @param apply  (optional)
     * @param r_delete  (optional)
     * @param action  (optional)
     * @param location  (optional)
     * @param propertylist  (optional)
     * @param nuiEnabled  (optional)
     * @param nuiServiceUrl  (optional)
     * @param nuiApiKey  (optional)
     * @return OASComAdobeCqDamProcessorNuiImplNuiA
     * @throws OAS.ApiException if fails to make API call
     */
    public OASComAdobeCqDamProcessorNuiImplNuiA comAdobeCqDamProcessorNuiImplNuiAssetProcessor(Map<String, Object> params) {
        List<OAS.Param> query = new List<OAS.Param>();

        // cast query params to verify their expected type
        query.addAll(client.makeParam('post', (Boolean) params.get('post')));
        query.addAll(client.makeParam('apply', (Boolean) params.get('apply')));
        query.addAll(client.makeParam('delete', (Boolean) params.get('r_delete')));
        query.addAll(client.makeParam('action', (String) params.get('action')));
        query.addAll(client.makeParam('$location', (String) params.get('location')));
        query.addAll(client.makeParam('propertylist', (List<String>) params.get('propertylist'), 'csv'));
        query.addAll(client.makeParam('nuiEnabled', (Boolean) params.get('nuiEnabled')));
        query.addAll(client.makeParam('nuiServiceUrl', (String) params.get('nuiServiceUrl')));
        query.addAll(client.makeParam('nuiApiKey', (String) params.get('nuiApiKey')));

        List<OAS.Param> form = new List<OAS.Param>();

        return (OASComAdobeCqDamProcessorNuiImplNuiA) client.invoke(
            'POST', '/system/console/configMgr/com.adobe.cq.dam.processor.nui.impl.NuiAssetProcessor', '',
            query, form,
            new Map<String, Object>(),
            new Map<String, Object>(),
            new List<String>{ 'application/json', 'text/plain' },
            new List<String>(),
            new List<String> { 'aemAuth' },
            OASComAdobeCqDamProcessorNuiImplNuiA.class
        );
    }
    /**
     * 
     * 
     * @param post  (optional)
     * @param apply  (optional)
     * @param r_delete  (optional)
     * @param action  (optional)
     * @param location  (optional)
     * @param propertylist  (optional)
     * @param tcpPort  (optional)
     * @param allowRemoteAccess  (optional)
     * @param maxRenderRgnPixels  (optional)
     * @param maxMessageSize  (optional)
     * @param randomAccessUrlTimeout  (optional)
     * @param workerThreads  (optional)
     * @return OASComAdobeCqDamS7imagingImplIsImage
     * @throws OAS.ApiException if fails to make API call
     */
    public OASComAdobeCqDamS7imagingImplIsImage comAdobeCqDamS7imagingImplIsImageServerComponent(Map<String, Object> params) {
        List<OAS.Param> query = new List<OAS.Param>();

        // cast query params to verify their expected type
        query.addAll(client.makeParam('post', (Boolean) params.get('post')));
        query.addAll(client.makeParam('apply', (Boolean) params.get('apply')));
        query.addAll(client.makeParam('delete', (Boolean) params.get('r_delete')));
        query.addAll(client.makeParam('action', (String) params.get('action')));
        query.addAll(client.makeParam('$location', (String) params.get('location')));
        query.addAll(client.makeParam('propertylist', (List<String>) params.get('propertylist'), 'csv'));
        query.addAll(client.makeParam('TcpPort', (String) params.get('tcpPort')));
        query.addAll(client.makeParam('AllowRemoteAccess', (Boolean) params.get('allowRemoteAccess')));
        query.addAll(client.makeParam('MaxRenderRgnPixels', (String) params.get('maxRenderRgnPixels')));
        query.addAll(client.makeParam('MaxMessageSize', (String) params.get('maxMessageSize')));
        query.addAll(client.makeParam('RandomAccessUrlTimeout', (Integer) params.get('randomAccessUrlTimeout')));
        query.addAll(client.makeParam('WorkerThreads', (Integer) params.get('workerThreads')));

        List<OAS.Param> form = new List<OAS.Param>();

        return (OASComAdobeCqDamS7imagingImplIsImage) client.invoke(
            'POST', '/system/console/configMgr/com.adobe.cq.dam.s7imaging.impl.is.ImageServerComponent', '',
            query, form,
            new Map<String, Object>(),
            new Map<String, Object>(),
            new List<String>{ 'application/json', 'text/plain' },
            new List<String>(),
            new List<String> { 'aemAuth' },
            OASComAdobeCqDamS7imagingImplIsImage.class
        );
    }
    /**
     * 
     * 
     * @param post  (optional)
     * @param apply  (optional)
     * @param r_delete  (optional)
     * @param action  (optional)
     * @param location  (optional)
     * @param propertylist  (optional)
     * @param cacheEnable  (optional)
     * @param cacheRootPaths  (optional)
     * @param cacheMaxSize  (optional)
     * @param cacheMaxEntries  (optional)
     * @return OASComAdobeCqDamS7imagingImplPsPlatf
     * @throws OAS.ApiException if fails to make API call
     */
    public OASComAdobeCqDamS7imagingImplPsPlatf comAdobeCqDamS7imagingImplPsPlatformServerServlet(Map<String, Object> params) {
        List<OAS.Param> query = new List<OAS.Param>();

        // cast query params to verify their expected type
        query.addAll(client.makeParam('post', (Boolean) params.get('post')));
        query.addAll(client.makeParam('apply', (Boolean) params.get('apply')));
        query.addAll(client.makeParam('delete', (Boolean) params.get('r_delete')));
        query.addAll(client.makeParam('action', (String) params.get('action')));
        query.addAll(client.makeParam('$location', (String) params.get('location')));
        query.addAll(client.makeParam('propertylist', (List<String>) params.get('propertylist'), 'csv'));
        query.addAll(client.makeParam('cache.enable', (Boolean) params.get('cacheEnable')));
        query.addAll(client.makeParams('cache.rootPaths', (List<String>) params.get('cacheRootPaths')));
        query.addAll(client.makeParam('cache.maxSize', (Integer) params.get('cacheMaxSize')));
        query.addAll(client.makeParam('cache.maxEntries', (Integer) params.get('cacheMaxEntries')));

        List<OAS.Param> form = new List<OAS.Param>();

        return (OASComAdobeCqDamS7imagingImplPsPlatf) client.invoke(
            'POST', '/system/console/configMgr/com.adobe.cq.dam.s7imaging.impl.ps.PlatformServerServlet', '',
            query, form,
            new Map<String, Object>(),
            new Map<String, Object>(),
            new List<String>{ 'application/json', 'text/plain' },
            new List<String>(),
            new List<String> { 'aemAuth' },
            OASComAdobeCqDamS7imagingImplPsPlatf.class
        );
    }
    /**
     * 
     * 
     * @param post  (optional)
     * @param apply  (optional)
     * @param r_delete  (optional)
     * @param action  (optional)
     * @param location  (optional)
     * @param propertylist  (optional)
     * @param serviceRanking  (optional)
     * @param pathPrefix  (optional)
     * @param createVersion  (optional)
     * @return OASComAdobeCqDamWebdavImplIoAssetIOH
     * @throws OAS.ApiException if fails to make API call
     */
    public OASComAdobeCqDamWebdavImplIoAssetIOH comAdobeCqDamWebdavImplIoAssetIOHandler(Map<String, Object> params) {
        List<OAS.Param> query = new List<OAS.Param>();

        // cast query params to verify their expected type
        query.addAll(client.makeParam('post', (Boolean) params.get('post')));
        query.addAll(client.makeParam('apply', (Boolean) params.get('apply')));
        query.addAll(client.makeParam('delete', (Boolean) params.get('r_delete')));
        query.addAll(client.makeParam('action', (String) params.get('action')));
        query.addAll(client.makeParam('$location', (String) params.get('location')));
        query.addAll(client.makeParam('propertylist', (List<String>) params.get('propertylist'), 'csv'));
        query.addAll(client.makeParam('service.ranking', (Integer) params.get('serviceRanking')));
        query.addAll(client.makeParam('pathPrefix', (String) params.get('pathPrefix')));
        query.addAll(client.makeParam('createVersion', (Boolean) params.get('createVersion')));

        List<OAS.Param> form = new List<OAS.Param>();

        return (OASComAdobeCqDamWebdavImplIoAssetIOH) client.invoke(
            'POST', '/system/console/configMgr/com.adobe.cq.dam.webdav.impl.io.AssetIOHandler', '',
            query, form,
            new Map<String, Object>(),
            new Map<String, Object>(),
            new List<String>{ 'application/json', 'text/plain' },
            new List<String>(),
            new List<String> { 'aemAuth' },
            OASComAdobeCqDamWebdavImplIoAssetIOH.class
        );
    }
    /**
     * 
     * 
     * @param post  (optional)
     * @param apply  (optional)
     * @param r_delete  (optional)
     * @param action  (optional)
     * @param location  (optional)
     * @param propertylist  (optional)
     * @param cqDamWebdavVersionLinkingEnable  (optional)
     * @param cqDamWebdavVersionLinkingSchedulerPeriod  (optional)
     * @param cqDamWebdavVersionLinkingStagingTimeout  (optional)
     * @return OASComAdobeCqDamWebdavImplIoDamWebda
     * @throws OAS.ApiException if fails to make API call
     */
    public OASComAdobeCqDamWebdavImplIoDamWebda comAdobeCqDamWebdavImplIoDamWebdavVersionLinkingJob(Map<String, Object> params) {
        List<OAS.Param> query = new List<OAS.Param>();

        // cast query params to verify their expected type
        query.addAll(client.makeParam('post', (Boolean) params.get('post')));
        query.addAll(client.makeParam('apply', (Boolean) params.get('apply')));
        query.addAll(client.makeParam('delete', (Boolean) params.get('r_delete')));
        query.addAll(client.makeParam('action', (String) params.get('action')));
        query.addAll(client.makeParam('$location', (String) params.get('location')));
        query.addAll(client.makeParam('propertylist', (List<String>) params.get('propertylist'), 'csv'));
        query.addAll(client.makeParam('cq.dam.webdav.version.linking.enable', (Boolean) params.get('cqDamWebdavVersionLinkingEnable')));
        query.addAll(client.makeParam('cq.dam.webdav.version.linking.scheduler.period', (Integer) params.get('cqDamWebdavVersionLinkingSchedulerPeriod')));
        query.addAll(client.makeParam('cq.dam.webdav.version.linking.staging.timeout', (Integer) params.get('cqDamWebdavVersionLinkingStagingTimeout')));

        List<OAS.Param> form = new List<OAS.Param>();

        return (OASComAdobeCqDamWebdavImplIoDamWebda) client.invoke(
            'POST', '/system/console/configMgr/com.adobe.cq.dam.webdav.impl.io.DamWebdavVersionLinkingJob', '',
            query, form,
            new Map<String, Object>(),
            new Map<String, Object>(),
            new List<String>{ 'application/json', 'text/plain' },
            new List<String>(),
            new List<String> { 'aemAuth' },
            OASComAdobeCqDamWebdavImplIoDamWebda.class
        );
    }
    /**
     * 
     * 
     * @param post  (optional)
     * @param apply  (optional)
     * @param r_delete  (optional)
     * @param action  (optional)
     * @param location  (optional)
     * @param propertylist  (optional)
     * @param comDayCqDamCoreImplIoSpecialFilesHandlerFilepatters  (optional)
     * @return OASComAdobeCqDamWebdavImplIoSpecialF
     * @throws OAS.ApiException if fails to make API call
     */
    public OASComAdobeCqDamWebdavImplIoSpecialF comAdobeCqDamWebdavImplIoSpecialFilesHandler(Map<String, Object> params) {
        List<OAS.Param> query = new List<OAS.Param>();

        // cast query params to verify their expected type
        query.addAll(client.makeParam('post', (Boolean) params.get('post')));
        query.addAll(client.makeParam('apply', (Boolean) params.get('apply')));
        query.addAll(client.makeParam('delete', (Boolean) params.get('r_delete')));
        query.addAll(client.makeParam('action', (String) params.get('action')));
        query.addAll(client.makeParam('$location', (String) params.get('location')));
        query.addAll(client.makeParam('propertylist', (List<String>) params.get('propertylist'), 'csv'));
        query.addAll(client.makeParams('com.day.cq.dam.core.impl.io.SpecialFilesHandler.filepatters', (List<String>) params.get('comDayCqDamCoreImplIoSpecialFilesHandlerFilepatters')));

        List<OAS.Param> form = new List<OAS.Param>();

        return (OASComAdobeCqDamWebdavImplIoSpecialF) client.invoke(
            'POST', '/system/console/configMgr/com.adobe.cq.dam.webdav.impl.io.SpecialFilesHandler', '',
            query, form,
            new Map<String, Object>(),
            new Map<String, Object>(),
            new List<String>{ 'application/json', 'text/plain' },
            new List<String>(),
            new List<String> { 'aemAuth' },
            OASComAdobeCqDamWebdavImplIoSpecialF.class
        );
    }
    /**
     * 
     * 
     * @param post  (optional)
     * @param apply  (optional)
     * @param r_delete  (optional)
     * @param action  (optional)
     * @param location  (optional)
     * @param propertylist  (optional)
     * @param firewallDeserializationWhitelist  (optional)
     * @param firewallDeserializationBlacklist  (optional)
     * @param firewallDeserializationDiagnostics  (optional)
     * @return OASComAdobeCqDeserfwImplDeserializat
     * @throws OAS.ApiException if fails to make API call
     */
    public OASComAdobeCqDeserfwImplDeserializat comAdobeCqDeserfwImplDeserializationFirewallImpl(Map<String, Object> params) {
        List<OAS.Param> query = new List<OAS.Param>();

        // cast query params to verify their expected type
        query.addAll(client.makeParam('post', (Boolean) params.get('post')));
        query.addAll(client.makeParam('apply', (Boolean) params.get('apply')));
        query.addAll(client.makeParam('delete', (Boolean) params.get('r_delete')));
        query.addAll(client.makeParam('action', (String) params.get('action')));
        query.addAll(client.makeParam('$location', (String) params.get('location')));
        query.addAll(client.makeParam('propertylist', (List<String>) params.get('propertylist'), 'csv'));
        query.addAll(client.makeParams('firewall.deserialization.whitelist', (List<String>) params.get('firewallDeserializationWhitelist')));
        query.addAll(client.makeParams('firewall.deserialization.blacklist', (List<String>) params.get('firewallDeserializationBlacklist')));
        query.addAll(client.makeParam('firewall.deserialization.diagnostics', (String) params.get('firewallDeserializationDiagnostics')));

        List<OAS.Param> form = new List<OAS.Param>();

        return (OASComAdobeCqDeserfwImplDeserializat) client.invoke(
            'POST', '/system/console/configMgr/com.adobe.cq.deserfw.impl.DeserializationFirewallImpl', '',
            query, form,
            new Map<String, Object>(),
            new Map<String, Object>(),
            new List<String>{ 'application/json', 'text/plain' },
            new List<String>(),
            new List<String> { 'aemAuth' },
            OASComAdobeCqDeserfwImplDeserializat.class
        );
    }
    /**
     * 
     * 
     * @param post  (optional)
     * @param apply  (optional)
     * @param r_delete  (optional)
     * @param action  (optional)
     * @param location  (optional)
     * @param propertylist  (optional)
     * @param connectionTimeout  (optional)
     * @param socketTimeout  (optional)
     * @return OASComAdobeCqDtmImplServiceDTMWebSer
     * @throws OAS.ApiException if fails to make API call
     */
    public OASComAdobeCqDtmImplServiceDTMWebSer comAdobeCqDtmImplServiceDTMWebServiceImpl(Map<String, Object> params) {
        List<OAS.Param> query = new List<OAS.Param>();

        // cast query params to verify their expected type
        query.addAll(client.makeParam('post', (Boolean) params.get('post')));
        query.addAll(client.makeParam('apply', (Boolean) params.get('apply')));
        query.addAll(client.makeParam('delete', (Boolean) params.get('r_delete')));
        query.addAll(client.makeParam('action', (String) params.get('action')));
        query.addAll(client.makeParam('$location', (String) params.get('location')));
        query.addAll(client.makeParam('propertylist', (List<String>) params.get('propertylist'), 'csv'));
        query.addAll(client.makeParam('connection.timeout', (Integer) params.get('connectionTimeout')));
        query.addAll(client.makeParam('socket.timeout', (Integer) params.get('socketTimeout')));

        List<OAS.Param> form = new List<OAS.Param>();

        return (OASComAdobeCqDtmImplServiceDTMWebSer) client.invoke(
            'POST', '/system/console/configMgr/com.adobe.cq.dtm.impl.service.DTMWebServiceImpl', '',
            query, form,
            new Map<String, Object>(),
            new Map<String, Object>(),
            new List<String>{ 'application/json', 'text/plain' },
            new List<String>(),
            new List<String> { 'aemAuth' },
            OASComAdobeCqDtmImplServiceDTMWebSer.class
        );
    }
    /**
     * 
     * 
     * @param post  (optional)
     * @param apply  (optional)
     * @param r_delete  (optional)
     * @param action  (optional)
     * @param location  (optional)
     * @param propertylist  (optional)
     * @param dtmStagingIpWhitelist  (optional)
     * @param dtmProductionIpWhitelist  (optional)
     * @return OASComAdobeCqDtmImplServletsDTMDeplo
     * @throws OAS.ApiException if fails to make API call
     */
    public OASComAdobeCqDtmImplServletsDTMDeplo comAdobeCqDtmImplServletsDTMDeployHookServlet(Map<String, Object> params) {
        List<OAS.Param> query = new List<OAS.Param>();

        // cast query params to verify their expected type
        query.addAll(client.makeParam('post', (Boolean) params.get('post')));
        query.addAll(client.makeParam('apply', (Boolean) params.get('apply')));
        query.addAll(client.makeParam('delete', (Boolean) params.get('r_delete')));
        query.addAll(client.makeParam('action', (String) params.get('action')));
        query.addAll(client.makeParam('$location', (String) params.get('location')));
        query.addAll(client.makeParam('propertylist', (List<String>) params.get('propertylist'), 'csv'));
        query.addAll(client.makeParams('dtm.staging.ip.whitelist', (List<String>) params.get('dtmStagingIpWhitelist')));
        query.addAll(client.makeParams('dtm.production.ip.whitelist', (List<String>) params.get('dtmProductionIpWhitelist')));

        List<OAS.Param> form = new List<OAS.Param>();

        return (OASComAdobeCqDtmImplServletsDTMDeplo) client.invoke(
            'POST', '/system/console/configMgr/com.adobe.cq.dtm.impl.servlets.DTMDeployHookServlet', '',
            query, form,
            new Map<String, Object>(),
            new Map<String, Object>(),
            new List<String>{ 'application/json', 'text/plain' },
            new List<String>(),
            new List<String> { 'aemAuth' },
            OASComAdobeCqDtmImplServletsDTMDeplo.class
        );
    }
    /**
     * 
     * 
     * @param post  (optional)
     * @param apply  (optional)
     * @param r_delete  (optional)
     * @param action  (optional)
     * @param location  (optional)
     * @param propertylist  (optional)
     * @param endpointUri  (optional)
     * @param connectionTimeout  (optional)
     * @param socketTimeout  (optional)
     * @return OASComAdobeCqDtmReactorImplServiceWe
     * @throws OAS.ApiException if fails to make API call
     */
    public OASComAdobeCqDtmReactorImplServiceWe comAdobeCqDtmReactorImplServiceWebServiceImpl(Map<String, Object> params) {
        List<OAS.Param> query = new List<OAS.Param>();

        // cast query params to verify their expected type
        query.addAll(client.makeParam('post', (Boolean) params.get('post')));
        query.addAll(client.makeParam('apply', (Boolean) params.get('apply')));
        query.addAll(client.makeParam('delete', (Boolean) params.get('r_delete')));
        query.addAll(client.makeParam('action', (String) params.get('action')));
        query.addAll(client.makeParam('$location', (String) params.get('location')));
        query.addAll(client.makeParam('propertylist', (List<String>) params.get('propertylist'), 'csv'));
        query.addAll(client.makeParam('endpointUri', (String) params.get('endpointUri')));
        query.addAll(client.makeParam('connectionTimeout', (Integer) params.get('connectionTimeout')));
        query.addAll(client.makeParam('socketTimeout', (Integer) params.get('socketTimeout')));

        List<OAS.Param> form = new List<OAS.Param>();

        return (OASComAdobeCqDtmReactorImplServiceWe) client.invoke(
            'POST', '/system/console/configMgr/com.adobe.cq.dtm.reactor.impl.service.WebServiceImpl', '',
            query, form,
            new Map<String, Object>(),
            new Map<String, Object>(),
            new List<String>{ 'application/json', 'text/plain' },
            new List<String>(),
            new List<String> { 'aemAuth' },
            OASComAdobeCqDtmReactorImplServiceWe.class
        );
    }
    /**
     * 
     * 
     * @param post  (optional)
     * @param apply  (optional)
     * @param r_delete  (optional)
     * @param action  (optional)
     * @param location  (optional)
     * @param propertylist  (optional)
     * @param enabled  (optional)
     * @param disabledForGroups  (optional)
     * @return OASComAdobeCqExperiencelogImplExperi
     * @throws OAS.ApiException if fails to make API call
     */
    public OASComAdobeCqExperiencelogImplExperi comAdobeCqExperiencelogImplExperienceLogConfigServlet(Map<String, Object> params) {
        List<OAS.Param> query = new List<OAS.Param>();

        // cast query params to verify their expected type
        query.addAll(client.makeParam('post', (Boolean) params.get('post')));
        query.addAll(client.makeParam('apply', (Boolean) params.get('apply')));
        query.addAll(client.makeParam('delete', (Boolean) params.get('r_delete')));
        query.addAll(client.makeParam('action', (String) params.get('action')));
        query.addAll(client.makeParam('$location', (String) params.get('location')));
        query.addAll(client.makeParam('propertylist', (List<String>) params.get('propertylist'), 'csv'));
        query.addAll(client.makeParam('enabled', (Boolean) params.get('enabled')));
        query.addAll(client.makeParams('disabledForGroups', (List<String>) params.get('disabledForGroups')));

        List<OAS.Param> form = new List<OAS.Param>();

        return (OASComAdobeCqExperiencelogImplExperi) client.invoke(
            'POST', '/system/console/configMgr/com.adobe.cq.experiencelog.impl.ExperienceLogConfigServlet', '',
            query, form,
            new Map<String, Object>(),
            new Map<String, Object>(),
            new List<String>{ 'application/json', 'text/plain' },
            new List<String>(),
            new List<String> { 'aemAuth' },
            OASComAdobeCqExperiencelogImplExperi.class
        );
    }
    /**
     * 
     * 
     * @param post  (optional)
     * @param apply  (optional)
     * @param r_delete  (optional)
     * @param action  (optional)
     * @param location  (optional)
     * @param propertylist  (optional)
     * @param hcName  (optional)
     * @param hcTags  (optional)
     * @param hcMbeanName  (optional)
     * @param packageNames  (optional)
     * @return OASComAdobeCqHcContentPackagesHealth
     * @throws OAS.ApiException if fails to make API call
     */
    public OASComAdobeCqHcContentPackagesHealth comAdobeCqHcContentPackagesHealthCheck(Map<String, Object> params) {
        List<OAS.Param> query = new List<OAS.Param>();

        // cast query params to verify their expected type
        query.addAll(client.makeParam('post', (Boolean) params.get('post')));
        query.addAll(client.makeParam('apply', (Boolean) params.get('apply')));
        query.addAll(client.makeParam('delete', (Boolean) params.get('r_delete')));
        query.addAll(client.makeParam('action', (String) params.get('action')));
        query.addAll(client.makeParam('$location', (String) params.get('location')));
        query.addAll(client.makeParam('propertylist', (List<String>) params.get('propertylist'), 'csv'));
        query.addAll(client.makeParam('hc.name', (String) params.get('hcName')));
        query.addAll(client.makeParams('hc.tags', (List<String>) params.get('hcTags')));
        query.addAll(client.makeParam('hc.mbean.name', (String) params.get('hcMbeanName')));
        query.addAll(client.makeParams('package.names', (List<String>) params.get('packageNames')));

        List<OAS.Param> form = new List<OAS.Param>();

        return (OASComAdobeCqHcContentPackagesHealth) client.invoke(
            'POST', '/system/console/configMgr/com.adobe.cq.hc.ContentPackagesHealthCheck', '',
            query, form,
            new Map<String, Object>(),
            new Map<String, Object>(),
            new List<String>{ 'application/json', 'text/plain' },
            new List<String>(),
            new List<String> { 'aemAuth' },
            OASComAdobeCqHcContentPackagesHealth.class
        );
    }
    /**
     * 
     * 
     * @param post  (optional)
     * @param apply  (optional)
     * @param r_delete  (optional)
     * @param action  (optional)
     * @param location  (optional)
     * @param propertylist  (optional)
     * @param historyRequestFilterExcludedSelectors  (optional)
     * @param historyRequestFilterExcludedExtensions  (optional)
     * @return OASComAdobeCqHistoryImplHistoryReque
     * @throws OAS.ApiException if fails to make API call
     */
    public OASComAdobeCqHistoryImplHistoryReque comAdobeCqHistoryImplHistoryRequestFilter(Map<String, Object> params) {
        List<OAS.Param> query = new List<OAS.Param>();

        // cast query params to verify their expected type
        query.addAll(client.makeParam('post', (Boolean) params.get('post')));
        query.addAll(client.makeParam('apply', (Boolean) params.get('apply')));
        query.addAll(client.makeParam('delete', (Boolean) params.get('r_delete')));
        query.addAll(client.makeParam('action', (String) params.get('action')));
        query.addAll(client.makeParam('$location', (String) params.get('location')));
        query.addAll(client.makeParam('propertylist', (List<String>) params.get('propertylist'), 'csv'));
        query.addAll(client.makeParams('history.requestFilter.excludedSelectors', (List<String>) params.get('historyRequestFilterExcludedSelectors')));
        query.addAll(client.makeParams('history.requestFilter.excludedExtensions', (List<String>) params.get('historyRequestFilterExcludedExtensions')));

        List<OAS.Param> form = new List<OAS.Param>();

        return (OASComAdobeCqHistoryImplHistoryReque) client.invoke(
            'POST', '/system/console/configMgr/com.adobe.cq.history.impl.HistoryRequestFilter', '',
            query, form,
            new Map<String, Object>(),
            new Map<String, Object>(),
            new List<String>{ 'application/json', 'text/plain' },
            new List<String>(),
            new List<String> { 'aemAuth' },
            OASComAdobeCqHistoryImplHistoryReque.class
        );
    }
    /**
     * 
     * 
     * @param post  (optional)
     * @param apply  (optional)
     * @param r_delete  (optional)
     * @param action  (optional)
     * @param location  (optional)
     * @param propertylist  (optional)
     * @param historyServiceResourceTypes  (optional)
     * @param historyServicePathFilter  (optional)
     * @return OASComAdobeCqHistoryImplHistoryServi
     * @throws OAS.ApiException if fails to make API call
     */
    public OASComAdobeCqHistoryImplHistoryServi comAdobeCqHistoryImplHistoryServiceImpl(Map<String, Object> params) {
        List<OAS.Param> query = new List<OAS.Param>();

        // cast query params to verify their expected type
        query.addAll(client.makeParam('post', (Boolean) params.get('post')));
        query.addAll(client.makeParam('apply', (Boolean) params.get('apply')));
        query.addAll(client.makeParam('delete', (Boolean) params.get('r_delete')));
        query.addAll(client.makeParam('action', (String) params.get('action')));
        query.addAll(client.makeParam('$location', (String) params.get('location')));
        query.addAll(client.makeParam('propertylist', (List<String>) params.get('propertylist'), 'csv'));
        query.addAll(client.makeParams('history.service.resourceTypes', (List<String>) params.get('historyServiceResourceTypes')));
        query.addAll(client.makeParams('history.service.pathFilter', (List<String>) params.get('historyServicePathFilter')));

        List<OAS.Param> form = new List<OAS.Param>();

        return (OASComAdobeCqHistoryImplHistoryServi) client.invoke(
            'POST', '/system/console/configMgr/com.adobe.cq.history.impl.HistoryServiceImpl', '',
            query, form,
            new Map<String, Object>(),
            new Map<String, Object>(),
            new List<String>{ 'application/json', 'text/plain' },
            new List<String>(),
            new List<String> { 'aemAuth' },
            OASComAdobeCqHistoryImplHistoryServi.class
        );
    }
    /**
     * 
     * 
     * @param post  (optional)
     * @param apply  (optional)
     * @param r_delete  (optional)
     * @param action  (optional)
     * @param location  (optional)
     * @param propertylist  (optional)
     * @param inboxImplTypeproviderRegistrypaths  (optional)
     * @param inboxImplTypeproviderLegacypaths  (optional)
     * @param inboxImplTypeproviderDefaulturlFailureitem  (optional)
     * @param inboxImplTypeproviderDefaulturlWorkitem  (optional)
     * @param inboxImplTypeproviderDefaulturlTask  (optional)
     * @return OASComAdobeCqInboxImplTypeproviderIt
     * @throws OAS.ApiException if fails to make API call
     */
    public OASComAdobeCqInboxImplTypeproviderIt comAdobeCqInboxImplTypeproviderItemTypeProvider(Map<String, Object> params) {
        List<OAS.Param> query = new List<OAS.Param>();

        // cast query params to verify their expected type
        query.addAll(client.makeParam('post', (Boolean) params.get('post')));
        query.addAll(client.makeParam('apply', (Boolean) params.get('apply')));
        query.addAll(client.makeParam('delete', (Boolean) params.get('r_delete')));
        query.addAll(client.makeParam('action', (String) params.get('action')));
        query.addAll(client.makeParam('$location', (String) params.get('location')));
        query.addAll(client.makeParam('propertylist', (List<String>) params.get('propertylist'), 'csv'));
        query.addAll(client.makeParams('inbox.impl.typeprovider.registrypaths', (List<String>) params.get('inboxImplTypeproviderRegistrypaths')));
        query.addAll(client.makeParams('inbox.impl.typeprovider.legacypaths', (List<String>) params.get('inboxImplTypeproviderLegacypaths')));
        query.addAll(client.makeParam('inbox.impl.typeprovider.defaulturl.failureitem', (String) params.get('inboxImplTypeproviderDefaulturlFailureitem')));
        query.addAll(client.makeParam('inbox.impl.typeprovider.defaulturl.workitem', (String) params.get('inboxImplTypeproviderDefaulturlWorkitem')));
        query.addAll(client.makeParam('inbox.impl.typeprovider.defaulturl.task', (String) params.get('inboxImplTypeproviderDefaulturlTask')));

        List<OAS.Param> form = new List<OAS.Param>();

        return (OASComAdobeCqInboxImplTypeproviderIt) client.invoke(
            'POST', '/system/console/configMgr/com.adobe.cq.inbox.impl.typeprovider.ItemTypeProvider', '',
            query, form,
            new Map<String, Object>(),
            new Map<String, Object>(),
            new List<String>{ 'application/json', 'text/plain' },
            new List<String>(),
            new List<String> { 'aemAuth' },
            OASComAdobeCqInboxImplTypeproviderIt.class
        );
    }
    /**
     * 
     * 
     * @param post  (optional)
     * @param apply  (optional)
     * @param r_delete  (optional)
     * @param action  (optional)
     * @param location  (optional)
     * @param propertylist  (optional)
     * @param imageQuality  (optional)
     * @param imageSupportedResolutions  (optional)
     * @return OASComAdobeCqProjectsImplServletProj
     * @throws OAS.ApiException if fails to make API call
     */
    public OASComAdobeCqProjectsImplServletProj comAdobeCqProjectsImplServletProjectImageServlet(Map<String, Object> params) {
        List<OAS.Param> query = new List<OAS.Param>();

        // cast query params to verify their expected type
        query.addAll(client.makeParam('post', (Boolean) params.get('post')));
        query.addAll(client.makeParam('apply', (Boolean) params.get('apply')));
        query.addAll(client.makeParam('delete', (Boolean) params.get('r_delete')));
        query.addAll(client.makeParam('action', (String) params.get('action')));
        query.addAll(client.makeParam('$location', (String) params.get('location')));
        query.addAll(client.makeParam('propertylist', (List<String>) params.get('propertylist'), 'csv'));
        query.addAll(client.makeParam('image.quality', (String) params.get('imageQuality')));
        query.addAll(client.makeParam('image.supported.resolutions', (String) params.get('imageSupportedResolutions')));

        List<OAS.Param> form = new List<OAS.Param>();

        return (OASComAdobeCqProjectsImplServletProj) client.invoke(
            'POST', '/system/console/configMgr/com.adobe.cq.projects.impl.servlet.ProjectImageServlet', '',
            query, form,
            new Map<String, Object>(),
            new Map<String, Object>(),
            new List<String>{ 'application/json', 'text/plain' },
            new List<String>(),
            new List<String> { 'aemAuth' },
            OASComAdobeCqProjectsImplServletProj.class
        );
    }
    /**
     * 
     * 
     * @param post  (optional)
     * @param apply  (optional)
     * @param r_delete  (optional)
     * @param action  (optional)
     * @param location  (optional)
     * @param propertylist  (optional)
     * @param scheduledpurgeName  (optional)
     * @param scheduledpurgePurgeActive  (optional)
     * @param scheduledpurgeTemplates  (optional)
     * @param scheduledpurgePurgeGroups  (optional)
     * @param scheduledpurgePurgeAssets  (optional)
     * @param scheduledpurgeTerminateRunningWorkflows  (optional)
     * @param scheduledpurgeDaysold  (optional)
     * @param scheduledpurgeSaveThreshold  (optional)
     * @return OASComAdobeCqProjectsPurgeSchedulerI
     * @throws OAS.ApiException if fails to make API call
     */
    public OASComAdobeCqProjectsPurgeSchedulerI comAdobeCqProjectsPurgeScheduler(Map<String, Object> params) {
        List<OAS.Param> query = new List<OAS.Param>();

        // cast query params to verify their expected type
        query.addAll(client.makeParam('post', (Boolean) params.get('post')));
        query.addAll(client.makeParam('apply', (Boolean) params.get('apply')));
        query.addAll(client.makeParam('delete', (Boolean) params.get('r_delete')));
        query.addAll(client.makeParam('action', (String) params.get('action')));
        query.addAll(client.makeParam('$location', (String) params.get('location')));
        query.addAll(client.makeParam('propertylist', (List<String>) params.get('propertylist'), 'csv'));
        query.addAll(client.makeParam('scheduledpurge.name', (String) params.get('scheduledpurgeName')));
        query.addAll(client.makeParam('scheduledpurge.purgeActive', (Boolean) params.get('scheduledpurgePurgeActive')));
        query.addAll(client.makeParams('scheduledpurge.templates', (List<String>) params.get('scheduledpurgeTemplates')));
        query.addAll(client.makeParam('scheduledpurge.purgeGroups', (Boolean) params.get('scheduledpurgePurgeGroups')));
        query.addAll(client.makeParam('scheduledpurge.purgeAssets', (Boolean) params.get('scheduledpurgePurgeAssets')));
        query.addAll(client.makeParam('scheduledpurge.terminateRunningWorkflows', (Boolean) params.get('scheduledpurgeTerminateRunningWorkflows')));
        query.addAll(client.makeParam('scheduledpurge.daysold', (Integer) params.get('scheduledpurgeDaysold')));
        query.addAll(client.makeParam('scheduledpurge.saveThreshold', (Integer) params.get('scheduledpurgeSaveThreshold')));

        List<OAS.Param> form = new List<OAS.Param>();

        return (OASComAdobeCqProjectsPurgeSchedulerI) client.invoke(
            'POST', '/system/console/configMgr/com.adobe.cq.projects.purge.Scheduler', '',
            query, form,
            new Map<String, Object>(),
            new Map<String, Object>(),
            new List<String>{ 'application/json', 'text/plain' },
            new List<String>(),
            new List<String> { 'aemAuth' },
            OASComAdobeCqProjectsPurgeSchedulerI.class
        );
    }
    /**
     * 
     * 
     * @param post  (optional)
     * @param apply  (optional)
     * @param r_delete  (optional)
     * @param action  (optional)
     * @param location  (optional)
     * @param propertylist  (optional)
     * @param includePaths  (optional)
     * @param exporterUser  (optional)
     * @return OASComAdobeCqScheduledExporterImplSc
     * @throws OAS.ApiException if fails to make API call
     */
    public OASComAdobeCqScheduledExporterImplSc comAdobeCqScheduledExporterImplScheduledExporterImpl(Map<String, Object> params) {
        List<OAS.Param> query = new List<OAS.Param>();

        // cast query params to verify their expected type
        query.addAll(client.makeParam('post', (Boolean) params.get('post')));
        query.addAll(client.makeParam('apply', (Boolean) params.get('apply')));
        query.addAll(client.makeParam('delete', (Boolean) params.get('r_delete')));
        query.addAll(client.makeParam('action', (String) params.get('action')));
        query.addAll(client.makeParam('$location', (String) params.get('location')));
        query.addAll(client.makeParam('propertylist', (List<String>) params.get('propertylist'), 'csv'));
        query.addAll(client.makeParams('include.paths', (List<String>) params.get('includePaths')));
        query.addAll(client.makeParam('exporter.user', (String) params.get('exporterUser')));

        List<OAS.Param> form = new List<OAS.Param>();

        return (OASComAdobeCqScheduledExporterImplSc) client.invoke(
            'POST', '/system/console/configMgr/com.adobe.cq.scheduled.exporter.impl.ScheduledExporterImpl', '',
            query, form,
            new Map<String, Object>(),
            new Map<String, Object>(),
            new List<String>{ 'application/json', 'text/plain' },
            new List<String>(),
            new List<String> { 'aemAuth' },
            OASComAdobeCqScheduledExporterImplSc.class
        );
    }
    /**
     * 
     * 
     * @param post  (optional)
     * @param apply  (optional)
     * @param r_delete  (optional)
     * @param action  (optional)
     * @param location  (optional)
     * @param propertylist  (optional)
     * @param comAdobeCqScreensAnalyticsImplUrl  (optional)
     * @param comAdobeCqScreensAnalyticsImplApikey  (optional)
     * @param comAdobeCqScreensAnalyticsImplProject  (optional)
     * @param comAdobeCqScreensAnalyticsImplEnvironment  (optional)
     * @param comAdobeCqScreensAnalyticsImplSendFrequency  (optional)
     * @return OASComAdobeCqScreensAnalyticsImplScr
     * @throws OAS.ApiException if fails to make API call
     */
    public OASComAdobeCqScreensAnalyticsImplScr comAdobeCqScreensAnalyticsImplScreensAnalyticsServiceImpl(Map<String, Object> params) {
        List<OAS.Param> query = new List<OAS.Param>();

        // cast query params to verify their expected type
        query.addAll(client.makeParam('post', (Boolean) params.get('post')));
        query.addAll(client.makeParam('apply', (Boolean) params.get('apply')));
        query.addAll(client.makeParam('delete', (Boolean) params.get('r_delete')));
        query.addAll(client.makeParam('action', (String) params.get('action')));
        query.addAll(client.makeParam('$location', (String) params.get('location')));
        query.addAll(client.makeParam('propertylist', (List<String>) params.get('propertylist'), 'csv'));
        query.addAll(client.makeParam('com.adobe.cq.screens.analytics.impl.url', (String) params.get('comAdobeCqScreensAnalyticsImplUrl')));
        query.addAll(client.makeParam('com.adobe.cq.screens.analytics.impl.apikey', (String) params.get('comAdobeCqScreensAnalyticsImplApikey')));
        query.addAll(client.makeParam('com.adobe.cq.screens.analytics.impl.project', (String) params.get('comAdobeCqScreensAnalyticsImplProject')));
        query.addAll(client.makeParam('com.adobe.cq.screens.analytics.impl.environment', (String) params.get('comAdobeCqScreensAnalyticsImplEnvironment')));
        query.addAll(client.makeParam('com.adobe.cq.screens.analytics.impl.sendFrequency', (Integer) params.get('comAdobeCqScreensAnalyticsImplSendFrequency')));

        List<OAS.Param> form = new List<OAS.Param>();

        return (OASComAdobeCqScreensAnalyticsImplScr) client.invoke(
            'POST', '/system/console/configMgr/com.adobe.cq.screens.analytics.impl.ScreensAnalyticsServiceImpl', '',
            query, form,
            new Map<String, Object>(),
            new Map<String, Object>(),
            new List<String>{ 'application/json', 'text/plain' },
            new List<String>(),
            new List<String> { 'aemAuth' },
            OASComAdobeCqScreensAnalyticsImplScr.class
        );
    }
    /**
     * 
     * 
     * @param post  (optional)
     * @param apply  (optional)
     * @param r_delete  (optional)
     * @param action  (optional)
     * @param location  (optional)
     * @param propertylist  (optional)
     * @param comAdobeAemScreensPlayerPingfrequency  (optional)
     * @param comAdobeAemScreensDevicePaswordSpecialchars  (optional)
     * @param comAdobeAemScreensDevicePaswordMinlowercasechars  (optional)
     * @param comAdobeAemScreensDevicePaswordMinuppercasechars  (optional)
     * @param comAdobeAemScreensDevicePaswordMinnumberchars  (optional)
     * @param comAdobeAemScreensDevicePaswordMinspecialchars  (optional)
     * @param comAdobeAemScreensDevicePaswordMinlength  (optional)
     * @return OASComAdobeCqScreensDeviceImplDevice
     * @throws OAS.ApiException if fails to make API call
     */
    public OASComAdobeCqScreensDeviceImplDevice comAdobeCqScreensDeviceImplDeviceService(Map<String, Object> params) {
        List<OAS.Param> query = new List<OAS.Param>();

        // cast query params to verify their expected type
        query.addAll(client.makeParam('post', (Boolean) params.get('post')));
        query.addAll(client.makeParam('apply', (Boolean) params.get('apply')));
        query.addAll(client.makeParam('delete', (Boolean) params.get('r_delete')));
        query.addAll(client.makeParam('action', (String) params.get('action')));
        query.addAll(client.makeParam('$location', (String) params.get('location')));
        query.addAll(client.makeParam('propertylist', (List<String>) params.get('propertylist'), 'csv'));
        query.addAll(client.makeParam('com.adobe.aem.screens.player.pingfrequency', (Integer) params.get('comAdobeAemScreensPlayerPingfrequency')));
        query.addAll(client.makeParam('com.adobe.aem.screens.device.pasword.specialchars', (String) params.get('comAdobeAemScreensDevicePaswordSpecialchars')));
        query.addAll(client.makeParam('com.adobe.aem.screens.device.pasword.minlowercasechars', (Integer) params.get('comAdobeAemScreensDevicePaswordMinlowercasechars')));
        query.addAll(client.makeParam('com.adobe.aem.screens.device.pasword.minuppercasechars', (Integer) params.get('comAdobeAemScreensDevicePaswordMinuppercasechars')));
        query.addAll(client.makeParam('com.adobe.aem.screens.device.pasword.minnumberchars', (Integer) params.get('comAdobeAemScreensDevicePaswordMinnumberchars')));
        query.addAll(client.makeParam('com.adobe.aem.screens.device.pasword.minspecialchars', (Integer) params.get('comAdobeAemScreensDevicePaswordMinspecialchars')));
        query.addAll(client.makeParam('com.adobe.aem.screens.device.pasword.minlength', (Integer) params.get('comAdobeAemScreensDevicePaswordMinlength')));

        List<OAS.Param> form = new List<OAS.Param>();

        return (OASComAdobeCqScreensDeviceImplDevice) client.invoke(
            'POST', '/system/console/configMgr/com.adobe.cq.screens.device.impl.DeviceService', '',
            query, form,
            new Map<String, Object>(),
            new Map<String, Object>(),
            new List<String>{ 'application/json', 'text/plain' },
            new List<String>(),
            new List<String> { 'aemAuth' },
            OASComAdobeCqScreensDeviceImplDevice.class
        );
    }
    /**
     * 
     * 
     * @param post  (optional)
     * @param apply  (optional)
     * @param r_delete  (optional)
     * @param action  (optional)
     * @param location  (optional)
     * @param propertylist  (optional)
     * @param deviceRegistrationTimeout  (optional)
     * @return OASComAdobeCqScreensDeviceRegistrati
     * @throws OAS.ApiException if fails to make API call
     */
    public OASComAdobeCqScreensDeviceRegistrati comAdobeCqScreensDeviceRegistrationImplRegistrationServiceImpl(Map<String, Object> params) {
        List<OAS.Param> query = new List<OAS.Param>();

        // cast query params to verify their expected type
        query.addAll(client.makeParam('post', (Boolean) params.get('post')));
        query.addAll(client.makeParam('apply', (Boolean) params.get('apply')));
        query.addAll(client.makeParam('delete', (Boolean) params.get('r_delete')));
        query.addAll(client.makeParam('action', (String) params.get('action')));
        query.addAll(client.makeParam('$location', (String) params.get('location')));
        query.addAll(client.makeParam('propertylist', (List<String>) params.get('propertylist'), 'csv'));
        query.addAll(client.makeParam('deviceRegistrationTimeout', (Integer) params.get('deviceRegistrationTimeout')));

        List<OAS.Param> form = new List<OAS.Param>();

        return (OASComAdobeCqScreensDeviceRegistrati) client.invoke(
            'POST', '/system/console/configMgr/com.adobe.cq.screens.device.registration.impl.RegistrationServiceImpl', '',
            query, form,
            new Map<String, Object>(),
            new Map<String, Object>(),
            new List<String>{ 'application/json', 'text/plain' },
            new List<String>(),
            new List<String> { 'aemAuth' },
            OASComAdobeCqScreensDeviceRegistrati.class
        );
    }
    /**
     * 
     * 
     * @param post  (optional)
     * @param apply  (optional)
     * @param r_delete  (optional)
     * @param action  (optional)
     * @param location  (optional)
     * @param propertylist  (optional)
     * @param cqPagesupdatehandlerImageresourcetypes  (optional)
     * @param cqPagesupdatehandlerProductresourcetypes  (optional)
     * @param cqPagesupdatehandlerVideoresourcetypes  (optional)
     * @param cqPagesupdatehandlerDynamicsequenceresourcetypes  (optional)
     * @param cqPagesupdatehandlerPreviewmodepaths  (optional)
     * @return OASComAdobeCqScreensImplHandlerChann
     * @throws OAS.ApiException if fails to make API call
     */
    public OASComAdobeCqScreensImplHandlerChann comAdobeCqScreensImplHandlerChannelsUpdateHandler(Map<String, Object> params) {
        List<OAS.Param> query = new List<OAS.Param>();

        // cast query params to verify their expected type
        query.addAll(client.makeParam('post', (Boolean) params.get('post')));
        query.addAll(client.makeParam('apply', (Boolean) params.get('apply')));
        query.addAll(client.makeParam('delete', (Boolean) params.get('r_delete')));
        query.addAll(client.makeParam('action', (String) params.get('action')));
        query.addAll(client.makeParam('$location', (String) params.get('location')));
        query.addAll(client.makeParam('propertylist', (List<String>) params.get('propertylist'), 'csv'));
        query.addAll(client.makeParams('cq.pagesupdatehandler.imageresourcetypes', (List<String>) params.get('cqPagesupdatehandlerImageresourcetypes')));
        query.addAll(client.makeParams('cq.pagesupdatehandler.productresourcetypes', (List<String>) params.get('cqPagesupdatehandlerProductresourcetypes')));
        query.addAll(client.makeParams('cq.pagesupdatehandler.videoresourcetypes', (List<String>) params.get('cqPagesupdatehandlerVideoresourcetypes')));
        query.addAll(client.makeParams('cq.pagesupdatehandler.dynamicsequenceresourcetypes', (List<String>) params.get('cqPagesupdatehandlerDynamicsequenceresourcetypes')));
        query.addAll(client.makeParams('cq.pagesupdatehandler.previewmodepaths', (List<String>) params.get('cqPagesupdatehandlerPreviewmodepaths')));

        List<OAS.Param> form = new List<OAS.Param>();

        return (OASComAdobeCqScreensImplHandlerChann) client.invoke(
            'POST', '/system/console/configMgr/com.adobe.cq.screens.impl.handler.ChannelsUpdateHandler', '',
            query, form,
            new Map<String, Object>(),
            new Map<String, Object>(),
            new List<String>{ 'application/json', 'text/plain' },
            new List<String>(),
            new List<String> { 'aemAuth' },
            OASComAdobeCqScreensImplHandlerChann.class
        );
    }
    /**
     * 
     * 
     * @param post  (optional)
     * @param apply  (optional)
     * @param r_delete  (optional)
     * @param action  (optional)
     * @param location  (optional)
     * @param propertylist  (optional)
     * @param schedulerExpression  (optional)
     * @return OASComAdobeCqScreensImplJobsDistribu
     * @throws OAS.ApiException if fails to make API call
     */
    public OASComAdobeCqScreensImplJobsDistribu comAdobeCqScreensImplJobsDistributedDevicesStatiUpdateJob(Map<String, Object> params) {
        List<OAS.Param> query = new List<OAS.Param>();

        // cast query params to verify their expected type
        query.addAll(client.makeParam('post', (Boolean) params.get('post')));
        query.addAll(client.makeParam('apply', (Boolean) params.get('apply')));
        query.addAll(client.makeParam('delete', (Boolean) params.get('r_delete')));
        query.addAll(client.makeParam('action', (String) params.get('action')));
        query.addAll(client.makeParam('$location', (String) params.get('location')));
        query.addAll(client.makeParam('propertylist', (List<String>) params.get('propertylist'), 'csv'));
        query.addAll(client.makeParam('scheduler.expression', (String) params.get('schedulerExpression')));

        List<OAS.Param> form = new List<OAS.Param>();

        return (OASComAdobeCqScreensImplJobsDistribu) client.invoke(
            'POST', '/system/console/configMgr/com.adobe.cq.screens.impl.jobs.DistributedDevicesStatiUpdateJob', '',
            query, form,
            new Map<String, Object>(),
            new Map<String, Object>(),
            new List<String>{ 'application/json', 'text/plain' },
            new List<String>(),
            new List<String> { 'aemAuth' },
            OASComAdobeCqScreensImplJobsDistribu.class
        );
    }
    /**
     * 
     * 
     * @param post  (optional)
     * @param apply  (optional)
     * @param r_delete  (optional)
     * @param action  (optional)
     * @param location  (optional)
     * @param propertylist  (optional)
     * @param comAdobeAemScreensImplRemoteRequestTimeout  (optional)
     * @return OASComAdobeCqScreensImplRemoteImplDi
     * @throws OAS.ApiException if fails to make API call
     */
    public OASComAdobeCqScreensImplRemoteImplDi comAdobeCqScreensImplRemoteImplDistributedHttpClientImpl(Map<String, Object> params) {
        List<OAS.Param> query = new List<OAS.Param>();

        // cast query params to verify their expected type
        query.addAll(client.makeParam('post', (Boolean) params.get('post')));
        query.addAll(client.makeParam('apply', (Boolean) params.get('apply')));
        query.addAll(client.makeParam('delete', (Boolean) params.get('r_delete')));
        query.addAll(client.makeParam('action', (String) params.get('action')));
        query.addAll(client.makeParam('$location', (String) params.get('location')));
        query.addAll(client.makeParam('propertylist', (List<String>) params.get('propertylist'), 'csv'));
        query.addAll(client.makeParam('com.adobe.aem.screens.impl.remote.request_timeout', (Integer) params.get('comAdobeAemScreensImplRemoteRequestTimeout')));

        List<OAS.Param> form = new List<OAS.Param>();

        return (OASComAdobeCqScreensImplRemoteImplDi) client.invoke(
            'POST', '/system/console/configMgr/com.adobe.cq.screens.impl.remote.impl.DistributedHttpClientImpl', '',
            query, form,
            new Map<String, Object>(),
            new Map<String, Object>(),
            new List<String>{ 'application/json', 'text/plain' },
            new List<String>(),
            new List<String> { 'aemAuth' },
            OASComAdobeCqScreensImplRemoteImplDi.class
        );
    }
    /**
     * 
     * 
     * @param post  (optional)
     * @param apply  (optional)
     * @param r_delete  (optional)
     * @param action  (optional)
     * @param location  (optional)
     * @param propertylist  (optional)
     * @param screensChannelsPropertiesToRemove  (optional)
     * @return OASComAdobeCqScreensImplScreensChann
     * @throws OAS.ApiException if fails to make API call
     */
    public OASComAdobeCqScreensImplScreensChann comAdobeCqScreensImplScreensChannelPostProcessor(Map<String, Object> params) {
        List<OAS.Param> query = new List<OAS.Param>();

        // cast query params to verify their expected type
        query.addAll(client.makeParam('post', (Boolean) params.get('post')));
        query.addAll(client.makeParam('apply', (Boolean) params.get('apply')));
        query.addAll(client.makeParam('delete', (Boolean) params.get('r_delete')));
        query.addAll(client.makeParam('action', (String) params.get('action')));
        query.addAll(client.makeParam('$location', (String) params.get('location')));
        query.addAll(client.makeParam('propertylist', (List<String>) params.get('propertylist'), 'csv'));
        query.addAll(client.makeParams('screens.channels.properties.to.remove', (List<String>) params.get('screensChannelsPropertiesToRemove')));

        List<OAS.Param> form = new List<OAS.Param>();

        return (OASComAdobeCqScreensImplScreensChann) client.invoke(
            'POST', '/system/console/configMgr/com.adobe.cq.screens.impl.ScreensChannelPostProcessor', '',
            query, form,
            new Map<String, Object>(),
            new Map<String, Object>(),
            new List<String>{ 'application/json', 'text/plain' },
            new List<String>(),
            new List<String> { 'aemAuth' },
            OASComAdobeCqScreensImplScreensChann.class
        );
    }
    /**
     * 
     * 
     * @param post  (optional)
     * @param apply  (optional)
     * @param r_delete  (optional)
     * @param action  (optional)
     * @param location  (optional)
     * @param propertylist  (optional)
     * @param comAdobeCqScreensMonitoringImplScreensMonitoringServiceImplProjectPath  (optional)
     * @param comAdobeCqScreensMonitoringImplScreensMonitoringServiceImplScheduleFrequency  (optional)
     * @param comAdobeCqScreensMonitoringImplScreensMonitoringServiceImplPingTimeout  (optional)
     * @param comAdobeCqScreensMonitoringImplScreensMonitoringServiceImplRecipients  (optional)
     * @param comAdobeCqScreensMonitoringImplScreensMonitoringServiceImplSmtpserver  (optional)
     * @param comAdobeCqScreensMonitoringImplScreensMonitoringServiceImplSmtpport  (optional)
     * @param comAdobeCqScreensMonitoringImplScreensMonitoringServiceImplUsetls  (optional)
     * @param comAdobeCqScreensMonitoringImplScreensMonitoringServiceImplUsername  (optional)
     * @param comAdobeCqScreensMonitoringImplScreensMonitoringServiceImplPassword  (optional)
     * @return OASComAdobeCqScreensMonitoringImplSc
     * @throws OAS.ApiException if fails to make API call
     */
    public OASComAdobeCqScreensMonitoringImplSc comAdobeCqScreensMonitoringImplScreensMonitoringServiceImpl(Map<String, Object> params) {
        List<OAS.Param> query = new List<OAS.Param>();

        // cast query params to verify their expected type
        query.addAll(client.makeParam('post', (Boolean) params.get('post')));
        query.addAll(client.makeParam('apply', (Boolean) params.get('apply')));
        query.addAll(client.makeParam('delete', (Boolean) params.get('r_delete')));
        query.addAll(client.makeParam('action', (String) params.get('action')));
        query.addAll(client.makeParam('$location', (String) params.get('location')));
        query.addAll(client.makeParam('propertylist', (List<String>) params.get('propertylist'), 'csv'));
        query.addAll(client.makeParams('com.adobe.cq.screens.monitoring.impl.ScreensMonitoringServiceImpl.projectPath', (List<String>) params.get('comAdobeCqScreensMonitoringImplScreensMonitoringServiceImplProjectPath')));
        query.addAll(client.makeParam('com.adobe.cq.screens.monitoring.impl.ScreensMonitoringServiceImpl.scheduleFrequency', (String) params.get('comAdobeCqScreensMonitoringImplScreensMonitoringServiceImplScheduleFrequency')));
        query.addAll(client.makeParam('com.adobe.cq.screens.monitoring.impl.ScreensMonitoringServiceImpl.pingTimeout', (Integer) params.get('comAdobeCqScreensMonitoringImplScreensMonitoringServiceImplPingTimeout')));
        query.addAll(client.makeParam('com.adobe.cq.screens.monitoring.impl.ScreensMonitoringServiceImpl.recipients', (String) params.get('comAdobeCqScreensMonitoringImplScreensMonitoringServiceImplRecipients')));
        query.addAll(client.makeParam('com.adobe.cq.screens.monitoring.impl.ScreensMonitoringServiceImpl.smtpserver', (String) params.get('comAdobeCqScreensMonitoringImplScreensMonitoringServiceImplSmtpserver')));
        query.addAll(client.makeParam('com.adobe.cq.screens.monitoring.impl.ScreensMonitoringServiceImpl.smtpport', (Integer) params.get('comAdobeCqScreensMonitoringImplScreensMonitoringServiceImplSmtpport')));
        query.addAll(client.makeParam('com.adobe.cq.screens.monitoring.impl.ScreensMonitoringServiceImpl.usetls', (Boolean) params.get('comAdobeCqScreensMonitoringImplScreensMonitoringServiceImplUsetls')));
        query.addAll(client.makeParam('com.adobe.cq.screens.monitoring.impl.ScreensMonitoringServiceImpl.username', (String) params.get('comAdobeCqScreensMonitoringImplScreensMonitoringServiceImplUsername')));
        query.addAll(client.makeParam('com.adobe.cq.screens.monitoring.impl.ScreensMonitoringServiceImpl.password', (String) params.get('comAdobeCqScreensMonitoringImplScreensMonitoringServiceImplPassword')));

        List<OAS.Param> form = new List<OAS.Param>();

        return (OASComAdobeCqScreensMonitoringImplSc) client.invoke(
            'POST', '/system/console/configMgr/com.adobe.cq.screens.monitoring.impl.ScreensMonitoringServiceImpl', '',
            query, form,
            new Map<String, Object>(),
            new Map<String, Object>(),
            new List<String>{ 'application/json', 'text/plain' },
            new List<String>(),
            new List<String> { 'aemAuth' },
            OASComAdobeCqScreensMonitoringImplSc.class
        );
    }
    /**
     * 
     * 
     * @param post  (optional)
     * @param apply  (optional)
     * @param r_delete  (optional)
     * @param action  (optional)
     * @param location  (optional)
     * @param propertylist  (optional)
     * @param serviceRanking  (optional)
     * @param globalSize  (optional)
     * @param maxDiskUsage  (optional)
     * @param persistenceEnabled  (optional)
     * @param threadPoolMaxSize  (optional)
     * @param scheduledThreadPoolMaxSize  (optional)
     * @param gracefulShutdownTimeout  (optional)
     * @param queues  (optional)
     * @param topics  (optional)
     * @param addressesMaxDeliveryAttempts  (optional)
     * @param addressesExpiryDelay  (optional)
     * @param addressesAddressFullMessagePolicy  (optional)
     * @param addressesMaxSizeBytes  (optional)
     * @param addressesPageSizeBytes  (optional)
     * @param addressesPageCacheMaxSize  (optional)
     * @param clusterUser  (optional)
     * @param clusterPassword  (optional)
     * @param clusterCallTimeout  (optional)
     * @param clusterCallFailoverTimeout  (optional)
     * @param clusterClientFailureCheckPeriod  (optional)
     * @param clusterNotificationAttempts  (optional)
     * @param clusterNotificationInterval  (optional)
     * @param idCacheSize  (optional)
     * @param clusterConfirmationWindowSize  (optional)
     * @param clusterConnectionTtl  (optional)
     * @param clusterDuplicateDetection  (optional)
     * @param clusterInitialConnectAttempts  (optional)
     * @param clusterMaxRetryInterval  (optional)
     * @param clusterMinLargeMessageSize  (optional)
     * @param clusterProducerWindowSize  (optional)
     * @param clusterReconnectAttempts  (optional)
     * @param clusterRetryInterval  (optional)
     * @param clusterRetryIntervalMultiplier  (optional)
     * @return OASComAdobeCqScreensMqActivemqImplAr
     * @throws OAS.ApiException if fails to make API call
     */
    public OASComAdobeCqScreensMqActivemqImplAr comAdobeCqScreensMqActivemqImplArtemisJMSProvider(Map<String, Object> params) {
        List<OAS.Param> query = new List<OAS.Param>();

        // cast query params to verify their expected type
        query.addAll(client.makeParam('post', (Boolean) params.get('post')));
        query.addAll(client.makeParam('apply', (Boolean) params.get('apply')));
        query.addAll(client.makeParam('delete', (Boolean) params.get('r_delete')));
        query.addAll(client.makeParam('action', (String) params.get('action')));
        query.addAll(client.makeParam('$location', (String) params.get('location')));
        query.addAll(client.makeParam('propertylist', (List<String>) params.get('propertylist'), 'csv'));
        query.addAll(client.makeParam('service.ranking', (Integer) params.get('serviceRanking')));
        query.addAll(client.makeParam('global.size', (Integer) params.get('globalSize')));
        query.addAll(client.makeParam('max.disk.usage', (Integer) params.get('maxDiskUsage')));
        query.addAll(client.makeParam('persistence.enabled', (Boolean) params.get('persistenceEnabled')));
        query.addAll(client.makeParam('thread.pool.max.size', (Integer) params.get('threadPoolMaxSize')));
        query.addAll(client.makeParam('scheduled.thread.pool.max.size', (Integer) params.get('scheduledThreadPoolMaxSize')));
        query.addAll(client.makeParam('graceful.shutdown.timeout', (Integer) params.get('gracefulShutdownTimeout')));
        query.addAll(client.makeParams('queues', (List<String>) params.get('queues')));
        query.addAll(client.makeParams('topics', (List<String>) params.get('topics')));
        query.addAll(client.makeParam('addresses.max.delivery.attempts', (Integer) params.get('addressesMaxDeliveryAttempts')));
        query.addAll(client.makeParam('addresses.expiry.delay', (Integer) params.get('addressesExpiryDelay')));
        query.addAll(client.makeParam('addresses.address.full.message.policy', (String) params.get('addressesAddressFullMessagePolicy')));
        query.addAll(client.makeParam('addresses.max.size.bytes', (Integer) params.get('addressesMaxSizeBytes')));
        query.addAll(client.makeParam('addresses.page.size.bytes', (Integer) params.get('addressesPageSizeBytes')));
        query.addAll(client.makeParam('addresses.page.cache.max.size', (Integer) params.get('addressesPageCacheMaxSize')));
        query.addAll(client.makeParam('cluster.user', (String) params.get('clusterUser')));
        query.addAll(client.makeParam('cluster.password', (String) params.get('clusterPassword')));
        query.addAll(client.makeParam('cluster.call.timeout', (Integer) params.get('clusterCallTimeout')));
        query.addAll(client.makeParam('cluster.call.failover.timeout', (Integer) params.get('clusterCallFailoverTimeout')));
        query.addAll(client.makeParam('cluster.client.failure.check.period', (Integer) params.get('clusterClientFailureCheckPeriod')));
        query.addAll(client.makeParam('cluster.notification.attempts', (Integer) params.get('clusterNotificationAttempts')));
        query.addAll(client.makeParam('cluster.notification.interval', (Integer) params.get('clusterNotificationInterval')));
        query.addAll(client.makeParam('id.cache.size', (Integer) params.get('idCacheSize')));
        query.addAll(client.makeParam('cluster.confirmation.window.size', (Integer) params.get('clusterConfirmationWindowSize')));
        query.addAll(client.makeParam('cluster.connection.ttl', (Integer) params.get('clusterConnectionTtl')));
        query.addAll(client.makeParam('cluster.duplicate.detection', (Boolean) params.get('clusterDuplicateDetection')));
        query.addAll(client.makeParam('cluster.initial.connect.attempts', (Integer) params.get('clusterInitialConnectAttempts')));
        query.addAll(client.makeParam('cluster.max.retry.interval', (Integer) params.get('clusterMaxRetryInterval')));
        query.addAll(client.makeParam('cluster.min.large.message.size', (Integer) params.get('clusterMinLargeMessageSize')));
        query.addAll(client.makeParam('cluster.producer.window.size', (Integer) params.get('clusterProducerWindowSize')));
        query.addAll(client.makeParam('cluster.reconnect.attempts', (Integer) params.get('clusterReconnectAttempts')));
        query.addAll(client.makeParam('cluster.retry.interval', (Integer) params.get('clusterRetryInterval')));
        query.addAll(client.makeParam('cluster.retry.interval.multiplier', (Double) params.get('clusterRetryIntervalMultiplier')));

        List<OAS.Param> form = new List<OAS.Param>();

        return (OASComAdobeCqScreensMqActivemqImplAr) client.invoke(
            'POST', '/system/console/configMgr/com.adobe.cq.screens.mq.activemq.impl.ArtemisJMSProvider', '',
            query, form,
            new Map<String, Object>(),
            new Map<String, Object>(),
            new List<String>{ 'application/json', 'text/plain' },
            new List<String>(),
            new List<String> { 'aemAuth' },
            OASComAdobeCqScreensMqActivemqImplAr.class
        );
    }
    /**
     * 
     * 
     * @param post  (optional)
     * @param apply  (optional)
     * @param r_delete  (optional)
     * @param action  (optional)
     * @param location  (optional)
     * @param propertylist  (optional)
     * @param comAdobeCqScreensOfflinecontentImplBulkOfflineUpdateServiceImplProjectPath  (optional)
     * @param comAdobeCqScreensOfflinecontentImplBulkOfflineUpdateServiceImplScheduleFrequency  (optional)
     * @return OASComAdobeCqScreensOfflinecontentIm
     * @throws OAS.ApiException if fails to make API call
     */
    public OASComAdobeCqScreensOfflinecontentIm comAdobeCqScreensOfflinecontentImplBulkOfflineUpdateServiceImpl(Map<String, Object> params) {
        List<OAS.Param> query = new List<OAS.Param>();

        // cast query params to verify their expected type
        query.addAll(client.makeParam('post', (Boolean) params.get('post')));
        query.addAll(client.makeParam('apply', (Boolean) params.get('apply')));
        query.addAll(client.makeParam('delete', (Boolean) params.get('r_delete')));
        query.addAll(client.makeParam('action', (String) params.get('action')));
        query.addAll(client.makeParam('$location', (String) params.get('location')));
        query.addAll(client.makeParam('propertylist', (List<String>) params.get('propertylist'), 'csv'));
        query.addAll(client.makeParams('com.adobe.cq.screens.offlinecontent.impl.BulkOfflineUpdateServiceImpl.projectPath', (List<String>) params.get('comAdobeCqScreensOfflinecontentImplBulkOfflineUpdateServiceImplProjectPath')));
        query.addAll(client.makeParam('com.adobe.cq.screens.offlinecontent.impl.BulkOfflineUpdateServiceImpl.scheduleFrequency', (String) params.get('comAdobeCqScreensOfflinecontentImplBulkOfflineUpdateServiceImplScheduleFrequency')));

        List<OAS.Param> form = new List<OAS.Param>();

        return (OASComAdobeCqScreensOfflinecontentIm) client.invoke(
            'POST', '/system/console/configMgr/com.adobe.cq.screens.offlinecontent.impl.BulkOfflineUpdateServiceImpl', '',
            query, form,
            new Map<String, Object>(),
            new Map<String, Object>(),
            new List<String>{ 'application/json', 'text/plain' },
            new List<String>(),
            new List<String> { 'aemAuth' },
            OASComAdobeCqScreensOfflinecontentIm.class
        );
    }
    /**
     * 
     * 
     * @param post  (optional)
     * @param apply  (optional)
     * @param r_delete  (optional)
     * @param action  (optional)
     * @param location  (optional)
     * @param propertylist  (optional)
     * @param disableSmartSync  (optional)
     * @return OASComAdobeCqScreensOfflinecontentIm
     * @throws OAS.ApiException if fails to make API call
     */
    public OASComAdobeCqScreensOfflinecontentIm comAdobeCqScreensOfflinecontentImplOfflineContentServiceImpl(Map<String, Object> params) {
        List<OAS.Param> query = new List<OAS.Param>();

        // cast query params to verify their expected type
        query.addAll(client.makeParam('post', (Boolean) params.get('post')));
        query.addAll(client.makeParam('apply', (Boolean) params.get('apply')));
        query.addAll(client.makeParam('delete', (Boolean) params.get('r_delete')));
        query.addAll(client.makeParam('action', (String) params.get('action')));
        query.addAll(client.makeParam('$location', (String) params.get('location')));
        query.addAll(client.makeParam('propertylist', (List<String>) params.get('propertylist'), 'csv'));
        query.addAll(client.makeParam('disableSmartSync', (Boolean) params.get('disableSmartSync')));

        List<OAS.Param> form = new List<OAS.Param>();

        return (OASComAdobeCqScreensOfflinecontentIm) client.invoke(
            'POST', '/system/console/configMgr/com.adobe.cq.screens.offlinecontent.impl.OfflineContentServiceImpl', '',
            query, form,
            new Map<String, Object>(),
            new Map<String, Object>(),
            new List<String>{ 'application/json', 'text/plain' },
            new List<String>(),
            new List<String> { 'aemAuth' },
            OASComAdobeCqScreensOfflinecontentIm.class
        );
    }
    /**
     * 
     * 
     * @param post  (optional)
     * @param apply  (optional)
     * @param r_delete  (optional)
     * @param action  (optional)
     * @param location  (optional)
     * @param propertylist  (optional)
     * @param enableDataTriggeredContent  (optional)
     * @return OASComAdobeCqScreensSegmentationImpl
     * @throws OAS.ApiException if fails to make API call
     */
    public OASComAdobeCqScreensSegmentationImpl comAdobeCqScreensSegmentationImplSegmentationFeatureFlag(Map<String, Object> params) {
        List<OAS.Param> query = new List<OAS.Param>();

        // cast query params to verify their expected type
        query.addAll(client.makeParam('post', (Boolean) params.get('post')));
        query.addAll(client.makeParam('apply', (Boolean) params.get('apply')));
        query.addAll(client.makeParam('delete', (Boolean) params.get('r_delete')));
        query.addAll(client.makeParam('action', (String) params.get('action')));
        query.addAll(client.makeParam('$location', (String) params.get('location')));
        query.addAll(client.makeParam('propertylist', (List<String>) params.get('propertylist'), 'csv'));
        query.addAll(client.makeParam('enableDataTriggeredContent', (Boolean) params.get('enableDataTriggeredContent')));

        List<OAS.Param> form = new List<OAS.Param>();

        return (OASComAdobeCqScreensSegmentationImpl) client.invoke(
            'POST', '/system/console/configMgr/com.adobe.cq.screens.segmentation.impl.SegmentationFeatureFlag', '',
            query, form,
            new Map<String, Object>(),
            new Map<String, Object>(),
            new List<String>{ 'application/json', 'text/plain' },
            new List<String>(),
            new List<String> { 'aemAuth' },
            OASComAdobeCqScreensSegmentationImpl.class
        );
    }
    /**
     * 
     * 
     * @param post  (optional)
     * @param apply  (optional)
     * @param r_delete  (optional)
     * @param action  (optional)
     * @param location  (optional)
     * @param propertylist  (optional)
     * @param hcTags  (optional)
     * @return OASComAdobeCqSecurityHcBundlesImplHt
     * @throws OAS.ApiException if fails to make API call
     */
    public OASComAdobeCqSecurityHcBundlesImplHt comAdobeCqSecurityHcBundlesImplHtmlLibraryManagerConfigHealthCh(Map<String, Object> params) {
        List<OAS.Param> query = new List<OAS.Param>();

        // cast query params to verify their expected type
        query.addAll(client.makeParam('post', (Boolean) params.get('post')));
        query.addAll(client.makeParam('apply', (Boolean) params.get('apply')));
        query.addAll(client.makeParam('delete', (Boolean) params.get('r_delete')));
        query.addAll(client.makeParam('action', (String) params.get('action')));
        query.addAll(client.makeParam('$location', (String) params.get('location')));
        query.addAll(client.makeParam('propertylist', (List<String>) params.get('propertylist'), 'csv'));
        query.addAll(client.makeParams('hc.tags', (List<String>) params.get('hcTags')));

        List<OAS.Param> form = new List<OAS.Param>();

        return (OASComAdobeCqSecurityHcBundlesImplHt) client.invoke(
            'POST', '/system/console/configMgr/com.adobe.cq.security.hc.bundles.impl.HtmlLibraryManagerConfigHealthCheck', '',
            query, form,
            new Map<String, Object>(),
            new Map<String, Object>(),
            new List<String>{ 'application/json', 'text/plain' },
            new List<String>(),
            new List<String> { 'aemAuth' },
            OASComAdobeCqSecurityHcBundlesImplHt.class
        );
    }
    /**
     * 
     * 
     * @param post  (optional)
     * @param apply  (optional)
     * @param r_delete  (optional)
     * @param action  (optional)
     * @param location  (optional)
     * @param propertylist  (optional)
     * @param hcTags  (optional)
     * @return OASComAdobeCqSecurityHcBundlesImplWc
     * @throws OAS.ApiException if fails to make API call
     */
    public OASComAdobeCqSecurityHcBundlesImplWc comAdobeCqSecurityHcBundlesImplWcmFilterHealthCheck(Map<String, Object> params) {
        List<OAS.Param> query = new List<OAS.Param>();

        // cast query params to verify their expected type
        query.addAll(client.makeParam('post', (Boolean) params.get('post')));
        query.addAll(client.makeParam('apply', (Boolean) params.get('apply')));
        query.addAll(client.makeParam('delete', (Boolean) params.get('r_delete')));
        query.addAll(client.makeParam('action', (String) params.get('action')));
        query.addAll(client.makeParam('$location', (String) params.get('location')));
        query.addAll(client.makeParam('propertylist', (List<String>) params.get('propertylist'), 'csv'));
        query.addAll(client.makeParams('hc.tags', (List<String>) params.get('hcTags')));

        List<OAS.Param> form = new List<OAS.Param>();

        return (OASComAdobeCqSecurityHcBundlesImplWc) client.invoke(
            'POST', '/system/console/configMgr/com.adobe.cq.security.hc.bundles.impl.WcmFilterHealthCheck', '',
            query, form,
            new Map<String, Object>(),
            new Map<String, Object>(),
            new List<String>{ 'application/json', 'text/plain' },
            new List<String>(),
            new List<String> { 'aemAuth' },
            OASComAdobeCqSecurityHcBundlesImplWc.class
        );
    }
    /**
     * 
     * 
     * @param post  (optional)
     * @param apply  (optional)
     * @param r_delete  (optional)
     * @param action  (optional)
     * @param location  (optional)
     * @param propertylist  (optional)
     * @param hcTags  (optional)
     * @param dispatcherAddress  (optional)
     * @param dispatcherFilterAllowed  (optional)
     * @param dispatcherFilterBlocked  (optional)
     * @return OASComAdobeCqSecurityHcDispatcherImp
     * @throws OAS.ApiException if fails to make API call
     */
    public OASComAdobeCqSecurityHcDispatcherImp comAdobeCqSecurityHcDispatcherImplDispatcherAccessHealthCheck(Map<String, Object> params) {
        List<OAS.Param> query = new List<OAS.Param>();

        // cast query params to verify their expected type
        query.addAll(client.makeParam('post', (Boolean) params.get('post')));
        query.addAll(client.makeParam('apply', (Boolean) params.get('apply')));
        query.addAll(client.makeParam('delete', (Boolean) params.get('r_delete')));
        query.addAll(client.makeParam('action', (String) params.get('action')));
        query.addAll(client.makeParam('$location', (String) params.get('location')));
        query.addAll(client.makeParam('propertylist', (List<String>) params.get('propertylist'), 'csv'));
        query.addAll(client.makeParams('hc.tags', (List<String>) params.get('hcTags')));
        query.addAll(client.makeParam('dispatcher.address', (String) params.get('dispatcherAddress')));
        query.addAll(client.makeParams('dispatcher.filter.allowed', (List<String>) params.get('dispatcherFilterAllowed')));
        query.addAll(client.makeParams('dispatcher.filter.blocked', (List<String>) params.get('dispatcherFilterBlocked')));

        List<OAS.Param> form = new List<OAS.Param>();

        return (OASComAdobeCqSecurityHcDispatcherImp) client.invoke(
            'POST', '/system/console/configMgr/com.adobe.cq.security.hc.dispatcher.impl.DispatcherAccessHealthCheck', '',
            query, form,
            new Map<String, Object>(),
            new Map<String, Object>(),
            new List<String>{ 'application/json', 'text/plain' },
            new List<String>(),
            new List<String> { 'aemAuth' },
            OASComAdobeCqSecurityHcDispatcherImp.class
        );
    }
    /**
     * 
     * 
     * @param post  (optional)
     * @param apply  (optional)
     * @param r_delete  (optional)
     * @param action  (optional)
     * @param location  (optional)
     * @param propertylist  (optional)
     * @param hcTags  (optional)
     * @return OASComAdobeCqSecurityHcPackagesImplE
     * @throws OAS.ApiException if fails to make API call
     */
    public OASComAdobeCqSecurityHcPackagesImplE comAdobeCqSecurityHcPackagesImplExampleContentHealthCheck(Map<String, Object> params) {
        List<OAS.Param> query = new List<OAS.Param>();

        // cast query params to verify their expected type
        query.addAll(client.makeParam('post', (Boolean) params.get('post')));
        query.addAll(client.makeParam('apply', (Boolean) params.get('apply')));
        query.addAll(client.makeParam('delete', (Boolean) params.get('r_delete')));
        query.addAll(client.makeParam('action', (String) params.get('action')));
        query.addAll(client.makeParam('$location', (String) params.get('location')));
        query.addAll(client.makeParam('propertylist', (List<String>) params.get('propertylist'), 'csv'));
        query.addAll(client.makeParams('hc.tags', (List<String>) params.get('hcTags')));

        List<OAS.Param> form = new List<OAS.Param>();

        return (OASComAdobeCqSecurityHcPackagesImplE) client.invoke(
            'POST', '/system/console/configMgr/com.adobe.cq.security.hc.packages.impl.ExampleContentHealthCheck', '',
            query, form,
            new Map<String, Object>(),
            new Map<String, Object>(),
            new List<String>{ 'application/json', 'text/plain' },
            new List<String>(),
            new List<String> { 'aemAuth' },
            OASComAdobeCqSecurityHcPackagesImplE.class
        );
    }
    /**
     * 
     * 
     * @param post  (optional)
     * @param apply  (optional)
     * @param r_delete  (optional)
     * @param action  (optional)
     * @param location  (optional)
     * @param propertylist  (optional)
     * @param hcTags  (optional)
     * @param webserverAddress  (optional)
     * @return OASComAdobeCqSecurityHcWebserverImpl
     * @throws OAS.ApiException if fails to make API call
     */
    public OASComAdobeCqSecurityHcWebserverImpl comAdobeCqSecurityHcWebserverImplClickjackingHealthCheck(Map<String, Object> params) {
        List<OAS.Param> query = new List<OAS.Param>();

        // cast query params to verify their expected type
        query.addAll(client.makeParam('post', (Boolean) params.get('post')));
        query.addAll(client.makeParam('apply', (Boolean) params.get('apply')));
        query.addAll(client.makeParam('delete', (Boolean) params.get('r_delete')));
        query.addAll(client.makeParam('action', (String) params.get('action')));
        query.addAll(client.makeParam('$location', (String) params.get('location')));
        query.addAll(client.makeParam('propertylist', (List<String>) params.get('propertylist'), 'csv'));
        query.addAll(client.makeParams('hc.tags', (List<String>) params.get('hcTags')));
        query.addAll(client.makeParam('webserver.address', (String) params.get('webserverAddress')));

        List<OAS.Param> form = new List<OAS.Param>();

        return (OASComAdobeCqSecurityHcWebserverImpl) client.invoke(
            'POST', '/system/console/configMgr/com.adobe.cq.security.hc.webserver.impl.ClickjackingHealthCheck', '',
            query, form,
            new Map<String, Object>(),
            new Map<String, Object>(),
            new List<String>{ 'application/json', 'text/plain' },
            new List<String>(),
            new List<String> { 'aemAuth' },
            OASComAdobeCqSecurityHcWebserverImpl.class
        );
    }
    /**
     * 
     * 
     * @param post  (optional)
     * @param apply  (optional)
     * @param r_delete  (optional)
     * @param action  (optional)
     * @param location  (optional)
     * @param propertylist  (optional)
     * @param enable  (optional)
     * @param ttl1  (optional)
     * @param ttl2  (optional)
     * @return OASComAdobeCqSocialAccountverificati
     * @throws OAS.ApiException if fails to make API call
     */
    public OASComAdobeCqSocialAccountverificati comAdobeCqSocialAccountverificationImplAccountManagementConfigIm(Map<String, Object> params) {
        List<OAS.Param> query = new List<OAS.Param>();

        // cast query params to verify their expected type
        query.addAll(client.makeParam('post', (Boolean) params.get('post')));
        query.addAll(client.makeParam('apply', (Boolean) params.get('apply')));
        query.addAll(client.makeParam('delete', (Boolean) params.get('r_delete')));
        query.addAll(client.makeParam('action', (String) params.get('action')));
        query.addAll(client.makeParam('$location', (String) params.get('location')));
        query.addAll(client.makeParam('propertylist', (List<String>) params.get('propertylist'), 'csv'));
        query.addAll(client.makeParam('enable', (Boolean) params.get('enable')));
        query.addAll(client.makeParam('ttl1', (Integer) params.get('ttl1')));
        query.addAll(client.makeParam('ttl2', (Integer) params.get('ttl2')));

        List<OAS.Param> form = new List<OAS.Param>();

        return (OASComAdobeCqSocialAccountverificati) client.invoke(
            'POST', '/system/console/configMgr/com.adobe.cq.social.accountverification.impl.AccountManagementConfigImpl', '',
            query, form,
            new Map<String, Object>(),
            new Map<String, Object>(),
            new List<String>{ 'application/json', 'text/plain' },
            new List<String>(),
            new List<String> { 'aemAuth' },
            OASComAdobeCqSocialAccountverificati.class
        );
    }
    /**
     * 
     * 
     * @param post  (optional)
     * @param apply  (optional)
     * @param r_delete  (optional)
     * @param action  (optional)
     * @param location  (optional)
     * @param propertylist  (optional)
     * @param priority  (optional)
     * @return OASComAdobeCqSocialActivitystreamsCl
     * @throws OAS.ApiException if fails to make API call
     */
    public OASComAdobeCqSocialActivitystreamsCl comAdobeCqSocialActivitystreamsClientImplSocialActivityComponen(Map<String, Object> params) {
        List<OAS.Param> query = new List<OAS.Param>();

        // cast query params to verify their expected type
        query.addAll(client.makeParam('post', (Boolean) params.get('post')));
        query.addAll(client.makeParam('apply', (Boolean) params.get('apply')));
        query.addAll(client.makeParam('delete', (Boolean) params.get('r_delete')));
        query.addAll(client.makeParam('action', (String) params.get('action')));
        query.addAll(client.makeParam('$location', (String) params.get('location')));
        query.addAll(client.makeParam('propertylist', (List<String>) params.get('propertylist'), 'csv'));
        query.addAll(client.makeParam('priority', (Integer) params.get('priority')));

        List<OAS.Param> form = new List<OAS.Param>();

        return (OASComAdobeCqSocialActivitystreamsCl) client.invoke(
            'POST', '/system/console/configMgr/com.adobe.cq.social.activitystreams.client.impl.SocialActivityComponentFactoryImpl', '',
            query, form,
            new Map<String, Object>(),
            new Map<String, Object>(),
            new List<String>{ 'application/json', 'text/plain' },
            new List<String>(),
            new List<String> { 'aemAuth' },
            OASComAdobeCqSocialActivitystreamsCl.class
        );
    }
    /**
     * 
     * 
     * @param post  (optional)
     * @param apply  (optional)
     * @param r_delete  (optional)
     * @param action  (optional)
     * @param location  (optional)
     * @param propertylist  (optional)
     * @param priority  (optional)
     * @return OASComAdobeCqSocialActivitystreamsCl
     * @throws OAS.ApiException if fails to make API call
     */
    public OASComAdobeCqSocialActivitystreamsCl comAdobeCqSocialActivitystreamsClientImplSocialActivityStreamCo(Map<String, Object> params) {
        List<OAS.Param> query = new List<OAS.Param>();

        // cast query params to verify their expected type
        query.addAll(client.makeParam('post', (Boolean) params.get('post')));
        query.addAll(client.makeParam('apply', (Boolean) params.get('apply')));
        query.addAll(client.makeParam('delete', (Boolean) params.get('r_delete')));
        query.addAll(client.makeParam('action', (String) params.get('action')));
        query.addAll(client.makeParam('$location', (String) params.get('location')));
        query.addAll(client.makeParam('propertylist', (List<String>) params.get('propertylist'), 'csv'));
        query.addAll(client.makeParam('priority', (Integer) params.get('priority')));

        List<OAS.Param> form = new List<OAS.Param>();

        return (OASComAdobeCqSocialActivitystreamsCl) client.invoke(
            'POST', '/system/console/configMgr/com.adobe.cq.social.activitystreams.client.impl.SocialActivityStreamComponentFactory', '',
            query, form,
            new Map<String, Object>(),
            new Map<String, Object>(),
            new List<String>{ 'application/json', 'text/plain' },
            new List<String>(),
            new List<String> { 'aemAuth' },
            OASComAdobeCqSocialActivitystreamsCl.class
        );
    }
    /**
     * 
     * 
     * @param post  (optional)
     * @param apply  (optional)
     * @param r_delete  (optional)
     * @param action  (optional)
     * @param location  (optional)
     * @param propertylist  (optional)
     * @param eventTopics  (optional)
     * @param eventFilter  (optional)
     * @return OASComAdobeCqSocialActivitystreamsLi
     * @throws OAS.ApiException if fails to make API call
     */
    public OASComAdobeCqSocialActivitystreamsLi comAdobeCqSocialActivitystreamsListenerImplEventListenerHandler(Map<String, Object> params) {
        List<OAS.Param> query = new List<OAS.Param>();

        // cast query params to verify their expected type
        query.addAll(client.makeParam('post', (Boolean) params.get('post')));
        query.addAll(client.makeParam('apply', (Boolean) params.get('apply')));
        query.addAll(client.makeParam('delete', (Boolean) params.get('r_delete')));
        query.addAll(client.makeParam('action', (String) params.get('action')));
        query.addAll(client.makeParam('$location', (String) params.get('location')));
        query.addAll(client.makeParam('propertylist', (List<String>) params.get('propertylist'), 'csv'));
        query.addAll(client.makeParam('event.topics', (String) params.get('eventTopics')));
        query.addAll(client.makeParam('event.filter', (String) params.get('eventFilter')));

        List<OAS.Param> form = new List<OAS.Param>();

        return (OASComAdobeCqSocialActivitystreamsLi) client.invoke(
            'POST', '/system/console/configMgr/com.adobe.cq.social.activitystreams.listener.impl.EventListenerHandler', '',
            query, form,
            new Map<String, Object>(),
            new Map<String, Object>(),
            new List<String>{ 'application/json', 'text/plain' },
            new List<String>(),
            new List<String> { 'aemAuth' },
            OASComAdobeCqSocialActivitystreamsLi.class
        );
    }
    /**
     * 
     * 
     * @param post  (optional)
     * @param apply  (optional)
     * @param r_delete  (optional)
     * @param action  (optional)
     * @param location  (optional)
     * @param propertylist  (optional)
     * @param accepted  (optional)
     * @param ranked  (optional)
     * @return OASComAdobeCqSocialActivitystreamsLi
     * @throws OAS.ApiException if fails to make API call
     */
    public OASComAdobeCqSocialActivitystreamsLi comAdobeCqSocialActivitystreamsListenerImplModerationEventExten(Map<String, Object> params) {
        List<OAS.Param> query = new List<OAS.Param>();

        // cast query params to verify their expected type
        query.addAll(client.makeParam('post', (Boolean) params.get('post')));
        query.addAll(client.makeParam('apply', (Boolean) params.get('apply')));
        query.addAll(client.makeParam('delete', (Boolean) params.get('r_delete')));
        query.addAll(client.makeParam('action', (String) params.get('action')));
        query.addAll(client.makeParam('$location', (String) params.get('location')));
        query.addAll(client.makeParam('propertylist', (List<String>) params.get('propertylist'), 'csv'));
        query.addAll(client.makeParam('accepted', (Boolean) params.get('accepted')));
        query.addAll(client.makeParam('ranked', (Integer) params.get('ranked')));

        List<OAS.Param> form = new List<OAS.Param>();

        return (OASComAdobeCqSocialActivitystreamsLi) client.invoke(
            'POST', '/system/console/configMgr/com.adobe.cq.social.activitystreams.listener.impl.ModerationEventExtension', '',
            query, form,
            new Map<String, Object>(),
            new Map<String, Object>(),
            new List<String>{ 'application/json', 'text/plain' },
            new List<String>(),
            new List<String> { 'aemAuth' },
            OASComAdobeCqSocialActivitystreamsLi.class
        );
    }
    /**
     * 
     * 
     * @param post  (optional)
     * @param apply  (optional)
     * @param r_delete  (optional)
     * @param action  (optional)
     * @param location  (optional)
     * @param propertylist  (optional)
     * @param ranking  (optional)
     * @param enable  (optional)
     * @return OASComAdobeCqSocialActivitystreamsLi
     * @throws OAS.ApiException if fails to make API call
     */
    public OASComAdobeCqSocialActivitystreamsLi comAdobeCqSocialActivitystreamsListenerImplRatingEventActivityS(Map<String, Object> params) {
        List<OAS.Param> query = new List<OAS.Param>();

        // cast query params to verify their expected type
        query.addAll(client.makeParam('post', (Boolean) params.get('post')));
        query.addAll(client.makeParam('apply', (Boolean) params.get('apply')));
        query.addAll(client.makeParam('delete', (Boolean) params.get('r_delete')));
        query.addAll(client.makeParam('action', (String) params.get('action')));
        query.addAll(client.makeParam('$location', (String) params.get('location')));
        query.addAll(client.makeParam('propertylist', (List<String>) params.get('propertylist'), 'csv'));
        query.addAll(client.makeParam('ranking', (Integer) params.get('ranking')));
        query.addAll(client.makeParam('enable', (Boolean) params.get('enable')));

        List<OAS.Param> form = new List<OAS.Param>();

        return (OASComAdobeCqSocialActivitystreamsLi) client.invoke(
            'POST', '/system/console/configMgr/com.adobe.cq.social.activitystreams.listener.impl.RatingEventActivitySuppressor', '',
            query, form,
            new Map<String, Object>(),
            new Map<String, Object>(),
            new List<String>{ 'application/json', 'text/plain' },
            new List<String>(),
            new List<String> { 'aemAuth' },
            OASComAdobeCqSocialActivitystreamsLi.class
        );
    }
    /**
     * 
     * 
     * @param post  (optional)
     * @param apply  (optional)
     * @param r_delete  (optional)
     * @param action  (optional)
     * @param location  (optional)
     * @param propertylist  (optional)
     * @param streamPath  (optional)
     * @param streamName  (optional)
     * @return OASComAdobeCqSocialActivitystreamsLi
     * @throws OAS.ApiException if fails to make API call
     */
    public OASComAdobeCqSocialActivitystreamsLi comAdobeCqSocialActivitystreamsListenerImplResourceActivityStre(Map<String, Object> params) {
        List<OAS.Param> query = new List<OAS.Param>();

        // cast query params to verify their expected type
        query.addAll(client.makeParam('post', (Boolean) params.get('post')));
        query.addAll(client.makeParam('apply', (Boolean) params.get('apply')));
        query.addAll(client.makeParam('delete', (Boolean) params.get('r_delete')));
        query.addAll(client.makeParam('action', (String) params.get('action')));
        query.addAll(client.makeParam('$location', (String) params.get('location')));
        query.addAll(client.makeParam('propertylist', (List<String>) params.get('propertylist'), 'csv'));
        query.addAll(client.makeParam('streamPath', (String) params.get('streamPath')));
        query.addAll(client.makeParam('streamName', (String) params.get('streamName')));

        List<OAS.Param> form = new List<OAS.Param>();

        return (OASComAdobeCqSocialActivitystreamsLi) client.invoke(
            'POST', '/system/console/configMgr/com.adobe.cq.social.activitystreams.listener.impl.ResourceActivityStreamProviderFactory', '',
            query, form,
            new Map<String, Object>(),
            new Map<String, Object>(),
            new List<String>{ 'application/json', 'text/plain' },
            new List<String>(),
            new List<String> { 'aemAuth' },
            OASComAdobeCqSocialActivitystreamsLi.class
        );
    }
    /**
     * 
     * 
     * @param post  (optional)
     * @param apply  (optional)
     * @param r_delete  (optional)
     * @param action  (optional)
     * @param location  (optional)
     * @param propertylist  (optional)
     * @param maxRetry  (optional)
     * @param fieldWhitelist  (optional)
     * @param attachmentTypeBlacklist  (optional)
     * @return OASComAdobeCqSocialCalendarClientEnd
     * @throws OAS.ApiException if fails to make API call
     */
    public OASComAdobeCqSocialCalendarClientEnd comAdobeCqSocialCalendarClientEndpointsImplCalendarOperationsI(Map<String, Object> params) {
        List<OAS.Param> query = new List<OAS.Param>();

        // cast query params to verify their expected type
        query.addAll(client.makeParam('post', (Boolean) params.get('post')));
        query.addAll(client.makeParam('apply', (Boolean) params.get('apply')));
        query.addAll(client.makeParam('delete', (Boolean) params.get('r_delete')));
        query.addAll(client.makeParam('action', (String) params.get('action')));
        query.addAll(client.makeParam('$location', (String) params.get('location')));
        query.addAll(client.makeParam('propertylist', (List<String>) params.get('propertylist'), 'csv'));
        query.addAll(client.makeParam('MaxRetry', (Integer) params.get('maxRetry')));
        query.addAll(client.makeParams('fieldWhitelist', (List<String>) params.get('fieldWhitelist')));
        query.addAll(client.makeParams('attachmentTypeBlacklist', (List<String>) params.get('attachmentTypeBlacklist')));

        List<OAS.Param> form = new List<OAS.Param>();

        return (OASComAdobeCqSocialCalendarClientEnd) client.invoke(
            'POST', '/system/console/configMgr/com.adobe.cq.social.calendar.client.endpoints.impl.CalendarOperationsImpl', '',
            query, form,
            new Map<String, Object>(),
            new Map<String, Object>(),
            new List<String>{ 'application/json', 'text/plain' },
            new List<String>(),
            new List<String> { 'aemAuth' },
            OASComAdobeCqSocialCalendarClientEnd.class
        );
    }
    /**
     * 
     * 
     * @param post  (optional)
     * @param apply  (optional)
     * @param r_delete  (optional)
     * @param action  (optional)
     * @param location  (optional)
     * @param propertylist  (optional)
     * @param attachmentTypeBlacklist  (optional)
     * @param extensionOrder  (optional)
     * @return OASComAdobeCqSocialCalendarClientOpe
     * @throws OAS.ApiException if fails to make API call
     */
    public OASComAdobeCqSocialCalendarClientOpe comAdobeCqSocialCalendarClientOperationextensionsEventAttachmen(Map<String, Object> params) {
        List<OAS.Param> query = new List<OAS.Param>();

        // cast query params to verify their expected type
        query.addAll(client.makeParam('post', (Boolean) params.get('post')));
        query.addAll(client.makeParam('apply', (Boolean) params.get('apply')));
        query.addAll(client.makeParam('delete', (Boolean) params.get('r_delete')));
        query.addAll(client.makeParam('action', (String) params.get('action')));
        query.addAll(client.makeParam('$location', (String) params.get('location')));
        query.addAll(client.makeParam('propertylist', (List<String>) params.get('propertylist'), 'csv'));
        query.addAll(client.makeParam('attachmentTypeBlacklist', (String) params.get('attachmentTypeBlacklist')));
        query.addAll(client.makeParam('extension.order', (Integer) params.get('extensionOrder')));

        List<OAS.Param> form = new List<OAS.Param>();

        return (OASComAdobeCqSocialCalendarClientOpe) client.invoke(
            'POST', '/system/console/configMgr/com.adobe.cq.social.calendar.client.operationextensions.EventAttachment', '',
            query, form,
            new Map<String, Object>(),
            new Map<String, Object>(),
            new List<String>{ 'application/json', 'text/plain' },
            new List<String>(),
            new List<String> { 'aemAuth' },
            OASComAdobeCqSocialCalendarClientOpe.class
        );
    }
    /**
     * 
     * 
     * @param post  (optional)
     * @param apply  (optional)
     * @param r_delete  (optional)
     * @param action  (optional)
     * @param location  (optional)
     * @param propertylist  (optional)
     * @param timezonesExpirytime  (optional)
     * @return OASComAdobeCqSocialCalendarServletsT
     * @throws OAS.ApiException if fails to make API call
     */
    public OASComAdobeCqSocialCalendarServletsT comAdobeCqSocialCalendarServletsTimeZoneServlet(Map<String, Object> params) {
        List<OAS.Param> query = new List<OAS.Param>();

        // cast query params to verify their expected type
        query.addAll(client.makeParam('post', (Boolean) params.get('post')));
        query.addAll(client.makeParam('apply', (Boolean) params.get('apply')));
        query.addAll(client.makeParam('delete', (Boolean) params.get('r_delete')));
        query.addAll(client.makeParam('action', (String) params.get('action')));
        query.addAll(client.makeParam('$location', (String) params.get('location')));
        query.addAll(client.makeParam('propertylist', (List<String>) params.get('propertylist'), 'csv'));
        query.addAll(client.makeParam('timezones.expirytime', (Integer) params.get('timezonesExpirytime')));

        List<OAS.Param> form = new List<OAS.Param>();

        return (OASComAdobeCqSocialCalendarServletsT) client.invoke(
            'POST', '/system/console/configMgr/com.adobe.cq.social.calendar.servlets.TimeZoneServlet', '',
            query, form,
            new Map<String, Object>(),
            new Map<String, Object>(),
            new List<String>{ 'application/json', 'text/plain' },
            new List<String>(),
            new List<String> { 'aemAuth' },
            OASComAdobeCqSocialCalendarServletsT.class
        );
    }
    /**
     * 
     * 
     * @param post  (optional)
     * @param apply  (optional)
     * @param r_delete  (optional)
     * @param action  (optional)
     * @param location  (optional)
     * @param propertylist  (optional)
     * @param ranking  (optional)
     * @return OASComAdobeCqSocialCommonsCommentsEn
     * @throws OAS.ApiException if fails to make API call
     */
    public OASComAdobeCqSocialCommonsCommentsEn comAdobeCqSocialCommonsCommentsEndpointsImplCommentDeleteEvent(Map<String, Object> params) {
        List<OAS.Param> query = new List<OAS.Param>();

        // cast query params to verify their expected type
        query.addAll(client.makeParam('post', (Boolean) params.get('post')));
        query.addAll(client.makeParam('apply', (Boolean) params.get('apply')));
        query.addAll(client.makeParam('delete', (Boolean) params.get('r_delete')));
        query.addAll(client.makeParam('action', (String) params.get('action')));
        query.addAll(client.makeParam('$location', (String) params.get('location')));
        query.addAll(client.makeParam('propertylist', (List<String>) params.get('propertylist'), 'csv'));
        query.addAll(client.makeParam('ranking', (Integer) params.get('ranking')));

        List<OAS.Param> form = new List<OAS.Param>();

        return (OASComAdobeCqSocialCommonsCommentsEn) client.invoke(
            'POST', '/system/console/configMgr/com.adobe.cq.social.commons.comments.endpoints.impl.CommentDeleteEventActivitySuppressor', '',
            query, form,
            new Map<String, Object>(),
            new Map<String, Object>(),
            new List<String>{ 'application/json', 'text/plain' },
            new List<String>(),
            new List<String> { 'aemAuth' },
            OASComAdobeCqSocialCommonsCommentsEn.class
        );
    }
    /**
     * 
     * 
     * @param post  (optional)
     * @param apply  (optional)
     * @param r_delete  (optional)
     * @param action  (optional)
     * @param location  (optional)
     * @param propertylist  (optional)
     * @param fieldWhitelist  (optional)
     * @param attachmentTypeBlacklist  (optional)
     * @return OASComAdobeCqSocialCommonsCommentsEn
     * @throws OAS.ApiException if fails to make API call
     */
    public OASComAdobeCqSocialCommonsCommentsEn comAdobeCqSocialCommonsCommentsEndpointsImplCommentOperationSe(Map<String, Object> params) {
        List<OAS.Param> query = new List<OAS.Param>();

        // cast query params to verify their expected type
        query.addAll(client.makeParam('post', (Boolean) params.get('post')));
        query.addAll(client.makeParam('apply', (Boolean) params.get('apply')));
        query.addAll(client.makeParam('delete', (Boolean) params.get('r_delete')));
        query.addAll(client.makeParam('action', (String) params.get('action')));
        query.addAll(client.makeParam('$location', (String) params.get('location')));
        query.addAll(client.makeParam('propertylist', (List<String>) params.get('propertylist'), 'csv'));
        query.addAll(client.makeParams('fieldWhitelist', (List<String>) params.get('fieldWhitelist')));
        query.addAll(client.makeParams('attachmentTypeBlacklist', (List<String>) params.get('attachmentTypeBlacklist')));

        List<OAS.Param> form = new List<OAS.Param>();

        return (OASComAdobeCqSocialCommonsCommentsEn) client.invoke(
            'POST', '/system/console/configMgr/com.adobe.cq.social.commons.comments.endpoints.impl.CommentOperationService', '',
            query, form,
            new Map<String, Object>(),
            new Map<String, Object>(),
            new List<String>{ 'application/json', 'text/plain' },
            new List<String>(),
            new List<String> { 'aemAuth' },
            OASComAdobeCqSocialCommonsCommentsEn.class
        );
    }
    /**
     * 
     * 
     * @param post  (optional)
     * @param apply  (optional)
     * @param r_delete  (optional)
     * @param action  (optional)
     * @param location  (optional)
     * @param propertylist  (optional)
     * @param fieldWhitelist  (optional)
     * @param attachmentTypeBlacklist  (optional)
     * @return OASComAdobeCqSocialCommonsCommentsEn
     * @throws OAS.ApiException if fails to make API call
     */
    public OASComAdobeCqSocialCommonsCommentsEn comAdobeCqSocialCommonsCommentsEndpointsImplTranslationOperati(Map<String, Object> params) {
        List<OAS.Param> query = new List<OAS.Param>();

        // cast query params to verify their expected type
        query.addAll(client.makeParam('post', (Boolean) params.get('post')));
        query.addAll(client.makeParam('apply', (Boolean) params.get('apply')));
        query.addAll(client.makeParam('delete', (Boolean) params.get('r_delete')));
        query.addAll(client.makeParam('action', (String) params.get('action')));
        query.addAll(client.makeParam('$location', (String) params.get('location')));
        query.addAll(client.makeParam('propertylist', (List<String>) params.get('propertylist'), 'csv'));
        query.addAll(client.makeParams('fieldWhitelist', (List<String>) params.get('fieldWhitelist')));
        query.addAll(client.makeParams('attachmentTypeBlacklist', (List<String>) params.get('attachmentTypeBlacklist')));

        List<OAS.Param> form = new List<OAS.Param>();

        return (OASComAdobeCqSocialCommonsCommentsEn) client.invoke(
            'POST', '/system/console/configMgr/com.adobe.cq.social.commons.comments.endpoints.impl.TranslationOperationService', '',
            query, form,
            new Map<String, Object>(),
            new Map<String, Object>(),
            new List<String>{ 'application/json', 'text/plain' },
            new List<String>(),
            new List<String> { 'aemAuth' },
            OASComAdobeCqSocialCommonsCommentsEn.class
        );
    }
    /**
     * 
     * 
     * @param post  (optional)
     * @param apply  (optional)
     * @param r_delete  (optional)
     * @param action  (optional)
     * @param location  (optional)
     * @param propertylist  (optional)
     * @param numUserLimit  (optional)
     * @return OASComAdobeCqSocialCommonsCommentsLi
     * @throws OAS.ApiException if fails to make API call
     */
    public OASComAdobeCqSocialCommonsCommentsLi comAdobeCqSocialCommonsCommentsListingImplSearchCommentSocialC(Map<String, Object> params) {
        List<OAS.Param> query = new List<OAS.Param>();

        // cast query params to verify their expected type
        query.addAll(client.makeParam('post', (Boolean) params.get('post')));
        query.addAll(client.makeParam('apply', (Boolean) params.get('apply')));
        query.addAll(client.makeParam('delete', (Boolean) params.get('r_delete')));
        query.addAll(client.makeParam('action', (String) params.get('action')));
        query.addAll(client.makeParam('$location', (String) params.get('location')));
        query.addAll(client.makeParam('propertylist', (List<String>) params.get('propertylist'), 'csv'));
        query.addAll(client.makeParam('numUserLimit', (Integer) params.get('numUserLimit')));

        List<OAS.Param> form = new List<OAS.Param>();

        return (OASComAdobeCqSocialCommonsCommentsLi) client.invoke(
            'POST', '/system/console/configMgr/com.adobe.cq.social.commons.comments.listing.impl.SearchCommentSocialComponentListProvider', '',
            query, form,
            new Map<String, Object>(),
            new Map<String, Object>(),
            new List<String>{ 'application/json', 'text/plain' },
            new List<String>(),
            new List<String> { 'aemAuth' },
            OASComAdobeCqSocialCommonsCommentsLi.class
        );
    }
    /**
     * 
     * 
     * @param post  (optional)
     * @param apply  (optional)
     * @param r_delete  (optional)
     * @param action  (optional)
     * @param location  (optional)
     * @param propertylist  (optional)
     * @param enableScheduledPostsSearch  (optional)
     * @param numberOfMinutes  (optional)
     * @param maxSearchLimit  (optional)
     * @return OASComAdobeCqSocialCommonsCommentsSc
     * @throws OAS.ApiException if fails to make API call
     */
    public OASComAdobeCqSocialCommonsCommentsSc comAdobeCqSocialCommonsCommentsSchedulerImplSearchScheduledPos(Map<String, Object> params) {
        List<OAS.Param> query = new List<OAS.Param>();

        // cast query params to verify their expected type
        query.addAll(client.makeParam('post', (Boolean) params.get('post')));
        query.addAll(client.makeParam('apply', (Boolean) params.get('apply')));
        query.addAll(client.makeParam('delete', (Boolean) params.get('r_delete')));
        query.addAll(client.makeParam('action', (String) params.get('action')));
        query.addAll(client.makeParam('$location', (String) params.get('location')));
        query.addAll(client.makeParam('propertylist', (List<String>) params.get('propertylist'), 'csv'));
        query.addAll(client.makeParam('enableScheduledPostsSearch', (Boolean) params.get('enableScheduledPostsSearch')));
        query.addAll(client.makeParam('numberOfMinutes', (Integer) params.get('numberOfMinutes')));
        query.addAll(client.makeParam('maxSearchLimit', (Integer) params.get('maxSearchLimit')));

        List<OAS.Param> form = new List<OAS.Param>();

        return (OASComAdobeCqSocialCommonsCommentsSc) client.invoke(
            'POST', '/system/console/configMgr/com.adobe.cq.social.commons.comments.scheduler.impl.SearchScheduledPosts', '',
            query, form,
            new Map<String, Object>(),
            new Map<String, Object>(),
            new List<String>{ 'application/json', 'text/plain' },
            new List<String>(),
            new List<String> { 'aemAuth' },
            OASComAdobeCqSocialCommonsCommentsSc.class
        );
    }
    /**
     * 
     * 
     * @param post  (optional)
     * @param apply  (optional)
     * @param r_delete  (optional)
     * @param action  (optional)
     * @param location  (optional)
     * @param propertylist  (optional)
     * @param corsEnabling  (optional)
     * @return OASComAdobeCqSocialCommonsCorsCORSAu
     * @throws OAS.ApiException if fails to make API call
     */
    public OASComAdobeCqSocialCommonsCorsCORSAu comAdobeCqSocialCommonsCorsCORSAuthenticationFilter(Map<String, Object> params) {
        List<OAS.Param> query = new List<OAS.Param>();

        // cast query params to verify their expected type
        query.addAll(client.makeParam('post', (Boolean) params.get('post')));
        query.addAll(client.makeParam('apply', (Boolean) params.get('apply')));
        query.addAll(client.makeParam('delete', (Boolean) params.get('r_delete')));
        query.addAll(client.makeParam('action', (String) params.get('action')));
        query.addAll(client.makeParam('$location', (String) params.get('location')));
        query.addAll(client.makeParam('propertylist', (List<String>) params.get('propertylist'), 'csv'));
        query.addAll(client.makeParam('cors.enabling', (Boolean) params.get('corsEnabling')));

        List<OAS.Param> form = new List<OAS.Param>();

        return (OASComAdobeCqSocialCommonsCorsCORSAu) client.invoke(
            'POST', '/system/console/configMgr/com.adobe.cq.social.commons.cors.CORSAuthenticationFilter', '',
            query, form,
            new Map<String, Object>(),
            new Map<String, Object>(),
            new List<String>{ 'application/json', 'text/plain' },
            new List<String>(),
            new List<String> { 'aemAuth' },
            OASComAdobeCqSocialCommonsCorsCORSAu.class
        );
    }
    /**
     * 
     * 
     * @param post  (optional)
     * @param apply  (optional)
     * @param r_delete  (optional)
     * @param action  (optional)
     * @param location  (optional)
     * @param propertylist  (optional)
     * @param priorityOrder  (optional)
     * @param replyEmailPatterns  (optional)
     * @return OASComAdobeCqSocialCommonsEmailreply
     * @throws OAS.ApiException if fails to make API call
     */
    public OASComAdobeCqSocialCommonsEmailreply comAdobeCqSocialCommonsEmailreplyImplAndroidEmailClientProvider(Map<String, Object> params) {
        List<OAS.Param> query = new List<OAS.Param>();

        // cast query params to verify their expected type
        query.addAll(client.makeParam('post', (Boolean) params.get('post')));
        query.addAll(client.makeParam('apply', (Boolean) params.get('apply')));
        query.addAll(client.makeParam('delete', (Boolean) params.get('r_delete')));
        query.addAll(client.makeParam('action', (String) params.get('action')));
        query.addAll(client.makeParam('$location', (String) params.get('location')));
        query.addAll(client.makeParam('propertylist', (List<String>) params.get('propertylist'), 'csv'));
        query.addAll(client.makeParam('priorityOrder', (Integer) params.get('priorityOrder')));
        query.addAll(client.makeParams('replyEmailPatterns', (List<String>) params.get('replyEmailPatterns')));

        List<OAS.Param> form = new List<OAS.Param>();

        return (OASComAdobeCqSocialCommonsEmailreply) client.invoke(
            'POST', '/system/console/configMgr/com.adobe.cq.social.commons.emailreply.impl.AndroidEmailClientProvider', '',
            query, form,
            new Map<String, Object>(),
            new Map<String, Object>(),
            new List<String>{ 'application/json', 'text/plain' },
            new List<String>(),
            new List<String> { 'aemAuth' },
            OASComAdobeCqSocialCommonsEmailreply.class
        );
    }
    /**
     * 
     * 
     * @param post  (optional)
     * @param apply  (optional)
     * @param r_delete  (optional)
     * @param action  (optional)
     * @param location  (optional)
     * @param propertylist  (optional)
     * @param contextPath  (optional)
     * @return OASComAdobeCqSocialCommonsEmailreply
     * @throws OAS.ApiException if fails to make API call
     */
    public OASComAdobeCqSocialCommonsEmailreply comAdobeCqSocialCommonsEmailreplyImplCommentEmailBuilderImpl(Map<String, Object> params) {
        List<OAS.Param> query = new List<OAS.Param>();

        // cast query params to verify their expected type
        query.addAll(client.makeParam('post', (Boolean) params.get('post')));
        query.addAll(client.makeParam('apply', (Boolean) params.get('apply')));
        query.addAll(client.makeParam('delete', (Boolean) params.get('r_delete')));
        query.addAll(client.makeParam('action', (String) params.get('action')));
        query.addAll(client.makeParam('$location', (String) params.get('location')));
        query.addAll(client.makeParam('propertylist', (List<String>) params.get('propertylist'), 'csv'));
        query.addAll(client.makeParam('context.path', (String) params.get('contextPath')));

        List<OAS.Param> form = new List<OAS.Param>();

        return (OASComAdobeCqSocialCommonsEmailreply) client.invoke(
            'POST', '/system/console/configMgr/com.adobe.cq.social.commons.emailreply.impl.CommentEmailBuilderImpl', '',
            query, form,
            new Map<String, Object>(),
            new Map<String, Object>(),
            new List<String>{ 'application/json', 'text/plain' },
            new List<String>(),
            new List<String> { 'aemAuth' },
            OASComAdobeCqSocialCommonsEmailreply.class
        );
    }
    /**
     * 
     * 
     * @param post  (optional)
     * @param apply  (optional)
     * @param r_delete  (optional)
     * @param action  (optional)
     * @param location  (optional)
     * @param propertylist  (optional)
     * @param eventTopics  (optional)
     * @return OASComAdobeCqSocialCommonsEmailreply
     * @throws OAS.ApiException if fails to make API call
     */
    public OASComAdobeCqSocialCommonsEmailreply comAdobeCqSocialCommonsEmailreplyImplCommentEmailEventListener(Map<String, Object> params) {
        List<OAS.Param> query = new List<OAS.Param>();

        // cast query params to verify their expected type
        query.addAll(client.makeParam('post', (Boolean) params.get('post')));
        query.addAll(client.makeParam('apply', (Boolean) params.get('apply')));
        query.addAll(client.makeParam('delete', (Boolean) params.get('r_delete')));
        query.addAll(client.makeParam('action', (String) params.get('action')));
        query.addAll(client.makeParam('$location', (String) params.get('location')));
        query.addAll(client.makeParam('propertylist', (List<String>) params.get('propertylist'), 'csv'));
        query.addAll(client.makeParam('event.topics', (String) params.get('eventTopics')));

        List<OAS.Param> form = new List<OAS.Param>();

        return (OASComAdobeCqSocialCommonsEmailreply) client.invoke(
            'POST', '/system/console/configMgr/com.adobe.cq.social.commons.emailreply.impl.CommentEmailEventListener', '',
            query, form,
            new Map<String, Object>(),
            new Map<String, Object>(),
            new List<String>{ 'application/json', 'text/plain' },
            new List<String>(),
            new List<String> { 'aemAuth' },
            OASComAdobeCqSocialCommonsEmailreply.class
        );
    }
    /**
     * 
     * 
     * @param post  (optional)
     * @param apply  (optional)
     * @param r_delete  (optional)
     * @param action  (optional)
     * @param location  (optional)
     * @param propertylist  (optional)
     * @param priorityOrder  (optional)
     * @param replyEmailPatterns  (optional)
     * @return OASComAdobeCqSocialCommonsEmailreply
     * @throws OAS.ApiException if fails to make API call
     */
    public OASComAdobeCqSocialCommonsEmailreply comAdobeCqSocialCommonsEmailreplyImplCustomEmailClientProvider(Map<String, Object> params) {
        List<OAS.Param> query = new List<OAS.Param>();

        // cast query params to verify their expected type
        query.addAll(client.makeParam('post', (Boolean) params.get('post')));
        query.addAll(client.makeParam('apply', (Boolean) params.get('apply')));
        query.addAll(client.makeParam('delete', (Boolean) params.get('r_delete')));
        query.addAll(client.makeParam('action', (String) params.get('action')));
        query.addAll(client.makeParam('$location', (String) params.get('location')));
        query.addAll(client.makeParam('propertylist', (List<String>) params.get('propertylist'), 'csv'));
        query.addAll(client.makeParam('priorityOrder', (Integer) params.get('priorityOrder')));
        query.addAll(client.makeParams('replyEmailPatterns', (List<String>) params.get('replyEmailPatterns')));

        List<OAS.Param> form = new List<OAS.Param>();

        return (OASComAdobeCqSocialCommonsEmailreply) client.invoke(
            'POST', '/system/console/configMgr/com.adobe.cq.social.commons.emailreply.impl.CustomEmailClientProvider', '',
            query, form,
            new Map<String, Object>(),
            new Map<String, Object>(),
            new List<String>{ 'application/json', 'text/plain' },
            new List<String>(),
            new List<String> { 'aemAuth' },
            OASComAdobeCqSocialCommonsEmailreply.class
        );
    }
    /**
     * 
     * 
     * @param post  (optional)
     * @param apply  (optional)
     * @param r_delete  (optional)
     * @param action  (optional)
     * @param location  (optional)
     * @param propertylist  (optional)
     * @param patternTime  (optional)
     * @param patternNewline  (optional)
     * @param patternDayOfMonth  (optional)
     * @param patternMonth  (optional)
     * @param patternYear  (optional)
     * @param patternDate  (optional)
     * @param patternDateTime  (optional)
     * @param patternEmail  (optional)
     * @return OASComAdobeCqSocialCommonsEmailreply
     * @throws OAS.ApiException if fails to make API call
     */
    public OASComAdobeCqSocialCommonsEmailreply comAdobeCqSocialCommonsEmailreplyImplEmailQuotedTextPatternsImp(Map<String, Object> params) {
        List<OAS.Param> query = new List<OAS.Param>();

        // cast query params to verify their expected type
        query.addAll(client.makeParam('post', (Boolean) params.get('post')));
        query.addAll(client.makeParam('apply', (Boolean) params.get('apply')));
        query.addAll(client.makeParam('delete', (Boolean) params.get('r_delete')));
        query.addAll(client.makeParam('action', (String) params.get('action')));
        query.addAll(client.makeParam('$location', (String) params.get('location')));
        query.addAll(client.makeParam('propertylist', (List<String>) params.get('propertylist'), 'csv'));
        query.addAll(client.makeParam('pattern.time', (String) params.get('patternTime')));
        query.addAll(client.makeParam('pattern.newline', (String) params.get('patternNewline')));
        query.addAll(client.makeParam('pattern.dayOfMonth', (String) params.get('patternDayOfMonth')));
        query.addAll(client.makeParam('pattern.month', (String) params.get('patternMonth')));
        query.addAll(client.makeParam('pattern.year', (String) params.get('patternYear')));
        query.addAll(client.makeParam('pattern.date', (String) params.get('patternDate')));
        query.addAll(client.makeParam('pattern.dateTime', (String) params.get('patternDateTime')));
        query.addAll(client.makeParam('pattern.email', (String) params.get('patternEmail')));

        List<OAS.Param> form = new List<OAS.Param>();

        return (OASComAdobeCqSocialCommonsEmailreply) client.invoke(
            'POST', '/system/console/configMgr/com.adobe.cq.social.commons.emailreply.impl.EmailQuotedTextPatternsImpl', '',
            query, form,
            new Map<String, Object>(),
            new Map<String, Object>(),
            new List<String>{ 'application/json', 'text/plain' },
            new List<String>(),
            new List<String> { 'aemAuth' },
            OASComAdobeCqSocialCommonsEmailreply.class
        );
    }
    /**
     * 
     * 
     * @param post  (optional)
     * @param apply  (optional)
     * @param r_delete  (optional)
     * @param action  (optional)
     * @param location  (optional)
     * @param propertylist  (optional)
     * @param emailName  (optional)
     * @param emailCreatePostFromReply  (optional)
     * @param emailAddCommentIdTo  (optional)
     * @param emailSubjectMaximumLength  (optional)
     * @param emailReplyToAddress  (optional)
     * @param emailReplyToDelimiter  (optional)
     * @param emailTrackerIdPrefixInSubject  (optional)
     * @param emailTrackerIdPrefixInBody  (optional)
     * @param emailAsHTML  (optional)
     * @param emailDefaultUserName  (optional)
     * @param emailTemplatesRootPath  (optional)
     * @return OASComAdobeCqSocialCommonsEmailreply
     * @throws OAS.ApiException if fails to make API call
     */
    public OASComAdobeCqSocialCommonsEmailreply comAdobeCqSocialCommonsEmailreplyImplEmailReplyConfigurationImp(Map<String, Object> params) {
        List<OAS.Param> query = new List<OAS.Param>();

        // cast query params to verify their expected type
        query.addAll(client.makeParam('post', (Boolean) params.get('post')));
        query.addAll(client.makeParam('apply', (Boolean) params.get('apply')));
        query.addAll(client.makeParam('delete', (Boolean) params.get('r_delete')));
        query.addAll(client.makeParam('action', (String) params.get('action')));
        query.addAll(client.makeParam('$location', (String) params.get('location')));
        query.addAll(client.makeParam('propertylist', (List<String>) params.get('propertylist'), 'csv'));
        query.addAll(client.makeParam('email.name', (String) params.get('emailName')));
        query.addAll(client.makeParam('email.createPostFromReply', (Boolean) params.get('emailCreatePostFromReply')));
        query.addAll(client.makeParam('email.addCommentIdTo', (String) params.get('emailAddCommentIdTo')));
        query.addAll(client.makeParam('email.subjectMaximumLength', (Integer) params.get('emailSubjectMaximumLength')));
        query.addAll(client.makeParam('email.replyToAddress', (String) params.get('emailReplyToAddress')));
        query.addAll(client.makeParam('email.replyToDelimiter', (String) params.get('emailReplyToDelimiter')));
        query.addAll(client.makeParam('email.trackerIdPrefixInSubject', (String) params.get('emailTrackerIdPrefixInSubject')));
        query.addAll(client.makeParam('email.trackerIdPrefixInBody', (String) params.get('emailTrackerIdPrefixInBody')));
        query.addAll(client.makeParam('email.asHTML', (Boolean) params.get('emailAsHTML')));
        query.addAll(client.makeParam('email.defaultUserName', (String) params.get('emailDefaultUserName')));
        query.addAll(client.makeParam('email.templates.rootPath', (String) params.get('emailTemplatesRootPath')));

        List<OAS.Param> form = new List<OAS.Param>();

        return (OASComAdobeCqSocialCommonsEmailreply) client.invoke(
            'POST', '/system/console/configMgr/com.adobe.cq.social.commons.emailreply.impl.EmailReplyConfigurationImpl', '',
            query, form,
            new Map<String, Object>(),
            new Map<String, Object>(),
            new List<String>{ 'application/json', 'text/plain' },
            new List<String>(),
            new List<String> { 'aemAuth' },
            OASComAdobeCqSocialCommonsEmailreply.class
        );
    }
    /**
     * 
     * 
     * @param post  (optional)
     * @param apply  (optional)
     * @param r_delete  (optional)
     * @param action  (optional)
     * @param location  (optional)
     * @param propertylist  (optional)
     * @param connectProtocol  (optional)
     * @return OASComAdobeCqSocialCommonsEmailreply
     * @throws OAS.ApiException if fails to make API call
     */
    public OASComAdobeCqSocialCommonsEmailreply comAdobeCqSocialCommonsEmailreplyImplEmailReplyImporter(Map<String, Object> params) {
        List<OAS.Param> query = new List<OAS.Param>();

        // cast query params to verify their expected type
        query.addAll(client.makeParam('post', (Boolean) params.get('post')));
        query.addAll(client.makeParam('apply', (Boolean) params.get('apply')));
        query.addAll(client.makeParam('delete', (Boolean) params.get('r_delete')));
        query.addAll(client.makeParam('action', (String) params.get('action')));
        query.addAll(client.makeParam('$location', (String) params.get('location')));
        query.addAll(client.makeParam('propertylist', (List<String>) params.get('propertylist'), 'csv'));
        query.addAll(client.makeParam('connectProtocol', (String) params.get('connectProtocol')));

        List<OAS.Param> form = new List<OAS.Param>();

        return (OASComAdobeCqSocialCommonsEmailreply) client.invoke(
            'POST', '/system/console/configMgr/com.adobe.cq.social.commons.emailreply.impl.EmailReplyImporter', '',
            query, form,
            new Map<String, Object>(),
            new Map<String, Object>(),
            new List<String>{ 'application/json', 'text/plain' },
            new List<String>(),
            new List<String> { 'aemAuth' },
            OASComAdobeCqSocialCommonsEmailreply.class
        );
    }
    /**
     * 
     * 
     * @param post  (optional)
     * @param apply  (optional)
     * @param r_delete  (optional)
     * @param action  (optional)
     * @param location  (optional)
     * @param propertylist  (optional)
     * @param priorityOrder  (optional)
     * @param replyEmailPatterns  (optional)
     * @return OASComAdobeCqSocialCommonsEmailreply
     * @throws OAS.ApiException if fails to make API call
     */
    public OASComAdobeCqSocialCommonsEmailreply comAdobeCqSocialCommonsEmailreplyImplGmailEmailClientProvider(Map<String, Object> params) {
        List<OAS.Param> query = new List<OAS.Param>();

        // cast query params to verify their expected type
        query.addAll(client.makeParam('post', (Boolean) params.get('post')));
        query.addAll(client.makeParam('apply', (Boolean) params.get('apply')));
        query.addAll(client.makeParam('delete', (Boolean) params.get('r_delete')));
        query.addAll(client.makeParam('action', (String) params.get('action')));
        query.addAll(client.makeParam('$location', (String) params.get('location')));
        query.addAll(client.makeParam('propertylist', (List<String>) params.get('propertylist'), 'csv'));
        query.addAll(client.makeParam('priorityOrder', (Integer) params.get('priorityOrder')));
        query.addAll(client.makeParams('replyEmailPatterns', (List<String>) params.get('replyEmailPatterns')));

        List<OAS.Param> form = new List<OAS.Param>();

        return (OASComAdobeCqSocialCommonsEmailreply) client.invoke(
            'POST', '/system/console/configMgr/com.adobe.cq.social.commons.emailreply.impl.GmailEmailClientProvider', '',
            query, form,
            new Map<String, Object>(),
            new Map<String, Object>(),
            new List<String>{ 'application/json', 'text/plain' },
            new List<String>(),
            new List<String> { 'aemAuth' },
            OASComAdobeCqSocialCommonsEmailreply.class
        );
    }
    /**
     * 
     * 
     * @param post  (optional)
     * @param apply  (optional)
     * @param r_delete  (optional)
     * @param action  (optional)
     * @param location  (optional)
     * @param propertylist  (optional)
     * @param priorityOrder  (optional)
     * @param replyEmailPatterns  (optional)
     * @return OASComAdobeCqSocialCommonsEmailreply
     * @throws OAS.ApiException if fails to make API call
     */
    public OASComAdobeCqSocialCommonsEmailreply comAdobeCqSocialCommonsEmailreplyImplIOSEmailClientProvider(Map<String, Object> params) {
        List<OAS.Param> query = new List<OAS.Param>();

        // cast query params to verify their expected type
        query.addAll(client.makeParam('post', (Boolean) params.get('post')));
        query.addAll(client.makeParam('apply', (Boolean) params.get('apply')));
        query.addAll(client.makeParam('delete', (Boolean) params.get('r_delete')));
        query.addAll(client.makeParam('action', (String) params.get('action')));
        query.addAll(client.makeParam('$location', (String) params.get('location')));
        query.addAll(client.makeParam('propertylist', (List<String>) params.get('propertylist'), 'csv'));
        query.addAll(client.makeParam('priorityOrder', (Integer) params.get('priorityOrder')));
        query.addAll(client.makeParams('replyEmailPatterns', (List<String>) params.get('replyEmailPatterns')));

        List<OAS.Param> form = new List<OAS.Param>();

        return (OASComAdobeCqSocialCommonsEmailreply) client.invoke(
            'POST', '/system/console/configMgr/com.adobe.cq.social.commons.emailreply.impl.IOSEmailClientProvider', '',
            query, form,
            new Map<String, Object>(),
            new Map<String, Object>(),
            new List<String>{ 'application/json', 'text/plain' },
            new List<String>(),
            new List<String> { 'aemAuth' },
            OASComAdobeCqSocialCommonsEmailreply.class
        );
    }
    /**
     * 
     * 
     * @param post  (optional)
     * @param apply  (optional)
     * @param r_delete  (optional)
     * @param action  (optional)
     * @param location  (optional)
     * @param propertylist  (optional)
     * @param priorityOrder  (optional)
     * @param replyEmailPatterns  (optional)
     * @return OASComAdobeCqSocialCommonsEmailreply
     * @throws OAS.ApiException if fails to make API call
     */
    public OASComAdobeCqSocialCommonsEmailreply comAdobeCqSocialCommonsEmailreplyImplMacmailEmailClientProvider(Map<String, Object> params) {
        List<OAS.Param> query = new List<OAS.Param>();

        // cast query params to verify their expected type
        query.addAll(client.makeParam('post', (Boolean) params.get('post')));
        query.addAll(client.makeParam('apply', (Boolean) params.get('apply')));
        query.addAll(client.makeParam('delete', (Boolean) params.get('r_delete')));
        query.addAll(client.makeParam('action', (String) params.get('action')));
        query.addAll(client.makeParam('$location', (String) params.get('location')));
        query.addAll(client.makeParam('propertylist', (List<String>) params.get('propertylist'), 'csv'));
        query.addAll(client.makeParam('priorityOrder', (Integer) params.get('priorityOrder')));
        query.addAll(client.makeParams('replyEmailPatterns', (List<String>) params.get('replyEmailPatterns')));

        List<OAS.Param> form = new List<OAS.Param>();

        return (OASComAdobeCqSocialCommonsEmailreply) client.invoke(
            'POST', '/system/console/configMgr/com.adobe.cq.social.commons.emailreply.impl.MacmailEmailClientProvider', '',
            query, form,
            new Map<String, Object>(),
            new Map<String, Object>(),
            new List<String>{ 'application/json', 'text/plain' },
            new List<String>(),
            new List<String> { 'aemAuth' },
            OASComAdobeCqSocialCommonsEmailreply.class
        );
    }
    /**
     * 
     * 
     * @param post  (optional)
     * @param apply  (optional)
     * @param r_delete  (optional)
     * @param action  (optional)
     * @param location  (optional)
     * @param propertylist  (optional)
     * @param priorityOrder  (optional)
     * @param replyEmailPatterns  (optional)
     * @return OASComAdobeCqSocialCommonsEmailreply
     * @throws OAS.ApiException if fails to make API call
     */
    public OASComAdobeCqSocialCommonsEmailreply comAdobeCqSocialCommonsEmailreplyImplOutLookEmailClientProvider(Map<String, Object> params) {
        List<OAS.Param> query = new List<OAS.Param>();

        // cast query params to verify their expected type
        query.addAll(client.makeParam('post', (Boolean) params.get('post')));
        query.addAll(client.makeParam('apply', (Boolean) params.get('apply')));
        query.addAll(client.makeParam('delete', (Boolean) params.get('r_delete')));
        query.addAll(client.makeParam('action', (String) params.get('action')));
        query.addAll(client.makeParam('$location', (String) params.get('location')));
        query.addAll(client.makeParam('propertylist', (List<String>) params.get('propertylist'), 'csv'));
        query.addAll(client.makeParam('priorityOrder', (Integer) params.get('priorityOrder')));
        query.addAll(client.makeParams('replyEmailPatterns', (List<String>) params.get('replyEmailPatterns')));

        List<OAS.Param> form = new List<OAS.Param>();

        return (OASComAdobeCqSocialCommonsEmailreply) client.invoke(
            'POST', '/system/console/configMgr/com.adobe.cq.social.commons.emailreply.impl.OutLookEmailClientProvider', '',
            query, form,
            new Map<String, Object>(),
            new Map<String, Object>(),
            new List<String>{ 'application/json', 'text/plain' },
            new List<String>(),
            new List<String> { 'aemAuth' },
            OASComAdobeCqSocialCommonsEmailreply.class
        );
    }
    /**
     * 
     * 
     * @param post  (optional)
     * @param apply  (optional)
     * @param r_delete  (optional)
     * @param action  (optional)
     * @param location  (optional)
     * @param propertylist  (optional)
     * @param replyEmailPatterns  (optional)
     * @param priorityOrder  (optional)
     * @return OASComAdobeCqSocialCommonsEmailreply
     * @throws OAS.ApiException if fails to make API call
     */
    public OASComAdobeCqSocialCommonsEmailreply comAdobeCqSocialCommonsEmailreplyImplUnknownEmailClientProvider(Map<String, Object> params) {
        List<OAS.Param> query = new List<OAS.Param>();

        // cast query params to verify their expected type
        query.addAll(client.makeParam('post', (Boolean) params.get('post')));
        query.addAll(client.makeParam('apply', (Boolean) params.get('apply')));
        query.addAll(client.makeParam('delete', (Boolean) params.get('r_delete')));
        query.addAll(client.makeParam('action', (String) params.get('action')));
        query.addAll(client.makeParam('$location', (String) params.get('location')));
        query.addAll(client.makeParam('propertylist', (List<String>) params.get('propertylist'), 'csv'));
        query.addAll(client.makeParams('replyEmailPatterns', (List<String>) params.get('replyEmailPatterns')));
        query.addAll(client.makeParam('priorityOrder', (Integer) params.get('priorityOrder')));

        List<OAS.Param> form = new List<OAS.Param>();

        return (OASComAdobeCqSocialCommonsEmailreply) client.invoke(
            'POST', '/system/console/configMgr/com.adobe.cq.social.commons.emailreply.impl.UnknownEmailClientProvider', '',
            query, form,
            new Map<String, Object>(),
            new Map<String, Object>(),
            new List<String>{ 'application/json', 'text/plain' },
            new List<String>(),
            new List<String> { 'aemAuth' },
            OASComAdobeCqSocialCommonsEmailreply.class
        );
    }
    /**
     * 
     * 
     * @param post  (optional)
     * @param apply  (optional)
     * @param r_delete  (optional)
     * @param action  (optional)
     * @param location  (optional)
     * @param propertylist  (optional)
     * @param priorityOrder  (optional)
     * @param replyEmailPatterns  (optional)
     * @return OASComAdobeCqSocialCommonsEmailreply
     * @throws OAS.ApiException if fails to make API call
     */
    public OASComAdobeCqSocialCommonsEmailreply comAdobeCqSocialCommonsEmailreplyImplYahooEmailClientProvider(Map<String, Object> params) {
        List<OAS.Param> query = new List<OAS.Param>();

        // cast query params to verify their expected type
        query.addAll(client.makeParam('post', (Boolean) params.get('post')));
        query.addAll(client.makeParam('apply', (Boolean) params.get('apply')));
        query.addAll(client.makeParam('delete', (Boolean) params.get('r_delete')));
        query.addAll(client.makeParam('action', (String) params.get('action')));
        query.addAll(client.makeParam('$location', (String) params.get('location')));
        query.addAll(client.makeParam('propertylist', (List<String>) params.get('propertylist'), 'csv'));
        query.addAll(client.makeParam('priorityOrder', (Integer) params.get('priorityOrder')));
        query.addAll(client.makeParams('replyEmailPatterns', (List<String>) params.get('replyEmailPatterns')));

        List<OAS.Param> form = new List<OAS.Param>();

        return (OASComAdobeCqSocialCommonsEmailreply) client.invoke(
            'POST', '/system/console/configMgr/com.adobe.cq.social.commons.emailreply.impl.YahooEmailClientProvider', '',
            query, form,
            new Map<String, Object>(),
            new Map<String, Object>(),
            new List<String>{ 'application/json', 'text/plain' },
            new List<String>(),
            new List<String> { 'aemAuth' },
            OASComAdobeCqSocialCommonsEmailreply.class
        );
    }
    /**
     * 
     * 
     * @param post  (optional)
     * @param apply  (optional)
     * @param r_delete  (optional)
     * @param action  (optional)
     * @param location  (optional)
     * @param propertylist  (optional)
     * @param numberOfDays  (optional)
     * @param ageOfFile  (optional)
     * @return OASComAdobeCqSocialCommonsMaintainan
     * @throws OAS.ApiException if fails to make API call
     */
    public OASComAdobeCqSocialCommonsMaintainan comAdobeCqSocialCommonsMaintainanceImplDeleteTempUGCImageUpload(Map<String, Object> params) {
        List<OAS.Param> query = new List<OAS.Param>();

        // cast query params to verify their expected type
        query.addAll(client.makeParam('post', (Boolean) params.get('post')));
        query.addAll(client.makeParam('apply', (Boolean) params.get('apply')));
        query.addAll(client.makeParam('delete', (Boolean) params.get('r_delete')));
        query.addAll(client.makeParam('action', (String) params.get('action')));
        query.addAll(client.makeParam('$location', (String) params.get('location')));
        query.addAll(client.makeParam('propertylist', (List<String>) params.get('propertylist'), 'csv'));
        query.addAll(client.makeParam('numberOfDays', (Integer) params.get('numberOfDays')));
        query.addAll(client.makeParam('ageOfFile', (Integer) params.get('ageOfFile')));

        List<OAS.Param> form = new List<OAS.Param>();

        return (OASComAdobeCqSocialCommonsMaintainan) client.invoke(
            'POST', '/system/console/configMgr/com.adobe.cq.social.commons.maintainance.impl.DeleteTempUGCImageUploads', '',
            query, form,
            new Map<String, Object>(),
            new Map<String, Object>(),
            new List<String>{ 'application/json', 'text/plain' },
            new List<String>(),
            new List<String> { 'aemAuth' },
            OASComAdobeCqSocialCommonsMaintainan.class
        );
    }
    /**
     * 
     * 
     * @param post  (optional)
     * @param apply  (optional)
     * @param r_delete  (optional)
     * @param action  (optional)
     * @param location  (optional)
     * @param propertylist  (optional)
     * @param eventTopics  (optional)
     * @param eventFilter  (optional)
     * @param verbs  (optional)
     * @return OASComAdobeCqSocialCommonsUgclimiter
     * @throws OAS.ApiException if fails to make API call
     */
    public OASComAdobeCqSocialCommonsUgclimiter comAdobeCqSocialCommonsUgclimiterImplUGCLimiterServiceImpl(Map<String, Object> params) {
        List<OAS.Param> query = new List<OAS.Param>();

        // cast query params to verify their expected type
        query.addAll(client.makeParam('post', (Boolean) params.get('post')));
        query.addAll(client.makeParam('apply', (Boolean) params.get('apply')));
        query.addAll(client.makeParam('delete', (Boolean) params.get('r_delete')));
        query.addAll(client.makeParam('action', (String) params.get('action')));
        query.addAll(client.makeParam('$location', (String) params.get('location')));
        query.addAll(client.makeParam('propertylist', (List<String>) params.get('propertylist'), 'csv'));
        query.addAll(client.makeParam('event.topics', (String) params.get('eventTopics')));
        query.addAll(client.makeParam('event.filter', (String) params.get('eventFilter')));
        query.addAll(client.makeParams('verbs', (List<String>) params.get('verbs')));

        List<OAS.Param> form = new List<OAS.Param>();

        return (OASComAdobeCqSocialCommonsUgclimiter) client.invoke(
            'POST', '/system/console/configMgr/com.adobe.cq.social.commons.ugclimiter.impl.UGCLimiterServiceImpl', '',
            query, form,
            new Map<String, Object>(),
            new Map<String, Object>(),
            new List<String>{ 'application/json', 'text/plain' },
            new List<String>(),
            new List<String> { 'aemAuth' },
            OASComAdobeCqSocialCommonsUgclimiter.class
        );
    }
    /**
     * 
     * 
     * @param post  (optional)
     * @param apply  (optional)
     * @param r_delete  (optional)
     * @param action  (optional)
     * @param location  (optional)
     * @param propertylist  (optional)
     * @param enable  (optional)
     * @param ugCLimit  (optional)
     * @param ugcLimitDuration  (optional)
     * @param domains  (optional)
     * @param toList  (optional)
     * @return OASComAdobeCqSocialCommonsUgclimitsc
     * @throws OAS.ApiException if fails to make API call
     */
    public OASComAdobeCqSocialCommonsUgclimitsc comAdobeCqSocialCommonsUgclimitsconfigImplCommunityUserUGCLimit(Map<String, Object> params) {
        List<OAS.Param> query = new List<OAS.Param>();

        // cast query params to verify their expected type
        query.addAll(client.makeParam('post', (Boolean) params.get('post')));
        query.addAll(client.makeParam('apply', (Boolean) params.get('apply')));
        query.addAll(client.makeParam('delete', (Boolean) params.get('r_delete')));
        query.addAll(client.makeParam('action', (String) params.get('action')));
        query.addAll(client.makeParam('$location', (String) params.get('location')));
        query.addAll(client.makeParam('propertylist', (List<String>) params.get('propertylist'), 'csv'));
        query.addAll(client.makeParam('enable', (Boolean) params.get('enable')));
        query.addAll(client.makeParam('UGCLimit', (Integer) params.get('ugCLimit')));
        query.addAll(client.makeParam('ugcLimitDuration', (Integer) params.get('ugcLimitDuration')));
        query.addAll(client.makeParams('domains', (List<String>) params.get('domains')));
        query.addAll(client.makeParams('toList', (List<String>) params.get('toList')));

        List<OAS.Param> form = new List<OAS.Param>();

        return (OASComAdobeCqSocialCommonsUgclimitsc) client.invoke(
            'POST', '/system/console/configMgr/com.adobe.cq.social.commons.ugclimitsconfig.impl.CommunityUserUGCLimitsConfigImpl', '',
            query, form,
            new Map<String, Object>(),
            new Map<String, Object>(),
            new List<String>{ 'application/json', 'text/plain' },
            new List<String>(),
            new List<String> { 'aemAuth' },
            OASComAdobeCqSocialCommonsUgclimitsc.class
        );
    }
    /**
     * 
     * 
     * @param post  (optional)
     * @param apply  (optional)
     * @param r_delete  (optional)
     * @param action  (optional)
     * @param location  (optional)
     * @param propertylist  (optional)
     * @param oauthProviderId  (optional)
     * @param oauthCloudConfigRoot  (optional)
     * @param providerConfigRoot  (optional)
     * @param providerConfigCreateTagsEnabled  (optional)
     * @param providerConfigUserFolder  (optional)
     * @param providerConfigFacebookFetchFields  (optional)
     * @param providerConfigFacebookFields  (optional)
     * @param providerConfigRefreshUserdataEnabled  (optional)
     * @return OASComAdobeCqSocialConnectOauthImplF
     * @throws OAS.ApiException if fails to make API call
     */
    public OASComAdobeCqSocialConnectOauthImplF comAdobeCqSocialConnectOauthImplFacebookProviderImpl(Map<String, Object> params) {
        List<OAS.Param> query = new List<OAS.Param>();

        // cast query params to verify their expected type
        query.addAll(client.makeParam('post', (Boolean) params.get('post')));
        query.addAll(client.makeParam('apply', (Boolean) params.get('apply')));
        query.addAll(client.makeParam('delete', (Boolean) params.get('r_delete')));
        query.addAll(client.makeParam('action', (String) params.get('action')));
        query.addAll(client.makeParam('$location', (String) params.get('location')));
        query.addAll(client.makeParam('propertylist', (List<String>) params.get('propertylist'), 'csv'));
        query.addAll(client.makeParam('oauth.provider.id', (String) params.get('oauthProviderId')));
        query.addAll(client.makeParam('oauth.cloud.config.root', (String) params.get('oauthCloudConfigRoot')));
        query.addAll(client.makeParam('provider.config.root', (String) params.get('providerConfigRoot')));
        query.addAll(client.makeParam('provider.config.create.tags.enabled', (Boolean) params.get('providerConfigCreateTagsEnabled')));
        query.addAll(client.makeParam('provider.config.user.folder', (String) params.get('providerConfigUserFolder')));
        query.addAll(client.makeParam('provider.config.facebook.fetch.fields', (Boolean) params.get('providerConfigFacebookFetchFields')));
        query.addAll(client.makeParams('provider.config.facebook.fields', (List<String>) params.get('providerConfigFacebookFields')));
        query.addAll(client.makeParam('provider.config.refresh.userdata.enabled', (Boolean) params.get('providerConfigRefreshUserdataEnabled')));

        List<OAS.Param> form = new List<OAS.Param>();

        return (OASComAdobeCqSocialConnectOauthImplF) client.invoke(
            'POST', '/system/console/configMgr/com.adobe.cq.social.connect.oauth.impl.FacebookProviderImpl', '',
            query, form,
            new Map<String, Object>(),
            new Map<String, Object>(),
            new List<String>{ 'application/json', 'text/plain' },
            new List<String>(),
            new List<String> { 'aemAuth' },
            OASComAdobeCqSocialConnectOauthImplF.class
        );
    }
    /**
     * 
     * 
     * @param post  (optional)
     * @param apply  (optional)
     * @param r_delete  (optional)
     * @param action  (optional)
     * @param location  (optional)
     * @param propertylist  (optional)
     * @param path  (optional)
     * @param serviceRanking  (optional)
     * @return OASComAdobeCqSocialConnectOauthImplS
     * @throws OAS.ApiException if fails to make API call
     */
    public OASComAdobeCqSocialConnectOauthImplS comAdobeCqSocialConnectOauthImplSocialOAuthAuthenticationHandle(Map<String, Object> params) {
        List<OAS.Param> query = new List<OAS.Param>();

        // cast query params to verify their expected type
        query.addAll(client.makeParam('post', (Boolean) params.get('post')));
        query.addAll(client.makeParam('apply', (Boolean) params.get('apply')));
        query.addAll(client.makeParam('delete', (Boolean) params.get('r_delete')));
        query.addAll(client.makeParam('action', (String) params.get('action')));
        query.addAll(client.makeParam('$location', (String) params.get('location')));
        query.addAll(client.makeParam('propertylist', (List<String>) params.get('propertylist'), 'csv'));
        query.addAll(client.makeParams('path', (List<String>) params.get('path')));
        query.addAll(client.makeParam('service.ranking', (Integer) params.get('serviceRanking')));

        List<OAS.Param> form = new List<OAS.Param>();

        return (OASComAdobeCqSocialConnectOauthImplS) client.invoke(
            'POST', '/system/console/configMgr/com.adobe.cq.social.connect.oauth.impl.SocialOAuthAuthenticationHandler', '',
            query, form,
            new Map<String, Object>(),
            new Map<String, Object>(),
            new List<String>{ 'application/json', 'text/plain' },
            new List<String>(),
            new List<String> { 'aemAuth' },
            OASComAdobeCqSocialConnectOauthImplS.class
        );
    }
    /**
     * 
     * 
     * @param post  (optional)
     * @param apply  (optional)
     * @param r_delete  (optional)
     * @param action  (optional)
     * @param location  (optional)
     * @param propertylist  (optional)
     * @param facebook  (optional)
     * @param twitter  (optional)
     * @param providerConfigUserFolder  (optional)
     * @return OASComAdobeCqSocialConnectOauthImplS
     * @throws OAS.ApiException if fails to make API call
     */
    public OASComAdobeCqSocialConnectOauthImplS comAdobeCqSocialConnectOauthImplSocialOAuthUserProfileMapper(Map<String, Object> params) {
        List<OAS.Param> query = new List<OAS.Param>();

        // cast query params to verify their expected type
        query.addAll(client.makeParam('post', (Boolean) params.get('post')));
        query.addAll(client.makeParam('apply', (Boolean) params.get('apply')));
        query.addAll(client.makeParam('delete', (Boolean) params.get('r_delete')));
        query.addAll(client.makeParam('action', (String) params.get('action')));
        query.addAll(client.makeParam('$location', (String) params.get('location')));
        query.addAll(client.makeParam('propertylist', (List<String>) params.get('propertylist'), 'csv'));
        query.addAll(client.makeParams('facebook', (List<String>) params.get('facebook')));
        query.addAll(client.makeParams('twitter', (List<String>) params.get('twitter')));
        query.addAll(client.makeParam('provider.config.user.folder', (String) params.get('providerConfigUserFolder')));

        List<OAS.Param> form = new List<OAS.Param>();

        return (OASComAdobeCqSocialConnectOauthImplS) client.invoke(
            'POST', '/system/console/configMgr/com.adobe.cq.social.connect.oauth.impl.SocialOAuthUserProfileMapper', '',
            query, form,
            new Map<String, Object>(),
            new Map<String, Object>(),
            new List<String>{ 'application/json', 'text/plain' },
            new List<String>(),
            new List<String> { 'aemAuth' },
            OASComAdobeCqSocialConnectOauthImplS.class
        );
    }
    /**
     * 
     * 
     * @param post  (optional)
     * @param apply  (optional)
     * @param r_delete  (optional)
     * @param action  (optional)
     * @param location  (optional)
     * @param propertylist  (optional)
     * @param oauthProviderId  (optional)
     * @param oauthCloudConfigRoot  (optional)
     * @param providerConfigRoot  (optional)
     * @param providerConfigUserFolder  (optional)
     * @param providerConfigTwitterEnableParams  (optional)
     * @param providerConfigTwitterParams  (optional)
     * @param providerConfigRefreshUserdataEnabled  (optional)
     * @return OASComAdobeCqSocialConnectOauthImplT
     * @throws OAS.ApiException if fails to make API call
     */
    public OASComAdobeCqSocialConnectOauthImplT comAdobeCqSocialConnectOauthImplTwitterProviderImpl(Map<String, Object> params) {
        List<OAS.Param> query = new List<OAS.Param>();

        // cast query params to verify their expected type
        query.addAll(client.makeParam('post', (Boolean) params.get('post')));
        query.addAll(client.makeParam('apply', (Boolean) params.get('apply')));
        query.addAll(client.makeParam('delete', (Boolean) params.get('r_delete')));
        query.addAll(client.makeParam('action', (String) params.get('action')));
        query.addAll(client.makeParam('$location', (String) params.get('location')));
        query.addAll(client.makeParam('propertylist', (List<String>) params.get('propertylist'), 'csv'));
        query.addAll(client.makeParam('oauth.provider.id', (String) params.get('oauthProviderId')));
        query.addAll(client.makeParam('oauth.cloud.config.root', (String) params.get('oauthCloudConfigRoot')));
        query.addAll(client.makeParam('provider.config.root', (String) params.get('providerConfigRoot')));
        query.addAll(client.makeParam('provider.config.user.folder', (String) params.get('providerConfigUserFolder')));
        query.addAll(client.makeParam('provider.config.twitter.enable.params', (Boolean) params.get('providerConfigTwitterEnableParams')));
        query.addAll(client.makeParams('provider.config.twitter.params', (List<String>) params.get('providerConfigTwitterParams')));
        query.addAll(client.makeParam('provider.config.refresh.userdata.enabled', (Boolean) params.get('providerConfigRefreshUserdataEnabled')));

        List<OAS.Param> form = new List<OAS.Param>();

        return (OASComAdobeCqSocialConnectOauthImplT) client.invoke(
            'POST', '/system/console/configMgr/com.adobe.cq.social.connect.oauth.impl.TwitterProviderImpl', '',
            query, form,
            new Map<String, Object>(),
            new Map<String, Object>(),
            new List<String>{ 'application/json', 'text/plain' },
            new List<String>(),
            new List<String> { 'aemAuth' },
            OASComAdobeCqSocialConnectOauthImplT.class
        );
    }
    /**
     * 
     * 
     * @param post  (optional)
     * @param apply  (optional)
     * @param r_delete  (optional)
     * @param action  (optional)
     * @param location  (optional)
     * @param propertylist  (optional)
     * @param cqSocialContentFragmentsServicesEnabled  (optional)
     * @param cqSocialContentFragmentsServicesWaitTimeSeconds  (optional)
     * @return OASComAdobeCqSocialContentFragmentsS
     * @throws OAS.ApiException if fails to make API call
     */
    public OASComAdobeCqSocialContentFragmentsS comAdobeCqSocialContentFragmentsServicesImplCommunitiesFragmen(Map<String, Object> params) {
        List<OAS.Param> query = new List<OAS.Param>();

        // cast query params to verify their expected type
        query.addAll(client.makeParam('post', (Boolean) params.get('post')));
        query.addAll(client.makeParam('apply', (Boolean) params.get('apply')));
        query.addAll(client.makeParam('delete', (Boolean) params.get('r_delete')));
        query.addAll(client.makeParam('action', (String) params.get('action')));
        query.addAll(client.makeParam('$location', (String) params.get('location')));
        query.addAll(client.makeParam('propertylist', (List<String>) params.get('propertylist'), 'csv'));
        query.addAll(client.makeParam('cq.social.content.fragments.services.enabled', (Boolean) params.get('cqSocialContentFragmentsServicesEnabled')));
        query.addAll(client.makeParam('cq.social.content.fragments.services.waitTimeSeconds', (Integer) params.get('cqSocialContentFragmentsServicesWaitTimeSeconds')));

        List<OAS.Param> form = new List<OAS.Param>();

        return (OASComAdobeCqSocialContentFragmentsS) client.invoke(
            'POST', '/system/console/configMgr/com.adobe.cq.social.content.fragments.services.impl.CommunitiesFragmentCreationServiceImpl', '',
            query, form,
            new Map<String, Object>(),
            new Map<String, Object>(),
            new List<String>{ 'application/json', 'text/plain' },
            new List<String>(),
            new List<String> { 'aemAuth' },
            OASComAdobeCqSocialContentFragmentsS.class
        );
    }
    /**
     * 
     * 
     * @param post  (optional)
     * @param apply  (optional)
     * @param r_delete  (optional)
     * @param action  (optional)
     * @param location  (optional)
     * @param propertylist  (optional)
     * @param versionId  (optional)
     * @param cacheOn  (optional)
     * @param concurrencyLevel  (optional)
     * @param cacheStartSize  (optional)
     * @param cacheTtl  (optional)
     * @param cacheSize  (optional)
     * @param timeLimit  (optional)
     * @return OASComAdobeCqSocialDatastoreAsImplAS
     * @throws OAS.ApiException if fails to make API call
     */
    public OASComAdobeCqSocialDatastoreAsImplAS comAdobeCqSocialDatastoreAsImplASResourceProviderFactory(Map<String, Object> params) {
        List<OAS.Param> query = new List<OAS.Param>();

        // cast query params to verify their expected type
        query.addAll(client.makeParam('post', (Boolean) params.get('post')));
        query.addAll(client.makeParam('apply', (Boolean) params.get('apply')));
        query.addAll(client.makeParam('delete', (Boolean) params.get('r_delete')));
        query.addAll(client.makeParam('action', (String) params.get('action')));
        query.addAll(client.makeParam('$location', (String) params.get('location')));
        query.addAll(client.makeParam('propertylist', (List<String>) params.get('propertylist'), 'csv'));
        query.addAll(client.makeParam('version.id', (String) params.get('versionId')));
        query.addAll(client.makeParam('cache.on', (Boolean) params.get('cacheOn')));
        query.addAll(client.makeParam('concurrency.level', (Integer) params.get('concurrencyLevel')));
        query.addAll(client.makeParam('cache.start.size', (Integer) params.get('cacheStartSize')));
        query.addAll(client.makeParam('cache.ttl', (Integer) params.get('cacheTtl')));
        query.addAll(client.makeParam('cache.size', (Integer) params.get('cacheSize')));
        query.addAll(client.makeParam('time.limit', (Integer) params.get('timeLimit')));

        List<OAS.Param> form = new List<OAS.Param>();

        return (OASComAdobeCqSocialDatastoreAsImplAS) client.invoke(
            'POST', '/system/console/configMgr/com.adobe.cq.social.datastore.as.impl.ASResourceProviderFactory', '',
            query, form,
            new Map<String, Object>(),
            new Map<String, Object>(),
            new List<String>{ 'application/json', 'text/plain' },
            new List<String>(),
            new List<String> { 'aemAuth' },
            OASComAdobeCqSocialDatastoreAsImplAS.class
        );
    }
    /**
     * 
     * 
     * @param post  (optional)
     * @param apply  (optional)
     * @param r_delete  (optional)
     * @param action  (optional)
     * @param location  (optional)
     * @param propertylist  (optional)
     * @param solrZkTimeout  (optional)
     * @param solrCommit  (optional)
     * @param cacheOn  (optional)
     * @param concurrencyLevel  (optional)
     * @param cacheStartSize  (optional)
     * @param cacheTtl  (optional)
     * @param cacheSize  (optional)
     * @return OASComAdobeCqSocialDatastoreOpImplSo
     * @throws OAS.ApiException if fails to make API call
     */
    public OASComAdobeCqSocialDatastoreOpImplSo comAdobeCqSocialDatastoreOpImplSocialMSResourceProviderFactory(Map<String, Object> params) {
        List<OAS.Param> query = new List<OAS.Param>();

        // cast query params to verify their expected type
        query.addAll(client.makeParam('post', (Boolean) params.get('post')));
        query.addAll(client.makeParam('apply', (Boolean) params.get('apply')));
        query.addAll(client.makeParam('delete', (Boolean) params.get('r_delete')));
        query.addAll(client.makeParam('action', (String) params.get('action')));
        query.addAll(client.makeParam('$location', (String) params.get('location')));
        query.addAll(client.makeParam('propertylist', (List<String>) params.get('propertylist'), 'csv'));
        query.addAll(client.makeParam('solr.zk.timeout', (String) params.get('solrZkTimeout')));
        query.addAll(client.makeParam('solr.commit', (String) params.get('solrCommit')));
        query.addAll(client.makeParam('cache.on', (Boolean) params.get('cacheOn')));
        query.addAll(client.makeParam('concurrency.level', (Integer) params.get('concurrencyLevel')));
        query.addAll(client.makeParam('cache.start.size', (Integer) params.get('cacheStartSize')));
        query.addAll(client.makeParam('cache.ttl', (Integer) params.get('cacheTtl')));
        query.addAll(client.makeParam('cache.size', (Integer) params.get('cacheSize')));

        List<OAS.Param> form = new List<OAS.Param>();

        return (OASComAdobeCqSocialDatastoreOpImplSo) client.invoke(
            'POST', '/system/console/configMgr/com.adobe.cq.social.datastore.op.impl.SocialMSResourceProviderFactory', '',
            query, form,
            new Map<String, Object>(),
            new Map<String, Object>(),
            new List<String>{ 'application/json', 'text/plain' },
            new List<String>(),
            new List<String> { 'aemAuth' },
            OASComAdobeCqSocialDatastoreOpImplSo.class
        );
    }
    /**
     * 
     * 
     * @param post  (optional)
     * @param apply  (optional)
     * @param r_delete  (optional)
     * @param action  (optional)
     * @param location  (optional)
     * @param propertylist  (optional)
     * @param solrZkTimeout  (optional)
     * @param solrCommit  (optional)
     * @param cacheOn  (optional)
     * @param concurrencyLevel  (optional)
     * @param cacheStartSize  (optional)
     * @param cacheTtl  (optional)
     * @param cacheSize  (optional)
     * @return OASComAdobeCqSocialDatastoreRdbImplS
     * @throws OAS.ApiException if fails to make API call
     */
    public OASComAdobeCqSocialDatastoreRdbImplS comAdobeCqSocialDatastoreRdbImplSocialRDBResourceProviderFactor(Map<String, Object> params) {
        List<OAS.Param> query = new List<OAS.Param>();

        // cast query params to verify their expected type
        query.addAll(client.makeParam('post', (Boolean) params.get('post')));
        query.addAll(client.makeParam('apply', (Boolean) params.get('apply')));
        query.addAll(client.makeParam('delete', (Boolean) params.get('r_delete')));
        query.addAll(client.makeParam('action', (String) params.get('action')));
        query.addAll(client.makeParam('$location', (String) params.get('location')));
        query.addAll(client.makeParam('propertylist', (List<String>) params.get('propertylist'), 'csv'));
        query.addAll(client.makeParam('solr.zk.timeout', (String) params.get('solrZkTimeout')));
        query.addAll(client.makeParam('solr.commit', (String) params.get('solrCommit')));
        query.addAll(client.makeParam('cache.on', (Boolean) params.get('cacheOn')));
        query.addAll(client.makeParam('concurrency.level', (Integer) params.get('concurrencyLevel')));
        query.addAll(client.makeParam('cache.start.size', (Integer) params.get('cacheStartSize')));
        query.addAll(client.makeParam('cache.ttl', (Integer) params.get('cacheTtl')));
        query.addAll(client.makeParam('cache.size', (Integer) params.get('cacheSize')));

        List<OAS.Param> form = new List<OAS.Param>();

        return (OASComAdobeCqSocialDatastoreRdbImplS) client.invoke(
            'POST', '/system/console/configMgr/com.adobe.cq.social.datastore.rdb.impl.SocialRDBResourceProviderFactory', '',
            query, form,
            new Map<String, Object>(),
            new Map<String, Object>(),
            new List<String>{ 'application/json', 'text/plain' },
            new List<String>(),
            new List<String> { 'aemAuth' },
            OASComAdobeCqSocialDatastoreRdbImplS.class
        );
    }
    /**
     * 
     * 
     * @param post  (optional)
     * @param apply  (optional)
     * @param r_delete  (optional)
     * @param action  (optional)
     * @param location  (optional)
     * @param propertylist  (optional)
     * @param isMemberCheck  (optional)
     * @return OASComAdobeCqSocialEnablementAdaptor
     * @throws OAS.ApiException if fails to make API call
     */
    public OASComAdobeCqSocialEnablementAdaptor comAdobeCqSocialEnablementAdaptorsEnablementLearningPathAdaptorF(Map<String, Object> params) {
        List<OAS.Param> query = new List<OAS.Param>();

        // cast query params to verify their expected type
        query.addAll(client.makeParam('post', (Boolean) params.get('post')));
        query.addAll(client.makeParam('apply', (Boolean) params.get('apply')));
        query.addAll(client.makeParam('delete', (Boolean) params.get('r_delete')));
        query.addAll(client.makeParam('action', (String) params.get('action')));
        query.addAll(client.makeParam('$location', (String) params.get('location')));
        query.addAll(client.makeParam('propertylist', (List<String>) params.get('propertylist'), 'csv'));
        query.addAll(client.makeParam('isMemberCheck', (Boolean) params.get('isMemberCheck')));

        List<OAS.Param> form = new List<OAS.Param>();

        return (OASComAdobeCqSocialEnablementAdaptor) client.invoke(
            'POST', '/system/console/configMgr/com.adobe.cq.social.enablement.adaptors.EnablementLearningPathAdaptorFactory', '',
            query, form,
            new Map<String, Object>(),
            new Map<String, Object>(),
            new List<String>{ 'application/json', 'text/plain' },
            new List<String>(),
            new List<String> { 'aemAuth' },
            OASComAdobeCqSocialEnablementAdaptor.class
        );
    }
    /**
     * 
     * 
     * @param post  (optional)
     * @param apply  (optional)
     * @param r_delete  (optional)
     * @param action  (optional)
     * @param location  (optional)
     * @param propertylist  (optional)
     * @param isMemberCheck  (optional)
     * @return OASComAdobeCqSocialEnablementAdaptor
     * @throws OAS.ApiException if fails to make API call
     */
    public OASComAdobeCqSocialEnablementAdaptor comAdobeCqSocialEnablementAdaptorsEnablementResourceAdaptorFacto(Map<String, Object> params) {
        List<OAS.Param> query = new List<OAS.Param>();

        // cast query params to verify their expected type
        query.addAll(client.makeParam('post', (Boolean) params.get('post')));
        query.addAll(client.makeParam('apply', (Boolean) params.get('apply')));
        query.addAll(client.makeParam('delete', (Boolean) params.get('r_delete')));
        query.addAll(client.makeParam('action', (String) params.get('action')));
        query.addAll(client.makeParam('$location', (String) params.get('location')));
        query.addAll(client.makeParam('propertylist', (List<String>) params.get('propertylist'), 'csv'));
        query.addAll(client.makeParam('isMemberCheck', (Boolean) params.get('isMemberCheck')));

        List<OAS.Param> form = new List<OAS.Param>();

        return (OASComAdobeCqSocialEnablementAdaptor) client.invoke(
            'POST', '/system/console/configMgr/com.adobe.cq.social.enablement.adaptors.EnablementResourceAdaptorFactory', '',
            query, form,
            new Map<String, Object>(),
            new Map<String, Object>(),
            new List<String>{ 'application/json', 'text/plain' },
            new List<String>(),
            new List<String> { 'aemAuth' },
            OASComAdobeCqSocialEnablementAdaptor.class
        );
    }
    /**
     * 
     * 
     * @param post  (optional)
     * @param apply  (optional)
     * @param r_delete  (optional)
     * @param action  (optional)
     * @param location  (optional)
     * @param propertylist  (optional)
     * @param fieldWhitelist  (optional)
     * @return OASComAdobeCqSocialEnablementLearnin
     * @throws OAS.ApiException if fails to make API call
     */
    public OASComAdobeCqSocialEnablementLearnin comAdobeCqSocialEnablementLearningpathEndpointsImplEnablementL(Map<String, Object> params) {
        List<OAS.Param> query = new List<OAS.Param>();

        // cast query params to verify their expected type
        query.addAll(client.makeParam('post', (Boolean) params.get('post')));
        query.addAll(client.makeParam('apply', (Boolean) params.get('apply')));
        query.addAll(client.makeParam('delete', (Boolean) params.get('r_delete')));
        query.addAll(client.makeParam('action', (String) params.get('action')));
        query.addAll(client.makeParam('$location', (String) params.get('location')));
        query.addAll(client.makeParam('propertylist', (List<String>) params.get('propertylist'), 'csv'));
        query.addAll(client.makeParams('fieldWhitelist', (List<String>) params.get('fieldWhitelist')));

        List<OAS.Param> form = new List<OAS.Param>();

        return (OASComAdobeCqSocialEnablementLearnin) client.invoke(
            'POST', '/system/console/configMgr/com.adobe.cq.social.enablement.learningpath.endpoints.impl.EnablementLearningPathModelOperationService', '',
            query, form,
            new Map<String, Object>(),
            new Map<String, Object>(),
            new List<String>{ 'application/json', 'text/plain' },
            new List<String>(),
            new List<String> { 'aemAuth' },
            OASComAdobeCqSocialEnablementLearnin.class
        );
    }
    /**
     * 
     * 
     * @param post  (optional)
     * @param apply  (optional)
     * @param r_delete  (optional)
     * @param action  (optional)
     * @param location  (optional)
     * @param propertylist  (optional)
     * @param fieldWhitelist  (optional)
     * @return OASComAdobeCqSocialEnablementResourc
     * @throws OAS.ApiException if fails to make API call
     */
    public OASComAdobeCqSocialEnablementResourc comAdobeCqSocialEnablementResourceEndpointsImplEnablementResou(Map<String, Object> params) {
        List<OAS.Param> query = new List<OAS.Param>();

        // cast query params to verify their expected type
        query.addAll(client.makeParam('post', (Boolean) params.get('post')));
        query.addAll(client.makeParam('apply', (Boolean) params.get('apply')));
        query.addAll(client.makeParam('delete', (Boolean) params.get('r_delete')));
        query.addAll(client.makeParam('action', (String) params.get('action')));
        query.addAll(client.makeParam('$location', (String) params.get('location')));
        query.addAll(client.makeParam('propertylist', (List<String>) params.get('propertylist'), 'csv'));
        query.addAll(client.makeParams('fieldWhitelist', (List<String>) params.get('fieldWhitelist')));

        List<OAS.Param> form = new List<OAS.Param>();

        return (OASComAdobeCqSocialEnablementResourc) client.invoke(
            'POST', '/system/console/configMgr/com.adobe.cq.social.enablement.resource.endpoints.impl.EnablementResourceModelOperationService', '',
            query, form,
            new Map<String, Object>(),
            new Map<String, Object>(),
            new List<String>{ 'application/json', 'text/plain' },
            new List<String>(),
            new List<String> { 'aemAuth' },
            OASComAdobeCqSocialEnablementResourc.class
        );
    }
    /**
     * 
     * 
     * @param post  (optional)
     * @param apply  (optional)
     * @param r_delete  (optional)
     * @param action  (optional)
     * @param location  (optional)
     * @param propertylist  (optional)
     * @param serviceRanking  (optional)
     * @return OASComAdobeCqSocialEnablementService
     * @throws OAS.ApiException if fails to make API call
     */
    public OASComAdobeCqSocialEnablementService comAdobeCqSocialEnablementServicesImplAuthorMarkerImpl(Map<String, Object> params) {
        List<OAS.Param> query = new List<OAS.Param>();

        // cast query params to verify their expected type
        query.addAll(client.makeParam('post', (Boolean) params.get('post')));
        query.addAll(client.makeParam('apply', (Boolean) params.get('apply')));
        query.addAll(client.makeParam('delete', (Boolean) params.get('r_delete')));
        query.addAll(client.makeParam('action', (String) params.get('action')));
        query.addAll(client.makeParam('$location', (String) params.get('location')));
        query.addAll(client.makeParam('propertylist', (List<String>) params.get('propertylist'), 'csv'));
        query.addAll(client.makeParam('service.ranking', (Integer) params.get('serviceRanking')));

        List<OAS.Param> form = new List<OAS.Param>();

        return (OASComAdobeCqSocialEnablementService) client.invoke(
            'POST', '/system/console/configMgr/com.adobe.cq.social.enablement.services.impl.AuthorMarkerImpl', '',
            query, form,
            new Map<String, Object>(),
            new Map<String, Object>(),
            new List<String>{ 'application/json', 'text/plain' },
            new List<String>(),
            new List<String> { 'aemAuth' },
            OASComAdobeCqSocialEnablementService.class
        );
    }
    /**
     * 
     * 
     * @param post  (optional)
     * @param apply  (optional)
     * @param r_delete  (optional)
     * @param action  (optional)
     * @param location  (optional)
     * @param propertylist  (optional)
     * @param slingServletSelectors  (optional)
     * @param slingServletExtensions  (optional)
     * @return OASComAdobeCqSocialFilelibraryClient
     * @throws OAS.ApiException if fails to make API call
     */
    public OASComAdobeCqSocialFilelibraryClient comAdobeCqSocialFilelibraryClientEndpointsFilelibraryDownloadGe(Map<String, Object> params) {
        List<OAS.Param> query = new List<OAS.Param>();

        // cast query params to verify their expected type
        query.addAll(client.makeParam('post', (Boolean) params.get('post')));
        query.addAll(client.makeParam('apply', (Boolean) params.get('apply')));
        query.addAll(client.makeParam('delete', (Boolean) params.get('r_delete')));
        query.addAll(client.makeParam('action', (String) params.get('action')));
        query.addAll(client.makeParam('$location', (String) params.get('location')));
        query.addAll(client.makeParam('propertylist', (List<String>) params.get('propertylist'), 'csv'));
        query.addAll(client.makeParam('sling.servlet.selectors', (String) params.get('slingServletSelectors')));
        query.addAll(client.makeParam('sling.servlet.extensions', (String) params.get('slingServletExtensions')));

        List<OAS.Param> form = new List<OAS.Param>();

        return (OASComAdobeCqSocialFilelibraryClient) client.invoke(
            'POST', '/system/console/configMgr/com.adobe.cq.social.filelibrary.client.endpoints.FilelibraryDownloadGetServlet', '',
            query, form,
            new Map<String, Object>(),
            new Map<String, Object>(),
            new List<String>{ 'application/json', 'text/plain' },
            new List<String>(),
            new List<String> { 'aemAuth' },
            OASComAdobeCqSocialFilelibraryClient.class
        );
    }
    /**
     * 
     * 
     * @param post  (optional)
     * @param apply  (optional)
     * @param r_delete  (optional)
     * @param action  (optional)
     * @param location  (optional)
     * @param propertylist  (optional)
     * @param fieldWhitelist  (optional)
     * @param attachmentTypeBlacklist  (optional)
     * @return OASComAdobeCqSocialFilelibraryClient
     * @throws OAS.ApiException if fails to make API call
     */
    public OASComAdobeCqSocialFilelibraryClient comAdobeCqSocialFilelibraryClientEndpointsImplFileLibraryOpera(Map<String, Object> params) {
        List<OAS.Param> query = new List<OAS.Param>();

        // cast query params to verify their expected type
        query.addAll(client.makeParam('post', (Boolean) params.get('post')));
        query.addAll(client.makeParam('apply', (Boolean) params.get('apply')));
        query.addAll(client.makeParam('delete', (Boolean) params.get('r_delete')));
        query.addAll(client.makeParam('action', (String) params.get('action')));
        query.addAll(client.makeParam('$location', (String) params.get('location')));
        query.addAll(client.makeParam('propertylist', (List<String>) params.get('propertylist'), 'csv'));
        query.addAll(client.makeParams('fieldWhitelist', (List<String>) params.get('fieldWhitelist')));
        query.addAll(client.makeParams('attachmentTypeBlacklist', (List<String>) params.get('attachmentTypeBlacklist')));

        List<OAS.Param> form = new List<OAS.Param>();

        return (OASComAdobeCqSocialFilelibraryClient) client.invoke(
            'POST', '/system/console/configMgr/com.adobe.cq.social.filelibrary.client.endpoints.impl.FileLibraryOperationsService', '',
            query, form,
            new Map<String, Object>(),
            new Map<String, Object>(),
            new List<String>{ 'application/json', 'text/plain' },
            new List<String>(),
            new List<String> { 'aemAuth' },
            OASComAdobeCqSocialFilelibraryClient.class
        );
    }
    /**
     * 
     * 
     * @param post  (optional)
     * @param apply  (optional)
     * @param r_delete  (optional)
     * @param action  (optional)
     * @param location  (optional)
     * @param propertylist  (optional)
     * @param fieldWhitelist  (optional)
     * @param attachmentTypeBlacklist  (optional)
     * @return OASComAdobeCqSocialForumClientEndpoi
     * @throws OAS.ApiException if fails to make API call
     */
    public OASComAdobeCqSocialForumClientEndpoi comAdobeCqSocialForumClientEndpointsImplForumOperationsService(Map<String, Object> params) {
        List<OAS.Param> query = new List<OAS.Param>();

        // cast query params to verify their expected type
        query.addAll(client.makeParam('post', (Boolean) params.get('post')));
        query.addAll(client.makeParam('apply', (Boolean) params.get('apply')));
        query.addAll(client.makeParam('delete', (Boolean) params.get('r_delete')));
        query.addAll(client.makeParam('action', (String) params.get('action')));
        query.addAll(client.makeParam('$location', (String) params.get('location')));
        query.addAll(client.makeParam('propertylist', (List<String>) params.get('propertylist'), 'csv'));
        query.addAll(client.makeParams('fieldWhitelist', (List<String>) params.get('fieldWhitelist')));
        query.addAll(client.makeParams('attachmentTypeBlacklist', (List<String>) params.get('attachmentTypeBlacklist')));

        List<OAS.Param> form = new List<OAS.Param>();

        return (OASComAdobeCqSocialForumClientEndpoi) client.invoke(
            'POST', '/system/console/configMgr/com.adobe.cq.social.forum.client.endpoints.impl.ForumOperationsService', '',
            query, form,
            new Map<String, Object>(),
            new Map<String, Object>(),
            new List<String>{ 'application/json', 'text/plain' },
            new List<String>(),
            new List<String> { 'aemAuth' },
            OASComAdobeCqSocialForumClientEndpoi.class
        );
    }
    /**
     * 
     * 
     * @param post  (optional)
     * @param apply  (optional)
     * @param r_delete  (optional)
     * @param action  (optional)
     * @param location  (optional)
     * @param propertylist  (optional)
     * @param extensionOrder  (optional)
     * @param flushForumontopic  (optional)
     * @return OASComAdobeCqSocialForumDispatcherIm
     * @throws OAS.ApiException if fails to make API call
     */
    public OASComAdobeCqSocialForumDispatcherIm comAdobeCqSocialForumDispatcherImplFlushOperations(Map<String, Object> params) {
        List<OAS.Param> query = new List<OAS.Param>();

        // cast query params to verify their expected type
        query.addAll(client.makeParam('post', (Boolean) params.get('post')));
        query.addAll(client.makeParam('apply', (Boolean) params.get('apply')));
        query.addAll(client.makeParam('delete', (Boolean) params.get('r_delete')));
        query.addAll(client.makeParam('action', (String) params.get('action')));
        query.addAll(client.makeParam('$location', (String) params.get('location')));
        query.addAll(client.makeParam('propertylist', (List<String>) params.get('propertylist'), 'csv'));
        query.addAll(client.makeParam('extension.order', (Integer) params.get('extensionOrder')));
        query.addAll(client.makeParam('flush.forumontopic', (Boolean) params.get('flushForumontopic')));

        List<OAS.Param> form = new List<OAS.Param>();

        return (OASComAdobeCqSocialForumDispatcherIm) client.invoke(
            'POST', '/system/console/configMgr/com.adobe.cq.social.forum.dispatcher.impl.FlushOperations', '',
            query, form,
            new Map<String, Object>(),
            new Map<String, Object>(),
            new List<String>{ 'application/json', 'text/plain' },
            new List<String>(),
            new List<String> { 'aemAuth' },
            OASComAdobeCqSocialForumDispatcherIm.class
        );
    }
    /**
     * 
     * 
     * @param post  (optional)
     * @param apply  (optional)
     * @param r_delete  (optional)
     * @param action  (optional)
     * @param location  (optional)
     * @param propertylist  (optional)
     * @param groupListingPaginationEnable  (optional)
     * @param groupListingLazyloadingEnable  (optional)
     * @param pageSize  (optional)
     * @param priority  (optional)
     * @return OASComAdobeCqSocialGroupClientImplCo
     * @throws OAS.ApiException if fails to make API call
     */
    public OASComAdobeCqSocialGroupClientImplCo comAdobeCqSocialGroupClientImplCommunityGroupCollectionComponen(Map<String, Object> params) {
        List<OAS.Param> query = new List<OAS.Param>();

        // cast query params to verify their expected type
        query.addAll(client.makeParam('post', (Boolean) params.get('post')));
        query.addAll(client.makeParam('apply', (Boolean) params.get('apply')));
        query.addAll(client.makeParam('delete', (Boolean) params.get('r_delete')));
        query.addAll(client.makeParam('action', (String) params.get('action')));
        query.addAll(client.makeParam('$location', (String) params.get('location')));
        query.addAll(client.makeParam('propertylist', (List<String>) params.get('propertylist'), 'csv'));
        query.addAll(client.makeParam('group.listing.pagination.enable', (Boolean) params.get('groupListingPaginationEnable')));
        query.addAll(client.makeParam('group.listing.lazyloading.enable', (Boolean) params.get('groupListingLazyloadingEnable')));
        query.addAll(client.makeParam('page.size', (Integer) params.get('pageSize')));
        query.addAll(client.makeParam('priority', (Integer) params.get('priority')));

        List<OAS.Param> form = new List<OAS.Param>();

        return (OASComAdobeCqSocialGroupClientImplCo) client.invoke(
            'POST', '/system/console/configMgr/com.adobe.cq.social.group.client.impl.CommunityGroupCollectionComponentFactory', '',
            query, form,
            new Map<String, Object>(),
            new Map<String, Object>(),
            new List<String>{ 'application/json', 'text/plain' },
            new List<String>(),
            new List<String> { 'aemAuth' },
            OASComAdobeCqSocialGroupClientImplCo.class
        );
    }
    /**
     * 
     * 
     * @param post  (optional)
     * @param apply  (optional)
     * @param r_delete  (optional)
     * @param action  (optional)
     * @param location  (optional)
     * @param propertylist  (optional)
     * @param maxWaitTime  (optional)
     * @param minWaitBetweenRetries  (optional)
     * @return OASComAdobeCqSocialGroupImplGroupSer
     * @throws OAS.ApiException if fails to make API call
     */
    public OASComAdobeCqSocialGroupImplGroupSer comAdobeCqSocialGroupImplGroupServiceImpl(Map<String, Object> params) {
        List<OAS.Param> query = new List<OAS.Param>();

        // cast query params to verify their expected type
        query.addAll(client.makeParam('post', (Boolean) params.get('post')));
        query.addAll(client.makeParam('apply', (Boolean) params.get('apply')));
        query.addAll(client.makeParam('delete', (Boolean) params.get('r_delete')));
        query.addAll(client.makeParam('action', (String) params.get('action')));
        query.addAll(client.makeParam('$location', (String) params.get('location')));
        query.addAll(client.makeParam('propertylist', (List<String>) params.get('propertylist'), 'csv'));
        query.addAll(client.makeParam('maxWaitTime', (Integer) params.get('maxWaitTime')));
        query.addAll(client.makeParam('minWaitBetweenRetries', (Integer) params.get('minWaitBetweenRetries')));

        List<OAS.Param> form = new List<OAS.Param>();

        return (OASComAdobeCqSocialGroupImplGroupSer) client.invoke(
            'POST', '/system/console/configMgr/com.adobe.cq.social.group.impl.GroupServiceImpl', '',
            query, form,
            new Map<String, Object>(),
            new Map<String, Object>(),
            new List<String>{ 'application/json', 'text/plain' },
            new List<String>(),
            new List<String> { 'aemAuth' },
            OASComAdobeCqSocialGroupImplGroupSer.class
        );
    }
    /**
     * 
     * 
     * @param post  (optional)
     * @param apply  (optional)
     * @param r_delete  (optional)
     * @param action  (optional)
     * @param location  (optional)
     * @param propertylist  (optional)
     * @param parameterGuavaCacheEnabled  (optional)
     * @param parameterGuavaCacheParams  (optional)
     * @param parameterGuavaCacheReload  (optional)
     * @param serviceRanking  (optional)
     * @return OASComAdobeCqSocialHandlebarsGuavaTe
     * @throws OAS.ApiException if fails to make API call
     */
    public OASComAdobeCqSocialHandlebarsGuavaTe comAdobeCqSocialHandlebarsGuavaTemplateCacheImpl(Map<String, Object> params) {
        List<OAS.Param> query = new List<OAS.Param>();

        // cast query params to verify their expected type
        query.addAll(client.makeParam('post', (Boolean) params.get('post')));
        query.addAll(client.makeParam('apply', (Boolean) params.get('apply')));
        query.addAll(client.makeParam('delete', (Boolean) params.get('r_delete')));
        query.addAll(client.makeParam('action', (String) params.get('action')));
        query.addAll(client.makeParam('$location', (String) params.get('location')));
        query.addAll(client.makeParam('propertylist', (List<String>) params.get('propertylist'), 'csv'));
        query.addAll(client.makeParam('parameter.guava.cache.enabled', (Boolean) params.get('parameterGuavaCacheEnabled')));
        query.addAll(client.makeParam('parameter.guava.cache.params', (String) params.get('parameterGuavaCacheParams')));
        query.addAll(client.makeParam('parameter.guava.cache.reload', (Boolean) params.get('parameterGuavaCacheReload')));
        query.addAll(client.makeParam('service.ranking', (Integer) params.get('serviceRanking')));

        List<OAS.Param> form = new List<OAS.Param>();

        return (OASComAdobeCqSocialHandlebarsGuavaTe) client.invoke(
            'POST', '/system/console/configMgr/com.adobe.cq.social.handlebars.GuavaTemplateCacheImpl', '',
            query, form,
            new Map<String, Object>(),
            new Map<String, Object>(),
            new List<String>{ 'application/json', 'text/plain' },
            new List<String>(),
            new List<String> { 'aemAuth' },
            OASComAdobeCqSocialHandlebarsGuavaTe.class
        );
    }
    /**
     * 
     * 
     * @param post  (optional)
     * @param apply  (optional)
     * @param r_delete  (optional)
     * @param action  (optional)
     * @param location  (optional)
     * @param propertylist  (optional)
     * @param fieldWhitelist  (optional)
     * @param attachmentTypeBlacklist  (optional)
     * @return OASComAdobeCqSocialIdeationClientEnd
     * @throws OAS.ApiException if fails to make API call
     */
    public OASComAdobeCqSocialIdeationClientEnd comAdobeCqSocialIdeationClientEndpointsImplIdeationOperationsS(Map<String, Object> params) {
        List<OAS.Param> query = new List<OAS.Param>();

        // cast query params to verify their expected type
        query.addAll(client.makeParam('post', (Boolean) params.get('post')));
        query.addAll(client.makeParam('apply', (Boolean) params.get('apply')));
        query.addAll(client.makeParam('delete', (Boolean) params.get('r_delete')));
        query.addAll(client.makeParam('action', (String) params.get('action')));
        query.addAll(client.makeParam('$location', (String) params.get('location')));
        query.addAll(client.makeParam('propertylist', (List<String>) params.get('propertylist'), 'csv'));
        query.addAll(client.makeParams('fieldWhitelist', (List<String>) params.get('fieldWhitelist')));
        query.addAll(client.makeParams('attachmentTypeBlacklist', (List<String>) params.get('attachmentTypeBlacklist')));

        List<OAS.Param> form = new List<OAS.Param>();

        return (OASComAdobeCqSocialIdeationClientEnd) client.invoke(
            'POST', '/system/console/configMgr/com.adobe.cq.social.ideation.client.endpoints.impl.IdeationOperationsService', '',
            query, form,
            new Map<String, Object>(),
            new Map<String, Object>(),
            new List<String>{ 'application/json', 'text/plain' },
            new List<String>(),
            new List<String> { 'aemAuth' },
            OASComAdobeCqSocialIdeationClientEnd.class
        );
    }
    /**
     * 
     * 
     * @param post  (optional)
     * @param apply  (optional)
     * @param r_delete  (optional)
     * @param action  (optional)
     * @param location  (optional)
     * @param propertylist  (optional)
     * @param fieldWhitelist  (optional)
     * @param attachmentTypeBlacklist  (optional)
     * @return OASComAdobeCqSocialJournalClientEndp
     * @throws OAS.ApiException if fails to make API call
     */
    public OASComAdobeCqSocialJournalClientEndp comAdobeCqSocialJournalClientEndpointsImplJournalOperationsSer(Map<String, Object> params) {
        List<OAS.Param> query = new List<OAS.Param>();

        // cast query params to verify their expected type
        query.addAll(client.makeParam('post', (Boolean) params.get('post')));
        query.addAll(client.makeParam('apply', (Boolean) params.get('apply')));
        query.addAll(client.makeParam('delete', (Boolean) params.get('r_delete')));
        query.addAll(client.makeParam('action', (String) params.get('action')));
        query.addAll(client.makeParam('$location', (String) params.get('location')));
        query.addAll(client.makeParam('propertylist', (List<String>) params.get('propertylist'), 'csv'));
        query.addAll(client.makeParams('fieldWhitelist', (List<String>) params.get('fieldWhitelist')));
        query.addAll(client.makeParams('attachmentTypeBlacklist', (List<String>) params.get('attachmentTypeBlacklist')));

        List<OAS.Param> form = new List<OAS.Param>();

        return (OASComAdobeCqSocialJournalClientEndp) client.invoke(
            'POST', '/system/console/configMgr/com.adobe.cq.social.journal.client.endpoints.impl.JournalOperationsService', '',
            query, form,
            new Map<String, Object>(),
            new Map<String, Object>(),
            new List<String>{ 'application/json', 'text/plain' },
            new List<String>(),
            new List<String> { 'aemAuth' },
            OASComAdobeCqSocialJournalClientEndp.class
        );
    }
    /**
     * 
     * 
     * @param post  (optional)
     * @param apply  (optional)
     * @param r_delete  (optional)
     * @param action  (optional)
     * @param location  (optional)
     * @param propertylist  (optional)
     * @param fieldWhitelist  (optional)
     * @return OASComAdobeCqSocialMembersEndpointsI
     * @throws OAS.ApiException if fails to make API call
     */
    public OASComAdobeCqSocialMembersEndpointsI comAdobeCqSocialMembersEndpointsImplCommunityMemberGroupProfile(Map<String, Object> params) {
        List<OAS.Param> query = new List<OAS.Param>();

        // cast query params to verify their expected type
        query.addAll(client.makeParam('post', (Boolean) params.get('post')));
        query.addAll(client.makeParam('apply', (Boolean) params.get('apply')));
        query.addAll(client.makeParam('delete', (Boolean) params.get('r_delete')));
        query.addAll(client.makeParam('action', (String) params.get('action')));
        query.addAll(client.makeParam('$location', (String) params.get('location')));
        query.addAll(client.makeParam('propertylist', (List<String>) params.get('propertylist'), 'csv'));
        query.addAll(client.makeParams('fieldWhitelist', (List<String>) params.get('fieldWhitelist')));

        List<OAS.Param> form = new List<OAS.Param>();

        return (OASComAdobeCqSocialMembersEndpointsI) client.invoke(
            'POST', '/system/console/configMgr/com.adobe.cq.social.members.endpoints.impl.CommunityMemberGroupProfileOperationService', '',
            query, form,
            new Map<String, Object>(),
            new Map<String, Object>(),
            new List<String>{ 'application/json', 'text/plain' },
            new List<String>(),
            new List<String> { 'aemAuth' },
            OASComAdobeCqSocialMembersEndpointsI.class
        );
    }
    /**
     * 
     * 
     * @param post  (optional)
     * @param apply  (optional)
     * @param r_delete  (optional)
     * @param action  (optional)
     * @param location  (optional)
     * @param propertylist  (optional)
     * @param fieldWhitelist  (optional)
     * @return OASComAdobeCqSocialMembersEndpointsI
     * @throws OAS.ApiException if fails to make API call
     */
    public OASComAdobeCqSocialMembersEndpointsI comAdobeCqSocialMembersEndpointsImplCommunityMemberUserProfileO(Map<String, Object> params) {
        List<OAS.Param> query = new List<OAS.Param>();

        // cast query params to verify their expected type
        query.addAll(client.makeParam('post', (Boolean) params.get('post')));
        query.addAll(client.makeParam('apply', (Boolean) params.get('apply')));
        query.addAll(client.makeParam('delete', (Boolean) params.get('r_delete')));
        query.addAll(client.makeParam('action', (String) params.get('action')));
        query.addAll(client.makeParam('$location', (String) params.get('location')));
        query.addAll(client.makeParam('propertylist', (List<String>) params.get('propertylist'), 'csv'));
        query.addAll(client.makeParams('fieldWhitelist', (List<String>) params.get('fieldWhitelist')));

        List<OAS.Param> form = new List<OAS.Param>();

        return (OASComAdobeCqSocialMembersEndpointsI) client.invoke(
            'POST', '/system/console/configMgr/com.adobe.cq.social.members.endpoints.impl.CommunityMemberUserProfileOperationService', '',
            query, form,
            new Map<String, Object>(),
            new Map<String, Object>(),
            new List<String>{ 'application/json', 'text/plain' },
            new List<String>(),
            new List<String> { 'aemAuth' },
            OASComAdobeCqSocialMembersEndpointsI.class
        );
    }
    /**
     * 
     * 
     * @param post  (optional)
     * @param apply  (optional)
     * @param r_delete  (optional)
     * @param action  (optional)
     * @param location  (optional)
     * @param propertylist  (optional)
     * @param everyoneLimit  (optional)
     * @param priority  (optional)
     * @return OASComAdobeCqSocialMembersImplCommun
     * @throws OAS.ApiException if fails to make API call
     */
    public OASComAdobeCqSocialMembersImplCommun comAdobeCqSocialMembersImplCommunityMemberGroupProfileComponentF(Map<String, Object> params) {
        List<OAS.Param> query = new List<OAS.Param>();

        // cast query params to verify their expected type
        query.addAll(client.makeParam('post', (Boolean) params.get('post')));
        query.addAll(client.makeParam('apply', (Boolean) params.get('apply')));
        query.addAll(client.makeParam('delete', (Boolean) params.get('r_delete')));
        query.addAll(client.makeParam('action', (String) params.get('action')));
        query.addAll(client.makeParam('$location', (String) params.get('location')));
        query.addAll(client.makeParam('propertylist', (List<String>) params.get('propertylist'), 'csv'));
        query.addAll(client.makeParam('everyoneLimit', (Integer) params.get('everyoneLimit')));
        query.addAll(client.makeParam('priority', (Integer) params.get('priority')));

        List<OAS.Param> form = new List<OAS.Param>();

        return (OASComAdobeCqSocialMembersImplCommun) client.invoke(
            'POST', '/system/console/configMgr/com.adobe.cq.social.members.impl.CommunityMemberGroupProfileComponentFactory', '',
            query, form,
            new Map<String, Object>(),
            new Map<String, Object>(),
            new List<String>{ 'application/json', 'text/plain' },
            new List<String>(),
            new List<String> { 'aemAuth' },
            OASComAdobeCqSocialMembersImplCommun.class
        );
    }
    /**
     * 
     * 
     * @param post  (optional)
     * @param apply  (optional)
     * @param r_delete  (optional)
     * @param action  (optional)
     * @param location  (optional)
     * @param propertylist  (optional)
     * @param messageProperties  (optional)
     * @param messageBoxSizeLimit  (optional)
     * @param messageCountLimit  (optional)
     * @param notifyFailure  (optional)
     * @param failureMessageFrom  (optional)
     * @param failureTemplatePath  (optional)
     * @param maxRetries  (optional)
     * @param minWaitBetweenRetries  (optional)
     * @param countUpdatePoolSize  (optional)
     * @param inboxPath  (optional)
     * @param sentitemsPath  (optional)
     * @param supportAttachments  (optional)
     * @param supportGroupMessaging  (optional)
     * @param maxTotalRecipients  (optional)
     * @param batchSize  (optional)
     * @param maxTotalAttachmentSize  (optional)
     * @param attachmentTypeBlacklist  (optional)
     * @param allowedAttachmentTypes  (optional)
     * @param serviceSelector  (optional)
     * @param fieldWhitelist  (optional)
     * @return OASComAdobeCqSocialMessagingClientEn
     * @throws OAS.ApiException if fails to make API call
     */
    public OASComAdobeCqSocialMessagingClientEn comAdobeCqSocialMessagingClientEndpointsImplMessagingOperation(Map<String, Object> params) {
        List<OAS.Param> query = new List<OAS.Param>();

        // cast query params to verify their expected type
        query.addAll(client.makeParam('post', (Boolean) params.get('post')));
        query.addAll(client.makeParam('apply', (Boolean) params.get('apply')));
        query.addAll(client.makeParam('delete', (Boolean) params.get('r_delete')));
        query.addAll(client.makeParam('action', (String) params.get('action')));
        query.addAll(client.makeParam('$location', (String) params.get('location')));
        query.addAll(client.makeParam('propertylist', (List<String>) params.get('propertylist'), 'csv'));
        query.addAll(client.makeParams('message.properties', (List<String>) params.get('messageProperties')));
        query.addAll(client.makeParam('messageBoxSizeLimit', (Integer) params.get('messageBoxSizeLimit')));
        query.addAll(client.makeParam('messageCountLimit', (Integer) params.get('messageCountLimit')));
        query.addAll(client.makeParam('notifyFailure', (Boolean) params.get('notifyFailure')));
        query.addAll(client.makeParam('failureMessageFrom', (String) params.get('failureMessageFrom')));
        query.addAll(client.makeParam('failureTemplatePath', (String) params.get('failureTemplatePath')));
        query.addAll(client.makeParam('maxRetries', (Integer) params.get('maxRetries')));
        query.addAll(client.makeParam('minWaitBetweenRetries', (Integer) params.get('minWaitBetweenRetries')));
        query.addAll(client.makeParam('countUpdatePoolSize', (Integer) params.get('countUpdatePoolSize')));
        query.addAll(client.makeParam('inbox.path', (String) params.get('inboxPath')));
        query.addAll(client.makeParam('sentitems.path', (String) params.get('sentitemsPath')));
        query.addAll(client.makeParam('supportAttachments', (Boolean) params.get('supportAttachments')));
        query.addAll(client.makeParam('supportGroupMessaging', (Boolean) params.get('supportGroupMessaging')));
        query.addAll(client.makeParam('maxTotalRecipients', (Integer) params.get('maxTotalRecipients')));
        query.addAll(client.makeParam('batchSize', (Integer) params.get('batchSize')));
        query.addAll(client.makeParam('maxTotalAttachmentSize', (Integer) params.get('maxTotalAttachmentSize')));
        query.addAll(client.makeParams('attachmentTypeBlacklist', (List<String>) params.get('attachmentTypeBlacklist')));
        query.addAll(client.makeParams('allowedAttachmentTypes', (List<String>) params.get('allowedAttachmentTypes')));
        query.addAll(client.makeParam('serviceSelector', (String) params.get('serviceSelector')));
        query.addAll(client.makeParams('fieldWhitelist', (List<String>) params.get('fieldWhitelist')));

        List<OAS.Param> form = new List<OAS.Param>();

        return (OASComAdobeCqSocialMessagingClientEn) client.invoke(
            'POST', '/system/console/configMgr/com.adobe.cq.social.messaging.client.endpoints.impl.MessagingOperationsServiceImpl', '',
            query, form,
            new Map<String, Object>(),
            new Map<String, Object>(),
            new List<String>{ 'application/json', 'text/plain' },
            new List<String>(),
            new List<String> { 'aemAuth' },
            OASComAdobeCqSocialMessagingClientEn.class
        );
    }
    /**
     * 
     * 
     * @param post  (optional)
     * @param apply  (optional)
     * @param r_delete  (optional)
     * @param action  (optional)
     * @param location  (optional)
     * @param propertylist  (optional)
     * @param resourceTypeFilters  (optional)
     * @param priority  (optional)
     * @return OASComAdobeCqSocialModerationDashboa
     * @throws OAS.ApiException if fails to make API call
     */
    public OASComAdobeCqSocialModerationDashboa comAdobeCqSocialModerationDashboardApiFilterGroupSocialComponen(Map<String, Object> params) {
        List<OAS.Param> query = new List<OAS.Param>();

        // cast query params to verify their expected type
        query.addAll(client.makeParam('post', (Boolean) params.get('post')));
        query.addAll(client.makeParam('apply', (Boolean) params.get('apply')));
        query.addAll(client.makeParam('delete', (Boolean) params.get('r_delete')));
        query.addAll(client.makeParam('action', (String) params.get('action')));
        query.addAll(client.makeParam('$location', (String) params.get('location')));
        query.addAll(client.makeParam('propertylist', (List<String>) params.get('propertylist'), 'csv'));
        query.addAll(client.makeParams('resourceType.filters', (List<String>) params.get('resourceTypeFilters')));
        query.addAll(client.makeParam('priority', (Integer) params.get('priority')));

        List<OAS.Param> form = new List<OAS.Param>();

        return (OASComAdobeCqSocialModerationDashboa) client.invoke(
            'POST', '/system/console/configMgr/com.adobe.cq.social.moderation.dashboard.api.FilterGroupSocialComponentFactory', '',
            query, form,
            new Map<String, Object>(),
            new Map<String, Object>(),
            new List<String>{ 'application/json', 'text/plain' },
            new List<String>(),
            new List<String> { 'aemAuth' },
            OASComAdobeCqSocialModerationDashboa.class
        );
    }
    /**
     * 
     * 
     * @param post  (optional)
     * @param apply  (optional)
     * @param r_delete  (optional)
     * @param action  (optional)
     * @param location  (optional)
     * @param propertylist  (optional)
     * @param priority  (optional)
     * @return OASComAdobeCqSocialModerationDashboa
     * @throws OAS.ApiException if fails to make API call
     */
    public OASComAdobeCqSocialModerationDashboa comAdobeCqSocialModerationDashboardApiModerationDashboardSocial(Map<String, Object> params) {
        List<OAS.Param> query = new List<OAS.Param>();

        // cast query params to verify their expected type
        query.addAll(client.makeParam('post', (Boolean) params.get('post')));
        query.addAll(client.makeParam('apply', (Boolean) params.get('apply')));
        query.addAll(client.makeParam('delete', (Boolean) params.get('r_delete')));
        query.addAll(client.makeParam('action', (String) params.get('action')));
        query.addAll(client.makeParam('$location', (String) params.get('location')));
        query.addAll(client.makeParam('propertylist', (List<String>) params.get('propertylist'), 'csv'));
        query.addAll(client.makeParam('priority', (Integer) params.get('priority')));

        List<OAS.Param> form = new List<OAS.Param>();

        return (OASComAdobeCqSocialModerationDashboa) client.invoke(
            'POST', '/system/console/configMgr/com.adobe.cq.social.moderation.dashboard.api.ModerationDashboardSocialComponentFactory', '',
            query, form,
            new Map<String, Object>(),
            new Map<String, Object>(),
            new List<String>{ 'application/json', 'text/plain' },
            new List<String>(),
            new List<String> { 'aemAuth' },
            OASComAdobeCqSocialModerationDashboa.class
        );
    }
    /**
     * 
     * 
     * @param post  (optional)
     * @param apply  (optional)
     * @param r_delete  (optional)
     * @param action  (optional)
     * @param location  (optional)
     * @param propertylist  (optional)
     * @param priority  (optional)
     * @return OASComAdobeCqSocialModerationDashboa
     * @throws OAS.ApiException if fails to make API call
     */
    public OASComAdobeCqSocialModerationDashboa comAdobeCqSocialModerationDashboardApiUserDetailsSocialComponen(Map<String, Object> params) {
        List<OAS.Param> query = new List<OAS.Param>();

        // cast query params to verify their expected type
        query.addAll(client.makeParam('post', (Boolean) params.get('post')));
        query.addAll(client.makeParam('apply', (Boolean) params.get('apply')));
        query.addAll(client.makeParam('delete', (Boolean) params.get('r_delete')));
        query.addAll(client.makeParam('action', (String) params.get('action')));
        query.addAll(client.makeParam('$location', (String) params.get('location')));
        query.addAll(client.makeParam('propertylist', (List<String>) params.get('propertylist'), 'csv'));
        query.addAll(client.makeParam('priority', (Integer) params.get('priority')));

        List<OAS.Param> form = new List<OAS.Param>();

        return (OASComAdobeCqSocialModerationDashboa) client.invoke(
            'POST', '/system/console/configMgr/com.adobe.cq.social.moderation.dashboard.api.UserDetailsSocialComponentFactory', '',
            query, form,
            new Map<String, Object>(),
            new Map<String, Object>(),
            new List<String>{ 'application/json', 'text/plain' },
            new List<String>(),
            new List<String> { 'aemAuth' },
            OASComAdobeCqSocialModerationDashboa.class
        );
    }
    /**
     * 
     * 
     * @param post  (optional)
     * @param apply  (optional)
     * @param r_delete  (optional)
     * @param action  (optional)
     * @param location  (optional)
     * @param propertylist  (optional)
     * @param resourceTypeFilters  (optional)
     * @param priority  (optional)
     * @return OASComAdobeCqSocialModerationDashboa
     * @throws OAS.ApiException if fails to make API call
     */
    public OASComAdobeCqSocialModerationDashboa comAdobeCqSocialModerationDashboardInternalImplFilterGroupSoci(Map<String, Object> params) {
        List<OAS.Param> query = new List<OAS.Param>();

        // cast query params to verify their expected type
        query.addAll(client.makeParam('post', (Boolean) params.get('post')));
        query.addAll(client.makeParam('apply', (Boolean) params.get('apply')));
        query.addAll(client.makeParam('delete', (Boolean) params.get('r_delete')));
        query.addAll(client.makeParam('action', (String) params.get('action')));
        query.addAll(client.makeParam('$location', (String) params.get('location')));
        query.addAll(client.makeParam('propertylist', (List<String>) params.get('propertylist'), 'csv'));
        query.addAll(client.makeParams('resourceType.filters', (List<String>) params.get('resourceTypeFilters')));
        query.addAll(client.makeParam('priority', (Integer) params.get('priority')));

        List<OAS.Param> form = new List<OAS.Param>();

        return (OASComAdobeCqSocialModerationDashboa) client.invoke(
            'POST', '/system/console/configMgr/com.adobe.cq.social.moderation.dashboard.internal.impl.FilterGroupSocialComponentFactoryV2', '',
            query, form,
            new Map<String, Object>(),
            new Map<String, Object>(),
            new List<String>{ 'application/json', 'text/plain' },
            new List<String>(),
            new List<String> { 'aemAuth' },
            OASComAdobeCqSocialModerationDashboa.class
        );
    }
    /**
     * 
     * 
     * @param post  (optional)
     * @param apply  (optional)
     * @param r_delete  (optional)
     * @param action  (optional)
     * @param location  (optional)
     * @param propertylist  (optional)
     * @param eventTopics  (optional)
     * @param eventFilter  (optional)
     * @return OASComAdobeCqSocialNotificationsImpl
     * @throws OAS.ApiException if fails to make API call
     */
    public OASComAdobeCqSocialNotificationsImpl comAdobeCqSocialNotificationsImplMentionsRouter(Map<String, Object> params) {
        List<OAS.Param> query = new List<OAS.Param>();

        // cast query params to verify their expected type
        query.addAll(client.makeParam('post', (Boolean) params.get('post')));
        query.addAll(client.makeParam('apply', (Boolean) params.get('apply')));
        query.addAll(client.makeParam('delete', (Boolean) params.get('r_delete')));
        query.addAll(client.makeParam('action', (String) params.get('action')));
        query.addAll(client.makeParam('$location', (String) params.get('location')));
        query.addAll(client.makeParam('propertylist', (List<String>) params.get('propertylist'), 'csv'));
        query.addAll(client.makeParam('event.topics', (String) params.get('eventTopics')));
        query.addAll(client.makeParam('event.filter', (String) params.get('eventFilter')));

        List<OAS.Param> form = new List<OAS.Param>();

        return (OASComAdobeCqSocialNotificationsImpl) client.invoke(
            'POST', '/system/console/configMgr/com.adobe.cq.social.notifications.impl.MentionsRouter', '',
            query, form,
            new Map<String, Object>(),
            new Map<String, Object>(),
            new List<String>{ 'application/json', 'text/plain' },
            new List<String>(),
            new List<String> { 'aemAuth' },
            OASComAdobeCqSocialNotificationsImpl.class
        );
    }
    /**
     * 
     * 
     * @param post  (optional)
     * @param apply  (optional)
     * @param r_delete  (optional)
     * @param action  (optional)
     * @param location  (optional)
     * @param propertylist  (optional)
     * @param maxUnreadNotificationCount  (optional)
     * @return OASComAdobeCqSocialNotificationsImpl
     * @throws OAS.ApiException if fails to make API call
     */
    public OASComAdobeCqSocialNotificationsImpl comAdobeCqSocialNotificationsImplNotificationManagerImpl(Map<String, Object> params) {
        List<OAS.Param> query = new List<OAS.Param>();

        // cast query params to verify their expected type
        query.addAll(client.makeParam('post', (Boolean) params.get('post')));
        query.addAll(client.makeParam('apply', (Boolean) params.get('apply')));
        query.addAll(client.makeParam('delete', (Boolean) params.get('r_delete')));
        query.addAll(client.makeParam('action', (String) params.get('action')));
        query.addAll(client.makeParam('$location', (String) params.get('location')));
        query.addAll(client.makeParam('propertylist', (List<String>) params.get('propertylist'), 'csv'));
        query.addAll(client.makeParam('max.unread.notification.count', (Integer) params.get('maxUnreadNotificationCount')));

        List<OAS.Param> form = new List<OAS.Param>();

        return (OASComAdobeCqSocialNotificationsImpl) client.invoke(
            'POST', '/system/console/configMgr/com.adobe.cq.social.notifications.impl.NotificationManagerImpl', '',
            query, form,
            new Map<String, Object>(),
            new Map<String, Object>(),
            new List<String>{ 'application/json', 'text/plain' },
            new List<String>(),
            new List<String> { 'aemAuth' },
            OASComAdobeCqSocialNotificationsImpl.class
        );
    }
    /**
     * 
     * 
     * @param post  (optional)
     * @param apply  (optional)
     * @param r_delete  (optional)
     * @param action  (optional)
     * @param location  (optional)
     * @param propertylist  (optional)
     * @param eventTopics  (optional)
     * @param eventFilter  (optional)
     * @return OASComAdobeCqSocialNotificationsImpl
     * @throws OAS.ApiException if fails to make API call
     */
    public OASComAdobeCqSocialNotificationsImpl comAdobeCqSocialNotificationsImplNotificationsRouter(Map<String, Object> params) {
        List<OAS.Param> query = new List<OAS.Param>();

        // cast query params to verify their expected type
        query.addAll(client.makeParam('post', (Boolean) params.get('post')));
        query.addAll(client.makeParam('apply', (Boolean) params.get('apply')));
        query.addAll(client.makeParam('delete', (Boolean) params.get('r_delete')));
        query.addAll(client.makeParam('action', (String) params.get('action')));
        query.addAll(client.makeParam('$location', (String) params.get('location')));
        query.addAll(client.makeParam('propertylist', (List<String>) params.get('propertylist'), 'csv'));
        query.addAll(client.makeParam('event.topics', (String) params.get('eventTopics')));
        query.addAll(client.makeParam('event.filter', (String) params.get('eventFilter')));

        List<OAS.Param> form = new List<OAS.Param>();

        return (OASComAdobeCqSocialNotificationsImpl) client.invoke(
            'POST', '/system/console/configMgr/com.adobe.cq.social.notifications.impl.NotificationsRouter', '',
            query, form,
            new Map<String, Object>(),
            new Map<String, Object>(),
            new List<String>{ 'application/json', 'text/plain' },
            new List<String>(),
            new List<String> { 'aemAuth' },
            OASComAdobeCqSocialNotificationsImpl.class
        );
    }
    /**
     * 
     * 
     * @param post  (optional)
     * @param apply  (optional)
     * @param r_delete  (optional)
     * @param action  (optional)
     * @param location  (optional)
     * @param propertylist  (optional)
     * @param fieldWhitelist  (optional)
     * @param attachmentTypeBlacklist  (optional)
     * @return OASComAdobeCqSocialQnaClientEndpoint
     * @throws OAS.ApiException if fails to make API call
     */
    public OASComAdobeCqSocialQnaClientEndpoint comAdobeCqSocialQnaClientEndpointsImplQnaForumOperationsServic(Map<String, Object> params) {
        List<OAS.Param> query = new List<OAS.Param>();

        // cast query params to verify their expected type
        query.addAll(client.makeParam('post', (Boolean) params.get('post')));
        query.addAll(client.makeParam('apply', (Boolean) params.get('apply')));
        query.addAll(client.makeParam('delete', (Boolean) params.get('r_delete')));
        query.addAll(client.makeParam('action', (String) params.get('action')));
        query.addAll(client.makeParam('$location', (String) params.get('location')));
        query.addAll(client.makeParam('propertylist', (List<String>) params.get('propertylist'), 'csv'));
        query.addAll(client.makeParams('fieldWhitelist', (List<String>) params.get('fieldWhitelist')));
        query.addAll(client.makeParams('attachmentTypeBlacklist', (List<String>) params.get('attachmentTypeBlacklist')));

        List<OAS.Param> form = new List<OAS.Param>();

        return (OASComAdobeCqSocialQnaClientEndpoint) client.invoke(
            'POST', '/system/console/configMgr/com.adobe.cq.social.qna.client.endpoints.impl.QnaForumOperationsService', '',
            query, form,
            new Map<String, Object>(),
            new Map<String, Object>(),
            new List<String>{ 'application/json', 'text/plain' },
            new List<String>(),
            new List<String> { 'aemAuth' },
            OASComAdobeCqSocialQnaClientEndpoint.class
        );
    }
    /**
     * 
     * 
     * @param post  (optional)
     * @param apply  (optional)
     * @param r_delete  (optional)
     * @param action  (optional)
     * @param location  (optional)
     * @param propertylist  (optional)
     * @param cqSocialReportingAnalyticsPollingImporterInterval  (optional)
     * @param cqSocialReportingAnalyticsPollingImporterPageSize  (optional)
     * @return OASComAdobeCqSocialReportingAnalytic
     * @throws OAS.ApiException if fails to make API call
     */
    public OASComAdobeCqSocialReportingAnalytic comAdobeCqSocialReportingAnalyticsServicesImplAnalyticsReportI(Map<String, Object> params) {
        List<OAS.Param> query = new List<OAS.Param>();

        // cast query params to verify their expected type
        query.addAll(client.makeParam('post', (Boolean) params.get('post')));
        query.addAll(client.makeParam('apply', (Boolean) params.get('apply')));
        query.addAll(client.makeParam('delete', (Boolean) params.get('r_delete')));
        query.addAll(client.makeParam('action', (String) params.get('action')));
        query.addAll(client.makeParam('$location', (String) params.get('location')));
        query.addAll(client.makeParam('propertylist', (List<String>) params.get('propertylist'), 'csv'));
        query.addAll(client.makeParam('cq.social.reporting.analytics.polling.importer.interval', (Integer) params.get('cqSocialReportingAnalyticsPollingImporterInterval')));
        query.addAll(client.makeParam('cq.social.reporting.analytics.polling.importer.pageSize', (Integer) params.get('cqSocialReportingAnalyticsPollingImporterPageSize')));

        List<OAS.Param> form = new List<OAS.Param>();

        return (OASComAdobeCqSocialReportingAnalytic) client.invoke(
            'POST', '/system/console/configMgr/com.adobe.cq.social.reporting.analytics.services.impl.AnalyticsReportImporterServiceImpl', '',
            query, form,
            new Map<String, Object>(),
            new Map<String, Object>(),
            new List<String>{ 'application/json', 'text/plain' },
            new List<String>(),
            new List<String> { 'aemAuth' },
            OASComAdobeCqSocialReportingAnalytic.class
        );
    }
    /**
     * 
     * 
     * @param post  (optional)
     * @param apply  (optional)
     * @param r_delete  (optional)
     * @param action  (optional)
     * @param location  (optional)
     * @param propertylist  (optional)
     * @param reportFetchDelay  (optional)
     * @return OASComAdobeCqSocialReportingAnalytic
     * @throws OAS.ApiException if fails to make API call
     */
    public OASComAdobeCqSocialReportingAnalytic comAdobeCqSocialReportingAnalyticsServicesImplAnalyticsReportM(Map<String, Object> params) {
        List<OAS.Param> query = new List<OAS.Param>();

        // cast query params to verify their expected type
        query.addAll(client.makeParam('post', (Boolean) params.get('post')));
        query.addAll(client.makeParam('apply', (Boolean) params.get('apply')));
        query.addAll(client.makeParam('delete', (Boolean) params.get('r_delete')));
        query.addAll(client.makeParam('action', (String) params.get('action')));
        query.addAll(client.makeParam('$location', (String) params.get('location')));
        query.addAll(client.makeParam('propertylist', (List<String>) params.get('propertylist'), 'csv'));
        query.addAll(client.makeParam('report.fetch.delay', (Integer) params.get('reportFetchDelay')));

        List<OAS.Param> form = new List<OAS.Param>();

        return (OASComAdobeCqSocialReportingAnalytic) client.invoke(
            'POST', '/system/console/configMgr/com.adobe.cq.social.reporting.analytics.services.impl.AnalyticsReportManagementServiceImpl', '',
            query, form,
            new Map<String, Object>(),
            new Map<String, Object>(),
            new List<String>{ 'application/json', 'text/plain' },
            new List<String>(),
            new List<String> { 'aemAuth' },
            OASComAdobeCqSocialReportingAnalytic.class
        );
    }
    /**
     * 
     * 
     * @param post  (optional)
     * @param apply  (optional)
     * @param r_delete  (optional)
     * @param action  (optional)
     * @param location  (optional)
     * @param propertylist  (optional)
     * @param cqSocialConsoleAnalyticsSitesMapping  (optional)
     * @param priority  (optional)
     * @return OASComAdobeCqSocialReportingAnalytic
     * @throws OAS.ApiException if fails to make API call
     */
    public OASComAdobeCqSocialReportingAnalytic comAdobeCqSocialReportingAnalyticsServicesImplSiteTrendReportS(Map<String, Object> params) {
        List<OAS.Param> query = new List<OAS.Param>();

        // cast query params to verify their expected type
        query.addAll(client.makeParam('post', (Boolean) params.get('post')));
        query.addAll(client.makeParam('apply', (Boolean) params.get('apply')));
        query.addAll(client.makeParam('delete', (Boolean) params.get('r_delete')));
        query.addAll(client.makeParam('action', (String) params.get('action')));
        query.addAll(client.makeParam('$location', (String) params.get('location')));
        query.addAll(client.makeParam('propertylist', (List<String>) params.get('propertylist'), 'csv'));
        query.addAll(client.makeParams('cq.social.console.analytics.sites.mapping', (List<String>) params.get('cqSocialConsoleAnalyticsSitesMapping')));
        query.addAll(client.makeParam('priority', (Integer) params.get('priority')));

        List<OAS.Param> form = new List<OAS.Param>();

        return (OASComAdobeCqSocialReportingAnalytic) client.invoke(
            'POST', '/system/console/configMgr/com.adobe.cq.social.reporting.analytics.services.impl.SiteTrendReportSocialComponentFactory', '',
            query, form,
            new Map<String, Object>(),
            new Map<String, Object>(),
            new List<String>{ 'application/json', 'text/plain' },
            new List<String>(),
            new List<String> { 'aemAuth' },
            OASComAdobeCqSocialReportingAnalytic.class
        );
    }
    /**
     * 
     * 
     * @param post  (optional)
     * @param apply  (optional)
     * @param r_delete  (optional)
     * @param action  (optional)
     * @param location  (optional)
     * @param propertylist  (optional)
     * @param fieldWhitelist  (optional)
     * @param attachmentTypeBlacklist  (optional)
     * @return OASComAdobeCqSocialReviewClientEndpo
     * @throws OAS.ApiException if fails to make API call
     */
    public OASComAdobeCqSocialReviewClientEndpo comAdobeCqSocialReviewClientEndpointsImplReviewOperationsServi(Map<String, Object> params) {
        List<OAS.Param> query = new List<OAS.Param>();

        // cast query params to verify their expected type
        query.addAll(client.makeParam('post', (Boolean) params.get('post')));
        query.addAll(client.makeParam('apply', (Boolean) params.get('apply')));
        query.addAll(client.makeParam('delete', (Boolean) params.get('r_delete')));
        query.addAll(client.makeParam('action', (String) params.get('action')));
        query.addAll(client.makeParam('$location', (String) params.get('location')));
        query.addAll(client.makeParam('propertylist', (List<String>) params.get('propertylist'), 'csv'));
        query.addAll(client.makeParams('fieldWhitelist', (List<String>) params.get('fieldWhitelist')));
        query.addAll(client.makeParams('attachmentTypeBlacklist', (List<String>) params.get('attachmentTypeBlacklist')));

        List<OAS.Param> form = new List<OAS.Param>();

        return (OASComAdobeCqSocialReviewClientEndpo) client.invoke(
            'POST', '/system/console/configMgr/com.adobe.cq.social.review.client.endpoints.impl.ReviewOperationsService', '',
            query, form,
            new Map<String, Object>(),
            new Map<String, Object>(),
            new List<String>{ 'application/json', 'text/plain' },
            new List<String>(),
            new List<String> { 'aemAuth' },
            OASComAdobeCqSocialReviewClientEndpo.class
        );
    }
    /**
     * 
     * 
     * @param post  (optional)
     * @param apply  (optional)
     * @param r_delete  (optional)
     * @param action  (optional)
     * @param location  (optional)
     * @param propertylist  (optional)
     * @param slingServletSelectors  (optional)
     * @param slingServletExtensions  (optional)
     * @return OASComAdobeCqSocialScfCoreOperations
     * @throws OAS.ApiException if fails to make API call
     */
    public OASComAdobeCqSocialScfCoreOperations comAdobeCqSocialScfCoreOperationsImplSocialOperationsServlet(Map<String, Object> params) {
        List<OAS.Param> query = new List<OAS.Param>();

        // cast query params to verify their expected type
        query.addAll(client.makeParam('post', (Boolean) params.get('post')));
        query.addAll(client.makeParam('apply', (Boolean) params.get('apply')));
        query.addAll(client.makeParam('delete', (Boolean) params.get('r_delete')));
        query.addAll(client.makeParam('action', (String) params.get('action')));
        query.addAll(client.makeParam('$location', (String) params.get('location')));
        query.addAll(client.makeParam('propertylist', (List<String>) params.get('propertylist'), 'csv'));
        query.addAll(client.makeParam('sling.servlet.selectors', (String) params.get('slingServletSelectors')));
        query.addAll(client.makeParam('sling.servlet.extensions', (String) params.get('slingServletExtensions')));

        List<OAS.Param> form = new List<OAS.Param>();

        return (OASComAdobeCqSocialScfCoreOperations) client.invoke(
            'POST', '/system/console/configMgr/com.adobe.cq.social.scf.core.operations.impl.SocialOperationsServlet', '',
            query, form,
            new Map<String, Object>(),
            new Map<String, Object>(),
            new List<String>{ 'application/json', 'text/plain' },
            new List<String>(),
            new List<String> { 'aemAuth' },
            OASComAdobeCqSocialScfCoreOperations.class
        );
    }
    /**
     * 
     * 
     * @param post  (optional)
     * @param apply  (optional)
     * @param r_delete  (optional)
     * @param action  (optional)
     * @param location  (optional)
     * @param propertylist  (optional)
     * @param slingServletSelectors  (optional)
     * @param slingServletExtensions  (optional)
     * @return OASComAdobeCqSocialScfEndpointsImplD
     * @throws OAS.ApiException if fails to make API call
     */
    public OASComAdobeCqSocialScfEndpointsImplD comAdobeCqSocialScfEndpointsImplDefaultSocialGetServlet(Map<String, Object> params) {
        List<OAS.Param> query = new List<OAS.Param>();

        // cast query params to verify their expected type
        query.addAll(client.makeParam('post', (Boolean) params.get('post')));
        query.addAll(client.makeParam('apply', (Boolean) params.get('apply')));
        query.addAll(client.makeParam('delete', (Boolean) params.get('r_delete')));
        query.addAll(client.makeParam('action', (String) params.get('action')));
        query.addAll(client.makeParam('$location', (String) params.get('location')));
        query.addAll(client.makeParam('propertylist', (List<String>) params.get('propertylist'), 'csv'));
        query.addAll(client.makeParams('sling.servlet.selectors', (List<String>) params.get('slingServletSelectors')));
        query.addAll(client.makeParam('sling.servlet.extensions', (String) params.get('slingServletExtensions')));

        List<OAS.Param> form = new List<OAS.Param>();

        return (OASComAdobeCqSocialScfEndpointsImplD) client.invoke(
            'POST', '/system/console/configMgr/com.adobe.cq.social.scf.endpoints.impl.DefaultSocialGetServlet', '',
            query, form,
            new Map<String, Object>(),
            new Map<String, Object>(),
            new List<String>{ 'application/json', 'text/plain' },
            new List<String>(),
            new List<String> { 'aemAuth' },
            OASComAdobeCqSocialScfEndpointsImplD.class
        );
    }
    /**
     * 
     * 
     * @param post  (optional)
     * @param apply  (optional)
     * @param r_delete  (optional)
     * @param action  (optional)
     * @param location  (optional)
     * @param propertylist  (optional)
     * @param eventTopics  (optional)
     * @param eventFilter  (optional)
     * @return OASComAdobeCqSocialScoringImplScorin
     * @throws OAS.ApiException if fails to make API call
     */
    public OASComAdobeCqSocialScoringImplScorin comAdobeCqSocialScoringImplScoringEventListener(Map<String, Object> params) {
        List<OAS.Param> query = new List<OAS.Param>();

        // cast query params to verify their expected type
        query.addAll(client.makeParam('post', (Boolean) params.get('post')));
        query.addAll(client.makeParam('apply', (Boolean) params.get('apply')));
        query.addAll(client.makeParam('delete', (Boolean) params.get('r_delete')));
        query.addAll(client.makeParam('action', (String) params.get('action')));
        query.addAll(client.makeParam('$location', (String) params.get('location')));
        query.addAll(client.makeParam('propertylist', (List<String>) params.get('propertylist'), 'csv'));
        query.addAll(client.makeParam('event.topics', (String) params.get('eventTopics')));
        query.addAll(client.makeParam('event.filter', (String) params.get('eventFilter')));

        List<OAS.Param> form = new List<OAS.Param>();

        return (OASComAdobeCqSocialScoringImplScorin) client.invoke(
            'POST', '/system/console/configMgr/com.adobe.cq.social.scoring.impl.ScoringEventListener', '',
            query, form,
            new Map<String, Object>(),
            new Map<String, Object>(),
            new List<String>{ 'application/json', 'text/plain' },
            new List<String>(),
            new List<String> { 'aemAuth' },
            OASComAdobeCqSocialScoringImplScorin.class
        );
    }
    /**
     * 
     * 
     * @param post  (optional)
     * @param apply  (optional)
     * @param r_delete  (optional)
     * @param action  (optional)
     * @param location  (optional)
     * @param propertylist  (optional)
     * @param enableFallback  (optional)
     * @return OASComAdobeCqSocialServiceusersInter
     * @throws OAS.ApiException if fails to make API call
     */
    public OASComAdobeCqSocialServiceusersInter comAdobeCqSocialServiceusersInternalImplServiceUserWrapperImpl(Map<String, Object> params) {
        List<OAS.Param> query = new List<OAS.Param>();

        // cast query params to verify their expected type
        query.addAll(client.makeParam('post', (Boolean) params.get('post')));
        query.addAll(client.makeParam('apply', (Boolean) params.get('apply')));
        query.addAll(client.makeParam('delete', (Boolean) params.get('r_delete')));
        query.addAll(client.makeParam('action', (String) params.get('action')));
        query.addAll(client.makeParam('$location', (String) params.get('location')));
        query.addAll(client.makeParam('propertylist', (List<String>) params.get('propertylist'), 'csv'));
        query.addAll(client.makeParam('enableFallback', (Boolean) params.get('enableFallback')));

        List<OAS.Param> form = new List<OAS.Param>();

        return (OASComAdobeCqSocialServiceusersInter) client.invoke(
            'POST', '/system/console/configMgr/com.adobe.cq.social.serviceusers.internal.impl.ServiceUserWrapperImpl', '',
            query, form,
            new Map<String, Object>(),
            new Map<String, Object>(),
            new List<String>{ 'application/json', 'text/plain' },
            new List<String>(),
            new List<String> { 'aemAuth' },
            OASComAdobeCqSocialServiceusersInter.class
        );
    }
    /**
     * 
     * 
     * @param post  (optional)
     * @param apply  (optional)
     * @param r_delete  (optional)
     * @param action  (optional)
     * @param location  (optional)
     * @param propertylist  (optional)
     * @param fieldWhitelist  (optional)
     * @param sitePathFilters  (optional)
     * @param sitePackageGroup  (optional)
     * @return OASComAdobeCqSocialSiteEndpointsImpl
     * @throws OAS.ApiException if fails to make API call
     */
    public OASComAdobeCqSocialSiteEndpointsImpl comAdobeCqSocialSiteEndpointsImplSiteOperationService(Map<String, Object> params) {
        List<OAS.Param> query = new List<OAS.Param>();

        // cast query params to verify their expected type
        query.addAll(client.makeParam('post', (Boolean) params.get('post')));
        query.addAll(client.makeParam('apply', (Boolean) params.get('apply')));
        query.addAll(client.makeParam('delete', (Boolean) params.get('r_delete')));
        query.addAll(client.makeParam('action', (String) params.get('action')));
        query.addAll(client.makeParam('$location', (String) params.get('location')));
        query.addAll(client.makeParam('propertylist', (List<String>) params.get('propertylist'), 'csv'));
        query.addAll(client.makeParams('fieldWhitelist', (List<String>) params.get('fieldWhitelist')));
        query.addAll(client.makeParams('sitePathFilters', (List<String>) params.get('sitePathFilters')));
        query.addAll(client.makeParam('sitePackageGroup', (String) params.get('sitePackageGroup')));

        List<OAS.Param> form = new List<OAS.Param>();

        return (OASComAdobeCqSocialSiteEndpointsImpl) client.invoke(
            'POST', '/system/console/configMgr/com.adobe.cq.social.site.endpoints.impl.SiteOperationService', '',
            query, form,
            new Map<String, Object>(),
            new Map<String, Object>(),
            new List<String>{ 'application/json', 'text/plain' },
            new List<String>(),
            new List<String> { 'aemAuth' },
            OASComAdobeCqSocialSiteEndpointsImpl.class
        );
    }
    /**
     * 
     * 
     * @param post  (optional)
     * @param apply  (optional)
     * @param r_delete  (optional)
     * @param action  (optional)
     * @param location  (optional)
     * @param propertylist  (optional)
     * @param cqSocialConsoleAnalyticsComponents  (optional)
     * @return OASComAdobeCqSocialSiteImplAnalytics
     * @throws OAS.ApiException if fails to make API call
     */
    public OASComAdobeCqSocialSiteImplAnalytics comAdobeCqSocialSiteImplAnalyticsComponentConfigurationServiceIm(Map<String, Object> params) {
        List<OAS.Param> query = new List<OAS.Param>();

        // cast query params to verify their expected type
        query.addAll(client.makeParam('post', (Boolean) params.get('post')));
        query.addAll(client.makeParam('apply', (Boolean) params.get('apply')));
        query.addAll(client.makeParam('delete', (Boolean) params.get('r_delete')));
        query.addAll(client.makeParam('action', (String) params.get('action')));
        query.addAll(client.makeParam('$location', (String) params.get('location')));
        query.addAll(client.makeParam('propertylist', (List<String>) params.get('propertylist'), 'csv'));
        query.addAll(client.makeParams('cq.social.console.analytics.components', (List<String>) params.get('cqSocialConsoleAnalyticsComponents')));

        List<OAS.Param> form = new List<OAS.Param>();

        return (OASComAdobeCqSocialSiteImplAnalytics) client.invoke(
            'POST', '/system/console/configMgr/com.adobe.cq.social.site.impl.AnalyticsComponentConfigurationServiceImpl', '',
            query, form,
            new Map<String, Object>(),
            new Map<String, Object>(),
            new List<String>{ 'application/json', 'text/plain' },
            new List<String>(),
            new List<String> { 'aemAuth' },
            OASComAdobeCqSocialSiteImplAnalytics.class
        );
    }
    /**
     * 
     * 
     * @param post  (optional)
     * @param apply  (optional)
     * @param r_delete  (optional)
     * @param action  (optional)
     * @param location  (optional)
     * @param propertylist  (optional)
     * @param componentsUsingTags  (optional)
     * @return OASComAdobeCqSocialSiteImplSiteConfi
     * @throws OAS.ApiException if fails to make API call
     */
    public OASComAdobeCqSocialSiteImplSiteConfi comAdobeCqSocialSiteImplSiteConfiguratorImpl(Map<String, Object> params) {
        List<OAS.Param> query = new List<OAS.Param>();

        // cast query params to verify their expected type
        query.addAll(client.makeParam('post', (Boolean) params.get('post')));
        query.addAll(client.makeParam('apply', (Boolean) params.get('apply')));
        query.addAll(client.makeParam('delete', (Boolean) params.get('r_delete')));
        query.addAll(client.makeParam('action', (String) params.get('action')));
        query.addAll(client.makeParam('$location', (String) params.get('location')));
        query.addAll(client.makeParam('propertylist', (List<String>) params.get('propertylist'), 'csv'));
        query.addAll(client.makeParams('componentsUsingTags', (List<String>) params.get('componentsUsingTags')));

        List<OAS.Param> form = new List<OAS.Param>();

        return (OASComAdobeCqSocialSiteImplSiteConfi) client.invoke(
            'POST', '/system/console/configMgr/com.adobe.cq.social.site.impl.SiteConfiguratorImpl', '',
            query, form,
            new Map<String, Object>(),
            new Map<String, Object>(),
            new List<String>{ 'application/json', 'text/plain' },
            new List<String>(),
            new List<String> { 'aemAuth' },
            OASComAdobeCqSocialSiteImplSiteConfi.class
        );
    }
    /**
     * 
     * 
     * @param post  (optional)
     * @param apply  (optional)
     * @param r_delete  (optional)
     * @param action  (optional)
     * @param location  (optional)
     * @param propertylist  (optional)
     * @param srpType  (optional)
     * @return OASComAdobeCqSocialSrpImplSocialSolr
     * @throws OAS.ApiException if fails to make API call
     */
    public OASComAdobeCqSocialSrpImplSocialSolr comAdobeCqSocialSrpImplSocialSolrConnector(Map<String, Object> params) {
        List<OAS.Param> query = new List<OAS.Param>();

        // cast query params to verify their expected type
        query.addAll(client.makeParam('post', (Boolean) params.get('post')));
        query.addAll(client.makeParam('apply', (Boolean) params.get('apply')));
        query.addAll(client.makeParam('delete', (Boolean) params.get('r_delete')));
        query.addAll(client.makeParam('action', (String) params.get('action')));
        query.addAll(client.makeParam('$location', (String) params.get('location')));
        query.addAll(client.makeParam('propertylist', (List<String>) params.get('propertylist'), 'csv'));
        query.addAll(client.makeParam('srp.type', (String) params.get('srpType')));

        List<OAS.Param> form = new List<OAS.Param>();

        return (OASComAdobeCqSocialSrpImplSocialSolr) client.invoke(
            'POST', '/system/console/configMgr/com.adobe.cq.social.srp.impl.SocialSolrConnector', '',
            query, form,
            new Map<String, Object>(),
            new Map<String, Object>(),
            new List<String>{ 'application/json', 'text/plain' },
            new List<String>(),
            new List<String> { 'aemAuth' },
            OASComAdobeCqSocialSrpImplSocialSolr.class
        );
    }
    /**
     * 
     * 
     * @param post  (optional)
     * @param apply  (optional)
     * @param r_delete  (optional)
     * @param action  (optional)
     * @param location  (optional)
     * @param propertylist  (optional)
     * @param enabled  (optional)
     * @param agentName  (optional)
     * @param diffPath  (optional)
     * @param propertyNames  (optional)
     * @return OASComAdobeCqSocialSyncImplDiffChang
     * @throws OAS.ApiException if fails to make API call
     */
    public OASComAdobeCqSocialSyncImplDiffChang comAdobeCqSocialSyncImplDiffChangesObserver(Map<String, Object> params) {
        List<OAS.Param> query = new List<OAS.Param>();

        // cast query params to verify their expected type
        query.addAll(client.makeParam('post', (Boolean) params.get('post')));
        query.addAll(client.makeParam('apply', (Boolean) params.get('apply')));
        query.addAll(client.makeParam('delete', (Boolean) params.get('r_delete')));
        query.addAll(client.makeParam('action', (String) params.get('action')));
        query.addAll(client.makeParam('$location', (String) params.get('location')));
        query.addAll(client.makeParam('propertylist', (List<String>) params.get('propertylist'), 'csv'));
        query.addAll(client.makeParam('enabled', (Boolean) params.get('enabled')));
        query.addAll(client.makeParam('agentName', (String) params.get('agentName')));
        query.addAll(client.makeParam('diffPath', (String) params.get('diffPath')));
        query.addAll(client.makeParam('propertyNames', (String) params.get('propertyNames')));

        List<OAS.Param> form = new List<OAS.Param>();

        return (OASComAdobeCqSocialSyncImplDiffChang) client.invoke(
            'POST', '/system/console/configMgr/com.adobe.cq.social.sync.impl.DiffChangesObserver', '',
            query, form,
            new Map<String, Object>(),
            new Map<String, Object>(),
            new List<String>{ 'application/json', 'text/plain' },
            new List<String>(),
            new List<String> { 'aemAuth' },
            OASComAdobeCqSocialSyncImplDiffChang.class
        );
    }
    /**
     * 
     * 
     * @param post  (optional)
     * @param apply  (optional)
     * @param r_delete  (optional)
     * @param action  (optional)
     * @param location  (optional)
     * @param propertylist  (optional)
     * @param nodetypes  (optional)
     * @param ignorableprops  (optional)
     * @param ignorablenodes  (optional)
     * @param enabled  (optional)
     * @param distfolders  (optional)
     * @return OASComAdobeCqSocialSyncImplGroupSync
     * @throws OAS.ApiException if fails to make API call
     */
    public OASComAdobeCqSocialSyncImplGroupSync comAdobeCqSocialSyncImplGroupSyncListenerImpl(Map<String, Object> params) {
        List<OAS.Param> query = new List<OAS.Param>();

        // cast query params to verify their expected type
        query.addAll(client.makeParam('post', (Boolean) params.get('post')));
        query.addAll(client.makeParam('apply', (Boolean) params.get('apply')));
        query.addAll(client.makeParam('delete', (Boolean) params.get('r_delete')));
        query.addAll(client.makeParam('action', (String) params.get('action')));
        query.addAll(client.makeParam('$location', (String) params.get('location')));
        query.addAll(client.makeParam('propertylist', (List<String>) params.get('propertylist'), 'csv'));
        query.addAll(client.makeParams('nodetypes', (List<String>) params.get('nodetypes')));
        query.addAll(client.makeParams('ignorableprops', (List<String>) params.get('ignorableprops')));
        query.addAll(client.makeParam('ignorablenodes', (String) params.get('ignorablenodes')));
        query.addAll(client.makeParam('enabled', (Boolean) params.get('enabled')));
        query.addAll(client.makeParam('distfolders', (String) params.get('distfolders')));

        List<OAS.Param> form = new List<OAS.Param>();

        return (OASComAdobeCqSocialSyncImplGroupSync) client.invoke(
            'POST', '/system/console/configMgr/com.adobe.cq.social.sync.impl.GroupSyncListenerImpl', '',
            query, form,
            new Map<String, Object>(),
            new Map<String, Object>(),
            new List<String>{ 'application/json', 'text/plain' },
            new List<String>(),
            new List<String> { 'aemAuth' },
            OASComAdobeCqSocialSyncImplGroupSync.class
        );
    }
    /**
     * 
     * 
     * @param post  (optional)
     * @param apply  (optional)
     * @param r_delete  (optional)
     * @param action  (optional)
     * @param location  (optional)
     * @param propertylist  (optional)
     * @param activeRunModes  (optional)
     * @return OASComAdobeCqSocialSyncImplPublisher
     * @throws OAS.ApiException if fails to make API call
     */
    public OASComAdobeCqSocialSyncImplPublisher comAdobeCqSocialSyncImplPublisherSyncServiceImpl(Map<String, Object> params) {
        List<OAS.Param> query = new List<OAS.Param>();

        // cast query params to verify their expected type
        query.addAll(client.makeParam('post', (Boolean) params.get('post')));
        query.addAll(client.makeParam('apply', (Boolean) params.get('apply')));
        query.addAll(client.makeParam('delete', (Boolean) params.get('r_delete')));
        query.addAll(client.makeParam('action', (String) params.get('action')));
        query.addAll(client.makeParam('$location', (String) params.get('location')));
        query.addAll(client.makeParam('propertylist', (List<String>) params.get('propertylist'), 'csv'));
        query.addAll(client.makeParams('activeRunModes', (List<String>) params.get('activeRunModes')));

        List<OAS.Param> form = new List<OAS.Param>();

        return (OASComAdobeCqSocialSyncImplPublisher) client.invoke(
            'POST', '/system/console/configMgr/com.adobe.cq.social.sync.impl.PublisherSyncServiceImpl', '',
            query, form,
            new Map<String, Object>(),
            new Map<String, Object>(),
            new List<String>{ 'application/json', 'text/plain' },
            new List<String>(),
            new List<String> { 'aemAuth' },
            OASComAdobeCqSocialSyncImplPublisher.class
        );
    }
    /**
     * 
     * 
     * @param post  (optional)
     * @param apply  (optional)
     * @param r_delete  (optional)
     * @param action  (optional)
     * @param location  (optional)
     * @param propertylist  (optional)
     * @param nodetypes  (optional)
     * @param ignorableprops  (optional)
     * @param ignorablenodes  (optional)
     * @param enabled  (optional)
     * @param distfolders  (optional)
     * @return OASComAdobeCqSocialSyncImplUserSyncL
     * @throws OAS.ApiException if fails to make API call
     */
    public OASComAdobeCqSocialSyncImplUserSyncL comAdobeCqSocialSyncImplUserSyncListenerImpl(Map<String, Object> params) {
        List<OAS.Param> query = new List<OAS.Param>();

        // cast query params to verify their expected type
        query.addAll(client.makeParam('post', (Boolean) params.get('post')));
        query.addAll(client.makeParam('apply', (Boolean) params.get('apply')));
        query.addAll(client.makeParam('delete', (Boolean) params.get('r_delete')));
        query.addAll(client.makeParam('action', (String) params.get('action')));
        query.addAll(client.makeParam('$location', (String) params.get('location')));
        query.addAll(client.makeParam('propertylist', (List<String>) params.get('propertylist'), 'csv'));
        query.addAll(client.makeParams('nodetypes', (List<String>) params.get('nodetypes')));
        query.addAll(client.makeParams('ignorableprops', (List<String>) params.get('ignorableprops')));
        query.addAll(client.makeParams('ignorablenodes', (List<String>) params.get('ignorablenodes')));
        query.addAll(client.makeParam('enabled', (Boolean) params.get('enabled')));
        query.addAll(client.makeParams('distfolders', (List<String>) params.get('distfolders')));

        List<OAS.Param> form = new List<OAS.Param>();

        return (OASComAdobeCqSocialSyncImplUserSyncL) client.invoke(
            'POST', '/system/console/configMgr/com.adobe.cq.social.sync.impl.UserSyncListenerImpl', '',
            query, form,
            new Map<String, Object>(),
            new Map<String, Object>(),
            new List<String>{ 'application/json', 'text/plain' },
            new List<String>(),
            new List<String> { 'aemAuth' },
            OASComAdobeCqSocialSyncImplUserSyncL.class
        );
    }
    /**
     * 
     * 
     * @param post  (optional)
     * @param apply  (optional)
     * @param r_delete  (optional)
     * @param action  (optional)
     * @param location  (optional)
     * @param propertylist  (optional)
     * @param translateLanguage  (optional)
     * @param translateDisplay  (optional)
     * @param translateAttribution  (optional)
     * @param translateCaching  (optional)
     * @param translateSmartRendering  (optional)
     * @param translateCachingDuration  (optional)
     * @param translateSessionSaveInterval  (optional)
     * @param translateSessionSaveBatchLimit  (optional)
     * @return OASComAdobeCqSocialTranslationImplTr
     * @throws OAS.ApiException if fails to make API call
     */
    public OASComAdobeCqSocialTranslationImplTr comAdobeCqSocialTranslationImplTranslationServiceConfigManager(Map<String, Object> params) {
        List<OAS.Param> query = new List<OAS.Param>();

        // cast query params to verify their expected type
        query.addAll(client.makeParam('post', (Boolean) params.get('post')));
        query.addAll(client.makeParam('apply', (Boolean) params.get('apply')));
        query.addAll(client.makeParam('delete', (Boolean) params.get('r_delete')));
        query.addAll(client.makeParam('action', (String) params.get('action')));
        query.addAll(client.makeParam('$location', (String) params.get('location')));
        query.addAll(client.makeParam('propertylist', (List<String>) params.get('propertylist'), 'csv'));
        query.addAll(client.makeParam('translate.language', (String) params.get('translateLanguage')));
        query.addAll(client.makeParam('translate.display', (String) params.get('translateDisplay')));
        query.addAll(client.makeParam('translate.attribution', (Boolean) params.get('translateAttribution')));
        query.addAll(client.makeParam('translate.caching', (String) params.get('translateCaching')));
        query.addAll(client.makeParam('translate.smart.rendering', (String) params.get('translateSmartRendering')));
        query.addAll(client.makeParam('translate.caching.duration', (String) params.get('translateCachingDuration')));
        query.addAll(client.makeParam('translate.session.save.interval', (String) params.get('translateSessionSaveInterval')));
        query.addAll(client.makeParam('translate.session.save.batchLimit', (String) params.get('translateSessionSaveBatchLimit')));

        List<OAS.Param> form = new List<OAS.Param>();

        return (OASComAdobeCqSocialTranslationImplTr) client.invoke(
            'POST', '/system/console/configMgr/com.adobe.cq.social.translation.impl.TranslationServiceConfigManager', '',
            query, form,
            new Map<String, Object>(),
            new Map<String, Object>(),
            new List<String>{ 'application/json', 'text/plain' },
            new List<String>(),
            new List<String> { 'aemAuth' },
            OASComAdobeCqSocialTranslationImplTr.class
        );
    }
    /**
     * 
     * 
     * @param post  (optional)
     * @param apply  (optional)
     * @param r_delete  (optional)
     * @param action  (optional)
     * @param location  (optional)
     * @param propertylist  (optional)
     * @param eventTopics  (optional)
     * @param eventFilter  (optional)
     * @param translateListenerType  (optional)
     * @param translatePropertyList  (optional)
     * @param poolSize  (optional)
     * @param maxPoolSize  (optional)
     * @param queueSize  (optional)
     * @param keepAliveTime  (optional)
     * @return OASComAdobeCqSocialTranslationImplUG
     * @throws OAS.ApiException if fails to make API call
     */
    public OASComAdobeCqSocialTranslationImplUG comAdobeCqSocialTranslationImplUGCLanguageDetector(Map<String, Object> params) {
        List<OAS.Param> query = new List<OAS.Param>();

        // cast query params to verify their expected type
        query.addAll(client.makeParam('post', (Boolean) params.get('post')));
        query.addAll(client.makeParam('apply', (Boolean) params.get('apply')));
        query.addAll(client.makeParam('delete', (Boolean) params.get('r_delete')));
        query.addAll(client.makeParam('action', (String) params.get('action')));
        query.addAll(client.makeParam('$location', (String) params.get('location')));
        query.addAll(client.makeParam('propertylist', (List<String>) params.get('propertylist'), 'csv'));
        query.addAll(client.makeParam('event.topics', (String) params.get('eventTopics')));
        query.addAll(client.makeParam('event.filter', (String) params.get('eventFilter')));
        query.addAll(client.makeParams('translate.listener.type', (List<String>) params.get('translateListenerType')));
        query.addAll(client.makeParams('translate.property.list', (List<String>) params.get('translatePropertyList')));
        query.addAll(client.makeParam('poolSize', (Integer) params.get('poolSize')));
        query.addAll(client.makeParam('maxPoolSize', (Integer) params.get('maxPoolSize')));
        query.addAll(client.makeParam('queueSize', (Integer) params.get('queueSize')));
        query.addAll(client.makeParam('keepAliveTime', (Integer) params.get('keepAliveTime')));

        List<OAS.Param> form = new List<OAS.Param>();

        return (OASComAdobeCqSocialTranslationImplUG) client.invoke(
            'POST', '/system/console/configMgr/com.adobe.cq.social.translation.impl.UGCLanguageDetector', '',
            query, form,
            new Map<String, Object>(),
            new Map<String, Object>(),
            new List<String>{ 'application/json', 'text/plain' },
            new List<String>(),
            new List<String> { 'aemAuth' },
            OASComAdobeCqSocialTranslationImplUG.class
        );
    }
    /**
     * 
     * 
     * @param post  (optional)
     * @param apply  (optional)
     * @param r_delete  (optional)
     * @param action  (optional)
     * @param location  (optional)
     * @param propertylist  (optional)
     * @param threadPoolSize  (optional)
     * @param delayTime  (optional)
     * @param workerSleepTime  (optional)
     * @return OASComAdobeCqSocialUgcbaseDispatcher
     * @throws OAS.ApiException if fails to make API call
     */
    public OASComAdobeCqSocialUgcbaseDispatcher comAdobeCqSocialUgcbaseDispatcherImplFlushServiceImpl(Map<String, Object> params) {
        List<OAS.Param> query = new List<OAS.Param>();

        // cast query params to verify their expected type
        query.addAll(client.makeParam('post', (Boolean) params.get('post')));
        query.addAll(client.makeParam('apply', (Boolean) params.get('apply')));
        query.addAll(client.makeParam('delete', (Boolean) params.get('r_delete')));
        query.addAll(client.makeParam('action', (String) params.get('action')));
        query.addAll(client.makeParam('$location', (String) params.get('location')));
        query.addAll(client.makeParam('propertylist', (List<String>) params.get('propertylist'), 'csv'));
        query.addAll(client.makeParam('threadPoolSize', (Integer) params.get('threadPoolSize')));
        query.addAll(client.makeParam('delayTime', (Integer) params.get('delayTime')));
        query.addAll(client.makeParam('workerSleepTime', (Integer) params.get('workerSleepTime')));

        List<OAS.Param> form = new List<OAS.Param>();

        return (OASComAdobeCqSocialUgcbaseDispatcher) client.invoke(
            'POST', '/system/console/configMgr/com.adobe.cq.social.ugcbase.dispatcher.impl.FlushServiceImpl', '',
            query, form,
            new Map<String, Object>(),
            new Map<String, Object>(),
            new List<String>{ 'application/json', 'text/plain' },
            new List<String>(),
            new List<String> { 'aemAuth' },
            OASComAdobeCqSocialUgcbaseDispatcher.class
        );
    }
    /**
     * 
     * 
     * @param post  (optional)
     * @param apply  (optional)
     * @param r_delete  (optional)
     * @param action  (optional)
     * @param location  (optional)
     * @param propertylist  (optional)
     * @param poolSize  (optional)
     * @param maxPoolSize  (optional)
     * @param queueSize  (optional)
     * @param keepAliveTime  (optional)
     * @return OASComAdobeCqSocialUgcbaseImplAysncR
     * @throws OAS.ApiException if fails to make API call
     */
    public OASComAdobeCqSocialUgcbaseImplAysncR comAdobeCqSocialUgcbaseImplAysncReverseReplicatorImpl(Map<String, Object> params) {
        List<OAS.Param> query = new List<OAS.Param>();

        // cast query params to verify their expected type
        query.addAll(client.makeParam('post', (Boolean) params.get('post')));
        query.addAll(client.makeParam('apply', (Boolean) params.get('apply')));
        query.addAll(client.makeParam('delete', (Boolean) params.get('r_delete')));
        query.addAll(client.makeParam('action', (String) params.get('action')));
        query.addAll(client.makeParam('$location', (String) params.get('location')));
        query.addAll(client.makeParam('propertylist', (List<String>) params.get('propertylist'), 'csv'));
        query.addAll(client.makeParam('poolSize', (Integer) params.get('poolSize')));
        query.addAll(client.makeParam('maxPoolSize', (Integer) params.get('maxPoolSize')));
        query.addAll(client.makeParam('queueSize', (Integer) params.get('queueSize')));
        query.addAll(client.makeParam('keepAliveTime', (Integer) params.get('keepAliveTime')));

        List<OAS.Param> form = new List<OAS.Param>();

        return (OASComAdobeCqSocialUgcbaseImplAysncR) client.invoke(
            'POST', '/system/console/configMgr/com.adobe.cq.social.ugcbase.impl.AysncReverseReplicatorImpl', '',
            query, form,
            new Map<String, Object>(),
            new Map<String, Object>(),
            new List<String>{ 'application/json', 'text/plain' },
            new List<String>(),
            new List<String> { 'aemAuth' },
            OASComAdobeCqSocialUgcbaseImplAysncR.class
        );
    }
    /**
     * 
     * 
     * @param post  (optional)
     * @param apply  (optional)
     * @param r_delete  (optional)
     * @param action  (optional)
     * @param location  (optional)
     * @param propertylist  (optional)
     * @param isPrimaryPublisher  (optional)
     * @return OASComAdobeCqSocialUgcbaseImplPublis
     * @throws OAS.ApiException if fails to make API call
     */
    public OASComAdobeCqSocialUgcbaseImplPublis comAdobeCqSocialUgcbaseImplPublisherConfigurationImpl(Map<String, Object> params) {
        List<OAS.Param> query = new List<OAS.Param>();

        // cast query params to verify their expected type
        query.addAll(client.makeParam('post', (Boolean) params.get('post')));
        query.addAll(client.makeParam('apply', (Boolean) params.get('apply')));
        query.addAll(client.makeParam('delete', (Boolean) params.get('r_delete')));
        query.addAll(client.makeParam('action', (String) params.get('action')));
        query.addAll(client.makeParam('$location', (String) params.get('location')));
        query.addAll(client.makeParam('propertylist', (List<String>) params.get('propertylist'), 'csv'));
        query.addAll(client.makeParam('isPrimaryPublisher', (Boolean) params.get('isPrimaryPublisher')));

        List<OAS.Param> form = new List<OAS.Param>();

        return (OASComAdobeCqSocialUgcbaseImplPublis) client.invoke(
            'POST', '/system/console/configMgr/com.adobe.cq.social.ugcbase.impl.PublisherConfigurationImpl', '',
            query, form,
            new Map<String, Object>(),
            new Map<String, Object>(),
            new List<String>{ 'application/json', 'text/plain' },
            new List<String>(),
            new List<String> { 'aemAuth' },
            OASComAdobeCqSocialUgcbaseImplPublis.class
        );
    }
    /**
     * 
     * 
     * @param post  (optional)
     * @param apply  (optional)
     * @param r_delete  (optional)
     * @param action  (optional)
     * @param location  (optional)
     * @param propertylist  (optional)
     * @param legacyCloudUGCPathMapping  (optional)
     * @return OASComAdobeCqSocialUgcbaseImplSocial
     * @throws OAS.ApiException if fails to make API call
     */
    public OASComAdobeCqSocialUgcbaseImplSocial comAdobeCqSocialUgcbaseImplSocialUtilsImpl(Map<String, Object> params) {
        List<OAS.Param> query = new List<OAS.Param>();

        // cast query params to verify their expected type
        query.addAll(client.makeParam('post', (Boolean) params.get('post')));
        query.addAll(client.makeParam('apply', (Boolean) params.get('apply')));
        query.addAll(client.makeParam('delete', (Boolean) params.get('r_delete')));
        query.addAll(client.makeParam('action', (String) params.get('action')));
        query.addAll(client.makeParam('$location', (String) params.get('location')));
        query.addAll(client.makeParam('propertylist', (List<String>) params.get('propertylist'), 'csv'));
        query.addAll(client.makeParam('legacyCloudUGCPathMapping', (Boolean) params.get('legacyCloudUGCPathMapping')));

        List<OAS.Param> form = new List<OAS.Param>();

        return (OASComAdobeCqSocialUgcbaseImplSocial) client.invoke(
            'POST', '/system/console/configMgr/com.adobe.cq.social.ugcbase.impl.SocialUtilsImpl', '',
            query, form,
            new Map<String, Object>(),
            new Map<String, Object>(),
            new List<String>{ 'application/json', 'text/plain' },
            new List<String>(),
            new List<String> { 'aemAuth' },
            OASComAdobeCqSocialUgcbaseImplSocial.class
        );
    }
    /**
     * 
     * 
     * @param post  (optional)
     * @param apply  (optional)
     * @param r_delete  (optional)
     * @param action  (optional)
     * @param location  (optional)
     * @param propertylist  (optional)
     * @param automoderationSequence  (optional)
     * @param automoderationOnfailurestop  (optional)
     * @return OASComAdobeCqSocialUgcbaseModeration
     * @throws OAS.ApiException if fails to make API call
     */
    public OASComAdobeCqSocialUgcbaseModeration comAdobeCqSocialUgcbaseModerationImplAutoModerationImpl(Map<String, Object> params) {
        List<OAS.Param> query = new List<OAS.Param>();

        // cast query params to verify their expected type
        query.addAll(client.makeParam('post', (Boolean) params.get('post')));
        query.addAll(client.makeParam('apply', (Boolean) params.get('apply')));
        query.addAll(client.makeParam('delete', (Boolean) params.get('r_delete')));
        query.addAll(client.makeParam('action', (String) params.get('action')));
        query.addAll(client.makeParam('$location', (String) params.get('location')));
        query.addAll(client.makeParam('propertylist', (List<String>) params.get('propertylist'), 'csv'));
        query.addAll(client.makeParams('automoderation.sequence', (List<String>) params.get('automoderationSequence')));
        query.addAll(client.makeParam('automoderation.onfailurestop', (Boolean) params.get('automoderationOnfailurestop')));

        List<OAS.Param> form = new List<OAS.Param>();

        return (OASComAdobeCqSocialUgcbaseModeration) client.invoke(
            'POST', '/system/console/configMgr/com.adobe.cq.social.ugcbase.moderation.impl.AutoModerationImpl', '',
            query, form,
            new Map<String, Object>(),
            new Map<String, Object>(),
            new List<String>{ 'application/json', 'text/plain' },
            new List<String>(),
            new List<String> { 'aemAuth' },
            OASComAdobeCqSocialUgcbaseModeration.class
        );
    }
    /**
     * 
     * 
     * @param post  (optional)
     * @param apply  (optional)
     * @param r_delete  (optional)
     * @param action  (optional)
     * @param location  (optional)
     * @param propertylist  (optional)
     * @param watchwordsPositive  (optional)
     * @param watchwordsNegative  (optional)
     * @param watchwordsPath  (optional)
     * @param sentimentPath  (optional)
     * @return OASComAdobeCqSocialUgcbaseModeration
     * @throws OAS.ApiException if fails to make API call
     */
    public OASComAdobeCqSocialUgcbaseModeration comAdobeCqSocialUgcbaseModerationImplSentimentProcess(Map<String, Object> params) {
        List<OAS.Param> query = new List<OAS.Param>();

        // cast query params to verify their expected type
        query.addAll(client.makeParam('post', (Boolean) params.get('post')));
        query.addAll(client.makeParam('apply', (Boolean) params.get('apply')));
        query.addAll(client.makeParam('delete', (Boolean) params.get('r_delete')));
        query.addAll(client.makeParam('action', (String) params.get('action')));
        query.addAll(client.makeParam('$location', (String) params.get('location')));
        query.addAll(client.makeParam('propertylist', (List<String>) params.get('propertylist'), 'csv'));
        query.addAll(client.makeParams('watchwords.positive', (List<String>) params.get('watchwordsPositive')));
        query.addAll(client.makeParams('watchwords.negative', (List<String>) params.get('watchwordsNegative')));
        query.addAll(client.makeParam('watchwords.path', (String) params.get('watchwordsPath')));
        query.addAll(client.makeParam('sentiment.path', (String) params.get('sentimentPath')));

        List<OAS.Param> form = new List<OAS.Param>();

        return (OASComAdobeCqSocialUgcbaseModeration) client.invoke(
            'POST', '/system/console/configMgr/com.adobe.cq.social.ugcbase.moderation.impl.SentimentProcess', '',
            query, form,
            new Map<String, Object>(),
            new Map<String, Object>(),
            new List<String>{ 'application/json', 'text/plain' },
            new List<String>(),
            new List<String> { 'aemAuth' },
            OASComAdobeCqSocialUgcbaseModeration.class
        );
    }
    /**
     * 
     * 
     * @param post  (optional)
     * @param apply  (optional)
     * @param r_delete  (optional)
     * @param action  (optional)
     * @param location  (optional)
     * @param propertylist  (optional)
     * @param defaultAttachmentTypeBlacklist  (optional)
     * @param baselineAttachmentTypeBlacklist  (optional)
     * @return OASComAdobeCqSocialUgcbaseSecurityIm
     * @throws OAS.ApiException if fails to make API call
     */
    public OASComAdobeCqSocialUgcbaseSecurityIm comAdobeCqSocialUgcbaseSecurityImplDefaultAttachmentTypeBlackli(Map<String, Object> params) {
        List<OAS.Param> query = new List<OAS.Param>();

        // cast query params to verify their expected type
        query.addAll(client.makeParam('post', (Boolean) params.get('post')));
        query.addAll(client.makeParam('apply', (Boolean) params.get('apply')));
        query.addAll(client.makeParam('delete', (Boolean) params.get('r_delete')));
        query.addAll(client.makeParam('action', (String) params.get('action')));
        query.addAll(client.makeParam('$location', (String) params.get('location')));
        query.addAll(client.makeParam('propertylist', (List<String>) params.get('propertylist'), 'csv'));
        query.addAll(client.makeParams('default.attachment.type.blacklist', (List<String>) params.get('defaultAttachmentTypeBlacklist')));
        query.addAll(client.makeParams('baseline.attachment.type.blacklist', (List<String>) params.get('baselineAttachmentTypeBlacklist')));

        List<OAS.Param> form = new List<OAS.Param>();

        return (OASComAdobeCqSocialUgcbaseSecurityIm) client.invoke(
            'POST', '/system/console/configMgr/com.adobe.cq.social.ugcbase.security.impl.DefaultAttachmentTypeBlacklistService', '',
            query, form,
            new Map<String, Object>(),
            new Map<String, Object>(),
            new List<String>{ 'application/json', 'text/plain' },
            new List<String>(),
            new List<String> { 'aemAuth' },
            OASComAdobeCqSocialUgcbaseSecurityIm.class
        );
    }
    /**
     * 
     * 
     * @param post  (optional)
     * @param apply  (optional)
     * @param r_delete  (optional)
     * @param action  (optional)
     * @param location  (optional)
     * @param propertylist  (optional)
     * @param parameterWhitelist  (optional)
     * @param parameterWhitelistPrefixes  (optional)
     * @param binaryParameterWhitelist  (optional)
     * @param modifierWhitelist  (optional)
     * @param operationWhitelist  (optional)
     * @param operationWhitelistPrefixes  (optional)
     * @param typehintWhitelist  (optional)
     * @param resourcetypeWhitelist  (optional)
     * @return OASComAdobeCqSocialUgcbaseSecurityIm
     * @throws OAS.ApiException if fails to make API call
     */
    public OASComAdobeCqSocialUgcbaseSecurityIm comAdobeCqSocialUgcbaseSecurityImplSaferSlingPostValidatorImpl(Map<String, Object> params) {
        List<OAS.Param> query = new List<OAS.Param>();

        // cast query params to verify their expected type
        query.addAll(client.makeParam('post', (Boolean) params.get('post')));
        query.addAll(client.makeParam('apply', (Boolean) params.get('apply')));
        query.addAll(client.makeParam('delete', (Boolean) params.get('r_delete')));
        query.addAll(client.makeParam('action', (String) params.get('action')));
        query.addAll(client.makeParam('$location', (String) params.get('location')));
        query.addAll(client.makeParam('propertylist', (List<String>) params.get('propertylist'), 'csv'));
        query.addAll(client.makeParams('parameter.whitelist', (List<String>) params.get('parameterWhitelist')));
        query.addAll(client.makeParams('parameter.whitelist.prefixes', (List<String>) params.get('parameterWhitelistPrefixes')));
        query.addAll(client.makeParams('binary.parameter.whitelist', (List<String>) params.get('binaryParameterWhitelist')));
        query.addAll(client.makeParams('modifier.whitelist', (List<String>) params.get('modifierWhitelist')));
        query.addAll(client.makeParams('operation.whitelist', (List<String>) params.get('operationWhitelist')));
        query.addAll(client.makeParams('operation.whitelist.prefixes', (List<String>) params.get('operationWhitelistPrefixes')));
        query.addAll(client.makeParams('typehint.whitelist', (List<String>) params.get('typehintWhitelist')));
        query.addAll(client.makeParams('resourcetype.whitelist', (List<String>) params.get('resourcetypeWhitelist')));

        List<OAS.Param> form = new List<OAS.Param>();

        return (OASComAdobeCqSocialUgcbaseSecurityIm) client.invoke(
            'POST', '/system/console/configMgr/com.adobe.cq.social.ugcbase.security.impl.SaferSlingPostValidatorImpl', '',
            query, form,
            new Map<String, Object>(),
            new Map<String, Object>(),
            new List<String>{ 'application/json', 'text/plain' },
            new List<String>(),
            new List<String> { 'aemAuth' },
            OASComAdobeCqSocialUgcbaseSecurityIm.class
        );
    }
    /**
     * 
     * 
     * @param post  (optional)
     * @param apply  (optional)
     * @param r_delete  (optional)
     * @param action  (optional)
     * @param location  (optional)
     * @param propertylist  (optional)
     * @param slingServletExtensions  (optional)
     * @param slingServletPaths  (optional)
     * @param slingServletMethods  (optional)
     * @return OASComAdobeCqSocialUserEndpointsImpl
     * @throws OAS.ApiException if fails to make API call
     */
    public OASComAdobeCqSocialUserEndpointsImpl comAdobeCqSocialUserEndpointsImplUsersGroupFromPublishServlet(Map<String, Object> params) {
        List<OAS.Param> query = new List<OAS.Param>();

        // cast query params to verify their expected type
        query.addAll(client.makeParam('post', (Boolean) params.get('post')));
        query.addAll(client.makeParam('apply', (Boolean) params.get('apply')));
        query.addAll(client.makeParam('delete', (Boolean) params.get('r_delete')));
        query.addAll(client.makeParam('action', (String) params.get('action')));
        query.addAll(client.makeParam('$location', (String) params.get('location')));
        query.addAll(client.makeParam('propertylist', (List<String>) params.get('propertylist'), 'csv'));
        query.addAll(client.makeParam('sling.servlet.extensions', (String) params.get('slingServletExtensions')));
        query.addAll(client.makeParam('sling.servlet.paths', (String) params.get('slingServletPaths')));
        query.addAll(client.makeParam('sling.servlet.methods', (String) params.get('slingServletMethods')));

        List<OAS.Param> form = new List<OAS.Param>();

        return (OASComAdobeCqSocialUserEndpointsImpl) client.invoke(
            'POST', '/system/console/configMgr/com.adobe.cq.social.user.endpoints.impl.UsersGroupFromPublishServlet', '',
            query, form,
            new Map<String, Object>(),
            new Map<String, Object>(),
            new List<String>{ 'application/json', 'text/plain' },
            new List<String>(),
            new List<String> { 'aemAuth' },
            OASComAdobeCqSocialUserEndpointsImpl.class
        );
    }
    /**
     * 
     * 
     * @param post  (optional)
     * @param apply  (optional)
     * @param r_delete  (optional)
     * @param action  (optional)
     * @param location  (optional)
     * @param propertylist  (optional)
     * @param enable  (optional)
     * @param agentConfiguration  (optional)
     * @param contextPath  (optional)
     * @param disabledCipherSuites  (optional)
     * @param enabledCipherSuites  (optional)
     * @return OASComAdobeCqSocialUserImplTransport
     * @throws OAS.ApiException if fails to make API call
     */
    public OASComAdobeCqSocialUserImplTransport comAdobeCqSocialUserImplTransportHttpToPublisher(Map<String, Object> params) {
        List<OAS.Param> query = new List<OAS.Param>();

        // cast query params to verify their expected type
        query.addAll(client.makeParam('post', (Boolean) params.get('post')));
        query.addAll(client.makeParam('apply', (Boolean) params.get('apply')));
        query.addAll(client.makeParam('delete', (Boolean) params.get('r_delete')));
        query.addAll(client.makeParam('action', (String) params.get('action')));
        query.addAll(client.makeParam('$location', (String) params.get('location')));
        query.addAll(client.makeParam('propertylist', (List<String>) params.get('propertylist'), 'csv'));
        query.addAll(client.makeParam('enable', (Boolean) params.get('enable')));
        query.addAll(client.makeParams('agent.configuration', (List<String>) params.get('agentConfiguration')));
        query.addAll(client.makeParam('context.path', (String) params.get('contextPath')));
        query.addAll(client.makeParams('disabled.cipher.suites', (List<String>) params.get('disabledCipherSuites')));
        query.addAll(client.makeParams('enabled.cipher.suites', (List<String>) params.get('enabledCipherSuites')));

        List<OAS.Param> form = new List<OAS.Param>();

        return (OASComAdobeCqSocialUserImplTransport) client.invoke(
            'POST', '/system/console/configMgr/com.adobe.cq.social.user.impl.transport.HttpToPublisher', '',
            query, form,
            new Map<String, Object>(),
            new Map<String, Object>(),
            new List<String>{ 'application/json', 'text/plain' },
            new List<String>(),
            new List<String> { 'aemAuth' },
            OASComAdobeCqSocialUserImplTransport.class
        );
    }
    /**
     * 
     * 
     * @param post  (optional)
     * @param apply  (optional)
     * @param r_delete  (optional)
     * @param action  (optional)
     * @param location  (optional)
     * @param propertylist  (optional)
     * @param resourceTypes  (optional)
     * @return OASComAdobeCqUiWcmCommonsInternalSer
     * @throws OAS.ApiException if fails to make API call
     */
    public OASComAdobeCqUiWcmCommonsInternalSer comAdobeCqUiWcmCommonsInternalServletsRteRTEFilterServletFact(Map<String, Object> params) {
        List<OAS.Param> query = new List<OAS.Param>();

        // cast query params to verify their expected type
        query.addAll(client.makeParam('post', (Boolean) params.get('post')));
        query.addAll(client.makeParam('apply', (Boolean) params.get('apply')));
        query.addAll(client.makeParam('delete', (Boolean) params.get('r_delete')));
        query.addAll(client.makeParam('action', (String) params.get('action')));
        query.addAll(client.makeParam('$location', (String) params.get('location')));
        query.addAll(client.makeParam('propertylist', (List<String>) params.get('propertylist'), 'csv'));
        query.addAll(client.makeParams('resource.types', (List<String>) params.get('resourceTypes')));

        List<OAS.Param> form = new List<OAS.Param>();

        return (OASComAdobeCqUiWcmCommonsInternalSer) client.invoke(
            'POST', '/system/console/configMgr/com.adobe.cq.ui.wcm.commons.internal.servlets.rte.RTEFilterServletFactory.amended', '',
            query, form,
            new Map<String, Object>(),
            new Map<String, Object>(),
            new List<String>{ 'application/json', 'text/plain' },
            new List<String>(),
            new List<String> { 'aemAuth' },
            OASComAdobeCqUiWcmCommonsInternalSer.class
        );
    }
    /**
     * 
     * 
     * @param post  (optional)
     * @param apply  (optional)
     * @param r_delete  (optional)
     * @param action  (optional)
     * @param location  (optional)
     * @param propertylist  (optional)
     * @param deletePathRegexps  (optional)
     * @param deleteSql2Query  (optional)
     * @return OASComAdobeCqUpgradesCleanupImplUpgr
     * @throws OAS.ApiException if fails to make API call
     */
    public OASComAdobeCqUpgradesCleanupImplUpgr comAdobeCqUpgradesCleanupImplUpgradeContentCleanup(Map<String, Object> params) {
        List<OAS.Param> query = new List<OAS.Param>();

        // cast query params to verify their expected type
        query.addAll(client.makeParam('post', (Boolean) params.get('post')));
        query.addAll(client.makeParam('apply', (Boolean) params.get('apply')));
        query.addAll(client.makeParam('delete', (Boolean) params.get('r_delete')));
        query.addAll(client.makeParam('action', (String) params.get('action')));
        query.addAll(client.makeParam('$location', (String) params.get('location')));
        query.addAll(client.makeParam('propertylist', (List<String>) params.get('propertylist'), 'csv'));
        query.addAll(client.makeParams('delete.path.regexps', (List<String>) params.get('deletePathRegexps')));
        query.addAll(client.makeParam('delete.sql2.query', (String) params.get('deleteSql2Query')));

        List<OAS.Param> form = new List<OAS.Param>();

        return (OASComAdobeCqUpgradesCleanupImplUpgr) client.invoke(
            'POST', '/system/console/configMgr/com.adobe.cq.upgrades.cleanup.impl.UpgradeContentCleanup', '',
            query, form,
            new Map<String, Object>(),
            new Map<String, Object>(),
            new List<String>{ 'application/json', 'text/plain' },
            new List<String>(),
            new List<String> { 'aemAuth' },
            OASComAdobeCqUpgradesCleanupImplUpgr.class
        );
    }
    /**
     * 
     * 
     * @param post  (optional)
     * @param apply  (optional)
     * @param r_delete  (optional)
     * @param action  (optional)
     * @param location  (optional)
     * @param propertylist  (optional)
     * @param deleteNameRegexps  (optional)
     * @return OASComAdobeCqUpgradesCleanupImplUpgr
     * @throws OAS.ApiException if fails to make API call
     */
    public OASComAdobeCqUpgradesCleanupImplUpgr comAdobeCqUpgradesCleanupImplUpgradeInstallFolderCleanup(Map<String, Object> params) {
        List<OAS.Param> query = new List<OAS.Param>();

        // cast query params to verify their expected type
        query.addAll(client.makeParam('post', (Boolean) params.get('post')));
        query.addAll(client.makeParam('apply', (Boolean) params.get('apply')));
        query.addAll(client.makeParam('delete', (Boolean) params.get('r_delete')));
        query.addAll(client.makeParam('action', (String) params.get('action')));
        query.addAll(client.makeParam('$location', (String) params.get('location')));
        query.addAll(client.makeParam('propertylist', (List<String>) params.get('propertylist'), 'csv'));
        query.addAll(client.makeParams('delete.name.regexps', (List<String>) params.get('deleteNameRegexps')));

        List<OAS.Param> form = new List<OAS.Param>();

        return (OASComAdobeCqUpgradesCleanupImplUpgr) client.invoke(
            'POST', '/system/console/configMgr/com.adobe.cq.upgrades.cleanup.impl.UpgradeInstallFolderCleanup', '',
            query, form,
            new Map<String, Object>(),
            new Map<String, Object>(),
            new List<String>{ 'application/json', 'text/plain' },
            new List<String>(),
            new List<String> { 'aemAuth' },
            OASComAdobeCqUpgradesCleanupImplUpgr.class
        );
    }
    /**
     * 
     * 
     * @param post  (optional)
     * @param apply  (optional)
     * @param r_delete  (optional)
     * @param action  (optional)
     * @param location  (optional)
     * @param propertylist  (optional)
     * @param threshold  (optional)
     * @param jobTopicName  (optional)
     * @param emailEnabled  (optional)
     * @return OASComAdobeCqWcmJobsAsyncImplAsyncDe
     * @throws OAS.ApiException if fails to make API call
     */
    public OASComAdobeCqWcmJobsAsyncImplAsyncDe comAdobeCqWcmJobsAsyncImplAsyncDeleteConfigProviderService(Map<String, Object> params) {
        List<OAS.Param> query = new List<OAS.Param>();

        // cast query params to verify their expected type
        query.addAll(client.makeParam('post', (Boolean) params.get('post')));
        query.addAll(client.makeParam('apply', (Boolean) params.get('apply')));
        query.addAll(client.makeParam('delete', (Boolean) params.get('r_delete')));
        query.addAll(client.makeParam('action', (String) params.get('action')));
        query.addAll(client.makeParam('$location', (String) params.get('location')));
        query.addAll(client.makeParam('propertylist', (List<String>) params.get('propertylist'), 'csv'));
        query.addAll(client.makeParam('threshold', (Integer) params.get('threshold')));
        query.addAll(client.makeParam('jobTopicName', (String) params.get('jobTopicName')));
        query.addAll(client.makeParam('emailEnabled', (Boolean) params.get('emailEnabled')));

        List<OAS.Param> form = new List<OAS.Param>();

        return (OASComAdobeCqWcmJobsAsyncImplAsyncDe) client.invoke(
            'POST', '/system/console/configMgr/com.adobe.cq.wcm.jobs.async.impl.AsyncDeleteConfigProviderService', '',
            query, form,
            new Map<String, Object>(),
            new Map<String, Object>(),
            new List<String>{ 'application/json', 'text/plain' },
            new List<String>(),
            new List<String> { 'aemAuth' },
            OASComAdobeCqWcmJobsAsyncImplAsyncDe.class
        );
    }
    /**
     * 
     * 
     * @param post  (optional)
     * @param apply  (optional)
     * @param r_delete  (optional)
     * @param action  (optional)
     * @param location  (optional)
     * @param propertylist  (optional)
     * @param schedulerExpression  (optional)
     * @param jobPurgeThreshold  (optional)
     * @param jobPurgeMaxJobs  (optional)
     * @return OASComAdobeCqWcmJobsAsyncImplAsyncJo
     * @throws OAS.ApiException if fails to make API call
     */
    public OASComAdobeCqWcmJobsAsyncImplAsyncJo comAdobeCqWcmJobsAsyncImplAsyncJobCleanUpTask(Map<String, Object> params) {
        List<OAS.Param> query = new List<OAS.Param>();

        // cast query params to verify their expected type
        query.addAll(client.makeParam('post', (Boolean) params.get('post')));
        query.addAll(client.makeParam('apply', (Boolean) params.get('apply')));
        query.addAll(client.makeParam('delete', (Boolean) params.get('r_delete')));
        query.addAll(client.makeParam('action', (String) params.get('action')));
        query.addAll(client.makeParam('$location', (String) params.get('location')));
        query.addAll(client.makeParam('propertylist', (List<String>) params.get('propertylist'), 'csv'));
        query.addAll(client.makeParam('scheduler.expression', (String) params.get('schedulerExpression')));
        query.addAll(client.makeParam('job.purge.threshold', (Integer) params.get('jobPurgeThreshold')));
        query.addAll(client.makeParam('job.purge.max.jobs', (Integer) params.get('jobPurgeMaxJobs')));

        List<OAS.Param> form = new List<OAS.Param>();

        return (OASComAdobeCqWcmJobsAsyncImplAsyncJo) client.invoke(
            'POST', '/system/console/configMgr/com.adobe.cq.wcm.jobs.async.impl.AsyncJobCleanUpTask', '',
            query, form,
            new Map<String, Object>(),
            new Map<String, Object>(),
            new List<String>{ 'application/json', 'text/plain' },
            new List<String>(),
            new List<String> { 'aemAuth' },
            OASComAdobeCqWcmJobsAsyncImplAsyncJo.class
        );
    }
    /**
     * 
     * 
     * @param post  (optional)
     * @param apply  (optional)
     * @param r_delete  (optional)
     * @param action  (optional)
     * @param location  (optional)
     * @param propertylist  (optional)
     * @param threshold  (optional)
     * @param jobTopicName  (optional)
     * @param emailEnabled  (optional)
     * @return OASComAdobeCqWcmJobsAsyncImplAsyncMo
     * @throws OAS.ApiException if fails to make API call
     */
    public OASComAdobeCqWcmJobsAsyncImplAsyncMo comAdobeCqWcmJobsAsyncImplAsyncMoveConfigProviderService(Map<String, Object> params) {
        List<OAS.Param> query = new List<OAS.Param>();

        // cast query params to verify their expected type
        query.addAll(client.makeParam('post', (Boolean) params.get('post')));
        query.addAll(client.makeParam('apply', (Boolean) params.get('apply')));
        query.addAll(client.makeParam('delete', (Boolean) params.get('r_delete')));
        query.addAll(client.makeParam('action', (String) params.get('action')));
        query.addAll(client.makeParam('$location', (String) params.get('location')));
        query.addAll(client.makeParam('propertylist', (List<String>) params.get('propertylist'), 'csv'));
        query.addAll(client.makeParam('threshold', (Integer) params.get('threshold')));
        query.addAll(client.makeParam('jobTopicName', (String) params.get('jobTopicName')));
        query.addAll(client.makeParam('emailEnabled', (Boolean) params.get('emailEnabled')));

        List<OAS.Param> form = new List<OAS.Param>();

        return (OASComAdobeCqWcmJobsAsyncImplAsyncMo) client.invoke(
            'POST', '/system/console/configMgr/com.adobe.cq.wcm.jobs.async.impl.AsyncMoveConfigProviderService', '',
            query, form,
            new Map<String, Object>(),
            new Map<String, Object>(),
            new List<String>{ 'application/json', 'text/plain' },
            new List<String>(),
            new List<String> { 'aemAuth' },
            OASComAdobeCqWcmJobsAsyncImplAsyncMo.class
        );
    }
    /**
     * 
     * 
     * @param post  (optional)
     * @param apply  (optional)
     * @param r_delete  (optional)
     * @param action  (optional)
     * @param location  (optional)
     * @param propertylist  (optional)
     * @param threshold  (optional)
     * @param jobTopicName  (optional)
     * @param emailEnabled  (optional)
     * @return OASComAdobeCqWcmJobsAsyncImplAsyncPa
     * @throws OAS.ApiException if fails to make API call
     */
    public OASComAdobeCqWcmJobsAsyncImplAsyncPa comAdobeCqWcmJobsAsyncImplAsyncPageMoveConfigProviderService(Map<String, Object> params) {
        List<OAS.Param> query = new List<OAS.Param>();

        // cast query params to verify their expected type
        query.addAll(client.makeParam('post', (Boolean) params.get('post')));
        query.addAll(client.makeParam('apply', (Boolean) params.get('apply')));
        query.addAll(client.makeParam('delete', (Boolean) params.get('r_delete')));
        query.addAll(client.makeParam('action', (String) params.get('action')));
        query.addAll(client.makeParam('$location', (String) params.get('location')));
        query.addAll(client.makeParam('propertylist', (List<String>) params.get('propertylist'), 'csv'));
        query.addAll(client.makeParam('threshold', (Integer) params.get('threshold')));
        query.addAll(client.makeParam('jobTopicName', (String) params.get('jobTopicName')));
        query.addAll(client.makeParam('emailEnabled', (Boolean) params.get('emailEnabled')));

        List<OAS.Param> form = new List<OAS.Param>();

        return (OASComAdobeCqWcmJobsAsyncImplAsyncPa) client.invoke(
            'POST', '/system/console/configMgr/com.adobe.cq.wcm.jobs.async.impl.AsyncPageMoveConfigProviderService', '',
            query, form,
            new Map<String, Object>(),
            new Map<String, Object>(),
            new List<String>{ 'application/json', 'text/plain' },
            new List<String>(),
            new List<String> { 'aemAuth' },
            OASComAdobeCqWcmJobsAsyncImplAsyncPa.class
        );
    }
    /**
     * 
     * 
     * @param post  (optional)
     * @param apply  (optional)
     * @param r_delete  (optional)
     * @param action  (optional)
     * @param location  (optional)
     * @param propertylist  (optional)
     * @param eventFilter  (optional)
     * @param launchesEventhandlerThreadpoolMaxsize  (optional)
     * @param launchesEventhandlerThreadpoolPriority  (optional)
     * @param launchesEventhandlerUpdatelastmodification  (optional)
     * @return OASComAdobeCqWcmLaunchesImplLaunches
     * @throws OAS.ApiException if fails to make API call
     */
    public OASComAdobeCqWcmLaunchesImplLaunches comAdobeCqWcmLaunchesImplLaunchesEventHandler(Map<String, Object> params) {
        List<OAS.Param> query = new List<OAS.Param>();

        // cast query params to verify their expected type
        query.addAll(client.makeParam('post', (Boolean) params.get('post')));
        query.addAll(client.makeParam('apply', (Boolean) params.get('apply')));
        query.addAll(client.makeParam('delete', (Boolean) params.get('r_delete')));
        query.addAll(client.makeParam('action', (String) params.get('action')));
        query.addAll(client.makeParam('$location', (String) params.get('location')));
        query.addAll(client.makeParam('propertylist', (List<String>) params.get('propertylist'), 'csv'));
        query.addAll(client.makeParam('event.filter', (String) params.get('eventFilter')));
        query.addAll(client.makeParam('launches.eventhandler.threadpool.maxsize', (Integer) params.get('launchesEventhandlerThreadpoolMaxsize')));
        query.addAll(client.makeParam('launches.eventhandler.threadpool.priority', (String) params.get('launchesEventhandlerThreadpoolPriority')));
        query.addAll(client.makeParam('launches.eventhandler.updatelastmodification', (Boolean) params.get('launchesEventhandlerUpdatelastmodification')));

        List<OAS.Param> form = new List<OAS.Param>();

        return (OASComAdobeCqWcmLaunchesImplLaunches) client.invoke(
            'POST', '/system/console/configMgr/com.adobe.cq.wcm.launches.impl.LaunchesEventHandler', '',
            query, form,
            new Map<String, Object>(),
            new Map<String, Object>(),
            new List<String>{ 'application/json', 'text/plain' },
            new List<String>(),
            new List<String> { 'aemAuth' },
            OASComAdobeCqWcmLaunchesImplLaunches.class
        );
    }
    /**
     * 
     * 
     * @param post  (optional)
     * @param apply  (optional)
     * @param r_delete  (optional)
     * @param action  (optional)
     * @param location  (optional)
     * @param propertylist  (optional)
     * @param cqWcmQrcodeServletWhitelist  (optional)
     * @return OASComAdobeCqWcmMobileQrcodeServletQ
     * @throws OAS.ApiException if fails to make API call
     */
    public OASComAdobeCqWcmMobileQrcodeServletQ comAdobeCqWcmMobileQrcodeServletQRCodeImageGenerator(Map<String, Object> params) {
        List<OAS.Param> query = new List<OAS.Param>();

        // cast query params to verify their expected type
        query.addAll(client.makeParam('post', (Boolean) params.get('post')));
        query.addAll(client.makeParam('apply', (Boolean) params.get('apply')));
        query.addAll(client.makeParam('delete', (Boolean) params.get('r_delete')));
        query.addAll(client.makeParam('action', (String) params.get('action')));
        query.addAll(client.makeParam('$location', (String) params.get('location')));
        query.addAll(client.makeParam('propertylist', (List<String>) params.get('propertylist'), 'csv'));
        query.addAll(client.makeParams('cq.wcm.qrcode.servlet.whitelist', (List<String>) params.get('cqWcmQrcodeServletWhitelist')));

        List<OAS.Param> form = new List<OAS.Param>();

        return (OASComAdobeCqWcmMobileQrcodeServletQ) client.invoke(
            'POST', '/system/console/configMgr/com.adobe.cq.wcm.mobile.qrcode.servlet.QRCodeImageGenerator', '',
            query, form,
            new Map<String, Object>(),
            new Map<String, Object>(),
            new List<String>{ 'application/json', 'text/plain' },
            new List<String>(),
            new List<String> { 'aemAuth' },
            OASComAdobeCqWcmMobileQrcodeServletQ.class
        );
    }
    /**
     * 
     * 
     * @param post  (optional)
     * @param apply  (optional)
     * @param r_delete  (optional)
     * @param action  (optional)
     * @param location  (optional)
     * @param propertylist  (optional)
     * @param size  (optional)
     * @return OASComAdobeCqWcmStyleInternalCompone
     * @throws OAS.ApiException if fails to make API call
     */
    public OASComAdobeCqWcmStyleInternalCompone comAdobeCqWcmStyleInternalComponentStyleInfoCacheImpl(Map<String, Object> params) {
        List<OAS.Param> query = new List<OAS.Param>();

        // cast query params to verify their expected type
        query.addAll(client.makeParam('post', (Boolean) params.get('post')));
        query.addAll(client.makeParam('apply', (Boolean) params.get('apply')));
        query.addAll(client.makeParam('delete', (Boolean) params.get('r_delete')));
        query.addAll(client.makeParam('action', (String) params.get('action')));
        query.addAll(client.makeParam('$location', (String) params.get('location')));
        query.addAll(client.makeParam('propertylist', (List<String>) params.get('propertylist'), 'csv'));
        query.addAll(client.makeParam('size', (Integer) params.get('size')));

        List<OAS.Param> form = new List<OAS.Param>();

        return (OASComAdobeCqWcmStyleInternalCompone) client.invoke(
            'POST', '/system/console/configMgr/com.adobe.cq.wcm.style.internal.ComponentStyleInfoCacheImpl', '',
            query, form,
            new Map<String, Object>(),
            new Map<String, Object>(),
            new List<String>{ 'application/json', 'text/plain' },
            new List<String>(),
            new List<String> { 'aemAuth' },
            OASComAdobeCqWcmStyleInternalCompone.class
        );
    }
    /**
     * 
     * 
     * @param post  (optional)
     * @param apply  (optional)
     * @param r_delete  (optional)
     * @param action  (optional)
     * @param location  (optional)
     * @param propertylist  (optional)
     * @param syncTranslationStateSchedulingFormat  (optional)
     * @param schedulingRepeatTranslationSchedulingFormat  (optional)
     * @param syncTranslationStateLockTimeoutInMinutes  (optional)
     * @param exportFormat  (optional)
     * @return OASComAdobeCqWcmTranslationImplTrans
     * @throws OAS.ApiException if fails to make API call
     */
    public OASComAdobeCqWcmTranslationImplTrans comAdobeCqWcmTranslationImplTranslationPlatformConfigurationImpl(Map<String, Object> params) {
        List<OAS.Param> query = new List<OAS.Param>();

        // cast query params to verify their expected type
        query.addAll(client.makeParam('post', (Boolean) params.get('post')));
        query.addAll(client.makeParam('apply', (Boolean) params.get('apply')));
        query.addAll(client.makeParam('delete', (Boolean) params.get('r_delete')));
        query.addAll(client.makeParam('action', (String) params.get('action')));
        query.addAll(client.makeParam('$location', (String) params.get('location')));
        query.addAll(client.makeParam('propertylist', (List<String>) params.get('propertylist'), 'csv'));
        query.addAll(client.makeParam('syncTranslationState.schedulingFormat', (String) params.get('syncTranslationStateSchedulingFormat')));
        query.addAll(client.makeParam('schedulingRepeatTranslation.schedulingFormat', (String) params.get('schedulingRepeatTranslationSchedulingFormat')));
        query.addAll(client.makeParam('syncTranslationState.lockTimeoutInMinutes', (String) params.get('syncTranslationStateLockTimeoutInMinutes')));
        query.addAll(client.makeParam('export.format', (String) params.get('exportFormat')));

        List<OAS.Param> form = new List<OAS.Param>();

        return (OASComAdobeCqWcmTranslationImplTrans) client.invoke(
            'POST', '/system/console/configMgr/com.adobe.cq.wcm.translation.impl.TranslationPlatformConfigurationImpl', '',
            query, form,
            new Map<String, Object>(),
            new Map<String, Object>(),
            new List<String>{ 'application/json', 'text/plain' },
            new List<String>(),
            new List<String> { 'aemAuth' },
            OASComAdobeCqWcmTranslationImplTrans.class
        );
    }
    /**
     * 
     * 
     * @param post  (optional)
     * @param apply  (optional)
     * @param r_delete  (optional)
     * @param action  (optional)
     * @param location  (optional)
     * @param propertylist  (optional)
     * @param portalOutboxes  (optional)
     * @param draftDataService  (optional)
     * @param draftMetadataService  (optional)
     * @param submitDataService  (optional)
     * @param submitMetadataService  (optional)
     * @param pendingSignDataService  (optional)
     * @param pendingSignMetadataService  (optional)
     * @return OASComAdobeFdFpConfigFormsPortalDraf
     * @throws OAS.ApiException if fails to make API call
     */
    public OASComAdobeFdFpConfigFormsPortalDraf comAdobeFdFpConfigFormsPortalDraftsandSubmissionConfigService(Map<String, Object> params) {
        List<OAS.Param> query = new List<OAS.Param>();

        // cast query params to verify their expected type
        query.addAll(client.makeParam('post', (Boolean) params.get('post')));
        query.addAll(client.makeParam('apply', (Boolean) params.get('apply')));
        query.addAll(client.makeParam('delete', (Boolean) params.get('r_delete')));
        query.addAll(client.makeParam('action', (String) params.get('action')));
        query.addAll(client.makeParam('$location', (String) params.get('location')));
        query.addAll(client.makeParam('propertylist', (List<String>) params.get('propertylist'), 'csv'));
        query.addAll(client.makeParams('portal.outboxes', (List<String>) params.get('portalOutboxes')));
        query.addAll(client.makeParam('draft.data.service', (String) params.get('draftDataService')));
        query.addAll(client.makeParam('draft.metadata.service', (String) params.get('draftMetadataService')));
        query.addAll(client.makeParam('submit.data.service', (String) params.get('submitDataService')));
        query.addAll(client.makeParam('submit.metadata.service', (String) params.get('submitMetadataService')));
        query.addAll(client.makeParam('pendingSign.data.service', (String) params.get('pendingSignDataService')));
        query.addAll(client.makeParam('pendingSign.metadata.service', (String) params.get('pendingSignMetadataService')));

        List<OAS.Param> form = new List<OAS.Param>();

        return (OASComAdobeFdFpConfigFormsPortalDraf) client.invoke(
            'POST', '/system/console/configMgr/com.adobe.fd.fp.config.FormsPortalDraftsandSubmissionConfigService', '',
            query, form,
            new Map<String, Object>(),
            new Map<String, Object>(),
            new List<String>{ 'application/json', 'text/plain' },
            new List<String>(),
            new List<String> { 'aemAuth' },
            OASComAdobeFdFpConfigFormsPortalDraf.class
        );
    }
    /**
     * 
     * 
     * @param post  (optional)
     * @param apply  (optional)
     * @param r_delete  (optional)
     * @param action  (optional)
     * @param location  (optional)
     * @param propertylist  (optional)
     * @param formportalInterval  (optional)
     * @return OASComAdobeFdFpConfigFormsPortalSche
     * @throws OAS.ApiException if fails to make API call
     */
    public OASComAdobeFdFpConfigFormsPortalSche comAdobeFdFpConfigFormsPortalSchedulerService(Map<String, Object> params) {
        List<OAS.Param> query = new List<OAS.Param>();

        // cast query params to verify their expected type
        query.addAll(client.makeParam('post', (Boolean) params.get('post')));
        query.addAll(client.makeParam('apply', (Boolean) params.get('apply')));
        query.addAll(client.makeParam('delete', (Boolean) params.get('r_delete')));
        query.addAll(client.makeParam('action', (String) params.get('action')));
        query.addAll(client.makeParam('$location', (String) params.get('location')));
        query.addAll(client.makeParam('propertylist', (List<String>) params.get('propertylist'), 'csv'));
        query.addAll(client.makeParam('formportal.interval', (String) params.get('formportalInterval')));

        List<OAS.Param> form = new List<OAS.Param>();

        return (OASComAdobeFdFpConfigFormsPortalSche) client.invoke(
            'POST', '/system/console/configMgr/com.adobe.fd.fp.config.FormsPortalSchedulerService', '',
            query, form,
            new Map<String, Object>(),
            new Map<String, Object>(),
            new List<String>{ 'application/json', 'text/plain' },
            new List<String>(),
            new List<String> { 'aemAuth' },
            OASComAdobeFdFpConfigFormsPortalSche.class
        );
    }
    /**
     * 
     * 
     * @param post  (optional)
     * @param apply  (optional)
     * @param r_delete  (optional)
     * @param action  (optional)
     * @param location  (optional)
     * @param propertylist  (optional)
     * @param alloweddataFileLocations  (optional)
     * @return OASComAdobeFormsCommonServiceImplDef
     * @throws OAS.ApiException if fails to make API call
     */
    public OASComAdobeFormsCommonServiceImplDef comAdobeFormsCommonServiceImplDefaultDataProvider(Map<String, Object> params) {
        List<OAS.Param> query = new List<OAS.Param>();

        // cast query params to verify their expected type
        query.addAll(client.makeParam('post', (Boolean) params.get('post')));
        query.addAll(client.makeParam('apply', (Boolean) params.get('apply')));
        query.addAll(client.makeParam('delete', (Boolean) params.get('r_delete')));
        query.addAll(client.makeParam('action', (String) params.get('action')));
        query.addAll(client.makeParam('$location', (String) params.get('location')));
        query.addAll(client.makeParam('propertylist', (List<String>) params.get('propertylist'), 'csv'));
        query.addAll(client.makeParams('alloweddataFileLocations', (List<String>) params.get('alloweddataFileLocations')));

        List<OAS.Param> form = new List<OAS.Param>();

        return (OASComAdobeFormsCommonServiceImplDef) client.invoke(
            'POST', '/system/console/configMgr/com.adobe.forms.common.service.impl.DefaultDataProvider', '',
            query, form,
            new Map<String, Object>(),
            new Map<String, Object>(),
            new List<String>{ 'application/json', 'text/plain' },
            new List<String>(),
            new List<String> { 'aemAuth' },
            OASComAdobeFormsCommonServiceImplDef.class
        );
    }
    /**
     * 
     * 
     * @param post  (optional)
     * @param apply  (optional)
     * @param r_delete  (optional)
     * @param action  (optional)
     * @param location  (optional)
     * @param propertylist  (optional)
     * @param tempStorageConfig  (optional)
     * @return OASComAdobeFormsCommonServiceImplFor
     * @throws OAS.ApiException if fails to make API call
     */
    public OASComAdobeFormsCommonServiceImplFor comAdobeFormsCommonServiceImplFormsCommonConfigurationServiceImp(Map<String, Object> params) {
        List<OAS.Param> query = new List<OAS.Param>();

        // cast query params to verify their expected type
        query.addAll(client.makeParam('post', (Boolean) params.get('post')));
        query.addAll(client.makeParam('apply', (Boolean) params.get('apply')));
        query.addAll(client.makeParam('delete', (Boolean) params.get('r_delete')));
        query.addAll(client.makeParam('action', (String) params.get('action')));
        query.addAll(client.makeParam('$location', (String) params.get('location')));
        query.addAll(client.makeParam('propertylist', (List<String>) params.get('propertylist'), 'csv'));
        query.addAll(client.makeParam('tempStorageConfig', (String) params.get('tempStorageConfig')));

        List<OAS.Param> form = new List<OAS.Param>();

        return (OASComAdobeFormsCommonServiceImplFor) client.invoke(
            'POST', '/system/console/configMgr/com.adobe.forms.common.service.impl.FormsCommonConfigurationServiceImpl', '',
            query, form,
            new Map<String, Object>(),
            new Map<String, Object>(),
            new List<String>{ 'application/json', 'text/plain' },
            new List<String>(),
            new List<String> { 'aemAuth' },
            OASComAdobeFormsCommonServiceImplFor.class
        );
    }
    /**
     * 
     * 
     * @param post  (optional)
     * @param apply  (optional)
     * @param r_delete  (optional)
     * @param action  (optional)
     * @param location  (optional)
     * @param propertylist  (optional)
     * @param schedulerExpression  (optional)
     * @param durationForTemporaryStorage  (optional)
     * @param durationForAnonymousStorage  (optional)
     * @return OASComAdobeFormsCommonServletTempCle
     * @throws OAS.ApiException if fails to make API call
     */
    public OASComAdobeFormsCommonServletTempCle comAdobeFormsCommonServletTempCleanUpTask(Map<String, Object> params) {
        List<OAS.Param> query = new List<OAS.Param>();

        // cast query params to verify their expected type
        query.addAll(client.makeParam('post', (Boolean) params.get('post')));
        query.addAll(client.makeParam('apply', (Boolean) params.get('apply')));
        query.addAll(client.makeParam('delete', (Boolean) params.get('r_delete')));
        query.addAll(client.makeParam('action', (String) params.get('action')));
        query.addAll(client.makeParam('$location', (String) params.get('location')));
        query.addAll(client.makeParam('propertylist', (List<String>) params.get('propertylist'), 'csv'));
        query.addAll(client.makeParam('scheduler.expression', (String) params.get('schedulerExpression')));
        query.addAll(client.makeParam('Duration for Temporary Storage', (String) params.get('durationForTemporaryStorage')));
        query.addAll(client.makeParam('Duration for Anonymous Storage', (String) params.get('durationForAnonymousStorage')));

        List<OAS.Param> form = new List<OAS.Param>();

        return (OASComAdobeFormsCommonServletTempCle) client.invoke(
            'POST', '/system/console/configMgr/com.adobe.forms.common.servlet.TempCleanUpTask', '',
            query, form,
            new Map<String, Object>(),
            new Map<String, Object>(),
            new List<String>{ 'application/json', 'text/plain' },
            new List<String>(),
            new List<String> { 'aemAuth' },
            OASComAdobeFormsCommonServletTempCle.class
        );
    }
    /**
     * 
     * 
     * @param post  (optional)
     * @param apply  (optional)
     * @param r_delete  (optional)
     * @param action  (optional)
     * @param location  (optional)
     * @param propertylist  (optional)
     * @param queryLimit  (optional)
     * @param fileTypeExtensionMap  (optional)
     * @return OASComAdobeGraniteAcpPlatformPlatfor
     * @throws OAS.ApiException if fails to make API call
     */
    public OASComAdobeGraniteAcpPlatformPlatfor comAdobeGraniteAcpPlatformPlatformServlet(Map<String, Object> params) {
        List<OAS.Param> query = new List<OAS.Param>();

        // cast query params to verify their expected type
        query.addAll(client.makeParam('post', (Boolean) params.get('post')));
        query.addAll(client.makeParam('apply', (Boolean) params.get('apply')));
        query.addAll(client.makeParam('delete', (Boolean) params.get('r_delete')));
        query.addAll(client.makeParam('action', (String) params.get('action')));
        query.addAll(client.makeParam('$location', (String) params.get('location')));
        query.addAll(client.makeParam('propertylist', (List<String>) params.get('propertylist'), 'csv'));
        query.addAll(client.makeParam('query.limit', (Integer) params.get('queryLimit')));
        query.addAll(client.makeParams('file.type.extension.map', (List<String>) params.get('fileTypeExtensionMap')));

        List<OAS.Param> form = new List<OAS.Param>();

        return (OASComAdobeGraniteAcpPlatformPlatfor) client.invoke(
            'POST', '/system/console/configMgr/com.adobe.granite.acp.platform.PlatformServlet', '',
            query, form,
            new Map<String, Object>(),
            new Map<String, Object>(),
            new List<String>{ 'application/json', 'text/plain' },
            new List<String>(),
            new List<String> { 'aemAuth' },
            OASComAdobeGraniteAcpPlatformPlatfor.class
        );
    }
    /**
     * 
     * 
     * @param post  (optional)
     * @param apply  (optional)
     * @param r_delete  (optional)
     * @param action  (optional)
     * @param location  (optional)
     * @param propertylist  (optional)
     * @param aggregateRelationships  (optional)
     * @param aggregateDescendVirtual  (optional)
     * @return OASComAdobeGraniteActivitystreamsImp
     * @throws OAS.ApiException if fails to make API call
     */
    public OASComAdobeGraniteActivitystreamsImp comAdobeGraniteActivitystreamsImplActivityManagerImpl(Map<String, Object> params) {
        List<OAS.Param> query = new List<OAS.Param>();

        // cast query params to verify their expected type
        query.addAll(client.makeParam('post', (Boolean) params.get('post')));
        query.addAll(client.makeParam('apply', (Boolean) params.get('apply')));
        query.addAll(client.makeParam('delete', (Boolean) params.get('r_delete')));
        query.addAll(client.makeParam('action', (String) params.get('action')));
        query.addAll(client.makeParam('$location', (String) params.get('location')));
        query.addAll(client.makeParam('propertylist', (List<String>) params.get('propertylist'), 'csv'));
        query.addAll(client.makeParams('aggregate.relationships', (List<String>) params.get('aggregateRelationships')));
        query.addAll(client.makeParam('aggregate.descend.virtual', (Boolean) params.get('aggregateDescendVirtual')));

        List<OAS.Param> form = new List<OAS.Param>();

        return (OASComAdobeGraniteActivitystreamsImp) client.invoke(
            'POST', '/system/console/configMgr/com.adobe.granite.activitystreams.impl.ActivityManagerImpl', '',
            query, form,
            new Map<String, Object>(),
            new Map<String, Object>(),
            new List<String>{ 'application/json', 'text/plain' },
            new List<String>(),
            new List<String> { 'aemAuth' },
            OASComAdobeGraniteActivitystreamsImp.class
        );
    }
    /**
     * 
     * 
     * @param post  (optional)
     * @param apply  (optional)
     * @param r_delete  (optional)
     * @param action  (optional)
     * @param location  (optional)
     * @param propertylist  (optional)
     * @param disabled  (optional)
     * @return OASComAdobeGraniteAnalyzerBaseSystem
     * @throws OAS.ApiException if fails to make API call
     */
    public OASComAdobeGraniteAnalyzerBaseSystem comAdobeGraniteAnalyzerBaseSystemStatusServlet(Map<String, Object> params) {
        List<OAS.Param> query = new List<OAS.Param>();

        // cast query params to verify their expected type
        query.addAll(client.makeParam('post', (Boolean) params.get('post')));
        query.addAll(client.makeParam('apply', (Boolean) params.get('apply')));
        query.addAll(client.makeParam('delete', (Boolean) params.get('r_delete')));
        query.addAll(client.makeParam('action', (String) params.get('action')));
        query.addAll(client.makeParam('$location', (String) params.get('location')));
        query.addAll(client.makeParam('propertylist', (List<String>) params.get('propertylist'), 'csv'));
        query.addAll(client.makeParam('disabled', (Boolean) params.get('disabled')));

        List<OAS.Param> form = new List<OAS.Param>();

        return (OASComAdobeGraniteAnalyzerBaseSystem) client.invoke(
            'POST', '/system/console/configMgr/com.adobe.granite.analyzer.base.SystemStatusServlet', '',
            query, form,
            new Map<String, Object>(),
            new Map<String, Object>(),
            new List<String>{ 'application/json', 'text/plain' },
            new List<String>(),
            new List<String> { 'aemAuth' },
            OASComAdobeGraniteAnalyzerBaseSystem.class
        );
    }
    /**
     * 
     * 
     * @param post  (optional)
     * @param apply  (optional)
     * @param r_delete  (optional)
     * @param action  (optional)
     * @param location  (optional)
     * @param propertylist  (optional)
     * @param disabled  (optional)
     * @return OASComAdobeGraniteAnalyzerScriptsCom
     * @throws OAS.ApiException if fails to make API call
     */
    public OASComAdobeGraniteAnalyzerScriptsCom comAdobeGraniteAnalyzerScriptsCompileAllScriptsCompilerServlet(Map<String, Object> params) {
        List<OAS.Param> query = new List<OAS.Param>();

        // cast query params to verify their expected type
        query.addAll(client.makeParam('post', (Boolean) params.get('post')));
        query.addAll(client.makeParam('apply', (Boolean) params.get('apply')));
        query.addAll(client.makeParam('delete', (Boolean) params.get('r_delete')));
        query.addAll(client.makeParam('action', (String) params.get('action')));
        query.addAll(client.makeParam('$location', (String) params.get('location')));
        query.addAll(client.makeParam('propertylist', (List<String>) params.get('propertylist'), 'csv'));
        query.addAll(client.makeParam('disabled', (Boolean) params.get('disabled')));

        List<OAS.Param> form = new List<OAS.Param>();

        return (OASComAdobeGraniteAnalyzerScriptsCom) client.invoke(
            'POST', '/system/console/configMgr/com.adobe.granite.analyzer.scripts.compile.AllScriptsCompilerServlet', '',
            query, form,
            new Map<String, Object>(),
            new Map<String, Object>(),
            new List<String>{ 'application/json', 'text/plain' },
            new List<String>(),
            new List<String> { 'aemAuth' },
            OASComAdobeGraniteAnalyzerScriptsCom.class
        );
    }
    /**
     * 
     * 
     * @param post  (optional)
     * @param apply  (optional)
     * @param r_delete  (optional)
     * @param action  (optional)
     * @param location  (optional)
     * @param propertylist  (optional)
     * @param comAdobeCqCdnCdnRewriter  (optional)
     * @param comAdobeCqCloudConfigComponents  (optional)
     * @param comAdobeCqCloudConfigCore  (optional)
     * @param comAdobeCqCloudConfigUi  (optional)
     * @param comAdobeCqComAdobeCqEditor  (optional)
     * @param comAdobeCqComAdobeCqProjectsCore  (optional)
     * @param comAdobeCqComAdobeCqProjectsWcmCore  (optional)
     * @param comAdobeCqComAdobeCqUiCommons  (optional)
     * @param comAdobeCqComAdobeCqWcmStyle  (optional)
     * @param comAdobeCqCqActivitymapIntegration  (optional)
     * @param comAdobeCqCqContexthubCommons  (optional)
     * @param comAdobeCqCqDtm  (optional)
     * @param comAdobeCqCqHealthcheck  (optional)
     * @param comAdobeCqCqMultisiteTargeting  (optional)
     * @param comAdobeCqCqPreUpgradeCleanup  (optional)
     * @param comAdobeCqCqProductInfoProvider  (optional)
     * @param comAdobeCqCqRestSites  (optional)
     * @param comAdobeCqCqSecurityHc  (optional)
     * @param comAdobeCqDamCqDamSvgHandler  (optional)
     * @param comAdobeCqDamCqScene7Imaging  (optional)
     * @param comAdobeCqDtmReactorCore  (optional)
     * @param comAdobeCqDtmReactorUi  (optional)
     * @param comAdobeCqExpJspelResolver  (optional)
     * @param comAdobeCqInboxCqInbox  (optional)
     * @param comAdobeCqJsonSchemaParser  (optional)
     * @param comAdobeCqMediaCqMediaPublishingDpsFpCore  (optional)
     * @param comAdobeCqMobileCqMobileCaas  (optional)
     * @param comAdobeCqMobileCqMobileIndexBuilder  (optional)
     * @param comAdobeCqMobileCqMobilePhonegapBuild  (optional)
     * @param comAdobeCqMyspell  (optional)
     * @param comAdobeCqSampleWeRetailCore  (optional)
     * @param comAdobeCqScreensComAdobeCqScreensDcc  (optional)
     * @param comAdobeCqScreensComAdobeCqScreensMqCore  (optional)
     * @param comAdobeCqSocialCqSocialAsProvider  (optional)
     * @param comAdobeCqSocialCqSocialBadgingBasicImpl  (optional)
     * @param comAdobeCqSocialCqSocialBadgingImpl  (optional)
     * @param comAdobeCqSocialCqSocialCalendarImpl  (optional)
     * @param comAdobeCqSocialCqSocialContentFragmentsImpl  (optional)
     * @param comAdobeCqSocialCqSocialEnablementImpl  (optional)
     * @param comAdobeCqSocialCqSocialGraphImpl  (optional)
     * @param comAdobeCqSocialCqSocialIdeationImpl  (optional)
     * @param comAdobeCqSocialCqSocialJcrProvider  (optional)
     * @param comAdobeCqSocialCqSocialMembersImpl  (optional)
     * @param comAdobeCqSocialCqSocialMsProvider  (optional)
     * @param comAdobeCqSocialCqSocialNotificationsChannelsWeb  (optional)
     * @param comAdobeCqSocialCqSocialNotificationsImpl  (optional)
     * @param comAdobeCqSocialCqSocialRdbProvider  (optional)
     * @param comAdobeCqSocialCqSocialScfImpl  (optional)
     * @param comAdobeCqSocialCqSocialScoringBasicImpl  (optional)
     * @param comAdobeCqSocialCqSocialScoringImpl  (optional)
     * @param comAdobeCqSocialCqSocialServiceusersImpl  (optional)
     * @param comAdobeCqSocialCqSocialSrpImpl  (optional)
     * @param comAdobeCqSocialCqSocialUgcbaseImpl  (optional)
     * @param comAdobeDamCqDamCfmImpl  (optional)
     * @param comAdobeFormsFoundationFormsFoundationBase  (optional)
     * @param comAdobeGraniteApicontroller  (optional)
     * @param comAdobeGraniteAssetCore  (optional)
     * @param comAdobeGraniteAuthSso  (optional)
     * @param comAdobeGraniteBundlesHcImpl  (optional)
     * @param comAdobeGraniteCompatRouter  (optional)
     * @param comAdobeGraniteConf  (optional)
     * @param comAdobeGraniteConfUiCore  (optional)
     * @param comAdobeGraniteCors  (optional)
     * @param comAdobeGraniteCrxExplorer  (optional)
     * @param comAdobeGraniteCrxdeLite  (optional)
     * @param comAdobeGraniteCryptoConfig  (optional)
     * @param comAdobeGraniteCryptoExtension  (optional)
     * @param comAdobeGraniteCryptoFile  (optional)
     * @param comAdobeGraniteCryptoJcr  (optional)
     * @param comAdobeGraniteCsrf  (optional)
     * @param comAdobeGraniteDistributionCore  (optional)
     * @param comAdobeGraniteDropwizardMetrics  (optional)
     * @param comAdobeGraniteFragsImpl  (optional)
     * @param comAdobeGraniteGibson  (optional)
     * @param comAdobeGraniteInfocollector  (optional)
     * @param comAdobeGraniteInstallerFactoryPackages  (optional)
     * @param comAdobeGraniteJettySsl  (optional)
     * @param comAdobeGraniteJobsAsync  (optional)
     * @param comAdobeGraniteMaintenanceOak  (optional)
     * @param comAdobeGraniteMonitoringCore  (optional)
     * @param comAdobeGraniteQueries  (optional)
     * @param comAdobeGraniteReplicationHcImpl  (optional)
     * @param comAdobeGraniteRepositoryChecker  (optional)
     * @param comAdobeGraniteRepositoryHcImpl  (optional)
     * @param comAdobeGraniteRestAssets  (optional)
     * @param comAdobeGraniteSecurityUi  (optional)
     * @param comAdobeGraniteStartup  (optional)
     * @param comAdobeGraniteTagsoup  (optional)
     * @param comAdobeGraniteTaskmanagementCore  (optional)
     * @param comAdobeGraniteTaskmanagementWorkflow  (optional)
     * @param comAdobeGraniteUiClientlibsCompilerLess  (optional)
     * @param comAdobeGraniteUiClientlibsProcessorGcc  (optional)
     * @param comAdobeGraniteWebconsolePlugins  (optional)
     * @param comAdobeGraniteWorkflowConsole  (optional)
     * @param comAdobeXmpWorkerFilesNativeFragmentLinux  (optional)
     * @param comAdobeXmpWorkerFilesNativeFragmentMacosx  (optional)
     * @param comAdobeXmpWorkerFilesNativeFragmentWin  (optional)
     * @param comDayCommonsOsgiWrapperSimpleJndi  (optional)
     * @param comDayCqCqAuthhandler  (optional)
     * @param comDayCqCqCompatConfigupdate  (optional)
     * @param comDayCqCqLicensebranding  (optional)
     * @param comDayCqCqNotifcationImpl  (optional)
     * @param comDayCqCqReplicationAudit  (optional)
     * @param comDayCqCqSearchExt  (optional)
     * @param comDayCqDamCqDamAnnotationPrint  (optional)
     * @param comDayCqDamCqDamAssetUsage  (optional)
     * @param comDayCqDamCqDamS7dam  (optional)
     * @param comDayCqDamCqDamSimilaritysearch  (optional)
     * @param comDayCqDamDamWebdavSupport  (optional)
     * @param comDayCqPreUpgradeTasks  (optional)
     * @param comDayCqReplicationExtensions  (optional)
     * @param comDayCqWcmCqMsmCore  (optional)
     * @param comDayCqWcmCqWcmTranslation  (optional)
     * @param dayCommonsJrawio  (optional)
     * @param orgApacheAriesJmxWhiteboard  (optional)
     * @param orgApacheFelixHttpSslfilter  (optional)
     * @param orgApacheFelixOrgApacheFelixThreaddump  (optional)
     * @param orgApacheFelixWebconsolePluginsDs  (optional)
     * @param orgApacheFelixWebconsolePluginsEvent  (optional)
     * @param orgApacheFelixWebconsolePluginsMemoryusage  (optional)
     * @param orgApacheFelixWebconsolePluginsPackageadmin  (optional)
     * @param orgApacheJackrabbitOakAuthLdap  (optional)
     * @param orgApacheJackrabbitOakSegmentTar  (optional)
     * @param orgApacheJackrabbitOakSolrOsgi  (optional)
     * @param orgApacheSlingBundleresourceImpl  (optional)
     * @param orgApacheSlingCommonsFsclassloader  (optional)
     * @param orgApacheSlingCommonsLogWebconsole  (optional)
     * @param orgApacheSlingDatasource  (optional)
     * @param orgApacheSlingDiscoveryBase  (optional)
     * @param orgApacheSlingDiscoveryOak  (optional)
     * @param orgApacheSlingDiscoverySupport  (optional)
     * @param orgApacheSlingDistributionApi  (optional)
     * @param orgApacheSlingDistributionCore  (optional)
     * @param orgApacheSlingExtensionsWebconsolesecurityprovider  (optional)
     * @param orgApacheSlingHcWebconsole  (optional)
     * @param orgApacheSlingInstallerConsole  (optional)
     * @param orgApacheSlingInstallerProviderFile  (optional)
     * @param orgApacheSlingInstallerProviderJcr  (optional)
     * @param orgApacheSlingJcrDavex  (optional)
     * @param orgApacheSlingJcrResourcesecurity  (optional)
     * @param orgApacheSlingJmxProvider  (optional)
     * @param orgApacheSlingLaunchpadInstaller  (optional)
     * @param orgApacheSlingModelsImpl  (optional)
     * @param orgApacheSlingRepoinitParser  (optional)
     * @param orgApacheSlingResourceInventory  (optional)
     * @param orgApacheSlingResourceresolver  (optional)
     * @param orgApacheSlingScriptingJavascript  (optional)
     * @param orgApacheSlingScriptingJst  (optional)
     * @param orgApacheSlingScriptingSightlyJsProvider  (optional)
     * @param orgApacheSlingScriptingSightlyModelsProvider  (optional)
     * @param orgApacheSlingSecurity  (optional)
     * @param orgApacheSlingServletsCompat  (optional)
     * @param orgApacheSlingServletsGet  (optional)
     * @param orgApacheSlingStartupfilterDisabler  (optional)
     * @param orgApacheSlingTracer  (optional)
     * @param weRetailClientAppCore  (optional)
     * @return OASComAdobeGraniteApicontrollerFilte
     * @throws OAS.ApiException if fails to make API call
     */
    public OASComAdobeGraniteApicontrollerFilte comAdobeGraniteApicontrollerFilterResolverHookFactory(Map<String, Object> params) {
        List<OAS.Param> query = new List<OAS.Param>();

        // cast query params to verify their expected type
        query.addAll(client.makeParam('post', (Boolean) params.get('post')));
        query.addAll(client.makeParam('apply', (Boolean) params.get('apply')));
        query.addAll(client.makeParam('delete', (Boolean) params.get('r_delete')));
        query.addAll(client.makeParam('action', (String) params.get('action')));
        query.addAll(client.makeParam('$location', (String) params.get('location')));
        query.addAll(client.makeParam('propertylist', (List<String>) params.get('propertylist'), 'csv'));
        query.addAll(client.makeParam('com.adobe.cq.cdn.cdn-rewriter', (String) params.get('comAdobeCqCdnCdnRewriter')));
        query.addAll(client.makeParam('com.adobe.cq.cloud-config.components', (String) params.get('comAdobeCqCloudConfigComponents')));
        query.addAll(client.makeParam('com.adobe.cq.cloud-config.core', (String) params.get('comAdobeCqCloudConfigCore')));
        query.addAll(client.makeParam('com.adobe.cq.cloud-config.ui', (String) params.get('comAdobeCqCloudConfigUi')));
        query.addAll(client.makeParam('com.adobe.cq.com.adobe.cq.editor', (String) params.get('comAdobeCqComAdobeCqEditor')));
        query.addAll(client.makeParam('com.adobe.cq.com.adobe.cq.projects.core', (String) params.get('comAdobeCqComAdobeCqProjectsCore')));
        query.addAll(client.makeParam('com.adobe.cq.com.adobe.cq.projects.wcm.core', (String) params.get('comAdobeCqComAdobeCqProjectsWcmCore')));
        query.addAll(client.makeParam('com.adobe.cq.com.adobe.cq.ui.commons', (String) params.get('comAdobeCqComAdobeCqUiCommons')));
        query.addAll(client.makeParam('com.adobe.cq.com.adobe.cq.wcm.style', (String) params.get('comAdobeCqComAdobeCqWcmStyle')));
        query.addAll(client.makeParam('com.adobe.cq.cq-activitymap-integration', (String) params.get('comAdobeCqCqActivitymapIntegration')));
        query.addAll(client.makeParam('com.adobe.cq.cq-contexthub-commons', (String) params.get('comAdobeCqCqContexthubCommons')));
        query.addAll(client.makeParam('com.adobe.cq.cq-dtm', (String) params.get('comAdobeCqCqDtm')));
        query.addAll(client.makeParam('com.adobe.cq.cq-healthcheck', (String) params.get('comAdobeCqCqHealthcheck')));
        query.addAll(client.makeParam('com.adobe.cq.cq-multisite-targeting', (String) params.get('comAdobeCqCqMultisiteTargeting')));
        query.addAll(client.makeParam('com.adobe.cq.cq-pre-upgrade-cleanup', (String) params.get('comAdobeCqCqPreUpgradeCleanup')));
        query.addAll(client.makeParam('com.adobe.cq.cq-product-info-provider', (String) params.get('comAdobeCqCqProductInfoProvider')));
        query.addAll(client.makeParam('com.adobe.cq.cq-rest-sites', (String) params.get('comAdobeCqCqRestSites')));
        query.addAll(client.makeParam('com.adobe.cq.cq-security-hc', (String) params.get('comAdobeCqCqSecurityHc')));
        query.addAll(client.makeParam('com.adobe.cq.dam.cq-dam-svg-handler', (String) params.get('comAdobeCqDamCqDamSvgHandler')));
        query.addAll(client.makeParam('com.adobe.cq.dam.cq-scene7-imaging', (String) params.get('comAdobeCqDamCqScene7Imaging')));
        query.addAll(client.makeParam('com.adobe.cq.dtm-reactor.core', (String) params.get('comAdobeCqDtmReactorCore')));
        query.addAll(client.makeParam('com.adobe.cq.dtm-reactor.ui', (String) params.get('comAdobeCqDtmReactorUi')));
        query.addAll(client.makeParam('com.adobe.cq.exp-jspel-resolver', (String) params.get('comAdobeCqExpJspelResolver')));
        query.addAll(client.makeParam('com.adobe.cq.inbox.cq-inbox', (String) params.get('comAdobeCqInboxCqInbox')));
        query.addAll(client.makeParam('com.adobe.cq.json-schema-parser', (String) params.get('comAdobeCqJsonSchemaParser')));
        query.addAll(client.makeParam('com.adobe.cq.media.cq-media-publishing-dps-fp-core', (String) params.get('comAdobeCqMediaCqMediaPublishingDpsFpCore')));
        query.addAll(client.makeParam('com.adobe.cq.mobile.cq-mobile-caas', (String) params.get('comAdobeCqMobileCqMobileCaas')));
        query.addAll(client.makeParam('com.adobe.cq.mobile.cq-mobile-index-builder', (String) params.get('comAdobeCqMobileCqMobileIndexBuilder')));
        query.addAll(client.makeParam('com.adobe.cq.mobile.cq-mobile-phonegap-build', (String) params.get('comAdobeCqMobileCqMobilePhonegapBuild')));
        query.addAll(client.makeParam('com.adobe.cq.myspell', (String) params.get('comAdobeCqMyspell')));
        query.addAll(client.makeParam('com.adobe.cq.sample.we.retail.core', (String) params.get('comAdobeCqSampleWeRetailCore')));
        query.addAll(client.makeParam('com.adobe.cq.screens.com.adobe.cq.screens.dcc', (String) params.get('comAdobeCqScreensComAdobeCqScreensDcc')));
        query.addAll(client.makeParam('com.adobe.cq.screens.com.adobe.cq.screens.mq.core', (String) params.get('comAdobeCqScreensComAdobeCqScreensMqCore')));
        query.addAll(client.makeParam('com.adobe.cq.social.cq-social-as-provider', (String) params.get('comAdobeCqSocialCqSocialAsProvider')));
        query.addAll(client.makeParam('com.adobe.cq.social.cq-social-badging-basic-impl', (String) params.get('comAdobeCqSocialCqSocialBadgingBasicImpl')));
        query.addAll(client.makeParam('com.adobe.cq.social.cq-social-badging-impl', (String) params.get('comAdobeCqSocialCqSocialBadgingImpl')));
        query.addAll(client.makeParam('com.adobe.cq.social.cq-social-calendar-impl', (String) params.get('comAdobeCqSocialCqSocialCalendarImpl')));
        query.addAll(client.makeParam('com.adobe.cq.social.cq-social-content-fragments-impl', (String) params.get('comAdobeCqSocialCqSocialContentFragmentsImpl')));
        query.addAll(client.makeParam('com.adobe.cq.social.cq-social-enablement-impl', (String) params.get('comAdobeCqSocialCqSocialEnablementImpl')));
        query.addAll(client.makeParam('com.adobe.cq.social.cq-social-graph-impl', (String) params.get('comAdobeCqSocialCqSocialGraphImpl')));
        query.addAll(client.makeParam('com.adobe.cq.social.cq-social-ideation-impl', (String) params.get('comAdobeCqSocialCqSocialIdeationImpl')));
        query.addAll(client.makeParam('com.adobe.cq.social.cq-social-jcr-provider', (String) params.get('comAdobeCqSocialCqSocialJcrProvider')));
        query.addAll(client.makeParam('com.adobe.cq.social.cq-social-members-impl', (String) params.get('comAdobeCqSocialCqSocialMembersImpl')));
        query.addAll(client.makeParam('com.adobe.cq.social.cq-social-ms-provider', (String) params.get('comAdobeCqSocialCqSocialMsProvider')));
        query.addAll(client.makeParam('com.adobe.cq.social.cq-social-notifications-channels-web', (String) params.get('comAdobeCqSocialCqSocialNotificationsChannelsWeb')));
        query.addAll(client.makeParam('com.adobe.cq.social.cq-social-notifications-impl', (String) params.get('comAdobeCqSocialCqSocialNotificationsImpl')));
        query.addAll(client.makeParam('com.adobe.cq.social.cq-social-rdb-provider', (String) params.get('comAdobeCqSocialCqSocialRdbProvider')));
        query.addAll(client.makeParam('com.adobe.cq.social.cq-social-scf-impl', (String) params.get('comAdobeCqSocialCqSocialScfImpl')));
        query.addAll(client.makeParam('com.adobe.cq.social.cq-social-scoring-basic-impl', (String) params.get('comAdobeCqSocialCqSocialScoringBasicImpl')));
        query.addAll(client.makeParam('com.adobe.cq.social.cq-social-scoring-impl', (String) params.get('comAdobeCqSocialCqSocialScoringImpl')));
        query.addAll(client.makeParam('com.adobe.cq.social.cq-social-serviceusers-impl', (String) params.get('comAdobeCqSocialCqSocialServiceusersImpl')));
        query.addAll(client.makeParam('com.adobe.cq.social.cq-social-srp-impl', (String) params.get('comAdobeCqSocialCqSocialSrpImpl')));
        query.addAll(client.makeParam('com.adobe.cq.social.cq-social-ugcbase-impl', (String) params.get('comAdobeCqSocialCqSocialUgcbaseImpl')));
        query.addAll(client.makeParam('com.adobe.dam.cq-dam-cfm-impl', (String) params.get('comAdobeDamCqDamCfmImpl')));
        query.addAll(client.makeParam('com.adobe.forms.foundation-forms-foundation-base', (String) params.get('comAdobeFormsFoundationFormsFoundationBase')));
        query.addAll(client.makeParam('com.adobe.granite.apicontroller', (String) params.get('comAdobeGraniteApicontroller')));
        query.addAll(client.makeParam('com.adobe.granite.asset.core', (String) params.get('comAdobeGraniteAssetCore')));
        query.addAll(client.makeParam('com.adobe.granite.auth.sso', (String) params.get('comAdobeGraniteAuthSso')));
        query.addAll(client.makeParam('com.adobe.granite.bundles.hc.impl', (String) params.get('comAdobeGraniteBundlesHcImpl')));
        query.addAll(client.makeParam('com.adobe.granite.compat-router', (String) params.get('comAdobeGraniteCompatRouter')));
        query.addAll(client.makeParam('com.adobe.granite.conf', (String) params.get('comAdobeGraniteConf')));
        query.addAll(client.makeParam('com.adobe.granite.conf.ui.core', (String) params.get('comAdobeGraniteConfUiCore')));
        query.addAll(client.makeParam('com.adobe.granite.cors', (String) params.get('comAdobeGraniteCors')));
        query.addAll(client.makeParam('com.adobe.granite.crx-explorer', (String) params.get('comAdobeGraniteCrxExplorer')));
        query.addAll(client.makeParam('com.adobe.granite.crxde-lite', (String) params.get('comAdobeGraniteCrxdeLite')));
        query.addAll(client.makeParam('com.adobe.granite.crypto.config', (String) params.get('comAdobeGraniteCryptoConfig')));
        query.addAll(client.makeParam('com.adobe.granite.crypto.extension', (String) params.get('comAdobeGraniteCryptoExtension')));
        query.addAll(client.makeParam('com.adobe.granite.crypto.file', (String) params.get('comAdobeGraniteCryptoFile')));
        query.addAll(client.makeParam('com.adobe.granite.crypto.jcr', (String) params.get('comAdobeGraniteCryptoJcr')));
        query.addAll(client.makeParam('com.adobe.granite.csrf', (String) params.get('comAdobeGraniteCsrf')));
        query.addAll(client.makeParam('com.adobe.granite.distribution.core', (String) params.get('comAdobeGraniteDistributionCore')));
        query.addAll(client.makeParam('com.adobe.granite.dropwizard.metrics', (String) params.get('comAdobeGraniteDropwizardMetrics')));
        query.addAll(client.makeParam('com.adobe.granite.frags.impl', (String) params.get('comAdobeGraniteFragsImpl')));
        query.addAll(client.makeParam('com.adobe.granite.gibson', (String) params.get('comAdobeGraniteGibson')));
        query.addAll(client.makeParam('com.adobe.granite.infocollector', (String) params.get('comAdobeGraniteInfocollector')));
        query.addAll(client.makeParam('com.adobe.granite.installer.factory.packages', (String) params.get('comAdobeGraniteInstallerFactoryPackages')));
        query.addAll(client.makeParam('com.adobe.granite.jetty.ssl', (String) params.get('comAdobeGraniteJettySsl')));
        query.addAll(client.makeParam('com.adobe.granite.jobs.async', (String) params.get('comAdobeGraniteJobsAsync')));
        query.addAll(client.makeParam('com.adobe.granite.maintenance.oak', (String) params.get('comAdobeGraniteMaintenanceOak')));
        query.addAll(client.makeParam('com.adobe.granite.monitoring.core', (String) params.get('comAdobeGraniteMonitoringCore')));
        query.addAll(client.makeParam('com.adobe.granite.queries', (String) params.get('comAdobeGraniteQueries')));
        query.addAll(client.makeParam('com.adobe.granite.replication.hc.impl', (String) params.get('comAdobeGraniteReplicationHcImpl')));
        query.addAll(client.makeParam('com.adobe.granite.repository.checker', (String) params.get('comAdobeGraniteRepositoryChecker')));
        query.addAll(client.makeParam('com.adobe.granite.repository.hc.impl', (String) params.get('comAdobeGraniteRepositoryHcImpl')));
        query.addAll(client.makeParam('com.adobe.granite.rest.assets', (String) params.get('comAdobeGraniteRestAssets')));
        query.addAll(client.makeParam('com.adobe.granite.security.ui', (String) params.get('comAdobeGraniteSecurityUi')));
        query.addAll(client.makeParam('com.adobe.granite.startup', (String) params.get('comAdobeGraniteStartup')));
        query.addAll(client.makeParam('com.adobe.granite.tagsoup', (String) params.get('comAdobeGraniteTagsoup')));
        query.addAll(client.makeParam('com.adobe.granite.taskmanagement.core', (String) params.get('comAdobeGraniteTaskmanagementCore')));
        query.addAll(client.makeParam('com.adobe.granite.taskmanagement.workflow', (String) params.get('comAdobeGraniteTaskmanagementWorkflow')));
        query.addAll(client.makeParam('com.adobe.granite.ui.clientlibs.compiler.less', (String) params.get('comAdobeGraniteUiClientlibsCompilerLess')));
        query.addAll(client.makeParam('com.adobe.granite.ui.clientlibs.processor.gcc', (String) params.get('comAdobeGraniteUiClientlibsProcessorGcc')));
        query.addAll(client.makeParam('com.adobe.granite.webconsole.plugins', (String) params.get('comAdobeGraniteWebconsolePlugins')));
        query.addAll(client.makeParam('com.adobe.granite.workflow.console', (String) params.get('comAdobeGraniteWorkflowConsole')));
        query.addAll(client.makeParam('com.adobe.xmp.worker.files.native.fragment.linux', (String) params.get('comAdobeXmpWorkerFilesNativeFragmentLinux')));
        query.addAll(client.makeParam('com.adobe.xmp.worker.files.native.fragment.macosx', (String) params.get('comAdobeXmpWorkerFilesNativeFragmentMacosx')));
        query.addAll(client.makeParam('com.adobe.xmp.worker.files.native.fragment.win', (String) params.get('comAdobeXmpWorkerFilesNativeFragmentWin')));
        query.addAll(client.makeParam('com.day.commons.osgi.wrapper.simple-jndi', (String) params.get('comDayCommonsOsgiWrapperSimpleJndi')));
        query.addAll(client.makeParam('com.day.cq.cq-authhandler', (String) params.get('comDayCqCqAuthhandler')));
        query.addAll(client.makeParam('com.day.cq.cq-compat-configupdate', (String) params.get('comDayCqCqCompatConfigupdate')));
        query.addAll(client.makeParam('com.day.cq.cq-licensebranding', (String) params.get('comDayCqCqLicensebranding')));
        query.addAll(client.makeParam('com.day.cq.cq-notifcation-impl', (String) params.get('comDayCqCqNotifcationImpl')));
        query.addAll(client.makeParam('com.day.cq.cq-replication-audit', (String) params.get('comDayCqCqReplicationAudit')));
        query.addAll(client.makeParam('com.day.cq.cq-search-ext', (String) params.get('comDayCqCqSearchExt')));
        query.addAll(client.makeParam('com.day.cq.dam.cq-dam-annotation-print', (String) params.get('comDayCqDamCqDamAnnotationPrint')));
        query.addAll(client.makeParam('com.day.cq.dam.cq-dam-asset-usage', (String) params.get('comDayCqDamCqDamAssetUsage')));
        query.addAll(client.makeParam('com.day.cq.dam.cq-dam-s7dam', (String) params.get('comDayCqDamCqDamS7dam')));
        query.addAll(client.makeParam('com.day.cq.dam.cq-dam-similaritysearch', (String) params.get('comDayCqDamCqDamSimilaritysearch')));
        query.addAll(client.makeParam('com.day.cq.dam.dam-webdav-support', (String) params.get('comDayCqDamDamWebdavSupport')));
        query.addAll(client.makeParam('com.day.cq.pre-upgrade-tasks', (String) params.get('comDayCqPreUpgradeTasks')));
        query.addAll(client.makeParam('com.day.cq.replication.extensions', (String) params.get('comDayCqReplicationExtensions')));
        query.addAll(client.makeParam('com.day.cq.wcm.cq-msm-core', (String) params.get('comDayCqWcmCqMsmCore')));
        query.addAll(client.makeParam('com.day.cq.wcm.cq-wcm-translation', (String) params.get('comDayCqWcmCqWcmTranslation')));
        query.addAll(client.makeParam('day-commons-jrawio', (String) params.get('dayCommonsJrawio')));
        query.addAll(client.makeParam('org.apache.aries.jmx.whiteboard', (String) params.get('orgApacheAriesJmxWhiteboard')));
        query.addAll(client.makeParam('org.apache.felix.http.sslfilter', (String) params.get('orgApacheFelixHttpSslfilter')));
        query.addAll(client.makeParam('org.apache.felix.org.apache.felix.threaddump', (String) params.get('orgApacheFelixOrgApacheFelixThreaddump')));
        query.addAll(client.makeParam('org.apache.felix.webconsole.plugins.ds', (String) params.get('orgApacheFelixWebconsolePluginsDs')));
        query.addAll(client.makeParam('org.apache.felix.webconsole.plugins.event', (String) params.get('orgApacheFelixWebconsolePluginsEvent')));
        query.addAll(client.makeParam('org.apache.felix.webconsole.plugins.memoryusage', (String) params.get('orgApacheFelixWebconsolePluginsMemoryusage')));
        query.addAll(client.makeParam('org.apache.felix.webconsole.plugins.packageadmin', (String) params.get('orgApacheFelixWebconsolePluginsPackageadmin')));
        query.addAll(client.makeParam('org.apache.jackrabbit.oak-auth-ldap', (String) params.get('orgApacheJackrabbitOakAuthLdap')));
        query.addAll(client.makeParam('org.apache.jackrabbit.oak-segment-tar', (String) params.get('orgApacheJackrabbitOakSegmentTar')));
        query.addAll(client.makeParam('org.apache.jackrabbit.oak-solr-osgi', (String) params.get('orgApacheJackrabbitOakSolrOsgi')));
        query.addAll(client.makeParam('org.apache.sling.bundleresource.impl', (String) params.get('orgApacheSlingBundleresourceImpl')));
        query.addAll(client.makeParam('org.apache.sling.commons.fsclassloader', (String) params.get('orgApacheSlingCommonsFsclassloader')));
        query.addAll(client.makeParam('org.apache.sling.commons.log.webconsole', (String) params.get('orgApacheSlingCommonsLogWebconsole')));
        query.addAll(client.makeParam('org.apache.sling.datasource', (String) params.get('orgApacheSlingDatasource')));
        query.addAll(client.makeParam('org.apache.sling.discovery.base', (String) params.get('orgApacheSlingDiscoveryBase')));
        query.addAll(client.makeParam('org.apache.sling.discovery.oak', (String) params.get('orgApacheSlingDiscoveryOak')));
        query.addAll(client.makeParam('org.apache.sling.discovery.support', (String) params.get('orgApacheSlingDiscoverySupport')));
        query.addAll(client.makeParam('org.apache.sling.distribution.api', (String) params.get('orgApacheSlingDistributionApi')));
        query.addAll(client.makeParam('org.apache.sling.distribution.core', (String) params.get('orgApacheSlingDistributionCore')));
        query.addAll(client.makeParam('org.apache.sling.extensions.webconsolesecurityprovider', (String) params.get('orgApacheSlingExtensionsWebconsolesecurityprovider')));
        query.addAll(client.makeParam('org.apache.sling.hc.webconsole', (String) params.get('orgApacheSlingHcWebconsole')));
        query.addAll(client.makeParam('org.apache.sling.installer.console', (String) params.get('orgApacheSlingInstallerConsole')));
        query.addAll(client.makeParam('org.apache.sling.installer.provider.file', (String) params.get('orgApacheSlingInstallerProviderFile')));
        query.addAll(client.makeParam('org.apache.sling.installer.provider.jcr', (String) params.get('orgApacheSlingInstallerProviderJcr')));
        query.addAll(client.makeParam('org.apache.sling.jcr.davex', (String) params.get('orgApacheSlingJcrDavex')));
        query.addAll(client.makeParam('org.apache.sling.jcr.resourcesecurity', (String) params.get('orgApacheSlingJcrResourcesecurity')));
        query.addAll(client.makeParam('org.apache.sling.jmx.provider', (String) params.get('orgApacheSlingJmxProvider')));
        query.addAll(client.makeParam('org.apache.sling.launchpad.installer', (String) params.get('orgApacheSlingLaunchpadInstaller')));
        query.addAll(client.makeParam('org.apache.sling.models.impl', (String) params.get('orgApacheSlingModelsImpl')));
        query.addAll(client.makeParam('org.apache.sling.repoinit.parser', (String) params.get('orgApacheSlingRepoinitParser')));
        query.addAll(client.makeParam('org.apache.sling.resource.inventory', (String) params.get('orgApacheSlingResourceInventory')));
        query.addAll(client.makeParam('org.apache.sling.resourceresolver', (String) params.get('orgApacheSlingResourceresolver')));
        query.addAll(client.makeParam('org.apache.sling.scripting.javascript', (String) params.get('orgApacheSlingScriptingJavascript')));
        query.addAll(client.makeParam('org.apache.sling.scripting.jst', (String) params.get('orgApacheSlingScriptingJst')));
        query.addAll(client.makeParam('org.apache.sling.scripting.sightly.js.provider', (String) params.get('orgApacheSlingScriptingSightlyJsProvider')));
        query.addAll(client.makeParam('org.apache.sling.scripting.sightly.models.provider', (String) params.get('orgApacheSlingScriptingSightlyModelsProvider')));
        query.addAll(client.makeParam('org.apache.sling.security', (String) params.get('orgApacheSlingSecurity')));
        query.addAll(client.makeParam('org.apache.sling.servlets.compat', (String) params.get('orgApacheSlingServletsCompat')));
        query.addAll(client.makeParam('org.apache.sling.servlets.get', (String) params.get('orgApacheSlingServletsGet')));
        query.addAll(client.makeParam('org.apache.sling.startupfilter.disabler', (String) params.get('orgApacheSlingStartupfilterDisabler')));
        query.addAll(client.makeParam('org.apache.sling.tracer', (String) params.get('orgApacheSlingTracer')));
        query.addAll(client.makeParam('we.retail.client.app.core', (String) params.get('weRetailClientAppCore')));

        List<OAS.Param> form = new List<OAS.Param>();

        return (OASComAdobeGraniteApicontrollerFilte) client.invoke(
            'POST', '/system/console/configMgr/com.adobe.granite.apicontroller.FilterResolverHookFactory', '',
            query, form,
            new Map<String, Object>(),
            new Map<String, Object>(),
            new List<String>{ 'application/json', 'text/plain' },
            new List<String>(),
            new List<String> { 'aemAuth' },
            OASComAdobeGraniteApicontrollerFilte.class
        );
    }
    /**
     * 
     * 
     * @param post  (optional)
     * @param apply  (optional)
     * @param r_delete  (optional)
     * @param action  (optional)
     * @param location  (optional)
     * @param propertylist  (optional)
     * @param path  (optional)
     * @param serviceRanking  (optional)
     * @return OASComAdobeGraniteAuthCertImplClient
     * @throws OAS.ApiException if fails to make API call
     */
    public OASComAdobeGraniteAuthCertImplClient comAdobeGraniteAuthCertImplClientCertAuthHandler(Map<String, Object> params) {
        List<OAS.Param> query = new List<OAS.Param>();

        // cast query params to verify their expected type
        query.addAll(client.makeParam('post', (Boolean) params.get('post')));
        query.addAll(client.makeParam('apply', (Boolean) params.get('apply')));
        query.addAll(client.makeParam('delete', (Boolean) params.get('r_delete')));
        query.addAll(client.makeParam('action', (String) params.get('action')));
        query.addAll(client.makeParam('$location', (String) params.get('location')));
        query.addAll(client.makeParam('propertylist', (List<String>) params.get('propertylist'), 'csv'));
        query.addAll(client.makeParam('path', (String) params.get('path')));
        query.addAll(client.makeParam('service.ranking', (Integer) params.get('serviceRanking')));

        List<OAS.Param> form = new List<OAS.Param>();

        return (OASComAdobeGraniteAuthCertImplClient) client.invoke(
            'POST', '/system/console/configMgr/com.adobe.granite.auth.cert.impl.ClientCertAuthHandler', '',
            query, form,
            new Map<String, Object>(),
            new Map<String, Object>(),
            new List<String>{ 'application/json', 'text/plain' },
            new List<String>(),
            new List<String> { 'aemAuth' },
            OASComAdobeGraniteAuthCertImplClient.class
        );
    }
    /**
     * 
     * 
     * @param post  (optional)
     * @param apply  (optional)
     * @param r_delete  (optional)
     * @param action  (optional)
     * @param location  (optional)
     * @param propertylist  (optional)
     * @param configid  (optional)
     * @param scope  (optional)
     * @return OASComAdobeGraniteAuthImsInfo
     * @throws OAS.ApiException if fails to make API call
     */
    public OASComAdobeGraniteAuthImsInfo comAdobeGraniteAuthIms(Map<String, Object> params) {
        List<OAS.Param> query = new List<OAS.Param>();

        // cast query params to verify their expected type
        query.addAll(client.makeParam('post', (Boolean) params.get('post')));
        query.addAll(client.makeParam('apply', (Boolean) params.get('apply')));
        query.addAll(client.makeParam('delete', (Boolean) params.get('r_delete')));
        query.addAll(client.makeParam('action', (String) params.get('action')));
        query.addAll(client.makeParam('$location', (String) params.get('location')));
        query.addAll(client.makeParam('propertylist', (List<String>) params.get('propertylist'), 'csv'));
        query.addAll(client.makeParam('configid', (String) params.get('configid')));
        query.addAll(client.makeParam('scope', (String) params.get('scope')));

        List<OAS.Param> form = new List<OAS.Param>();

        return (OASComAdobeGraniteAuthImsInfo) client.invoke(
            'POST', '/system/console/configMgr/com.adobe.granite.auth.ims', '',
            query, form,
            new Map<String, Object>(),
            new Map<String, Object>(),
            new List<String>{ 'application/json', 'text/plain' },
            new List<String>(),
            new List<String> { 'aemAuth' },
            OASComAdobeGraniteAuthImsInfo.class
        );
    }
    /**
     * 
     * 
     * @param post  (optional)
     * @param apply  (optional)
     * @param r_delete  (optional)
     * @param action  (optional)
     * @param location  (optional)
     * @param propertylist  (optional)
     * @param oauthProviderId  (optional)
     * @return OASComAdobeGraniteAuthImsImplExterna
     * @throws OAS.ApiException if fails to make API call
     */
    public OASComAdobeGraniteAuthImsImplExterna comAdobeGraniteAuthImsImplExternalUserIdMappingProviderExtension(Map<String, Object> params) {
        List<OAS.Param> query = new List<OAS.Param>();

        // cast query params to verify their expected type
        query.addAll(client.makeParam('post', (Boolean) params.get('post')));
        query.addAll(client.makeParam('apply', (Boolean) params.get('apply')));
        query.addAll(client.makeParam('delete', (Boolean) params.get('r_delete')));
        query.addAll(client.makeParam('action', (String) params.get('action')));
        query.addAll(client.makeParam('$location', (String) params.get('location')));
        query.addAll(client.makeParam('propertylist', (List<String>) params.get('propertylist'), 'csv'));
        query.addAll(client.makeParam('oauth.provider.id', (String) params.get('oauthProviderId')));

        List<OAS.Param> form = new List<OAS.Param>();

        return (OASComAdobeGraniteAuthImsImplExterna) client.invoke(
            'POST', '/system/console/configMgr/com.adobe.granite.auth.ims.impl.ExternalUserIdMappingProviderExtension', '',
            query, form,
            new Map<String, Object>(),
            new Map<String, Object>(),
            new List<String>{ 'application/json', 'text/plain' },
            new List<String>(),
            new List<String> { 'aemAuth' },
            OASComAdobeGraniteAuthImsImplExterna.class
        );
    }
    /**
     * 
     * 
     * @param post  (optional)
     * @param apply  (optional)
     * @param r_delete  (optional)
     * @param action  (optional)
     * @param location  (optional)
     * @param propertylist  (optional)
     * @param authImsClientSecret  (optional)
     * @param customizerType  (optional)
     * @return OASComAdobeGraniteAuthImsImplIMSAcce
     * @throws OAS.ApiException if fails to make API call
     */
    public OASComAdobeGraniteAuthImsImplIMSAcce comAdobeGraniteAuthImsImplIMSAccessTokenRequestCustomizerImpl(Map<String, Object> params) {
        List<OAS.Param> query = new List<OAS.Param>();

        // cast query params to verify their expected type
        query.addAll(client.makeParam('post', (Boolean) params.get('post')));
        query.addAll(client.makeParam('apply', (Boolean) params.get('apply')));
        query.addAll(client.makeParam('delete', (Boolean) params.get('r_delete')));
        query.addAll(client.makeParam('action', (String) params.get('action')));
        query.addAll(client.makeParam('$location', (String) params.get('location')));
        query.addAll(client.makeParam('propertylist', (List<String>) params.get('propertylist'), 'csv'));
        query.addAll(client.makeParam('auth.ims.client.secret', (String) params.get('authImsClientSecret')));
        query.addAll(client.makeParam('customizer.type', (String) params.get('customizerType')));

        List<OAS.Param> form = new List<OAS.Param>();

        return (OASComAdobeGraniteAuthImsImplIMSAcce) client.invoke(
            'POST', '/system/console/configMgr/com.adobe.granite.auth.ims.impl.IMSAccessTokenRequestCustomizerImpl', '',
            query, form,
            new Map<String, Object>(),
            new Map<String, Object>(),
            new List<String>{ 'application/json', 'text/plain' },
            new List<String>(),
            new List<String> { 'aemAuth' },
            OASComAdobeGraniteAuthImsImplIMSAcce.class
        );
    }
    /**
     * 
     * 
     * @param post  (optional)
     * @param apply  (optional)
     * @param r_delete  (optional)
     * @param action  (optional)
     * @param location  (optional)
     * @param propertylist  (optional)
     * @param oauthProviderId  (optional)
     * @return OASComAdobeGraniteAuthImsImplIMSInst
     * @throws OAS.ApiException if fails to make API call
     */
    public OASComAdobeGraniteAuthImsImplIMSInst comAdobeGraniteAuthImsImplIMSInstanceCredentialsValidator(Map<String, Object> params) {
        List<OAS.Param> query = new List<OAS.Param>();

        // cast query params to verify their expected type
        query.addAll(client.makeParam('post', (Boolean) params.get('post')));
        query.addAll(client.makeParam('apply', (Boolean) params.get('apply')));
        query.addAll(client.makeParam('delete', (Boolean) params.get('r_delete')));
        query.addAll(client.makeParam('action', (String) params.get('action')));
        query.addAll(client.makeParam('$location', (String) params.get('location')));
        query.addAll(client.makeParam('propertylist', (List<String>) params.get('propertylist'), 'csv'));
        query.addAll(client.makeParam('oauth.provider.id', (String) params.get('oauthProviderId')));

        List<OAS.Param> form = new List<OAS.Param>();

        return (OASComAdobeGraniteAuthImsImplIMSInst) client.invoke(
            'POST', '/system/console/configMgr/com.adobe.granite.auth.ims.impl.IMSInstanceCredentialsValidator', '',
            query, form,
            new Map<String, Object>(),
            new Map<String, Object>(),
            new List<String>{ 'application/json', 'text/plain' },
            new List<String>(),
            new List<String> { 'aemAuth' },
            OASComAdobeGraniteAuthImsImplIMSInst.class
        );
    }
    /**
     * 
     * 
     * @param post  (optional)
     * @param apply  (optional)
     * @param r_delete  (optional)
     * @param action  (optional)
     * @param location  (optional)
     * @param propertylist  (optional)
     * @param oauthProviderId  (optional)
     * @param oauthProviderImsAuthorizationUrl  (optional)
     * @param oauthProviderImsTokenUrl  (optional)
     * @param oauthProviderImsProfileUrl  (optional)
     * @param oauthProviderImsExtendedDetailsUrls  (optional)
     * @param oauthProviderImsValidateTokenUrl  (optional)
     * @param oauthProviderImsSessionProperty  (optional)
     * @param oauthProviderImsServiceTokenClientId  (optional)
     * @param oauthProviderImsServiceTokenClientSecret  (optional)
     * @param oauthProviderImsServiceToken  (optional)
     * @param imsOrgRef  (optional)
     * @param imsGroupMapping  (optional)
     * @param oauthProviderImsOnlyLicenseGroup  (optional)
     * @return OASComAdobeGraniteAuthImsImplIMSProv
     * @throws OAS.ApiException if fails to make API call
     */
    public OASComAdobeGraniteAuthImsImplIMSProv comAdobeGraniteAuthImsImplIMSProviderImpl(Map<String, Object> params) {
        List<OAS.Param> query = new List<OAS.Param>();

        // cast query params to verify their expected type
        query.addAll(client.makeParam('post', (Boolean) params.get('post')));
        query.addAll(client.makeParam('apply', (Boolean) params.get('apply')));
        query.addAll(client.makeParam('delete', (Boolean) params.get('r_delete')));
        query.addAll(client.makeParam('action', (String) params.get('action')));
        query.addAll(client.makeParam('$location', (String) params.get('location')));
        query.addAll(client.makeParam('propertylist', (List<String>) params.get('propertylist'), 'csv'));
        query.addAll(client.makeParam('oauth.provider.id', (String) params.get('oauthProviderId')));
        query.addAll(client.makeParam('oauth.provider.ims.authorization.url', (String) params.get('oauthProviderImsAuthorizationUrl')));
        query.addAll(client.makeParam('oauth.provider.ims.token.url', (String) params.get('oauthProviderImsTokenUrl')));
        query.addAll(client.makeParam('oauth.provider.ims.profile.url', (String) params.get('oauthProviderImsProfileUrl')));
        query.addAll(client.makeParams('oauth.provider.ims.extended.details.urls', (List<String>) params.get('oauthProviderImsExtendedDetailsUrls')));
        query.addAll(client.makeParam('oauth.provider.ims.validate.token.url', (String) params.get('oauthProviderImsValidateTokenUrl')));
        query.addAll(client.makeParam('oauth.provider.ims.session.property', (String) params.get('oauthProviderImsSessionProperty')));
        query.addAll(client.makeParam('oauth.provider.ims.service.token.client.id', (String) params.get('oauthProviderImsServiceTokenClientId')));
        query.addAll(client.makeParam('oauth.provider.ims.service.token.client.secret', (String) params.get('oauthProviderImsServiceTokenClientSecret')));
        query.addAll(client.makeParam('oauth.provider.ims.service.token', (String) params.get('oauthProviderImsServiceToken')));
        query.addAll(client.makeParam('ims.org.ref', (String) params.get('imsOrgRef')));
        query.addAll(client.makeParams('ims.group.mapping', (List<String>) params.get('imsGroupMapping')));
        query.addAll(client.makeParam('oauth.provider.ims.only.license.group', (Boolean) params.get('oauthProviderImsOnlyLicenseGroup')));

        List<OAS.Param> form = new List<OAS.Param>();

        return (OASComAdobeGraniteAuthImsImplIMSProv) client.invoke(
            'POST', '/system/console/configMgr/com.adobe.granite.auth.ims.impl.IMSProviderImpl', '',
            query, form,
            new Map<String, Object>(),
            new Map<String, Object>(),
            new List<String>{ 'application/json', 'text/plain' },
            new List<String>(),
            new List<String> { 'aemAuth' },
            OASComAdobeGraniteAuthImsImplIMSProv.class
        );
    }
    /**
     * 
     * 
     * @param post  (optional)
     * @param apply  (optional)
     * @param r_delete  (optional)
     * @param action  (optional)
     * @param location  (optional)
     * @param propertylist  (optional)
     * @param oauthConfigmanagerImsConfigid  (optional)
     * @param imsOwningEntity  (optional)
     * @param aemInstanceId  (optional)
     * @param imsServiceCode  (optional)
     * @return OASComAdobeGraniteAuthImsImplImsConf
     * @throws OAS.ApiException if fails to make API call
     */
    public OASComAdobeGraniteAuthImsImplImsConf comAdobeGraniteAuthImsImplImsConfigProviderImpl(Map<String, Object> params) {
        List<OAS.Param> query = new List<OAS.Param>();

        // cast query params to verify their expected type
        query.addAll(client.makeParam('post', (Boolean) params.get('post')));
        query.addAll(client.makeParam('apply', (Boolean) params.get('apply')));
        query.addAll(client.makeParam('delete', (Boolean) params.get('r_delete')));
        query.addAll(client.makeParam('action', (String) params.get('action')));
        query.addAll(client.makeParam('$location', (String) params.get('location')));
        query.addAll(client.makeParam('propertylist', (List<String>) params.get('propertylist'), 'csv'));
        query.addAll(client.makeParam('oauth.configmanager.ims.configid', (String) params.get('oauthConfigmanagerImsConfigid')));
        query.addAll(client.makeParam('ims.owningEntity', (String) params.get('imsOwningEntity')));
        query.addAll(client.makeParam('aem.instanceId', (String) params.get('aemInstanceId')));
        query.addAll(client.makeParam('ims.serviceCode', (String) params.get('imsServiceCode')));

        List<OAS.Param> form = new List<OAS.Param>();

        return (OASComAdobeGraniteAuthImsImplImsConf) client.invoke(
            'POST', '/system/console/configMgr/com.adobe.granite.auth.ims.impl.ImsConfigProviderImpl', '',
            query, form,
            new Map<String, Object>(),
            new Map<String, Object>(),
            new List<String>{ 'application/json', 'text/plain' },
            new List<String>(),
            new List<String> { 'aemAuth' },
            OASComAdobeGraniteAuthImsImplImsConf.class
        );
    }
    /**
     * 
     * 
     * @param post  (optional)
     * @param apply  (optional)
     * @param r_delete  (optional)
     * @param action  (optional)
     * @param location  (optional)
     * @param propertylist  (optional)
     * @param name  (optional)
     * @param authTokenProviderTitle  (optional)
     * @param authTokenProviderDefaultClaims  (optional)
     * @param authTokenProviderEndpoint  (optional)
     * @param authAccessTokenRequest  (optional)
     * @param authTokenProviderKeypairAlias  (optional)
     * @param authTokenProviderConnTimeout  (optional)
     * @param authTokenProviderSoTimeout  (optional)
     * @param authTokenProviderClientId  (optional)
     * @param authTokenProviderScope  (optional)
     * @param authTokenProviderReuseAccessToken  (optional)
     * @param authTokenProviderRelaxedSsl  (optional)
     * @param tokenRequestCustomizerType  (optional)
     * @param authTokenValidatorType  (optional)
     * @return OASComAdobeGraniteAuthOauthAccesstok
     * @throws OAS.ApiException if fails to make API call
     */
    public OASComAdobeGraniteAuthOauthAccesstok comAdobeGraniteAuthOauthAccesstokenProvider(Map<String, Object> params) {
        List<OAS.Param> query = new List<OAS.Param>();

        // cast query params to verify their expected type
        query.addAll(client.makeParam('post', (Boolean) params.get('post')));
        query.addAll(client.makeParam('apply', (Boolean) params.get('apply')));
        query.addAll(client.makeParam('delete', (Boolean) params.get('r_delete')));
        query.addAll(client.makeParam('action', (String) params.get('action')));
        query.addAll(client.makeParam('$location', (String) params.get('location')));
        query.addAll(client.makeParam('propertylist', (List<String>) params.get('propertylist'), 'csv'));
        query.addAll(client.makeParam('name', (String) params.get('name')));
        query.addAll(client.makeParam('auth.token.provider.title', (String) params.get('authTokenProviderTitle')));
        query.addAll(client.makeParams('auth.token.provider.default.claims', (List<String>) params.get('authTokenProviderDefaultClaims')));
        query.addAll(client.makeParam('auth.token.provider.endpoint', (String) params.get('authTokenProviderEndpoint')));
        query.addAll(client.makeParam('auth.access.token.request', (String) params.get('authAccessTokenRequest')));
        query.addAll(client.makeParam('auth.token.provider.keypair.alias', (String) params.get('authTokenProviderKeypairAlias')));
        query.addAll(client.makeParam('auth.token.provider.conn.timeout', (Integer) params.get('authTokenProviderConnTimeout')));
        query.addAll(client.makeParam('auth.token.provider.so.timeout', (Integer) params.get('authTokenProviderSoTimeout')));
        query.addAll(client.makeParam('auth.token.provider.client.id', (String) params.get('authTokenProviderClientId')));
        query.addAll(client.makeParam('auth.token.provider.scope', (String) params.get('authTokenProviderScope')));
        query.addAll(client.makeParam('auth.token.provider.reuse.access.token', (Boolean) params.get('authTokenProviderReuseAccessToken')));
        query.addAll(client.makeParam('auth.token.provider.relaxed.ssl', (Boolean) params.get('authTokenProviderRelaxedSsl')));
        query.addAll(client.makeParam('token.request.customizer.type', (String) params.get('tokenRequestCustomizerType')));
        query.addAll(client.makeParam('auth.token.validator.type', (String) params.get('authTokenValidatorType')));

        List<OAS.Param> form = new List<OAS.Param>();

        return (OASComAdobeGraniteAuthOauthAccesstok) client.invoke(
            'POST', '/system/console/configMgr/com.adobe.granite.auth.oauth.accesstoken.provider', '',
            query, form,
            new Map<String, Object>(),
            new Map<String, Object>(),
            new List<String>{ 'application/json', 'text/plain' },
            new List<String>(),
            new List<String> { 'aemAuth' },
            OASComAdobeGraniteAuthOauthAccesstok.class
        );
    }
    /**
     * 
     * 
     * @param post  (optional)
     * @param apply  (optional)
     * @param r_delete  (optional)
     * @param action  (optional)
     * @param location  (optional)
     * @param propertylist  (optional)
     * @param path  (optional)
     * @param oauthClientIdsAllowed  (optional)
     * @param authBearerSyncIms  (optional)
     * @param authTokenRequestParameter  (optional)
     * @param oauthBearerConfigid  (optional)
     * @param oauthJwtSupport  (optional)
     * @return OASComAdobeGraniteAuthOauthImplBeare
     * @throws OAS.ApiException if fails to make API call
     */
    public OASComAdobeGraniteAuthOauthImplBeare comAdobeGraniteAuthOauthImplBearerAuthenticationHandler(Map<String, Object> params) {
        List<OAS.Param> query = new List<OAS.Param>();

        // cast query params to verify their expected type
        query.addAll(client.makeParam('post', (Boolean) params.get('post')));
        query.addAll(client.makeParam('apply', (Boolean) params.get('apply')));
        query.addAll(client.makeParam('delete', (Boolean) params.get('r_delete')));
        query.addAll(client.makeParam('action', (String) params.get('action')));
        query.addAll(client.makeParam('$location', (String) params.get('location')));
        query.addAll(client.makeParam('propertylist', (List<String>) params.get('propertylist'), 'csv'));
        query.addAll(client.makeParam('path', (String) params.get('path')));
        query.addAll(client.makeParams('oauth.clientIds.allowed', (List<String>) params.get('oauthClientIdsAllowed')));
        query.addAll(client.makeParam('auth.bearer.sync.ims', (Boolean) params.get('authBearerSyncIms')));
        query.addAll(client.makeParam('auth.tokenRequestParameter', (String) params.get('authTokenRequestParameter')));
        query.addAll(client.makeParam('oauth.bearer.configid', (String) params.get('oauthBearerConfigid')));
        query.addAll(client.makeParam('oauth.jwt.support', (Boolean) params.get('oauthJwtSupport')));

        List<OAS.Param> form = new List<OAS.Param>();

        return (OASComAdobeGraniteAuthOauthImplBeare) client.invoke(
            'POST', '/system/console/configMgr/com.adobe.granite.auth.oauth.impl.BearerAuthenticationHandler', '',
            query, form,
            new Map<String, Object>(),
            new Map<String, Object>(),
            new List<String>{ 'application/json', 'text/plain' },
            new List<String>(),
            new List<String> { 'aemAuth' },
            OASComAdobeGraniteAuthOauthImplBeare.class
        );
    }
    /**
     * 
     * 
     * @param post  (optional)
     * @param apply  (optional)
     * @param r_delete  (optional)
     * @param action  (optional)
     * @param location  (optional)
     * @param propertylist  (optional)
     * @param authTokenValidatorType  (optional)
     * @return OASComAdobeGraniteAuthOauthImplDefau
     * @throws OAS.ApiException if fails to make API call
     */
    public OASComAdobeGraniteAuthOauthImplDefau comAdobeGraniteAuthOauthImplDefaultTokenValidatorImpl(Map<String, Object> params) {
        List<OAS.Param> query = new List<OAS.Param>();

        // cast query params to verify their expected type
        query.addAll(client.makeParam('post', (Boolean) params.get('post')));
        query.addAll(client.makeParam('apply', (Boolean) params.get('apply')));
        query.addAll(client.makeParam('delete', (Boolean) params.get('r_delete')));
        query.addAll(client.makeParam('action', (String) params.get('action')));
        query.addAll(client.makeParam('$location', (String) params.get('location')));
        query.addAll(client.makeParam('propertylist', (List<String>) params.get('propertylist'), 'csv'));
        query.addAll(client.makeParam('auth.token.validator.type', (String) params.get('authTokenValidatorType')));

        List<OAS.Param> form = new List<OAS.Param>();

        return (OASComAdobeGraniteAuthOauthImplDefau) client.invoke(
            'POST', '/system/console/configMgr/com.adobe.granite.auth.oauth.impl.DefaultTokenValidatorImpl', '',
            query, form,
            new Map<String, Object>(),
            new Map<String, Object>(),
            new List<String>{ 'application/json', 'text/plain' },
            new List<String>(),
            new List<String> { 'aemAuth' },
            OASComAdobeGraniteAuthOauthImplDefau.class
        );
    }
    /**
     * 
     * 
     * @param post  (optional)
     * @param apply  (optional)
     * @param r_delete  (optional)
     * @param action  (optional)
     * @param location  (optional)
     * @param propertylist  (optional)
     * @param oauthProviderId  (optional)
     * @return OASComAdobeGraniteAuthOauthImplFaceb
     * @throws OAS.ApiException if fails to make API call
     */
    public OASComAdobeGraniteAuthOauthImplFaceb comAdobeGraniteAuthOauthImplFacebookProviderImpl(Map<String, Object> params) {
        List<OAS.Param> query = new List<OAS.Param>();

        // cast query params to verify their expected type
        query.addAll(client.makeParam('post', (Boolean) params.get('post')));
        query.addAll(client.makeParam('apply', (Boolean) params.get('apply')));
        query.addAll(client.makeParam('delete', (Boolean) params.get('r_delete')));
        query.addAll(client.makeParam('action', (String) params.get('action')));
        query.addAll(client.makeParam('$location', (String) params.get('location')));
        query.addAll(client.makeParam('propertylist', (List<String>) params.get('propertylist'), 'csv'));
        query.addAll(client.makeParam('oauth.provider.id', (String) params.get('oauthProviderId')));

        List<OAS.Param> form = new List<OAS.Param>();

        return (OASComAdobeGraniteAuthOauthImplFaceb) client.invoke(
            'POST', '/system/console/configMgr/com.adobe.granite.auth.oauth.impl.FacebookProviderImpl', '',
            query, form,
            new Map<String, Object>(),
            new Map<String, Object>(),
            new List<String>{ 'application/json', 'text/plain' },
            new List<String>(),
            new List<String> { 'aemAuth' },
            OASComAdobeGraniteAuthOauthImplFaceb.class
        );
    }
    /**
     * 
     * 
     * @param post  (optional)
     * @param apply  (optional)
     * @param r_delete  (optional)
     * @param action  (optional)
     * @param location  (optional)
     * @param propertylist  (optional)
     * @param oauthProviderId  (optional)
     * @param oauthProviderGithubAuthorizationUrl  (optional)
     * @param oauthProviderGithubTokenUrl  (optional)
     * @param oauthProviderGithubProfileUrl  (optional)
     * @return OASComAdobeGraniteAuthOauthImplGithu
     * @throws OAS.ApiException if fails to make API call
     */
    public OASComAdobeGraniteAuthOauthImplGithu comAdobeGraniteAuthOauthImplGithubProviderImpl(Map<String, Object> params) {
        List<OAS.Param> query = new List<OAS.Param>();

        // cast query params to verify their expected type
        query.addAll(client.makeParam('post', (Boolean) params.get('post')));
        query.addAll(client.makeParam('apply', (Boolean) params.get('apply')));
        query.addAll(client.makeParam('delete', (Boolean) params.get('r_delete')));
        query.addAll(client.makeParam('action', (String) params.get('action')));
        query.addAll(client.makeParam('$location', (String) params.get('location')));
        query.addAll(client.makeParam('propertylist', (List<String>) params.get('propertylist'), 'csv'));
        query.addAll(client.makeParam('oauth.provider.id', (String) params.get('oauthProviderId')));
        query.addAll(client.makeParam('oauth.provider.github.authorization.url', (String) params.get('oauthProviderGithubAuthorizationUrl')));
        query.addAll(client.makeParam('oauth.provider.github.token.url', (String) params.get('oauthProviderGithubTokenUrl')));
        query.addAll(client.makeParam('oauth.provider.github.profile.url', (String) params.get('oauthProviderGithubProfileUrl')));

        List<OAS.Param> form = new List<OAS.Param>();

        return (OASComAdobeGraniteAuthOauthImplGithu) client.invoke(
            'POST', '/system/console/configMgr/com.adobe.granite.auth.oauth.impl.GithubProviderImpl', '',
            query, form,
            new Map<String, Object>(),
            new Map<String, Object>(),
            new List<String>{ 'application/json', 'text/plain' },
            new List<String>(),
            new List<String> { 'aemAuth' },
            OASComAdobeGraniteAuthOauthImplGithu.class
        );
    }
    /**
     * 
     * 
     * @param post  (optional)
     * @param apply  (optional)
     * @param r_delete  (optional)
     * @param action  (optional)
     * @param location  (optional)
     * @param propertylist  (optional)
     * @param oauthProviderId  (optional)
     * @param oauthProviderGraniteAuthorizationUrl  (optional)
     * @param oauthProviderGraniteTokenUrl  (optional)
     * @param oauthProviderGraniteProfileUrl  (optional)
     * @param oauthProviderGraniteExtendedDetailsUrls  (optional)
     * @return OASComAdobeGraniteAuthOauthImplGrani
     * @throws OAS.ApiException if fails to make API call
     */
    public OASComAdobeGraniteAuthOauthImplGrani comAdobeGraniteAuthOauthImplGraniteProvider(Map<String, Object> params) {
        List<OAS.Param> query = new List<OAS.Param>();

        // cast query params to verify their expected type
        query.addAll(client.makeParam('post', (Boolean) params.get('post')));
        query.addAll(client.makeParam('apply', (Boolean) params.get('apply')));
        query.addAll(client.makeParam('delete', (Boolean) params.get('r_delete')));
        query.addAll(client.makeParam('action', (String) params.get('action')));
        query.addAll(client.makeParam('$location', (String) params.get('location')));
        query.addAll(client.makeParam('propertylist', (List<String>) params.get('propertylist'), 'csv'));
        query.addAll(client.makeParam('oauth.provider.id', (String) params.get('oauthProviderId')));
        query.addAll(client.makeParam('oauth.provider.granite.authorization.url', (String) params.get('oauthProviderGraniteAuthorizationUrl')));
        query.addAll(client.makeParam('oauth.provider.granite.token.url', (String) params.get('oauthProviderGraniteTokenUrl')));
        query.addAll(client.makeParam('oauth.provider.granite.profile.url', (String) params.get('oauthProviderGraniteProfileUrl')));
        query.addAll(client.makeParam('oauth.provider.granite.extended.details.urls', (String) params.get('oauthProviderGraniteExtendedDetailsUrls')));

        List<OAS.Param> form = new List<OAS.Param>();

        return (OASComAdobeGraniteAuthOauthImplGrani) client.invoke(
            'POST', '/system/console/configMgr/com.adobe.granite.auth.oauth.impl.GraniteProvider', '',
            query, form,
            new Map<String, Object>(),
            new Map<String, Object>(),
            new List<String>{ 'application/json', 'text/plain' },
            new List<String>(),
            new List<String> { 'aemAuth' },
            OASComAdobeGraniteAuthOauthImplGrani.class
        );
    }
    /**
     * 
     * 
     * @param post  (optional)
     * @param apply  (optional)
     * @param r_delete  (optional)
     * @param action  (optional)
     * @param location  (optional)
     * @param propertylist  (optional)
     * @param oauthCookieLoginTimeout  (optional)
     * @param oauthCookieMaxAge  (optional)
     * @return OASComAdobeGraniteAuthOauthImplHelpe
     * @throws OAS.ApiException if fails to make API call
     */
    public OASComAdobeGraniteAuthOauthImplHelpe comAdobeGraniteAuthOauthImplHelperProviderConfigManager(Map<String, Object> params) {
        List<OAS.Param> query = new List<OAS.Param>();

        // cast query params to verify their expected type
        query.addAll(client.makeParam('post', (Boolean) params.get('post')));
        query.addAll(client.makeParam('apply', (Boolean) params.get('apply')));
        query.addAll(client.makeParam('delete', (Boolean) params.get('r_delete')));
        query.addAll(client.makeParam('action', (String) params.get('action')));
        query.addAll(client.makeParam('$location', (String) params.get('location')));
        query.addAll(client.makeParam('propertylist', (List<String>) params.get('propertylist'), 'csv'));
        query.addAll(client.makeParam('oauth.cookie.login.timeout', (String) params.get('oauthCookieLoginTimeout')));
        query.addAll(client.makeParam('oauth.cookie.max.age', (String) params.get('oauthCookieMaxAge')));

        List<OAS.Param> form = new List<OAS.Param>();

        return (OASComAdobeGraniteAuthOauthImplHelpe) client.invoke(
            'POST', '/system/console/configMgr/com.adobe.granite.auth.oauth.impl.helper.ProviderConfigManager', '',
            query, form,
            new Map<String, Object>(),
            new Map<String, Object>(),
            new List<String>{ 'application/json', 'text/plain' },
            new List<String>(),
            new List<String> { 'aemAuth' },
            OASComAdobeGraniteAuthOauthImplHelpe.class
        );
    }
    /**
     * 
     * 
     * @param post  (optional)
     * @param apply  (optional)
     * @param r_delete  (optional)
     * @param action  (optional)
     * @param location  (optional)
     * @param propertylist  (optional)
     * @param oauthCookieLoginTimeout  (optional)
     * @param oauthCookieMaxAge  (optional)
     * @return OASComAdobeGraniteAuthOauthImplHelpe
     * @throws OAS.ApiException if fails to make API call
     */
    public OASComAdobeGraniteAuthOauthImplHelpe comAdobeGraniteAuthOauthImplHelperProviderConfigManagerInternal(Map<String, Object> params) {
        List<OAS.Param> query = new List<OAS.Param>();

        // cast query params to verify their expected type
        query.addAll(client.makeParam('post', (Boolean) params.get('post')));
        query.addAll(client.makeParam('apply', (Boolean) params.get('apply')));
        query.addAll(client.makeParam('delete', (Boolean) params.get('r_delete')));
        query.addAll(client.makeParam('action', (String) params.get('action')));
        query.addAll(client.makeParam('$location', (String) params.get('location')));
        query.addAll(client.makeParam('propertylist', (List<String>) params.get('propertylist'), 'csv'));
        query.addAll(client.makeParam('oauth.cookie.login.timeout', (String) params.get('oauthCookieLoginTimeout')));
        query.addAll(client.makeParam('oauth.cookie.max.age', (String) params.get('oauthCookieMaxAge')));

        List<OAS.Param> form = new List<OAS.Param>();

        return (OASComAdobeGraniteAuthOauthImplHelpe) client.invoke(
            'POST', '/system/console/configMgr/com.adobe.granite.auth.oauth.impl.helper.ProviderConfigManagerInternal', '',
            query, form,
            new Map<String, Object>(),
            new Map<String, Object>(),
            new List<String>{ 'application/json', 'text/plain' },
            new List<String>(),
            new List<String> { 'aemAuth' },
            OASComAdobeGraniteAuthOauthImplHelpe.class
        );
    }
    /**
     * 
     * 
     * @param post  (optional)
     * @param apply  (optional)
     * @param r_delete  (optional)
     * @param action  (optional)
     * @param location  (optional)
     * @param propertylist  (optional)
     * @param path  (optional)
     * @return OASComAdobeGraniteAuthOauthImplOAuth
     * @throws OAS.ApiException if fails to make API call
     */
    public OASComAdobeGraniteAuthOauthImplOAuth comAdobeGraniteAuthOauthImplOAuthAuthenticationHandler(Map<String, Object> params) {
        List<OAS.Param> query = new List<OAS.Param>();

        // cast query params to verify their expected type
        query.addAll(client.makeParam('post', (Boolean) params.get('post')));
        query.addAll(client.makeParam('apply', (Boolean) params.get('apply')));
        query.addAll(client.makeParam('delete', (Boolean) params.get('r_delete')));
        query.addAll(client.makeParam('action', (String) params.get('action')));
        query.addAll(client.makeParam('$location', (String) params.get('location')));
        query.addAll(client.makeParam('propertylist', (List<String>) params.get('propertylist'), 'csv'));
        query.addAll(client.makeParam('path', (String) params.get('path')));

        List<OAS.Param> form = new List<OAS.Param>();

        return (OASComAdobeGraniteAuthOauthImplOAuth) client.invoke(
            'POST', '/system/console/configMgr/com.adobe.granite.auth.oauth.impl.OAuthAuthenticationHandler', '',
            query, form,
            new Map<String, Object>(),
            new Map<String, Object>(),
            new List<String>{ 'application/json', 'text/plain' },
            new List<String>(),
            new List<String> { 'aemAuth' },
            OASComAdobeGraniteAuthOauthImplOAuth.class
        );
    }
    /**
     * 
     * 
     * @param post  (optional)
     * @param apply  (optional)
     * @param r_delete  (optional)
     * @param action  (optional)
     * @param location  (optional)
     * @param propertylist  (optional)
     * @param oauthProviderId  (optional)
     * @return OASComAdobeGraniteAuthOauthImplTwitt
     * @throws OAS.ApiException if fails to make API call
     */
    public OASComAdobeGraniteAuthOauthImplTwitt comAdobeGraniteAuthOauthImplTwitterProviderImpl(Map<String, Object> params) {
        List<OAS.Param> query = new List<OAS.Param>();

        // cast query params to verify their expected type
        query.addAll(client.makeParam('post', (Boolean) params.get('post')));
        query.addAll(client.makeParam('apply', (Boolean) params.get('apply')));
        query.addAll(client.makeParam('delete', (Boolean) params.get('r_delete')));
        query.addAll(client.makeParam('action', (String) params.get('action')));
        query.addAll(client.makeParam('$location', (String) params.get('location')));
        query.addAll(client.makeParam('propertylist', (List<String>) params.get('propertylist'), 'csv'));
        query.addAll(client.makeParam('oauth.provider.id', (String) params.get('oauthProviderId')));

        List<OAS.Param> form = new List<OAS.Param>();

        return (OASComAdobeGraniteAuthOauthImplTwitt) client.invoke(
            'POST', '/system/console/configMgr/com.adobe.granite.auth.oauth.impl.TwitterProviderImpl', '',
            query, form,
            new Map<String, Object>(),
            new Map<String, Object>(),
            new List<String>{ 'application/json', 'text/plain' },
            new List<String>(),
            new List<String> { 'aemAuth' },
            OASComAdobeGraniteAuthOauthImplTwitt.class
        );
    }
    /**
     * 
     * 
     * @param post  (optional)
     * @param apply  (optional)
     * @param r_delete  (optional)
     * @param action  (optional)
     * @param location  (optional)
     * @param propertylist  (optional)
     * @param oauthConfigId  (optional)
     * @param oauthClientId  (optional)
     * @param oauthClientSecret  (optional)
     * @param oauthScope  (optional)
     * @param oauthConfigProviderId  (optional)
     * @param oauthCreateUsers  (optional)
     * @param oauthUseridProperty  (optional)
     * @param forceStrictUsernameMatching  (optional)
     * @param oauthEncodeUserids  (optional)
     * @param oauthHashUserids  (optional)
     * @param oauthCallBackUrl  (optional)
     * @param oauthAccessTokenPersist  (optional)
     * @param oauthAccessTokenPersistCookie  (optional)
     * @param oauthCsrfStateProtection  (optional)
     * @param oauthRedirectRequestParams  (optional)
     * @param oauthConfigSiblingsAllow  (optional)
     * @return OASComAdobeGraniteAuthOauthProviderI
     * @throws OAS.ApiException if fails to make API call
     */
    public OASComAdobeGraniteAuthOauthProviderI comAdobeGraniteAuthOauthProvider(Map<String, Object> params) {
        List<OAS.Param> query = new List<OAS.Param>();

        // cast query params to verify their expected type
        query.addAll(client.makeParam('post', (Boolean) params.get('post')));
        query.addAll(client.makeParam('apply', (Boolean) params.get('apply')));
        query.addAll(client.makeParam('delete', (Boolean) params.get('r_delete')));
        query.addAll(client.makeParam('action', (String) params.get('action')));
        query.addAll(client.makeParam('$location', (String) params.get('location')));
        query.addAll(client.makeParam('propertylist', (List<String>) params.get('propertylist'), 'csv'));
        query.addAll(client.makeParam('oauth.config.id', (String) params.get('oauthConfigId')));
        query.addAll(client.makeParam('oauth.client.id', (String) params.get('oauthClientId')));
        query.addAll(client.makeParam('oauth.client.secret', (String) params.get('oauthClientSecret')));
        query.addAll(client.makeParams('oauth.scope', (List<String>) params.get('oauthScope')));
        query.addAll(client.makeParam('oauth.config.provider.id', (String) params.get('oauthConfigProviderId')));
        query.addAll(client.makeParam('oauth.create.users', (Boolean) params.get('oauthCreateUsers')));
        query.addAll(client.makeParam('oauth.userid.property', (String) params.get('oauthUseridProperty')));
        query.addAll(client.makeParam('force.strict.username.matching', (Boolean) params.get('forceStrictUsernameMatching')));
        query.addAll(client.makeParam('oauth.encode.userids', (Boolean) params.get('oauthEncodeUserids')));
        query.addAll(client.makeParam('oauth.hash.userids', (Boolean) params.get('oauthHashUserids')));
        query.addAll(client.makeParam('oauth.callBackUrl', (String) params.get('oauthCallBackUrl')));
        query.addAll(client.makeParam('oauth.access.token.persist', (Boolean) params.get('oauthAccessTokenPersist')));
        query.addAll(client.makeParam('oauth.access.token.persist.cookie', (Boolean) params.get('oauthAccessTokenPersistCookie')));
        query.addAll(client.makeParam('oauth.csrf.state.protection', (Boolean) params.get('oauthCsrfStateProtection')));
        query.addAll(client.makeParam('oauth.redirect.request.params', (Boolean) params.get('oauthRedirectRequestParams')));
        query.addAll(client.makeParam('oauth.config.siblings.allow', (Boolean) params.get('oauthConfigSiblingsAllow')));

        List<OAS.Param> form = new List<OAS.Param>();

        return (OASComAdobeGraniteAuthOauthProviderI) client.invoke(
            'POST', '/system/console/configMgr/com.adobe.granite.auth.oauth.provider', '',
            query, form,
            new Map<String, Object>(),
            new Map<String, Object>(),
            new List<String>{ 'application/json', 'text/plain' },
            new List<String>(),
            new List<String> { 'aemAuth' },
            OASComAdobeGraniteAuthOauthProviderI.class
        );
    }
    /**
     * 
     * 
     * @param post  (optional)
     * @param apply  (optional)
     * @param r_delete  (optional)
     * @param action  (optional)
     * @param location  (optional)
     * @param propertylist  (optional)
     * @param supportedPaths  (optional)
     * @return OASComAdobeGraniteAuthRequirementImp
     * @throws OAS.ApiException if fails to make API call
     */
    public OASComAdobeGraniteAuthRequirementImp comAdobeGraniteAuthRequirementImplDefaultRequirementHandler(Map<String, Object> params) {
        List<OAS.Param> query = new List<OAS.Param>();

        // cast query params to verify their expected type
        query.addAll(client.makeParam('post', (Boolean) params.get('post')));
        query.addAll(client.makeParam('apply', (Boolean) params.get('apply')));
        query.addAll(client.makeParam('delete', (Boolean) params.get('r_delete')));
        query.addAll(client.makeParam('action', (String) params.get('action')));
        query.addAll(client.makeParam('$location', (String) params.get('location')));
        query.addAll(client.makeParam('propertylist', (List<String>) params.get('propertylist'), 'csv'));
        query.addAll(client.makeParams('supportedPaths', (List<String>) params.get('supportedPaths')));

        List<OAS.Param> form = new List<OAS.Param>();

        return (OASComAdobeGraniteAuthRequirementImp) client.invoke(
            'POST', '/system/console/configMgr/com.adobe.granite.auth.requirement.impl.DefaultRequirementHandler', '',
            query, form,
            new Map<String, Object>(),
            new Map<String, Object>(),
            new List<String>{ 'application/json', 'text/plain' },
            new List<String>(),
            new List<String> { 'aemAuth' },
            OASComAdobeGraniteAuthRequirementImp.class
        );
    }
    /**
     * 
     * 
     * @param post  (optional)
     * @param apply  (optional)
     * @param r_delete  (optional)
     * @param action  (optional)
     * @param location  (optional)
     * @param propertylist  (optional)
     * @param path  (optional)
     * @param serviceRanking  (optional)
     * @param idpUrl  (optional)
     * @param idpCertAlias  (optional)
     * @param idpHttpRedirect  (optional)
     * @param serviceProviderEntityId  (optional)
     * @param assertionConsumerServiceURL  (optional)
     * @param spPrivateKeyAlias  (optional)
     * @param keyStorePassword  (optional)
     * @param defaultRedirectUrl  (optional)
     * @param userIDAttribute  (optional)
     * @param useEncryption  (optional)
     * @param createUser  (optional)
     * @param userIntermediatePath  (optional)
     * @param addGroupMemberships  (optional)
     * @param groupMembershipAttribute  (optional)
     * @param defaultGroups  (optional)
     * @param nameIdFormat  (optional)
     * @param synchronizeAttributes  (optional)
     * @param handleLogout  (optional)
     * @param logoutUrl  (optional)
     * @param clockTolerance  (optional)
     * @param digestMethod  (optional)
     * @param signatureMethod  (optional)
     * @param identitySyncType  (optional)
     * @param idpIdentifier  (optional)
     * @return OASComAdobeGraniteAuthSamlSamlAuthen
     * @throws OAS.ApiException if fails to make API call
     */
    public OASComAdobeGraniteAuthSamlSamlAuthen comAdobeGraniteAuthSamlSamlAuthenticationHandler(Map<String, Object> params) {
        List<OAS.Param> query = new List<OAS.Param>();

        // cast query params to verify their expected type
        query.addAll(client.makeParam('post', (Boolean) params.get('post')));
        query.addAll(client.makeParam('apply', (Boolean) params.get('apply')));
        query.addAll(client.makeParam('delete', (Boolean) params.get('r_delete')));
        query.addAll(client.makeParam('action', (String) params.get('action')));
        query.addAll(client.makeParam('$location', (String) params.get('location')));
        query.addAll(client.makeParam('propertylist', (List<String>) params.get('propertylist'), 'csv'));
        query.addAll(client.makeParams('path', (List<String>) params.get('path')));
        query.addAll(client.makeParam('service.ranking', (Integer) params.get('serviceRanking')));
        query.addAll(client.makeParam('idpUrl', (String) params.get('idpUrl')));
        query.addAll(client.makeParam('idpCertAlias', (String) params.get('idpCertAlias')));
        query.addAll(client.makeParam('idpHttpRedirect', (Boolean) params.get('idpHttpRedirect')));
        query.addAll(client.makeParam('serviceProviderEntityId', (String) params.get('serviceProviderEntityId')));
        query.addAll(client.makeParam('assertionConsumerServiceURL', (String) params.get('assertionConsumerServiceURL')));
        query.addAll(client.makeParam('spPrivateKeyAlias', (String) params.get('spPrivateKeyAlias')));
        query.addAll(client.makeParam('keyStorePassword', (String) params.get('keyStorePassword')));
        query.addAll(client.makeParam('defaultRedirectUrl', (String) params.get('defaultRedirectUrl')));
        query.addAll(client.makeParam('userIDAttribute', (String) params.get('userIDAttribute')));
        query.addAll(client.makeParam('useEncryption', (Boolean) params.get('useEncryption')));
        query.addAll(client.makeParam('createUser', (Boolean) params.get('createUser')));
        query.addAll(client.makeParam('userIntermediatePath', (String) params.get('userIntermediatePath')));
        query.addAll(client.makeParam('addGroupMemberships', (Boolean) params.get('addGroupMemberships')));
        query.addAll(client.makeParam('groupMembershipAttribute', (String) params.get('groupMembershipAttribute')));
        query.addAll(client.makeParams('defaultGroups', (List<String>) params.get('defaultGroups')));
        query.addAll(client.makeParam('nameIdFormat', (String) params.get('nameIdFormat')));
        query.addAll(client.makeParams('synchronizeAttributes', (List<String>) params.get('synchronizeAttributes')));
        query.addAll(client.makeParam('handleLogout', (Boolean) params.get('handleLogout')));
        query.addAll(client.makeParam('logoutUrl', (String) params.get('logoutUrl')));
        query.addAll(client.makeParam('clockTolerance', (Integer) params.get('clockTolerance')));
        query.addAll(client.makeParam('digestMethod', (String) params.get('digestMethod')));
        query.addAll(client.makeParam('signatureMethod', (String) params.get('signatureMethod')));
        query.addAll(client.makeParam('identitySyncType', (String) params.get('identitySyncType')));
        query.addAll(client.makeParam('idpIdentifier', (String) params.get('idpIdentifier')));

        List<OAS.Param> form = new List<OAS.Param>();

        return (OASComAdobeGraniteAuthSamlSamlAuthen) client.invoke(
            'POST', '/system/console/configMgr/com.adobe.granite.auth.saml.SamlAuthenticationHandler', '',
            query, form,
            new Map<String, Object>(),
            new Map<String, Object>(),
            new List<String>{ 'application/json', 'text/plain' },
            new List<String>(),
            new List<String> { 'aemAuth' },
            OASComAdobeGraniteAuthSamlSamlAuthen.class
        );
    }
    /**
     * 
     * 
     * @param post  (optional)
     * @param apply  (optional)
     * @param r_delete  (optional)
     * @param action  (optional)
     * @param location  (optional)
     * @param propertylist  (optional)
     * @param path  (optional)
     * @param serviceRanking  (optional)
     * @param jaasControlFlag  (optional)
     * @param jaasRealmName  (optional)
     * @param jaasRanking  (optional)
     * @param headers  (optional)
     * @param cookies  (optional)
     * @param parameters  (optional)
     * @param usermap  (optional)
     * @param format  (optional)
     * @param trustedCredentialsAttribute  (optional)
     * @return OASComAdobeGraniteAuthSsoImplSsoAuth
     * @throws OAS.ApiException if fails to make API call
     */
    public OASComAdobeGraniteAuthSsoImplSsoAuth comAdobeGraniteAuthSsoImplSsoAuthenticationHandler(Map<String, Object> params) {
        List<OAS.Param> query = new List<OAS.Param>();

        // cast query params to verify their expected type
        query.addAll(client.makeParam('post', (Boolean) params.get('post')));
        query.addAll(client.makeParam('apply', (Boolean) params.get('apply')));
        query.addAll(client.makeParam('delete', (Boolean) params.get('r_delete')));
        query.addAll(client.makeParam('action', (String) params.get('action')));
        query.addAll(client.makeParam('$location', (String) params.get('location')));
        query.addAll(client.makeParam('propertylist', (List<String>) params.get('propertylist'), 'csv'));
        query.addAll(client.makeParam('path', (String) params.get('path')));
        query.addAll(client.makeParam('service.ranking', (Integer) params.get('serviceRanking')));
        query.addAll(client.makeParam('jaas.controlFlag', (String) params.get('jaasControlFlag')));
        query.addAll(client.makeParam('jaas.realmName', (String) params.get('jaasRealmName')));
        query.addAll(client.makeParam('jaas.ranking', (Integer) params.get('jaasRanking')));
        query.addAll(client.makeParams('headers', (List<String>) params.get('headers')));
        query.addAll(client.makeParams('cookies', (List<String>) params.get('cookies')));
        query.addAll(client.makeParams('parameters', (List<String>) params.get('parameters')));
        query.addAll(client.makeParams('usermap', (List<String>) params.get('usermap')));
        query.addAll(client.makeParam('format', (String) params.get('format')));
        query.addAll(client.makeParam('trustedCredentialsAttribute', (String) params.get('trustedCredentialsAttribute')));

        List<OAS.Param> form = new List<OAS.Param>();

        return (OASComAdobeGraniteAuthSsoImplSsoAuth) client.invoke(
            'POST', '/system/console/configMgr/com.adobe.granite.auth.sso.impl.SsoAuthenticationHandler', '',
            query, form,
            new Map<String, Object>(),
            new Map<String, Object>(),
            new List<String>{ 'application/json', 'text/plain' },
            new List<String>(),
            new List<String> { 'aemAuth' },
            OASComAdobeGraniteAuthSsoImplSsoAuth.class
        );
    }
    /**
     * 
     * 
     * @param post  (optional)
     * @param apply  (optional)
     * @param r_delete  (optional)
     * @param action  (optional)
     * @param location  (optional)
     * @param propertylist  (optional)
     * @param hcTags  (optional)
     * @param minimumCodeCacheSize  (optional)
     * @return OASComAdobeGraniteBundlesHcImplCodeC
     * @throws OAS.ApiException if fails to make API call
     */
    public OASComAdobeGraniteBundlesHcImplCodeC comAdobeGraniteBundlesHcImplCodeCacheHealthCheck(Map<String, Object> params) {
        List<OAS.Param> query = new List<OAS.Param>();

        // cast query params to verify their expected type
        query.addAll(client.makeParam('post', (Boolean) params.get('post')));
        query.addAll(client.makeParam('apply', (Boolean) params.get('apply')));
        query.addAll(client.makeParam('delete', (Boolean) params.get('r_delete')));
        query.addAll(client.makeParam('action', (String) params.get('action')));
        query.addAll(client.makeParam('$location', (String) params.get('location')));
        query.addAll(client.makeParam('propertylist', (List<String>) params.get('propertylist'), 'csv'));
        query.addAll(client.makeParams('hc.tags', (List<String>) params.get('hcTags')));
        query.addAll(client.makeParam('minimum.code.cache.size', (Integer) params.get('minimumCodeCacheSize')));

        List<OAS.Param> form = new List<OAS.Param>();

        return (OASComAdobeGraniteBundlesHcImplCodeC) client.invoke(
            'POST', '/system/console/configMgr/com.adobe.granite.bundles.hc.impl.CodeCacheHealthCheck', '',
            query, form,
            new Map<String, Object>(),
            new Map<String, Object>(),
            new List<String>{ 'application/json', 'text/plain' },
            new List<String>(),
            new List<String> { 'aemAuth' },
            OASComAdobeGraniteBundlesHcImplCodeC.class
        );
    }
    /**
     * 
     * 
     * @param post  (optional)
     * @param apply  (optional)
     * @param r_delete  (optional)
     * @param action  (optional)
     * @param location  (optional)
     * @param propertylist  (optional)
     * @param hcTags  (optional)
     * @return OASComAdobeGraniteBundlesHcImplCrxde
     * @throws OAS.ApiException if fails to make API call
     */
    public OASComAdobeGraniteBundlesHcImplCrxde comAdobeGraniteBundlesHcImplCrxdeSupportBundleHealthCheck(Map<String, Object> params) {
        List<OAS.Param> query = new List<OAS.Param>();

        // cast query params to verify their expected type
        query.addAll(client.makeParam('post', (Boolean) params.get('post')));
        query.addAll(client.makeParam('apply', (Boolean) params.get('apply')));
        query.addAll(client.makeParam('delete', (Boolean) params.get('r_delete')));
        query.addAll(client.makeParam('action', (String) params.get('action')));
        query.addAll(client.makeParam('$location', (String) params.get('location')));
        query.addAll(client.makeParam('propertylist', (List<String>) params.get('propertylist'), 'csv'));
        query.addAll(client.makeParams('hc.tags', (List<String>) params.get('hcTags')));

        List<OAS.Param> form = new List<OAS.Param>();

        return (OASComAdobeGraniteBundlesHcImplCrxde) client.invoke(
            'POST', '/system/console/configMgr/com.adobe.granite.bundles.hc.impl.CrxdeSupportBundleHealthCheck', '',
            query, form,
            new Map<String, Object>(),
            new Map<String, Object>(),
            new List<String>{ 'application/json', 'text/plain' },
            new List<String>(),
            new List<String> { 'aemAuth' },
            OASComAdobeGraniteBundlesHcImplCrxde.class
        );
    }
    /**
     * 
     * 
     * @param post  (optional)
     * @param apply  (optional)
     * @param r_delete  (optional)
     * @param action  (optional)
     * @param location  (optional)
     * @param propertylist  (optional)
     * @param hcTags  (optional)
     * @return OASComAdobeGraniteBundlesHcImplDavEx
     * @throws OAS.ApiException if fails to make API call
     */
    public OASComAdobeGraniteBundlesHcImplDavEx comAdobeGraniteBundlesHcImplDavExBundleHealthCheck(Map<String, Object> params) {
        List<OAS.Param> query = new List<OAS.Param>();

        // cast query params to verify their expected type
        query.addAll(client.makeParam('post', (Boolean) params.get('post')));
        query.addAll(client.makeParam('apply', (Boolean) params.get('apply')));
        query.addAll(client.makeParam('delete', (Boolean) params.get('r_delete')));
        query.addAll(client.makeParam('action', (String) params.get('action')));
        query.addAll(client.makeParam('$location', (String) params.get('location')));
        query.addAll(client.makeParam('propertylist', (List<String>) params.get('propertylist'), 'csv'));
        query.addAll(client.makeParams('hc.tags', (List<String>) params.get('hcTags')));

        List<OAS.Param> form = new List<OAS.Param>();

        return (OASComAdobeGraniteBundlesHcImplDavEx) client.invoke(
            'POST', '/system/console/configMgr/com.adobe.granite.bundles.hc.impl.DavExBundleHealthCheck', '',
            query, form,
            new Map<String, Object>(),
            new Map<String, Object>(),
            new List<String>{ 'application/json', 'text/plain' },
            new List<String>(),
            new List<String> { 'aemAuth' },
            OASComAdobeGraniteBundlesHcImplDavEx.class
        );
    }
    /**
     * 
     * 
     * @param post  (optional)
     * @param apply  (optional)
     * @param r_delete  (optional)
     * @param action  (optional)
     * @param location  (optional)
     * @param propertylist  (optional)
     * @param hcTags  (optional)
     * @param ignoredBundles  (optional)
     * @return OASComAdobeGraniteBundlesHcImplInact
     * @throws OAS.ApiException if fails to make API call
     */
    public OASComAdobeGraniteBundlesHcImplInact comAdobeGraniteBundlesHcImplInactiveBundlesHealthCheck(Map<String, Object> params) {
        List<OAS.Param> query = new List<OAS.Param>();

        // cast query params to verify their expected type
        query.addAll(client.makeParam('post', (Boolean) params.get('post')));
        query.addAll(client.makeParam('apply', (Boolean) params.get('apply')));
        query.addAll(client.makeParam('delete', (Boolean) params.get('r_delete')));
        query.addAll(client.makeParam('action', (String) params.get('action')));
        query.addAll(client.makeParam('$location', (String) params.get('location')));
        query.addAll(client.makeParam('propertylist', (List<String>) params.get('propertylist'), 'csv'));
        query.addAll(client.makeParams('hc.tags', (List<String>) params.get('hcTags')));
        query.addAll(client.makeParams('ignored.bundles', (List<String>) params.get('ignoredBundles')));

        List<OAS.Param> form = new List<OAS.Param>();

        return (OASComAdobeGraniteBundlesHcImplInact) client.invoke(
            'POST', '/system/console/configMgr/com.adobe.granite.bundles.hc.impl.InactiveBundlesHealthCheck', '',
            query, form,
            new Map<String, Object>(),
            new Map<String, Object>(),
            new List<String>{ 'application/json', 'text/plain' },
            new List<String>(),
            new List<String> { 'aemAuth' },
            OASComAdobeGraniteBundlesHcImplInact.class
        );
    }
    /**
     * 
     * 
     * @param post  (optional)
     * @param apply  (optional)
     * @param r_delete  (optional)
     * @param action  (optional)
     * @param location  (optional)
     * @param propertylist  (optional)
     * @param hcTags  (optional)
     * @param maxQueuedJobs  (optional)
     * @return OASComAdobeGraniteBundlesHcImplJobsH
     * @throws OAS.ApiException if fails to make API call
     */
    public OASComAdobeGraniteBundlesHcImplJobsH comAdobeGraniteBundlesHcImplJobsHealthCheck(Map<String, Object> params) {
        List<OAS.Param> query = new List<OAS.Param>();

        // cast query params to verify their expected type
        query.addAll(client.makeParam('post', (Boolean) params.get('post')));
        query.addAll(client.makeParam('apply', (Boolean) params.get('apply')));
        query.addAll(client.makeParam('delete', (Boolean) params.get('r_delete')));
        query.addAll(client.makeParam('action', (String) params.get('action')));
        query.addAll(client.makeParam('$location', (String) params.get('location')));
        query.addAll(client.makeParam('propertylist', (List<String>) params.get('propertylist'), 'csv'));
        query.addAll(client.makeParams('hc.tags', (List<String>) params.get('hcTags')));
        query.addAll(client.makeParam('max.queued.jobs', (Integer) params.get('maxQueuedJobs')));

        List<OAS.Param> form = new List<OAS.Param>();

        return (OASComAdobeGraniteBundlesHcImplJobsH) client.invoke(
            'POST', '/system/console/configMgr/com.adobe.granite.bundles.hc.impl.JobsHealthCheck', '',
            query, form,
            new Map<String, Object>(),
            new Map<String, Object>(),
            new List<String>{ 'application/json', 'text/plain' },
            new List<String>(),
            new List<String> { 'aemAuth' },
            OASComAdobeGraniteBundlesHcImplJobsH.class
        );
    }
    /**
     * 
     * 
     * @param post  (optional)
     * @param apply  (optional)
     * @param r_delete  (optional)
     * @param action  (optional)
     * @param location  (optional)
     * @param propertylist  (optional)
     * @param hcTags  (optional)
     * @return OASComAdobeGraniteBundlesHcImplSling
     * @throws OAS.ApiException if fails to make API call
     */
    public OASComAdobeGraniteBundlesHcImplSling comAdobeGraniteBundlesHcImplSlingGetServletHealthCheck(Map<String, Object> params) {
        List<OAS.Param> query = new List<OAS.Param>();

        // cast query params to verify their expected type
        query.addAll(client.makeParam('post', (Boolean) params.get('post')));
        query.addAll(client.makeParam('apply', (Boolean) params.get('apply')));
        query.addAll(client.makeParam('delete', (Boolean) params.get('r_delete')));
        query.addAll(client.makeParam('action', (String) params.get('action')));
        query.addAll(client.makeParam('$location', (String) params.get('location')));
        query.addAll(client.makeParam('propertylist', (List<String>) params.get('propertylist'), 'csv'));
        query.addAll(client.makeParams('hc.tags', (List<String>) params.get('hcTags')));

        List<OAS.Param> form = new List<OAS.Param>();

        return (OASComAdobeGraniteBundlesHcImplSling) client.invoke(
            'POST', '/system/console/configMgr/com.adobe.granite.bundles.hc.impl.SlingGetServletHealthCheck', '',
            query, form,
            new Map<String, Object>(),
            new Map<String, Object>(),
            new List<String>{ 'application/json', 'text/plain' },
            new List<String>(),
            new List<String> { 'aemAuth' },
            OASComAdobeGraniteBundlesHcImplSling.class
        );
    }
    /**
     * 
     * 
     * @param post  (optional)
     * @param apply  (optional)
     * @param r_delete  (optional)
     * @param action  (optional)
     * @param location  (optional)
     * @param propertylist  (optional)
     * @param hcTags  (optional)
     * @return OASComAdobeGraniteBundlesHcImplSling
     * @throws OAS.ApiException if fails to make API call
     */
    public OASComAdobeGraniteBundlesHcImplSling comAdobeGraniteBundlesHcImplSlingJavaScriptHandlerHealthCheck(Map<String, Object> params) {
        List<OAS.Param> query = new List<OAS.Param>();

        // cast query params to verify their expected type
        query.addAll(client.makeParam('post', (Boolean) params.get('post')));
        query.addAll(client.makeParam('apply', (Boolean) params.get('apply')));
        query.addAll(client.makeParam('delete', (Boolean) params.get('r_delete')));
        query.addAll(client.makeParam('action', (String) params.get('action')));
        query.addAll(client.makeParam('$location', (String) params.get('location')));
        query.addAll(client.makeParam('propertylist', (List<String>) params.get('propertylist'), 'csv'));
        query.addAll(client.makeParams('hc.tags', (List<String>) params.get('hcTags')));

        List<OAS.Param> form = new List<OAS.Param>();

        return (OASComAdobeGraniteBundlesHcImplSling) client.invoke(
            'POST', '/system/console/configMgr/com.adobe.granite.bundles.hc.impl.SlingJavaScriptHandlerHealthCheck', '',
            query, form,
            new Map<String, Object>(),
            new Map<String, Object>(),
            new List<String>{ 'application/json', 'text/plain' },
            new List<String>(),
            new List<String> { 'aemAuth' },
            OASComAdobeGraniteBundlesHcImplSling.class
        );
    }
    /**
     * 
     * 
     * @param post  (optional)
     * @param apply  (optional)
     * @param r_delete  (optional)
     * @param action  (optional)
     * @param location  (optional)
     * @param propertylist  (optional)
     * @param hcTags  (optional)
     * @return OASComAdobeGraniteBundlesHcImplSling
     * @throws OAS.ApiException if fails to make API call
     */
    public OASComAdobeGraniteBundlesHcImplSling comAdobeGraniteBundlesHcImplSlingJspScriptHandlerHealthCheck(Map<String, Object> params) {
        List<OAS.Param> query = new List<OAS.Param>();

        // cast query params to verify their expected type
        query.addAll(client.makeParam('post', (Boolean) params.get('post')));
        query.addAll(client.makeParam('apply', (Boolean) params.get('apply')));
        query.addAll(client.makeParam('delete', (Boolean) params.get('r_delete')));
        query.addAll(client.makeParam('action', (String) params.get('action')));
        query.addAll(client.makeParam('$location', (String) params.get('location')));
        query.addAll(client.makeParam('propertylist', (List<String>) params.get('propertylist'), 'csv'));
        query.addAll(client.makeParams('hc.tags', (List<String>) params.get('hcTags')));

        List<OAS.Param> form = new List<OAS.Param>();

        return (OASComAdobeGraniteBundlesHcImplSling) client.invoke(
            'POST', '/system/console/configMgr/com.adobe.granite.bundles.hc.impl.SlingJspScriptHandlerHealthCheck', '',
            query, form,
            new Map<String, Object>(),
            new Map<String, Object>(),
            new List<String>{ 'application/json', 'text/plain' },
            new List<String>(),
            new List<String> { 'aemAuth' },
            OASComAdobeGraniteBundlesHcImplSling.class
        );
    }
    /**
     * 
     * 
     * @param post  (optional)
     * @param apply  (optional)
     * @param r_delete  (optional)
     * @param action  (optional)
     * @param location  (optional)
     * @param propertylist  (optional)
     * @param hcTags  (optional)
     * @return OASComAdobeGraniteBundlesHcImplSling
     * @throws OAS.ApiException if fails to make API call
     */
    public OASComAdobeGraniteBundlesHcImplSling comAdobeGraniteBundlesHcImplSlingReferrerFilterHealthCheck(Map<String, Object> params) {
        List<OAS.Param> query = new List<OAS.Param>();

        // cast query params to verify their expected type
        query.addAll(client.makeParam('post', (Boolean) params.get('post')));
        query.addAll(client.makeParam('apply', (Boolean) params.get('apply')));
        query.addAll(client.makeParam('delete', (Boolean) params.get('r_delete')));
        query.addAll(client.makeParam('action', (String) params.get('action')));
        query.addAll(client.makeParam('$location', (String) params.get('location')));
        query.addAll(client.makeParam('propertylist', (List<String>) params.get('propertylist'), 'csv'));
        query.addAll(client.makeParams('hc.tags', (List<String>) params.get('hcTags')));

        List<OAS.Param> form = new List<OAS.Param>();

        return (OASComAdobeGraniteBundlesHcImplSling) client.invoke(
            'POST', '/system/console/configMgr/com.adobe.granite.bundles.hc.impl.SlingReferrerFilterHealthCheck', '',
            query, form,
            new Map<String, Object>(),
            new Map<String, Object>(),
            new List<String>{ 'application/json', 'text/plain' },
            new List<String>(),
            new List<String> { 'aemAuth' },
            OASComAdobeGraniteBundlesHcImplSling.class
        );
    }
    /**
     * 
     * 
     * @param post  (optional)
     * @param apply  (optional)
     * @param r_delete  (optional)
     * @param action  (optional)
     * @param location  (optional)
     * @param propertylist  (optional)
     * @param hcTags  (optional)
     * @return OASComAdobeGraniteBundlesHcImplWebDa
     * @throws OAS.ApiException if fails to make API call
     */
    public OASComAdobeGraniteBundlesHcImplWebDa comAdobeGraniteBundlesHcImplWebDavBundleHealthCheck(Map<String, Object> params) {
        List<OAS.Param> query = new List<OAS.Param>();

        // cast query params to verify their expected type
        query.addAll(client.makeParam('post', (Boolean) params.get('post')));
        query.addAll(client.makeParam('apply', (Boolean) params.get('apply')));
        query.addAll(client.makeParam('delete', (Boolean) params.get('r_delete')));
        query.addAll(client.makeParam('action', (String) params.get('action')));
        query.addAll(client.makeParam('$location', (String) params.get('location')));
        query.addAll(client.makeParam('propertylist', (List<String>) params.get('propertylist'), 'csv'));
        query.addAll(client.makeParams('hc.tags', (List<String>) params.get('hcTags')));

        List<OAS.Param> form = new List<OAS.Param>();

        return (OASComAdobeGraniteBundlesHcImplWebDa) client.invoke(
            'POST', '/system/console/configMgr/com.adobe.granite.bundles.hc.impl.WebDavBundleHealthCheck', '',
            query, form,
            new Map<String, Object>(),
            new Map<String, Object>(),
            new List<String>{ 'application/json', 'text/plain' },
            new List<String>(),
            new List<String> { 'aemAuth' },
            OASComAdobeGraniteBundlesHcImplWebDa.class
        );
    }
    /**
     * 
     * 
     * @param post  (optional)
     * @param apply  (optional)
     * @param r_delete  (optional)
     * @param action  (optional)
     * @param location  (optional)
     * @param propertylist  (optional)
     * @param replicateCommentResourceTypes  (optional)
     * @return OASComAdobeGraniteCommentsInternalCo
     * @throws OAS.ApiException if fails to make API call
     */
    public OASComAdobeGraniteCommentsInternalCo comAdobeGraniteCommentsInternalCommentReplicationContentFilterFac(Map<String, Object> params) {
        List<OAS.Param> query = new List<OAS.Param>();

        // cast query params to verify their expected type
        query.addAll(client.makeParam('post', (Boolean) params.get('post')));
        query.addAll(client.makeParam('apply', (Boolean) params.get('apply')));
        query.addAll(client.makeParam('delete', (Boolean) params.get('r_delete')));
        query.addAll(client.makeParam('action', (String) params.get('action')));
        query.addAll(client.makeParam('$location', (String) params.get('location')));
        query.addAll(client.makeParam('propertylist', (List<String>) params.get('propertylist'), 'csv'));
        query.addAll(client.makeParams('replicate.comment.resourceTypes', (List<String>) params.get('replicateCommentResourceTypes')));

        List<OAS.Param> form = new List<OAS.Param>();

        return (OASComAdobeGraniteCommentsInternalCo) client.invoke(
            'POST', '/system/console/configMgr/com.adobe.granite.comments.internal.CommentReplicationContentFilterFactory', '',
            query, form,
            new Map<String, Object>(),
            new Map<String, Object>(),
            new List<String>{ 'application/json', 'text/plain' },
            new List<String>(),
            new List<String> { 'aemAuth' },
            OASComAdobeGraniteCommentsInternalCo.class
        );
    }
    /**
     * 
     * 
     * @param post  (optional)
     * @param apply  (optional)
     * @param r_delete  (optional)
     * @param action  (optional)
     * @param location  (optional)
     * @param propertylist  (optional)
     * @param compatgroups  (optional)
     * @param enabled  (optional)
     * @return OASComAdobeGraniteCompatrouterImplCo
     * @throws OAS.ApiException if fails to make API call
     */
    public OASComAdobeGraniteCompatrouterImplCo comAdobeGraniteCompatrouterImplCompatSwitchingServiceImpl(Map<String, Object> params) {
        List<OAS.Param> query = new List<OAS.Param>();

        // cast query params to verify their expected type
        query.addAll(client.makeParam('post', (Boolean) params.get('post')));
        query.addAll(client.makeParam('apply', (Boolean) params.get('apply')));
        query.addAll(client.makeParam('delete', (Boolean) params.get('r_delete')));
        query.addAll(client.makeParam('action', (String) params.get('action')));
        query.addAll(client.makeParam('$location', (String) params.get('location')));
        query.addAll(client.makeParam('propertylist', (List<String>) params.get('propertylist'), 'csv'));
        query.addAll(client.makeParams('compatgroups', (List<String>) params.get('compatgroups')));
        query.addAll(client.makeParam('enabled', (Boolean) params.get('enabled')));

        List<OAS.Param> form = new List<OAS.Param>();

        return (OASComAdobeGraniteCompatrouterImplCo) client.invoke(
            'POST', '/system/console/configMgr/com.adobe.granite.compatrouter.impl.CompatSwitchingServiceImpl', '',
            query, form,
            new Map<String, Object>(),
            new Map<String, Object>(),
            new List<String>{ 'application/json', 'text/plain' },
            new List<String>(),
            new List<String> { 'aemAuth' },
            OASComAdobeGraniteCompatrouterImplCo.class
        );
    }
    /**
     * 
     * 
     * @param post  (optional)
     * @param apply  (optional)
     * @param r_delete  (optional)
     * @param action  (optional)
     * @param location  (optional)
     * @param propertylist  (optional)
     * @param id  (optional)
     * @param compatPath  (optional)
     * @param newPath  (optional)
     * @return OASComAdobeGraniteCompatrouterImplRo
     * @throws OAS.ApiException if fails to make API call
     */
    public OASComAdobeGraniteCompatrouterImplRo comAdobeGraniteCompatrouterImplRoutingConfig(Map<String, Object> params) {
        List<OAS.Param> query = new List<OAS.Param>();

        // cast query params to verify their expected type
        query.addAll(client.makeParam('post', (Boolean) params.get('post')));
        query.addAll(client.makeParam('apply', (Boolean) params.get('apply')));
        query.addAll(client.makeParam('delete', (Boolean) params.get('r_delete')));
        query.addAll(client.makeParam('action', (String) params.get('action')));
        query.addAll(client.makeParam('$location', (String) params.get('location')));
        query.addAll(client.makeParam('propertylist', (List<String>) params.get('propertylist'), 'csv'));
        query.addAll(client.makeParam('id', (String) params.get('id')));
        query.addAll(client.makeParam('compatPath', (String) params.get('compatPath')));
        query.addAll(client.makeParam('newPath', (String) params.get('newPath')));

        List<OAS.Param> form = new List<OAS.Param>();

        return (OASComAdobeGraniteCompatrouterImplRo) client.invoke(
            'POST', '/system/console/configMgr/com.adobe.granite.compatrouter.impl.RoutingConfig', '',
            query, form,
            new Map<String, Object>(),
            new Map<String, Object>(),
            new List<String>{ 'application/json', 'text/plain' },
            new List<String>(),
            new List<String> { 'aemAuth' },
            OASComAdobeGraniteCompatrouterImplRo.class
        );
    }
    /**
     * 
     * 
     * @param post  (optional)
     * @param apply  (optional)
     * @param r_delete  (optional)
     * @param action  (optional)
     * @param location  (optional)
     * @param propertylist  (optional)
     * @param r_group  (optional)
     * @param ids  (optional)
     * @return OASComAdobeGraniteCompatrouterImplSw
     * @throws OAS.ApiException if fails to make API call
     */
    public OASComAdobeGraniteCompatrouterImplSw comAdobeGraniteCompatrouterImplSwitchMappingConfig(Map<String, Object> params) {
        List<OAS.Param> query = new List<OAS.Param>();

        // cast query params to verify their expected type
        query.addAll(client.makeParam('post', (Boolean) params.get('post')));
        query.addAll(client.makeParam('apply', (Boolean) params.get('apply')));
        query.addAll(client.makeParam('delete', (Boolean) params.get('r_delete')));
        query.addAll(client.makeParam('action', (String) params.get('action')));
        query.addAll(client.makeParam('$location', (String) params.get('location')));
        query.addAll(client.makeParam('propertylist', (List<String>) params.get('propertylist'), 'csv'));
        query.addAll(client.makeParam('group', (String) params.get('r_group')));
        query.addAll(client.makeParams('ids', (List<String>) params.get('ids')));

        List<OAS.Param> form = new List<OAS.Param>();

        return (OASComAdobeGraniteCompatrouterImplSw) client.invoke(
            'POST', '/system/console/configMgr/com.adobe.granite.compatrouter.impl.SwitchMappingConfig', '',
            query, form,
            new Map<String, Object>(),
            new Map<String, Object>(),
            new List<String>{ 'application/json', 'text/plain' },
            new List<String>(),
            new List<String> { 'aemAuth' },
            OASComAdobeGraniteCompatrouterImplSw.class
        );
    }
    /**
     * 
     * 
     * @param post  (optional)
     * @param apply  (optional)
     * @param r_delete  (optional)
     * @param action  (optional)
     * @param location  (optional)
     * @param propertylist  (optional)
     * @param enabled  (optional)
     * @param fallbackPaths  (optional)
     * @return OASComAdobeGraniteConfImplRuntimeAwa
     * @throws OAS.ApiException if fails to make API call
     */
    public OASComAdobeGraniteConfImplRuntimeAwa comAdobeGraniteConfImplRuntimeAwareConfigurationResourceResolving(Map<String, Object> params) {
        List<OAS.Param> query = new List<OAS.Param>();

        // cast query params to verify their expected type
        query.addAll(client.makeParam('post', (Boolean) params.get('post')));
        query.addAll(client.makeParam('apply', (Boolean) params.get('apply')));
        query.addAll(client.makeParam('delete', (Boolean) params.get('r_delete')));
        query.addAll(client.makeParam('action', (String) params.get('action')));
        query.addAll(client.makeParam('$location', (String) params.get('location')));
        query.addAll(client.makeParam('propertylist', (List<String>) params.get('propertylist'), 'csv'));
        query.addAll(client.makeParam('enabled', (Boolean) params.get('enabled')));
        query.addAll(client.makeParams('fallbackPaths', (List<String>) params.get('fallbackPaths')));

        List<OAS.Param> form = new List<OAS.Param>();

        return (OASComAdobeGraniteConfImplRuntimeAwa) client.invoke(
            'POST', '/system/console/configMgr/com.adobe.granite.conf.impl.RuntimeAwareConfigurationResourceResolvingStrategy', '',
            query, form,
            new Map<String, Object>(),
            new Map<String, Object>(),
            new List<String>{ 'application/json', 'text/plain' },
            new List<String>(),
            new List<String> { 'aemAuth' },
            OASComAdobeGraniteConfImplRuntimeAwa.class
        );
    }
    /**
     * 
     * 
     * @param post  (optional)
     * @param apply  (optional)
     * @param r_delete  (optional)
     * @param action  (optional)
     * @param location  (optional)
     * @param propertylist  (optional)
     * @param comAdobeGraniteContexthubSilentMode  (optional)
     * @param comAdobeGraniteContexthubShowUi  (optional)
     * @return OASComAdobeGraniteContexthubImplCont
     * @throws OAS.ApiException if fails to make API call
     */
    public OASComAdobeGraniteContexthubImplCont comAdobeGraniteContexthubImplContextHubImpl(Map<String, Object> params) {
        List<OAS.Param> query = new List<OAS.Param>();

        // cast query params to verify their expected type
        query.addAll(client.makeParam('post', (Boolean) params.get('post')));
        query.addAll(client.makeParam('apply', (Boolean) params.get('apply')));
        query.addAll(client.makeParam('delete', (Boolean) params.get('r_delete')));
        query.addAll(client.makeParam('action', (String) params.get('action')));
        query.addAll(client.makeParam('$location', (String) params.get('location')));
        query.addAll(client.makeParam('propertylist', (List<String>) params.get('propertylist'), 'csv'));
        query.addAll(client.makeParam('com.adobe.granite.contexthub.silent_mode', (Boolean) params.get('comAdobeGraniteContexthubSilentMode')));
        query.addAll(client.makeParam('com.adobe.granite.contexthub.show_ui', (Boolean) params.get('comAdobeGraniteContexthubShowUi')));

        List<OAS.Param> form = new List<OAS.Param>();

        return (OASComAdobeGraniteContexthubImplCont) client.invoke(
            'POST', '/system/console/configMgr/com.adobe.granite.contexthub.impl.ContextHubImpl', '',
            query, form,
            new Map<String, Object>(),
            new Map<String, Object>(),
            new List<String>{ 'application/json', 'text/plain' },
            new List<String>(),
            new List<String> { 'aemAuth' },
            OASComAdobeGraniteContexthubImplCont.class
        );
    }
    /**
     * 
     * 
     * @param post  (optional)
     * @param apply  (optional)
     * @param r_delete  (optional)
     * @param action  (optional)
     * @param location  (optional)
     * @param propertylist  (optional)
     * @param alloworigin  (optional)
     * @param alloworiginregexp  (optional)
     * @param allowedpaths  (optional)
     * @param exposedheaders  (optional)
     * @param maxage  (optional)
     * @param supportedheaders  (optional)
     * @param supportedmethods  (optional)
     * @param supportscredentials  (optional)
     * @return OASComAdobeGraniteCorsImplCORSPolicy
     * @throws OAS.ApiException if fails to make API call
     */
    public OASComAdobeGraniteCorsImplCORSPolicy comAdobeGraniteCorsImplCORSPolicyImpl(Map<String, Object> params) {
        List<OAS.Param> query = new List<OAS.Param>();

        // cast query params to verify their expected type
        query.addAll(client.makeParam('post', (Boolean) params.get('post')));
        query.addAll(client.makeParam('apply', (Boolean) params.get('apply')));
        query.addAll(client.makeParam('delete', (Boolean) params.get('r_delete')));
        query.addAll(client.makeParam('action', (String) params.get('action')));
        query.addAll(client.makeParam('$location', (String) params.get('location')));
        query.addAll(client.makeParam('propertylist', (List<String>) params.get('propertylist'), 'csv'));
        query.addAll(client.makeParams('alloworigin', (List<String>) params.get('alloworigin')));
        query.addAll(client.makeParams('alloworiginregexp', (List<String>) params.get('alloworiginregexp')));
        query.addAll(client.makeParams('allowedpaths', (List<String>) params.get('allowedpaths')));
        query.addAll(client.makeParams('exposedheaders', (List<String>) params.get('exposedheaders')));
        query.addAll(client.makeParam('maxage', (Integer) params.get('maxage')));
        query.addAll(client.makeParams('supportedheaders', (List<String>) params.get('supportedheaders')));
        query.addAll(client.makeParams('supportedmethods', (List<String>) params.get('supportedmethods')));
        query.addAll(client.makeParam('supportscredentials', (Boolean) params.get('supportscredentials')));

        List<OAS.Param> form = new List<OAS.Param>();

        return (OASComAdobeGraniteCorsImplCORSPolicy) client.invoke(
            'POST', '/system/console/configMgr/com.adobe.granite.cors.impl.CORSPolicyImpl', '',
            query, form,
            new Map<String, Object>(),
            new Map<String, Object>(),
            new List<String>{ 'application/json', 'text/plain' },
            new List<String>(),
            new List<String> { 'aemAuth' },
            OASComAdobeGraniteCorsImplCORSPolicy.class
        );
    }
    /**
     * 
     * 
     * @param post  (optional)
     * @param apply  (optional)
     * @param r_delete  (optional)
     * @param action  (optional)
     * @param location  (optional)
     * @param propertylist  (optional)
     * @param filterMethods  (optional)
     * @param filterEnableSafeUserAgents  (optional)
     * @param filterSafeUserAgents  (optional)
     * @param filterExcludedPaths  (optional)
     * @return OASComAdobeGraniteCsrfImplCSRFFilter
     * @throws OAS.ApiException if fails to make API call
     */
    public OASComAdobeGraniteCsrfImplCSRFFilter comAdobeGraniteCsrfImplCSRFFilter(Map<String, Object> params) {
        List<OAS.Param> query = new List<OAS.Param>();

        // cast query params to verify their expected type
        query.addAll(client.makeParam('post', (Boolean) params.get('post')));
        query.addAll(client.makeParam('apply', (Boolean) params.get('apply')));
        query.addAll(client.makeParam('delete', (Boolean) params.get('r_delete')));
        query.addAll(client.makeParam('action', (String) params.get('action')));
        query.addAll(client.makeParam('$location', (String) params.get('location')));
        query.addAll(client.makeParam('propertylist', (List<String>) params.get('propertylist'), 'csv'));
        query.addAll(client.makeParams('filter.methods', (List<String>) params.get('filterMethods')));
        query.addAll(client.makeParam('filter.enable.safe.user.agents', (Boolean) params.get('filterEnableSafeUserAgents')));
        query.addAll(client.makeParams('filter.safe.user.agents', (List<String>) params.get('filterSafeUserAgents')));
        query.addAll(client.makeParams('filter.excluded.paths', (List<String>) params.get('filterExcludedPaths')));

        List<OAS.Param> form = new List<OAS.Param>();

        return (OASComAdobeGraniteCsrfImplCSRFFilter) client.invoke(
            'POST', '/system/console/configMgr/com.adobe.granite.csrf.impl.CSRFFilter', '',
            query, form,
            new Map<String, Object>(),
            new Map<String, Object>(),
            new List<String>{ 'application/json', 'text/plain' },
            new List<String>(),
            new List<String> { 'aemAuth' },
            OASComAdobeGraniteCsrfImplCSRFFilter.class
        );
    }
    /**
     * 
     * 
     * @param post  (optional)
     * @param apply  (optional)
     * @param r_delete  (optional)
     * @param action  (optional)
     * @param location  (optional)
     * @param propertylist  (optional)
     * @param csrfTokenExpiresIn  (optional)
     * @param slingAuthRequirements  (optional)
     * @return OASComAdobeGraniteCsrfImplCSRFServle
     * @throws OAS.ApiException if fails to make API call
     */
    public OASComAdobeGraniteCsrfImplCSRFServle comAdobeGraniteCsrfImplCSRFServlet(Map<String, Object> params) {
        List<OAS.Param> query = new List<OAS.Param>();

        // cast query params to verify their expected type
        query.addAll(client.makeParam('post', (Boolean) params.get('post')));
        query.addAll(client.makeParam('apply', (Boolean) params.get('apply')));
        query.addAll(client.makeParam('delete', (Boolean) params.get('r_delete')));
        query.addAll(client.makeParam('action', (String) params.get('action')));
        query.addAll(client.makeParam('$location', (String) params.get('location')));
        query.addAll(client.makeParam('propertylist', (List<String>) params.get('propertylist'), 'csv'));
        query.addAll(client.makeParam('csrf.token.expires.in', (Integer) params.get('csrfTokenExpiresIn')));
        query.addAll(client.makeParam('sling.auth.requirements', (String) params.get('slingAuthRequirements')));

        List<OAS.Param> form = new List<OAS.Param>();

        return (OASComAdobeGraniteCsrfImplCSRFServle) client.invoke(
            'POST', '/system/console/configMgr/com.adobe.granite.csrf.impl.CSRFServlet', '',
            query, form,
            new Map<String, Object>(),
            new Map<String, Object>(),
            new List<String>{ 'application/json', 'text/plain' },
            new List<String>(),
            new List<String> { 'aemAuth' },
            OASComAdobeGraniteCsrfImplCSRFServle.class
        );
    }
    /**
     * 
     * 
     * @param post  (optional)
     * @param apply  (optional)
     * @param r_delete  (optional)
     * @param action  (optional)
     * @param location  (optional)
     * @param propertylist  (optional)
     * @param name  (optional)
     * @param username  (optional)
     * @param encryptedPassword  (optional)
     * @return OASComAdobeGraniteDistributionCoreIm
     * @throws OAS.ApiException if fails to make API call
     */
    public OASComAdobeGraniteDistributionCoreIm comAdobeGraniteDistributionCoreImplCryptoDistributionTransportSe(Map<String, Object> params) {
        List<OAS.Param> query = new List<OAS.Param>();

        // cast query params to verify their expected type
        query.addAll(client.makeParam('post', (Boolean) params.get('post')));
        query.addAll(client.makeParam('apply', (Boolean) params.get('apply')));
        query.addAll(client.makeParam('delete', (Boolean) params.get('r_delete')));
        query.addAll(client.makeParam('action', (String) params.get('action')));
        query.addAll(client.makeParam('$location', (String) params.get('location')));
        query.addAll(client.makeParam('propertylist', (List<String>) params.get('propertylist'), 'csv'));
        query.addAll(client.makeParam('name', (String) params.get('name')));
        query.addAll(client.makeParam('username', (String) params.get('username')));
        query.addAll(client.makeParam('encryptedPassword', (String) params.get('encryptedPassword')));

        List<OAS.Param> form = new List<OAS.Param>();

        return (OASComAdobeGraniteDistributionCoreIm) client.invoke(
            'POST', '/system/console/configMgr/com.adobe.granite.distribution.core.impl.CryptoDistributionTransportSecretProvider', '',
            query, form,
            new Map<String, Object>(),
            new Map<String, Object>(),
            new List<String>{ 'application/json', 'text/plain' },
            new List<String>(),
            new List<String> { 'aemAuth' },
            OASComAdobeGraniteDistributionCoreIm.class
        );
    }
    /**
     * 
     * 
     * @param post  (optional)
     * @param apply  (optional)
     * @param r_delete  (optional)
     * @param action  (optional)
     * @param location  (optional)
     * @param propertylist  (optional)
     * @param enabled  (optional)
     * @param agentName  (optional)
     * @param diffPath  (optional)
     * @param observedPath  (optional)
     * @param serviceName  (optional)
     * @param propertyNames  (optional)
     * @param distributionDelay  (optional)
     * @param serviceUserTarget  (optional)
     * @return OASComAdobeGraniteDistributionCoreIm
     * @throws OAS.ApiException if fails to make API call
     */
    public OASComAdobeGraniteDistributionCoreIm comAdobeGraniteDistributionCoreImplDiffDiffChangesObserver(Map<String, Object> params) {
        List<OAS.Param> query = new List<OAS.Param>();

        // cast query params to verify their expected type
        query.addAll(client.makeParam('post', (Boolean) params.get('post')));
        query.addAll(client.makeParam('apply', (Boolean) params.get('apply')));
        query.addAll(client.makeParam('delete', (Boolean) params.get('r_delete')));
        query.addAll(client.makeParam('action', (String) params.get('action')));
        query.addAll(client.makeParam('$location', (String) params.get('location')));
        query.addAll(client.makeParam('propertylist', (List<String>) params.get('propertylist'), 'csv'));
        query.addAll(client.makeParam('enabled', (Boolean) params.get('enabled')));
        query.addAll(client.makeParam('agentName', (String) params.get('agentName')));
        query.addAll(client.makeParam('diffPath', (String) params.get('diffPath')));
        query.addAll(client.makeParam('observedPath', (String) params.get('observedPath')));
        query.addAll(client.makeParam('serviceName', (String) params.get('serviceName')));
        query.addAll(client.makeParam('propertyNames', (String) params.get('propertyNames')));
        query.addAll(client.makeParam('distributionDelay', (Integer) params.get('distributionDelay')));
        query.addAll(client.makeParam('serviceUser.target', (String) params.get('serviceUserTarget')));

        List<OAS.Param> form = new List<OAS.Param>();

        return (OASComAdobeGraniteDistributionCoreIm) client.invoke(
            'POST', '/system/console/configMgr/com.adobe.granite.distribution.core.impl.diff.DiffChangesObserver', '',
            query, form,
            new Map<String, Object>(),
            new Map<String, Object>(),
            new List<String>{ 'application/json', 'text/plain' },
            new List<String>(),
            new List<String> { 'aemAuth' },
            OASComAdobeGraniteDistributionCoreIm.class
        );
    }
    /**
     * 
     * 
     * @param post  (optional)
     * @param apply  (optional)
     * @param r_delete  (optional)
     * @param action  (optional)
     * @param location  (optional)
     * @param propertylist  (optional)
     * @param diffPath  (optional)
     * @param serviceName  (optional)
     * @param serviceUserTarget  (optional)
     * @return OASComAdobeGraniteDistributionCoreIm
     * @throws OAS.ApiException if fails to make API call
     */
    public OASComAdobeGraniteDistributionCoreIm comAdobeGraniteDistributionCoreImplDiffDiffEventListener(Map<String, Object> params) {
        List<OAS.Param> query = new List<OAS.Param>();

        // cast query params to verify their expected type
        query.addAll(client.makeParam('post', (Boolean) params.get('post')));
        query.addAll(client.makeParam('apply', (Boolean) params.get('apply')));
        query.addAll(client.makeParam('delete', (Boolean) params.get('r_delete')));
        query.addAll(client.makeParam('action', (String) params.get('action')));
        query.addAll(client.makeParam('$location', (String) params.get('location')));
        query.addAll(client.makeParam('propertylist', (List<String>) params.get('propertylist'), 'csv'));
        query.addAll(client.makeParam('diffPath', (String) params.get('diffPath')));
        query.addAll(client.makeParam('serviceName', (String) params.get('serviceName')));
        query.addAll(client.makeParam('serviceUser.target', (String) params.get('serviceUserTarget')));

        List<OAS.Param> form = new List<OAS.Param>();

        return (OASComAdobeGraniteDistributionCoreIm) client.invoke(
            'POST', '/system/console/configMgr/com.adobe.granite.distribution.core.impl.diff.DiffEventListener', '',
            query, form,
            new Map<String, Object>(),
            new Map<String, Object>(),
            new List<String>{ 'application/json', 'text/plain' },
            new List<String>(),
            new List<String> { 'aemAuth' },
            OASComAdobeGraniteDistributionCoreIm.class
        );
    }
    /**
     * 
     * 
     * @param post  (optional)
     * @param apply  (optional)
     * @param r_delete  (optional)
     * @param action  (optional)
     * @param location  (optional)
     * @param propertylist  (optional)
     * @param importerName  (optional)
     * @return OASComAdobeGraniteDistributionCoreIm
     * @throws OAS.ApiException if fails to make API call
     */
    public OASComAdobeGraniteDistributionCoreIm comAdobeGraniteDistributionCoreImplDistributionToReplicationEven(Map<String, Object> params) {
        List<OAS.Param> query = new List<OAS.Param>();

        // cast query params to verify their expected type
        query.addAll(client.makeParam('post', (Boolean) params.get('post')));
        query.addAll(client.makeParam('apply', (Boolean) params.get('apply')));
        query.addAll(client.makeParam('delete', (Boolean) params.get('r_delete')));
        query.addAll(client.makeParam('action', (String) params.get('action')));
        query.addAll(client.makeParam('$location', (String) params.get('location')));
        query.addAll(client.makeParam('propertylist', (List<String>) params.get('propertylist'), 'csv'));
        query.addAll(client.makeParams('importer.name', (List<String>) params.get('importerName')));

        List<OAS.Param> form = new List<OAS.Param>();

        return (OASComAdobeGraniteDistributionCoreIm) client.invoke(
            'POST', '/system/console/configMgr/com.adobe.granite.distribution.core.impl.DistributionToReplicationEventTransformer', '',
            query, form,
            new Map<String, Object>(),
            new Map<String, Object>(),
            new List<String>{ 'application/json', 'text/plain' },
            new List<String>(),
            new List<String> { 'aemAuth' },
            OASComAdobeGraniteDistributionCoreIm.class
        );
    }
    /**
     * 
     * 
     * @param post  (optional)
     * @param apply  (optional)
     * @param r_delete  (optional)
     * @param action  (optional)
     * @param location  (optional)
     * @param propertylist  (optional)
     * @param providerName  (optional)
     * @param forwardRequests  (optional)
     * @return OASComAdobeGraniteDistributionCoreIm
     * @throws OAS.ApiException if fails to make API call
     */
    public OASComAdobeGraniteDistributionCoreIm comAdobeGraniteDistributionCoreImplReplicationAdaptersReplicat(Map<String, Object> params) {
        List<OAS.Param> query = new List<OAS.Param>();

        // cast query params to verify their expected type
        query.addAll(client.makeParam('post', (Boolean) params.get('post')));
        query.addAll(client.makeParam('apply', (Boolean) params.get('apply')));
        query.addAll(client.makeParam('delete', (Boolean) params.get('r_delete')));
        query.addAll(client.makeParam('action', (String) params.get('action')));
        query.addAll(client.makeParam('$location', (String) params.get('location')));
        query.addAll(client.makeParam('propertylist', (List<String>) params.get('propertylist'), 'csv'));
        query.addAll(client.makeParam('providerName', (String) params.get('providerName')));
        query.addAll(client.makeParam('forward.requests', (Boolean) params.get('forwardRequests')));

        List<OAS.Param> form = new List<OAS.Param>();

        return (OASComAdobeGraniteDistributionCoreIm) client.invoke(
            'POST', '/system/console/configMgr/com.adobe.granite.distribution.core.impl.replication.adapters.ReplicationAgentProvider', '',
            query, form,
            new Map<String, Object>(),
            new Map<String, Object>(),
            new List<String>{ 'application/json', 'text/plain' },
            new List<String>(),
            new List<String> { 'aemAuth' },
            OASComAdobeGraniteDistributionCoreIm.class
        );
    }
    /**
     * 
     * 
     * @param post  (optional)
     * @param apply  (optional)
     * @param r_delete  (optional)
     * @param action  (optional)
     * @param location  (optional)
     * @param propertylist  (optional)
     * @param forwardRequests  (optional)
     * @return OASComAdobeGraniteDistributionCoreIm
     * @throws OAS.ApiException if fails to make API call
     */
    public OASComAdobeGraniteDistributionCoreIm comAdobeGraniteDistributionCoreImplReplicationDistributionTrans(Map<String, Object> params) {
        List<OAS.Param> query = new List<OAS.Param>();

        // cast query params to verify their expected type
        query.addAll(client.makeParam('post', (Boolean) params.get('post')));
        query.addAll(client.makeParam('apply', (Boolean) params.get('apply')));
        query.addAll(client.makeParam('delete', (Boolean) params.get('r_delete')));
        query.addAll(client.makeParam('action', (String) params.get('action')));
        query.addAll(client.makeParam('$location', (String) params.get('location')));
        query.addAll(client.makeParam('propertylist', (List<String>) params.get('propertylist'), 'csv'));
        query.addAll(client.makeParam('forward.requests', (Boolean) params.get('forwardRequests')));

        List<OAS.Param> form = new List<OAS.Param>();

        return (OASComAdobeGraniteDistributionCoreIm) client.invoke(
            'POST', '/system/console/configMgr/com.adobe.granite.distribution.core.impl.replication.DistributionTransportHandler', '',
            query, form,
            new Map<String, Object>(),
            new Map<String, Object>(),
            new List<String>{ 'application/json', 'text/plain' },
            new List<String>(),
            new List<String> { 'aemAuth' },
            OASComAdobeGraniteDistributionCoreIm.class
        );
    }
    /**
     * 
     * 
     * @param post  (optional)
     * @param apply  (optional)
     * @param r_delete  (optional)
     * @param action  (optional)
     * @param location  (optional)
     * @param propertylist  (optional)
     * @param name  (optional)
     * @param serviceName  (optional)
     * @param userId  (optional)
     * @param accessTokenProviderTarget  (optional)
     * @return OASComAdobeGraniteDistributionCoreIm
     * @throws OAS.ApiException if fails to make API call
     */
    public OASComAdobeGraniteDistributionCoreIm comAdobeGraniteDistributionCoreImplTransportAccessTokenDistribu(Map<String, Object> params) {
        List<OAS.Param> query = new List<OAS.Param>();

        // cast query params to verify their expected type
        query.addAll(client.makeParam('post', (Boolean) params.get('post')));
        query.addAll(client.makeParam('apply', (Boolean) params.get('apply')));
        query.addAll(client.makeParam('delete', (Boolean) params.get('r_delete')));
        query.addAll(client.makeParam('action', (String) params.get('action')));
        query.addAll(client.makeParam('$location', (String) params.get('location')));
        query.addAll(client.makeParam('propertylist', (List<String>) params.get('propertylist'), 'csv'));
        query.addAll(client.makeParam('name', (String) params.get('name')));
        query.addAll(client.makeParam('serviceName', (String) params.get('serviceName')));
        query.addAll(client.makeParam('userId', (String) params.get('userId')));
        query.addAll(client.makeParam('accessTokenProvider.target', (String) params.get('accessTokenProviderTarget')));

        List<OAS.Param> form = new List<OAS.Param>();

        return (OASComAdobeGraniteDistributionCoreIm) client.invoke(
            'POST', '/system/console/configMgr/com.adobe.granite.distribution.core.impl.transport.AccessTokenDistributionTransportSecretProvider', '',
            query, form,
            new Map<String, Object>(),
            new Map<String, Object>(),
            new List<String>{ 'application/json', 'text/plain' },
            new List<String>(),
            new List<String> { 'aemAuth' },
            OASComAdobeGraniteDistributionCoreIm.class
        );
    }
    /**
     * 
     * 
     * @param post  (optional)
     * @param apply  (optional)
     * @param r_delete  (optional)
     * @param action  (optional)
     * @param location  (optional)
     * @param propertylist  (optional)
     * @param featureName  (optional)
     * @param featureDescription  (optional)
     * @param httpHeaderName  (optional)
     * @param httpHeaderValuepattern  (optional)
     * @return OASComAdobeGraniteFragsImplCheckHttp
     * @throws OAS.ApiException if fails to make API call
     */
    public OASComAdobeGraniteFragsImplCheckHttp comAdobeGraniteFragsImplCheckHttpHeaderFlag(Map<String, Object> params) {
        List<OAS.Param> query = new List<OAS.Param>();

        // cast query params to verify their expected type
        query.addAll(client.makeParam('post', (Boolean) params.get('post')));
        query.addAll(client.makeParam('apply', (Boolean) params.get('apply')));
        query.addAll(client.makeParam('delete', (Boolean) params.get('r_delete')));
        query.addAll(client.makeParam('action', (String) params.get('action')));
        query.addAll(client.makeParam('$location', (String) params.get('location')));
        query.addAll(client.makeParam('propertylist', (List<String>) params.get('propertylist'), 'csv'));
        query.addAll(client.makeParam('feature.name', (String) params.get('featureName')));
        query.addAll(client.makeParam('feature.description', (String) params.get('featureDescription')));
        query.addAll(client.makeParam('http.header.name', (String) params.get('httpHeaderName')));
        query.addAll(client.makeParam('http.header.valuepattern', (String) params.get('httpHeaderValuepattern')));

        List<OAS.Param> form = new List<OAS.Param>();

        return (OASComAdobeGraniteFragsImplCheckHttp) client.invoke(
            'POST', '/system/console/configMgr/com.adobe.granite.frags.impl.CheckHttpHeaderFlag', '',
            query, form,
            new Map<String, Object>(),
            new Map<String, Object>(),
            new List<String>{ 'application/json', 'text/plain' },
            new List<String>(),
            new List<String> { 'aemAuth' },
            OASComAdobeGraniteFragsImplCheckHttp.class
        );
    }
    /**
     * 
     * 
     * @param post  (optional)
     * @param apply  (optional)
     * @param r_delete  (optional)
     * @param action  (optional)
     * @param location  (optional)
     * @param propertylist  (optional)
     * @param featureName  (optional)
     * @param featureDescription  (optional)
     * @param activePercentage  (optional)
     * @param cookieName  (optional)
     * @param cookieMaxAge  (optional)
     * @return OASComAdobeGraniteFragsImplRandomFea
     * @throws OAS.ApiException if fails to make API call
     */
    public OASComAdobeGraniteFragsImplRandomFea comAdobeGraniteFragsImplRandomFeature(Map<String, Object> params) {
        List<OAS.Param> query = new List<OAS.Param>();

        // cast query params to verify their expected type
        query.addAll(client.makeParam('post', (Boolean) params.get('post')));
        query.addAll(client.makeParam('apply', (Boolean) params.get('apply')));
        query.addAll(client.makeParam('delete', (Boolean) params.get('r_delete')));
        query.addAll(client.makeParam('action', (String) params.get('action')));
        query.addAll(client.makeParam('$location', (String) params.get('location')));
        query.addAll(client.makeParam('propertylist', (List<String>) params.get('propertylist'), 'csv'));
        query.addAll(client.makeParam('feature.name', (String) params.get('featureName')));
        query.addAll(client.makeParam('feature.description', (String) params.get('featureDescription')));
        query.addAll(client.makeParam('active.percentage', (String) params.get('activePercentage')));
        query.addAll(client.makeParam('cookie.name', (String) params.get('cookieName')));
        query.addAll(client.makeParam('cookie.maxAge', (Integer) params.get('cookieMaxAge')));

        List<OAS.Param> form = new List<OAS.Param>();

        return (OASComAdobeGraniteFragsImplRandomFea) client.invoke(
            'POST', '/system/console/configMgr/com.adobe.granite.frags.impl.RandomFeature', '',
            query, form,
            new Map<String, Object>(),
            new Map<String, Object>(),
            new List<String>{ 'application/json', 'text/plain' },
            new List<String>(),
            new List<String> { 'aemAuth' },
            OASComAdobeGraniteFragsImplRandomFea.class
        );
    }
    /**
     * 
     * 
     * @param post  (optional)
     * @param apply  (optional)
     * @param r_delete  (optional)
     * @param action  (optional)
     * @param location  (optional)
     * @param propertylist  (optional)
     * @param comAdobeGraniteHttpcacheFileDocumentRoot  (optional)
     * @param comAdobeGraniteHttpcacheFileIncludeHost  (optional)
     * @return OASComAdobeGraniteHttpcacheFileFileC
     * @throws OAS.ApiException if fails to make API call
     */
    public OASComAdobeGraniteHttpcacheFileFileC comAdobeGraniteHttpcacheFileFileCacheStore(Map<String, Object> params) {
        List<OAS.Param> query = new List<OAS.Param>();

        // cast query params to verify their expected type
        query.addAll(client.makeParam('post', (Boolean) params.get('post')));
        query.addAll(client.makeParam('apply', (Boolean) params.get('apply')));
        query.addAll(client.makeParam('delete', (Boolean) params.get('r_delete')));
        query.addAll(client.makeParam('action', (String) params.get('action')));
        query.addAll(client.makeParam('$location', (String) params.get('location')));
        query.addAll(client.makeParam('propertylist', (List<String>) params.get('propertylist'), 'csv'));
        query.addAll(client.makeParam('com.adobe.granite.httpcache.file.documentRoot', (String) params.get('comAdobeGraniteHttpcacheFileDocumentRoot')));
        query.addAll(client.makeParam('com.adobe.granite.httpcache.file.includeHost', (String) params.get('comAdobeGraniteHttpcacheFileIncludeHost')));

        List<OAS.Param> form = new List<OAS.Param>();

        return (OASComAdobeGraniteHttpcacheFileFileC) client.invoke(
            'POST', '/system/console/configMgr/com.adobe.granite.httpcache.file.FileCacheStore', '',
            query, form,
            new Map<String, Object>(),
            new Map<String, Object>(),
            new List<String>{ 'application/json', 'text/plain' },
            new List<String>(),
            new List<String> { 'aemAuth' },
            OASComAdobeGraniteHttpcacheFileFileC.class
        );
    }
    /**
     * 
     * 
     * @param post  (optional)
     * @param apply  (optional)
     * @param r_delete  (optional)
     * @param action  (optional)
     * @param location  (optional)
     * @param propertylist  (optional)
     * @param comAdobeGraniteHttpcacheUrlPaths  (optional)
     * @return OASComAdobeGraniteHttpcacheImplOuter
     * @throws OAS.ApiException if fails to make API call
     */
    public OASComAdobeGraniteHttpcacheImplOuter comAdobeGraniteHttpcacheImplOuterCacheFilter(Map<String, Object> params) {
        List<OAS.Param> query = new List<OAS.Param>();

        // cast query params to verify their expected type
        query.addAll(client.makeParam('post', (Boolean) params.get('post')));
        query.addAll(client.makeParam('apply', (Boolean) params.get('apply')));
        query.addAll(client.makeParam('delete', (Boolean) params.get('r_delete')));
        query.addAll(client.makeParam('action', (String) params.get('action')));
        query.addAll(client.makeParam('$location', (String) params.get('location')));
        query.addAll(client.makeParam('propertylist', (List<String>) params.get('propertylist'), 'csv'));
        query.addAll(client.makeParams('com.adobe.granite.httpcache.url.paths', (List<String>) params.get('comAdobeGraniteHttpcacheUrlPaths')));

        List<OAS.Param> form = new List<OAS.Param>();

        return (OASComAdobeGraniteHttpcacheImplOuter) client.invoke(
            'POST', '/system/console/configMgr/com.adobe.granite.httpcache.impl.OuterCacheFilter', '',
            query, form,
            new Map<String, Object>(),
            new Map<String, Object>(),
            new List<String>{ 'application/json', 'text/plain' },
            new List<String>(),
            new List<String> { 'aemAuth' },
            OASComAdobeGraniteHttpcacheImplOuter.class
        );
    }
    /**
     * 
     * 
     * @param post  (optional)
     * @param apply  (optional)
     * @param r_delete  (optional)
     * @param action  (optional)
     * @param location  (optional)
     * @param propertylist  (optional)
     * @param pseudoPatterns  (optional)
     * @return OASComAdobeGraniteI18nImplBundlePseu
     * @throws OAS.ApiException if fails to make API call
     */
    public OASComAdobeGraniteI18nImplBundlePseu comAdobeGraniteI18nImplBundlePseudoTranslations(Map<String, Object> params) {
        List<OAS.Param> query = new List<OAS.Param>();

        // cast query params to verify their expected type
        query.addAll(client.makeParam('post', (Boolean) params.get('post')));
        query.addAll(client.makeParam('apply', (Boolean) params.get('apply')));
        query.addAll(client.makeParam('delete', (Boolean) params.get('r_delete')));
        query.addAll(client.makeParam('action', (String) params.get('action')));
        query.addAll(client.makeParam('$location', (String) params.get('location')));
        query.addAll(client.makeParam('propertylist', (List<String>) params.get('propertylist'), 'csv'));
        query.addAll(client.makeParams('pseudo.patterns', (List<String>) params.get('pseudoPatterns')));

        List<OAS.Param> form = new List<OAS.Param>();

        return (OASComAdobeGraniteI18nImplBundlePseu) client.invoke(
            'POST', '/system/console/configMgr/com.adobe.granite.i18n.impl.bundle.PseudoTranslations', '',
            query, form,
            new Map<String, Object>(),
            new Map<String, Object>(),
            new List<String>{ 'application/json', 'text/plain' },
            new List<String>(),
            new List<String> { 'aemAuth' },
            OASComAdobeGraniteI18nImplBundlePseu.class
        );
    }
    /**
     * 
     * 
     * @param post  (optional)
     * @param apply  (optional)
     * @param r_delete  (optional)
     * @param action  (optional)
     * @param location  (optional)
     * @param propertylist  (optional)
     * @param securityPreferencesName  (optional)
     * @return OASComAdobeGraniteI18nImplPreference
     * @throws OAS.ApiException if fails to make API call
     */
    public OASComAdobeGraniteI18nImplPreference comAdobeGraniteI18nImplPreferencesLocaleResolverService(Map<String, Object> params) {
        List<OAS.Param> query = new List<OAS.Param>();

        // cast query params to verify their expected type
        query.addAll(client.makeParam('post', (Boolean) params.get('post')));
        query.addAll(client.makeParam('apply', (Boolean) params.get('apply')));
        query.addAll(client.makeParam('delete', (Boolean) params.get('r_delete')));
        query.addAll(client.makeParam('action', (String) params.get('action')));
        query.addAll(client.makeParam('$location', (String) params.get('location')));
        query.addAll(client.makeParam('propertylist', (List<String>) params.get('propertylist'), 'csv'));
        query.addAll(client.makeParam('security.preferences.name', (String) params.get('securityPreferencesName')));

        List<OAS.Param> form = new List<OAS.Param>();

        return (OASComAdobeGraniteI18nImplPreference) client.invoke(
            'POST', '/system/console/configMgr/com.adobe.granite.i18n.impl.PreferencesLocaleResolverService', '',
            query, form,
            new Map<String, Object>(),
            new Map<String, Object>(),
            new List<String>{ 'application/json', 'text/plain' },
            new List<String>(),
            new List<String> { 'aemAuth' },
            OASComAdobeGraniteI18nImplPreference.class
        );
    }
    /**
     * 
     * 
     * @param post  (optional)
     * @param apply  (optional)
     * @param r_delete  (optional)
     * @param action  (optional)
     * @param location  (optional)
     * @param propertylist  (optional)
     * @param graniteInfocollectorIncludeThreadDumps  (optional)
     * @param graniteInfocollectorIncludeHeapDump  (optional)
     * @return OASComAdobeGraniteInfocollectorInfoC
     * @throws OAS.ApiException if fails to make API call
     */
    public OASComAdobeGraniteInfocollectorInfoC comAdobeGraniteInfocollectorInfoCollector(Map<String, Object> params) {
        List<OAS.Param> query = new List<OAS.Param>();

        // cast query params to verify their expected type
        query.addAll(client.makeParam('post', (Boolean) params.get('post')));
        query.addAll(client.makeParam('apply', (Boolean) params.get('apply')));
        query.addAll(client.makeParam('delete', (Boolean) params.get('r_delete')));
        query.addAll(client.makeParam('action', (String) params.get('action')));
        query.addAll(client.makeParam('$location', (String) params.get('location')));
        query.addAll(client.makeParam('propertylist', (List<String>) params.get('propertylist'), 'csv'));
        query.addAll(client.makeParam('granite.infocollector.includeThreadDumps', (Boolean) params.get('graniteInfocollectorIncludeThreadDumps')));
        query.addAll(client.makeParam('granite.infocollector.includeHeapDump', (Boolean) params.get('graniteInfocollectorIncludeHeapDump')));

        List<OAS.Param> form = new List<OAS.Param>();

        return (OASComAdobeGraniteInfocollectorInfoC) client.invoke(
            'POST', '/system/console/configMgr/com.adobe.granite.infocollector.InfoCollector', '',
            query, form,
            new Map<String, Object>(),
            new Map<String, Object>(),
            new List<String>{ 'application/json', 'text/plain' },
            new List<String>(),
            new List<String> { 'aemAuth' },
            OASComAdobeGraniteInfocollectorInfoC.class
        );
    }
    /**
     * 
     * 
     * @param post  (optional)
     * @param apply  (optional)
     * @param r_delete  (optional)
     * @param action  (optional)
     * @param location  (optional)
     * @param propertylist  (optional)
     * @param comAdobeGraniteJettySslPort  (optional)
     * @param comAdobeGraniteJettySslKeystoreUser  (optional)
     * @param comAdobeGraniteJettySslKeystorePassword  (optional)
     * @param comAdobeGraniteJettySslCiphersuitesExcluded  (optional)
     * @param comAdobeGraniteJettySslCiphersuitesIncluded  (optional)
     * @param comAdobeGraniteJettySslClientCertificate  (optional)
     * @return OASComAdobeGraniteJettySslInternalGr
     * @throws OAS.ApiException if fails to make API call
     */
    public OASComAdobeGraniteJettySslInternalGr comAdobeGraniteJettySslInternalGraniteSslConnectorFactory(Map<String, Object> params) {
        List<OAS.Param> query = new List<OAS.Param>();

        // cast query params to verify their expected type
        query.addAll(client.makeParam('post', (Boolean) params.get('post')));
        query.addAll(client.makeParam('apply', (Boolean) params.get('apply')));
        query.addAll(client.makeParam('delete', (Boolean) params.get('r_delete')));
        query.addAll(client.makeParam('action', (String) params.get('action')));
        query.addAll(client.makeParam('$location', (String) params.get('location')));
        query.addAll(client.makeParam('propertylist', (List<String>) params.get('propertylist'), 'csv'));
        query.addAll(client.makeParam('com.adobe.granite.jetty.ssl.port', (Integer) params.get('comAdobeGraniteJettySslPort')));
        query.addAll(client.makeParam('com.adobe.granite.jetty.ssl.keystore.user', (String) params.get('comAdobeGraniteJettySslKeystoreUser')));
        query.addAll(client.makeParam('com.adobe.granite.jetty.ssl.keystore.password', (String) params.get('comAdobeGraniteJettySslKeystorePassword')));
        query.addAll(client.makeParams('com.adobe.granite.jetty.ssl.ciphersuites.excluded', (List<String>) params.get('comAdobeGraniteJettySslCiphersuitesExcluded')));
        query.addAll(client.makeParams('com.adobe.granite.jetty.ssl.ciphersuites.included', (List<String>) params.get('comAdobeGraniteJettySslCiphersuitesIncluded')));
        query.addAll(client.makeParam('com.adobe.granite.jetty.ssl.client.certificate', (String) params.get('comAdobeGraniteJettySslClientCertificate')));

        List<OAS.Param> form = new List<OAS.Param>();

        return (OASComAdobeGraniteJettySslInternalGr) client.invoke(
            'POST', '/system/console/configMgr/com.adobe.granite.jetty.ssl.internal.GraniteSslConnectorFactory', '',
            query, form,
            new Map<String, Object>(),
            new Map<String, Object>(),
            new List<String>{ 'application/json', 'text/plain' },
            new List<String>(),
            new List<String> { 'aemAuth' },
            OASComAdobeGraniteJettySslInternalGr.class
        );
    }
    /**
     * 
     * 
     * @param post  (optional)
     * @param apply  (optional)
     * @param r_delete  (optional)
     * @param action  (optional)
     * @param location  (optional)
     * @param propertylist  (optional)
     * @param checkInternval  (optional)
     * @param excludeIds  (optional)
     * @param encryptPing  (optional)
     * @return OASComAdobeGraniteLicenseImplLicense
     * @throws OAS.ApiException if fails to make API call
     */
    public OASComAdobeGraniteLicenseImplLicense comAdobeGraniteLicenseImplLicenseCheckFilter(Map<String, Object> params) {
        List<OAS.Param> query = new List<OAS.Param>();

        // cast query params to verify their expected type
        query.addAll(client.makeParam('post', (Boolean) params.get('post')));
        query.addAll(client.makeParam('apply', (Boolean) params.get('apply')));
        query.addAll(client.makeParam('delete', (Boolean) params.get('r_delete')));
        query.addAll(client.makeParam('action', (String) params.get('action')));
        query.addAll(client.makeParam('$location', (String) params.get('location')));
        query.addAll(client.makeParam('propertylist', (List<String>) params.get('propertylist'), 'csv'));
        query.addAll(client.makeParam('checkInternval', (Integer) params.get('checkInternval')));
        query.addAll(client.makeParams('excludeIds', (List<String>) params.get('excludeIds')));
        query.addAll(client.makeParam('encryptPing', (Boolean) params.get('encryptPing')));

        List<OAS.Param> form = new List<OAS.Param>();

        return (OASComAdobeGraniteLicenseImplLicense) client.invoke(
            'POST', '/system/console/configMgr/com.adobe.granite.license.impl.LicenseCheckFilter', '',
            query, form,
            new Map<String, Object>(),
            new Map<String, Object>(),
            new List<String>{ 'application/json', 'text/plain' },
            new List<String>(),
            new List<String> { 'aemAuth' },
            OASComAdobeGraniteLicenseImplLicense.class
        );
    }
    /**
     * 
     * 
     * @param post  (optional)
     * @param apply  (optional)
     * @param r_delete  (optional)
     * @param action  (optional)
     * @param location  (optional)
     * @param propertylist  (optional)
     * @param messagesQueueSize  (optional)
     * @param loggerConfig  (optional)
     * @param messagesSize  (optional)
     * @return OASComAdobeGraniteLoggingImplLogAnal
     * @throws OAS.ApiException if fails to make API call
     */
    public OASComAdobeGraniteLoggingImplLogAnal comAdobeGraniteLoggingImplLogAnalyserImpl(Map<String, Object> params) {
        List<OAS.Param> query = new List<OAS.Param>();

        // cast query params to verify their expected type
        query.addAll(client.makeParam('post', (Boolean) params.get('post')));
        query.addAll(client.makeParam('apply', (Boolean) params.get('apply')));
        query.addAll(client.makeParam('delete', (Boolean) params.get('r_delete')));
        query.addAll(client.makeParam('action', (String) params.get('action')));
        query.addAll(client.makeParam('$location', (String) params.get('location')));
        query.addAll(client.makeParam('propertylist', (List<String>) params.get('propertylist'), 'csv'));
        query.addAll(client.makeParam('messages.queue.size', (Integer) params.get('messagesQueueSize')));
        query.addAll(client.makeParams('logger.config', (List<String>) params.get('loggerConfig')));
        query.addAll(client.makeParam('messages.size', (Integer) params.get('messagesSize')));

        List<OAS.Param> form = new List<OAS.Param>();

        return (OASComAdobeGraniteLoggingImplLogAnal) client.invoke(
            'POST', '/system/console/configMgr/com.adobe.granite.logging.impl.LogAnalyserImpl', '',
            query, form,
            new Map<String, Object>(),
            new Map<String, Object>(),
            new List<String>{ 'application/json', 'text/plain' },
            new List<String>(),
            new List<String> { 'aemAuth' },
            OASComAdobeGraniteLoggingImplLogAnal.class
        );
    }
    /**
     * 
     * 
     * @param post  (optional)
     * @param apply  (optional)
     * @param r_delete  (optional)
     * @param action  (optional)
     * @param location  (optional)
     * @param propertylist  (optional)
     * @param hcTags  (optional)
     * @return OASComAdobeGraniteLoggingImplLogErro
     * @throws OAS.ApiException if fails to make API call
     */
    public OASComAdobeGraniteLoggingImplLogErro comAdobeGraniteLoggingImplLogErrorHealthCheck(Map<String, Object> params) {
        List<OAS.Param> query = new List<OAS.Param>();

        // cast query params to verify their expected type
        query.addAll(client.makeParam('post', (Boolean) params.get('post')));
        query.addAll(client.makeParam('apply', (Boolean) params.get('apply')));
        query.addAll(client.makeParam('delete', (Boolean) params.get('r_delete')));
        query.addAll(client.makeParam('action', (String) params.get('action')));
        query.addAll(client.makeParam('$location', (String) params.get('location')));
        query.addAll(client.makeParam('propertylist', (List<String>) params.get('propertylist'), 'csv'));
        query.addAll(client.makeParams('hc.tags', (List<String>) params.get('hcTags')));

        List<OAS.Param> form = new List<OAS.Param>();

        return (OASComAdobeGraniteLoggingImplLogErro) client.invoke(
            'POST', '/system/console/configMgr/com.adobe.granite.logging.impl.LogErrorHealthCheck', '',
            query, form,
            new Map<String, Object>(),
            new Map<String, Object>(),
            new List<String>{ 'application/json', 'text/plain' },
            new List<String>(),
            new List<String> { 'aemAuth' },
            OASComAdobeGraniteLoggingImplLogErro.class
        );
    }
    /**
     * 
     * 
     * @param post  (optional)
     * @param apply  (optional)
     * @param r_delete  (optional)
     * @param action  (optional)
     * @param location  (optional)
     * @param propertylist  (optional)
     * @param graniteMaintenanceMandatory  (optional)
     * @param jobTopics  (optional)
     * @return OASComAdobeGraniteMaintenanceCrxImpl
     * @throws OAS.ApiException if fails to make API call
     */
    public OASComAdobeGraniteMaintenanceCrxImpl comAdobeGraniteMaintenanceCrxImplDataStoreGarbageCollectionTask(Map<String, Object> params) {
        List<OAS.Param> query = new List<OAS.Param>();

        // cast query params to verify their expected type
        query.addAll(client.makeParam('post', (Boolean) params.get('post')));
        query.addAll(client.makeParam('apply', (Boolean) params.get('apply')));
        query.addAll(client.makeParam('delete', (Boolean) params.get('r_delete')));
        query.addAll(client.makeParam('action', (String) params.get('action')));
        query.addAll(client.makeParam('$location', (String) params.get('location')));
        query.addAll(client.makeParam('propertylist', (List<String>) params.get('propertylist'), 'csv'));
        query.addAll(client.makeParam('granite.maintenance.mandatory', (Boolean) params.get('graniteMaintenanceMandatory')));
        query.addAll(client.makeParam('job.topics', (String) params.get('jobTopics')));

        List<OAS.Param> form = new List<OAS.Param>();

        return (OASComAdobeGraniteMaintenanceCrxImpl) client.invoke(
            'POST', '/system/console/configMgr/com.adobe.granite.maintenance.crx.impl.DataStoreGarbageCollectionTask', '',
            query, form,
            new Map<String, Object>(),
            new Map<String, Object>(),
            new List<String>{ 'application/json', 'text/plain' },
            new List<String>(),
            new List<String> { 'aemAuth' },
            OASComAdobeGraniteMaintenanceCrxImpl.class
        );
    }
    /**
     * 
     * 
     * @param post  (optional)
     * @param apply  (optional)
     * @param r_delete  (optional)
     * @param action  (optional)
     * @param location  (optional)
     * @param propertylist  (optional)
     * @param jobTopics  (optional)
     * @return OASComAdobeGraniteMaintenanceCrxImpl
     * @throws OAS.ApiException if fails to make API call
     */
    public OASComAdobeGraniteMaintenanceCrxImpl comAdobeGraniteMaintenanceCrxImplLuceneBinariesCleanupTask(Map<String, Object> params) {
        List<OAS.Param> query = new List<OAS.Param>();

        // cast query params to verify their expected type
        query.addAll(client.makeParam('post', (Boolean) params.get('post')));
        query.addAll(client.makeParam('apply', (Boolean) params.get('apply')));
        query.addAll(client.makeParam('delete', (Boolean) params.get('r_delete')));
        query.addAll(client.makeParam('action', (String) params.get('action')));
        query.addAll(client.makeParam('$location', (String) params.get('location')));
        query.addAll(client.makeParam('propertylist', (List<String>) params.get('propertylist'), 'csv'));
        query.addAll(client.makeParam('job.topics', (String) params.get('jobTopics')));

        List<OAS.Param> form = new List<OAS.Param>();

        return (OASComAdobeGraniteMaintenanceCrxImpl) client.invoke(
            'POST', '/system/console/configMgr/com.adobe.granite.maintenance.crx.impl.LuceneBinariesCleanupTask', '',
            query, form,
            new Map<String, Object>(),
            new Map<String, Object>(),
            new List<String>{ 'application/json', 'text/plain' },
            new List<String>(),
            new List<String> { 'aemAuth' },
            OASComAdobeGraniteMaintenanceCrxImpl.class
        );
    }
    /**
     * 
     * 
     * @param post  (optional)
     * @param apply  (optional)
     * @param r_delete  (optional)
     * @param action  (optional)
     * @param location  (optional)
     * @param propertylist  (optional)
     * @param fullGcDays  (optional)
     * @return OASComAdobeGraniteMaintenanceCrxImpl
     * @throws OAS.ApiException if fails to make API call
     */
    public OASComAdobeGraniteMaintenanceCrxImpl comAdobeGraniteMaintenanceCrxImplRevisionCleanupTask(Map<String, Object> params) {
        List<OAS.Param> query = new List<OAS.Param>();

        // cast query params to verify their expected type
        query.addAll(client.makeParam('post', (Boolean) params.get('post')));
        query.addAll(client.makeParam('apply', (Boolean) params.get('apply')));
        query.addAll(client.makeParam('delete', (Boolean) params.get('r_delete')));
        query.addAll(client.makeParam('action', (String) params.get('action')));
        query.addAll(client.makeParam('$location', (String) params.get('location')));
        query.addAll(client.makeParam('propertylist', (List<String>) params.get('propertylist'), 'csv'));
        query.addAll(client.makeParams('full.gc.days', (List<String>) params.get('fullGcDays')));

        List<OAS.Param> form = new List<OAS.Param>();

        return (OASComAdobeGraniteMaintenanceCrxImpl) client.invoke(
            'POST', '/system/console/configMgr/com.adobe.granite.maintenance.crx.impl.RevisionCleanupTask', '',
            query, form,
            new Map<String, Object>(),
            new Map<String, Object>(),
            new List<String>{ 'application/json', 'text/plain' },
            new List<String>(),
            new List<String> { 'aemAuth' },
            OASComAdobeGraniteMaintenanceCrxImpl.class
        );
    }
    /**
     * 
     * 
     * @param post  (optional)
     * @param apply  (optional)
     * @param r_delete  (optional)
     * @param action  (optional)
     * @param location  (optional)
     * @param propertylist  (optional)
     * @param scriptFilename  (optional)
     * @param scriptDisplay  (optional)
     * @param scriptPath  (optional)
     * @param scriptPlatform  (optional)
     * @param interval  (optional)
     * @param jmxdomain  (optional)
     * @return OASComAdobeGraniteMonitoringImplScri
     * @throws OAS.ApiException if fails to make API call
     */
    public OASComAdobeGraniteMonitoringImplScri comAdobeGraniteMonitoringImplScriptConfigImpl(Map<String, Object> params) {
        List<OAS.Param> query = new List<OAS.Param>();

        // cast query params to verify their expected type
        query.addAll(client.makeParam('post', (Boolean) params.get('post')));
        query.addAll(client.makeParam('apply', (Boolean) params.get('apply')));
        query.addAll(client.makeParam('delete', (Boolean) params.get('r_delete')));
        query.addAll(client.makeParam('action', (String) params.get('action')));
        query.addAll(client.makeParam('$location', (String) params.get('location')));
        query.addAll(client.makeParam('propertylist', (List<String>) params.get('propertylist'), 'csv'));
        query.addAll(client.makeParam('script.filename', (String) params.get('scriptFilename')));
        query.addAll(client.makeParam('script.display', (String) params.get('scriptDisplay')));
        query.addAll(client.makeParam('script.path', (String) params.get('scriptPath')));
        query.addAll(client.makeParams('script.platform', (List<String>) params.get('scriptPlatform')));
        query.addAll(client.makeParam('interval', (Integer) params.get('interval')));
        query.addAll(client.makeParam('jmxdomain', (String) params.get('jmxdomain')));

        List<OAS.Param> form = new List<OAS.Param>();

        return (OASComAdobeGraniteMonitoringImplScri) client.invoke(
            'POST', '/system/console/configMgr/com.adobe.granite.monitoring.impl.ScriptConfigImpl', '',
            query, form,
            new Map<String, Object>(),
            new Map<String, Object>(),
            new List<String>{ 'application/json', 'text/plain' },
            new List<String>(),
            new List<String> { 'aemAuth' },
            OASComAdobeGraniteMonitoringImplScri.class
        );
    }
    /**
     * 
     * 
     * @param post  (optional)
     * @param apply  (optional)
     * @param r_delete  (optional)
     * @param action  (optional)
     * @param location  (optional)
     * @param propertylist  (optional)
     * @param path  (optional)
     * @param jaasControlFlag  (optional)
     * @param jaasRealmName  (optional)
     * @param jaasRanking  (optional)
     * @param oauthOfflineValidation  (optional)
     * @return OASComAdobeGraniteOauthServerAuthImp
     * @throws OAS.ApiException if fails to make API call
     */
    public OASComAdobeGraniteOauthServerAuthImp comAdobeGraniteOauthServerAuthImplOAuth2ServerAuthenticationHan(Map<String, Object> params) {
        List<OAS.Param> query = new List<OAS.Param>();

        // cast query params to verify their expected type
        query.addAll(client.makeParam('post', (Boolean) params.get('post')));
        query.addAll(client.makeParam('apply', (Boolean) params.get('apply')));
        query.addAll(client.makeParam('delete', (Boolean) params.get('r_delete')));
        query.addAll(client.makeParam('action', (String) params.get('action')));
        query.addAll(client.makeParam('$location', (String) params.get('location')));
        query.addAll(client.makeParam('propertylist', (List<String>) params.get('propertylist'), 'csv'));
        query.addAll(client.makeParam('path', (String) params.get('path')));
        query.addAll(client.makeParam('jaas.controlFlag', (String) params.get('jaasControlFlag')));
        query.addAll(client.makeParam('jaas.realmName', (String) params.get('jaasRealmName')));
        query.addAll(client.makeParam('jaas.ranking', (Integer) params.get('jaasRanking')));
        query.addAll(client.makeParam('oauth.offline.validation', (Boolean) params.get('oauthOfflineValidation')));

        List<OAS.Param> form = new List<OAS.Param>();

        return (OASComAdobeGraniteOauthServerAuthImp) client.invoke(
            'POST', '/system/console/configMgr/com.adobe.granite.oauth.server.auth.impl.OAuth2ServerAuthenticationHandler', '',
            query, form,
            new Map<String, Object>(),
            new Map<String, Object>(),
            new List<String>{ 'application/json', 'text/plain' },
            new List<String>(),
            new List<String> { 'aemAuth' },
            OASComAdobeGraniteOauthServerAuthImp.class
        );
    }
    /**
     * 
     * 
     * @param post  (optional)
     * @param apply  (optional)
     * @param r_delete  (optional)
     * @param action  (optional)
     * @param location  (optional)
     * @param propertylist  (optional)
     * @param schedulerExpression  (optional)
     * @return OASComAdobeGraniteOauthServerImplAcc
     * @throws OAS.ApiException if fails to make API call
     */
    public OASComAdobeGraniteOauthServerImplAcc comAdobeGraniteOauthServerImplAccessTokenCleanupTask(Map<String, Object> params) {
        List<OAS.Param> query = new List<OAS.Param>();

        // cast query params to verify their expected type
        query.addAll(client.makeParam('post', (Boolean) params.get('post')));
        query.addAll(client.makeParam('apply', (Boolean) params.get('apply')));
        query.addAll(client.makeParam('delete', (Boolean) params.get('r_delete')));
        query.addAll(client.makeParam('action', (String) params.get('action')));
        query.addAll(client.makeParam('$location', (String) params.get('location')));
        query.addAll(client.makeParam('propertylist', (List<String>) params.get('propertylist'), 'csv'));
        query.addAll(client.makeParam('scheduler.expression', (String) params.get('schedulerExpression')));

        List<OAS.Param> form = new List<OAS.Param>();

        return (OASComAdobeGraniteOauthServerImplAcc) client.invoke(
            'POST', '/system/console/configMgr/com.adobe.granite.oauth.server.impl.AccessTokenCleanupTask', '',
            query, form,
            new Map<String, Object>(),
            new Map<String, Object>(),
            new List<String>{ 'application/json', 'text/plain' },
            new List<String>(),
            new List<String> { 'aemAuth' },
            OASComAdobeGraniteOauthServerImplAcc.class
        );
    }
    /**
     * 
     * 
     * @param post  (optional)
     * @param apply  (optional)
     * @param r_delete  (optional)
     * @param action  (optional)
     * @param location  (optional)
     * @param propertylist  (optional)
     * @param oauthClientRevocationActive  (optional)
     * @return OASComAdobeGraniteOauthServerImplOAu
     * @throws OAS.ApiException if fails to make API call
     */
    public OASComAdobeGraniteOauthServerImplOAu comAdobeGraniteOauthServerImplOAuth2ClientRevocationServlet(Map<String, Object> params) {
        List<OAS.Param> query = new List<OAS.Param>();

        // cast query params to verify their expected type
        query.addAll(client.makeParam('post', (Boolean) params.get('post')));
        query.addAll(client.makeParam('apply', (Boolean) params.get('apply')));
        query.addAll(client.makeParam('delete', (Boolean) params.get('r_delete')));
        query.addAll(client.makeParam('action', (String) params.get('action')));
        query.addAll(client.makeParam('$location', (String) params.get('location')));
        query.addAll(client.makeParam('propertylist', (List<String>) params.get('propertylist'), 'csv'));
        query.addAll(client.makeParam('oauth.client.revocation.active', (Boolean) params.get('oauthClientRevocationActive')));

        List<OAS.Param> form = new List<OAS.Param>();

        return (OASComAdobeGraniteOauthServerImplOAu) client.invoke(
            'POST', '/system/console/configMgr/com.adobe.granite.oauth.server.impl.OAuth2ClientRevocationServlet', '',
            query, form,
            new Map<String, Object>(),
            new Map<String, Object>(),
            new List<String>{ 'application/json', 'text/plain' },
            new List<String>(),
            new List<String> { 'aemAuth' },
            OASComAdobeGraniteOauthServerImplOAu.class
        );
    }
    /**
     * 
     * 
     * @param post  (optional)
     * @param apply  (optional)
     * @param r_delete  (optional)
     * @param action  (optional)
     * @param location  (optional)
     * @param propertylist  (optional)
     * @param slingServletPaths  (optional)
     * @param oauthRevocationActive  (optional)
     * @return OASComAdobeGraniteOauthServerImplOAu
     * @throws OAS.ApiException if fails to make API call
     */
    public OASComAdobeGraniteOauthServerImplOAu comAdobeGraniteOauthServerImplOAuth2RevocationEndpointServlet(Map<String, Object> params) {
        List<OAS.Param> query = new List<OAS.Param>();

        // cast query params to verify their expected type
        query.addAll(client.makeParam('post', (Boolean) params.get('post')));
        query.addAll(client.makeParam('apply', (Boolean) params.get('apply')));
        query.addAll(client.makeParam('delete', (Boolean) params.get('r_delete')));
        query.addAll(client.makeParam('action', (String) params.get('action')));
        query.addAll(client.makeParam('$location', (String) params.get('location')));
        query.addAll(client.makeParam('propertylist', (List<String>) params.get('propertylist'), 'csv'));
        query.addAll(client.makeParam('sling.servlet.paths', (String) params.get('slingServletPaths')));
        query.addAll(client.makeParam('oauth.revocation.active', (Boolean) params.get('oauthRevocationActive')));

        List<OAS.Param> form = new List<OAS.Param>();

        return (OASComAdobeGraniteOauthServerImplOAu) client.invoke(
            'POST', '/system/console/configMgr/com.adobe.granite.oauth.server.impl.OAuth2RevocationEndpointServlet', '',
            query, form,
            new Map<String, Object>(),
            new Map<String, Object>(),
            new List<String>{ 'application/json', 'text/plain' },
            new List<String>(),
            new List<String> { 'aemAuth' },
            OASComAdobeGraniteOauthServerImplOAu.class
        );
    }
    /**
     * 
     * 
     * @param post  (optional)
     * @param apply  (optional)
     * @param r_delete  (optional)
     * @param action  (optional)
     * @param location  (optional)
     * @param propertylist  (optional)
     * @param oauthIssuer  (optional)
     * @param oauthAccessTokenExpiresIn  (optional)
     * @param osgiHttpWhiteboardServletPattern  (optional)
     * @param osgiHttpWhiteboardContextSelect  (optional)
     * @return OASComAdobeGraniteOauthServerImplOAu
     * @throws OAS.ApiException if fails to make API call
     */
    public OASComAdobeGraniteOauthServerImplOAu comAdobeGraniteOauthServerImplOAuth2TokenEndpointServlet(Map<String, Object> params) {
        List<OAS.Param> query = new List<OAS.Param>();

        // cast query params to verify their expected type
        query.addAll(client.makeParam('post', (Boolean) params.get('post')));
        query.addAll(client.makeParam('apply', (Boolean) params.get('apply')));
        query.addAll(client.makeParam('delete', (Boolean) params.get('r_delete')));
        query.addAll(client.makeParam('action', (String) params.get('action')));
        query.addAll(client.makeParam('$location', (String) params.get('location')));
        query.addAll(client.makeParam('propertylist', (List<String>) params.get('propertylist'), 'csv'));
        query.addAll(client.makeParam('oauth.issuer', (String) params.get('oauthIssuer')));
        query.addAll(client.makeParam('oauth.access.token.expires.in', (String) params.get('oauthAccessTokenExpiresIn')));
        query.addAll(client.makeParam('osgi.http.whiteboard.servlet.pattern', (String) params.get('osgiHttpWhiteboardServletPattern')));
        query.addAll(client.makeParam('osgi.http.whiteboard.context.select', (String) params.get('osgiHttpWhiteboardContextSelect')));

        List<OAS.Param> form = new List<OAS.Param>();

        return (OASComAdobeGraniteOauthServerImplOAu) client.invoke(
            'POST', '/system/console/configMgr/com.adobe.granite.oauth.server.impl.OAuth2TokenEndpointServlet', '',
            query, form,
            new Map<String, Object>(),
            new Map<String, Object>(),
            new List<String>{ 'application/json', 'text/plain' },
            new List<String>(),
            new List<String> { 'aemAuth' },
            OASComAdobeGraniteOauthServerImplOAu.class
        );
    }
    /**
     * 
     * 
     * @param post  (optional)
     * @param apply  (optional)
     * @param r_delete  (optional)
     * @param action  (optional)
     * @param location  (optional)
     * @param propertylist  (optional)
     * @param oauthTokenRevocationActive  (optional)
     * @return OASComAdobeGraniteOauthServerImplOAu
     * @throws OAS.ApiException if fails to make API call
     */
    public OASComAdobeGraniteOauthServerImplOAu comAdobeGraniteOauthServerImplOAuth2TokenRevocationServlet(Map<String, Object> params) {
        List<OAS.Param> query = new List<OAS.Param>();

        // cast query params to verify their expected type
        query.addAll(client.makeParam('post', (Boolean) params.get('post')));
        query.addAll(client.makeParam('apply', (Boolean) params.get('apply')));
        query.addAll(client.makeParam('delete', (Boolean) params.get('r_delete')));
        query.addAll(client.makeParam('action', (String) params.get('action')));
        query.addAll(client.makeParam('$location', (String) params.get('location')));
        query.addAll(client.makeParam('propertylist', (List<String>) params.get('propertylist'), 'csv'));
        query.addAll(client.makeParam('oauth.token.revocation.active', (Boolean) params.get('oauthTokenRevocationActive')));

        List<OAS.Param> form = new List<OAS.Param>();

        return (OASComAdobeGraniteOauthServerImplOAu) client.invoke(
            'POST', '/system/console/configMgr/com.adobe.granite.oauth.server.impl.OAuth2TokenRevocationServlet', '',
            query, form,
            new Map<String, Object>(),
            new Map<String, Object>(),
            new List<String>{ 'application/json', 'text/plain' },
            new List<String>(),
            new List<String> { 'aemAuth' },
            OASComAdobeGraniteOauthServerImplOAu.class
        );
    }
    /**
     * 
     * 
     * @param post  (optional)
     * @param apply  (optional)
     * @param r_delete  (optional)
     * @param action  (optional)
     * @param location  (optional)
     * @param propertylist  (optional)
     * @param offloadingTransporter  (optional)
     * @param offloadingCleanupPayload  (optional)
     * @return OASComAdobeGraniteOffloadingImplOffl
     * @throws OAS.ApiException if fails to make API call
     */
    public OASComAdobeGraniteOffloadingImplOffl comAdobeGraniteOffloadingImplOffloadingConfigurator(Map<String, Object> params) {
        List<OAS.Param> query = new List<OAS.Param>();

        // cast query params to verify their expected type
        query.addAll(client.makeParam('post', (Boolean) params.get('post')));
        query.addAll(client.makeParam('apply', (Boolean) params.get('apply')));
        query.addAll(client.makeParam('delete', (Boolean) params.get('r_delete')));
        query.addAll(client.makeParam('action', (String) params.get('action')));
        query.addAll(client.makeParam('$location', (String) params.get('location')));
        query.addAll(client.makeParam('propertylist', (List<String>) params.get('propertylist'), 'csv'));
        query.addAll(client.makeParam('offloading.transporter', (String) params.get('offloadingTransporter')));
        query.addAll(client.makeParam('offloading.cleanup.payload', (Boolean) params.get('offloadingCleanupPayload')));

        List<OAS.Param> form = new List<OAS.Param>();

        return (OASComAdobeGraniteOffloadingImplOffl) client.invoke(
            'POST', '/system/console/configMgr/com.adobe.granite.offloading.impl.OffloadingConfigurator', '',
            query, form,
            new Map<String, Object>(),
            new Map<String, Object>(),
            new List<String>{ 'application/json', 'text/plain' },
            new List<String>(),
            new List<String> { 'aemAuth' },
            OASComAdobeGraniteOffloadingImplOffl.class
        );
    }
    /**
     * 
     * 
     * @param post  (optional)
     * @param apply  (optional)
     * @param r_delete  (optional)
     * @param action  (optional)
     * @param location  (optional)
     * @param propertylist  (optional)
     * @param offloadingJobclonerEnabled  (optional)
     * @return OASComAdobeGraniteOffloadingImplOffl
     * @throws OAS.ApiException if fails to make API call
     */
    public OASComAdobeGraniteOffloadingImplOffl comAdobeGraniteOffloadingImplOffloadingJobCloner(Map<String, Object> params) {
        List<OAS.Param> query = new List<OAS.Param>();

        // cast query params to verify their expected type
        query.addAll(client.makeParam('post', (Boolean) params.get('post')));
        query.addAll(client.makeParam('apply', (Boolean) params.get('apply')));
        query.addAll(client.makeParam('delete', (Boolean) params.get('r_delete')));
        query.addAll(client.makeParam('action', (String) params.get('action')));
        query.addAll(client.makeParam('$location', (String) params.get('location')));
        query.addAll(client.makeParam('propertylist', (List<String>) params.get('propertylist'), 'csv'));
        query.addAll(client.makeParam('offloading.jobcloner.enabled', (Boolean) params.get('offloadingJobclonerEnabled')));

        List<OAS.Param> form = new List<OAS.Param>();

        return (OASComAdobeGraniteOffloadingImplOffl) client.invoke(
            'POST', '/system/console/configMgr/com.adobe.granite.offloading.impl.OffloadingJobCloner', '',
            query, form,
            new Map<String, Object>(),
            new Map<String, Object>(),
            new List<String>{ 'application/json', 'text/plain' },
            new List<String>(),
            new List<String> { 'aemAuth' },
            OASComAdobeGraniteOffloadingImplOffl.class
        );
    }
    /**
     * 
     * 
     * @param post  (optional)
     * @param apply  (optional)
     * @param r_delete  (optional)
     * @param action  (optional)
     * @param location  (optional)
     * @param propertylist  (optional)
     * @param offloadingOffloaderEnabled  (optional)
     * @return OASComAdobeGraniteOffloadingImplOffl
     * @throws OAS.ApiException if fails to make API call
     */
    public OASComAdobeGraniteOffloadingImplOffl comAdobeGraniteOffloadingImplOffloadingJobOffloader(Map<String, Object> params) {
        List<OAS.Param> query = new List<OAS.Param>();

        // cast query params to verify their expected type
        query.addAll(client.makeParam('post', (Boolean) params.get('post')));
        query.addAll(client.makeParam('apply', (Boolean) params.get('apply')));
        query.addAll(client.makeParam('delete', (Boolean) params.get('r_delete')));
        query.addAll(client.makeParam('action', (String) params.get('action')));
        query.addAll(client.makeParam('$location', (String) params.get('location')));
        query.addAll(client.makeParam('propertylist', (List<String>) params.get('propertylist'), 'csv'));
        query.addAll(client.makeParam('offloading.offloader.enabled', (Boolean) params.get('offloadingOffloaderEnabled')));

        List<OAS.Param> form = new List<OAS.Param>();

        return (OASComAdobeGraniteOffloadingImplOffl) client.invoke(
            'POST', '/system/console/configMgr/com.adobe.granite.offloading.impl.OffloadingJobOffloader', '',
            query, form,
            new Map<String, Object>(),
            new Map<String, Object>(),
            new List<String>{ 'application/json', 'text/plain' },
            new List<String>(),
            new List<String> { 'aemAuth' },
            OASComAdobeGraniteOffloadingImplOffl.class
        );
    }
    /**
     * 
     * 
     * @param post  (optional)
     * @param apply  (optional)
     * @param r_delete  (optional)
     * @param action  (optional)
     * @param location  (optional)
     * @param propertylist  (optional)
     * @param offloadingAgentmanagerEnabled  (optional)
     * @return OASComAdobeGraniteOffloadingImplTran
     * @throws OAS.ApiException if fails to make API call
     */
    public OASComAdobeGraniteOffloadingImplTran comAdobeGraniteOffloadingImplTransporterOffloadingAgentManager(Map<String, Object> params) {
        List<OAS.Param> query = new List<OAS.Param>();

        // cast query params to verify their expected type
        query.addAll(client.makeParam('post', (Boolean) params.get('post')));
        query.addAll(client.makeParam('apply', (Boolean) params.get('apply')));
        query.addAll(client.makeParam('delete', (Boolean) params.get('r_delete')));
        query.addAll(client.makeParam('action', (String) params.get('action')));
        query.addAll(client.makeParam('$location', (String) params.get('location')));
        query.addAll(client.makeParam('propertylist', (List<String>) params.get('propertylist'), 'csv'));
        query.addAll(client.makeParam('offloading.agentmanager.enabled', (Boolean) params.get('offloadingAgentmanagerEnabled')));

        List<OAS.Param> form = new List<OAS.Param>();

        return (OASComAdobeGraniteOffloadingImplTran) client.invoke(
            'POST', '/system/console/configMgr/com.adobe.granite.offloading.impl.transporter.OffloadingAgentManager', '',
            query, form,
            new Map<String, Object>(),
            new Map<String, Object>(),
            new List<String>{ 'application/json', 'text/plain' },
            new List<String>(),
            new List<String> { 'aemAuth' },
            OASComAdobeGraniteOffloadingImplTran.class
        );
    }
    /**
     * 
     * 
     * @param post  (optional)
     * @param apply  (optional)
     * @param r_delete  (optional)
     * @param action  (optional)
     * @param location  (optional)
     * @param propertylist  (optional)
     * @param defaultTransportAgentToWorkerPrefix  (optional)
     * @param defaultTransportAgentToMasterPrefix  (optional)
     * @param defaultTransportInputPackage  (optional)
     * @param defaultTransportOutputPackage  (optional)
     * @param defaultTransportReplicationSynchronous  (optional)
     * @param defaultTransportContentpackage  (optional)
     * @param offloadingTransporterDefaultEnabled  (optional)
     * @return OASComAdobeGraniteOffloadingImplTran
     * @throws OAS.ApiException if fails to make API call
     */
    public OASComAdobeGraniteOffloadingImplTran comAdobeGraniteOffloadingImplTransporterOffloadingDefaultTranspo(Map<String, Object> params) {
        List<OAS.Param> query = new List<OAS.Param>();

        // cast query params to verify their expected type
        query.addAll(client.makeParam('post', (Boolean) params.get('post')));
        query.addAll(client.makeParam('apply', (Boolean) params.get('apply')));
        query.addAll(client.makeParam('delete', (Boolean) params.get('r_delete')));
        query.addAll(client.makeParam('action', (String) params.get('action')));
        query.addAll(client.makeParam('$location', (String) params.get('location')));
        query.addAll(client.makeParam('propertylist', (List<String>) params.get('propertylist'), 'csv'));
        query.addAll(client.makeParam('default.transport.agent-to-worker.prefix', (String) params.get('defaultTransportAgentToWorkerPrefix')));
        query.addAll(client.makeParam('default.transport.agent-to-master.prefix', (String) params.get('defaultTransportAgentToMasterPrefix')));
        query.addAll(client.makeParam('default.transport.input.package', (String) params.get('defaultTransportInputPackage')));
        query.addAll(client.makeParam('default.transport.output.package', (String) params.get('defaultTransportOutputPackage')));
        query.addAll(client.makeParam('default.transport.replication.synchronous', (Boolean) params.get('defaultTransportReplicationSynchronous')));
        query.addAll(client.makeParam('default.transport.contentpackage', (Boolean) params.get('defaultTransportContentpackage')));
        query.addAll(client.makeParam('offloading.transporter.default.enabled', (Boolean) params.get('offloadingTransporterDefaultEnabled')));

        List<OAS.Param> form = new List<OAS.Param>();

        return (OASComAdobeGraniteOffloadingImplTran) client.invoke(
            'POST', '/system/console/configMgr/com.adobe.granite.offloading.impl.transporter.OffloadingDefaultTransporter', '',
            query, form,
            new Map<String, Object>(),
            new Map<String, Object>(),
            new List<String>{ 'application/json', 'text/plain' },
            new List<String>(),
            new List<String> { 'aemAuth' },
            OASComAdobeGraniteOffloadingImplTran.class
        );
    }
    /**
     * 
     * 
     * @param post  (optional)
     * @param apply  (optional)
     * @param r_delete  (optional)
     * @param action  (optional)
     * @param location  (optional)
     * @param propertylist  (optional)
     * @param omnisearchSuggestionRequiretextMin  (optional)
     * @param omnisearchSuggestionSpellcheckRequire  (optional)
     * @return OASComAdobeGraniteOmnisearchImplCore
     * @throws OAS.ApiException if fails to make API call
     */
    public OASComAdobeGraniteOmnisearchImplCore comAdobeGraniteOmnisearchImplCoreOmniSearchServiceImpl(Map<String, Object> params) {
        List<OAS.Param> query = new List<OAS.Param>();

        // cast query params to verify their expected type
        query.addAll(client.makeParam('post', (Boolean) params.get('post')));
        query.addAll(client.makeParam('apply', (Boolean) params.get('apply')));
        query.addAll(client.makeParam('delete', (Boolean) params.get('r_delete')));
        query.addAll(client.makeParam('action', (String) params.get('action')));
        query.addAll(client.makeParam('$location', (String) params.get('location')));
        query.addAll(client.makeParam('propertylist', (List<String>) params.get('propertylist'), 'csv'));
        query.addAll(client.makeParam('omnisearch.suggestion.requiretext.min', (Integer) params.get('omnisearchSuggestionRequiretextMin')));
        query.addAll(client.makeParam('omnisearch.suggestion.spellcheck.require', (Boolean) params.get('omnisearchSuggestionSpellcheckRequire')));

        List<OAS.Param> form = new List<OAS.Param>();

        return (OASComAdobeGraniteOmnisearchImplCore) client.invoke(
            'POST', '/system/console/configMgr/com.adobe.granite.omnisearch.impl.core.OmniSearchServiceImpl', '',
            query, form,
            new Map<String, Object>(),
            new Map<String, Object>(),
            new List<String>{ 'application/json', 'text/plain' },
            new List<String>(),
            new List<String> { 'aemAuth' },
            OASComAdobeGraniteOmnisearchImplCore.class
        );
    }
    /**
     * 
     * 
     * @param post  (optional)
     * @param apply  (optional)
     * @param r_delete  (optional)
     * @param action  (optional)
     * @param location  (optional)
     * @param propertylist  (optional)
     * @param optoutCookies  (optional)
     * @param optoutHeaders  (optional)
     * @param optoutWhitelistCookies  (optional)
     * @return OASComAdobeGraniteOptoutImplOptOutSe
     * @throws OAS.ApiException if fails to make API call
     */
    public OASComAdobeGraniteOptoutImplOptOutSe comAdobeGraniteOptoutImplOptOutServiceImpl(Map<String, Object> params) {
        List<OAS.Param> query = new List<OAS.Param>();

        // cast query params to verify their expected type
        query.addAll(client.makeParam('post', (Boolean) params.get('post')));
        query.addAll(client.makeParam('apply', (Boolean) params.get('apply')));
        query.addAll(client.makeParam('delete', (Boolean) params.get('r_delete')));
        query.addAll(client.makeParam('action', (String) params.get('action')));
        query.addAll(client.makeParam('$location', (String) params.get('location')));
        query.addAll(client.makeParam('propertylist', (List<String>) params.get('propertylist'), 'csv'));
        query.addAll(client.makeParams('optout.cookies', (List<String>) params.get('optoutCookies')));
        query.addAll(client.makeParams('optout.headers', (List<String>) params.get('optoutHeaders')));
        query.addAll(client.makeParams('optout.whitelist.cookies', (List<String>) params.get('optoutWhitelistCookies')));

        List<OAS.Param> form = new List<OAS.Param>();

        return (OASComAdobeGraniteOptoutImplOptOutSe) client.invoke(
            'POST', '/system/console/configMgr/com.adobe.granite.optout.impl.OptOutServiceImpl', '',
            query, form,
            new Map<String, Object>(),
            new Map<String, Object>(),
            new List<String>{ 'application/json', 'text/plain' },
            new List<String>(),
            new List<String> { 'aemAuth' },
            OASComAdobeGraniteOptoutImplOptOutSe.class
        );
    }
    /**
     * 
     * 
     * @param post  (optional)
     * @param apply  (optional)
     * @param r_delete  (optional)
     * @param action  (optional)
     * @param location  (optional)
     * @param propertylist  (optional)
     * @param indexingCriticalThreshold  (optional)
     * @param indexingWarnThreshold  (optional)
     * @param hcTags  (optional)
     * @return OASComAdobeGraniteQueriesImplHcAsync
     * @throws OAS.ApiException if fails to make API call
     */
    public OASComAdobeGraniteQueriesImplHcAsync comAdobeGraniteQueriesImplHcAsyncIndexHealthCheck(Map<String, Object> params) {
        List<OAS.Param> query = new List<OAS.Param>();

        // cast query params to verify their expected type
        query.addAll(client.makeParam('post', (Boolean) params.get('post')));
        query.addAll(client.makeParam('apply', (Boolean) params.get('apply')));
        query.addAll(client.makeParam('delete', (Boolean) params.get('r_delete')));
        query.addAll(client.makeParam('action', (String) params.get('action')));
        query.addAll(client.makeParam('$location', (String) params.get('location')));
        query.addAll(client.makeParam('propertylist', (List<String>) params.get('propertylist'), 'csv'));
        query.addAll(client.makeParam('indexing.critical.threshold', (Integer) params.get('indexingCriticalThreshold')));
        query.addAll(client.makeParam('indexing.warn.threshold', (Integer) params.get('indexingWarnThreshold')));
        query.addAll(client.makeParams('hc.tags', (List<String>) params.get('hcTags')));

        List<OAS.Param> form = new List<OAS.Param>();

        return (OASComAdobeGraniteQueriesImplHcAsync) client.invoke(
            'POST', '/system/console/configMgr/com.adobe.granite.queries.impl.hc.AsyncIndexHealthCheck', '',
            query, form,
            new Map<String, Object>(),
            new Map<String, Object>(),
            new List<String>{ 'application/json', 'text/plain' },
            new List<String>(),
            new List<String> { 'aemAuth' },
            OASComAdobeGraniteQueriesImplHcAsync.class
        );
    }
    /**
     * 
     * 
     * @param post  (optional)
     * @param apply  (optional)
     * @param r_delete  (optional)
     * @param action  (optional)
     * @param location  (optional)
     * @param propertylist  (optional)
     * @param largeIndexCriticalThreshold  (optional)
     * @param largeIndexWarnThreshold  (optional)
     * @param hcTags  (optional)
     * @return OASComAdobeGraniteQueriesImplHcLarge
     * @throws OAS.ApiException if fails to make API call
     */
    public OASComAdobeGraniteQueriesImplHcLarge comAdobeGraniteQueriesImplHcLargeIndexHealthCheck(Map<String, Object> params) {
        List<OAS.Param> query = new List<OAS.Param>();

        // cast query params to verify their expected type
        query.addAll(client.makeParam('post', (Boolean) params.get('post')));
        query.addAll(client.makeParam('apply', (Boolean) params.get('apply')));
        query.addAll(client.makeParam('delete', (Boolean) params.get('r_delete')));
        query.addAll(client.makeParam('action', (String) params.get('action')));
        query.addAll(client.makeParam('$location', (String) params.get('location')));
        query.addAll(client.makeParam('propertylist', (List<String>) params.get('propertylist'), 'csv'));
        query.addAll(client.makeParam('large.index.critical.threshold', (Integer) params.get('largeIndexCriticalThreshold')));
        query.addAll(client.makeParam('large.index.warn.threshold', (Integer) params.get('largeIndexWarnThreshold')));
        query.addAll(client.makeParams('hc.tags', (List<String>) params.get('hcTags')));

        List<OAS.Param> form = new List<OAS.Param>();

        return (OASComAdobeGraniteQueriesImplHcLarge) client.invoke(
            'POST', '/system/console/configMgr/com.adobe.granite.queries.impl.hc.LargeIndexHealthCheck', '',
            query, form,
            new Map<String, Object>(),
            new Map<String, Object>(),
            new List<String>{ 'application/json', 'text/plain' },
            new List<String>(),
            new List<String> { 'aemAuth' },
            OASComAdobeGraniteQueriesImplHcLarge.class
        );
    }
    /**
     * 
     * 
     * @param post  (optional)
     * @param apply  (optional)
     * @param r_delete  (optional)
     * @param action  (optional)
     * @param location  (optional)
     * @param propertylist  (optional)
     * @param hcTags  (optional)
     * @return OASComAdobeGraniteQueriesImplHcQueri
     * @throws OAS.ApiException if fails to make API call
     */
    public OASComAdobeGraniteQueriesImplHcQueri comAdobeGraniteQueriesImplHcQueriesStatusHealthCheck(Map<String, Object> params) {
        List<OAS.Param> query = new List<OAS.Param>();

        // cast query params to verify their expected type
        query.addAll(client.makeParam('post', (Boolean) params.get('post')));
        query.addAll(client.makeParam('apply', (Boolean) params.get('apply')));
        query.addAll(client.makeParam('delete', (Boolean) params.get('r_delete')));
        query.addAll(client.makeParam('action', (String) params.get('action')));
        query.addAll(client.makeParam('$location', (String) params.get('location')));
        query.addAll(client.makeParam('propertylist', (List<String>) params.get('propertylist'), 'csv'));
        query.addAll(client.makeParams('hc.tags', (List<String>) params.get('hcTags')));

        List<OAS.Param> form = new List<OAS.Param>();

        return (OASComAdobeGraniteQueriesImplHcQueri) client.invoke(
            'POST', '/system/console/configMgr/com.adobe.granite.queries.impl.hc.QueriesStatusHealthCheck', '',
            query, form,
            new Map<String, Object>(),
            new Map<String, Object>(),
            new List<String>{ 'application/json', 'text/plain' },
            new List<String>(),
            new List<String> { 'aemAuth' },
            OASComAdobeGraniteQueriesImplHcQueri.class
        );
    }
    /**
     * 
     * 
     * @param post  (optional)
     * @param apply  (optional)
     * @param r_delete  (optional)
     * @param action  (optional)
     * @param location  (optional)
     * @param propertylist  (optional)
     * @param getPeriod  (optional)
     * @return OASComAdobeGraniteQueriesImplHcQuery
     * @throws OAS.ApiException if fails to make API call
     */
    public OASComAdobeGraniteQueriesImplHcQuery comAdobeGraniteQueriesImplHcQueryHealthCheckMetrics(Map<String, Object> params) {
        List<OAS.Param> query = new List<OAS.Param>();

        // cast query params to verify their expected type
        query.addAll(client.makeParam('post', (Boolean) params.get('post')));
        query.addAll(client.makeParam('apply', (Boolean) params.get('apply')));
        query.addAll(client.makeParam('delete', (Boolean) params.get('r_delete')));
        query.addAll(client.makeParam('action', (String) params.get('action')));
        query.addAll(client.makeParam('$location', (String) params.get('location')));
        query.addAll(client.makeParam('propertylist', (List<String>) params.get('propertylist'), 'csv'));
        query.addAll(client.makeParam('getPeriod', (Integer) params.get('getPeriod')));

        List<OAS.Param> form = new List<OAS.Param>();

        return (OASComAdobeGraniteQueriesImplHcQuery) client.invoke(
            'POST', '/system/console/configMgr/com.adobe.granite.queries.impl.hc.QueryHealthCheckMetrics', '',
            query, form,
            new Map<String, Object>(),
            new Map<String, Object>(),
            new List<String>{ 'application/json', 'text/plain' },
            new List<String>(),
            new List<String> { 'aemAuth' },
            OASComAdobeGraniteQueriesImplHcQuery.class
        );
    }
    /**
     * 
     * 
     * @param post  (optional)
     * @param apply  (optional)
     * @param r_delete  (optional)
     * @param action  (optional)
     * @param location  (optional)
     * @param propertylist  (optional)
     * @param hcTags  (optional)
     * @return OASComAdobeGraniteQueriesImplHcQuery
     * @throws OAS.ApiException if fails to make API call
     */
    public OASComAdobeGraniteQueriesImplHcQuery comAdobeGraniteQueriesImplHcQueryLimitsHealthCheck(Map<String, Object> params) {
        List<OAS.Param> query = new List<OAS.Param>();

        // cast query params to verify their expected type
        query.addAll(client.makeParam('post', (Boolean) params.get('post')));
        query.addAll(client.makeParam('apply', (Boolean) params.get('apply')));
        query.addAll(client.makeParam('delete', (Boolean) params.get('r_delete')));
        query.addAll(client.makeParam('action', (String) params.get('action')));
        query.addAll(client.makeParam('$location', (String) params.get('location')));
        query.addAll(client.makeParam('propertylist', (List<String>) params.get('propertylist'), 'csv'));
        query.addAll(client.makeParams('hc.tags', (List<String>) params.get('hcTags')));

        List<OAS.Param> form = new List<OAS.Param>();

        return (OASComAdobeGraniteQueriesImplHcQuery) client.invoke(
            'POST', '/system/console/configMgr/com.adobe.granite.queries.impl.hc.QueryLimitsHealthCheck', '',
            query, form,
            new Map<String, Object>(),
            new Map<String, Object>(),
            new List<String>{ 'application/json', 'text/plain' },
            new List<String>(),
            new List<String> { 'aemAuth' },
            OASComAdobeGraniteQueriesImplHcQuery.class
        );
    }
    /**
     * 
     * 
     * @param post  (optional)
     * @param apply  (optional)
     * @param r_delete  (optional)
     * @param action  (optional)
     * @param location  (optional)
     * @param propertylist  (optional)
     * @param numberOfRetriesAllowed  (optional)
     * @param hcTags  (optional)
     * @return OASComAdobeGraniteReplicationHcImplR
     * @throws OAS.ApiException if fails to make API call
     */
    public OASComAdobeGraniteReplicationHcImplR comAdobeGraniteReplicationHcImplReplicationQueueHealthCheck(Map<String, Object> params) {
        List<OAS.Param> query = new List<OAS.Param>();

        // cast query params to verify their expected type
        query.addAll(client.makeParam('post', (Boolean) params.get('post')));
        query.addAll(client.makeParam('apply', (Boolean) params.get('apply')));
        query.addAll(client.makeParam('delete', (Boolean) params.get('r_delete')));
        query.addAll(client.makeParam('action', (String) params.get('action')));
        query.addAll(client.makeParam('$location', (String) params.get('location')));
        query.addAll(client.makeParam('propertylist', (List<String>) params.get('propertylist'), 'csv'));
        query.addAll(client.makeParam('number.of.retries.allowed', (Integer) params.get('numberOfRetriesAllowed')));
        query.addAll(client.makeParams('hc.tags', (List<String>) params.get('hcTags')));

        List<OAS.Param> form = new List<OAS.Param>();

        return (OASComAdobeGraniteReplicationHcImplR) client.invoke(
            'POST', '/system/console/configMgr/com.adobe.granite.replication.hc.impl.ReplicationQueueHealthCheck', '',
            query, form,
            new Map<String, Object>(),
            new Map<String, Object>(),
            new List<String>{ 'application/json', 'text/plain' },
            new List<String>(),
            new List<String> { 'aemAuth' },
            OASComAdobeGraniteReplicationHcImplR.class
        );
    }
    /**
     * 
     * 
     * @param post  (optional)
     * @param apply  (optional)
     * @param r_delete  (optional)
     * @param action  (optional)
     * @param location  (optional)
     * @param propertylist  (optional)
     * @param hcTags  (optional)
     * @return OASComAdobeGraniteReplicationHcImplR
     * @throws OAS.ApiException if fails to make API call
     */
    public OASComAdobeGraniteReplicationHcImplR comAdobeGraniteReplicationHcImplReplicationTransportUsersHealthC(Map<String, Object> params) {
        List<OAS.Param> query = new List<OAS.Param>();

        // cast query params to verify their expected type
        query.addAll(client.makeParam('post', (Boolean) params.get('post')));
        query.addAll(client.makeParam('apply', (Boolean) params.get('apply')));
        query.addAll(client.makeParam('delete', (Boolean) params.get('r_delete')));
        query.addAll(client.makeParam('action', (String) params.get('action')));
        query.addAll(client.makeParam('$location', (String) params.get('location')));
        query.addAll(client.makeParam('propertylist', (List<String>) params.get('propertylist'), 'csv'));
        query.addAll(client.makeParams('hc.tags', (List<String>) params.get('hcTags')));

        List<OAS.Param> form = new List<OAS.Param>();

        return (OASComAdobeGraniteReplicationHcImplR) client.invoke(
            'POST', '/system/console/configMgr/com.adobe.granite.replication.hc.impl.ReplicationTransportUsersHealthCheck', '',
            query, form,
            new Map<String, Object>(),
            new Map<String, Object>(),
            new List<String>{ 'application/json', 'text/plain' },
            new List<String>(),
            new List<String> { 'aemAuth' },
            OASComAdobeGraniteReplicationHcImplR.class
        );
    }
    /**
     * 
     * 
     * @param post  (optional)
     * @param apply  (optional)
     * @param r_delete  (optional)
     * @param action  (optional)
     * @param location  (optional)
     * @param propertylist  (optional)
     * @param hcTags  (optional)
     * @return OASComAdobeGraniteRepositoryHcImplAu
     * @throws OAS.ApiException if fails to make API call
     */
    public OASComAdobeGraniteRepositoryHcImplAu comAdobeGraniteRepositoryHcImplAuthorizableNodeNameHealthCheck(Map<String, Object> params) {
        List<OAS.Param> query = new List<OAS.Param>();

        // cast query params to verify their expected type
        query.addAll(client.makeParam('post', (Boolean) params.get('post')));
        query.addAll(client.makeParam('apply', (Boolean) params.get('apply')));
        query.addAll(client.makeParam('delete', (Boolean) params.get('r_delete')));
        query.addAll(client.makeParam('action', (String) params.get('action')));
        query.addAll(client.makeParam('$location', (String) params.get('location')));
        query.addAll(client.makeParam('propertylist', (List<String>) params.get('propertylist'), 'csv'));
        query.addAll(client.makeParams('hc.tags', (List<String>) params.get('hcTags')));

        List<OAS.Param> form = new List<OAS.Param>();

        return (OASComAdobeGraniteRepositoryHcImplAu) client.invoke(
            'POST', '/system/console/configMgr/com.adobe.granite.repository.hc.impl.AuthorizableNodeNameHealthCheck', '',
            query, form,
            new Map<String, Object>(),
            new Map<String, Object>(),
            new List<String>{ 'application/json', 'text/plain' },
            new List<String>(),
            new List<String> { 'aemAuth' },
            OASComAdobeGraniteRepositoryHcImplAu.class
        );
    }
    /**
     * 
     * 
     * @param post  (optional)
     * @param apply  (optional)
     * @param r_delete  (optional)
     * @param action  (optional)
     * @param location  (optional)
     * @param propertylist  (optional)
     * @param hcTags  (optional)
     * @param excludeSearchPath  (optional)
     * @return OASComAdobeGraniteRepositoryHcImplCo
     * @throws OAS.ApiException if fails to make API call
     */
    public OASComAdobeGraniteRepositoryHcImplCo comAdobeGraniteRepositoryHcImplContentSlingSlingContentHealthC(Map<String, Object> params) {
        List<OAS.Param> query = new List<OAS.Param>();

        // cast query params to verify their expected type
        query.addAll(client.makeParam('post', (Boolean) params.get('post')));
        query.addAll(client.makeParam('apply', (Boolean) params.get('apply')));
        query.addAll(client.makeParam('delete', (Boolean) params.get('r_delete')));
        query.addAll(client.makeParam('action', (String) params.get('action')));
        query.addAll(client.makeParam('$location', (String) params.get('location')));
        query.addAll(client.makeParam('propertylist', (List<String>) params.get('propertylist'), 'csv'));
        query.addAll(client.makeParams('hc.tags', (List<String>) params.get('hcTags')));
        query.addAll(client.makeParams('exclude.search.path', (List<String>) params.get('excludeSearchPath')));

        List<OAS.Param> form = new List<OAS.Param>();

        return (OASComAdobeGraniteRepositoryHcImplCo) client.invoke(
            'POST', '/system/console/configMgr/com.adobe.granite.repository.hc.impl.content.sling.SlingContentHealthCheck', '',
            query, form,
            new Map<String, Object>(),
            new Map<String, Object>(),
            new List<String>{ 'application/json', 'text/plain' },
            new List<String>(),
            new List<String> { 'aemAuth' },
            OASComAdobeGraniteRepositoryHcImplCo.class
        );
    }
    /**
     * 
     * 
     * @param post  (optional)
     * @param apply  (optional)
     * @param r_delete  (optional)
     * @param action  (optional)
     * @param location  (optional)
     * @param propertylist  (optional)
     * @param hcTags  (optional)
     * @return OASComAdobeGraniteRepositoryHcImplCo
     * @throws OAS.ApiException if fails to make API call
     */
    public OASComAdobeGraniteRepositoryHcImplCo comAdobeGraniteRepositoryHcImplContinuousRGCHealthCheck(Map<String, Object> params) {
        List<OAS.Param> query = new List<OAS.Param>();

        // cast query params to verify their expected type
        query.addAll(client.makeParam('post', (Boolean) params.get('post')));
        query.addAll(client.makeParam('apply', (Boolean) params.get('apply')));
        query.addAll(client.makeParam('delete', (Boolean) params.get('r_delete')));
        query.addAll(client.makeParam('action', (String) params.get('action')));
        query.addAll(client.makeParam('$location', (String) params.get('location')));
        query.addAll(client.makeParam('propertylist', (List<String>) params.get('propertylist'), 'csv'));
        query.addAll(client.makeParams('hc.tags', (List<String>) params.get('hcTags')));

        List<OAS.Param> form = new List<OAS.Param>();

        return (OASComAdobeGraniteRepositoryHcImplCo) client.invoke(
            'POST', '/system/console/configMgr/com.adobe.granite.repository.hc.impl.ContinuousRGCHealthCheck', '',
            query, form,
            new Map<String, Object>(),
            new Map<String, Object>(),
            new List<String>{ 'application/json', 'text/plain' },
            new List<String>(),
            new List<String> { 'aemAuth' },
            OASComAdobeGraniteRepositoryHcImplCo.class
        );
    }
    /**
     * 
     * 
     * @param post  (optional)
     * @param apply  (optional)
     * @param r_delete  (optional)
     * @param action  (optional)
     * @param location  (optional)
     * @param propertylist  (optional)
     * @param hcTags  (optional)
     * @return OASComAdobeGraniteRepositoryHcImplDe
     * @throws OAS.ApiException if fails to make API call
     */
    public OASComAdobeGraniteRepositoryHcImplDe comAdobeGraniteRepositoryHcImplDefaultAccessUserProfileHealthChe(Map<String, Object> params) {
        List<OAS.Param> query = new List<OAS.Param>();

        // cast query params to verify their expected type
        query.addAll(client.makeParam('post', (Boolean) params.get('post')));
        query.addAll(client.makeParam('apply', (Boolean) params.get('apply')));
        query.addAll(client.makeParam('delete', (Boolean) params.get('r_delete')));
        query.addAll(client.makeParam('action', (String) params.get('action')));
        query.addAll(client.makeParam('$location', (String) params.get('location')));
        query.addAll(client.makeParam('propertylist', (List<String>) params.get('propertylist'), 'csv'));
        query.addAll(client.makeParams('hc.tags', (List<String>) params.get('hcTags')));

        List<OAS.Param> form = new List<OAS.Param>();

        return (OASComAdobeGraniteRepositoryHcImplDe) client.invoke(
            'POST', '/system/console/configMgr/com.adobe.granite.repository.hc.impl.DefaultAccessUserProfileHealthCheck', '',
            query, form,
            new Map<String, Object>(),
            new Map<String, Object>(),
            new List<String>{ 'application/json', 'text/plain' },
            new List<String>(),
            new List<String> { 'aemAuth' },
            OASComAdobeGraniteRepositoryHcImplDe.class
        );
    }
    /**
     * 
     * 
     * @param post  (optional)
     * @param apply  (optional)
     * @param r_delete  (optional)
     * @param action  (optional)
     * @param location  (optional)
     * @param propertylist  (optional)
     * @param hcTags  (optional)
     * @param accountLogins  (optional)
     * @param consoleLogins  (optional)
     * @return OASComAdobeGraniteRepositoryHcImplDe
     * @throws OAS.ApiException if fails to make API call
     */
    public OASComAdobeGraniteRepositoryHcImplDe comAdobeGraniteRepositoryHcImplDefaultLoginsHealthCheck(Map<String, Object> params) {
        List<OAS.Param> query = new List<OAS.Param>();

        // cast query params to verify their expected type
        query.addAll(client.makeParam('post', (Boolean) params.get('post')));
        query.addAll(client.makeParam('apply', (Boolean) params.get('apply')));
        query.addAll(client.makeParam('delete', (Boolean) params.get('r_delete')));
        query.addAll(client.makeParam('action', (String) params.get('action')));
        query.addAll(client.makeParam('$location', (String) params.get('location')));
        query.addAll(client.makeParam('propertylist', (List<String>) params.get('propertylist'), 'csv'));
        query.addAll(client.makeParams('hc.tags', (List<String>) params.get('hcTags')));
        query.addAll(client.makeParams('account.logins', (List<String>) params.get('accountLogins')));
        query.addAll(client.makeParams('console.logins', (List<String>) params.get('consoleLogins')));

        List<OAS.Param> form = new List<OAS.Param>();

        return (OASComAdobeGraniteRepositoryHcImplDe) client.invoke(
            'POST', '/system/console/configMgr/com.adobe.granite.repository.hc.impl.DefaultLoginsHealthCheck', '',
            query, form,
            new Map<String, Object>(),
            new Map<String, Object>(),
            new List<String>{ 'application/json', 'text/plain' },
            new List<String>(),
            new List<String> { 'aemAuth' },
            OASComAdobeGraniteRepositoryHcImplDe.class
        );
    }
    /**
     * 
     * 
     * @param post  (optional)
     * @param apply  (optional)
     * @param r_delete  (optional)
     * @param action  (optional)
     * @param location  (optional)
     * @param propertylist  (optional)
     * @param hcTags  (optional)
     * @param diskSpaceWarnThreshold  (optional)
     * @param diskSpaceErrorThreshold  (optional)
     * @return OASComAdobeGraniteRepositoryHcImplDi
     * @throws OAS.ApiException if fails to make API call
     */
    public OASComAdobeGraniteRepositoryHcImplDi comAdobeGraniteRepositoryHcImplDiskSpaceHealthCheck(Map<String, Object> params) {
        List<OAS.Param> query = new List<OAS.Param>();

        // cast query params to verify their expected type
        query.addAll(client.makeParam('post', (Boolean) params.get('post')));
        query.addAll(client.makeParam('apply', (Boolean) params.get('apply')));
        query.addAll(client.makeParam('delete', (Boolean) params.get('r_delete')));
        query.addAll(client.makeParam('action', (String) params.get('action')));
        query.addAll(client.makeParam('$location', (String) params.get('location')));
        query.addAll(client.makeParam('propertylist', (List<String>) params.get('propertylist'), 'csv'));
        query.addAll(client.makeParams('hc.tags', (List<String>) params.get('hcTags')));
        query.addAll(client.makeParam('disk.space.warn.threshold', (Integer) params.get('diskSpaceWarnThreshold')));
        query.addAll(client.makeParam('disk.space.error.threshold', (Integer) params.get('diskSpaceErrorThreshold')));

        List<OAS.Param> form = new List<OAS.Param>();

        return (OASComAdobeGraniteRepositoryHcImplDi) client.invoke(
            'POST', '/system/console/configMgr/com.adobe.granite.repository.hc.impl.DiskSpaceHealthCheck', '',
            query, form,
            new Map<String, Object>(),
            new Map<String, Object>(),
            new List<String>{ 'application/json', 'text/plain' },
            new List<String>(),
            new List<String> { 'aemAuth' },
            OASComAdobeGraniteRepositoryHcImplDi.class
        );
    }
    /**
     * 
     * 
     * @param post  (optional)
     * @param apply  (optional)
     * @param r_delete  (optional)
     * @param action  (optional)
     * @param location  (optional)
     * @param propertylist  (optional)
     * @param hcTags  (optional)
     * @return OASComAdobeGraniteRepositoryHcImplOb
     * @throws OAS.ApiException if fails to make API call
     */
    public OASComAdobeGraniteRepositoryHcImplOb comAdobeGraniteRepositoryHcImplObservationQueueLengthHealthCheck(Map<String, Object> params) {
        List<OAS.Param> query = new List<OAS.Param>();

        // cast query params to verify their expected type
        query.addAll(client.makeParam('post', (Boolean) params.get('post')));
        query.addAll(client.makeParam('apply', (Boolean) params.get('apply')));
        query.addAll(client.makeParam('delete', (Boolean) params.get('r_delete')));
        query.addAll(client.makeParam('action', (String) params.get('action')));
        query.addAll(client.makeParam('$location', (String) params.get('location')));
        query.addAll(client.makeParam('propertylist', (List<String>) params.get('propertylist'), 'csv'));
        query.addAll(client.makeParams('hc.tags', (List<String>) params.get('hcTags')));

        List<OAS.Param> form = new List<OAS.Param>();

        return (OASComAdobeGraniteRepositoryHcImplOb) client.invoke(
            'POST', '/system/console/configMgr/com.adobe.granite.repository.hc.impl.ObservationQueueLengthHealthCheck', '',
            query, form,
            new Map<String, Object>(),
            new Map<String, Object>(),
            new List<String>{ 'application/json', 'text/plain' },
            new List<String>(),
            new List<String> { 'aemAuth' },
            OASComAdobeGraniteRepositoryHcImplOb.class
        );
    }
    /**
     * 
     * 
     * @param post  (optional)
     * @param apply  (optional)
     * @param r_delete  (optional)
     * @param action  (optional)
     * @param location  (optional)
     * @param propertylist  (optional)
     * @param enabled  (optional)
     * @param intervalSeconds  (optional)
     * @param commitsPerIntervalThreshold  (optional)
     * @param maxLocationLength  (optional)
     * @param maxDetailsShown  (optional)
     * @param minDetailsPercentage  (optional)
     * @param threadMatchers  (optional)
     * @param maxGreedyDepth  (optional)
     * @param greedyStackMatchers  (optional)
     * @param stackFilters  (optional)
     * @param stackMatchers  (optional)
     * @param stackCategorizers  (optional)
     * @param stackShorteners  (optional)
     * @return OASComAdobeGraniteRepositoryImplComm
     * @throws OAS.ApiException if fails to make API call
     */
    public OASComAdobeGraniteRepositoryImplComm comAdobeGraniteRepositoryImplCommitStatsConfig(Map<String, Object> params) {
        List<OAS.Param> query = new List<OAS.Param>();

        // cast query params to verify their expected type
        query.addAll(client.makeParam('post', (Boolean) params.get('post')));
        query.addAll(client.makeParam('apply', (Boolean) params.get('apply')));
        query.addAll(client.makeParam('delete', (Boolean) params.get('r_delete')));
        query.addAll(client.makeParam('action', (String) params.get('action')));
        query.addAll(client.makeParam('$location', (String) params.get('location')));
        query.addAll(client.makeParam('propertylist', (List<String>) params.get('propertylist'), 'csv'));
        query.addAll(client.makeParam('enabled', (Boolean) params.get('enabled')));
        query.addAll(client.makeParam('intervalSeconds', (Integer) params.get('intervalSeconds')));
        query.addAll(client.makeParam('commitsPerIntervalThreshold', (Integer) params.get('commitsPerIntervalThreshold')));
        query.addAll(client.makeParam('maxLocationLength', (Integer) params.get('maxLocationLength')));
        query.addAll(client.makeParam('maxDetailsShown', (Integer) params.get('maxDetailsShown')));
        query.addAll(client.makeParam('minDetailsPercentage', (Integer) params.get('minDetailsPercentage')));
        query.addAll(client.makeParams('threadMatchers', (List<String>) params.get('threadMatchers')));
        query.addAll(client.makeParam('maxGreedyDepth', (Integer) params.get('maxGreedyDepth')));
        query.addAll(client.makeParam('greedyStackMatchers', (String) params.get('greedyStackMatchers')));
        query.addAll(client.makeParams('stackFilters', (List<String>) params.get('stackFilters')));
        query.addAll(client.makeParams('stackMatchers', (List<String>) params.get('stackMatchers')));
        query.addAll(client.makeParams('stackCategorizers', (List<String>) params.get('stackCategorizers')));
        query.addAll(client.makeParams('stackShorteners', (List<String>) params.get('stackShorteners')));

        List<OAS.Param> form = new List<OAS.Param>();

        return (OASComAdobeGraniteRepositoryImplComm) client.invoke(
            'POST', '/system/console/configMgr/com.adobe.granite.repository.impl.CommitStatsConfig', '',
            query, form,
            new Map<String, Object>(),
            new Map<String, Object>(),
            new List<String>{ 'application/json', 'text/plain' },
            new List<String>(),
            new List<String> { 'aemAuth' },
            OASComAdobeGraniteRepositoryImplComm.class
        );
    }
    /**
     * 
     * 
     * @param post  (optional)
     * @param apply  (optional)
     * @param r_delete  (optional)
     * @param action  (optional)
     * @param location  (optional)
     * @param propertylist  (optional)
     * @param serviceRanking  (optional)
     * @param serviceusersSimpleSubjectPopulation  (optional)
     * @param serviceusersList  (optional)
     * @return OASComAdobeGraniteRepositoryServiceU
     * @throws OAS.ApiException if fails to make API call
     */
    public OASComAdobeGraniteRepositoryServiceU comAdobeGraniteRepositoryServiceUserConfiguration(Map<String, Object> params) {
        List<OAS.Param> query = new List<OAS.Param>();

        // cast query params to verify their expected type
        query.addAll(client.makeParam('post', (Boolean) params.get('post')));
        query.addAll(client.makeParam('apply', (Boolean) params.get('apply')));
        query.addAll(client.makeParam('delete', (Boolean) params.get('r_delete')));
        query.addAll(client.makeParam('action', (String) params.get('action')));
        query.addAll(client.makeParam('$location', (String) params.get('location')));
        query.addAll(client.makeParam('propertylist', (List<String>) params.get('propertylist'), 'csv'));
        query.addAll(client.makeParam('service.ranking', (Integer) params.get('serviceRanking')));
        query.addAll(client.makeParam('serviceusers.simpleSubjectPopulation', (Boolean) params.get('serviceusersSimpleSubjectPopulation')));
        query.addAll(client.makeParams('serviceusers.list', (List<String>) params.get('serviceusersList')));

        List<OAS.Param> form = new List<OAS.Param>();

        return (OASComAdobeGraniteRepositoryServiceU) client.invoke(
            'POST', '/system/console/configMgr/com.adobe.granite.repository.ServiceUserConfiguration', '',
            query, form,
            new Map<String, Object>(),
            new Map<String, Object>(),
            new List<String>{ 'application/json', 'text/plain' },
            new List<String>(),
            new List<String> { 'aemAuth' },
            OASComAdobeGraniteRepositoryServiceU.class
        );
    }
    /**
     * 
     * 
     * @param post  (optional)
     * @param apply  (optional)
     * @param r_delete  (optional)
     * @param action  (optional)
     * @param location  (optional)
     * @param propertylist  (optional)
     * @param hcTags  (optional)
     * @return OASComAdobeGraniteRequestsLoggingImp
     * @throws OAS.ApiException if fails to make API call
     */
    public OASComAdobeGraniteRequestsLoggingImp comAdobeGraniteRequestsLoggingImplHcRequestsStatusHealthCheckIm(Map<String, Object> params) {
        List<OAS.Param> query = new List<OAS.Param>();

        // cast query params to verify their expected type
        query.addAll(client.makeParam('post', (Boolean) params.get('post')));
        query.addAll(client.makeParam('apply', (Boolean) params.get('apply')));
        query.addAll(client.makeParam('delete', (Boolean) params.get('r_delete')));
        query.addAll(client.makeParam('action', (String) params.get('action')));
        query.addAll(client.makeParam('$location', (String) params.get('location')));
        query.addAll(client.makeParam('propertylist', (List<String>) params.get('propertylist'), 'csv'));
        query.addAll(client.makeParams('hc.tags', (List<String>) params.get('hcTags')));

        List<OAS.Param> form = new List<OAS.Param>();

        return (OASComAdobeGraniteRequestsLoggingImp) client.invoke(
            'POST', '/system/console/configMgr/com.adobe.granite.requests.logging.impl.hc.RequestsStatusHealthCheckImpl', '',
            query, form,
            new Map<String, Object>(),
            new Map<String, Object>(),
            new List<String>{ 'application/json', 'text/plain' },
            new List<String>(),
            new List<String> { 'aemAuth' },
            OASComAdobeGraniteRequestsLoggingImp.class
        );
    }
    /**
     * 
     * 
     * @param post  (optional)
     * @param apply  (optional)
     * @param r_delete  (optional)
     * @param action  (optional)
     * @param location  (optional)
     * @param propertylist  (optional)
     * @param name  (optional)
     * @param types  (optional)
     * @return OASComAdobeGraniteResourcestatusImpl
     * @throws OAS.ApiException if fails to make API call
     */
    public OASComAdobeGraniteResourcestatusImpl comAdobeGraniteResourcestatusImplCompositeStatusType(Map<String, Object> params) {
        List<OAS.Param> query = new List<OAS.Param>();

        // cast query params to verify their expected type
        query.addAll(client.makeParam('post', (Boolean) params.get('post')));
        query.addAll(client.makeParam('apply', (Boolean) params.get('apply')));
        query.addAll(client.makeParam('delete', (Boolean) params.get('r_delete')));
        query.addAll(client.makeParam('action', (String) params.get('action')));
        query.addAll(client.makeParam('$location', (String) params.get('location')));
        query.addAll(client.makeParam('propertylist', (List<String>) params.get('propertylist'), 'csv'));
        query.addAll(client.makeParam('name', (String) params.get('name')));
        query.addAll(client.makeParams('types', (List<String>) params.get('types')));

        List<OAS.Param> form = new List<OAS.Param>();

        return (OASComAdobeGraniteResourcestatusImpl) client.invoke(
            'POST', '/system/console/configMgr/com.adobe.granite.resourcestatus.impl.CompositeStatusType', '',
            query, form,
            new Map<String, Object>(),
            new Map<String, Object>(),
            new List<String>{ 'application/json', 'text/plain' },
            new List<String>(),
            new List<String> { 'aemAuth' },
            OASComAdobeGraniteResourcestatusImpl.class
        );
    }
    /**
     * 
     * 
     * @param post  (optional)
     * @param apply  (optional)
     * @param r_delete  (optional)
     * @param action  (optional)
     * @param location  (optional)
     * @param propertylist  (optional)
     * @param providerRoot  (optional)
     * @return OASComAdobeGraniteResourcestatusImpl
     * @throws OAS.ApiException if fails to make API call
     */
    public OASComAdobeGraniteResourcestatusImpl comAdobeGraniteResourcestatusImplStatusResourceProviderImpl(Map<String, Object> params) {
        List<OAS.Param> query = new List<OAS.Param>();

        // cast query params to verify their expected type
        query.addAll(client.makeParam('post', (Boolean) params.get('post')));
        query.addAll(client.makeParam('apply', (Boolean) params.get('apply')));
        query.addAll(client.makeParam('delete', (Boolean) params.get('r_delete')));
        query.addAll(client.makeParam('action', (String) params.get('action')));
        query.addAll(client.makeParam('$location', (String) params.get('location')));
        query.addAll(client.makeParam('propertylist', (List<String>) params.get('propertylist'), 'csv'));
        query.addAll(client.makeParam('provider.root', (String) params.get('providerRoot')));

        List<OAS.Param> form = new List<OAS.Param>();

        return (OASComAdobeGraniteResourcestatusImpl) client.invoke(
            'POST', '/system/console/configMgr/com.adobe.granite.resourcestatus.impl.StatusResourceProviderImpl', '',
            query, form,
            new Map<String, Object>(),
            new Map<String, Object>(),
            new List<String>{ 'application/json', 'text/plain' },
            new List<String>(),
            new List<String> { 'aemAuth' },
            OASComAdobeGraniteResourcestatusImpl.class
        );
    }
    /**
     * 
     * 
     * @param post  (optional)
     * @param apply  (optional)
     * @param r_delete  (optional)
     * @param action  (optional)
     * @param location  (optional)
     * @param propertylist  (optional)
     * @param mimeAllowEmpty  (optional)
     * @param mimeAllowed  (optional)
     * @return OASComAdobeGraniteRestAssetsImplAsse
     * @throws OAS.ApiException if fails to make API call
     */
    public OASComAdobeGraniteRestAssetsImplAsse comAdobeGraniteRestAssetsImplAssetContentDispositionFilter(Map<String, Object> params) {
        List<OAS.Param> query = new List<OAS.Param>();

        // cast query params to verify their expected type
        query.addAll(client.makeParam('post', (Boolean) params.get('post')));
        query.addAll(client.makeParam('apply', (Boolean) params.get('apply')));
        query.addAll(client.makeParam('delete', (Boolean) params.get('r_delete')));
        query.addAll(client.makeParam('action', (String) params.get('action')));
        query.addAll(client.makeParam('$location', (String) params.get('location')));
        query.addAll(client.makeParam('propertylist', (List<String>) params.get('propertylist'), 'csv'));
        query.addAll(client.makeParam('mime.allowEmpty', (Boolean) params.get('mimeAllowEmpty')));
        query.addAll(client.makeParams('mime.allowed', (List<String>) params.get('mimeAllowed')));

        List<OAS.Param> form = new List<OAS.Param>();

        return (OASComAdobeGraniteRestAssetsImplAsse) client.invoke(
            'POST', '/system/console/configMgr/com.adobe.granite.rest.assets.impl.AssetContentDispositionFilter', '',
            query, form,
            new Map<String, Object>(),
            new Map<String, Object>(),
            new List<String>{ 'application/json', 'text/plain' },
            new List<String>(),
            new List<String> { 'aemAuth' },
            OASComAdobeGraniteRestAssetsImplAsse.class
        );
    }
    /**
     * 
     * 
     * @param post  (optional)
     * @param apply  (optional)
     * @param r_delete  (optional)
     * @param action  (optional)
     * @param location  (optional)
     * @param propertylist  (optional)
     * @param providerRoots  (optional)
     * @return OASComAdobeGraniteRestImplApiEndpoin
     * @throws OAS.ApiException if fails to make API call
     */
    public OASComAdobeGraniteRestImplApiEndpoin comAdobeGraniteRestImplApiEndpointResourceProviderFactoryImpl(Map<String, Object> params) {
        List<OAS.Param> query = new List<OAS.Param>();

        // cast query params to verify their expected type
        query.addAll(client.makeParam('post', (Boolean) params.get('post')));
        query.addAll(client.makeParam('apply', (Boolean) params.get('apply')));
        query.addAll(client.makeParam('delete', (Boolean) params.get('r_delete')));
        query.addAll(client.makeParam('action', (String) params.get('action')));
        query.addAll(client.makeParam('$location', (String) params.get('location')));
        query.addAll(client.makeParam('propertylist', (List<String>) params.get('propertylist'), 'csv'));
        query.addAll(client.makeParam('provider.roots', (String) params.get('providerRoots')));

        List<OAS.Param> form = new List<OAS.Param>();

        return (OASComAdobeGraniteRestImplApiEndpoin) client.invoke(
            'POST', '/system/console/configMgr/com.adobe.granite.rest.impl.ApiEndpointResourceProviderFactoryImpl', '',
            query, form,
            new Map<String, Object>(),
            new Map<String, Object>(),
            new List<String>{ 'application/json', 'text/plain' },
            new List<String>(),
            new List<String> { 'aemAuth' },
            OASComAdobeGraniteRestImplApiEndpoin.class
        );
    }
    /**
     * 
     * 
     * @param post  (optional)
     * @param apply  (optional)
     * @param r_delete  (optional)
     * @param action  (optional)
     * @param location  (optional)
     * @param propertylist  (optional)
     * @param defaultLimit  (optional)
     * @param useAbsoluteUri  (optional)
     * @return OASComAdobeGraniteRestImplServletDef
     * @throws OAS.ApiException if fails to make API call
     */
    public OASComAdobeGraniteRestImplServletDef comAdobeGraniteRestImplServletDefaultGETServlet(Map<String, Object> params) {
        List<OAS.Param> query = new List<OAS.Param>();

        // cast query params to verify their expected type
        query.addAll(client.makeParam('post', (Boolean) params.get('post')));
        query.addAll(client.makeParam('apply', (Boolean) params.get('apply')));
        query.addAll(client.makeParam('delete', (Boolean) params.get('r_delete')));
        query.addAll(client.makeParam('action', (String) params.get('action')));
        query.addAll(client.makeParam('$location', (String) params.get('location')));
        query.addAll(client.makeParam('propertylist', (List<String>) params.get('propertylist'), 'csv'));
        query.addAll(client.makeParam('default.limit', (Integer) params.get('defaultLimit')));
        query.addAll(client.makeParam('use.absolute.uri', (Boolean) params.get('useAbsoluteUri')));

        List<OAS.Param> form = new List<OAS.Param>();

        return (OASComAdobeGraniteRestImplServletDef) client.invoke(
            'POST', '/system/console/configMgr/com.adobe.granite.rest.impl.servlet.DefaultGETServlet', '',
            query, form,
            new Map<String, Object>(),
            new Map<String, Object>(),
            new List<String>{ 'application/json', 'text/plain' },
            new List<String>(),
            new List<String> { 'aemAuth' },
            OASComAdobeGraniteRestImplServletDef.class
        );
    }
    /**
     * 
     * 
     * @param post  (optional)
     * @param apply  (optional)
     * @param r_delete  (optional)
     * @param action  (optional)
     * @param location  (optional)
     * @param propertylist  (optional)
     * @param hcTags  (optional)
     * @return OASComAdobeGraniteSecurityUserUiInte
     * @throws OAS.ApiException if fails to make API call
     */
    public OASComAdobeGraniteSecurityUserUiInte comAdobeGraniteSecurityUserUiInternalServletsSSLConfigurationS(Map<String, Object> params) {
        List<OAS.Param> query = new List<OAS.Param>();

        // cast query params to verify their expected type
        query.addAll(client.makeParam('post', (Boolean) params.get('post')));
        query.addAll(client.makeParam('apply', (Boolean) params.get('apply')));
        query.addAll(client.makeParam('delete', (Boolean) params.get('r_delete')));
        query.addAll(client.makeParam('action', (String) params.get('action')));
        query.addAll(client.makeParam('$location', (String) params.get('location')));
        query.addAll(client.makeParam('propertylist', (List<String>) params.get('propertylist'), 'csv'));
        query.addAll(client.makeParams('hc.tags', (List<String>) params.get('hcTags')));

        List<OAS.Param> form = new List<OAS.Param>();

        return (OASComAdobeGraniteSecurityUserUiInte) client.invoke(
            'POST', '/system/console/configMgr/com.adobe.granite.security.user.ui.internal.servlets.SSLConfigurationServlet', '',
            query, form,
            new Map<String, Object>(),
            new Map<String, Object>(),
            new List<String>{ 'application/json', 'text/plain' },
            new List<String>(),
            new List<String> { 'aemAuth' },
            OASComAdobeGraniteSecurityUserUiInte.class
        );
    }
    /**
     * 
     * 
     * @param post  (optional)
     * @param apply  (optional)
     * @param r_delete  (optional)
     * @param action  (optional)
     * @param location  (optional)
     * @param propertylist  (optional)
     * @param adapterCondition  (optional)
     * @param graniteUserpropertiesNodetypes  (optional)
     * @param graniteUserpropertiesResourcetypes  (optional)
     * @return OASComAdobeGraniteSecurityUserUserPr
     * @throws OAS.ApiException if fails to make API call
     */
    public OASComAdobeGraniteSecurityUserUserPr comAdobeGraniteSecurityUserUserPropertiesService(Map<String, Object> params) {
        List<OAS.Param> query = new List<OAS.Param>();

        // cast query params to verify their expected type
        query.addAll(client.makeParam('post', (Boolean) params.get('post')));
        query.addAll(client.makeParam('apply', (Boolean) params.get('apply')));
        query.addAll(client.makeParam('delete', (Boolean) params.get('r_delete')));
        query.addAll(client.makeParam('action', (String) params.get('action')));
        query.addAll(client.makeParam('$location', (String) params.get('location')));
        query.addAll(client.makeParam('propertylist', (List<String>) params.get('propertylist'), 'csv'));
        query.addAll(client.makeParam('adapter.condition', (String) params.get('adapterCondition')));
        query.addAll(client.makeParams('granite.userproperties.nodetypes', (List<String>) params.get('graniteUserpropertiesNodetypes')));
        query.addAll(client.makeParams('granite.userproperties.resourcetypes', (List<String>) params.get('graniteUserpropertiesResourcetypes')));

        List<OAS.Param> form = new List<OAS.Param>();

        return (OASComAdobeGraniteSecurityUserUserPr) client.invoke(
            'POST', '/system/console/configMgr/com.adobe.granite.security.user.UserPropertiesService', '',
            query, form,
            new Map<String, Object>(),
            new Map<String, Object>(),
            new List<String>{ 'application/json', 'text/plain' },
            new List<String>(),
            new List<String> { 'aemAuth' },
            OASComAdobeGraniteSecurityUserUserPr.class
        );
    }
    /**
     * 
     * 
     * @param post  (optional)
     * @param apply  (optional)
     * @param r_delete  (optional)
     * @param action  (optional)
     * @param location  (optional)
     * @param propertylist  (optional)
     * @param group2memberRelationshipOutgoing  (optional)
     * @param group2memberExcludedOutgoing  (optional)
     * @param group2memberRelationshipIncoming  (optional)
     * @param group2memberExcludedIncoming  (optional)
     * @return OASComAdobeGraniteSocialgraphImplSoc
     * @throws OAS.ApiException if fails to make API call
     */
    public OASComAdobeGraniteSocialgraphImplSoc comAdobeGraniteSocialgraphImplSocialGraphFactoryImpl(Map<String, Object> params) {
        List<OAS.Param> query = new List<OAS.Param>();

        // cast query params to verify their expected type
        query.addAll(client.makeParam('post', (Boolean) params.get('post')));
        query.addAll(client.makeParam('apply', (Boolean) params.get('apply')));
        query.addAll(client.makeParam('delete', (Boolean) params.get('r_delete')));
        query.addAll(client.makeParam('action', (String) params.get('action')));
        query.addAll(client.makeParam('$location', (String) params.get('location')));
        query.addAll(client.makeParam('propertylist', (List<String>) params.get('propertylist'), 'csv'));
        query.addAll(client.makeParam('group2member.relationship.outgoing', (String) params.get('group2memberRelationshipOutgoing')));
        query.addAll(client.makeParams('group2member.excluded.outgoing', (List<String>) params.get('group2memberExcludedOutgoing')));
        query.addAll(client.makeParam('group2member.relationship.incoming', (String) params.get('group2memberRelationshipIncoming')));
        query.addAll(client.makeParams('group2member.excluded.incoming', (List<String>) params.get('group2memberExcludedIncoming')));

        List<OAS.Param> form = new List<OAS.Param>();

        return (OASComAdobeGraniteSocialgraphImplSoc) client.invoke(
            'POST', '/system/console/configMgr/com.adobe.granite.socialgraph.impl.SocialGraphFactoryImpl', '',
            query, form,
            new Map<String, Object>(),
            new Map<String, Object>(),
            new List<String>{ 'application/json', 'text/plain' },
            new List<String>(),
            new List<String> { 'aemAuth' },
            OASComAdobeGraniteSocialgraphImplSoc.class
        );
    }
    /**
     * 
     * 
     * @param post  (optional)
     * @param apply  (optional)
     * @param r_delete  (optional)
     * @param action  (optional)
     * @param location  (optional)
     * @param propertylist  (optional)
     * @param schedulerExpression  (optional)
     * @param jmxObjectname  (optional)
     * @return OASComAdobeGraniteSystemMonitoringIm
     * @throws OAS.ApiException if fails to make API call
     */
    public OASComAdobeGraniteSystemMonitoringIm comAdobeGraniteSystemMonitoringImplSystemStatsMBeanImpl(Map<String, Object> params) {
        List<OAS.Param> query = new List<OAS.Param>();

        // cast query params to verify their expected type
        query.addAll(client.makeParam('post', (Boolean) params.get('post')));
        query.addAll(client.makeParam('apply', (Boolean) params.get('apply')));
        query.addAll(client.makeParam('delete', (Boolean) params.get('r_delete')));
        query.addAll(client.makeParam('action', (String) params.get('action')));
        query.addAll(client.makeParam('$location', (String) params.get('location')));
        query.addAll(client.makeParam('propertylist', (List<String>) params.get('propertylist'), 'csv'));
        query.addAll(client.makeParam('scheduler.expression', (String) params.get('schedulerExpression')));
        query.addAll(client.makeParam('jmx.objectname', (String) params.get('jmxObjectname')));

        List<OAS.Param> form = new List<OAS.Param>();

        return (OASComAdobeGraniteSystemMonitoringIm) client.invoke(
            'POST', '/system/console/configMgr/com.adobe.granite.system.monitoring.impl.SystemStatsMBeanImpl', '',
            query, form,
            new Map<String, Object>(),
            new Map<String, Object>(),
            new List<String>{ 'application/json', 'text/plain' },
            new List<String>(),
            new List<String> { 'aemAuth' },
            OASComAdobeGraniteSystemMonitoringIm.class
        );
    }
    /**
     * 
     * 
     * @param post  (optional)
     * @param apply  (optional)
     * @param r_delete  (optional)
     * @param action  (optional)
     * @param location  (optional)
     * @param propertylist  (optional)
     * @param adapterCondition  (optional)
     * @return OASComAdobeGraniteTaskmanagementImpl
     * @throws OAS.ApiException if fails to make API call
     */
    public OASComAdobeGraniteTaskmanagementImpl comAdobeGraniteTaskmanagementImplJcrTaskAdapterFactory(Map<String, Object> params) {
        List<OAS.Param> query = new List<OAS.Param>();

        // cast query params to verify their expected type
        query.addAll(client.makeParam('post', (Boolean) params.get('post')));
        query.addAll(client.makeParam('apply', (Boolean) params.get('apply')));
        query.addAll(client.makeParam('delete', (Boolean) params.get('r_delete')));
        query.addAll(client.makeParam('action', (String) params.get('action')));
        query.addAll(client.makeParam('$location', (String) params.get('location')));
        query.addAll(client.makeParam('propertylist', (List<String>) params.get('propertylist'), 'csv'));
        query.addAll(client.makeParam('adapter.condition', (String) params.get('adapterCondition')));

        List<OAS.Param> form = new List<OAS.Param>();

        return (OASComAdobeGraniteTaskmanagementImpl) client.invoke(
            'POST', '/system/console/configMgr/com.adobe.granite.taskmanagement.impl.jcr.TaskAdapterFactory', '',
            query, form,
            new Map<String, Object>(),
            new Map<String, Object>(),
            new List<String>{ 'application/json', 'text/plain' },
            new List<String>(),
            new List<String> { 'aemAuth' },
            OASComAdobeGraniteTaskmanagementImpl.class
        );
    }
    /**
     * 
     * 
     * @param post  (optional)
     * @param apply  (optional)
     * @param r_delete  (optional)
     * @param action  (optional)
     * @param location  (optional)
     * @param propertylist  (optional)
     * @param archivingEnabled  (optional)
     * @param schedulerExpression  (optional)
     * @param archiveSinceDaysCompleted  (optional)
     * @return OASComAdobeGraniteTaskmanagementImpl
     * @throws OAS.ApiException if fails to make API call
     */
    public OASComAdobeGraniteTaskmanagementImpl comAdobeGraniteTaskmanagementImplJcrTaskArchiveService(Map<String, Object> params) {
        List<OAS.Param> query = new List<OAS.Param>();

        // cast query params to verify their expected type
        query.addAll(client.makeParam('post', (Boolean) params.get('post')));
        query.addAll(client.makeParam('apply', (Boolean) params.get('apply')));
        query.addAll(client.makeParam('delete', (Boolean) params.get('r_delete')));
        query.addAll(client.makeParam('action', (String) params.get('action')));
        query.addAll(client.makeParam('$location', (String) params.get('location')));
        query.addAll(client.makeParam('propertylist', (List<String>) params.get('propertylist'), 'csv'));
        query.addAll(client.makeParam('archiving.enabled', (Boolean) params.get('archivingEnabled')));
        query.addAll(client.makeParam('scheduler.expression', (String) params.get('schedulerExpression')));
        query.addAll(client.makeParam('archive.since.days.completed', (Integer) params.get('archiveSinceDaysCompleted')));

        List<OAS.Param> form = new List<OAS.Param>();

        return (OASComAdobeGraniteTaskmanagementImpl) client.invoke(
            'POST', '/system/console/configMgr/com.adobe.granite.taskmanagement.impl.jcr.TaskArchiveService', '',
            query, form,
            new Map<String, Object>(),
            new Map<String, Object>(),
            new List<String>{ 'application/json', 'text/plain' },
            new List<String>(),
            new List<String> { 'aemAuth' },
            OASComAdobeGraniteTaskmanagementImpl.class
        );
    }
    /**
     * 
     * 
     * @param post  (optional)
     * @param apply  (optional)
     * @param r_delete  (optional)
     * @param action  (optional)
     * @param location  (optional)
     * @param propertylist  (optional)
     * @param purgeCompleted  (optional)
     * @param completedAge  (optional)
     * @param purgeActive  (optional)
     * @param activeAge  (optional)
     * @param saveThreshold  (optional)
     * @return OASComAdobeGraniteTaskmanagementImpl
     * @throws OAS.ApiException if fails to make API call
     */
    public OASComAdobeGraniteTaskmanagementImpl comAdobeGraniteTaskmanagementImplPurgeTaskPurgeMaintenanceTask(Map<String, Object> params) {
        List<OAS.Param> query = new List<OAS.Param>();

        // cast query params to verify their expected type
        query.addAll(client.makeParam('post', (Boolean) params.get('post')));
        query.addAll(client.makeParam('apply', (Boolean) params.get('apply')));
        query.addAll(client.makeParam('delete', (Boolean) params.get('r_delete')));
        query.addAll(client.makeParam('action', (String) params.get('action')));
        query.addAll(client.makeParam('$location', (String) params.get('location')));
        query.addAll(client.makeParam('propertylist', (List<String>) params.get('propertylist'), 'csv'));
        query.addAll(client.makeParam('purgeCompleted', (Boolean) params.get('purgeCompleted')));
        query.addAll(client.makeParam('completedAge', (Integer) params.get('completedAge')));
        query.addAll(client.makeParam('purgeActive', (Boolean) params.get('purgeActive')));
        query.addAll(client.makeParam('activeAge', (Integer) params.get('activeAge')));
        query.addAll(client.makeParam('saveThreshold', (Integer) params.get('saveThreshold')));

        List<OAS.Param> form = new List<OAS.Param>();

        return (OASComAdobeGraniteTaskmanagementImpl) client.invoke(
            'POST', '/system/console/configMgr/com.adobe.granite.taskmanagement.impl.purge.TaskPurgeMaintenanceTask', '',
            query, form,
            new Map<String, Object>(),
            new Map<String, Object>(),
            new List<String>{ 'application/json', 'text/plain' },
            new List<String>(),
            new List<String> { 'aemAuth' },
            OASComAdobeGraniteTaskmanagementImpl.class
        );
    }
    /**
     * 
     * 
     * @param post  (optional)
     * @param apply  (optional)
     * @param r_delete  (optional)
     * @param action  (optional)
     * @param location  (optional)
     * @param propertylist  (optional)
     * @param adapterCondition  (optional)
     * @param taskmanagerAdmingroups  (optional)
     * @return OASComAdobeGraniteTaskmanagementImpl
     * @throws OAS.ApiException if fails to make API call
     */
    public OASComAdobeGraniteTaskmanagementImpl comAdobeGraniteTaskmanagementImplServiceTaskManagerAdapterFactor(Map<String, Object> params) {
        List<OAS.Param> query = new List<OAS.Param>();

        // cast query params to verify their expected type
        query.addAll(client.makeParam('post', (Boolean) params.get('post')));
        query.addAll(client.makeParam('apply', (Boolean) params.get('apply')));
        query.addAll(client.makeParam('delete', (Boolean) params.get('r_delete')));
        query.addAll(client.makeParam('action', (String) params.get('action')));
        query.addAll(client.makeParam('$location', (String) params.get('location')));
        query.addAll(client.makeParam('propertylist', (List<String>) params.get('propertylist'), 'csv'));
        query.addAll(client.makeParam('adapter.condition', (String) params.get('adapterCondition')));
        query.addAll(client.makeParams('taskmanager.admingroups', (List<String>) params.get('taskmanagerAdmingroups')));

        List<OAS.Param> form = new List<OAS.Param>();

        return (OASComAdobeGraniteTaskmanagementImpl) client.invoke(
            'POST', '/system/console/configMgr/com.adobe.granite.taskmanagement.impl.service.TaskManagerAdapterFactory', '',
            query, form,
            new Map<String, Object>(),
            new Map<String, Object>(),
            new List<String>{ 'application/json', 'text/plain' },
            new List<String>(),
            new List<String> { 'aemAuth' },
            OASComAdobeGraniteTaskmanagementImpl.class
        );
    }
    /**
     * 
     * 
     * @param post  (optional)
     * @param apply  (optional)
     * @param r_delete  (optional)
     * @param action  (optional)
     * @param location  (optional)
     * @param propertylist  (optional)
     * @param schedulerPeriod  (optional)
     * @param schedulerRunOn  (optional)
     * @param graniteThreaddumpEnabled  (optional)
     * @param graniteThreaddumpDumpsPerFile  (optional)
     * @param graniteThreaddumpEnableGzipCompression  (optional)
     * @param graniteThreaddumpEnableDirectoriesCompression  (optional)
     * @param graniteThreaddumpEnableJStack  (optional)
     * @param graniteThreaddumpMaxBackupDays  (optional)
     * @param graniteThreaddumpBackupCleanTrigger  (optional)
     * @return OASComAdobeGraniteThreaddumpThreadDu
     * @throws OAS.ApiException if fails to make API call
     */
    public OASComAdobeGraniteThreaddumpThreadDu comAdobeGraniteThreaddumpThreadDumpCollector(Map<String, Object> params) {
        List<OAS.Param> query = new List<OAS.Param>();

        // cast query params to verify their expected type
        query.addAll(client.makeParam('post', (Boolean) params.get('post')));
        query.addAll(client.makeParam('apply', (Boolean) params.get('apply')));
        query.addAll(client.makeParam('delete', (Boolean) params.get('r_delete')));
        query.addAll(client.makeParam('action', (String) params.get('action')));
        query.addAll(client.makeParam('$location', (String) params.get('location')));
        query.addAll(client.makeParam('propertylist', (List<String>) params.get('propertylist'), 'csv'));
        query.addAll(client.makeParam('scheduler.period', (Integer) params.get('schedulerPeriod')));
        query.addAll(client.makeParam('scheduler.runOn', (String) params.get('schedulerRunOn')));
        query.addAll(client.makeParam('granite.threaddump.enabled', (Boolean) params.get('graniteThreaddumpEnabled')));
        query.addAll(client.makeParam('granite.threaddump.dumpsPerFile', (Integer) params.get('graniteThreaddumpDumpsPerFile')));
        query.addAll(client.makeParam('granite.threaddump.enableGzipCompression', (Boolean) params.get('graniteThreaddumpEnableGzipCompression')));
        query.addAll(client.makeParam('granite.threaddump.enableDirectoriesCompression', (Boolean) params.get('graniteThreaddumpEnableDirectoriesCompression')));
        query.addAll(client.makeParam('granite.threaddump.enableJStack', (Boolean) params.get('graniteThreaddumpEnableJStack')));
        query.addAll(client.makeParam('granite.threaddump.maxBackupDays', (Integer) params.get('graniteThreaddumpMaxBackupDays')));
        query.addAll(client.makeParam('granite.threaddump.backupCleanTrigger', (String) params.get('graniteThreaddumpBackupCleanTrigger')));

        List<OAS.Param> form = new List<OAS.Param>();

        return (OASComAdobeGraniteThreaddumpThreadDu) client.invoke(
            'POST', '/system/console/configMgr/com.adobe.granite.threaddump.ThreadDumpCollector', '',
            query, form,
            new Map<String, Object>(),
            new Map<String, Object>(),
            new List<String>{ 'application/json', 'text/plain' },
            new List<String>(),
            new List<String> { 'aemAuth' },
            OASComAdobeGraniteThreaddumpThreadDu.class
        );
    }
    /**
     * 
     * 
     * @param post  (optional)
     * @param apply  (optional)
     * @param r_delete  (optional)
     * @param action  (optional)
     * @param location  (optional)
     * @param propertylist  (optional)
     * @param translationFactory  (optional)
     * @param defaultConnectorLabel  (optional)
     * @param defaultConnectorAttribution  (optional)
     * @param defaultConnectorWorkspaceId  (optional)
     * @param defaultConnectorSubscriptionKey  (optional)
     * @param languageMapLocation  (optional)
     * @param categoryMapLocation  (optional)
     * @param retryAttempts  (optional)
     * @param timeoutCount  (optional)
     * @return OASComAdobeGraniteTranslationConnect
     * @throws OAS.ApiException if fails to make API call
     */
    public OASComAdobeGraniteTranslationConnect comAdobeGraniteTranslationConnectorMsftCoreImplMicrosoftTransl(Map<String, Object> params) {
        List<OAS.Param> query = new List<OAS.Param>();

        // cast query params to verify their expected type
        query.addAll(client.makeParam('post', (Boolean) params.get('post')));
        query.addAll(client.makeParam('apply', (Boolean) params.get('apply')));
        query.addAll(client.makeParam('delete', (Boolean) params.get('r_delete')));
        query.addAll(client.makeParam('action', (String) params.get('action')));
        query.addAll(client.makeParam('$location', (String) params.get('location')));
        query.addAll(client.makeParam('propertylist', (List<String>) params.get('propertylist'), 'csv'));
        query.addAll(client.makeParam('translationFactory', (String) params.get('translationFactory')));
        query.addAll(client.makeParam('defaultConnectorLabel', (String) params.get('defaultConnectorLabel')));
        query.addAll(client.makeParam('defaultConnectorAttribution', (String) params.get('defaultConnectorAttribution')));
        query.addAll(client.makeParam('defaultConnectorWorkspaceId', (String) params.get('defaultConnectorWorkspaceId')));
        query.addAll(client.makeParam('defaultConnectorSubscriptionKey', (String) params.get('defaultConnectorSubscriptionKey')));
        query.addAll(client.makeParam('languageMapLocation', (String) params.get('languageMapLocation')));
        query.addAll(client.makeParam('categoryMapLocation', (String) params.get('categoryMapLocation')));
        query.addAll(client.makeParam('retryAttempts', (Integer) params.get('retryAttempts')));
        query.addAll(client.makeParam('timeoutCount', (Integer) params.get('timeoutCount')));

        List<OAS.Param> form = new List<OAS.Param>();

        return (OASComAdobeGraniteTranslationConnect) client.invoke(
            'POST', '/system/console/configMgr/com.adobe.granite.translation.connector.msft.core.impl.MicrosoftTranslationServiceFactoryImpl', '',
            query, form,
            new Map<String, Object>(),
            new Map<String, Object>(),
            new List<String>{ 'application/json', 'text/plain' },
            new List<String>(),
            new List<String> { 'aemAuth' },
            OASComAdobeGraniteTranslationConnect.class
        );
    }
    /**
     * 
     * 
     * @param post  (optional)
     * @param apply  (optional)
     * @param r_delete  (optional)
     * @param action  (optional)
     * @param location  (optional)
     * @param propertylist  (optional)
     * @param defaultConnectorName  (optional)
     * @param defaultCategory  (optional)
     * @return OASComAdobeGraniteTranslationCoreImp
     * @throws OAS.ApiException if fails to make API call
     */
    public OASComAdobeGraniteTranslationCoreImp comAdobeGraniteTranslationCoreImplTranslationManagerImpl(Map<String, Object> params) {
        List<OAS.Param> query = new List<OAS.Param>();

        // cast query params to verify their expected type
        query.addAll(client.makeParam('post', (Boolean) params.get('post')));
        query.addAll(client.makeParam('apply', (Boolean) params.get('apply')));
        query.addAll(client.makeParam('delete', (Boolean) params.get('r_delete')));
        query.addAll(client.makeParam('action', (String) params.get('action')));
        query.addAll(client.makeParam('$location', (String) params.get('location')));
        query.addAll(client.makeParam('propertylist', (List<String>) params.get('propertylist'), 'csv'));
        query.addAll(client.makeParam('defaultConnectorName', (String) params.get('defaultConnectorName')));
        query.addAll(client.makeParam('defaultCategory', (String) params.get('defaultCategory')));

        List<OAS.Param> form = new List<OAS.Param>();

        return (OASComAdobeGraniteTranslationCoreImp) client.invoke(
            'POST', '/system/console/configMgr/com.adobe.granite.translation.core.impl.TranslationManagerImpl', '',
            query, form,
            new Map<String, Object>(),
            new Map<String, Object>(),
            new List<String>{ 'application/json', 'text/plain' },
            new List<String>(),
            new List<String> { 'aemAuth' },
            OASComAdobeGraniteTranslationCoreImp.class
        );
    }
    /**
     * 
     * 
     * @param post  (optional)
     * @param apply  (optional)
     * @param r_delete  (optional)
     * @param action  (optional)
     * @param location  (optional)
     * @param propertylist  (optional)
     * @param htmllibmanagerTiming  (optional)
     * @param htmllibmanagerDebugInitJs  (optional)
     * @param htmllibmanagerMinify  (optional)
     * @param htmllibmanagerDebug  (optional)
     * @param htmllibmanagerGzip  (optional)
     * @param htmllibmanagerMaxDataUriSize  (optional)
     * @param htmllibmanagerMaxage  (optional)
     * @param htmllibmanagerForceCQUrlInfo  (optional)
     * @param htmllibmanagerDefaultthemename  (optional)
     * @param htmllibmanagerDefaultuserthemename  (optional)
     * @param htmllibmanagerClientmanager  (optional)
     * @param htmllibmanagerPathList  (optional)
     * @param htmllibmanagerExcludedPathList  (optional)
     * @param htmllibmanagerProcessorJs  (optional)
     * @param htmllibmanagerProcessorCss  (optional)
     * @param htmllibmanagerLongcachePatterns  (optional)
     * @param htmllibmanagerLongcacheFormat  (optional)
     * @param htmllibmanagerUseFileSystemOutputCache  (optional)
     * @param htmllibmanagerFileSystemOutputCacheLocation  (optional)
     * @param htmllibmanagerDisableReplacement  (optional)
     * @return OASComAdobeGraniteUiClientlibsImplHt
     * @throws OAS.ApiException if fails to make API call
     */
    public OASComAdobeGraniteUiClientlibsImplHt comAdobeGraniteUiClientlibsImplHtmlLibraryManagerImpl(Map<String, Object> params) {
        List<OAS.Param> query = new List<OAS.Param>();

        // cast query params to verify their expected type
        query.addAll(client.makeParam('post', (Boolean) params.get('post')));
        query.addAll(client.makeParam('apply', (Boolean) params.get('apply')));
        query.addAll(client.makeParam('delete', (Boolean) params.get('r_delete')));
        query.addAll(client.makeParam('action', (String) params.get('action')));
        query.addAll(client.makeParam('$location', (String) params.get('location')));
        query.addAll(client.makeParam('propertylist', (List<String>) params.get('propertylist'), 'csv'));
        query.addAll(client.makeParam('htmllibmanager.timing', (Boolean) params.get('htmllibmanagerTiming')));
        query.addAll(client.makeParam('htmllibmanager.debug.init.js', (String) params.get('htmllibmanagerDebugInitJs')));
        query.addAll(client.makeParam('htmllibmanager.minify', (Boolean) params.get('htmllibmanagerMinify')));
        query.addAll(client.makeParam('htmllibmanager.debug', (Boolean) params.get('htmllibmanagerDebug')));
        query.addAll(client.makeParam('htmllibmanager.gzip', (Boolean) params.get('htmllibmanagerGzip')));
        query.addAll(client.makeParam('htmllibmanager.maxDataUriSize', (Integer) params.get('htmllibmanagerMaxDataUriSize')));
        query.addAll(client.makeParam('htmllibmanager.maxage', (Integer) params.get('htmllibmanagerMaxage')));
        query.addAll(client.makeParam('htmllibmanager.forceCQUrlInfo', (Boolean) params.get('htmllibmanagerForceCQUrlInfo')));
        query.addAll(client.makeParam('htmllibmanager.defaultthemename', (String) params.get('htmllibmanagerDefaultthemename')));
        query.addAll(client.makeParam('htmllibmanager.defaultuserthemename', (String) params.get('htmllibmanagerDefaultuserthemename')));
        query.addAll(client.makeParam('htmllibmanager.clientmanager', (String) params.get('htmllibmanagerClientmanager')));
        query.addAll(client.makeParams('htmllibmanager.path.list', (List<String>) params.get('htmllibmanagerPathList')));
        query.addAll(client.makeParams('htmllibmanager.excluded.path.list', (List<String>) params.get('htmllibmanagerExcludedPathList')));
        query.addAll(client.makeParams('htmllibmanager.processor.js', (List<String>) params.get('htmllibmanagerProcessorJs')));
        query.addAll(client.makeParams('htmllibmanager.processor.css', (List<String>) params.get('htmllibmanagerProcessorCss')));
        query.addAll(client.makeParams('htmllibmanager.longcache.patterns', (List<String>) params.get('htmllibmanagerLongcachePatterns')));
        query.addAll(client.makeParam('htmllibmanager.longcache.format', (String) params.get('htmllibmanagerLongcacheFormat')));
        query.addAll(client.makeParam('htmllibmanager.useFileSystemOutputCache', (Boolean) params.get('htmllibmanagerUseFileSystemOutputCache')));
        query.addAll(client.makeParam('htmllibmanager.fileSystemOutputCacheLocation', (String) params.get('htmllibmanagerFileSystemOutputCacheLocation')));
        query.addAll(client.makeParams('htmllibmanager.disable.replacement', (List<String>) params.get('htmllibmanagerDisableReplacement')));

        List<OAS.Param> form = new List<OAS.Param>();

        return (OASComAdobeGraniteUiClientlibsImplHt) client.invoke(
            'POST', '/system/console/configMgr/com.adobe.granite.ui.clientlibs.impl.HtmlLibraryManagerImpl', '',
            query, form,
            new Map<String, Object>(),
            new Map<String, Object>(),
            new List<String>{ 'application/json', 'text/plain' },
            new List<String>(),
            new List<String> { 'aemAuth' },
            OASComAdobeGraniteUiClientlibsImplHt.class
        );
    }
    /**
     * 
     * 
     * @param post  (optional)
     * @param apply  (optional)
     * @param r_delete  (optional)
     * @param action  (optional)
     * @param location  (optional)
     * @param propertylist  (optional)
     * @param enabled  (optional)
     * @return OASComAdobeGraniteWorkflowConsoleFra
     * @throws OAS.ApiException if fails to make API call
     */
    public OASComAdobeGraniteWorkflowConsoleFra comAdobeGraniteWorkflowConsoleFragsWorkflowWithdrawFeature(Map<String, Object> params) {
        List<OAS.Param> query = new List<OAS.Param>();

        // cast query params to verify their expected type
        query.addAll(client.makeParam('post', (Boolean) params.get('post')));
        query.addAll(client.makeParam('apply', (Boolean) params.get('apply')));
        query.addAll(client.makeParam('delete', (Boolean) params.get('r_delete')));
        query.addAll(client.makeParam('action', (String) params.get('action')));
        query.addAll(client.makeParam('$location', (String) params.get('location')));
        query.addAll(client.makeParam('propertylist', (List<String>) params.get('propertylist'), 'csv'));
        query.addAll(client.makeParam('enabled', (Boolean) params.get('enabled')));

        List<OAS.Param> form = new List<OAS.Param>();

        return (OASComAdobeGraniteWorkflowConsoleFra) client.invoke(
            'POST', '/system/console/configMgr/com.adobe.granite.workflow.console.frags.WorkflowWithdrawFeature', '',
            query, form,
            new Map<String, Object>(),
            new Map<String, Object>(),
            new List<String>{ 'application/json', 'text/plain' },
            new List<String>(),
            new List<String> { 'aemAuth' },
            OASComAdobeGraniteWorkflowConsoleFra.class
        );
    }
    /**
     * 
     * 
     * @param post  (optional)
     * @param apply  (optional)
     * @param r_delete  (optional)
     * @param action  (optional)
     * @param location  (optional)
     * @param propertylist  (optional)
     * @param graniteWorkflowWorkflowPublishEventServiceEnabled  (optional)
     * @return OASComAdobeGraniteWorkflowConsolePub
     * @throws OAS.ApiException if fails to make API call
     */
    public OASComAdobeGraniteWorkflowConsolePub comAdobeGraniteWorkflowConsolePublishWorkflowPublishEventService(Map<String, Object> params) {
        List<OAS.Param> query = new List<OAS.Param>();

        // cast query params to verify their expected type
        query.addAll(client.makeParam('post', (Boolean) params.get('post')));
        query.addAll(client.makeParam('apply', (Boolean) params.get('apply')));
        query.addAll(client.makeParam('delete', (Boolean) params.get('r_delete')));
        query.addAll(client.makeParam('action', (String) params.get('action')));
        query.addAll(client.makeParam('$location', (String) params.get('location')));
        query.addAll(client.makeParam('propertylist', (List<String>) params.get('propertylist'), 'csv'));
        query.addAll(client.makeParam('granite.workflow.WorkflowPublishEventService.enabled', (Boolean) params.get('graniteWorkflowWorkflowPublishEventServiceEnabled')));

        List<OAS.Param> form = new List<OAS.Param>();

        return (OASComAdobeGraniteWorkflowConsolePub) client.invoke(
            'POST', '/system/console/configMgr/com.adobe.granite.workflow.console.publish.WorkflowPublishEventService', '',
            query, form,
            new Map<String, Object>(),
            new Map<String, Object>(),
            new List<String>{ 'application/json', 'text/plain' },
            new List<String>(),
            new List<String> { 'aemAuth' },
            OASComAdobeGraniteWorkflowConsolePub.class
        );
    }
    /**
     * 
     * 
     * @param post  (optional)
     * @param apply  (optional)
     * @param r_delete  (optional)
     * @param action  (optional)
     * @param location  (optional)
     * @param propertylist  (optional)
     * @param bucketSize  (optional)
     * @return OASComAdobeGraniteWorkflowCoreJcrWor
     * @throws OAS.ApiException if fails to make API call
     */
    public OASComAdobeGraniteWorkflowCoreJcrWor comAdobeGraniteWorkflowCoreJcrWorkflowBucketManager(Map<String, Object> params) {
        List<OAS.Param> query = new List<OAS.Param>();

        // cast query params to verify their expected type
        query.addAll(client.makeParam('post', (Boolean) params.get('post')));
        query.addAll(client.makeParam('apply', (Boolean) params.get('apply')));
        query.addAll(client.makeParam('delete', (Boolean) params.get('r_delete')));
        query.addAll(client.makeParam('action', (String) params.get('action')));
        query.addAll(client.makeParam('$location', (String) params.get('location')));
        query.addAll(client.makeParam('propertylist', (List<String>) params.get('propertylist'), 'csv'));
        query.addAll(client.makeParam('bucketSize', (Integer) params.get('bucketSize')));

        List<OAS.Param> form = new List<OAS.Param>();

        return (OASComAdobeGraniteWorkflowCoreJcrWor) client.invoke(
            'POST', '/system/console/configMgr/com.adobe.granite.workflow.core.jcr.WorkflowBucketManager', '',
            query, form,
            new Map<String, Object>(),
            new Map<String, Object>(),
            new List<String>{ 'application/json', 'text/plain' },
            new List<String>(),
            new List<String> { 'aemAuth' },
            OASComAdobeGraniteWorkflowCoreJcrWor.class
        );
    }
    /**
     * 
     * 
     * @param post  (optional)
     * @param apply  (optional)
     * @param r_delete  (optional)
     * @param action  (optional)
     * @param location  (optional)
     * @param propertylist  (optional)
     * @param defaultTimeout  (optional)
     * @param maxTimeout  (optional)
     * @param defaultPeriod  (optional)
     * @return OASComAdobeGraniteWorkflowCoreJobExt
     * @throws OAS.ApiException if fails to make API call
     */
    public OASComAdobeGraniteWorkflowCoreJobExt comAdobeGraniteWorkflowCoreJobExternalProcessJobHandler(Map<String, Object> params) {
        List<OAS.Param> query = new List<OAS.Param>();

        // cast query params to verify their expected type
        query.addAll(client.makeParam('post', (Boolean) params.get('post')));
        query.addAll(client.makeParam('apply', (Boolean) params.get('apply')));
        query.addAll(client.makeParam('delete', (Boolean) params.get('r_delete')));
        query.addAll(client.makeParam('action', (String) params.get('action')));
        query.addAll(client.makeParam('$location', (String) params.get('location')));
        query.addAll(client.makeParam('propertylist', (List<String>) params.get('propertylist'), 'csv'));
        query.addAll(client.makeParam('default.timeout', (Integer) params.get('defaultTimeout')));
        query.addAll(client.makeParam('max.timeout', (Integer) params.get('maxTimeout')));
        query.addAll(client.makeParam('default.period', (Integer) params.get('defaultPeriod')));

        List<OAS.Param> form = new List<OAS.Param>();

        return (OASComAdobeGraniteWorkflowCoreJobExt) client.invoke(
            'POST', '/system/console/configMgr/com.adobe.granite.workflow.core.job.ExternalProcessJobHandler', '',
            query, form,
            new Map<String, Object>(),
            new Map<String, Object>(),
            new List<String>{ 'application/json', 'text/plain' },
            new List<String>(),
            new List<String> { 'aemAuth' },
            OASComAdobeGraniteWorkflowCoreJobExt.class
        );
    }
    /**
     * 
     * 
     * @param post  (optional)
     * @param apply  (optional)
     * @param r_delete  (optional)
     * @param action  (optional)
     * @param location  (optional)
     * @param propertylist  (optional)
     * @param jobTopics  (optional)
     * @param allowSelfProcessTermination  (optional)
     * @return OASComAdobeGraniteWorkflowCoreJobJob
     * @throws OAS.ApiException if fails to make API call
     */
    public OASComAdobeGraniteWorkflowCoreJobJob comAdobeGraniteWorkflowCoreJobJobHandler(Map<String, Object> params) {
        List<OAS.Param> query = new List<OAS.Param>();

        // cast query params to verify their expected type
        query.addAll(client.makeParam('post', (Boolean) params.get('post')));
        query.addAll(client.makeParam('apply', (Boolean) params.get('apply')));
        query.addAll(client.makeParam('delete', (Boolean) params.get('r_delete')));
        query.addAll(client.makeParam('action', (String) params.get('action')));
        query.addAll(client.makeParam('$location', (String) params.get('location')));
        query.addAll(client.makeParam('propertylist', (List<String>) params.get('propertylist'), 'csv'));
        query.addAll(client.makeParams('job.topics', (List<String>) params.get('jobTopics')));
        query.addAll(client.makeParam('allow.self.process.termination', (Boolean) params.get('allowSelfProcessTermination')));

        List<OAS.Param> form = new List<OAS.Param>();

        return (OASComAdobeGraniteWorkflowCoreJobJob) client.invoke(
            'POST', '/system/console/configMgr/com.adobe.granite.workflow.core.job.JobHandler', '',
            query, form,
            new Map<String, Object>(),
            new Map<String, Object>(),
            new List<String>{ 'application/json', 'text/plain' },
            new List<String>(),
            new List<String> { 'aemAuth' },
            OASComAdobeGraniteWorkflowCoreJobJob.class
        );
    }
    /**
     * 
     * 
     * @param post  (optional)
     * @param apply  (optional)
     * @param r_delete  (optional)
     * @param action  (optional)
     * @param location  (optional)
     * @param propertylist  (optional)
     * @param jobTopics  (optional)
     * @return OASComAdobeGraniteWorkflowCoreOffloa
     * @throws OAS.ApiException if fails to make API call
     */
    public OASComAdobeGraniteWorkflowCoreOffloa comAdobeGraniteWorkflowCoreOffloadingWorkflowOffloadingJobConsum(Map<String, Object> params) {
        List<OAS.Param> query = new List<OAS.Param>();

        // cast query params to verify their expected type
        query.addAll(client.makeParam('post', (Boolean) params.get('post')));
        query.addAll(client.makeParam('apply', (Boolean) params.get('apply')));
        query.addAll(client.makeParam('delete', (Boolean) params.get('r_delete')));
        query.addAll(client.makeParam('action', (String) params.get('action')));
        query.addAll(client.makeParam('$location', (String) params.get('location')));
        query.addAll(client.makeParam('propertylist', (List<String>) params.get('propertylist'), 'csv'));
        query.addAll(client.makeParam('job.topics', (String) params.get('jobTopics')));

        List<OAS.Param> form = new List<OAS.Param>();

        return (OASComAdobeGraniteWorkflowCoreOffloa) client.invoke(
            'POST', '/system/console/configMgr/com.adobe.granite.workflow.core.offloading.WorkflowOffloadingJobConsumer', '',
            query, form,
            new Map<String, Object>(),
            new Map<String, Object>(),
            new List<String>{ 'application/json', 'text/plain' },
            new List<String>(),
            new List<String> { 'aemAuth' },
            OASComAdobeGraniteWorkflowCoreOffloa.class
        );
    }
    /**
     * 
     * 
     * @param post  (optional)
     * @param apply  (optional)
     * @param r_delete  (optional)
     * @param action  (optional)
     * @param location  (optional)
     * @param propertylist  (optional)
     * @param getSystemWorkflowModels  (optional)
     * @param getPackageRootPath  (optional)
     * @return OASComAdobeGraniteWorkflowCorePayloa
     * @throws OAS.ApiException if fails to make API call
     */
    public OASComAdobeGraniteWorkflowCorePayloa comAdobeGraniteWorkflowCorePayloadMapCache(Map<String, Object> params) {
        List<OAS.Param> query = new List<OAS.Param>();

        // cast query params to verify their expected type
        query.addAll(client.makeParam('post', (Boolean) params.get('post')));
        query.addAll(client.makeParam('apply', (Boolean) params.get('apply')));
        query.addAll(client.makeParam('delete', (Boolean) params.get('r_delete')));
        query.addAll(client.makeParam('action', (String) params.get('action')));
        query.addAll(client.makeParam('$location', (String) params.get('location')));
        query.addAll(client.makeParam('propertylist', (List<String>) params.get('propertylist'), 'csv'));
        query.addAll(client.makeParams('getSystemWorkflowModels', (List<String>) params.get('getSystemWorkflowModels')));
        query.addAll(client.makeParam('getPackageRootPath', (String) params.get('getPackageRootPath')));

        List<OAS.Param> form = new List<OAS.Param>();

        return (OASComAdobeGraniteWorkflowCorePayloa) client.invoke(
            'POST', '/system/console/configMgr/com.adobe.granite.workflow.core.PayloadMapCache', '',
            query, form,
            new Map<String, Object>(),
            new Map<String, Object>(),
            new List<String>{ 'application/json', 'text/plain' },
            new List<String>(),
            new List<String> { 'aemAuth' },
            OASComAdobeGraniteWorkflowCorePayloa.class
        );
    }
    /**
     * 
     * 
     * @param post  (optional)
     * @param apply  (optional)
     * @param r_delete  (optional)
     * @param action  (optional)
     * @param location  (optional)
     * @param propertylist  (optional)
     * @param payloadMoveWhiteList  (optional)
     * @param payloadMoveHandleFromWorkflowProcess  (optional)
     * @return OASComAdobeGraniteWorkflowCorePayloa
     * @throws OAS.ApiException if fails to make API call
     */
    public OASComAdobeGraniteWorkflowCorePayloa comAdobeGraniteWorkflowCorePayloadmapPayloadMoveListener(Map<String, Object> params) {
        List<OAS.Param> query = new List<OAS.Param>();

        // cast query params to verify their expected type
        query.addAll(client.makeParam('post', (Boolean) params.get('post')));
        query.addAll(client.makeParam('apply', (Boolean) params.get('apply')));
        query.addAll(client.makeParam('delete', (Boolean) params.get('r_delete')));
        query.addAll(client.makeParam('action', (String) params.get('action')));
        query.addAll(client.makeParam('$location', (String) params.get('location')));
        query.addAll(client.makeParam('propertylist', (List<String>) params.get('propertylist'), 'csv'));
        query.addAll(client.makeParams('payload.move.white.list', (List<String>) params.get('payloadMoveWhiteList')));
        query.addAll(client.makeParam('payload.move.handle.from.workflow.process', (Boolean) params.get('payloadMoveHandleFromWorkflowProcess')));

        List<OAS.Param> form = new List<OAS.Param>();

        return (OASComAdobeGraniteWorkflowCorePayloa) client.invoke(
            'POST', '/system/console/configMgr/com.adobe.granite.workflow.core.payloadmap.PayloadMoveListener', '',
            query, form,
            new Map<String, Object>(),
            new Map<String, Object>(),
            new List<String>{ 'application/json', 'text/plain' },
            new List<String>(),
            new List<String> { 'aemAuth' },
            OASComAdobeGraniteWorkflowCorePayloa.class
        );
    }
    /**
     * 
     * 
     * @param post  (optional)
     * @param apply  (optional)
     * @param r_delete  (optional)
     * @param action  (optional)
     * @param location  (optional)
     * @param propertylist  (optional)
     * @param cqWorkflowConfigWorkflowPackagesRootPath  (optional)
     * @param cqWorkflowConfigWorkflowProcessLegacyMode  (optional)
     * @param cqWorkflowConfigAllowLocking  (optional)
     * @return OASComAdobeGraniteWorkflowCoreWorkfl
     * @throws OAS.ApiException if fails to make API call
     */
    public OASComAdobeGraniteWorkflowCoreWorkfl comAdobeGraniteWorkflowCoreWorkflowConfig(Map<String, Object> params) {
        List<OAS.Param> query = new List<OAS.Param>();

        // cast query params to verify their expected type
        query.addAll(client.makeParam('post', (Boolean) params.get('post')));
        query.addAll(client.makeParam('apply', (Boolean) params.get('apply')));
        query.addAll(client.makeParam('delete', (Boolean) params.get('r_delete')));
        query.addAll(client.makeParam('action', (String) params.get('action')));
        query.addAll(client.makeParam('$location', (String) params.get('location')));
        query.addAll(client.makeParam('propertylist', (List<String>) params.get('propertylist'), 'csv'));
        query.addAll(client.makeParams('cq.workflow.config.workflow.packages.root.path', (List<String>) params.get('cqWorkflowConfigWorkflowPackagesRootPath')));
        query.addAll(client.makeParam('cq.workflow.config.workflow.process.legacy.mode', (Boolean) params.get('cqWorkflowConfigWorkflowProcessLegacyMode')));
        query.addAll(client.makeParam('cq.workflow.config.allow.locking', (Boolean) params.get('cqWorkflowConfigAllowLocking')));

        List<OAS.Param> form = new List<OAS.Param>();

        return (OASComAdobeGraniteWorkflowCoreWorkfl) client.invoke(
            'POST', '/system/console/configMgr/com.adobe.granite.workflow.core.WorkflowConfig', '',
            query, form,
            new Map<String, Object>(),
            new Map<String, Object>(),
            new List<String>{ 'application/json', 'text/plain' },
            new List<String>(),
            new List<String> { 'aemAuth' },
            OASComAdobeGraniteWorkflowCoreWorkfl.class
        );
    }
    /**
     * 
     * 
     * @param post  (optional)
     * @param apply  (optional)
     * @param r_delete  (optional)
     * @param action  (optional)
     * @param location  (optional)
     * @param propertylist  (optional)
     * @param graniteWorkflowinboxSortPropertyName  (optional)
     * @param graniteWorkflowinboxSortOrder  (optional)
     * @param cqWorkflowJobRetry  (optional)
     * @param cqWorkflowSuperuser  (optional)
     * @param graniteWorkflowInboxQuerySize  (optional)
     * @param graniteWorkflowAdminUserGroupFilter  (optional)
     * @param graniteWorkflowEnforceWorkitemAssigneePermissions  (optional)
     * @param graniteWorkflowEnforceWorkflowInitiatorPermissions  (optional)
     * @param graniteWorkflowInjectTenantIdInJobTopics  (optional)
     * @param graniteWorkflowMaxPurgeSaveThreshold  (optional)
     * @param graniteWorkflowMaxPurgeQueryCount  (optional)
     * @return OASComAdobeGraniteWorkflowCoreWorkfl
     * @throws OAS.ApiException if fails to make API call
     */
    public OASComAdobeGraniteWorkflowCoreWorkfl comAdobeGraniteWorkflowCoreWorkflowSessionFactory(Map<String, Object> params) {
        List<OAS.Param> query = new List<OAS.Param>();

        // cast query params to verify their expected type
        query.addAll(client.makeParam('post', (Boolean) params.get('post')));
        query.addAll(client.makeParam('apply', (Boolean) params.get('apply')));
        query.addAll(client.makeParam('delete', (Boolean) params.get('r_delete')));
        query.addAll(client.makeParam('action', (String) params.get('action')));
        query.addAll(client.makeParam('$location', (String) params.get('location')));
        query.addAll(client.makeParam('propertylist', (List<String>) params.get('propertylist'), 'csv'));
        query.addAll(client.makeParam('granite.workflowinbox.sort.propertyName', (String) params.get('graniteWorkflowinboxSortPropertyName')));
        query.addAll(client.makeParam('granite.workflowinbox.sort.order', (String) params.get('graniteWorkflowinboxSortOrder')));
        query.addAll(client.makeParam('cq.workflow.job.retry', (Integer) params.get('cqWorkflowJobRetry')));
        query.addAll(client.makeParams('cq.workflow.superuser', (List<String>) params.get('cqWorkflowSuperuser')));
        query.addAll(client.makeParam('granite.workflow.inboxQuerySize', (Integer) params.get('graniteWorkflowInboxQuerySize')));
        query.addAll(client.makeParam('granite.workflow.adminUserGroupFilter', (Boolean) params.get('graniteWorkflowAdminUserGroupFilter')));
        query.addAll(client.makeParam('granite.workflow.enforceWorkitemAssigneePermissions', (Boolean) params.get('graniteWorkflowEnforceWorkitemAssigneePermissions')));
        query.addAll(client.makeParam('granite.workflow.enforceWorkflowInitiatorPermissions', (Boolean) params.get('graniteWorkflowEnforceWorkflowInitiatorPermissions')));
        query.addAll(client.makeParam('granite.workflow.injectTenantIdInJobTopics', (Boolean) params.get('graniteWorkflowInjectTenantIdInJobTopics')));
        query.addAll(client.makeParam('granite.workflow.maxPurgeSaveThreshold', (Integer) params.get('graniteWorkflowMaxPurgeSaveThreshold')));
        query.addAll(client.makeParam('granite.workflow.maxPurgeQueryCount', (Integer) params.get('graniteWorkflowMaxPurgeQueryCount')));

        List<OAS.Param> form = new List<OAS.Param>();

        return (OASComAdobeGraniteWorkflowCoreWorkfl) client.invoke(
            'POST', '/system/console/configMgr/com.adobe.granite.workflow.core.WorkflowSessionFactory', '',
            query, form,
            new Map<String, Object>(),
            new Map<String, Object>(),
            new List<String>{ 'application/json', 'text/plain' },
            new List<String>(),
            new List<String> { 'aemAuth' },
            OASComAdobeGraniteWorkflowCoreWorkfl.class
        );
    }
    /**
     * 
     * 
     * @param post  (optional)
     * @param apply  (optional)
     * @param r_delete  (optional)
     * @param action  (optional)
     * @param location  (optional)
     * @param propertylist  (optional)
     * @param scheduledpurgeName  (optional)
     * @param scheduledpurgeWorkflowStatus  (optional)
     * @param scheduledpurgeModelIds  (optional)
     * @param scheduledpurgeDaysold  (optional)
     * @return OASComAdobeGraniteWorkflowPurgeSched
     * @throws OAS.ApiException if fails to make API call
     */
    public OASComAdobeGraniteWorkflowPurgeSched comAdobeGraniteWorkflowPurgeScheduler(Map<String, Object> params) {
        List<OAS.Param> query = new List<OAS.Param>();

        // cast query params to verify their expected type
        query.addAll(client.makeParam('post', (Boolean) params.get('post')));
        query.addAll(client.makeParam('apply', (Boolean) params.get('apply')));
        query.addAll(client.makeParam('delete', (Boolean) params.get('r_delete')));
        query.addAll(client.makeParam('action', (String) params.get('action')));
        query.addAll(client.makeParam('$location', (String) params.get('location')));
        query.addAll(client.makeParam('propertylist', (List<String>) params.get('propertylist'), 'csv'));
        query.addAll(client.makeParam('scheduledpurge.name', (String) params.get('scheduledpurgeName')));
        query.addAll(client.makeParam('scheduledpurge.workflowStatus', (String) params.get('scheduledpurgeWorkflowStatus')));
        query.addAll(client.makeParams('scheduledpurge.modelIds', (List<String>) params.get('scheduledpurgeModelIds')));
        query.addAll(client.makeParam('scheduledpurge.daysold', (Integer) params.get('scheduledpurgeDaysold')));

        List<OAS.Param> form = new List<OAS.Param>();

        return (OASComAdobeGraniteWorkflowPurgeSched) client.invoke(
            'POST', '/system/console/configMgr/com.adobe.granite.workflow.purge.Scheduler', '',
            query, form,
            new Map<String, Object>(),
            new Map<String, Object>(),
            new List<String>{ 'application/json', 'text/plain' },
            new List<String>(),
            new List<String> { 'aemAuth' },
            OASComAdobeGraniteWorkflowPurgeSched.class
        );
    }
    /**
     * 
     * 
     * @param post  (optional)
     * @param apply  (optional)
     * @param r_delete  (optional)
     * @param action  (optional)
     * @param location  (optional)
     * @param propertylist  (optional)
     * @param maxConnections  (optional)
     * @param maxRequests  (optional)
     * @param requestTimeout  (optional)
     * @param requestRetries  (optional)
     * @param launchTimeout  (optional)
     * @return OASComAdobeOctopusNcommBootstrapInfo
     * @throws OAS.ApiException if fails to make API call
     */
    public OASComAdobeOctopusNcommBootstrapInfo comAdobeOctopusNcommBootstrap(Map<String, Object> params) {
        List<OAS.Param> query = new List<OAS.Param>();

        // cast query params to verify their expected type
        query.addAll(client.makeParam('post', (Boolean) params.get('post')));
        query.addAll(client.makeParam('apply', (Boolean) params.get('apply')));
        query.addAll(client.makeParam('delete', (Boolean) params.get('r_delete')));
        query.addAll(client.makeParam('action', (String) params.get('action')));
        query.addAll(client.makeParam('$location', (String) params.get('location')));
        query.addAll(client.makeParam('propertylist', (List<String>) params.get('propertylist'), 'csv'));
        query.addAll(client.makeParam('maxConnections', (Integer) params.get('maxConnections')));
        query.addAll(client.makeParam('maxRequests', (Integer) params.get('maxRequests')));
        query.addAll(client.makeParam('requestTimeout', (Integer) params.get('requestTimeout')));
        query.addAll(client.makeParam('requestRetries', (Integer) params.get('requestRetries')));
        query.addAll(client.makeParam('launchTimeout', (Integer) params.get('launchTimeout')));

        List<OAS.Param> form = new List<OAS.Param>();

        return (OASComAdobeOctopusNcommBootstrapInfo) client.invoke(
            'POST', '/system/console/configMgr/com.adobe.octopus.ncomm.bootstrap', '',
            query, form,
            new Map<String, Object>(),
            new Map<String, Object>(),
            new List<String>{ 'application/json', 'text/plain' },
            new List<String>(),
            new List<String> { 'aemAuth' },
            OASComAdobeOctopusNcommBootstrapInfo.class
        );
    }
    /**
     * 
     * 
     * @param post  (optional)
     * @param apply  (optional)
     * @param r_delete  (optional)
     * @param action  (optional)
     * @param location  (optional)
     * @param propertylist  (optional)
     * @param communitiesIntegrationLivefyreSlingEventFilter  (optional)
     * @return OASComAdobeSocialIntegrationsLivefyr
     * @throws OAS.ApiException if fails to make API call
     */
    public OASComAdobeSocialIntegrationsLivefyr comAdobeSocialIntegrationsLivefyreUserPingforpullImplPingPullS(Map<String, Object> params) {
        List<OAS.Param> query = new List<OAS.Param>();

        // cast query params to verify their expected type
        query.addAll(client.makeParam('post', (Boolean) params.get('post')));
        query.addAll(client.makeParam('apply', (Boolean) params.get('apply')));
        query.addAll(client.makeParam('delete', (Boolean) params.get('r_delete')));
        query.addAll(client.makeParam('action', (String) params.get('action')));
        query.addAll(client.makeParam('$location', (String) params.get('location')));
        query.addAll(client.makeParam('propertylist', (List<String>) params.get('propertylist'), 'csv'));
        query.addAll(client.makeParam('communities.integration.livefyre.sling.event.filter', (String) params.get('communitiesIntegrationLivefyreSlingEventFilter')));

        List<OAS.Param> form = new List<OAS.Param>();

        return (OASComAdobeSocialIntegrationsLivefyr) client.invoke(
            'POST', '/system/console/configMgr/com.adobe.social.integrations.livefyre.user.pingforpull.impl.PingPullServlet', '',
            query, form,
            new Map<String, Object>(),
            new Map<String, Object>(),
            new List<String>{ 'application/json', 'text/plain' },
            new List<String>(),
            new List<String> { 'aemAuth' },
            OASComAdobeSocialIntegrationsLivefyr.class
        );
    }
    /**
     * 
     * 
     * @param post  (optional)
     * @param apply  (optional)
     * @param r_delete  (optional)
     * @param action  (optional)
     * @param location  (optional)
     * @param propertylist  (optional)
     * @param maxConnections  (optional)
     * @param maxRequests  (optional)
     * @param requestTimeout  (optional)
     * @param logDir  (optional)
     * @return OASComAdobeXmpWorkerFilesNcommXMPFil
     * @throws OAS.ApiException if fails to make API call
     */
    public OASComAdobeXmpWorkerFilesNcommXMPFil comAdobeXmpWorkerFilesNcommXMPFilesNComm(Map<String, Object> params) {
        List<OAS.Param> query = new List<OAS.Param>();

        // cast query params to verify their expected type
        query.addAll(client.makeParam('post', (Boolean) params.get('post')));
        query.addAll(client.makeParam('apply', (Boolean) params.get('apply')));
        query.addAll(client.makeParam('delete', (Boolean) params.get('r_delete')));
        query.addAll(client.makeParam('action', (String) params.get('action')));
        query.addAll(client.makeParam('$location', (String) params.get('location')));
        query.addAll(client.makeParam('propertylist', (List<String>) params.get('propertylist'), 'csv'));
        query.addAll(client.makeParam('maxConnections', (String) params.get('maxConnections')));
        query.addAll(client.makeParam('maxRequests', (String) params.get('maxRequests')));
        query.addAll(client.makeParam('requestTimeout', (String) params.get('requestTimeout')));
        query.addAll(client.makeParam('logDir', (String) params.get('logDir')));

        List<OAS.Param> form = new List<OAS.Param>();

        return (OASComAdobeXmpWorkerFilesNcommXMPFil) client.invoke(
            'POST', '/system/console/configMgr/com.adobe.xmp.worker.files.ncomm.XMPFilesNComm', '',
            query, form,
            new Map<String, Object>(),
            new Map<String, Object>(),
            new List<String>{ 'application/json', 'text/plain' },
            new List<String>(),
            new List<String> { 'aemAuth' },
            OASComAdobeXmpWorkerFilesNcommXMPFil.class
        );
    }
    /**
     * 
     * 
     * @param post  (optional)
     * @param apply  (optional)
     * @param r_delete  (optional)
     * @param action  (optional)
     * @param location  (optional)
     * @param propertylist  (optional)
     * @param jdbcDriverClass  (optional)
     * @param jdbcConnectionUri  (optional)
     * @param jdbcUsername  (optional)
     * @param jdbcPassword  (optional)
     * @param jdbcValidationQuery  (optional)
     * @param defaultReadonly  (optional)
     * @param defaultAutocommit  (optional)
     * @param poolSize  (optional)
     * @param poolMaxWaitMsec  (optional)
     * @param datasourceName  (optional)
     * @param datasourceSvcProperties  (optional)
     * @return OASComDayCommonsDatasourceJdbcpoolJd
     * @throws OAS.ApiException if fails to make API call
     */
    public OASComDayCommonsDatasourceJdbcpoolJd comDayCommonsDatasourceJdbcpoolJdbcPoolService(Map<String, Object> params) {
        List<OAS.Param> query = new List<OAS.Param>();

        // cast query params to verify their expected type
        query.addAll(client.makeParam('post', (Boolean) params.get('post')));
        query.addAll(client.makeParam('apply', (Boolean) params.get('apply')));
        query.addAll(client.makeParam('delete', (Boolean) params.get('r_delete')));
        query.addAll(client.makeParam('action', (String) params.get('action')));
        query.addAll(client.makeParam('$location', (String) params.get('location')));
        query.addAll(client.makeParam('propertylist', (List<String>) params.get('propertylist'), 'csv'));
        query.addAll(client.makeParam('jdbc.driver.class', (String) params.get('jdbcDriverClass')));
        query.addAll(client.makeParam('jdbc.connection.uri', (String) params.get('jdbcConnectionUri')));
        query.addAll(client.makeParam('jdbc.username', (String) params.get('jdbcUsername')));
        query.addAll(client.makeParam('jdbc.password', (String) params.get('jdbcPassword')));
        query.addAll(client.makeParam('jdbc.validation.query', (String) params.get('jdbcValidationQuery')));
        query.addAll(client.makeParam('default.readonly', (Boolean) params.get('defaultReadonly')));
        query.addAll(client.makeParam('default.autocommit', (Boolean) params.get('defaultAutocommit')));
        query.addAll(client.makeParam('pool.size', (Integer) params.get('poolSize')));
        query.addAll(client.makeParam('pool.max.wait.msec', (Integer) params.get('poolMaxWaitMsec')));
        query.addAll(client.makeParam('datasource.name', (String) params.get('datasourceName')));
        query.addAll(client.makeParams('datasource.svc.properties', (List<String>) params.get('datasourceSvcProperties')));

        List<OAS.Param> form = new List<OAS.Param>();

        return (OASComDayCommonsDatasourceJdbcpoolJd) client.invoke(
            'POST', '/system/console/configMgr/com.day.commons.datasource.jdbcpool.JdbcPoolService', '',
            query, form,
            new Map<String, Object>(),
            new Map<String, Object>(),
            new List<String>{ 'application/json', 'text/plain' },
            new List<String>(),
            new List<String> { 'aemAuth' },
            OASComDayCommonsDatasourceJdbcpoolJd.class
        );
    }
    /**
     * 
     * 
     * @param post  (optional)
     * @param apply  (optional)
     * @param r_delete  (optional)
     * @param action  (optional)
     * @param location  (optional)
     * @param propertylist  (optional)
     * @param proxyEnabled  (optional)
     * @param proxyHost  (optional)
     * @param proxyUser  (optional)
     * @param proxyPassword  (optional)
     * @param proxyNtlmHost  (optional)
     * @param proxyNtlmDomain  (optional)
     * @param proxyExceptions  (optional)
     * @return OASComDayCommonsHttpclientInfo
     * @throws OAS.ApiException if fails to make API call
     */
    public OASComDayCommonsHttpclientInfo comDayCommonsHttpclient(Map<String, Object> params) {
        List<OAS.Param> query = new List<OAS.Param>();

        // cast query params to verify their expected type
        query.addAll(client.makeParam('post', (Boolean) params.get('post')));
        query.addAll(client.makeParam('apply', (Boolean) params.get('apply')));
        query.addAll(client.makeParam('delete', (Boolean) params.get('r_delete')));
        query.addAll(client.makeParam('action', (String) params.get('action')));
        query.addAll(client.makeParam('$location', (String) params.get('location')));
        query.addAll(client.makeParam('propertylist', (List<String>) params.get('propertylist'), 'csv'));
        query.addAll(client.makeParam('proxy.enabled', (Boolean) params.get('proxyEnabled')));
        query.addAll(client.makeParam('proxy.host', (String) params.get('proxyHost')));
        query.addAll(client.makeParam('proxy.user', (String) params.get('proxyUser')));
        query.addAll(client.makeParam('proxy.password', (String) params.get('proxyPassword')));
        query.addAll(client.makeParam('proxy.ntlm.host', (String) params.get('proxyNtlmHost')));
        query.addAll(client.makeParam('proxy.ntlm.domain', (String) params.get('proxyNtlmDomain')));
        query.addAll(client.makeParams('proxy.exceptions', (List<String>) params.get('proxyExceptions')));

        List<OAS.Param> form = new List<OAS.Param>();

        return (OASComDayCommonsHttpclientInfo) client.invoke(
            'POST', '/system/console/configMgr/com.day.commons.httpclient', '',
            query, form,
            new Map<String, Object>(),
            new Map<String, Object>(),
            new List<String>{ 'application/json', 'text/plain' },
            new List<String>(),
            new List<String> { 'aemAuth' },
            OASComDayCommonsHttpclientInfo.class
        );
    }
    /**
     * 
     * 
     * @param post  (optional)
     * @param apply  (optional)
     * @param r_delete  (optional)
     * @param action  (optional)
     * @param location  (optional)
     * @param propertylist  (optional)
     * @param cqStoreListenerAdditionalStorePaths  (optional)
     * @return OASComDayCqAnalyticsImplStorePropert
     * @throws OAS.ApiException if fails to make API call
     */
    public OASComDayCqAnalyticsImplStorePropert comDayCqAnalyticsImplStorePropertiesChangeListener(Map<String, Object> params) {
        List<OAS.Param> query = new List<OAS.Param>();

        // cast query params to verify their expected type
        query.addAll(client.makeParam('post', (Boolean) params.get('post')));
        query.addAll(client.makeParam('apply', (Boolean) params.get('apply')));
        query.addAll(client.makeParam('delete', (Boolean) params.get('r_delete')));
        query.addAll(client.makeParam('action', (String) params.get('action')));
        query.addAll(client.makeParam('$location', (String) params.get('location')));
        query.addAll(client.makeParam('propertylist', (List<String>) params.get('propertylist'), 'csv'));
        query.addAll(client.makeParams('cq.store.listener.additionalStorePaths', (List<String>) params.get('cqStoreListenerAdditionalStorePaths')));

        List<OAS.Param> form = new List<OAS.Param>();

        return (OASComDayCqAnalyticsImplStorePropert) client.invoke(
            'POST', '/system/console/configMgr/com.day.cq.analytics.impl.StorePropertiesChangeListener', '',
            query, form,
            new Map<String, Object>(),
            new Map<String, Object>(),
            new List<String>{ 'application/json', 'text/plain' },
            new List<String>(),
            new List<String> { 'aemAuth' },
            OASComDayCqAnalyticsImplStorePropert.class
        );
    }
    /**
     * 
     * 
     * @param post  (optional)
     * @param apply  (optional)
     * @param r_delete  (optional)
     * @param action  (optional)
     * @param location  (optional)
     * @param propertylist  (optional)
     * @param allowedPaths  (optional)
     * @param cqAnalyticsSaintExporterPagesize  (optional)
     * @return OASComDayCqAnalyticsSitecatalystImpl
     * @throws OAS.ApiException if fails to make API call
     */
    public OASComDayCqAnalyticsSitecatalystImpl comDayCqAnalyticsSitecatalystImplExporterClassificationsExporte(Map<String, Object> params) {
        List<OAS.Param> query = new List<OAS.Param>();

        // cast query params to verify their expected type
        query.addAll(client.makeParam('post', (Boolean) params.get('post')));
        query.addAll(client.makeParam('apply', (Boolean) params.get('apply')));
        query.addAll(client.makeParam('delete', (Boolean) params.get('r_delete')));
        query.addAll(client.makeParam('action', (String) params.get('action')));
        query.addAll(client.makeParam('$location', (String) params.get('location')));
        query.addAll(client.makeParam('propertylist', (List<String>) params.get('propertylist'), 'csv'));
        query.addAll(client.makeParams('allowed.paths', (List<String>) params.get('allowedPaths')));
        query.addAll(client.makeParam('cq.analytics.saint.exporter.pagesize', (Integer) params.get('cqAnalyticsSaintExporterPagesize')));

        List<OAS.Param> form = new List<OAS.Param>();

        return (OASComDayCqAnalyticsSitecatalystImpl) client.invoke(
            'POST', '/system/console/configMgr/com.day.cq.analytics.sitecatalyst.impl.exporter.ClassificationsExporter', '',
            query, form,
            new Map<String, Object>(),
            new Map<String, Object>(),
            new List<String>{ 'application/json', 'text/plain' },
            new List<String>(),
            new List<String> { 'aemAuth' },
            OASComDayCqAnalyticsSitecatalystImpl.class
        );
    }
    /**
     * 
     * 
     * @param post  (optional)
     * @param apply  (optional)
     * @param r_delete  (optional)
     * @param action  (optional)
     * @param location  (optional)
     * @param propertylist  (optional)
     * @param reportFetchAttempts  (optional)
     * @param reportFetchDelay  (optional)
     * @return OASComDayCqAnalyticsSitecatalystImpl
     * @throws OAS.ApiException if fails to make API call
     */
    public OASComDayCqAnalyticsSitecatalystImpl comDayCqAnalyticsSitecatalystImplImporterReportImporter(Map<String, Object> params) {
        List<OAS.Param> query = new List<OAS.Param>();

        // cast query params to verify their expected type
        query.addAll(client.makeParam('post', (Boolean) params.get('post')));
        query.addAll(client.makeParam('apply', (Boolean) params.get('apply')));
        query.addAll(client.makeParam('delete', (Boolean) params.get('r_delete')));
        query.addAll(client.makeParam('action', (String) params.get('action')));
        query.addAll(client.makeParam('$location', (String) params.get('location')));
        query.addAll(client.makeParam('propertylist', (List<String>) params.get('propertylist'), 'csv'));
        query.addAll(client.makeParam('report.fetch.attempts', (Integer) params.get('reportFetchAttempts')));
        query.addAll(client.makeParam('report.fetch.delay', (Integer) params.get('reportFetchDelay')));

        List<OAS.Param> form = new List<OAS.Param>();

        return (OASComDayCqAnalyticsSitecatalystImpl) client.invoke(
            'POST', '/system/console/configMgr/com.day.cq.analytics.sitecatalyst.impl.importer.ReportImporter', '',
            query, form,
            new Map<String, Object>(),
            new Map<String, Object>(),
            new List<String>{ 'application/json', 'text/plain' },
            new List<String>(),
            new List<String> { 'aemAuth' },
            OASComDayCqAnalyticsSitecatalystImpl.class
        );
    }
    /**
     * 
     * 
     * @param post  (optional)
     * @param apply  (optional)
     * @param r_delete  (optional)
     * @param action  (optional)
     * @param location  (optional)
     * @param propertylist  (optional)
     * @param cqAnalyticsAdapterfactoryContextstores  (optional)
     * @return OASComDayCqAnalyticsSitecatalystImpl
     * @throws OAS.ApiException if fails to make API call
     */
    public OASComDayCqAnalyticsSitecatalystImpl comDayCqAnalyticsSitecatalystImplSitecatalystAdapterFactory(Map<String, Object> params) {
        List<OAS.Param> query = new List<OAS.Param>();

        // cast query params to verify their expected type
        query.addAll(client.makeParam('post', (Boolean) params.get('post')));
        query.addAll(client.makeParam('apply', (Boolean) params.get('apply')));
        query.addAll(client.makeParam('delete', (Boolean) params.get('r_delete')));
        query.addAll(client.makeParam('action', (String) params.get('action')));
        query.addAll(client.makeParam('$location', (String) params.get('location')));
        query.addAll(client.makeParam('propertylist', (List<String>) params.get('propertylist'), 'csv'));
        query.addAll(client.makeParams('cq.analytics.adapterfactory.contextstores', (List<String>) params.get('cqAnalyticsAdapterfactoryContextstores')));

        List<OAS.Param> form = new List<OAS.Param>();

        return (OASComDayCqAnalyticsSitecatalystImpl) client.invoke(
            'POST', '/system/console/configMgr/com.day.cq.analytics.sitecatalyst.impl.SitecatalystAdapterFactory', '',
            query, form,
            new Map<String, Object>(),
            new Map<String, Object>(),
            new List<String>{ 'application/json', 'text/plain' },
            new List<String>(),
            new List<String> { 'aemAuth' },
            OASComDayCqAnalyticsSitecatalystImpl.class
        );
    }
    /**
     * 
     * 
     * @param post  (optional)
     * @param apply  (optional)
     * @param r_delete  (optional)
     * @param action  (optional)
     * @param location  (optional)
     * @param propertylist  (optional)
     * @param cqAnalyticsSitecatalystServiceDatacenterUrl  (optional)
     * @param devhostnamepatterns  (optional)
     * @param connectionTimeout  (optional)
     * @param socketTimeout  (optional)
     * @return OASComDayCqAnalyticsSitecatalystImpl
     * @throws OAS.ApiException if fails to make API call
     */
    public OASComDayCqAnalyticsSitecatalystImpl comDayCqAnalyticsSitecatalystImplSitecatalystHttpClientImpl(Map<String, Object> params) {
        List<OAS.Param> query = new List<OAS.Param>();

        // cast query params to verify their expected type
        query.addAll(client.makeParam('post', (Boolean) params.get('post')));
        query.addAll(client.makeParam('apply', (Boolean) params.get('apply')));
        query.addAll(client.makeParam('delete', (Boolean) params.get('r_delete')));
        query.addAll(client.makeParam('action', (String) params.get('action')));
        query.addAll(client.makeParam('$location', (String) params.get('location')));
        query.addAll(client.makeParam('propertylist', (List<String>) params.get('propertylist'), 'csv'));
        query.addAll(client.makeParams('cq.analytics.sitecatalyst.service.datacenter.url', (List<String>) params.get('cqAnalyticsSitecatalystServiceDatacenterUrl')));
        query.addAll(client.makeParams('devhostnamepatterns', (List<String>) params.get('devhostnamepatterns')));
        query.addAll(client.makeParam('connection.timeout', (Integer) params.get('connectionTimeout')));
        query.addAll(client.makeParam('socket.timeout', (Integer) params.get('socketTimeout')));

        List<OAS.Param> form = new List<OAS.Param>();

        return (OASComDayCqAnalyticsSitecatalystImpl) client.invoke(
            'POST', '/system/console/configMgr/com.day.cq.analytics.sitecatalyst.impl.SitecatalystHttpClientImpl', '',
            query, form,
            new Map<String, Object>(),
            new Map<String, Object>(),
            new List<String>{ 'application/json', 'text/plain' },
            new List<String>(),
            new List<String> { 'aemAuth' },
            OASComDayCqAnalyticsSitecatalystImpl.class
        );
    }
    /**
     * 
     * 
     * @param post  (optional)
     * @param apply  (optional)
     * @param r_delete  (optional)
     * @param action  (optional)
     * @param location  (optional)
     * @param propertylist  (optional)
     * @param cqAnalyticsTestandtargetAccountoptionsupdaterEnabled  (optional)
     * @return OASComDayCqAnalyticsTestandtargetImp
     * @throws OAS.ApiException if fails to make API call
     */
    public OASComDayCqAnalyticsTestandtargetImp comDayCqAnalyticsTestandtargetImplAccountOptionsUpdater(Map<String, Object> params) {
        List<OAS.Param> query = new List<OAS.Param>();

        // cast query params to verify their expected type
        query.addAll(client.makeParam('post', (Boolean) params.get('post')));
        query.addAll(client.makeParam('apply', (Boolean) params.get('apply')));
        query.addAll(client.makeParam('delete', (Boolean) params.get('r_delete')));
        query.addAll(client.makeParam('action', (String) params.get('action')));
        query.addAll(client.makeParam('$location', (String) params.get('location')));
        query.addAll(client.makeParam('propertylist', (List<String>) params.get('propertylist'), 'csv'));
        query.addAll(client.makeParam('cq.analytics.testandtarget.accountoptionsupdater.enabled', (Boolean) params.get('cqAnalyticsTestandtargetAccountoptionsupdaterEnabled')));

        List<OAS.Param> form = new List<OAS.Param>();

        return (OASComDayCqAnalyticsTestandtargetImp) client.invoke(
            'POST', '/system/console/configMgr/com.day.cq.analytics.testandtarget.impl.AccountOptionsUpdater', '',
            query, form,
            new Map<String, Object>(),
            new Map<String, Object>(),
            new List<String>{ 'application/json', 'text/plain' },
            new List<String>(),
            new List<String> { 'aemAuth' },
            OASComDayCqAnalyticsTestandtargetImp.class
        );
    }
    /**
     * 
     * 
     * @param post  (optional)
     * @param apply  (optional)
     * @param r_delete  (optional)
     * @param action  (optional)
     * @param location  (optional)
     * @param propertylist  (optional)
     * @param cqAnalyticsTestandtargetDeleteauthoractivitylistenerEnabled  (optional)
     * @return OASComDayCqAnalyticsTestandtargetImp
     * @throws OAS.ApiException if fails to make API call
     */
    public OASComDayCqAnalyticsTestandtargetImp comDayCqAnalyticsTestandtargetImplDeleteAuthorActivityListener(Map<String, Object> params) {
        List<OAS.Param> query = new List<OAS.Param>();

        // cast query params to verify their expected type
        query.addAll(client.makeParam('post', (Boolean) params.get('post')));
        query.addAll(client.makeParam('apply', (Boolean) params.get('apply')));
        query.addAll(client.makeParam('delete', (Boolean) params.get('r_delete')));
        query.addAll(client.makeParam('action', (String) params.get('action')));
        query.addAll(client.makeParam('$location', (String) params.get('location')));
        query.addAll(client.makeParam('propertylist', (List<String>) params.get('propertylist'), 'csv'));
        query.addAll(client.makeParam('cq.analytics.testandtarget.deleteauthoractivitylistener.enabled', (Boolean) params.get('cqAnalyticsTestandtargetDeleteauthoractivitylistenerEnabled')));

        List<OAS.Param> form = new List<OAS.Param>();

        return (OASComDayCqAnalyticsTestandtargetImp) client.invoke(
            'POST', '/system/console/configMgr/com.day.cq.analytics.testandtarget.impl.DeleteAuthorActivityListener', '',
            query, form,
            new Map<String, Object>(),
            new Map<String, Object>(),
            new List<String>{ 'application/json', 'text/plain' },
            new List<String>(),
            new List<String> { 'aemAuth' },
            OASComDayCqAnalyticsTestandtargetImp.class
        );
    }
    /**
     * 
     * 
     * @param post  (optional)
     * @param apply  (optional)
     * @param r_delete  (optional)
     * @param action  (optional)
     * @param location  (optional)
     * @param propertylist  (optional)
     * @param cqAnalyticsTestandtargetPushauthorcampaignpagelistenerEnabled  (optional)
     * @return OASComDayCqAnalyticsTestandtargetImp
     * @throws OAS.ApiException if fails to make API call
     */
    public OASComDayCqAnalyticsTestandtargetImp comDayCqAnalyticsTestandtargetImplPushAuthorCampaignPageListener(Map<String, Object> params) {
        List<OAS.Param> query = new List<OAS.Param>();

        // cast query params to verify their expected type
        query.addAll(client.makeParam('post', (Boolean) params.get('post')));
        query.addAll(client.makeParam('apply', (Boolean) params.get('apply')));
        query.addAll(client.makeParam('delete', (Boolean) params.get('r_delete')));
        query.addAll(client.makeParam('action', (String) params.get('action')));
        query.addAll(client.makeParam('$location', (String) params.get('location')));
        query.addAll(client.makeParam('propertylist', (List<String>) params.get('propertylist'), 'csv'));
        query.addAll(client.makeParam('cq.analytics.testandtarget.pushauthorcampaignpagelistener.enabled', (Boolean) params.get('cqAnalyticsTestandtargetPushauthorcampaignpagelistenerEnabled')));

        List<OAS.Param> form = new List<OAS.Param>();

        return (OASComDayCqAnalyticsTestandtargetImp) client.invoke(
            'POST', '/system/console/configMgr/com.day.cq.analytics.testandtarget.impl.PushAuthorCampaignPageListener', '',
            query, form,
            new Map<String, Object>(),
            new Map<String, Object>(),
            new List<String>{ 'application/json', 'text/plain' },
            new List<String>(),
            new List<String> { 'aemAuth' },
            OASComDayCqAnalyticsTestandtargetImp.class
        );
    }
    /**
     * 
     * 
     * @param post  (optional)
     * @param apply  (optional)
     * @param r_delete  (optional)
     * @param action  (optional)
     * @param location  (optional)
     * @param propertylist  (optional)
     * @param cqAnalyticsTestandtargetSegmentimporterEnabled  (optional)
     * @return OASComDayCqAnalyticsTestandtargetImp
     * @throws OAS.ApiException if fails to make API call
     */
    public OASComDayCqAnalyticsTestandtargetImp comDayCqAnalyticsTestandtargetImplSegmentImporter(Map<String, Object> params) {
        List<OAS.Param> query = new List<OAS.Param>();

        // cast query params to verify their expected type
        query.addAll(client.makeParam('post', (Boolean) params.get('post')));
        query.addAll(client.makeParam('apply', (Boolean) params.get('apply')));
        query.addAll(client.makeParam('delete', (Boolean) params.get('r_delete')));
        query.addAll(client.makeParam('action', (String) params.get('action')));
        query.addAll(client.makeParam('$location', (String) params.get('location')));
        query.addAll(client.makeParam('propertylist', (List<String>) params.get('propertylist'), 'csv'));
        query.addAll(client.makeParam('cq.analytics.testandtarget.segmentimporter.enabled', (Boolean) params.get('cqAnalyticsTestandtargetSegmentimporterEnabled')));

        List<OAS.Param> form = new List<OAS.Param>();

        return (OASComDayCqAnalyticsTestandtargetImp) client.invoke(
            'POST', '/system/console/configMgr/com.day.cq.analytics.testandtarget.impl.SegmentImporter', '',
            query, form,
            new Map<String, Object>(),
            new Map<String, Object>(),
            new List<String>{ 'application/json', 'text/plain' },
            new List<String>(),
            new List<String> { 'aemAuth' },
            OASComDayCqAnalyticsTestandtargetImp.class
        );
    }
    /**
     * 
     * 
     * @param post  (optional)
     * @param apply  (optional)
     * @param r_delete  (optional)
     * @param action  (optional)
     * @param location  (optional)
     * @param propertylist  (optional)
     * @param endpointUri  (optional)
     * @param connectionTimeout  (optional)
     * @param socketTimeout  (optional)
     * @return OASComDayCqAnalyticsTestandtargetImp
     * @throws OAS.ApiException if fails to make API call
     */
    public OASComDayCqAnalyticsTestandtargetImp comDayCqAnalyticsTestandtargetImplServiceWebServiceImpl(Map<String, Object> params) {
        List<OAS.Param> query = new List<OAS.Param>();

        // cast query params to verify their expected type
        query.addAll(client.makeParam('post', (Boolean) params.get('post')));
        query.addAll(client.makeParam('apply', (Boolean) params.get('apply')));
        query.addAll(client.makeParam('delete', (Boolean) params.get('r_delete')));
        query.addAll(client.makeParam('action', (String) params.get('action')));
        query.addAll(client.makeParam('$location', (String) params.get('location')));
        query.addAll(client.makeParam('propertylist', (List<String>) params.get('propertylist'), 'csv'));
        query.addAll(client.makeParam('endpointUri', (String) params.get('endpointUri')));
        query.addAll(client.makeParam('connectionTimeout', (Integer) params.get('connectionTimeout')));
        query.addAll(client.makeParam('socketTimeout', (Integer) params.get('socketTimeout')));

        List<OAS.Param> form = new List<OAS.Param>();

        return (OASComDayCqAnalyticsTestandtargetImp) client.invoke(
            'POST', '/system/console/configMgr/com.day.cq.analytics.testandtarget.impl.service.WebServiceImpl', '',
            query, form,
            new Map<String, Object>(),
            new Map<String, Object>(),
            new List<String>{ 'application/json', 'text/plain' },
            new List<String>(),
            new List<String> { 'aemAuth' },
            OASComDayCqAnalyticsTestandtargetImp.class
        );
    }
    /**
     * 
     * 
     * @param post  (optional)
     * @param apply  (optional)
     * @param r_delete  (optional)
     * @param action  (optional)
     * @param location  (optional)
     * @param propertylist  (optional)
     * @param testandtargetEndpointUrl  (optional)
     * @return OASComDayCqAnalyticsTestandtargetImp
     * @throws OAS.ApiException if fails to make API call
     */
    public OASComDayCqAnalyticsTestandtargetImp comDayCqAnalyticsTestandtargetImplServletsAdminServerServlet(Map<String, Object> params) {
        List<OAS.Param> query = new List<OAS.Param>();

        // cast query params to verify their expected type
        query.addAll(client.makeParam('post', (Boolean) params.get('post')));
        query.addAll(client.makeParam('apply', (Boolean) params.get('apply')));
        query.addAll(client.makeParam('delete', (Boolean) params.get('r_delete')));
        query.addAll(client.makeParam('action', (String) params.get('action')));
        query.addAll(client.makeParam('$location', (String) params.get('location')));
        query.addAll(client.makeParam('propertylist', (List<String>) params.get('propertylist'), 'csv'));
        query.addAll(client.makeParam('testandtarget.endpoint.url', (String) params.get('testandtargetEndpointUrl')));

        List<OAS.Param> form = new List<OAS.Param>();

        return (OASComDayCqAnalyticsTestandtargetImp) client.invoke(
            'POST', '/system/console/configMgr/com.day.cq.analytics.testandtarget.impl.servlets.AdminServerServlet', '',
            query, form,
            new Map<String, Object>(),
            new Map<String, Object>(),
            new List<String>{ 'application/json', 'text/plain' },
            new List<String>(),
            new List<String> { 'aemAuth' },
            OASComDayCqAnalyticsTestandtargetImp.class
        );
    }
    /**
     * 
     * 
     * @param post  (optional)
     * @param apply  (optional)
     * @param r_delete  (optional)
     * @param action  (optional)
     * @param location  (optional)
     * @param propertylist  (optional)
     * @param cqAnalyticsTestandtargetApiUrl  (optional)
     * @param cqAnalyticsTestandtargetTimeout  (optional)
     * @param cqAnalyticsTestandtargetSockettimeout  (optional)
     * @param cqAnalyticsTestandtargetRecommendationsUrlReplace  (optional)
     * @param cqAnalyticsTestandtargetRecommendationsUrlReplacewith  (optional)
     * @return OASComDayCqAnalyticsTestandtargetImp
     * @throws OAS.ApiException if fails to make API call
     */
    public OASComDayCqAnalyticsTestandtargetImp comDayCqAnalyticsTestandtargetImplTestandtargetHttpClientImpl(Map<String, Object> params) {
        List<OAS.Param> query = new List<OAS.Param>();

        // cast query params to verify their expected type
        query.addAll(client.makeParam('post', (Boolean) params.get('post')));
        query.addAll(client.makeParam('apply', (Boolean) params.get('apply')));
        query.addAll(client.makeParam('delete', (Boolean) params.get('r_delete')));
        query.addAll(client.makeParam('action', (String) params.get('action')));
        query.addAll(client.makeParam('$location', (String) params.get('location')));
        query.addAll(client.makeParam('propertylist', (List<String>) params.get('propertylist'), 'csv'));
        query.addAll(client.makeParam('cq.analytics.testandtarget.api.url', (String) params.get('cqAnalyticsTestandtargetApiUrl')));
        query.addAll(client.makeParam('cq.analytics.testandtarget.timeout', (Integer) params.get('cqAnalyticsTestandtargetTimeout')));
        query.addAll(client.makeParam('cq.analytics.testandtarget.sockettimeout', (Integer) params.get('cqAnalyticsTestandtargetSockettimeout')));
        query.addAll(client.makeParam('cq.analytics.testandtarget.recommendations.url.replace', (String) params.get('cqAnalyticsTestandtargetRecommendationsUrlReplace')));
        query.addAll(client.makeParam('cq.analytics.testandtarget.recommendations.url.replacewith', (String) params.get('cqAnalyticsTestandtargetRecommendationsUrlReplacewith')));

        List<OAS.Param> form = new List<OAS.Param>();

        return (OASComDayCqAnalyticsTestandtargetImp) client.invoke(
            'POST', '/system/console/configMgr/com.day.cq.analytics.testandtarget.impl.TestandtargetHttpClientImpl', '',
            query, form,
            new Map<String, Object>(),
            new Map<String, Object>(),
            new List<String>{ 'application/json', 'text/plain' },
            new List<String>(),
            new List<String> { 'aemAuth' },
            OASComDayCqAnalyticsTestandtargetImp.class
        );
    }
    /**
     * 
     * 
     * @param post  (optional)
     * @param apply  (optional)
     * @param r_delete  (optional)
     * @param action  (optional)
     * @param location  (optional)
     * @param propertylist  (optional)
     * @param cugExemptedPrincipals  (optional)
     * @param cugEnabled  (optional)
     * @param cugPrincipalsRegex  (optional)
     * @param cugPrincipalsReplacement  (optional)
     * @return OASComDayCqAuthImplCugCugSupportImpl
     * @throws OAS.ApiException if fails to make API call
     */
    public OASComDayCqAuthImplCugCugSupportImpl comDayCqAuthImplCugCugSupportImpl(Map<String, Object> params) {
        List<OAS.Param> query = new List<OAS.Param>();

        // cast query params to verify their expected type
        query.addAll(client.makeParam('post', (Boolean) params.get('post')));
        query.addAll(client.makeParam('apply', (Boolean) params.get('apply')));
        query.addAll(client.makeParam('delete', (Boolean) params.get('r_delete')));
        query.addAll(client.makeParam('action', (String) params.get('action')));
        query.addAll(client.makeParam('$location', (String) params.get('location')));
        query.addAll(client.makeParam('propertylist', (List<String>) params.get('propertylist'), 'csv'));
        query.addAll(client.makeParams('cug.exempted.principals', (List<String>) params.get('cugExemptedPrincipals')));
        query.addAll(client.makeParam('cug.enabled', (Boolean) params.get('cugEnabled')));
        query.addAll(client.makeParam('cug.principals.regex', (String) params.get('cugPrincipalsRegex')));
        query.addAll(client.makeParam('cug.principals.replacement', (String) params.get('cugPrincipalsReplacement')));

        List<OAS.Param> form = new List<OAS.Param>();

        return (OASComDayCqAuthImplCugCugSupportImpl) client.invoke(
            'POST', '/system/console/configMgr/com.day.cq.auth.impl.cug.CugSupportImpl', '',
            query, form,
            new Map<String, Object>(),
            new Map<String, Object>(),
            new List<String>{ 'application/json', 'text/plain' },
            new List<String>(),
            new List<String> { 'aemAuth' },
            OASComDayCqAuthImplCugCugSupportImpl.class
        );
    }
    /**
     * 
     * 
     * @param post  (optional)
     * @param apply  (optional)
     * @param r_delete  (optional)
     * @param action  (optional)
     * @param location  (optional)
     * @param propertylist  (optional)
     * @param path  (optional)
     * @param serviceRanking  (optional)
     * @param authLoginselectorMappings  (optional)
     * @param authLoginselectorChangepwMappings  (optional)
     * @param authLoginselectorDefaultloginpage  (optional)
     * @param authLoginselectorDefaultchangepwpage  (optional)
     * @param authLoginselectorHandle  (optional)
     * @param authLoginselectorHandleAllExtensions  (optional)
     * @return OASComDayCqAuthImplLoginSelectorHand
     * @throws OAS.ApiException if fails to make API call
     */
    public OASComDayCqAuthImplLoginSelectorHand comDayCqAuthImplLoginSelectorHandler(Map<String, Object> params) {
        List<OAS.Param> query = new List<OAS.Param>();

        // cast query params to verify their expected type
        query.addAll(client.makeParam('post', (Boolean) params.get('post')));
        query.addAll(client.makeParam('apply', (Boolean) params.get('apply')));
        query.addAll(client.makeParam('delete', (Boolean) params.get('r_delete')));
        query.addAll(client.makeParam('action', (String) params.get('action')));
        query.addAll(client.makeParam('$location', (String) params.get('location')));
        query.addAll(client.makeParam('propertylist', (List<String>) params.get('propertylist'), 'csv'));
        query.addAll(client.makeParam('path', (String) params.get('path')));
        query.addAll(client.makeParam('service.ranking', (Integer) params.get('serviceRanking')));
        query.addAll(client.makeParams('auth.loginselector.mappings', (List<String>) params.get('authLoginselectorMappings')));
        query.addAll(client.makeParams('auth.loginselector.changepw.mappings', (List<String>) params.get('authLoginselectorChangepwMappings')));
        query.addAll(client.makeParam('auth.loginselector.defaultloginpage', (String) params.get('authLoginselectorDefaultloginpage')));
        query.addAll(client.makeParam('auth.loginselector.defaultchangepwpage', (String) params.get('authLoginselectorDefaultchangepwpage')));
        query.addAll(client.makeParams('auth.loginselector.handle', (List<String>) params.get('authLoginselectorHandle')));
        query.addAll(client.makeParam('auth.loginselector.handle.all.extensions', (Boolean) params.get('authLoginselectorHandleAllExtensions')));

        List<OAS.Param> form = new List<OAS.Param>();

        return (OASComDayCqAuthImplLoginSelectorHand) client.invoke(
            'POST', '/system/console/configMgr/com.day.cq.auth.impl.LoginSelectorHandler', '',
            query, form,
            new Map<String, Object>(),
            new Map<String, Object>(),
            new List<String>{ 'application/json', 'text/plain' },
            new List<String>(),
            new List<String> { 'aemAuth' },
            OASComDayCqAuthImplLoginSelectorHand.class
        );
    }
    /**
     * 
     * 
     * @param post  (optional)
     * @param apply  (optional)
     * @param r_delete  (optional)
     * @param action  (optional)
     * @param location  (optional)
     * @param propertylist  (optional)
     * @param externalizerDomains  (optional)
     * @param externalizerHost  (optional)
     * @param externalizerContextpath  (optional)
     * @param externalizerEncodedpath  (optional)
     * @return OASComDayCqCommonsImplExternalizerIm
     * @throws OAS.ApiException if fails to make API call
     */
    public OASComDayCqCommonsImplExternalizerIm comDayCqCommonsImplExternalizerImpl(Map<String, Object> params) {
        List<OAS.Param> query = new List<OAS.Param>();

        // cast query params to verify their expected type
        query.addAll(client.makeParam('post', (Boolean) params.get('post')));
        query.addAll(client.makeParam('apply', (Boolean) params.get('apply')));
        query.addAll(client.makeParam('delete', (Boolean) params.get('r_delete')));
        query.addAll(client.makeParam('action', (String) params.get('action')));
        query.addAll(client.makeParam('$location', (String) params.get('location')));
        query.addAll(client.makeParam('propertylist', (List<String>) params.get('propertylist'), 'csv'));
        query.addAll(client.makeParams('externalizer.domains', (List<String>) params.get('externalizerDomains')));
        query.addAll(client.makeParam('externalizer.host', (String) params.get('externalizerHost')));
        query.addAll(client.makeParam('externalizer.contextpath', (String) params.get('externalizerContextpath')));
        query.addAll(client.makeParam('externalizer.encodedpath', (Boolean) params.get('externalizerEncodedpath')));

        List<OAS.Param> form = new List<OAS.Param>();

        return (OASComDayCqCommonsImplExternalizerIm) client.invoke(
            'POST', '/system/console/configMgr/com.day.cq.commons.impl.ExternalizerImpl', '',
            query, form,
            new Map<String, Object>(),
            new Map<String, Object>(),
            new List<String>{ 'application/json', 'text/plain' },
            new List<String>(),
            new List<String> { 'aemAuth' },
            OASComDayCqCommonsImplExternalizerIm.class
        );
    }
    /**
     * 
     * 
     * @param post  (optional)
     * @param apply  (optional)
     * @param r_delete  (optional)
     * @param action  (optional)
     * @param location  (optional)
     * @param propertylist  (optional)
     * @param rootmappingTarget  (optional)
     * @return OASComDayCqCommonsServletsRootMappin
     * @throws OAS.ApiException if fails to make API call
     */
    public OASComDayCqCommonsServletsRootMappin comDayCqCommonsServletsRootMappingServlet(Map<String, Object> params) {
        List<OAS.Param> query = new List<OAS.Param>();

        // cast query params to verify their expected type
        query.addAll(client.makeParam('post', (Boolean) params.get('post')));
        query.addAll(client.makeParam('apply', (Boolean) params.get('apply')));
        query.addAll(client.makeParam('delete', (Boolean) params.get('r_delete')));
        query.addAll(client.makeParam('action', (String) params.get('action')));
        query.addAll(client.makeParam('$location', (String) params.get('location')));
        query.addAll(client.makeParam('propertylist', (List<String>) params.get('propertylist'), 'csv'));
        query.addAll(client.makeParam('rootmapping.target', (String) params.get('rootmappingTarget')));

        List<OAS.Param> form = new List<OAS.Param>();

        return (OASComDayCqCommonsServletsRootMappin) client.invoke(
            'POST', '/system/console/configMgr/com.day.cq.commons.servlets.RootMappingServlet', '',
            query, form,
            new Map<String, Object>(),
            new Map<String, Object>(),
            new List<String>{ 'application/json', 'text/plain' },
            new List<String>(),
            new List<String> { 'aemAuth' },
            OASComDayCqCommonsServletsRootMappin.class
        );
    }
    /**
     * 
     * 
     * @param post  (optional)
     * @param apply  (optional)
     * @param r_delete  (optional)
     * @param action  (optional)
     * @param location  (optional)
     * @param propertylist  (optional)
     * @param codeupgradetasks  (optional)
     * @param codeupgradetaskfilters  (optional)
     * @return OASComDayCqCompatCodeupgradeImplCode
     * @throws OAS.ApiException if fails to make API call
     */
    public OASComDayCqCompatCodeupgradeImplCode comDayCqCompatCodeupgradeImplCodeUpgradeExecutionConditionChecke(Map<String, Object> params) {
        List<OAS.Param> query = new List<OAS.Param>();

        // cast query params to verify their expected type
        query.addAll(client.makeParam('post', (Boolean) params.get('post')));
        query.addAll(client.makeParam('apply', (Boolean) params.get('apply')));
        query.addAll(client.makeParam('delete', (Boolean) params.get('r_delete')));
        query.addAll(client.makeParam('action', (String) params.get('action')));
        query.addAll(client.makeParam('$location', (String) params.get('location')));
        query.addAll(client.makeParam('propertylist', (List<String>) params.get('propertylist'), 'csv'));
        query.addAll(client.makeParams('codeupgradetasks', (List<String>) params.get('codeupgradetasks')));
        query.addAll(client.makeParams('codeupgradetaskfilters', (List<String>) params.get('codeupgradetaskfilters')));

        List<OAS.Param> form = new List<OAS.Param>();

        return (OASComDayCqCompatCodeupgradeImplCode) client.invoke(
            'POST', '/system/console/configMgr/com.day.cq.compat.codeupgrade.impl.CodeUpgradeExecutionConditionChecker', '',
            query, form,
            new Map<String, Object>(),
            new Map<String, Object>(),
            new List<String>{ 'application/json', 'text/plain' },
            new List<String>(),
            new List<String> { 'aemAuth' },
            OASComDayCqCompatCodeupgradeImplCode.class
        );
    }
    /**
     * 
     * 
     * @param post  (optional)
     * @param apply  (optional)
     * @param r_delete  (optional)
     * @param action  (optional)
     * @param location  (optional)
     * @param propertylist  (optional)
     * @param upgradeTaskIgnoreList  (optional)
     * @return OASComDayCqCompatCodeupgradeImplUpgr
     * @throws OAS.ApiException if fails to make API call
     */
    public OASComDayCqCompatCodeupgradeImplUpgr comDayCqCompatCodeupgradeImplUpgradeTaskIgnoreList(Map<String, Object> params) {
        List<OAS.Param> query = new List<OAS.Param>();

        // cast query params to verify their expected type
        query.addAll(client.makeParam('post', (Boolean) params.get('post')));
        query.addAll(client.makeParam('apply', (Boolean) params.get('apply')));
        query.addAll(client.makeParam('delete', (Boolean) params.get('r_delete')));
        query.addAll(client.makeParam('action', (String) params.get('action')));
        query.addAll(client.makeParam('$location', (String) params.get('location')));
        query.addAll(client.makeParam('propertylist', (List<String>) params.get('propertylist'), 'csv'));
        query.addAll(client.makeParams('upgradeTaskIgnoreList', (List<String>) params.get('upgradeTaskIgnoreList')));

        List<OAS.Param> form = new List<OAS.Param>();

        return (OASComDayCqCompatCodeupgradeImplUpgr) client.invoke(
            'POST', '/system/console/configMgr/com.day.cq.compat.codeupgrade.impl.UpgradeTaskIgnoreList', '',
            query, form,
            new Map<String, Object>(),
            new Map<String, Object>(),
            new List<String>{ 'application/json', 'text/plain' },
            new List<String>(),
            new List<String> { 'aemAuth' },
            OASComDayCqCompatCodeupgradeImplUpgr.class
        );
    }
    /**
     * 
     * 
     * @param post  (optional)
     * @param apply  (optional)
     * @param r_delete  (optional)
     * @param action  (optional)
     * @param location  (optional)
     * @param propertylist  (optional)
     * @param effectiveBundleListPath  (optional)
     * @return OASComDayCqCompatCodeupgradeImplVers
     * @throws OAS.ApiException if fails to make API call
     */
    public OASComDayCqCompatCodeupgradeImplVers comDayCqCompatCodeupgradeImplVersionRangeTaskIgnorelist(Map<String, Object> params) {
        List<OAS.Param> query = new List<OAS.Param>();

        // cast query params to verify their expected type
        query.addAll(client.makeParam('post', (Boolean) params.get('post')));
        query.addAll(client.makeParam('apply', (Boolean) params.get('apply')));
        query.addAll(client.makeParam('delete', (Boolean) params.get('r_delete')));
        query.addAll(client.makeParam('action', (String) params.get('action')));
        query.addAll(client.makeParam('$location', (String) params.get('location')));
        query.addAll(client.makeParam('propertylist', (List<String>) params.get('propertylist'), 'csv'));
        query.addAll(client.makeParam('effectiveBundleListPath', (String) params.get('effectiveBundleListPath')));

        List<OAS.Param> form = new List<OAS.Param>();

        return (OASComDayCqCompatCodeupgradeImplVers) client.invoke(
            'POST', '/system/console/configMgr/com.day.cq.compat.codeupgrade.impl.VersionRangeTaskIgnorelist', '',
            query, form,
            new Map<String, Object>(),
            new Map<String, Object>(),
            new List<String>{ 'application/json', 'text/plain' },
            new List<String>(),
            new List<String> { 'aemAuth' },
            OASComDayCqCompatCodeupgradeImplVers.class
        );
    }
    /**
     * 
     * 
     * @param post  (optional)
     * @param apply  (optional)
     * @param r_delete  (optional)
     * @param action  (optional)
     * @param location  (optional)
     * @param propertylist  (optional)
     * @param contentsyncFallbackAuthorizable  (optional)
     * @param contentsyncFallbackUpdateuser  (optional)
     * @return OASComDayCqContentsyncImplContentSyn
     * @throws OAS.ApiException if fails to make API call
     */
    public OASComDayCqContentsyncImplContentSyn comDayCqContentsyncImplContentSyncManagerImpl(Map<String, Object> params) {
        List<OAS.Param> query = new List<OAS.Param>();

        // cast query params to verify their expected type
        query.addAll(client.makeParam('post', (Boolean) params.get('post')));
        query.addAll(client.makeParam('apply', (Boolean) params.get('apply')));
        query.addAll(client.makeParam('delete', (Boolean) params.get('r_delete')));
        query.addAll(client.makeParam('action', (String) params.get('action')));
        query.addAll(client.makeParam('$location', (String) params.get('location')));
        query.addAll(client.makeParam('propertylist', (List<String>) params.get('propertylist'), 'csv'));
        query.addAll(client.makeParam('contentsync.fallback.authorizable', (String) params.get('contentsyncFallbackAuthorizable')));
        query.addAll(client.makeParam('contentsync.fallback.updateuser', (String) params.get('contentsyncFallbackUpdateuser')));

        List<OAS.Param> form = new List<OAS.Param>();

        return (OASComDayCqContentsyncImplContentSyn) client.invoke(
            'POST', '/system/console/configMgr/com.day.cq.contentsync.impl.ContentSyncManagerImpl', '',
            query, form,
            new Map<String, Object>(),
            new Map<String, Object>(),
            new List<String>{ 'application/json', 'text/plain' },
            new List<String>(),
            new List<String> { 'aemAuth' },
            OASComDayCqContentsyncImplContentSyn.class
        );
    }
    /**
     * 
     * 
     * @param post  (optional)
     * @param apply  (optional)
     * @param r_delete  (optional)
     * @param action  (optional)
     * @param location  (optional)
     * @param propertylist  (optional)
     * @param largeFileThreshold  (optional)
     * @param largeCommentThreshold  (optional)
     * @param cqDamEnableExtMetaExtraction  (optional)
     * @return OASComDayCqDamCommonsHandlerStandard
     * @throws OAS.ApiException if fails to make API call
     */
    public OASComDayCqDamCommonsHandlerStandard comDayCqDamCommonsHandlerStandardImageHandler(Map<String, Object> params) {
        List<OAS.Param> query = new List<OAS.Param>();

        // cast query params to verify their expected type
        query.addAll(client.makeParam('post', (Boolean) params.get('post')));
        query.addAll(client.makeParam('apply', (Boolean) params.get('apply')));
        query.addAll(client.makeParam('delete', (Boolean) params.get('r_delete')));
        query.addAll(client.makeParam('action', (String) params.get('action')));
        query.addAll(client.makeParam('$location', (String) params.get('location')));
        query.addAll(client.makeParam('propertylist', (List<String>) params.get('propertylist'), 'csv'));
        query.addAll(client.makeParam('large_file_threshold', (Integer) params.get('largeFileThreshold')));
        query.addAll(client.makeParam('large_comment_threshold', (Integer) params.get('largeCommentThreshold')));
        query.addAll(client.makeParam('cq.dam.enable.ext.meta.extraction', (Boolean) params.get('cqDamEnableExtMetaExtraction')));

        List<OAS.Param> form = new List<OAS.Param>();

        return (OASComDayCqDamCommonsHandlerStandard) client.invoke(
            'POST', '/system/console/configMgr/com.day.cq.dam.commons.handler.StandardImageHandler', '',
            query, form,
            new Map<String, Object>(),
            new Map<String, Object>(),
            new List<String>{ 'application/json', 'text/plain' },
            new List<String>(),
            new List<String> { 'aemAuth' },
            OASComDayCqDamCommonsHandlerStandard.class
        );
    }
    /**
     * 
     * 
     * @param post  (optional)
     * @param apply  (optional)
     * @param r_delete  (optional)
     * @param action  (optional)
     * @param location  (optional)
     * @param propertylist  (optional)
     * @param xmpFilterApplyWhitelist  (optional)
     * @param xmpFilterWhitelist  (optional)
     * @param xmpFilterApplyBlacklist  (optional)
     * @param xmpFilterBlacklist  (optional)
     * @return OASComDayCqDamCommonsMetadataXmpFilt
     * @throws OAS.ApiException if fails to make API call
     */
    public OASComDayCqDamCommonsMetadataXmpFilt comDayCqDamCommonsMetadataXmpFilterBlackWhite(Map<String, Object> params) {
        List<OAS.Param> query = new List<OAS.Param>();

        // cast query params to verify their expected type
        query.addAll(client.makeParam('post', (Boolean) params.get('post')));
        query.addAll(client.makeParam('apply', (Boolean) params.get('apply')));
        query.addAll(client.makeParam('delete', (Boolean) params.get('r_delete')));
        query.addAll(client.makeParam('action', (String) params.get('action')));
        query.addAll(client.makeParam('$location', (String) params.get('location')));
        query.addAll(client.makeParam('propertylist', (List<String>) params.get('propertylist'), 'csv'));
        query.addAll(client.makeParam('xmp.filter.apply_whitelist', (Boolean) params.get('xmpFilterApplyWhitelist')));
        query.addAll(client.makeParams('xmp.filter.whitelist', (List<String>) params.get('xmpFilterWhitelist')));
        query.addAll(client.makeParam('xmp.filter.apply_blacklist', (Boolean) params.get('xmpFilterApplyBlacklist')));
        query.addAll(client.makeParams('xmp.filter.blacklist', (List<String>) params.get('xmpFilterBlacklist')));

        List<OAS.Param> form = new List<OAS.Param>();

        return (OASComDayCqDamCommonsMetadataXmpFilt) client.invoke(
            'POST', '/system/console/configMgr/com.day.cq.dam.commons.metadata.XmpFilterBlackWhite', '',
            query, form,
            new Map<String, Object>(),
            new Map<String, Object>(),
            new List<String>{ 'application/json', 'text/plain' },
            new List<String>(),
            new List<String> { 'aemAuth' },
            OASComDayCqDamCommonsMetadataXmpFilt.class
        );
    }
    /**
     * 
     * 
     * @param post  (optional)
     * @param apply  (optional)
     * @param r_delete  (optional)
     * @param action  (optional)
     * @param location  (optional)
     * @param propertylist  (optional)
     * @param largeFileMin  (optional)
     * @param cacheApply  (optional)
     * @param mimeTypes  (optional)
     * @return OASComDayCqDamCommonsUtilImplAssetCa
     * @throws OAS.ApiException if fails to make API call
     */
    public OASComDayCqDamCommonsUtilImplAssetCa comDayCqDamCommonsUtilImplAssetCacheImpl(Map<String, Object> params) {
        List<OAS.Param> query = new List<OAS.Param>();

        // cast query params to verify their expected type
        query.addAll(client.makeParam('post', (Boolean) params.get('post')));
        query.addAll(client.makeParam('apply', (Boolean) params.get('apply')));
        query.addAll(client.makeParam('delete', (Boolean) params.get('r_delete')));
        query.addAll(client.makeParam('action', (String) params.get('action')));
        query.addAll(client.makeParam('$location', (String) params.get('location')));
        query.addAll(client.makeParam('propertylist', (List<String>) params.get('propertylist'), 'csv'));
        query.addAll(client.makeParam('large.file.min', (Integer) params.get('largeFileMin')));
        query.addAll(client.makeParam('cache.apply', (Boolean) params.get('cacheApply')));
        query.addAll(client.makeParams('mime.types', (List<String>) params.get('mimeTypes')));

        List<OAS.Param> form = new List<OAS.Param>();

        return (OASComDayCqDamCommonsUtilImplAssetCa) client.invoke(
            'POST', '/system/console/configMgr/com.day.cq.dam.commons.util.impl.AssetCacheImpl', '',
            query, form,
            new Map<String, Object>(),
            new Map<String, Object>(),
            new List<String>{ 'application/json', 'text/plain' },
            new List<String>(),
            new List<String> { 'aemAuth' },
            OASComDayCqDamCommonsUtilImplAssetCa.class
        );
    }
    /**
     * 
     * 
     * @param post  (optional)
     * @param apply  (optional)
     * @param r_delete  (optional)
     * @param action  (optional)
     * @param location  (optional)
     * @param propertylist  (optional)
     * @param cqDamConfigAnnotationPdfDocumentWidth  (optional)
     * @param cqDamConfigAnnotationPdfDocumentHeight  (optional)
     * @param cqDamConfigAnnotationPdfDocumentPaddingHorizontal  (optional)
     * @param cqDamConfigAnnotationPdfDocumentPaddingVertical  (optional)
     * @param cqDamConfigAnnotationPdfFontSize  (optional)
     * @param cqDamConfigAnnotationPdfFontColor  (optional)
     * @param cqDamConfigAnnotationPdfFontFamily  (optional)
     * @param cqDamConfigAnnotationPdfFontLight  (optional)
     * @param cqDamConfigAnnotationPdfMarginTextImage  (optional)
     * @param cqDamConfigAnnotationPdfMinImageHeight  (optional)
     * @param cqDamConfigAnnotationPdfReviewStatusWidth  (optional)
     * @param cqDamConfigAnnotationPdfReviewStatusColorApproved  (optional)
     * @param cqDamConfigAnnotationPdfReviewStatusColorRejected  (optional)
     * @param cqDamConfigAnnotationPdfReviewStatusColorChangesRequested  (optional)
     * @param cqDamConfigAnnotationPdfAnnotationMarkerWidth  (optional)
     * @param cqDamConfigAnnotationPdfAssetMinheight  (optional)
     * @return OASComDayCqDamCoreImplAnnotationPdfA
     * @throws OAS.ApiException if fails to make API call
     */
    public OASComDayCqDamCoreImplAnnotationPdfA comDayCqDamCoreImplAnnotationPdfAnnotationPdfConfig(Map<String, Object> params) {
        List<OAS.Param> query = new List<OAS.Param>();

        // cast query params to verify their expected type
        query.addAll(client.makeParam('post', (Boolean) params.get('post')));
        query.addAll(client.makeParam('apply', (Boolean) params.get('apply')));
        query.addAll(client.makeParam('delete', (Boolean) params.get('r_delete')));
        query.addAll(client.makeParam('action', (String) params.get('action')));
        query.addAll(client.makeParam('$location', (String) params.get('location')));
        query.addAll(client.makeParam('propertylist', (List<String>) params.get('propertylist'), 'csv'));
        query.addAll(client.makeParam('cq.dam.config.annotation.pdf.document.width', (Integer) params.get('cqDamConfigAnnotationPdfDocumentWidth')));
        query.addAll(client.makeParam('cq.dam.config.annotation.pdf.document.height', (Integer) params.get('cqDamConfigAnnotationPdfDocumentHeight')));
        query.addAll(client.makeParam('cq.dam.config.annotation.pdf.document.padding.horizontal', (Integer) params.get('cqDamConfigAnnotationPdfDocumentPaddingHorizontal')));
        query.addAll(client.makeParam('cq.dam.config.annotation.pdf.document.padding.vertical', (Integer) params.get('cqDamConfigAnnotationPdfDocumentPaddingVertical')));
        query.addAll(client.makeParam('cq.dam.config.annotation.pdf.font.size', (Integer) params.get('cqDamConfigAnnotationPdfFontSize')));
        query.addAll(client.makeParam('cq.dam.config.annotation.pdf.font.color', (String) params.get('cqDamConfigAnnotationPdfFontColor')));
        query.addAll(client.makeParam('cq.dam.config.annotation.pdf.font.family', (String) params.get('cqDamConfigAnnotationPdfFontFamily')));
        query.addAll(client.makeParam('cq.dam.config.annotation.pdf.font.light', (String) params.get('cqDamConfigAnnotationPdfFontLight')));
        query.addAll(client.makeParam('cq.dam.config.annotation.pdf.marginTextImage', (Integer) params.get('cqDamConfigAnnotationPdfMarginTextImage')));
        query.addAll(client.makeParam('cq.dam.config.annotation.pdf.minImageHeight', (Integer) params.get('cqDamConfigAnnotationPdfMinImageHeight')));
        query.addAll(client.makeParam('cq.dam.config.annotation.pdf.reviewStatus.width', (Integer) params.get('cqDamConfigAnnotationPdfReviewStatusWidth')));
        query.addAll(client.makeParam('cq.dam.config.annotation.pdf.reviewStatus.color.approved', (String) params.get('cqDamConfigAnnotationPdfReviewStatusColorApproved')));
        query.addAll(client.makeParam('cq.dam.config.annotation.pdf.reviewStatus.color.rejected', (String) params.get('cqDamConfigAnnotationPdfReviewStatusColorRejected')));
        query.addAll(client.makeParam('cq.dam.config.annotation.pdf.reviewStatus.color.changesRequested', (String) params.get('cqDamConfigAnnotationPdfReviewStatusColorChangesRequested')));
        query.addAll(client.makeParam('cq.dam.config.annotation.pdf.annotationMarker.width', (Integer) params.get('cqDamConfigAnnotationPdfAnnotationMarkerWidth')));
        query.addAll(client.makeParam('cq.dam.config.annotation.pdf.asset.minheight', (Integer) params.get('cqDamConfigAnnotationPdfAssetMinheight')));

        List<OAS.Param> form = new List<OAS.Param>();

        return (OASComDayCqDamCoreImplAnnotationPdfA) client.invoke(
            'POST', '/system/console/configMgr/com.day.cq.dam.core.impl.annotation.pdf.AnnotationPdfConfig', '',
            query, form,
            new Map<String, Object>(),
            new Map<String, Object>(),
            new List<String>{ 'application/json', 'text/plain' },
            new List<String>(),
            new List<String> { 'aemAuth' },
            OASComDayCqDamCoreImplAnnotationPdfA.class
        );
    }
    /**
     * 
     * 
     * @param post  (optional)
     * @param apply  (optional)
     * @param r_delete  (optional)
     * @param action  (optional)
     * @param location  (optional)
     * @param propertylist  (optional)
     * @param enabled  (optional)
     * @return OASComDayCqDamCoreImplAssetMoveListe
     * @throws OAS.ApiException if fails to make API call
     */
    public OASComDayCqDamCoreImplAssetMoveListe comDayCqDamCoreImplAssetMoveListener(Map<String, Object> params) {
        List<OAS.Param> query = new List<OAS.Param>();

        // cast query params to verify their expected type
        query.addAll(client.makeParam('post', (Boolean) params.get('post')));
        query.addAll(client.makeParam('apply', (Boolean) params.get('apply')));
        query.addAll(client.makeParam('delete', (Boolean) params.get('r_delete')));
        query.addAll(client.makeParam('action', (String) params.get('action')));
        query.addAll(client.makeParam('$location', (String) params.get('location')));
        query.addAll(client.makeParam('propertylist', (List<String>) params.get('propertylist'), 'csv'));
        query.addAll(client.makeParam('enabled', (Boolean) params.get('enabled')));

        List<OAS.Param> form = new List<OAS.Param>();

        return (OASComDayCqDamCoreImplAssetMoveListe) client.invoke(
            'POST', '/system/console/configMgr/com.day.cq.dam.core.impl.AssetMoveListener', '',
            query, form,
            new Map<String, Object>(),
            new Map<String, Object>(),
            new List<String>{ 'application/json', 'text/plain' },
            new List<String>(),
            new List<String> { 'aemAuth' },
            OASComDayCqDamCoreImplAssetMoveListe.class
        );
    }
    /**
     * 
     * 
     * @param post  (optional)
     * @param apply  (optional)
     * @param r_delete  (optional)
     * @param action  (optional)
     * @param location  (optional)
     * @param propertylist  (optional)
     * @param isEnabled  (optional)
     * @return OASComDayCqDamCoreImplAssethomeAsset
     * @throws OAS.ApiException if fails to make API call
     */
    public OASComDayCqDamCoreImplAssethomeAsset comDayCqDamCoreImplAssethomeAssetHomePageConfiguration(Map<String, Object> params) {
        List<OAS.Param> query = new List<OAS.Param>();

        // cast query params to verify their expected type
        query.addAll(client.makeParam('post', (Boolean) params.get('post')));
        query.addAll(client.makeParam('apply', (Boolean) params.get('apply')));
        query.addAll(client.makeParam('delete', (Boolean) params.get('r_delete')));
        query.addAll(client.makeParam('action', (String) params.get('action')));
        query.addAll(client.makeParam('$location', (String) params.get('location')));
        query.addAll(client.makeParam('propertylist', (List<String>) params.get('propertylist'), 'csv'));
        query.addAll(client.makeParam('isEnabled', (Boolean) params.get('isEnabled')));

        List<OAS.Param> form = new List<OAS.Param>();

        return (OASComDayCqDamCoreImplAssethomeAsset) client.invoke(
            'POST', '/system/console/configMgr/com.day.cq.dam.core.impl.assethome.AssetHomePageConfiguration', '',
            query, form,
            new Map<String, Object>(),
            new Map<String, Object>(),
            new List<String>{ 'application/json', 'text/plain' },
            new List<String>(),
            new List<String> { 'aemAuth' },
            OASComDayCqDamCoreImplAssethomeAsset.class
        );
    }
    /**
     * 
     * 
     * @param post  (optional)
     * @param apply  (optional)
     * @param r_delete  (optional)
     * @param action  (optional)
     * @param location  (optional)
     * @param propertylist  (optional)
     * @param cqDamAdhocAssetSharePrezipMaxcontentsize  (optional)
     * @return OASComDayCqDamCoreImplAssetlinkshare
     * @throws OAS.ApiException if fails to make API call
     */
    public OASComDayCqDamCoreImplAssetlinkshare comDayCqDamCoreImplAssetlinkshareAdhocAssetShareProxyServlet(Map<String, Object> params) {
        List<OAS.Param> query = new List<OAS.Param>();

        // cast query params to verify their expected type
        query.addAll(client.makeParam('post', (Boolean) params.get('post')));
        query.addAll(client.makeParam('apply', (Boolean) params.get('apply')));
        query.addAll(client.makeParam('delete', (Boolean) params.get('r_delete')));
        query.addAll(client.makeParam('action', (String) params.get('action')));
        query.addAll(client.makeParam('$location', (String) params.get('location')));
        query.addAll(client.makeParam('propertylist', (List<String>) params.get('propertylist'), 'csv'));
        query.addAll(client.makeParam('cq.dam.adhoc.asset.share.prezip.maxcontentsize', (Integer) params.get('cqDamAdhocAssetSharePrezipMaxcontentsize')));

        List<OAS.Param> form = new List<OAS.Param>();

        return (OASComDayCqDamCoreImplAssetlinkshare) client.invoke(
            'POST', '/system/console/configMgr/com.day.cq.dam.core.impl.assetlinkshare.AdhocAssetShareProxyServlet', '',
            query, form,
            new Map<String, Object>(),
            new Map<String, Object>(),
            new List<String>{ 'application/json', 'text/plain' },
            new List<String>(),
            new List<String> { 'aemAuth' },
            OASComDayCqDamCoreImplAssetlinkshare.class
        );
    }
    /**
     * 
     * 
     * @param post  (optional)
     * @param apply  (optional)
     * @param r_delete  (optional)
     * @param action  (optional)
     * @param location  (optional)
     * @param propertylist  (optional)
     * @param cqDamImageCacheMaxMemory  (optional)
     * @param cqDamImageCacheMaxAge  (optional)
     * @param cqDamImageCacheMaxDimension  (optional)
     * @return OASComDayCqDamCoreImplCacheCQBuffere
     * @throws OAS.ApiException if fails to make API call
     */
    public OASComDayCqDamCoreImplCacheCQBuffere comDayCqDamCoreImplCacheCQBufferedImageCache(Map<String, Object> params) {
        List<OAS.Param> query = new List<OAS.Param>();

        // cast query params to verify their expected type
        query.addAll(client.makeParam('post', (Boolean) params.get('post')));
        query.addAll(client.makeParam('apply', (Boolean) params.get('apply')));
        query.addAll(client.makeParam('delete', (Boolean) params.get('r_delete')));
        query.addAll(client.makeParam('action', (String) params.get('action')));
        query.addAll(client.makeParam('$location', (String) params.get('location')));
        query.addAll(client.makeParam('propertylist', (List<String>) params.get('propertylist'), 'csv'));
        query.addAll(client.makeParam('cq.dam.image.cache.max.memory', (Integer) params.get('cqDamImageCacheMaxMemory')));
        query.addAll(client.makeParam('cq.dam.image.cache.max.age', (Integer) params.get('cqDamImageCacheMaxAge')));
        query.addAll(client.makeParam('cq.dam.image.cache.max.dimension', (String) params.get('cqDamImageCacheMaxDimension')));

        List<OAS.Param> form = new List<OAS.Param>();

        return (OASComDayCqDamCoreImplCacheCQBuffere) client.invoke(
            'POST', '/system/console/configMgr/com.day.cq.dam.core.impl.cache.CQBufferedImageCache', '',
            query, form,
            new Map<String, Object>(),
            new Map<String, Object>(),
            new List<String>{ 'application/json', 'text/plain' },
            new List<String>(),
            new List<String> { 'aemAuth' },
            OASComDayCqDamCoreImplCacheCQBuffere.class
        );
    }
    /**
     * 
     * 
     * @param post  (optional)
     * @param apply  (optional)
     * @param r_delete  (optional)
     * @param action  (optional)
     * @param location  (optional)
     * @param propertylist  (optional)
     * @param changeeventlistenerObservedPaths  (optional)
     * @return OASComDayCqDamCoreImplDamChangeEvent
     * @throws OAS.ApiException if fails to make API call
     */
    public OASComDayCqDamCoreImplDamChangeEvent comDayCqDamCoreImplDamChangeEventListener(Map<String, Object> params) {
        List<OAS.Param> query = new List<OAS.Param>();

        // cast query params to verify their expected type
        query.addAll(client.makeParam('post', (Boolean) params.get('post')));
        query.addAll(client.makeParam('apply', (Boolean) params.get('apply')));
        query.addAll(client.makeParam('delete', (Boolean) params.get('r_delete')));
        query.addAll(client.makeParam('action', (String) params.get('action')));
        query.addAll(client.makeParam('$location', (String) params.get('location')));
        query.addAll(client.makeParam('propertylist', (List<String>) params.get('propertylist'), 'csv'));
        query.addAll(client.makeParams('changeeventlistener.observed.paths', (List<String>) params.get('changeeventlistenerObservedPaths')));

        List<OAS.Param> form = new List<OAS.Param>();

        return (OASComDayCqDamCoreImplDamChangeEvent) client.invoke(
            'POST', '/system/console/configMgr/com.day.cq.dam.core.impl.DamChangeEventListener', '',
            query, form,
            new Map<String, Object>(),
            new Map<String, Object>(),
            new List<String>{ 'application/json', 'text/plain' },
            new List<String>(),
            new List<String> { 'aemAuth' },
            OASComDayCqDamCoreImplDamChangeEvent.class
        );
    }
    /**
     * 
     * 
     * @param post  (optional)
     * @param apply  (optional)
     * @param r_delete  (optional)
     * @param action  (optional)
     * @param location  (optional)
     * @param propertylist  (optional)
     * @param schedulerExpression  (optional)
     * @param maxSavedActivities  (optional)
     * @param saveInterval  (optional)
     * @param enableActivityPurge  (optional)
     * @param eventTypes  (optional)
     * @return OASComDayCqDamCoreImplDamEventPurgeS
     * @throws OAS.ApiException if fails to make API call
     */
    public OASComDayCqDamCoreImplDamEventPurgeS comDayCqDamCoreImplDamEventPurgeService(Map<String, Object> params) {
        List<OAS.Param> query = new List<OAS.Param>();

        // cast query params to verify their expected type
        query.addAll(client.makeParam('post', (Boolean) params.get('post')));
        query.addAll(client.makeParam('apply', (Boolean) params.get('apply')));
        query.addAll(client.makeParam('delete', (Boolean) params.get('r_delete')));
        query.addAll(client.makeParam('action', (String) params.get('action')));
        query.addAll(client.makeParam('$location', (String) params.get('location')));
        query.addAll(client.makeParam('propertylist', (List<String>) params.get('propertylist'), 'csv'));
        query.addAll(client.makeParam('scheduler.expression', (String) params.get('schedulerExpression')));
        query.addAll(client.makeParam('maxSavedActivities', (Integer) params.get('maxSavedActivities')));
        query.addAll(client.makeParam('saveInterval', (Integer) params.get('saveInterval')));
        query.addAll(client.makeParam('enableActivityPurge', (Boolean) params.get('enableActivityPurge')));
        query.addAll(client.makeParam('eventTypes', (String) params.get('eventTypes')));

        List<OAS.Param> form = new List<OAS.Param>();

        return (OASComDayCqDamCoreImplDamEventPurgeS) client.invoke(
            'POST', '/system/console/configMgr/com.day.cq.dam.core.impl.DamEventPurgeService', '',
            query, form,
            new Map<String, Object>(),
            new Map<String, Object>(),
            new List<String>{ 'application/json', 'text/plain' },
            new List<String>(),
            new List<String> { 'aemAuth' },
            OASComDayCqDamCoreImplDamEventPurgeS.class
        );
    }
    /**
     * 
     * 
     * @param post  (optional)
     * @param apply  (optional)
     * @param r_delete  (optional)
     * @param action  (optional)
     * @param location  (optional)
     * @param propertylist  (optional)
     * @param eventFilter  (optional)
     * @param eventQueueLength  (optional)
     * @param eventrecorderEnabled  (optional)
     * @param eventrecorderBlacklist  (optional)
     * @param eventrecorderEventtypes  (optional)
     * @return OASComDayCqDamCoreImplDamEventRecord
     * @throws OAS.ApiException if fails to make API call
     */
    public OASComDayCqDamCoreImplDamEventRecord comDayCqDamCoreImplDamEventRecorderImpl(Map<String, Object> params) {
        List<OAS.Param> query = new List<OAS.Param>();

        // cast query params to verify their expected type
        query.addAll(client.makeParam('post', (Boolean) params.get('post')));
        query.addAll(client.makeParam('apply', (Boolean) params.get('apply')));
        query.addAll(client.makeParam('delete', (Boolean) params.get('r_delete')));
        query.addAll(client.makeParam('action', (String) params.get('action')));
        query.addAll(client.makeParam('$location', (String) params.get('location')));
        query.addAll(client.makeParam('propertylist', (List<String>) params.get('propertylist'), 'csv'));
        query.addAll(client.makeParam('event.filter', (String) params.get('eventFilter')));
        query.addAll(client.makeParam('event.queue.length', (Integer) params.get('eventQueueLength')));
        query.addAll(client.makeParam('eventrecorder.enabled', (Boolean) params.get('eventrecorderEnabled')));
        query.addAll(client.makeParams('eventrecorder.blacklist', (List<String>) params.get('eventrecorderBlacklist')));
        query.addAll(client.makeParam('eventrecorder.eventtypes', (String) params.get('eventrecorderEventtypes')));

        List<OAS.Param> form = new List<OAS.Param>();

        return (OASComDayCqDamCoreImplDamEventRecord) client.invoke(
            'POST', '/system/console/configMgr/com.day.cq.dam.core.impl.DamEventRecorderImpl', '',
            query, form,
            new Map<String, Object>(),
            new Map<String, Object>(),
            new List<String>{ 'application/json', 'text/plain' },
            new List<String>(),
            new List<String> { 'aemAuth' },
            OASComDayCqDamCoreImplDamEventRecord.class
        );
    }
    /**
     * 
     * 
     * @param post  (optional)
     * @param apply  (optional)
     * @param r_delete  (optional)
     * @param action  (optional)
     * @param location  (optional)
     * @param propertylist  (optional)
     * @param eventFilter  (optional)
     * @param enabled  (optional)
     * @return OASComDayCqDamCoreImplEventDamEventA
     * @throws OAS.ApiException if fails to make API call
     */
    public OASComDayCqDamCoreImplEventDamEventA comDayCqDamCoreImplEventDamEventAuditListener(Map<String, Object> params) {
        List<OAS.Param> query = new List<OAS.Param>();

        // cast query params to verify their expected type
        query.addAll(client.makeParam('post', (Boolean) params.get('post')));
        query.addAll(client.makeParam('apply', (Boolean) params.get('apply')));
        query.addAll(client.makeParam('delete', (Boolean) params.get('r_delete')));
        query.addAll(client.makeParam('action', (String) params.get('action')));
        query.addAll(client.makeParam('$location', (String) params.get('location')));
        query.addAll(client.makeParam('propertylist', (List<String>) params.get('propertylist'), 'csv'));
        query.addAll(client.makeParam('event.filter', (String) params.get('eventFilter')));
        query.addAll(client.makeParam('enabled', (Boolean) params.get('enabled')));

        List<OAS.Param> form = new List<OAS.Param>();

        return (OASComDayCqDamCoreImplEventDamEventA) client.invoke(
            'POST', '/system/console/configMgr/com.day.cq.dam.core.impl.event.DamEventAuditListener', '',
            query, form,
            new Map<String, Object>(),
            new Map<String, Object>(),
            new List<String>{ 'application/json', 'text/plain' },
            new List<String>(),
            new List<String> { 'aemAuth' },
            OASComDayCqDamCoreImplEventDamEventA.class
        );
    }
    /**
     * 
     * 
     * @param post  (optional)
     * @param apply  (optional)
     * @param r_delete  (optional)
     * @param action  (optional)
     * @param location  (optional)
     * @param propertylist  (optional)
     * @param cqDamExpiryNotificationSchedulerIstimebased  (optional)
     * @param cqDamExpiryNotificationSchedulerTimebasedRule  (optional)
     * @param cqDamExpiryNotificationSchedulerPeriodRule  (optional)
     * @param sendEmail  (optional)
     * @param assetExpiredLimit  (optional)
     * @param priorNotificationSeconds  (optional)
     * @param cqDamExpiryNotificationUrlProtocol  (optional)
     * @return OASComDayCqDamCoreImplExpiryNotifica
     * @throws OAS.ApiException if fails to make API call
     */
    public OASComDayCqDamCoreImplExpiryNotifica comDayCqDamCoreImplExpiryNotificationJobImpl(Map<String, Object> params) {
        List<OAS.Param> query = new List<OAS.Param>();

        // cast query params to verify their expected type
        query.addAll(client.makeParam('post', (Boolean) params.get('post')));
        query.addAll(client.makeParam('apply', (Boolean) params.get('apply')));
        query.addAll(client.makeParam('delete', (Boolean) params.get('r_delete')));
        query.addAll(client.makeParam('action', (String) params.get('action')));
        query.addAll(client.makeParam('$location', (String) params.get('location')));
        query.addAll(client.makeParam('propertylist', (List<String>) params.get('propertylist'), 'csv'));
        query.addAll(client.makeParam('cq.dam.expiry.notification.scheduler.istimebased', (Boolean) params.get('cqDamExpiryNotificationSchedulerIstimebased')));
        query.addAll(client.makeParam('cq.dam.expiry.notification.scheduler.timebased.rule', (String) params.get('cqDamExpiryNotificationSchedulerTimebasedRule')));
        query.addAll(client.makeParam('cq.dam.expiry.notification.scheduler.period.rule', (Integer) params.get('cqDamExpiryNotificationSchedulerPeriodRule')));
        query.addAll(client.makeParam('send_email', (Boolean) params.get('sendEmail')));
        query.addAll(client.makeParam('asset_expired_limit', (Integer) params.get('assetExpiredLimit')));
        query.addAll(client.makeParam('prior_notification_seconds', (Integer) params.get('priorNotificationSeconds')));
        query.addAll(client.makeParam('cq.dam.expiry.notification.url.protocol', (String) params.get('cqDamExpiryNotificationUrlProtocol')));

        List<OAS.Param> form = new List<OAS.Param>();

        return (OASComDayCqDamCoreImplExpiryNotifica) client.invoke(
            'POST', '/system/console/configMgr/com.day.cq.dam.core.impl.ExpiryNotificationJobImpl', '',
            query, form,
            new Map<String, Object>(),
            new Map<String, Object>(),
            new List<String>{ 'application/json', 'text/plain' },
            new List<String>(),
            new List<String> { 'aemAuth' },
            OASComDayCqDamCoreImplExpiryNotifica.class
        );
    }
    /**
     * 
     * 
     * @param post  (optional)
     * @param apply  (optional)
     * @param r_delete  (optional)
     * @param action  (optional)
     * @param location  (optional)
     * @param propertylist  (optional)
     * @param isEnabled  (optional)
     * @return OASComDayCqDamCoreImplFoldermetadata
     * @throws OAS.ApiException if fails to make API call
     */
    public OASComDayCqDamCoreImplFoldermetadata comDayCqDamCoreImplFoldermetadataschemaFolderMetadataSchemaFeat(Map<String, Object> params) {
        List<OAS.Param> query = new List<OAS.Param>();

        // cast query params to verify their expected type
        query.addAll(client.makeParam('post', (Boolean) params.get('post')));
        query.addAll(client.makeParam('apply', (Boolean) params.get('apply')));
        query.addAll(client.makeParam('delete', (Boolean) params.get('r_delete')));
        query.addAll(client.makeParam('action', (String) params.get('action')));
        query.addAll(client.makeParam('$location', (String) params.get('location')));
        query.addAll(client.makeParam('propertylist', (List<String>) params.get('propertylist'), 'csv'));
        query.addAll(client.makeParam('isEnabled', (Boolean) params.get('isEnabled')));

        List<OAS.Param> form = new List<OAS.Param>();

        return (OASComDayCqDamCoreImplFoldermetadata) client.invoke(
            'POST', '/system/console/configMgr/com.day.cq.dam.core.impl.foldermetadataschema.FolderMetadataSchemaFeatureFlag', '',
            query, form,
            new Map<String, Object>(),
            new Map<String, Object>(),
            new List<String>{ 'application/json', 'text/plain' },
            new List<String>(),
            new List<String> { 'aemAuth' },
            OASComDayCqDamCoreImplFoldermetadata.class
        );
    }
    /**
     * 
     * 
     * @param post  (optional)
     * @param apply  (optional)
     * @param r_delete  (optional)
     * @param action  (optional)
     * @param location  (optional)
     * @param propertylist  (optional)
     * @param skipBufferedcache  (optional)
     * @return OASComDayCqDamCoreImplGfxCommonsGfxR
     * @throws OAS.ApiException if fails to make API call
     */
    public OASComDayCqDamCoreImplGfxCommonsGfxR comDayCqDamCoreImplGfxCommonsGfxRenderer(Map<String, Object> params) {
        List<OAS.Param> query = new List<OAS.Param>();

        // cast query params to verify their expected type
        query.addAll(client.makeParam('post', (Boolean) params.get('post')));
        query.addAll(client.makeParam('apply', (Boolean) params.get('apply')));
        query.addAll(client.makeParam('delete', (Boolean) params.get('r_delete')));
        query.addAll(client.makeParam('action', (String) params.get('action')));
        query.addAll(client.makeParam('$location', (String) params.get('location')));
        query.addAll(client.makeParam('propertylist', (List<String>) params.get('propertylist'), 'csv'));
        query.addAll(client.makeParam('skip.bufferedcache', (Boolean) params.get('skipBufferedcache')));

        List<OAS.Param> form = new List<OAS.Param>();

        return (OASComDayCqDamCoreImplGfxCommonsGfxR) client.invoke(
            'POST', '/system/console/configMgr/com.day.cq.dam.core.impl.gfx.CommonsGfxRenderer', '',
            query, form,
            new Map<String, Object>(),
            new Map<String, Object>(),
            new List<String>{ 'application/json', 'text/plain' },
            new List<String>(),
            new List<String> { 'aemAuth' },
            OASComDayCqDamCoreImplGfxCommonsGfxR.class
        );
    }
    /**
     * 
     * 
     * @param post  (optional)
     * @param apply  (optional)
     * @param r_delete  (optional)
     * @param action  (optional)
     * @param location  (optional)
     * @param propertylist  (optional)
     * @param mimetype  (optional)
     * @return OASComDayCqDamCoreImplHandlerEPSForm
     * @throws OAS.ApiException if fails to make API call
     */
    public OASComDayCqDamCoreImplHandlerEPSForm comDayCqDamCoreImplHandlerEPSFormatHandler(Map<String, Object> params) {
        List<OAS.Param> query = new List<OAS.Param>();

        // cast query params to verify their expected type
        query.addAll(client.makeParam('post', (Boolean) params.get('post')));
        query.addAll(client.makeParam('apply', (Boolean) params.get('apply')));
        query.addAll(client.makeParam('delete', (Boolean) params.get('r_delete')));
        query.addAll(client.makeParam('action', (String) params.get('action')));
        query.addAll(client.makeParam('$location', (String) params.get('location')));
        query.addAll(client.makeParam('propertylist', (List<String>) params.get('propertylist'), 'csv'));
        query.addAll(client.makeParam('mimetype', (String) params.get('mimetype')));

        List<OAS.Param> form = new List<OAS.Param>();

        return (OASComDayCqDamCoreImplHandlerEPSForm) client.invoke(
            'POST', '/system/console/configMgr/com.day.cq.dam.core.impl.handler.EPSFormatHandler', '',
            query, form,
            new Map<String, Object>(),
            new Map<String, Object>(),
            new List<String>{ 'application/json', 'text/plain' },
            new List<String>(),
            new List<String> { 'aemAuth' },
            OASComDayCqDamCoreImplHandlerEPSForm.class
        );
    }
    /**
     * 
     * 
     * @param post  (optional)
     * @param apply  (optional)
     * @param r_delete  (optional)
     * @param action  (optional)
     * @param location  (optional)
     * @param propertylist  (optional)
     * @param mimetype  (optional)
     * @return OASComDayCqDamCoreImplHandlerIndesig
     * @throws OAS.ApiException if fails to make API call
     */
    public OASComDayCqDamCoreImplHandlerIndesig comDayCqDamCoreImplHandlerIndesignFormatHandler(Map<String, Object> params) {
        List<OAS.Param> query = new List<OAS.Param>();

        // cast query params to verify their expected type
        query.addAll(client.makeParam('post', (Boolean) params.get('post')));
        query.addAll(client.makeParam('apply', (Boolean) params.get('apply')));
        query.addAll(client.makeParam('delete', (Boolean) params.get('r_delete')));
        query.addAll(client.makeParam('action', (String) params.get('action')));
        query.addAll(client.makeParam('$location', (String) params.get('location')));
        query.addAll(client.makeParam('propertylist', (List<String>) params.get('propertylist'), 'csv'));
        query.addAll(client.makeParams('mimetype', (List<String>) params.get('mimetype')));

        List<OAS.Param> form = new List<OAS.Param>();

        return (OASComDayCqDamCoreImplHandlerIndesig) client.invoke(
            'POST', '/system/console/configMgr/com.day.cq.dam.core.impl.handler.IndesignFormatHandler', '',
            query, form,
            new Map<String, Object>(),
            new Map<String, Object>(),
            new List<String>{ 'application/json', 'text/plain' },
            new List<String>(),
            new List<String> { 'aemAuth' },
            OASComDayCqDamCoreImplHandlerIndesig.class
        );
    }
    /**
     * 
     * 
     * @param post  (optional)
     * @param apply  (optional)
     * @param r_delete  (optional)
     * @param action  (optional)
     * @param location  (optional)
     * @param propertylist  (optional)
     * @param cqDamEnableExtMetaExtraction  (optional)
     * @param largeFileThreshold  (optional)
     * @param largeCommentThreshold  (optional)
     * @return OASComDayCqDamCoreImplHandlerJpegHan
     * @throws OAS.ApiException if fails to make API call
     */
    public OASComDayCqDamCoreImplHandlerJpegHan comDayCqDamCoreImplHandlerJpegHandler(Map<String, Object> params) {
        List<OAS.Param> query = new List<OAS.Param>();

        // cast query params to verify their expected type
        query.addAll(client.makeParam('post', (Boolean) params.get('post')));
        query.addAll(client.makeParam('apply', (Boolean) params.get('apply')));
        query.addAll(client.makeParam('delete', (Boolean) params.get('r_delete')));
        query.addAll(client.makeParam('action', (String) params.get('action')));
        query.addAll(client.makeParam('$location', (String) params.get('location')));
        query.addAll(client.makeParam('propertylist', (List<String>) params.get('propertylist'), 'csv'));
        query.addAll(client.makeParam('cq.dam.enable.ext.meta.extraction', (Boolean) params.get('cqDamEnableExtMetaExtraction')));
        query.addAll(client.makeParam('large_file_threshold', (Integer) params.get('largeFileThreshold')));
        query.addAll(client.makeParam('large_comment_threshold', (Integer) params.get('largeCommentThreshold')));

        List<OAS.Param> form = new List<OAS.Param>();

        return (OASComDayCqDamCoreImplHandlerJpegHan) client.invoke(
            'POST', '/system/console/configMgr/com.day.cq.dam.core.impl.handler.JpegHandler', '',
            query, form,
            new Map<String, Object>(),
            new Map<String, Object>(),
            new List<String>{ 'application/json', 'text/plain' },
            new List<String>(),
            new List<String> { 'aemAuth' },
            OASComDayCqDamCoreImplHandlerJpegHan.class
        );
    }
    /**
     * 
     * 
     * @param post  (optional)
     * @param apply  (optional)
     * @param r_delete  (optional)
     * @param action  (optional)
     * @param location  (optional)
     * @param propertylist  (optional)
     * @param xmphandlerCqFormats  (optional)
     * @return OASComDayCqDamCoreImplHandlerXmpNCom
     * @throws OAS.ApiException if fails to make API call
     */
    public OASComDayCqDamCoreImplHandlerXmpNCom comDayCqDamCoreImplHandlerXmpNCommXMPHandler(Map<String, Object> params) {
        List<OAS.Param> query = new List<OAS.Param>();

        // cast query params to verify their expected type
        query.addAll(client.makeParam('post', (Boolean) params.get('post')));
        query.addAll(client.makeParam('apply', (Boolean) params.get('apply')));
        query.addAll(client.makeParam('delete', (Boolean) params.get('r_delete')));
        query.addAll(client.makeParam('action', (String) params.get('action')));
        query.addAll(client.makeParam('$location', (String) params.get('location')));
        query.addAll(client.makeParam('propertylist', (List<String>) params.get('propertylist'), 'csv'));
        query.addAll(client.makeParams('xmphandler.cq.formats', (List<String>) params.get('xmphandlerCqFormats')));

        List<OAS.Param> form = new List<OAS.Param>();

        return (OASComDayCqDamCoreImplHandlerXmpNCom) client.invoke(
            'POST', '/system/console/configMgr/com.day.cq.dam.core.impl.handler.xmp.NCommXMPHandler', '',
            query, form,
            new Map<String, Object>(),
            new Map<String, Object>(),
            new List<String>{ 'application/json', 'text/plain' },
            new List<String>(),
            new List<String> { 'aemAuth' },
            OASComDayCqDamCoreImplHandlerXmpNCom.class
        );
    }
    /**
     * 
     * 
     * @param post  (optional)
     * @param apply  (optional)
     * @param r_delete  (optional)
     * @param action  (optional)
     * @param location  (optional)
     * @param propertylist  (optional)
     * @param jmxObjectname  (optional)
     * @param propertyMeasureEnabled  (optional)
     * @param propertyName  (optional)
     * @param propertyMaxWaitMs  (optional)
     * @param propertyMaxRate  (optional)
     * @param fulltextMeasureEnabled  (optional)
     * @param fulltextName  (optional)
     * @param fulltextMaxWaitMs  (optional)
     * @param fulltextMaxRate  (optional)
     * @return OASComDayCqDamCoreImplJmxAssetIndexU
     * @throws OAS.ApiException if fails to make API call
     */
    public OASComDayCqDamCoreImplJmxAssetIndexU comDayCqDamCoreImplJmxAssetIndexUpdateMonitor(Map<String, Object> params) {
        List<OAS.Param> query = new List<OAS.Param>();

        // cast query params to verify their expected type
        query.addAll(client.makeParam('post', (Boolean) params.get('post')));
        query.addAll(client.makeParam('apply', (Boolean) params.get('apply')));
        query.addAll(client.makeParam('delete', (Boolean) params.get('r_delete')));
        query.addAll(client.makeParam('action', (String) params.get('action')));
        query.addAll(client.makeParam('$location', (String) params.get('location')));
        query.addAll(client.makeParam('propertylist', (List<String>) params.get('propertylist'), 'csv'));
        query.addAll(client.makeParam('jmx.objectname', (String) params.get('jmxObjectname')));
        query.addAll(client.makeParam('property.measure.enabled', (Boolean) params.get('propertyMeasureEnabled')));
        query.addAll(client.makeParam('property.name', (String) params.get('propertyName')));
        query.addAll(client.makeParam('property.max.wait.ms', (Integer) params.get('propertyMaxWaitMs')));
        query.addAll(client.makeParam('property.max.rate', (Double) params.get('propertyMaxRate')));
        query.addAll(client.makeParam('fulltext.measure.enabled', (Boolean) params.get('fulltextMeasureEnabled')));
        query.addAll(client.makeParam('fulltext.name', (String) params.get('fulltextName')));
        query.addAll(client.makeParam('fulltext.max.wait.ms', (Integer) params.get('fulltextMaxWaitMs')));
        query.addAll(client.makeParam('fulltext.max.rate', (Double) params.get('fulltextMaxRate')));

        List<OAS.Param> form = new List<OAS.Param>();

        return (OASComDayCqDamCoreImplJmxAssetIndexU) client.invoke(
            'POST', '/system/console/configMgr/com.day.cq.dam.core.impl.jmx.AssetIndexUpdateMonitor', '',
            query, form,
            new Map<String, Object>(),
            new Map<String, Object>(),
            new List<String>{ 'application/json', 'text/plain' },
            new List<String>(),
            new List<String> { 'aemAuth' },
            OASComDayCqDamCoreImplJmxAssetIndexU.class
        );
    }
    /**
     * 
     * 
     * @param post  (optional)
     * @param apply  (optional)
     * @param r_delete  (optional)
     * @param action  (optional)
     * @param location  (optional)
     * @param propertylist  (optional)
     * @param jmxObjectname  (optional)
     * @return OASComDayCqDamCoreImplJmxAssetMigrat
     * @throws OAS.ApiException if fails to make API call
     */
    public OASComDayCqDamCoreImplJmxAssetMigrat comDayCqDamCoreImplJmxAssetMigrationMBeanImpl(Map<String, Object> params) {
        List<OAS.Param> query = new List<OAS.Param>();

        // cast query params to verify their expected type
        query.addAll(client.makeParam('post', (Boolean) params.get('post')));
        query.addAll(client.makeParam('apply', (Boolean) params.get('apply')));
        query.addAll(client.makeParam('delete', (Boolean) params.get('r_delete')));
        query.addAll(client.makeParam('action', (String) params.get('action')));
        query.addAll(client.makeParam('$location', (String) params.get('location')));
        query.addAll(client.makeParam('propertylist', (List<String>) params.get('propertylist'), 'csv'));
        query.addAll(client.makeParam('jmx.objectname', (String) params.get('jmxObjectname')));

        List<OAS.Param> form = new List<OAS.Param>();

        return (OASComDayCqDamCoreImplJmxAssetMigrat) client.invoke(
            'POST', '/system/console/configMgr/com.day.cq.dam.core.impl.jmx.AssetMigrationMBeanImpl', '',
            query, form,
            new Map<String, Object>(),
            new Map<String, Object>(),
            new List<String>{ 'application/json', 'text/plain' },
            new List<String>(),
            new List<String> { 'aemAuth' },
            OASComDayCqDamCoreImplJmxAssetMigrat.class
        );
    }
    /**
     * 
     * 
     * @param post  (optional)
     * @param apply  (optional)
     * @param r_delete  (optional)
     * @param action  (optional)
     * @param location  (optional)
     * @param propertylist  (optional)
     * @param jmxObjectname  (optional)
     * @param active  (optional)
     * @return OASComDayCqDamCoreImplJmxAssetUpdate
     * @throws OAS.ApiException if fails to make API call
     */
    public OASComDayCqDamCoreImplJmxAssetUpdate comDayCqDamCoreImplJmxAssetUpdateMonitorImpl(Map<String, Object> params) {
        List<OAS.Param> query = new List<OAS.Param>();

        // cast query params to verify their expected type
        query.addAll(client.makeParam('post', (Boolean) params.get('post')));
        query.addAll(client.makeParam('apply', (Boolean) params.get('apply')));
        query.addAll(client.makeParam('delete', (Boolean) params.get('r_delete')));
        query.addAll(client.makeParam('action', (String) params.get('action')));
        query.addAll(client.makeParam('$location', (String) params.get('location')));
        query.addAll(client.makeParam('propertylist', (List<String>) params.get('propertylist'), 'csv'));
        query.addAll(client.makeParam('jmx.objectname', (String) params.get('jmxObjectname')));
        query.addAll(client.makeParam('active', (Boolean) params.get('active')));

        List<OAS.Param> form = new List<OAS.Param>();

        return (OASComDayCqDamCoreImplJmxAssetUpdate) client.invoke(
            'POST', '/system/console/configMgr/com.day.cq.dam.core.impl.jmx.AssetUpdateMonitorImpl', '',
            query, form,
            new Map<String, Object>(),
            new Map<String, Object>(),
            new List<String>{ 'application/json', 'text/plain' },
            new List<String>(),
            new List<String> { 'aemAuth' },
            OASComDayCqDamCoreImplJmxAssetUpdate.class
        );
    }
    /**
     * 
     * 
     * @param post  (optional)
     * @param apply  (optional)
     * @param r_delete  (optional)
     * @param action  (optional)
     * @param location  (optional)
     * @param propertylist  (optional)
     * @param operation  (optional)
     * @param emailEnabled  (optional)
     * @return OASComDayCqDamCoreImplJobsMetadataex
     * @throws OAS.ApiException if fails to make API call
     */
    public OASComDayCqDamCoreImplJobsMetadataex comDayCqDamCoreImplJobsMetadataexportAsyncMetadataExportConfig(Map<String, Object> params) {
        List<OAS.Param> query = new List<OAS.Param>();

        // cast query params to verify their expected type
        query.addAll(client.makeParam('post', (Boolean) params.get('post')));
        query.addAll(client.makeParam('apply', (Boolean) params.get('apply')));
        query.addAll(client.makeParam('delete', (Boolean) params.get('r_delete')));
        query.addAll(client.makeParam('action', (String) params.get('action')));
        query.addAll(client.makeParam('$location', (String) params.get('location')));
        query.addAll(client.makeParam('propertylist', (List<String>) params.get('propertylist'), 'csv'));
        query.addAll(client.makeParam('operation', (String) params.get('operation')));
        query.addAll(client.makeParam('emailEnabled', (Boolean) params.get('emailEnabled')));

        List<OAS.Param> form = new List<OAS.Param>();

        return (OASComDayCqDamCoreImplJobsMetadataex) client.invoke(
            'POST', '/system/console/configMgr/com.day.cq.dam.core.impl.jobs.metadataexport.AsyncMetadataExportConfigProviderService', '',
            query, form,
            new Map<String, Object>(),
            new Map<String, Object>(),
            new List<String>{ 'application/json', 'text/plain' },
            new List<String>(),
            new List<String> { 'aemAuth' },
            OASComDayCqDamCoreImplJobsMetadataex.class
        );
    }
    /**
     * 
     * 
     * @param post  (optional)
     * @param apply  (optional)
     * @param r_delete  (optional)
     * @param action  (optional)
     * @param location  (optional)
     * @param propertylist  (optional)
     * @param operation  (optional)
     * @param operationIcon  (optional)
     * @param topicName  (optional)
     * @param emailEnabled  (optional)
     * @return OASComDayCqDamCoreImplJobsMetadataim
     * @throws OAS.ApiException if fails to make API call
     */
    public OASComDayCqDamCoreImplJobsMetadataim comDayCqDamCoreImplJobsMetadataimportAsyncMetadataImportConfig(Map<String, Object> params) {
        List<OAS.Param> query = new List<OAS.Param>();

        // cast query params to verify their expected type
        query.addAll(client.makeParam('post', (Boolean) params.get('post')));
        query.addAll(client.makeParam('apply', (Boolean) params.get('apply')));
        query.addAll(client.makeParam('delete', (Boolean) params.get('r_delete')));
        query.addAll(client.makeParam('action', (String) params.get('action')));
        query.addAll(client.makeParam('$location', (String) params.get('location')));
        query.addAll(client.makeParam('propertylist', (List<String>) params.get('propertylist'), 'csv'));
        query.addAll(client.makeParam('operation', (String) params.get('operation')));
        query.addAll(client.makeParam('operationIcon', (String) params.get('operationIcon')));
        query.addAll(client.makeParam('topicName', (String) params.get('topicName')));
        query.addAll(client.makeParam('emailEnabled', (Boolean) params.get('emailEnabled')));

        List<OAS.Param> form = new List<OAS.Param>();

        return (OASComDayCqDamCoreImplJobsMetadataim) client.invoke(
            'POST', '/system/console/configMgr/com.day.cq.dam.core.impl.jobs.metadataimport.AsyncMetadataImportConfigProviderService', '',
            query, form,
            new Map<String, Object>(),
            new Map<String, Object>(),
            new List<String>{ 'application/json', 'text/plain' },
            new List<String>(),
            new List<String> { 'aemAuth' },
            OASComDayCqDamCoreImplJobsMetadataim.class
        );
    }
    /**
     * 
     * 
     * @param post  (optional)
     * @param apply  (optional)
     * @param r_delete  (optional)
     * @param action  (optional)
     * @param location  (optional)
     * @param propertylist  (optional)
     * @param slingServletPaths  (optional)
     * @param slingServletMethods  (optional)
     * @param cqDamEnableAnonymous  (optional)
     * @return OASComDayCqDamCoreImplLightboxLightb
     * @throws OAS.ApiException if fails to make API call
     */
    public OASComDayCqDamCoreImplLightboxLightb comDayCqDamCoreImplLightboxLightboxServlet(Map<String, Object> params) {
        List<OAS.Param> query = new List<OAS.Param>();

        // cast query params to verify their expected type
        query.addAll(client.makeParam('post', (Boolean) params.get('post')));
        query.addAll(client.makeParam('apply', (Boolean) params.get('apply')));
        query.addAll(client.makeParam('delete', (Boolean) params.get('r_delete')));
        query.addAll(client.makeParam('action', (String) params.get('action')));
        query.addAll(client.makeParam('$location', (String) params.get('location')));
        query.addAll(client.makeParam('propertylist', (List<String>) params.get('propertylist'), 'csv'));
        query.addAll(client.makeParam('sling.servlet.paths', (String) params.get('slingServletPaths')));
        query.addAll(client.makeParams('sling.servlet.methods', (List<String>) params.get('slingServletMethods')));
        query.addAll(client.makeParam('cq.dam.enable.anonymous', (Boolean) params.get('cqDamEnableAnonymous')));

        List<OAS.Param> form = new List<OAS.Param>();

        return (OASComDayCqDamCoreImplLightboxLightb) client.invoke(
            'POST', '/system/console/configMgr/com.day.cq.dam.core.impl.lightbox.LightboxServlet', '',
            query, form,
            new Map<String, Object>(),
            new Map<String, Object>(),
            new List<String>{ 'application/json', 'text/plain' },
            new List<String>(),
            new List<String> { 'aemAuth' },
            OASComDayCqDamCoreImplLightboxLightb.class
        );
    }
    /**
     * 
     * 
     * @param post  (optional)
     * @param apply  (optional)
     * @param r_delete  (optional)
     * @param action  (optional)
     * @param location  (optional)
     * @param propertylist  (optional)
     * @param granitedata  (optional)
     * @return OASComDayCqDamCoreImplMetadataEditor
     * @throws OAS.ApiException if fails to make API call
     */
    public OASComDayCqDamCoreImplMetadataEditor comDayCqDamCoreImplMetadataEditorSelectComponentHandler(Map<String, Object> params) {
        List<OAS.Param> query = new List<OAS.Param>();

        // cast query params to verify their expected type
        query.addAll(client.makeParam('post', (Boolean) params.get('post')));
        query.addAll(client.makeParam('apply', (Boolean) params.get('apply')));
        query.addAll(client.makeParam('delete', (Boolean) params.get('r_delete')));
        query.addAll(client.makeParam('action', (String) params.get('action')));
        query.addAll(client.makeParam('$location', (String) params.get('location')));
        query.addAll(client.makeParam('propertylist', (List<String>) params.get('propertylist'), 'csv'));
        query.addAll(client.makeParams('granite:data', (List<String>) params.get('granitedata')));

        List<OAS.Param> form = new List<OAS.Param>();

        return (OASComDayCqDamCoreImplMetadataEditor) client.invoke(
            'POST', '/system/console/configMgr/com.day.cq.dam.core.impl.metadata.editor.SelectComponentHandler', '',
            query, form,
            new Map<String, Object>(),
            new Map<String, Object>(),
            new List<String>{ 'application/json', 'text/plain' },
            new List<String>(),
            new List<String> { 'aemAuth' },
            OASComDayCqDamCoreImplMetadataEditor.class
        );
    }
    /**
     * 
     * 
     * @param post  (optional)
     * @param apply  (optional)
     * @param r_delete  (optional)
     * @param action  (optional)
     * @param location  (optional)
     * @param propertylist  (optional)
     * @param cqDamAllowAllMime  (optional)
     * @param cqDamAllowedAssetMimes  (optional)
     * @return OASComDayCqDamCoreImplMimeTypeAssetU
     * @throws OAS.ApiException if fails to make API call
     */
    public OASComDayCqDamCoreImplMimeTypeAssetU comDayCqDamCoreImplMimeTypeAssetUploadRestrictionHelper(Map<String, Object> params) {
        List<OAS.Param> query = new List<OAS.Param>();

        // cast query params to verify their expected type
        query.addAll(client.makeParam('post', (Boolean) params.get('post')));
        query.addAll(client.makeParam('apply', (Boolean) params.get('apply')));
        query.addAll(client.makeParam('delete', (Boolean) params.get('r_delete')));
        query.addAll(client.makeParam('action', (String) params.get('action')));
        query.addAll(client.makeParam('$location', (String) params.get('location')));
        query.addAll(client.makeParam('propertylist', (List<String>) params.get('propertylist'), 'csv'));
        query.addAll(client.makeParam('cq.dam.allow.all.mime', (Boolean) params.get('cqDamAllowAllMime')));
        query.addAll(client.makeParams('cq.dam.allowed.asset.mimes', (List<String>) params.get('cqDamAllowedAssetMimes')));

        List<OAS.Param> form = new List<OAS.Param>();

        return (OASComDayCqDamCoreImplMimeTypeAssetU) client.invoke(
            'POST', '/system/console/configMgr/com.day.cq.dam.core.impl.mimeType.AssetUploadRestrictionHelper', '',
            query, form,
            new Map<String, Object>(),
            new Map<String, Object>(),
            new List<String>{ 'application/json', 'text/plain' },
            new List<String>(),
            new List<String> { 'aemAuth' },
            OASComDayCqDamCoreImplMimeTypeAssetU.class
        );
    }
    /**
     * 
     * 
     * @param post  (optional)
     * @param apply  (optional)
     * @param r_delete  (optional)
     * @param action  (optional)
     * @param location  (optional)
     * @param propertylist  (optional)
     * @param cqDamDetectAssetMimeFromContent  (optional)
     * @return OASComDayCqDamCoreImplMimeTypeDamMim
     * @throws OAS.ApiException if fails to make API call
     */
    public OASComDayCqDamCoreImplMimeTypeDamMim comDayCqDamCoreImplMimeTypeDamMimeTypeServiceImpl(Map<String, Object> params) {
        List<OAS.Param> query = new List<OAS.Param>();

        // cast query params to verify their expected type
        query.addAll(client.makeParam('post', (Boolean) params.get('post')));
        query.addAll(client.makeParam('apply', (Boolean) params.get('apply')));
        query.addAll(client.makeParam('delete', (Boolean) params.get('r_delete')));
        query.addAll(client.makeParam('action', (String) params.get('action')));
        query.addAll(client.makeParam('$location', (String) params.get('location')));
        query.addAll(client.makeParam('propertylist', (List<String>) params.get('propertylist'), 'csv'));
        query.addAll(client.makeParam('cq.dam.detect.asset.mime.from.content', (Boolean) params.get('cqDamDetectAssetMimeFromContent')));

        List<OAS.Param> form = new List<OAS.Param>();

        return (OASComDayCqDamCoreImplMimeTypeDamMim) client.invoke(
            'POST', '/system/console/configMgr/com.day.cq.dam.core.impl.mimeType.DamMimeTypeServiceImpl', '',
            query, form,
            new Map<String, Object>(),
            new Map<String, Object>(),
            new List<String>{ 'application/json', 'text/plain' },
            new List<String>(),
            new List<String> { 'aemAuth' },
            OASComDayCqDamCoreImplMimeTypeDamMim.class
        );
    }
    /**
     * 
     * 
     * @param post  (optional)
     * @param apply  (optional)
     * @param r_delete  (optional)
     * @param action  (optional)
     * @param location  (optional)
     * @param propertylist  (optional)
     * @param cqDamMissingmetadataNotificationSchedulerIstimebased  (optional)
     * @param cqDamMissingmetadataNotificationSchedulerTimebasedRule  (optional)
     * @param cqDamMissingmetadataNotificationSchedulerPeriodRule  (optional)
     * @param cqDamMissingmetadataNotificationRecipient  (optional)
     * @return OASComDayCqDamCoreImplMissingMetadat
     * @throws OAS.ApiException if fails to make API call
     */
    public OASComDayCqDamCoreImplMissingMetadat comDayCqDamCoreImplMissingMetadataNotificationJob(Map<String, Object> params) {
        List<OAS.Param> query = new List<OAS.Param>();

        // cast query params to verify their expected type
        query.addAll(client.makeParam('post', (Boolean) params.get('post')));
        query.addAll(client.makeParam('apply', (Boolean) params.get('apply')));
        query.addAll(client.makeParam('delete', (Boolean) params.get('r_delete')));
        query.addAll(client.makeParam('action', (String) params.get('action')));
        query.addAll(client.makeParam('$location', (String) params.get('location')));
        query.addAll(client.makeParam('propertylist', (List<String>) params.get('propertylist'), 'csv'));
        query.addAll(client.makeParam('cq.dam.missingmetadata.notification.scheduler.istimebased', (Boolean) params.get('cqDamMissingmetadataNotificationSchedulerIstimebased')));
        query.addAll(client.makeParam('cq.dam.missingmetadata.notification.scheduler.timebased.rule', (String) params.get('cqDamMissingmetadataNotificationSchedulerTimebasedRule')));
        query.addAll(client.makeParam('cq.dam.missingmetadata.notification.scheduler.period.rule', (Integer) params.get('cqDamMissingmetadataNotificationSchedulerPeriodRule')));
        query.addAll(client.makeParam('cq.dam.missingmetadata.notification.recipient', (String) params.get('cqDamMissingmetadataNotificationRecipient')));

        List<OAS.Param> form = new List<OAS.Param>();

        return (OASComDayCqDamCoreImplMissingMetadat) client.invoke(
            'POST', '/system/console/configMgr/com.day.cq.dam.core.impl.MissingMetadataNotificationJob', '',
            query, form,
            new Map<String, Object>(),
            new Map<String, Object>(),
            new List<String>{ 'application/json', 'text/plain' },
            new List<String>(),
            new List<String> { 'aemAuth' },
            OASComDayCqDamCoreImplMissingMetadat.class
        );
    }
    /**
     * 
     * 
     * @param post  (optional)
     * @param apply  (optional)
     * @param r_delete  (optional)
     * @param action  (optional)
     * @param location  (optional)
     * @param propertylist  (optional)
     * @param processLabel  (optional)
     * @param notifyOnComplete  (optional)
     * @return OASComDayCqDamCoreImplProcessSendTra
     * @throws OAS.ApiException if fails to make API call
     */
    public OASComDayCqDamCoreImplProcessSendTra comDayCqDamCoreImplProcessSendTransientWorkflowCompletedEmailPr(Map<String, Object> params) {
        List<OAS.Param> query = new List<OAS.Param>();

        // cast query params to verify their expected type
        query.addAll(client.makeParam('post', (Boolean) params.get('post')));
        query.addAll(client.makeParam('apply', (Boolean) params.get('apply')));
        query.addAll(client.makeParam('delete', (Boolean) params.get('r_delete')));
        query.addAll(client.makeParam('action', (String) params.get('action')));
        query.addAll(client.makeParam('$location', (String) params.get('location')));
        query.addAll(client.makeParam('propertylist', (List<String>) params.get('propertylist'), 'csv'));
        query.addAll(client.makeParam('process.label', (String) params.get('processLabel')));
        query.addAll(client.makeParam('Notify on Complete', (Boolean) params.get('notifyOnComplete')));

        List<OAS.Param> form = new List<OAS.Param>();

        return (OASComDayCqDamCoreImplProcessSendTra) client.invoke(
            'POST', '/system/console/configMgr/com.day.cq.dam.core.impl.process.SendTransientWorkflowCompletedEmailProcess', '',
            query, form,
            new Map<String, Object>(),
            new Map<String, Object>(),
            new List<String>{ 'application/json', 'text/plain' },
            new List<String>(),
            new List<String> { 'aemAuth' },
            OASComDayCqDamCoreImplProcessSendTra.class
        );
    }
    /**
     * 
     * 
     * @param post  (optional)
     * @param apply  (optional)
     * @param r_delete  (optional)
     * @param action  (optional)
     * @param location  (optional)
     * @param propertylist  (optional)
     * @param mimeTypes  (optional)
     * @param maxExtract  (optional)
     * @return OASComDayCqDamCoreImplProcessTextExt
     * @throws OAS.ApiException if fails to make API call
     */
    public OASComDayCqDamCoreImplProcessTextExt comDayCqDamCoreImplProcessTextExtractionProcess(Map<String, Object> params) {
        List<OAS.Param> query = new List<OAS.Param>();

        // cast query params to verify their expected type
        query.addAll(client.makeParam('post', (Boolean) params.get('post')));
        query.addAll(client.makeParam('apply', (Boolean) params.get('apply')));
        query.addAll(client.makeParam('delete', (Boolean) params.get('r_delete')));
        query.addAll(client.makeParam('action', (String) params.get('action')));
        query.addAll(client.makeParam('$location', (String) params.get('location')));
        query.addAll(client.makeParam('propertylist', (List<String>) params.get('propertylist'), 'csv'));
        query.addAll(client.makeParams('mimeTypes', (List<String>) params.get('mimeTypes')));
        query.addAll(client.makeParam('maxExtract', (Integer) params.get('maxExtract')));

        List<OAS.Param> form = new List<OAS.Param>();

        return (OASComDayCqDamCoreImplProcessTextExt) client.invoke(
            'POST', '/system/console/configMgr/com.day.cq.dam.core.impl.process.TextExtractionProcess', '',
            query, form,
            new Map<String, Object>(),
            new Map<String, Object>(),
            new List<String>{ 'application/json', 'text/plain' },
            new List<String>(),
            new List<String> { 'aemAuth' },
            OASComDayCqDamCoreImplProcessTextExt.class
        );
    }
    /**
     * 
     * 
     * @param post  (optional)
     * @param apply  (optional)
     * @param r_delete  (optional)
     * @param action  (optional)
     * @param location  (optional)
     * @param propertylist  (optional)
     * @param xmpPropagate  (optional)
     * @param xmpExcludes  (optional)
     * @return OASComDayCqDamCoreImplRenditionMaker
     * @throws OAS.ApiException if fails to make API call
     */
    public OASComDayCqDamCoreImplRenditionMaker comDayCqDamCoreImplRenditionMakerImpl(Map<String, Object> params) {
        List<OAS.Param> query = new List<OAS.Param>();

        // cast query params to verify their expected type
        query.addAll(client.makeParam('post', (Boolean) params.get('post')));
        query.addAll(client.makeParam('apply', (Boolean) params.get('apply')));
        query.addAll(client.makeParam('delete', (Boolean) params.get('r_delete')));
        query.addAll(client.makeParam('action', (String) params.get('action')));
        query.addAll(client.makeParam('$location', (String) params.get('location')));
        query.addAll(client.makeParam('propertylist', (List<String>) params.get('propertylist'), 'csv'));
        query.addAll(client.makeParam('xmp.propagate', (Boolean) params.get('xmpPropagate')));
        query.addAll(client.makeParams('xmp.excludes', (List<String>) params.get('xmpExcludes')));

        List<OAS.Param> form = new List<OAS.Param>();

        return (OASComDayCqDamCoreImplRenditionMaker) client.invoke(
            'POST', '/system/console/configMgr/com.day.cq.dam.core.impl.RenditionMakerImpl', '',
            query, form,
            new Map<String, Object>(),
            new Map<String, Object>(),
            new List<String>{ 'application/json', 'text/plain' },
            new List<String>(),
            new List<String> { 'aemAuth' },
            OASComDayCqDamCoreImplRenditionMaker.class
        );
    }
    /**
     * 
     * 
     * @param post  (optional)
     * @param apply  (optional)
     * @param r_delete  (optional)
     * @param action  (optional)
     * @param location  (optional)
     * @param propertylist  (optional)
     * @param queryBatchSize  (optional)
     * @return OASComDayCqDamCoreImplReportsReportE
     * @throws OAS.ApiException if fails to make API call
     */
    public OASComDayCqDamCoreImplReportsReportE comDayCqDamCoreImplReportsReportExportService(Map<String, Object> params) {
        List<OAS.Param> query = new List<OAS.Param>();

        // cast query params to verify their expected type
        query.addAll(client.makeParam('post', (Boolean) params.get('post')));
        query.addAll(client.makeParam('apply', (Boolean) params.get('apply')));
        query.addAll(client.makeParam('delete', (Boolean) params.get('r_delete')));
        query.addAll(client.makeParam('action', (String) params.get('action')));
        query.addAll(client.makeParam('$location', (String) params.get('location')));
        query.addAll(client.makeParam('propertylist', (List<String>) params.get('propertylist'), 'csv'));
        query.addAll(client.makeParam('queryBatchSize', (Integer) params.get('queryBatchSize')));

        List<OAS.Param> form = new List<OAS.Param>();

        return (OASComDayCqDamCoreImplReportsReportE) client.invoke(
            'POST', '/system/console/configMgr/com.day.cq.dam.core.impl.reports.ReportExportService', '',
            query, form,
            new Map<String, Object>(),
            new Map<String, Object>(),
            new List<String>{ 'application/json', 'text/plain' },
            new List<String>(),
            new List<String> { 'aemAuth' },
            OASComDayCqDamCoreImplReportsReportE.class
        );
    }
    /**
     * 
     * 
     * @param post  (optional)
     * @param apply  (optional)
     * @param r_delete  (optional)
     * @param action  (optional)
     * @param location  (optional)
     * @param propertylist  (optional)
     * @param schedulerExpression  (optional)
     * @param maxSavedReports  (optional)
     * @param timeDuration  (optional)
     * @param enableReportPurge  (optional)
     * @return OASComDayCqDamCoreImplReportsReportP
     * @throws OAS.ApiException if fails to make API call
     */
    public OASComDayCqDamCoreImplReportsReportP comDayCqDamCoreImplReportsReportPurgeService(Map<String, Object> params) {
        List<OAS.Param> query = new List<OAS.Param>();

        // cast query params to verify their expected type
        query.addAll(client.makeParam('post', (Boolean) params.get('post')));
        query.addAll(client.makeParam('apply', (Boolean) params.get('apply')));
        query.addAll(client.makeParam('delete', (Boolean) params.get('r_delete')));
        query.addAll(client.makeParam('action', (String) params.get('action')));
        query.addAll(client.makeParam('$location', (String) params.get('location')));
        query.addAll(client.makeParam('propertylist', (List<String>) params.get('propertylist'), 'csv'));
        query.addAll(client.makeParam('scheduler.expression', (String) params.get('schedulerExpression')));
        query.addAll(client.makeParam('maxSavedReports', (Integer) params.get('maxSavedReports')));
        query.addAll(client.makeParam('timeDuration', (Integer) params.get('timeDuration')));
        query.addAll(client.makeParam('enableReportPurge', (Boolean) params.get('enableReportPurge')));

        List<OAS.Param> form = new List<OAS.Param>();

        return (OASComDayCqDamCoreImplReportsReportP) client.invoke(
            'POST', '/system/console/configMgr/com.day.cq.dam.core.impl.reports.ReportPurgeService', '',
            query, form,
            new Map<String, Object>(),
            new Map<String, Object>(),
            new List<String>{ 'application/json', 'text/plain' },
            new List<String>(),
            new List<String> { 'aemAuth' },
            OASComDayCqDamCoreImplReportsReportP.class
        );
    }
    /**
     * 
     * 
     * @param post  (optional)
     * @param apply  (optional)
     * @param r_delete  (optional)
     * @param action  (optional)
     * @param location  (optional)
     * @param propertylist  (optional)
     * @param enabled  (optional)
     * @return OASComDayCqDamCoreImplServletAssetDo
     * @throws OAS.ApiException if fails to make API call
     */
    public OASComDayCqDamCoreImplServletAssetDo comDayCqDamCoreImplServletAssetDownloadServlet(Map<String, Object> params) {
        List<OAS.Param> query = new List<OAS.Param>();

        // cast query params to verify their expected type
        query.addAll(client.makeParam('post', (Boolean) params.get('post')));
        query.addAll(client.makeParam('apply', (Boolean) params.get('apply')));
        query.addAll(client.makeParam('delete', (Boolean) params.get('r_delete')));
        query.addAll(client.makeParam('action', (String) params.get('action')));
        query.addAll(client.makeParam('$location', (String) params.get('location')));
        query.addAll(client.makeParam('propertylist', (List<String>) params.get('propertylist'), 'csv'));
        query.addAll(client.makeParam('enabled', (Boolean) params.get('enabled')));

        List<OAS.Param> form = new List<OAS.Param>();

        return (OASComDayCqDamCoreImplServletAssetDo) client.invoke(
            'POST', '/system/console/configMgr/com.day.cq.dam.core.impl.servlet.AssetDownloadServlet', '',
            query, form,
            new Map<String, Object>(),
            new Map<String, Object>(),
            new List<String>{ 'application/json', 'text/plain' },
            new List<String>(),
            new List<String> { 'aemAuth' },
            OASComDayCqDamCoreImplServletAssetDo.class
        );
    }
    /**
     * 
     * 
     * @param post  (optional)
     * @param apply  (optional)
     * @param r_delete  (optional)
     * @param action  (optional)
     * @param location  (optional)
     * @param propertylist  (optional)
     * @param cqDamBatchStatusMaxassets  (optional)
     * @return OASComDayCqDamCoreImplServletAssetSt
     * @throws OAS.ApiException if fails to make API call
     */
    public OASComDayCqDamCoreImplServletAssetSt comDayCqDamCoreImplServletAssetStatusServlet(Map<String, Object> params) {
        List<OAS.Param> query = new List<OAS.Param>();

        // cast query params to verify their expected type
        query.addAll(client.makeParam('post', (Boolean) params.get('post')));
        query.addAll(client.makeParam('apply', (Boolean) params.get('apply')));
        query.addAll(client.makeParam('delete', (Boolean) params.get('r_delete')));
        query.addAll(client.makeParam('action', (String) params.get('action')));
        query.addAll(client.makeParam('$location', (String) params.get('location')));
        query.addAll(client.makeParam('propertylist', (List<String>) params.get('propertylist'), 'csv'));
        query.addAll(client.makeParam('cq.dam.batch.status.maxassets', (Integer) params.get('cqDamBatchStatusMaxassets')));

        List<OAS.Param> form = new List<OAS.Param>();

        return (OASComDayCqDamCoreImplServletAssetSt) client.invoke(
            'POST', '/system/console/configMgr/com.day.cq.dam.core.impl.servlet.AssetStatusServlet', '',
            query, form,
            new Map<String, Object>(),
            new Map<String, Object>(),
            new List<String>{ 'application/json', 'text/plain' },
            new List<String>(),
            new List<String> { 'aemAuth' },
            OASComDayCqDamCoreImplServletAssetSt.class
        );
    }
    /**
     * 
     * 
     * @param post  (optional)
     * @param apply  (optional)
     * @param r_delete  (optional)
     * @param action  (optional)
     * @param location  (optional)
     * @param propertylist  (optional)
     * @param cqDamBatchIndesignMaxassets  (optional)
     * @return OASComDayCqDamCoreImplServletAssetXM
     * @throws OAS.ApiException if fails to make API call
     */
    public OASComDayCqDamCoreImplServletAssetXM comDayCqDamCoreImplServletAssetXMPSearchServlet(Map<String, Object> params) {
        List<OAS.Param> query = new List<OAS.Param>();

        // cast query params to verify their expected type
        query.addAll(client.makeParam('post', (Boolean) params.get('post')));
        query.addAll(client.makeParam('apply', (Boolean) params.get('apply')));
        query.addAll(client.makeParam('delete', (Boolean) params.get('r_delete')));
        query.addAll(client.makeParam('action', (String) params.get('action')));
        query.addAll(client.makeParam('$location', (String) params.get('location')));
        query.addAll(client.makeParam('propertylist', (List<String>) params.get('propertylist'), 'csv'));
        query.addAll(client.makeParam('cq.dam.batch.indesign.maxassets', (Integer) params.get('cqDamBatchIndesignMaxassets')));

        List<OAS.Param> form = new List<OAS.Param>();

        return (OASComDayCqDamCoreImplServletAssetXM) client.invoke(
            'POST', '/system/console/configMgr/com.day.cq.dam.core.impl.servlet.AssetXMPSearchServlet', '',
            query, form,
            new Map<String, Object>(),
            new Map<String, Object>(),
            new List<String>{ 'application/json', 'text/plain' },
            new List<String>(),
            new List<String> { 'aemAuth' },
            OASComDayCqDamCoreImplServletAssetXM.class
        );
    }
    /**
     * 
     * 
     * @param post  (optional)
     * @param apply  (optional)
     * @param r_delete  (optional)
     * @param action  (optional)
     * @param location  (optional)
     * @param propertylist  (optional)
     * @param cqDamBatchMetadataAssetDefault  (optional)
     * @param cqDamBatchMetadataCollectionDefault  (optional)
     * @param cqDamBatchMetadataMaxresources  (optional)
     * @return OASComDayCqDamCoreImplServletBatchMe
     * @throws OAS.ApiException if fails to make API call
     */
    public OASComDayCqDamCoreImplServletBatchMe comDayCqDamCoreImplServletBatchMetadataServlet(Map<String, Object> params) {
        List<OAS.Param> query = new List<OAS.Param>();

        // cast query params to verify their expected type
        query.addAll(client.makeParam('post', (Boolean) params.get('post')));
        query.addAll(client.makeParam('apply', (Boolean) params.get('apply')));
        query.addAll(client.makeParam('delete', (Boolean) params.get('r_delete')));
        query.addAll(client.makeParam('action', (String) params.get('action')));
        query.addAll(client.makeParam('$location', (String) params.get('location')));
        query.addAll(client.makeParam('propertylist', (List<String>) params.get('propertylist'), 'csv'));
        query.addAll(client.makeParams('cq.dam.batch.metadata.asset.default', (List<String>) params.get('cqDamBatchMetadataAssetDefault')));
        query.addAll(client.makeParams('cq.dam.batch.metadata.collection.default', (List<String>) params.get('cqDamBatchMetadataCollectionDefault')));
        query.addAll(client.makeParam('cq.dam.batch.metadata.maxresources', (Integer) params.get('cqDamBatchMetadataMaxresources')));

        List<OAS.Param> form = new List<OAS.Param>();

        return (OASComDayCqDamCoreImplServletBatchMe) client.invoke(
            'POST', '/system/console/configMgr/com.day.cq.dam.core.impl.servlet.BatchMetadataServlet', '',
            query, form,
            new Map<String, Object>(),
            new Map<String, Object>(),
            new List<String>{ 'application/json', 'text/plain' },
            new List<String>(),
            new List<String> { 'aemAuth' },
            OASComDayCqDamCoreImplServletBatchMe.class
        );
    }
    /**
     * 
     * 
     * @param post  (optional)
     * @param apply  (optional)
     * @param r_delete  (optional)
     * @param action  (optional)
     * @param location  (optional)
     * @param propertylist  (optional)
     * @param slingServletResourceTypes  (optional)
     * @param slingServletMethods  (optional)
     * @param cqDamDrmEnable  (optional)
     * @return OASComDayCqDamCoreImplServletBinaryP
     * @throws OAS.ApiException if fails to make API call
     */
    public OASComDayCqDamCoreImplServletBinaryP comDayCqDamCoreImplServletBinaryProviderServlet(Map<String, Object> params) {
        List<OAS.Param> query = new List<OAS.Param>();

        // cast query params to verify their expected type
        query.addAll(client.makeParam('post', (Boolean) params.get('post')));
        query.addAll(client.makeParam('apply', (Boolean) params.get('apply')));
        query.addAll(client.makeParam('delete', (Boolean) params.get('r_delete')));
        query.addAll(client.makeParam('action', (String) params.get('action')));
        query.addAll(client.makeParam('$location', (String) params.get('location')));
        query.addAll(client.makeParam('propertylist', (List<String>) params.get('propertylist'), 'csv'));
        query.addAll(client.makeParams('sling.servlet.resourceTypes', (List<String>) params.get('slingServletResourceTypes')));
        query.addAll(client.makeParams('sling.servlet.methods', (List<String>) params.get('slingServletMethods')));
        query.addAll(client.makeParam('cq.dam.drm.enable', (Boolean) params.get('cqDamDrmEnable')));

        List<OAS.Param> form = new List<OAS.Param>();

        return (OASComDayCqDamCoreImplServletBinaryP) client.invoke(
            'POST', '/system/console/configMgr/com.day.cq.dam.core.impl.servlet.BinaryProviderServlet', '',
            query, form,
            new Map<String, Object>(),
            new Map<String, Object>(),
            new List<String>{ 'application/json', 'text/plain' },
            new List<String>(),
            new List<String> { 'aemAuth' },
            OASComDayCqDamCoreImplServletBinaryP.class
        );
    }
    /**
     * 
     * 
     * @param post  (optional)
     * @param apply  (optional)
     * @param r_delete  (optional)
     * @param action  (optional)
     * @param location  (optional)
     * @param propertylist  (optional)
     * @param cqDamBatchCollectionProperties  (optional)
     * @param cqDamBatchCollectionMaxcollections  (optional)
     * @return OASComDayCqDamCoreImplServletCollect
     * @throws OAS.ApiException if fails to make API call
     */
    public OASComDayCqDamCoreImplServletCollect comDayCqDamCoreImplServletCollectionServlet(Map<String, Object> params) {
        List<OAS.Param> query = new List<OAS.Param>();

        // cast query params to verify their expected type
        query.addAll(client.makeParam('post', (Boolean) params.get('post')));
        query.addAll(client.makeParam('apply', (Boolean) params.get('apply')));
        query.addAll(client.makeParam('delete', (Boolean) params.get('r_delete')));
        query.addAll(client.makeParam('action', (String) params.get('action')));
        query.addAll(client.makeParam('$location', (String) params.get('location')));
        query.addAll(client.makeParam('propertylist', (List<String>) params.get('propertylist'), 'csv'));
        query.addAll(client.makeParams('cq.dam.batch.collection.properties', (List<String>) params.get('cqDamBatchCollectionProperties')));
        query.addAll(client.makeParam('cq.dam.batch.collection.maxcollections', (Integer) params.get('cqDamBatchCollectionMaxcollections')));

        List<OAS.Param> form = new List<OAS.Param>();

        return (OASComDayCqDamCoreImplServletCollect) client.invoke(
            'POST', '/system/console/configMgr/com.day.cq.dam.core.impl.servlet.CollectionServlet', '',
            query, form,
            new Map<String, Object>(),
            new Map<String, Object>(),
            new List<String>{ 'application/json', 'text/plain' },
            new List<String>(),
            new List<String> { 'aemAuth' },
            OASComDayCqDamCoreImplServletCollect.class
        );
    }
    /**
     * 
     * 
     * @param post  (optional)
     * @param apply  (optional)
     * @param r_delete  (optional)
     * @param action  (optional)
     * @param location  (optional)
     * @param propertylist  (optional)
     * @param cqDamBatchCollectionsProperties  (optional)
     * @param cqDamBatchCollectionsLimit  (optional)
     * @return OASComDayCqDamCoreImplServletCollect
     * @throws OAS.ApiException if fails to make API call
     */
    public OASComDayCqDamCoreImplServletCollect comDayCqDamCoreImplServletCollectionsServlet(Map<String, Object> params) {
        List<OAS.Param> query = new List<OAS.Param>();

        // cast query params to verify their expected type
        query.addAll(client.makeParam('post', (Boolean) params.get('post')));
        query.addAll(client.makeParam('apply', (Boolean) params.get('apply')));
        query.addAll(client.makeParam('delete', (Boolean) params.get('r_delete')));
        query.addAll(client.makeParam('action', (String) params.get('action')));
        query.addAll(client.makeParam('$location', (String) params.get('location')));
        query.addAll(client.makeParam('propertylist', (List<String>) params.get('propertylist'), 'csv'));
        query.addAll(client.makeParams('cq.dam.batch.collections.properties', (List<String>) params.get('cqDamBatchCollectionsProperties')));
        query.addAll(client.makeParam('cq.dam.batch.collections.limit', (Integer) params.get('cqDamBatchCollectionsLimit')));

        List<OAS.Param> form = new List<OAS.Param>();

        return (OASComDayCqDamCoreImplServletCollect) client.invoke(
            'POST', '/system/console/configMgr/com.day.cq.dam.core.impl.servlet.CollectionsServlet', '',
            query, form,
            new Map<String, Object>(),
            new Map<String, Object>(),
            new List<String>{ 'application/json', 'text/plain' },
            new List<String>(),
            new List<String> { 'aemAuth' },
            OASComDayCqDamCoreImplServletCollect.class
        );
    }
    /**
     * 
     * 
     * @param post  (optional)
     * @param apply  (optional)
     * @param r_delete  (optional)
     * @param action  (optional)
     * @param location  (optional)
     * @param propertylist  (optional)
     * @param moreInfo  (optional)
     * @param mntoverlaydamguicontentassetsmoreinfoHtmlpath  (optional)
     * @return OASComDayCqDamCoreImplServletCompani
     * @throws OAS.ApiException if fails to make API call
     */
    public OASComDayCqDamCoreImplServletCompani comDayCqDamCoreImplServletCompanionServlet(Map<String, Object> params) {
        List<OAS.Param> query = new List<OAS.Param>();

        // cast query params to verify their expected type
        query.addAll(client.makeParam('post', (Boolean) params.get('post')));
        query.addAll(client.makeParam('apply', (Boolean) params.get('apply')));
        query.addAll(client.makeParam('delete', (Boolean) params.get('r_delete')));
        query.addAll(client.makeParam('action', (String) params.get('action')));
        query.addAll(client.makeParam('$location', (String) params.get('location')));
        query.addAll(client.makeParam('propertylist', (List<String>) params.get('propertylist'), 'csv'));
        query.addAll(client.makeParam('More Info', (String) params.get('moreInfo')));
        query.addAll(client.makeParam('/mnt/overlay/dam/gui/content/assets/moreinfo.html/${path}', (String) params.get('mntoverlaydamguicontentassetsmoreinfoHtmlpath')));

        List<OAS.Param> form = new List<OAS.Param>();

        return (OASComDayCqDamCoreImplServletCompani) client.invoke(
            'POST', '/system/console/configMgr/com.day.cq.dam.core.impl.servlet.CompanionServlet', '',
            query, form,
            new Map<String, Object>(),
            new Map<String, Object>(),
            new List<String>{ 'application/json', 'text/plain' },
            new List<String>(),
            new List<String> { 'aemAuth' },
            OASComDayCqDamCoreImplServletCompani.class
        );
    }
    /**
     * 
     * 
     * @param post  (optional)
     * @param apply  (optional)
     * @param r_delete  (optional)
     * @param action  (optional)
     * @param location  (optional)
     * @param propertylist  (optional)
     * @param detectDuplicate  (optional)
     * @return OASComDayCqDamCoreImplServletCreateA
     * @throws OAS.ApiException if fails to make API call
     */
    public OASComDayCqDamCoreImplServletCreateA comDayCqDamCoreImplServletCreateAssetServlet(Map<String, Object> params) {
        List<OAS.Param> query = new List<OAS.Param>();

        // cast query params to verify their expected type
        query.addAll(client.makeParam('post', (Boolean) params.get('post')));
        query.addAll(client.makeParam('apply', (Boolean) params.get('apply')));
        query.addAll(client.makeParam('delete', (Boolean) params.get('r_delete')));
        query.addAll(client.makeParam('action', (String) params.get('action')));
        query.addAll(client.makeParam('$location', (String) params.get('location')));
        query.addAll(client.makeParam('propertylist', (List<String>) params.get('propertylist'), 'csv'));
        query.addAll(client.makeParam('detect_duplicate', (Boolean) params.get('detectDuplicate')));

        List<OAS.Param> form = new List<OAS.Param>();

        return (OASComDayCqDamCoreImplServletCreateA) client.invoke(
            'POST', '/system/console/configMgr/com.day.cq.dam.core.impl.servlet.CreateAssetServlet', '',
            query, form,
            new Map<String, Object>(),
            new Map<String, Object>(),
            new List<String>{ 'application/json', 'text/plain' },
            new List<String>(),
            new List<String> { 'aemAuth' },
            OASComDayCqDamCoreImplServletCreateA.class
        );
    }
    /**
     * 
     * 
     * @param post  (optional)
     * @param apply  (optional)
     * @param r_delete  (optional)
     * @param action  (optional)
     * @param location  (optional)
     * @param propertylist  (optional)
     * @param cqMimeTypeBlacklist  (optional)
     * @param cqDamEmptyMime  (optional)
     * @return OASComDayCqDamCoreImplServletDamCont
     * @throws OAS.ApiException if fails to make API call
     */
    public OASComDayCqDamCoreImplServletDamCont comDayCqDamCoreImplServletDamContentDispositionFilter(Map<String, Object> params) {
        List<OAS.Param> query = new List<OAS.Param>();

        // cast query params to verify their expected type
        query.addAll(client.makeParam('post', (Boolean) params.get('post')));
        query.addAll(client.makeParam('apply', (Boolean) params.get('apply')));
        query.addAll(client.makeParam('delete', (Boolean) params.get('r_delete')));
        query.addAll(client.makeParam('action', (String) params.get('action')));
        query.addAll(client.makeParam('$location', (String) params.get('location')));
        query.addAll(client.makeParam('propertylist', (List<String>) params.get('propertylist'), 'csv'));
        query.addAll(client.makeParams('cq.mime.type.blacklist', (List<String>) params.get('cqMimeTypeBlacklist')));
        query.addAll(client.makeParam('cq.dam.empty.mime', (Boolean) params.get('cqDamEmptyMime')));

        List<OAS.Param> form = new List<OAS.Param>();

        return (OASComDayCqDamCoreImplServletDamCont) client.invoke(
            'POST', '/system/console/configMgr/com.day.cq.dam.core.impl.servlet.DamContentDispositionFilter', '',
            query, form,
            new Map<String, Object>(),
            new Map<String, Object>(),
            new List<String>{ 'application/json', 'text/plain' },
            new List<String>(),
            new List<String> { 'aemAuth' },
            OASComDayCqDamCoreImplServletDamCont.class
        );
    }
    /**
     * 
     * 
     * @param post  (optional)
     * @param apply  (optional)
     * @param r_delete  (optional)
     * @param action  (optional)
     * @param location  (optional)
     * @param propertylist  (optional)
     * @param cqDamCoreGuidlookupfilterEnabled  (optional)
     * @return OASComDayCqDamCoreImplServletGuidLoo
     * @throws OAS.ApiException if fails to make API call
     */
    public OASComDayCqDamCoreImplServletGuidLoo comDayCqDamCoreImplServletGuidLookupFilter(Map<String, Object> params) {
        List<OAS.Param> query = new List<OAS.Param>();

        // cast query params to verify their expected type
        query.addAll(client.makeParam('post', (Boolean) params.get('post')));
        query.addAll(client.makeParam('apply', (Boolean) params.get('apply')));
        query.addAll(client.makeParam('delete', (Boolean) params.get('r_delete')));
        query.addAll(client.makeParam('action', (String) params.get('action')));
        query.addAll(client.makeParam('$location', (String) params.get('location')));
        query.addAll(client.makeParam('propertylist', (List<String>) params.get('propertylist'), 'csv'));
        query.addAll(client.makeParam('cq.dam.core.guidlookupfilter.enabled', (Boolean) params.get('cqDamCoreGuidlookupfilterEnabled')));

        List<OAS.Param> form = new List<OAS.Param>();

        return (OASComDayCqDamCoreImplServletGuidLoo) client.invoke(
            'POST', '/system/console/configMgr/com.day.cq.dam.core.impl.servlet.GuidLookupFilter', '',
            query, form,
            new Map<String, Object>(),
            new Map<String, Object>(),
            new List<String>{ 'application/json', 'text/plain' },
            new List<String>(),
            new List<String> { 'aemAuth' },
            OASComDayCqDamCoreImplServletGuidLoo.class
        );
    }
    /**
     * 
     * 
     * @param post  (optional)
     * @param apply  (optional)
     * @param r_delete  (optional)
     * @param action  (optional)
     * @param location  (optional)
     * @param propertylist  (optional)
     * @param cqDamSyncWorkflowId  (optional)
     * @param cqDamSyncFolderTypes  (optional)
     * @return OASComDayCqDamCoreImplServletHealthC
     * @throws OAS.ApiException if fails to make API call
     */
    public OASComDayCqDamCoreImplServletHealthC comDayCqDamCoreImplServletHealthCheckServlet(Map<String, Object> params) {
        List<OAS.Param> query = new List<OAS.Param>();

        // cast query params to verify their expected type
        query.addAll(client.makeParam('post', (Boolean) params.get('post')));
        query.addAll(client.makeParam('apply', (Boolean) params.get('apply')));
        query.addAll(client.makeParam('delete', (Boolean) params.get('r_delete')));
        query.addAll(client.makeParam('action', (String) params.get('action')));
        query.addAll(client.makeParam('$location', (String) params.get('location')));
        query.addAll(client.makeParam('propertylist', (List<String>) params.get('propertylist'), 'csv'));
        query.addAll(client.makeParam('cq.dam.sync.workflow.id', (String) params.get('cqDamSyncWorkflowId')));
        query.addAll(client.makeParams('cq.dam.sync.folder.types', (List<String>) params.get('cqDamSyncFolderTypes')));

        List<OAS.Param> form = new List<OAS.Param>();

        return (OASComDayCqDamCoreImplServletHealthC) client.invoke(
            'POST', '/system/console/configMgr/com.day.cq.dam.core.impl.servlet.HealthCheckServlet', '',
            query, form,
            new Map<String, Object>(),
            new Map<String, Object>(),
            new List<String>{ 'application/json', 'text/plain' },
            new List<String>(),
            new List<String> { 'aemAuth' },
            OASComDayCqDamCoreImplServletHealthC.class
        );
    }
    /**
     * 
     * 
     * @param post  (optional)
     * @param apply  (optional)
     * @param r_delete  (optional)
     * @param action  (optional)
     * @param location  (optional)
     * @param propertylist  (optional)
     * @param slingServletResourceTypes  (optional)
     * @param slingServletMethods  (optional)
     * @param slingServletExtensions  (optional)
     * @param slingServletSelectors  (optional)
     * @return OASComDayCqDamCoreImplServletMetadat
     * @throws OAS.ApiException if fails to make API call
     */
    public OASComDayCqDamCoreImplServletMetadat comDayCqDamCoreImplServletMetadataGetServlet(Map<String, Object> params) {
        List<OAS.Param> query = new List<OAS.Param>();

        // cast query params to verify their expected type
        query.addAll(client.makeParam('post', (Boolean) params.get('post')));
        query.addAll(client.makeParam('apply', (Boolean) params.get('apply')));
        query.addAll(client.makeParam('delete', (Boolean) params.get('r_delete')));
        query.addAll(client.makeParam('action', (String) params.get('action')));
        query.addAll(client.makeParam('$location', (String) params.get('location')));
        query.addAll(client.makeParam('propertylist', (List<String>) params.get('propertylist'), 'csv'));
        query.addAll(client.makeParam('sling.servlet.resourceTypes', (String) params.get('slingServletResourceTypes')));
        query.addAll(client.makeParam('sling.servlet.methods', (String) params.get('slingServletMethods')));
        query.addAll(client.makeParam('sling.servlet.extensions', (String) params.get('slingServletExtensions')));
        query.addAll(client.makeParam('sling.servlet.selectors', (String) params.get('slingServletSelectors')));

        List<OAS.Param> form = new List<OAS.Param>();

        return (OASComDayCqDamCoreImplServletMetadat) client.invoke(
            'POST', '/system/console/configMgr/com.day.cq.dam.core.impl.servlet.MetadataGetServlet', '',
            query, form,
            new Map<String, Object>(),
            new Map<String, Object>(),
            new List<String>{ 'application/json', 'text/plain' },
            new List<String>(),
            new List<String> { 'aemAuth' },
            OASComDayCqDamCoreImplServletMetadat.class
        );
    }
    /**
     * 
     * 
     * @param post  (optional)
     * @param apply  (optional)
     * @param r_delete  (optional)
     * @param action  (optional)
     * @param location  (optional)
     * @param propertylist  (optional)
     * @param cqDamDrmEnable  (optional)
     * @return OASComDayCqDamCoreImplServletMultipl
     * @throws OAS.ApiException if fails to make API call
     */
    public OASComDayCqDamCoreImplServletMultipl comDayCqDamCoreImplServletMultipleLicenseAcceptServlet(Map<String, Object> params) {
        List<OAS.Param> query = new List<OAS.Param>();

        // cast query params to verify their expected type
        query.addAll(client.makeParam('post', (Boolean) params.get('post')));
        query.addAll(client.makeParam('apply', (Boolean) params.get('apply')));
        query.addAll(client.makeParam('delete', (Boolean) params.get('r_delete')));
        query.addAll(client.makeParam('action', (String) params.get('action')));
        query.addAll(client.makeParam('$location', (String) params.get('location')));
        query.addAll(client.makeParam('propertylist', (List<String>) params.get('propertylist'), 'csv'));
        query.addAll(client.makeParam('cq.dam.drm.enable', (Boolean) params.get('cqDamDrmEnable')));

        List<OAS.Param> form = new List<OAS.Param>();

        return (OASComDayCqDamCoreImplServletMultipl) client.invoke(
            'POST', '/system/console/configMgr/com.day.cq.dam.core.impl.servlet.MultipleLicenseAcceptServlet', '',
            query, form,
            new Map<String, Object>(),
            new Map<String, Object>(),
            new List<String>{ 'application/json', 'text/plain' },
            new List<String>(),
            new List<String> { 'aemAuth' },
            OASComDayCqDamCoreImplServletMultipl.class
        );
    }
    /**
     * 
     * 
     * @param post  (optional)
     * @param apply  (optional)
     * @param r_delete  (optional)
     * @param action  (optional)
     * @param location  (optional)
     * @param propertylist  (optional)
     * @param slingServletResourceTypes  (optional)
     * @param slingServletMethods  (optional)
     * @param slingServletSelectors  (optional)
     * @param downloadConfig  (optional)
     * @param viewSelector  (optional)
     * @param sendEmail  (optional)
     * @return OASComDayCqDamCoreImplServletResourc
     * @throws OAS.ApiException if fails to make API call
     */
    public OASComDayCqDamCoreImplServletResourc comDayCqDamCoreImplServletResourceCollectionServlet(Map<String, Object> params) {
        List<OAS.Param> query = new List<OAS.Param>();

        // cast query params to verify their expected type
        query.addAll(client.makeParam('post', (Boolean) params.get('post')));
        query.addAll(client.makeParam('apply', (Boolean) params.get('apply')));
        query.addAll(client.makeParam('delete', (Boolean) params.get('r_delete')));
        query.addAll(client.makeParam('action', (String) params.get('action')));
        query.addAll(client.makeParam('$location', (String) params.get('location')));
        query.addAll(client.makeParam('propertylist', (List<String>) params.get('propertylist'), 'csv'));
        query.addAll(client.makeParams('sling.servlet.resourceTypes', (List<String>) params.get('slingServletResourceTypes')));
        query.addAll(client.makeParam('sling.servlet.methods', (String) params.get('slingServletMethods')));
        query.addAll(client.makeParam('sling.servlet.selectors', (String) params.get('slingServletSelectors')));
        query.addAll(client.makeParam('download.config', (String) params.get('downloadConfig')));
        query.addAll(client.makeParam('view.selector', (String) params.get('viewSelector')));
        query.addAll(client.makeParam('send_email', (Boolean) params.get('sendEmail')));

        List<OAS.Param> form = new List<OAS.Param>();

        return (OASComDayCqDamCoreImplServletResourc) client.invoke(
            'POST', '/system/console/configMgr/com.day.cq.dam.core.impl.servlet.ResourceCollectionServlet', '',
            query, form,
            new Map<String, Object>(),
            new Map<String, Object>(),
            new List<String>{ 'application/json', 'text/plain' },
            new List<String>(),
            new List<String> { 'aemAuth' },
            OASComDayCqDamCoreImplServletResourc.class
        );
    }
    /**
     * 
     * 
     * @param post  (optional)
     * @param apply  (optional)
     * @param r_delete  (optional)
     * @param action  (optional)
     * @param location  (optional)
     * @param propertylist  (optional)
     * @param createPreviewEnabled  (optional)
     * @param updatePreviewEnabled  (optional)
     * @param queueSize  (optional)
     * @param folderPreviewRenditionRegex  (optional)
     * @return OASComDayCqDamCoreImplUiPreviewFolde
     * @throws OAS.ApiException if fails to make API call
     */
    public OASComDayCqDamCoreImplUiPreviewFolde comDayCqDamCoreImplUiPreviewFolderPreviewUpdaterImpl(Map<String, Object> params) {
        List<OAS.Param> query = new List<OAS.Param>();

        // cast query params to verify their expected type
        query.addAll(client.makeParam('post', (Boolean) params.get('post')));
        query.addAll(client.makeParam('apply', (Boolean) params.get('apply')));
        query.addAll(client.makeParam('delete', (Boolean) params.get('r_delete')));
        query.addAll(client.makeParam('action', (String) params.get('action')));
        query.addAll(client.makeParam('$location', (String) params.get('location')));
        query.addAll(client.makeParam('propertylist', (List<String>) params.get('propertylist'), 'csv'));
        query.addAll(client.makeParam('createPreviewEnabled', (Boolean) params.get('createPreviewEnabled')));
        query.addAll(client.makeParam('updatePreviewEnabled', (Boolean) params.get('updatePreviewEnabled')));
        query.addAll(client.makeParam('queueSize', (Integer) params.get('queueSize')));
        query.addAll(client.makeParam('folderPreviewRenditionRegex', (String) params.get('folderPreviewRenditionRegex')));

        List<OAS.Param> form = new List<OAS.Param>();

        return (OASComDayCqDamCoreImplUiPreviewFolde) client.invoke(
            'POST', '/system/console/configMgr/com.day.cq.dam.core.impl.ui.preview.FolderPreviewUpdaterImpl', '',
            query, form,
            new Map<String, Object>(),
            new Map<String, Object>(),
            new List<String>{ 'application/json', 'text/plain' },
            new List<String>(),
            new List<String> { 'aemAuth' },
            OASComDayCqDamCoreImplUiPreviewFolde.class
        );
    }
    /**
     * 
     * 
     * @param post  (optional)
     * @param apply  (optional)
     * @param r_delete  (optional)
     * @param action  (optional)
     * @param location  (optional)
     * @param propertylist  (optional)
     * @param cqDamConfigUnzipMaxuncompressedsize  (optional)
     * @param cqDamConfigUnzipEncoding  (optional)
     * @return OASComDayCqDamCoreImplUnzipUnzipConf
     * @throws OAS.ApiException if fails to make API call
     */
    public OASComDayCqDamCoreImplUnzipUnzipConf comDayCqDamCoreImplUnzipUnzipConfig(Map<String, Object> params) {
        List<OAS.Param> query = new List<OAS.Param>();

        // cast query params to verify their expected type
        query.addAll(client.makeParam('post', (Boolean) params.get('post')));
        query.addAll(client.makeParam('apply', (Boolean) params.get('apply')));
        query.addAll(client.makeParam('delete', (Boolean) params.get('r_delete')));
        query.addAll(client.makeParam('action', (String) params.get('action')));
        query.addAll(client.makeParam('$location', (String) params.get('location')));
        query.addAll(client.makeParam('propertylist', (List<String>) params.get('propertylist'), 'csv'));
        query.addAll(client.makeParam('cq.dam.config.unzip.maxuncompressedsize', (Integer) params.get('cqDamConfigUnzipMaxuncompressedsize')));
        query.addAll(client.makeParam('cq.dam.config.unzip.encoding', (String) params.get('cqDamConfigUnzipEncoding')));

        List<OAS.Param> form = new List<OAS.Param>();

        return (OASComDayCqDamCoreImplUnzipUnzipConf) client.invoke(
            'POST', '/system/console/configMgr/com.day.cq.dam.core.impl.unzip.UnzipConfig', '',
            query, form,
            new Map<String, Object>(),
            new Map<String, Object>(),
            new List<String>{ 'application/json', 'text/plain' },
            new List<String>(),
            new List<String> { 'aemAuth' },
            OASComDayCqDamCoreImplUnzipUnzipConf.class
        );
    }
    /**
     * 
     * 
     * @param post  (optional)
     * @param apply  (optional)
     * @param r_delete  (optional)
     * @param action  (optional)
     * @param location  (optional)
     * @param propertylist  (optional)
     * @param processLabel  (optional)
     * @param cqDamEnableSha1  (optional)
     * @return OASComDayCqDamCoreProcessExifToolExt
     * @throws OAS.ApiException if fails to make API call
     */
    public OASComDayCqDamCoreProcessExifToolExt comDayCqDamCoreProcessExifToolExtractMetadataProcess(Map<String, Object> params) {
        List<OAS.Param> query = new List<OAS.Param>();

        // cast query params to verify their expected type
        query.addAll(client.makeParam('post', (Boolean) params.get('post')));
        query.addAll(client.makeParam('apply', (Boolean) params.get('apply')));
        query.addAll(client.makeParam('delete', (Boolean) params.get('r_delete')));
        query.addAll(client.makeParam('action', (String) params.get('action')));
        query.addAll(client.makeParam('$location', (String) params.get('location')));
        query.addAll(client.makeParam('propertylist', (List<String>) params.get('propertylist'), 'csv'));
        query.addAll(client.makeParam('process.label', (String) params.get('processLabel')));
        query.addAll(client.makeParam('cq.dam.enable.sha1', (Boolean) params.get('cqDamEnableSha1')));

        List<OAS.Param> form = new List<OAS.Param>();

        return (OASComDayCqDamCoreProcessExifToolExt) client.invoke(
            'POST', '/system/console/configMgr/com.day.cq.dam.core.process.ExifToolExtractMetadataProcess', '',
            query, form,
            new Map<String, Object>(),
            new Map<String, Object>(),
            new List<String>{ 'application/json', 'text/plain' },
            new List<String>(),
            new List<String> { 'aemAuth' },
            OASComDayCqDamCoreProcessExifToolExt.class
        );
    }
    /**
     * 
     * 
     * @param post  (optional)
     * @param apply  (optional)
     * @param r_delete  (optional)
     * @param action  (optional)
     * @param location  (optional)
     * @param propertylist  (optional)
     * @param processLabel  (optional)
     * @param cqDamEnableSha1  (optional)
     * @return OASComDayCqDamCoreProcessExtractMeta
     * @throws OAS.ApiException if fails to make API call
     */
    public OASComDayCqDamCoreProcessExtractMeta comDayCqDamCoreProcessExtractMetadataProcess(Map<String, Object> params) {
        List<OAS.Param> query = new List<OAS.Param>();

        // cast query params to verify their expected type
        query.addAll(client.makeParam('post', (Boolean) params.get('post')));
        query.addAll(client.makeParam('apply', (Boolean) params.get('apply')));
        query.addAll(client.makeParam('delete', (Boolean) params.get('r_delete')));
        query.addAll(client.makeParam('action', (String) params.get('action')));
        query.addAll(client.makeParam('$location', (String) params.get('location')));
        query.addAll(client.makeParam('propertylist', (List<String>) params.get('propertylist'), 'csv'));
        query.addAll(client.makeParam('process.label', (String) params.get('processLabel')));
        query.addAll(client.makeParam('cq.dam.enable.sha1', (Boolean) params.get('cqDamEnableSha1')));

        List<OAS.Param> form = new List<OAS.Param>();

        return (OASComDayCqDamCoreProcessExtractMeta) client.invoke(
            'POST', '/system/console/configMgr/com.day.cq.dam.core.process.ExtractMetadataProcess', '',
            query, form,
            new Map<String, Object>(),
            new Map<String, Object>(),
            new List<String>{ 'application/json', 'text/plain' },
            new List<String>(),
            new List<String> { 'aemAuth' },
            OASComDayCqDamCoreProcessExtractMeta.class
        );
    }
    /**
     * 
     * 
     * @param post  (optional)
     * @param apply  (optional)
     * @param r_delete  (optional)
     * @param action  (optional)
     * @param location  (optional)
     * @param propertylist  (optional)
     * @param processLabel  (optional)
     * @param cqDamEnableSha1  (optional)
     * @param cqDamMetadataXssprotectedProperties  (optional)
     * @return OASComDayCqDamCoreProcessMetadataPro
     * @throws OAS.ApiException if fails to make API call
     */
    public OASComDayCqDamCoreProcessMetadataPro comDayCqDamCoreProcessMetadataProcessorProcess(Map<String, Object> params) {
        List<OAS.Param> query = new List<OAS.Param>();

        // cast query params to verify their expected type
        query.addAll(client.makeParam('post', (Boolean) params.get('post')));
        query.addAll(client.makeParam('apply', (Boolean) params.get('apply')));
        query.addAll(client.makeParam('delete', (Boolean) params.get('r_delete')));
        query.addAll(client.makeParam('action', (String) params.get('action')));
        query.addAll(client.makeParam('$location', (String) params.get('location')));
        query.addAll(client.makeParam('propertylist', (List<String>) params.get('propertylist'), 'csv'));
        query.addAll(client.makeParam('process.label', (String) params.get('processLabel')));
        query.addAll(client.makeParam('cq.dam.enable.sha1', (Boolean) params.get('cqDamEnableSha1')));
        query.addAll(client.makeParams('cq.dam.metadata.xssprotected.properties', (List<String>) params.get('cqDamMetadataXssprotectedProperties')));

        List<OAS.Param> form = new List<OAS.Param>();

        return (OASComDayCqDamCoreProcessMetadataPro) client.invoke(
            'POST', '/system/console/configMgr/com.day.cq.dam.core.process.MetadataProcessorProcess', '',
            query, form,
            new Map<String, Object>(),
            new Map<String, Object>(),
            new List<String>{ 'application/json', 'text/plain' },
            new List<String>(),
            new List<String> { 'aemAuth' },
            OASComDayCqDamCoreProcessMetadataPro.class
        );
    }
    /**
     * 
     * 
     * @param post  (optional)
     * @param apply  (optional)
     * @param r_delete  (optional)
     * @param action  (optional)
     * @param location  (optional)
     * @param propertylist  (optional)
     * @param executableSearchpath  (optional)
     * @return OASComDayCqDamHandlerFfmpegLocatorIm
     * @throws OAS.ApiException if fails to make API call
     */
    public OASComDayCqDamHandlerFfmpegLocatorIm comDayCqDamHandlerFfmpegLocatorImpl(Map<String, Object> params) {
        List<OAS.Param> query = new List<OAS.Param>();

        // cast query params to verify their expected type
        query.addAll(client.makeParam('post', (Boolean) params.get('post')));
        query.addAll(client.makeParam('apply', (Boolean) params.get('apply')));
        query.addAll(client.makeParam('delete', (Boolean) params.get('r_delete')));
        query.addAll(client.makeParam('action', (String) params.get('action')));
        query.addAll(client.makeParam('$location', (String) params.get('location')));
        query.addAll(client.makeParam('propertylist', (List<String>) params.get('propertylist'), 'csv'));
        query.addAll(client.makeParams('executable.searchpath', (List<String>) params.get('executableSearchpath')));

        List<OAS.Param> form = new List<OAS.Param>();

        return (OASComDayCqDamHandlerFfmpegLocatorIm) client.invoke(
            'POST', '/system/console/configMgr/com.day.cq.dam.handler.ffmpeg.LocatorImpl', '',
            query, form,
            new Map<String, Object>(),
            new Map<String, Object>(),
            new List<String>{ 'application/json', 'text/plain' },
            new List<String>(),
            new List<String> { 'aemAuth' },
            OASComDayCqDamHandlerFfmpegLocatorIm.class
        );
    }
    /**
     * 
     * 
     * @param post  (optional)
     * @param apply  (optional)
     * @param r_delete  (optional)
     * @param action  (optional)
     * @param location  (optional)
     * @param propertylist  (optional)
     * @param eventFilter  (optional)
     * @param fontmgrSystemFontDir  (optional)
     * @param fontmgrAdobeFontDir  (optional)
     * @param fontmgrCustomerFontDir  (optional)
     * @return OASComDayCqDamHandlerGibsonFontmanag
     * @throws OAS.ApiException if fails to make API call
     */
    public OASComDayCqDamHandlerGibsonFontmanag comDayCqDamHandlerGibsonFontmanagerImplFontManagerServiceImpl(Map<String, Object> params) {
        List<OAS.Param> query = new List<OAS.Param>();

        // cast query params to verify their expected type
        query.addAll(client.makeParam('post', (Boolean) params.get('post')));
        query.addAll(client.makeParam('apply', (Boolean) params.get('apply')));
        query.addAll(client.makeParam('delete', (Boolean) params.get('r_delete')));
        query.addAll(client.makeParam('action', (String) params.get('action')));
        query.addAll(client.makeParam('$location', (String) params.get('location')));
        query.addAll(client.makeParam('propertylist', (List<String>) params.get('propertylist'), 'csv'));
        query.addAll(client.makeParam('event.filter', (String) params.get('eventFilter')));
        query.addAll(client.makeParams('fontmgr.system.font.dir', (List<String>) params.get('fontmgrSystemFontDir')));
        query.addAll(client.makeParam('fontmgr.adobe.font.dir', (String) params.get('fontmgrAdobeFontDir')));
        query.addAll(client.makeParam('fontmgr.customer.font.dir', (String) params.get('fontmgrCustomerFontDir')));

        List<OAS.Param> form = new List<OAS.Param>();

        return (OASComDayCqDamHandlerGibsonFontmanag) client.invoke(
            'POST', '/system/console/configMgr/com.day.cq.dam.handler.gibson.fontmanager.impl.FontManagerServiceImpl', '',
            query, form,
            new Map<String, Object>(),
            new Map<String, Object>(),
            new List<String>{ 'application/json', 'text/plain' },
            new List<String>(),
            new List<String> { 'aemAuth' },
            OASComDayCqDamHandlerGibsonFontmanag.class
        );
    }
    /**
     * 
     * 
     * @param post  (optional)
     * @param apply  (optional)
     * @param r_delete  (optional)
     * @param action  (optional)
     * @param location  (optional)
     * @param propertylist  (optional)
     * @param rasterAnnotation  (optional)
     * @return OASComDayCqDamHandlerStandardPdfPdfH
     * @throws OAS.ApiException if fails to make API call
     */
    public OASComDayCqDamHandlerStandardPdfPdfH comDayCqDamHandlerStandardPdfPdfHandler(Map<String, Object> params) {
        List<OAS.Param> query = new List<OAS.Param>();

        // cast query params to verify their expected type
        query.addAll(client.makeParam('post', (Boolean) params.get('post')));
        query.addAll(client.makeParam('apply', (Boolean) params.get('apply')));
        query.addAll(client.makeParam('delete', (Boolean) params.get('r_delete')));
        query.addAll(client.makeParam('action', (String) params.get('action')));
        query.addAll(client.makeParam('$location', (String) params.get('location')));
        query.addAll(client.makeParam('propertylist', (List<String>) params.get('propertylist'), 'csv'));
        query.addAll(client.makeParam('raster.annotation', (Boolean) params.get('rasterAnnotation')));

        List<OAS.Param> form = new List<OAS.Param>();

        return (OASComDayCqDamHandlerStandardPdfPdfH) client.invoke(
            'POST', '/system/console/configMgr/com.day.cq.dam.handler.standard.pdf.PdfHandler', '',
            query, form,
            new Map<String, Object>(),
            new Map<String, Object>(),
            new List<String>{ 'application/json', 'text/plain' },
            new List<String>(),
            new List<String> { 'aemAuth' },
            OASComDayCqDamHandlerStandardPdfPdfH.class
        );
    }
    /**
     * 
     * 
     * @param post  (optional)
     * @param apply  (optional)
     * @param r_delete  (optional)
     * @param action  (optional)
     * @param location  (optional)
     * @param propertylist  (optional)
     * @param rasterAnnotation  (optional)
     * @return OASComDayCqDamHandlerStandardPsPostS
     * @throws OAS.ApiException if fails to make API call
     */
    public OASComDayCqDamHandlerStandardPsPostS comDayCqDamHandlerStandardPsPostScriptHandler(Map<String, Object> params) {
        List<OAS.Param> query = new List<OAS.Param>();

        // cast query params to verify their expected type
        query.addAll(client.makeParam('post', (Boolean) params.get('post')));
        query.addAll(client.makeParam('apply', (Boolean) params.get('apply')));
        query.addAll(client.makeParam('delete', (Boolean) params.get('r_delete')));
        query.addAll(client.makeParam('action', (String) params.get('action')));
        query.addAll(client.makeParam('$location', (String) params.get('location')));
        query.addAll(client.makeParam('propertylist', (List<String>) params.get('propertylist'), 'csv'));
        query.addAll(client.makeParam('raster.annotation', (Boolean) params.get('rasterAnnotation')));

        List<OAS.Param> form = new List<OAS.Param>();

        return (OASComDayCqDamHandlerStandardPsPostS) client.invoke(
            'POST', '/system/console/configMgr/com.day.cq.dam.handler.standard.ps.PostScriptHandler', '',
            query, form,
            new Map<String, Object>(),
            new Map<String, Object>(),
            new List<String>{ 'application/json', 'text/plain' },
            new List<String>(),
            new List<String> { 'aemAuth' },
            OASComDayCqDamHandlerStandardPsPostS.class
        );
    }
    /**
     * 
     * 
     * @param post  (optional)
     * @param apply  (optional)
     * @param r_delete  (optional)
     * @param action  (optional)
     * @param location  (optional)
     * @param propertylist  (optional)
     * @param largeFileThreshold  (optional)
     * @return OASComDayCqDamHandlerStandardPsdPsdH
     * @throws OAS.ApiException if fails to make API call
     */
    public OASComDayCqDamHandlerStandardPsdPsdH comDayCqDamHandlerStandardPsdPsdHandler(Map<String, Object> params) {
        List<OAS.Param> query = new List<OAS.Param>();

        // cast query params to verify their expected type
        query.addAll(client.makeParam('post', (Boolean) params.get('post')));
        query.addAll(client.makeParam('apply', (Boolean) params.get('apply')));
        query.addAll(client.makeParam('delete', (Boolean) params.get('r_delete')));
        query.addAll(client.makeParam('action', (String) params.get('action')));
        query.addAll(client.makeParam('$location', (String) params.get('location')));
        query.addAll(client.makeParam('propertylist', (List<String>) params.get('propertylist'), 'csv'));
        query.addAll(client.makeParam('large_file_threshold', (Integer) params.get('largeFileThreshold')));

        List<OAS.Param> form = new List<OAS.Param>();

        return (OASComDayCqDamHandlerStandardPsdPsdH) client.invoke(
            'POST', '/system/console/configMgr/com.day.cq.dam.handler.standard.psd.PsdHandler', '',
            query, form,
            new Map<String, Object>(),
            new Map<String, Object>(),
            new List<String>{ 'application/json', 'text/plain' },
            new List<String>(),
            new List<String> { 'aemAuth' },
            OASComDayCqDamHandlerStandardPsdPsdH.class
        );
    }
    /**
     * 
     * 
     * @param post  (optional)
     * @param apply  (optional)
     * @param r_delete  (optional)
     * @param action  (optional)
     * @param location  (optional)
     * @param propertylist  (optional)
     * @param enableMultisession  (optional)
     * @param idsCcEnable  (optional)
     * @param enableRetry  (optional)
     * @param enableRetryScripterror  (optional)
     * @param externalizerDomainCqhost  (optional)
     * @param externalizerDomainHttp  (optional)
     * @return OASComDayCqDamIdsImplIDSJobProcessor
     * @throws OAS.ApiException if fails to make API call
     */
    public OASComDayCqDamIdsImplIDSJobProcessor comDayCqDamIdsImplIDSJobProcessor(Map<String, Object> params) {
        List<OAS.Param> query = new List<OAS.Param>();

        // cast query params to verify their expected type
        query.addAll(client.makeParam('post', (Boolean) params.get('post')));
        query.addAll(client.makeParam('apply', (Boolean) params.get('apply')));
        query.addAll(client.makeParam('delete', (Boolean) params.get('r_delete')));
        query.addAll(client.makeParam('action', (String) params.get('action')));
        query.addAll(client.makeParam('$location', (String) params.get('location')));
        query.addAll(client.makeParam('propertylist', (List<String>) params.get('propertylist'), 'csv'));
        query.addAll(client.makeParam('enable.multisession', (Boolean) params.get('enableMultisession')));
        query.addAll(client.makeParam('ids.cc.enable', (Boolean) params.get('idsCcEnable')));
        query.addAll(client.makeParam('enable.retry', (Boolean) params.get('enableRetry')));
        query.addAll(client.makeParam('enable.retry.scripterror', (Boolean) params.get('enableRetryScripterror')));
        query.addAll(client.makeParam('externalizer.domain.cqhost', (String) params.get('externalizerDomainCqhost')));
        query.addAll(client.makeParam('externalizer.domain.http', (String) params.get('externalizerDomainHttp')));

        List<OAS.Param> form = new List<OAS.Param>();

        return (OASComDayCqDamIdsImplIDSJobProcessor) client.invoke(
            'POST', '/system/console/configMgr/com.day.cq.dam.ids.impl.IDSJobProcessor', '',
            query, form,
            new Map<String, Object>(),
            new Map<String, Object>(),
            new List<String>{ 'application/json', 'text/plain' },
            new List<String>(),
            new List<String> { 'aemAuth' },
            OASComDayCqDamIdsImplIDSJobProcessor.class
        );
    }
    /**
     * 
     * 
     * @param post  (optional)
     * @param apply  (optional)
     * @param r_delete  (optional)
     * @param action  (optional)
     * @param location  (optional)
     * @param propertylist  (optional)
     * @param maxErrorsToBlacklist  (optional)
     * @param retryIntervalToWhitelist  (optional)
     * @param connectTimeout  (optional)
     * @param socketTimeout  (optional)
     * @param processLabel  (optional)
     * @param connectionUseMax  (optional)
     * @return OASComDayCqDamIdsImplIDSPoolManagerI
     * @throws OAS.ApiException if fails to make API call
     */
    public OASComDayCqDamIdsImplIDSPoolManagerI comDayCqDamIdsImplIDSPoolManagerImpl(Map<String, Object> params) {
        List<OAS.Param> query = new List<OAS.Param>();

        // cast query params to verify their expected type
        query.addAll(client.makeParam('post', (Boolean) params.get('post')));
        query.addAll(client.makeParam('apply', (Boolean) params.get('apply')));
        query.addAll(client.makeParam('delete', (Boolean) params.get('r_delete')));
        query.addAll(client.makeParam('action', (String) params.get('action')));
        query.addAll(client.makeParam('$location', (String) params.get('location')));
        query.addAll(client.makeParam('propertylist', (List<String>) params.get('propertylist'), 'csv'));
        query.addAll(client.makeParam('max.errors.to.blacklist', (Integer) params.get('maxErrorsToBlacklist')));
        query.addAll(client.makeParam('retry.interval.to.whitelist', (Integer) params.get('retryIntervalToWhitelist')));
        query.addAll(client.makeParam('connect.timeout', (Integer) params.get('connectTimeout')));
        query.addAll(client.makeParam('socket.timeout', (Integer) params.get('socketTimeout')));
        query.addAll(client.makeParam('process.label', (String) params.get('processLabel')));
        query.addAll(client.makeParam('connection.use.max', (Integer) params.get('connectionUseMax')));

        List<OAS.Param> form = new List<OAS.Param>();

        return (OASComDayCqDamIdsImplIDSPoolManagerI) client.invoke(
            'POST', '/system/console/configMgr/com.day.cq.dam.ids.impl.IDSPoolManagerImpl', '',
            query, form,
            new Map<String, Object>(),
            new Map<String, Object>(),
            new List<String>{ 'application/json', 'text/plain' },
            new List<String>(),
            new List<String> { 'aemAuth' },
            OASComDayCqDamIdsImplIDSPoolManagerI.class
        );
    }
    /**
     * 
     * 
     * @param post  (optional)
     * @param apply  (optional)
     * @param r_delete  (optional)
     * @param action  (optional)
     * @param location  (optional)
     * @param propertylist  (optional)
     * @param processLabel  (optional)
     * @param extractPages  (optional)
     * @return OASComDayCqDamInddImplHandlerIndesig
     * @throws OAS.ApiException if fails to make API call
     */
    public OASComDayCqDamInddImplHandlerIndesig comDayCqDamInddImplHandlerIndesignXMPHandler(Map<String, Object> params) {
        List<OAS.Param> query = new List<OAS.Param>();

        // cast query params to verify their expected type
        query.addAll(client.makeParam('post', (Boolean) params.get('post')));
        query.addAll(client.makeParam('apply', (Boolean) params.get('apply')));
        query.addAll(client.makeParam('delete', (Boolean) params.get('r_delete')));
        query.addAll(client.makeParam('action', (String) params.get('action')));
        query.addAll(client.makeParam('$location', (String) params.get('location')));
        query.addAll(client.makeParam('propertylist', (List<String>) params.get('propertylist'), 'csv'));
        query.addAll(client.makeParam('process.label', (String) params.get('processLabel')));
        query.addAll(client.makeParam('extract.pages', (Boolean) params.get('extractPages')));

        List<OAS.Param> form = new List<OAS.Param>();

        return (OASComDayCqDamInddImplHandlerIndesig) client.invoke(
            'POST', '/system/console/configMgr/com.day.cq.dam.indd.impl.handler.IndesignXMPHandler', '',
            query, form,
            new Map<String, Object>(),
            new Map<String, Object>(),
            new List<String>{ 'application/json', 'text/plain' },
            new List<String>(),
            new List<String> { 'aemAuth' },
            OASComDayCqDamInddImplHandlerIndesig.class
        );
    }
    /**
     * 
     * 
     * @param post  (optional)
     * @param apply  (optional)
     * @param r_delete  (optional)
     * @param action  (optional)
     * @param location  (optional)
     * @param propertylist  (optional)
     * @param snippetcreationMaxcollections  (optional)
     * @return OASComDayCqDamInddImplServletSnippet
     * @throws OAS.ApiException if fails to make API call
     */
    public OASComDayCqDamInddImplServletSnippet comDayCqDamInddImplServletSnippetCreationServlet(Map<String, Object> params) {
        List<OAS.Param> query = new List<OAS.Param>();

        // cast query params to verify their expected type
        query.addAll(client.makeParam('post', (Boolean) params.get('post')));
        query.addAll(client.makeParam('apply', (Boolean) params.get('apply')));
        query.addAll(client.makeParam('delete', (Boolean) params.get('r_delete')));
        query.addAll(client.makeParam('action', (String) params.get('action')));
        query.addAll(client.makeParam('$location', (String) params.get('location')));
        query.addAll(client.makeParam('propertylist', (List<String>) params.get('propertylist'), 'csv'));
        query.addAll(client.makeParam('snippetcreation.maxcollections', (Integer) params.get('snippetcreationMaxcollections')));

        List<OAS.Param> form = new List<OAS.Param>();

        return (OASComDayCqDamInddImplServletSnippet) client.invoke(
            'POST', '/system/console/configMgr/com.day.cq.dam.indd.impl.servlet.SnippetCreationServlet', '',
            query, form,
            new Map<String, Object>(),
            new Map<String, Object>(),
            new List<String>{ 'application/json', 'text/plain' },
            new List<String>(),
            new List<String> { 'aemAuth' },
            OASComDayCqDamInddImplServletSnippet.class
        );
    }
    /**
     * 
     * 
     * @param post  (optional)
     * @param apply  (optional)
     * @param r_delete  (optional)
     * @param action  (optional)
     * @param location  (optional)
     * @param propertylist  (optional)
     * @param processLabel  (optional)
     * @param cqDamInddPagesRegex  (optional)
     * @param idsJobDecoupled  (optional)
     * @param idsJobWorkflowModel  (optional)
     * @return OASComDayCqDamInddProcessINDDMediaEx
     * @throws OAS.ApiException if fails to make API call
     */
    public OASComDayCqDamInddProcessINDDMediaEx comDayCqDamInddProcessINDDMediaExtractProcess(Map<String, Object> params) {
        List<OAS.Param> query = new List<OAS.Param>();

        // cast query params to verify their expected type
        query.addAll(client.makeParam('post', (Boolean) params.get('post')));
        query.addAll(client.makeParam('apply', (Boolean) params.get('apply')));
        query.addAll(client.makeParam('delete', (Boolean) params.get('r_delete')));
        query.addAll(client.makeParam('action', (String) params.get('action')));
        query.addAll(client.makeParam('$location', (String) params.get('location')));
        query.addAll(client.makeParam('propertylist', (List<String>) params.get('propertylist'), 'csv'));
        query.addAll(client.makeParam('process.label', (String) params.get('processLabel')));
        query.addAll(client.makeParam('cq.dam.indd.pages.regex', (String) params.get('cqDamInddPagesRegex')));
        query.addAll(client.makeParam('ids.job.decoupled', (Boolean) params.get('idsJobDecoupled')));
        query.addAll(client.makeParam('ids.job.workflow.model', (String) params.get('idsJobWorkflowModel')));

        List<OAS.Param> form = new List<OAS.Param>();

        return (OASComDayCqDamInddProcessINDDMediaEx) client.invoke(
            'POST', '/system/console/configMgr/com.day.cq.dam.indd.process.INDDMediaExtractProcess', '',
            query, form,
            new Map<String, Object>(),
            new Map<String, Object>(),
            new List<String>{ 'application/json', 'text/plain' },
            new List<String>(),
            new List<String> { 'aemAuth' },
            OASComDayCqDamInddProcessINDDMediaEx.class
        );
    }
    /**
     * 
     * 
     * @param post  (optional)
     * @param apply  (optional)
     * @param r_delete  (optional)
     * @param action  (optional)
     * @param location  (optional)
     * @param propertylist  (optional)
     * @param batchCommitSize  (optional)
     * @return OASComDayCqDamPerformanceInternalAss
     * @throws OAS.ApiException if fails to make API call
     */
    public OASComDayCqDamPerformanceInternalAss comDayCqDamPerformanceInternalAssetPerformanceDataHandlerImpl(Map<String, Object> params) {
        List<OAS.Param> query = new List<OAS.Param>();

        // cast query params to verify their expected type
        query.addAll(client.makeParam('post', (Boolean) params.get('post')));
        query.addAll(client.makeParam('apply', (Boolean) params.get('apply')));
        query.addAll(client.makeParam('delete', (Boolean) params.get('r_delete')));
        query.addAll(client.makeParam('action', (String) params.get('action')));
        query.addAll(client.makeParam('$location', (String) params.get('location')));
        query.addAll(client.makeParam('propertylist', (List<String>) params.get('propertylist'), 'csv'));
        query.addAll(client.makeParam('batch.commit.size', (Integer) params.get('batchCommitSize')));

        List<OAS.Param> form = new List<OAS.Param>();

        return (OASComDayCqDamPerformanceInternalAss) client.invoke(
            'POST', '/system/console/configMgr/com.day.cq.dam.performance.internal.AssetPerformanceDataHandlerImpl', '',
            query, form,
            new Map<String, Object>(),
            new Map<String, Object>(),
            new List<String>{ 'application/json', 'text/plain' },
            new List<String>(),
            new List<String> { 'aemAuth' },
            OASComDayCqDamPerformanceInternalAss.class
        );
    }
    /**
     * 
     * 
     * @param post  (optional)
     * @param apply  (optional)
     * @param r_delete  (optional)
     * @param action  (optional)
     * @param location  (optional)
     * @param propertylist  (optional)
     * @param schedulerExpression  (optional)
     * @return OASComDayCqDamPerformanceInternalAss
     * @throws OAS.ApiException if fails to make API call
     */
    public OASComDayCqDamPerformanceInternalAss comDayCqDamPerformanceInternalAssetPerformanceReportSyncJob(Map<String, Object> params) {
        List<OAS.Param> query = new List<OAS.Param>();

        // cast query params to verify their expected type
        query.addAll(client.makeParam('post', (Boolean) params.get('post')));
        query.addAll(client.makeParam('apply', (Boolean) params.get('apply')));
        query.addAll(client.makeParam('delete', (Boolean) params.get('r_delete')));
        query.addAll(client.makeParam('action', (String) params.get('action')));
        query.addAll(client.makeParam('$location', (String) params.get('location')));
        query.addAll(client.makeParam('propertylist', (List<String>) params.get('propertylist'), 'csv'));
        query.addAll(client.makeParam('scheduler.expression', (String) params.get('schedulerExpression')));

        List<OAS.Param> form = new List<OAS.Param>();

        return (OASComDayCqDamPerformanceInternalAss) client.invoke(
            'POST', '/system/console/configMgr/com.day.cq.dam.performance.internal.AssetPerformanceReportSyncJob', '',
            query, form,
            new Map<String, Object>(),
            new Map<String, Object>(),
            new List<String>{ 'application/json', 'text/plain' },
            new List<String>(),
            new List<String> { 'aemAuth' },
            OASComDayCqDamPerformanceInternalAss.class
        );
    }
    /**
     * 
     * 
     * @param post  (optional)
     * @param apply  (optional)
     * @param r_delete  (optional)
     * @param action  (optional)
     * @param location  (optional)
     * @param propertylist  (optional)
     * @param deleteZipFile  (optional)
     * @return OASComDayCqDamPimImplSourcingUploadP
     * @throws OAS.ApiException if fails to make API call
     */
    public OASComDayCqDamPimImplSourcingUploadP comDayCqDamPimImplSourcingUploadProcessProductAssetsUploadPro(Map<String, Object> params) {
        List<OAS.Param> query = new List<OAS.Param>();

        // cast query params to verify their expected type
        query.addAll(client.makeParam('post', (Boolean) params.get('post')));
        query.addAll(client.makeParam('apply', (Boolean) params.get('apply')));
        query.addAll(client.makeParam('delete', (Boolean) params.get('r_delete')));
        query.addAll(client.makeParam('action', (String) params.get('action')));
        query.addAll(client.makeParam('$location', (String) params.get('location')));
        query.addAll(client.makeParam('propertylist', (List<String>) params.get('propertylist'), 'csv'));
        query.addAll(client.makeParam('delete.zip.file', (Boolean) params.get('deleteZipFile')));

        List<OAS.Param> form = new List<OAS.Param>();

        return (OASComDayCqDamPimImplSourcingUploadP) client.invoke(
            'POST', '/system/console/configMgr/com.day.cq.dam.pim.impl.sourcing.upload.process.ProductAssetsUploadProcess', '',
            query, form,
            new Map<String, Object>(),
            new Map<String, Object>(),
            new List<String>{ 'application/json', 'text/plain' },
            new List<String>(),
            new List<String> { 'aemAuth' },
            OASComDayCqDamPimImplSourcingUploadP.class
        );
    }
    /**
     * 
     * 
     * @param post  (optional)
     * @param apply  (optional)
     * @param r_delete  (optional)
     * @param action  (optional)
     * @param location  (optional)
     * @param propertylist  (optional)
     * @param cqDamS7damDynamicmediaconfigeventlistenerEnabled  (optional)
     * @return OASComDayCqDamS7damCommonAnalyticsIm
     * @throws OAS.ApiException if fails to make API call
     */
    public OASComDayCqDamS7damCommonAnalyticsIm comDayCqDamS7damCommonAnalyticsImplS7damDynamicMediaConfigEven(Map<String, Object> params) {
        List<OAS.Param> query = new List<OAS.Param>();

        // cast query params to verify their expected type
        query.addAll(client.makeParam('post', (Boolean) params.get('post')));
        query.addAll(client.makeParam('apply', (Boolean) params.get('apply')));
        query.addAll(client.makeParam('delete', (Boolean) params.get('r_delete')));
        query.addAll(client.makeParam('action', (String) params.get('action')));
        query.addAll(client.makeParam('$location', (String) params.get('location')));
        query.addAll(client.makeParam('propertylist', (List<String>) params.get('propertylist'), 'csv'));
        query.addAll(client.makeParam('cq.dam.s7dam.dynamicmediaconfigeventlistener.enabled', (Boolean) params.get('cqDamS7damDynamicmediaconfigeventlistenerEnabled')));

        List<OAS.Param> form = new List<OAS.Param>();

        return (OASComDayCqDamS7damCommonAnalyticsIm) client.invoke(
            'POST', '/system/console/configMgr/com.day.cq.dam.s7dam.common.analytics.impl.S7damDynamicMediaConfigEventListener', '',
            query, form,
            new Map<String, Object>(),
            new Map<String, Object>(),
            new List<String>{ 'application/json', 'text/plain' },
            new List<String>(),
            new List<String> { 'aemAuth' },
            OASComDayCqDamS7damCommonAnalyticsIm.class
        );
    }
    /**
     * 
     * 
     * @param post  (optional)
     * @param apply  (optional)
     * @param r_delete  (optional)
     * @param action  (optional)
     * @param location  (optional)
     * @param propertylist  (optional)
     * @param schedulerExpression  (optional)
     * @param schedulerConcurrent  (optional)
     * @return OASComDayCqDamS7damCommonAnalyticsIm
     * @throws OAS.ApiException if fails to make API call
     */
    public OASComDayCqDamS7damCommonAnalyticsIm comDayCqDamS7damCommonAnalyticsImplSiteCatalystReportRunner(Map<String, Object> params) {
        List<OAS.Param> query = new List<OAS.Param>();

        // cast query params to verify their expected type
        query.addAll(client.makeParam('post', (Boolean) params.get('post')));
        query.addAll(client.makeParam('apply', (Boolean) params.get('apply')));
        query.addAll(client.makeParam('delete', (Boolean) params.get('r_delete')));
        query.addAll(client.makeParam('action', (String) params.get('action')));
        query.addAll(client.makeParam('$location', (String) params.get('location')));
        query.addAll(client.makeParam('propertylist', (List<String>) params.get('propertylist'), 'csv'));
        query.addAll(client.makeParam('scheduler.expression', (String) params.get('schedulerExpression')));
        query.addAll(client.makeParam('scheduler.concurrent', (Boolean) params.get('schedulerConcurrent')));

        List<OAS.Param> form = new List<OAS.Param>();

        return (OASComDayCqDamS7damCommonAnalyticsIm) client.invoke(
            'POST', '/system/console/configMgr/com.day.cq.dam.s7dam.common.analytics.impl.SiteCatalystReportRunner', '',
            query, form,
            new Map<String, Object>(),
            new Map<String, Object>(),
            new List<String>{ 'application/json', 'text/plain' },
            new List<String>(),
            new List<String> { 'aemAuth' },
            OASComDayCqDamS7damCommonAnalyticsIm.class
        );
    }
    /**
     * 
     * 
     * @param post  (optional)
     * @param apply  (optional)
     * @param r_delete  (optional)
     * @param action  (optional)
     * @param location  (optional)
     * @param propertylist  (optional)
     * @param slingPostOperation  (optional)
     * @param slingServletMethods  (optional)
     * @return OASComDayCqDamS7damCommonPostServlet
     * @throws OAS.ApiException if fails to make API call
     */
    public OASComDayCqDamS7damCommonPostServlet comDayCqDamS7damCommonPostServletsSetCreateHandler(Map<String, Object> params) {
        List<OAS.Param> query = new List<OAS.Param>();

        // cast query params to verify their expected type
        query.addAll(client.makeParam('post', (Boolean) params.get('post')));
        query.addAll(client.makeParam('apply', (Boolean) params.get('apply')));
        query.addAll(client.makeParam('delete', (Boolean) params.get('r_delete')));
        query.addAll(client.makeParam('action', (String) params.get('action')));
        query.addAll(client.makeParam('$location', (String) params.get('location')));
        query.addAll(client.makeParam('propertylist', (List<String>) params.get('propertylist'), 'csv'));
        query.addAll(client.makeParam('sling.post.operation', (String) params.get('slingPostOperation')));
        query.addAll(client.makeParam('sling.servlet.methods', (String) params.get('slingServletMethods')));

        List<OAS.Param> form = new List<OAS.Param>();

        return (OASComDayCqDamS7damCommonPostServlet) client.invoke(
            'POST', '/system/console/configMgr/com.day.cq.dam.s7dam.common.post.servlets.SetCreateHandler', '',
            query, form,
            new Map<String, Object>(),
            new Map<String, Object>(),
            new List<String>{ 'application/json', 'text/plain' },
            new List<String>(),
            new List<String> { 'aemAuth' },
            OASComDayCqDamS7damCommonPostServlet.class
        );
    }
    /**
     * 
     * 
     * @param post  (optional)
     * @param apply  (optional)
     * @param r_delete  (optional)
     * @param action  (optional)
     * @param location  (optional)
     * @param propertylist  (optional)
     * @param slingPostOperation  (optional)
     * @param slingServletMethods  (optional)
     * @return OASComDayCqDamS7damCommonPostServlet
     * @throws OAS.ApiException if fails to make API call
     */
    public OASComDayCqDamS7damCommonPostServlet comDayCqDamS7damCommonPostServletsSetModifyHandler(Map<String, Object> params) {
        List<OAS.Param> query = new List<OAS.Param>();

        // cast query params to verify their expected type
        query.addAll(client.makeParam('post', (Boolean) params.get('post')));
        query.addAll(client.makeParam('apply', (Boolean) params.get('apply')));
        query.addAll(client.makeParam('delete', (Boolean) params.get('r_delete')));
        query.addAll(client.makeParam('action', (String) params.get('action')));
        query.addAll(client.makeParam('$location', (String) params.get('location')));
        query.addAll(client.makeParam('propertylist', (List<String>) params.get('propertylist'), 'csv'));
        query.addAll(client.makeParam('sling.post.operation', (String) params.get('slingPostOperation')));
        query.addAll(client.makeParam('sling.servlet.methods', (String) params.get('slingServletMethods')));

        List<OAS.Param> form = new List<OAS.Param>();

        return (OASComDayCqDamS7damCommonPostServlet) client.invoke(
            'POST', '/system/console/configMgr/com.day.cq.dam.s7dam.common.post.servlets.SetModifyHandler', '',
            query, form,
            new Map<String, Object>(),
            new Map<String, Object>(),
            new List<String>{ 'application/json', 'text/plain' },
            new List<String>(),
            new List<String> { 'aemAuth' },
            OASComDayCqDamS7damCommonPostServlet.class
        );
    }
    /**
     * 
     * 
     * @param post  (optional)
     * @param apply  (optional)
     * @param r_delete  (optional)
     * @param action  (optional)
     * @param location  (optional)
     * @param propertylist  (optional)
     * @param processLabel  (optional)
     * @return OASComDayCqDamS7damCommonProcessVide
     * @throws OAS.ApiException if fails to make API call
     */
    public OASComDayCqDamS7damCommonProcessVide comDayCqDamS7damCommonProcessVideoThumbnailDownloadProcess(Map<String, Object> params) {
        List<OAS.Param> query = new List<OAS.Param>();

        // cast query params to verify their expected type
        query.addAll(client.makeParam('post', (Boolean) params.get('post')));
        query.addAll(client.makeParam('apply', (Boolean) params.get('apply')));
        query.addAll(client.makeParam('delete', (Boolean) params.get('r_delete')));
        query.addAll(client.makeParam('action', (String) params.get('action')));
        query.addAll(client.makeParam('$location', (String) params.get('location')));
        query.addAll(client.makeParam('propertylist', (List<String>) params.get('propertylist'), 'csv'));
        query.addAll(client.makeParam('process.label', (String) params.get('processLabel')));

        List<OAS.Param> form = new List<OAS.Param>();

        return (OASComDayCqDamS7damCommonProcessVide) client.invoke(
            'POST', '/system/console/configMgr/com.day.cq.dam.s7dam.common.process.VideoThumbnailDownloadProcess', '',
            query, form,
            new Map<String, Object>(),
            new Map<String, Object>(),
            new List<String>{ 'application/json', 'text/plain' },
            new List<String>(),
            new List<String> { 'aemAuth' },
            OASComDayCqDamS7damCommonProcessVide.class
        );
    }
    /**
     * 
     * 
     * @param post  (optional)
     * @param apply  (optional)
     * @param r_delete  (optional)
     * @param action  (optional)
     * @param location  (optional)
     * @param propertylist  (optional)
     * @param cqDamS7damDamchangeeventlistenerEnabled  (optional)
     * @return OASComDayCqDamS7damCommonS7damDamCha
     * @throws OAS.ApiException if fails to make API call
     */
    public OASComDayCqDamS7damCommonS7damDamCha comDayCqDamS7damCommonS7damDamChangeEventListener(Map<String, Object> params) {
        List<OAS.Param> query = new List<OAS.Param>();

        // cast query params to verify their expected type
        query.addAll(client.makeParam('post', (Boolean) params.get('post')));
        query.addAll(client.makeParam('apply', (Boolean) params.get('apply')));
        query.addAll(client.makeParam('delete', (Boolean) params.get('r_delete')));
        query.addAll(client.makeParam('action', (String) params.get('action')));
        query.addAll(client.makeParam('$location', (String) params.get('location')));
        query.addAll(client.makeParam('propertylist', (List<String>) params.get('propertylist'), 'csv'));
        query.addAll(client.makeParam('cq.dam.s7dam.damchangeeventlistener.enabled', (Boolean) params.get('cqDamS7damDamchangeeventlistenerEnabled')));

        List<OAS.Param> form = new List<OAS.Param>();

        return (OASComDayCqDamS7damCommonS7damDamCha) client.invoke(
            'POST', '/system/console/configMgr/com.day.cq.dam.s7dam.common.S7damDamChangeEventListener', '',
            query, form,
            new Map<String, Object>(),
            new Map<String, Object>(),
            new List<String>{ 'application/json', 'text/plain' },
            new List<String>(),
            new List<String> { 'aemAuth' },
            OASComDayCqDamS7damCommonS7damDamCha.class
        );
    }
    /**
     * 
     * 
     * @param post  (optional)
     * @param apply  (optional)
     * @param r_delete  (optional)
     * @param action  (optional)
     * @param location  (optional)
     * @param propertylist  (optional)
     * @param slingServletPaths  (optional)
     * @param slingServletMethods  (optional)
     * @return OASComDayCqDamS7damCommonServletsS7d
     * @throws OAS.ApiException if fails to make API call
     */
    public OASComDayCqDamS7damCommonServletsS7d comDayCqDamS7damCommonServletsS7damProductInfoServlet(Map<String, Object> params) {
        List<OAS.Param> query = new List<OAS.Param>();

        // cast query params to verify their expected type
        query.addAll(client.makeParam('post', (Boolean) params.get('post')));
        query.addAll(client.makeParam('apply', (Boolean) params.get('apply')));
        query.addAll(client.makeParam('delete', (Boolean) params.get('r_delete')));
        query.addAll(client.makeParam('action', (String) params.get('action')));
        query.addAll(client.makeParam('$location', (String) params.get('location')));
        query.addAll(client.makeParam('propertylist', (List<String>) params.get('propertylist'), 'csv'));
        query.addAll(client.makeParam('sling.servlet.paths', (String) params.get('slingServletPaths')));
        query.addAll(client.makeParam('sling.servlet.methods', (String) params.get('slingServletMethods')));

        List<OAS.Param> form = new List<OAS.Param>();

        return (OASComDayCqDamS7damCommonServletsS7d) client.invoke(
            'POST', '/system/console/configMgr/com.day.cq.dam.s7dam.common.servlets.S7damProductInfoServlet', '',
            query, form,
            new Map<String, Object>(),
            new Map<String, Object>(),
            new List<String>{ 'application/json', 'text/plain' },
            new List<String>(),
            new List<String> { 'aemAuth' },
            OASComDayCqDamS7damCommonServletsS7d.class
        );
    }
    /**
     * 
     * 
     * @param post  (optional)
     * @param apply  (optional)
     * @param r_delete  (optional)
     * @param action  (optional)
     * @param location  (optional)
     * @param propertylist  (optional)
     * @param cqDamS7damVideoproxyclientserviceMultipartuploadMinsizeName  (optional)
     * @param cqDamS7damVideoproxyclientserviceMultipartuploadPartsizeName  (optional)
     * @param cqDamS7damVideoproxyclientserviceMultipartuploadNumthreadName  (optional)
     * @param cqDamS7damVideoproxyclientserviceHttpReadtimeoutName  (optional)
     * @param cqDamS7damVideoproxyclientserviceHttpConnectiontimeoutName  (optional)
     * @param cqDamS7damVideoproxyclientserviceHttpMaxretrycountName  (optional)
     * @param cqDamS7damVideoproxyclientserviceUploadprogressIntervalName  (optional)
     * @return OASComDayCqDamS7damCommonVideoImplVi
     * @throws OAS.ApiException if fails to make API call
     */
    public OASComDayCqDamS7damCommonVideoImplVi comDayCqDamS7damCommonVideoImplVideoProxyClientServiceImpl(Map<String, Object> params) {
        List<OAS.Param> query = new List<OAS.Param>();

        // cast query params to verify their expected type
        query.addAll(client.makeParam('post', (Boolean) params.get('post')));
        query.addAll(client.makeParam('apply', (Boolean) params.get('apply')));
        query.addAll(client.makeParam('delete', (Boolean) params.get('r_delete')));
        query.addAll(client.makeParam('action', (String) params.get('action')));
        query.addAll(client.makeParam('$location', (String) params.get('location')));
        query.addAll(client.makeParam('propertylist', (List<String>) params.get('propertylist'), 'csv'));
        query.addAll(client.makeParam('cq.dam.s7dam.videoproxyclientservice.multipartupload.minsize.name', (Integer) params.get('cqDamS7damVideoproxyclientserviceMultipartuploadMinsizeName')));
        query.addAll(client.makeParam('cq.dam.s7dam.videoproxyclientservice.multipartupload.partsize.name', (Integer) params.get('cqDamS7damVideoproxyclientserviceMultipartuploadPartsizeName')));
        query.addAll(client.makeParam('cq.dam.s7dam.videoproxyclientservice.multipartupload.numthread.name', (Integer) params.get('cqDamS7damVideoproxyclientserviceMultipartuploadNumthreadName')));
        query.addAll(client.makeParam('cq.dam.s7dam.videoproxyclientservice.http.readtimeout.name', (Integer) params.get('cqDamS7damVideoproxyclientserviceHttpReadtimeoutName')));
        query.addAll(client.makeParam('cq.dam.s7dam.videoproxyclientservice.http.connectiontimeout.name', (Integer) params.get('cqDamS7damVideoproxyclientserviceHttpConnectiontimeoutName')));
        query.addAll(client.makeParam('cq.dam.s7dam.videoproxyclientservice.http.maxretrycount.name', (Integer) params.get('cqDamS7damVideoproxyclientserviceHttpMaxretrycountName')));
        query.addAll(client.makeParam('cq.dam.s7dam.videoproxyclientservice.uploadprogress.interval.name', (Integer) params.get('cqDamS7damVideoproxyclientserviceUploadprogressIntervalName')));

        List<OAS.Param> form = new List<OAS.Param>();

        return (OASComDayCqDamS7damCommonVideoImplVi) client.invoke(
            'POST', '/system/console/configMgr/com.day.cq.dam.s7dam.common.video.impl.VideoProxyClientServiceImpl', '',
            query, form,
            new Map<String, Object>(),
            new Map<String, Object>(),
            new List<String>{ 'application/json', 'text/plain' },
            new List<String>(),
            new List<String> { 'aemAuth' },
            OASComDayCqDamS7damCommonVideoImplVi.class
        );
    }
    /**
     * 
     * 
     * @param post  (optional)
     * @param apply  (optional)
     * @param r_delete  (optional)
     * @param action  (optional)
     * @param location  (optional)
     * @param propertylist  (optional)
     * @param cqDamScene7ApiclientRecordsperpageNofilterName  (optional)
     * @param cqDamScene7ApiclientRecordsperpageWithfilterName  (optional)
     * @return OASComDayCqDamScene7ImplScene7APICli
     * @throws OAS.ApiException if fails to make API call
     */
    public OASComDayCqDamScene7ImplScene7APICli comDayCqDamScene7ImplScene7APIClientImpl(Map<String, Object> params) {
        List<OAS.Param> query = new List<OAS.Param>();

        // cast query params to verify their expected type
        query.addAll(client.makeParam('post', (Boolean) params.get('post')));
        query.addAll(client.makeParam('apply', (Boolean) params.get('apply')));
        query.addAll(client.makeParam('delete', (Boolean) params.get('r_delete')));
        query.addAll(client.makeParam('action', (String) params.get('action')));
        query.addAll(client.makeParam('$location', (String) params.get('location')));
        query.addAll(client.makeParam('propertylist', (List<String>) params.get('propertylist'), 'csv'));
        query.addAll(client.makeParam('cq.dam.scene7.apiclient.recordsperpage.nofilter.name', (Integer) params.get('cqDamScene7ApiclientRecordsperpageNofilterName')));
        query.addAll(client.makeParam('cq.dam.scene7.apiclient.recordsperpage.withfilter.name', (Integer) params.get('cqDamScene7ApiclientRecordsperpageWithfilterName')));

        List<OAS.Param> form = new List<OAS.Param>();

        return (OASComDayCqDamScene7ImplScene7APICli) client.invoke(
            'POST', '/system/console/configMgr/com.day.cq.dam.scene7.impl.Scene7APIClientImpl', '',
            query, form,
            new Map<String, Object>(),
            new Map<String, Object>(),
            new List<String>{ 'application/json', 'text/plain' },
            new List<String>(),
            new List<String> { 'aemAuth' },
            OASComDayCqDamScene7ImplScene7APICli.class
        );
    }
    /**
     * 
     * 
     * @param post  (optional)
     * @param apply  (optional)
     * @param r_delete  (optional)
     * @param action  (optional)
     * @param location  (optional)
     * @param propertylist  (optional)
     * @param cqDamScene7AssetmimetypeserviceMapping  (optional)
     * @return OASComDayCqDamScene7ImplScene7AssetM
     * @throws OAS.ApiException if fails to make API call
     */
    public OASComDayCqDamScene7ImplScene7AssetM comDayCqDamScene7ImplScene7AssetMimeTypeServiceImpl(Map<String, Object> params) {
        List<OAS.Param> query = new List<OAS.Param>();

        // cast query params to verify their expected type
        query.addAll(client.makeParam('post', (Boolean) params.get('post')));
        query.addAll(client.makeParam('apply', (Boolean) params.get('apply')));
        query.addAll(client.makeParam('delete', (Boolean) params.get('r_delete')));
        query.addAll(client.makeParam('action', (String) params.get('action')));
        query.addAll(client.makeParam('$location', (String) params.get('location')));
        query.addAll(client.makeParam('propertylist', (List<String>) params.get('propertylist'), 'csv'));
        query.addAll(client.makeParams('cq.dam.scene7.assetmimetypeservice.mapping', (List<String>) params.get('cqDamScene7AssetmimetypeserviceMapping')));

        List<OAS.Param> form = new List<OAS.Param>();

        return (OASComDayCqDamScene7ImplScene7AssetM) client.invoke(
            'POST', '/system/console/configMgr/com.day.cq.dam.scene7.impl.Scene7AssetMimeTypeServiceImpl', '',
            query, form,
            new Map<String, Object>(),
            new Map<String, Object>(),
            new List<String>{ 'application/json', 'text/plain' },
            new List<String>(),
            new List<String> { 'aemAuth' },
            OASComDayCqDamScene7ImplScene7AssetM.class
        );
    }
    /**
     * 
     * 
     * @param post  (optional)
     * @param apply  (optional)
     * @param r_delete  (optional)
     * @param action  (optional)
     * @param location  (optional)
     * @param propertylist  (optional)
     * @param cqDamScene7ConfigurationeventlistenerEnabled  (optional)
     * @return OASComDayCqDamScene7ImplScene7Config
     * @throws OAS.ApiException if fails to make API call
     */
    public OASComDayCqDamScene7ImplScene7Config comDayCqDamScene7ImplScene7ConfigurationEventListener(Map<String, Object> params) {
        List<OAS.Param> query = new List<OAS.Param>();

        // cast query params to verify their expected type
        query.addAll(client.makeParam('post', (Boolean) params.get('post')));
        query.addAll(client.makeParam('apply', (Boolean) params.get('apply')));
        query.addAll(client.makeParam('delete', (Boolean) params.get('r_delete')));
        query.addAll(client.makeParam('action', (String) params.get('action')));
        query.addAll(client.makeParam('$location', (String) params.get('location')));
        query.addAll(client.makeParam('propertylist', (List<String>) params.get('propertylist'), 'csv'));
        query.addAll(client.makeParam('cq.dam.scene7.configurationeventlistener.enabled', (Boolean) params.get('cqDamScene7ConfigurationeventlistenerEnabled')));

        List<OAS.Param> form = new List<OAS.Param>();

        return (OASComDayCqDamScene7ImplScene7Config) client.invoke(
            'POST', '/system/console/configMgr/com.day.cq.dam.scene7.impl.Scene7ConfigurationEventListener', '',
            query, form,
            new Map<String, Object>(),
            new Map<String, Object>(),
            new List<String>{ 'application/json', 'text/plain' },
            new List<String>(),
            new List<String> { 'aemAuth' },
            OASComDayCqDamScene7ImplScene7Config.class
        );
    }
    /**
     * 
     * 
     * @param post  (optional)
     * @param apply  (optional)
     * @param r_delete  (optional)
     * @param action  (optional)
     * @param location  (optional)
     * @param propertylist  (optional)
     * @param cqDamScene7DamchangeeventlistenerEnabled  (optional)
     * @param cqDamScene7DamchangeeventlistenerObservedPaths  (optional)
     * @return OASComDayCqDamScene7ImplScene7DamCha
     * @throws OAS.ApiException if fails to make API call
     */
    public OASComDayCqDamScene7ImplScene7DamCha comDayCqDamScene7ImplScene7DamChangeEventListener(Map<String, Object> params) {
        List<OAS.Param> query = new List<OAS.Param>();

        // cast query params to verify their expected type
        query.addAll(client.makeParam('post', (Boolean) params.get('post')));
        query.addAll(client.makeParam('apply', (Boolean) params.get('apply')));
        query.addAll(client.makeParam('delete', (Boolean) params.get('r_delete')));
        query.addAll(client.makeParam('action', (String) params.get('action')));
        query.addAll(client.makeParam('$location', (String) params.get('location')));
        query.addAll(client.makeParam('propertylist', (List<String>) params.get('propertylist'), 'csv'));
        query.addAll(client.makeParam('cq.dam.scene7.damchangeeventlistener.enabled', (Boolean) params.get('cqDamScene7DamchangeeventlistenerEnabled')));
        query.addAll(client.makeParams('cq.dam.scene7.damchangeeventlistener.observed.paths', (List<String>) params.get('cqDamScene7DamchangeeventlistenerObservedPaths')));

        List<OAS.Param> form = new List<OAS.Param>();

        return (OASComDayCqDamScene7ImplScene7DamCha) client.invoke(
            'POST', '/system/console/configMgr/com.day.cq.dam.scene7.impl.Scene7DamChangeEventListener', '',
            query, form,
            new Map<String, Object>(),
            new Map<String, Object>(),
            new List<String>{ 'application/json', 'text/plain' },
            new List<String>(),
            new List<String> { 'aemAuth' },
            OASComDayCqDamScene7ImplScene7DamCha.class
        );
    }
    /**
     * 
     * 
     * @param post  (optional)
     * @param apply  (optional)
     * @param r_delete  (optional)
     * @param action  (optional)
     * @param location  (optional)
     * @param propertylist  (optional)
     * @param scene7FlashTemplatesRti  (optional)
     * @param scene7FlashTemplatesRsi  (optional)
     * @param scene7FlashTemplatesRb  (optional)
     * @param scene7FlashTemplatesRurl  (optional)
     * @param scene7FlashTemplateUrlFormatParameter  (optional)
     * @return OASComDayCqDamScene7ImplScene7FlashT
     * @throws OAS.ApiException if fails to make API call
     */
    public OASComDayCqDamScene7ImplScene7FlashT comDayCqDamScene7ImplScene7FlashTemplatesServiceImpl(Map<String, Object> params) {
        List<OAS.Param> query = new List<OAS.Param>();

        // cast query params to verify their expected type
        query.addAll(client.makeParam('post', (Boolean) params.get('post')));
        query.addAll(client.makeParam('apply', (Boolean) params.get('apply')));
        query.addAll(client.makeParam('delete', (Boolean) params.get('r_delete')));
        query.addAll(client.makeParam('action', (String) params.get('action')));
        query.addAll(client.makeParam('$location', (String) params.get('location')));
        query.addAll(client.makeParam('propertylist', (List<String>) params.get('propertylist'), 'csv'));
        query.addAll(client.makeParam('scene7FlashTemplates.rti', (String) params.get('scene7FlashTemplatesRti')));
        query.addAll(client.makeParam('scene7FlashTemplates.rsi', (String) params.get('scene7FlashTemplatesRsi')));
        query.addAll(client.makeParam('scene7FlashTemplates.rb', (String) params.get('scene7FlashTemplatesRb')));
        query.addAll(client.makeParam('scene7FlashTemplates.rurl', (String) params.get('scene7FlashTemplatesRurl')));
        query.addAll(client.makeParam('scene7FlashTemplate.urlFormatParameter', (String) params.get('scene7FlashTemplateUrlFormatParameter')));

        List<OAS.Param> form = new List<OAS.Param>();

        return (OASComDayCqDamScene7ImplScene7FlashT) client.invoke(
            'POST', '/system/console/configMgr/com.day.cq.dam.scene7.impl.Scene7FlashTemplatesServiceImpl', '',
            query, form,
            new Map<String, Object>(),
            new Map<String, Object>(),
            new List<String>{ 'application/json', 'text/plain' },
            new List<String>(),
            new List<String> { 'aemAuth' },
            OASComDayCqDamScene7ImplScene7FlashT.class
        );
    }
    /**
     * 
     * 
     * @param post  (optional)
     * @param apply  (optional)
     * @param r_delete  (optional)
     * @param action  (optional)
     * @param location  (optional)
     * @param propertylist  (optional)
     * @param cqDamScene7UploadserviceActivejobtimeoutLabel  (optional)
     * @param cqDamScene7UploadserviceConnectionmaxperrouteLabel  (optional)
     * @return OASComDayCqDamScene7ImplScene7Upload
     * @throws OAS.ApiException if fails to make API call
     */
    public OASComDayCqDamScene7ImplScene7Upload comDayCqDamScene7ImplScene7UploadServiceImpl(Map<String, Object> params) {
        List<OAS.Param> query = new List<OAS.Param>();

        // cast query params to verify their expected type
        query.addAll(client.makeParam('post', (Boolean) params.get('post')));
        query.addAll(client.makeParam('apply', (Boolean) params.get('apply')));
        query.addAll(client.makeParam('delete', (Boolean) params.get('r_delete')));
        query.addAll(client.makeParam('action', (String) params.get('action')));
        query.addAll(client.makeParam('$location', (String) params.get('location')));
        query.addAll(client.makeParam('propertylist', (List<String>) params.get('propertylist'), 'csv'));
        query.addAll(client.makeParam('cq.dam.scene7.uploadservice.activejobtimeout.label', (Integer) params.get('cqDamScene7UploadserviceActivejobtimeoutLabel')));
        query.addAll(client.makeParam('cq.dam.scene7.uploadservice.connectionmaxperroute.label', (Integer) params.get('cqDamScene7UploadserviceConnectionmaxperrouteLabel')));

        List<OAS.Param> form = new List<OAS.Param>();

        return (OASComDayCqDamScene7ImplScene7Upload) client.invoke(
            'POST', '/system/console/configMgr/com.day.cq.dam.scene7.impl.Scene7UploadServiceImpl', '',
            query, form,
            new Map<String, Object>(),
            new Map<String, Object>(),
            new List<String>{ 'application/json', 'text/plain' },
            new List<String>(),
            new List<String> { 'aemAuth' },
            OASComDayCqDamScene7ImplScene7Upload.class
        );
    }
    /**
     * 
     * 
     * @param post  (optional)
     * @param apply  (optional)
     * @param r_delete  (optional)
     * @param action  (optional)
     * @param location  (optional)
     * @param propertylist  (optional)
     * @param getCacheExpirationUnit  (optional)
     * @param getCacheExpirationValue  (optional)
     * @return OASComDayCqDamStockIntegrationImplCa
     * @throws OAS.ApiException if fails to make API call
     */
    public OASComDayCqDamStockIntegrationImplCa comDayCqDamStockIntegrationImplCacheStockCacheConfigurationSer(Map<String, Object> params) {
        List<OAS.Param> query = new List<OAS.Param>();

        // cast query params to verify their expected type
        query.addAll(client.makeParam('post', (Boolean) params.get('post')));
        query.addAll(client.makeParam('apply', (Boolean) params.get('apply')));
        query.addAll(client.makeParam('delete', (Boolean) params.get('r_delete')));
        query.addAll(client.makeParam('action', (String) params.get('action')));
        query.addAll(client.makeParam('$location', (String) params.get('location')));
        query.addAll(client.makeParam('propertylist', (List<String>) params.get('propertylist'), 'csv'));
        query.addAll(client.makeParam('getCacheExpirationUnit', (String) params.get('getCacheExpirationUnit')));
        query.addAll(client.makeParam('getCacheExpirationValue', (Integer) params.get('getCacheExpirationValue')));

        List<OAS.Param> form = new List<OAS.Param>();

        return (OASComDayCqDamStockIntegrationImplCa) client.invoke(
            'POST', '/system/console/configMgr/com.day.cq.dam.stock.integration.impl.cache.StockCacheConfigurationServiceImpl', '',
            query, form,
            new Map<String, Object>(),
            new Map<String, Object>(),
            new List<String>{ 'application/json', 'text/plain' },
            new List<String>(),
            new List<String> { 'aemAuth' },
            OASComDayCqDamStockIntegrationImplCa.class
        );
    }
    /**
     * 
     * 
     * @param post  (optional)
     * @param apply  (optional)
     * @param r_delete  (optional)
     * @param action  (optional)
     * @param location  (optional)
     * @param propertylist  (optional)
     * @param name  (optional)
     * @param locale  (optional)
     * @param imsConfig  (optional)
     * @return OASComDayCqDamStockIntegrationImplCo
     * @throws OAS.ApiException if fails to make API call
     */
    public OASComDayCqDamStockIntegrationImplCo comDayCqDamStockIntegrationImplConfigurationStockConfiguration(Map<String, Object> params) {
        List<OAS.Param> query = new List<OAS.Param>();

        // cast query params to verify their expected type
        query.addAll(client.makeParam('post', (Boolean) params.get('post')));
        query.addAll(client.makeParam('apply', (Boolean) params.get('apply')));
        query.addAll(client.makeParam('delete', (Boolean) params.get('r_delete')));
        query.addAll(client.makeParam('action', (String) params.get('action')));
        query.addAll(client.makeParam('$location', (String) params.get('location')));
        query.addAll(client.makeParam('propertylist', (List<String>) params.get('propertylist'), 'csv'));
        query.addAll(client.makeParam('name', (String) params.get('name')));
        query.addAll(client.makeParam('locale', (String) params.get('locale')));
        query.addAll(client.makeParam('imsConfig', (String) params.get('imsConfig')));

        List<OAS.Param> form = new List<OAS.Param>();

        return (OASComDayCqDamStockIntegrationImplCo) client.invoke(
            'POST', '/system/console/configMgr/com.day.cq.dam.stock.integration.impl.configuration.StockConfigurationImpl', '',
            query, form,
            new Map<String, Object>(),
            new Map<String, Object>(),
            new List<String>{ 'application/json', 'text/plain' },
            new List<String>(),
            new List<String> { 'aemAuth' },
            OASComDayCqDamStockIntegrationImplCo.class
        );
    }
    /**
     * 
     * 
     * @param post  (optional)
     * @param apply  (optional)
     * @param r_delete  (optional)
     * @param action  (optional)
     * @param location  (optional)
     * @param propertylist  (optional)
     * @param enabled  (optional)
     * @return OASComDayCqDamVideoImplServletVideoT
     * @throws OAS.ApiException if fails to make API call
     */
    public OASComDayCqDamVideoImplServletVideoT comDayCqDamVideoImplServletVideoTestServlet(Map<String, Object> params) {
        List<OAS.Param> query = new List<OAS.Param>();

        // cast query params to verify their expected type
        query.addAll(client.makeParam('post', (Boolean) params.get('post')));
        query.addAll(client.makeParam('apply', (Boolean) params.get('apply')));
        query.addAll(client.makeParam('delete', (Boolean) params.get('r_delete')));
        query.addAll(client.makeParam('action', (String) params.get('action')));
        query.addAll(client.makeParam('$location', (String) params.get('location')));
        query.addAll(client.makeParam('propertylist', (List<String>) params.get('propertylist'), 'csv'));
        query.addAll(client.makeParam('enabled', (Boolean) params.get('enabled')));

        List<OAS.Param> form = new List<OAS.Param>();

        return (OASComDayCqDamVideoImplServletVideoT) client.invoke(
            'POST', '/system/console/configMgr/com.day.cq.dam.video.impl.servlet.VideoTestServlet', '',
            query, form,
            new Map<String, Object>(),
            new Map<String, Object>(),
            new List<String>{ 'application/json', 'text/plain' },
            new List<String>(),
            new List<String> { 'aemAuth' },
            OASComDayCqDamVideoImplServletVideoT.class
        );
    }
    /**
     * 
     * 
     * @param post  (optional)
     * @param apply  (optional)
     * @param r_delete  (optional)
     * @param action  (optional)
     * @param location  (optional)
     * @param propertylist  (optional)
     * @param maxWidth  (optional)
     * @param maxHeight  (optional)
     * @return OASComDayCqExtwidgetServletsImageSpr
     * @throws OAS.ApiException if fails to make API call
     */
    public OASComDayCqExtwidgetServletsImageSpr comDayCqExtwidgetServletsImageSpriteServlet(Map<String, Object> params) {
        List<OAS.Param> query = new List<OAS.Param>();

        // cast query params to verify their expected type
        query.addAll(client.makeParam('post', (Boolean) params.get('post')));
        query.addAll(client.makeParam('apply', (Boolean) params.get('apply')));
        query.addAll(client.makeParam('delete', (Boolean) params.get('r_delete')));
        query.addAll(client.makeParam('action', (String) params.get('action')));
        query.addAll(client.makeParam('$location', (String) params.get('location')));
        query.addAll(client.makeParam('propertylist', (List<String>) params.get('propertylist'), 'csv'));
        query.addAll(client.makeParam('maxWidth', (Integer) params.get('maxWidth')));
        query.addAll(client.makeParam('maxHeight', (Integer) params.get('maxHeight')));

        List<OAS.Param> form = new List<OAS.Param>();

        return (OASComDayCqExtwidgetServletsImageSpr) client.invoke(
            'POST', '/system/console/configMgr/com.day.cq.extwidget.servlets.ImageSpriteServlet', '',
            query, form,
            new Map<String, Object>(),
            new Map<String, Object>(),
            new List<String>{ 'application/json', 'text/plain' },
            new List<String>(),
            new List<String> { 'aemAuth' },
            OASComDayCqExtwidgetServletsImageSpr.class
        );
    }
    /**
     * 
     * 
     * @param post  (optional)
     * @param apply  (optional)
     * @param r_delete  (optional)
     * @param action  (optional)
     * @param location  (optional)
     * @param propertylist  (optional)
     * @param fontpath  (optional)
     * @param oversamplingFactor  (optional)
     * @return OASComDayCqImageInternalFontFontHelp
     * @throws OAS.ApiException if fails to make API call
     */
    public OASComDayCqImageInternalFontFontHelp comDayCqImageInternalFontFontHelper(Map<String, Object> params) {
        List<OAS.Param> query = new List<OAS.Param>();

        // cast query params to verify their expected type
        query.addAll(client.makeParam('post', (Boolean) params.get('post')));
        query.addAll(client.makeParam('apply', (Boolean) params.get('apply')));
        query.addAll(client.makeParam('delete', (Boolean) params.get('r_delete')));
        query.addAll(client.makeParam('action', (String) params.get('action')));
        query.addAll(client.makeParam('$location', (String) params.get('location')));
        query.addAll(client.makeParam('propertylist', (List<String>) params.get('propertylist'), 'csv'));
        query.addAll(client.makeParams('fontpath', (List<String>) params.get('fontpath')));
        query.addAll(client.makeParam('oversamplingFactor', (Integer) params.get('oversamplingFactor')));

        List<OAS.Param> form = new List<OAS.Param>();

        return (OASComDayCqImageInternalFontFontHelp) client.invoke(
            'POST', '/system/console/configMgr/com.day.cq.image.internal.font.FontHelper', '',
            query, form,
            new Map<String, Object>(),
            new Map<String, Object>(),
            new List<String>{ 'application/json', 'text/plain' },
            new List<String>(),
            new List<String> { 'aemAuth' },
            OASComDayCqImageInternalFontFontHelp.class
        );
    }
    /**
     * 
     * 
     * @param post  (optional)
     * @param apply  (optional)
     * @param r_delete  (optional)
     * @param action  (optional)
     * @param location  (optional)
     * @param propertylist  (optional)
     * @param clusterLevelEnable  (optional)
     * @param clusterMasterLevel  (optional)
     * @param clusterSlaveLevel  (optional)
     * @return OASComDayCqJcrclustersupportClusterS
     * @throws OAS.ApiException if fails to make API call
     */
    public OASComDayCqJcrclustersupportClusterS comDayCqJcrclustersupportClusterStartLevelController(Map<String, Object> params) {
        List<OAS.Param> query = new List<OAS.Param>();

        // cast query params to verify their expected type
        query.addAll(client.makeParam('post', (Boolean) params.get('post')));
        query.addAll(client.makeParam('apply', (Boolean) params.get('apply')));
        query.addAll(client.makeParam('delete', (Boolean) params.get('r_delete')));
        query.addAll(client.makeParam('action', (String) params.get('action')));
        query.addAll(client.makeParam('$location', (String) params.get('location')));
        query.addAll(client.makeParam('propertylist', (List<String>) params.get('propertylist'), 'csv'));
        query.addAll(client.makeParam('cluster.level.enable', (Boolean) params.get('clusterLevelEnable')));
        query.addAll(client.makeParam('cluster.master.level', (Integer) params.get('clusterMasterLevel')));
        query.addAll(client.makeParam('cluster.slave.level', (Integer) params.get('clusterSlaveLevel')));

        List<OAS.Param> form = new List<OAS.Param>();

        return (OASComDayCqJcrclustersupportClusterS) client.invoke(
            'POST', '/system/console/configMgr/com.day.cq.jcrclustersupport.ClusterStartLevelController', '',
            query, form,
            new Map<String, Object>(),
            new Map<String, Object>(),
            new List<String>{ 'application/json', 'text/plain' },
            new List<String>(),
            new List<String> { 'aemAuth' },
            OASComDayCqJcrclustersupportClusterS.class
        );
    }
    /**
     * 
     * 
     * @param post  (optional)
     * @param apply  (optional)
     * @param r_delete  (optional)
     * @param action  (optional)
     * @param location  (optional)
     * @param propertylist  (optional)
     * @param smtpHost  (optional)
     * @param smtpPort  (optional)
     * @param smtpUser  (optional)
     * @param smtpPassword  (optional)
     * @param fromAddress  (optional)
     * @param smtpSsl  (optional)
     * @param smtpStarttls  (optional)
     * @param debugEmail  (optional)
     * @return OASComDayCqMailerDefaultMailServiceI
     * @throws OAS.ApiException if fails to make API call
     */
    public OASComDayCqMailerDefaultMailServiceI comDayCqMailerDefaultMailService(Map<String, Object> params) {
        List<OAS.Param> query = new List<OAS.Param>();

        // cast query params to verify their expected type
        query.addAll(client.makeParam('post', (Boolean) params.get('post')));
        query.addAll(client.makeParam('apply', (Boolean) params.get('apply')));
        query.addAll(client.makeParam('delete', (Boolean) params.get('r_delete')));
        query.addAll(client.makeParam('action', (String) params.get('action')));
        query.addAll(client.makeParam('$location', (String) params.get('location')));
        query.addAll(client.makeParam('propertylist', (List<String>) params.get('propertylist'), 'csv'));
        query.addAll(client.makeParam('smtp.host', (String) params.get('smtpHost')));
        query.addAll(client.makeParam('smtp.port', (Integer) params.get('smtpPort')));
        query.addAll(client.makeParam('smtp.user', (String) params.get('smtpUser')));
        query.addAll(client.makeParam('smtp.password', (String) params.get('smtpPassword')));
        query.addAll(client.makeParam('from.address', (String) params.get('fromAddress')));
        query.addAll(client.makeParam('smtp.ssl', (Boolean) params.get('smtpSsl')));
        query.addAll(client.makeParam('smtp.starttls', (Boolean) params.get('smtpStarttls')));
        query.addAll(client.makeParam('debug.email', (Boolean) params.get('debugEmail')));

        List<OAS.Param> form = new List<OAS.Param>();

        return (OASComDayCqMailerDefaultMailServiceI) client.invoke(
            'POST', '/system/console/configMgr/com.day.cq.mailer.DefaultMailService', '',
            query, form,
            new Map<String, Object>(),
            new Map<String, Object>(),
            new List<String>{ 'application/json', 'text/plain' },
            new List<String>(),
            new List<String> { 'aemAuth' },
            OASComDayCqMailerDefaultMailServiceI.class
        );
    }
    /**
     * 
     * 
     * @param post  (optional)
     * @param apply  (optional)
     * @param r_delete  (optional)
     * @param action  (optional)
     * @param location  (optional)
     * @param propertylist  (optional)
     * @param maxRecipientCount  (optional)
     * @return OASComDayCqMailerImplCqMailingServic
     * @throws OAS.ApiException if fails to make API call
     */
    public OASComDayCqMailerImplCqMailingServic comDayCqMailerImplCqMailingService(Map<String, Object> params) {
        List<OAS.Param> query = new List<OAS.Param>();

        // cast query params to verify their expected type
        query.addAll(client.makeParam('post', (Boolean) params.get('post')));
        query.addAll(client.makeParam('apply', (Boolean) params.get('apply')));
        query.addAll(client.makeParam('delete', (Boolean) params.get('r_delete')));
        query.addAll(client.makeParam('action', (String) params.get('action')));
        query.addAll(client.makeParam('$location', (String) params.get('location')));
        query.addAll(client.makeParam('propertylist', (List<String>) params.get('propertylist'), 'csv'));
        query.addAll(client.makeParam('max.recipient.count', (String) params.get('maxRecipientCount')));

        List<OAS.Param> form = new List<OAS.Param>();

        return (OASComDayCqMailerImplCqMailingServic) client.invoke(
            'POST', '/system/console/configMgr/com.day.cq.mailer.impl.CqMailingService', '',
            query, form,
            new Map<String, Object>(),
            new Map<String, Object>(),
            new List<String>{ 'application/json', 'text/plain' },
            new List<String>(),
            new List<String> { 'aemAuth' },
            OASComDayCqMailerImplCqMailingServic.class
        );
    }
    /**
     * 
     * 
     * @param post  (optional)
     * @param apply  (optional)
     * @param r_delete  (optional)
     * @param action  (optional)
     * @param location  (optional)
     * @param propertylist  (optional)
     * @param mailerEmailCharset  (optional)
     * @return OASComDayCqMailerImplEmailCqEmailTem
     * @throws OAS.ApiException if fails to make API call
     */
    public OASComDayCqMailerImplEmailCqEmailTem comDayCqMailerImplEmailCqEmailTemplateFactory(Map<String, Object> params) {
        List<OAS.Param> query = new List<OAS.Param>();

        // cast query params to verify their expected type
        query.addAll(client.makeParam('post', (Boolean) params.get('post')));
        query.addAll(client.makeParam('apply', (Boolean) params.get('apply')));
        query.addAll(client.makeParam('delete', (Boolean) params.get('r_delete')));
        query.addAll(client.makeParam('action', (String) params.get('action')));
        query.addAll(client.makeParam('$location', (String) params.get('location')));
        query.addAll(client.makeParam('propertylist', (List<String>) params.get('propertylist'), 'csv'));
        query.addAll(client.makeParam('mailer.email.charset', (String) params.get('mailerEmailCharset')));

        List<OAS.Param> form = new List<OAS.Param>();

        return (OASComDayCqMailerImplEmailCqEmailTem) client.invoke(
            'POST', '/system/console/configMgr/com.day.cq.mailer.impl.email.CqEmailTemplateFactory', '',
            query, form,
            new Map<String, Object>(),
            new Map<String, Object>(),
            new List<String>{ 'application/json', 'text/plain' },
            new List<String>(),
            new List<String> { 'aemAuth' },
            OASComDayCqMailerImplEmailCqEmailTem.class
        );
    }
    /**
     * 
     * 
     * @param post  (optional)
     * @param apply  (optional)
     * @param r_delete  (optional)
     * @param action  (optional)
     * @param location  (optional)
     * @param propertylist  (optional)
     * @param mailerEmailEmbed  (optional)
     * @param mailerEmailCharset  (optional)
     * @param mailerEmailRetrieverUserID  (optional)
     * @param mailerEmailRetrieverUserPWD  (optional)
     * @return OASComDayCqMailerImplEmailCqRetrieve
     * @throws OAS.ApiException if fails to make API call
     */
    public OASComDayCqMailerImplEmailCqRetrieve comDayCqMailerImplEmailCqRetrieverTemplateFactory(Map<String, Object> params) {
        List<OAS.Param> query = new List<OAS.Param>();

        // cast query params to verify their expected type
        query.addAll(client.makeParam('post', (Boolean) params.get('post')));
        query.addAll(client.makeParam('apply', (Boolean) params.get('apply')));
        query.addAll(client.makeParam('delete', (Boolean) params.get('r_delete')));
        query.addAll(client.makeParam('action', (String) params.get('action')));
        query.addAll(client.makeParam('$location', (String) params.get('location')));
        query.addAll(client.makeParam('propertylist', (List<String>) params.get('propertylist'), 'csv'));
        query.addAll(client.makeParam('mailer.email.embed', (Boolean) params.get('mailerEmailEmbed')));
        query.addAll(client.makeParam('mailer.email.charset', (String) params.get('mailerEmailCharset')));
        query.addAll(client.makeParam('mailer.email.retrieverUserID', (String) params.get('mailerEmailRetrieverUserID')));
        query.addAll(client.makeParam('mailer.email.retrieverUserPWD', (String) params.get('mailerEmailRetrieverUserPWD')));

        List<OAS.Param> form = new List<OAS.Param>();

        return (OASComDayCqMailerImplEmailCqRetrieve) client.invoke(
            'POST', '/system/console/configMgr/com.day.cq.mailer.impl.email.CqRetrieverTemplateFactory', '',
            query, form,
            new Map<String, Object>(),
            new Map<String, Object>(),
            new List<String>{ 'application/json', 'text/plain' },
            new List<String>(),
            new List<String> { 'aemAuth' },
            OASComDayCqMailerImplEmailCqRetrieve.class
        );
    }
    /**
     * 
     * 
     * @param post  (optional)
     * @param apply  (optional)
     * @param r_delete  (optional)
     * @param action  (optional)
     * @param location  (optional)
     * @param propertylist  (optional)
     * @param aemMcmCampaignFormConstraints  (optional)
     * @param aemMcmCampaignPublicUrl  (optional)
     * @param aemMcmCampaignRelaxedSSL  (optional)
     * @return OASComDayCqMcmCampaignImplIntegratio
     * @throws OAS.ApiException if fails to make API call
     */
    public OASComDayCqMcmCampaignImplIntegratio comDayCqMcmCampaignImplIntegrationConfigImpl(Map<String, Object> params) {
        List<OAS.Param> query = new List<OAS.Param>();

        // cast query params to verify their expected type
        query.addAll(client.makeParam('post', (Boolean) params.get('post')));
        query.addAll(client.makeParam('apply', (Boolean) params.get('apply')));
        query.addAll(client.makeParam('delete', (Boolean) params.get('r_delete')));
        query.addAll(client.makeParam('action', (String) params.get('action')));
        query.addAll(client.makeParam('$location', (String) params.get('location')));
        query.addAll(client.makeParam('propertylist', (List<String>) params.get('propertylist'), 'csv'));
        query.addAll(client.makeParams('aem.mcm.campaign.formConstraints', (List<String>) params.get('aemMcmCampaignFormConstraints')));
        query.addAll(client.makeParam('aem.mcm.campaign.publicUrl', (String) params.get('aemMcmCampaignPublicUrl')));
        query.addAll(client.makeParam('aem.mcm.campaign.relaxedSSL', (Boolean) params.get('aemMcmCampaignRelaxedSSL')));

        List<OAS.Param> form = new List<OAS.Param>();

        return (OASComDayCqMcmCampaignImplIntegratio) client.invoke(
            'POST', '/system/console/configMgr/com.day.cq.mcm.campaign.impl.IntegrationConfigImpl', '',
            query, form,
            new Map<String, Object>(),
            new Map<String, Object>(),
            new List<String>{ 'application/json', 'text/plain' },
            new List<String>(),
            new List<String> { 'aemAuth' },
            OASComDayCqMcmCampaignImplIntegratio.class
        );
    }
    /**
     * 
     * 
     * @param post  (optional)
     * @param apply  (optional)
     * @param r_delete  (optional)
     * @param action  (optional)
     * @param location  (optional)
     * @param propertylist  (optional)
     * @param serviceRanking  (optional)
     * @param tagpattern  (optional)
     * @return OASComDayCqMcmCampaignImporterPerson
     * @throws OAS.ApiException if fails to make API call
     */
    public OASComDayCqMcmCampaignImporterPerson comDayCqMcmCampaignImporterPersonalizedTextHandlerFactory(Map<String, Object> params) {
        List<OAS.Param> query = new List<OAS.Param>();

        // cast query params to verify their expected type
        query.addAll(client.makeParam('post', (Boolean) params.get('post')));
        query.addAll(client.makeParam('apply', (Boolean) params.get('apply')));
        query.addAll(client.makeParam('delete', (Boolean) params.get('r_delete')));
        query.addAll(client.makeParam('action', (String) params.get('action')));
        query.addAll(client.makeParam('$location', (String) params.get('location')));
        query.addAll(client.makeParam('propertylist', (List<String>) params.get('propertylist'), 'csv'));
        query.addAll(client.makeParam('service.ranking', (Integer) params.get('serviceRanking')));
        query.addAll(client.makeParam('tagpattern', (String) params.get('tagpattern')));

        List<OAS.Param> form = new List<OAS.Param>();

        return (OASComDayCqMcmCampaignImporterPerson) client.invoke(
            'POST', '/system/console/configMgr/com.day.cq.mcm.campaign.importer.PersonalizedTextHandlerFactory', '',
            query, form,
            new Map<String, Object>(),
            new Map<String, Object>(),
            new List<String>{ 'application/json', 'text/plain' },
            new List<String>(),
            new List<String> { 'aemAuth' },
            OASComDayCqMcmCampaignImporterPerson.class
        );
    }
    /**
     * 
     * 
     * @param post  (optional)
     * @param apply  (optional)
     * @param r_delete  (optional)
     * @param action  (optional)
     * @param location  (optional)
     * @param propertylist  (optional)
     * @param fromAddress  (optional)
     * @param senderHost  (optional)
     * @param maxBounceCount  (optional)
     * @return OASComDayCqMcmCoreNewsletterNewslett
     * @throws OAS.ApiException if fails to make API call
     */
    public OASComDayCqMcmCoreNewsletterNewslett comDayCqMcmCoreNewsletterNewsletterEmailServiceImpl(Map<String, Object> params) {
        List<OAS.Param> query = new List<OAS.Param>();

        // cast query params to verify their expected type
        query.addAll(client.makeParam('post', (Boolean) params.get('post')));
        query.addAll(client.makeParam('apply', (Boolean) params.get('apply')));
        query.addAll(client.makeParam('delete', (Boolean) params.get('r_delete')));
        query.addAll(client.makeParam('action', (String) params.get('action')));
        query.addAll(client.makeParam('$location', (String) params.get('location')));
        query.addAll(client.makeParam('propertylist', (List<String>) params.get('propertylist'), 'csv'));
        query.addAll(client.makeParam('from.address', (String) params.get('fromAddress')));
        query.addAll(client.makeParam('sender.host', (String) params.get('senderHost')));
        query.addAll(client.makeParam('max.bounce.count', (String) params.get('maxBounceCount')));

        List<OAS.Param> form = new List<OAS.Param>();

        return (OASComDayCqMcmCoreNewsletterNewslett) client.invoke(
            'POST', '/system/console/configMgr/com.day.cq.mcm.core.newsletter.NewsletterEmailServiceImpl', '',
            query, form,
            new Map<String, Object>(),
            new Map<String, Object>(),
            new List<String>{ 'application/json', 'text/plain' },
            new List<String>(),
            new List<String> { 'aemAuth' },
            OASComDayCqMcmCoreNewsletterNewslett.class
        );
    }
    /**
     * 
     * 
     * @param post  (optional)
     * @param apply  (optional)
     * @param r_delete  (optional)
     * @param action  (optional)
     * @param location  (optional)
     * @param propertylist  (optional)
     * @param experienceIndirection  (optional)
     * @param touchpointIndirection  (optional)
     * @return OASComDayCqMcmImplMCMConfigurationIn
     * @throws OAS.ApiException if fails to make API call
     */
    public OASComDayCqMcmImplMCMConfigurationIn comDayCqMcmImplMCMConfiguration(Map<String, Object> params) {
        List<OAS.Param> query = new List<OAS.Param>();

        // cast query params to verify their expected type
        query.addAll(client.makeParam('post', (Boolean) params.get('post')));
        query.addAll(client.makeParam('apply', (Boolean) params.get('apply')));
        query.addAll(client.makeParam('delete', (Boolean) params.get('r_delete')));
        query.addAll(client.makeParam('action', (String) params.get('action')));
        query.addAll(client.makeParam('$location', (String) params.get('location')));
        query.addAll(client.makeParam('propertylist', (List<String>) params.get('propertylist'), 'csv'));
        query.addAll(client.makeParams('experience.indirection', (List<String>) params.get('experienceIndirection')));
        query.addAll(client.makeParams('touchpoint.indirection', (List<String>) params.get('touchpointIndirection')));

        List<OAS.Param> form = new List<OAS.Param>();

        return (OASComDayCqMcmImplMCMConfigurationIn) client.invoke(
            'POST', '/system/console/configMgr/com.day.cq.mcm.impl.MCMConfiguration', '',
            query, form,
            new Map<String, Object>(),
            new Map<String, Object>(),
            new List<String>{ 'application/json', 'text/plain' },
            new List<String>(),
            new List<String> { 'aemAuth' },
            OASComDayCqMcmImplMCMConfigurationIn.class
        );
    }
    /**
     * 
     * 
     * @param post  (optional)
     * @param apply  (optional)
     * @param r_delete  (optional)
     * @param action  (optional)
     * @param location  (optional)
     * @param propertylist  (optional)
     * @param serviceRanking  (optional)
     * @param tagpattern  (optional)
     * @param componentResourceType  (optional)
     * @return OASComDayCqMcmLandingpageParserTagha
     * @throws OAS.ApiException if fails to make API call
     */
    public OASComDayCqMcmLandingpageParserTagha comDayCqMcmLandingpageParserTaghandlersCtaClickThroughComponen(Map<String, Object> params) {
        List<OAS.Param> query = new List<OAS.Param>();

        // cast query params to verify their expected type
        query.addAll(client.makeParam('post', (Boolean) params.get('post')));
        query.addAll(client.makeParam('apply', (Boolean) params.get('apply')));
        query.addAll(client.makeParam('delete', (Boolean) params.get('r_delete')));
        query.addAll(client.makeParam('action', (String) params.get('action')));
        query.addAll(client.makeParam('$location', (String) params.get('location')));
        query.addAll(client.makeParam('propertylist', (List<String>) params.get('propertylist'), 'csv'));
        query.addAll(client.makeParam('service.ranking', (Integer) params.get('serviceRanking')));
        query.addAll(client.makeParam('tagpattern', (String) params.get('tagpattern')));
        query.addAll(client.makeParam('component.resourceType', (String) params.get('componentResourceType')));

        List<OAS.Param> form = new List<OAS.Param>();

        return (OASComDayCqMcmLandingpageParserTagha) client.invoke(
            'POST', '/system/console/configMgr/com.day.cq.mcm.landingpage.parser.taghandlers.cta.ClickThroughComponentTagHandlerFactory', '',
            query, form,
            new Map<String, Object>(),
            new Map<String, Object>(),
            new List<String>{ 'application/json', 'text/plain' },
            new List<String>(),
            new List<String> { 'aemAuth' },
            OASComDayCqMcmLandingpageParserTagha.class
        );
    }
    /**
     * 
     * 
     * @param post  (optional)
     * @param apply  (optional)
     * @param r_delete  (optional)
     * @param action  (optional)
     * @param location  (optional)
     * @param propertylist  (optional)
     * @param serviceRanking  (optional)
     * @param tagpattern  (optional)
     * @param componentResourceType  (optional)
     * @return OASComDayCqMcmLandingpageParserTagha
     * @throws OAS.ApiException if fails to make API call
     */
    public OASComDayCqMcmLandingpageParserTagha comDayCqMcmLandingpageParserTaghandlersCtaGraphicalClickThroug(Map<String, Object> params) {
        List<OAS.Param> query = new List<OAS.Param>();

        // cast query params to verify their expected type
        query.addAll(client.makeParam('post', (Boolean) params.get('post')));
        query.addAll(client.makeParam('apply', (Boolean) params.get('apply')));
        query.addAll(client.makeParam('delete', (Boolean) params.get('r_delete')));
        query.addAll(client.makeParam('action', (String) params.get('action')));
        query.addAll(client.makeParam('$location', (String) params.get('location')));
        query.addAll(client.makeParam('propertylist', (List<String>) params.get('propertylist'), 'csv'));
        query.addAll(client.makeParam('service.ranking', (Integer) params.get('serviceRanking')));
        query.addAll(client.makeParam('tagpattern', (String) params.get('tagpattern')));
        query.addAll(client.makeParam('component.resourceType', (String) params.get('componentResourceType')));

        List<OAS.Param> form = new List<OAS.Param>();

        return (OASComDayCqMcmLandingpageParserTagha) client.invoke(
            'POST', '/system/console/configMgr/com.day.cq.mcm.landingpage.parser.taghandlers.cta.GraphicalClickThroughComponentTagHandlerFactory', '',
            query, form,
            new Map<String, Object>(),
            new Map<String, Object>(),
            new List<String>{ 'application/json', 'text/plain' },
            new List<String>(),
            new List<String> { 'aemAuth' },
            OASComDayCqMcmLandingpageParserTagha.class
        );
    }
    /**
     * 
     * 
     * @param post  (optional)
     * @param apply  (optional)
     * @param r_delete  (optional)
     * @param action  (optional)
     * @param location  (optional)
     * @param propertylist  (optional)
     * @param serviceRanking  (optional)
     * @param tagpattern  (optional)
     * @return OASComDayCqMcmLandingpageParserTagha
     * @throws OAS.ApiException if fails to make API call
     */
    public OASComDayCqMcmLandingpageParserTagha comDayCqMcmLandingpageParserTaghandlersCtaLeadFormCTAComponent(Map<String, Object> params) {
        List<OAS.Param> query = new List<OAS.Param>();

        // cast query params to verify their expected type
        query.addAll(client.makeParam('post', (Boolean) params.get('post')));
        query.addAll(client.makeParam('apply', (Boolean) params.get('apply')));
        query.addAll(client.makeParam('delete', (Boolean) params.get('r_delete')));
        query.addAll(client.makeParam('action', (String) params.get('action')));
        query.addAll(client.makeParam('$location', (String) params.get('location')));
        query.addAll(client.makeParam('propertylist', (List<String>) params.get('propertylist'), 'csv'));
        query.addAll(client.makeParam('service.ranking', (Integer) params.get('serviceRanking')));
        query.addAll(client.makeParam('tagpattern', (String) params.get('tagpattern')));

        List<OAS.Param> form = new List<OAS.Param>();

        return (OASComDayCqMcmLandingpageParserTagha) client.invoke(
            'POST', '/system/console/configMgr/com.day.cq.mcm.landingpage.parser.taghandlers.cta.LeadFormCTAComponentTagHandlerFactory', '',
            query, form,
            new Map<String, Object>(),
            new Map<String, Object>(),
            new List<String>{ 'application/json', 'text/plain' },
            new List<String>(),
            new List<String> { 'aemAuth' },
            OASComDayCqMcmLandingpageParserTagha.class
        );
    }
    /**
     * 
     * 
     * @param post  (optional)
     * @param apply  (optional)
     * @param r_delete  (optional)
     * @param action  (optional)
     * @param location  (optional)
     * @param propertylist  (optional)
     * @param serviceRanking  (optional)
     * @param tagpattern  (optional)
     * @return OASComDayCqMcmLandingpageParserTagha
     * @throws OAS.ApiException if fails to make API call
     */
    public OASComDayCqMcmLandingpageParserTagha comDayCqMcmLandingpageParserTaghandlersMboxMBoxExperienceTagHa(Map<String, Object> params) {
        List<OAS.Param> query = new List<OAS.Param>();

        // cast query params to verify their expected type
        query.addAll(client.makeParam('post', (Boolean) params.get('post')));
        query.addAll(client.makeParam('apply', (Boolean) params.get('apply')));
        query.addAll(client.makeParam('delete', (Boolean) params.get('r_delete')));
        query.addAll(client.makeParam('action', (String) params.get('action')));
        query.addAll(client.makeParam('$location', (String) params.get('location')));
        query.addAll(client.makeParam('propertylist', (List<String>) params.get('propertylist'), 'csv'));
        query.addAll(client.makeParam('service.ranking', (Integer) params.get('serviceRanking')));
        query.addAll(client.makeParam('tagpattern', (String) params.get('tagpattern')));

        List<OAS.Param> form = new List<OAS.Param>();

        return (OASComDayCqMcmLandingpageParserTagha) client.invoke(
            'POST', '/system/console/configMgr/com.day.cq.mcm.landingpage.parser.taghandlers.mbox.MBoxExperienceTagHandlerFactory', '',
            query, form,
            new Map<String, Object>(),
            new Map<String, Object>(),
            new List<String>{ 'application/json', 'text/plain' },
            new List<String>(),
            new List<String> { 'aemAuth' },
            OASComDayCqMcmLandingpageParserTagha.class
        );
    }
    /**
     * 
     * 
     * @param post  (optional)
     * @param apply  (optional)
     * @param r_delete  (optional)
     * @param action  (optional)
     * @param location  (optional)
     * @param propertylist  (optional)
     * @param serviceRanking  (optional)
     * @param tagpattern  (optional)
     * @param componentResourceType  (optional)
     * @return OASComDayCqMcmLandingpageParserTagha
     * @throws OAS.ApiException if fails to make API call
     */
    public OASComDayCqMcmLandingpageParserTagha comDayCqMcmLandingpageParserTaghandlersMboxTargetComponentTagH(Map<String, Object> params) {
        List<OAS.Param> query = new List<OAS.Param>();

        // cast query params to verify their expected type
        query.addAll(client.makeParam('post', (Boolean) params.get('post')));
        query.addAll(client.makeParam('apply', (Boolean) params.get('apply')));
        query.addAll(client.makeParam('delete', (Boolean) params.get('r_delete')));
        query.addAll(client.makeParam('action', (String) params.get('action')));
        query.addAll(client.makeParam('$location', (String) params.get('location')));
        query.addAll(client.makeParam('propertylist', (List<String>) params.get('propertylist'), 'csv'));
        query.addAll(client.makeParam('service.ranking', (Integer) params.get('serviceRanking')));
        query.addAll(client.makeParam('tagpattern', (String) params.get('tagpattern')));
        query.addAll(client.makeParam('component.resourceType', (String) params.get('componentResourceType')));

        List<OAS.Param> form = new List<OAS.Param>();

        return (OASComDayCqMcmLandingpageParserTagha) client.invoke(
            'POST', '/system/console/configMgr/com.day.cq.mcm.landingpage.parser.taghandlers.mbox.TargetComponentTagHandlerFactory', '',
            query, form,
            new Map<String, Object>(),
            new Map<String, Object>(),
            new List<String>{ 'application/json', 'text/plain' },
            new List<String>(),
            new List<String> { 'aemAuth' },
            OASComDayCqMcmLandingpageParserTagha.class
        );
    }
    /**
     * 
     * 
     * @param post  (optional)
     * @param apply  (optional)
     * @param r_delete  (optional)
     * @param action  (optional)
     * @param location  (optional)
     * @param propertylist  (optional)
     * @param eventFilter  (optional)
     * @return OASComDayCqNotificationImplNotificat
     * @throws OAS.ApiException if fails to make API call
     */
    public OASComDayCqNotificationImplNotificat comDayCqNotificationImplNotificationServiceImpl(Map<String, Object> params) {
        List<OAS.Param> query = new List<OAS.Param>();

        // cast query params to verify their expected type
        query.addAll(client.makeParam('post', (Boolean) params.get('post')));
        query.addAll(client.makeParam('apply', (Boolean) params.get('apply')));
        query.addAll(client.makeParam('delete', (Boolean) params.get('r_delete')));
        query.addAll(client.makeParam('action', (String) params.get('action')));
        query.addAll(client.makeParam('$location', (String) params.get('location')));
        query.addAll(client.makeParam('propertylist', (List<String>) params.get('propertylist'), 'csv'));
        query.addAll(client.makeParam('event.filter', (String) params.get('eventFilter')));

        List<OAS.Param> form = new List<OAS.Param>();

        return (OASComDayCqNotificationImplNotificat) client.invoke(
            'POST', '/system/console/configMgr/com.day.cq.notification.impl.NotificationServiceImpl', '',
            query, form,
            new Map<String, Object>(),
            new Map<String, Object>(),
            new List<String>{ 'application/json', 'text/plain' },
            new List<String>(),
            new List<String> { 'aemAuth' },
            OASComDayCqNotificationImplNotificat.class
        );
    }
    /**
     * 
     * 
     * @param post  (optional)
     * @param apply  (optional)
     * @param r_delete  (optional)
     * @param action  (optional)
     * @param location  (optional)
     * @param propertylist  (optional)
     * @param forcelocation  (optional)
     * @return OASComDayCqPersonalizationImplServle
     * @throws OAS.ApiException if fails to make API call
     */
    public OASComDayCqPersonalizationImplServle comDayCqPersonalizationImplServletsTargetingConfigurationServlet(Map<String, Object> params) {
        List<OAS.Param> query = new List<OAS.Param>();

        // cast query params to verify their expected type
        query.addAll(client.makeParam('post', (Boolean) params.get('post')));
        query.addAll(client.makeParam('apply', (Boolean) params.get('apply')));
        query.addAll(client.makeParam('delete', (Boolean) params.get('r_delete')));
        query.addAll(client.makeParam('action', (String) params.get('action')));
        query.addAll(client.makeParam('$location', (String) params.get('location')));
        query.addAll(client.makeParam('propertylist', (List<String>) params.get('propertylist'), 'csv'));
        query.addAll(client.makeParam('forcelocation', (Boolean) params.get('forcelocation')));

        List<OAS.Param> form = new List<OAS.Param>();

        return (OASComDayCqPersonalizationImplServle) client.invoke(
            'POST', '/system/console/configMgr/com.day.cq.personalization.impl.servlets.TargetingConfigurationServlet', '',
            query, form,
            new Map<String, Object>(),
            new Map<String, Object>(),
            new List<String>{ 'application/json', 'text/plain' },
            new List<String>(),
            new List<String> { 'aemAuth' },
            OASComDayCqPersonalizationImplServle.class
        );
    }
    /**
     * 
     * 
     * @param post  (optional)
     * @param apply  (optional)
     * @param r_delete  (optional)
     * @param action  (optional)
     * @param location  (optional)
     * @param propertylist  (optional)
     * @param id  (optional)
     * @param enabled  (optional)
     * @param reference  (optional)
     * @param interval  (optional)
     * @param expression  (optional)
     * @param source  (optional)
     * @param target  (optional)
     * @param login  (optional)
     * @param password  (optional)
     * @return OASComDayCqPollingImporterImplManage
     * @throws OAS.ApiException if fails to make API call
     */
    public OASComDayCqPollingImporterImplManage comDayCqPollingImporterImplManagedPollConfigImpl(Map<String, Object> params) {
        List<OAS.Param> query = new List<OAS.Param>();

        // cast query params to verify their expected type
        query.addAll(client.makeParam('post', (Boolean) params.get('post')));
        query.addAll(client.makeParam('apply', (Boolean) params.get('apply')));
        query.addAll(client.makeParam('delete', (Boolean) params.get('r_delete')));
        query.addAll(client.makeParam('action', (String) params.get('action')));
        query.addAll(client.makeParam('$location', (String) params.get('location')));
        query.addAll(client.makeParam('propertylist', (List<String>) params.get('propertylist'), 'csv'));
        query.addAll(client.makeParam('id', (String) params.get('id')));
        query.addAll(client.makeParam('enabled', (Boolean) params.get('enabled')));
        query.addAll(client.makeParam('reference', (Boolean) params.get('reference')));
        query.addAll(client.makeParam('interval', (Integer) params.get('interval')));
        query.addAll(client.makeParam('expression', (String) params.get('expression')));
        query.addAll(client.makeParam('source', (String) params.get('source')));
        query.addAll(client.makeParam('target', (String) params.get('target')));
        query.addAll(client.makeParam('login', (String) params.get('login')));
        query.addAll(client.makeParam('password', (String) params.get('password')));

        List<OAS.Param> form = new List<OAS.Param>();

        return (OASComDayCqPollingImporterImplManage) client.invoke(
            'POST', '/system/console/configMgr/com.day.cq.polling.importer.impl.ManagedPollConfigImpl', '',
            query, form,
            new Map<String, Object>(),
            new Map<String, Object>(),
            new List<String>{ 'application/json', 'text/plain' },
            new List<String>(),
            new List<String> { 'aemAuth' },
            OASComDayCqPollingImporterImplManage.class
        );
    }
    /**
     * 
     * 
     * @param post  (optional)
     * @param apply  (optional)
     * @param r_delete  (optional)
     * @param action  (optional)
     * @param location  (optional)
     * @param propertylist  (optional)
     * @param importerUser  (optional)
     * @return OASComDayCqPollingImporterImplManage
     * @throws OAS.ApiException if fails to make API call
     */
    public OASComDayCqPollingImporterImplManage comDayCqPollingImporterImplManagedPollingImporterImpl(Map<String, Object> params) {
        List<OAS.Param> query = new List<OAS.Param>();

        // cast query params to verify their expected type
        query.addAll(client.makeParam('post', (Boolean) params.get('post')));
        query.addAll(client.makeParam('apply', (Boolean) params.get('apply')));
        query.addAll(client.makeParam('delete', (Boolean) params.get('r_delete')));
        query.addAll(client.makeParam('action', (String) params.get('action')));
        query.addAll(client.makeParam('$location', (String) params.get('location')));
        query.addAll(client.makeParam('propertylist', (List<String>) params.get('propertylist'), 'csv'));
        query.addAll(client.makeParam('importer.user', (String) params.get('importerUser')));

        List<OAS.Param> form = new List<OAS.Param>();

        return (OASComDayCqPollingImporterImplManage) client.invoke(
            'POST', '/system/console/configMgr/com.day.cq.polling.importer.impl.ManagedPollingImporterImpl', '',
            query, form,
            new Map<String, Object>(),
            new Map<String, Object>(),
            new List<String>{ 'application/json', 'text/plain' },
            new List<String>(),
            new List<String> { 'aemAuth' },
            OASComDayCqPollingImporterImplManage.class
        );
    }
    /**
     * 
     * 
     * @param post  (optional)
     * @param apply  (optional)
     * @param r_delete  (optional)
     * @param action  (optional)
     * @param location  (optional)
     * @param propertylist  (optional)
     * @param importerMinInterval  (optional)
     * @param importerUser  (optional)
     * @param excludePaths  (optional)
     * @param includePaths  (optional)
     * @return OASComDayCqPollingImporterImplPollin
     * @throws OAS.ApiException if fails to make API call
     */
    public OASComDayCqPollingImporterImplPollin comDayCqPollingImporterImplPollingImporterImpl(Map<String, Object> params) {
        List<OAS.Param> query = new List<OAS.Param>();

        // cast query params to verify their expected type
        query.addAll(client.makeParam('post', (Boolean) params.get('post')));
        query.addAll(client.makeParam('apply', (Boolean) params.get('apply')));
        query.addAll(client.makeParam('delete', (Boolean) params.get('r_delete')));
        query.addAll(client.makeParam('action', (String) params.get('action')));
        query.addAll(client.makeParam('$location', (String) params.get('location')));
        query.addAll(client.makeParam('propertylist', (List<String>) params.get('propertylist'), 'csv'));
        query.addAll(client.makeParam('importer.min.interval', (Integer) params.get('importerMinInterval')));
        query.addAll(client.makeParam('importer.user', (String) params.get('importerUser')));
        query.addAll(client.makeParams('exclude.paths', (List<String>) params.get('excludePaths')));
        query.addAll(client.makeParams('include.paths', (List<String>) params.get('includePaths')));

        List<OAS.Param> form = new List<OAS.Param>();

        return (OASComDayCqPollingImporterImplPollin) client.invoke(
            'POST', '/system/console/configMgr/com.day.cq.polling.importer.impl.PollingImporterImpl', '',
            query, form,
            new Map<String, Object>(),
            new Map<String, Object>(),
            new List<String>{ 'application/json', 'text/plain' },
            new List<String>(),
            new List<String> { 'aemAuth' },
            OASComDayCqPollingImporterImplPollin.class
        );
    }
    /**
     * 
     * 
     * @param post  (optional)
     * @param apply  (optional)
     * @param r_delete  (optional)
     * @param action  (optional)
     * @param location  (optional)
     * @param propertylist  (optional)
     * @param serviceRanking  (optional)
     * @return OASComDayCqReplicationAuditReplicati
     * @throws OAS.ApiException if fails to make API call
     */
    public OASComDayCqReplicationAuditReplicati comDayCqReplicationAuditReplicationEventListener(Map<String, Object> params) {
        List<OAS.Param> query = new List<OAS.Param>();

        // cast query params to verify their expected type
        query.addAll(client.makeParam('post', (Boolean) params.get('post')));
        query.addAll(client.makeParam('apply', (Boolean) params.get('apply')));
        query.addAll(client.makeParam('delete', (Boolean) params.get('r_delete')));
        query.addAll(client.makeParam('action', (String) params.get('action')));
        query.addAll(client.makeParam('$location', (String) params.get('location')));
        query.addAll(client.makeParam('propertylist', (List<String>) params.get('propertylist'), 'csv'));
        query.addAll(client.makeParam('service.ranking', (Integer) params.get('serviceRanking')));

        List<OAS.Param> form = new List<OAS.Param>();

        return (OASComDayCqReplicationAuditReplicati) client.invoke(
            'POST', '/system/console/configMgr/com.day.cq.replication.audit.ReplicationEventListener', '',
            query, form,
            new Map<String, Object>(),
            new Map<String, Object>(),
            new List<String>{ 'application/json', 'text/plain' },
            new List<String>(),
            new List<String> { 'aemAuth' },
            OASComDayCqReplicationAuditReplicati.class
        );
    }
    /**
     * 
     * 
     * @param post  (optional)
     * @param apply  (optional)
     * @param r_delete  (optional)
     * @param action  (optional)
     * @param location  (optional)
     * @param propertylist  (optional)
     * @param host  (optional)
     * @param port  (optional)
     * @return OASComDayCqReplicationContentStaticC
     * @throws OAS.ApiException if fails to make API call
     */
    public OASComDayCqReplicationContentStaticC comDayCqReplicationContentStaticContentBuilder(Map<String, Object> params) {
        List<OAS.Param> query = new List<OAS.Param>();

        // cast query params to verify their expected type
        query.addAll(client.makeParam('post', (Boolean) params.get('post')));
        query.addAll(client.makeParam('apply', (Boolean) params.get('apply')));
        query.addAll(client.makeParam('delete', (Boolean) params.get('r_delete')));
        query.addAll(client.makeParam('action', (String) params.get('action')));
        query.addAll(client.makeParam('$location', (String) params.get('location')));
        query.addAll(client.makeParam('propertylist', (List<String>) params.get('propertylist'), 'csv'));
        query.addAll(client.makeParam('host', (String) params.get('host')));
        query.addAll(client.makeParam('port', (Integer) params.get('port')));

        List<OAS.Param> form = new List<OAS.Param>();

        return (OASComDayCqReplicationContentStaticC) client.invoke(
            'POST', '/system/console/configMgr/com.day.cq.replication.content.StaticContentBuilder', '',
            query, form,
            new Map<String, Object>(),
            new Map<String, Object>(),
            new List<String>{ 'application/json', 'text/plain' },
            new List<String>(),
            new List<String> { 'aemAuth' },
            OASComDayCqReplicationContentStaticC.class
        );
    }
    /**
     * 
     * 
     * @param post  (optional)
     * @param apply  (optional)
     * @param r_delete  (optional)
     * @param action  (optional)
     * @param location  (optional)
     * @param propertylist  (optional)
     * @param jobTopics  (optional)
     * @param serviceUserTarget  (optional)
     * @param agentProviderTarget  (optional)
     * @return OASComDayCqReplicationImplAgentManag
     * @throws OAS.ApiException if fails to make API call
     */
    public OASComDayCqReplicationImplAgentManag comDayCqReplicationImplAgentManagerImpl(Map<String, Object> params) {
        List<OAS.Param> query = new List<OAS.Param>();

        // cast query params to verify their expected type
        query.addAll(client.makeParam('post', (Boolean) params.get('post')));
        query.addAll(client.makeParam('apply', (Boolean) params.get('apply')));
        query.addAll(client.makeParam('delete', (Boolean) params.get('r_delete')));
        query.addAll(client.makeParam('action', (String) params.get('action')));
        query.addAll(client.makeParam('$location', (String) params.get('location')));
        query.addAll(client.makeParam('propertylist', (List<String>) params.get('propertylist'), 'csv'));
        query.addAll(client.makeParam('job.topics', (String) params.get('jobTopics')));
        query.addAll(client.makeParam('serviceUser.target', (String) params.get('serviceUserTarget')));
        query.addAll(client.makeParam('agentProvider.target', (String) params.get('agentProviderTarget')));

        List<OAS.Param> form = new List<OAS.Param>();

        return (OASComDayCqReplicationImplAgentManag) client.invoke(
            'POST', '/system/console/configMgr/com.day.cq.replication.impl.AgentManagerImpl', '',
            query, form,
            new Map<String, Object>(),
            new Map<String, Object>(),
            new List<String>{ 'application/json', 'text/plain' },
            new List<String>(),
            new List<String> { 'aemAuth' },
            OASComDayCqReplicationImplAgentManag.class
        );
    }
    /**
     * 
     * 
     * @param post  (optional)
     * @param apply  (optional)
     * @param r_delete  (optional)
     * @param action  (optional)
     * @param location  (optional)
     * @param propertylist  (optional)
     * @param binaryThreshold  (optional)
     * @return OASComDayCqReplicationImplContentDur
     * @throws OAS.ApiException if fails to make API call
     */
    public OASComDayCqReplicationImplContentDur comDayCqReplicationImplContentDurboBinaryLessContentBuilder(Map<String, Object> params) {
        List<OAS.Param> query = new List<OAS.Param>();

        // cast query params to verify their expected type
        query.addAll(client.makeParam('post', (Boolean) params.get('post')));
        query.addAll(client.makeParam('apply', (Boolean) params.get('apply')));
        query.addAll(client.makeParam('delete', (Boolean) params.get('r_delete')));
        query.addAll(client.makeParam('action', (String) params.get('action')));
        query.addAll(client.makeParam('$location', (String) params.get('location')));
        query.addAll(client.makeParam('propertylist', (List<String>) params.get('propertylist'), 'csv'));
        query.addAll(client.makeParam('binary.threshold', (Integer) params.get('binaryThreshold')));

        List<OAS.Param> form = new List<OAS.Param>();

        return (OASComDayCqReplicationImplContentDur) client.invoke(
            'POST', '/system/console/configMgr/com.day.cq.replication.impl.content.durbo.BinaryLessContentBuilder', '',
            query, form,
            new Map<String, Object>(),
            new Map<String, Object>(),
            new List<String>{ 'application/json', 'text/plain' },
            new List<String>(),
            new List<String> { 'aemAuth' },
            OASComDayCqReplicationImplContentDur.class
        );
    }
    /**
     * 
     * 
     * @param post  (optional)
     * @param apply  (optional)
     * @param r_delete  (optional)
     * @param action  (optional)
     * @param location  (optional)
     * @param propertylist  (optional)
     * @param preserveHierarchyNodes  (optional)
     * @param ignoreVersioning  (optional)
     * @param importAcl  (optional)
     * @param saveThreshold  (optional)
     * @param preserveUserPaths  (optional)
     * @param preserveUuid  (optional)
     * @param preserveUuidNodetypes  (optional)
     * @param preserveUuidSubtrees  (optional)
     * @param autoCommit  (optional)
     * @return OASComDayCqReplicationImplContentDur
     * @throws OAS.ApiException if fails to make API call
     */
    public OASComDayCqReplicationImplContentDur comDayCqReplicationImplContentDurboDurboImportConfigurationProv(Map<String, Object> params) {
        List<OAS.Param> query = new List<OAS.Param>();

        // cast query params to verify their expected type
        query.addAll(client.makeParam('post', (Boolean) params.get('post')));
        query.addAll(client.makeParam('apply', (Boolean) params.get('apply')));
        query.addAll(client.makeParam('delete', (Boolean) params.get('r_delete')));
        query.addAll(client.makeParam('action', (String) params.get('action')));
        query.addAll(client.makeParam('$location', (String) params.get('location')));
        query.addAll(client.makeParam('propertylist', (List<String>) params.get('propertylist'), 'csv'));
        query.addAll(client.makeParam('preserve.hierarchy.nodes', (Boolean) params.get('preserveHierarchyNodes')));
        query.addAll(client.makeParam('ignore.versioning', (Boolean) params.get('ignoreVersioning')));
        query.addAll(client.makeParam('import.acl', (Boolean) params.get('importAcl')));
        query.addAll(client.makeParam('save.threshold', (Integer) params.get('saveThreshold')));
        query.addAll(client.makeParam('preserve.user.paths', (Boolean) params.get('preserveUserPaths')));
        query.addAll(client.makeParam('preserve.uuid', (Boolean) params.get('preserveUuid')));
        query.addAll(client.makeParams('preserve.uuid.nodetypes', (List<String>) params.get('preserveUuidNodetypes')));
        query.addAll(client.makeParams('preserve.uuid.subtrees', (List<String>) params.get('preserveUuidSubtrees')));
        query.addAll(client.makeParam('auto.commit', (Boolean) params.get('autoCommit')));

        List<OAS.Param> form = new List<OAS.Param>();

        return (OASComDayCqReplicationImplContentDur) client.invoke(
            'POST', '/system/console/configMgr/com.day.cq.replication.impl.content.durbo.DurboImportConfigurationProviderService', '',
            query, form,
            new Map<String, Object>(),
            new Map<String, Object>(),
            new List<String>{ 'application/json', 'text/plain' },
            new List<String>(),
            new List<String> { 'aemAuth' },
            OASComDayCqReplicationImplContentDur.class
        );
    }
    /**
     * 
     * 
     * @param post  (optional)
     * @param apply  (optional)
     * @param r_delete  (optional)
     * @param action  (optional)
     * @param location  (optional)
     * @param propertylist  (optional)
     * @param replicationContentUseFileStorage  (optional)
     * @param replicationContentMaxCommitAttempts  (optional)
     * @return OASComDayCqReplicationImplReplicatio
     * @throws OAS.ApiException if fails to make API call
     */
    public OASComDayCqReplicationImplReplicatio comDayCqReplicationImplReplicationContentFactoryProviderImpl(Map<String, Object> params) {
        List<OAS.Param> query = new List<OAS.Param>();

        // cast query params to verify their expected type
        query.addAll(client.makeParam('post', (Boolean) params.get('post')));
        query.addAll(client.makeParam('apply', (Boolean) params.get('apply')));
        query.addAll(client.makeParam('delete', (Boolean) params.get('r_delete')));
        query.addAll(client.makeParam('action', (String) params.get('action')));
        query.addAll(client.makeParam('$location', (String) params.get('location')));
        query.addAll(client.makeParam('propertylist', (List<String>) params.get('propertylist'), 'csv'));
        query.addAll(client.makeParam('replication.content.useFileStorage', (Boolean) params.get('replicationContentUseFileStorage')));
        query.addAll(client.makeParam('replication.content.maxCommitAttempts', (Integer) params.get('replicationContentMaxCommitAttempts')));

        List<OAS.Param> form = new List<OAS.Param>();

        return (OASComDayCqReplicationImplReplicatio) client.invoke(
            'POST', '/system/console/configMgr/com.day.cq.replication.impl.ReplicationContentFactoryProviderImpl', '',
            query, form,
            new Map<String, Object>(),
            new Map<String, Object>(),
            new List<String>{ 'application/json', 'text/plain' },
            new List<String>(),
            new List<String> { 'aemAuth' },
            OASComDayCqReplicationImplReplicatio.class
        );
    }
    /**
     * 
     * 
     * @param post  (optional)
     * @param apply  (optional)
     * @param r_delete  (optional)
     * @param action  (optional)
     * @param location  (optional)
     * @param propertylist  (optional)
     * @param receiverTmpfileThreshold  (optional)
     * @param receiverPackagesUseInstall  (optional)
     * @return OASComDayCqReplicationImplReplicatio
     * @throws OAS.ApiException if fails to make API call
     */
    public OASComDayCqReplicationImplReplicatio comDayCqReplicationImplReplicationReceiverImpl(Map<String, Object> params) {
        List<OAS.Param> query = new List<OAS.Param>();

        // cast query params to verify their expected type
        query.addAll(client.makeParam('post', (Boolean) params.get('post')));
        query.addAll(client.makeParam('apply', (Boolean) params.get('apply')));
        query.addAll(client.makeParam('delete', (Boolean) params.get('r_delete')));
        query.addAll(client.makeParam('action', (String) params.get('action')));
        query.addAll(client.makeParam('$location', (String) params.get('location')));
        query.addAll(client.makeParam('propertylist', (List<String>) params.get('propertylist'), 'csv'));
        query.addAll(client.makeParam('receiver.tmpfile.threshold', (Integer) params.get('receiverTmpfileThreshold')));
        query.addAll(client.makeParam('receiver.packages.use.install', (Boolean) params.get('receiverPackagesUseInstall')));

        List<OAS.Param> form = new List<OAS.Param>();

        return (OASComDayCqReplicationImplReplicatio) client.invoke(
            'POST', '/system/console/configMgr/com.day.cq.replication.impl.ReplicationReceiverImpl', '',
            query, form,
            new Map<String, Object>(),
            new Map<String, Object>(),
            new List<String>{ 'application/json', 'text/plain' },
            new List<String>(),
            new List<String> { 'aemAuth' },
            OASComDayCqReplicationImplReplicatio.class
        );
    }
    /**
     * 
     * 
     * @param post  (optional)
     * @param apply  (optional)
     * @param r_delete  (optional)
     * @param action  (optional)
     * @param location  (optional)
     * @param propertylist  (optional)
     * @param distributeEvents  (optional)
     * @return OASComDayCqReplicationImplReplicator
     * @throws OAS.ApiException if fails to make API call
     */
    public OASComDayCqReplicationImplReplicator comDayCqReplicationImplReplicatorImpl(Map<String, Object> params) {
        List<OAS.Param> query = new List<OAS.Param>();

        // cast query params to verify their expected type
        query.addAll(client.makeParam('post', (Boolean) params.get('post')));
        query.addAll(client.makeParam('apply', (Boolean) params.get('apply')));
        query.addAll(client.makeParam('delete', (Boolean) params.get('r_delete')));
        query.addAll(client.makeParam('action', (String) params.get('action')));
        query.addAll(client.makeParam('$location', (String) params.get('location')));
        query.addAll(client.makeParam('propertylist', (List<String>) params.get('propertylist'), 'csv'));
        query.addAll(client.makeParam('distribute_events', (Boolean) params.get('distributeEvents')));

        List<OAS.Param> form = new List<OAS.Param>();

        return (OASComDayCqReplicationImplReplicator) client.invoke(
            'POST', '/system/console/configMgr/com.day.cq.replication.impl.ReplicatorImpl', '',
            query, form,
            new Map<String, Object>(),
            new Map<String, Object>(),
            new List<String>{ 'application/json', 'text/plain' },
            new List<String>(),
            new List<String> { 'aemAuth' },
            OASComDayCqReplicationImplReplicator.class
        );
    }
    /**
     * 
     * 
     * @param post  (optional)
     * @param apply  (optional)
     * @param r_delete  (optional)
     * @param action  (optional)
     * @param location  (optional)
     * @param propertylist  (optional)
     * @param schedulerPeriod  (optional)
     * @return OASComDayCqReplicationImplReverseRep
     * @throws OAS.ApiException if fails to make API call
     */
    public OASComDayCqReplicationImplReverseRep comDayCqReplicationImplReverseReplicator(Map<String, Object> params) {
        List<OAS.Param> query = new List<OAS.Param>();

        // cast query params to verify their expected type
        query.addAll(client.makeParam('post', (Boolean) params.get('post')));
        query.addAll(client.makeParam('apply', (Boolean) params.get('apply')));
        query.addAll(client.makeParam('delete', (Boolean) params.get('r_delete')));
        query.addAll(client.makeParam('action', (String) params.get('action')));
        query.addAll(client.makeParam('$location', (String) params.get('location')));
        query.addAll(client.makeParam('propertylist', (List<String>) params.get('propertylist'), 'csv'));
        query.addAll(client.makeParam('scheduler.period', (Integer) params.get('schedulerPeriod')));

        List<OAS.Param> form = new List<OAS.Param>();

        return (OASComDayCqReplicationImplReverseRep) client.invoke(
            'POST', '/system/console/configMgr/com.day.cq.replication.impl.ReverseReplicator', '',
            query, form,
            new Map<String, Object>(),
            new Map<String, Object>(),
            new List<String>{ 'application/json', 'text/plain' },
            new List<String>(),
            new List<String> { 'aemAuth' },
            OASComDayCqReplicationImplReverseRep.class
        );
    }
    /**
     * 
     * 
     * @param post  (optional)
     * @param apply  (optional)
     * @param r_delete  (optional)
     * @param action  (optional)
     * @param location  (optional)
     * @param propertylist  (optional)
     * @param disabledCipherSuites  (optional)
     * @param enabledCipherSuites  (optional)
     * @return OASComDayCqReplicationImplTransportB
     * @throws OAS.ApiException if fails to make API call
     */
    public OASComDayCqReplicationImplTransportB comDayCqReplicationImplTransportBinaryLessTransportHandler(Map<String, Object> params) {
        List<OAS.Param> query = new List<OAS.Param>();

        // cast query params to verify their expected type
        query.addAll(client.makeParam('post', (Boolean) params.get('post')));
        query.addAll(client.makeParam('apply', (Boolean) params.get('apply')));
        query.addAll(client.makeParam('delete', (Boolean) params.get('r_delete')));
        query.addAll(client.makeParam('action', (String) params.get('action')));
        query.addAll(client.makeParam('$location', (String) params.get('location')));
        query.addAll(client.makeParam('propertylist', (List<String>) params.get('propertylist'), 'csv'));
        query.addAll(client.makeParams('disabled.cipher.suites', (List<String>) params.get('disabledCipherSuites')));
        query.addAll(client.makeParams('enabled.cipher.suites', (List<String>) params.get('enabledCipherSuites')));

        List<OAS.Param> form = new List<OAS.Param>();

        return (OASComDayCqReplicationImplTransportB) client.invoke(
            'POST', '/system/console/configMgr/com.day.cq.replication.impl.transport.BinaryLessTransportHandler', '',
            query, form,
            new Map<String, Object>(),
            new Map<String, Object>(),
            new List<String>{ 'application/json', 'text/plain' },
            new List<String>(),
            new List<String> { 'aemAuth' },
            OASComDayCqReplicationImplTransportB.class
        );
    }
    /**
     * 
     * 
     * @param post  (optional)
     * @param apply  (optional)
     * @param r_delete  (optional)
     * @param action  (optional)
     * @param location  (optional)
     * @param propertylist  (optional)
     * @param disabledCipherSuites  (optional)
     * @param enabledCipherSuites  (optional)
     * @return OASComDayCqReplicationImplTransportH
     * @throws OAS.ApiException if fails to make API call
     */
    public OASComDayCqReplicationImplTransportH comDayCqReplicationImplTransportHttp(Map<String, Object> params) {
        List<OAS.Param> query = new List<OAS.Param>();

        // cast query params to verify their expected type
        query.addAll(client.makeParam('post', (Boolean) params.get('post')));
        query.addAll(client.makeParam('apply', (Boolean) params.get('apply')));
        query.addAll(client.makeParam('delete', (Boolean) params.get('r_delete')));
        query.addAll(client.makeParam('action', (String) params.get('action')));
        query.addAll(client.makeParam('$location', (String) params.get('location')));
        query.addAll(client.makeParam('propertylist', (List<String>) params.get('propertylist'), 'csv'));
        query.addAll(client.makeParams('disabled.cipher.suites', (List<String>) params.get('disabledCipherSuites')));
        query.addAll(client.makeParams('enabled.cipher.suites', (List<String>) params.get('enabledCipherSuites')));

        List<OAS.Param> form = new List<OAS.Param>();

        return (OASComDayCqReplicationImplTransportH) client.invoke(
            'POST', '/system/console/configMgr/com.day.cq.replication.impl.transport.Http', '',
            query, form,
            new Map<String, Object>(),
            new Map<String, Object>(),
            new List<String>{ 'application/json', 'text/plain' },
            new List<String>(),
            new List<String> { 'aemAuth' },
            OASComDayCqReplicationImplTransportH.class
        );
    }
    /**
     * 
     * 
     * @param post  (optional)
     * @param apply  (optional)
     * @param r_delete  (optional)
     * @param action  (optional)
     * @param location  (optional)
     * @param propertylist  (optional)
     * @param repcacheEnable  (optional)
     * @param repcacheTtl  (optional)
     * @param repcacheMax  (optional)
     * @return OASComDayCqReportingImplCacheCacheIm
     * @throws OAS.ApiException if fails to make API call
     */
    public OASComDayCqReportingImplCacheCacheIm comDayCqReportingImplCacheCacheImpl(Map<String, Object> params) {
        List<OAS.Param> query = new List<OAS.Param>();

        // cast query params to verify their expected type
        query.addAll(client.makeParam('post', (Boolean) params.get('post')));
        query.addAll(client.makeParam('apply', (Boolean) params.get('apply')));
        query.addAll(client.makeParam('delete', (Boolean) params.get('r_delete')));
        query.addAll(client.makeParam('action', (String) params.get('action')));
        query.addAll(client.makeParam('$location', (String) params.get('location')));
        query.addAll(client.makeParam('propertylist', (List<String>) params.get('propertylist'), 'csv'));
        query.addAll(client.makeParam('repcache.enable', (Boolean) params.get('repcacheEnable')));
        query.addAll(client.makeParam('repcache.ttl', (Integer) params.get('repcacheTtl')));
        query.addAll(client.makeParam('repcache.max', (Integer) params.get('repcacheMax')));

        List<OAS.Param> form = new List<OAS.Param>();

        return (OASComDayCqReportingImplCacheCacheIm) client.invoke(
            'POST', '/system/console/configMgr/com.day.cq.reporting.impl.cache.CacheImpl', '',
            query, form,
            new Map<String, Object>(),
            new Map<String, Object>(),
            new List<String>{ 'application/json', 'text/plain' },
            new List<String>(),
            new List<String> { 'aemAuth' },
            OASComDayCqReportingImplCacheCacheIm.class
        );
    }
    /**
     * 
     * 
     * @param post  (optional)
     * @param apply  (optional)
     * @param r_delete  (optional)
     * @param action  (optional)
     * @param location  (optional)
     * @param propertylist  (optional)
     * @param repconfTimezone  (optional)
     * @param repconfLocale  (optional)
     * @param repconfSnapshots  (optional)
     * @param repconfRepdir  (optional)
     * @param repconfHourofday  (optional)
     * @param repconfMinofhour  (optional)
     * @param repconfMaxrows  (optional)
     * @param repconfFakedata  (optional)
     * @param repconfSnapshotuser  (optional)
     * @param repconfEnforcesnapshotuser  (optional)
     * @return OASComDayCqReportingImplConfigServic
     * @throws OAS.ApiException if fails to make API call
     */
    public OASComDayCqReportingImplConfigServic comDayCqReportingImplConfigServiceImpl(Map<String, Object> params) {
        List<OAS.Param> query = new List<OAS.Param>();

        // cast query params to verify their expected type
        query.addAll(client.makeParam('post', (Boolean) params.get('post')));
        query.addAll(client.makeParam('apply', (Boolean) params.get('apply')));
        query.addAll(client.makeParam('delete', (Boolean) params.get('r_delete')));
        query.addAll(client.makeParam('action', (String) params.get('action')));
        query.addAll(client.makeParam('$location', (String) params.get('location')));
        query.addAll(client.makeParam('propertylist', (List<String>) params.get('propertylist'), 'csv'));
        query.addAll(client.makeParam('repconf.timezone', (String) params.get('repconfTimezone')));
        query.addAll(client.makeParam('repconf.locale', (String) params.get('repconfLocale')));
        query.addAll(client.makeParam('repconf.snapshots', (String) params.get('repconfSnapshots')));
        query.addAll(client.makeParam('repconf.repdir', (String) params.get('repconfRepdir')));
        query.addAll(client.makeParam('repconf.hourofday', (Integer) params.get('repconfHourofday')));
        query.addAll(client.makeParam('repconf.minofhour', (Integer) params.get('repconfMinofhour')));
        query.addAll(client.makeParam('repconf.maxrows', (Integer) params.get('repconfMaxrows')));
        query.addAll(client.makeParam('repconf.fakedata', (Boolean) params.get('repconfFakedata')));
        query.addAll(client.makeParam('repconf.snapshotuser', (String) params.get('repconfSnapshotuser')));
        query.addAll(client.makeParam('repconf.enforcesnapshotuser', (Boolean) params.get('repconfEnforcesnapshotuser')));

        List<OAS.Param> form = new List<OAS.Param>();

        return (OASComDayCqReportingImplConfigServic) client.invoke(
            'POST', '/system/console/configMgr/com.day.cq.reporting.impl.ConfigServiceImpl', '',
            query, form,
            new Map<String, Object>(),
            new Map<String, Object>(),
            new List<String>{ 'application/json', 'text/plain' },
            new List<String>(),
            new List<String> { 'aemAuth' },
            OASComDayCqReportingImplConfigServic.class
        );
    }
    /**
     * 
     * 
     * @param post  (optional)
     * @param apply  (optional)
     * @param r_delete  (optional)
     * @param action  (optional)
     * @param location  (optional)
     * @param propertylist  (optional)
     * @param requestLogOutput  (optional)
     * @return OASComDayCqReportingImplRLogAnalyzer
     * @throws OAS.ApiException if fails to make API call
     */
    public OASComDayCqReportingImplRLogAnalyzer comDayCqReportingImplRLogAnalyzer(Map<String, Object> params) {
        List<OAS.Param> query = new List<OAS.Param>();

        // cast query params to verify their expected type
        query.addAll(client.makeParam('post', (Boolean) params.get('post')));
        query.addAll(client.makeParam('apply', (Boolean) params.get('apply')));
        query.addAll(client.makeParam('delete', (Boolean) params.get('r_delete')));
        query.addAll(client.makeParam('action', (String) params.get('action')));
        query.addAll(client.makeParam('$location', (String) params.get('location')));
        query.addAll(client.makeParam('propertylist', (List<String>) params.get('propertylist'), 'csv'));
        query.addAll(client.makeParam('request.log.output', (String) params.get('requestLogOutput')));

        List<OAS.Param> form = new List<OAS.Param>();

        return (OASComDayCqReportingImplRLogAnalyzer) client.invoke(
            'POST', '/system/console/configMgr/com.day.cq.reporting.impl.RLogAnalyzer', '',
            query, form,
            new Map<String, Object>(),
            new Map<String, Object>(),
            new List<String>{ 'application/json', 'text/plain' },
            new List<String>(),
            new List<String> { 'aemAuth' },
            OASComDayCqReportingImplRLogAnalyzer.class
        );
    }
    /**
     * 
     * 
     * @param post  (optional)
     * @param apply  (optional)
     * @param r_delete  (optional)
     * @param action  (optional)
     * @param location  (optional)
     * @param propertylist  (optional)
     * @param schedulerPeriod  (optional)
     * @param schedulerConcurrent  (optional)
     * @param serviceBadLinkToleranceInterval  (optional)
     * @param serviceCheckOverridePatterns  (optional)
     * @param serviceCacheBrokenInternalLinks  (optional)
     * @param serviceSpecialLinkPrefix  (optional)
     * @param serviceSpecialLinkPatterns  (optional)
     * @return OASComDayCqRewriterLinkcheckerImplLi
     * @throws OAS.ApiException if fails to make API call
     */
    public OASComDayCqRewriterLinkcheckerImplLi comDayCqRewriterLinkcheckerImplLinkCheckerImpl(Map<String, Object> params) {
        List<OAS.Param> query = new List<OAS.Param>();

        // cast query params to verify their expected type
        query.addAll(client.makeParam('post', (Boolean) params.get('post')));
        query.addAll(client.makeParam('apply', (Boolean) params.get('apply')));
        query.addAll(client.makeParam('delete', (Boolean) params.get('r_delete')));
        query.addAll(client.makeParam('action', (String) params.get('action')));
        query.addAll(client.makeParam('$location', (String) params.get('location')));
        query.addAll(client.makeParam('propertylist', (List<String>) params.get('propertylist'), 'csv'));
        query.addAll(client.makeParam('scheduler.period', (Integer) params.get('schedulerPeriod')));
        query.addAll(client.makeParam('scheduler.concurrent', (Boolean) params.get('schedulerConcurrent')));
        query.addAll(client.makeParam('service.bad_link_tolerance_interval', (Integer) params.get('serviceBadLinkToleranceInterval')));
        query.addAll(client.makeParams('service.check_override_patterns', (List<String>) params.get('serviceCheckOverridePatterns')));
        query.addAll(client.makeParam('service.cache_broken_internal_links', (Boolean) params.get('serviceCacheBrokenInternalLinks')));
        query.addAll(client.makeParams('service.special_link_prefix', (List<String>) params.get('serviceSpecialLinkPrefix')));
        query.addAll(client.makeParams('service.special_link_patterns', (List<String>) params.get('serviceSpecialLinkPatterns')));

        List<OAS.Param> form = new List<OAS.Param>();

        return (OASComDayCqRewriterLinkcheckerImplLi) client.invoke(
            'POST', '/system/console/configMgr/com.day.cq.rewriter.linkchecker.impl.LinkCheckerImpl', '',
            query, form,
            new Map<String, Object>(),
            new Map<String, Object>(),
            new List<String>{ 'application/json', 'text/plain' },
            new List<String>(),
            new List<String> { 'aemAuth' },
            OASComDayCqRewriterLinkcheckerImplLi.class
        );
    }
    /**
     * 
     * 
     * @param post  (optional)
     * @param apply  (optional)
     * @param r_delete  (optional)
     * @param action  (optional)
     * @param location  (optional)
     * @param propertylist  (optional)
     * @param schedulerPeriod  (optional)
     * @param schedulerConcurrent  (optional)
     * @param goodLinkTestInterval  (optional)
     * @param badLinkTestInterval  (optional)
     * @param linkUnusedInterval  (optional)
     * @param connectionTimeout  (optional)
     * @return OASComDayCqRewriterLinkcheckerImplLi
     * @throws OAS.ApiException if fails to make API call
     */
    public OASComDayCqRewriterLinkcheckerImplLi comDayCqRewriterLinkcheckerImplLinkCheckerTask(Map<String, Object> params) {
        List<OAS.Param> query = new List<OAS.Param>();

        // cast query params to verify their expected type
        query.addAll(client.makeParam('post', (Boolean) params.get('post')));
        query.addAll(client.makeParam('apply', (Boolean) params.get('apply')));
        query.addAll(client.makeParam('delete', (Boolean) params.get('r_delete')));
        query.addAll(client.makeParam('action', (String) params.get('action')));
        query.addAll(client.makeParam('$location', (String) params.get('location')));
        query.addAll(client.makeParam('propertylist', (List<String>) params.get('propertylist'), 'csv'));
        query.addAll(client.makeParam('scheduler.period', (Integer) params.get('schedulerPeriod')));
        query.addAll(client.makeParam('scheduler.concurrent', (Boolean) params.get('schedulerConcurrent')));
        query.addAll(client.makeParam('good_link_test_interval', (Integer) params.get('goodLinkTestInterval')));
        query.addAll(client.makeParam('bad_link_test_interval', (Integer) params.get('badLinkTestInterval')));
        query.addAll(client.makeParam('link_unused_interval', (Integer) params.get('linkUnusedInterval')));
        query.addAll(client.makeParam('connection.timeout', (Integer) params.get('connectionTimeout')));

        List<OAS.Param> form = new List<OAS.Param>();

        return (OASComDayCqRewriterLinkcheckerImplLi) client.invoke(
            'POST', '/system/console/configMgr/com.day.cq.rewriter.linkchecker.impl.LinkCheckerTask', '',
            query, form,
            new Map<String, Object>(),
            new Map<String, Object>(),
            new List<String>{ 'application/json', 'text/plain' },
            new List<String>(),
            new List<String> { 'aemAuth' },
            OASComDayCqRewriterLinkcheckerImplLi.class
        );
    }
    /**
     * 
     * 
     * @param post  (optional)
     * @param apply  (optional)
     * @param r_delete  (optional)
     * @param action  (optional)
     * @param location  (optional)
     * @param propertylist  (optional)
     * @param linkcheckertransformerDisableRewriting  (optional)
     * @param linkcheckertransformerDisableChecking  (optional)
     * @param linkcheckertransformerMapCacheSize  (optional)
     * @param linkcheckertransformerStrictExtensionCheck  (optional)
     * @param linkcheckertransformerStripHtmltExtension  (optional)
     * @param linkcheckertransformerRewriteElements  (optional)
     * @param linkcheckertransformerStripExtensionPathBlacklist  (optional)
     * @return OASComDayCqRewriterLinkcheckerImplLi
     * @throws OAS.ApiException if fails to make API call
     */
    public OASComDayCqRewriterLinkcheckerImplLi comDayCqRewriterLinkcheckerImplLinkCheckerTransformerFactory(Map<String, Object> params) {
        List<OAS.Param> query = new List<OAS.Param>();

        // cast query params to verify their expected type
        query.addAll(client.makeParam('post', (Boolean) params.get('post')));
        query.addAll(client.makeParam('apply', (Boolean) params.get('apply')));
        query.addAll(client.makeParam('delete', (Boolean) params.get('r_delete')));
        query.addAll(client.makeParam('action', (String) params.get('action')));
        query.addAll(client.makeParam('$location', (String) params.get('location')));
        query.addAll(client.makeParam('propertylist', (List<String>) params.get('propertylist'), 'csv'));
        query.addAll(client.makeParam('linkcheckertransformer.disableRewriting', (Boolean) params.get('linkcheckertransformerDisableRewriting')));
        query.addAll(client.makeParam('linkcheckertransformer.disableChecking', (Boolean) params.get('linkcheckertransformerDisableChecking')));
        query.addAll(client.makeParam('linkcheckertransformer.mapCacheSize', (Integer) params.get('linkcheckertransformerMapCacheSize')));
        query.addAll(client.makeParam('linkcheckertransformer.strictExtensionCheck', (Boolean) params.get('linkcheckertransformerStrictExtensionCheck')));
        query.addAll(client.makeParam('linkcheckertransformer.stripHtmltExtension', (Boolean) params.get('linkcheckertransformerStripHtmltExtension')));
        query.addAll(client.makeParams('linkcheckertransformer.rewriteElements', (List<String>) params.get('linkcheckertransformerRewriteElements')));
        query.addAll(client.makeParams('linkcheckertransformer.stripExtensionPathBlacklist', (List<String>) params.get('linkcheckertransformerStripExtensionPathBlacklist')));

        List<OAS.Param> form = new List<OAS.Param>();

        return (OASComDayCqRewriterLinkcheckerImplLi) client.invoke(
            'POST', '/system/console/configMgr/com.day.cq.rewriter.linkchecker.impl.LinkCheckerTransformerFactory', '',
            query, form,
            new Map<String, Object>(),
            new Map<String, Object>(),
            new List<String>{ 'application/json', 'text/plain' },
            new List<String>(),
            new List<String> { 'aemAuth' },
            OASComDayCqRewriterLinkcheckerImplLi.class
        );
    }
    /**
     * 
     * 
     * @param post  (optional)
     * @param apply  (optional)
     * @param r_delete  (optional)
     * @param action  (optional)
     * @param location  (optional)
     * @param propertylist  (optional)
     * @param serviceMaxLinksPerHost  (optional)
     * @param serviceSaveExternalLinkReferences  (optional)
     * @return OASComDayCqRewriterLinkcheckerImplLi
     * @throws OAS.ApiException if fails to make API call
     */
    public OASComDayCqRewriterLinkcheckerImplLi comDayCqRewriterLinkcheckerImplLinkInfoStorageImpl(Map<String, Object> params) {
        List<OAS.Param> query = new List<OAS.Param>();

        // cast query params to verify their expected type
        query.addAll(client.makeParam('post', (Boolean) params.get('post')));
        query.addAll(client.makeParam('apply', (Boolean) params.get('apply')));
        query.addAll(client.makeParam('delete', (Boolean) params.get('r_delete')));
        query.addAll(client.makeParam('action', (String) params.get('action')));
        query.addAll(client.makeParam('$location', (String) params.get('location')));
        query.addAll(client.makeParam('propertylist', (List<String>) params.get('propertylist'), 'csv'));
        query.addAll(client.makeParam('service.max_links_per_host', (Integer) params.get('serviceMaxLinksPerHost')));
        query.addAll(client.makeParam('service.save_external_link_references', (Boolean) params.get('serviceSaveExternalLinkReferences')));

        List<OAS.Param> form = new List<OAS.Param>();

        return (OASComDayCqRewriterLinkcheckerImplLi) client.invoke(
            'POST', '/system/console/configMgr/com.day.cq.rewriter.linkchecker.impl.LinkInfoStorageImpl', '',
            query, form,
            new Map<String, Object>(),
            new Map<String, Object>(),
            new List<String>{ 'application/json', 'text/plain' },
            new List<String>(),
            new List<String> { 'aemAuth' },
            OASComDayCqRewriterLinkcheckerImplLi.class
        );
    }
    /**
     * 
     * 
     * @param post  (optional)
     * @param apply  (optional)
     * @param r_delete  (optional)
     * @param action  (optional)
     * @param location  (optional)
     * @param propertylist  (optional)
     * @param htmlparserProcessTags  (optional)
     * @param htmlparserPreserveCamelCase  (optional)
     * @return OASComDayCqRewriterProcessorImplHtml
     * @throws OAS.ApiException if fails to make API call
     */
    public OASComDayCqRewriterProcessorImplHtml comDayCqRewriterProcessorImplHtmlParserFactory(Map<String, Object> params) {
        List<OAS.Param> query = new List<OAS.Param>();

        // cast query params to verify their expected type
        query.addAll(client.makeParam('post', (Boolean) params.get('post')));
        query.addAll(client.makeParam('apply', (Boolean) params.get('apply')));
        query.addAll(client.makeParam('delete', (Boolean) params.get('r_delete')));
        query.addAll(client.makeParam('action', (String) params.get('action')));
        query.addAll(client.makeParam('$location', (String) params.get('location')));
        query.addAll(client.makeParam('propertylist', (List<String>) params.get('propertylist'), 'csv'));
        query.addAll(client.makeParams('htmlparser.processTags', (List<String>) params.get('htmlparserProcessTags')));
        query.addAll(client.makeParam('htmlparser.preserveCamelCase', (Boolean) params.get('htmlparserPreserveCamelCase')));

        List<OAS.Param> form = new List<OAS.Param>();

        return (OASComDayCqRewriterProcessorImplHtml) client.invoke(
            'POST', '/system/console/configMgr/com.day.cq.rewriter.processor.impl.HtmlParserFactory', '',
            query, form,
            new Map<String, Object>(),
            new Map<String, Object>(),
            new List<String>{ 'application/json', 'text/plain' },
            new List<String>(),
            new List<String> { 'aemAuth' },
            OASComDayCqRewriterProcessorImplHtml.class
        );
    }
    /**
     * 
     * 
     * @param post  (optional)
     * @param apply  (optional)
     * @param r_delete  (optional)
     * @param action  (optional)
     * @param location  (optional)
     * @param propertylist  (optional)
     * @param excerptProperties  (optional)
     * @param cacheMaxEntries  (optional)
     * @param cacheEntryLifetime  (optional)
     * @param xpathUnion  (optional)
     * @return OASComDayCqSearchImplBuilderQueryBui
     * @throws OAS.ApiException if fails to make API call
     */
    public OASComDayCqSearchImplBuilderQueryBui comDayCqSearchImplBuilderQueryBuilderImpl(Map<String, Object> params) {
        List<OAS.Param> query = new List<OAS.Param>();

        // cast query params to verify their expected type
        query.addAll(client.makeParam('post', (Boolean) params.get('post')));
        query.addAll(client.makeParam('apply', (Boolean) params.get('apply')));
        query.addAll(client.makeParam('delete', (Boolean) params.get('r_delete')));
        query.addAll(client.makeParam('action', (String) params.get('action')));
        query.addAll(client.makeParam('$location', (String) params.get('location')));
        query.addAll(client.makeParam('propertylist', (List<String>) params.get('propertylist'), 'csv'));
        query.addAll(client.makeParams('excerpt.properties', (List<String>) params.get('excerptProperties')));
        query.addAll(client.makeParam('cache.max.entries', (Integer) params.get('cacheMaxEntries')));
        query.addAll(client.makeParam('cache.entry.lifetime', (Integer) params.get('cacheEntryLifetime')));
        query.addAll(client.makeParam('xpath.union', (Boolean) params.get('xpathUnion')));

        List<OAS.Param> form = new List<OAS.Param>();

        return (OASComDayCqSearchImplBuilderQueryBui) client.invoke(
            'POST', '/system/console/configMgr/com.day.cq.search.impl.builder.QueryBuilderImpl', '',
            query, form,
            new Map<String, Object>(),
            new Map<String, Object>(),
            new List<String>{ 'application/json', 'text/plain' },
            new List<String>(),
            new List<String> { 'aemAuth' },
            OASComDayCqSearchImplBuilderQueryBui.class
        );
    }
    /**
     * 
     * 
     * @param post  (optional)
     * @param apply  (optional)
     * @param r_delete  (optional)
     * @param action  (optional)
     * @param location  (optional)
     * @param propertylist  (optional)
     * @param pathBuilderTarget  (optional)
     * @param suggestBasepath  (optional)
     * @return OASComDayCqSearchSuggestImplSuggesti
     * @throws OAS.ApiException if fails to make API call
     */
    public OASComDayCqSearchSuggestImplSuggesti comDayCqSearchSuggestImplSuggestionIndexManagerImpl(Map<String, Object> params) {
        List<OAS.Param> query = new List<OAS.Param>();

        // cast query params to verify their expected type
        query.addAll(client.makeParam('post', (Boolean) params.get('post')));
        query.addAll(client.makeParam('apply', (Boolean) params.get('apply')));
        query.addAll(client.makeParam('delete', (Boolean) params.get('r_delete')));
        query.addAll(client.makeParam('action', (String) params.get('action')));
        query.addAll(client.makeParam('$location', (String) params.get('location')));
        query.addAll(client.makeParam('propertylist', (List<String>) params.get('propertylist'), 'csv'));
        query.addAll(client.makeParam('pathBuilder.target', (String) params.get('pathBuilderTarget')));
        query.addAll(client.makeParam('suggest.basepath', (String) params.get('suggestBasepath')));

        List<OAS.Param> form = new List<OAS.Param>();

        return (OASComDayCqSearchSuggestImplSuggesti) client.invoke(
            'POST', '/system/console/configMgr/com.day.cq.search.suggest.impl.SuggestionIndexManagerImpl', '',
            query, form,
            new Map<String, Object>(),
            new Map<String, Object>(),
            new List<String>{ 'application/json', 'text/plain' },
            new List<String>(),
            new List<String> { 'aemAuth' },
            OASComDayCqSearchSuggestImplSuggesti.class
        );
    }
    /**
     * 
     * 
     * @param post  (optional)
     * @param apply  (optional)
     * @param r_delete  (optional)
     * @param action  (optional)
     * @param location  (optional)
     * @param propertylist  (optional)
     * @param cqSearchpromoteConfighandlerEnabled  (optional)
     * @return OASComDayCqSearchpromoteImplPublishS
     * @throws OAS.ApiException if fails to make API call
     */
    public OASComDayCqSearchpromoteImplPublishS comDayCqSearchpromoteImplPublishSearchPromoteConfigHandler(Map<String, Object> params) {
        List<OAS.Param> query = new List<OAS.Param>();

        // cast query params to verify their expected type
        query.addAll(client.makeParam('post', (Boolean) params.get('post')));
        query.addAll(client.makeParam('apply', (Boolean) params.get('apply')));
        query.addAll(client.makeParam('delete', (Boolean) params.get('r_delete')));
        query.addAll(client.makeParam('action', (String) params.get('action')));
        query.addAll(client.makeParam('$location', (String) params.get('location')));
        query.addAll(client.makeParam('propertylist', (List<String>) params.get('propertylist'), 'csv'));
        query.addAll(client.makeParam('cq.searchpromote.confighandler.enabled', (Boolean) params.get('cqSearchpromoteConfighandlerEnabled')));

        List<OAS.Param> form = new List<OAS.Param>();

        return (OASComDayCqSearchpromoteImplPublishS) client.invoke(
            'POST', '/system/console/configMgr/com.day.cq.searchpromote.impl.PublishSearchPromoteConfigHandler', '',
            query, form,
            new Map<String, Object>(),
            new Map<String, Object>(),
            new List<String>{ 'application/json', 'text/plain' },
            new List<String>(),
            new List<String> { 'aemAuth' },
            OASComDayCqSearchpromoteImplPublishS.class
        );
    }
    /**
     * 
     * 
     * @param post  (optional)
     * @param apply  (optional)
     * @param r_delete  (optional)
     * @param action  (optional)
     * @param location  (optional)
     * @param propertylist  (optional)
     * @param cqSearchpromoteConfigurationServerUri  (optional)
     * @param cqSearchpromoteConfigurationEnvironment  (optional)
     * @param connectionTimeout  (optional)
     * @param socketTimeout  (optional)
     * @return OASComDayCqSearchpromoteImplSearchPr
     * @throws OAS.ApiException if fails to make API call
     */
    public OASComDayCqSearchpromoteImplSearchPr comDayCqSearchpromoteImplSearchPromoteServiceImpl(Map<String, Object> params) {
        List<OAS.Param> query = new List<OAS.Param>();

        // cast query params to verify their expected type
        query.addAll(client.makeParam('post', (Boolean) params.get('post')));
        query.addAll(client.makeParam('apply', (Boolean) params.get('apply')));
        query.addAll(client.makeParam('delete', (Boolean) params.get('r_delete')));
        query.addAll(client.makeParam('action', (String) params.get('action')));
        query.addAll(client.makeParam('$location', (String) params.get('location')));
        query.addAll(client.makeParam('propertylist', (List<String>) params.get('propertylist'), 'csv'));
        query.addAll(client.makeParam('cq.searchpromote.configuration.server.uri', (String) params.get('cqSearchpromoteConfigurationServerUri')));
        query.addAll(client.makeParam('cq.searchpromote.configuration.environment', (String) params.get('cqSearchpromoteConfigurationEnvironment')));
        query.addAll(client.makeParam('connection.timeout', (Integer) params.get('connectionTimeout')));
        query.addAll(client.makeParam('socket.timeout', (Integer) params.get('socketTimeout')));

        List<OAS.Param> form = new List<OAS.Param>();

        return (OASComDayCqSearchpromoteImplSearchPr) client.invoke(
            'POST', '/system/console/configMgr/com.day.cq.searchpromote.impl.SearchPromoteServiceImpl', '',
            query, form,
            new Map<String, Object>(),
            new Map<String, Object>(),
            new List<String>{ 'application/json', 'text/plain' },
            new List<String>(),
            new List<String> { 'aemAuth' },
            OASComDayCqSearchpromoteImplSearchPr.class
        );
    }
    /**
     * 
     * 
     * @param post  (optional)
     * @param apply  (optional)
     * @param r_delete  (optional)
     * @param action  (optional)
     * @param location  (optional)
     * @param propertylist  (optional)
     * @param cqAclsetupRules  (optional)
     * @return OASComDayCqSecurityACLSetupInfo
     * @throws OAS.ApiException if fails to make API call
     */
    public OASComDayCqSecurityACLSetupInfo comDayCqSecurityACLSetup(Map<String, Object> params) {
        List<OAS.Param> query = new List<OAS.Param>();

        // cast query params to verify their expected type
        query.addAll(client.makeParam('post', (Boolean) params.get('post')));
        query.addAll(client.makeParam('apply', (Boolean) params.get('apply')));
        query.addAll(client.makeParam('delete', (Boolean) params.get('r_delete')));
        query.addAll(client.makeParam('action', (String) params.get('action')));
        query.addAll(client.makeParam('$location', (String) params.get('location')));
        query.addAll(client.makeParam('propertylist', (List<String>) params.get('propertylist'), 'csv'));
        query.addAll(client.makeParams('cq.aclsetup.rules', (List<String>) params.get('cqAclsetupRules')));

        List<OAS.Param> form = new List<OAS.Param>();

        return (OASComDayCqSecurityACLSetupInfo) client.invoke(
            'POST', '/system/console/configMgr/com.day.cq.security.ACLSetup', '',
            query, form,
            new Map<String, Object>(),
            new Map<String, Object>(),
            new List<String>{ 'application/json', 'text/plain' },
            new List<String>(),
            new List<String> { 'aemAuth' },
            OASComDayCqSecurityACLSetupInfo.class
        );
    }
    /**
     * 
     * 
     * @param post  (optional)
     * @param apply  (optional)
     * @param r_delete  (optional)
     * @param action  (optional)
     * @param location  (optional)
     * @param propertylist  (optional)
     * @param schedulerPeriod  (optional)
     * @param schedulerConcurrent  (optional)
     * @param path  (optional)
     * @param workspace  (optional)
     * @param keywordsPath  (optional)
     * @param asyncEntries  (optional)
     * @return OASComDayCqStatisticsImplStatisticsS
     * @throws OAS.ApiException if fails to make API call
     */
    public OASComDayCqStatisticsImplStatisticsS comDayCqStatisticsImplStatisticsServiceImpl(Map<String, Object> params) {
        List<OAS.Param> query = new List<OAS.Param>();

        // cast query params to verify their expected type
        query.addAll(client.makeParam('post', (Boolean) params.get('post')));
        query.addAll(client.makeParam('apply', (Boolean) params.get('apply')));
        query.addAll(client.makeParam('delete', (Boolean) params.get('r_delete')));
        query.addAll(client.makeParam('action', (String) params.get('action')));
        query.addAll(client.makeParam('$location', (String) params.get('location')));
        query.addAll(client.makeParam('propertylist', (List<String>) params.get('propertylist'), 'csv'));
        query.addAll(client.makeParam('scheduler.period', (Integer) params.get('schedulerPeriod')));
        query.addAll(client.makeParam('scheduler.concurrent', (Boolean) params.get('schedulerConcurrent')));
        query.addAll(client.makeParam('path', (String) params.get('path')));
        query.addAll(client.makeParam('workspace', (String) params.get('workspace')));
        query.addAll(client.makeParam('keywordsPath', (String) params.get('keywordsPath')));
        query.addAll(client.makeParam('asyncEntries', (Boolean) params.get('asyncEntries')));

        List<OAS.Param> form = new List<OAS.Param>();

        return (OASComDayCqStatisticsImplStatisticsS) client.invoke(
            'POST', '/system/console/configMgr/com.day.cq.statistics.impl.StatisticsServiceImpl', '',
            query, form,
            new Map<String, Object>(),
            new Map<String, Object>(),
            new List<String>{ 'application/json', 'text/plain' },
            new List<String>(),
            new List<String> { 'aemAuth' },
            OASComDayCqStatisticsImplStatisticsS.class
        );
    }
    /**
     * 
     * 
     * @param post  (optional)
     * @param apply  (optional)
     * @param r_delete  (optional)
     * @param action  (optional)
     * @param location  (optional)
     * @param propertylist  (optional)
     * @param validationEnabled  (optional)
     * @return OASComDayCqTaggingImplJcrTagManagerF
     * @throws OAS.ApiException if fails to make API call
     */
    public OASComDayCqTaggingImplJcrTagManagerF comDayCqTaggingImplJcrTagManagerFactoryImpl(Map<String, Object> params) {
        List<OAS.Param> query = new List<OAS.Param>();

        // cast query params to verify their expected type
        query.addAll(client.makeParam('post', (Boolean) params.get('post')));
        query.addAll(client.makeParam('apply', (Boolean) params.get('apply')));
        query.addAll(client.makeParam('delete', (Boolean) params.get('r_delete')));
        query.addAll(client.makeParam('action', (String) params.get('action')));
        query.addAll(client.makeParam('$location', (String) params.get('location')));
        query.addAll(client.makeParam('propertylist', (List<String>) params.get('propertylist'), 'csv'));
        query.addAll(client.makeParam('validation.enabled', (Boolean) params.get('validationEnabled')));

        List<OAS.Param> form = new List<OAS.Param>();

        return (OASComDayCqTaggingImplJcrTagManagerF) client.invoke(
            'POST', '/system/console/configMgr/com.day.cq.tagging.impl.JcrTagManagerFactoryImpl', '',
            query, form,
            new Map<String, Object>(),
            new Map<String, Object>(),
            new List<String>{ 'application/json', 'text/plain' },
            new List<String>(),
            new List<String> { 'aemAuth' },
            OASComDayCqTaggingImplJcrTagManagerF.class
        );
    }
    /**
     * 
     * 
     * @param post  (optional)
     * @param apply  (optional)
     * @param r_delete  (optional)
     * @param action  (optional)
     * @param location  (optional)
     * @param propertylist  (optional)
     * @param ignorePath  (optional)
     * @return OASComDayCqTaggingImplSearchTagPredi
     * @throws OAS.ApiException if fails to make API call
     */
    public OASComDayCqTaggingImplSearchTagPredi comDayCqTaggingImplSearchTagPredicateEvaluator(Map<String, Object> params) {
        List<OAS.Param> query = new List<OAS.Param>();

        // cast query params to verify their expected type
        query.addAll(client.makeParam('post', (Boolean) params.get('post')));
        query.addAll(client.makeParam('apply', (Boolean) params.get('apply')));
        query.addAll(client.makeParam('delete', (Boolean) params.get('r_delete')));
        query.addAll(client.makeParam('action', (String) params.get('action')));
        query.addAll(client.makeParam('$location', (String) params.get('location')));
        query.addAll(client.makeParam('propertylist', (List<String>) params.get('propertylist'), 'csv'));
        query.addAll(client.makeParam('ignore_path', (Boolean) params.get('ignorePath')));

        List<OAS.Param> form = new List<OAS.Param>();

        return (OASComDayCqTaggingImplSearchTagPredi) client.invoke(
            'POST', '/system/console/configMgr/com.day.cq.tagging.impl.search.TagPredicateEvaluator', '',
            query, form,
            new Map<String, Object>(),
            new Map<String, Object>(),
            new List<String>{ 'application/json', 'text/plain' },
            new List<String>(),
            new List<String> { 'aemAuth' },
            OASComDayCqTaggingImplSearchTagPredi.class
        );
    }
    /**
     * 
     * 
     * @param post  (optional)
     * @param apply  (optional)
     * @param r_delete  (optional)
     * @param action  (optional)
     * @param location  (optional)
     * @param propertylist  (optional)
     * @param schedulerExpression  (optional)
     * @return OASComDayCqTaggingImplTagGarbageColl
     * @throws OAS.ApiException if fails to make API call
     */
    public OASComDayCqTaggingImplTagGarbageColl comDayCqTaggingImplTagGarbageCollector(Map<String, Object> params) {
        List<OAS.Param> query = new List<OAS.Param>();

        // cast query params to verify their expected type
        query.addAll(client.makeParam('post', (Boolean) params.get('post')));
        query.addAll(client.makeParam('apply', (Boolean) params.get('apply')));
        query.addAll(client.makeParam('delete', (Boolean) params.get('r_delete')));
        query.addAll(client.makeParam('action', (String) params.get('action')));
        query.addAll(client.makeParam('$location', (String) params.get('location')));
        query.addAll(client.makeParam('propertylist', (List<String>) params.get('propertylist'), 'csv'));
        query.addAll(client.makeParam('scheduler.expression', (String) params.get('schedulerExpression')));

        List<OAS.Param> form = new List<OAS.Param>();

        return (OASComDayCqTaggingImplTagGarbageColl) client.invoke(
            'POST', '/system/console/configMgr/com.day.cq.tagging.impl.TagGarbageCollector', '',
            query, form,
            new Map<String, Object>(),
            new Map<String, Object>(),
            new List<String>{ 'application/json', 'text/plain' },
            new List<String>(),
            new List<String> { 'aemAuth' },
            OASComDayCqTaggingImplTagGarbageColl.class
        );
    }
    /**
     * 
     * 
     * @param post  (optional)
     * @param apply  (optional)
     * @param r_delete  (optional)
     * @param action  (optional)
     * @param location  (optional)
     * @param propertylist  (optional)
     * @param cqPagesupdatehandlerImageresourcetypes  (optional)
     * @return OASComDayCqWcmContentsyncImplHandler
     * @throws OAS.ApiException if fails to make API call
     */
    public OASComDayCqWcmContentsyncImplHandler comDayCqWcmContentsyncImplHandlerPagesUpdateHandler(Map<String, Object> params) {
        List<OAS.Param> query = new List<OAS.Param>();

        // cast query params to verify their expected type
        query.addAll(client.makeParam('post', (Boolean) params.get('post')));
        query.addAll(client.makeParam('apply', (Boolean) params.get('apply')));
        query.addAll(client.makeParam('delete', (Boolean) params.get('r_delete')));
        query.addAll(client.makeParam('action', (String) params.get('action')));
        query.addAll(client.makeParam('$location', (String) params.get('location')));
        query.addAll(client.makeParam('propertylist', (List<String>) params.get('propertylist'), 'csv'));
        query.addAll(client.makeParams('cq.pagesupdatehandler.imageresourcetypes', (List<String>) params.get('cqPagesupdatehandlerImageresourcetypes')));

        List<OAS.Param> form = new List<OAS.Param>();

        return (OASComDayCqWcmContentsyncImplHandler) client.invoke(
            'POST', '/system/console/configMgr/com.day.cq.wcm.contentsync.impl.handler.PagesUpdateHandler', '',
            query, form,
            new Map<String, Object>(),
            new Map<String, Object>(),
            new List<String>{ 'application/json', 'text/plain' },
            new List<String>(),
            new List<String> { 'aemAuth' },
            OASComDayCqWcmContentsyncImplHandler.class
        );
    }
    /**
     * 
     * 
     * @param post  (optional)
     * @param apply  (optional)
     * @param r_delete  (optional)
     * @param action  (optional)
     * @param location  (optional)
     * @param propertylist  (optional)
     * @param cqContentsyncPathrewritertransformerMappingLinks  (optional)
     * @param cqContentsyncPathrewritertransformerMappingClientlibs  (optional)
     * @param cqContentsyncPathrewritertransformerMappingImages  (optional)
     * @param cqContentsyncPathrewritertransformerAttributePattern  (optional)
     * @param cqContentsyncPathrewritertransformerClientlibraryPattern  (optional)
     * @param cqContentsyncPathrewritertransformerClientlibraryReplace  (optional)
     * @return OASComDayCqWcmContentsyncImplRewrite
     * @throws OAS.ApiException if fails to make API call
     */
    public OASComDayCqWcmContentsyncImplRewrite comDayCqWcmContentsyncImplRewriterPathRewriterTransformerFactor(Map<String, Object> params) {
        List<OAS.Param> query = new List<OAS.Param>();

        // cast query params to verify their expected type
        query.addAll(client.makeParam('post', (Boolean) params.get('post')));
        query.addAll(client.makeParam('apply', (Boolean) params.get('apply')));
        query.addAll(client.makeParam('delete', (Boolean) params.get('r_delete')));
        query.addAll(client.makeParam('action', (String) params.get('action')));
        query.addAll(client.makeParam('$location', (String) params.get('location')));
        query.addAll(client.makeParam('propertylist', (List<String>) params.get('propertylist'), 'csv'));
        query.addAll(client.makeParams('cq.contentsync.pathrewritertransformer.mapping.links', (List<String>) params.get('cqContentsyncPathrewritertransformerMappingLinks')));
        query.addAll(client.makeParams('cq.contentsync.pathrewritertransformer.mapping.clientlibs', (List<String>) params.get('cqContentsyncPathrewritertransformerMappingClientlibs')));
        query.addAll(client.makeParams('cq.contentsync.pathrewritertransformer.mapping.images', (List<String>) params.get('cqContentsyncPathrewritertransformerMappingImages')));
        query.addAll(client.makeParam('cq.contentsync.pathrewritertransformer.attribute.pattern', (String) params.get('cqContentsyncPathrewritertransformerAttributePattern')));
        query.addAll(client.makeParam('cq.contentsync.pathrewritertransformer.clientlibrary.pattern', (String) params.get('cqContentsyncPathrewritertransformerClientlibraryPattern')));
        query.addAll(client.makeParam('cq.contentsync.pathrewritertransformer.clientlibrary.replace', (String) params.get('cqContentsyncPathrewritertransformerClientlibraryReplace')));

        List<OAS.Param> form = new List<OAS.Param>();

        return (OASComDayCqWcmContentsyncImplRewrite) client.invoke(
            'POST', '/system/console/configMgr/com.day.cq.wcm.contentsync.impl.rewriter.PathRewriterTransformerFactory', '',
            query, form,
            new Map<String, Object>(),
            new Map<String, Object>(),
            new List<String>{ 'application/json', 'text/plain' },
            new List<String>(),
            new List<String> { 'aemAuth' },
            OASComDayCqWcmContentsyncImplRewrite.class
        );
    }
    /**
     * 
     * 
     * @param post  (optional)
     * @param apply  (optional)
     * @param r_delete  (optional)
     * @param action  (optional)
     * @param location  (optional)
     * @param propertylist  (optional)
     * @param authoringUIModeServiceDefault  (optional)
     * @return OASComDayCqWcmCoreImplAuthoringUIMod
     * @throws OAS.ApiException if fails to make API call
     */
    public OASComDayCqWcmCoreImplAuthoringUIMod comDayCqWcmCoreImplAuthoringUIModeServiceImpl(Map<String, Object> params) {
        List<OAS.Param> query = new List<OAS.Param>();

        // cast query params to verify their expected type
        query.addAll(client.makeParam('post', (Boolean) params.get('post')));
        query.addAll(client.makeParam('apply', (Boolean) params.get('apply')));
        query.addAll(client.makeParam('delete', (Boolean) params.get('r_delete')));
        query.addAll(client.makeParam('action', (String) params.get('action')));
        query.addAll(client.makeParam('$location', (String) params.get('location')));
        query.addAll(client.makeParam('propertylist', (List<String>) params.get('propertylist'), 'csv'));
        query.addAll(client.makeParam('authoringUIModeService.default', (String) params.get('authoringUIModeServiceDefault')));

        List<OAS.Param> form = new List<OAS.Param>();

        return (OASComDayCqWcmCoreImplAuthoringUIMod) client.invoke(
            'POST', '/system/console/configMgr/com.day.cq.wcm.core.impl.AuthoringUIModeServiceImpl', '',
            query, form,
            new Map<String, Object>(),
            new Map<String, Object>(),
            new List<String>{ 'application/json', 'text/plain' },
            new List<String>(),
            new List<String> { 'aemAuth' },
            OASComDayCqWcmCoreImplAuthoringUIMod.class
        );
    }
    /**
     * 
     * 
     * @param post  (optional)
     * @param apply  (optional)
     * @param r_delete  (optional)
     * @param action  (optional)
     * @param location  (optional)
     * @param propertylist  (optional)
     * @param wcmcommandservletDeleteWhitelist  (optional)
     * @return OASComDayCqWcmCoreImplCommandsWCMCom
     * @throws OAS.ApiException if fails to make API call
     */
    public OASComDayCqWcmCoreImplCommandsWCMCom comDayCqWcmCoreImplCommandsWCMCommandServlet(Map<String, Object> params) {
        List<OAS.Param> query = new List<OAS.Param>();

        // cast query params to verify their expected type
        query.addAll(client.makeParam('post', (Boolean) params.get('post')));
        query.addAll(client.makeParam('apply', (Boolean) params.get('apply')));
        query.addAll(client.makeParam('delete', (Boolean) params.get('r_delete')));
        query.addAll(client.makeParam('action', (String) params.get('action')));
        query.addAll(client.makeParam('$location', (String) params.get('location')));
        query.addAll(client.makeParam('propertylist', (List<String>) params.get('propertylist'), 'csv'));
        query.addAll(client.makeParams('wcmcommandservlet.delete_whitelist', (List<String>) params.get('wcmcommandservletDeleteWhitelist')));

        List<OAS.Param> form = new List<OAS.Param>();

        return (OASComDayCqWcmCoreImplCommandsWCMCom) client.invoke(
            'POST', '/system/console/configMgr/com.day.cq.wcm.core.impl.commands.WCMCommandServlet', '',
            query, form,
            new Map<String, Object>(),
            new Map<String, Object>(),
            new List<String>{ 'application/json', 'text/plain' },
            new List<String>(),
            new List<String> { 'aemAuth' },
            OASComDayCqWcmCoreImplCommandsWCMCom.class
        );
    }
    /**
     * 
     * 
     * @param post  (optional)
     * @param apply  (optional)
     * @param r_delete  (optional)
     * @param action  (optional)
     * @param location  (optional)
     * @param propertylist  (optional)
     * @param dimDefaultMode  (optional)
     * @param dimAppcacheEnabled  (optional)
     * @return OASComDayCqWcmCoreImplDevicedetectio
     * @throws OAS.ApiException if fails to make API call
     */
    public OASComDayCqWcmCoreImplDevicedetectio comDayCqWcmCoreImplDevicedetectionDeviceIdentificationModeImpl(Map<String, Object> params) {
        List<OAS.Param> query = new List<OAS.Param>();

        // cast query params to verify their expected type
        query.addAll(client.makeParam('post', (Boolean) params.get('post')));
        query.addAll(client.makeParam('apply', (Boolean) params.get('apply')));
        query.addAll(client.makeParam('delete', (Boolean) params.get('r_delete')));
        query.addAll(client.makeParam('action', (String) params.get('action')));
        query.addAll(client.makeParam('$location', (String) params.get('location')));
        query.addAll(client.makeParam('propertylist', (List<String>) params.get('propertylist'), 'csv'));
        query.addAll(client.makeParam('dim.default.mode', (String) params.get('dimDefaultMode')));
        query.addAll(client.makeParam('dim.appcache.enabled', (Boolean) params.get('dimAppcacheEnabled')));

        List<OAS.Param> form = new List<OAS.Param>();

        return (OASComDayCqWcmCoreImplDevicedetectio) client.invoke(
            'POST', '/system/console/configMgr/com.day.cq.wcm.core.impl.devicedetection.DeviceIdentificationModeImpl', '',
            query, form,
            new Map<String, Object>(),
            new Map<String, Object>(),
            new List<String>{ 'application/json', 'text/plain' },
            new List<String>(),
            new List<String> { 'aemAuth' },
            OASComDayCqWcmCoreImplDevicedetectio.class
        );
    }
    /**
     * 
     * 
     * @param post  (optional)
     * @param apply  (optional)
     * @param r_delete  (optional)
     * @param action  (optional)
     * @param location  (optional)
     * @param propertylist  (optional)
     * @param configured  (optional)
     * @return OASComDayCqWcmCoreImplEventPageEvent
     * @throws OAS.ApiException if fails to make API call
     */
    public OASComDayCqWcmCoreImplEventPageEvent comDayCqWcmCoreImplEventPageEventAuditListener(Map<String, Object> params) {
        List<OAS.Param> query = new List<OAS.Param>();

        // cast query params to verify their expected type
        query.addAll(client.makeParam('post', (Boolean) params.get('post')));
        query.addAll(client.makeParam('apply', (Boolean) params.get('apply')));
        query.addAll(client.makeParam('delete', (Boolean) params.get('r_delete')));
        query.addAll(client.makeParam('action', (String) params.get('action')));
        query.addAll(client.makeParam('$location', (String) params.get('location')));
        query.addAll(client.makeParam('propertylist', (List<String>) params.get('propertylist'), 'csv'));
        query.addAll(client.makeParam('configured', (String) params.get('configured')));

        List<OAS.Param> form = new List<OAS.Param>();

        return (OASComDayCqWcmCoreImplEventPageEvent) client.invoke(
            'POST', '/system/console/configMgr/com.day.cq.wcm.core.impl.event.PageEventAuditListener', '',
            query, form,
            new Map<String, Object>(),
            new Map<String, Object>(),
            new List<String>{ 'application/json', 'text/plain' },
            new List<String>(),
            new List<String> { 'aemAuth' },
            OASComDayCqWcmCoreImplEventPageEvent.class
        );
    }
    /**
     * 
     * 
     * @param post  (optional)
     * @param apply  (optional)
     * @param r_delete  (optional)
     * @param action  (optional)
     * @param location  (optional)
     * @param propertylist  (optional)
     * @param paths  (optional)
     * @return OASComDayCqWcmCoreImplEventPagePostP
     * @throws OAS.ApiException if fails to make API call
     */
    public OASComDayCqWcmCoreImplEventPagePostP comDayCqWcmCoreImplEventPagePostProcessor(Map<String, Object> params) {
        List<OAS.Param> query = new List<OAS.Param>();

        // cast query params to verify their expected type
        query.addAll(client.makeParam('post', (Boolean) params.get('post')));
        query.addAll(client.makeParam('apply', (Boolean) params.get('apply')));
        query.addAll(client.makeParam('delete', (Boolean) params.get('r_delete')));
        query.addAll(client.makeParam('action', (String) params.get('action')));
        query.addAll(client.makeParam('$location', (String) params.get('location')));
        query.addAll(client.makeParam('propertylist', (List<String>) params.get('propertylist'), 'csv'));
        query.addAll(client.makeParams('paths', (List<String>) params.get('paths')));

        List<OAS.Param> form = new List<OAS.Param>();

        return (OASComDayCqWcmCoreImplEventPagePostP) client.invoke(
            'POST', '/system/console/configMgr/com.day.cq.wcm.core.impl.event.PagePostProcessor', '',
            query, form,
            new Map<String, Object>(),
            new Map<String, Object>(),
            new List<String>{ 'application/json', 'text/plain' },
            new List<String>(),
            new List<String> { 'aemAuth' },
            OASComDayCqWcmCoreImplEventPagePostP.class
        );
    }
    /**
     * 
     * 
     * @param post  (optional)
     * @param apply  (optional)
     * @param r_delete  (optional)
     * @param action  (optional)
     * @param location  (optional)
     * @param propertylist  (optional)
     * @param paths  (optional)
     * @param excludedPaths  (optional)
     * @return OASComDayCqWcmCoreImplEventRepositor
     * @throws OAS.ApiException if fails to make API call
     */
    public OASComDayCqWcmCoreImplEventRepositor comDayCqWcmCoreImplEventRepositoryChangeEventListener(Map<String, Object> params) {
        List<OAS.Param> query = new List<OAS.Param>();

        // cast query params to verify their expected type
        query.addAll(client.makeParam('post', (Boolean) params.get('post')));
        query.addAll(client.makeParam('apply', (Boolean) params.get('apply')));
        query.addAll(client.makeParam('delete', (Boolean) params.get('r_delete')));
        query.addAll(client.makeParam('action', (String) params.get('action')));
        query.addAll(client.makeParam('$location', (String) params.get('location')));
        query.addAll(client.makeParam('propertylist', (List<String>) params.get('propertylist'), 'csv'));
        query.addAll(client.makeParams('paths', (List<String>) params.get('paths')));
        query.addAll(client.makeParams('excludedPaths', (List<String>) params.get('excludedPaths')));

        List<OAS.Param> form = new List<OAS.Param>();

        return (OASComDayCqWcmCoreImplEventRepositor) client.invoke(
            'POST', '/system/console/configMgr/com.day.cq.wcm.core.impl.event.RepositoryChangeEventListener', '',
            query, form,
            new Map<String, Object>(),
            new Map<String, Object>(),
            new List<String>{ 'application/json', 'text/plain' },
            new List<String>(),
            new List<String> { 'aemAuth' },
            OASComDayCqWcmCoreImplEventRepositor.class
        );
    }
    /**
     * 
     * 
     * @param post  (optional)
     * @param apply  (optional)
     * @param r_delete  (optional)
     * @param action  (optional)
     * @param location  (optional)
     * @param propertylist  (optional)
     * @param paths  (optional)
     * @return OASComDayCqWcmCoreImplEventTemplateP
     * @throws OAS.ApiException if fails to make API call
     */
    public OASComDayCqWcmCoreImplEventTemplateP comDayCqWcmCoreImplEventTemplatePostProcessor(Map<String, Object> params) {
        List<OAS.Param> query = new List<OAS.Param>();

        // cast query params to verify their expected type
        query.addAll(client.makeParam('post', (Boolean) params.get('post')));
        query.addAll(client.makeParam('apply', (Boolean) params.get('apply')));
        query.addAll(client.makeParam('delete', (Boolean) params.get('r_delete')));
        query.addAll(client.makeParam('action', (String) params.get('action')));
        query.addAll(client.makeParam('$location', (String) params.get('location')));
        query.addAll(client.makeParam('propertylist', (List<String>) params.get('propertylist'), 'csv'));
        query.addAll(client.makeParam('paths', (String) params.get('paths')));

        List<OAS.Param> form = new List<OAS.Param>();

        return (OASComDayCqWcmCoreImplEventTemplateP) client.invoke(
            'POST', '/system/console/configMgr/com.day.cq.wcm.core.impl.event.TemplatePostProcessor', '',
            query, form,
            new Map<String, Object>(),
            new Map<String, Object>(),
            new List<String>{ 'application/json', 'text/plain' },
            new List<String>(),
            new List<String> { 'aemAuth' },
            OASComDayCqWcmCoreImplEventTemplateP.class
        );
    }
    /**
     * 
     * 
     * @param post  (optional)
     * @param apply  (optional)
     * @param r_delete  (optional)
     * @param action  (optional)
     * @param location  (optional)
     * @param propertylist  (optional)
     * @param langmgrListPath  (optional)
     * @param langmgrCountryDefault  (optional)
     * @return OASComDayCqWcmCoreImplLanguageManage
     * @throws OAS.ApiException if fails to make API call
     */
    public OASComDayCqWcmCoreImplLanguageManage comDayCqWcmCoreImplLanguageManagerImpl(Map<String, Object> params) {
        List<OAS.Param> query = new List<OAS.Param>();

        // cast query params to verify their expected type
        query.addAll(client.makeParam('post', (Boolean) params.get('post')));
        query.addAll(client.makeParam('apply', (Boolean) params.get('apply')));
        query.addAll(client.makeParam('delete', (Boolean) params.get('r_delete')));
        query.addAll(client.makeParam('action', (String) params.get('action')));
        query.addAll(client.makeParam('$location', (String) params.get('location')));
        query.addAll(client.makeParam('propertylist', (List<String>) params.get('propertylist'), 'csv'));
        query.addAll(client.makeParam('langmgr.list.path', (String) params.get('langmgrListPath')));
        query.addAll(client.makeParams('langmgr.country.default', (List<String>) params.get('langmgrCountryDefault')));

        List<OAS.Param> form = new List<OAS.Param>();

        return (OASComDayCqWcmCoreImplLanguageManage) client.invoke(
            'POST', '/system/console/configMgr/com.day.cq.wcm.core.impl.LanguageManagerImpl', '',
            query, form,
            new Map<String, Object>(),
            new Map<String, Object>(),
            new List<String>{ 'application/json', 'text/plain' },
            new List<String>(),
            new List<String> { 'aemAuth' },
            OASComDayCqWcmCoreImplLanguageManage.class
        );
    }
    /**
     * 
     * 
     * @param post  (optional)
     * @param apply  (optional)
     * @param r_delete  (optional)
     * @param action  (optional)
     * @param location  (optional)
     * @param propertylist  (optional)
     * @param linkExpiredPrefix  (optional)
     * @param linkExpiredRemove  (optional)
     * @param linkExpiredSuffix  (optional)
     * @param linkInvalidPrefix  (optional)
     * @param linkInvalidRemove  (optional)
     * @param linkInvalidSuffix  (optional)
     * @param linkPredatedPrefix  (optional)
     * @param linkPredatedRemove  (optional)
     * @param linkPredatedSuffix  (optional)
     * @param linkWcmmodes  (optional)
     * @return OASComDayCqWcmCoreImplLinkCheckerCon
     * @throws OAS.ApiException if fails to make API call
     */
    public OASComDayCqWcmCoreImplLinkCheckerCon comDayCqWcmCoreImplLinkCheckerConfigurationFactoryImpl(Map<String, Object> params) {
        List<OAS.Param> query = new List<OAS.Param>();

        // cast query params to verify their expected type
        query.addAll(client.makeParam('post', (Boolean) params.get('post')));
        query.addAll(client.makeParam('apply', (Boolean) params.get('apply')));
        query.addAll(client.makeParam('delete', (Boolean) params.get('r_delete')));
        query.addAll(client.makeParam('action', (String) params.get('action')));
        query.addAll(client.makeParam('$location', (String) params.get('location')));
        query.addAll(client.makeParam('propertylist', (List<String>) params.get('propertylist'), 'csv'));
        query.addAll(client.makeParam('link.expired.prefix', (String) params.get('linkExpiredPrefix')));
        query.addAll(client.makeParam('link.expired.remove', (Boolean) params.get('linkExpiredRemove')));
        query.addAll(client.makeParam('link.expired.suffix', (String) params.get('linkExpiredSuffix')));
        query.addAll(client.makeParam('link.invalid.prefix', (String) params.get('linkInvalidPrefix')));
        query.addAll(client.makeParam('link.invalid.remove', (Boolean) params.get('linkInvalidRemove')));
        query.addAll(client.makeParam('link.invalid.suffix', (String) params.get('linkInvalidSuffix')));
        query.addAll(client.makeParam('link.predated.prefix', (String) params.get('linkPredatedPrefix')));
        query.addAll(client.makeParam('link.predated.remove', (Boolean) params.get('linkPredatedRemove')));
        query.addAll(client.makeParam('link.predated.suffix', (String) params.get('linkPredatedSuffix')));
        query.addAll(client.makeParams('link.wcmmodes', (List<String>) params.get('linkWcmmodes')));

        List<OAS.Param> form = new List<OAS.Param>();

        return (OASComDayCqWcmCoreImplLinkCheckerCon) client.invoke(
            'POST', '/system/console/configMgr/com.day.cq.wcm.core.impl.LinkCheckerConfigurationFactoryImpl', '',
            query, form,
            new Map<String, Object>(),
            new Map<String, Object>(),
            new List<String>{ 'application/json', 'text/plain' },
            new List<String>(),
            new List<String> { 'aemAuth' },
            OASComDayCqWcmCoreImplLinkCheckerCon.class
        );
    }
    /**
     * 
     * 
     * @param post  (optional)
     * @param apply  (optional)
     * @param r_delete  (optional)
     * @param action  (optional)
     * @param location  (optional)
     * @param propertylist  (optional)
     * @param pageInfoProviderPropertyRegexDefault  (optional)
     * @param pageInfoProviderPropertyName  (optional)
     * @return OASComDayCqWcmCoreImplPagePageInfoAg
     * @throws OAS.ApiException if fails to make API call
     */
    public OASComDayCqWcmCoreImplPagePageInfoAg comDayCqWcmCoreImplPagePageInfoAggregatorImpl(Map<String, Object> params) {
        List<OAS.Param> query = new List<OAS.Param>();

        // cast query params to verify their expected type
        query.addAll(client.makeParam('post', (Boolean) params.get('post')));
        query.addAll(client.makeParam('apply', (Boolean) params.get('apply')));
        query.addAll(client.makeParam('delete', (Boolean) params.get('r_delete')));
        query.addAll(client.makeParam('action', (String) params.get('action')));
        query.addAll(client.makeParam('$location', (String) params.get('location')));
        query.addAll(client.makeParam('propertylist', (List<String>) params.get('propertylist'), 'csv'));
        query.addAll(client.makeParam('page.info.provider.property.regex.default', (String) params.get('pageInfoProviderPropertyRegexDefault')));
        query.addAll(client.makeParam('page.info.provider.property.name', (String) params.get('pageInfoProviderPropertyName')));

        List<OAS.Param> form = new List<OAS.Param>();

        return (OASComDayCqWcmCoreImplPagePageInfoAg) client.invoke(
            'POST', '/system/console/configMgr/com.day.cq.wcm.core.impl.page.PageInfoAggregatorImpl', '',
            query, form,
            new Map<String, Object>(),
            new Map<String, Object>(),
            new List<String>{ 'application/json', 'text/plain' },
            new List<String>(),
            new List<String> { 'aemAuth' },
            OASComDayCqWcmCoreImplPagePageInfoAg.class
        );
    }
    /**
     * 
     * 
     * @param post  (optional)
     * @param apply  (optional)
     * @param r_delete  (optional)
     * @param action  (optional)
     * @param location  (optional)
     * @param propertylist  (optional)
     * @param illegalCharMapping  (optional)
     * @param pageSubTreeActivationCheck  (optional)
     * @return OASComDayCqWcmCoreImplPagePageManage
     * @throws OAS.ApiException if fails to make API call
     */
    public OASComDayCqWcmCoreImplPagePageManage comDayCqWcmCoreImplPagePageManagerFactoryImpl(Map<String, Object> params) {
        List<OAS.Param> query = new List<OAS.Param>();

        // cast query params to verify their expected type
        query.addAll(client.makeParam('post', (Boolean) params.get('post')));
        query.addAll(client.makeParam('apply', (Boolean) params.get('apply')));
        query.addAll(client.makeParam('delete', (Boolean) params.get('r_delete')));
        query.addAll(client.makeParam('action', (String) params.get('action')));
        query.addAll(client.makeParam('$location', (String) params.get('location')));
        query.addAll(client.makeParam('propertylist', (List<String>) params.get('propertylist'), 'csv'));
        query.addAll(client.makeParam('illegalCharMapping', (String) params.get('illegalCharMapping')));
        query.addAll(client.makeParam('pageSubTreeActivationCheck', (Boolean) params.get('pageSubTreeActivationCheck')));

        List<OAS.Param> form = new List<OAS.Param>();

        return (OASComDayCqWcmCoreImplPagePageManage) client.invoke(
            'POST', '/system/console/configMgr/com.day.cq.wcm.core.impl.page.PageManagerFactoryImpl', '',
            query, form,
            new Map<String, Object>(),
            new Map<String, Object>(),
            new List<String>{ 'application/json', 'text/plain' },
            new List<String>(),
            new List<String> { 'aemAuth' },
            OASComDayCqWcmCoreImplPagePageManage.class
        );
    }
    /**
     * 
     * 
     * @param post  (optional)
     * @param apply  (optional)
     * @param r_delete  (optional)
     * @param action  (optional)
     * @param location  (optional)
     * @param propertylist  (optional)
     * @param contentReferenceConfigResourceTypes  (optional)
     * @return OASComDayCqWcmCoreImplReferencesCont
     * @throws OAS.ApiException if fails to make API call
     */
    public OASComDayCqWcmCoreImplReferencesCont comDayCqWcmCoreImplReferencesContentContentReferenceConfig(Map<String, Object> params) {
        List<OAS.Param> query = new List<OAS.Param>();

        // cast query params to verify their expected type
        query.addAll(client.makeParam('post', (Boolean) params.get('post')));
        query.addAll(client.makeParam('apply', (Boolean) params.get('apply')));
        query.addAll(client.makeParam('delete', (Boolean) params.get('r_delete')));
        query.addAll(client.makeParam('action', (String) params.get('action')));
        query.addAll(client.makeParam('$location', (String) params.get('location')));
        query.addAll(client.makeParam('propertylist', (List<String>) params.get('propertylist'), 'csv'));
        query.addAll(client.makeParams('contentReferenceConfig.resourceTypes', (List<String>) params.get('contentReferenceConfigResourceTypes')));

        List<OAS.Param> form = new List<OAS.Param>();

        return (OASComDayCqWcmCoreImplReferencesCont) client.invoke(
            'POST', '/system/console/configMgr/com.day.cq.wcm.core.impl.references.content.ContentReferenceConfig', '',
            query, form,
            new Map<String, Object>(),
            new Map<String, Object>(),
            new List<String>{ 'application/json', 'text/plain' },
            new List<String>(),
            new List<String> { 'aemAuth' },
            OASComDayCqWcmCoreImplReferencesCont.class
        );
    }
    /**
     * 
     * 
     * @param post  (optional)
     * @param apply  (optional)
     * @param r_delete  (optional)
     * @param action  (optional)
     * @param location  (optional)
     * @param propertylist  (optional)
     * @param damShowexpired  (optional)
     * @param damShowhidden  (optional)
     * @param tagTitleSearch  (optional)
     * @param guessTotal  (optional)
     * @param damExpiryProperty  (optional)
     * @return OASComDayCqWcmCoreImplServletsConten
     * @throws OAS.ApiException if fails to make API call
     */
    public OASComDayCqWcmCoreImplServletsConten comDayCqWcmCoreImplServletsContentfinderAssetViewHandler(Map<String, Object> params) {
        List<OAS.Param> query = new List<OAS.Param>();

        // cast query params to verify their expected type
        query.addAll(client.makeParam('post', (Boolean) params.get('post')));
        query.addAll(client.makeParam('apply', (Boolean) params.get('apply')));
        query.addAll(client.makeParam('delete', (Boolean) params.get('r_delete')));
        query.addAll(client.makeParam('action', (String) params.get('action')));
        query.addAll(client.makeParam('$location', (String) params.get('location')));
        query.addAll(client.makeParam('propertylist', (List<String>) params.get('propertylist'), 'csv'));
        query.addAll(client.makeParam('dam.showexpired', (Boolean) params.get('damShowexpired')));
        query.addAll(client.makeParam('dam.showhidden', (Boolean) params.get('damShowhidden')));
        query.addAll(client.makeParam('tagTitleSearch', (Boolean) params.get('tagTitleSearch')));
        query.addAll(client.makeParam('guessTotal', (String) params.get('guessTotal')));
        query.addAll(client.makeParam('dam.expiryProperty', (String) params.get('damExpiryProperty')));

        List<OAS.Param> form = new List<OAS.Param>();

        return (OASComDayCqWcmCoreImplServletsConten) client.invoke(
            'POST', '/system/console/configMgr/com.day.cq.wcm.core.impl.servlets.contentfinder.AssetViewHandler', '',
            query, form,
            new Map<String, Object>(),
            new Map<String, Object>(),
            new List<String>{ 'application/json', 'text/plain' },
            new List<String>(),
            new List<String> { 'aemAuth' },
            OASComDayCqWcmCoreImplServletsConten.class
        );
    }
    /**
     * 
     * 
     * @param post  (optional)
     * @param apply  (optional)
     * @param r_delete  (optional)
     * @param action  (optional)
     * @param location  (optional)
     * @param propertylist  (optional)
     * @param itemResourceTypes  (optional)
     * @return OASComDayCqWcmCoreImplServletsConten
     * @throws OAS.ApiException if fails to make API call
     */
    public OASComDayCqWcmCoreImplServletsConten comDayCqWcmCoreImplServletsContentfinderConnectorConnectorVie(Map<String, Object> params) {
        List<OAS.Param> query = new List<OAS.Param>();

        // cast query params to verify their expected type
        query.addAll(client.makeParam('post', (Boolean) params.get('post')));
        query.addAll(client.makeParam('apply', (Boolean) params.get('apply')));
        query.addAll(client.makeParam('delete', (Boolean) params.get('r_delete')));
        query.addAll(client.makeParam('action', (String) params.get('action')));
        query.addAll(client.makeParam('$location', (String) params.get('location')));
        query.addAll(client.makeParam('propertylist', (List<String>) params.get('propertylist'), 'csv'));
        query.addAll(client.makeParams('item.resource.types', (List<String>) params.get('itemResourceTypes')));

        List<OAS.Param> form = new List<OAS.Param>();

        return (OASComDayCqWcmCoreImplServletsConten) client.invoke(
            'POST', '/system/console/configMgr/com.day.cq.wcm.core.impl.servlets.contentfinder.connector.ConnectorViewHandler', '',
            query, form,
            new Map<String, Object>(),
            new Map<String, Object>(),
            new List<String>{ 'application/json', 'text/plain' },
            new List<String>(),
            new List<String> { 'aemAuth' },
            OASComDayCqWcmCoreImplServletsConten.class
        );
    }
    /**
     * 
     * 
     * @param post  (optional)
     * @param apply  (optional)
     * @param r_delete  (optional)
     * @param action  (optional)
     * @param location  (optional)
     * @param propertylist  (optional)
     * @param guessTotal  (optional)
     * @param tagTitleSearch  (optional)
     * @return OASComDayCqWcmCoreImplServletsConten
     * @throws OAS.ApiException if fails to make API call
     */
    public OASComDayCqWcmCoreImplServletsConten comDayCqWcmCoreImplServletsContentfinderPageViewHandler(Map<String, Object> params) {
        List<OAS.Param> query = new List<OAS.Param>();

        // cast query params to verify their expected type
        query.addAll(client.makeParam('post', (Boolean) params.get('post')));
        query.addAll(client.makeParam('apply', (Boolean) params.get('apply')));
        query.addAll(client.makeParam('delete', (Boolean) params.get('r_delete')));
        query.addAll(client.makeParam('action', (String) params.get('action')));
        query.addAll(client.makeParam('$location', (String) params.get('location')));
        query.addAll(client.makeParam('propertylist', (List<String>) params.get('propertylist'), 'csv'));
        query.addAll(client.makeParam('guessTotal', (String) params.get('guessTotal')));
        query.addAll(client.makeParam('tagTitleSearch', (Boolean) params.get('tagTitleSearch')));

        List<OAS.Param> form = new List<OAS.Param>();

        return (OASComDayCqWcmCoreImplServletsConten) client.invoke(
            'POST', '/system/console/configMgr/com.day.cq.wcm.core.impl.servlets.contentfinder.PageViewHandler', '',
            query, form,
            new Map<String, Object>(),
            new Map<String, Object>(),
            new List<String>{ 'application/json', 'text/plain' },
            new List<String>(),
            new List<String> { 'aemAuth' },
            OASComDayCqWcmCoreImplServletsConten.class
        );
    }
    /**
     * 
     * 
     * @param post  (optional)
     * @param apply  (optional)
     * @param r_delete  (optional)
     * @param action  (optional)
     * @param location  (optional)
     * @param propertylist  (optional)
     * @param scope  (optional)
     * @return OASComDayCqWcmCoreImplServletsFindRe
     * @throws OAS.ApiException if fails to make API call
     */
    public OASComDayCqWcmCoreImplServletsFindRe comDayCqWcmCoreImplServletsFindReplaceServlet(Map<String, Object> params) {
        List<OAS.Param> query = new List<OAS.Param>();

        // cast query params to verify their expected type
        query.addAll(client.makeParam('post', (Boolean) params.get('post')));
        query.addAll(client.makeParam('apply', (Boolean) params.get('apply')));
        query.addAll(client.makeParam('delete', (Boolean) params.get('r_delete')));
        query.addAll(client.makeParam('action', (String) params.get('action')));
        query.addAll(client.makeParam('$location', (String) params.get('location')));
        query.addAll(client.makeParam('propertylist', (List<String>) params.get('propertylist'), 'csv'));
        query.addAll(client.makeParams('scope', (List<String>) params.get('scope')));

        List<OAS.Param> form = new List<OAS.Param>();

        return (OASComDayCqWcmCoreImplServletsFindRe) client.invoke(
            'POST', '/system/console/configMgr/com.day.cq.wcm.core.impl.servlets.FindReplaceServlet', '',
            query, form,
            new Map<String, Object>(),
            new Map<String, Object>(),
            new List<String>{ 'application/json', 'text/plain' },
            new List<String>(),
            new List<String> { 'aemAuth' },
            OASComDayCqWcmCoreImplServletsFindRe.class
        );
    }
    /**
     * 
     * 
     * @param post  (optional)
     * @param apply  (optional)
     * @param r_delete  (optional)
     * @param action  (optional)
     * @param location  (optional)
     * @param propertylist  (optional)
     * @param referencesearchservletMaxReferencesPerPage  (optional)
     * @param referencesearchservletMaxPages  (optional)
     * @return OASComDayCqWcmCoreImplServletsRefere
     * @throws OAS.ApiException if fails to make API call
     */
    public OASComDayCqWcmCoreImplServletsRefere comDayCqWcmCoreImplServletsReferenceSearchServlet(Map<String, Object> params) {
        List<OAS.Param> query = new List<OAS.Param>();

        // cast query params to verify their expected type
        query.addAll(client.makeParam('post', (Boolean) params.get('post')));
        query.addAll(client.makeParam('apply', (Boolean) params.get('apply')));
        query.addAll(client.makeParam('delete', (Boolean) params.get('r_delete')));
        query.addAll(client.makeParam('action', (String) params.get('action')));
        query.addAll(client.makeParam('$location', (String) params.get('location')));
        query.addAll(client.makeParam('propertylist', (List<String>) params.get('propertylist'), 'csv'));
        query.addAll(client.makeParam('referencesearchservlet.maxReferencesPerPage', (Integer) params.get('referencesearchservletMaxReferencesPerPage')));
        query.addAll(client.makeParam('referencesearchservlet.maxPages', (Integer) params.get('referencesearchservletMaxPages')));

        List<OAS.Param> form = new List<OAS.Param>();

        return (OASComDayCqWcmCoreImplServletsRefere) client.invoke(
            'POST', '/system/console/configMgr/com.day.cq.wcm.core.impl.servlets.ReferenceSearchServlet', '',
            query, form,
            new Map<String, Object>(),
            new Map<String, Object>(),
            new List<String>{ 'application/json', 'text/plain' },
            new List<String>(),
            new List<String> { 'aemAuth' },
            OASComDayCqWcmCoreImplServletsRefere.class
        );
    }
    /**
     * 
     * 
     * @param post  (optional)
     * @param apply  (optional)
     * @param r_delete  (optional)
     * @param action  (optional)
     * @param location  (optional)
     * @param propertylist  (optional)
     * @param workspace  (optional)
     * @param dimensions  (optional)
     * @return OASComDayCqWcmCoreImplServletsThumbn
     * @throws OAS.ApiException if fails to make API call
     */
    public OASComDayCqWcmCoreImplServletsThumbn comDayCqWcmCoreImplServletsThumbnailServlet(Map<String, Object> params) {
        List<OAS.Param> query = new List<OAS.Param>();

        // cast query params to verify their expected type
        query.addAll(client.makeParam('post', (Boolean) params.get('post')));
        query.addAll(client.makeParam('apply', (Boolean) params.get('apply')));
        query.addAll(client.makeParam('delete', (Boolean) params.get('r_delete')));
        query.addAll(client.makeParam('action', (String) params.get('action')));
        query.addAll(client.makeParam('$location', (String) params.get('location')));
        query.addAll(client.makeParam('propertylist', (List<String>) params.get('propertylist'), 'csv'));
        query.addAll(client.makeParam('workspace', (String) params.get('workspace')));
        query.addAll(client.makeParams('dimensions', (List<String>) params.get('dimensions')));

        List<OAS.Param> form = new List<OAS.Param>();

        return (OASComDayCqWcmCoreImplServletsThumbn) client.invoke(
            'POST', '/system/console/configMgr/com.day.cq.wcm.core.impl.servlets.ThumbnailServlet', '',
            query, form,
            new Map<String, Object>(),
            new Map<String, Object>(),
            new List<String>{ 'application/json', 'text/plain' },
            new List<String>(),
            new List<String> { 'aemAuth' },
            OASComDayCqWcmCoreImplServletsThumbn.class
        );
    }
    /**
     * 
     * 
     * @param post  (optional)
     * @param apply  (optional)
     * @param r_delete  (optional)
     * @param action  (optional)
     * @param location  (optional)
     * @param propertylist  (optional)
     * @param nonValidChars  (optional)
     * @return OASComDayCqWcmCoreImplUtilsDefaultPa
     * @throws OAS.ApiException if fails to make API call
     */
    public OASComDayCqWcmCoreImplUtilsDefaultPa comDayCqWcmCoreImplUtilsDefaultPageNameValidator(Map<String, Object> params) {
        List<OAS.Param> query = new List<OAS.Param>();

        // cast query params to verify their expected type
        query.addAll(client.makeParam('post', (Boolean) params.get('post')));
        query.addAll(client.makeParam('apply', (Boolean) params.get('apply')));
        query.addAll(client.makeParam('delete', (Boolean) params.get('r_delete')));
        query.addAll(client.makeParam('action', (String) params.get('action')));
        query.addAll(client.makeParam('$location', (String) params.get('location')));
        query.addAll(client.makeParam('propertylist', (List<String>) params.get('propertylist'), 'csv'));
        query.addAll(client.makeParam('nonValidChars', (String) params.get('nonValidChars')));

        List<OAS.Param> form = new List<OAS.Param>();

        return (OASComDayCqWcmCoreImplUtilsDefaultPa) client.invoke(
            'POST', '/system/console/configMgr/com.day.cq.wcm.core.impl.utils.DefaultPageNameValidator', '',
            query, form,
            new Map<String, Object>(),
            new Map<String, Object>(),
            new List<String>{ 'application/json', 'text/plain' },
            new List<String>(),
            new List<String> { 'aemAuth' },
            OASComDayCqWcmCoreImplUtilsDefaultPa.class
        );
    }
    /**
     * 
     * 
     * @param post  (optional)
     * @param apply  (optional)
     * @param r_delete  (optional)
     * @param action  (optional)
     * @param location  (optional)
     * @param propertylist  (optional)
     * @param defaultExternalizerDomain  (optional)
     * @return OASComDayCqWcmCoreImplVariantsPageVa
     * @throws OAS.ApiException if fails to make API call
     */
    public OASComDayCqWcmCoreImplVariantsPageVa comDayCqWcmCoreImplVariantsPageVariantsProviderImpl(Map<String, Object> params) {
        List<OAS.Param> query = new List<OAS.Param>();

        // cast query params to verify their expected type
        query.addAll(client.makeParam('post', (Boolean) params.get('post')));
        query.addAll(client.makeParam('apply', (Boolean) params.get('apply')));
        query.addAll(client.makeParam('delete', (Boolean) params.get('r_delete')));
        query.addAll(client.makeParam('action', (String) params.get('action')));
        query.addAll(client.makeParam('$location', (String) params.get('location')));
        query.addAll(client.makeParam('propertylist', (List<String>) params.get('propertylist'), 'csv'));
        query.addAll(client.makeParam('default.externalizer.domain', (String) params.get('defaultExternalizerDomain')));

        List<OAS.Param> form = new List<OAS.Param>();

        return (OASComDayCqWcmCoreImplVariantsPageVa) client.invoke(
            'POST', '/system/console/configMgr/com.day.cq.wcm.core.impl.variants.PageVariantsProviderImpl', '',
            query, form,
            new Map<String, Object>(),
            new Map<String, Object>(),
            new List<String>{ 'application/json', 'text/plain' },
            new List<String>(),
            new List<String> { 'aemAuth' },
            OASComDayCqWcmCoreImplVariantsPageVa.class
        );
    }
    /**
     * 
     * 
     * @param post  (optional)
     * @param apply  (optional)
     * @param r_delete  (optional)
     * @param action  (optional)
     * @param location  (optional)
     * @param propertylist  (optional)
     * @param versionmanagerCreateVersionOnActivation  (optional)
     * @param versionmanagerPurgingEnabled  (optional)
     * @param versionmanagerPurgePaths  (optional)
     * @param versionmanagerIvPaths  (optional)
     * @param versionmanagerMaxAgeDays  (optional)
     * @param versionmanagerMaxNumberVersions  (optional)
     * @param versionmanagerMinNumberVersions  (optional)
     * @return OASComDayCqWcmCoreImplVersionManager
     * @throws OAS.ApiException if fails to make API call
     */
    public OASComDayCqWcmCoreImplVersionManager comDayCqWcmCoreImplVersionManagerImpl(Map<String, Object> params) {
        List<OAS.Param> query = new List<OAS.Param>();

        // cast query params to verify their expected type
        query.addAll(client.makeParam('post', (Boolean) params.get('post')));
        query.addAll(client.makeParam('apply', (Boolean) params.get('apply')));
        query.addAll(client.makeParam('delete', (Boolean) params.get('r_delete')));
        query.addAll(client.makeParam('action', (String) params.get('action')));
        query.addAll(client.makeParam('$location', (String) params.get('location')));
        query.addAll(client.makeParam('propertylist', (List<String>) params.get('propertylist'), 'csv'));
        query.addAll(client.makeParam('versionmanager.createVersionOnActivation', (Boolean) params.get('versionmanagerCreateVersionOnActivation')));
        query.addAll(client.makeParam('versionmanager.purgingEnabled', (Boolean) params.get('versionmanagerPurgingEnabled')));
        query.addAll(client.makeParams('versionmanager.purgePaths', (List<String>) params.get('versionmanagerPurgePaths')));
        query.addAll(client.makeParams('versionmanager.ivPaths', (List<String>) params.get('versionmanagerIvPaths')));
        query.addAll(client.makeParam('versionmanager.maxAgeDays', (Integer) params.get('versionmanagerMaxAgeDays')));
        query.addAll(client.makeParam('versionmanager.maxNumberVersions', (Integer) params.get('versionmanagerMaxNumberVersions')));
        query.addAll(client.makeParam('versionmanager.minNumberVersions', (Integer) params.get('versionmanagerMinNumberVersions')));

        List<OAS.Param> form = new List<OAS.Param>();

        return (OASComDayCqWcmCoreImplVersionManager) client.invoke(
            'POST', '/system/console/configMgr/com.day.cq.wcm.core.impl.VersionManagerImpl', '',
            query, form,
            new Map<String, Object>(),
            new Map<String, Object>(),
            new List<String>{ 'application/json', 'text/plain' },
            new List<String>(),
            new List<String> { 'aemAuth' },
            OASComDayCqWcmCoreImplVersionManager.class
        );
    }
    /**
     * 
     * 
     * @param post  (optional)
     * @param apply  (optional)
     * @param r_delete  (optional)
     * @param action  (optional)
     * @param location  (optional)
     * @param propertylist  (optional)
     * @param versionpurgePaths  (optional)
     * @param versionpurgeRecursive  (optional)
     * @param versionpurgeMaxVersions  (optional)
     * @param versionpurgeMinVersions  (optional)
     * @param versionpurgeMaxAgeDays  (optional)
     * @return OASComDayCqWcmCoreImplVersionPurgeTa
     * @throws OAS.ApiException if fails to make API call
     */
    public OASComDayCqWcmCoreImplVersionPurgeTa comDayCqWcmCoreImplVersionPurgeTask(Map<String, Object> params) {
        List<OAS.Param> query = new List<OAS.Param>();

        // cast query params to verify their expected type
        query.addAll(client.makeParam('post', (Boolean) params.get('post')));
        query.addAll(client.makeParam('apply', (Boolean) params.get('apply')));
        query.addAll(client.makeParam('delete', (Boolean) params.get('r_delete')));
        query.addAll(client.makeParam('action', (String) params.get('action')));
        query.addAll(client.makeParam('$location', (String) params.get('location')));
        query.addAll(client.makeParam('propertylist', (List<String>) params.get('propertylist'), 'csv'));
        query.addAll(client.makeParams('versionpurge.paths', (List<String>) params.get('versionpurgePaths')));
        query.addAll(client.makeParam('versionpurge.recursive', (Boolean) params.get('versionpurgeRecursive')));
        query.addAll(client.makeParam('versionpurge.maxVersions', (Integer) params.get('versionpurgeMaxVersions')));
        query.addAll(client.makeParam('versionpurge.minVersions', (Integer) params.get('versionpurgeMinVersions')));
        query.addAll(client.makeParam('versionpurge.maxAgeDays', (Integer) params.get('versionpurgeMaxAgeDays')));

        List<OAS.Param> form = new List<OAS.Param>();

        return (OASComDayCqWcmCoreImplVersionPurgeTa) client.invoke(
            'POST', '/system/console/configMgr/com.day.cq.wcm.core.impl.VersionPurgeTask', '',
            query, form,
            new Map<String, Object>(),
            new Map<String, Object>(),
            new List<String>{ 'application/json', 'text/plain' },
            new List<String>(),
            new List<String> { 'aemAuth' },
            OASComDayCqWcmCoreImplVersionPurgeTa.class
        );
    }
    /**
     * 
     * 
     * @param post  (optional)
     * @param apply  (optional)
     * @param r_delete  (optional)
     * @param action  (optional)
     * @param location  (optional)
     * @param propertylist  (optional)
     * @param wcmdbgfilterEnabled  (optional)
     * @param wcmdbgfilterJspDebug  (optional)
     * @return OASComDayCqWcmCoreImplWCMDebugFilter
     * @throws OAS.ApiException if fails to make API call
     */
    public OASComDayCqWcmCoreImplWCMDebugFilter comDayCqWcmCoreImplWCMDebugFilter(Map<String, Object> params) {
        List<OAS.Param> query = new List<OAS.Param>();

        // cast query params to verify their expected type
        query.addAll(client.makeParam('post', (Boolean) params.get('post')));
        query.addAll(client.makeParam('apply', (Boolean) params.get('apply')));
        query.addAll(client.makeParam('delete', (Boolean) params.get('r_delete')));
        query.addAll(client.makeParam('action', (String) params.get('action')));
        query.addAll(client.makeParam('$location', (String) params.get('location')));
        query.addAll(client.makeParam('propertylist', (List<String>) params.get('propertylist'), 'csv'));
        query.addAll(client.makeParam('wcmdbgfilter.enabled', (Boolean) params.get('wcmdbgfilterEnabled')));
        query.addAll(client.makeParam('wcmdbgfilter.jspDebug', (Boolean) params.get('wcmdbgfilterJspDebug')));

        List<OAS.Param> form = new List<OAS.Param>();

        return (OASComDayCqWcmCoreImplWCMDebugFilter) client.invoke(
            'POST', '/system/console/configMgr/com.day.cq.wcm.core.impl.WCMDebugFilter', '',
            query, form,
            new Map<String, Object>(),
            new Map<String, Object>(),
            new List<String>{ 'application/json', 'text/plain' },
            new List<String>(),
            new List<String> { 'aemAuth' },
            OASComDayCqWcmCoreImplWCMDebugFilter.class
        );
    }
    /**
     * 
     * 
     * @param post  (optional)
     * @param apply  (optional)
     * @param r_delete  (optional)
     * @param action  (optional)
     * @param location  (optional)
     * @param propertylist  (optional)
     * @param wcmdevmodefilterEnabled  (optional)
     * @return OASComDayCqWcmCoreImplWCMDeveloperMo
     * @throws OAS.ApiException if fails to make API call
     */
    public OASComDayCqWcmCoreImplWCMDeveloperMo comDayCqWcmCoreImplWCMDeveloperModeFilter(Map<String, Object> params) {
        List<OAS.Param> query = new List<OAS.Param>();

        // cast query params to verify their expected type
        query.addAll(client.makeParam('post', (Boolean) params.get('post')));
        query.addAll(client.makeParam('apply', (Boolean) params.get('apply')));
        query.addAll(client.makeParam('delete', (Boolean) params.get('r_delete')));
        query.addAll(client.makeParam('action', (String) params.get('action')));
        query.addAll(client.makeParam('$location', (String) params.get('location')));
        query.addAll(client.makeParam('propertylist', (List<String>) params.get('propertylist'), 'csv'));
        query.addAll(client.makeParam('wcmdevmodefilter.enabled', (Boolean) params.get('wcmdevmodefilterEnabled')));

        List<OAS.Param> form = new List<OAS.Param>();

        return (OASComDayCqWcmCoreImplWCMDeveloperMo) client.invoke(
            'POST', '/system/console/configMgr/com.day.cq.wcm.core.impl.WCMDeveloperModeFilter', '',
            query, form,
            new Map<String, Object>(),
            new Map<String, Object>(),
            new List<String>{ 'application/json', 'text/plain' },
            new List<String>(),
            new List<String> { 'aemAuth' },
            OASComDayCqWcmCoreImplWCMDeveloperMo.class
        );
    }
    /**
     * 
     * 
     * @param post  (optional)
     * @param apply  (optional)
     * @param r_delete  (optional)
     * @param action  (optional)
     * @param location  (optional)
     * @param propertylist  (optional)
     * @param filterOrder  (optional)
     * @param filterScope  (optional)
     * @return OASComDayCqWcmCoreImplWarpTimeWarpFi
     * @throws OAS.ApiException if fails to make API call
     */
    public OASComDayCqWcmCoreImplWarpTimeWarpFi comDayCqWcmCoreImplWarpTimeWarpFilter(Map<String, Object> params) {
        List<OAS.Param> query = new List<OAS.Param>();

        // cast query params to verify their expected type
        query.addAll(client.makeParam('post', (Boolean) params.get('post')));
        query.addAll(client.makeParam('apply', (Boolean) params.get('apply')));
        query.addAll(client.makeParam('delete', (Boolean) params.get('r_delete')));
        query.addAll(client.makeParam('action', (String) params.get('action')));
        query.addAll(client.makeParam('$location', (String) params.get('location')));
        query.addAll(client.makeParam('propertylist', (List<String>) params.get('propertylist'), 'csv'));
        query.addAll(client.makeParam('filter.order', (String) params.get('filterOrder')));
        query.addAll(client.makeParam('filter.scope', (String) params.get('filterScope')));

        List<OAS.Param> form = new List<OAS.Param>();

        return (OASComDayCqWcmCoreImplWarpTimeWarpFi) client.invoke(
            'POST', '/system/console/configMgr/com.day.cq.wcm.core.impl.warp.TimeWarpFilter', '',
            query, form,
            new Map<String, Object>(),
            new Map<String, Object>(),
            new List<String>{ 'application/json', 'text/plain' },
            new List<String>(),
            new List<String> { 'aemAuth' },
            OASComDayCqWcmCoreImplWarpTimeWarpFi.class
        );
    }
    /**
     * 
     * 
     * @param post  (optional)
     * @param apply  (optional)
     * @param r_delete  (optional)
     * @param action  (optional)
     * @param location  (optional)
     * @param propertylist  (optional)
     * @param mvtstatisticsTrackingurl  (optional)
     * @return OASComDayCqWcmCoreMvtMVTStatisticsIm
     * @throws OAS.ApiException if fails to make API call
     */
    public OASComDayCqWcmCoreMvtMVTStatisticsIm comDayCqWcmCoreMvtMVTStatisticsImpl(Map<String, Object> params) {
        List<OAS.Param> query = new List<OAS.Param>();

        // cast query params to verify their expected type
        query.addAll(client.makeParam('post', (Boolean) params.get('post')));
        query.addAll(client.makeParam('apply', (Boolean) params.get('apply')));
        query.addAll(client.makeParam('delete', (Boolean) params.get('r_delete')));
        query.addAll(client.makeParam('action', (String) params.get('action')));
        query.addAll(client.makeParam('$location', (String) params.get('location')));
        query.addAll(client.makeParam('propertylist', (List<String>) params.get('propertylist'), 'csv'));
        query.addAll(client.makeParam('mvtstatistics.trackingurl', (String) params.get('mvtstatisticsTrackingurl')));

        List<OAS.Param> form = new List<OAS.Param>();

        return (OASComDayCqWcmCoreMvtMVTStatisticsIm) client.invoke(
            'POST', '/system/console/configMgr/com.day.cq.wcm.core.mvt.MVTStatisticsImpl', '',
            query, form,
            new Map<String, Object>(),
            new Map<String, Object>(),
            new List<String>{ 'application/json', 'text/plain' },
            new List<String>(),
            new List<String> { 'aemAuth' },
            OASComDayCqWcmCoreMvtMVTStatisticsIm.class
        );
    }
    /**
     * 
     * 
     * @param post  (optional)
     * @param apply  (optional)
     * @param r_delete  (optional)
     * @param action  (optional)
     * @param location  (optional)
     * @param propertylist  (optional)
     * @param pageviewstatisticsTrackingurl  (optional)
     * @param pageviewstatisticsTrackingscriptEnabled  (optional)
     * @return OASComDayCqWcmCoreStatsPageViewStati
     * @throws OAS.ApiException if fails to make API call
     */
    public OASComDayCqWcmCoreStatsPageViewStati comDayCqWcmCoreStatsPageViewStatisticsImpl(Map<String, Object> params) {
        List<OAS.Param> query = new List<OAS.Param>();

        // cast query params to verify their expected type
        query.addAll(client.makeParam('post', (Boolean) params.get('post')));
        query.addAll(client.makeParam('apply', (Boolean) params.get('apply')));
        query.addAll(client.makeParam('delete', (Boolean) params.get('r_delete')));
        query.addAll(client.makeParam('action', (String) params.get('action')));
        query.addAll(client.makeParam('$location', (String) params.get('location')));
        query.addAll(client.makeParam('propertylist', (List<String>) params.get('propertylist'), 'csv'));
        query.addAll(client.makeParam('pageviewstatistics.trackingurl', (String) params.get('pageviewstatisticsTrackingurl')));
        query.addAll(client.makeParam('pageviewstatistics.trackingscript.enabled', (String) params.get('pageviewstatisticsTrackingscriptEnabled')));

        List<OAS.Param> form = new List<OAS.Param>();

        return (OASComDayCqWcmCoreStatsPageViewStati) client.invoke(
            'POST', '/system/console/configMgr/com.day.cq.wcm.core.stats.PageViewStatisticsImpl', '',
            query, form,
            new Map<String, Object>(),
            new Map<String, Object>(),
            new List<String>{ 'application/json', 'text/plain' },
            new List<String>(),
            new List<String> { 'aemAuth' },
            OASComDayCqWcmCoreStatsPageViewStati.class
        );
    }
    /**
     * 
     * 
     * @param post  (optional)
     * @param apply  (optional)
     * @param r_delete  (optional)
     * @param action  (optional)
     * @param location  (optional)
     * @param propertylist  (optional)
     * @param wcmfilterMode  (optional)
     * @return OASComDayCqWcmCoreWCMRequestFilterIn
     * @throws OAS.ApiException if fails to make API call
     */
    public OASComDayCqWcmCoreWCMRequestFilterIn comDayCqWcmCoreWCMRequestFilter(Map<String, Object> params) {
        List<OAS.Param> query = new List<OAS.Param>();

        // cast query params to verify their expected type
        query.addAll(client.makeParam('post', (Boolean) params.get('post')));
        query.addAll(client.makeParam('apply', (Boolean) params.get('apply')));
        query.addAll(client.makeParam('delete', (Boolean) params.get('r_delete')));
        query.addAll(client.makeParam('action', (String) params.get('action')));
        query.addAll(client.makeParam('$location', (String) params.get('location')));
        query.addAll(client.makeParam('propertylist', (List<String>) params.get('propertylist'), 'csv'));
        query.addAll(client.makeParam('wcmfilter.mode', (String) params.get('wcmfilterMode')));

        List<OAS.Param> form = new List<OAS.Param>();

        return (OASComDayCqWcmCoreWCMRequestFilterIn) client.invoke(
            'POST', '/system/console/configMgr/com.day.cq.wcm.core.WCMRequestFilter', '',
            query, form,
            new Map<String, Object>(),
            new Map<String, Object>(),
            new List<String>{ 'application/json', 'text/plain' },
            new List<String>(),
            new List<String> { 'aemAuth' },
            OASComDayCqWcmCoreWCMRequestFilterIn.class
        );
    }
    /**
     * 
     * 
     * @param post  (optional)
     * @param apply  (optional)
     * @param r_delete  (optional)
     * @param action  (optional)
     * @param location  (optional)
     * @param propertylist  (optional)
     * @param extractFilter  (optional)
     * @return OASComDayCqWcmDesignimporterDesignPa
     * @throws OAS.ApiException if fails to make API call
     */
    public OASComDayCqWcmDesignimporterDesignPa comDayCqWcmDesignimporterDesignPackageImporter(Map<String, Object> params) {
        List<OAS.Param> query = new List<OAS.Param>();

        // cast query params to verify their expected type
        query.addAll(client.makeParam('post', (Boolean) params.get('post')));
        query.addAll(client.makeParam('apply', (Boolean) params.get('apply')));
        query.addAll(client.makeParam('delete', (Boolean) params.get('r_delete')));
        query.addAll(client.makeParam('action', (String) params.get('action')));
        query.addAll(client.makeParam('$location', (String) params.get('location')));
        query.addAll(client.makeParam('propertylist', (List<String>) params.get('propertylist'), 'csv'));
        query.addAll(client.makeParams('extract.filter', (List<String>) params.get('extractFilter')));

        List<OAS.Param> form = new List<OAS.Param>();

        return (OASComDayCqWcmDesignimporterDesignPa) client.invoke(
            'POST', '/system/console/configMgr/com.day.cq.wcm.designimporter.DesignPackageImporter', '',
            query, form,
            new Map<String, Object>(),
            new Map<String, Object>(),
            new List<String>{ 'application/json', 'text/plain' },
            new List<String>(),
            new List<String> { 'aemAuth' },
            OASComDayCqWcmDesignimporterDesignPa.class
        );
    }
    /**
     * 
     * 
     * @param post  (optional)
     * @param apply  (optional)
     * @param r_delete  (optional)
     * @param action  (optional)
     * @param location  (optional)
     * @param propertylist  (optional)
     * @param filepattern  (optional)
     * @param buildPageNodes  (optional)
     * @param buildClientLibs  (optional)
     * @param buildCanvasComponent  (optional)
     * @return OASComDayCqWcmDesignimporterImplCanv
     * @throws OAS.ApiException if fails to make API call
     */
    public OASComDayCqWcmDesignimporterImplCanv comDayCqWcmDesignimporterImplCanvasBuilderImpl(Map<String, Object> params) {
        List<OAS.Param> query = new List<OAS.Param>();

        // cast query params to verify their expected type
        query.addAll(client.makeParam('post', (Boolean) params.get('post')));
        query.addAll(client.makeParam('apply', (Boolean) params.get('apply')));
        query.addAll(client.makeParam('delete', (Boolean) params.get('r_delete')));
        query.addAll(client.makeParam('action', (String) params.get('action')));
        query.addAll(client.makeParam('$location', (String) params.get('location')));
        query.addAll(client.makeParam('propertylist', (List<String>) params.get('propertylist'), 'csv'));
        query.addAll(client.makeParam('filepattern', (String) params.get('filepattern')));
        query.addAll(client.makeParam('build.page.nodes', (Boolean) params.get('buildPageNodes')));
        query.addAll(client.makeParam('build.client.libs', (Boolean) params.get('buildClientLibs')));
        query.addAll(client.makeParam('build.canvas.component', (Boolean) params.get('buildCanvasComponent')));

        List<OAS.Param> form = new List<OAS.Param>();

        return (OASComDayCqWcmDesignimporterImplCanv) client.invoke(
            'POST', '/system/console/configMgr/com.day.cq.wcm.designimporter.impl.CanvasBuilderImpl', '',
            query, form,
            new Map<String, Object>(),
            new Map<String, Object>(),
            new List<String>{ 'application/json', 'text/plain' },
            new List<String>(),
            new List<String> { 'aemAuth' },
            OASComDayCqWcmDesignimporterImplCanv.class
        );
    }
    /**
     * 
     * 
     * @param post  (optional)
     * @param apply  (optional)
     * @param r_delete  (optional)
     * @param action  (optional)
     * @param location  (optional)
     * @param propertylist  (optional)
     * @param minThreadPoolSize  (optional)
     * @param maxThreadPoolSize  (optional)
     * @return OASComDayCqWcmDesignimporterImplCanv
     * @throws OAS.ApiException if fails to make API call
     */
    public OASComDayCqWcmDesignimporterImplCanv comDayCqWcmDesignimporterImplCanvasPageDeleteHandler(Map<String, Object> params) {
        List<OAS.Param> query = new List<OAS.Param>();

        // cast query params to verify their expected type
        query.addAll(client.makeParam('post', (Boolean) params.get('post')));
        query.addAll(client.makeParam('apply', (Boolean) params.get('apply')));
        query.addAll(client.makeParam('delete', (Boolean) params.get('r_delete')));
        query.addAll(client.makeParam('action', (String) params.get('action')));
        query.addAll(client.makeParam('$location', (String) params.get('location')));
        query.addAll(client.makeParam('propertylist', (List<String>) params.get('propertylist'), 'csv'));
        query.addAll(client.makeParam('minThreadPoolSize', (Integer) params.get('minThreadPoolSize')));
        query.addAll(client.makeParam('maxThreadPoolSize', (Integer) params.get('maxThreadPoolSize')));

        List<OAS.Param> form = new List<OAS.Param>();

        return (OASComDayCqWcmDesignimporterImplCanv) client.invoke(
            'POST', '/system/console/configMgr/com.day.cq.wcm.designimporter.impl.CanvasPageDeleteHandler', '',
            query, form,
            new Map<String, Object>(),
            new Map<String, Object>(),
            new List<String>{ 'application/json', 'text/plain' },
            new List<String>(),
            new List<String> { 'aemAuth' },
            OASComDayCqWcmDesignimporterImplCanv.class
        );
    }
    /**
     * 
     * 
     * @param post  (optional)
     * @param apply  (optional)
     * @param r_delete  (optional)
     * @param action  (optional)
     * @param location  (optional)
     * @param propertylist  (optional)
     * @param searchPattern  (optional)
     * @param replacePattern  (optional)
     * @return OASComDayCqWcmDesignimporterImplEntr
     * @throws OAS.ApiException if fails to make API call
     */
    public OASComDayCqWcmDesignimporterImplEntr comDayCqWcmDesignimporterImplEntryPreprocessorImpl(Map<String, Object> params) {
        List<OAS.Param> query = new List<OAS.Param>();

        // cast query params to verify their expected type
        query.addAll(client.makeParam('post', (Boolean) params.get('post')));
        query.addAll(client.makeParam('apply', (Boolean) params.get('apply')));
        query.addAll(client.makeParam('delete', (Boolean) params.get('r_delete')));
        query.addAll(client.makeParam('action', (String) params.get('action')));
        query.addAll(client.makeParam('$location', (String) params.get('location')));
        query.addAll(client.makeParam('propertylist', (List<String>) params.get('propertylist'), 'csv'));
        query.addAll(client.makeParam('search.pattern', (String) params.get('searchPattern')));
        query.addAll(client.makeParam('replace.pattern', (String) params.get('replacePattern')));

        List<OAS.Param> form = new List<OAS.Param>();

        return (OASComDayCqWcmDesignimporterImplEntr) client.invoke(
            'POST', '/system/console/configMgr/com.day.cq.wcm.designimporter.impl.EntryPreprocessorImpl', '',
            query, form,
            new Map<String, Object>(),
            new Map<String, Object>(),
            new List<String>{ 'application/json', 'text/plain' },
            new List<String>(),
            new List<String> { 'aemAuth' },
            OASComDayCqWcmDesignimporterImplEntr.class
        );
    }
    /**
     * 
     * 
     * @param post  (optional)
     * @param apply  (optional)
     * @param r_delete  (optional)
     * @param action  (optional)
     * @param location  (optional)
     * @param propertylist  (optional)
     * @param filepattern  (optional)
     * @param deviceGroups  (optional)
     * @param buildPageNodes  (optional)
     * @param buildClientLibs  (optional)
     * @param buildCanvasComponent  (optional)
     * @return OASComDayCqWcmDesignimporterImplMobi
     * @throws OAS.ApiException if fails to make API call
     */
    public OASComDayCqWcmDesignimporterImplMobi comDayCqWcmDesignimporterImplMobileCanvasBuilderImpl(Map<String, Object> params) {
        List<OAS.Param> query = new List<OAS.Param>();

        // cast query params to verify their expected type
        query.addAll(client.makeParam('post', (Boolean) params.get('post')));
        query.addAll(client.makeParam('apply', (Boolean) params.get('apply')));
        query.addAll(client.makeParam('delete', (Boolean) params.get('r_delete')));
        query.addAll(client.makeParam('action', (String) params.get('action')));
        query.addAll(client.makeParam('$location', (String) params.get('location')));
        query.addAll(client.makeParam('propertylist', (List<String>) params.get('propertylist'), 'csv'));
        query.addAll(client.makeParam('filepattern', (String) params.get('filepattern')));
        query.addAll(client.makeParams('device.groups', (List<String>) params.get('deviceGroups')));
        query.addAll(client.makeParam('build.page.nodes', (Boolean) params.get('buildPageNodes')));
        query.addAll(client.makeParam('build.client.libs', (Boolean) params.get('buildClientLibs')));
        query.addAll(client.makeParam('build.canvas.component', (Boolean) params.get('buildCanvasComponent')));

        List<OAS.Param> form = new List<OAS.Param>();

        return (OASComDayCqWcmDesignimporterImplMobi) client.invoke(
            'POST', '/system/console/configMgr/com.day.cq.wcm.designimporter.impl.MobileCanvasBuilderImpl', '',
            query, form,
            new Map<String, Object>(),
            new Map<String, Object>(),
            new List<String>{ 'application/json', 'text/plain' },
            new List<String>(),
            new List<String> { 'aemAuth' },
            OASComDayCqWcmDesignimporterImplMobi.class
        );
    }
    /**
     * 
     * 
     * @param post  (optional)
     * @param apply  (optional)
     * @param r_delete  (optional)
     * @param action  (optional)
     * @param location  (optional)
     * @param propertylist  (optional)
     * @param serviceRanking  (optional)
     * @param tagpattern  (optional)
     * @return OASComDayCqWcmDesignimporterParserTa
     * @throws OAS.ApiException if fails to make API call
     */
    public OASComDayCqWcmDesignimporterParserTa comDayCqWcmDesignimporterParserTaghandlersFactoryCanvasCompone(Map<String, Object> params) {
        List<OAS.Param> query = new List<OAS.Param>();

        // cast query params to verify their expected type
        query.addAll(client.makeParam('post', (Boolean) params.get('post')));
        query.addAll(client.makeParam('apply', (Boolean) params.get('apply')));
        query.addAll(client.makeParam('delete', (Boolean) params.get('r_delete')));
        query.addAll(client.makeParam('action', (String) params.get('action')));
        query.addAll(client.makeParam('$location', (String) params.get('location')));
        query.addAll(client.makeParam('propertylist', (List<String>) params.get('propertylist'), 'csv'));
        query.addAll(client.makeParam('service.ranking', (Integer) params.get('serviceRanking')));
        query.addAll(client.makeParam('tagpattern', (String) params.get('tagpattern')));

        List<OAS.Param> form = new List<OAS.Param>();

        return (OASComDayCqWcmDesignimporterParserTa) client.invoke(
            'POST', '/system/console/configMgr/com.day.cq.wcm.designimporter.parser.taghandlers.factory.CanvasComponentTagHandlerFactory', '',
            query, form,
            new Map<String, Object>(),
            new Map<String, Object>(),
            new List<String>{ 'application/json', 'text/plain' },
            new List<String>(),
            new List<String> { 'aemAuth' },
            OASComDayCqWcmDesignimporterParserTa.class
        );
    }
    /**
     * 
     * 
     * @param post  (optional)
     * @param apply  (optional)
     * @param r_delete  (optional)
     * @param action  (optional)
     * @param location  (optional)
     * @param propertylist  (optional)
     * @param serviceRanking  (optional)
     * @param tagpattern  (optional)
     * @return OASComDayCqWcmDesignimporterParserTa
     * @throws OAS.ApiException if fails to make API call
     */
    public OASComDayCqWcmDesignimporterParserTa comDayCqWcmDesignimporterParserTaghandlersFactoryDefaultCompon(Map<String, Object> params) {
        List<OAS.Param> query = new List<OAS.Param>();

        // cast query params to verify their expected type
        query.addAll(client.makeParam('post', (Boolean) params.get('post')));
        query.addAll(client.makeParam('apply', (Boolean) params.get('apply')));
        query.addAll(client.makeParam('delete', (Boolean) params.get('r_delete')));
        query.addAll(client.makeParam('action', (String) params.get('action')));
        query.addAll(client.makeParam('$location', (String) params.get('location')));
        query.addAll(client.makeParam('propertylist', (List<String>) params.get('propertylist'), 'csv'));
        query.addAll(client.makeParam('service.ranking', (Integer) params.get('serviceRanking')));
        query.addAll(client.makeParam('tagpattern', (String) params.get('tagpattern')));

        List<OAS.Param> form = new List<OAS.Param>();

        return (OASComDayCqWcmDesignimporterParserTa) client.invoke(
            'POST', '/system/console/configMgr/com.day.cq.wcm.designimporter.parser.taghandlers.factory.DefaultComponentTagHandlerFactory', '',
            query, form,
            new Map<String, Object>(),
            new Map<String, Object>(),
            new List<String>{ 'application/json', 'text/plain' },
            new List<String>(),
            new List<String> { 'aemAuth' },
            OASComDayCqWcmDesignimporterParserTa.class
        );
    }
    /**
     * 
     * 
     * @param post  (optional)
     * @param apply  (optional)
     * @param r_delete  (optional)
     * @param action  (optional)
     * @param location  (optional)
     * @param propertylist  (optional)
     * @param serviceRanking  (optional)
     * @param tagpattern  (optional)
     * @return OASComDayCqWcmDesignimporterParserTa
     * @throws OAS.ApiException if fails to make API call
     */
    public OASComDayCqWcmDesignimporterParserTa comDayCqWcmDesignimporterParserTaghandlersFactoryDefaultTagHan(Map<String, Object> params) {
        List<OAS.Param> query = new List<OAS.Param>();

        // cast query params to verify their expected type
        query.addAll(client.makeParam('post', (Boolean) params.get('post')));
        query.addAll(client.makeParam('apply', (Boolean) params.get('apply')));
        query.addAll(client.makeParam('delete', (Boolean) params.get('r_delete')));
        query.addAll(client.makeParam('action', (String) params.get('action')));
        query.addAll(client.makeParam('$location', (String) params.get('location')));
        query.addAll(client.makeParam('propertylist', (List<String>) params.get('propertylist'), 'csv'));
        query.addAll(client.makeParam('service.ranking', (Integer) params.get('serviceRanking')));
        query.addAll(client.makeParam('tagpattern', (String) params.get('tagpattern')));

        List<OAS.Param> form = new List<OAS.Param>();

        return (OASComDayCqWcmDesignimporterParserTa) client.invoke(
            'POST', '/system/console/configMgr/com.day.cq.wcm.designimporter.parser.taghandlers.factory.DefaultTagHandlerFactory', '',
            query, form,
            new Map<String, Object>(),
            new Map<String, Object>(),
            new List<String>{ 'application/json', 'text/plain' },
            new List<String>(),
            new List<String> { 'aemAuth' },
            OASComDayCqWcmDesignimporterParserTa.class
        );
    }
    /**
     * 
     * 
     * @param post  (optional)
     * @param apply  (optional)
     * @param r_delete  (optional)
     * @param action  (optional)
     * @param location  (optional)
     * @param propertylist  (optional)
     * @param serviceRanking  (optional)
     * @param tagpattern  (optional)
     * @return OASComDayCqWcmDesignimporterParserTa
     * @throws OAS.ApiException if fails to make API call
     */
    public OASComDayCqWcmDesignimporterParserTa comDayCqWcmDesignimporterParserTaghandlersFactoryHeadTagHandle(Map<String, Object> params) {
        List<OAS.Param> query = new List<OAS.Param>();

        // cast query params to verify their expected type
        query.addAll(client.makeParam('post', (Boolean) params.get('post')));
        query.addAll(client.makeParam('apply', (Boolean) params.get('apply')));
        query.addAll(client.makeParam('delete', (Boolean) params.get('r_delete')));
        query.addAll(client.makeParam('action', (String) params.get('action')));
        query.addAll(client.makeParam('$location', (String) params.get('location')));
        query.addAll(client.makeParam('propertylist', (List<String>) params.get('propertylist'), 'csv'));
        query.addAll(client.makeParam('service.ranking', (Integer) params.get('serviceRanking')));
        query.addAll(client.makeParam('tagpattern', (String) params.get('tagpattern')));

        List<OAS.Param> form = new List<OAS.Param>();

        return (OASComDayCqWcmDesignimporterParserTa) client.invoke(
            'POST', '/system/console/configMgr/com.day.cq.wcm.designimporter.parser.taghandlers.factory.HeadTagHandlerFactory', '',
            query, form,
            new Map<String, Object>(),
            new Map<String, Object>(),
            new List<String>{ 'application/json', 'text/plain' },
            new List<String>(),
            new List<String> { 'aemAuth' },
            OASComDayCqWcmDesignimporterParserTa.class
        );
    }
    /**
     * 
     * 
     * @param post  (optional)
     * @param apply  (optional)
     * @param r_delete  (optional)
     * @param action  (optional)
     * @param location  (optional)
     * @param propertylist  (optional)
     * @param serviceRanking  (optional)
     * @param tagpattern  (optional)
     * @return OASComDayCqWcmDesignimporterParserTa
     * @throws OAS.ApiException if fails to make API call
     */
    public OASComDayCqWcmDesignimporterParserTa comDayCqWcmDesignimporterParserTaghandlersFactoryIFrameTagHand(Map<String, Object> params) {
        List<OAS.Param> query = new List<OAS.Param>();

        // cast query params to verify their expected type
        query.addAll(client.makeParam('post', (Boolean) params.get('post')));
        query.addAll(client.makeParam('apply', (Boolean) params.get('apply')));
        query.addAll(client.makeParam('delete', (Boolean) params.get('r_delete')));
        query.addAll(client.makeParam('action', (String) params.get('action')));
        query.addAll(client.makeParam('$location', (String) params.get('location')));
        query.addAll(client.makeParam('propertylist', (List<String>) params.get('propertylist'), 'csv'));
        query.addAll(client.makeParam('service.ranking', (Integer) params.get('serviceRanking')));
        query.addAll(client.makeParam('tagpattern', (String) params.get('tagpattern')));

        List<OAS.Param> form = new List<OAS.Param>();

        return (OASComDayCqWcmDesignimporterParserTa) client.invoke(
            'POST', '/system/console/configMgr/com.day.cq.wcm.designimporter.parser.taghandlers.factory.IFrameTagHandlerFactory', '',
            query, form,
            new Map<String, Object>(),
            new Map<String, Object>(),
            new List<String>{ 'application/json', 'text/plain' },
            new List<String>(),
            new List<String> { 'aemAuth' },
            OASComDayCqWcmDesignimporterParserTa.class
        );
    }
    /**
     * 
     * 
     * @param post  (optional)
     * @param apply  (optional)
     * @param r_delete  (optional)
     * @param action  (optional)
     * @param location  (optional)
     * @param propertylist  (optional)
     * @param serviceRanking  (optional)
     * @param tagpattern  (optional)
     * @param componentResourceType  (optional)
     * @return OASComDayCqWcmDesignimporterParserTa
     * @throws OAS.ApiException if fails to make API call
     */
    public OASComDayCqWcmDesignimporterParserTa comDayCqWcmDesignimporterParserTaghandlersFactoryImageComponen(Map<String, Object> params) {
        List<OAS.Param> query = new List<OAS.Param>();

        // cast query params to verify their expected type
        query.addAll(client.makeParam('post', (Boolean) params.get('post')));
        query.addAll(client.makeParam('apply', (Boolean) params.get('apply')));
        query.addAll(client.makeParam('delete', (Boolean) params.get('r_delete')));
        query.addAll(client.makeParam('action', (String) params.get('action')));
        query.addAll(client.makeParam('$location', (String) params.get('location')));
        query.addAll(client.makeParam('propertylist', (List<String>) params.get('propertylist'), 'csv'));
        query.addAll(client.makeParam('service.ranking', (Integer) params.get('serviceRanking')));
        query.addAll(client.makeParam('tagpattern', (String) params.get('tagpattern')));
        query.addAll(client.makeParam('component.resourceType', (String) params.get('componentResourceType')));

        List<OAS.Param> form = new List<OAS.Param>();

        return (OASComDayCqWcmDesignimporterParserTa) client.invoke(
            'POST', '/system/console/configMgr/com.day.cq.wcm.designimporter.parser.taghandlers.factory.ImageComponentTagHandlerFactory', '',
            query, form,
            new Map<String, Object>(),
            new Map<String, Object>(),
            new List<String>{ 'application/json', 'text/plain' },
            new List<String>(),
            new List<String> { 'aemAuth' },
            OASComDayCqWcmDesignimporterParserTa.class
        );
    }
    /**
     * 
     * 
     * @param post  (optional)
     * @param apply  (optional)
     * @param r_delete  (optional)
     * @param action  (optional)
     * @param location  (optional)
     * @param propertylist  (optional)
     * @param serviceRanking  (optional)
     * @param tagpattern  (optional)
     * @return OASComDayCqWcmDesignimporterParserTa
     * @throws OAS.ApiException if fails to make API call
     */
    public OASComDayCqWcmDesignimporterParserTa comDayCqWcmDesignimporterParserTaghandlersFactoryImgTagHandler(Map<String, Object> params) {
        List<OAS.Param> query = new List<OAS.Param>();

        // cast query params to verify their expected type
        query.addAll(client.makeParam('post', (Boolean) params.get('post')));
        query.addAll(client.makeParam('apply', (Boolean) params.get('apply')));
        query.addAll(client.makeParam('delete', (Boolean) params.get('r_delete')));
        query.addAll(client.makeParam('action', (String) params.get('action')));
        query.addAll(client.makeParam('$location', (String) params.get('location')));
        query.addAll(client.makeParam('propertylist', (List<String>) params.get('propertylist'), 'csv'));
        query.addAll(client.makeParam('service.ranking', (Integer) params.get('serviceRanking')));
        query.addAll(client.makeParam('tagpattern', (String) params.get('tagpattern')));

        List<OAS.Param> form = new List<OAS.Param>();

        return (OASComDayCqWcmDesignimporterParserTa) client.invoke(
            'POST', '/system/console/configMgr/com.day.cq.wcm.designimporter.parser.taghandlers.factory.ImgTagHandlerFactory', '',
            query, form,
            new Map<String, Object>(),
            new Map<String, Object>(),
            new List<String>{ 'application/json', 'text/plain' },
            new List<String>(),
            new List<String> { 'aemAuth' },
            OASComDayCqWcmDesignimporterParserTa.class
        );
    }
    /**
     * 
     * 
     * @param post  (optional)
     * @param apply  (optional)
     * @param r_delete  (optional)
     * @param action  (optional)
     * @param location  (optional)
     * @param propertylist  (optional)
     * @param serviceRanking  (optional)
     * @param tagpattern  (optional)
     * @return OASComDayCqWcmDesignimporterParserTa
     * @throws OAS.ApiException if fails to make API call
     */
    public OASComDayCqWcmDesignimporterParserTa comDayCqWcmDesignimporterParserTaghandlersFactoryInlineScriptT(Map<String, Object> params) {
        List<OAS.Param> query = new List<OAS.Param>();

        // cast query params to verify their expected type
        query.addAll(client.makeParam('post', (Boolean) params.get('post')));
        query.addAll(client.makeParam('apply', (Boolean) params.get('apply')));
        query.addAll(client.makeParam('delete', (Boolean) params.get('r_delete')));
        query.addAll(client.makeParam('action', (String) params.get('action')));
        query.addAll(client.makeParam('$location', (String) params.get('location')));
        query.addAll(client.makeParam('propertylist', (List<String>) params.get('propertylist'), 'csv'));
        query.addAll(client.makeParam('service.ranking', (Integer) params.get('serviceRanking')));
        query.addAll(client.makeParam('tagpattern', (String) params.get('tagpattern')));

        List<OAS.Param> form = new List<OAS.Param>();

        return (OASComDayCqWcmDesignimporterParserTa) client.invoke(
            'POST', '/system/console/configMgr/com.day.cq.wcm.designimporter.parser.taghandlers.factory.InlineScriptTagHandlerFactory', '',
            query, form,
            new Map<String, Object>(),
            new Map<String, Object>(),
            new List<String>{ 'application/json', 'text/plain' },
            new List<String>(),
            new List<String> { 'aemAuth' },
            OASComDayCqWcmDesignimporterParserTa.class
        );
    }
    /**
     * 
     * 
     * @param post  (optional)
     * @param apply  (optional)
     * @param r_delete  (optional)
     * @param action  (optional)
     * @param location  (optional)
     * @param propertylist  (optional)
     * @param serviceRanking  (optional)
     * @param tagpattern  (optional)
     * @return OASComDayCqWcmDesignimporterParserTa
     * @throws OAS.ApiException if fails to make API call
     */
    public OASComDayCqWcmDesignimporterParserTa comDayCqWcmDesignimporterParserTaghandlersFactoryLinkTagHandle(Map<String, Object> params) {
        List<OAS.Param> query = new List<OAS.Param>();

        // cast query params to verify their expected type
        query.addAll(client.makeParam('post', (Boolean) params.get('post')));
        query.addAll(client.makeParam('apply', (Boolean) params.get('apply')));
        query.addAll(client.makeParam('delete', (Boolean) params.get('r_delete')));
        query.addAll(client.makeParam('action', (String) params.get('action')));
        query.addAll(client.makeParam('$location', (String) params.get('location')));
        query.addAll(client.makeParam('propertylist', (List<String>) params.get('propertylist'), 'csv'));
        query.addAll(client.makeParam('service.ranking', (Integer) params.get('serviceRanking')));
        query.addAll(client.makeParam('tagpattern', (String) params.get('tagpattern')));

        List<OAS.Param> form = new List<OAS.Param>();

        return (OASComDayCqWcmDesignimporterParserTa) client.invoke(
            'POST', '/system/console/configMgr/com.day.cq.wcm.designimporter.parser.taghandlers.factory.LinkTagHandlerFactory', '',
            query, form,
            new Map<String, Object>(),
            new Map<String, Object>(),
            new List<String>{ 'application/json', 'text/plain' },
            new List<String>(),
            new List<String> { 'aemAuth' },
            OASComDayCqWcmDesignimporterParserTa.class
        );
    }
    /**
     * 
     * 
     * @param post  (optional)
     * @param apply  (optional)
     * @param r_delete  (optional)
     * @param action  (optional)
     * @param location  (optional)
     * @param propertylist  (optional)
     * @param serviceRanking  (optional)
     * @param tagpattern  (optional)
     * @return OASComDayCqWcmDesignimporterParserTa
     * @throws OAS.ApiException if fails to make API call
     */
    public OASComDayCqWcmDesignimporterParserTa comDayCqWcmDesignimporterParserTaghandlersFactoryMetaTagHandle(Map<String, Object> params) {
        List<OAS.Param> query = new List<OAS.Param>();

        // cast query params to verify their expected type
        query.addAll(client.makeParam('post', (Boolean) params.get('post')));
        query.addAll(client.makeParam('apply', (Boolean) params.get('apply')));
        query.addAll(client.makeParam('delete', (Boolean) params.get('r_delete')));
        query.addAll(client.makeParam('action', (String) params.get('action')));
        query.addAll(client.makeParam('$location', (String) params.get('location')));
        query.addAll(client.makeParam('propertylist', (List<String>) params.get('propertylist'), 'csv'));
        query.addAll(client.makeParam('service.ranking', (Integer) params.get('serviceRanking')));
        query.addAll(client.makeParam('tagpattern', (String) params.get('tagpattern')));

        List<OAS.Param> form = new List<OAS.Param>();

        return (OASComDayCqWcmDesignimporterParserTa) client.invoke(
            'POST', '/system/console/configMgr/com.day.cq.wcm.designimporter.parser.taghandlers.factory.MetaTagHandlerFactory', '',
            query, form,
            new Map<String, Object>(),
            new Map<String, Object>(),
            new List<String>{ 'application/json', 'text/plain' },
            new List<String>(),
            new List<String> { 'aemAuth' },
            OASComDayCqWcmDesignimporterParserTa.class
        );
    }
    /**
     * 
     * 
     * @param post  (optional)
     * @param apply  (optional)
     * @param r_delete  (optional)
     * @param action  (optional)
     * @param location  (optional)
     * @param propertylist  (optional)
     * @param serviceRanking  (optional)
     * @param tagpattern  (optional)
     * @return OASComDayCqWcmDesignimporterParserTa
     * @throws OAS.ApiException if fails to make API call
     */
    public OASComDayCqWcmDesignimporterParserTa comDayCqWcmDesignimporterParserTaghandlersFactoryNonScriptTagH(Map<String, Object> params) {
        List<OAS.Param> query = new List<OAS.Param>();

        // cast query params to verify their expected type
        query.addAll(client.makeParam('post', (Boolean) params.get('post')));
        query.addAll(client.makeParam('apply', (Boolean) params.get('apply')));
        query.addAll(client.makeParam('delete', (Boolean) params.get('r_delete')));
        query.addAll(client.makeParam('action', (String) params.get('action')));
        query.addAll(client.makeParam('$location', (String) params.get('location')));
        query.addAll(client.makeParam('propertylist', (List<String>) params.get('propertylist'), 'csv'));
        query.addAll(client.makeParam('service.ranking', (Integer) params.get('serviceRanking')));
        query.addAll(client.makeParam('tagpattern', (String) params.get('tagpattern')));

        List<OAS.Param> form = new List<OAS.Param>();

        return (OASComDayCqWcmDesignimporterParserTa) client.invoke(
            'POST', '/system/console/configMgr/com.day.cq.wcm.designimporter.parser.taghandlers.factory.NonScriptTagHandlerFactory', '',
            query, form,
            new Map<String, Object>(),
            new Map<String, Object>(),
            new List<String>{ 'application/json', 'text/plain' },
            new List<String>(),
            new List<String> { 'aemAuth' },
            OASComDayCqWcmDesignimporterParserTa.class
        );
    }
    /**
     * 
     * 
     * @param post  (optional)
     * @param apply  (optional)
     * @param r_delete  (optional)
     * @param action  (optional)
     * @param location  (optional)
     * @param propertylist  (optional)
     * @param serviceRanking  (optional)
     * @param tagpattern  (optional)
     * @param componentResourceType  (optional)
     * @return OASComDayCqWcmDesignimporterParserTa
     * @throws OAS.ApiException if fails to make API call
     */
    public OASComDayCqWcmDesignimporterParserTa comDayCqWcmDesignimporterParserTaghandlersFactoryParsysCompone(Map<String, Object> params) {
        List<OAS.Param> query = new List<OAS.Param>();

        // cast query params to verify their expected type
        query.addAll(client.makeParam('post', (Boolean) params.get('post')));
        query.addAll(client.makeParam('apply', (Boolean) params.get('apply')));
        query.addAll(client.makeParam('delete', (Boolean) params.get('r_delete')));
        query.addAll(client.makeParam('action', (String) params.get('action')));
        query.addAll(client.makeParam('$location', (String) params.get('location')));
        query.addAll(client.makeParam('propertylist', (List<String>) params.get('propertylist'), 'csv'));
        query.addAll(client.makeParam('service.ranking', (Integer) params.get('serviceRanking')));
        query.addAll(client.makeParam('tagpattern', (String) params.get('tagpattern')));
        query.addAll(client.makeParam('component.resourceType', (String) params.get('componentResourceType')));

        List<OAS.Param> form = new List<OAS.Param>();

        return (OASComDayCqWcmDesignimporterParserTa) client.invoke(
            'POST', '/system/console/configMgr/com.day.cq.wcm.designimporter.parser.taghandlers.factory.ParsysComponentTagHandlerFactory', '',
            query, form,
            new Map<String, Object>(),
            new Map<String, Object>(),
            new List<String>{ 'application/json', 'text/plain' },
            new List<String>(),
            new List<String> { 'aemAuth' },
            OASComDayCqWcmDesignimporterParserTa.class
        );
    }
    /**
     * 
     * 
     * @param post  (optional)
     * @param apply  (optional)
     * @param r_delete  (optional)
     * @param action  (optional)
     * @param location  (optional)
     * @param propertylist  (optional)
     * @param serviceRanking  (optional)
     * @param tagpattern  (optional)
     * @return OASComDayCqWcmDesignimporterParserTa
     * @throws OAS.ApiException if fails to make API call
     */
    public OASComDayCqWcmDesignimporterParserTa comDayCqWcmDesignimporterParserTaghandlersFactoryScriptTagHand(Map<String, Object> params) {
        List<OAS.Param> query = new List<OAS.Param>();

        // cast query params to verify their expected type
        query.addAll(client.makeParam('post', (Boolean) params.get('post')));
        query.addAll(client.makeParam('apply', (Boolean) params.get('apply')));
        query.addAll(client.makeParam('delete', (Boolean) params.get('r_delete')));
        query.addAll(client.makeParam('action', (String) params.get('action')));
        query.addAll(client.makeParam('$location', (String) params.get('location')));
        query.addAll(client.makeParam('propertylist', (List<String>) params.get('propertylist'), 'csv'));
        query.addAll(client.makeParam('service.ranking', (Integer) params.get('serviceRanking')));
        query.addAll(client.makeParam('tagpattern', (String) params.get('tagpattern')));

        List<OAS.Param> form = new List<OAS.Param>();

        return (OASComDayCqWcmDesignimporterParserTa) client.invoke(
            'POST', '/system/console/configMgr/com.day.cq.wcm.designimporter.parser.taghandlers.factory.ScriptTagHandlerFactory', '',
            query, form,
            new Map<String, Object>(),
            new Map<String, Object>(),
            new List<String>{ 'application/json', 'text/plain' },
            new List<String>(),
            new List<String> { 'aemAuth' },
            OASComDayCqWcmDesignimporterParserTa.class
        );
    }
    /**
     * 
     * 
     * @param post  (optional)
     * @param apply  (optional)
     * @param r_delete  (optional)
     * @param action  (optional)
     * @param location  (optional)
     * @param propertylist  (optional)
     * @param serviceRanking  (optional)
     * @param tagpattern  (optional)
     * @return OASComDayCqWcmDesignimporterParserTa
     * @throws OAS.ApiException if fails to make API call
     */
    public OASComDayCqWcmDesignimporterParserTa comDayCqWcmDesignimporterParserTaghandlersFactoryStyleTagHandl(Map<String, Object> params) {
        List<OAS.Param> query = new List<OAS.Param>();

        // cast query params to verify their expected type
        query.addAll(client.makeParam('post', (Boolean) params.get('post')));
        query.addAll(client.makeParam('apply', (Boolean) params.get('apply')));
        query.addAll(client.makeParam('delete', (Boolean) params.get('r_delete')));
        query.addAll(client.makeParam('action', (String) params.get('action')));
        query.addAll(client.makeParam('$location', (String) params.get('location')));
        query.addAll(client.makeParam('propertylist', (List<String>) params.get('propertylist'), 'csv'));
        query.addAll(client.makeParam('service.ranking', (Integer) params.get('serviceRanking')));
        query.addAll(client.makeParam('tagpattern', (String) params.get('tagpattern')));

        List<OAS.Param> form = new List<OAS.Param>();

        return (OASComDayCqWcmDesignimporterParserTa) client.invoke(
            'POST', '/system/console/configMgr/com.day.cq.wcm.designimporter.parser.taghandlers.factory.StyleTagHandlerFactory', '',
            query, form,
            new Map<String, Object>(),
            new Map<String, Object>(),
            new List<String>{ 'application/json', 'text/plain' },
            new List<String>(),
            new List<String> { 'aemAuth' },
            OASComDayCqWcmDesignimporterParserTa.class
        );
    }
    /**
     * 
     * 
     * @param post  (optional)
     * @param apply  (optional)
     * @param r_delete  (optional)
     * @param action  (optional)
     * @param location  (optional)
     * @param propertylist  (optional)
     * @param serviceRanking  (optional)
     * @param tagpattern  (optional)
     * @param componentResourceType  (optional)
     * @return OASComDayCqWcmDesignimporterParserTa
     * @throws OAS.ApiException if fails to make API call
     */
    public OASComDayCqWcmDesignimporterParserTa comDayCqWcmDesignimporterParserTaghandlersFactoryTextComponent(Map<String, Object> params) {
        List<OAS.Param> query = new List<OAS.Param>();

        // cast query params to verify their expected type
        query.addAll(client.makeParam('post', (Boolean) params.get('post')));
        query.addAll(client.makeParam('apply', (Boolean) params.get('apply')));
        query.addAll(client.makeParam('delete', (Boolean) params.get('r_delete')));
        query.addAll(client.makeParam('action', (String) params.get('action')));
        query.addAll(client.makeParam('$location', (String) params.get('location')));
        query.addAll(client.makeParam('propertylist', (List<String>) params.get('propertylist'), 'csv'));
        query.addAll(client.makeParam('service.ranking', (Integer) params.get('serviceRanking')));
        query.addAll(client.makeParam('tagpattern', (String) params.get('tagpattern')));
        query.addAll(client.makeParam('component.resourceType', (String) params.get('componentResourceType')));

        List<OAS.Param> form = new List<OAS.Param>();

        return (OASComDayCqWcmDesignimporterParserTa) client.invoke(
            'POST', '/system/console/configMgr/com.day.cq.wcm.designimporter.parser.taghandlers.factory.TextComponentTagHandlerFactory', '',
            query, form,
            new Map<String, Object>(),
            new Map<String, Object>(),
            new List<String>{ 'application/json', 'text/plain' },
            new List<String>(),
            new List<String> { 'aemAuth' },
            OASComDayCqWcmDesignimporterParserTa.class
        );
    }
    /**
     * 
     * 
     * @param post  (optional)
     * @param apply  (optional)
     * @param r_delete  (optional)
     * @param action  (optional)
     * @param location  (optional)
     * @param propertylist  (optional)
     * @param serviceRanking  (optional)
     * @param tagpattern  (optional)
     * @param componentResourceType  (optional)
     * @return OASComDayCqWcmDesignimporterParserTa
     * @throws OAS.ApiException if fails to make API call
     */
    public OASComDayCqWcmDesignimporterParserTa comDayCqWcmDesignimporterParserTaghandlersFactoryTitleComponen(Map<String, Object> params) {
        List<OAS.Param> query = new List<OAS.Param>();

        // cast query params to verify their expected type
        query.addAll(client.makeParam('post', (Boolean) params.get('post')));
        query.addAll(client.makeParam('apply', (Boolean) params.get('apply')));
        query.addAll(client.makeParam('delete', (Boolean) params.get('r_delete')));
        query.addAll(client.makeParam('action', (String) params.get('action')));
        query.addAll(client.makeParam('$location', (String) params.get('location')));
        query.addAll(client.makeParam('propertylist', (List<String>) params.get('propertylist'), 'csv'));
        query.addAll(client.makeParam('service.ranking', (Integer) params.get('serviceRanking')));
        query.addAll(client.makeParam('tagpattern', (String) params.get('tagpattern')));
        query.addAll(client.makeParam('component.resourceType', (String) params.get('componentResourceType')));

        List<OAS.Param> form = new List<OAS.Param>();

        return (OASComDayCqWcmDesignimporterParserTa) client.invoke(
            'POST', '/system/console/configMgr/com.day.cq.wcm.designimporter.parser.taghandlers.factory.TitleComponentTagHandlerFactory', '',
            query, form,
            new Map<String, Object>(),
            new Map<String, Object>(),
            new List<String>{ 'application/json', 'text/plain' },
            new List<String>(),
            new List<String> { 'aemAuth' },
            OASComDayCqWcmDesignimporterParserTa.class
        );
    }
    /**
     * 
     * 
     * @param post  (optional)
     * @param apply  (optional)
     * @param r_delete  (optional)
     * @param action  (optional)
     * @param location  (optional)
     * @param propertylist  (optional)
     * @param serviceRanking  (optional)
     * @param tagpattern  (optional)
     * @return OASComDayCqWcmDesignimporterParserTa
     * @throws OAS.ApiException if fails to make API call
     */
    public OASComDayCqWcmDesignimporterParserTa comDayCqWcmDesignimporterParserTaghandlersFactoryTitleTagHandl(Map<String, Object> params) {
        List<OAS.Param> query = new List<OAS.Param>();

        // cast query params to verify their expected type
        query.addAll(client.makeParam('post', (Boolean) params.get('post')));
        query.addAll(client.makeParam('apply', (Boolean) params.get('apply')));
        query.addAll(client.makeParam('delete', (Boolean) params.get('r_delete')));
        query.addAll(client.makeParam('action', (String) params.get('action')));
        query.addAll(client.makeParam('$location', (String) params.get('location')));
        query.addAll(client.makeParam('propertylist', (List<String>) params.get('propertylist'), 'csv'));
        query.addAll(client.makeParam('service.ranking', (Integer) params.get('serviceRanking')));
        query.addAll(client.makeParam('tagpattern', (String) params.get('tagpattern')));

        List<OAS.Param> form = new List<OAS.Param>();

        return (OASComDayCqWcmDesignimporterParserTa) client.invoke(
            'POST', '/system/console/configMgr/com.day.cq.wcm.designimporter.parser.taghandlers.factory.TitleTagHandlerFactory', '',
            query, form,
            new Map<String, Object>(),
            new Map<String, Object>(),
            new List<String>{ 'application/json', 'text/plain' },
            new List<String>(),
            new List<String> { 'aemAuth' },
            OASComDayCqWcmDesignimporterParserTa.class
        );
    }
    /**
     * 
     * 
     * @param post  (optional)
     * @param apply  (optional)
     * @param r_delete  (optional)
     * @param action  (optional)
     * @param location  (optional)
     * @param propertylist  (optional)
     * @param serviceName  (optional)
     * @param slingServletResourceTypes  (optional)
     * @param slingServletSelectors  (optional)
     * @param slingServletMethods  (optional)
     * @param formsFormchooserservletAdvansesearchRequire  (optional)
     * @return OASComDayCqWcmFoundationFormsImplFor
     * @throws OAS.ApiException if fails to make API call
     */
    public OASComDayCqWcmFoundationFormsImplFor comDayCqWcmFoundationFormsImplFormChooserServlet(Map<String, Object> params) {
        List<OAS.Param> query = new List<OAS.Param>();

        // cast query params to verify their expected type
        query.addAll(client.makeParam('post', (Boolean) params.get('post')));
        query.addAll(client.makeParam('apply', (Boolean) params.get('apply')));
        query.addAll(client.makeParam('delete', (Boolean) params.get('r_delete')));
        query.addAll(client.makeParam('action', (String) params.get('action')));
        query.addAll(client.makeParam('$location', (String) params.get('location')));
        query.addAll(client.makeParam('propertylist', (List<String>) params.get('propertylist'), 'csv'));
        query.addAll(client.makeParam('service.name', (String) params.get('serviceName')));
        query.addAll(client.makeParam('sling.servlet.resourceTypes', (String) params.get('slingServletResourceTypes')));
        query.addAll(client.makeParam('sling.servlet.selectors', (String) params.get('slingServletSelectors')));
        query.addAll(client.makeParams('sling.servlet.methods', (List<String>) params.get('slingServletMethods')));
        query.addAll(client.makeParam('forms.formchooserservlet.advansesearch.require', (Boolean) params.get('formsFormchooserservletAdvansesearchRequire')));

        List<OAS.Param> form = new List<OAS.Param>();

        return (OASComDayCqWcmFoundationFormsImplFor) client.invoke(
            'POST', '/system/console/configMgr/com.day.cq.wcm.foundation.forms.impl.FormChooserServlet', '',
            query, form,
            new Map<String, Object>(),
            new Map<String, Object>(),
            new List<String>{ 'application/json', 'text/plain' },
            new List<String>(),
            new List<String> { 'aemAuth' },
            OASComDayCqWcmFoundationFormsImplFor.class
        );
    }
    /**
     * 
     * 
     * @param post  (optional)
     * @param apply  (optional)
     * @param r_delete  (optional)
     * @param action  (optional)
     * @param location  (optional)
     * @param propertylist  (optional)
     * @param formsFormparagraphpostprocessorEnabled  (optional)
     * @param formsFormparagraphpostprocessorFormresourcetypes  (optional)
     * @return OASComDayCqWcmFoundationFormsImplFor
     * @throws OAS.ApiException if fails to make API call
     */
    public OASComDayCqWcmFoundationFormsImplFor comDayCqWcmFoundationFormsImplFormParagraphPostProcessor(Map<String, Object> params) {
        List<OAS.Param> query = new List<OAS.Param>();

        // cast query params to verify their expected type
        query.addAll(client.makeParam('post', (Boolean) params.get('post')));
        query.addAll(client.makeParam('apply', (Boolean) params.get('apply')));
        query.addAll(client.makeParam('delete', (Boolean) params.get('r_delete')));
        query.addAll(client.makeParam('action', (String) params.get('action')));
        query.addAll(client.makeParam('$location', (String) params.get('location')));
        query.addAll(client.makeParam('propertylist', (List<String>) params.get('propertylist'), 'csv'));
        query.addAll(client.makeParam('forms.formparagraphpostprocessor.enabled', (Boolean) params.get('formsFormparagraphpostprocessorEnabled')));
        query.addAll(client.makeParams('forms.formparagraphpostprocessor.formresourcetypes', (List<String>) params.get('formsFormparagraphpostprocessorFormresourcetypes')));

        List<OAS.Param> form = new List<OAS.Param>();

        return (OASComDayCqWcmFoundationFormsImplFor) client.invoke(
            'POST', '/system/console/configMgr/com.day.cq.wcm.foundation.forms.impl.FormParagraphPostProcessor', '',
            query, form,
            new Map<String, Object>(),
            new Map<String, Object>(),
            new List<String>{ 'application/json', 'text/plain' },
            new List<String>(),
            new List<String> { 'aemAuth' },
            OASComDayCqWcmFoundationFormsImplFor.class
        );
    }
    /**
     * 
     * 
     * @param post  (optional)
     * @param apply  (optional)
     * @param r_delete  (optional)
     * @param action  (optional)
     * @param location  (optional)
     * @param propertylist  (optional)
     * @param nameWhitelist  (optional)
     * @param allowExpressions  (optional)
     * @return OASComDayCqWcmFoundationFormsImplFor
     * @throws OAS.ApiException if fails to make API call
     */
    public OASComDayCqWcmFoundationFormsImplFor comDayCqWcmFoundationFormsImplFormsHandlingServlet(Map<String, Object> params) {
        List<OAS.Param> query = new List<OAS.Param>();

        // cast query params to verify their expected type
        query.addAll(client.makeParam('post', (Boolean) params.get('post')));
        query.addAll(client.makeParam('apply', (Boolean) params.get('apply')));
        query.addAll(client.makeParam('delete', (Boolean) params.get('r_delete')));
        query.addAll(client.makeParam('action', (String) params.get('action')));
        query.addAll(client.makeParam('$location', (String) params.get('location')));
        query.addAll(client.makeParam('propertylist', (List<String>) params.get('propertylist'), 'csv'));
        query.addAll(client.makeParam('name.whitelist', (String) params.get('nameWhitelist')));
        query.addAll(client.makeParam('allow.expressions', (Boolean) params.get('allowExpressions')));

        List<OAS.Param> form = new List<OAS.Param>();

        return (OASComDayCqWcmFoundationFormsImplFor) client.invoke(
            'POST', '/system/console/configMgr/com.day.cq.wcm.foundation.forms.impl.FormsHandlingServlet', '',
            query, form,
            new Map<String, Object>(),
            new Map<String, Object>(),
            new List<String>{ 'application/json', 'text/plain' },
            new List<String>(),
            new List<String> { 'aemAuth' },
            OASComDayCqWcmFoundationFormsImplFor.class
        );
    }
    /**
     * 
     * 
     * @param post  (optional)
     * @param apply  (optional)
     * @param r_delete  (optional)
     * @param action  (optional)
     * @param location  (optional)
     * @param propertylist  (optional)
     * @param slingServletResourceTypes  (optional)
     * @param slingServletSelectors  (optional)
     * @param resourceWhitelist  (optional)
     * @param resourceBlacklist  (optional)
     * @return OASComDayCqWcmFoundationFormsImplMai
     * @throws OAS.ApiException if fails to make API call
     */
    public OASComDayCqWcmFoundationFormsImplMai comDayCqWcmFoundationFormsImplMailServlet(Map<String, Object> params) {
        List<OAS.Param> query = new List<OAS.Param>();

        // cast query params to verify their expected type
        query.addAll(client.makeParam('post', (Boolean) params.get('post')));
        query.addAll(client.makeParam('apply', (Boolean) params.get('apply')));
        query.addAll(client.makeParam('delete', (Boolean) params.get('r_delete')));
        query.addAll(client.makeParam('action', (String) params.get('action')));
        query.addAll(client.makeParam('$location', (String) params.get('location')));
        query.addAll(client.makeParam('propertylist', (List<String>) params.get('propertylist'), 'csv'));
        query.addAll(client.makeParam('sling.servlet.resourceTypes', (String) params.get('slingServletResourceTypes')));
        query.addAll(client.makeParam('sling.servlet.selectors', (String) params.get('slingServletSelectors')));
        query.addAll(client.makeParams('resource.whitelist', (List<String>) params.get('resourceWhitelist')));
        query.addAll(client.makeParam('resource.blacklist', (String) params.get('resourceBlacklist')));

        List<OAS.Param> form = new List<OAS.Param>();

        return (OASComDayCqWcmFoundationFormsImplMai) client.invoke(
            'POST', '/system/console/configMgr/com.day.cq.wcm.foundation.forms.impl.MailServlet', '',
            query, form,
            new Map<String, Object>(),
            new Map<String, Object>(),
            new List<String>{ 'application/json', 'text/plain' },
            new List<String>(),
            new List<String> { 'aemAuth' },
            OASComDayCqWcmFoundationFormsImplMai.class
        );
    }
    /**
     * 
     * 
     * @param post  (optional)
     * @param apply  (optional)
     * @param r_delete  (optional)
     * @param action  (optional)
     * @param location  (optional)
     * @param propertylist  (optional)
     * @param adaptSupportedWidths  (optional)
     * @return OASComDayCqWcmFoundationImplAdaptive
     * @throws OAS.ApiException if fails to make API call
     */
    public OASComDayCqWcmFoundationImplAdaptive comDayCqWcmFoundationImplAdaptiveImageComponentServlet(Map<String, Object> params) {
        List<OAS.Param> query = new List<OAS.Param>();

        // cast query params to verify their expected type
        query.addAll(client.makeParam('post', (Boolean) params.get('post')));
        query.addAll(client.makeParam('apply', (Boolean) params.get('apply')));
        query.addAll(client.makeParam('delete', (Boolean) params.get('r_delete')));
        query.addAll(client.makeParam('action', (String) params.get('action')));
        query.addAll(client.makeParam('$location', (String) params.get('location')));
        query.addAll(client.makeParam('propertylist', (List<String>) params.get('propertylist'), 'csv'));
        query.addAll(client.makeParams('adapt.supported.widths', (List<String>) params.get('adaptSupportedWidths')));

        List<OAS.Param> form = new List<OAS.Param>();

        return (OASComDayCqWcmFoundationImplAdaptive) client.invoke(
            'POST', '/system/console/configMgr/com.day.cq.wcm.foundation.impl.AdaptiveImageComponentServlet', '',
            query, form,
            new Map<String, Object>(),
            new Map<String, Object>(),
            new List<String>{ 'application/json', 'text/plain' },
            new List<String>(),
            new List<String> { 'aemAuth' },
            OASComDayCqWcmFoundationImplAdaptive.class
        );
    }
    /**
     * 
     * 
     * @param post  (optional)
     * @param apply  (optional)
     * @param r_delete  (optional)
     * @param action  (optional)
     * @param location  (optional)
     * @param propertylist  (optional)
     * @param path  (optional)
     * @param authHttpNologin  (optional)
     * @param authHttpRealm  (optional)
     * @param authDefaultLoginpage  (optional)
     * @param authCredForm  (optional)
     * @param authCredUtf8  (optional)
     * @return OASComDayCqWcmFoundationImplHTTPAuth
     * @throws OAS.ApiException if fails to make API call
     */
    public OASComDayCqWcmFoundationImplHTTPAuth comDayCqWcmFoundationImplHTTPAuthHandler(Map<String, Object> params) {
        List<OAS.Param> query = new List<OAS.Param>();

        // cast query params to verify their expected type
        query.addAll(client.makeParam('post', (Boolean) params.get('post')));
        query.addAll(client.makeParam('apply', (Boolean) params.get('apply')));
        query.addAll(client.makeParam('delete', (Boolean) params.get('r_delete')));
        query.addAll(client.makeParam('action', (String) params.get('action')));
        query.addAll(client.makeParam('$location', (String) params.get('location')));
        query.addAll(client.makeParam('propertylist', (List<String>) params.get('propertylist'), 'csv'));
        query.addAll(client.makeParam('path', (String) params.get('path')));
        query.addAll(client.makeParam('auth.http.nologin', (Boolean) params.get('authHttpNologin')));
        query.addAll(client.makeParam('auth.http.realm', (String) params.get('authHttpRealm')));
        query.addAll(client.makeParam('auth.default.loginpage', (String) params.get('authDefaultLoginpage')));
        query.addAll(client.makeParams('auth.cred.form', (List<String>) params.get('authCredForm')));
        query.addAll(client.makeParams('auth.cred.utf8', (List<String>) params.get('authCredUtf8')));

        List<OAS.Param> form = new List<OAS.Param>();

        return (OASComDayCqWcmFoundationImplHTTPAuth) client.invoke(
            'POST', '/system/console/configMgr/com.day.cq.wcm.foundation.impl.HTTPAuthHandler', '',
            query, form,
            new Map<String, Object>(),
            new Map<String, Object>(),
            new List<String>{ 'application/json', 'text/plain' },
            new List<String>(),
            new List<String> { 'aemAuth' },
            OASComDayCqWcmFoundationImplHTTPAuth.class
        );
    }
    /**
     * 
     * 
     * @param post  (optional)
     * @param apply  (optional)
     * @param r_delete  (optional)
     * @param action  (optional)
     * @param location  (optional)
     * @param propertylist  (optional)
     * @param slingAuthRequirements  (optional)
     * @return OASComDayCqWcmFoundationImplPageImpr
     * @throws OAS.ApiException if fails to make API call
     */
    public OASComDayCqWcmFoundationImplPageImpr comDayCqWcmFoundationImplPageImpressionsTracker(Map<String, Object> params) {
        List<OAS.Param> query = new List<OAS.Param>();

        // cast query params to verify their expected type
        query.addAll(client.makeParam('post', (Boolean) params.get('post')));
        query.addAll(client.makeParam('apply', (Boolean) params.get('apply')));
        query.addAll(client.makeParam('delete', (Boolean) params.get('r_delete')));
        query.addAll(client.makeParam('action', (String) params.get('action')));
        query.addAll(client.makeParam('$location', (String) params.get('location')));
        query.addAll(client.makeParam('propertylist', (List<String>) params.get('propertylist'), 'csv'));
        query.addAll(client.makeParam('sling.auth.requirements', (String) params.get('slingAuthRequirements')));

        List<OAS.Param> form = new List<OAS.Param>();

        return (OASComDayCqWcmFoundationImplPageImpr) client.invoke(
            'POST', '/system/console/configMgr/com.day.cq.wcm.foundation.impl.PageImpressionsTracker', '',
            query, form,
            new Map<String, Object>(),
            new Map<String, Object>(),
            new List<String>{ 'application/json', 'text/plain' },
            new List<String>(),
            new List<String> { 'aemAuth' },
            OASComDayCqWcmFoundationImplPageImpr.class
        );
    }
    /**
     * 
     * 
     * @param post  (optional)
     * @param apply  (optional)
     * @param r_delete  (optional)
     * @param action  (optional)
     * @param location  (optional)
     * @param propertylist  (optional)
     * @param excludedResourceTypes  (optional)
     * @return OASComDayCqWcmFoundationImplPageRedi
     * @throws OAS.ApiException if fails to make API call
     */
    public OASComDayCqWcmFoundationImplPageRedi comDayCqWcmFoundationImplPageRedirectServlet(Map<String, Object> params) {
        List<OAS.Param> query = new List<OAS.Param>();

        // cast query params to verify their expected type
        query.addAll(client.makeParam('post', (Boolean) params.get('post')));
        query.addAll(client.makeParam('apply', (Boolean) params.get('apply')));
        query.addAll(client.makeParam('delete', (Boolean) params.get('r_delete')));
        query.addAll(client.makeParam('action', (String) params.get('action')));
        query.addAll(client.makeParam('$location', (String) params.get('location')));
        query.addAll(client.makeParam('propertylist', (List<String>) params.get('propertylist'), 'csv'));
        query.addAll(client.makeParams('excluded.resource.types', (List<String>) params.get('excludedResourceTypes')));

        List<OAS.Param> form = new List<OAS.Param>();

        return (OASComDayCqWcmFoundationImplPageRedi) client.invoke(
            'POST', '/system/console/configMgr/com.day.cq.wcm.foundation.impl.PageRedirectServlet', '',
            query, form,
            new Map<String, Object>(),
            new Map<String, Object>(),
            new List<String>{ 'application/json', 'text/plain' },
            new List<String>(),
            new List<String> { 'aemAuth' },
            OASComDayCqWcmFoundationImplPageRedi.class
        );
    }
    /**
     * 
     * 
     * @param post  (optional)
     * @param apply  (optional)
     * @param r_delete  (optional)
     * @param action  (optional)
     * @param location  (optional)
     * @param propertylist  (optional)
     * @param defaultAttachmentTypeBlacklist  (optional)
     * @param baselineAttachmentTypeBlacklist  (optional)
     * @return OASComDayCqWcmFoundationSecurityImpl
     * @throws OAS.ApiException if fails to make API call
     */
    public OASComDayCqWcmFoundationSecurityImpl comDayCqWcmFoundationSecurityImplDefaultAttachmentTypeBlacklist(Map<String, Object> params) {
        List<OAS.Param> query = new List<OAS.Param>();

        // cast query params to verify their expected type
        query.addAll(client.makeParam('post', (Boolean) params.get('post')));
        query.addAll(client.makeParam('apply', (Boolean) params.get('apply')));
        query.addAll(client.makeParam('delete', (Boolean) params.get('r_delete')));
        query.addAll(client.makeParam('action', (String) params.get('action')));
        query.addAll(client.makeParam('$location', (String) params.get('location')));
        query.addAll(client.makeParam('propertylist', (List<String>) params.get('propertylist'), 'csv'));
        query.addAll(client.makeParams('default.attachment.type.blacklist', (List<String>) params.get('defaultAttachmentTypeBlacklist')));
        query.addAll(client.makeParams('baseline.attachment.type.blacklist', (List<String>) params.get('baselineAttachmentTypeBlacklist')));

        List<OAS.Param> form = new List<OAS.Param>();

        return (OASComDayCqWcmFoundationSecurityImpl) client.invoke(
            'POST', '/system/console/configMgr/com.day.cq.wcm.foundation.security.impl.DefaultAttachmentTypeBlacklistService', '',
            query, form,
            new Map<String, Object>(),
            new Map<String, Object>(),
            new List<String>{ 'application/json', 'text/plain' },
            new List<String>(),
            new List<String> { 'aemAuth' },
            OASComDayCqWcmFoundationSecurityImpl.class
        );
    }
    /**
     * 
     * 
     * @param post  (optional)
     * @param apply  (optional)
     * @param r_delete  (optional)
     * @param action  (optional)
     * @param location  (optional)
     * @param propertylist  (optional)
     * @param parameterWhitelist  (optional)
     * @param parameterWhitelistPrefixes  (optional)
     * @param binaryParameterWhitelist  (optional)
     * @param modifierWhitelist  (optional)
     * @param operationWhitelist  (optional)
     * @param operationWhitelistPrefixes  (optional)
     * @param typehintWhitelist  (optional)
     * @param resourcetypeWhitelist  (optional)
     * @return OASComDayCqWcmFoundationSecurityImpl
     * @throws OAS.ApiException if fails to make API call
     */
    public OASComDayCqWcmFoundationSecurityImpl comDayCqWcmFoundationSecurityImplSaferSlingPostValidatorImpl(Map<String, Object> params) {
        List<OAS.Param> query = new List<OAS.Param>();

        // cast query params to verify their expected type
        query.addAll(client.makeParam('post', (Boolean) params.get('post')));
        query.addAll(client.makeParam('apply', (Boolean) params.get('apply')));
        query.addAll(client.makeParam('delete', (Boolean) params.get('r_delete')));
        query.addAll(client.makeParam('action', (String) params.get('action')));
        query.addAll(client.makeParam('$location', (String) params.get('location')));
        query.addAll(client.makeParam('propertylist', (List<String>) params.get('propertylist'), 'csv'));
        query.addAll(client.makeParams('parameter.whitelist', (List<String>) params.get('parameterWhitelist')));
        query.addAll(client.makeParams('parameter.whitelist.prefixes', (List<String>) params.get('parameterWhitelistPrefixes')));
        query.addAll(client.makeParams('binary.parameter.whitelist', (List<String>) params.get('binaryParameterWhitelist')));
        query.addAll(client.makeParams('modifier.whitelist', (List<String>) params.get('modifierWhitelist')));
        query.addAll(client.makeParams('operation.whitelist', (List<String>) params.get('operationWhitelist')));
        query.addAll(client.makeParams('operation.whitelist.prefixes', (List<String>) params.get('operationWhitelistPrefixes')));
        query.addAll(client.makeParams('typehint.whitelist', (List<String>) params.get('typehintWhitelist')));
        query.addAll(client.makeParams('resourcetype.whitelist', (List<String>) params.get('resourcetypeWhitelist')));

        List<OAS.Param> form = new List<OAS.Param>();

        return (OASComDayCqWcmFoundationSecurityImpl) client.invoke(
            'POST', '/system/console/configMgr/com.day.cq.wcm.foundation.security.impl.SaferSlingPostValidatorImpl', '',
            query, form,
            new Map<String, Object>(),
            new Map<String, Object>(),
            new List<String>{ 'application/json', 'text/plain' },
            new List<String>(),
            new List<String> { 'aemAuth' },
            OASComDayCqWcmFoundationSecurityImpl.class
        );
    }
    /**
     * 
     * 
     * @param post  (optional)
     * @param apply  (optional)
     * @param r_delete  (optional)
     * @param action  (optional)
     * @param location  (optional)
     * @param propertylist  (optional)
     * @param deviceInfoTransformerEnabled  (optional)
     * @param deviceInfoTransformerCssStyle  (optional)
     * @return OASComDayCqWcmMobileCoreImplDeviceDe
     * @throws OAS.ApiException if fails to make API call
     */
    public OASComDayCqWcmMobileCoreImplDeviceDe comDayCqWcmMobileCoreImplDeviceDeviceInfoTransformerFactory(Map<String, Object> params) {
        List<OAS.Param> query = new List<OAS.Param>();

        // cast query params to verify their expected type
        query.addAll(client.makeParam('post', (Boolean) params.get('post')));
        query.addAll(client.makeParam('apply', (Boolean) params.get('apply')));
        query.addAll(client.makeParam('delete', (Boolean) params.get('r_delete')));
        query.addAll(client.makeParam('action', (String) params.get('action')));
        query.addAll(client.makeParam('$location', (String) params.get('location')));
        query.addAll(client.makeParam('propertylist', (List<String>) params.get('propertylist'), 'csv'));
        query.addAll(client.makeParam('device.info.transformer.enabled', (Boolean) params.get('deviceInfoTransformerEnabled')));
        query.addAll(client.makeParam('device.info.transformer.css.style', (String) params.get('deviceInfoTransformerCssStyle')));

        List<OAS.Param> form = new List<OAS.Param>();

        return (OASComDayCqWcmMobileCoreImplDeviceDe) client.invoke(
            'POST', '/system/console/configMgr/com.day.cq.wcm.mobile.core.impl.device.DeviceInfoTransformerFactory', '',
            query, form,
            new Map<String, Object>(),
            new Map<String, Object>(),
            new List<String>{ 'application/json', 'text/plain' },
            new List<String>(),
            new List<String> { 'aemAuth' },
            OASComDayCqWcmMobileCoreImplDeviceDe.class
        );
    }
    /**
     * 
     * 
     * @param post  (optional)
     * @param apply  (optional)
     * @param r_delete  (optional)
     * @param action  (optional)
     * @param location  (optional)
     * @param propertylist  (optional)
     * @param redirectEnabled  (optional)
     * @param redirectStatsEnabled  (optional)
     * @param redirectExtensions  (optional)
     * @param redirectPaths  (optional)
     * @return OASComDayCqWcmMobileCoreImplRedirect
     * @throws OAS.ApiException if fails to make API call
     */
    public OASComDayCqWcmMobileCoreImplRedirect comDayCqWcmMobileCoreImplRedirectRedirectFilter(Map<String, Object> params) {
        List<OAS.Param> query = new List<OAS.Param>();

        // cast query params to verify their expected type
        query.addAll(client.makeParam('post', (Boolean) params.get('post')));
        query.addAll(client.makeParam('apply', (Boolean) params.get('apply')));
        query.addAll(client.makeParam('delete', (Boolean) params.get('r_delete')));
        query.addAll(client.makeParam('action', (String) params.get('action')));
        query.addAll(client.makeParam('$location', (String) params.get('location')));
        query.addAll(client.makeParam('propertylist', (List<String>) params.get('propertylist'), 'csv'));
        query.addAll(client.makeParam('redirect.enabled', (Boolean) params.get('redirectEnabled')));
        query.addAll(client.makeParam('redirect.stats.enabled', (Boolean) params.get('redirectStatsEnabled')));
        query.addAll(client.makeParams('redirect.extensions', (List<String>) params.get('redirectExtensions')));
        query.addAll(client.makeParams('redirect.paths', (List<String>) params.get('redirectPaths')));

        List<OAS.Param> form = new List<OAS.Param>();

        return (OASComDayCqWcmMobileCoreImplRedirect) client.invoke(
            'POST', '/system/console/configMgr/com.day.cq.wcm.mobile.core.impl.redirect.RedirectFilter', '',
            query, form,
            new Map<String, Object>(),
            new Map<String, Object>(),
            new List<String>{ 'application/json', 'text/plain' },
            new List<String>(),
            new List<String> { 'aemAuth' },
            OASComDayCqWcmMobileCoreImplRedirect.class
        );
    }
    /**
     * 
     * 
     * @param post  (optional)
     * @param apply  (optional)
     * @param r_delete  (optional)
     * @param action  (optional)
     * @param location  (optional)
     * @param propertylist  (optional)
     * @param cqWcmMsmActionExcludednodetypes  (optional)
     * @param cqWcmMsmActionExcludedparagraphitems  (optional)
     * @param cqWcmMsmActionExcludedprops  (optional)
     * @param contentcopyactionOrderStyle  (optional)
     * @return OASComDayCqWcmMsmImplActionsContentC
     * @throws OAS.ApiException if fails to make API call
     */
    public OASComDayCqWcmMsmImplActionsContentC comDayCqWcmMsmImplActionsContentCopyActionFactory(Map<String, Object> params) {
        List<OAS.Param> query = new List<OAS.Param>();

        // cast query params to verify their expected type
        query.addAll(client.makeParam('post', (Boolean) params.get('post')));
        query.addAll(client.makeParam('apply', (Boolean) params.get('apply')));
        query.addAll(client.makeParam('delete', (Boolean) params.get('r_delete')));
        query.addAll(client.makeParam('action', (String) params.get('action')));
        query.addAll(client.makeParam('$location', (String) params.get('location')));
        query.addAll(client.makeParam('propertylist', (List<String>) params.get('propertylist'), 'csv'));
        query.addAll(client.makeParams('cq.wcm.msm.action.excludednodetypes', (List<String>) params.get('cqWcmMsmActionExcludednodetypes')));
        query.addAll(client.makeParams('cq.wcm.msm.action.excludedparagraphitems', (List<String>) params.get('cqWcmMsmActionExcludedparagraphitems')));
        query.addAll(client.makeParams('cq.wcm.msm.action.excludedprops', (List<String>) params.get('cqWcmMsmActionExcludedprops')));
        query.addAll(client.makeParam('contentcopyaction.order.style', (String) params.get('contentcopyactionOrderStyle')));

        List<OAS.Param> form = new List<OAS.Param>();

        return (OASComDayCqWcmMsmImplActionsContentC) client.invoke(
            'POST', '/system/console/configMgr/com.day.cq.wcm.msm.impl.actions.ContentCopyActionFactory', '',
            query, form,
            new Map<String, Object>(),
            new Map<String, Object>(),
            new List<String>{ 'application/json', 'text/plain' },
            new List<String>(),
            new List<String> { 'aemAuth' },
            OASComDayCqWcmMsmImplActionsContentC.class
        );
    }
    /**
     * 
     * 
     * @param post  (optional)
     * @param apply  (optional)
     * @param r_delete  (optional)
     * @param action  (optional)
     * @param location  (optional)
     * @param propertylist  (optional)
     * @param cqWcmMsmActionExcludednodetypes  (optional)
     * @param cqWcmMsmActionExcludedparagraphitems  (optional)
     * @param cqWcmMsmActionExcludedprops  (optional)
     * @return OASComDayCqWcmMsmImplActionsContentD
     * @throws OAS.ApiException if fails to make API call
     */
    public OASComDayCqWcmMsmImplActionsContentD comDayCqWcmMsmImplActionsContentDeleteActionFactory(Map<String, Object> params) {
        List<OAS.Param> query = new List<OAS.Param>();

        // cast query params to verify their expected type
        query.addAll(client.makeParam('post', (Boolean) params.get('post')));
        query.addAll(client.makeParam('apply', (Boolean) params.get('apply')));
        query.addAll(client.makeParam('delete', (Boolean) params.get('r_delete')));
        query.addAll(client.makeParam('action', (String) params.get('action')));
        query.addAll(client.makeParam('$location', (String) params.get('location')));
        query.addAll(client.makeParam('propertylist', (List<String>) params.get('propertylist'), 'csv'));
        query.addAll(client.makeParams('cq.wcm.msm.action.excludednodetypes', (List<String>) params.get('cqWcmMsmActionExcludednodetypes')));
        query.addAll(client.makeParams('cq.wcm.msm.action.excludedparagraphitems', (List<String>) params.get('cqWcmMsmActionExcludedparagraphitems')));
        query.addAll(client.makeParams('cq.wcm.msm.action.excludedprops', (List<String>) params.get('cqWcmMsmActionExcludedprops')));

        List<OAS.Param> form = new List<OAS.Param>();

        return (OASComDayCqWcmMsmImplActionsContentD) client.invoke(
            'POST', '/system/console/configMgr/com.day.cq.wcm.msm.impl.actions.ContentDeleteActionFactory', '',
            query, form,
            new Map<String, Object>(),
            new Map<String, Object>(),
            new List<String>{ 'application/json', 'text/plain' },
            new List<String>(),
            new List<String> { 'aemAuth' },
            OASComDayCqWcmMsmImplActionsContentD.class
        );
    }
    /**
     * 
     * 
     * @param post  (optional)
     * @param apply  (optional)
     * @param r_delete  (optional)
     * @param action  (optional)
     * @param location  (optional)
     * @param propertylist  (optional)
     * @param cqWcmMsmActionExcludednodetypes  (optional)
     * @param cqWcmMsmActionExcludedparagraphitems  (optional)
     * @param cqWcmMsmActionExcludedprops  (optional)
     * @param cqWcmMsmActionIgnoredMixin  (optional)
     * @return OASComDayCqWcmMsmImplActionsContentU
     * @throws OAS.ApiException if fails to make API call
     */
    public OASComDayCqWcmMsmImplActionsContentU comDayCqWcmMsmImplActionsContentUpdateActionFactory(Map<String, Object> params) {
        List<OAS.Param> query = new List<OAS.Param>();

        // cast query params to verify their expected type
        query.addAll(client.makeParam('post', (Boolean) params.get('post')));
        query.addAll(client.makeParam('apply', (Boolean) params.get('apply')));
        query.addAll(client.makeParam('delete', (Boolean) params.get('r_delete')));
        query.addAll(client.makeParam('action', (String) params.get('action')));
        query.addAll(client.makeParam('$location', (String) params.get('location')));
        query.addAll(client.makeParam('propertylist', (List<String>) params.get('propertylist'), 'csv'));
        query.addAll(client.makeParams('cq.wcm.msm.action.excludednodetypes', (List<String>) params.get('cqWcmMsmActionExcludednodetypes')));
        query.addAll(client.makeParams('cq.wcm.msm.action.excludedparagraphitems', (List<String>) params.get('cqWcmMsmActionExcludedparagraphitems')));
        query.addAll(client.makeParams('cq.wcm.msm.action.excludedprops', (List<String>) params.get('cqWcmMsmActionExcludedprops')));
        query.addAll(client.makeParams('cq.wcm.msm.action.ignoredMixin', (List<String>) params.get('cqWcmMsmActionIgnoredMixin')));

        List<OAS.Param> form = new List<OAS.Param>();

        return (OASComDayCqWcmMsmImplActionsContentU) client.invoke(
            'POST', '/system/console/configMgr/com.day.cq.wcm.msm.impl.actions.ContentUpdateActionFactory', '',
            query, form,
            new Map<String, Object>(),
            new Map<String, Object>(),
            new List<String>{ 'application/json', 'text/plain' },
            new List<String>(),
            new List<String> { 'aemAuth' },
            OASComDayCqWcmMsmImplActionsContentU.class
        );
    }
    /**
     * 
     * 
     * @param post  (optional)
     * @param apply  (optional)
     * @param r_delete  (optional)
     * @param action  (optional)
     * @param location  (optional)
     * @param propertylist  (optional)
     * @param cqWcmMsmActionExcludednodetypes  (optional)
     * @param cqWcmMsmActionExcludedparagraphitems  (optional)
     * @param cqWcmMsmActionExcludedprops  (optional)
     * @return OASComDayCqWcmMsmImplActionsOrderChi
     * @throws OAS.ApiException if fails to make API call
     */
    public OASComDayCqWcmMsmImplActionsOrderChi comDayCqWcmMsmImplActionsOrderChildrenActionFactory(Map<String, Object> params) {
        List<OAS.Param> query = new List<OAS.Param>();

        // cast query params to verify their expected type
        query.addAll(client.makeParam('post', (Boolean) params.get('post')));
        query.addAll(client.makeParam('apply', (Boolean) params.get('apply')));
        query.addAll(client.makeParam('delete', (Boolean) params.get('r_delete')));
        query.addAll(client.makeParam('action', (String) params.get('action')));
        query.addAll(client.makeParam('$location', (String) params.get('location')));
        query.addAll(client.makeParam('propertylist', (List<String>) params.get('propertylist'), 'csv'));
        query.addAll(client.makeParams('cq.wcm.msm.action.excludednodetypes', (List<String>) params.get('cqWcmMsmActionExcludednodetypes')));
        query.addAll(client.makeParams('cq.wcm.msm.action.excludedparagraphitems', (List<String>) params.get('cqWcmMsmActionExcludedparagraphitems')));
        query.addAll(client.makeParams('cq.wcm.msm.action.excludedprops', (List<String>) params.get('cqWcmMsmActionExcludedprops')));

        List<OAS.Param> form = new List<OAS.Param>();

        return (OASComDayCqWcmMsmImplActionsOrderChi) client.invoke(
            'POST', '/system/console/configMgr/com.day.cq.wcm.msm.impl.actions.OrderChildrenActionFactory', '',
            query, form,
            new Map<String, Object>(),
            new Map<String, Object>(),
            new List<String>{ 'application/json', 'text/plain' },
            new List<String>(),
            new List<String> { 'aemAuth' },
            OASComDayCqWcmMsmImplActionsOrderChi.class
        );
    }
    /**
     * 
     * 
     * @param post  (optional)
     * @param apply  (optional)
     * @param r_delete  (optional)
     * @param action  (optional)
     * @param location  (optional)
     * @param propertylist  (optional)
     * @param cqWcmMsmActionExcludednodetypes  (optional)
     * @param cqWcmMsmActionExcludedparagraphitems  (optional)
     * @param cqWcmMsmActionExcludedprops  (optional)
     * @param cqWcmMsmImplActionsPagemovePropReferenceUpdate  (optional)
     * @return OASComDayCqWcmMsmImplActionsPageMove
     * @throws OAS.ApiException if fails to make API call
     */
    public OASComDayCqWcmMsmImplActionsPageMove comDayCqWcmMsmImplActionsPageMoveActionFactory(Map<String, Object> params) {
        List<OAS.Param> query = new List<OAS.Param>();

        // cast query params to verify their expected type
        query.addAll(client.makeParam('post', (Boolean) params.get('post')));
        query.addAll(client.makeParam('apply', (Boolean) params.get('apply')));
        query.addAll(client.makeParam('delete', (Boolean) params.get('r_delete')));
        query.addAll(client.makeParam('action', (String) params.get('action')));
        query.addAll(client.makeParam('$location', (String) params.get('location')));
        query.addAll(client.makeParam('propertylist', (List<String>) params.get('propertylist'), 'csv'));
        query.addAll(client.makeParams('cq.wcm.msm.action.excludednodetypes', (List<String>) params.get('cqWcmMsmActionExcludednodetypes')));
        query.addAll(client.makeParams('cq.wcm.msm.action.excludedparagraphitems', (List<String>) params.get('cqWcmMsmActionExcludedparagraphitems')));
        query.addAll(client.makeParams('cq.wcm.msm.action.excludedprops', (List<String>) params.get('cqWcmMsmActionExcludedprops')));
        query.addAll(client.makeParam('cq.wcm.msm.impl.actions.pagemove.prop_referenceUpdate', (Boolean) params.get('cqWcmMsmImplActionsPagemovePropReferenceUpdate')));

        List<OAS.Param> form = new List<OAS.Param>();

        return (OASComDayCqWcmMsmImplActionsPageMove) client.invoke(
            'POST', '/system/console/configMgr/com.day.cq.wcm.msm.impl.actions.PageMoveActionFactory', '',
            query, form,
            new Map<String, Object>(),
            new Map<String, Object>(),
            new List<String>{ 'application/json', 'text/plain' },
            new List<String>(),
            new List<String> { 'aemAuth' },
            OASComDayCqWcmMsmImplActionsPageMove.class
        );
    }
    /**
     * 
     * 
     * @param post  (optional)
     * @param apply  (optional)
     * @param r_delete  (optional)
     * @param action  (optional)
     * @param location  (optional)
     * @param propertylist  (optional)
     * @param cqWcmMsmActionExcludednodetypes  (optional)
     * @param cqWcmMsmActionExcludedparagraphitems  (optional)
     * @param cqWcmMsmActionExcludedprops  (optional)
     * @param cqWcmMsmImplActionReferencesupdatePropUpdateNested  (optional)
     * @return OASComDayCqWcmMsmImplActionsReferenc
     * @throws OAS.ApiException if fails to make API call
     */
    public OASComDayCqWcmMsmImplActionsReferenc comDayCqWcmMsmImplActionsReferencesUpdateActionFactory(Map<String, Object> params) {
        List<OAS.Param> query = new List<OAS.Param>();

        // cast query params to verify their expected type
        query.addAll(client.makeParam('post', (Boolean) params.get('post')));
        query.addAll(client.makeParam('apply', (Boolean) params.get('apply')));
        query.addAll(client.makeParam('delete', (Boolean) params.get('r_delete')));
        query.addAll(client.makeParam('action', (String) params.get('action')));
        query.addAll(client.makeParam('$location', (String) params.get('location')));
        query.addAll(client.makeParam('propertylist', (List<String>) params.get('propertylist'), 'csv'));
        query.addAll(client.makeParams('cq.wcm.msm.action.excludednodetypes', (List<String>) params.get('cqWcmMsmActionExcludednodetypes')));
        query.addAll(client.makeParams('cq.wcm.msm.action.excludedparagraphitems', (List<String>) params.get('cqWcmMsmActionExcludedparagraphitems')));
        query.addAll(client.makeParams('cq.wcm.msm.action.excludedprops', (List<String>) params.get('cqWcmMsmActionExcludedprops')));
        query.addAll(client.makeParam('cq.wcm.msm.impl.action.referencesupdate.prop_updateNested', (Boolean) params.get('cqWcmMsmImplActionReferencesupdatePropUpdateNested')));

        List<OAS.Param> form = new List<OAS.Param>();

        return (OASComDayCqWcmMsmImplActionsReferenc) client.invoke(
            'POST', '/system/console/configMgr/com.day.cq.wcm.msm.impl.actions.ReferencesUpdateActionFactory', '',
            query, form,
            new Map<String, Object>(),
            new Map<String, Object>(),
            new List<String>{ 'application/json', 'text/plain' },
            new List<String>(),
            new List<String> { 'aemAuth' },
            OASComDayCqWcmMsmImplActionsReferenc.class
        );
    }
    /**
     * 
     * 
     * @param post  (optional)
     * @param apply  (optional)
     * @param r_delete  (optional)
     * @param action  (optional)
     * @param location  (optional)
     * @param propertylist  (optional)
     * @param cqWcmMsmActionExcludednodetypes  (optional)
     * @param cqWcmMsmActionExcludedparagraphitems  (optional)
     * @param cqWcmMsmActionExcludedprops  (optional)
     * @return OASComDayCqWcmMsmImplActionsVersionC
     * @throws OAS.ApiException if fails to make API call
     */
    public OASComDayCqWcmMsmImplActionsVersionC comDayCqWcmMsmImplActionsVersionCopyActionFactory(Map<String, Object> params) {
        List<OAS.Param> query = new List<OAS.Param>();

        // cast query params to verify their expected type
        query.addAll(client.makeParam('post', (Boolean) params.get('post')));
        query.addAll(client.makeParam('apply', (Boolean) params.get('apply')));
        query.addAll(client.makeParam('delete', (Boolean) params.get('r_delete')));
        query.addAll(client.makeParam('action', (String) params.get('action')));
        query.addAll(client.makeParam('$location', (String) params.get('location')));
        query.addAll(client.makeParam('propertylist', (List<String>) params.get('propertylist'), 'csv'));
        query.addAll(client.makeParams('cq.wcm.msm.action.excludednodetypes', (List<String>) params.get('cqWcmMsmActionExcludednodetypes')));
        query.addAll(client.makeParams('cq.wcm.msm.action.excludedparagraphitems', (List<String>) params.get('cqWcmMsmActionExcludedparagraphitems')));
        query.addAll(client.makeParams('cq.wcm.msm.action.excludedprops', (List<String>) params.get('cqWcmMsmActionExcludedprops')));

        List<OAS.Param> form = new List<OAS.Param>();

        return (OASComDayCqWcmMsmImplActionsVersionC) client.invoke(
            'POST', '/system/console/configMgr/com.day.cq.wcm.msm.impl.actions.VersionCopyActionFactory', '',
            query, form,
            new Map<String, Object>(),
            new Map<String, Object>(),
            new List<String>{ 'application/json', 'text/plain' },
            new List<String>(),
            new List<String> { 'aemAuth' },
            OASComDayCqWcmMsmImplActionsVersionC.class
        );
    }
    /**
     * 
     * 
     * @param post  (optional)
     * @param apply  (optional)
     * @param r_delete  (optional)
     * @param action  (optional)
     * @param location  (optional)
     * @param propertylist  (optional)
     * @param liverelationshipmgrRelationsconfigDefault  (optional)
     * @return OASComDayCqWcmMsmImplLiveRelationshi
     * @throws OAS.ApiException if fails to make API call
     */
    public OASComDayCqWcmMsmImplLiveRelationshi comDayCqWcmMsmImplLiveRelationshipManagerImpl(Map<String, Object> params) {
        List<OAS.Param> query = new List<OAS.Param>();

        // cast query params to verify their expected type
        query.addAll(client.makeParam('post', (Boolean) params.get('post')));
        query.addAll(client.makeParam('apply', (Boolean) params.get('apply')));
        query.addAll(client.makeParam('delete', (Boolean) params.get('r_delete')));
        query.addAll(client.makeParam('action', (String) params.get('action')));
        query.addAll(client.makeParam('$location', (String) params.get('location')));
        query.addAll(client.makeParam('propertylist', (List<String>) params.get('propertylist'), 'csv'));
        query.addAll(client.makeParam('liverelationshipmgr.relationsconfig.default', (String) params.get('liverelationshipmgrRelationsconfigDefault')));

        List<OAS.Param> form = new List<OAS.Param>();

        return (OASComDayCqWcmMsmImplLiveRelationshi) client.invoke(
            'POST', '/system/console/configMgr/com.day.cq.wcm.msm.impl.LiveRelationshipManagerImpl', '',
            query, form,
            new Map<String, Object>(),
            new Map<String, Object>(),
            new List<String>{ 'application/json', 'text/plain' },
            new List<String>(),
            new List<String> { 'aemAuth' },
            OASComDayCqWcmMsmImplLiveRelationshi.class
        );
    }
    /**
     * 
     * 
     * @param post  (optional)
     * @param apply  (optional)
     * @param r_delete  (optional)
     * @param action  (optional)
     * @param location  (optional)
     * @param propertylist  (optional)
     * @param eventFilter  (optional)
     * @param rolloutmgrExcludedpropsDefault  (optional)
     * @param rolloutmgrExcludedparagraphpropsDefault  (optional)
     * @param rolloutmgrExcludednodetypesDefault  (optional)
     * @param rolloutmgrThreadpoolMaxsize  (optional)
     * @param rolloutmgrThreadpoolMaxshutdowntime  (optional)
     * @param rolloutmgrThreadpoolPriority  (optional)
     * @param rolloutmgrCommitSize  (optional)
     * @param rolloutmgrConflicthandlingEnabled  (optional)
     * @return OASComDayCqWcmMsmImplRolloutManagerI
     * @throws OAS.ApiException if fails to make API call
     */
    public OASComDayCqWcmMsmImplRolloutManagerI comDayCqWcmMsmImplRolloutManagerImpl(Map<String, Object> params) {
        List<OAS.Param> query = new List<OAS.Param>();

        // cast query params to verify their expected type
        query.addAll(client.makeParam('post', (Boolean) params.get('post')));
        query.addAll(client.makeParam('apply', (Boolean) params.get('apply')));
        query.addAll(client.makeParam('delete', (Boolean) params.get('r_delete')));
        query.addAll(client.makeParam('action', (String) params.get('action')));
        query.addAll(client.makeParam('$location', (String) params.get('location')));
        query.addAll(client.makeParam('propertylist', (List<String>) params.get('propertylist'), 'csv'));
        query.addAll(client.makeParam('event.filter', (String) params.get('eventFilter')));
        query.addAll(client.makeParams('rolloutmgr.excludedprops.default', (List<String>) params.get('rolloutmgrExcludedpropsDefault')));
        query.addAll(client.makeParams('rolloutmgr.excludedparagraphprops.default', (List<String>) params.get('rolloutmgrExcludedparagraphpropsDefault')));
        query.addAll(client.makeParams('rolloutmgr.excludednodetypes.default', (List<String>) params.get('rolloutmgrExcludednodetypesDefault')));
        query.addAll(client.makeParam('rolloutmgr.threadpool.maxsize', (Integer) params.get('rolloutmgrThreadpoolMaxsize')));
        query.addAll(client.makeParam('rolloutmgr.threadpool.maxshutdowntime', (Integer) params.get('rolloutmgrThreadpoolMaxshutdowntime')));
        query.addAll(client.makeParam('rolloutmgr.threadpool.priority', (String) params.get('rolloutmgrThreadpoolPriority')));
        query.addAll(client.makeParam('rolloutmgr.commit.size', (Integer) params.get('rolloutmgrCommitSize')));
        query.addAll(client.makeParam('rolloutmgr.conflicthandling.enabled', (Boolean) params.get('rolloutmgrConflicthandlingEnabled')));

        List<OAS.Param> form = new List<OAS.Param>();

        return (OASComDayCqWcmMsmImplRolloutManagerI) client.invoke(
            'POST', '/system/console/configMgr/com.day.cq.wcm.msm.impl.RolloutManagerImpl', '',
            query, form,
            new Map<String, Object>(),
            new Map<String, Object>(),
            new List<String>{ 'application/json', 'text/plain' },
            new List<String>(),
            new List<String> { 'aemAuth' },
            OASComDayCqWcmMsmImplRolloutManagerI.class
        );
    }
    /**
     * 
     * 
     * @param post  (optional)
     * @param apply  (optional)
     * @param r_delete  (optional)
     * @param action  (optional)
     * @param location  (optional)
     * @param propertylist  (optional)
     * @param auditlogservletDefaultEventsCount  (optional)
     * @param auditlogservletDefaultPath  (optional)
     * @return OASComDayCqWcmMsmImplServletsAuditLo
     * @throws OAS.ApiException if fails to make API call
     */
    public OASComDayCqWcmMsmImplServletsAuditLo comDayCqWcmMsmImplServletsAuditLogServlet(Map<String, Object> params) {
        List<OAS.Param> query = new List<OAS.Param>();

        // cast query params to verify their expected type
        query.addAll(client.makeParam('post', (Boolean) params.get('post')));
        query.addAll(client.makeParam('apply', (Boolean) params.get('apply')));
        query.addAll(client.makeParam('delete', (Boolean) params.get('r_delete')));
        query.addAll(client.makeParam('action', (String) params.get('action')));
        query.addAll(client.makeParam('$location', (String) params.get('location')));
        query.addAll(client.makeParam('propertylist', (List<String>) params.get('propertylist'), 'csv'));
        query.addAll(client.makeParam('auditlogservlet.default.events.count', (Integer) params.get('auditlogservletDefaultEventsCount')));
        query.addAll(client.makeParam('auditlogservlet.default.path', (String) params.get('auditlogservletDefaultPath')));

        List<OAS.Param> form = new List<OAS.Param>();

        return (OASComDayCqWcmMsmImplServletsAuditLo) client.invoke(
            'POST', '/system/console/configMgr/com.day.cq.wcm.msm.impl.servlets.AuditLogServlet', '',
            query, form,
            new Map<String, Object>(),
            new Map<String, Object>(),
            new List<String>{ 'application/json', 'text/plain' },
            new List<String>(),
            new List<String> { 'aemAuth' },
            OASComDayCqWcmMsmImplServletsAuditLo.class
        );
    }
    /**
     * 
     * 
     * @param post  (optional)
     * @param apply  (optional)
     * @param r_delete  (optional)
     * @param action  (optional)
     * @param location  (optional)
     * @param propertylist  (optional)
     * @param emailFrom  (optional)
     * @return OASComDayCqWcmNotificationEmailImplE
     * @throws OAS.ApiException if fails to make API call
     */
    public OASComDayCqWcmNotificationEmailImplE comDayCqWcmNotificationEmailImplEmailChannel(Map<String, Object> params) {
        List<OAS.Param> query = new List<OAS.Param>();

        // cast query params to verify their expected type
        query.addAll(client.makeParam('post', (Boolean) params.get('post')));
        query.addAll(client.makeParam('apply', (Boolean) params.get('apply')));
        query.addAll(client.makeParam('delete', (Boolean) params.get('r_delete')));
        query.addAll(client.makeParam('action', (String) params.get('action')));
        query.addAll(client.makeParam('$location', (String) params.get('location')));
        query.addAll(client.makeParam('propertylist', (List<String>) params.get('propertylist'), 'csv'));
        query.addAll(client.makeParam('email.from', (String) params.get('emailFrom')));

        List<OAS.Param> form = new List<OAS.Param>();

        return (OASComDayCqWcmNotificationEmailImplE) client.invoke(
            'POST', '/system/console/configMgr/com.day.cq.wcm.notification.email.impl.EmailChannel', '',
            query, form,
            new Map<String, Object>(),
            new Map<String, Object>(),
            new List<String>{ 'application/json', 'text/plain' },
            new List<String>(),
            new List<String> { 'aemAuth' },
            OASComDayCqWcmNotificationEmailImplE.class
        );
    }
    /**
     * 
     * 
     * @param post  (optional)
     * @param apply  (optional)
     * @param r_delete  (optional)
     * @param action  (optional)
     * @param location  (optional)
     * @param propertylist  (optional)
     * @param eventTopics  (optional)
     * @return OASComDayCqWcmNotificationImplNotifi
     * @throws OAS.ApiException if fails to make API call
     */
    public OASComDayCqWcmNotificationImplNotifi comDayCqWcmNotificationImplNotificationManagerImpl(Map<String, Object> params) {
        List<OAS.Param> query = new List<OAS.Param>();

        // cast query params to verify their expected type
        query.addAll(client.makeParam('post', (Boolean) params.get('post')));
        query.addAll(client.makeParam('apply', (Boolean) params.get('apply')));
        query.addAll(client.makeParam('delete', (Boolean) params.get('r_delete')));
        query.addAll(client.makeParam('action', (String) params.get('action')));
        query.addAll(client.makeParam('$location', (String) params.get('location')));
        query.addAll(client.makeParam('propertylist', (List<String>) params.get('propertylist'), 'csv'));
        query.addAll(client.makeParams('event.topics', (List<String>) params.get('eventTopics')));

        List<OAS.Param> form = new List<OAS.Param>();

        return (OASComDayCqWcmNotificationImplNotifi) client.invoke(
            'POST', '/system/console/configMgr/com.day.cq.wcm.notification.impl.NotificationManagerImpl', '',
            query, form,
            new Map<String, Object>(),
            new Map<String, Object>(),
            new List<String>{ 'application/json', 'text/plain' },
            new List<String>(),
            new List<String> { 'aemAuth' },
            OASComDayCqWcmNotificationImplNotifi.class
        );
    }
    /**
     * 
     * 
     * @param post  (optional)
     * @param apply  (optional)
     * @param r_delete  (optional)
     * @param action  (optional)
     * @param location  (optional)
     * @param propertylist  (optional)
     * @param comDayCqWcmScriptingBvpScriptEngines  (optional)
     * @return OASComDayCqWcmScriptingImplBVPManage
     * @throws OAS.ApiException if fails to make API call
     */
    public OASComDayCqWcmScriptingImplBVPManage comDayCqWcmScriptingImplBVPManager(Map<String, Object> params) {
        List<OAS.Param> query = new List<OAS.Param>();

        // cast query params to verify their expected type
        query.addAll(client.makeParam('post', (Boolean) params.get('post')));
        query.addAll(client.makeParam('apply', (Boolean) params.get('apply')));
        query.addAll(client.makeParam('delete', (Boolean) params.get('r_delete')));
        query.addAll(client.makeParam('action', (String) params.get('action')));
        query.addAll(client.makeParam('$location', (String) params.get('location')));
        query.addAll(client.makeParam('propertylist', (List<String>) params.get('propertylist'), 'csv'));
        query.addAll(client.makeParams('com.day.cq.wcm.scripting.bvp.script.engines', (List<String>) params.get('comDayCqWcmScriptingBvpScriptEngines')));

        List<OAS.Param> form = new List<OAS.Param>();

        return (OASComDayCqWcmScriptingImplBVPManage) client.invoke(
            'POST', '/system/console/configMgr/com.day.cq.wcm.scripting.impl.BVPManager', '',
            query, form,
            new Map<String, Object>(),
            new Map<String, Object>(),
            new List<String>{ 'application/json', 'text/plain' },
            new List<String>(),
            new List<String> { 'aemAuth' },
            OASComDayCqWcmScriptingImplBVPManage.class
        );
    }
    /**
     * 
     * 
     * @param post  (optional)
     * @param apply  (optional)
     * @param r_delete  (optional)
     * @param action  (optional)
     * @param location  (optional)
     * @param propertylist  (optional)
     * @param cqWcmUndoEnabled  (optional)
     * @param cqWcmUndoPath  (optional)
     * @param cqWcmUndoValidity  (optional)
     * @param cqWcmUndoSteps  (optional)
     * @param cqWcmUndoPersistence  (optional)
     * @param cqWcmUndoPersistenceMode  (optional)
     * @param cqWcmUndoMarkermode  (optional)
     * @param cqWcmUndoWhitelist  (optional)
     * @param cqWcmUndoBlacklist  (optional)
     * @return OASComDayCqWcmUndoUndoConfigInfo
     * @throws OAS.ApiException if fails to make API call
     */
    public OASComDayCqWcmUndoUndoConfigInfo comDayCqWcmUndoUndoConfig(Map<String, Object> params) {
        List<OAS.Param> query = new List<OAS.Param>();

        // cast query params to verify their expected type
        query.addAll(client.makeParam('post', (Boolean) params.get('post')));
        query.addAll(client.makeParam('apply', (Boolean) params.get('apply')));
        query.addAll(client.makeParam('delete', (Boolean) params.get('r_delete')));
        query.addAll(client.makeParam('action', (String) params.get('action')));
        query.addAll(client.makeParam('$location', (String) params.get('location')));
        query.addAll(client.makeParam('propertylist', (List<String>) params.get('propertylist'), 'csv'));
        query.addAll(client.makeParam('cq.wcm.undo.enabled', (Boolean) params.get('cqWcmUndoEnabled')));
        query.addAll(client.makeParam('cq.wcm.undo.path', (String) params.get('cqWcmUndoPath')));
        query.addAll(client.makeParam('cq.wcm.undo.validity', (Integer) params.get('cqWcmUndoValidity')));
        query.addAll(client.makeParam('cq.wcm.undo.steps', (Integer) params.get('cqWcmUndoSteps')));
        query.addAll(client.makeParam('cq.wcm.undo.persistence', (String) params.get('cqWcmUndoPersistence')));
        query.addAll(client.makeParam('cq.wcm.undo.persistence.mode', (Boolean) params.get('cqWcmUndoPersistenceMode')));
        query.addAll(client.makeParam('cq.wcm.undo.markermode', (String) params.get('cqWcmUndoMarkermode')));
        query.addAll(client.makeParams('cq.wcm.undo.whitelist', (List<String>) params.get('cqWcmUndoWhitelist')));
        query.addAll(client.makeParams('cq.wcm.undo.blacklist', (List<String>) params.get('cqWcmUndoBlacklist')));

        List<OAS.Param> form = new List<OAS.Param>();

        return (OASComDayCqWcmUndoUndoConfigInfo) client.invoke(
            'POST', '/system/console/configMgr/com.day.cq.wcm.undo.UndoConfig', '',
            query, form,
            new Map<String, Object>(),
            new Map<String, Object>(),
            new List<String>{ 'application/json', 'text/plain' },
            new List<String>(),
            new List<String> { 'aemAuth' },
            OASComDayCqWcmUndoUndoConfigInfo.class
        );
    }
    /**
     * 
     * 
     * @param post  (optional)
     * @param apply  (optional)
     * @param r_delete  (optional)
     * @param action  (optional)
     * @param location  (optional)
     * @param propertylist  (optional)
     * @param flushAgents  (optional)
     * @return OASComDayCqWcmWebservicesupportImplR
     * @throws OAS.ApiException if fails to make API call
     */
    public OASComDayCqWcmWebservicesupportImplR comDayCqWcmWebservicesupportImplReplicationEventListener(Map<String, Object> params) {
        List<OAS.Param> query = new List<OAS.Param>();

        // cast query params to verify their expected type
        query.addAll(client.makeParam('post', (Boolean) params.get('post')));
        query.addAll(client.makeParam('apply', (Boolean) params.get('apply')));
        query.addAll(client.makeParam('delete', (Boolean) params.get('r_delete')));
        query.addAll(client.makeParam('action', (String) params.get('action')));
        query.addAll(client.makeParam('$location', (String) params.get('location')));
        query.addAll(client.makeParam('propertylist', (List<String>) params.get('propertylist'), 'csv'));
        query.addAll(client.makeParams('Flush agents', (List<String>) params.get('flushAgents')));

        List<OAS.Param> form = new List<OAS.Param>();

        return (OASComDayCqWcmWebservicesupportImplR) client.invoke(
            'POST', '/system/console/configMgr/com.day.cq.wcm.webservicesupport.impl.ReplicationEventListener', '',
            query, form,
            new Map<String, Object>(),
            new Map<String, Object>(),
            new List<String>{ 'application/json', 'text/plain' },
            new List<String>(),
            new List<String> { 'aemAuth' },
            OASComDayCqWcmWebservicesupportImplR.class
        );
    }
    /**
     * 
     * 
     * @param post  (optional)
     * @param apply  (optional)
     * @param r_delete  (optional)
     * @param action  (optional)
     * @param location  (optional)
     * @param propertylist  (optional)
     * @param eventFilter  (optional)
     * @param minThreadPoolSize  (optional)
     * @param maxThreadPoolSize  (optional)
     * @param cqWcmWorkflowTerminateOnActivate  (optional)
     * @param cqWcmWorklfowTerminateExclusionList  (optional)
     * @return OASComDayCqWcmWorkflowImplWcmWorkflo
     * @throws OAS.ApiException if fails to make API call
     */
    public OASComDayCqWcmWorkflowImplWcmWorkflo comDayCqWcmWorkflowImplWcmWorkflowServiceImpl(Map<String, Object> params) {
        List<OAS.Param> query = new List<OAS.Param>();

        // cast query params to verify their expected type
        query.addAll(client.makeParam('post', (Boolean) params.get('post')));
        query.addAll(client.makeParam('apply', (Boolean) params.get('apply')));
        query.addAll(client.makeParam('delete', (Boolean) params.get('r_delete')));
        query.addAll(client.makeParam('action', (String) params.get('action')));
        query.addAll(client.makeParam('$location', (String) params.get('location')));
        query.addAll(client.makeParam('propertylist', (List<String>) params.get('propertylist'), 'csv'));
        query.addAll(client.makeParam('event.filter', (String) params.get('eventFilter')));
        query.addAll(client.makeParam('minThreadPoolSize', (Integer) params.get('minThreadPoolSize')));
        query.addAll(client.makeParam('maxThreadPoolSize', (Integer) params.get('maxThreadPoolSize')));
        query.addAll(client.makeParam('cq.wcm.workflow.terminate.on.activate', (Boolean) params.get('cqWcmWorkflowTerminateOnActivate')));
        query.addAll(client.makeParams('cq.wcm.worklfow.terminate.exclusion.list', (List<String>) params.get('cqWcmWorklfowTerminateExclusionList')));

        List<OAS.Param> form = new List<OAS.Param>();

        return (OASComDayCqWcmWorkflowImplWcmWorkflo) client.invoke(
            'POST', '/system/console/configMgr/com.day.cq.wcm.workflow.impl.WcmWorkflowServiceImpl', '',
            query, form,
            new Map<String, Object>(),
            new Map<String, Object>(),
            new List<String>{ 'application/json', 'text/plain' },
            new List<String>(),
            new List<String> { 'aemAuth' },
            OASComDayCqWcmWorkflowImplWcmWorkflo.class
        );
    }
    /**
     * 
     * 
     * @param post  (optional)
     * @param apply  (optional)
     * @param r_delete  (optional)
     * @param action  (optional)
     * @param location  (optional)
     * @param propertylist  (optional)
     * @param workflowpackageinfoproviderFilter  (optional)
     * @param workflowpackageinfoproviderFilterRootpath  (optional)
     * @return OASComDayCqWcmWorkflowImplWorkflowPa
     * @throws OAS.ApiException if fails to make API call
     */
    public OASComDayCqWcmWorkflowImplWorkflowPa comDayCqWcmWorkflowImplWorkflowPackageInfoProvider(Map<String, Object> params) {
        List<OAS.Param> query = new List<OAS.Param>();

        // cast query params to verify their expected type
        query.addAll(client.makeParam('post', (Boolean) params.get('post')));
        query.addAll(client.makeParam('apply', (Boolean) params.get('apply')));
        query.addAll(client.makeParam('delete', (Boolean) params.get('r_delete')));
        query.addAll(client.makeParam('action', (String) params.get('action')));
        query.addAll(client.makeParam('$location', (String) params.get('location')));
        query.addAll(client.makeParam('propertylist', (List<String>) params.get('propertylist'), 'csv'));
        query.addAll(client.makeParams('workflowpackageinfoprovider.filter', (List<String>) params.get('workflowpackageinfoproviderFilter')));
        query.addAll(client.makeParam('workflowpackageinfoprovider.filter.rootpath', (String) params.get('workflowpackageinfoproviderFilterRootpath')));

        List<OAS.Param> form = new List<OAS.Param>();

        return (OASComDayCqWcmWorkflowImplWorkflowPa) client.invoke(
            'POST', '/system/console/configMgr/com.day.cq.wcm.workflow.impl.WorkflowPackageInfoProvider', '',
            query, form,
            new Map<String, Object>(),
            new Map<String, Object>(),
            new List<String>{ 'application/json', 'text/plain' },
            new List<String>(),
            new List<String> { 'aemAuth' },
            OASComDayCqWcmWorkflowImplWorkflowPa.class
        );
    }
    /**
     * 
     * 
     * @param post  (optional)
     * @param apply  (optional)
     * @param r_delete  (optional)
     * @param action  (optional)
     * @param location  (optional)
     * @param propertylist  (optional)
     * @param htmllibmanagerClientmanager  (optional)
     * @param htmllibmanagerDebug  (optional)
     * @param htmllibmanagerDebugConsole  (optional)
     * @param htmllibmanagerDebugInitJs  (optional)
     * @param htmllibmanagerDefaultthemename  (optional)
     * @param htmllibmanagerDefaultuserthemename  (optional)
     * @param htmllibmanagerFirebuglitePath  (optional)
     * @param htmllibmanagerForceCQUrlInfo  (optional)
     * @param htmllibmanagerGzip  (optional)
     * @param htmllibmanagerMaxage  (optional)
     * @param htmllibmanagerMaxDataUriSize  (optional)
     * @param htmllibmanagerMinify  (optional)
     * @param htmllibmanagerPathList  (optional)
     * @param htmllibmanagerTiming  (optional)
     * @return OASComDayCqWidgetImplHtmlLibraryMana
     * @throws OAS.ApiException if fails to make API call
     */
    public OASComDayCqWidgetImplHtmlLibraryMana comDayCqWidgetImplHtmlLibraryManagerImpl(Map<String, Object> params) {
        List<OAS.Param> query = new List<OAS.Param>();

        // cast query params to verify their expected type
        query.addAll(client.makeParam('post', (Boolean) params.get('post')));
        query.addAll(client.makeParam('apply', (Boolean) params.get('apply')));
        query.addAll(client.makeParam('delete', (Boolean) params.get('r_delete')));
        query.addAll(client.makeParam('action', (String) params.get('action')));
        query.addAll(client.makeParam('$location', (String) params.get('location')));
        query.addAll(client.makeParam('propertylist', (List<String>) params.get('propertylist'), 'csv'));
        query.addAll(client.makeParam('htmllibmanager.clientmanager', (String) params.get('htmllibmanagerClientmanager')));
        query.addAll(client.makeParam('htmllibmanager.debug', (Boolean) params.get('htmllibmanagerDebug')));
        query.addAll(client.makeParam('htmllibmanager.debug.console', (Boolean) params.get('htmllibmanagerDebugConsole')));
        query.addAll(client.makeParam('htmllibmanager.debug.init.js', (String) params.get('htmllibmanagerDebugInitJs')));
        query.addAll(client.makeParam('htmllibmanager.defaultthemename', (String) params.get('htmllibmanagerDefaultthemename')));
        query.addAll(client.makeParam('htmllibmanager.defaultuserthemename', (String) params.get('htmllibmanagerDefaultuserthemename')));
        query.addAll(client.makeParam('htmllibmanager.firebuglite.path', (String) params.get('htmllibmanagerFirebuglitePath')));
        query.addAll(client.makeParam('htmllibmanager.forceCQUrlInfo', (Boolean) params.get('htmllibmanagerForceCQUrlInfo')));
        query.addAll(client.makeParam('htmllibmanager.gzip', (Boolean) params.get('htmllibmanagerGzip')));
        query.addAll(client.makeParam('htmllibmanager.maxage', (Integer) params.get('htmllibmanagerMaxage')));
        query.addAll(client.makeParam('htmllibmanager.maxDataUriSize', (Integer) params.get('htmllibmanagerMaxDataUriSize')));
        query.addAll(client.makeParam('htmllibmanager.minify', (Boolean) params.get('htmllibmanagerMinify')));
        query.addAll(client.makeParams('htmllibmanager.path.list', (List<String>) params.get('htmllibmanagerPathList')));
        query.addAll(client.makeParam('htmllibmanager.timing', (Boolean) params.get('htmllibmanagerTiming')));

        List<OAS.Param> form = new List<OAS.Param>();

        return (OASComDayCqWidgetImplHtmlLibraryMana) client.invoke(
            'POST', '/system/console/configMgr/com.day.cq.widget.impl.HtmlLibraryManagerImpl', '',
            query, form,
            new Map<String, Object>(),
            new Map<String, Object>(),
            new List<String>{ 'application/json', 'text/plain' },
            new List<String>(),
            new List<String> { 'aemAuth' },
            OASComDayCqWidgetImplHtmlLibraryMana.class
        );
    }
    /**
     * 
     * 
     * @param post  (optional)
     * @param apply  (optional)
     * @param r_delete  (optional)
     * @param action  (optional)
     * @param location  (optional)
     * @param propertylist  (optional)
     * @param extendableWidgets  (optional)
     * @param widgetextensionproviderDebug  (optional)
     * @return OASComDayCqWidgetImplWidgetExtension
     * @throws OAS.ApiException if fails to make API call
     */
    public OASComDayCqWidgetImplWidgetExtension comDayCqWidgetImplWidgetExtensionProviderImpl(Map<String, Object> params) {
        List<OAS.Param> query = new List<OAS.Param>();

        // cast query params to verify their expected type
        query.addAll(client.makeParam('post', (Boolean) params.get('post')));
        query.addAll(client.makeParam('apply', (Boolean) params.get('apply')));
        query.addAll(client.makeParam('delete', (Boolean) params.get('r_delete')));
        query.addAll(client.makeParam('action', (String) params.get('action')));
        query.addAll(client.makeParam('$location', (String) params.get('location')));
        query.addAll(client.makeParam('propertylist', (List<String>) params.get('propertylist'), 'csv'));
        query.addAll(client.makeParams('extendable.widgets', (List<String>) params.get('extendableWidgets')));
        query.addAll(client.makeParam('widgetextensionprovider.debug', (Boolean) params.get('widgetextensionproviderDebug')));

        List<OAS.Param> form = new List<OAS.Param>();

        return (OASComDayCqWidgetImplWidgetExtension) client.invoke(
            'POST', '/system/console/configMgr/com.day.cq.widget.impl.WidgetExtensionProviderImpl', '',
            query, form,
            new Map<String, Object>(),
            new Map<String, Object>(),
            new List<String>{ 'application/json', 'text/plain' },
            new List<String>(),
            new List<String> { 'aemAuth' },
            OASComDayCqWidgetImplWidgetExtension.class
        );
    }
    /**
     * 
     * 
     * @param post  (optional)
     * @param apply  (optional)
     * @param r_delete  (optional)
     * @param action  (optional)
     * @param location  (optional)
     * @param propertylist  (optional)
     * @param fromAddress  (optional)
     * @param hostPrefix  (optional)
     * @param notifyOnabort  (optional)
     * @param notifyOncomplete  (optional)
     * @param notifyOncontainercomplete  (optional)
     * @param notifyUseronly  (optional)
     * @return OASComDayCqWorkflowImplEmailEMailNot
     * @throws OAS.ApiException if fails to make API call
     */
    public OASComDayCqWorkflowImplEmailEMailNot comDayCqWorkflowImplEmailEMailNotificationService(Map<String, Object> params) {
        List<OAS.Param> query = new List<OAS.Param>();

        // cast query params to verify their expected type
        query.addAll(client.makeParam('post', (Boolean) params.get('post')));
        query.addAll(client.makeParam('apply', (Boolean) params.get('apply')));
        query.addAll(client.makeParam('delete', (Boolean) params.get('r_delete')));
        query.addAll(client.makeParam('action', (String) params.get('action')));
        query.addAll(client.makeParam('$location', (String) params.get('location')));
        query.addAll(client.makeParam('propertylist', (List<String>) params.get('propertylist'), 'csv'));
        query.addAll(client.makeParam('from.address', (String) params.get('fromAddress')));
        query.addAll(client.makeParam('host.prefix', (String) params.get('hostPrefix')));
        query.addAll(client.makeParam('notify.onabort', (Boolean) params.get('notifyOnabort')));
        query.addAll(client.makeParam('notify.oncomplete', (Boolean) params.get('notifyOncomplete')));
        query.addAll(client.makeParam('notify.oncontainercomplete', (Boolean) params.get('notifyOncontainercomplete')));
        query.addAll(client.makeParam('notify.useronly', (Boolean) params.get('notifyUseronly')));

        List<OAS.Param> form = new List<OAS.Param>();

        return (OASComDayCqWorkflowImplEmailEMailNot) client.invoke(
            'POST', '/system/console/configMgr/com.day.cq.workflow.impl.email.EMailNotificationService', '',
            query, form,
            new Map<String, Object>(),
            new Map<String, Object>(),
            new List<String>{ 'application/json', 'text/plain' },
            new List<String>(),
            new List<String> { 'aemAuth' },
            OASComDayCqWorkflowImplEmailEMailNot.class
        );
    }
    /**
     * 
     * 
     * @param post  (optional)
     * @param apply  (optional)
     * @param r_delete  (optional)
     * @param action  (optional)
     * @param location  (optional)
     * @param propertylist  (optional)
     * @param notifyOnupdate  (optional)
     * @param notifyOncomplete  (optional)
     * @return OASComDayCqWorkflowImplEmailTaskEMai
     * @throws OAS.ApiException if fails to make API call
     */
    public OASComDayCqWorkflowImplEmailTaskEMai comDayCqWorkflowImplEmailTaskEMailNotificationService(Map<String, Object> params) {
        List<OAS.Param> query = new List<OAS.Param>();

        // cast query params to verify their expected type
        query.addAll(client.makeParam('post', (Boolean) params.get('post')));
        query.addAll(client.makeParam('apply', (Boolean) params.get('apply')));
        query.addAll(client.makeParam('delete', (Boolean) params.get('r_delete')));
        query.addAll(client.makeParam('action', (String) params.get('action')));
        query.addAll(client.makeParam('$location', (String) params.get('location')));
        query.addAll(client.makeParam('propertylist', (List<String>) params.get('propertylist'), 'csv'));
        query.addAll(client.makeParam('notify.onupdate', (Boolean) params.get('notifyOnupdate')));
        query.addAll(client.makeParam('notify.oncomplete', (Boolean) params.get('notifyOncomplete')));

        List<OAS.Param> form = new List<OAS.Param>();

        return (OASComDayCqWorkflowImplEmailTaskEMai) client.invoke(
            'POST', '/system/console/configMgr/com.day.cq.workflow.impl.email.TaskEMailNotificationService', '',
            query, form,
            new Map<String, Object>(),
            new Map<String, Object>(),
            new List<String>{ 'application/json', 'text/plain' },
            new List<String>(),
            new List<String> { 'aemAuth' },
            OASComDayCqWorkflowImplEmailTaskEMai.class
        );
    }
    /**
     * 
     * 
     * @param post  (optional)
     * @param apply  (optional)
     * @param r_delete  (optional)
     * @param action  (optional)
     * @param location  (optional)
     * @param propertylist  (optional)
     * @param path  (optional)
     * @param tokenRequiredAttr  (optional)
     * @param tokenAlternateUrl  (optional)
     * @param tokenEncapsulated  (optional)
     * @param skipTokenRefresh  (optional)
     * @return OASComDayCrxSecurityTokenImplImplTok
     * @throws OAS.ApiException if fails to make API call
     */
    public OASComDayCrxSecurityTokenImplImplTok comDayCrxSecurityTokenImplImplTokenAuthenticationHandler(Map<String, Object> params) {
        List<OAS.Param> query = new List<OAS.Param>();

        // cast query params to verify their expected type
        query.addAll(client.makeParam('post', (Boolean) params.get('post')));
        query.addAll(client.makeParam('apply', (Boolean) params.get('apply')));
        query.addAll(client.makeParam('delete', (Boolean) params.get('r_delete')));
        query.addAll(client.makeParam('action', (String) params.get('action')));
        query.addAll(client.makeParam('$location', (String) params.get('location')));
        query.addAll(client.makeParam('propertylist', (List<String>) params.get('propertylist'), 'csv'));
        query.addAll(client.makeParam('path', (String) params.get('path')));
        query.addAll(client.makeParam('token.required.attr', (String) params.get('tokenRequiredAttr')));
        query.addAll(client.makeParam('token.alternate.url', (String) params.get('tokenAlternateUrl')));
        query.addAll(client.makeParam('token.encapsulated', (Boolean) params.get('tokenEncapsulated')));
        query.addAll(client.makeParams('skip.token.refresh', (List<String>) params.get('skipTokenRefresh')));

        List<OAS.Param> form = new List<OAS.Param>();

        return (OASComDayCrxSecurityTokenImplImplTok) client.invoke(
            'POST', '/system/console/configMgr/com.day.crx.security.token.impl.impl.TokenAuthenticationHandler', '',
            query, form,
            new Map<String, Object>(),
            new Map<String, Object>(),
            new List<String>{ 'application/json', 'text/plain' },
            new List<String>(),
            new List<String> { 'aemAuth' },
            OASComDayCrxSecurityTokenImplImplTok.class
        );
    }
    /**
     * 
     * 
     * @param post  (optional)
     * @param apply  (optional)
     * @param r_delete  (optional)
     * @param action  (optional)
     * @param location  (optional)
     * @param propertylist  (optional)
     * @param enableTokenCleanupTask  (optional)
     * @param schedulerExpression  (optional)
     * @param batchSize  (optional)
     * @return OASComDayCrxSecurityTokenImplTokenCl
     * @throws OAS.ApiException if fails to make API call
     */
    public OASComDayCrxSecurityTokenImplTokenCl comDayCrxSecurityTokenImplTokenCleanupTask(Map<String, Object> params) {
        List<OAS.Param> query = new List<OAS.Param>();

        // cast query params to verify their expected type
        query.addAll(client.makeParam('post', (Boolean) params.get('post')));
        query.addAll(client.makeParam('apply', (Boolean) params.get('apply')));
        query.addAll(client.makeParam('delete', (Boolean) params.get('r_delete')));
        query.addAll(client.makeParam('action', (String) params.get('action')));
        query.addAll(client.makeParam('$location', (String) params.get('location')));
        query.addAll(client.makeParam('propertylist', (List<String>) params.get('propertylist'), 'csv'));
        query.addAll(client.makeParam('enable.token.cleanup.task', (Boolean) params.get('enableTokenCleanupTask')));
        query.addAll(client.makeParam('scheduler.expression', (String) params.get('schedulerExpression')));
        query.addAll(client.makeParam('batch.size', (Integer) params.get('batchSize')));

        List<OAS.Param> form = new List<OAS.Param>();

        return (OASComDayCrxSecurityTokenImplTokenCl) client.invoke(
            'POST', '/system/console/configMgr/com.day.crx.security.token.impl.TokenCleanupTask', '',
            query, form,
            new Map<String, Object>(),
            new Map<String, Object>(),
            new List<String>{ 'application/json', 'text/plain' },
            new List<String>(),
            new List<String> { 'aemAuth' },
            OASComDayCrxSecurityTokenImplTokenCl.class
        );
    }
    /**
     * 
     * 
     * @param post  (optional)
     * @param apply  (optional)
     * @param r_delete  (optional)
     * @param action  (optional)
     * @param location  (optional)
     * @param propertylist  (optional)
     * @param supportedLocales  (optional)
     * @param localizableProperties  (optional)
     * @return OASGuideLocalizationServiceInfo
     * @throws OAS.ApiException if fails to make API call
     */
    public OASGuideLocalizationServiceInfo guideLocalizationService(Map<String, Object> params) {
        List<OAS.Param> query = new List<OAS.Param>();

        // cast query params to verify their expected type
        query.addAll(client.makeParam('post', (Boolean) params.get('post')));
        query.addAll(client.makeParam('apply', (Boolean) params.get('apply')));
        query.addAll(client.makeParam('delete', (Boolean) params.get('r_delete')));
        query.addAll(client.makeParam('action', (String) params.get('action')));
        query.addAll(client.makeParam('$location', (String) params.get('location')));
        query.addAll(client.makeParam('propertylist', (List<String>) params.get('propertylist'), 'csv'));
        query.addAll(client.makeParams('supportedLocales', (List<String>) params.get('supportedLocales')));
        query.addAll(client.makeParams('Localizable Properties', (List<String>) params.get('localizableProperties')));

        List<OAS.Param> form = new List<OAS.Param>();

        return (OASGuideLocalizationServiceInfo) client.invoke(
            'POST', '/system/console/configMgr/Guide Localization Service', '',
            query, form,
            new Map<String, Object>(),
            new Map<String, Object>(),
            new List<String>{ 'application/json', 'text/plain' },
            new List<String>(),
            new List<String> { 'aemAuth' },
            OASGuideLocalizationServiceInfo.class
        );
    }
    /**
     * 
     * 
     * @param post  (optional)
     * @param apply  (optional)
     * @param r_delete  (optional)
     * @param action  (optional)
     * @param location  (optional)
     * @param propertylist  (optional)
     * @param priority  (optional)
     * @return OASMessagingUserComponentFactoryInfo
     * @throws OAS.ApiException if fails to make API call
     */
    public OASMessagingUserComponentFactoryInfo messagingUserComponentFactory(Map<String, Object> params) {
        List<OAS.Param> query = new List<OAS.Param>();

        // cast query params to verify their expected type
        query.addAll(client.makeParam('post', (Boolean) params.get('post')));
        query.addAll(client.makeParam('apply', (Boolean) params.get('apply')));
        query.addAll(client.makeParam('delete', (Boolean) params.get('r_delete')));
        query.addAll(client.makeParam('action', (String) params.get('action')));
        query.addAll(client.makeParam('$location', (String) params.get('location')));
        query.addAll(client.makeParam('propertylist', (List<String>) params.get('propertylist'), 'csv'));
        query.addAll(client.makeParam('priority', (Integer) params.get('priority')));

        List<OAS.Param> form = new List<OAS.Param>();

        return (OASMessagingUserComponentFactoryInfo) client.invoke(
            'POST', '/system/console/configMgr/MessagingUserComponentFactory', '',
            query, form,
            new Map<String, Object>(),
            new Map<String, Object>(),
            new List<String>{ 'application/json', 'text/plain' },
            new List<String>(),
            new List<String> { 'aemAuth' },
            OASMessagingUserComponentFactoryInfo.class
        );
    }
    /**
     * 
     * 
     * @param post  (optional)
     * @param apply  (optional)
     * @param r_delete  (optional)
     * @param action  (optional)
     * @param location  (optional)
     * @param propertylist  (optional)
     * @param attributeChangeNotificationEnabled  (optional)
     * @return OASOrgApacheAriesJmxFrameworkStateCo
     * @throws OAS.ApiException if fails to make API call
     */
    public OASOrgApacheAriesJmxFrameworkStateCo orgApacheAriesJmxFrameworkStateConfig(Map<String, Object> params) {
        List<OAS.Param> query = new List<OAS.Param>();

        // cast query params to verify their expected type
        query.addAll(client.makeParam('post', (Boolean) params.get('post')));
        query.addAll(client.makeParam('apply', (Boolean) params.get('apply')));
        query.addAll(client.makeParam('delete', (Boolean) params.get('r_delete')));
        query.addAll(client.makeParam('action', (String) params.get('action')));
        query.addAll(client.makeParam('$location', (String) params.get('location')));
        query.addAll(client.makeParam('propertylist', (List<String>) params.get('propertylist'), 'csv'));
        query.addAll(client.makeParam('attributeChangeNotificationEnabled', (Boolean) params.get('attributeChangeNotificationEnabled')));

        List<OAS.Param> form = new List<OAS.Param>();

        return (OASOrgApacheAriesJmxFrameworkStateCo) client.invoke(
            'POST', '/system/console/configMgr/org.apache.aries.jmx.framework.StateConfig', '',
            query, form,
            new Map<String, Object>(),
            new Map<String, Object>(),
            new List<String>{ 'application/json', 'text/plain' },
            new List<String>(),
            new List<String> { 'aemAuth' },
            OASOrgApacheAriesJmxFrameworkStateCo.class
        );
    }
    /**
     * 
     * 
     * @param post  (optional)
     * @param apply  (optional)
     * @param r_delete  (optional)
     * @param action  (optional)
     * @param location  (optional)
     * @param propertylist  (optional)
     * @param orgApacheFelixEventadminThreadPoolSize  (optional)
     * @param orgApacheFelixEventadminAsyncToSyncThreadRatio  (optional)
     * @param orgApacheFelixEventadminTimeout  (optional)
     * @param orgApacheFelixEventadminRequireTopic  (optional)
     * @param orgApacheFelixEventadminIgnoreTimeout  (optional)
     * @param orgApacheFelixEventadminIgnoreTopic  (optional)
     * @return OASOrgApacheFelixEventadminImplEvent
     * @throws OAS.ApiException if fails to make API call
     */
    public OASOrgApacheFelixEventadminImplEvent orgApacheFelixEventadminImplEventAdmin(Map<String, Object> params) {
        List<OAS.Param> query = new List<OAS.Param>();

        // cast query params to verify their expected type
        query.addAll(client.makeParam('post', (Boolean) params.get('post')));
        query.addAll(client.makeParam('apply', (Boolean) params.get('apply')));
        query.addAll(client.makeParam('delete', (Boolean) params.get('r_delete')));
        query.addAll(client.makeParam('action', (String) params.get('action')));
        query.addAll(client.makeParam('$location', (String) params.get('location')));
        query.addAll(client.makeParam('propertylist', (List<String>) params.get('propertylist'), 'csv'));
        query.addAll(client.makeParam('org.apache.felix.eventadmin.ThreadPoolSize', (Integer) params.get('orgApacheFelixEventadminThreadPoolSize')));
        query.addAll(client.makeParam('org.apache.felix.eventadmin.AsyncToSyncThreadRatio', (Double) params.get('orgApacheFelixEventadminAsyncToSyncThreadRatio')));
        query.addAll(client.makeParam('org.apache.felix.eventadmin.Timeout', (Integer) params.get('orgApacheFelixEventadminTimeout')));
        query.addAll(client.makeParam('org.apache.felix.eventadmin.RequireTopic', (Boolean) params.get('orgApacheFelixEventadminRequireTopic')));
        query.addAll(client.makeParams('org.apache.felix.eventadmin.IgnoreTimeout', (List<String>) params.get('orgApacheFelixEventadminIgnoreTimeout')));
        query.addAll(client.makeParams('org.apache.felix.eventadmin.IgnoreTopic', (List<String>) params.get('orgApacheFelixEventadminIgnoreTopic')));

        List<OAS.Param> form = new List<OAS.Param>();

        return (OASOrgApacheFelixEventadminImplEvent) client.invoke(
            'POST', '/system/console/configMgr/org.apache.felix.eventadmin.impl.EventAdmin', '',
            query, form,
            new Map<String, Object>(),
            new Map<String, Object>(),
            new List<String>{ 'application/json', 'text/plain' },
            new List<String>(),
            new List<String> { 'aemAuth' },
            OASOrgApacheFelixEventadminImplEvent.class
        );
    }
    /**
     * 
     * 
     * @param post  (optional)
     * @param apply  (optional)
     * @param r_delete  (optional)
     * @param action  (optional)
     * @param location  (optional)
     * @param propertylist  (optional)
     * @param orgApacheFelixHttpHost  (optional)
     * @param orgApacheFelixHttpEnable  (optional)
     * @param orgOsgiServiceHttpPort  (optional)
     * @param orgApacheFelixHttpTimeout  (optional)
     * @param orgApacheFelixHttpsEnable  (optional)
     * @param orgOsgiServiceHttpPortSecure  (optional)
     * @param orgApacheFelixHttpsKeystore  (optional)
     * @param orgApacheFelixHttpsKeystorePassword  (optional)
     * @param orgApacheFelixHttpsKeystoreKeyPassword  (optional)
     * @param orgApacheFelixHttpsTruststore  (optional)
     * @param orgApacheFelixHttpsTruststorePassword  (optional)
     * @param orgApacheFelixHttpsClientcertificate  (optional)
     * @param orgApacheFelixHttpContextPath  (optional)
     * @param orgApacheFelixHttpMbeans  (optional)
     * @param orgApacheFelixHttpSessionTimeout  (optional)
     * @param orgApacheFelixHttpJettyThreadpoolMax  (optional)
     * @param orgApacheFelixHttpJettyAcceptors  (optional)
     * @param orgApacheFelixHttpJettySelectors  (optional)
     * @param orgApacheFelixHttpJettyHeaderBufferSize  (optional)
     * @param orgApacheFelixHttpJettyRequestBufferSize  (optional)
     * @param orgApacheFelixHttpJettyResponseBufferSize  (optional)
     * @param orgApacheFelixHttpJettyMaxFormSize  (optional)
     * @param orgApacheFelixHttpPathExclusions  (optional)
     * @param orgApacheFelixHttpsJettyCiphersuitesExcluded  (optional)
     * @param orgApacheFelixHttpsJettyCiphersuitesIncluded  (optional)
     * @param orgApacheFelixHttpJettySendServerHeader  (optional)
     * @param orgApacheFelixHttpsJettyProtocolsIncluded  (optional)
     * @param orgApacheFelixHttpsJettyProtocolsExcluded  (optional)
     * @param orgApacheFelixProxyLoadBalancerConnectionEnable  (optional)
     * @param orgApacheFelixHttpsJettyRenegotiateAllowed  (optional)
     * @param orgApacheFelixHttpsJettySessionCookieHttpOnly  (optional)
     * @param orgApacheFelixHttpsJettySessionCookieSecure  (optional)
     * @param orgEclipseJettyServletSessionIdPathParameterName  (optional)
     * @param orgEclipseJettyServletCheckingRemoteSessionIdEncoding  (optional)
     * @param orgEclipseJettyServletSessionCookie  (optional)
     * @param orgEclipseJettyServletSessionDomain  (optional)
     * @param orgEclipseJettyServletSessionPath  (optional)
     * @param orgEclipseJettyServletMaxAge  (optional)
     * @param orgApacheFelixHttpName  (optional)
     * @param orgApacheFelixJettyGziphandlerEnable  (optional)
     * @param orgApacheFelixJettyGzipMinGzipSize  (optional)
     * @param orgApacheFelixJettyGzipCompressionLevel  (optional)
     * @param orgApacheFelixJettyGzipInflateBufferSize  (optional)
     * @param orgApacheFelixJettyGzipSyncFlush  (optional)
     * @param orgApacheFelixJettyGzipExcludedUserAgents  (optional)
     * @param orgApacheFelixJettyGzipIncludedMethods  (optional)
     * @param orgApacheFelixJettyGzipExcludedMethods  (optional)
     * @param orgApacheFelixJettyGzipIncludedPaths  (optional)
     * @param orgApacheFelixJettyGzipExcludedPaths  (optional)
     * @param orgApacheFelixJettyGzipIncludedMimeTypes  (optional)
     * @param orgApacheFelixJettyGzipExcludedMimeTypes  (optional)
     * @param orgApacheFelixHttpSessionInvalidate  (optional)
     * @param orgApacheFelixHttpSessionUniqueid  (optional)
     * @return OASOrgApacheFelixHttpInfo
     * @throws OAS.ApiException if fails to make API call
     */
    public OASOrgApacheFelixHttpInfo orgApacheFelixHttp(Map<String, Object> params) {
        List<OAS.Param> query = new List<OAS.Param>();

        // cast query params to verify their expected type
        query.addAll(client.makeParam('post', (Boolean) params.get('post')));
        query.addAll(client.makeParam('apply', (Boolean) params.get('apply')));
        query.addAll(client.makeParam('delete', (Boolean) params.get('r_delete')));
        query.addAll(client.makeParam('action', (String) params.get('action')));
        query.addAll(client.makeParam('$location', (String) params.get('location')));
        query.addAll(client.makeParam('propertylist', (List<String>) params.get('propertylist'), 'csv'));
        query.addAll(client.makeParam('org.apache.felix.http.host', (String) params.get('orgApacheFelixHttpHost')));
        query.addAll(client.makeParam('org.apache.felix.http.enable', (Boolean) params.get('orgApacheFelixHttpEnable')));
        query.addAll(client.makeParam('org.osgi.service.http.port', (Integer) params.get('orgOsgiServiceHttpPort')));
        query.addAll(client.makeParam('org.apache.felix.http.timeout', (Integer) params.get('orgApacheFelixHttpTimeout')));
        query.addAll(client.makeParam('org.apache.felix.https.enable', (Boolean) params.get('orgApacheFelixHttpsEnable')));
        query.addAll(client.makeParam('org.osgi.service.http.port.secure', (Integer) params.get('orgOsgiServiceHttpPortSecure')));
        query.addAll(client.makeParam('org.apache.felix.https.keystore', (String) params.get('orgApacheFelixHttpsKeystore')));
        query.addAll(client.makeParam('org.apache.felix.https.keystore.password', (String) params.get('orgApacheFelixHttpsKeystorePassword')));
        query.addAll(client.makeParam('org.apache.felix.https.keystore.key.password', (String) params.get('orgApacheFelixHttpsKeystoreKeyPassword')));
        query.addAll(client.makeParam('org.apache.felix.https.truststore', (String) params.get('orgApacheFelixHttpsTruststore')));
        query.addAll(client.makeParam('org.apache.felix.https.truststore.password', (String) params.get('orgApacheFelixHttpsTruststorePassword')));
        query.addAll(client.makeParam('org.apache.felix.https.clientcertificate', (String) params.get('orgApacheFelixHttpsClientcertificate')));
        query.addAll(client.makeParam('org.apache.felix.http.context_path', (String) params.get('orgApacheFelixHttpContextPath')));
        query.addAll(client.makeParam('org.apache.felix.http.mbeans', (Boolean) params.get('orgApacheFelixHttpMbeans')));
        query.addAll(client.makeParam('org.apache.felix.http.session.timeout', (Integer) params.get('orgApacheFelixHttpSessionTimeout')));
        query.addAll(client.makeParam('org.apache.felix.http.jetty.threadpool.max', (Integer) params.get('orgApacheFelixHttpJettyThreadpoolMax')));
        query.addAll(client.makeParam('org.apache.felix.http.jetty.acceptors', (Integer) params.get('orgApacheFelixHttpJettyAcceptors')));
        query.addAll(client.makeParam('org.apache.felix.http.jetty.selectors', (Integer) params.get('orgApacheFelixHttpJettySelectors')));
        query.addAll(client.makeParam('org.apache.felix.http.jetty.headerBufferSize', (Integer) params.get('orgApacheFelixHttpJettyHeaderBufferSize')));
        query.addAll(client.makeParam('org.apache.felix.http.jetty.requestBufferSize', (Integer) params.get('orgApacheFelixHttpJettyRequestBufferSize')));
        query.addAll(client.makeParam('org.apache.felix.http.jetty.responseBufferSize', (Integer) params.get('orgApacheFelixHttpJettyResponseBufferSize')));
        query.addAll(client.makeParam('org.apache.felix.http.jetty.maxFormSize', (Integer) params.get('orgApacheFelixHttpJettyMaxFormSize')));
        query.addAll(client.makeParams('org.apache.felix.http.path_exclusions', (List<String>) params.get('orgApacheFelixHttpPathExclusions')));
        query.addAll(client.makeParams('org.apache.felix.https.jetty.ciphersuites.excluded', (List<String>) params.get('orgApacheFelixHttpsJettyCiphersuitesExcluded')));
        query.addAll(client.makeParams('org.apache.felix.https.jetty.ciphersuites.included', (List<String>) params.get('orgApacheFelixHttpsJettyCiphersuitesIncluded')));
        query.addAll(client.makeParam('org.apache.felix.http.jetty.sendServerHeader', (Boolean) params.get('orgApacheFelixHttpJettySendServerHeader')));
        query.addAll(client.makeParams('org.apache.felix.https.jetty.protocols.included', (List<String>) params.get('orgApacheFelixHttpsJettyProtocolsIncluded')));
        query.addAll(client.makeParams('org.apache.felix.https.jetty.protocols.excluded', (List<String>) params.get('orgApacheFelixHttpsJettyProtocolsExcluded')));
        query.addAll(client.makeParam('org.apache.felix.proxy.load.balancer.connection.enable', (Boolean) params.get('orgApacheFelixProxyLoadBalancerConnectionEnable')));
        query.addAll(client.makeParam('org.apache.felix.https.jetty.renegotiateAllowed', (Boolean) params.get('orgApacheFelixHttpsJettyRenegotiateAllowed')));
        query.addAll(client.makeParam('org.apache.felix.https.jetty.session.cookie.httpOnly', (Boolean) params.get('orgApacheFelixHttpsJettySessionCookieHttpOnly')));
        query.addAll(client.makeParam('org.apache.felix.https.jetty.session.cookie.secure', (Boolean) params.get('orgApacheFelixHttpsJettySessionCookieSecure')));
        query.addAll(client.makeParam('org.eclipse.jetty.servlet.SessionIdPathParameterName', (String) params.get('orgEclipseJettyServletSessionIdPathParameterName')));
        query.addAll(client.makeParam('org.eclipse.jetty.servlet.CheckingRemoteSessionIdEncoding', (Boolean) params.get('orgEclipseJettyServletCheckingRemoteSessionIdEncoding')));
        query.addAll(client.makeParam('org.eclipse.jetty.servlet.SessionCookie', (String) params.get('orgEclipseJettyServletSessionCookie')));
        query.addAll(client.makeParam('org.eclipse.jetty.servlet.SessionDomain', (String) params.get('orgEclipseJettyServletSessionDomain')));
        query.addAll(client.makeParam('org.eclipse.jetty.servlet.SessionPath', (String) params.get('orgEclipseJettyServletSessionPath')));
        query.addAll(client.makeParam('org.eclipse.jetty.servlet.MaxAge', (Integer) params.get('orgEclipseJettyServletMaxAge')));
        query.addAll(client.makeParam('org.apache.felix.http.name', (String) params.get('orgApacheFelixHttpName')));
        query.addAll(client.makeParam('org.apache.felix.jetty.gziphandler.enable', (Boolean) params.get('orgApacheFelixJettyGziphandlerEnable')));
        query.addAll(client.makeParam('org.apache.felix.jetty.gzip.minGzipSize', (Integer) params.get('orgApacheFelixJettyGzipMinGzipSize')));
        query.addAll(client.makeParam('org.apache.felix.jetty.gzip.compressionLevel', (Integer) params.get('orgApacheFelixJettyGzipCompressionLevel')));
        query.addAll(client.makeParam('org.apache.felix.jetty.gzip.inflateBufferSize', (Integer) params.get('orgApacheFelixJettyGzipInflateBufferSize')));
        query.addAll(client.makeParam('org.apache.felix.jetty.gzip.syncFlush', (Boolean) params.get('orgApacheFelixJettyGzipSyncFlush')));
        query.addAll(client.makeParams('org.apache.felix.jetty.gzip.excludedUserAgents', (List<String>) params.get('orgApacheFelixJettyGzipExcludedUserAgents')));
        query.addAll(client.makeParams('org.apache.felix.jetty.gzip.includedMethods', (List<String>) params.get('orgApacheFelixJettyGzipIncludedMethods')));
        query.addAll(client.makeParams('org.apache.felix.jetty.gzip.excludedMethods', (List<String>) params.get('orgApacheFelixJettyGzipExcludedMethods')));
        query.addAll(client.makeParams('org.apache.felix.jetty.gzip.includedPaths', (List<String>) params.get('orgApacheFelixJettyGzipIncludedPaths')));
        query.addAll(client.makeParams('org.apache.felix.jetty.gzip.excludedPaths', (List<String>) params.get('orgApacheFelixJettyGzipExcludedPaths')));
        query.addAll(client.makeParams('org.apache.felix.jetty.gzip.includedMimeTypes', (List<String>) params.get('orgApacheFelixJettyGzipIncludedMimeTypes')));
        query.addAll(client.makeParams('org.apache.felix.jetty.gzip.excludedMimeTypes', (List<String>) params.get('orgApacheFelixJettyGzipExcludedMimeTypes')));
        query.addAll(client.makeParam('org.apache.felix.http.session.invalidate', (Boolean) params.get('orgApacheFelixHttpSessionInvalidate')));
        query.addAll(client.makeParam('org.apache.felix.http.session.uniqueid', (Boolean) params.get('orgApacheFelixHttpSessionUniqueid')));

        List<OAS.Param> form = new List<OAS.Param>();

        return (OASOrgApacheFelixHttpInfo) client.invoke(
            'POST', '/system/console/configMgr/org.apache.felix.http', '',
            query, form,
            new Map<String, Object>(),
            new Map<String, Object>(),
            new List<String>{ 'application/json', 'text/plain' },
            new List<String>(),
            new List<String> { 'aemAuth' },
            OASOrgApacheFelixHttpInfo.class
        );
    }
    /**
     * 
     * 
     * @param post  (optional)
     * @param apply  (optional)
     * @param r_delete  (optional)
     * @param action  (optional)
     * @param location  (optional)
     * @param propertylist  (optional)
     * @param sslForwardHeader  (optional)
     * @param sslForwardValue  (optional)
     * @param sslForwardCertHeader  (optional)
     * @param rewriteAbsoluteUrls  (optional)
     * @return OASOrgApacheFelixHttpSslfilterSslFil
     * @throws OAS.ApiException if fails to make API call
     */
    public OASOrgApacheFelixHttpSslfilterSslFil orgApacheFelixHttpSslfilterSslFilter(Map<String, Object> params) {
        List<OAS.Param> query = new List<OAS.Param>();

        // cast query params to verify their expected type
        query.addAll(client.makeParam('post', (Boolean) params.get('post')));
        query.addAll(client.makeParam('apply', (Boolean) params.get('apply')));
        query.addAll(client.makeParam('delete', (Boolean) params.get('r_delete')));
        query.addAll(client.makeParam('action', (String) params.get('action')));
        query.addAll(client.makeParam('$location', (String) params.get('location')));
        query.addAll(client.makeParam('propertylist', (List<String>) params.get('propertylist'), 'csv'));
        query.addAll(client.makeParam('ssl-forward.header', (String) params.get('sslForwardHeader')));
        query.addAll(client.makeParam('ssl-forward.value', (String) params.get('sslForwardValue')));
        query.addAll(client.makeParam('ssl-forward-cert.header', (String) params.get('sslForwardCertHeader')));
        query.addAll(client.makeParam('rewrite.absolute.urls', (Boolean) params.get('rewriteAbsoluteUrls')));

        List<OAS.Param> form = new List<OAS.Param>();

        return (OASOrgApacheFelixHttpSslfilterSslFil) client.invoke(
            'POST', '/system/console/configMgr/org.apache.felix.http.sslfilter.SslFilter', '',
            query, form,
            new Map<String, Object>(),
            new Map<String, Object>(),
            new List<String>{ 'application/json', 'text/plain' },
            new List<String>(),
            new List<String> { 'aemAuth' },
            OASOrgApacheFelixHttpSslfilterSslFil.class
        );
    }
    /**
     * 
     * 
     * @param post  (optional)
     * @param apply  (optional)
     * @param r_delete  (optional)
     * @param action  (optional)
     * @param location  (optional)
     * @param propertylist  (optional)
     * @param jaasControlFlag  (optional)
     * @param jaasRanking  (optional)
     * @param jaasRealmName  (optional)
     * @param jaasClassname  (optional)
     * @param jaasOptions  (optional)
     * @return OASOrgApacheFelixJaasConfigurationFa
     * @throws OAS.ApiException if fails to make API call
     */
    public OASOrgApacheFelixJaasConfigurationFa orgApacheFelixJaasConfigurationFactory(Map<String, Object> params) {
        List<OAS.Param> query = new List<OAS.Param>();

        // cast query params to verify their expected type
        query.addAll(client.makeParam('post', (Boolean) params.get('post')));
        query.addAll(client.makeParam('apply', (Boolean) params.get('apply')));
        query.addAll(client.makeParam('delete', (Boolean) params.get('r_delete')));
        query.addAll(client.makeParam('action', (String) params.get('action')));
        query.addAll(client.makeParam('$location', (String) params.get('location')));
        query.addAll(client.makeParam('propertylist', (List<String>) params.get('propertylist'), 'csv'));
        query.addAll(client.makeParam('jaas.controlFlag', (String) params.get('jaasControlFlag')));
        query.addAll(client.makeParam('jaas.ranking', (Integer) params.get('jaasRanking')));
        query.addAll(client.makeParam('jaas.realmName', (String) params.get('jaasRealmName')));
        query.addAll(client.makeParam('jaas.classname', (String) params.get('jaasClassname')));
        query.addAll(client.makeParams('jaas.options', (List<String>) params.get('jaasOptions')));

        List<OAS.Param> form = new List<OAS.Param>();

        return (OASOrgApacheFelixJaasConfigurationFa) client.invoke(
            'POST', '/system/console/configMgr/org.apache.felix.jaas.Configuration.factory', '',
            query, form,
            new Map<String, Object>(),
            new Map<String, Object>(),
            new List<String>{ 'application/json', 'text/plain' },
            new List<String>(),
            new List<String> { 'aemAuth' },
            OASOrgApacheFelixJaasConfigurationFa.class
        );
    }
    /**
     * 
     * 
     * @param post  (optional)
     * @param apply  (optional)
     * @param r_delete  (optional)
     * @param action  (optional)
     * @param location  (optional)
     * @param propertylist  (optional)
     * @param jaasDefaultRealmName  (optional)
     * @param jaasConfigProviderName  (optional)
     * @param jaasGlobalConfigPolicy  (optional)
     * @return OASOrgApacheFelixJaasConfigurationSp
     * @throws OAS.ApiException if fails to make API call
     */
    public OASOrgApacheFelixJaasConfigurationSp orgApacheFelixJaasConfigurationSpi(Map<String, Object> params) {
        List<OAS.Param> query = new List<OAS.Param>();

        // cast query params to verify their expected type
        query.addAll(client.makeParam('post', (Boolean) params.get('post')));
        query.addAll(client.makeParam('apply', (Boolean) params.get('apply')));
        query.addAll(client.makeParam('delete', (Boolean) params.get('r_delete')));
        query.addAll(client.makeParam('action', (String) params.get('action')));
        query.addAll(client.makeParam('$location', (String) params.get('location')));
        query.addAll(client.makeParam('propertylist', (List<String>) params.get('propertylist'), 'csv'));
        query.addAll(client.makeParam('jaas.defaultRealmName', (String) params.get('jaasDefaultRealmName')));
        query.addAll(client.makeParam('jaas.configProviderName', (String) params.get('jaasConfigProviderName')));
        query.addAll(client.makeParam('jaas.globalConfigPolicy', (String) params.get('jaasGlobalConfigPolicy')));

        List<OAS.Param> form = new List<OAS.Param>();

        return (OASOrgApacheFelixJaasConfigurationSp) client.invoke(
            'POST', '/system/console/configMgr/org.apache.felix.jaas.ConfigurationSpi', '',
            query, form,
            new Map<String, Object>(),
            new Map<String, Object>(),
            new List<String>{ 'application/json', 'text/plain' },
            new List<String>(),
            new List<String> { 'aemAuth' },
            OASOrgApacheFelixJaasConfigurationSp.class
        );
    }
    /**
     * 
     * 
     * @param post  (optional)
     * @param apply  (optional)
     * @param r_delete  (optional)
     * @param action  (optional)
     * @param location  (optional)
     * @param propertylist  (optional)
     * @param dsLoglevel  (optional)
     * @param dsFactoryEnabled  (optional)
     * @param dsDelayedKeepInstances  (optional)
     * @param dsLockTimeoutMilliseconds  (optional)
     * @param dsStopTimeoutMilliseconds  (optional)
     * @param dsGlobalExtender  (optional)
     * @return OASOrgApacheFelixScrScrServiceInfo
     * @throws OAS.ApiException if fails to make API call
     */
    public OASOrgApacheFelixScrScrServiceInfo orgApacheFelixScrScrService(Map<String, Object> params) {
        List<OAS.Param> query = new List<OAS.Param>();

        // cast query params to verify their expected type
        query.addAll(client.makeParam('post', (Boolean) params.get('post')));
        query.addAll(client.makeParam('apply', (Boolean) params.get('apply')));
        query.addAll(client.makeParam('delete', (Boolean) params.get('r_delete')));
        query.addAll(client.makeParam('action', (String) params.get('action')));
        query.addAll(client.makeParam('$location', (String) params.get('location')));
        query.addAll(client.makeParam('propertylist', (List<String>) params.get('propertylist'), 'csv'));
        query.addAll(client.makeParam('ds.loglevel', (Integer) params.get('dsLoglevel')));
        query.addAll(client.makeParam('ds.factory.enabled', (Boolean) params.get('dsFactoryEnabled')));
        query.addAll(client.makeParam('ds.delayed.keepInstances', (Boolean) params.get('dsDelayedKeepInstances')));
        query.addAll(client.makeParam('ds.lock.timeout.milliseconds', (Integer) params.get('dsLockTimeoutMilliseconds')));
        query.addAll(client.makeParam('ds.stop.timeout.milliseconds', (Integer) params.get('dsStopTimeoutMilliseconds')));
        query.addAll(client.makeParam('ds.global.extender', (Boolean) params.get('dsGlobalExtender')));

        List<OAS.Param> form = new List<OAS.Param>();

        return (OASOrgApacheFelixScrScrServiceInfo) client.invoke(
            'POST', '/system/console/configMgr/org.apache.felix.scr.ScrService', '',
            query, form,
            new Map<String, Object>(),
            new Map<String, Object>(),
            new List<String>{ 'application/json', 'text/plain' },
            new List<String>(),
            new List<String> { 'aemAuth' },
            OASOrgApacheFelixScrScrServiceInfo.class
        );
    }
    /**
     * 
     * 
     * @param post  (optional)
     * @param apply  (optional)
     * @param r_delete  (optional)
     * @param action  (optional)
     * @param location  (optional)
     * @param propertylist  (optional)
     * @param componentsList  (optional)
     * @param r_type  (optional)
     * @return OASOrgApacheFelixSystemreadyImplComp
     * @throws OAS.ApiException if fails to make API call
     */
    public OASOrgApacheFelixSystemreadyImplComp orgApacheFelixSystemreadyImplComponentsCheck(Map<String, Object> params) {
        List<OAS.Param> query = new List<OAS.Param>();

        // cast query params to verify their expected type
        query.addAll(client.makeParam('post', (Boolean) params.get('post')));
        query.addAll(client.makeParam('apply', (Boolean) params.get('apply')));
        query.addAll(client.makeParam('delete', (Boolean) params.get('r_delete')));
        query.addAll(client.makeParam('action', (String) params.get('action')));
        query.addAll(client.makeParam('$location', (String) params.get('location')));
        query.addAll(client.makeParam('propertylist', (List<String>) params.get('propertylist'), 'csv'));
        query.addAll(client.makeParams('components.list', (List<String>) params.get('componentsList')));
        query.addAll(client.makeParam('type', (String) params.get('r_type')));

        List<OAS.Param> form = new List<OAS.Param>();

        return (OASOrgApacheFelixSystemreadyImplComp) client.invoke(
            'POST', '/system/console/configMgr/org.apache.felix.systemready.impl.ComponentsCheck', '',
            query, form,
            new Map<String, Object>(),
            new Map<String, Object>(),
            new List<String>{ 'application/json', 'text/plain' },
            new List<String>(),
            new List<String> { 'aemAuth' },
            OASOrgApacheFelixSystemreadyImplComp.class
        );
    }
    /**
     * 
     * 
     * @param post  (optional)
     * @param apply  (optional)
     * @param r_delete  (optional)
     * @param action  (optional)
     * @param location  (optional)
     * @param propertylist  (optional)
     * @param timeout  (optional)
     * @param targetStartLevel  (optional)
     * @param targetStartLevelPropName  (optional)
     * @param r_type  (optional)
     * @return OASOrgApacheFelixSystemreadyImplFram
     * @throws OAS.ApiException if fails to make API call
     */
    public OASOrgApacheFelixSystemreadyImplFram orgApacheFelixSystemreadyImplFrameworkStartCheck(Map<String, Object> params) {
        List<OAS.Param> query = new List<OAS.Param>();

        // cast query params to verify their expected type
        query.addAll(client.makeParam('post', (Boolean) params.get('post')));
        query.addAll(client.makeParam('apply', (Boolean) params.get('apply')));
        query.addAll(client.makeParam('delete', (Boolean) params.get('r_delete')));
        query.addAll(client.makeParam('action', (String) params.get('action')));
        query.addAll(client.makeParam('$location', (String) params.get('location')));
        query.addAll(client.makeParam('propertylist', (List<String>) params.get('propertylist'), 'csv'));
        query.addAll(client.makeParam('timeout', (Integer) params.get('timeout')));
        query.addAll(client.makeParam('target.start.level', (Integer) params.get('targetStartLevel')));
        query.addAll(client.makeParam('target.start.level.prop.name', (String) params.get('targetStartLevelPropName')));
        query.addAll(client.makeParam('type', (String) params.get('r_type')));

        List<OAS.Param> form = new List<OAS.Param>();

        return (OASOrgApacheFelixSystemreadyImplFram) client.invoke(
            'POST', '/system/console/configMgr/org.apache.felix.systemready.impl.FrameworkStartCheck', '',
            query, form,
            new Map<String, Object>(),
            new Map<String, Object>(),
            new List<String>{ 'application/json', 'text/plain' },
            new List<String>(),
            new List<String> { 'aemAuth' },
            OASOrgApacheFelixSystemreadyImplFram.class
        );
    }
    /**
     * 
     * 
     * @param post  (optional)
     * @param apply  (optional)
     * @param r_delete  (optional)
     * @param action  (optional)
     * @param location  (optional)
     * @param propertylist  (optional)
     * @param servicesList  (optional)
     * @param r_type  (optional)
     * @return OASOrgApacheFelixSystemreadyImplServ
     * @throws OAS.ApiException if fails to make API call
     */
    public OASOrgApacheFelixSystemreadyImplServ orgApacheFelixSystemreadyImplServicesCheck(Map<String, Object> params) {
        List<OAS.Param> query = new List<OAS.Param>();

        // cast query params to verify their expected type
        query.addAll(client.makeParam('post', (Boolean) params.get('post')));
        query.addAll(client.makeParam('apply', (Boolean) params.get('apply')));
        query.addAll(client.makeParam('delete', (Boolean) params.get('r_delete')));
        query.addAll(client.makeParam('action', (String) params.get('action')));
        query.addAll(client.makeParam('$location', (String) params.get('location')));
        query.addAll(client.makeParam('propertylist', (List<String>) params.get('propertylist'), 'csv'));
        query.addAll(client.makeParams('services.list', (List<String>) params.get('servicesList')));
        query.addAll(client.makeParam('type', (String) params.get('r_type')));

        List<OAS.Param> form = new List<OAS.Param>();

        return (OASOrgApacheFelixSystemreadyImplServ) client.invoke(
            'POST', '/system/console/configMgr/org.apache.felix.systemready.impl.ServicesCheck', '',
            query, form,
            new Map<String, Object>(),
            new Map<String, Object>(),
            new List<String>{ 'application/json', 'text/plain' },
            new List<String>(),
            new List<String> { 'aemAuth' },
            OASOrgApacheFelixSystemreadyImplServ.class
        );
    }
    /**
     * 
     * 
     * @param post  (optional)
     * @param apply  (optional)
     * @param r_delete  (optional)
     * @param action  (optional)
     * @param location  (optional)
     * @param propertylist  (optional)
     * @param osgiHttpWhiteboardServletPattern  (optional)
     * @param osgiHttpWhiteboardContextSelect  (optional)
     * @return OASOrgApacheFelixSystemreadyImplServ
     * @throws OAS.ApiException if fails to make API call
     */
    public OASOrgApacheFelixSystemreadyImplServ orgApacheFelixSystemreadyImplServletSystemAliveServlet(Map<String, Object> params) {
        List<OAS.Param> query = new List<OAS.Param>();

        // cast query params to verify their expected type
        query.addAll(client.makeParam('post', (Boolean) params.get('post')));
        query.addAll(client.makeParam('apply', (Boolean) params.get('apply')));
        query.addAll(client.makeParam('delete', (Boolean) params.get('r_delete')));
        query.addAll(client.makeParam('action', (String) params.get('action')));
        query.addAll(client.makeParam('$location', (String) params.get('location')));
        query.addAll(client.makeParam('propertylist', (List<String>) params.get('propertylist'), 'csv'));
        query.addAll(client.makeParam('osgi.http.whiteboard.servlet.pattern', (String) params.get('osgiHttpWhiteboardServletPattern')));
        query.addAll(client.makeParam('osgi.http.whiteboard.context.select', (String) params.get('osgiHttpWhiteboardContextSelect')));

        List<OAS.Param> form = new List<OAS.Param>();

        return (OASOrgApacheFelixSystemreadyImplServ) client.invoke(
            'POST', '/system/console/configMgr/org.apache.felix.systemready.impl.servlet.SystemAliveServlet', '',
            query, form,
            new Map<String, Object>(),
            new Map<String, Object>(),
            new List<String>{ 'application/json', 'text/plain' },
            new List<String>(),
            new List<String> { 'aemAuth' },
            OASOrgApacheFelixSystemreadyImplServ.class
        );
    }
    /**
     * 
     * 
     * @param post  (optional)
     * @param apply  (optional)
     * @param r_delete  (optional)
     * @param action  (optional)
     * @param location  (optional)
     * @param propertylist  (optional)
     * @param osgiHttpWhiteboardServletPattern  (optional)
     * @param osgiHttpWhiteboardContextSelect  (optional)
     * @return OASOrgApacheFelixSystemreadyImplServ
     * @throws OAS.ApiException if fails to make API call
     */
    public OASOrgApacheFelixSystemreadyImplServ orgApacheFelixSystemreadyImplServletSystemReadyServlet(Map<String, Object> params) {
        List<OAS.Param> query = new List<OAS.Param>();

        // cast query params to verify their expected type
        query.addAll(client.makeParam('post', (Boolean) params.get('post')));
        query.addAll(client.makeParam('apply', (Boolean) params.get('apply')));
        query.addAll(client.makeParam('delete', (Boolean) params.get('r_delete')));
        query.addAll(client.makeParam('action', (String) params.get('action')));
        query.addAll(client.makeParam('$location', (String) params.get('location')));
        query.addAll(client.makeParam('propertylist', (List<String>) params.get('propertylist'), 'csv'));
        query.addAll(client.makeParam('osgi.http.whiteboard.servlet.pattern', (String) params.get('osgiHttpWhiteboardServletPattern')));
        query.addAll(client.makeParam('osgi.http.whiteboard.context.select', (String) params.get('osgiHttpWhiteboardContextSelect')));

        List<OAS.Param> form = new List<OAS.Param>();

        return (OASOrgApacheFelixSystemreadyImplServ) client.invoke(
            'POST', '/system/console/configMgr/org.apache.felix.systemready.impl.servlet.SystemReadyServlet', '',
            query, form,
            new Map<String, Object>(),
            new Map<String, Object>(),
            new List<String>{ 'application/json', 'text/plain' },
            new List<String>(),
            new List<String> { 'aemAuth' },
            OASOrgApacheFelixSystemreadyImplServ.class
        );
    }
    /**
     * 
     * 
     * @param post  (optional)
     * @param apply  (optional)
     * @param r_delete  (optional)
     * @param action  (optional)
     * @param location  (optional)
     * @param propertylist  (optional)
     * @param pollInterval  (optional)
     * @return OASOrgApacheFelixSystemreadySystemRe
     * @throws OAS.ApiException if fails to make API call
     */
    public OASOrgApacheFelixSystemreadySystemRe orgApacheFelixSystemreadySystemReadyMonitor(Map<String, Object> params) {
        List<OAS.Param> query = new List<OAS.Param>();

        // cast query params to verify their expected type
        query.addAll(client.makeParam('post', (Boolean) params.get('post')));
        query.addAll(client.makeParam('apply', (Boolean) params.get('apply')));
        query.addAll(client.makeParam('delete', (Boolean) params.get('r_delete')));
        query.addAll(client.makeParam('action', (String) params.get('action')));
        query.addAll(client.makeParam('$location', (String) params.get('location')));
        query.addAll(client.makeParam('propertylist', (List<String>) params.get('propertylist'), 'csv'));
        query.addAll(client.makeParam('poll.interval', (Integer) params.get('pollInterval')));

        List<OAS.Param> form = new List<OAS.Param>();

        return (OASOrgApacheFelixSystemreadySystemRe) client.invoke(
            'POST', '/system/console/configMgr/org.apache.felix.systemready.SystemReadyMonitor', '',
            query, form,
            new Map<String, Object>(),
            new Map<String, Object>(),
            new List<String>{ 'application/json', 'text/plain' },
            new List<String>(),
            new List<String> { 'aemAuth' },
            OASOrgApacheFelixSystemreadySystemRe.class
        );
    }
    /**
     * 
     * 
     * @param post  (optional)
     * @param apply  (optional)
     * @param r_delete  (optional)
     * @param action  (optional)
     * @param location  (optional)
     * @param propertylist  (optional)
     * @param managerRoot  (optional)
     * @param httpServiceFilter  (optional)
     * @param defaultRender  (optional)
     * @param realm  (optional)
     * @param username  (optional)
     * @param password  (optional)
     * @param category  (optional)
     * @param locale  (optional)
     * @param loglevel  (optional)
     * @param plugins  (optional)
     * @return OASOrgApacheFelixWebconsoleInternalS
     * @throws OAS.ApiException if fails to make API call
     */
    public OASOrgApacheFelixWebconsoleInternalS orgApacheFelixWebconsoleInternalServletOsgiManager(Map<String, Object> params) {
        List<OAS.Param> query = new List<OAS.Param>();

        // cast query params to verify their expected type
        query.addAll(client.makeParam('post', (Boolean) params.get('post')));
        query.addAll(client.makeParam('apply', (Boolean) params.get('apply')));
        query.addAll(client.makeParam('delete', (Boolean) params.get('r_delete')));
        query.addAll(client.makeParam('action', (String) params.get('action')));
        query.addAll(client.makeParam('$location', (String) params.get('location')));
        query.addAll(client.makeParam('propertylist', (List<String>) params.get('propertylist'), 'csv'));
        query.addAll(client.makeParam('manager.root', (String) params.get('managerRoot')));
        query.addAll(client.makeParam('http.service.filter', (String) params.get('httpServiceFilter')));
        query.addAll(client.makeParam('default.render', (String) params.get('defaultRender')));
        query.addAll(client.makeParam('realm', (String) params.get('realm')));
        query.addAll(client.makeParam('username', (String) params.get('username')));
        query.addAll(client.makeParam('password', (String) params.get('password')));
        query.addAll(client.makeParam('category', (String) params.get('category')));
        query.addAll(client.makeParam('locale', (String) params.get('locale')));
        query.addAll(client.makeParam('loglevel', (Integer) params.get('loglevel')));
        query.addAll(client.makeParam('plugins', (String) params.get('plugins')));

        List<OAS.Param> form = new List<OAS.Param>();

        return (OASOrgApacheFelixWebconsoleInternalS) client.invoke(
            'POST', '/system/console/configMgr/org.apache.felix.webconsole.internal.servlet.OsgiManager', '',
            query, form,
            new Map<String, Object>(),
            new Map<String, Object>(),
            new List<String>{ 'application/json', 'text/plain' },
            new List<String>(),
            new List<String> { 'aemAuth' },
            OASOrgApacheFelixWebconsoleInternalS.class
        );
    }
    /**
     * 
     * 
     * @param post  (optional)
     * @param apply  (optional)
     * @param r_delete  (optional)
     * @param action  (optional)
     * @param location  (optional)
     * @param propertylist  (optional)
     * @param maxSize  (optional)
     * @return OASOrgApacheFelixWebconsolePluginsEv
     * @throws OAS.ApiException if fails to make API call
     */
    public OASOrgApacheFelixWebconsolePluginsEv orgApacheFelixWebconsolePluginsEventInternalPluginServlet(Map<String, Object> params) {
        List<OAS.Param> query = new List<OAS.Param>();

        // cast query params to verify their expected type
        query.addAll(client.makeParam('post', (Boolean) params.get('post')));
        query.addAll(client.makeParam('apply', (Boolean) params.get('apply')));
        query.addAll(client.makeParam('delete', (Boolean) params.get('r_delete')));
        query.addAll(client.makeParam('action', (String) params.get('action')));
        query.addAll(client.makeParam('$location', (String) params.get('location')));
        query.addAll(client.makeParam('propertylist', (List<String>) params.get('propertylist'), 'csv'));
        query.addAll(client.makeParam('max.size', (Integer) params.get('maxSize')));

        List<OAS.Param> form = new List<OAS.Param>();

        return (OASOrgApacheFelixWebconsolePluginsEv) client.invoke(
            'POST', '/system/console/configMgr/org.apache.felix.webconsole.plugins.event.internal.PluginServlet', '',
            query, form,
            new Map<String, Object>(),
            new Map<String, Object>(),
            new List<String>{ 'application/json', 'text/plain' },
            new List<String>(),
            new List<String> { 'aemAuth' },
            OASOrgApacheFelixWebconsolePluginsEv.class
        );
    }
    /**
     * 
     * 
     * @param post  (optional)
     * @param apply  (optional)
     * @param r_delete  (optional)
     * @param action  (optional)
     * @param location  (optional)
     * @param propertylist  (optional)
     * @param felixMemoryusageDumpThreshold  (optional)
     * @param felixMemoryusageDumpInterval  (optional)
     * @param felixMemoryusageDumpLocation  (optional)
     * @return OASOrgApacheFelixWebconsolePluginsMe
     * @throws OAS.ApiException if fails to make API call
     */
    public OASOrgApacheFelixWebconsolePluginsMe orgApacheFelixWebconsolePluginsMemoryusageInternalMemoryUsageCo(Map<String, Object> params) {
        List<OAS.Param> query = new List<OAS.Param>();

        // cast query params to verify their expected type
        query.addAll(client.makeParam('post', (Boolean) params.get('post')));
        query.addAll(client.makeParam('apply', (Boolean) params.get('apply')));
        query.addAll(client.makeParam('delete', (Boolean) params.get('r_delete')));
        query.addAll(client.makeParam('action', (String) params.get('action')));
        query.addAll(client.makeParam('$location', (String) params.get('location')));
        query.addAll(client.makeParam('propertylist', (List<String>) params.get('propertylist'), 'csv'));
        query.addAll(client.makeParam('felix.memoryusage.dump.threshold', (Integer) params.get('felixMemoryusageDumpThreshold')));
        query.addAll(client.makeParam('felix.memoryusage.dump.interval', (Integer) params.get('felixMemoryusageDumpInterval')));
        query.addAll(client.makeParam('felix.memoryusage.dump.location', (String) params.get('felixMemoryusageDumpLocation')));

        List<OAS.Param> form = new List<OAS.Param>();

        return (OASOrgApacheFelixWebconsolePluginsMe) client.invoke(
            'POST', '/system/console/configMgr/org.apache.felix.webconsole.plugins.memoryusage.internal.MemoryUsageConfigurator', '',
            query, form,
            new Map<String, Object>(),
            new Map<String, Object>(),
            new List<String>{ 'application/json', 'text/plain' },
            new List<String>(),
            new List<String> { 'aemAuth' },
            OASOrgApacheFelixWebconsolePluginsMe.class
        );
    }
    /**
     * 
     * 
     * @param post  (optional)
     * @param apply  (optional)
     * @param r_delete  (optional)
     * @param action  (optional)
     * @param location  (optional)
     * @param propertylist  (optional)
     * @param proxyEnabled  (optional)
     * @param proxyHost  (optional)
     * @param proxyPort  (optional)
     * @param proxyUser  (optional)
     * @param proxyPassword  (optional)
     * @param proxyExceptions  (optional)
     * @return OASOrgApacheHttpProxyconfiguratorInf
     * @throws OAS.ApiException if fails to make API call
     */
    public OASOrgApacheHttpProxyconfiguratorInf orgApacheHttpProxyconfigurator(Map<String, Object> params) {
        List<OAS.Param> query = new List<OAS.Param>();

        // cast query params to verify their expected type
        query.addAll(client.makeParam('post', (Boolean) params.get('post')));
        query.addAll(client.makeParam('apply', (Boolean) params.get('apply')));
        query.addAll(client.makeParam('delete', (Boolean) params.get('r_delete')));
        query.addAll(client.makeParam('action', (String) params.get('action')));
        query.addAll(client.makeParam('$location', (String) params.get('location')));
        query.addAll(client.makeParam('propertylist', (List<String>) params.get('propertylist'), 'csv'));
        query.addAll(client.makeParam('proxy.enabled', (Boolean) params.get('proxyEnabled')));
        query.addAll(client.makeParam('proxy.host', (String) params.get('proxyHost')));
        query.addAll(client.makeParam('proxy.port', (Integer) params.get('proxyPort')));
        query.addAll(client.makeParam('proxy.user', (String) params.get('proxyUser')));
        query.addAll(client.makeParam('proxy.password', (String) params.get('proxyPassword')));
        query.addAll(client.makeParams('proxy.exceptions', (List<String>) params.get('proxyExceptions')));

        List<OAS.Param> form = new List<OAS.Param>();

        return (OASOrgApacheHttpProxyconfiguratorInf) client.invoke(
            'POST', '/system/console/configMgr/org.apache.http.proxyconfigurator', '',
            query, form,
            new Map<String, Object>(),
            new Map<String, Object>(),
            new List<String>{ 'application/json', 'text/plain' },
            new List<String>(),
            new List<String> { 'aemAuth' },
            OASOrgApacheHttpProxyconfiguratorInf.class
        );
    }
    /**
     * 
     * 
     * @param post  (optional)
     * @param apply  (optional)
     * @param r_delete  (optional)
     * @param action  (optional)
     * @param location  (optional)
     * @param propertylist  (optional)
     * @param dir  (optional)
     * @return OASOrgApacheJackrabbitOakPluginsBlob
     * @throws OAS.ApiException if fails to make API call
     */
    public OASOrgApacheJackrabbitOakPluginsBlob orgApacheJackrabbitOakPluginsBlobDatastoreDataStoreTextProvider(Map<String, Object> params) {
        List<OAS.Param> query = new List<OAS.Param>();

        // cast query params to verify their expected type
        query.addAll(client.makeParam('post', (Boolean) params.get('post')));
        query.addAll(client.makeParam('apply', (Boolean) params.get('apply')));
        query.addAll(client.makeParam('delete', (Boolean) params.get('r_delete')));
        query.addAll(client.makeParam('action', (String) params.get('action')));
        query.addAll(client.makeParam('$location', (String) params.get('location')));
        query.addAll(client.makeParam('propertylist', (List<String>) params.get('propertylist'), 'csv'));
        query.addAll(client.makeParam('dir', (String) params.get('dir')));

        List<OAS.Param> form = new List<OAS.Param>();

        return (OASOrgApacheJackrabbitOakPluginsBlob) client.invoke(
            'POST', '/system/console/configMgr/org.apache.jackrabbit.oak.plugins.blob.datastore.DataStoreTextProviderService', '',
            query, form,
            new Map<String, Object>(),
            new Map<String, Object>(),
            new List<String>{ 'application/json', 'text/plain' },
            new List<String>(),
            new List<String> { 'aemAuth' },
            OASOrgApacheJackrabbitOakPluginsBlob.class
        );
    }
    /**
     * 
     * 
     * @param post  (optional)
     * @param apply  (optional)
     * @param r_delete  (optional)
     * @param action  (optional)
     * @param location  (optional)
     * @param propertylist  (optional)
     * @param path  (optional)
     * @return OASOrgApacheJackrabbitOakPluginsBlob
     * @throws OAS.ApiException if fails to make API call
     */
    public OASOrgApacheJackrabbitOakPluginsBlob orgApacheJackrabbitOakPluginsBlobDatastoreFileDataStore(Map<String, Object> params) {
        List<OAS.Param> query = new List<OAS.Param>();

        // cast query params to verify their expected type
        query.addAll(client.makeParam('post', (Boolean) params.get('post')));
        query.addAll(client.makeParam('apply', (Boolean) params.get('apply')));
        query.addAll(client.makeParam('delete', (Boolean) params.get('r_delete')));
        query.addAll(client.makeParam('action', (String) params.get('action')));
        query.addAll(client.makeParam('$location', (String) params.get('location')));
        query.addAll(client.makeParam('propertylist', (List<String>) params.get('propertylist'), 'csv'));
        query.addAll(client.makeParam('path', (String) params.get('path')));

        List<OAS.Param> form = new List<OAS.Param>();

        return (OASOrgApacheJackrabbitOakPluginsBlob) client.invoke(
            'POST', '/system/console/configMgr/org.apache.jackrabbit.oak.plugins.blob.datastore.FileDataStore', '',
            query, form,
            new Map<String, Object>(),
            new Map<String, Object>(),
            new List<String>{ 'application/json', 'text/plain' },
            new List<String>(),
            new List<String> { 'aemAuth' },
            OASOrgApacheJackrabbitOakPluginsBlob.class
        );
    }
    /**
     * 
     * 
     * @param post  (optional)
     * @param apply  (optional)
     * @param r_delete  (optional)
     * @param action  (optional)
     * @param location  (optional)
     * @param propertylist  (optional)
     * @param mongouri  (optional)
     * @param db  (optional)
     * @param socketKeepAlive  (optional)
     * @param cache  (optional)
     * @param nodeCachePercentage  (optional)
     * @param prevDocCachePercentage  (optional)
     * @param childrenCachePercentage  (optional)
     * @param diffCachePercentage  (optional)
     * @param cacheSegmentCount  (optional)
     * @param cacheStackMoveDistance  (optional)
     * @param blobCacheSize  (optional)
     * @param persistentCache  (optional)
     * @param journalCache  (optional)
     * @param customBlobStore  (optional)
     * @param journalGCInterval  (optional)
     * @param journalGCMaxAge  (optional)
     * @param prefetchExternalChanges  (optional)
     * @param role  (optional)
     * @param versionGcMaxAgeInSecs  (optional)
     * @param versionGCExpression  (optional)
     * @param versionGCTimeLimitInSecs  (optional)
     * @param blobGcMaxAgeInSecs  (optional)
     * @param blobTrackSnapshotIntervalInSecs  (optional)
     * @param repositoryHome  (optional)
     * @param maxReplicationLagInSecs  (optional)
     * @param documentStoreType  (optional)
     * @param bundlingDisabled  (optional)
     * @param updateLimit  (optional)
     * @param persistentCacheIncludes  (optional)
     * @param leaseCheckMode  (optional)
     * @return OASOrgApacheJackrabbitOakPluginsDocu
     * @throws OAS.ApiException if fails to make API call
     */
    public OASOrgApacheJackrabbitOakPluginsDocu orgApacheJackrabbitOakPluginsDocumentDocumentNodeStoreService(Map<String, Object> params) {
        List<OAS.Param> query = new List<OAS.Param>();

        // cast query params to verify their expected type
        query.addAll(client.makeParam('post', (Boolean) params.get('post')));
        query.addAll(client.makeParam('apply', (Boolean) params.get('apply')));
        query.addAll(client.makeParam('delete', (Boolean) params.get('r_delete')));
        query.addAll(client.makeParam('action', (String) params.get('action')));
        query.addAll(client.makeParam('$location', (String) params.get('location')));
        query.addAll(client.makeParam('propertylist', (List<String>) params.get('propertylist'), 'csv'));
        query.addAll(client.makeParam('mongouri', (String) params.get('mongouri')));
        query.addAll(client.makeParam('db', (String) params.get('db')));
        query.addAll(client.makeParam('socketKeepAlive', (Boolean) params.get('socketKeepAlive')));
        query.addAll(client.makeParam('cache', (Integer) params.get('cache')));
        query.addAll(client.makeParam('nodeCachePercentage', (Integer) params.get('nodeCachePercentage')));
        query.addAll(client.makeParam('prevDocCachePercentage', (Integer) params.get('prevDocCachePercentage')));
        query.addAll(client.makeParam('childrenCachePercentage', (Integer) params.get('childrenCachePercentage')));
        query.addAll(client.makeParam('diffCachePercentage', (Integer) params.get('diffCachePercentage')));
        query.addAll(client.makeParam('cacheSegmentCount', (Integer) params.get('cacheSegmentCount')));
        query.addAll(client.makeParam('cacheStackMoveDistance', (Integer) params.get('cacheStackMoveDistance')));
        query.addAll(client.makeParam('blobCacheSize', (Integer) params.get('blobCacheSize')));
        query.addAll(client.makeParam('persistentCache', (String) params.get('persistentCache')));
        query.addAll(client.makeParam('journalCache', (String) params.get('journalCache')));
        query.addAll(client.makeParam('customBlobStore', (Boolean) params.get('customBlobStore')));
        query.addAll(client.makeParam('journalGCInterval', (Integer) params.get('journalGCInterval')));
        query.addAll(client.makeParam('journalGCMaxAge', (Integer) params.get('journalGCMaxAge')));
        query.addAll(client.makeParam('prefetchExternalChanges', (Boolean) params.get('prefetchExternalChanges')));
        query.addAll(client.makeParam('role', (String) params.get('role')));
        query.addAll(client.makeParam('versionGcMaxAgeInSecs', (Integer) params.get('versionGcMaxAgeInSecs')));
        query.addAll(client.makeParam('versionGCExpression', (String) params.get('versionGCExpression')));
        query.addAll(client.makeParam('versionGCTimeLimitInSecs', (Integer) params.get('versionGCTimeLimitInSecs')));
        query.addAll(client.makeParam('blobGcMaxAgeInSecs', (Integer) params.get('blobGcMaxAgeInSecs')));
        query.addAll(client.makeParam('blobTrackSnapshotIntervalInSecs', (Integer) params.get('blobTrackSnapshotIntervalInSecs')));
        query.addAll(client.makeParam('repository.home', (String) params.get('repositoryHome')));
        query.addAll(client.makeParam('maxReplicationLagInSecs', (Integer) params.get('maxReplicationLagInSecs')));
        query.addAll(client.makeParam('documentStoreType', (String) params.get('documentStoreType')));
        query.addAll(client.makeParam('bundlingDisabled', (Boolean) params.get('bundlingDisabled')));
        query.addAll(client.makeParam('updateLimit', (Integer) params.get('updateLimit')));
        query.addAll(client.makeParams('persistentCacheIncludes', (List<String>) params.get('persistentCacheIncludes')));
        query.addAll(client.makeParam('leaseCheckMode', (String) params.get('leaseCheckMode')));

        List<OAS.Param> form = new List<OAS.Param>();

        return (OASOrgApacheJackrabbitOakPluginsDocu) client.invoke(
            'POST', '/system/console/configMgr/org.apache.jackrabbit.oak.plugins.document.DocumentNodeStoreService', '',
            query, form,
            new Map<String, Object>(),
            new Map<String, Object>(),
            new List<String>{ 'application/json', 'text/plain' },
            new List<String>(),
            new List<String> { 'aemAuth' },
            OASOrgApacheJackrabbitOakPluginsDocu.class
        );
    }
    /**
     * 
     * 
     * @param post  (optional)
     * @param apply  (optional)
     * @param r_delete  (optional)
     * @param action  (optional)
     * @param location  (optional)
     * @param propertylist  (optional)
     * @param persistentCacheIncludes  (optional)
     * @return OASOrgApacheJackrabbitOakPluginsDocu
     * @throws OAS.ApiException if fails to make API call
     */
    public OASOrgApacheJackrabbitOakPluginsDocu orgApacheJackrabbitOakPluginsDocumentDocumentNodeStoreServicePre(Map<String, Object> params) {
        List<OAS.Param> query = new List<OAS.Param>();

        // cast query params to verify their expected type
        query.addAll(client.makeParam('post', (Boolean) params.get('post')));
        query.addAll(client.makeParam('apply', (Boolean) params.get('apply')));
        query.addAll(client.makeParam('delete', (Boolean) params.get('r_delete')));
        query.addAll(client.makeParam('action', (String) params.get('action')));
        query.addAll(client.makeParam('$location', (String) params.get('location')));
        query.addAll(client.makeParam('propertylist', (List<String>) params.get('propertylist'), 'csv'));
        query.addAll(client.makeParams('persistentCacheIncludes', (List<String>) params.get('persistentCacheIncludes')));

        List<OAS.Param> form = new List<OAS.Param>();

        return (OASOrgApacheJackrabbitOakPluginsDocu) client.invoke(
            'POST', '/system/console/configMgr/org.apache.jackrabbit.oak.plugins.document.DocumentNodeStoreServicePreset', '',
            query, form,
            new Map<String, Object>(),
            new Map<String, Object>(),
            new List<String>{ 'application/json', 'text/plain' },
            new List<String>(),
            new List<String> { 'aemAuth' },
            OASOrgApacheJackrabbitOakPluginsDocu.class
        );
    }
    /**
     * 
     * 
     * @param post  (optional)
     * @param apply  (optional)
     * @param r_delete  (optional)
     * @param action  (optional)
     * @param location  (optional)
     * @param propertylist  (optional)
     * @param includedPaths  (optional)
     * @param enableAsyncObserver  (optional)
     * @param observerQueueSize  (optional)
     * @return OASOrgApacheJackrabbitOakPluginsDocu
     * @throws OAS.ApiException if fails to make API call
     */
    public OASOrgApacheJackrabbitOakPluginsDocu orgApacheJackrabbitOakPluginsDocumentSecondarySecondaryStoreCac(Map<String, Object> params) {
        List<OAS.Param> query = new List<OAS.Param>();

        // cast query params to verify their expected type
        query.addAll(client.makeParam('post', (Boolean) params.get('post')));
        query.addAll(client.makeParam('apply', (Boolean) params.get('apply')));
        query.addAll(client.makeParam('delete', (Boolean) params.get('r_delete')));
        query.addAll(client.makeParam('action', (String) params.get('action')));
        query.addAll(client.makeParam('$location', (String) params.get('location')));
        query.addAll(client.makeParam('propertylist', (List<String>) params.get('propertylist'), 'csv'));
        query.addAll(client.makeParams('includedPaths', (List<String>) params.get('includedPaths')));
        query.addAll(client.makeParam('enableAsyncObserver', (Boolean) params.get('enableAsyncObserver')));
        query.addAll(client.makeParam('observerQueueSize', (Integer) params.get('observerQueueSize')));

        List<OAS.Param> form = new List<OAS.Param>();

        return (OASOrgApacheJackrabbitOakPluginsDocu) client.invoke(
            'POST', '/system/console/configMgr/org.apache.jackrabbit.oak.plugins.document.secondary.SecondaryStoreCacheService', '',
            query, form,
            new Map<String, Object>(),
            new Map<String, Object>(),
            new List<String>{ 'application/json', 'text/plain' },
            new List<String>(),
            new List<String> { 'aemAuth' },
            OASOrgApacheJackrabbitOakPluginsDocu.class
        );
    }
    /**
     * 
     * 
     * @param post  (optional)
     * @param apply  (optional)
     * @param r_delete  (optional)
     * @param action  (optional)
     * @param location  (optional)
     * @param propertylist  (optional)
     * @param asyncConfigs  (optional)
     * @param leaseTimeOutMinutes  (optional)
     * @param failingIndexTimeoutSeconds  (optional)
     * @param errorWarnIntervalSeconds  (optional)
     * @return OASOrgApacheJackrabbitOakPluginsInde
     * @throws OAS.ApiException if fails to make API call
     */
    public OASOrgApacheJackrabbitOakPluginsInde orgApacheJackrabbitOakPluginsIndexAsyncIndexerService(Map<String, Object> params) {
        List<OAS.Param> query = new List<OAS.Param>();

        // cast query params to verify their expected type
        query.addAll(client.makeParam('post', (Boolean) params.get('post')));
        query.addAll(client.makeParam('apply', (Boolean) params.get('apply')));
        query.addAll(client.makeParam('delete', (Boolean) params.get('r_delete')));
        query.addAll(client.makeParam('action', (String) params.get('action')));
        query.addAll(client.makeParam('$location', (String) params.get('location')));
        query.addAll(client.makeParam('propertylist', (List<String>) params.get('propertylist'), 'csv'));
        query.addAll(client.makeParams('asyncConfigs', (List<String>) params.get('asyncConfigs')));
        query.addAll(client.makeParam('leaseTimeOutMinutes', (Integer) params.get('leaseTimeOutMinutes')));
        query.addAll(client.makeParam('failingIndexTimeoutSeconds', (Integer) params.get('failingIndexTimeoutSeconds')));
        query.addAll(client.makeParam('errorWarnIntervalSeconds', (Integer) params.get('errorWarnIntervalSeconds')));

        List<OAS.Param> form = new List<OAS.Param>();

        return (OASOrgApacheJackrabbitOakPluginsInde) client.invoke(
            'POST', '/system/console/configMgr/org.apache.jackrabbit.oak.plugins.index.AsyncIndexerService', '',
            query, form,
            new Map<String, Object>(),
            new Map<String, Object>(),
            new List<String>{ 'application/json', 'text/plain' },
            new List<String>(),
            new List<String> { 'aemAuth' },
            OASOrgApacheJackrabbitOakPluginsInde.class
        );
    }
    /**
     * 
     * 
     * @param post  (optional)
     * @param apply  (optional)
     * @param r_delete  (optional)
     * @param action  (optional)
     * @param location  (optional)
     * @param propertylist  (optional)
     * @param disabled  (optional)
     * @param debug  (optional)
     * @param localIndexDir  (optional)
     * @param enableOpenIndexAsync  (optional)
     * @param threadPoolSize  (optional)
     * @param prefetchIndexFiles  (optional)
     * @param extractedTextCacheSizeInMB  (optional)
     * @param extractedTextCacheExpiryInSecs  (optional)
     * @param alwaysUsePreExtractedCache  (optional)
     * @param booleanClauseLimit  (optional)
     * @param enableHybridIndexing  (optional)
     * @param hybridQueueSize  (optional)
     * @param disableStoredIndexDefinition  (optional)
     * @param deletedBlobsCollectionEnabled  (optional)
     * @param propIndexCleanerIntervalInSecs  (optional)
     * @param enableSingleBlobIndexFiles  (optional)
     * @return OASOrgApacheJackrabbitOakPluginsInde
     * @throws OAS.ApiException if fails to make API call
     */
    public OASOrgApacheJackrabbitOakPluginsInde orgApacheJackrabbitOakPluginsIndexLuceneLuceneIndexProviderServ(Map<String, Object> params) {
        List<OAS.Param> query = new List<OAS.Param>();

        // cast query params to verify their expected type
        query.addAll(client.makeParam('post', (Boolean) params.get('post')));
        query.addAll(client.makeParam('apply', (Boolean) params.get('apply')));
        query.addAll(client.makeParam('delete', (Boolean) params.get('r_delete')));
        query.addAll(client.makeParam('action', (String) params.get('action')));
        query.addAll(client.makeParam('$location', (String) params.get('location')));
        query.addAll(client.makeParam('propertylist', (List<String>) params.get('propertylist'), 'csv'));
        query.addAll(client.makeParam('disabled', (Boolean) params.get('disabled')));
        query.addAll(client.makeParam('debug', (Boolean) params.get('debug')));
        query.addAll(client.makeParam('localIndexDir', (String) params.get('localIndexDir')));
        query.addAll(client.makeParam('enableOpenIndexAsync', (Boolean) params.get('enableOpenIndexAsync')));
        query.addAll(client.makeParam('threadPoolSize', (Integer) params.get('threadPoolSize')));
        query.addAll(client.makeParam('prefetchIndexFiles', (Boolean) params.get('prefetchIndexFiles')));
        query.addAll(client.makeParam('extractedTextCacheSizeInMB', (Integer) params.get('extractedTextCacheSizeInMB')));
        query.addAll(client.makeParam('extractedTextCacheExpiryInSecs', (Integer) params.get('extractedTextCacheExpiryInSecs')));
        query.addAll(client.makeParam('alwaysUsePreExtractedCache', (Boolean) params.get('alwaysUsePreExtractedCache')));
        query.addAll(client.makeParam('booleanClauseLimit', (Integer) params.get('booleanClauseLimit')));
        query.addAll(client.makeParam('enableHybridIndexing', (Boolean) params.get('enableHybridIndexing')));
        query.addAll(client.makeParam('hybridQueueSize', (Integer) params.get('hybridQueueSize')));
        query.addAll(client.makeParam('disableStoredIndexDefinition', (Boolean) params.get('disableStoredIndexDefinition')));
        query.addAll(client.makeParam('deletedBlobsCollectionEnabled', (Boolean) params.get('deletedBlobsCollectionEnabled')));
        query.addAll(client.makeParam('propIndexCleanerIntervalInSecs', (Integer) params.get('propIndexCleanerIntervalInSecs')));
        query.addAll(client.makeParam('enableSingleBlobIndexFiles', (Boolean) params.get('enableSingleBlobIndexFiles')));

        List<OAS.Param> form = new List<OAS.Param>();

        return (OASOrgApacheJackrabbitOakPluginsInde) client.invoke(
            'POST', '/system/console/configMgr/org.apache.jackrabbit.oak.plugins.index.lucene.LuceneIndexProviderService', '',
            query, form,
            new Map<String, Object>(),
            new Map<String, Object>(),
            new List<String>{ 'application/json', 'text/plain' },
            new List<String>(),
            new List<String> { 'aemAuth' },
            OASOrgApacheJackrabbitOakPluginsInde.class
        );
    }
    /**
     * 
     * 
     * @param post  (optional)
     * @param apply  (optional)
     * @param r_delete  (optional)
     * @param action  (optional)
     * @param location  (optional)
     * @param propertylist  (optional)
     * @param solrHomePath  (optional)
     * @param solrCoreName  (optional)
     * @return OASOrgApacheJackrabbitOakPluginsInde
     * @throws OAS.ApiException if fails to make API call
     */
    public OASOrgApacheJackrabbitOakPluginsInde orgApacheJackrabbitOakPluginsIndexSolrOsgiEmbeddedSolrServerCo(Map<String, Object> params) {
        List<OAS.Param> query = new List<OAS.Param>();

        // cast query params to verify their expected type
        query.addAll(client.makeParam('post', (Boolean) params.get('post')));
        query.addAll(client.makeParam('apply', (Boolean) params.get('apply')));
        query.addAll(client.makeParam('delete', (Boolean) params.get('r_delete')));
        query.addAll(client.makeParam('action', (String) params.get('action')));
        query.addAll(client.makeParam('$location', (String) params.get('location')));
        query.addAll(client.makeParam('propertylist', (List<String>) params.get('propertylist'), 'csv'));
        query.addAll(client.makeParam('solr.home.path', (String) params.get('solrHomePath')));
        query.addAll(client.makeParam('solr.core.name', (String) params.get('solrCoreName')));

        List<OAS.Param> form = new List<OAS.Param>();

        return (OASOrgApacheJackrabbitOakPluginsInde) client.invoke(
            'POST', '/system/console/configMgr/org.apache.jackrabbit.oak.plugins.index.solr.osgi.EmbeddedSolrServerConfigurationProvider', '',
            query, form,
            new Map<String, Object>(),
            new Map<String, Object>(),
            new List<String>{ 'application/json', 'text/plain' },
            new List<String>(),
            new List<String> { 'aemAuth' },
            OASOrgApacheJackrabbitOakPluginsInde.class
        );
    }
    /**
     * 
     * 
     * @param post  (optional)
     * @param apply  (optional)
     * @param r_delete  (optional)
     * @param action  (optional)
     * @param location  (optional)
     * @param propertylist  (optional)
     * @param enabled  (optional)
     * @return OASOrgApacheJackrabbitOakPluginsInde
     * @throws OAS.ApiException if fails to make API call
     */
    public OASOrgApacheJackrabbitOakPluginsInde orgApacheJackrabbitOakPluginsIndexSolrOsgiNodeStateSolrServers(Map<String, Object> params) {
        List<OAS.Param> query = new List<OAS.Param>();

        // cast query params to verify their expected type
        query.addAll(client.makeParam('post', (Boolean) params.get('post')));
        query.addAll(client.makeParam('apply', (Boolean) params.get('apply')));
        query.addAll(client.makeParam('delete', (Boolean) params.get('r_delete')));
        query.addAll(client.makeParam('action', (String) params.get('action')));
        query.addAll(client.makeParam('$location', (String) params.get('location')));
        query.addAll(client.makeParam('propertylist', (List<String>) params.get('propertylist'), 'csv'));
        query.addAll(client.makeParam('enabled', (Boolean) params.get('enabled')));

        List<OAS.Param> form = new List<OAS.Param>();

        return (OASOrgApacheJackrabbitOakPluginsInde) client.invoke(
            'POST', '/system/console/configMgr/org.apache.jackrabbit.oak.plugins.index.solr.osgi.NodeStateSolrServersObserverService', '',
            query, form,
            new Map<String, Object>(),
            new Map<String, Object>(),
            new List<String>{ 'application/json', 'text/plain' },
            new List<String>(),
            new List<String> { 'aemAuth' },
            OASOrgApacheJackrabbitOakPluginsInde.class
        );
    }
    /**
     * 
     * 
     * @param post  (optional)
     * @param apply  (optional)
     * @param r_delete  (optional)
     * @param action  (optional)
     * @param location  (optional)
     * @param propertylist  (optional)
     * @param pathDescField  (optional)
     * @param pathChildField  (optional)
     * @param pathParentField  (optional)
     * @param pathExactField  (optional)
     * @param catchAllField  (optional)
     * @param collapsedPathField  (optional)
     * @param pathDepthField  (optional)
     * @param commitPolicy  (optional)
     * @param rows  (optional)
     * @param pathRestrictions  (optional)
     * @param propertyRestrictions  (optional)
     * @param primarytypesRestrictions  (optional)
     * @param ignoredProperties  (optional)
     * @param usedProperties  (optional)
     * @param typeMappings  (optional)
     * @param propertyMappings  (optional)
     * @param collapseJcrcontentNodes  (optional)
     * @return OASOrgApacheJackrabbitOakPluginsInde
     * @throws OAS.ApiException if fails to make API call
     */
    public OASOrgApacheJackrabbitOakPluginsInde orgApacheJackrabbitOakPluginsIndexSolrOsgiOakSolrConfiguration(Map<String, Object> params) {
        List<OAS.Param> query = new List<OAS.Param>();

        // cast query params to verify their expected type
        query.addAll(client.makeParam('post', (Boolean) params.get('post')));
        query.addAll(client.makeParam('apply', (Boolean) params.get('apply')));
        query.addAll(client.makeParam('delete', (Boolean) params.get('r_delete')));
        query.addAll(client.makeParam('action', (String) params.get('action')));
        query.addAll(client.makeParam('$location', (String) params.get('location')));
        query.addAll(client.makeParam('propertylist', (List<String>) params.get('propertylist'), 'csv'));
        query.addAll(client.makeParam('path.desc.field', (String) params.get('pathDescField')));
        query.addAll(client.makeParam('path.child.field', (String) params.get('pathChildField')));
        query.addAll(client.makeParam('path.parent.field', (String) params.get('pathParentField')));
        query.addAll(client.makeParam('path.exact.field', (String) params.get('pathExactField')));
        query.addAll(client.makeParam('catch.all.field', (String) params.get('catchAllField')));
        query.addAll(client.makeParam('collapsed.path.field', (String) params.get('collapsedPathField')));
        query.addAll(client.makeParam('path.depth.field', (String) params.get('pathDepthField')));
        query.addAll(client.makeParam('commit.policy', (String) params.get('commitPolicy')));
        query.addAll(client.makeParam('rows', (Integer) params.get('rows')));
        query.addAll(client.makeParam('path.restrictions', (Boolean) params.get('pathRestrictions')));
        query.addAll(client.makeParam('property.restrictions', (Boolean) params.get('propertyRestrictions')));
        query.addAll(client.makeParam('primarytypes.restrictions', (Boolean) params.get('primarytypesRestrictions')));
        query.addAll(client.makeParams('ignored.properties', (List<String>) params.get('ignoredProperties')));
        query.addAll(client.makeParams('used.properties', (List<String>) params.get('usedProperties')));
        query.addAll(client.makeParams('type.mappings', (List<String>) params.get('typeMappings')));
        query.addAll(client.makeParams('property.mappings', (List<String>) params.get('propertyMappings')));
        query.addAll(client.makeParam('collapse.jcrcontent.nodes', (Boolean) params.get('collapseJcrcontentNodes')));

        List<OAS.Param> form = new List<OAS.Param>();

        return (OASOrgApacheJackrabbitOakPluginsInde) client.invoke(
            'POST', '/system/console/configMgr/org.apache.jackrabbit.oak.plugins.index.solr.osgi.OakSolrConfigurationProviderService', '',
            query, form,
            new Map<String, Object>(),
            new Map<String, Object>(),
            new List<String>{ 'application/json', 'text/plain' },
            new List<String>(),
            new List<String> { 'aemAuth' },
            OASOrgApacheJackrabbitOakPluginsInde.class
        );
    }
    /**
     * 
     * 
     * @param post  (optional)
     * @param apply  (optional)
     * @param r_delete  (optional)
     * @param action  (optional)
     * @param location  (optional)
     * @param propertylist  (optional)
     * @param solrHttpUrl  (optional)
     * @param solrZkHost  (optional)
     * @param solrCollection  (optional)
     * @param solrSocketTimeout  (optional)
     * @param solrConnectionTimeout  (optional)
     * @param solrShardsNo  (optional)
     * @param solrReplicationFactor  (optional)
     * @param solrConfDir  (optional)
     * @return OASOrgApacheJackrabbitOakPluginsInde
     * @throws OAS.ApiException if fails to make API call
     */
    public OASOrgApacheJackrabbitOakPluginsInde orgApacheJackrabbitOakPluginsIndexSolrOsgiRemoteSolrServerConf(Map<String, Object> params) {
        List<OAS.Param> query = new List<OAS.Param>();

        // cast query params to verify their expected type
        query.addAll(client.makeParam('post', (Boolean) params.get('post')));
        query.addAll(client.makeParam('apply', (Boolean) params.get('apply')));
        query.addAll(client.makeParam('delete', (Boolean) params.get('r_delete')));
        query.addAll(client.makeParam('action', (String) params.get('action')));
        query.addAll(client.makeParam('$location', (String) params.get('location')));
        query.addAll(client.makeParam('propertylist', (List<String>) params.get('propertylist'), 'csv'));
        query.addAll(client.makeParam('solr.http.url', (String) params.get('solrHttpUrl')));
        query.addAll(client.makeParam('solr.zk.host', (String) params.get('solrZkHost')));
        query.addAll(client.makeParam('solr.collection', (String) params.get('solrCollection')));
        query.addAll(client.makeParam('solr.socket.timeout', (Integer) params.get('solrSocketTimeout')));
        query.addAll(client.makeParam('solr.connection.timeout', (Integer) params.get('solrConnectionTimeout')));
        query.addAll(client.makeParam('solr.shards.no', (Integer) params.get('solrShardsNo')));
        query.addAll(client.makeParam('solr.replication.factor', (Integer) params.get('solrReplicationFactor')));
        query.addAll(client.makeParam('solr.conf.dir', (String) params.get('solrConfDir')));

        List<OAS.Param> form = new List<OAS.Param>();

        return (OASOrgApacheJackrabbitOakPluginsInde) client.invoke(
            'POST', '/system/console/configMgr/org.apache.jackrabbit.oak.plugins.index.solr.osgi.RemoteSolrServerConfigurationProvider', '',
            query, form,
            new Map<String, Object>(),
            new Map<String, Object>(),
            new List<String>{ 'application/json', 'text/plain' },
            new List<String>(),
            new List<String> { 'aemAuth' },
            OASOrgApacheJackrabbitOakPluginsInde.class
        );
    }
    /**
     * 
     * 
     * @param post  (optional)
     * @param apply  (optional)
     * @param r_delete  (optional)
     * @param action  (optional)
     * @param location  (optional)
     * @param propertylist  (optional)
     * @param queryAggregation  (optional)
     * @return OASOrgApacheJackrabbitOakPluginsInde
     * @throws OAS.ApiException if fails to make API call
     */
    public OASOrgApacheJackrabbitOakPluginsInde orgApacheJackrabbitOakPluginsIndexSolrOsgiSolrQueryIndexProvid(Map<String, Object> params) {
        List<OAS.Param> query = new List<OAS.Param>();

        // cast query params to verify their expected type
        query.addAll(client.makeParam('post', (Boolean) params.get('post')));
        query.addAll(client.makeParam('apply', (Boolean) params.get('apply')));
        query.addAll(client.makeParam('delete', (Boolean) params.get('r_delete')));
        query.addAll(client.makeParam('action', (String) params.get('action')));
        query.addAll(client.makeParam('$location', (String) params.get('location')));
        query.addAll(client.makeParam('propertylist', (List<String>) params.get('propertylist'), 'csv'));
        query.addAll(client.makeParam('query.aggregation', (Boolean) params.get('queryAggregation')));

        List<OAS.Param> form = new List<OAS.Param>();

        return (OASOrgApacheJackrabbitOakPluginsInde) client.invoke(
            'POST', '/system/console/configMgr/org.apache.jackrabbit.oak.plugins.index.solr.osgi.SolrQueryIndexProviderService', '',
            query, form,
            new Map<String, Object>(),
            new Map<String, Object>(),
            new List<String>{ 'application/json', 'text/plain' },
            new List<String>(),
            new List<String> { 'aemAuth' },
            OASOrgApacheJackrabbitOakPluginsInde.class
        );
    }
    /**
     * 
     * 
     * @param post  (optional)
     * @param apply  (optional)
     * @param r_delete  (optional)
     * @param action  (optional)
     * @param location  (optional)
     * @param propertylist  (optional)
     * @param serverType  (optional)
     * @return OASOrgApacheJackrabbitOakPluginsInde
     * @throws OAS.ApiException if fails to make API call
     */
    public OASOrgApacheJackrabbitOakPluginsInde orgApacheJackrabbitOakPluginsIndexSolrOsgiSolrServerProviderSe(Map<String, Object> params) {
        List<OAS.Param> query = new List<OAS.Param>();

        // cast query params to verify their expected type
        query.addAll(client.makeParam('post', (Boolean) params.get('post')));
        query.addAll(client.makeParam('apply', (Boolean) params.get('apply')));
        query.addAll(client.makeParam('delete', (Boolean) params.get('r_delete')));
        query.addAll(client.makeParam('action', (String) params.get('action')));
        query.addAll(client.makeParam('$location', (String) params.get('location')));
        query.addAll(client.makeParam('propertylist', (List<String>) params.get('propertylist'), 'csv'));
        query.addAll(client.makeParam('server.type', (String) params.get('serverType')));

        List<OAS.Param> form = new List<OAS.Param>();

        return (OASOrgApacheJackrabbitOakPluginsInde) client.invoke(
            'POST', '/system/console/configMgr/org.apache.jackrabbit.oak.plugins.index.solr.osgi.SolrServerProviderService', '',
            query, form,
            new Map<String, Object>(),
            new Map<String, Object>(),
            new List<String>{ 'application/json', 'text/plain' },
            new List<String>(),
            new List<String> { 'aemAuth' },
            OASOrgApacheJackrabbitOakPluginsInde.class
        );
    }
    /**
     * 
     * 
     * @param post  (optional)
     * @param apply  (optional)
     * @param r_delete  (optional)
     * @param action  (optional)
     * @param location  (optional)
     * @param propertylist  (optional)
     * @param providerType  (optional)
     * @return OASOrgApacheJackrabbitOakPluginsMetr
     * @throws OAS.ApiException if fails to make API call
     */
    public OASOrgApacheJackrabbitOakPluginsMetr orgApacheJackrabbitOakPluginsMetricStatisticsProviderFactory(Map<String, Object> params) {
        List<OAS.Param> query = new List<OAS.Param>();

        // cast query params to verify their expected type
        query.addAll(client.makeParam('post', (Boolean) params.get('post')));
        query.addAll(client.makeParam('apply', (Boolean) params.get('apply')));
        query.addAll(client.makeParam('delete', (Boolean) params.get('r_delete')));
        query.addAll(client.makeParam('action', (String) params.get('action')));
        query.addAll(client.makeParam('$location', (String) params.get('location')));
        query.addAll(client.makeParam('propertylist', (List<String>) params.get('propertylist'), 'csv'));
        query.addAll(client.makeParam('providerType', (String) params.get('providerType')));

        List<OAS.Param> form = new List<OAS.Param>();

        return (OASOrgApacheJackrabbitOakPluginsMetr) client.invoke(
            'POST', '/system/console/configMgr/org.apache.jackrabbit.oak.plugins.metric.StatisticsProviderFactory', '',
            query, form,
            new Map<String, Object>(),
            new Map<String, Object>(),
            new List<String>{ 'application/json', 'text/plain' },
            new List<String>(),
            new List<String> { 'aemAuth' },
            OASOrgApacheJackrabbitOakPluginsMetr.class
        );
    }
    /**
     * 
     * 
     * @param post  (optional)
     * @param apply  (optional)
     * @param r_delete  (optional)
     * @param action  (optional)
     * @param location  (optional)
     * @param propertylist  (optional)
     * @param maxItems  (optional)
     * @param maxPathDepth  (optional)
     * @param enabled  (optional)
     * @return OASOrgApacheJackrabbitOakPluginsObse
     * @throws OAS.ApiException if fails to make API call
     */
    public OASOrgApacheJackrabbitOakPluginsObse orgApacheJackrabbitOakPluginsObservationChangeCollectorProvider(Map<String, Object> params) {
        List<OAS.Param> query = new List<OAS.Param>();

        // cast query params to verify their expected type
        query.addAll(client.makeParam('post', (Boolean) params.get('post')));
        query.addAll(client.makeParam('apply', (Boolean) params.get('apply')));
        query.addAll(client.makeParam('delete', (Boolean) params.get('r_delete')));
        query.addAll(client.makeParam('action', (String) params.get('action')));
        query.addAll(client.makeParam('$location', (String) params.get('location')));
        query.addAll(client.makeParam('propertylist', (List<String>) params.get('propertylist'), 'csv'));
        query.addAll(client.makeParam('maxItems', (Integer) params.get('maxItems')));
        query.addAll(client.makeParam('maxPathDepth', (Integer) params.get('maxPathDepth')));
        query.addAll(client.makeParam('enabled', (Boolean) params.get('enabled')));

        List<OAS.Param> form = new List<OAS.Param>();

        return (OASOrgApacheJackrabbitOakPluginsObse) client.invoke(
            'POST', '/system/console/configMgr/org.apache.jackrabbit.oak.plugins.observation.ChangeCollectorProvider', '',
            query, form,
            new Map<String, Object>(),
            new Map<String, Object>(),
            new List<String>{ 'application/json', 'text/plain' },
            new List<String>(),
            new List<String> { 'aemAuth' },
            OASOrgApacheJackrabbitOakPluginsObse.class
        );
    }
    /**
     * 
     * 
     * @param post  (optional)
     * @param apply  (optional)
     * @param r_delete  (optional)
     * @param action  (optional)
     * @param location  (optional)
     * @param propertylist  (optional)
     * @param queryLimitInMemory  (optional)
     * @param queryLimitReads  (optional)
     * @param queryFailTraversal  (optional)
     * @param fastQuerySize  (optional)
     * @return OASOrgApacheJackrabbitOakQueryQueryE
     * @throws OAS.ApiException if fails to make API call
     */
    public OASOrgApacheJackrabbitOakQueryQueryE orgApacheJackrabbitOakQueryQueryEngineSettingsService(Map<String, Object> params) {
        List<OAS.Param> query = new List<OAS.Param>();

        // cast query params to verify their expected type
        query.addAll(client.makeParam('post', (Boolean) params.get('post')));
        query.addAll(client.makeParam('apply', (Boolean) params.get('apply')));
        query.addAll(client.makeParam('delete', (Boolean) params.get('r_delete')));
        query.addAll(client.makeParam('action', (String) params.get('action')));
        query.addAll(client.makeParam('$location', (String) params.get('location')));
        query.addAll(client.makeParam('propertylist', (List<String>) params.get('propertylist'), 'csv'));
        query.addAll(client.makeParam('queryLimitInMemory', (Integer) params.get('queryLimitInMemory')));
        query.addAll(client.makeParam('queryLimitReads', (Integer) params.get('queryLimitReads')));
        query.addAll(client.makeParam('queryFailTraversal', (Boolean) params.get('queryFailTraversal')));
        query.addAll(client.makeParam('fastQuerySize', (Boolean) params.get('fastQuerySize')));

        List<OAS.Param> form = new List<OAS.Param>();

        return (OASOrgApacheJackrabbitOakQueryQueryE) client.invoke(
            'POST', '/system/console/configMgr/org.apache.jackrabbit.oak.query.QueryEngineSettingsService', '',
            query, form,
            new Map<String, Object>(),
            new Map<String, Object>(),
            new List<String>{ 'application/json', 'text/plain' },
            new List<String>(),
            new List<String> { 'aemAuth' },
            OASOrgApacheJackrabbitOakQueryQueryE.class
        );
    }
    /**
     * 
     * 
     * @param post  (optional)
     * @param apply  (optional)
     * @param r_delete  (optional)
     * @param action  (optional)
     * @param location  (optional)
     * @param propertylist  (optional)
     * @param orgApacheJackrabbitOakAuthenticationAppName  (optional)
     * @param orgApacheJackrabbitOakAuthenticationConfigSpiName  (optional)
     * @return OASOrgApacheJackrabbitOakSecurityAut
     * @throws OAS.ApiException if fails to make API call
     */
    public OASOrgApacheJackrabbitOakSecurityAut orgApacheJackrabbitOakSecurityAuthenticationAuthenticationConfig(Map<String, Object> params) {
        List<OAS.Param> query = new List<OAS.Param>();

        // cast query params to verify their expected type
        query.addAll(client.makeParam('post', (Boolean) params.get('post')));
        query.addAll(client.makeParam('apply', (Boolean) params.get('apply')));
        query.addAll(client.makeParam('delete', (Boolean) params.get('r_delete')));
        query.addAll(client.makeParam('action', (String) params.get('action')));
        query.addAll(client.makeParam('$location', (String) params.get('location')));
        query.addAll(client.makeParam('propertylist', (List<String>) params.get('propertylist'), 'csv'));
        query.addAll(client.makeParam('org.apache.jackrabbit.oak.authentication.appName', (String) params.get('orgApacheJackrabbitOakAuthenticationAppName')));
        query.addAll(client.makeParam('org.apache.jackrabbit.oak.authentication.configSpiName', (String) params.get('orgApacheJackrabbitOakAuthenticationConfigSpiName')));

        List<OAS.Param> form = new List<OAS.Param>();

        return (OASOrgApacheJackrabbitOakSecurityAut) client.invoke(
            'POST', '/system/console/configMgr/org.apache.jackrabbit.oak.security.authentication.AuthenticationConfigurationImpl', '',
            query, form,
            new Map<String, Object>(),
            new Map<String, Object>(),
            new List<String>{ 'application/json', 'text/plain' },
            new List<String>(),
            new List<String> { 'aemAuth' },
            OASOrgApacheJackrabbitOakSecurityAut.class
        );
    }
    /**
     * 
     * 
     * @param post  (optional)
     * @param apply  (optional)
     * @param r_delete  (optional)
     * @param action  (optional)
     * @param location  (optional)
     * @param propertylist  (optional)
     * @param providerName  (optional)
     * @param hostName  (optional)
     * @param hostPort  (optional)
     * @param hostSsl  (optional)
     * @param hostTls  (optional)
     * @param hostNoCertCheck  (optional)
     * @param bindDn  (optional)
     * @param bindPassword  (optional)
     * @param searchTimeout  (optional)
     * @param adminPoolMaxActive  (optional)
     * @param adminPoolLookupOnValidate  (optional)
     * @param userPoolMaxActive  (optional)
     * @param userPoolLookupOnValidate  (optional)
     * @param userBaseDN  (optional)
     * @param userObjectclass  (optional)
     * @param userIdAttribute  (optional)
     * @param userExtraFilter  (optional)
     * @param userMakeDnPath  (optional)
     * @param groupBaseDN  (optional)
     * @param groupObjectclass  (optional)
     * @param groupNameAttribute  (optional)
     * @param groupExtraFilter  (optional)
     * @param groupMakeDnPath  (optional)
     * @param groupMemberAttribute  (optional)
     * @param useUidForExtId  (optional)
     * @param customattributes  (optional)
     * @return OASOrgApacheJackrabbitOakSecurityAut
     * @throws OAS.ApiException if fails to make API call
     */
    public OASOrgApacheJackrabbitOakSecurityAut orgApacheJackrabbitOakSecurityAuthenticationLdapImplLdapIdenti(Map<String, Object> params) {
        List<OAS.Param> query = new List<OAS.Param>();

        // cast query params to verify their expected type
        query.addAll(client.makeParam('post', (Boolean) params.get('post')));
        query.addAll(client.makeParam('apply', (Boolean) params.get('apply')));
        query.addAll(client.makeParam('delete', (Boolean) params.get('r_delete')));
        query.addAll(client.makeParam('action', (String) params.get('action')));
        query.addAll(client.makeParam('$location', (String) params.get('location')));
        query.addAll(client.makeParam('propertylist', (List<String>) params.get('propertylist'), 'csv'));
        query.addAll(client.makeParam('provider.name', (String) params.get('providerName')));
        query.addAll(client.makeParam('host.name', (String) params.get('hostName')));
        query.addAll(client.makeParam('host.port', (Integer) params.get('hostPort')));
        query.addAll(client.makeParam('host.ssl', (Boolean) params.get('hostSsl')));
        query.addAll(client.makeParam('host.tls', (Boolean) params.get('hostTls')));
        query.addAll(client.makeParam('host.noCertCheck', (Boolean) params.get('hostNoCertCheck')));
        query.addAll(client.makeParam('bind.dn', (String) params.get('bindDn')));
        query.addAll(client.makeParam('bind.password', (String) params.get('bindPassword')));
        query.addAll(client.makeParam('searchTimeout', (String) params.get('searchTimeout')));
        query.addAll(client.makeParam('adminPool.maxActive', (Integer) params.get('adminPoolMaxActive')));
        query.addAll(client.makeParam('adminPool.lookupOnValidate', (Boolean) params.get('adminPoolLookupOnValidate')));
        query.addAll(client.makeParam('userPool.maxActive', (Integer) params.get('userPoolMaxActive')));
        query.addAll(client.makeParam('userPool.lookupOnValidate', (Boolean) params.get('userPoolLookupOnValidate')));
        query.addAll(client.makeParam('user.baseDN', (String) params.get('userBaseDN')));
        query.addAll(client.makeParams('user.objectclass', (List<String>) params.get('userObjectclass')));
        query.addAll(client.makeParam('user.idAttribute', (String) params.get('userIdAttribute')));
        query.addAll(client.makeParam('user.extraFilter', (String) params.get('userExtraFilter')));
        query.addAll(client.makeParam('user.makeDnPath', (Boolean) params.get('userMakeDnPath')));
        query.addAll(client.makeParam('group.baseDN', (String) params.get('groupBaseDN')));
        query.addAll(client.makeParams('group.objectclass', (List<String>) params.get('groupObjectclass')));
        query.addAll(client.makeParam('group.nameAttribute', (String) params.get('groupNameAttribute')));
        query.addAll(client.makeParam('group.extraFilter', (String) params.get('groupExtraFilter')));
        query.addAll(client.makeParam('group.makeDnPath', (Boolean) params.get('groupMakeDnPath')));
        query.addAll(client.makeParam('group.memberAttribute', (String) params.get('groupMemberAttribute')));
        query.addAll(client.makeParam('useUidForExtId', (Boolean) params.get('useUidForExtId')));
        query.addAll(client.makeParams('customattributes', (List<String>) params.get('customattributes')));

        List<OAS.Param> form = new List<OAS.Param>();

        return (OASOrgApacheJackrabbitOakSecurityAut) client.invoke(
            'POST', '/system/console/configMgr/org.apache.jackrabbit.oak.security.authentication.ldap.impl.LdapIdentityProvider', '',
            query, form,
            new Map<String, Object>(),
            new Map<String, Object>(),
            new List<String>{ 'application/json', 'text/plain' },
            new List<String>(),
            new List<String> { 'aemAuth' },
            OASOrgApacheJackrabbitOakSecurityAut.class
        );
    }
    /**
     * 
     * 
     * @param post  (optional)
     * @param apply  (optional)
     * @param r_delete  (optional)
     * @param action  (optional)
     * @param location  (optional)
     * @param propertylist  (optional)
     * @param tokenExpiration  (optional)
     * @param tokenLength  (optional)
     * @param tokenRefresh  (optional)
     * @param tokenCleanupThreshold  (optional)
     * @param passwordHashAlgorithm  (optional)
     * @param passwordHashIterations  (optional)
     * @param passwordSaltSize  (optional)
     * @return OASOrgApacheJackrabbitOakSecurityAut
     * @throws OAS.ApiException if fails to make API call
     */
    public OASOrgApacheJackrabbitOakSecurityAut orgApacheJackrabbitOakSecurityAuthenticationTokenTokenConfigura(Map<String, Object> params) {
        List<OAS.Param> query = new List<OAS.Param>();

        // cast query params to verify their expected type
        query.addAll(client.makeParam('post', (Boolean) params.get('post')));
        query.addAll(client.makeParam('apply', (Boolean) params.get('apply')));
        query.addAll(client.makeParam('delete', (Boolean) params.get('r_delete')));
        query.addAll(client.makeParam('action', (String) params.get('action')));
        query.addAll(client.makeParam('$location', (String) params.get('location')));
        query.addAll(client.makeParam('propertylist', (List<String>) params.get('propertylist'), 'csv'));
        query.addAll(client.makeParam('tokenExpiration', (String) params.get('tokenExpiration')));
        query.addAll(client.makeParam('tokenLength', (String) params.get('tokenLength')));
        query.addAll(client.makeParam('tokenRefresh', (Boolean) params.get('tokenRefresh')));
        query.addAll(client.makeParam('tokenCleanupThreshold', (Integer) params.get('tokenCleanupThreshold')));
        query.addAll(client.makeParam('passwordHashAlgorithm', (String) params.get('passwordHashAlgorithm')));
        query.addAll(client.makeParam('passwordHashIterations', (Integer) params.get('passwordHashIterations')));
        query.addAll(client.makeParam('passwordSaltSize', (Integer) params.get('passwordSaltSize')));

        List<OAS.Param> form = new List<OAS.Param>();

        return (OASOrgApacheJackrabbitOakSecurityAut) client.invoke(
            'POST', '/system/console/configMgr/org.apache.jackrabbit.oak.security.authentication.token.TokenConfigurationImpl', '',
            query, form,
            new Map<String, Object>(),
            new Map<String, Object>(),
            new List<String>{ 'application/json', 'text/plain' },
            new List<String>(),
            new List<String> { 'aemAuth' },
            OASOrgApacheJackrabbitOakSecurityAut.class
        );
    }
    /**
     * 
     * 
     * @param post  (optional)
     * @param apply  (optional)
     * @param r_delete  (optional)
     * @param action  (optional)
     * @param location  (optional)
     * @param propertylist  (optional)
     * @param permissionsJr2  (optional)
     * @param importBehavior  (optional)
     * @param readPaths  (optional)
     * @param administrativePrincipals  (optional)
     * @param configurationRanking  (optional)
     * @return OASOrgApacheJackrabbitOakSecurityAut
     * @throws OAS.ApiException if fails to make API call
     */
    public OASOrgApacheJackrabbitOakSecurityAut orgApacheJackrabbitOakSecurityAuthorizationAuthorizationConfigur(Map<String, Object> params) {
        List<OAS.Param> query = new List<OAS.Param>();

        // cast query params to verify their expected type
        query.addAll(client.makeParam('post', (Boolean) params.get('post')));
        query.addAll(client.makeParam('apply', (Boolean) params.get('apply')));
        query.addAll(client.makeParam('delete', (Boolean) params.get('r_delete')));
        query.addAll(client.makeParam('action', (String) params.get('action')));
        query.addAll(client.makeParam('$location', (String) params.get('location')));
        query.addAll(client.makeParam('propertylist', (List<String>) params.get('propertylist'), 'csv'));
        query.addAll(client.makeParam('permissionsJr2', (String) params.get('permissionsJr2')));
        query.addAll(client.makeParam('importBehavior', (String) params.get('importBehavior')));
        query.addAll(client.makeParams('readPaths', (List<String>) params.get('readPaths')));
        query.addAll(client.makeParams('administrativePrincipals', (List<String>) params.get('administrativePrincipals')));
        query.addAll(client.makeParam('configurationRanking', (Integer) params.get('configurationRanking')));

        List<OAS.Param> form = new List<OAS.Param>();

        return (OASOrgApacheJackrabbitOakSecurityAut) client.invoke(
            'POST', '/system/console/configMgr/org.apache.jackrabbit.oak.security.authorization.AuthorizationConfigurationImpl', '',
            query, form,
            new Map<String, Object>(),
            new Map<String, Object>(),
            new List<String>{ 'application/json', 'text/plain' },
            new List<String>(),
            new List<String> { 'aemAuth' },
            OASOrgApacheJackrabbitOakSecurityAut.class
        );
    }
    /**
     * 
     * 
     * @param post  (optional)
     * @param apply  (optional)
     * @param r_delete  (optional)
     * @param action  (optional)
     * @param location  (optional)
     * @param propertylist  (optional)
     * @param requiredServicePids  (optional)
     * @param authorizationCompositionType  (optional)
     * @return OASOrgApacheJackrabbitOakSecurityInt
     * @throws OAS.ApiException if fails to make API call
     */
    public OASOrgApacheJackrabbitOakSecurityInt orgApacheJackrabbitOakSecurityInternalSecurityProviderRegistrati(Map<String, Object> params) {
        List<OAS.Param> query = new List<OAS.Param>();

        // cast query params to verify their expected type
        query.addAll(client.makeParam('post', (Boolean) params.get('post')));
        query.addAll(client.makeParam('apply', (Boolean) params.get('apply')));
        query.addAll(client.makeParam('delete', (Boolean) params.get('r_delete')));
        query.addAll(client.makeParam('action', (String) params.get('action')));
        query.addAll(client.makeParam('$location', (String) params.get('location')));
        query.addAll(client.makeParam('propertylist', (List<String>) params.get('propertylist'), 'csv'));
        query.addAll(client.makeParams('requiredServicePids', (List<String>) params.get('requiredServicePids')));
        query.addAll(client.makeParam('authorizationCompositionType', (String) params.get('authorizationCompositionType')));

        List<OAS.Param> form = new List<OAS.Param>();

        return (OASOrgApacheJackrabbitOakSecurityInt) client.invoke(
            'POST', '/system/console/configMgr/org.apache.jackrabbit.oak.security.internal.SecurityProviderRegistration', '',
            query, form,
            new Map<String, Object>(),
            new Map<String, Object>(),
            new List<String>{ 'application/json', 'text/plain' },
            new List<String>(),
            new List<String> { 'aemAuth' },
            OASOrgApacheJackrabbitOakSecurityInt.class
        );
    }
    /**
     * 
     * 
     * @param post  (optional)
     * @param apply  (optional)
     * @param r_delete  (optional)
     * @param action  (optional)
     * @param location  (optional)
     * @param propertylist  (optional)
     * @param length  (optional)
     * @return OASOrgApacheJackrabbitOakSecurityUse
     * @throws OAS.ApiException if fails to make API call
     */
    public OASOrgApacheJackrabbitOakSecurityUse orgApacheJackrabbitOakSecurityUserRandomAuthorizableNodeName(Map<String, Object> params) {
        List<OAS.Param> query = new List<OAS.Param>();

        // cast query params to verify their expected type
        query.addAll(client.makeParam('post', (Boolean) params.get('post')));
        query.addAll(client.makeParam('apply', (Boolean) params.get('apply')));
        query.addAll(client.makeParam('delete', (Boolean) params.get('r_delete')));
        query.addAll(client.makeParam('action', (String) params.get('action')));
        query.addAll(client.makeParam('$location', (String) params.get('location')));
        query.addAll(client.makeParam('propertylist', (List<String>) params.get('propertylist'), 'csv'));
        query.addAll(client.makeParam('length', (Integer) params.get('length')));

        List<OAS.Param> form = new List<OAS.Param>();

        return (OASOrgApacheJackrabbitOakSecurityUse) client.invoke(
            'POST', '/system/console/configMgr/org.apache.jackrabbit.oak.security.user.RandomAuthorizableNodeName', '',
            query, form,
            new Map<String, Object>(),
            new Map<String, Object>(),
            new List<String>{ 'application/json', 'text/plain' },
            new List<String>(),
            new List<String> { 'aemAuth' },
            OASOrgApacheJackrabbitOakSecurityUse.class
        );
    }
    /**
     * 
     * 
     * @param post  (optional)
     * @param apply  (optional)
     * @param r_delete  (optional)
     * @param action  (optional)
     * @param location  (optional)
     * @param propertylist  (optional)
     * @param usersPath  (optional)
     * @param groupsPath  (optional)
     * @param systemRelativePath  (optional)
     * @param defaultDepth  (optional)
     * @param importBehavior  (optional)
     * @param passwordHashAlgorithm  (optional)
     * @param passwordHashIterations  (optional)
     * @param passwordSaltSize  (optional)
     * @param omitAdminPw  (optional)
     * @param supportAutoSave  (optional)
     * @param passwordMaxAge  (optional)
     * @param initialPasswordChange  (optional)
     * @param passwordHistorySize  (optional)
     * @param passwordExpiryForAdmin  (optional)
     * @param cacheExpiration  (optional)
     * @param enableRFC7613UsercaseMappedProfile  (optional)
     * @return OASOrgApacheJackrabbitOakSecurityUse
     * @throws OAS.ApiException if fails to make API call
     */
    public OASOrgApacheJackrabbitOakSecurityUse orgApacheJackrabbitOakSecurityUserUserConfigurationImpl(Map<String, Object> params) {
        List<OAS.Param> query = new List<OAS.Param>();

        // cast query params to verify their expected type
        query.addAll(client.makeParam('post', (Boolean) params.get('post')));
        query.addAll(client.makeParam('apply', (Boolean) params.get('apply')));
        query.addAll(client.makeParam('delete', (Boolean) params.get('r_delete')));
        query.addAll(client.makeParam('action', (String) params.get('action')));
        query.addAll(client.makeParam('$location', (String) params.get('location')));
        query.addAll(client.makeParam('propertylist', (List<String>) params.get('propertylist'), 'csv'));
        query.addAll(client.makeParam('usersPath', (String) params.get('usersPath')));
        query.addAll(client.makeParam('groupsPath', (String) params.get('groupsPath')));
        query.addAll(client.makeParam('systemRelativePath', (String) params.get('systemRelativePath')));
        query.addAll(client.makeParam('defaultDepth', (Integer) params.get('defaultDepth')));
        query.addAll(client.makeParam('importBehavior', (String) params.get('importBehavior')));
        query.addAll(client.makeParam('passwordHashAlgorithm', (String) params.get('passwordHashAlgorithm')));
        query.addAll(client.makeParam('passwordHashIterations', (Integer) params.get('passwordHashIterations')));
        query.addAll(client.makeParam('passwordSaltSize', (Integer) params.get('passwordSaltSize')));
        query.addAll(client.makeParam('omitAdminPw', (Boolean) params.get('omitAdminPw')));
        query.addAll(client.makeParam('supportAutoSave', (Boolean) params.get('supportAutoSave')));
        query.addAll(client.makeParam('passwordMaxAge', (Integer) params.get('passwordMaxAge')));
        query.addAll(client.makeParam('initialPasswordChange', (Boolean) params.get('initialPasswordChange')));
        query.addAll(client.makeParam('passwordHistorySize', (Integer) params.get('passwordHistorySize')));
        query.addAll(client.makeParam('passwordExpiryForAdmin', (Boolean) params.get('passwordExpiryForAdmin')));
        query.addAll(client.makeParam('cacheExpiration', (Integer) params.get('cacheExpiration')));
        query.addAll(client.makeParam('enableRFC7613UsercaseMappedProfile', (Boolean) params.get('enableRFC7613UsercaseMappedProfile')));

        List<OAS.Param> form = new List<OAS.Param>();

        return (OASOrgApacheJackrabbitOakSecurityUse) client.invoke(
            'POST', '/system/console/configMgr/org.apache.jackrabbit.oak.security.user.UserConfigurationImpl', '',
            query, form,
            new Map<String, Object>(),
            new Map<String, Object>(),
            new List<String>{ 'application/json', 'text/plain' },
            new List<String>(),
            new List<String> { 'aemAuth' },
            OASOrgApacheJackrabbitOakSecurityUse.class
        );
    }
    /**
     * 
     * 
     * @param post  (optional)
     * @param apply  (optional)
     * @param r_delete  (optional)
     * @param action  (optional)
     * @param location  (optional)
     * @param propertylist  (optional)
     * @param accountName  (optional)
     * @param containerName  (optional)
     * @param accessKey  (optional)
     * @param rootPath  (optional)
     * @param connectionURL  (optional)
     * @return OASOrgApacheJackrabbitOakSegmentAzur
     * @throws OAS.ApiException if fails to make API call
     */
    public OASOrgApacheJackrabbitOakSegmentAzur orgApacheJackrabbitOakSegmentAzureAzureSegmentStoreService(Map<String, Object> params) {
        List<OAS.Param> query = new List<OAS.Param>();

        // cast query params to verify their expected type
        query.addAll(client.makeParam('post', (Boolean) params.get('post')));
        query.addAll(client.makeParam('apply', (Boolean) params.get('apply')));
        query.addAll(client.makeParam('delete', (Boolean) params.get('r_delete')));
        query.addAll(client.makeParam('action', (String) params.get('action')));
        query.addAll(client.makeParam('$location', (String) params.get('location')));
        query.addAll(client.makeParam('propertylist', (List<String>) params.get('propertylist'), 'csv'));
        query.addAll(client.makeParam('accountName', (String) params.get('accountName')));
        query.addAll(client.makeParam('containerName', (String) params.get('containerName')));
        query.addAll(client.makeParam('accessKey', (String) params.get('accessKey')));
        query.addAll(client.makeParam('rootPath', (String) params.get('rootPath')));
        query.addAll(client.makeParam('connectionURL', (String) params.get('connectionURL')));

        List<OAS.Param> form = new List<OAS.Param>();

        return (OASOrgApacheJackrabbitOakSegmentAzur) client.invoke(
            'POST', '/system/console/configMgr/org.apache.jackrabbit.oak.segment.azure.AzureSegmentStoreService', '',
            query, form,
            new Map<String, Object>(),
            new Map<String, Object>(),
            new List<String>{ 'application/json', 'text/plain' },
            new List<String>(),
            new List<String> { 'aemAuth' },
            OASOrgApacheJackrabbitOakSegmentAzur.class
        );
    }
    /**
     * 
     * 
     * @param post  (optional)
     * @param apply  (optional)
     * @param r_delete  (optional)
     * @param action  (optional)
     * @param location  (optional)
     * @param propertylist  (optional)
     * @param repositoryHome  (optional)
     * @param tarmkMode  (optional)
     * @param tarmkSize  (optional)
     * @param segmentCacheSize  (optional)
     * @param stringCacheSize  (optional)
     * @param templateCacheSize  (optional)
     * @param stringDeduplicationCacheSize  (optional)
     * @param templateDeduplicationCacheSize  (optional)
     * @param nodeDeduplicationCacheSize  (optional)
     * @param pauseCompaction  (optional)
     * @param compactionRetryCount  (optional)
     * @param compactionForceTimeout  (optional)
     * @param compactionSizeDeltaEstimation  (optional)
     * @param compactionDisableEstimation  (optional)
     * @param compactionRetainedGenerations  (optional)
     * @param compactionMemoryThreshold  (optional)
     * @param compactionProgressLog  (optional)
     * @param standby  (optional)
     * @param customBlobStore  (optional)
     * @param customSegmentStore  (optional)
     * @param splitPersistence  (optional)
     * @param repositoryBackupDir  (optional)
     * @param blobGcMaxAgeInSecs  (optional)
     * @param blobTrackSnapshotIntervalInSecs  (optional)
     * @param role  (optional)
     * @param registerDescriptors  (optional)
     * @param dispatchChanges  (optional)
     * @return OASOrgApacheJackrabbitOakSegmentSegm
     * @throws OAS.ApiException if fails to make API call
     */
    public OASOrgApacheJackrabbitOakSegmentSegm orgApacheJackrabbitOakSegmentSegmentNodeStoreFactory(Map<String, Object> params) {
        List<OAS.Param> query = new List<OAS.Param>();

        // cast query params to verify their expected type
        query.addAll(client.makeParam('post', (Boolean) params.get('post')));
        query.addAll(client.makeParam('apply', (Boolean) params.get('apply')));
        query.addAll(client.makeParam('delete', (Boolean) params.get('r_delete')));
        query.addAll(client.makeParam('action', (String) params.get('action')));
        query.addAll(client.makeParam('$location', (String) params.get('location')));
        query.addAll(client.makeParam('propertylist', (List<String>) params.get('propertylist'), 'csv'));
        query.addAll(client.makeParam('repository.home', (String) params.get('repositoryHome')));
        query.addAll(client.makeParam('tarmk.mode', (String) params.get('tarmkMode')));
        query.addAll(client.makeParam('tarmk.size', (Integer) params.get('tarmkSize')));
        query.addAll(client.makeParam('segmentCache.size', (Integer) params.get('segmentCacheSize')));
        query.addAll(client.makeParam('stringCache.size', (Integer) params.get('stringCacheSize')));
        query.addAll(client.makeParam('templateCache.size', (Integer) params.get('templateCacheSize')));
        query.addAll(client.makeParam('stringDeduplicationCache.size', (Integer) params.get('stringDeduplicationCacheSize')));
        query.addAll(client.makeParam('templateDeduplicationCache.size', (Integer) params.get('templateDeduplicationCacheSize')));
        query.addAll(client.makeParam('nodeDeduplicationCache.size', (Integer) params.get('nodeDeduplicationCacheSize')));
        query.addAll(client.makeParam('pauseCompaction', (Boolean) params.get('pauseCompaction')));
        query.addAll(client.makeParam('compaction.retryCount', (Integer) params.get('compactionRetryCount')));
        query.addAll(client.makeParam('compaction.force.timeout', (Integer) params.get('compactionForceTimeout')));
        query.addAll(client.makeParam('compaction.sizeDeltaEstimation', (Integer) params.get('compactionSizeDeltaEstimation')));
        query.addAll(client.makeParam('compaction.disableEstimation', (Boolean) params.get('compactionDisableEstimation')));
        query.addAll(client.makeParam('compaction.retainedGenerations', (Integer) params.get('compactionRetainedGenerations')));
        query.addAll(client.makeParam('compaction.memoryThreshold', (Integer) params.get('compactionMemoryThreshold')));
        query.addAll(client.makeParam('compaction.progressLog', (Integer) params.get('compactionProgressLog')));
        query.addAll(client.makeParam('standby', (Boolean) params.get('standby')));
        query.addAll(client.makeParam('customBlobStore', (Boolean) params.get('customBlobStore')));
        query.addAll(client.makeParam('customSegmentStore', (Boolean) params.get('customSegmentStore')));
        query.addAll(client.makeParam('splitPersistence', (Boolean) params.get('splitPersistence')));
        query.addAll(client.makeParam('repository.backup.dir', (String) params.get('repositoryBackupDir')));
        query.addAll(client.makeParam('blobGcMaxAgeInSecs', (Integer) params.get('blobGcMaxAgeInSecs')));
        query.addAll(client.makeParam('blobTrackSnapshotIntervalInSecs', (Integer) params.get('blobTrackSnapshotIntervalInSecs')));
        query.addAll(client.makeParam('role', (String) params.get('role')));
        query.addAll(client.makeParam('registerDescriptors', (Boolean) params.get('registerDescriptors')));
        query.addAll(client.makeParam('dispatchChanges', (Boolean) params.get('dispatchChanges')));

        List<OAS.Param> form = new List<OAS.Param>();

        return (OASOrgApacheJackrabbitOakSegmentSegm) client.invoke(
            'POST', '/system/console/configMgr/org.apache.jackrabbit.oak.segment.SegmentNodeStoreFactory', '',
            query, form,
            new Map<String, Object>(),
            new Map<String, Object>(),
            new List<String>{ 'application/json', 'text/plain' },
            new List<String>(),
            new List<String> { 'aemAuth' },
            OASOrgApacheJackrabbitOakSegmentSegm.class
        );
    }
    /**
     * 
     * 
     * @param post  (optional)
     * @param apply  (optional)
     * @param r_delete  (optional)
     * @param action  (optional)
     * @param location  (optional)
     * @param propertylist  (optional)
     * @param commitsTrackerWriterGroups  (optional)
     * @return OASOrgApacheJackrabbitOakSegmentSegm
     * @throws OAS.ApiException if fails to make API call
     */
    public OASOrgApacheJackrabbitOakSegmentSegm orgApacheJackrabbitOakSegmentSegmentNodeStoreMonitorService(Map<String, Object> params) {
        List<OAS.Param> query = new List<OAS.Param>();

        // cast query params to verify their expected type
        query.addAll(client.makeParam('post', (Boolean) params.get('post')));
        query.addAll(client.makeParam('apply', (Boolean) params.get('apply')));
        query.addAll(client.makeParam('delete', (Boolean) params.get('r_delete')));
        query.addAll(client.makeParam('action', (String) params.get('action')));
        query.addAll(client.makeParam('$location', (String) params.get('location')));
        query.addAll(client.makeParam('propertylist', (List<String>) params.get('propertylist'), 'csv'));
        query.addAll(client.makeParams('commitsTrackerWriterGroups', (List<String>) params.get('commitsTrackerWriterGroups')));

        List<OAS.Param> form = new List<OAS.Param>();

        return (OASOrgApacheJackrabbitOakSegmentSegm) client.invoke(
            'POST', '/system/console/configMgr/org.apache.jackrabbit.oak.segment.SegmentNodeStoreMonitorService', '',
            query, form,
            new Map<String, Object>(),
            new Map<String, Object>(),
            new List<String>{ 'application/json', 'text/plain' },
            new List<String>(),
            new List<String> { 'aemAuth' },
            OASOrgApacheJackrabbitOakSegmentSegm.class
        );
    }
    /**
     * 
     * 
     * @param post  (optional)
     * @param apply  (optional)
     * @param r_delete  (optional)
     * @param action  (optional)
     * @param location  (optional)
     * @param propertylist  (optional)
     * @param repositoryHome  (optional)
     * @param tarmkMode  (optional)
     * @param tarmkSize  (optional)
     * @param segmentCacheSize  (optional)
     * @param stringCacheSize  (optional)
     * @param templateCacheSize  (optional)
     * @param stringDeduplicationCacheSize  (optional)
     * @param templateDeduplicationCacheSize  (optional)
     * @param nodeDeduplicationCacheSize  (optional)
     * @param pauseCompaction  (optional)
     * @param compactionRetryCount  (optional)
     * @param compactionForceTimeout  (optional)
     * @param compactionSizeDeltaEstimation  (optional)
     * @param compactionDisableEstimation  (optional)
     * @param compactionRetainedGenerations  (optional)
     * @param compactionMemoryThreshold  (optional)
     * @param compactionProgressLog  (optional)
     * @param standby  (optional)
     * @param customBlobStore  (optional)
     * @param customSegmentStore  (optional)
     * @param splitPersistence  (optional)
     * @param repositoryBackupDir  (optional)
     * @param blobGcMaxAgeInSecs  (optional)
     * @param blobTrackSnapshotIntervalInSecs  (optional)
     * @return OASOrgApacheJackrabbitOakSegmentSegm
     * @throws OAS.ApiException if fails to make API call
     */
    public OASOrgApacheJackrabbitOakSegmentSegm orgApacheJackrabbitOakSegmentSegmentNodeStoreService(Map<String, Object> params) {
        List<OAS.Param> query = new List<OAS.Param>();

        // cast query params to verify their expected type
        query.addAll(client.makeParam('post', (Boolean) params.get('post')));
        query.addAll(client.makeParam('apply', (Boolean) params.get('apply')));
        query.addAll(client.makeParam('delete', (Boolean) params.get('r_delete')));
        query.addAll(client.makeParam('action', (String) params.get('action')));
        query.addAll(client.makeParam('$location', (String) params.get('location')));
        query.addAll(client.makeParam('propertylist', (List<String>) params.get('propertylist'), 'csv'));
        query.addAll(client.makeParam('repository.home', (String) params.get('repositoryHome')));
        query.addAll(client.makeParam('tarmk.mode', (String) params.get('tarmkMode')));
        query.addAll(client.makeParam('tarmk.size', (Integer) params.get('tarmkSize')));
        query.addAll(client.makeParam('segmentCache.size', (Integer) params.get('segmentCacheSize')));
        query.addAll(client.makeParam('stringCache.size', (Integer) params.get('stringCacheSize')));
        query.addAll(client.makeParam('templateCache.size', (Integer) params.get('templateCacheSize')));
        query.addAll(client.makeParam('stringDeduplicationCache.size', (Integer) params.get('stringDeduplicationCacheSize')));
        query.addAll(client.makeParam('templateDeduplicationCache.size', (Integer) params.get('templateDeduplicationCacheSize')));
        query.addAll(client.makeParam('nodeDeduplicationCache.size', (Integer) params.get('nodeDeduplicationCacheSize')));
        query.addAll(client.makeParam('pauseCompaction', (Boolean) params.get('pauseCompaction')));
        query.addAll(client.makeParam('compaction.retryCount', (Integer) params.get('compactionRetryCount')));
        query.addAll(client.makeParam('compaction.force.timeout', (Integer) params.get('compactionForceTimeout')));
        query.addAll(client.makeParam('compaction.sizeDeltaEstimation', (Integer) params.get('compactionSizeDeltaEstimation')));
        query.addAll(client.makeParam('compaction.disableEstimation', (Boolean) params.get('compactionDisableEstimation')));
        query.addAll(client.makeParam('compaction.retainedGenerations', (Integer) params.get('compactionRetainedGenerations')));
        query.addAll(client.makeParam('compaction.memoryThreshold', (Integer) params.get('compactionMemoryThreshold')));
        query.addAll(client.makeParam('compaction.progressLog', (Integer) params.get('compactionProgressLog')));
        query.addAll(client.makeParam('standby', (Boolean) params.get('standby')));
        query.addAll(client.makeParam('customBlobStore', (Boolean) params.get('customBlobStore')));
        query.addAll(client.makeParam('customSegmentStore', (Boolean) params.get('customSegmentStore')));
        query.addAll(client.makeParam('splitPersistence', (Boolean) params.get('splitPersistence')));
        query.addAll(client.makeParam('repository.backup.dir', (String) params.get('repositoryBackupDir')));
        query.addAll(client.makeParam('blobGcMaxAgeInSecs', (Integer) params.get('blobGcMaxAgeInSecs')));
        query.addAll(client.makeParam('blobTrackSnapshotIntervalInSecs', (Integer) params.get('blobTrackSnapshotIntervalInSecs')));

        List<OAS.Param> form = new List<OAS.Param>();

        return (OASOrgApacheJackrabbitOakSegmentSegm) client.invoke(
            'POST', '/system/console/configMgr/org.apache.jackrabbit.oak.segment.SegmentNodeStoreService', '',
            query, form,
            new Map<String, Object>(),
            new Map<String, Object>(),
            new List<String>{ 'application/json', 'text/plain' },
            new List<String>(),
            new List<String> { 'aemAuth' },
            OASOrgApacheJackrabbitOakSegmentSegm.class
        );
    }
    /**
     * 
     * 
     * @param post  (optional)
     * @param apply  (optional)
     * @param r_delete  (optional)
     * @param action  (optional)
     * @param location  (optional)
     * @param propertylist  (optional)
     * @param orgApacheSlingInstallerConfigurationPersist  (optional)
     * @param mode  (optional)
     * @param port  (optional)
     * @param primaryHost  (optional)
     * @param interval  (optional)
     * @param primaryAllowedClientIpRanges  (optional)
     * @param secure  (optional)
     * @param standbyReadtimeout  (optional)
     * @param standbyAutoclean  (optional)
     * @return OASOrgApacheJackrabbitOakSegmentStan
     * @throws OAS.ApiException if fails to make API call
     */
    public OASOrgApacheJackrabbitOakSegmentStan orgApacheJackrabbitOakSegmentStandbyStoreStandbyStoreService(Map<String, Object> params) {
        List<OAS.Param> query = new List<OAS.Param>();

        // cast query params to verify their expected type
        query.addAll(client.makeParam('post', (Boolean) params.get('post')));
        query.addAll(client.makeParam('apply', (Boolean) params.get('apply')));
        query.addAll(client.makeParam('delete', (Boolean) params.get('r_delete')));
        query.addAll(client.makeParam('action', (String) params.get('action')));
        query.addAll(client.makeParam('$location', (String) params.get('location')));
        query.addAll(client.makeParam('propertylist', (List<String>) params.get('propertylist'), 'csv'));
        query.addAll(client.makeParam('org.apache.sling.installer.configuration.persist', (Boolean) params.get('orgApacheSlingInstallerConfigurationPersist')));
        query.addAll(client.makeParam('mode', (String) params.get('mode')));
        query.addAll(client.makeParam('port', (Integer) params.get('port')));
        query.addAll(client.makeParam('primary.host', (String) params.get('primaryHost')));
        query.addAll(client.makeParam('interval', (Integer) params.get('interval')));
        query.addAll(client.makeParams('primary.allowed-client-ip-ranges', (List<String>) params.get('primaryAllowedClientIpRanges')));
        query.addAll(client.makeParam('secure', (Boolean) params.get('secure')));
        query.addAll(client.makeParam('standby.readtimeout', (Integer) params.get('standbyReadtimeout')));
        query.addAll(client.makeParam('standby.autoclean', (Boolean) params.get('standbyAutoclean')));

        List<OAS.Param> form = new List<OAS.Param>();

        return (OASOrgApacheJackrabbitOakSegmentStan) client.invoke(
            'POST', '/system/console/configMgr/org.apache.jackrabbit.oak.segment.standby.store.StandbyStoreService', '',
            query, form,
            new Map<String, Object>(),
            new Map<String, Object>(),
            new List<String>{ 'application/json', 'text/plain' },
            new List<String>(),
            new List<String> { 'aemAuth' },
            OASOrgApacheJackrabbitOakSegmentStan.class
        );
    }
    /**
     * 
     * 
     * @param post  (optional)
     * @param apply  (optional)
     * @param r_delete  (optional)
     * @param action  (optional)
     * @param location  (optional)
     * @param propertylist  (optional)
     * @param handlerName  (optional)
     * @param userExpirationTime  (optional)
     * @param userAutoMembership  (optional)
     * @param userPropertyMapping  (optional)
     * @param userPathPrefix  (optional)
     * @param userMembershipExpTime  (optional)
     * @param userMembershipNestingDepth  (optional)
     * @param userDynamicMembership  (optional)
     * @param userDisableMissing  (optional)
     * @param groupExpirationTime  (optional)
     * @param groupAutoMembership  (optional)
     * @param groupPropertyMapping  (optional)
     * @param groupPathPrefix  (optional)
     * @param enableRFC7613UsercaseMappedProfile  (optional)
     * @return OASOrgApacheJackrabbitOakSpiSecurity
     * @throws OAS.ApiException if fails to make API call
     */
    public OASOrgApacheJackrabbitOakSpiSecurity orgApacheJackrabbitOakSpiSecurityAuthenticationExternalImplDe(Map<String, Object> params) {
        List<OAS.Param> query = new List<OAS.Param>();

        // cast query params to verify their expected type
        query.addAll(client.makeParam('post', (Boolean) params.get('post')));
        query.addAll(client.makeParam('apply', (Boolean) params.get('apply')));
        query.addAll(client.makeParam('delete', (Boolean) params.get('r_delete')));
        query.addAll(client.makeParam('action', (String) params.get('action')));
        query.addAll(client.makeParam('$location', (String) params.get('location')));
        query.addAll(client.makeParam('propertylist', (List<String>) params.get('propertylist'), 'csv'));
        query.addAll(client.makeParam('handler.name', (String) params.get('handlerName')));
        query.addAll(client.makeParam('user.expirationTime', (String) params.get('userExpirationTime')));
        query.addAll(client.makeParams('user.autoMembership', (List<String>) params.get('userAutoMembership')));
        query.addAll(client.makeParams('user.propertyMapping', (List<String>) params.get('userPropertyMapping')));
        query.addAll(client.makeParam('user.pathPrefix', (String) params.get('userPathPrefix')));
        query.addAll(client.makeParam('user.membershipExpTime', (String) params.get('userMembershipExpTime')));
        query.addAll(client.makeParam('user.membershipNestingDepth', (Integer) params.get('userMembershipNestingDepth')));
        query.addAll(client.makeParam('user.dynamicMembership', (Boolean) params.get('userDynamicMembership')));
        query.addAll(client.makeParam('user.disableMissing', (Boolean) params.get('userDisableMissing')));
        query.addAll(client.makeParam('group.expirationTime', (String) params.get('groupExpirationTime')));
        query.addAll(client.makeParams('group.autoMembership', (List<String>) params.get('groupAutoMembership')));
        query.addAll(client.makeParams('group.propertyMapping', (List<String>) params.get('groupPropertyMapping')));
        query.addAll(client.makeParam('group.pathPrefix', (String) params.get('groupPathPrefix')));
        query.addAll(client.makeParam('enableRFC7613UsercaseMappedProfile', (Boolean) params.get('enableRFC7613UsercaseMappedProfile')));

        List<OAS.Param> form = new List<OAS.Param>();

        return (OASOrgApacheJackrabbitOakSpiSecurity) client.invoke(
            'POST', '/system/console/configMgr/org.apache.jackrabbit.oak.spi.security.authentication.external.impl.DefaultSyncHandler', '',
            query, form,
            new Map<String, Object>(),
            new Map<String, Object>(),
            new List<String>{ 'application/json', 'text/plain' },
            new List<String>(),
            new List<String> { 'aemAuth' },
            OASOrgApacheJackrabbitOakSpiSecurity.class
        );
    }
    /**
     * 
     * 
     * @param post  (optional)
     * @param apply  (optional)
     * @param r_delete  (optional)
     * @param action  (optional)
     * @param location  (optional)
     * @param propertylist  (optional)
     * @param jaasRanking  (optional)
     * @param jaasControlFlag  (optional)
     * @param jaasRealmName  (optional)
     * @param idpName  (optional)
     * @param syncHandlerName  (optional)
     * @return OASOrgApacheJackrabbitOakSpiSecurity
     * @throws OAS.ApiException if fails to make API call
     */
    public OASOrgApacheJackrabbitOakSpiSecurity orgApacheJackrabbitOakSpiSecurityAuthenticationExternalImplEx(Map<String, Object> params) {
        List<OAS.Param> query = new List<OAS.Param>();

        // cast query params to verify their expected type
        query.addAll(client.makeParam('post', (Boolean) params.get('post')));
        query.addAll(client.makeParam('apply', (Boolean) params.get('apply')));
        query.addAll(client.makeParam('delete', (Boolean) params.get('r_delete')));
        query.addAll(client.makeParam('action', (String) params.get('action')));
        query.addAll(client.makeParam('$location', (String) params.get('location')));
        query.addAll(client.makeParam('propertylist', (List<String>) params.get('propertylist'), 'csv'));
        query.addAll(client.makeParam('jaas.ranking', (Integer) params.get('jaasRanking')));
        query.addAll(client.makeParam('jaas.controlFlag', (String) params.get('jaasControlFlag')));
        query.addAll(client.makeParam('jaas.realmName', (String) params.get('jaasRealmName')));
        query.addAll(client.makeParam('idp.name', (String) params.get('idpName')));
        query.addAll(client.makeParam('sync.handlerName', (String) params.get('syncHandlerName')));

        List<OAS.Param> form = new List<OAS.Param>();

        return (OASOrgApacheJackrabbitOakSpiSecurity) client.invoke(
            'POST', '/system/console/configMgr/org.apache.jackrabbit.oak.spi.security.authentication.external.impl.ExternalLoginModuleFactory', '',
            query, form,
            new Map<String, Object>(),
            new Map<String, Object>(),
            new List<String>{ 'application/json', 'text/plain' },
            new List<String>(),
            new List<String> { 'aemAuth' },
            OASOrgApacheJackrabbitOakSpiSecurity.class
        );
    }
    /**
     * 
     * 
     * @param post  (optional)
     * @param apply  (optional)
     * @param r_delete  (optional)
     * @param action  (optional)
     * @param location  (optional)
     * @param propertylist  (optional)
     * @param protectExternalId  (optional)
     * @return OASOrgApacheJackrabbitOakSpiSecurity
     * @throws OAS.ApiException if fails to make API call
     */
    public OASOrgApacheJackrabbitOakSpiSecurity orgApacheJackrabbitOakSpiSecurityAuthenticationExternalImplPr(Map<String, Object> params) {
        List<OAS.Param> query = new List<OAS.Param>();

        // cast query params to verify their expected type
        query.addAll(client.makeParam('post', (Boolean) params.get('post')));
        query.addAll(client.makeParam('apply', (Boolean) params.get('apply')));
        query.addAll(client.makeParam('delete', (Boolean) params.get('r_delete')));
        query.addAll(client.makeParam('action', (String) params.get('action')));
        query.addAll(client.makeParam('$location', (String) params.get('location')));
        query.addAll(client.makeParam('propertylist', (List<String>) params.get('propertylist'), 'csv'));
        query.addAll(client.makeParam('protectExternalId', (Boolean) params.get('protectExternalId')));

        List<OAS.Param> form = new List<OAS.Param>();

        return (OASOrgApacheJackrabbitOakSpiSecurity) client.invoke(
            'POST', '/system/console/configMgr/org.apache.jackrabbit.oak.spi.security.authentication.external.impl.principal.ExternalPrincipalConfiguration', '',
            query, form,
            new Map<String, Object>(),
            new Map<String, Object>(),
            new List<String>{ 'application/json', 'text/plain' },
            new List<String>(),
            new List<String> { 'aemAuth' },
            OASOrgApacheJackrabbitOakSpiSecurity.class
        );
    }
    /**
     * 
     * 
     * @param post  (optional)
     * @param apply  (optional)
     * @param r_delete  (optional)
     * @param action  (optional)
     * @param location  (optional)
     * @param propertylist  (optional)
     * @param cugSupportedPaths  (optional)
     * @param cugEnabled  (optional)
     * @param configurationRanking  (optional)
     * @return OASOrgApacheJackrabbitOakSpiSecurity
     * @throws OAS.ApiException if fails to make API call
     */
    public OASOrgApacheJackrabbitOakSpiSecurity orgApacheJackrabbitOakSpiSecurityAuthorizationCugImplCugConfi(Map<String, Object> params) {
        List<OAS.Param> query = new List<OAS.Param>();

        // cast query params to verify their expected type
        query.addAll(client.makeParam('post', (Boolean) params.get('post')));
        query.addAll(client.makeParam('apply', (Boolean) params.get('apply')));
        query.addAll(client.makeParam('delete', (Boolean) params.get('r_delete')));
        query.addAll(client.makeParam('action', (String) params.get('action')));
        query.addAll(client.makeParam('$location', (String) params.get('location')));
        query.addAll(client.makeParam('propertylist', (List<String>) params.get('propertylist'), 'csv'));
        query.addAll(client.makeParams('cugSupportedPaths', (List<String>) params.get('cugSupportedPaths')));
        query.addAll(client.makeParam('cugEnabled', (Boolean) params.get('cugEnabled')));
        query.addAll(client.makeParam('configurationRanking', (Integer) params.get('configurationRanking')));

        List<OAS.Param> form = new List<OAS.Param>();

        return (OASOrgApacheJackrabbitOakSpiSecurity) client.invoke(
            'POST', '/system/console/configMgr/org.apache.jackrabbit.oak.spi.security.authorization.cug.impl.CugConfiguration', '',
            query, form,
            new Map<String, Object>(),
            new Map<String, Object>(),
            new List<String>{ 'application/json', 'text/plain' },
            new List<String>(),
            new List<String> { 'aemAuth' },
            OASOrgApacheJackrabbitOakSpiSecurity.class
        );
    }
    /**
     * 
     * 
     * @param post  (optional)
     * @param apply  (optional)
     * @param r_delete  (optional)
     * @param action  (optional)
     * @param location  (optional)
     * @param propertylist  (optional)
     * @param principalNames  (optional)
     * @return OASOrgApacheJackrabbitOakSpiSecurity
     * @throws OAS.ApiException if fails to make API call
     */
    public OASOrgApacheJackrabbitOakSpiSecurity orgApacheJackrabbitOakSpiSecurityAuthorizationCugImplCugExclu(Map<String, Object> params) {
        List<OAS.Param> query = new List<OAS.Param>();

        // cast query params to verify their expected type
        query.addAll(client.makeParam('post', (Boolean) params.get('post')));
        query.addAll(client.makeParam('apply', (Boolean) params.get('apply')));
        query.addAll(client.makeParam('delete', (Boolean) params.get('r_delete')));
        query.addAll(client.makeParam('action', (String) params.get('action')));
        query.addAll(client.makeParam('$location', (String) params.get('location')));
        query.addAll(client.makeParam('propertylist', (List<String>) params.get('propertylist'), 'csv'));
        query.addAll(client.makeParams('principalNames', (List<String>) params.get('principalNames')));

        List<OAS.Param> form = new List<OAS.Param>();

        return (OASOrgApacheJackrabbitOakSpiSecurity) client.invoke(
            'POST', '/system/console/configMgr/org.apache.jackrabbit.oak.spi.security.authorization.cug.impl.CugExcludeImpl', '',
            query, form,
            new Map<String, Object>(),
            new Map<String, Object>(),
            new List<String>{ 'application/json', 'text/plain' },
            new List<String>(),
            new List<String> { 'aemAuth' },
            OASOrgApacheJackrabbitOakSpiSecurity.class
        );
    }
    /**
     * 
     * 
     * @param post  (optional)
     * @param apply  (optional)
     * @param r_delete  (optional)
     * @param action  (optional)
     * @param location  (optional)
     * @param propertylist  (optional)
     * @param enabledActions  (optional)
     * @param userPrivilegeNames  (optional)
     * @param groupPrivilegeNames  (optional)
     * @param constraint  (optional)
     * @return OASOrgApacheJackrabbitOakSpiSecurity
     * @throws OAS.ApiException if fails to make API call
     */
    public OASOrgApacheJackrabbitOakSpiSecurity orgApacheJackrabbitOakSpiSecurityUserActionDefaultAuthorizable(Map<String, Object> params) {
        List<OAS.Param> query = new List<OAS.Param>();

        // cast query params to verify their expected type
        query.addAll(client.makeParam('post', (Boolean) params.get('post')));
        query.addAll(client.makeParam('apply', (Boolean) params.get('apply')));
        query.addAll(client.makeParam('delete', (Boolean) params.get('r_delete')));
        query.addAll(client.makeParam('action', (String) params.get('action')));
        query.addAll(client.makeParam('$location', (String) params.get('location')));
        query.addAll(client.makeParam('propertylist', (List<String>) params.get('propertylist'), 'csv'));
        query.addAll(client.makeParam('enabledActions', (String) params.get('enabledActions')));
        query.addAll(client.makeParams('userPrivilegeNames', (List<String>) params.get('userPrivilegeNames')));
        query.addAll(client.makeParams('groupPrivilegeNames', (List<String>) params.get('groupPrivilegeNames')));
        query.addAll(client.makeParam('constraint', (String) params.get('constraint')));

        List<OAS.Param> form = new List<OAS.Param>();

        return (OASOrgApacheJackrabbitOakSpiSecurity) client.invoke(
            'POST', '/system/console/configMgr/org.apache.jackrabbit.oak.spi.security.user.action.DefaultAuthorizableActionProvider', '',
            query, form,
            new Map<String, Object>(),
            new Map<String, Object>(),
            new List<String>{ 'application/json', 'text/plain' },
            new List<String>(),
            new List<String> { 'aemAuth' },
            OASOrgApacheJackrabbitOakSpiSecurity.class
        );
    }
    /**
     * 
     * 
     * @param post  (optional)
     * @param apply  (optional)
     * @param r_delete  (optional)
     * @param action  (optional)
     * @param location  (optional)
     * @param propertylist  (optional)
     * @param packageRoots  (optional)
     * @return OASOrgApacheJackrabbitVaultPackaging
     * @throws OAS.ApiException if fails to make API call
     */
    public OASOrgApacheJackrabbitVaultPackaging orgApacheJackrabbitVaultPackagingImplPackagingImpl(Map<String, Object> params) {
        List<OAS.Param> query = new List<OAS.Param>();

        // cast query params to verify their expected type
        query.addAll(client.makeParam('post', (Boolean) params.get('post')));
        query.addAll(client.makeParam('apply', (Boolean) params.get('apply')));
        query.addAll(client.makeParam('delete', (Boolean) params.get('r_delete')));
        query.addAll(client.makeParam('action', (String) params.get('action')));
        query.addAll(client.makeParam('$location', (String) params.get('location')));
        query.addAll(client.makeParam('propertylist', (List<String>) params.get('propertylist'), 'csv'));
        query.addAll(client.makeParams('packageRoots', (List<String>) params.get('packageRoots')));

        List<OAS.Param> form = new List<OAS.Param>();

        return (OASOrgApacheJackrabbitVaultPackaging) client.invoke(
            'POST', '/system/console/configMgr/org.apache.jackrabbit.vault.packaging.impl.PackagingImpl', '',
            query, form,
            new Map<String, Object>(),
            new Map<String, Object>(),
            new List<String>{ 'application/json', 'text/plain' },
            new List<String>(),
            new List<String> { 'aemAuth' },
            OASOrgApacheJackrabbitVaultPackaging.class
        );
    }
    /**
     * 
     * 
     * @param post  (optional)
     * @param apply  (optional)
     * @param r_delete  (optional)
     * @param action  (optional)
     * @param location  (optional)
     * @param propertylist  (optional)
     * @param homePath  (optional)
     * @return OASOrgApacheJackrabbitVaultPackaging
     * @throws OAS.ApiException if fails to make API call
     */
    public OASOrgApacheJackrabbitVaultPackaging orgApacheJackrabbitVaultPackagingRegistryImplFSPackageRegistry(Map<String, Object> params) {
        List<OAS.Param> query = new List<OAS.Param>();

        // cast query params to verify their expected type
        query.addAll(client.makeParam('post', (Boolean) params.get('post')));
        query.addAll(client.makeParam('apply', (Boolean) params.get('apply')));
        query.addAll(client.makeParam('delete', (Boolean) params.get('r_delete')));
        query.addAll(client.makeParam('action', (String) params.get('action')));
        query.addAll(client.makeParam('$location', (String) params.get('location')));
        query.addAll(client.makeParam('propertylist', (List<String>) params.get('propertylist'), 'csv'));
        query.addAll(client.makeParam('homePath', (String) params.get('homePath')));

        List<OAS.Param> form = new List<OAS.Param>();

        return (OASOrgApacheJackrabbitVaultPackaging) client.invoke(
            'POST', '/system/console/configMgr/org.apache.jackrabbit.vault.packaging.registry.impl.FSPackageRegistry', '',
            query, form,
            new Map<String, Object>(),
            new Map<String, Object>(),
            new List<String>{ 'application/json', 'text/plain' },
            new List<String>(),
            new List<String> { 'aemAuth' },
            OASOrgApacheJackrabbitVaultPackaging.class
        );
    }
    /**
     * 
     * 
     * @param post  (optional)
     * @param apply  (optional)
     * @param r_delete  (optional)
     * @param action  (optional)
     * @param location  (optional)
     * @param propertylist  (optional)
     * @param slingServletMethods  (optional)
     * @param slingServletPaths  (optional)
     * @return OASOrgApacheSlingAuthCoreImplLogoutS
     * @throws OAS.ApiException if fails to make API call
     */
    public OASOrgApacheSlingAuthCoreImplLogoutS orgApacheSlingAuthCoreImplLogoutServlet(Map<String, Object> params) {
        List<OAS.Param> query = new List<OAS.Param>();

        // cast query params to verify their expected type
        query.addAll(client.makeParam('post', (Boolean) params.get('post')));
        query.addAll(client.makeParam('apply', (Boolean) params.get('apply')));
        query.addAll(client.makeParam('delete', (Boolean) params.get('r_delete')));
        query.addAll(client.makeParam('action', (String) params.get('action')));
        query.addAll(client.makeParam('$location', (String) params.get('location')));
        query.addAll(client.makeParam('propertylist', (List<String>) params.get('propertylist'), 'csv'));
        query.addAll(client.makeParams('sling.servlet.methods', (List<String>) params.get('slingServletMethods')));
        query.addAll(client.makeParam('sling.servlet.paths', (String) params.get('slingServletPaths')));

        List<OAS.Param> form = new List<OAS.Param>();

        return (OASOrgApacheSlingAuthCoreImplLogoutS) client.invoke(
            'POST', '/system/console/configMgr/org.apache.sling.auth.core.impl.LogoutServlet', '',
            query, form,
            new Map<String, Object>(),
            new Map<String, Object>(),
            new List<String>{ 'application/json', 'text/plain' },
            new List<String>(),
            new List<String> { 'aemAuth' },
            OASOrgApacheSlingAuthCoreImplLogoutS.class
        );
    }
    /**
     * 
     * 
     * @param post  (optional)
     * @param apply  (optional)
     * @param r_delete  (optional)
     * @param action  (optional)
     * @param location  (optional)
     * @param propertylist  (optional)
     * @param enabled  (optional)
     * @return OASOrgApacheSlingCaconfigImplConfigu
     * @throws OAS.ApiException if fails to make API call
     */
    public OASOrgApacheSlingCaconfigImplConfigu orgApacheSlingCaconfigImplConfigurationBindingsValueProvider(Map<String, Object> params) {
        List<OAS.Param> query = new List<OAS.Param>();

        // cast query params to verify their expected type
        query.addAll(client.makeParam('post', (Boolean) params.get('post')));
        query.addAll(client.makeParam('apply', (Boolean) params.get('apply')));
        query.addAll(client.makeParam('delete', (Boolean) params.get('r_delete')));
        query.addAll(client.makeParam('action', (String) params.get('action')));
        query.addAll(client.makeParam('$location', (String) params.get('location')));
        query.addAll(client.makeParam('propertylist', (List<String>) params.get('propertylist'), 'csv'));
        query.addAll(client.makeParam('enabled', (Boolean) params.get('enabled')));

        List<OAS.Param> form = new List<OAS.Param>();

        return (OASOrgApacheSlingCaconfigImplConfigu) client.invoke(
            'POST', '/system/console/configMgr/org.apache.sling.caconfig.impl.ConfigurationBindingsValueProvider', '',
            query, form,
            new Map<String, Object>(),
            new Map<String, Object>(),
            new List<String>{ 'application/json', 'text/plain' },
            new List<String>(),
            new List<String> { 'aemAuth' },
            OASOrgApacheSlingCaconfigImplConfigu.class
        );
    }
    /**
     * 
     * 
     * @param post  (optional)
     * @param apply  (optional)
     * @param r_delete  (optional)
     * @param action  (optional)
     * @param location  (optional)
     * @param propertylist  (optional)
     * @param configBucketNames  (optional)
     * @return OASOrgApacheSlingCaconfigImplConfigu
     * @throws OAS.ApiException if fails to make API call
     */
    public OASOrgApacheSlingCaconfigImplConfigu orgApacheSlingCaconfigImplConfigurationResolverImpl(Map<String, Object> params) {
        List<OAS.Param> query = new List<OAS.Param>();

        // cast query params to verify their expected type
        query.addAll(client.makeParam('post', (Boolean) params.get('post')));
        query.addAll(client.makeParam('apply', (Boolean) params.get('apply')));
        query.addAll(client.makeParam('delete', (Boolean) params.get('r_delete')));
        query.addAll(client.makeParam('action', (String) params.get('action')));
        query.addAll(client.makeParam('$location', (String) params.get('location')));
        query.addAll(client.makeParam('propertylist', (List<String>) params.get('propertylist'), 'csv'));
        query.addAll(client.makeParams('configBucketNames', (List<String>) params.get('configBucketNames')));

        List<OAS.Param> form = new List<OAS.Param>();

        return (OASOrgApacheSlingCaconfigImplConfigu) client.invoke(
            'POST', '/system/console/configMgr/org.apache.sling.caconfig.impl.ConfigurationResolverImpl', '',
            query, form,
            new Map<String, Object>(),
            new Map<String, Object>(),
            new List<String>{ 'application/json', 'text/plain' },
            new List<String>(),
            new List<String> { 'aemAuth' },
            OASOrgApacheSlingCaconfigImplConfigu.class
        );
    }
    /**
     * 
     * 
     * @param post  (optional)
     * @param apply  (optional)
     * @param r_delete  (optional)
     * @param action  (optional)
     * @param location  (optional)
     * @param propertylist  (optional)
     * @param enabled  (optional)
     * @param configPropertyInheritancePropertyNames  (optional)
     * @return OASOrgApacheSlingCaconfigImplDefDefa
     * @throws OAS.ApiException if fails to make API call
     */
    public OASOrgApacheSlingCaconfigImplDefDefa orgApacheSlingCaconfigImplDefDefaultConfigurationInheritanceStra(Map<String, Object> params) {
        List<OAS.Param> query = new List<OAS.Param>();

        // cast query params to verify their expected type
        query.addAll(client.makeParam('post', (Boolean) params.get('post')));
        query.addAll(client.makeParam('apply', (Boolean) params.get('apply')));
        query.addAll(client.makeParam('delete', (Boolean) params.get('r_delete')));
        query.addAll(client.makeParam('action', (String) params.get('action')));
        query.addAll(client.makeParam('$location', (String) params.get('location')));
        query.addAll(client.makeParam('propertylist', (List<String>) params.get('propertylist'), 'csv'));
        query.addAll(client.makeParam('enabled', (Boolean) params.get('enabled')));
        query.addAll(client.makeParams('configPropertyInheritancePropertyNames', (List<String>) params.get('configPropertyInheritancePropertyNames')));

        List<OAS.Param> form = new List<OAS.Param>();

        return (OASOrgApacheSlingCaconfigImplDefDefa) client.invoke(
            'POST', '/system/console/configMgr/org.apache.sling.caconfig.impl.def.DefaultConfigurationInheritanceStrategy', '',
            query, form,
            new Map<String, Object>(),
            new Map<String, Object>(),
            new List<String>{ 'application/json', 'text/plain' },
            new List<String>(),
            new List<String> { 'aemAuth' },
            OASOrgApacheSlingCaconfigImplDefDefa.class
        );
    }
    /**
     * 
     * 
     * @param post  (optional)
     * @param apply  (optional)
     * @param r_delete  (optional)
     * @param action  (optional)
     * @param location  (optional)
     * @param propertylist  (optional)
     * @param enabled  (optional)
     * @return OASOrgApacheSlingCaconfigImplDefDefa
     * @throws OAS.ApiException if fails to make API call
     */
    public OASOrgApacheSlingCaconfigImplDefDefa orgApacheSlingCaconfigImplDefDefaultConfigurationPersistenceStra(Map<String, Object> params) {
        List<OAS.Param> query = new List<OAS.Param>();

        // cast query params to verify their expected type
        query.addAll(client.makeParam('post', (Boolean) params.get('post')));
        query.addAll(client.makeParam('apply', (Boolean) params.get('apply')));
        query.addAll(client.makeParam('delete', (Boolean) params.get('r_delete')));
        query.addAll(client.makeParam('action', (String) params.get('action')));
        query.addAll(client.makeParam('$location', (String) params.get('location')));
        query.addAll(client.makeParam('propertylist', (List<String>) params.get('propertylist'), 'csv'));
        query.addAll(client.makeParam('enabled', (Boolean) params.get('enabled')));

        List<OAS.Param> form = new List<OAS.Param>();

        return (OASOrgApacheSlingCaconfigImplDefDefa) client.invoke(
            'POST', '/system/console/configMgr/org.apache.sling.caconfig.impl.def.DefaultConfigurationPersistenceStrategy', '',
            query, form,
            new Map<String, Object>(),
            new Map<String, Object>(),
            new List<String>{ 'application/json', 'text/plain' },
            new List<String>(),
            new List<String> { 'aemAuth' },
            OASOrgApacheSlingCaconfigImplDefDefa.class
        );
    }
    /**
     * 
     * 
     * @param post  (optional)
     * @param apply  (optional)
     * @param r_delete  (optional)
     * @param action  (optional)
     * @param location  (optional)
     * @param propertylist  (optional)
     * @param description  (optional)
     * @param overrides  (optional)
     * @param enabled  (optional)
     * @param serviceRanking  (optional)
     * @return OASOrgApacheSlingCaconfigImplOverrid
     * @throws OAS.ApiException if fails to make API call
     */
    public OASOrgApacheSlingCaconfigImplOverrid orgApacheSlingCaconfigImplOverrideOsgiConfigurationOverrideProvi(Map<String, Object> params) {
        List<OAS.Param> query = new List<OAS.Param>();

        // cast query params to verify their expected type
        query.addAll(client.makeParam('post', (Boolean) params.get('post')));
        query.addAll(client.makeParam('apply', (Boolean) params.get('apply')));
        query.addAll(client.makeParam('delete', (Boolean) params.get('r_delete')));
        query.addAll(client.makeParam('action', (String) params.get('action')));
        query.addAll(client.makeParam('$location', (String) params.get('location')));
        query.addAll(client.makeParam('propertylist', (List<String>) params.get('propertylist'), 'csv'));
        query.addAll(client.makeParam('description', (String) params.get('description')));
        query.addAll(client.makeParams('overrides', (List<String>) params.get('overrides')));
        query.addAll(client.makeParam('enabled', (Boolean) params.get('enabled')));
        query.addAll(client.makeParam('service.ranking', (Integer) params.get('serviceRanking')));

        List<OAS.Param> form = new List<OAS.Param>();

        return (OASOrgApacheSlingCaconfigImplOverrid) client.invoke(
            'POST', '/system/console/configMgr/org.apache.sling.caconfig.impl.override.OsgiConfigurationOverrideProvider', '',
            query, form,
            new Map<String, Object>(),
            new Map<String, Object>(),
            new List<String>{ 'application/json', 'text/plain' },
            new List<String>(),
            new List<String> { 'aemAuth' },
            OASOrgApacheSlingCaconfigImplOverrid.class
        );
    }
    /**
     * 
     * 
     * @param post  (optional)
     * @param apply  (optional)
     * @param r_delete  (optional)
     * @param action  (optional)
     * @param location  (optional)
     * @param propertylist  (optional)
     * @param enabled  (optional)
     * @param serviceRanking  (optional)
     * @return OASOrgApacheSlingCaconfigImplOverrid
     * @throws OAS.ApiException if fails to make API call
     */
    public OASOrgApacheSlingCaconfigImplOverrid orgApacheSlingCaconfigImplOverrideSystemPropertyConfigurationOve(Map<String, Object> params) {
        List<OAS.Param> query = new List<OAS.Param>();

        // cast query params to verify their expected type
        query.addAll(client.makeParam('post', (Boolean) params.get('post')));
        query.addAll(client.makeParam('apply', (Boolean) params.get('apply')));
        query.addAll(client.makeParam('delete', (Boolean) params.get('r_delete')));
        query.addAll(client.makeParam('action', (String) params.get('action')));
        query.addAll(client.makeParam('$location', (String) params.get('location')));
        query.addAll(client.makeParam('propertylist', (List<String>) params.get('propertylist'), 'csv'));
        query.addAll(client.makeParam('enabled', (Boolean) params.get('enabled')));
        query.addAll(client.makeParam('service.ranking', (Integer) params.get('serviceRanking')));

        List<OAS.Param> form = new List<OAS.Param>();

        return (OASOrgApacheSlingCaconfigImplOverrid) client.invoke(
            'POST', '/system/console/configMgr/org.apache.sling.caconfig.impl.override.SystemPropertyConfigurationOverrideProvider', '',
            query, form,
            new Map<String, Object>(),
            new Map<String, Object>(),
            new List<String>{ 'application/json', 'text/plain' },
            new List<String>(),
            new List<String> { 'aemAuth' },
            OASOrgApacheSlingCaconfigImplOverrid.class
        );
    }
    /**
     * 
     * 
     * @param post  (optional)
     * @param apply  (optional)
     * @param r_delete  (optional)
     * @param action  (optional)
     * @param location  (optional)
     * @param propertylist  (optional)
     * @param ignorePropertyNameRegex  (optional)
     * @param configCollectionPropertiesResourceNames  (optional)
     * @return OASOrgApacheSlingCaconfigManagementI
     * @throws OAS.ApiException if fails to make API call
     */
    public OASOrgApacheSlingCaconfigManagementI orgApacheSlingCaconfigManagementImplConfigurationManagementSetti(Map<String, Object> params) {
        List<OAS.Param> query = new List<OAS.Param>();

        // cast query params to verify their expected type
        query.addAll(client.makeParam('post', (Boolean) params.get('post')));
        query.addAll(client.makeParam('apply', (Boolean) params.get('apply')));
        query.addAll(client.makeParam('delete', (Boolean) params.get('r_delete')));
        query.addAll(client.makeParam('action', (String) params.get('action')));
        query.addAll(client.makeParam('$location', (String) params.get('location')));
        query.addAll(client.makeParam('propertylist', (List<String>) params.get('propertylist'), 'csv'));
        query.addAll(client.makeParams('ignorePropertyNameRegex', (List<String>) params.get('ignorePropertyNameRegex')));
        query.addAll(client.makeParams('configCollectionPropertiesResourceNames', (List<String>) params.get('configCollectionPropertiesResourceNames')));

        List<OAS.Param> form = new List<OAS.Param>();

        return (OASOrgApacheSlingCaconfigManagementI) client.invoke(
            'POST', '/system/console/configMgr/org.apache.sling.caconfig.management.impl.ConfigurationManagementSettingsImpl', '',
            query, form,
            new Map<String, Object>(),
            new Map<String, Object>(),
            new List<String>{ 'application/json', 'text/plain' },
            new List<String>(),
            new List<String> { 'aemAuth' },
            OASOrgApacheSlingCaconfigManagementI.class
        );
    }
    /**
     * 
     * 
     * @param post  (optional)
     * @param apply  (optional)
     * @param r_delete  (optional)
     * @param action  (optional)
     * @param location  (optional)
     * @param propertylist  (optional)
     * @param enabled  (optional)
     * @param configPath  (optional)
     * @param fallbackPaths  (optional)
     * @param configCollectionInheritancePropertyNames  (optional)
     * @return OASOrgApacheSlingCaconfigResourceImp
     * @throws OAS.ApiException if fails to make API call
     */
    public OASOrgApacheSlingCaconfigResourceImp orgApacheSlingCaconfigResourceImplDefDefaultConfigurationResour(Map<String, Object> params) {
        List<OAS.Param> query = new List<OAS.Param>();

        // cast query params to verify their expected type
        query.addAll(client.makeParam('post', (Boolean) params.get('post')));
        query.addAll(client.makeParam('apply', (Boolean) params.get('apply')));
        query.addAll(client.makeParam('delete', (Boolean) params.get('r_delete')));
        query.addAll(client.makeParam('action', (String) params.get('action')));
        query.addAll(client.makeParam('$location', (String) params.get('location')));
        query.addAll(client.makeParam('propertylist', (List<String>) params.get('propertylist'), 'csv'));
        query.addAll(client.makeParam('enabled', (Boolean) params.get('enabled')));
        query.addAll(client.makeParam('configPath', (String) params.get('configPath')));
        query.addAll(client.makeParams('fallbackPaths', (List<String>) params.get('fallbackPaths')));
        query.addAll(client.makeParams('configCollectionInheritancePropertyNames', (List<String>) params.get('configCollectionInheritancePropertyNames')));

        List<OAS.Param> form = new List<OAS.Param>();

        return (OASOrgApacheSlingCaconfigResourceImp) client.invoke(
            'POST', '/system/console/configMgr/org.apache.sling.caconfig.resource.impl.def.DefaultConfigurationResourceResolvingStrategy', '',
            query, form,
            new Map<String, Object>(),
            new Map<String, Object>(),
            new List<String>{ 'application/json', 'text/plain' },
            new List<String>(),
            new List<String> { 'aemAuth' },
            OASOrgApacheSlingCaconfigResourceImp.class
        );
    }
    /**
     * 
     * 
     * @param post  (optional)
     * @param apply  (optional)
     * @param r_delete  (optional)
     * @param action  (optional)
     * @param location  (optional)
     * @param propertylist  (optional)
     * @param enabled  (optional)
     * @param configRefResourceNames  (optional)
     * @param configRefPropertyNames  (optional)
     * @param serviceRanking  (optional)
     * @return OASOrgApacheSlingCaconfigResourceImp
     * @throws OAS.ApiException if fails to make API call
     */
    public OASOrgApacheSlingCaconfigResourceImp orgApacheSlingCaconfigResourceImplDefDefaultContextPathStrategy(Map<String, Object> params) {
        List<OAS.Param> query = new List<OAS.Param>();

        // cast query params to verify their expected type
        query.addAll(client.makeParam('post', (Boolean) params.get('post')));
        query.addAll(client.makeParam('apply', (Boolean) params.get('apply')));
        query.addAll(client.makeParam('delete', (Boolean) params.get('r_delete')));
        query.addAll(client.makeParam('action', (String) params.get('action')));
        query.addAll(client.makeParam('$location', (String) params.get('location')));
        query.addAll(client.makeParam('propertylist', (List<String>) params.get('propertylist'), 'csv'));
        query.addAll(client.makeParam('enabled', (Boolean) params.get('enabled')));
        query.addAll(client.makeParams('configRefResourceNames', (List<String>) params.get('configRefResourceNames')));
        query.addAll(client.makeParams('configRefPropertyNames', (List<String>) params.get('configRefPropertyNames')));
        query.addAll(client.makeParam('service.ranking', (Integer) params.get('serviceRanking')));

        List<OAS.Param> form = new List<OAS.Param>();

        return (OASOrgApacheSlingCaconfigResourceImp) client.invoke(
            'POST', '/system/console/configMgr/org.apache.sling.caconfig.resource.impl.def.DefaultContextPathStrategy', '',
            query, form,
            new Map<String, Object>(),
            new Map<String, Object>(),
            new List<String>{ 'application/json', 'text/plain' },
            new List<String>(),
            new List<String> { 'aemAuth' },
            OASOrgApacheSlingCaconfigResourceImp.class
        );
    }
    /**
     * 
     * 
     * @param post  (optional)
     * @param apply  (optional)
     * @param r_delete  (optional)
     * @param action  (optional)
     * @param location  (optional)
     * @param propertylist  (optional)
     * @param parserFeatures  (optional)
     * @return OASOrgApacheSlingCommonsHtmlInternal
     * @throws OAS.ApiException if fails to make API call
     */
    public OASOrgApacheSlingCommonsHtmlInternal orgApacheSlingCommonsHtmlInternalTagsoupHtmlParser(Map<String, Object> params) {
        List<OAS.Param> query = new List<OAS.Param>();

        // cast query params to verify their expected type
        query.addAll(client.makeParam('post', (Boolean) params.get('post')));
        query.addAll(client.makeParam('apply', (Boolean) params.get('apply')));
        query.addAll(client.makeParam('delete', (Boolean) params.get('r_delete')));
        query.addAll(client.makeParam('action', (String) params.get('action')));
        query.addAll(client.makeParam('$location', (String) params.get('location')));
        query.addAll(client.makeParam('propertylist', (List<String>) params.get('propertylist'), 'csv'));
        query.addAll(client.makeParams('parser.features', (List<String>) params.get('parserFeatures')));

        List<OAS.Param> form = new List<OAS.Param>();

        return (OASOrgApacheSlingCommonsHtmlInternal) client.invoke(
            'POST', '/system/console/configMgr/org.apache.sling.commons.html.internal.TagsoupHtmlParser', '',
            query, form,
            new Map<String, Object>(),
            new Map<String, Object>(),
            new List<String>{ 'application/json', 'text/plain' },
            new List<String>(),
            new List<String> { 'aemAuth' },
            OASOrgApacheSlingCommonsHtmlInternal.class
        );
    }
    /**
     * 
     * 
     * @param post  (optional)
     * @param apply  (optional)
     * @param r_delete  (optional)
     * @param action  (optional)
     * @param location  (optional)
     * @param propertylist  (optional)
     * @param orgApacheSlingCommonsLogLevel  (optional)
     * @param orgApacheSlingCommonsLogFile  (optional)
     * @param orgApacheSlingCommonsLogFileNumber  (optional)
     * @param orgApacheSlingCommonsLogFileSize  (optional)
     * @param orgApacheSlingCommonsLogPattern  (optional)
     * @param orgApacheSlingCommonsLogConfigurationFile  (optional)
     * @param orgApacheSlingCommonsLogPackagingDataEnabled  (optional)
     * @param orgApacheSlingCommonsLogMaxCallerDataDepth  (optional)
     * @param orgApacheSlingCommonsLogMaxOldFileCountInDump  (optional)
     * @param orgApacheSlingCommonsLogNumOfLines  (optional)
     * @return OASOrgApacheSlingCommonsLogLogManage
     * @throws OAS.ApiException if fails to make API call
     */
    public OASOrgApacheSlingCommonsLogLogManage orgApacheSlingCommonsLogLogManager(Map<String, Object> params) {
        List<OAS.Param> query = new List<OAS.Param>();

        // cast query params to verify their expected type
        query.addAll(client.makeParam('post', (Boolean) params.get('post')));
        query.addAll(client.makeParam('apply', (Boolean) params.get('apply')));
        query.addAll(client.makeParam('delete', (Boolean) params.get('r_delete')));
        query.addAll(client.makeParam('action', (String) params.get('action')));
        query.addAll(client.makeParam('$location', (String) params.get('location')));
        query.addAll(client.makeParam('propertylist', (List<String>) params.get('propertylist'), 'csv'));
        query.addAll(client.makeParam('org.apache.sling.commons.log.level', (String) params.get('orgApacheSlingCommonsLogLevel')));
        query.addAll(client.makeParam('org.apache.sling.commons.log.file', (String) params.get('orgApacheSlingCommonsLogFile')));
        query.addAll(client.makeParam('org.apache.sling.commons.log.file.number', (Integer) params.get('orgApacheSlingCommonsLogFileNumber')));
        query.addAll(client.makeParam('org.apache.sling.commons.log.file.size', (String) params.get('orgApacheSlingCommonsLogFileSize')));
        query.addAll(client.makeParam('org.apache.sling.commons.log.pattern', (String) params.get('orgApacheSlingCommonsLogPattern')));
        query.addAll(client.makeParam('org.apache.sling.commons.log.configurationFile', (String) params.get('orgApacheSlingCommonsLogConfigurationFile')));
        query.addAll(client.makeParam('org.apache.sling.commons.log.packagingDataEnabled', (Boolean) params.get('orgApacheSlingCommonsLogPackagingDataEnabled')));
        query.addAll(client.makeParam('org.apache.sling.commons.log.maxCallerDataDepth', (Integer) params.get('orgApacheSlingCommonsLogMaxCallerDataDepth')));
        query.addAll(client.makeParam('org.apache.sling.commons.log.maxOldFileCountInDump', (Integer) params.get('orgApacheSlingCommonsLogMaxOldFileCountInDump')));
        query.addAll(client.makeParam('org.apache.sling.commons.log.numOfLines', (Integer) params.get('orgApacheSlingCommonsLogNumOfLines')));

        List<OAS.Param> form = new List<OAS.Param>();

        return (OASOrgApacheSlingCommonsLogLogManage) client.invoke(
            'POST', '/system/console/configMgr/org.apache.sling.commons.log.LogManager', '',
            query, form,
            new Map<String, Object>(),
            new Map<String, Object>(),
            new List<String>{ 'application/json', 'text/plain' },
            new List<String>(),
            new List<String> { 'aemAuth' },
            OASOrgApacheSlingCommonsLogLogManage.class
        );
    }
    /**
     * 
     * 
     * @param post  (optional)
     * @param apply  (optional)
     * @param r_delete  (optional)
     * @param action  (optional)
     * @param location  (optional)
     * @param propertylist  (optional)
     * @param orgApacheSlingCommonsLogLevel  (optional)
     * @param orgApacheSlingCommonsLogFile  (optional)
     * @param orgApacheSlingCommonsLogPattern  (optional)
     * @param orgApacheSlingCommonsLogNames  (optional)
     * @param orgApacheSlingCommonsLogAdditiv  (optional)
     * @return OASOrgApacheSlingCommonsLogLogManage
     * @throws OAS.ApiException if fails to make API call
     */
    public OASOrgApacheSlingCommonsLogLogManage orgApacheSlingCommonsLogLogManagerFactoryConfig(Map<String, Object> params) {
        List<OAS.Param> query = new List<OAS.Param>();

        // cast query params to verify their expected type
        query.addAll(client.makeParam('post', (Boolean) params.get('post')));
        query.addAll(client.makeParam('apply', (Boolean) params.get('apply')));
        query.addAll(client.makeParam('delete', (Boolean) params.get('r_delete')));
        query.addAll(client.makeParam('action', (String) params.get('action')));
        query.addAll(client.makeParam('$location', (String) params.get('location')));
        query.addAll(client.makeParam('propertylist', (List<String>) params.get('propertylist'), 'csv'));
        query.addAll(client.makeParam('org.apache.sling.commons.log.level', (String) params.get('orgApacheSlingCommonsLogLevel')));
        query.addAll(client.makeParam('org.apache.sling.commons.log.file', (String) params.get('orgApacheSlingCommonsLogFile')));
        query.addAll(client.makeParam('org.apache.sling.commons.log.pattern', (String) params.get('orgApacheSlingCommonsLogPattern')));
        query.addAll(client.makeParams('org.apache.sling.commons.log.names', (List<String>) params.get('orgApacheSlingCommonsLogNames')));
        query.addAll(client.makeParam('org.apache.sling.commons.log.additiv', (Boolean) params.get('orgApacheSlingCommonsLogAdditiv')));

        List<OAS.Param> form = new List<OAS.Param>();

        return (OASOrgApacheSlingCommonsLogLogManage) client.invoke(
            'POST', '/system/console/configMgr/org.apache.sling.commons.log.LogManager.factory.config', '',
            query, form,
            new Map<String, Object>(),
            new Map<String, Object>(),
            new List<String>{ 'application/json', 'text/plain' },
            new List<String>(),
            new List<String> { 'aemAuth' },
            OASOrgApacheSlingCommonsLogLogManage.class
        );
    }
    /**
     * 
     * 
     * @param post  (optional)
     * @param apply  (optional)
     * @param r_delete  (optional)
     * @param action  (optional)
     * @param location  (optional)
     * @param propertylist  (optional)
     * @param orgApacheSlingCommonsLogFile  (optional)
     * @param orgApacheSlingCommonsLogFileNumber  (optional)
     * @param orgApacheSlingCommonsLogFileSize  (optional)
     * @param orgApacheSlingCommonsLogFileBuffered  (optional)
     * @return OASOrgApacheSlingCommonsLogLogManage
     * @throws OAS.ApiException if fails to make API call
     */
    public OASOrgApacheSlingCommonsLogLogManage orgApacheSlingCommonsLogLogManagerFactoryWriter(Map<String, Object> params) {
        List<OAS.Param> query = new List<OAS.Param>();

        // cast query params to verify their expected type
        query.addAll(client.makeParam('post', (Boolean) params.get('post')));
        query.addAll(client.makeParam('apply', (Boolean) params.get('apply')));
        query.addAll(client.makeParam('delete', (Boolean) params.get('r_delete')));
        query.addAll(client.makeParam('action', (String) params.get('action')));
        query.addAll(client.makeParam('$location', (String) params.get('location')));
        query.addAll(client.makeParam('propertylist', (List<String>) params.get('propertylist'), 'csv'));
        query.addAll(client.makeParam('org.apache.sling.commons.log.file', (String) params.get('orgApacheSlingCommonsLogFile')));
        query.addAll(client.makeParam('org.apache.sling.commons.log.file.number', (Integer) params.get('orgApacheSlingCommonsLogFileNumber')));
        query.addAll(client.makeParam('org.apache.sling.commons.log.file.size', (String) params.get('orgApacheSlingCommonsLogFileSize')));
        query.addAll(client.makeParam('org.apache.sling.commons.log.file.buffered', (Boolean) params.get('orgApacheSlingCommonsLogFileBuffered')));

        List<OAS.Param> form = new List<OAS.Param>();

        return (OASOrgApacheSlingCommonsLogLogManage) client.invoke(
            'POST', '/system/console/configMgr/org.apache.sling.commons.log.LogManager.factory.writer', '',
            query, form,
            new Map<String, Object>(),
            new Map<String, Object>(),
            new List<String>{ 'application/json', 'text/plain' },
            new List<String>(),
            new List<String> { 'aemAuth' },
            OASOrgApacheSlingCommonsLogLogManage.class
        );
    }
    /**
     * 
     * 
     * @param post  (optional)
     * @param apply  (optional)
     * @param r_delete  (optional)
     * @param action  (optional)
     * @param location  (optional)
     * @param propertylist  (optional)
     * @param period  (optional)
     * @param timeUnit  (optional)
     * @param level  (optional)
     * @param loggerName  (optional)
     * @param prefix  (optional)
     * @param pattern  (optional)
     * @param registryName  (optional)
     * @return OASOrgApacheSlingCommonsMetricsInter
     * @throws OAS.ApiException if fails to make API call
     */
    public OASOrgApacheSlingCommonsMetricsInter orgApacheSlingCommonsMetricsInternalLogReporter(Map<String, Object> params) {
        List<OAS.Param> query = new List<OAS.Param>();

        // cast query params to verify their expected type
        query.addAll(client.makeParam('post', (Boolean) params.get('post')));
        query.addAll(client.makeParam('apply', (Boolean) params.get('apply')));
        query.addAll(client.makeParam('delete', (Boolean) params.get('r_delete')));
        query.addAll(client.makeParam('action', (String) params.get('action')));
        query.addAll(client.makeParam('$location', (String) params.get('location')));
        query.addAll(client.makeParam('propertylist', (List<String>) params.get('propertylist'), 'csv'));
        query.addAll(client.makeParam('period', (Integer) params.get('period')));
        query.addAll(client.makeParam('timeUnit', (String) params.get('timeUnit')));
        query.addAll(client.makeParam('level', (String) params.get('level')));
        query.addAll(client.makeParam('loggerName', (String) params.get('loggerName')));
        query.addAll(client.makeParam('prefix', (String) params.get('prefix')));
        query.addAll(client.makeParam('pattern', (String) params.get('pattern')));
        query.addAll(client.makeParam('registryName', (String) params.get('registryName')));

        List<OAS.Param> form = new List<OAS.Param>();

        return (OASOrgApacheSlingCommonsMetricsInter) client.invoke(
            'POST', '/system/console/configMgr/org.apache.sling.commons.metrics.internal.LogReporter', '',
            query, form,
            new Map<String, Object>(),
            new Map<String, Object>(),
            new List<String>{ 'application/json', 'text/plain' },
            new List<String>(),
            new List<String> { 'aemAuth' },
            OASOrgApacheSlingCommonsMetricsInter.class
        );
    }
    /**
     * 
     * 
     * @param post  (optional)
     * @param apply  (optional)
     * @param r_delete  (optional)
     * @param action  (optional)
     * @param location  (optional)
     * @param propertylist  (optional)
     * @param datasources  (optional)
     * @param step  (optional)
     * @param archives  (optional)
     * @param path  (optional)
     * @return OASOrgApacheSlingCommonsMetricsRrd4j
     * @throws OAS.ApiException if fails to make API call
     */
    public OASOrgApacheSlingCommonsMetricsRrd4j orgApacheSlingCommonsMetricsRrd4jImplCodahaleMetricsReporter(Map<String, Object> params) {
        List<OAS.Param> query = new List<OAS.Param>();

        // cast query params to verify their expected type
        query.addAll(client.makeParam('post', (Boolean) params.get('post')));
        query.addAll(client.makeParam('apply', (Boolean) params.get('apply')));
        query.addAll(client.makeParam('delete', (Boolean) params.get('r_delete')));
        query.addAll(client.makeParam('action', (String) params.get('action')));
        query.addAll(client.makeParam('$location', (String) params.get('location')));
        query.addAll(client.makeParam('propertylist', (List<String>) params.get('propertylist'), 'csv'));
        query.addAll(client.makeParams('datasources', (List<String>) params.get('datasources')));
        query.addAll(client.makeParam('step', (Integer) params.get('step')));
        query.addAll(client.makeParams('archives', (List<String>) params.get('archives')));
        query.addAll(client.makeParam('path', (String) params.get('path')));

        List<OAS.Param> form = new List<OAS.Param>();

        return (OASOrgApacheSlingCommonsMetricsRrd4j) client.invoke(
            'POST', '/system/console/configMgr/org.apache.sling.commons.metrics.rrd4j.impl.CodahaleMetricsReporter', '',
            query, form,
            new Map<String, Object>(),
            new Map<String, Object>(),
            new List<String>{ 'application/json', 'text/plain' },
            new List<String>(),
            new List<String> { 'aemAuth' },
            OASOrgApacheSlingCommonsMetricsRrd4j.class
        );
    }
    /**
     * 
     * 
     * @param post  (optional)
     * @param apply  (optional)
     * @param r_delete  (optional)
     * @param action  (optional)
     * @param location  (optional)
     * @param propertylist  (optional)
     * @param mimeTypes  (optional)
     * @return OASOrgApacheSlingCommonsMimeInternal
     * @throws OAS.ApiException if fails to make API call
     */
    public OASOrgApacheSlingCommonsMimeInternal orgApacheSlingCommonsMimeInternalMimeTypeServiceImpl(Map<String, Object> params) {
        List<OAS.Param> query = new List<OAS.Param>();

        // cast query params to verify their expected type
        query.addAll(client.makeParam('post', (Boolean) params.get('post')));
        query.addAll(client.makeParam('apply', (Boolean) params.get('apply')));
        query.addAll(client.makeParam('delete', (Boolean) params.get('r_delete')));
        query.addAll(client.makeParam('action', (String) params.get('action')));
        query.addAll(client.makeParam('$location', (String) params.get('location')));
        query.addAll(client.makeParam('propertylist', (List<String>) params.get('propertylist'), 'csv'));
        query.addAll(client.makeParams('mime.types', (List<String>) params.get('mimeTypes')));

        List<OAS.Param> form = new List<OAS.Param>();

        return (OASOrgApacheSlingCommonsMimeInternal) client.invoke(
            'POST', '/system/console/configMgr/org.apache.sling.commons.mime.internal.MimeTypeServiceImpl', '',
            query, form,
            new Map<String, Object>(),
            new Map<String, Object>(),
            new List<String>{ 'application/json', 'text/plain' },
            new List<String>(),
            new List<String> { 'aemAuth' },
            OASOrgApacheSlingCommonsMimeInternal.class
        );
    }
    /**
     * 
     * 
     * @param post  (optional)
     * @param apply  (optional)
     * @param r_delete  (optional)
     * @param action  (optional)
     * @param location  (optional)
     * @param propertylist  (optional)
     * @param poolName  (optional)
     * @param allowedPoolNames  (optional)
     * @param schedulerUseleaderforsingle  (optional)
     * @param metricsFilters  (optional)
     * @param slowThresholdMillis  (optional)
     * @return OASOrgApacheSlingCommonsSchedulerImp
     * @throws OAS.ApiException if fails to make API call
     */
    public OASOrgApacheSlingCommonsSchedulerImp orgApacheSlingCommonsSchedulerImplQuartzScheduler(Map<String, Object> params) {
        List<OAS.Param> query = new List<OAS.Param>();

        // cast query params to verify their expected type
        query.addAll(client.makeParam('post', (Boolean) params.get('post')));
        query.addAll(client.makeParam('apply', (Boolean) params.get('apply')));
        query.addAll(client.makeParam('delete', (Boolean) params.get('r_delete')));
        query.addAll(client.makeParam('action', (String) params.get('action')));
        query.addAll(client.makeParam('$location', (String) params.get('location')));
        query.addAll(client.makeParam('propertylist', (List<String>) params.get('propertylist'), 'csv'));
        query.addAll(client.makeParam('poolName', (String) params.get('poolName')));
        query.addAll(client.makeParams('allowedPoolNames', (List<String>) params.get('allowedPoolNames')));
        query.addAll(client.makeParam('scheduler.useleaderforsingle', (Boolean) params.get('schedulerUseleaderforsingle')));
        query.addAll(client.makeParams('metrics.filters', (List<String>) params.get('metricsFilters')));
        query.addAll(client.makeParam('slowThresholdMillis', (Integer) params.get('slowThresholdMillis')));

        List<OAS.Param> form = new List<OAS.Param>();

        return (OASOrgApacheSlingCommonsSchedulerImp) client.invoke(
            'POST', '/system/console/configMgr/org.apache.sling.commons.scheduler.impl.QuartzScheduler', '',
            query, form,
            new Map<String, Object>(),
            new Map<String, Object>(),
            new List<String>{ 'application/json', 'text/plain' },
            new List<String>(),
            new List<String> { 'aemAuth' },
            OASOrgApacheSlingCommonsSchedulerImp.class
        );
    }
    /**
     * 
     * 
     * @param post  (optional)
     * @param apply  (optional)
     * @param r_delete  (optional)
     * @param action  (optional)
     * @param location  (optional)
     * @param propertylist  (optional)
     * @param maxQuartzJobDurationAcceptable  (optional)
     * @return OASOrgApacheSlingCommonsSchedulerImp
     * @throws OAS.ApiException if fails to make API call
     */
    public OASOrgApacheSlingCommonsSchedulerImp orgApacheSlingCommonsSchedulerImplSchedulerHealthCheck(Map<String, Object> params) {
        List<OAS.Param> query = new List<OAS.Param>();

        // cast query params to verify their expected type
        query.addAll(client.makeParam('post', (Boolean) params.get('post')));
        query.addAll(client.makeParam('apply', (Boolean) params.get('apply')));
        query.addAll(client.makeParam('delete', (Boolean) params.get('r_delete')));
        query.addAll(client.makeParam('action', (String) params.get('action')));
        query.addAll(client.makeParam('$location', (String) params.get('location')));
        query.addAll(client.makeParam('propertylist', (List<String>) params.get('propertylist'), 'csv'));
        query.addAll(client.makeParam('max.quartzJob.duration.acceptable', (Integer) params.get('maxQuartzJobDurationAcceptable')));

        List<OAS.Param> form = new List<OAS.Param>();

        return (OASOrgApacheSlingCommonsSchedulerImp) client.invoke(
            'POST', '/system/console/configMgr/org.apache.sling.commons.scheduler.impl.SchedulerHealthCheck', '',
            query, form,
            new Map<String, Object>(),
            new Map<String, Object>(),
            new List<String>{ 'application/json', 'text/plain' },
            new List<String>(),
            new List<String> { 'aemAuth' },
            OASOrgApacheSlingCommonsSchedulerImp.class
        );
    }
    /**
     * 
     * 
     * @param post  (optional)
     * @param apply  (optional)
     * @param r_delete  (optional)
     * @param action  (optional)
     * @param location  (optional)
     * @param propertylist  (optional)
     * @param name  (optional)
     * @param minPoolSize  (optional)
     * @param maxPoolSize  (optional)
     * @param queueSize  (optional)
     * @param maxThreadAge  (optional)
     * @param keepAliveTime  (optional)
     * @param blockPolicy  (optional)
     * @param shutdownGraceful  (optional)
     * @param daemon  (optional)
     * @param shutdownWaitTime  (optional)
     * @param priority  (optional)
     * @return OASOrgApacheSlingCommonsThreadsImplD
     * @throws OAS.ApiException if fails to make API call
     */
    public OASOrgApacheSlingCommonsThreadsImplD orgApacheSlingCommonsThreadsImplDefaultThreadPoolFactory(Map<String, Object> params) {
        List<OAS.Param> query = new List<OAS.Param>();

        // cast query params to verify their expected type
        query.addAll(client.makeParam('post', (Boolean) params.get('post')));
        query.addAll(client.makeParam('apply', (Boolean) params.get('apply')));
        query.addAll(client.makeParam('delete', (Boolean) params.get('r_delete')));
        query.addAll(client.makeParam('action', (String) params.get('action')));
        query.addAll(client.makeParam('$location', (String) params.get('location')));
        query.addAll(client.makeParam('propertylist', (List<String>) params.get('propertylist'), 'csv'));
        query.addAll(client.makeParam('name', (String) params.get('name')));
        query.addAll(client.makeParam('minPoolSize', (Integer) params.get('minPoolSize')));
        query.addAll(client.makeParam('maxPoolSize', (Integer) params.get('maxPoolSize')));
        query.addAll(client.makeParam('queueSize', (Integer) params.get('queueSize')));
        query.addAll(client.makeParam('maxThreadAge', (Integer) params.get('maxThreadAge')));
        query.addAll(client.makeParam('keepAliveTime', (Integer) params.get('keepAliveTime')));
        query.addAll(client.makeParam('blockPolicy', (String) params.get('blockPolicy')));
        query.addAll(client.makeParam('shutdownGraceful', (Boolean) params.get('shutdownGraceful')));
        query.addAll(client.makeParam('daemon', (Boolean) params.get('daemon')));
        query.addAll(client.makeParam('shutdownWaitTime', (Integer) params.get('shutdownWaitTime')));
        query.addAll(client.makeParam('priority', (String) params.get('priority')));

        List<OAS.Param> form = new List<OAS.Param>();

        return (OASOrgApacheSlingCommonsThreadsImplD) client.invoke(
            'POST', '/system/console/configMgr/org.apache.sling.commons.threads.impl.DefaultThreadPool.factory', '',
            query, form,
            new Map<String, Object>(),
            new Map<String, Object>(),
            new List<String>{ 'application/json', 'text/plain' },
            new List<String>(),
            new List<String> { 'aemAuth' },
            OASOrgApacheSlingCommonsThreadsImplD.class
        );
    }
    /**
     * 
     * 
     * @param post  (optional)
     * @param apply  (optional)
     * @param r_delete  (optional)
     * @param action  (optional)
     * @param location  (optional)
     * @param propertylist  (optional)
     * @param datasourceName  (optional)
     * @param datasourceSvcPropName  (optional)
     * @param driverClassName  (optional)
     * @param url  (optional)
     * @param username  (optional)
     * @param password  (optional)
     * @param defaultAutoCommit  (optional)
     * @param defaultReadOnly  (optional)
     * @param defaultTransactionIsolation  (optional)
     * @param defaultCatalog  (optional)
     * @param maxActive  (optional)
     * @param maxIdle  (optional)
     * @param minIdle  (optional)
     * @param initialSize  (optional)
     * @param maxWait  (optional)
     * @param maxAge  (optional)
     * @param testOnBorrow  (optional)
     * @param testOnReturn  (optional)
     * @param testWhileIdle  (optional)
     * @param validationQuery  (optional)
     * @param validationQueryTimeout  (optional)
     * @param timeBetweenEvictionRunsMillis  (optional)
     * @param minEvictableIdleTimeMillis  (optional)
     * @param connectionProperties  (optional)
     * @param initSQL  (optional)
     * @param jdbcInterceptors  (optional)
     * @param validationInterval  (optional)
     * @param logValidationErrors  (optional)
     * @param datasourceSvcProperties  (optional)
     * @return OASOrgApacheSlingDatasourceDataSourc
     * @throws OAS.ApiException if fails to make API call
     */
    public OASOrgApacheSlingDatasourceDataSourc orgApacheSlingDatasourceDataSourceFactory(Map<String, Object> params) {
        List<OAS.Param> query = new List<OAS.Param>();

        // cast query params to verify their expected type
        query.addAll(client.makeParam('post', (Boolean) params.get('post')));
        query.addAll(client.makeParam('apply', (Boolean) params.get('apply')));
        query.addAll(client.makeParam('delete', (Boolean) params.get('r_delete')));
        query.addAll(client.makeParam('action', (String) params.get('action')));
        query.addAll(client.makeParam('$location', (String) params.get('location')));
        query.addAll(client.makeParam('propertylist', (List<String>) params.get('propertylist'), 'csv'));
        query.addAll(client.makeParam('datasource.name', (String) params.get('datasourceName')));
        query.addAll(client.makeParam('datasource.svc.prop.name', (String) params.get('datasourceSvcPropName')));
        query.addAll(client.makeParam('driverClassName', (String) params.get('driverClassName')));
        query.addAll(client.makeParam('url', (String) params.get('url')));
        query.addAll(client.makeParam('username', (String) params.get('username')));
        query.addAll(client.makeParam('password', (String) params.get('password')));
        query.addAll(client.makeParam('defaultAutoCommit', (String) params.get('defaultAutoCommit')));
        query.addAll(client.makeParam('defaultReadOnly', (String) params.get('defaultReadOnly')));
        query.addAll(client.makeParam('defaultTransactionIsolation', (String) params.get('defaultTransactionIsolation')));
        query.addAll(client.makeParam('defaultCatalog', (String) params.get('defaultCatalog')));
        query.addAll(client.makeParam('maxActive', (Integer) params.get('maxActive')));
        query.addAll(client.makeParam('maxIdle', (Integer) params.get('maxIdle')));
        query.addAll(client.makeParam('minIdle', (Integer) params.get('minIdle')));
        query.addAll(client.makeParam('initialSize', (Integer) params.get('initialSize')));
        query.addAll(client.makeParam('maxWait', (Integer) params.get('maxWait')));
        query.addAll(client.makeParam('maxAge', (Integer) params.get('maxAge')));
        query.addAll(client.makeParam('testOnBorrow', (Boolean) params.get('testOnBorrow')));
        query.addAll(client.makeParam('testOnReturn', (Boolean) params.get('testOnReturn')));
        query.addAll(client.makeParam('testWhileIdle', (Boolean) params.get('testWhileIdle')));
        query.addAll(client.makeParam('validationQuery', (String) params.get('validationQuery')));
        query.addAll(client.makeParam('validationQueryTimeout', (Integer) params.get('validationQueryTimeout')));
        query.addAll(client.makeParam('timeBetweenEvictionRunsMillis', (Integer) params.get('timeBetweenEvictionRunsMillis')));
        query.addAll(client.makeParam('minEvictableIdleTimeMillis', (Integer) params.get('minEvictableIdleTimeMillis')));
        query.addAll(client.makeParam('connectionProperties', (String) params.get('connectionProperties')));
        query.addAll(client.makeParam('initSQL', (String) params.get('initSQL')));
        query.addAll(client.makeParam('jdbcInterceptors', (String) params.get('jdbcInterceptors')));
        query.addAll(client.makeParam('validationInterval', (Integer) params.get('validationInterval')));
        query.addAll(client.makeParam('logValidationErrors', (Boolean) params.get('logValidationErrors')));
        query.addAll(client.makeParams('datasource.svc.properties', (List<String>) params.get('datasourceSvcProperties')));

        List<OAS.Param> form = new List<OAS.Param>();

        return (OASOrgApacheSlingDatasourceDataSourc) client.invoke(
            'POST', '/system/console/configMgr/org.apache.sling.datasource.DataSourceFactory', '',
            query, form,
            new Map<String, Object>(),
            new Map<String, Object>(),
            new List<String>{ 'application/json', 'text/plain' },
            new List<String>(),
            new List<String> { 'aemAuth' },
            OASOrgApacheSlingDatasourceDataSourc.class
        );
    }
    /**
     * 
     * 
     * @param post  (optional)
     * @param apply  (optional)
     * @param r_delete  (optional)
     * @param action  (optional)
     * @param location  (optional)
     * @param propertylist  (optional)
     * @param datasourceName  (optional)
     * @param datasourceSvcPropName  (optional)
     * @param datasourceJndiName  (optional)
     * @param jndiProperties  (optional)
     * @return OASOrgApacheSlingDatasourceJNDIDataS
     * @throws OAS.ApiException if fails to make API call
     */
    public OASOrgApacheSlingDatasourceJNDIDataS orgApacheSlingDatasourceJNDIDataSourceFactory(Map<String, Object> params) {
        List<OAS.Param> query = new List<OAS.Param>();

        // cast query params to verify their expected type
        query.addAll(client.makeParam('post', (Boolean) params.get('post')));
        query.addAll(client.makeParam('apply', (Boolean) params.get('apply')));
        query.addAll(client.makeParam('delete', (Boolean) params.get('r_delete')));
        query.addAll(client.makeParam('action', (String) params.get('action')));
        query.addAll(client.makeParam('$location', (String) params.get('location')));
        query.addAll(client.makeParam('propertylist', (List<String>) params.get('propertylist'), 'csv'));
        query.addAll(client.makeParam('datasource.name', (String) params.get('datasourceName')));
        query.addAll(client.makeParam('datasource.svc.prop.name', (String) params.get('datasourceSvcPropName')));
        query.addAll(client.makeParam('datasource.jndi.name', (String) params.get('datasourceJndiName')));
        query.addAll(client.makeParams('jndi.properties', (List<String>) params.get('jndiProperties')));

        List<OAS.Param> form = new List<OAS.Param>();

        return (OASOrgApacheSlingDatasourceJNDIDataS) client.invoke(
            'POST', '/system/console/configMgr/org.apache.sling.datasource.JNDIDataSourceFactory', '',
            query, form,
            new Map<String, Object>(),
            new Map<String, Object>(),
            new List<String>{ 'application/json', 'text/plain' },
            new List<String>(),
            new List<String> { 'aemAuth' },
            OASOrgApacheSlingDatasourceJNDIDataS.class
        );
    }
    /**
     * 
     * 
     * @param post  (optional)
     * @param apply  (optional)
     * @param r_delete  (optional)
     * @param action  (optional)
     * @param location  (optional)
     * @param propertylist  (optional)
     * @param connectorPingTimeout  (optional)
     * @param connectorPingInterval  (optional)
     * @param discoveryLiteCheckInterval  (optional)
     * @param clusterSyncServiceTimeout  (optional)
     * @param clusterSyncServiceInterval  (optional)
     * @param enableSyncToken  (optional)
     * @param minEventDelay  (optional)
     * @param socketConnectTimeout  (optional)
     * @param soTimeout  (optional)
     * @param topologyConnectorUrls  (optional)
     * @param topologyConnectorWhitelist  (optional)
     * @param autoStopLocalLoopEnabled  (optional)
     * @param gzipConnectorRequestsEnabled  (optional)
     * @param hmacEnabled  (optional)
     * @param enableEncryption  (optional)
     * @param sharedKey  (optional)
     * @param hmacSharedKeyTTL  (optional)
     * @param backoffStandbyFactor  (optional)
     * @param backoffStableFactor  (optional)
     * @return OASOrgApacheSlingDiscoveryOakConfigI
     * @throws OAS.ApiException if fails to make API call
     */
    public OASOrgApacheSlingDiscoveryOakConfigI orgApacheSlingDiscoveryOakConfig(Map<String, Object> params) {
        List<OAS.Param> query = new List<OAS.Param>();

        // cast query params to verify their expected type
        query.addAll(client.makeParam('post', (Boolean) params.get('post')));
        query.addAll(client.makeParam('apply', (Boolean) params.get('apply')));
        query.addAll(client.makeParam('delete', (Boolean) params.get('r_delete')));
        query.addAll(client.makeParam('action', (String) params.get('action')));
        query.addAll(client.makeParam('$location', (String) params.get('location')));
        query.addAll(client.makeParam('propertylist', (List<String>) params.get('propertylist'), 'csv'));
        query.addAll(client.makeParam('connectorPingTimeout', (Integer) params.get('connectorPingTimeout')));
        query.addAll(client.makeParam('connectorPingInterval', (Integer) params.get('connectorPingInterval')));
        query.addAll(client.makeParam('discoveryLiteCheckInterval', (Integer) params.get('discoveryLiteCheckInterval')));
        query.addAll(client.makeParam('clusterSyncServiceTimeout', (Integer) params.get('clusterSyncServiceTimeout')));
        query.addAll(client.makeParam('clusterSyncServiceInterval', (Integer) params.get('clusterSyncServiceInterval')));
        query.addAll(client.makeParam('enableSyncToken', (Boolean) params.get('enableSyncToken')));
        query.addAll(client.makeParam('minEventDelay', (Integer) params.get('minEventDelay')));
        query.addAll(client.makeParam('socketConnectTimeout', (Integer) params.get('socketConnectTimeout')));
        query.addAll(client.makeParam('soTimeout', (Integer) params.get('soTimeout')));
        query.addAll(client.makeParams('topologyConnectorUrls', (List<String>) params.get('topologyConnectorUrls')));
        query.addAll(client.makeParams('topologyConnectorWhitelist', (List<String>) params.get('topologyConnectorWhitelist')));
        query.addAll(client.makeParam('autoStopLocalLoopEnabled', (Boolean) params.get('autoStopLocalLoopEnabled')));
        query.addAll(client.makeParam('gzipConnectorRequestsEnabled', (Boolean) params.get('gzipConnectorRequestsEnabled')));
        query.addAll(client.makeParam('hmacEnabled', (Boolean) params.get('hmacEnabled')));
        query.addAll(client.makeParam('enableEncryption', (Boolean) params.get('enableEncryption')));
        query.addAll(client.makeParam('sharedKey', (String) params.get('sharedKey')));
        query.addAll(client.makeParam('hmacSharedKeyTTL', (Integer) params.get('hmacSharedKeyTTL')));
        query.addAll(client.makeParam('backoffStandbyFactor', (String) params.get('backoffStandbyFactor')));
        query.addAll(client.makeParam('backoffStableFactor', (String) params.get('backoffStableFactor')));

        List<OAS.Param> form = new List<OAS.Param>();

        return (OASOrgApacheSlingDiscoveryOakConfigI) client.invoke(
            'POST', '/system/console/configMgr/org.apache.sling.discovery.oak.Config', '',
            query, form,
            new Map<String, Object>(),
            new Map<String, Object>(),
            new List<String>{ 'application/json', 'text/plain' },
            new List<String>(),
            new List<String> { 'aemAuth' },
            OASOrgApacheSlingDiscoveryOakConfigI.class
        );
    }
    /**
     * 
     * 
     * @param post  (optional)
     * @param apply  (optional)
     * @param r_delete  (optional)
     * @param action  (optional)
     * @param location  (optional)
     * @param propertylist  (optional)
     * @param hcName  (optional)
     * @param hcTags  (optional)
     * @param hcMbeanName  (optional)
     * @return OASOrgApacheSlingDiscoveryOakSynchro
     * @throws OAS.ApiException if fails to make API call
     */
    public OASOrgApacheSlingDiscoveryOakSynchro orgApacheSlingDiscoveryOakSynchronizedClocksHealthCheck(Map<String, Object> params) {
        List<OAS.Param> query = new List<OAS.Param>();

        // cast query params to verify their expected type
        query.addAll(client.makeParam('post', (Boolean) params.get('post')));
        query.addAll(client.makeParam('apply', (Boolean) params.get('apply')));
        query.addAll(client.makeParam('delete', (Boolean) params.get('r_delete')));
        query.addAll(client.makeParam('action', (String) params.get('action')));
        query.addAll(client.makeParam('$location', (String) params.get('location')));
        query.addAll(client.makeParam('propertylist', (List<String>) params.get('propertylist'), 'csv'));
        query.addAll(client.makeParam('hc.name', (String) params.get('hcName')));
        query.addAll(client.makeParams('hc.tags', (List<String>) params.get('hcTags')));
        query.addAll(client.makeParam('hc.mbean.name', (String) params.get('hcMbeanName')));

        List<OAS.Param> form = new List<OAS.Param>();

        return (OASOrgApacheSlingDiscoveryOakSynchro) client.invoke(
            'POST', '/system/console/configMgr/org.apache.sling.discovery.oak.SynchronizedClocksHealthCheck', '',
            query, form,
            new Map<String, Object>(),
            new Map<String, Object>(),
            new List<String>{ 'application/json', 'text/plain' },
            new List<String>(),
            new List<String> { 'aemAuth' },
            OASOrgApacheSlingDiscoveryOakSynchro.class
        );
    }
    /**
     * 
     * 
     * @param post  (optional)
     * @param apply  (optional)
     * @param r_delete  (optional)
     * @param action  (optional)
     * @param location  (optional)
     * @param propertylist  (optional)
     * @param name  (optional)
     * @param title  (optional)
     * @param details  (optional)
     * @param enabled  (optional)
     * @param serviceName  (optional)
     * @param logLevel  (optional)
     * @param allowedRoots  (optional)
     * @param queueProcessingEnabled  (optional)
     * @param packageImporterEndpoints  (optional)
     * @param passiveQueues  (optional)
     * @param priorityQueues  (optional)
     * @param retryStrategy  (optional)
     * @param retryAttempts  (optional)
     * @param requestAuthorizationStrategyTarget  (optional)
     * @param transportSecretProviderTarget  (optional)
     * @param packageBuilderTarget  (optional)
     * @param triggersTarget  (optional)
     * @param queueProvider  (optional)
     * @param asyncDelivery  (optional)
     * @param httpConnTimeout  (optional)
     * @return OASOrgApacheSlingDistributionAgentIm
     * @throws OAS.ApiException if fails to make API call
     */
    public OASOrgApacheSlingDistributionAgentIm orgApacheSlingDistributionAgentImplForwardDistributionAgentFacto(Map<String, Object> params) {
        List<OAS.Param> query = new List<OAS.Param>();

        // cast query params to verify their expected type
        query.addAll(client.makeParam('post', (Boolean) params.get('post')));
        query.addAll(client.makeParam('apply', (Boolean) params.get('apply')));
        query.addAll(client.makeParam('delete', (Boolean) params.get('r_delete')));
        query.addAll(client.makeParam('action', (String) params.get('action')));
        query.addAll(client.makeParam('$location', (String) params.get('location')));
        query.addAll(client.makeParam('propertylist', (List<String>) params.get('propertylist'), 'csv'));
        query.addAll(client.makeParam('name', (String) params.get('name')));
        query.addAll(client.makeParam('title', (String) params.get('title')));
        query.addAll(client.makeParam('details', (String) params.get('details')));
        query.addAll(client.makeParam('enabled', (Boolean) params.get('enabled')));
        query.addAll(client.makeParam('serviceName', (String) params.get('serviceName')));
        query.addAll(client.makeParam('log.level', (String) params.get('logLevel')));
        query.addAll(client.makeParams('allowed.roots', (List<String>) params.get('allowedRoots')));
        query.addAll(client.makeParam('queue.processing.enabled', (Boolean) params.get('queueProcessingEnabled')));
        query.addAll(client.makeParams('packageImporter.endpoints', (List<String>) params.get('packageImporterEndpoints')));
        query.addAll(client.makeParams('passiveQueues', (List<String>) params.get('passiveQueues')));
        query.addAll(client.makeParams('priorityQueues', (List<String>) params.get('priorityQueues')));
        query.addAll(client.makeParam('retry.strategy', (String) params.get('retryStrategy')));
        query.addAll(client.makeParam('retry.attempts', (Integer) params.get('retryAttempts')));
        query.addAll(client.makeParam('requestAuthorizationStrategy.target', (String) params.get('requestAuthorizationStrategyTarget')));
        query.addAll(client.makeParam('transportSecretProvider.target', (String) params.get('transportSecretProviderTarget')));
        query.addAll(client.makeParam('packageBuilder.target', (String) params.get('packageBuilderTarget')));
        query.addAll(client.makeParam('triggers.target', (String) params.get('triggersTarget')));
        query.addAll(client.makeParam('queue.provider', (String) params.get('queueProvider')));
        query.addAll(client.makeParam('async.delivery', (Boolean) params.get('asyncDelivery')));
        query.addAll(client.makeParam('http.conn.timeout', (Integer) params.get('httpConnTimeout')));

        List<OAS.Param> form = new List<OAS.Param>();

        return (OASOrgApacheSlingDistributionAgentIm) client.invoke(
            'POST', '/system/console/configMgr/org.apache.sling.distribution.agent.impl.ForwardDistributionAgentFactory', '',
            query, form,
            new Map<String, Object>(),
            new Map<String, Object>(),
            new List<String>{ 'application/json', 'text/plain' },
            new List<String>(),
            new List<String> { 'aemAuth' },
            OASOrgApacheSlingDistributionAgentIm.class
        );
    }
    /**
     * 
     * 
     * @param post  (optional)
     * @param apply  (optional)
     * @param r_delete  (optional)
     * @param action  (optional)
     * @param location  (optional)
     * @param propertylist  (optional)
     * @param name  (optional)
     * @param jcrPrivilege  (optional)
     * @return OASOrgApacheSlingDistributionAgentIm
     * @throws OAS.ApiException if fails to make API call
     */
    public OASOrgApacheSlingDistributionAgentIm orgApacheSlingDistributionAgentImplPrivilegeDistributionRequestA(Map<String, Object> params) {
        List<OAS.Param> query = new List<OAS.Param>();

        // cast query params to verify their expected type
        query.addAll(client.makeParam('post', (Boolean) params.get('post')));
        query.addAll(client.makeParam('apply', (Boolean) params.get('apply')));
        query.addAll(client.makeParam('delete', (Boolean) params.get('r_delete')));
        query.addAll(client.makeParam('action', (String) params.get('action')));
        query.addAll(client.makeParam('$location', (String) params.get('location')));
        query.addAll(client.makeParam('propertylist', (List<String>) params.get('propertylist'), 'csv'));
        query.addAll(client.makeParam('name', (String) params.get('name')));
        query.addAll(client.makeParam('jcrPrivilege', (String) params.get('jcrPrivilege')));

        List<OAS.Param> form = new List<OAS.Param>();

        return (OASOrgApacheSlingDistributionAgentIm) client.invoke(
            'POST', '/system/console/configMgr/org.apache.sling.distribution.agent.impl.PrivilegeDistributionRequestAuthorizationStrategyFactory', '',
            query, form,
            new Map<String, Object>(),
            new Map<String, Object>(),
            new List<String>{ 'application/json', 'text/plain' },
            new List<String>(),
            new List<String> { 'aemAuth' },
            OASOrgApacheSlingDistributionAgentIm.class
        );
    }
    /**
     * 
     * 
     * @param post  (optional)
     * @param apply  (optional)
     * @param r_delete  (optional)
     * @param action  (optional)
     * @param location  (optional)
     * @param propertylist  (optional)
     * @param name  (optional)
     * @param title  (optional)
     * @param details  (optional)
     * @param enabled  (optional)
     * @param serviceName  (optional)
     * @param logLevel  (optional)
     * @param allowedRoots  (optional)
     * @param requestAuthorizationStrategyTarget  (optional)
     * @param queueProviderFactoryTarget  (optional)
     * @param packageBuilderTarget  (optional)
     * @param triggersTarget  (optional)
     * @param priorityQueues  (optional)
     * @return OASOrgApacheSlingDistributionAgentIm
     * @throws OAS.ApiException if fails to make API call
     */
    public OASOrgApacheSlingDistributionAgentIm orgApacheSlingDistributionAgentImplQueueDistributionAgentFactory(Map<String, Object> params) {
        List<OAS.Param> query = new List<OAS.Param>();

        // cast query params to verify their expected type
        query.addAll(client.makeParam('post', (Boolean) params.get('post')));
        query.addAll(client.makeParam('apply', (Boolean) params.get('apply')));
        query.addAll(client.makeParam('delete', (Boolean) params.get('r_delete')));
        query.addAll(client.makeParam('action', (String) params.get('action')));
        query.addAll(client.makeParam('$location', (String) params.get('location')));
        query.addAll(client.makeParam('propertylist', (List<String>) params.get('propertylist'), 'csv'));
        query.addAll(client.makeParam('name', (String) params.get('name')));
        query.addAll(client.makeParam('title', (String) params.get('title')));
        query.addAll(client.makeParam('details', (String) params.get('details')));
        query.addAll(client.makeParam('enabled', (Boolean) params.get('enabled')));
        query.addAll(client.makeParam('serviceName', (String) params.get('serviceName')));
        query.addAll(client.makeParam('log.level', (String) params.get('logLevel')));
        query.addAll(client.makeParams('allowed.roots', (List<String>) params.get('allowedRoots')));
        query.addAll(client.makeParam('requestAuthorizationStrategy.target', (String) params.get('requestAuthorizationStrategyTarget')));
        query.addAll(client.makeParam('queueProviderFactory.target', (String) params.get('queueProviderFactoryTarget')));
        query.addAll(client.makeParam('packageBuilder.target', (String) params.get('packageBuilderTarget')));
        query.addAll(client.makeParam('triggers.target', (String) params.get('triggersTarget')));
        query.addAll(client.makeParams('priorityQueues', (List<String>) params.get('priorityQueues')));

        List<OAS.Param> form = new List<OAS.Param>();

        return (OASOrgApacheSlingDistributionAgentIm) client.invoke(
            'POST', '/system/console/configMgr/org.apache.sling.distribution.agent.impl.QueueDistributionAgentFactory', '',
            query, form,
            new Map<String, Object>(),
            new Map<String, Object>(),
            new List<String>{ 'application/json', 'text/plain' },
            new List<String>(),
            new List<String> { 'aemAuth' },
            OASOrgApacheSlingDistributionAgentIm.class
        );
    }
    /**
     * 
     * 
     * @param post  (optional)
     * @param apply  (optional)
     * @param r_delete  (optional)
     * @param action  (optional)
     * @param location  (optional)
     * @param propertylist  (optional)
     * @param name  (optional)
     * @param title  (optional)
     * @param details  (optional)
     * @param enabled  (optional)
     * @param serviceName  (optional)
     * @param logLevel  (optional)
     * @param queueProcessingEnabled  (optional)
     * @param packageExporterEndpoints  (optional)
     * @param pullItems  (optional)
     * @param httpConnTimeout  (optional)
     * @param requestAuthorizationStrategyTarget  (optional)
     * @param transportSecretProviderTarget  (optional)
     * @param packageBuilderTarget  (optional)
     * @param triggersTarget  (optional)
     * @return OASOrgApacheSlingDistributionAgentIm
     * @throws OAS.ApiException if fails to make API call
     */
    public OASOrgApacheSlingDistributionAgentIm orgApacheSlingDistributionAgentImplReverseDistributionAgentFacto(Map<String, Object> params) {
        List<OAS.Param> query = new List<OAS.Param>();

        // cast query params to verify their expected type
        query.addAll(client.makeParam('post', (Boolean) params.get('post')));
        query.addAll(client.makeParam('apply', (Boolean) params.get('apply')));
        query.addAll(client.makeParam('delete', (Boolean) params.get('r_delete')));
        query.addAll(client.makeParam('action', (String) params.get('action')));
        query.addAll(client.makeParam('$location', (String) params.get('location')));
        query.addAll(client.makeParam('propertylist', (List<String>) params.get('propertylist'), 'csv'));
        query.addAll(client.makeParam('name', (String) params.get('name')));
        query.addAll(client.makeParam('title', (String) params.get('title')));
        query.addAll(client.makeParam('details', (String) params.get('details')));
        query.addAll(client.makeParam('enabled', (Boolean) params.get('enabled')));
        query.addAll(client.makeParam('serviceName', (String) params.get('serviceName')));
        query.addAll(client.makeParam('log.level', (String) params.get('logLevel')));
        query.addAll(client.makeParam('queue.processing.enabled', (Boolean) params.get('queueProcessingEnabled')));
        query.addAll(client.makeParams('packageExporter.endpoints', (List<String>) params.get('packageExporterEndpoints')));
        query.addAll(client.makeParam('pull.items', (Integer) params.get('pullItems')));
        query.addAll(client.makeParam('http.conn.timeout', (Integer) params.get('httpConnTimeout')));
        query.addAll(client.makeParam('requestAuthorizationStrategy.target', (String) params.get('requestAuthorizationStrategyTarget')));
        query.addAll(client.makeParam('transportSecretProvider.target', (String) params.get('transportSecretProviderTarget')));
        query.addAll(client.makeParam('packageBuilder.target', (String) params.get('packageBuilderTarget')));
        query.addAll(client.makeParam('triggers.target', (String) params.get('triggersTarget')));

        List<OAS.Param> form = new List<OAS.Param>();

        return (OASOrgApacheSlingDistributionAgentIm) client.invoke(
            'POST', '/system/console/configMgr/org.apache.sling.distribution.agent.impl.ReverseDistributionAgentFactory', '',
            query, form,
            new Map<String, Object>(),
            new Map<String, Object>(),
            new List<String>{ 'application/json', 'text/plain' },
            new List<String>(),
            new List<String> { 'aemAuth' },
            OASOrgApacheSlingDistributionAgentIm.class
        );
    }
    /**
     * 
     * 
     * @param post  (optional)
     * @param apply  (optional)
     * @param r_delete  (optional)
     * @param action  (optional)
     * @param location  (optional)
     * @param propertylist  (optional)
     * @param name  (optional)
     * @param title  (optional)
     * @param details  (optional)
     * @param enabled  (optional)
     * @param serviceName  (optional)
     * @param logLevel  (optional)
     * @param queueProcessingEnabled  (optional)
     * @param packageExporterTarget  (optional)
     * @param packageImporterTarget  (optional)
     * @param requestAuthorizationStrategyTarget  (optional)
     * @param triggersTarget  (optional)
     * @return OASOrgApacheSlingDistributionAgentIm
     * @throws OAS.ApiException if fails to make API call
     */
    public OASOrgApacheSlingDistributionAgentIm orgApacheSlingDistributionAgentImplSimpleDistributionAgentFactor(Map<String, Object> params) {
        List<OAS.Param> query = new List<OAS.Param>();

        // cast query params to verify their expected type
        query.addAll(client.makeParam('post', (Boolean) params.get('post')));
        query.addAll(client.makeParam('apply', (Boolean) params.get('apply')));
        query.addAll(client.makeParam('delete', (Boolean) params.get('r_delete')));
        query.addAll(client.makeParam('action', (String) params.get('action')));
        query.addAll(client.makeParam('$location', (String) params.get('location')));
        query.addAll(client.makeParam('propertylist', (List<String>) params.get('propertylist'), 'csv'));
        query.addAll(client.makeParam('name', (String) params.get('name')));
        query.addAll(client.makeParam('title', (String) params.get('title')));
        query.addAll(client.makeParam('details', (String) params.get('details')));
        query.addAll(client.makeParam('enabled', (Boolean) params.get('enabled')));
        query.addAll(client.makeParam('serviceName', (String) params.get('serviceName')));
        query.addAll(client.makeParam('log.level', (String) params.get('logLevel')));
        query.addAll(client.makeParam('queue.processing.enabled', (Boolean) params.get('queueProcessingEnabled')));
        query.addAll(client.makeParam('packageExporter.target', (String) params.get('packageExporterTarget')));
        query.addAll(client.makeParam('packageImporter.target', (String) params.get('packageImporterTarget')));
        query.addAll(client.makeParam('requestAuthorizationStrategy.target', (String) params.get('requestAuthorizationStrategyTarget')));
        query.addAll(client.makeParam('triggers.target', (String) params.get('triggersTarget')));

        List<OAS.Param> form = new List<OAS.Param>();

        return (OASOrgApacheSlingDistributionAgentIm) client.invoke(
            'POST', '/system/console/configMgr/org.apache.sling.distribution.agent.impl.SimpleDistributionAgentFactory', '',
            query, form,
            new Map<String, Object>(),
            new Map<String, Object>(),
            new List<String>{ 'application/json', 'text/plain' },
            new List<String>(),
            new List<String> { 'aemAuth' },
            OASOrgApacheSlingDistributionAgentIm.class
        );
    }
    /**
     * 
     * 
     * @param post  (optional)
     * @param apply  (optional)
     * @param r_delete  (optional)
     * @param action  (optional)
     * @param location  (optional)
     * @param propertylist  (optional)
     * @param name  (optional)
     * @param title  (optional)
     * @param details  (optional)
     * @param enabled  (optional)
     * @param serviceName  (optional)
     * @param logLevel  (optional)
     * @param queueProcessingEnabled  (optional)
     * @param passiveQueues  (optional)
     * @param packageExporterEndpoints  (optional)
     * @param packageImporterEndpoints  (optional)
     * @param retryStrategy  (optional)
     * @param retryAttempts  (optional)
     * @param pullItems  (optional)
     * @param httpConnTimeout  (optional)
     * @param requestAuthorizationStrategyTarget  (optional)
     * @param transportSecretProviderTarget  (optional)
     * @param packageBuilderTarget  (optional)
     * @param triggersTarget  (optional)
     * @return OASOrgApacheSlingDistributionAgentIm
     * @throws OAS.ApiException if fails to make API call
     */
    public OASOrgApacheSlingDistributionAgentIm orgApacheSlingDistributionAgentImplSyncDistributionAgentFactory(Map<String, Object> params) {
        List<OAS.Param> query = new List<OAS.Param>();

        // cast query params to verify their expected type
        query.addAll(client.makeParam('post', (Boolean) params.get('post')));
        query.addAll(client.makeParam('apply', (Boolean) params.get('apply')));
        query.addAll(client.makeParam('delete', (Boolean) params.get('r_delete')));
        query.addAll(client.makeParam('action', (String) params.get('action')));
        query.addAll(client.makeParam('$location', (String) params.get('location')));
        query.addAll(client.makeParam('propertylist', (List<String>) params.get('propertylist'), 'csv'));
        query.addAll(client.makeParam('name', (String) params.get('name')));
        query.addAll(client.makeParam('title', (String) params.get('title')));
        query.addAll(client.makeParam('details', (String) params.get('details')));
        query.addAll(client.makeParam('enabled', (Boolean) params.get('enabled')));
        query.addAll(client.makeParam('serviceName', (String) params.get('serviceName')));
        query.addAll(client.makeParam('log.level', (String) params.get('logLevel')));
        query.addAll(client.makeParam('queue.processing.enabled', (Boolean) params.get('queueProcessingEnabled')));
        query.addAll(client.makeParams('passiveQueues', (List<String>) params.get('passiveQueues')));
        query.addAll(client.makeParams('packageExporter.endpoints', (List<String>) params.get('packageExporterEndpoints')));
        query.addAll(client.makeParams('packageImporter.endpoints', (List<String>) params.get('packageImporterEndpoints')));
        query.addAll(client.makeParam('retry.strategy', (String) params.get('retryStrategy')));
        query.addAll(client.makeParam('retry.attempts', (Integer) params.get('retryAttempts')));
        query.addAll(client.makeParam('pull.items', (Integer) params.get('pullItems')));
        query.addAll(client.makeParam('http.conn.timeout', (Integer) params.get('httpConnTimeout')));
        query.addAll(client.makeParam('requestAuthorizationStrategy.target', (String) params.get('requestAuthorizationStrategyTarget')));
        query.addAll(client.makeParam('transportSecretProvider.target', (String) params.get('transportSecretProviderTarget')));
        query.addAll(client.makeParam('packageBuilder.target', (String) params.get('packageBuilderTarget')));
        query.addAll(client.makeParam('triggers.target', (String) params.get('triggersTarget')));

        List<OAS.Param> form = new List<OAS.Param>();

        return (OASOrgApacheSlingDistributionAgentIm) client.invoke(
            'POST', '/system/console/configMgr/org.apache.sling.distribution.agent.impl.SyncDistributionAgentFactory', '',
            query, form,
            new Map<String, Object>(),
            new Map<String, Object>(),
            new List<String>{ 'application/json', 'text/plain' },
            new List<String>(),
            new List<String> { 'aemAuth' },
            OASOrgApacheSlingDistributionAgentIm.class
        );
    }
    /**
     * 
     * 
     * @param post  (optional)
     * @param apply  (optional)
     * @param r_delete  (optional)
     * @param action  (optional)
     * @param location  (optional)
     * @param propertylist  (optional)
     * @param hcName  (optional)
     * @param hcTags  (optional)
     * @param hcMbeanName  (optional)
     * @param numberOfRetriesAllowed  (optional)
     * @return OASOrgApacheSlingDistributionMonitor
     * @throws OAS.ApiException if fails to make API call
     */
    public OASOrgApacheSlingDistributionMonitor orgApacheSlingDistributionMonitorDistributionQueueHealthCheck(Map<String, Object> params) {
        List<OAS.Param> query = new List<OAS.Param>();

        // cast query params to verify their expected type
        query.addAll(client.makeParam('post', (Boolean) params.get('post')));
        query.addAll(client.makeParam('apply', (Boolean) params.get('apply')));
        query.addAll(client.makeParam('delete', (Boolean) params.get('r_delete')));
        query.addAll(client.makeParam('action', (String) params.get('action')));
        query.addAll(client.makeParam('$location', (String) params.get('location')));
        query.addAll(client.makeParam('propertylist', (List<String>) params.get('propertylist'), 'csv'));
        query.addAll(client.makeParam('hc.name', (String) params.get('hcName')));
        query.addAll(client.makeParams('hc.tags', (List<String>) params.get('hcTags')));
        query.addAll(client.makeParam('hc.mbean.name', (String) params.get('hcMbeanName')));
        query.addAll(client.makeParam('numberOfRetriesAllowed', (Integer) params.get('numberOfRetriesAllowed')));

        List<OAS.Param> form = new List<OAS.Param>();

        return (OASOrgApacheSlingDistributionMonitor) client.invoke(
            'POST', '/system/console/configMgr/org.apache.sling.distribution.monitor.DistributionQueueHealthCheck', '',
            query, form,
            new Map<String, Object>(),
            new Map<String, Object>(),
            new List<String>{ 'application/json', 'text/plain' },
            new List<String>(),
            new List<String> { 'aemAuth' },
            OASOrgApacheSlingDistributionMonitor.class
        );
    }
    /**
     * 
     * 
     * @param post  (optional)
     * @param apply  (optional)
     * @param r_delete  (optional)
     * @param action  (optional)
     * @param location  (optional)
     * @param propertylist  (optional)
     * @param name  (optional)
     * @param queue  (optional)
     * @param dropInvalidItems  (optional)
     * @param agentTarget  (optional)
     * @return OASOrgApacheSlingDistributionPackagi
     * @throws OAS.ApiException if fails to make API call
     */
    public OASOrgApacheSlingDistributionPackagi orgApacheSlingDistributionPackagingImplExporterAgentDistributio(Map<String, Object> params) {
        List<OAS.Param> query = new List<OAS.Param>();

        // cast query params to verify their expected type
        query.addAll(client.makeParam('post', (Boolean) params.get('post')));
        query.addAll(client.makeParam('apply', (Boolean) params.get('apply')));
        query.addAll(client.makeParam('delete', (Boolean) params.get('r_delete')));
        query.addAll(client.makeParam('action', (String) params.get('action')));
        query.addAll(client.makeParam('$location', (String) params.get('location')));
        query.addAll(client.makeParam('propertylist', (List<String>) params.get('propertylist'), 'csv'));
        query.addAll(client.makeParam('name', (String) params.get('name')));
        query.addAll(client.makeParam('queue', (String) params.get('queue')));
        query.addAll(client.makeParam('drop.invalid.items', (Boolean) params.get('dropInvalidItems')));
        query.addAll(client.makeParam('agent.target', (String) params.get('agentTarget')));

        List<OAS.Param> form = new List<OAS.Param>();

        return (OASOrgApacheSlingDistributionPackagi) client.invoke(
            'POST', '/system/console/configMgr/org.apache.sling.distribution.packaging.impl.exporter.AgentDistributionPackageExporterFactory', '',
            query, form,
            new Map<String, Object>(),
            new Map<String, Object>(),
            new List<String>{ 'application/json', 'text/plain' },
            new List<String>(),
            new List<String> { 'aemAuth' },
            OASOrgApacheSlingDistributionPackagi.class
        );
    }
    /**
     * 
     * 
     * @param post  (optional)
     * @param apply  (optional)
     * @param r_delete  (optional)
     * @param action  (optional)
     * @param location  (optional)
     * @param propertylist  (optional)
     * @param name  (optional)
     * @param packageBuilderTarget  (optional)
     * @return OASOrgApacheSlingDistributionPackagi
     * @throws OAS.ApiException if fails to make API call
     */
    public OASOrgApacheSlingDistributionPackagi orgApacheSlingDistributionPackagingImplExporterLocalDistributio(Map<String, Object> params) {
        List<OAS.Param> query = new List<OAS.Param>();

        // cast query params to verify their expected type
        query.addAll(client.makeParam('post', (Boolean) params.get('post')));
        query.addAll(client.makeParam('apply', (Boolean) params.get('apply')));
        query.addAll(client.makeParam('delete', (Boolean) params.get('r_delete')));
        query.addAll(client.makeParam('action', (String) params.get('action')));
        query.addAll(client.makeParam('$location', (String) params.get('location')));
        query.addAll(client.makeParam('propertylist', (List<String>) params.get('propertylist'), 'csv'));
        query.addAll(client.makeParam('name', (String) params.get('name')));
        query.addAll(client.makeParam('packageBuilder.target', (String) params.get('packageBuilderTarget')));

        List<OAS.Param> form = new List<OAS.Param>();

        return (OASOrgApacheSlingDistributionPackagi) client.invoke(
            'POST', '/system/console/configMgr/org.apache.sling.distribution.packaging.impl.exporter.LocalDistributionPackageExporterFactory', '',
            query, form,
            new Map<String, Object>(),
            new Map<String, Object>(),
            new List<String>{ 'application/json', 'text/plain' },
            new List<String>(),
            new List<String> { 'aemAuth' },
            OASOrgApacheSlingDistributionPackagi.class
        );
    }
    /**
     * 
     * 
     * @param post  (optional)
     * @param apply  (optional)
     * @param r_delete  (optional)
     * @param action  (optional)
     * @param location  (optional)
     * @param propertylist  (optional)
     * @param name  (optional)
     * @param endpoints  (optional)
     * @param pullItems  (optional)
     * @param packageBuilderTarget  (optional)
     * @param transportSecretProviderTarget  (optional)
     * @return OASOrgApacheSlingDistributionPackagi
     * @throws OAS.ApiException if fails to make API call
     */
    public OASOrgApacheSlingDistributionPackagi orgApacheSlingDistributionPackagingImplExporterRemoteDistributi(Map<String, Object> params) {
        List<OAS.Param> query = new List<OAS.Param>();

        // cast query params to verify their expected type
        query.addAll(client.makeParam('post', (Boolean) params.get('post')));
        query.addAll(client.makeParam('apply', (Boolean) params.get('apply')));
        query.addAll(client.makeParam('delete', (Boolean) params.get('r_delete')));
        query.addAll(client.makeParam('action', (String) params.get('action')));
        query.addAll(client.makeParam('$location', (String) params.get('location')));
        query.addAll(client.makeParam('propertylist', (List<String>) params.get('propertylist'), 'csv'));
        query.addAll(client.makeParam('name', (String) params.get('name')));
        query.addAll(client.makeParams('endpoints', (List<String>) params.get('endpoints')));
        query.addAll(client.makeParam('pull.items', (Integer) params.get('pullItems')));
        query.addAll(client.makeParam('packageBuilder.target', (String) params.get('packageBuilderTarget')));
        query.addAll(client.makeParam('transportSecretProvider.target', (String) params.get('transportSecretProviderTarget')));

        List<OAS.Param> form = new List<OAS.Param>();

        return (OASOrgApacheSlingDistributionPackagi) client.invoke(
            'POST', '/system/console/configMgr/org.apache.sling.distribution.packaging.impl.exporter.RemoteDistributionPackageExporterFactory', '',
            query, form,
            new Map<String, Object>(),
            new Map<String, Object>(),
            new List<String>{ 'application/json', 'text/plain' },
            new List<String>(),
            new List<String> { 'aemAuth' },
            OASOrgApacheSlingDistributionPackagi.class
        );
    }
    /**
     * 
     * 
     * @param post  (optional)
     * @param apply  (optional)
     * @param r_delete  (optional)
     * @param action  (optional)
     * @param location  (optional)
     * @param propertylist  (optional)
     * @param name  (optional)
     * @param packageBuilderTarget  (optional)
     * @return OASOrgApacheSlingDistributionPackagi
     * @throws OAS.ApiException if fails to make API call
     */
    public OASOrgApacheSlingDistributionPackagi orgApacheSlingDistributionPackagingImplImporterLocalDistributio(Map<String, Object> params) {
        List<OAS.Param> query = new List<OAS.Param>();

        // cast query params to verify their expected type
        query.addAll(client.makeParam('post', (Boolean) params.get('post')));
        query.addAll(client.makeParam('apply', (Boolean) params.get('apply')));
        query.addAll(client.makeParam('delete', (Boolean) params.get('r_delete')));
        query.addAll(client.makeParam('action', (String) params.get('action')));
        query.addAll(client.makeParam('$location', (String) params.get('location')));
        query.addAll(client.makeParam('propertylist', (List<String>) params.get('propertylist'), 'csv'));
        query.addAll(client.makeParam('name', (String) params.get('name')));
        query.addAll(client.makeParam('packageBuilder.target', (String) params.get('packageBuilderTarget')));

        List<OAS.Param> form = new List<OAS.Param>();

        return (OASOrgApacheSlingDistributionPackagi) client.invoke(
            'POST', '/system/console/configMgr/org.apache.sling.distribution.packaging.impl.importer.LocalDistributionPackageImporterFactory', '',
            query, form,
            new Map<String, Object>(),
            new Map<String, Object>(),
            new List<String>{ 'application/json', 'text/plain' },
            new List<String>(),
            new List<String> { 'aemAuth' },
            OASOrgApacheSlingDistributionPackagi.class
        );
    }
    /**
     * 
     * 
     * @param post  (optional)
     * @param apply  (optional)
     * @param r_delete  (optional)
     * @param action  (optional)
     * @param location  (optional)
     * @param propertylist  (optional)
     * @param name  (optional)
     * @param endpoints  (optional)
     * @param transportSecretProviderTarget  (optional)
     * @return OASOrgApacheSlingDistributionPackagi
     * @throws OAS.ApiException if fails to make API call
     */
    public OASOrgApacheSlingDistributionPackagi orgApacheSlingDistributionPackagingImplImporterRemoteDistributi(Map<String, Object> params) {
        List<OAS.Param> query = new List<OAS.Param>();

        // cast query params to verify their expected type
        query.addAll(client.makeParam('post', (Boolean) params.get('post')));
        query.addAll(client.makeParam('apply', (Boolean) params.get('apply')));
        query.addAll(client.makeParam('delete', (Boolean) params.get('r_delete')));
        query.addAll(client.makeParam('action', (String) params.get('action')));
        query.addAll(client.makeParam('$location', (String) params.get('location')));
        query.addAll(client.makeParam('propertylist', (List<String>) params.get('propertylist'), 'csv'));
        query.addAll(client.makeParam('name', (String) params.get('name')));
        query.addAll(client.makeParams('endpoints', (List<String>) params.get('endpoints')));
        query.addAll(client.makeParam('transportSecretProvider.target', (String) params.get('transportSecretProviderTarget')));

        List<OAS.Param> form = new List<OAS.Param>();

        return (OASOrgApacheSlingDistributionPackagi) client.invoke(
            'POST', '/system/console/configMgr/org.apache.sling.distribution.packaging.impl.importer.RemoteDistributionPackageImporterFactory', '',
            query, form,
            new Map<String, Object>(),
            new Map<String, Object>(),
            new List<String>{ 'application/json', 'text/plain' },
            new List<String>(),
            new List<String> { 'aemAuth' },
            OASOrgApacheSlingDistributionPackagi.class
        );
    }
    /**
     * 
     * 
     * @param post  (optional)
     * @param apply  (optional)
     * @param r_delete  (optional)
     * @param action  (optional)
     * @param location  (optional)
     * @param propertylist  (optional)
     * @param name  (optional)
     * @param serviceName  (optional)
     * @param path  (optional)
     * @param privilegeName  (optional)
     * @return OASOrgApacheSlingDistributionPackagi
     * @throws OAS.ApiException if fails to make API call
     */
    public OASOrgApacheSlingDistributionPackagi orgApacheSlingDistributionPackagingImplImporterRepositoryDistri(Map<String, Object> params) {
        List<OAS.Param> query = new List<OAS.Param>();

        // cast query params to verify their expected type
        query.addAll(client.makeParam('post', (Boolean) params.get('post')));
        query.addAll(client.makeParam('apply', (Boolean) params.get('apply')));
        query.addAll(client.makeParam('delete', (Boolean) params.get('r_delete')));
        query.addAll(client.makeParam('action', (String) params.get('action')));
        query.addAll(client.makeParam('$location', (String) params.get('location')));
        query.addAll(client.makeParam('propertylist', (List<String>) params.get('propertylist'), 'csv'));
        query.addAll(client.makeParam('name', (String) params.get('name')));
        query.addAll(client.makeParam('service.name', (String) params.get('serviceName')));
        query.addAll(client.makeParam('path', (String) params.get('path')));
        query.addAll(client.makeParam('privilege.name', (String) params.get('privilegeName')));

        List<OAS.Param> form = new List<OAS.Param>();

        return (OASOrgApacheSlingDistributionPackagi) client.invoke(
            'POST', '/system/console/configMgr/org.apache.sling.distribution.packaging.impl.importer.RepositoryDistributionPackageImporterFactory', '',
            query, form,
            new Map<String, Object>(),
            new Map<String, Object>(),
            new List<String>{ 'application/json', 'text/plain' },
            new List<String>(),
            new List<String> { 'aemAuth' },
            OASOrgApacheSlingDistributionPackagi.class
        );
    }
    /**
     * 
     * 
     * @param post  (optional)
     * @param apply  (optional)
     * @param r_delete  (optional)
     * @param action  (optional)
     * @param location  (optional)
     * @param propertylist  (optional)
     * @param providerRoots  (optional)
     * @param kind  (optional)
     * @return OASOrgApacheSlingDistributionResourc
     * @throws OAS.ApiException if fails to make API call
     */
    public OASOrgApacheSlingDistributionResourc orgApacheSlingDistributionResourcesImplDistributionConfiguration(Map<String, Object> params) {
        List<OAS.Param> query = new List<OAS.Param>();

        // cast query params to verify their expected type
        query.addAll(client.makeParam('post', (Boolean) params.get('post')));
        query.addAll(client.makeParam('apply', (Boolean) params.get('apply')));
        query.addAll(client.makeParam('delete', (Boolean) params.get('r_delete')));
        query.addAll(client.makeParam('action', (String) params.get('action')));
        query.addAll(client.makeParam('$location', (String) params.get('location')));
        query.addAll(client.makeParam('propertylist', (List<String>) params.get('propertylist'), 'csv'));
        query.addAll(client.makeParam('provider.roots', (String) params.get('providerRoots')));
        query.addAll(client.makeParam('kind', (String) params.get('kind')));

        List<OAS.Param> form = new List<OAS.Param>();

        return (OASOrgApacheSlingDistributionResourc) client.invoke(
            'POST', '/system/console/configMgr/org.apache.sling.distribution.resources.impl.DistributionConfigurationResourceProviderFactory', '',
            query, form,
            new Map<String, Object>(),
            new Map<String, Object>(),
            new List<String>{ 'application/json', 'text/plain' },
            new List<String>(),
            new List<String> { 'aemAuth' },
            OASOrgApacheSlingDistributionResourc.class
        );
    }
    /**
     * 
     * 
     * @param post  (optional)
     * @param apply  (optional)
     * @param r_delete  (optional)
     * @param action  (optional)
     * @param location  (optional)
     * @param propertylist  (optional)
     * @param providerRoots  (optional)
     * @param kind  (optional)
     * @return OASOrgApacheSlingDistributionResourc
     * @throws OAS.ApiException if fails to make API call
     */
    public OASOrgApacheSlingDistributionResourc orgApacheSlingDistributionResourcesImplDistributionServiceResour(Map<String, Object> params) {
        List<OAS.Param> query = new List<OAS.Param>();

        // cast query params to verify their expected type
        query.addAll(client.makeParam('post', (Boolean) params.get('post')));
        query.addAll(client.makeParam('apply', (Boolean) params.get('apply')));
        query.addAll(client.makeParam('delete', (Boolean) params.get('r_delete')));
        query.addAll(client.makeParam('action', (String) params.get('action')));
        query.addAll(client.makeParam('$location', (String) params.get('location')));
        query.addAll(client.makeParam('propertylist', (List<String>) params.get('propertylist'), 'csv'));
        query.addAll(client.makeParam('provider.roots', (String) params.get('providerRoots')));
        query.addAll(client.makeParam('kind', (String) params.get('kind')));

        List<OAS.Param> form = new List<OAS.Param>();

        return (OASOrgApacheSlingDistributionResourc) client.invoke(
            'POST', '/system/console/configMgr/org.apache.sling.distribution.resources.impl.DistributionServiceResourceProviderFactory', '',
            query, form,
            new Map<String, Object>(),
            new Map<String, Object>(),
            new List<String>{ 'application/json', 'text/plain' },
            new List<String>(),
            new List<String> { 'aemAuth' },
            OASOrgApacheSlingDistributionResourc.class
        );
    }
    /**
     * 
     * 
     * @param post  (optional)
     * @param apply  (optional)
     * @param r_delete  (optional)
     * @param action  (optional)
     * @param location  (optional)
     * @param propertylist  (optional)
     * @param name  (optional)
     * @param r_type  (optional)
     * @param formatTarget  (optional)
     * @param tempFsFolder  (optional)
     * @param fileThreshold  (optional)
     * @param memoryUnit  (optional)
     * @param useOffHeapMemory  (optional)
     * @param digestAlgorithm  (optional)
     * @param monitoringQueueSize  (optional)
     * @param cleanupDelay  (optional)
     * @param packageFilters  (optional)
     * @param propertyFilters  (optional)
     * @return OASOrgApacheSlingDistributionSeriali
     * @throws OAS.ApiException if fails to make API call
     */
    public OASOrgApacheSlingDistributionSeriali orgApacheSlingDistributionSerializationImplDistributionPackageBu(Map<String, Object> params) {
        List<OAS.Param> query = new List<OAS.Param>();

        // cast query params to verify their expected type
        query.addAll(client.makeParam('post', (Boolean) params.get('post')));
        query.addAll(client.makeParam('apply', (Boolean) params.get('apply')));
        query.addAll(client.makeParam('delete', (Boolean) params.get('r_delete')));
        query.addAll(client.makeParam('action', (String) params.get('action')));
        query.addAll(client.makeParam('$location', (String) params.get('location')));
        query.addAll(client.makeParam('propertylist', (List<String>) params.get('propertylist'), 'csv'));
        query.addAll(client.makeParam('name', (String) params.get('name')));
        query.addAll(client.makeParam('type', (String) params.get('r_type')));
        query.addAll(client.makeParam('format.target', (String) params.get('formatTarget')));
        query.addAll(client.makeParam('tempFsFolder', (String) params.get('tempFsFolder')));
        query.addAll(client.makeParam('fileThreshold', (Integer) params.get('fileThreshold')));
        query.addAll(client.makeParam('memoryUnit', (String) params.get('memoryUnit')));
        query.addAll(client.makeParam('useOffHeapMemory', (Boolean) params.get('useOffHeapMemory')));
        query.addAll(client.makeParam('digestAlgorithm', (String) params.get('digestAlgorithm')));
        query.addAll(client.makeParam('monitoringQueueSize', (Integer) params.get('monitoringQueueSize')));
        query.addAll(client.makeParam('cleanupDelay', (Integer) params.get('cleanupDelay')));
        query.addAll(client.makeParams('package.filters', (List<String>) params.get('packageFilters')));
        query.addAll(client.makeParams('property.filters', (List<String>) params.get('propertyFilters')));

        List<OAS.Param> form = new List<OAS.Param>();

        return (OASOrgApacheSlingDistributionSeriali) client.invoke(
            'POST', '/system/console/configMgr/org.apache.sling.distribution.serialization.impl.DistributionPackageBuilderFactory', '',
            query, form,
            new Map<String, Object>(),
            new Map<String, Object>(),
            new List<String>{ 'application/json', 'text/plain' },
            new List<String>(),
            new List<String> { 'aemAuth' },
            OASOrgApacheSlingDistributionSeriali.class
        );
    }
    /**
     * 
     * 
     * @param post  (optional)
     * @param apply  (optional)
     * @param r_delete  (optional)
     * @param action  (optional)
     * @param location  (optional)
     * @param propertylist  (optional)
     * @param name  (optional)
     * @param r_type  (optional)
     * @param importMode  (optional)
     * @param aclHandling  (optional)
     * @param packageRoots  (optional)
     * @param packageFilters  (optional)
     * @param propertyFilters  (optional)
     * @param tempFsFolder  (optional)
     * @param useBinaryReferences  (optional)
     * @param autoSaveThreshold  (optional)
     * @param cleanupDelay  (optional)
     * @param fileThreshold  (optional)
     * @param MEGA_BYTES  (optional)
     * @param useOffHeapMemory  (optional)
     * @param digestAlgorithm  (optional)
     * @param monitoringQueueSize  (optional)
     * @param pathsMapping  (optional)
     * @param strictImport  (optional)
     * @return OASOrgApacheSlingDistributionSeriali
     * @throws OAS.ApiException if fails to make API call
     */
    public OASOrgApacheSlingDistributionSeriali orgApacheSlingDistributionSerializationImplVltVaultDistribution(Map<String, Object> params) {
        List<OAS.Param> query = new List<OAS.Param>();

        // cast query params to verify their expected type
        query.addAll(client.makeParam('post', (Boolean) params.get('post')));
        query.addAll(client.makeParam('apply', (Boolean) params.get('apply')));
        query.addAll(client.makeParam('delete', (Boolean) params.get('r_delete')));
        query.addAll(client.makeParam('action', (String) params.get('action')));
        query.addAll(client.makeParam('$location', (String) params.get('location')));
        query.addAll(client.makeParam('propertylist', (List<String>) params.get('propertylist'), 'csv'));
        query.addAll(client.makeParam('name', (String) params.get('name')));
        query.addAll(client.makeParam('type', (String) params.get('r_type')));
        query.addAll(client.makeParam('importMode', (String) params.get('importMode')));
        query.addAll(client.makeParam('aclHandling', (String) params.get('aclHandling')));
        query.addAll(client.makeParam('package.roots', (String) params.get('packageRoots')));
        query.addAll(client.makeParams('package.filters', (List<String>) params.get('packageFilters')));
        query.addAll(client.makeParams('property.filters', (List<String>) params.get('propertyFilters')));
        query.addAll(client.makeParam('tempFsFolder', (String) params.get('tempFsFolder')));
        query.addAll(client.makeParam('useBinaryReferences', (Boolean) params.get('useBinaryReferences')));
        query.addAll(client.makeParam('autoSaveThreshold', (Integer) params.get('autoSaveThreshold')));
        query.addAll(client.makeParam('cleanupDelay', (Integer) params.get('cleanupDelay')));
        query.addAll(client.makeParam('fileThreshold', (Integer) params.get('fileThreshold')));
        query.addAll(client.makeParam('MEGA_BYTES', (String) params.get('MEGA_BYTES')));
        query.addAll(client.makeParam('useOffHeapMemory', (Boolean) params.get('useOffHeapMemory')));
        query.addAll(client.makeParam('digestAlgorithm', (String) params.get('digestAlgorithm')));
        query.addAll(client.makeParam('monitoringQueueSize', (Integer) params.get('monitoringQueueSize')));
        query.addAll(client.makeParams('pathsMapping', (List<String>) params.get('pathsMapping')));
        query.addAll(client.makeParam('strictImport', (Boolean) params.get('strictImport')));

        List<OAS.Param> form = new List<OAS.Param>();

        return (OASOrgApacheSlingDistributionSeriali) client.invoke(
            'POST', '/system/console/configMgr/org.apache.sling.distribution.serialization.impl.vlt.VaultDistributionPackageBuilderFactory', '',
            query, form,
            new Map<String, Object>(),
            new Map<String, Object>(),
            new List<String>{ 'application/json', 'text/plain' },
            new List<String>(),
            new List<String> { 'aemAuth' },
            OASOrgApacheSlingDistributionSeriali.class
        );
    }
    /**
     * 
     * 
     * @param post  (optional)
     * @param apply  (optional)
     * @param r_delete  (optional)
     * @param action  (optional)
     * @param location  (optional)
     * @param propertylist  (optional)
     * @param name  (optional)
     * @param username  (optional)
     * @param password  (optional)
     * @return OASOrgApacheSlingDistributionTranspo
     * @throws OAS.ApiException if fails to make API call
     */
    public OASOrgApacheSlingDistributionTranspo orgApacheSlingDistributionTransportImplUserCredentialsDistributi(Map<String, Object> params) {
        List<OAS.Param> query = new List<OAS.Param>();

        // cast query params to verify their expected type
        query.addAll(client.makeParam('post', (Boolean) params.get('post')));
        query.addAll(client.makeParam('apply', (Boolean) params.get('apply')));
        query.addAll(client.makeParam('delete', (Boolean) params.get('r_delete')));
        query.addAll(client.makeParam('action', (String) params.get('action')));
        query.addAll(client.makeParam('$location', (String) params.get('location')));
        query.addAll(client.makeParam('propertylist', (List<String>) params.get('propertylist'), 'csv'));
        query.addAll(client.makeParam('name', (String) params.get('name')));
        query.addAll(client.makeParam('username', (String) params.get('username')));
        query.addAll(client.makeParam('password', (String) params.get('password')));

        List<OAS.Param> form = new List<OAS.Param>();

        return (OASOrgApacheSlingDistributionTranspo) client.invoke(
            'POST', '/system/console/configMgr/org.apache.sling.distribution.transport.impl.UserCredentialsDistributionTransportSecretProvider', '',
            query, form,
            new Map<String, Object>(),
            new Map<String, Object>(),
            new List<String>{ 'application/json', 'text/plain' },
            new List<String>(),
            new List<String> { 'aemAuth' },
            OASOrgApacheSlingDistributionTranspo.class
        );
    }
    /**
     * 
     * 
     * @param post  (optional)
     * @param apply  (optional)
     * @param r_delete  (optional)
     * @param action  (optional)
     * @param location  (optional)
     * @param propertylist  (optional)
     * @param name  (optional)
     * @param path  (optional)
     * @return OASOrgApacheSlingDistributionTrigger
     * @throws OAS.ApiException if fails to make API call
     */
    public OASOrgApacheSlingDistributionTrigger orgApacheSlingDistributionTriggerImplDistributionEventDistribute(Map<String, Object> params) {
        List<OAS.Param> query = new List<OAS.Param>();

        // cast query params to verify their expected type
        query.addAll(client.makeParam('post', (Boolean) params.get('post')));
        query.addAll(client.makeParam('apply', (Boolean) params.get('apply')));
        query.addAll(client.makeParam('delete', (Boolean) params.get('r_delete')));
        query.addAll(client.makeParam('action', (String) params.get('action')));
        query.addAll(client.makeParam('$location', (String) params.get('location')));
        query.addAll(client.makeParam('propertylist', (List<String>) params.get('propertylist'), 'csv'));
        query.addAll(client.makeParam('name', (String) params.get('name')));
        query.addAll(client.makeParam('path', (String) params.get('path')));

        List<OAS.Param> form = new List<OAS.Param>();

        return (OASOrgApacheSlingDistributionTrigger) client.invoke(
            'POST', '/system/console/configMgr/org.apache.sling.distribution.trigger.impl.DistributionEventDistributeDistributionTriggerFactory', '',
            query, form,
            new Map<String, Object>(),
            new Map<String, Object>(),
            new List<String>{ 'application/json', 'text/plain' },
            new List<String>(),
            new List<String> { 'aemAuth' },
            OASOrgApacheSlingDistributionTrigger.class
        );
    }
    /**
     * 
     * 
     * @param post  (optional)
     * @param apply  (optional)
     * @param r_delete  (optional)
     * @param action  (optional)
     * @param location  (optional)
     * @param propertylist  (optional)
     * @param name  (optional)
     * @param path  (optional)
     * @param ignoredPathsPatterns  (optional)
     * @param serviceName  (optional)
     * @param deep  (optional)
     * @return OASOrgApacheSlingDistributionTrigger
     * @throws OAS.ApiException if fails to make API call
     */
    public OASOrgApacheSlingDistributionTrigger orgApacheSlingDistributionTriggerImplJcrEventDistributionTrigger(Map<String, Object> params) {
        List<OAS.Param> query = new List<OAS.Param>();

        // cast query params to verify their expected type
        query.addAll(client.makeParam('post', (Boolean) params.get('post')));
        query.addAll(client.makeParam('apply', (Boolean) params.get('apply')));
        query.addAll(client.makeParam('delete', (Boolean) params.get('r_delete')));
        query.addAll(client.makeParam('action', (String) params.get('action')));
        query.addAll(client.makeParam('$location', (String) params.get('location')));
        query.addAll(client.makeParam('propertylist', (List<String>) params.get('propertylist'), 'csv'));
        query.addAll(client.makeParam('name', (String) params.get('name')));
        query.addAll(client.makeParam('path', (String) params.get('path')));
        query.addAll(client.makeParams('ignoredPathsPatterns', (List<String>) params.get('ignoredPathsPatterns')));
        query.addAll(client.makeParam('serviceName', (String) params.get('serviceName')));
        query.addAll(client.makeParam('deep', (Boolean) params.get('deep')));

        List<OAS.Param> form = new List<OAS.Param>();

        return (OASOrgApacheSlingDistributionTrigger) client.invoke(
            'POST', '/system/console/configMgr/org.apache.sling.distribution.trigger.impl.JcrEventDistributionTriggerFactory', '',
            query, form,
            new Map<String, Object>(),
            new Map<String, Object>(),
            new List<String>{ 'application/json', 'text/plain' },
            new List<String>(),
            new List<String> { 'aemAuth' },
            OASOrgApacheSlingDistributionTrigger.class
        );
    }
    /**
     * 
     * 
     * @param post  (optional)
     * @param apply  (optional)
     * @param r_delete  (optional)
     * @param action  (optional)
     * @param location  (optional)
     * @param propertylist  (optional)
     * @param name  (optional)
     * @param path  (optional)
     * @param serviceName  (optional)
     * @param nuggetsPath  (optional)
     * @return OASOrgApacheSlingDistributionTrigger
     * @throws OAS.ApiException if fails to make API call
     */
    public OASOrgApacheSlingDistributionTrigger orgApacheSlingDistributionTriggerImplPersistedJcrEventDistributi(Map<String, Object> params) {
        List<OAS.Param> query = new List<OAS.Param>();

        // cast query params to verify their expected type
        query.addAll(client.makeParam('post', (Boolean) params.get('post')));
        query.addAll(client.makeParam('apply', (Boolean) params.get('apply')));
        query.addAll(client.makeParam('delete', (Boolean) params.get('r_delete')));
        query.addAll(client.makeParam('action', (String) params.get('action')));
        query.addAll(client.makeParam('$location', (String) params.get('location')));
        query.addAll(client.makeParam('propertylist', (List<String>) params.get('propertylist'), 'csv'));
        query.addAll(client.makeParam('name', (String) params.get('name')));
        query.addAll(client.makeParam('path', (String) params.get('path')));
        query.addAll(client.makeParam('serviceName', (String) params.get('serviceName')));
        query.addAll(client.makeParam('nuggetsPath', (String) params.get('nuggetsPath')));

        List<OAS.Param> form = new List<OAS.Param>();

        return (OASOrgApacheSlingDistributionTrigger) client.invoke(
            'POST', '/system/console/configMgr/org.apache.sling.distribution.trigger.impl.PersistedJcrEventDistributionTriggerFactory', '',
            query, form,
            new Map<String, Object>(),
            new Map<String, Object>(),
            new List<String>{ 'application/json', 'text/plain' },
            new List<String>(),
            new List<String> { 'aemAuth' },
            OASOrgApacheSlingDistributionTrigger.class
        );
    }
    /**
     * 
     * 
     * @param post  (optional)
     * @param apply  (optional)
     * @param r_delete  (optional)
     * @param action  (optional)
     * @param location  (optional)
     * @param propertylist  (optional)
     * @param name  (optional)
     * @param endpoint  (optional)
     * @param transportSecretProviderTarget  (optional)
     * @return OASOrgApacheSlingDistributionTrigger
     * @throws OAS.ApiException if fails to make API call
     */
    public OASOrgApacheSlingDistributionTrigger orgApacheSlingDistributionTriggerImplRemoteEventDistributionTrig(Map<String, Object> params) {
        List<OAS.Param> query = new List<OAS.Param>();

        // cast query params to verify their expected type
        query.addAll(client.makeParam('post', (Boolean) params.get('post')));
        query.addAll(client.makeParam('apply', (Boolean) params.get('apply')));
        query.addAll(client.makeParam('delete', (Boolean) params.get('r_delete')));
        query.addAll(client.makeParam('action', (String) params.get('action')));
        query.addAll(client.makeParam('$location', (String) params.get('location')));
        query.addAll(client.makeParam('propertylist', (List<String>) params.get('propertylist'), 'csv'));
        query.addAll(client.makeParam('name', (String) params.get('name')));
        query.addAll(client.makeParam('endpoint', (String) params.get('endpoint')));
        query.addAll(client.makeParam('transportSecretProvider.target', (String) params.get('transportSecretProviderTarget')));

        List<OAS.Param> form = new List<OAS.Param>();

        return (OASOrgApacheSlingDistributionTrigger) client.invoke(
            'POST', '/system/console/configMgr/org.apache.sling.distribution.trigger.impl.RemoteEventDistributionTriggerFactory', '',
            query, form,
            new Map<String, Object>(),
            new Map<String, Object>(),
            new List<String>{ 'application/json', 'text/plain' },
            new List<String>(),
            new List<String> { 'aemAuth' },
            OASOrgApacheSlingDistributionTrigger.class
        );
    }
    /**
     * 
     * 
     * @param post  (optional)
     * @param apply  (optional)
     * @param r_delete  (optional)
     * @param action  (optional)
     * @param location  (optional)
     * @param propertylist  (optional)
     * @param name  (optional)
     * @param path  (optional)
     * @return OASOrgApacheSlingDistributionTrigger
     * @throws OAS.ApiException if fails to make API call
     */
    public OASOrgApacheSlingDistributionTrigger orgApacheSlingDistributionTriggerImplResourceEventDistributionTr(Map<String, Object> params) {
        List<OAS.Param> query = new List<OAS.Param>();

        // cast query params to verify their expected type
        query.addAll(client.makeParam('post', (Boolean) params.get('post')));
        query.addAll(client.makeParam('apply', (Boolean) params.get('apply')));
        query.addAll(client.makeParam('delete', (Boolean) params.get('r_delete')));
        query.addAll(client.makeParam('action', (String) params.get('action')));
        query.addAll(client.makeParam('$location', (String) params.get('location')));
        query.addAll(client.makeParam('propertylist', (List<String>) params.get('propertylist'), 'csv'));
        query.addAll(client.makeParam('name', (String) params.get('name')));
        query.addAll(client.makeParam('path', (String) params.get('path')));

        List<OAS.Param> form = new List<OAS.Param>();

        return (OASOrgApacheSlingDistributionTrigger) client.invoke(
            'POST', '/system/console/configMgr/org.apache.sling.distribution.trigger.impl.ResourceEventDistributionTriggerFactory', '',
            query, form,
            new Map<String, Object>(),
            new Map<String, Object>(),
            new List<String>{ 'application/json', 'text/plain' },
            new List<String>(),
            new List<String> { 'aemAuth' },
            OASOrgApacheSlingDistributionTrigger.class
        );
    }
    /**
     * 
     * 
     * @param post  (optional)
     * @param apply  (optional)
     * @param r_delete  (optional)
     * @param action  (optional)
     * @param location  (optional)
     * @param propertylist  (optional)
     * @param name  (optional)
     * @param path  (optional)
     * @param seconds  (optional)
     * @param serviceName  (optional)
     * @return OASOrgApacheSlingDistributionTrigger
     * @throws OAS.ApiException if fails to make API call
     */
    public OASOrgApacheSlingDistributionTrigger orgApacheSlingDistributionTriggerImplScheduledDistributionTrigge(Map<String, Object> params) {
        List<OAS.Param> query = new List<OAS.Param>();

        // cast query params to verify their expected type
        query.addAll(client.makeParam('post', (Boolean) params.get('post')));
        query.addAll(client.makeParam('apply', (Boolean) params.get('apply')));
        query.addAll(client.makeParam('delete', (Boolean) params.get('r_delete')));
        query.addAll(client.makeParam('action', (String) params.get('action')));
        query.addAll(client.makeParam('$location', (String) params.get('location')));
        query.addAll(client.makeParam('propertylist', (List<String>) params.get('propertylist'), 'csv'));
        query.addAll(client.makeParam('name', (String) params.get('name')));
        query.addAll(client.makeParam('path', (String) params.get('path')));
        query.addAll(client.makeParam('seconds', (String) params.get('seconds')));
        query.addAll(client.makeParam('serviceName', (String) params.get('serviceName')));

        List<OAS.Param> form = new List<OAS.Param>();

        return (OASOrgApacheSlingDistributionTrigger) client.invoke(
            'POST', '/system/console/configMgr/org.apache.sling.distribution.trigger.impl.ScheduledDistributionTriggerFactory', '',
            query, form,
            new Map<String, Object>(),
            new Map<String, Object>(),
            new List<String>{ 'application/json', 'text/plain' },
            new List<String>(),
            new List<String> { 'aemAuth' },
            OASOrgApacheSlingDistributionTrigger.class
        );
    }
    /**
     * 
     * 
     * @param post  (optional)
     * @param apply  (optional)
     * @param r_delete  (optional)
     * @param action  (optional)
     * @param location  (optional)
     * @param propertylist  (optional)
     * @param osgiHttpWhiteboardContextSelect  (optional)
     * @param osgiHttpWhiteboardListener  (optional)
     * @param authSudoCookie  (optional)
     * @param authSudoParameter  (optional)
     * @param authAnnonymous  (optional)
     * @param slingAuthRequirements  (optional)
     * @param slingAuthAnonymousUser  (optional)
     * @param slingAuthAnonymousPassword  (optional)
     * @param authHttp  (optional)
     * @param authHttpRealm  (optional)
     * @param authUriSuffix  (optional)
     * @return OASOrgApacheSlingEngineImplAuthSling
     * @throws OAS.ApiException if fails to make API call
     */
    public OASOrgApacheSlingEngineImplAuthSling orgApacheSlingEngineImplAuthSlingAuthenticator(Map<String, Object> params) {
        List<OAS.Param> query = new List<OAS.Param>();

        // cast query params to verify their expected type
        query.addAll(client.makeParam('post', (Boolean) params.get('post')));
        query.addAll(client.makeParam('apply', (Boolean) params.get('apply')));
        query.addAll(client.makeParam('delete', (Boolean) params.get('r_delete')));
        query.addAll(client.makeParam('action', (String) params.get('action')));
        query.addAll(client.makeParam('$location', (String) params.get('location')));
        query.addAll(client.makeParam('propertylist', (List<String>) params.get('propertylist'), 'csv'));
        query.addAll(client.makeParam('osgi.http.whiteboard.context.select', (String) params.get('osgiHttpWhiteboardContextSelect')));
        query.addAll(client.makeParam('osgi.http.whiteboard.listener', (String) params.get('osgiHttpWhiteboardListener')));
        query.addAll(client.makeParam('auth.sudo.cookie', (String) params.get('authSudoCookie')));
        query.addAll(client.makeParam('auth.sudo.parameter', (String) params.get('authSudoParameter')));
        query.addAll(client.makeParam('auth.annonymous', (Boolean) params.get('authAnnonymous')));
        query.addAll(client.makeParams('sling.auth.requirements', (List<String>) params.get('slingAuthRequirements')));
        query.addAll(client.makeParam('sling.auth.anonymous.user', (String) params.get('slingAuthAnonymousUser')));
        query.addAll(client.makeParam('sling.auth.anonymous.password', (String) params.get('slingAuthAnonymousPassword')));
        query.addAll(client.makeParam('auth.http', (String) params.get('authHttp')));
        query.addAll(client.makeParam('auth.http.realm', (String) params.get('authHttpRealm')));
        query.addAll(client.makeParams('auth.uri.suffix', (List<String>) params.get('authUriSuffix')));

        List<OAS.Param> form = new List<OAS.Param>();

        return (OASOrgApacheSlingEngineImplAuthSling) client.invoke(
            'POST', '/system/console/configMgr/org.apache.sling.engine.impl.auth.SlingAuthenticator', '',
            query, form,
            new Map<String, Object>(),
            new Map<String, Object>(),
            new List<String>{ 'application/json', 'text/plain' },
            new List<String>(),
            new List<String> { 'aemAuth' },
            OASOrgApacheSlingEngineImplAuthSling.class
        );
    }
    /**
     * 
     * 
     * @param post  (optional)
     * @param apply  (optional)
     * @param r_delete  (optional)
     * @param action  (optional)
     * @param location  (optional)
     * @param propertylist  (optional)
     * @param extensions  (optional)
     * @param minDurationMs  (optional)
     * @param maxDurationMs  (optional)
     * @param compactLogFormat  (optional)
     * @return OASOrgApacheSlingEngineImplDebugRequ
     * @throws OAS.ApiException if fails to make API call
     */
    public OASOrgApacheSlingEngineImplDebugRequ orgApacheSlingEngineImplDebugRequestProgressTrackerLogFilter(Map<String, Object> params) {
        List<OAS.Param> query = new List<OAS.Param>();

        // cast query params to verify their expected type
        query.addAll(client.makeParam('post', (Boolean) params.get('post')));
        query.addAll(client.makeParam('apply', (Boolean) params.get('apply')));
        query.addAll(client.makeParam('delete', (Boolean) params.get('r_delete')));
        query.addAll(client.makeParam('action', (String) params.get('action')));
        query.addAll(client.makeParam('$location', (String) params.get('location')));
        query.addAll(client.makeParam('propertylist', (List<String>) params.get('propertylist'), 'csv'));
        query.addAll(client.makeParams('extensions', (List<String>) params.get('extensions')));
        query.addAll(client.makeParam('minDurationMs', (Integer) params.get('minDurationMs')));
        query.addAll(client.makeParam('maxDurationMs', (Integer) params.get('maxDurationMs')));
        query.addAll(client.makeParam('compactLogFormat', (Boolean) params.get('compactLogFormat')));

        List<OAS.Param> form = new List<OAS.Param>();

        return (OASOrgApacheSlingEngineImplDebugRequ) client.invoke(
            'POST', '/system/console/configMgr/org.apache.sling.engine.impl.debug.RequestProgressTrackerLogFilter', '',
            query, form,
            new Map<String, Object>(),
            new Map<String, Object>(),
            new List<String>{ 'application/json', 'text/plain' },
            new List<String>(),
            new List<String> { 'aemAuth' },
            OASOrgApacheSlingEngineImplDebugRequ.class
        );
    }
    /**
     * 
     * 
     * @param post  (optional)
     * @param apply  (optional)
     * @param r_delete  (optional)
     * @param action  (optional)
     * @param location  (optional)
     * @param propertylist  (optional)
     * @param requestLogOutput  (optional)
     * @param requestLogOutputtype  (optional)
     * @param requestLogEnabled  (optional)
     * @param accessLogOutput  (optional)
     * @param accessLogOutputtype  (optional)
     * @param accessLogEnabled  (optional)
     * @return OASOrgApacheSlingEngineImplLogReques
     * @throws OAS.ApiException if fails to make API call
     */
    public OASOrgApacheSlingEngineImplLogReques orgApacheSlingEngineImplLogRequestLogger(Map<String, Object> params) {
        List<OAS.Param> query = new List<OAS.Param>();

        // cast query params to verify their expected type
        query.addAll(client.makeParam('post', (Boolean) params.get('post')));
        query.addAll(client.makeParam('apply', (Boolean) params.get('apply')));
        query.addAll(client.makeParam('delete', (Boolean) params.get('r_delete')));
        query.addAll(client.makeParam('action', (String) params.get('action')));
        query.addAll(client.makeParam('$location', (String) params.get('location')));
        query.addAll(client.makeParam('propertylist', (List<String>) params.get('propertylist'), 'csv'));
        query.addAll(client.makeParam('request.log.output', (String) params.get('requestLogOutput')));
        query.addAll(client.makeParam('request.log.outputtype', (Integer) params.get('requestLogOutputtype')));
        query.addAll(client.makeParam('request.log.enabled', (Boolean) params.get('requestLogEnabled')));
        query.addAll(client.makeParam('access.log.output', (String) params.get('accessLogOutput')));
        query.addAll(client.makeParam('access.log.outputtype', (Integer) params.get('accessLogOutputtype')));
        query.addAll(client.makeParam('access.log.enabled', (Boolean) params.get('accessLogEnabled')));

        List<OAS.Param> form = new List<OAS.Param>();

        return (OASOrgApacheSlingEngineImplLogReques) client.invoke(
            'POST', '/system/console/configMgr/org.apache.sling.engine.impl.log.RequestLogger', '',
            query, form,
            new Map<String, Object>(),
            new Map<String, Object>(),
            new List<String>{ 'application/json', 'text/plain' },
            new List<String>(),
            new List<String> { 'aemAuth' },
            OASOrgApacheSlingEngineImplLogReques.class
        );
    }
    /**
     * 
     * 
     * @param post  (optional)
     * @param apply  (optional)
     * @param r_delete  (optional)
     * @param action  (optional)
     * @param location  (optional)
     * @param propertylist  (optional)
     * @param requestLogServiceFormat  (optional)
     * @param requestLogServiceOutput  (optional)
     * @param requestLogServiceOutputtype  (optional)
     * @param requestLogServiceOnentry  (optional)
     * @return OASOrgApacheSlingEngineImplLogReques
     * @throws OAS.ApiException if fails to make API call
     */
    public OASOrgApacheSlingEngineImplLogReques orgApacheSlingEngineImplLogRequestLoggerService(Map<String, Object> params) {
        List<OAS.Param> query = new List<OAS.Param>();

        // cast query params to verify their expected type
        query.addAll(client.makeParam('post', (Boolean) params.get('post')));
        query.addAll(client.makeParam('apply', (Boolean) params.get('apply')));
        query.addAll(client.makeParam('delete', (Boolean) params.get('r_delete')));
        query.addAll(client.makeParam('action', (String) params.get('action')));
        query.addAll(client.makeParam('$location', (String) params.get('location')));
        query.addAll(client.makeParam('propertylist', (List<String>) params.get('propertylist'), 'csv'));
        query.addAll(client.makeParam('request.log.service.format', (String) params.get('requestLogServiceFormat')));
        query.addAll(client.makeParam('request.log.service.output', (String) params.get('requestLogServiceOutput')));
        query.addAll(client.makeParam('request.log.service.outputtype', (Integer) params.get('requestLogServiceOutputtype')));
        query.addAll(client.makeParam('request.log.service.onentry', (Boolean) params.get('requestLogServiceOnentry')));

        List<OAS.Param> form = new List<OAS.Param>();

        return (OASOrgApacheSlingEngineImplLogReques) client.invoke(
            'POST', '/system/console/configMgr/org.apache.sling.engine.impl.log.RequestLoggerService', '',
            query, form,
            new Map<String, Object>(),
            new Map<String, Object>(),
            new List<String>{ 'application/json', 'text/plain' },
            new List<String>(),
            new List<String> { 'aemAuth' },
            OASOrgApacheSlingEngineImplLogReques.class
        );
    }
    /**
     * 
     * 
     * @param post  (optional)
     * @param apply  (optional)
     * @param r_delete  (optional)
     * @param action  (optional)
     * @param location  (optional)
     * @param propertylist  (optional)
     * @param slingMaxCalls  (optional)
     * @param slingMaxInclusions  (optional)
     * @param slingTraceAllow  (optional)
     * @param slingMaxRecordRequests  (optional)
     * @param slingStorePatternRequests  (optional)
     * @param slingServerinfo  (optional)
     * @param slingAdditionalResponseHeaders  (optional)
     * @return OASOrgApacheSlingEngineImplSlingMain
     * @throws OAS.ApiException if fails to make API call
     */
    public OASOrgApacheSlingEngineImplSlingMain orgApacheSlingEngineImplSlingMainServlet(Map<String, Object> params) {
        List<OAS.Param> query = new List<OAS.Param>();

        // cast query params to verify their expected type
        query.addAll(client.makeParam('post', (Boolean) params.get('post')));
        query.addAll(client.makeParam('apply', (Boolean) params.get('apply')));
        query.addAll(client.makeParam('delete', (Boolean) params.get('r_delete')));
        query.addAll(client.makeParam('action', (String) params.get('action')));
        query.addAll(client.makeParam('$location', (String) params.get('location')));
        query.addAll(client.makeParam('propertylist', (List<String>) params.get('propertylist'), 'csv'));
        query.addAll(client.makeParam('sling.max.calls', (Integer) params.get('slingMaxCalls')));
        query.addAll(client.makeParam('sling.max.inclusions', (Integer) params.get('slingMaxInclusions')));
        query.addAll(client.makeParam('sling.trace.allow', (Boolean) params.get('slingTraceAllow')));
        query.addAll(client.makeParam('sling.max.record.requests', (Integer) params.get('slingMaxRecordRequests')));
        query.addAll(client.makeParams('sling.store.pattern.requests', (List<String>) params.get('slingStorePatternRequests')));
        query.addAll(client.makeParam('sling.serverinfo', (String) params.get('slingServerinfo')));
        query.addAll(client.makeParams('sling.additional.response.headers', (List<String>) params.get('slingAdditionalResponseHeaders')));

        List<OAS.Param> form = new List<OAS.Param>();

        return (OASOrgApacheSlingEngineImplSlingMain) client.invoke(
            'POST', '/system/console/configMgr/org.apache.sling.engine.impl.SlingMainServlet', '',
            query, form,
            new Map<String, Object>(),
            new Map<String, Object>(),
            new List<String>{ 'application/json', 'text/plain' },
            new List<String>(),
            new List<String> { 'aemAuth' },
            OASOrgApacheSlingEngineImplSlingMain.class
        );
    }
    /**
     * 
     * 
     * @param post  (optional)
     * @param apply  (optional)
     * @param r_delete  (optional)
     * @param action  (optional)
     * @param location  (optional)
     * @param propertylist  (optional)
     * @param slingDefaultParameterEncoding  (optional)
     * @param slingDefaultMaxParameters  (optional)
     * @param fileLocation  (optional)
     * @param fileThreshold  (optional)
     * @param fileMax  (optional)
     * @param requestMax  (optional)
     * @param slingDefaultParameterCheckForAdditionalContainerParameters  (optional)
     * @return OASOrgApacheSlingEngineParametersInf
     * @throws OAS.ApiException if fails to make API call
     */
    public OASOrgApacheSlingEngineParametersInf orgApacheSlingEngineParameters(Map<String, Object> params) {
        List<OAS.Param> query = new List<OAS.Param>();

        // cast query params to verify their expected type
        query.addAll(client.makeParam('post', (Boolean) params.get('post')));
        query.addAll(client.makeParam('apply', (Boolean) params.get('apply')));
        query.addAll(client.makeParam('delete', (Boolean) params.get('r_delete')));
        query.addAll(client.makeParam('action', (String) params.get('action')));
        query.addAll(client.makeParam('$location', (String) params.get('location')));
        query.addAll(client.makeParam('propertylist', (List<String>) params.get('propertylist'), 'csv'));
        query.addAll(client.makeParam('sling.default.parameter.encoding', (String) params.get('slingDefaultParameterEncoding')));
        query.addAll(client.makeParam('sling.default.max.parameters', (Integer) params.get('slingDefaultMaxParameters')));
        query.addAll(client.makeParam('file.location', (String) params.get('fileLocation')));
        query.addAll(client.makeParam('file.threshold', (Integer) params.get('fileThreshold')));
        query.addAll(client.makeParam('file.max', (Integer) params.get('fileMax')));
        query.addAll(client.makeParam('request.max', (Integer) params.get('requestMax')));
        query.addAll(client.makeParam('sling.default.parameter.checkForAdditionalContainerParameters', (Boolean) params.get('slingDefaultParameterCheckForAdditionalContainerParameters')));

        List<OAS.Param> form = new List<OAS.Param>();

        return (OASOrgApacheSlingEngineParametersInf) client.invoke(
            'POST', '/system/console/configMgr/org.apache.sling.engine.parameters', '',
            query, form,
            new Map<String, Object>(),
            new Map<String, Object>(),
            new List<String>{ 'application/json', 'text/plain' },
            new List<String>(),
            new List<String> { 'aemAuth' },
            OASOrgApacheSlingEngineParametersInf.class
        );
    }
    /**
     * 
     * 
     * @param post  (optional)
     * @param apply  (optional)
     * @param r_delete  (optional)
     * @param action  (optional)
     * @param location  (optional)
     * @param propertylist  (optional)
     * @param minPoolSize  (optional)
     * @return OASOrgApacheSlingEventImplEventingTh
     * @throws OAS.ApiException if fails to make API call
     */
    public OASOrgApacheSlingEventImplEventingTh orgApacheSlingEventImplEventingThreadPool(Map<String, Object> params) {
        List<OAS.Param> query = new List<OAS.Param>();

        // cast query params to verify their expected type
        query.addAll(client.makeParam('post', (Boolean) params.get('post')));
        query.addAll(client.makeParam('apply', (Boolean) params.get('apply')));
        query.addAll(client.makeParam('delete', (Boolean) params.get('r_delete')));
        query.addAll(client.makeParam('action', (String) params.get('action')));
        query.addAll(client.makeParam('$location', (String) params.get('location')));
        query.addAll(client.makeParam('propertylist', (List<String>) params.get('propertylist'), 'csv'));
        query.addAll(client.makeParam('minPoolSize', (Integer) params.get('minPoolSize')));

        List<OAS.Param> form = new List<OAS.Param>();

        return (OASOrgApacheSlingEventImplEventingTh) client.invoke(
            'POST', '/system/console/configMgr/org.apache.sling.event.impl.EventingThreadPool', '',
            query, form,
            new Map<String, Object>(),
            new Map<String, Object>(),
            new List<String>{ 'application/json', 'text/plain' },
            new List<String>(),
            new List<String> { 'aemAuth' },
            OASOrgApacheSlingEventImplEventingTh.class
        );
    }
    /**
     * 
     * 
     * @param post  (optional)
     * @param apply  (optional)
     * @param r_delete  (optional)
     * @param action  (optional)
     * @param location  (optional)
     * @param propertylist  (optional)
     * @param queuePriority  (optional)
     * @param queueRetries  (optional)
     * @param queueRetrydelay  (optional)
     * @param queueMaxparallel  (optional)
     * @return OASOrgApacheSlingEventImplJobsDefaul
     * @throws OAS.ApiException if fails to make API call
     */
    public OASOrgApacheSlingEventImplJobsDefaul orgApacheSlingEventImplJobsDefaultJobManager(Map<String, Object> params) {
        List<OAS.Param> query = new List<OAS.Param>();

        // cast query params to verify their expected type
        query.addAll(client.makeParam('post', (Boolean) params.get('post')));
        query.addAll(client.makeParam('apply', (Boolean) params.get('apply')));
        query.addAll(client.makeParam('delete', (Boolean) params.get('r_delete')));
        query.addAll(client.makeParam('action', (String) params.get('action')));
        query.addAll(client.makeParam('$location', (String) params.get('location')));
        query.addAll(client.makeParam('propertylist', (List<String>) params.get('propertylist'), 'csv'));
        query.addAll(client.makeParam('queue.priority', (String) params.get('queuePriority')));
        query.addAll(client.makeParam('queue.retries', (Integer) params.get('queueRetries')));
        query.addAll(client.makeParam('queue.retrydelay', (Integer) params.get('queueRetrydelay')));
        query.addAll(client.makeParam('queue.maxparallel', (Integer) params.get('queueMaxparallel')));

        List<OAS.Param> form = new List<OAS.Param>();

        return (OASOrgApacheSlingEventImplJobsDefaul) client.invoke(
            'POST', '/system/console/configMgr/org.apache.sling.event.impl.jobs.DefaultJobManager', '',
            query, form,
            new Map<String, Object>(),
            new Map<String, Object>(),
            new List<String>{ 'application/json', 'text/plain' },
            new List<String>(),
            new List<String> { 'aemAuth' },
            OASOrgApacheSlingEventImplJobsDefaul.class
        );
    }
    /**
     * 
     * 
     * @param post  (optional)
     * @param apply  (optional)
     * @param r_delete  (optional)
     * @param action  (optional)
     * @param location  (optional)
     * @param propertylist  (optional)
     * @param jobConsumermanagerDisableDistribution  (optional)
     * @param startupDelay  (optional)
     * @param cleanupPeriod  (optional)
     * @return OASOrgApacheSlingEventImplJobsJcrPer
     * @throws OAS.ApiException if fails to make API call
     */
    public OASOrgApacheSlingEventImplJobsJcrPer orgApacheSlingEventImplJobsJcrPersistenceHandler(Map<String, Object> params) {
        List<OAS.Param> query = new List<OAS.Param>();

        // cast query params to verify their expected type
        query.addAll(client.makeParam('post', (Boolean) params.get('post')));
        query.addAll(client.makeParam('apply', (Boolean) params.get('apply')));
        query.addAll(client.makeParam('delete', (Boolean) params.get('r_delete')));
        query.addAll(client.makeParam('action', (String) params.get('action')));
        query.addAll(client.makeParam('$location', (String) params.get('location')));
        query.addAll(client.makeParam('propertylist', (List<String>) params.get('propertylist'), 'csv'));
        query.addAll(client.makeParam('job.consumermanager.disableDistribution', (Boolean) params.get('jobConsumermanagerDisableDistribution')));
        query.addAll(client.makeParam('startup.delay', (Integer) params.get('startupDelay')));
        query.addAll(client.makeParam('cleanup.period', (Integer) params.get('cleanupPeriod')));

        List<OAS.Param> form = new List<OAS.Param>();

        return (OASOrgApacheSlingEventImplJobsJcrPer) client.invoke(
            'POST', '/system/console/configMgr/org.apache.sling.event.impl.jobs.jcr.PersistenceHandler', '',
            query, form,
            new Map<String, Object>(),
            new Map<String, Object>(),
            new List<String>{ 'application/json', 'text/plain' },
            new List<String>(),
            new List<String> { 'aemAuth' },
            OASOrgApacheSlingEventImplJobsJcrPer.class
        );
    }
    /**
     * 
     * 
     * @param post  (optional)
     * @param apply  (optional)
     * @param r_delete  (optional)
     * @param action  (optional)
     * @param location  (optional)
     * @param propertylist  (optional)
     * @param orgApacheSlingInstallerConfigurationPersist  (optional)
     * @param jobConsumermanagerWhitelist  (optional)
     * @param jobConsumermanagerBlacklist  (optional)
     * @return OASOrgApacheSlingEventImplJobsJobCon
     * @throws OAS.ApiException if fails to make API call
     */
    public OASOrgApacheSlingEventImplJobsJobCon orgApacheSlingEventImplJobsJobConsumerManager(Map<String, Object> params) {
        List<OAS.Param> query = new List<OAS.Param>();

        // cast query params to verify their expected type
        query.addAll(client.makeParam('post', (Boolean) params.get('post')));
        query.addAll(client.makeParam('apply', (Boolean) params.get('apply')));
        query.addAll(client.makeParam('delete', (Boolean) params.get('r_delete')));
        query.addAll(client.makeParam('action', (String) params.get('action')));
        query.addAll(client.makeParam('$location', (String) params.get('location')));
        query.addAll(client.makeParam('propertylist', (List<String>) params.get('propertylist'), 'csv'));
        query.addAll(client.makeParam('org.apache.sling.installer.configuration.persist', (Boolean) params.get('orgApacheSlingInstallerConfigurationPersist')));
        query.addAll(client.makeParams('job.consumermanager.whitelist', (List<String>) params.get('jobConsumermanagerWhitelist')));
        query.addAll(client.makeParams('job.consumermanager.blacklist', (List<String>) params.get('jobConsumermanagerBlacklist')));

        List<OAS.Param> form = new List<OAS.Param>();

        return (OASOrgApacheSlingEventImplJobsJobCon) client.invoke(
            'POST', '/system/console/configMgr/org.apache.sling.event.impl.jobs.JobConsumerManager', '',
            query, form,
            new Map<String, Object>(),
            new Map<String, Object>(),
            new List<String>{ 'application/json', 'text/plain' },
            new List<String>(),
            new List<String> { 'aemAuth' },
            OASOrgApacheSlingEventImplJobsJobCon.class
        );
    }
    /**
     * 
     * 
     * @param post  (optional)
     * @param apply  (optional)
     * @param r_delete  (optional)
     * @param action  (optional)
     * @param location  (optional)
     * @param propertylist  (optional)
     * @param queueName  (optional)
     * @param queueTopics  (optional)
     * @param queueType  (optional)
     * @param queuePriority  (optional)
     * @param queueRetries  (optional)
     * @param queueRetrydelay  (optional)
     * @param queueMaxparallel  (optional)
     * @param queueKeepJobs  (optional)
     * @param queuePreferRunOnCreationInstance  (optional)
     * @param queueThreadPoolSize  (optional)
     * @param serviceRanking  (optional)
     * @return OASOrgApacheSlingEventJobsQueueConfi
     * @throws OAS.ApiException if fails to make API call
     */
    public OASOrgApacheSlingEventJobsQueueConfi orgApacheSlingEventJobsQueueConfiguration(Map<String, Object> params) {
        List<OAS.Param> query = new List<OAS.Param>();

        // cast query params to verify their expected type
        query.addAll(client.makeParam('post', (Boolean) params.get('post')));
        query.addAll(client.makeParam('apply', (Boolean) params.get('apply')));
        query.addAll(client.makeParam('delete', (Boolean) params.get('r_delete')));
        query.addAll(client.makeParam('action', (String) params.get('action')));
        query.addAll(client.makeParam('$location', (String) params.get('location')));
        query.addAll(client.makeParam('propertylist', (List<String>) params.get('propertylist'), 'csv'));
        query.addAll(client.makeParam('queue.name', (String) params.get('queueName')));
        query.addAll(client.makeParams('queue.topics', (List<String>) params.get('queueTopics')));
        query.addAll(client.makeParam('queue.type', (String) params.get('queueType')));
        query.addAll(client.makeParam('queue.priority', (String) params.get('queuePriority')));
        query.addAll(client.makeParam('queue.retries', (Integer) params.get('queueRetries')));
        query.addAll(client.makeParam('queue.retrydelay', (Integer) params.get('queueRetrydelay')));
        query.addAll(client.makeParam('queue.maxparallel', (Double) params.get('queueMaxparallel')));
        query.addAll(client.makeParam('queue.keepJobs', (Boolean) params.get('queueKeepJobs')));
        query.addAll(client.makeParam('queue.preferRunOnCreationInstance', (Boolean) params.get('queuePreferRunOnCreationInstance')));
        query.addAll(client.makeParam('queue.threadPoolSize', (Integer) params.get('queueThreadPoolSize')));
        query.addAll(client.makeParam('service.ranking', (Integer) params.get('serviceRanking')));

        List<OAS.Param> form = new List<OAS.Param>();

        return (OASOrgApacheSlingEventJobsQueueConfi) client.invoke(
            'POST', '/system/console/configMgr/org.apache.sling.event.jobs.QueueConfiguration', '',
            query, form,
            new Map<String, Object>(),
            new Map<String, Object>(),
            new List<String>{ 'application/json', 'text/plain' },
            new List<String>(),
            new List<String> { 'aemAuth' },
            OASOrgApacheSlingEventJobsQueueConfi.class
        );
    }
    /**
     * 
     * 
     * @param post  (optional)
     * @param apply  (optional)
     * @param r_delete  (optional)
     * @param action  (optional)
     * @param location  (optional)
     * @param propertylist  (optional)
     * @param users  (optional)
     * @param groups  (optional)
     * @return OASOrgApacheSlingExtensionsWebconsol
     * @throws OAS.ApiException if fails to make API call
     */
    public OASOrgApacheSlingExtensionsWebconsol orgApacheSlingExtensionsWebconsolesecurityproviderInternalSlingW(Map<String, Object> params) {
        List<OAS.Param> query = new List<OAS.Param>();

        // cast query params to verify their expected type
        query.addAll(client.makeParam('post', (Boolean) params.get('post')));
        query.addAll(client.makeParam('apply', (Boolean) params.get('apply')));
        query.addAll(client.makeParam('delete', (Boolean) params.get('r_delete')));
        query.addAll(client.makeParam('action', (String) params.get('action')));
        query.addAll(client.makeParam('$location', (String) params.get('location')));
        query.addAll(client.makeParam('propertylist', (List<String>) params.get('propertylist'), 'csv'));
        query.addAll(client.makeParams('users', (List<String>) params.get('users')));
        query.addAll(client.makeParams('groups', (List<String>) params.get('groups')));

        List<OAS.Param> form = new List<OAS.Param>();

        return (OASOrgApacheSlingExtensionsWebconsol) client.invoke(
            'POST', '/system/console/configMgr/org.apache.sling.extensions.webconsolesecurityprovider.internal.SlingWebConsoleSecurityProvider', '',
            query, form,
            new Map<String, Object>(),
            new Map<String, Object>(),
            new List<String>{ 'application/json', 'text/plain' },
            new List<String>(),
            new List<String> { 'aemAuth' },
            OASOrgApacheSlingExtensionsWebconsol.class
        );
    }
    /**
     * 
     * 
     * @param post  (optional)
     * @param apply  (optional)
     * @param r_delete  (optional)
     * @param action  (optional)
     * @param location  (optional)
     * @param propertylist  (optional)
     * @param name  (optional)
     * @param description  (optional)
     * @param enabled  (optional)
     * @return OASOrgApacheSlingFeatureflagsFeature
     * @throws OAS.ApiException if fails to make API call
     */
    public OASOrgApacheSlingFeatureflagsFeature orgApacheSlingFeatureflagsFeature(Map<String, Object> params) {
        List<OAS.Param> query = new List<OAS.Param>();

        // cast query params to verify their expected type
        query.addAll(client.makeParam('post', (Boolean) params.get('post')));
        query.addAll(client.makeParam('apply', (Boolean) params.get('apply')));
        query.addAll(client.makeParam('delete', (Boolean) params.get('r_delete')));
        query.addAll(client.makeParam('action', (String) params.get('action')));
        query.addAll(client.makeParam('$location', (String) params.get('location')));
        query.addAll(client.makeParam('propertylist', (List<String>) params.get('propertylist'), 'csv'));
        query.addAll(client.makeParam('name', (String) params.get('name')));
        query.addAll(client.makeParam('description', (String) params.get('description')));
        query.addAll(client.makeParam('enabled', (Boolean) params.get('enabled')));

        List<OAS.Param> form = new List<OAS.Param>();

        return (OASOrgApacheSlingFeatureflagsFeature) client.invoke(
            'POST', '/system/console/configMgr/org.apache.sling.featureflags.Feature', '',
            query, form,
            new Map<String, Object>(),
            new Map<String, Object>(),
            new List<String>{ 'application/json', 'text/plain' },
            new List<String>(),
            new List<String> { 'aemAuth' },
            OASOrgApacheSlingFeatureflagsFeature.class
        );
    }
    /**
     * 
     * 
     * @param post  (optional)
     * @param apply  (optional)
     * @param r_delete  (optional)
     * @param action  (optional)
     * @param location  (optional)
     * @param propertylist  (optional)
     * @param name  (optional)
     * @param description  (optional)
     * @param enabled  (optional)
     * @return OASOrgApacheSlingFeatureflagsImplCon
     * @throws OAS.ApiException if fails to make API call
     */
    public OASOrgApacheSlingFeatureflagsImplCon orgApacheSlingFeatureflagsImplConfiguredFeature(Map<String, Object> params) {
        List<OAS.Param> query = new List<OAS.Param>();

        // cast query params to verify their expected type
        query.addAll(client.makeParam('post', (Boolean) params.get('post')));
        query.addAll(client.makeParam('apply', (Boolean) params.get('apply')));
        query.addAll(client.makeParam('delete', (Boolean) params.get('r_delete')));
        query.addAll(client.makeParam('action', (String) params.get('action')));
        query.addAll(client.makeParam('$location', (String) params.get('location')));
        query.addAll(client.makeParam('propertylist', (List<String>) params.get('propertylist'), 'csv'));
        query.addAll(client.makeParam('name', (String) params.get('name')));
        query.addAll(client.makeParam('description', (String) params.get('description')));
        query.addAll(client.makeParam('enabled', (Boolean) params.get('enabled')));

        List<OAS.Param> form = new List<OAS.Param>();

        return (OASOrgApacheSlingFeatureflagsImplCon) client.invoke(
            'POST', '/system/console/configMgr/org.apache.sling.featureflags.impl.ConfiguredFeature', '',
            query, form,
            new Map<String, Object>(),
            new Map<String, Object>(),
            new List<String>{ 'application/json', 'text/plain' },
            new List<String>(),
            new List<String> { 'aemAuth' },
            OASOrgApacheSlingFeatureflagsImplCon.class
        );
    }
    /**
     * 
     * 
     * @param post  (optional)
     * @param apply  (optional)
     * @param r_delete  (optional)
     * @param action  (optional)
     * @param location  (optional)
     * @param propertylist  (optional)
     * @param orgApacheSlingHapiToolsResourcetype  (optional)
     * @param orgApacheSlingHapiToolsCollectionresourcetype  (optional)
     * @param orgApacheSlingHapiToolsSearchpaths  (optional)
     * @param orgApacheSlingHapiToolsExternalurl  (optional)
     * @param orgApacheSlingHapiToolsEnabled  (optional)
     * @return OASOrgApacheSlingHapiImplHApiUtilImp
     * @throws OAS.ApiException if fails to make API call
     */
    public OASOrgApacheSlingHapiImplHApiUtilImp orgApacheSlingHapiImplHApiUtilImpl(Map<String, Object> params) {
        List<OAS.Param> query = new List<OAS.Param>();

        // cast query params to verify their expected type
        query.addAll(client.makeParam('post', (Boolean) params.get('post')));
        query.addAll(client.makeParam('apply', (Boolean) params.get('apply')));
        query.addAll(client.makeParam('delete', (Boolean) params.get('r_delete')));
        query.addAll(client.makeParam('action', (String) params.get('action')));
        query.addAll(client.makeParam('$location', (String) params.get('location')));
        query.addAll(client.makeParam('propertylist', (List<String>) params.get('propertylist'), 'csv'));
        query.addAll(client.makeParam('org.apache.sling.hapi.tools.resourcetype', (String) params.get('orgApacheSlingHapiToolsResourcetype')));
        query.addAll(client.makeParam('org.apache.sling.hapi.tools.collectionresourcetype', (String) params.get('orgApacheSlingHapiToolsCollectionresourcetype')));
        query.addAll(client.makeParams('org.apache.sling.hapi.tools.searchpaths', (List<String>) params.get('orgApacheSlingHapiToolsSearchpaths')));
        query.addAll(client.makeParam('org.apache.sling.hapi.tools.externalurl', (String) params.get('orgApacheSlingHapiToolsExternalurl')));
        query.addAll(client.makeParam('org.apache.sling.hapi.tools.enabled', (Boolean) params.get('orgApacheSlingHapiToolsEnabled')));

        List<OAS.Param> form = new List<OAS.Param>();

        return (OASOrgApacheSlingHapiImplHApiUtilImp) client.invoke(
            'POST', '/system/console/configMgr/org.apache.sling.hapi.impl.HApiUtilImpl', '',
            query, form,
            new Map<String, Object>(),
            new Map<String, Object>(),
            new List<String>{ 'application/json', 'text/plain' },
            new List<String>(),
            new List<String> { 'aemAuth' },
            OASOrgApacheSlingHapiImplHApiUtilImp.class
        );
    }
    /**
     * 
     * 
     * @param post  (optional)
     * @param apply  (optional)
     * @param r_delete  (optional)
     * @param action  (optional)
     * @param location  (optional)
     * @param propertylist  (optional)
     * @param hcName  (optional)
     * @param hcTags  (optional)
     * @param hcMbeanName  (optional)
     * @param filterTags  (optional)
     * @param filterCombineTagsWithOr  (optional)
     * @return OASOrgApacheSlingHcCoreImplComposite
     * @throws OAS.ApiException if fails to make API call
     */
    public OASOrgApacheSlingHcCoreImplComposite orgApacheSlingHcCoreImplCompositeHealthCheck(Map<String, Object> params) {
        List<OAS.Param> query = new List<OAS.Param>();

        // cast query params to verify their expected type
        query.addAll(client.makeParam('post', (Boolean) params.get('post')));
        query.addAll(client.makeParam('apply', (Boolean) params.get('apply')));
        query.addAll(client.makeParam('delete', (Boolean) params.get('r_delete')));
        query.addAll(client.makeParam('action', (String) params.get('action')));
        query.addAll(client.makeParam('$location', (String) params.get('location')));
        query.addAll(client.makeParam('propertylist', (List<String>) params.get('propertylist'), 'csv'));
        query.addAll(client.makeParam('hc.name', (String) params.get('hcName')));
        query.addAll(client.makeParams('hc.tags', (List<String>) params.get('hcTags')));
        query.addAll(client.makeParam('hc.mbean.name', (String) params.get('hcMbeanName')));
        query.addAll(client.makeParams('filter.tags', (List<String>) params.get('filterTags')));
        query.addAll(client.makeParam('filter.combineTagsWithOr', (Boolean) params.get('filterCombineTagsWithOr')));

        List<OAS.Param> form = new List<OAS.Param>();

        return (OASOrgApacheSlingHcCoreImplComposite) client.invoke(
            'POST', '/system/console/configMgr/org.apache.sling.hc.core.impl.CompositeHealthCheck', '',
            query, form,
            new Map<String, Object>(),
            new Map<String, Object>(),
            new List<String>{ 'application/json', 'text/plain' },
            new List<String>(),
            new List<String> { 'aemAuth' },
            OASOrgApacheSlingHcCoreImplComposite.class
        );
    }
    /**
     * 
     * 
     * @param post  (optional)
     * @param apply  (optional)
     * @param r_delete  (optional)
     * @param action  (optional)
     * @param location  (optional)
     * @param propertylist  (optional)
     * @param timeoutInMs  (optional)
     * @param longRunningFutureThresholdForCriticalMs  (optional)
     * @param resultCacheTtlInMs  (optional)
     * @return OASOrgApacheSlingHcCoreImplExecutorH
     * @throws OAS.ApiException if fails to make API call
     */
    public OASOrgApacheSlingHcCoreImplExecutorH orgApacheSlingHcCoreImplExecutorHealthCheckExecutorImpl(Map<String, Object> params) {
        List<OAS.Param> query = new List<OAS.Param>();

        // cast query params to verify their expected type
        query.addAll(client.makeParam('post', (Boolean) params.get('post')));
        query.addAll(client.makeParam('apply', (Boolean) params.get('apply')));
        query.addAll(client.makeParam('delete', (Boolean) params.get('r_delete')));
        query.addAll(client.makeParam('action', (String) params.get('action')));
        query.addAll(client.makeParam('$location', (String) params.get('location')));
        query.addAll(client.makeParam('propertylist', (List<String>) params.get('propertylist'), 'csv'));
        query.addAll(client.makeParam('timeoutInMs', (Integer) params.get('timeoutInMs')));
        query.addAll(client.makeParam('longRunningFutureThresholdForCriticalMs', (Integer) params.get('longRunningFutureThresholdForCriticalMs')));
        query.addAll(client.makeParam('resultCacheTtlInMs', (Integer) params.get('resultCacheTtlInMs')));

        List<OAS.Param> form = new List<OAS.Param>();

        return (OASOrgApacheSlingHcCoreImplExecutorH) client.invoke(
            'POST', '/system/console/configMgr/org.apache.sling.hc.core.impl.executor.HealthCheckExecutorImpl', '',
            query, form,
            new Map<String, Object>(),
            new Map<String, Object>(),
            new List<String>{ 'application/json', 'text/plain' },
            new List<String>(),
            new List<String> { 'aemAuth' },
            OASOrgApacheSlingHcCoreImplExecutorH.class
        );
    }
    /**
     * 
     * 
     * @param post  (optional)
     * @param apply  (optional)
     * @param r_delete  (optional)
     * @param action  (optional)
     * @param location  (optional)
     * @param propertylist  (optional)
     * @param hcName  (optional)
     * @param hcTags  (optional)
     * @param hcMbeanName  (optional)
     * @param mbeanName  (optional)
     * @param attributeName  (optional)
     * @param attributeValueConstraint  (optional)
     * @return OASOrgApacheSlingHcCoreImplJmxAttrib
     * @throws OAS.ApiException if fails to make API call
     */
    public OASOrgApacheSlingHcCoreImplJmxAttrib orgApacheSlingHcCoreImplJmxAttributeHealthCheck(Map<String, Object> params) {
        List<OAS.Param> query = new List<OAS.Param>();

        // cast query params to verify their expected type
        query.addAll(client.makeParam('post', (Boolean) params.get('post')));
        query.addAll(client.makeParam('apply', (Boolean) params.get('apply')));
        query.addAll(client.makeParam('delete', (Boolean) params.get('r_delete')));
        query.addAll(client.makeParam('action', (String) params.get('action')));
        query.addAll(client.makeParam('$location', (String) params.get('location')));
        query.addAll(client.makeParam('propertylist', (List<String>) params.get('propertylist'), 'csv'));
        query.addAll(client.makeParam('hc.name', (String) params.get('hcName')));
        query.addAll(client.makeParams('hc.tags', (List<String>) params.get('hcTags')));
        query.addAll(client.makeParam('hc.mbean.name', (String) params.get('hcMbeanName')));
        query.addAll(client.makeParam('mbean.name', (String) params.get('mbeanName')));
        query.addAll(client.makeParam('attribute.name', (String) params.get('attributeName')));
        query.addAll(client.makeParam('attribute.value.constraint', (String) params.get('attributeValueConstraint')));

        List<OAS.Param> form = new List<OAS.Param>();

        return (OASOrgApacheSlingHcCoreImplJmxAttrib) client.invoke(
            'POST', '/system/console/configMgr/org.apache.sling.hc.core.impl.JmxAttributeHealthCheck', '',
            query, form,
            new Map<String, Object>(),
            new Map<String, Object>(),
            new List<String>{ 'application/json', 'text/plain' },
            new List<String>(),
            new List<String> { 'aemAuth' },
            OASOrgApacheSlingHcCoreImplJmxAttrib.class
        );
    }
    /**
     * 
     * 
     * @param post  (optional)
     * @param apply  (optional)
     * @param r_delete  (optional)
     * @param action  (optional)
     * @param location  (optional)
     * @param propertylist  (optional)
     * @param hcName  (optional)
     * @param hcTags  (optional)
     * @param hcMbeanName  (optional)
     * @param expression  (optional)
     * @param languageExtension  (optional)
     * @return OASOrgApacheSlingHcCoreImplScriptabl
     * @throws OAS.ApiException if fails to make API call
     */
    public OASOrgApacheSlingHcCoreImplScriptabl orgApacheSlingHcCoreImplScriptableHealthCheck(Map<String, Object> params) {
        List<OAS.Param> query = new List<OAS.Param>();

        // cast query params to verify their expected type
        query.addAll(client.makeParam('post', (Boolean) params.get('post')));
        query.addAll(client.makeParam('apply', (Boolean) params.get('apply')));
        query.addAll(client.makeParam('delete', (Boolean) params.get('r_delete')));
        query.addAll(client.makeParam('action', (String) params.get('action')));
        query.addAll(client.makeParam('$location', (String) params.get('location')));
        query.addAll(client.makeParam('propertylist', (List<String>) params.get('propertylist'), 'csv'));
        query.addAll(client.makeParam('hc.name', (String) params.get('hcName')));
        query.addAll(client.makeParams('hc.tags', (List<String>) params.get('hcTags')));
        query.addAll(client.makeParam('hc.mbean.name', (String) params.get('hcMbeanName')));
        query.addAll(client.makeParam('expression', (String) params.get('expression')));
        query.addAll(client.makeParam('language.extension', (String) params.get('languageExtension')));

        List<OAS.Param> form = new List<OAS.Param>();

        return (OASOrgApacheSlingHcCoreImplScriptabl) client.invoke(
            'POST', '/system/console/configMgr/org.apache.sling.hc.core.impl.ScriptableHealthCheck', '',
            query, form,
            new Map<String, Object>(),
            new Map<String, Object>(),
            new List<String>{ 'application/json', 'text/plain' },
            new List<String>(),
            new List<String> { 'aemAuth' },
            OASOrgApacheSlingHcCoreImplScriptabl.class
        );
    }
    /**
     * 
     * 
     * @param post  (optional)
     * @param apply  (optional)
     * @param r_delete  (optional)
     * @param action  (optional)
     * @param location  (optional)
     * @param propertylist  (optional)
     * @param servletPath  (optional)
     * @param disabled  (optional)
     * @param corsAccessControlAllowOrigin  (optional)
     * @return OASOrgApacheSlingHcCoreImplServletHe
     * @throws OAS.ApiException if fails to make API call
     */
    public OASOrgApacheSlingHcCoreImplServletHe orgApacheSlingHcCoreImplServletHealthCheckExecutorServlet(Map<String, Object> params) {
        List<OAS.Param> query = new List<OAS.Param>();

        // cast query params to verify their expected type
        query.addAll(client.makeParam('post', (Boolean) params.get('post')));
        query.addAll(client.makeParam('apply', (Boolean) params.get('apply')));
        query.addAll(client.makeParam('delete', (Boolean) params.get('r_delete')));
        query.addAll(client.makeParam('action', (String) params.get('action')));
        query.addAll(client.makeParam('$location', (String) params.get('location')));
        query.addAll(client.makeParam('propertylist', (List<String>) params.get('propertylist'), 'csv'));
        query.addAll(client.makeParam('servletPath', (String) params.get('servletPath')));
        query.addAll(client.makeParam('disabled', (Boolean) params.get('disabled')));
        query.addAll(client.makeParam('cors.accessControlAllowOrigin', (String) params.get('corsAccessControlAllowOrigin')));

        List<OAS.Param> form = new List<OAS.Param>();

        return (OASOrgApacheSlingHcCoreImplServletHe) client.invoke(
            'POST', '/system/console/configMgr/org.apache.sling.hc.core.impl.servlet.HealthCheckExecutorServlet', '',
            query, form,
            new Map<String, Object>(),
            new Map<String, Object>(),
            new List<String>{ 'application/json', 'text/plain' },
            new List<String>(),
            new List<String> { 'aemAuth' },
            OASOrgApacheSlingHcCoreImplServletHe.class
        );
    }
    /**
     * 
     * 
     * @param post  (optional)
     * @param apply  (optional)
     * @param r_delete  (optional)
     * @param action  (optional)
     * @param location  (optional)
     * @param propertylist  (optional)
     * @param totalWidth  (optional)
     * @param colWidthName  (optional)
     * @param colWidthResult  (optional)
     * @param colWidthTiming  (optional)
     * @return OASOrgApacheSlingHcCoreImplServletRe
     * @throws OAS.ApiException if fails to make API call
     */
    public OASOrgApacheSlingHcCoreImplServletRe orgApacheSlingHcCoreImplServletResultTxtVerboseSerializer(Map<String, Object> params) {
        List<OAS.Param> query = new List<OAS.Param>();

        // cast query params to verify their expected type
        query.addAll(client.makeParam('post', (Boolean) params.get('post')));
        query.addAll(client.makeParam('apply', (Boolean) params.get('apply')));
        query.addAll(client.makeParam('delete', (Boolean) params.get('r_delete')));
        query.addAll(client.makeParam('action', (String) params.get('action')));
        query.addAll(client.makeParam('$location', (String) params.get('location')));
        query.addAll(client.makeParam('propertylist', (List<String>) params.get('propertylist'), 'csv'));
        query.addAll(client.makeParam('totalWidth', (Integer) params.get('totalWidth')));
        query.addAll(client.makeParam('colWidthName', (Integer) params.get('colWidthName')));
        query.addAll(client.makeParam('colWidthResult', (Integer) params.get('colWidthResult')));
        query.addAll(client.makeParam('colWidthTiming', (Integer) params.get('colWidthTiming')));

        List<OAS.Param> form = new List<OAS.Param>();

        return (OASOrgApacheSlingHcCoreImplServletRe) client.invoke(
            'POST', '/system/console/configMgr/org.apache.sling.hc.core.impl.servlet.ResultTxtVerboseSerializer', '',
            query, form,
            new Map<String, Object>(),
            new Map<String, Object>(),
            new List<String>{ 'application/json', 'text/plain' },
            new List<String>(),
            new List<String> { 'aemAuth' },
            OASOrgApacheSlingHcCoreImplServletRe.class
        );
    }
    /**
     * 
     * 
     * @param post  (optional)
     * @param apply  (optional)
     * @param r_delete  (optional)
     * @param action  (optional)
     * @param location  (optional)
     * @param propertylist  (optional)
     * @param serviceRanking  (optional)
     * @param slingFilterScope  (optional)
     * @return OASOrgApacheSlingI18nImplI18NFilterI
     * @throws OAS.ApiException if fails to make API call
     */
    public OASOrgApacheSlingI18nImplI18NFilterI orgApacheSlingI18nImplI18NFilter(Map<String, Object> params) {
        List<OAS.Param> query = new List<OAS.Param>();

        // cast query params to verify their expected type
        query.addAll(client.makeParam('post', (Boolean) params.get('post')));
        query.addAll(client.makeParam('apply', (Boolean) params.get('apply')));
        query.addAll(client.makeParam('delete', (Boolean) params.get('r_delete')));
        query.addAll(client.makeParam('action', (String) params.get('action')));
        query.addAll(client.makeParam('$location', (String) params.get('location')));
        query.addAll(client.makeParam('propertylist', (List<String>) params.get('propertylist'), 'csv'));
        query.addAll(client.makeParam('service.ranking', (Integer) params.get('serviceRanking')));
        query.addAll(client.makeParams('sling.filter.scope', (List<String>) params.get('slingFilterScope')));

        List<OAS.Param> form = new List<OAS.Param>();

        return (OASOrgApacheSlingI18nImplI18NFilterI) client.invoke(
            'POST', '/system/console/configMgr/org.apache.sling.i18n.impl.I18NFilter', '',
            query, form,
            new Map<String, Object>(),
            new Map<String, Object>(),
            new List<String>{ 'application/json', 'text/plain' },
            new List<String>(),
            new List<String> { 'aemAuth' },
            OASOrgApacheSlingI18nImplI18NFilterI.class
        );
    }
    /**
     * 
     * 
     * @param post  (optional)
     * @param apply  (optional)
     * @param r_delete  (optional)
     * @param action  (optional)
     * @param location  (optional)
     * @param propertylist  (optional)
     * @param localeDefault  (optional)
     * @param preloadBundles  (optional)
     * @param invalidationDelay  (optional)
     * @return OASOrgApacheSlingI18nImplJcrResource
     * @throws OAS.ApiException if fails to make API call
     */
    public OASOrgApacheSlingI18nImplJcrResource orgApacheSlingI18nImplJcrResourceBundleProvider(Map<String, Object> params) {
        List<OAS.Param> query = new List<OAS.Param>();

        // cast query params to verify their expected type
        query.addAll(client.makeParam('post', (Boolean) params.get('post')));
        query.addAll(client.makeParam('apply', (Boolean) params.get('apply')));
        query.addAll(client.makeParam('delete', (Boolean) params.get('r_delete')));
        query.addAll(client.makeParam('action', (String) params.get('action')));
        query.addAll(client.makeParam('$location', (String) params.get('location')));
        query.addAll(client.makeParam('propertylist', (List<String>) params.get('propertylist'), 'csv'));
        query.addAll(client.makeParam('locale.default', (String) params.get('localeDefault')));
        query.addAll(client.makeParam('preload.bundles', (Boolean) params.get('preloadBundles')));
        query.addAll(client.makeParam('invalidation.delay', (Integer) params.get('invalidationDelay')));

        List<OAS.Param> form = new List<OAS.Param>();

        return (OASOrgApacheSlingI18nImplJcrResource) client.invoke(
            'POST', '/system/console/configMgr/org.apache.sling.i18n.impl.JcrResourceBundleProvider', '',
            query, form,
            new Map<String, Object>(),
            new Map<String, Object>(),
            new List<String>{ 'application/json', 'text/plain' },
            new List<String>(),
            new List<String> { 'aemAuth' },
            OASOrgApacheSlingI18nImplJcrResource.class
        );
    }
    /**
     * 
     * 
     * @param post  (optional)
     * @param apply  (optional)
     * @param r_delete  (optional)
     * @param action  (optional)
     * @param location  (optional)
     * @param propertylist  (optional)
     * @param handlerSchemes  (optional)
     * @param slingJcrinstallFolderNameRegexp  (optional)
     * @param slingJcrinstallFolderMaxDepth  (optional)
     * @param slingJcrinstallSearchPath  (optional)
     * @param slingJcrinstallNewConfigPath  (optional)
     * @param slingJcrinstallSignalPath  (optional)
     * @param slingJcrinstallEnableWriteback  (optional)
     * @return OASOrgApacheSlingInstallerProviderJc
     * @throws OAS.ApiException if fails to make API call
     */
    public OASOrgApacheSlingInstallerProviderJc orgApacheSlingInstallerProviderJcrImplJcrInstaller(Map<String, Object> params) {
        List<OAS.Param> query = new List<OAS.Param>();

        // cast query params to verify their expected type
        query.addAll(client.makeParam('post', (Boolean) params.get('post')));
        query.addAll(client.makeParam('apply', (Boolean) params.get('apply')));
        query.addAll(client.makeParam('delete', (Boolean) params.get('r_delete')));
        query.addAll(client.makeParam('action', (String) params.get('action')));
        query.addAll(client.makeParam('$location', (String) params.get('location')));
        query.addAll(client.makeParam('propertylist', (List<String>) params.get('propertylist'), 'csv'));
        query.addAll(client.makeParams('handler.schemes', (List<String>) params.get('handlerSchemes')));
        query.addAll(client.makeParam('sling.jcrinstall.folder.name.regexp', (String) params.get('slingJcrinstallFolderNameRegexp')));
        query.addAll(client.makeParam('sling.jcrinstall.folder.max.depth', (Integer) params.get('slingJcrinstallFolderMaxDepth')));
        query.addAll(client.makeParams('sling.jcrinstall.search.path', (List<String>) params.get('slingJcrinstallSearchPath')));
        query.addAll(client.makeParam('sling.jcrinstall.new.config.path', (String) params.get('slingJcrinstallNewConfigPath')));
        query.addAll(client.makeParam('sling.jcrinstall.signal.path', (String) params.get('slingJcrinstallSignalPath')));
        query.addAll(client.makeParam('sling.jcrinstall.enable.writeback', (Boolean) params.get('slingJcrinstallEnableWriteback')));

        List<OAS.Param> form = new List<OAS.Param>();

        return (OASOrgApacheSlingInstallerProviderJc) client.invoke(
            'POST', '/system/console/configMgr/org.apache.sling.installer.provider.jcr.impl.JcrInstaller', '',
            query, form,
            new Map<String, Object>(),
            new Map<String, Object>(),
            new List<String>{ 'application/json', 'text/plain' },
            new List<String>(),
            new List<String> { 'aemAuth' },
            OASOrgApacheSlingInstallerProviderJc.class
        );
    }
    /**
     * 
     * 
     * @param post  (optional)
     * @param apply  (optional)
     * @param r_delete  (optional)
     * @param action  (optional)
     * @param location  (optional)
     * @param propertylist  (optional)
     * @param whitelistBypass  (optional)
     * @param whitelistBundlesRegexp  (optional)
     * @return OASOrgApacheSlingJcrBaseInternalLogi
     * @throws OAS.ApiException if fails to make API call
     */
    public OASOrgApacheSlingJcrBaseInternalLogi orgApacheSlingJcrBaseInternalLoginAdminWhitelist(Map<String, Object> params) {
        List<OAS.Param> query = new List<OAS.Param>();

        // cast query params to verify their expected type
        query.addAll(client.makeParam('post', (Boolean) params.get('post')));
        query.addAll(client.makeParam('apply', (Boolean) params.get('apply')));
        query.addAll(client.makeParam('delete', (Boolean) params.get('r_delete')));
        query.addAll(client.makeParam('action', (String) params.get('action')));
        query.addAll(client.makeParam('$location', (String) params.get('location')));
        query.addAll(client.makeParam('propertylist', (List<String>) params.get('propertylist'), 'csv'));
        query.addAll(client.makeParam('whitelist.bypass', (Boolean) params.get('whitelistBypass')));
        query.addAll(client.makeParam('whitelist.bundles.regexp', (String) params.get('whitelistBundlesRegexp')));

        List<OAS.Param> form = new List<OAS.Param>();

        return (OASOrgApacheSlingJcrBaseInternalLogi) client.invoke(
            'POST', '/system/console/configMgr/org.apache.sling.jcr.base.internal.LoginAdminWhitelist', '',
            query, form,
            new Map<String, Object>(),
            new Map<String, Object>(),
            new List<String>{ 'application/json', 'text/plain' },
            new List<String>(),
            new List<String> { 'aemAuth' },
            OASOrgApacheSlingJcrBaseInternalLogi.class
        );
    }
    /**
     * 
     * 
     * @param post  (optional)
     * @param apply  (optional)
     * @param r_delete  (optional)
     * @param action  (optional)
     * @param location  (optional)
     * @param propertylist  (optional)
     * @param whitelistName  (optional)
     * @param whitelistBundles  (optional)
     * @return OASOrgApacheSlingJcrBaseInternalLogi
     * @throws OAS.ApiException if fails to make API call
     */
    public OASOrgApacheSlingJcrBaseInternalLogi orgApacheSlingJcrBaseInternalLoginAdminWhitelistFragment(Map<String, Object> params) {
        List<OAS.Param> query = new List<OAS.Param>();

        // cast query params to verify their expected type
        query.addAll(client.makeParam('post', (Boolean) params.get('post')));
        query.addAll(client.makeParam('apply', (Boolean) params.get('apply')));
        query.addAll(client.makeParam('delete', (Boolean) params.get('r_delete')));
        query.addAll(client.makeParam('action', (String) params.get('action')));
        query.addAll(client.makeParam('$location', (String) params.get('location')));
        query.addAll(client.makeParam('propertylist', (List<String>) params.get('propertylist'), 'csv'));
        query.addAll(client.makeParam('whitelist.name', (String) params.get('whitelistName')));
        query.addAll(client.makeParams('whitelist.bundles', (List<String>) params.get('whitelistBundles')));

        List<OAS.Param> form = new List<OAS.Param>();

        return (OASOrgApacheSlingJcrBaseInternalLogi) client.invoke(
            'POST', '/system/console/configMgr/org.apache.sling.jcr.base.internal.LoginAdminWhitelist.fragment', '',
            query, form,
            new Map<String, Object>(),
            new Map<String, Object>(),
            new List<String>{ 'application/json', 'text/plain' },
            new List<String>(),
            new List<String> { 'aemAuth' },
            OASOrgApacheSlingJcrBaseInternalLogi.class
        );
    }
    /**
     * 
     * 
     * @param post  (optional)
     * @param apply  (optional)
     * @param r_delete  (optional)
     * @param action  (optional)
     * @param location  (optional)
     * @param propertylist  (optional)
     * @param alias  (optional)
     * @param davCreateAbsoluteUri  (optional)
     * @param davProtectedhandlers  (optional)
     * @return OASOrgApacheSlingJcrDavexImplServlet
     * @throws OAS.ApiException if fails to make API call
     */
    public OASOrgApacheSlingJcrDavexImplServlet orgApacheSlingJcrDavexImplServletsSlingDavExServlet(Map<String, Object> params) {
        List<OAS.Param> query = new List<OAS.Param>();

        // cast query params to verify their expected type
        query.addAll(client.makeParam('post', (Boolean) params.get('post')));
        query.addAll(client.makeParam('apply', (Boolean) params.get('apply')));
        query.addAll(client.makeParam('delete', (Boolean) params.get('r_delete')));
        query.addAll(client.makeParam('action', (String) params.get('action')));
        query.addAll(client.makeParam('$location', (String) params.get('location')));
        query.addAll(client.makeParam('propertylist', (List<String>) params.get('propertylist'), 'csv'));
        query.addAll(client.makeParam('alias', (String) params.get('alias')));
        query.addAll(client.makeParam('dav.create-absolute-uri', (Boolean) params.get('davCreateAbsoluteUri')));
        query.addAll(client.makeParam('dav.protectedhandlers', (String) params.get('davProtectedhandlers')));

        List<OAS.Param> form = new List<OAS.Param>();

        return (OASOrgApacheSlingJcrDavexImplServlet) client.invoke(
            'POST', '/system/console/configMgr/org.apache.sling.jcr.davex.impl.servlets.SlingDavExServlet', '',
            query, form,
            new Map<String, Object>(),
            new Map<String, Object>(),
            new List<String>{ 'application/json', 'text/plain' },
            new List<String>(),
            new List<String> { 'aemAuth' },
            OASOrgApacheSlingJcrDavexImplServlet.class
        );
    }
    /**
     * 
     * 
     * @param post  (optional)
     * @param apply  (optional)
     * @param r_delete  (optional)
     * @param action  (optional)
     * @param location  (optional)
     * @param propertylist  (optional)
     * @param javaNamingFactoryInitial  (optional)
     * @param javaNamingProviderUrl  (optional)
     * @return OASOrgApacheSlingJcrJackrabbitServer
     * @throws OAS.ApiException if fails to make API call
     */
    public OASOrgApacheSlingJcrJackrabbitServer orgApacheSlingJcrJackrabbitServerJndiRegistrationSupport(Map<String, Object> params) {
        List<OAS.Param> query = new List<OAS.Param>();

        // cast query params to verify their expected type
        query.addAll(client.makeParam('post', (Boolean) params.get('post')));
        query.addAll(client.makeParam('apply', (Boolean) params.get('apply')));
        query.addAll(client.makeParam('delete', (Boolean) params.get('r_delete')));
        query.addAll(client.makeParam('action', (String) params.get('action')));
        query.addAll(client.makeParam('$location', (String) params.get('location')));
        query.addAll(client.makeParam('propertylist', (List<String>) params.get('propertylist'), 'csv'));
        query.addAll(client.makeParam('java.naming.factory.initial', (String) params.get('javaNamingFactoryInitial')));
        query.addAll(client.makeParam('java.naming.provider.url', (String) params.get('javaNamingProviderUrl')));

        List<OAS.Param> form = new List<OAS.Param>();

        return (OASOrgApacheSlingJcrJackrabbitServer) client.invoke(
            'POST', '/system/console/configMgr/org.apache.sling.jcr.jackrabbit.server.JndiRegistrationSupport', '',
            query, form,
            new Map<String, Object>(),
            new Map<String, Object>(),
            new List<String>{ 'application/json', 'text/plain' },
            new List<String>(),
            new List<String> { 'aemAuth' },
            OASOrgApacheSlingJcrJackrabbitServer.class
        );
    }
    /**
     * 
     * 
     * @param post  (optional)
     * @param apply  (optional)
     * @param r_delete  (optional)
     * @param action  (optional)
     * @param location  (optional)
     * @param propertylist  (optional)
     * @param port  (optional)
     * @return OASOrgApacheSlingJcrJackrabbitServer
     * @throws OAS.ApiException if fails to make API call
     */
    public OASOrgApacheSlingJcrJackrabbitServer orgApacheSlingJcrJackrabbitServerRmiRegistrationSupport(Map<String, Object> params) {
        List<OAS.Param> query = new List<OAS.Param>();

        // cast query params to verify their expected type
        query.addAll(client.makeParam('post', (Boolean) params.get('post')));
        query.addAll(client.makeParam('apply', (Boolean) params.get('apply')));
        query.addAll(client.makeParam('delete', (Boolean) params.get('r_delete')));
        query.addAll(client.makeParam('action', (String) params.get('action')));
        query.addAll(client.makeParam('$location', (String) params.get('location')));
        query.addAll(client.makeParam('propertylist', (List<String>) params.get('propertylist'), 'csv'));
        query.addAll(client.makeParam('port', (Integer) params.get('port')));

        List<OAS.Param> form = new List<OAS.Param>();

        return (OASOrgApacheSlingJcrJackrabbitServer) client.invoke(
            'POST', '/system/console/configMgr/org.apache.sling.jcr.jackrabbit.server.RmiRegistrationSupport', '',
            query, form,
            new Map<String, Object>(),
            new Map<String, Object>(),
            new List<String>{ 'application/json', 'text/plain' },
            new List<String>(),
            new List<String> { 'aemAuth' },
            OASOrgApacheSlingJcrJackrabbitServer.class
        );
    }
    /**
     * 
     * 
     * @param post  (optional)
     * @param apply  (optional)
     * @param r_delete  (optional)
     * @param action  (optional)
     * @param location  (optional)
     * @param propertylist  (optional)
     * @param references  (optional)
     * @return OASOrgApacheSlingJcrRepoinitImplRepo
     * @throws OAS.ApiException if fails to make API call
     */
    public OASOrgApacheSlingJcrRepoinitImplRepo orgApacheSlingJcrRepoinitImplRepositoryInitializer(Map<String, Object> params) {
        List<OAS.Param> query = new List<OAS.Param>();

        // cast query params to verify their expected type
        query.addAll(client.makeParam('post', (Boolean) params.get('post')));
        query.addAll(client.makeParam('apply', (Boolean) params.get('apply')));
        query.addAll(client.makeParam('delete', (Boolean) params.get('r_delete')));
        query.addAll(client.makeParam('action', (String) params.get('action')));
        query.addAll(client.makeParam('$location', (String) params.get('location')));
        query.addAll(client.makeParam('propertylist', (List<String>) params.get('propertylist'), 'csv'));
        query.addAll(client.makeParams('references', (List<String>) params.get('references')));

        List<OAS.Param> form = new List<OAS.Param>();

        return (OASOrgApacheSlingJcrRepoinitImplRepo) client.invoke(
            'POST', '/system/console/configMgr/org.apache.sling.jcr.repoinit.impl.RepositoryInitializer', '',
            query, form,
            new Map<String, Object>(),
            new Map<String, Object>(),
            new List<String>{ 'application/json', 'text/plain' },
            new List<String>(),
            new List<String> { 'aemAuth' },
            OASOrgApacheSlingJcrRepoinitImplRepo.class
        );
    }
    /**
     * 
     * 
     * @param post  (optional)
     * @param apply  (optional)
     * @param r_delete  (optional)
     * @param action  (optional)
     * @param location  (optional)
     * @param propertylist  (optional)
     * @param references  (optional)
     * @param scripts  (optional)
     * @return OASOrgApacheSlingJcrRepoinitReposito
     * @throws OAS.ApiException if fails to make API call
     */
    public OASOrgApacheSlingJcrRepoinitReposito orgApacheSlingJcrRepoinitRepositoryInitializer(Map<String, Object> params) {
        List<OAS.Param> query = new List<OAS.Param>();

        // cast query params to verify their expected type
        query.addAll(client.makeParam('post', (Boolean) params.get('post')));
        query.addAll(client.makeParam('apply', (Boolean) params.get('apply')));
        query.addAll(client.makeParam('delete', (Boolean) params.get('r_delete')));
        query.addAll(client.makeParam('action', (String) params.get('action')));
        query.addAll(client.makeParam('$location', (String) params.get('location')));
        query.addAll(client.makeParam('propertylist', (List<String>) params.get('propertylist'), 'csv'));
        query.addAll(client.makeParams('references', (List<String>) params.get('references')));
        query.addAll(client.makeParams('scripts', (List<String>) params.get('scripts')));

        List<OAS.Param> form = new List<OAS.Param>();

        return (OASOrgApacheSlingJcrRepoinitReposito) client.invoke(
            'POST', '/system/console/configMgr/org.apache.sling.jcr.repoinit.RepositoryInitializer', '',
            query, form,
            new Map<String, Object>(),
            new Map<String, Object>(),
            new List<String>{ 'application/json', 'text/plain' },
            new List<String>(),
            new List<String> { 'aemAuth' },
            OASOrgApacheSlingJcrRepoinitReposito.class
        );
    }
    /**
     * 
     * 
     * @param post  (optional)
     * @param apply  (optional)
     * @param r_delete  (optional)
     * @param action  (optional)
     * @param location  (optional)
     * @param propertylist  (optional)
     * @param resourceResolverSearchpath  (optional)
     * @param resourceResolverManglenamespaces  (optional)
     * @param resourceResolverAllowDirect  (optional)
     * @param resourceResolverRequiredProviders  (optional)
     * @param resourceResolverRequiredProvidernames  (optional)
     * @param resourceResolverVirtual  (optional)
     * @param resourceResolverMapping  (optional)
     * @param resourceResolverMapLocation  (optional)
     * @param resourceResolverMapObservation  (optional)
     * @param resourceResolverDefaultVanityRedirectStatus  (optional)
     * @param resourceResolverEnableVanitypath  (optional)
     * @param resourceResolverVanitypathMaxEntries  (optional)
     * @param resourceResolverVanitypathMaxEntriesStartup  (optional)
     * @param resourceResolverVanitypathBloomfilterMaxBytes  (optional)
     * @param resourceResolverOptimizeAliasResolution  (optional)
     * @param resourceResolverVanitypathWhitelist  (optional)
     * @param resourceResolverVanitypathBlacklist  (optional)
     * @param resourceResolverVanityPrecedence  (optional)
     * @param resourceResolverProviderhandlingParanoid  (optional)
     * @param resourceResolverLogClosing  (optional)
     * @param resourceResolverLogUnclosed  (optional)
     * @return OASOrgApacheSlingJcrResourceInternal
     * @throws OAS.ApiException if fails to make API call
     */
    public OASOrgApacheSlingJcrResourceInternal orgApacheSlingJcrResourceInternalJcrResourceResolverFactoryImpl(Map<String, Object> params) {
        List<OAS.Param> query = new List<OAS.Param>();

        // cast query params to verify their expected type
        query.addAll(client.makeParam('post', (Boolean) params.get('post')));
        query.addAll(client.makeParam('apply', (Boolean) params.get('apply')));
        query.addAll(client.makeParam('delete', (Boolean) params.get('r_delete')));
        query.addAll(client.makeParam('action', (String) params.get('action')));
        query.addAll(client.makeParam('$location', (String) params.get('location')));
        query.addAll(client.makeParam('propertylist', (List<String>) params.get('propertylist'), 'csv'));
        query.addAll(client.makeParams('resource.resolver.searchpath', (List<String>) params.get('resourceResolverSearchpath')));
        query.addAll(client.makeParam('resource.resolver.manglenamespaces', (Boolean) params.get('resourceResolverManglenamespaces')));
        query.addAll(client.makeParam('resource.resolver.allowDirect', (Boolean) params.get('resourceResolverAllowDirect')));
        query.addAll(client.makeParams('resource.resolver.required.providers', (List<String>) params.get('resourceResolverRequiredProviders')));
        query.addAll(client.makeParams('resource.resolver.required.providernames', (List<String>) params.get('resourceResolverRequiredProvidernames')));
        query.addAll(client.makeParams('resource.resolver.virtual', (List<String>) params.get('resourceResolverVirtual')));
        query.addAll(client.makeParams('resource.resolver.mapping', (List<String>) params.get('resourceResolverMapping')));
        query.addAll(client.makeParam('resource.resolver.map.location', (String) params.get('resourceResolverMapLocation')));
        query.addAll(client.makeParams('resource.resolver.map.observation', (List<String>) params.get('resourceResolverMapObservation')));
        query.addAll(client.makeParam('resource.resolver.default.vanity.redirect.status', (Integer) params.get('resourceResolverDefaultVanityRedirectStatus')));
        query.addAll(client.makeParam('resource.resolver.enable.vanitypath', (Boolean) params.get('resourceResolverEnableVanitypath')));
        query.addAll(client.makeParam('resource.resolver.vanitypath.maxEntries', (Integer) params.get('resourceResolverVanitypathMaxEntries')));
        query.addAll(client.makeParam('resource.resolver.vanitypath.maxEntries.startup', (Boolean) params.get('resourceResolverVanitypathMaxEntriesStartup')));
        query.addAll(client.makeParam('resource.resolver.vanitypath.bloomfilter.maxBytes', (Integer) params.get('resourceResolverVanitypathBloomfilterMaxBytes')));
        query.addAll(client.makeParam('resource.resolver.optimize.alias.resolution', (Boolean) params.get('resourceResolverOptimizeAliasResolution')));
        query.addAll(client.makeParams('resource.resolver.vanitypath.whitelist', (List<String>) params.get('resourceResolverVanitypathWhitelist')));
        query.addAll(client.makeParams('resource.resolver.vanitypath.blacklist', (List<String>) params.get('resourceResolverVanitypathBlacklist')));
        query.addAll(client.makeParam('resource.resolver.vanity.precedence', (Boolean) params.get('resourceResolverVanityPrecedence')));
        query.addAll(client.makeParam('resource.resolver.providerhandling.paranoid', (Boolean) params.get('resourceResolverProviderhandlingParanoid')));
        query.addAll(client.makeParam('resource.resolver.log.closing', (Boolean) params.get('resourceResolverLogClosing')));
        query.addAll(client.makeParam('resource.resolver.log.unclosed', (Boolean) params.get('resourceResolverLogUnclosed')));

        List<OAS.Param> form = new List<OAS.Param>();

        return (OASOrgApacheSlingJcrResourceInternal) client.invoke(
            'POST', '/system/console/configMgr/org.apache.sling.jcr.resource.internal.JcrResourceResolverFactoryImpl', '',
            query, form,
            new Map<String, Object>(),
            new Map<String, Object>(),
            new List<String>{ 'application/json', 'text/plain' },
            new List<String>(),
            new List<String> { 'aemAuth' },
            OASOrgApacheSlingJcrResourceInternal.class
        );
    }
    /**
     * 
     * 
     * @param post  (optional)
     * @param apply  (optional)
     * @param r_delete  (optional)
     * @param action  (optional)
     * @param location  (optional)
     * @param propertylist  (optional)
     * @param allowOnlySystemUser  (optional)
     * @return OASOrgApacheSlingJcrResourceInternal
     * @throws OAS.ApiException if fails to make API call
     */
    public OASOrgApacheSlingJcrResourceInternal orgApacheSlingJcrResourceInternalJcrSystemUserValidator(Map<String, Object> params) {
        List<OAS.Param> query = new List<OAS.Param>();

        // cast query params to verify their expected type
        query.addAll(client.makeParam('post', (Boolean) params.get('post')));
        query.addAll(client.makeParam('apply', (Boolean) params.get('apply')));
        query.addAll(client.makeParam('delete', (Boolean) params.get('r_delete')));
        query.addAll(client.makeParam('action', (String) params.get('action')));
        query.addAll(client.makeParam('$location', (String) params.get('location')));
        query.addAll(client.makeParam('propertylist', (List<String>) params.get('propertylist'), 'csv'));
        query.addAll(client.makeParam('allow.only.system.user', (Boolean) params.get('allowOnlySystemUser')));

        List<OAS.Param> form = new List<OAS.Param>();

        return (OASOrgApacheSlingJcrResourceInternal) client.invoke(
            'POST', '/system/console/configMgr/org.apache.sling.jcr.resource.internal.JcrSystemUserValidator', '',
            query, form,
            new Map<String, Object>(),
            new Map<String, Object>(),
            new List<String>{ 'application/json', 'text/plain' },
            new List<String>(),
            new List<String> { 'aemAuth' },
            OASOrgApacheSlingJcrResourceInternal.class
        );
    }
    /**
     * 
     * 
     * @param post  (optional)
     * @param apply  (optional)
     * @param r_delete  (optional)
     * @param action  (optional)
     * @param location  (optional)
     * @param propertylist  (optional)
     * @param path  (optional)
     * @param checkpathPrefix  (optional)
     * @param jcrPath  (optional)
     * @return OASOrgApacheSlingJcrResourcesecurity
     * @throws OAS.ApiException if fails to make API call
     */
    public OASOrgApacheSlingJcrResourcesecurity orgApacheSlingJcrResourcesecurityImplResourceAccessGateFactory(Map<String, Object> params) {
        List<OAS.Param> query = new List<OAS.Param>();

        // cast query params to verify their expected type
        query.addAll(client.makeParam('post', (Boolean) params.get('post')));
        query.addAll(client.makeParam('apply', (Boolean) params.get('apply')));
        query.addAll(client.makeParam('delete', (Boolean) params.get('r_delete')));
        query.addAll(client.makeParam('action', (String) params.get('action')));
        query.addAll(client.makeParam('$location', (String) params.get('location')));
        query.addAll(client.makeParam('propertylist', (List<String>) params.get('propertylist'), 'csv'));
        query.addAll(client.makeParam('path', (String) params.get('path')));
        query.addAll(client.makeParam('checkpath.prefix', (String) params.get('checkpathPrefix')));
        query.addAll(client.makeParam('jcrPath', (String) params.get('jcrPath')));

        List<OAS.Param> form = new List<OAS.Param>();

        return (OASOrgApacheSlingJcrResourcesecurity) client.invoke(
            'POST', '/system/console/configMgr/org.apache.sling.jcr.resourcesecurity.impl.ResourceAccessGateFactory', '',
            query, form,
            new Map<String, Object>(),
            new Map<String, Object>(),
            new List<String>{ 'application/json', 'text/plain' },
            new List<String>(),
            new List<String> { 'aemAuth' },
            OASOrgApacheSlingJcrResourcesecurity.class
        );
    }
    /**
     * 
     * 
     * @param post  (optional)
     * @param apply  (optional)
     * @param r_delete  (optional)
     * @param action  (optional)
     * @param location  (optional)
     * @param propertylist  (optional)
     * @param serviceRanking  (optional)
     * @param typeCollections  (optional)
     * @param typeNoncollections  (optional)
     * @param typeContent  (optional)
     * @return OASOrgApacheSlingJcrWebdavImplHandle
     * @throws OAS.ApiException if fails to make API call
     */
    public OASOrgApacheSlingJcrWebdavImplHandle orgApacheSlingJcrWebdavImplHandlerDefaultHandlerService(Map<String, Object> params) {
        List<OAS.Param> query = new List<OAS.Param>();

        // cast query params to verify their expected type
        query.addAll(client.makeParam('post', (Boolean) params.get('post')));
        query.addAll(client.makeParam('apply', (Boolean) params.get('apply')));
        query.addAll(client.makeParam('delete', (Boolean) params.get('r_delete')));
        query.addAll(client.makeParam('action', (String) params.get('action')));
        query.addAll(client.makeParam('$location', (String) params.get('location')));
        query.addAll(client.makeParam('propertylist', (List<String>) params.get('propertylist'), 'csv'));
        query.addAll(client.makeParam('service.ranking', (Integer) params.get('serviceRanking')));
        query.addAll(client.makeParam('type.collections', (String) params.get('typeCollections')));
        query.addAll(client.makeParam('type.noncollections', (String) params.get('typeNoncollections')));
        query.addAll(client.makeParam('type.content', (String) params.get('typeContent')));

        List<OAS.Param> form = new List<OAS.Param>();

        return (OASOrgApacheSlingJcrWebdavImplHandle) client.invoke(
            'POST', '/system/console/configMgr/org.apache.sling.jcr.webdav.impl.handler.DefaultHandlerService', '',
            query, form,
            new Map<String, Object>(),
            new Map<String, Object>(),
            new List<String>{ 'application/json', 'text/plain' },
            new List<String>(),
            new List<String> { 'aemAuth' },
            OASOrgApacheSlingJcrWebdavImplHandle.class
        );
    }
    /**
     * 
     * 
     * @param post  (optional)
     * @param apply  (optional)
     * @param r_delete  (optional)
     * @param action  (optional)
     * @param location  (optional)
     * @param propertylist  (optional)
     * @param serviceRanking  (optional)
     * @return OASOrgApacheSlingJcrWebdavImplHandle
     * @throws OAS.ApiException if fails to make API call
     */
    public OASOrgApacheSlingJcrWebdavImplHandle orgApacheSlingJcrWebdavImplHandlerDirListingExportHandlerServic(Map<String, Object> params) {
        List<OAS.Param> query = new List<OAS.Param>();

        // cast query params to verify their expected type
        query.addAll(client.makeParam('post', (Boolean) params.get('post')));
        query.addAll(client.makeParam('apply', (Boolean) params.get('apply')));
        query.addAll(client.makeParam('delete', (Boolean) params.get('r_delete')));
        query.addAll(client.makeParam('action', (String) params.get('action')));
        query.addAll(client.makeParam('$location', (String) params.get('location')));
        query.addAll(client.makeParam('propertylist', (List<String>) params.get('propertylist'), 'csv'));
        query.addAll(client.makeParam('service.ranking', (Integer) params.get('serviceRanking')));

        List<OAS.Param> form = new List<OAS.Param>();

        return (OASOrgApacheSlingJcrWebdavImplHandle) client.invoke(
            'POST', '/system/console/configMgr/org.apache.sling.jcr.webdav.impl.handler.DirListingExportHandlerService', '',
            query, form,
            new Map<String, Object>(),
            new Map<String, Object>(),
            new List<String>{ 'application/json', 'text/plain' },
            new List<String>(),
            new List<String> { 'aemAuth' },
            OASOrgApacheSlingJcrWebdavImplHandle.class
        );
    }
    /**
     * 
     * 
     * @param post  (optional)
     * @param apply  (optional)
     * @param r_delete  (optional)
     * @param action  (optional)
     * @param location  (optional)
     * @param propertylist  (optional)
     * @param davRoot  (optional)
     * @param davCreateAbsoluteUri  (optional)
     * @param davRealm  (optional)
     * @param collectionTypes  (optional)
     * @param filterPrefixes  (optional)
     * @param filterTypes  (optional)
     * @param filterUris  (optional)
     * @param typeCollections  (optional)
     * @param typeNoncollections  (optional)
     * @param typeContent  (optional)
     * @return OASOrgApacheSlingJcrWebdavImplServle
     * @throws OAS.ApiException if fails to make API call
     */
    public OASOrgApacheSlingJcrWebdavImplServle orgApacheSlingJcrWebdavImplServletsSimpleWebDavServlet(Map<String, Object> params) {
        List<OAS.Param> query = new List<OAS.Param>();

        // cast query params to verify their expected type
        query.addAll(client.makeParam('post', (Boolean) params.get('post')));
        query.addAll(client.makeParam('apply', (Boolean) params.get('apply')));
        query.addAll(client.makeParam('delete', (Boolean) params.get('r_delete')));
        query.addAll(client.makeParam('action', (String) params.get('action')));
        query.addAll(client.makeParam('$location', (String) params.get('location')));
        query.addAll(client.makeParam('propertylist', (List<String>) params.get('propertylist'), 'csv'));
        query.addAll(client.makeParam('dav.root', (String) params.get('davRoot')));
        query.addAll(client.makeParam('dav.create-absolute-uri', (Boolean) params.get('davCreateAbsoluteUri')));
        query.addAll(client.makeParam('dav.realm', (String) params.get('davRealm')));
        query.addAll(client.makeParams('collection.types', (List<String>) params.get('collectionTypes')));
        query.addAll(client.makeParams('filter.prefixes', (List<String>) params.get('filterPrefixes')));
        query.addAll(client.makeParam('filter.types', (String) params.get('filterTypes')));
        query.addAll(client.makeParam('filter.uris', (String) params.get('filterUris')));
        query.addAll(client.makeParam('type.collections', (String) params.get('typeCollections')));
        query.addAll(client.makeParam('type.noncollections', (String) params.get('typeNoncollections')));
        query.addAll(client.makeParam('type.content', (String) params.get('typeContent')));

        List<OAS.Param> form = new List<OAS.Param>();

        return (OASOrgApacheSlingJcrWebdavImplServle) client.invoke(
            'POST', '/system/console/configMgr/org.apache.sling.jcr.webdav.impl.servlets.SimpleWebDavServlet', '',
            query, form,
            new Map<String, Object>(),
            new Map<String, Object>(),
            new List<String>{ 'application/json', 'text/plain' },
            new List<String>(),
            new List<String> { 'aemAuth' },
            OASOrgApacheSlingJcrWebdavImplServle.class
        );
    }
    /**
     * 
     * 
     * @param post  (optional)
     * @param apply  (optional)
     * @param r_delete  (optional)
     * @param action  (optional)
     * @param location  (optional)
     * @param propertylist  (optional)
     * @param providerRoots  (optional)
     * @return OASOrgApacheSlingJmxProviderImplJMXR
     * @throws OAS.ApiException if fails to make API call
     */
    public OASOrgApacheSlingJmxProviderImplJMXR orgApacheSlingJmxProviderImplJMXResourceProvider(Map<String, Object> params) {
        List<OAS.Param> query = new List<OAS.Param>();

        // cast query params to verify their expected type
        query.addAll(client.makeParam('post', (Boolean) params.get('post')));
        query.addAll(client.makeParam('apply', (Boolean) params.get('apply')));
        query.addAll(client.makeParam('delete', (Boolean) params.get('r_delete')));
        query.addAll(client.makeParam('action', (String) params.get('action')));
        query.addAll(client.makeParam('$location', (String) params.get('location')));
        query.addAll(client.makeParam('propertylist', (List<String>) params.get('propertylist'), 'csv'));
        query.addAll(client.makeParam('provider.roots', (String) params.get('providerRoots')));

        List<OAS.Param> form = new List<OAS.Param>();

        return (OASOrgApacheSlingJmxProviderImplJMXR) client.invoke(
            'POST', '/system/console/configMgr/org.apache.sling.jmx.provider.impl.JMXResourceProvider', '',
            query, form,
            new Map<String, Object>(),
            new Map<String, Object>(),
            new List<String>{ 'application/json', 'text/plain' },
            new List<String>(),
            new List<String> { 'aemAuth' },
            OASOrgApacheSlingJmxProviderImplJMXR.class
        );
    }
    /**
     * 
     * 
     * @param post  (optional)
     * @param apply  (optional)
     * @param r_delete  (optional)
     * @param action  (optional)
     * @param location  (optional)
     * @param propertylist  (optional)
     * @param osgiHttpWhiteboardListener  (optional)
     * @param osgiHttpWhiteboardContextSelect  (optional)
     * @param maxRecursionDepth  (optional)
     * @param cleanupJobPeriod  (optional)
     * @return OASOrgApacheSlingModelsImplModelAdap
     * @throws OAS.ApiException if fails to make API call
     */
    public OASOrgApacheSlingModelsImplModelAdap orgApacheSlingModelsImplModelAdapterFactory(Map<String, Object> params) {
        List<OAS.Param> query = new List<OAS.Param>();

        // cast query params to verify their expected type
        query.addAll(client.makeParam('post', (Boolean) params.get('post')));
        query.addAll(client.makeParam('apply', (Boolean) params.get('apply')));
        query.addAll(client.makeParam('delete', (Boolean) params.get('r_delete')));
        query.addAll(client.makeParam('action', (String) params.get('action')));
        query.addAll(client.makeParam('$location', (String) params.get('location')));
        query.addAll(client.makeParam('propertylist', (List<String>) params.get('propertylist'), 'csv'));
        query.addAll(client.makeParam('osgi.http.whiteboard.listener', (String) params.get('osgiHttpWhiteboardListener')));
        query.addAll(client.makeParam('osgi.http.whiteboard.context.select', (String) params.get('osgiHttpWhiteboardContextSelect')));
        query.addAll(client.makeParam('max.recursion.depth', (Integer) params.get('maxRecursionDepth')));
        query.addAll(client.makeParam('cleanup.job.period', (Integer) params.get('cleanupJobPeriod')));

        List<OAS.Param> form = new List<OAS.Param>();

        return (OASOrgApacheSlingModelsImplModelAdap) client.invoke(
            'POST', '/system/console/configMgr/org.apache.sling.models.impl.ModelAdapterFactory', '',
            query, form,
            new Map<String, Object>(),
            new Map<String, Object>(),
            new List<String>{ 'application/json', 'text/plain' },
            new List<String>(),
            new List<String> { 'aemAuth' },
            OASOrgApacheSlingModelsImplModelAdap.class
        );
    }
    /**
     * 
     * 
     * @param post  (optional)
     * @param apply  (optional)
     * @param r_delete  (optional)
     * @param action  (optional)
     * @param location  (optional)
     * @param propertylist  (optional)
     * @param maxRecursionLevels  (optional)
     * @return OASOrgApacheSlingModelsJacksonexport
     * @throws OAS.ApiException if fails to make API call
     */
    public OASOrgApacheSlingModelsJacksonexport orgApacheSlingModelsJacksonexporterImplResourceModuleProvider(Map<String, Object> params) {
        List<OAS.Param> query = new List<OAS.Param>();

        // cast query params to verify their expected type
        query.addAll(client.makeParam('post', (Boolean) params.get('post')));
        query.addAll(client.makeParam('apply', (Boolean) params.get('apply')));
        query.addAll(client.makeParam('delete', (Boolean) params.get('r_delete')));
        query.addAll(client.makeParam('action', (String) params.get('action')));
        query.addAll(client.makeParam('$location', (String) params.get('location')));
        query.addAll(client.makeParam('propertylist', (List<String>) params.get('propertylist'), 'csv'));
        query.addAll(client.makeParam('max.recursion.levels', (Integer) params.get('maxRecursionLevels')));

        List<OAS.Param> form = new List<OAS.Param>();

        return (OASOrgApacheSlingModelsJacksonexport) client.invoke(
            'POST', '/system/console/configMgr/org.apache.sling.models.jacksonexporter.impl.ResourceModuleProvider', '',
            query, form,
            new Map<String, Object>(),
            new Map<String, Object>(),
            new List<String>{ 'application/json', 'text/plain' },
            new List<String>(),
            new List<String> { 'aemAuth' },
            OASOrgApacheSlingModelsJacksonexport.class
        );
    }
    /**
     * 
     * 
     * @param post  (optional)
     * @param apply  (optional)
     * @param r_delete  (optional)
     * @param action  (optional)
     * @param location  (optional)
     * @param propertylist  (optional)
     * @param felixInventoryPrinterName  (optional)
     * @param felixInventoryPrinterTitle  (optional)
     * @param path  (optional)
     * @return OASOrgApacheSlingResourceInventoryIm
     * @throws OAS.ApiException if fails to make API call
     */
    public OASOrgApacheSlingResourceInventoryIm orgApacheSlingResourceInventoryImplResourceInventoryPrinterFacto(Map<String, Object> params) {
        List<OAS.Param> query = new List<OAS.Param>();

        // cast query params to verify their expected type
        query.addAll(client.makeParam('post', (Boolean) params.get('post')));
        query.addAll(client.makeParam('apply', (Boolean) params.get('apply')));
        query.addAll(client.makeParam('delete', (Boolean) params.get('r_delete')));
        query.addAll(client.makeParam('action', (String) params.get('action')));
        query.addAll(client.makeParam('$location', (String) params.get('location')));
        query.addAll(client.makeParam('propertylist', (List<String>) params.get('propertylist'), 'csv'));
        query.addAll(client.makeParam('felix.inventory.printer.name', (String) params.get('felixInventoryPrinterName')));
        query.addAll(client.makeParam('felix.inventory.printer.title', (String) params.get('felixInventoryPrinterTitle')));
        query.addAll(client.makeParam('path', (String) params.get('path')));

        List<OAS.Param> form = new List<OAS.Param>();

        return (OASOrgApacheSlingResourceInventoryIm) client.invoke(
            'POST', '/system/console/configMgr/org.apache.sling.resource.inventory.impl.ResourceInventoryPrinterFactory', '',
            query, form,
            new Map<String, Object>(),
            new Map<String, Object>(),
            new List<String>{ 'application/json', 'text/plain' },
            new List<String>(),
            new List<String> { 'aemAuth' },
            OASOrgApacheSlingResourceInventoryIm.class
        );
    }
    /**
     * 
     * 
     * @param post  (optional)
     * @param apply  (optional)
     * @param r_delete  (optional)
     * @param action  (optional)
     * @param location  (optional)
     * @param propertylist  (optional)
     * @param mergeRoot  (optional)
     * @param mergeReadOnly  (optional)
     * @return OASOrgApacheSlingResourcemergerImplM
     * @throws OAS.ApiException if fails to make API call
     */
    public OASOrgApacheSlingResourcemergerImplM orgApacheSlingResourcemergerImplMergedResourceProviderFactory(Map<String, Object> params) {
        List<OAS.Param> query = new List<OAS.Param>();

        // cast query params to verify their expected type
        query.addAll(client.makeParam('post', (Boolean) params.get('post')));
        query.addAll(client.makeParam('apply', (Boolean) params.get('apply')));
        query.addAll(client.makeParam('delete', (Boolean) params.get('r_delete')));
        query.addAll(client.makeParam('action', (String) params.get('action')));
        query.addAll(client.makeParam('$location', (String) params.get('location')));
        query.addAll(client.makeParam('propertylist', (List<String>) params.get('propertylist'), 'csv'));
        query.addAll(client.makeParam('merge.root', (String) params.get('mergeRoot')));
        query.addAll(client.makeParam('merge.readOnly', (Boolean) params.get('mergeReadOnly')));

        List<OAS.Param> form = new List<OAS.Param>();

        return (OASOrgApacheSlingResourcemergerImplM) client.invoke(
            'POST', '/system/console/configMgr/org.apache.sling.resourcemerger.impl.MergedResourceProviderFactory', '',
            query, form,
            new Map<String, Object>(),
            new Map<String, Object>(),
            new List<String>{ 'application/json', 'text/plain' },
            new List<String>(),
            new List<String> { 'aemAuth' },
            OASOrgApacheSlingResourcemergerImplM.class
        );
    }
    /**
     * 
     * 
     * @param post  (optional)
     * @param apply  (optional)
     * @param r_delete  (optional)
     * @param action  (optional)
     * @param location  (optional)
     * @param propertylist  (optional)
     * @param mergeRoot  (optional)
     * @param mergeReadOnly  (optional)
     * @return OASOrgApacheSlingResourcemergerPicke
     * @throws OAS.ApiException if fails to make API call
     */
    public OASOrgApacheSlingResourcemergerPicke orgApacheSlingResourcemergerPickerOverriding(Map<String, Object> params) {
        List<OAS.Param> query = new List<OAS.Param>();

        // cast query params to verify their expected type
        query.addAll(client.makeParam('post', (Boolean) params.get('post')));
        query.addAll(client.makeParam('apply', (Boolean) params.get('apply')));
        query.addAll(client.makeParam('delete', (Boolean) params.get('r_delete')));
        query.addAll(client.makeParam('action', (String) params.get('action')));
        query.addAll(client.makeParam('$location', (String) params.get('location')));
        query.addAll(client.makeParam('propertylist', (List<String>) params.get('propertylist'), 'csv'));
        query.addAll(client.makeParam('merge.root', (String) params.get('mergeRoot')));
        query.addAll(client.makeParam('merge.readOnly', (Boolean) params.get('mergeReadOnly')));

        List<OAS.Param> form = new List<OAS.Param>();

        return (OASOrgApacheSlingResourcemergerPicke) client.invoke(
            'POST', '/system/console/configMgr/org.apache.sling.resourcemerger.picker.overriding', '',
            query, form,
            new Map<String, Object>(),
            new Map<String, Object>(),
            new List<String>{ 'application/json', 'text/plain' },
            new List<String>(),
            new List<String> { 'aemAuth' },
            OASOrgApacheSlingResourcemergerPicke.class
        );
    }
    /**
     * 
     * 
     * @param post  (optional)
     * @param apply  (optional)
     * @param r_delete  (optional)
     * @param action  (optional)
     * @param location  (optional)
     * @param propertylist  (optional)
     * @param orgApacheSlingScriptingCacheSize  (optional)
     * @param orgApacheSlingScriptingCacheAdditionalExtensions  (optional)
     * @return OASOrgApacheSlingScriptingCoreImplSc
     * @throws OAS.ApiException if fails to make API call
     */
    public OASOrgApacheSlingScriptingCoreImplSc orgApacheSlingScriptingCoreImplScriptCacheImpl(Map<String, Object> params) {
        List<OAS.Param> query = new List<OAS.Param>();

        // cast query params to verify their expected type
        query.addAll(client.makeParam('post', (Boolean) params.get('post')));
        query.addAll(client.makeParam('apply', (Boolean) params.get('apply')));
        query.addAll(client.makeParam('delete', (Boolean) params.get('r_delete')));
        query.addAll(client.makeParam('action', (String) params.get('action')));
        query.addAll(client.makeParam('$location', (String) params.get('location')));
        query.addAll(client.makeParam('propertylist', (List<String>) params.get('propertylist'), 'csv'));
        query.addAll(client.makeParam('org.apache.sling.scripting.cache.size', (Integer) params.get('orgApacheSlingScriptingCacheSize')));
        query.addAll(client.makeParams('org.apache.sling.scripting.cache.additional_extensions', (List<String>) params.get('orgApacheSlingScriptingCacheAdditionalExtensions')));

        List<OAS.Param> form = new List<OAS.Param>();

        return (OASOrgApacheSlingScriptingCoreImplSc) client.invoke(
            'POST', '/system/console/configMgr/org.apache.sling.scripting.core.impl.ScriptCacheImpl', '',
            query, form,
            new Map<String, Object>(),
            new Map<String, Object>(),
            new List<String>{ 'application/json', 'text/plain' },
            new List<String>(),
            new List<String> { 'aemAuth' },
            OASOrgApacheSlingScriptingCoreImplSc.class
        );
    }
    /**
     * 
     * 
     * @param post  (optional)
     * @param apply  (optional)
     * @param r_delete  (optional)
     * @param action  (optional)
     * @param location  (optional)
     * @param propertylist  (optional)
     * @param logStacktraceOnclose  (optional)
     * @return OASOrgApacheSlingScriptingCoreImplSc
     * @throws OAS.ApiException if fails to make API call
     */
    public OASOrgApacheSlingScriptingCoreImplSc orgApacheSlingScriptingCoreImplScriptingResourceResolverProvider(Map<String, Object> params) {
        List<OAS.Param> query = new List<OAS.Param>();

        // cast query params to verify their expected type
        query.addAll(client.makeParam('post', (Boolean) params.get('post')));
        query.addAll(client.makeParam('apply', (Boolean) params.get('apply')));
        query.addAll(client.makeParam('delete', (Boolean) params.get('r_delete')));
        query.addAll(client.makeParam('action', (String) params.get('action')));
        query.addAll(client.makeParam('$location', (String) params.get('location')));
        query.addAll(client.makeParam('propertylist', (List<String>) params.get('propertylist'), 'csv'));
        query.addAll(client.makeParam('log.stacktrace.onclose', (Boolean) params.get('logStacktraceOnclose')));

        List<OAS.Param> form = new List<OAS.Param>();

        return (OASOrgApacheSlingScriptingCoreImplSc) client.invoke(
            'POST', '/system/console/configMgr/org.apache.sling.scripting.core.impl.ScriptingResourceResolverProviderImpl', '',
            query, form,
            new Map<String, Object>(),
            new Map<String, Object>(),
            new List<String>{ 'application/json', 'text/plain' },
            new List<String>(),
            new List<String> { 'aemAuth' },
            OASOrgApacheSlingScriptingCoreImplSc.class
        );
    }
    /**
     * 
     * 
     * @param post  (optional)
     * @param apply  (optional)
     * @param r_delete  (optional)
     * @param action  (optional)
     * @param location  (optional)
     * @param propertylist  (optional)
     * @param javaClassdebuginfo  (optional)
     * @param javaJavaEncoding  (optional)
     * @param javaCompilerSourceVM  (optional)
     * @param javaCompilerTargetVM  (optional)
     * @return OASOrgApacheSlingScriptingJavaImplJa
     * @throws OAS.ApiException if fails to make API call
     */
    public OASOrgApacheSlingScriptingJavaImplJa orgApacheSlingScriptingJavaImplJavaScriptEngineFactory(Map<String, Object> params) {
        List<OAS.Param> query = new List<OAS.Param>();

        // cast query params to verify their expected type
        query.addAll(client.makeParam('post', (Boolean) params.get('post')));
        query.addAll(client.makeParam('apply', (Boolean) params.get('apply')));
        query.addAll(client.makeParam('delete', (Boolean) params.get('r_delete')));
        query.addAll(client.makeParam('action', (String) params.get('action')));
        query.addAll(client.makeParam('$location', (String) params.get('location')));
        query.addAll(client.makeParam('propertylist', (List<String>) params.get('propertylist'), 'csv'));
        query.addAll(client.makeParam('java.classdebuginfo', (Boolean) params.get('javaClassdebuginfo')));
        query.addAll(client.makeParam('java.javaEncoding', (String) params.get('javaJavaEncoding')));
        query.addAll(client.makeParam('java.compilerSourceVM', (String) params.get('javaCompilerSourceVM')));
        query.addAll(client.makeParam('java.compilerTargetVM', (String) params.get('javaCompilerTargetVM')));

        List<OAS.Param> form = new List<OAS.Param>();

        return (OASOrgApacheSlingScriptingJavaImplJa) client.invoke(
            'POST', '/system/console/configMgr/org.apache.sling.scripting.java.impl.JavaScriptEngineFactory', '',
            query, form,
            new Map<String, Object>(),
            new Map<String, Object>(),
            new List<String>{ 'application/json', 'text/plain' },
            new List<String>(),
            new List<String> { 'aemAuth' },
            OASOrgApacheSlingScriptingJavaImplJa.class
        );
    }
    /**
     * 
     * 
     * @param post  (optional)
     * @param apply  (optional)
     * @param r_delete  (optional)
     * @param action  (optional)
     * @param location  (optional)
     * @param propertylist  (optional)
     * @param orgApacheSlingScriptingJavascriptRhinoOptLevel  (optional)
     * @return OASOrgApacheSlingScriptingJavascript
     * @throws OAS.ApiException if fails to make API call
     */
    public OASOrgApacheSlingScriptingJavascript orgApacheSlingScriptingJavascriptInternalRhinoJavaScriptEngineFa(Map<String, Object> params) {
        List<OAS.Param> query = new List<OAS.Param>();

        // cast query params to verify their expected type
        query.addAll(client.makeParam('post', (Boolean) params.get('post')));
        query.addAll(client.makeParam('apply', (Boolean) params.get('apply')));
        query.addAll(client.makeParam('delete', (Boolean) params.get('r_delete')));
        query.addAll(client.makeParam('action', (String) params.get('action')));
        query.addAll(client.makeParam('$location', (String) params.get('location')));
        query.addAll(client.makeParam('propertylist', (List<String>) params.get('propertylist'), 'csv'));
        query.addAll(client.makeParam('org.apache.sling.scripting.javascript.rhino.optLevel', (Integer) params.get('orgApacheSlingScriptingJavascriptRhinoOptLevel')));

        List<OAS.Param> form = new List<OAS.Param>();

        return (OASOrgApacheSlingScriptingJavascript) client.invoke(
            'POST', '/system/console/configMgr/org.apache.sling.scripting.javascript.internal.RhinoJavaScriptEngineFactory', '',
            query, form,
            new Map<String, Object>(),
            new Map<String, Object>(),
            new List<String>{ 'application/json', 'text/plain' },
            new List<String>(),
            new List<String> { 'aemAuth' },
            OASOrgApacheSlingScriptingJavascript.class
        );
    }
    /**
     * 
     * 
     * @param post  (optional)
     * @param apply  (optional)
     * @param r_delete  (optional)
     * @param action  (optional)
     * @param location  (optional)
     * @param propertylist  (optional)
     * @param jasperCompilerTargetVM  (optional)
     * @param jasperCompilerSourceVM  (optional)
     * @param jasperClassdebuginfo  (optional)
     * @param jasperEnablePooling  (optional)
     * @param jasperIeClassId  (optional)
     * @param jasperGenStringAsCharArray  (optional)
     * @param jasperKeepgenerated  (optional)
     * @param jasperMappedfile  (optional)
     * @param jasperTrimSpaces  (optional)
     * @param jasperDisplaySourceFragments  (optional)
     * @param defaultIsSession  (optional)
     * @return OASOrgApacheSlingScriptingJspJspScri
     * @throws OAS.ApiException if fails to make API call
     */
    public OASOrgApacheSlingScriptingJspJspScri orgApacheSlingScriptingJspJspScriptEngineFactory(Map<String, Object> params) {
        List<OAS.Param> query = new List<OAS.Param>();

        // cast query params to verify their expected type
        query.addAll(client.makeParam('post', (Boolean) params.get('post')));
        query.addAll(client.makeParam('apply', (Boolean) params.get('apply')));
        query.addAll(client.makeParam('delete', (Boolean) params.get('r_delete')));
        query.addAll(client.makeParam('action', (String) params.get('action')));
        query.addAll(client.makeParam('$location', (String) params.get('location')));
        query.addAll(client.makeParam('propertylist', (List<String>) params.get('propertylist'), 'csv'));
        query.addAll(client.makeParam('jasper.compilerTargetVM', (String) params.get('jasperCompilerTargetVM')));
        query.addAll(client.makeParam('jasper.compilerSourceVM', (String) params.get('jasperCompilerSourceVM')));
        query.addAll(client.makeParam('jasper.classdebuginfo', (Boolean) params.get('jasperClassdebuginfo')));
        query.addAll(client.makeParam('jasper.enablePooling', (Boolean) params.get('jasperEnablePooling')));
        query.addAll(client.makeParam('jasper.ieClassId', (String) params.get('jasperIeClassId')));
        query.addAll(client.makeParam('jasper.genStringAsCharArray', (Boolean) params.get('jasperGenStringAsCharArray')));
        query.addAll(client.makeParam('jasper.keepgenerated', (Boolean) params.get('jasperKeepgenerated')));
        query.addAll(client.makeParam('jasper.mappedfile', (Boolean) params.get('jasperMappedfile')));
        query.addAll(client.makeParam('jasper.trimSpaces', (Boolean) params.get('jasperTrimSpaces')));
        query.addAll(client.makeParam('jasper.displaySourceFragments', (Boolean) params.get('jasperDisplaySourceFragments')));
        query.addAll(client.makeParam('default.is.session', (Boolean) params.get('defaultIsSession')));

        List<OAS.Param> form = new List<OAS.Param>();

        return (OASOrgApacheSlingScriptingJspJspScri) client.invoke(
            'POST', '/system/console/configMgr/org.apache.sling.scripting.jsp.JspScriptEngineFactory', '',
            query, form,
            new Map<String, Object>(),
            new Map<String, Object>(),
            new List<String>{ 'application/json', 'text/plain' },
            new List<String>(),
            new List<String> { 'aemAuth' },
            OASOrgApacheSlingScriptingJspJspScri.class
        );
    }
    /**
     * 
     * 
     * @param post  (optional)
     * @param apply  (optional)
     * @param r_delete  (optional)
     * @param action  (optional)
     * @param location  (optional)
     * @param propertylist  (optional)
     * @param orgApacheSlingScriptingSightlyJsBindings  (optional)
     * @return OASOrgApacheSlingScriptingSightlyJsI
     * @throws OAS.ApiException if fails to make API call
     */
    public OASOrgApacheSlingScriptingSightlyJsI orgApacheSlingScriptingSightlyJsImplJsapiSlyBindingsValuesProv(Map<String, Object> params) {
        List<OAS.Param> query = new List<OAS.Param>();

        // cast query params to verify their expected type
        query.addAll(client.makeParam('post', (Boolean) params.get('post')));
        query.addAll(client.makeParam('apply', (Boolean) params.get('apply')));
        query.addAll(client.makeParam('delete', (Boolean) params.get('r_delete')));
        query.addAll(client.makeParam('action', (String) params.get('action')));
        query.addAll(client.makeParam('$location', (String) params.get('location')));
        query.addAll(client.makeParam('propertylist', (List<String>) params.get('propertylist'), 'csv'));
        query.addAll(client.makeParams('org.apache.sling.scripting.sightly.js.bindings', (List<String>) params.get('orgApacheSlingScriptingSightlyJsBindings')));

        List<OAS.Param> form = new List<OAS.Param>();

        return (OASOrgApacheSlingScriptingSightlyJsI) client.invoke(
            'POST', '/system/console/configMgr/org.apache.sling.scripting.sightly.js.impl.jsapi.SlyBindingsValuesProvider', '',
            query, form,
            new Map<String, Object>(),
            new Map<String, Object>(),
            new List<String>{ 'application/json', 'text/plain' },
            new List<String>(),
            new List<String> { 'aemAuth' },
            OASOrgApacheSlingScriptingSightlyJsI.class
        );
    }
    /**
     * 
     * 
     * @param post  (optional)
     * @param apply  (optional)
     * @param r_delete  (optional)
     * @param action  (optional)
     * @param location  (optional)
     * @param propertylist  (optional)
     * @param slingContentDispositionPaths  (optional)
     * @param slingContentDispositionExcludedPaths  (optional)
     * @param slingContentDispositionAllPaths  (optional)
     * @return OASOrgApacheSlingSecurityImplContent
     * @throws OAS.ApiException if fails to make API call
     */
    public OASOrgApacheSlingSecurityImplContent orgApacheSlingSecurityImplContentDispositionFilter(Map<String, Object> params) {
        List<OAS.Param> query = new List<OAS.Param>();

        // cast query params to verify their expected type
        query.addAll(client.makeParam('post', (Boolean) params.get('post')));
        query.addAll(client.makeParam('apply', (Boolean) params.get('apply')));
        query.addAll(client.makeParam('delete', (Boolean) params.get('r_delete')));
        query.addAll(client.makeParam('action', (String) params.get('action')));
        query.addAll(client.makeParam('$location', (String) params.get('location')));
        query.addAll(client.makeParam('propertylist', (List<String>) params.get('propertylist'), 'csv'));
        query.addAll(client.makeParams('sling.content.disposition.paths', (List<String>) params.get('slingContentDispositionPaths')));
        query.addAll(client.makeParams('sling.content.disposition.excluded.paths', (List<String>) params.get('slingContentDispositionExcludedPaths')));
        query.addAll(client.makeParam('sling.content.disposition.all.paths', (Boolean) params.get('slingContentDispositionAllPaths')));

        List<OAS.Param> form = new List<OAS.Param>();

        return (OASOrgApacheSlingSecurityImplContent) client.invoke(
            'POST', '/system/console/configMgr/org.apache.sling.security.impl.ContentDispositionFilter', '',
            query, form,
            new Map<String, Object>(),
            new Map<String, Object>(),
            new List<String>{ 'application/json', 'text/plain' },
            new List<String>(),
            new List<String> { 'aemAuth' },
            OASOrgApacheSlingSecurityImplContent.class
        );
    }
    /**
     * 
     * 
     * @param post  (optional)
     * @param apply  (optional)
     * @param r_delete  (optional)
     * @param action  (optional)
     * @param location  (optional)
     * @param propertylist  (optional)
     * @param allowEmpty  (optional)
     * @param allowHosts  (optional)
     * @param allowHostsRegexp  (optional)
     * @param filterMethods  (optional)
     * @param excludeAgentsRegexp  (optional)
     * @return OASOrgApacheSlingSecurityImplReferre
     * @throws OAS.ApiException if fails to make API call
     */
    public OASOrgApacheSlingSecurityImplReferre orgApacheSlingSecurityImplReferrerFilter(Map<String, Object> params) {
        List<OAS.Param> query = new List<OAS.Param>();

        // cast query params to verify their expected type
        query.addAll(client.makeParam('post', (Boolean) params.get('post')));
        query.addAll(client.makeParam('apply', (Boolean) params.get('apply')));
        query.addAll(client.makeParam('delete', (Boolean) params.get('r_delete')));
        query.addAll(client.makeParam('action', (String) params.get('action')));
        query.addAll(client.makeParam('$location', (String) params.get('location')));
        query.addAll(client.makeParam('propertylist', (List<String>) params.get('propertylist'), 'csv'));
        query.addAll(client.makeParam('allow.empty', (Boolean) params.get('allowEmpty')));
        query.addAll(client.makeParams('allow.hosts', (List<String>) params.get('allowHosts')));
        query.addAll(client.makeParams('allow.hosts.regexp', (List<String>) params.get('allowHostsRegexp')));
        query.addAll(client.makeParams('filter.methods', (List<String>) params.get('filterMethods')));
        query.addAll(client.makeParams('exclude.agents.regexp', (List<String>) params.get('excludeAgentsRegexp')));

        List<OAS.Param> form = new List<OAS.Param>();

        return (OASOrgApacheSlingSecurityImplReferre) client.invoke(
            'POST', '/system/console/configMgr/org.apache.sling.security.impl.ReferrerFilter', '',
            query, form,
            new Map<String, Object>(),
            new Map<String, Object>(),
            new List<String>{ 'application/json', 'text/plain' },
            new List<String>(),
            new List<String> { 'aemAuth' },
            OASOrgApacheSlingSecurityImplReferre.class
        );
    }
    /**
     * 
     * 
     * @param post  (optional)
     * @param apply  (optional)
     * @param r_delete  (optional)
     * @param action  (optional)
     * @param location  (optional)
     * @param propertylist  (optional)
     * @param userMapping  (optional)
     * @param userDefault  (optional)
     * @param userEnableDefaultMapping  (optional)
     * @param requireValidation  (optional)
     * @return OASOrgApacheSlingServiceusermappingI
     * @throws OAS.ApiException if fails to make API call
     */
    public OASOrgApacheSlingServiceusermappingI orgApacheSlingServiceusermappingImplServiceUserMapperImpl(Map<String, Object> params) {
        List<OAS.Param> query = new List<OAS.Param>();

        // cast query params to verify their expected type
        query.addAll(client.makeParam('post', (Boolean) params.get('post')));
        query.addAll(client.makeParam('apply', (Boolean) params.get('apply')));
        query.addAll(client.makeParam('delete', (Boolean) params.get('r_delete')));
        query.addAll(client.makeParam('action', (String) params.get('action')));
        query.addAll(client.makeParam('$location', (String) params.get('location')));
        query.addAll(client.makeParam('propertylist', (List<String>) params.get('propertylist'), 'csv'));
        query.addAll(client.makeParams('user.mapping', (List<String>) params.get('userMapping')));
        query.addAll(client.makeParam('user.default', (String) params.get('userDefault')));
        query.addAll(client.makeParam('user.enable.default.mapping', (Boolean) params.get('userEnableDefaultMapping')));
        query.addAll(client.makeParam('require.validation', (Boolean) params.get('requireValidation')));

        List<OAS.Param> form = new List<OAS.Param>();

        return (OASOrgApacheSlingServiceusermappingI) client.invoke(
            'POST', '/system/console/configMgr/org.apache.sling.serviceusermapping.impl.ServiceUserMapperImpl', '',
            query, form,
            new Map<String, Object>(),
            new Map<String, Object>(),
            new List<String>{ 'application/json', 'text/plain' },
            new List<String>(),
            new List<String> { 'aemAuth' },
            OASOrgApacheSlingServiceusermappingI.class
        );
    }
    /**
     * 
     * 
     * @param post  (optional)
     * @param apply  (optional)
     * @param r_delete  (optional)
     * @param action  (optional)
     * @param location  (optional)
     * @param propertylist  (optional)
     * @param serviceRanking  (optional)
     * @param userMapping  (optional)
     * @return OASOrgApacheSlingServiceusermappingI
     * @throws OAS.ApiException if fails to make API call
     */
    public OASOrgApacheSlingServiceusermappingI orgApacheSlingServiceusermappingImplServiceUserMapperImplAmended(Map<String, Object> params) {
        List<OAS.Param> query = new List<OAS.Param>();

        // cast query params to verify their expected type
        query.addAll(client.makeParam('post', (Boolean) params.get('post')));
        query.addAll(client.makeParam('apply', (Boolean) params.get('apply')));
        query.addAll(client.makeParam('delete', (Boolean) params.get('r_delete')));
        query.addAll(client.makeParam('action', (String) params.get('action')));
        query.addAll(client.makeParam('$location', (String) params.get('location')));
        query.addAll(client.makeParam('propertylist', (List<String>) params.get('propertylist'), 'csv'));
        query.addAll(client.makeParam('service.ranking', (Integer) params.get('serviceRanking')));
        query.addAll(client.makeParams('user.mapping', (List<String>) params.get('userMapping')));

        List<OAS.Param> form = new List<OAS.Param>();

        return (OASOrgApacheSlingServiceusermappingI) client.invoke(
            'POST', '/system/console/configMgr/org.apache.sling.serviceusermapping.impl.ServiceUserMapperImpl.amended', '',
            query, form,
            new Map<String, Object>(),
            new Map<String, Object>(),
            new List<String>{ 'application/json', 'text/plain' },
            new List<String>(),
            new List<String> { 'aemAuth' },
            OASOrgApacheSlingServiceusermappingI.class
        );
    }
    /**
     * 
     * 
     * @param post  (optional)
     * @param apply  (optional)
     * @param r_delete  (optional)
     * @param action  (optional)
     * @param location  (optional)
     * @param propertylist  (optional)
     * @param aliases  (optional)
     * @param index  (optional)
     * @param indexFiles  (optional)
     * @param enableHtml  (optional)
     * @param enableJson  (optional)
     * @param enableTxt  (optional)
     * @param enableXml  (optional)
     * @param jsonMaximumresults  (optional)
     * @param ecmaSuport  (optional)
     * @return OASOrgApacheSlingServletsGetDefaultG
     * @throws OAS.ApiException if fails to make API call
     */
    public OASOrgApacheSlingServletsGetDefaultG orgApacheSlingServletsGetDefaultGetServlet(Map<String, Object> params) {
        List<OAS.Param> query = new List<OAS.Param>();

        // cast query params to verify their expected type
        query.addAll(client.makeParam('post', (Boolean) params.get('post')));
        query.addAll(client.makeParam('apply', (Boolean) params.get('apply')));
        query.addAll(client.makeParam('delete', (Boolean) params.get('r_delete')));
        query.addAll(client.makeParam('action', (String) params.get('action')));
        query.addAll(client.makeParam('$location', (String) params.get('location')));
        query.addAll(client.makeParam('propertylist', (List<String>) params.get('propertylist'), 'csv'));
        query.addAll(client.makeParams('aliases', (List<String>) params.get('aliases')));
        query.addAll(client.makeParam('index', (Boolean) params.get('index')));
        query.addAll(client.makeParams('index.files', (List<String>) params.get('indexFiles')));
        query.addAll(client.makeParam('enable.html', (Boolean) params.get('enableHtml')));
        query.addAll(client.makeParam('enable.json', (Boolean) params.get('enableJson')));
        query.addAll(client.makeParam('enable.txt', (Boolean) params.get('enableTxt')));
        query.addAll(client.makeParam('enable.xml', (Boolean) params.get('enableXml')));
        query.addAll(client.makeParam('json.maximumresults', (Integer) params.get('jsonMaximumresults')));
        query.addAll(client.makeParam('ecmaSuport', (Boolean) params.get('ecmaSuport')));

        List<OAS.Param> form = new List<OAS.Param>();

        return (OASOrgApacheSlingServletsGetDefaultG) client.invoke(
            'POST', '/system/console/configMgr/org.apache.sling.servlets.get.DefaultGetServlet', '',
            query, form,
            new Map<String, Object>(),
            new Map<String, Object>(),
            new List<String>{ 'application/json', 'text/plain' },
            new List<String>(),
            new List<String> { 'aemAuth' },
            OASOrgApacheSlingServletsGetDefaultG.class
        );
    }
    /**
     * 
     * 
     * @param post  (optional)
     * @param apply  (optional)
     * @param r_delete  (optional)
     * @param action  (optional)
     * @param location  (optional)
     * @param propertylist  (optional)
     * @param slingServletSelectors  (optional)
     * @param ecmaSuport  (optional)
     * @return OASOrgApacheSlingServletsGetImplVers
     * @throws OAS.ApiException if fails to make API call
     */
    public OASOrgApacheSlingServletsGetImplVers orgApacheSlingServletsGetImplVersionVersionInfoServlet(Map<String, Object> params) {
        List<OAS.Param> query = new List<OAS.Param>();

        // cast query params to verify their expected type
        query.addAll(client.makeParam('post', (Boolean) params.get('post')));
        query.addAll(client.makeParam('apply', (Boolean) params.get('apply')));
        query.addAll(client.makeParam('delete', (Boolean) params.get('r_delete')));
        query.addAll(client.makeParam('action', (String) params.get('action')));
        query.addAll(client.makeParam('$location', (String) params.get('location')));
        query.addAll(client.makeParam('propertylist', (List<String>) params.get('propertylist'), 'csv'));
        query.addAll(client.makeParams('sling.servlet.selectors', (List<String>) params.get('slingServletSelectors')));
        query.addAll(client.makeParam('ecmaSuport', (Boolean) params.get('ecmaSuport')));

        List<OAS.Param> form = new List<OAS.Param>();

        return (OASOrgApacheSlingServletsGetImplVers) client.invoke(
            'POST', '/system/console/configMgr/org.apache.sling.servlets.get.impl.version.VersionInfoServlet', '',
            query, form,
            new Map<String, Object>(),
            new Map<String, Object>(),
            new List<String>{ 'application/json', 'text/plain' },
            new List<String>(),
            new List<String> { 'aemAuth' },
            OASOrgApacheSlingServletsGetImplVers.class
        );
    }
    /**
     * 
     * 
     * @param post  (optional)
     * @param apply  (optional)
     * @param r_delete  (optional)
     * @param action  (optional)
     * @param location  (optional)
     * @param propertylist  (optional)
     * @param schedulerExpression  (optional)
     * @param schedulerConcurrent  (optional)
     * @param chunkCleanupAge  (optional)
     * @return OASOrgApacheSlingServletsPostImplHel
     * @throws OAS.ApiException if fails to make API call
     */
    public OASOrgApacheSlingServletsPostImplHel orgApacheSlingServletsPostImplHelperChunkCleanUpTask(Map<String, Object> params) {
        List<OAS.Param> query = new List<OAS.Param>();

        // cast query params to verify their expected type
        query.addAll(client.makeParam('post', (Boolean) params.get('post')));
        query.addAll(client.makeParam('apply', (Boolean) params.get('apply')));
        query.addAll(client.makeParam('delete', (Boolean) params.get('r_delete')));
        query.addAll(client.makeParam('action', (String) params.get('action')));
        query.addAll(client.makeParam('$location', (String) params.get('location')));
        query.addAll(client.makeParam('propertylist', (List<String>) params.get('propertylist'), 'csv'));
        query.addAll(client.makeParam('scheduler.expression', (String) params.get('schedulerExpression')));
        query.addAll(client.makeParam('scheduler.concurrent', (Boolean) params.get('schedulerConcurrent')));
        query.addAll(client.makeParam('chunk.cleanup.age', (Integer) params.get('chunkCleanupAge')));

        List<OAS.Param> form = new List<OAS.Param>();

        return (OASOrgApacheSlingServletsPostImplHel) client.invoke(
            'POST', '/system/console/configMgr/org.apache.sling.servlets.post.impl.helper.ChunkCleanUpTask', '',
            query, form,
            new Map<String, Object>(),
            new Map<String, Object>(),
            new List<String>{ 'application/json', 'text/plain' },
            new List<String>(),
            new List<String> { 'aemAuth' },
            OASOrgApacheSlingServletsPostImplHel.class
        );
    }
    /**
     * 
     * 
     * @param post  (optional)
     * @param apply  (optional)
     * @param r_delete  (optional)
     * @param action  (optional)
     * @param location  (optional)
     * @param propertylist  (optional)
     * @param servletPostDateFormats  (optional)
     * @param servletPostNodeNameHints  (optional)
     * @param servletPostNodeNameMaxLength  (optional)
     * @param servletPostCheckinNewVersionableNodes  (optional)
     * @param servletPostAutoCheckout  (optional)
     * @param servletPostAutoCheckin  (optional)
     * @param servletPostIgnorePattern  (optional)
     * @return OASOrgApacheSlingServletsPostImplSli
     * @throws OAS.ApiException if fails to make API call
     */
    public OASOrgApacheSlingServletsPostImplSli orgApacheSlingServletsPostImplSlingPostServlet(Map<String, Object> params) {
        List<OAS.Param> query = new List<OAS.Param>();

        // cast query params to verify their expected type
        query.addAll(client.makeParam('post', (Boolean) params.get('post')));
        query.addAll(client.makeParam('apply', (Boolean) params.get('apply')));
        query.addAll(client.makeParam('delete', (Boolean) params.get('r_delete')));
        query.addAll(client.makeParam('action', (String) params.get('action')));
        query.addAll(client.makeParam('$location', (String) params.get('location')));
        query.addAll(client.makeParam('propertylist', (List<String>) params.get('propertylist'), 'csv'));
        query.addAll(client.makeParams('servlet.post.dateFormats', (List<String>) params.get('servletPostDateFormats')));
        query.addAll(client.makeParams('servlet.post.nodeNameHints', (List<String>) params.get('servletPostNodeNameHints')));
        query.addAll(client.makeParam('servlet.post.nodeNameMaxLength', (Integer) params.get('servletPostNodeNameMaxLength')));
        query.addAll(client.makeParam('servlet.post.checkinNewVersionableNodes', (Boolean) params.get('servletPostCheckinNewVersionableNodes')));
        query.addAll(client.makeParam('servlet.post.autoCheckout', (Boolean) params.get('servletPostAutoCheckout')));
        query.addAll(client.makeParam('servlet.post.autoCheckin', (Boolean) params.get('servletPostAutoCheckin')));
        query.addAll(client.makeParam('servlet.post.ignorePattern', (String) params.get('servletPostIgnorePattern')));

        List<OAS.Param> form = new List<OAS.Param>();

        return (OASOrgApacheSlingServletsPostImplSli) client.invoke(
            'POST', '/system/console/configMgr/org.apache.sling.servlets.post.impl.SlingPostServlet', '',
            query, form,
            new Map<String, Object>(),
            new Map<String, Object>(),
            new List<String>{ 'application/json', 'text/plain' },
            new List<String>(),
            new List<String> { 'aemAuth' },
            OASOrgApacheSlingServletsPostImplSli.class
        );
    }
    /**
     * 
     * 
     * @param post  (optional)
     * @param apply  (optional)
     * @param r_delete  (optional)
     * @param action  (optional)
     * @param location  (optional)
     * @param propertylist  (optional)
     * @param servletresolverServletRoot  (optional)
     * @param servletresolverCacheSize  (optional)
     * @param servletresolverPaths  (optional)
     * @param servletresolverDefaultExtensions  (optional)
     * @return OASOrgApacheSlingServletsResolverSli
     * @throws OAS.ApiException if fails to make API call
     */
    public OASOrgApacheSlingServletsResolverSli orgApacheSlingServletsResolverSlingServletResolver(Map<String, Object> params) {
        List<OAS.Param> query = new List<OAS.Param>();

        // cast query params to verify their expected type
        query.addAll(client.makeParam('post', (Boolean) params.get('post')));
        query.addAll(client.makeParam('apply', (Boolean) params.get('apply')));
        query.addAll(client.makeParam('delete', (Boolean) params.get('r_delete')));
        query.addAll(client.makeParam('action', (String) params.get('action')));
        query.addAll(client.makeParam('$location', (String) params.get('location')));
        query.addAll(client.makeParam('propertylist', (List<String>) params.get('propertylist'), 'csv'));
        query.addAll(client.makeParam('servletresolver.servletRoot', (String) params.get('servletresolverServletRoot')));
        query.addAll(client.makeParam('servletresolver.cacheSize', (Integer) params.get('servletresolverCacheSize')));
        query.addAll(client.makeParams('servletresolver.paths', (List<String>) params.get('servletresolverPaths')));
        query.addAll(client.makeParams('servletresolver.defaultExtensions', (List<String>) params.get('servletresolverDefaultExtensions')));

        List<OAS.Param> form = new List<OAS.Param>();

        return (OASOrgApacheSlingServletsResolverSli) client.invoke(
            'POST', '/system/console/configMgr/org.apache.sling.servlets.resolver.SlingServletResolver', '',
            query, form,
            new Map<String, Object>(),
            new Map<String, Object>(),
            new List<String>{ 'application/json', 'text/plain' },
            new List<String>(),
            new List<String> { 'aemAuth' },
            OASOrgApacheSlingServletsResolverSli.class
        );
    }
    /**
     * 
     * 
     * @param post  (optional)
     * @param apply  (optional)
     * @param r_delete  (optional)
     * @param action  (optional)
     * @param location  (optional)
     * @param propertylist  (optional)
     * @param slingName  (optional)
     * @param slingDescription  (optional)
     * @return OASOrgApacheSlingSettingsImplSlingSe
     * @throws OAS.ApiException if fails to make API call
     */
    public OASOrgApacheSlingSettingsImplSlingSe orgApacheSlingSettingsImplSlingSettingsServiceImpl(Map<String, Object> params) {
        List<OAS.Param> query = new List<OAS.Param>();

        // cast query params to verify their expected type
        query.addAll(client.makeParam('post', (Boolean) params.get('post')));
        query.addAll(client.makeParam('apply', (Boolean) params.get('apply')));
        query.addAll(client.makeParam('delete', (Boolean) params.get('r_delete')));
        query.addAll(client.makeParam('action', (String) params.get('action')));
        query.addAll(client.makeParam('$location', (String) params.get('location')));
        query.addAll(client.makeParam('propertylist', (List<String>) params.get('propertylist'), 'csv'));
        query.addAll(client.makeParam('sling.name', (String) params.get('slingName')));
        query.addAll(client.makeParam('sling.description', (String) params.get('slingDescription')));

        List<OAS.Param> form = new List<OAS.Param>();

        return (OASOrgApacheSlingSettingsImplSlingSe) client.invoke(
            'POST', '/system/console/configMgr/org.apache.sling.settings.impl.SlingSettingsServiceImpl', '',
            query, form,
            new Map<String, Object>(),
            new Map<String, Object>(),
            new List<String>{ 'application/json', 'text/plain' },
            new List<String>(),
            new List<String> { 'aemAuth' },
            OASOrgApacheSlingSettingsImplSlingSe.class
        );
    }
    /**
     * 
     * 
     * @param post  (optional)
     * @param apply  (optional)
     * @param r_delete  (optional)
     * @param action  (optional)
     * @param location  (optional)
     * @param propertylist  (optional)
     * @param activeByDefault  (optional)
     * @param defaultMessage  (optional)
     * @return OASOrgApacheSlingStartupfilterImplSt
     * @throws OAS.ApiException if fails to make API call
     */
    public OASOrgApacheSlingStartupfilterImplSt orgApacheSlingStartupfilterImplStartupFilterImpl(Map<String, Object> params) {
        List<OAS.Param> query = new List<OAS.Param>();

        // cast query params to verify their expected type
        query.addAll(client.makeParam('post', (Boolean) params.get('post')));
        query.addAll(client.makeParam('apply', (Boolean) params.get('apply')));
        query.addAll(client.makeParam('delete', (Boolean) params.get('r_delete')));
        query.addAll(client.makeParam('action', (String) params.get('action')));
        query.addAll(client.makeParam('$location', (String) params.get('location')));
        query.addAll(client.makeParam('propertylist', (List<String>) params.get('propertylist'), 'csv'));
        query.addAll(client.makeParam('active.by.default', (Boolean) params.get('activeByDefault')));
        query.addAll(client.makeParam('default.message', (String) params.get('defaultMessage')));

        List<OAS.Param> form = new List<OAS.Param>();

        return (OASOrgApacheSlingStartupfilterImplSt) client.invoke(
            'POST', '/system/console/configMgr/org.apache.sling.startupfilter.impl.StartupFilterImpl', '',
            query, form,
            new Map<String, Object>(),
            new Map<String, Object>(),
            new List<String>{ 'application/json', 'text/plain' },
            new List<String>(),
            new List<String> { 'aemAuth' },
            OASOrgApacheSlingStartupfilterImplSt.class
        );
    }
    /**
     * 
     * 
     * @param post  (optional)
     * @param apply  (optional)
     * @param r_delete  (optional)
     * @param action  (optional)
     * @param location  (optional)
     * @param propertylist  (optional)
     * @param tenantRoot  (optional)
     * @param tenantPathMatcher  (optional)
     * @return OASOrgApacheSlingTenantInternalTenan
     * @throws OAS.ApiException if fails to make API call
     */
    public OASOrgApacheSlingTenantInternalTenan orgApacheSlingTenantInternalTenantProviderImpl(Map<String, Object> params) {
        List<OAS.Param> query = new List<OAS.Param>();

        // cast query params to verify their expected type
        query.addAll(client.makeParam('post', (Boolean) params.get('post')));
        query.addAll(client.makeParam('apply', (Boolean) params.get('apply')));
        query.addAll(client.makeParam('delete', (Boolean) params.get('r_delete')));
        query.addAll(client.makeParam('action', (String) params.get('action')));
        query.addAll(client.makeParam('$location', (String) params.get('location')));
        query.addAll(client.makeParam('propertylist', (List<String>) params.get('propertylist'), 'csv'));
        query.addAll(client.makeParam('tenant.root', (String) params.get('tenantRoot')));
        query.addAll(client.makeParams('tenant.path.matcher', (List<String>) params.get('tenantPathMatcher')));

        List<OAS.Param> form = new List<OAS.Param>();

        return (OASOrgApacheSlingTenantInternalTenan) client.invoke(
            'POST', '/system/console/configMgr/org.apache.sling.tenant.internal.TenantProviderImpl', '',
            query, form,
            new Map<String, Object>(),
            new Map<String, Object>(),
            new List<String>{ 'application/json', 'text/plain' },
            new List<String>(),
            new List<String> { 'aemAuth' },
            OASOrgApacheSlingTenantInternalTenan.class
        );
    }
    /**
     * 
     * 
     * @param post  (optional)
     * @param apply  (optional)
     * @param r_delete  (optional)
     * @param action  (optional)
     * @param location  (optional)
     * @param propertylist  (optional)
     * @param tracerSets  (optional)
     * @param enabled  (optional)
     * @param servletEnabled  (optional)
     * @param recordingCacheSizeInMB  (optional)
     * @param recordingCacheDurationInSecs  (optional)
     * @param recordingCompressionEnabled  (optional)
     * @param gzipResponse  (optional)
     * @return OASOrgApacheSlingTracerInternalLogTr
     * @throws OAS.ApiException if fails to make API call
     */
    public OASOrgApacheSlingTracerInternalLogTr orgApacheSlingTracerInternalLogTracer(Map<String, Object> params) {
        List<OAS.Param> query = new List<OAS.Param>();

        // cast query params to verify their expected type
        query.addAll(client.makeParam('post', (Boolean) params.get('post')));
        query.addAll(client.makeParam('apply', (Boolean) params.get('apply')));
        query.addAll(client.makeParam('delete', (Boolean) params.get('r_delete')));
        query.addAll(client.makeParam('action', (String) params.get('action')));
        query.addAll(client.makeParam('$location', (String) params.get('location')));
        query.addAll(client.makeParam('propertylist', (List<String>) params.get('propertylist'), 'csv'));
        query.addAll(client.makeParams('tracerSets', (List<String>) params.get('tracerSets')));
        query.addAll(client.makeParam('enabled', (Boolean) params.get('enabled')));
        query.addAll(client.makeParam('servletEnabled', (Boolean) params.get('servletEnabled')));
        query.addAll(client.makeParam('recordingCacheSizeInMB', (Integer) params.get('recordingCacheSizeInMB')));
        query.addAll(client.makeParam('recordingCacheDurationInSecs', (Integer) params.get('recordingCacheDurationInSecs')));
        query.addAll(client.makeParam('recordingCompressionEnabled', (Boolean) params.get('recordingCompressionEnabled')));
        query.addAll(client.makeParam('gzipResponse', (Boolean) params.get('gzipResponse')));

        List<OAS.Param> form = new List<OAS.Param>();

        return (OASOrgApacheSlingTracerInternalLogTr) client.invoke(
            'POST', '/system/console/configMgr/org.apache.sling.tracer.internal.LogTracer', '',
            query, form,
            new Map<String, Object>(),
            new Map<String, Object>(),
            new List<String>{ 'application/json', 'text/plain' },
            new List<String>(),
            new List<String> { 'aemAuth' },
            OASOrgApacheSlingTracerInternalLogTr.class
        );
    }
    /**
     * 
     * 
     * @param post  (optional)
     * @param apply  (optional)
     * @param r_delete  (optional)
     * @param action  (optional)
     * @param location  (optional)
     * @param propertylist  (optional)
     * @param policyPath  (optional)
     * @return OASOrgApacheSlingXssImplXSSFilterImp
     * @throws OAS.ApiException if fails to make API call
     */
    public OASOrgApacheSlingXssImplXSSFilterImp orgApacheSlingXssImplXSSFilterImpl(Map<String, Object> params) {
        List<OAS.Param> query = new List<OAS.Param>();

        // cast query params to verify their expected type
        query.addAll(client.makeParam('post', (Boolean) params.get('post')));
        query.addAll(client.makeParam('apply', (Boolean) params.get('apply')));
        query.addAll(client.makeParam('delete', (Boolean) params.get('r_delete')));
        query.addAll(client.makeParam('action', (String) params.get('action')));
        query.addAll(client.makeParam('$location', (String) params.get('location')));
        query.addAll(client.makeParam('propertylist', (List<String>) params.get('propertylist'), 'csv'));
        query.addAll(client.makeParam('policyPath', (String) params.get('policyPath')));

        List<OAS.Param> form = new List<OAS.Param>();

        return (OASOrgApacheSlingXssImplXSSFilterImp) client.invoke(
            'POST', '/system/console/configMgr/org.apache.sling.xss.impl.XSSFilterImpl', '',
            query, form,
            new Map<String, Object>(),
            new Map<String, Object>(),
            new List<String>{ 'application/json', 'text/plain' },
            new List<String>(),
            new List<String> { 'aemAuth' },
            OASOrgApacheSlingXssImplXSSFilterImp.class
        );
    }
}
