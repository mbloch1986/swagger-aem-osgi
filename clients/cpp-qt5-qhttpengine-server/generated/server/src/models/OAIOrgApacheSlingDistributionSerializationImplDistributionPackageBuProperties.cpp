/**
 * Adobe Experience Manager OSGI config (AEM) API
 * Swagger AEM OSGI is an OpenAPI specification for Adobe Experience Manager (AEM) OSGI Configurations API
 *
 * OpenAPI spec version: 1.0.0-pre.0
 * Contact: opensource@shinesolutions.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


#include "OAIOrgApacheSlingDistributionSerializationImplDistributionPackageBuProperties.h"

#include "OAIHelpers.h"

#include <QJsonDocument>
#include <QJsonArray>
#include <QObject>
#include <QDebug>

namespace OpenAPI {

OAIOrgApacheSlingDistributionSerializationImplDistributionPackageBuProperties::OAIOrgApacheSlingDistributionSerializationImplDistributionPackageBuProperties(QString json) {
    this->fromJson(json);
}

OAIOrgApacheSlingDistributionSerializationImplDistributionPackageBuProperties::OAIOrgApacheSlingDistributionSerializationImplDistributionPackageBuProperties() {
    this->init();
}

OAIOrgApacheSlingDistributionSerializationImplDistributionPackageBuProperties::~OAIOrgApacheSlingDistributionSerializationImplDistributionPackageBuProperties() {
    
}

void
OAIOrgApacheSlingDistributionSerializationImplDistributionPackageBuProperties::init() {
    m_name_isSet = false;
    m_type_isSet = false;
    m_format_target_isSet = false;
    m_temp_fs_folder_isSet = false;
    m_file_threshold_isSet = false;
    m_memory_unit_isSet = false;
    m_use_off_heap_memory_isSet = false;
    m_digest_algorithm_isSet = false;
    m_monitoring_queue_size_isSet = false;
    m_cleanup_delay_isSet = false;
    m_package_filters_isSet = false;
    m_property_filters_isSet = false;
}

void
OAIOrgApacheSlingDistributionSerializationImplDistributionPackageBuProperties::fromJson(QString jsonString) {
    QByteArray array (jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void
OAIOrgApacheSlingDistributionSerializationImplDistributionPackageBuProperties::fromJsonObject(QJsonObject json) {
    ::OpenAPI::fromJsonValue(name, json[QString("name")]);
    
    ::OpenAPI::fromJsonValue(type, json[QString("type")]);
    
    ::OpenAPI::fromJsonValue(format_target, json[QString("format.target")]);
    
    ::OpenAPI::fromJsonValue(temp_fs_folder, json[QString("tempFsFolder")]);
    
    ::OpenAPI::fromJsonValue(file_threshold, json[QString("fileThreshold")]);
    
    ::OpenAPI::fromJsonValue(memory_unit, json[QString("memoryUnit")]);
    
    ::OpenAPI::fromJsonValue(use_off_heap_memory, json[QString("useOffHeapMemory")]);
    
    ::OpenAPI::fromJsonValue(digest_algorithm, json[QString("digestAlgorithm")]);
    
    ::OpenAPI::fromJsonValue(monitoring_queue_size, json[QString("monitoringQueueSize")]);
    
    ::OpenAPI::fromJsonValue(cleanup_delay, json[QString("cleanupDelay")]);
    
    ::OpenAPI::fromJsonValue(package_filters, json[QString("package.filters")]);
    
    ::OpenAPI::fromJsonValue(property_filters, json[QString("property.filters")]);
    
}

QString
OAIOrgApacheSlingDistributionSerializationImplDistributionPackageBuProperties::asJson () const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject
OAIOrgApacheSlingDistributionSerializationImplDistributionPackageBuProperties::asJsonObject() const {
    QJsonObject obj;
	if(name.isSet()){
        obj.insert(QString("name"), ::OpenAPI::toJsonValue(name));
    }
	if(type.isSet()){
        obj.insert(QString("type"), ::OpenAPI::toJsonValue(type));
    }
	if(format_target.isSet()){
        obj.insert(QString("format.target"), ::OpenAPI::toJsonValue(format_target));
    }
	if(temp_fs_folder.isSet()){
        obj.insert(QString("tempFsFolder"), ::OpenAPI::toJsonValue(temp_fs_folder));
    }
	if(file_threshold.isSet()){
        obj.insert(QString("fileThreshold"), ::OpenAPI::toJsonValue(file_threshold));
    }
	if(memory_unit.isSet()){
        obj.insert(QString("memoryUnit"), ::OpenAPI::toJsonValue(memory_unit));
    }
	if(use_off_heap_memory.isSet()){
        obj.insert(QString("useOffHeapMemory"), ::OpenAPI::toJsonValue(use_off_heap_memory));
    }
	if(digest_algorithm.isSet()){
        obj.insert(QString("digestAlgorithm"), ::OpenAPI::toJsonValue(digest_algorithm));
    }
	if(monitoring_queue_size.isSet()){
        obj.insert(QString("monitoringQueueSize"), ::OpenAPI::toJsonValue(monitoring_queue_size));
    }
	if(cleanup_delay.isSet()){
        obj.insert(QString("cleanupDelay"), ::OpenAPI::toJsonValue(cleanup_delay));
    }
	if(package_filters.isSet()){
        obj.insert(QString("package.filters"), ::OpenAPI::toJsonValue(package_filters));
    }
	if(property_filters.isSet()){
        obj.insert(QString("property.filters"), ::OpenAPI::toJsonValue(property_filters));
    }
    return obj;
}

OAIConfigNodePropertyString
OAIOrgApacheSlingDistributionSerializationImplDistributionPackageBuProperties::getName() const {
    return name;
}
void
OAIOrgApacheSlingDistributionSerializationImplDistributionPackageBuProperties::setName(const OAIConfigNodePropertyString &name) {
    this->name = name;
    this->m_name_isSet = true;
}

OAIConfigNodePropertyDropDown
OAIOrgApacheSlingDistributionSerializationImplDistributionPackageBuProperties::getType() const {
    return type;
}
void
OAIOrgApacheSlingDistributionSerializationImplDistributionPackageBuProperties::setType(const OAIConfigNodePropertyDropDown &type) {
    this->type = type;
    this->m_type_isSet = true;
}

OAIConfigNodePropertyString
OAIOrgApacheSlingDistributionSerializationImplDistributionPackageBuProperties::getFormatTarget() const {
    return format_target;
}
void
OAIOrgApacheSlingDistributionSerializationImplDistributionPackageBuProperties::setFormatTarget(const OAIConfigNodePropertyString &format_target) {
    this->format_target = format_target;
    this->m_format_target_isSet = true;
}

OAIConfigNodePropertyString
OAIOrgApacheSlingDistributionSerializationImplDistributionPackageBuProperties::getTempFsFolder() const {
    return temp_fs_folder;
}
void
OAIOrgApacheSlingDistributionSerializationImplDistributionPackageBuProperties::setTempFsFolder(const OAIConfigNodePropertyString &temp_fs_folder) {
    this->temp_fs_folder = temp_fs_folder;
    this->m_temp_fs_folder_isSet = true;
}

OAIConfigNodePropertyInteger
OAIOrgApacheSlingDistributionSerializationImplDistributionPackageBuProperties::getFileThreshold() const {
    return file_threshold;
}
void
OAIOrgApacheSlingDistributionSerializationImplDistributionPackageBuProperties::setFileThreshold(const OAIConfigNodePropertyInteger &file_threshold) {
    this->file_threshold = file_threshold;
    this->m_file_threshold_isSet = true;
}

OAIConfigNodePropertyDropDown
OAIOrgApacheSlingDistributionSerializationImplDistributionPackageBuProperties::getMemoryUnit() const {
    return memory_unit;
}
void
OAIOrgApacheSlingDistributionSerializationImplDistributionPackageBuProperties::setMemoryUnit(const OAIConfigNodePropertyDropDown &memory_unit) {
    this->memory_unit = memory_unit;
    this->m_memory_unit_isSet = true;
}

OAIConfigNodePropertyBoolean
OAIOrgApacheSlingDistributionSerializationImplDistributionPackageBuProperties::getUseOffHeapMemory() const {
    return use_off_heap_memory;
}
void
OAIOrgApacheSlingDistributionSerializationImplDistributionPackageBuProperties::setUseOffHeapMemory(const OAIConfigNodePropertyBoolean &use_off_heap_memory) {
    this->use_off_heap_memory = use_off_heap_memory;
    this->m_use_off_heap_memory_isSet = true;
}

OAIConfigNodePropertyDropDown
OAIOrgApacheSlingDistributionSerializationImplDistributionPackageBuProperties::getDigestAlgorithm() const {
    return digest_algorithm;
}
void
OAIOrgApacheSlingDistributionSerializationImplDistributionPackageBuProperties::setDigestAlgorithm(const OAIConfigNodePropertyDropDown &digest_algorithm) {
    this->digest_algorithm = digest_algorithm;
    this->m_digest_algorithm_isSet = true;
}

OAIConfigNodePropertyInteger
OAIOrgApacheSlingDistributionSerializationImplDistributionPackageBuProperties::getMonitoringQueueSize() const {
    return monitoring_queue_size;
}
void
OAIOrgApacheSlingDistributionSerializationImplDistributionPackageBuProperties::setMonitoringQueueSize(const OAIConfigNodePropertyInteger &monitoring_queue_size) {
    this->monitoring_queue_size = monitoring_queue_size;
    this->m_monitoring_queue_size_isSet = true;
}

OAIConfigNodePropertyInteger
OAIOrgApacheSlingDistributionSerializationImplDistributionPackageBuProperties::getCleanupDelay() const {
    return cleanup_delay;
}
void
OAIOrgApacheSlingDistributionSerializationImplDistributionPackageBuProperties::setCleanupDelay(const OAIConfigNodePropertyInteger &cleanup_delay) {
    this->cleanup_delay = cleanup_delay;
    this->m_cleanup_delay_isSet = true;
}

OAIConfigNodePropertyArray
OAIOrgApacheSlingDistributionSerializationImplDistributionPackageBuProperties::getPackageFilters() const {
    return package_filters;
}
void
OAIOrgApacheSlingDistributionSerializationImplDistributionPackageBuProperties::setPackageFilters(const OAIConfigNodePropertyArray &package_filters) {
    this->package_filters = package_filters;
    this->m_package_filters_isSet = true;
}

OAIConfigNodePropertyArray
OAIOrgApacheSlingDistributionSerializationImplDistributionPackageBuProperties::getPropertyFilters() const {
    return property_filters;
}
void
OAIOrgApacheSlingDistributionSerializationImplDistributionPackageBuProperties::setPropertyFilters(const OAIConfigNodePropertyArray &property_filters) {
    this->property_filters = property_filters;
    this->m_property_filters_isSet = true;
}


bool
OAIOrgApacheSlingDistributionSerializationImplDistributionPackageBuProperties::isSet() const {
    bool isObjectUpdated = false;
    do{ 
        if(name.isSet()){ isObjectUpdated = true; break;}
    
        if(type.isSet()){ isObjectUpdated = true; break;}
    
        if(format_target.isSet()){ isObjectUpdated = true; break;}
    
        if(temp_fs_folder.isSet()){ isObjectUpdated = true; break;}
    
        if(file_threshold.isSet()){ isObjectUpdated = true; break;}
    
        if(memory_unit.isSet()){ isObjectUpdated = true; break;}
    
        if(use_off_heap_memory.isSet()){ isObjectUpdated = true; break;}
    
        if(digest_algorithm.isSet()){ isObjectUpdated = true; break;}
    
        if(monitoring_queue_size.isSet()){ isObjectUpdated = true; break;}
    
        if(cleanup_delay.isSet()){ isObjectUpdated = true; break;}
    
        if(package_filters.isSet()){ isObjectUpdated = true; break;}
    
        if(property_filters.isSet()){ isObjectUpdated = true; break;}
    }while(false);
    return isObjectUpdated;
}

}

