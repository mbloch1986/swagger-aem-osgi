/**
 * Adobe Experience Manager OSGI config (AEM) API
 * Swagger AEM OSGI is an OpenAPI specification for Adobe Experience Manager (AEM) OSGI Configurations API
 *
 * OpenAPI spec version: 1.0.0-pre.0
 * Contact: opensource@shinesolutions.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


#include "OAIComDayCqWcmMsmImplRolloutManagerImplProperties.h"

#include "OAIHelpers.h"

#include <QJsonDocument>
#include <QJsonArray>
#include <QObject>
#include <QDebug>

namespace OpenAPI {

OAIComDayCqWcmMsmImplRolloutManagerImplProperties::OAIComDayCqWcmMsmImplRolloutManagerImplProperties(QString json) {
    init();
    this->fromJson(json);
}

OAIComDayCqWcmMsmImplRolloutManagerImplProperties::OAIComDayCqWcmMsmImplRolloutManagerImplProperties() {
    init();
}

OAIComDayCqWcmMsmImplRolloutManagerImplProperties::~OAIComDayCqWcmMsmImplRolloutManagerImplProperties() {
    this->cleanup();
}

void
OAIComDayCqWcmMsmImplRolloutManagerImplProperties::init() {
    event_filter = new OAIConfigNodePropertyString();
    m_event_filter_isSet = false;
    rolloutmgr_excludedprops_default = new OAIConfigNodePropertyArray();
    m_rolloutmgr_excludedprops_default_isSet = false;
    rolloutmgr_excludedparagraphprops_default = new OAIConfigNodePropertyArray();
    m_rolloutmgr_excludedparagraphprops_default_isSet = false;
    rolloutmgr_excludednodetypes_default = new OAIConfigNodePropertyArray();
    m_rolloutmgr_excludednodetypes_default_isSet = false;
    rolloutmgr_threadpool_maxsize = new OAIConfigNodePropertyInteger();
    m_rolloutmgr_threadpool_maxsize_isSet = false;
    rolloutmgr_threadpool_maxshutdowntime = new OAIConfigNodePropertyInteger();
    m_rolloutmgr_threadpool_maxshutdowntime_isSet = false;
    rolloutmgr_threadpool_priority = new OAIConfigNodePropertyDropDown();
    m_rolloutmgr_threadpool_priority_isSet = false;
    rolloutmgr_commit_size = new OAIConfigNodePropertyInteger();
    m_rolloutmgr_commit_size_isSet = false;
    rolloutmgr_conflicthandling_enabled = new OAIConfigNodePropertyBoolean();
    m_rolloutmgr_conflicthandling_enabled_isSet = false;
}

void
OAIComDayCqWcmMsmImplRolloutManagerImplProperties::cleanup() {
    if(event_filter != nullptr) { 
        delete event_filter;
    }
    if(rolloutmgr_excludedprops_default != nullptr) { 
        delete rolloutmgr_excludedprops_default;
    }
    if(rolloutmgr_excludedparagraphprops_default != nullptr) { 
        delete rolloutmgr_excludedparagraphprops_default;
    }
    if(rolloutmgr_excludednodetypes_default != nullptr) { 
        delete rolloutmgr_excludednodetypes_default;
    }
    if(rolloutmgr_threadpool_maxsize != nullptr) { 
        delete rolloutmgr_threadpool_maxsize;
    }
    if(rolloutmgr_threadpool_maxshutdowntime != nullptr) { 
        delete rolloutmgr_threadpool_maxshutdowntime;
    }
    if(rolloutmgr_threadpool_priority != nullptr) { 
        delete rolloutmgr_threadpool_priority;
    }
    if(rolloutmgr_commit_size != nullptr) { 
        delete rolloutmgr_commit_size;
    }
    if(rolloutmgr_conflicthandling_enabled != nullptr) { 
        delete rolloutmgr_conflicthandling_enabled;
    }
}

OAIComDayCqWcmMsmImplRolloutManagerImplProperties*
OAIComDayCqWcmMsmImplRolloutManagerImplProperties::fromJson(QString json) {
    QByteArray array (json.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
    return this;
}

void
OAIComDayCqWcmMsmImplRolloutManagerImplProperties::fromJsonObject(QJsonObject pJson) {
    ::OpenAPI::setValue(&event_filter, pJson["event.filter"], "OAIConfigNodePropertyString", "OAIConfigNodePropertyString");
    
    ::OpenAPI::setValue(&rolloutmgr_excludedprops_default, pJson["rolloutmgr.excludedprops.default"], "OAIConfigNodePropertyArray", "OAIConfigNodePropertyArray");
    
    ::OpenAPI::setValue(&rolloutmgr_excludedparagraphprops_default, pJson["rolloutmgr.excludedparagraphprops.default"], "OAIConfigNodePropertyArray", "OAIConfigNodePropertyArray");
    
    ::OpenAPI::setValue(&rolloutmgr_excludednodetypes_default, pJson["rolloutmgr.excludednodetypes.default"], "OAIConfigNodePropertyArray", "OAIConfigNodePropertyArray");
    
    ::OpenAPI::setValue(&rolloutmgr_threadpool_maxsize, pJson["rolloutmgr.threadpool.maxsize"], "OAIConfigNodePropertyInteger", "OAIConfigNodePropertyInteger");
    
    ::OpenAPI::setValue(&rolloutmgr_threadpool_maxshutdowntime, pJson["rolloutmgr.threadpool.maxshutdowntime"], "OAIConfigNodePropertyInteger", "OAIConfigNodePropertyInteger");
    
    ::OpenAPI::setValue(&rolloutmgr_threadpool_priority, pJson["rolloutmgr.threadpool.priority"], "OAIConfigNodePropertyDropDown", "OAIConfigNodePropertyDropDown");
    
    ::OpenAPI::setValue(&rolloutmgr_commit_size, pJson["rolloutmgr.commit.size"], "OAIConfigNodePropertyInteger", "OAIConfigNodePropertyInteger");
    
    ::OpenAPI::setValue(&rolloutmgr_conflicthandling_enabled, pJson["rolloutmgr.conflicthandling.enabled"], "OAIConfigNodePropertyBoolean", "OAIConfigNodePropertyBoolean");
    
}

QString
OAIComDayCqWcmMsmImplRolloutManagerImplProperties::asJson ()
{
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject
OAIComDayCqWcmMsmImplRolloutManagerImplProperties::asJsonObject() {
    QJsonObject obj;
    if((event_filter != nullptr) && (event_filter->isSet())){
        toJsonValue(QString("event.filter"), event_filter, obj, QString("OAIConfigNodePropertyString"));
    }
    if((rolloutmgr_excludedprops_default != nullptr) && (rolloutmgr_excludedprops_default->isSet())){
        toJsonValue(QString("rolloutmgr.excludedprops.default"), rolloutmgr_excludedprops_default, obj, QString("OAIConfigNodePropertyArray"));
    }
    if((rolloutmgr_excludedparagraphprops_default != nullptr) && (rolloutmgr_excludedparagraphprops_default->isSet())){
        toJsonValue(QString("rolloutmgr.excludedparagraphprops.default"), rolloutmgr_excludedparagraphprops_default, obj, QString("OAIConfigNodePropertyArray"));
    }
    if((rolloutmgr_excludednodetypes_default != nullptr) && (rolloutmgr_excludednodetypes_default->isSet())){
        toJsonValue(QString("rolloutmgr.excludednodetypes.default"), rolloutmgr_excludednodetypes_default, obj, QString("OAIConfigNodePropertyArray"));
    }
    if((rolloutmgr_threadpool_maxsize != nullptr) && (rolloutmgr_threadpool_maxsize->isSet())){
        toJsonValue(QString("rolloutmgr.threadpool.maxsize"), rolloutmgr_threadpool_maxsize, obj, QString("OAIConfigNodePropertyInteger"));
    }
    if((rolloutmgr_threadpool_maxshutdowntime != nullptr) && (rolloutmgr_threadpool_maxshutdowntime->isSet())){
        toJsonValue(QString("rolloutmgr.threadpool.maxshutdowntime"), rolloutmgr_threadpool_maxshutdowntime, obj, QString("OAIConfigNodePropertyInteger"));
    }
    if((rolloutmgr_threadpool_priority != nullptr) && (rolloutmgr_threadpool_priority->isSet())){
        toJsonValue(QString("rolloutmgr.threadpool.priority"), rolloutmgr_threadpool_priority, obj, QString("OAIConfigNodePropertyDropDown"));
    }
    if((rolloutmgr_commit_size != nullptr) && (rolloutmgr_commit_size->isSet())){
        toJsonValue(QString("rolloutmgr.commit.size"), rolloutmgr_commit_size, obj, QString("OAIConfigNodePropertyInteger"));
    }
    if((rolloutmgr_conflicthandling_enabled != nullptr) && (rolloutmgr_conflicthandling_enabled->isSet())){
        toJsonValue(QString("rolloutmgr.conflicthandling.enabled"), rolloutmgr_conflicthandling_enabled, obj, QString("OAIConfigNodePropertyBoolean"));
    }

    return obj;
}

OAIConfigNodePropertyString*
OAIComDayCqWcmMsmImplRolloutManagerImplProperties::getEventFilter() {
    return event_filter;
}
void
OAIComDayCqWcmMsmImplRolloutManagerImplProperties::setEventFilter(OAIConfigNodePropertyString* event_filter) {
    this->event_filter = event_filter;
    this->m_event_filter_isSet = true;
}

OAIConfigNodePropertyArray*
OAIComDayCqWcmMsmImplRolloutManagerImplProperties::getRolloutmgrExcludedpropsDefault() {
    return rolloutmgr_excludedprops_default;
}
void
OAIComDayCqWcmMsmImplRolloutManagerImplProperties::setRolloutmgrExcludedpropsDefault(OAIConfigNodePropertyArray* rolloutmgr_excludedprops_default) {
    this->rolloutmgr_excludedprops_default = rolloutmgr_excludedprops_default;
    this->m_rolloutmgr_excludedprops_default_isSet = true;
}

OAIConfigNodePropertyArray*
OAIComDayCqWcmMsmImplRolloutManagerImplProperties::getRolloutmgrExcludedparagraphpropsDefault() {
    return rolloutmgr_excludedparagraphprops_default;
}
void
OAIComDayCqWcmMsmImplRolloutManagerImplProperties::setRolloutmgrExcludedparagraphpropsDefault(OAIConfigNodePropertyArray* rolloutmgr_excludedparagraphprops_default) {
    this->rolloutmgr_excludedparagraphprops_default = rolloutmgr_excludedparagraphprops_default;
    this->m_rolloutmgr_excludedparagraphprops_default_isSet = true;
}

OAIConfigNodePropertyArray*
OAIComDayCqWcmMsmImplRolloutManagerImplProperties::getRolloutmgrExcludednodetypesDefault() {
    return rolloutmgr_excludednodetypes_default;
}
void
OAIComDayCqWcmMsmImplRolloutManagerImplProperties::setRolloutmgrExcludednodetypesDefault(OAIConfigNodePropertyArray* rolloutmgr_excludednodetypes_default) {
    this->rolloutmgr_excludednodetypes_default = rolloutmgr_excludednodetypes_default;
    this->m_rolloutmgr_excludednodetypes_default_isSet = true;
}

OAIConfigNodePropertyInteger*
OAIComDayCqWcmMsmImplRolloutManagerImplProperties::getRolloutmgrThreadpoolMaxsize() {
    return rolloutmgr_threadpool_maxsize;
}
void
OAIComDayCqWcmMsmImplRolloutManagerImplProperties::setRolloutmgrThreadpoolMaxsize(OAIConfigNodePropertyInteger* rolloutmgr_threadpool_maxsize) {
    this->rolloutmgr_threadpool_maxsize = rolloutmgr_threadpool_maxsize;
    this->m_rolloutmgr_threadpool_maxsize_isSet = true;
}

OAIConfigNodePropertyInteger*
OAIComDayCqWcmMsmImplRolloutManagerImplProperties::getRolloutmgrThreadpoolMaxshutdowntime() {
    return rolloutmgr_threadpool_maxshutdowntime;
}
void
OAIComDayCqWcmMsmImplRolloutManagerImplProperties::setRolloutmgrThreadpoolMaxshutdowntime(OAIConfigNodePropertyInteger* rolloutmgr_threadpool_maxshutdowntime) {
    this->rolloutmgr_threadpool_maxshutdowntime = rolloutmgr_threadpool_maxshutdowntime;
    this->m_rolloutmgr_threadpool_maxshutdowntime_isSet = true;
}

OAIConfigNodePropertyDropDown*
OAIComDayCqWcmMsmImplRolloutManagerImplProperties::getRolloutmgrThreadpoolPriority() {
    return rolloutmgr_threadpool_priority;
}
void
OAIComDayCqWcmMsmImplRolloutManagerImplProperties::setRolloutmgrThreadpoolPriority(OAIConfigNodePropertyDropDown* rolloutmgr_threadpool_priority) {
    this->rolloutmgr_threadpool_priority = rolloutmgr_threadpool_priority;
    this->m_rolloutmgr_threadpool_priority_isSet = true;
}

OAIConfigNodePropertyInteger*
OAIComDayCqWcmMsmImplRolloutManagerImplProperties::getRolloutmgrCommitSize() {
    return rolloutmgr_commit_size;
}
void
OAIComDayCqWcmMsmImplRolloutManagerImplProperties::setRolloutmgrCommitSize(OAIConfigNodePropertyInteger* rolloutmgr_commit_size) {
    this->rolloutmgr_commit_size = rolloutmgr_commit_size;
    this->m_rolloutmgr_commit_size_isSet = true;
}

OAIConfigNodePropertyBoolean*
OAIComDayCqWcmMsmImplRolloutManagerImplProperties::getRolloutmgrConflicthandlingEnabled() {
    return rolloutmgr_conflicthandling_enabled;
}
void
OAIComDayCqWcmMsmImplRolloutManagerImplProperties::setRolloutmgrConflicthandlingEnabled(OAIConfigNodePropertyBoolean* rolloutmgr_conflicthandling_enabled) {
    this->rolloutmgr_conflicthandling_enabled = rolloutmgr_conflicthandling_enabled;
    this->m_rolloutmgr_conflicthandling_enabled_isSet = true;
}


bool
OAIComDayCqWcmMsmImplRolloutManagerImplProperties::isSet(){
    bool isObjectUpdated = false;
    do{
        if(event_filter != nullptr && event_filter->isSet()){ isObjectUpdated = true; break;}
        if(rolloutmgr_excludedprops_default != nullptr && rolloutmgr_excludedprops_default->isSet()){ isObjectUpdated = true; break;}
        if(rolloutmgr_excludedparagraphprops_default != nullptr && rolloutmgr_excludedparagraphprops_default->isSet()){ isObjectUpdated = true; break;}
        if(rolloutmgr_excludednodetypes_default != nullptr && rolloutmgr_excludednodetypes_default->isSet()){ isObjectUpdated = true; break;}
        if(rolloutmgr_threadpool_maxsize != nullptr && rolloutmgr_threadpool_maxsize->isSet()){ isObjectUpdated = true; break;}
        if(rolloutmgr_threadpool_maxshutdowntime != nullptr && rolloutmgr_threadpool_maxshutdowntime->isSet()){ isObjectUpdated = true; break;}
        if(rolloutmgr_threadpool_priority != nullptr && rolloutmgr_threadpool_priority->isSet()){ isObjectUpdated = true; break;}
        if(rolloutmgr_commit_size != nullptr && rolloutmgr_commit_size->isSet()){ isObjectUpdated = true; break;}
        if(rolloutmgr_conflicthandling_enabled != nullptr && rolloutmgr_conflicthandling_enabled->isSet()){ isObjectUpdated = true; break;}
    }while(false);
    return isObjectUpdated;
}
}

