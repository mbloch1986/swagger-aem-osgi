/**
* Adobe Experience Manager OSGI config (AEM) API
* Swagger AEM OSGI is an OpenAPI specification for Adobe Experience Manager (AEM) OSGI Configurations API
*
* OpenAPI spec version: 1.0.0-pre.0
* Contact: opensource@shinesolutions.com
*
* NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
* https://openapi-generator.tech
* Do not edit the class manually.
*/


#include "ComAdobeCqSocialUgcbaseSecurityImplDefaultAttachmentTypeBlackliProperties.h"

namespace org {
namespace openapitools {
namespace server {
namespace model {

ComAdobeCqSocialUgcbaseSecurityImplDefaultAttachmentTypeBlackliProperties::ComAdobeCqSocialUgcbaseSecurityImplDefaultAttachmentTypeBlackliProperties()
{
    m_Default_attachment_type_blacklistIsSet = false;
    m_Baseline_attachment_type_blacklistIsSet = false;
    
}

ComAdobeCqSocialUgcbaseSecurityImplDefaultAttachmentTypeBlackliProperties::~ComAdobeCqSocialUgcbaseSecurityImplDefaultAttachmentTypeBlackliProperties()
{
}

void ComAdobeCqSocialUgcbaseSecurityImplDefaultAttachmentTypeBlackliProperties::validate()
{
    // TODO: implement validation
}

nlohmann::json ComAdobeCqSocialUgcbaseSecurityImplDefaultAttachmentTypeBlackliProperties::toJson() const
{
    nlohmann::json val = nlohmann::json::object();

    if(m_Default_attachment_type_blacklistIsSet)
    {
        val["default.attachment.type.blacklist"] = ModelBase::toJson(m_Default_attachment_type_blacklist);
    }
    if(m_Baseline_attachment_type_blacklistIsSet)
    {
        val["baseline.attachment.type.blacklist"] = ModelBase::toJson(m_Baseline_attachment_type_blacklist);
    }
    

    return val;
}

void ComAdobeCqSocialUgcbaseSecurityImplDefaultAttachmentTypeBlackliProperties::fromJson(nlohmann::json& val)
{
    if(val.find("default.attachment.type.blacklist") != val.end())
    {
        if(!val["default.attachment.type.blacklist"].is_null())
        {
            ConfigNodePropertyArray newItem;
            newItem.fromJson(val["default.attachment.type.blacklist"]);
            setDefaultAttachmentTypeBlacklist( newItem );
        }
        
    }
    if(val.find("baseline.attachment.type.blacklist") != val.end())
    {
        if(!val["baseline.attachment.type.blacklist"].is_null())
        {
            ConfigNodePropertyArray newItem;
            newItem.fromJson(val["baseline.attachment.type.blacklist"]);
            setBaselineAttachmentTypeBlacklist( newItem );
        }
        
    }
    
}


ConfigNodePropertyArray ComAdobeCqSocialUgcbaseSecurityImplDefaultAttachmentTypeBlackliProperties::getDefaultAttachmentTypeBlacklist() const
{
    return m_Default_attachment_type_blacklist;
}
void ComAdobeCqSocialUgcbaseSecurityImplDefaultAttachmentTypeBlackliProperties::setDefaultAttachmentTypeBlacklist(ConfigNodePropertyArray const& value)
{
    m_Default_attachment_type_blacklist = value;
    m_Default_attachment_type_blacklistIsSet = true;
}
bool ComAdobeCqSocialUgcbaseSecurityImplDefaultAttachmentTypeBlackliProperties::defaultAttachmentTypeBlacklistIsSet() const
{
    return m_Default_attachment_type_blacklistIsSet;
}
void ComAdobeCqSocialUgcbaseSecurityImplDefaultAttachmentTypeBlackliProperties::unsetDefault_attachment_type_blacklist()
{
    m_Default_attachment_type_blacklistIsSet = false;
}
ConfigNodePropertyArray ComAdobeCqSocialUgcbaseSecurityImplDefaultAttachmentTypeBlackliProperties::getBaselineAttachmentTypeBlacklist() const
{
    return m_Baseline_attachment_type_blacklist;
}
void ComAdobeCqSocialUgcbaseSecurityImplDefaultAttachmentTypeBlackliProperties::setBaselineAttachmentTypeBlacklist(ConfigNodePropertyArray const& value)
{
    m_Baseline_attachment_type_blacklist = value;
    m_Baseline_attachment_type_blacklistIsSet = true;
}
bool ComAdobeCqSocialUgcbaseSecurityImplDefaultAttachmentTypeBlackliProperties::baselineAttachmentTypeBlacklistIsSet() const
{
    return m_Baseline_attachment_type_blacklistIsSet;
}
void ComAdobeCqSocialUgcbaseSecurityImplDefaultAttachmentTypeBlackliProperties::unsetBaseline_attachment_type_blacklist()
{
    m_Baseline_attachment_type_blacklistIsSet = false;
}

}
}
}
}

