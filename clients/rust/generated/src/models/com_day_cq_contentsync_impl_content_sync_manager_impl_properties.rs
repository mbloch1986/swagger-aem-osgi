/* 
 * Adobe Experience Manager OSGI config (AEM) API
 *
 * Swagger AEM OSGI is an OpenAPI specification for Adobe Experience Manager (AEM) OSGI Configurations API
 *
 * OpenAPI spec version: 1.0.0-pre.0
 * Contact: opensource@shinesolutions.com
 * Generated by: https://openapi-generator.tech
 */


#[allow(unused_imports)]
use serde_json::Value;

#[derive(Debug, Serialize, Deserialize)]
pub struct ComDayCqContentsyncImplContentSyncManagerImplProperties {
  #[serde(rename = "contentsync.fallback.authorizable")]
  contentsync_fallback_authorizable: Option<::models::ConfigNodePropertyString>,
  #[serde(rename = "contentsync.fallback.updateuser")]
  contentsync_fallback_updateuser: Option<::models::ConfigNodePropertyString>
}

impl ComDayCqContentsyncImplContentSyncManagerImplProperties {
  pub fn new() -> ComDayCqContentsyncImplContentSyncManagerImplProperties {
    ComDayCqContentsyncImplContentSyncManagerImplProperties {
      contentsync_fallback_authorizable: None,
      contentsync_fallback_updateuser: None
    }
  }

  pub fn set_contentsync_fallback_authorizable(&mut self, contentsync_fallback_authorizable: ::models::ConfigNodePropertyString) {
    self.contentsync_fallback_authorizable = Some(contentsync_fallback_authorizable);
  }

  pub fn with_contentsync_fallback_authorizable(mut self, contentsync_fallback_authorizable: ::models::ConfigNodePropertyString) -> ComDayCqContentsyncImplContentSyncManagerImplProperties {
    self.contentsync_fallback_authorizable = Some(contentsync_fallback_authorizable);
    self
  }

  pub fn contentsync_fallback_authorizable(&self) -> Option<&::models::ConfigNodePropertyString> {
    self.contentsync_fallback_authorizable.as_ref()
  }

  pub fn reset_contentsync_fallback_authorizable(&mut self) {
    self.contentsync_fallback_authorizable = None;
  }

  pub fn set_contentsync_fallback_updateuser(&mut self, contentsync_fallback_updateuser: ::models::ConfigNodePropertyString) {
    self.contentsync_fallback_updateuser = Some(contentsync_fallback_updateuser);
  }

  pub fn with_contentsync_fallback_updateuser(mut self, contentsync_fallback_updateuser: ::models::ConfigNodePropertyString) -> ComDayCqContentsyncImplContentSyncManagerImplProperties {
    self.contentsync_fallback_updateuser = Some(contentsync_fallback_updateuser);
    self
  }

  pub fn contentsync_fallback_updateuser(&self) -> Option<&::models::ConfigNodePropertyString> {
    self.contentsync_fallback_updateuser.as_ref()
  }

  pub fn reset_contentsync_fallback_updateuser(&mut self) {
    self.contentsync_fallback_updateuser = None;
  }

}



