/**
 * Adobe Experience Manager OSGI config (AEM) API
 * Swagger AEM OSGI is an OpenAPI specification for Adobe Experience Manager (AEM) OSGI Configurations API
 *
 * OpenAPI spec version: 1.0.0-pre.0
 * Contact: opensource@shinesolutions.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * OAIComDayCqRewriterLinkcheckerImplLinkCheckerTaskProperties.h
 *
 * 
 */

#ifndef OAIComDayCqRewriterLinkcheckerImplLinkCheckerTaskProperties_H_
#define OAIComDayCqRewriterLinkcheckerImplLinkCheckerTaskProperties_H_

#include <QJsonObject>


#include "OAIOAIConfigNodePropertyBoolean.h"
#include "OAIOAIConfigNodePropertyInteger.h"

#include "OAIObject.h"

namespace OpenAPI {

class OAIComDayCqRewriterLinkcheckerImplLinkCheckerTaskProperties: public OAIObject {
public:
    OAIComDayCqRewriterLinkcheckerImplLinkCheckerTaskProperties();
    OAIComDayCqRewriterLinkcheckerImplLinkCheckerTaskProperties(QString json);
    ~OAIComDayCqRewriterLinkcheckerImplLinkCheckerTaskProperties();
    void init();
    void cleanup();

    QString asJson () override;
    QJsonObject asJsonObject() override;
    void fromJsonObject(QJsonObject json) override;
    OAIComDayCqRewriterLinkcheckerImplLinkCheckerTaskProperties* fromJson(QString jsonString) override;

    OAIConfigNodePropertyInteger* getSchedulerPeriod();
    void setSchedulerPeriod(OAIConfigNodePropertyInteger* scheduler_period);

    OAIConfigNodePropertyBoolean* getSchedulerConcurrent();
    void setSchedulerConcurrent(OAIConfigNodePropertyBoolean* scheduler_concurrent);

    OAIConfigNodePropertyInteger* getGoodLinkTestInterval();
    void setGoodLinkTestInterval(OAIConfigNodePropertyInteger* good_link_test_interval);

    OAIConfigNodePropertyInteger* getBadLinkTestInterval();
    void setBadLinkTestInterval(OAIConfigNodePropertyInteger* bad_link_test_interval);

    OAIConfigNodePropertyInteger* getLinkUnusedInterval();
    void setLinkUnusedInterval(OAIConfigNodePropertyInteger* link_unused_interval);

    OAIConfigNodePropertyInteger* getConnectionTimeout();
    void setConnectionTimeout(OAIConfigNodePropertyInteger* connection_timeout);


    virtual bool isSet() override;

private:
    OAIConfigNodePropertyInteger* scheduler_period;
    bool m_scheduler_period_isSet;

    OAIConfigNodePropertyBoolean* scheduler_concurrent;
    bool m_scheduler_concurrent_isSet;

    OAIConfigNodePropertyInteger* good_link_test_interval;
    bool m_good_link_test_interval_isSet;

    OAIConfigNodePropertyInteger* bad_link_test_interval;
    bool m_bad_link_test_interval_isSet;

    OAIConfigNodePropertyInteger* link_unused_interval;
    bool m_link_unused_interval_isSet;

    OAIConfigNodePropertyInteger* connection_timeout;
    bool m_connection_timeout_isSet;

};

}

#endif /* OAIComDayCqRewriterLinkcheckerImplLinkCheckerTaskProperties_H_ */
