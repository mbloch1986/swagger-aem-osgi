/**
 * Adobe Experience Manager OSGI config (AEM) API
 * Swagger AEM OSGI is an OpenAPI specification for Adobe Experience Manager (AEM) OSGI Configurations API
 *
 * OpenAPI spec version: 1.0.0-pre.0
 * Contact: opensource@shinesolutions.com
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 3.2.1-SNAPSHOT.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */



#include "OrgApacheSlingDistributionAgentImplQueueDistributionAgentFactoryProperties.h"

namespace org {
namespace openapitools {
namespace client {
namespace model {

OrgApacheSlingDistributionAgentImplQueueDistributionAgentFactoryProperties::OrgApacheSlingDistributionAgentImplQueueDistributionAgentFactoryProperties()
{
    m_NameIsSet = false;
    m_TitleIsSet = false;
    m_DetailsIsSet = false;
    m_EnabledIsSet = false;
    m_ServiceNameIsSet = false;
    m_Log_levelIsSet = false;
    m_Allowed_rootsIsSet = false;
    m_RequestAuthorizationStrategy_targetIsSet = false;
    m_QueueProviderFactory_targetIsSet = false;
    m_PackageBuilder_targetIsSet = false;
    m_Triggers_targetIsSet = false;
    m_PriorityQueuesIsSet = false;
}

OrgApacheSlingDistributionAgentImplQueueDistributionAgentFactoryProperties::~OrgApacheSlingDistributionAgentImplQueueDistributionAgentFactoryProperties()
{
}

void OrgApacheSlingDistributionAgentImplQueueDistributionAgentFactoryProperties::validate()
{
    // TODO: implement validation
}

web::json::value OrgApacheSlingDistributionAgentImplQueueDistributionAgentFactoryProperties::toJson() const
{
    web::json::value val = web::json::value::object();

    if(m_NameIsSet)
    {
        val[utility::conversions::to_string_t("name")] = ModelBase::toJson(m_Name);
    }
    if(m_TitleIsSet)
    {
        val[utility::conversions::to_string_t("title")] = ModelBase::toJson(m_Title);
    }
    if(m_DetailsIsSet)
    {
        val[utility::conversions::to_string_t("details")] = ModelBase::toJson(m_Details);
    }
    if(m_EnabledIsSet)
    {
        val[utility::conversions::to_string_t("enabled")] = ModelBase::toJson(m_Enabled);
    }
    if(m_ServiceNameIsSet)
    {
        val[utility::conversions::to_string_t("serviceName")] = ModelBase::toJson(m_ServiceName);
    }
    if(m_Log_levelIsSet)
    {
        val[utility::conversions::to_string_t("log.level")] = ModelBase::toJson(m_Log_level);
    }
    if(m_Allowed_rootsIsSet)
    {
        val[utility::conversions::to_string_t("allowed.roots")] = ModelBase::toJson(m_Allowed_roots);
    }
    if(m_RequestAuthorizationStrategy_targetIsSet)
    {
        val[utility::conversions::to_string_t("requestAuthorizationStrategy.target")] = ModelBase::toJson(m_RequestAuthorizationStrategy_target);
    }
    if(m_QueueProviderFactory_targetIsSet)
    {
        val[utility::conversions::to_string_t("queueProviderFactory.target")] = ModelBase::toJson(m_QueueProviderFactory_target);
    }
    if(m_PackageBuilder_targetIsSet)
    {
        val[utility::conversions::to_string_t("packageBuilder.target")] = ModelBase::toJson(m_PackageBuilder_target);
    }
    if(m_Triggers_targetIsSet)
    {
        val[utility::conversions::to_string_t("triggers.target")] = ModelBase::toJson(m_Triggers_target);
    }
    if(m_PriorityQueuesIsSet)
    {
        val[utility::conversions::to_string_t("priorityQueues")] = ModelBase::toJson(m_PriorityQueues);
    }

    return val;
}

void OrgApacheSlingDistributionAgentImplQueueDistributionAgentFactoryProperties::fromJson(web::json::value& val)
{
    if(val.has_field(utility::conversions::to_string_t("name")))
    {
        if(!val[utility::conversions::to_string_t("name")].is_null())
        {
            std::shared_ptr<ConfigNodePropertyString> newItem(new ConfigNodePropertyString());
            newItem->fromJson(val[utility::conversions::to_string_t("name")]);
            setName( newItem );
        }
    }
    if(val.has_field(utility::conversions::to_string_t("title")))
    {
        if(!val[utility::conversions::to_string_t("title")].is_null())
        {
            std::shared_ptr<ConfigNodePropertyString> newItem(new ConfigNodePropertyString());
            newItem->fromJson(val[utility::conversions::to_string_t("title")]);
            setTitle( newItem );
        }
    }
    if(val.has_field(utility::conversions::to_string_t("details")))
    {
        if(!val[utility::conversions::to_string_t("details")].is_null())
        {
            std::shared_ptr<ConfigNodePropertyString> newItem(new ConfigNodePropertyString());
            newItem->fromJson(val[utility::conversions::to_string_t("details")]);
            setDetails( newItem );
        }
    }
    if(val.has_field(utility::conversions::to_string_t("enabled")))
    {
        if(!val[utility::conversions::to_string_t("enabled")].is_null())
        {
            std::shared_ptr<ConfigNodePropertyBoolean> newItem(new ConfigNodePropertyBoolean());
            newItem->fromJson(val[utility::conversions::to_string_t("enabled")]);
            setEnabled( newItem );
        }
    }
    if(val.has_field(utility::conversions::to_string_t("serviceName")))
    {
        if(!val[utility::conversions::to_string_t("serviceName")].is_null())
        {
            std::shared_ptr<ConfigNodePropertyString> newItem(new ConfigNodePropertyString());
            newItem->fromJson(val[utility::conversions::to_string_t("serviceName")]);
            setServiceName( newItem );
        }
    }
    if(val.has_field(utility::conversions::to_string_t("log.level")))
    {
        if(!val[utility::conversions::to_string_t("log.level")].is_null())
        {
            std::shared_ptr<ConfigNodePropertyDropDown> newItem(new ConfigNodePropertyDropDown());
            newItem->fromJson(val[utility::conversions::to_string_t("log.level")]);
            setLogLevel( newItem );
        }
    }
    if(val.has_field(utility::conversions::to_string_t("allowed.roots")))
    {
        if(!val[utility::conversions::to_string_t("allowed.roots")].is_null())
        {
            std::shared_ptr<ConfigNodePropertyArray> newItem(new ConfigNodePropertyArray());
            newItem->fromJson(val[utility::conversions::to_string_t("allowed.roots")]);
            setAllowedRoots( newItem );
        }
    }
    if(val.has_field(utility::conversions::to_string_t("requestAuthorizationStrategy.target")))
    {
        if(!val[utility::conversions::to_string_t("requestAuthorizationStrategy.target")].is_null())
        {
            std::shared_ptr<ConfigNodePropertyString> newItem(new ConfigNodePropertyString());
            newItem->fromJson(val[utility::conversions::to_string_t("requestAuthorizationStrategy.target")]);
            setRequestAuthorizationStrategyTarget( newItem );
        }
    }
    if(val.has_field(utility::conversions::to_string_t("queueProviderFactory.target")))
    {
        if(!val[utility::conversions::to_string_t("queueProviderFactory.target")].is_null())
        {
            std::shared_ptr<ConfigNodePropertyString> newItem(new ConfigNodePropertyString());
            newItem->fromJson(val[utility::conversions::to_string_t("queueProviderFactory.target")]);
            setQueueProviderFactoryTarget( newItem );
        }
    }
    if(val.has_field(utility::conversions::to_string_t("packageBuilder.target")))
    {
        if(!val[utility::conversions::to_string_t("packageBuilder.target")].is_null())
        {
            std::shared_ptr<ConfigNodePropertyString> newItem(new ConfigNodePropertyString());
            newItem->fromJson(val[utility::conversions::to_string_t("packageBuilder.target")]);
            setPackageBuilderTarget( newItem );
        }
    }
    if(val.has_field(utility::conversions::to_string_t("triggers.target")))
    {
        if(!val[utility::conversions::to_string_t("triggers.target")].is_null())
        {
            std::shared_ptr<ConfigNodePropertyString> newItem(new ConfigNodePropertyString());
            newItem->fromJson(val[utility::conversions::to_string_t("triggers.target")]);
            setTriggersTarget( newItem );
        }
    }
    if(val.has_field(utility::conversions::to_string_t("priorityQueues")))
    {
        if(!val[utility::conversions::to_string_t("priorityQueues")].is_null())
        {
            std::shared_ptr<ConfigNodePropertyArray> newItem(new ConfigNodePropertyArray());
            newItem->fromJson(val[utility::conversions::to_string_t("priorityQueues")]);
            setPriorityQueues( newItem );
        }
    }
}

void OrgApacheSlingDistributionAgentImplQueueDistributionAgentFactoryProperties::toMultipart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix) const
{
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t("."))
    {
        namePrefix += utility::conversions::to_string_t(".");
    }

    if(m_NameIsSet)
    {
        if (m_Name.get())
        {
            m_Name->toMultipart(multipart, utility::conversions::to_string_t("name."));
        }
    }
    if(m_TitleIsSet)
    {
        if (m_Title.get())
        {
            m_Title->toMultipart(multipart, utility::conversions::to_string_t("title."));
        }
    }
    if(m_DetailsIsSet)
    {
        if (m_Details.get())
        {
            m_Details->toMultipart(multipart, utility::conversions::to_string_t("details."));
        }
    }
    if(m_EnabledIsSet)
    {
        if (m_Enabled.get())
        {
            m_Enabled->toMultipart(multipart, utility::conversions::to_string_t("enabled."));
        }
    }
    if(m_ServiceNameIsSet)
    {
        if (m_ServiceName.get())
        {
            m_ServiceName->toMultipart(multipart, utility::conversions::to_string_t("serviceName."));
        }
    }
    if(m_Log_levelIsSet)
    {
        if (m_Log_level.get())
        {
            m_Log_level->toMultipart(multipart, utility::conversions::to_string_t("log.level."));
        }
    }
    if(m_Allowed_rootsIsSet)
    {
        if (m_Allowed_roots.get())
        {
            m_Allowed_roots->toMultipart(multipart, utility::conversions::to_string_t("allowed.roots."));
        }
    }
    if(m_RequestAuthorizationStrategy_targetIsSet)
    {
        if (m_RequestAuthorizationStrategy_target.get())
        {
            m_RequestAuthorizationStrategy_target->toMultipart(multipart, utility::conversions::to_string_t("requestAuthorizationStrategy.target."));
        }
    }
    if(m_QueueProviderFactory_targetIsSet)
    {
        if (m_QueueProviderFactory_target.get())
        {
            m_QueueProviderFactory_target->toMultipart(multipart, utility::conversions::to_string_t("queueProviderFactory.target."));
        }
    }
    if(m_PackageBuilder_targetIsSet)
    {
        if (m_PackageBuilder_target.get())
        {
            m_PackageBuilder_target->toMultipart(multipart, utility::conversions::to_string_t("packageBuilder.target."));
        }
    }
    if(m_Triggers_targetIsSet)
    {
        if (m_Triggers_target.get())
        {
            m_Triggers_target->toMultipart(multipart, utility::conversions::to_string_t("triggers.target."));
        }
    }
    if(m_PriorityQueuesIsSet)
    {
        if (m_PriorityQueues.get())
        {
            m_PriorityQueues->toMultipart(multipart, utility::conversions::to_string_t("priorityQueues."));
        }
    }
}

void OrgApacheSlingDistributionAgentImplQueueDistributionAgentFactoryProperties::fromMultiPart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix)
{
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t("."))
    {
        namePrefix += utility::conversions::to_string_t(".");
    }

    if(multipart->hasContent(utility::conversions::to_string_t("name")))
    {
        if(multipart->hasContent(utility::conversions::to_string_t("name")))
        {
            std::shared_ptr<ConfigNodePropertyString> newItem(new ConfigNodePropertyString());
            newItem->fromMultiPart(multipart, utility::conversions::to_string_t("name."));
            setName( newItem );
        }
    }
    if(multipart->hasContent(utility::conversions::to_string_t("title")))
    {
        if(multipart->hasContent(utility::conversions::to_string_t("title")))
        {
            std::shared_ptr<ConfigNodePropertyString> newItem(new ConfigNodePropertyString());
            newItem->fromMultiPart(multipart, utility::conversions::to_string_t("title."));
            setTitle( newItem );
        }
    }
    if(multipart->hasContent(utility::conversions::to_string_t("details")))
    {
        if(multipart->hasContent(utility::conversions::to_string_t("details")))
        {
            std::shared_ptr<ConfigNodePropertyString> newItem(new ConfigNodePropertyString());
            newItem->fromMultiPart(multipart, utility::conversions::to_string_t("details."));
            setDetails( newItem );
        }
    }
    if(multipart->hasContent(utility::conversions::to_string_t("enabled")))
    {
        if(multipart->hasContent(utility::conversions::to_string_t("enabled")))
        {
            std::shared_ptr<ConfigNodePropertyBoolean> newItem(new ConfigNodePropertyBoolean());
            newItem->fromMultiPart(multipart, utility::conversions::to_string_t("enabled."));
            setEnabled( newItem );
        }
    }
    if(multipart->hasContent(utility::conversions::to_string_t("serviceName")))
    {
        if(multipart->hasContent(utility::conversions::to_string_t("serviceName")))
        {
            std::shared_ptr<ConfigNodePropertyString> newItem(new ConfigNodePropertyString());
            newItem->fromMultiPart(multipart, utility::conversions::to_string_t("serviceName."));
            setServiceName( newItem );
        }
    }
    if(multipart->hasContent(utility::conversions::to_string_t("log.level")))
    {
        if(multipart->hasContent(utility::conversions::to_string_t("log.level")))
        {
            std::shared_ptr<ConfigNodePropertyDropDown> newItem(new ConfigNodePropertyDropDown());
            newItem->fromMultiPart(multipart, utility::conversions::to_string_t("log.level."));
            setLogLevel( newItem );
        }
    }
    if(multipart->hasContent(utility::conversions::to_string_t("allowed.roots")))
    {
        if(multipart->hasContent(utility::conversions::to_string_t("allowed.roots")))
        {
            std::shared_ptr<ConfigNodePropertyArray> newItem(new ConfigNodePropertyArray());
            newItem->fromMultiPart(multipart, utility::conversions::to_string_t("allowed.roots."));
            setAllowedRoots( newItem );
        }
    }
    if(multipart->hasContent(utility::conversions::to_string_t("requestAuthorizationStrategy.target")))
    {
        if(multipart->hasContent(utility::conversions::to_string_t("requestAuthorizationStrategy.target")))
        {
            std::shared_ptr<ConfigNodePropertyString> newItem(new ConfigNodePropertyString());
            newItem->fromMultiPart(multipart, utility::conversions::to_string_t("requestAuthorizationStrategy.target."));
            setRequestAuthorizationStrategyTarget( newItem );
        }
    }
    if(multipart->hasContent(utility::conversions::to_string_t("queueProviderFactory.target")))
    {
        if(multipart->hasContent(utility::conversions::to_string_t("queueProviderFactory.target")))
        {
            std::shared_ptr<ConfigNodePropertyString> newItem(new ConfigNodePropertyString());
            newItem->fromMultiPart(multipart, utility::conversions::to_string_t("queueProviderFactory.target."));
            setQueueProviderFactoryTarget( newItem );
        }
    }
    if(multipart->hasContent(utility::conversions::to_string_t("packageBuilder.target")))
    {
        if(multipart->hasContent(utility::conversions::to_string_t("packageBuilder.target")))
        {
            std::shared_ptr<ConfigNodePropertyString> newItem(new ConfigNodePropertyString());
            newItem->fromMultiPart(multipart, utility::conversions::to_string_t("packageBuilder.target."));
            setPackageBuilderTarget( newItem );
        }
    }
    if(multipart->hasContent(utility::conversions::to_string_t("triggers.target")))
    {
        if(multipart->hasContent(utility::conversions::to_string_t("triggers.target")))
        {
            std::shared_ptr<ConfigNodePropertyString> newItem(new ConfigNodePropertyString());
            newItem->fromMultiPart(multipart, utility::conversions::to_string_t("triggers.target."));
            setTriggersTarget( newItem );
        }
    }
    if(multipart->hasContent(utility::conversions::to_string_t("priorityQueues")))
    {
        if(multipart->hasContent(utility::conversions::to_string_t("priorityQueues")))
        {
            std::shared_ptr<ConfigNodePropertyArray> newItem(new ConfigNodePropertyArray());
            newItem->fromMultiPart(multipart, utility::conversions::to_string_t("priorityQueues."));
            setPriorityQueues( newItem );
        }
    }
}

std::shared_ptr<ConfigNodePropertyString> OrgApacheSlingDistributionAgentImplQueueDistributionAgentFactoryProperties::getName() const
{
    return m_Name;
}


void OrgApacheSlingDistributionAgentImplQueueDistributionAgentFactoryProperties::setName(std::shared_ptr<ConfigNodePropertyString> value)
{
    m_Name = value;
    m_NameIsSet = true;
}
bool OrgApacheSlingDistributionAgentImplQueueDistributionAgentFactoryProperties::nameIsSet() const
{
    return m_NameIsSet;
}

void OrgApacheSlingDistributionAgentImplQueueDistributionAgentFactoryProperties::unsetName()
{
    m_NameIsSet = false;
}

std::shared_ptr<ConfigNodePropertyString> OrgApacheSlingDistributionAgentImplQueueDistributionAgentFactoryProperties::getTitle() const
{
    return m_Title;
}


void OrgApacheSlingDistributionAgentImplQueueDistributionAgentFactoryProperties::setTitle(std::shared_ptr<ConfigNodePropertyString> value)
{
    m_Title = value;
    m_TitleIsSet = true;
}
bool OrgApacheSlingDistributionAgentImplQueueDistributionAgentFactoryProperties::titleIsSet() const
{
    return m_TitleIsSet;
}

void OrgApacheSlingDistributionAgentImplQueueDistributionAgentFactoryProperties::unsetTitle()
{
    m_TitleIsSet = false;
}

std::shared_ptr<ConfigNodePropertyString> OrgApacheSlingDistributionAgentImplQueueDistributionAgentFactoryProperties::getDetails() const
{
    return m_Details;
}


void OrgApacheSlingDistributionAgentImplQueueDistributionAgentFactoryProperties::setDetails(std::shared_ptr<ConfigNodePropertyString> value)
{
    m_Details = value;
    m_DetailsIsSet = true;
}
bool OrgApacheSlingDistributionAgentImplQueueDistributionAgentFactoryProperties::detailsIsSet() const
{
    return m_DetailsIsSet;
}

void OrgApacheSlingDistributionAgentImplQueueDistributionAgentFactoryProperties::unsetDetails()
{
    m_DetailsIsSet = false;
}

std::shared_ptr<ConfigNodePropertyBoolean> OrgApacheSlingDistributionAgentImplQueueDistributionAgentFactoryProperties::getEnabled() const
{
    return m_Enabled;
}


void OrgApacheSlingDistributionAgentImplQueueDistributionAgentFactoryProperties::setEnabled(std::shared_ptr<ConfigNodePropertyBoolean> value)
{
    m_Enabled = value;
    m_EnabledIsSet = true;
}
bool OrgApacheSlingDistributionAgentImplQueueDistributionAgentFactoryProperties::enabledIsSet() const
{
    return m_EnabledIsSet;
}

void OrgApacheSlingDistributionAgentImplQueueDistributionAgentFactoryProperties::unsetEnabled()
{
    m_EnabledIsSet = false;
}

std::shared_ptr<ConfigNodePropertyString> OrgApacheSlingDistributionAgentImplQueueDistributionAgentFactoryProperties::getServiceName() const
{
    return m_ServiceName;
}


void OrgApacheSlingDistributionAgentImplQueueDistributionAgentFactoryProperties::setServiceName(std::shared_ptr<ConfigNodePropertyString> value)
{
    m_ServiceName = value;
    m_ServiceNameIsSet = true;
}
bool OrgApacheSlingDistributionAgentImplQueueDistributionAgentFactoryProperties::serviceNameIsSet() const
{
    return m_ServiceNameIsSet;
}

void OrgApacheSlingDistributionAgentImplQueueDistributionAgentFactoryProperties::unsetServiceName()
{
    m_ServiceNameIsSet = false;
}

std::shared_ptr<ConfigNodePropertyDropDown> OrgApacheSlingDistributionAgentImplQueueDistributionAgentFactoryProperties::getLogLevel() const
{
    return m_Log_level;
}


void OrgApacheSlingDistributionAgentImplQueueDistributionAgentFactoryProperties::setLogLevel(std::shared_ptr<ConfigNodePropertyDropDown> value)
{
    m_Log_level = value;
    m_Log_levelIsSet = true;
}
bool OrgApacheSlingDistributionAgentImplQueueDistributionAgentFactoryProperties::logLevelIsSet() const
{
    return m_Log_levelIsSet;
}

void OrgApacheSlingDistributionAgentImplQueueDistributionAgentFactoryProperties::unsetLog_level()
{
    m_Log_levelIsSet = false;
}

std::shared_ptr<ConfigNodePropertyArray> OrgApacheSlingDistributionAgentImplQueueDistributionAgentFactoryProperties::getAllowedRoots() const
{
    return m_Allowed_roots;
}


void OrgApacheSlingDistributionAgentImplQueueDistributionAgentFactoryProperties::setAllowedRoots(std::shared_ptr<ConfigNodePropertyArray> value)
{
    m_Allowed_roots = value;
    m_Allowed_rootsIsSet = true;
}
bool OrgApacheSlingDistributionAgentImplQueueDistributionAgentFactoryProperties::allowedRootsIsSet() const
{
    return m_Allowed_rootsIsSet;
}

void OrgApacheSlingDistributionAgentImplQueueDistributionAgentFactoryProperties::unsetAllowed_roots()
{
    m_Allowed_rootsIsSet = false;
}

std::shared_ptr<ConfigNodePropertyString> OrgApacheSlingDistributionAgentImplQueueDistributionAgentFactoryProperties::getRequestAuthorizationStrategyTarget() const
{
    return m_RequestAuthorizationStrategy_target;
}


void OrgApacheSlingDistributionAgentImplQueueDistributionAgentFactoryProperties::setRequestAuthorizationStrategyTarget(std::shared_ptr<ConfigNodePropertyString> value)
{
    m_RequestAuthorizationStrategy_target = value;
    m_RequestAuthorizationStrategy_targetIsSet = true;
}
bool OrgApacheSlingDistributionAgentImplQueueDistributionAgentFactoryProperties::requestAuthorizationStrategyTargetIsSet() const
{
    return m_RequestAuthorizationStrategy_targetIsSet;
}

void OrgApacheSlingDistributionAgentImplQueueDistributionAgentFactoryProperties::unsetRequestAuthorizationStrategy_target()
{
    m_RequestAuthorizationStrategy_targetIsSet = false;
}

std::shared_ptr<ConfigNodePropertyString> OrgApacheSlingDistributionAgentImplQueueDistributionAgentFactoryProperties::getQueueProviderFactoryTarget() const
{
    return m_QueueProviderFactory_target;
}


void OrgApacheSlingDistributionAgentImplQueueDistributionAgentFactoryProperties::setQueueProviderFactoryTarget(std::shared_ptr<ConfigNodePropertyString> value)
{
    m_QueueProviderFactory_target = value;
    m_QueueProviderFactory_targetIsSet = true;
}
bool OrgApacheSlingDistributionAgentImplQueueDistributionAgentFactoryProperties::queueProviderFactoryTargetIsSet() const
{
    return m_QueueProviderFactory_targetIsSet;
}

void OrgApacheSlingDistributionAgentImplQueueDistributionAgentFactoryProperties::unsetQueueProviderFactory_target()
{
    m_QueueProviderFactory_targetIsSet = false;
}

std::shared_ptr<ConfigNodePropertyString> OrgApacheSlingDistributionAgentImplQueueDistributionAgentFactoryProperties::getPackageBuilderTarget() const
{
    return m_PackageBuilder_target;
}


void OrgApacheSlingDistributionAgentImplQueueDistributionAgentFactoryProperties::setPackageBuilderTarget(std::shared_ptr<ConfigNodePropertyString> value)
{
    m_PackageBuilder_target = value;
    m_PackageBuilder_targetIsSet = true;
}
bool OrgApacheSlingDistributionAgentImplQueueDistributionAgentFactoryProperties::packageBuilderTargetIsSet() const
{
    return m_PackageBuilder_targetIsSet;
}

void OrgApacheSlingDistributionAgentImplQueueDistributionAgentFactoryProperties::unsetPackageBuilder_target()
{
    m_PackageBuilder_targetIsSet = false;
}

std::shared_ptr<ConfigNodePropertyString> OrgApacheSlingDistributionAgentImplQueueDistributionAgentFactoryProperties::getTriggersTarget() const
{
    return m_Triggers_target;
}


void OrgApacheSlingDistributionAgentImplQueueDistributionAgentFactoryProperties::setTriggersTarget(std::shared_ptr<ConfigNodePropertyString> value)
{
    m_Triggers_target = value;
    m_Triggers_targetIsSet = true;
}
bool OrgApacheSlingDistributionAgentImplQueueDistributionAgentFactoryProperties::triggersTargetIsSet() const
{
    return m_Triggers_targetIsSet;
}

void OrgApacheSlingDistributionAgentImplQueueDistributionAgentFactoryProperties::unsetTriggers_target()
{
    m_Triggers_targetIsSet = false;
}

std::shared_ptr<ConfigNodePropertyArray> OrgApacheSlingDistributionAgentImplQueueDistributionAgentFactoryProperties::getPriorityQueues() const
{
    return m_PriorityQueues;
}


void OrgApacheSlingDistributionAgentImplQueueDistributionAgentFactoryProperties::setPriorityQueues(std::shared_ptr<ConfigNodePropertyArray> value)
{
    m_PriorityQueues = value;
    m_PriorityQueuesIsSet = true;
}
bool OrgApacheSlingDistributionAgentImplQueueDistributionAgentFactoryProperties::priorityQueuesIsSet() const
{
    return m_PriorityQueuesIsSet;
}

void OrgApacheSlingDistributionAgentImplQueueDistributionAgentFactoryProperties::unsetPriorityQueues()
{
    m_PriorityQueuesIsSet = false;
}

}
}
}
}

