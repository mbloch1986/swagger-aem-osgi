/* 
 * Adobe Experience Manager OSGI config (AEM) API
 *
 * Swagger AEM OSGI is an OpenAPI specification for Adobe Experience Manager (AEM) OSGI Configurations API
 *
 * OpenAPI spec version: 1.0.0-pre.0
 * Contact: opensource@shinesolutions.com
 * Generated by: https://openapi-generator.tech
 */


#[allow(unused_imports)]
use serde_json::Value;

#[derive(Debug, Serialize, Deserialize)]
pub struct ComDayCqWcmDesignimporterImplEntryPreprocessorImplProperties {
  #[serde(rename = "search.pattern")]
  search_pattern: Option<::models::ConfigNodePropertyString>,
  #[serde(rename = "replace.pattern")]
  replace_pattern: Option<::models::ConfigNodePropertyString>
}

impl ComDayCqWcmDesignimporterImplEntryPreprocessorImplProperties {
  pub fn new() -> ComDayCqWcmDesignimporterImplEntryPreprocessorImplProperties {
    ComDayCqWcmDesignimporterImplEntryPreprocessorImplProperties {
      search_pattern: None,
      replace_pattern: None
    }
  }

  pub fn set_search_pattern(&mut self, search_pattern: ::models::ConfigNodePropertyString) {
    self.search_pattern = Some(search_pattern);
  }

  pub fn with_search_pattern(mut self, search_pattern: ::models::ConfigNodePropertyString) -> ComDayCqWcmDesignimporterImplEntryPreprocessorImplProperties {
    self.search_pattern = Some(search_pattern);
    self
  }

  pub fn search_pattern(&self) -> Option<&::models::ConfigNodePropertyString> {
    self.search_pattern.as_ref()
  }

  pub fn reset_search_pattern(&mut self) {
    self.search_pattern = None;
  }

  pub fn set_replace_pattern(&mut self, replace_pattern: ::models::ConfigNodePropertyString) {
    self.replace_pattern = Some(replace_pattern);
  }

  pub fn with_replace_pattern(mut self, replace_pattern: ::models::ConfigNodePropertyString) -> ComDayCqWcmDesignimporterImplEntryPreprocessorImplProperties {
    self.replace_pattern = Some(replace_pattern);
    self
  }

  pub fn replace_pattern(&self) -> Option<&::models::ConfigNodePropertyString> {
    self.replace_pattern.as_ref()
  }

  pub fn reset_replace_pattern(&mut self) {
    self.replace_pattern = None;
  }

}



