/**
 * Adobe Experience Manager OSGI config (AEM) API
 * Swagger AEM OSGI is an OpenAPI specification for Adobe Experience Manager (AEM) OSGI Configurations API
 *
 * OpenAPI spec version: 1.0.0-pre.0
 * Contact: opensource@shinesolutions.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * OAIComAdobeGraniteAuthOauthAccesstokenProviderProperties.h
 *
 * 
 */

#ifndef OAIComAdobeGraniteAuthOauthAccesstokenProviderProperties_H
#define OAIComAdobeGraniteAuthOauthAccesstokenProviderProperties_H

#include <QJsonObject>


#include "OAIConfigNodePropertyArray.h"
#include "OAIConfigNodePropertyBoolean.h"
#include "OAIConfigNodePropertyInteger.h"
#include "OAIConfigNodePropertyString.h"

#include "OAIObject.h"

namespace OpenAPI {

class OAIComAdobeGraniteAuthOauthAccesstokenProviderProperties: public OAIObject {
public:
    OAIComAdobeGraniteAuthOauthAccesstokenProviderProperties();
    OAIComAdobeGraniteAuthOauthAccesstokenProviderProperties(QString json);
    ~OAIComAdobeGraniteAuthOauthAccesstokenProviderProperties() override;
    void init();

    QString asJson () const override;
    QJsonObject asJsonObject() const override;
    void fromJsonObject(QJsonObject json) override;
    void fromJson(QString jsonString) override;

    OAIConfigNodePropertyString getName() const;
    void setName(const OAIConfigNodePropertyString &name);

    OAIConfigNodePropertyString getAuthTokenProviderTitle() const;
    void setAuthTokenProviderTitle(const OAIConfigNodePropertyString &auth_token_provider_title);

    OAIConfigNodePropertyArray getAuthTokenProviderDefaultClaims() const;
    void setAuthTokenProviderDefaultClaims(const OAIConfigNodePropertyArray &auth_token_provider_default_claims);

    OAIConfigNodePropertyString getAuthTokenProviderEndpoint() const;
    void setAuthTokenProviderEndpoint(const OAIConfigNodePropertyString &auth_token_provider_endpoint);

    OAIConfigNodePropertyString getAuthAccessTokenRequest() const;
    void setAuthAccessTokenRequest(const OAIConfigNodePropertyString &auth_access_token_request);

    OAIConfigNodePropertyString getAuthTokenProviderKeypairAlias() const;
    void setAuthTokenProviderKeypairAlias(const OAIConfigNodePropertyString &auth_token_provider_keypair_alias);

    OAIConfigNodePropertyInteger getAuthTokenProviderConnTimeout() const;
    void setAuthTokenProviderConnTimeout(const OAIConfigNodePropertyInteger &auth_token_provider_conn_timeout);

    OAIConfigNodePropertyInteger getAuthTokenProviderSoTimeout() const;
    void setAuthTokenProviderSoTimeout(const OAIConfigNodePropertyInteger &auth_token_provider_so_timeout);

    OAIConfigNodePropertyString getAuthTokenProviderClientId() const;
    void setAuthTokenProviderClientId(const OAIConfigNodePropertyString &auth_token_provider_client_id);

    OAIConfigNodePropertyString getAuthTokenProviderScope() const;
    void setAuthTokenProviderScope(const OAIConfigNodePropertyString &auth_token_provider_scope);

    OAIConfigNodePropertyBoolean getAuthTokenProviderReuseAccessToken() const;
    void setAuthTokenProviderReuseAccessToken(const OAIConfigNodePropertyBoolean &auth_token_provider_reuse_access_token);

    OAIConfigNodePropertyBoolean getAuthTokenProviderRelaxedSsl() const;
    void setAuthTokenProviderRelaxedSsl(const OAIConfigNodePropertyBoolean &auth_token_provider_relaxed_ssl);

    OAIConfigNodePropertyString getTokenRequestCustomizerType() const;
    void setTokenRequestCustomizerType(const OAIConfigNodePropertyString &token_request_customizer_type);

    OAIConfigNodePropertyString getAuthTokenValidatorType() const;
    void setAuthTokenValidatorType(const OAIConfigNodePropertyString &auth_token_validator_type);

    virtual bool isSet() const override;

private:
    OAIConfigNodePropertyString name;
    bool m_name_isSet;

    OAIConfigNodePropertyString auth_token_provider_title;
    bool m_auth_token_provider_title_isSet;

    OAIConfigNodePropertyArray auth_token_provider_default_claims;
    bool m_auth_token_provider_default_claims_isSet;

    OAIConfigNodePropertyString auth_token_provider_endpoint;
    bool m_auth_token_provider_endpoint_isSet;

    OAIConfigNodePropertyString auth_access_token_request;
    bool m_auth_access_token_request_isSet;

    OAIConfigNodePropertyString auth_token_provider_keypair_alias;
    bool m_auth_token_provider_keypair_alias_isSet;

    OAIConfigNodePropertyInteger auth_token_provider_conn_timeout;
    bool m_auth_token_provider_conn_timeout_isSet;

    OAIConfigNodePropertyInteger auth_token_provider_so_timeout;
    bool m_auth_token_provider_so_timeout_isSet;

    OAIConfigNodePropertyString auth_token_provider_client_id;
    bool m_auth_token_provider_client_id_isSet;

    OAIConfigNodePropertyString auth_token_provider_scope;
    bool m_auth_token_provider_scope_isSet;

    OAIConfigNodePropertyBoolean auth_token_provider_reuse_access_token;
    bool m_auth_token_provider_reuse_access_token_isSet;

    OAIConfigNodePropertyBoolean auth_token_provider_relaxed_ssl;
    bool m_auth_token_provider_relaxed_ssl_isSet;

    OAIConfigNodePropertyString token_request_customizer_type;
    bool m_token_request_customizer_type_isSet;

    OAIConfigNodePropertyString auth_token_validator_type;
    bool m_auth_token_validator_type_isSet;

};

}

#endif // OAIComAdobeGraniteAuthOauthAccesstokenProviderProperties_H
