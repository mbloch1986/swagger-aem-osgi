/* 
 * Adobe Experience Manager OSGI config (AEM) API
 *
 * Swagger AEM OSGI is an OpenAPI specification for Adobe Experience Manager (AEM) OSGI Configurations API
 *
 * OpenAPI spec version: 1.0.0-pre.0
 * Contact: opensource@shinesolutions.com
 * Generated by: https://openapi-generator.tech
 */


#[allow(unused_imports)]
use serde_json::Value;

#[derive(Debug, Serialize, Deserialize)]
pub struct ComDayCqDamCommonsMetadataXmpFilterBlackWhiteProperties {
  #[serde(rename = "xmp.filter.apply_whitelist")]
  xmp_filter_apply_whitelist: Option<::models::ConfigNodePropertyBoolean>,
  #[serde(rename = "xmp.filter.whitelist")]
  xmp_filter_whitelist: Option<::models::ConfigNodePropertyArray>,
  #[serde(rename = "xmp.filter.apply_blacklist")]
  xmp_filter_apply_blacklist: Option<::models::ConfigNodePropertyBoolean>,
  #[serde(rename = "xmp.filter.blacklist")]
  xmp_filter_blacklist: Option<::models::ConfigNodePropertyArray>
}

impl ComDayCqDamCommonsMetadataXmpFilterBlackWhiteProperties {
  pub fn new() -> ComDayCqDamCommonsMetadataXmpFilterBlackWhiteProperties {
    ComDayCqDamCommonsMetadataXmpFilterBlackWhiteProperties {
      xmp_filter_apply_whitelist: None,
      xmp_filter_whitelist: None,
      xmp_filter_apply_blacklist: None,
      xmp_filter_blacklist: None
    }
  }

  pub fn set_xmp_filter_apply_whitelist(&mut self, xmp_filter_apply_whitelist: ::models::ConfigNodePropertyBoolean) {
    self.xmp_filter_apply_whitelist = Some(xmp_filter_apply_whitelist);
  }

  pub fn with_xmp_filter_apply_whitelist(mut self, xmp_filter_apply_whitelist: ::models::ConfigNodePropertyBoolean) -> ComDayCqDamCommonsMetadataXmpFilterBlackWhiteProperties {
    self.xmp_filter_apply_whitelist = Some(xmp_filter_apply_whitelist);
    self
  }

  pub fn xmp_filter_apply_whitelist(&self) -> Option<&::models::ConfigNodePropertyBoolean> {
    self.xmp_filter_apply_whitelist.as_ref()
  }

  pub fn reset_xmp_filter_apply_whitelist(&mut self) {
    self.xmp_filter_apply_whitelist = None;
  }

  pub fn set_xmp_filter_whitelist(&mut self, xmp_filter_whitelist: ::models::ConfigNodePropertyArray) {
    self.xmp_filter_whitelist = Some(xmp_filter_whitelist);
  }

  pub fn with_xmp_filter_whitelist(mut self, xmp_filter_whitelist: ::models::ConfigNodePropertyArray) -> ComDayCqDamCommonsMetadataXmpFilterBlackWhiteProperties {
    self.xmp_filter_whitelist = Some(xmp_filter_whitelist);
    self
  }

  pub fn xmp_filter_whitelist(&self) -> Option<&::models::ConfigNodePropertyArray> {
    self.xmp_filter_whitelist.as_ref()
  }

  pub fn reset_xmp_filter_whitelist(&mut self) {
    self.xmp_filter_whitelist = None;
  }

  pub fn set_xmp_filter_apply_blacklist(&mut self, xmp_filter_apply_blacklist: ::models::ConfigNodePropertyBoolean) {
    self.xmp_filter_apply_blacklist = Some(xmp_filter_apply_blacklist);
  }

  pub fn with_xmp_filter_apply_blacklist(mut self, xmp_filter_apply_blacklist: ::models::ConfigNodePropertyBoolean) -> ComDayCqDamCommonsMetadataXmpFilterBlackWhiteProperties {
    self.xmp_filter_apply_blacklist = Some(xmp_filter_apply_blacklist);
    self
  }

  pub fn xmp_filter_apply_blacklist(&self) -> Option<&::models::ConfigNodePropertyBoolean> {
    self.xmp_filter_apply_blacklist.as_ref()
  }

  pub fn reset_xmp_filter_apply_blacklist(&mut self) {
    self.xmp_filter_apply_blacklist = None;
  }

  pub fn set_xmp_filter_blacklist(&mut self, xmp_filter_blacklist: ::models::ConfigNodePropertyArray) {
    self.xmp_filter_blacklist = Some(xmp_filter_blacklist);
  }

  pub fn with_xmp_filter_blacklist(mut self, xmp_filter_blacklist: ::models::ConfigNodePropertyArray) -> ComDayCqDamCommonsMetadataXmpFilterBlackWhiteProperties {
    self.xmp_filter_blacklist = Some(xmp_filter_blacklist);
    self
  }

  pub fn xmp_filter_blacklist(&self) -> Option<&::models::ConfigNodePropertyArray> {
    self.xmp_filter_blacklist.as_ref()
  }

  pub fn reset_xmp_filter_blacklist(&mut self) {
    self.xmp_filter_blacklist = None;
  }

}



