/*
 * Adobe Experience Manager OSGI config (AEM) API
 *
 * Swagger AEM OSGI is an OpenAPI specification for Adobe Experience Manager (AEM) OSGI Configurations API
 *
 * OpenAPI spec version: 1.0.0-pre.0
 * Contact: opensource@shinesolutions.com
 * Generated by: https://openapi-generator.tech
 */

using System;
using System.Linq;
using System.Text;
using System.Collections.Generic;
using System.ComponentModel.DataAnnotations;
using System.Runtime.Serialization;
using Newtonsoft.Json;

namespace Org.OpenAPITools.Models
{ 
    /// <summary>
    /// 
    /// </summary>
    [DataContract]
    public partial class OrgApacheSlingDiscoveryOakConfigProperties : IEquatable<OrgApacheSlingDiscoveryOakConfigProperties>
    { 
        /// <summary>
        /// Gets or Sets ConnectorPingTimeout
        /// </summary>
        [DataMember(Name="connectorPingTimeout")]
        public ConfigNodePropertyInteger ConnectorPingTimeout { get; set; }

        /// <summary>
        /// Gets or Sets ConnectorPingInterval
        /// </summary>
        [DataMember(Name="connectorPingInterval")]
        public ConfigNodePropertyInteger ConnectorPingInterval { get; set; }

        /// <summary>
        /// Gets or Sets DiscoveryLiteCheckInterval
        /// </summary>
        [DataMember(Name="discoveryLiteCheckInterval")]
        public ConfigNodePropertyInteger DiscoveryLiteCheckInterval { get; set; }

        /// <summary>
        /// Gets or Sets ClusterSyncServiceTimeout
        /// </summary>
        [DataMember(Name="clusterSyncServiceTimeout")]
        public ConfigNodePropertyInteger ClusterSyncServiceTimeout { get; set; }

        /// <summary>
        /// Gets or Sets ClusterSyncServiceInterval
        /// </summary>
        [DataMember(Name="clusterSyncServiceInterval")]
        public ConfigNodePropertyInteger ClusterSyncServiceInterval { get; set; }

        /// <summary>
        /// Gets or Sets EnableSyncToken
        /// </summary>
        [DataMember(Name="enableSyncToken")]
        public ConfigNodePropertyBoolean EnableSyncToken { get; set; }

        /// <summary>
        /// Gets or Sets MinEventDelay
        /// </summary>
        [DataMember(Name="minEventDelay")]
        public ConfigNodePropertyInteger MinEventDelay { get; set; }

        /// <summary>
        /// Gets or Sets SocketConnectTimeout
        /// </summary>
        [DataMember(Name="socketConnectTimeout")]
        public ConfigNodePropertyInteger SocketConnectTimeout { get; set; }

        /// <summary>
        /// Gets or Sets SoTimeout
        /// </summary>
        [DataMember(Name="soTimeout")]
        public ConfigNodePropertyInteger SoTimeout { get; set; }

        /// <summary>
        /// Gets or Sets TopologyConnectorUrls
        /// </summary>
        [DataMember(Name="topologyConnectorUrls")]
        public ConfigNodePropertyArray TopologyConnectorUrls { get; set; }

        /// <summary>
        /// Gets or Sets TopologyConnectorWhitelist
        /// </summary>
        [DataMember(Name="topologyConnectorWhitelist")]
        public ConfigNodePropertyArray TopologyConnectorWhitelist { get; set; }

        /// <summary>
        /// Gets or Sets AutoStopLocalLoopEnabled
        /// </summary>
        [DataMember(Name="autoStopLocalLoopEnabled")]
        public ConfigNodePropertyBoolean AutoStopLocalLoopEnabled { get; set; }

        /// <summary>
        /// Gets or Sets GzipConnectorRequestsEnabled
        /// </summary>
        [DataMember(Name="gzipConnectorRequestsEnabled")]
        public ConfigNodePropertyBoolean GzipConnectorRequestsEnabled { get; set; }

        /// <summary>
        /// Gets or Sets HmacEnabled
        /// </summary>
        [DataMember(Name="hmacEnabled")]
        public ConfigNodePropertyBoolean HmacEnabled { get; set; }

        /// <summary>
        /// Gets or Sets EnableEncryption
        /// </summary>
        [DataMember(Name="enableEncryption")]
        public ConfigNodePropertyBoolean EnableEncryption { get; set; }

        /// <summary>
        /// Gets or Sets SharedKey
        /// </summary>
        [DataMember(Name="sharedKey")]
        public ConfigNodePropertyString SharedKey { get; set; }

        /// <summary>
        /// Gets or Sets HmacSharedKeyTTL
        /// </summary>
        [DataMember(Name="hmacSharedKeyTTL")]
        public ConfigNodePropertyInteger HmacSharedKeyTTL { get; set; }

        /// <summary>
        /// Gets or Sets BackoffStandbyFactor
        /// </summary>
        [DataMember(Name="backoffStandbyFactor")]
        public ConfigNodePropertyString BackoffStandbyFactor { get; set; }

        /// <summary>
        /// Gets or Sets BackoffStableFactor
        /// </summary>
        [DataMember(Name="backoffStableFactor")]
        public ConfigNodePropertyString BackoffStableFactor { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class OrgApacheSlingDiscoveryOakConfigProperties {\n");
            sb.Append("  ConnectorPingTimeout: ").Append(ConnectorPingTimeout).Append("\n");
            sb.Append("  ConnectorPingInterval: ").Append(ConnectorPingInterval).Append("\n");
            sb.Append("  DiscoveryLiteCheckInterval: ").Append(DiscoveryLiteCheckInterval).Append("\n");
            sb.Append("  ClusterSyncServiceTimeout: ").Append(ClusterSyncServiceTimeout).Append("\n");
            sb.Append("  ClusterSyncServiceInterval: ").Append(ClusterSyncServiceInterval).Append("\n");
            sb.Append("  EnableSyncToken: ").Append(EnableSyncToken).Append("\n");
            sb.Append("  MinEventDelay: ").Append(MinEventDelay).Append("\n");
            sb.Append("  SocketConnectTimeout: ").Append(SocketConnectTimeout).Append("\n");
            sb.Append("  SoTimeout: ").Append(SoTimeout).Append("\n");
            sb.Append("  TopologyConnectorUrls: ").Append(TopologyConnectorUrls).Append("\n");
            sb.Append("  TopologyConnectorWhitelist: ").Append(TopologyConnectorWhitelist).Append("\n");
            sb.Append("  AutoStopLocalLoopEnabled: ").Append(AutoStopLocalLoopEnabled).Append("\n");
            sb.Append("  GzipConnectorRequestsEnabled: ").Append(GzipConnectorRequestsEnabled).Append("\n");
            sb.Append("  HmacEnabled: ").Append(HmacEnabled).Append("\n");
            sb.Append("  EnableEncryption: ").Append(EnableEncryption).Append("\n");
            sb.Append("  SharedKey: ").Append(SharedKey).Append("\n");
            sb.Append("  HmacSharedKeyTTL: ").Append(HmacSharedKeyTTL).Append("\n");
            sb.Append("  BackoffStandbyFactor: ").Append(BackoffStandbyFactor).Append("\n");
            sb.Append("  BackoffStableFactor: ").Append(BackoffStableFactor).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            if (obj is null) return false;
            if (ReferenceEquals(this, obj)) return true;
            return obj.GetType() == GetType() && Equals((OrgApacheSlingDiscoveryOakConfigProperties)obj);
        }

        /// <summary>
        /// Returns true if OrgApacheSlingDiscoveryOakConfigProperties instances are equal
        /// </summary>
        /// <param name="other">Instance of OrgApacheSlingDiscoveryOakConfigProperties to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(OrgApacheSlingDiscoveryOakConfigProperties other)
        {
            if (other is null) return false;
            if (ReferenceEquals(this, other)) return true;

            return 
                (
                    ConnectorPingTimeout == other.ConnectorPingTimeout ||
                    ConnectorPingTimeout != null &&
                    ConnectorPingTimeout.Equals(other.ConnectorPingTimeout)
                ) && 
                (
                    ConnectorPingInterval == other.ConnectorPingInterval ||
                    ConnectorPingInterval != null &&
                    ConnectorPingInterval.Equals(other.ConnectorPingInterval)
                ) && 
                (
                    DiscoveryLiteCheckInterval == other.DiscoveryLiteCheckInterval ||
                    DiscoveryLiteCheckInterval != null &&
                    DiscoveryLiteCheckInterval.Equals(other.DiscoveryLiteCheckInterval)
                ) && 
                (
                    ClusterSyncServiceTimeout == other.ClusterSyncServiceTimeout ||
                    ClusterSyncServiceTimeout != null &&
                    ClusterSyncServiceTimeout.Equals(other.ClusterSyncServiceTimeout)
                ) && 
                (
                    ClusterSyncServiceInterval == other.ClusterSyncServiceInterval ||
                    ClusterSyncServiceInterval != null &&
                    ClusterSyncServiceInterval.Equals(other.ClusterSyncServiceInterval)
                ) && 
                (
                    EnableSyncToken == other.EnableSyncToken ||
                    EnableSyncToken != null &&
                    EnableSyncToken.Equals(other.EnableSyncToken)
                ) && 
                (
                    MinEventDelay == other.MinEventDelay ||
                    MinEventDelay != null &&
                    MinEventDelay.Equals(other.MinEventDelay)
                ) && 
                (
                    SocketConnectTimeout == other.SocketConnectTimeout ||
                    SocketConnectTimeout != null &&
                    SocketConnectTimeout.Equals(other.SocketConnectTimeout)
                ) && 
                (
                    SoTimeout == other.SoTimeout ||
                    SoTimeout != null &&
                    SoTimeout.Equals(other.SoTimeout)
                ) && 
                (
                    TopologyConnectorUrls == other.TopologyConnectorUrls ||
                    TopologyConnectorUrls != null &&
                    TopologyConnectorUrls.Equals(other.TopologyConnectorUrls)
                ) && 
                (
                    TopologyConnectorWhitelist == other.TopologyConnectorWhitelist ||
                    TopologyConnectorWhitelist != null &&
                    TopologyConnectorWhitelist.Equals(other.TopologyConnectorWhitelist)
                ) && 
                (
                    AutoStopLocalLoopEnabled == other.AutoStopLocalLoopEnabled ||
                    AutoStopLocalLoopEnabled != null &&
                    AutoStopLocalLoopEnabled.Equals(other.AutoStopLocalLoopEnabled)
                ) && 
                (
                    GzipConnectorRequestsEnabled == other.GzipConnectorRequestsEnabled ||
                    GzipConnectorRequestsEnabled != null &&
                    GzipConnectorRequestsEnabled.Equals(other.GzipConnectorRequestsEnabled)
                ) && 
                (
                    HmacEnabled == other.HmacEnabled ||
                    HmacEnabled != null &&
                    HmacEnabled.Equals(other.HmacEnabled)
                ) && 
                (
                    EnableEncryption == other.EnableEncryption ||
                    EnableEncryption != null &&
                    EnableEncryption.Equals(other.EnableEncryption)
                ) && 
                (
                    SharedKey == other.SharedKey ||
                    SharedKey != null &&
                    SharedKey.Equals(other.SharedKey)
                ) && 
                (
                    HmacSharedKeyTTL == other.HmacSharedKeyTTL ||
                    HmacSharedKeyTTL != null &&
                    HmacSharedKeyTTL.Equals(other.HmacSharedKeyTTL)
                ) && 
                (
                    BackoffStandbyFactor == other.BackoffStandbyFactor ||
                    BackoffStandbyFactor != null &&
                    BackoffStandbyFactor.Equals(other.BackoffStandbyFactor)
                ) && 
                (
                    BackoffStableFactor == other.BackoffStableFactor ||
                    BackoffStableFactor != null &&
                    BackoffStableFactor.Equals(other.BackoffStableFactor)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                var hashCode = 41;
                // Suitable nullity checks etc, of course :)
                    if (ConnectorPingTimeout != null)
                    hashCode = hashCode * 59 + ConnectorPingTimeout.GetHashCode();
                    if (ConnectorPingInterval != null)
                    hashCode = hashCode * 59 + ConnectorPingInterval.GetHashCode();
                    if (DiscoveryLiteCheckInterval != null)
                    hashCode = hashCode * 59 + DiscoveryLiteCheckInterval.GetHashCode();
                    if (ClusterSyncServiceTimeout != null)
                    hashCode = hashCode * 59 + ClusterSyncServiceTimeout.GetHashCode();
                    if (ClusterSyncServiceInterval != null)
                    hashCode = hashCode * 59 + ClusterSyncServiceInterval.GetHashCode();
                    if (EnableSyncToken != null)
                    hashCode = hashCode * 59 + EnableSyncToken.GetHashCode();
                    if (MinEventDelay != null)
                    hashCode = hashCode * 59 + MinEventDelay.GetHashCode();
                    if (SocketConnectTimeout != null)
                    hashCode = hashCode * 59 + SocketConnectTimeout.GetHashCode();
                    if (SoTimeout != null)
                    hashCode = hashCode * 59 + SoTimeout.GetHashCode();
                    if (TopologyConnectorUrls != null)
                    hashCode = hashCode * 59 + TopologyConnectorUrls.GetHashCode();
                    if (TopologyConnectorWhitelist != null)
                    hashCode = hashCode * 59 + TopologyConnectorWhitelist.GetHashCode();
                    if (AutoStopLocalLoopEnabled != null)
                    hashCode = hashCode * 59 + AutoStopLocalLoopEnabled.GetHashCode();
                    if (GzipConnectorRequestsEnabled != null)
                    hashCode = hashCode * 59 + GzipConnectorRequestsEnabled.GetHashCode();
                    if (HmacEnabled != null)
                    hashCode = hashCode * 59 + HmacEnabled.GetHashCode();
                    if (EnableEncryption != null)
                    hashCode = hashCode * 59 + EnableEncryption.GetHashCode();
                    if (SharedKey != null)
                    hashCode = hashCode * 59 + SharedKey.GetHashCode();
                    if (HmacSharedKeyTTL != null)
                    hashCode = hashCode * 59 + HmacSharedKeyTTL.GetHashCode();
                    if (BackoffStandbyFactor != null)
                    hashCode = hashCode * 59 + BackoffStandbyFactor.GetHashCode();
                    if (BackoffStableFactor != null)
                    hashCode = hashCode * 59 + BackoffStableFactor.GetHashCode();
                return hashCode;
            }
        }

        #region Operators
        #pragma warning disable 1591

        public static bool operator ==(OrgApacheSlingDiscoveryOakConfigProperties left, OrgApacheSlingDiscoveryOakConfigProperties right)
        {
            return Equals(left, right);
        }

        public static bool operator !=(OrgApacheSlingDiscoveryOakConfigProperties left, OrgApacheSlingDiscoveryOakConfigProperties right)
        {
            return !Equals(left, right);
        }

        #pragma warning restore 1591
        #endregion Operators
    }
}
