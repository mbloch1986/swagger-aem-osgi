/*
 * Adobe Experience Manager OSGI config (AEM) API
 *
 * Swagger AEM OSGI is an OpenAPI specification for Adobe Experience Manager (AEM) OSGI Configurations API
 *
 * OpenAPI spec version: 1.0.0-pre.0
 * Contact: opensource@shinesolutions.com
 * Generated by: https://openapi-generator.tech
 */

using System;
using System.Linq;
using System.Text;
using System.Collections.Generic;
using System.ComponentModel.DataAnnotations;
using System.Runtime.Serialization;
using Newtonsoft.Json;

namespace Org.OpenAPITools.Models
{ 
    /// <summary>
    /// 
    /// </summary>
    [DataContract]
    public partial class ComDayCqWcmCoreImplLinkCheckerConfigurationFactoryImplProperties : IEquatable<ComDayCqWcmCoreImplLinkCheckerConfigurationFactoryImplProperties>
    { 
        /// <summary>
        /// Gets or Sets LinkExpiredPrefix
        /// </summary>
        [DataMember(Name="link.expired.prefix")]
        public ConfigNodePropertyString LinkExpiredPrefix { get; set; }

        /// <summary>
        /// Gets or Sets LinkExpiredRemove
        /// </summary>
        [DataMember(Name="link.expired.remove")]
        public ConfigNodePropertyBoolean LinkExpiredRemove { get; set; }

        /// <summary>
        /// Gets or Sets LinkExpiredSuffix
        /// </summary>
        [DataMember(Name="link.expired.suffix")]
        public ConfigNodePropertyString LinkExpiredSuffix { get; set; }

        /// <summary>
        /// Gets or Sets LinkInvalidPrefix
        /// </summary>
        [DataMember(Name="link.invalid.prefix")]
        public ConfigNodePropertyString LinkInvalidPrefix { get; set; }

        /// <summary>
        /// Gets or Sets LinkInvalidRemove
        /// </summary>
        [DataMember(Name="link.invalid.remove")]
        public ConfigNodePropertyBoolean LinkInvalidRemove { get; set; }

        /// <summary>
        /// Gets or Sets LinkInvalidSuffix
        /// </summary>
        [DataMember(Name="link.invalid.suffix")]
        public ConfigNodePropertyString LinkInvalidSuffix { get; set; }

        /// <summary>
        /// Gets or Sets LinkPredatedPrefix
        /// </summary>
        [DataMember(Name="link.predated.prefix")]
        public ConfigNodePropertyString LinkPredatedPrefix { get; set; }

        /// <summary>
        /// Gets or Sets LinkPredatedRemove
        /// </summary>
        [DataMember(Name="link.predated.remove")]
        public ConfigNodePropertyBoolean LinkPredatedRemove { get; set; }

        /// <summary>
        /// Gets or Sets LinkPredatedSuffix
        /// </summary>
        [DataMember(Name="link.predated.suffix")]
        public ConfigNodePropertyString LinkPredatedSuffix { get; set; }

        /// <summary>
        /// Gets or Sets LinkWcmmodes
        /// </summary>
        [DataMember(Name="link.wcmmodes")]
        public ConfigNodePropertyArray LinkWcmmodes { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class ComDayCqWcmCoreImplLinkCheckerConfigurationFactoryImplProperties {\n");
            sb.Append("  LinkExpiredPrefix: ").Append(LinkExpiredPrefix).Append("\n");
            sb.Append("  LinkExpiredRemove: ").Append(LinkExpiredRemove).Append("\n");
            sb.Append("  LinkExpiredSuffix: ").Append(LinkExpiredSuffix).Append("\n");
            sb.Append("  LinkInvalidPrefix: ").Append(LinkInvalidPrefix).Append("\n");
            sb.Append("  LinkInvalidRemove: ").Append(LinkInvalidRemove).Append("\n");
            sb.Append("  LinkInvalidSuffix: ").Append(LinkInvalidSuffix).Append("\n");
            sb.Append("  LinkPredatedPrefix: ").Append(LinkPredatedPrefix).Append("\n");
            sb.Append("  LinkPredatedRemove: ").Append(LinkPredatedRemove).Append("\n");
            sb.Append("  LinkPredatedSuffix: ").Append(LinkPredatedSuffix).Append("\n");
            sb.Append("  LinkWcmmodes: ").Append(LinkWcmmodes).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            if (obj is null) return false;
            if (ReferenceEquals(this, obj)) return true;
            return obj.GetType() == GetType() && Equals((ComDayCqWcmCoreImplLinkCheckerConfigurationFactoryImplProperties)obj);
        }

        /// <summary>
        /// Returns true if ComDayCqWcmCoreImplLinkCheckerConfigurationFactoryImplProperties instances are equal
        /// </summary>
        /// <param name="other">Instance of ComDayCqWcmCoreImplLinkCheckerConfigurationFactoryImplProperties to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(ComDayCqWcmCoreImplLinkCheckerConfigurationFactoryImplProperties other)
        {
            if (other is null) return false;
            if (ReferenceEquals(this, other)) return true;

            return 
                (
                    LinkExpiredPrefix == other.LinkExpiredPrefix ||
                    LinkExpiredPrefix != null &&
                    LinkExpiredPrefix.Equals(other.LinkExpiredPrefix)
                ) && 
                (
                    LinkExpiredRemove == other.LinkExpiredRemove ||
                    LinkExpiredRemove != null &&
                    LinkExpiredRemove.Equals(other.LinkExpiredRemove)
                ) && 
                (
                    LinkExpiredSuffix == other.LinkExpiredSuffix ||
                    LinkExpiredSuffix != null &&
                    LinkExpiredSuffix.Equals(other.LinkExpiredSuffix)
                ) && 
                (
                    LinkInvalidPrefix == other.LinkInvalidPrefix ||
                    LinkInvalidPrefix != null &&
                    LinkInvalidPrefix.Equals(other.LinkInvalidPrefix)
                ) && 
                (
                    LinkInvalidRemove == other.LinkInvalidRemove ||
                    LinkInvalidRemove != null &&
                    LinkInvalidRemove.Equals(other.LinkInvalidRemove)
                ) && 
                (
                    LinkInvalidSuffix == other.LinkInvalidSuffix ||
                    LinkInvalidSuffix != null &&
                    LinkInvalidSuffix.Equals(other.LinkInvalidSuffix)
                ) && 
                (
                    LinkPredatedPrefix == other.LinkPredatedPrefix ||
                    LinkPredatedPrefix != null &&
                    LinkPredatedPrefix.Equals(other.LinkPredatedPrefix)
                ) && 
                (
                    LinkPredatedRemove == other.LinkPredatedRemove ||
                    LinkPredatedRemove != null &&
                    LinkPredatedRemove.Equals(other.LinkPredatedRemove)
                ) && 
                (
                    LinkPredatedSuffix == other.LinkPredatedSuffix ||
                    LinkPredatedSuffix != null &&
                    LinkPredatedSuffix.Equals(other.LinkPredatedSuffix)
                ) && 
                (
                    LinkWcmmodes == other.LinkWcmmodes ||
                    LinkWcmmodes != null &&
                    LinkWcmmodes.Equals(other.LinkWcmmodes)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                var hashCode = 41;
                // Suitable nullity checks etc, of course :)
                    if (LinkExpiredPrefix != null)
                    hashCode = hashCode * 59 + LinkExpiredPrefix.GetHashCode();
                    if (LinkExpiredRemove != null)
                    hashCode = hashCode * 59 + LinkExpiredRemove.GetHashCode();
                    if (LinkExpiredSuffix != null)
                    hashCode = hashCode * 59 + LinkExpiredSuffix.GetHashCode();
                    if (LinkInvalidPrefix != null)
                    hashCode = hashCode * 59 + LinkInvalidPrefix.GetHashCode();
                    if (LinkInvalidRemove != null)
                    hashCode = hashCode * 59 + LinkInvalidRemove.GetHashCode();
                    if (LinkInvalidSuffix != null)
                    hashCode = hashCode * 59 + LinkInvalidSuffix.GetHashCode();
                    if (LinkPredatedPrefix != null)
                    hashCode = hashCode * 59 + LinkPredatedPrefix.GetHashCode();
                    if (LinkPredatedRemove != null)
                    hashCode = hashCode * 59 + LinkPredatedRemove.GetHashCode();
                    if (LinkPredatedSuffix != null)
                    hashCode = hashCode * 59 + LinkPredatedSuffix.GetHashCode();
                    if (LinkWcmmodes != null)
                    hashCode = hashCode * 59 + LinkWcmmodes.GetHashCode();
                return hashCode;
            }
        }

        #region Operators
        #pragma warning disable 1591

        public static bool operator ==(ComDayCqWcmCoreImplLinkCheckerConfigurationFactoryImplProperties left, ComDayCqWcmCoreImplLinkCheckerConfigurationFactoryImplProperties right)
        {
            return Equals(left, right);
        }

        public static bool operator !=(ComDayCqWcmCoreImplLinkCheckerConfigurationFactoryImplProperties left, ComDayCqWcmCoreImplLinkCheckerConfigurationFactoryImplProperties right)
        {
            return !Equals(left, right);
        }

        #pragma warning restore 1591
        #endregion Operators
    }
}
