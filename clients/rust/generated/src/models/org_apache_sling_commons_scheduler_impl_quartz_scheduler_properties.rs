/* 
 * Adobe Experience Manager OSGI config (AEM) API
 *
 * Swagger AEM OSGI is an OpenAPI specification for Adobe Experience Manager (AEM) OSGI Configurations API
 *
 * OpenAPI spec version: 1.0.0-pre.0
 * Contact: opensource@shinesolutions.com
 * Generated by: https://openapi-generator.tech
 */


#[allow(unused_imports)]
use serde_json::Value;

#[derive(Debug, Serialize, Deserialize)]
pub struct OrgApacheSlingCommonsSchedulerImplQuartzSchedulerProperties {
  #[serde(rename = "poolName")]
  pool_name: Option<::models::ConfigNodePropertyString>,
  #[serde(rename = "allowedPoolNames")]
  allowed_pool_names: Option<::models::ConfigNodePropertyArray>,
  #[serde(rename = "scheduler.useleaderforsingle")]
  scheduler_useleaderforsingle: Option<::models::ConfigNodePropertyBoolean>,
  #[serde(rename = "metrics.filters")]
  metrics_filters: Option<::models::ConfigNodePropertyArray>,
  #[serde(rename = "slowThresholdMillis")]
  slow_threshold_millis: Option<::models::ConfigNodePropertyInteger>
}

impl OrgApacheSlingCommonsSchedulerImplQuartzSchedulerProperties {
  pub fn new() -> OrgApacheSlingCommonsSchedulerImplQuartzSchedulerProperties {
    OrgApacheSlingCommonsSchedulerImplQuartzSchedulerProperties {
      pool_name: None,
      allowed_pool_names: None,
      scheduler_useleaderforsingle: None,
      metrics_filters: None,
      slow_threshold_millis: None
    }
  }

  pub fn set_pool_name(&mut self, pool_name: ::models::ConfigNodePropertyString) {
    self.pool_name = Some(pool_name);
  }

  pub fn with_pool_name(mut self, pool_name: ::models::ConfigNodePropertyString) -> OrgApacheSlingCommonsSchedulerImplQuartzSchedulerProperties {
    self.pool_name = Some(pool_name);
    self
  }

  pub fn pool_name(&self) -> Option<&::models::ConfigNodePropertyString> {
    self.pool_name.as_ref()
  }

  pub fn reset_pool_name(&mut self) {
    self.pool_name = None;
  }

  pub fn set_allowed_pool_names(&mut self, allowed_pool_names: ::models::ConfigNodePropertyArray) {
    self.allowed_pool_names = Some(allowed_pool_names);
  }

  pub fn with_allowed_pool_names(mut self, allowed_pool_names: ::models::ConfigNodePropertyArray) -> OrgApacheSlingCommonsSchedulerImplQuartzSchedulerProperties {
    self.allowed_pool_names = Some(allowed_pool_names);
    self
  }

  pub fn allowed_pool_names(&self) -> Option<&::models::ConfigNodePropertyArray> {
    self.allowed_pool_names.as_ref()
  }

  pub fn reset_allowed_pool_names(&mut self) {
    self.allowed_pool_names = None;
  }

  pub fn set_scheduler_useleaderforsingle(&mut self, scheduler_useleaderforsingle: ::models::ConfigNodePropertyBoolean) {
    self.scheduler_useleaderforsingle = Some(scheduler_useleaderforsingle);
  }

  pub fn with_scheduler_useleaderforsingle(mut self, scheduler_useleaderforsingle: ::models::ConfigNodePropertyBoolean) -> OrgApacheSlingCommonsSchedulerImplQuartzSchedulerProperties {
    self.scheduler_useleaderforsingle = Some(scheduler_useleaderforsingle);
    self
  }

  pub fn scheduler_useleaderforsingle(&self) -> Option<&::models::ConfigNodePropertyBoolean> {
    self.scheduler_useleaderforsingle.as_ref()
  }

  pub fn reset_scheduler_useleaderforsingle(&mut self) {
    self.scheduler_useleaderforsingle = None;
  }

  pub fn set_metrics_filters(&mut self, metrics_filters: ::models::ConfigNodePropertyArray) {
    self.metrics_filters = Some(metrics_filters);
  }

  pub fn with_metrics_filters(mut self, metrics_filters: ::models::ConfigNodePropertyArray) -> OrgApacheSlingCommonsSchedulerImplQuartzSchedulerProperties {
    self.metrics_filters = Some(metrics_filters);
    self
  }

  pub fn metrics_filters(&self) -> Option<&::models::ConfigNodePropertyArray> {
    self.metrics_filters.as_ref()
  }

  pub fn reset_metrics_filters(&mut self) {
    self.metrics_filters = None;
  }

  pub fn set_slow_threshold_millis(&mut self, slow_threshold_millis: ::models::ConfigNodePropertyInteger) {
    self.slow_threshold_millis = Some(slow_threshold_millis);
  }

  pub fn with_slow_threshold_millis(mut self, slow_threshold_millis: ::models::ConfigNodePropertyInteger) -> OrgApacheSlingCommonsSchedulerImplQuartzSchedulerProperties {
    self.slow_threshold_millis = Some(slow_threshold_millis);
    self
  }

  pub fn slow_threshold_millis(&self) -> Option<&::models::ConfigNodePropertyInteger> {
    self.slow_threshold_millis.as_ref()
  }

  pub fn reset_slow_threshold_millis(&mut self) {
    self.slow_threshold_millis = None;
  }

}



