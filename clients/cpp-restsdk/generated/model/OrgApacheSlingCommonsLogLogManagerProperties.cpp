/**
 * Adobe Experience Manager OSGI config (AEM) API
 * Swagger AEM OSGI is an OpenAPI specification for Adobe Experience Manager (AEM) OSGI Configurations API
 *
 * OpenAPI spec version: 1.0.0-pre.0
 * Contact: opensource@shinesolutions.com
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 3.2.1-SNAPSHOT.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */



#include "OrgApacheSlingCommonsLogLogManagerProperties.h"

namespace org {
namespace openapitools {
namespace client {
namespace model {

OrgApacheSlingCommonsLogLogManagerProperties::OrgApacheSlingCommonsLogLogManagerProperties()
{
    m_Org_apache_sling_commons_log_levelIsSet = false;
    m_Org_apache_sling_commons_log_fileIsSet = false;
    m_Org_apache_sling_commons_log_file_numberIsSet = false;
    m_Org_apache_sling_commons_log_file_sizeIsSet = false;
    m_Org_apache_sling_commons_log_patternIsSet = false;
    m_Org_apache_sling_commons_log_configurationFileIsSet = false;
    m_Org_apache_sling_commons_log_packagingDataEnabledIsSet = false;
    m_Org_apache_sling_commons_log_maxCallerDataDepthIsSet = false;
    m_Org_apache_sling_commons_log_maxOldFileCountInDumpIsSet = false;
    m_Org_apache_sling_commons_log_numOfLinesIsSet = false;
}

OrgApacheSlingCommonsLogLogManagerProperties::~OrgApacheSlingCommonsLogLogManagerProperties()
{
}

void OrgApacheSlingCommonsLogLogManagerProperties::validate()
{
    // TODO: implement validation
}

web::json::value OrgApacheSlingCommonsLogLogManagerProperties::toJson() const
{
    web::json::value val = web::json::value::object();

    if(m_Org_apache_sling_commons_log_levelIsSet)
    {
        val[utility::conversions::to_string_t("org.apache.sling.commons.log.level")] = ModelBase::toJson(m_Org_apache_sling_commons_log_level);
    }
    if(m_Org_apache_sling_commons_log_fileIsSet)
    {
        val[utility::conversions::to_string_t("org.apache.sling.commons.log.file")] = ModelBase::toJson(m_Org_apache_sling_commons_log_file);
    }
    if(m_Org_apache_sling_commons_log_file_numberIsSet)
    {
        val[utility::conversions::to_string_t("org.apache.sling.commons.log.file.number")] = ModelBase::toJson(m_Org_apache_sling_commons_log_file_number);
    }
    if(m_Org_apache_sling_commons_log_file_sizeIsSet)
    {
        val[utility::conversions::to_string_t("org.apache.sling.commons.log.file.size")] = ModelBase::toJson(m_Org_apache_sling_commons_log_file_size);
    }
    if(m_Org_apache_sling_commons_log_patternIsSet)
    {
        val[utility::conversions::to_string_t("org.apache.sling.commons.log.pattern")] = ModelBase::toJson(m_Org_apache_sling_commons_log_pattern);
    }
    if(m_Org_apache_sling_commons_log_configurationFileIsSet)
    {
        val[utility::conversions::to_string_t("org.apache.sling.commons.log.configurationFile")] = ModelBase::toJson(m_Org_apache_sling_commons_log_configurationFile);
    }
    if(m_Org_apache_sling_commons_log_packagingDataEnabledIsSet)
    {
        val[utility::conversions::to_string_t("org.apache.sling.commons.log.packagingDataEnabled")] = ModelBase::toJson(m_Org_apache_sling_commons_log_packagingDataEnabled);
    }
    if(m_Org_apache_sling_commons_log_maxCallerDataDepthIsSet)
    {
        val[utility::conversions::to_string_t("org.apache.sling.commons.log.maxCallerDataDepth")] = ModelBase::toJson(m_Org_apache_sling_commons_log_maxCallerDataDepth);
    }
    if(m_Org_apache_sling_commons_log_maxOldFileCountInDumpIsSet)
    {
        val[utility::conversions::to_string_t("org.apache.sling.commons.log.maxOldFileCountInDump")] = ModelBase::toJson(m_Org_apache_sling_commons_log_maxOldFileCountInDump);
    }
    if(m_Org_apache_sling_commons_log_numOfLinesIsSet)
    {
        val[utility::conversions::to_string_t("org.apache.sling.commons.log.numOfLines")] = ModelBase::toJson(m_Org_apache_sling_commons_log_numOfLines);
    }

    return val;
}

void OrgApacheSlingCommonsLogLogManagerProperties::fromJson(web::json::value& val)
{
    if(val.has_field(utility::conversions::to_string_t("org.apache.sling.commons.log.level")))
    {
        if(!val[utility::conversions::to_string_t("org.apache.sling.commons.log.level")].is_null())
        {
            std::shared_ptr<ConfigNodePropertyDropDown> newItem(new ConfigNodePropertyDropDown());
            newItem->fromJson(val[utility::conversions::to_string_t("org.apache.sling.commons.log.level")]);
            setOrgApacheSlingCommonsLogLevel( newItem );
        }
    }
    if(val.has_field(utility::conversions::to_string_t("org.apache.sling.commons.log.file")))
    {
        if(!val[utility::conversions::to_string_t("org.apache.sling.commons.log.file")].is_null())
        {
            std::shared_ptr<ConfigNodePropertyString> newItem(new ConfigNodePropertyString());
            newItem->fromJson(val[utility::conversions::to_string_t("org.apache.sling.commons.log.file")]);
            setOrgApacheSlingCommonsLogFile( newItem );
        }
    }
    if(val.has_field(utility::conversions::to_string_t("org.apache.sling.commons.log.file.number")))
    {
        if(!val[utility::conversions::to_string_t("org.apache.sling.commons.log.file.number")].is_null())
        {
            std::shared_ptr<ConfigNodePropertyInteger> newItem(new ConfigNodePropertyInteger());
            newItem->fromJson(val[utility::conversions::to_string_t("org.apache.sling.commons.log.file.number")]);
            setOrgApacheSlingCommonsLogFileNumber( newItem );
        }
    }
    if(val.has_field(utility::conversions::to_string_t("org.apache.sling.commons.log.file.size")))
    {
        if(!val[utility::conversions::to_string_t("org.apache.sling.commons.log.file.size")].is_null())
        {
            std::shared_ptr<ConfigNodePropertyString> newItem(new ConfigNodePropertyString());
            newItem->fromJson(val[utility::conversions::to_string_t("org.apache.sling.commons.log.file.size")]);
            setOrgApacheSlingCommonsLogFileSize( newItem );
        }
    }
    if(val.has_field(utility::conversions::to_string_t("org.apache.sling.commons.log.pattern")))
    {
        if(!val[utility::conversions::to_string_t("org.apache.sling.commons.log.pattern")].is_null())
        {
            std::shared_ptr<ConfigNodePropertyString> newItem(new ConfigNodePropertyString());
            newItem->fromJson(val[utility::conversions::to_string_t("org.apache.sling.commons.log.pattern")]);
            setOrgApacheSlingCommonsLogPattern( newItem );
        }
    }
    if(val.has_field(utility::conversions::to_string_t("org.apache.sling.commons.log.configurationFile")))
    {
        if(!val[utility::conversions::to_string_t("org.apache.sling.commons.log.configurationFile")].is_null())
        {
            std::shared_ptr<ConfigNodePropertyString> newItem(new ConfigNodePropertyString());
            newItem->fromJson(val[utility::conversions::to_string_t("org.apache.sling.commons.log.configurationFile")]);
            setOrgApacheSlingCommonsLogConfigurationFile( newItem );
        }
    }
    if(val.has_field(utility::conversions::to_string_t("org.apache.sling.commons.log.packagingDataEnabled")))
    {
        if(!val[utility::conversions::to_string_t("org.apache.sling.commons.log.packagingDataEnabled")].is_null())
        {
            std::shared_ptr<ConfigNodePropertyBoolean> newItem(new ConfigNodePropertyBoolean());
            newItem->fromJson(val[utility::conversions::to_string_t("org.apache.sling.commons.log.packagingDataEnabled")]);
            setOrgApacheSlingCommonsLogPackagingDataEnabled( newItem );
        }
    }
    if(val.has_field(utility::conversions::to_string_t("org.apache.sling.commons.log.maxCallerDataDepth")))
    {
        if(!val[utility::conversions::to_string_t("org.apache.sling.commons.log.maxCallerDataDepth")].is_null())
        {
            std::shared_ptr<ConfigNodePropertyInteger> newItem(new ConfigNodePropertyInteger());
            newItem->fromJson(val[utility::conversions::to_string_t("org.apache.sling.commons.log.maxCallerDataDepth")]);
            setOrgApacheSlingCommonsLogMaxCallerDataDepth( newItem );
        }
    }
    if(val.has_field(utility::conversions::to_string_t("org.apache.sling.commons.log.maxOldFileCountInDump")))
    {
        if(!val[utility::conversions::to_string_t("org.apache.sling.commons.log.maxOldFileCountInDump")].is_null())
        {
            std::shared_ptr<ConfigNodePropertyInteger> newItem(new ConfigNodePropertyInteger());
            newItem->fromJson(val[utility::conversions::to_string_t("org.apache.sling.commons.log.maxOldFileCountInDump")]);
            setOrgApacheSlingCommonsLogMaxOldFileCountInDump( newItem );
        }
    }
    if(val.has_field(utility::conversions::to_string_t("org.apache.sling.commons.log.numOfLines")))
    {
        if(!val[utility::conversions::to_string_t("org.apache.sling.commons.log.numOfLines")].is_null())
        {
            std::shared_ptr<ConfigNodePropertyInteger> newItem(new ConfigNodePropertyInteger());
            newItem->fromJson(val[utility::conversions::to_string_t("org.apache.sling.commons.log.numOfLines")]);
            setOrgApacheSlingCommonsLogNumOfLines( newItem );
        }
    }
}

void OrgApacheSlingCommonsLogLogManagerProperties::toMultipart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix) const
{
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t("."))
    {
        namePrefix += utility::conversions::to_string_t(".");
    }

    if(m_Org_apache_sling_commons_log_levelIsSet)
    {
        if (m_Org_apache_sling_commons_log_level.get())
        {
            m_Org_apache_sling_commons_log_level->toMultipart(multipart, utility::conversions::to_string_t("org.apache.sling.commons.log.level."));
        }
    }
    if(m_Org_apache_sling_commons_log_fileIsSet)
    {
        if (m_Org_apache_sling_commons_log_file.get())
        {
            m_Org_apache_sling_commons_log_file->toMultipart(multipart, utility::conversions::to_string_t("org.apache.sling.commons.log.file."));
        }
    }
    if(m_Org_apache_sling_commons_log_file_numberIsSet)
    {
        if (m_Org_apache_sling_commons_log_file_number.get())
        {
            m_Org_apache_sling_commons_log_file_number->toMultipart(multipart, utility::conversions::to_string_t("org.apache.sling.commons.log.file.number."));
        }
    }
    if(m_Org_apache_sling_commons_log_file_sizeIsSet)
    {
        if (m_Org_apache_sling_commons_log_file_size.get())
        {
            m_Org_apache_sling_commons_log_file_size->toMultipart(multipart, utility::conversions::to_string_t("org.apache.sling.commons.log.file.size."));
        }
    }
    if(m_Org_apache_sling_commons_log_patternIsSet)
    {
        if (m_Org_apache_sling_commons_log_pattern.get())
        {
            m_Org_apache_sling_commons_log_pattern->toMultipart(multipart, utility::conversions::to_string_t("org.apache.sling.commons.log.pattern."));
        }
    }
    if(m_Org_apache_sling_commons_log_configurationFileIsSet)
    {
        if (m_Org_apache_sling_commons_log_configurationFile.get())
        {
            m_Org_apache_sling_commons_log_configurationFile->toMultipart(multipart, utility::conversions::to_string_t("org.apache.sling.commons.log.configurationFile."));
        }
    }
    if(m_Org_apache_sling_commons_log_packagingDataEnabledIsSet)
    {
        if (m_Org_apache_sling_commons_log_packagingDataEnabled.get())
        {
            m_Org_apache_sling_commons_log_packagingDataEnabled->toMultipart(multipart, utility::conversions::to_string_t("org.apache.sling.commons.log.packagingDataEnabled."));
        }
    }
    if(m_Org_apache_sling_commons_log_maxCallerDataDepthIsSet)
    {
        if (m_Org_apache_sling_commons_log_maxCallerDataDepth.get())
        {
            m_Org_apache_sling_commons_log_maxCallerDataDepth->toMultipart(multipart, utility::conversions::to_string_t("org.apache.sling.commons.log.maxCallerDataDepth."));
        }
    }
    if(m_Org_apache_sling_commons_log_maxOldFileCountInDumpIsSet)
    {
        if (m_Org_apache_sling_commons_log_maxOldFileCountInDump.get())
        {
            m_Org_apache_sling_commons_log_maxOldFileCountInDump->toMultipart(multipart, utility::conversions::to_string_t("org.apache.sling.commons.log.maxOldFileCountInDump."));
        }
    }
    if(m_Org_apache_sling_commons_log_numOfLinesIsSet)
    {
        if (m_Org_apache_sling_commons_log_numOfLines.get())
        {
            m_Org_apache_sling_commons_log_numOfLines->toMultipart(multipart, utility::conversions::to_string_t("org.apache.sling.commons.log.numOfLines."));
        }
    }
}

void OrgApacheSlingCommonsLogLogManagerProperties::fromMultiPart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix)
{
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t("."))
    {
        namePrefix += utility::conversions::to_string_t(".");
    }

    if(multipart->hasContent(utility::conversions::to_string_t("org.apache.sling.commons.log.level")))
    {
        if(multipart->hasContent(utility::conversions::to_string_t("org.apache.sling.commons.log.level")))
        {
            std::shared_ptr<ConfigNodePropertyDropDown> newItem(new ConfigNodePropertyDropDown());
            newItem->fromMultiPart(multipart, utility::conversions::to_string_t("org.apache.sling.commons.log.level."));
            setOrgApacheSlingCommonsLogLevel( newItem );
        }
    }
    if(multipart->hasContent(utility::conversions::to_string_t("org.apache.sling.commons.log.file")))
    {
        if(multipart->hasContent(utility::conversions::to_string_t("org.apache.sling.commons.log.file")))
        {
            std::shared_ptr<ConfigNodePropertyString> newItem(new ConfigNodePropertyString());
            newItem->fromMultiPart(multipart, utility::conversions::to_string_t("org.apache.sling.commons.log.file."));
            setOrgApacheSlingCommonsLogFile( newItem );
        }
    }
    if(multipart->hasContent(utility::conversions::to_string_t("org.apache.sling.commons.log.file.number")))
    {
        if(multipart->hasContent(utility::conversions::to_string_t("org.apache.sling.commons.log.file.number")))
        {
            std::shared_ptr<ConfigNodePropertyInteger> newItem(new ConfigNodePropertyInteger());
            newItem->fromMultiPart(multipart, utility::conversions::to_string_t("org.apache.sling.commons.log.file.number."));
            setOrgApacheSlingCommonsLogFileNumber( newItem );
        }
    }
    if(multipart->hasContent(utility::conversions::to_string_t("org.apache.sling.commons.log.file.size")))
    {
        if(multipart->hasContent(utility::conversions::to_string_t("org.apache.sling.commons.log.file.size")))
        {
            std::shared_ptr<ConfigNodePropertyString> newItem(new ConfigNodePropertyString());
            newItem->fromMultiPart(multipart, utility::conversions::to_string_t("org.apache.sling.commons.log.file.size."));
            setOrgApacheSlingCommonsLogFileSize( newItem );
        }
    }
    if(multipart->hasContent(utility::conversions::to_string_t("org.apache.sling.commons.log.pattern")))
    {
        if(multipart->hasContent(utility::conversions::to_string_t("org.apache.sling.commons.log.pattern")))
        {
            std::shared_ptr<ConfigNodePropertyString> newItem(new ConfigNodePropertyString());
            newItem->fromMultiPart(multipart, utility::conversions::to_string_t("org.apache.sling.commons.log.pattern."));
            setOrgApacheSlingCommonsLogPattern( newItem );
        }
    }
    if(multipart->hasContent(utility::conversions::to_string_t("org.apache.sling.commons.log.configurationFile")))
    {
        if(multipart->hasContent(utility::conversions::to_string_t("org.apache.sling.commons.log.configurationFile")))
        {
            std::shared_ptr<ConfigNodePropertyString> newItem(new ConfigNodePropertyString());
            newItem->fromMultiPart(multipart, utility::conversions::to_string_t("org.apache.sling.commons.log.configurationFile."));
            setOrgApacheSlingCommonsLogConfigurationFile( newItem );
        }
    }
    if(multipart->hasContent(utility::conversions::to_string_t("org.apache.sling.commons.log.packagingDataEnabled")))
    {
        if(multipart->hasContent(utility::conversions::to_string_t("org.apache.sling.commons.log.packagingDataEnabled")))
        {
            std::shared_ptr<ConfigNodePropertyBoolean> newItem(new ConfigNodePropertyBoolean());
            newItem->fromMultiPart(multipart, utility::conversions::to_string_t("org.apache.sling.commons.log.packagingDataEnabled."));
            setOrgApacheSlingCommonsLogPackagingDataEnabled( newItem );
        }
    }
    if(multipart->hasContent(utility::conversions::to_string_t("org.apache.sling.commons.log.maxCallerDataDepth")))
    {
        if(multipart->hasContent(utility::conversions::to_string_t("org.apache.sling.commons.log.maxCallerDataDepth")))
        {
            std::shared_ptr<ConfigNodePropertyInteger> newItem(new ConfigNodePropertyInteger());
            newItem->fromMultiPart(multipart, utility::conversions::to_string_t("org.apache.sling.commons.log.maxCallerDataDepth."));
            setOrgApacheSlingCommonsLogMaxCallerDataDepth( newItem );
        }
    }
    if(multipart->hasContent(utility::conversions::to_string_t("org.apache.sling.commons.log.maxOldFileCountInDump")))
    {
        if(multipart->hasContent(utility::conversions::to_string_t("org.apache.sling.commons.log.maxOldFileCountInDump")))
        {
            std::shared_ptr<ConfigNodePropertyInteger> newItem(new ConfigNodePropertyInteger());
            newItem->fromMultiPart(multipart, utility::conversions::to_string_t("org.apache.sling.commons.log.maxOldFileCountInDump."));
            setOrgApacheSlingCommonsLogMaxOldFileCountInDump( newItem );
        }
    }
    if(multipart->hasContent(utility::conversions::to_string_t("org.apache.sling.commons.log.numOfLines")))
    {
        if(multipart->hasContent(utility::conversions::to_string_t("org.apache.sling.commons.log.numOfLines")))
        {
            std::shared_ptr<ConfigNodePropertyInteger> newItem(new ConfigNodePropertyInteger());
            newItem->fromMultiPart(multipart, utility::conversions::to_string_t("org.apache.sling.commons.log.numOfLines."));
            setOrgApacheSlingCommonsLogNumOfLines( newItem );
        }
    }
}

std::shared_ptr<ConfigNodePropertyDropDown> OrgApacheSlingCommonsLogLogManagerProperties::getOrgApacheSlingCommonsLogLevel() const
{
    return m_Org_apache_sling_commons_log_level;
}


void OrgApacheSlingCommonsLogLogManagerProperties::setOrgApacheSlingCommonsLogLevel(std::shared_ptr<ConfigNodePropertyDropDown> value)
{
    m_Org_apache_sling_commons_log_level = value;
    m_Org_apache_sling_commons_log_levelIsSet = true;
}
bool OrgApacheSlingCommonsLogLogManagerProperties::orgApacheSlingCommonsLogLevelIsSet() const
{
    return m_Org_apache_sling_commons_log_levelIsSet;
}

void OrgApacheSlingCommonsLogLogManagerProperties::unsetOrg_apache_sling_commons_log_level()
{
    m_Org_apache_sling_commons_log_levelIsSet = false;
}

std::shared_ptr<ConfigNodePropertyString> OrgApacheSlingCommonsLogLogManagerProperties::getOrgApacheSlingCommonsLogFile() const
{
    return m_Org_apache_sling_commons_log_file;
}


void OrgApacheSlingCommonsLogLogManagerProperties::setOrgApacheSlingCommonsLogFile(std::shared_ptr<ConfigNodePropertyString> value)
{
    m_Org_apache_sling_commons_log_file = value;
    m_Org_apache_sling_commons_log_fileIsSet = true;
}
bool OrgApacheSlingCommonsLogLogManagerProperties::orgApacheSlingCommonsLogFileIsSet() const
{
    return m_Org_apache_sling_commons_log_fileIsSet;
}

void OrgApacheSlingCommonsLogLogManagerProperties::unsetOrg_apache_sling_commons_log_file()
{
    m_Org_apache_sling_commons_log_fileIsSet = false;
}

std::shared_ptr<ConfigNodePropertyInteger> OrgApacheSlingCommonsLogLogManagerProperties::getOrgApacheSlingCommonsLogFileNumber() const
{
    return m_Org_apache_sling_commons_log_file_number;
}


void OrgApacheSlingCommonsLogLogManagerProperties::setOrgApacheSlingCommonsLogFileNumber(std::shared_ptr<ConfigNodePropertyInteger> value)
{
    m_Org_apache_sling_commons_log_file_number = value;
    m_Org_apache_sling_commons_log_file_numberIsSet = true;
}
bool OrgApacheSlingCommonsLogLogManagerProperties::orgApacheSlingCommonsLogFileNumberIsSet() const
{
    return m_Org_apache_sling_commons_log_file_numberIsSet;
}

void OrgApacheSlingCommonsLogLogManagerProperties::unsetOrg_apache_sling_commons_log_file_number()
{
    m_Org_apache_sling_commons_log_file_numberIsSet = false;
}

std::shared_ptr<ConfigNodePropertyString> OrgApacheSlingCommonsLogLogManagerProperties::getOrgApacheSlingCommonsLogFileSize() const
{
    return m_Org_apache_sling_commons_log_file_size;
}


void OrgApacheSlingCommonsLogLogManagerProperties::setOrgApacheSlingCommonsLogFileSize(std::shared_ptr<ConfigNodePropertyString> value)
{
    m_Org_apache_sling_commons_log_file_size = value;
    m_Org_apache_sling_commons_log_file_sizeIsSet = true;
}
bool OrgApacheSlingCommonsLogLogManagerProperties::orgApacheSlingCommonsLogFileSizeIsSet() const
{
    return m_Org_apache_sling_commons_log_file_sizeIsSet;
}

void OrgApacheSlingCommonsLogLogManagerProperties::unsetOrg_apache_sling_commons_log_file_size()
{
    m_Org_apache_sling_commons_log_file_sizeIsSet = false;
}

std::shared_ptr<ConfigNodePropertyString> OrgApacheSlingCommonsLogLogManagerProperties::getOrgApacheSlingCommonsLogPattern() const
{
    return m_Org_apache_sling_commons_log_pattern;
}


void OrgApacheSlingCommonsLogLogManagerProperties::setOrgApacheSlingCommonsLogPattern(std::shared_ptr<ConfigNodePropertyString> value)
{
    m_Org_apache_sling_commons_log_pattern = value;
    m_Org_apache_sling_commons_log_patternIsSet = true;
}
bool OrgApacheSlingCommonsLogLogManagerProperties::orgApacheSlingCommonsLogPatternIsSet() const
{
    return m_Org_apache_sling_commons_log_patternIsSet;
}

void OrgApacheSlingCommonsLogLogManagerProperties::unsetOrg_apache_sling_commons_log_pattern()
{
    m_Org_apache_sling_commons_log_patternIsSet = false;
}

std::shared_ptr<ConfigNodePropertyString> OrgApacheSlingCommonsLogLogManagerProperties::getOrgApacheSlingCommonsLogConfigurationFile() const
{
    return m_Org_apache_sling_commons_log_configurationFile;
}


void OrgApacheSlingCommonsLogLogManagerProperties::setOrgApacheSlingCommonsLogConfigurationFile(std::shared_ptr<ConfigNodePropertyString> value)
{
    m_Org_apache_sling_commons_log_configurationFile = value;
    m_Org_apache_sling_commons_log_configurationFileIsSet = true;
}
bool OrgApacheSlingCommonsLogLogManagerProperties::orgApacheSlingCommonsLogConfigurationFileIsSet() const
{
    return m_Org_apache_sling_commons_log_configurationFileIsSet;
}

void OrgApacheSlingCommonsLogLogManagerProperties::unsetOrg_apache_sling_commons_log_configurationFile()
{
    m_Org_apache_sling_commons_log_configurationFileIsSet = false;
}

std::shared_ptr<ConfigNodePropertyBoolean> OrgApacheSlingCommonsLogLogManagerProperties::getOrgApacheSlingCommonsLogPackagingDataEnabled() const
{
    return m_Org_apache_sling_commons_log_packagingDataEnabled;
}


void OrgApacheSlingCommonsLogLogManagerProperties::setOrgApacheSlingCommonsLogPackagingDataEnabled(std::shared_ptr<ConfigNodePropertyBoolean> value)
{
    m_Org_apache_sling_commons_log_packagingDataEnabled = value;
    m_Org_apache_sling_commons_log_packagingDataEnabledIsSet = true;
}
bool OrgApacheSlingCommonsLogLogManagerProperties::orgApacheSlingCommonsLogPackagingDataEnabledIsSet() const
{
    return m_Org_apache_sling_commons_log_packagingDataEnabledIsSet;
}

void OrgApacheSlingCommonsLogLogManagerProperties::unsetOrg_apache_sling_commons_log_packagingDataEnabled()
{
    m_Org_apache_sling_commons_log_packagingDataEnabledIsSet = false;
}

std::shared_ptr<ConfigNodePropertyInteger> OrgApacheSlingCommonsLogLogManagerProperties::getOrgApacheSlingCommonsLogMaxCallerDataDepth() const
{
    return m_Org_apache_sling_commons_log_maxCallerDataDepth;
}


void OrgApacheSlingCommonsLogLogManagerProperties::setOrgApacheSlingCommonsLogMaxCallerDataDepth(std::shared_ptr<ConfigNodePropertyInteger> value)
{
    m_Org_apache_sling_commons_log_maxCallerDataDepth = value;
    m_Org_apache_sling_commons_log_maxCallerDataDepthIsSet = true;
}
bool OrgApacheSlingCommonsLogLogManagerProperties::orgApacheSlingCommonsLogMaxCallerDataDepthIsSet() const
{
    return m_Org_apache_sling_commons_log_maxCallerDataDepthIsSet;
}

void OrgApacheSlingCommonsLogLogManagerProperties::unsetOrg_apache_sling_commons_log_maxCallerDataDepth()
{
    m_Org_apache_sling_commons_log_maxCallerDataDepthIsSet = false;
}

std::shared_ptr<ConfigNodePropertyInteger> OrgApacheSlingCommonsLogLogManagerProperties::getOrgApacheSlingCommonsLogMaxOldFileCountInDump() const
{
    return m_Org_apache_sling_commons_log_maxOldFileCountInDump;
}


void OrgApacheSlingCommonsLogLogManagerProperties::setOrgApacheSlingCommonsLogMaxOldFileCountInDump(std::shared_ptr<ConfigNodePropertyInteger> value)
{
    m_Org_apache_sling_commons_log_maxOldFileCountInDump = value;
    m_Org_apache_sling_commons_log_maxOldFileCountInDumpIsSet = true;
}
bool OrgApacheSlingCommonsLogLogManagerProperties::orgApacheSlingCommonsLogMaxOldFileCountInDumpIsSet() const
{
    return m_Org_apache_sling_commons_log_maxOldFileCountInDumpIsSet;
}

void OrgApacheSlingCommonsLogLogManagerProperties::unsetOrg_apache_sling_commons_log_maxOldFileCountInDump()
{
    m_Org_apache_sling_commons_log_maxOldFileCountInDumpIsSet = false;
}

std::shared_ptr<ConfigNodePropertyInteger> OrgApacheSlingCommonsLogLogManagerProperties::getOrgApacheSlingCommonsLogNumOfLines() const
{
    return m_Org_apache_sling_commons_log_numOfLines;
}


void OrgApacheSlingCommonsLogLogManagerProperties::setOrgApacheSlingCommonsLogNumOfLines(std::shared_ptr<ConfigNodePropertyInteger> value)
{
    m_Org_apache_sling_commons_log_numOfLines = value;
    m_Org_apache_sling_commons_log_numOfLinesIsSet = true;
}
bool OrgApacheSlingCommonsLogLogManagerProperties::orgApacheSlingCommonsLogNumOfLinesIsSet() const
{
    return m_Org_apache_sling_commons_log_numOfLinesIsSet;
}

void OrgApacheSlingCommonsLogLogManagerProperties::unsetOrg_apache_sling_commons_log_numOfLines()
{
    m_Org_apache_sling_commons_log_numOfLinesIsSet = false;
}

}
}
}
}

