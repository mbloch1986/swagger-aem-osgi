/* 
 * Adobe Experience Manager OSGI config (AEM) API
 *
 * Swagger AEM OSGI is an OpenAPI specification for Adobe Experience Manager (AEM) OSGI Configurations API
 *
 * OpenAPI spec version: 1.0.0-pre.0
 * Contact: opensource@shinesolutions.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Org.OpenAPITools.Client.OpenAPIDateConverter;

namespace Org.OpenAPITools.Model
{
    /// <summary>
    /// ComAdobeCqSocialCommonsUgclimitsconfigImplCommunityUserUGCLimitProperties
    /// </summary>
    [DataContract]
    public partial class ComAdobeCqSocialCommonsUgclimitsconfigImplCommunityUserUGCLimitProperties :  IEquatable<ComAdobeCqSocialCommonsUgclimitsconfigImplCommunityUserUGCLimitProperties>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="ComAdobeCqSocialCommonsUgclimitsconfigImplCommunityUserUGCLimitProperties" /> class.
        /// </summary>
        /// <param name="enable">enable.</param>
        /// <param name="uGCLimit">uGCLimit.</param>
        /// <param name="ugcLimitDuration">ugcLimitDuration.</param>
        /// <param name="domains">domains.</param>
        /// <param name="toList">toList.</param>
        public ComAdobeCqSocialCommonsUgclimitsconfigImplCommunityUserUGCLimitProperties(ConfigNodePropertyBoolean enable = default(ConfigNodePropertyBoolean), ConfigNodePropertyInteger uGCLimit = default(ConfigNodePropertyInteger), ConfigNodePropertyInteger ugcLimitDuration = default(ConfigNodePropertyInteger), ConfigNodePropertyArray domains = default(ConfigNodePropertyArray), ConfigNodePropertyArray toList = default(ConfigNodePropertyArray))
        {
            this.Enable = enable;
            this.UGCLimit = uGCLimit;
            this.UgcLimitDuration = ugcLimitDuration;
            this.Domains = domains;
            this.ToList = toList;
        }
        
        /// <summary>
        /// Gets or Sets Enable
        /// </summary>
        [DataMember(Name="enable", EmitDefaultValue=false)]
        public ConfigNodePropertyBoolean Enable { get; set; }

        /// <summary>
        /// Gets or Sets UGCLimit
        /// </summary>
        [DataMember(Name="UGCLimit", EmitDefaultValue=false)]
        public ConfigNodePropertyInteger UGCLimit { get; set; }

        /// <summary>
        /// Gets or Sets UgcLimitDuration
        /// </summary>
        [DataMember(Name="ugcLimitDuration", EmitDefaultValue=false)]
        public ConfigNodePropertyInteger UgcLimitDuration { get; set; }

        /// <summary>
        /// Gets or Sets Domains
        /// </summary>
        [DataMember(Name="domains", EmitDefaultValue=false)]
        public ConfigNodePropertyArray Domains { get; set; }

        /// <summary>
        /// Gets or Sets ToList
        /// </summary>
        [DataMember(Name="toList", EmitDefaultValue=false)]
        public ConfigNodePropertyArray ToList { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class ComAdobeCqSocialCommonsUgclimitsconfigImplCommunityUserUGCLimitProperties {\n");
            sb.Append("  Enable: ").Append(Enable).Append("\n");
            sb.Append("  UGCLimit: ").Append(UGCLimit).Append("\n");
            sb.Append("  UgcLimitDuration: ").Append(UgcLimitDuration).Append("\n");
            sb.Append("  Domains: ").Append(Domains).Append("\n");
            sb.Append("  ToList: ").Append(ToList).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as ComAdobeCqSocialCommonsUgclimitsconfigImplCommunityUserUGCLimitProperties);
        }

        /// <summary>
        /// Returns true if ComAdobeCqSocialCommonsUgclimitsconfigImplCommunityUserUGCLimitProperties instances are equal
        /// </summary>
        /// <param name="input">Instance of ComAdobeCqSocialCommonsUgclimitsconfigImplCommunityUserUGCLimitProperties to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(ComAdobeCqSocialCommonsUgclimitsconfigImplCommunityUserUGCLimitProperties input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Enable == input.Enable ||
                    (this.Enable != null &&
                    this.Enable.Equals(input.Enable))
                ) && 
                (
                    this.UGCLimit == input.UGCLimit ||
                    (this.UGCLimit != null &&
                    this.UGCLimit.Equals(input.UGCLimit))
                ) && 
                (
                    this.UgcLimitDuration == input.UgcLimitDuration ||
                    (this.UgcLimitDuration != null &&
                    this.UgcLimitDuration.Equals(input.UgcLimitDuration))
                ) && 
                (
                    this.Domains == input.Domains ||
                    (this.Domains != null &&
                    this.Domains.Equals(input.Domains))
                ) && 
                (
                    this.ToList == input.ToList ||
                    (this.ToList != null &&
                    this.ToList.Equals(input.ToList))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Enable != null)
                    hashCode = hashCode * 59 + this.Enable.GetHashCode();
                if (this.UGCLimit != null)
                    hashCode = hashCode * 59 + this.UGCLimit.GetHashCode();
                if (this.UgcLimitDuration != null)
                    hashCode = hashCode * 59 + this.UgcLimitDuration.GetHashCode();
                if (this.Domains != null)
                    hashCode = hashCode * 59 + this.Domains.GetHashCode();
                if (this.ToList != null)
                    hashCode = hashCode * 59 + this.ToList.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
