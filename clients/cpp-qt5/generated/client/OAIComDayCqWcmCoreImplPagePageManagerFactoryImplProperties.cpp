/**
 * Adobe Experience Manager OSGI config (AEM) API
 * Swagger AEM OSGI is an OpenAPI specification for Adobe Experience Manager (AEM) OSGI Configurations API
 *
 * OpenAPI spec version: 1.0.0-pre.0
 * Contact: opensource@shinesolutions.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


#include "OAIComDayCqWcmCoreImplPagePageManagerFactoryImplProperties.h"

#include "OAIHelpers.h"

#include <QJsonDocument>
#include <QJsonArray>
#include <QObject>
#include <QDebug>

namespace OpenAPI {

OAIComDayCqWcmCoreImplPagePageManagerFactoryImplProperties::OAIComDayCqWcmCoreImplPagePageManagerFactoryImplProperties(QString json) {
    init();
    this->fromJson(json);
}

OAIComDayCqWcmCoreImplPagePageManagerFactoryImplProperties::OAIComDayCqWcmCoreImplPagePageManagerFactoryImplProperties() {
    init();
}

OAIComDayCqWcmCoreImplPagePageManagerFactoryImplProperties::~OAIComDayCqWcmCoreImplPagePageManagerFactoryImplProperties() {
    this->cleanup();
}

void
OAIComDayCqWcmCoreImplPagePageManagerFactoryImplProperties::init() {
    illegal_char_mapping = new OAIConfigNodePropertyString();
    m_illegal_char_mapping_isSet = false;
    page_sub_tree_activation_check = new OAIConfigNodePropertyBoolean();
    m_page_sub_tree_activation_check_isSet = false;
}

void
OAIComDayCqWcmCoreImplPagePageManagerFactoryImplProperties::cleanup() {
    if(illegal_char_mapping != nullptr) { 
        delete illegal_char_mapping;
    }
    if(page_sub_tree_activation_check != nullptr) { 
        delete page_sub_tree_activation_check;
    }
}

OAIComDayCqWcmCoreImplPagePageManagerFactoryImplProperties*
OAIComDayCqWcmCoreImplPagePageManagerFactoryImplProperties::fromJson(QString json) {
    QByteArray array (json.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
    return this;
}

void
OAIComDayCqWcmCoreImplPagePageManagerFactoryImplProperties::fromJsonObject(QJsonObject pJson) {
    ::OpenAPI::setValue(&illegal_char_mapping, pJson["illegalCharMapping"], "OAIConfigNodePropertyString", "OAIConfigNodePropertyString");
    
    ::OpenAPI::setValue(&page_sub_tree_activation_check, pJson["pageSubTreeActivationCheck"], "OAIConfigNodePropertyBoolean", "OAIConfigNodePropertyBoolean");
    
}

QString
OAIComDayCqWcmCoreImplPagePageManagerFactoryImplProperties::asJson ()
{
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject
OAIComDayCqWcmCoreImplPagePageManagerFactoryImplProperties::asJsonObject() {
    QJsonObject obj;
    if((illegal_char_mapping != nullptr) && (illegal_char_mapping->isSet())){
        toJsonValue(QString("illegalCharMapping"), illegal_char_mapping, obj, QString("OAIConfigNodePropertyString"));
    }
    if((page_sub_tree_activation_check != nullptr) && (page_sub_tree_activation_check->isSet())){
        toJsonValue(QString("pageSubTreeActivationCheck"), page_sub_tree_activation_check, obj, QString("OAIConfigNodePropertyBoolean"));
    }

    return obj;
}

OAIConfigNodePropertyString*
OAIComDayCqWcmCoreImplPagePageManagerFactoryImplProperties::getIllegalCharMapping() {
    return illegal_char_mapping;
}
void
OAIComDayCqWcmCoreImplPagePageManagerFactoryImplProperties::setIllegalCharMapping(OAIConfigNodePropertyString* illegal_char_mapping) {
    this->illegal_char_mapping = illegal_char_mapping;
    this->m_illegal_char_mapping_isSet = true;
}

OAIConfigNodePropertyBoolean*
OAIComDayCqWcmCoreImplPagePageManagerFactoryImplProperties::getPageSubTreeActivationCheck() {
    return page_sub_tree_activation_check;
}
void
OAIComDayCqWcmCoreImplPagePageManagerFactoryImplProperties::setPageSubTreeActivationCheck(OAIConfigNodePropertyBoolean* page_sub_tree_activation_check) {
    this->page_sub_tree_activation_check = page_sub_tree_activation_check;
    this->m_page_sub_tree_activation_check_isSet = true;
}


bool
OAIComDayCqWcmCoreImplPagePageManagerFactoryImplProperties::isSet(){
    bool isObjectUpdated = false;
    do{
        if(illegal_char_mapping != nullptr && illegal_char_mapping->isSet()){ isObjectUpdated = true; break;}
        if(page_sub_tree_activation_check != nullptr && page_sub_tree_activation_check->isSet()){ isObjectUpdated = true; break;}
    }while(false);
    return isObjectUpdated;
}
}

