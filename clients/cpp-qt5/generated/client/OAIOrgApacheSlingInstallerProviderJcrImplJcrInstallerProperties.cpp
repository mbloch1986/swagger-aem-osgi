/**
 * Adobe Experience Manager OSGI config (AEM) API
 * Swagger AEM OSGI is an OpenAPI specification for Adobe Experience Manager (AEM) OSGI Configurations API
 *
 * OpenAPI spec version: 1.0.0-pre.0
 * Contact: opensource@shinesolutions.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


#include "OAIOrgApacheSlingInstallerProviderJcrImplJcrInstallerProperties.h"

#include "OAIHelpers.h"

#include <QJsonDocument>
#include <QJsonArray>
#include <QObject>
#include <QDebug>

namespace OpenAPI {

OAIOrgApacheSlingInstallerProviderJcrImplJcrInstallerProperties::OAIOrgApacheSlingInstallerProviderJcrImplJcrInstallerProperties(QString json) {
    init();
    this->fromJson(json);
}

OAIOrgApacheSlingInstallerProviderJcrImplJcrInstallerProperties::OAIOrgApacheSlingInstallerProviderJcrImplJcrInstallerProperties() {
    init();
}

OAIOrgApacheSlingInstallerProviderJcrImplJcrInstallerProperties::~OAIOrgApacheSlingInstallerProviderJcrImplJcrInstallerProperties() {
    this->cleanup();
}

void
OAIOrgApacheSlingInstallerProviderJcrImplJcrInstallerProperties::init() {
    handler_schemes = new OAIConfigNodePropertyArray();
    m_handler_schemes_isSet = false;
    sling_jcrinstall_folder_name_regexp = new OAIConfigNodePropertyString();
    m_sling_jcrinstall_folder_name_regexp_isSet = false;
    sling_jcrinstall_folder_max_depth = new OAIConfigNodePropertyInteger();
    m_sling_jcrinstall_folder_max_depth_isSet = false;
    sling_jcrinstall_search_path = new OAIConfigNodePropertyArray();
    m_sling_jcrinstall_search_path_isSet = false;
    sling_jcrinstall_new_config_path = new OAIConfigNodePropertyString();
    m_sling_jcrinstall_new_config_path_isSet = false;
    sling_jcrinstall_signal_path = new OAIConfigNodePropertyString();
    m_sling_jcrinstall_signal_path_isSet = false;
    sling_jcrinstall_enable_writeback = new OAIConfigNodePropertyBoolean();
    m_sling_jcrinstall_enable_writeback_isSet = false;
}

void
OAIOrgApacheSlingInstallerProviderJcrImplJcrInstallerProperties::cleanup() {
    if(handler_schemes != nullptr) { 
        delete handler_schemes;
    }
    if(sling_jcrinstall_folder_name_regexp != nullptr) { 
        delete sling_jcrinstall_folder_name_regexp;
    }
    if(sling_jcrinstall_folder_max_depth != nullptr) { 
        delete sling_jcrinstall_folder_max_depth;
    }
    if(sling_jcrinstall_search_path != nullptr) { 
        delete sling_jcrinstall_search_path;
    }
    if(sling_jcrinstall_new_config_path != nullptr) { 
        delete sling_jcrinstall_new_config_path;
    }
    if(sling_jcrinstall_signal_path != nullptr) { 
        delete sling_jcrinstall_signal_path;
    }
    if(sling_jcrinstall_enable_writeback != nullptr) { 
        delete sling_jcrinstall_enable_writeback;
    }
}

OAIOrgApacheSlingInstallerProviderJcrImplJcrInstallerProperties*
OAIOrgApacheSlingInstallerProviderJcrImplJcrInstallerProperties::fromJson(QString json) {
    QByteArray array (json.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
    return this;
}

void
OAIOrgApacheSlingInstallerProviderJcrImplJcrInstallerProperties::fromJsonObject(QJsonObject pJson) {
    ::OpenAPI::setValue(&handler_schemes, pJson["handler.schemes"], "OAIConfigNodePropertyArray", "OAIConfigNodePropertyArray");
    
    ::OpenAPI::setValue(&sling_jcrinstall_folder_name_regexp, pJson["sling.jcrinstall.folder.name.regexp"], "OAIConfigNodePropertyString", "OAIConfigNodePropertyString");
    
    ::OpenAPI::setValue(&sling_jcrinstall_folder_max_depth, pJson["sling.jcrinstall.folder.max.depth"], "OAIConfigNodePropertyInteger", "OAIConfigNodePropertyInteger");
    
    ::OpenAPI::setValue(&sling_jcrinstall_search_path, pJson["sling.jcrinstall.search.path"], "OAIConfigNodePropertyArray", "OAIConfigNodePropertyArray");
    
    ::OpenAPI::setValue(&sling_jcrinstall_new_config_path, pJson["sling.jcrinstall.new.config.path"], "OAIConfigNodePropertyString", "OAIConfigNodePropertyString");
    
    ::OpenAPI::setValue(&sling_jcrinstall_signal_path, pJson["sling.jcrinstall.signal.path"], "OAIConfigNodePropertyString", "OAIConfigNodePropertyString");
    
    ::OpenAPI::setValue(&sling_jcrinstall_enable_writeback, pJson["sling.jcrinstall.enable.writeback"], "OAIConfigNodePropertyBoolean", "OAIConfigNodePropertyBoolean");
    
}

QString
OAIOrgApacheSlingInstallerProviderJcrImplJcrInstallerProperties::asJson ()
{
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject
OAIOrgApacheSlingInstallerProviderJcrImplJcrInstallerProperties::asJsonObject() {
    QJsonObject obj;
    if((handler_schemes != nullptr) && (handler_schemes->isSet())){
        toJsonValue(QString("handler.schemes"), handler_schemes, obj, QString("OAIConfigNodePropertyArray"));
    }
    if((sling_jcrinstall_folder_name_regexp != nullptr) && (sling_jcrinstall_folder_name_regexp->isSet())){
        toJsonValue(QString("sling.jcrinstall.folder.name.regexp"), sling_jcrinstall_folder_name_regexp, obj, QString("OAIConfigNodePropertyString"));
    }
    if((sling_jcrinstall_folder_max_depth != nullptr) && (sling_jcrinstall_folder_max_depth->isSet())){
        toJsonValue(QString("sling.jcrinstall.folder.max.depth"), sling_jcrinstall_folder_max_depth, obj, QString("OAIConfigNodePropertyInteger"));
    }
    if((sling_jcrinstall_search_path != nullptr) && (sling_jcrinstall_search_path->isSet())){
        toJsonValue(QString("sling.jcrinstall.search.path"), sling_jcrinstall_search_path, obj, QString("OAIConfigNodePropertyArray"));
    }
    if((sling_jcrinstall_new_config_path != nullptr) && (sling_jcrinstall_new_config_path->isSet())){
        toJsonValue(QString("sling.jcrinstall.new.config.path"), sling_jcrinstall_new_config_path, obj, QString("OAIConfigNodePropertyString"));
    }
    if((sling_jcrinstall_signal_path != nullptr) && (sling_jcrinstall_signal_path->isSet())){
        toJsonValue(QString("sling.jcrinstall.signal.path"), sling_jcrinstall_signal_path, obj, QString("OAIConfigNodePropertyString"));
    }
    if((sling_jcrinstall_enable_writeback != nullptr) && (sling_jcrinstall_enable_writeback->isSet())){
        toJsonValue(QString("sling.jcrinstall.enable.writeback"), sling_jcrinstall_enable_writeback, obj, QString("OAIConfigNodePropertyBoolean"));
    }

    return obj;
}

OAIConfigNodePropertyArray*
OAIOrgApacheSlingInstallerProviderJcrImplJcrInstallerProperties::getHandlerSchemes() {
    return handler_schemes;
}
void
OAIOrgApacheSlingInstallerProviderJcrImplJcrInstallerProperties::setHandlerSchemes(OAIConfigNodePropertyArray* handler_schemes) {
    this->handler_schemes = handler_schemes;
    this->m_handler_schemes_isSet = true;
}

OAIConfigNodePropertyString*
OAIOrgApacheSlingInstallerProviderJcrImplJcrInstallerProperties::getSlingJcrinstallFolderNameRegexp() {
    return sling_jcrinstall_folder_name_regexp;
}
void
OAIOrgApacheSlingInstallerProviderJcrImplJcrInstallerProperties::setSlingJcrinstallFolderNameRegexp(OAIConfigNodePropertyString* sling_jcrinstall_folder_name_regexp) {
    this->sling_jcrinstall_folder_name_regexp = sling_jcrinstall_folder_name_regexp;
    this->m_sling_jcrinstall_folder_name_regexp_isSet = true;
}

OAIConfigNodePropertyInteger*
OAIOrgApacheSlingInstallerProviderJcrImplJcrInstallerProperties::getSlingJcrinstallFolderMaxDepth() {
    return sling_jcrinstall_folder_max_depth;
}
void
OAIOrgApacheSlingInstallerProviderJcrImplJcrInstallerProperties::setSlingJcrinstallFolderMaxDepth(OAIConfigNodePropertyInteger* sling_jcrinstall_folder_max_depth) {
    this->sling_jcrinstall_folder_max_depth = sling_jcrinstall_folder_max_depth;
    this->m_sling_jcrinstall_folder_max_depth_isSet = true;
}

OAIConfigNodePropertyArray*
OAIOrgApacheSlingInstallerProviderJcrImplJcrInstallerProperties::getSlingJcrinstallSearchPath() {
    return sling_jcrinstall_search_path;
}
void
OAIOrgApacheSlingInstallerProviderJcrImplJcrInstallerProperties::setSlingJcrinstallSearchPath(OAIConfigNodePropertyArray* sling_jcrinstall_search_path) {
    this->sling_jcrinstall_search_path = sling_jcrinstall_search_path;
    this->m_sling_jcrinstall_search_path_isSet = true;
}

OAIConfigNodePropertyString*
OAIOrgApacheSlingInstallerProviderJcrImplJcrInstallerProperties::getSlingJcrinstallNewConfigPath() {
    return sling_jcrinstall_new_config_path;
}
void
OAIOrgApacheSlingInstallerProviderJcrImplJcrInstallerProperties::setSlingJcrinstallNewConfigPath(OAIConfigNodePropertyString* sling_jcrinstall_new_config_path) {
    this->sling_jcrinstall_new_config_path = sling_jcrinstall_new_config_path;
    this->m_sling_jcrinstall_new_config_path_isSet = true;
}

OAIConfigNodePropertyString*
OAIOrgApacheSlingInstallerProviderJcrImplJcrInstallerProperties::getSlingJcrinstallSignalPath() {
    return sling_jcrinstall_signal_path;
}
void
OAIOrgApacheSlingInstallerProviderJcrImplJcrInstallerProperties::setSlingJcrinstallSignalPath(OAIConfigNodePropertyString* sling_jcrinstall_signal_path) {
    this->sling_jcrinstall_signal_path = sling_jcrinstall_signal_path;
    this->m_sling_jcrinstall_signal_path_isSet = true;
}

OAIConfigNodePropertyBoolean*
OAIOrgApacheSlingInstallerProviderJcrImplJcrInstallerProperties::getSlingJcrinstallEnableWriteback() {
    return sling_jcrinstall_enable_writeback;
}
void
OAIOrgApacheSlingInstallerProviderJcrImplJcrInstallerProperties::setSlingJcrinstallEnableWriteback(OAIConfigNodePropertyBoolean* sling_jcrinstall_enable_writeback) {
    this->sling_jcrinstall_enable_writeback = sling_jcrinstall_enable_writeback;
    this->m_sling_jcrinstall_enable_writeback_isSet = true;
}


bool
OAIOrgApacheSlingInstallerProviderJcrImplJcrInstallerProperties::isSet(){
    bool isObjectUpdated = false;
    do{
        if(handler_schemes != nullptr && handler_schemes->isSet()){ isObjectUpdated = true; break;}
        if(sling_jcrinstall_folder_name_regexp != nullptr && sling_jcrinstall_folder_name_regexp->isSet()){ isObjectUpdated = true; break;}
        if(sling_jcrinstall_folder_max_depth != nullptr && sling_jcrinstall_folder_max_depth->isSet()){ isObjectUpdated = true; break;}
        if(sling_jcrinstall_search_path != nullptr && sling_jcrinstall_search_path->isSet()){ isObjectUpdated = true; break;}
        if(sling_jcrinstall_new_config_path != nullptr && sling_jcrinstall_new_config_path->isSet()){ isObjectUpdated = true; break;}
        if(sling_jcrinstall_signal_path != nullptr && sling_jcrinstall_signal_path->isSet()){ isObjectUpdated = true; break;}
        if(sling_jcrinstall_enable_writeback != nullptr && sling_jcrinstall_enable_writeback->isSet()){ isObjectUpdated = true; break;}
    }while(false);
    return isObjectUpdated;
}
}

