/**
 * Adobe Experience Manager OSGI config (AEM) API
 * Swagger AEM OSGI is an OpenAPI specification for Adobe Experience Manager (AEM) OSGI Configurations API
 *
 * OpenAPI spec version: 1.0.0-pre.0
 * Contact: opensource@shinesolutions.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


#include "OAIOrgApacheSlingDistributionSerializationImplDistributionPackageBuProperties.h"

#include "OAIHelpers.h"

#include <QJsonDocument>
#include <QJsonArray>
#include <QObject>
#include <QDebug>

namespace OpenAPI {

OAIOrgApacheSlingDistributionSerializationImplDistributionPackageBuProperties::OAIOrgApacheSlingDistributionSerializationImplDistributionPackageBuProperties(QString json) {
    init();
    this->fromJson(json);
}

OAIOrgApacheSlingDistributionSerializationImplDistributionPackageBuProperties::OAIOrgApacheSlingDistributionSerializationImplDistributionPackageBuProperties() {
    init();
}

OAIOrgApacheSlingDistributionSerializationImplDistributionPackageBuProperties::~OAIOrgApacheSlingDistributionSerializationImplDistributionPackageBuProperties() {
    this->cleanup();
}

void
OAIOrgApacheSlingDistributionSerializationImplDistributionPackageBuProperties::init() {
    name = new OAIConfigNodePropertyString();
    m_name_isSet = false;
    type = new OAIConfigNodePropertyDropDown();
    m_type_isSet = false;
    format_target = new OAIConfigNodePropertyString();
    m_format_target_isSet = false;
    temp_fs_folder = new OAIConfigNodePropertyString();
    m_temp_fs_folder_isSet = false;
    file_threshold = new OAIConfigNodePropertyInteger();
    m_file_threshold_isSet = false;
    memory_unit = new OAIConfigNodePropertyDropDown();
    m_memory_unit_isSet = false;
    use_off_heap_memory = new OAIConfigNodePropertyBoolean();
    m_use_off_heap_memory_isSet = false;
    digest_algorithm = new OAIConfigNodePropertyDropDown();
    m_digest_algorithm_isSet = false;
    monitoring_queue_size = new OAIConfigNodePropertyInteger();
    m_monitoring_queue_size_isSet = false;
    cleanup_delay = new OAIConfigNodePropertyInteger();
    m_cleanup_delay_isSet = false;
    package_filters = new OAIConfigNodePropertyArray();
    m_package_filters_isSet = false;
    property_filters = new OAIConfigNodePropertyArray();
    m_property_filters_isSet = false;
}

void
OAIOrgApacheSlingDistributionSerializationImplDistributionPackageBuProperties::cleanup() {
    if(name != nullptr) { 
        delete name;
    }
    if(type != nullptr) { 
        delete type;
    }
    if(format_target != nullptr) { 
        delete format_target;
    }
    if(temp_fs_folder != nullptr) { 
        delete temp_fs_folder;
    }
    if(file_threshold != nullptr) { 
        delete file_threshold;
    }
    if(memory_unit != nullptr) { 
        delete memory_unit;
    }
    if(use_off_heap_memory != nullptr) { 
        delete use_off_heap_memory;
    }
    if(digest_algorithm != nullptr) { 
        delete digest_algorithm;
    }
    if(monitoring_queue_size != nullptr) { 
        delete monitoring_queue_size;
    }
    if(cleanup_delay != nullptr) { 
        delete cleanup_delay;
    }
    if(package_filters != nullptr) { 
        delete package_filters;
    }
    if(property_filters != nullptr) { 
        delete property_filters;
    }
}

OAIOrgApacheSlingDistributionSerializationImplDistributionPackageBuProperties*
OAIOrgApacheSlingDistributionSerializationImplDistributionPackageBuProperties::fromJson(QString json) {
    QByteArray array (json.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
    return this;
}

void
OAIOrgApacheSlingDistributionSerializationImplDistributionPackageBuProperties::fromJsonObject(QJsonObject pJson) {
    ::OpenAPI::setValue(&name, pJson["name"], "OAIConfigNodePropertyString", "OAIConfigNodePropertyString");
    
    ::OpenAPI::setValue(&type, pJson["type"], "OAIConfigNodePropertyDropDown", "OAIConfigNodePropertyDropDown");
    
    ::OpenAPI::setValue(&format_target, pJson["format.target"], "OAIConfigNodePropertyString", "OAIConfigNodePropertyString");
    
    ::OpenAPI::setValue(&temp_fs_folder, pJson["tempFsFolder"], "OAIConfigNodePropertyString", "OAIConfigNodePropertyString");
    
    ::OpenAPI::setValue(&file_threshold, pJson["fileThreshold"], "OAIConfigNodePropertyInteger", "OAIConfigNodePropertyInteger");
    
    ::OpenAPI::setValue(&memory_unit, pJson["memoryUnit"], "OAIConfigNodePropertyDropDown", "OAIConfigNodePropertyDropDown");
    
    ::OpenAPI::setValue(&use_off_heap_memory, pJson["useOffHeapMemory"], "OAIConfigNodePropertyBoolean", "OAIConfigNodePropertyBoolean");
    
    ::OpenAPI::setValue(&digest_algorithm, pJson["digestAlgorithm"], "OAIConfigNodePropertyDropDown", "OAIConfigNodePropertyDropDown");
    
    ::OpenAPI::setValue(&monitoring_queue_size, pJson["monitoringQueueSize"], "OAIConfigNodePropertyInteger", "OAIConfigNodePropertyInteger");
    
    ::OpenAPI::setValue(&cleanup_delay, pJson["cleanupDelay"], "OAIConfigNodePropertyInteger", "OAIConfigNodePropertyInteger");
    
    ::OpenAPI::setValue(&package_filters, pJson["package.filters"], "OAIConfigNodePropertyArray", "OAIConfigNodePropertyArray");
    
    ::OpenAPI::setValue(&property_filters, pJson["property.filters"], "OAIConfigNodePropertyArray", "OAIConfigNodePropertyArray");
    
}

QString
OAIOrgApacheSlingDistributionSerializationImplDistributionPackageBuProperties::asJson ()
{
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject
OAIOrgApacheSlingDistributionSerializationImplDistributionPackageBuProperties::asJsonObject() {
    QJsonObject obj;
    if((name != nullptr) && (name->isSet())){
        toJsonValue(QString("name"), name, obj, QString("OAIConfigNodePropertyString"));
    }
    if((type != nullptr) && (type->isSet())){
        toJsonValue(QString("type"), type, obj, QString("OAIConfigNodePropertyDropDown"));
    }
    if((format_target != nullptr) && (format_target->isSet())){
        toJsonValue(QString("format.target"), format_target, obj, QString("OAIConfigNodePropertyString"));
    }
    if((temp_fs_folder != nullptr) && (temp_fs_folder->isSet())){
        toJsonValue(QString("tempFsFolder"), temp_fs_folder, obj, QString("OAIConfigNodePropertyString"));
    }
    if((file_threshold != nullptr) && (file_threshold->isSet())){
        toJsonValue(QString("fileThreshold"), file_threshold, obj, QString("OAIConfigNodePropertyInteger"));
    }
    if((memory_unit != nullptr) && (memory_unit->isSet())){
        toJsonValue(QString("memoryUnit"), memory_unit, obj, QString("OAIConfigNodePropertyDropDown"));
    }
    if((use_off_heap_memory != nullptr) && (use_off_heap_memory->isSet())){
        toJsonValue(QString("useOffHeapMemory"), use_off_heap_memory, obj, QString("OAIConfigNodePropertyBoolean"));
    }
    if((digest_algorithm != nullptr) && (digest_algorithm->isSet())){
        toJsonValue(QString("digestAlgorithm"), digest_algorithm, obj, QString("OAIConfigNodePropertyDropDown"));
    }
    if((monitoring_queue_size != nullptr) && (monitoring_queue_size->isSet())){
        toJsonValue(QString("monitoringQueueSize"), monitoring_queue_size, obj, QString("OAIConfigNodePropertyInteger"));
    }
    if((cleanup_delay != nullptr) && (cleanup_delay->isSet())){
        toJsonValue(QString("cleanupDelay"), cleanup_delay, obj, QString("OAIConfigNodePropertyInteger"));
    }
    if((package_filters != nullptr) && (package_filters->isSet())){
        toJsonValue(QString("package.filters"), package_filters, obj, QString("OAIConfigNodePropertyArray"));
    }
    if((property_filters != nullptr) && (property_filters->isSet())){
        toJsonValue(QString("property.filters"), property_filters, obj, QString("OAIConfigNodePropertyArray"));
    }

    return obj;
}

OAIConfigNodePropertyString*
OAIOrgApacheSlingDistributionSerializationImplDistributionPackageBuProperties::getName() {
    return name;
}
void
OAIOrgApacheSlingDistributionSerializationImplDistributionPackageBuProperties::setName(OAIConfigNodePropertyString* name) {
    this->name = name;
    this->m_name_isSet = true;
}

OAIConfigNodePropertyDropDown*
OAIOrgApacheSlingDistributionSerializationImplDistributionPackageBuProperties::getType() {
    return type;
}
void
OAIOrgApacheSlingDistributionSerializationImplDistributionPackageBuProperties::setType(OAIConfigNodePropertyDropDown* type) {
    this->type = type;
    this->m_type_isSet = true;
}

OAIConfigNodePropertyString*
OAIOrgApacheSlingDistributionSerializationImplDistributionPackageBuProperties::getFormatTarget() {
    return format_target;
}
void
OAIOrgApacheSlingDistributionSerializationImplDistributionPackageBuProperties::setFormatTarget(OAIConfigNodePropertyString* format_target) {
    this->format_target = format_target;
    this->m_format_target_isSet = true;
}

OAIConfigNodePropertyString*
OAIOrgApacheSlingDistributionSerializationImplDistributionPackageBuProperties::getTempFsFolder() {
    return temp_fs_folder;
}
void
OAIOrgApacheSlingDistributionSerializationImplDistributionPackageBuProperties::setTempFsFolder(OAIConfigNodePropertyString* temp_fs_folder) {
    this->temp_fs_folder = temp_fs_folder;
    this->m_temp_fs_folder_isSet = true;
}

OAIConfigNodePropertyInteger*
OAIOrgApacheSlingDistributionSerializationImplDistributionPackageBuProperties::getFileThreshold() {
    return file_threshold;
}
void
OAIOrgApacheSlingDistributionSerializationImplDistributionPackageBuProperties::setFileThreshold(OAIConfigNodePropertyInteger* file_threshold) {
    this->file_threshold = file_threshold;
    this->m_file_threshold_isSet = true;
}

OAIConfigNodePropertyDropDown*
OAIOrgApacheSlingDistributionSerializationImplDistributionPackageBuProperties::getMemoryUnit() {
    return memory_unit;
}
void
OAIOrgApacheSlingDistributionSerializationImplDistributionPackageBuProperties::setMemoryUnit(OAIConfigNodePropertyDropDown* memory_unit) {
    this->memory_unit = memory_unit;
    this->m_memory_unit_isSet = true;
}

OAIConfigNodePropertyBoolean*
OAIOrgApacheSlingDistributionSerializationImplDistributionPackageBuProperties::getUseOffHeapMemory() {
    return use_off_heap_memory;
}
void
OAIOrgApacheSlingDistributionSerializationImplDistributionPackageBuProperties::setUseOffHeapMemory(OAIConfigNodePropertyBoolean* use_off_heap_memory) {
    this->use_off_heap_memory = use_off_heap_memory;
    this->m_use_off_heap_memory_isSet = true;
}

OAIConfigNodePropertyDropDown*
OAIOrgApacheSlingDistributionSerializationImplDistributionPackageBuProperties::getDigestAlgorithm() {
    return digest_algorithm;
}
void
OAIOrgApacheSlingDistributionSerializationImplDistributionPackageBuProperties::setDigestAlgorithm(OAIConfigNodePropertyDropDown* digest_algorithm) {
    this->digest_algorithm = digest_algorithm;
    this->m_digest_algorithm_isSet = true;
}

OAIConfigNodePropertyInteger*
OAIOrgApacheSlingDistributionSerializationImplDistributionPackageBuProperties::getMonitoringQueueSize() {
    return monitoring_queue_size;
}
void
OAIOrgApacheSlingDistributionSerializationImplDistributionPackageBuProperties::setMonitoringQueueSize(OAIConfigNodePropertyInteger* monitoring_queue_size) {
    this->monitoring_queue_size = monitoring_queue_size;
    this->m_monitoring_queue_size_isSet = true;
}

OAIConfigNodePropertyInteger*
OAIOrgApacheSlingDistributionSerializationImplDistributionPackageBuProperties::getCleanupDelay() {
    return cleanup_delay;
}
void
OAIOrgApacheSlingDistributionSerializationImplDistributionPackageBuProperties::setCleanupDelay(OAIConfigNodePropertyInteger* cleanup_delay) {
    this->cleanup_delay = cleanup_delay;
    this->m_cleanup_delay_isSet = true;
}

OAIConfigNodePropertyArray*
OAIOrgApacheSlingDistributionSerializationImplDistributionPackageBuProperties::getPackageFilters() {
    return package_filters;
}
void
OAIOrgApacheSlingDistributionSerializationImplDistributionPackageBuProperties::setPackageFilters(OAIConfigNodePropertyArray* package_filters) {
    this->package_filters = package_filters;
    this->m_package_filters_isSet = true;
}

OAIConfigNodePropertyArray*
OAIOrgApacheSlingDistributionSerializationImplDistributionPackageBuProperties::getPropertyFilters() {
    return property_filters;
}
void
OAIOrgApacheSlingDistributionSerializationImplDistributionPackageBuProperties::setPropertyFilters(OAIConfigNodePropertyArray* property_filters) {
    this->property_filters = property_filters;
    this->m_property_filters_isSet = true;
}


bool
OAIOrgApacheSlingDistributionSerializationImplDistributionPackageBuProperties::isSet(){
    bool isObjectUpdated = false;
    do{
        if(name != nullptr && name->isSet()){ isObjectUpdated = true; break;}
        if(type != nullptr && type->isSet()){ isObjectUpdated = true; break;}
        if(format_target != nullptr && format_target->isSet()){ isObjectUpdated = true; break;}
        if(temp_fs_folder != nullptr && temp_fs_folder->isSet()){ isObjectUpdated = true; break;}
        if(file_threshold != nullptr && file_threshold->isSet()){ isObjectUpdated = true; break;}
        if(memory_unit != nullptr && memory_unit->isSet()){ isObjectUpdated = true; break;}
        if(use_off_heap_memory != nullptr && use_off_heap_memory->isSet()){ isObjectUpdated = true; break;}
        if(digest_algorithm != nullptr && digest_algorithm->isSet()){ isObjectUpdated = true; break;}
        if(monitoring_queue_size != nullptr && monitoring_queue_size->isSet()){ isObjectUpdated = true; break;}
        if(cleanup_delay != nullptr && cleanup_delay->isSet()){ isObjectUpdated = true; break;}
        if(package_filters != nullptr && package_filters->isSet()){ isObjectUpdated = true; break;}
        if(property_filters != nullptr && property_filters->isSet()){ isObjectUpdated = true; break;}
    }while(false);
    return isObjectUpdated;
}
}

