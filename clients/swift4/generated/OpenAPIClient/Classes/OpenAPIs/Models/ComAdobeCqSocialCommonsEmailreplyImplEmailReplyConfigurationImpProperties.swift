//
// ComAdobeCqSocialCommonsEmailreplyImplEmailReplyConfigurationImpProperties.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation



public struct ComAdobeCqSocialCommonsEmailreplyImplEmailReplyConfigurationImpProperties: Codable {

    public var emailName: ConfigNodePropertyString?
    public var emailCreatePostFromReply: ConfigNodePropertyBoolean?
    public var emailAddCommentIdTo: ConfigNodePropertyDropDown?
    public var emailSubjectMaximumLength: ConfigNodePropertyInteger?
    public var emailReplyToAddress: ConfigNodePropertyString?
    public var emailReplyToDelimiter: ConfigNodePropertyString?
    public var emailTrackerIdPrefixInSubject: ConfigNodePropertyString?
    public var emailTrackerIdPrefixInBody: ConfigNodePropertyString?
    public var emailAsHTML: ConfigNodePropertyBoolean?
    public var emailDefaultUserName: ConfigNodePropertyString?
    public var emailTemplatesRootPath: ConfigNodePropertyString?

    public init(emailName: ConfigNodePropertyString?, emailCreatePostFromReply: ConfigNodePropertyBoolean?, emailAddCommentIdTo: ConfigNodePropertyDropDown?, emailSubjectMaximumLength: ConfigNodePropertyInteger?, emailReplyToAddress: ConfigNodePropertyString?, emailReplyToDelimiter: ConfigNodePropertyString?, emailTrackerIdPrefixInSubject: ConfigNodePropertyString?, emailTrackerIdPrefixInBody: ConfigNodePropertyString?, emailAsHTML: ConfigNodePropertyBoolean?, emailDefaultUserName: ConfigNodePropertyString?, emailTemplatesRootPath: ConfigNodePropertyString?) {
        self.emailName = emailName
        self.emailCreatePostFromReply = emailCreatePostFromReply
        self.emailAddCommentIdTo = emailAddCommentIdTo
        self.emailSubjectMaximumLength = emailSubjectMaximumLength
        self.emailReplyToAddress = emailReplyToAddress
        self.emailReplyToDelimiter = emailReplyToDelimiter
        self.emailTrackerIdPrefixInSubject = emailTrackerIdPrefixInSubject
        self.emailTrackerIdPrefixInBody = emailTrackerIdPrefixInBody
        self.emailAsHTML = emailAsHTML
        self.emailDefaultUserName = emailDefaultUserName
        self.emailTemplatesRootPath = emailTemplatesRootPath
    }

    public enum CodingKeys: String, CodingKey { 
        case emailName = "email.name"
        case emailCreatePostFromReply = "email.createPostFromReply"
        case emailAddCommentIdTo = "email.addCommentIdTo"
        case emailSubjectMaximumLength = "email.subjectMaximumLength"
        case emailReplyToAddress = "email.replyToAddress"
        case emailReplyToDelimiter = "email.replyToDelimiter"
        case emailTrackerIdPrefixInSubject = "email.trackerIdPrefixInSubject"
        case emailTrackerIdPrefixInBody = "email.trackerIdPrefixInBody"
        case emailAsHTML = "email.asHTML"
        case emailDefaultUserName = "email.defaultUserName"
        case emailTemplatesRootPath = "email.templates.rootPath"
    }


}

