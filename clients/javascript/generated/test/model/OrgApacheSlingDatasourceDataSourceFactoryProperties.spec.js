/**
 * Adobe Experience Manager OSGI config (AEM) API
 * Swagger AEM OSGI is an OpenAPI specification for Adobe Experience Manager (AEM) OSGI Configurations API
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: opensource@shinesolutions.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD.
    define(['expect.js', process.cwd()+'/src/index'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    factory(require('expect.js'), require(process.cwd()+'/src/index'));
  } else {
    // Browser globals (root is window)
    factory(root.expect, root.NodeSwaggerAemOsgi);
  }
}(this, function(expect, NodeSwaggerAemOsgi) {
  'use strict';

  var instance;

  beforeEach(function() {
    instance = new NodeSwaggerAemOsgi.OrgApacheSlingDatasourceDataSourceFactoryProperties();
  });

  var getProperty = function(object, getter, property) {
    // Use getter method if present; otherwise, get the property directly.
    if (typeof object[getter] === 'function')
      return object[getter]();
    else
      return object[property];
  }

  var setProperty = function(object, setter, property, value) {
    // Use setter method if present; otherwise, set the property directly.
    if (typeof object[setter] === 'function')
      object[setter](value);
    else
      object[property] = value;
  }

  describe('OrgApacheSlingDatasourceDataSourceFactoryProperties', function() {
    it('should create an instance of OrgApacheSlingDatasourceDataSourceFactoryProperties', function() {
      // uncomment below and update the code to test OrgApacheSlingDatasourceDataSourceFactoryProperties
      //var instane = new NodeSwaggerAemOsgi.OrgApacheSlingDatasourceDataSourceFactoryProperties();
      //expect(instance).to.be.a(NodeSwaggerAemOsgi.OrgApacheSlingDatasourceDataSourceFactoryProperties);
    });

    it('should have the property datasourceName (base name: "datasource.name")', function() {
      // uncomment below and update the code to test the property datasourceName
      //var instane = new NodeSwaggerAemOsgi.OrgApacheSlingDatasourceDataSourceFactoryProperties();
      //expect(instance).to.be();
    });

    it('should have the property datasourceSvcPropName (base name: "datasource.svc.prop.name")', function() {
      // uncomment below and update the code to test the property datasourceSvcPropName
      //var instane = new NodeSwaggerAemOsgi.OrgApacheSlingDatasourceDataSourceFactoryProperties();
      //expect(instance).to.be();
    });

    it('should have the property driverClassName (base name: "driverClassName")', function() {
      // uncomment below and update the code to test the property driverClassName
      //var instane = new NodeSwaggerAemOsgi.OrgApacheSlingDatasourceDataSourceFactoryProperties();
      //expect(instance).to.be();
    });

    it('should have the property url (base name: "url")', function() {
      // uncomment below and update the code to test the property url
      //var instane = new NodeSwaggerAemOsgi.OrgApacheSlingDatasourceDataSourceFactoryProperties();
      //expect(instance).to.be();
    });

    it('should have the property username (base name: "username")', function() {
      // uncomment below and update the code to test the property username
      //var instane = new NodeSwaggerAemOsgi.OrgApacheSlingDatasourceDataSourceFactoryProperties();
      //expect(instance).to.be();
    });

    it('should have the property password (base name: "password")', function() {
      // uncomment below and update the code to test the property password
      //var instane = new NodeSwaggerAemOsgi.OrgApacheSlingDatasourceDataSourceFactoryProperties();
      //expect(instance).to.be();
    });

    it('should have the property defaultAutoCommit (base name: "defaultAutoCommit")', function() {
      // uncomment below and update the code to test the property defaultAutoCommit
      //var instane = new NodeSwaggerAemOsgi.OrgApacheSlingDatasourceDataSourceFactoryProperties();
      //expect(instance).to.be();
    });

    it('should have the property defaultReadOnly (base name: "defaultReadOnly")', function() {
      // uncomment below and update the code to test the property defaultReadOnly
      //var instane = new NodeSwaggerAemOsgi.OrgApacheSlingDatasourceDataSourceFactoryProperties();
      //expect(instance).to.be();
    });

    it('should have the property defaultTransactionIsolation (base name: "defaultTransactionIsolation")', function() {
      // uncomment below and update the code to test the property defaultTransactionIsolation
      //var instane = new NodeSwaggerAemOsgi.OrgApacheSlingDatasourceDataSourceFactoryProperties();
      //expect(instance).to.be();
    });

    it('should have the property defaultCatalog (base name: "defaultCatalog")', function() {
      // uncomment below and update the code to test the property defaultCatalog
      //var instane = new NodeSwaggerAemOsgi.OrgApacheSlingDatasourceDataSourceFactoryProperties();
      //expect(instance).to.be();
    });

    it('should have the property maxActive (base name: "maxActive")', function() {
      // uncomment below and update the code to test the property maxActive
      //var instane = new NodeSwaggerAemOsgi.OrgApacheSlingDatasourceDataSourceFactoryProperties();
      //expect(instance).to.be();
    });

    it('should have the property maxIdle (base name: "maxIdle")', function() {
      // uncomment below and update the code to test the property maxIdle
      //var instane = new NodeSwaggerAemOsgi.OrgApacheSlingDatasourceDataSourceFactoryProperties();
      //expect(instance).to.be();
    });

    it('should have the property minIdle (base name: "minIdle")', function() {
      // uncomment below and update the code to test the property minIdle
      //var instane = new NodeSwaggerAemOsgi.OrgApacheSlingDatasourceDataSourceFactoryProperties();
      //expect(instance).to.be();
    });

    it('should have the property initialSize (base name: "initialSize")', function() {
      // uncomment below and update the code to test the property initialSize
      //var instane = new NodeSwaggerAemOsgi.OrgApacheSlingDatasourceDataSourceFactoryProperties();
      //expect(instance).to.be();
    });

    it('should have the property maxWait (base name: "maxWait")', function() {
      // uncomment below and update the code to test the property maxWait
      //var instane = new NodeSwaggerAemOsgi.OrgApacheSlingDatasourceDataSourceFactoryProperties();
      //expect(instance).to.be();
    });

    it('should have the property maxAge (base name: "maxAge")', function() {
      // uncomment below and update the code to test the property maxAge
      //var instane = new NodeSwaggerAemOsgi.OrgApacheSlingDatasourceDataSourceFactoryProperties();
      //expect(instance).to.be();
    });

    it('should have the property testOnBorrow (base name: "testOnBorrow")', function() {
      // uncomment below and update the code to test the property testOnBorrow
      //var instane = new NodeSwaggerAemOsgi.OrgApacheSlingDatasourceDataSourceFactoryProperties();
      //expect(instance).to.be();
    });

    it('should have the property testOnReturn (base name: "testOnReturn")', function() {
      // uncomment below and update the code to test the property testOnReturn
      //var instane = new NodeSwaggerAemOsgi.OrgApacheSlingDatasourceDataSourceFactoryProperties();
      //expect(instance).to.be();
    });

    it('should have the property testWhileIdle (base name: "testWhileIdle")', function() {
      // uncomment below and update the code to test the property testWhileIdle
      //var instane = new NodeSwaggerAemOsgi.OrgApacheSlingDatasourceDataSourceFactoryProperties();
      //expect(instance).to.be();
    });

    it('should have the property validationQuery (base name: "validationQuery")', function() {
      // uncomment below and update the code to test the property validationQuery
      //var instane = new NodeSwaggerAemOsgi.OrgApacheSlingDatasourceDataSourceFactoryProperties();
      //expect(instance).to.be();
    });

    it('should have the property validationQueryTimeout (base name: "validationQueryTimeout")', function() {
      // uncomment below and update the code to test the property validationQueryTimeout
      //var instane = new NodeSwaggerAemOsgi.OrgApacheSlingDatasourceDataSourceFactoryProperties();
      //expect(instance).to.be();
    });

    it('should have the property timeBetweenEvictionRunsMillis (base name: "timeBetweenEvictionRunsMillis")', function() {
      // uncomment below and update the code to test the property timeBetweenEvictionRunsMillis
      //var instane = new NodeSwaggerAemOsgi.OrgApacheSlingDatasourceDataSourceFactoryProperties();
      //expect(instance).to.be();
    });

    it('should have the property minEvictableIdleTimeMillis (base name: "minEvictableIdleTimeMillis")', function() {
      // uncomment below and update the code to test the property minEvictableIdleTimeMillis
      //var instane = new NodeSwaggerAemOsgi.OrgApacheSlingDatasourceDataSourceFactoryProperties();
      //expect(instance).to.be();
    });

    it('should have the property connectionProperties (base name: "connectionProperties")', function() {
      // uncomment below and update the code to test the property connectionProperties
      //var instane = new NodeSwaggerAemOsgi.OrgApacheSlingDatasourceDataSourceFactoryProperties();
      //expect(instance).to.be();
    });

    it('should have the property initSQL (base name: "initSQL")', function() {
      // uncomment below and update the code to test the property initSQL
      //var instane = new NodeSwaggerAemOsgi.OrgApacheSlingDatasourceDataSourceFactoryProperties();
      //expect(instance).to.be();
    });

    it('should have the property jdbcInterceptors (base name: "jdbcInterceptors")', function() {
      // uncomment below and update the code to test the property jdbcInterceptors
      //var instane = new NodeSwaggerAemOsgi.OrgApacheSlingDatasourceDataSourceFactoryProperties();
      //expect(instance).to.be();
    });

    it('should have the property validationInterval (base name: "validationInterval")', function() {
      // uncomment below and update the code to test the property validationInterval
      //var instane = new NodeSwaggerAemOsgi.OrgApacheSlingDatasourceDataSourceFactoryProperties();
      //expect(instance).to.be();
    });

    it('should have the property logValidationErrors (base name: "logValidationErrors")', function() {
      // uncomment below and update the code to test the property logValidationErrors
      //var instane = new NodeSwaggerAemOsgi.OrgApacheSlingDatasourceDataSourceFactoryProperties();
      //expect(instance).to.be();
    });

    it('should have the property datasourceSvcProperties (base name: "datasource.svc.properties")', function() {
      // uncomment below and update the code to test the property datasourceSvcProperties
      //var instane = new NodeSwaggerAemOsgi.OrgApacheSlingDatasourceDataSourceFactoryProperties();
      //expect(instance).to.be();
    });

  });

}));
