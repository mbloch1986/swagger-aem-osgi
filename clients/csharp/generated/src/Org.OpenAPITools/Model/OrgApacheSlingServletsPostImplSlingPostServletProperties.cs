/* 
 * Adobe Experience Manager OSGI config (AEM) API
 *
 * Swagger AEM OSGI is an OpenAPI specification for Adobe Experience Manager (AEM) OSGI Configurations API
 *
 * OpenAPI spec version: 1.0.0-pre.0
 * Contact: opensource@shinesolutions.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Org.OpenAPITools.Client.OpenAPIDateConverter;

namespace Org.OpenAPITools.Model
{
    /// <summary>
    /// OrgApacheSlingServletsPostImplSlingPostServletProperties
    /// </summary>
    [DataContract]
    public partial class OrgApacheSlingServletsPostImplSlingPostServletProperties :  IEquatable<OrgApacheSlingServletsPostImplSlingPostServletProperties>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="OrgApacheSlingServletsPostImplSlingPostServletProperties" /> class.
        /// </summary>
        /// <param name="servletPostDateFormats">servletPostDateFormats.</param>
        /// <param name="servletPostNodeNameHints">servletPostNodeNameHints.</param>
        /// <param name="servletPostNodeNameMaxLength">servletPostNodeNameMaxLength.</param>
        /// <param name="servletPostCheckinNewVersionableNodes">servletPostCheckinNewVersionableNodes.</param>
        /// <param name="servletPostAutoCheckout">servletPostAutoCheckout.</param>
        /// <param name="servletPostAutoCheckin">servletPostAutoCheckin.</param>
        /// <param name="servletPostIgnorePattern">servletPostIgnorePattern.</param>
        public OrgApacheSlingServletsPostImplSlingPostServletProperties(ConfigNodePropertyArray servletPostDateFormats = default(ConfigNodePropertyArray), ConfigNodePropertyArray servletPostNodeNameHints = default(ConfigNodePropertyArray), ConfigNodePropertyInteger servletPostNodeNameMaxLength = default(ConfigNodePropertyInteger), ConfigNodePropertyBoolean servletPostCheckinNewVersionableNodes = default(ConfigNodePropertyBoolean), ConfigNodePropertyBoolean servletPostAutoCheckout = default(ConfigNodePropertyBoolean), ConfigNodePropertyBoolean servletPostAutoCheckin = default(ConfigNodePropertyBoolean), ConfigNodePropertyString servletPostIgnorePattern = default(ConfigNodePropertyString))
        {
            this.ServletPostDateFormats = servletPostDateFormats;
            this.ServletPostNodeNameHints = servletPostNodeNameHints;
            this.ServletPostNodeNameMaxLength = servletPostNodeNameMaxLength;
            this.ServletPostCheckinNewVersionableNodes = servletPostCheckinNewVersionableNodes;
            this.ServletPostAutoCheckout = servletPostAutoCheckout;
            this.ServletPostAutoCheckin = servletPostAutoCheckin;
            this.ServletPostIgnorePattern = servletPostIgnorePattern;
        }
        
        /// <summary>
        /// Gets or Sets ServletPostDateFormats
        /// </summary>
        [DataMember(Name="servlet.post.dateFormats", EmitDefaultValue=false)]
        public ConfigNodePropertyArray ServletPostDateFormats { get; set; }

        /// <summary>
        /// Gets or Sets ServletPostNodeNameHints
        /// </summary>
        [DataMember(Name="servlet.post.nodeNameHints", EmitDefaultValue=false)]
        public ConfigNodePropertyArray ServletPostNodeNameHints { get; set; }

        /// <summary>
        /// Gets or Sets ServletPostNodeNameMaxLength
        /// </summary>
        [DataMember(Name="servlet.post.nodeNameMaxLength", EmitDefaultValue=false)]
        public ConfigNodePropertyInteger ServletPostNodeNameMaxLength { get; set; }

        /// <summary>
        /// Gets or Sets ServletPostCheckinNewVersionableNodes
        /// </summary>
        [DataMember(Name="servlet.post.checkinNewVersionableNodes", EmitDefaultValue=false)]
        public ConfigNodePropertyBoolean ServletPostCheckinNewVersionableNodes { get; set; }

        /// <summary>
        /// Gets or Sets ServletPostAutoCheckout
        /// </summary>
        [DataMember(Name="servlet.post.autoCheckout", EmitDefaultValue=false)]
        public ConfigNodePropertyBoolean ServletPostAutoCheckout { get; set; }

        /// <summary>
        /// Gets or Sets ServletPostAutoCheckin
        /// </summary>
        [DataMember(Name="servlet.post.autoCheckin", EmitDefaultValue=false)]
        public ConfigNodePropertyBoolean ServletPostAutoCheckin { get; set; }

        /// <summary>
        /// Gets or Sets ServletPostIgnorePattern
        /// </summary>
        [DataMember(Name="servlet.post.ignorePattern", EmitDefaultValue=false)]
        public ConfigNodePropertyString ServletPostIgnorePattern { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class OrgApacheSlingServletsPostImplSlingPostServletProperties {\n");
            sb.Append("  ServletPostDateFormats: ").Append(ServletPostDateFormats).Append("\n");
            sb.Append("  ServletPostNodeNameHints: ").Append(ServletPostNodeNameHints).Append("\n");
            sb.Append("  ServletPostNodeNameMaxLength: ").Append(ServletPostNodeNameMaxLength).Append("\n");
            sb.Append("  ServletPostCheckinNewVersionableNodes: ").Append(ServletPostCheckinNewVersionableNodes).Append("\n");
            sb.Append("  ServletPostAutoCheckout: ").Append(ServletPostAutoCheckout).Append("\n");
            sb.Append("  ServletPostAutoCheckin: ").Append(ServletPostAutoCheckin).Append("\n");
            sb.Append("  ServletPostIgnorePattern: ").Append(ServletPostIgnorePattern).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as OrgApacheSlingServletsPostImplSlingPostServletProperties);
        }

        /// <summary>
        /// Returns true if OrgApacheSlingServletsPostImplSlingPostServletProperties instances are equal
        /// </summary>
        /// <param name="input">Instance of OrgApacheSlingServletsPostImplSlingPostServletProperties to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(OrgApacheSlingServletsPostImplSlingPostServletProperties input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.ServletPostDateFormats == input.ServletPostDateFormats ||
                    (this.ServletPostDateFormats != null &&
                    this.ServletPostDateFormats.Equals(input.ServletPostDateFormats))
                ) && 
                (
                    this.ServletPostNodeNameHints == input.ServletPostNodeNameHints ||
                    (this.ServletPostNodeNameHints != null &&
                    this.ServletPostNodeNameHints.Equals(input.ServletPostNodeNameHints))
                ) && 
                (
                    this.ServletPostNodeNameMaxLength == input.ServletPostNodeNameMaxLength ||
                    (this.ServletPostNodeNameMaxLength != null &&
                    this.ServletPostNodeNameMaxLength.Equals(input.ServletPostNodeNameMaxLength))
                ) && 
                (
                    this.ServletPostCheckinNewVersionableNodes == input.ServletPostCheckinNewVersionableNodes ||
                    (this.ServletPostCheckinNewVersionableNodes != null &&
                    this.ServletPostCheckinNewVersionableNodes.Equals(input.ServletPostCheckinNewVersionableNodes))
                ) && 
                (
                    this.ServletPostAutoCheckout == input.ServletPostAutoCheckout ||
                    (this.ServletPostAutoCheckout != null &&
                    this.ServletPostAutoCheckout.Equals(input.ServletPostAutoCheckout))
                ) && 
                (
                    this.ServletPostAutoCheckin == input.ServletPostAutoCheckin ||
                    (this.ServletPostAutoCheckin != null &&
                    this.ServletPostAutoCheckin.Equals(input.ServletPostAutoCheckin))
                ) && 
                (
                    this.ServletPostIgnorePattern == input.ServletPostIgnorePattern ||
                    (this.ServletPostIgnorePattern != null &&
                    this.ServletPostIgnorePattern.Equals(input.ServletPostIgnorePattern))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.ServletPostDateFormats != null)
                    hashCode = hashCode * 59 + this.ServletPostDateFormats.GetHashCode();
                if (this.ServletPostNodeNameHints != null)
                    hashCode = hashCode * 59 + this.ServletPostNodeNameHints.GetHashCode();
                if (this.ServletPostNodeNameMaxLength != null)
                    hashCode = hashCode * 59 + this.ServletPostNodeNameMaxLength.GetHashCode();
                if (this.ServletPostCheckinNewVersionableNodes != null)
                    hashCode = hashCode * 59 + this.ServletPostCheckinNewVersionableNodes.GetHashCode();
                if (this.ServletPostAutoCheckout != null)
                    hashCode = hashCode * 59 + this.ServletPostAutoCheckout.GetHashCode();
                if (this.ServletPostAutoCheckin != null)
                    hashCode = hashCode * 59 + this.ServletPostAutoCheckin.GetHashCode();
                if (this.ServletPostIgnorePattern != null)
                    hashCode = hashCode * 59 + this.ServletPostIgnorePattern.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
