/*
 * Adobe Experience Manager OSGI config (AEM) API
 *
 * Swagger AEM OSGI is an OpenAPI specification for Adobe Experience Manager (AEM) OSGI Configurations API
 *
 * OpenAPI spec version: 1.0.0-pre.0
 * Contact: opensource@shinesolutions.com
 * Generated by: https://openapi-generator.tech
 */

using System;
using System.Linq;
using System.Text;
using System.Collections.Generic;
using System.ComponentModel.DataAnnotations;
using System.Runtime.Serialization;
using Newtonsoft.Json;

namespace Org.OpenAPITools.Models
{ 
    /// <summary>
    /// 
    /// </summary>
    [DataContract]
    public partial class ComAdobeGraniteTranslationConnectorMsftCoreImplMicrosoftTranslProperties : IEquatable<ComAdobeGraniteTranslationConnectorMsftCoreImplMicrosoftTranslProperties>
    { 
        /// <summary>
        /// Gets or Sets TranslationFactory
        /// </summary>
        [DataMember(Name="translationFactory")]
        public ConfigNodePropertyString TranslationFactory { get; set; }

        /// <summary>
        /// Gets or Sets DefaultConnectorLabel
        /// </summary>
        [DataMember(Name="defaultConnectorLabel")]
        public ConfigNodePropertyString DefaultConnectorLabel { get; set; }

        /// <summary>
        /// Gets or Sets DefaultConnectorAttribution
        /// </summary>
        [DataMember(Name="defaultConnectorAttribution")]
        public ConfigNodePropertyString DefaultConnectorAttribution { get; set; }

        /// <summary>
        /// Gets or Sets DefaultConnectorWorkspaceId
        /// </summary>
        [DataMember(Name="defaultConnectorWorkspaceId")]
        public ConfigNodePropertyString DefaultConnectorWorkspaceId { get; set; }

        /// <summary>
        /// Gets or Sets DefaultConnectorSubscriptionKey
        /// </summary>
        [DataMember(Name="defaultConnectorSubscriptionKey")]
        public ConfigNodePropertyString DefaultConnectorSubscriptionKey { get; set; }

        /// <summary>
        /// Gets or Sets LanguageMapLocation
        /// </summary>
        [DataMember(Name="languageMapLocation")]
        public ConfigNodePropertyString LanguageMapLocation { get; set; }

        /// <summary>
        /// Gets or Sets CategoryMapLocation
        /// </summary>
        [DataMember(Name="categoryMapLocation")]
        public ConfigNodePropertyString CategoryMapLocation { get; set; }

        /// <summary>
        /// Gets or Sets RetryAttempts
        /// </summary>
        [DataMember(Name="retryAttempts")]
        public ConfigNodePropertyInteger RetryAttempts { get; set; }

        /// <summary>
        /// Gets or Sets TimeoutCount
        /// </summary>
        [DataMember(Name="timeoutCount")]
        public ConfigNodePropertyInteger TimeoutCount { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class ComAdobeGraniteTranslationConnectorMsftCoreImplMicrosoftTranslProperties {\n");
            sb.Append("  TranslationFactory: ").Append(TranslationFactory).Append("\n");
            sb.Append("  DefaultConnectorLabel: ").Append(DefaultConnectorLabel).Append("\n");
            sb.Append("  DefaultConnectorAttribution: ").Append(DefaultConnectorAttribution).Append("\n");
            sb.Append("  DefaultConnectorWorkspaceId: ").Append(DefaultConnectorWorkspaceId).Append("\n");
            sb.Append("  DefaultConnectorSubscriptionKey: ").Append(DefaultConnectorSubscriptionKey).Append("\n");
            sb.Append("  LanguageMapLocation: ").Append(LanguageMapLocation).Append("\n");
            sb.Append("  CategoryMapLocation: ").Append(CategoryMapLocation).Append("\n");
            sb.Append("  RetryAttempts: ").Append(RetryAttempts).Append("\n");
            sb.Append("  TimeoutCount: ").Append(TimeoutCount).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            if (obj is null) return false;
            if (ReferenceEquals(this, obj)) return true;
            return obj.GetType() == GetType() && Equals((ComAdobeGraniteTranslationConnectorMsftCoreImplMicrosoftTranslProperties)obj);
        }

        /// <summary>
        /// Returns true if ComAdobeGraniteTranslationConnectorMsftCoreImplMicrosoftTranslProperties instances are equal
        /// </summary>
        /// <param name="other">Instance of ComAdobeGraniteTranslationConnectorMsftCoreImplMicrosoftTranslProperties to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(ComAdobeGraniteTranslationConnectorMsftCoreImplMicrosoftTranslProperties other)
        {
            if (other is null) return false;
            if (ReferenceEquals(this, other)) return true;

            return 
                (
                    TranslationFactory == other.TranslationFactory ||
                    TranslationFactory != null &&
                    TranslationFactory.Equals(other.TranslationFactory)
                ) && 
                (
                    DefaultConnectorLabel == other.DefaultConnectorLabel ||
                    DefaultConnectorLabel != null &&
                    DefaultConnectorLabel.Equals(other.DefaultConnectorLabel)
                ) && 
                (
                    DefaultConnectorAttribution == other.DefaultConnectorAttribution ||
                    DefaultConnectorAttribution != null &&
                    DefaultConnectorAttribution.Equals(other.DefaultConnectorAttribution)
                ) && 
                (
                    DefaultConnectorWorkspaceId == other.DefaultConnectorWorkspaceId ||
                    DefaultConnectorWorkspaceId != null &&
                    DefaultConnectorWorkspaceId.Equals(other.DefaultConnectorWorkspaceId)
                ) && 
                (
                    DefaultConnectorSubscriptionKey == other.DefaultConnectorSubscriptionKey ||
                    DefaultConnectorSubscriptionKey != null &&
                    DefaultConnectorSubscriptionKey.Equals(other.DefaultConnectorSubscriptionKey)
                ) && 
                (
                    LanguageMapLocation == other.LanguageMapLocation ||
                    LanguageMapLocation != null &&
                    LanguageMapLocation.Equals(other.LanguageMapLocation)
                ) && 
                (
                    CategoryMapLocation == other.CategoryMapLocation ||
                    CategoryMapLocation != null &&
                    CategoryMapLocation.Equals(other.CategoryMapLocation)
                ) && 
                (
                    RetryAttempts == other.RetryAttempts ||
                    RetryAttempts != null &&
                    RetryAttempts.Equals(other.RetryAttempts)
                ) && 
                (
                    TimeoutCount == other.TimeoutCount ||
                    TimeoutCount != null &&
                    TimeoutCount.Equals(other.TimeoutCount)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                var hashCode = 41;
                // Suitable nullity checks etc, of course :)
                    if (TranslationFactory != null)
                    hashCode = hashCode * 59 + TranslationFactory.GetHashCode();
                    if (DefaultConnectorLabel != null)
                    hashCode = hashCode * 59 + DefaultConnectorLabel.GetHashCode();
                    if (DefaultConnectorAttribution != null)
                    hashCode = hashCode * 59 + DefaultConnectorAttribution.GetHashCode();
                    if (DefaultConnectorWorkspaceId != null)
                    hashCode = hashCode * 59 + DefaultConnectorWorkspaceId.GetHashCode();
                    if (DefaultConnectorSubscriptionKey != null)
                    hashCode = hashCode * 59 + DefaultConnectorSubscriptionKey.GetHashCode();
                    if (LanguageMapLocation != null)
                    hashCode = hashCode * 59 + LanguageMapLocation.GetHashCode();
                    if (CategoryMapLocation != null)
                    hashCode = hashCode * 59 + CategoryMapLocation.GetHashCode();
                    if (RetryAttempts != null)
                    hashCode = hashCode * 59 + RetryAttempts.GetHashCode();
                    if (TimeoutCount != null)
                    hashCode = hashCode * 59 + TimeoutCount.GetHashCode();
                return hashCode;
            }
        }

        #region Operators
        #pragma warning disable 1591

        public static bool operator ==(ComAdobeGraniteTranslationConnectorMsftCoreImplMicrosoftTranslProperties left, ComAdobeGraniteTranslationConnectorMsftCoreImplMicrosoftTranslProperties right)
        {
            return Equals(left, right);
        }

        public static bool operator !=(ComAdobeGraniteTranslationConnectorMsftCoreImplMicrosoftTranslProperties left, ComAdobeGraniteTranslationConnectorMsftCoreImplMicrosoftTranslProperties right)
        {
            return !Equals(left, right);
        }

        #pragma warning restore 1591
        #endregion Operators
    }
}
