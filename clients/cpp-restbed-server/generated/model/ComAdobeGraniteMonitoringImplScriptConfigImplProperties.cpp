/**
 * Adobe Experience Manager OSGI config (AEM) API
 * Swagger AEM OSGI is an OpenAPI specification for Adobe Experience Manager (AEM) OSGI Configurations API
 *
 * OpenAPI spec version: 1.0.0-pre.0
 * Contact: opensource@shinesolutions.com
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 3.2.1-SNAPSHOT.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */



#include "ComAdobeGraniteMonitoringImplScriptConfigImplProperties.h"

#include <string>
#include <sstream>
#include <boost/property_tree/ptree.hpp>
#include <boost/property_tree/json_parser.hpp>

using boost::property_tree::ptree;
using boost::property_tree::read_json;
using boost::property_tree::write_json;

namespace org {
namespace openapitools {
namespace server {
namespace model {

ComAdobeGraniteMonitoringImplScriptConfigImplProperties::ComAdobeGraniteMonitoringImplScriptConfigImplProperties()
{
    
}

ComAdobeGraniteMonitoringImplScriptConfigImplProperties::~ComAdobeGraniteMonitoringImplScriptConfigImplProperties()
{
}

std::string ComAdobeGraniteMonitoringImplScriptConfigImplProperties::toJsonString()
{
	std::stringstream ss;
	ptree pt;
	write_json(ss, pt, false);
	return ss.str();
}

void ComAdobeGraniteMonitoringImplScriptConfigImplProperties::fromJsonString(std::string const& jsonString)
{
	std::stringstream ss(jsonString);
	ptree pt;
	read_json(ss,pt);
}

std::shared_ptr<ConfigNodePropertyString> ComAdobeGraniteMonitoringImplScriptConfigImplProperties::getScriptFilename() const
{
    return m_Script_filename;
}
void ComAdobeGraniteMonitoringImplScriptConfigImplProperties::setScriptFilename(std::shared_ptr<ConfigNodePropertyString> value)
{
    m_Script_filename = value;
}
std::shared_ptr<ConfigNodePropertyString> ComAdobeGraniteMonitoringImplScriptConfigImplProperties::getScriptDisplay() const
{
    return m_Script_display;
}
void ComAdobeGraniteMonitoringImplScriptConfigImplProperties::setScriptDisplay(std::shared_ptr<ConfigNodePropertyString> value)
{
    m_Script_display = value;
}
std::shared_ptr<ConfigNodePropertyString> ComAdobeGraniteMonitoringImplScriptConfigImplProperties::getScriptPath() const
{
    return m_Script_path;
}
void ComAdobeGraniteMonitoringImplScriptConfigImplProperties::setScriptPath(std::shared_ptr<ConfigNodePropertyString> value)
{
    m_Script_path = value;
}
std::shared_ptr<ConfigNodePropertyArray> ComAdobeGraniteMonitoringImplScriptConfigImplProperties::getScriptPlatform() const
{
    return m_Script_platform;
}
void ComAdobeGraniteMonitoringImplScriptConfigImplProperties::setScriptPlatform(std::shared_ptr<ConfigNodePropertyArray> value)
{
    m_Script_platform = value;
}
std::shared_ptr<ConfigNodePropertyInteger> ComAdobeGraniteMonitoringImplScriptConfigImplProperties::getInterval() const
{
    return m_Interval;
}
void ComAdobeGraniteMonitoringImplScriptConfigImplProperties::setInterval(std::shared_ptr<ConfigNodePropertyInteger> value)
{
    m_Interval = value;
}
std::shared_ptr<ConfigNodePropertyString> ComAdobeGraniteMonitoringImplScriptConfigImplProperties::getJmxdomain() const
{
    return m_Jmxdomain;
}
void ComAdobeGraniteMonitoringImplScriptConfigImplProperties::setJmxdomain(std::shared_ptr<ConfigNodePropertyString> value)
{
    m_Jmxdomain = value;
}

}
}
}
}

