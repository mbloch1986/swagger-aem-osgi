/**
 * Adobe Experience Manager OSGI config (AEM) API
 * Swagger AEM OSGI is an OpenAPI specification for Adobe Experience Manager (AEM) OSGI Configurations API
 *
 * OpenAPI spec version: 1.0.0-pre.0
 * Contact: opensource@shinesolutions.com
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 3.2.1-SNAPSHOT.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * ComDayCqWcmFoundationSecurityImplSaferSlingPostValidatorImplProperties.h
 *
 * 
 */

#ifndef ORG_OPENAPITOOLS_CLIENT_MODEL_ComDayCqWcmFoundationSecurityImplSaferSlingPostValidatorImplProperties_H_
#define ORG_OPENAPITOOLS_CLIENT_MODEL_ComDayCqWcmFoundationSecurityImplSaferSlingPostValidatorImplProperties_H_


#include "../ModelBase.h"

#include "ConfigNodePropertyArray.h"

namespace org {
namespace openapitools {
namespace client {
namespace model {

/// <summary>
/// 
/// </summary>
class  ComDayCqWcmFoundationSecurityImplSaferSlingPostValidatorImplProperties
    : public ModelBase
{
public:
    ComDayCqWcmFoundationSecurityImplSaferSlingPostValidatorImplProperties();
    virtual ~ComDayCqWcmFoundationSecurityImplSaferSlingPostValidatorImplProperties();

    /////////////////////////////////////////////
    /// ModelBase overrides

    void validate() override;

    web::json::value toJson() const override;
    void fromJson(web::json::value& json) override;

    void toMultipart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& namePrefix) const override;
    void fromMultiPart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& namePrefix) override;

    /////////////////////////////////////////////
    /// ComDayCqWcmFoundationSecurityImplSaferSlingPostValidatorImplProperties members

    /// <summary>
    /// 
    /// </summary>
    std::shared_ptr<ConfigNodePropertyArray> getParameterWhitelist() const;
    bool parameterWhitelistIsSet() const;
    void unsetParameter_whitelist();
    void setParameterWhitelist(std::shared_ptr<ConfigNodePropertyArray> value);
    /// <summary>
    /// 
    /// </summary>
    std::shared_ptr<ConfigNodePropertyArray> getParameterWhitelistPrefixes() const;
    bool parameterWhitelistPrefixesIsSet() const;
    void unsetParameter_whitelist_prefixes();
    void setParameterWhitelistPrefixes(std::shared_ptr<ConfigNodePropertyArray> value);
    /// <summary>
    /// 
    /// </summary>
    std::shared_ptr<ConfigNodePropertyArray> getBinaryParameterWhitelist() const;
    bool binaryParameterWhitelistIsSet() const;
    void unsetBinary_parameter_whitelist();
    void setBinaryParameterWhitelist(std::shared_ptr<ConfigNodePropertyArray> value);
    /// <summary>
    /// 
    /// </summary>
    std::shared_ptr<ConfigNodePropertyArray> getModifierWhitelist() const;
    bool modifierWhitelistIsSet() const;
    void unsetModifier_whitelist();
    void setModifierWhitelist(std::shared_ptr<ConfigNodePropertyArray> value);
    /// <summary>
    /// 
    /// </summary>
    std::shared_ptr<ConfigNodePropertyArray> getOperationWhitelist() const;
    bool operationWhitelistIsSet() const;
    void unsetOperation_whitelist();
    void setOperationWhitelist(std::shared_ptr<ConfigNodePropertyArray> value);
    /// <summary>
    /// 
    /// </summary>
    std::shared_ptr<ConfigNodePropertyArray> getOperationWhitelistPrefixes() const;
    bool operationWhitelistPrefixesIsSet() const;
    void unsetOperation_whitelist_prefixes();
    void setOperationWhitelistPrefixes(std::shared_ptr<ConfigNodePropertyArray> value);
    /// <summary>
    /// 
    /// </summary>
    std::shared_ptr<ConfigNodePropertyArray> getTypehintWhitelist() const;
    bool typehintWhitelistIsSet() const;
    void unsetTypehint_whitelist();
    void setTypehintWhitelist(std::shared_ptr<ConfigNodePropertyArray> value);
    /// <summary>
    /// 
    /// </summary>
    std::shared_ptr<ConfigNodePropertyArray> getResourcetypeWhitelist() const;
    bool resourcetypeWhitelistIsSet() const;
    void unsetResourcetype_whitelist();
    void setResourcetypeWhitelist(std::shared_ptr<ConfigNodePropertyArray> value);

protected:
    std::shared_ptr<ConfigNodePropertyArray> m_Parameter_whitelist;
    bool m_Parameter_whitelistIsSet;
    std::shared_ptr<ConfigNodePropertyArray> m_Parameter_whitelist_prefixes;
    bool m_Parameter_whitelist_prefixesIsSet;
    std::shared_ptr<ConfigNodePropertyArray> m_Binary_parameter_whitelist;
    bool m_Binary_parameter_whitelistIsSet;
    std::shared_ptr<ConfigNodePropertyArray> m_Modifier_whitelist;
    bool m_Modifier_whitelistIsSet;
    std::shared_ptr<ConfigNodePropertyArray> m_Operation_whitelist;
    bool m_Operation_whitelistIsSet;
    std::shared_ptr<ConfigNodePropertyArray> m_Operation_whitelist_prefixes;
    bool m_Operation_whitelist_prefixesIsSet;
    std::shared_ptr<ConfigNodePropertyArray> m_Typehint_whitelist;
    bool m_Typehint_whitelistIsSet;
    std::shared_ptr<ConfigNodePropertyArray> m_Resourcetype_whitelist;
    bool m_Resourcetype_whitelistIsSet;
};

}
}
}
}

#endif /* ORG_OPENAPITOOLS_CLIENT_MODEL_ComDayCqWcmFoundationSecurityImplSaferSlingPostValidatorImplProperties_H_ */
