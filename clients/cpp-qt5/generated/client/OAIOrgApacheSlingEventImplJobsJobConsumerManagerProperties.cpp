/**
 * Adobe Experience Manager OSGI config (AEM) API
 * Swagger AEM OSGI is an OpenAPI specification for Adobe Experience Manager (AEM) OSGI Configurations API
 *
 * OpenAPI spec version: 1.0.0-pre.0
 * Contact: opensource@shinesolutions.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


#include "OAIOrgApacheSlingEventImplJobsJobConsumerManagerProperties.h"

#include "OAIHelpers.h"

#include <QJsonDocument>
#include <QJsonArray>
#include <QObject>
#include <QDebug>

namespace OpenAPI {

OAIOrgApacheSlingEventImplJobsJobConsumerManagerProperties::OAIOrgApacheSlingEventImplJobsJobConsumerManagerProperties(QString json) {
    init();
    this->fromJson(json);
}

OAIOrgApacheSlingEventImplJobsJobConsumerManagerProperties::OAIOrgApacheSlingEventImplJobsJobConsumerManagerProperties() {
    init();
}

OAIOrgApacheSlingEventImplJobsJobConsumerManagerProperties::~OAIOrgApacheSlingEventImplJobsJobConsumerManagerProperties() {
    this->cleanup();
}

void
OAIOrgApacheSlingEventImplJobsJobConsumerManagerProperties::init() {
    org_apache_sling_installer_configuration_persist = new OAIConfigNodePropertyBoolean();
    m_org_apache_sling_installer_configuration_persist_isSet = false;
    job_consumermanager_whitelist = new OAIConfigNodePropertyArray();
    m_job_consumermanager_whitelist_isSet = false;
    job_consumermanager_blacklist = new OAIConfigNodePropertyArray();
    m_job_consumermanager_blacklist_isSet = false;
}

void
OAIOrgApacheSlingEventImplJobsJobConsumerManagerProperties::cleanup() {
    if(org_apache_sling_installer_configuration_persist != nullptr) { 
        delete org_apache_sling_installer_configuration_persist;
    }
    if(job_consumermanager_whitelist != nullptr) { 
        delete job_consumermanager_whitelist;
    }
    if(job_consumermanager_blacklist != nullptr) { 
        delete job_consumermanager_blacklist;
    }
}

OAIOrgApacheSlingEventImplJobsJobConsumerManagerProperties*
OAIOrgApacheSlingEventImplJobsJobConsumerManagerProperties::fromJson(QString json) {
    QByteArray array (json.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
    return this;
}

void
OAIOrgApacheSlingEventImplJobsJobConsumerManagerProperties::fromJsonObject(QJsonObject pJson) {
    ::OpenAPI::setValue(&org_apache_sling_installer_configuration_persist, pJson["org.apache.sling.installer.configuration.persist"], "OAIConfigNodePropertyBoolean", "OAIConfigNodePropertyBoolean");
    
    ::OpenAPI::setValue(&job_consumermanager_whitelist, pJson["job.consumermanager.whitelist"], "OAIConfigNodePropertyArray", "OAIConfigNodePropertyArray");
    
    ::OpenAPI::setValue(&job_consumermanager_blacklist, pJson["job.consumermanager.blacklist"], "OAIConfigNodePropertyArray", "OAIConfigNodePropertyArray");
    
}

QString
OAIOrgApacheSlingEventImplJobsJobConsumerManagerProperties::asJson ()
{
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject
OAIOrgApacheSlingEventImplJobsJobConsumerManagerProperties::asJsonObject() {
    QJsonObject obj;
    if((org_apache_sling_installer_configuration_persist != nullptr) && (org_apache_sling_installer_configuration_persist->isSet())){
        toJsonValue(QString("org.apache.sling.installer.configuration.persist"), org_apache_sling_installer_configuration_persist, obj, QString("OAIConfigNodePropertyBoolean"));
    }
    if((job_consumermanager_whitelist != nullptr) && (job_consumermanager_whitelist->isSet())){
        toJsonValue(QString("job.consumermanager.whitelist"), job_consumermanager_whitelist, obj, QString("OAIConfigNodePropertyArray"));
    }
    if((job_consumermanager_blacklist != nullptr) && (job_consumermanager_blacklist->isSet())){
        toJsonValue(QString("job.consumermanager.blacklist"), job_consumermanager_blacklist, obj, QString("OAIConfigNodePropertyArray"));
    }

    return obj;
}

OAIConfigNodePropertyBoolean*
OAIOrgApacheSlingEventImplJobsJobConsumerManagerProperties::getOrgApacheSlingInstallerConfigurationPersist() {
    return org_apache_sling_installer_configuration_persist;
}
void
OAIOrgApacheSlingEventImplJobsJobConsumerManagerProperties::setOrgApacheSlingInstallerConfigurationPersist(OAIConfigNodePropertyBoolean* org_apache_sling_installer_configuration_persist) {
    this->org_apache_sling_installer_configuration_persist = org_apache_sling_installer_configuration_persist;
    this->m_org_apache_sling_installer_configuration_persist_isSet = true;
}

OAIConfigNodePropertyArray*
OAIOrgApacheSlingEventImplJobsJobConsumerManagerProperties::getJobConsumermanagerWhitelist() {
    return job_consumermanager_whitelist;
}
void
OAIOrgApacheSlingEventImplJobsJobConsumerManagerProperties::setJobConsumermanagerWhitelist(OAIConfigNodePropertyArray* job_consumermanager_whitelist) {
    this->job_consumermanager_whitelist = job_consumermanager_whitelist;
    this->m_job_consumermanager_whitelist_isSet = true;
}

OAIConfigNodePropertyArray*
OAIOrgApacheSlingEventImplJobsJobConsumerManagerProperties::getJobConsumermanagerBlacklist() {
    return job_consumermanager_blacklist;
}
void
OAIOrgApacheSlingEventImplJobsJobConsumerManagerProperties::setJobConsumermanagerBlacklist(OAIConfigNodePropertyArray* job_consumermanager_blacklist) {
    this->job_consumermanager_blacklist = job_consumermanager_blacklist;
    this->m_job_consumermanager_blacklist_isSet = true;
}


bool
OAIOrgApacheSlingEventImplJobsJobConsumerManagerProperties::isSet(){
    bool isObjectUpdated = false;
    do{
        if(org_apache_sling_installer_configuration_persist != nullptr && org_apache_sling_installer_configuration_persist->isSet()){ isObjectUpdated = true; break;}
        if(job_consumermanager_whitelist != nullptr && job_consumermanager_whitelist->isSet()){ isObjectUpdated = true; break;}
        if(job_consumermanager_blacklist != nullptr && job_consumermanager_blacklist->isSet()){ isObjectUpdated = true; break;}
    }while(false);
    return isObjectUpdated;
}
}

