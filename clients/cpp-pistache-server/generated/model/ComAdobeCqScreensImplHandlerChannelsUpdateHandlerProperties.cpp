/**
* Adobe Experience Manager OSGI config (AEM) API
* Swagger AEM OSGI is an OpenAPI specification for Adobe Experience Manager (AEM) OSGI Configurations API
*
* OpenAPI spec version: 1.0.0-pre.0
* Contact: opensource@shinesolutions.com
*
* NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
* https://openapi-generator.tech
* Do not edit the class manually.
*/


#include "ComAdobeCqScreensImplHandlerChannelsUpdateHandlerProperties.h"

namespace org {
namespace openapitools {
namespace server {
namespace model {

ComAdobeCqScreensImplHandlerChannelsUpdateHandlerProperties::ComAdobeCqScreensImplHandlerChannelsUpdateHandlerProperties()
{
    m_Cq_pagesupdatehandler_imageresourcetypesIsSet = false;
    m_Cq_pagesupdatehandler_productresourcetypesIsSet = false;
    m_Cq_pagesupdatehandler_videoresourcetypesIsSet = false;
    m_Cq_pagesupdatehandler_dynamicsequenceresourcetypesIsSet = false;
    m_Cq_pagesupdatehandler_previewmodepathsIsSet = false;
    
}

ComAdobeCqScreensImplHandlerChannelsUpdateHandlerProperties::~ComAdobeCqScreensImplHandlerChannelsUpdateHandlerProperties()
{
}

void ComAdobeCqScreensImplHandlerChannelsUpdateHandlerProperties::validate()
{
    // TODO: implement validation
}

nlohmann::json ComAdobeCqScreensImplHandlerChannelsUpdateHandlerProperties::toJson() const
{
    nlohmann::json val = nlohmann::json::object();

    if(m_Cq_pagesupdatehandler_imageresourcetypesIsSet)
    {
        val["cq.pagesupdatehandler.imageresourcetypes"] = ModelBase::toJson(m_Cq_pagesupdatehandler_imageresourcetypes);
    }
    if(m_Cq_pagesupdatehandler_productresourcetypesIsSet)
    {
        val["cq.pagesupdatehandler.productresourcetypes"] = ModelBase::toJson(m_Cq_pagesupdatehandler_productresourcetypes);
    }
    if(m_Cq_pagesupdatehandler_videoresourcetypesIsSet)
    {
        val["cq.pagesupdatehandler.videoresourcetypes"] = ModelBase::toJson(m_Cq_pagesupdatehandler_videoresourcetypes);
    }
    if(m_Cq_pagesupdatehandler_dynamicsequenceresourcetypesIsSet)
    {
        val["cq.pagesupdatehandler.dynamicsequenceresourcetypes"] = ModelBase::toJson(m_Cq_pagesupdatehandler_dynamicsequenceresourcetypes);
    }
    if(m_Cq_pagesupdatehandler_previewmodepathsIsSet)
    {
        val["cq.pagesupdatehandler.previewmodepaths"] = ModelBase::toJson(m_Cq_pagesupdatehandler_previewmodepaths);
    }
    

    return val;
}

void ComAdobeCqScreensImplHandlerChannelsUpdateHandlerProperties::fromJson(nlohmann::json& val)
{
    if(val.find("cq.pagesupdatehandler.imageresourcetypes") != val.end())
    {
        if(!val["cq.pagesupdatehandler.imageresourcetypes"].is_null())
        {
            ConfigNodePropertyArray newItem;
            newItem.fromJson(val["cq.pagesupdatehandler.imageresourcetypes"]);
            setCqPagesupdatehandlerImageresourcetypes( newItem );
        }
        
    }
    if(val.find("cq.pagesupdatehandler.productresourcetypes") != val.end())
    {
        if(!val["cq.pagesupdatehandler.productresourcetypes"].is_null())
        {
            ConfigNodePropertyArray newItem;
            newItem.fromJson(val["cq.pagesupdatehandler.productresourcetypes"]);
            setCqPagesupdatehandlerProductresourcetypes( newItem );
        }
        
    }
    if(val.find("cq.pagesupdatehandler.videoresourcetypes") != val.end())
    {
        if(!val["cq.pagesupdatehandler.videoresourcetypes"].is_null())
        {
            ConfigNodePropertyArray newItem;
            newItem.fromJson(val["cq.pagesupdatehandler.videoresourcetypes"]);
            setCqPagesupdatehandlerVideoresourcetypes( newItem );
        }
        
    }
    if(val.find("cq.pagesupdatehandler.dynamicsequenceresourcetypes") != val.end())
    {
        if(!val["cq.pagesupdatehandler.dynamicsequenceresourcetypes"].is_null())
        {
            ConfigNodePropertyArray newItem;
            newItem.fromJson(val["cq.pagesupdatehandler.dynamicsequenceresourcetypes"]);
            setCqPagesupdatehandlerDynamicsequenceresourcetypes( newItem );
        }
        
    }
    if(val.find("cq.pagesupdatehandler.previewmodepaths") != val.end())
    {
        if(!val["cq.pagesupdatehandler.previewmodepaths"].is_null())
        {
            ConfigNodePropertyArray newItem;
            newItem.fromJson(val["cq.pagesupdatehandler.previewmodepaths"]);
            setCqPagesupdatehandlerPreviewmodepaths( newItem );
        }
        
    }
    
}


ConfigNodePropertyArray ComAdobeCqScreensImplHandlerChannelsUpdateHandlerProperties::getCqPagesupdatehandlerImageresourcetypes() const
{
    return m_Cq_pagesupdatehandler_imageresourcetypes;
}
void ComAdobeCqScreensImplHandlerChannelsUpdateHandlerProperties::setCqPagesupdatehandlerImageresourcetypes(ConfigNodePropertyArray const& value)
{
    m_Cq_pagesupdatehandler_imageresourcetypes = value;
    m_Cq_pagesupdatehandler_imageresourcetypesIsSet = true;
}
bool ComAdobeCqScreensImplHandlerChannelsUpdateHandlerProperties::cqPagesupdatehandlerImageresourcetypesIsSet() const
{
    return m_Cq_pagesupdatehandler_imageresourcetypesIsSet;
}
void ComAdobeCqScreensImplHandlerChannelsUpdateHandlerProperties::unsetCq_pagesupdatehandler_imageresourcetypes()
{
    m_Cq_pagesupdatehandler_imageresourcetypesIsSet = false;
}
ConfigNodePropertyArray ComAdobeCqScreensImplHandlerChannelsUpdateHandlerProperties::getCqPagesupdatehandlerProductresourcetypes() const
{
    return m_Cq_pagesupdatehandler_productresourcetypes;
}
void ComAdobeCqScreensImplHandlerChannelsUpdateHandlerProperties::setCqPagesupdatehandlerProductresourcetypes(ConfigNodePropertyArray const& value)
{
    m_Cq_pagesupdatehandler_productresourcetypes = value;
    m_Cq_pagesupdatehandler_productresourcetypesIsSet = true;
}
bool ComAdobeCqScreensImplHandlerChannelsUpdateHandlerProperties::cqPagesupdatehandlerProductresourcetypesIsSet() const
{
    return m_Cq_pagesupdatehandler_productresourcetypesIsSet;
}
void ComAdobeCqScreensImplHandlerChannelsUpdateHandlerProperties::unsetCq_pagesupdatehandler_productresourcetypes()
{
    m_Cq_pagesupdatehandler_productresourcetypesIsSet = false;
}
ConfigNodePropertyArray ComAdobeCqScreensImplHandlerChannelsUpdateHandlerProperties::getCqPagesupdatehandlerVideoresourcetypes() const
{
    return m_Cq_pagesupdatehandler_videoresourcetypes;
}
void ComAdobeCqScreensImplHandlerChannelsUpdateHandlerProperties::setCqPagesupdatehandlerVideoresourcetypes(ConfigNodePropertyArray const& value)
{
    m_Cq_pagesupdatehandler_videoresourcetypes = value;
    m_Cq_pagesupdatehandler_videoresourcetypesIsSet = true;
}
bool ComAdobeCqScreensImplHandlerChannelsUpdateHandlerProperties::cqPagesupdatehandlerVideoresourcetypesIsSet() const
{
    return m_Cq_pagesupdatehandler_videoresourcetypesIsSet;
}
void ComAdobeCqScreensImplHandlerChannelsUpdateHandlerProperties::unsetCq_pagesupdatehandler_videoresourcetypes()
{
    m_Cq_pagesupdatehandler_videoresourcetypesIsSet = false;
}
ConfigNodePropertyArray ComAdobeCqScreensImplHandlerChannelsUpdateHandlerProperties::getCqPagesupdatehandlerDynamicsequenceresourcetypes() const
{
    return m_Cq_pagesupdatehandler_dynamicsequenceresourcetypes;
}
void ComAdobeCqScreensImplHandlerChannelsUpdateHandlerProperties::setCqPagesupdatehandlerDynamicsequenceresourcetypes(ConfigNodePropertyArray const& value)
{
    m_Cq_pagesupdatehandler_dynamicsequenceresourcetypes = value;
    m_Cq_pagesupdatehandler_dynamicsequenceresourcetypesIsSet = true;
}
bool ComAdobeCqScreensImplHandlerChannelsUpdateHandlerProperties::cqPagesupdatehandlerDynamicsequenceresourcetypesIsSet() const
{
    return m_Cq_pagesupdatehandler_dynamicsequenceresourcetypesIsSet;
}
void ComAdobeCqScreensImplHandlerChannelsUpdateHandlerProperties::unsetCq_pagesupdatehandler_dynamicsequenceresourcetypes()
{
    m_Cq_pagesupdatehandler_dynamicsequenceresourcetypesIsSet = false;
}
ConfigNodePropertyArray ComAdobeCqScreensImplHandlerChannelsUpdateHandlerProperties::getCqPagesupdatehandlerPreviewmodepaths() const
{
    return m_Cq_pagesupdatehandler_previewmodepaths;
}
void ComAdobeCqScreensImplHandlerChannelsUpdateHandlerProperties::setCqPagesupdatehandlerPreviewmodepaths(ConfigNodePropertyArray const& value)
{
    m_Cq_pagesupdatehandler_previewmodepaths = value;
    m_Cq_pagesupdatehandler_previewmodepathsIsSet = true;
}
bool ComAdobeCqScreensImplHandlerChannelsUpdateHandlerProperties::cqPagesupdatehandlerPreviewmodepathsIsSet() const
{
    return m_Cq_pagesupdatehandler_previewmodepathsIsSet;
}
void ComAdobeCqScreensImplHandlerChannelsUpdateHandlerProperties::unsetCq_pagesupdatehandler_previewmodepaths()
{
    m_Cq_pagesupdatehandler_previewmodepathsIsSet = false;
}

}
}
}
}

