/**
 * Adobe Experience Manager OSGI config (AEM) API
 * Swagger AEM OSGI is an OpenAPI specification for Adobe Experience Manager (AEM) OSGI Configurations API
 *
 * OpenAPI spec version: 1.0.0-pre.0
 * Contact: opensource@shinesolutions.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


#include "OAIComAdobeCqDamS7imagingImplPsPlatformServerServletProperties.h"

#include "OAIHelpers.h"

#include <QJsonDocument>
#include <QJsonArray>
#include <QObject>
#include <QDebug>

namespace OpenAPI {

OAIComAdobeCqDamS7imagingImplPsPlatformServerServletProperties::OAIComAdobeCqDamS7imagingImplPsPlatformServerServletProperties(QString json) {
    this->fromJson(json);
}

OAIComAdobeCqDamS7imagingImplPsPlatformServerServletProperties::OAIComAdobeCqDamS7imagingImplPsPlatformServerServletProperties() {
    this->init();
}

OAIComAdobeCqDamS7imagingImplPsPlatformServerServletProperties::~OAIComAdobeCqDamS7imagingImplPsPlatformServerServletProperties() {
    
}

void
OAIComAdobeCqDamS7imagingImplPsPlatformServerServletProperties::init() {
    m_cache_enable_isSet = false;
    m_cache_root_paths_isSet = false;
    m_cache_max_size_isSet = false;
    m_cache_max_entries_isSet = false;
}

void
OAIComAdobeCqDamS7imagingImplPsPlatformServerServletProperties::fromJson(QString jsonString) {
    QByteArray array (jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void
OAIComAdobeCqDamS7imagingImplPsPlatformServerServletProperties::fromJsonObject(QJsonObject json) {
    ::OpenAPI::fromJsonValue(cache_enable, json[QString("cache.enable")]);
    
    ::OpenAPI::fromJsonValue(cache_root_paths, json[QString("cache.rootPaths")]);
    
    ::OpenAPI::fromJsonValue(cache_max_size, json[QString("cache.maxSize")]);
    
    ::OpenAPI::fromJsonValue(cache_max_entries, json[QString("cache.maxEntries")]);
    
}

QString
OAIComAdobeCqDamS7imagingImplPsPlatformServerServletProperties::asJson () const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject
OAIComAdobeCqDamS7imagingImplPsPlatformServerServletProperties::asJsonObject() const {
    QJsonObject obj;
	if(cache_enable.isSet()){
        obj.insert(QString("cache.enable"), ::OpenAPI::toJsonValue(cache_enable));
    }
	if(cache_root_paths.isSet()){
        obj.insert(QString("cache.rootPaths"), ::OpenAPI::toJsonValue(cache_root_paths));
    }
	if(cache_max_size.isSet()){
        obj.insert(QString("cache.maxSize"), ::OpenAPI::toJsonValue(cache_max_size));
    }
	if(cache_max_entries.isSet()){
        obj.insert(QString("cache.maxEntries"), ::OpenAPI::toJsonValue(cache_max_entries));
    }
    return obj;
}

OAIConfigNodePropertyBoolean
OAIComAdobeCqDamS7imagingImplPsPlatformServerServletProperties::getCacheEnable() const {
    return cache_enable;
}
void
OAIComAdobeCqDamS7imagingImplPsPlatformServerServletProperties::setCacheEnable(const OAIConfigNodePropertyBoolean &cache_enable) {
    this->cache_enable = cache_enable;
    this->m_cache_enable_isSet = true;
}

OAIConfigNodePropertyArray
OAIComAdobeCqDamS7imagingImplPsPlatformServerServletProperties::getCacheRootPaths() const {
    return cache_root_paths;
}
void
OAIComAdobeCqDamS7imagingImplPsPlatformServerServletProperties::setCacheRootPaths(const OAIConfigNodePropertyArray &cache_root_paths) {
    this->cache_root_paths = cache_root_paths;
    this->m_cache_root_paths_isSet = true;
}

OAIConfigNodePropertyInteger
OAIComAdobeCqDamS7imagingImplPsPlatformServerServletProperties::getCacheMaxSize() const {
    return cache_max_size;
}
void
OAIComAdobeCqDamS7imagingImplPsPlatformServerServletProperties::setCacheMaxSize(const OAIConfigNodePropertyInteger &cache_max_size) {
    this->cache_max_size = cache_max_size;
    this->m_cache_max_size_isSet = true;
}

OAIConfigNodePropertyInteger
OAIComAdobeCqDamS7imagingImplPsPlatformServerServletProperties::getCacheMaxEntries() const {
    return cache_max_entries;
}
void
OAIComAdobeCqDamS7imagingImplPsPlatformServerServletProperties::setCacheMaxEntries(const OAIConfigNodePropertyInteger &cache_max_entries) {
    this->cache_max_entries = cache_max_entries;
    this->m_cache_max_entries_isSet = true;
}


bool
OAIComAdobeCqDamS7imagingImplPsPlatformServerServletProperties::isSet() const {
    bool isObjectUpdated = false;
    do{ 
        if(cache_enable.isSet()){ isObjectUpdated = true; break;}
    
        if(cache_root_paths.isSet()){ isObjectUpdated = true; break;}
    
        if(cache_max_size.isSet()){ isObjectUpdated = true; break;}
    
        if(cache_max_entries.isSet()){ isObjectUpdated = true; break;}
    }while(false);
    return isObjectUpdated;
}

}

