note
 description:"[
		Adobe Experience Manager OSGI config (AEM) API
 		Swagger AEM OSGI is an OpenAPI specification for Adobe Experience Manager (AEM) OSGI Configurations API
  		OpenAPI spec version: 1.0.0-pre.0
 	    Contact: opensource@shinesolutions.com

  	NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

 		 Do not edit the class manually.
 	]"
	date: "$Date$"
	revision: "$Revision$"
	EIS:"Eiffel openapi generator", "src=https://openapi-generator.tech", "protocol=uri"
class COM_DAY_CQ_WCM_CORE_IMPL_VERSION_MANAGER_IMPL_PROPERTIES 

inherit

  ANY
      redefine
          out 
      end


feature --Access

    versionmanager_create_version_on_activation: detachable CONFIG_NODE_PROPERTY_BOOLEAN 
      
    versionmanager_purging_enabled: detachable CONFIG_NODE_PROPERTY_BOOLEAN 
      
    versionmanager_purge_paths: detachable CONFIG_NODE_PROPERTY_ARRAY 
      
    versionmanager_iv_paths: detachable CONFIG_NODE_PROPERTY_ARRAY 
      
    versionmanager_max_age_days: detachable CONFIG_NODE_PROPERTY_INTEGER 
      
    versionmanager_max_number_versions: detachable CONFIG_NODE_PROPERTY_INTEGER 
      
    versionmanager_min_number_versions: detachable CONFIG_NODE_PROPERTY_INTEGER 
      

feature -- Change Element  
 
    set_versionmanager_create_version_on_activation (a_name: like versionmanager_create_version_on_activation)
        -- Set 'versionmanager_create_version_on_activation' with 'a_name'.
      do
        versionmanager_create_version_on_activation := a_name
      ensure
        versionmanager_create_version_on_activation_set: versionmanager_create_version_on_activation = a_name		
      end

    set_versionmanager_purging_enabled (a_name: like versionmanager_purging_enabled)
        -- Set 'versionmanager_purging_enabled' with 'a_name'.
      do
        versionmanager_purging_enabled := a_name
      ensure
        versionmanager_purging_enabled_set: versionmanager_purging_enabled = a_name		
      end

    set_versionmanager_purge_paths (a_name: like versionmanager_purge_paths)
        -- Set 'versionmanager_purge_paths' with 'a_name'.
      do
        versionmanager_purge_paths := a_name
      ensure
        versionmanager_purge_paths_set: versionmanager_purge_paths = a_name		
      end

    set_versionmanager_iv_paths (a_name: like versionmanager_iv_paths)
        -- Set 'versionmanager_iv_paths' with 'a_name'.
      do
        versionmanager_iv_paths := a_name
      ensure
        versionmanager_iv_paths_set: versionmanager_iv_paths = a_name		
      end

    set_versionmanager_max_age_days (a_name: like versionmanager_max_age_days)
        -- Set 'versionmanager_max_age_days' with 'a_name'.
      do
        versionmanager_max_age_days := a_name
      ensure
        versionmanager_max_age_days_set: versionmanager_max_age_days = a_name		
      end

    set_versionmanager_max_number_versions (a_name: like versionmanager_max_number_versions)
        -- Set 'versionmanager_max_number_versions' with 'a_name'.
      do
        versionmanager_max_number_versions := a_name
      ensure
        versionmanager_max_number_versions_set: versionmanager_max_number_versions = a_name		
      end

    set_versionmanager_min_number_versions (a_name: like versionmanager_min_number_versions)
        -- Set 'versionmanager_min_number_versions' with 'a_name'.
      do
        versionmanager_min_number_versions := a_name
      ensure
        versionmanager_min_number_versions_set: versionmanager_min_number_versions = a_name		
      end


 feature -- Status Report

    out: STRING
          -- <Precursor>
      do
        create Result.make_empty
        Result.append("%Nclass COM_DAY_CQ_WCM_CORE_IMPL_VERSION_MANAGER_IMPL_PROPERTIES%N")
        if attached versionmanager_create_version_on_activation as l_versionmanager_create_version_on_activation then
          Result.append ("%Nversionmanager_create_version_on_activation:")
          Result.append (l_versionmanager_create_version_on_activation.out)
          Result.append ("%N")    
        end  
        if attached versionmanager_purging_enabled as l_versionmanager_purging_enabled then
          Result.append ("%Nversionmanager_purging_enabled:")
          Result.append (l_versionmanager_purging_enabled.out)
          Result.append ("%N")    
        end  
        if attached versionmanager_purge_paths as l_versionmanager_purge_paths then
          Result.append ("%Nversionmanager_purge_paths:")
          Result.append (l_versionmanager_purge_paths.out)
          Result.append ("%N")    
        end  
        if attached versionmanager_iv_paths as l_versionmanager_iv_paths then
          Result.append ("%Nversionmanager_iv_paths:")
          Result.append (l_versionmanager_iv_paths.out)
          Result.append ("%N")    
        end  
        if attached versionmanager_max_age_days as l_versionmanager_max_age_days then
          Result.append ("%Nversionmanager_max_age_days:")
          Result.append (l_versionmanager_max_age_days.out)
          Result.append ("%N")    
        end  
        if attached versionmanager_max_number_versions as l_versionmanager_max_number_versions then
          Result.append ("%Nversionmanager_max_number_versions:")
          Result.append (l_versionmanager_max_number_versions.out)
          Result.append ("%N")    
        end  
        if attached versionmanager_min_number_versions as l_versionmanager_min_number_versions then
          Result.append ("%Nversionmanager_min_number_versions:")
          Result.append (l_versionmanager_min_number_versions.out)
          Result.append ("%N")    
        end  
      end
end


