/* 
 * Adobe Experience Manager OSGI config (AEM) API
 *
 * Swagger AEM OSGI is an OpenAPI specification for Adobe Experience Manager (AEM) OSGI Configurations API
 *
 * OpenAPI spec version: 1.0.0-pre.0
 * Contact: opensource@shinesolutions.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Org.OpenAPITools.Client.OpenAPIDateConverter;

namespace Org.OpenAPITools.Model
{
    /// <summary>
    /// ComAdobeCqScreensAnalyticsImplScreensAnalyticsServiceImplProperties
    /// </summary>
    [DataContract]
    public partial class ComAdobeCqScreensAnalyticsImplScreensAnalyticsServiceImplProperties :  IEquatable<ComAdobeCqScreensAnalyticsImplScreensAnalyticsServiceImplProperties>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="ComAdobeCqScreensAnalyticsImplScreensAnalyticsServiceImplProperties" /> class.
        /// </summary>
        /// <param name="comAdobeCqScreensAnalyticsImplUrl">comAdobeCqScreensAnalyticsImplUrl.</param>
        /// <param name="comAdobeCqScreensAnalyticsImplApikey">comAdobeCqScreensAnalyticsImplApikey.</param>
        /// <param name="comAdobeCqScreensAnalyticsImplProject">comAdobeCqScreensAnalyticsImplProject.</param>
        /// <param name="comAdobeCqScreensAnalyticsImplEnvironment">comAdobeCqScreensAnalyticsImplEnvironment.</param>
        /// <param name="comAdobeCqScreensAnalyticsImplSendFrequency">comAdobeCqScreensAnalyticsImplSendFrequency.</param>
        public ComAdobeCqScreensAnalyticsImplScreensAnalyticsServiceImplProperties(ConfigNodePropertyString comAdobeCqScreensAnalyticsImplUrl = default(ConfigNodePropertyString), ConfigNodePropertyString comAdobeCqScreensAnalyticsImplApikey = default(ConfigNodePropertyString), ConfigNodePropertyString comAdobeCqScreensAnalyticsImplProject = default(ConfigNodePropertyString), ConfigNodePropertyDropDown comAdobeCqScreensAnalyticsImplEnvironment = default(ConfigNodePropertyDropDown), ConfigNodePropertyInteger comAdobeCqScreensAnalyticsImplSendFrequency = default(ConfigNodePropertyInteger))
        {
            this.ComAdobeCqScreensAnalyticsImplUrl = comAdobeCqScreensAnalyticsImplUrl;
            this.ComAdobeCqScreensAnalyticsImplApikey = comAdobeCqScreensAnalyticsImplApikey;
            this.ComAdobeCqScreensAnalyticsImplProject = comAdobeCqScreensAnalyticsImplProject;
            this.ComAdobeCqScreensAnalyticsImplEnvironment = comAdobeCqScreensAnalyticsImplEnvironment;
            this.ComAdobeCqScreensAnalyticsImplSendFrequency = comAdobeCqScreensAnalyticsImplSendFrequency;
        }
        
        /// <summary>
        /// Gets or Sets ComAdobeCqScreensAnalyticsImplUrl
        /// </summary>
        [DataMember(Name="com.adobe.cq.screens.analytics.impl.url", EmitDefaultValue=false)]
        public ConfigNodePropertyString ComAdobeCqScreensAnalyticsImplUrl { get; set; }

        /// <summary>
        /// Gets or Sets ComAdobeCqScreensAnalyticsImplApikey
        /// </summary>
        [DataMember(Name="com.adobe.cq.screens.analytics.impl.apikey", EmitDefaultValue=false)]
        public ConfigNodePropertyString ComAdobeCqScreensAnalyticsImplApikey { get; set; }

        /// <summary>
        /// Gets or Sets ComAdobeCqScreensAnalyticsImplProject
        /// </summary>
        [DataMember(Name="com.adobe.cq.screens.analytics.impl.project", EmitDefaultValue=false)]
        public ConfigNodePropertyString ComAdobeCqScreensAnalyticsImplProject { get; set; }

        /// <summary>
        /// Gets or Sets ComAdobeCqScreensAnalyticsImplEnvironment
        /// </summary>
        [DataMember(Name="com.adobe.cq.screens.analytics.impl.environment", EmitDefaultValue=false)]
        public ConfigNodePropertyDropDown ComAdobeCqScreensAnalyticsImplEnvironment { get; set; }

        /// <summary>
        /// Gets or Sets ComAdobeCqScreensAnalyticsImplSendFrequency
        /// </summary>
        [DataMember(Name="com.adobe.cq.screens.analytics.impl.sendFrequency", EmitDefaultValue=false)]
        public ConfigNodePropertyInteger ComAdobeCqScreensAnalyticsImplSendFrequency { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class ComAdobeCqScreensAnalyticsImplScreensAnalyticsServiceImplProperties {\n");
            sb.Append("  ComAdobeCqScreensAnalyticsImplUrl: ").Append(ComAdobeCqScreensAnalyticsImplUrl).Append("\n");
            sb.Append("  ComAdobeCqScreensAnalyticsImplApikey: ").Append(ComAdobeCqScreensAnalyticsImplApikey).Append("\n");
            sb.Append("  ComAdobeCqScreensAnalyticsImplProject: ").Append(ComAdobeCqScreensAnalyticsImplProject).Append("\n");
            sb.Append("  ComAdobeCqScreensAnalyticsImplEnvironment: ").Append(ComAdobeCqScreensAnalyticsImplEnvironment).Append("\n");
            sb.Append("  ComAdobeCqScreensAnalyticsImplSendFrequency: ").Append(ComAdobeCqScreensAnalyticsImplSendFrequency).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as ComAdobeCqScreensAnalyticsImplScreensAnalyticsServiceImplProperties);
        }

        /// <summary>
        /// Returns true if ComAdobeCqScreensAnalyticsImplScreensAnalyticsServiceImplProperties instances are equal
        /// </summary>
        /// <param name="input">Instance of ComAdobeCqScreensAnalyticsImplScreensAnalyticsServiceImplProperties to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(ComAdobeCqScreensAnalyticsImplScreensAnalyticsServiceImplProperties input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.ComAdobeCqScreensAnalyticsImplUrl == input.ComAdobeCqScreensAnalyticsImplUrl ||
                    (this.ComAdobeCqScreensAnalyticsImplUrl != null &&
                    this.ComAdobeCqScreensAnalyticsImplUrl.Equals(input.ComAdobeCqScreensAnalyticsImplUrl))
                ) && 
                (
                    this.ComAdobeCqScreensAnalyticsImplApikey == input.ComAdobeCqScreensAnalyticsImplApikey ||
                    (this.ComAdobeCqScreensAnalyticsImplApikey != null &&
                    this.ComAdobeCqScreensAnalyticsImplApikey.Equals(input.ComAdobeCqScreensAnalyticsImplApikey))
                ) && 
                (
                    this.ComAdobeCqScreensAnalyticsImplProject == input.ComAdobeCqScreensAnalyticsImplProject ||
                    (this.ComAdobeCqScreensAnalyticsImplProject != null &&
                    this.ComAdobeCqScreensAnalyticsImplProject.Equals(input.ComAdobeCqScreensAnalyticsImplProject))
                ) && 
                (
                    this.ComAdobeCqScreensAnalyticsImplEnvironment == input.ComAdobeCqScreensAnalyticsImplEnvironment ||
                    (this.ComAdobeCqScreensAnalyticsImplEnvironment != null &&
                    this.ComAdobeCqScreensAnalyticsImplEnvironment.Equals(input.ComAdobeCqScreensAnalyticsImplEnvironment))
                ) && 
                (
                    this.ComAdobeCqScreensAnalyticsImplSendFrequency == input.ComAdobeCqScreensAnalyticsImplSendFrequency ||
                    (this.ComAdobeCqScreensAnalyticsImplSendFrequency != null &&
                    this.ComAdobeCqScreensAnalyticsImplSendFrequency.Equals(input.ComAdobeCqScreensAnalyticsImplSendFrequency))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.ComAdobeCqScreensAnalyticsImplUrl != null)
                    hashCode = hashCode * 59 + this.ComAdobeCqScreensAnalyticsImplUrl.GetHashCode();
                if (this.ComAdobeCqScreensAnalyticsImplApikey != null)
                    hashCode = hashCode * 59 + this.ComAdobeCqScreensAnalyticsImplApikey.GetHashCode();
                if (this.ComAdobeCqScreensAnalyticsImplProject != null)
                    hashCode = hashCode * 59 + this.ComAdobeCqScreensAnalyticsImplProject.GetHashCode();
                if (this.ComAdobeCqScreensAnalyticsImplEnvironment != null)
                    hashCode = hashCode * 59 + this.ComAdobeCqScreensAnalyticsImplEnvironment.GetHashCode();
                if (this.ComAdobeCqScreensAnalyticsImplSendFrequency != null)
                    hashCode = hashCode * 59 + this.ComAdobeCqScreensAnalyticsImplSendFrequency.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
