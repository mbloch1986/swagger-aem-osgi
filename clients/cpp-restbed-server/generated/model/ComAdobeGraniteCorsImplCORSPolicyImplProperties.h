/**
 * Adobe Experience Manager OSGI config (AEM) API
 * Swagger AEM OSGI is an OpenAPI specification for Adobe Experience Manager (AEM) OSGI Configurations API
 *
 * OpenAPI spec version: 1.0.0-pre.0
 * Contact: opensource@shinesolutions.com
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 3.2.1-SNAPSHOT.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * ComAdobeGraniteCorsImplCORSPolicyImplProperties.h
 *
 * 
 */

#ifndef ComAdobeGraniteCorsImplCORSPolicyImplProperties_H_
#define ComAdobeGraniteCorsImplCORSPolicyImplProperties_H_



#include "ConfigNodePropertyBoolean.h"
#include "ConfigNodePropertyInteger.h"
#include "ConfigNodePropertyArray.h"
#include <memory>

namespace org {
namespace openapitools {
namespace server {
namespace model {

/// <summary>
/// 
/// </summary>
class  ComAdobeGraniteCorsImplCORSPolicyImplProperties
{
public:
    ComAdobeGraniteCorsImplCORSPolicyImplProperties();
    virtual ~ComAdobeGraniteCorsImplCORSPolicyImplProperties();
    
    std::string toJsonString();
    void fromJsonString(std::string const& jsonString);

    /////////////////////////////////////////////
    /// ComAdobeGraniteCorsImplCORSPolicyImplProperties members
    
    /// <summary>
    /// 
    /// </summary>
    std::shared_ptr<ConfigNodePropertyArray> getAlloworigin() const;
    void setAlloworigin(std::shared_ptr<ConfigNodePropertyArray> value);
    /// <summary>
    /// 
    /// </summary>
    std::shared_ptr<ConfigNodePropertyArray> getAlloworiginregexp() const;
    void setAlloworiginregexp(std::shared_ptr<ConfigNodePropertyArray> value);
    /// <summary>
    /// 
    /// </summary>
    std::shared_ptr<ConfigNodePropertyArray> getAllowedpaths() const;
    void setAllowedpaths(std::shared_ptr<ConfigNodePropertyArray> value);
    /// <summary>
    /// 
    /// </summary>
    std::shared_ptr<ConfigNodePropertyArray> getExposedheaders() const;
    void setExposedheaders(std::shared_ptr<ConfigNodePropertyArray> value);
    /// <summary>
    /// 
    /// </summary>
    std::shared_ptr<ConfigNodePropertyInteger> getMaxage() const;
    void setMaxage(std::shared_ptr<ConfigNodePropertyInteger> value);
    /// <summary>
    /// 
    /// </summary>
    std::shared_ptr<ConfigNodePropertyArray> getSupportedheaders() const;
    void setSupportedheaders(std::shared_ptr<ConfigNodePropertyArray> value);
    /// <summary>
    /// 
    /// </summary>
    std::shared_ptr<ConfigNodePropertyArray> getSupportedmethods() const;
    void setSupportedmethods(std::shared_ptr<ConfigNodePropertyArray> value);
    /// <summary>
    /// 
    /// </summary>
    std::shared_ptr<ConfigNodePropertyBoolean> getSupportscredentials() const;
    void setSupportscredentials(std::shared_ptr<ConfigNodePropertyBoolean> value);

protected:
    std::shared_ptr<ConfigNodePropertyArray> m_Alloworigin;
    std::shared_ptr<ConfigNodePropertyArray> m_Alloworiginregexp;
    std::shared_ptr<ConfigNodePropertyArray> m_Allowedpaths;
    std::shared_ptr<ConfigNodePropertyArray> m_Exposedheaders;
    std::shared_ptr<ConfigNodePropertyInteger> m_Maxage;
    std::shared_ptr<ConfigNodePropertyArray> m_Supportedheaders;
    std::shared_ptr<ConfigNodePropertyArray> m_Supportedmethods;
    std::shared_ptr<ConfigNodePropertyBoolean> m_Supportscredentials;
};

}
}
}
}

#endif /* ComAdobeGraniteCorsImplCORSPolicyImplProperties_H_ */
