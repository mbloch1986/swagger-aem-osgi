/*
 * Adobe Experience Manager OSGI config (AEM) API
 *
 * Swagger AEM OSGI is an OpenAPI specification for Adobe Experience Manager (AEM) OSGI Configurations API
 *
 * OpenAPI spec version: 1.0.0-pre.0
 * Contact: opensource@shinesolutions.com
 * Generated by: https://openapi-generator.tech
 */

using System;
using System.Linq;
using System.Text;
using System.Collections.Generic;
using System.ComponentModel.DataAnnotations;
using System.Runtime.Serialization;
using Newtonsoft.Json;

namespace Org.OpenAPITools.Models
{ 
    /// <summary>
    /// 
    /// </summary>
    [DataContract]
    public partial class ComDayCqAuthImplLoginSelectorHandlerProperties : IEquatable<ComDayCqAuthImplLoginSelectorHandlerProperties>
    { 
        /// <summary>
        /// Gets or Sets Path
        /// </summary>
        [DataMember(Name="path")]
        public ConfigNodePropertyString Path { get; set; }

        /// <summary>
        /// Gets or Sets ServiceRanking
        /// </summary>
        [DataMember(Name="service.ranking")]
        public ConfigNodePropertyInteger ServiceRanking { get; set; }

        /// <summary>
        /// Gets or Sets AuthLoginselectorMappings
        /// </summary>
        [DataMember(Name="auth.loginselector.mappings")]
        public ConfigNodePropertyArray AuthLoginselectorMappings { get; set; }

        /// <summary>
        /// Gets or Sets AuthLoginselectorChangepwMappings
        /// </summary>
        [DataMember(Name="auth.loginselector.changepw.mappings")]
        public ConfigNodePropertyArray AuthLoginselectorChangepwMappings { get; set; }

        /// <summary>
        /// Gets or Sets AuthLoginselectorDefaultloginpage
        /// </summary>
        [DataMember(Name="auth.loginselector.defaultloginpage")]
        public ConfigNodePropertyString AuthLoginselectorDefaultloginpage { get; set; }

        /// <summary>
        /// Gets or Sets AuthLoginselectorDefaultchangepwpage
        /// </summary>
        [DataMember(Name="auth.loginselector.defaultchangepwpage")]
        public ConfigNodePropertyString AuthLoginselectorDefaultchangepwpage { get; set; }

        /// <summary>
        /// Gets or Sets AuthLoginselectorHandle
        /// </summary>
        [DataMember(Name="auth.loginselector.handle")]
        public ConfigNodePropertyArray AuthLoginselectorHandle { get; set; }

        /// <summary>
        /// Gets or Sets AuthLoginselectorHandleAllExtensions
        /// </summary>
        [DataMember(Name="auth.loginselector.handle.all.extensions")]
        public ConfigNodePropertyBoolean AuthLoginselectorHandleAllExtensions { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class ComDayCqAuthImplLoginSelectorHandlerProperties {\n");
            sb.Append("  Path: ").Append(Path).Append("\n");
            sb.Append("  ServiceRanking: ").Append(ServiceRanking).Append("\n");
            sb.Append("  AuthLoginselectorMappings: ").Append(AuthLoginselectorMappings).Append("\n");
            sb.Append("  AuthLoginselectorChangepwMappings: ").Append(AuthLoginselectorChangepwMappings).Append("\n");
            sb.Append("  AuthLoginselectorDefaultloginpage: ").Append(AuthLoginselectorDefaultloginpage).Append("\n");
            sb.Append("  AuthLoginselectorDefaultchangepwpage: ").Append(AuthLoginselectorDefaultchangepwpage).Append("\n");
            sb.Append("  AuthLoginselectorHandle: ").Append(AuthLoginselectorHandle).Append("\n");
            sb.Append("  AuthLoginselectorHandleAllExtensions: ").Append(AuthLoginselectorHandleAllExtensions).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            if (obj is null) return false;
            if (ReferenceEquals(this, obj)) return true;
            return obj.GetType() == GetType() && Equals((ComDayCqAuthImplLoginSelectorHandlerProperties)obj);
        }

        /// <summary>
        /// Returns true if ComDayCqAuthImplLoginSelectorHandlerProperties instances are equal
        /// </summary>
        /// <param name="other">Instance of ComDayCqAuthImplLoginSelectorHandlerProperties to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(ComDayCqAuthImplLoginSelectorHandlerProperties other)
        {
            if (other is null) return false;
            if (ReferenceEquals(this, other)) return true;

            return 
                (
                    Path == other.Path ||
                    Path != null &&
                    Path.Equals(other.Path)
                ) && 
                (
                    ServiceRanking == other.ServiceRanking ||
                    ServiceRanking != null &&
                    ServiceRanking.Equals(other.ServiceRanking)
                ) && 
                (
                    AuthLoginselectorMappings == other.AuthLoginselectorMappings ||
                    AuthLoginselectorMappings != null &&
                    AuthLoginselectorMappings.Equals(other.AuthLoginselectorMappings)
                ) && 
                (
                    AuthLoginselectorChangepwMappings == other.AuthLoginselectorChangepwMappings ||
                    AuthLoginselectorChangepwMappings != null &&
                    AuthLoginselectorChangepwMappings.Equals(other.AuthLoginselectorChangepwMappings)
                ) && 
                (
                    AuthLoginselectorDefaultloginpage == other.AuthLoginselectorDefaultloginpage ||
                    AuthLoginselectorDefaultloginpage != null &&
                    AuthLoginselectorDefaultloginpage.Equals(other.AuthLoginselectorDefaultloginpage)
                ) && 
                (
                    AuthLoginselectorDefaultchangepwpage == other.AuthLoginselectorDefaultchangepwpage ||
                    AuthLoginselectorDefaultchangepwpage != null &&
                    AuthLoginselectorDefaultchangepwpage.Equals(other.AuthLoginselectorDefaultchangepwpage)
                ) && 
                (
                    AuthLoginselectorHandle == other.AuthLoginselectorHandle ||
                    AuthLoginselectorHandle != null &&
                    AuthLoginselectorHandle.Equals(other.AuthLoginselectorHandle)
                ) && 
                (
                    AuthLoginselectorHandleAllExtensions == other.AuthLoginselectorHandleAllExtensions ||
                    AuthLoginselectorHandleAllExtensions != null &&
                    AuthLoginselectorHandleAllExtensions.Equals(other.AuthLoginselectorHandleAllExtensions)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                var hashCode = 41;
                // Suitable nullity checks etc, of course :)
                    if (Path != null)
                    hashCode = hashCode * 59 + Path.GetHashCode();
                    if (ServiceRanking != null)
                    hashCode = hashCode * 59 + ServiceRanking.GetHashCode();
                    if (AuthLoginselectorMappings != null)
                    hashCode = hashCode * 59 + AuthLoginselectorMappings.GetHashCode();
                    if (AuthLoginselectorChangepwMappings != null)
                    hashCode = hashCode * 59 + AuthLoginselectorChangepwMappings.GetHashCode();
                    if (AuthLoginselectorDefaultloginpage != null)
                    hashCode = hashCode * 59 + AuthLoginselectorDefaultloginpage.GetHashCode();
                    if (AuthLoginselectorDefaultchangepwpage != null)
                    hashCode = hashCode * 59 + AuthLoginselectorDefaultchangepwpage.GetHashCode();
                    if (AuthLoginselectorHandle != null)
                    hashCode = hashCode * 59 + AuthLoginselectorHandle.GetHashCode();
                    if (AuthLoginselectorHandleAllExtensions != null)
                    hashCode = hashCode * 59 + AuthLoginselectorHandleAllExtensions.GetHashCode();
                return hashCode;
            }
        }

        #region Operators
        #pragma warning disable 1591

        public static bool operator ==(ComDayCqAuthImplLoginSelectorHandlerProperties left, ComDayCqAuthImplLoginSelectorHandlerProperties right)
        {
            return Equals(left, right);
        }

        public static bool operator !=(ComDayCqAuthImplLoginSelectorHandlerProperties left, ComDayCqAuthImplLoginSelectorHandlerProperties right)
        {
            return !Equals(left, right);
        }

        #pragma warning restore 1591
        #endregion Operators
    }
}
