/**
 * Adobe Experience Manager OSGI config (AEM) API
 * Swagger AEM OSGI is an OpenAPI specification for Adobe Experience Manager (AEM) OSGI Configurations API
 *
 * OpenAPI spec version: 1.0.0-pre.0
 * Contact: opensource@shinesolutions.com
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 3.2.1-SNAPSHOT.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */



#include "ComAdobeGraniteLicenseImplLicenseCheckFilterProperties.h"

namespace org {
namespace openapitools {
namespace client {
namespace model {

ComAdobeGraniteLicenseImplLicenseCheckFilterProperties::ComAdobeGraniteLicenseImplLicenseCheckFilterProperties()
{
    m_CheckInternvalIsSet = false;
    m_ExcludeIdsIsSet = false;
    m_EncryptPingIsSet = false;
}

ComAdobeGraniteLicenseImplLicenseCheckFilterProperties::~ComAdobeGraniteLicenseImplLicenseCheckFilterProperties()
{
}

void ComAdobeGraniteLicenseImplLicenseCheckFilterProperties::validate()
{
    // TODO: implement validation
}

web::json::value ComAdobeGraniteLicenseImplLicenseCheckFilterProperties::toJson() const
{
    web::json::value val = web::json::value::object();

    if(m_CheckInternvalIsSet)
    {
        val[utility::conversions::to_string_t("checkInternval")] = ModelBase::toJson(m_CheckInternval);
    }
    if(m_ExcludeIdsIsSet)
    {
        val[utility::conversions::to_string_t("excludeIds")] = ModelBase::toJson(m_ExcludeIds);
    }
    if(m_EncryptPingIsSet)
    {
        val[utility::conversions::to_string_t("encryptPing")] = ModelBase::toJson(m_EncryptPing);
    }

    return val;
}

void ComAdobeGraniteLicenseImplLicenseCheckFilterProperties::fromJson(web::json::value& val)
{
    if(val.has_field(utility::conversions::to_string_t("checkInternval")))
    {
        if(!val[utility::conversions::to_string_t("checkInternval")].is_null())
        {
            std::shared_ptr<ConfigNodePropertyInteger> newItem(new ConfigNodePropertyInteger());
            newItem->fromJson(val[utility::conversions::to_string_t("checkInternval")]);
            setCheckInternval( newItem );
        }
    }
    if(val.has_field(utility::conversions::to_string_t("excludeIds")))
    {
        if(!val[utility::conversions::to_string_t("excludeIds")].is_null())
        {
            std::shared_ptr<ConfigNodePropertyArray> newItem(new ConfigNodePropertyArray());
            newItem->fromJson(val[utility::conversions::to_string_t("excludeIds")]);
            setExcludeIds( newItem );
        }
    }
    if(val.has_field(utility::conversions::to_string_t("encryptPing")))
    {
        if(!val[utility::conversions::to_string_t("encryptPing")].is_null())
        {
            std::shared_ptr<ConfigNodePropertyBoolean> newItem(new ConfigNodePropertyBoolean());
            newItem->fromJson(val[utility::conversions::to_string_t("encryptPing")]);
            setEncryptPing( newItem );
        }
    }
}

void ComAdobeGraniteLicenseImplLicenseCheckFilterProperties::toMultipart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix) const
{
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t("."))
    {
        namePrefix += utility::conversions::to_string_t(".");
    }

    if(m_CheckInternvalIsSet)
    {
        if (m_CheckInternval.get())
        {
            m_CheckInternval->toMultipart(multipart, utility::conversions::to_string_t("checkInternval."));
        }
    }
    if(m_ExcludeIdsIsSet)
    {
        if (m_ExcludeIds.get())
        {
            m_ExcludeIds->toMultipart(multipart, utility::conversions::to_string_t("excludeIds."));
        }
    }
    if(m_EncryptPingIsSet)
    {
        if (m_EncryptPing.get())
        {
            m_EncryptPing->toMultipart(multipart, utility::conversions::to_string_t("encryptPing."));
        }
    }
}

void ComAdobeGraniteLicenseImplLicenseCheckFilterProperties::fromMultiPart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix)
{
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t("."))
    {
        namePrefix += utility::conversions::to_string_t(".");
    }

    if(multipart->hasContent(utility::conversions::to_string_t("checkInternval")))
    {
        if(multipart->hasContent(utility::conversions::to_string_t("checkInternval")))
        {
            std::shared_ptr<ConfigNodePropertyInteger> newItem(new ConfigNodePropertyInteger());
            newItem->fromMultiPart(multipart, utility::conversions::to_string_t("checkInternval."));
            setCheckInternval( newItem );
        }
    }
    if(multipart->hasContent(utility::conversions::to_string_t("excludeIds")))
    {
        if(multipart->hasContent(utility::conversions::to_string_t("excludeIds")))
        {
            std::shared_ptr<ConfigNodePropertyArray> newItem(new ConfigNodePropertyArray());
            newItem->fromMultiPart(multipart, utility::conversions::to_string_t("excludeIds."));
            setExcludeIds( newItem );
        }
    }
    if(multipart->hasContent(utility::conversions::to_string_t("encryptPing")))
    {
        if(multipart->hasContent(utility::conversions::to_string_t("encryptPing")))
        {
            std::shared_ptr<ConfigNodePropertyBoolean> newItem(new ConfigNodePropertyBoolean());
            newItem->fromMultiPart(multipart, utility::conversions::to_string_t("encryptPing."));
            setEncryptPing( newItem );
        }
    }
}

std::shared_ptr<ConfigNodePropertyInteger> ComAdobeGraniteLicenseImplLicenseCheckFilterProperties::getCheckInternval() const
{
    return m_CheckInternval;
}


void ComAdobeGraniteLicenseImplLicenseCheckFilterProperties::setCheckInternval(std::shared_ptr<ConfigNodePropertyInteger> value)
{
    m_CheckInternval = value;
    m_CheckInternvalIsSet = true;
}
bool ComAdobeGraniteLicenseImplLicenseCheckFilterProperties::checkInternvalIsSet() const
{
    return m_CheckInternvalIsSet;
}

void ComAdobeGraniteLicenseImplLicenseCheckFilterProperties::unsetCheckInternval()
{
    m_CheckInternvalIsSet = false;
}

std::shared_ptr<ConfigNodePropertyArray> ComAdobeGraniteLicenseImplLicenseCheckFilterProperties::getExcludeIds() const
{
    return m_ExcludeIds;
}


void ComAdobeGraniteLicenseImplLicenseCheckFilterProperties::setExcludeIds(std::shared_ptr<ConfigNodePropertyArray> value)
{
    m_ExcludeIds = value;
    m_ExcludeIdsIsSet = true;
}
bool ComAdobeGraniteLicenseImplLicenseCheckFilterProperties::excludeIdsIsSet() const
{
    return m_ExcludeIdsIsSet;
}

void ComAdobeGraniteLicenseImplLicenseCheckFilterProperties::unsetExcludeIds()
{
    m_ExcludeIdsIsSet = false;
}

std::shared_ptr<ConfigNodePropertyBoolean> ComAdobeGraniteLicenseImplLicenseCheckFilterProperties::getEncryptPing() const
{
    return m_EncryptPing;
}


void ComAdobeGraniteLicenseImplLicenseCheckFilterProperties::setEncryptPing(std::shared_ptr<ConfigNodePropertyBoolean> value)
{
    m_EncryptPing = value;
    m_EncryptPingIsSet = true;
}
bool ComAdobeGraniteLicenseImplLicenseCheckFilterProperties::encryptPingIsSet() const
{
    return m_EncryptPingIsSet;
}

void ComAdobeGraniteLicenseImplLicenseCheckFilterProperties::unsetEncryptPing()
{
    m_EncryptPingIsSet = false;
}

}
}
}
}

