/*
 * Adobe Experience Manager OSGI config (AEM) API
 * Swagger AEM OSGI is an OpenAPI specification for Adobe Experience Manager (AEM) OSGI Configurations API
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: opensource@shinesolutions.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.shinesolutions.swaggeraemosgi4j.model;

import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import com.shinesolutions.swaggeraemosgi4j.model.ConfigNodePropertyArray;
import com.shinesolutions.swaggeraemosgi4j.model.ConfigNodePropertyBoolean;
import com.shinesolutions.swaggeraemosgi4j.model.ConfigNodePropertyInteger;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.io.IOException;
import org.junit.Assert;
import org.junit.Ignore;
import org.junit.Test;


/**
 * Model tests for ComDayCqWcmCoreImplVersionPurgeTaskProperties
 */
public class ComDayCqWcmCoreImplVersionPurgeTaskPropertiesTest {
    private final ComDayCqWcmCoreImplVersionPurgeTaskProperties model = new ComDayCqWcmCoreImplVersionPurgeTaskProperties();

    /**
     * Model tests for ComDayCqWcmCoreImplVersionPurgeTaskProperties
     */
    @Test
    public void testComDayCqWcmCoreImplVersionPurgeTaskProperties() {
        // TODO: test ComDayCqWcmCoreImplVersionPurgeTaskProperties
    }

    /**
     * Test the property 'versionpurgePaths'
     */
    @Test
    public void versionpurgePathsTest() {
        // TODO: test versionpurgePaths
    }

    /**
     * Test the property 'versionpurgeRecursive'
     */
    @Test
    public void versionpurgeRecursiveTest() {
        // TODO: test versionpurgeRecursive
    }

    /**
     * Test the property 'versionpurgeMaxVersions'
     */
    @Test
    public void versionpurgeMaxVersionsTest() {
        // TODO: test versionpurgeMaxVersions
    }

    /**
     * Test the property 'versionpurgeMinVersions'
     */
    @Test
    public void versionpurgeMinVersionsTest() {
        // TODO: test versionpurgeMinVersions
    }

    /**
     * Test the property 'versionpurgeMaxAgeDays'
     */
    @Test
    public void versionpurgeMaxAgeDaysTest() {
        // TODO: test versionpurgeMaxAgeDays
    }

}
