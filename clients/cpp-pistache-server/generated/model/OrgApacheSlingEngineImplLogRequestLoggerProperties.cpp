/**
* Adobe Experience Manager OSGI config (AEM) API
* Swagger AEM OSGI is an OpenAPI specification for Adobe Experience Manager (AEM) OSGI Configurations API
*
* OpenAPI spec version: 1.0.0-pre.0
* Contact: opensource@shinesolutions.com
*
* NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
* https://openapi-generator.tech
* Do not edit the class manually.
*/


#include "OrgApacheSlingEngineImplLogRequestLoggerProperties.h"

namespace org {
namespace openapitools {
namespace server {
namespace model {

OrgApacheSlingEngineImplLogRequestLoggerProperties::OrgApacheSlingEngineImplLogRequestLoggerProperties()
{
    m_Request_log_outputIsSet = false;
    m_Request_log_outputtypeIsSet = false;
    m_Request_log_enabledIsSet = false;
    m_Access_log_outputIsSet = false;
    m_Access_log_outputtypeIsSet = false;
    m_Access_log_enabledIsSet = false;
    
}

OrgApacheSlingEngineImplLogRequestLoggerProperties::~OrgApacheSlingEngineImplLogRequestLoggerProperties()
{
}

void OrgApacheSlingEngineImplLogRequestLoggerProperties::validate()
{
    // TODO: implement validation
}

nlohmann::json OrgApacheSlingEngineImplLogRequestLoggerProperties::toJson() const
{
    nlohmann::json val = nlohmann::json::object();

    if(m_Request_log_outputIsSet)
    {
        val["request.log.output"] = ModelBase::toJson(m_Request_log_output);
    }
    if(m_Request_log_outputtypeIsSet)
    {
        val["request.log.outputtype"] = ModelBase::toJson(m_Request_log_outputtype);
    }
    if(m_Request_log_enabledIsSet)
    {
        val["request.log.enabled"] = ModelBase::toJson(m_Request_log_enabled);
    }
    if(m_Access_log_outputIsSet)
    {
        val["access.log.output"] = ModelBase::toJson(m_Access_log_output);
    }
    if(m_Access_log_outputtypeIsSet)
    {
        val["access.log.outputtype"] = ModelBase::toJson(m_Access_log_outputtype);
    }
    if(m_Access_log_enabledIsSet)
    {
        val["access.log.enabled"] = ModelBase::toJson(m_Access_log_enabled);
    }
    

    return val;
}

void OrgApacheSlingEngineImplLogRequestLoggerProperties::fromJson(nlohmann::json& val)
{
    if(val.find("request.log.output") != val.end())
    {
        if(!val["request.log.output"].is_null())
        {
            ConfigNodePropertyString newItem;
            newItem.fromJson(val["request.log.output"]);
            setRequestLogOutput( newItem );
        }
        
    }
    if(val.find("request.log.outputtype") != val.end())
    {
        if(!val["request.log.outputtype"].is_null())
        {
            ConfigNodePropertyDropDown newItem;
            newItem.fromJson(val["request.log.outputtype"]);
            setRequestLogOutputtype( newItem );
        }
        
    }
    if(val.find("request.log.enabled") != val.end())
    {
        if(!val["request.log.enabled"].is_null())
        {
            ConfigNodePropertyBoolean newItem;
            newItem.fromJson(val["request.log.enabled"]);
            setRequestLogEnabled( newItem );
        }
        
    }
    if(val.find("access.log.output") != val.end())
    {
        if(!val["access.log.output"].is_null())
        {
            ConfigNodePropertyString newItem;
            newItem.fromJson(val["access.log.output"]);
            setAccessLogOutput( newItem );
        }
        
    }
    if(val.find("access.log.outputtype") != val.end())
    {
        if(!val["access.log.outputtype"].is_null())
        {
            ConfigNodePropertyDropDown newItem;
            newItem.fromJson(val["access.log.outputtype"]);
            setAccessLogOutputtype( newItem );
        }
        
    }
    if(val.find("access.log.enabled") != val.end())
    {
        if(!val["access.log.enabled"].is_null())
        {
            ConfigNodePropertyBoolean newItem;
            newItem.fromJson(val["access.log.enabled"]);
            setAccessLogEnabled( newItem );
        }
        
    }
    
}


ConfigNodePropertyString OrgApacheSlingEngineImplLogRequestLoggerProperties::getRequestLogOutput() const
{
    return m_Request_log_output;
}
void OrgApacheSlingEngineImplLogRequestLoggerProperties::setRequestLogOutput(ConfigNodePropertyString const& value)
{
    m_Request_log_output = value;
    m_Request_log_outputIsSet = true;
}
bool OrgApacheSlingEngineImplLogRequestLoggerProperties::requestLogOutputIsSet() const
{
    return m_Request_log_outputIsSet;
}
void OrgApacheSlingEngineImplLogRequestLoggerProperties::unsetRequest_log_output()
{
    m_Request_log_outputIsSet = false;
}
ConfigNodePropertyDropDown OrgApacheSlingEngineImplLogRequestLoggerProperties::getRequestLogOutputtype() const
{
    return m_Request_log_outputtype;
}
void OrgApacheSlingEngineImplLogRequestLoggerProperties::setRequestLogOutputtype(ConfigNodePropertyDropDown const& value)
{
    m_Request_log_outputtype = value;
    m_Request_log_outputtypeIsSet = true;
}
bool OrgApacheSlingEngineImplLogRequestLoggerProperties::requestLogOutputtypeIsSet() const
{
    return m_Request_log_outputtypeIsSet;
}
void OrgApacheSlingEngineImplLogRequestLoggerProperties::unsetRequest_log_outputtype()
{
    m_Request_log_outputtypeIsSet = false;
}
ConfigNodePropertyBoolean OrgApacheSlingEngineImplLogRequestLoggerProperties::getRequestLogEnabled() const
{
    return m_Request_log_enabled;
}
void OrgApacheSlingEngineImplLogRequestLoggerProperties::setRequestLogEnabled(ConfigNodePropertyBoolean const& value)
{
    m_Request_log_enabled = value;
    m_Request_log_enabledIsSet = true;
}
bool OrgApacheSlingEngineImplLogRequestLoggerProperties::requestLogEnabledIsSet() const
{
    return m_Request_log_enabledIsSet;
}
void OrgApacheSlingEngineImplLogRequestLoggerProperties::unsetRequest_log_enabled()
{
    m_Request_log_enabledIsSet = false;
}
ConfigNodePropertyString OrgApacheSlingEngineImplLogRequestLoggerProperties::getAccessLogOutput() const
{
    return m_Access_log_output;
}
void OrgApacheSlingEngineImplLogRequestLoggerProperties::setAccessLogOutput(ConfigNodePropertyString const& value)
{
    m_Access_log_output = value;
    m_Access_log_outputIsSet = true;
}
bool OrgApacheSlingEngineImplLogRequestLoggerProperties::accessLogOutputIsSet() const
{
    return m_Access_log_outputIsSet;
}
void OrgApacheSlingEngineImplLogRequestLoggerProperties::unsetAccess_log_output()
{
    m_Access_log_outputIsSet = false;
}
ConfigNodePropertyDropDown OrgApacheSlingEngineImplLogRequestLoggerProperties::getAccessLogOutputtype() const
{
    return m_Access_log_outputtype;
}
void OrgApacheSlingEngineImplLogRequestLoggerProperties::setAccessLogOutputtype(ConfigNodePropertyDropDown const& value)
{
    m_Access_log_outputtype = value;
    m_Access_log_outputtypeIsSet = true;
}
bool OrgApacheSlingEngineImplLogRequestLoggerProperties::accessLogOutputtypeIsSet() const
{
    return m_Access_log_outputtypeIsSet;
}
void OrgApacheSlingEngineImplLogRequestLoggerProperties::unsetAccess_log_outputtype()
{
    m_Access_log_outputtypeIsSet = false;
}
ConfigNodePropertyBoolean OrgApacheSlingEngineImplLogRequestLoggerProperties::getAccessLogEnabled() const
{
    return m_Access_log_enabled;
}
void OrgApacheSlingEngineImplLogRequestLoggerProperties::setAccessLogEnabled(ConfigNodePropertyBoolean const& value)
{
    m_Access_log_enabled = value;
    m_Access_log_enabledIsSet = true;
}
bool OrgApacheSlingEngineImplLogRequestLoggerProperties::accessLogEnabledIsSet() const
{
    return m_Access_log_enabledIsSet;
}
void OrgApacheSlingEngineImplLogRequestLoggerProperties::unsetAccess_log_enabled()
{
    m_Access_log_enabledIsSet = false;
}

}
}
}
}

