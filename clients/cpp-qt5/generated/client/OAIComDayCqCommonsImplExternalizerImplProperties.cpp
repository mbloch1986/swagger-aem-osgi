/**
 * Adobe Experience Manager OSGI config (AEM) API
 * Swagger AEM OSGI is an OpenAPI specification for Adobe Experience Manager (AEM) OSGI Configurations API
 *
 * OpenAPI spec version: 1.0.0-pre.0
 * Contact: opensource@shinesolutions.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


#include "OAIComDayCqCommonsImplExternalizerImplProperties.h"

#include "OAIHelpers.h"

#include <QJsonDocument>
#include <QJsonArray>
#include <QObject>
#include <QDebug>

namespace OpenAPI {

OAIComDayCqCommonsImplExternalizerImplProperties::OAIComDayCqCommonsImplExternalizerImplProperties(QString json) {
    init();
    this->fromJson(json);
}

OAIComDayCqCommonsImplExternalizerImplProperties::OAIComDayCqCommonsImplExternalizerImplProperties() {
    init();
}

OAIComDayCqCommonsImplExternalizerImplProperties::~OAIComDayCqCommonsImplExternalizerImplProperties() {
    this->cleanup();
}

void
OAIComDayCqCommonsImplExternalizerImplProperties::init() {
    externalizer_domains = new OAIConfigNodePropertyArray();
    m_externalizer_domains_isSet = false;
    externalizer_host = new OAIConfigNodePropertyString();
    m_externalizer_host_isSet = false;
    externalizer_contextpath = new OAIConfigNodePropertyString();
    m_externalizer_contextpath_isSet = false;
    externalizer_encodedpath = new OAIConfigNodePropertyBoolean();
    m_externalizer_encodedpath_isSet = false;
}

void
OAIComDayCqCommonsImplExternalizerImplProperties::cleanup() {
    if(externalizer_domains != nullptr) { 
        delete externalizer_domains;
    }
    if(externalizer_host != nullptr) { 
        delete externalizer_host;
    }
    if(externalizer_contextpath != nullptr) { 
        delete externalizer_contextpath;
    }
    if(externalizer_encodedpath != nullptr) { 
        delete externalizer_encodedpath;
    }
}

OAIComDayCqCommonsImplExternalizerImplProperties*
OAIComDayCqCommonsImplExternalizerImplProperties::fromJson(QString json) {
    QByteArray array (json.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
    return this;
}

void
OAIComDayCqCommonsImplExternalizerImplProperties::fromJsonObject(QJsonObject pJson) {
    ::OpenAPI::setValue(&externalizer_domains, pJson["externalizer.domains"], "OAIConfigNodePropertyArray", "OAIConfigNodePropertyArray");
    
    ::OpenAPI::setValue(&externalizer_host, pJson["externalizer.host"], "OAIConfigNodePropertyString", "OAIConfigNodePropertyString");
    
    ::OpenAPI::setValue(&externalizer_contextpath, pJson["externalizer.contextpath"], "OAIConfigNodePropertyString", "OAIConfigNodePropertyString");
    
    ::OpenAPI::setValue(&externalizer_encodedpath, pJson["externalizer.encodedpath"], "OAIConfigNodePropertyBoolean", "OAIConfigNodePropertyBoolean");
    
}

QString
OAIComDayCqCommonsImplExternalizerImplProperties::asJson ()
{
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject
OAIComDayCqCommonsImplExternalizerImplProperties::asJsonObject() {
    QJsonObject obj;
    if((externalizer_domains != nullptr) && (externalizer_domains->isSet())){
        toJsonValue(QString("externalizer.domains"), externalizer_domains, obj, QString("OAIConfigNodePropertyArray"));
    }
    if((externalizer_host != nullptr) && (externalizer_host->isSet())){
        toJsonValue(QString("externalizer.host"), externalizer_host, obj, QString("OAIConfigNodePropertyString"));
    }
    if((externalizer_contextpath != nullptr) && (externalizer_contextpath->isSet())){
        toJsonValue(QString("externalizer.contextpath"), externalizer_contextpath, obj, QString("OAIConfigNodePropertyString"));
    }
    if((externalizer_encodedpath != nullptr) && (externalizer_encodedpath->isSet())){
        toJsonValue(QString("externalizer.encodedpath"), externalizer_encodedpath, obj, QString("OAIConfigNodePropertyBoolean"));
    }

    return obj;
}

OAIConfigNodePropertyArray*
OAIComDayCqCommonsImplExternalizerImplProperties::getExternalizerDomains() {
    return externalizer_domains;
}
void
OAIComDayCqCommonsImplExternalizerImplProperties::setExternalizerDomains(OAIConfigNodePropertyArray* externalizer_domains) {
    this->externalizer_domains = externalizer_domains;
    this->m_externalizer_domains_isSet = true;
}

OAIConfigNodePropertyString*
OAIComDayCqCommonsImplExternalizerImplProperties::getExternalizerHost() {
    return externalizer_host;
}
void
OAIComDayCqCommonsImplExternalizerImplProperties::setExternalizerHost(OAIConfigNodePropertyString* externalizer_host) {
    this->externalizer_host = externalizer_host;
    this->m_externalizer_host_isSet = true;
}

OAIConfigNodePropertyString*
OAIComDayCqCommonsImplExternalizerImplProperties::getExternalizerContextpath() {
    return externalizer_contextpath;
}
void
OAIComDayCqCommonsImplExternalizerImplProperties::setExternalizerContextpath(OAIConfigNodePropertyString* externalizer_contextpath) {
    this->externalizer_contextpath = externalizer_contextpath;
    this->m_externalizer_contextpath_isSet = true;
}

OAIConfigNodePropertyBoolean*
OAIComDayCqCommonsImplExternalizerImplProperties::getExternalizerEncodedpath() {
    return externalizer_encodedpath;
}
void
OAIComDayCqCommonsImplExternalizerImplProperties::setExternalizerEncodedpath(OAIConfigNodePropertyBoolean* externalizer_encodedpath) {
    this->externalizer_encodedpath = externalizer_encodedpath;
    this->m_externalizer_encodedpath_isSet = true;
}


bool
OAIComDayCqCommonsImplExternalizerImplProperties::isSet(){
    bool isObjectUpdated = false;
    do{
        if(externalizer_domains != nullptr && externalizer_domains->isSet()){ isObjectUpdated = true; break;}
        if(externalizer_host != nullptr && externalizer_host->isSet()){ isObjectUpdated = true; break;}
        if(externalizer_contextpath != nullptr && externalizer_contextpath->isSet()){ isObjectUpdated = true; break;}
        if(externalizer_encodedpath != nullptr && externalizer_encodedpath->isSet()){ isObjectUpdated = true; break;}
    }while(false);
    return isObjectUpdated;
}
}

