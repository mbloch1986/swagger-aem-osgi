/**
 * Adobe Experience Manager OSGI config (AEM) API
 * Swagger AEM OSGI is an OpenAPI specification for Adobe Experience Manager (AEM) OSGI Configurations API
 *
 * OpenAPI spec version: 1.0.0-pre.0
 * Contact: opensource@shinesolutions.com
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 3.2.1-SNAPSHOT.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */



#include "ComAdobeCqScreensMqActivemqImplArtemisJMSProviderProperties.h"

namespace org {
namespace openapitools {
namespace client {
namespace model {

ComAdobeCqScreensMqActivemqImplArtemisJMSProviderProperties::ComAdobeCqScreensMqActivemqImplArtemisJMSProviderProperties()
{
    m_Service_rankingIsSet = false;
    m_Global_sizeIsSet = false;
    m_Max_disk_usageIsSet = false;
    m_Persistence_enabledIsSet = false;
    m_Thread_pool_max_sizeIsSet = false;
    m_Scheduled_thread_pool_max_sizeIsSet = false;
    m_Graceful_shutdown_timeoutIsSet = false;
    m_QueuesIsSet = false;
    m_TopicsIsSet = false;
    m_Addresses_max_delivery_attemptsIsSet = false;
    m_Addresses_expiry_delayIsSet = false;
    m_Addresses_address_full_message_policyIsSet = false;
    m_Addresses_max_size_bytesIsSet = false;
    m_Addresses_page_size_bytesIsSet = false;
    m_Addresses_page_cache_max_sizeIsSet = false;
    m_Cluster_userIsSet = false;
    m_Cluster_passwordIsSet = false;
    m_Cluster_call_timeoutIsSet = false;
    m_Cluster_call_failover_timeoutIsSet = false;
    m_Cluster_client_failure_check_periodIsSet = false;
    m_Cluster_notification_attemptsIsSet = false;
    m_Cluster_notification_intervalIsSet = false;
    m_Id_cache_sizeIsSet = false;
    m_Cluster_confirmation_window_sizeIsSet = false;
    m_Cluster_connection_ttlIsSet = false;
    m_Cluster_duplicate_detectionIsSet = false;
    m_Cluster_initial_connect_attemptsIsSet = false;
    m_Cluster_max_retry_intervalIsSet = false;
    m_Cluster_min_large_message_sizeIsSet = false;
    m_Cluster_producer_window_sizeIsSet = false;
    m_Cluster_reconnect_attemptsIsSet = false;
    m_Cluster_retry_intervalIsSet = false;
    m_Cluster_retry_interval_multiplierIsSet = false;
}

ComAdobeCqScreensMqActivemqImplArtemisJMSProviderProperties::~ComAdobeCqScreensMqActivemqImplArtemisJMSProviderProperties()
{
}

void ComAdobeCqScreensMqActivemqImplArtemisJMSProviderProperties::validate()
{
    // TODO: implement validation
}

web::json::value ComAdobeCqScreensMqActivemqImplArtemisJMSProviderProperties::toJson() const
{
    web::json::value val = web::json::value::object();

    if(m_Service_rankingIsSet)
    {
        val[utility::conversions::to_string_t("service.ranking")] = ModelBase::toJson(m_Service_ranking);
    }
    if(m_Global_sizeIsSet)
    {
        val[utility::conversions::to_string_t("global.size")] = ModelBase::toJson(m_Global_size);
    }
    if(m_Max_disk_usageIsSet)
    {
        val[utility::conversions::to_string_t("max.disk.usage")] = ModelBase::toJson(m_Max_disk_usage);
    }
    if(m_Persistence_enabledIsSet)
    {
        val[utility::conversions::to_string_t("persistence.enabled")] = ModelBase::toJson(m_Persistence_enabled);
    }
    if(m_Thread_pool_max_sizeIsSet)
    {
        val[utility::conversions::to_string_t("thread.pool.max.size")] = ModelBase::toJson(m_Thread_pool_max_size);
    }
    if(m_Scheduled_thread_pool_max_sizeIsSet)
    {
        val[utility::conversions::to_string_t("scheduled.thread.pool.max.size")] = ModelBase::toJson(m_Scheduled_thread_pool_max_size);
    }
    if(m_Graceful_shutdown_timeoutIsSet)
    {
        val[utility::conversions::to_string_t("graceful.shutdown.timeout")] = ModelBase::toJson(m_Graceful_shutdown_timeout);
    }
    if(m_QueuesIsSet)
    {
        val[utility::conversions::to_string_t("queues")] = ModelBase::toJson(m_Queues);
    }
    if(m_TopicsIsSet)
    {
        val[utility::conversions::to_string_t("topics")] = ModelBase::toJson(m_Topics);
    }
    if(m_Addresses_max_delivery_attemptsIsSet)
    {
        val[utility::conversions::to_string_t("addresses.max.delivery.attempts")] = ModelBase::toJson(m_Addresses_max_delivery_attempts);
    }
    if(m_Addresses_expiry_delayIsSet)
    {
        val[utility::conversions::to_string_t("addresses.expiry.delay")] = ModelBase::toJson(m_Addresses_expiry_delay);
    }
    if(m_Addresses_address_full_message_policyIsSet)
    {
        val[utility::conversions::to_string_t("addresses.address.full.message.policy")] = ModelBase::toJson(m_Addresses_address_full_message_policy);
    }
    if(m_Addresses_max_size_bytesIsSet)
    {
        val[utility::conversions::to_string_t("addresses.max.size.bytes")] = ModelBase::toJson(m_Addresses_max_size_bytes);
    }
    if(m_Addresses_page_size_bytesIsSet)
    {
        val[utility::conversions::to_string_t("addresses.page.size.bytes")] = ModelBase::toJson(m_Addresses_page_size_bytes);
    }
    if(m_Addresses_page_cache_max_sizeIsSet)
    {
        val[utility::conversions::to_string_t("addresses.page.cache.max.size")] = ModelBase::toJson(m_Addresses_page_cache_max_size);
    }
    if(m_Cluster_userIsSet)
    {
        val[utility::conversions::to_string_t("cluster.user")] = ModelBase::toJson(m_Cluster_user);
    }
    if(m_Cluster_passwordIsSet)
    {
        val[utility::conversions::to_string_t("cluster.password")] = ModelBase::toJson(m_Cluster_password);
    }
    if(m_Cluster_call_timeoutIsSet)
    {
        val[utility::conversions::to_string_t("cluster.call.timeout")] = ModelBase::toJson(m_Cluster_call_timeout);
    }
    if(m_Cluster_call_failover_timeoutIsSet)
    {
        val[utility::conversions::to_string_t("cluster.call.failover.timeout")] = ModelBase::toJson(m_Cluster_call_failover_timeout);
    }
    if(m_Cluster_client_failure_check_periodIsSet)
    {
        val[utility::conversions::to_string_t("cluster.client.failure.check.period")] = ModelBase::toJson(m_Cluster_client_failure_check_period);
    }
    if(m_Cluster_notification_attemptsIsSet)
    {
        val[utility::conversions::to_string_t("cluster.notification.attempts")] = ModelBase::toJson(m_Cluster_notification_attempts);
    }
    if(m_Cluster_notification_intervalIsSet)
    {
        val[utility::conversions::to_string_t("cluster.notification.interval")] = ModelBase::toJson(m_Cluster_notification_interval);
    }
    if(m_Id_cache_sizeIsSet)
    {
        val[utility::conversions::to_string_t("id.cache.size")] = ModelBase::toJson(m_Id_cache_size);
    }
    if(m_Cluster_confirmation_window_sizeIsSet)
    {
        val[utility::conversions::to_string_t("cluster.confirmation.window.size")] = ModelBase::toJson(m_Cluster_confirmation_window_size);
    }
    if(m_Cluster_connection_ttlIsSet)
    {
        val[utility::conversions::to_string_t("cluster.connection.ttl")] = ModelBase::toJson(m_Cluster_connection_ttl);
    }
    if(m_Cluster_duplicate_detectionIsSet)
    {
        val[utility::conversions::to_string_t("cluster.duplicate.detection")] = ModelBase::toJson(m_Cluster_duplicate_detection);
    }
    if(m_Cluster_initial_connect_attemptsIsSet)
    {
        val[utility::conversions::to_string_t("cluster.initial.connect.attempts")] = ModelBase::toJson(m_Cluster_initial_connect_attempts);
    }
    if(m_Cluster_max_retry_intervalIsSet)
    {
        val[utility::conversions::to_string_t("cluster.max.retry.interval")] = ModelBase::toJson(m_Cluster_max_retry_interval);
    }
    if(m_Cluster_min_large_message_sizeIsSet)
    {
        val[utility::conversions::to_string_t("cluster.min.large.message.size")] = ModelBase::toJson(m_Cluster_min_large_message_size);
    }
    if(m_Cluster_producer_window_sizeIsSet)
    {
        val[utility::conversions::to_string_t("cluster.producer.window.size")] = ModelBase::toJson(m_Cluster_producer_window_size);
    }
    if(m_Cluster_reconnect_attemptsIsSet)
    {
        val[utility::conversions::to_string_t("cluster.reconnect.attempts")] = ModelBase::toJson(m_Cluster_reconnect_attempts);
    }
    if(m_Cluster_retry_intervalIsSet)
    {
        val[utility::conversions::to_string_t("cluster.retry.interval")] = ModelBase::toJson(m_Cluster_retry_interval);
    }
    if(m_Cluster_retry_interval_multiplierIsSet)
    {
        val[utility::conversions::to_string_t("cluster.retry.interval.multiplier")] = ModelBase::toJson(m_Cluster_retry_interval_multiplier);
    }

    return val;
}

void ComAdobeCqScreensMqActivemqImplArtemisJMSProviderProperties::fromJson(web::json::value& val)
{
    if(val.has_field(utility::conversions::to_string_t("service.ranking")))
    {
        if(!val[utility::conversions::to_string_t("service.ranking")].is_null())
        {
            std::shared_ptr<ConfigNodePropertyInteger> newItem(new ConfigNodePropertyInteger());
            newItem->fromJson(val[utility::conversions::to_string_t("service.ranking")]);
            setServiceRanking( newItem );
        }
    }
    if(val.has_field(utility::conversions::to_string_t("global.size")))
    {
        if(!val[utility::conversions::to_string_t("global.size")].is_null())
        {
            std::shared_ptr<ConfigNodePropertyInteger> newItem(new ConfigNodePropertyInteger());
            newItem->fromJson(val[utility::conversions::to_string_t("global.size")]);
            setGlobalSize( newItem );
        }
    }
    if(val.has_field(utility::conversions::to_string_t("max.disk.usage")))
    {
        if(!val[utility::conversions::to_string_t("max.disk.usage")].is_null())
        {
            std::shared_ptr<ConfigNodePropertyInteger> newItem(new ConfigNodePropertyInteger());
            newItem->fromJson(val[utility::conversions::to_string_t("max.disk.usage")]);
            setMaxDiskUsage( newItem );
        }
    }
    if(val.has_field(utility::conversions::to_string_t("persistence.enabled")))
    {
        if(!val[utility::conversions::to_string_t("persistence.enabled")].is_null())
        {
            std::shared_ptr<ConfigNodePropertyBoolean> newItem(new ConfigNodePropertyBoolean());
            newItem->fromJson(val[utility::conversions::to_string_t("persistence.enabled")]);
            setPersistenceEnabled( newItem );
        }
    }
    if(val.has_field(utility::conversions::to_string_t("thread.pool.max.size")))
    {
        if(!val[utility::conversions::to_string_t("thread.pool.max.size")].is_null())
        {
            std::shared_ptr<ConfigNodePropertyInteger> newItem(new ConfigNodePropertyInteger());
            newItem->fromJson(val[utility::conversions::to_string_t("thread.pool.max.size")]);
            setThreadPoolMaxSize( newItem );
        }
    }
    if(val.has_field(utility::conversions::to_string_t("scheduled.thread.pool.max.size")))
    {
        if(!val[utility::conversions::to_string_t("scheduled.thread.pool.max.size")].is_null())
        {
            std::shared_ptr<ConfigNodePropertyInteger> newItem(new ConfigNodePropertyInteger());
            newItem->fromJson(val[utility::conversions::to_string_t("scheduled.thread.pool.max.size")]);
            setScheduledThreadPoolMaxSize( newItem );
        }
    }
    if(val.has_field(utility::conversions::to_string_t("graceful.shutdown.timeout")))
    {
        if(!val[utility::conversions::to_string_t("graceful.shutdown.timeout")].is_null())
        {
            std::shared_ptr<ConfigNodePropertyInteger> newItem(new ConfigNodePropertyInteger());
            newItem->fromJson(val[utility::conversions::to_string_t("graceful.shutdown.timeout")]);
            setGracefulShutdownTimeout( newItem );
        }
    }
    if(val.has_field(utility::conversions::to_string_t("queues")))
    {
        if(!val[utility::conversions::to_string_t("queues")].is_null())
        {
            std::shared_ptr<ConfigNodePropertyArray> newItem(new ConfigNodePropertyArray());
            newItem->fromJson(val[utility::conversions::to_string_t("queues")]);
            setQueues( newItem );
        }
    }
    if(val.has_field(utility::conversions::to_string_t("topics")))
    {
        if(!val[utility::conversions::to_string_t("topics")].is_null())
        {
            std::shared_ptr<ConfigNodePropertyArray> newItem(new ConfigNodePropertyArray());
            newItem->fromJson(val[utility::conversions::to_string_t("topics")]);
            setTopics( newItem );
        }
    }
    if(val.has_field(utility::conversions::to_string_t("addresses.max.delivery.attempts")))
    {
        if(!val[utility::conversions::to_string_t("addresses.max.delivery.attempts")].is_null())
        {
            std::shared_ptr<ConfigNodePropertyInteger> newItem(new ConfigNodePropertyInteger());
            newItem->fromJson(val[utility::conversions::to_string_t("addresses.max.delivery.attempts")]);
            setAddressesMaxDeliveryAttempts( newItem );
        }
    }
    if(val.has_field(utility::conversions::to_string_t("addresses.expiry.delay")))
    {
        if(!val[utility::conversions::to_string_t("addresses.expiry.delay")].is_null())
        {
            std::shared_ptr<ConfigNodePropertyInteger> newItem(new ConfigNodePropertyInteger());
            newItem->fromJson(val[utility::conversions::to_string_t("addresses.expiry.delay")]);
            setAddressesExpiryDelay( newItem );
        }
    }
    if(val.has_field(utility::conversions::to_string_t("addresses.address.full.message.policy")))
    {
        if(!val[utility::conversions::to_string_t("addresses.address.full.message.policy")].is_null())
        {
            std::shared_ptr<ConfigNodePropertyDropDown> newItem(new ConfigNodePropertyDropDown());
            newItem->fromJson(val[utility::conversions::to_string_t("addresses.address.full.message.policy")]);
            setAddressesAddressFullMessagePolicy( newItem );
        }
    }
    if(val.has_field(utility::conversions::to_string_t("addresses.max.size.bytes")))
    {
        if(!val[utility::conversions::to_string_t("addresses.max.size.bytes")].is_null())
        {
            std::shared_ptr<ConfigNodePropertyInteger> newItem(new ConfigNodePropertyInteger());
            newItem->fromJson(val[utility::conversions::to_string_t("addresses.max.size.bytes")]);
            setAddressesMaxSizeBytes( newItem );
        }
    }
    if(val.has_field(utility::conversions::to_string_t("addresses.page.size.bytes")))
    {
        if(!val[utility::conversions::to_string_t("addresses.page.size.bytes")].is_null())
        {
            std::shared_ptr<ConfigNodePropertyInteger> newItem(new ConfigNodePropertyInteger());
            newItem->fromJson(val[utility::conversions::to_string_t("addresses.page.size.bytes")]);
            setAddressesPageSizeBytes( newItem );
        }
    }
    if(val.has_field(utility::conversions::to_string_t("addresses.page.cache.max.size")))
    {
        if(!val[utility::conversions::to_string_t("addresses.page.cache.max.size")].is_null())
        {
            std::shared_ptr<ConfigNodePropertyInteger> newItem(new ConfigNodePropertyInteger());
            newItem->fromJson(val[utility::conversions::to_string_t("addresses.page.cache.max.size")]);
            setAddressesPageCacheMaxSize( newItem );
        }
    }
    if(val.has_field(utility::conversions::to_string_t("cluster.user")))
    {
        if(!val[utility::conversions::to_string_t("cluster.user")].is_null())
        {
            std::shared_ptr<ConfigNodePropertyString> newItem(new ConfigNodePropertyString());
            newItem->fromJson(val[utility::conversions::to_string_t("cluster.user")]);
            setClusterUser( newItem );
        }
    }
    if(val.has_field(utility::conversions::to_string_t("cluster.password")))
    {
        if(!val[utility::conversions::to_string_t("cluster.password")].is_null())
        {
            std::shared_ptr<ConfigNodePropertyString> newItem(new ConfigNodePropertyString());
            newItem->fromJson(val[utility::conversions::to_string_t("cluster.password")]);
            setClusterPassword( newItem );
        }
    }
    if(val.has_field(utility::conversions::to_string_t("cluster.call.timeout")))
    {
        if(!val[utility::conversions::to_string_t("cluster.call.timeout")].is_null())
        {
            std::shared_ptr<ConfigNodePropertyInteger> newItem(new ConfigNodePropertyInteger());
            newItem->fromJson(val[utility::conversions::to_string_t("cluster.call.timeout")]);
            setClusterCallTimeout( newItem );
        }
    }
    if(val.has_field(utility::conversions::to_string_t("cluster.call.failover.timeout")))
    {
        if(!val[utility::conversions::to_string_t("cluster.call.failover.timeout")].is_null())
        {
            std::shared_ptr<ConfigNodePropertyInteger> newItem(new ConfigNodePropertyInteger());
            newItem->fromJson(val[utility::conversions::to_string_t("cluster.call.failover.timeout")]);
            setClusterCallFailoverTimeout( newItem );
        }
    }
    if(val.has_field(utility::conversions::to_string_t("cluster.client.failure.check.period")))
    {
        if(!val[utility::conversions::to_string_t("cluster.client.failure.check.period")].is_null())
        {
            std::shared_ptr<ConfigNodePropertyInteger> newItem(new ConfigNodePropertyInteger());
            newItem->fromJson(val[utility::conversions::to_string_t("cluster.client.failure.check.period")]);
            setClusterClientFailureCheckPeriod( newItem );
        }
    }
    if(val.has_field(utility::conversions::to_string_t("cluster.notification.attempts")))
    {
        if(!val[utility::conversions::to_string_t("cluster.notification.attempts")].is_null())
        {
            std::shared_ptr<ConfigNodePropertyInteger> newItem(new ConfigNodePropertyInteger());
            newItem->fromJson(val[utility::conversions::to_string_t("cluster.notification.attempts")]);
            setClusterNotificationAttempts( newItem );
        }
    }
    if(val.has_field(utility::conversions::to_string_t("cluster.notification.interval")))
    {
        if(!val[utility::conversions::to_string_t("cluster.notification.interval")].is_null())
        {
            std::shared_ptr<ConfigNodePropertyInteger> newItem(new ConfigNodePropertyInteger());
            newItem->fromJson(val[utility::conversions::to_string_t("cluster.notification.interval")]);
            setClusterNotificationInterval( newItem );
        }
    }
    if(val.has_field(utility::conversions::to_string_t("id.cache.size")))
    {
        if(!val[utility::conversions::to_string_t("id.cache.size")].is_null())
        {
            std::shared_ptr<ConfigNodePropertyInteger> newItem(new ConfigNodePropertyInteger());
            newItem->fromJson(val[utility::conversions::to_string_t("id.cache.size")]);
            setIdCacheSize( newItem );
        }
    }
    if(val.has_field(utility::conversions::to_string_t("cluster.confirmation.window.size")))
    {
        if(!val[utility::conversions::to_string_t("cluster.confirmation.window.size")].is_null())
        {
            std::shared_ptr<ConfigNodePropertyInteger> newItem(new ConfigNodePropertyInteger());
            newItem->fromJson(val[utility::conversions::to_string_t("cluster.confirmation.window.size")]);
            setClusterConfirmationWindowSize( newItem );
        }
    }
    if(val.has_field(utility::conversions::to_string_t("cluster.connection.ttl")))
    {
        if(!val[utility::conversions::to_string_t("cluster.connection.ttl")].is_null())
        {
            std::shared_ptr<ConfigNodePropertyInteger> newItem(new ConfigNodePropertyInteger());
            newItem->fromJson(val[utility::conversions::to_string_t("cluster.connection.ttl")]);
            setClusterConnectionTtl( newItem );
        }
    }
    if(val.has_field(utility::conversions::to_string_t("cluster.duplicate.detection")))
    {
        if(!val[utility::conversions::to_string_t("cluster.duplicate.detection")].is_null())
        {
            std::shared_ptr<ConfigNodePropertyBoolean> newItem(new ConfigNodePropertyBoolean());
            newItem->fromJson(val[utility::conversions::to_string_t("cluster.duplicate.detection")]);
            setClusterDuplicateDetection( newItem );
        }
    }
    if(val.has_field(utility::conversions::to_string_t("cluster.initial.connect.attempts")))
    {
        if(!val[utility::conversions::to_string_t("cluster.initial.connect.attempts")].is_null())
        {
            std::shared_ptr<ConfigNodePropertyInteger> newItem(new ConfigNodePropertyInteger());
            newItem->fromJson(val[utility::conversions::to_string_t("cluster.initial.connect.attempts")]);
            setClusterInitialConnectAttempts( newItem );
        }
    }
    if(val.has_field(utility::conversions::to_string_t("cluster.max.retry.interval")))
    {
        if(!val[utility::conversions::to_string_t("cluster.max.retry.interval")].is_null())
        {
            std::shared_ptr<ConfigNodePropertyInteger> newItem(new ConfigNodePropertyInteger());
            newItem->fromJson(val[utility::conversions::to_string_t("cluster.max.retry.interval")]);
            setClusterMaxRetryInterval( newItem );
        }
    }
    if(val.has_field(utility::conversions::to_string_t("cluster.min.large.message.size")))
    {
        if(!val[utility::conversions::to_string_t("cluster.min.large.message.size")].is_null())
        {
            std::shared_ptr<ConfigNodePropertyInteger> newItem(new ConfigNodePropertyInteger());
            newItem->fromJson(val[utility::conversions::to_string_t("cluster.min.large.message.size")]);
            setClusterMinLargeMessageSize( newItem );
        }
    }
    if(val.has_field(utility::conversions::to_string_t("cluster.producer.window.size")))
    {
        if(!val[utility::conversions::to_string_t("cluster.producer.window.size")].is_null())
        {
            std::shared_ptr<ConfigNodePropertyInteger> newItem(new ConfigNodePropertyInteger());
            newItem->fromJson(val[utility::conversions::to_string_t("cluster.producer.window.size")]);
            setClusterProducerWindowSize( newItem );
        }
    }
    if(val.has_field(utility::conversions::to_string_t("cluster.reconnect.attempts")))
    {
        if(!val[utility::conversions::to_string_t("cluster.reconnect.attempts")].is_null())
        {
            std::shared_ptr<ConfigNodePropertyInteger> newItem(new ConfigNodePropertyInteger());
            newItem->fromJson(val[utility::conversions::to_string_t("cluster.reconnect.attempts")]);
            setClusterReconnectAttempts( newItem );
        }
    }
    if(val.has_field(utility::conversions::to_string_t("cluster.retry.interval")))
    {
        if(!val[utility::conversions::to_string_t("cluster.retry.interval")].is_null())
        {
            std::shared_ptr<ConfigNodePropertyInteger> newItem(new ConfigNodePropertyInteger());
            newItem->fromJson(val[utility::conversions::to_string_t("cluster.retry.interval")]);
            setClusterRetryInterval( newItem );
        }
    }
    if(val.has_field(utility::conversions::to_string_t("cluster.retry.interval.multiplier")))
    {
        if(!val[utility::conversions::to_string_t("cluster.retry.interval.multiplier")].is_null())
        {
            std::shared_ptr<ConfigNodePropertyFloat> newItem(new ConfigNodePropertyFloat());
            newItem->fromJson(val[utility::conversions::to_string_t("cluster.retry.interval.multiplier")]);
            setClusterRetryIntervalMultiplier( newItem );
        }
    }
}

void ComAdobeCqScreensMqActivemqImplArtemisJMSProviderProperties::toMultipart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix) const
{
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t("."))
    {
        namePrefix += utility::conversions::to_string_t(".");
    }

    if(m_Service_rankingIsSet)
    {
        if (m_Service_ranking.get())
        {
            m_Service_ranking->toMultipart(multipart, utility::conversions::to_string_t("service.ranking."));
        }
    }
    if(m_Global_sizeIsSet)
    {
        if (m_Global_size.get())
        {
            m_Global_size->toMultipart(multipart, utility::conversions::to_string_t("global.size."));
        }
    }
    if(m_Max_disk_usageIsSet)
    {
        if (m_Max_disk_usage.get())
        {
            m_Max_disk_usage->toMultipart(multipart, utility::conversions::to_string_t("max.disk.usage."));
        }
    }
    if(m_Persistence_enabledIsSet)
    {
        if (m_Persistence_enabled.get())
        {
            m_Persistence_enabled->toMultipart(multipart, utility::conversions::to_string_t("persistence.enabled."));
        }
    }
    if(m_Thread_pool_max_sizeIsSet)
    {
        if (m_Thread_pool_max_size.get())
        {
            m_Thread_pool_max_size->toMultipart(multipart, utility::conversions::to_string_t("thread.pool.max.size."));
        }
    }
    if(m_Scheduled_thread_pool_max_sizeIsSet)
    {
        if (m_Scheduled_thread_pool_max_size.get())
        {
            m_Scheduled_thread_pool_max_size->toMultipart(multipart, utility::conversions::to_string_t("scheduled.thread.pool.max.size."));
        }
    }
    if(m_Graceful_shutdown_timeoutIsSet)
    {
        if (m_Graceful_shutdown_timeout.get())
        {
            m_Graceful_shutdown_timeout->toMultipart(multipart, utility::conversions::to_string_t("graceful.shutdown.timeout."));
        }
    }
    if(m_QueuesIsSet)
    {
        if (m_Queues.get())
        {
            m_Queues->toMultipart(multipart, utility::conversions::to_string_t("queues."));
        }
    }
    if(m_TopicsIsSet)
    {
        if (m_Topics.get())
        {
            m_Topics->toMultipart(multipart, utility::conversions::to_string_t("topics."));
        }
    }
    if(m_Addresses_max_delivery_attemptsIsSet)
    {
        if (m_Addresses_max_delivery_attempts.get())
        {
            m_Addresses_max_delivery_attempts->toMultipart(multipart, utility::conversions::to_string_t("addresses.max.delivery.attempts."));
        }
    }
    if(m_Addresses_expiry_delayIsSet)
    {
        if (m_Addresses_expiry_delay.get())
        {
            m_Addresses_expiry_delay->toMultipart(multipart, utility::conversions::to_string_t("addresses.expiry.delay."));
        }
    }
    if(m_Addresses_address_full_message_policyIsSet)
    {
        if (m_Addresses_address_full_message_policy.get())
        {
            m_Addresses_address_full_message_policy->toMultipart(multipart, utility::conversions::to_string_t("addresses.address.full.message.policy."));
        }
    }
    if(m_Addresses_max_size_bytesIsSet)
    {
        if (m_Addresses_max_size_bytes.get())
        {
            m_Addresses_max_size_bytes->toMultipart(multipart, utility::conversions::to_string_t("addresses.max.size.bytes."));
        }
    }
    if(m_Addresses_page_size_bytesIsSet)
    {
        if (m_Addresses_page_size_bytes.get())
        {
            m_Addresses_page_size_bytes->toMultipart(multipart, utility::conversions::to_string_t("addresses.page.size.bytes."));
        }
    }
    if(m_Addresses_page_cache_max_sizeIsSet)
    {
        if (m_Addresses_page_cache_max_size.get())
        {
            m_Addresses_page_cache_max_size->toMultipart(multipart, utility::conversions::to_string_t("addresses.page.cache.max.size."));
        }
    }
    if(m_Cluster_userIsSet)
    {
        if (m_Cluster_user.get())
        {
            m_Cluster_user->toMultipart(multipart, utility::conversions::to_string_t("cluster.user."));
        }
    }
    if(m_Cluster_passwordIsSet)
    {
        if (m_Cluster_password.get())
        {
            m_Cluster_password->toMultipart(multipart, utility::conversions::to_string_t("cluster.password."));
        }
    }
    if(m_Cluster_call_timeoutIsSet)
    {
        if (m_Cluster_call_timeout.get())
        {
            m_Cluster_call_timeout->toMultipart(multipart, utility::conversions::to_string_t("cluster.call.timeout."));
        }
    }
    if(m_Cluster_call_failover_timeoutIsSet)
    {
        if (m_Cluster_call_failover_timeout.get())
        {
            m_Cluster_call_failover_timeout->toMultipart(multipart, utility::conversions::to_string_t("cluster.call.failover.timeout."));
        }
    }
    if(m_Cluster_client_failure_check_periodIsSet)
    {
        if (m_Cluster_client_failure_check_period.get())
        {
            m_Cluster_client_failure_check_period->toMultipart(multipart, utility::conversions::to_string_t("cluster.client.failure.check.period."));
        }
    }
    if(m_Cluster_notification_attemptsIsSet)
    {
        if (m_Cluster_notification_attempts.get())
        {
            m_Cluster_notification_attempts->toMultipart(multipart, utility::conversions::to_string_t("cluster.notification.attempts."));
        }
    }
    if(m_Cluster_notification_intervalIsSet)
    {
        if (m_Cluster_notification_interval.get())
        {
            m_Cluster_notification_interval->toMultipart(multipart, utility::conversions::to_string_t("cluster.notification.interval."));
        }
    }
    if(m_Id_cache_sizeIsSet)
    {
        if (m_Id_cache_size.get())
        {
            m_Id_cache_size->toMultipart(multipart, utility::conversions::to_string_t("id.cache.size."));
        }
    }
    if(m_Cluster_confirmation_window_sizeIsSet)
    {
        if (m_Cluster_confirmation_window_size.get())
        {
            m_Cluster_confirmation_window_size->toMultipart(multipart, utility::conversions::to_string_t("cluster.confirmation.window.size."));
        }
    }
    if(m_Cluster_connection_ttlIsSet)
    {
        if (m_Cluster_connection_ttl.get())
        {
            m_Cluster_connection_ttl->toMultipart(multipart, utility::conversions::to_string_t("cluster.connection.ttl."));
        }
    }
    if(m_Cluster_duplicate_detectionIsSet)
    {
        if (m_Cluster_duplicate_detection.get())
        {
            m_Cluster_duplicate_detection->toMultipart(multipart, utility::conversions::to_string_t("cluster.duplicate.detection."));
        }
    }
    if(m_Cluster_initial_connect_attemptsIsSet)
    {
        if (m_Cluster_initial_connect_attempts.get())
        {
            m_Cluster_initial_connect_attempts->toMultipart(multipart, utility::conversions::to_string_t("cluster.initial.connect.attempts."));
        }
    }
    if(m_Cluster_max_retry_intervalIsSet)
    {
        if (m_Cluster_max_retry_interval.get())
        {
            m_Cluster_max_retry_interval->toMultipart(multipart, utility::conversions::to_string_t("cluster.max.retry.interval."));
        }
    }
    if(m_Cluster_min_large_message_sizeIsSet)
    {
        if (m_Cluster_min_large_message_size.get())
        {
            m_Cluster_min_large_message_size->toMultipart(multipart, utility::conversions::to_string_t("cluster.min.large.message.size."));
        }
    }
    if(m_Cluster_producer_window_sizeIsSet)
    {
        if (m_Cluster_producer_window_size.get())
        {
            m_Cluster_producer_window_size->toMultipart(multipart, utility::conversions::to_string_t("cluster.producer.window.size."));
        }
    }
    if(m_Cluster_reconnect_attemptsIsSet)
    {
        if (m_Cluster_reconnect_attempts.get())
        {
            m_Cluster_reconnect_attempts->toMultipart(multipart, utility::conversions::to_string_t("cluster.reconnect.attempts."));
        }
    }
    if(m_Cluster_retry_intervalIsSet)
    {
        if (m_Cluster_retry_interval.get())
        {
            m_Cluster_retry_interval->toMultipart(multipart, utility::conversions::to_string_t("cluster.retry.interval."));
        }
    }
    if(m_Cluster_retry_interval_multiplierIsSet)
    {
        if (m_Cluster_retry_interval_multiplier.get())
        {
            m_Cluster_retry_interval_multiplier->toMultipart(multipart, utility::conversions::to_string_t("cluster.retry.interval.multiplier."));
        }
    }
}

void ComAdobeCqScreensMqActivemqImplArtemisJMSProviderProperties::fromMultiPart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix)
{
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t("."))
    {
        namePrefix += utility::conversions::to_string_t(".");
    }

    if(multipart->hasContent(utility::conversions::to_string_t("service.ranking")))
    {
        if(multipart->hasContent(utility::conversions::to_string_t("service.ranking")))
        {
            std::shared_ptr<ConfigNodePropertyInteger> newItem(new ConfigNodePropertyInteger());
            newItem->fromMultiPart(multipart, utility::conversions::to_string_t("service.ranking."));
            setServiceRanking( newItem );
        }
    }
    if(multipart->hasContent(utility::conversions::to_string_t("global.size")))
    {
        if(multipart->hasContent(utility::conversions::to_string_t("global.size")))
        {
            std::shared_ptr<ConfigNodePropertyInteger> newItem(new ConfigNodePropertyInteger());
            newItem->fromMultiPart(multipart, utility::conversions::to_string_t("global.size."));
            setGlobalSize( newItem );
        }
    }
    if(multipart->hasContent(utility::conversions::to_string_t("max.disk.usage")))
    {
        if(multipart->hasContent(utility::conversions::to_string_t("max.disk.usage")))
        {
            std::shared_ptr<ConfigNodePropertyInteger> newItem(new ConfigNodePropertyInteger());
            newItem->fromMultiPart(multipart, utility::conversions::to_string_t("max.disk.usage."));
            setMaxDiskUsage( newItem );
        }
    }
    if(multipart->hasContent(utility::conversions::to_string_t("persistence.enabled")))
    {
        if(multipart->hasContent(utility::conversions::to_string_t("persistence.enabled")))
        {
            std::shared_ptr<ConfigNodePropertyBoolean> newItem(new ConfigNodePropertyBoolean());
            newItem->fromMultiPart(multipart, utility::conversions::to_string_t("persistence.enabled."));
            setPersistenceEnabled( newItem );
        }
    }
    if(multipart->hasContent(utility::conversions::to_string_t("thread.pool.max.size")))
    {
        if(multipart->hasContent(utility::conversions::to_string_t("thread.pool.max.size")))
        {
            std::shared_ptr<ConfigNodePropertyInteger> newItem(new ConfigNodePropertyInteger());
            newItem->fromMultiPart(multipart, utility::conversions::to_string_t("thread.pool.max.size."));
            setThreadPoolMaxSize( newItem );
        }
    }
    if(multipart->hasContent(utility::conversions::to_string_t("scheduled.thread.pool.max.size")))
    {
        if(multipart->hasContent(utility::conversions::to_string_t("scheduled.thread.pool.max.size")))
        {
            std::shared_ptr<ConfigNodePropertyInteger> newItem(new ConfigNodePropertyInteger());
            newItem->fromMultiPart(multipart, utility::conversions::to_string_t("scheduled.thread.pool.max.size."));
            setScheduledThreadPoolMaxSize( newItem );
        }
    }
    if(multipart->hasContent(utility::conversions::to_string_t("graceful.shutdown.timeout")))
    {
        if(multipart->hasContent(utility::conversions::to_string_t("graceful.shutdown.timeout")))
        {
            std::shared_ptr<ConfigNodePropertyInteger> newItem(new ConfigNodePropertyInteger());
            newItem->fromMultiPart(multipart, utility::conversions::to_string_t("graceful.shutdown.timeout."));
            setGracefulShutdownTimeout( newItem );
        }
    }
    if(multipart->hasContent(utility::conversions::to_string_t("queues")))
    {
        if(multipart->hasContent(utility::conversions::to_string_t("queues")))
        {
            std::shared_ptr<ConfigNodePropertyArray> newItem(new ConfigNodePropertyArray());
            newItem->fromMultiPart(multipart, utility::conversions::to_string_t("queues."));
            setQueues( newItem );
        }
    }
    if(multipart->hasContent(utility::conversions::to_string_t("topics")))
    {
        if(multipart->hasContent(utility::conversions::to_string_t("topics")))
        {
            std::shared_ptr<ConfigNodePropertyArray> newItem(new ConfigNodePropertyArray());
            newItem->fromMultiPart(multipart, utility::conversions::to_string_t("topics."));
            setTopics( newItem );
        }
    }
    if(multipart->hasContent(utility::conversions::to_string_t("addresses.max.delivery.attempts")))
    {
        if(multipart->hasContent(utility::conversions::to_string_t("addresses.max.delivery.attempts")))
        {
            std::shared_ptr<ConfigNodePropertyInteger> newItem(new ConfigNodePropertyInteger());
            newItem->fromMultiPart(multipart, utility::conversions::to_string_t("addresses.max.delivery.attempts."));
            setAddressesMaxDeliveryAttempts( newItem );
        }
    }
    if(multipart->hasContent(utility::conversions::to_string_t("addresses.expiry.delay")))
    {
        if(multipart->hasContent(utility::conversions::to_string_t("addresses.expiry.delay")))
        {
            std::shared_ptr<ConfigNodePropertyInteger> newItem(new ConfigNodePropertyInteger());
            newItem->fromMultiPart(multipart, utility::conversions::to_string_t("addresses.expiry.delay."));
            setAddressesExpiryDelay( newItem );
        }
    }
    if(multipart->hasContent(utility::conversions::to_string_t("addresses.address.full.message.policy")))
    {
        if(multipart->hasContent(utility::conversions::to_string_t("addresses.address.full.message.policy")))
        {
            std::shared_ptr<ConfigNodePropertyDropDown> newItem(new ConfigNodePropertyDropDown());
            newItem->fromMultiPart(multipart, utility::conversions::to_string_t("addresses.address.full.message.policy."));
            setAddressesAddressFullMessagePolicy( newItem );
        }
    }
    if(multipart->hasContent(utility::conversions::to_string_t("addresses.max.size.bytes")))
    {
        if(multipart->hasContent(utility::conversions::to_string_t("addresses.max.size.bytes")))
        {
            std::shared_ptr<ConfigNodePropertyInteger> newItem(new ConfigNodePropertyInteger());
            newItem->fromMultiPart(multipart, utility::conversions::to_string_t("addresses.max.size.bytes."));
            setAddressesMaxSizeBytes( newItem );
        }
    }
    if(multipart->hasContent(utility::conversions::to_string_t("addresses.page.size.bytes")))
    {
        if(multipart->hasContent(utility::conversions::to_string_t("addresses.page.size.bytes")))
        {
            std::shared_ptr<ConfigNodePropertyInteger> newItem(new ConfigNodePropertyInteger());
            newItem->fromMultiPart(multipart, utility::conversions::to_string_t("addresses.page.size.bytes."));
            setAddressesPageSizeBytes( newItem );
        }
    }
    if(multipart->hasContent(utility::conversions::to_string_t("addresses.page.cache.max.size")))
    {
        if(multipart->hasContent(utility::conversions::to_string_t("addresses.page.cache.max.size")))
        {
            std::shared_ptr<ConfigNodePropertyInteger> newItem(new ConfigNodePropertyInteger());
            newItem->fromMultiPart(multipart, utility::conversions::to_string_t("addresses.page.cache.max.size."));
            setAddressesPageCacheMaxSize( newItem );
        }
    }
    if(multipart->hasContent(utility::conversions::to_string_t("cluster.user")))
    {
        if(multipart->hasContent(utility::conversions::to_string_t("cluster.user")))
        {
            std::shared_ptr<ConfigNodePropertyString> newItem(new ConfigNodePropertyString());
            newItem->fromMultiPart(multipart, utility::conversions::to_string_t("cluster.user."));
            setClusterUser( newItem );
        }
    }
    if(multipart->hasContent(utility::conversions::to_string_t("cluster.password")))
    {
        if(multipart->hasContent(utility::conversions::to_string_t("cluster.password")))
        {
            std::shared_ptr<ConfigNodePropertyString> newItem(new ConfigNodePropertyString());
            newItem->fromMultiPart(multipart, utility::conversions::to_string_t("cluster.password."));
            setClusterPassword( newItem );
        }
    }
    if(multipart->hasContent(utility::conversions::to_string_t("cluster.call.timeout")))
    {
        if(multipart->hasContent(utility::conversions::to_string_t("cluster.call.timeout")))
        {
            std::shared_ptr<ConfigNodePropertyInteger> newItem(new ConfigNodePropertyInteger());
            newItem->fromMultiPart(multipart, utility::conversions::to_string_t("cluster.call.timeout."));
            setClusterCallTimeout( newItem );
        }
    }
    if(multipart->hasContent(utility::conversions::to_string_t("cluster.call.failover.timeout")))
    {
        if(multipart->hasContent(utility::conversions::to_string_t("cluster.call.failover.timeout")))
        {
            std::shared_ptr<ConfigNodePropertyInteger> newItem(new ConfigNodePropertyInteger());
            newItem->fromMultiPart(multipart, utility::conversions::to_string_t("cluster.call.failover.timeout."));
            setClusterCallFailoverTimeout( newItem );
        }
    }
    if(multipart->hasContent(utility::conversions::to_string_t("cluster.client.failure.check.period")))
    {
        if(multipart->hasContent(utility::conversions::to_string_t("cluster.client.failure.check.period")))
        {
            std::shared_ptr<ConfigNodePropertyInteger> newItem(new ConfigNodePropertyInteger());
            newItem->fromMultiPart(multipart, utility::conversions::to_string_t("cluster.client.failure.check.period."));
            setClusterClientFailureCheckPeriod( newItem );
        }
    }
    if(multipart->hasContent(utility::conversions::to_string_t("cluster.notification.attempts")))
    {
        if(multipart->hasContent(utility::conversions::to_string_t("cluster.notification.attempts")))
        {
            std::shared_ptr<ConfigNodePropertyInteger> newItem(new ConfigNodePropertyInteger());
            newItem->fromMultiPart(multipart, utility::conversions::to_string_t("cluster.notification.attempts."));
            setClusterNotificationAttempts( newItem );
        }
    }
    if(multipart->hasContent(utility::conversions::to_string_t("cluster.notification.interval")))
    {
        if(multipart->hasContent(utility::conversions::to_string_t("cluster.notification.interval")))
        {
            std::shared_ptr<ConfigNodePropertyInteger> newItem(new ConfigNodePropertyInteger());
            newItem->fromMultiPart(multipart, utility::conversions::to_string_t("cluster.notification.interval."));
            setClusterNotificationInterval( newItem );
        }
    }
    if(multipart->hasContent(utility::conversions::to_string_t("id.cache.size")))
    {
        if(multipart->hasContent(utility::conversions::to_string_t("id.cache.size")))
        {
            std::shared_ptr<ConfigNodePropertyInteger> newItem(new ConfigNodePropertyInteger());
            newItem->fromMultiPart(multipart, utility::conversions::to_string_t("id.cache.size."));
            setIdCacheSize( newItem );
        }
    }
    if(multipart->hasContent(utility::conversions::to_string_t("cluster.confirmation.window.size")))
    {
        if(multipart->hasContent(utility::conversions::to_string_t("cluster.confirmation.window.size")))
        {
            std::shared_ptr<ConfigNodePropertyInteger> newItem(new ConfigNodePropertyInteger());
            newItem->fromMultiPart(multipart, utility::conversions::to_string_t("cluster.confirmation.window.size."));
            setClusterConfirmationWindowSize( newItem );
        }
    }
    if(multipart->hasContent(utility::conversions::to_string_t("cluster.connection.ttl")))
    {
        if(multipart->hasContent(utility::conversions::to_string_t("cluster.connection.ttl")))
        {
            std::shared_ptr<ConfigNodePropertyInteger> newItem(new ConfigNodePropertyInteger());
            newItem->fromMultiPart(multipart, utility::conversions::to_string_t("cluster.connection.ttl."));
            setClusterConnectionTtl( newItem );
        }
    }
    if(multipart->hasContent(utility::conversions::to_string_t("cluster.duplicate.detection")))
    {
        if(multipart->hasContent(utility::conversions::to_string_t("cluster.duplicate.detection")))
        {
            std::shared_ptr<ConfigNodePropertyBoolean> newItem(new ConfigNodePropertyBoolean());
            newItem->fromMultiPart(multipart, utility::conversions::to_string_t("cluster.duplicate.detection."));
            setClusterDuplicateDetection( newItem );
        }
    }
    if(multipart->hasContent(utility::conversions::to_string_t("cluster.initial.connect.attempts")))
    {
        if(multipart->hasContent(utility::conversions::to_string_t("cluster.initial.connect.attempts")))
        {
            std::shared_ptr<ConfigNodePropertyInteger> newItem(new ConfigNodePropertyInteger());
            newItem->fromMultiPart(multipart, utility::conversions::to_string_t("cluster.initial.connect.attempts."));
            setClusterInitialConnectAttempts( newItem );
        }
    }
    if(multipart->hasContent(utility::conversions::to_string_t("cluster.max.retry.interval")))
    {
        if(multipart->hasContent(utility::conversions::to_string_t("cluster.max.retry.interval")))
        {
            std::shared_ptr<ConfigNodePropertyInteger> newItem(new ConfigNodePropertyInteger());
            newItem->fromMultiPart(multipart, utility::conversions::to_string_t("cluster.max.retry.interval."));
            setClusterMaxRetryInterval( newItem );
        }
    }
    if(multipart->hasContent(utility::conversions::to_string_t("cluster.min.large.message.size")))
    {
        if(multipart->hasContent(utility::conversions::to_string_t("cluster.min.large.message.size")))
        {
            std::shared_ptr<ConfigNodePropertyInteger> newItem(new ConfigNodePropertyInteger());
            newItem->fromMultiPart(multipart, utility::conversions::to_string_t("cluster.min.large.message.size."));
            setClusterMinLargeMessageSize( newItem );
        }
    }
    if(multipart->hasContent(utility::conversions::to_string_t("cluster.producer.window.size")))
    {
        if(multipart->hasContent(utility::conversions::to_string_t("cluster.producer.window.size")))
        {
            std::shared_ptr<ConfigNodePropertyInteger> newItem(new ConfigNodePropertyInteger());
            newItem->fromMultiPart(multipart, utility::conversions::to_string_t("cluster.producer.window.size."));
            setClusterProducerWindowSize( newItem );
        }
    }
    if(multipart->hasContent(utility::conversions::to_string_t("cluster.reconnect.attempts")))
    {
        if(multipart->hasContent(utility::conversions::to_string_t("cluster.reconnect.attempts")))
        {
            std::shared_ptr<ConfigNodePropertyInteger> newItem(new ConfigNodePropertyInteger());
            newItem->fromMultiPart(multipart, utility::conversions::to_string_t("cluster.reconnect.attempts."));
            setClusterReconnectAttempts( newItem );
        }
    }
    if(multipart->hasContent(utility::conversions::to_string_t("cluster.retry.interval")))
    {
        if(multipart->hasContent(utility::conversions::to_string_t("cluster.retry.interval")))
        {
            std::shared_ptr<ConfigNodePropertyInteger> newItem(new ConfigNodePropertyInteger());
            newItem->fromMultiPart(multipart, utility::conversions::to_string_t("cluster.retry.interval."));
            setClusterRetryInterval( newItem );
        }
    }
    if(multipart->hasContent(utility::conversions::to_string_t("cluster.retry.interval.multiplier")))
    {
        if(multipart->hasContent(utility::conversions::to_string_t("cluster.retry.interval.multiplier")))
        {
            std::shared_ptr<ConfigNodePropertyFloat> newItem(new ConfigNodePropertyFloat());
            newItem->fromMultiPart(multipart, utility::conversions::to_string_t("cluster.retry.interval.multiplier."));
            setClusterRetryIntervalMultiplier( newItem );
        }
    }
}

std::shared_ptr<ConfigNodePropertyInteger> ComAdobeCqScreensMqActivemqImplArtemisJMSProviderProperties::getServiceRanking() const
{
    return m_Service_ranking;
}


void ComAdobeCqScreensMqActivemqImplArtemisJMSProviderProperties::setServiceRanking(std::shared_ptr<ConfigNodePropertyInteger> value)
{
    m_Service_ranking = value;
    m_Service_rankingIsSet = true;
}
bool ComAdobeCqScreensMqActivemqImplArtemisJMSProviderProperties::serviceRankingIsSet() const
{
    return m_Service_rankingIsSet;
}

void ComAdobeCqScreensMqActivemqImplArtemisJMSProviderProperties::unsetService_ranking()
{
    m_Service_rankingIsSet = false;
}

std::shared_ptr<ConfigNodePropertyInteger> ComAdobeCqScreensMqActivemqImplArtemisJMSProviderProperties::getGlobalSize() const
{
    return m_Global_size;
}


void ComAdobeCqScreensMqActivemqImplArtemisJMSProviderProperties::setGlobalSize(std::shared_ptr<ConfigNodePropertyInteger> value)
{
    m_Global_size = value;
    m_Global_sizeIsSet = true;
}
bool ComAdobeCqScreensMqActivemqImplArtemisJMSProviderProperties::globalSizeIsSet() const
{
    return m_Global_sizeIsSet;
}

void ComAdobeCqScreensMqActivemqImplArtemisJMSProviderProperties::unsetGlobal_size()
{
    m_Global_sizeIsSet = false;
}

std::shared_ptr<ConfigNodePropertyInteger> ComAdobeCqScreensMqActivemqImplArtemisJMSProviderProperties::getMaxDiskUsage() const
{
    return m_Max_disk_usage;
}


void ComAdobeCqScreensMqActivemqImplArtemisJMSProviderProperties::setMaxDiskUsage(std::shared_ptr<ConfigNodePropertyInteger> value)
{
    m_Max_disk_usage = value;
    m_Max_disk_usageIsSet = true;
}
bool ComAdobeCqScreensMqActivemqImplArtemisJMSProviderProperties::maxDiskUsageIsSet() const
{
    return m_Max_disk_usageIsSet;
}

void ComAdobeCqScreensMqActivemqImplArtemisJMSProviderProperties::unsetMax_disk_usage()
{
    m_Max_disk_usageIsSet = false;
}

std::shared_ptr<ConfigNodePropertyBoolean> ComAdobeCqScreensMqActivemqImplArtemisJMSProviderProperties::getPersistenceEnabled() const
{
    return m_Persistence_enabled;
}


void ComAdobeCqScreensMqActivemqImplArtemisJMSProviderProperties::setPersistenceEnabled(std::shared_ptr<ConfigNodePropertyBoolean> value)
{
    m_Persistence_enabled = value;
    m_Persistence_enabledIsSet = true;
}
bool ComAdobeCqScreensMqActivemqImplArtemisJMSProviderProperties::persistenceEnabledIsSet() const
{
    return m_Persistence_enabledIsSet;
}

void ComAdobeCqScreensMqActivemqImplArtemisJMSProviderProperties::unsetPersistence_enabled()
{
    m_Persistence_enabledIsSet = false;
}

std::shared_ptr<ConfigNodePropertyInteger> ComAdobeCqScreensMqActivemqImplArtemisJMSProviderProperties::getThreadPoolMaxSize() const
{
    return m_Thread_pool_max_size;
}


void ComAdobeCqScreensMqActivemqImplArtemisJMSProviderProperties::setThreadPoolMaxSize(std::shared_ptr<ConfigNodePropertyInteger> value)
{
    m_Thread_pool_max_size = value;
    m_Thread_pool_max_sizeIsSet = true;
}
bool ComAdobeCqScreensMqActivemqImplArtemisJMSProviderProperties::threadPoolMaxSizeIsSet() const
{
    return m_Thread_pool_max_sizeIsSet;
}

void ComAdobeCqScreensMqActivemqImplArtemisJMSProviderProperties::unsetThread_pool_max_size()
{
    m_Thread_pool_max_sizeIsSet = false;
}

std::shared_ptr<ConfigNodePropertyInteger> ComAdobeCqScreensMqActivemqImplArtemisJMSProviderProperties::getScheduledThreadPoolMaxSize() const
{
    return m_Scheduled_thread_pool_max_size;
}


void ComAdobeCqScreensMqActivemqImplArtemisJMSProviderProperties::setScheduledThreadPoolMaxSize(std::shared_ptr<ConfigNodePropertyInteger> value)
{
    m_Scheduled_thread_pool_max_size = value;
    m_Scheduled_thread_pool_max_sizeIsSet = true;
}
bool ComAdobeCqScreensMqActivemqImplArtemisJMSProviderProperties::scheduledThreadPoolMaxSizeIsSet() const
{
    return m_Scheduled_thread_pool_max_sizeIsSet;
}

void ComAdobeCqScreensMqActivemqImplArtemisJMSProviderProperties::unsetScheduled_thread_pool_max_size()
{
    m_Scheduled_thread_pool_max_sizeIsSet = false;
}

std::shared_ptr<ConfigNodePropertyInteger> ComAdobeCqScreensMqActivemqImplArtemisJMSProviderProperties::getGracefulShutdownTimeout() const
{
    return m_Graceful_shutdown_timeout;
}


void ComAdobeCqScreensMqActivemqImplArtemisJMSProviderProperties::setGracefulShutdownTimeout(std::shared_ptr<ConfigNodePropertyInteger> value)
{
    m_Graceful_shutdown_timeout = value;
    m_Graceful_shutdown_timeoutIsSet = true;
}
bool ComAdobeCqScreensMqActivemqImplArtemisJMSProviderProperties::gracefulShutdownTimeoutIsSet() const
{
    return m_Graceful_shutdown_timeoutIsSet;
}

void ComAdobeCqScreensMqActivemqImplArtemisJMSProviderProperties::unsetGraceful_shutdown_timeout()
{
    m_Graceful_shutdown_timeoutIsSet = false;
}

std::shared_ptr<ConfigNodePropertyArray> ComAdobeCqScreensMqActivemqImplArtemisJMSProviderProperties::getQueues() const
{
    return m_Queues;
}


void ComAdobeCqScreensMqActivemqImplArtemisJMSProviderProperties::setQueues(std::shared_ptr<ConfigNodePropertyArray> value)
{
    m_Queues = value;
    m_QueuesIsSet = true;
}
bool ComAdobeCqScreensMqActivemqImplArtemisJMSProviderProperties::queuesIsSet() const
{
    return m_QueuesIsSet;
}

void ComAdobeCqScreensMqActivemqImplArtemisJMSProviderProperties::unsetQueues()
{
    m_QueuesIsSet = false;
}

std::shared_ptr<ConfigNodePropertyArray> ComAdobeCqScreensMqActivemqImplArtemisJMSProviderProperties::getTopics() const
{
    return m_Topics;
}


void ComAdobeCqScreensMqActivemqImplArtemisJMSProviderProperties::setTopics(std::shared_ptr<ConfigNodePropertyArray> value)
{
    m_Topics = value;
    m_TopicsIsSet = true;
}
bool ComAdobeCqScreensMqActivemqImplArtemisJMSProviderProperties::topicsIsSet() const
{
    return m_TopicsIsSet;
}

void ComAdobeCqScreensMqActivemqImplArtemisJMSProviderProperties::unsetTopics()
{
    m_TopicsIsSet = false;
}

std::shared_ptr<ConfigNodePropertyInteger> ComAdobeCqScreensMqActivemqImplArtemisJMSProviderProperties::getAddressesMaxDeliveryAttempts() const
{
    return m_Addresses_max_delivery_attempts;
}


void ComAdobeCqScreensMqActivemqImplArtemisJMSProviderProperties::setAddressesMaxDeliveryAttempts(std::shared_ptr<ConfigNodePropertyInteger> value)
{
    m_Addresses_max_delivery_attempts = value;
    m_Addresses_max_delivery_attemptsIsSet = true;
}
bool ComAdobeCqScreensMqActivemqImplArtemisJMSProviderProperties::addressesMaxDeliveryAttemptsIsSet() const
{
    return m_Addresses_max_delivery_attemptsIsSet;
}

void ComAdobeCqScreensMqActivemqImplArtemisJMSProviderProperties::unsetAddresses_max_delivery_attempts()
{
    m_Addresses_max_delivery_attemptsIsSet = false;
}

std::shared_ptr<ConfigNodePropertyInteger> ComAdobeCqScreensMqActivemqImplArtemisJMSProviderProperties::getAddressesExpiryDelay() const
{
    return m_Addresses_expiry_delay;
}


void ComAdobeCqScreensMqActivemqImplArtemisJMSProviderProperties::setAddressesExpiryDelay(std::shared_ptr<ConfigNodePropertyInteger> value)
{
    m_Addresses_expiry_delay = value;
    m_Addresses_expiry_delayIsSet = true;
}
bool ComAdobeCqScreensMqActivemqImplArtemisJMSProviderProperties::addressesExpiryDelayIsSet() const
{
    return m_Addresses_expiry_delayIsSet;
}

void ComAdobeCqScreensMqActivemqImplArtemisJMSProviderProperties::unsetAddresses_expiry_delay()
{
    m_Addresses_expiry_delayIsSet = false;
}

std::shared_ptr<ConfigNodePropertyDropDown> ComAdobeCqScreensMqActivemqImplArtemisJMSProviderProperties::getAddressesAddressFullMessagePolicy() const
{
    return m_Addresses_address_full_message_policy;
}


void ComAdobeCqScreensMqActivemqImplArtemisJMSProviderProperties::setAddressesAddressFullMessagePolicy(std::shared_ptr<ConfigNodePropertyDropDown> value)
{
    m_Addresses_address_full_message_policy = value;
    m_Addresses_address_full_message_policyIsSet = true;
}
bool ComAdobeCqScreensMqActivemqImplArtemisJMSProviderProperties::addressesAddressFullMessagePolicyIsSet() const
{
    return m_Addresses_address_full_message_policyIsSet;
}

void ComAdobeCqScreensMqActivemqImplArtemisJMSProviderProperties::unsetAddresses_address_full_message_policy()
{
    m_Addresses_address_full_message_policyIsSet = false;
}

std::shared_ptr<ConfigNodePropertyInteger> ComAdobeCqScreensMqActivemqImplArtemisJMSProviderProperties::getAddressesMaxSizeBytes() const
{
    return m_Addresses_max_size_bytes;
}


void ComAdobeCqScreensMqActivemqImplArtemisJMSProviderProperties::setAddressesMaxSizeBytes(std::shared_ptr<ConfigNodePropertyInteger> value)
{
    m_Addresses_max_size_bytes = value;
    m_Addresses_max_size_bytesIsSet = true;
}
bool ComAdobeCqScreensMqActivemqImplArtemisJMSProviderProperties::addressesMaxSizeBytesIsSet() const
{
    return m_Addresses_max_size_bytesIsSet;
}

void ComAdobeCqScreensMqActivemqImplArtemisJMSProviderProperties::unsetAddresses_max_size_bytes()
{
    m_Addresses_max_size_bytesIsSet = false;
}

std::shared_ptr<ConfigNodePropertyInteger> ComAdobeCqScreensMqActivemqImplArtemisJMSProviderProperties::getAddressesPageSizeBytes() const
{
    return m_Addresses_page_size_bytes;
}


void ComAdobeCqScreensMqActivemqImplArtemisJMSProviderProperties::setAddressesPageSizeBytes(std::shared_ptr<ConfigNodePropertyInteger> value)
{
    m_Addresses_page_size_bytes = value;
    m_Addresses_page_size_bytesIsSet = true;
}
bool ComAdobeCqScreensMqActivemqImplArtemisJMSProviderProperties::addressesPageSizeBytesIsSet() const
{
    return m_Addresses_page_size_bytesIsSet;
}

void ComAdobeCqScreensMqActivemqImplArtemisJMSProviderProperties::unsetAddresses_page_size_bytes()
{
    m_Addresses_page_size_bytesIsSet = false;
}

std::shared_ptr<ConfigNodePropertyInteger> ComAdobeCqScreensMqActivemqImplArtemisJMSProviderProperties::getAddressesPageCacheMaxSize() const
{
    return m_Addresses_page_cache_max_size;
}


void ComAdobeCqScreensMqActivemqImplArtemisJMSProviderProperties::setAddressesPageCacheMaxSize(std::shared_ptr<ConfigNodePropertyInteger> value)
{
    m_Addresses_page_cache_max_size = value;
    m_Addresses_page_cache_max_sizeIsSet = true;
}
bool ComAdobeCqScreensMqActivemqImplArtemisJMSProviderProperties::addressesPageCacheMaxSizeIsSet() const
{
    return m_Addresses_page_cache_max_sizeIsSet;
}

void ComAdobeCqScreensMqActivemqImplArtemisJMSProviderProperties::unsetAddresses_page_cache_max_size()
{
    m_Addresses_page_cache_max_sizeIsSet = false;
}

std::shared_ptr<ConfigNodePropertyString> ComAdobeCqScreensMqActivemqImplArtemisJMSProviderProperties::getClusterUser() const
{
    return m_Cluster_user;
}


void ComAdobeCqScreensMqActivemqImplArtemisJMSProviderProperties::setClusterUser(std::shared_ptr<ConfigNodePropertyString> value)
{
    m_Cluster_user = value;
    m_Cluster_userIsSet = true;
}
bool ComAdobeCqScreensMqActivemqImplArtemisJMSProviderProperties::clusterUserIsSet() const
{
    return m_Cluster_userIsSet;
}

void ComAdobeCqScreensMqActivemqImplArtemisJMSProviderProperties::unsetCluster_user()
{
    m_Cluster_userIsSet = false;
}

std::shared_ptr<ConfigNodePropertyString> ComAdobeCqScreensMqActivemqImplArtemisJMSProviderProperties::getClusterPassword() const
{
    return m_Cluster_password;
}


void ComAdobeCqScreensMqActivemqImplArtemisJMSProviderProperties::setClusterPassword(std::shared_ptr<ConfigNodePropertyString> value)
{
    m_Cluster_password = value;
    m_Cluster_passwordIsSet = true;
}
bool ComAdobeCqScreensMqActivemqImplArtemisJMSProviderProperties::clusterPasswordIsSet() const
{
    return m_Cluster_passwordIsSet;
}

void ComAdobeCqScreensMqActivemqImplArtemisJMSProviderProperties::unsetCluster_password()
{
    m_Cluster_passwordIsSet = false;
}

std::shared_ptr<ConfigNodePropertyInteger> ComAdobeCqScreensMqActivemqImplArtemisJMSProviderProperties::getClusterCallTimeout() const
{
    return m_Cluster_call_timeout;
}


void ComAdobeCqScreensMqActivemqImplArtemisJMSProviderProperties::setClusterCallTimeout(std::shared_ptr<ConfigNodePropertyInteger> value)
{
    m_Cluster_call_timeout = value;
    m_Cluster_call_timeoutIsSet = true;
}
bool ComAdobeCqScreensMqActivemqImplArtemisJMSProviderProperties::clusterCallTimeoutIsSet() const
{
    return m_Cluster_call_timeoutIsSet;
}

void ComAdobeCqScreensMqActivemqImplArtemisJMSProviderProperties::unsetCluster_call_timeout()
{
    m_Cluster_call_timeoutIsSet = false;
}

std::shared_ptr<ConfigNodePropertyInteger> ComAdobeCqScreensMqActivemqImplArtemisJMSProviderProperties::getClusterCallFailoverTimeout() const
{
    return m_Cluster_call_failover_timeout;
}


void ComAdobeCqScreensMqActivemqImplArtemisJMSProviderProperties::setClusterCallFailoverTimeout(std::shared_ptr<ConfigNodePropertyInteger> value)
{
    m_Cluster_call_failover_timeout = value;
    m_Cluster_call_failover_timeoutIsSet = true;
}
bool ComAdobeCqScreensMqActivemqImplArtemisJMSProviderProperties::clusterCallFailoverTimeoutIsSet() const
{
    return m_Cluster_call_failover_timeoutIsSet;
}

void ComAdobeCqScreensMqActivemqImplArtemisJMSProviderProperties::unsetCluster_call_failover_timeout()
{
    m_Cluster_call_failover_timeoutIsSet = false;
}

std::shared_ptr<ConfigNodePropertyInteger> ComAdobeCqScreensMqActivemqImplArtemisJMSProviderProperties::getClusterClientFailureCheckPeriod() const
{
    return m_Cluster_client_failure_check_period;
}


void ComAdobeCqScreensMqActivemqImplArtemisJMSProviderProperties::setClusterClientFailureCheckPeriod(std::shared_ptr<ConfigNodePropertyInteger> value)
{
    m_Cluster_client_failure_check_period = value;
    m_Cluster_client_failure_check_periodIsSet = true;
}
bool ComAdobeCqScreensMqActivemqImplArtemisJMSProviderProperties::clusterClientFailureCheckPeriodIsSet() const
{
    return m_Cluster_client_failure_check_periodIsSet;
}

void ComAdobeCqScreensMqActivemqImplArtemisJMSProviderProperties::unsetCluster_client_failure_check_period()
{
    m_Cluster_client_failure_check_periodIsSet = false;
}

std::shared_ptr<ConfigNodePropertyInteger> ComAdobeCqScreensMqActivemqImplArtemisJMSProviderProperties::getClusterNotificationAttempts() const
{
    return m_Cluster_notification_attempts;
}


void ComAdobeCqScreensMqActivemqImplArtemisJMSProviderProperties::setClusterNotificationAttempts(std::shared_ptr<ConfigNodePropertyInteger> value)
{
    m_Cluster_notification_attempts = value;
    m_Cluster_notification_attemptsIsSet = true;
}
bool ComAdobeCqScreensMqActivemqImplArtemisJMSProviderProperties::clusterNotificationAttemptsIsSet() const
{
    return m_Cluster_notification_attemptsIsSet;
}

void ComAdobeCqScreensMqActivemqImplArtemisJMSProviderProperties::unsetCluster_notification_attempts()
{
    m_Cluster_notification_attemptsIsSet = false;
}

std::shared_ptr<ConfigNodePropertyInteger> ComAdobeCqScreensMqActivemqImplArtemisJMSProviderProperties::getClusterNotificationInterval() const
{
    return m_Cluster_notification_interval;
}


void ComAdobeCqScreensMqActivemqImplArtemisJMSProviderProperties::setClusterNotificationInterval(std::shared_ptr<ConfigNodePropertyInteger> value)
{
    m_Cluster_notification_interval = value;
    m_Cluster_notification_intervalIsSet = true;
}
bool ComAdobeCqScreensMqActivemqImplArtemisJMSProviderProperties::clusterNotificationIntervalIsSet() const
{
    return m_Cluster_notification_intervalIsSet;
}

void ComAdobeCqScreensMqActivemqImplArtemisJMSProviderProperties::unsetCluster_notification_interval()
{
    m_Cluster_notification_intervalIsSet = false;
}

std::shared_ptr<ConfigNodePropertyInteger> ComAdobeCqScreensMqActivemqImplArtemisJMSProviderProperties::getIdCacheSize() const
{
    return m_Id_cache_size;
}


void ComAdobeCqScreensMqActivemqImplArtemisJMSProviderProperties::setIdCacheSize(std::shared_ptr<ConfigNodePropertyInteger> value)
{
    m_Id_cache_size = value;
    m_Id_cache_sizeIsSet = true;
}
bool ComAdobeCqScreensMqActivemqImplArtemisJMSProviderProperties::idCacheSizeIsSet() const
{
    return m_Id_cache_sizeIsSet;
}

void ComAdobeCqScreensMqActivemqImplArtemisJMSProviderProperties::unsetId_cache_size()
{
    m_Id_cache_sizeIsSet = false;
}

std::shared_ptr<ConfigNodePropertyInteger> ComAdobeCqScreensMqActivemqImplArtemisJMSProviderProperties::getClusterConfirmationWindowSize() const
{
    return m_Cluster_confirmation_window_size;
}


void ComAdobeCqScreensMqActivemqImplArtemisJMSProviderProperties::setClusterConfirmationWindowSize(std::shared_ptr<ConfigNodePropertyInteger> value)
{
    m_Cluster_confirmation_window_size = value;
    m_Cluster_confirmation_window_sizeIsSet = true;
}
bool ComAdobeCqScreensMqActivemqImplArtemisJMSProviderProperties::clusterConfirmationWindowSizeIsSet() const
{
    return m_Cluster_confirmation_window_sizeIsSet;
}

void ComAdobeCqScreensMqActivemqImplArtemisJMSProviderProperties::unsetCluster_confirmation_window_size()
{
    m_Cluster_confirmation_window_sizeIsSet = false;
}

std::shared_ptr<ConfigNodePropertyInteger> ComAdobeCqScreensMqActivemqImplArtemisJMSProviderProperties::getClusterConnectionTtl() const
{
    return m_Cluster_connection_ttl;
}


void ComAdobeCqScreensMqActivemqImplArtemisJMSProviderProperties::setClusterConnectionTtl(std::shared_ptr<ConfigNodePropertyInteger> value)
{
    m_Cluster_connection_ttl = value;
    m_Cluster_connection_ttlIsSet = true;
}
bool ComAdobeCqScreensMqActivemqImplArtemisJMSProviderProperties::clusterConnectionTtlIsSet() const
{
    return m_Cluster_connection_ttlIsSet;
}

void ComAdobeCqScreensMqActivemqImplArtemisJMSProviderProperties::unsetCluster_connection_ttl()
{
    m_Cluster_connection_ttlIsSet = false;
}

std::shared_ptr<ConfigNodePropertyBoolean> ComAdobeCqScreensMqActivemqImplArtemisJMSProviderProperties::getClusterDuplicateDetection() const
{
    return m_Cluster_duplicate_detection;
}


void ComAdobeCqScreensMqActivemqImplArtemisJMSProviderProperties::setClusterDuplicateDetection(std::shared_ptr<ConfigNodePropertyBoolean> value)
{
    m_Cluster_duplicate_detection = value;
    m_Cluster_duplicate_detectionIsSet = true;
}
bool ComAdobeCqScreensMqActivemqImplArtemisJMSProviderProperties::clusterDuplicateDetectionIsSet() const
{
    return m_Cluster_duplicate_detectionIsSet;
}

void ComAdobeCqScreensMqActivemqImplArtemisJMSProviderProperties::unsetCluster_duplicate_detection()
{
    m_Cluster_duplicate_detectionIsSet = false;
}

std::shared_ptr<ConfigNodePropertyInteger> ComAdobeCqScreensMqActivemqImplArtemisJMSProviderProperties::getClusterInitialConnectAttempts() const
{
    return m_Cluster_initial_connect_attempts;
}


void ComAdobeCqScreensMqActivemqImplArtemisJMSProviderProperties::setClusterInitialConnectAttempts(std::shared_ptr<ConfigNodePropertyInteger> value)
{
    m_Cluster_initial_connect_attempts = value;
    m_Cluster_initial_connect_attemptsIsSet = true;
}
bool ComAdobeCqScreensMqActivemqImplArtemisJMSProviderProperties::clusterInitialConnectAttemptsIsSet() const
{
    return m_Cluster_initial_connect_attemptsIsSet;
}

void ComAdobeCqScreensMqActivemqImplArtemisJMSProviderProperties::unsetCluster_initial_connect_attempts()
{
    m_Cluster_initial_connect_attemptsIsSet = false;
}

std::shared_ptr<ConfigNodePropertyInteger> ComAdobeCqScreensMqActivemqImplArtemisJMSProviderProperties::getClusterMaxRetryInterval() const
{
    return m_Cluster_max_retry_interval;
}


void ComAdobeCqScreensMqActivemqImplArtemisJMSProviderProperties::setClusterMaxRetryInterval(std::shared_ptr<ConfigNodePropertyInteger> value)
{
    m_Cluster_max_retry_interval = value;
    m_Cluster_max_retry_intervalIsSet = true;
}
bool ComAdobeCqScreensMqActivemqImplArtemisJMSProviderProperties::clusterMaxRetryIntervalIsSet() const
{
    return m_Cluster_max_retry_intervalIsSet;
}

void ComAdobeCqScreensMqActivemqImplArtemisJMSProviderProperties::unsetCluster_max_retry_interval()
{
    m_Cluster_max_retry_intervalIsSet = false;
}

std::shared_ptr<ConfigNodePropertyInteger> ComAdobeCqScreensMqActivemqImplArtemisJMSProviderProperties::getClusterMinLargeMessageSize() const
{
    return m_Cluster_min_large_message_size;
}


void ComAdobeCqScreensMqActivemqImplArtemisJMSProviderProperties::setClusterMinLargeMessageSize(std::shared_ptr<ConfigNodePropertyInteger> value)
{
    m_Cluster_min_large_message_size = value;
    m_Cluster_min_large_message_sizeIsSet = true;
}
bool ComAdobeCqScreensMqActivemqImplArtemisJMSProviderProperties::clusterMinLargeMessageSizeIsSet() const
{
    return m_Cluster_min_large_message_sizeIsSet;
}

void ComAdobeCqScreensMqActivemqImplArtemisJMSProviderProperties::unsetCluster_min_large_message_size()
{
    m_Cluster_min_large_message_sizeIsSet = false;
}

std::shared_ptr<ConfigNodePropertyInteger> ComAdobeCqScreensMqActivemqImplArtemisJMSProviderProperties::getClusterProducerWindowSize() const
{
    return m_Cluster_producer_window_size;
}


void ComAdobeCqScreensMqActivemqImplArtemisJMSProviderProperties::setClusterProducerWindowSize(std::shared_ptr<ConfigNodePropertyInteger> value)
{
    m_Cluster_producer_window_size = value;
    m_Cluster_producer_window_sizeIsSet = true;
}
bool ComAdobeCqScreensMqActivemqImplArtemisJMSProviderProperties::clusterProducerWindowSizeIsSet() const
{
    return m_Cluster_producer_window_sizeIsSet;
}

void ComAdobeCqScreensMqActivemqImplArtemisJMSProviderProperties::unsetCluster_producer_window_size()
{
    m_Cluster_producer_window_sizeIsSet = false;
}

std::shared_ptr<ConfigNodePropertyInteger> ComAdobeCqScreensMqActivemqImplArtemisJMSProviderProperties::getClusterReconnectAttempts() const
{
    return m_Cluster_reconnect_attempts;
}


void ComAdobeCqScreensMqActivemqImplArtemisJMSProviderProperties::setClusterReconnectAttempts(std::shared_ptr<ConfigNodePropertyInteger> value)
{
    m_Cluster_reconnect_attempts = value;
    m_Cluster_reconnect_attemptsIsSet = true;
}
bool ComAdobeCqScreensMqActivemqImplArtemisJMSProviderProperties::clusterReconnectAttemptsIsSet() const
{
    return m_Cluster_reconnect_attemptsIsSet;
}

void ComAdobeCqScreensMqActivemqImplArtemisJMSProviderProperties::unsetCluster_reconnect_attempts()
{
    m_Cluster_reconnect_attemptsIsSet = false;
}

std::shared_ptr<ConfigNodePropertyInteger> ComAdobeCqScreensMqActivemqImplArtemisJMSProviderProperties::getClusterRetryInterval() const
{
    return m_Cluster_retry_interval;
}


void ComAdobeCqScreensMqActivemqImplArtemisJMSProviderProperties::setClusterRetryInterval(std::shared_ptr<ConfigNodePropertyInteger> value)
{
    m_Cluster_retry_interval = value;
    m_Cluster_retry_intervalIsSet = true;
}
bool ComAdobeCqScreensMqActivemqImplArtemisJMSProviderProperties::clusterRetryIntervalIsSet() const
{
    return m_Cluster_retry_intervalIsSet;
}

void ComAdobeCqScreensMqActivemqImplArtemisJMSProviderProperties::unsetCluster_retry_interval()
{
    m_Cluster_retry_intervalIsSet = false;
}

std::shared_ptr<ConfigNodePropertyFloat> ComAdobeCqScreensMqActivemqImplArtemisJMSProviderProperties::getClusterRetryIntervalMultiplier() const
{
    return m_Cluster_retry_interval_multiplier;
}


void ComAdobeCqScreensMqActivemqImplArtemisJMSProviderProperties::setClusterRetryIntervalMultiplier(std::shared_ptr<ConfigNodePropertyFloat> value)
{
    m_Cluster_retry_interval_multiplier = value;
    m_Cluster_retry_interval_multiplierIsSet = true;
}
bool ComAdobeCqScreensMqActivemqImplArtemisJMSProviderProperties::clusterRetryIntervalMultiplierIsSet() const
{
    return m_Cluster_retry_interval_multiplierIsSet;
}

void ComAdobeCqScreensMqActivemqImplArtemisJMSProviderProperties::unsetCluster_retry_interval_multiplier()
{
    m_Cluster_retry_interval_multiplierIsSet = false;
}

}
}
}
}

