/**
 * Adobe Experience Manager OSGI config (AEM) API
 * Swagger AEM OSGI is an OpenAPI specification for Adobe Experience Manager (AEM) OSGI Configurations API
 *
 * OpenAPI spec version: 1.0.0-pre.0
 * Contact: opensource@shinesolutions.com
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 3.2.1-SNAPSHOT.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * ComAdobeGraniteAuthSamlSamlAuthenticationHandlerProperties.h
 *
 * 
 */

#ifndef ORG_OPENAPITOOLS_CLIENT_MODEL_ComAdobeGraniteAuthSamlSamlAuthenticationHandlerProperties_H_
#define ORG_OPENAPITOOLS_CLIENT_MODEL_ComAdobeGraniteAuthSamlSamlAuthenticationHandlerProperties_H_


#include "../ModelBase.h"

#include "ConfigNodePropertyBoolean.h"
#include "ConfigNodePropertyDropDown.h"
#include "ConfigNodePropertyInteger.h"
#include "ConfigNodePropertyArray.h"
#include "ConfigNodePropertyString.h"

namespace org {
namespace openapitools {
namespace client {
namespace model {

/// <summary>
/// 
/// </summary>
class  ComAdobeGraniteAuthSamlSamlAuthenticationHandlerProperties
    : public ModelBase
{
public:
    ComAdobeGraniteAuthSamlSamlAuthenticationHandlerProperties();
    virtual ~ComAdobeGraniteAuthSamlSamlAuthenticationHandlerProperties();

    /////////////////////////////////////////////
    /// ModelBase overrides

    void validate() override;

    web::json::value toJson() const override;
    void fromJson(web::json::value& json) override;

    void toMultipart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& namePrefix) const override;
    void fromMultiPart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& namePrefix) override;

    /////////////////////////////////////////////
    /// ComAdobeGraniteAuthSamlSamlAuthenticationHandlerProperties members

    /// <summary>
    /// 
    /// </summary>
    std::shared_ptr<ConfigNodePropertyArray> getPath() const;
    bool pathIsSet() const;
    void unsetPath();
    void setPath(std::shared_ptr<ConfigNodePropertyArray> value);
    /// <summary>
    /// 
    /// </summary>
    std::shared_ptr<ConfigNodePropertyInteger> getServiceRanking() const;
    bool serviceRankingIsSet() const;
    void unsetService_ranking();
    void setServiceRanking(std::shared_ptr<ConfigNodePropertyInteger> value);
    /// <summary>
    /// 
    /// </summary>
    std::shared_ptr<ConfigNodePropertyString> getIdpUrl() const;
    bool idpUrlIsSet() const;
    void unsetIdpUrl();
    void setIdpUrl(std::shared_ptr<ConfigNodePropertyString> value);
    /// <summary>
    /// 
    /// </summary>
    std::shared_ptr<ConfigNodePropertyString> getIdpCertAlias() const;
    bool idpCertAliasIsSet() const;
    void unsetIdpCertAlias();
    void setIdpCertAlias(std::shared_ptr<ConfigNodePropertyString> value);
    /// <summary>
    /// 
    /// </summary>
    std::shared_ptr<ConfigNodePropertyBoolean> getIdpHttpRedirect() const;
    bool idpHttpRedirectIsSet() const;
    void unsetIdpHttpRedirect();
    void setIdpHttpRedirect(std::shared_ptr<ConfigNodePropertyBoolean> value);
    /// <summary>
    /// 
    /// </summary>
    std::shared_ptr<ConfigNodePropertyString> getServiceProviderEntityId() const;
    bool serviceProviderEntityIdIsSet() const;
    void unsetServiceProviderEntityId();
    void setServiceProviderEntityId(std::shared_ptr<ConfigNodePropertyString> value);
    /// <summary>
    /// 
    /// </summary>
    std::shared_ptr<ConfigNodePropertyString> getAssertionConsumerServiceURL() const;
    bool assertionConsumerServiceURLIsSet() const;
    void unsetAssertionConsumerServiceURL();
    void setAssertionConsumerServiceURL(std::shared_ptr<ConfigNodePropertyString> value);
    /// <summary>
    /// 
    /// </summary>
    std::shared_ptr<ConfigNodePropertyString> getSpPrivateKeyAlias() const;
    bool spPrivateKeyAliasIsSet() const;
    void unsetSpPrivateKeyAlias();
    void setSpPrivateKeyAlias(std::shared_ptr<ConfigNodePropertyString> value);
    /// <summary>
    /// 
    /// </summary>
    std::shared_ptr<ConfigNodePropertyString> getKeyStorePassword() const;
    bool keyStorePasswordIsSet() const;
    void unsetKeyStorePassword();
    void setKeyStorePassword(std::shared_ptr<ConfigNodePropertyString> value);
    /// <summary>
    /// 
    /// </summary>
    std::shared_ptr<ConfigNodePropertyString> getDefaultRedirectUrl() const;
    bool defaultRedirectUrlIsSet() const;
    void unsetDefaultRedirectUrl();
    void setDefaultRedirectUrl(std::shared_ptr<ConfigNodePropertyString> value);
    /// <summary>
    /// 
    /// </summary>
    std::shared_ptr<ConfigNodePropertyString> getUserIDAttribute() const;
    bool userIDAttributeIsSet() const;
    void unsetUserIDAttribute();
    void setUserIDAttribute(std::shared_ptr<ConfigNodePropertyString> value);
    /// <summary>
    /// 
    /// </summary>
    std::shared_ptr<ConfigNodePropertyBoolean> getUseEncryption() const;
    bool useEncryptionIsSet() const;
    void unsetUseEncryption();
    void setUseEncryption(std::shared_ptr<ConfigNodePropertyBoolean> value);
    /// <summary>
    /// 
    /// </summary>
    std::shared_ptr<ConfigNodePropertyBoolean> getCreateUser() const;
    bool createUserIsSet() const;
    void unsetCreateUser();
    void setCreateUser(std::shared_ptr<ConfigNodePropertyBoolean> value);
    /// <summary>
    /// 
    /// </summary>
    std::shared_ptr<ConfigNodePropertyString> getUserIntermediatePath() const;
    bool userIntermediatePathIsSet() const;
    void unsetUserIntermediatePath();
    void setUserIntermediatePath(std::shared_ptr<ConfigNodePropertyString> value);
    /// <summary>
    /// 
    /// </summary>
    std::shared_ptr<ConfigNodePropertyBoolean> getAddGroupMemberships() const;
    bool addGroupMembershipsIsSet() const;
    void unsetAddGroupMemberships();
    void setAddGroupMemberships(std::shared_ptr<ConfigNodePropertyBoolean> value);
    /// <summary>
    /// 
    /// </summary>
    std::shared_ptr<ConfigNodePropertyString> getGroupMembershipAttribute() const;
    bool groupMembershipAttributeIsSet() const;
    void unsetGroupMembershipAttribute();
    void setGroupMembershipAttribute(std::shared_ptr<ConfigNodePropertyString> value);
    /// <summary>
    /// 
    /// </summary>
    std::shared_ptr<ConfigNodePropertyArray> getDefaultGroups() const;
    bool defaultGroupsIsSet() const;
    void unsetDefaultGroups();
    void setDefaultGroups(std::shared_ptr<ConfigNodePropertyArray> value);
    /// <summary>
    /// 
    /// </summary>
    std::shared_ptr<ConfigNodePropertyString> getNameIdFormat() const;
    bool nameIdFormatIsSet() const;
    void unsetNameIdFormat();
    void setNameIdFormat(std::shared_ptr<ConfigNodePropertyString> value);
    /// <summary>
    /// 
    /// </summary>
    std::shared_ptr<ConfigNodePropertyArray> getSynchronizeAttributes() const;
    bool synchronizeAttributesIsSet() const;
    void unsetSynchronizeAttributes();
    void setSynchronizeAttributes(std::shared_ptr<ConfigNodePropertyArray> value);
    /// <summary>
    /// 
    /// </summary>
    std::shared_ptr<ConfigNodePropertyBoolean> getHandleLogout() const;
    bool handleLogoutIsSet() const;
    void unsetHandleLogout();
    void setHandleLogout(std::shared_ptr<ConfigNodePropertyBoolean> value);
    /// <summary>
    /// 
    /// </summary>
    std::shared_ptr<ConfigNodePropertyString> getLogoutUrl() const;
    bool logoutUrlIsSet() const;
    void unsetLogoutUrl();
    void setLogoutUrl(std::shared_ptr<ConfigNodePropertyString> value);
    /// <summary>
    /// 
    /// </summary>
    std::shared_ptr<ConfigNodePropertyInteger> getClockTolerance() const;
    bool clockToleranceIsSet() const;
    void unsetClockTolerance();
    void setClockTolerance(std::shared_ptr<ConfigNodePropertyInteger> value);
    /// <summary>
    /// 
    /// </summary>
    std::shared_ptr<ConfigNodePropertyString> getDigestMethod() const;
    bool digestMethodIsSet() const;
    void unsetDigestMethod();
    void setDigestMethod(std::shared_ptr<ConfigNodePropertyString> value);
    /// <summary>
    /// 
    /// </summary>
    std::shared_ptr<ConfigNodePropertyString> getSignatureMethod() const;
    bool signatureMethodIsSet() const;
    void unsetSignatureMethod();
    void setSignatureMethod(std::shared_ptr<ConfigNodePropertyString> value);
    /// <summary>
    /// 
    /// </summary>
    std::shared_ptr<ConfigNodePropertyDropDown> getIdentitySyncType() const;
    bool identitySyncTypeIsSet() const;
    void unsetIdentitySyncType();
    void setIdentitySyncType(std::shared_ptr<ConfigNodePropertyDropDown> value);
    /// <summary>
    /// 
    /// </summary>
    std::shared_ptr<ConfigNodePropertyString> getIdpIdentifier() const;
    bool idpIdentifierIsSet() const;
    void unsetIdpIdentifier();
    void setIdpIdentifier(std::shared_ptr<ConfigNodePropertyString> value);

protected:
    std::shared_ptr<ConfigNodePropertyArray> m_Path;
    bool m_PathIsSet;
    std::shared_ptr<ConfigNodePropertyInteger> m_Service_ranking;
    bool m_Service_rankingIsSet;
    std::shared_ptr<ConfigNodePropertyString> m_IdpUrl;
    bool m_IdpUrlIsSet;
    std::shared_ptr<ConfigNodePropertyString> m_IdpCertAlias;
    bool m_IdpCertAliasIsSet;
    std::shared_ptr<ConfigNodePropertyBoolean> m_IdpHttpRedirect;
    bool m_IdpHttpRedirectIsSet;
    std::shared_ptr<ConfigNodePropertyString> m_ServiceProviderEntityId;
    bool m_ServiceProviderEntityIdIsSet;
    std::shared_ptr<ConfigNodePropertyString> m_AssertionConsumerServiceURL;
    bool m_AssertionConsumerServiceURLIsSet;
    std::shared_ptr<ConfigNodePropertyString> m_SpPrivateKeyAlias;
    bool m_SpPrivateKeyAliasIsSet;
    std::shared_ptr<ConfigNodePropertyString> m_KeyStorePassword;
    bool m_KeyStorePasswordIsSet;
    std::shared_ptr<ConfigNodePropertyString> m_DefaultRedirectUrl;
    bool m_DefaultRedirectUrlIsSet;
    std::shared_ptr<ConfigNodePropertyString> m_UserIDAttribute;
    bool m_UserIDAttributeIsSet;
    std::shared_ptr<ConfigNodePropertyBoolean> m_UseEncryption;
    bool m_UseEncryptionIsSet;
    std::shared_ptr<ConfigNodePropertyBoolean> m_CreateUser;
    bool m_CreateUserIsSet;
    std::shared_ptr<ConfigNodePropertyString> m_UserIntermediatePath;
    bool m_UserIntermediatePathIsSet;
    std::shared_ptr<ConfigNodePropertyBoolean> m_AddGroupMemberships;
    bool m_AddGroupMembershipsIsSet;
    std::shared_ptr<ConfigNodePropertyString> m_GroupMembershipAttribute;
    bool m_GroupMembershipAttributeIsSet;
    std::shared_ptr<ConfigNodePropertyArray> m_DefaultGroups;
    bool m_DefaultGroupsIsSet;
    std::shared_ptr<ConfigNodePropertyString> m_NameIdFormat;
    bool m_NameIdFormatIsSet;
    std::shared_ptr<ConfigNodePropertyArray> m_SynchronizeAttributes;
    bool m_SynchronizeAttributesIsSet;
    std::shared_ptr<ConfigNodePropertyBoolean> m_HandleLogout;
    bool m_HandleLogoutIsSet;
    std::shared_ptr<ConfigNodePropertyString> m_LogoutUrl;
    bool m_LogoutUrlIsSet;
    std::shared_ptr<ConfigNodePropertyInteger> m_ClockTolerance;
    bool m_ClockToleranceIsSet;
    std::shared_ptr<ConfigNodePropertyString> m_DigestMethod;
    bool m_DigestMethodIsSet;
    std::shared_ptr<ConfigNodePropertyString> m_SignatureMethod;
    bool m_SignatureMethodIsSet;
    std::shared_ptr<ConfigNodePropertyDropDown> m_IdentitySyncType;
    bool m_IdentitySyncTypeIsSet;
    std::shared_ptr<ConfigNodePropertyString> m_IdpIdentifier;
    bool m_IdpIdentifierIsSet;
};

}
}
}
}

#endif /* ORG_OPENAPITOOLS_CLIENT_MODEL_ComAdobeGraniteAuthSamlSamlAuthenticationHandlerProperties_H_ */
