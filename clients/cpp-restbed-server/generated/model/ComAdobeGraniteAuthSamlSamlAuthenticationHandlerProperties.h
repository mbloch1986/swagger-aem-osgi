/**
 * Adobe Experience Manager OSGI config (AEM) API
 * Swagger AEM OSGI is an OpenAPI specification for Adobe Experience Manager (AEM) OSGI Configurations API
 *
 * OpenAPI spec version: 1.0.0-pre.0
 * Contact: opensource@shinesolutions.com
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 3.2.1-SNAPSHOT.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * ComAdobeGraniteAuthSamlSamlAuthenticationHandlerProperties.h
 *
 * 
 */

#ifndef ComAdobeGraniteAuthSamlSamlAuthenticationHandlerProperties_H_
#define ComAdobeGraniteAuthSamlSamlAuthenticationHandlerProperties_H_



#include "ConfigNodePropertyBoolean.h"
#include "ConfigNodePropertyDropDown.h"
#include "ConfigNodePropertyInteger.h"
#include "ConfigNodePropertyArray.h"
#include "ConfigNodePropertyString.h"
#include <memory>

namespace org {
namespace openapitools {
namespace server {
namespace model {

/// <summary>
/// 
/// </summary>
class  ComAdobeGraniteAuthSamlSamlAuthenticationHandlerProperties
{
public:
    ComAdobeGraniteAuthSamlSamlAuthenticationHandlerProperties();
    virtual ~ComAdobeGraniteAuthSamlSamlAuthenticationHandlerProperties();
    
    std::string toJsonString();
    void fromJsonString(std::string const& jsonString);

    /////////////////////////////////////////////
    /// ComAdobeGraniteAuthSamlSamlAuthenticationHandlerProperties members
    
    /// <summary>
    /// 
    /// </summary>
    std::shared_ptr<ConfigNodePropertyArray> getPath() const;
    void setPath(std::shared_ptr<ConfigNodePropertyArray> value);
    /// <summary>
    /// 
    /// </summary>
    std::shared_ptr<ConfigNodePropertyInteger> getServiceRanking() const;
    void setServiceRanking(std::shared_ptr<ConfigNodePropertyInteger> value);
    /// <summary>
    /// 
    /// </summary>
    std::shared_ptr<ConfigNodePropertyString> getIdpUrl() const;
    void setIdpUrl(std::shared_ptr<ConfigNodePropertyString> value);
    /// <summary>
    /// 
    /// </summary>
    std::shared_ptr<ConfigNodePropertyString> getIdpCertAlias() const;
    void setIdpCertAlias(std::shared_ptr<ConfigNodePropertyString> value);
    /// <summary>
    /// 
    /// </summary>
    std::shared_ptr<ConfigNodePropertyBoolean> getIdpHttpRedirect() const;
    void setIdpHttpRedirect(std::shared_ptr<ConfigNodePropertyBoolean> value);
    /// <summary>
    /// 
    /// </summary>
    std::shared_ptr<ConfigNodePropertyString> getServiceProviderEntityId() const;
    void setServiceProviderEntityId(std::shared_ptr<ConfigNodePropertyString> value);
    /// <summary>
    /// 
    /// </summary>
    std::shared_ptr<ConfigNodePropertyString> getAssertionConsumerServiceURL() const;
    void setAssertionConsumerServiceURL(std::shared_ptr<ConfigNodePropertyString> value);
    /// <summary>
    /// 
    /// </summary>
    std::shared_ptr<ConfigNodePropertyString> getSpPrivateKeyAlias() const;
    void setSpPrivateKeyAlias(std::shared_ptr<ConfigNodePropertyString> value);
    /// <summary>
    /// 
    /// </summary>
    std::shared_ptr<ConfigNodePropertyString> getKeyStorePassword() const;
    void setKeyStorePassword(std::shared_ptr<ConfigNodePropertyString> value);
    /// <summary>
    /// 
    /// </summary>
    std::shared_ptr<ConfigNodePropertyString> getDefaultRedirectUrl() const;
    void setDefaultRedirectUrl(std::shared_ptr<ConfigNodePropertyString> value);
    /// <summary>
    /// 
    /// </summary>
    std::shared_ptr<ConfigNodePropertyString> getUserIDAttribute() const;
    void setUserIDAttribute(std::shared_ptr<ConfigNodePropertyString> value);
    /// <summary>
    /// 
    /// </summary>
    std::shared_ptr<ConfigNodePropertyBoolean> getUseEncryption() const;
    void setUseEncryption(std::shared_ptr<ConfigNodePropertyBoolean> value);
    /// <summary>
    /// 
    /// </summary>
    std::shared_ptr<ConfigNodePropertyBoolean> getCreateUser() const;
    void setCreateUser(std::shared_ptr<ConfigNodePropertyBoolean> value);
    /// <summary>
    /// 
    /// </summary>
    std::shared_ptr<ConfigNodePropertyString> getUserIntermediatePath() const;
    void setUserIntermediatePath(std::shared_ptr<ConfigNodePropertyString> value);
    /// <summary>
    /// 
    /// </summary>
    std::shared_ptr<ConfigNodePropertyBoolean> getAddGroupMemberships() const;
    void setAddGroupMemberships(std::shared_ptr<ConfigNodePropertyBoolean> value);
    /// <summary>
    /// 
    /// </summary>
    std::shared_ptr<ConfigNodePropertyString> getGroupMembershipAttribute() const;
    void setGroupMembershipAttribute(std::shared_ptr<ConfigNodePropertyString> value);
    /// <summary>
    /// 
    /// </summary>
    std::shared_ptr<ConfigNodePropertyArray> getDefaultGroups() const;
    void setDefaultGroups(std::shared_ptr<ConfigNodePropertyArray> value);
    /// <summary>
    /// 
    /// </summary>
    std::shared_ptr<ConfigNodePropertyString> getNameIdFormat() const;
    void setNameIdFormat(std::shared_ptr<ConfigNodePropertyString> value);
    /// <summary>
    /// 
    /// </summary>
    std::shared_ptr<ConfigNodePropertyArray> getSynchronizeAttributes() const;
    void setSynchronizeAttributes(std::shared_ptr<ConfigNodePropertyArray> value);
    /// <summary>
    /// 
    /// </summary>
    std::shared_ptr<ConfigNodePropertyBoolean> getHandleLogout() const;
    void setHandleLogout(std::shared_ptr<ConfigNodePropertyBoolean> value);
    /// <summary>
    /// 
    /// </summary>
    std::shared_ptr<ConfigNodePropertyString> getLogoutUrl() const;
    void setLogoutUrl(std::shared_ptr<ConfigNodePropertyString> value);
    /// <summary>
    /// 
    /// </summary>
    std::shared_ptr<ConfigNodePropertyInteger> getClockTolerance() const;
    void setClockTolerance(std::shared_ptr<ConfigNodePropertyInteger> value);
    /// <summary>
    /// 
    /// </summary>
    std::shared_ptr<ConfigNodePropertyString> getDigestMethod() const;
    void setDigestMethod(std::shared_ptr<ConfigNodePropertyString> value);
    /// <summary>
    /// 
    /// </summary>
    std::shared_ptr<ConfigNodePropertyString> getSignatureMethod() const;
    void setSignatureMethod(std::shared_ptr<ConfigNodePropertyString> value);
    /// <summary>
    /// 
    /// </summary>
    std::shared_ptr<ConfigNodePropertyDropDown> getIdentitySyncType() const;
    void setIdentitySyncType(std::shared_ptr<ConfigNodePropertyDropDown> value);
    /// <summary>
    /// 
    /// </summary>
    std::shared_ptr<ConfigNodePropertyString> getIdpIdentifier() const;
    void setIdpIdentifier(std::shared_ptr<ConfigNodePropertyString> value);

protected:
    std::shared_ptr<ConfigNodePropertyArray> m_Path;
    std::shared_ptr<ConfigNodePropertyInteger> m_Service_ranking;
    std::shared_ptr<ConfigNodePropertyString> m_IdpUrl;
    std::shared_ptr<ConfigNodePropertyString> m_IdpCertAlias;
    std::shared_ptr<ConfigNodePropertyBoolean> m_IdpHttpRedirect;
    std::shared_ptr<ConfigNodePropertyString> m_ServiceProviderEntityId;
    std::shared_ptr<ConfigNodePropertyString> m_AssertionConsumerServiceURL;
    std::shared_ptr<ConfigNodePropertyString> m_SpPrivateKeyAlias;
    std::shared_ptr<ConfigNodePropertyString> m_KeyStorePassword;
    std::shared_ptr<ConfigNodePropertyString> m_DefaultRedirectUrl;
    std::shared_ptr<ConfigNodePropertyString> m_UserIDAttribute;
    std::shared_ptr<ConfigNodePropertyBoolean> m_UseEncryption;
    std::shared_ptr<ConfigNodePropertyBoolean> m_CreateUser;
    std::shared_ptr<ConfigNodePropertyString> m_UserIntermediatePath;
    std::shared_ptr<ConfigNodePropertyBoolean> m_AddGroupMemberships;
    std::shared_ptr<ConfigNodePropertyString> m_GroupMembershipAttribute;
    std::shared_ptr<ConfigNodePropertyArray> m_DefaultGroups;
    std::shared_ptr<ConfigNodePropertyString> m_NameIdFormat;
    std::shared_ptr<ConfigNodePropertyArray> m_SynchronizeAttributes;
    std::shared_ptr<ConfigNodePropertyBoolean> m_HandleLogout;
    std::shared_ptr<ConfigNodePropertyString> m_LogoutUrl;
    std::shared_ptr<ConfigNodePropertyInteger> m_ClockTolerance;
    std::shared_ptr<ConfigNodePropertyString> m_DigestMethod;
    std::shared_ptr<ConfigNodePropertyString> m_SignatureMethod;
    std::shared_ptr<ConfigNodePropertyDropDown> m_IdentitySyncType;
    std::shared_ptr<ConfigNodePropertyString> m_IdpIdentifier;
};

}
}
}
}

#endif /* ComAdobeGraniteAuthSamlSamlAuthenticationHandlerProperties_H_ */
