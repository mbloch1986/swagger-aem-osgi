package org.openapitools.client.api

import argonaut._
import argonaut.EncodeJson._
import argonaut.DecodeJson._

import org.http4s.{EntityDecoder, EntityEncoder}
import org.http4s.argonaut._
import org.joda.time.DateTime
import OrgApacheSlingJcrResourceInternalJcrResourceResolverFactoryImplProperties._

case class OrgApacheSlingJcrResourceInternalJcrResourceResolverFactoryImplProperties (
  resourceResolverSearchpath: Option[ConfigNodePropertyArray],
resourceResolverManglenamespaces: Option[ConfigNodePropertyBoolean],
resourceResolverAllowDirect: Option[ConfigNodePropertyBoolean],
resourceResolverRequiredProviders: Option[ConfigNodePropertyArray],
resourceResolverRequiredProvidernames: Option[ConfigNodePropertyArray],
resourceResolverVirtual: Option[ConfigNodePropertyArray],
resourceResolverMapping: Option[ConfigNodePropertyArray],
resourceResolverMapLocation: Option[ConfigNodePropertyString],
resourceResolverMapObservation: Option[ConfigNodePropertyArray],
resourceResolverDefaultVanityRedirectStatus: Option[ConfigNodePropertyInteger],
resourceResolverEnableVanitypath: Option[ConfigNodePropertyBoolean],
resourceResolverVanitypathMaxEntries: Option[ConfigNodePropertyInteger],
resourceResolverVanitypathMaxEntriesStartup: Option[ConfigNodePropertyBoolean],
resourceResolverVanitypathBloomfilterMaxBytes: Option[ConfigNodePropertyInteger],
resourceResolverOptimizeAliasResolution: Option[ConfigNodePropertyBoolean],
resourceResolverVanitypathWhitelist: Option[ConfigNodePropertyArray],
resourceResolverVanitypathBlacklist: Option[ConfigNodePropertyArray],
resourceResolverVanityPrecedence: Option[ConfigNodePropertyBoolean],
resourceResolverProviderhandlingParanoid: Option[ConfigNodePropertyBoolean],
resourceResolverLogClosing: Option[ConfigNodePropertyBoolean],
resourceResolverLogUnclosed: Option[ConfigNodePropertyBoolean])

object OrgApacheSlingJcrResourceInternalJcrResourceResolverFactoryImplProperties {
  import DateTimeCodecs._

  implicit val OrgApacheSlingJcrResourceInternalJcrResourceResolverFactoryImplPropertiesCodecJson: CodecJson[OrgApacheSlingJcrResourceInternalJcrResourceResolverFactoryImplProperties] = CodecJson.derive[OrgApacheSlingJcrResourceInternalJcrResourceResolverFactoryImplProperties]
  implicit val OrgApacheSlingJcrResourceInternalJcrResourceResolverFactoryImplPropertiesDecoder: EntityDecoder[OrgApacheSlingJcrResourceInternalJcrResourceResolverFactoryImplProperties] = jsonOf[OrgApacheSlingJcrResourceInternalJcrResourceResolverFactoryImplProperties]
  implicit val OrgApacheSlingJcrResourceInternalJcrResourceResolverFactoryImplPropertiesEncoder: EntityEncoder[OrgApacheSlingJcrResourceInternalJcrResourceResolverFactoryImplProperties] = jsonEncoderOf[OrgApacheSlingJcrResourceInternalJcrResourceResolverFactoryImplProperties]
}
