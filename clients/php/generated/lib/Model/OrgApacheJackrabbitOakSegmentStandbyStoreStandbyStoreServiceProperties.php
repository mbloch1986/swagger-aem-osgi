<?php
/**
 * OrgApacheJackrabbitOakSegmentStandbyStoreStandbyStoreServiceProperties
 *
 * PHP version 5
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Adobe Experience Manager OSGI config (AEM) API
 *
 * Swagger AEM OSGI is an OpenAPI specification for Adobe Experience Manager (AEM) OSGI Configurations API
 *
 * OpenAPI spec version: 1.0.0-pre.0
 * Contact: opensource@shinesolutions.com
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 3.2.1-SNAPSHOT
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace OpenAPI\Client\Model;

use \ArrayAccess;
use \OpenAPI\Client\ObjectSerializer;

/**
 * OrgApacheJackrabbitOakSegmentStandbyStoreStandbyStoreServiceProperties Class Doc Comment
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */
class OrgApacheJackrabbitOakSegmentStandbyStoreStandbyStoreServiceProperties implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'orgApacheJackrabbitOakSegmentStandbyStoreStandbyStoreServiceProperties';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'org_apache_sling_installer_configuration_persist' => '\OpenAPI\Client\Model\ConfigNodePropertyBoolean',
        'mode' => '\OpenAPI\Client\Model\ConfigNodePropertyDropDown',
        'port' => '\OpenAPI\Client\Model\ConfigNodePropertyInteger',
        'primary_host' => '\OpenAPI\Client\Model\ConfigNodePropertyString',
        'interval' => '\OpenAPI\Client\Model\ConfigNodePropertyInteger',
        'primary_allowed_client_ip_ranges' => '\OpenAPI\Client\Model\ConfigNodePropertyArray',
        'secure' => '\OpenAPI\Client\Model\ConfigNodePropertyBoolean',
        'standby_readtimeout' => '\OpenAPI\Client\Model\ConfigNodePropertyInteger',
        'standby_autoclean' => '\OpenAPI\Client\Model\ConfigNodePropertyBoolean'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPIFormats = [
        'org_apache_sling_installer_configuration_persist' => null,
        'mode' => null,
        'port' => null,
        'primary_host' => null,
        'interval' => null,
        'primary_allowed_client_ip_ranges' => null,
        'secure' => null,
        'standby_readtimeout' => null,
        'standby_autoclean' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'org_apache_sling_installer_configuration_persist' => 'org.apache.sling.installer.configuration.persist',
        'mode' => 'mode',
        'port' => 'port',
        'primary_host' => 'primary.host',
        'interval' => 'interval',
        'primary_allowed_client_ip_ranges' => 'primary.allowed-client-ip-ranges',
        'secure' => 'secure',
        'standby_readtimeout' => 'standby.readtimeout',
        'standby_autoclean' => 'standby.autoclean'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'org_apache_sling_installer_configuration_persist' => 'setOrgApacheSlingInstallerConfigurationPersist',
        'mode' => 'setMode',
        'port' => 'setPort',
        'primary_host' => 'setPrimaryHost',
        'interval' => 'setInterval',
        'primary_allowed_client_ip_ranges' => 'setPrimaryAllowedClientIpRanges',
        'secure' => 'setSecure',
        'standby_readtimeout' => 'setStandbyReadtimeout',
        'standby_autoclean' => 'setStandbyAutoclean'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'org_apache_sling_installer_configuration_persist' => 'getOrgApacheSlingInstallerConfigurationPersist',
        'mode' => 'getMode',
        'port' => 'getPort',
        'primary_host' => 'getPrimaryHost',
        'interval' => 'getInterval',
        'primary_allowed_client_ip_ranges' => 'getPrimaryAllowedClientIpRanges',
        'secure' => 'getSecure',
        'standby_readtimeout' => 'getStandbyReadtimeout',
        'standby_autoclean' => 'getStandbyAutoclean'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }

    

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['org_apache_sling_installer_configuration_persist'] = isset($data['org_apache_sling_installer_configuration_persist']) ? $data['org_apache_sling_installer_configuration_persist'] : null;
        $this->container['mode'] = isset($data['mode']) ? $data['mode'] : null;
        $this->container['port'] = isset($data['port']) ? $data['port'] : null;
        $this->container['primary_host'] = isset($data['primary_host']) ? $data['primary_host'] : null;
        $this->container['interval'] = isset($data['interval']) ? $data['interval'] : null;
        $this->container['primary_allowed_client_ip_ranges'] = isset($data['primary_allowed_client_ip_ranges']) ? $data['primary_allowed_client_ip_ranges'] : null;
        $this->container['secure'] = isset($data['secure']) ? $data['secure'] : null;
        $this->container['standby_readtimeout'] = isset($data['standby_readtimeout']) ? $data['standby_readtimeout'] : null;
        $this->container['standby_autoclean'] = isset($data['standby_autoclean']) ? $data['standby_autoclean'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets org_apache_sling_installer_configuration_persist
     *
     * @return \OpenAPI\Client\Model\ConfigNodePropertyBoolean|null
     */
    public function getOrgApacheSlingInstallerConfigurationPersist()
    {
        return $this->container['org_apache_sling_installer_configuration_persist'];
    }

    /**
     * Sets org_apache_sling_installer_configuration_persist
     *
     * @param \OpenAPI\Client\Model\ConfigNodePropertyBoolean|null $org_apache_sling_installer_configuration_persist org_apache_sling_installer_configuration_persist
     *
     * @return $this
     */
    public function setOrgApacheSlingInstallerConfigurationPersist($org_apache_sling_installer_configuration_persist)
    {
        $this->container['org_apache_sling_installer_configuration_persist'] = $org_apache_sling_installer_configuration_persist;

        return $this;
    }

    /**
     * Gets mode
     *
     * @return \OpenAPI\Client\Model\ConfigNodePropertyDropDown|null
     */
    public function getMode()
    {
        return $this->container['mode'];
    }

    /**
     * Sets mode
     *
     * @param \OpenAPI\Client\Model\ConfigNodePropertyDropDown|null $mode mode
     *
     * @return $this
     */
    public function setMode($mode)
    {
        $this->container['mode'] = $mode;

        return $this;
    }

    /**
     * Gets port
     *
     * @return \OpenAPI\Client\Model\ConfigNodePropertyInteger|null
     */
    public function getPort()
    {
        return $this->container['port'];
    }

    /**
     * Sets port
     *
     * @param \OpenAPI\Client\Model\ConfigNodePropertyInteger|null $port port
     *
     * @return $this
     */
    public function setPort($port)
    {
        $this->container['port'] = $port;

        return $this;
    }

    /**
     * Gets primary_host
     *
     * @return \OpenAPI\Client\Model\ConfigNodePropertyString|null
     */
    public function getPrimaryHost()
    {
        return $this->container['primary_host'];
    }

    /**
     * Sets primary_host
     *
     * @param \OpenAPI\Client\Model\ConfigNodePropertyString|null $primary_host primary_host
     *
     * @return $this
     */
    public function setPrimaryHost($primary_host)
    {
        $this->container['primary_host'] = $primary_host;

        return $this;
    }

    /**
     * Gets interval
     *
     * @return \OpenAPI\Client\Model\ConfigNodePropertyInteger|null
     */
    public function getInterval()
    {
        return $this->container['interval'];
    }

    /**
     * Sets interval
     *
     * @param \OpenAPI\Client\Model\ConfigNodePropertyInteger|null $interval interval
     *
     * @return $this
     */
    public function setInterval($interval)
    {
        $this->container['interval'] = $interval;

        return $this;
    }

    /**
     * Gets primary_allowed_client_ip_ranges
     *
     * @return \OpenAPI\Client\Model\ConfigNodePropertyArray|null
     */
    public function getPrimaryAllowedClientIpRanges()
    {
        return $this->container['primary_allowed_client_ip_ranges'];
    }

    /**
     * Sets primary_allowed_client_ip_ranges
     *
     * @param \OpenAPI\Client\Model\ConfigNodePropertyArray|null $primary_allowed_client_ip_ranges primary_allowed_client_ip_ranges
     *
     * @return $this
     */
    public function setPrimaryAllowedClientIpRanges($primary_allowed_client_ip_ranges)
    {
        $this->container['primary_allowed_client_ip_ranges'] = $primary_allowed_client_ip_ranges;

        return $this;
    }

    /**
     * Gets secure
     *
     * @return \OpenAPI\Client\Model\ConfigNodePropertyBoolean|null
     */
    public function getSecure()
    {
        return $this->container['secure'];
    }

    /**
     * Sets secure
     *
     * @param \OpenAPI\Client\Model\ConfigNodePropertyBoolean|null $secure secure
     *
     * @return $this
     */
    public function setSecure($secure)
    {
        $this->container['secure'] = $secure;

        return $this;
    }

    /**
     * Gets standby_readtimeout
     *
     * @return \OpenAPI\Client\Model\ConfigNodePropertyInteger|null
     */
    public function getStandbyReadtimeout()
    {
        return $this->container['standby_readtimeout'];
    }

    /**
     * Sets standby_readtimeout
     *
     * @param \OpenAPI\Client\Model\ConfigNodePropertyInteger|null $standby_readtimeout standby_readtimeout
     *
     * @return $this
     */
    public function setStandbyReadtimeout($standby_readtimeout)
    {
        $this->container['standby_readtimeout'] = $standby_readtimeout;

        return $this;
    }

    /**
     * Gets standby_autoclean
     *
     * @return \OpenAPI\Client\Model\ConfigNodePropertyBoolean|null
     */
    public function getStandbyAutoclean()
    {
        return $this->container['standby_autoclean'];
    }

    /**
     * Sets standby_autoclean
     *
     * @param \OpenAPI\Client\Model\ConfigNodePropertyBoolean|null $standby_autoclean standby_autoclean
     *
     * @return $this
     */
    public function setStandbyAutoclean($standby_autoclean)
    {
        $this->container['standby_autoclean'] = $standby_autoclean;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }
}


