/*
 * Adobe Experience Manager OSGI config (AEM) API
 *
 * Swagger AEM OSGI is an OpenAPI specification for Adobe Experience Manager (AEM) OSGI Configurations API
 *
 * OpenAPI spec version: 1.0.0-pre.0
 * Contact: opensource@shinesolutions.com
 * Generated by: https://openapi-generator.tech
 */

using System;
using System.Linq;
using System.Text;
using System.Collections.Generic;
using System.ComponentModel.DataAnnotations;
using System.Runtime.Serialization;
using Newtonsoft.Json;

namespace Org.OpenAPITools.Models
{ 
    /// <summary>
    /// 
    /// </summary>
    [DataContract]
    public partial class OrgApacheJackrabbitOakSecurityUserUserConfigurationImplProperties : IEquatable<OrgApacheJackrabbitOakSecurityUserUserConfigurationImplProperties>
    { 
        /// <summary>
        /// Gets or Sets UsersPath
        /// </summary>
        [DataMember(Name="usersPath")]
        public ConfigNodePropertyString UsersPath { get; set; }

        /// <summary>
        /// Gets or Sets GroupsPath
        /// </summary>
        [DataMember(Name="groupsPath")]
        public ConfigNodePropertyString GroupsPath { get; set; }

        /// <summary>
        /// Gets or Sets SystemRelativePath
        /// </summary>
        [DataMember(Name="systemRelativePath")]
        public ConfigNodePropertyString SystemRelativePath { get; set; }

        /// <summary>
        /// Gets or Sets DefaultDepth
        /// </summary>
        [DataMember(Name="defaultDepth")]
        public ConfigNodePropertyInteger DefaultDepth { get; set; }

        /// <summary>
        /// Gets or Sets ImportBehavior
        /// </summary>
        [DataMember(Name="importBehavior")]
        public ConfigNodePropertyDropDown ImportBehavior { get; set; }

        /// <summary>
        /// Gets or Sets PasswordHashAlgorithm
        /// </summary>
        [DataMember(Name="passwordHashAlgorithm")]
        public ConfigNodePropertyString PasswordHashAlgorithm { get; set; }

        /// <summary>
        /// Gets or Sets PasswordHashIterations
        /// </summary>
        [DataMember(Name="passwordHashIterations")]
        public ConfigNodePropertyInteger PasswordHashIterations { get; set; }

        /// <summary>
        /// Gets or Sets PasswordSaltSize
        /// </summary>
        [DataMember(Name="passwordSaltSize")]
        public ConfigNodePropertyInteger PasswordSaltSize { get; set; }

        /// <summary>
        /// Gets or Sets OmitAdminPw
        /// </summary>
        [DataMember(Name="omitAdminPw")]
        public ConfigNodePropertyBoolean OmitAdminPw { get; set; }

        /// <summary>
        /// Gets or Sets SupportAutoSave
        /// </summary>
        [DataMember(Name="supportAutoSave")]
        public ConfigNodePropertyBoolean SupportAutoSave { get; set; }

        /// <summary>
        /// Gets or Sets PasswordMaxAge
        /// </summary>
        [DataMember(Name="passwordMaxAge")]
        public ConfigNodePropertyInteger PasswordMaxAge { get; set; }

        /// <summary>
        /// Gets or Sets InitialPasswordChange
        /// </summary>
        [DataMember(Name="initialPasswordChange")]
        public ConfigNodePropertyBoolean InitialPasswordChange { get; set; }

        /// <summary>
        /// Gets or Sets PasswordHistorySize
        /// </summary>
        [DataMember(Name="passwordHistorySize")]
        public ConfigNodePropertyInteger PasswordHistorySize { get; set; }

        /// <summary>
        /// Gets or Sets PasswordExpiryForAdmin
        /// </summary>
        [DataMember(Name="passwordExpiryForAdmin")]
        public ConfigNodePropertyBoolean PasswordExpiryForAdmin { get; set; }

        /// <summary>
        /// Gets or Sets CacheExpiration
        /// </summary>
        [DataMember(Name="cacheExpiration")]
        public ConfigNodePropertyInteger CacheExpiration { get; set; }

        /// <summary>
        /// Gets or Sets EnableRFC7613UsercaseMappedProfile
        /// </summary>
        [DataMember(Name="enableRFC7613UsercaseMappedProfile")]
        public ConfigNodePropertyBoolean EnableRFC7613UsercaseMappedProfile { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class OrgApacheJackrabbitOakSecurityUserUserConfigurationImplProperties {\n");
            sb.Append("  UsersPath: ").Append(UsersPath).Append("\n");
            sb.Append("  GroupsPath: ").Append(GroupsPath).Append("\n");
            sb.Append("  SystemRelativePath: ").Append(SystemRelativePath).Append("\n");
            sb.Append("  DefaultDepth: ").Append(DefaultDepth).Append("\n");
            sb.Append("  ImportBehavior: ").Append(ImportBehavior).Append("\n");
            sb.Append("  PasswordHashAlgorithm: ").Append(PasswordHashAlgorithm).Append("\n");
            sb.Append("  PasswordHashIterations: ").Append(PasswordHashIterations).Append("\n");
            sb.Append("  PasswordSaltSize: ").Append(PasswordSaltSize).Append("\n");
            sb.Append("  OmitAdminPw: ").Append(OmitAdminPw).Append("\n");
            sb.Append("  SupportAutoSave: ").Append(SupportAutoSave).Append("\n");
            sb.Append("  PasswordMaxAge: ").Append(PasswordMaxAge).Append("\n");
            sb.Append("  InitialPasswordChange: ").Append(InitialPasswordChange).Append("\n");
            sb.Append("  PasswordHistorySize: ").Append(PasswordHistorySize).Append("\n");
            sb.Append("  PasswordExpiryForAdmin: ").Append(PasswordExpiryForAdmin).Append("\n");
            sb.Append("  CacheExpiration: ").Append(CacheExpiration).Append("\n");
            sb.Append("  EnableRFC7613UsercaseMappedProfile: ").Append(EnableRFC7613UsercaseMappedProfile).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            if (obj is null) return false;
            if (ReferenceEquals(this, obj)) return true;
            return obj.GetType() == GetType() && Equals((OrgApacheJackrabbitOakSecurityUserUserConfigurationImplProperties)obj);
        }

        /// <summary>
        /// Returns true if OrgApacheJackrabbitOakSecurityUserUserConfigurationImplProperties instances are equal
        /// </summary>
        /// <param name="other">Instance of OrgApacheJackrabbitOakSecurityUserUserConfigurationImplProperties to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(OrgApacheJackrabbitOakSecurityUserUserConfigurationImplProperties other)
        {
            if (other is null) return false;
            if (ReferenceEquals(this, other)) return true;

            return 
                (
                    UsersPath == other.UsersPath ||
                    UsersPath != null &&
                    UsersPath.Equals(other.UsersPath)
                ) && 
                (
                    GroupsPath == other.GroupsPath ||
                    GroupsPath != null &&
                    GroupsPath.Equals(other.GroupsPath)
                ) && 
                (
                    SystemRelativePath == other.SystemRelativePath ||
                    SystemRelativePath != null &&
                    SystemRelativePath.Equals(other.SystemRelativePath)
                ) && 
                (
                    DefaultDepth == other.DefaultDepth ||
                    DefaultDepth != null &&
                    DefaultDepth.Equals(other.DefaultDepth)
                ) && 
                (
                    ImportBehavior == other.ImportBehavior ||
                    ImportBehavior != null &&
                    ImportBehavior.Equals(other.ImportBehavior)
                ) && 
                (
                    PasswordHashAlgorithm == other.PasswordHashAlgorithm ||
                    PasswordHashAlgorithm != null &&
                    PasswordHashAlgorithm.Equals(other.PasswordHashAlgorithm)
                ) && 
                (
                    PasswordHashIterations == other.PasswordHashIterations ||
                    PasswordHashIterations != null &&
                    PasswordHashIterations.Equals(other.PasswordHashIterations)
                ) && 
                (
                    PasswordSaltSize == other.PasswordSaltSize ||
                    PasswordSaltSize != null &&
                    PasswordSaltSize.Equals(other.PasswordSaltSize)
                ) && 
                (
                    OmitAdminPw == other.OmitAdminPw ||
                    OmitAdminPw != null &&
                    OmitAdminPw.Equals(other.OmitAdminPw)
                ) && 
                (
                    SupportAutoSave == other.SupportAutoSave ||
                    SupportAutoSave != null &&
                    SupportAutoSave.Equals(other.SupportAutoSave)
                ) && 
                (
                    PasswordMaxAge == other.PasswordMaxAge ||
                    PasswordMaxAge != null &&
                    PasswordMaxAge.Equals(other.PasswordMaxAge)
                ) && 
                (
                    InitialPasswordChange == other.InitialPasswordChange ||
                    InitialPasswordChange != null &&
                    InitialPasswordChange.Equals(other.InitialPasswordChange)
                ) && 
                (
                    PasswordHistorySize == other.PasswordHistorySize ||
                    PasswordHistorySize != null &&
                    PasswordHistorySize.Equals(other.PasswordHistorySize)
                ) && 
                (
                    PasswordExpiryForAdmin == other.PasswordExpiryForAdmin ||
                    PasswordExpiryForAdmin != null &&
                    PasswordExpiryForAdmin.Equals(other.PasswordExpiryForAdmin)
                ) && 
                (
                    CacheExpiration == other.CacheExpiration ||
                    CacheExpiration != null &&
                    CacheExpiration.Equals(other.CacheExpiration)
                ) && 
                (
                    EnableRFC7613UsercaseMappedProfile == other.EnableRFC7613UsercaseMappedProfile ||
                    EnableRFC7613UsercaseMappedProfile != null &&
                    EnableRFC7613UsercaseMappedProfile.Equals(other.EnableRFC7613UsercaseMappedProfile)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                var hashCode = 41;
                // Suitable nullity checks etc, of course :)
                    if (UsersPath != null)
                    hashCode = hashCode * 59 + UsersPath.GetHashCode();
                    if (GroupsPath != null)
                    hashCode = hashCode * 59 + GroupsPath.GetHashCode();
                    if (SystemRelativePath != null)
                    hashCode = hashCode * 59 + SystemRelativePath.GetHashCode();
                    if (DefaultDepth != null)
                    hashCode = hashCode * 59 + DefaultDepth.GetHashCode();
                    if (ImportBehavior != null)
                    hashCode = hashCode * 59 + ImportBehavior.GetHashCode();
                    if (PasswordHashAlgorithm != null)
                    hashCode = hashCode * 59 + PasswordHashAlgorithm.GetHashCode();
                    if (PasswordHashIterations != null)
                    hashCode = hashCode * 59 + PasswordHashIterations.GetHashCode();
                    if (PasswordSaltSize != null)
                    hashCode = hashCode * 59 + PasswordSaltSize.GetHashCode();
                    if (OmitAdminPw != null)
                    hashCode = hashCode * 59 + OmitAdminPw.GetHashCode();
                    if (SupportAutoSave != null)
                    hashCode = hashCode * 59 + SupportAutoSave.GetHashCode();
                    if (PasswordMaxAge != null)
                    hashCode = hashCode * 59 + PasswordMaxAge.GetHashCode();
                    if (InitialPasswordChange != null)
                    hashCode = hashCode * 59 + InitialPasswordChange.GetHashCode();
                    if (PasswordHistorySize != null)
                    hashCode = hashCode * 59 + PasswordHistorySize.GetHashCode();
                    if (PasswordExpiryForAdmin != null)
                    hashCode = hashCode * 59 + PasswordExpiryForAdmin.GetHashCode();
                    if (CacheExpiration != null)
                    hashCode = hashCode * 59 + CacheExpiration.GetHashCode();
                    if (EnableRFC7613UsercaseMappedProfile != null)
                    hashCode = hashCode * 59 + EnableRFC7613UsercaseMappedProfile.GetHashCode();
                return hashCode;
            }
        }

        #region Operators
        #pragma warning disable 1591

        public static bool operator ==(OrgApacheJackrabbitOakSecurityUserUserConfigurationImplProperties left, OrgApacheJackrabbitOakSecurityUserUserConfigurationImplProperties right)
        {
            return Equals(left, right);
        }

        public static bool operator !=(OrgApacheJackrabbitOakSecurityUserUserConfigurationImplProperties left, OrgApacheJackrabbitOakSecurityUserUserConfigurationImplProperties right)
        {
            return !Equals(left, right);
        }

        #pragma warning restore 1591
        #endregion Operators
    }
}
