/**
 * Adobe Experience Manager OSGI config (AEM) API
 * Swagger AEM OSGI is an OpenAPI specification for Adobe Experience Manager (AEM) OSGI Configurations API
 *
 * OpenAPI spec version: 1.0.0-pre.0
 * Contact: opensource@shinesolutions.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


#include "OAIComAdobeCqDtmReactorImplServiceWebServiceImplProperties.h"

#include "OAIHelpers.h"

#include <QJsonDocument>
#include <QJsonArray>
#include <QObject>
#include <QDebug>

namespace OpenAPI {

OAIComAdobeCqDtmReactorImplServiceWebServiceImplProperties::OAIComAdobeCqDtmReactorImplServiceWebServiceImplProperties(QString json) {
    this->fromJson(json);
}

OAIComAdobeCqDtmReactorImplServiceWebServiceImplProperties::OAIComAdobeCqDtmReactorImplServiceWebServiceImplProperties() {
    this->init();
}

OAIComAdobeCqDtmReactorImplServiceWebServiceImplProperties::~OAIComAdobeCqDtmReactorImplServiceWebServiceImplProperties() {
    
}

void
OAIComAdobeCqDtmReactorImplServiceWebServiceImplProperties::init() {
    m_endpoint_uri_isSet = false;
    m_connection_timeout_isSet = false;
    m_socket_timeout_isSet = false;
}

void
OAIComAdobeCqDtmReactorImplServiceWebServiceImplProperties::fromJson(QString jsonString) {
    QByteArray array (jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void
OAIComAdobeCqDtmReactorImplServiceWebServiceImplProperties::fromJsonObject(QJsonObject json) {
    ::OpenAPI::fromJsonValue(endpoint_uri, json[QString("endpointUri")]);
    
    ::OpenAPI::fromJsonValue(connection_timeout, json[QString("connectionTimeout")]);
    
    ::OpenAPI::fromJsonValue(socket_timeout, json[QString("socketTimeout")]);
    
}

QString
OAIComAdobeCqDtmReactorImplServiceWebServiceImplProperties::asJson () const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject
OAIComAdobeCqDtmReactorImplServiceWebServiceImplProperties::asJsonObject() const {
    QJsonObject obj;
	if(endpoint_uri.isSet()){
        obj.insert(QString("endpointUri"), ::OpenAPI::toJsonValue(endpoint_uri));
    }
	if(connection_timeout.isSet()){
        obj.insert(QString("connectionTimeout"), ::OpenAPI::toJsonValue(connection_timeout));
    }
	if(socket_timeout.isSet()){
        obj.insert(QString("socketTimeout"), ::OpenAPI::toJsonValue(socket_timeout));
    }
    return obj;
}

OAIConfigNodePropertyString
OAIComAdobeCqDtmReactorImplServiceWebServiceImplProperties::getEndpointUri() const {
    return endpoint_uri;
}
void
OAIComAdobeCqDtmReactorImplServiceWebServiceImplProperties::setEndpointUri(const OAIConfigNodePropertyString &endpoint_uri) {
    this->endpoint_uri = endpoint_uri;
    this->m_endpoint_uri_isSet = true;
}

OAIConfigNodePropertyInteger
OAIComAdobeCqDtmReactorImplServiceWebServiceImplProperties::getConnectionTimeout() const {
    return connection_timeout;
}
void
OAIComAdobeCqDtmReactorImplServiceWebServiceImplProperties::setConnectionTimeout(const OAIConfigNodePropertyInteger &connection_timeout) {
    this->connection_timeout = connection_timeout;
    this->m_connection_timeout_isSet = true;
}

OAIConfigNodePropertyInteger
OAIComAdobeCqDtmReactorImplServiceWebServiceImplProperties::getSocketTimeout() const {
    return socket_timeout;
}
void
OAIComAdobeCqDtmReactorImplServiceWebServiceImplProperties::setSocketTimeout(const OAIConfigNodePropertyInteger &socket_timeout) {
    this->socket_timeout = socket_timeout;
    this->m_socket_timeout_isSet = true;
}


bool
OAIComAdobeCqDtmReactorImplServiceWebServiceImplProperties::isSet() const {
    bool isObjectUpdated = false;
    do{ 
        if(endpoint_uri.isSet()){ isObjectUpdated = true; break;}
    
        if(connection_timeout.isSet()){ isObjectUpdated = true; break;}
    
        if(socket_timeout.isSet()){ isObjectUpdated = true; break;}
    }while(false);
    return isObjectUpdated;
}

}

