/**
 * Adobe Experience Manager OSGI config (AEM) API
 * Swagger AEM OSGI is an OpenAPI specification for Adobe Experience Manager (AEM) OSGI Configurations API
 *
 * OpenAPI spec version: 1.0.0-pre.0
 * Contact: opensource@shinesolutions.com
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 3.2.1-SNAPSHOT.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */



#include "OrgApacheSlingJcrResourceInternalJcrResourceResolverFactoryImplProperties.h"

#include <string>
#include <sstream>
#include <boost/property_tree/ptree.hpp>
#include <boost/property_tree/json_parser.hpp>

using boost::property_tree::ptree;
using boost::property_tree::read_json;
using boost::property_tree::write_json;

namespace org {
namespace openapitools {
namespace server {
namespace model {

OrgApacheSlingJcrResourceInternalJcrResourceResolverFactoryImplProperties::OrgApacheSlingJcrResourceInternalJcrResourceResolverFactoryImplProperties()
{
    
}

OrgApacheSlingJcrResourceInternalJcrResourceResolverFactoryImplProperties::~OrgApacheSlingJcrResourceInternalJcrResourceResolverFactoryImplProperties()
{
}

std::string OrgApacheSlingJcrResourceInternalJcrResourceResolverFactoryImplProperties::toJsonString()
{
	std::stringstream ss;
	ptree pt;
	write_json(ss, pt, false);
	return ss.str();
}

void OrgApacheSlingJcrResourceInternalJcrResourceResolverFactoryImplProperties::fromJsonString(std::string const& jsonString)
{
	std::stringstream ss(jsonString);
	ptree pt;
	read_json(ss,pt);
}

std::shared_ptr<ConfigNodePropertyArray> OrgApacheSlingJcrResourceInternalJcrResourceResolverFactoryImplProperties::getResourceResolverSearchpath() const
{
    return m_Resource_resolver_searchpath;
}
void OrgApacheSlingJcrResourceInternalJcrResourceResolverFactoryImplProperties::setResourceResolverSearchpath(std::shared_ptr<ConfigNodePropertyArray> value)
{
    m_Resource_resolver_searchpath = value;
}
std::shared_ptr<ConfigNodePropertyBoolean> OrgApacheSlingJcrResourceInternalJcrResourceResolverFactoryImplProperties::getResourceResolverManglenamespaces() const
{
    return m_Resource_resolver_manglenamespaces;
}
void OrgApacheSlingJcrResourceInternalJcrResourceResolverFactoryImplProperties::setResourceResolverManglenamespaces(std::shared_ptr<ConfigNodePropertyBoolean> value)
{
    m_Resource_resolver_manglenamespaces = value;
}
std::shared_ptr<ConfigNodePropertyBoolean> OrgApacheSlingJcrResourceInternalJcrResourceResolverFactoryImplProperties::getResourceResolverAllowDirect() const
{
    return m_Resource_resolver_allowDirect;
}
void OrgApacheSlingJcrResourceInternalJcrResourceResolverFactoryImplProperties::setResourceResolverAllowDirect(std::shared_ptr<ConfigNodePropertyBoolean> value)
{
    m_Resource_resolver_allowDirect = value;
}
std::shared_ptr<ConfigNodePropertyArray> OrgApacheSlingJcrResourceInternalJcrResourceResolverFactoryImplProperties::getResourceResolverRequiredProviders() const
{
    return m_Resource_resolver_required_providers;
}
void OrgApacheSlingJcrResourceInternalJcrResourceResolverFactoryImplProperties::setResourceResolverRequiredProviders(std::shared_ptr<ConfigNodePropertyArray> value)
{
    m_Resource_resolver_required_providers = value;
}
std::shared_ptr<ConfigNodePropertyArray> OrgApacheSlingJcrResourceInternalJcrResourceResolverFactoryImplProperties::getResourceResolverRequiredProvidernames() const
{
    return m_Resource_resolver_required_providernames;
}
void OrgApacheSlingJcrResourceInternalJcrResourceResolverFactoryImplProperties::setResourceResolverRequiredProvidernames(std::shared_ptr<ConfigNodePropertyArray> value)
{
    m_Resource_resolver_required_providernames = value;
}
std::shared_ptr<ConfigNodePropertyArray> OrgApacheSlingJcrResourceInternalJcrResourceResolverFactoryImplProperties::getResourceResolverVirtual() const
{
    return m_Resource_resolver_virtual;
}
void OrgApacheSlingJcrResourceInternalJcrResourceResolverFactoryImplProperties::setResourceResolverVirtual(std::shared_ptr<ConfigNodePropertyArray> value)
{
    m_Resource_resolver_virtual = value;
}
std::shared_ptr<ConfigNodePropertyArray> OrgApacheSlingJcrResourceInternalJcrResourceResolverFactoryImplProperties::getResourceResolverMapping() const
{
    return m_Resource_resolver_mapping;
}
void OrgApacheSlingJcrResourceInternalJcrResourceResolverFactoryImplProperties::setResourceResolverMapping(std::shared_ptr<ConfigNodePropertyArray> value)
{
    m_Resource_resolver_mapping = value;
}
std::shared_ptr<ConfigNodePropertyString> OrgApacheSlingJcrResourceInternalJcrResourceResolverFactoryImplProperties::getResourceResolverMapLocation() const
{
    return m_Resource_resolver_map_location;
}
void OrgApacheSlingJcrResourceInternalJcrResourceResolverFactoryImplProperties::setResourceResolverMapLocation(std::shared_ptr<ConfigNodePropertyString> value)
{
    m_Resource_resolver_map_location = value;
}
std::shared_ptr<ConfigNodePropertyArray> OrgApacheSlingJcrResourceInternalJcrResourceResolverFactoryImplProperties::getResourceResolverMapObservation() const
{
    return m_Resource_resolver_map_observation;
}
void OrgApacheSlingJcrResourceInternalJcrResourceResolverFactoryImplProperties::setResourceResolverMapObservation(std::shared_ptr<ConfigNodePropertyArray> value)
{
    m_Resource_resolver_map_observation = value;
}
std::shared_ptr<ConfigNodePropertyInteger> OrgApacheSlingJcrResourceInternalJcrResourceResolverFactoryImplProperties::getResourceResolverDefaultVanityRedirectStatus() const
{
    return m_Resource_resolver_default_vanity_redirect_status;
}
void OrgApacheSlingJcrResourceInternalJcrResourceResolverFactoryImplProperties::setResourceResolverDefaultVanityRedirectStatus(std::shared_ptr<ConfigNodePropertyInteger> value)
{
    m_Resource_resolver_default_vanity_redirect_status = value;
}
std::shared_ptr<ConfigNodePropertyBoolean> OrgApacheSlingJcrResourceInternalJcrResourceResolverFactoryImplProperties::getResourceResolverEnableVanitypath() const
{
    return m_Resource_resolver_enable_vanitypath;
}
void OrgApacheSlingJcrResourceInternalJcrResourceResolverFactoryImplProperties::setResourceResolverEnableVanitypath(std::shared_ptr<ConfigNodePropertyBoolean> value)
{
    m_Resource_resolver_enable_vanitypath = value;
}
std::shared_ptr<ConfigNodePropertyInteger> OrgApacheSlingJcrResourceInternalJcrResourceResolverFactoryImplProperties::getResourceResolverVanitypathMaxEntries() const
{
    return m_Resource_resolver_vanitypath_maxEntries;
}
void OrgApacheSlingJcrResourceInternalJcrResourceResolverFactoryImplProperties::setResourceResolverVanitypathMaxEntries(std::shared_ptr<ConfigNodePropertyInteger> value)
{
    m_Resource_resolver_vanitypath_maxEntries = value;
}
std::shared_ptr<ConfigNodePropertyBoolean> OrgApacheSlingJcrResourceInternalJcrResourceResolverFactoryImplProperties::getResourceResolverVanitypathMaxEntriesStartup() const
{
    return m_Resource_resolver_vanitypath_maxEntries_startup;
}
void OrgApacheSlingJcrResourceInternalJcrResourceResolverFactoryImplProperties::setResourceResolverVanitypathMaxEntriesStartup(std::shared_ptr<ConfigNodePropertyBoolean> value)
{
    m_Resource_resolver_vanitypath_maxEntries_startup = value;
}
std::shared_ptr<ConfigNodePropertyInteger> OrgApacheSlingJcrResourceInternalJcrResourceResolverFactoryImplProperties::getResourceResolverVanitypathBloomfilterMaxBytes() const
{
    return m_Resource_resolver_vanitypath_bloomfilter_maxBytes;
}
void OrgApacheSlingJcrResourceInternalJcrResourceResolverFactoryImplProperties::setResourceResolverVanitypathBloomfilterMaxBytes(std::shared_ptr<ConfigNodePropertyInteger> value)
{
    m_Resource_resolver_vanitypath_bloomfilter_maxBytes = value;
}
std::shared_ptr<ConfigNodePropertyBoolean> OrgApacheSlingJcrResourceInternalJcrResourceResolverFactoryImplProperties::getResourceResolverOptimizeAliasResolution() const
{
    return m_Resource_resolver_optimize_alias_resolution;
}
void OrgApacheSlingJcrResourceInternalJcrResourceResolverFactoryImplProperties::setResourceResolverOptimizeAliasResolution(std::shared_ptr<ConfigNodePropertyBoolean> value)
{
    m_Resource_resolver_optimize_alias_resolution = value;
}
std::shared_ptr<ConfigNodePropertyArray> OrgApacheSlingJcrResourceInternalJcrResourceResolverFactoryImplProperties::getResourceResolverVanitypathWhitelist() const
{
    return m_Resource_resolver_vanitypath_whitelist;
}
void OrgApacheSlingJcrResourceInternalJcrResourceResolverFactoryImplProperties::setResourceResolverVanitypathWhitelist(std::shared_ptr<ConfigNodePropertyArray> value)
{
    m_Resource_resolver_vanitypath_whitelist = value;
}
std::shared_ptr<ConfigNodePropertyArray> OrgApacheSlingJcrResourceInternalJcrResourceResolverFactoryImplProperties::getResourceResolverVanitypathBlacklist() const
{
    return m_Resource_resolver_vanitypath_blacklist;
}
void OrgApacheSlingJcrResourceInternalJcrResourceResolverFactoryImplProperties::setResourceResolverVanitypathBlacklist(std::shared_ptr<ConfigNodePropertyArray> value)
{
    m_Resource_resolver_vanitypath_blacklist = value;
}
std::shared_ptr<ConfigNodePropertyBoolean> OrgApacheSlingJcrResourceInternalJcrResourceResolverFactoryImplProperties::getResourceResolverVanityPrecedence() const
{
    return m_Resource_resolver_vanity_precedence;
}
void OrgApacheSlingJcrResourceInternalJcrResourceResolverFactoryImplProperties::setResourceResolverVanityPrecedence(std::shared_ptr<ConfigNodePropertyBoolean> value)
{
    m_Resource_resolver_vanity_precedence = value;
}
std::shared_ptr<ConfigNodePropertyBoolean> OrgApacheSlingJcrResourceInternalJcrResourceResolverFactoryImplProperties::getResourceResolverProviderhandlingParanoid() const
{
    return m_Resource_resolver_providerhandling_paranoid;
}
void OrgApacheSlingJcrResourceInternalJcrResourceResolverFactoryImplProperties::setResourceResolverProviderhandlingParanoid(std::shared_ptr<ConfigNodePropertyBoolean> value)
{
    m_Resource_resolver_providerhandling_paranoid = value;
}
std::shared_ptr<ConfigNodePropertyBoolean> OrgApacheSlingJcrResourceInternalJcrResourceResolverFactoryImplProperties::getResourceResolverLogClosing() const
{
    return m_Resource_resolver_log_closing;
}
void OrgApacheSlingJcrResourceInternalJcrResourceResolverFactoryImplProperties::setResourceResolverLogClosing(std::shared_ptr<ConfigNodePropertyBoolean> value)
{
    m_Resource_resolver_log_closing = value;
}
std::shared_ptr<ConfigNodePropertyBoolean> OrgApacheSlingJcrResourceInternalJcrResourceResolverFactoryImplProperties::getResourceResolverLogUnclosed() const
{
    return m_Resource_resolver_log_unclosed;
}
void OrgApacheSlingJcrResourceInternalJcrResourceResolverFactoryImplProperties::setResourceResolverLogUnclosed(std::shared_ptr<ConfigNodePropertyBoolean> value)
{
    m_Resource_resolver_log_unclosed = value;
}

}
}
}
}

