/* 
 * Adobe Experience Manager OSGI config (AEM) API
 *
 * Swagger AEM OSGI is an OpenAPI specification for Adobe Experience Manager (AEM) OSGI Configurations API
 *
 * OpenAPI spec version: 1.0.0-pre.0
 * Contact: opensource@shinesolutions.com
 * Generated by: https://openapi-generator.tech
 */


#[allow(unused_imports)]
use serde_json::Value;

#[derive(Debug, Serialize, Deserialize)]
pub struct OrgApacheSlingDistributionPackagingImplExporterAgentDistributioProperties {
  #[serde(rename = "name")]
  name: Option<::models::ConfigNodePropertyString>,
  #[serde(rename = "queue")]
  queue: Option<::models::ConfigNodePropertyString>,
  #[serde(rename = "drop.invalid.items")]
  drop_invalid_items: Option<::models::ConfigNodePropertyBoolean>,
  #[serde(rename = "agent.target")]
  agent_target: Option<::models::ConfigNodePropertyString>
}

impl OrgApacheSlingDistributionPackagingImplExporterAgentDistributioProperties {
  pub fn new() -> OrgApacheSlingDistributionPackagingImplExporterAgentDistributioProperties {
    OrgApacheSlingDistributionPackagingImplExporterAgentDistributioProperties {
      name: None,
      queue: None,
      drop_invalid_items: None,
      agent_target: None
    }
  }

  pub fn set_name(&mut self, name: ::models::ConfigNodePropertyString) {
    self.name = Some(name);
  }

  pub fn with_name(mut self, name: ::models::ConfigNodePropertyString) -> OrgApacheSlingDistributionPackagingImplExporterAgentDistributioProperties {
    self.name = Some(name);
    self
  }

  pub fn name(&self) -> Option<&::models::ConfigNodePropertyString> {
    self.name.as_ref()
  }

  pub fn reset_name(&mut self) {
    self.name = None;
  }

  pub fn set_queue(&mut self, queue: ::models::ConfigNodePropertyString) {
    self.queue = Some(queue);
  }

  pub fn with_queue(mut self, queue: ::models::ConfigNodePropertyString) -> OrgApacheSlingDistributionPackagingImplExporterAgentDistributioProperties {
    self.queue = Some(queue);
    self
  }

  pub fn queue(&self) -> Option<&::models::ConfigNodePropertyString> {
    self.queue.as_ref()
  }

  pub fn reset_queue(&mut self) {
    self.queue = None;
  }

  pub fn set_drop_invalid_items(&mut self, drop_invalid_items: ::models::ConfigNodePropertyBoolean) {
    self.drop_invalid_items = Some(drop_invalid_items);
  }

  pub fn with_drop_invalid_items(mut self, drop_invalid_items: ::models::ConfigNodePropertyBoolean) -> OrgApacheSlingDistributionPackagingImplExporterAgentDistributioProperties {
    self.drop_invalid_items = Some(drop_invalid_items);
    self
  }

  pub fn drop_invalid_items(&self) -> Option<&::models::ConfigNodePropertyBoolean> {
    self.drop_invalid_items.as_ref()
  }

  pub fn reset_drop_invalid_items(&mut self) {
    self.drop_invalid_items = None;
  }

  pub fn set_agent_target(&mut self, agent_target: ::models::ConfigNodePropertyString) {
    self.agent_target = Some(agent_target);
  }

  pub fn with_agent_target(mut self, agent_target: ::models::ConfigNodePropertyString) -> OrgApacheSlingDistributionPackagingImplExporterAgentDistributioProperties {
    self.agent_target = Some(agent_target);
    self
  }

  pub fn agent_target(&self) -> Option<&::models::ConfigNodePropertyString> {
    self.agent_target.as_ref()
  }

  pub fn reset_agent_target(&mut self) {
    self.agent_target = None;
  }

}



