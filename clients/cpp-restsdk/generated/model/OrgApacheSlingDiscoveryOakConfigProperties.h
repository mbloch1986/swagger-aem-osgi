/**
 * Adobe Experience Manager OSGI config (AEM) API
 * Swagger AEM OSGI is an OpenAPI specification for Adobe Experience Manager (AEM) OSGI Configurations API
 *
 * OpenAPI spec version: 1.0.0-pre.0
 * Contact: opensource@shinesolutions.com
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 3.2.1-SNAPSHOT.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * OrgApacheSlingDiscoveryOakConfigProperties.h
 *
 * 
 */

#ifndef ORG_OPENAPITOOLS_CLIENT_MODEL_OrgApacheSlingDiscoveryOakConfigProperties_H_
#define ORG_OPENAPITOOLS_CLIENT_MODEL_OrgApacheSlingDiscoveryOakConfigProperties_H_


#include "../ModelBase.h"

#include "ConfigNodePropertyBoolean.h"
#include "ConfigNodePropertyInteger.h"
#include "ConfigNodePropertyArray.h"
#include "ConfigNodePropertyString.h"

namespace org {
namespace openapitools {
namespace client {
namespace model {

/// <summary>
/// 
/// </summary>
class  OrgApacheSlingDiscoveryOakConfigProperties
    : public ModelBase
{
public:
    OrgApacheSlingDiscoveryOakConfigProperties();
    virtual ~OrgApacheSlingDiscoveryOakConfigProperties();

    /////////////////////////////////////////////
    /// ModelBase overrides

    void validate() override;

    web::json::value toJson() const override;
    void fromJson(web::json::value& json) override;

    void toMultipart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& namePrefix) const override;
    void fromMultiPart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& namePrefix) override;

    /////////////////////////////////////////////
    /// OrgApacheSlingDiscoveryOakConfigProperties members

    /// <summary>
    /// 
    /// </summary>
    std::shared_ptr<ConfigNodePropertyInteger> getConnectorPingTimeout() const;
    bool connectorPingTimeoutIsSet() const;
    void unsetConnectorPingTimeout();
    void setConnectorPingTimeout(std::shared_ptr<ConfigNodePropertyInteger> value);
    /// <summary>
    /// 
    /// </summary>
    std::shared_ptr<ConfigNodePropertyInteger> getConnectorPingInterval() const;
    bool connectorPingIntervalIsSet() const;
    void unsetConnectorPingInterval();
    void setConnectorPingInterval(std::shared_ptr<ConfigNodePropertyInteger> value);
    /// <summary>
    /// 
    /// </summary>
    std::shared_ptr<ConfigNodePropertyInteger> getDiscoveryLiteCheckInterval() const;
    bool discoveryLiteCheckIntervalIsSet() const;
    void unsetDiscoveryLiteCheckInterval();
    void setDiscoveryLiteCheckInterval(std::shared_ptr<ConfigNodePropertyInteger> value);
    /// <summary>
    /// 
    /// </summary>
    std::shared_ptr<ConfigNodePropertyInteger> getClusterSyncServiceTimeout() const;
    bool clusterSyncServiceTimeoutIsSet() const;
    void unsetClusterSyncServiceTimeout();
    void setClusterSyncServiceTimeout(std::shared_ptr<ConfigNodePropertyInteger> value);
    /// <summary>
    /// 
    /// </summary>
    std::shared_ptr<ConfigNodePropertyInteger> getClusterSyncServiceInterval() const;
    bool clusterSyncServiceIntervalIsSet() const;
    void unsetClusterSyncServiceInterval();
    void setClusterSyncServiceInterval(std::shared_ptr<ConfigNodePropertyInteger> value);
    /// <summary>
    /// 
    /// </summary>
    std::shared_ptr<ConfigNodePropertyBoolean> getEnableSyncToken() const;
    bool enableSyncTokenIsSet() const;
    void unsetEnableSyncToken();
    void setEnableSyncToken(std::shared_ptr<ConfigNodePropertyBoolean> value);
    /// <summary>
    /// 
    /// </summary>
    std::shared_ptr<ConfigNodePropertyInteger> getMinEventDelay() const;
    bool minEventDelayIsSet() const;
    void unsetMinEventDelay();
    void setMinEventDelay(std::shared_ptr<ConfigNodePropertyInteger> value);
    /// <summary>
    /// 
    /// </summary>
    std::shared_ptr<ConfigNodePropertyInteger> getSocketConnectTimeout() const;
    bool socketConnectTimeoutIsSet() const;
    void unsetSocketConnectTimeout();
    void setSocketConnectTimeout(std::shared_ptr<ConfigNodePropertyInteger> value);
    /// <summary>
    /// 
    /// </summary>
    std::shared_ptr<ConfigNodePropertyInteger> getSoTimeout() const;
    bool soTimeoutIsSet() const;
    void unsetSoTimeout();
    void setSoTimeout(std::shared_ptr<ConfigNodePropertyInteger> value);
    /// <summary>
    /// 
    /// </summary>
    std::shared_ptr<ConfigNodePropertyArray> getTopologyConnectorUrls() const;
    bool topologyConnectorUrlsIsSet() const;
    void unsetTopologyConnectorUrls();
    void setTopologyConnectorUrls(std::shared_ptr<ConfigNodePropertyArray> value);
    /// <summary>
    /// 
    /// </summary>
    std::shared_ptr<ConfigNodePropertyArray> getTopologyConnectorWhitelist() const;
    bool topologyConnectorWhitelistIsSet() const;
    void unsetTopologyConnectorWhitelist();
    void setTopologyConnectorWhitelist(std::shared_ptr<ConfigNodePropertyArray> value);
    /// <summary>
    /// 
    /// </summary>
    std::shared_ptr<ConfigNodePropertyBoolean> getAutoStopLocalLoopEnabled() const;
    bool autoStopLocalLoopEnabledIsSet() const;
    void unsetAutoStopLocalLoopEnabled();
    void setAutoStopLocalLoopEnabled(std::shared_ptr<ConfigNodePropertyBoolean> value);
    /// <summary>
    /// 
    /// </summary>
    std::shared_ptr<ConfigNodePropertyBoolean> getGzipConnectorRequestsEnabled() const;
    bool gzipConnectorRequestsEnabledIsSet() const;
    void unsetGzipConnectorRequestsEnabled();
    void setGzipConnectorRequestsEnabled(std::shared_ptr<ConfigNodePropertyBoolean> value);
    /// <summary>
    /// 
    /// </summary>
    std::shared_ptr<ConfigNodePropertyBoolean> getHmacEnabled() const;
    bool hmacEnabledIsSet() const;
    void unsetHmacEnabled();
    void setHmacEnabled(std::shared_ptr<ConfigNodePropertyBoolean> value);
    /// <summary>
    /// 
    /// </summary>
    std::shared_ptr<ConfigNodePropertyBoolean> getEnableEncryption() const;
    bool enableEncryptionIsSet() const;
    void unsetEnableEncryption();
    void setEnableEncryption(std::shared_ptr<ConfigNodePropertyBoolean> value);
    /// <summary>
    /// 
    /// </summary>
    std::shared_ptr<ConfigNodePropertyString> getSharedKey() const;
    bool sharedKeyIsSet() const;
    void unsetSharedKey();
    void setSharedKey(std::shared_ptr<ConfigNodePropertyString> value);
    /// <summary>
    /// 
    /// </summary>
    std::shared_ptr<ConfigNodePropertyInteger> getHmacSharedKeyTTL() const;
    bool hmacSharedKeyTTLIsSet() const;
    void unsetHmacSharedKeyTTL();
    void setHmacSharedKeyTTL(std::shared_ptr<ConfigNodePropertyInteger> value);
    /// <summary>
    /// 
    /// </summary>
    std::shared_ptr<ConfigNodePropertyString> getBackoffStandbyFactor() const;
    bool backoffStandbyFactorIsSet() const;
    void unsetBackoffStandbyFactor();
    void setBackoffStandbyFactor(std::shared_ptr<ConfigNodePropertyString> value);
    /// <summary>
    /// 
    /// </summary>
    std::shared_ptr<ConfigNodePropertyString> getBackoffStableFactor() const;
    bool backoffStableFactorIsSet() const;
    void unsetBackoffStableFactor();
    void setBackoffStableFactor(std::shared_ptr<ConfigNodePropertyString> value);

protected:
    std::shared_ptr<ConfigNodePropertyInteger> m_ConnectorPingTimeout;
    bool m_ConnectorPingTimeoutIsSet;
    std::shared_ptr<ConfigNodePropertyInteger> m_ConnectorPingInterval;
    bool m_ConnectorPingIntervalIsSet;
    std::shared_ptr<ConfigNodePropertyInteger> m_DiscoveryLiteCheckInterval;
    bool m_DiscoveryLiteCheckIntervalIsSet;
    std::shared_ptr<ConfigNodePropertyInteger> m_ClusterSyncServiceTimeout;
    bool m_ClusterSyncServiceTimeoutIsSet;
    std::shared_ptr<ConfigNodePropertyInteger> m_ClusterSyncServiceInterval;
    bool m_ClusterSyncServiceIntervalIsSet;
    std::shared_ptr<ConfigNodePropertyBoolean> m_EnableSyncToken;
    bool m_EnableSyncTokenIsSet;
    std::shared_ptr<ConfigNodePropertyInteger> m_MinEventDelay;
    bool m_MinEventDelayIsSet;
    std::shared_ptr<ConfigNodePropertyInteger> m_SocketConnectTimeout;
    bool m_SocketConnectTimeoutIsSet;
    std::shared_ptr<ConfigNodePropertyInteger> m_SoTimeout;
    bool m_SoTimeoutIsSet;
    std::shared_ptr<ConfigNodePropertyArray> m_TopologyConnectorUrls;
    bool m_TopologyConnectorUrlsIsSet;
    std::shared_ptr<ConfigNodePropertyArray> m_TopologyConnectorWhitelist;
    bool m_TopologyConnectorWhitelistIsSet;
    std::shared_ptr<ConfigNodePropertyBoolean> m_AutoStopLocalLoopEnabled;
    bool m_AutoStopLocalLoopEnabledIsSet;
    std::shared_ptr<ConfigNodePropertyBoolean> m_GzipConnectorRequestsEnabled;
    bool m_GzipConnectorRequestsEnabledIsSet;
    std::shared_ptr<ConfigNodePropertyBoolean> m_HmacEnabled;
    bool m_HmacEnabledIsSet;
    std::shared_ptr<ConfigNodePropertyBoolean> m_EnableEncryption;
    bool m_EnableEncryptionIsSet;
    std::shared_ptr<ConfigNodePropertyString> m_SharedKey;
    bool m_SharedKeyIsSet;
    std::shared_ptr<ConfigNodePropertyInteger> m_HmacSharedKeyTTL;
    bool m_HmacSharedKeyTTLIsSet;
    std::shared_ptr<ConfigNodePropertyString> m_BackoffStandbyFactor;
    bool m_BackoffStandbyFactorIsSet;
    std::shared_ptr<ConfigNodePropertyString> m_BackoffStableFactor;
    bool m_BackoffStableFactorIsSet;
};

}
}
}
}

#endif /* ORG_OPENAPITOOLS_CLIENT_MODEL_OrgApacheSlingDiscoveryOakConfigProperties_H_ */
