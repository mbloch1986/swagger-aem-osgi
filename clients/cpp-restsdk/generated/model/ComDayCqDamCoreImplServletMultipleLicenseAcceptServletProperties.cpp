/**
 * Adobe Experience Manager OSGI config (AEM) API
 * Swagger AEM OSGI is an OpenAPI specification for Adobe Experience Manager (AEM) OSGI Configurations API
 *
 * OpenAPI spec version: 1.0.0-pre.0
 * Contact: opensource@shinesolutions.com
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 3.2.1-SNAPSHOT.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */



#include "ComDayCqDamCoreImplServletMultipleLicenseAcceptServletProperties.h"

namespace org {
namespace openapitools {
namespace client {
namespace model {

ComDayCqDamCoreImplServletMultipleLicenseAcceptServletProperties::ComDayCqDamCoreImplServletMultipleLicenseAcceptServletProperties()
{
    m_Cq_dam_drm_enableIsSet = false;
}

ComDayCqDamCoreImplServletMultipleLicenseAcceptServletProperties::~ComDayCqDamCoreImplServletMultipleLicenseAcceptServletProperties()
{
}

void ComDayCqDamCoreImplServletMultipleLicenseAcceptServletProperties::validate()
{
    // TODO: implement validation
}

web::json::value ComDayCqDamCoreImplServletMultipleLicenseAcceptServletProperties::toJson() const
{
    web::json::value val = web::json::value::object();

    if(m_Cq_dam_drm_enableIsSet)
    {
        val[utility::conversions::to_string_t("cq.dam.drm.enable")] = ModelBase::toJson(m_Cq_dam_drm_enable);
    }

    return val;
}

void ComDayCqDamCoreImplServletMultipleLicenseAcceptServletProperties::fromJson(web::json::value& val)
{
    if(val.has_field(utility::conversions::to_string_t("cq.dam.drm.enable")))
    {
        if(!val[utility::conversions::to_string_t("cq.dam.drm.enable")].is_null())
        {
            std::shared_ptr<ConfigNodePropertyBoolean> newItem(new ConfigNodePropertyBoolean());
            newItem->fromJson(val[utility::conversions::to_string_t("cq.dam.drm.enable")]);
            setCqDamDrmEnable( newItem );
        }
    }
}

void ComDayCqDamCoreImplServletMultipleLicenseAcceptServletProperties::toMultipart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix) const
{
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t("."))
    {
        namePrefix += utility::conversions::to_string_t(".");
    }

    if(m_Cq_dam_drm_enableIsSet)
    {
        if (m_Cq_dam_drm_enable.get())
        {
            m_Cq_dam_drm_enable->toMultipart(multipart, utility::conversions::to_string_t("cq.dam.drm.enable."));
        }
    }
}

void ComDayCqDamCoreImplServletMultipleLicenseAcceptServletProperties::fromMultiPart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix)
{
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t("."))
    {
        namePrefix += utility::conversions::to_string_t(".");
    }

    if(multipart->hasContent(utility::conversions::to_string_t("cq.dam.drm.enable")))
    {
        if(multipart->hasContent(utility::conversions::to_string_t("cq.dam.drm.enable")))
        {
            std::shared_ptr<ConfigNodePropertyBoolean> newItem(new ConfigNodePropertyBoolean());
            newItem->fromMultiPart(multipart, utility::conversions::to_string_t("cq.dam.drm.enable."));
            setCqDamDrmEnable( newItem );
        }
    }
}

std::shared_ptr<ConfigNodePropertyBoolean> ComDayCqDamCoreImplServletMultipleLicenseAcceptServletProperties::getCqDamDrmEnable() const
{
    return m_Cq_dam_drm_enable;
}


void ComDayCqDamCoreImplServletMultipleLicenseAcceptServletProperties::setCqDamDrmEnable(std::shared_ptr<ConfigNodePropertyBoolean> value)
{
    m_Cq_dam_drm_enable = value;
    m_Cq_dam_drm_enableIsSet = true;
}
bool ComDayCqDamCoreImplServletMultipleLicenseAcceptServletProperties::cqDamDrmEnableIsSet() const
{
    return m_Cq_dam_drm_enableIsSet;
}

void ComDayCqDamCoreImplServletMultipleLicenseAcceptServletProperties::unsetCq_dam_drm_enable()
{
    m_Cq_dam_drm_enableIsSet = false;
}

}
}
}
}

