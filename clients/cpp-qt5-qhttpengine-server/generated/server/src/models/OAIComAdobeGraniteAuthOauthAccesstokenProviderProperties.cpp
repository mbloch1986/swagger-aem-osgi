/**
 * Adobe Experience Manager OSGI config (AEM) API
 * Swagger AEM OSGI is an OpenAPI specification for Adobe Experience Manager (AEM) OSGI Configurations API
 *
 * OpenAPI spec version: 1.0.0-pre.0
 * Contact: opensource@shinesolutions.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


#include "OAIComAdobeGraniteAuthOauthAccesstokenProviderProperties.h"

#include "OAIHelpers.h"

#include <QJsonDocument>
#include <QJsonArray>
#include <QObject>
#include <QDebug>

namespace OpenAPI {

OAIComAdobeGraniteAuthOauthAccesstokenProviderProperties::OAIComAdobeGraniteAuthOauthAccesstokenProviderProperties(QString json) {
    this->fromJson(json);
}

OAIComAdobeGraniteAuthOauthAccesstokenProviderProperties::OAIComAdobeGraniteAuthOauthAccesstokenProviderProperties() {
    this->init();
}

OAIComAdobeGraniteAuthOauthAccesstokenProviderProperties::~OAIComAdobeGraniteAuthOauthAccesstokenProviderProperties() {
    
}

void
OAIComAdobeGraniteAuthOauthAccesstokenProviderProperties::init() {
    m_name_isSet = false;
    m_auth_token_provider_title_isSet = false;
    m_auth_token_provider_default_claims_isSet = false;
    m_auth_token_provider_endpoint_isSet = false;
    m_auth_access_token_request_isSet = false;
    m_auth_token_provider_keypair_alias_isSet = false;
    m_auth_token_provider_conn_timeout_isSet = false;
    m_auth_token_provider_so_timeout_isSet = false;
    m_auth_token_provider_client_id_isSet = false;
    m_auth_token_provider_scope_isSet = false;
    m_auth_token_provider_reuse_access_token_isSet = false;
    m_auth_token_provider_relaxed_ssl_isSet = false;
    m_token_request_customizer_type_isSet = false;
    m_auth_token_validator_type_isSet = false;
}

void
OAIComAdobeGraniteAuthOauthAccesstokenProviderProperties::fromJson(QString jsonString) {
    QByteArray array (jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void
OAIComAdobeGraniteAuthOauthAccesstokenProviderProperties::fromJsonObject(QJsonObject json) {
    ::OpenAPI::fromJsonValue(name, json[QString("name")]);
    
    ::OpenAPI::fromJsonValue(auth_token_provider_title, json[QString("auth.token.provider.title")]);
    
    ::OpenAPI::fromJsonValue(auth_token_provider_default_claims, json[QString("auth.token.provider.default.claims")]);
    
    ::OpenAPI::fromJsonValue(auth_token_provider_endpoint, json[QString("auth.token.provider.endpoint")]);
    
    ::OpenAPI::fromJsonValue(auth_access_token_request, json[QString("auth.access.token.request")]);
    
    ::OpenAPI::fromJsonValue(auth_token_provider_keypair_alias, json[QString("auth.token.provider.keypair.alias")]);
    
    ::OpenAPI::fromJsonValue(auth_token_provider_conn_timeout, json[QString("auth.token.provider.conn.timeout")]);
    
    ::OpenAPI::fromJsonValue(auth_token_provider_so_timeout, json[QString("auth.token.provider.so.timeout")]);
    
    ::OpenAPI::fromJsonValue(auth_token_provider_client_id, json[QString("auth.token.provider.client.id")]);
    
    ::OpenAPI::fromJsonValue(auth_token_provider_scope, json[QString("auth.token.provider.scope")]);
    
    ::OpenAPI::fromJsonValue(auth_token_provider_reuse_access_token, json[QString("auth.token.provider.reuse.access.token")]);
    
    ::OpenAPI::fromJsonValue(auth_token_provider_relaxed_ssl, json[QString("auth.token.provider.relaxed.ssl")]);
    
    ::OpenAPI::fromJsonValue(token_request_customizer_type, json[QString("token.request.customizer.type")]);
    
    ::OpenAPI::fromJsonValue(auth_token_validator_type, json[QString("auth.token.validator.type")]);
    
}

QString
OAIComAdobeGraniteAuthOauthAccesstokenProviderProperties::asJson () const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject
OAIComAdobeGraniteAuthOauthAccesstokenProviderProperties::asJsonObject() const {
    QJsonObject obj;
	if(name.isSet()){
        obj.insert(QString("name"), ::OpenAPI::toJsonValue(name));
    }
	if(auth_token_provider_title.isSet()){
        obj.insert(QString("auth.token.provider.title"), ::OpenAPI::toJsonValue(auth_token_provider_title));
    }
	if(auth_token_provider_default_claims.isSet()){
        obj.insert(QString("auth.token.provider.default.claims"), ::OpenAPI::toJsonValue(auth_token_provider_default_claims));
    }
	if(auth_token_provider_endpoint.isSet()){
        obj.insert(QString("auth.token.provider.endpoint"), ::OpenAPI::toJsonValue(auth_token_provider_endpoint));
    }
	if(auth_access_token_request.isSet()){
        obj.insert(QString("auth.access.token.request"), ::OpenAPI::toJsonValue(auth_access_token_request));
    }
	if(auth_token_provider_keypair_alias.isSet()){
        obj.insert(QString("auth.token.provider.keypair.alias"), ::OpenAPI::toJsonValue(auth_token_provider_keypair_alias));
    }
	if(auth_token_provider_conn_timeout.isSet()){
        obj.insert(QString("auth.token.provider.conn.timeout"), ::OpenAPI::toJsonValue(auth_token_provider_conn_timeout));
    }
	if(auth_token_provider_so_timeout.isSet()){
        obj.insert(QString("auth.token.provider.so.timeout"), ::OpenAPI::toJsonValue(auth_token_provider_so_timeout));
    }
	if(auth_token_provider_client_id.isSet()){
        obj.insert(QString("auth.token.provider.client.id"), ::OpenAPI::toJsonValue(auth_token_provider_client_id));
    }
	if(auth_token_provider_scope.isSet()){
        obj.insert(QString("auth.token.provider.scope"), ::OpenAPI::toJsonValue(auth_token_provider_scope));
    }
	if(auth_token_provider_reuse_access_token.isSet()){
        obj.insert(QString("auth.token.provider.reuse.access.token"), ::OpenAPI::toJsonValue(auth_token_provider_reuse_access_token));
    }
	if(auth_token_provider_relaxed_ssl.isSet()){
        obj.insert(QString("auth.token.provider.relaxed.ssl"), ::OpenAPI::toJsonValue(auth_token_provider_relaxed_ssl));
    }
	if(token_request_customizer_type.isSet()){
        obj.insert(QString("token.request.customizer.type"), ::OpenAPI::toJsonValue(token_request_customizer_type));
    }
	if(auth_token_validator_type.isSet()){
        obj.insert(QString("auth.token.validator.type"), ::OpenAPI::toJsonValue(auth_token_validator_type));
    }
    return obj;
}

OAIConfigNodePropertyString
OAIComAdobeGraniteAuthOauthAccesstokenProviderProperties::getName() const {
    return name;
}
void
OAIComAdobeGraniteAuthOauthAccesstokenProviderProperties::setName(const OAIConfigNodePropertyString &name) {
    this->name = name;
    this->m_name_isSet = true;
}

OAIConfigNodePropertyString
OAIComAdobeGraniteAuthOauthAccesstokenProviderProperties::getAuthTokenProviderTitle() const {
    return auth_token_provider_title;
}
void
OAIComAdobeGraniteAuthOauthAccesstokenProviderProperties::setAuthTokenProviderTitle(const OAIConfigNodePropertyString &auth_token_provider_title) {
    this->auth_token_provider_title = auth_token_provider_title;
    this->m_auth_token_provider_title_isSet = true;
}

OAIConfigNodePropertyArray
OAIComAdobeGraniteAuthOauthAccesstokenProviderProperties::getAuthTokenProviderDefaultClaims() const {
    return auth_token_provider_default_claims;
}
void
OAIComAdobeGraniteAuthOauthAccesstokenProviderProperties::setAuthTokenProviderDefaultClaims(const OAIConfigNodePropertyArray &auth_token_provider_default_claims) {
    this->auth_token_provider_default_claims = auth_token_provider_default_claims;
    this->m_auth_token_provider_default_claims_isSet = true;
}

OAIConfigNodePropertyString
OAIComAdobeGraniteAuthOauthAccesstokenProviderProperties::getAuthTokenProviderEndpoint() const {
    return auth_token_provider_endpoint;
}
void
OAIComAdobeGraniteAuthOauthAccesstokenProviderProperties::setAuthTokenProviderEndpoint(const OAIConfigNodePropertyString &auth_token_provider_endpoint) {
    this->auth_token_provider_endpoint = auth_token_provider_endpoint;
    this->m_auth_token_provider_endpoint_isSet = true;
}

OAIConfigNodePropertyString
OAIComAdobeGraniteAuthOauthAccesstokenProviderProperties::getAuthAccessTokenRequest() const {
    return auth_access_token_request;
}
void
OAIComAdobeGraniteAuthOauthAccesstokenProviderProperties::setAuthAccessTokenRequest(const OAIConfigNodePropertyString &auth_access_token_request) {
    this->auth_access_token_request = auth_access_token_request;
    this->m_auth_access_token_request_isSet = true;
}

OAIConfigNodePropertyString
OAIComAdobeGraniteAuthOauthAccesstokenProviderProperties::getAuthTokenProviderKeypairAlias() const {
    return auth_token_provider_keypair_alias;
}
void
OAIComAdobeGraniteAuthOauthAccesstokenProviderProperties::setAuthTokenProviderKeypairAlias(const OAIConfigNodePropertyString &auth_token_provider_keypair_alias) {
    this->auth_token_provider_keypair_alias = auth_token_provider_keypair_alias;
    this->m_auth_token_provider_keypair_alias_isSet = true;
}

OAIConfigNodePropertyInteger
OAIComAdobeGraniteAuthOauthAccesstokenProviderProperties::getAuthTokenProviderConnTimeout() const {
    return auth_token_provider_conn_timeout;
}
void
OAIComAdobeGraniteAuthOauthAccesstokenProviderProperties::setAuthTokenProviderConnTimeout(const OAIConfigNodePropertyInteger &auth_token_provider_conn_timeout) {
    this->auth_token_provider_conn_timeout = auth_token_provider_conn_timeout;
    this->m_auth_token_provider_conn_timeout_isSet = true;
}

OAIConfigNodePropertyInteger
OAIComAdobeGraniteAuthOauthAccesstokenProviderProperties::getAuthTokenProviderSoTimeout() const {
    return auth_token_provider_so_timeout;
}
void
OAIComAdobeGraniteAuthOauthAccesstokenProviderProperties::setAuthTokenProviderSoTimeout(const OAIConfigNodePropertyInteger &auth_token_provider_so_timeout) {
    this->auth_token_provider_so_timeout = auth_token_provider_so_timeout;
    this->m_auth_token_provider_so_timeout_isSet = true;
}

OAIConfigNodePropertyString
OAIComAdobeGraniteAuthOauthAccesstokenProviderProperties::getAuthTokenProviderClientId() const {
    return auth_token_provider_client_id;
}
void
OAIComAdobeGraniteAuthOauthAccesstokenProviderProperties::setAuthTokenProviderClientId(const OAIConfigNodePropertyString &auth_token_provider_client_id) {
    this->auth_token_provider_client_id = auth_token_provider_client_id;
    this->m_auth_token_provider_client_id_isSet = true;
}

OAIConfigNodePropertyString
OAIComAdobeGraniteAuthOauthAccesstokenProviderProperties::getAuthTokenProviderScope() const {
    return auth_token_provider_scope;
}
void
OAIComAdobeGraniteAuthOauthAccesstokenProviderProperties::setAuthTokenProviderScope(const OAIConfigNodePropertyString &auth_token_provider_scope) {
    this->auth_token_provider_scope = auth_token_provider_scope;
    this->m_auth_token_provider_scope_isSet = true;
}

OAIConfigNodePropertyBoolean
OAIComAdobeGraniteAuthOauthAccesstokenProviderProperties::getAuthTokenProviderReuseAccessToken() const {
    return auth_token_provider_reuse_access_token;
}
void
OAIComAdobeGraniteAuthOauthAccesstokenProviderProperties::setAuthTokenProviderReuseAccessToken(const OAIConfigNodePropertyBoolean &auth_token_provider_reuse_access_token) {
    this->auth_token_provider_reuse_access_token = auth_token_provider_reuse_access_token;
    this->m_auth_token_provider_reuse_access_token_isSet = true;
}

OAIConfigNodePropertyBoolean
OAIComAdobeGraniteAuthOauthAccesstokenProviderProperties::getAuthTokenProviderRelaxedSsl() const {
    return auth_token_provider_relaxed_ssl;
}
void
OAIComAdobeGraniteAuthOauthAccesstokenProviderProperties::setAuthTokenProviderRelaxedSsl(const OAIConfigNodePropertyBoolean &auth_token_provider_relaxed_ssl) {
    this->auth_token_provider_relaxed_ssl = auth_token_provider_relaxed_ssl;
    this->m_auth_token_provider_relaxed_ssl_isSet = true;
}

OAIConfigNodePropertyString
OAIComAdobeGraniteAuthOauthAccesstokenProviderProperties::getTokenRequestCustomizerType() const {
    return token_request_customizer_type;
}
void
OAIComAdobeGraniteAuthOauthAccesstokenProviderProperties::setTokenRequestCustomizerType(const OAIConfigNodePropertyString &token_request_customizer_type) {
    this->token_request_customizer_type = token_request_customizer_type;
    this->m_token_request_customizer_type_isSet = true;
}

OAIConfigNodePropertyString
OAIComAdobeGraniteAuthOauthAccesstokenProviderProperties::getAuthTokenValidatorType() const {
    return auth_token_validator_type;
}
void
OAIComAdobeGraniteAuthOauthAccesstokenProviderProperties::setAuthTokenValidatorType(const OAIConfigNodePropertyString &auth_token_validator_type) {
    this->auth_token_validator_type = auth_token_validator_type;
    this->m_auth_token_validator_type_isSet = true;
}


bool
OAIComAdobeGraniteAuthOauthAccesstokenProviderProperties::isSet() const {
    bool isObjectUpdated = false;
    do{ 
        if(name.isSet()){ isObjectUpdated = true; break;}
    
        if(auth_token_provider_title.isSet()){ isObjectUpdated = true; break;}
    
        if(auth_token_provider_default_claims.isSet()){ isObjectUpdated = true; break;}
    
        if(auth_token_provider_endpoint.isSet()){ isObjectUpdated = true; break;}
    
        if(auth_access_token_request.isSet()){ isObjectUpdated = true; break;}
    
        if(auth_token_provider_keypair_alias.isSet()){ isObjectUpdated = true; break;}
    
        if(auth_token_provider_conn_timeout.isSet()){ isObjectUpdated = true; break;}
    
        if(auth_token_provider_so_timeout.isSet()){ isObjectUpdated = true; break;}
    
        if(auth_token_provider_client_id.isSet()){ isObjectUpdated = true; break;}
    
        if(auth_token_provider_scope.isSet()){ isObjectUpdated = true; break;}
    
        if(auth_token_provider_reuse_access_token.isSet()){ isObjectUpdated = true; break;}
    
        if(auth_token_provider_relaxed_ssl.isSet()){ isObjectUpdated = true; break;}
    
        if(token_request_customizer_type.isSet()){ isObjectUpdated = true; break;}
    
        if(auth_token_validator_type.isSet()){ isObjectUpdated = true; break;}
    }while(false);
    return isObjectUpdated;
}

}

