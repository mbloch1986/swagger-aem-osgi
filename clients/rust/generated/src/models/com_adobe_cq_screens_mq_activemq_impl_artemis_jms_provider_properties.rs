/* 
 * Adobe Experience Manager OSGI config (AEM) API
 *
 * Swagger AEM OSGI is an OpenAPI specification for Adobe Experience Manager (AEM) OSGI Configurations API
 *
 * OpenAPI spec version: 1.0.0-pre.0
 * Contact: opensource@shinesolutions.com
 * Generated by: https://openapi-generator.tech
 */


#[allow(unused_imports)]
use serde_json::Value;

#[derive(Debug, Serialize, Deserialize)]
pub struct ComAdobeCqScreensMqActivemqImplArtemisJmsProviderProperties {
  #[serde(rename = "service.ranking")]
  service_ranking: Option<::models::ConfigNodePropertyInteger>,
  #[serde(rename = "global.size")]
  global_size: Option<::models::ConfigNodePropertyInteger>,
  #[serde(rename = "max.disk.usage")]
  max_disk_usage: Option<::models::ConfigNodePropertyInteger>,
  #[serde(rename = "persistence.enabled")]
  persistence_enabled: Option<::models::ConfigNodePropertyBoolean>,
  #[serde(rename = "thread.pool.max.size")]
  thread_pool_max_size: Option<::models::ConfigNodePropertyInteger>,
  #[serde(rename = "scheduled.thread.pool.max.size")]
  scheduled_thread_pool_max_size: Option<::models::ConfigNodePropertyInteger>,
  #[serde(rename = "graceful.shutdown.timeout")]
  graceful_shutdown_timeout: Option<::models::ConfigNodePropertyInteger>,
  #[serde(rename = "queues")]
  queues: Option<::models::ConfigNodePropertyArray>,
  #[serde(rename = "topics")]
  topics: Option<::models::ConfigNodePropertyArray>,
  #[serde(rename = "addresses.max.delivery.attempts")]
  addresses_max_delivery_attempts: Option<::models::ConfigNodePropertyInteger>,
  #[serde(rename = "addresses.expiry.delay")]
  addresses_expiry_delay: Option<::models::ConfigNodePropertyInteger>,
  #[serde(rename = "addresses.address.full.message.policy")]
  addresses_address_full_message_policy: Option<::models::ConfigNodePropertyDropDown>,
  #[serde(rename = "addresses.max.size.bytes")]
  addresses_max_size_bytes: Option<::models::ConfigNodePropertyInteger>,
  #[serde(rename = "addresses.page.size.bytes")]
  addresses_page_size_bytes: Option<::models::ConfigNodePropertyInteger>,
  #[serde(rename = "addresses.page.cache.max.size")]
  addresses_page_cache_max_size: Option<::models::ConfigNodePropertyInteger>,
  #[serde(rename = "cluster.user")]
  cluster_user: Option<::models::ConfigNodePropertyString>,
  #[serde(rename = "cluster.password")]
  cluster_password: Option<::models::ConfigNodePropertyString>,
  #[serde(rename = "cluster.call.timeout")]
  cluster_call_timeout: Option<::models::ConfigNodePropertyInteger>,
  #[serde(rename = "cluster.call.failover.timeout")]
  cluster_call_failover_timeout: Option<::models::ConfigNodePropertyInteger>,
  #[serde(rename = "cluster.client.failure.check.period")]
  cluster_client_failure_check_period: Option<::models::ConfigNodePropertyInteger>,
  #[serde(rename = "cluster.notification.attempts")]
  cluster_notification_attempts: Option<::models::ConfigNodePropertyInteger>,
  #[serde(rename = "cluster.notification.interval")]
  cluster_notification_interval: Option<::models::ConfigNodePropertyInteger>,
  #[serde(rename = "id.cache.size")]
  id_cache_size: Option<::models::ConfigNodePropertyInteger>,
  #[serde(rename = "cluster.confirmation.window.size")]
  cluster_confirmation_window_size: Option<::models::ConfigNodePropertyInteger>,
  #[serde(rename = "cluster.connection.ttl")]
  cluster_connection_ttl: Option<::models::ConfigNodePropertyInteger>,
  #[serde(rename = "cluster.duplicate.detection")]
  cluster_duplicate_detection: Option<::models::ConfigNodePropertyBoolean>,
  #[serde(rename = "cluster.initial.connect.attempts")]
  cluster_initial_connect_attempts: Option<::models::ConfigNodePropertyInteger>,
  #[serde(rename = "cluster.max.retry.interval")]
  cluster_max_retry_interval: Option<::models::ConfigNodePropertyInteger>,
  #[serde(rename = "cluster.min.large.message.size")]
  cluster_min_large_message_size: Option<::models::ConfigNodePropertyInteger>,
  #[serde(rename = "cluster.producer.window.size")]
  cluster_producer_window_size: Option<::models::ConfigNodePropertyInteger>,
  #[serde(rename = "cluster.reconnect.attempts")]
  cluster_reconnect_attempts: Option<::models::ConfigNodePropertyInteger>,
  #[serde(rename = "cluster.retry.interval")]
  cluster_retry_interval: Option<::models::ConfigNodePropertyInteger>,
  #[serde(rename = "cluster.retry.interval.multiplier")]
  cluster_retry_interval_multiplier: Option<::models::ConfigNodePropertyFloat>
}

impl ComAdobeCqScreensMqActivemqImplArtemisJmsProviderProperties {
  pub fn new() -> ComAdobeCqScreensMqActivemqImplArtemisJmsProviderProperties {
    ComAdobeCqScreensMqActivemqImplArtemisJmsProviderProperties {
      service_ranking: None,
      global_size: None,
      max_disk_usage: None,
      persistence_enabled: None,
      thread_pool_max_size: None,
      scheduled_thread_pool_max_size: None,
      graceful_shutdown_timeout: None,
      queues: None,
      topics: None,
      addresses_max_delivery_attempts: None,
      addresses_expiry_delay: None,
      addresses_address_full_message_policy: None,
      addresses_max_size_bytes: None,
      addresses_page_size_bytes: None,
      addresses_page_cache_max_size: None,
      cluster_user: None,
      cluster_password: None,
      cluster_call_timeout: None,
      cluster_call_failover_timeout: None,
      cluster_client_failure_check_period: None,
      cluster_notification_attempts: None,
      cluster_notification_interval: None,
      id_cache_size: None,
      cluster_confirmation_window_size: None,
      cluster_connection_ttl: None,
      cluster_duplicate_detection: None,
      cluster_initial_connect_attempts: None,
      cluster_max_retry_interval: None,
      cluster_min_large_message_size: None,
      cluster_producer_window_size: None,
      cluster_reconnect_attempts: None,
      cluster_retry_interval: None,
      cluster_retry_interval_multiplier: None
    }
  }

  pub fn set_service_ranking(&mut self, service_ranking: ::models::ConfigNodePropertyInteger) {
    self.service_ranking = Some(service_ranking);
  }

  pub fn with_service_ranking(mut self, service_ranking: ::models::ConfigNodePropertyInteger) -> ComAdobeCqScreensMqActivemqImplArtemisJmsProviderProperties {
    self.service_ranking = Some(service_ranking);
    self
  }

  pub fn service_ranking(&self) -> Option<&::models::ConfigNodePropertyInteger> {
    self.service_ranking.as_ref()
  }

  pub fn reset_service_ranking(&mut self) {
    self.service_ranking = None;
  }

  pub fn set_global_size(&mut self, global_size: ::models::ConfigNodePropertyInteger) {
    self.global_size = Some(global_size);
  }

  pub fn with_global_size(mut self, global_size: ::models::ConfigNodePropertyInteger) -> ComAdobeCqScreensMqActivemqImplArtemisJmsProviderProperties {
    self.global_size = Some(global_size);
    self
  }

  pub fn global_size(&self) -> Option<&::models::ConfigNodePropertyInteger> {
    self.global_size.as_ref()
  }

  pub fn reset_global_size(&mut self) {
    self.global_size = None;
  }

  pub fn set_max_disk_usage(&mut self, max_disk_usage: ::models::ConfigNodePropertyInteger) {
    self.max_disk_usage = Some(max_disk_usage);
  }

  pub fn with_max_disk_usage(mut self, max_disk_usage: ::models::ConfigNodePropertyInteger) -> ComAdobeCqScreensMqActivemqImplArtemisJmsProviderProperties {
    self.max_disk_usage = Some(max_disk_usage);
    self
  }

  pub fn max_disk_usage(&self) -> Option<&::models::ConfigNodePropertyInteger> {
    self.max_disk_usage.as_ref()
  }

  pub fn reset_max_disk_usage(&mut self) {
    self.max_disk_usage = None;
  }

  pub fn set_persistence_enabled(&mut self, persistence_enabled: ::models::ConfigNodePropertyBoolean) {
    self.persistence_enabled = Some(persistence_enabled);
  }

  pub fn with_persistence_enabled(mut self, persistence_enabled: ::models::ConfigNodePropertyBoolean) -> ComAdobeCqScreensMqActivemqImplArtemisJmsProviderProperties {
    self.persistence_enabled = Some(persistence_enabled);
    self
  }

  pub fn persistence_enabled(&self) -> Option<&::models::ConfigNodePropertyBoolean> {
    self.persistence_enabled.as_ref()
  }

  pub fn reset_persistence_enabled(&mut self) {
    self.persistence_enabled = None;
  }

  pub fn set_thread_pool_max_size(&mut self, thread_pool_max_size: ::models::ConfigNodePropertyInteger) {
    self.thread_pool_max_size = Some(thread_pool_max_size);
  }

  pub fn with_thread_pool_max_size(mut self, thread_pool_max_size: ::models::ConfigNodePropertyInteger) -> ComAdobeCqScreensMqActivemqImplArtemisJmsProviderProperties {
    self.thread_pool_max_size = Some(thread_pool_max_size);
    self
  }

  pub fn thread_pool_max_size(&self) -> Option<&::models::ConfigNodePropertyInteger> {
    self.thread_pool_max_size.as_ref()
  }

  pub fn reset_thread_pool_max_size(&mut self) {
    self.thread_pool_max_size = None;
  }

  pub fn set_scheduled_thread_pool_max_size(&mut self, scheduled_thread_pool_max_size: ::models::ConfigNodePropertyInteger) {
    self.scheduled_thread_pool_max_size = Some(scheduled_thread_pool_max_size);
  }

  pub fn with_scheduled_thread_pool_max_size(mut self, scheduled_thread_pool_max_size: ::models::ConfigNodePropertyInteger) -> ComAdobeCqScreensMqActivemqImplArtemisJmsProviderProperties {
    self.scheduled_thread_pool_max_size = Some(scheduled_thread_pool_max_size);
    self
  }

  pub fn scheduled_thread_pool_max_size(&self) -> Option<&::models::ConfigNodePropertyInteger> {
    self.scheduled_thread_pool_max_size.as_ref()
  }

  pub fn reset_scheduled_thread_pool_max_size(&mut self) {
    self.scheduled_thread_pool_max_size = None;
  }

  pub fn set_graceful_shutdown_timeout(&mut self, graceful_shutdown_timeout: ::models::ConfigNodePropertyInteger) {
    self.graceful_shutdown_timeout = Some(graceful_shutdown_timeout);
  }

  pub fn with_graceful_shutdown_timeout(mut self, graceful_shutdown_timeout: ::models::ConfigNodePropertyInteger) -> ComAdobeCqScreensMqActivemqImplArtemisJmsProviderProperties {
    self.graceful_shutdown_timeout = Some(graceful_shutdown_timeout);
    self
  }

  pub fn graceful_shutdown_timeout(&self) -> Option<&::models::ConfigNodePropertyInteger> {
    self.graceful_shutdown_timeout.as_ref()
  }

  pub fn reset_graceful_shutdown_timeout(&mut self) {
    self.graceful_shutdown_timeout = None;
  }

  pub fn set_queues(&mut self, queues: ::models::ConfigNodePropertyArray) {
    self.queues = Some(queues);
  }

  pub fn with_queues(mut self, queues: ::models::ConfigNodePropertyArray) -> ComAdobeCqScreensMqActivemqImplArtemisJmsProviderProperties {
    self.queues = Some(queues);
    self
  }

  pub fn queues(&self) -> Option<&::models::ConfigNodePropertyArray> {
    self.queues.as_ref()
  }

  pub fn reset_queues(&mut self) {
    self.queues = None;
  }

  pub fn set_topics(&mut self, topics: ::models::ConfigNodePropertyArray) {
    self.topics = Some(topics);
  }

  pub fn with_topics(mut self, topics: ::models::ConfigNodePropertyArray) -> ComAdobeCqScreensMqActivemqImplArtemisJmsProviderProperties {
    self.topics = Some(topics);
    self
  }

  pub fn topics(&self) -> Option<&::models::ConfigNodePropertyArray> {
    self.topics.as_ref()
  }

  pub fn reset_topics(&mut self) {
    self.topics = None;
  }

  pub fn set_addresses_max_delivery_attempts(&mut self, addresses_max_delivery_attempts: ::models::ConfigNodePropertyInteger) {
    self.addresses_max_delivery_attempts = Some(addresses_max_delivery_attempts);
  }

  pub fn with_addresses_max_delivery_attempts(mut self, addresses_max_delivery_attempts: ::models::ConfigNodePropertyInteger) -> ComAdobeCqScreensMqActivemqImplArtemisJmsProviderProperties {
    self.addresses_max_delivery_attempts = Some(addresses_max_delivery_attempts);
    self
  }

  pub fn addresses_max_delivery_attempts(&self) -> Option<&::models::ConfigNodePropertyInteger> {
    self.addresses_max_delivery_attempts.as_ref()
  }

  pub fn reset_addresses_max_delivery_attempts(&mut self) {
    self.addresses_max_delivery_attempts = None;
  }

  pub fn set_addresses_expiry_delay(&mut self, addresses_expiry_delay: ::models::ConfigNodePropertyInteger) {
    self.addresses_expiry_delay = Some(addresses_expiry_delay);
  }

  pub fn with_addresses_expiry_delay(mut self, addresses_expiry_delay: ::models::ConfigNodePropertyInteger) -> ComAdobeCqScreensMqActivemqImplArtemisJmsProviderProperties {
    self.addresses_expiry_delay = Some(addresses_expiry_delay);
    self
  }

  pub fn addresses_expiry_delay(&self) -> Option<&::models::ConfigNodePropertyInteger> {
    self.addresses_expiry_delay.as_ref()
  }

  pub fn reset_addresses_expiry_delay(&mut self) {
    self.addresses_expiry_delay = None;
  }

  pub fn set_addresses_address_full_message_policy(&mut self, addresses_address_full_message_policy: ::models::ConfigNodePropertyDropDown) {
    self.addresses_address_full_message_policy = Some(addresses_address_full_message_policy);
  }

  pub fn with_addresses_address_full_message_policy(mut self, addresses_address_full_message_policy: ::models::ConfigNodePropertyDropDown) -> ComAdobeCqScreensMqActivemqImplArtemisJmsProviderProperties {
    self.addresses_address_full_message_policy = Some(addresses_address_full_message_policy);
    self
  }

  pub fn addresses_address_full_message_policy(&self) -> Option<&::models::ConfigNodePropertyDropDown> {
    self.addresses_address_full_message_policy.as_ref()
  }

  pub fn reset_addresses_address_full_message_policy(&mut self) {
    self.addresses_address_full_message_policy = None;
  }

  pub fn set_addresses_max_size_bytes(&mut self, addresses_max_size_bytes: ::models::ConfigNodePropertyInteger) {
    self.addresses_max_size_bytes = Some(addresses_max_size_bytes);
  }

  pub fn with_addresses_max_size_bytes(mut self, addresses_max_size_bytes: ::models::ConfigNodePropertyInteger) -> ComAdobeCqScreensMqActivemqImplArtemisJmsProviderProperties {
    self.addresses_max_size_bytes = Some(addresses_max_size_bytes);
    self
  }

  pub fn addresses_max_size_bytes(&self) -> Option<&::models::ConfigNodePropertyInteger> {
    self.addresses_max_size_bytes.as_ref()
  }

  pub fn reset_addresses_max_size_bytes(&mut self) {
    self.addresses_max_size_bytes = None;
  }

  pub fn set_addresses_page_size_bytes(&mut self, addresses_page_size_bytes: ::models::ConfigNodePropertyInteger) {
    self.addresses_page_size_bytes = Some(addresses_page_size_bytes);
  }

  pub fn with_addresses_page_size_bytes(mut self, addresses_page_size_bytes: ::models::ConfigNodePropertyInteger) -> ComAdobeCqScreensMqActivemqImplArtemisJmsProviderProperties {
    self.addresses_page_size_bytes = Some(addresses_page_size_bytes);
    self
  }

  pub fn addresses_page_size_bytes(&self) -> Option<&::models::ConfigNodePropertyInteger> {
    self.addresses_page_size_bytes.as_ref()
  }

  pub fn reset_addresses_page_size_bytes(&mut self) {
    self.addresses_page_size_bytes = None;
  }

  pub fn set_addresses_page_cache_max_size(&mut self, addresses_page_cache_max_size: ::models::ConfigNodePropertyInteger) {
    self.addresses_page_cache_max_size = Some(addresses_page_cache_max_size);
  }

  pub fn with_addresses_page_cache_max_size(mut self, addresses_page_cache_max_size: ::models::ConfigNodePropertyInteger) -> ComAdobeCqScreensMqActivemqImplArtemisJmsProviderProperties {
    self.addresses_page_cache_max_size = Some(addresses_page_cache_max_size);
    self
  }

  pub fn addresses_page_cache_max_size(&self) -> Option<&::models::ConfigNodePropertyInteger> {
    self.addresses_page_cache_max_size.as_ref()
  }

  pub fn reset_addresses_page_cache_max_size(&mut self) {
    self.addresses_page_cache_max_size = None;
  }

  pub fn set_cluster_user(&mut self, cluster_user: ::models::ConfigNodePropertyString) {
    self.cluster_user = Some(cluster_user);
  }

  pub fn with_cluster_user(mut self, cluster_user: ::models::ConfigNodePropertyString) -> ComAdobeCqScreensMqActivemqImplArtemisJmsProviderProperties {
    self.cluster_user = Some(cluster_user);
    self
  }

  pub fn cluster_user(&self) -> Option<&::models::ConfigNodePropertyString> {
    self.cluster_user.as_ref()
  }

  pub fn reset_cluster_user(&mut self) {
    self.cluster_user = None;
  }

  pub fn set_cluster_password(&mut self, cluster_password: ::models::ConfigNodePropertyString) {
    self.cluster_password = Some(cluster_password);
  }

  pub fn with_cluster_password(mut self, cluster_password: ::models::ConfigNodePropertyString) -> ComAdobeCqScreensMqActivemqImplArtemisJmsProviderProperties {
    self.cluster_password = Some(cluster_password);
    self
  }

  pub fn cluster_password(&self) -> Option<&::models::ConfigNodePropertyString> {
    self.cluster_password.as_ref()
  }

  pub fn reset_cluster_password(&mut self) {
    self.cluster_password = None;
  }

  pub fn set_cluster_call_timeout(&mut self, cluster_call_timeout: ::models::ConfigNodePropertyInteger) {
    self.cluster_call_timeout = Some(cluster_call_timeout);
  }

  pub fn with_cluster_call_timeout(mut self, cluster_call_timeout: ::models::ConfigNodePropertyInteger) -> ComAdobeCqScreensMqActivemqImplArtemisJmsProviderProperties {
    self.cluster_call_timeout = Some(cluster_call_timeout);
    self
  }

  pub fn cluster_call_timeout(&self) -> Option<&::models::ConfigNodePropertyInteger> {
    self.cluster_call_timeout.as_ref()
  }

  pub fn reset_cluster_call_timeout(&mut self) {
    self.cluster_call_timeout = None;
  }

  pub fn set_cluster_call_failover_timeout(&mut self, cluster_call_failover_timeout: ::models::ConfigNodePropertyInteger) {
    self.cluster_call_failover_timeout = Some(cluster_call_failover_timeout);
  }

  pub fn with_cluster_call_failover_timeout(mut self, cluster_call_failover_timeout: ::models::ConfigNodePropertyInteger) -> ComAdobeCqScreensMqActivemqImplArtemisJmsProviderProperties {
    self.cluster_call_failover_timeout = Some(cluster_call_failover_timeout);
    self
  }

  pub fn cluster_call_failover_timeout(&self) -> Option<&::models::ConfigNodePropertyInteger> {
    self.cluster_call_failover_timeout.as_ref()
  }

  pub fn reset_cluster_call_failover_timeout(&mut self) {
    self.cluster_call_failover_timeout = None;
  }

  pub fn set_cluster_client_failure_check_period(&mut self, cluster_client_failure_check_period: ::models::ConfigNodePropertyInteger) {
    self.cluster_client_failure_check_period = Some(cluster_client_failure_check_period);
  }

  pub fn with_cluster_client_failure_check_period(mut self, cluster_client_failure_check_period: ::models::ConfigNodePropertyInteger) -> ComAdobeCqScreensMqActivemqImplArtemisJmsProviderProperties {
    self.cluster_client_failure_check_period = Some(cluster_client_failure_check_period);
    self
  }

  pub fn cluster_client_failure_check_period(&self) -> Option<&::models::ConfigNodePropertyInteger> {
    self.cluster_client_failure_check_period.as_ref()
  }

  pub fn reset_cluster_client_failure_check_period(&mut self) {
    self.cluster_client_failure_check_period = None;
  }

  pub fn set_cluster_notification_attempts(&mut self, cluster_notification_attempts: ::models::ConfigNodePropertyInteger) {
    self.cluster_notification_attempts = Some(cluster_notification_attempts);
  }

  pub fn with_cluster_notification_attempts(mut self, cluster_notification_attempts: ::models::ConfigNodePropertyInteger) -> ComAdobeCqScreensMqActivemqImplArtemisJmsProviderProperties {
    self.cluster_notification_attempts = Some(cluster_notification_attempts);
    self
  }

  pub fn cluster_notification_attempts(&self) -> Option<&::models::ConfigNodePropertyInteger> {
    self.cluster_notification_attempts.as_ref()
  }

  pub fn reset_cluster_notification_attempts(&mut self) {
    self.cluster_notification_attempts = None;
  }

  pub fn set_cluster_notification_interval(&mut self, cluster_notification_interval: ::models::ConfigNodePropertyInteger) {
    self.cluster_notification_interval = Some(cluster_notification_interval);
  }

  pub fn with_cluster_notification_interval(mut self, cluster_notification_interval: ::models::ConfigNodePropertyInteger) -> ComAdobeCqScreensMqActivemqImplArtemisJmsProviderProperties {
    self.cluster_notification_interval = Some(cluster_notification_interval);
    self
  }

  pub fn cluster_notification_interval(&self) -> Option<&::models::ConfigNodePropertyInteger> {
    self.cluster_notification_interval.as_ref()
  }

  pub fn reset_cluster_notification_interval(&mut self) {
    self.cluster_notification_interval = None;
  }

  pub fn set_id_cache_size(&mut self, id_cache_size: ::models::ConfigNodePropertyInteger) {
    self.id_cache_size = Some(id_cache_size);
  }

  pub fn with_id_cache_size(mut self, id_cache_size: ::models::ConfigNodePropertyInteger) -> ComAdobeCqScreensMqActivemqImplArtemisJmsProviderProperties {
    self.id_cache_size = Some(id_cache_size);
    self
  }

  pub fn id_cache_size(&self) -> Option<&::models::ConfigNodePropertyInteger> {
    self.id_cache_size.as_ref()
  }

  pub fn reset_id_cache_size(&mut self) {
    self.id_cache_size = None;
  }

  pub fn set_cluster_confirmation_window_size(&mut self, cluster_confirmation_window_size: ::models::ConfigNodePropertyInteger) {
    self.cluster_confirmation_window_size = Some(cluster_confirmation_window_size);
  }

  pub fn with_cluster_confirmation_window_size(mut self, cluster_confirmation_window_size: ::models::ConfigNodePropertyInteger) -> ComAdobeCqScreensMqActivemqImplArtemisJmsProviderProperties {
    self.cluster_confirmation_window_size = Some(cluster_confirmation_window_size);
    self
  }

  pub fn cluster_confirmation_window_size(&self) -> Option<&::models::ConfigNodePropertyInteger> {
    self.cluster_confirmation_window_size.as_ref()
  }

  pub fn reset_cluster_confirmation_window_size(&mut self) {
    self.cluster_confirmation_window_size = None;
  }

  pub fn set_cluster_connection_ttl(&mut self, cluster_connection_ttl: ::models::ConfigNodePropertyInteger) {
    self.cluster_connection_ttl = Some(cluster_connection_ttl);
  }

  pub fn with_cluster_connection_ttl(mut self, cluster_connection_ttl: ::models::ConfigNodePropertyInteger) -> ComAdobeCqScreensMqActivemqImplArtemisJmsProviderProperties {
    self.cluster_connection_ttl = Some(cluster_connection_ttl);
    self
  }

  pub fn cluster_connection_ttl(&self) -> Option<&::models::ConfigNodePropertyInteger> {
    self.cluster_connection_ttl.as_ref()
  }

  pub fn reset_cluster_connection_ttl(&mut self) {
    self.cluster_connection_ttl = None;
  }

  pub fn set_cluster_duplicate_detection(&mut self, cluster_duplicate_detection: ::models::ConfigNodePropertyBoolean) {
    self.cluster_duplicate_detection = Some(cluster_duplicate_detection);
  }

  pub fn with_cluster_duplicate_detection(mut self, cluster_duplicate_detection: ::models::ConfigNodePropertyBoolean) -> ComAdobeCqScreensMqActivemqImplArtemisJmsProviderProperties {
    self.cluster_duplicate_detection = Some(cluster_duplicate_detection);
    self
  }

  pub fn cluster_duplicate_detection(&self) -> Option<&::models::ConfigNodePropertyBoolean> {
    self.cluster_duplicate_detection.as_ref()
  }

  pub fn reset_cluster_duplicate_detection(&mut self) {
    self.cluster_duplicate_detection = None;
  }

  pub fn set_cluster_initial_connect_attempts(&mut self, cluster_initial_connect_attempts: ::models::ConfigNodePropertyInteger) {
    self.cluster_initial_connect_attempts = Some(cluster_initial_connect_attempts);
  }

  pub fn with_cluster_initial_connect_attempts(mut self, cluster_initial_connect_attempts: ::models::ConfigNodePropertyInteger) -> ComAdobeCqScreensMqActivemqImplArtemisJmsProviderProperties {
    self.cluster_initial_connect_attempts = Some(cluster_initial_connect_attempts);
    self
  }

  pub fn cluster_initial_connect_attempts(&self) -> Option<&::models::ConfigNodePropertyInteger> {
    self.cluster_initial_connect_attempts.as_ref()
  }

  pub fn reset_cluster_initial_connect_attempts(&mut self) {
    self.cluster_initial_connect_attempts = None;
  }

  pub fn set_cluster_max_retry_interval(&mut self, cluster_max_retry_interval: ::models::ConfigNodePropertyInteger) {
    self.cluster_max_retry_interval = Some(cluster_max_retry_interval);
  }

  pub fn with_cluster_max_retry_interval(mut self, cluster_max_retry_interval: ::models::ConfigNodePropertyInteger) -> ComAdobeCqScreensMqActivemqImplArtemisJmsProviderProperties {
    self.cluster_max_retry_interval = Some(cluster_max_retry_interval);
    self
  }

  pub fn cluster_max_retry_interval(&self) -> Option<&::models::ConfigNodePropertyInteger> {
    self.cluster_max_retry_interval.as_ref()
  }

  pub fn reset_cluster_max_retry_interval(&mut self) {
    self.cluster_max_retry_interval = None;
  }

  pub fn set_cluster_min_large_message_size(&mut self, cluster_min_large_message_size: ::models::ConfigNodePropertyInteger) {
    self.cluster_min_large_message_size = Some(cluster_min_large_message_size);
  }

  pub fn with_cluster_min_large_message_size(mut self, cluster_min_large_message_size: ::models::ConfigNodePropertyInteger) -> ComAdobeCqScreensMqActivemqImplArtemisJmsProviderProperties {
    self.cluster_min_large_message_size = Some(cluster_min_large_message_size);
    self
  }

  pub fn cluster_min_large_message_size(&self) -> Option<&::models::ConfigNodePropertyInteger> {
    self.cluster_min_large_message_size.as_ref()
  }

  pub fn reset_cluster_min_large_message_size(&mut self) {
    self.cluster_min_large_message_size = None;
  }

  pub fn set_cluster_producer_window_size(&mut self, cluster_producer_window_size: ::models::ConfigNodePropertyInteger) {
    self.cluster_producer_window_size = Some(cluster_producer_window_size);
  }

  pub fn with_cluster_producer_window_size(mut self, cluster_producer_window_size: ::models::ConfigNodePropertyInteger) -> ComAdobeCqScreensMqActivemqImplArtemisJmsProviderProperties {
    self.cluster_producer_window_size = Some(cluster_producer_window_size);
    self
  }

  pub fn cluster_producer_window_size(&self) -> Option<&::models::ConfigNodePropertyInteger> {
    self.cluster_producer_window_size.as_ref()
  }

  pub fn reset_cluster_producer_window_size(&mut self) {
    self.cluster_producer_window_size = None;
  }

  pub fn set_cluster_reconnect_attempts(&mut self, cluster_reconnect_attempts: ::models::ConfigNodePropertyInteger) {
    self.cluster_reconnect_attempts = Some(cluster_reconnect_attempts);
  }

  pub fn with_cluster_reconnect_attempts(mut self, cluster_reconnect_attempts: ::models::ConfigNodePropertyInteger) -> ComAdobeCqScreensMqActivemqImplArtemisJmsProviderProperties {
    self.cluster_reconnect_attempts = Some(cluster_reconnect_attempts);
    self
  }

  pub fn cluster_reconnect_attempts(&self) -> Option<&::models::ConfigNodePropertyInteger> {
    self.cluster_reconnect_attempts.as_ref()
  }

  pub fn reset_cluster_reconnect_attempts(&mut self) {
    self.cluster_reconnect_attempts = None;
  }

  pub fn set_cluster_retry_interval(&mut self, cluster_retry_interval: ::models::ConfigNodePropertyInteger) {
    self.cluster_retry_interval = Some(cluster_retry_interval);
  }

  pub fn with_cluster_retry_interval(mut self, cluster_retry_interval: ::models::ConfigNodePropertyInteger) -> ComAdobeCqScreensMqActivemqImplArtemisJmsProviderProperties {
    self.cluster_retry_interval = Some(cluster_retry_interval);
    self
  }

  pub fn cluster_retry_interval(&self) -> Option<&::models::ConfigNodePropertyInteger> {
    self.cluster_retry_interval.as_ref()
  }

  pub fn reset_cluster_retry_interval(&mut self) {
    self.cluster_retry_interval = None;
  }

  pub fn set_cluster_retry_interval_multiplier(&mut self, cluster_retry_interval_multiplier: ::models::ConfigNodePropertyFloat) {
    self.cluster_retry_interval_multiplier = Some(cluster_retry_interval_multiplier);
  }

  pub fn with_cluster_retry_interval_multiplier(mut self, cluster_retry_interval_multiplier: ::models::ConfigNodePropertyFloat) -> ComAdobeCqScreensMqActivemqImplArtemisJmsProviderProperties {
    self.cluster_retry_interval_multiplier = Some(cluster_retry_interval_multiplier);
    self
  }

  pub fn cluster_retry_interval_multiplier(&self) -> Option<&::models::ConfigNodePropertyFloat> {
    self.cluster_retry_interval_multiplier.as_ref()
  }

  pub fn reset_cluster_retry_interval_multiplier(&mut self) {
    self.cluster_retry_interval_multiplier = None;
  }

}



