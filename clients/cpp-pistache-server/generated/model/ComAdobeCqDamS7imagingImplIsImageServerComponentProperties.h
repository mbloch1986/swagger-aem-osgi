/**
* Adobe Experience Manager OSGI config (AEM) API
* Swagger AEM OSGI is an OpenAPI specification for Adobe Experience Manager (AEM) OSGI Configurations API
*
* OpenAPI spec version: 1.0.0-pre.0
* Contact: opensource@shinesolutions.com
*
* NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
* https://openapi-generator.tech
* Do not edit the class manually.
*/
/*
 * ComAdobeCqDamS7imagingImplIsImageServerComponentProperties.h
 *
 * 
 */

#ifndef ComAdobeCqDamS7imagingImplIsImageServerComponentProperties_H_
#define ComAdobeCqDamS7imagingImplIsImageServerComponentProperties_H_


#include "ModelBase.h"

#include "ConfigNodePropertyBoolean.h"
#include "ConfigNodePropertyInteger.h"
#include "ConfigNodePropertyString.h"

namespace org {
namespace openapitools {
namespace server {
namespace model {

/// <summary>
/// 
/// </summary>
class  ComAdobeCqDamS7imagingImplIsImageServerComponentProperties
    : public ModelBase
{
public:
    ComAdobeCqDamS7imagingImplIsImageServerComponentProperties();
    virtual ~ComAdobeCqDamS7imagingImplIsImageServerComponentProperties();

    /////////////////////////////////////////////
    /// ModelBase overrides

    void validate() override;

    nlohmann::json toJson() const override;
    void fromJson(nlohmann::json& json) override;

    /////////////////////////////////////////////
    /// ComAdobeCqDamS7imagingImplIsImageServerComponentProperties members

    /// <summary>
    /// 
    /// </summary>
    ConfigNodePropertyString getTcpPort() const;
    void setTcpPort(ConfigNodePropertyString const& value);
    bool tcpPortIsSet() const;
    void unsetTcpPort();
    /// <summary>
    /// 
    /// </summary>
    ConfigNodePropertyBoolean getAllowRemoteAccess() const;
    void setAllowRemoteAccess(ConfigNodePropertyBoolean const& value);
    bool allowRemoteAccessIsSet() const;
    void unsetAllowRemoteAccess();
    /// <summary>
    /// 
    /// </summary>
    ConfigNodePropertyString getMaxRenderRgnPixels() const;
    void setMaxRenderRgnPixels(ConfigNodePropertyString const& value);
    bool maxRenderRgnPixelsIsSet() const;
    void unsetMaxRenderRgnPixels();
    /// <summary>
    /// 
    /// </summary>
    ConfigNodePropertyString getMaxMessageSize() const;
    void setMaxMessageSize(ConfigNodePropertyString const& value);
    bool maxMessageSizeIsSet() const;
    void unsetMaxMessageSize();
    /// <summary>
    /// 
    /// </summary>
    ConfigNodePropertyInteger getRandomAccessUrlTimeout() const;
    void setRandomAccessUrlTimeout(ConfigNodePropertyInteger const& value);
    bool randomAccessUrlTimeoutIsSet() const;
    void unsetRandomAccessUrlTimeout();
    /// <summary>
    /// 
    /// </summary>
    ConfigNodePropertyInteger getWorkerThreads() const;
    void setWorkerThreads(ConfigNodePropertyInteger const& value);
    bool workerThreadsIsSet() const;
    void unsetWorkerThreads();

protected:
    ConfigNodePropertyString m_TcpPort;
    bool m_TcpPortIsSet;
    ConfigNodePropertyBoolean m_AllowRemoteAccess;
    bool m_AllowRemoteAccessIsSet;
    ConfigNodePropertyString m_MaxRenderRgnPixels;
    bool m_MaxRenderRgnPixelsIsSet;
    ConfigNodePropertyString m_MaxMessageSize;
    bool m_MaxMessageSizeIsSet;
    ConfigNodePropertyInteger m_RandomAccessUrlTimeout;
    bool m_RandomAccessUrlTimeoutIsSet;
    ConfigNodePropertyInteger m_WorkerThreads;
    bool m_WorkerThreadsIsSet;
};

}
}
}
}

#endif /* ComAdobeCqDamS7imagingImplIsImageServerComponentProperties_H_ */
