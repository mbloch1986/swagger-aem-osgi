/**
 * Adobe Experience Manager OSGI config (AEM) API
 * Swagger AEM OSGI is an OpenAPI specification for Adobe Experience Manager (AEM) OSGI Configurations API
 *
 * OpenAPI spec version: 1.0.0-pre.0
 * Contact: opensource@shinesolutions.com
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 3.2.1-SNAPSHOT.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */



#include "ComAdobeCqProjectsPurgeSchedulerProperties.h"

namespace org {
namespace openapitools {
namespace client {
namespace model {

ComAdobeCqProjectsPurgeSchedulerProperties::ComAdobeCqProjectsPurgeSchedulerProperties()
{
    m_Scheduledpurge_nameIsSet = false;
    m_Scheduledpurge_purgeActiveIsSet = false;
    m_Scheduledpurge_templatesIsSet = false;
    m_Scheduledpurge_purgeGroupsIsSet = false;
    m_Scheduledpurge_purgeAssetsIsSet = false;
    m_Scheduledpurge_terminateRunningWorkflowsIsSet = false;
    m_Scheduledpurge_daysoldIsSet = false;
    m_Scheduledpurge_saveThresholdIsSet = false;
}

ComAdobeCqProjectsPurgeSchedulerProperties::~ComAdobeCqProjectsPurgeSchedulerProperties()
{
}

void ComAdobeCqProjectsPurgeSchedulerProperties::validate()
{
    // TODO: implement validation
}

web::json::value ComAdobeCqProjectsPurgeSchedulerProperties::toJson() const
{
    web::json::value val = web::json::value::object();

    if(m_Scheduledpurge_nameIsSet)
    {
        val[utility::conversions::to_string_t("scheduledpurge.name")] = ModelBase::toJson(m_Scheduledpurge_name);
    }
    if(m_Scheduledpurge_purgeActiveIsSet)
    {
        val[utility::conversions::to_string_t("scheduledpurge.purgeActive")] = ModelBase::toJson(m_Scheduledpurge_purgeActive);
    }
    if(m_Scheduledpurge_templatesIsSet)
    {
        val[utility::conversions::to_string_t("scheduledpurge.templates")] = ModelBase::toJson(m_Scheduledpurge_templates);
    }
    if(m_Scheduledpurge_purgeGroupsIsSet)
    {
        val[utility::conversions::to_string_t("scheduledpurge.purgeGroups")] = ModelBase::toJson(m_Scheduledpurge_purgeGroups);
    }
    if(m_Scheduledpurge_purgeAssetsIsSet)
    {
        val[utility::conversions::to_string_t("scheduledpurge.purgeAssets")] = ModelBase::toJson(m_Scheduledpurge_purgeAssets);
    }
    if(m_Scheduledpurge_terminateRunningWorkflowsIsSet)
    {
        val[utility::conversions::to_string_t("scheduledpurge.terminateRunningWorkflows")] = ModelBase::toJson(m_Scheduledpurge_terminateRunningWorkflows);
    }
    if(m_Scheduledpurge_daysoldIsSet)
    {
        val[utility::conversions::to_string_t("scheduledpurge.daysold")] = ModelBase::toJson(m_Scheduledpurge_daysold);
    }
    if(m_Scheduledpurge_saveThresholdIsSet)
    {
        val[utility::conversions::to_string_t("scheduledpurge.saveThreshold")] = ModelBase::toJson(m_Scheduledpurge_saveThreshold);
    }

    return val;
}

void ComAdobeCqProjectsPurgeSchedulerProperties::fromJson(web::json::value& val)
{
    if(val.has_field(utility::conversions::to_string_t("scheduledpurge.name")))
    {
        if(!val[utility::conversions::to_string_t("scheduledpurge.name")].is_null())
        {
            std::shared_ptr<ConfigNodePropertyString> newItem(new ConfigNodePropertyString());
            newItem->fromJson(val[utility::conversions::to_string_t("scheduledpurge.name")]);
            setScheduledpurgeName( newItem );
        }
    }
    if(val.has_field(utility::conversions::to_string_t("scheduledpurge.purgeActive")))
    {
        if(!val[utility::conversions::to_string_t("scheduledpurge.purgeActive")].is_null())
        {
            std::shared_ptr<ConfigNodePropertyBoolean> newItem(new ConfigNodePropertyBoolean());
            newItem->fromJson(val[utility::conversions::to_string_t("scheduledpurge.purgeActive")]);
            setScheduledpurgePurgeActive( newItem );
        }
    }
    if(val.has_field(utility::conversions::to_string_t("scheduledpurge.templates")))
    {
        if(!val[utility::conversions::to_string_t("scheduledpurge.templates")].is_null())
        {
            std::shared_ptr<ConfigNodePropertyArray> newItem(new ConfigNodePropertyArray());
            newItem->fromJson(val[utility::conversions::to_string_t("scheduledpurge.templates")]);
            setScheduledpurgeTemplates( newItem );
        }
    }
    if(val.has_field(utility::conversions::to_string_t("scheduledpurge.purgeGroups")))
    {
        if(!val[utility::conversions::to_string_t("scheduledpurge.purgeGroups")].is_null())
        {
            std::shared_ptr<ConfigNodePropertyBoolean> newItem(new ConfigNodePropertyBoolean());
            newItem->fromJson(val[utility::conversions::to_string_t("scheduledpurge.purgeGroups")]);
            setScheduledpurgePurgeGroups( newItem );
        }
    }
    if(val.has_field(utility::conversions::to_string_t("scheduledpurge.purgeAssets")))
    {
        if(!val[utility::conversions::to_string_t("scheduledpurge.purgeAssets")].is_null())
        {
            std::shared_ptr<ConfigNodePropertyBoolean> newItem(new ConfigNodePropertyBoolean());
            newItem->fromJson(val[utility::conversions::to_string_t("scheduledpurge.purgeAssets")]);
            setScheduledpurgePurgeAssets( newItem );
        }
    }
    if(val.has_field(utility::conversions::to_string_t("scheduledpurge.terminateRunningWorkflows")))
    {
        if(!val[utility::conversions::to_string_t("scheduledpurge.terminateRunningWorkflows")].is_null())
        {
            std::shared_ptr<ConfigNodePropertyBoolean> newItem(new ConfigNodePropertyBoolean());
            newItem->fromJson(val[utility::conversions::to_string_t("scheduledpurge.terminateRunningWorkflows")]);
            setScheduledpurgeTerminateRunningWorkflows( newItem );
        }
    }
    if(val.has_field(utility::conversions::to_string_t("scheduledpurge.daysold")))
    {
        if(!val[utility::conversions::to_string_t("scheduledpurge.daysold")].is_null())
        {
            std::shared_ptr<ConfigNodePropertyInteger> newItem(new ConfigNodePropertyInteger());
            newItem->fromJson(val[utility::conversions::to_string_t("scheduledpurge.daysold")]);
            setScheduledpurgeDaysold( newItem );
        }
    }
    if(val.has_field(utility::conversions::to_string_t("scheduledpurge.saveThreshold")))
    {
        if(!val[utility::conversions::to_string_t("scheduledpurge.saveThreshold")].is_null())
        {
            std::shared_ptr<ConfigNodePropertyInteger> newItem(new ConfigNodePropertyInteger());
            newItem->fromJson(val[utility::conversions::to_string_t("scheduledpurge.saveThreshold")]);
            setScheduledpurgeSaveThreshold( newItem );
        }
    }
}

void ComAdobeCqProjectsPurgeSchedulerProperties::toMultipart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix) const
{
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t("."))
    {
        namePrefix += utility::conversions::to_string_t(".");
    }

    if(m_Scheduledpurge_nameIsSet)
    {
        if (m_Scheduledpurge_name.get())
        {
            m_Scheduledpurge_name->toMultipart(multipart, utility::conversions::to_string_t("scheduledpurge.name."));
        }
    }
    if(m_Scheduledpurge_purgeActiveIsSet)
    {
        if (m_Scheduledpurge_purgeActive.get())
        {
            m_Scheduledpurge_purgeActive->toMultipart(multipart, utility::conversions::to_string_t("scheduledpurge.purgeActive."));
        }
    }
    if(m_Scheduledpurge_templatesIsSet)
    {
        if (m_Scheduledpurge_templates.get())
        {
            m_Scheduledpurge_templates->toMultipart(multipart, utility::conversions::to_string_t("scheduledpurge.templates."));
        }
    }
    if(m_Scheduledpurge_purgeGroupsIsSet)
    {
        if (m_Scheduledpurge_purgeGroups.get())
        {
            m_Scheduledpurge_purgeGroups->toMultipart(multipart, utility::conversions::to_string_t("scheduledpurge.purgeGroups."));
        }
    }
    if(m_Scheduledpurge_purgeAssetsIsSet)
    {
        if (m_Scheduledpurge_purgeAssets.get())
        {
            m_Scheduledpurge_purgeAssets->toMultipart(multipart, utility::conversions::to_string_t("scheduledpurge.purgeAssets."));
        }
    }
    if(m_Scheduledpurge_terminateRunningWorkflowsIsSet)
    {
        if (m_Scheduledpurge_terminateRunningWorkflows.get())
        {
            m_Scheduledpurge_terminateRunningWorkflows->toMultipart(multipart, utility::conversions::to_string_t("scheduledpurge.terminateRunningWorkflows."));
        }
    }
    if(m_Scheduledpurge_daysoldIsSet)
    {
        if (m_Scheduledpurge_daysold.get())
        {
            m_Scheduledpurge_daysold->toMultipart(multipart, utility::conversions::to_string_t("scheduledpurge.daysold."));
        }
    }
    if(m_Scheduledpurge_saveThresholdIsSet)
    {
        if (m_Scheduledpurge_saveThreshold.get())
        {
            m_Scheduledpurge_saveThreshold->toMultipart(multipart, utility::conversions::to_string_t("scheduledpurge.saveThreshold."));
        }
    }
}

void ComAdobeCqProjectsPurgeSchedulerProperties::fromMultiPart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix)
{
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t("."))
    {
        namePrefix += utility::conversions::to_string_t(".");
    }

    if(multipart->hasContent(utility::conversions::to_string_t("scheduledpurge.name")))
    {
        if(multipart->hasContent(utility::conversions::to_string_t("scheduledpurge.name")))
        {
            std::shared_ptr<ConfigNodePropertyString> newItem(new ConfigNodePropertyString());
            newItem->fromMultiPart(multipart, utility::conversions::to_string_t("scheduledpurge.name."));
            setScheduledpurgeName( newItem );
        }
    }
    if(multipart->hasContent(utility::conversions::to_string_t("scheduledpurge.purgeActive")))
    {
        if(multipart->hasContent(utility::conversions::to_string_t("scheduledpurge.purgeActive")))
        {
            std::shared_ptr<ConfigNodePropertyBoolean> newItem(new ConfigNodePropertyBoolean());
            newItem->fromMultiPart(multipart, utility::conversions::to_string_t("scheduledpurge.purgeActive."));
            setScheduledpurgePurgeActive( newItem );
        }
    }
    if(multipart->hasContent(utility::conversions::to_string_t("scheduledpurge.templates")))
    {
        if(multipart->hasContent(utility::conversions::to_string_t("scheduledpurge.templates")))
        {
            std::shared_ptr<ConfigNodePropertyArray> newItem(new ConfigNodePropertyArray());
            newItem->fromMultiPart(multipart, utility::conversions::to_string_t("scheduledpurge.templates."));
            setScheduledpurgeTemplates( newItem );
        }
    }
    if(multipart->hasContent(utility::conversions::to_string_t("scheduledpurge.purgeGroups")))
    {
        if(multipart->hasContent(utility::conversions::to_string_t("scheduledpurge.purgeGroups")))
        {
            std::shared_ptr<ConfigNodePropertyBoolean> newItem(new ConfigNodePropertyBoolean());
            newItem->fromMultiPart(multipart, utility::conversions::to_string_t("scheduledpurge.purgeGroups."));
            setScheduledpurgePurgeGroups( newItem );
        }
    }
    if(multipart->hasContent(utility::conversions::to_string_t("scheduledpurge.purgeAssets")))
    {
        if(multipart->hasContent(utility::conversions::to_string_t("scheduledpurge.purgeAssets")))
        {
            std::shared_ptr<ConfigNodePropertyBoolean> newItem(new ConfigNodePropertyBoolean());
            newItem->fromMultiPart(multipart, utility::conversions::to_string_t("scheduledpurge.purgeAssets."));
            setScheduledpurgePurgeAssets( newItem );
        }
    }
    if(multipart->hasContent(utility::conversions::to_string_t("scheduledpurge.terminateRunningWorkflows")))
    {
        if(multipart->hasContent(utility::conversions::to_string_t("scheduledpurge.terminateRunningWorkflows")))
        {
            std::shared_ptr<ConfigNodePropertyBoolean> newItem(new ConfigNodePropertyBoolean());
            newItem->fromMultiPart(multipart, utility::conversions::to_string_t("scheduledpurge.terminateRunningWorkflows."));
            setScheduledpurgeTerminateRunningWorkflows( newItem );
        }
    }
    if(multipart->hasContent(utility::conversions::to_string_t("scheduledpurge.daysold")))
    {
        if(multipart->hasContent(utility::conversions::to_string_t("scheduledpurge.daysold")))
        {
            std::shared_ptr<ConfigNodePropertyInteger> newItem(new ConfigNodePropertyInteger());
            newItem->fromMultiPart(multipart, utility::conversions::to_string_t("scheduledpurge.daysold."));
            setScheduledpurgeDaysold( newItem );
        }
    }
    if(multipart->hasContent(utility::conversions::to_string_t("scheduledpurge.saveThreshold")))
    {
        if(multipart->hasContent(utility::conversions::to_string_t("scheduledpurge.saveThreshold")))
        {
            std::shared_ptr<ConfigNodePropertyInteger> newItem(new ConfigNodePropertyInteger());
            newItem->fromMultiPart(multipart, utility::conversions::to_string_t("scheduledpurge.saveThreshold."));
            setScheduledpurgeSaveThreshold( newItem );
        }
    }
}

std::shared_ptr<ConfigNodePropertyString> ComAdobeCqProjectsPurgeSchedulerProperties::getScheduledpurgeName() const
{
    return m_Scheduledpurge_name;
}


void ComAdobeCqProjectsPurgeSchedulerProperties::setScheduledpurgeName(std::shared_ptr<ConfigNodePropertyString> value)
{
    m_Scheduledpurge_name = value;
    m_Scheduledpurge_nameIsSet = true;
}
bool ComAdobeCqProjectsPurgeSchedulerProperties::scheduledpurgeNameIsSet() const
{
    return m_Scheduledpurge_nameIsSet;
}

void ComAdobeCqProjectsPurgeSchedulerProperties::unsetScheduledpurge_name()
{
    m_Scheduledpurge_nameIsSet = false;
}

std::shared_ptr<ConfigNodePropertyBoolean> ComAdobeCqProjectsPurgeSchedulerProperties::getScheduledpurgePurgeActive() const
{
    return m_Scheduledpurge_purgeActive;
}


void ComAdobeCqProjectsPurgeSchedulerProperties::setScheduledpurgePurgeActive(std::shared_ptr<ConfigNodePropertyBoolean> value)
{
    m_Scheduledpurge_purgeActive = value;
    m_Scheduledpurge_purgeActiveIsSet = true;
}
bool ComAdobeCqProjectsPurgeSchedulerProperties::scheduledpurgePurgeActiveIsSet() const
{
    return m_Scheduledpurge_purgeActiveIsSet;
}

void ComAdobeCqProjectsPurgeSchedulerProperties::unsetScheduledpurge_purgeActive()
{
    m_Scheduledpurge_purgeActiveIsSet = false;
}

std::shared_ptr<ConfigNodePropertyArray> ComAdobeCqProjectsPurgeSchedulerProperties::getScheduledpurgeTemplates() const
{
    return m_Scheduledpurge_templates;
}


void ComAdobeCqProjectsPurgeSchedulerProperties::setScheduledpurgeTemplates(std::shared_ptr<ConfigNodePropertyArray> value)
{
    m_Scheduledpurge_templates = value;
    m_Scheduledpurge_templatesIsSet = true;
}
bool ComAdobeCqProjectsPurgeSchedulerProperties::scheduledpurgeTemplatesIsSet() const
{
    return m_Scheduledpurge_templatesIsSet;
}

void ComAdobeCqProjectsPurgeSchedulerProperties::unsetScheduledpurge_templates()
{
    m_Scheduledpurge_templatesIsSet = false;
}

std::shared_ptr<ConfigNodePropertyBoolean> ComAdobeCqProjectsPurgeSchedulerProperties::getScheduledpurgePurgeGroups() const
{
    return m_Scheduledpurge_purgeGroups;
}


void ComAdobeCqProjectsPurgeSchedulerProperties::setScheduledpurgePurgeGroups(std::shared_ptr<ConfigNodePropertyBoolean> value)
{
    m_Scheduledpurge_purgeGroups = value;
    m_Scheduledpurge_purgeGroupsIsSet = true;
}
bool ComAdobeCqProjectsPurgeSchedulerProperties::scheduledpurgePurgeGroupsIsSet() const
{
    return m_Scheduledpurge_purgeGroupsIsSet;
}

void ComAdobeCqProjectsPurgeSchedulerProperties::unsetScheduledpurge_purgeGroups()
{
    m_Scheduledpurge_purgeGroupsIsSet = false;
}

std::shared_ptr<ConfigNodePropertyBoolean> ComAdobeCqProjectsPurgeSchedulerProperties::getScheduledpurgePurgeAssets() const
{
    return m_Scheduledpurge_purgeAssets;
}


void ComAdobeCqProjectsPurgeSchedulerProperties::setScheduledpurgePurgeAssets(std::shared_ptr<ConfigNodePropertyBoolean> value)
{
    m_Scheduledpurge_purgeAssets = value;
    m_Scheduledpurge_purgeAssetsIsSet = true;
}
bool ComAdobeCqProjectsPurgeSchedulerProperties::scheduledpurgePurgeAssetsIsSet() const
{
    return m_Scheduledpurge_purgeAssetsIsSet;
}

void ComAdobeCqProjectsPurgeSchedulerProperties::unsetScheduledpurge_purgeAssets()
{
    m_Scheduledpurge_purgeAssetsIsSet = false;
}

std::shared_ptr<ConfigNodePropertyBoolean> ComAdobeCqProjectsPurgeSchedulerProperties::getScheduledpurgeTerminateRunningWorkflows() const
{
    return m_Scheduledpurge_terminateRunningWorkflows;
}


void ComAdobeCqProjectsPurgeSchedulerProperties::setScheduledpurgeTerminateRunningWorkflows(std::shared_ptr<ConfigNodePropertyBoolean> value)
{
    m_Scheduledpurge_terminateRunningWorkflows = value;
    m_Scheduledpurge_terminateRunningWorkflowsIsSet = true;
}
bool ComAdobeCqProjectsPurgeSchedulerProperties::scheduledpurgeTerminateRunningWorkflowsIsSet() const
{
    return m_Scheduledpurge_terminateRunningWorkflowsIsSet;
}

void ComAdobeCqProjectsPurgeSchedulerProperties::unsetScheduledpurge_terminateRunningWorkflows()
{
    m_Scheduledpurge_terminateRunningWorkflowsIsSet = false;
}

std::shared_ptr<ConfigNodePropertyInteger> ComAdobeCqProjectsPurgeSchedulerProperties::getScheduledpurgeDaysold() const
{
    return m_Scheduledpurge_daysold;
}


void ComAdobeCqProjectsPurgeSchedulerProperties::setScheduledpurgeDaysold(std::shared_ptr<ConfigNodePropertyInteger> value)
{
    m_Scheduledpurge_daysold = value;
    m_Scheduledpurge_daysoldIsSet = true;
}
bool ComAdobeCqProjectsPurgeSchedulerProperties::scheduledpurgeDaysoldIsSet() const
{
    return m_Scheduledpurge_daysoldIsSet;
}

void ComAdobeCqProjectsPurgeSchedulerProperties::unsetScheduledpurge_daysold()
{
    m_Scheduledpurge_daysoldIsSet = false;
}

std::shared_ptr<ConfigNodePropertyInteger> ComAdobeCqProjectsPurgeSchedulerProperties::getScheduledpurgeSaveThreshold() const
{
    return m_Scheduledpurge_saveThreshold;
}


void ComAdobeCqProjectsPurgeSchedulerProperties::setScheduledpurgeSaveThreshold(std::shared_ptr<ConfigNodePropertyInteger> value)
{
    m_Scheduledpurge_saveThreshold = value;
    m_Scheduledpurge_saveThresholdIsSet = true;
}
bool ComAdobeCqProjectsPurgeSchedulerProperties::scheduledpurgeSaveThresholdIsSet() const
{
    return m_Scheduledpurge_saveThresholdIsSet;
}

void ComAdobeCqProjectsPurgeSchedulerProperties::unsetScheduledpurge_saveThreshold()
{
    m_Scheduledpurge_saveThresholdIsSet = false;
}

}
}
}
}

