/* 
 * Adobe Experience Manager OSGI config (AEM) API
 *
 * Swagger AEM OSGI is an OpenAPI specification for Adobe Experience Manager (AEM) OSGI Configurations API
 *
 * OpenAPI spec version: 1.0.0-pre.0
 * Contact: opensource@shinesolutions.com
 * Generated by: https://openapi-generator.tech
 */


#[allow(unused_imports)]
use serde_json::Value;

#[derive(Debug, Serialize, Deserialize)]
pub struct ComAdobeGraniteOffloadingImplTransporterOffloadingDefaultTranspoProperties {
  #[serde(rename = "default.transport.agent-to-worker.prefix")]
  default_transport_agent_to_worker_prefix: Option<::models::ConfigNodePropertyString>,
  #[serde(rename = "default.transport.agent-to-master.prefix")]
  default_transport_agent_to_master_prefix: Option<::models::ConfigNodePropertyString>,
  #[serde(rename = "default.transport.input.package")]
  default_transport_input_package: Option<::models::ConfigNodePropertyString>,
  #[serde(rename = "default.transport.output.package")]
  default_transport_output_package: Option<::models::ConfigNodePropertyString>,
  #[serde(rename = "default.transport.replication.synchronous")]
  default_transport_replication_synchronous: Option<::models::ConfigNodePropertyBoolean>,
  #[serde(rename = "default.transport.contentpackage")]
  default_transport_contentpackage: Option<::models::ConfigNodePropertyBoolean>,
  #[serde(rename = "offloading.transporter.default.enabled")]
  offloading_transporter_default_enabled: Option<::models::ConfigNodePropertyBoolean>
}

impl ComAdobeGraniteOffloadingImplTransporterOffloadingDefaultTranspoProperties {
  pub fn new() -> ComAdobeGraniteOffloadingImplTransporterOffloadingDefaultTranspoProperties {
    ComAdobeGraniteOffloadingImplTransporterOffloadingDefaultTranspoProperties {
      default_transport_agent_to_worker_prefix: None,
      default_transport_agent_to_master_prefix: None,
      default_transport_input_package: None,
      default_transport_output_package: None,
      default_transport_replication_synchronous: None,
      default_transport_contentpackage: None,
      offloading_transporter_default_enabled: None
    }
  }

  pub fn set_default_transport_agent_to_worker_prefix(&mut self, default_transport_agent_to_worker_prefix: ::models::ConfigNodePropertyString) {
    self.default_transport_agent_to_worker_prefix = Some(default_transport_agent_to_worker_prefix);
  }

  pub fn with_default_transport_agent_to_worker_prefix(mut self, default_transport_agent_to_worker_prefix: ::models::ConfigNodePropertyString) -> ComAdobeGraniteOffloadingImplTransporterOffloadingDefaultTranspoProperties {
    self.default_transport_agent_to_worker_prefix = Some(default_transport_agent_to_worker_prefix);
    self
  }

  pub fn default_transport_agent_to_worker_prefix(&self) -> Option<&::models::ConfigNodePropertyString> {
    self.default_transport_agent_to_worker_prefix.as_ref()
  }

  pub fn reset_default_transport_agent_to_worker_prefix(&mut self) {
    self.default_transport_agent_to_worker_prefix = None;
  }

  pub fn set_default_transport_agent_to_master_prefix(&mut self, default_transport_agent_to_master_prefix: ::models::ConfigNodePropertyString) {
    self.default_transport_agent_to_master_prefix = Some(default_transport_agent_to_master_prefix);
  }

  pub fn with_default_transport_agent_to_master_prefix(mut self, default_transport_agent_to_master_prefix: ::models::ConfigNodePropertyString) -> ComAdobeGraniteOffloadingImplTransporterOffloadingDefaultTranspoProperties {
    self.default_transport_agent_to_master_prefix = Some(default_transport_agent_to_master_prefix);
    self
  }

  pub fn default_transport_agent_to_master_prefix(&self) -> Option<&::models::ConfigNodePropertyString> {
    self.default_transport_agent_to_master_prefix.as_ref()
  }

  pub fn reset_default_transport_agent_to_master_prefix(&mut self) {
    self.default_transport_agent_to_master_prefix = None;
  }

  pub fn set_default_transport_input_package(&mut self, default_transport_input_package: ::models::ConfigNodePropertyString) {
    self.default_transport_input_package = Some(default_transport_input_package);
  }

  pub fn with_default_transport_input_package(mut self, default_transport_input_package: ::models::ConfigNodePropertyString) -> ComAdobeGraniteOffloadingImplTransporterOffloadingDefaultTranspoProperties {
    self.default_transport_input_package = Some(default_transport_input_package);
    self
  }

  pub fn default_transport_input_package(&self) -> Option<&::models::ConfigNodePropertyString> {
    self.default_transport_input_package.as_ref()
  }

  pub fn reset_default_transport_input_package(&mut self) {
    self.default_transport_input_package = None;
  }

  pub fn set_default_transport_output_package(&mut self, default_transport_output_package: ::models::ConfigNodePropertyString) {
    self.default_transport_output_package = Some(default_transport_output_package);
  }

  pub fn with_default_transport_output_package(mut self, default_transport_output_package: ::models::ConfigNodePropertyString) -> ComAdobeGraniteOffloadingImplTransporterOffloadingDefaultTranspoProperties {
    self.default_transport_output_package = Some(default_transport_output_package);
    self
  }

  pub fn default_transport_output_package(&self) -> Option<&::models::ConfigNodePropertyString> {
    self.default_transport_output_package.as_ref()
  }

  pub fn reset_default_transport_output_package(&mut self) {
    self.default_transport_output_package = None;
  }

  pub fn set_default_transport_replication_synchronous(&mut self, default_transport_replication_synchronous: ::models::ConfigNodePropertyBoolean) {
    self.default_transport_replication_synchronous = Some(default_transport_replication_synchronous);
  }

  pub fn with_default_transport_replication_synchronous(mut self, default_transport_replication_synchronous: ::models::ConfigNodePropertyBoolean) -> ComAdobeGraniteOffloadingImplTransporterOffloadingDefaultTranspoProperties {
    self.default_transport_replication_synchronous = Some(default_transport_replication_synchronous);
    self
  }

  pub fn default_transport_replication_synchronous(&self) -> Option<&::models::ConfigNodePropertyBoolean> {
    self.default_transport_replication_synchronous.as_ref()
  }

  pub fn reset_default_transport_replication_synchronous(&mut self) {
    self.default_transport_replication_synchronous = None;
  }

  pub fn set_default_transport_contentpackage(&mut self, default_transport_contentpackage: ::models::ConfigNodePropertyBoolean) {
    self.default_transport_contentpackage = Some(default_transport_contentpackage);
  }

  pub fn with_default_transport_contentpackage(mut self, default_transport_contentpackage: ::models::ConfigNodePropertyBoolean) -> ComAdobeGraniteOffloadingImplTransporterOffloadingDefaultTranspoProperties {
    self.default_transport_contentpackage = Some(default_transport_contentpackage);
    self
  }

  pub fn default_transport_contentpackage(&self) -> Option<&::models::ConfigNodePropertyBoolean> {
    self.default_transport_contentpackage.as_ref()
  }

  pub fn reset_default_transport_contentpackage(&mut self) {
    self.default_transport_contentpackage = None;
  }

  pub fn set_offloading_transporter_default_enabled(&mut self, offloading_transporter_default_enabled: ::models::ConfigNodePropertyBoolean) {
    self.offloading_transporter_default_enabled = Some(offloading_transporter_default_enabled);
  }

  pub fn with_offloading_transporter_default_enabled(mut self, offloading_transporter_default_enabled: ::models::ConfigNodePropertyBoolean) -> ComAdobeGraniteOffloadingImplTransporterOffloadingDefaultTranspoProperties {
    self.offloading_transporter_default_enabled = Some(offloading_transporter_default_enabled);
    self
  }

  pub fn offloading_transporter_default_enabled(&self) -> Option<&::models::ConfigNodePropertyBoolean> {
    self.offloading_transporter_default_enabled.as_ref()
  }

  pub fn reset_offloading_transporter_default_enabled(&mut self) {
    self.offloading_transporter_default_enabled = None;
  }

}



