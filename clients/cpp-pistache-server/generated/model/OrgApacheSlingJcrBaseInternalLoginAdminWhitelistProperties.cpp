/**
* Adobe Experience Manager OSGI config (AEM) API
* Swagger AEM OSGI is an OpenAPI specification for Adobe Experience Manager (AEM) OSGI Configurations API
*
* OpenAPI spec version: 1.0.0-pre.0
* Contact: opensource@shinesolutions.com
*
* NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
* https://openapi-generator.tech
* Do not edit the class manually.
*/


#include "OrgApacheSlingJcrBaseInternalLoginAdminWhitelistProperties.h"

namespace org {
namespace openapitools {
namespace server {
namespace model {

OrgApacheSlingJcrBaseInternalLoginAdminWhitelistProperties::OrgApacheSlingJcrBaseInternalLoginAdminWhitelistProperties()
{
    m_Whitelist_bypassIsSet = false;
    m_Whitelist_bundles_regexpIsSet = false;
    
}

OrgApacheSlingJcrBaseInternalLoginAdminWhitelistProperties::~OrgApacheSlingJcrBaseInternalLoginAdminWhitelistProperties()
{
}

void OrgApacheSlingJcrBaseInternalLoginAdminWhitelistProperties::validate()
{
    // TODO: implement validation
}

nlohmann::json OrgApacheSlingJcrBaseInternalLoginAdminWhitelistProperties::toJson() const
{
    nlohmann::json val = nlohmann::json::object();

    if(m_Whitelist_bypassIsSet)
    {
        val["whitelist.bypass"] = ModelBase::toJson(m_Whitelist_bypass);
    }
    if(m_Whitelist_bundles_regexpIsSet)
    {
        val["whitelist.bundles.regexp"] = ModelBase::toJson(m_Whitelist_bundles_regexp);
    }
    

    return val;
}

void OrgApacheSlingJcrBaseInternalLoginAdminWhitelistProperties::fromJson(nlohmann::json& val)
{
    if(val.find("whitelist.bypass") != val.end())
    {
        if(!val["whitelist.bypass"].is_null())
        {
            ConfigNodePropertyBoolean newItem;
            newItem.fromJson(val["whitelist.bypass"]);
            setWhitelistBypass( newItem );
        }
        
    }
    if(val.find("whitelist.bundles.regexp") != val.end())
    {
        if(!val["whitelist.bundles.regexp"].is_null())
        {
            ConfigNodePropertyString newItem;
            newItem.fromJson(val["whitelist.bundles.regexp"]);
            setWhitelistBundlesRegexp( newItem );
        }
        
    }
    
}


ConfigNodePropertyBoolean OrgApacheSlingJcrBaseInternalLoginAdminWhitelistProperties::getWhitelistBypass() const
{
    return m_Whitelist_bypass;
}
void OrgApacheSlingJcrBaseInternalLoginAdminWhitelistProperties::setWhitelistBypass(ConfigNodePropertyBoolean const& value)
{
    m_Whitelist_bypass = value;
    m_Whitelist_bypassIsSet = true;
}
bool OrgApacheSlingJcrBaseInternalLoginAdminWhitelistProperties::whitelistBypassIsSet() const
{
    return m_Whitelist_bypassIsSet;
}
void OrgApacheSlingJcrBaseInternalLoginAdminWhitelistProperties::unsetWhitelist_bypass()
{
    m_Whitelist_bypassIsSet = false;
}
ConfigNodePropertyString OrgApacheSlingJcrBaseInternalLoginAdminWhitelistProperties::getWhitelistBundlesRegexp() const
{
    return m_Whitelist_bundles_regexp;
}
void OrgApacheSlingJcrBaseInternalLoginAdminWhitelistProperties::setWhitelistBundlesRegexp(ConfigNodePropertyString const& value)
{
    m_Whitelist_bundles_regexp = value;
    m_Whitelist_bundles_regexpIsSet = true;
}
bool OrgApacheSlingJcrBaseInternalLoginAdminWhitelistProperties::whitelistBundlesRegexpIsSet() const
{
    return m_Whitelist_bundles_regexpIsSet;
}
void OrgApacheSlingJcrBaseInternalLoginAdminWhitelistProperties::unsetWhitelist_bundles_regexp()
{
    m_Whitelist_bundles_regexpIsSet = false;
}

}
}
}
}

