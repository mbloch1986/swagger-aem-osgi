/* 
 * Adobe Experience Manager OSGI config (AEM) API
 *
 * Swagger AEM OSGI is an OpenAPI specification for Adobe Experience Manager (AEM) OSGI Configurations API
 *
 * OpenAPI spec version: 1.0.0-pre.0
 * Contact: opensource@shinesolutions.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Org.OpenAPITools.Client.OpenAPIDateConverter;

namespace Org.OpenAPITools.Model
{
    /// <summary>
    /// OrgApacheSlingCommonsThreadsImplDefaultThreadPoolFactoryProperties
    /// </summary>
    [DataContract]
    public partial class OrgApacheSlingCommonsThreadsImplDefaultThreadPoolFactoryProperties :  IEquatable<OrgApacheSlingCommonsThreadsImplDefaultThreadPoolFactoryProperties>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="OrgApacheSlingCommonsThreadsImplDefaultThreadPoolFactoryProperties" /> class.
        /// </summary>
        /// <param name="name">name.</param>
        /// <param name="minPoolSize">minPoolSize.</param>
        /// <param name="maxPoolSize">maxPoolSize.</param>
        /// <param name="queueSize">queueSize.</param>
        /// <param name="maxThreadAge">maxThreadAge.</param>
        /// <param name="keepAliveTime">keepAliveTime.</param>
        /// <param name="blockPolicy">blockPolicy.</param>
        /// <param name="shutdownGraceful">shutdownGraceful.</param>
        /// <param name="daemon">daemon.</param>
        /// <param name="shutdownWaitTime">shutdownWaitTime.</param>
        /// <param name="priority">priority.</param>
        public OrgApacheSlingCommonsThreadsImplDefaultThreadPoolFactoryProperties(ConfigNodePropertyString name = default(ConfigNodePropertyString), ConfigNodePropertyInteger minPoolSize = default(ConfigNodePropertyInteger), ConfigNodePropertyInteger maxPoolSize = default(ConfigNodePropertyInteger), ConfigNodePropertyInteger queueSize = default(ConfigNodePropertyInteger), ConfigNodePropertyInteger maxThreadAge = default(ConfigNodePropertyInteger), ConfigNodePropertyInteger keepAliveTime = default(ConfigNodePropertyInteger), ConfigNodePropertyDropDown blockPolicy = default(ConfigNodePropertyDropDown), ConfigNodePropertyBoolean shutdownGraceful = default(ConfigNodePropertyBoolean), ConfigNodePropertyBoolean daemon = default(ConfigNodePropertyBoolean), ConfigNodePropertyInteger shutdownWaitTime = default(ConfigNodePropertyInteger), ConfigNodePropertyDropDown priority = default(ConfigNodePropertyDropDown))
        {
            this.Name = name;
            this.MinPoolSize = minPoolSize;
            this.MaxPoolSize = maxPoolSize;
            this.QueueSize = queueSize;
            this.MaxThreadAge = maxThreadAge;
            this.KeepAliveTime = keepAliveTime;
            this.BlockPolicy = blockPolicy;
            this.ShutdownGraceful = shutdownGraceful;
            this.Daemon = daemon;
            this.ShutdownWaitTime = shutdownWaitTime;
            this.Priority = priority;
        }
        
        /// <summary>
        /// Gets or Sets Name
        /// </summary>
        [DataMember(Name="name", EmitDefaultValue=false)]
        public ConfigNodePropertyString Name { get; set; }

        /// <summary>
        /// Gets or Sets MinPoolSize
        /// </summary>
        [DataMember(Name="minPoolSize", EmitDefaultValue=false)]
        public ConfigNodePropertyInteger MinPoolSize { get; set; }

        /// <summary>
        /// Gets or Sets MaxPoolSize
        /// </summary>
        [DataMember(Name="maxPoolSize", EmitDefaultValue=false)]
        public ConfigNodePropertyInteger MaxPoolSize { get; set; }

        /// <summary>
        /// Gets or Sets QueueSize
        /// </summary>
        [DataMember(Name="queueSize", EmitDefaultValue=false)]
        public ConfigNodePropertyInteger QueueSize { get; set; }

        /// <summary>
        /// Gets or Sets MaxThreadAge
        /// </summary>
        [DataMember(Name="maxThreadAge", EmitDefaultValue=false)]
        public ConfigNodePropertyInteger MaxThreadAge { get; set; }

        /// <summary>
        /// Gets or Sets KeepAliveTime
        /// </summary>
        [DataMember(Name="keepAliveTime", EmitDefaultValue=false)]
        public ConfigNodePropertyInteger KeepAliveTime { get; set; }

        /// <summary>
        /// Gets or Sets BlockPolicy
        /// </summary>
        [DataMember(Name="blockPolicy", EmitDefaultValue=false)]
        public ConfigNodePropertyDropDown BlockPolicy { get; set; }

        /// <summary>
        /// Gets or Sets ShutdownGraceful
        /// </summary>
        [DataMember(Name="shutdownGraceful", EmitDefaultValue=false)]
        public ConfigNodePropertyBoolean ShutdownGraceful { get; set; }

        /// <summary>
        /// Gets or Sets Daemon
        /// </summary>
        [DataMember(Name="daemon", EmitDefaultValue=false)]
        public ConfigNodePropertyBoolean Daemon { get; set; }

        /// <summary>
        /// Gets or Sets ShutdownWaitTime
        /// </summary>
        [DataMember(Name="shutdownWaitTime", EmitDefaultValue=false)]
        public ConfigNodePropertyInteger ShutdownWaitTime { get; set; }

        /// <summary>
        /// Gets or Sets Priority
        /// </summary>
        [DataMember(Name="priority", EmitDefaultValue=false)]
        public ConfigNodePropertyDropDown Priority { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class OrgApacheSlingCommonsThreadsImplDefaultThreadPoolFactoryProperties {\n");
            sb.Append("  Name: ").Append(Name).Append("\n");
            sb.Append("  MinPoolSize: ").Append(MinPoolSize).Append("\n");
            sb.Append("  MaxPoolSize: ").Append(MaxPoolSize).Append("\n");
            sb.Append("  QueueSize: ").Append(QueueSize).Append("\n");
            sb.Append("  MaxThreadAge: ").Append(MaxThreadAge).Append("\n");
            sb.Append("  KeepAliveTime: ").Append(KeepAliveTime).Append("\n");
            sb.Append("  BlockPolicy: ").Append(BlockPolicy).Append("\n");
            sb.Append("  ShutdownGraceful: ").Append(ShutdownGraceful).Append("\n");
            sb.Append("  Daemon: ").Append(Daemon).Append("\n");
            sb.Append("  ShutdownWaitTime: ").Append(ShutdownWaitTime).Append("\n");
            sb.Append("  Priority: ").Append(Priority).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as OrgApacheSlingCommonsThreadsImplDefaultThreadPoolFactoryProperties);
        }

        /// <summary>
        /// Returns true if OrgApacheSlingCommonsThreadsImplDefaultThreadPoolFactoryProperties instances are equal
        /// </summary>
        /// <param name="input">Instance of OrgApacheSlingCommonsThreadsImplDefaultThreadPoolFactoryProperties to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(OrgApacheSlingCommonsThreadsImplDefaultThreadPoolFactoryProperties input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Name == input.Name ||
                    (this.Name != null &&
                    this.Name.Equals(input.Name))
                ) && 
                (
                    this.MinPoolSize == input.MinPoolSize ||
                    (this.MinPoolSize != null &&
                    this.MinPoolSize.Equals(input.MinPoolSize))
                ) && 
                (
                    this.MaxPoolSize == input.MaxPoolSize ||
                    (this.MaxPoolSize != null &&
                    this.MaxPoolSize.Equals(input.MaxPoolSize))
                ) && 
                (
                    this.QueueSize == input.QueueSize ||
                    (this.QueueSize != null &&
                    this.QueueSize.Equals(input.QueueSize))
                ) && 
                (
                    this.MaxThreadAge == input.MaxThreadAge ||
                    (this.MaxThreadAge != null &&
                    this.MaxThreadAge.Equals(input.MaxThreadAge))
                ) && 
                (
                    this.KeepAliveTime == input.KeepAliveTime ||
                    (this.KeepAliveTime != null &&
                    this.KeepAliveTime.Equals(input.KeepAliveTime))
                ) && 
                (
                    this.BlockPolicy == input.BlockPolicy ||
                    (this.BlockPolicy != null &&
                    this.BlockPolicy.Equals(input.BlockPolicy))
                ) && 
                (
                    this.ShutdownGraceful == input.ShutdownGraceful ||
                    (this.ShutdownGraceful != null &&
                    this.ShutdownGraceful.Equals(input.ShutdownGraceful))
                ) && 
                (
                    this.Daemon == input.Daemon ||
                    (this.Daemon != null &&
                    this.Daemon.Equals(input.Daemon))
                ) && 
                (
                    this.ShutdownWaitTime == input.ShutdownWaitTime ||
                    (this.ShutdownWaitTime != null &&
                    this.ShutdownWaitTime.Equals(input.ShutdownWaitTime))
                ) && 
                (
                    this.Priority == input.Priority ||
                    (this.Priority != null &&
                    this.Priority.Equals(input.Priority))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Name != null)
                    hashCode = hashCode * 59 + this.Name.GetHashCode();
                if (this.MinPoolSize != null)
                    hashCode = hashCode * 59 + this.MinPoolSize.GetHashCode();
                if (this.MaxPoolSize != null)
                    hashCode = hashCode * 59 + this.MaxPoolSize.GetHashCode();
                if (this.QueueSize != null)
                    hashCode = hashCode * 59 + this.QueueSize.GetHashCode();
                if (this.MaxThreadAge != null)
                    hashCode = hashCode * 59 + this.MaxThreadAge.GetHashCode();
                if (this.KeepAliveTime != null)
                    hashCode = hashCode * 59 + this.KeepAliveTime.GetHashCode();
                if (this.BlockPolicy != null)
                    hashCode = hashCode * 59 + this.BlockPolicy.GetHashCode();
                if (this.ShutdownGraceful != null)
                    hashCode = hashCode * 59 + this.ShutdownGraceful.GetHashCode();
                if (this.Daemon != null)
                    hashCode = hashCode * 59 + this.Daemon.GetHashCode();
                if (this.ShutdownWaitTime != null)
                    hashCode = hashCode * 59 + this.ShutdownWaitTime.GetHashCode();
                if (this.Priority != null)
                    hashCode = hashCode * 59 + this.Priority.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
