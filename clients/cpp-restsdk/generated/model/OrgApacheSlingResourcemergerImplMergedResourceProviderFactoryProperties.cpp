/**
 * Adobe Experience Manager OSGI config (AEM) API
 * Swagger AEM OSGI is an OpenAPI specification for Adobe Experience Manager (AEM) OSGI Configurations API
 *
 * OpenAPI spec version: 1.0.0-pre.0
 * Contact: opensource@shinesolutions.com
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 3.2.1-SNAPSHOT.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */



#include "OrgApacheSlingResourcemergerImplMergedResourceProviderFactoryProperties.h"

namespace org {
namespace openapitools {
namespace client {
namespace model {

OrgApacheSlingResourcemergerImplMergedResourceProviderFactoryProperties::OrgApacheSlingResourcemergerImplMergedResourceProviderFactoryProperties()
{
    m_Merge_rootIsSet = false;
    m_Merge_readOnlyIsSet = false;
}

OrgApacheSlingResourcemergerImplMergedResourceProviderFactoryProperties::~OrgApacheSlingResourcemergerImplMergedResourceProviderFactoryProperties()
{
}

void OrgApacheSlingResourcemergerImplMergedResourceProviderFactoryProperties::validate()
{
    // TODO: implement validation
}

web::json::value OrgApacheSlingResourcemergerImplMergedResourceProviderFactoryProperties::toJson() const
{
    web::json::value val = web::json::value::object();

    if(m_Merge_rootIsSet)
    {
        val[utility::conversions::to_string_t("merge.root")] = ModelBase::toJson(m_Merge_root);
    }
    if(m_Merge_readOnlyIsSet)
    {
        val[utility::conversions::to_string_t("merge.readOnly")] = ModelBase::toJson(m_Merge_readOnly);
    }

    return val;
}

void OrgApacheSlingResourcemergerImplMergedResourceProviderFactoryProperties::fromJson(web::json::value& val)
{
    if(val.has_field(utility::conversions::to_string_t("merge.root")))
    {
        if(!val[utility::conversions::to_string_t("merge.root")].is_null())
        {
            std::shared_ptr<ConfigNodePropertyString> newItem(new ConfigNodePropertyString());
            newItem->fromJson(val[utility::conversions::to_string_t("merge.root")]);
            setMergeRoot( newItem );
        }
    }
    if(val.has_field(utility::conversions::to_string_t("merge.readOnly")))
    {
        if(!val[utility::conversions::to_string_t("merge.readOnly")].is_null())
        {
            std::shared_ptr<ConfigNodePropertyBoolean> newItem(new ConfigNodePropertyBoolean());
            newItem->fromJson(val[utility::conversions::to_string_t("merge.readOnly")]);
            setMergeReadOnly( newItem );
        }
    }
}

void OrgApacheSlingResourcemergerImplMergedResourceProviderFactoryProperties::toMultipart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix) const
{
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t("."))
    {
        namePrefix += utility::conversions::to_string_t(".");
    }

    if(m_Merge_rootIsSet)
    {
        if (m_Merge_root.get())
        {
            m_Merge_root->toMultipart(multipart, utility::conversions::to_string_t("merge.root."));
        }
    }
    if(m_Merge_readOnlyIsSet)
    {
        if (m_Merge_readOnly.get())
        {
            m_Merge_readOnly->toMultipart(multipart, utility::conversions::to_string_t("merge.readOnly."));
        }
    }
}

void OrgApacheSlingResourcemergerImplMergedResourceProviderFactoryProperties::fromMultiPart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix)
{
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t("."))
    {
        namePrefix += utility::conversions::to_string_t(".");
    }

    if(multipart->hasContent(utility::conversions::to_string_t("merge.root")))
    {
        if(multipart->hasContent(utility::conversions::to_string_t("merge.root")))
        {
            std::shared_ptr<ConfigNodePropertyString> newItem(new ConfigNodePropertyString());
            newItem->fromMultiPart(multipart, utility::conversions::to_string_t("merge.root."));
            setMergeRoot( newItem );
        }
    }
    if(multipart->hasContent(utility::conversions::to_string_t("merge.readOnly")))
    {
        if(multipart->hasContent(utility::conversions::to_string_t("merge.readOnly")))
        {
            std::shared_ptr<ConfigNodePropertyBoolean> newItem(new ConfigNodePropertyBoolean());
            newItem->fromMultiPart(multipart, utility::conversions::to_string_t("merge.readOnly."));
            setMergeReadOnly( newItem );
        }
    }
}

std::shared_ptr<ConfigNodePropertyString> OrgApacheSlingResourcemergerImplMergedResourceProviderFactoryProperties::getMergeRoot() const
{
    return m_Merge_root;
}


void OrgApacheSlingResourcemergerImplMergedResourceProviderFactoryProperties::setMergeRoot(std::shared_ptr<ConfigNodePropertyString> value)
{
    m_Merge_root = value;
    m_Merge_rootIsSet = true;
}
bool OrgApacheSlingResourcemergerImplMergedResourceProviderFactoryProperties::mergeRootIsSet() const
{
    return m_Merge_rootIsSet;
}

void OrgApacheSlingResourcemergerImplMergedResourceProviderFactoryProperties::unsetMerge_root()
{
    m_Merge_rootIsSet = false;
}

std::shared_ptr<ConfigNodePropertyBoolean> OrgApacheSlingResourcemergerImplMergedResourceProviderFactoryProperties::getMergeReadOnly() const
{
    return m_Merge_readOnly;
}


void OrgApacheSlingResourcemergerImplMergedResourceProviderFactoryProperties::setMergeReadOnly(std::shared_ptr<ConfigNodePropertyBoolean> value)
{
    m_Merge_readOnly = value;
    m_Merge_readOnlyIsSet = true;
}
bool OrgApacheSlingResourcemergerImplMergedResourceProviderFactoryProperties::mergeReadOnlyIsSet() const
{
    return m_Merge_readOnlyIsSet;
}

void OrgApacheSlingResourcemergerImplMergedResourceProviderFactoryProperties::unsetMerge_readOnly()
{
    m_Merge_readOnlyIsSet = false;
}

}
}
}
}

