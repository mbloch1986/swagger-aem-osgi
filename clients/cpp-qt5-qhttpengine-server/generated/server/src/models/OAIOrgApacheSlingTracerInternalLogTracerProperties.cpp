/**
 * Adobe Experience Manager OSGI config (AEM) API
 * Swagger AEM OSGI is an OpenAPI specification for Adobe Experience Manager (AEM) OSGI Configurations API
 *
 * OpenAPI spec version: 1.0.0-pre.0
 * Contact: opensource@shinesolutions.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


#include "OAIOrgApacheSlingTracerInternalLogTracerProperties.h"

#include "OAIHelpers.h"

#include <QJsonDocument>
#include <QJsonArray>
#include <QObject>
#include <QDebug>

namespace OpenAPI {

OAIOrgApacheSlingTracerInternalLogTracerProperties::OAIOrgApacheSlingTracerInternalLogTracerProperties(QString json) {
    this->fromJson(json);
}

OAIOrgApacheSlingTracerInternalLogTracerProperties::OAIOrgApacheSlingTracerInternalLogTracerProperties() {
    this->init();
}

OAIOrgApacheSlingTracerInternalLogTracerProperties::~OAIOrgApacheSlingTracerInternalLogTracerProperties() {
    
}

void
OAIOrgApacheSlingTracerInternalLogTracerProperties::init() {
    m_tracer_sets_isSet = false;
    m_enabled_isSet = false;
    m_servlet_enabled_isSet = false;
    m_recording_cache_size_in_mb_isSet = false;
    m_recording_cache_duration_in_secs_isSet = false;
    m_recording_compression_enabled_isSet = false;
    m_gzip_response_isSet = false;
}

void
OAIOrgApacheSlingTracerInternalLogTracerProperties::fromJson(QString jsonString) {
    QByteArray array (jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void
OAIOrgApacheSlingTracerInternalLogTracerProperties::fromJsonObject(QJsonObject json) {
    ::OpenAPI::fromJsonValue(tracer_sets, json[QString("tracerSets")]);
    
    ::OpenAPI::fromJsonValue(enabled, json[QString("enabled")]);
    
    ::OpenAPI::fromJsonValue(servlet_enabled, json[QString("servletEnabled")]);
    
    ::OpenAPI::fromJsonValue(recording_cache_size_in_mb, json[QString("recordingCacheSizeInMB")]);
    
    ::OpenAPI::fromJsonValue(recording_cache_duration_in_secs, json[QString("recordingCacheDurationInSecs")]);
    
    ::OpenAPI::fromJsonValue(recording_compression_enabled, json[QString("recordingCompressionEnabled")]);
    
    ::OpenAPI::fromJsonValue(gzip_response, json[QString("gzipResponse")]);
    
}

QString
OAIOrgApacheSlingTracerInternalLogTracerProperties::asJson () const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject
OAIOrgApacheSlingTracerInternalLogTracerProperties::asJsonObject() const {
    QJsonObject obj;
	if(tracer_sets.isSet()){
        obj.insert(QString("tracerSets"), ::OpenAPI::toJsonValue(tracer_sets));
    }
	if(enabled.isSet()){
        obj.insert(QString("enabled"), ::OpenAPI::toJsonValue(enabled));
    }
	if(servlet_enabled.isSet()){
        obj.insert(QString("servletEnabled"), ::OpenAPI::toJsonValue(servlet_enabled));
    }
	if(recording_cache_size_in_mb.isSet()){
        obj.insert(QString("recordingCacheSizeInMB"), ::OpenAPI::toJsonValue(recording_cache_size_in_mb));
    }
	if(recording_cache_duration_in_secs.isSet()){
        obj.insert(QString("recordingCacheDurationInSecs"), ::OpenAPI::toJsonValue(recording_cache_duration_in_secs));
    }
	if(recording_compression_enabled.isSet()){
        obj.insert(QString("recordingCompressionEnabled"), ::OpenAPI::toJsonValue(recording_compression_enabled));
    }
	if(gzip_response.isSet()){
        obj.insert(QString("gzipResponse"), ::OpenAPI::toJsonValue(gzip_response));
    }
    return obj;
}

OAIConfigNodePropertyArray
OAIOrgApacheSlingTracerInternalLogTracerProperties::getTracerSets() const {
    return tracer_sets;
}
void
OAIOrgApacheSlingTracerInternalLogTracerProperties::setTracerSets(const OAIConfigNodePropertyArray &tracer_sets) {
    this->tracer_sets = tracer_sets;
    this->m_tracer_sets_isSet = true;
}

OAIConfigNodePropertyBoolean
OAIOrgApacheSlingTracerInternalLogTracerProperties::getEnabled() const {
    return enabled;
}
void
OAIOrgApacheSlingTracerInternalLogTracerProperties::setEnabled(const OAIConfigNodePropertyBoolean &enabled) {
    this->enabled = enabled;
    this->m_enabled_isSet = true;
}

OAIConfigNodePropertyBoolean
OAIOrgApacheSlingTracerInternalLogTracerProperties::getServletEnabled() const {
    return servlet_enabled;
}
void
OAIOrgApacheSlingTracerInternalLogTracerProperties::setServletEnabled(const OAIConfigNodePropertyBoolean &servlet_enabled) {
    this->servlet_enabled = servlet_enabled;
    this->m_servlet_enabled_isSet = true;
}

OAIConfigNodePropertyInteger
OAIOrgApacheSlingTracerInternalLogTracerProperties::getRecordingCacheSizeInMb() const {
    return recording_cache_size_in_mb;
}
void
OAIOrgApacheSlingTracerInternalLogTracerProperties::setRecordingCacheSizeInMb(const OAIConfigNodePropertyInteger &recording_cache_size_in_mb) {
    this->recording_cache_size_in_mb = recording_cache_size_in_mb;
    this->m_recording_cache_size_in_mb_isSet = true;
}

OAIConfigNodePropertyInteger
OAIOrgApacheSlingTracerInternalLogTracerProperties::getRecordingCacheDurationInSecs() const {
    return recording_cache_duration_in_secs;
}
void
OAIOrgApacheSlingTracerInternalLogTracerProperties::setRecordingCacheDurationInSecs(const OAIConfigNodePropertyInteger &recording_cache_duration_in_secs) {
    this->recording_cache_duration_in_secs = recording_cache_duration_in_secs;
    this->m_recording_cache_duration_in_secs_isSet = true;
}

OAIConfigNodePropertyBoolean
OAIOrgApacheSlingTracerInternalLogTracerProperties::getRecordingCompressionEnabled() const {
    return recording_compression_enabled;
}
void
OAIOrgApacheSlingTracerInternalLogTracerProperties::setRecordingCompressionEnabled(const OAIConfigNodePropertyBoolean &recording_compression_enabled) {
    this->recording_compression_enabled = recording_compression_enabled;
    this->m_recording_compression_enabled_isSet = true;
}

OAIConfigNodePropertyBoolean
OAIOrgApacheSlingTracerInternalLogTracerProperties::getGzipResponse() const {
    return gzip_response;
}
void
OAIOrgApacheSlingTracerInternalLogTracerProperties::setGzipResponse(const OAIConfigNodePropertyBoolean &gzip_response) {
    this->gzip_response = gzip_response;
    this->m_gzip_response_isSet = true;
}


bool
OAIOrgApacheSlingTracerInternalLogTracerProperties::isSet() const {
    bool isObjectUpdated = false;
    do{ 
        if(tracer_sets.isSet()){ isObjectUpdated = true; break;}
    
        if(enabled.isSet()){ isObjectUpdated = true; break;}
    
        if(servlet_enabled.isSet()){ isObjectUpdated = true; break;}
    
        if(recording_cache_size_in_mb.isSet()){ isObjectUpdated = true; break;}
    
        if(recording_cache_duration_in_secs.isSet()){ isObjectUpdated = true; break;}
    
        if(recording_compression_enabled.isSet()){ isObjectUpdated = true; break;}
    
        if(gzip_response.isSet()){ isObjectUpdated = true; break;}
    }while(false);
    return isObjectUpdated;
}

}

