/**
 * Adobe Experience Manager OSGI config (AEM) API
 * Swagger AEM OSGI is an OpenAPI specification for Adobe Experience Manager (AEM) OSGI Configurations API
 *
 * OpenAPI spec version: 1.0.0-pre.0
 * Contact: opensource@shinesolutions.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


#include "OAIComAdobeGraniteRestAssetsImplAssetContentDispositionFilterProperties.h"

#include "OAIHelpers.h"

#include <QJsonDocument>
#include <QJsonArray>
#include <QObject>
#include <QDebug>

namespace OpenAPI {

OAIComAdobeGraniteRestAssetsImplAssetContentDispositionFilterProperties::OAIComAdobeGraniteRestAssetsImplAssetContentDispositionFilterProperties(QString json) {
    init();
    this->fromJson(json);
}

OAIComAdobeGraniteRestAssetsImplAssetContentDispositionFilterProperties::OAIComAdobeGraniteRestAssetsImplAssetContentDispositionFilterProperties() {
    init();
}

OAIComAdobeGraniteRestAssetsImplAssetContentDispositionFilterProperties::~OAIComAdobeGraniteRestAssetsImplAssetContentDispositionFilterProperties() {
    this->cleanup();
}

void
OAIComAdobeGraniteRestAssetsImplAssetContentDispositionFilterProperties::init() {
    mime_allow_empty = new OAIConfigNodePropertyBoolean();
    m_mime_allow_empty_isSet = false;
    mime_allowed = new OAIConfigNodePropertyArray();
    m_mime_allowed_isSet = false;
}

void
OAIComAdobeGraniteRestAssetsImplAssetContentDispositionFilterProperties::cleanup() {
    if(mime_allow_empty != nullptr) { 
        delete mime_allow_empty;
    }
    if(mime_allowed != nullptr) { 
        delete mime_allowed;
    }
}

OAIComAdobeGraniteRestAssetsImplAssetContentDispositionFilterProperties*
OAIComAdobeGraniteRestAssetsImplAssetContentDispositionFilterProperties::fromJson(QString json) {
    QByteArray array (json.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
    return this;
}

void
OAIComAdobeGraniteRestAssetsImplAssetContentDispositionFilterProperties::fromJsonObject(QJsonObject pJson) {
    ::OpenAPI::setValue(&mime_allow_empty, pJson["mime.allowEmpty"], "OAIConfigNodePropertyBoolean", "OAIConfigNodePropertyBoolean");
    
    ::OpenAPI::setValue(&mime_allowed, pJson["mime.allowed"], "OAIConfigNodePropertyArray", "OAIConfigNodePropertyArray");
    
}

QString
OAIComAdobeGraniteRestAssetsImplAssetContentDispositionFilterProperties::asJson ()
{
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject
OAIComAdobeGraniteRestAssetsImplAssetContentDispositionFilterProperties::asJsonObject() {
    QJsonObject obj;
    if((mime_allow_empty != nullptr) && (mime_allow_empty->isSet())){
        toJsonValue(QString("mime.allowEmpty"), mime_allow_empty, obj, QString("OAIConfigNodePropertyBoolean"));
    }
    if((mime_allowed != nullptr) && (mime_allowed->isSet())){
        toJsonValue(QString("mime.allowed"), mime_allowed, obj, QString("OAIConfigNodePropertyArray"));
    }

    return obj;
}

OAIConfigNodePropertyBoolean*
OAIComAdobeGraniteRestAssetsImplAssetContentDispositionFilterProperties::getMimeAllowEmpty() {
    return mime_allow_empty;
}
void
OAIComAdobeGraniteRestAssetsImplAssetContentDispositionFilterProperties::setMimeAllowEmpty(OAIConfigNodePropertyBoolean* mime_allow_empty) {
    this->mime_allow_empty = mime_allow_empty;
    this->m_mime_allow_empty_isSet = true;
}

OAIConfigNodePropertyArray*
OAIComAdobeGraniteRestAssetsImplAssetContentDispositionFilterProperties::getMimeAllowed() {
    return mime_allowed;
}
void
OAIComAdobeGraniteRestAssetsImplAssetContentDispositionFilterProperties::setMimeAllowed(OAIConfigNodePropertyArray* mime_allowed) {
    this->mime_allowed = mime_allowed;
    this->m_mime_allowed_isSet = true;
}


bool
OAIComAdobeGraniteRestAssetsImplAssetContentDispositionFilterProperties::isSet(){
    bool isObjectUpdated = false;
    do{
        if(mime_allow_empty != nullptr && mime_allow_empty->isSet()){ isObjectUpdated = true; break;}
        if(mime_allowed != nullptr && mime_allowed->isSet()){ isObjectUpdated = true; break;}
    }while(false);
    return isObjectUpdated;
}
}

