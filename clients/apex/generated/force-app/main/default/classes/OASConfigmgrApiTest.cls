@isTest
private class OASConfigmgrApiTest {
    /**
     * 
     *
     * 
     */
    @isTest
    private static void adaptiveFormAndInteractiveCommunicationWebChannelConfigurationTest() {
        HttpResponse res = new HttpResponse();
        res.setStatusCode(200);
        res.setStatus('OK');
        Test.setMock(HttpCalloutMock.class, new OASResponseMock(res));

        Map<String, Object> params = new Map<String, Object>{
            'post' => Boolean.getExample(),
            'apply' => Boolean.getExample(),
            'r_delete' => Boolean.getExample(),
            'action' => 'null',
            'location' => 'null',
            'propertylist' => new List<String>{''},
            'showPlaceholder' => Boolean.getExample(),
            'maximumCacheEntries' => Integer.getExample(),
            'afScriptingCompatversion' => 'null',
            'makeFileNameUnique' => Boolean.getExample(),
            'generatingCompliantData' => Boolean.getExample()
        };

        OASClient client;
        OASConfigmgrApi api;
        OASAdaptiveFormAndInteractiveCommuni response;
        OASAdaptiveFormAndInteractiveCommuni expectedResponse;
        String js = '';

        client = new OASClient();
        api = new OASConfigmgrApi(client);

        js = JSON.serialize(OASAdaptiveFormAndInteractiveCommuni.getExample());
        res.setHeader('Content-Type', 'application/json');
        res.setBody(js);
        expectedResponse = OASAdaptiveFormAndInteractiveCommuni.getExample();
        response = (OASAdaptiveFormAndInteractiveCommuni) api.adaptiveFormAndInteractiveCommunicationWebChannelConfiguration(params);
        System.assertEquals(expectedResponse, response);
    }

    /**
     * 
     *
     * 
     */
    @isTest
    private static void adaptiveFormAndInteractiveCommunicationWebChannelThemeConfigurTest() {
        HttpResponse res = new HttpResponse();
        res.setStatusCode(200);
        res.setStatus('OK');
        Test.setMock(HttpCalloutMock.class, new OASResponseMock(res));

        Map<String, Object> params = new Map<String, Object>{
            'post' => Boolean.getExample(),
            'apply' => Boolean.getExample(),
            'r_delete' => Boolean.getExample(),
            'action' => 'null',
            'location' => 'null',
            'propertylist' => new List<String>{''},
            'fontList' => new List<String>{''}
        };

        OASClient client;
        OASConfigmgrApi api;
        OASAdaptiveFormAndInteractiveCommuni response;
        OASAdaptiveFormAndInteractiveCommuni expectedResponse;
        String js = '';

        client = new OASClient();
        api = new OASConfigmgrApi(client);

        js = JSON.serialize(OASAdaptiveFormAndInteractiveCommuni.getExample());
        res.setHeader('Content-Type', 'application/json');
        res.setBody(js);
        expectedResponse = OASAdaptiveFormAndInteractiveCommuni.getExample();
        response = (OASAdaptiveFormAndInteractiveCommuni) api.adaptiveFormAndInteractiveCommunicationWebChannelThemeConfigur(params);
        System.assertEquals(expectedResponse, response);
    }

    /**
     * 
     *
     * 
     */
    @isTest
    private static void analyticsComponentQueryCacheServiceTest() {
        HttpResponse res = new HttpResponse();
        res.setStatusCode(200);
        res.setStatus('OK');
        Test.setMock(HttpCalloutMock.class, new OASResponseMock(res));

        Map<String, Object> params = new Map<String, Object>{
            'post' => Boolean.getExample(),
            'apply' => Boolean.getExample(),
            'r_delete' => Boolean.getExample(),
            'action' => 'null',
            'location' => 'null',
            'propertylist' => new List<String>{''},
            'cqAnalyticsComponentQueryCacheSize' => Integer.getExample()
        };

        OASClient client;
        OASConfigmgrApi api;
        OASAnalyticsComponentQueryCacheServi response;
        OASAnalyticsComponentQueryCacheServi expectedResponse;
        String js = '';

        client = new OASClient();
        api = new OASConfigmgrApi(client);

        js = JSON.serialize(OASAnalyticsComponentQueryCacheServi.getExample());
        res.setHeader('Content-Type', 'application/json');
        res.setBody(js);
        expectedResponse = OASAnalyticsComponentQueryCacheServi.getExample();
        response = (OASAnalyticsComponentQueryCacheServi) api.analyticsComponentQueryCacheService(params);
        System.assertEquals(expectedResponse, response);
    }

    /**
     * 
     *
     * 
     */
    @isTest
    private static void apacheSlingHealthCheckResultHTMLSerializerTest() {
        HttpResponse res = new HttpResponse();
        res.setStatusCode(200);
        res.setStatus('OK');
        Test.setMock(HttpCalloutMock.class, new OASResponseMock(res));

        Map<String, Object> params = new Map<String, Object>{
            'post' => Boolean.getExample(),
            'apply' => Boolean.getExample(),
            'r_delete' => Boolean.getExample(),
            'action' => 'null',
            'location' => 'null',
            'propertylist' => new List<String>{''},
            'styleString' => 'null'
        };

        OASClient client;
        OASConfigmgrApi api;
        OASApacheSlingHealthCheckResultHTMLS response;
        OASApacheSlingHealthCheckResultHTMLS expectedResponse;
        String js = '';

        client = new OASClient();
        api = new OASConfigmgrApi(client);

        js = JSON.serialize(OASApacheSlingHealthCheckResultHTMLS.getExample());
        res.setHeader('Content-Type', 'application/json');
        res.setBody(js);
        expectedResponse = OASApacheSlingHealthCheckResultHTMLS.getExample();
        response = (OASApacheSlingHealthCheckResultHTMLS) api.apacheSlingHealthCheckResultHTMLSerializer(params);
        System.assertEquals(expectedResponse, response);
    }

    /**
     * 
     *
     * 
     */
    @isTest
    private static void comAdobeAemFormsndocumentsConfigAEMFormsManagerConfigurationTest() {
        HttpResponse res = new HttpResponse();
        res.setStatusCode(200);
        res.setStatus('OK');
        Test.setMock(HttpCalloutMock.class, new OASResponseMock(res));

        Map<String, Object> params = new Map<String, Object>{
            'post' => Boolean.getExample(),
            'apply' => Boolean.getExample(),
            'r_delete' => Boolean.getExample(),
            'action' => 'null',
            'location' => 'null',
            'propertylist' => new List<String>{''},
            'formsManagerConfigIncludeOOTBTemplates' => Boolean.getExample(),
            'formsManagerConfigIncludeDeprecatedTemplates' => Boolean.getExample()
        };

        OASClient client;
        OASConfigmgrApi api;
        OASComAdobeAemFormsndocumentsConfigA response;
        OASComAdobeAemFormsndocumentsConfigA expectedResponse;
        String js = '';

        client = new OASClient();
        api = new OASConfigmgrApi(client);

        js = JSON.serialize(OASComAdobeAemFormsndocumentsConfigA.getExample());
        res.setHeader('Content-Type', 'application/json');
        res.setBody(js);
        expectedResponse = OASComAdobeAemFormsndocumentsConfigA.getExample();
        response = (OASComAdobeAemFormsndocumentsConfigA) api.comAdobeAemFormsndocumentsConfigAEMFormsManagerConfiguration(params);
        System.assertEquals(expectedResponse, response);
    }

    /**
     * 
     *
     * 
     */
    @isTest
    private static void comAdobeAemTransactionCoreImplTransactionRecorderTest() {
        HttpResponse res = new HttpResponse();
        res.setStatusCode(200);
        res.setStatus('OK');
        Test.setMock(HttpCalloutMock.class, new OASResponseMock(res));

        Map<String, Object> params = new Map<String, Object>{
            'post' => Boolean.getExample(),
            'apply' => Boolean.getExample(),
            'r_delete' => Boolean.getExample(),
            'action' => 'null',
            'location' => 'null',
            'propertylist' => new List<String>{''},
            'isTransactionRecordingEnabled' => Boolean.getExample()
        };

        OASClient client;
        OASConfigmgrApi api;
        OASComAdobeAemTransactionCoreImplTra response;
        OASComAdobeAemTransactionCoreImplTra expectedResponse;
        String js = '';

        client = new OASClient();
        api = new OASConfigmgrApi(client);

        js = JSON.serialize(OASComAdobeAemTransactionCoreImplTra.getExample());
        res.setHeader('Content-Type', 'application/json');
        res.setBody(js);
        expectedResponse = OASComAdobeAemTransactionCoreImplTra.getExample();
        response = (OASComAdobeAemTransactionCoreImplTra) api.comAdobeAemTransactionCoreImplTransactionRecorder(params);
        System.assertEquals(expectedResponse, response);
    }

    /**
     * 
     *
     * 
     */
    @isTest
    private static void comAdobeAemUpgradePrechecksHcImplDeprecateIndexesHCTest() {
        HttpResponse res = new HttpResponse();
        res.setStatusCode(200);
        res.setStatus('OK');
        Test.setMock(HttpCalloutMock.class, new OASResponseMock(res));

        Map<String, Object> params = new Map<String, Object>{
            'post' => Boolean.getExample(),
            'apply' => Boolean.getExample(),
            'r_delete' => Boolean.getExample(),
            'action' => 'null',
            'location' => 'null',
            'propertylist' => new List<String>{''},
            'hcName' => 'null',
            'hcTags' => new List<String>{''},
            'hcMbeanName' => 'null'
        };

        OASClient client;
        OASConfigmgrApi api;
        OASComAdobeAemUpgradePrechecksHcImpl response;
        OASComAdobeAemUpgradePrechecksHcImpl expectedResponse;
        String js = '';

        client = new OASClient();
        api = new OASConfigmgrApi(client);

        js = JSON.serialize(OASComAdobeAemUpgradePrechecksHcImpl.getExample());
        res.setHeader('Content-Type', 'application/json');
        res.setBody(js);
        expectedResponse = OASComAdobeAemUpgradePrechecksHcImpl.getExample();
        response = (OASComAdobeAemUpgradePrechecksHcImpl) api.comAdobeAemUpgradePrechecksHcImplDeprecateIndexesHC(params);
        System.assertEquals(expectedResponse, response);
    }

    /**
     * 
     *
     * 
     */
    @isTest
    private static void comAdobeAemUpgradePrechecksHcImplReplicationAgentsDisabledHCTest() {
        HttpResponse res = new HttpResponse();
        res.setStatusCode(200);
        res.setStatus('OK');
        Test.setMock(HttpCalloutMock.class, new OASResponseMock(res));

        Map<String, Object> params = new Map<String, Object>{
            'post' => Boolean.getExample(),
            'apply' => Boolean.getExample(),
            'r_delete' => Boolean.getExample(),
            'action' => 'null',
            'location' => 'null',
            'propertylist' => new List<String>{''},
            'hcName' => 'null',
            'hcTags' => new List<String>{''},
            'hcMbeanName' => 'null'
        };

        OASClient client;
        OASConfigmgrApi api;
        OASComAdobeAemUpgradePrechecksHcImpl response;
        OASComAdobeAemUpgradePrechecksHcImpl expectedResponse;
        String js = '';

        client = new OASClient();
        api = new OASConfigmgrApi(client);

        js = JSON.serialize(OASComAdobeAemUpgradePrechecksHcImpl.getExample());
        res.setHeader('Content-Type', 'application/json');
        res.setBody(js);
        expectedResponse = OASComAdobeAemUpgradePrechecksHcImpl.getExample();
        response = (OASComAdobeAemUpgradePrechecksHcImpl) api.comAdobeAemUpgradePrechecksHcImplReplicationAgentsDisabledHC(params);
        System.assertEquals(expectedResponse, response);
    }

    /**
     * 
     *
     * 
     */
    @isTest
    private static void comAdobeAemUpgradePrechecksMbeanImplPreUpgradeTasksMBeanImplTest() {
        HttpResponse res = new HttpResponse();
        res.setStatusCode(200);
        res.setStatus('OK');
        Test.setMock(HttpCalloutMock.class, new OASResponseMock(res));

        Map<String, Object> params = new Map<String, Object>{
            'post' => Boolean.getExample(),
            'apply' => Boolean.getExample(),
            'r_delete' => Boolean.getExample(),
            'action' => 'null',
            'location' => 'null',
            'propertylist' => new List<String>{''},
            'preUpgradeMaintenanceTasks' => new List<String>{''},
            'preUpgradeHcTags' => new List<String>{''}
        };

        OASClient client;
        OASConfigmgrApi api;
        OASComAdobeAemUpgradePrechecksMbeanI response;
        OASComAdobeAemUpgradePrechecksMbeanI expectedResponse;
        String js = '';

        client = new OASClient();
        api = new OASConfigmgrApi(client);

        js = JSON.serialize(OASComAdobeAemUpgradePrechecksMbeanI.getExample());
        res.setHeader('Content-Type', 'application/json');
        res.setBody(js);
        expectedResponse = OASComAdobeAemUpgradePrechecksMbeanI.getExample();
        response = (OASComAdobeAemUpgradePrechecksMbeanI) api.comAdobeAemUpgradePrechecksMbeanImplPreUpgradeTasksMBeanImpl(params);
        System.assertEquals(expectedResponse, response);
    }

    /**
     * 
     *
     * 
     */
    @isTest
    private static void comAdobeAemUpgradePrechecksTasksImplConsistencyCheckTaskImplTest() {
        HttpResponse res = new HttpResponse();
        res.setStatusCode(200);
        res.setStatus('OK');
        Test.setMock(HttpCalloutMock.class, new OASResponseMock(res));

        Map<String, Object> params = new Map<String, Object>{
            'post' => Boolean.getExample(),
            'apply' => Boolean.getExample(),
            'r_delete' => Boolean.getExample(),
            'action' => 'null',
            'location' => 'null',
            'propertylist' => new List<String>{''},
            'rootPath' => 'null',
            'fixInconsistencies' => Boolean.getExample()
        };

        OASClient client;
        OASConfigmgrApi api;
        OASComAdobeAemUpgradePrechecksTasksI response;
        OASComAdobeAemUpgradePrechecksTasksI expectedResponse;
        String js = '';

        client = new OASClient();
        api = new OASConfigmgrApi(client);

        js = JSON.serialize(OASComAdobeAemUpgradePrechecksTasksI.getExample());
        res.setHeader('Content-Type', 'application/json');
        res.setBody(js);
        expectedResponse = OASComAdobeAemUpgradePrechecksTasksI.getExample();
        response = (OASComAdobeAemUpgradePrechecksTasksI) api.comAdobeAemUpgradePrechecksTasksImplConsistencyCheckTaskImpl(params);
        System.assertEquals(expectedResponse, response);
    }

    /**
     * 
     *
     * 
     */
    @isTest
    private static void comAdobeCqAccountApiAccountManagementServiceTest() {
        HttpResponse res = new HttpResponse();
        res.setStatusCode(200);
        res.setStatus('OK');
        Test.setMock(HttpCalloutMock.class, new OASResponseMock(res));

        Map<String, Object> params = new Map<String, Object>{
            'post' => Boolean.getExample(),
            'apply' => Boolean.getExample(),
            'r_delete' => Boolean.getExample(),
            'action' => 'null',
            'location' => 'null',
            'propertylist' => new List<String>{''},
            'cqAccountmanagerTokenValidityPeriod' => Integer.getExample(),
            'cqAccountmanagerConfigRequestnewaccountMail' => 'null',
            'cqAccountmanagerConfigRequestnewpwdMail' => 'null'
        };

        OASClient client;
        OASConfigmgrApi api;
        OASComAdobeCqAccountApiAccountManage response;
        OASComAdobeCqAccountApiAccountManage expectedResponse;
        String js = '';

        client = new OASClient();
        api = new OASConfigmgrApi(client);

        js = JSON.serialize(OASComAdobeCqAccountApiAccountManage.getExample());
        res.setHeader('Content-Type', 'application/json');
        res.setBody(js);
        expectedResponse = OASComAdobeCqAccountApiAccountManage.getExample();
        response = (OASComAdobeCqAccountApiAccountManage) api.comAdobeCqAccountApiAccountManagementService(params);
        System.assertEquals(expectedResponse, response);
    }

    /**
     * 
     *
     * 
     */
    @isTest
    private static void comAdobeCqAccountImplAccountManagementServletTest() {
        HttpResponse res = new HttpResponse();
        res.setStatusCode(200);
        res.setStatus('OK');
        Test.setMock(HttpCalloutMock.class, new OASResponseMock(res));

        Map<String, Object> params = new Map<String, Object>{
            'post' => Boolean.getExample(),
            'apply' => Boolean.getExample(),
            'r_delete' => Boolean.getExample(),
            'action' => 'null',
            'location' => 'null',
            'propertylist' => new List<String>{''},
            'cqAccountmanagerConfigInformnewaccountMail' => 'null',
            'cqAccountmanagerConfigInformnewpwdMail' => 'null'
        };

        OASClient client;
        OASConfigmgrApi api;
        OASComAdobeCqAccountImplAccountManag response;
        OASComAdobeCqAccountImplAccountManag expectedResponse;
        String js = '';

        client = new OASClient();
        api = new OASConfigmgrApi(client);

        js = JSON.serialize(OASComAdobeCqAccountImplAccountManag.getExample());
        res.setHeader('Content-Type', 'application/json');
        res.setBody(js);
        expectedResponse = OASComAdobeCqAccountImplAccountManag.getExample();
        response = (OASComAdobeCqAccountImplAccountManag) api.comAdobeCqAccountImplAccountManagementServlet(params);
        System.assertEquals(expectedResponse, response);
    }

    /**
     * 
     *
     * 
     */
    @isTest
    private static void comAdobeCqAddressImplLocationLocationListServletTest() {
        HttpResponse res = new HttpResponse();
        res.setStatusCode(200);
        res.setStatus('OK');
        Test.setMock(HttpCalloutMock.class, new OASResponseMock(res));

        Map<String, Object> params = new Map<String, Object>{
            'post' => Boolean.getExample(),
            'apply' => Boolean.getExample(),
            'r_delete' => Boolean.getExample(),
            'action' => 'null',
            'location' => 'null',
            'propertylist' => new List<String>{''},
            'cqAddressLocationDefaultMaxResults' => Integer.getExample()
        };

        OASClient client;
        OASConfigmgrApi api;
        OASComAdobeCqAddressImplLocationLoca response;
        OASComAdobeCqAddressImplLocationLoca expectedResponse;
        String js = '';

        client = new OASClient();
        api = new OASConfigmgrApi(client);

        js = JSON.serialize(OASComAdobeCqAddressImplLocationLoca.getExample());
        res.setHeader('Content-Type', 'application/json');
        res.setBody(js);
        expectedResponse = OASComAdobeCqAddressImplLocationLoca.getExample();
        response = (OASComAdobeCqAddressImplLocationLoca) api.comAdobeCqAddressImplLocationLocationListServlet(params);
        System.assertEquals(expectedResponse, response);
    }

    /**
     * 
     *
     * 
     */
    @isTest
    private static void comAdobeCqAuditPurgeDamTest() {
        HttpResponse res = new HttpResponse();
        res.setStatusCode(200);
        res.setStatus('OK');
        Test.setMock(HttpCalloutMock.class, new OASResponseMock(res));

        Map<String, Object> params = new Map<String, Object>{
            'post' => Boolean.getExample(),
            'apply' => Boolean.getExample(),
            'r_delete' => Boolean.getExample(),
            'action' => 'null',
            'location' => 'null',
            'propertylist' => new List<String>{''},
            'auditlogRuleName' => 'null',
            'auditlogRuleContentpath' => 'null',
            'auditlogRuleMinimumage' => Integer.getExample(),
            'auditlogRuleTypes' => 'null'
        };

        OASClient client;
        OASConfigmgrApi api;
        OASComAdobeCqAuditPurgeDamInfo response;
        OASComAdobeCqAuditPurgeDamInfo expectedResponse;
        String js = '';

        client = new OASClient();
        api = new OASConfigmgrApi(client);

        js = JSON.serialize(OASComAdobeCqAuditPurgeDamInfo.getExample());
        res.setHeader('Content-Type', 'application/json');
        res.setBody(js);
        expectedResponse = OASComAdobeCqAuditPurgeDamInfo.getExample();
        response = (OASComAdobeCqAuditPurgeDamInfo) api.comAdobeCqAuditPurgeDam(params);
        System.assertEquals(expectedResponse, response);
    }

    /**
     * 
     *
     * 
     */
    @isTest
    private static void comAdobeCqAuditPurgePagesTest() {
        HttpResponse res = new HttpResponse();
        res.setStatusCode(200);
        res.setStatus('OK');
        Test.setMock(HttpCalloutMock.class, new OASResponseMock(res));

        Map<String, Object> params = new Map<String, Object>{
            'post' => Boolean.getExample(),
            'apply' => Boolean.getExample(),
            'r_delete' => Boolean.getExample(),
            'action' => 'null',
            'location' => 'null',
            'propertylist' => new List<String>{''},
            'auditlogRuleName' => 'null',
            'auditlogRuleContentpath' => 'null',
            'auditlogRuleMinimumage' => Integer.getExample(),
            'auditlogRuleTypes' => 'null'
        };

        OASClient client;
        OASConfigmgrApi api;
        OASComAdobeCqAuditPurgePagesInfo response;
        OASComAdobeCqAuditPurgePagesInfo expectedResponse;
        String js = '';

        client = new OASClient();
        api = new OASConfigmgrApi(client);

        js = JSON.serialize(OASComAdobeCqAuditPurgePagesInfo.getExample());
        res.setHeader('Content-Type', 'application/json');
        res.setBody(js);
        expectedResponse = OASComAdobeCqAuditPurgePagesInfo.getExample();
        response = (OASComAdobeCqAuditPurgePagesInfo) api.comAdobeCqAuditPurgePages(params);
        System.assertEquals(expectedResponse, response);
    }

    /**
     * 
     *
     * 
     */
    @isTest
    private static void comAdobeCqAuditPurgeReplicationTest() {
        HttpResponse res = new HttpResponse();
        res.setStatusCode(200);
        res.setStatus('OK');
        Test.setMock(HttpCalloutMock.class, new OASResponseMock(res));

        Map<String, Object> params = new Map<String, Object>{
            'post' => Boolean.getExample(),
            'apply' => Boolean.getExample(),
            'r_delete' => Boolean.getExample(),
            'action' => 'null',
            'location' => 'null',
            'propertylist' => new List<String>{''},
            'auditlogRuleName' => 'null',
            'auditlogRuleContentpath' => 'null',
            'auditlogRuleMinimumage' => Integer.getExample(),
            'auditlogRuleTypes' => 'null'
        };

        OASClient client;
        OASConfigmgrApi api;
        OASComAdobeCqAuditPurgeReplicationIn response;
        OASComAdobeCqAuditPurgeReplicationIn expectedResponse;
        String js = '';

        client = new OASClient();
        api = new OASConfigmgrApi(client);

        js = JSON.serialize(OASComAdobeCqAuditPurgeReplicationIn.getExample());
        res.setHeader('Content-Type', 'application/json');
        res.setBody(js);
        expectedResponse = OASComAdobeCqAuditPurgeReplicationIn.getExample();
        response = (OASComAdobeCqAuditPurgeReplicationIn) api.comAdobeCqAuditPurgeReplication(params);
        System.assertEquals(expectedResponse, response);
    }

    /**
     * 
     *
     * 
     */
    @isTest
    private static void comAdobeCqCdnRewriterImplAWSCloudFrontRewriterTest() {
        HttpResponse res = new HttpResponse();
        res.setStatusCode(200);
        res.setStatus('OK');
        Test.setMock(HttpCalloutMock.class, new OASResponseMock(res));

        Map<String, Object> params = new Map<String, Object>{
            'post' => Boolean.getExample(),
            'apply' => Boolean.getExample(),
            'r_delete' => Boolean.getExample(),
            'action' => 'null',
            'location' => 'null',
            'propertylist' => new List<String>{''},
            'serviceRanking' => Integer.getExample(),
            'keypairId' => 'null',
            'keypairAlias' => 'null',
            'cdnrewriterAttributes' => new List<String>{''},
            'cdnRewriterDistributionDomain' => 'null'
        };

        OASClient client;
        OASConfigmgrApi api;
        OASComAdobeCqCdnRewriterImplAWSCloud response;
        OASComAdobeCqCdnRewriterImplAWSCloud expectedResponse;
        String js = '';

        client = new OASClient();
        api = new OASConfigmgrApi(client);

        js = JSON.serialize(OASComAdobeCqCdnRewriterImplAWSCloud.getExample());
        res.setHeader('Content-Type', 'application/json');
        res.setBody(js);
        expectedResponse = OASComAdobeCqCdnRewriterImplAWSCloud.getExample();
        response = (OASComAdobeCqCdnRewriterImplAWSCloud) api.comAdobeCqCdnRewriterImplAWSCloudFrontRewriter(params);
        System.assertEquals(expectedResponse, response);
    }

    /**
     * 
     *
     * 
     */
    @isTest
    private static void comAdobeCqCdnRewriterImplCDNConfigServiceImplTest() {
        HttpResponse res = new HttpResponse();
        res.setStatusCode(200);
        res.setStatus('OK');
        Test.setMock(HttpCalloutMock.class, new OASResponseMock(res));

        Map<String, Object> params = new Map<String, Object>{
            'post' => Boolean.getExample(),
            'apply' => Boolean.getExample(),
            'r_delete' => Boolean.getExample(),
            'action' => 'null',
            'location' => 'null',
            'propertylist' => new List<String>{''},
            'cdnConfigDistributionDomain' => 'null',
            'cdnConfigEnableRewriting' => Boolean.getExample(),
            'cdnConfigPathPrefixes' => new List<String>{''},
            'cdnConfigCdnttl' => Integer.getExample(),
            'cdnConfigApplicationProtocol' => 'null'
        };

        OASClient client;
        OASConfigmgrApi api;
        OASComAdobeCqCdnRewriterImplCDNConfi response;
        OASComAdobeCqCdnRewriterImplCDNConfi expectedResponse;
        String js = '';

        client = new OASClient();
        api = new OASConfigmgrApi(client);

        js = JSON.serialize(OASComAdobeCqCdnRewriterImplCDNConfi.getExample());
        res.setHeader('Content-Type', 'application/json');
        res.setBody(js);
        expectedResponse = OASComAdobeCqCdnRewriterImplCDNConfi.getExample();
        response = (OASComAdobeCqCdnRewriterImplCDNConfi) api.comAdobeCqCdnRewriterImplCDNConfigServiceImpl(params);
        System.assertEquals(expectedResponse, response);
    }

    /**
     * 
     *
     * 
     */
    @isTest
    private static void comAdobeCqCdnRewriterImplCDNRewriterTest() {
        HttpResponse res = new HttpResponse();
        res.setStatusCode(200);
        res.setStatus('OK');
        Test.setMock(HttpCalloutMock.class, new OASResponseMock(res));

        Map<String, Object> params = new Map<String, Object>{
            'post' => Boolean.getExample(),
            'apply' => Boolean.getExample(),
            'r_delete' => Boolean.getExample(),
            'action' => 'null',
            'location' => 'null',
            'propertylist' => new List<String>{''},
            'serviceRanking' => Integer.getExample(),
            'cdnrewriterAttributes' => new List<String>{''},
            'cdnRewriterDistributionDomain' => 'null'
        };

        OASClient client;
        OASConfigmgrApi api;
        OASComAdobeCqCdnRewriterImplCDNRewri response;
        OASComAdobeCqCdnRewriterImplCDNRewri expectedResponse;
        String js = '';

        client = new OASClient();
        api = new OASConfigmgrApi(client);

        js = JSON.serialize(OASComAdobeCqCdnRewriterImplCDNRewri.getExample());
        res.setHeader('Content-Type', 'application/json');
        res.setBody(js);
        expectedResponse = OASComAdobeCqCdnRewriterImplCDNRewri.getExample();
        response = (OASComAdobeCqCdnRewriterImplCDNRewri) api.comAdobeCqCdnRewriterImplCDNRewriter(params);
        System.assertEquals(expectedResponse, response);
    }

    /**
     * 
     *
     * 
     */
    @isTest
    private static void comAdobeCqCloudconfigCoreImplConfigurationReplicationEventHandleTest() {
        HttpResponse res = new HttpResponse();
        res.setStatusCode(200);
        res.setStatus('OK');
        Test.setMock(HttpCalloutMock.class, new OASResponseMock(res));

        Map<String, Object> params = new Map<String, Object>{
            'post' => Boolean.getExample(),
            'apply' => Boolean.getExample(),
            'r_delete' => Boolean.getExample(),
            'action' => 'null',
            'location' => 'null',
            'propertylist' => new List<String>{''},
            'flushAgents' => new List<String>{''}
        };

        OASClient client;
        OASConfigmgrApi api;
        OASComAdobeCqCloudconfigCoreImplConf response;
        OASComAdobeCqCloudconfigCoreImplConf expectedResponse;
        String js = '';

        client = new OASClient();
        api = new OASConfigmgrApi(client);

        js = JSON.serialize(OASComAdobeCqCloudconfigCoreImplConf.getExample());
        res.setHeader('Content-Type', 'application/json');
        res.setBody(js);
        expectedResponse = OASComAdobeCqCloudconfigCoreImplConf.getExample();
        response = (OASComAdobeCqCloudconfigCoreImplConf) api.comAdobeCqCloudconfigCoreImplConfigurationReplicationEventHandle(params);
        System.assertEquals(expectedResponse, response);
    }

    /**
     * 
     *
     * 
     */
    @isTest
    private static void comAdobeCqCommerceImplAssetDynamicImageHandlerTest() {
        HttpResponse res = new HttpResponse();
        res.setStatusCode(200);
        res.setStatus('OK');
        Test.setMock(HttpCalloutMock.class, new OASResponseMock(res));

        Map<String, Object> params = new Map<String, Object>{
            'post' => Boolean.getExample(),
            'apply' => Boolean.getExample(),
            'r_delete' => Boolean.getExample(),
            'action' => 'null',
            'location' => 'null',
            'propertylist' => new List<String>{''},
            'cqCommerceAssetHandlerActive' => Boolean.getExample(),
            'cqCommerceAssetHandlerName' => 'null'
        };

        OASClient client;
        OASConfigmgrApi api;
        OASComAdobeCqCommerceImplAssetDynami response;
        OASComAdobeCqCommerceImplAssetDynami expectedResponse;
        String js = '';

        client = new OASClient();
        api = new OASConfigmgrApi(client);

        js = JSON.serialize(OASComAdobeCqCommerceImplAssetDynami.getExample());
        res.setHeader('Content-Type', 'application/json');
        res.setBody(js);
        expectedResponse = OASComAdobeCqCommerceImplAssetDynami.getExample();
        response = (OASComAdobeCqCommerceImplAssetDynami) api.comAdobeCqCommerceImplAssetDynamicImageHandler(params);
        System.assertEquals(expectedResponse, response);
    }

    /**
     * 
     *
     * 
     */
    @isTest
    private static void comAdobeCqCommerceImplAssetProductAssetHandlerProviderImplTest() {
        HttpResponse res = new HttpResponse();
        res.setStatusCode(200);
        res.setStatus('OK');
        Test.setMock(HttpCalloutMock.class, new OASResponseMock(res));

        Map<String, Object> params = new Map<String, Object>{
            'post' => Boolean.getExample(),
            'apply' => Boolean.getExample(),
            'r_delete' => Boolean.getExample(),
            'action' => 'null',
            'location' => 'null',
            'propertylist' => new List<String>{''},
            'cqCommerceAssetHandlerFallback' => 'null'
        };

        OASClient client;
        OASConfigmgrApi api;
        OASComAdobeCqCommerceImplAssetProduc response;
        OASComAdobeCqCommerceImplAssetProduc expectedResponse;
        String js = '';

        client = new OASClient();
        api = new OASConfigmgrApi(client);

        js = JSON.serialize(OASComAdobeCqCommerceImplAssetProduc.getExample());
        res.setHeader('Content-Type', 'application/json');
        res.setBody(js);
        expectedResponse = OASComAdobeCqCommerceImplAssetProduc.getExample();
        response = (OASComAdobeCqCommerceImplAssetProduc) api.comAdobeCqCommerceImplAssetProductAssetHandlerProviderImpl(params);
        System.assertEquals(expectedResponse, response);
    }

    /**
     * 
     *
     * 
     */
    @isTest
    private static void comAdobeCqCommerceImplAssetStaticImageHandlerTest() {
        HttpResponse res = new HttpResponse();
        res.setStatusCode(200);
        res.setStatus('OK');
        Test.setMock(HttpCalloutMock.class, new OASResponseMock(res));

        Map<String, Object> params = new Map<String, Object>{
            'post' => Boolean.getExample(),
            'apply' => Boolean.getExample(),
            'r_delete' => Boolean.getExample(),
            'action' => 'null',
            'location' => 'null',
            'propertylist' => new List<String>{''},
            'cqCommerceAssetHandlerActive' => Boolean.getExample(),
            'cqCommerceAssetHandlerName' => 'null'
        };

        OASClient client;
        OASConfigmgrApi api;
        OASComAdobeCqCommerceImplAssetStatic response;
        OASComAdobeCqCommerceImplAssetStatic expectedResponse;
        String js = '';

        client = new OASClient();
        api = new OASConfigmgrApi(client);

        js = JSON.serialize(OASComAdobeCqCommerceImplAssetStatic.getExample());
        res.setHeader('Content-Type', 'application/json');
        res.setBody(js);
        expectedResponse = OASComAdobeCqCommerceImplAssetStatic.getExample();
        response = (OASComAdobeCqCommerceImplAssetStatic) api.comAdobeCqCommerceImplAssetStaticImageHandler(params);
        System.assertEquals(expectedResponse, response);
    }

    /**
     * 
     *
     * 
     */
    @isTest
    private static void comAdobeCqCommerceImplAssetVideoHandlerTest() {
        HttpResponse res = new HttpResponse();
        res.setStatusCode(200);
        res.setStatus('OK');
        Test.setMock(HttpCalloutMock.class, new OASResponseMock(res));

        Map<String, Object> params = new Map<String, Object>{
            'post' => Boolean.getExample(),
            'apply' => Boolean.getExample(),
            'r_delete' => Boolean.getExample(),
            'action' => 'null',
            'location' => 'null',
            'propertylist' => new List<String>{''},
            'cqCommerceAssetHandlerActive' => Boolean.getExample(),
            'cqCommerceAssetHandlerName' => 'null'
        };

        OASClient client;
        OASConfigmgrApi api;
        OASComAdobeCqCommerceImplAssetVideoH response;
        OASComAdobeCqCommerceImplAssetVideoH expectedResponse;
        String js = '';

        client = new OASClient();
        api = new OASConfigmgrApi(client);

        js = JSON.serialize(OASComAdobeCqCommerceImplAssetVideoH.getExample());
        res.setHeader('Content-Type', 'application/json');
        res.setBody(js);
        expectedResponse = OASComAdobeCqCommerceImplAssetVideoH.getExample();
        response = (OASComAdobeCqCommerceImplAssetVideoH) api.comAdobeCqCommerceImplAssetVideoHandler(params);
        System.assertEquals(expectedResponse, response);
    }

    /**
     * 
     *
     * 
     */
    @isTest
    private static void comAdobeCqCommerceImplPromotionPromotionManagerImplTest() {
        HttpResponse res = new HttpResponse();
        res.setStatusCode(200);
        res.setStatus('OK');
        Test.setMock(HttpCalloutMock.class, new OASResponseMock(res));

        Map<String, Object> params = new Map<String, Object>{
            'post' => Boolean.getExample(),
            'apply' => Boolean.getExample(),
            'r_delete' => Boolean.getExample(),
            'action' => 'null',
            'location' => 'null',
            'propertylist' => new List<String>{''},
            'cqCommercePromotionRoot' => 'null'
        };

        OASClient client;
        OASConfigmgrApi api;
        OASComAdobeCqCommerceImplPromotionPr response;
        OASComAdobeCqCommerceImplPromotionPr expectedResponse;
        String js = '';

        client = new OASClient();
        api = new OASConfigmgrApi(client);

        js = JSON.serialize(OASComAdobeCqCommerceImplPromotionPr.getExample());
        res.setHeader('Content-Type', 'application/json');
        res.setBody(js);
        expectedResponse = OASComAdobeCqCommerceImplPromotionPr.getExample();
        response = (OASComAdobeCqCommerceImplPromotionPr) api.comAdobeCqCommerceImplPromotionPromotionManagerImpl(params);
        System.assertEquals(expectedResponse, response);
    }

    /**
     * 
     *
     * 
     */
    @isTest
    private static void comAdobeCqCommercePimImplCataloggeneratorCatalogGeneratorImplTest() {
        HttpResponse res = new HttpResponse();
        res.setStatusCode(200);
        res.setStatus('OK');
        Test.setMock(HttpCalloutMock.class, new OASResponseMock(res));

        Map<String, Object> params = new Map<String, Object>{
            'post' => Boolean.getExample(),
            'apply' => Boolean.getExample(),
            'r_delete' => Boolean.getExample(),
            'action' => 'null',
            'location' => 'null',
            'propertylist' => new List<String>{''},
            'cqCommerceCataloggeneratorBucketsize' => Integer.getExample(),
            'cqCommerceCataloggeneratorBucketname' => 'null',
            'cqCommerceCataloggeneratorExcludedtemplateproperties' => new List<String>{''}
        };

        OASClient client;
        OASConfigmgrApi api;
        OASComAdobeCqCommercePimImplCatalogg response;
        OASComAdobeCqCommercePimImplCatalogg expectedResponse;
        String js = '';

        client = new OASClient();
        api = new OASConfigmgrApi(client);

        js = JSON.serialize(OASComAdobeCqCommercePimImplCatalogg.getExample());
        res.setHeader('Content-Type', 'application/json');
        res.setBody(js);
        expectedResponse = OASComAdobeCqCommercePimImplCatalogg.getExample();
        response = (OASComAdobeCqCommercePimImplCatalogg) api.comAdobeCqCommercePimImplCataloggeneratorCatalogGeneratorImpl(params);
        System.assertEquals(expectedResponse, response);
    }

    /**
     * 
     *
     * 
     */
    @isTest
    private static void comAdobeCqCommercePimImplPageEventListenerTest() {
        HttpResponse res = new HttpResponse();
        res.setStatusCode(200);
        res.setStatus('OK');
        Test.setMock(HttpCalloutMock.class, new OASResponseMock(res));

        Map<String, Object> params = new Map<String, Object>{
            'post' => Boolean.getExample(),
            'apply' => Boolean.getExample(),
            'r_delete' => Boolean.getExample(),
            'action' => 'null',
            'location' => 'null',
            'propertylist' => new List<String>{''},
            'cqCommercePageeventlistenerEnabled' => Boolean.getExample()
        };

        OASClient client;
        OASConfigmgrApi api;
        OASComAdobeCqCommercePimImplPageEven response;
        OASComAdobeCqCommercePimImplPageEven expectedResponse;
        String js = '';

        client = new OASClient();
        api = new OASConfigmgrApi(client);

        js = JSON.serialize(OASComAdobeCqCommercePimImplPageEven.getExample());
        res.setHeader('Content-Type', 'application/json');
        res.setBody(js);
        expectedResponse = OASComAdobeCqCommercePimImplPageEven.getExample();
        response = (OASComAdobeCqCommercePimImplPageEven) api.comAdobeCqCommercePimImplPageEventListener(params);
        System.assertEquals(expectedResponse, response);
    }

    /**
     * 
     *
     * 
     */
    @isTest
    private static void comAdobeCqCommercePimImplProductfeedProductFeedServiceImplTest() {
        HttpResponse res = new HttpResponse();
        res.setStatusCode(200);
        res.setStatus('OK');
        Test.setMock(HttpCalloutMock.class, new OASResponseMock(res));

        Map<String, Object> params = new Map<String, Object>{
            'post' => Boolean.getExample(),
            'apply' => Boolean.getExample(),
            'r_delete' => Boolean.getExample(),
            'action' => 'null',
            'location' => 'null',
            'propertylist' => new List<String>{''},
            'feedGeneratorAlgorithm' => 'null'
        };

        OASClient client;
        OASConfigmgrApi api;
        OASComAdobeCqCommercePimImplProductf response;
        OASComAdobeCqCommercePimImplProductf expectedResponse;
        String js = '';

        client = new OASClient();
        api = new OASConfigmgrApi(client);

        js = JSON.serialize(OASComAdobeCqCommercePimImplProductf.getExample());
        res.setHeader('Content-Type', 'application/json');
        res.setBody(js);
        expectedResponse = OASComAdobeCqCommercePimImplProductf.getExample();
        response = (OASComAdobeCqCommercePimImplProductf) api.comAdobeCqCommercePimImplProductfeedProductFeedServiceImpl(params);
        System.assertEquals(expectedResponse, response);
    }

    /**
     * 
     *
     * 
     */
    @isTest
    private static void comAdobeCqContentinsightImplReportingServicesSettingsProviderTest() {
        HttpResponse res = new HttpResponse();
        res.setStatusCode(200);
        res.setStatus('OK');
        Test.setMock(HttpCalloutMock.class, new OASResponseMock(res));

        Map<String, Object> params = new Map<String, Object>{
            'post' => Boolean.getExample(),
            'apply' => Boolean.getExample(),
            'r_delete' => Boolean.getExample(),
            'action' => 'null',
            'location' => 'null',
            'propertylist' => new List<String>{''},
            'reportingservicesUrl' => 'null'
        };

        OASClient client;
        OASConfigmgrApi api;
        OASComAdobeCqContentinsightImplRepor response;
        OASComAdobeCqContentinsightImplRepor expectedResponse;
        String js = '';

        client = new OASClient();
        api = new OASConfigmgrApi(client);

        js = JSON.serialize(OASComAdobeCqContentinsightImplRepor.getExample());
        res.setHeader('Content-Type', 'application/json');
        res.setBody(js);
        expectedResponse = OASComAdobeCqContentinsightImplRepor.getExample();
        response = (OASComAdobeCqContentinsightImplRepor) api.comAdobeCqContentinsightImplReportingServicesSettingsProvider(params);
        System.assertEquals(expectedResponse, response);
    }

    /**
     * 
     *
     * 
     */
    @isTest
    private static void comAdobeCqContentinsightImplServletsBrightEdgeProxyServletTest() {
        HttpResponse res = new HttpResponse();
        res.setStatusCode(200);
        res.setStatus('OK');
        Test.setMock(HttpCalloutMock.class, new OASResponseMock(res));

        Map<String, Object> params = new Map<String, Object>{
            'post' => Boolean.getExample(),
            'apply' => Boolean.getExample(),
            'r_delete' => Boolean.getExample(),
            'action' => 'null',
            'location' => 'null',
            'propertylist' => new List<String>{''},
            'brightedgeUrl' => 'null'
        };

        OASClient client;
        OASConfigmgrApi api;
        OASComAdobeCqContentinsightImplServl response;
        OASComAdobeCqContentinsightImplServl expectedResponse;
        String js = '';

        client = new OASClient();
        api = new OASConfigmgrApi(client);

        js = JSON.serialize(OASComAdobeCqContentinsightImplServl.getExample());
        res.setHeader('Content-Type', 'application/json');
        res.setBody(js);
        expectedResponse = OASComAdobeCqContentinsightImplServl.getExample();
        response = (OASComAdobeCqContentinsightImplServl) api.comAdobeCqContentinsightImplServletsBrightEdgeProxyServlet(params);
        System.assertEquals(expectedResponse, response);
    }

    /**
     * 
     *
     * 
     */
    @isTest
    private static void comAdobeCqContentinsightImplServletsReportingServicesProxyServleTest() {
        HttpResponse res = new HttpResponse();
        res.setStatusCode(200);
        res.setStatus('OK');
        Test.setMock(HttpCalloutMock.class, new OASResponseMock(res));

        Map<String, Object> params = new Map<String, Object>{
            'post' => Boolean.getExample(),
            'apply' => Boolean.getExample(),
            'r_delete' => Boolean.getExample(),
            'action' => 'null',
            'location' => 'null',
            'propertylist' => new List<String>{''},
            'reportingservicesProxyWhitelist' => new List<String>{''}
        };

        OASClient client;
        OASConfigmgrApi api;
        OASComAdobeCqContentinsightImplServl response;
        OASComAdobeCqContentinsightImplServl expectedResponse;
        String js = '';

        client = new OASClient();
        api = new OASConfigmgrApi(client);

        js = JSON.serialize(OASComAdobeCqContentinsightImplServl.getExample());
        res.setHeader('Content-Type', 'application/json');
        res.setBody(js);
        expectedResponse = OASComAdobeCqContentinsightImplServl.getExample();
        response = (OASComAdobeCqContentinsightImplServl) api.comAdobeCqContentinsightImplServletsReportingServicesProxyServle(params);
        System.assertEquals(expectedResponse, response);
    }

    /**
     * 
     *
     * 
     */
    @isTest
    private static void comAdobeCqDamCfmImplComponentComponentConfigImplTest() {
        HttpResponse res = new HttpResponse();
        res.setStatusCode(200);
        res.setStatus('OK');
        Test.setMock(HttpCalloutMock.class, new OASResponseMock(res));

        Map<String, Object> params = new Map<String, Object>{
            'post' => Boolean.getExample(),
            'apply' => Boolean.getExample(),
            'r_delete' => Boolean.getExample(),
            'action' => 'null',
            'location' => 'null',
            'propertylist' => new List<String>{''},
            'damCfmComponentResourceType' => 'null',
            'damCfmComponentFileReferenceProp' => 'null',
            'damCfmComponentElementsProp' => 'null',
            'damCfmComponentVariationProp' => 'null'
        };

        OASClient client;
        OASConfigmgrApi api;
        OASComAdobeCqDamCfmImplComponentComp response;
        OASComAdobeCqDamCfmImplComponentComp expectedResponse;
        String js = '';

        client = new OASClient();
        api = new OASConfigmgrApi(client);

        js = JSON.serialize(OASComAdobeCqDamCfmImplComponentComp.getExample());
        res.setHeader('Content-Type', 'application/json');
        res.setBody(js);
        expectedResponse = OASComAdobeCqDamCfmImplComponentComp.getExample();
        response = (OASComAdobeCqDamCfmImplComponentComp) api.comAdobeCqDamCfmImplComponentComponentConfigImpl(params);
        System.assertEquals(expectedResponse, response);
    }

    /**
     * 
     *
     * 
     */
    @isTest
    private static void comAdobeCqDamCfmImplConfFeatureConfigImplTest() {
        HttpResponse res = new HttpResponse();
        res.setStatusCode(200);
        res.setStatus('OK');
        Test.setMock(HttpCalloutMock.class, new OASResponseMock(res));

        Map<String, Object> params = new Map<String, Object>{
            'post' => Boolean.getExample(),
            'apply' => Boolean.getExample(),
            'r_delete' => Boolean.getExample(),
            'action' => 'null',
            'location' => 'null',
            'propertylist' => new List<String>{''},
            'damCfmResourceTypes' => new List<String>{''},
            'damCfmReferenceProperties' => new List<String>{''}
        };

        OASClient client;
        OASConfigmgrApi api;
        OASComAdobeCqDamCfmImplConfFeatureCo response;
        OASComAdobeCqDamCfmImplConfFeatureCo expectedResponse;
        String js = '';

        client = new OASClient();
        api = new OASConfigmgrApi(client);

        js = JSON.serialize(OASComAdobeCqDamCfmImplConfFeatureCo.getExample());
        res.setHeader('Content-Type', 'application/json');
        res.setBody(js);
        expectedResponse = OASComAdobeCqDamCfmImplConfFeatureCo.getExample();
        response = (OASComAdobeCqDamCfmImplConfFeatureCo) api.comAdobeCqDamCfmImplConfFeatureConfigImpl(params);
        System.assertEquals(expectedResponse, response);
    }

    /**
     * 
     *
     * 
     */
    @isTest
    private static void comAdobeCqDamCfmImplContentRewriterAssetProcessorTest() {
        HttpResponse res = new HttpResponse();
        res.setStatusCode(200);
        res.setStatus('OK');
        Test.setMock(HttpCalloutMock.class, new OASResponseMock(res));

        Map<String, Object> params = new Map<String, Object>{
            'post' => Boolean.getExample(),
            'apply' => Boolean.getExample(),
            'r_delete' => Boolean.getExample(),
            'action' => 'null',
            'location' => 'null',
            'propertylist' => new List<String>{''},
            'pipelineType' => 'null'
        };

        OASClient client;
        OASConfigmgrApi api;
        OASComAdobeCqDamCfmImplContentRewrit response;
        OASComAdobeCqDamCfmImplContentRewrit expectedResponse;
        String js = '';

        client = new OASClient();
        api = new OASConfigmgrApi(client);

        js = JSON.serialize(OASComAdobeCqDamCfmImplContentRewrit.getExample());
        res.setHeader('Content-Type', 'application/json');
        res.setBody(js);
        expectedResponse = OASComAdobeCqDamCfmImplContentRewrit.getExample();
        response = (OASComAdobeCqDamCfmImplContentRewrit) api.comAdobeCqDamCfmImplContentRewriterAssetProcessor(params);
        System.assertEquals(expectedResponse, response);
    }

    /**
     * 
     *
     * 
     */
    @isTest
    private static void comAdobeCqDamCfmImplContentRewriterParRangeFilterTest() {
        HttpResponse res = new HttpResponse();
        res.setStatusCode(200);
        res.setStatus('OK');
        Test.setMock(HttpCalloutMock.class, new OASResponseMock(res));

        Map<String, Object> params = new Map<String, Object>{
            'post' => Boolean.getExample(),
            'apply' => Boolean.getExample(),
            'r_delete' => Boolean.getExample(),
            'action' => 'null',
            'location' => 'null',
            'propertylist' => new List<String>{''},
            'pipelineType' => 'null'
        };

        OASClient client;
        OASConfigmgrApi api;
        OASComAdobeCqDamCfmImplContentRewrit response;
        OASComAdobeCqDamCfmImplContentRewrit expectedResponse;
        String js = '';

        client = new OASClient();
        api = new OASConfigmgrApi(client);

        js = JSON.serialize(OASComAdobeCqDamCfmImplContentRewrit.getExample());
        res.setHeader('Content-Type', 'application/json');
        res.setBody(js);
        expectedResponse = OASComAdobeCqDamCfmImplContentRewrit.getExample();
        response = (OASComAdobeCqDamCfmImplContentRewrit) api.comAdobeCqDamCfmImplContentRewriterParRangeFilter(params);
        System.assertEquals(expectedResponse, response);
    }

    /**
     * 
     *
     * 
     */
    @isTest
    private static void comAdobeCqDamCfmImplContentRewriterPayloadFilterTest() {
        HttpResponse res = new HttpResponse();
        res.setStatusCode(200);
        res.setStatus('OK');
        Test.setMock(HttpCalloutMock.class, new OASResponseMock(res));

        Map<String, Object> params = new Map<String, Object>{
            'post' => Boolean.getExample(),
            'apply' => Boolean.getExample(),
            'r_delete' => Boolean.getExample(),
            'action' => 'null',
            'location' => 'null',
            'propertylist' => new List<String>{''},
            'pipelineType' => 'null'
        };

        OASClient client;
        OASConfigmgrApi api;
        OASComAdobeCqDamCfmImplContentRewrit response;
        OASComAdobeCqDamCfmImplContentRewrit expectedResponse;
        String js = '';

        client = new OASClient();
        api = new OASConfigmgrApi(client);

        js = JSON.serialize(OASComAdobeCqDamCfmImplContentRewrit.getExample());
        res.setHeader('Content-Type', 'application/json');
        res.setBody(js);
        expectedResponse = OASComAdobeCqDamCfmImplContentRewrit.getExample();
        response = (OASComAdobeCqDamCfmImplContentRewrit) api.comAdobeCqDamCfmImplContentRewriterPayloadFilter(params);
        System.assertEquals(expectedResponse, response);
    }

    /**
     * 
     *
     * 
     */
    @isTest
    private static void comAdobeCqDamDmProcessImagePTiffManagerImplTest() {
        HttpResponse res = new HttpResponse();
        res.setStatusCode(200);
        res.setStatus('OK');
        Test.setMock(HttpCalloutMock.class, new OASResponseMock(res));

        Map<String, Object> params = new Map<String, Object>{
            'post' => Boolean.getExample(),
            'apply' => Boolean.getExample(),
            'r_delete' => Boolean.getExample(),
            'action' => 'null',
            'location' => 'null',
            'propertylist' => new List<String>{''},
            'maxMemory' => Integer.getExample()
        };

        OASClient client;
        OASConfigmgrApi api;
        OASComAdobeCqDamDmProcessImagePTiffM response;
        OASComAdobeCqDamDmProcessImagePTiffM expectedResponse;
        String js = '';

        client = new OASClient();
        api = new OASConfigmgrApi(client);

        js = JSON.serialize(OASComAdobeCqDamDmProcessImagePTiffM.getExample());
        res.setHeader('Content-Type', 'application/json');
        res.setBody(js);
        expectedResponse = OASComAdobeCqDamDmProcessImagePTiffM.getExample();
        response = (OASComAdobeCqDamDmProcessImagePTiffM) api.comAdobeCqDamDmProcessImagePTiffManagerImpl(params);
        System.assertEquals(expectedResponse, response);
    }

    /**
     * 
     *
     * 
     */
    @isTest
    private static void comAdobeCqDamIpsImplReplicationTriggerReplicateOnModifyWorkerTest() {
        HttpResponse res = new HttpResponse();
        res.setStatusCode(200);
        res.setStatus('OK');
        Test.setMock(HttpCalloutMock.class, new OASResponseMock(res));

        Map<String, Object> params = new Map<String, Object>{
            'post' => Boolean.getExample(),
            'apply' => Boolean.getExample(),
            'r_delete' => Boolean.getExample(),
            'action' => 'null',
            'location' => 'null',
            'propertylist' => new List<String>{''},
            'dmreplicateonmodifyEnabled' => Boolean.getExample(),
            'dmreplicateonmodifyForcesyncdeletes' => Boolean.getExample()
        };

        OASClient client;
        OASConfigmgrApi api;
        OASComAdobeCqDamIpsImplReplicationTr response;
        OASComAdobeCqDamIpsImplReplicationTr expectedResponse;
        String js = '';

        client = new OASClient();
        api = new OASConfigmgrApi(client);

        js = JSON.serialize(OASComAdobeCqDamIpsImplReplicationTr.getExample());
        res.setHeader('Content-Type', 'application/json');
        res.setBody(js);
        expectedResponse = OASComAdobeCqDamIpsImplReplicationTr.getExample();
        response = (OASComAdobeCqDamIpsImplReplicationTr) api.comAdobeCqDamIpsImplReplicationTriggerReplicateOnModifyWorker(params);
        System.assertEquals(expectedResponse, response);
    }

    /**
     * 
     *
     * 
     */
    @isTest
    private static void comAdobeCqDamMacSyncHelperImplMACSyncClientImplTest() {
        HttpResponse res = new HttpResponse();
        res.setStatusCode(200);
        res.setStatus('OK');
        Test.setMock(HttpCalloutMock.class, new OASResponseMock(res));

        Map<String, Object> params = new Map<String, Object>{
            'post' => Boolean.getExample(),
            'apply' => Boolean.getExample(),
            'r_delete' => Boolean.getExample(),
            'action' => 'null',
            'location' => 'null',
            'propertylist' => new List<String>{''},
            'comAdobeDamMacSyncClientSoTimeout' => Integer.getExample()
        };

        OASClient client;
        OASConfigmgrApi api;
        OASComAdobeCqDamMacSyncHelperImplMAC response;
        OASComAdobeCqDamMacSyncHelperImplMAC expectedResponse;
        String js = '';

        client = new OASClient();
        api = new OASConfigmgrApi(client);

        js = JSON.serialize(OASComAdobeCqDamMacSyncHelperImplMAC.getExample());
        res.setHeader('Content-Type', 'application/json');
        res.setBody(js);
        expectedResponse = OASComAdobeCqDamMacSyncHelperImplMAC.getExample();
        response = (OASComAdobeCqDamMacSyncHelperImplMAC) api.comAdobeCqDamMacSyncHelperImplMACSyncClientImpl(params);
        System.assertEquals(expectedResponse, response);
    }

    /**
     * 
     *
     * 
     */
    @isTest
    private static void comAdobeCqDamMacSyncImplDAMSyncServiceImplTest() {
        HttpResponse res = new HttpResponse();
        res.setStatusCode(200);
        res.setStatus('OK');
        Test.setMock(HttpCalloutMock.class, new OASResponseMock(res));

        Map<String, Object> params = new Map<String, Object>{
            'post' => Boolean.getExample(),
            'apply' => Boolean.getExample(),
            'r_delete' => Boolean.getExample(),
            'action' => 'null',
            'location' => 'null',
            'propertylist' => new List<String>{''},
            'comAdobeCqDamMacSyncDamsyncserviceRegisteredPaths' => new List<String>{''},
            'comAdobeCqDamMacSyncDamsyncserviceSyncRenditions' => Boolean.getExample(),
            'comAdobeCqDamMacSyncDamsyncserviceReplicateThreadWaitMs' => Integer.getExample(),
            'comAdobeCqDamMacSyncDamsyncservicePlatform' => 'null'
        };

        OASClient client;
        OASConfigmgrApi api;
        OASComAdobeCqDamMacSyncImplDAMSyncSe response;
        OASComAdobeCqDamMacSyncImplDAMSyncSe expectedResponse;
        String js = '';

        client = new OASClient();
        api = new OASConfigmgrApi(client);

        js = JSON.serialize(OASComAdobeCqDamMacSyncImplDAMSyncSe.getExample());
        res.setHeader('Content-Type', 'application/json');
        res.setBody(js);
        expectedResponse = OASComAdobeCqDamMacSyncImplDAMSyncSe.getExample();
        response = (OASComAdobeCqDamMacSyncImplDAMSyncSe) api.comAdobeCqDamMacSyncImplDAMSyncServiceImpl(params);
        System.assertEquals(expectedResponse, response);
    }

    /**
     * 
     *
     * 
     */
    @isTest
    private static void comAdobeCqDamProcessorNuiImplNuiAssetProcessorTest() {
        HttpResponse res = new HttpResponse();
        res.setStatusCode(200);
        res.setStatus('OK');
        Test.setMock(HttpCalloutMock.class, new OASResponseMock(res));

        Map<String, Object> params = new Map<String, Object>{
            'post' => Boolean.getExample(),
            'apply' => Boolean.getExample(),
            'r_delete' => Boolean.getExample(),
            'action' => 'null',
            'location' => 'null',
            'propertylist' => new List<String>{''},
            'nuiEnabled' => Boolean.getExample(),
            'nuiServiceUrl' => 'null',
            'nuiApiKey' => 'null'
        };

        OASClient client;
        OASConfigmgrApi api;
        OASComAdobeCqDamProcessorNuiImplNuiA response;
        OASComAdobeCqDamProcessorNuiImplNuiA expectedResponse;
        String js = '';

        client = new OASClient();
        api = new OASConfigmgrApi(client);

        js = JSON.serialize(OASComAdobeCqDamProcessorNuiImplNuiA.getExample());
        res.setHeader('Content-Type', 'application/json');
        res.setBody(js);
        expectedResponse = OASComAdobeCqDamProcessorNuiImplNuiA.getExample();
        response = (OASComAdobeCqDamProcessorNuiImplNuiA) api.comAdobeCqDamProcessorNuiImplNuiAssetProcessor(params);
        System.assertEquals(expectedResponse, response);
    }

    /**
     * 
     *
     * 
     */
    @isTest
    private static void comAdobeCqDamS7imagingImplIsImageServerComponentTest() {
        HttpResponse res = new HttpResponse();
        res.setStatusCode(200);
        res.setStatus('OK');
        Test.setMock(HttpCalloutMock.class, new OASResponseMock(res));

        Map<String, Object> params = new Map<String, Object>{
            'post' => Boolean.getExample(),
            'apply' => Boolean.getExample(),
            'r_delete' => Boolean.getExample(),
            'action' => 'null',
            'location' => 'null',
            'propertylist' => new List<String>{''},
            'tcpPort' => 'null',
            'allowRemoteAccess' => Boolean.getExample(),
            'maxRenderRgnPixels' => 'null',
            'maxMessageSize' => 'null',
            'randomAccessUrlTimeout' => Integer.getExample(),
            'workerThreads' => Integer.getExample()
        };

        OASClient client;
        OASConfigmgrApi api;
        OASComAdobeCqDamS7imagingImplIsImage response;
        OASComAdobeCqDamS7imagingImplIsImage expectedResponse;
        String js = '';

        client = new OASClient();
        api = new OASConfigmgrApi(client);

        js = JSON.serialize(OASComAdobeCqDamS7imagingImplIsImage.getExample());
        res.setHeader('Content-Type', 'application/json');
        res.setBody(js);
        expectedResponse = OASComAdobeCqDamS7imagingImplIsImage.getExample();
        response = (OASComAdobeCqDamS7imagingImplIsImage) api.comAdobeCqDamS7imagingImplIsImageServerComponent(params);
        System.assertEquals(expectedResponse, response);
    }

    /**
     * 
     *
     * 
     */
    @isTest
    private static void comAdobeCqDamS7imagingImplPsPlatformServerServletTest() {
        HttpResponse res = new HttpResponse();
        res.setStatusCode(200);
        res.setStatus('OK');
        Test.setMock(HttpCalloutMock.class, new OASResponseMock(res));

        Map<String, Object> params = new Map<String, Object>{
            'post' => Boolean.getExample(),
            'apply' => Boolean.getExample(),
            'r_delete' => Boolean.getExample(),
            'action' => 'null',
            'location' => 'null',
            'propertylist' => new List<String>{''},
            'cacheEnable' => Boolean.getExample(),
            'cacheRootPaths' => new List<String>{''},
            'cacheMaxSize' => Integer.getExample(),
            'cacheMaxEntries' => Integer.getExample()
        };

        OASClient client;
        OASConfigmgrApi api;
        OASComAdobeCqDamS7imagingImplPsPlatf response;
        OASComAdobeCqDamS7imagingImplPsPlatf expectedResponse;
        String js = '';

        client = new OASClient();
        api = new OASConfigmgrApi(client);

        js = JSON.serialize(OASComAdobeCqDamS7imagingImplPsPlatf.getExample());
        res.setHeader('Content-Type', 'application/json');
        res.setBody(js);
        expectedResponse = OASComAdobeCqDamS7imagingImplPsPlatf.getExample();
        response = (OASComAdobeCqDamS7imagingImplPsPlatf) api.comAdobeCqDamS7imagingImplPsPlatformServerServlet(params);
        System.assertEquals(expectedResponse, response);
    }

    /**
     * 
     *
     * 
     */
    @isTest
    private static void comAdobeCqDamWebdavImplIoAssetIOHandlerTest() {
        HttpResponse res = new HttpResponse();
        res.setStatusCode(200);
        res.setStatus('OK');
        Test.setMock(HttpCalloutMock.class, new OASResponseMock(res));

        Map<String, Object> params = new Map<String, Object>{
            'post' => Boolean.getExample(),
            'apply' => Boolean.getExample(),
            'r_delete' => Boolean.getExample(),
            'action' => 'null',
            'location' => 'null',
            'propertylist' => new List<String>{''},
            'serviceRanking' => Integer.getExample(),
            'pathPrefix' => 'null',
            'createVersion' => Boolean.getExample()
        };

        OASClient client;
        OASConfigmgrApi api;
        OASComAdobeCqDamWebdavImplIoAssetIOH response;
        OASComAdobeCqDamWebdavImplIoAssetIOH expectedResponse;
        String js = '';

        client = new OASClient();
        api = new OASConfigmgrApi(client);

        js = JSON.serialize(OASComAdobeCqDamWebdavImplIoAssetIOH.getExample());
        res.setHeader('Content-Type', 'application/json');
        res.setBody(js);
        expectedResponse = OASComAdobeCqDamWebdavImplIoAssetIOH.getExample();
        response = (OASComAdobeCqDamWebdavImplIoAssetIOH) api.comAdobeCqDamWebdavImplIoAssetIOHandler(params);
        System.assertEquals(expectedResponse, response);
    }

    /**
     * 
     *
     * 
     */
    @isTest
    private static void comAdobeCqDamWebdavImplIoDamWebdavVersionLinkingJobTest() {
        HttpResponse res = new HttpResponse();
        res.setStatusCode(200);
        res.setStatus('OK');
        Test.setMock(HttpCalloutMock.class, new OASResponseMock(res));

        Map<String, Object> params = new Map<String, Object>{
            'post' => Boolean.getExample(),
            'apply' => Boolean.getExample(),
            'r_delete' => Boolean.getExample(),
            'action' => 'null',
            'location' => 'null',
            'propertylist' => new List<String>{''},
            'cqDamWebdavVersionLinkingEnable' => Boolean.getExample(),
            'cqDamWebdavVersionLinkingSchedulerPeriod' => Integer.getExample(),
            'cqDamWebdavVersionLinkingStagingTimeout' => Integer.getExample()
        };

        OASClient client;
        OASConfigmgrApi api;
        OASComAdobeCqDamWebdavImplIoDamWebda response;
        OASComAdobeCqDamWebdavImplIoDamWebda expectedResponse;
        String js = '';

        client = new OASClient();
        api = new OASConfigmgrApi(client);

        js = JSON.serialize(OASComAdobeCqDamWebdavImplIoDamWebda.getExample());
        res.setHeader('Content-Type', 'application/json');
        res.setBody(js);
        expectedResponse = OASComAdobeCqDamWebdavImplIoDamWebda.getExample();
        response = (OASComAdobeCqDamWebdavImplIoDamWebda) api.comAdobeCqDamWebdavImplIoDamWebdavVersionLinkingJob(params);
        System.assertEquals(expectedResponse, response);
    }

    /**
     * 
     *
     * 
     */
    @isTest
    private static void comAdobeCqDamWebdavImplIoSpecialFilesHandlerTest() {
        HttpResponse res = new HttpResponse();
        res.setStatusCode(200);
        res.setStatus('OK');
        Test.setMock(HttpCalloutMock.class, new OASResponseMock(res));

        Map<String, Object> params = new Map<String, Object>{
            'post' => Boolean.getExample(),
            'apply' => Boolean.getExample(),
            'r_delete' => Boolean.getExample(),
            'action' => 'null',
            'location' => 'null',
            'propertylist' => new List<String>{''},
            'comDayCqDamCoreImplIoSpecialFilesHandlerFilepatters' => new List<String>{''}
        };

        OASClient client;
        OASConfigmgrApi api;
        OASComAdobeCqDamWebdavImplIoSpecialF response;
        OASComAdobeCqDamWebdavImplIoSpecialF expectedResponse;
        String js = '';

        client = new OASClient();
        api = new OASConfigmgrApi(client);

        js = JSON.serialize(OASComAdobeCqDamWebdavImplIoSpecialF.getExample());
        res.setHeader('Content-Type', 'application/json');
        res.setBody(js);
        expectedResponse = OASComAdobeCqDamWebdavImplIoSpecialF.getExample();
        response = (OASComAdobeCqDamWebdavImplIoSpecialF) api.comAdobeCqDamWebdavImplIoSpecialFilesHandler(params);
        System.assertEquals(expectedResponse, response);
    }

    /**
     * 
     *
     * 
     */
    @isTest
    private static void comAdobeCqDeserfwImplDeserializationFirewallImplTest() {
        HttpResponse res = new HttpResponse();
        res.setStatusCode(200);
        res.setStatus('OK');
        Test.setMock(HttpCalloutMock.class, new OASResponseMock(res));

        Map<String, Object> params = new Map<String, Object>{
            'post' => Boolean.getExample(),
            'apply' => Boolean.getExample(),
            'r_delete' => Boolean.getExample(),
            'action' => 'null',
            'location' => 'null',
            'propertylist' => new List<String>{''},
            'firewallDeserializationWhitelist' => new List<String>{''},
            'firewallDeserializationBlacklist' => new List<String>{''},
            'firewallDeserializationDiagnostics' => 'null'
        };

        OASClient client;
        OASConfigmgrApi api;
        OASComAdobeCqDeserfwImplDeserializat response;
        OASComAdobeCqDeserfwImplDeserializat expectedResponse;
        String js = '';

        client = new OASClient();
        api = new OASConfigmgrApi(client);

        js = JSON.serialize(OASComAdobeCqDeserfwImplDeserializat.getExample());
        res.setHeader('Content-Type', 'application/json');
        res.setBody(js);
        expectedResponse = OASComAdobeCqDeserfwImplDeserializat.getExample();
        response = (OASComAdobeCqDeserfwImplDeserializat) api.comAdobeCqDeserfwImplDeserializationFirewallImpl(params);
        System.assertEquals(expectedResponse, response);
    }

    /**
     * 
     *
     * 
     */
    @isTest
    private static void comAdobeCqDtmImplServiceDTMWebServiceImplTest() {
        HttpResponse res = new HttpResponse();
        res.setStatusCode(200);
        res.setStatus('OK');
        Test.setMock(HttpCalloutMock.class, new OASResponseMock(res));

        Map<String, Object> params = new Map<String, Object>{
            'post' => Boolean.getExample(),
            'apply' => Boolean.getExample(),
            'r_delete' => Boolean.getExample(),
            'action' => 'null',
            'location' => 'null',
            'propertylist' => new List<String>{''},
            'connectionTimeout' => Integer.getExample(),
            'socketTimeout' => Integer.getExample()
        };

        OASClient client;
        OASConfigmgrApi api;
        OASComAdobeCqDtmImplServiceDTMWebSer response;
        OASComAdobeCqDtmImplServiceDTMWebSer expectedResponse;
        String js = '';

        client = new OASClient();
        api = new OASConfigmgrApi(client);

        js = JSON.serialize(OASComAdobeCqDtmImplServiceDTMWebSer.getExample());
        res.setHeader('Content-Type', 'application/json');
        res.setBody(js);
        expectedResponse = OASComAdobeCqDtmImplServiceDTMWebSer.getExample();
        response = (OASComAdobeCqDtmImplServiceDTMWebSer) api.comAdobeCqDtmImplServiceDTMWebServiceImpl(params);
        System.assertEquals(expectedResponse, response);
    }

    /**
     * 
     *
     * 
     */
    @isTest
    private static void comAdobeCqDtmImplServletsDTMDeployHookServletTest() {
        HttpResponse res = new HttpResponse();
        res.setStatusCode(200);
        res.setStatus('OK');
        Test.setMock(HttpCalloutMock.class, new OASResponseMock(res));

        Map<String, Object> params = new Map<String, Object>{
            'post' => Boolean.getExample(),
            'apply' => Boolean.getExample(),
            'r_delete' => Boolean.getExample(),
            'action' => 'null',
            'location' => 'null',
            'propertylist' => new List<String>{''},
            'dtmStagingIpWhitelist' => new List<String>{''},
            'dtmProductionIpWhitelist' => new List<String>{''}
        };

        OASClient client;
        OASConfigmgrApi api;
        OASComAdobeCqDtmImplServletsDTMDeplo response;
        OASComAdobeCqDtmImplServletsDTMDeplo expectedResponse;
        String js = '';

        client = new OASClient();
        api = new OASConfigmgrApi(client);

        js = JSON.serialize(OASComAdobeCqDtmImplServletsDTMDeplo.getExample());
        res.setHeader('Content-Type', 'application/json');
        res.setBody(js);
        expectedResponse = OASComAdobeCqDtmImplServletsDTMDeplo.getExample();
        response = (OASComAdobeCqDtmImplServletsDTMDeplo) api.comAdobeCqDtmImplServletsDTMDeployHookServlet(params);
        System.assertEquals(expectedResponse, response);
    }

    /**
     * 
     *
     * 
     */
    @isTest
    private static void comAdobeCqDtmReactorImplServiceWebServiceImplTest() {
        HttpResponse res = new HttpResponse();
        res.setStatusCode(200);
        res.setStatus('OK');
        Test.setMock(HttpCalloutMock.class, new OASResponseMock(res));

        Map<String, Object> params = new Map<String, Object>{
            'post' => Boolean.getExample(),
            'apply' => Boolean.getExample(),
            'r_delete' => Boolean.getExample(),
            'action' => 'null',
            'location' => 'null',
            'propertylist' => new List<String>{''},
            'endpointUri' => 'null',
            'connectionTimeout' => Integer.getExample(),
            'socketTimeout' => Integer.getExample()
        };

        OASClient client;
        OASConfigmgrApi api;
        OASComAdobeCqDtmReactorImplServiceWe response;
        OASComAdobeCqDtmReactorImplServiceWe expectedResponse;
        String js = '';

        client = new OASClient();
        api = new OASConfigmgrApi(client);

        js = JSON.serialize(OASComAdobeCqDtmReactorImplServiceWe.getExample());
        res.setHeader('Content-Type', 'application/json');
        res.setBody(js);
        expectedResponse = OASComAdobeCqDtmReactorImplServiceWe.getExample();
        response = (OASComAdobeCqDtmReactorImplServiceWe) api.comAdobeCqDtmReactorImplServiceWebServiceImpl(params);
        System.assertEquals(expectedResponse, response);
    }

    /**
     * 
     *
     * 
     */
    @isTest
    private static void comAdobeCqExperiencelogImplExperienceLogConfigServletTest() {
        HttpResponse res = new HttpResponse();
        res.setStatusCode(200);
        res.setStatus('OK');
        Test.setMock(HttpCalloutMock.class, new OASResponseMock(res));

        Map<String, Object> params = new Map<String, Object>{
            'post' => Boolean.getExample(),
            'apply' => Boolean.getExample(),
            'r_delete' => Boolean.getExample(),
            'action' => 'null',
            'location' => 'null',
            'propertylist' => new List<String>{''},
            'enabled' => Boolean.getExample(),
            'disabledForGroups' => new List<String>{''}
        };

        OASClient client;
        OASConfigmgrApi api;
        OASComAdobeCqExperiencelogImplExperi response;
        OASComAdobeCqExperiencelogImplExperi expectedResponse;
        String js = '';

        client = new OASClient();
        api = new OASConfigmgrApi(client);

        js = JSON.serialize(OASComAdobeCqExperiencelogImplExperi.getExample());
        res.setHeader('Content-Type', 'application/json');
        res.setBody(js);
        expectedResponse = OASComAdobeCqExperiencelogImplExperi.getExample();
        response = (OASComAdobeCqExperiencelogImplExperi) api.comAdobeCqExperiencelogImplExperienceLogConfigServlet(params);
        System.assertEquals(expectedResponse, response);
    }

    /**
     * 
     *
     * 
     */
    @isTest
    private static void comAdobeCqHcContentPackagesHealthCheckTest() {
        HttpResponse res = new HttpResponse();
        res.setStatusCode(200);
        res.setStatus('OK');
        Test.setMock(HttpCalloutMock.class, new OASResponseMock(res));

        Map<String, Object> params = new Map<String, Object>{
            'post' => Boolean.getExample(),
            'apply' => Boolean.getExample(),
            'r_delete' => Boolean.getExample(),
            'action' => 'null',
            'location' => 'null',
            'propertylist' => new List<String>{''},
            'hcName' => 'null',
            'hcTags' => new List<String>{''},
            'hcMbeanName' => 'null',
            'packageNames' => new List<String>{''}
        };

        OASClient client;
        OASConfigmgrApi api;
        OASComAdobeCqHcContentPackagesHealth response;
        OASComAdobeCqHcContentPackagesHealth expectedResponse;
        String js = '';

        client = new OASClient();
        api = new OASConfigmgrApi(client);

        js = JSON.serialize(OASComAdobeCqHcContentPackagesHealth.getExample());
        res.setHeader('Content-Type', 'application/json');
        res.setBody(js);
        expectedResponse = OASComAdobeCqHcContentPackagesHealth.getExample();
        response = (OASComAdobeCqHcContentPackagesHealth) api.comAdobeCqHcContentPackagesHealthCheck(params);
        System.assertEquals(expectedResponse, response);
    }

    /**
     * 
     *
     * 
     */
    @isTest
    private static void comAdobeCqHistoryImplHistoryRequestFilterTest() {
        HttpResponse res = new HttpResponse();
        res.setStatusCode(200);
        res.setStatus('OK');
        Test.setMock(HttpCalloutMock.class, new OASResponseMock(res));

        Map<String, Object> params = new Map<String, Object>{
            'post' => Boolean.getExample(),
            'apply' => Boolean.getExample(),
            'r_delete' => Boolean.getExample(),
            'action' => 'null',
            'location' => 'null',
            'propertylist' => new List<String>{''},
            'historyRequestFilterExcludedSelectors' => new List<String>{''},
            'historyRequestFilterExcludedExtensions' => new List<String>{''}
        };

        OASClient client;
        OASConfigmgrApi api;
        OASComAdobeCqHistoryImplHistoryReque response;
        OASComAdobeCqHistoryImplHistoryReque expectedResponse;
        String js = '';

        client = new OASClient();
        api = new OASConfigmgrApi(client);

        js = JSON.serialize(OASComAdobeCqHistoryImplHistoryReque.getExample());
        res.setHeader('Content-Type', 'application/json');
        res.setBody(js);
        expectedResponse = OASComAdobeCqHistoryImplHistoryReque.getExample();
        response = (OASComAdobeCqHistoryImplHistoryReque) api.comAdobeCqHistoryImplHistoryRequestFilter(params);
        System.assertEquals(expectedResponse, response);
    }

    /**
     * 
     *
     * 
     */
    @isTest
    private static void comAdobeCqHistoryImplHistoryServiceImplTest() {
        HttpResponse res = new HttpResponse();
        res.setStatusCode(200);
        res.setStatus('OK');
        Test.setMock(HttpCalloutMock.class, new OASResponseMock(res));

        Map<String, Object> params = new Map<String, Object>{
            'post' => Boolean.getExample(),
            'apply' => Boolean.getExample(),
            'r_delete' => Boolean.getExample(),
            'action' => 'null',
            'location' => 'null',
            'propertylist' => new List<String>{''},
            'historyServiceResourceTypes' => new List<String>{''},
            'historyServicePathFilter' => new List<String>{''}
        };

        OASClient client;
        OASConfigmgrApi api;
        OASComAdobeCqHistoryImplHistoryServi response;
        OASComAdobeCqHistoryImplHistoryServi expectedResponse;
        String js = '';

        client = new OASClient();
        api = new OASConfigmgrApi(client);

        js = JSON.serialize(OASComAdobeCqHistoryImplHistoryServi.getExample());
        res.setHeader('Content-Type', 'application/json');
        res.setBody(js);
        expectedResponse = OASComAdobeCqHistoryImplHistoryServi.getExample();
        response = (OASComAdobeCqHistoryImplHistoryServi) api.comAdobeCqHistoryImplHistoryServiceImpl(params);
        System.assertEquals(expectedResponse, response);
    }

    /**
     * 
     *
     * 
     */
    @isTest
    private static void comAdobeCqInboxImplTypeproviderItemTypeProviderTest() {
        HttpResponse res = new HttpResponse();
        res.setStatusCode(200);
        res.setStatus('OK');
        Test.setMock(HttpCalloutMock.class, new OASResponseMock(res));

        Map<String, Object> params = new Map<String, Object>{
            'post' => Boolean.getExample(),
            'apply' => Boolean.getExample(),
            'r_delete' => Boolean.getExample(),
            'action' => 'null',
            'location' => 'null',
            'propertylist' => new List<String>{''},
            'inboxImplTypeproviderRegistrypaths' => new List<String>{''},
            'inboxImplTypeproviderLegacypaths' => new List<String>{''},
            'inboxImplTypeproviderDefaulturlFailureitem' => 'null',
            'inboxImplTypeproviderDefaulturlWorkitem' => 'null',
            'inboxImplTypeproviderDefaulturlTask' => 'null'
        };

        OASClient client;
        OASConfigmgrApi api;
        OASComAdobeCqInboxImplTypeproviderIt response;
        OASComAdobeCqInboxImplTypeproviderIt expectedResponse;
        String js = '';

        client = new OASClient();
        api = new OASConfigmgrApi(client);

        js = JSON.serialize(OASComAdobeCqInboxImplTypeproviderIt.getExample());
        res.setHeader('Content-Type', 'application/json');
        res.setBody(js);
        expectedResponse = OASComAdobeCqInboxImplTypeproviderIt.getExample();
        response = (OASComAdobeCqInboxImplTypeproviderIt) api.comAdobeCqInboxImplTypeproviderItemTypeProvider(params);
        System.assertEquals(expectedResponse, response);
    }

    /**
     * 
     *
     * 
     */
    @isTest
    private static void comAdobeCqProjectsImplServletProjectImageServletTest() {
        HttpResponse res = new HttpResponse();
        res.setStatusCode(200);
        res.setStatus('OK');
        Test.setMock(HttpCalloutMock.class, new OASResponseMock(res));

        Map<String, Object> params = new Map<String, Object>{
            'post' => Boolean.getExample(),
            'apply' => Boolean.getExample(),
            'r_delete' => Boolean.getExample(),
            'action' => 'null',
            'location' => 'null',
            'propertylist' => new List<String>{''},
            'imageQuality' => 'null',
            'imageSupportedResolutions' => 'null'
        };

        OASClient client;
        OASConfigmgrApi api;
        OASComAdobeCqProjectsImplServletProj response;
        OASComAdobeCqProjectsImplServletProj expectedResponse;
        String js = '';

        client = new OASClient();
        api = new OASConfigmgrApi(client);

        js = JSON.serialize(OASComAdobeCqProjectsImplServletProj.getExample());
        res.setHeader('Content-Type', 'application/json');
        res.setBody(js);
        expectedResponse = OASComAdobeCqProjectsImplServletProj.getExample();
        response = (OASComAdobeCqProjectsImplServletProj) api.comAdobeCqProjectsImplServletProjectImageServlet(params);
        System.assertEquals(expectedResponse, response);
    }

    /**
     * 
     *
     * 
     */
    @isTest
    private static void comAdobeCqProjectsPurgeSchedulerTest() {
        HttpResponse res = new HttpResponse();
        res.setStatusCode(200);
        res.setStatus('OK');
        Test.setMock(HttpCalloutMock.class, new OASResponseMock(res));

        Map<String, Object> params = new Map<String, Object>{
            'post' => Boolean.getExample(),
            'apply' => Boolean.getExample(),
            'r_delete' => Boolean.getExample(),
            'action' => 'null',
            'location' => 'null',
            'propertylist' => new List<String>{''},
            'scheduledpurgeName' => 'null',
            'scheduledpurgePurgeActive' => Boolean.getExample(),
            'scheduledpurgeTemplates' => new List<String>{''},
            'scheduledpurgePurgeGroups' => Boolean.getExample(),
            'scheduledpurgePurgeAssets' => Boolean.getExample(),
            'scheduledpurgeTerminateRunningWorkflows' => Boolean.getExample(),
            'scheduledpurgeDaysold' => Integer.getExample(),
            'scheduledpurgeSaveThreshold' => Integer.getExample()
        };

        OASClient client;
        OASConfigmgrApi api;
        OASComAdobeCqProjectsPurgeSchedulerI response;
        OASComAdobeCqProjectsPurgeSchedulerI expectedResponse;
        String js = '';

        client = new OASClient();
        api = new OASConfigmgrApi(client);

        js = JSON.serialize(OASComAdobeCqProjectsPurgeSchedulerI.getExample());
        res.setHeader('Content-Type', 'application/json');
        res.setBody(js);
        expectedResponse = OASComAdobeCqProjectsPurgeSchedulerI.getExample();
        response = (OASComAdobeCqProjectsPurgeSchedulerI) api.comAdobeCqProjectsPurgeScheduler(params);
        System.assertEquals(expectedResponse, response);
    }

    /**
     * 
     *
     * 
     */
    @isTest
    private static void comAdobeCqScheduledExporterImplScheduledExporterImplTest() {
        HttpResponse res = new HttpResponse();
        res.setStatusCode(200);
        res.setStatus('OK');
        Test.setMock(HttpCalloutMock.class, new OASResponseMock(res));

        Map<String, Object> params = new Map<String, Object>{
            'post' => Boolean.getExample(),
            'apply' => Boolean.getExample(),
            'r_delete' => Boolean.getExample(),
            'action' => 'null',
            'location' => 'null',
            'propertylist' => new List<String>{''},
            'includePaths' => new List<String>{''},
            'exporterUser' => 'null'
        };

        OASClient client;
        OASConfigmgrApi api;
        OASComAdobeCqScheduledExporterImplSc response;
        OASComAdobeCqScheduledExporterImplSc expectedResponse;
        String js = '';

        client = new OASClient();
        api = new OASConfigmgrApi(client);

        js = JSON.serialize(OASComAdobeCqScheduledExporterImplSc.getExample());
        res.setHeader('Content-Type', 'application/json');
        res.setBody(js);
        expectedResponse = OASComAdobeCqScheduledExporterImplSc.getExample();
        response = (OASComAdobeCqScheduledExporterImplSc) api.comAdobeCqScheduledExporterImplScheduledExporterImpl(params);
        System.assertEquals(expectedResponse, response);
    }

    /**
     * 
     *
     * 
     */
    @isTest
    private static void comAdobeCqScreensAnalyticsImplScreensAnalyticsServiceImplTest() {
        HttpResponse res = new HttpResponse();
        res.setStatusCode(200);
        res.setStatus('OK');
        Test.setMock(HttpCalloutMock.class, new OASResponseMock(res));

        Map<String, Object> params = new Map<String, Object>{
            'post' => Boolean.getExample(),
            'apply' => Boolean.getExample(),
            'r_delete' => Boolean.getExample(),
            'action' => 'null',
            'location' => 'null',
            'propertylist' => new List<String>{''},
            'comAdobeCqScreensAnalyticsImplUrl' => 'null',
            'comAdobeCqScreensAnalyticsImplApikey' => 'null',
            'comAdobeCqScreensAnalyticsImplProject' => 'null',
            'comAdobeCqScreensAnalyticsImplEnvironment' => 'null',
            'comAdobeCqScreensAnalyticsImplSendFrequency' => Integer.getExample()
        };

        OASClient client;
        OASConfigmgrApi api;
        OASComAdobeCqScreensAnalyticsImplScr response;
        OASComAdobeCqScreensAnalyticsImplScr expectedResponse;
        String js = '';

        client = new OASClient();
        api = new OASConfigmgrApi(client);

        js = JSON.serialize(OASComAdobeCqScreensAnalyticsImplScr.getExample());
        res.setHeader('Content-Type', 'application/json');
        res.setBody(js);
        expectedResponse = OASComAdobeCqScreensAnalyticsImplScr.getExample();
        response = (OASComAdobeCqScreensAnalyticsImplScr) api.comAdobeCqScreensAnalyticsImplScreensAnalyticsServiceImpl(params);
        System.assertEquals(expectedResponse, response);
    }

    /**
     * 
     *
     * 
     */
    @isTest
    private static void comAdobeCqScreensDeviceImplDeviceServiceTest() {
        HttpResponse res = new HttpResponse();
        res.setStatusCode(200);
        res.setStatus('OK');
        Test.setMock(HttpCalloutMock.class, new OASResponseMock(res));

        Map<String, Object> params = new Map<String, Object>{
            'post' => Boolean.getExample(),
            'apply' => Boolean.getExample(),
            'r_delete' => Boolean.getExample(),
            'action' => 'null',
            'location' => 'null',
            'propertylist' => new List<String>{''},
            'comAdobeAemScreensPlayerPingfrequency' => Integer.getExample(),
            'comAdobeAemScreensDevicePaswordSpecialchars' => 'null',
            'comAdobeAemScreensDevicePaswordMinlowercasechars' => Integer.getExample(),
            'comAdobeAemScreensDevicePaswordMinuppercasechars' => Integer.getExample(),
            'comAdobeAemScreensDevicePaswordMinnumberchars' => Integer.getExample(),
            'comAdobeAemScreensDevicePaswordMinspecialchars' => Integer.getExample(),
            'comAdobeAemScreensDevicePaswordMinlength' => Integer.getExample()
        };

        OASClient client;
        OASConfigmgrApi api;
        OASComAdobeCqScreensDeviceImplDevice response;
        OASComAdobeCqScreensDeviceImplDevice expectedResponse;
        String js = '';

        client = new OASClient();
        api = new OASConfigmgrApi(client);

        js = JSON.serialize(OASComAdobeCqScreensDeviceImplDevice.getExample());
        res.setHeader('Content-Type', 'application/json');
        res.setBody(js);
        expectedResponse = OASComAdobeCqScreensDeviceImplDevice.getExample();
        response = (OASComAdobeCqScreensDeviceImplDevice) api.comAdobeCqScreensDeviceImplDeviceService(params);
        System.assertEquals(expectedResponse, response);
    }

    /**
     * 
     *
     * 
     */
    @isTest
    private static void comAdobeCqScreensDeviceRegistrationImplRegistrationServiceImplTest() {
        HttpResponse res = new HttpResponse();
        res.setStatusCode(200);
        res.setStatus('OK');
        Test.setMock(HttpCalloutMock.class, new OASResponseMock(res));

        Map<String, Object> params = new Map<String, Object>{
            'post' => Boolean.getExample(),
            'apply' => Boolean.getExample(),
            'r_delete' => Boolean.getExample(),
            'action' => 'null',
            'location' => 'null',
            'propertylist' => new List<String>{''},
            'deviceRegistrationTimeout' => Integer.getExample()
        };

        OASClient client;
        OASConfigmgrApi api;
        OASComAdobeCqScreensDeviceRegistrati response;
        OASComAdobeCqScreensDeviceRegistrati expectedResponse;
        String js = '';

        client = new OASClient();
        api = new OASConfigmgrApi(client);

        js = JSON.serialize(OASComAdobeCqScreensDeviceRegistrati.getExample());
        res.setHeader('Content-Type', 'application/json');
        res.setBody(js);
        expectedResponse = OASComAdobeCqScreensDeviceRegistrati.getExample();
        response = (OASComAdobeCqScreensDeviceRegistrati) api.comAdobeCqScreensDeviceRegistrationImplRegistrationServiceImpl(params);
        System.assertEquals(expectedResponse, response);
    }

    /**
     * 
     *
     * 
     */
    @isTest
    private static void comAdobeCqScreensImplHandlerChannelsUpdateHandlerTest() {
        HttpResponse res = new HttpResponse();
        res.setStatusCode(200);
        res.setStatus('OK');
        Test.setMock(HttpCalloutMock.class, new OASResponseMock(res));

        Map<String, Object> params = new Map<String, Object>{
            'post' => Boolean.getExample(),
            'apply' => Boolean.getExample(),
            'r_delete' => Boolean.getExample(),
            'action' => 'null',
            'location' => 'null',
            'propertylist' => new List<String>{''},
            'cqPagesupdatehandlerImageresourcetypes' => new List<String>{''},
            'cqPagesupdatehandlerProductresourcetypes' => new List<String>{''},
            'cqPagesupdatehandlerVideoresourcetypes' => new List<String>{''},
            'cqPagesupdatehandlerDynamicsequenceresourcetypes' => new List<String>{''},
            'cqPagesupdatehandlerPreviewmodepaths' => new List<String>{''}
        };

        OASClient client;
        OASConfigmgrApi api;
        OASComAdobeCqScreensImplHandlerChann response;
        OASComAdobeCqScreensImplHandlerChann expectedResponse;
        String js = '';

        client = new OASClient();
        api = new OASConfigmgrApi(client);

        js = JSON.serialize(OASComAdobeCqScreensImplHandlerChann.getExample());
        res.setHeader('Content-Type', 'application/json');
        res.setBody(js);
        expectedResponse = OASComAdobeCqScreensImplHandlerChann.getExample();
        response = (OASComAdobeCqScreensImplHandlerChann) api.comAdobeCqScreensImplHandlerChannelsUpdateHandler(params);
        System.assertEquals(expectedResponse, response);
    }

    /**
     * 
     *
     * 
     */
    @isTest
    private static void comAdobeCqScreensImplJobsDistributedDevicesStatiUpdateJobTest() {
        HttpResponse res = new HttpResponse();
        res.setStatusCode(200);
        res.setStatus('OK');
        Test.setMock(HttpCalloutMock.class, new OASResponseMock(res));

        Map<String, Object> params = new Map<String, Object>{
            'post' => Boolean.getExample(),
            'apply' => Boolean.getExample(),
            'r_delete' => Boolean.getExample(),
            'action' => 'null',
            'location' => 'null',
            'propertylist' => new List<String>{''},
            'schedulerExpression' => 'null'
        };

        OASClient client;
        OASConfigmgrApi api;
        OASComAdobeCqScreensImplJobsDistribu response;
        OASComAdobeCqScreensImplJobsDistribu expectedResponse;
        String js = '';

        client = new OASClient();
        api = new OASConfigmgrApi(client);

        js = JSON.serialize(OASComAdobeCqScreensImplJobsDistribu.getExample());
        res.setHeader('Content-Type', 'application/json');
        res.setBody(js);
        expectedResponse = OASComAdobeCqScreensImplJobsDistribu.getExample();
        response = (OASComAdobeCqScreensImplJobsDistribu) api.comAdobeCqScreensImplJobsDistributedDevicesStatiUpdateJob(params);
        System.assertEquals(expectedResponse, response);
    }

    /**
     * 
     *
     * 
     */
    @isTest
    private static void comAdobeCqScreensImplRemoteImplDistributedHttpClientImplTest() {
        HttpResponse res = new HttpResponse();
        res.setStatusCode(200);
        res.setStatus('OK');
        Test.setMock(HttpCalloutMock.class, new OASResponseMock(res));

        Map<String, Object> params = new Map<String, Object>{
            'post' => Boolean.getExample(),
            'apply' => Boolean.getExample(),
            'r_delete' => Boolean.getExample(),
            'action' => 'null',
            'location' => 'null',
            'propertylist' => new List<String>{''},
            'comAdobeAemScreensImplRemoteRequestTimeout' => Integer.getExample()
        };

        OASClient client;
        OASConfigmgrApi api;
        OASComAdobeCqScreensImplRemoteImplDi response;
        OASComAdobeCqScreensImplRemoteImplDi expectedResponse;
        String js = '';

        client = new OASClient();
        api = new OASConfigmgrApi(client);

        js = JSON.serialize(OASComAdobeCqScreensImplRemoteImplDi.getExample());
        res.setHeader('Content-Type', 'application/json');
        res.setBody(js);
        expectedResponse = OASComAdobeCqScreensImplRemoteImplDi.getExample();
        response = (OASComAdobeCqScreensImplRemoteImplDi) api.comAdobeCqScreensImplRemoteImplDistributedHttpClientImpl(params);
        System.assertEquals(expectedResponse, response);
    }

    /**
     * 
     *
     * 
     */
    @isTest
    private static void comAdobeCqScreensImplScreensChannelPostProcessorTest() {
        HttpResponse res = new HttpResponse();
        res.setStatusCode(200);
        res.setStatus('OK');
        Test.setMock(HttpCalloutMock.class, new OASResponseMock(res));

        Map<String, Object> params = new Map<String, Object>{
            'post' => Boolean.getExample(),
            'apply' => Boolean.getExample(),
            'r_delete' => Boolean.getExample(),
            'action' => 'null',
            'location' => 'null',
            'propertylist' => new List<String>{''},
            'screensChannelsPropertiesToRemove' => new List<String>{''}
        };

        OASClient client;
        OASConfigmgrApi api;
        OASComAdobeCqScreensImplScreensChann response;
        OASComAdobeCqScreensImplScreensChann expectedResponse;
        String js = '';

        client = new OASClient();
        api = new OASConfigmgrApi(client);

        js = JSON.serialize(OASComAdobeCqScreensImplScreensChann.getExample());
        res.setHeader('Content-Type', 'application/json');
        res.setBody(js);
        expectedResponse = OASComAdobeCqScreensImplScreensChann.getExample();
        response = (OASComAdobeCqScreensImplScreensChann) api.comAdobeCqScreensImplScreensChannelPostProcessor(params);
        System.assertEquals(expectedResponse, response);
    }

    /**
     * 
     *
     * 
     */
    @isTest
    private static void comAdobeCqScreensMonitoringImplScreensMonitoringServiceImplTest() {
        HttpResponse res = new HttpResponse();
        res.setStatusCode(200);
        res.setStatus('OK');
        Test.setMock(HttpCalloutMock.class, new OASResponseMock(res));

        Map<String, Object> params = new Map<String, Object>{
            'post' => Boolean.getExample(),
            'apply' => Boolean.getExample(),
            'r_delete' => Boolean.getExample(),
            'action' => 'null',
            'location' => 'null',
            'propertylist' => new List<String>{''},
            'comAdobeCqScreensMonitoringImplScreensMonitoringServiceImplProjectPath' => new List<String>{''},
            'comAdobeCqScreensMonitoringImplScreensMonitoringServiceImplScheduleFrequency' => 'null',
            'comAdobeCqScreensMonitoringImplScreensMonitoringServiceImplPingTimeout' => Integer.getExample(),
            'comAdobeCqScreensMonitoringImplScreensMonitoringServiceImplRecipients' => 'null',
            'comAdobeCqScreensMonitoringImplScreensMonitoringServiceImplSmtpserver' => 'null',
            'comAdobeCqScreensMonitoringImplScreensMonitoringServiceImplSmtpport' => Integer.getExample(),
            'comAdobeCqScreensMonitoringImplScreensMonitoringServiceImplUsetls' => Boolean.getExample(),
            'comAdobeCqScreensMonitoringImplScreensMonitoringServiceImplUsername' => 'null',
            'comAdobeCqScreensMonitoringImplScreensMonitoringServiceImplPassword' => 'null'
        };

        OASClient client;
        OASConfigmgrApi api;
        OASComAdobeCqScreensMonitoringImplSc response;
        OASComAdobeCqScreensMonitoringImplSc expectedResponse;
        String js = '';

        client = new OASClient();
        api = new OASConfigmgrApi(client);

        js = JSON.serialize(OASComAdobeCqScreensMonitoringImplSc.getExample());
        res.setHeader('Content-Type', 'application/json');
        res.setBody(js);
        expectedResponse = OASComAdobeCqScreensMonitoringImplSc.getExample();
        response = (OASComAdobeCqScreensMonitoringImplSc) api.comAdobeCqScreensMonitoringImplScreensMonitoringServiceImpl(params);
        System.assertEquals(expectedResponse, response);
    }

    /**
     * 
     *
     * 
     */
    @isTest
    private static void comAdobeCqScreensMqActivemqImplArtemisJMSProviderTest() {
        HttpResponse res = new HttpResponse();
        res.setStatusCode(200);
        res.setStatus('OK');
        Test.setMock(HttpCalloutMock.class, new OASResponseMock(res));

        Map<String, Object> params = new Map<String, Object>{
            'post' => Boolean.getExample(),
            'apply' => Boolean.getExample(),
            'r_delete' => Boolean.getExample(),
            'action' => 'null',
            'location' => 'null',
            'propertylist' => new List<String>{''},
            'serviceRanking' => Integer.getExample(),
            'globalSize' => Integer.getExample(),
            'maxDiskUsage' => Integer.getExample(),
            'persistenceEnabled' => Boolean.getExample(),
            'threadPoolMaxSize' => Integer.getExample(),
            'scheduledThreadPoolMaxSize' => Integer.getExample(),
            'gracefulShutdownTimeout' => Integer.getExample(),
            'queues' => new List<String>{''},
            'topics' => new List<String>{''},
            'addressesMaxDeliveryAttempts' => Integer.getExample(),
            'addressesExpiryDelay' => Integer.getExample(),
            'addressesAddressFullMessagePolicy' => 'null',
            'addressesMaxSizeBytes' => Integer.getExample(),
            'addressesPageSizeBytes' => Integer.getExample(),
            'addressesPageCacheMaxSize' => Integer.getExample(),
            'clusterUser' => 'null',
            'clusterPassword' => 'null',
            'clusterCallTimeout' => Integer.getExample(),
            'clusterCallFailoverTimeout' => Integer.getExample(),
            'clusterClientFailureCheckPeriod' => Integer.getExample(),
            'clusterNotificationAttempts' => Integer.getExample(),
            'clusterNotificationInterval' => Integer.getExample(),
            'idCacheSize' => Integer.getExample(),
            'clusterConfirmationWindowSize' => Integer.getExample(),
            'clusterConnectionTtl' => Integer.getExample(),
            'clusterDuplicateDetection' => Boolean.getExample(),
            'clusterInitialConnectAttempts' => Integer.getExample(),
            'clusterMaxRetryInterval' => Integer.getExample(),
            'clusterMinLargeMessageSize' => Integer.getExample(),
            'clusterProducerWindowSize' => Integer.getExample(),
            'clusterReconnectAttempts' => Integer.getExample(),
            'clusterRetryInterval' => Integer.getExample(),
            'clusterRetryIntervalMultiplier' => Double.getExample()
        };

        OASClient client;
        OASConfigmgrApi api;
        OASComAdobeCqScreensMqActivemqImplAr response;
        OASComAdobeCqScreensMqActivemqImplAr expectedResponse;
        String js = '';

        client = new OASClient();
        api = new OASConfigmgrApi(client);

        js = JSON.serialize(OASComAdobeCqScreensMqActivemqImplAr.getExample());
        res.setHeader('Content-Type', 'application/json');
        res.setBody(js);
        expectedResponse = OASComAdobeCqScreensMqActivemqImplAr.getExample();
        response = (OASComAdobeCqScreensMqActivemqImplAr) api.comAdobeCqScreensMqActivemqImplArtemisJMSProvider(params);
        System.assertEquals(expectedResponse, response);
    }

    /**
     * 
     *
     * 
     */
    @isTest
    private static void comAdobeCqScreensOfflinecontentImplBulkOfflineUpdateServiceImplTest() {
        HttpResponse res = new HttpResponse();
        res.setStatusCode(200);
        res.setStatus('OK');
        Test.setMock(HttpCalloutMock.class, new OASResponseMock(res));

        Map<String, Object> params = new Map<String, Object>{
            'post' => Boolean.getExample(),
            'apply' => Boolean.getExample(),
            'r_delete' => Boolean.getExample(),
            'action' => 'null',
            'location' => 'null',
            'propertylist' => new List<String>{''},
            'comAdobeCqScreensOfflinecontentImplBulkOfflineUpdateServiceImplProjectPath' => new List<String>{''},
            'comAdobeCqScreensOfflinecontentImplBulkOfflineUpdateServiceImplScheduleFrequency' => 'null'
        };

        OASClient client;
        OASConfigmgrApi api;
        OASComAdobeCqScreensOfflinecontentIm response;
        OASComAdobeCqScreensOfflinecontentIm expectedResponse;
        String js = '';

        client = new OASClient();
        api = new OASConfigmgrApi(client);

        js = JSON.serialize(OASComAdobeCqScreensOfflinecontentIm.getExample());
        res.setHeader('Content-Type', 'application/json');
        res.setBody(js);
        expectedResponse = OASComAdobeCqScreensOfflinecontentIm.getExample();
        response = (OASComAdobeCqScreensOfflinecontentIm) api.comAdobeCqScreensOfflinecontentImplBulkOfflineUpdateServiceImpl(params);
        System.assertEquals(expectedResponse, response);
    }

    /**
     * 
     *
     * 
     */
    @isTest
    private static void comAdobeCqScreensOfflinecontentImplOfflineContentServiceImplTest() {
        HttpResponse res = new HttpResponse();
        res.setStatusCode(200);
        res.setStatus('OK');
        Test.setMock(HttpCalloutMock.class, new OASResponseMock(res));

        Map<String, Object> params = new Map<String, Object>{
            'post' => Boolean.getExample(),
            'apply' => Boolean.getExample(),
            'r_delete' => Boolean.getExample(),
            'action' => 'null',
            'location' => 'null',
            'propertylist' => new List<String>{''},
            'disableSmartSync' => Boolean.getExample()
        };

        OASClient client;
        OASConfigmgrApi api;
        OASComAdobeCqScreensOfflinecontentIm response;
        OASComAdobeCqScreensOfflinecontentIm expectedResponse;
        String js = '';

        client = new OASClient();
        api = new OASConfigmgrApi(client);

        js = JSON.serialize(OASComAdobeCqScreensOfflinecontentIm.getExample());
        res.setHeader('Content-Type', 'application/json');
        res.setBody(js);
        expectedResponse = OASComAdobeCqScreensOfflinecontentIm.getExample();
        response = (OASComAdobeCqScreensOfflinecontentIm) api.comAdobeCqScreensOfflinecontentImplOfflineContentServiceImpl(params);
        System.assertEquals(expectedResponse, response);
    }

    /**
     * 
     *
     * 
     */
    @isTest
    private static void comAdobeCqScreensSegmentationImplSegmentationFeatureFlagTest() {
        HttpResponse res = new HttpResponse();
        res.setStatusCode(200);
        res.setStatus('OK');
        Test.setMock(HttpCalloutMock.class, new OASResponseMock(res));

        Map<String, Object> params = new Map<String, Object>{
            'post' => Boolean.getExample(),
            'apply' => Boolean.getExample(),
            'r_delete' => Boolean.getExample(),
            'action' => 'null',
            'location' => 'null',
            'propertylist' => new List<String>{''},
            'enableDataTriggeredContent' => Boolean.getExample()
        };

        OASClient client;
        OASConfigmgrApi api;
        OASComAdobeCqScreensSegmentationImpl response;
        OASComAdobeCqScreensSegmentationImpl expectedResponse;
        String js = '';

        client = new OASClient();
        api = new OASConfigmgrApi(client);

        js = JSON.serialize(OASComAdobeCqScreensSegmentationImpl.getExample());
        res.setHeader('Content-Type', 'application/json');
        res.setBody(js);
        expectedResponse = OASComAdobeCqScreensSegmentationImpl.getExample();
        response = (OASComAdobeCqScreensSegmentationImpl) api.comAdobeCqScreensSegmentationImplSegmentationFeatureFlag(params);
        System.assertEquals(expectedResponse, response);
    }

    /**
     * 
     *
     * 
     */
    @isTest
    private static void comAdobeCqSecurityHcBundlesImplHtmlLibraryManagerConfigHealthChTest() {
        HttpResponse res = new HttpResponse();
        res.setStatusCode(200);
        res.setStatus('OK');
        Test.setMock(HttpCalloutMock.class, new OASResponseMock(res));

        Map<String, Object> params = new Map<String, Object>{
            'post' => Boolean.getExample(),
            'apply' => Boolean.getExample(),
            'r_delete' => Boolean.getExample(),
            'action' => 'null',
            'location' => 'null',
            'propertylist' => new List<String>{''},
            'hcTags' => new List<String>{''}
        };

        OASClient client;
        OASConfigmgrApi api;
        OASComAdobeCqSecurityHcBundlesImplHt response;
        OASComAdobeCqSecurityHcBundlesImplHt expectedResponse;
        String js = '';

        client = new OASClient();
        api = new OASConfigmgrApi(client);

        js = JSON.serialize(OASComAdobeCqSecurityHcBundlesImplHt.getExample());
        res.setHeader('Content-Type', 'application/json');
        res.setBody(js);
        expectedResponse = OASComAdobeCqSecurityHcBundlesImplHt.getExample();
        response = (OASComAdobeCqSecurityHcBundlesImplHt) api.comAdobeCqSecurityHcBundlesImplHtmlLibraryManagerConfigHealthCh(params);
        System.assertEquals(expectedResponse, response);
    }

    /**
     * 
     *
     * 
     */
    @isTest
    private static void comAdobeCqSecurityHcBundlesImplWcmFilterHealthCheckTest() {
        HttpResponse res = new HttpResponse();
        res.setStatusCode(200);
        res.setStatus('OK');
        Test.setMock(HttpCalloutMock.class, new OASResponseMock(res));

        Map<String, Object> params = new Map<String, Object>{
            'post' => Boolean.getExample(),
            'apply' => Boolean.getExample(),
            'r_delete' => Boolean.getExample(),
            'action' => 'null',
            'location' => 'null',
            'propertylist' => new List<String>{''},
            'hcTags' => new List<String>{''}
        };

        OASClient client;
        OASConfigmgrApi api;
        OASComAdobeCqSecurityHcBundlesImplWc response;
        OASComAdobeCqSecurityHcBundlesImplWc expectedResponse;
        String js = '';

        client = new OASClient();
        api = new OASConfigmgrApi(client);

        js = JSON.serialize(OASComAdobeCqSecurityHcBundlesImplWc.getExample());
        res.setHeader('Content-Type', 'application/json');
        res.setBody(js);
        expectedResponse = OASComAdobeCqSecurityHcBundlesImplWc.getExample();
        response = (OASComAdobeCqSecurityHcBundlesImplWc) api.comAdobeCqSecurityHcBundlesImplWcmFilterHealthCheck(params);
        System.assertEquals(expectedResponse, response);
    }

    /**
     * 
     *
     * 
     */
    @isTest
    private static void comAdobeCqSecurityHcDispatcherImplDispatcherAccessHealthCheckTest() {
        HttpResponse res = new HttpResponse();
        res.setStatusCode(200);
        res.setStatus('OK');
        Test.setMock(HttpCalloutMock.class, new OASResponseMock(res));

        Map<String, Object> params = new Map<String, Object>{
            'post' => Boolean.getExample(),
            'apply' => Boolean.getExample(),
            'r_delete' => Boolean.getExample(),
            'action' => 'null',
            'location' => 'null',
            'propertylist' => new List<String>{''},
            'hcTags' => new List<String>{''},
            'dispatcherAddress' => 'null',
            'dispatcherFilterAllowed' => new List<String>{''},
            'dispatcherFilterBlocked' => new List<String>{''}
        };

        OASClient client;
        OASConfigmgrApi api;
        OASComAdobeCqSecurityHcDispatcherImp response;
        OASComAdobeCqSecurityHcDispatcherImp expectedResponse;
        String js = '';

        client = new OASClient();
        api = new OASConfigmgrApi(client);

        js = JSON.serialize(OASComAdobeCqSecurityHcDispatcherImp.getExample());
        res.setHeader('Content-Type', 'application/json');
        res.setBody(js);
        expectedResponse = OASComAdobeCqSecurityHcDispatcherImp.getExample();
        response = (OASComAdobeCqSecurityHcDispatcherImp) api.comAdobeCqSecurityHcDispatcherImplDispatcherAccessHealthCheck(params);
        System.assertEquals(expectedResponse, response);
    }

    /**
     * 
     *
     * 
     */
    @isTest
    private static void comAdobeCqSecurityHcPackagesImplExampleContentHealthCheckTest() {
        HttpResponse res = new HttpResponse();
        res.setStatusCode(200);
        res.setStatus('OK');
        Test.setMock(HttpCalloutMock.class, new OASResponseMock(res));

        Map<String, Object> params = new Map<String, Object>{
            'post' => Boolean.getExample(),
            'apply' => Boolean.getExample(),
            'r_delete' => Boolean.getExample(),
            'action' => 'null',
            'location' => 'null',
            'propertylist' => new List<String>{''},
            'hcTags' => new List<String>{''}
        };

        OASClient client;
        OASConfigmgrApi api;
        OASComAdobeCqSecurityHcPackagesImplE response;
        OASComAdobeCqSecurityHcPackagesImplE expectedResponse;
        String js = '';

        client = new OASClient();
        api = new OASConfigmgrApi(client);

        js = JSON.serialize(OASComAdobeCqSecurityHcPackagesImplE.getExample());
        res.setHeader('Content-Type', 'application/json');
        res.setBody(js);
        expectedResponse = OASComAdobeCqSecurityHcPackagesImplE.getExample();
        response = (OASComAdobeCqSecurityHcPackagesImplE) api.comAdobeCqSecurityHcPackagesImplExampleContentHealthCheck(params);
        System.assertEquals(expectedResponse, response);
    }

    /**
     * 
     *
     * 
     */
    @isTest
    private static void comAdobeCqSecurityHcWebserverImplClickjackingHealthCheckTest() {
        HttpResponse res = new HttpResponse();
        res.setStatusCode(200);
        res.setStatus('OK');
        Test.setMock(HttpCalloutMock.class, new OASResponseMock(res));

        Map<String, Object> params = new Map<String, Object>{
            'post' => Boolean.getExample(),
            'apply' => Boolean.getExample(),
            'r_delete' => Boolean.getExample(),
            'action' => 'null',
            'location' => 'null',
            'propertylist' => new List<String>{''},
            'hcTags' => new List<String>{''},
            'webserverAddress' => 'null'
        };

        OASClient client;
        OASConfigmgrApi api;
        OASComAdobeCqSecurityHcWebserverImpl response;
        OASComAdobeCqSecurityHcWebserverImpl expectedResponse;
        String js = '';

        client = new OASClient();
        api = new OASConfigmgrApi(client);

        js = JSON.serialize(OASComAdobeCqSecurityHcWebserverImpl.getExample());
        res.setHeader('Content-Type', 'application/json');
        res.setBody(js);
        expectedResponse = OASComAdobeCqSecurityHcWebserverImpl.getExample();
        response = (OASComAdobeCqSecurityHcWebserverImpl) api.comAdobeCqSecurityHcWebserverImplClickjackingHealthCheck(params);
        System.assertEquals(expectedResponse, response);
    }

    /**
     * 
     *
     * 
     */
    @isTest
    private static void comAdobeCqSocialAccountverificationImplAccountManagementConfigImTest() {
        HttpResponse res = new HttpResponse();
        res.setStatusCode(200);
        res.setStatus('OK');
        Test.setMock(HttpCalloutMock.class, new OASResponseMock(res));

        Map<String, Object> params = new Map<String, Object>{
            'post' => Boolean.getExample(),
            'apply' => Boolean.getExample(),
            'r_delete' => Boolean.getExample(),
            'action' => 'null',
            'location' => 'null',
            'propertylist' => new List<String>{''},
            'enable' => Boolean.getExample(),
            'ttl1' => Integer.getExample(),
            'ttl2' => Integer.getExample()
        };

        OASClient client;
        OASConfigmgrApi api;
        OASComAdobeCqSocialAccountverificati response;
        OASComAdobeCqSocialAccountverificati expectedResponse;
        String js = '';

        client = new OASClient();
        api = new OASConfigmgrApi(client);

        js = JSON.serialize(OASComAdobeCqSocialAccountverificati.getExample());
        res.setHeader('Content-Type', 'application/json');
        res.setBody(js);
        expectedResponse = OASComAdobeCqSocialAccountverificati.getExample();
        response = (OASComAdobeCqSocialAccountverificati) api.comAdobeCqSocialAccountverificationImplAccountManagementConfigIm(params);
        System.assertEquals(expectedResponse, response);
    }

    /**
     * 
     *
     * 
     */
    @isTest
    private static void comAdobeCqSocialActivitystreamsClientImplSocialActivityComponenTest() {
        HttpResponse res = new HttpResponse();
        res.setStatusCode(200);
        res.setStatus('OK');
        Test.setMock(HttpCalloutMock.class, new OASResponseMock(res));

        Map<String, Object> params = new Map<String, Object>{
            'post' => Boolean.getExample(),
            'apply' => Boolean.getExample(),
            'r_delete' => Boolean.getExample(),
            'action' => 'null',
            'location' => 'null',
            'propertylist' => new List<String>{''},
            'priority' => Integer.getExample()
        };

        OASClient client;
        OASConfigmgrApi api;
        OASComAdobeCqSocialActivitystreamsCl response;
        OASComAdobeCqSocialActivitystreamsCl expectedResponse;
        String js = '';

        client = new OASClient();
        api = new OASConfigmgrApi(client);

        js = JSON.serialize(OASComAdobeCqSocialActivitystreamsCl.getExample());
        res.setHeader('Content-Type', 'application/json');
        res.setBody(js);
        expectedResponse = OASComAdobeCqSocialActivitystreamsCl.getExample();
        response = (OASComAdobeCqSocialActivitystreamsCl) api.comAdobeCqSocialActivitystreamsClientImplSocialActivityComponen(params);
        System.assertEquals(expectedResponse, response);
    }

    /**
     * 
     *
     * 
     */
    @isTest
    private static void comAdobeCqSocialActivitystreamsClientImplSocialActivityStreamCoTest() {
        HttpResponse res = new HttpResponse();
        res.setStatusCode(200);
        res.setStatus('OK');
        Test.setMock(HttpCalloutMock.class, new OASResponseMock(res));

        Map<String, Object> params = new Map<String, Object>{
            'post' => Boolean.getExample(),
            'apply' => Boolean.getExample(),
            'r_delete' => Boolean.getExample(),
            'action' => 'null',
            'location' => 'null',
            'propertylist' => new List<String>{''},
            'priority' => Integer.getExample()
        };

        OASClient client;
        OASConfigmgrApi api;
        OASComAdobeCqSocialActivitystreamsCl response;
        OASComAdobeCqSocialActivitystreamsCl expectedResponse;
        String js = '';

        client = new OASClient();
        api = new OASConfigmgrApi(client);

        js = JSON.serialize(OASComAdobeCqSocialActivitystreamsCl.getExample());
        res.setHeader('Content-Type', 'application/json');
        res.setBody(js);
        expectedResponse = OASComAdobeCqSocialActivitystreamsCl.getExample();
        response = (OASComAdobeCqSocialActivitystreamsCl) api.comAdobeCqSocialActivitystreamsClientImplSocialActivityStreamCo(params);
        System.assertEquals(expectedResponse, response);
    }

    /**
     * 
     *
     * 
     */
    @isTest
    private static void comAdobeCqSocialActivitystreamsListenerImplEventListenerHandlerTest() {
        HttpResponse res = new HttpResponse();
        res.setStatusCode(200);
        res.setStatus('OK');
        Test.setMock(HttpCalloutMock.class, new OASResponseMock(res));

        Map<String, Object> params = new Map<String, Object>{
            'post' => Boolean.getExample(),
            'apply' => Boolean.getExample(),
            'r_delete' => Boolean.getExample(),
            'action' => 'null',
            'location' => 'null',
            'propertylist' => new List<String>{''},
            'eventTopics' => 'null',
            'eventFilter' => 'null'
        };

        OASClient client;
        OASConfigmgrApi api;
        OASComAdobeCqSocialActivitystreamsLi response;
        OASComAdobeCqSocialActivitystreamsLi expectedResponse;
        String js = '';

        client = new OASClient();
        api = new OASConfigmgrApi(client);

        js = JSON.serialize(OASComAdobeCqSocialActivitystreamsLi.getExample());
        res.setHeader('Content-Type', 'application/json');
        res.setBody(js);
        expectedResponse = OASComAdobeCqSocialActivitystreamsLi.getExample();
        response = (OASComAdobeCqSocialActivitystreamsLi) api.comAdobeCqSocialActivitystreamsListenerImplEventListenerHandler(params);
        System.assertEquals(expectedResponse, response);
    }

    /**
     * 
     *
     * 
     */
    @isTest
    private static void comAdobeCqSocialActivitystreamsListenerImplModerationEventExtenTest() {
        HttpResponse res = new HttpResponse();
        res.setStatusCode(200);
        res.setStatus('OK');
        Test.setMock(HttpCalloutMock.class, new OASResponseMock(res));

        Map<String, Object> params = new Map<String, Object>{
            'post' => Boolean.getExample(),
            'apply' => Boolean.getExample(),
            'r_delete' => Boolean.getExample(),
            'action' => 'null',
            'location' => 'null',
            'propertylist' => new List<String>{''},
            'accepted' => Boolean.getExample(),
            'ranked' => Integer.getExample()
        };

        OASClient client;
        OASConfigmgrApi api;
        OASComAdobeCqSocialActivitystreamsLi response;
        OASComAdobeCqSocialActivitystreamsLi expectedResponse;
        String js = '';

        client = new OASClient();
        api = new OASConfigmgrApi(client);

        js = JSON.serialize(OASComAdobeCqSocialActivitystreamsLi.getExample());
        res.setHeader('Content-Type', 'application/json');
        res.setBody(js);
        expectedResponse = OASComAdobeCqSocialActivitystreamsLi.getExample();
        response = (OASComAdobeCqSocialActivitystreamsLi) api.comAdobeCqSocialActivitystreamsListenerImplModerationEventExten(params);
        System.assertEquals(expectedResponse, response);
    }

    /**
     * 
     *
     * 
     */
    @isTest
    private static void comAdobeCqSocialActivitystreamsListenerImplRatingEventActivitySTest() {
        HttpResponse res = new HttpResponse();
        res.setStatusCode(200);
        res.setStatus('OK');
        Test.setMock(HttpCalloutMock.class, new OASResponseMock(res));

        Map<String, Object> params = new Map<String, Object>{
            'post' => Boolean.getExample(),
            'apply' => Boolean.getExample(),
            'r_delete' => Boolean.getExample(),
            'action' => 'null',
            'location' => 'null',
            'propertylist' => new List<String>{''},
            'ranking' => Integer.getExample(),
            'enable' => Boolean.getExample()
        };

        OASClient client;
        OASConfigmgrApi api;
        OASComAdobeCqSocialActivitystreamsLi response;
        OASComAdobeCqSocialActivitystreamsLi expectedResponse;
        String js = '';

        client = new OASClient();
        api = new OASConfigmgrApi(client);

        js = JSON.serialize(OASComAdobeCqSocialActivitystreamsLi.getExample());
        res.setHeader('Content-Type', 'application/json');
        res.setBody(js);
        expectedResponse = OASComAdobeCqSocialActivitystreamsLi.getExample();
        response = (OASComAdobeCqSocialActivitystreamsLi) api.comAdobeCqSocialActivitystreamsListenerImplRatingEventActivityS(params);
        System.assertEquals(expectedResponse, response);
    }

    /**
     * 
     *
     * 
     */
    @isTest
    private static void comAdobeCqSocialActivitystreamsListenerImplResourceActivityStreTest() {
        HttpResponse res = new HttpResponse();
        res.setStatusCode(200);
        res.setStatus('OK');
        Test.setMock(HttpCalloutMock.class, new OASResponseMock(res));

        Map<String, Object> params = new Map<String, Object>{
            'post' => Boolean.getExample(),
            'apply' => Boolean.getExample(),
            'r_delete' => Boolean.getExample(),
            'action' => 'null',
            'location' => 'null',
            'propertylist' => new List<String>{''},
            'streamPath' => 'null',
            'streamName' => 'null'
        };

        OASClient client;
        OASConfigmgrApi api;
        OASComAdobeCqSocialActivitystreamsLi response;
        OASComAdobeCqSocialActivitystreamsLi expectedResponse;
        String js = '';

        client = new OASClient();
        api = new OASConfigmgrApi(client);

        js = JSON.serialize(OASComAdobeCqSocialActivitystreamsLi.getExample());
        res.setHeader('Content-Type', 'application/json');
        res.setBody(js);
        expectedResponse = OASComAdobeCqSocialActivitystreamsLi.getExample();
        response = (OASComAdobeCqSocialActivitystreamsLi) api.comAdobeCqSocialActivitystreamsListenerImplResourceActivityStre(params);
        System.assertEquals(expectedResponse, response);
    }

    /**
     * 
     *
     * 
     */
    @isTest
    private static void comAdobeCqSocialCalendarClientEndpointsImplCalendarOperationsITest() {
        HttpResponse res = new HttpResponse();
        res.setStatusCode(200);
        res.setStatus('OK');
        Test.setMock(HttpCalloutMock.class, new OASResponseMock(res));

        Map<String, Object> params = new Map<String, Object>{
            'post' => Boolean.getExample(),
            'apply' => Boolean.getExample(),
            'r_delete' => Boolean.getExample(),
            'action' => 'null',
            'location' => 'null',
            'propertylist' => new List<String>{''},
            'maxRetry' => Integer.getExample(),
            'fieldWhitelist' => new List<String>{''},
            'attachmentTypeBlacklist' => new List<String>{''}
        };

        OASClient client;
        OASConfigmgrApi api;
        OASComAdobeCqSocialCalendarClientEnd response;
        OASComAdobeCqSocialCalendarClientEnd expectedResponse;
        String js = '';

        client = new OASClient();
        api = new OASConfigmgrApi(client);

        js = JSON.serialize(OASComAdobeCqSocialCalendarClientEnd.getExample());
        res.setHeader('Content-Type', 'application/json');
        res.setBody(js);
        expectedResponse = OASComAdobeCqSocialCalendarClientEnd.getExample();
        response = (OASComAdobeCqSocialCalendarClientEnd) api.comAdobeCqSocialCalendarClientEndpointsImplCalendarOperationsI(params);
        System.assertEquals(expectedResponse, response);
    }

    /**
     * 
     *
     * 
     */
    @isTest
    private static void comAdobeCqSocialCalendarClientOperationextensionsEventAttachmenTest() {
        HttpResponse res = new HttpResponse();
        res.setStatusCode(200);
        res.setStatus('OK');
        Test.setMock(HttpCalloutMock.class, new OASResponseMock(res));

        Map<String, Object> params = new Map<String, Object>{
            'post' => Boolean.getExample(),
            'apply' => Boolean.getExample(),
            'r_delete' => Boolean.getExample(),
            'action' => 'null',
            'location' => 'null',
            'propertylist' => new List<String>{''},
            'attachmentTypeBlacklist' => 'null',
            'extensionOrder' => Integer.getExample()
        };

        OASClient client;
        OASConfigmgrApi api;
        OASComAdobeCqSocialCalendarClientOpe response;
        OASComAdobeCqSocialCalendarClientOpe expectedResponse;
        String js = '';

        client = new OASClient();
        api = new OASConfigmgrApi(client);

        js = JSON.serialize(OASComAdobeCqSocialCalendarClientOpe.getExample());
        res.setHeader('Content-Type', 'application/json');
        res.setBody(js);
        expectedResponse = OASComAdobeCqSocialCalendarClientOpe.getExample();
        response = (OASComAdobeCqSocialCalendarClientOpe) api.comAdobeCqSocialCalendarClientOperationextensionsEventAttachmen(params);
        System.assertEquals(expectedResponse, response);
    }

    /**
     * 
     *
     * 
     */
    @isTest
    private static void comAdobeCqSocialCalendarServletsTimeZoneServletTest() {
        HttpResponse res = new HttpResponse();
        res.setStatusCode(200);
        res.setStatus('OK');
        Test.setMock(HttpCalloutMock.class, new OASResponseMock(res));

        Map<String, Object> params = new Map<String, Object>{
            'post' => Boolean.getExample(),
            'apply' => Boolean.getExample(),
            'r_delete' => Boolean.getExample(),
            'action' => 'null',
            'location' => 'null',
            'propertylist' => new List<String>{''},
            'timezonesExpirytime' => Integer.getExample()
        };

        OASClient client;
        OASConfigmgrApi api;
        OASComAdobeCqSocialCalendarServletsT response;
        OASComAdobeCqSocialCalendarServletsT expectedResponse;
        String js = '';

        client = new OASClient();
        api = new OASConfigmgrApi(client);

        js = JSON.serialize(OASComAdobeCqSocialCalendarServletsT.getExample());
        res.setHeader('Content-Type', 'application/json');
        res.setBody(js);
        expectedResponse = OASComAdobeCqSocialCalendarServletsT.getExample();
        response = (OASComAdobeCqSocialCalendarServletsT) api.comAdobeCqSocialCalendarServletsTimeZoneServlet(params);
        System.assertEquals(expectedResponse, response);
    }

    /**
     * 
     *
     * 
     */
    @isTest
    private static void comAdobeCqSocialCommonsCommentsEndpointsImplCommentDeleteEventTest() {
        HttpResponse res = new HttpResponse();
        res.setStatusCode(200);
        res.setStatus('OK');
        Test.setMock(HttpCalloutMock.class, new OASResponseMock(res));

        Map<String, Object> params = new Map<String, Object>{
            'post' => Boolean.getExample(),
            'apply' => Boolean.getExample(),
            'r_delete' => Boolean.getExample(),
            'action' => 'null',
            'location' => 'null',
            'propertylist' => new List<String>{''},
            'ranking' => Integer.getExample()
        };

        OASClient client;
        OASConfigmgrApi api;
        OASComAdobeCqSocialCommonsCommentsEn response;
        OASComAdobeCqSocialCommonsCommentsEn expectedResponse;
        String js = '';

        client = new OASClient();
        api = new OASConfigmgrApi(client);

        js = JSON.serialize(OASComAdobeCqSocialCommonsCommentsEn.getExample());
        res.setHeader('Content-Type', 'application/json');
        res.setBody(js);
        expectedResponse = OASComAdobeCqSocialCommonsCommentsEn.getExample();
        response = (OASComAdobeCqSocialCommonsCommentsEn) api.comAdobeCqSocialCommonsCommentsEndpointsImplCommentDeleteEvent(params);
        System.assertEquals(expectedResponse, response);
    }

    /**
     * 
     *
     * 
     */
    @isTest
    private static void comAdobeCqSocialCommonsCommentsEndpointsImplCommentOperationSeTest() {
        HttpResponse res = new HttpResponse();
        res.setStatusCode(200);
        res.setStatus('OK');
        Test.setMock(HttpCalloutMock.class, new OASResponseMock(res));

        Map<String, Object> params = new Map<String, Object>{
            'post' => Boolean.getExample(),
            'apply' => Boolean.getExample(),
            'r_delete' => Boolean.getExample(),
            'action' => 'null',
            'location' => 'null',
            'propertylist' => new List<String>{''},
            'fieldWhitelist' => new List<String>{''},
            'attachmentTypeBlacklist' => new List<String>{''}
        };

        OASClient client;
        OASConfigmgrApi api;
        OASComAdobeCqSocialCommonsCommentsEn response;
        OASComAdobeCqSocialCommonsCommentsEn expectedResponse;
        String js = '';

        client = new OASClient();
        api = new OASConfigmgrApi(client);

        js = JSON.serialize(OASComAdobeCqSocialCommonsCommentsEn.getExample());
        res.setHeader('Content-Type', 'application/json');
        res.setBody(js);
        expectedResponse = OASComAdobeCqSocialCommonsCommentsEn.getExample();
        response = (OASComAdobeCqSocialCommonsCommentsEn) api.comAdobeCqSocialCommonsCommentsEndpointsImplCommentOperationSe(params);
        System.assertEquals(expectedResponse, response);
    }

    /**
     * 
     *
     * 
     */
    @isTest
    private static void comAdobeCqSocialCommonsCommentsEndpointsImplTranslationOperatiTest() {
        HttpResponse res = new HttpResponse();
        res.setStatusCode(200);
        res.setStatus('OK');
        Test.setMock(HttpCalloutMock.class, new OASResponseMock(res));

        Map<String, Object> params = new Map<String, Object>{
            'post' => Boolean.getExample(),
            'apply' => Boolean.getExample(),
            'r_delete' => Boolean.getExample(),
            'action' => 'null',
            'location' => 'null',
            'propertylist' => new List<String>{''},
            'fieldWhitelist' => new List<String>{''},
            'attachmentTypeBlacklist' => new List<String>{''}
        };

        OASClient client;
        OASConfigmgrApi api;
        OASComAdobeCqSocialCommonsCommentsEn response;
        OASComAdobeCqSocialCommonsCommentsEn expectedResponse;
        String js = '';

        client = new OASClient();
        api = new OASConfigmgrApi(client);

        js = JSON.serialize(OASComAdobeCqSocialCommonsCommentsEn.getExample());
        res.setHeader('Content-Type', 'application/json');
        res.setBody(js);
        expectedResponse = OASComAdobeCqSocialCommonsCommentsEn.getExample();
        response = (OASComAdobeCqSocialCommonsCommentsEn) api.comAdobeCqSocialCommonsCommentsEndpointsImplTranslationOperati(params);
        System.assertEquals(expectedResponse, response);
    }

    /**
     * 
     *
     * 
     */
    @isTest
    private static void comAdobeCqSocialCommonsCommentsListingImplSearchCommentSocialCTest() {
        HttpResponse res = new HttpResponse();
        res.setStatusCode(200);
        res.setStatus('OK');
        Test.setMock(HttpCalloutMock.class, new OASResponseMock(res));

        Map<String, Object> params = new Map<String, Object>{
            'post' => Boolean.getExample(),
            'apply' => Boolean.getExample(),
            'r_delete' => Boolean.getExample(),
            'action' => 'null',
            'location' => 'null',
            'propertylist' => new List<String>{''},
            'numUserLimit' => Integer.getExample()
        };

        OASClient client;
        OASConfigmgrApi api;
        OASComAdobeCqSocialCommonsCommentsLi response;
        OASComAdobeCqSocialCommonsCommentsLi expectedResponse;
        String js = '';

        client = new OASClient();
        api = new OASConfigmgrApi(client);

        js = JSON.serialize(OASComAdobeCqSocialCommonsCommentsLi.getExample());
        res.setHeader('Content-Type', 'application/json');
        res.setBody(js);
        expectedResponse = OASComAdobeCqSocialCommonsCommentsLi.getExample();
        response = (OASComAdobeCqSocialCommonsCommentsLi) api.comAdobeCqSocialCommonsCommentsListingImplSearchCommentSocialC(params);
        System.assertEquals(expectedResponse, response);
    }

    /**
     * 
     *
     * 
     */
    @isTest
    private static void comAdobeCqSocialCommonsCommentsSchedulerImplSearchScheduledPosTest() {
        HttpResponse res = new HttpResponse();
        res.setStatusCode(200);
        res.setStatus('OK');
        Test.setMock(HttpCalloutMock.class, new OASResponseMock(res));

        Map<String, Object> params = new Map<String, Object>{
            'post' => Boolean.getExample(),
            'apply' => Boolean.getExample(),
            'r_delete' => Boolean.getExample(),
            'action' => 'null',
            'location' => 'null',
            'propertylist' => new List<String>{''},
            'enableScheduledPostsSearch' => Boolean.getExample(),
            'numberOfMinutes' => Integer.getExample(),
            'maxSearchLimit' => Integer.getExample()
        };

        OASClient client;
        OASConfigmgrApi api;
        OASComAdobeCqSocialCommonsCommentsSc response;
        OASComAdobeCqSocialCommonsCommentsSc expectedResponse;
        String js = '';

        client = new OASClient();
        api = new OASConfigmgrApi(client);

        js = JSON.serialize(OASComAdobeCqSocialCommonsCommentsSc.getExample());
        res.setHeader('Content-Type', 'application/json');
        res.setBody(js);
        expectedResponse = OASComAdobeCqSocialCommonsCommentsSc.getExample();
        response = (OASComAdobeCqSocialCommonsCommentsSc) api.comAdobeCqSocialCommonsCommentsSchedulerImplSearchScheduledPos(params);
        System.assertEquals(expectedResponse, response);
    }

    /**
     * 
     *
     * 
     */
    @isTest
    private static void comAdobeCqSocialCommonsCorsCORSAuthenticationFilterTest() {
        HttpResponse res = new HttpResponse();
        res.setStatusCode(200);
        res.setStatus('OK');
        Test.setMock(HttpCalloutMock.class, new OASResponseMock(res));

        Map<String, Object> params = new Map<String, Object>{
            'post' => Boolean.getExample(),
            'apply' => Boolean.getExample(),
            'r_delete' => Boolean.getExample(),
            'action' => 'null',
            'location' => 'null',
            'propertylist' => new List<String>{''},
            'corsEnabling' => Boolean.getExample()
        };

        OASClient client;
        OASConfigmgrApi api;
        OASComAdobeCqSocialCommonsCorsCORSAu response;
        OASComAdobeCqSocialCommonsCorsCORSAu expectedResponse;
        String js = '';

        client = new OASClient();
        api = new OASConfigmgrApi(client);

        js = JSON.serialize(OASComAdobeCqSocialCommonsCorsCORSAu.getExample());
        res.setHeader('Content-Type', 'application/json');
        res.setBody(js);
        expectedResponse = OASComAdobeCqSocialCommonsCorsCORSAu.getExample();
        response = (OASComAdobeCqSocialCommonsCorsCORSAu) api.comAdobeCqSocialCommonsCorsCORSAuthenticationFilter(params);
        System.assertEquals(expectedResponse, response);
    }

    /**
     * 
     *
     * 
     */
    @isTest
    private static void comAdobeCqSocialCommonsEmailreplyImplAndroidEmailClientProviderTest() {
        HttpResponse res = new HttpResponse();
        res.setStatusCode(200);
        res.setStatus('OK');
        Test.setMock(HttpCalloutMock.class, new OASResponseMock(res));

        Map<String, Object> params = new Map<String, Object>{
            'post' => Boolean.getExample(),
            'apply' => Boolean.getExample(),
            'r_delete' => Boolean.getExample(),
            'action' => 'null',
            'location' => 'null',
            'propertylist' => new List<String>{''},
            'priorityOrder' => Integer.getExample(),
            'replyEmailPatterns' => new List<String>{''}
        };

        OASClient client;
        OASConfigmgrApi api;
        OASComAdobeCqSocialCommonsEmailreply response;
        OASComAdobeCqSocialCommonsEmailreply expectedResponse;
        String js = '';

        client = new OASClient();
        api = new OASConfigmgrApi(client);

        js = JSON.serialize(OASComAdobeCqSocialCommonsEmailreply.getExample());
        res.setHeader('Content-Type', 'application/json');
        res.setBody(js);
        expectedResponse = OASComAdobeCqSocialCommonsEmailreply.getExample();
        response = (OASComAdobeCqSocialCommonsEmailreply) api.comAdobeCqSocialCommonsEmailreplyImplAndroidEmailClientProvider(params);
        System.assertEquals(expectedResponse, response);
    }

    /**
     * 
     *
     * 
     */
    @isTest
    private static void comAdobeCqSocialCommonsEmailreplyImplCommentEmailBuilderImplTest() {
        HttpResponse res = new HttpResponse();
        res.setStatusCode(200);
        res.setStatus('OK');
        Test.setMock(HttpCalloutMock.class, new OASResponseMock(res));

        Map<String, Object> params = new Map<String, Object>{
            'post' => Boolean.getExample(),
            'apply' => Boolean.getExample(),
            'r_delete' => Boolean.getExample(),
            'action' => 'null',
            'location' => 'null',
            'propertylist' => new List<String>{''},
            'contextPath' => 'null'
        };

        OASClient client;
        OASConfigmgrApi api;
        OASComAdobeCqSocialCommonsEmailreply response;
        OASComAdobeCqSocialCommonsEmailreply expectedResponse;
        String js = '';

        client = new OASClient();
        api = new OASConfigmgrApi(client);

        js = JSON.serialize(OASComAdobeCqSocialCommonsEmailreply.getExample());
        res.setHeader('Content-Type', 'application/json');
        res.setBody(js);
        expectedResponse = OASComAdobeCqSocialCommonsEmailreply.getExample();
        response = (OASComAdobeCqSocialCommonsEmailreply) api.comAdobeCqSocialCommonsEmailreplyImplCommentEmailBuilderImpl(params);
        System.assertEquals(expectedResponse, response);
    }

    /**
     * 
     *
     * 
     */
    @isTest
    private static void comAdobeCqSocialCommonsEmailreplyImplCommentEmailEventListenerTest() {
        HttpResponse res = new HttpResponse();
        res.setStatusCode(200);
        res.setStatus('OK');
        Test.setMock(HttpCalloutMock.class, new OASResponseMock(res));

        Map<String, Object> params = new Map<String, Object>{
            'post' => Boolean.getExample(),
            'apply' => Boolean.getExample(),
            'r_delete' => Boolean.getExample(),
            'action' => 'null',
            'location' => 'null',
            'propertylist' => new List<String>{''},
            'eventTopics' => 'null'
        };

        OASClient client;
        OASConfigmgrApi api;
        OASComAdobeCqSocialCommonsEmailreply response;
        OASComAdobeCqSocialCommonsEmailreply expectedResponse;
        String js = '';

        client = new OASClient();
        api = new OASConfigmgrApi(client);

        js = JSON.serialize(OASComAdobeCqSocialCommonsEmailreply.getExample());
        res.setHeader('Content-Type', 'application/json');
        res.setBody(js);
        expectedResponse = OASComAdobeCqSocialCommonsEmailreply.getExample();
        response = (OASComAdobeCqSocialCommonsEmailreply) api.comAdobeCqSocialCommonsEmailreplyImplCommentEmailEventListener(params);
        System.assertEquals(expectedResponse, response);
    }

    /**
     * 
     *
     * 
     */
    @isTest
    private static void comAdobeCqSocialCommonsEmailreplyImplCustomEmailClientProviderTest() {
        HttpResponse res = new HttpResponse();
        res.setStatusCode(200);
        res.setStatus('OK');
        Test.setMock(HttpCalloutMock.class, new OASResponseMock(res));

        Map<String, Object> params = new Map<String, Object>{
            'post' => Boolean.getExample(),
            'apply' => Boolean.getExample(),
            'r_delete' => Boolean.getExample(),
            'action' => 'null',
            'location' => 'null',
            'propertylist' => new List<String>{''},
            'priorityOrder' => Integer.getExample(),
            'replyEmailPatterns' => new List<String>{''}
        };

        OASClient client;
        OASConfigmgrApi api;
        OASComAdobeCqSocialCommonsEmailreply response;
        OASComAdobeCqSocialCommonsEmailreply expectedResponse;
        String js = '';

        client = new OASClient();
        api = new OASConfigmgrApi(client);

        js = JSON.serialize(OASComAdobeCqSocialCommonsEmailreply.getExample());
        res.setHeader('Content-Type', 'application/json');
        res.setBody(js);
        expectedResponse = OASComAdobeCqSocialCommonsEmailreply.getExample();
        response = (OASComAdobeCqSocialCommonsEmailreply) api.comAdobeCqSocialCommonsEmailreplyImplCustomEmailClientProvider(params);
        System.assertEquals(expectedResponse, response);
    }

    /**
     * 
     *
     * 
     */
    @isTest
    private static void comAdobeCqSocialCommonsEmailreplyImplEmailQuotedTextPatternsImpTest() {
        HttpResponse res = new HttpResponse();
        res.setStatusCode(200);
        res.setStatus('OK');
        Test.setMock(HttpCalloutMock.class, new OASResponseMock(res));

        Map<String, Object> params = new Map<String, Object>{
            'post' => Boolean.getExample(),
            'apply' => Boolean.getExample(),
            'r_delete' => Boolean.getExample(),
            'action' => 'null',
            'location' => 'null',
            'propertylist' => new List<String>{''},
            'patternTime' => 'null',
            'patternNewline' => 'null',
            'patternDayOfMonth' => 'null',
            'patternMonth' => 'null',
            'patternYear' => 'null',
            'patternDate' => 'null',
            'patternDateTime' => 'null',
            'patternEmail' => 'null'
        };

        OASClient client;
        OASConfigmgrApi api;
        OASComAdobeCqSocialCommonsEmailreply response;
        OASComAdobeCqSocialCommonsEmailreply expectedResponse;
        String js = '';

        client = new OASClient();
        api = new OASConfigmgrApi(client);

        js = JSON.serialize(OASComAdobeCqSocialCommonsEmailreply.getExample());
        res.setHeader('Content-Type', 'application/json');
        res.setBody(js);
        expectedResponse = OASComAdobeCqSocialCommonsEmailreply.getExample();
        response = (OASComAdobeCqSocialCommonsEmailreply) api.comAdobeCqSocialCommonsEmailreplyImplEmailQuotedTextPatternsImp(params);
        System.assertEquals(expectedResponse, response);
    }

    /**
     * 
     *
     * 
     */
    @isTest
    private static void comAdobeCqSocialCommonsEmailreplyImplEmailReplyConfigurationImpTest() {
        HttpResponse res = new HttpResponse();
        res.setStatusCode(200);
        res.setStatus('OK');
        Test.setMock(HttpCalloutMock.class, new OASResponseMock(res));

        Map<String, Object> params = new Map<String, Object>{
            'post' => Boolean.getExample(),
            'apply' => Boolean.getExample(),
            'r_delete' => Boolean.getExample(),
            'action' => 'null',
            'location' => 'null',
            'propertylist' => new List<String>{''},
            'emailName' => 'null',
            'emailCreatePostFromReply' => Boolean.getExample(),
            'emailAddCommentIdTo' => 'null',
            'emailSubjectMaximumLength' => Integer.getExample(),
            'emailReplyToAddress' => 'null',
            'emailReplyToDelimiter' => 'null',
            'emailTrackerIdPrefixInSubject' => 'null',
            'emailTrackerIdPrefixInBody' => 'null',
            'emailAsHTML' => Boolean.getExample(),
            'emailDefaultUserName' => 'null',
            'emailTemplatesRootPath' => 'null'
        };

        OASClient client;
        OASConfigmgrApi api;
        OASComAdobeCqSocialCommonsEmailreply response;
        OASComAdobeCqSocialCommonsEmailreply expectedResponse;
        String js = '';

        client = new OASClient();
        api = new OASConfigmgrApi(client);

        js = JSON.serialize(OASComAdobeCqSocialCommonsEmailreply.getExample());
        res.setHeader('Content-Type', 'application/json');
        res.setBody(js);
        expectedResponse = OASComAdobeCqSocialCommonsEmailreply.getExample();
        response = (OASComAdobeCqSocialCommonsEmailreply) api.comAdobeCqSocialCommonsEmailreplyImplEmailReplyConfigurationImp(params);
        System.assertEquals(expectedResponse, response);
    }

    /**
     * 
     *
     * 
     */
    @isTest
    private static void comAdobeCqSocialCommonsEmailreplyImplEmailReplyImporterTest() {
        HttpResponse res = new HttpResponse();
        res.setStatusCode(200);
        res.setStatus('OK');
        Test.setMock(HttpCalloutMock.class, new OASResponseMock(res));

        Map<String, Object> params = new Map<String, Object>{
            'post' => Boolean.getExample(),
            'apply' => Boolean.getExample(),
            'r_delete' => Boolean.getExample(),
            'action' => 'null',
            'location' => 'null',
            'propertylist' => new List<String>{''},
            'connectProtocol' => 'null'
        };

        OASClient client;
        OASConfigmgrApi api;
        OASComAdobeCqSocialCommonsEmailreply response;
        OASComAdobeCqSocialCommonsEmailreply expectedResponse;
        String js = '';

        client = new OASClient();
        api = new OASConfigmgrApi(client);

        js = JSON.serialize(OASComAdobeCqSocialCommonsEmailreply.getExample());
        res.setHeader('Content-Type', 'application/json');
        res.setBody(js);
        expectedResponse = OASComAdobeCqSocialCommonsEmailreply.getExample();
        response = (OASComAdobeCqSocialCommonsEmailreply) api.comAdobeCqSocialCommonsEmailreplyImplEmailReplyImporter(params);
        System.assertEquals(expectedResponse, response);
    }

    /**
     * 
     *
     * 
     */
    @isTest
    private static void comAdobeCqSocialCommonsEmailreplyImplGmailEmailClientProviderTest() {
        HttpResponse res = new HttpResponse();
        res.setStatusCode(200);
        res.setStatus('OK');
        Test.setMock(HttpCalloutMock.class, new OASResponseMock(res));

        Map<String, Object> params = new Map<String, Object>{
            'post' => Boolean.getExample(),
            'apply' => Boolean.getExample(),
            'r_delete' => Boolean.getExample(),
            'action' => 'null',
            'location' => 'null',
            'propertylist' => new List<String>{''},
            'priorityOrder' => Integer.getExample(),
            'replyEmailPatterns' => new List<String>{''}
        };

        OASClient client;
        OASConfigmgrApi api;
        OASComAdobeCqSocialCommonsEmailreply response;
        OASComAdobeCqSocialCommonsEmailreply expectedResponse;
        String js = '';

        client = new OASClient();
        api = new OASConfigmgrApi(client);

        js = JSON.serialize(OASComAdobeCqSocialCommonsEmailreply.getExample());
        res.setHeader('Content-Type', 'application/json');
        res.setBody(js);
        expectedResponse = OASComAdobeCqSocialCommonsEmailreply.getExample();
        response = (OASComAdobeCqSocialCommonsEmailreply) api.comAdobeCqSocialCommonsEmailreplyImplGmailEmailClientProvider(params);
        System.assertEquals(expectedResponse, response);
    }

    /**
     * 
     *
     * 
     */
    @isTest
    private static void comAdobeCqSocialCommonsEmailreplyImplIOSEmailClientProviderTest() {
        HttpResponse res = new HttpResponse();
        res.setStatusCode(200);
        res.setStatus('OK');
        Test.setMock(HttpCalloutMock.class, new OASResponseMock(res));

        Map<String, Object> params = new Map<String, Object>{
            'post' => Boolean.getExample(),
            'apply' => Boolean.getExample(),
            'r_delete' => Boolean.getExample(),
            'action' => 'null',
            'location' => 'null',
            'propertylist' => new List<String>{''},
            'priorityOrder' => Integer.getExample(),
            'replyEmailPatterns' => new List<String>{''}
        };

        OASClient client;
        OASConfigmgrApi api;
        OASComAdobeCqSocialCommonsEmailreply response;
        OASComAdobeCqSocialCommonsEmailreply expectedResponse;
        String js = '';

        client = new OASClient();
        api = new OASConfigmgrApi(client);

        js = JSON.serialize(OASComAdobeCqSocialCommonsEmailreply.getExample());
        res.setHeader('Content-Type', 'application/json');
        res.setBody(js);
        expectedResponse = OASComAdobeCqSocialCommonsEmailreply.getExample();
        response = (OASComAdobeCqSocialCommonsEmailreply) api.comAdobeCqSocialCommonsEmailreplyImplIOSEmailClientProvider(params);
        System.assertEquals(expectedResponse, response);
    }

    /**
     * 
     *
     * 
     */
    @isTest
    private static void comAdobeCqSocialCommonsEmailreplyImplMacmailEmailClientProviderTest() {
        HttpResponse res = new HttpResponse();
        res.setStatusCode(200);
        res.setStatus('OK');
        Test.setMock(HttpCalloutMock.class, new OASResponseMock(res));

        Map<String, Object> params = new Map<String, Object>{
            'post' => Boolean.getExample(),
            'apply' => Boolean.getExample(),
            'r_delete' => Boolean.getExample(),
            'action' => 'null',
            'location' => 'null',
            'propertylist' => new List<String>{''},
            'priorityOrder' => Integer.getExample(),
            'replyEmailPatterns' => new List<String>{''}
        };

        OASClient client;
        OASConfigmgrApi api;
        OASComAdobeCqSocialCommonsEmailreply response;
        OASComAdobeCqSocialCommonsEmailreply expectedResponse;
        String js = '';

        client = new OASClient();
        api = new OASConfigmgrApi(client);

        js = JSON.serialize(OASComAdobeCqSocialCommonsEmailreply.getExample());
        res.setHeader('Content-Type', 'application/json');
        res.setBody(js);
        expectedResponse = OASComAdobeCqSocialCommonsEmailreply.getExample();
        response = (OASComAdobeCqSocialCommonsEmailreply) api.comAdobeCqSocialCommonsEmailreplyImplMacmailEmailClientProvider(params);
        System.assertEquals(expectedResponse, response);
    }

    /**
     * 
     *
     * 
     */
    @isTest
    private static void comAdobeCqSocialCommonsEmailreplyImplOutLookEmailClientProviderTest() {
        HttpResponse res = new HttpResponse();
        res.setStatusCode(200);
        res.setStatus('OK');
        Test.setMock(HttpCalloutMock.class, new OASResponseMock(res));

        Map<String, Object> params = new Map<String, Object>{
            'post' => Boolean.getExample(),
            'apply' => Boolean.getExample(),
            'r_delete' => Boolean.getExample(),
            'action' => 'null',
            'location' => 'null',
            'propertylist' => new List<String>{''},
            'priorityOrder' => Integer.getExample(),
            'replyEmailPatterns' => new List<String>{''}
        };

        OASClient client;
        OASConfigmgrApi api;
        OASComAdobeCqSocialCommonsEmailreply response;
        OASComAdobeCqSocialCommonsEmailreply expectedResponse;
        String js = '';

        client = new OASClient();
        api = new OASConfigmgrApi(client);

        js = JSON.serialize(OASComAdobeCqSocialCommonsEmailreply.getExample());
        res.setHeader('Content-Type', 'application/json');
        res.setBody(js);
        expectedResponse = OASComAdobeCqSocialCommonsEmailreply.getExample();
        response = (OASComAdobeCqSocialCommonsEmailreply) api.comAdobeCqSocialCommonsEmailreplyImplOutLookEmailClientProvider(params);
        System.assertEquals(expectedResponse, response);
    }

    /**
     * 
     *
     * 
     */
    @isTest
    private static void comAdobeCqSocialCommonsEmailreplyImplUnknownEmailClientProviderTest() {
        HttpResponse res = new HttpResponse();
        res.setStatusCode(200);
        res.setStatus('OK');
        Test.setMock(HttpCalloutMock.class, new OASResponseMock(res));

        Map<String, Object> params = new Map<String, Object>{
            'post' => Boolean.getExample(),
            'apply' => Boolean.getExample(),
            'r_delete' => Boolean.getExample(),
            'action' => 'null',
            'location' => 'null',
            'propertylist' => new List<String>{''},
            'replyEmailPatterns' => new List<String>{''},
            'priorityOrder' => Integer.getExample()
        };

        OASClient client;
        OASConfigmgrApi api;
        OASComAdobeCqSocialCommonsEmailreply response;
        OASComAdobeCqSocialCommonsEmailreply expectedResponse;
        String js = '';

        client = new OASClient();
        api = new OASConfigmgrApi(client);

        js = JSON.serialize(OASComAdobeCqSocialCommonsEmailreply.getExample());
        res.setHeader('Content-Type', 'application/json');
        res.setBody(js);
        expectedResponse = OASComAdobeCqSocialCommonsEmailreply.getExample();
        response = (OASComAdobeCqSocialCommonsEmailreply) api.comAdobeCqSocialCommonsEmailreplyImplUnknownEmailClientProvider(params);
        System.assertEquals(expectedResponse, response);
    }

    /**
     * 
     *
     * 
     */
    @isTest
    private static void comAdobeCqSocialCommonsEmailreplyImplYahooEmailClientProviderTest() {
        HttpResponse res = new HttpResponse();
        res.setStatusCode(200);
        res.setStatus('OK');
        Test.setMock(HttpCalloutMock.class, new OASResponseMock(res));

        Map<String, Object> params = new Map<String, Object>{
            'post' => Boolean.getExample(),
            'apply' => Boolean.getExample(),
            'r_delete' => Boolean.getExample(),
            'action' => 'null',
            'location' => 'null',
            'propertylist' => new List<String>{''},
            'priorityOrder' => Integer.getExample(),
            'replyEmailPatterns' => new List<String>{''}
        };

        OASClient client;
        OASConfigmgrApi api;
        OASComAdobeCqSocialCommonsEmailreply response;
        OASComAdobeCqSocialCommonsEmailreply expectedResponse;
        String js = '';

        client = new OASClient();
        api = new OASConfigmgrApi(client);

        js = JSON.serialize(OASComAdobeCqSocialCommonsEmailreply.getExample());
        res.setHeader('Content-Type', 'application/json');
        res.setBody(js);
        expectedResponse = OASComAdobeCqSocialCommonsEmailreply.getExample();
        response = (OASComAdobeCqSocialCommonsEmailreply) api.comAdobeCqSocialCommonsEmailreplyImplYahooEmailClientProvider(params);
        System.assertEquals(expectedResponse, response);
    }

    /**
     * 
     *
     * 
     */
    @isTest
    private static void comAdobeCqSocialCommonsMaintainanceImplDeleteTempUGCImageUploadTest() {
        HttpResponse res = new HttpResponse();
        res.setStatusCode(200);
        res.setStatus('OK');
        Test.setMock(HttpCalloutMock.class, new OASResponseMock(res));

        Map<String, Object> params = new Map<String, Object>{
            'post' => Boolean.getExample(),
            'apply' => Boolean.getExample(),
            'r_delete' => Boolean.getExample(),
            'action' => 'null',
            'location' => 'null',
            'propertylist' => new List<String>{''},
            'numberOfDays' => Integer.getExample(),
            'ageOfFile' => Integer.getExample()
        };

        OASClient client;
        OASConfigmgrApi api;
        OASComAdobeCqSocialCommonsMaintainan response;
        OASComAdobeCqSocialCommonsMaintainan expectedResponse;
        String js = '';

        client = new OASClient();
        api = new OASConfigmgrApi(client);

        js = JSON.serialize(OASComAdobeCqSocialCommonsMaintainan.getExample());
        res.setHeader('Content-Type', 'application/json');
        res.setBody(js);
        expectedResponse = OASComAdobeCqSocialCommonsMaintainan.getExample();
        response = (OASComAdobeCqSocialCommonsMaintainan) api.comAdobeCqSocialCommonsMaintainanceImplDeleteTempUGCImageUpload(params);
        System.assertEquals(expectedResponse, response);
    }

    /**
     * 
     *
     * 
     */
    @isTest
    private static void comAdobeCqSocialCommonsUgclimiterImplUGCLimiterServiceImplTest() {
        HttpResponse res = new HttpResponse();
        res.setStatusCode(200);
        res.setStatus('OK');
        Test.setMock(HttpCalloutMock.class, new OASResponseMock(res));

        Map<String, Object> params = new Map<String, Object>{
            'post' => Boolean.getExample(),
            'apply' => Boolean.getExample(),
            'r_delete' => Boolean.getExample(),
            'action' => 'null',
            'location' => 'null',
            'propertylist' => new List<String>{''},
            'eventTopics' => 'null',
            'eventFilter' => 'null',
            'verbs' => new List<String>{''}
        };

        OASClient client;
        OASConfigmgrApi api;
        OASComAdobeCqSocialCommonsUgclimiter response;
        OASComAdobeCqSocialCommonsUgclimiter expectedResponse;
        String js = '';

        client = new OASClient();
        api = new OASConfigmgrApi(client);

        js = JSON.serialize(OASComAdobeCqSocialCommonsUgclimiter.getExample());
        res.setHeader('Content-Type', 'application/json');
        res.setBody(js);
        expectedResponse = OASComAdobeCqSocialCommonsUgclimiter.getExample();
        response = (OASComAdobeCqSocialCommonsUgclimiter) api.comAdobeCqSocialCommonsUgclimiterImplUGCLimiterServiceImpl(params);
        System.assertEquals(expectedResponse, response);
    }

    /**
     * 
     *
     * 
     */
    @isTest
    private static void comAdobeCqSocialCommonsUgclimitsconfigImplCommunityUserUGCLimitTest() {
        HttpResponse res = new HttpResponse();
        res.setStatusCode(200);
        res.setStatus('OK');
        Test.setMock(HttpCalloutMock.class, new OASResponseMock(res));

        Map<String, Object> params = new Map<String, Object>{
            'post' => Boolean.getExample(),
            'apply' => Boolean.getExample(),
            'r_delete' => Boolean.getExample(),
            'action' => 'null',
            'location' => 'null',
            'propertylist' => new List<String>{''},
            'enable' => Boolean.getExample(),
            'ugCLimit' => Integer.getExample(),
            'ugcLimitDuration' => Integer.getExample(),
            'domains' => new List<String>{''},
            'toList' => new List<String>{''}
        };

        OASClient client;
        OASConfigmgrApi api;
        OASComAdobeCqSocialCommonsUgclimitsc response;
        OASComAdobeCqSocialCommonsUgclimitsc expectedResponse;
        String js = '';

        client = new OASClient();
        api = new OASConfigmgrApi(client);

        js = JSON.serialize(OASComAdobeCqSocialCommonsUgclimitsc.getExample());
        res.setHeader('Content-Type', 'application/json');
        res.setBody(js);
        expectedResponse = OASComAdobeCqSocialCommonsUgclimitsc.getExample();
        response = (OASComAdobeCqSocialCommonsUgclimitsc) api.comAdobeCqSocialCommonsUgclimitsconfigImplCommunityUserUGCLimit(params);
        System.assertEquals(expectedResponse, response);
    }

    /**
     * 
     *
     * 
     */
    @isTest
    private static void comAdobeCqSocialConnectOauthImplFacebookProviderImplTest() {
        HttpResponse res = new HttpResponse();
        res.setStatusCode(200);
        res.setStatus('OK');
        Test.setMock(HttpCalloutMock.class, new OASResponseMock(res));

        Map<String, Object> params = new Map<String, Object>{
            'post' => Boolean.getExample(),
            'apply' => Boolean.getExample(),
            'r_delete' => Boolean.getExample(),
            'action' => 'null',
            'location' => 'null',
            'propertylist' => new List<String>{''},
            'oauthProviderId' => 'null',
            'oauthCloudConfigRoot' => 'null',
            'providerConfigRoot' => 'null',
            'providerConfigCreateTagsEnabled' => Boolean.getExample(),
            'providerConfigUserFolder' => 'null',
            'providerConfigFacebookFetchFields' => Boolean.getExample(),
            'providerConfigFacebookFields' => new List<String>{''},
            'providerConfigRefreshUserdataEnabled' => Boolean.getExample()
        };

        OASClient client;
        OASConfigmgrApi api;
        OASComAdobeCqSocialConnectOauthImplF response;
        OASComAdobeCqSocialConnectOauthImplF expectedResponse;
        String js = '';

        client = new OASClient();
        api = new OASConfigmgrApi(client);

        js = JSON.serialize(OASComAdobeCqSocialConnectOauthImplF.getExample());
        res.setHeader('Content-Type', 'application/json');
        res.setBody(js);
        expectedResponse = OASComAdobeCqSocialConnectOauthImplF.getExample();
        response = (OASComAdobeCqSocialConnectOauthImplF) api.comAdobeCqSocialConnectOauthImplFacebookProviderImpl(params);
        System.assertEquals(expectedResponse, response);
    }

    /**
     * 
     *
     * 
     */
    @isTest
    private static void comAdobeCqSocialConnectOauthImplSocialOAuthAuthenticationHandleTest() {
        HttpResponse res = new HttpResponse();
        res.setStatusCode(200);
        res.setStatus('OK');
        Test.setMock(HttpCalloutMock.class, new OASResponseMock(res));

        Map<String, Object> params = new Map<String, Object>{
            'post' => Boolean.getExample(),
            'apply' => Boolean.getExample(),
            'r_delete' => Boolean.getExample(),
            'action' => 'null',
            'location' => 'null',
            'propertylist' => new List<String>{''},
            'path' => new List<String>{''},
            'serviceRanking' => Integer.getExample()
        };

        OASClient client;
        OASConfigmgrApi api;
        OASComAdobeCqSocialConnectOauthImplS response;
        OASComAdobeCqSocialConnectOauthImplS expectedResponse;
        String js = '';

        client = new OASClient();
        api = new OASConfigmgrApi(client);

        js = JSON.serialize(OASComAdobeCqSocialConnectOauthImplS.getExample());
        res.setHeader('Content-Type', 'application/json');
        res.setBody(js);
        expectedResponse = OASComAdobeCqSocialConnectOauthImplS.getExample();
        response = (OASComAdobeCqSocialConnectOauthImplS) api.comAdobeCqSocialConnectOauthImplSocialOAuthAuthenticationHandle(params);
        System.assertEquals(expectedResponse, response);
    }

    /**
     * 
     *
     * 
     */
    @isTest
    private static void comAdobeCqSocialConnectOauthImplSocialOAuthUserProfileMapperTest() {
        HttpResponse res = new HttpResponse();
        res.setStatusCode(200);
        res.setStatus('OK');
        Test.setMock(HttpCalloutMock.class, new OASResponseMock(res));

        Map<String, Object> params = new Map<String, Object>{
            'post' => Boolean.getExample(),
            'apply' => Boolean.getExample(),
            'r_delete' => Boolean.getExample(),
            'action' => 'null',
            'location' => 'null',
            'propertylist' => new List<String>{''},
            'facebook' => new List<String>{''},
            'twitter' => new List<String>{''},
            'providerConfigUserFolder' => 'null'
        };

        OASClient client;
        OASConfigmgrApi api;
        OASComAdobeCqSocialConnectOauthImplS response;
        OASComAdobeCqSocialConnectOauthImplS expectedResponse;
        String js = '';

        client = new OASClient();
        api = new OASConfigmgrApi(client);

        js = JSON.serialize(OASComAdobeCqSocialConnectOauthImplS.getExample());
        res.setHeader('Content-Type', 'application/json');
        res.setBody(js);
        expectedResponse = OASComAdobeCqSocialConnectOauthImplS.getExample();
        response = (OASComAdobeCqSocialConnectOauthImplS) api.comAdobeCqSocialConnectOauthImplSocialOAuthUserProfileMapper(params);
        System.assertEquals(expectedResponse, response);
    }

    /**
     * 
     *
     * 
     */
    @isTest
    private static void comAdobeCqSocialConnectOauthImplTwitterProviderImplTest() {
        HttpResponse res = new HttpResponse();
        res.setStatusCode(200);
        res.setStatus('OK');
        Test.setMock(HttpCalloutMock.class, new OASResponseMock(res));

        Map<String, Object> params = new Map<String, Object>{
            'post' => Boolean.getExample(),
            'apply' => Boolean.getExample(),
            'r_delete' => Boolean.getExample(),
            'action' => 'null',
            'location' => 'null',
            'propertylist' => new List<String>{''},
            'oauthProviderId' => 'null',
            'oauthCloudConfigRoot' => 'null',
            'providerConfigRoot' => 'null',
            'providerConfigUserFolder' => 'null',
            'providerConfigTwitterEnableParams' => Boolean.getExample(),
            'providerConfigTwitterParams' => new List<String>{''},
            'providerConfigRefreshUserdataEnabled' => Boolean.getExample()
        };

        OASClient client;
        OASConfigmgrApi api;
        OASComAdobeCqSocialConnectOauthImplT response;
        OASComAdobeCqSocialConnectOauthImplT expectedResponse;
        String js = '';

        client = new OASClient();
        api = new OASConfigmgrApi(client);

        js = JSON.serialize(OASComAdobeCqSocialConnectOauthImplT.getExample());
        res.setHeader('Content-Type', 'application/json');
        res.setBody(js);
        expectedResponse = OASComAdobeCqSocialConnectOauthImplT.getExample();
        response = (OASComAdobeCqSocialConnectOauthImplT) api.comAdobeCqSocialConnectOauthImplTwitterProviderImpl(params);
        System.assertEquals(expectedResponse, response);
    }

    /**
     * 
     *
     * 
     */
    @isTest
    private static void comAdobeCqSocialContentFragmentsServicesImplCommunitiesFragmenTest() {
        HttpResponse res = new HttpResponse();
        res.setStatusCode(200);
        res.setStatus('OK');
        Test.setMock(HttpCalloutMock.class, new OASResponseMock(res));

        Map<String, Object> params = new Map<String, Object>{
            'post' => Boolean.getExample(),
            'apply' => Boolean.getExample(),
            'r_delete' => Boolean.getExample(),
            'action' => 'null',
            'location' => 'null',
            'propertylist' => new List<String>{''},
            'cqSocialContentFragmentsServicesEnabled' => Boolean.getExample(),
            'cqSocialContentFragmentsServicesWaitTimeSeconds' => Integer.getExample()
        };

        OASClient client;
        OASConfigmgrApi api;
        OASComAdobeCqSocialContentFragmentsS response;
        OASComAdobeCqSocialContentFragmentsS expectedResponse;
        String js = '';

        client = new OASClient();
        api = new OASConfigmgrApi(client);

        js = JSON.serialize(OASComAdobeCqSocialContentFragmentsS.getExample());
        res.setHeader('Content-Type', 'application/json');
        res.setBody(js);
        expectedResponse = OASComAdobeCqSocialContentFragmentsS.getExample();
        response = (OASComAdobeCqSocialContentFragmentsS) api.comAdobeCqSocialContentFragmentsServicesImplCommunitiesFragmen(params);
        System.assertEquals(expectedResponse, response);
    }

    /**
     * 
     *
     * 
     */
    @isTest
    private static void comAdobeCqSocialDatastoreAsImplASResourceProviderFactoryTest() {
        HttpResponse res = new HttpResponse();
        res.setStatusCode(200);
        res.setStatus('OK');
        Test.setMock(HttpCalloutMock.class, new OASResponseMock(res));

        Map<String, Object> params = new Map<String, Object>{
            'post' => Boolean.getExample(),
            'apply' => Boolean.getExample(),
            'r_delete' => Boolean.getExample(),
            'action' => 'null',
            'location' => 'null',
            'propertylist' => new List<String>{''},
            'versionId' => 'null',
            'cacheOn' => Boolean.getExample(),
            'concurrencyLevel' => Integer.getExample(),
            'cacheStartSize' => Integer.getExample(),
            'cacheTtl' => Integer.getExample(),
            'cacheSize' => Integer.getExample(),
            'timeLimit' => Integer.getExample()
        };

        OASClient client;
        OASConfigmgrApi api;
        OASComAdobeCqSocialDatastoreAsImplAS response;
        OASComAdobeCqSocialDatastoreAsImplAS expectedResponse;
        String js = '';

        client = new OASClient();
        api = new OASConfigmgrApi(client);

        js = JSON.serialize(OASComAdobeCqSocialDatastoreAsImplAS.getExample());
        res.setHeader('Content-Type', 'application/json');
        res.setBody(js);
        expectedResponse = OASComAdobeCqSocialDatastoreAsImplAS.getExample();
        response = (OASComAdobeCqSocialDatastoreAsImplAS) api.comAdobeCqSocialDatastoreAsImplASResourceProviderFactory(params);
        System.assertEquals(expectedResponse, response);
    }

    /**
     * 
     *
     * 
     */
    @isTest
    private static void comAdobeCqSocialDatastoreOpImplSocialMSResourceProviderFactoryTest() {
        HttpResponse res = new HttpResponse();
        res.setStatusCode(200);
        res.setStatus('OK');
        Test.setMock(HttpCalloutMock.class, new OASResponseMock(res));

        Map<String, Object> params = new Map<String, Object>{
            'post' => Boolean.getExample(),
            'apply' => Boolean.getExample(),
            'r_delete' => Boolean.getExample(),
            'action' => 'null',
            'location' => 'null',
            'propertylist' => new List<String>{''},
            'solrZkTimeout' => 'null',
            'solrCommit' => 'null',
            'cacheOn' => Boolean.getExample(),
            'concurrencyLevel' => Integer.getExample(),
            'cacheStartSize' => Integer.getExample(),
            'cacheTtl' => Integer.getExample(),
            'cacheSize' => Integer.getExample()
        };

        OASClient client;
        OASConfigmgrApi api;
        OASComAdobeCqSocialDatastoreOpImplSo response;
        OASComAdobeCqSocialDatastoreOpImplSo expectedResponse;
        String js = '';

        client = new OASClient();
        api = new OASConfigmgrApi(client);

        js = JSON.serialize(OASComAdobeCqSocialDatastoreOpImplSo.getExample());
        res.setHeader('Content-Type', 'application/json');
        res.setBody(js);
        expectedResponse = OASComAdobeCqSocialDatastoreOpImplSo.getExample();
        response = (OASComAdobeCqSocialDatastoreOpImplSo) api.comAdobeCqSocialDatastoreOpImplSocialMSResourceProviderFactory(params);
        System.assertEquals(expectedResponse, response);
    }

    /**
     * 
     *
     * 
     */
    @isTest
    private static void comAdobeCqSocialDatastoreRdbImplSocialRDBResourceProviderFactorTest() {
        HttpResponse res = new HttpResponse();
        res.setStatusCode(200);
        res.setStatus('OK');
        Test.setMock(HttpCalloutMock.class, new OASResponseMock(res));

        Map<String, Object> params = new Map<String, Object>{
            'post' => Boolean.getExample(),
            'apply' => Boolean.getExample(),
            'r_delete' => Boolean.getExample(),
            'action' => 'null',
            'location' => 'null',
            'propertylist' => new List<String>{''},
            'solrZkTimeout' => 'null',
            'solrCommit' => 'null',
            'cacheOn' => Boolean.getExample(),
            'concurrencyLevel' => Integer.getExample(),
            'cacheStartSize' => Integer.getExample(),
            'cacheTtl' => Integer.getExample(),
            'cacheSize' => Integer.getExample()
        };

        OASClient client;
        OASConfigmgrApi api;
        OASComAdobeCqSocialDatastoreRdbImplS response;
        OASComAdobeCqSocialDatastoreRdbImplS expectedResponse;
        String js = '';

        client = new OASClient();
        api = new OASConfigmgrApi(client);

        js = JSON.serialize(OASComAdobeCqSocialDatastoreRdbImplS.getExample());
        res.setHeader('Content-Type', 'application/json');
        res.setBody(js);
        expectedResponse = OASComAdobeCqSocialDatastoreRdbImplS.getExample();
        response = (OASComAdobeCqSocialDatastoreRdbImplS) api.comAdobeCqSocialDatastoreRdbImplSocialRDBResourceProviderFactor(params);
        System.assertEquals(expectedResponse, response);
    }

    /**
     * 
     *
     * 
     */
    @isTest
    private static void comAdobeCqSocialEnablementAdaptorsEnablementLearningPathAdaptorFTest() {
        HttpResponse res = new HttpResponse();
        res.setStatusCode(200);
        res.setStatus('OK');
        Test.setMock(HttpCalloutMock.class, new OASResponseMock(res));

        Map<String, Object> params = new Map<String, Object>{
            'post' => Boolean.getExample(),
            'apply' => Boolean.getExample(),
            'r_delete' => Boolean.getExample(),
            'action' => 'null',
            'location' => 'null',
            'propertylist' => new List<String>{''},
            'isMemberCheck' => Boolean.getExample()
        };

        OASClient client;
        OASConfigmgrApi api;
        OASComAdobeCqSocialEnablementAdaptor response;
        OASComAdobeCqSocialEnablementAdaptor expectedResponse;
        String js = '';

        client = new OASClient();
        api = new OASConfigmgrApi(client);

        js = JSON.serialize(OASComAdobeCqSocialEnablementAdaptor.getExample());
        res.setHeader('Content-Type', 'application/json');
        res.setBody(js);
        expectedResponse = OASComAdobeCqSocialEnablementAdaptor.getExample();
        response = (OASComAdobeCqSocialEnablementAdaptor) api.comAdobeCqSocialEnablementAdaptorsEnablementLearningPathAdaptorF(params);
        System.assertEquals(expectedResponse, response);
    }

    /**
     * 
     *
     * 
     */
    @isTest
    private static void comAdobeCqSocialEnablementAdaptorsEnablementResourceAdaptorFactoTest() {
        HttpResponse res = new HttpResponse();
        res.setStatusCode(200);
        res.setStatus('OK');
        Test.setMock(HttpCalloutMock.class, new OASResponseMock(res));

        Map<String, Object> params = new Map<String, Object>{
            'post' => Boolean.getExample(),
            'apply' => Boolean.getExample(),
            'r_delete' => Boolean.getExample(),
            'action' => 'null',
            'location' => 'null',
            'propertylist' => new List<String>{''},
            'isMemberCheck' => Boolean.getExample()
        };

        OASClient client;
        OASConfigmgrApi api;
        OASComAdobeCqSocialEnablementAdaptor response;
        OASComAdobeCqSocialEnablementAdaptor expectedResponse;
        String js = '';

        client = new OASClient();
        api = new OASConfigmgrApi(client);

        js = JSON.serialize(OASComAdobeCqSocialEnablementAdaptor.getExample());
        res.setHeader('Content-Type', 'application/json');
        res.setBody(js);
        expectedResponse = OASComAdobeCqSocialEnablementAdaptor.getExample();
        response = (OASComAdobeCqSocialEnablementAdaptor) api.comAdobeCqSocialEnablementAdaptorsEnablementResourceAdaptorFacto(params);
        System.assertEquals(expectedResponse, response);
    }

    /**
     * 
     *
     * 
     */
    @isTest
    private static void comAdobeCqSocialEnablementLearningpathEndpointsImplEnablementLTest() {
        HttpResponse res = new HttpResponse();
        res.setStatusCode(200);
        res.setStatus('OK');
        Test.setMock(HttpCalloutMock.class, new OASResponseMock(res));

        Map<String, Object> params = new Map<String, Object>{
            'post' => Boolean.getExample(),
            'apply' => Boolean.getExample(),
            'r_delete' => Boolean.getExample(),
            'action' => 'null',
            'location' => 'null',
            'propertylist' => new List<String>{''},
            'fieldWhitelist' => new List<String>{''}
        };

        OASClient client;
        OASConfigmgrApi api;
        OASComAdobeCqSocialEnablementLearnin response;
        OASComAdobeCqSocialEnablementLearnin expectedResponse;
        String js = '';

        client = new OASClient();
        api = new OASConfigmgrApi(client);

        js = JSON.serialize(OASComAdobeCqSocialEnablementLearnin.getExample());
        res.setHeader('Content-Type', 'application/json');
        res.setBody(js);
        expectedResponse = OASComAdobeCqSocialEnablementLearnin.getExample();
        response = (OASComAdobeCqSocialEnablementLearnin) api.comAdobeCqSocialEnablementLearningpathEndpointsImplEnablementL(params);
        System.assertEquals(expectedResponse, response);
    }

    /**
     * 
     *
     * 
     */
    @isTest
    private static void comAdobeCqSocialEnablementResourceEndpointsImplEnablementResouTest() {
        HttpResponse res = new HttpResponse();
        res.setStatusCode(200);
        res.setStatus('OK');
        Test.setMock(HttpCalloutMock.class, new OASResponseMock(res));

        Map<String, Object> params = new Map<String, Object>{
            'post' => Boolean.getExample(),
            'apply' => Boolean.getExample(),
            'r_delete' => Boolean.getExample(),
            'action' => 'null',
            'location' => 'null',
            'propertylist' => new List<String>{''},
            'fieldWhitelist' => new List<String>{''}
        };

        OASClient client;
        OASConfigmgrApi api;
        OASComAdobeCqSocialEnablementResourc response;
        OASComAdobeCqSocialEnablementResourc expectedResponse;
        String js = '';

        client = new OASClient();
        api = new OASConfigmgrApi(client);

        js = JSON.serialize(OASComAdobeCqSocialEnablementResourc.getExample());
        res.setHeader('Content-Type', 'application/json');
        res.setBody(js);
        expectedResponse = OASComAdobeCqSocialEnablementResourc.getExample();
        response = (OASComAdobeCqSocialEnablementResourc) api.comAdobeCqSocialEnablementResourceEndpointsImplEnablementResou(params);
        System.assertEquals(expectedResponse, response);
    }

    /**
     * 
     *
     * 
     */
    @isTest
    private static void comAdobeCqSocialEnablementServicesImplAuthorMarkerImplTest() {
        HttpResponse res = new HttpResponse();
        res.setStatusCode(200);
        res.setStatus('OK');
        Test.setMock(HttpCalloutMock.class, new OASResponseMock(res));

        Map<String, Object> params = new Map<String, Object>{
            'post' => Boolean.getExample(),
            'apply' => Boolean.getExample(),
            'r_delete' => Boolean.getExample(),
            'action' => 'null',
            'location' => 'null',
            'propertylist' => new List<String>{''},
            'serviceRanking' => Integer.getExample()
        };

        OASClient client;
        OASConfigmgrApi api;
        OASComAdobeCqSocialEnablementService response;
        OASComAdobeCqSocialEnablementService expectedResponse;
        String js = '';

        client = new OASClient();
        api = new OASConfigmgrApi(client);

        js = JSON.serialize(OASComAdobeCqSocialEnablementService.getExample());
        res.setHeader('Content-Type', 'application/json');
        res.setBody(js);
        expectedResponse = OASComAdobeCqSocialEnablementService.getExample();
        response = (OASComAdobeCqSocialEnablementService) api.comAdobeCqSocialEnablementServicesImplAuthorMarkerImpl(params);
        System.assertEquals(expectedResponse, response);
    }

    /**
     * 
     *
     * 
     */
    @isTest
    private static void comAdobeCqSocialFilelibraryClientEndpointsFilelibraryDownloadGeTest() {
        HttpResponse res = new HttpResponse();
        res.setStatusCode(200);
        res.setStatus('OK');
        Test.setMock(HttpCalloutMock.class, new OASResponseMock(res));

        Map<String, Object> params = new Map<String, Object>{
            'post' => Boolean.getExample(),
            'apply' => Boolean.getExample(),
            'r_delete' => Boolean.getExample(),
            'action' => 'null',
            'location' => 'null',
            'propertylist' => new List<String>{''},
            'slingServletSelectors' => 'null',
            'slingServletExtensions' => 'null'
        };

        OASClient client;
        OASConfigmgrApi api;
        OASComAdobeCqSocialFilelibraryClient response;
        OASComAdobeCqSocialFilelibraryClient expectedResponse;
        String js = '';

        client = new OASClient();
        api = new OASConfigmgrApi(client);

        js = JSON.serialize(OASComAdobeCqSocialFilelibraryClient.getExample());
        res.setHeader('Content-Type', 'application/json');
        res.setBody(js);
        expectedResponse = OASComAdobeCqSocialFilelibraryClient.getExample();
        response = (OASComAdobeCqSocialFilelibraryClient) api.comAdobeCqSocialFilelibraryClientEndpointsFilelibraryDownloadGe(params);
        System.assertEquals(expectedResponse, response);
    }

    /**
     * 
     *
     * 
     */
    @isTest
    private static void comAdobeCqSocialFilelibraryClientEndpointsImplFileLibraryOperaTest() {
        HttpResponse res = new HttpResponse();
        res.setStatusCode(200);
        res.setStatus('OK');
        Test.setMock(HttpCalloutMock.class, new OASResponseMock(res));

        Map<String, Object> params = new Map<String, Object>{
            'post' => Boolean.getExample(),
            'apply' => Boolean.getExample(),
            'r_delete' => Boolean.getExample(),
            'action' => 'null',
            'location' => 'null',
            'propertylist' => new List<String>{''},
            'fieldWhitelist' => new List<String>{''},
            'attachmentTypeBlacklist' => new List<String>{''}
        };

        OASClient client;
        OASConfigmgrApi api;
        OASComAdobeCqSocialFilelibraryClient response;
        OASComAdobeCqSocialFilelibraryClient expectedResponse;
        String js = '';

        client = new OASClient();
        api = new OASConfigmgrApi(client);

        js = JSON.serialize(OASComAdobeCqSocialFilelibraryClient.getExample());
        res.setHeader('Content-Type', 'application/json');
        res.setBody(js);
        expectedResponse = OASComAdobeCqSocialFilelibraryClient.getExample();
        response = (OASComAdobeCqSocialFilelibraryClient) api.comAdobeCqSocialFilelibraryClientEndpointsImplFileLibraryOpera(params);
        System.assertEquals(expectedResponse, response);
    }

    /**
     * 
     *
     * 
     */
    @isTest
    private static void comAdobeCqSocialForumClientEndpointsImplForumOperationsServiceTest() {
        HttpResponse res = new HttpResponse();
        res.setStatusCode(200);
        res.setStatus('OK');
        Test.setMock(HttpCalloutMock.class, new OASResponseMock(res));

        Map<String, Object> params = new Map<String, Object>{
            'post' => Boolean.getExample(),
            'apply' => Boolean.getExample(),
            'r_delete' => Boolean.getExample(),
            'action' => 'null',
            'location' => 'null',
            'propertylist' => new List<String>{''},
            'fieldWhitelist' => new List<String>{''},
            'attachmentTypeBlacklist' => new List<String>{''}
        };

        OASClient client;
        OASConfigmgrApi api;
        OASComAdobeCqSocialForumClientEndpoi response;
        OASComAdobeCqSocialForumClientEndpoi expectedResponse;
        String js = '';

        client = new OASClient();
        api = new OASConfigmgrApi(client);

        js = JSON.serialize(OASComAdobeCqSocialForumClientEndpoi.getExample());
        res.setHeader('Content-Type', 'application/json');
        res.setBody(js);
        expectedResponse = OASComAdobeCqSocialForumClientEndpoi.getExample();
        response = (OASComAdobeCqSocialForumClientEndpoi) api.comAdobeCqSocialForumClientEndpointsImplForumOperationsService(params);
        System.assertEquals(expectedResponse, response);
    }

    /**
     * 
     *
     * 
     */
    @isTest
    private static void comAdobeCqSocialForumDispatcherImplFlushOperationsTest() {
        HttpResponse res = new HttpResponse();
        res.setStatusCode(200);
        res.setStatus('OK');
        Test.setMock(HttpCalloutMock.class, new OASResponseMock(res));

        Map<String, Object> params = new Map<String, Object>{
            'post' => Boolean.getExample(),
            'apply' => Boolean.getExample(),
            'r_delete' => Boolean.getExample(),
            'action' => 'null',
            'location' => 'null',
            'propertylist' => new List<String>{''},
            'extensionOrder' => Integer.getExample(),
            'flushForumontopic' => Boolean.getExample()
        };

        OASClient client;
        OASConfigmgrApi api;
        OASComAdobeCqSocialForumDispatcherIm response;
        OASComAdobeCqSocialForumDispatcherIm expectedResponse;
        String js = '';

        client = new OASClient();
        api = new OASConfigmgrApi(client);

        js = JSON.serialize(OASComAdobeCqSocialForumDispatcherIm.getExample());
        res.setHeader('Content-Type', 'application/json');
        res.setBody(js);
        expectedResponse = OASComAdobeCqSocialForumDispatcherIm.getExample();
        response = (OASComAdobeCqSocialForumDispatcherIm) api.comAdobeCqSocialForumDispatcherImplFlushOperations(params);
        System.assertEquals(expectedResponse, response);
    }

    /**
     * 
     *
     * 
     */
    @isTest
    private static void comAdobeCqSocialGroupClientImplCommunityGroupCollectionComponenTest() {
        HttpResponse res = new HttpResponse();
        res.setStatusCode(200);
        res.setStatus('OK');
        Test.setMock(HttpCalloutMock.class, new OASResponseMock(res));

        Map<String, Object> params = new Map<String, Object>{
            'post' => Boolean.getExample(),
            'apply' => Boolean.getExample(),
            'r_delete' => Boolean.getExample(),
            'action' => 'null',
            'location' => 'null',
            'propertylist' => new List<String>{''},
            'groupListingPaginationEnable' => Boolean.getExample(),
            'groupListingLazyloadingEnable' => Boolean.getExample(),
            'pageSize' => Integer.getExample(),
            'priority' => Integer.getExample()
        };

        OASClient client;
        OASConfigmgrApi api;
        OASComAdobeCqSocialGroupClientImplCo response;
        OASComAdobeCqSocialGroupClientImplCo expectedResponse;
        String js = '';

        client = new OASClient();
        api = new OASConfigmgrApi(client);

        js = JSON.serialize(OASComAdobeCqSocialGroupClientImplCo.getExample());
        res.setHeader('Content-Type', 'application/json');
        res.setBody(js);
        expectedResponse = OASComAdobeCqSocialGroupClientImplCo.getExample();
        response = (OASComAdobeCqSocialGroupClientImplCo) api.comAdobeCqSocialGroupClientImplCommunityGroupCollectionComponen(params);
        System.assertEquals(expectedResponse, response);
    }

    /**
     * 
     *
     * 
     */
    @isTest
    private static void comAdobeCqSocialGroupImplGroupServiceImplTest() {
        HttpResponse res = new HttpResponse();
        res.setStatusCode(200);
        res.setStatus('OK');
        Test.setMock(HttpCalloutMock.class, new OASResponseMock(res));

        Map<String, Object> params = new Map<String, Object>{
            'post' => Boolean.getExample(),
            'apply' => Boolean.getExample(),
            'r_delete' => Boolean.getExample(),
            'action' => 'null',
            'location' => 'null',
            'propertylist' => new List<String>{''},
            'maxWaitTime' => Integer.getExample(),
            'minWaitBetweenRetries' => Integer.getExample()
        };

        OASClient client;
        OASConfigmgrApi api;
        OASComAdobeCqSocialGroupImplGroupSer response;
        OASComAdobeCqSocialGroupImplGroupSer expectedResponse;
        String js = '';

        client = new OASClient();
        api = new OASConfigmgrApi(client);

        js = JSON.serialize(OASComAdobeCqSocialGroupImplGroupSer.getExample());
        res.setHeader('Content-Type', 'application/json');
        res.setBody(js);
        expectedResponse = OASComAdobeCqSocialGroupImplGroupSer.getExample();
        response = (OASComAdobeCqSocialGroupImplGroupSer) api.comAdobeCqSocialGroupImplGroupServiceImpl(params);
        System.assertEquals(expectedResponse, response);
    }

    /**
     * 
     *
     * 
     */
    @isTest
    private static void comAdobeCqSocialHandlebarsGuavaTemplateCacheImplTest() {
        HttpResponse res = new HttpResponse();
        res.setStatusCode(200);
        res.setStatus('OK');
        Test.setMock(HttpCalloutMock.class, new OASResponseMock(res));

        Map<String, Object> params = new Map<String, Object>{
            'post' => Boolean.getExample(),
            'apply' => Boolean.getExample(),
            'r_delete' => Boolean.getExample(),
            'action' => 'null',
            'location' => 'null',
            'propertylist' => new List<String>{''},
            'parameterGuavaCacheEnabled' => Boolean.getExample(),
            'parameterGuavaCacheParams' => 'null',
            'parameterGuavaCacheReload' => Boolean.getExample(),
            'serviceRanking' => Integer.getExample()
        };

        OASClient client;
        OASConfigmgrApi api;
        OASComAdobeCqSocialHandlebarsGuavaTe response;
        OASComAdobeCqSocialHandlebarsGuavaTe expectedResponse;
        String js = '';

        client = new OASClient();
        api = new OASConfigmgrApi(client);

        js = JSON.serialize(OASComAdobeCqSocialHandlebarsGuavaTe.getExample());
        res.setHeader('Content-Type', 'application/json');
        res.setBody(js);
        expectedResponse = OASComAdobeCqSocialHandlebarsGuavaTe.getExample();
        response = (OASComAdobeCqSocialHandlebarsGuavaTe) api.comAdobeCqSocialHandlebarsGuavaTemplateCacheImpl(params);
        System.assertEquals(expectedResponse, response);
    }

    /**
     * 
     *
     * 
     */
    @isTest
    private static void comAdobeCqSocialIdeationClientEndpointsImplIdeationOperationsSTest() {
        HttpResponse res = new HttpResponse();
        res.setStatusCode(200);
        res.setStatus('OK');
        Test.setMock(HttpCalloutMock.class, new OASResponseMock(res));

        Map<String, Object> params = new Map<String, Object>{
            'post' => Boolean.getExample(),
            'apply' => Boolean.getExample(),
            'r_delete' => Boolean.getExample(),
            'action' => 'null',
            'location' => 'null',
            'propertylist' => new List<String>{''},
            'fieldWhitelist' => new List<String>{''},
            'attachmentTypeBlacklist' => new List<String>{''}
        };

        OASClient client;
        OASConfigmgrApi api;
        OASComAdobeCqSocialIdeationClientEnd response;
        OASComAdobeCqSocialIdeationClientEnd expectedResponse;
        String js = '';

        client = new OASClient();
        api = new OASConfigmgrApi(client);

        js = JSON.serialize(OASComAdobeCqSocialIdeationClientEnd.getExample());
        res.setHeader('Content-Type', 'application/json');
        res.setBody(js);
        expectedResponse = OASComAdobeCqSocialIdeationClientEnd.getExample();
        response = (OASComAdobeCqSocialIdeationClientEnd) api.comAdobeCqSocialIdeationClientEndpointsImplIdeationOperationsS(params);
        System.assertEquals(expectedResponse, response);
    }

    /**
     * 
     *
     * 
     */
    @isTest
    private static void comAdobeCqSocialJournalClientEndpointsImplJournalOperationsSerTest() {
        HttpResponse res = new HttpResponse();
        res.setStatusCode(200);
        res.setStatus('OK');
        Test.setMock(HttpCalloutMock.class, new OASResponseMock(res));

        Map<String, Object> params = new Map<String, Object>{
            'post' => Boolean.getExample(),
            'apply' => Boolean.getExample(),
            'r_delete' => Boolean.getExample(),
            'action' => 'null',
            'location' => 'null',
            'propertylist' => new List<String>{''},
            'fieldWhitelist' => new List<String>{''},
            'attachmentTypeBlacklist' => new List<String>{''}
        };

        OASClient client;
        OASConfigmgrApi api;
        OASComAdobeCqSocialJournalClientEndp response;
        OASComAdobeCqSocialJournalClientEndp expectedResponse;
        String js = '';

        client = new OASClient();
        api = new OASConfigmgrApi(client);

        js = JSON.serialize(OASComAdobeCqSocialJournalClientEndp.getExample());
        res.setHeader('Content-Type', 'application/json');
        res.setBody(js);
        expectedResponse = OASComAdobeCqSocialJournalClientEndp.getExample();
        response = (OASComAdobeCqSocialJournalClientEndp) api.comAdobeCqSocialJournalClientEndpointsImplJournalOperationsSer(params);
        System.assertEquals(expectedResponse, response);
    }

    /**
     * 
     *
     * 
     */
    @isTest
    private static void comAdobeCqSocialMembersEndpointsImplCommunityMemberGroupProfileTest() {
        HttpResponse res = new HttpResponse();
        res.setStatusCode(200);
        res.setStatus('OK');
        Test.setMock(HttpCalloutMock.class, new OASResponseMock(res));

        Map<String, Object> params = new Map<String, Object>{
            'post' => Boolean.getExample(),
            'apply' => Boolean.getExample(),
            'r_delete' => Boolean.getExample(),
            'action' => 'null',
            'location' => 'null',
            'propertylist' => new List<String>{''},
            'fieldWhitelist' => new List<String>{''}
        };

        OASClient client;
        OASConfigmgrApi api;
        OASComAdobeCqSocialMembersEndpointsI response;
        OASComAdobeCqSocialMembersEndpointsI expectedResponse;
        String js = '';

        client = new OASClient();
        api = new OASConfigmgrApi(client);

        js = JSON.serialize(OASComAdobeCqSocialMembersEndpointsI.getExample());
        res.setHeader('Content-Type', 'application/json');
        res.setBody(js);
        expectedResponse = OASComAdobeCqSocialMembersEndpointsI.getExample();
        response = (OASComAdobeCqSocialMembersEndpointsI) api.comAdobeCqSocialMembersEndpointsImplCommunityMemberGroupProfile(params);
        System.assertEquals(expectedResponse, response);
    }

    /**
     * 
     *
     * 
     */
    @isTest
    private static void comAdobeCqSocialMembersEndpointsImplCommunityMemberUserProfileOTest() {
        HttpResponse res = new HttpResponse();
        res.setStatusCode(200);
        res.setStatus('OK');
        Test.setMock(HttpCalloutMock.class, new OASResponseMock(res));

        Map<String, Object> params = new Map<String, Object>{
            'post' => Boolean.getExample(),
            'apply' => Boolean.getExample(),
            'r_delete' => Boolean.getExample(),
            'action' => 'null',
            'location' => 'null',
            'propertylist' => new List<String>{''},
            'fieldWhitelist' => new List<String>{''}
        };

        OASClient client;
        OASConfigmgrApi api;
        OASComAdobeCqSocialMembersEndpointsI response;
        OASComAdobeCqSocialMembersEndpointsI expectedResponse;
        String js = '';

        client = new OASClient();
        api = new OASConfigmgrApi(client);

        js = JSON.serialize(OASComAdobeCqSocialMembersEndpointsI.getExample());
        res.setHeader('Content-Type', 'application/json');
        res.setBody(js);
        expectedResponse = OASComAdobeCqSocialMembersEndpointsI.getExample();
        response = (OASComAdobeCqSocialMembersEndpointsI) api.comAdobeCqSocialMembersEndpointsImplCommunityMemberUserProfileO(params);
        System.assertEquals(expectedResponse, response);
    }

    /**
     * 
     *
     * 
     */
    @isTest
    private static void comAdobeCqSocialMembersImplCommunityMemberGroupProfileComponentFTest() {
        HttpResponse res = new HttpResponse();
        res.setStatusCode(200);
        res.setStatus('OK');
        Test.setMock(HttpCalloutMock.class, new OASResponseMock(res));

        Map<String, Object> params = new Map<String, Object>{
            'post' => Boolean.getExample(),
            'apply' => Boolean.getExample(),
            'r_delete' => Boolean.getExample(),
            'action' => 'null',
            'location' => 'null',
            'propertylist' => new List<String>{''},
            'everyoneLimit' => Integer.getExample(),
            'priority' => Integer.getExample()
        };

        OASClient client;
        OASConfigmgrApi api;
        OASComAdobeCqSocialMembersImplCommun response;
        OASComAdobeCqSocialMembersImplCommun expectedResponse;
        String js = '';

        client = new OASClient();
        api = new OASConfigmgrApi(client);

        js = JSON.serialize(OASComAdobeCqSocialMembersImplCommun.getExample());
        res.setHeader('Content-Type', 'application/json');
        res.setBody(js);
        expectedResponse = OASComAdobeCqSocialMembersImplCommun.getExample();
        response = (OASComAdobeCqSocialMembersImplCommun) api.comAdobeCqSocialMembersImplCommunityMemberGroupProfileComponentF(params);
        System.assertEquals(expectedResponse, response);
    }

    /**
     * 
     *
     * 
     */
    @isTest
    private static void comAdobeCqSocialMessagingClientEndpointsImplMessagingOperationTest() {
        HttpResponse res = new HttpResponse();
        res.setStatusCode(200);
        res.setStatus('OK');
        Test.setMock(HttpCalloutMock.class, new OASResponseMock(res));

        Map<String, Object> params = new Map<String, Object>{
            'post' => Boolean.getExample(),
            'apply' => Boolean.getExample(),
            'r_delete' => Boolean.getExample(),
            'action' => 'null',
            'location' => 'null',
            'propertylist' => new List<String>{''},
            'messageProperties' => new List<String>{''},
            'messageBoxSizeLimit' => Integer.getExample(),
            'messageCountLimit' => Integer.getExample(),
            'notifyFailure' => Boolean.getExample(),
            'failureMessageFrom' => 'null',
            'failureTemplatePath' => 'null',
            'maxRetries' => Integer.getExample(),
            'minWaitBetweenRetries' => Integer.getExample(),
            'countUpdatePoolSize' => Integer.getExample(),
            'inboxPath' => 'null',
            'sentitemsPath' => 'null',
            'supportAttachments' => Boolean.getExample(),
            'supportGroupMessaging' => Boolean.getExample(),
            'maxTotalRecipients' => Integer.getExample(),
            'batchSize' => Integer.getExample(),
            'maxTotalAttachmentSize' => Integer.getExample(),
            'attachmentTypeBlacklist' => new List<String>{''},
            'allowedAttachmentTypes' => new List<String>{''},
            'serviceSelector' => 'null',
            'fieldWhitelist' => new List<String>{''}
        };

        OASClient client;
        OASConfigmgrApi api;
        OASComAdobeCqSocialMessagingClientEn response;
        OASComAdobeCqSocialMessagingClientEn expectedResponse;
        String js = '';

        client = new OASClient();
        api = new OASConfigmgrApi(client);

        js = JSON.serialize(OASComAdobeCqSocialMessagingClientEn.getExample());
        res.setHeader('Content-Type', 'application/json');
        res.setBody(js);
        expectedResponse = OASComAdobeCqSocialMessagingClientEn.getExample();
        response = (OASComAdobeCqSocialMessagingClientEn) api.comAdobeCqSocialMessagingClientEndpointsImplMessagingOperation(params);
        System.assertEquals(expectedResponse, response);
    }

    /**
     * 
     *
     * 
     */
    @isTest
    private static void comAdobeCqSocialModerationDashboardApiFilterGroupSocialComponenTest() {
        HttpResponse res = new HttpResponse();
        res.setStatusCode(200);
        res.setStatus('OK');
        Test.setMock(HttpCalloutMock.class, new OASResponseMock(res));

        Map<String, Object> params = new Map<String, Object>{
            'post' => Boolean.getExample(),
            'apply' => Boolean.getExample(),
            'r_delete' => Boolean.getExample(),
            'action' => 'null',
            'location' => 'null',
            'propertylist' => new List<String>{''},
            'resourceTypeFilters' => new List<String>{''},
            'priority' => Integer.getExample()
        };

        OASClient client;
        OASConfigmgrApi api;
        OASComAdobeCqSocialModerationDashboa response;
        OASComAdobeCqSocialModerationDashboa expectedResponse;
        String js = '';

        client = new OASClient();
        api = new OASConfigmgrApi(client);

        js = JSON.serialize(OASComAdobeCqSocialModerationDashboa.getExample());
        res.setHeader('Content-Type', 'application/json');
        res.setBody(js);
        expectedResponse = OASComAdobeCqSocialModerationDashboa.getExample();
        response = (OASComAdobeCqSocialModerationDashboa) api.comAdobeCqSocialModerationDashboardApiFilterGroupSocialComponen(params);
        System.assertEquals(expectedResponse, response);
    }

    /**
     * 
     *
     * 
     */
    @isTest
    private static void comAdobeCqSocialModerationDashboardApiModerationDashboardSocialTest() {
        HttpResponse res = new HttpResponse();
        res.setStatusCode(200);
        res.setStatus('OK');
        Test.setMock(HttpCalloutMock.class, new OASResponseMock(res));

        Map<String, Object> params = new Map<String, Object>{
            'post' => Boolean.getExample(),
            'apply' => Boolean.getExample(),
            'r_delete' => Boolean.getExample(),
            'action' => 'null',
            'location' => 'null',
            'propertylist' => new List<String>{''},
            'priority' => Integer.getExample()
        };

        OASClient client;
        OASConfigmgrApi api;
        OASComAdobeCqSocialModerationDashboa response;
        OASComAdobeCqSocialModerationDashboa expectedResponse;
        String js = '';

        client = new OASClient();
        api = new OASConfigmgrApi(client);

        js = JSON.serialize(OASComAdobeCqSocialModerationDashboa.getExample());
        res.setHeader('Content-Type', 'application/json');
        res.setBody(js);
        expectedResponse = OASComAdobeCqSocialModerationDashboa.getExample();
        response = (OASComAdobeCqSocialModerationDashboa) api.comAdobeCqSocialModerationDashboardApiModerationDashboardSocial(params);
        System.assertEquals(expectedResponse, response);
    }

    /**
     * 
     *
     * 
     */
    @isTest
    private static void comAdobeCqSocialModerationDashboardApiUserDetailsSocialComponenTest() {
        HttpResponse res = new HttpResponse();
        res.setStatusCode(200);
        res.setStatus('OK');
        Test.setMock(HttpCalloutMock.class, new OASResponseMock(res));

        Map<String, Object> params = new Map<String, Object>{
            'post' => Boolean.getExample(),
            'apply' => Boolean.getExample(),
            'r_delete' => Boolean.getExample(),
            'action' => 'null',
            'location' => 'null',
            'propertylist' => new List<String>{''},
            'priority' => Integer.getExample()
        };

        OASClient client;
        OASConfigmgrApi api;
        OASComAdobeCqSocialModerationDashboa response;
        OASComAdobeCqSocialModerationDashboa expectedResponse;
        String js = '';

        client = new OASClient();
        api = new OASConfigmgrApi(client);

        js = JSON.serialize(OASComAdobeCqSocialModerationDashboa.getExample());
        res.setHeader('Content-Type', 'application/json');
        res.setBody(js);
        expectedResponse = OASComAdobeCqSocialModerationDashboa.getExample();
        response = (OASComAdobeCqSocialModerationDashboa) api.comAdobeCqSocialModerationDashboardApiUserDetailsSocialComponen(params);
        System.assertEquals(expectedResponse, response);
    }

    /**
     * 
     *
     * 
     */
    @isTest
    private static void comAdobeCqSocialModerationDashboardInternalImplFilterGroupSociTest() {
        HttpResponse res = new HttpResponse();
        res.setStatusCode(200);
        res.setStatus('OK');
        Test.setMock(HttpCalloutMock.class, new OASResponseMock(res));

        Map<String, Object> params = new Map<String, Object>{
            'post' => Boolean.getExample(),
            'apply' => Boolean.getExample(),
            'r_delete' => Boolean.getExample(),
            'action' => 'null',
            'location' => 'null',
            'propertylist' => new List<String>{''},
            'resourceTypeFilters' => new List<String>{''},
            'priority' => Integer.getExample()
        };

        OASClient client;
        OASConfigmgrApi api;
        OASComAdobeCqSocialModerationDashboa response;
        OASComAdobeCqSocialModerationDashboa expectedResponse;
        String js = '';

        client = new OASClient();
        api = new OASConfigmgrApi(client);

        js = JSON.serialize(OASComAdobeCqSocialModerationDashboa.getExample());
        res.setHeader('Content-Type', 'application/json');
        res.setBody(js);
        expectedResponse = OASComAdobeCqSocialModerationDashboa.getExample();
        response = (OASComAdobeCqSocialModerationDashboa) api.comAdobeCqSocialModerationDashboardInternalImplFilterGroupSoci(params);
        System.assertEquals(expectedResponse, response);
    }

    /**
     * 
     *
     * 
     */
    @isTest
    private static void comAdobeCqSocialNotificationsImplMentionsRouterTest() {
        HttpResponse res = new HttpResponse();
        res.setStatusCode(200);
        res.setStatus('OK');
        Test.setMock(HttpCalloutMock.class, new OASResponseMock(res));

        Map<String, Object> params = new Map<String, Object>{
            'post' => Boolean.getExample(),
            'apply' => Boolean.getExample(),
            'r_delete' => Boolean.getExample(),
            'action' => 'null',
            'location' => 'null',
            'propertylist' => new List<String>{''},
            'eventTopics' => 'null',
            'eventFilter' => 'null'
        };

        OASClient client;
        OASConfigmgrApi api;
        OASComAdobeCqSocialNotificationsImpl response;
        OASComAdobeCqSocialNotificationsImpl expectedResponse;
        String js = '';

        client = new OASClient();
        api = new OASConfigmgrApi(client);

        js = JSON.serialize(OASComAdobeCqSocialNotificationsImpl.getExample());
        res.setHeader('Content-Type', 'application/json');
        res.setBody(js);
        expectedResponse = OASComAdobeCqSocialNotificationsImpl.getExample();
        response = (OASComAdobeCqSocialNotificationsImpl) api.comAdobeCqSocialNotificationsImplMentionsRouter(params);
        System.assertEquals(expectedResponse, response);
    }

    /**
     * 
     *
     * 
     */
    @isTest
    private static void comAdobeCqSocialNotificationsImplNotificationManagerImplTest() {
        HttpResponse res = new HttpResponse();
        res.setStatusCode(200);
        res.setStatus('OK');
        Test.setMock(HttpCalloutMock.class, new OASResponseMock(res));

        Map<String, Object> params = new Map<String, Object>{
            'post' => Boolean.getExample(),
            'apply' => Boolean.getExample(),
            'r_delete' => Boolean.getExample(),
            'action' => 'null',
            'location' => 'null',
            'propertylist' => new List<String>{''},
            'maxUnreadNotificationCount' => Integer.getExample()
        };

        OASClient client;
        OASConfigmgrApi api;
        OASComAdobeCqSocialNotificationsImpl response;
        OASComAdobeCqSocialNotificationsImpl expectedResponse;
        String js = '';

        client = new OASClient();
        api = new OASConfigmgrApi(client);

        js = JSON.serialize(OASComAdobeCqSocialNotificationsImpl.getExample());
        res.setHeader('Content-Type', 'application/json');
        res.setBody(js);
        expectedResponse = OASComAdobeCqSocialNotificationsImpl.getExample();
        response = (OASComAdobeCqSocialNotificationsImpl) api.comAdobeCqSocialNotificationsImplNotificationManagerImpl(params);
        System.assertEquals(expectedResponse, response);
    }

    /**
     * 
     *
     * 
     */
    @isTest
    private static void comAdobeCqSocialNotificationsImplNotificationsRouterTest() {
        HttpResponse res = new HttpResponse();
        res.setStatusCode(200);
        res.setStatus('OK');
        Test.setMock(HttpCalloutMock.class, new OASResponseMock(res));

        Map<String, Object> params = new Map<String, Object>{
            'post' => Boolean.getExample(),
            'apply' => Boolean.getExample(),
            'r_delete' => Boolean.getExample(),
            'action' => 'null',
            'location' => 'null',
            'propertylist' => new List<String>{''},
            'eventTopics' => 'null',
            'eventFilter' => 'null'
        };

        OASClient client;
        OASConfigmgrApi api;
        OASComAdobeCqSocialNotificationsImpl response;
        OASComAdobeCqSocialNotificationsImpl expectedResponse;
        String js = '';

        client = new OASClient();
        api = new OASConfigmgrApi(client);

        js = JSON.serialize(OASComAdobeCqSocialNotificationsImpl.getExample());
        res.setHeader('Content-Type', 'application/json');
        res.setBody(js);
        expectedResponse = OASComAdobeCqSocialNotificationsImpl.getExample();
        response = (OASComAdobeCqSocialNotificationsImpl) api.comAdobeCqSocialNotificationsImplNotificationsRouter(params);
        System.assertEquals(expectedResponse, response);
    }

    /**
     * 
     *
     * 
     */
    @isTest
    private static void comAdobeCqSocialQnaClientEndpointsImplQnaForumOperationsServicTest() {
        HttpResponse res = new HttpResponse();
        res.setStatusCode(200);
        res.setStatus('OK');
        Test.setMock(HttpCalloutMock.class, new OASResponseMock(res));

        Map<String, Object> params = new Map<String, Object>{
            'post' => Boolean.getExample(),
            'apply' => Boolean.getExample(),
            'r_delete' => Boolean.getExample(),
            'action' => 'null',
            'location' => 'null',
            'propertylist' => new List<String>{''},
            'fieldWhitelist' => new List<String>{''},
            'attachmentTypeBlacklist' => new List<String>{''}
        };

        OASClient client;
        OASConfigmgrApi api;
        OASComAdobeCqSocialQnaClientEndpoint response;
        OASComAdobeCqSocialQnaClientEndpoint expectedResponse;
        String js = '';

        client = new OASClient();
        api = new OASConfigmgrApi(client);

        js = JSON.serialize(OASComAdobeCqSocialQnaClientEndpoint.getExample());
        res.setHeader('Content-Type', 'application/json');
        res.setBody(js);
        expectedResponse = OASComAdobeCqSocialQnaClientEndpoint.getExample();
        response = (OASComAdobeCqSocialQnaClientEndpoint) api.comAdobeCqSocialQnaClientEndpointsImplQnaForumOperationsServic(params);
        System.assertEquals(expectedResponse, response);
    }

    /**
     * 
     *
     * 
     */
    @isTest
    private static void comAdobeCqSocialReportingAnalyticsServicesImplAnalyticsReportITest() {
        HttpResponse res = new HttpResponse();
        res.setStatusCode(200);
        res.setStatus('OK');
        Test.setMock(HttpCalloutMock.class, new OASResponseMock(res));

        Map<String, Object> params = new Map<String, Object>{
            'post' => Boolean.getExample(),
            'apply' => Boolean.getExample(),
            'r_delete' => Boolean.getExample(),
            'action' => 'null',
            'location' => 'null',
            'propertylist' => new List<String>{''},
            'cqSocialReportingAnalyticsPollingImporterInterval' => Integer.getExample(),
            'cqSocialReportingAnalyticsPollingImporterPageSize' => Integer.getExample()
        };

        OASClient client;
        OASConfigmgrApi api;
        OASComAdobeCqSocialReportingAnalytic response;
        OASComAdobeCqSocialReportingAnalytic expectedResponse;
        String js = '';

        client = new OASClient();
        api = new OASConfigmgrApi(client);

        js = JSON.serialize(OASComAdobeCqSocialReportingAnalytic.getExample());
        res.setHeader('Content-Type', 'application/json');
        res.setBody(js);
        expectedResponse = OASComAdobeCqSocialReportingAnalytic.getExample();
        response = (OASComAdobeCqSocialReportingAnalytic) api.comAdobeCqSocialReportingAnalyticsServicesImplAnalyticsReportI(params);
        System.assertEquals(expectedResponse, response);
    }

    /**
     * 
     *
     * 
     */
    @isTest
    private static void comAdobeCqSocialReportingAnalyticsServicesImplAnalyticsReportMTest() {
        HttpResponse res = new HttpResponse();
        res.setStatusCode(200);
        res.setStatus('OK');
        Test.setMock(HttpCalloutMock.class, new OASResponseMock(res));

        Map<String, Object> params = new Map<String, Object>{
            'post' => Boolean.getExample(),
            'apply' => Boolean.getExample(),
            'r_delete' => Boolean.getExample(),
            'action' => 'null',
            'location' => 'null',
            'propertylist' => new List<String>{''},
            'reportFetchDelay' => Integer.getExample()
        };

        OASClient client;
        OASConfigmgrApi api;
        OASComAdobeCqSocialReportingAnalytic response;
        OASComAdobeCqSocialReportingAnalytic expectedResponse;
        String js = '';

        client = new OASClient();
        api = new OASConfigmgrApi(client);

        js = JSON.serialize(OASComAdobeCqSocialReportingAnalytic.getExample());
        res.setHeader('Content-Type', 'application/json');
        res.setBody(js);
        expectedResponse = OASComAdobeCqSocialReportingAnalytic.getExample();
        response = (OASComAdobeCqSocialReportingAnalytic) api.comAdobeCqSocialReportingAnalyticsServicesImplAnalyticsReportM(params);
        System.assertEquals(expectedResponse, response);
    }

    /**
     * 
     *
     * 
     */
    @isTest
    private static void comAdobeCqSocialReportingAnalyticsServicesImplSiteTrendReportSTest() {
        HttpResponse res = new HttpResponse();
        res.setStatusCode(200);
        res.setStatus('OK');
        Test.setMock(HttpCalloutMock.class, new OASResponseMock(res));

        Map<String, Object> params = new Map<String, Object>{
            'post' => Boolean.getExample(),
            'apply' => Boolean.getExample(),
            'r_delete' => Boolean.getExample(),
            'action' => 'null',
            'location' => 'null',
            'propertylist' => new List<String>{''},
            'cqSocialConsoleAnalyticsSitesMapping' => new List<String>{''},
            'priority' => Integer.getExample()
        };

        OASClient client;
        OASConfigmgrApi api;
        OASComAdobeCqSocialReportingAnalytic response;
        OASComAdobeCqSocialReportingAnalytic expectedResponse;
        String js = '';

        client = new OASClient();
        api = new OASConfigmgrApi(client);

        js = JSON.serialize(OASComAdobeCqSocialReportingAnalytic.getExample());
        res.setHeader('Content-Type', 'application/json');
        res.setBody(js);
        expectedResponse = OASComAdobeCqSocialReportingAnalytic.getExample();
        response = (OASComAdobeCqSocialReportingAnalytic) api.comAdobeCqSocialReportingAnalyticsServicesImplSiteTrendReportS(params);
        System.assertEquals(expectedResponse, response);
    }

    /**
     * 
     *
     * 
     */
    @isTest
    private static void comAdobeCqSocialReviewClientEndpointsImplReviewOperationsServiTest() {
        HttpResponse res = new HttpResponse();
        res.setStatusCode(200);
        res.setStatus('OK');
        Test.setMock(HttpCalloutMock.class, new OASResponseMock(res));

        Map<String, Object> params = new Map<String, Object>{
            'post' => Boolean.getExample(),
            'apply' => Boolean.getExample(),
            'r_delete' => Boolean.getExample(),
            'action' => 'null',
            'location' => 'null',
            'propertylist' => new List<String>{''},
            'fieldWhitelist' => new List<String>{''},
            'attachmentTypeBlacklist' => new List<String>{''}
        };

        OASClient client;
        OASConfigmgrApi api;
        OASComAdobeCqSocialReviewClientEndpo response;
        OASComAdobeCqSocialReviewClientEndpo expectedResponse;
        String js = '';

        client = new OASClient();
        api = new OASConfigmgrApi(client);

        js = JSON.serialize(OASComAdobeCqSocialReviewClientEndpo.getExample());
        res.setHeader('Content-Type', 'application/json');
        res.setBody(js);
        expectedResponse = OASComAdobeCqSocialReviewClientEndpo.getExample();
        response = (OASComAdobeCqSocialReviewClientEndpo) api.comAdobeCqSocialReviewClientEndpointsImplReviewOperationsServi(params);
        System.assertEquals(expectedResponse, response);
    }

    /**
     * 
     *
     * 
     */
    @isTest
    private static void comAdobeCqSocialScfCoreOperationsImplSocialOperationsServletTest() {
        HttpResponse res = new HttpResponse();
        res.setStatusCode(200);
        res.setStatus('OK');
        Test.setMock(HttpCalloutMock.class, new OASResponseMock(res));

        Map<String, Object> params = new Map<String, Object>{
            'post' => Boolean.getExample(),
            'apply' => Boolean.getExample(),
            'r_delete' => Boolean.getExample(),
            'action' => 'null',
            'location' => 'null',
            'propertylist' => new List<String>{''},
            'slingServletSelectors' => 'null',
            'slingServletExtensions' => 'null'
        };

        OASClient client;
        OASConfigmgrApi api;
        OASComAdobeCqSocialScfCoreOperations response;
        OASComAdobeCqSocialScfCoreOperations expectedResponse;
        String js = '';

        client = new OASClient();
        api = new OASConfigmgrApi(client);

        js = JSON.serialize(OASComAdobeCqSocialScfCoreOperations.getExample());
        res.setHeader('Content-Type', 'application/json');
        res.setBody(js);
        expectedResponse = OASComAdobeCqSocialScfCoreOperations.getExample();
        response = (OASComAdobeCqSocialScfCoreOperations) api.comAdobeCqSocialScfCoreOperationsImplSocialOperationsServlet(params);
        System.assertEquals(expectedResponse, response);
    }

    /**
     * 
     *
     * 
     */
    @isTest
    private static void comAdobeCqSocialScfEndpointsImplDefaultSocialGetServletTest() {
        HttpResponse res = new HttpResponse();
        res.setStatusCode(200);
        res.setStatus('OK');
        Test.setMock(HttpCalloutMock.class, new OASResponseMock(res));

        Map<String, Object> params = new Map<String, Object>{
            'post' => Boolean.getExample(),
            'apply' => Boolean.getExample(),
            'r_delete' => Boolean.getExample(),
            'action' => 'null',
            'location' => 'null',
            'propertylist' => new List<String>{''},
            'slingServletSelectors' => new List<String>{''},
            'slingServletExtensions' => 'null'
        };

        OASClient client;
        OASConfigmgrApi api;
        OASComAdobeCqSocialScfEndpointsImplD response;
        OASComAdobeCqSocialScfEndpointsImplD expectedResponse;
        String js = '';

        client = new OASClient();
        api = new OASConfigmgrApi(client);

        js = JSON.serialize(OASComAdobeCqSocialScfEndpointsImplD.getExample());
        res.setHeader('Content-Type', 'application/json');
        res.setBody(js);
        expectedResponse = OASComAdobeCqSocialScfEndpointsImplD.getExample();
        response = (OASComAdobeCqSocialScfEndpointsImplD) api.comAdobeCqSocialScfEndpointsImplDefaultSocialGetServlet(params);
        System.assertEquals(expectedResponse, response);
    }

    /**
     * 
     *
     * 
     */
    @isTest
    private static void comAdobeCqSocialScoringImplScoringEventListenerTest() {
        HttpResponse res = new HttpResponse();
        res.setStatusCode(200);
        res.setStatus('OK');
        Test.setMock(HttpCalloutMock.class, new OASResponseMock(res));

        Map<String, Object> params = new Map<String, Object>{
            'post' => Boolean.getExample(),
            'apply' => Boolean.getExample(),
            'r_delete' => Boolean.getExample(),
            'action' => 'null',
            'location' => 'null',
            'propertylist' => new List<String>{''},
            'eventTopics' => 'null',
            'eventFilter' => 'null'
        };

        OASClient client;
        OASConfigmgrApi api;
        OASComAdobeCqSocialScoringImplScorin response;
        OASComAdobeCqSocialScoringImplScorin expectedResponse;
        String js = '';

        client = new OASClient();
        api = new OASConfigmgrApi(client);

        js = JSON.serialize(OASComAdobeCqSocialScoringImplScorin.getExample());
        res.setHeader('Content-Type', 'application/json');
        res.setBody(js);
        expectedResponse = OASComAdobeCqSocialScoringImplScorin.getExample();
        response = (OASComAdobeCqSocialScoringImplScorin) api.comAdobeCqSocialScoringImplScoringEventListener(params);
        System.assertEquals(expectedResponse, response);
    }

    /**
     * 
     *
     * 
     */
    @isTest
    private static void comAdobeCqSocialServiceusersInternalImplServiceUserWrapperImplTest() {
        HttpResponse res = new HttpResponse();
        res.setStatusCode(200);
        res.setStatus('OK');
        Test.setMock(HttpCalloutMock.class, new OASResponseMock(res));

        Map<String, Object> params = new Map<String, Object>{
            'post' => Boolean.getExample(),
            'apply' => Boolean.getExample(),
            'r_delete' => Boolean.getExample(),
            'action' => 'null',
            'location' => 'null',
            'propertylist' => new List<String>{''},
            'enableFallback' => Boolean.getExample()
        };

        OASClient client;
        OASConfigmgrApi api;
        OASComAdobeCqSocialServiceusersInter response;
        OASComAdobeCqSocialServiceusersInter expectedResponse;
        String js = '';

        client = new OASClient();
        api = new OASConfigmgrApi(client);

        js = JSON.serialize(OASComAdobeCqSocialServiceusersInter.getExample());
        res.setHeader('Content-Type', 'application/json');
        res.setBody(js);
        expectedResponse = OASComAdobeCqSocialServiceusersInter.getExample();
        response = (OASComAdobeCqSocialServiceusersInter) api.comAdobeCqSocialServiceusersInternalImplServiceUserWrapperImpl(params);
        System.assertEquals(expectedResponse, response);
    }

    /**
     * 
     *
     * 
     */
    @isTest
    private static void comAdobeCqSocialSiteEndpointsImplSiteOperationServiceTest() {
        HttpResponse res = new HttpResponse();
        res.setStatusCode(200);
        res.setStatus('OK');
        Test.setMock(HttpCalloutMock.class, new OASResponseMock(res));

        Map<String, Object> params = new Map<String, Object>{
            'post' => Boolean.getExample(),
            'apply' => Boolean.getExample(),
            'r_delete' => Boolean.getExample(),
            'action' => 'null',
            'location' => 'null',
            'propertylist' => new List<String>{''},
            'fieldWhitelist' => new List<String>{''},
            'sitePathFilters' => new List<String>{''},
            'sitePackageGroup' => 'null'
        };

        OASClient client;
        OASConfigmgrApi api;
        OASComAdobeCqSocialSiteEndpointsImpl response;
        OASComAdobeCqSocialSiteEndpointsImpl expectedResponse;
        String js = '';

        client = new OASClient();
        api = new OASConfigmgrApi(client);

        js = JSON.serialize(OASComAdobeCqSocialSiteEndpointsImpl.getExample());
        res.setHeader('Content-Type', 'application/json');
        res.setBody(js);
        expectedResponse = OASComAdobeCqSocialSiteEndpointsImpl.getExample();
        response = (OASComAdobeCqSocialSiteEndpointsImpl) api.comAdobeCqSocialSiteEndpointsImplSiteOperationService(params);
        System.assertEquals(expectedResponse, response);
    }

    /**
     * 
     *
     * 
     */
    @isTest
    private static void comAdobeCqSocialSiteImplAnalyticsComponentConfigurationServiceImTest() {
        HttpResponse res = new HttpResponse();
        res.setStatusCode(200);
        res.setStatus('OK');
        Test.setMock(HttpCalloutMock.class, new OASResponseMock(res));

        Map<String, Object> params = new Map<String, Object>{
            'post' => Boolean.getExample(),
            'apply' => Boolean.getExample(),
            'r_delete' => Boolean.getExample(),
            'action' => 'null',
            'location' => 'null',
            'propertylist' => new List<String>{''},
            'cqSocialConsoleAnalyticsComponents' => new List<String>{''}
        };

        OASClient client;
        OASConfigmgrApi api;
        OASComAdobeCqSocialSiteImplAnalytics response;
        OASComAdobeCqSocialSiteImplAnalytics expectedResponse;
        String js = '';

        client = new OASClient();
        api = new OASConfigmgrApi(client);

        js = JSON.serialize(OASComAdobeCqSocialSiteImplAnalytics.getExample());
        res.setHeader('Content-Type', 'application/json');
        res.setBody(js);
        expectedResponse = OASComAdobeCqSocialSiteImplAnalytics.getExample();
        response = (OASComAdobeCqSocialSiteImplAnalytics) api.comAdobeCqSocialSiteImplAnalyticsComponentConfigurationServiceIm(params);
        System.assertEquals(expectedResponse, response);
    }

    /**
     * 
     *
     * 
     */
    @isTest
    private static void comAdobeCqSocialSiteImplSiteConfiguratorImplTest() {
        HttpResponse res = new HttpResponse();
        res.setStatusCode(200);
        res.setStatus('OK');
        Test.setMock(HttpCalloutMock.class, new OASResponseMock(res));

        Map<String, Object> params = new Map<String, Object>{
            'post' => Boolean.getExample(),
            'apply' => Boolean.getExample(),
            'r_delete' => Boolean.getExample(),
            'action' => 'null',
            'location' => 'null',
            'propertylist' => new List<String>{''},
            'componentsUsingTags' => new List<String>{''}
        };

        OASClient client;
        OASConfigmgrApi api;
        OASComAdobeCqSocialSiteImplSiteConfi response;
        OASComAdobeCqSocialSiteImplSiteConfi expectedResponse;
        String js = '';

        client = new OASClient();
        api = new OASConfigmgrApi(client);

        js = JSON.serialize(OASComAdobeCqSocialSiteImplSiteConfi.getExample());
        res.setHeader('Content-Type', 'application/json');
        res.setBody(js);
        expectedResponse = OASComAdobeCqSocialSiteImplSiteConfi.getExample();
        response = (OASComAdobeCqSocialSiteImplSiteConfi) api.comAdobeCqSocialSiteImplSiteConfiguratorImpl(params);
        System.assertEquals(expectedResponse, response);
    }

    /**
     * 
     *
     * 
     */
    @isTest
    private static void comAdobeCqSocialSrpImplSocialSolrConnectorTest() {
        HttpResponse res = new HttpResponse();
        res.setStatusCode(200);
        res.setStatus('OK');
        Test.setMock(HttpCalloutMock.class, new OASResponseMock(res));

        Map<String, Object> params = new Map<String, Object>{
            'post' => Boolean.getExample(),
            'apply' => Boolean.getExample(),
            'r_delete' => Boolean.getExample(),
            'action' => 'null',
            'location' => 'null',
            'propertylist' => new List<String>{''},
            'srpType' => 'null'
        };

        OASClient client;
        OASConfigmgrApi api;
        OASComAdobeCqSocialSrpImplSocialSolr response;
        OASComAdobeCqSocialSrpImplSocialSolr expectedResponse;
        String js = '';

        client = new OASClient();
        api = new OASConfigmgrApi(client);

        js = JSON.serialize(OASComAdobeCqSocialSrpImplSocialSolr.getExample());
        res.setHeader('Content-Type', 'application/json');
        res.setBody(js);
        expectedResponse = OASComAdobeCqSocialSrpImplSocialSolr.getExample();
        response = (OASComAdobeCqSocialSrpImplSocialSolr) api.comAdobeCqSocialSrpImplSocialSolrConnector(params);
        System.assertEquals(expectedResponse, response);
    }

    /**
     * 
     *
     * 
     */
    @isTest
    private static void comAdobeCqSocialSyncImplDiffChangesObserverTest() {
        HttpResponse res = new HttpResponse();
        res.setStatusCode(200);
        res.setStatus('OK');
        Test.setMock(HttpCalloutMock.class, new OASResponseMock(res));

        Map<String, Object> params = new Map<String, Object>{
            'post' => Boolean.getExample(),
            'apply' => Boolean.getExample(),
            'r_delete' => Boolean.getExample(),
            'action' => 'null',
            'location' => 'null',
            'propertylist' => new List<String>{''},
            'enabled' => Boolean.getExample(),
            'agentName' => 'null',
            'diffPath' => 'null',
            'propertyNames' => 'null'
        };

        OASClient client;
        OASConfigmgrApi api;
        OASComAdobeCqSocialSyncImplDiffChang response;
        OASComAdobeCqSocialSyncImplDiffChang expectedResponse;
        String js = '';

        client = new OASClient();
        api = new OASConfigmgrApi(client);

        js = JSON.serialize(OASComAdobeCqSocialSyncImplDiffChang.getExample());
        res.setHeader('Content-Type', 'application/json');
        res.setBody(js);
        expectedResponse = OASComAdobeCqSocialSyncImplDiffChang.getExample();
        response = (OASComAdobeCqSocialSyncImplDiffChang) api.comAdobeCqSocialSyncImplDiffChangesObserver(params);
        System.assertEquals(expectedResponse, response);
    }

    /**
     * 
     *
     * 
     */
    @isTest
    private static void comAdobeCqSocialSyncImplGroupSyncListenerImplTest() {
        HttpResponse res = new HttpResponse();
        res.setStatusCode(200);
        res.setStatus('OK');
        Test.setMock(HttpCalloutMock.class, new OASResponseMock(res));

        Map<String, Object> params = new Map<String, Object>{
            'post' => Boolean.getExample(),
            'apply' => Boolean.getExample(),
            'r_delete' => Boolean.getExample(),
            'action' => 'null',
            'location' => 'null',
            'propertylist' => new List<String>{''},
            'nodetypes' => new List<String>{''},
            'ignorableprops' => new List<String>{''},
            'ignorablenodes' => 'null',
            'enabled' => Boolean.getExample(),
            'distfolders' => 'null'
        };

        OASClient client;
        OASConfigmgrApi api;
        OASComAdobeCqSocialSyncImplGroupSync response;
        OASComAdobeCqSocialSyncImplGroupSync expectedResponse;
        String js = '';

        client = new OASClient();
        api = new OASConfigmgrApi(client);

        js = JSON.serialize(OASComAdobeCqSocialSyncImplGroupSync.getExample());
        res.setHeader('Content-Type', 'application/json');
        res.setBody(js);
        expectedResponse = OASComAdobeCqSocialSyncImplGroupSync.getExample();
        response = (OASComAdobeCqSocialSyncImplGroupSync) api.comAdobeCqSocialSyncImplGroupSyncListenerImpl(params);
        System.assertEquals(expectedResponse, response);
    }

    /**
     * 
     *
     * 
     */
    @isTest
    private static void comAdobeCqSocialSyncImplPublisherSyncServiceImplTest() {
        HttpResponse res = new HttpResponse();
        res.setStatusCode(200);
        res.setStatus('OK');
        Test.setMock(HttpCalloutMock.class, new OASResponseMock(res));

        Map<String, Object> params = new Map<String, Object>{
            'post' => Boolean.getExample(),
            'apply' => Boolean.getExample(),
            'r_delete' => Boolean.getExample(),
            'action' => 'null',
            'location' => 'null',
            'propertylist' => new List<String>{''},
            'activeRunModes' => new List<String>{''}
        };

        OASClient client;
        OASConfigmgrApi api;
        OASComAdobeCqSocialSyncImplPublisher response;
        OASComAdobeCqSocialSyncImplPublisher expectedResponse;
        String js = '';

        client = new OASClient();
        api = new OASConfigmgrApi(client);

        js = JSON.serialize(OASComAdobeCqSocialSyncImplPublisher.getExample());
        res.setHeader('Content-Type', 'application/json');
        res.setBody(js);
        expectedResponse = OASComAdobeCqSocialSyncImplPublisher.getExample();
        response = (OASComAdobeCqSocialSyncImplPublisher) api.comAdobeCqSocialSyncImplPublisherSyncServiceImpl(params);
        System.assertEquals(expectedResponse, response);
    }

    /**
     * 
     *
     * 
     */
    @isTest
    private static void comAdobeCqSocialSyncImplUserSyncListenerImplTest() {
        HttpResponse res = new HttpResponse();
        res.setStatusCode(200);
        res.setStatus('OK');
        Test.setMock(HttpCalloutMock.class, new OASResponseMock(res));

        Map<String, Object> params = new Map<String, Object>{
            'post' => Boolean.getExample(),
            'apply' => Boolean.getExample(),
            'r_delete' => Boolean.getExample(),
            'action' => 'null',
            'location' => 'null',
            'propertylist' => new List<String>{''},
            'nodetypes' => new List<String>{''},
            'ignorableprops' => new List<String>{''},
            'ignorablenodes' => new List<String>{''},
            'enabled' => Boolean.getExample(),
            'distfolders' => new List<String>{''}
        };

        OASClient client;
        OASConfigmgrApi api;
        OASComAdobeCqSocialSyncImplUserSyncL response;
        OASComAdobeCqSocialSyncImplUserSyncL expectedResponse;
        String js = '';

        client = new OASClient();
        api = new OASConfigmgrApi(client);

        js = JSON.serialize(OASComAdobeCqSocialSyncImplUserSyncL.getExample());
        res.setHeader('Content-Type', 'application/json');
        res.setBody(js);
        expectedResponse = OASComAdobeCqSocialSyncImplUserSyncL.getExample();
        response = (OASComAdobeCqSocialSyncImplUserSyncL) api.comAdobeCqSocialSyncImplUserSyncListenerImpl(params);
        System.assertEquals(expectedResponse, response);
    }

    /**
     * 
     *
     * 
     */
    @isTest
    private static void comAdobeCqSocialTranslationImplTranslationServiceConfigManagerTest() {
        HttpResponse res = new HttpResponse();
        res.setStatusCode(200);
        res.setStatus('OK');
        Test.setMock(HttpCalloutMock.class, new OASResponseMock(res));

        Map<String, Object> params = new Map<String, Object>{
            'post' => Boolean.getExample(),
            'apply' => Boolean.getExample(),
            'r_delete' => Boolean.getExample(),
            'action' => 'null',
            'location' => 'null',
            'propertylist' => new List<String>{''},
            'translateLanguage' => 'null',
            'translateDisplay' => 'null',
            'translateAttribution' => Boolean.getExample(),
            'translateCaching' => 'null',
            'translateSmartRendering' => 'null',
            'translateCachingDuration' => 'null',
            'translateSessionSaveInterval' => 'null',
            'translateSessionSaveBatchLimit' => 'null'
        };

        OASClient client;
        OASConfigmgrApi api;
        OASComAdobeCqSocialTranslationImplTr response;
        OASComAdobeCqSocialTranslationImplTr expectedResponse;
        String js = '';

        client = new OASClient();
        api = new OASConfigmgrApi(client);

        js = JSON.serialize(OASComAdobeCqSocialTranslationImplTr.getExample());
        res.setHeader('Content-Type', 'application/json');
        res.setBody(js);
        expectedResponse = OASComAdobeCqSocialTranslationImplTr.getExample();
        response = (OASComAdobeCqSocialTranslationImplTr) api.comAdobeCqSocialTranslationImplTranslationServiceConfigManager(params);
        System.assertEquals(expectedResponse, response);
    }

    /**
     * 
     *
     * 
     */
    @isTest
    private static void comAdobeCqSocialTranslationImplUGCLanguageDetectorTest() {
        HttpResponse res = new HttpResponse();
        res.setStatusCode(200);
        res.setStatus('OK');
        Test.setMock(HttpCalloutMock.class, new OASResponseMock(res));

        Map<String, Object> params = new Map<String, Object>{
            'post' => Boolean.getExample(),
            'apply' => Boolean.getExample(),
            'r_delete' => Boolean.getExample(),
            'action' => 'null',
            'location' => 'null',
            'propertylist' => new List<String>{''},
            'eventTopics' => 'null',
            'eventFilter' => 'null',
            'translateListenerType' => new List<String>{''},
            'translatePropertyList' => new List<String>{''},
            'poolSize' => Integer.getExample(),
            'maxPoolSize' => Integer.getExample(),
            'queueSize' => Integer.getExample(),
            'keepAliveTime' => Integer.getExample()
        };

        OASClient client;
        OASConfigmgrApi api;
        OASComAdobeCqSocialTranslationImplUG response;
        OASComAdobeCqSocialTranslationImplUG expectedResponse;
        String js = '';

        client = new OASClient();
        api = new OASConfigmgrApi(client);

        js = JSON.serialize(OASComAdobeCqSocialTranslationImplUG.getExample());
        res.setHeader('Content-Type', 'application/json');
        res.setBody(js);
        expectedResponse = OASComAdobeCqSocialTranslationImplUG.getExample();
        response = (OASComAdobeCqSocialTranslationImplUG) api.comAdobeCqSocialTranslationImplUGCLanguageDetector(params);
        System.assertEquals(expectedResponse, response);
    }

    /**
     * 
     *
     * 
     */
    @isTest
    private static void comAdobeCqSocialUgcbaseDispatcherImplFlushServiceImplTest() {
        HttpResponse res = new HttpResponse();
        res.setStatusCode(200);
        res.setStatus('OK');
        Test.setMock(HttpCalloutMock.class, new OASResponseMock(res));

        Map<String, Object> params = new Map<String, Object>{
            'post' => Boolean.getExample(),
            'apply' => Boolean.getExample(),
            'r_delete' => Boolean.getExample(),
            'action' => 'null',
            'location' => 'null',
            'propertylist' => new List<String>{''},
            'threadPoolSize' => Integer.getExample(),
            'delayTime' => Integer.getExample(),
            'workerSleepTime' => Integer.getExample()
        };

        OASClient client;
        OASConfigmgrApi api;
        OASComAdobeCqSocialUgcbaseDispatcher response;
        OASComAdobeCqSocialUgcbaseDispatcher expectedResponse;
        String js = '';

        client = new OASClient();
        api = new OASConfigmgrApi(client);

        js = JSON.serialize(OASComAdobeCqSocialUgcbaseDispatcher.getExample());
        res.setHeader('Content-Type', 'application/json');
        res.setBody(js);
        expectedResponse = OASComAdobeCqSocialUgcbaseDispatcher.getExample();
        response = (OASComAdobeCqSocialUgcbaseDispatcher) api.comAdobeCqSocialUgcbaseDispatcherImplFlushServiceImpl(params);
        System.assertEquals(expectedResponse, response);
    }

    /**
     * 
     *
     * 
     */
    @isTest
    private static void comAdobeCqSocialUgcbaseImplAysncReverseReplicatorImplTest() {
        HttpResponse res = new HttpResponse();
        res.setStatusCode(200);
        res.setStatus('OK');
        Test.setMock(HttpCalloutMock.class, new OASResponseMock(res));

        Map<String, Object> params = new Map<String, Object>{
            'post' => Boolean.getExample(),
            'apply' => Boolean.getExample(),
            'r_delete' => Boolean.getExample(),
            'action' => 'null',
            'location' => 'null',
            'propertylist' => new List<String>{''},
            'poolSize' => Integer.getExample(),
            'maxPoolSize' => Integer.getExample(),
            'queueSize' => Integer.getExample(),
            'keepAliveTime' => Integer.getExample()
        };

        OASClient client;
        OASConfigmgrApi api;
        OASComAdobeCqSocialUgcbaseImplAysncR response;
        OASComAdobeCqSocialUgcbaseImplAysncR expectedResponse;
        String js = '';

        client = new OASClient();
        api = new OASConfigmgrApi(client);

        js = JSON.serialize(OASComAdobeCqSocialUgcbaseImplAysncR.getExample());
        res.setHeader('Content-Type', 'application/json');
        res.setBody(js);
        expectedResponse = OASComAdobeCqSocialUgcbaseImplAysncR.getExample();
        response = (OASComAdobeCqSocialUgcbaseImplAysncR) api.comAdobeCqSocialUgcbaseImplAysncReverseReplicatorImpl(params);
        System.assertEquals(expectedResponse, response);
    }

    /**
     * 
     *
     * 
     */
    @isTest
    private static void comAdobeCqSocialUgcbaseImplPublisherConfigurationImplTest() {
        HttpResponse res = new HttpResponse();
        res.setStatusCode(200);
        res.setStatus('OK');
        Test.setMock(HttpCalloutMock.class, new OASResponseMock(res));

        Map<String, Object> params = new Map<String, Object>{
            'post' => Boolean.getExample(),
            'apply' => Boolean.getExample(),
            'r_delete' => Boolean.getExample(),
            'action' => 'null',
            'location' => 'null',
            'propertylist' => new List<String>{''},
            'isPrimaryPublisher' => Boolean.getExample()
        };

        OASClient client;
        OASConfigmgrApi api;
        OASComAdobeCqSocialUgcbaseImplPublis response;
        OASComAdobeCqSocialUgcbaseImplPublis expectedResponse;
        String js = '';

        client = new OASClient();
        api = new OASConfigmgrApi(client);

        js = JSON.serialize(OASComAdobeCqSocialUgcbaseImplPublis.getExample());
        res.setHeader('Content-Type', 'application/json');
        res.setBody(js);
        expectedResponse = OASComAdobeCqSocialUgcbaseImplPublis.getExample();
        response = (OASComAdobeCqSocialUgcbaseImplPublis) api.comAdobeCqSocialUgcbaseImplPublisherConfigurationImpl(params);
        System.assertEquals(expectedResponse, response);
    }

    /**
     * 
     *
     * 
     */
    @isTest
    private static void comAdobeCqSocialUgcbaseImplSocialUtilsImplTest() {
        HttpResponse res = new HttpResponse();
        res.setStatusCode(200);
        res.setStatus('OK');
        Test.setMock(HttpCalloutMock.class, new OASResponseMock(res));

        Map<String, Object> params = new Map<String, Object>{
            'post' => Boolean.getExample(),
            'apply' => Boolean.getExample(),
            'r_delete' => Boolean.getExample(),
            'action' => 'null',
            'location' => 'null',
            'propertylist' => new List<String>{''},
            'legacyCloudUGCPathMapping' => Boolean.getExample()
        };

        OASClient client;
        OASConfigmgrApi api;
        OASComAdobeCqSocialUgcbaseImplSocial response;
        OASComAdobeCqSocialUgcbaseImplSocial expectedResponse;
        String js = '';

        client = new OASClient();
        api = new OASConfigmgrApi(client);

        js = JSON.serialize(OASComAdobeCqSocialUgcbaseImplSocial.getExample());
        res.setHeader('Content-Type', 'application/json');
        res.setBody(js);
        expectedResponse = OASComAdobeCqSocialUgcbaseImplSocial.getExample();
        response = (OASComAdobeCqSocialUgcbaseImplSocial) api.comAdobeCqSocialUgcbaseImplSocialUtilsImpl(params);
        System.assertEquals(expectedResponse, response);
    }

    /**
     * 
     *
     * 
     */
    @isTest
    private static void comAdobeCqSocialUgcbaseModerationImplAutoModerationImplTest() {
        HttpResponse res = new HttpResponse();
        res.setStatusCode(200);
        res.setStatus('OK');
        Test.setMock(HttpCalloutMock.class, new OASResponseMock(res));

        Map<String, Object> params = new Map<String, Object>{
            'post' => Boolean.getExample(),
            'apply' => Boolean.getExample(),
            'r_delete' => Boolean.getExample(),
            'action' => 'null',
            'location' => 'null',
            'propertylist' => new List<String>{''},
            'automoderationSequence' => new List<String>{''},
            'automoderationOnfailurestop' => Boolean.getExample()
        };

        OASClient client;
        OASConfigmgrApi api;
        OASComAdobeCqSocialUgcbaseModeration response;
        OASComAdobeCqSocialUgcbaseModeration expectedResponse;
        String js = '';

        client = new OASClient();
        api = new OASConfigmgrApi(client);

        js = JSON.serialize(OASComAdobeCqSocialUgcbaseModeration.getExample());
        res.setHeader('Content-Type', 'application/json');
        res.setBody(js);
        expectedResponse = OASComAdobeCqSocialUgcbaseModeration.getExample();
        response = (OASComAdobeCqSocialUgcbaseModeration) api.comAdobeCqSocialUgcbaseModerationImplAutoModerationImpl(params);
        System.assertEquals(expectedResponse, response);
    }

    /**
     * 
     *
     * 
     */
    @isTest
    private static void comAdobeCqSocialUgcbaseModerationImplSentimentProcessTest() {
        HttpResponse res = new HttpResponse();
        res.setStatusCode(200);
        res.setStatus('OK');
        Test.setMock(HttpCalloutMock.class, new OASResponseMock(res));

        Map<String, Object> params = new Map<String, Object>{
            'post' => Boolean.getExample(),
            'apply' => Boolean.getExample(),
            'r_delete' => Boolean.getExample(),
            'action' => 'null',
            'location' => 'null',
            'propertylist' => new List<String>{''},
            'watchwordsPositive' => new List<String>{''},
            'watchwordsNegative' => new List<String>{''},
            'watchwordsPath' => 'null',
            'sentimentPath' => 'null'
        };

        OASClient client;
        OASConfigmgrApi api;
        OASComAdobeCqSocialUgcbaseModeration response;
        OASComAdobeCqSocialUgcbaseModeration expectedResponse;
        String js = '';

        client = new OASClient();
        api = new OASConfigmgrApi(client);

        js = JSON.serialize(OASComAdobeCqSocialUgcbaseModeration.getExample());
        res.setHeader('Content-Type', 'application/json');
        res.setBody(js);
        expectedResponse = OASComAdobeCqSocialUgcbaseModeration.getExample();
        response = (OASComAdobeCqSocialUgcbaseModeration) api.comAdobeCqSocialUgcbaseModerationImplSentimentProcess(params);
        System.assertEquals(expectedResponse, response);
    }

    /**
     * 
     *
     * 
     */
    @isTest
    private static void comAdobeCqSocialUgcbaseSecurityImplDefaultAttachmentTypeBlackliTest() {
        HttpResponse res = new HttpResponse();
        res.setStatusCode(200);
        res.setStatus('OK');
        Test.setMock(HttpCalloutMock.class, new OASResponseMock(res));

        Map<String, Object> params = new Map<String, Object>{
            'post' => Boolean.getExample(),
            'apply' => Boolean.getExample(),
            'r_delete' => Boolean.getExample(),
            'action' => 'null',
            'location' => 'null',
            'propertylist' => new List<String>{''},
            'defaultAttachmentTypeBlacklist' => new List<String>{''},
            'baselineAttachmentTypeBlacklist' => new List<String>{''}
        };

        OASClient client;
        OASConfigmgrApi api;
        OASComAdobeCqSocialUgcbaseSecurityIm response;
        OASComAdobeCqSocialUgcbaseSecurityIm expectedResponse;
        String js = '';

        client = new OASClient();
        api = new OASConfigmgrApi(client);

        js = JSON.serialize(OASComAdobeCqSocialUgcbaseSecurityIm.getExample());
        res.setHeader('Content-Type', 'application/json');
        res.setBody(js);
        expectedResponse = OASComAdobeCqSocialUgcbaseSecurityIm.getExample();
        response = (OASComAdobeCqSocialUgcbaseSecurityIm) api.comAdobeCqSocialUgcbaseSecurityImplDefaultAttachmentTypeBlackli(params);
        System.assertEquals(expectedResponse, response);
    }

    /**
     * 
     *
     * 
     */
    @isTest
    private static void comAdobeCqSocialUgcbaseSecurityImplSaferSlingPostValidatorImplTest() {
        HttpResponse res = new HttpResponse();
        res.setStatusCode(200);
        res.setStatus('OK');
        Test.setMock(HttpCalloutMock.class, new OASResponseMock(res));

        Map<String, Object> params = new Map<String, Object>{
            'post' => Boolean.getExample(),
            'apply' => Boolean.getExample(),
            'r_delete' => Boolean.getExample(),
            'action' => 'null',
            'location' => 'null',
            'propertylist' => new List<String>{''},
            'parameterWhitelist' => new List<String>{''},
            'parameterWhitelistPrefixes' => new List<String>{''},
            'binaryParameterWhitelist' => new List<String>{''},
            'modifierWhitelist' => new List<String>{''},
            'operationWhitelist' => new List<String>{''},
            'operationWhitelistPrefixes' => new List<String>{''},
            'typehintWhitelist' => new List<String>{''},
            'resourcetypeWhitelist' => new List<String>{''}
        };

        OASClient client;
        OASConfigmgrApi api;
        OASComAdobeCqSocialUgcbaseSecurityIm response;
        OASComAdobeCqSocialUgcbaseSecurityIm expectedResponse;
        String js = '';

        client = new OASClient();
        api = new OASConfigmgrApi(client);

        js = JSON.serialize(OASComAdobeCqSocialUgcbaseSecurityIm.getExample());
        res.setHeader('Content-Type', 'application/json');
        res.setBody(js);
        expectedResponse = OASComAdobeCqSocialUgcbaseSecurityIm.getExample();
        response = (OASComAdobeCqSocialUgcbaseSecurityIm) api.comAdobeCqSocialUgcbaseSecurityImplSaferSlingPostValidatorImpl(params);
        System.assertEquals(expectedResponse, response);
    }

    /**
     * 
     *
     * 
     */
    @isTest
    private static void comAdobeCqSocialUserEndpointsImplUsersGroupFromPublishServletTest() {
        HttpResponse res = new HttpResponse();
        res.setStatusCode(200);
        res.setStatus('OK');
        Test.setMock(HttpCalloutMock.class, new OASResponseMock(res));

        Map<String, Object> params = new Map<String, Object>{
            'post' => Boolean.getExample(),
            'apply' => Boolean.getExample(),
            'r_delete' => Boolean.getExample(),
            'action' => 'null',
            'location' => 'null',
            'propertylist' => new List<String>{''},
            'slingServletExtensions' => 'null',
            'slingServletPaths' => 'null',
            'slingServletMethods' => 'null'
        };

        OASClient client;
        OASConfigmgrApi api;
        OASComAdobeCqSocialUserEndpointsImpl response;
        OASComAdobeCqSocialUserEndpointsImpl expectedResponse;
        String js = '';

        client = new OASClient();
        api = new OASConfigmgrApi(client);

        js = JSON.serialize(OASComAdobeCqSocialUserEndpointsImpl.getExample());
        res.setHeader('Content-Type', 'application/json');
        res.setBody(js);
        expectedResponse = OASComAdobeCqSocialUserEndpointsImpl.getExample();
        response = (OASComAdobeCqSocialUserEndpointsImpl) api.comAdobeCqSocialUserEndpointsImplUsersGroupFromPublishServlet(params);
        System.assertEquals(expectedResponse, response);
    }

    /**
     * 
     *
     * 
     */
    @isTest
    private static void comAdobeCqSocialUserImplTransportHttpToPublisherTest() {
        HttpResponse res = new HttpResponse();
        res.setStatusCode(200);
        res.setStatus('OK');
        Test.setMock(HttpCalloutMock.class, new OASResponseMock(res));

        Map<String, Object> params = new Map<String, Object>{
            'post' => Boolean.getExample(),
            'apply' => Boolean.getExample(),
            'r_delete' => Boolean.getExample(),
            'action' => 'null',
            'location' => 'null',
            'propertylist' => new List<String>{''},
            'enable' => Boolean.getExample(),
            'agentConfiguration' => new List<String>{''},
            'contextPath' => 'null',
            'disabledCipherSuites' => new List<String>{''},
            'enabledCipherSuites' => new List<String>{''}
        };

        OASClient client;
        OASConfigmgrApi api;
        OASComAdobeCqSocialUserImplTransport response;
        OASComAdobeCqSocialUserImplTransport expectedResponse;
        String js = '';

        client = new OASClient();
        api = new OASConfigmgrApi(client);

        js = JSON.serialize(OASComAdobeCqSocialUserImplTransport.getExample());
        res.setHeader('Content-Type', 'application/json');
        res.setBody(js);
        expectedResponse = OASComAdobeCqSocialUserImplTransport.getExample();
        response = (OASComAdobeCqSocialUserImplTransport) api.comAdobeCqSocialUserImplTransportHttpToPublisher(params);
        System.assertEquals(expectedResponse, response);
    }

    /**
     * 
     *
     * 
     */
    @isTest
    private static void comAdobeCqUiWcmCommonsInternalServletsRteRTEFilterServletFactTest() {
        HttpResponse res = new HttpResponse();
        res.setStatusCode(200);
        res.setStatus('OK');
        Test.setMock(HttpCalloutMock.class, new OASResponseMock(res));

        Map<String, Object> params = new Map<String, Object>{
            'post' => Boolean.getExample(),
            'apply' => Boolean.getExample(),
            'r_delete' => Boolean.getExample(),
            'action' => 'null',
            'location' => 'null',
            'propertylist' => new List<String>{''},
            'resourceTypes' => new List<String>{''}
        };

        OASClient client;
        OASConfigmgrApi api;
        OASComAdobeCqUiWcmCommonsInternalSer response;
        OASComAdobeCqUiWcmCommonsInternalSer expectedResponse;
        String js = '';

        client = new OASClient();
        api = new OASConfigmgrApi(client);

        js = JSON.serialize(OASComAdobeCqUiWcmCommonsInternalSer.getExample());
        res.setHeader('Content-Type', 'application/json');
        res.setBody(js);
        expectedResponse = OASComAdobeCqUiWcmCommonsInternalSer.getExample();
        response = (OASComAdobeCqUiWcmCommonsInternalSer) api.comAdobeCqUiWcmCommonsInternalServletsRteRTEFilterServletFact(params);
        System.assertEquals(expectedResponse, response);
    }

    /**
     * 
     *
     * 
     */
    @isTest
    private static void comAdobeCqUpgradesCleanupImplUpgradeContentCleanupTest() {
        HttpResponse res = new HttpResponse();
        res.setStatusCode(200);
        res.setStatus('OK');
        Test.setMock(HttpCalloutMock.class, new OASResponseMock(res));

        Map<String, Object> params = new Map<String, Object>{
            'post' => Boolean.getExample(),
            'apply' => Boolean.getExample(),
            'r_delete' => Boolean.getExample(),
            'action' => 'null',
            'location' => 'null',
            'propertylist' => new List<String>{''},
            'deletePathRegexps' => new List<String>{''},
            'deleteSql2Query' => 'null'
        };

        OASClient client;
        OASConfigmgrApi api;
        OASComAdobeCqUpgradesCleanupImplUpgr response;
        OASComAdobeCqUpgradesCleanupImplUpgr expectedResponse;
        String js = '';

        client = new OASClient();
        api = new OASConfigmgrApi(client);

        js = JSON.serialize(OASComAdobeCqUpgradesCleanupImplUpgr.getExample());
        res.setHeader('Content-Type', 'application/json');
        res.setBody(js);
        expectedResponse = OASComAdobeCqUpgradesCleanupImplUpgr.getExample();
        response = (OASComAdobeCqUpgradesCleanupImplUpgr) api.comAdobeCqUpgradesCleanupImplUpgradeContentCleanup(params);
        System.assertEquals(expectedResponse, response);
    }

    /**
     * 
     *
     * 
     */
    @isTest
    private static void comAdobeCqUpgradesCleanupImplUpgradeInstallFolderCleanupTest() {
        HttpResponse res = new HttpResponse();
        res.setStatusCode(200);
        res.setStatus('OK');
        Test.setMock(HttpCalloutMock.class, new OASResponseMock(res));

        Map<String, Object> params = new Map<String, Object>{
            'post' => Boolean.getExample(),
            'apply' => Boolean.getExample(),
            'r_delete' => Boolean.getExample(),
            'action' => 'null',
            'location' => 'null',
            'propertylist' => new List<String>{''},
            'deleteNameRegexps' => new List<String>{''}
        };

        OASClient client;
        OASConfigmgrApi api;
        OASComAdobeCqUpgradesCleanupImplUpgr response;
        OASComAdobeCqUpgradesCleanupImplUpgr expectedResponse;
        String js = '';

        client = new OASClient();
        api = new OASConfigmgrApi(client);

        js = JSON.serialize(OASComAdobeCqUpgradesCleanupImplUpgr.getExample());
        res.setHeader('Content-Type', 'application/json');
        res.setBody(js);
        expectedResponse = OASComAdobeCqUpgradesCleanupImplUpgr.getExample();
        response = (OASComAdobeCqUpgradesCleanupImplUpgr) api.comAdobeCqUpgradesCleanupImplUpgradeInstallFolderCleanup(params);
        System.assertEquals(expectedResponse, response);
    }

    /**
     * 
     *
     * 
     */
    @isTest
    private static void comAdobeCqWcmJobsAsyncImplAsyncDeleteConfigProviderServiceTest() {
        HttpResponse res = new HttpResponse();
        res.setStatusCode(200);
        res.setStatus('OK');
        Test.setMock(HttpCalloutMock.class, new OASResponseMock(res));

        Map<String, Object> params = new Map<String, Object>{
            'post' => Boolean.getExample(),
            'apply' => Boolean.getExample(),
            'r_delete' => Boolean.getExample(),
            'action' => 'null',
            'location' => 'null',
            'propertylist' => new List<String>{''},
            'threshold' => Integer.getExample(),
            'jobTopicName' => 'null',
            'emailEnabled' => Boolean.getExample()
        };

        OASClient client;
        OASConfigmgrApi api;
        OASComAdobeCqWcmJobsAsyncImplAsyncDe response;
        OASComAdobeCqWcmJobsAsyncImplAsyncDe expectedResponse;
        String js = '';

        client = new OASClient();
        api = new OASConfigmgrApi(client);

        js = JSON.serialize(OASComAdobeCqWcmJobsAsyncImplAsyncDe.getExample());
        res.setHeader('Content-Type', 'application/json');
        res.setBody(js);
        expectedResponse = OASComAdobeCqWcmJobsAsyncImplAsyncDe.getExample();
        response = (OASComAdobeCqWcmJobsAsyncImplAsyncDe) api.comAdobeCqWcmJobsAsyncImplAsyncDeleteConfigProviderService(params);
        System.assertEquals(expectedResponse, response);
    }

    /**
     * 
     *
     * 
     */
    @isTest
    private static void comAdobeCqWcmJobsAsyncImplAsyncJobCleanUpTaskTest() {
        HttpResponse res = new HttpResponse();
        res.setStatusCode(200);
        res.setStatus('OK');
        Test.setMock(HttpCalloutMock.class, new OASResponseMock(res));

        Map<String, Object> params = new Map<String, Object>{
            'post' => Boolean.getExample(),
            'apply' => Boolean.getExample(),
            'r_delete' => Boolean.getExample(),
            'action' => 'null',
            'location' => 'null',
            'propertylist' => new List<String>{''},
            'schedulerExpression' => 'null',
            'jobPurgeThreshold' => Integer.getExample(),
            'jobPurgeMaxJobs' => Integer.getExample()
        };

        OASClient client;
        OASConfigmgrApi api;
        OASComAdobeCqWcmJobsAsyncImplAsyncJo response;
        OASComAdobeCqWcmJobsAsyncImplAsyncJo expectedResponse;
        String js = '';

        client = new OASClient();
        api = new OASConfigmgrApi(client);

        js = JSON.serialize(OASComAdobeCqWcmJobsAsyncImplAsyncJo.getExample());
        res.setHeader('Content-Type', 'application/json');
        res.setBody(js);
        expectedResponse = OASComAdobeCqWcmJobsAsyncImplAsyncJo.getExample();
        response = (OASComAdobeCqWcmJobsAsyncImplAsyncJo) api.comAdobeCqWcmJobsAsyncImplAsyncJobCleanUpTask(params);
        System.assertEquals(expectedResponse, response);
    }

    /**
     * 
     *
     * 
     */
    @isTest
    private static void comAdobeCqWcmJobsAsyncImplAsyncMoveConfigProviderServiceTest() {
        HttpResponse res = new HttpResponse();
        res.setStatusCode(200);
        res.setStatus('OK');
        Test.setMock(HttpCalloutMock.class, new OASResponseMock(res));

        Map<String, Object> params = new Map<String, Object>{
            'post' => Boolean.getExample(),
            'apply' => Boolean.getExample(),
            'r_delete' => Boolean.getExample(),
            'action' => 'null',
            'location' => 'null',
            'propertylist' => new List<String>{''},
            'threshold' => Integer.getExample(),
            'jobTopicName' => 'null',
            'emailEnabled' => Boolean.getExample()
        };

        OASClient client;
        OASConfigmgrApi api;
        OASComAdobeCqWcmJobsAsyncImplAsyncMo response;
        OASComAdobeCqWcmJobsAsyncImplAsyncMo expectedResponse;
        String js = '';

        client = new OASClient();
        api = new OASConfigmgrApi(client);

        js = JSON.serialize(OASComAdobeCqWcmJobsAsyncImplAsyncMo.getExample());
        res.setHeader('Content-Type', 'application/json');
        res.setBody(js);
        expectedResponse = OASComAdobeCqWcmJobsAsyncImplAsyncMo.getExample();
        response = (OASComAdobeCqWcmJobsAsyncImplAsyncMo) api.comAdobeCqWcmJobsAsyncImplAsyncMoveConfigProviderService(params);
        System.assertEquals(expectedResponse, response);
    }

    /**
     * 
     *
     * 
     */
    @isTest
    private static void comAdobeCqWcmJobsAsyncImplAsyncPageMoveConfigProviderServiceTest() {
        HttpResponse res = new HttpResponse();
        res.setStatusCode(200);
        res.setStatus('OK');
        Test.setMock(HttpCalloutMock.class, new OASResponseMock(res));

        Map<String, Object> params = new Map<String, Object>{
            'post' => Boolean.getExample(),
            'apply' => Boolean.getExample(),
            'r_delete' => Boolean.getExample(),
            'action' => 'null',
            'location' => 'null',
            'propertylist' => new List<String>{''},
            'threshold' => Integer.getExample(),
            'jobTopicName' => 'null',
            'emailEnabled' => Boolean.getExample()
        };

        OASClient client;
        OASConfigmgrApi api;
        OASComAdobeCqWcmJobsAsyncImplAsyncPa response;
        OASComAdobeCqWcmJobsAsyncImplAsyncPa expectedResponse;
        String js = '';

        client = new OASClient();
        api = new OASConfigmgrApi(client);

        js = JSON.serialize(OASComAdobeCqWcmJobsAsyncImplAsyncPa.getExample());
        res.setHeader('Content-Type', 'application/json');
        res.setBody(js);
        expectedResponse = OASComAdobeCqWcmJobsAsyncImplAsyncPa.getExample();
        response = (OASComAdobeCqWcmJobsAsyncImplAsyncPa) api.comAdobeCqWcmJobsAsyncImplAsyncPageMoveConfigProviderService(params);
        System.assertEquals(expectedResponse, response);
    }

    /**
     * 
     *
     * 
     */
    @isTest
    private static void comAdobeCqWcmLaunchesImplLaunchesEventHandlerTest() {
        HttpResponse res = new HttpResponse();
        res.setStatusCode(200);
        res.setStatus('OK');
        Test.setMock(HttpCalloutMock.class, new OASResponseMock(res));

        Map<String, Object> params = new Map<String, Object>{
            'post' => Boolean.getExample(),
            'apply' => Boolean.getExample(),
            'r_delete' => Boolean.getExample(),
            'action' => 'null',
            'location' => 'null',
            'propertylist' => new List<String>{''},
            'eventFilter' => 'null',
            'launchesEventhandlerThreadpoolMaxsize' => Integer.getExample(),
            'launchesEventhandlerThreadpoolPriority' => 'null',
            'launchesEventhandlerUpdatelastmodification' => Boolean.getExample()
        };

        OASClient client;
        OASConfigmgrApi api;
        OASComAdobeCqWcmLaunchesImplLaunches response;
        OASComAdobeCqWcmLaunchesImplLaunches expectedResponse;
        String js = '';

        client = new OASClient();
        api = new OASConfigmgrApi(client);

        js = JSON.serialize(OASComAdobeCqWcmLaunchesImplLaunches.getExample());
        res.setHeader('Content-Type', 'application/json');
        res.setBody(js);
        expectedResponse = OASComAdobeCqWcmLaunchesImplLaunches.getExample();
        response = (OASComAdobeCqWcmLaunchesImplLaunches) api.comAdobeCqWcmLaunchesImplLaunchesEventHandler(params);
        System.assertEquals(expectedResponse, response);
    }

    /**
     * 
     *
     * 
     */
    @isTest
    private static void comAdobeCqWcmMobileQrcodeServletQRCodeImageGeneratorTest() {
        HttpResponse res = new HttpResponse();
        res.setStatusCode(200);
        res.setStatus('OK');
        Test.setMock(HttpCalloutMock.class, new OASResponseMock(res));

        Map<String, Object> params = new Map<String, Object>{
            'post' => Boolean.getExample(),
            'apply' => Boolean.getExample(),
            'r_delete' => Boolean.getExample(),
            'action' => 'null',
            'location' => 'null',
            'propertylist' => new List<String>{''},
            'cqWcmQrcodeServletWhitelist' => new List<String>{''}
        };

        OASClient client;
        OASConfigmgrApi api;
        OASComAdobeCqWcmMobileQrcodeServletQ response;
        OASComAdobeCqWcmMobileQrcodeServletQ expectedResponse;
        String js = '';

        client = new OASClient();
        api = new OASConfigmgrApi(client);

        js = JSON.serialize(OASComAdobeCqWcmMobileQrcodeServletQ.getExample());
        res.setHeader('Content-Type', 'application/json');
        res.setBody(js);
        expectedResponse = OASComAdobeCqWcmMobileQrcodeServletQ.getExample();
        response = (OASComAdobeCqWcmMobileQrcodeServletQ) api.comAdobeCqWcmMobileQrcodeServletQRCodeImageGenerator(params);
        System.assertEquals(expectedResponse, response);
    }

    /**
     * 
     *
     * 
     */
    @isTest
    private static void comAdobeCqWcmStyleInternalComponentStyleInfoCacheImplTest() {
        HttpResponse res = new HttpResponse();
        res.setStatusCode(200);
        res.setStatus('OK');
        Test.setMock(HttpCalloutMock.class, new OASResponseMock(res));

        Map<String, Object> params = new Map<String, Object>{
            'post' => Boolean.getExample(),
            'apply' => Boolean.getExample(),
            'r_delete' => Boolean.getExample(),
            'action' => 'null',
            'location' => 'null',
            'propertylist' => new List<String>{''},
            'size' => Integer.getExample()
        };

        OASClient client;
        OASConfigmgrApi api;
        OASComAdobeCqWcmStyleInternalCompone response;
        OASComAdobeCqWcmStyleInternalCompone expectedResponse;
        String js = '';

        client = new OASClient();
        api = new OASConfigmgrApi(client);

        js = JSON.serialize(OASComAdobeCqWcmStyleInternalCompone.getExample());
        res.setHeader('Content-Type', 'application/json');
        res.setBody(js);
        expectedResponse = OASComAdobeCqWcmStyleInternalCompone.getExample();
        response = (OASComAdobeCqWcmStyleInternalCompone) api.comAdobeCqWcmStyleInternalComponentStyleInfoCacheImpl(params);
        System.assertEquals(expectedResponse, response);
    }

    /**
     * 
     *
     * 
     */
    @isTest
    private static void comAdobeCqWcmTranslationImplTranslationPlatformConfigurationImplTest() {
        HttpResponse res = new HttpResponse();
        res.setStatusCode(200);
        res.setStatus('OK');
        Test.setMock(HttpCalloutMock.class, new OASResponseMock(res));

        Map<String, Object> params = new Map<String, Object>{
            'post' => Boolean.getExample(),
            'apply' => Boolean.getExample(),
            'r_delete' => Boolean.getExample(),
            'action' => 'null',
            'location' => 'null',
            'propertylist' => new List<String>{''},
            'syncTranslationStateSchedulingFormat' => 'null',
            'schedulingRepeatTranslationSchedulingFormat' => 'null',
            'syncTranslationStateLockTimeoutInMinutes' => 'null',
            'exportFormat' => 'null'
        };

        OASClient client;
        OASConfigmgrApi api;
        OASComAdobeCqWcmTranslationImplTrans response;
        OASComAdobeCqWcmTranslationImplTrans expectedResponse;
        String js = '';

        client = new OASClient();
        api = new OASConfigmgrApi(client);

        js = JSON.serialize(OASComAdobeCqWcmTranslationImplTrans.getExample());
        res.setHeader('Content-Type', 'application/json');
        res.setBody(js);
        expectedResponse = OASComAdobeCqWcmTranslationImplTrans.getExample();
        response = (OASComAdobeCqWcmTranslationImplTrans) api.comAdobeCqWcmTranslationImplTranslationPlatformConfigurationImpl(params);
        System.assertEquals(expectedResponse, response);
    }

    /**
     * 
     *
     * 
     */
    @isTest
    private static void comAdobeFdFpConfigFormsPortalDraftsandSubmissionConfigServiceTest() {
        HttpResponse res = new HttpResponse();
        res.setStatusCode(200);
        res.setStatus('OK');
        Test.setMock(HttpCalloutMock.class, new OASResponseMock(res));

        Map<String, Object> params = new Map<String, Object>{
            'post' => Boolean.getExample(),
            'apply' => Boolean.getExample(),
            'r_delete' => Boolean.getExample(),
            'action' => 'null',
            'location' => 'null',
            'propertylist' => new List<String>{''},
            'portalOutboxes' => new List<String>{''},
            'draftDataService' => 'null',
            'draftMetadataService' => 'null',
            'submitDataService' => 'null',
            'submitMetadataService' => 'null',
            'pendingSignDataService' => 'null',
            'pendingSignMetadataService' => 'null'
        };

        OASClient client;
        OASConfigmgrApi api;
        OASComAdobeFdFpConfigFormsPortalDraf response;
        OASComAdobeFdFpConfigFormsPortalDraf expectedResponse;
        String js = '';

        client = new OASClient();
        api = new OASConfigmgrApi(client);

        js = JSON.serialize(OASComAdobeFdFpConfigFormsPortalDraf.getExample());
        res.setHeader('Content-Type', 'application/json');
        res.setBody(js);
        expectedResponse = OASComAdobeFdFpConfigFormsPortalDraf.getExample();
        response = (OASComAdobeFdFpConfigFormsPortalDraf) api.comAdobeFdFpConfigFormsPortalDraftsandSubmissionConfigService(params);
        System.assertEquals(expectedResponse, response);
    }

    /**
     * 
     *
     * 
     */
    @isTest
    private static void comAdobeFdFpConfigFormsPortalSchedulerServiceTest() {
        HttpResponse res = new HttpResponse();
        res.setStatusCode(200);
        res.setStatus('OK');
        Test.setMock(HttpCalloutMock.class, new OASResponseMock(res));

        Map<String, Object> params = new Map<String, Object>{
            'post' => Boolean.getExample(),
            'apply' => Boolean.getExample(),
            'r_delete' => Boolean.getExample(),
            'action' => 'null',
            'location' => 'null',
            'propertylist' => new List<String>{''},
            'formportalInterval' => 'null'
        };

        OASClient client;
        OASConfigmgrApi api;
        OASComAdobeFdFpConfigFormsPortalSche response;
        OASComAdobeFdFpConfigFormsPortalSche expectedResponse;
        String js = '';

        client = new OASClient();
        api = new OASConfigmgrApi(client);

        js = JSON.serialize(OASComAdobeFdFpConfigFormsPortalSche.getExample());
        res.setHeader('Content-Type', 'application/json');
        res.setBody(js);
        expectedResponse = OASComAdobeFdFpConfigFormsPortalSche.getExample();
        response = (OASComAdobeFdFpConfigFormsPortalSche) api.comAdobeFdFpConfigFormsPortalSchedulerService(params);
        System.assertEquals(expectedResponse, response);
    }

    /**
     * 
     *
     * 
     */
    @isTest
    private static void comAdobeFormsCommonServiceImplDefaultDataProviderTest() {
        HttpResponse res = new HttpResponse();
        res.setStatusCode(200);
        res.setStatus('OK');
        Test.setMock(HttpCalloutMock.class, new OASResponseMock(res));

        Map<String, Object> params = new Map<String, Object>{
            'post' => Boolean.getExample(),
            'apply' => Boolean.getExample(),
            'r_delete' => Boolean.getExample(),
            'action' => 'null',
            'location' => 'null',
            'propertylist' => new List<String>{''},
            'alloweddataFileLocations' => new List<String>{''}
        };

        OASClient client;
        OASConfigmgrApi api;
        OASComAdobeFormsCommonServiceImplDef response;
        OASComAdobeFormsCommonServiceImplDef expectedResponse;
        String js = '';

        client = new OASClient();
        api = new OASConfigmgrApi(client);

        js = JSON.serialize(OASComAdobeFormsCommonServiceImplDef.getExample());
        res.setHeader('Content-Type', 'application/json');
        res.setBody(js);
        expectedResponse = OASComAdobeFormsCommonServiceImplDef.getExample();
        response = (OASComAdobeFormsCommonServiceImplDef) api.comAdobeFormsCommonServiceImplDefaultDataProvider(params);
        System.assertEquals(expectedResponse, response);
    }

    /**
     * 
     *
     * 
     */
    @isTest
    private static void comAdobeFormsCommonServiceImplFormsCommonConfigurationServiceImpTest() {
        HttpResponse res = new HttpResponse();
        res.setStatusCode(200);
        res.setStatus('OK');
        Test.setMock(HttpCalloutMock.class, new OASResponseMock(res));

        Map<String, Object> params = new Map<String, Object>{
            'post' => Boolean.getExample(),
            'apply' => Boolean.getExample(),
            'r_delete' => Boolean.getExample(),
            'action' => 'null',
            'location' => 'null',
            'propertylist' => new List<String>{''},
            'tempStorageConfig' => 'null'
        };

        OASClient client;
        OASConfigmgrApi api;
        OASComAdobeFormsCommonServiceImplFor response;
        OASComAdobeFormsCommonServiceImplFor expectedResponse;
        String js = '';

        client = new OASClient();
        api = new OASConfigmgrApi(client);

        js = JSON.serialize(OASComAdobeFormsCommonServiceImplFor.getExample());
        res.setHeader('Content-Type', 'application/json');
        res.setBody(js);
        expectedResponse = OASComAdobeFormsCommonServiceImplFor.getExample();
        response = (OASComAdobeFormsCommonServiceImplFor) api.comAdobeFormsCommonServiceImplFormsCommonConfigurationServiceImp(params);
        System.assertEquals(expectedResponse, response);
    }

    /**
     * 
     *
     * 
     */
    @isTest
    private static void comAdobeFormsCommonServletTempCleanUpTaskTest() {
        HttpResponse res = new HttpResponse();
        res.setStatusCode(200);
        res.setStatus('OK');
        Test.setMock(HttpCalloutMock.class, new OASResponseMock(res));

        Map<String, Object> params = new Map<String, Object>{
            'post' => Boolean.getExample(),
            'apply' => Boolean.getExample(),
            'r_delete' => Boolean.getExample(),
            'action' => 'null',
            'location' => 'null',
            'propertylist' => new List<String>{''},
            'schedulerExpression' => 'null',
            'durationForTemporaryStorage' => 'null',
            'durationForAnonymousStorage' => 'null'
        };

        OASClient client;
        OASConfigmgrApi api;
        OASComAdobeFormsCommonServletTempCle response;
        OASComAdobeFormsCommonServletTempCle expectedResponse;
        String js = '';

        client = new OASClient();
        api = new OASConfigmgrApi(client);

        js = JSON.serialize(OASComAdobeFormsCommonServletTempCle.getExample());
        res.setHeader('Content-Type', 'application/json');
        res.setBody(js);
        expectedResponse = OASComAdobeFormsCommonServletTempCle.getExample();
        response = (OASComAdobeFormsCommonServletTempCle) api.comAdobeFormsCommonServletTempCleanUpTask(params);
        System.assertEquals(expectedResponse, response);
    }

    /**
     * 
     *
     * 
     */
    @isTest
    private static void comAdobeGraniteAcpPlatformPlatformServletTest() {
        HttpResponse res = new HttpResponse();
        res.setStatusCode(200);
        res.setStatus('OK');
        Test.setMock(HttpCalloutMock.class, new OASResponseMock(res));

        Map<String, Object> params = new Map<String, Object>{
            'post' => Boolean.getExample(),
            'apply' => Boolean.getExample(),
            'r_delete' => Boolean.getExample(),
            'action' => 'null',
            'location' => 'null',
            'propertylist' => new List<String>{''},
            'queryLimit' => Integer.getExample(),
            'fileTypeExtensionMap' => new List<String>{''}
        };

        OASClient client;
        OASConfigmgrApi api;
        OASComAdobeGraniteAcpPlatformPlatfor response;
        OASComAdobeGraniteAcpPlatformPlatfor expectedResponse;
        String js = '';

        client = new OASClient();
        api = new OASConfigmgrApi(client);

        js = JSON.serialize(OASComAdobeGraniteAcpPlatformPlatfor.getExample());
        res.setHeader('Content-Type', 'application/json');
        res.setBody(js);
        expectedResponse = OASComAdobeGraniteAcpPlatformPlatfor.getExample();
        response = (OASComAdobeGraniteAcpPlatformPlatfor) api.comAdobeGraniteAcpPlatformPlatformServlet(params);
        System.assertEquals(expectedResponse, response);
    }

    /**
     * 
     *
     * 
     */
    @isTest
    private static void comAdobeGraniteActivitystreamsImplActivityManagerImplTest() {
        HttpResponse res = new HttpResponse();
        res.setStatusCode(200);
        res.setStatus('OK');
        Test.setMock(HttpCalloutMock.class, new OASResponseMock(res));

        Map<String, Object> params = new Map<String, Object>{
            'post' => Boolean.getExample(),
            'apply' => Boolean.getExample(),
            'r_delete' => Boolean.getExample(),
            'action' => 'null',
            'location' => 'null',
            'propertylist' => new List<String>{''},
            'aggregateRelationships' => new List<String>{''},
            'aggregateDescendVirtual' => Boolean.getExample()
        };

        OASClient client;
        OASConfigmgrApi api;
        OASComAdobeGraniteActivitystreamsImp response;
        OASComAdobeGraniteActivitystreamsImp expectedResponse;
        String js = '';

        client = new OASClient();
        api = new OASConfigmgrApi(client);

        js = JSON.serialize(OASComAdobeGraniteActivitystreamsImp.getExample());
        res.setHeader('Content-Type', 'application/json');
        res.setBody(js);
        expectedResponse = OASComAdobeGraniteActivitystreamsImp.getExample();
        response = (OASComAdobeGraniteActivitystreamsImp) api.comAdobeGraniteActivitystreamsImplActivityManagerImpl(params);
        System.assertEquals(expectedResponse, response);
    }

    /**
     * 
     *
     * 
     */
    @isTest
    private static void comAdobeGraniteAnalyzerBaseSystemStatusServletTest() {
        HttpResponse res = new HttpResponse();
        res.setStatusCode(200);
        res.setStatus('OK');
        Test.setMock(HttpCalloutMock.class, new OASResponseMock(res));

        Map<String, Object> params = new Map<String, Object>{
            'post' => Boolean.getExample(),
            'apply' => Boolean.getExample(),
            'r_delete' => Boolean.getExample(),
            'action' => 'null',
            'location' => 'null',
            'propertylist' => new List<String>{''},
            'disabled' => Boolean.getExample()
        };

        OASClient client;
        OASConfigmgrApi api;
        OASComAdobeGraniteAnalyzerBaseSystem response;
        OASComAdobeGraniteAnalyzerBaseSystem expectedResponse;
        String js = '';

        client = new OASClient();
        api = new OASConfigmgrApi(client);

        js = JSON.serialize(OASComAdobeGraniteAnalyzerBaseSystem.getExample());
        res.setHeader('Content-Type', 'application/json');
        res.setBody(js);
        expectedResponse = OASComAdobeGraniteAnalyzerBaseSystem.getExample();
        response = (OASComAdobeGraniteAnalyzerBaseSystem) api.comAdobeGraniteAnalyzerBaseSystemStatusServlet(params);
        System.assertEquals(expectedResponse, response);
    }

    /**
     * 
     *
     * 
     */
    @isTest
    private static void comAdobeGraniteAnalyzerScriptsCompileAllScriptsCompilerServletTest() {
        HttpResponse res = new HttpResponse();
        res.setStatusCode(200);
        res.setStatus('OK');
        Test.setMock(HttpCalloutMock.class, new OASResponseMock(res));

        Map<String, Object> params = new Map<String, Object>{
            'post' => Boolean.getExample(),
            'apply' => Boolean.getExample(),
            'r_delete' => Boolean.getExample(),
            'action' => 'null',
            'location' => 'null',
            'propertylist' => new List<String>{''},
            'disabled' => Boolean.getExample()
        };

        OASClient client;
        OASConfigmgrApi api;
        OASComAdobeGraniteAnalyzerScriptsCom response;
        OASComAdobeGraniteAnalyzerScriptsCom expectedResponse;
        String js = '';

        client = new OASClient();
        api = new OASConfigmgrApi(client);

        js = JSON.serialize(OASComAdobeGraniteAnalyzerScriptsCom.getExample());
        res.setHeader('Content-Type', 'application/json');
        res.setBody(js);
        expectedResponse = OASComAdobeGraniteAnalyzerScriptsCom.getExample();
        response = (OASComAdobeGraniteAnalyzerScriptsCom) api.comAdobeGraniteAnalyzerScriptsCompileAllScriptsCompilerServlet(params);
        System.assertEquals(expectedResponse, response);
    }

    /**
     * 
     *
     * 
     */
    @isTest
    private static void comAdobeGraniteApicontrollerFilterResolverHookFactoryTest() {
        HttpResponse res = new HttpResponse();
        res.setStatusCode(200);
        res.setStatus('OK');
        Test.setMock(HttpCalloutMock.class, new OASResponseMock(res));

        Map<String, Object> params = new Map<String, Object>{
            'post' => Boolean.getExample(),
            'apply' => Boolean.getExample(),
            'r_delete' => Boolean.getExample(),
            'action' => 'null',
            'location' => 'null',
            'propertylist' => new List<String>{''},
            'comAdobeCqCdnCdnRewriter' => 'null',
            'comAdobeCqCloudConfigComponents' => 'null',
            'comAdobeCqCloudConfigCore' => 'null',
            'comAdobeCqCloudConfigUi' => 'null',
            'comAdobeCqComAdobeCqEditor' => 'null',
            'comAdobeCqComAdobeCqProjectsCore' => 'null',
            'comAdobeCqComAdobeCqProjectsWcmCore' => 'null',
            'comAdobeCqComAdobeCqUiCommons' => 'null',
            'comAdobeCqComAdobeCqWcmStyle' => 'null',
            'comAdobeCqCqActivitymapIntegration' => 'null',
            'comAdobeCqCqContexthubCommons' => 'null',
            'comAdobeCqCqDtm' => 'null',
            'comAdobeCqCqHealthcheck' => 'null',
            'comAdobeCqCqMultisiteTargeting' => 'null',
            'comAdobeCqCqPreUpgradeCleanup' => 'null',
            'comAdobeCqCqProductInfoProvider' => 'null',
            'comAdobeCqCqRestSites' => 'null',
            'comAdobeCqCqSecurityHc' => 'null',
            'comAdobeCqDamCqDamSvgHandler' => 'null',
            'comAdobeCqDamCqScene7Imaging' => 'null',
            'comAdobeCqDtmReactorCore' => 'null',
            'comAdobeCqDtmReactorUi' => 'null',
            'comAdobeCqExpJspelResolver' => 'null',
            'comAdobeCqInboxCqInbox' => 'null',
            'comAdobeCqJsonSchemaParser' => 'null',
            'comAdobeCqMediaCqMediaPublishingDpsFpCore' => 'null',
            'comAdobeCqMobileCqMobileCaas' => 'null',
            'comAdobeCqMobileCqMobileIndexBuilder' => 'null',
            'comAdobeCqMobileCqMobilePhonegapBuild' => 'null',
            'comAdobeCqMyspell' => 'null',
            'comAdobeCqSampleWeRetailCore' => 'null',
            'comAdobeCqScreensComAdobeCqScreensDcc' => 'null',
            'comAdobeCqScreensComAdobeCqScreensMqCore' => 'null',
            'comAdobeCqSocialCqSocialAsProvider' => 'null',
            'comAdobeCqSocialCqSocialBadgingBasicImpl' => 'null',
            'comAdobeCqSocialCqSocialBadgingImpl' => 'null',
            'comAdobeCqSocialCqSocialCalendarImpl' => 'null',
            'comAdobeCqSocialCqSocialContentFragmentsImpl' => 'null',
            'comAdobeCqSocialCqSocialEnablementImpl' => 'null',
            'comAdobeCqSocialCqSocialGraphImpl' => 'null',
            'comAdobeCqSocialCqSocialIdeationImpl' => 'null',
            'comAdobeCqSocialCqSocialJcrProvider' => 'null',
            'comAdobeCqSocialCqSocialMembersImpl' => 'null',
            'comAdobeCqSocialCqSocialMsProvider' => 'null',
            'comAdobeCqSocialCqSocialNotificationsChannelsWeb' => 'null',
            'comAdobeCqSocialCqSocialNotificationsImpl' => 'null',
            'comAdobeCqSocialCqSocialRdbProvider' => 'null',
            'comAdobeCqSocialCqSocialScfImpl' => 'null',
            'comAdobeCqSocialCqSocialScoringBasicImpl' => 'null',
            'comAdobeCqSocialCqSocialScoringImpl' => 'null',
            'comAdobeCqSocialCqSocialServiceusersImpl' => 'null',
            'comAdobeCqSocialCqSocialSrpImpl' => 'null',
            'comAdobeCqSocialCqSocialUgcbaseImpl' => 'null',
            'comAdobeDamCqDamCfmImpl' => 'null',
            'comAdobeFormsFoundationFormsFoundationBase' => 'null',
            'comAdobeGraniteApicontroller' => 'null',
            'comAdobeGraniteAssetCore' => 'null',
            'comAdobeGraniteAuthSso' => 'null',
            'comAdobeGraniteBundlesHcImpl' => 'null',
            'comAdobeGraniteCompatRouter' => 'null',
            'comAdobeGraniteConf' => 'null',
            'comAdobeGraniteConfUiCore' => 'null',
            'comAdobeGraniteCors' => 'null',
            'comAdobeGraniteCrxExplorer' => 'null',
            'comAdobeGraniteCrxdeLite' => 'null',
            'comAdobeGraniteCryptoConfig' => 'null',
            'comAdobeGraniteCryptoExtension' => 'null',
            'comAdobeGraniteCryptoFile' => 'null',
            'comAdobeGraniteCryptoJcr' => 'null',
            'comAdobeGraniteCsrf' => 'null',
            'comAdobeGraniteDistributionCore' => 'null',
            'comAdobeGraniteDropwizardMetrics' => 'null',
            'comAdobeGraniteFragsImpl' => 'null',
            'comAdobeGraniteGibson' => 'null',
            'comAdobeGraniteInfocollector' => 'null',
            'comAdobeGraniteInstallerFactoryPackages' => 'null',
            'comAdobeGraniteJettySsl' => 'null',
            'comAdobeGraniteJobsAsync' => 'null',
            'comAdobeGraniteMaintenanceOak' => 'null',
            'comAdobeGraniteMonitoringCore' => 'null',
            'comAdobeGraniteQueries' => 'null',
            'comAdobeGraniteReplicationHcImpl' => 'null',
            'comAdobeGraniteRepositoryChecker' => 'null',
            'comAdobeGraniteRepositoryHcImpl' => 'null',
            'comAdobeGraniteRestAssets' => 'null',
            'comAdobeGraniteSecurityUi' => 'null',
            'comAdobeGraniteStartup' => 'null',
            'comAdobeGraniteTagsoup' => 'null',
            'comAdobeGraniteTaskmanagementCore' => 'null',
            'comAdobeGraniteTaskmanagementWorkflow' => 'null',
            'comAdobeGraniteUiClientlibsCompilerLess' => 'null',
            'comAdobeGraniteUiClientlibsProcessorGcc' => 'null',
            'comAdobeGraniteWebconsolePlugins' => 'null',
            'comAdobeGraniteWorkflowConsole' => 'null',
            'comAdobeXmpWorkerFilesNativeFragmentLinux' => 'null',
            'comAdobeXmpWorkerFilesNativeFragmentMacosx' => 'null',
            'comAdobeXmpWorkerFilesNativeFragmentWin' => 'null',
            'comDayCommonsOsgiWrapperSimpleJndi' => 'null',
            'comDayCqCqAuthhandler' => 'null',
            'comDayCqCqCompatConfigupdate' => 'null',
            'comDayCqCqLicensebranding' => 'null',
            'comDayCqCqNotifcationImpl' => 'null',
            'comDayCqCqReplicationAudit' => 'null',
            'comDayCqCqSearchExt' => 'null',
            'comDayCqDamCqDamAnnotationPrint' => 'null',
            'comDayCqDamCqDamAssetUsage' => 'null',
            'comDayCqDamCqDamS7dam' => 'null',
            'comDayCqDamCqDamSimilaritysearch' => 'null',
            'comDayCqDamDamWebdavSupport' => 'null',
            'comDayCqPreUpgradeTasks' => 'null',
            'comDayCqReplicationExtensions' => 'null',
            'comDayCqWcmCqMsmCore' => 'null',
            'comDayCqWcmCqWcmTranslation' => 'null',
            'dayCommonsJrawio' => 'null',
            'orgApacheAriesJmxWhiteboard' => 'null',
            'orgApacheFelixHttpSslfilter' => 'null',
            'orgApacheFelixOrgApacheFelixThreaddump' => 'null',
            'orgApacheFelixWebconsolePluginsDs' => 'null',
            'orgApacheFelixWebconsolePluginsEvent' => 'null',
            'orgApacheFelixWebconsolePluginsMemoryusage' => 'null',
            'orgApacheFelixWebconsolePluginsPackageadmin' => 'null',
            'orgApacheJackrabbitOakAuthLdap' => 'null',
            'orgApacheJackrabbitOakSegmentTar' => 'null',
            'orgApacheJackrabbitOakSolrOsgi' => 'null',
            'orgApacheSlingBundleresourceImpl' => 'null',
            'orgApacheSlingCommonsFsclassloader' => 'null',
            'orgApacheSlingCommonsLogWebconsole' => 'null',
            'orgApacheSlingDatasource' => 'null',
            'orgApacheSlingDiscoveryBase' => 'null',
            'orgApacheSlingDiscoveryOak' => 'null',
            'orgApacheSlingDiscoverySupport' => 'null',
            'orgApacheSlingDistributionApi' => 'null',
            'orgApacheSlingDistributionCore' => 'null',
            'orgApacheSlingExtensionsWebconsolesecurityprovider' => 'null',
            'orgApacheSlingHcWebconsole' => 'null',
            'orgApacheSlingInstallerConsole' => 'null',
            'orgApacheSlingInstallerProviderFile' => 'null',
            'orgApacheSlingInstallerProviderJcr' => 'null',
            'orgApacheSlingJcrDavex' => 'null',
            'orgApacheSlingJcrResourcesecurity' => 'null',
            'orgApacheSlingJmxProvider' => 'null',
            'orgApacheSlingLaunchpadInstaller' => 'null',
            'orgApacheSlingModelsImpl' => 'null',
            'orgApacheSlingRepoinitParser' => 'null',
            'orgApacheSlingResourceInventory' => 'null',
            'orgApacheSlingResourceresolver' => 'null',
            'orgApacheSlingScriptingJavascript' => 'null',
            'orgApacheSlingScriptingJst' => 'null',
            'orgApacheSlingScriptingSightlyJsProvider' => 'null',
            'orgApacheSlingScriptingSightlyModelsProvider' => 'null',
            'orgApacheSlingSecurity' => 'null',
            'orgApacheSlingServletsCompat' => 'null',
            'orgApacheSlingServletsGet' => 'null',
            'orgApacheSlingStartupfilterDisabler' => 'null',
            'orgApacheSlingTracer' => 'null',
            'weRetailClientAppCore' => 'null'
        };

        OASClient client;
        OASConfigmgrApi api;
        OASComAdobeGraniteApicontrollerFilte response;
        OASComAdobeGraniteApicontrollerFilte expectedResponse;
        String js = '';

        client = new OASClient();
        api = new OASConfigmgrApi(client);

        js = JSON.serialize(OASComAdobeGraniteApicontrollerFilte.getExample());
        res.setHeader('Content-Type', 'application/json');
        res.setBody(js);
        expectedResponse = OASComAdobeGraniteApicontrollerFilte.getExample();
        response = (OASComAdobeGraniteApicontrollerFilte) api.comAdobeGraniteApicontrollerFilterResolverHookFactory(params);
        System.assertEquals(expectedResponse, response);
    }

    /**
     * 
     *
     * 
     */
    @isTest
    private static void comAdobeGraniteAuthCertImplClientCertAuthHandlerTest() {
        HttpResponse res = new HttpResponse();
        res.setStatusCode(200);
        res.setStatus('OK');
        Test.setMock(HttpCalloutMock.class, new OASResponseMock(res));

        Map<String, Object> params = new Map<String, Object>{
            'post' => Boolean.getExample(),
            'apply' => Boolean.getExample(),
            'r_delete' => Boolean.getExample(),
            'action' => 'null',
            'location' => 'null',
            'propertylist' => new List<String>{''},
            'path' => 'null',
            'serviceRanking' => Integer.getExample()
        };

        OASClient client;
        OASConfigmgrApi api;
        OASComAdobeGraniteAuthCertImplClient response;
        OASComAdobeGraniteAuthCertImplClient expectedResponse;
        String js = '';

        client = new OASClient();
        api = new OASConfigmgrApi(client);

        js = JSON.serialize(OASComAdobeGraniteAuthCertImplClient.getExample());
        res.setHeader('Content-Type', 'application/json');
        res.setBody(js);
        expectedResponse = OASComAdobeGraniteAuthCertImplClient.getExample();
        response = (OASComAdobeGraniteAuthCertImplClient) api.comAdobeGraniteAuthCertImplClientCertAuthHandler(params);
        System.assertEquals(expectedResponse, response);
    }

    /**
     * 
     *
     * 
     */
    @isTest
    private static void comAdobeGraniteAuthImsTest() {
        HttpResponse res = new HttpResponse();
        res.setStatusCode(200);
        res.setStatus('OK');
        Test.setMock(HttpCalloutMock.class, new OASResponseMock(res));

        Map<String, Object> params = new Map<String, Object>{
            'post' => Boolean.getExample(),
            'apply' => Boolean.getExample(),
            'r_delete' => Boolean.getExample(),
            'action' => 'null',
            'location' => 'null',
            'propertylist' => new List<String>{''},
            'configid' => 'null',
            'scope' => 'null'
        };

        OASClient client;
        OASConfigmgrApi api;
        OASComAdobeGraniteAuthImsInfo response;
        OASComAdobeGraniteAuthImsInfo expectedResponse;
        String js = '';

        client = new OASClient();
        api = new OASConfigmgrApi(client);

        js = JSON.serialize(OASComAdobeGraniteAuthImsInfo.getExample());
        res.setHeader('Content-Type', 'application/json');
        res.setBody(js);
        expectedResponse = OASComAdobeGraniteAuthImsInfo.getExample();
        response = (OASComAdobeGraniteAuthImsInfo) api.comAdobeGraniteAuthIms(params);
        System.assertEquals(expectedResponse, response);
    }

    /**
     * 
     *
     * 
     */
    @isTest
    private static void comAdobeGraniteAuthImsImplExternalUserIdMappingProviderExtensionTest() {
        HttpResponse res = new HttpResponse();
        res.setStatusCode(200);
        res.setStatus('OK');
        Test.setMock(HttpCalloutMock.class, new OASResponseMock(res));

        Map<String, Object> params = new Map<String, Object>{
            'post' => Boolean.getExample(),
            'apply' => Boolean.getExample(),
            'r_delete' => Boolean.getExample(),
            'action' => 'null',
            'location' => 'null',
            'propertylist' => new List<String>{''},
            'oauthProviderId' => 'null'
        };

        OASClient client;
        OASConfigmgrApi api;
        OASComAdobeGraniteAuthImsImplExterna response;
        OASComAdobeGraniteAuthImsImplExterna expectedResponse;
        String js = '';

        client = new OASClient();
        api = new OASConfigmgrApi(client);

        js = JSON.serialize(OASComAdobeGraniteAuthImsImplExterna.getExample());
        res.setHeader('Content-Type', 'application/json');
        res.setBody(js);
        expectedResponse = OASComAdobeGraniteAuthImsImplExterna.getExample();
        response = (OASComAdobeGraniteAuthImsImplExterna) api.comAdobeGraniteAuthImsImplExternalUserIdMappingProviderExtension(params);
        System.assertEquals(expectedResponse, response);
    }

    /**
     * 
     *
     * 
     */
    @isTest
    private static void comAdobeGraniteAuthImsImplIMSAccessTokenRequestCustomizerImplTest() {
        HttpResponse res = new HttpResponse();
        res.setStatusCode(200);
        res.setStatus('OK');
        Test.setMock(HttpCalloutMock.class, new OASResponseMock(res));

        Map<String, Object> params = new Map<String, Object>{
            'post' => Boolean.getExample(),
            'apply' => Boolean.getExample(),
            'r_delete' => Boolean.getExample(),
            'action' => 'null',
            'location' => 'null',
            'propertylist' => new List<String>{''},
            'authImsClientSecret' => 'null',
            'customizerType' => 'null'
        };

        OASClient client;
        OASConfigmgrApi api;
        OASComAdobeGraniteAuthImsImplIMSAcce response;
        OASComAdobeGraniteAuthImsImplIMSAcce expectedResponse;
        String js = '';

        client = new OASClient();
        api = new OASConfigmgrApi(client);

        js = JSON.serialize(OASComAdobeGraniteAuthImsImplIMSAcce.getExample());
        res.setHeader('Content-Type', 'application/json');
        res.setBody(js);
        expectedResponse = OASComAdobeGraniteAuthImsImplIMSAcce.getExample();
        response = (OASComAdobeGraniteAuthImsImplIMSAcce) api.comAdobeGraniteAuthImsImplIMSAccessTokenRequestCustomizerImpl(params);
        System.assertEquals(expectedResponse, response);
    }

    /**
     * 
     *
     * 
     */
    @isTest
    private static void comAdobeGraniteAuthImsImplIMSInstanceCredentialsValidatorTest() {
        HttpResponse res = new HttpResponse();
        res.setStatusCode(200);
        res.setStatus('OK');
        Test.setMock(HttpCalloutMock.class, new OASResponseMock(res));

        Map<String, Object> params = new Map<String, Object>{
            'post' => Boolean.getExample(),
            'apply' => Boolean.getExample(),
            'r_delete' => Boolean.getExample(),
            'action' => 'null',
            'location' => 'null',
            'propertylist' => new List<String>{''},
            'oauthProviderId' => 'null'
        };

        OASClient client;
        OASConfigmgrApi api;
        OASComAdobeGraniteAuthImsImplIMSInst response;
        OASComAdobeGraniteAuthImsImplIMSInst expectedResponse;
        String js = '';

        client = new OASClient();
        api = new OASConfigmgrApi(client);

        js = JSON.serialize(OASComAdobeGraniteAuthImsImplIMSInst.getExample());
        res.setHeader('Content-Type', 'application/json');
        res.setBody(js);
        expectedResponse = OASComAdobeGraniteAuthImsImplIMSInst.getExample();
        response = (OASComAdobeGraniteAuthImsImplIMSInst) api.comAdobeGraniteAuthImsImplIMSInstanceCredentialsValidator(params);
        System.assertEquals(expectedResponse, response);
    }

    /**
     * 
     *
     * 
     */
    @isTest
    private static void comAdobeGraniteAuthImsImplIMSProviderImplTest() {
        HttpResponse res = new HttpResponse();
        res.setStatusCode(200);
        res.setStatus('OK');
        Test.setMock(HttpCalloutMock.class, new OASResponseMock(res));

        Map<String, Object> params = new Map<String, Object>{
            'post' => Boolean.getExample(),
            'apply' => Boolean.getExample(),
            'r_delete' => Boolean.getExample(),
            'action' => 'null',
            'location' => 'null',
            'propertylist' => new List<String>{''},
            'oauthProviderId' => 'null',
            'oauthProviderImsAuthorizationUrl' => 'null',
            'oauthProviderImsTokenUrl' => 'null',
            'oauthProviderImsProfileUrl' => 'null',
            'oauthProviderImsExtendedDetailsUrls' => new List<String>{''},
            'oauthProviderImsValidateTokenUrl' => 'null',
            'oauthProviderImsSessionProperty' => 'null',
            'oauthProviderImsServiceTokenClientId' => 'null',
            'oauthProviderImsServiceTokenClientSecret' => 'null',
            'oauthProviderImsServiceToken' => 'null',
            'imsOrgRef' => 'null',
            'imsGroupMapping' => new List<String>{''},
            'oauthProviderImsOnlyLicenseGroup' => Boolean.getExample()
        };

        OASClient client;
        OASConfigmgrApi api;
        OASComAdobeGraniteAuthImsImplIMSProv response;
        OASComAdobeGraniteAuthImsImplIMSProv expectedResponse;
        String js = '';

        client = new OASClient();
        api = new OASConfigmgrApi(client);

        js = JSON.serialize(OASComAdobeGraniteAuthImsImplIMSProv.getExample());
        res.setHeader('Content-Type', 'application/json');
        res.setBody(js);
        expectedResponse = OASComAdobeGraniteAuthImsImplIMSProv.getExample();
        response = (OASComAdobeGraniteAuthImsImplIMSProv) api.comAdobeGraniteAuthImsImplIMSProviderImpl(params);
        System.assertEquals(expectedResponse, response);
    }

    /**
     * 
     *
     * 
     */
    @isTest
    private static void comAdobeGraniteAuthImsImplImsConfigProviderImplTest() {
        HttpResponse res = new HttpResponse();
        res.setStatusCode(200);
        res.setStatus('OK');
        Test.setMock(HttpCalloutMock.class, new OASResponseMock(res));

        Map<String, Object> params = new Map<String, Object>{
            'post' => Boolean.getExample(),
            'apply' => Boolean.getExample(),
            'r_delete' => Boolean.getExample(),
            'action' => 'null',
            'location' => 'null',
            'propertylist' => new List<String>{''},
            'oauthConfigmanagerImsConfigid' => 'null',
            'imsOwningEntity' => 'null',
            'aemInstanceId' => 'null',
            'imsServiceCode' => 'null'
        };

        OASClient client;
        OASConfigmgrApi api;
        OASComAdobeGraniteAuthImsImplImsConf response;
        OASComAdobeGraniteAuthImsImplImsConf expectedResponse;
        String js = '';

        client = new OASClient();
        api = new OASConfigmgrApi(client);

        js = JSON.serialize(OASComAdobeGraniteAuthImsImplImsConf.getExample());
        res.setHeader('Content-Type', 'application/json');
        res.setBody(js);
        expectedResponse = OASComAdobeGraniteAuthImsImplImsConf.getExample();
        response = (OASComAdobeGraniteAuthImsImplImsConf) api.comAdobeGraniteAuthImsImplImsConfigProviderImpl(params);
        System.assertEquals(expectedResponse, response);
    }

    /**
     * 
     *
     * 
     */
    @isTest
    private static void comAdobeGraniteAuthOauthAccesstokenProviderTest() {
        HttpResponse res = new HttpResponse();
        res.setStatusCode(200);
        res.setStatus('OK');
        Test.setMock(HttpCalloutMock.class, new OASResponseMock(res));

        Map<String, Object> params = new Map<String, Object>{
            'post' => Boolean.getExample(),
            'apply' => Boolean.getExample(),
            'r_delete' => Boolean.getExample(),
            'action' => 'null',
            'location' => 'null',
            'propertylist' => new List<String>{''},
            'name' => 'null',
            'authTokenProviderTitle' => 'null',
            'authTokenProviderDefaultClaims' => new List<String>{''},
            'authTokenProviderEndpoint' => 'null',
            'authAccessTokenRequest' => 'null',
            'authTokenProviderKeypairAlias' => 'null',
            'authTokenProviderConnTimeout' => Integer.getExample(),
            'authTokenProviderSoTimeout' => Integer.getExample(),
            'authTokenProviderClientId' => 'null',
            'authTokenProviderScope' => 'null',
            'authTokenProviderReuseAccessToken' => Boolean.getExample(),
            'authTokenProviderRelaxedSsl' => Boolean.getExample(),
            'tokenRequestCustomizerType' => 'null',
            'authTokenValidatorType' => 'null'
        };

        OASClient client;
        OASConfigmgrApi api;
        OASComAdobeGraniteAuthOauthAccesstok response;
        OASComAdobeGraniteAuthOauthAccesstok expectedResponse;
        String js = '';

        client = new OASClient();
        api = new OASConfigmgrApi(client);

        js = JSON.serialize(OASComAdobeGraniteAuthOauthAccesstok.getExample());
        res.setHeader('Content-Type', 'application/json');
        res.setBody(js);
        expectedResponse = OASComAdobeGraniteAuthOauthAccesstok.getExample();
        response = (OASComAdobeGraniteAuthOauthAccesstok) api.comAdobeGraniteAuthOauthAccesstokenProvider(params);
        System.assertEquals(expectedResponse, response);
    }

    /**
     * 
     *
     * 
     */
    @isTest
    private static void comAdobeGraniteAuthOauthImplBearerAuthenticationHandlerTest() {
        HttpResponse res = new HttpResponse();
        res.setStatusCode(200);
        res.setStatus('OK');
        Test.setMock(HttpCalloutMock.class, new OASResponseMock(res));

        Map<String, Object> params = new Map<String, Object>{
            'post' => Boolean.getExample(),
            'apply' => Boolean.getExample(),
            'r_delete' => Boolean.getExample(),
            'action' => 'null',
            'location' => 'null',
            'propertylist' => new List<String>{''},
            'path' => 'null',
            'oauthClientIdsAllowed' => new List<String>{''},
            'authBearerSyncIms' => Boolean.getExample(),
            'authTokenRequestParameter' => 'null',
            'oauthBearerConfigid' => 'null',
            'oauthJwtSupport' => Boolean.getExample()
        };

        OASClient client;
        OASConfigmgrApi api;
        OASComAdobeGraniteAuthOauthImplBeare response;
        OASComAdobeGraniteAuthOauthImplBeare expectedResponse;
        String js = '';

        client = new OASClient();
        api = new OASConfigmgrApi(client);

        js = JSON.serialize(OASComAdobeGraniteAuthOauthImplBeare.getExample());
        res.setHeader('Content-Type', 'application/json');
        res.setBody(js);
        expectedResponse = OASComAdobeGraniteAuthOauthImplBeare.getExample();
        response = (OASComAdobeGraniteAuthOauthImplBeare) api.comAdobeGraniteAuthOauthImplBearerAuthenticationHandler(params);
        System.assertEquals(expectedResponse, response);
    }

    /**
     * 
     *
     * 
     */
    @isTest
    private static void comAdobeGraniteAuthOauthImplDefaultTokenValidatorImplTest() {
        HttpResponse res = new HttpResponse();
        res.setStatusCode(200);
        res.setStatus('OK');
        Test.setMock(HttpCalloutMock.class, new OASResponseMock(res));

        Map<String, Object> params = new Map<String, Object>{
            'post' => Boolean.getExample(),
            'apply' => Boolean.getExample(),
            'r_delete' => Boolean.getExample(),
            'action' => 'null',
            'location' => 'null',
            'propertylist' => new List<String>{''},
            'authTokenValidatorType' => 'null'
        };

        OASClient client;
        OASConfigmgrApi api;
        OASComAdobeGraniteAuthOauthImplDefau response;
        OASComAdobeGraniteAuthOauthImplDefau expectedResponse;
        String js = '';

        client = new OASClient();
        api = new OASConfigmgrApi(client);

        js = JSON.serialize(OASComAdobeGraniteAuthOauthImplDefau.getExample());
        res.setHeader('Content-Type', 'application/json');
        res.setBody(js);
        expectedResponse = OASComAdobeGraniteAuthOauthImplDefau.getExample();
        response = (OASComAdobeGraniteAuthOauthImplDefau) api.comAdobeGraniteAuthOauthImplDefaultTokenValidatorImpl(params);
        System.assertEquals(expectedResponse, response);
    }

    /**
     * 
     *
     * 
     */
    @isTest
    private static void comAdobeGraniteAuthOauthImplFacebookProviderImplTest() {
        HttpResponse res = new HttpResponse();
        res.setStatusCode(200);
        res.setStatus('OK');
        Test.setMock(HttpCalloutMock.class, new OASResponseMock(res));

        Map<String, Object> params = new Map<String, Object>{
            'post' => Boolean.getExample(),
            'apply' => Boolean.getExample(),
            'r_delete' => Boolean.getExample(),
            'action' => 'null',
            'location' => 'null',
            'propertylist' => new List<String>{''},
            'oauthProviderId' => 'null'
        };

        OASClient client;
        OASConfigmgrApi api;
        OASComAdobeGraniteAuthOauthImplFaceb response;
        OASComAdobeGraniteAuthOauthImplFaceb expectedResponse;
        String js = '';

        client = new OASClient();
        api = new OASConfigmgrApi(client);

        js = JSON.serialize(OASComAdobeGraniteAuthOauthImplFaceb.getExample());
        res.setHeader('Content-Type', 'application/json');
        res.setBody(js);
        expectedResponse = OASComAdobeGraniteAuthOauthImplFaceb.getExample();
        response = (OASComAdobeGraniteAuthOauthImplFaceb) api.comAdobeGraniteAuthOauthImplFacebookProviderImpl(params);
        System.assertEquals(expectedResponse, response);
    }

    /**
     * 
     *
     * 
     */
    @isTest
    private static void comAdobeGraniteAuthOauthImplGithubProviderImplTest() {
        HttpResponse res = new HttpResponse();
        res.setStatusCode(200);
        res.setStatus('OK');
        Test.setMock(HttpCalloutMock.class, new OASResponseMock(res));

        Map<String, Object> params = new Map<String, Object>{
            'post' => Boolean.getExample(),
            'apply' => Boolean.getExample(),
            'r_delete' => Boolean.getExample(),
            'action' => 'null',
            'location' => 'null',
            'propertylist' => new List<String>{''},
            'oauthProviderId' => 'null',
            'oauthProviderGithubAuthorizationUrl' => 'null',
            'oauthProviderGithubTokenUrl' => 'null',
            'oauthProviderGithubProfileUrl' => 'null'
        };

        OASClient client;
        OASConfigmgrApi api;
        OASComAdobeGraniteAuthOauthImplGithu response;
        OASComAdobeGraniteAuthOauthImplGithu expectedResponse;
        String js = '';

        client = new OASClient();
        api = new OASConfigmgrApi(client);

        js = JSON.serialize(OASComAdobeGraniteAuthOauthImplGithu.getExample());
        res.setHeader('Content-Type', 'application/json');
        res.setBody(js);
        expectedResponse = OASComAdobeGraniteAuthOauthImplGithu.getExample();
        response = (OASComAdobeGraniteAuthOauthImplGithu) api.comAdobeGraniteAuthOauthImplGithubProviderImpl(params);
        System.assertEquals(expectedResponse, response);
    }

    /**
     * 
     *
     * 
     */
    @isTest
    private static void comAdobeGraniteAuthOauthImplGraniteProviderTest() {
        HttpResponse res = new HttpResponse();
        res.setStatusCode(200);
        res.setStatus('OK');
        Test.setMock(HttpCalloutMock.class, new OASResponseMock(res));

        Map<String, Object> params = new Map<String, Object>{
            'post' => Boolean.getExample(),
            'apply' => Boolean.getExample(),
            'r_delete' => Boolean.getExample(),
            'action' => 'null',
            'location' => 'null',
            'propertylist' => new List<String>{''},
            'oauthProviderId' => 'null',
            'oauthProviderGraniteAuthorizationUrl' => 'null',
            'oauthProviderGraniteTokenUrl' => 'null',
            'oauthProviderGraniteProfileUrl' => 'null',
            'oauthProviderGraniteExtendedDetailsUrls' => 'null'
        };

        OASClient client;
        OASConfigmgrApi api;
        OASComAdobeGraniteAuthOauthImplGrani response;
        OASComAdobeGraniteAuthOauthImplGrani expectedResponse;
        String js = '';

        client = new OASClient();
        api = new OASConfigmgrApi(client);

        js = JSON.serialize(OASComAdobeGraniteAuthOauthImplGrani.getExample());
        res.setHeader('Content-Type', 'application/json');
        res.setBody(js);
        expectedResponse = OASComAdobeGraniteAuthOauthImplGrani.getExample();
        response = (OASComAdobeGraniteAuthOauthImplGrani) api.comAdobeGraniteAuthOauthImplGraniteProvider(params);
        System.assertEquals(expectedResponse, response);
    }

    /**
     * 
     *
     * 
     */
    @isTest
    private static void comAdobeGraniteAuthOauthImplHelperProviderConfigManagerTest() {
        HttpResponse res = new HttpResponse();
        res.setStatusCode(200);
        res.setStatus('OK');
        Test.setMock(HttpCalloutMock.class, new OASResponseMock(res));

        Map<String, Object> params = new Map<String, Object>{
            'post' => Boolean.getExample(),
            'apply' => Boolean.getExample(),
            'r_delete' => Boolean.getExample(),
            'action' => 'null',
            'location' => 'null',
            'propertylist' => new List<String>{''},
            'oauthCookieLoginTimeout' => 'null',
            'oauthCookieMaxAge' => 'null'
        };

        OASClient client;
        OASConfigmgrApi api;
        OASComAdobeGraniteAuthOauthImplHelpe response;
        OASComAdobeGraniteAuthOauthImplHelpe expectedResponse;
        String js = '';

        client = new OASClient();
        api = new OASConfigmgrApi(client);

        js = JSON.serialize(OASComAdobeGraniteAuthOauthImplHelpe.getExample());
        res.setHeader('Content-Type', 'application/json');
        res.setBody(js);
        expectedResponse = OASComAdobeGraniteAuthOauthImplHelpe.getExample();
        response = (OASComAdobeGraniteAuthOauthImplHelpe) api.comAdobeGraniteAuthOauthImplHelperProviderConfigManager(params);
        System.assertEquals(expectedResponse, response);
    }

    /**
     * 
     *
     * 
     */
    @isTest
    private static void comAdobeGraniteAuthOauthImplHelperProviderConfigManagerInternalTest() {
        HttpResponse res = new HttpResponse();
        res.setStatusCode(200);
        res.setStatus('OK');
        Test.setMock(HttpCalloutMock.class, new OASResponseMock(res));

        Map<String, Object> params = new Map<String, Object>{
            'post' => Boolean.getExample(),
            'apply' => Boolean.getExample(),
            'r_delete' => Boolean.getExample(),
            'action' => 'null',
            'location' => 'null',
            'propertylist' => new List<String>{''},
            'oauthCookieLoginTimeout' => 'null',
            'oauthCookieMaxAge' => 'null'
        };

        OASClient client;
        OASConfigmgrApi api;
        OASComAdobeGraniteAuthOauthImplHelpe response;
        OASComAdobeGraniteAuthOauthImplHelpe expectedResponse;
        String js = '';

        client = new OASClient();
        api = new OASConfigmgrApi(client);

        js = JSON.serialize(OASComAdobeGraniteAuthOauthImplHelpe.getExample());
        res.setHeader('Content-Type', 'application/json');
        res.setBody(js);
        expectedResponse = OASComAdobeGraniteAuthOauthImplHelpe.getExample();
        response = (OASComAdobeGraniteAuthOauthImplHelpe) api.comAdobeGraniteAuthOauthImplHelperProviderConfigManagerInternal(params);
        System.assertEquals(expectedResponse, response);
    }

    /**
     * 
     *
     * 
     */
    @isTest
    private static void comAdobeGraniteAuthOauthImplOAuthAuthenticationHandlerTest() {
        HttpResponse res = new HttpResponse();
        res.setStatusCode(200);
        res.setStatus('OK');
        Test.setMock(HttpCalloutMock.class, new OASResponseMock(res));

        Map<String, Object> params = new Map<String, Object>{
            'post' => Boolean.getExample(),
            'apply' => Boolean.getExample(),
            'r_delete' => Boolean.getExample(),
            'action' => 'null',
            'location' => 'null',
            'propertylist' => new List<String>{''},
            'path' => 'null'
        };

        OASClient client;
        OASConfigmgrApi api;
        OASComAdobeGraniteAuthOauthImplOAuth response;
        OASComAdobeGraniteAuthOauthImplOAuth expectedResponse;
        String js = '';

        client = new OASClient();
        api = new OASConfigmgrApi(client);

        js = JSON.serialize(OASComAdobeGraniteAuthOauthImplOAuth.getExample());
        res.setHeader('Content-Type', 'application/json');
        res.setBody(js);
        expectedResponse = OASComAdobeGraniteAuthOauthImplOAuth.getExample();
        response = (OASComAdobeGraniteAuthOauthImplOAuth) api.comAdobeGraniteAuthOauthImplOAuthAuthenticationHandler(params);
        System.assertEquals(expectedResponse, response);
    }

    /**
     * 
     *
     * 
     */
    @isTest
    private static void comAdobeGraniteAuthOauthImplTwitterProviderImplTest() {
        HttpResponse res = new HttpResponse();
        res.setStatusCode(200);
        res.setStatus('OK');
        Test.setMock(HttpCalloutMock.class, new OASResponseMock(res));

        Map<String, Object> params = new Map<String, Object>{
            'post' => Boolean.getExample(),
            'apply' => Boolean.getExample(),
            'r_delete' => Boolean.getExample(),
            'action' => 'null',
            'location' => 'null',
            'propertylist' => new List<String>{''},
            'oauthProviderId' => 'null'
        };

        OASClient client;
        OASConfigmgrApi api;
        OASComAdobeGraniteAuthOauthImplTwitt response;
        OASComAdobeGraniteAuthOauthImplTwitt expectedResponse;
        String js = '';

        client = new OASClient();
        api = new OASConfigmgrApi(client);

        js = JSON.serialize(OASComAdobeGraniteAuthOauthImplTwitt.getExample());
        res.setHeader('Content-Type', 'application/json');
        res.setBody(js);
        expectedResponse = OASComAdobeGraniteAuthOauthImplTwitt.getExample();
        response = (OASComAdobeGraniteAuthOauthImplTwitt) api.comAdobeGraniteAuthOauthImplTwitterProviderImpl(params);
        System.assertEquals(expectedResponse, response);
    }

    /**
     * 
     *
     * 
     */
    @isTest
    private static void comAdobeGraniteAuthOauthProviderTest() {
        HttpResponse res = new HttpResponse();
        res.setStatusCode(200);
        res.setStatus('OK');
        Test.setMock(HttpCalloutMock.class, new OASResponseMock(res));

        Map<String, Object> params = new Map<String, Object>{
            'post' => Boolean.getExample(),
            'apply' => Boolean.getExample(),
            'r_delete' => Boolean.getExample(),
            'action' => 'null',
            'location' => 'null',
            'propertylist' => new List<String>{''},
            'oauthConfigId' => 'null',
            'oauthClientId' => 'null',
            'oauthClientSecret' => 'null',
            'oauthScope' => new List<String>{''},
            'oauthConfigProviderId' => 'null',
            'oauthCreateUsers' => Boolean.getExample(),
            'oauthUseridProperty' => 'null',
            'forceStrictUsernameMatching' => Boolean.getExample(),
            'oauthEncodeUserids' => Boolean.getExample(),
            'oauthHashUserids' => Boolean.getExample(),
            'oauthCallBackUrl' => 'null',
            'oauthAccessTokenPersist' => Boolean.getExample(),
            'oauthAccessTokenPersistCookie' => Boolean.getExample(),
            'oauthCsrfStateProtection' => Boolean.getExample(),
            'oauthRedirectRequestParams' => Boolean.getExample(),
            'oauthConfigSiblingsAllow' => Boolean.getExample()
        };

        OASClient client;
        OASConfigmgrApi api;
        OASComAdobeGraniteAuthOauthProviderI response;
        OASComAdobeGraniteAuthOauthProviderI expectedResponse;
        String js = '';

        client = new OASClient();
        api = new OASConfigmgrApi(client);

        js = JSON.serialize(OASComAdobeGraniteAuthOauthProviderI.getExample());
        res.setHeader('Content-Type', 'application/json');
        res.setBody(js);
        expectedResponse = OASComAdobeGraniteAuthOauthProviderI.getExample();
        response = (OASComAdobeGraniteAuthOauthProviderI) api.comAdobeGraniteAuthOauthProvider(params);
        System.assertEquals(expectedResponse, response);
    }

    /**
     * 
     *
     * 
     */
    @isTest
    private static void comAdobeGraniteAuthRequirementImplDefaultRequirementHandlerTest() {
        HttpResponse res = new HttpResponse();
        res.setStatusCode(200);
        res.setStatus('OK');
        Test.setMock(HttpCalloutMock.class, new OASResponseMock(res));

        Map<String, Object> params = new Map<String, Object>{
            'post' => Boolean.getExample(),
            'apply' => Boolean.getExample(),
            'r_delete' => Boolean.getExample(),
            'action' => 'null',
            'location' => 'null',
            'propertylist' => new List<String>{''},
            'supportedPaths' => new List<String>{''}
        };

        OASClient client;
        OASConfigmgrApi api;
        OASComAdobeGraniteAuthRequirementImp response;
        OASComAdobeGraniteAuthRequirementImp expectedResponse;
        String js = '';

        client = new OASClient();
        api = new OASConfigmgrApi(client);

        js = JSON.serialize(OASComAdobeGraniteAuthRequirementImp.getExample());
        res.setHeader('Content-Type', 'application/json');
        res.setBody(js);
        expectedResponse = OASComAdobeGraniteAuthRequirementImp.getExample();
        response = (OASComAdobeGraniteAuthRequirementImp) api.comAdobeGraniteAuthRequirementImplDefaultRequirementHandler(params);
        System.assertEquals(expectedResponse, response);
    }

    /**
     * 
     *
     * 
     */
    @isTest
    private static void comAdobeGraniteAuthSamlSamlAuthenticationHandlerTest() {
        HttpResponse res = new HttpResponse();
        res.setStatusCode(200);
        res.setStatus('OK');
        Test.setMock(HttpCalloutMock.class, new OASResponseMock(res));

        Map<String, Object> params = new Map<String, Object>{
            'post' => Boolean.getExample(),
            'apply' => Boolean.getExample(),
            'r_delete' => Boolean.getExample(),
            'action' => 'null',
            'location' => 'null',
            'propertylist' => new List<String>{''},
            'path' => new List<String>{''},
            'serviceRanking' => Integer.getExample(),
            'idpUrl' => 'null',
            'idpCertAlias' => 'null',
            'idpHttpRedirect' => Boolean.getExample(),
            'serviceProviderEntityId' => 'null',
            'assertionConsumerServiceURL' => 'null',
            'spPrivateKeyAlias' => 'null',
            'keyStorePassword' => 'null',
            'defaultRedirectUrl' => 'null',
            'userIDAttribute' => 'null',
            'useEncryption' => Boolean.getExample(),
            'createUser' => Boolean.getExample(),
            'userIntermediatePath' => 'null',
            'addGroupMemberships' => Boolean.getExample(),
            'groupMembershipAttribute' => 'null',
            'defaultGroups' => new List<String>{''},
            'nameIdFormat' => 'null',
            'synchronizeAttributes' => new List<String>{''},
            'handleLogout' => Boolean.getExample(),
            'logoutUrl' => 'null',
            'clockTolerance' => Integer.getExample(),
            'digestMethod' => 'null',
            'signatureMethod' => 'null',
            'identitySyncType' => 'null',
            'idpIdentifier' => 'null'
        };

        OASClient client;
        OASConfigmgrApi api;
        OASComAdobeGraniteAuthSamlSamlAuthen response;
        OASComAdobeGraniteAuthSamlSamlAuthen expectedResponse;
        String js = '';

        client = new OASClient();
        api = new OASConfigmgrApi(client);

        js = JSON.serialize(OASComAdobeGraniteAuthSamlSamlAuthen.getExample());
        res.setHeader('Content-Type', 'application/json');
        res.setBody(js);
        expectedResponse = OASComAdobeGraniteAuthSamlSamlAuthen.getExample();
        response = (OASComAdobeGraniteAuthSamlSamlAuthen) api.comAdobeGraniteAuthSamlSamlAuthenticationHandler(params);
        System.assertEquals(expectedResponse, response);
    }

    /**
     * 
     *
     * 
     */
    @isTest
    private static void comAdobeGraniteAuthSsoImplSsoAuthenticationHandlerTest() {
        HttpResponse res = new HttpResponse();
        res.setStatusCode(200);
        res.setStatus('OK');
        Test.setMock(HttpCalloutMock.class, new OASResponseMock(res));

        Map<String, Object> params = new Map<String, Object>{
            'post' => Boolean.getExample(),
            'apply' => Boolean.getExample(),
            'r_delete' => Boolean.getExample(),
            'action' => 'null',
            'location' => 'null',
            'propertylist' => new List<String>{''},
            'path' => 'null',
            'serviceRanking' => Integer.getExample(),
            'jaasControlFlag' => 'null',
            'jaasRealmName' => 'null',
            'jaasRanking' => Integer.getExample(),
            'headers' => new List<String>{''},
            'cookies' => new List<String>{''},
            'parameters' => new List<String>{''},
            'usermap' => new List<String>{''},
            'format' => 'null',
            'trustedCredentialsAttribute' => 'null'
        };

        OASClient client;
        OASConfigmgrApi api;
        OASComAdobeGraniteAuthSsoImplSsoAuth response;
        OASComAdobeGraniteAuthSsoImplSsoAuth expectedResponse;
        String js = '';

        client = new OASClient();
        api = new OASConfigmgrApi(client);

        js = JSON.serialize(OASComAdobeGraniteAuthSsoImplSsoAuth.getExample());
        res.setHeader('Content-Type', 'application/json');
        res.setBody(js);
        expectedResponse = OASComAdobeGraniteAuthSsoImplSsoAuth.getExample();
        response = (OASComAdobeGraniteAuthSsoImplSsoAuth) api.comAdobeGraniteAuthSsoImplSsoAuthenticationHandler(params);
        System.assertEquals(expectedResponse, response);
    }

    /**
     * 
     *
     * 
     */
    @isTest
    private static void comAdobeGraniteBundlesHcImplCodeCacheHealthCheckTest() {
        HttpResponse res = new HttpResponse();
        res.setStatusCode(200);
        res.setStatus('OK');
        Test.setMock(HttpCalloutMock.class, new OASResponseMock(res));

        Map<String, Object> params = new Map<String, Object>{
            'post' => Boolean.getExample(),
            'apply' => Boolean.getExample(),
            'r_delete' => Boolean.getExample(),
            'action' => 'null',
            'location' => 'null',
            'propertylist' => new List<String>{''},
            'hcTags' => new List<String>{''},
            'minimumCodeCacheSize' => Integer.getExample()
        };

        OASClient client;
        OASConfigmgrApi api;
        OASComAdobeGraniteBundlesHcImplCodeC response;
        OASComAdobeGraniteBundlesHcImplCodeC expectedResponse;
        String js = '';

        client = new OASClient();
        api = new OASConfigmgrApi(client);

        js = JSON.serialize(OASComAdobeGraniteBundlesHcImplCodeC.getExample());
        res.setHeader('Content-Type', 'application/json');
        res.setBody(js);
        expectedResponse = OASComAdobeGraniteBundlesHcImplCodeC.getExample();
        response = (OASComAdobeGraniteBundlesHcImplCodeC) api.comAdobeGraniteBundlesHcImplCodeCacheHealthCheck(params);
        System.assertEquals(expectedResponse, response);
    }

    /**
     * 
     *
     * 
     */
    @isTest
    private static void comAdobeGraniteBundlesHcImplCrxdeSupportBundleHealthCheckTest() {
        HttpResponse res = new HttpResponse();
        res.setStatusCode(200);
        res.setStatus('OK');
        Test.setMock(HttpCalloutMock.class, new OASResponseMock(res));

        Map<String, Object> params = new Map<String, Object>{
            'post' => Boolean.getExample(),
            'apply' => Boolean.getExample(),
            'r_delete' => Boolean.getExample(),
            'action' => 'null',
            'location' => 'null',
            'propertylist' => new List<String>{''},
            'hcTags' => new List<String>{''}
        };

        OASClient client;
        OASConfigmgrApi api;
        OASComAdobeGraniteBundlesHcImplCrxde response;
        OASComAdobeGraniteBundlesHcImplCrxde expectedResponse;
        String js = '';

        client = new OASClient();
        api = new OASConfigmgrApi(client);

        js = JSON.serialize(OASComAdobeGraniteBundlesHcImplCrxde.getExample());
        res.setHeader('Content-Type', 'application/json');
        res.setBody(js);
        expectedResponse = OASComAdobeGraniteBundlesHcImplCrxde.getExample();
        response = (OASComAdobeGraniteBundlesHcImplCrxde) api.comAdobeGraniteBundlesHcImplCrxdeSupportBundleHealthCheck(params);
        System.assertEquals(expectedResponse, response);
    }

    /**
     * 
     *
     * 
     */
    @isTest
    private static void comAdobeGraniteBundlesHcImplDavExBundleHealthCheckTest() {
        HttpResponse res = new HttpResponse();
        res.setStatusCode(200);
        res.setStatus('OK');
        Test.setMock(HttpCalloutMock.class, new OASResponseMock(res));

        Map<String, Object> params = new Map<String, Object>{
            'post' => Boolean.getExample(),
            'apply' => Boolean.getExample(),
            'r_delete' => Boolean.getExample(),
            'action' => 'null',
            'location' => 'null',
            'propertylist' => new List<String>{''},
            'hcTags' => new List<String>{''}
        };

        OASClient client;
        OASConfigmgrApi api;
        OASComAdobeGraniteBundlesHcImplDavEx response;
        OASComAdobeGraniteBundlesHcImplDavEx expectedResponse;
        String js = '';

        client = new OASClient();
        api = new OASConfigmgrApi(client);

        js = JSON.serialize(OASComAdobeGraniteBundlesHcImplDavEx.getExample());
        res.setHeader('Content-Type', 'application/json');
        res.setBody(js);
        expectedResponse = OASComAdobeGraniteBundlesHcImplDavEx.getExample();
        response = (OASComAdobeGraniteBundlesHcImplDavEx) api.comAdobeGraniteBundlesHcImplDavExBundleHealthCheck(params);
        System.assertEquals(expectedResponse, response);
    }

    /**
     * 
     *
     * 
     */
    @isTest
    private static void comAdobeGraniteBundlesHcImplInactiveBundlesHealthCheckTest() {
        HttpResponse res = new HttpResponse();
        res.setStatusCode(200);
        res.setStatus('OK');
        Test.setMock(HttpCalloutMock.class, new OASResponseMock(res));

        Map<String, Object> params = new Map<String, Object>{
            'post' => Boolean.getExample(),
            'apply' => Boolean.getExample(),
            'r_delete' => Boolean.getExample(),
            'action' => 'null',
            'location' => 'null',
            'propertylist' => new List<String>{''},
            'hcTags' => new List<String>{''},
            'ignoredBundles' => new List<String>{''}
        };

        OASClient client;
        OASConfigmgrApi api;
        OASComAdobeGraniteBundlesHcImplInact response;
        OASComAdobeGraniteBundlesHcImplInact expectedResponse;
        String js = '';

        client = new OASClient();
        api = new OASConfigmgrApi(client);

        js = JSON.serialize(OASComAdobeGraniteBundlesHcImplInact.getExample());
        res.setHeader('Content-Type', 'application/json');
        res.setBody(js);
        expectedResponse = OASComAdobeGraniteBundlesHcImplInact.getExample();
        response = (OASComAdobeGraniteBundlesHcImplInact) api.comAdobeGraniteBundlesHcImplInactiveBundlesHealthCheck(params);
        System.assertEquals(expectedResponse, response);
    }

    /**
     * 
     *
     * 
     */
    @isTest
    private static void comAdobeGraniteBundlesHcImplJobsHealthCheckTest() {
        HttpResponse res = new HttpResponse();
        res.setStatusCode(200);
        res.setStatus('OK');
        Test.setMock(HttpCalloutMock.class, new OASResponseMock(res));

        Map<String, Object> params = new Map<String, Object>{
            'post' => Boolean.getExample(),
            'apply' => Boolean.getExample(),
            'r_delete' => Boolean.getExample(),
            'action' => 'null',
            'location' => 'null',
            'propertylist' => new List<String>{''},
            'hcTags' => new List<String>{''},
            'maxQueuedJobs' => Integer.getExample()
        };

        OASClient client;
        OASConfigmgrApi api;
        OASComAdobeGraniteBundlesHcImplJobsH response;
        OASComAdobeGraniteBundlesHcImplJobsH expectedResponse;
        String js = '';

        client = new OASClient();
        api = new OASConfigmgrApi(client);

        js = JSON.serialize(OASComAdobeGraniteBundlesHcImplJobsH.getExample());
        res.setHeader('Content-Type', 'application/json');
        res.setBody(js);
        expectedResponse = OASComAdobeGraniteBundlesHcImplJobsH.getExample();
        response = (OASComAdobeGraniteBundlesHcImplJobsH) api.comAdobeGraniteBundlesHcImplJobsHealthCheck(params);
        System.assertEquals(expectedResponse, response);
    }

    /**
     * 
     *
     * 
     */
    @isTest
    private static void comAdobeGraniteBundlesHcImplSlingGetServletHealthCheckTest() {
        HttpResponse res = new HttpResponse();
        res.setStatusCode(200);
        res.setStatus('OK');
        Test.setMock(HttpCalloutMock.class, new OASResponseMock(res));

        Map<String, Object> params = new Map<String, Object>{
            'post' => Boolean.getExample(),
            'apply' => Boolean.getExample(),
            'r_delete' => Boolean.getExample(),
            'action' => 'null',
            'location' => 'null',
            'propertylist' => new List<String>{''},
            'hcTags' => new List<String>{''}
        };

        OASClient client;
        OASConfigmgrApi api;
        OASComAdobeGraniteBundlesHcImplSling response;
        OASComAdobeGraniteBundlesHcImplSling expectedResponse;
        String js = '';

        client = new OASClient();
        api = new OASConfigmgrApi(client);

        js = JSON.serialize(OASComAdobeGraniteBundlesHcImplSling.getExample());
        res.setHeader('Content-Type', 'application/json');
        res.setBody(js);
        expectedResponse = OASComAdobeGraniteBundlesHcImplSling.getExample();
        response = (OASComAdobeGraniteBundlesHcImplSling) api.comAdobeGraniteBundlesHcImplSlingGetServletHealthCheck(params);
        System.assertEquals(expectedResponse, response);
    }

    /**
     * 
     *
     * 
     */
    @isTest
    private static void comAdobeGraniteBundlesHcImplSlingJavaScriptHandlerHealthCheckTest() {
        HttpResponse res = new HttpResponse();
        res.setStatusCode(200);
        res.setStatus('OK');
        Test.setMock(HttpCalloutMock.class, new OASResponseMock(res));

        Map<String, Object> params = new Map<String, Object>{
            'post' => Boolean.getExample(),
            'apply' => Boolean.getExample(),
            'r_delete' => Boolean.getExample(),
            'action' => 'null',
            'location' => 'null',
            'propertylist' => new List<String>{''},
            'hcTags' => new List<String>{''}
        };

        OASClient client;
        OASConfigmgrApi api;
        OASComAdobeGraniteBundlesHcImplSling response;
        OASComAdobeGraniteBundlesHcImplSling expectedResponse;
        String js = '';

        client = new OASClient();
        api = new OASConfigmgrApi(client);

        js = JSON.serialize(OASComAdobeGraniteBundlesHcImplSling.getExample());
        res.setHeader('Content-Type', 'application/json');
        res.setBody(js);
        expectedResponse = OASComAdobeGraniteBundlesHcImplSling.getExample();
        response = (OASComAdobeGraniteBundlesHcImplSling) api.comAdobeGraniteBundlesHcImplSlingJavaScriptHandlerHealthCheck(params);
        System.assertEquals(expectedResponse, response);
    }

    /**
     * 
     *
     * 
     */
    @isTest
    private static void comAdobeGraniteBundlesHcImplSlingJspScriptHandlerHealthCheckTest() {
        HttpResponse res = new HttpResponse();
        res.setStatusCode(200);
        res.setStatus('OK');
        Test.setMock(HttpCalloutMock.class, new OASResponseMock(res));

        Map<String, Object> params = new Map<String, Object>{
            'post' => Boolean.getExample(),
            'apply' => Boolean.getExample(),
            'r_delete' => Boolean.getExample(),
            'action' => 'null',
            'location' => 'null',
            'propertylist' => new List<String>{''},
            'hcTags' => new List<String>{''}
        };

        OASClient client;
        OASConfigmgrApi api;
        OASComAdobeGraniteBundlesHcImplSling response;
        OASComAdobeGraniteBundlesHcImplSling expectedResponse;
        String js = '';

        client = new OASClient();
        api = new OASConfigmgrApi(client);

        js = JSON.serialize(OASComAdobeGraniteBundlesHcImplSling.getExample());
        res.setHeader('Content-Type', 'application/json');
        res.setBody(js);
        expectedResponse = OASComAdobeGraniteBundlesHcImplSling.getExample();
        response = (OASComAdobeGraniteBundlesHcImplSling) api.comAdobeGraniteBundlesHcImplSlingJspScriptHandlerHealthCheck(params);
        System.assertEquals(expectedResponse, response);
    }

    /**
     * 
     *
     * 
     */
    @isTest
    private static void comAdobeGraniteBundlesHcImplSlingReferrerFilterHealthCheckTest() {
        HttpResponse res = new HttpResponse();
        res.setStatusCode(200);
        res.setStatus('OK');
        Test.setMock(HttpCalloutMock.class, new OASResponseMock(res));

        Map<String, Object> params = new Map<String, Object>{
            'post' => Boolean.getExample(),
            'apply' => Boolean.getExample(),
            'r_delete' => Boolean.getExample(),
            'action' => 'null',
            'location' => 'null',
            'propertylist' => new List<String>{''},
            'hcTags' => new List<String>{''}
        };

        OASClient client;
        OASConfigmgrApi api;
        OASComAdobeGraniteBundlesHcImplSling response;
        OASComAdobeGraniteBundlesHcImplSling expectedResponse;
        String js = '';

        client = new OASClient();
        api = new OASConfigmgrApi(client);

        js = JSON.serialize(OASComAdobeGraniteBundlesHcImplSling.getExample());
        res.setHeader('Content-Type', 'application/json');
        res.setBody(js);
        expectedResponse = OASComAdobeGraniteBundlesHcImplSling.getExample();
        response = (OASComAdobeGraniteBundlesHcImplSling) api.comAdobeGraniteBundlesHcImplSlingReferrerFilterHealthCheck(params);
        System.assertEquals(expectedResponse, response);
    }

    /**
     * 
     *
     * 
     */
    @isTest
    private static void comAdobeGraniteBundlesHcImplWebDavBundleHealthCheckTest() {
        HttpResponse res = new HttpResponse();
        res.setStatusCode(200);
        res.setStatus('OK');
        Test.setMock(HttpCalloutMock.class, new OASResponseMock(res));

        Map<String, Object> params = new Map<String, Object>{
            'post' => Boolean.getExample(),
            'apply' => Boolean.getExample(),
            'r_delete' => Boolean.getExample(),
            'action' => 'null',
            'location' => 'null',
            'propertylist' => new List<String>{''},
            'hcTags' => new List<String>{''}
        };

        OASClient client;
        OASConfigmgrApi api;
        OASComAdobeGraniteBundlesHcImplWebDa response;
        OASComAdobeGraniteBundlesHcImplWebDa expectedResponse;
        String js = '';

        client = new OASClient();
        api = new OASConfigmgrApi(client);

        js = JSON.serialize(OASComAdobeGraniteBundlesHcImplWebDa.getExample());
        res.setHeader('Content-Type', 'application/json');
        res.setBody(js);
        expectedResponse = OASComAdobeGraniteBundlesHcImplWebDa.getExample();
        response = (OASComAdobeGraniteBundlesHcImplWebDa) api.comAdobeGraniteBundlesHcImplWebDavBundleHealthCheck(params);
        System.assertEquals(expectedResponse, response);
    }

    /**
     * 
     *
     * 
     */
    @isTest
    private static void comAdobeGraniteCommentsInternalCommentReplicationContentFilterFacTest() {
        HttpResponse res = new HttpResponse();
        res.setStatusCode(200);
        res.setStatus('OK');
        Test.setMock(HttpCalloutMock.class, new OASResponseMock(res));

        Map<String, Object> params = new Map<String, Object>{
            'post' => Boolean.getExample(),
            'apply' => Boolean.getExample(),
            'r_delete' => Boolean.getExample(),
            'action' => 'null',
            'location' => 'null',
            'propertylist' => new List<String>{''},
            'replicateCommentResourceTypes' => new List<String>{''}
        };

        OASClient client;
        OASConfigmgrApi api;
        OASComAdobeGraniteCommentsInternalCo response;
        OASComAdobeGraniteCommentsInternalCo expectedResponse;
        String js = '';

        client = new OASClient();
        api = new OASConfigmgrApi(client);

        js = JSON.serialize(OASComAdobeGraniteCommentsInternalCo.getExample());
        res.setHeader('Content-Type', 'application/json');
        res.setBody(js);
        expectedResponse = OASComAdobeGraniteCommentsInternalCo.getExample();
        response = (OASComAdobeGraniteCommentsInternalCo) api.comAdobeGraniteCommentsInternalCommentReplicationContentFilterFac(params);
        System.assertEquals(expectedResponse, response);
    }

    /**
     * 
     *
     * 
     */
    @isTest
    private static void comAdobeGraniteCompatrouterImplCompatSwitchingServiceImplTest() {
        HttpResponse res = new HttpResponse();
        res.setStatusCode(200);
        res.setStatus('OK');
        Test.setMock(HttpCalloutMock.class, new OASResponseMock(res));

        Map<String, Object> params = new Map<String, Object>{
            'post' => Boolean.getExample(),
            'apply' => Boolean.getExample(),
            'r_delete' => Boolean.getExample(),
            'action' => 'null',
            'location' => 'null',
            'propertylist' => new List<String>{''},
            'compatgroups' => new List<String>{''},
            'enabled' => Boolean.getExample()
        };

        OASClient client;
        OASConfigmgrApi api;
        OASComAdobeGraniteCompatrouterImplCo response;
        OASComAdobeGraniteCompatrouterImplCo expectedResponse;
        String js = '';

        client = new OASClient();
        api = new OASConfigmgrApi(client);

        js = JSON.serialize(OASComAdobeGraniteCompatrouterImplCo.getExample());
        res.setHeader('Content-Type', 'application/json');
        res.setBody(js);
        expectedResponse = OASComAdobeGraniteCompatrouterImplCo.getExample();
        response = (OASComAdobeGraniteCompatrouterImplCo) api.comAdobeGraniteCompatrouterImplCompatSwitchingServiceImpl(params);
        System.assertEquals(expectedResponse, response);
    }

    /**
     * 
     *
     * 
     */
    @isTest
    private static void comAdobeGraniteCompatrouterImplRoutingConfigTest() {
        HttpResponse res = new HttpResponse();
        res.setStatusCode(200);
        res.setStatus('OK');
        Test.setMock(HttpCalloutMock.class, new OASResponseMock(res));

        Map<String, Object> params = new Map<String, Object>{
            'post' => Boolean.getExample(),
            'apply' => Boolean.getExample(),
            'r_delete' => Boolean.getExample(),
            'action' => 'null',
            'location' => 'null',
            'propertylist' => new List<String>{''},
            'id' => 'null',
            'compatPath' => 'null',
            'newPath' => 'null'
        };

        OASClient client;
        OASConfigmgrApi api;
        OASComAdobeGraniteCompatrouterImplRo response;
        OASComAdobeGraniteCompatrouterImplRo expectedResponse;
        String js = '';

        client = new OASClient();
        api = new OASConfigmgrApi(client);

        js = JSON.serialize(OASComAdobeGraniteCompatrouterImplRo.getExample());
        res.setHeader('Content-Type', 'application/json');
        res.setBody(js);
        expectedResponse = OASComAdobeGraniteCompatrouterImplRo.getExample();
        response = (OASComAdobeGraniteCompatrouterImplRo) api.comAdobeGraniteCompatrouterImplRoutingConfig(params);
        System.assertEquals(expectedResponse, response);
    }

    /**
     * 
     *
     * 
     */
    @isTest
    private static void comAdobeGraniteCompatrouterImplSwitchMappingConfigTest() {
        HttpResponse res = new HttpResponse();
        res.setStatusCode(200);
        res.setStatus('OK');
        Test.setMock(HttpCalloutMock.class, new OASResponseMock(res));

        Map<String, Object> params = new Map<String, Object>{
            'post' => Boolean.getExample(),
            'apply' => Boolean.getExample(),
            'r_delete' => Boolean.getExample(),
            'action' => 'null',
            'location' => 'null',
            'propertylist' => new List<String>{''},
            'r_group' => 'null',
            'ids' => new List<String>{''}
        };

        OASClient client;
        OASConfigmgrApi api;
        OASComAdobeGraniteCompatrouterImplSw response;
        OASComAdobeGraniteCompatrouterImplSw expectedResponse;
        String js = '';

        client = new OASClient();
        api = new OASConfigmgrApi(client);

        js = JSON.serialize(OASComAdobeGraniteCompatrouterImplSw.getExample());
        res.setHeader('Content-Type', 'application/json');
        res.setBody(js);
        expectedResponse = OASComAdobeGraniteCompatrouterImplSw.getExample();
        response = (OASComAdobeGraniteCompatrouterImplSw) api.comAdobeGraniteCompatrouterImplSwitchMappingConfig(params);
        System.assertEquals(expectedResponse, response);
    }

    /**
     * 
     *
     * 
     */
    @isTest
    private static void comAdobeGraniteConfImplRuntimeAwareConfigurationResourceResolvingTest() {
        HttpResponse res = new HttpResponse();
        res.setStatusCode(200);
        res.setStatus('OK');
        Test.setMock(HttpCalloutMock.class, new OASResponseMock(res));

        Map<String, Object> params = new Map<String, Object>{
            'post' => Boolean.getExample(),
            'apply' => Boolean.getExample(),
            'r_delete' => Boolean.getExample(),
            'action' => 'null',
            'location' => 'null',
            'propertylist' => new List<String>{''},
            'enabled' => Boolean.getExample(),
            'fallbackPaths' => new List<String>{''}
        };

        OASClient client;
        OASConfigmgrApi api;
        OASComAdobeGraniteConfImplRuntimeAwa response;
        OASComAdobeGraniteConfImplRuntimeAwa expectedResponse;
        String js = '';

        client = new OASClient();
        api = new OASConfigmgrApi(client);

        js = JSON.serialize(OASComAdobeGraniteConfImplRuntimeAwa.getExample());
        res.setHeader('Content-Type', 'application/json');
        res.setBody(js);
        expectedResponse = OASComAdobeGraniteConfImplRuntimeAwa.getExample();
        response = (OASComAdobeGraniteConfImplRuntimeAwa) api.comAdobeGraniteConfImplRuntimeAwareConfigurationResourceResolving(params);
        System.assertEquals(expectedResponse, response);
    }

    /**
     * 
     *
     * 
     */
    @isTest
    private static void comAdobeGraniteContexthubImplContextHubImplTest() {
        HttpResponse res = new HttpResponse();
        res.setStatusCode(200);
        res.setStatus('OK');
        Test.setMock(HttpCalloutMock.class, new OASResponseMock(res));

        Map<String, Object> params = new Map<String, Object>{
            'post' => Boolean.getExample(),
            'apply' => Boolean.getExample(),
            'r_delete' => Boolean.getExample(),
            'action' => 'null',
            'location' => 'null',
            'propertylist' => new List<String>{''},
            'comAdobeGraniteContexthubSilentMode' => Boolean.getExample(),
            'comAdobeGraniteContexthubShowUi' => Boolean.getExample()
        };

        OASClient client;
        OASConfigmgrApi api;
        OASComAdobeGraniteContexthubImplCont response;
        OASComAdobeGraniteContexthubImplCont expectedResponse;
        String js = '';

        client = new OASClient();
        api = new OASConfigmgrApi(client);

        js = JSON.serialize(OASComAdobeGraniteContexthubImplCont.getExample());
        res.setHeader('Content-Type', 'application/json');
        res.setBody(js);
        expectedResponse = OASComAdobeGraniteContexthubImplCont.getExample();
        response = (OASComAdobeGraniteContexthubImplCont) api.comAdobeGraniteContexthubImplContextHubImpl(params);
        System.assertEquals(expectedResponse, response);
    }

    /**
     * 
     *
     * 
     */
    @isTest
    private static void comAdobeGraniteCorsImplCORSPolicyImplTest() {
        HttpResponse res = new HttpResponse();
        res.setStatusCode(200);
        res.setStatus('OK');
        Test.setMock(HttpCalloutMock.class, new OASResponseMock(res));

        Map<String, Object> params = new Map<String, Object>{
            'post' => Boolean.getExample(),
            'apply' => Boolean.getExample(),
            'r_delete' => Boolean.getExample(),
            'action' => 'null',
            'location' => 'null',
            'propertylist' => new List<String>{''},
            'alloworigin' => new List<String>{''},
            'alloworiginregexp' => new List<String>{''},
            'allowedpaths' => new List<String>{''},
            'exposedheaders' => new List<String>{''},
            'maxage' => Integer.getExample(),
            'supportedheaders' => new List<String>{''},
            'supportedmethods' => new List<String>{''},
            'supportscredentials' => Boolean.getExample()
        };

        OASClient client;
        OASConfigmgrApi api;
        OASComAdobeGraniteCorsImplCORSPolicy response;
        OASComAdobeGraniteCorsImplCORSPolicy expectedResponse;
        String js = '';

        client = new OASClient();
        api = new OASConfigmgrApi(client);

        js = JSON.serialize(OASComAdobeGraniteCorsImplCORSPolicy.getExample());
        res.setHeader('Content-Type', 'application/json');
        res.setBody(js);
        expectedResponse = OASComAdobeGraniteCorsImplCORSPolicy.getExample();
        response = (OASComAdobeGraniteCorsImplCORSPolicy) api.comAdobeGraniteCorsImplCORSPolicyImpl(params);
        System.assertEquals(expectedResponse, response);
    }

    /**
     * 
     *
     * 
     */
    @isTest
    private static void comAdobeGraniteCsrfImplCSRFFilterTest() {
        HttpResponse res = new HttpResponse();
        res.setStatusCode(200);
        res.setStatus('OK');
        Test.setMock(HttpCalloutMock.class, new OASResponseMock(res));

        Map<String, Object> params = new Map<String, Object>{
            'post' => Boolean.getExample(),
            'apply' => Boolean.getExample(),
            'r_delete' => Boolean.getExample(),
            'action' => 'null',
            'location' => 'null',
            'propertylist' => new List<String>{''},
            'filterMethods' => new List<String>{''},
            'filterEnableSafeUserAgents' => Boolean.getExample(),
            'filterSafeUserAgents' => new List<String>{''},
            'filterExcludedPaths' => new List<String>{''}
        };

        OASClient client;
        OASConfigmgrApi api;
        OASComAdobeGraniteCsrfImplCSRFFilter response;
        OASComAdobeGraniteCsrfImplCSRFFilter expectedResponse;
        String js = '';

        client = new OASClient();
        api = new OASConfigmgrApi(client);

        js = JSON.serialize(OASComAdobeGraniteCsrfImplCSRFFilter.getExample());
        res.setHeader('Content-Type', 'application/json');
        res.setBody(js);
        expectedResponse = OASComAdobeGraniteCsrfImplCSRFFilter.getExample();
        response = (OASComAdobeGraniteCsrfImplCSRFFilter) api.comAdobeGraniteCsrfImplCSRFFilter(params);
        System.assertEquals(expectedResponse, response);
    }

    /**
     * 
     *
     * 
     */
    @isTest
    private static void comAdobeGraniteCsrfImplCSRFServletTest() {
        HttpResponse res = new HttpResponse();
        res.setStatusCode(200);
        res.setStatus('OK');
        Test.setMock(HttpCalloutMock.class, new OASResponseMock(res));

        Map<String, Object> params = new Map<String, Object>{
            'post' => Boolean.getExample(),
            'apply' => Boolean.getExample(),
            'r_delete' => Boolean.getExample(),
            'action' => 'null',
            'location' => 'null',
            'propertylist' => new List<String>{''},
            'csrfTokenExpiresIn' => Integer.getExample(),
            'slingAuthRequirements' => 'null'
        };

        OASClient client;
        OASConfigmgrApi api;
        OASComAdobeGraniteCsrfImplCSRFServle response;
        OASComAdobeGraniteCsrfImplCSRFServle expectedResponse;
        String js = '';

        client = new OASClient();
        api = new OASConfigmgrApi(client);

        js = JSON.serialize(OASComAdobeGraniteCsrfImplCSRFServle.getExample());
        res.setHeader('Content-Type', 'application/json');
        res.setBody(js);
        expectedResponse = OASComAdobeGraniteCsrfImplCSRFServle.getExample();
        response = (OASComAdobeGraniteCsrfImplCSRFServle) api.comAdobeGraniteCsrfImplCSRFServlet(params);
        System.assertEquals(expectedResponse, response);
    }

    /**
     * 
     *
     * 
     */
    @isTest
    private static void comAdobeGraniteDistributionCoreImplCryptoDistributionTransportSeTest() {
        HttpResponse res = new HttpResponse();
        res.setStatusCode(200);
        res.setStatus('OK');
        Test.setMock(HttpCalloutMock.class, new OASResponseMock(res));

        Map<String, Object> params = new Map<String, Object>{
            'post' => Boolean.getExample(),
            'apply' => Boolean.getExample(),
            'r_delete' => Boolean.getExample(),
            'action' => 'null',
            'location' => 'null',
            'propertylist' => new List<String>{''},
            'name' => 'null',
            'username' => 'null',
            'encryptedPassword' => 'null'
        };

        OASClient client;
        OASConfigmgrApi api;
        OASComAdobeGraniteDistributionCoreIm response;
        OASComAdobeGraniteDistributionCoreIm expectedResponse;
        String js = '';

        client = new OASClient();
        api = new OASConfigmgrApi(client);

        js = JSON.serialize(OASComAdobeGraniteDistributionCoreIm.getExample());
        res.setHeader('Content-Type', 'application/json');
        res.setBody(js);
        expectedResponse = OASComAdobeGraniteDistributionCoreIm.getExample();
        response = (OASComAdobeGraniteDistributionCoreIm) api.comAdobeGraniteDistributionCoreImplCryptoDistributionTransportSe(params);
        System.assertEquals(expectedResponse, response);
    }

    /**
     * 
     *
     * 
     */
    @isTest
    private static void comAdobeGraniteDistributionCoreImplDiffDiffChangesObserverTest() {
        HttpResponse res = new HttpResponse();
        res.setStatusCode(200);
        res.setStatus('OK');
        Test.setMock(HttpCalloutMock.class, new OASResponseMock(res));

        Map<String, Object> params = new Map<String, Object>{
            'post' => Boolean.getExample(),
            'apply' => Boolean.getExample(),
            'r_delete' => Boolean.getExample(),
            'action' => 'null',
            'location' => 'null',
            'propertylist' => new List<String>{''},
            'enabled' => Boolean.getExample(),
            'agentName' => 'null',
            'diffPath' => 'null',
            'observedPath' => 'null',
            'serviceName' => 'null',
            'propertyNames' => 'null',
            'distributionDelay' => Integer.getExample(),
            'serviceUserTarget' => 'null'
        };

        OASClient client;
        OASConfigmgrApi api;
        OASComAdobeGraniteDistributionCoreIm response;
        OASComAdobeGraniteDistributionCoreIm expectedResponse;
        String js = '';

        client = new OASClient();
        api = new OASConfigmgrApi(client);

        js = JSON.serialize(OASComAdobeGraniteDistributionCoreIm.getExample());
        res.setHeader('Content-Type', 'application/json');
        res.setBody(js);
        expectedResponse = OASComAdobeGraniteDistributionCoreIm.getExample();
        response = (OASComAdobeGraniteDistributionCoreIm) api.comAdobeGraniteDistributionCoreImplDiffDiffChangesObserver(params);
        System.assertEquals(expectedResponse, response);
    }

    /**
     * 
     *
     * 
     */
    @isTest
    private static void comAdobeGraniteDistributionCoreImplDiffDiffEventListenerTest() {
        HttpResponse res = new HttpResponse();
        res.setStatusCode(200);
        res.setStatus('OK');
        Test.setMock(HttpCalloutMock.class, new OASResponseMock(res));

        Map<String, Object> params = new Map<String, Object>{
            'post' => Boolean.getExample(),
            'apply' => Boolean.getExample(),
            'r_delete' => Boolean.getExample(),
            'action' => 'null',
            'location' => 'null',
            'propertylist' => new List<String>{''},
            'diffPath' => 'null',
            'serviceName' => 'null',
            'serviceUserTarget' => 'null'
        };

        OASClient client;
        OASConfigmgrApi api;
        OASComAdobeGraniteDistributionCoreIm response;
        OASComAdobeGraniteDistributionCoreIm expectedResponse;
        String js = '';

        client = new OASClient();
        api = new OASConfigmgrApi(client);

        js = JSON.serialize(OASComAdobeGraniteDistributionCoreIm.getExample());
        res.setHeader('Content-Type', 'application/json');
        res.setBody(js);
        expectedResponse = OASComAdobeGraniteDistributionCoreIm.getExample();
        response = (OASComAdobeGraniteDistributionCoreIm) api.comAdobeGraniteDistributionCoreImplDiffDiffEventListener(params);
        System.assertEquals(expectedResponse, response);
    }

    /**
     * 
     *
     * 
     */
    @isTest
    private static void comAdobeGraniteDistributionCoreImplDistributionToReplicationEvenTest() {
        HttpResponse res = new HttpResponse();
        res.setStatusCode(200);
        res.setStatus('OK');
        Test.setMock(HttpCalloutMock.class, new OASResponseMock(res));

        Map<String, Object> params = new Map<String, Object>{
            'post' => Boolean.getExample(),
            'apply' => Boolean.getExample(),
            'r_delete' => Boolean.getExample(),
            'action' => 'null',
            'location' => 'null',
            'propertylist' => new List<String>{''},
            'importerName' => new List<String>{''}
        };

        OASClient client;
        OASConfigmgrApi api;
        OASComAdobeGraniteDistributionCoreIm response;
        OASComAdobeGraniteDistributionCoreIm expectedResponse;
        String js = '';

        client = new OASClient();
        api = new OASConfigmgrApi(client);

        js = JSON.serialize(OASComAdobeGraniteDistributionCoreIm.getExample());
        res.setHeader('Content-Type', 'application/json');
        res.setBody(js);
        expectedResponse = OASComAdobeGraniteDistributionCoreIm.getExample();
        response = (OASComAdobeGraniteDistributionCoreIm) api.comAdobeGraniteDistributionCoreImplDistributionToReplicationEven(params);
        System.assertEquals(expectedResponse, response);
    }

    /**
     * 
     *
     * 
     */
    @isTest
    private static void comAdobeGraniteDistributionCoreImplReplicationAdaptersReplicatTest() {
        HttpResponse res = new HttpResponse();
        res.setStatusCode(200);
        res.setStatus('OK');
        Test.setMock(HttpCalloutMock.class, new OASResponseMock(res));

        Map<String, Object> params = new Map<String, Object>{
            'post' => Boolean.getExample(),
            'apply' => Boolean.getExample(),
            'r_delete' => Boolean.getExample(),
            'action' => 'null',
            'location' => 'null',
            'propertylist' => new List<String>{''},
            'providerName' => 'null',
            'forwardRequests' => Boolean.getExample()
        };

        OASClient client;
        OASConfigmgrApi api;
        OASComAdobeGraniteDistributionCoreIm response;
        OASComAdobeGraniteDistributionCoreIm expectedResponse;
        String js = '';

        client = new OASClient();
        api = new OASConfigmgrApi(client);

        js = JSON.serialize(OASComAdobeGraniteDistributionCoreIm.getExample());
        res.setHeader('Content-Type', 'application/json');
        res.setBody(js);
        expectedResponse = OASComAdobeGraniteDistributionCoreIm.getExample();
        response = (OASComAdobeGraniteDistributionCoreIm) api.comAdobeGraniteDistributionCoreImplReplicationAdaptersReplicat(params);
        System.assertEquals(expectedResponse, response);
    }

    /**
     * 
     *
     * 
     */
    @isTest
    private static void comAdobeGraniteDistributionCoreImplReplicationDistributionTransTest() {
        HttpResponse res = new HttpResponse();
        res.setStatusCode(200);
        res.setStatus('OK');
        Test.setMock(HttpCalloutMock.class, new OASResponseMock(res));

        Map<String, Object> params = new Map<String, Object>{
            'post' => Boolean.getExample(),
            'apply' => Boolean.getExample(),
            'r_delete' => Boolean.getExample(),
            'action' => 'null',
            'location' => 'null',
            'propertylist' => new List<String>{''},
            'forwardRequests' => Boolean.getExample()
        };

        OASClient client;
        OASConfigmgrApi api;
        OASComAdobeGraniteDistributionCoreIm response;
        OASComAdobeGraniteDistributionCoreIm expectedResponse;
        String js = '';

        client = new OASClient();
        api = new OASConfigmgrApi(client);

        js = JSON.serialize(OASComAdobeGraniteDistributionCoreIm.getExample());
        res.setHeader('Content-Type', 'application/json');
        res.setBody(js);
        expectedResponse = OASComAdobeGraniteDistributionCoreIm.getExample();
        response = (OASComAdobeGraniteDistributionCoreIm) api.comAdobeGraniteDistributionCoreImplReplicationDistributionTrans(params);
        System.assertEquals(expectedResponse, response);
    }

    /**
     * 
     *
     * 
     */
    @isTest
    private static void comAdobeGraniteDistributionCoreImplTransportAccessTokenDistribuTest() {
        HttpResponse res = new HttpResponse();
        res.setStatusCode(200);
        res.setStatus('OK');
        Test.setMock(HttpCalloutMock.class, new OASResponseMock(res));

        Map<String, Object> params = new Map<String, Object>{
            'post' => Boolean.getExample(),
            'apply' => Boolean.getExample(),
            'r_delete' => Boolean.getExample(),
            'action' => 'null',
            'location' => 'null',
            'propertylist' => new List<String>{''},
            'name' => 'null',
            'serviceName' => 'null',
            'userId' => 'null',
            'accessTokenProviderTarget' => 'null'
        };

        OASClient client;
        OASConfigmgrApi api;
        OASComAdobeGraniteDistributionCoreIm response;
        OASComAdobeGraniteDistributionCoreIm expectedResponse;
        String js = '';

        client = new OASClient();
        api = new OASConfigmgrApi(client);

        js = JSON.serialize(OASComAdobeGraniteDistributionCoreIm.getExample());
        res.setHeader('Content-Type', 'application/json');
        res.setBody(js);
        expectedResponse = OASComAdobeGraniteDistributionCoreIm.getExample();
        response = (OASComAdobeGraniteDistributionCoreIm) api.comAdobeGraniteDistributionCoreImplTransportAccessTokenDistribu(params);
        System.assertEquals(expectedResponse, response);
    }

    /**
     * 
     *
     * 
     */
    @isTest
    private static void comAdobeGraniteFragsImplCheckHttpHeaderFlagTest() {
        HttpResponse res = new HttpResponse();
        res.setStatusCode(200);
        res.setStatus('OK');
        Test.setMock(HttpCalloutMock.class, new OASResponseMock(res));

        Map<String, Object> params = new Map<String, Object>{
            'post' => Boolean.getExample(),
            'apply' => Boolean.getExample(),
            'r_delete' => Boolean.getExample(),
            'action' => 'null',
            'location' => 'null',
            'propertylist' => new List<String>{''},
            'featureName' => 'null',
            'featureDescription' => 'null',
            'httpHeaderName' => 'null',
            'httpHeaderValuepattern' => 'null'
        };

        OASClient client;
        OASConfigmgrApi api;
        OASComAdobeGraniteFragsImplCheckHttp response;
        OASComAdobeGraniteFragsImplCheckHttp expectedResponse;
        String js = '';

        client = new OASClient();
        api = new OASConfigmgrApi(client);

        js = JSON.serialize(OASComAdobeGraniteFragsImplCheckHttp.getExample());
        res.setHeader('Content-Type', 'application/json');
        res.setBody(js);
        expectedResponse = OASComAdobeGraniteFragsImplCheckHttp.getExample();
        response = (OASComAdobeGraniteFragsImplCheckHttp) api.comAdobeGraniteFragsImplCheckHttpHeaderFlag(params);
        System.assertEquals(expectedResponse, response);
    }

    /**
     * 
     *
     * 
     */
    @isTest
    private static void comAdobeGraniteFragsImplRandomFeatureTest() {
        HttpResponse res = new HttpResponse();
        res.setStatusCode(200);
        res.setStatus('OK');
        Test.setMock(HttpCalloutMock.class, new OASResponseMock(res));

        Map<String, Object> params = new Map<String, Object>{
            'post' => Boolean.getExample(),
            'apply' => Boolean.getExample(),
            'r_delete' => Boolean.getExample(),
            'action' => 'null',
            'location' => 'null',
            'propertylist' => new List<String>{''},
            'featureName' => 'null',
            'featureDescription' => 'null',
            'activePercentage' => 'null',
            'cookieName' => 'null',
            'cookieMaxAge' => Integer.getExample()
        };

        OASClient client;
        OASConfigmgrApi api;
        OASComAdobeGraniteFragsImplRandomFea response;
        OASComAdobeGraniteFragsImplRandomFea expectedResponse;
        String js = '';

        client = new OASClient();
        api = new OASConfigmgrApi(client);

        js = JSON.serialize(OASComAdobeGraniteFragsImplRandomFea.getExample());
        res.setHeader('Content-Type', 'application/json');
        res.setBody(js);
        expectedResponse = OASComAdobeGraniteFragsImplRandomFea.getExample();
        response = (OASComAdobeGraniteFragsImplRandomFea) api.comAdobeGraniteFragsImplRandomFeature(params);
        System.assertEquals(expectedResponse, response);
    }

    /**
     * 
     *
     * 
     */
    @isTest
    private static void comAdobeGraniteHttpcacheFileFileCacheStoreTest() {
        HttpResponse res = new HttpResponse();
        res.setStatusCode(200);
        res.setStatus('OK');
        Test.setMock(HttpCalloutMock.class, new OASResponseMock(res));

        Map<String, Object> params = new Map<String, Object>{
            'post' => Boolean.getExample(),
            'apply' => Boolean.getExample(),
            'r_delete' => Boolean.getExample(),
            'action' => 'null',
            'location' => 'null',
            'propertylist' => new List<String>{''},
            'comAdobeGraniteHttpcacheFileDocumentRoot' => 'null',
            'comAdobeGraniteHttpcacheFileIncludeHost' => 'null'
        };

        OASClient client;
        OASConfigmgrApi api;
        OASComAdobeGraniteHttpcacheFileFileC response;
        OASComAdobeGraniteHttpcacheFileFileC expectedResponse;
        String js = '';

        client = new OASClient();
        api = new OASConfigmgrApi(client);

        js = JSON.serialize(OASComAdobeGraniteHttpcacheFileFileC.getExample());
        res.setHeader('Content-Type', 'application/json');
        res.setBody(js);
        expectedResponse = OASComAdobeGraniteHttpcacheFileFileC.getExample();
        response = (OASComAdobeGraniteHttpcacheFileFileC) api.comAdobeGraniteHttpcacheFileFileCacheStore(params);
        System.assertEquals(expectedResponse, response);
    }

    /**
     * 
     *
     * 
     */
    @isTest
    private static void comAdobeGraniteHttpcacheImplOuterCacheFilterTest() {
        HttpResponse res = new HttpResponse();
        res.setStatusCode(200);
        res.setStatus('OK');
        Test.setMock(HttpCalloutMock.class, new OASResponseMock(res));

        Map<String, Object> params = new Map<String, Object>{
            'post' => Boolean.getExample(),
            'apply' => Boolean.getExample(),
            'r_delete' => Boolean.getExample(),
            'action' => 'null',
            'location' => 'null',
            'propertylist' => new List<String>{''},
            'comAdobeGraniteHttpcacheUrlPaths' => new List<String>{''}
        };

        OASClient client;
        OASConfigmgrApi api;
        OASComAdobeGraniteHttpcacheImplOuter response;
        OASComAdobeGraniteHttpcacheImplOuter expectedResponse;
        String js = '';

        client = new OASClient();
        api = new OASConfigmgrApi(client);

        js = JSON.serialize(OASComAdobeGraniteHttpcacheImplOuter.getExample());
        res.setHeader('Content-Type', 'application/json');
        res.setBody(js);
        expectedResponse = OASComAdobeGraniteHttpcacheImplOuter.getExample();
        response = (OASComAdobeGraniteHttpcacheImplOuter) api.comAdobeGraniteHttpcacheImplOuterCacheFilter(params);
        System.assertEquals(expectedResponse, response);
    }

    /**
     * 
     *
     * 
     */
    @isTest
    private static void comAdobeGraniteI18nImplBundlePseudoTranslationsTest() {
        HttpResponse res = new HttpResponse();
        res.setStatusCode(200);
        res.setStatus('OK');
        Test.setMock(HttpCalloutMock.class, new OASResponseMock(res));

        Map<String, Object> params = new Map<String, Object>{
            'post' => Boolean.getExample(),
            'apply' => Boolean.getExample(),
            'r_delete' => Boolean.getExample(),
            'action' => 'null',
            'location' => 'null',
            'propertylist' => new List<String>{''},
            'pseudoPatterns' => new List<String>{''}
        };

        OASClient client;
        OASConfigmgrApi api;
        OASComAdobeGraniteI18nImplBundlePseu response;
        OASComAdobeGraniteI18nImplBundlePseu expectedResponse;
        String js = '';

        client = new OASClient();
        api = new OASConfigmgrApi(client);

        js = JSON.serialize(OASComAdobeGraniteI18nImplBundlePseu.getExample());
        res.setHeader('Content-Type', 'application/json');
        res.setBody(js);
        expectedResponse = OASComAdobeGraniteI18nImplBundlePseu.getExample();
        response = (OASComAdobeGraniteI18nImplBundlePseu) api.comAdobeGraniteI18nImplBundlePseudoTranslations(params);
        System.assertEquals(expectedResponse, response);
    }

    /**
     * 
     *
     * 
     */
    @isTest
    private static void comAdobeGraniteI18nImplPreferencesLocaleResolverServiceTest() {
        HttpResponse res = new HttpResponse();
        res.setStatusCode(200);
        res.setStatus('OK');
        Test.setMock(HttpCalloutMock.class, new OASResponseMock(res));

        Map<String, Object> params = new Map<String, Object>{
            'post' => Boolean.getExample(),
            'apply' => Boolean.getExample(),
            'r_delete' => Boolean.getExample(),
            'action' => 'null',
            'location' => 'null',
            'propertylist' => new List<String>{''},
            'securityPreferencesName' => 'null'
        };

        OASClient client;
        OASConfigmgrApi api;
        OASComAdobeGraniteI18nImplPreference response;
        OASComAdobeGraniteI18nImplPreference expectedResponse;
        String js = '';

        client = new OASClient();
        api = new OASConfigmgrApi(client);

        js = JSON.serialize(OASComAdobeGraniteI18nImplPreference.getExample());
        res.setHeader('Content-Type', 'application/json');
        res.setBody(js);
        expectedResponse = OASComAdobeGraniteI18nImplPreference.getExample();
        response = (OASComAdobeGraniteI18nImplPreference) api.comAdobeGraniteI18nImplPreferencesLocaleResolverService(params);
        System.assertEquals(expectedResponse, response);
    }

    /**
     * 
     *
     * 
     */
    @isTest
    private static void comAdobeGraniteInfocollectorInfoCollectorTest() {
        HttpResponse res = new HttpResponse();
        res.setStatusCode(200);
        res.setStatus('OK');
        Test.setMock(HttpCalloutMock.class, new OASResponseMock(res));

        Map<String, Object> params = new Map<String, Object>{
            'post' => Boolean.getExample(),
            'apply' => Boolean.getExample(),
            'r_delete' => Boolean.getExample(),
            'action' => 'null',
            'location' => 'null',
            'propertylist' => new List<String>{''},
            'graniteInfocollectorIncludeThreadDumps' => Boolean.getExample(),
            'graniteInfocollectorIncludeHeapDump' => Boolean.getExample()
        };

        OASClient client;
        OASConfigmgrApi api;
        OASComAdobeGraniteInfocollectorInfoC response;
        OASComAdobeGraniteInfocollectorInfoC expectedResponse;
        String js = '';

        client = new OASClient();
        api = new OASConfigmgrApi(client);

        js = JSON.serialize(OASComAdobeGraniteInfocollectorInfoC.getExample());
        res.setHeader('Content-Type', 'application/json');
        res.setBody(js);
        expectedResponse = OASComAdobeGraniteInfocollectorInfoC.getExample();
        response = (OASComAdobeGraniteInfocollectorInfoC) api.comAdobeGraniteInfocollectorInfoCollector(params);
        System.assertEquals(expectedResponse, response);
    }

    /**
     * 
     *
     * 
     */
    @isTest
    private static void comAdobeGraniteJettySslInternalGraniteSslConnectorFactoryTest() {
        HttpResponse res = new HttpResponse();
        res.setStatusCode(200);
        res.setStatus('OK');
        Test.setMock(HttpCalloutMock.class, new OASResponseMock(res));

        Map<String, Object> params = new Map<String, Object>{
            'post' => Boolean.getExample(),
            'apply' => Boolean.getExample(),
            'r_delete' => Boolean.getExample(),
            'action' => 'null',
            'location' => 'null',
            'propertylist' => new List<String>{''},
            'comAdobeGraniteJettySslPort' => Integer.getExample(),
            'comAdobeGraniteJettySslKeystoreUser' => 'null',
            'comAdobeGraniteJettySslKeystorePassword' => 'null',
            'comAdobeGraniteJettySslCiphersuitesExcluded' => new List<String>{''},
            'comAdobeGraniteJettySslCiphersuitesIncluded' => new List<String>{''},
            'comAdobeGraniteJettySslClientCertificate' => 'null'
        };

        OASClient client;
        OASConfigmgrApi api;
        OASComAdobeGraniteJettySslInternalGr response;
        OASComAdobeGraniteJettySslInternalGr expectedResponse;
        String js = '';

        client = new OASClient();
        api = new OASConfigmgrApi(client);

        js = JSON.serialize(OASComAdobeGraniteJettySslInternalGr.getExample());
        res.setHeader('Content-Type', 'application/json');
        res.setBody(js);
        expectedResponse = OASComAdobeGraniteJettySslInternalGr.getExample();
        response = (OASComAdobeGraniteJettySslInternalGr) api.comAdobeGraniteJettySslInternalGraniteSslConnectorFactory(params);
        System.assertEquals(expectedResponse, response);
    }

    /**
     * 
     *
     * 
     */
    @isTest
    private static void comAdobeGraniteLicenseImplLicenseCheckFilterTest() {
        HttpResponse res = new HttpResponse();
        res.setStatusCode(200);
        res.setStatus('OK');
        Test.setMock(HttpCalloutMock.class, new OASResponseMock(res));

        Map<String, Object> params = new Map<String, Object>{
            'post' => Boolean.getExample(),
            'apply' => Boolean.getExample(),
            'r_delete' => Boolean.getExample(),
            'action' => 'null',
            'location' => 'null',
            'propertylist' => new List<String>{''},
            'checkInternval' => Integer.getExample(),
            'excludeIds' => new List<String>{''},
            'encryptPing' => Boolean.getExample()
        };

        OASClient client;
        OASConfigmgrApi api;
        OASComAdobeGraniteLicenseImplLicense response;
        OASComAdobeGraniteLicenseImplLicense expectedResponse;
        String js = '';

        client = new OASClient();
        api = new OASConfigmgrApi(client);

        js = JSON.serialize(OASComAdobeGraniteLicenseImplLicense.getExample());
        res.setHeader('Content-Type', 'application/json');
        res.setBody(js);
        expectedResponse = OASComAdobeGraniteLicenseImplLicense.getExample();
        response = (OASComAdobeGraniteLicenseImplLicense) api.comAdobeGraniteLicenseImplLicenseCheckFilter(params);
        System.assertEquals(expectedResponse, response);
    }

    /**
     * 
     *
     * 
     */
    @isTest
    private static void comAdobeGraniteLoggingImplLogAnalyserImplTest() {
        HttpResponse res = new HttpResponse();
        res.setStatusCode(200);
        res.setStatus('OK');
        Test.setMock(HttpCalloutMock.class, new OASResponseMock(res));

        Map<String, Object> params = new Map<String, Object>{
            'post' => Boolean.getExample(),
            'apply' => Boolean.getExample(),
            'r_delete' => Boolean.getExample(),
            'action' => 'null',
            'location' => 'null',
            'propertylist' => new List<String>{''},
            'messagesQueueSize' => Integer.getExample(),
            'loggerConfig' => new List<String>{''},
            'messagesSize' => Integer.getExample()
        };

        OASClient client;
        OASConfigmgrApi api;
        OASComAdobeGraniteLoggingImplLogAnal response;
        OASComAdobeGraniteLoggingImplLogAnal expectedResponse;
        String js = '';

        client = new OASClient();
        api = new OASConfigmgrApi(client);

        js = JSON.serialize(OASComAdobeGraniteLoggingImplLogAnal.getExample());
        res.setHeader('Content-Type', 'application/json');
        res.setBody(js);
        expectedResponse = OASComAdobeGraniteLoggingImplLogAnal.getExample();
        response = (OASComAdobeGraniteLoggingImplLogAnal) api.comAdobeGraniteLoggingImplLogAnalyserImpl(params);
        System.assertEquals(expectedResponse, response);
    }

    /**
     * 
     *
     * 
     */
    @isTest
    private static void comAdobeGraniteLoggingImplLogErrorHealthCheckTest() {
        HttpResponse res = new HttpResponse();
        res.setStatusCode(200);
        res.setStatus('OK');
        Test.setMock(HttpCalloutMock.class, new OASResponseMock(res));

        Map<String, Object> params = new Map<String, Object>{
            'post' => Boolean.getExample(),
            'apply' => Boolean.getExample(),
            'r_delete' => Boolean.getExample(),
            'action' => 'null',
            'location' => 'null',
            'propertylist' => new List<String>{''},
            'hcTags' => new List<String>{''}
        };

        OASClient client;
        OASConfigmgrApi api;
        OASComAdobeGraniteLoggingImplLogErro response;
        OASComAdobeGraniteLoggingImplLogErro expectedResponse;
        String js = '';

        client = new OASClient();
        api = new OASConfigmgrApi(client);

        js = JSON.serialize(OASComAdobeGraniteLoggingImplLogErro.getExample());
        res.setHeader('Content-Type', 'application/json');
        res.setBody(js);
        expectedResponse = OASComAdobeGraniteLoggingImplLogErro.getExample();
        response = (OASComAdobeGraniteLoggingImplLogErro) api.comAdobeGraniteLoggingImplLogErrorHealthCheck(params);
        System.assertEquals(expectedResponse, response);
    }

    /**
     * 
     *
     * 
     */
    @isTest
    private static void comAdobeGraniteMaintenanceCrxImplDataStoreGarbageCollectionTaskTest() {
        HttpResponse res = new HttpResponse();
        res.setStatusCode(200);
        res.setStatus('OK');
        Test.setMock(HttpCalloutMock.class, new OASResponseMock(res));

        Map<String, Object> params = new Map<String, Object>{
            'post' => Boolean.getExample(),
            'apply' => Boolean.getExample(),
            'r_delete' => Boolean.getExample(),
            'action' => 'null',
            'location' => 'null',
            'propertylist' => new List<String>{''},
            'graniteMaintenanceMandatory' => Boolean.getExample(),
            'jobTopics' => 'null'
        };

        OASClient client;
        OASConfigmgrApi api;
        OASComAdobeGraniteMaintenanceCrxImpl response;
        OASComAdobeGraniteMaintenanceCrxImpl expectedResponse;
        String js = '';

        client = new OASClient();
        api = new OASConfigmgrApi(client);

        js = JSON.serialize(OASComAdobeGraniteMaintenanceCrxImpl.getExample());
        res.setHeader('Content-Type', 'application/json');
        res.setBody(js);
        expectedResponse = OASComAdobeGraniteMaintenanceCrxImpl.getExample();
        response = (OASComAdobeGraniteMaintenanceCrxImpl) api.comAdobeGraniteMaintenanceCrxImplDataStoreGarbageCollectionTask(params);
        System.assertEquals(expectedResponse, response);
    }

    /**
     * 
     *
     * 
     */
    @isTest
    private static void comAdobeGraniteMaintenanceCrxImplLuceneBinariesCleanupTaskTest() {
        HttpResponse res = new HttpResponse();
        res.setStatusCode(200);
        res.setStatus('OK');
        Test.setMock(HttpCalloutMock.class, new OASResponseMock(res));

        Map<String, Object> params = new Map<String, Object>{
            'post' => Boolean.getExample(),
            'apply' => Boolean.getExample(),
            'r_delete' => Boolean.getExample(),
            'action' => 'null',
            'location' => 'null',
            'propertylist' => new List<String>{''},
            'jobTopics' => 'null'
        };

        OASClient client;
        OASConfigmgrApi api;
        OASComAdobeGraniteMaintenanceCrxImpl response;
        OASComAdobeGraniteMaintenanceCrxImpl expectedResponse;
        String js = '';

        client = new OASClient();
        api = new OASConfigmgrApi(client);

        js = JSON.serialize(OASComAdobeGraniteMaintenanceCrxImpl.getExample());
        res.setHeader('Content-Type', 'application/json');
        res.setBody(js);
        expectedResponse = OASComAdobeGraniteMaintenanceCrxImpl.getExample();
        response = (OASComAdobeGraniteMaintenanceCrxImpl) api.comAdobeGraniteMaintenanceCrxImplLuceneBinariesCleanupTask(params);
        System.assertEquals(expectedResponse, response);
    }

    /**
     * 
     *
     * 
     */
    @isTest
    private static void comAdobeGraniteMaintenanceCrxImplRevisionCleanupTaskTest() {
        HttpResponse res = new HttpResponse();
        res.setStatusCode(200);
        res.setStatus('OK');
        Test.setMock(HttpCalloutMock.class, new OASResponseMock(res));

        Map<String, Object> params = new Map<String, Object>{
            'post' => Boolean.getExample(),
            'apply' => Boolean.getExample(),
            'r_delete' => Boolean.getExample(),
            'action' => 'null',
            'location' => 'null',
            'propertylist' => new List<String>{''},
            'fullGcDays' => new List<String>{''}
        };

        OASClient client;
        OASConfigmgrApi api;
        OASComAdobeGraniteMaintenanceCrxImpl response;
        OASComAdobeGraniteMaintenanceCrxImpl expectedResponse;
        String js = '';

        client = new OASClient();
        api = new OASConfigmgrApi(client);

        js = JSON.serialize(OASComAdobeGraniteMaintenanceCrxImpl.getExample());
        res.setHeader('Content-Type', 'application/json');
        res.setBody(js);
        expectedResponse = OASComAdobeGraniteMaintenanceCrxImpl.getExample();
        response = (OASComAdobeGraniteMaintenanceCrxImpl) api.comAdobeGraniteMaintenanceCrxImplRevisionCleanupTask(params);
        System.assertEquals(expectedResponse, response);
    }

    /**
     * 
     *
     * 
     */
    @isTest
    private static void comAdobeGraniteMonitoringImplScriptConfigImplTest() {
        HttpResponse res = new HttpResponse();
        res.setStatusCode(200);
        res.setStatus('OK');
        Test.setMock(HttpCalloutMock.class, new OASResponseMock(res));

        Map<String, Object> params = new Map<String, Object>{
            'post' => Boolean.getExample(),
            'apply' => Boolean.getExample(),
            'r_delete' => Boolean.getExample(),
            'action' => 'null',
            'location' => 'null',
            'propertylist' => new List<String>{''},
            'scriptFilename' => 'null',
            'scriptDisplay' => 'null',
            'scriptPath' => 'null',
            'scriptPlatform' => new List<String>{''},
            'interval' => Integer.getExample(),
            'jmxdomain' => 'null'
        };

        OASClient client;
        OASConfigmgrApi api;
        OASComAdobeGraniteMonitoringImplScri response;
        OASComAdobeGraniteMonitoringImplScri expectedResponse;
        String js = '';

        client = new OASClient();
        api = new OASConfigmgrApi(client);

        js = JSON.serialize(OASComAdobeGraniteMonitoringImplScri.getExample());
        res.setHeader('Content-Type', 'application/json');
        res.setBody(js);
        expectedResponse = OASComAdobeGraniteMonitoringImplScri.getExample();
        response = (OASComAdobeGraniteMonitoringImplScri) api.comAdobeGraniteMonitoringImplScriptConfigImpl(params);
        System.assertEquals(expectedResponse, response);
    }

    /**
     * 
     *
     * 
     */
    @isTest
    private static void comAdobeGraniteOauthServerAuthImplOAuth2ServerAuthenticationHanTest() {
        HttpResponse res = new HttpResponse();
        res.setStatusCode(200);
        res.setStatus('OK');
        Test.setMock(HttpCalloutMock.class, new OASResponseMock(res));

        Map<String, Object> params = new Map<String, Object>{
            'post' => Boolean.getExample(),
            'apply' => Boolean.getExample(),
            'r_delete' => Boolean.getExample(),
            'action' => 'null',
            'location' => 'null',
            'propertylist' => new List<String>{''},
            'path' => 'null',
            'jaasControlFlag' => 'null',
            'jaasRealmName' => 'null',
            'jaasRanking' => Integer.getExample(),
            'oauthOfflineValidation' => Boolean.getExample()
        };

        OASClient client;
        OASConfigmgrApi api;
        OASComAdobeGraniteOauthServerAuthImp response;
        OASComAdobeGraniteOauthServerAuthImp expectedResponse;
        String js = '';

        client = new OASClient();
        api = new OASConfigmgrApi(client);

        js = JSON.serialize(OASComAdobeGraniteOauthServerAuthImp.getExample());
        res.setHeader('Content-Type', 'application/json');
        res.setBody(js);
        expectedResponse = OASComAdobeGraniteOauthServerAuthImp.getExample();
        response = (OASComAdobeGraniteOauthServerAuthImp) api.comAdobeGraniteOauthServerAuthImplOAuth2ServerAuthenticationHan(params);
        System.assertEquals(expectedResponse, response);
    }

    /**
     * 
     *
     * 
     */
    @isTest
    private static void comAdobeGraniteOauthServerImplAccessTokenCleanupTaskTest() {
        HttpResponse res = new HttpResponse();
        res.setStatusCode(200);
        res.setStatus('OK');
        Test.setMock(HttpCalloutMock.class, new OASResponseMock(res));

        Map<String, Object> params = new Map<String, Object>{
            'post' => Boolean.getExample(),
            'apply' => Boolean.getExample(),
            'r_delete' => Boolean.getExample(),
            'action' => 'null',
            'location' => 'null',
            'propertylist' => new List<String>{''},
            'schedulerExpression' => 'null'
        };

        OASClient client;
        OASConfigmgrApi api;
        OASComAdobeGraniteOauthServerImplAcc response;
        OASComAdobeGraniteOauthServerImplAcc expectedResponse;
        String js = '';

        client = new OASClient();
        api = new OASConfigmgrApi(client);

        js = JSON.serialize(OASComAdobeGraniteOauthServerImplAcc.getExample());
        res.setHeader('Content-Type', 'application/json');
        res.setBody(js);
        expectedResponse = OASComAdobeGraniteOauthServerImplAcc.getExample();
        response = (OASComAdobeGraniteOauthServerImplAcc) api.comAdobeGraniteOauthServerImplAccessTokenCleanupTask(params);
        System.assertEquals(expectedResponse, response);
    }

    /**
     * 
     *
     * 
     */
    @isTest
    private static void comAdobeGraniteOauthServerImplOAuth2ClientRevocationServletTest() {
        HttpResponse res = new HttpResponse();
        res.setStatusCode(200);
        res.setStatus('OK');
        Test.setMock(HttpCalloutMock.class, new OASResponseMock(res));

        Map<String, Object> params = new Map<String, Object>{
            'post' => Boolean.getExample(),
            'apply' => Boolean.getExample(),
            'r_delete' => Boolean.getExample(),
            'action' => 'null',
            'location' => 'null',
            'propertylist' => new List<String>{''},
            'oauthClientRevocationActive' => Boolean.getExample()
        };

        OASClient client;
        OASConfigmgrApi api;
        OASComAdobeGraniteOauthServerImplOAu response;
        OASComAdobeGraniteOauthServerImplOAu expectedResponse;
        String js = '';

        client = new OASClient();
        api = new OASConfigmgrApi(client);

        js = JSON.serialize(OASComAdobeGraniteOauthServerImplOAu.getExample());
        res.setHeader('Content-Type', 'application/json');
        res.setBody(js);
        expectedResponse = OASComAdobeGraniteOauthServerImplOAu.getExample();
        response = (OASComAdobeGraniteOauthServerImplOAu) api.comAdobeGraniteOauthServerImplOAuth2ClientRevocationServlet(params);
        System.assertEquals(expectedResponse, response);
    }

    /**
     * 
     *
     * 
     */
    @isTest
    private static void comAdobeGraniteOauthServerImplOAuth2RevocationEndpointServletTest() {
        HttpResponse res = new HttpResponse();
        res.setStatusCode(200);
        res.setStatus('OK');
        Test.setMock(HttpCalloutMock.class, new OASResponseMock(res));

        Map<String, Object> params = new Map<String, Object>{
            'post' => Boolean.getExample(),
            'apply' => Boolean.getExample(),
            'r_delete' => Boolean.getExample(),
            'action' => 'null',
            'location' => 'null',
            'propertylist' => new List<String>{''},
            'slingServletPaths' => 'null',
            'oauthRevocationActive' => Boolean.getExample()
        };

        OASClient client;
        OASConfigmgrApi api;
        OASComAdobeGraniteOauthServerImplOAu response;
        OASComAdobeGraniteOauthServerImplOAu expectedResponse;
        String js = '';

        client = new OASClient();
        api = new OASConfigmgrApi(client);

        js = JSON.serialize(OASComAdobeGraniteOauthServerImplOAu.getExample());
        res.setHeader('Content-Type', 'application/json');
        res.setBody(js);
        expectedResponse = OASComAdobeGraniteOauthServerImplOAu.getExample();
        response = (OASComAdobeGraniteOauthServerImplOAu) api.comAdobeGraniteOauthServerImplOAuth2RevocationEndpointServlet(params);
        System.assertEquals(expectedResponse, response);
    }

    /**
     * 
     *
     * 
     */
    @isTest
    private static void comAdobeGraniteOauthServerImplOAuth2TokenEndpointServletTest() {
        HttpResponse res = new HttpResponse();
        res.setStatusCode(200);
        res.setStatus('OK');
        Test.setMock(HttpCalloutMock.class, new OASResponseMock(res));

        Map<String, Object> params = new Map<String, Object>{
            'post' => Boolean.getExample(),
            'apply' => Boolean.getExample(),
            'r_delete' => Boolean.getExample(),
            'action' => 'null',
            'location' => 'null',
            'propertylist' => new List<String>{''},
            'oauthIssuer' => 'null',
            'oauthAccessTokenExpiresIn' => 'null',
            'osgiHttpWhiteboardServletPattern' => 'null',
            'osgiHttpWhiteboardContextSelect' => 'null'
        };

        OASClient client;
        OASConfigmgrApi api;
        OASComAdobeGraniteOauthServerImplOAu response;
        OASComAdobeGraniteOauthServerImplOAu expectedResponse;
        String js = '';

        client = new OASClient();
        api = new OASConfigmgrApi(client);

        js = JSON.serialize(OASComAdobeGraniteOauthServerImplOAu.getExample());
        res.setHeader('Content-Type', 'application/json');
        res.setBody(js);
        expectedResponse = OASComAdobeGraniteOauthServerImplOAu.getExample();
        response = (OASComAdobeGraniteOauthServerImplOAu) api.comAdobeGraniteOauthServerImplOAuth2TokenEndpointServlet(params);
        System.assertEquals(expectedResponse, response);
    }

    /**
     * 
     *
     * 
     */
    @isTest
    private static void comAdobeGraniteOauthServerImplOAuth2TokenRevocationServletTest() {
        HttpResponse res = new HttpResponse();
        res.setStatusCode(200);
        res.setStatus('OK');
        Test.setMock(HttpCalloutMock.class, new OASResponseMock(res));

        Map<String, Object> params = new Map<String, Object>{
            'post' => Boolean.getExample(),
            'apply' => Boolean.getExample(),
            'r_delete' => Boolean.getExample(),
            'action' => 'null',
            'location' => 'null',
            'propertylist' => new List<String>{''},
            'oauthTokenRevocationActive' => Boolean.getExample()
        };

        OASClient client;
        OASConfigmgrApi api;
        OASComAdobeGraniteOauthServerImplOAu response;
        OASComAdobeGraniteOauthServerImplOAu expectedResponse;
        String js = '';

        client = new OASClient();
        api = new OASConfigmgrApi(client);

        js = JSON.serialize(OASComAdobeGraniteOauthServerImplOAu.getExample());
        res.setHeader('Content-Type', 'application/json');
        res.setBody(js);
        expectedResponse = OASComAdobeGraniteOauthServerImplOAu.getExample();
        response = (OASComAdobeGraniteOauthServerImplOAu) api.comAdobeGraniteOauthServerImplOAuth2TokenRevocationServlet(params);
        System.assertEquals(expectedResponse, response);
    }

    /**
     * 
     *
     * 
     */
    @isTest
    private static void comAdobeGraniteOffloadingImplOffloadingConfiguratorTest() {
        HttpResponse res = new HttpResponse();
        res.setStatusCode(200);
        res.setStatus('OK');
        Test.setMock(HttpCalloutMock.class, new OASResponseMock(res));

        Map<String, Object> params = new Map<String, Object>{
            'post' => Boolean.getExample(),
            'apply' => Boolean.getExample(),
            'r_delete' => Boolean.getExample(),
            'action' => 'null',
            'location' => 'null',
            'propertylist' => new List<String>{''},
            'offloadingTransporter' => 'null',
            'offloadingCleanupPayload' => Boolean.getExample()
        };

        OASClient client;
        OASConfigmgrApi api;
        OASComAdobeGraniteOffloadingImplOffl response;
        OASComAdobeGraniteOffloadingImplOffl expectedResponse;
        String js = '';

        client = new OASClient();
        api = new OASConfigmgrApi(client);

        js = JSON.serialize(OASComAdobeGraniteOffloadingImplOffl.getExample());
        res.setHeader('Content-Type', 'application/json');
        res.setBody(js);
        expectedResponse = OASComAdobeGraniteOffloadingImplOffl.getExample();
        response = (OASComAdobeGraniteOffloadingImplOffl) api.comAdobeGraniteOffloadingImplOffloadingConfigurator(params);
        System.assertEquals(expectedResponse, response);
    }

    /**
     * 
     *
     * 
     */
    @isTest
    private static void comAdobeGraniteOffloadingImplOffloadingJobClonerTest() {
        HttpResponse res = new HttpResponse();
        res.setStatusCode(200);
        res.setStatus('OK');
        Test.setMock(HttpCalloutMock.class, new OASResponseMock(res));

        Map<String, Object> params = new Map<String, Object>{
            'post' => Boolean.getExample(),
            'apply' => Boolean.getExample(),
            'r_delete' => Boolean.getExample(),
            'action' => 'null',
            'location' => 'null',
            'propertylist' => new List<String>{''},
            'offloadingJobclonerEnabled' => Boolean.getExample()
        };

        OASClient client;
        OASConfigmgrApi api;
        OASComAdobeGraniteOffloadingImplOffl response;
        OASComAdobeGraniteOffloadingImplOffl expectedResponse;
        String js = '';

        client = new OASClient();
        api = new OASConfigmgrApi(client);

        js = JSON.serialize(OASComAdobeGraniteOffloadingImplOffl.getExample());
        res.setHeader('Content-Type', 'application/json');
        res.setBody(js);
        expectedResponse = OASComAdobeGraniteOffloadingImplOffl.getExample();
        response = (OASComAdobeGraniteOffloadingImplOffl) api.comAdobeGraniteOffloadingImplOffloadingJobCloner(params);
        System.assertEquals(expectedResponse, response);
    }

    /**
     * 
     *
     * 
     */
    @isTest
    private static void comAdobeGraniteOffloadingImplOffloadingJobOffloaderTest() {
        HttpResponse res = new HttpResponse();
        res.setStatusCode(200);
        res.setStatus('OK');
        Test.setMock(HttpCalloutMock.class, new OASResponseMock(res));

        Map<String, Object> params = new Map<String, Object>{
            'post' => Boolean.getExample(),
            'apply' => Boolean.getExample(),
            'r_delete' => Boolean.getExample(),
            'action' => 'null',
            'location' => 'null',
            'propertylist' => new List<String>{''},
            'offloadingOffloaderEnabled' => Boolean.getExample()
        };

        OASClient client;
        OASConfigmgrApi api;
        OASComAdobeGraniteOffloadingImplOffl response;
        OASComAdobeGraniteOffloadingImplOffl expectedResponse;
        String js = '';

        client = new OASClient();
        api = new OASConfigmgrApi(client);

        js = JSON.serialize(OASComAdobeGraniteOffloadingImplOffl.getExample());
        res.setHeader('Content-Type', 'application/json');
        res.setBody(js);
        expectedResponse = OASComAdobeGraniteOffloadingImplOffl.getExample();
        response = (OASComAdobeGraniteOffloadingImplOffl) api.comAdobeGraniteOffloadingImplOffloadingJobOffloader(params);
        System.assertEquals(expectedResponse, response);
    }

    /**
     * 
     *
     * 
     */
    @isTest
    private static void comAdobeGraniteOffloadingImplTransporterOffloadingAgentManagerTest() {
        HttpResponse res = new HttpResponse();
        res.setStatusCode(200);
        res.setStatus('OK');
        Test.setMock(HttpCalloutMock.class, new OASResponseMock(res));

        Map<String, Object> params = new Map<String, Object>{
            'post' => Boolean.getExample(),
            'apply' => Boolean.getExample(),
            'r_delete' => Boolean.getExample(),
            'action' => 'null',
            'location' => 'null',
            'propertylist' => new List<String>{''},
            'offloadingAgentmanagerEnabled' => Boolean.getExample()
        };

        OASClient client;
        OASConfigmgrApi api;
        OASComAdobeGraniteOffloadingImplTran response;
        OASComAdobeGraniteOffloadingImplTran expectedResponse;
        String js = '';

        client = new OASClient();
        api = new OASConfigmgrApi(client);

        js = JSON.serialize(OASComAdobeGraniteOffloadingImplTran.getExample());
        res.setHeader('Content-Type', 'application/json');
        res.setBody(js);
        expectedResponse = OASComAdobeGraniteOffloadingImplTran.getExample();
        response = (OASComAdobeGraniteOffloadingImplTran) api.comAdobeGraniteOffloadingImplTransporterOffloadingAgentManager(params);
        System.assertEquals(expectedResponse, response);
    }

    /**
     * 
     *
     * 
     */
    @isTest
    private static void comAdobeGraniteOffloadingImplTransporterOffloadingDefaultTranspoTest() {
        HttpResponse res = new HttpResponse();
        res.setStatusCode(200);
        res.setStatus('OK');
        Test.setMock(HttpCalloutMock.class, new OASResponseMock(res));

        Map<String, Object> params = new Map<String, Object>{
            'post' => Boolean.getExample(),
            'apply' => Boolean.getExample(),
            'r_delete' => Boolean.getExample(),
            'action' => 'null',
            'location' => 'null',
            'propertylist' => new List<String>{''},
            'defaultTransportAgentToWorkerPrefix' => 'null',
            'defaultTransportAgentToMasterPrefix' => 'null',
            'defaultTransportInputPackage' => 'null',
            'defaultTransportOutputPackage' => 'null',
            'defaultTransportReplicationSynchronous' => Boolean.getExample(),
            'defaultTransportContentpackage' => Boolean.getExample(),
            'offloadingTransporterDefaultEnabled' => Boolean.getExample()
        };

        OASClient client;
        OASConfigmgrApi api;
        OASComAdobeGraniteOffloadingImplTran response;
        OASComAdobeGraniteOffloadingImplTran expectedResponse;
        String js = '';

        client = new OASClient();
        api = new OASConfigmgrApi(client);

        js = JSON.serialize(OASComAdobeGraniteOffloadingImplTran.getExample());
        res.setHeader('Content-Type', 'application/json');
        res.setBody(js);
        expectedResponse = OASComAdobeGraniteOffloadingImplTran.getExample();
        response = (OASComAdobeGraniteOffloadingImplTran) api.comAdobeGraniteOffloadingImplTransporterOffloadingDefaultTranspo(params);
        System.assertEquals(expectedResponse, response);
    }

    /**
     * 
     *
     * 
     */
    @isTest
    private static void comAdobeGraniteOmnisearchImplCoreOmniSearchServiceImplTest() {
        HttpResponse res = new HttpResponse();
        res.setStatusCode(200);
        res.setStatus('OK');
        Test.setMock(HttpCalloutMock.class, new OASResponseMock(res));

        Map<String, Object> params = new Map<String, Object>{
            'post' => Boolean.getExample(),
            'apply' => Boolean.getExample(),
            'r_delete' => Boolean.getExample(),
            'action' => 'null',
            'location' => 'null',
            'propertylist' => new List<String>{''},
            'omnisearchSuggestionRequiretextMin' => Integer.getExample(),
            'omnisearchSuggestionSpellcheckRequire' => Boolean.getExample()
        };

        OASClient client;
        OASConfigmgrApi api;
        OASComAdobeGraniteOmnisearchImplCore response;
        OASComAdobeGraniteOmnisearchImplCore expectedResponse;
        String js = '';

        client = new OASClient();
        api = new OASConfigmgrApi(client);

        js = JSON.serialize(OASComAdobeGraniteOmnisearchImplCore.getExample());
        res.setHeader('Content-Type', 'application/json');
        res.setBody(js);
        expectedResponse = OASComAdobeGraniteOmnisearchImplCore.getExample();
        response = (OASComAdobeGraniteOmnisearchImplCore) api.comAdobeGraniteOmnisearchImplCoreOmniSearchServiceImpl(params);
        System.assertEquals(expectedResponse, response);
    }

    /**
     * 
     *
     * 
     */
    @isTest
    private static void comAdobeGraniteOptoutImplOptOutServiceImplTest() {
        HttpResponse res = new HttpResponse();
        res.setStatusCode(200);
        res.setStatus('OK');
        Test.setMock(HttpCalloutMock.class, new OASResponseMock(res));

        Map<String, Object> params = new Map<String, Object>{
            'post' => Boolean.getExample(),
            'apply' => Boolean.getExample(),
            'r_delete' => Boolean.getExample(),
            'action' => 'null',
            'location' => 'null',
            'propertylist' => new List<String>{''},
            'optoutCookies' => new List<String>{''},
            'optoutHeaders' => new List<String>{''},
            'optoutWhitelistCookies' => new List<String>{''}
        };

        OASClient client;
        OASConfigmgrApi api;
        OASComAdobeGraniteOptoutImplOptOutSe response;
        OASComAdobeGraniteOptoutImplOptOutSe expectedResponse;
        String js = '';

        client = new OASClient();
        api = new OASConfigmgrApi(client);

        js = JSON.serialize(OASComAdobeGraniteOptoutImplOptOutSe.getExample());
        res.setHeader('Content-Type', 'application/json');
        res.setBody(js);
        expectedResponse = OASComAdobeGraniteOptoutImplOptOutSe.getExample();
        response = (OASComAdobeGraniteOptoutImplOptOutSe) api.comAdobeGraniteOptoutImplOptOutServiceImpl(params);
        System.assertEquals(expectedResponse, response);
    }

    /**
     * 
     *
     * 
     */
    @isTest
    private static void comAdobeGraniteQueriesImplHcAsyncIndexHealthCheckTest() {
        HttpResponse res = new HttpResponse();
        res.setStatusCode(200);
        res.setStatus('OK');
        Test.setMock(HttpCalloutMock.class, new OASResponseMock(res));

        Map<String, Object> params = new Map<String, Object>{
            'post' => Boolean.getExample(),
            'apply' => Boolean.getExample(),
            'r_delete' => Boolean.getExample(),
            'action' => 'null',
            'location' => 'null',
            'propertylist' => new List<String>{''},
            'indexingCriticalThreshold' => Integer.getExample(),
            'indexingWarnThreshold' => Integer.getExample(),
            'hcTags' => new List<String>{''}
        };

        OASClient client;
        OASConfigmgrApi api;
        OASComAdobeGraniteQueriesImplHcAsync response;
        OASComAdobeGraniteQueriesImplHcAsync expectedResponse;
        String js = '';

        client = new OASClient();
        api = new OASConfigmgrApi(client);

        js = JSON.serialize(OASComAdobeGraniteQueriesImplHcAsync.getExample());
        res.setHeader('Content-Type', 'application/json');
        res.setBody(js);
        expectedResponse = OASComAdobeGraniteQueriesImplHcAsync.getExample();
        response = (OASComAdobeGraniteQueriesImplHcAsync) api.comAdobeGraniteQueriesImplHcAsyncIndexHealthCheck(params);
        System.assertEquals(expectedResponse, response);
    }

    /**
     * 
     *
     * 
     */
    @isTest
    private static void comAdobeGraniteQueriesImplHcLargeIndexHealthCheckTest() {
        HttpResponse res = new HttpResponse();
        res.setStatusCode(200);
        res.setStatus('OK');
        Test.setMock(HttpCalloutMock.class, new OASResponseMock(res));

        Map<String, Object> params = new Map<String, Object>{
            'post' => Boolean.getExample(),
            'apply' => Boolean.getExample(),
            'r_delete' => Boolean.getExample(),
            'action' => 'null',
            'location' => 'null',
            'propertylist' => new List<String>{''},
            'largeIndexCriticalThreshold' => Integer.getExample(),
            'largeIndexWarnThreshold' => Integer.getExample(),
            'hcTags' => new List<String>{''}
        };

        OASClient client;
        OASConfigmgrApi api;
        OASComAdobeGraniteQueriesImplHcLarge response;
        OASComAdobeGraniteQueriesImplHcLarge expectedResponse;
        String js = '';

        client = new OASClient();
        api = new OASConfigmgrApi(client);

        js = JSON.serialize(OASComAdobeGraniteQueriesImplHcLarge.getExample());
        res.setHeader('Content-Type', 'application/json');
        res.setBody(js);
        expectedResponse = OASComAdobeGraniteQueriesImplHcLarge.getExample();
        response = (OASComAdobeGraniteQueriesImplHcLarge) api.comAdobeGraniteQueriesImplHcLargeIndexHealthCheck(params);
        System.assertEquals(expectedResponse, response);
    }

    /**
     * 
     *
     * 
     */
    @isTest
    private static void comAdobeGraniteQueriesImplHcQueriesStatusHealthCheckTest() {
        HttpResponse res = new HttpResponse();
        res.setStatusCode(200);
        res.setStatus('OK');
        Test.setMock(HttpCalloutMock.class, new OASResponseMock(res));

        Map<String, Object> params = new Map<String, Object>{
            'post' => Boolean.getExample(),
            'apply' => Boolean.getExample(),
            'r_delete' => Boolean.getExample(),
            'action' => 'null',
            'location' => 'null',
            'propertylist' => new List<String>{''},
            'hcTags' => new List<String>{''}
        };

        OASClient client;
        OASConfigmgrApi api;
        OASComAdobeGraniteQueriesImplHcQueri response;
        OASComAdobeGraniteQueriesImplHcQueri expectedResponse;
        String js = '';

        client = new OASClient();
        api = new OASConfigmgrApi(client);

        js = JSON.serialize(OASComAdobeGraniteQueriesImplHcQueri.getExample());
        res.setHeader('Content-Type', 'application/json');
        res.setBody(js);
        expectedResponse = OASComAdobeGraniteQueriesImplHcQueri.getExample();
        response = (OASComAdobeGraniteQueriesImplHcQueri) api.comAdobeGraniteQueriesImplHcQueriesStatusHealthCheck(params);
        System.assertEquals(expectedResponse, response);
    }

    /**
     * 
     *
     * 
     */
    @isTest
    private static void comAdobeGraniteQueriesImplHcQueryHealthCheckMetricsTest() {
        HttpResponse res = new HttpResponse();
        res.setStatusCode(200);
        res.setStatus('OK');
        Test.setMock(HttpCalloutMock.class, new OASResponseMock(res));

        Map<String, Object> params = new Map<String, Object>{
            'post' => Boolean.getExample(),
            'apply' => Boolean.getExample(),
            'r_delete' => Boolean.getExample(),
            'action' => 'null',
            'location' => 'null',
            'propertylist' => new List<String>{''},
            'getPeriod' => Integer.getExample()
        };

        OASClient client;
        OASConfigmgrApi api;
        OASComAdobeGraniteQueriesImplHcQuery response;
        OASComAdobeGraniteQueriesImplHcQuery expectedResponse;
        String js = '';

        client = new OASClient();
        api = new OASConfigmgrApi(client);

        js = JSON.serialize(OASComAdobeGraniteQueriesImplHcQuery.getExample());
        res.setHeader('Content-Type', 'application/json');
        res.setBody(js);
        expectedResponse = OASComAdobeGraniteQueriesImplHcQuery.getExample();
        response = (OASComAdobeGraniteQueriesImplHcQuery) api.comAdobeGraniteQueriesImplHcQueryHealthCheckMetrics(params);
        System.assertEquals(expectedResponse, response);
    }

    /**
     * 
     *
     * 
     */
    @isTest
    private static void comAdobeGraniteQueriesImplHcQueryLimitsHealthCheckTest() {
        HttpResponse res = new HttpResponse();
        res.setStatusCode(200);
        res.setStatus('OK');
        Test.setMock(HttpCalloutMock.class, new OASResponseMock(res));

        Map<String, Object> params = new Map<String, Object>{
            'post' => Boolean.getExample(),
            'apply' => Boolean.getExample(),
            'r_delete' => Boolean.getExample(),
            'action' => 'null',
            'location' => 'null',
            'propertylist' => new List<String>{''},
            'hcTags' => new List<String>{''}
        };

        OASClient client;
        OASConfigmgrApi api;
        OASComAdobeGraniteQueriesImplHcQuery response;
        OASComAdobeGraniteQueriesImplHcQuery expectedResponse;
        String js = '';

        client = new OASClient();
        api = new OASConfigmgrApi(client);

        js = JSON.serialize(OASComAdobeGraniteQueriesImplHcQuery.getExample());
        res.setHeader('Content-Type', 'application/json');
        res.setBody(js);
        expectedResponse = OASComAdobeGraniteQueriesImplHcQuery.getExample();
        response = (OASComAdobeGraniteQueriesImplHcQuery) api.comAdobeGraniteQueriesImplHcQueryLimitsHealthCheck(params);
        System.assertEquals(expectedResponse, response);
    }

    /**
     * 
     *
     * 
     */
    @isTest
    private static void comAdobeGraniteReplicationHcImplReplicationQueueHealthCheckTest() {
        HttpResponse res = new HttpResponse();
        res.setStatusCode(200);
        res.setStatus('OK');
        Test.setMock(HttpCalloutMock.class, new OASResponseMock(res));

        Map<String, Object> params = new Map<String, Object>{
            'post' => Boolean.getExample(),
            'apply' => Boolean.getExample(),
            'r_delete' => Boolean.getExample(),
            'action' => 'null',
            'location' => 'null',
            'propertylist' => new List<String>{''},
            'numberOfRetriesAllowed' => Integer.getExample(),
            'hcTags' => new List<String>{''}
        };

        OASClient client;
        OASConfigmgrApi api;
        OASComAdobeGraniteReplicationHcImplR response;
        OASComAdobeGraniteReplicationHcImplR expectedResponse;
        String js = '';

        client = new OASClient();
        api = new OASConfigmgrApi(client);

        js = JSON.serialize(OASComAdobeGraniteReplicationHcImplR.getExample());
        res.setHeader('Content-Type', 'application/json');
        res.setBody(js);
        expectedResponse = OASComAdobeGraniteReplicationHcImplR.getExample();
        response = (OASComAdobeGraniteReplicationHcImplR) api.comAdobeGraniteReplicationHcImplReplicationQueueHealthCheck(params);
        System.assertEquals(expectedResponse, response);
    }

    /**
     * 
     *
     * 
     */
    @isTest
    private static void comAdobeGraniteReplicationHcImplReplicationTransportUsersHealthCTest() {
        HttpResponse res = new HttpResponse();
        res.setStatusCode(200);
        res.setStatus('OK');
        Test.setMock(HttpCalloutMock.class, new OASResponseMock(res));

        Map<String, Object> params = new Map<String, Object>{
            'post' => Boolean.getExample(),
            'apply' => Boolean.getExample(),
            'r_delete' => Boolean.getExample(),
            'action' => 'null',
            'location' => 'null',
            'propertylist' => new List<String>{''},
            'hcTags' => new List<String>{''}
        };

        OASClient client;
        OASConfigmgrApi api;
        OASComAdobeGraniteReplicationHcImplR response;
        OASComAdobeGraniteReplicationHcImplR expectedResponse;
        String js = '';

        client = new OASClient();
        api = new OASConfigmgrApi(client);

        js = JSON.serialize(OASComAdobeGraniteReplicationHcImplR.getExample());
        res.setHeader('Content-Type', 'application/json');
        res.setBody(js);
        expectedResponse = OASComAdobeGraniteReplicationHcImplR.getExample();
        response = (OASComAdobeGraniteReplicationHcImplR) api.comAdobeGraniteReplicationHcImplReplicationTransportUsersHealthC(params);
        System.assertEquals(expectedResponse, response);
    }

    /**
     * 
     *
     * 
     */
    @isTest
    private static void comAdobeGraniteRepositoryHcImplAuthorizableNodeNameHealthCheckTest() {
        HttpResponse res = new HttpResponse();
        res.setStatusCode(200);
        res.setStatus('OK');
        Test.setMock(HttpCalloutMock.class, new OASResponseMock(res));

        Map<String, Object> params = new Map<String, Object>{
            'post' => Boolean.getExample(),
            'apply' => Boolean.getExample(),
            'r_delete' => Boolean.getExample(),
            'action' => 'null',
            'location' => 'null',
            'propertylist' => new List<String>{''},
            'hcTags' => new List<String>{''}
        };

        OASClient client;
        OASConfigmgrApi api;
        OASComAdobeGraniteRepositoryHcImplAu response;
        OASComAdobeGraniteRepositoryHcImplAu expectedResponse;
        String js = '';

        client = new OASClient();
        api = new OASConfigmgrApi(client);

        js = JSON.serialize(OASComAdobeGraniteRepositoryHcImplAu.getExample());
        res.setHeader('Content-Type', 'application/json');
        res.setBody(js);
        expectedResponse = OASComAdobeGraniteRepositoryHcImplAu.getExample();
        response = (OASComAdobeGraniteRepositoryHcImplAu) api.comAdobeGraniteRepositoryHcImplAuthorizableNodeNameHealthCheck(params);
        System.assertEquals(expectedResponse, response);
    }

    /**
     * 
     *
     * 
     */
    @isTest
    private static void comAdobeGraniteRepositoryHcImplContentSlingSlingContentHealthCTest() {
        HttpResponse res = new HttpResponse();
        res.setStatusCode(200);
        res.setStatus('OK');
        Test.setMock(HttpCalloutMock.class, new OASResponseMock(res));

        Map<String, Object> params = new Map<String, Object>{
            'post' => Boolean.getExample(),
            'apply' => Boolean.getExample(),
            'r_delete' => Boolean.getExample(),
            'action' => 'null',
            'location' => 'null',
            'propertylist' => new List<String>{''},
            'hcTags' => new List<String>{''},
            'excludeSearchPath' => new List<String>{''}
        };

        OASClient client;
        OASConfigmgrApi api;
        OASComAdobeGraniteRepositoryHcImplCo response;
        OASComAdobeGraniteRepositoryHcImplCo expectedResponse;
        String js = '';

        client = new OASClient();
        api = new OASConfigmgrApi(client);

        js = JSON.serialize(OASComAdobeGraniteRepositoryHcImplCo.getExample());
        res.setHeader('Content-Type', 'application/json');
        res.setBody(js);
        expectedResponse = OASComAdobeGraniteRepositoryHcImplCo.getExample();
        response = (OASComAdobeGraniteRepositoryHcImplCo) api.comAdobeGraniteRepositoryHcImplContentSlingSlingContentHealthC(params);
        System.assertEquals(expectedResponse, response);
    }

    /**
     * 
     *
     * 
     */
    @isTest
    private static void comAdobeGraniteRepositoryHcImplContinuousRGCHealthCheckTest() {
        HttpResponse res = new HttpResponse();
        res.setStatusCode(200);
        res.setStatus('OK');
        Test.setMock(HttpCalloutMock.class, new OASResponseMock(res));

        Map<String, Object> params = new Map<String, Object>{
            'post' => Boolean.getExample(),
            'apply' => Boolean.getExample(),
            'r_delete' => Boolean.getExample(),
            'action' => 'null',
            'location' => 'null',
            'propertylist' => new List<String>{''},
            'hcTags' => new List<String>{''}
        };

        OASClient client;
        OASConfigmgrApi api;
        OASComAdobeGraniteRepositoryHcImplCo response;
        OASComAdobeGraniteRepositoryHcImplCo expectedResponse;
        String js = '';

        client = new OASClient();
        api = new OASConfigmgrApi(client);

        js = JSON.serialize(OASComAdobeGraniteRepositoryHcImplCo.getExample());
        res.setHeader('Content-Type', 'application/json');
        res.setBody(js);
        expectedResponse = OASComAdobeGraniteRepositoryHcImplCo.getExample();
        response = (OASComAdobeGraniteRepositoryHcImplCo) api.comAdobeGraniteRepositoryHcImplContinuousRGCHealthCheck(params);
        System.assertEquals(expectedResponse, response);
    }

    /**
     * 
     *
     * 
     */
    @isTest
    private static void comAdobeGraniteRepositoryHcImplDefaultAccessUserProfileHealthCheTest() {
        HttpResponse res = new HttpResponse();
        res.setStatusCode(200);
        res.setStatus('OK');
        Test.setMock(HttpCalloutMock.class, new OASResponseMock(res));

        Map<String, Object> params = new Map<String, Object>{
            'post' => Boolean.getExample(),
            'apply' => Boolean.getExample(),
            'r_delete' => Boolean.getExample(),
            'action' => 'null',
            'location' => 'null',
            'propertylist' => new List<String>{''},
            'hcTags' => new List<String>{''}
        };

        OASClient client;
        OASConfigmgrApi api;
        OASComAdobeGraniteRepositoryHcImplDe response;
        OASComAdobeGraniteRepositoryHcImplDe expectedResponse;
        String js = '';

        client = new OASClient();
        api = new OASConfigmgrApi(client);

        js = JSON.serialize(OASComAdobeGraniteRepositoryHcImplDe.getExample());
        res.setHeader('Content-Type', 'application/json');
        res.setBody(js);
        expectedResponse = OASComAdobeGraniteRepositoryHcImplDe.getExample();
        response = (OASComAdobeGraniteRepositoryHcImplDe) api.comAdobeGraniteRepositoryHcImplDefaultAccessUserProfileHealthChe(params);
        System.assertEquals(expectedResponse, response);
    }

    /**
     * 
     *
     * 
     */
    @isTest
    private static void comAdobeGraniteRepositoryHcImplDefaultLoginsHealthCheckTest() {
        HttpResponse res = new HttpResponse();
        res.setStatusCode(200);
        res.setStatus('OK');
        Test.setMock(HttpCalloutMock.class, new OASResponseMock(res));

        Map<String, Object> params = new Map<String, Object>{
            'post' => Boolean.getExample(),
            'apply' => Boolean.getExample(),
            'r_delete' => Boolean.getExample(),
            'action' => 'null',
            'location' => 'null',
            'propertylist' => new List<String>{''},
            'hcTags' => new List<String>{''},
            'accountLogins' => new List<String>{''},
            'consoleLogins' => new List<String>{''}
        };

        OASClient client;
        OASConfigmgrApi api;
        OASComAdobeGraniteRepositoryHcImplDe response;
        OASComAdobeGraniteRepositoryHcImplDe expectedResponse;
        String js = '';

        client = new OASClient();
        api = new OASConfigmgrApi(client);

        js = JSON.serialize(OASComAdobeGraniteRepositoryHcImplDe.getExample());
        res.setHeader('Content-Type', 'application/json');
        res.setBody(js);
        expectedResponse = OASComAdobeGraniteRepositoryHcImplDe.getExample();
        response = (OASComAdobeGraniteRepositoryHcImplDe) api.comAdobeGraniteRepositoryHcImplDefaultLoginsHealthCheck(params);
        System.assertEquals(expectedResponse, response);
    }

    /**
     * 
     *
     * 
     */
    @isTest
    private static void comAdobeGraniteRepositoryHcImplDiskSpaceHealthCheckTest() {
        HttpResponse res = new HttpResponse();
        res.setStatusCode(200);
        res.setStatus('OK');
        Test.setMock(HttpCalloutMock.class, new OASResponseMock(res));

        Map<String, Object> params = new Map<String, Object>{
            'post' => Boolean.getExample(),
            'apply' => Boolean.getExample(),
            'r_delete' => Boolean.getExample(),
            'action' => 'null',
            'location' => 'null',
            'propertylist' => new List<String>{''},
            'hcTags' => new List<String>{''},
            'diskSpaceWarnThreshold' => Integer.getExample(),
            'diskSpaceErrorThreshold' => Integer.getExample()
        };

        OASClient client;
        OASConfigmgrApi api;
        OASComAdobeGraniteRepositoryHcImplDi response;
        OASComAdobeGraniteRepositoryHcImplDi expectedResponse;
        String js = '';

        client = new OASClient();
        api = new OASConfigmgrApi(client);

        js = JSON.serialize(OASComAdobeGraniteRepositoryHcImplDi.getExample());
        res.setHeader('Content-Type', 'application/json');
        res.setBody(js);
        expectedResponse = OASComAdobeGraniteRepositoryHcImplDi.getExample();
        response = (OASComAdobeGraniteRepositoryHcImplDi) api.comAdobeGraniteRepositoryHcImplDiskSpaceHealthCheck(params);
        System.assertEquals(expectedResponse, response);
    }

    /**
     * 
     *
     * 
     */
    @isTest
    private static void comAdobeGraniteRepositoryHcImplObservationQueueLengthHealthCheckTest() {
        HttpResponse res = new HttpResponse();
        res.setStatusCode(200);
        res.setStatus('OK');
        Test.setMock(HttpCalloutMock.class, new OASResponseMock(res));

        Map<String, Object> params = new Map<String, Object>{
            'post' => Boolean.getExample(),
            'apply' => Boolean.getExample(),
            'r_delete' => Boolean.getExample(),
            'action' => 'null',
            'location' => 'null',
            'propertylist' => new List<String>{''},
            'hcTags' => new List<String>{''}
        };

        OASClient client;
        OASConfigmgrApi api;
        OASComAdobeGraniteRepositoryHcImplOb response;
        OASComAdobeGraniteRepositoryHcImplOb expectedResponse;
        String js = '';

        client = new OASClient();
        api = new OASConfigmgrApi(client);

        js = JSON.serialize(OASComAdobeGraniteRepositoryHcImplOb.getExample());
        res.setHeader('Content-Type', 'application/json');
        res.setBody(js);
        expectedResponse = OASComAdobeGraniteRepositoryHcImplOb.getExample();
        response = (OASComAdobeGraniteRepositoryHcImplOb) api.comAdobeGraniteRepositoryHcImplObservationQueueLengthHealthCheck(params);
        System.assertEquals(expectedResponse, response);
    }

    /**
     * 
     *
     * 
     */
    @isTest
    private static void comAdobeGraniteRepositoryImplCommitStatsConfigTest() {
        HttpResponse res = new HttpResponse();
        res.setStatusCode(200);
        res.setStatus('OK');
        Test.setMock(HttpCalloutMock.class, new OASResponseMock(res));

        Map<String, Object> params = new Map<String, Object>{
            'post' => Boolean.getExample(),
            'apply' => Boolean.getExample(),
            'r_delete' => Boolean.getExample(),
            'action' => 'null',
            'location' => 'null',
            'propertylist' => new List<String>{''},
            'enabled' => Boolean.getExample(),
            'intervalSeconds' => Integer.getExample(),
            'commitsPerIntervalThreshold' => Integer.getExample(),
            'maxLocationLength' => Integer.getExample(),
            'maxDetailsShown' => Integer.getExample(),
            'minDetailsPercentage' => Integer.getExample(),
            'threadMatchers' => new List<String>{''},
            'maxGreedyDepth' => Integer.getExample(),
            'greedyStackMatchers' => 'null',
            'stackFilters' => new List<String>{''},
            'stackMatchers' => new List<String>{''},
            'stackCategorizers' => new List<String>{''},
            'stackShorteners' => new List<String>{''}
        };

        OASClient client;
        OASConfigmgrApi api;
        OASComAdobeGraniteRepositoryImplComm response;
        OASComAdobeGraniteRepositoryImplComm expectedResponse;
        String js = '';

        client = new OASClient();
        api = new OASConfigmgrApi(client);

        js = JSON.serialize(OASComAdobeGraniteRepositoryImplComm.getExample());
        res.setHeader('Content-Type', 'application/json');
        res.setBody(js);
        expectedResponse = OASComAdobeGraniteRepositoryImplComm.getExample();
        response = (OASComAdobeGraniteRepositoryImplComm) api.comAdobeGraniteRepositoryImplCommitStatsConfig(params);
        System.assertEquals(expectedResponse, response);
    }

    /**
     * 
     *
     * 
     */
    @isTest
    private static void comAdobeGraniteRepositoryServiceUserConfigurationTest() {
        HttpResponse res = new HttpResponse();
        res.setStatusCode(200);
        res.setStatus('OK');
        Test.setMock(HttpCalloutMock.class, new OASResponseMock(res));

        Map<String, Object> params = new Map<String, Object>{
            'post' => Boolean.getExample(),
            'apply' => Boolean.getExample(),
            'r_delete' => Boolean.getExample(),
            'action' => 'null',
            'location' => 'null',
            'propertylist' => new List<String>{''},
            'serviceRanking' => Integer.getExample(),
            'serviceusersSimpleSubjectPopulation' => Boolean.getExample(),
            'serviceusersList' => new List<String>{''}
        };

        OASClient client;
        OASConfigmgrApi api;
        OASComAdobeGraniteRepositoryServiceU response;
        OASComAdobeGraniteRepositoryServiceU expectedResponse;
        String js = '';

        client = new OASClient();
        api = new OASConfigmgrApi(client);

        js = JSON.serialize(OASComAdobeGraniteRepositoryServiceU.getExample());
        res.setHeader('Content-Type', 'application/json');
        res.setBody(js);
        expectedResponse = OASComAdobeGraniteRepositoryServiceU.getExample();
        response = (OASComAdobeGraniteRepositoryServiceU) api.comAdobeGraniteRepositoryServiceUserConfiguration(params);
        System.assertEquals(expectedResponse, response);
    }

    /**
     * 
     *
     * 
     */
    @isTest
    private static void comAdobeGraniteRequestsLoggingImplHcRequestsStatusHealthCheckImTest() {
        HttpResponse res = new HttpResponse();
        res.setStatusCode(200);
        res.setStatus('OK');
        Test.setMock(HttpCalloutMock.class, new OASResponseMock(res));

        Map<String, Object> params = new Map<String, Object>{
            'post' => Boolean.getExample(),
            'apply' => Boolean.getExample(),
            'r_delete' => Boolean.getExample(),
            'action' => 'null',
            'location' => 'null',
            'propertylist' => new List<String>{''},
            'hcTags' => new List<String>{''}
        };

        OASClient client;
        OASConfigmgrApi api;
        OASComAdobeGraniteRequestsLoggingImp response;
        OASComAdobeGraniteRequestsLoggingImp expectedResponse;
        String js = '';

        client = new OASClient();
        api = new OASConfigmgrApi(client);

        js = JSON.serialize(OASComAdobeGraniteRequestsLoggingImp.getExample());
        res.setHeader('Content-Type', 'application/json');
        res.setBody(js);
        expectedResponse = OASComAdobeGraniteRequestsLoggingImp.getExample();
        response = (OASComAdobeGraniteRequestsLoggingImp) api.comAdobeGraniteRequestsLoggingImplHcRequestsStatusHealthCheckIm(params);
        System.assertEquals(expectedResponse, response);
    }

    /**
     * 
     *
     * 
     */
    @isTest
    private static void comAdobeGraniteResourcestatusImplCompositeStatusTypeTest() {
        HttpResponse res = new HttpResponse();
        res.setStatusCode(200);
        res.setStatus('OK');
        Test.setMock(HttpCalloutMock.class, new OASResponseMock(res));

        Map<String, Object> params = new Map<String, Object>{
            'post' => Boolean.getExample(),
            'apply' => Boolean.getExample(),
            'r_delete' => Boolean.getExample(),
            'action' => 'null',
            'location' => 'null',
            'propertylist' => new List<String>{''},
            'name' => 'null',
            'types' => new List<String>{''}
        };

        OASClient client;
        OASConfigmgrApi api;
        OASComAdobeGraniteResourcestatusImpl response;
        OASComAdobeGraniteResourcestatusImpl expectedResponse;
        String js = '';

        client = new OASClient();
        api = new OASConfigmgrApi(client);

        js = JSON.serialize(OASComAdobeGraniteResourcestatusImpl.getExample());
        res.setHeader('Content-Type', 'application/json');
        res.setBody(js);
        expectedResponse = OASComAdobeGraniteResourcestatusImpl.getExample();
        response = (OASComAdobeGraniteResourcestatusImpl) api.comAdobeGraniteResourcestatusImplCompositeStatusType(params);
        System.assertEquals(expectedResponse, response);
    }

    /**
     * 
     *
     * 
     */
    @isTest
    private static void comAdobeGraniteResourcestatusImplStatusResourceProviderImplTest() {
        HttpResponse res = new HttpResponse();
        res.setStatusCode(200);
        res.setStatus('OK');
        Test.setMock(HttpCalloutMock.class, new OASResponseMock(res));

        Map<String, Object> params = new Map<String, Object>{
            'post' => Boolean.getExample(),
            'apply' => Boolean.getExample(),
            'r_delete' => Boolean.getExample(),
            'action' => 'null',
            'location' => 'null',
            'propertylist' => new List<String>{''},
            'providerRoot' => 'null'
        };

        OASClient client;
        OASConfigmgrApi api;
        OASComAdobeGraniteResourcestatusImpl response;
        OASComAdobeGraniteResourcestatusImpl expectedResponse;
        String js = '';

        client = new OASClient();
        api = new OASConfigmgrApi(client);

        js = JSON.serialize(OASComAdobeGraniteResourcestatusImpl.getExample());
        res.setHeader('Content-Type', 'application/json');
        res.setBody(js);
        expectedResponse = OASComAdobeGraniteResourcestatusImpl.getExample();
        response = (OASComAdobeGraniteResourcestatusImpl) api.comAdobeGraniteResourcestatusImplStatusResourceProviderImpl(params);
        System.assertEquals(expectedResponse, response);
    }

    /**
     * 
     *
     * 
     */
    @isTest
    private static void comAdobeGraniteRestAssetsImplAssetContentDispositionFilterTest() {
        HttpResponse res = new HttpResponse();
        res.setStatusCode(200);
        res.setStatus('OK');
        Test.setMock(HttpCalloutMock.class, new OASResponseMock(res));

        Map<String, Object> params = new Map<String, Object>{
            'post' => Boolean.getExample(),
            'apply' => Boolean.getExample(),
            'r_delete' => Boolean.getExample(),
            'action' => 'null',
            'location' => 'null',
            'propertylist' => new List<String>{''},
            'mimeAllowEmpty' => Boolean.getExample(),
            'mimeAllowed' => new List<String>{''}
        };

        OASClient client;
        OASConfigmgrApi api;
        OASComAdobeGraniteRestAssetsImplAsse response;
        OASComAdobeGraniteRestAssetsImplAsse expectedResponse;
        String js = '';

        client = new OASClient();
        api = new OASConfigmgrApi(client);

        js = JSON.serialize(OASComAdobeGraniteRestAssetsImplAsse.getExample());
        res.setHeader('Content-Type', 'application/json');
        res.setBody(js);
        expectedResponse = OASComAdobeGraniteRestAssetsImplAsse.getExample();
        response = (OASComAdobeGraniteRestAssetsImplAsse) api.comAdobeGraniteRestAssetsImplAssetContentDispositionFilter(params);
        System.assertEquals(expectedResponse, response);
    }

    /**
     * 
     *
     * 
     */
    @isTest
    private static void comAdobeGraniteRestImplApiEndpointResourceProviderFactoryImplTest() {
        HttpResponse res = new HttpResponse();
        res.setStatusCode(200);
        res.setStatus('OK');
        Test.setMock(HttpCalloutMock.class, new OASResponseMock(res));

        Map<String, Object> params = new Map<String, Object>{
            'post' => Boolean.getExample(),
            'apply' => Boolean.getExample(),
            'r_delete' => Boolean.getExample(),
            'action' => 'null',
            'location' => 'null',
            'propertylist' => new List<String>{''},
            'providerRoots' => 'null'
        };

        OASClient client;
        OASConfigmgrApi api;
        OASComAdobeGraniteRestImplApiEndpoin response;
        OASComAdobeGraniteRestImplApiEndpoin expectedResponse;
        String js = '';

        client = new OASClient();
        api = new OASConfigmgrApi(client);

        js = JSON.serialize(OASComAdobeGraniteRestImplApiEndpoin.getExample());
        res.setHeader('Content-Type', 'application/json');
        res.setBody(js);
        expectedResponse = OASComAdobeGraniteRestImplApiEndpoin.getExample();
        response = (OASComAdobeGraniteRestImplApiEndpoin) api.comAdobeGraniteRestImplApiEndpointResourceProviderFactoryImpl(params);
        System.assertEquals(expectedResponse, response);
    }

    /**
     * 
     *
     * 
     */
    @isTest
    private static void comAdobeGraniteRestImplServletDefaultGETServletTest() {
        HttpResponse res = new HttpResponse();
        res.setStatusCode(200);
        res.setStatus('OK');
        Test.setMock(HttpCalloutMock.class, new OASResponseMock(res));

        Map<String, Object> params = new Map<String, Object>{
            'post' => Boolean.getExample(),
            'apply' => Boolean.getExample(),
            'r_delete' => Boolean.getExample(),
            'action' => 'null',
            'location' => 'null',
            'propertylist' => new List<String>{''},
            'defaultLimit' => Integer.getExample(),
            'useAbsoluteUri' => Boolean.getExample()
        };

        OASClient client;
        OASConfigmgrApi api;
        OASComAdobeGraniteRestImplServletDef response;
        OASComAdobeGraniteRestImplServletDef expectedResponse;
        String js = '';

        client = new OASClient();
        api = new OASConfigmgrApi(client);

        js = JSON.serialize(OASComAdobeGraniteRestImplServletDef.getExample());
        res.setHeader('Content-Type', 'application/json');
        res.setBody(js);
        expectedResponse = OASComAdobeGraniteRestImplServletDef.getExample();
        response = (OASComAdobeGraniteRestImplServletDef) api.comAdobeGraniteRestImplServletDefaultGETServlet(params);
        System.assertEquals(expectedResponse, response);
    }

    /**
     * 
     *
     * 
     */
    @isTest
    private static void comAdobeGraniteSecurityUserUiInternalServletsSSLConfigurationSTest() {
        HttpResponse res = new HttpResponse();
        res.setStatusCode(200);
        res.setStatus('OK');
        Test.setMock(HttpCalloutMock.class, new OASResponseMock(res));

        Map<String, Object> params = new Map<String, Object>{
            'post' => Boolean.getExample(),
            'apply' => Boolean.getExample(),
            'r_delete' => Boolean.getExample(),
            'action' => 'null',
            'location' => 'null',
            'propertylist' => new List<String>{''},
            'hcTags' => new List<String>{''}
        };

        OASClient client;
        OASConfigmgrApi api;
        OASComAdobeGraniteSecurityUserUiInte response;
        OASComAdobeGraniteSecurityUserUiInte expectedResponse;
        String js = '';

        client = new OASClient();
        api = new OASConfigmgrApi(client);

        js = JSON.serialize(OASComAdobeGraniteSecurityUserUiInte.getExample());
        res.setHeader('Content-Type', 'application/json');
        res.setBody(js);
        expectedResponse = OASComAdobeGraniteSecurityUserUiInte.getExample();
        response = (OASComAdobeGraniteSecurityUserUiInte) api.comAdobeGraniteSecurityUserUiInternalServletsSSLConfigurationS(params);
        System.assertEquals(expectedResponse, response);
    }

    /**
     * 
     *
     * 
     */
    @isTest
    private static void comAdobeGraniteSecurityUserUserPropertiesServiceTest() {
        HttpResponse res = new HttpResponse();
        res.setStatusCode(200);
        res.setStatus('OK');
        Test.setMock(HttpCalloutMock.class, new OASResponseMock(res));

        Map<String, Object> params = new Map<String, Object>{
            'post' => Boolean.getExample(),
            'apply' => Boolean.getExample(),
            'r_delete' => Boolean.getExample(),
            'action' => 'null',
            'location' => 'null',
            'propertylist' => new List<String>{''},
            'adapterCondition' => 'null',
            'graniteUserpropertiesNodetypes' => new List<String>{''},
            'graniteUserpropertiesResourcetypes' => new List<String>{''}
        };

        OASClient client;
        OASConfigmgrApi api;
        OASComAdobeGraniteSecurityUserUserPr response;
        OASComAdobeGraniteSecurityUserUserPr expectedResponse;
        String js = '';

        client = new OASClient();
        api = new OASConfigmgrApi(client);

        js = JSON.serialize(OASComAdobeGraniteSecurityUserUserPr.getExample());
        res.setHeader('Content-Type', 'application/json');
        res.setBody(js);
        expectedResponse = OASComAdobeGraniteSecurityUserUserPr.getExample();
        response = (OASComAdobeGraniteSecurityUserUserPr) api.comAdobeGraniteSecurityUserUserPropertiesService(params);
        System.assertEquals(expectedResponse, response);
    }

    /**
     * 
     *
     * 
     */
    @isTest
    private static void comAdobeGraniteSocialgraphImplSocialGraphFactoryImplTest() {
        HttpResponse res = new HttpResponse();
        res.setStatusCode(200);
        res.setStatus('OK');
        Test.setMock(HttpCalloutMock.class, new OASResponseMock(res));

        Map<String, Object> params = new Map<String, Object>{
            'post' => Boolean.getExample(),
            'apply' => Boolean.getExample(),
            'r_delete' => Boolean.getExample(),
            'action' => 'null',
            'location' => 'null',
            'propertylist' => new List<String>{''},
            'group2memberRelationshipOutgoing' => 'null',
            'group2memberExcludedOutgoing' => new List<String>{''},
            'group2memberRelationshipIncoming' => 'null',
            'group2memberExcludedIncoming' => new List<String>{''}
        };

        OASClient client;
        OASConfigmgrApi api;
        OASComAdobeGraniteSocialgraphImplSoc response;
        OASComAdobeGraniteSocialgraphImplSoc expectedResponse;
        String js = '';

        client = new OASClient();
        api = new OASConfigmgrApi(client);

        js = JSON.serialize(OASComAdobeGraniteSocialgraphImplSoc.getExample());
        res.setHeader('Content-Type', 'application/json');
        res.setBody(js);
        expectedResponse = OASComAdobeGraniteSocialgraphImplSoc.getExample();
        response = (OASComAdobeGraniteSocialgraphImplSoc) api.comAdobeGraniteSocialgraphImplSocialGraphFactoryImpl(params);
        System.assertEquals(expectedResponse, response);
    }

    /**
     * 
     *
     * 
     */
    @isTest
    private static void comAdobeGraniteSystemMonitoringImplSystemStatsMBeanImplTest() {
        HttpResponse res = new HttpResponse();
        res.setStatusCode(200);
        res.setStatus('OK');
        Test.setMock(HttpCalloutMock.class, new OASResponseMock(res));

        Map<String, Object> params = new Map<String, Object>{
            'post' => Boolean.getExample(),
            'apply' => Boolean.getExample(),
            'r_delete' => Boolean.getExample(),
            'action' => 'null',
            'location' => 'null',
            'propertylist' => new List<String>{''},
            'schedulerExpression' => 'null',
            'jmxObjectname' => 'null'
        };

        OASClient client;
        OASConfigmgrApi api;
        OASComAdobeGraniteSystemMonitoringIm response;
        OASComAdobeGraniteSystemMonitoringIm expectedResponse;
        String js = '';

        client = new OASClient();
        api = new OASConfigmgrApi(client);

        js = JSON.serialize(OASComAdobeGraniteSystemMonitoringIm.getExample());
        res.setHeader('Content-Type', 'application/json');
        res.setBody(js);
        expectedResponse = OASComAdobeGraniteSystemMonitoringIm.getExample();
        response = (OASComAdobeGraniteSystemMonitoringIm) api.comAdobeGraniteSystemMonitoringImplSystemStatsMBeanImpl(params);
        System.assertEquals(expectedResponse, response);
    }

    /**
     * 
     *
     * 
     */
    @isTest
    private static void comAdobeGraniteTaskmanagementImplJcrTaskAdapterFactoryTest() {
        HttpResponse res = new HttpResponse();
        res.setStatusCode(200);
        res.setStatus('OK');
        Test.setMock(HttpCalloutMock.class, new OASResponseMock(res));

        Map<String, Object> params = new Map<String, Object>{
            'post' => Boolean.getExample(),
            'apply' => Boolean.getExample(),
            'r_delete' => Boolean.getExample(),
            'action' => 'null',
            'location' => 'null',
            'propertylist' => new List<String>{''},
            'adapterCondition' => 'null'
        };

        OASClient client;
        OASConfigmgrApi api;
        OASComAdobeGraniteTaskmanagementImpl response;
        OASComAdobeGraniteTaskmanagementImpl expectedResponse;
        String js = '';

        client = new OASClient();
        api = new OASConfigmgrApi(client);

        js = JSON.serialize(OASComAdobeGraniteTaskmanagementImpl.getExample());
        res.setHeader('Content-Type', 'application/json');
        res.setBody(js);
        expectedResponse = OASComAdobeGraniteTaskmanagementImpl.getExample();
        response = (OASComAdobeGraniteTaskmanagementImpl) api.comAdobeGraniteTaskmanagementImplJcrTaskAdapterFactory(params);
        System.assertEquals(expectedResponse, response);
    }

    /**
     * 
     *
     * 
     */
    @isTest
    private static void comAdobeGraniteTaskmanagementImplJcrTaskArchiveServiceTest() {
        HttpResponse res = new HttpResponse();
        res.setStatusCode(200);
        res.setStatus('OK');
        Test.setMock(HttpCalloutMock.class, new OASResponseMock(res));

        Map<String, Object> params = new Map<String, Object>{
            'post' => Boolean.getExample(),
            'apply' => Boolean.getExample(),
            'r_delete' => Boolean.getExample(),
            'action' => 'null',
            'location' => 'null',
            'propertylist' => new List<String>{''},
            'archivingEnabled' => Boolean.getExample(),
            'schedulerExpression' => 'null',
            'archiveSinceDaysCompleted' => Integer.getExample()
        };

        OASClient client;
        OASConfigmgrApi api;
        OASComAdobeGraniteTaskmanagementImpl response;
        OASComAdobeGraniteTaskmanagementImpl expectedResponse;
        String js = '';

        client = new OASClient();
        api = new OASConfigmgrApi(client);

        js = JSON.serialize(OASComAdobeGraniteTaskmanagementImpl.getExample());
        res.setHeader('Content-Type', 'application/json');
        res.setBody(js);
        expectedResponse = OASComAdobeGraniteTaskmanagementImpl.getExample();
        response = (OASComAdobeGraniteTaskmanagementImpl) api.comAdobeGraniteTaskmanagementImplJcrTaskArchiveService(params);
        System.assertEquals(expectedResponse, response);
    }

    /**
     * 
     *
     * 
     */
    @isTest
    private static void comAdobeGraniteTaskmanagementImplPurgeTaskPurgeMaintenanceTaskTest() {
        HttpResponse res = new HttpResponse();
        res.setStatusCode(200);
        res.setStatus('OK');
        Test.setMock(HttpCalloutMock.class, new OASResponseMock(res));

        Map<String, Object> params = new Map<String, Object>{
            'post' => Boolean.getExample(),
            'apply' => Boolean.getExample(),
            'r_delete' => Boolean.getExample(),
            'action' => 'null',
            'location' => 'null',
            'propertylist' => new List<String>{''},
            'purgeCompleted' => Boolean.getExample(),
            'completedAge' => Integer.getExample(),
            'purgeActive' => Boolean.getExample(),
            'activeAge' => Integer.getExample(),
            'saveThreshold' => Integer.getExample()
        };

        OASClient client;
        OASConfigmgrApi api;
        OASComAdobeGraniteTaskmanagementImpl response;
        OASComAdobeGraniteTaskmanagementImpl expectedResponse;
        String js = '';

        client = new OASClient();
        api = new OASConfigmgrApi(client);

        js = JSON.serialize(OASComAdobeGraniteTaskmanagementImpl.getExample());
        res.setHeader('Content-Type', 'application/json');
        res.setBody(js);
        expectedResponse = OASComAdobeGraniteTaskmanagementImpl.getExample();
        response = (OASComAdobeGraniteTaskmanagementImpl) api.comAdobeGraniteTaskmanagementImplPurgeTaskPurgeMaintenanceTask(params);
        System.assertEquals(expectedResponse, response);
    }

    /**
     * 
     *
     * 
     */
    @isTest
    private static void comAdobeGraniteTaskmanagementImplServiceTaskManagerAdapterFactorTest() {
        HttpResponse res = new HttpResponse();
        res.setStatusCode(200);
        res.setStatus('OK');
        Test.setMock(HttpCalloutMock.class, new OASResponseMock(res));

        Map<String, Object> params = new Map<String, Object>{
            'post' => Boolean.getExample(),
            'apply' => Boolean.getExample(),
            'r_delete' => Boolean.getExample(),
            'action' => 'null',
            'location' => 'null',
            'propertylist' => new List<String>{''},
            'adapterCondition' => 'null',
            'taskmanagerAdmingroups' => new List<String>{''}
        };

        OASClient client;
        OASConfigmgrApi api;
        OASComAdobeGraniteTaskmanagementImpl response;
        OASComAdobeGraniteTaskmanagementImpl expectedResponse;
        String js = '';

        client = new OASClient();
        api = new OASConfigmgrApi(client);

        js = JSON.serialize(OASComAdobeGraniteTaskmanagementImpl.getExample());
        res.setHeader('Content-Type', 'application/json');
        res.setBody(js);
        expectedResponse = OASComAdobeGraniteTaskmanagementImpl.getExample();
        response = (OASComAdobeGraniteTaskmanagementImpl) api.comAdobeGraniteTaskmanagementImplServiceTaskManagerAdapterFactor(params);
        System.assertEquals(expectedResponse, response);
    }

    /**
     * 
     *
     * 
     */
    @isTest
    private static void comAdobeGraniteThreaddumpThreadDumpCollectorTest() {
        HttpResponse res = new HttpResponse();
        res.setStatusCode(200);
        res.setStatus('OK');
        Test.setMock(HttpCalloutMock.class, new OASResponseMock(res));

        Map<String, Object> params = new Map<String, Object>{
            'post' => Boolean.getExample(),
            'apply' => Boolean.getExample(),
            'r_delete' => Boolean.getExample(),
            'action' => 'null',
            'location' => 'null',
            'propertylist' => new List<String>{''},
            'schedulerPeriod' => Integer.getExample(),
            'schedulerRunOn' => 'null',
            'graniteThreaddumpEnabled' => Boolean.getExample(),
            'graniteThreaddumpDumpsPerFile' => Integer.getExample(),
            'graniteThreaddumpEnableGzipCompression' => Boolean.getExample(),
            'graniteThreaddumpEnableDirectoriesCompression' => Boolean.getExample(),
            'graniteThreaddumpEnableJStack' => Boolean.getExample(),
            'graniteThreaddumpMaxBackupDays' => Integer.getExample(),
            'graniteThreaddumpBackupCleanTrigger' => 'null'
        };

        OASClient client;
        OASConfigmgrApi api;
        OASComAdobeGraniteThreaddumpThreadDu response;
        OASComAdobeGraniteThreaddumpThreadDu expectedResponse;
        String js = '';

        client = new OASClient();
        api = new OASConfigmgrApi(client);

        js = JSON.serialize(OASComAdobeGraniteThreaddumpThreadDu.getExample());
        res.setHeader('Content-Type', 'application/json');
        res.setBody(js);
        expectedResponse = OASComAdobeGraniteThreaddumpThreadDu.getExample();
        response = (OASComAdobeGraniteThreaddumpThreadDu) api.comAdobeGraniteThreaddumpThreadDumpCollector(params);
        System.assertEquals(expectedResponse, response);
    }

    /**
     * 
     *
     * 
     */
    @isTest
    private static void comAdobeGraniteTranslationConnectorMsftCoreImplMicrosoftTranslTest() {
        HttpResponse res = new HttpResponse();
        res.setStatusCode(200);
        res.setStatus('OK');
        Test.setMock(HttpCalloutMock.class, new OASResponseMock(res));

        Map<String, Object> params = new Map<String, Object>{
            'post' => Boolean.getExample(),
            'apply' => Boolean.getExample(),
            'r_delete' => Boolean.getExample(),
            'action' => 'null',
            'location' => 'null',
            'propertylist' => new List<String>{''},
            'translationFactory' => 'null',
            'defaultConnectorLabel' => 'null',
            'defaultConnectorAttribution' => 'null',
            'defaultConnectorWorkspaceId' => 'null',
            'defaultConnectorSubscriptionKey' => 'null',
            'languageMapLocation' => 'null',
            'categoryMapLocation' => 'null',
            'retryAttempts' => Integer.getExample(),
            'timeoutCount' => Integer.getExample()
        };

        OASClient client;
        OASConfigmgrApi api;
        OASComAdobeGraniteTranslationConnect response;
        OASComAdobeGraniteTranslationConnect expectedResponse;
        String js = '';

        client = new OASClient();
        api = new OASConfigmgrApi(client);

        js = JSON.serialize(OASComAdobeGraniteTranslationConnect.getExample());
        res.setHeader('Content-Type', 'application/json');
        res.setBody(js);
        expectedResponse = OASComAdobeGraniteTranslationConnect.getExample();
        response = (OASComAdobeGraniteTranslationConnect) api.comAdobeGraniteTranslationConnectorMsftCoreImplMicrosoftTransl(params);
        System.assertEquals(expectedResponse, response);
    }

    /**
     * 
     *
     * 
     */
    @isTest
    private static void comAdobeGraniteTranslationCoreImplTranslationManagerImplTest() {
        HttpResponse res = new HttpResponse();
        res.setStatusCode(200);
        res.setStatus('OK');
        Test.setMock(HttpCalloutMock.class, new OASResponseMock(res));

        Map<String, Object> params = new Map<String, Object>{
            'post' => Boolean.getExample(),
            'apply' => Boolean.getExample(),
            'r_delete' => Boolean.getExample(),
            'action' => 'null',
            'location' => 'null',
            'propertylist' => new List<String>{''},
            'defaultConnectorName' => 'null',
            'defaultCategory' => 'null'
        };

        OASClient client;
        OASConfigmgrApi api;
        OASComAdobeGraniteTranslationCoreImp response;
        OASComAdobeGraniteTranslationCoreImp expectedResponse;
        String js = '';

        client = new OASClient();
        api = new OASConfigmgrApi(client);

        js = JSON.serialize(OASComAdobeGraniteTranslationCoreImp.getExample());
        res.setHeader('Content-Type', 'application/json');
        res.setBody(js);
        expectedResponse = OASComAdobeGraniteTranslationCoreImp.getExample();
        response = (OASComAdobeGraniteTranslationCoreImp) api.comAdobeGraniteTranslationCoreImplTranslationManagerImpl(params);
        System.assertEquals(expectedResponse, response);
    }

    /**
     * 
     *
     * 
     */
    @isTest
    private static void comAdobeGraniteUiClientlibsImplHtmlLibraryManagerImplTest() {
        HttpResponse res = new HttpResponse();
        res.setStatusCode(200);
        res.setStatus('OK');
        Test.setMock(HttpCalloutMock.class, new OASResponseMock(res));

        Map<String, Object> params = new Map<String, Object>{
            'post' => Boolean.getExample(),
            'apply' => Boolean.getExample(),
            'r_delete' => Boolean.getExample(),
            'action' => 'null',
            'location' => 'null',
            'propertylist' => new List<String>{''},
            'htmllibmanagerTiming' => Boolean.getExample(),
            'htmllibmanagerDebugInitJs' => 'null',
            'htmllibmanagerMinify' => Boolean.getExample(),
            'htmllibmanagerDebug' => Boolean.getExample(),
            'htmllibmanagerGzip' => Boolean.getExample(),
            'htmllibmanagerMaxDataUriSize' => Integer.getExample(),
            'htmllibmanagerMaxage' => Integer.getExample(),
            'htmllibmanagerForceCQUrlInfo' => Boolean.getExample(),
            'htmllibmanagerDefaultthemename' => 'null',
            'htmllibmanagerDefaultuserthemename' => 'null',
            'htmllibmanagerClientmanager' => 'null',
            'htmllibmanagerPathList' => new List<String>{''},
            'htmllibmanagerExcludedPathList' => new List<String>{''},
            'htmllibmanagerProcessorJs' => new List<String>{''},
            'htmllibmanagerProcessorCss' => new List<String>{''},
            'htmllibmanagerLongcachePatterns' => new List<String>{''},
            'htmllibmanagerLongcacheFormat' => 'null',
            'htmllibmanagerUseFileSystemOutputCache' => Boolean.getExample(),
            'htmllibmanagerFileSystemOutputCacheLocation' => 'null',
            'htmllibmanagerDisableReplacement' => new List<String>{''}
        };

        OASClient client;
        OASConfigmgrApi api;
        OASComAdobeGraniteUiClientlibsImplHt response;
        OASComAdobeGraniteUiClientlibsImplHt expectedResponse;
        String js = '';

        client = new OASClient();
        api = new OASConfigmgrApi(client);

        js = JSON.serialize(OASComAdobeGraniteUiClientlibsImplHt.getExample());
        res.setHeader('Content-Type', 'application/json');
        res.setBody(js);
        expectedResponse = OASComAdobeGraniteUiClientlibsImplHt.getExample();
        response = (OASComAdobeGraniteUiClientlibsImplHt) api.comAdobeGraniteUiClientlibsImplHtmlLibraryManagerImpl(params);
        System.assertEquals(expectedResponse, response);
    }

    /**
     * 
     *
     * 
     */
    @isTest
    private static void comAdobeGraniteWorkflowConsoleFragsWorkflowWithdrawFeatureTest() {
        HttpResponse res = new HttpResponse();
        res.setStatusCode(200);
        res.setStatus('OK');
        Test.setMock(HttpCalloutMock.class, new OASResponseMock(res));

        Map<String, Object> params = new Map<String, Object>{
            'post' => Boolean.getExample(),
            'apply' => Boolean.getExample(),
            'r_delete' => Boolean.getExample(),
            'action' => 'null',
            'location' => 'null',
            'propertylist' => new List<String>{''},
            'enabled' => Boolean.getExample()
        };

        OASClient client;
        OASConfigmgrApi api;
        OASComAdobeGraniteWorkflowConsoleFra response;
        OASComAdobeGraniteWorkflowConsoleFra expectedResponse;
        String js = '';

        client = new OASClient();
        api = new OASConfigmgrApi(client);

        js = JSON.serialize(OASComAdobeGraniteWorkflowConsoleFra.getExample());
        res.setHeader('Content-Type', 'application/json');
        res.setBody(js);
        expectedResponse = OASComAdobeGraniteWorkflowConsoleFra.getExample();
        response = (OASComAdobeGraniteWorkflowConsoleFra) api.comAdobeGraniteWorkflowConsoleFragsWorkflowWithdrawFeature(params);
        System.assertEquals(expectedResponse, response);
    }

    /**
     * 
     *
     * 
     */
    @isTest
    private static void comAdobeGraniteWorkflowConsolePublishWorkflowPublishEventServiceTest() {
        HttpResponse res = new HttpResponse();
        res.setStatusCode(200);
        res.setStatus('OK');
        Test.setMock(HttpCalloutMock.class, new OASResponseMock(res));

        Map<String, Object> params = new Map<String, Object>{
            'post' => Boolean.getExample(),
            'apply' => Boolean.getExample(),
            'r_delete' => Boolean.getExample(),
            'action' => 'null',
            'location' => 'null',
            'propertylist' => new List<String>{''},
            'graniteWorkflowWorkflowPublishEventServiceEnabled' => Boolean.getExample()
        };

        OASClient client;
        OASConfigmgrApi api;
        OASComAdobeGraniteWorkflowConsolePub response;
        OASComAdobeGraniteWorkflowConsolePub expectedResponse;
        String js = '';

        client = new OASClient();
        api = new OASConfigmgrApi(client);

        js = JSON.serialize(OASComAdobeGraniteWorkflowConsolePub.getExample());
        res.setHeader('Content-Type', 'application/json');
        res.setBody(js);
        expectedResponse = OASComAdobeGraniteWorkflowConsolePub.getExample();
        response = (OASComAdobeGraniteWorkflowConsolePub) api.comAdobeGraniteWorkflowConsolePublishWorkflowPublishEventService(params);
        System.assertEquals(expectedResponse, response);
    }

    /**
     * 
     *
     * 
     */
    @isTest
    private static void comAdobeGraniteWorkflowCoreJcrWorkflowBucketManagerTest() {
        HttpResponse res = new HttpResponse();
        res.setStatusCode(200);
        res.setStatus('OK');
        Test.setMock(HttpCalloutMock.class, new OASResponseMock(res));

        Map<String, Object> params = new Map<String, Object>{
            'post' => Boolean.getExample(),
            'apply' => Boolean.getExample(),
            'r_delete' => Boolean.getExample(),
            'action' => 'null',
            'location' => 'null',
            'propertylist' => new List<String>{''},
            'bucketSize' => Integer.getExample()
        };

        OASClient client;
        OASConfigmgrApi api;
        OASComAdobeGraniteWorkflowCoreJcrWor response;
        OASComAdobeGraniteWorkflowCoreJcrWor expectedResponse;
        String js = '';

        client = new OASClient();
        api = new OASConfigmgrApi(client);

        js = JSON.serialize(OASComAdobeGraniteWorkflowCoreJcrWor.getExample());
        res.setHeader('Content-Type', 'application/json');
        res.setBody(js);
        expectedResponse = OASComAdobeGraniteWorkflowCoreJcrWor.getExample();
        response = (OASComAdobeGraniteWorkflowCoreJcrWor) api.comAdobeGraniteWorkflowCoreJcrWorkflowBucketManager(params);
        System.assertEquals(expectedResponse, response);
    }

    /**
     * 
     *
     * 
     */
    @isTest
    private static void comAdobeGraniteWorkflowCoreJobExternalProcessJobHandlerTest() {
        HttpResponse res = new HttpResponse();
        res.setStatusCode(200);
        res.setStatus('OK');
        Test.setMock(HttpCalloutMock.class, new OASResponseMock(res));

        Map<String, Object> params = new Map<String, Object>{
            'post' => Boolean.getExample(),
            'apply' => Boolean.getExample(),
            'r_delete' => Boolean.getExample(),
            'action' => 'null',
            'location' => 'null',
            'propertylist' => new List<String>{''},
            'defaultTimeout' => Integer.getExample(),
            'maxTimeout' => Integer.getExample(),
            'defaultPeriod' => Integer.getExample()
        };

        OASClient client;
        OASConfigmgrApi api;
        OASComAdobeGraniteWorkflowCoreJobExt response;
        OASComAdobeGraniteWorkflowCoreJobExt expectedResponse;
        String js = '';

        client = new OASClient();
        api = new OASConfigmgrApi(client);

        js = JSON.serialize(OASComAdobeGraniteWorkflowCoreJobExt.getExample());
        res.setHeader('Content-Type', 'application/json');
        res.setBody(js);
        expectedResponse = OASComAdobeGraniteWorkflowCoreJobExt.getExample();
        response = (OASComAdobeGraniteWorkflowCoreJobExt) api.comAdobeGraniteWorkflowCoreJobExternalProcessJobHandler(params);
        System.assertEquals(expectedResponse, response);
    }

    /**
     * 
     *
     * 
     */
    @isTest
    private static void comAdobeGraniteWorkflowCoreJobJobHandlerTest() {
        HttpResponse res = new HttpResponse();
        res.setStatusCode(200);
        res.setStatus('OK');
        Test.setMock(HttpCalloutMock.class, new OASResponseMock(res));

        Map<String, Object> params = new Map<String, Object>{
            'post' => Boolean.getExample(),
            'apply' => Boolean.getExample(),
            'r_delete' => Boolean.getExample(),
            'action' => 'null',
            'location' => 'null',
            'propertylist' => new List<String>{''},
            'jobTopics' => new List<String>{''},
            'allowSelfProcessTermination' => Boolean.getExample()
        };

        OASClient client;
        OASConfigmgrApi api;
        OASComAdobeGraniteWorkflowCoreJobJob response;
        OASComAdobeGraniteWorkflowCoreJobJob expectedResponse;
        String js = '';

        client = new OASClient();
        api = new OASConfigmgrApi(client);

        js = JSON.serialize(OASComAdobeGraniteWorkflowCoreJobJob.getExample());
        res.setHeader('Content-Type', 'application/json');
        res.setBody(js);
        expectedResponse = OASComAdobeGraniteWorkflowCoreJobJob.getExample();
        response = (OASComAdobeGraniteWorkflowCoreJobJob) api.comAdobeGraniteWorkflowCoreJobJobHandler(params);
        System.assertEquals(expectedResponse, response);
    }

    /**
     * 
     *
     * 
     */
    @isTest
    private static void comAdobeGraniteWorkflowCoreOffloadingWorkflowOffloadingJobConsumTest() {
        HttpResponse res = new HttpResponse();
        res.setStatusCode(200);
        res.setStatus('OK');
        Test.setMock(HttpCalloutMock.class, new OASResponseMock(res));

        Map<String, Object> params = new Map<String, Object>{
            'post' => Boolean.getExample(),
            'apply' => Boolean.getExample(),
            'r_delete' => Boolean.getExample(),
            'action' => 'null',
            'location' => 'null',
            'propertylist' => new List<String>{''},
            'jobTopics' => 'null'
        };

        OASClient client;
        OASConfigmgrApi api;
        OASComAdobeGraniteWorkflowCoreOffloa response;
        OASComAdobeGraniteWorkflowCoreOffloa expectedResponse;
        String js = '';

        client = new OASClient();
        api = new OASConfigmgrApi(client);

        js = JSON.serialize(OASComAdobeGraniteWorkflowCoreOffloa.getExample());
        res.setHeader('Content-Type', 'application/json');
        res.setBody(js);
        expectedResponse = OASComAdobeGraniteWorkflowCoreOffloa.getExample();
        response = (OASComAdobeGraniteWorkflowCoreOffloa) api.comAdobeGraniteWorkflowCoreOffloadingWorkflowOffloadingJobConsum(params);
        System.assertEquals(expectedResponse, response);
    }

    /**
     * 
     *
     * 
     */
    @isTest
    private static void comAdobeGraniteWorkflowCorePayloadMapCacheTest() {
        HttpResponse res = new HttpResponse();
        res.setStatusCode(200);
        res.setStatus('OK');
        Test.setMock(HttpCalloutMock.class, new OASResponseMock(res));

        Map<String, Object> params = new Map<String, Object>{
            'post' => Boolean.getExample(),
            'apply' => Boolean.getExample(),
            'r_delete' => Boolean.getExample(),
            'action' => 'null',
            'location' => 'null',
            'propertylist' => new List<String>{''},
            'getSystemWorkflowModels' => new List<String>{''},
            'getPackageRootPath' => 'null'
        };

        OASClient client;
        OASConfigmgrApi api;
        OASComAdobeGraniteWorkflowCorePayloa response;
        OASComAdobeGraniteWorkflowCorePayloa expectedResponse;
        String js = '';

        client = new OASClient();
        api = new OASConfigmgrApi(client);

        js = JSON.serialize(OASComAdobeGraniteWorkflowCorePayloa.getExample());
        res.setHeader('Content-Type', 'application/json');
        res.setBody(js);
        expectedResponse = OASComAdobeGraniteWorkflowCorePayloa.getExample();
        response = (OASComAdobeGraniteWorkflowCorePayloa) api.comAdobeGraniteWorkflowCorePayloadMapCache(params);
        System.assertEquals(expectedResponse, response);
    }

    /**
     * 
     *
     * 
     */
    @isTest
    private static void comAdobeGraniteWorkflowCorePayloadmapPayloadMoveListenerTest() {
        HttpResponse res = new HttpResponse();
        res.setStatusCode(200);
        res.setStatus('OK');
        Test.setMock(HttpCalloutMock.class, new OASResponseMock(res));

        Map<String, Object> params = new Map<String, Object>{
            'post' => Boolean.getExample(),
            'apply' => Boolean.getExample(),
            'r_delete' => Boolean.getExample(),
            'action' => 'null',
            'location' => 'null',
            'propertylist' => new List<String>{''},
            'payloadMoveWhiteList' => new List<String>{''},
            'payloadMoveHandleFromWorkflowProcess' => Boolean.getExample()
        };

        OASClient client;
        OASConfigmgrApi api;
        OASComAdobeGraniteWorkflowCorePayloa response;
        OASComAdobeGraniteWorkflowCorePayloa expectedResponse;
        String js = '';

        client = new OASClient();
        api = new OASConfigmgrApi(client);

        js = JSON.serialize(OASComAdobeGraniteWorkflowCorePayloa.getExample());
        res.setHeader('Content-Type', 'application/json');
        res.setBody(js);
        expectedResponse = OASComAdobeGraniteWorkflowCorePayloa.getExample();
        response = (OASComAdobeGraniteWorkflowCorePayloa) api.comAdobeGraniteWorkflowCorePayloadmapPayloadMoveListener(params);
        System.assertEquals(expectedResponse, response);
    }

    /**
     * 
     *
     * 
     */
    @isTest
    private static void comAdobeGraniteWorkflowCoreWorkflowConfigTest() {
        HttpResponse res = new HttpResponse();
        res.setStatusCode(200);
        res.setStatus('OK');
        Test.setMock(HttpCalloutMock.class, new OASResponseMock(res));

        Map<String, Object> params = new Map<String, Object>{
            'post' => Boolean.getExample(),
            'apply' => Boolean.getExample(),
            'r_delete' => Boolean.getExample(),
            'action' => 'null',
            'location' => 'null',
            'propertylist' => new List<String>{''},
            'cqWorkflowConfigWorkflowPackagesRootPath' => new List<String>{''},
            'cqWorkflowConfigWorkflowProcessLegacyMode' => Boolean.getExample(),
            'cqWorkflowConfigAllowLocking' => Boolean.getExample()
        };

        OASClient client;
        OASConfigmgrApi api;
        OASComAdobeGraniteWorkflowCoreWorkfl response;
        OASComAdobeGraniteWorkflowCoreWorkfl expectedResponse;
        String js = '';

        client = new OASClient();
        api = new OASConfigmgrApi(client);

        js = JSON.serialize(OASComAdobeGraniteWorkflowCoreWorkfl.getExample());
        res.setHeader('Content-Type', 'application/json');
        res.setBody(js);
        expectedResponse = OASComAdobeGraniteWorkflowCoreWorkfl.getExample();
        response = (OASComAdobeGraniteWorkflowCoreWorkfl) api.comAdobeGraniteWorkflowCoreWorkflowConfig(params);
        System.assertEquals(expectedResponse, response);
    }

    /**
     * 
     *
     * 
     */
    @isTest
    private static void comAdobeGraniteWorkflowCoreWorkflowSessionFactoryTest() {
        HttpResponse res = new HttpResponse();
        res.setStatusCode(200);
        res.setStatus('OK');
        Test.setMock(HttpCalloutMock.class, new OASResponseMock(res));

        Map<String, Object> params = new Map<String, Object>{
            'post' => Boolean.getExample(),
            'apply' => Boolean.getExample(),
            'r_delete' => Boolean.getExample(),
            'action' => 'null',
            'location' => 'null',
            'propertylist' => new List<String>{''},
            'graniteWorkflowinboxSortPropertyName' => 'null',
            'graniteWorkflowinboxSortOrder' => 'null',
            'cqWorkflowJobRetry' => Integer.getExample(),
            'cqWorkflowSuperuser' => new List<String>{''},
            'graniteWorkflowInboxQuerySize' => Integer.getExample(),
            'graniteWorkflowAdminUserGroupFilter' => Boolean.getExample(),
            'graniteWorkflowEnforceWorkitemAssigneePermissions' => Boolean.getExample(),
            'graniteWorkflowEnforceWorkflowInitiatorPermissions' => Boolean.getExample(),
            'graniteWorkflowInjectTenantIdInJobTopics' => Boolean.getExample(),
            'graniteWorkflowMaxPurgeSaveThreshold' => Integer.getExample(),
            'graniteWorkflowMaxPurgeQueryCount' => Integer.getExample()
        };

        OASClient client;
        OASConfigmgrApi api;
        OASComAdobeGraniteWorkflowCoreWorkfl response;
        OASComAdobeGraniteWorkflowCoreWorkfl expectedResponse;
        String js = '';

        client = new OASClient();
        api = new OASConfigmgrApi(client);

        js = JSON.serialize(OASComAdobeGraniteWorkflowCoreWorkfl.getExample());
        res.setHeader('Content-Type', 'application/json');
        res.setBody(js);
        expectedResponse = OASComAdobeGraniteWorkflowCoreWorkfl.getExample();
        response = (OASComAdobeGraniteWorkflowCoreWorkfl) api.comAdobeGraniteWorkflowCoreWorkflowSessionFactory(params);
        System.assertEquals(expectedResponse, response);
    }

    /**
     * 
     *
     * 
     */
    @isTest
    private static void comAdobeGraniteWorkflowPurgeSchedulerTest() {
        HttpResponse res = new HttpResponse();
        res.setStatusCode(200);
        res.setStatus('OK');
        Test.setMock(HttpCalloutMock.class, new OASResponseMock(res));

        Map<String, Object> params = new Map<String, Object>{
            'post' => Boolean.getExample(),
            'apply' => Boolean.getExample(),
            'r_delete' => Boolean.getExample(),
            'action' => 'null',
            'location' => 'null',
            'propertylist' => new List<String>{''},
            'scheduledpurgeName' => 'null',
            'scheduledpurgeWorkflowStatus' => 'null',
            'scheduledpurgeModelIds' => new List<String>{''},
            'scheduledpurgeDaysold' => Integer.getExample()
        };

        OASClient client;
        OASConfigmgrApi api;
        OASComAdobeGraniteWorkflowPurgeSched response;
        OASComAdobeGraniteWorkflowPurgeSched expectedResponse;
        String js = '';

        client = new OASClient();
        api = new OASConfigmgrApi(client);

        js = JSON.serialize(OASComAdobeGraniteWorkflowPurgeSched.getExample());
        res.setHeader('Content-Type', 'application/json');
        res.setBody(js);
        expectedResponse = OASComAdobeGraniteWorkflowPurgeSched.getExample();
        response = (OASComAdobeGraniteWorkflowPurgeSched) api.comAdobeGraniteWorkflowPurgeScheduler(params);
        System.assertEquals(expectedResponse, response);
    }

    /**
     * 
     *
     * 
     */
    @isTest
    private static void comAdobeOctopusNcommBootstrapTest() {
        HttpResponse res = new HttpResponse();
        res.setStatusCode(200);
        res.setStatus('OK');
        Test.setMock(HttpCalloutMock.class, new OASResponseMock(res));

        Map<String, Object> params = new Map<String, Object>{
            'post' => Boolean.getExample(),
            'apply' => Boolean.getExample(),
            'r_delete' => Boolean.getExample(),
            'action' => 'null',
            'location' => 'null',
            'propertylist' => new List<String>{''},
            'maxConnections' => Integer.getExample(),
            'maxRequests' => Integer.getExample(),
            'requestTimeout' => Integer.getExample(),
            'requestRetries' => Integer.getExample(),
            'launchTimeout' => Integer.getExample()
        };

        OASClient client;
        OASConfigmgrApi api;
        OASComAdobeOctopusNcommBootstrapInfo response;
        OASComAdobeOctopusNcommBootstrapInfo expectedResponse;
        String js = '';

        client = new OASClient();
        api = new OASConfigmgrApi(client);

        js = JSON.serialize(OASComAdobeOctopusNcommBootstrapInfo.getExample());
        res.setHeader('Content-Type', 'application/json');
        res.setBody(js);
        expectedResponse = OASComAdobeOctopusNcommBootstrapInfo.getExample();
        response = (OASComAdobeOctopusNcommBootstrapInfo) api.comAdobeOctopusNcommBootstrap(params);
        System.assertEquals(expectedResponse, response);
    }

    /**
     * 
     *
     * 
     */
    @isTest
    private static void comAdobeSocialIntegrationsLivefyreUserPingforpullImplPingPullSTest() {
        HttpResponse res = new HttpResponse();
        res.setStatusCode(200);
        res.setStatus('OK');
        Test.setMock(HttpCalloutMock.class, new OASResponseMock(res));

        Map<String, Object> params = new Map<String, Object>{
            'post' => Boolean.getExample(),
            'apply' => Boolean.getExample(),
            'r_delete' => Boolean.getExample(),
            'action' => 'null',
            'location' => 'null',
            'propertylist' => new List<String>{''},
            'communitiesIntegrationLivefyreSlingEventFilter' => 'null'
        };

        OASClient client;
        OASConfigmgrApi api;
        OASComAdobeSocialIntegrationsLivefyr response;
        OASComAdobeSocialIntegrationsLivefyr expectedResponse;
        String js = '';

        client = new OASClient();
        api = new OASConfigmgrApi(client);

        js = JSON.serialize(OASComAdobeSocialIntegrationsLivefyr.getExample());
        res.setHeader('Content-Type', 'application/json');
        res.setBody(js);
        expectedResponse = OASComAdobeSocialIntegrationsLivefyr.getExample();
        response = (OASComAdobeSocialIntegrationsLivefyr) api.comAdobeSocialIntegrationsLivefyreUserPingforpullImplPingPullS(params);
        System.assertEquals(expectedResponse, response);
    }

    /**
     * 
     *
     * 
     */
    @isTest
    private static void comAdobeXmpWorkerFilesNcommXMPFilesNCommTest() {
        HttpResponse res = new HttpResponse();
        res.setStatusCode(200);
        res.setStatus('OK');
        Test.setMock(HttpCalloutMock.class, new OASResponseMock(res));

        Map<String, Object> params = new Map<String, Object>{
            'post' => Boolean.getExample(),
            'apply' => Boolean.getExample(),
            'r_delete' => Boolean.getExample(),
            'action' => 'null',
            'location' => 'null',
            'propertylist' => new List<String>{''},
            'maxConnections' => 'null',
            'maxRequests' => 'null',
            'requestTimeout' => 'null',
            'logDir' => 'null'
        };

        OASClient client;
        OASConfigmgrApi api;
        OASComAdobeXmpWorkerFilesNcommXMPFil response;
        OASComAdobeXmpWorkerFilesNcommXMPFil expectedResponse;
        String js = '';

        client = new OASClient();
        api = new OASConfigmgrApi(client);

        js = JSON.serialize(OASComAdobeXmpWorkerFilesNcommXMPFil.getExample());
        res.setHeader('Content-Type', 'application/json');
        res.setBody(js);
        expectedResponse = OASComAdobeXmpWorkerFilesNcommXMPFil.getExample();
        response = (OASComAdobeXmpWorkerFilesNcommXMPFil) api.comAdobeXmpWorkerFilesNcommXMPFilesNComm(params);
        System.assertEquals(expectedResponse, response);
    }

    /**
     * 
     *
     * 
     */
    @isTest
    private static void comDayCommonsDatasourceJdbcpoolJdbcPoolServiceTest() {
        HttpResponse res = new HttpResponse();
        res.setStatusCode(200);
        res.setStatus('OK');
        Test.setMock(HttpCalloutMock.class, new OASResponseMock(res));

        Map<String, Object> params = new Map<String, Object>{
            'post' => Boolean.getExample(),
            'apply' => Boolean.getExample(),
            'r_delete' => Boolean.getExample(),
            'action' => 'null',
            'location' => 'null',
            'propertylist' => new List<String>{''},
            'jdbcDriverClass' => 'null',
            'jdbcConnectionUri' => 'null',
            'jdbcUsername' => 'null',
            'jdbcPassword' => 'null',
            'jdbcValidationQuery' => 'null',
            'defaultReadonly' => Boolean.getExample(),
            'defaultAutocommit' => Boolean.getExample(),
            'poolSize' => Integer.getExample(),
            'poolMaxWaitMsec' => Integer.getExample(),
            'datasourceName' => 'null',
            'datasourceSvcProperties' => new List<String>{''}
        };

        OASClient client;
        OASConfigmgrApi api;
        OASComDayCommonsDatasourceJdbcpoolJd response;
        OASComDayCommonsDatasourceJdbcpoolJd expectedResponse;
        String js = '';

        client = new OASClient();
        api = new OASConfigmgrApi(client);

        js = JSON.serialize(OASComDayCommonsDatasourceJdbcpoolJd.getExample());
        res.setHeader('Content-Type', 'application/json');
        res.setBody(js);
        expectedResponse = OASComDayCommonsDatasourceJdbcpoolJd.getExample();
        response = (OASComDayCommonsDatasourceJdbcpoolJd) api.comDayCommonsDatasourceJdbcpoolJdbcPoolService(params);
        System.assertEquals(expectedResponse, response);
    }

    /**
     * 
     *
     * 
     */
    @isTest
    private static void comDayCommonsHttpclientTest() {
        HttpResponse res = new HttpResponse();
        res.setStatusCode(200);
        res.setStatus('OK');
        Test.setMock(HttpCalloutMock.class, new OASResponseMock(res));

        Map<String, Object> params = new Map<String, Object>{
            'post' => Boolean.getExample(),
            'apply' => Boolean.getExample(),
            'r_delete' => Boolean.getExample(),
            'action' => 'null',
            'location' => 'null',
            'propertylist' => new List<String>{''},
            'proxyEnabled' => Boolean.getExample(),
            'proxyHost' => 'null',
            'proxyUser' => 'null',
            'proxyPassword' => 'null',
            'proxyNtlmHost' => 'null',
            'proxyNtlmDomain' => 'null',
            'proxyExceptions' => new List<String>{''}
        };

        OASClient client;
        OASConfigmgrApi api;
        OASComDayCommonsHttpclientInfo response;
        OASComDayCommonsHttpclientInfo expectedResponse;
        String js = '';

        client = new OASClient();
        api = new OASConfigmgrApi(client);

        js = JSON.serialize(OASComDayCommonsHttpclientInfo.getExample());
        res.setHeader('Content-Type', 'application/json');
        res.setBody(js);
        expectedResponse = OASComDayCommonsHttpclientInfo.getExample();
        response = (OASComDayCommonsHttpclientInfo) api.comDayCommonsHttpclient(params);
        System.assertEquals(expectedResponse, response);
    }

    /**
     * 
     *
     * 
     */
    @isTest
    private static void comDayCqAnalyticsImplStorePropertiesChangeListenerTest() {
        HttpResponse res = new HttpResponse();
        res.setStatusCode(200);
        res.setStatus('OK');
        Test.setMock(HttpCalloutMock.class, new OASResponseMock(res));

        Map<String, Object> params = new Map<String, Object>{
            'post' => Boolean.getExample(),
            'apply' => Boolean.getExample(),
            'r_delete' => Boolean.getExample(),
            'action' => 'null',
            'location' => 'null',
            'propertylist' => new List<String>{''},
            'cqStoreListenerAdditionalStorePaths' => new List<String>{''}
        };

        OASClient client;
        OASConfigmgrApi api;
        OASComDayCqAnalyticsImplStorePropert response;
        OASComDayCqAnalyticsImplStorePropert expectedResponse;
        String js = '';

        client = new OASClient();
        api = new OASConfigmgrApi(client);

        js = JSON.serialize(OASComDayCqAnalyticsImplStorePropert.getExample());
        res.setHeader('Content-Type', 'application/json');
        res.setBody(js);
        expectedResponse = OASComDayCqAnalyticsImplStorePropert.getExample();
        response = (OASComDayCqAnalyticsImplStorePropert) api.comDayCqAnalyticsImplStorePropertiesChangeListener(params);
        System.assertEquals(expectedResponse, response);
    }

    /**
     * 
     *
     * 
     */
    @isTest
    private static void comDayCqAnalyticsSitecatalystImplExporterClassificationsExporteTest() {
        HttpResponse res = new HttpResponse();
        res.setStatusCode(200);
        res.setStatus('OK');
        Test.setMock(HttpCalloutMock.class, new OASResponseMock(res));

        Map<String, Object> params = new Map<String, Object>{
            'post' => Boolean.getExample(),
            'apply' => Boolean.getExample(),
            'r_delete' => Boolean.getExample(),
            'action' => 'null',
            'location' => 'null',
            'propertylist' => new List<String>{''},
            'allowedPaths' => new List<String>{''},
            'cqAnalyticsSaintExporterPagesize' => Integer.getExample()
        };

        OASClient client;
        OASConfigmgrApi api;
        OASComDayCqAnalyticsSitecatalystImpl response;
        OASComDayCqAnalyticsSitecatalystImpl expectedResponse;
        String js = '';

        client = new OASClient();
        api = new OASConfigmgrApi(client);

        js = JSON.serialize(OASComDayCqAnalyticsSitecatalystImpl.getExample());
        res.setHeader('Content-Type', 'application/json');
        res.setBody(js);
        expectedResponse = OASComDayCqAnalyticsSitecatalystImpl.getExample();
        response = (OASComDayCqAnalyticsSitecatalystImpl) api.comDayCqAnalyticsSitecatalystImplExporterClassificationsExporte(params);
        System.assertEquals(expectedResponse, response);
    }

    /**
     * 
     *
     * 
     */
    @isTest
    private static void comDayCqAnalyticsSitecatalystImplImporterReportImporterTest() {
        HttpResponse res = new HttpResponse();
        res.setStatusCode(200);
        res.setStatus('OK');
        Test.setMock(HttpCalloutMock.class, new OASResponseMock(res));

        Map<String, Object> params = new Map<String, Object>{
            'post' => Boolean.getExample(),
            'apply' => Boolean.getExample(),
            'r_delete' => Boolean.getExample(),
            'action' => 'null',
            'location' => 'null',
            'propertylist' => new List<String>{''},
            'reportFetchAttempts' => Integer.getExample(),
            'reportFetchDelay' => Integer.getExample()
        };

        OASClient client;
        OASConfigmgrApi api;
        OASComDayCqAnalyticsSitecatalystImpl response;
        OASComDayCqAnalyticsSitecatalystImpl expectedResponse;
        String js = '';

        client = new OASClient();
        api = new OASConfigmgrApi(client);

        js = JSON.serialize(OASComDayCqAnalyticsSitecatalystImpl.getExample());
        res.setHeader('Content-Type', 'application/json');
        res.setBody(js);
        expectedResponse = OASComDayCqAnalyticsSitecatalystImpl.getExample();
        response = (OASComDayCqAnalyticsSitecatalystImpl) api.comDayCqAnalyticsSitecatalystImplImporterReportImporter(params);
        System.assertEquals(expectedResponse, response);
    }

    /**
     * 
     *
     * 
     */
    @isTest
    private static void comDayCqAnalyticsSitecatalystImplSitecatalystAdapterFactoryTest() {
        HttpResponse res = new HttpResponse();
        res.setStatusCode(200);
        res.setStatus('OK');
        Test.setMock(HttpCalloutMock.class, new OASResponseMock(res));

        Map<String, Object> params = new Map<String, Object>{
            'post' => Boolean.getExample(),
            'apply' => Boolean.getExample(),
            'r_delete' => Boolean.getExample(),
            'action' => 'null',
            'location' => 'null',
            'propertylist' => new List<String>{''},
            'cqAnalyticsAdapterfactoryContextstores' => new List<String>{''}
        };

        OASClient client;
        OASConfigmgrApi api;
        OASComDayCqAnalyticsSitecatalystImpl response;
        OASComDayCqAnalyticsSitecatalystImpl expectedResponse;
        String js = '';

        client = new OASClient();
        api = new OASConfigmgrApi(client);

        js = JSON.serialize(OASComDayCqAnalyticsSitecatalystImpl.getExample());
        res.setHeader('Content-Type', 'application/json');
        res.setBody(js);
        expectedResponse = OASComDayCqAnalyticsSitecatalystImpl.getExample();
        response = (OASComDayCqAnalyticsSitecatalystImpl) api.comDayCqAnalyticsSitecatalystImplSitecatalystAdapterFactory(params);
        System.assertEquals(expectedResponse, response);
    }

    /**
     * 
     *
     * 
     */
    @isTest
    private static void comDayCqAnalyticsSitecatalystImplSitecatalystHttpClientImplTest() {
        HttpResponse res = new HttpResponse();
        res.setStatusCode(200);
        res.setStatus('OK');
        Test.setMock(HttpCalloutMock.class, new OASResponseMock(res));

        Map<String, Object> params = new Map<String, Object>{
            'post' => Boolean.getExample(),
            'apply' => Boolean.getExample(),
            'r_delete' => Boolean.getExample(),
            'action' => 'null',
            'location' => 'null',
            'propertylist' => new List<String>{''},
            'cqAnalyticsSitecatalystServiceDatacenterUrl' => new List<String>{''},
            'devhostnamepatterns' => new List<String>{''},
            'connectionTimeout' => Integer.getExample(),
            'socketTimeout' => Integer.getExample()
        };

        OASClient client;
        OASConfigmgrApi api;
        OASComDayCqAnalyticsSitecatalystImpl response;
        OASComDayCqAnalyticsSitecatalystImpl expectedResponse;
        String js = '';

        client = new OASClient();
        api = new OASConfigmgrApi(client);

        js = JSON.serialize(OASComDayCqAnalyticsSitecatalystImpl.getExample());
        res.setHeader('Content-Type', 'application/json');
        res.setBody(js);
        expectedResponse = OASComDayCqAnalyticsSitecatalystImpl.getExample();
        response = (OASComDayCqAnalyticsSitecatalystImpl) api.comDayCqAnalyticsSitecatalystImplSitecatalystHttpClientImpl(params);
        System.assertEquals(expectedResponse, response);
    }

    /**
     * 
     *
     * 
     */
    @isTest
    private static void comDayCqAnalyticsTestandtargetImplAccountOptionsUpdaterTest() {
        HttpResponse res = new HttpResponse();
        res.setStatusCode(200);
        res.setStatus('OK');
        Test.setMock(HttpCalloutMock.class, new OASResponseMock(res));

        Map<String, Object> params = new Map<String, Object>{
            'post' => Boolean.getExample(),
            'apply' => Boolean.getExample(),
            'r_delete' => Boolean.getExample(),
            'action' => 'null',
            'location' => 'null',
            'propertylist' => new List<String>{''},
            'cqAnalyticsTestandtargetAccountoptionsupdaterEnabled' => Boolean.getExample()
        };

        OASClient client;
        OASConfigmgrApi api;
        OASComDayCqAnalyticsTestandtargetImp response;
        OASComDayCqAnalyticsTestandtargetImp expectedResponse;
        String js = '';

        client = new OASClient();
        api = new OASConfigmgrApi(client);

        js = JSON.serialize(OASComDayCqAnalyticsTestandtargetImp.getExample());
        res.setHeader('Content-Type', 'application/json');
        res.setBody(js);
        expectedResponse = OASComDayCqAnalyticsTestandtargetImp.getExample();
        response = (OASComDayCqAnalyticsTestandtargetImp) api.comDayCqAnalyticsTestandtargetImplAccountOptionsUpdater(params);
        System.assertEquals(expectedResponse, response);
    }

    /**
     * 
     *
     * 
     */
    @isTest
    private static void comDayCqAnalyticsTestandtargetImplDeleteAuthorActivityListenerTest() {
        HttpResponse res = new HttpResponse();
        res.setStatusCode(200);
        res.setStatus('OK');
        Test.setMock(HttpCalloutMock.class, new OASResponseMock(res));

        Map<String, Object> params = new Map<String, Object>{
            'post' => Boolean.getExample(),
            'apply' => Boolean.getExample(),
            'r_delete' => Boolean.getExample(),
            'action' => 'null',
            'location' => 'null',
            'propertylist' => new List<String>{''},
            'cqAnalyticsTestandtargetDeleteauthoractivitylistenerEnabled' => Boolean.getExample()
        };

        OASClient client;
        OASConfigmgrApi api;
        OASComDayCqAnalyticsTestandtargetImp response;
        OASComDayCqAnalyticsTestandtargetImp expectedResponse;
        String js = '';

        client = new OASClient();
        api = new OASConfigmgrApi(client);

        js = JSON.serialize(OASComDayCqAnalyticsTestandtargetImp.getExample());
        res.setHeader('Content-Type', 'application/json');
        res.setBody(js);
        expectedResponse = OASComDayCqAnalyticsTestandtargetImp.getExample();
        response = (OASComDayCqAnalyticsTestandtargetImp) api.comDayCqAnalyticsTestandtargetImplDeleteAuthorActivityListener(params);
        System.assertEquals(expectedResponse, response);
    }

    /**
     * 
     *
     * 
     */
    @isTest
    private static void comDayCqAnalyticsTestandtargetImplPushAuthorCampaignPageListenerTest() {
        HttpResponse res = new HttpResponse();
        res.setStatusCode(200);
        res.setStatus('OK');
        Test.setMock(HttpCalloutMock.class, new OASResponseMock(res));

        Map<String, Object> params = new Map<String, Object>{
            'post' => Boolean.getExample(),
            'apply' => Boolean.getExample(),
            'r_delete' => Boolean.getExample(),
            'action' => 'null',
            'location' => 'null',
            'propertylist' => new List<String>{''},
            'cqAnalyticsTestandtargetPushauthorcampaignpagelistenerEnabled' => Boolean.getExample()
        };

        OASClient client;
        OASConfigmgrApi api;
        OASComDayCqAnalyticsTestandtargetImp response;
        OASComDayCqAnalyticsTestandtargetImp expectedResponse;
        String js = '';

        client = new OASClient();
        api = new OASConfigmgrApi(client);

        js = JSON.serialize(OASComDayCqAnalyticsTestandtargetImp.getExample());
        res.setHeader('Content-Type', 'application/json');
        res.setBody(js);
        expectedResponse = OASComDayCqAnalyticsTestandtargetImp.getExample();
        response = (OASComDayCqAnalyticsTestandtargetImp) api.comDayCqAnalyticsTestandtargetImplPushAuthorCampaignPageListener(params);
        System.assertEquals(expectedResponse, response);
    }

    /**
     * 
     *
     * 
     */
    @isTest
    private static void comDayCqAnalyticsTestandtargetImplSegmentImporterTest() {
        HttpResponse res = new HttpResponse();
        res.setStatusCode(200);
        res.setStatus('OK');
        Test.setMock(HttpCalloutMock.class, new OASResponseMock(res));

        Map<String, Object> params = new Map<String, Object>{
            'post' => Boolean.getExample(),
            'apply' => Boolean.getExample(),
            'r_delete' => Boolean.getExample(),
            'action' => 'null',
            'location' => 'null',
            'propertylist' => new List<String>{''},
            'cqAnalyticsTestandtargetSegmentimporterEnabled' => Boolean.getExample()
        };

        OASClient client;
        OASConfigmgrApi api;
        OASComDayCqAnalyticsTestandtargetImp response;
        OASComDayCqAnalyticsTestandtargetImp expectedResponse;
        String js = '';

        client = new OASClient();
        api = new OASConfigmgrApi(client);

        js = JSON.serialize(OASComDayCqAnalyticsTestandtargetImp.getExample());
        res.setHeader('Content-Type', 'application/json');
        res.setBody(js);
        expectedResponse = OASComDayCqAnalyticsTestandtargetImp.getExample();
        response = (OASComDayCqAnalyticsTestandtargetImp) api.comDayCqAnalyticsTestandtargetImplSegmentImporter(params);
        System.assertEquals(expectedResponse, response);
    }

    /**
     * 
     *
     * 
     */
    @isTest
    private static void comDayCqAnalyticsTestandtargetImplServiceWebServiceImplTest() {
        HttpResponse res = new HttpResponse();
        res.setStatusCode(200);
        res.setStatus('OK');
        Test.setMock(HttpCalloutMock.class, new OASResponseMock(res));

        Map<String, Object> params = new Map<String, Object>{
            'post' => Boolean.getExample(),
            'apply' => Boolean.getExample(),
            'r_delete' => Boolean.getExample(),
            'action' => 'null',
            'location' => 'null',
            'propertylist' => new List<String>{''},
            'endpointUri' => 'null',
            'connectionTimeout' => Integer.getExample(),
            'socketTimeout' => Integer.getExample()
        };

        OASClient client;
        OASConfigmgrApi api;
        OASComDayCqAnalyticsTestandtargetImp response;
        OASComDayCqAnalyticsTestandtargetImp expectedResponse;
        String js = '';

        client = new OASClient();
        api = new OASConfigmgrApi(client);

        js = JSON.serialize(OASComDayCqAnalyticsTestandtargetImp.getExample());
        res.setHeader('Content-Type', 'application/json');
        res.setBody(js);
        expectedResponse = OASComDayCqAnalyticsTestandtargetImp.getExample();
        response = (OASComDayCqAnalyticsTestandtargetImp) api.comDayCqAnalyticsTestandtargetImplServiceWebServiceImpl(params);
        System.assertEquals(expectedResponse, response);
    }

    /**
     * 
     *
     * 
     */
    @isTest
    private static void comDayCqAnalyticsTestandtargetImplServletsAdminServerServletTest() {
        HttpResponse res = new HttpResponse();
        res.setStatusCode(200);
        res.setStatus('OK');
        Test.setMock(HttpCalloutMock.class, new OASResponseMock(res));

        Map<String, Object> params = new Map<String, Object>{
            'post' => Boolean.getExample(),
            'apply' => Boolean.getExample(),
            'r_delete' => Boolean.getExample(),
            'action' => 'null',
            'location' => 'null',
            'propertylist' => new List<String>{''},
            'testandtargetEndpointUrl' => 'null'
        };

        OASClient client;
        OASConfigmgrApi api;
        OASComDayCqAnalyticsTestandtargetImp response;
        OASComDayCqAnalyticsTestandtargetImp expectedResponse;
        String js = '';

        client = new OASClient();
        api = new OASConfigmgrApi(client);

        js = JSON.serialize(OASComDayCqAnalyticsTestandtargetImp.getExample());
        res.setHeader('Content-Type', 'application/json');
        res.setBody(js);
        expectedResponse = OASComDayCqAnalyticsTestandtargetImp.getExample();
        response = (OASComDayCqAnalyticsTestandtargetImp) api.comDayCqAnalyticsTestandtargetImplServletsAdminServerServlet(params);
        System.assertEquals(expectedResponse, response);
    }

    /**
     * 
     *
     * 
     */
    @isTest
    private static void comDayCqAnalyticsTestandtargetImplTestandtargetHttpClientImplTest() {
        HttpResponse res = new HttpResponse();
        res.setStatusCode(200);
        res.setStatus('OK');
        Test.setMock(HttpCalloutMock.class, new OASResponseMock(res));

        Map<String, Object> params = new Map<String, Object>{
            'post' => Boolean.getExample(),
            'apply' => Boolean.getExample(),
            'r_delete' => Boolean.getExample(),
            'action' => 'null',
            'location' => 'null',
            'propertylist' => new List<String>{''},
            'cqAnalyticsTestandtargetApiUrl' => 'null',
            'cqAnalyticsTestandtargetTimeout' => Integer.getExample(),
            'cqAnalyticsTestandtargetSockettimeout' => Integer.getExample(),
            'cqAnalyticsTestandtargetRecommendationsUrlReplace' => 'null',
            'cqAnalyticsTestandtargetRecommendationsUrlReplacewith' => 'null'
        };

        OASClient client;
        OASConfigmgrApi api;
        OASComDayCqAnalyticsTestandtargetImp response;
        OASComDayCqAnalyticsTestandtargetImp expectedResponse;
        String js = '';

        client = new OASClient();
        api = new OASConfigmgrApi(client);

        js = JSON.serialize(OASComDayCqAnalyticsTestandtargetImp.getExample());
        res.setHeader('Content-Type', 'application/json');
        res.setBody(js);
        expectedResponse = OASComDayCqAnalyticsTestandtargetImp.getExample();
        response = (OASComDayCqAnalyticsTestandtargetImp) api.comDayCqAnalyticsTestandtargetImplTestandtargetHttpClientImpl(params);
        System.assertEquals(expectedResponse, response);
    }

    /**
     * 
     *
     * 
     */
    @isTest
    private static void comDayCqAuthImplCugCugSupportImplTest() {
        HttpResponse res = new HttpResponse();
        res.setStatusCode(200);
        res.setStatus('OK');
        Test.setMock(HttpCalloutMock.class, new OASResponseMock(res));

        Map<String, Object> params = new Map<String, Object>{
            'post' => Boolean.getExample(),
            'apply' => Boolean.getExample(),
            'r_delete' => Boolean.getExample(),
            'action' => 'null',
            'location' => 'null',
            'propertylist' => new List<String>{''},
            'cugExemptedPrincipals' => new List<String>{''},
            'cugEnabled' => Boolean.getExample(),
            'cugPrincipalsRegex' => 'null',
            'cugPrincipalsReplacement' => 'null'
        };

        OASClient client;
        OASConfigmgrApi api;
        OASComDayCqAuthImplCugCugSupportImpl response;
        OASComDayCqAuthImplCugCugSupportImpl expectedResponse;
        String js = '';

        client = new OASClient();
        api = new OASConfigmgrApi(client);

        js = JSON.serialize(OASComDayCqAuthImplCugCugSupportImpl.getExample());
        res.setHeader('Content-Type', 'application/json');
        res.setBody(js);
        expectedResponse = OASComDayCqAuthImplCugCugSupportImpl.getExample();
        response = (OASComDayCqAuthImplCugCugSupportImpl) api.comDayCqAuthImplCugCugSupportImpl(params);
        System.assertEquals(expectedResponse, response);
    }

    /**
     * 
     *
     * 
     */
    @isTest
    private static void comDayCqAuthImplLoginSelectorHandlerTest() {
        HttpResponse res = new HttpResponse();
        res.setStatusCode(200);
        res.setStatus('OK');
        Test.setMock(HttpCalloutMock.class, new OASResponseMock(res));

        Map<String, Object> params = new Map<String, Object>{
            'post' => Boolean.getExample(),
            'apply' => Boolean.getExample(),
            'r_delete' => Boolean.getExample(),
            'action' => 'null',
            'location' => 'null',
            'propertylist' => new List<String>{''},
            'path' => 'null',
            'serviceRanking' => Integer.getExample(),
            'authLoginselectorMappings' => new List<String>{''},
            'authLoginselectorChangepwMappings' => new List<String>{''},
            'authLoginselectorDefaultloginpage' => 'null',
            'authLoginselectorDefaultchangepwpage' => 'null',
            'authLoginselectorHandle' => new List<String>{''},
            'authLoginselectorHandleAllExtensions' => Boolean.getExample()
        };

        OASClient client;
        OASConfigmgrApi api;
        OASComDayCqAuthImplLoginSelectorHand response;
        OASComDayCqAuthImplLoginSelectorHand expectedResponse;
        String js = '';

        client = new OASClient();
        api = new OASConfigmgrApi(client);

        js = JSON.serialize(OASComDayCqAuthImplLoginSelectorHand.getExample());
        res.setHeader('Content-Type', 'application/json');
        res.setBody(js);
        expectedResponse = OASComDayCqAuthImplLoginSelectorHand.getExample();
        response = (OASComDayCqAuthImplLoginSelectorHand) api.comDayCqAuthImplLoginSelectorHandler(params);
        System.assertEquals(expectedResponse, response);
    }

    /**
     * 
     *
     * 
     */
    @isTest
    private static void comDayCqCommonsImplExternalizerImplTest() {
        HttpResponse res = new HttpResponse();
        res.setStatusCode(200);
        res.setStatus('OK');
        Test.setMock(HttpCalloutMock.class, new OASResponseMock(res));

        Map<String, Object> params = new Map<String, Object>{
            'post' => Boolean.getExample(),
            'apply' => Boolean.getExample(),
            'r_delete' => Boolean.getExample(),
            'action' => 'null',
            'location' => 'null',
            'propertylist' => new List<String>{''},
            'externalizerDomains' => new List<String>{''},
            'externalizerHost' => 'null',
            'externalizerContextpath' => 'null',
            'externalizerEncodedpath' => Boolean.getExample()
        };

        OASClient client;
        OASConfigmgrApi api;
        OASComDayCqCommonsImplExternalizerIm response;
        OASComDayCqCommonsImplExternalizerIm expectedResponse;
        String js = '';

        client = new OASClient();
        api = new OASConfigmgrApi(client);

        js = JSON.serialize(OASComDayCqCommonsImplExternalizerIm.getExample());
        res.setHeader('Content-Type', 'application/json');
        res.setBody(js);
        expectedResponse = OASComDayCqCommonsImplExternalizerIm.getExample();
        response = (OASComDayCqCommonsImplExternalizerIm) api.comDayCqCommonsImplExternalizerImpl(params);
        System.assertEquals(expectedResponse, response);
    }

    /**
     * 
     *
     * 
     */
    @isTest
    private static void comDayCqCommonsServletsRootMappingServletTest() {
        HttpResponse res = new HttpResponse();
        res.setStatusCode(200);
        res.setStatus('OK');
        Test.setMock(HttpCalloutMock.class, new OASResponseMock(res));

        Map<String, Object> params = new Map<String, Object>{
            'post' => Boolean.getExample(),
            'apply' => Boolean.getExample(),
            'r_delete' => Boolean.getExample(),
            'action' => 'null',
            'location' => 'null',
            'propertylist' => new List<String>{''},
            'rootmappingTarget' => 'null'
        };

        OASClient client;
        OASConfigmgrApi api;
        OASComDayCqCommonsServletsRootMappin response;
        OASComDayCqCommonsServletsRootMappin expectedResponse;
        String js = '';

        client = new OASClient();
        api = new OASConfigmgrApi(client);

        js = JSON.serialize(OASComDayCqCommonsServletsRootMappin.getExample());
        res.setHeader('Content-Type', 'application/json');
        res.setBody(js);
        expectedResponse = OASComDayCqCommonsServletsRootMappin.getExample();
        response = (OASComDayCqCommonsServletsRootMappin) api.comDayCqCommonsServletsRootMappingServlet(params);
        System.assertEquals(expectedResponse, response);
    }

    /**
     * 
     *
     * 
     */
    @isTest
    private static void comDayCqCompatCodeupgradeImplCodeUpgradeExecutionConditionCheckeTest() {
        HttpResponse res = new HttpResponse();
        res.setStatusCode(200);
        res.setStatus('OK');
        Test.setMock(HttpCalloutMock.class, new OASResponseMock(res));

        Map<String, Object> params = new Map<String, Object>{
            'post' => Boolean.getExample(),
            'apply' => Boolean.getExample(),
            'r_delete' => Boolean.getExample(),
            'action' => 'null',
            'location' => 'null',
            'propertylist' => new List<String>{''},
            'codeupgradetasks' => new List<String>{''},
            'codeupgradetaskfilters' => new List<String>{''}
        };

        OASClient client;
        OASConfigmgrApi api;
        OASComDayCqCompatCodeupgradeImplCode response;
        OASComDayCqCompatCodeupgradeImplCode expectedResponse;
        String js = '';

        client = new OASClient();
        api = new OASConfigmgrApi(client);

        js = JSON.serialize(OASComDayCqCompatCodeupgradeImplCode.getExample());
        res.setHeader('Content-Type', 'application/json');
        res.setBody(js);
        expectedResponse = OASComDayCqCompatCodeupgradeImplCode.getExample();
        response = (OASComDayCqCompatCodeupgradeImplCode) api.comDayCqCompatCodeupgradeImplCodeUpgradeExecutionConditionChecke(params);
        System.assertEquals(expectedResponse, response);
    }

    /**
     * 
     *
     * 
     */
    @isTest
    private static void comDayCqCompatCodeupgradeImplUpgradeTaskIgnoreListTest() {
        HttpResponse res = new HttpResponse();
        res.setStatusCode(200);
        res.setStatus('OK');
        Test.setMock(HttpCalloutMock.class, new OASResponseMock(res));

        Map<String, Object> params = new Map<String, Object>{
            'post' => Boolean.getExample(),
            'apply' => Boolean.getExample(),
            'r_delete' => Boolean.getExample(),
            'action' => 'null',
            'location' => 'null',
            'propertylist' => new List<String>{''},
            'upgradeTaskIgnoreList' => new List<String>{''}
        };

        OASClient client;
        OASConfigmgrApi api;
        OASComDayCqCompatCodeupgradeImplUpgr response;
        OASComDayCqCompatCodeupgradeImplUpgr expectedResponse;
        String js = '';

        client = new OASClient();
        api = new OASConfigmgrApi(client);

        js = JSON.serialize(OASComDayCqCompatCodeupgradeImplUpgr.getExample());
        res.setHeader('Content-Type', 'application/json');
        res.setBody(js);
        expectedResponse = OASComDayCqCompatCodeupgradeImplUpgr.getExample();
        response = (OASComDayCqCompatCodeupgradeImplUpgr) api.comDayCqCompatCodeupgradeImplUpgradeTaskIgnoreList(params);
        System.assertEquals(expectedResponse, response);
    }

    /**
     * 
     *
     * 
     */
    @isTest
    private static void comDayCqCompatCodeupgradeImplVersionRangeTaskIgnorelistTest() {
        HttpResponse res = new HttpResponse();
        res.setStatusCode(200);
        res.setStatus('OK');
        Test.setMock(HttpCalloutMock.class, new OASResponseMock(res));

        Map<String, Object> params = new Map<String, Object>{
            'post' => Boolean.getExample(),
            'apply' => Boolean.getExample(),
            'r_delete' => Boolean.getExample(),
            'action' => 'null',
            'location' => 'null',
            'propertylist' => new List<String>{''},
            'effectiveBundleListPath' => 'null'
        };

        OASClient client;
        OASConfigmgrApi api;
        OASComDayCqCompatCodeupgradeImplVers response;
        OASComDayCqCompatCodeupgradeImplVers expectedResponse;
        String js = '';

        client = new OASClient();
        api = new OASConfigmgrApi(client);

        js = JSON.serialize(OASComDayCqCompatCodeupgradeImplVers.getExample());
        res.setHeader('Content-Type', 'application/json');
        res.setBody(js);
        expectedResponse = OASComDayCqCompatCodeupgradeImplVers.getExample();
        response = (OASComDayCqCompatCodeupgradeImplVers) api.comDayCqCompatCodeupgradeImplVersionRangeTaskIgnorelist(params);
        System.assertEquals(expectedResponse, response);
    }

    /**
     * 
     *
     * 
     */
    @isTest
    private static void comDayCqContentsyncImplContentSyncManagerImplTest() {
        HttpResponse res = new HttpResponse();
        res.setStatusCode(200);
        res.setStatus('OK');
        Test.setMock(HttpCalloutMock.class, new OASResponseMock(res));

        Map<String, Object> params = new Map<String, Object>{
            'post' => Boolean.getExample(),
            'apply' => Boolean.getExample(),
            'r_delete' => Boolean.getExample(),
            'action' => 'null',
            'location' => 'null',
            'propertylist' => new List<String>{''},
            'contentsyncFallbackAuthorizable' => 'null',
            'contentsyncFallbackUpdateuser' => 'null'
        };

        OASClient client;
        OASConfigmgrApi api;
        OASComDayCqContentsyncImplContentSyn response;
        OASComDayCqContentsyncImplContentSyn expectedResponse;
        String js = '';

        client = new OASClient();
        api = new OASConfigmgrApi(client);

        js = JSON.serialize(OASComDayCqContentsyncImplContentSyn.getExample());
        res.setHeader('Content-Type', 'application/json');
        res.setBody(js);
        expectedResponse = OASComDayCqContentsyncImplContentSyn.getExample();
        response = (OASComDayCqContentsyncImplContentSyn) api.comDayCqContentsyncImplContentSyncManagerImpl(params);
        System.assertEquals(expectedResponse, response);
    }

    /**
     * 
     *
     * 
     */
    @isTest
    private static void comDayCqDamCommonsHandlerStandardImageHandlerTest() {
        HttpResponse res = new HttpResponse();
        res.setStatusCode(200);
        res.setStatus('OK');
        Test.setMock(HttpCalloutMock.class, new OASResponseMock(res));

        Map<String, Object> params = new Map<String, Object>{
            'post' => Boolean.getExample(),
            'apply' => Boolean.getExample(),
            'r_delete' => Boolean.getExample(),
            'action' => 'null',
            'location' => 'null',
            'propertylist' => new List<String>{''},
            'largeFileThreshold' => Integer.getExample(),
            'largeCommentThreshold' => Integer.getExample(),
            'cqDamEnableExtMetaExtraction' => Boolean.getExample()
        };

        OASClient client;
        OASConfigmgrApi api;
        OASComDayCqDamCommonsHandlerStandard response;
        OASComDayCqDamCommonsHandlerStandard expectedResponse;
        String js = '';

        client = new OASClient();
        api = new OASConfigmgrApi(client);

        js = JSON.serialize(OASComDayCqDamCommonsHandlerStandard.getExample());
        res.setHeader('Content-Type', 'application/json');
        res.setBody(js);
        expectedResponse = OASComDayCqDamCommonsHandlerStandard.getExample();
        response = (OASComDayCqDamCommonsHandlerStandard) api.comDayCqDamCommonsHandlerStandardImageHandler(params);
        System.assertEquals(expectedResponse, response);
    }

    /**
     * 
     *
     * 
     */
    @isTest
    private static void comDayCqDamCommonsMetadataXmpFilterBlackWhiteTest() {
        HttpResponse res = new HttpResponse();
        res.setStatusCode(200);
        res.setStatus('OK');
        Test.setMock(HttpCalloutMock.class, new OASResponseMock(res));

        Map<String, Object> params = new Map<String, Object>{
            'post' => Boolean.getExample(),
            'apply' => Boolean.getExample(),
            'r_delete' => Boolean.getExample(),
            'action' => 'null',
            'location' => 'null',
            'propertylist' => new List<String>{''},
            'xmpFilterApplyWhitelist' => Boolean.getExample(),
            'xmpFilterWhitelist' => new List<String>{''},
            'xmpFilterApplyBlacklist' => Boolean.getExample(),
            'xmpFilterBlacklist' => new List<String>{''}
        };

        OASClient client;
        OASConfigmgrApi api;
        OASComDayCqDamCommonsMetadataXmpFilt response;
        OASComDayCqDamCommonsMetadataXmpFilt expectedResponse;
        String js = '';

        client = new OASClient();
        api = new OASConfigmgrApi(client);

        js = JSON.serialize(OASComDayCqDamCommonsMetadataXmpFilt.getExample());
        res.setHeader('Content-Type', 'application/json');
        res.setBody(js);
        expectedResponse = OASComDayCqDamCommonsMetadataXmpFilt.getExample();
        response = (OASComDayCqDamCommonsMetadataXmpFilt) api.comDayCqDamCommonsMetadataXmpFilterBlackWhite(params);
        System.assertEquals(expectedResponse, response);
    }

    /**
     * 
     *
     * 
     */
    @isTest
    private static void comDayCqDamCommonsUtilImplAssetCacheImplTest() {
        HttpResponse res = new HttpResponse();
        res.setStatusCode(200);
        res.setStatus('OK');
        Test.setMock(HttpCalloutMock.class, new OASResponseMock(res));

        Map<String, Object> params = new Map<String, Object>{
            'post' => Boolean.getExample(),
            'apply' => Boolean.getExample(),
            'r_delete' => Boolean.getExample(),
            'action' => 'null',
            'location' => 'null',
            'propertylist' => new List<String>{''},
            'largeFileMin' => Integer.getExample(),
            'cacheApply' => Boolean.getExample(),
            'mimeTypes' => new List<String>{''}
        };

        OASClient client;
        OASConfigmgrApi api;
        OASComDayCqDamCommonsUtilImplAssetCa response;
        OASComDayCqDamCommonsUtilImplAssetCa expectedResponse;
        String js = '';

        client = new OASClient();
        api = new OASConfigmgrApi(client);

        js = JSON.serialize(OASComDayCqDamCommonsUtilImplAssetCa.getExample());
        res.setHeader('Content-Type', 'application/json');
        res.setBody(js);
        expectedResponse = OASComDayCqDamCommonsUtilImplAssetCa.getExample();
        response = (OASComDayCqDamCommonsUtilImplAssetCa) api.comDayCqDamCommonsUtilImplAssetCacheImpl(params);
        System.assertEquals(expectedResponse, response);
    }

    /**
     * 
     *
     * 
     */
    @isTest
    private static void comDayCqDamCoreImplAnnotationPdfAnnotationPdfConfigTest() {
        HttpResponse res = new HttpResponse();
        res.setStatusCode(200);
        res.setStatus('OK');
        Test.setMock(HttpCalloutMock.class, new OASResponseMock(res));

        Map<String, Object> params = new Map<String, Object>{
            'post' => Boolean.getExample(),
            'apply' => Boolean.getExample(),
            'r_delete' => Boolean.getExample(),
            'action' => 'null',
            'location' => 'null',
            'propertylist' => new List<String>{''},
            'cqDamConfigAnnotationPdfDocumentWidth' => Integer.getExample(),
            'cqDamConfigAnnotationPdfDocumentHeight' => Integer.getExample(),
            'cqDamConfigAnnotationPdfDocumentPaddingHorizontal' => Integer.getExample(),
            'cqDamConfigAnnotationPdfDocumentPaddingVertical' => Integer.getExample(),
            'cqDamConfigAnnotationPdfFontSize' => Integer.getExample(),
            'cqDamConfigAnnotationPdfFontColor' => 'null',
            'cqDamConfigAnnotationPdfFontFamily' => 'null',
            'cqDamConfigAnnotationPdfFontLight' => 'null',
            'cqDamConfigAnnotationPdfMarginTextImage' => Integer.getExample(),
            'cqDamConfigAnnotationPdfMinImageHeight' => Integer.getExample(),
            'cqDamConfigAnnotationPdfReviewStatusWidth' => Integer.getExample(),
            'cqDamConfigAnnotationPdfReviewStatusColorApproved' => 'null',
            'cqDamConfigAnnotationPdfReviewStatusColorRejected' => 'null',
            'cqDamConfigAnnotationPdfReviewStatusColorChangesRequested' => 'null',
            'cqDamConfigAnnotationPdfAnnotationMarkerWidth' => Integer.getExample(),
            'cqDamConfigAnnotationPdfAssetMinheight' => Integer.getExample()
        };

        OASClient client;
        OASConfigmgrApi api;
        OASComDayCqDamCoreImplAnnotationPdfA response;
        OASComDayCqDamCoreImplAnnotationPdfA expectedResponse;
        String js = '';

        client = new OASClient();
        api = new OASConfigmgrApi(client);

        js = JSON.serialize(OASComDayCqDamCoreImplAnnotationPdfA.getExample());
        res.setHeader('Content-Type', 'application/json');
        res.setBody(js);
        expectedResponse = OASComDayCqDamCoreImplAnnotationPdfA.getExample();
        response = (OASComDayCqDamCoreImplAnnotationPdfA) api.comDayCqDamCoreImplAnnotationPdfAnnotationPdfConfig(params);
        System.assertEquals(expectedResponse, response);
    }

    /**
     * 
     *
     * 
     */
    @isTest
    private static void comDayCqDamCoreImplAssetMoveListenerTest() {
        HttpResponse res = new HttpResponse();
        res.setStatusCode(200);
        res.setStatus('OK');
        Test.setMock(HttpCalloutMock.class, new OASResponseMock(res));

        Map<String, Object> params = new Map<String, Object>{
            'post' => Boolean.getExample(),
            'apply' => Boolean.getExample(),
            'r_delete' => Boolean.getExample(),
            'action' => 'null',
            'location' => 'null',
            'propertylist' => new List<String>{''},
            'enabled' => Boolean.getExample()
        };

        OASClient client;
        OASConfigmgrApi api;
        OASComDayCqDamCoreImplAssetMoveListe response;
        OASComDayCqDamCoreImplAssetMoveListe expectedResponse;
        String js = '';

        client = new OASClient();
        api = new OASConfigmgrApi(client);

        js = JSON.serialize(OASComDayCqDamCoreImplAssetMoveListe.getExample());
        res.setHeader('Content-Type', 'application/json');
        res.setBody(js);
        expectedResponse = OASComDayCqDamCoreImplAssetMoveListe.getExample();
        response = (OASComDayCqDamCoreImplAssetMoveListe) api.comDayCqDamCoreImplAssetMoveListener(params);
        System.assertEquals(expectedResponse, response);
    }

    /**
     * 
     *
     * 
     */
    @isTest
    private static void comDayCqDamCoreImplAssethomeAssetHomePageConfigurationTest() {
        HttpResponse res = new HttpResponse();
        res.setStatusCode(200);
        res.setStatus('OK');
        Test.setMock(HttpCalloutMock.class, new OASResponseMock(res));

        Map<String, Object> params = new Map<String, Object>{
            'post' => Boolean.getExample(),
            'apply' => Boolean.getExample(),
            'r_delete' => Boolean.getExample(),
            'action' => 'null',
            'location' => 'null',
            'propertylist' => new List<String>{''},
            'isEnabled' => Boolean.getExample()
        };

        OASClient client;
        OASConfigmgrApi api;
        OASComDayCqDamCoreImplAssethomeAsset response;
        OASComDayCqDamCoreImplAssethomeAsset expectedResponse;
        String js = '';

        client = new OASClient();
        api = new OASConfigmgrApi(client);

        js = JSON.serialize(OASComDayCqDamCoreImplAssethomeAsset.getExample());
        res.setHeader('Content-Type', 'application/json');
        res.setBody(js);
        expectedResponse = OASComDayCqDamCoreImplAssethomeAsset.getExample();
        response = (OASComDayCqDamCoreImplAssethomeAsset) api.comDayCqDamCoreImplAssethomeAssetHomePageConfiguration(params);
        System.assertEquals(expectedResponse, response);
    }

    /**
     * 
     *
     * 
     */
    @isTest
    private static void comDayCqDamCoreImplAssetlinkshareAdhocAssetShareProxyServletTest() {
        HttpResponse res = new HttpResponse();
        res.setStatusCode(200);
        res.setStatus('OK');
        Test.setMock(HttpCalloutMock.class, new OASResponseMock(res));

        Map<String, Object> params = new Map<String, Object>{
            'post' => Boolean.getExample(),
            'apply' => Boolean.getExample(),
            'r_delete' => Boolean.getExample(),
            'action' => 'null',
            'location' => 'null',
            'propertylist' => new List<String>{''},
            'cqDamAdhocAssetSharePrezipMaxcontentsize' => Integer.getExample()
        };

        OASClient client;
        OASConfigmgrApi api;
        OASComDayCqDamCoreImplAssetlinkshare response;
        OASComDayCqDamCoreImplAssetlinkshare expectedResponse;
        String js = '';

        client = new OASClient();
        api = new OASConfigmgrApi(client);

        js = JSON.serialize(OASComDayCqDamCoreImplAssetlinkshare.getExample());
        res.setHeader('Content-Type', 'application/json');
        res.setBody(js);
        expectedResponse = OASComDayCqDamCoreImplAssetlinkshare.getExample();
        response = (OASComDayCqDamCoreImplAssetlinkshare) api.comDayCqDamCoreImplAssetlinkshareAdhocAssetShareProxyServlet(params);
        System.assertEquals(expectedResponse, response);
    }

    /**
     * 
     *
     * 
     */
    @isTest
    private static void comDayCqDamCoreImplCacheCQBufferedImageCacheTest() {
        HttpResponse res = new HttpResponse();
        res.setStatusCode(200);
        res.setStatus('OK');
        Test.setMock(HttpCalloutMock.class, new OASResponseMock(res));

        Map<String, Object> params = new Map<String, Object>{
            'post' => Boolean.getExample(),
            'apply' => Boolean.getExample(),
            'r_delete' => Boolean.getExample(),
            'action' => 'null',
            'location' => 'null',
            'propertylist' => new List<String>{''},
            'cqDamImageCacheMaxMemory' => Integer.getExample(),
            'cqDamImageCacheMaxAge' => Integer.getExample(),
            'cqDamImageCacheMaxDimension' => 'null'
        };

        OASClient client;
        OASConfigmgrApi api;
        OASComDayCqDamCoreImplCacheCQBuffere response;
        OASComDayCqDamCoreImplCacheCQBuffere expectedResponse;
        String js = '';

        client = new OASClient();
        api = new OASConfigmgrApi(client);

        js = JSON.serialize(OASComDayCqDamCoreImplCacheCQBuffere.getExample());
        res.setHeader('Content-Type', 'application/json');
        res.setBody(js);
        expectedResponse = OASComDayCqDamCoreImplCacheCQBuffere.getExample();
        response = (OASComDayCqDamCoreImplCacheCQBuffere) api.comDayCqDamCoreImplCacheCQBufferedImageCache(params);
        System.assertEquals(expectedResponse, response);
    }

    /**
     * 
     *
     * 
     */
    @isTest
    private static void comDayCqDamCoreImplDamChangeEventListenerTest() {
        HttpResponse res = new HttpResponse();
        res.setStatusCode(200);
        res.setStatus('OK');
        Test.setMock(HttpCalloutMock.class, new OASResponseMock(res));

        Map<String, Object> params = new Map<String, Object>{
            'post' => Boolean.getExample(),
            'apply' => Boolean.getExample(),
            'r_delete' => Boolean.getExample(),
            'action' => 'null',
            'location' => 'null',
            'propertylist' => new List<String>{''},
            'changeeventlistenerObservedPaths' => new List<String>{''}
        };

        OASClient client;
        OASConfigmgrApi api;
        OASComDayCqDamCoreImplDamChangeEvent response;
        OASComDayCqDamCoreImplDamChangeEvent expectedResponse;
        String js = '';

        client = new OASClient();
        api = new OASConfigmgrApi(client);

        js = JSON.serialize(OASComDayCqDamCoreImplDamChangeEvent.getExample());
        res.setHeader('Content-Type', 'application/json');
        res.setBody(js);
        expectedResponse = OASComDayCqDamCoreImplDamChangeEvent.getExample();
        response = (OASComDayCqDamCoreImplDamChangeEvent) api.comDayCqDamCoreImplDamChangeEventListener(params);
        System.assertEquals(expectedResponse, response);
    }

    /**
     * 
     *
     * 
     */
    @isTest
    private static void comDayCqDamCoreImplDamEventPurgeServiceTest() {
        HttpResponse res = new HttpResponse();
        res.setStatusCode(200);
        res.setStatus('OK');
        Test.setMock(HttpCalloutMock.class, new OASResponseMock(res));

        Map<String, Object> params = new Map<String, Object>{
            'post' => Boolean.getExample(),
            'apply' => Boolean.getExample(),
            'r_delete' => Boolean.getExample(),
            'action' => 'null',
            'location' => 'null',
            'propertylist' => new List<String>{''},
            'schedulerExpression' => 'null',
            'maxSavedActivities' => Integer.getExample(),
            'saveInterval' => Integer.getExample(),
            'enableActivityPurge' => Boolean.getExample(),
            'eventTypes' => 'null'
        };

        OASClient client;
        OASConfigmgrApi api;
        OASComDayCqDamCoreImplDamEventPurgeS response;
        OASComDayCqDamCoreImplDamEventPurgeS expectedResponse;
        String js = '';

        client = new OASClient();
        api = new OASConfigmgrApi(client);

        js = JSON.serialize(OASComDayCqDamCoreImplDamEventPurgeS.getExample());
        res.setHeader('Content-Type', 'application/json');
        res.setBody(js);
        expectedResponse = OASComDayCqDamCoreImplDamEventPurgeS.getExample();
        response = (OASComDayCqDamCoreImplDamEventPurgeS) api.comDayCqDamCoreImplDamEventPurgeService(params);
        System.assertEquals(expectedResponse, response);
    }

    /**
     * 
     *
     * 
     */
    @isTest
    private static void comDayCqDamCoreImplDamEventRecorderImplTest() {
        HttpResponse res = new HttpResponse();
        res.setStatusCode(200);
        res.setStatus('OK');
        Test.setMock(HttpCalloutMock.class, new OASResponseMock(res));

        Map<String, Object> params = new Map<String, Object>{
            'post' => Boolean.getExample(),
            'apply' => Boolean.getExample(),
            'r_delete' => Boolean.getExample(),
            'action' => 'null',
            'location' => 'null',
            'propertylist' => new List<String>{''},
            'eventFilter' => 'null',
            'eventQueueLength' => Integer.getExample(),
            'eventrecorderEnabled' => Boolean.getExample(),
            'eventrecorderBlacklist' => new List<String>{''},
            'eventrecorderEventtypes' => 'null'
        };

        OASClient client;
        OASConfigmgrApi api;
        OASComDayCqDamCoreImplDamEventRecord response;
        OASComDayCqDamCoreImplDamEventRecord expectedResponse;
        String js = '';

        client = new OASClient();
        api = new OASConfigmgrApi(client);

        js = JSON.serialize(OASComDayCqDamCoreImplDamEventRecord.getExample());
        res.setHeader('Content-Type', 'application/json');
        res.setBody(js);
        expectedResponse = OASComDayCqDamCoreImplDamEventRecord.getExample();
        response = (OASComDayCqDamCoreImplDamEventRecord) api.comDayCqDamCoreImplDamEventRecorderImpl(params);
        System.assertEquals(expectedResponse, response);
    }

    /**
     * 
     *
     * 
     */
    @isTest
    private static void comDayCqDamCoreImplEventDamEventAuditListenerTest() {
        HttpResponse res = new HttpResponse();
        res.setStatusCode(200);
        res.setStatus('OK');
        Test.setMock(HttpCalloutMock.class, new OASResponseMock(res));

        Map<String, Object> params = new Map<String, Object>{
            'post' => Boolean.getExample(),
            'apply' => Boolean.getExample(),
            'r_delete' => Boolean.getExample(),
            'action' => 'null',
            'location' => 'null',
            'propertylist' => new List<String>{''},
            'eventFilter' => 'null',
            'enabled' => Boolean.getExample()
        };

        OASClient client;
        OASConfigmgrApi api;
        OASComDayCqDamCoreImplEventDamEventA response;
        OASComDayCqDamCoreImplEventDamEventA expectedResponse;
        String js = '';

        client = new OASClient();
        api = new OASConfigmgrApi(client);

        js = JSON.serialize(OASComDayCqDamCoreImplEventDamEventA.getExample());
        res.setHeader('Content-Type', 'application/json');
        res.setBody(js);
        expectedResponse = OASComDayCqDamCoreImplEventDamEventA.getExample();
        response = (OASComDayCqDamCoreImplEventDamEventA) api.comDayCqDamCoreImplEventDamEventAuditListener(params);
        System.assertEquals(expectedResponse, response);
    }

    /**
     * 
     *
     * 
     */
    @isTest
    private static void comDayCqDamCoreImplExpiryNotificationJobImplTest() {
        HttpResponse res = new HttpResponse();
        res.setStatusCode(200);
        res.setStatus('OK');
        Test.setMock(HttpCalloutMock.class, new OASResponseMock(res));

        Map<String, Object> params = new Map<String, Object>{
            'post' => Boolean.getExample(),
            'apply' => Boolean.getExample(),
            'r_delete' => Boolean.getExample(),
            'action' => 'null',
            'location' => 'null',
            'propertylist' => new List<String>{''},
            'cqDamExpiryNotificationSchedulerIstimebased' => Boolean.getExample(),
            'cqDamExpiryNotificationSchedulerTimebasedRule' => 'null',
            'cqDamExpiryNotificationSchedulerPeriodRule' => Integer.getExample(),
            'sendEmail' => Boolean.getExample(),
            'assetExpiredLimit' => Integer.getExample(),
            'priorNotificationSeconds' => Integer.getExample(),
            'cqDamExpiryNotificationUrlProtocol' => 'null'
        };

        OASClient client;
        OASConfigmgrApi api;
        OASComDayCqDamCoreImplExpiryNotifica response;
        OASComDayCqDamCoreImplExpiryNotifica expectedResponse;
        String js = '';

        client = new OASClient();
        api = new OASConfigmgrApi(client);

        js = JSON.serialize(OASComDayCqDamCoreImplExpiryNotifica.getExample());
        res.setHeader('Content-Type', 'application/json');
        res.setBody(js);
        expectedResponse = OASComDayCqDamCoreImplExpiryNotifica.getExample();
        response = (OASComDayCqDamCoreImplExpiryNotifica) api.comDayCqDamCoreImplExpiryNotificationJobImpl(params);
        System.assertEquals(expectedResponse, response);
    }

    /**
     * 
     *
     * 
     */
    @isTest
    private static void comDayCqDamCoreImplFoldermetadataschemaFolderMetadataSchemaFeatTest() {
        HttpResponse res = new HttpResponse();
        res.setStatusCode(200);
        res.setStatus('OK');
        Test.setMock(HttpCalloutMock.class, new OASResponseMock(res));

        Map<String, Object> params = new Map<String, Object>{
            'post' => Boolean.getExample(),
            'apply' => Boolean.getExample(),
            'r_delete' => Boolean.getExample(),
            'action' => 'null',
            'location' => 'null',
            'propertylist' => new List<String>{''},
            'isEnabled' => Boolean.getExample()
        };

        OASClient client;
        OASConfigmgrApi api;
        OASComDayCqDamCoreImplFoldermetadata response;
        OASComDayCqDamCoreImplFoldermetadata expectedResponse;
        String js = '';

        client = new OASClient();
        api = new OASConfigmgrApi(client);

        js = JSON.serialize(OASComDayCqDamCoreImplFoldermetadata.getExample());
        res.setHeader('Content-Type', 'application/json');
        res.setBody(js);
        expectedResponse = OASComDayCqDamCoreImplFoldermetadata.getExample();
        response = (OASComDayCqDamCoreImplFoldermetadata) api.comDayCqDamCoreImplFoldermetadataschemaFolderMetadataSchemaFeat(params);
        System.assertEquals(expectedResponse, response);
    }

    /**
     * 
     *
     * 
     */
    @isTest
    private static void comDayCqDamCoreImplGfxCommonsGfxRendererTest() {
        HttpResponse res = new HttpResponse();
        res.setStatusCode(200);
        res.setStatus('OK');
        Test.setMock(HttpCalloutMock.class, new OASResponseMock(res));

        Map<String, Object> params = new Map<String, Object>{
            'post' => Boolean.getExample(),
            'apply' => Boolean.getExample(),
            'r_delete' => Boolean.getExample(),
            'action' => 'null',
            'location' => 'null',
            'propertylist' => new List<String>{''},
            'skipBufferedcache' => Boolean.getExample()
        };

        OASClient client;
        OASConfigmgrApi api;
        OASComDayCqDamCoreImplGfxCommonsGfxR response;
        OASComDayCqDamCoreImplGfxCommonsGfxR expectedResponse;
        String js = '';

        client = new OASClient();
        api = new OASConfigmgrApi(client);

        js = JSON.serialize(OASComDayCqDamCoreImplGfxCommonsGfxR.getExample());
        res.setHeader('Content-Type', 'application/json');
        res.setBody(js);
        expectedResponse = OASComDayCqDamCoreImplGfxCommonsGfxR.getExample();
        response = (OASComDayCqDamCoreImplGfxCommonsGfxR) api.comDayCqDamCoreImplGfxCommonsGfxRenderer(params);
        System.assertEquals(expectedResponse, response);
    }

    /**
     * 
     *
     * 
     */
    @isTest
    private static void comDayCqDamCoreImplHandlerEPSFormatHandlerTest() {
        HttpResponse res = new HttpResponse();
        res.setStatusCode(200);
        res.setStatus('OK');
        Test.setMock(HttpCalloutMock.class, new OASResponseMock(res));

        Map<String, Object> params = new Map<String, Object>{
            'post' => Boolean.getExample(),
            'apply' => Boolean.getExample(),
            'r_delete' => Boolean.getExample(),
            'action' => 'null',
            'location' => 'null',
            'propertylist' => new List<String>{''},
            'mimetype' => 'null'
        };

        OASClient client;
        OASConfigmgrApi api;
        OASComDayCqDamCoreImplHandlerEPSForm response;
        OASComDayCqDamCoreImplHandlerEPSForm expectedResponse;
        String js = '';

        client = new OASClient();
        api = new OASConfigmgrApi(client);

        js = JSON.serialize(OASComDayCqDamCoreImplHandlerEPSForm.getExample());
        res.setHeader('Content-Type', 'application/json');
        res.setBody(js);
        expectedResponse = OASComDayCqDamCoreImplHandlerEPSForm.getExample();
        response = (OASComDayCqDamCoreImplHandlerEPSForm) api.comDayCqDamCoreImplHandlerEPSFormatHandler(params);
        System.assertEquals(expectedResponse, response);
    }

    /**
     * 
     *
     * 
     */
    @isTest
    private static void comDayCqDamCoreImplHandlerIndesignFormatHandlerTest() {
        HttpResponse res = new HttpResponse();
        res.setStatusCode(200);
        res.setStatus('OK');
        Test.setMock(HttpCalloutMock.class, new OASResponseMock(res));

        Map<String, Object> params = new Map<String, Object>{
            'post' => Boolean.getExample(),
            'apply' => Boolean.getExample(),
            'r_delete' => Boolean.getExample(),
            'action' => 'null',
            'location' => 'null',
            'propertylist' => new List<String>{''},
            'mimetype' => new List<String>{''}
        };

        OASClient client;
        OASConfigmgrApi api;
        OASComDayCqDamCoreImplHandlerIndesig response;
        OASComDayCqDamCoreImplHandlerIndesig expectedResponse;
        String js = '';

        client = new OASClient();
        api = new OASConfigmgrApi(client);

        js = JSON.serialize(OASComDayCqDamCoreImplHandlerIndesig.getExample());
        res.setHeader('Content-Type', 'application/json');
        res.setBody(js);
        expectedResponse = OASComDayCqDamCoreImplHandlerIndesig.getExample();
        response = (OASComDayCqDamCoreImplHandlerIndesig) api.comDayCqDamCoreImplHandlerIndesignFormatHandler(params);
        System.assertEquals(expectedResponse, response);
    }

    /**
     * 
     *
     * 
     */
    @isTest
    private static void comDayCqDamCoreImplHandlerJpegHandlerTest() {
        HttpResponse res = new HttpResponse();
        res.setStatusCode(200);
        res.setStatus('OK');
        Test.setMock(HttpCalloutMock.class, new OASResponseMock(res));

        Map<String, Object> params = new Map<String, Object>{
            'post' => Boolean.getExample(),
            'apply' => Boolean.getExample(),
            'r_delete' => Boolean.getExample(),
            'action' => 'null',
            'location' => 'null',
            'propertylist' => new List<String>{''},
            'cqDamEnableExtMetaExtraction' => Boolean.getExample(),
            'largeFileThreshold' => Integer.getExample(),
            'largeCommentThreshold' => Integer.getExample()
        };

        OASClient client;
        OASConfigmgrApi api;
        OASComDayCqDamCoreImplHandlerJpegHan response;
        OASComDayCqDamCoreImplHandlerJpegHan expectedResponse;
        String js = '';

        client = new OASClient();
        api = new OASConfigmgrApi(client);

        js = JSON.serialize(OASComDayCqDamCoreImplHandlerJpegHan.getExample());
        res.setHeader('Content-Type', 'application/json');
        res.setBody(js);
        expectedResponse = OASComDayCqDamCoreImplHandlerJpegHan.getExample();
        response = (OASComDayCqDamCoreImplHandlerJpegHan) api.comDayCqDamCoreImplHandlerJpegHandler(params);
        System.assertEquals(expectedResponse, response);
    }

    /**
     * 
     *
     * 
     */
    @isTest
    private static void comDayCqDamCoreImplHandlerXmpNCommXMPHandlerTest() {
        HttpResponse res = new HttpResponse();
        res.setStatusCode(200);
        res.setStatus('OK');
        Test.setMock(HttpCalloutMock.class, new OASResponseMock(res));

        Map<String, Object> params = new Map<String, Object>{
            'post' => Boolean.getExample(),
            'apply' => Boolean.getExample(),
            'r_delete' => Boolean.getExample(),
            'action' => 'null',
            'location' => 'null',
            'propertylist' => new List<String>{''},
            'xmphandlerCqFormats' => new List<String>{''}
        };

        OASClient client;
        OASConfigmgrApi api;
        OASComDayCqDamCoreImplHandlerXmpNCom response;
        OASComDayCqDamCoreImplHandlerXmpNCom expectedResponse;
        String js = '';

        client = new OASClient();
        api = new OASConfigmgrApi(client);

        js = JSON.serialize(OASComDayCqDamCoreImplHandlerXmpNCom.getExample());
        res.setHeader('Content-Type', 'application/json');
        res.setBody(js);
        expectedResponse = OASComDayCqDamCoreImplHandlerXmpNCom.getExample();
        response = (OASComDayCqDamCoreImplHandlerXmpNCom) api.comDayCqDamCoreImplHandlerXmpNCommXMPHandler(params);
        System.assertEquals(expectedResponse, response);
    }

    /**
     * 
     *
     * 
     */
    @isTest
    private static void comDayCqDamCoreImplJmxAssetIndexUpdateMonitorTest() {
        HttpResponse res = new HttpResponse();
        res.setStatusCode(200);
        res.setStatus('OK');
        Test.setMock(HttpCalloutMock.class, new OASResponseMock(res));

        Map<String, Object> params = new Map<String, Object>{
            'post' => Boolean.getExample(),
            'apply' => Boolean.getExample(),
            'r_delete' => Boolean.getExample(),
            'action' => 'null',
            'location' => 'null',
            'propertylist' => new List<String>{''},
            'jmxObjectname' => 'null',
            'propertyMeasureEnabled' => Boolean.getExample(),
            'propertyName' => 'null',
            'propertyMaxWaitMs' => Integer.getExample(),
            'propertyMaxRate' => Double.getExample(),
            'fulltextMeasureEnabled' => Boolean.getExample(),
            'fulltextName' => 'null',
            'fulltextMaxWaitMs' => Integer.getExample(),
            'fulltextMaxRate' => Double.getExample()
        };

        OASClient client;
        OASConfigmgrApi api;
        OASComDayCqDamCoreImplJmxAssetIndexU response;
        OASComDayCqDamCoreImplJmxAssetIndexU expectedResponse;
        String js = '';

        client = new OASClient();
        api = new OASConfigmgrApi(client);

        js = JSON.serialize(OASComDayCqDamCoreImplJmxAssetIndexU.getExample());
        res.setHeader('Content-Type', 'application/json');
        res.setBody(js);
        expectedResponse = OASComDayCqDamCoreImplJmxAssetIndexU.getExample();
        response = (OASComDayCqDamCoreImplJmxAssetIndexU) api.comDayCqDamCoreImplJmxAssetIndexUpdateMonitor(params);
        System.assertEquals(expectedResponse, response);
    }

    /**
     * 
     *
     * 
     */
    @isTest
    private static void comDayCqDamCoreImplJmxAssetMigrationMBeanImplTest() {
        HttpResponse res = new HttpResponse();
        res.setStatusCode(200);
        res.setStatus('OK');
        Test.setMock(HttpCalloutMock.class, new OASResponseMock(res));

        Map<String, Object> params = new Map<String, Object>{
            'post' => Boolean.getExample(),
            'apply' => Boolean.getExample(),
            'r_delete' => Boolean.getExample(),
            'action' => 'null',
            'location' => 'null',
            'propertylist' => new List<String>{''},
            'jmxObjectname' => 'null'
        };

        OASClient client;
        OASConfigmgrApi api;
        OASComDayCqDamCoreImplJmxAssetMigrat response;
        OASComDayCqDamCoreImplJmxAssetMigrat expectedResponse;
        String js = '';

        client = new OASClient();
        api = new OASConfigmgrApi(client);

        js = JSON.serialize(OASComDayCqDamCoreImplJmxAssetMigrat.getExample());
        res.setHeader('Content-Type', 'application/json');
        res.setBody(js);
        expectedResponse = OASComDayCqDamCoreImplJmxAssetMigrat.getExample();
        response = (OASComDayCqDamCoreImplJmxAssetMigrat) api.comDayCqDamCoreImplJmxAssetMigrationMBeanImpl(params);
        System.assertEquals(expectedResponse, response);
    }

    /**
     * 
     *
     * 
     */
    @isTest
    private static void comDayCqDamCoreImplJmxAssetUpdateMonitorImplTest() {
        HttpResponse res = new HttpResponse();
        res.setStatusCode(200);
        res.setStatus('OK');
        Test.setMock(HttpCalloutMock.class, new OASResponseMock(res));

        Map<String, Object> params = new Map<String, Object>{
            'post' => Boolean.getExample(),
            'apply' => Boolean.getExample(),
            'r_delete' => Boolean.getExample(),
            'action' => 'null',
            'location' => 'null',
            'propertylist' => new List<String>{''},
            'jmxObjectname' => 'null',
            'active' => Boolean.getExample()
        };

        OASClient client;
        OASConfigmgrApi api;
        OASComDayCqDamCoreImplJmxAssetUpdate response;
        OASComDayCqDamCoreImplJmxAssetUpdate expectedResponse;
        String js = '';

        client = new OASClient();
        api = new OASConfigmgrApi(client);

        js = JSON.serialize(OASComDayCqDamCoreImplJmxAssetUpdate.getExample());
        res.setHeader('Content-Type', 'application/json');
        res.setBody(js);
        expectedResponse = OASComDayCqDamCoreImplJmxAssetUpdate.getExample();
        response = (OASComDayCqDamCoreImplJmxAssetUpdate) api.comDayCqDamCoreImplJmxAssetUpdateMonitorImpl(params);
        System.assertEquals(expectedResponse, response);
    }

    /**
     * 
     *
     * 
     */
    @isTest
    private static void comDayCqDamCoreImplJobsMetadataexportAsyncMetadataExportConfigTest() {
        HttpResponse res = new HttpResponse();
        res.setStatusCode(200);
        res.setStatus('OK');
        Test.setMock(HttpCalloutMock.class, new OASResponseMock(res));

        Map<String, Object> params = new Map<String, Object>{
            'post' => Boolean.getExample(),
            'apply' => Boolean.getExample(),
            'r_delete' => Boolean.getExample(),
            'action' => 'null',
            'location' => 'null',
            'propertylist' => new List<String>{''},
            'operation' => 'null',
            'emailEnabled' => Boolean.getExample()
        };

        OASClient client;
        OASConfigmgrApi api;
        OASComDayCqDamCoreImplJobsMetadataex response;
        OASComDayCqDamCoreImplJobsMetadataex expectedResponse;
        String js = '';

        client = new OASClient();
        api = new OASConfigmgrApi(client);

        js = JSON.serialize(OASComDayCqDamCoreImplJobsMetadataex.getExample());
        res.setHeader('Content-Type', 'application/json');
        res.setBody(js);
        expectedResponse = OASComDayCqDamCoreImplJobsMetadataex.getExample();
        response = (OASComDayCqDamCoreImplJobsMetadataex) api.comDayCqDamCoreImplJobsMetadataexportAsyncMetadataExportConfig(params);
        System.assertEquals(expectedResponse, response);
    }

    /**
     * 
     *
     * 
     */
    @isTest
    private static void comDayCqDamCoreImplJobsMetadataimportAsyncMetadataImportConfigTest() {
        HttpResponse res = new HttpResponse();
        res.setStatusCode(200);
        res.setStatus('OK');
        Test.setMock(HttpCalloutMock.class, new OASResponseMock(res));

        Map<String, Object> params = new Map<String, Object>{
            'post' => Boolean.getExample(),
            'apply' => Boolean.getExample(),
            'r_delete' => Boolean.getExample(),
            'action' => 'null',
            'location' => 'null',
            'propertylist' => new List<String>{''},
            'operation' => 'null',
            'operationIcon' => 'null',
            'topicName' => 'null',
            'emailEnabled' => Boolean.getExample()
        };

        OASClient client;
        OASConfigmgrApi api;
        OASComDayCqDamCoreImplJobsMetadataim response;
        OASComDayCqDamCoreImplJobsMetadataim expectedResponse;
        String js = '';

        client = new OASClient();
        api = new OASConfigmgrApi(client);

        js = JSON.serialize(OASComDayCqDamCoreImplJobsMetadataim.getExample());
        res.setHeader('Content-Type', 'application/json');
        res.setBody(js);
        expectedResponse = OASComDayCqDamCoreImplJobsMetadataim.getExample();
        response = (OASComDayCqDamCoreImplJobsMetadataim) api.comDayCqDamCoreImplJobsMetadataimportAsyncMetadataImportConfig(params);
        System.assertEquals(expectedResponse, response);
    }

    /**
     * 
     *
     * 
     */
    @isTest
    private static void comDayCqDamCoreImplLightboxLightboxServletTest() {
        HttpResponse res = new HttpResponse();
        res.setStatusCode(200);
        res.setStatus('OK');
        Test.setMock(HttpCalloutMock.class, new OASResponseMock(res));

        Map<String, Object> params = new Map<String, Object>{
            'post' => Boolean.getExample(),
            'apply' => Boolean.getExample(),
            'r_delete' => Boolean.getExample(),
            'action' => 'null',
            'location' => 'null',
            'propertylist' => new List<String>{''},
            'slingServletPaths' => 'null',
            'slingServletMethods' => new List<String>{''},
            'cqDamEnableAnonymous' => Boolean.getExample()
        };

        OASClient client;
        OASConfigmgrApi api;
        OASComDayCqDamCoreImplLightboxLightb response;
        OASComDayCqDamCoreImplLightboxLightb expectedResponse;
        String js = '';

        client = new OASClient();
        api = new OASConfigmgrApi(client);

        js = JSON.serialize(OASComDayCqDamCoreImplLightboxLightb.getExample());
        res.setHeader('Content-Type', 'application/json');
        res.setBody(js);
        expectedResponse = OASComDayCqDamCoreImplLightboxLightb.getExample();
        response = (OASComDayCqDamCoreImplLightboxLightb) api.comDayCqDamCoreImplLightboxLightboxServlet(params);
        System.assertEquals(expectedResponse, response);
    }

    /**
     * 
     *
     * 
     */
    @isTest
    private static void comDayCqDamCoreImplMetadataEditorSelectComponentHandlerTest() {
        HttpResponse res = new HttpResponse();
        res.setStatusCode(200);
        res.setStatus('OK');
        Test.setMock(HttpCalloutMock.class, new OASResponseMock(res));

        Map<String, Object> params = new Map<String, Object>{
            'post' => Boolean.getExample(),
            'apply' => Boolean.getExample(),
            'r_delete' => Boolean.getExample(),
            'action' => 'null',
            'location' => 'null',
            'propertylist' => new List<String>{''},
            'granitedata' => new List<String>{''}
        };

        OASClient client;
        OASConfigmgrApi api;
        OASComDayCqDamCoreImplMetadataEditor response;
        OASComDayCqDamCoreImplMetadataEditor expectedResponse;
        String js = '';

        client = new OASClient();
        api = new OASConfigmgrApi(client);

        js = JSON.serialize(OASComDayCqDamCoreImplMetadataEditor.getExample());
        res.setHeader('Content-Type', 'application/json');
        res.setBody(js);
        expectedResponse = OASComDayCqDamCoreImplMetadataEditor.getExample();
        response = (OASComDayCqDamCoreImplMetadataEditor) api.comDayCqDamCoreImplMetadataEditorSelectComponentHandler(params);
        System.assertEquals(expectedResponse, response);
    }

    /**
     * 
     *
     * 
     */
    @isTest
    private static void comDayCqDamCoreImplMimeTypeAssetUploadRestrictionHelperTest() {
        HttpResponse res = new HttpResponse();
        res.setStatusCode(200);
        res.setStatus('OK');
        Test.setMock(HttpCalloutMock.class, new OASResponseMock(res));

        Map<String, Object> params = new Map<String, Object>{
            'post' => Boolean.getExample(),
            'apply' => Boolean.getExample(),
            'r_delete' => Boolean.getExample(),
            'action' => 'null',
            'location' => 'null',
            'propertylist' => new List<String>{''},
            'cqDamAllowAllMime' => Boolean.getExample(),
            'cqDamAllowedAssetMimes' => new List<String>{''}
        };

        OASClient client;
        OASConfigmgrApi api;
        OASComDayCqDamCoreImplMimeTypeAssetU response;
        OASComDayCqDamCoreImplMimeTypeAssetU expectedResponse;
        String js = '';

        client = new OASClient();
        api = new OASConfigmgrApi(client);

        js = JSON.serialize(OASComDayCqDamCoreImplMimeTypeAssetU.getExample());
        res.setHeader('Content-Type', 'application/json');
        res.setBody(js);
        expectedResponse = OASComDayCqDamCoreImplMimeTypeAssetU.getExample();
        response = (OASComDayCqDamCoreImplMimeTypeAssetU) api.comDayCqDamCoreImplMimeTypeAssetUploadRestrictionHelper(params);
        System.assertEquals(expectedResponse, response);
    }

    /**
     * 
     *
     * 
     */
    @isTest
    private static void comDayCqDamCoreImplMimeTypeDamMimeTypeServiceImplTest() {
        HttpResponse res = new HttpResponse();
        res.setStatusCode(200);
        res.setStatus('OK');
        Test.setMock(HttpCalloutMock.class, new OASResponseMock(res));

        Map<String, Object> params = new Map<String, Object>{
            'post' => Boolean.getExample(),
            'apply' => Boolean.getExample(),
            'r_delete' => Boolean.getExample(),
            'action' => 'null',
            'location' => 'null',
            'propertylist' => new List<String>{''},
            'cqDamDetectAssetMimeFromContent' => Boolean.getExample()
        };

        OASClient client;
        OASConfigmgrApi api;
        OASComDayCqDamCoreImplMimeTypeDamMim response;
        OASComDayCqDamCoreImplMimeTypeDamMim expectedResponse;
        String js = '';

        client = new OASClient();
        api = new OASConfigmgrApi(client);

        js = JSON.serialize(OASComDayCqDamCoreImplMimeTypeDamMim.getExample());
        res.setHeader('Content-Type', 'application/json');
        res.setBody(js);
        expectedResponse = OASComDayCqDamCoreImplMimeTypeDamMim.getExample();
        response = (OASComDayCqDamCoreImplMimeTypeDamMim) api.comDayCqDamCoreImplMimeTypeDamMimeTypeServiceImpl(params);
        System.assertEquals(expectedResponse, response);
    }

    /**
     * 
     *
     * 
     */
    @isTest
    private static void comDayCqDamCoreImplMissingMetadataNotificationJobTest() {
        HttpResponse res = new HttpResponse();
        res.setStatusCode(200);
        res.setStatus('OK');
        Test.setMock(HttpCalloutMock.class, new OASResponseMock(res));

        Map<String, Object> params = new Map<String, Object>{
            'post' => Boolean.getExample(),
            'apply' => Boolean.getExample(),
            'r_delete' => Boolean.getExample(),
            'action' => 'null',
            'location' => 'null',
            'propertylist' => new List<String>{''},
            'cqDamMissingmetadataNotificationSchedulerIstimebased' => Boolean.getExample(),
            'cqDamMissingmetadataNotificationSchedulerTimebasedRule' => 'null',
            'cqDamMissingmetadataNotificationSchedulerPeriodRule' => Integer.getExample(),
            'cqDamMissingmetadataNotificationRecipient' => 'null'
        };

        OASClient client;
        OASConfigmgrApi api;
        OASComDayCqDamCoreImplMissingMetadat response;
        OASComDayCqDamCoreImplMissingMetadat expectedResponse;
        String js = '';

        client = new OASClient();
        api = new OASConfigmgrApi(client);

        js = JSON.serialize(OASComDayCqDamCoreImplMissingMetadat.getExample());
        res.setHeader('Content-Type', 'application/json');
        res.setBody(js);
        expectedResponse = OASComDayCqDamCoreImplMissingMetadat.getExample();
        response = (OASComDayCqDamCoreImplMissingMetadat) api.comDayCqDamCoreImplMissingMetadataNotificationJob(params);
        System.assertEquals(expectedResponse, response);
    }

    /**
     * 
     *
     * 
     */
    @isTest
    private static void comDayCqDamCoreImplProcessSendTransientWorkflowCompletedEmailPrTest() {
        HttpResponse res = new HttpResponse();
        res.setStatusCode(200);
        res.setStatus('OK');
        Test.setMock(HttpCalloutMock.class, new OASResponseMock(res));

        Map<String, Object> params = new Map<String, Object>{
            'post' => Boolean.getExample(),
            'apply' => Boolean.getExample(),
            'r_delete' => Boolean.getExample(),
            'action' => 'null',
            'location' => 'null',
            'propertylist' => new List<String>{''},
            'processLabel' => 'null',
            'notifyOnComplete' => Boolean.getExample()
        };

        OASClient client;
        OASConfigmgrApi api;
        OASComDayCqDamCoreImplProcessSendTra response;
        OASComDayCqDamCoreImplProcessSendTra expectedResponse;
        String js = '';

        client = new OASClient();
        api = new OASConfigmgrApi(client);

        js = JSON.serialize(OASComDayCqDamCoreImplProcessSendTra.getExample());
        res.setHeader('Content-Type', 'application/json');
        res.setBody(js);
        expectedResponse = OASComDayCqDamCoreImplProcessSendTra.getExample();
        response = (OASComDayCqDamCoreImplProcessSendTra) api.comDayCqDamCoreImplProcessSendTransientWorkflowCompletedEmailPr(params);
        System.assertEquals(expectedResponse, response);
    }

    /**
     * 
     *
     * 
     */
    @isTest
    private static void comDayCqDamCoreImplProcessTextExtractionProcessTest() {
        HttpResponse res = new HttpResponse();
        res.setStatusCode(200);
        res.setStatus('OK');
        Test.setMock(HttpCalloutMock.class, new OASResponseMock(res));

        Map<String, Object> params = new Map<String, Object>{
            'post' => Boolean.getExample(),
            'apply' => Boolean.getExample(),
            'r_delete' => Boolean.getExample(),
            'action' => 'null',
            'location' => 'null',
            'propertylist' => new List<String>{''},
            'mimeTypes' => new List<String>{''},
            'maxExtract' => Integer.getExample()
        };

        OASClient client;
        OASConfigmgrApi api;
        OASComDayCqDamCoreImplProcessTextExt response;
        OASComDayCqDamCoreImplProcessTextExt expectedResponse;
        String js = '';

        client = new OASClient();
        api = new OASConfigmgrApi(client);

        js = JSON.serialize(OASComDayCqDamCoreImplProcessTextExt.getExample());
        res.setHeader('Content-Type', 'application/json');
        res.setBody(js);
        expectedResponse = OASComDayCqDamCoreImplProcessTextExt.getExample();
        response = (OASComDayCqDamCoreImplProcessTextExt) api.comDayCqDamCoreImplProcessTextExtractionProcess(params);
        System.assertEquals(expectedResponse, response);
    }

    /**
     * 
     *
     * 
     */
    @isTest
    private static void comDayCqDamCoreImplRenditionMakerImplTest() {
        HttpResponse res = new HttpResponse();
        res.setStatusCode(200);
        res.setStatus('OK');
        Test.setMock(HttpCalloutMock.class, new OASResponseMock(res));

        Map<String, Object> params = new Map<String, Object>{
            'post' => Boolean.getExample(),
            'apply' => Boolean.getExample(),
            'r_delete' => Boolean.getExample(),
            'action' => 'null',
            'location' => 'null',
            'propertylist' => new List<String>{''},
            'xmpPropagate' => Boolean.getExample(),
            'xmpExcludes' => new List<String>{''}
        };

        OASClient client;
        OASConfigmgrApi api;
        OASComDayCqDamCoreImplRenditionMaker response;
        OASComDayCqDamCoreImplRenditionMaker expectedResponse;
        String js = '';

        client = new OASClient();
        api = new OASConfigmgrApi(client);

        js = JSON.serialize(OASComDayCqDamCoreImplRenditionMaker.getExample());
        res.setHeader('Content-Type', 'application/json');
        res.setBody(js);
        expectedResponse = OASComDayCqDamCoreImplRenditionMaker.getExample();
        response = (OASComDayCqDamCoreImplRenditionMaker) api.comDayCqDamCoreImplRenditionMakerImpl(params);
        System.assertEquals(expectedResponse, response);
    }

    /**
     * 
     *
     * 
     */
    @isTest
    private static void comDayCqDamCoreImplReportsReportExportServiceTest() {
        HttpResponse res = new HttpResponse();
        res.setStatusCode(200);
        res.setStatus('OK');
        Test.setMock(HttpCalloutMock.class, new OASResponseMock(res));

        Map<String, Object> params = new Map<String, Object>{
            'post' => Boolean.getExample(),
            'apply' => Boolean.getExample(),
            'r_delete' => Boolean.getExample(),
            'action' => 'null',
            'location' => 'null',
            'propertylist' => new List<String>{''},
            'queryBatchSize' => Integer.getExample()
        };

        OASClient client;
        OASConfigmgrApi api;
        OASComDayCqDamCoreImplReportsReportE response;
        OASComDayCqDamCoreImplReportsReportE expectedResponse;
        String js = '';

        client = new OASClient();
        api = new OASConfigmgrApi(client);

        js = JSON.serialize(OASComDayCqDamCoreImplReportsReportE.getExample());
        res.setHeader('Content-Type', 'application/json');
        res.setBody(js);
        expectedResponse = OASComDayCqDamCoreImplReportsReportE.getExample();
        response = (OASComDayCqDamCoreImplReportsReportE) api.comDayCqDamCoreImplReportsReportExportService(params);
        System.assertEquals(expectedResponse, response);
    }

    /**
     * 
     *
     * 
     */
    @isTest
    private static void comDayCqDamCoreImplReportsReportPurgeServiceTest() {
        HttpResponse res = new HttpResponse();
        res.setStatusCode(200);
        res.setStatus('OK');
        Test.setMock(HttpCalloutMock.class, new OASResponseMock(res));

        Map<String, Object> params = new Map<String, Object>{
            'post' => Boolean.getExample(),
            'apply' => Boolean.getExample(),
            'r_delete' => Boolean.getExample(),
            'action' => 'null',
            'location' => 'null',
            'propertylist' => new List<String>{''},
            'schedulerExpression' => 'null',
            'maxSavedReports' => Integer.getExample(),
            'timeDuration' => Integer.getExample(),
            'enableReportPurge' => Boolean.getExample()
        };

        OASClient client;
        OASConfigmgrApi api;
        OASComDayCqDamCoreImplReportsReportP response;
        OASComDayCqDamCoreImplReportsReportP expectedResponse;
        String js = '';

        client = new OASClient();
        api = new OASConfigmgrApi(client);

        js = JSON.serialize(OASComDayCqDamCoreImplReportsReportP.getExample());
        res.setHeader('Content-Type', 'application/json');
        res.setBody(js);
        expectedResponse = OASComDayCqDamCoreImplReportsReportP.getExample();
        response = (OASComDayCqDamCoreImplReportsReportP) api.comDayCqDamCoreImplReportsReportPurgeService(params);
        System.assertEquals(expectedResponse, response);
    }

    /**
     * 
     *
     * 
     */
    @isTest
    private static void comDayCqDamCoreImplServletAssetDownloadServletTest() {
        HttpResponse res = new HttpResponse();
        res.setStatusCode(200);
        res.setStatus('OK');
        Test.setMock(HttpCalloutMock.class, new OASResponseMock(res));

        Map<String, Object> params = new Map<String, Object>{
            'post' => Boolean.getExample(),
            'apply' => Boolean.getExample(),
            'r_delete' => Boolean.getExample(),
            'action' => 'null',
            'location' => 'null',
            'propertylist' => new List<String>{''},
            'enabled' => Boolean.getExample()
        };

        OASClient client;
        OASConfigmgrApi api;
        OASComDayCqDamCoreImplServletAssetDo response;
        OASComDayCqDamCoreImplServletAssetDo expectedResponse;
        String js = '';

        client = new OASClient();
        api = new OASConfigmgrApi(client);

        js = JSON.serialize(OASComDayCqDamCoreImplServletAssetDo.getExample());
        res.setHeader('Content-Type', 'application/json');
        res.setBody(js);
        expectedResponse = OASComDayCqDamCoreImplServletAssetDo.getExample();
        response = (OASComDayCqDamCoreImplServletAssetDo) api.comDayCqDamCoreImplServletAssetDownloadServlet(params);
        System.assertEquals(expectedResponse, response);
    }

    /**
     * 
     *
     * 
     */
    @isTest
    private static void comDayCqDamCoreImplServletAssetStatusServletTest() {
        HttpResponse res = new HttpResponse();
        res.setStatusCode(200);
        res.setStatus('OK');
        Test.setMock(HttpCalloutMock.class, new OASResponseMock(res));

        Map<String, Object> params = new Map<String, Object>{
            'post' => Boolean.getExample(),
            'apply' => Boolean.getExample(),
            'r_delete' => Boolean.getExample(),
            'action' => 'null',
            'location' => 'null',
            'propertylist' => new List<String>{''},
            'cqDamBatchStatusMaxassets' => Integer.getExample()
        };

        OASClient client;
        OASConfigmgrApi api;
        OASComDayCqDamCoreImplServletAssetSt response;
        OASComDayCqDamCoreImplServletAssetSt expectedResponse;
        String js = '';

        client = new OASClient();
        api = new OASConfigmgrApi(client);

        js = JSON.serialize(OASComDayCqDamCoreImplServletAssetSt.getExample());
        res.setHeader('Content-Type', 'application/json');
        res.setBody(js);
        expectedResponse = OASComDayCqDamCoreImplServletAssetSt.getExample();
        response = (OASComDayCqDamCoreImplServletAssetSt) api.comDayCqDamCoreImplServletAssetStatusServlet(params);
        System.assertEquals(expectedResponse, response);
    }

    /**
     * 
     *
     * 
     */
    @isTest
    private static void comDayCqDamCoreImplServletAssetXMPSearchServletTest() {
        HttpResponse res = new HttpResponse();
        res.setStatusCode(200);
        res.setStatus('OK');
        Test.setMock(HttpCalloutMock.class, new OASResponseMock(res));

        Map<String, Object> params = new Map<String, Object>{
            'post' => Boolean.getExample(),
            'apply' => Boolean.getExample(),
            'r_delete' => Boolean.getExample(),
            'action' => 'null',
            'location' => 'null',
            'propertylist' => new List<String>{''},
            'cqDamBatchIndesignMaxassets' => Integer.getExample()
        };

        OASClient client;
        OASConfigmgrApi api;
        OASComDayCqDamCoreImplServletAssetXM response;
        OASComDayCqDamCoreImplServletAssetXM expectedResponse;
        String js = '';

        client = new OASClient();
        api = new OASConfigmgrApi(client);

        js = JSON.serialize(OASComDayCqDamCoreImplServletAssetXM.getExample());
        res.setHeader('Content-Type', 'application/json');
        res.setBody(js);
        expectedResponse = OASComDayCqDamCoreImplServletAssetXM.getExample();
        response = (OASComDayCqDamCoreImplServletAssetXM) api.comDayCqDamCoreImplServletAssetXMPSearchServlet(params);
        System.assertEquals(expectedResponse, response);
    }

    /**
     * 
     *
     * 
     */
    @isTest
    private static void comDayCqDamCoreImplServletBatchMetadataServletTest() {
        HttpResponse res = new HttpResponse();
        res.setStatusCode(200);
        res.setStatus('OK');
        Test.setMock(HttpCalloutMock.class, new OASResponseMock(res));

        Map<String, Object> params = new Map<String, Object>{
            'post' => Boolean.getExample(),
            'apply' => Boolean.getExample(),
            'r_delete' => Boolean.getExample(),
            'action' => 'null',
            'location' => 'null',
            'propertylist' => new List<String>{''},
            'cqDamBatchMetadataAssetDefault' => new List<String>{''},
            'cqDamBatchMetadataCollectionDefault' => new List<String>{''},
            'cqDamBatchMetadataMaxresources' => Integer.getExample()
        };

        OASClient client;
        OASConfigmgrApi api;
        OASComDayCqDamCoreImplServletBatchMe response;
        OASComDayCqDamCoreImplServletBatchMe expectedResponse;
        String js = '';

        client = new OASClient();
        api = new OASConfigmgrApi(client);

        js = JSON.serialize(OASComDayCqDamCoreImplServletBatchMe.getExample());
        res.setHeader('Content-Type', 'application/json');
        res.setBody(js);
        expectedResponse = OASComDayCqDamCoreImplServletBatchMe.getExample();
        response = (OASComDayCqDamCoreImplServletBatchMe) api.comDayCqDamCoreImplServletBatchMetadataServlet(params);
        System.assertEquals(expectedResponse, response);
    }

    /**
     * 
     *
     * 
     */
    @isTest
    private static void comDayCqDamCoreImplServletBinaryProviderServletTest() {
        HttpResponse res = new HttpResponse();
        res.setStatusCode(200);
        res.setStatus('OK');
        Test.setMock(HttpCalloutMock.class, new OASResponseMock(res));

        Map<String, Object> params = new Map<String, Object>{
            'post' => Boolean.getExample(),
            'apply' => Boolean.getExample(),
            'r_delete' => Boolean.getExample(),
            'action' => 'null',
            'location' => 'null',
            'propertylist' => new List<String>{''},
            'slingServletResourceTypes' => new List<String>{''},
            'slingServletMethods' => new List<String>{''},
            'cqDamDrmEnable' => Boolean.getExample()
        };

        OASClient client;
        OASConfigmgrApi api;
        OASComDayCqDamCoreImplServletBinaryP response;
        OASComDayCqDamCoreImplServletBinaryP expectedResponse;
        String js = '';

        client = new OASClient();
        api = new OASConfigmgrApi(client);

        js = JSON.serialize(OASComDayCqDamCoreImplServletBinaryP.getExample());
        res.setHeader('Content-Type', 'application/json');
        res.setBody(js);
        expectedResponse = OASComDayCqDamCoreImplServletBinaryP.getExample();
        response = (OASComDayCqDamCoreImplServletBinaryP) api.comDayCqDamCoreImplServletBinaryProviderServlet(params);
        System.assertEquals(expectedResponse, response);
    }

    /**
     * 
     *
     * 
     */
    @isTest
    private static void comDayCqDamCoreImplServletCollectionServletTest() {
        HttpResponse res = new HttpResponse();
        res.setStatusCode(200);
        res.setStatus('OK');
        Test.setMock(HttpCalloutMock.class, new OASResponseMock(res));

        Map<String, Object> params = new Map<String, Object>{
            'post' => Boolean.getExample(),
            'apply' => Boolean.getExample(),
            'r_delete' => Boolean.getExample(),
            'action' => 'null',
            'location' => 'null',
            'propertylist' => new List<String>{''},
            'cqDamBatchCollectionProperties' => new List<String>{''},
            'cqDamBatchCollectionMaxcollections' => Integer.getExample()
        };

        OASClient client;
        OASConfigmgrApi api;
        OASComDayCqDamCoreImplServletCollect response;
        OASComDayCqDamCoreImplServletCollect expectedResponse;
        String js = '';

        client = new OASClient();
        api = new OASConfigmgrApi(client);

        js = JSON.serialize(OASComDayCqDamCoreImplServletCollect.getExample());
        res.setHeader('Content-Type', 'application/json');
        res.setBody(js);
        expectedResponse = OASComDayCqDamCoreImplServletCollect.getExample();
        response = (OASComDayCqDamCoreImplServletCollect) api.comDayCqDamCoreImplServletCollectionServlet(params);
        System.assertEquals(expectedResponse, response);
    }

    /**
     * 
     *
     * 
     */
    @isTest
    private static void comDayCqDamCoreImplServletCollectionsServletTest() {
        HttpResponse res = new HttpResponse();
        res.setStatusCode(200);
        res.setStatus('OK');
        Test.setMock(HttpCalloutMock.class, new OASResponseMock(res));

        Map<String, Object> params = new Map<String, Object>{
            'post' => Boolean.getExample(),
            'apply' => Boolean.getExample(),
            'r_delete' => Boolean.getExample(),
            'action' => 'null',
            'location' => 'null',
            'propertylist' => new List<String>{''},
            'cqDamBatchCollectionsProperties' => new List<String>{''},
            'cqDamBatchCollectionsLimit' => Integer.getExample()
        };

        OASClient client;
        OASConfigmgrApi api;
        OASComDayCqDamCoreImplServletCollect response;
        OASComDayCqDamCoreImplServletCollect expectedResponse;
        String js = '';

        client = new OASClient();
        api = new OASConfigmgrApi(client);

        js = JSON.serialize(OASComDayCqDamCoreImplServletCollect.getExample());
        res.setHeader('Content-Type', 'application/json');
        res.setBody(js);
        expectedResponse = OASComDayCqDamCoreImplServletCollect.getExample();
        response = (OASComDayCqDamCoreImplServletCollect) api.comDayCqDamCoreImplServletCollectionsServlet(params);
        System.assertEquals(expectedResponse, response);
    }

    /**
     * 
     *
     * 
     */
    @isTest
    private static void comDayCqDamCoreImplServletCompanionServletTest() {
        HttpResponse res = new HttpResponse();
        res.setStatusCode(200);
        res.setStatus('OK');
        Test.setMock(HttpCalloutMock.class, new OASResponseMock(res));

        Map<String, Object> params = new Map<String, Object>{
            'post' => Boolean.getExample(),
            'apply' => Boolean.getExample(),
            'r_delete' => Boolean.getExample(),
            'action' => 'null',
            'location' => 'null',
            'propertylist' => new List<String>{''},
            'moreInfo' => 'null',
            'mntoverlaydamguicontentassetsmoreinfoHtmlpath' => 'null'
        };

        OASClient client;
        OASConfigmgrApi api;
        OASComDayCqDamCoreImplServletCompani response;
        OASComDayCqDamCoreImplServletCompani expectedResponse;
        String js = '';

        client = new OASClient();
        api = new OASConfigmgrApi(client);

        js = JSON.serialize(OASComDayCqDamCoreImplServletCompani.getExample());
        res.setHeader('Content-Type', 'application/json');
        res.setBody(js);
        expectedResponse = OASComDayCqDamCoreImplServletCompani.getExample();
        response = (OASComDayCqDamCoreImplServletCompani) api.comDayCqDamCoreImplServletCompanionServlet(params);
        System.assertEquals(expectedResponse, response);
    }

    /**
     * 
     *
     * 
     */
    @isTest
    private static void comDayCqDamCoreImplServletCreateAssetServletTest() {
        HttpResponse res = new HttpResponse();
        res.setStatusCode(200);
        res.setStatus('OK');
        Test.setMock(HttpCalloutMock.class, new OASResponseMock(res));

        Map<String, Object> params = new Map<String, Object>{
            'post' => Boolean.getExample(),
            'apply' => Boolean.getExample(),
            'r_delete' => Boolean.getExample(),
            'action' => 'null',
            'location' => 'null',
            'propertylist' => new List<String>{''},
            'detectDuplicate' => Boolean.getExample()
        };

        OASClient client;
        OASConfigmgrApi api;
        OASComDayCqDamCoreImplServletCreateA response;
        OASComDayCqDamCoreImplServletCreateA expectedResponse;
        String js = '';

        client = new OASClient();
        api = new OASConfigmgrApi(client);

        js = JSON.serialize(OASComDayCqDamCoreImplServletCreateA.getExample());
        res.setHeader('Content-Type', 'application/json');
        res.setBody(js);
        expectedResponse = OASComDayCqDamCoreImplServletCreateA.getExample();
        response = (OASComDayCqDamCoreImplServletCreateA) api.comDayCqDamCoreImplServletCreateAssetServlet(params);
        System.assertEquals(expectedResponse, response);
    }

    /**
     * 
     *
     * 
     */
    @isTest
    private static void comDayCqDamCoreImplServletDamContentDispositionFilterTest() {
        HttpResponse res = new HttpResponse();
        res.setStatusCode(200);
        res.setStatus('OK');
        Test.setMock(HttpCalloutMock.class, new OASResponseMock(res));

        Map<String, Object> params = new Map<String, Object>{
            'post' => Boolean.getExample(),
            'apply' => Boolean.getExample(),
            'r_delete' => Boolean.getExample(),
            'action' => 'null',
            'location' => 'null',
            'propertylist' => new List<String>{''},
            'cqMimeTypeBlacklist' => new List<String>{''},
            'cqDamEmptyMime' => Boolean.getExample()
        };

        OASClient client;
        OASConfigmgrApi api;
        OASComDayCqDamCoreImplServletDamCont response;
        OASComDayCqDamCoreImplServletDamCont expectedResponse;
        String js = '';

        client = new OASClient();
        api = new OASConfigmgrApi(client);

        js = JSON.serialize(OASComDayCqDamCoreImplServletDamCont.getExample());
        res.setHeader('Content-Type', 'application/json');
        res.setBody(js);
        expectedResponse = OASComDayCqDamCoreImplServletDamCont.getExample();
        response = (OASComDayCqDamCoreImplServletDamCont) api.comDayCqDamCoreImplServletDamContentDispositionFilter(params);
        System.assertEquals(expectedResponse, response);
    }

    /**
     * 
     *
     * 
     */
    @isTest
    private static void comDayCqDamCoreImplServletGuidLookupFilterTest() {
        HttpResponse res = new HttpResponse();
        res.setStatusCode(200);
        res.setStatus('OK');
        Test.setMock(HttpCalloutMock.class, new OASResponseMock(res));

        Map<String, Object> params = new Map<String, Object>{
            'post' => Boolean.getExample(),
            'apply' => Boolean.getExample(),
            'r_delete' => Boolean.getExample(),
            'action' => 'null',
            'location' => 'null',
            'propertylist' => new List<String>{''},
            'cqDamCoreGuidlookupfilterEnabled' => Boolean.getExample()
        };

        OASClient client;
        OASConfigmgrApi api;
        OASComDayCqDamCoreImplServletGuidLoo response;
        OASComDayCqDamCoreImplServletGuidLoo expectedResponse;
        String js = '';

        client = new OASClient();
        api = new OASConfigmgrApi(client);

        js = JSON.serialize(OASComDayCqDamCoreImplServletGuidLoo.getExample());
        res.setHeader('Content-Type', 'application/json');
        res.setBody(js);
        expectedResponse = OASComDayCqDamCoreImplServletGuidLoo.getExample();
        response = (OASComDayCqDamCoreImplServletGuidLoo) api.comDayCqDamCoreImplServletGuidLookupFilter(params);
        System.assertEquals(expectedResponse, response);
    }

    /**
     * 
     *
     * 
     */
    @isTest
    private static void comDayCqDamCoreImplServletHealthCheckServletTest() {
        HttpResponse res = new HttpResponse();
        res.setStatusCode(200);
        res.setStatus('OK');
        Test.setMock(HttpCalloutMock.class, new OASResponseMock(res));

        Map<String, Object> params = new Map<String, Object>{
            'post' => Boolean.getExample(),
            'apply' => Boolean.getExample(),
            'r_delete' => Boolean.getExample(),
            'action' => 'null',
            'location' => 'null',
            'propertylist' => new List<String>{''},
            'cqDamSyncWorkflowId' => 'null',
            'cqDamSyncFolderTypes' => new List<String>{''}
        };

        OASClient client;
        OASConfigmgrApi api;
        OASComDayCqDamCoreImplServletHealthC response;
        OASComDayCqDamCoreImplServletHealthC expectedResponse;
        String js = '';

        client = new OASClient();
        api = new OASConfigmgrApi(client);

        js = JSON.serialize(OASComDayCqDamCoreImplServletHealthC.getExample());
        res.setHeader('Content-Type', 'application/json');
        res.setBody(js);
        expectedResponse = OASComDayCqDamCoreImplServletHealthC.getExample();
        response = (OASComDayCqDamCoreImplServletHealthC) api.comDayCqDamCoreImplServletHealthCheckServlet(params);
        System.assertEquals(expectedResponse, response);
    }

    /**
     * 
     *
     * 
     */
    @isTest
    private static void comDayCqDamCoreImplServletMetadataGetServletTest() {
        HttpResponse res = new HttpResponse();
        res.setStatusCode(200);
        res.setStatus('OK');
        Test.setMock(HttpCalloutMock.class, new OASResponseMock(res));

        Map<String, Object> params = new Map<String, Object>{
            'post' => Boolean.getExample(),
            'apply' => Boolean.getExample(),
            'r_delete' => Boolean.getExample(),
            'action' => 'null',
            'location' => 'null',
            'propertylist' => new List<String>{''},
            'slingServletResourceTypes' => 'null',
            'slingServletMethods' => 'null',
            'slingServletExtensions' => 'null',
            'slingServletSelectors' => 'null'
        };

        OASClient client;
        OASConfigmgrApi api;
        OASComDayCqDamCoreImplServletMetadat response;
        OASComDayCqDamCoreImplServletMetadat expectedResponse;
        String js = '';

        client = new OASClient();
        api = new OASConfigmgrApi(client);

        js = JSON.serialize(OASComDayCqDamCoreImplServletMetadat.getExample());
        res.setHeader('Content-Type', 'application/json');
        res.setBody(js);
        expectedResponse = OASComDayCqDamCoreImplServletMetadat.getExample();
        response = (OASComDayCqDamCoreImplServletMetadat) api.comDayCqDamCoreImplServletMetadataGetServlet(params);
        System.assertEquals(expectedResponse, response);
    }

    /**
     * 
     *
     * 
     */
    @isTest
    private static void comDayCqDamCoreImplServletMultipleLicenseAcceptServletTest() {
        HttpResponse res = new HttpResponse();
        res.setStatusCode(200);
        res.setStatus('OK');
        Test.setMock(HttpCalloutMock.class, new OASResponseMock(res));

        Map<String, Object> params = new Map<String, Object>{
            'post' => Boolean.getExample(),
            'apply' => Boolean.getExample(),
            'r_delete' => Boolean.getExample(),
            'action' => 'null',
            'location' => 'null',
            'propertylist' => new List<String>{''},
            'cqDamDrmEnable' => Boolean.getExample()
        };

        OASClient client;
        OASConfigmgrApi api;
        OASComDayCqDamCoreImplServletMultipl response;
        OASComDayCqDamCoreImplServletMultipl expectedResponse;
        String js = '';

        client = new OASClient();
        api = new OASConfigmgrApi(client);

        js = JSON.serialize(OASComDayCqDamCoreImplServletMultipl.getExample());
        res.setHeader('Content-Type', 'application/json');
        res.setBody(js);
        expectedResponse = OASComDayCqDamCoreImplServletMultipl.getExample();
        response = (OASComDayCqDamCoreImplServletMultipl) api.comDayCqDamCoreImplServletMultipleLicenseAcceptServlet(params);
        System.assertEquals(expectedResponse, response);
    }

    /**
     * 
     *
     * 
     */
    @isTest
    private static void comDayCqDamCoreImplServletResourceCollectionServletTest() {
        HttpResponse res = new HttpResponse();
        res.setStatusCode(200);
        res.setStatus('OK');
        Test.setMock(HttpCalloutMock.class, new OASResponseMock(res));

        Map<String, Object> params = new Map<String, Object>{
            'post' => Boolean.getExample(),
            'apply' => Boolean.getExample(),
            'r_delete' => Boolean.getExample(),
            'action' => 'null',
            'location' => 'null',
            'propertylist' => new List<String>{''},
            'slingServletResourceTypes' => new List<String>{''},
            'slingServletMethods' => 'null',
            'slingServletSelectors' => 'null',
            'downloadConfig' => 'null',
            'viewSelector' => 'null',
            'sendEmail' => Boolean.getExample()
        };

        OASClient client;
        OASConfigmgrApi api;
        OASComDayCqDamCoreImplServletResourc response;
        OASComDayCqDamCoreImplServletResourc expectedResponse;
        String js = '';

        client = new OASClient();
        api = new OASConfigmgrApi(client);

        js = JSON.serialize(OASComDayCqDamCoreImplServletResourc.getExample());
        res.setHeader('Content-Type', 'application/json');
        res.setBody(js);
        expectedResponse = OASComDayCqDamCoreImplServletResourc.getExample();
        response = (OASComDayCqDamCoreImplServletResourc) api.comDayCqDamCoreImplServletResourceCollectionServlet(params);
        System.assertEquals(expectedResponse, response);
    }

    /**
     * 
     *
     * 
     */
    @isTest
    private static void comDayCqDamCoreImplUiPreviewFolderPreviewUpdaterImplTest() {
        HttpResponse res = new HttpResponse();
        res.setStatusCode(200);
        res.setStatus('OK');
        Test.setMock(HttpCalloutMock.class, new OASResponseMock(res));

        Map<String, Object> params = new Map<String, Object>{
            'post' => Boolean.getExample(),
            'apply' => Boolean.getExample(),
            'r_delete' => Boolean.getExample(),
            'action' => 'null',
            'location' => 'null',
            'propertylist' => new List<String>{''},
            'createPreviewEnabled' => Boolean.getExample(),
            'updatePreviewEnabled' => Boolean.getExample(),
            'queueSize' => Integer.getExample(),
            'folderPreviewRenditionRegex' => 'null'
        };

        OASClient client;
        OASConfigmgrApi api;
        OASComDayCqDamCoreImplUiPreviewFolde response;
        OASComDayCqDamCoreImplUiPreviewFolde expectedResponse;
        String js = '';

        client = new OASClient();
        api = new OASConfigmgrApi(client);

        js = JSON.serialize(OASComDayCqDamCoreImplUiPreviewFolde.getExample());
        res.setHeader('Content-Type', 'application/json');
        res.setBody(js);
        expectedResponse = OASComDayCqDamCoreImplUiPreviewFolde.getExample();
        response = (OASComDayCqDamCoreImplUiPreviewFolde) api.comDayCqDamCoreImplUiPreviewFolderPreviewUpdaterImpl(params);
        System.assertEquals(expectedResponse, response);
    }

    /**
     * 
     *
     * 
     */
    @isTest
    private static void comDayCqDamCoreImplUnzipUnzipConfigTest() {
        HttpResponse res = new HttpResponse();
        res.setStatusCode(200);
        res.setStatus('OK');
        Test.setMock(HttpCalloutMock.class, new OASResponseMock(res));

        Map<String, Object> params = new Map<String, Object>{
            'post' => Boolean.getExample(),
            'apply' => Boolean.getExample(),
            'r_delete' => Boolean.getExample(),
            'action' => 'null',
            'location' => 'null',
            'propertylist' => new List<String>{''},
            'cqDamConfigUnzipMaxuncompressedsize' => Integer.getExample(),
            'cqDamConfigUnzipEncoding' => 'null'
        };

        OASClient client;
        OASConfigmgrApi api;
        OASComDayCqDamCoreImplUnzipUnzipConf response;
        OASComDayCqDamCoreImplUnzipUnzipConf expectedResponse;
        String js = '';

        client = new OASClient();
        api = new OASConfigmgrApi(client);

        js = JSON.serialize(OASComDayCqDamCoreImplUnzipUnzipConf.getExample());
        res.setHeader('Content-Type', 'application/json');
        res.setBody(js);
        expectedResponse = OASComDayCqDamCoreImplUnzipUnzipConf.getExample();
        response = (OASComDayCqDamCoreImplUnzipUnzipConf) api.comDayCqDamCoreImplUnzipUnzipConfig(params);
        System.assertEquals(expectedResponse, response);
    }

    /**
     * 
     *
     * 
     */
    @isTest
    private static void comDayCqDamCoreProcessExifToolExtractMetadataProcessTest() {
        HttpResponse res = new HttpResponse();
        res.setStatusCode(200);
        res.setStatus('OK');
        Test.setMock(HttpCalloutMock.class, new OASResponseMock(res));

        Map<String, Object> params = new Map<String, Object>{
            'post' => Boolean.getExample(),
            'apply' => Boolean.getExample(),
            'r_delete' => Boolean.getExample(),
            'action' => 'null',
            'location' => 'null',
            'propertylist' => new List<String>{''},
            'processLabel' => 'null',
            'cqDamEnableSha1' => Boolean.getExample()
        };

        OASClient client;
        OASConfigmgrApi api;
        OASComDayCqDamCoreProcessExifToolExt response;
        OASComDayCqDamCoreProcessExifToolExt expectedResponse;
        String js = '';

        client = new OASClient();
        api = new OASConfigmgrApi(client);

        js = JSON.serialize(OASComDayCqDamCoreProcessExifToolExt.getExample());
        res.setHeader('Content-Type', 'application/json');
        res.setBody(js);
        expectedResponse = OASComDayCqDamCoreProcessExifToolExt.getExample();
        response = (OASComDayCqDamCoreProcessExifToolExt) api.comDayCqDamCoreProcessExifToolExtractMetadataProcess(params);
        System.assertEquals(expectedResponse, response);
    }

    /**
     * 
     *
     * 
     */
    @isTest
    private static void comDayCqDamCoreProcessExtractMetadataProcessTest() {
        HttpResponse res = new HttpResponse();
        res.setStatusCode(200);
        res.setStatus('OK');
        Test.setMock(HttpCalloutMock.class, new OASResponseMock(res));

        Map<String, Object> params = new Map<String, Object>{
            'post' => Boolean.getExample(),
            'apply' => Boolean.getExample(),
            'r_delete' => Boolean.getExample(),
            'action' => 'null',
            'location' => 'null',
            'propertylist' => new List<String>{''},
            'processLabel' => 'null',
            'cqDamEnableSha1' => Boolean.getExample()
        };

        OASClient client;
        OASConfigmgrApi api;
        OASComDayCqDamCoreProcessExtractMeta response;
        OASComDayCqDamCoreProcessExtractMeta expectedResponse;
        String js = '';

        client = new OASClient();
        api = new OASConfigmgrApi(client);

        js = JSON.serialize(OASComDayCqDamCoreProcessExtractMeta.getExample());
        res.setHeader('Content-Type', 'application/json');
        res.setBody(js);
        expectedResponse = OASComDayCqDamCoreProcessExtractMeta.getExample();
        response = (OASComDayCqDamCoreProcessExtractMeta) api.comDayCqDamCoreProcessExtractMetadataProcess(params);
        System.assertEquals(expectedResponse, response);
    }

    /**
     * 
     *
     * 
     */
    @isTest
    private static void comDayCqDamCoreProcessMetadataProcessorProcessTest() {
        HttpResponse res = new HttpResponse();
        res.setStatusCode(200);
        res.setStatus('OK');
        Test.setMock(HttpCalloutMock.class, new OASResponseMock(res));

        Map<String, Object> params = new Map<String, Object>{
            'post' => Boolean.getExample(),
            'apply' => Boolean.getExample(),
            'r_delete' => Boolean.getExample(),
            'action' => 'null',
            'location' => 'null',
            'propertylist' => new List<String>{''},
            'processLabel' => 'null',
            'cqDamEnableSha1' => Boolean.getExample(),
            'cqDamMetadataXssprotectedProperties' => new List<String>{''}
        };

        OASClient client;
        OASConfigmgrApi api;
        OASComDayCqDamCoreProcessMetadataPro response;
        OASComDayCqDamCoreProcessMetadataPro expectedResponse;
        String js = '';

        client = new OASClient();
        api = new OASConfigmgrApi(client);

        js = JSON.serialize(OASComDayCqDamCoreProcessMetadataPro.getExample());
        res.setHeader('Content-Type', 'application/json');
        res.setBody(js);
        expectedResponse = OASComDayCqDamCoreProcessMetadataPro.getExample();
        response = (OASComDayCqDamCoreProcessMetadataPro) api.comDayCqDamCoreProcessMetadataProcessorProcess(params);
        System.assertEquals(expectedResponse, response);
    }

    /**
     * 
     *
     * 
     */
    @isTest
    private static void comDayCqDamHandlerFfmpegLocatorImplTest() {
        HttpResponse res = new HttpResponse();
        res.setStatusCode(200);
        res.setStatus('OK');
        Test.setMock(HttpCalloutMock.class, new OASResponseMock(res));

        Map<String, Object> params = new Map<String, Object>{
            'post' => Boolean.getExample(),
            'apply' => Boolean.getExample(),
            'r_delete' => Boolean.getExample(),
            'action' => 'null',
            'location' => 'null',
            'propertylist' => new List<String>{''},
            'executableSearchpath' => new List<String>{''}
        };

        OASClient client;
        OASConfigmgrApi api;
        OASComDayCqDamHandlerFfmpegLocatorIm response;
        OASComDayCqDamHandlerFfmpegLocatorIm expectedResponse;
        String js = '';

        client = new OASClient();
        api = new OASConfigmgrApi(client);

        js = JSON.serialize(OASComDayCqDamHandlerFfmpegLocatorIm.getExample());
        res.setHeader('Content-Type', 'application/json');
        res.setBody(js);
        expectedResponse = OASComDayCqDamHandlerFfmpegLocatorIm.getExample();
        response = (OASComDayCqDamHandlerFfmpegLocatorIm) api.comDayCqDamHandlerFfmpegLocatorImpl(params);
        System.assertEquals(expectedResponse, response);
    }

    /**
     * 
     *
     * 
     */
    @isTest
    private static void comDayCqDamHandlerGibsonFontmanagerImplFontManagerServiceImplTest() {
        HttpResponse res = new HttpResponse();
        res.setStatusCode(200);
        res.setStatus('OK');
        Test.setMock(HttpCalloutMock.class, new OASResponseMock(res));

        Map<String, Object> params = new Map<String, Object>{
            'post' => Boolean.getExample(),
            'apply' => Boolean.getExample(),
            'r_delete' => Boolean.getExample(),
            'action' => 'null',
            'location' => 'null',
            'propertylist' => new List<String>{''},
            'eventFilter' => 'null',
            'fontmgrSystemFontDir' => new List<String>{''},
            'fontmgrAdobeFontDir' => 'null',
            'fontmgrCustomerFontDir' => 'null'
        };

        OASClient client;
        OASConfigmgrApi api;
        OASComDayCqDamHandlerGibsonFontmanag response;
        OASComDayCqDamHandlerGibsonFontmanag expectedResponse;
        String js = '';

        client = new OASClient();
        api = new OASConfigmgrApi(client);

        js = JSON.serialize(OASComDayCqDamHandlerGibsonFontmanag.getExample());
        res.setHeader('Content-Type', 'application/json');
        res.setBody(js);
        expectedResponse = OASComDayCqDamHandlerGibsonFontmanag.getExample();
        response = (OASComDayCqDamHandlerGibsonFontmanag) api.comDayCqDamHandlerGibsonFontmanagerImplFontManagerServiceImpl(params);
        System.assertEquals(expectedResponse, response);
    }

    /**
     * 
     *
     * 
     */
    @isTest
    private static void comDayCqDamHandlerStandardPdfPdfHandlerTest() {
        HttpResponse res = new HttpResponse();
        res.setStatusCode(200);
        res.setStatus('OK');
        Test.setMock(HttpCalloutMock.class, new OASResponseMock(res));

        Map<String, Object> params = new Map<String, Object>{
            'post' => Boolean.getExample(),
            'apply' => Boolean.getExample(),
            'r_delete' => Boolean.getExample(),
            'action' => 'null',
            'location' => 'null',
            'propertylist' => new List<String>{''},
            'rasterAnnotation' => Boolean.getExample()
        };

        OASClient client;
        OASConfigmgrApi api;
        OASComDayCqDamHandlerStandardPdfPdfH response;
        OASComDayCqDamHandlerStandardPdfPdfH expectedResponse;
        String js = '';

        client = new OASClient();
        api = new OASConfigmgrApi(client);

        js = JSON.serialize(OASComDayCqDamHandlerStandardPdfPdfH.getExample());
        res.setHeader('Content-Type', 'application/json');
        res.setBody(js);
        expectedResponse = OASComDayCqDamHandlerStandardPdfPdfH.getExample();
        response = (OASComDayCqDamHandlerStandardPdfPdfH) api.comDayCqDamHandlerStandardPdfPdfHandler(params);
        System.assertEquals(expectedResponse, response);
    }

    /**
     * 
     *
     * 
     */
    @isTest
    private static void comDayCqDamHandlerStandardPsPostScriptHandlerTest() {
        HttpResponse res = new HttpResponse();
        res.setStatusCode(200);
        res.setStatus('OK');
        Test.setMock(HttpCalloutMock.class, new OASResponseMock(res));

        Map<String, Object> params = new Map<String, Object>{
            'post' => Boolean.getExample(),
            'apply' => Boolean.getExample(),
            'r_delete' => Boolean.getExample(),
            'action' => 'null',
            'location' => 'null',
            'propertylist' => new List<String>{''},
            'rasterAnnotation' => Boolean.getExample()
        };

        OASClient client;
        OASConfigmgrApi api;
        OASComDayCqDamHandlerStandardPsPostS response;
        OASComDayCqDamHandlerStandardPsPostS expectedResponse;
        String js = '';

        client = new OASClient();
        api = new OASConfigmgrApi(client);

        js = JSON.serialize(OASComDayCqDamHandlerStandardPsPostS.getExample());
        res.setHeader('Content-Type', 'application/json');
        res.setBody(js);
        expectedResponse = OASComDayCqDamHandlerStandardPsPostS.getExample();
        response = (OASComDayCqDamHandlerStandardPsPostS) api.comDayCqDamHandlerStandardPsPostScriptHandler(params);
        System.assertEquals(expectedResponse, response);
    }

    /**
     * 
     *
     * 
     */
    @isTest
    private static void comDayCqDamHandlerStandardPsdPsdHandlerTest() {
        HttpResponse res = new HttpResponse();
        res.setStatusCode(200);
        res.setStatus('OK');
        Test.setMock(HttpCalloutMock.class, new OASResponseMock(res));

        Map<String, Object> params = new Map<String, Object>{
            'post' => Boolean.getExample(),
            'apply' => Boolean.getExample(),
            'r_delete' => Boolean.getExample(),
            'action' => 'null',
            'location' => 'null',
            'propertylist' => new List<String>{''},
            'largeFileThreshold' => Integer.getExample()
        };

        OASClient client;
        OASConfigmgrApi api;
        OASComDayCqDamHandlerStandardPsdPsdH response;
        OASComDayCqDamHandlerStandardPsdPsdH expectedResponse;
        String js = '';

        client = new OASClient();
        api = new OASConfigmgrApi(client);

        js = JSON.serialize(OASComDayCqDamHandlerStandardPsdPsdH.getExample());
        res.setHeader('Content-Type', 'application/json');
        res.setBody(js);
        expectedResponse = OASComDayCqDamHandlerStandardPsdPsdH.getExample();
        response = (OASComDayCqDamHandlerStandardPsdPsdH) api.comDayCqDamHandlerStandardPsdPsdHandler(params);
        System.assertEquals(expectedResponse, response);
    }

    /**
     * 
     *
     * 
     */
    @isTest
    private static void comDayCqDamIdsImplIDSJobProcessorTest() {
        HttpResponse res = new HttpResponse();
        res.setStatusCode(200);
        res.setStatus('OK');
        Test.setMock(HttpCalloutMock.class, new OASResponseMock(res));

        Map<String, Object> params = new Map<String, Object>{
            'post' => Boolean.getExample(),
            'apply' => Boolean.getExample(),
            'r_delete' => Boolean.getExample(),
            'action' => 'null',
            'location' => 'null',
            'propertylist' => new List<String>{''},
            'enableMultisession' => Boolean.getExample(),
            'idsCcEnable' => Boolean.getExample(),
            'enableRetry' => Boolean.getExample(),
            'enableRetryScripterror' => Boolean.getExample(),
            'externalizerDomainCqhost' => 'null',
            'externalizerDomainHttp' => 'null'
        };

        OASClient client;
        OASConfigmgrApi api;
        OASComDayCqDamIdsImplIDSJobProcessor response;
        OASComDayCqDamIdsImplIDSJobProcessor expectedResponse;
        String js = '';

        client = new OASClient();
        api = new OASConfigmgrApi(client);

        js = JSON.serialize(OASComDayCqDamIdsImplIDSJobProcessor.getExample());
        res.setHeader('Content-Type', 'application/json');
        res.setBody(js);
        expectedResponse = OASComDayCqDamIdsImplIDSJobProcessor.getExample();
        response = (OASComDayCqDamIdsImplIDSJobProcessor) api.comDayCqDamIdsImplIDSJobProcessor(params);
        System.assertEquals(expectedResponse, response);
    }

    /**
     * 
     *
     * 
     */
    @isTest
    private static void comDayCqDamIdsImplIDSPoolManagerImplTest() {
        HttpResponse res = new HttpResponse();
        res.setStatusCode(200);
        res.setStatus('OK');
        Test.setMock(HttpCalloutMock.class, new OASResponseMock(res));

        Map<String, Object> params = new Map<String, Object>{
            'post' => Boolean.getExample(),
            'apply' => Boolean.getExample(),
            'r_delete' => Boolean.getExample(),
            'action' => 'null',
            'location' => 'null',
            'propertylist' => new List<String>{''},
            'maxErrorsToBlacklist' => Integer.getExample(),
            'retryIntervalToWhitelist' => Integer.getExample(),
            'connectTimeout' => Integer.getExample(),
            'socketTimeout' => Integer.getExample(),
            'processLabel' => 'null',
            'connectionUseMax' => Integer.getExample()
        };

        OASClient client;
        OASConfigmgrApi api;
        OASComDayCqDamIdsImplIDSPoolManagerI response;
        OASComDayCqDamIdsImplIDSPoolManagerI expectedResponse;
        String js = '';

        client = new OASClient();
        api = new OASConfigmgrApi(client);

        js = JSON.serialize(OASComDayCqDamIdsImplIDSPoolManagerI.getExample());
        res.setHeader('Content-Type', 'application/json');
        res.setBody(js);
        expectedResponse = OASComDayCqDamIdsImplIDSPoolManagerI.getExample();
        response = (OASComDayCqDamIdsImplIDSPoolManagerI) api.comDayCqDamIdsImplIDSPoolManagerImpl(params);
        System.assertEquals(expectedResponse, response);
    }

    /**
     * 
     *
     * 
     */
    @isTest
    private static void comDayCqDamInddImplHandlerIndesignXMPHandlerTest() {
        HttpResponse res = new HttpResponse();
        res.setStatusCode(200);
        res.setStatus('OK');
        Test.setMock(HttpCalloutMock.class, new OASResponseMock(res));

        Map<String, Object> params = new Map<String, Object>{
            'post' => Boolean.getExample(),
            'apply' => Boolean.getExample(),
            'r_delete' => Boolean.getExample(),
            'action' => 'null',
            'location' => 'null',
            'propertylist' => new List<String>{''},
            'processLabel' => 'null',
            'extractPages' => Boolean.getExample()
        };

        OASClient client;
        OASConfigmgrApi api;
        OASComDayCqDamInddImplHandlerIndesig response;
        OASComDayCqDamInddImplHandlerIndesig expectedResponse;
        String js = '';

        client = new OASClient();
        api = new OASConfigmgrApi(client);

        js = JSON.serialize(OASComDayCqDamInddImplHandlerIndesig.getExample());
        res.setHeader('Content-Type', 'application/json');
        res.setBody(js);
        expectedResponse = OASComDayCqDamInddImplHandlerIndesig.getExample();
        response = (OASComDayCqDamInddImplHandlerIndesig) api.comDayCqDamInddImplHandlerIndesignXMPHandler(params);
        System.assertEquals(expectedResponse, response);
    }

    /**
     * 
     *
     * 
     */
    @isTest
    private static void comDayCqDamInddImplServletSnippetCreationServletTest() {
        HttpResponse res = new HttpResponse();
        res.setStatusCode(200);
        res.setStatus('OK');
        Test.setMock(HttpCalloutMock.class, new OASResponseMock(res));

        Map<String, Object> params = new Map<String, Object>{
            'post' => Boolean.getExample(),
            'apply' => Boolean.getExample(),
            'r_delete' => Boolean.getExample(),
            'action' => 'null',
            'location' => 'null',
            'propertylist' => new List<String>{''},
            'snippetcreationMaxcollections' => Integer.getExample()
        };

        OASClient client;
        OASConfigmgrApi api;
        OASComDayCqDamInddImplServletSnippet response;
        OASComDayCqDamInddImplServletSnippet expectedResponse;
        String js = '';

        client = new OASClient();
        api = new OASConfigmgrApi(client);

        js = JSON.serialize(OASComDayCqDamInddImplServletSnippet.getExample());
        res.setHeader('Content-Type', 'application/json');
        res.setBody(js);
        expectedResponse = OASComDayCqDamInddImplServletSnippet.getExample();
        response = (OASComDayCqDamInddImplServletSnippet) api.comDayCqDamInddImplServletSnippetCreationServlet(params);
        System.assertEquals(expectedResponse, response);
    }

    /**
     * 
     *
     * 
     */
    @isTest
    private static void comDayCqDamInddProcessINDDMediaExtractProcessTest() {
        HttpResponse res = new HttpResponse();
        res.setStatusCode(200);
        res.setStatus('OK');
        Test.setMock(HttpCalloutMock.class, new OASResponseMock(res));

        Map<String, Object> params = new Map<String, Object>{
            'post' => Boolean.getExample(),
            'apply' => Boolean.getExample(),
            'r_delete' => Boolean.getExample(),
            'action' => 'null',
            'location' => 'null',
            'propertylist' => new List<String>{''},
            'processLabel' => 'null',
            'cqDamInddPagesRegex' => 'null',
            'idsJobDecoupled' => Boolean.getExample(),
            'idsJobWorkflowModel' => 'null'
        };

        OASClient client;
        OASConfigmgrApi api;
        OASComDayCqDamInddProcessINDDMediaEx response;
        OASComDayCqDamInddProcessINDDMediaEx expectedResponse;
        String js = '';

        client = new OASClient();
        api = new OASConfigmgrApi(client);

        js = JSON.serialize(OASComDayCqDamInddProcessINDDMediaEx.getExample());
        res.setHeader('Content-Type', 'application/json');
        res.setBody(js);
        expectedResponse = OASComDayCqDamInddProcessINDDMediaEx.getExample();
        response = (OASComDayCqDamInddProcessINDDMediaEx) api.comDayCqDamInddProcessINDDMediaExtractProcess(params);
        System.assertEquals(expectedResponse, response);
    }

    /**
     * 
     *
     * 
     */
    @isTest
    private static void comDayCqDamPerformanceInternalAssetPerformanceDataHandlerImplTest() {
        HttpResponse res = new HttpResponse();
        res.setStatusCode(200);
        res.setStatus('OK');
        Test.setMock(HttpCalloutMock.class, new OASResponseMock(res));

        Map<String, Object> params = new Map<String, Object>{
            'post' => Boolean.getExample(),
            'apply' => Boolean.getExample(),
            'r_delete' => Boolean.getExample(),
            'action' => 'null',
            'location' => 'null',
            'propertylist' => new List<String>{''},
            'batchCommitSize' => Integer.getExample()
        };

        OASClient client;
        OASConfigmgrApi api;
        OASComDayCqDamPerformanceInternalAss response;
        OASComDayCqDamPerformanceInternalAss expectedResponse;
        String js = '';

        client = new OASClient();
        api = new OASConfigmgrApi(client);

        js = JSON.serialize(OASComDayCqDamPerformanceInternalAss.getExample());
        res.setHeader('Content-Type', 'application/json');
        res.setBody(js);
        expectedResponse = OASComDayCqDamPerformanceInternalAss.getExample();
        response = (OASComDayCqDamPerformanceInternalAss) api.comDayCqDamPerformanceInternalAssetPerformanceDataHandlerImpl(params);
        System.assertEquals(expectedResponse, response);
    }

    /**
     * 
     *
     * 
     */
    @isTest
    private static void comDayCqDamPerformanceInternalAssetPerformanceReportSyncJobTest() {
        HttpResponse res = new HttpResponse();
        res.setStatusCode(200);
        res.setStatus('OK');
        Test.setMock(HttpCalloutMock.class, new OASResponseMock(res));

        Map<String, Object> params = new Map<String, Object>{
            'post' => Boolean.getExample(),
            'apply' => Boolean.getExample(),
            'r_delete' => Boolean.getExample(),
            'action' => 'null',
            'location' => 'null',
            'propertylist' => new List<String>{''},
            'schedulerExpression' => 'null'
        };

        OASClient client;
        OASConfigmgrApi api;
        OASComDayCqDamPerformanceInternalAss response;
        OASComDayCqDamPerformanceInternalAss expectedResponse;
        String js = '';

        client = new OASClient();
        api = new OASConfigmgrApi(client);

        js = JSON.serialize(OASComDayCqDamPerformanceInternalAss.getExample());
        res.setHeader('Content-Type', 'application/json');
        res.setBody(js);
        expectedResponse = OASComDayCqDamPerformanceInternalAss.getExample();
        response = (OASComDayCqDamPerformanceInternalAss) api.comDayCqDamPerformanceInternalAssetPerformanceReportSyncJob(params);
        System.assertEquals(expectedResponse, response);
    }

    /**
     * 
     *
     * 
     */
    @isTest
    private static void comDayCqDamPimImplSourcingUploadProcessProductAssetsUploadProTest() {
        HttpResponse res = new HttpResponse();
        res.setStatusCode(200);
        res.setStatus('OK');
        Test.setMock(HttpCalloutMock.class, new OASResponseMock(res));

        Map<String, Object> params = new Map<String, Object>{
            'post' => Boolean.getExample(),
            'apply' => Boolean.getExample(),
            'r_delete' => Boolean.getExample(),
            'action' => 'null',
            'location' => 'null',
            'propertylist' => new List<String>{''},
            'deleteZipFile' => Boolean.getExample()
        };

        OASClient client;
        OASConfigmgrApi api;
        OASComDayCqDamPimImplSourcingUploadP response;
        OASComDayCqDamPimImplSourcingUploadP expectedResponse;
        String js = '';

        client = new OASClient();
        api = new OASConfigmgrApi(client);

        js = JSON.serialize(OASComDayCqDamPimImplSourcingUploadP.getExample());
        res.setHeader('Content-Type', 'application/json');
        res.setBody(js);
        expectedResponse = OASComDayCqDamPimImplSourcingUploadP.getExample();
        response = (OASComDayCqDamPimImplSourcingUploadP) api.comDayCqDamPimImplSourcingUploadProcessProductAssetsUploadPro(params);
        System.assertEquals(expectedResponse, response);
    }

    /**
     * 
     *
     * 
     */
    @isTest
    private static void comDayCqDamS7damCommonAnalyticsImplS7damDynamicMediaConfigEvenTest() {
        HttpResponse res = new HttpResponse();
        res.setStatusCode(200);
        res.setStatus('OK');
        Test.setMock(HttpCalloutMock.class, new OASResponseMock(res));

        Map<String, Object> params = new Map<String, Object>{
            'post' => Boolean.getExample(),
            'apply' => Boolean.getExample(),
            'r_delete' => Boolean.getExample(),
            'action' => 'null',
            'location' => 'null',
            'propertylist' => new List<String>{''},
            'cqDamS7damDynamicmediaconfigeventlistenerEnabled' => Boolean.getExample()
        };

        OASClient client;
        OASConfigmgrApi api;
        OASComDayCqDamS7damCommonAnalyticsIm response;
        OASComDayCqDamS7damCommonAnalyticsIm expectedResponse;
        String js = '';

        client = new OASClient();
        api = new OASConfigmgrApi(client);

        js = JSON.serialize(OASComDayCqDamS7damCommonAnalyticsIm.getExample());
        res.setHeader('Content-Type', 'application/json');
        res.setBody(js);
        expectedResponse = OASComDayCqDamS7damCommonAnalyticsIm.getExample();
        response = (OASComDayCqDamS7damCommonAnalyticsIm) api.comDayCqDamS7damCommonAnalyticsImplS7damDynamicMediaConfigEven(params);
        System.assertEquals(expectedResponse, response);
    }

    /**
     * 
     *
     * 
     */
    @isTest
    private static void comDayCqDamS7damCommonAnalyticsImplSiteCatalystReportRunnerTest() {
        HttpResponse res = new HttpResponse();
        res.setStatusCode(200);
        res.setStatus('OK');
        Test.setMock(HttpCalloutMock.class, new OASResponseMock(res));

        Map<String, Object> params = new Map<String, Object>{
            'post' => Boolean.getExample(),
            'apply' => Boolean.getExample(),
            'r_delete' => Boolean.getExample(),
            'action' => 'null',
            'location' => 'null',
            'propertylist' => new List<String>{''},
            'schedulerExpression' => 'null',
            'schedulerConcurrent' => Boolean.getExample()
        };

        OASClient client;
        OASConfigmgrApi api;
        OASComDayCqDamS7damCommonAnalyticsIm response;
        OASComDayCqDamS7damCommonAnalyticsIm expectedResponse;
        String js = '';

        client = new OASClient();
        api = new OASConfigmgrApi(client);

        js = JSON.serialize(OASComDayCqDamS7damCommonAnalyticsIm.getExample());
        res.setHeader('Content-Type', 'application/json');
        res.setBody(js);
        expectedResponse = OASComDayCqDamS7damCommonAnalyticsIm.getExample();
        response = (OASComDayCqDamS7damCommonAnalyticsIm) api.comDayCqDamS7damCommonAnalyticsImplSiteCatalystReportRunner(params);
        System.assertEquals(expectedResponse, response);
    }

    /**
     * 
     *
     * 
     */
    @isTest
    private static void comDayCqDamS7damCommonPostServletsSetCreateHandlerTest() {
        HttpResponse res = new HttpResponse();
        res.setStatusCode(200);
        res.setStatus('OK');
        Test.setMock(HttpCalloutMock.class, new OASResponseMock(res));

        Map<String, Object> params = new Map<String, Object>{
            'post' => Boolean.getExample(),
            'apply' => Boolean.getExample(),
            'r_delete' => Boolean.getExample(),
            'action' => 'null',
            'location' => 'null',
            'propertylist' => new List<String>{''},
            'slingPostOperation' => 'null',
            'slingServletMethods' => 'null'
        };

        OASClient client;
        OASConfigmgrApi api;
        OASComDayCqDamS7damCommonPostServlet response;
        OASComDayCqDamS7damCommonPostServlet expectedResponse;
        String js = '';

        client = new OASClient();
        api = new OASConfigmgrApi(client);

        js = JSON.serialize(OASComDayCqDamS7damCommonPostServlet.getExample());
        res.setHeader('Content-Type', 'application/json');
        res.setBody(js);
        expectedResponse = OASComDayCqDamS7damCommonPostServlet.getExample();
        response = (OASComDayCqDamS7damCommonPostServlet) api.comDayCqDamS7damCommonPostServletsSetCreateHandler(params);
        System.assertEquals(expectedResponse, response);
    }

    /**
     * 
     *
     * 
     */
    @isTest
    private static void comDayCqDamS7damCommonPostServletsSetModifyHandlerTest() {
        HttpResponse res = new HttpResponse();
        res.setStatusCode(200);
        res.setStatus('OK');
        Test.setMock(HttpCalloutMock.class, new OASResponseMock(res));

        Map<String, Object> params = new Map<String, Object>{
            'post' => Boolean.getExample(),
            'apply' => Boolean.getExample(),
            'r_delete' => Boolean.getExample(),
            'action' => 'null',
            'location' => 'null',
            'propertylist' => new List<String>{''},
            'slingPostOperation' => 'null',
            'slingServletMethods' => 'null'
        };

        OASClient client;
        OASConfigmgrApi api;
        OASComDayCqDamS7damCommonPostServlet response;
        OASComDayCqDamS7damCommonPostServlet expectedResponse;
        String js = '';

        client = new OASClient();
        api = new OASConfigmgrApi(client);

        js = JSON.serialize(OASComDayCqDamS7damCommonPostServlet.getExample());
        res.setHeader('Content-Type', 'application/json');
        res.setBody(js);
        expectedResponse = OASComDayCqDamS7damCommonPostServlet.getExample();
        response = (OASComDayCqDamS7damCommonPostServlet) api.comDayCqDamS7damCommonPostServletsSetModifyHandler(params);
        System.assertEquals(expectedResponse, response);
    }

    /**
     * 
     *
     * 
     */
    @isTest
    private static void comDayCqDamS7damCommonProcessVideoThumbnailDownloadProcessTest() {
        HttpResponse res = new HttpResponse();
        res.setStatusCode(200);
        res.setStatus('OK');
        Test.setMock(HttpCalloutMock.class, new OASResponseMock(res));

        Map<String, Object> params = new Map<String, Object>{
            'post' => Boolean.getExample(),
            'apply' => Boolean.getExample(),
            'r_delete' => Boolean.getExample(),
            'action' => 'null',
            'location' => 'null',
            'propertylist' => new List<String>{''},
            'processLabel' => 'null'
        };

        OASClient client;
        OASConfigmgrApi api;
        OASComDayCqDamS7damCommonProcessVide response;
        OASComDayCqDamS7damCommonProcessVide expectedResponse;
        String js = '';

        client = new OASClient();
        api = new OASConfigmgrApi(client);

        js = JSON.serialize(OASComDayCqDamS7damCommonProcessVide.getExample());
        res.setHeader('Content-Type', 'application/json');
        res.setBody(js);
        expectedResponse = OASComDayCqDamS7damCommonProcessVide.getExample();
        response = (OASComDayCqDamS7damCommonProcessVide) api.comDayCqDamS7damCommonProcessVideoThumbnailDownloadProcess(params);
        System.assertEquals(expectedResponse, response);
    }

    /**
     * 
     *
     * 
     */
    @isTest
    private static void comDayCqDamS7damCommonS7damDamChangeEventListenerTest() {
        HttpResponse res = new HttpResponse();
        res.setStatusCode(200);
        res.setStatus('OK');
        Test.setMock(HttpCalloutMock.class, new OASResponseMock(res));

        Map<String, Object> params = new Map<String, Object>{
            'post' => Boolean.getExample(),
            'apply' => Boolean.getExample(),
            'r_delete' => Boolean.getExample(),
            'action' => 'null',
            'location' => 'null',
            'propertylist' => new List<String>{''},
            'cqDamS7damDamchangeeventlistenerEnabled' => Boolean.getExample()
        };

        OASClient client;
        OASConfigmgrApi api;
        OASComDayCqDamS7damCommonS7damDamCha response;
        OASComDayCqDamS7damCommonS7damDamCha expectedResponse;
        String js = '';

        client = new OASClient();
        api = new OASConfigmgrApi(client);

        js = JSON.serialize(OASComDayCqDamS7damCommonS7damDamCha.getExample());
        res.setHeader('Content-Type', 'application/json');
        res.setBody(js);
        expectedResponse = OASComDayCqDamS7damCommonS7damDamCha.getExample();
        response = (OASComDayCqDamS7damCommonS7damDamCha) api.comDayCqDamS7damCommonS7damDamChangeEventListener(params);
        System.assertEquals(expectedResponse, response);
    }

    /**
     * 
     *
     * 
     */
    @isTest
    private static void comDayCqDamS7damCommonServletsS7damProductInfoServletTest() {
        HttpResponse res = new HttpResponse();
        res.setStatusCode(200);
        res.setStatus('OK');
        Test.setMock(HttpCalloutMock.class, new OASResponseMock(res));

        Map<String, Object> params = new Map<String, Object>{
            'post' => Boolean.getExample(),
            'apply' => Boolean.getExample(),
            'r_delete' => Boolean.getExample(),
            'action' => 'null',
            'location' => 'null',
            'propertylist' => new List<String>{''},
            'slingServletPaths' => 'null',
            'slingServletMethods' => 'null'
        };

        OASClient client;
        OASConfigmgrApi api;
        OASComDayCqDamS7damCommonServletsS7d response;
        OASComDayCqDamS7damCommonServletsS7d expectedResponse;
        String js = '';

        client = new OASClient();
        api = new OASConfigmgrApi(client);

        js = JSON.serialize(OASComDayCqDamS7damCommonServletsS7d.getExample());
        res.setHeader('Content-Type', 'application/json');
        res.setBody(js);
        expectedResponse = OASComDayCqDamS7damCommonServletsS7d.getExample();
        response = (OASComDayCqDamS7damCommonServletsS7d) api.comDayCqDamS7damCommonServletsS7damProductInfoServlet(params);
        System.assertEquals(expectedResponse, response);
    }

    /**
     * 
     *
     * 
     */
    @isTest
    private static void comDayCqDamS7damCommonVideoImplVideoProxyClientServiceImplTest() {
        HttpResponse res = new HttpResponse();
        res.setStatusCode(200);
        res.setStatus('OK');
        Test.setMock(HttpCalloutMock.class, new OASResponseMock(res));

        Map<String, Object> params = new Map<String, Object>{
            'post' => Boolean.getExample(),
            'apply' => Boolean.getExample(),
            'r_delete' => Boolean.getExample(),
            'action' => 'null',
            'location' => 'null',
            'propertylist' => new List<String>{''},
            'cqDamS7damVideoproxyclientserviceMultipartuploadMinsizeName' => Integer.getExample(),
            'cqDamS7damVideoproxyclientserviceMultipartuploadPartsizeName' => Integer.getExample(),
            'cqDamS7damVideoproxyclientserviceMultipartuploadNumthreadName' => Integer.getExample(),
            'cqDamS7damVideoproxyclientserviceHttpReadtimeoutName' => Integer.getExample(),
            'cqDamS7damVideoproxyclientserviceHttpConnectiontimeoutName' => Integer.getExample(),
            'cqDamS7damVideoproxyclientserviceHttpMaxretrycountName' => Integer.getExample(),
            'cqDamS7damVideoproxyclientserviceUploadprogressIntervalName' => Integer.getExample()
        };

        OASClient client;
        OASConfigmgrApi api;
        OASComDayCqDamS7damCommonVideoImplVi response;
        OASComDayCqDamS7damCommonVideoImplVi expectedResponse;
        String js = '';

        client = new OASClient();
        api = new OASConfigmgrApi(client);

        js = JSON.serialize(OASComDayCqDamS7damCommonVideoImplVi.getExample());
        res.setHeader('Content-Type', 'application/json');
        res.setBody(js);
        expectedResponse = OASComDayCqDamS7damCommonVideoImplVi.getExample();
        response = (OASComDayCqDamS7damCommonVideoImplVi) api.comDayCqDamS7damCommonVideoImplVideoProxyClientServiceImpl(params);
        System.assertEquals(expectedResponse, response);
    }

    /**
     * 
     *
     * 
     */
    @isTest
    private static void comDayCqDamScene7ImplScene7APIClientImplTest() {
        HttpResponse res = new HttpResponse();
        res.setStatusCode(200);
        res.setStatus('OK');
        Test.setMock(HttpCalloutMock.class, new OASResponseMock(res));

        Map<String, Object> params = new Map<String, Object>{
            'post' => Boolean.getExample(),
            'apply' => Boolean.getExample(),
            'r_delete' => Boolean.getExample(),
            'action' => 'null',
            'location' => 'null',
            'propertylist' => new List<String>{''},
            'cqDamScene7ApiclientRecordsperpageNofilterName' => Integer.getExample(),
            'cqDamScene7ApiclientRecordsperpageWithfilterName' => Integer.getExample()
        };

        OASClient client;
        OASConfigmgrApi api;
        OASComDayCqDamScene7ImplScene7APICli response;
        OASComDayCqDamScene7ImplScene7APICli expectedResponse;
        String js = '';

        client = new OASClient();
        api = new OASConfigmgrApi(client);

        js = JSON.serialize(OASComDayCqDamScene7ImplScene7APICli.getExample());
        res.setHeader('Content-Type', 'application/json');
        res.setBody(js);
        expectedResponse = OASComDayCqDamScene7ImplScene7APICli.getExample();
        response = (OASComDayCqDamScene7ImplScene7APICli) api.comDayCqDamScene7ImplScene7APIClientImpl(params);
        System.assertEquals(expectedResponse, response);
    }

    /**
     * 
     *
     * 
     */
    @isTest
    private static void comDayCqDamScene7ImplScene7AssetMimeTypeServiceImplTest() {
        HttpResponse res = new HttpResponse();
        res.setStatusCode(200);
        res.setStatus('OK');
        Test.setMock(HttpCalloutMock.class, new OASResponseMock(res));

        Map<String, Object> params = new Map<String, Object>{
            'post' => Boolean.getExample(),
            'apply' => Boolean.getExample(),
            'r_delete' => Boolean.getExample(),
            'action' => 'null',
            'location' => 'null',
            'propertylist' => new List<String>{''},
            'cqDamScene7AssetmimetypeserviceMapping' => new List<String>{''}
        };

        OASClient client;
        OASConfigmgrApi api;
        OASComDayCqDamScene7ImplScene7AssetM response;
        OASComDayCqDamScene7ImplScene7AssetM expectedResponse;
        String js = '';

        client = new OASClient();
        api = new OASConfigmgrApi(client);

        js = JSON.serialize(OASComDayCqDamScene7ImplScene7AssetM.getExample());
        res.setHeader('Content-Type', 'application/json');
        res.setBody(js);
        expectedResponse = OASComDayCqDamScene7ImplScene7AssetM.getExample();
        response = (OASComDayCqDamScene7ImplScene7AssetM) api.comDayCqDamScene7ImplScene7AssetMimeTypeServiceImpl(params);
        System.assertEquals(expectedResponse, response);
    }

    /**
     * 
     *
     * 
     */
    @isTest
    private static void comDayCqDamScene7ImplScene7ConfigurationEventListenerTest() {
        HttpResponse res = new HttpResponse();
        res.setStatusCode(200);
        res.setStatus('OK');
        Test.setMock(HttpCalloutMock.class, new OASResponseMock(res));

        Map<String, Object> params = new Map<String, Object>{
            'post' => Boolean.getExample(),
            'apply' => Boolean.getExample(),
            'r_delete' => Boolean.getExample(),
            'action' => 'null',
            'location' => 'null',
            'propertylist' => new List<String>{''},
            'cqDamScene7ConfigurationeventlistenerEnabled' => Boolean.getExample()
        };

        OASClient client;
        OASConfigmgrApi api;
        OASComDayCqDamScene7ImplScene7Config response;
        OASComDayCqDamScene7ImplScene7Config expectedResponse;
        String js = '';

        client = new OASClient();
        api = new OASConfigmgrApi(client);

        js = JSON.serialize(OASComDayCqDamScene7ImplScene7Config.getExample());
        res.setHeader('Content-Type', 'application/json');
        res.setBody(js);
        expectedResponse = OASComDayCqDamScene7ImplScene7Config.getExample();
        response = (OASComDayCqDamScene7ImplScene7Config) api.comDayCqDamScene7ImplScene7ConfigurationEventListener(params);
        System.assertEquals(expectedResponse, response);
    }

    /**
     * 
     *
     * 
     */
    @isTest
    private static void comDayCqDamScene7ImplScene7DamChangeEventListenerTest() {
        HttpResponse res = new HttpResponse();
        res.setStatusCode(200);
        res.setStatus('OK');
        Test.setMock(HttpCalloutMock.class, new OASResponseMock(res));

        Map<String, Object> params = new Map<String, Object>{
            'post' => Boolean.getExample(),
            'apply' => Boolean.getExample(),
            'r_delete' => Boolean.getExample(),
            'action' => 'null',
            'location' => 'null',
            'propertylist' => new List<String>{''},
            'cqDamScene7DamchangeeventlistenerEnabled' => Boolean.getExample(),
            'cqDamScene7DamchangeeventlistenerObservedPaths' => new List<String>{''}
        };

        OASClient client;
        OASConfigmgrApi api;
        OASComDayCqDamScene7ImplScene7DamCha response;
        OASComDayCqDamScene7ImplScene7DamCha expectedResponse;
        String js = '';

        client = new OASClient();
        api = new OASConfigmgrApi(client);

        js = JSON.serialize(OASComDayCqDamScene7ImplScene7DamCha.getExample());
        res.setHeader('Content-Type', 'application/json');
        res.setBody(js);
        expectedResponse = OASComDayCqDamScene7ImplScene7DamCha.getExample();
        response = (OASComDayCqDamScene7ImplScene7DamCha) api.comDayCqDamScene7ImplScene7DamChangeEventListener(params);
        System.assertEquals(expectedResponse, response);
    }

    /**
     * 
     *
     * 
     */
    @isTest
    private static void comDayCqDamScene7ImplScene7FlashTemplatesServiceImplTest() {
        HttpResponse res = new HttpResponse();
        res.setStatusCode(200);
        res.setStatus('OK');
        Test.setMock(HttpCalloutMock.class, new OASResponseMock(res));

        Map<String, Object> params = new Map<String, Object>{
            'post' => Boolean.getExample(),
            'apply' => Boolean.getExample(),
            'r_delete' => Boolean.getExample(),
            'action' => 'null',
            'location' => 'null',
            'propertylist' => new List<String>{''},
            'scene7FlashTemplatesRti' => 'null',
            'scene7FlashTemplatesRsi' => 'null',
            'scene7FlashTemplatesRb' => 'null',
            'scene7FlashTemplatesRurl' => 'null',
            'scene7FlashTemplateUrlFormatParameter' => 'null'
        };

        OASClient client;
        OASConfigmgrApi api;
        OASComDayCqDamScene7ImplScene7FlashT response;
        OASComDayCqDamScene7ImplScene7FlashT expectedResponse;
        String js = '';

        client = new OASClient();
        api = new OASConfigmgrApi(client);

        js = JSON.serialize(OASComDayCqDamScene7ImplScene7FlashT.getExample());
        res.setHeader('Content-Type', 'application/json');
        res.setBody(js);
        expectedResponse = OASComDayCqDamScene7ImplScene7FlashT.getExample();
        response = (OASComDayCqDamScene7ImplScene7FlashT) api.comDayCqDamScene7ImplScene7FlashTemplatesServiceImpl(params);
        System.assertEquals(expectedResponse, response);
    }

    /**
     * 
     *
     * 
     */
    @isTest
    private static void comDayCqDamScene7ImplScene7UploadServiceImplTest() {
        HttpResponse res = new HttpResponse();
        res.setStatusCode(200);
        res.setStatus('OK');
        Test.setMock(HttpCalloutMock.class, new OASResponseMock(res));

        Map<String, Object> params = new Map<String, Object>{
            'post' => Boolean.getExample(),
            'apply' => Boolean.getExample(),
            'r_delete' => Boolean.getExample(),
            'action' => 'null',
            'location' => 'null',
            'propertylist' => new List<String>{''},
            'cqDamScene7UploadserviceActivejobtimeoutLabel' => Integer.getExample(),
            'cqDamScene7UploadserviceConnectionmaxperrouteLabel' => Integer.getExample()
        };

        OASClient client;
        OASConfigmgrApi api;
        OASComDayCqDamScene7ImplScene7Upload response;
        OASComDayCqDamScene7ImplScene7Upload expectedResponse;
        String js = '';

        client = new OASClient();
        api = new OASConfigmgrApi(client);

        js = JSON.serialize(OASComDayCqDamScene7ImplScene7Upload.getExample());
        res.setHeader('Content-Type', 'application/json');
        res.setBody(js);
        expectedResponse = OASComDayCqDamScene7ImplScene7Upload.getExample();
        response = (OASComDayCqDamScene7ImplScene7Upload) api.comDayCqDamScene7ImplScene7UploadServiceImpl(params);
        System.assertEquals(expectedResponse, response);
    }

    /**
     * 
     *
     * 
     */
    @isTest
    private static void comDayCqDamStockIntegrationImplCacheStockCacheConfigurationSerTest() {
        HttpResponse res = new HttpResponse();
        res.setStatusCode(200);
        res.setStatus('OK');
        Test.setMock(HttpCalloutMock.class, new OASResponseMock(res));

        Map<String, Object> params = new Map<String, Object>{
            'post' => Boolean.getExample(),
            'apply' => Boolean.getExample(),
            'r_delete' => Boolean.getExample(),
            'action' => 'null',
            'location' => 'null',
            'propertylist' => new List<String>{''},
            'getCacheExpirationUnit' => 'null',
            'getCacheExpirationValue' => Integer.getExample()
        };

        OASClient client;
        OASConfigmgrApi api;
        OASComDayCqDamStockIntegrationImplCa response;
        OASComDayCqDamStockIntegrationImplCa expectedResponse;
        String js = '';

        client = new OASClient();
        api = new OASConfigmgrApi(client);

        js = JSON.serialize(OASComDayCqDamStockIntegrationImplCa.getExample());
        res.setHeader('Content-Type', 'application/json');
        res.setBody(js);
        expectedResponse = OASComDayCqDamStockIntegrationImplCa.getExample();
        response = (OASComDayCqDamStockIntegrationImplCa) api.comDayCqDamStockIntegrationImplCacheStockCacheConfigurationSer(params);
        System.assertEquals(expectedResponse, response);
    }

    /**
     * 
     *
     * 
     */
    @isTest
    private static void comDayCqDamStockIntegrationImplConfigurationStockConfigurationTest() {
        HttpResponse res = new HttpResponse();
        res.setStatusCode(200);
        res.setStatus('OK');
        Test.setMock(HttpCalloutMock.class, new OASResponseMock(res));

        Map<String, Object> params = new Map<String, Object>{
            'post' => Boolean.getExample(),
            'apply' => Boolean.getExample(),
            'r_delete' => Boolean.getExample(),
            'action' => 'null',
            'location' => 'null',
            'propertylist' => new List<String>{''},
            'name' => 'null',
            'locale' => 'null',
            'imsConfig' => 'null'
        };

        OASClient client;
        OASConfigmgrApi api;
        OASComDayCqDamStockIntegrationImplCo response;
        OASComDayCqDamStockIntegrationImplCo expectedResponse;
        String js = '';

        client = new OASClient();
        api = new OASConfigmgrApi(client);

        js = JSON.serialize(OASComDayCqDamStockIntegrationImplCo.getExample());
        res.setHeader('Content-Type', 'application/json');
        res.setBody(js);
        expectedResponse = OASComDayCqDamStockIntegrationImplCo.getExample();
        response = (OASComDayCqDamStockIntegrationImplCo) api.comDayCqDamStockIntegrationImplConfigurationStockConfiguration(params);
        System.assertEquals(expectedResponse, response);
    }

    /**
     * 
     *
     * 
     */
    @isTest
    private static void comDayCqDamVideoImplServletVideoTestServletTest() {
        HttpResponse res = new HttpResponse();
        res.setStatusCode(200);
        res.setStatus('OK');
        Test.setMock(HttpCalloutMock.class, new OASResponseMock(res));

        Map<String, Object> params = new Map<String, Object>{
            'post' => Boolean.getExample(),
            'apply' => Boolean.getExample(),
            'r_delete' => Boolean.getExample(),
            'action' => 'null',
            'location' => 'null',
            'propertylist' => new List<String>{''},
            'enabled' => Boolean.getExample()
        };

        OASClient client;
        OASConfigmgrApi api;
        OASComDayCqDamVideoImplServletVideoT response;
        OASComDayCqDamVideoImplServletVideoT expectedResponse;
        String js = '';

        client = new OASClient();
        api = new OASConfigmgrApi(client);

        js = JSON.serialize(OASComDayCqDamVideoImplServletVideoT.getExample());
        res.setHeader('Content-Type', 'application/json');
        res.setBody(js);
        expectedResponse = OASComDayCqDamVideoImplServletVideoT.getExample();
        response = (OASComDayCqDamVideoImplServletVideoT) api.comDayCqDamVideoImplServletVideoTestServlet(params);
        System.assertEquals(expectedResponse, response);
    }

    /**
     * 
     *
     * 
     */
    @isTest
    private static void comDayCqExtwidgetServletsImageSpriteServletTest() {
        HttpResponse res = new HttpResponse();
        res.setStatusCode(200);
        res.setStatus('OK');
        Test.setMock(HttpCalloutMock.class, new OASResponseMock(res));

        Map<String, Object> params = new Map<String, Object>{
            'post' => Boolean.getExample(),
            'apply' => Boolean.getExample(),
            'r_delete' => Boolean.getExample(),
            'action' => 'null',
            'location' => 'null',
            'propertylist' => new List<String>{''},
            'maxWidth' => Integer.getExample(),
            'maxHeight' => Integer.getExample()
        };

        OASClient client;
        OASConfigmgrApi api;
        OASComDayCqExtwidgetServletsImageSpr response;
        OASComDayCqExtwidgetServletsImageSpr expectedResponse;
        String js = '';

        client = new OASClient();
        api = new OASConfigmgrApi(client);

        js = JSON.serialize(OASComDayCqExtwidgetServletsImageSpr.getExample());
        res.setHeader('Content-Type', 'application/json');
        res.setBody(js);
        expectedResponse = OASComDayCqExtwidgetServletsImageSpr.getExample();
        response = (OASComDayCqExtwidgetServletsImageSpr) api.comDayCqExtwidgetServletsImageSpriteServlet(params);
        System.assertEquals(expectedResponse, response);
    }

    /**
     * 
     *
     * 
     */
    @isTest
    private static void comDayCqImageInternalFontFontHelperTest() {
        HttpResponse res = new HttpResponse();
        res.setStatusCode(200);
        res.setStatus('OK');
        Test.setMock(HttpCalloutMock.class, new OASResponseMock(res));

        Map<String, Object> params = new Map<String, Object>{
            'post' => Boolean.getExample(),
            'apply' => Boolean.getExample(),
            'r_delete' => Boolean.getExample(),
            'action' => 'null',
            'location' => 'null',
            'propertylist' => new List<String>{''},
            'fontpath' => new List<String>{''},
            'oversamplingFactor' => Integer.getExample()
        };

        OASClient client;
        OASConfigmgrApi api;
        OASComDayCqImageInternalFontFontHelp response;
        OASComDayCqImageInternalFontFontHelp expectedResponse;
        String js = '';

        client = new OASClient();
        api = new OASConfigmgrApi(client);

        js = JSON.serialize(OASComDayCqImageInternalFontFontHelp.getExample());
        res.setHeader('Content-Type', 'application/json');
        res.setBody(js);
        expectedResponse = OASComDayCqImageInternalFontFontHelp.getExample();
        response = (OASComDayCqImageInternalFontFontHelp) api.comDayCqImageInternalFontFontHelper(params);
        System.assertEquals(expectedResponse, response);
    }

    /**
     * 
     *
     * 
     */
    @isTest
    private static void comDayCqJcrclustersupportClusterStartLevelControllerTest() {
        HttpResponse res = new HttpResponse();
        res.setStatusCode(200);
        res.setStatus('OK');
        Test.setMock(HttpCalloutMock.class, new OASResponseMock(res));

        Map<String, Object> params = new Map<String, Object>{
            'post' => Boolean.getExample(),
            'apply' => Boolean.getExample(),
            'r_delete' => Boolean.getExample(),
            'action' => 'null',
            'location' => 'null',
            'propertylist' => new List<String>{''},
            'clusterLevelEnable' => Boolean.getExample(),
            'clusterMasterLevel' => Integer.getExample(),
            'clusterSlaveLevel' => Integer.getExample()
        };

        OASClient client;
        OASConfigmgrApi api;
        OASComDayCqJcrclustersupportClusterS response;
        OASComDayCqJcrclustersupportClusterS expectedResponse;
        String js = '';

        client = new OASClient();
        api = new OASConfigmgrApi(client);

        js = JSON.serialize(OASComDayCqJcrclustersupportClusterS.getExample());
        res.setHeader('Content-Type', 'application/json');
        res.setBody(js);
        expectedResponse = OASComDayCqJcrclustersupportClusterS.getExample();
        response = (OASComDayCqJcrclustersupportClusterS) api.comDayCqJcrclustersupportClusterStartLevelController(params);
        System.assertEquals(expectedResponse, response);
    }

    /**
     * 
     *
     * 
     */
    @isTest
    private static void comDayCqMailerDefaultMailServiceTest() {
        HttpResponse res = new HttpResponse();
        res.setStatusCode(200);
        res.setStatus('OK');
        Test.setMock(HttpCalloutMock.class, new OASResponseMock(res));

        Map<String, Object> params = new Map<String, Object>{
            'post' => Boolean.getExample(),
            'apply' => Boolean.getExample(),
            'r_delete' => Boolean.getExample(),
            'action' => 'null',
            'location' => 'null',
            'propertylist' => new List<String>{''},
            'smtpHost' => 'null',
            'smtpPort' => Integer.getExample(),
            'smtpUser' => 'null',
            'smtpPassword' => 'null',
            'fromAddress' => 'null',
            'smtpSsl' => Boolean.getExample(),
            'smtpStarttls' => Boolean.getExample(),
            'debugEmail' => Boolean.getExample()
        };

        OASClient client;
        OASConfigmgrApi api;
        OASComDayCqMailerDefaultMailServiceI response;
        OASComDayCqMailerDefaultMailServiceI expectedResponse;
        String js = '';

        client = new OASClient();
        api = new OASConfigmgrApi(client);

        js = JSON.serialize(OASComDayCqMailerDefaultMailServiceI.getExample());
        res.setHeader('Content-Type', 'application/json');
        res.setBody(js);
        expectedResponse = OASComDayCqMailerDefaultMailServiceI.getExample();
        response = (OASComDayCqMailerDefaultMailServiceI) api.comDayCqMailerDefaultMailService(params);
        System.assertEquals(expectedResponse, response);
    }

    /**
     * 
     *
     * 
     */
    @isTest
    private static void comDayCqMailerImplCqMailingServiceTest() {
        HttpResponse res = new HttpResponse();
        res.setStatusCode(200);
        res.setStatus('OK');
        Test.setMock(HttpCalloutMock.class, new OASResponseMock(res));

        Map<String, Object> params = new Map<String, Object>{
            'post' => Boolean.getExample(),
            'apply' => Boolean.getExample(),
            'r_delete' => Boolean.getExample(),
            'action' => 'null',
            'location' => 'null',
            'propertylist' => new List<String>{''},
            'maxRecipientCount' => 'null'
        };

        OASClient client;
        OASConfigmgrApi api;
        OASComDayCqMailerImplCqMailingServic response;
        OASComDayCqMailerImplCqMailingServic expectedResponse;
        String js = '';

        client = new OASClient();
        api = new OASConfigmgrApi(client);

        js = JSON.serialize(OASComDayCqMailerImplCqMailingServic.getExample());
        res.setHeader('Content-Type', 'application/json');
        res.setBody(js);
        expectedResponse = OASComDayCqMailerImplCqMailingServic.getExample();
        response = (OASComDayCqMailerImplCqMailingServic) api.comDayCqMailerImplCqMailingService(params);
        System.assertEquals(expectedResponse, response);
    }

    /**
     * 
     *
     * 
     */
    @isTest
    private static void comDayCqMailerImplEmailCqEmailTemplateFactoryTest() {
        HttpResponse res = new HttpResponse();
        res.setStatusCode(200);
        res.setStatus('OK');
        Test.setMock(HttpCalloutMock.class, new OASResponseMock(res));

        Map<String, Object> params = new Map<String, Object>{
            'post' => Boolean.getExample(),
            'apply' => Boolean.getExample(),
            'r_delete' => Boolean.getExample(),
            'action' => 'null',
            'location' => 'null',
            'propertylist' => new List<String>{''},
            'mailerEmailCharset' => 'null'
        };

        OASClient client;
        OASConfigmgrApi api;
        OASComDayCqMailerImplEmailCqEmailTem response;
        OASComDayCqMailerImplEmailCqEmailTem expectedResponse;
        String js = '';

        client = new OASClient();
        api = new OASConfigmgrApi(client);

        js = JSON.serialize(OASComDayCqMailerImplEmailCqEmailTem.getExample());
        res.setHeader('Content-Type', 'application/json');
        res.setBody(js);
        expectedResponse = OASComDayCqMailerImplEmailCqEmailTem.getExample();
        response = (OASComDayCqMailerImplEmailCqEmailTem) api.comDayCqMailerImplEmailCqEmailTemplateFactory(params);
        System.assertEquals(expectedResponse, response);
    }

    /**
     * 
     *
     * 
     */
    @isTest
    private static void comDayCqMailerImplEmailCqRetrieverTemplateFactoryTest() {
        HttpResponse res = new HttpResponse();
        res.setStatusCode(200);
        res.setStatus('OK');
        Test.setMock(HttpCalloutMock.class, new OASResponseMock(res));

        Map<String, Object> params = new Map<String, Object>{
            'post' => Boolean.getExample(),
            'apply' => Boolean.getExample(),
            'r_delete' => Boolean.getExample(),
            'action' => 'null',
            'location' => 'null',
            'propertylist' => new List<String>{''},
            'mailerEmailEmbed' => Boolean.getExample(),
            'mailerEmailCharset' => 'null',
            'mailerEmailRetrieverUserID' => 'null',
            'mailerEmailRetrieverUserPWD' => 'null'
        };

        OASClient client;
        OASConfigmgrApi api;
        OASComDayCqMailerImplEmailCqRetrieve response;
        OASComDayCqMailerImplEmailCqRetrieve expectedResponse;
        String js = '';

        client = new OASClient();
        api = new OASConfigmgrApi(client);

        js = JSON.serialize(OASComDayCqMailerImplEmailCqRetrieve.getExample());
        res.setHeader('Content-Type', 'application/json');
        res.setBody(js);
        expectedResponse = OASComDayCqMailerImplEmailCqRetrieve.getExample();
        response = (OASComDayCqMailerImplEmailCqRetrieve) api.comDayCqMailerImplEmailCqRetrieverTemplateFactory(params);
        System.assertEquals(expectedResponse, response);
    }

    /**
     * 
     *
     * 
     */
    @isTest
    private static void comDayCqMcmCampaignImplIntegrationConfigImplTest() {
        HttpResponse res = new HttpResponse();
        res.setStatusCode(200);
        res.setStatus('OK');
        Test.setMock(HttpCalloutMock.class, new OASResponseMock(res));

        Map<String, Object> params = new Map<String, Object>{
            'post' => Boolean.getExample(),
            'apply' => Boolean.getExample(),
            'r_delete' => Boolean.getExample(),
            'action' => 'null',
            'location' => 'null',
            'propertylist' => new List<String>{''},
            'aemMcmCampaignFormConstraints' => new List<String>{''},
            'aemMcmCampaignPublicUrl' => 'null',
            'aemMcmCampaignRelaxedSSL' => Boolean.getExample()
        };

        OASClient client;
        OASConfigmgrApi api;
        OASComDayCqMcmCampaignImplIntegratio response;
        OASComDayCqMcmCampaignImplIntegratio expectedResponse;
        String js = '';

        client = new OASClient();
        api = new OASConfigmgrApi(client);

        js = JSON.serialize(OASComDayCqMcmCampaignImplIntegratio.getExample());
        res.setHeader('Content-Type', 'application/json');
        res.setBody(js);
        expectedResponse = OASComDayCqMcmCampaignImplIntegratio.getExample();
        response = (OASComDayCqMcmCampaignImplIntegratio) api.comDayCqMcmCampaignImplIntegrationConfigImpl(params);
        System.assertEquals(expectedResponse, response);
    }

    /**
     * 
     *
     * 
     */
    @isTest
    private static void comDayCqMcmCampaignImporterPersonalizedTextHandlerFactoryTest() {
        HttpResponse res = new HttpResponse();
        res.setStatusCode(200);
        res.setStatus('OK');
        Test.setMock(HttpCalloutMock.class, new OASResponseMock(res));

        Map<String, Object> params = new Map<String, Object>{
            'post' => Boolean.getExample(),
            'apply' => Boolean.getExample(),
            'r_delete' => Boolean.getExample(),
            'action' => 'null',
            'location' => 'null',
            'propertylist' => new List<String>{''},
            'serviceRanking' => Integer.getExample(),
            'tagpattern' => 'null'
        };

        OASClient client;
        OASConfigmgrApi api;
        OASComDayCqMcmCampaignImporterPerson response;
        OASComDayCqMcmCampaignImporterPerson expectedResponse;
        String js = '';

        client = new OASClient();
        api = new OASConfigmgrApi(client);

        js = JSON.serialize(OASComDayCqMcmCampaignImporterPerson.getExample());
        res.setHeader('Content-Type', 'application/json');
        res.setBody(js);
        expectedResponse = OASComDayCqMcmCampaignImporterPerson.getExample();
        response = (OASComDayCqMcmCampaignImporterPerson) api.comDayCqMcmCampaignImporterPersonalizedTextHandlerFactory(params);
        System.assertEquals(expectedResponse, response);
    }

    /**
     * 
     *
     * 
     */
    @isTest
    private static void comDayCqMcmCoreNewsletterNewsletterEmailServiceImplTest() {
        HttpResponse res = new HttpResponse();
        res.setStatusCode(200);
        res.setStatus('OK');
        Test.setMock(HttpCalloutMock.class, new OASResponseMock(res));

        Map<String, Object> params = new Map<String, Object>{
            'post' => Boolean.getExample(),
            'apply' => Boolean.getExample(),
            'r_delete' => Boolean.getExample(),
            'action' => 'null',
            'location' => 'null',
            'propertylist' => new List<String>{''},
            'fromAddress' => 'null',
            'senderHost' => 'null',
            'maxBounceCount' => 'null'
        };

        OASClient client;
        OASConfigmgrApi api;
        OASComDayCqMcmCoreNewsletterNewslett response;
        OASComDayCqMcmCoreNewsletterNewslett expectedResponse;
        String js = '';

        client = new OASClient();
        api = new OASConfigmgrApi(client);

        js = JSON.serialize(OASComDayCqMcmCoreNewsletterNewslett.getExample());
        res.setHeader('Content-Type', 'application/json');
        res.setBody(js);
        expectedResponse = OASComDayCqMcmCoreNewsletterNewslett.getExample();
        response = (OASComDayCqMcmCoreNewsletterNewslett) api.comDayCqMcmCoreNewsletterNewsletterEmailServiceImpl(params);
        System.assertEquals(expectedResponse, response);
    }

    /**
     * 
     *
     * 
     */
    @isTest
    private static void comDayCqMcmImplMCMConfigurationTest() {
        HttpResponse res = new HttpResponse();
        res.setStatusCode(200);
        res.setStatus('OK');
        Test.setMock(HttpCalloutMock.class, new OASResponseMock(res));

        Map<String, Object> params = new Map<String, Object>{
            'post' => Boolean.getExample(),
            'apply' => Boolean.getExample(),
            'r_delete' => Boolean.getExample(),
            'action' => 'null',
            'location' => 'null',
            'propertylist' => new List<String>{''},
            'experienceIndirection' => new List<String>{''},
            'touchpointIndirection' => new List<String>{''}
        };

        OASClient client;
        OASConfigmgrApi api;
        OASComDayCqMcmImplMCMConfigurationIn response;
        OASComDayCqMcmImplMCMConfigurationIn expectedResponse;
        String js = '';

        client = new OASClient();
        api = new OASConfigmgrApi(client);

        js = JSON.serialize(OASComDayCqMcmImplMCMConfigurationIn.getExample());
        res.setHeader('Content-Type', 'application/json');
        res.setBody(js);
        expectedResponse = OASComDayCqMcmImplMCMConfigurationIn.getExample();
        response = (OASComDayCqMcmImplMCMConfigurationIn) api.comDayCqMcmImplMCMConfiguration(params);
        System.assertEquals(expectedResponse, response);
    }

    /**
     * 
     *
     * 
     */
    @isTest
    private static void comDayCqMcmLandingpageParserTaghandlersCtaClickThroughComponenTest() {
        HttpResponse res = new HttpResponse();
        res.setStatusCode(200);
        res.setStatus('OK');
        Test.setMock(HttpCalloutMock.class, new OASResponseMock(res));

        Map<String, Object> params = new Map<String, Object>{
            'post' => Boolean.getExample(),
            'apply' => Boolean.getExample(),
            'r_delete' => Boolean.getExample(),
            'action' => 'null',
            'location' => 'null',
            'propertylist' => new List<String>{''},
            'serviceRanking' => Integer.getExample(),
            'tagpattern' => 'null',
            'componentResourceType' => 'null'
        };

        OASClient client;
        OASConfigmgrApi api;
        OASComDayCqMcmLandingpageParserTagha response;
        OASComDayCqMcmLandingpageParserTagha expectedResponse;
        String js = '';

        client = new OASClient();
        api = new OASConfigmgrApi(client);

        js = JSON.serialize(OASComDayCqMcmLandingpageParserTagha.getExample());
        res.setHeader('Content-Type', 'application/json');
        res.setBody(js);
        expectedResponse = OASComDayCqMcmLandingpageParserTagha.getExample();
        response = (OASComDayCqMcmLandingpageParserTagha) api.comDayCqMcmLandingpageParserTaghandlersCtaClickThroughComponen(params);
        System.assertEquals(expectedResponse, response);
    }

    /**
     * 
     *
     * 
     */
    @isTest
    private static void comDayCqMcmLandingpageParserTaghandlersCtaGraphicalClickThrougTest() {
        HttpResponse res = new HttpResponse();
        res.setStatusCode(200);
        res.setStatus('OK');
        Test.setMock(HttpCalloutMock.class, new OASResponseMock(res));

        Map<String, Object> params = new Map<String, Object>{
            'post' => Boolean.getExample(),
            'apply' => Boolean.getExample(),
            'r_delete' => Boolean.getExample(),
            'action' => 'null',
            'location' => 'null',
            'propertylist' => new List<String>{''},
            'serviceRanking' => Integer.getExample(),
            'tagpattern' => 'null',
            'componentResourceType' => 'null'
        };

        OASClient client;
        OASConfigmgrApi api;
        OASComDayCqMcmLandingpageParserTagha response;
        OASComDayCqMcmLandingpageParserTagha expectedResponse;
        String js = '';

        client = new OASClient();
        api = new OASConfigmgrApi(client);

        js = JSON.serialize(OASComDayCqMcmLandingpageParserTagha.getExample());
        res.setHeader('Content-Type', 'application/json');
        res.setBody(js);
        expectedResponse = OASComDayCqMcmLandingpageParserTagha.getExample();
        response = (OASComDayCqMcmLandingpageParserTagha) api.comDayCqMcmLandingpageParserTaghandlersCtaGraphicalClickThroug(params);
        System.assertEquals(expectedResponse, response);
    }

    /**
     * 
     *
     * 
     */
    @isTest
    private static void comDayCqMcmLandingpageParserTaghandlersCtaLeadFormCTAComponentTest() {
        HttpResponse res = new HttpResponse();
        res.setStatusCode(200);
        res.setStatus('OK');
        Test.setMock(HttpCalloutMock.class, new OASResponseMock(res));

        Map<String, Object> params = new Map<String, Object>{
            'post' => Boolean.getExample(),
            'apply' => Boolean.getExample(),
            'r_delete' => Boolean.getExample(),
            'action' => 'null',
            'location' => 'null',
            'propertylist' => new List<String>{''},
            'serviceRanking' => Integer.getExample(),
            'tagpattern' => 'null'
        };

        OASClient client;
        OASConfigmgrApi api;
        OASComDayCqMcmLandingpageParserTagha response;
        OASComDayCqMcmLandingpageParserTagha expectedResponse;
        String js = '';

        client = new OASClient();
        api = new OASConfigmgrApi(client);

        js = JSON.serialize(OASComDayCqMcmLandingpageParserTagha.getExample());
        res.setHeader('Content-Type', 'application/json');
        res.setBody(js);
        expectedResponse = OASComDayCqMcmLandingpageParserTagha.getExample();
        response = (OASComDayCqMcmLandingpageParserTagha) api.comDayCqMcmLandingpageParserTaghandlersCtaLeadFormCTAComponent(params);
        System.assertEquals(expectedResponse, response);
    }

    /**
     * 
     *
     * 
     */
    @isTest
    private static void comDayCqMcmLandingpageParserTaghandlersMboxMBoxExperienceTagHaTest() {
        HttpResponse res = new HttpResponse();
        res.setStatusCode(200);
        res.setStatus('OK');
        Test.setMock(HttpCalloutMock.class, new OASResponseMock(res));

        Map<String, Object> params = new Map<String, Object>{
            'post' => Boolean.getExample(),
            'apply' => Boolean.getExample(),
            'r_delete' => Boolean.getExample(),
            'action' => 'null',
            'location' => 'null',
            'propertylist' => new List<String>{''},
            'serviceRanking' => Integer.getExample(),
            'tagpattern' => 'null'
        };

        OASClient client;
        OASConfigmgrApi api;
        OASComDayCqMcmLandingpageParserTagha response;
        OASComDayCqMcmLandingpageParserTagha expectedResponse;
        String js = '';

        client = new OASClient();
        api = new OASConfigmgrApi(client);

        js = JSON.serialize(OASComDayCqMcmLandingpageParserTagha.getExample());
        res.setHeader('Content-Type', 'application/json');
        res.setBody(js);
        expectedResponse = OASComDayCqMcmLandingpageParserTagha.getExample();
        response = (OASComDayCqMcmLandingpageParserTagha) api.comDayCqMcmLandingpageParserTaghandlersMboxMBoxExperienceTagHa(params);
        System.assertEquals(expectedResponse, response);
    }

    /**
     * 
     *
     * 
     */
    @isTest
    private static void comDayCqMcmLandingpageParserTaghandlersMboxTargetComponentTagHTest() {
        HttpResponse res = new HttpResponse();
        res.setStatusCode(200);
        res.setStatus('OK');
        Test.setMock(HttpCalloutMock.class, new OASResponseMock(res));

        Map<String, Object> params = new Map<String, Object>{
            'post' => Boolean.getExample(),
            'apply' => Boolean.getExample(),
            'r_delete' => Boolean.getExample(),
            'action' => 'null',
            'location' => 'null',
            'propertylist' => new List<String>{''},
            'serviceRanking' => Integer.getExample(),
            'tagpattern' => 'null',
            'componentResourceType' => 'null'
        };

        OASClient client;
        OASConfigmgrApi api;
        OASComDayCqMcmLandingpageParserTagha response;
        OASComDayCqMcmLandingpageParserTagha expectedResponse;
        String js = '';

        client = new OASClient();
        api = new OASConfigmgrApi(client);

        js = JSON.serialize(OASComDayCqMcmLandingpageParserTagha.getExample());
        res.setHeader('Content-Type', 'application/json');
        res.setBody(js);
        expectedResponse = OASComDayCqMcmLandingpageParserTagha.getExample();
        response = (OASComDayCqMcmLandingpageParserTagha) api.comDayCqMcmLandingpageParserTaghandlersMboxTargetComponentTagH(params);
        System.assertEquals(expectedResponse, response);
    }

    /**
     * 
     *
     * 
     */
    @isTest
    private static void comDayCqNotificationImplNotificationServiceImplTest() {
        HttpResponse res = new HttpResponse();
        res.setStatusCode(200);
        res.setStatus('OK');
        Test.setMock(HttpCalloutMock.class, new OASResponseMock(res));

        Map<String, Object> params = new Map<String, Object>{
            'post' => Boolean.getExample(),
            'apply' => Boolean.getExample(),
            'r_delete' => Boolean.getExample(),
            'action' => 'null',
            'location' => 'null',
            'propertylist' => new List<String>{''},
            'eventFilter' => 'null'
        };

        OASClient client;
        OASConfigmgrApi api;
        OASComDayCqNotificationImplNotificat response;
        OASComDayCqNotificationImplNotificat expectedResponse;
        String js = '';

        client = new OASClient();
        api = new OASConfigmgrApi(client);

        js = JSON.serialize(OASComDayCqNotificationImplNotificat.getExample());
        res.setHeader('Content-Type', 'application/json');
        res.setBody(js);
        expectedResponse = OASComDayCqNotificationImplNotificat.getExample();
        response = (OASComDayCqNotificationImplNotificat) api.comDayCqNotificationImplNotificationServiceImpl(params);
        System.assertEquals(expectedResponse, response);
    }

    /**
     * 
     *
     * 
     */
    @isTest
    private static void comDayCqPersonalizationImplServletsTargetingConfigurationServletTest() {
        HttpResponse res = new HttpResponse();
        res.setStatusCode(200);
        res.setStatus('OK');
        Test.setMock(HttpCalloutMock.class, new OASResponseMock(res));

        Map<String, Object> params = new Map<String, Object>{
            'post' => Boolean.getExample(),
            'apply' => Boolean.getExample(),
            'r_delete' => Boolean.getExample(),
            'action' => 'null',
            'location' => 'null',
            'propertylist' => new List<String>{''},
            'forcelocation' => Boolean.getExample()
        };

        OASClient client;
        OASConfigmgrApi api;
        OASComDayCqPersonalizationImplServle response;
        OASComDayCqPersonalizationImplServle expectedResponse;
        String js = '';

        client = new OASClient();
        api = new OASConfigmgrApi(client);

        js = JSON.serialize(OASComDayCqPersonalizationImplServle.getExample());
        res.setHeader('Content-Type', 'application/json');
        res.setBody(js);
        expectedResponse = OASComDayCqPersonalizationImplServle.getExample();
        response = (OASComDayCqPersonalizationImplServle) api.comDayCqPersonalizationImplServletsTargetingConfigurationServlet(params);
        System.assertEquals(expectedResponse, response);
    }

    /**
     * 
     *
     * 
     */
    @isTest
    private static void comDayCqPollingImporterImplManagedPollConfigImplTest() {
        HttpResponse res = new HttpResponse();
        res.setStatusCode(200);
        res.setStatus('OK');
        Test.setMock(HttpCalloutMock.class, new OASResponseMock(res));

        Map<String, Object> params = new Map<String, Object>{
            'post' => Boolean.getExample(),
            'apply' => Boolean.getExample(),
            'r_delete' => Boolean.getExample(),
            'action' => 'null',
            'location' => 'null',
            'propertylist' => new List<String>{''},
            'id' => 'null',
            'enabled' => Boolean.getExample(),
            'reference' => Boolean.getExample(),
            'interval' => Integer.getExample(),
            'expression' => 'null',
            'source' => 'null',
            'target' => 'null',
            'login' => 'null',
            'password' => 'null'
        };

        OASClient client;
        OASConfigmgrApi api;
        OASComDayCqPollingImporterImplManage response;
        OASComDayCqPollingImporterImplManage expectedResponse;
        String js = '';

        client = new OASClient();
        api = new OASConfigmgrApi(client);

        js = JSON.serialize(OASComDayCqPollingImporterImplManage.getExample());
        res.setHeader('Content-Type', 'application/json');
        res.setBody(js);
        expectedResponse = OASComDayCqPollingImporterImplManage.getExample();
        response = (OASComDayCqPollingImporterImplManage) api.comDayCqPollingImporterImplManagedPollConfigImpl(params);
        System.assertEquals(expectedResponse, response);
    }

    /**
     * 
     *
     * 
     */
    @isTest
    private static void comDayCqPollingImporterImplManagedPollingImporterImplTest() {
        HttpResponse res = new HttpResponse();
        res.setStatusCode(200);
        res.setStatus('OK');
        Test.setMock(HttpCalloutMock.class, new OASResponseMock(res));

        Map<String, Object> params = new Map<String, Object>{
            'post' => Boolean.getExample(),
            'apply' => Boolean.getExample(),
            'r_delete' => Boolean.getExample(),
            'action' => 'null',
            'location' => 'null',
            'propertylist' => new List<String>{''},
            'importerUser' => 'null'
        };

        OASClient client;
        OASConfigmgrApi api;
        OASComDayCqPollingImporterImplManage response;
        OASComDayCqPollingImporterImplManage expectedResponse;
        String js = '';

        client = new OASClient();
        api = new OASConfigmgrApi(client);

        js = JSON.serialize(OASComDayCqPollingImporterImplManage.getExample());
        res.setHeader('Content-Type', 'application/json');
        res.setBody(js);
        expectedResponse = OASComDayCqPollingImporterImplManage.getExample();
        response = (OASComDayCqPollingImporterImplManage) api.comDayCqPollingImporterImplManagedPollingImporterImpl(params);
        System.assertEquals(expectedResponse, response);
    }

    /**
     * 
     *
     * 
     */
    @isTest
    private static void comDayCqPollingImporterImplPollingImporterImplTest() {
        HttpResponse res = new HttpResponse();
        res.setStatusCode(200);
        res.setStatus('OK');
        Test.setMock(HttpCalloutMock.class, new OASResponseMock(res));

        Map<String, Object> params = new Map<String, Object>{
            'post' => Boolean.getExample(),
            'apply' => Boolean.getExample(),
            'r_delete' => Boolean.getExample(),
            'action' => 'null',
            'location' => 'null',
            'propertylist' => new List<String>{''},
            'importerMinInterval' => Integer.getExample(),
            'importerUser' => 'null',
            'excludePaths' => new List<String>{''},
            'includePaths' => new List<String>{''}
        };

        OASClient client;
        OASConfigmgrApi api;
        OASComDayCqPollingImporterImplPollin response;
        OASComDayCqPollingImporterImplPollin expectedResponse;
        String js = '';

        client = new OASClient();
        api = new OASConfigmgrApi(client);

        js = JSON.serialize(OASComDayCqPollingImporterImplPollin.getExample());
        res.setHeader('Content-Type', 'application/json');
        res.setBody(js);
        expectedResponse = OASComDayCqPollingImporterImplPollin.getExample();
        response = (OASComDayCqPollingImporterImplPollin) api.comDayCqPollingImporterImplPollingImporterImpl(params);
        System.assertEquals(expectedResponse, response);
    }

    /**
     * 
     *
     * 
     */
    @isTest
    private static void comDayCqReplicationAuditReplicationEventListenerTest() {
        HttpResponse res = new HttpResponse();
        res.setStatusCode(200);
        res.setStatus('OK');
        Test.setMock(HttpCalloutMock.class, new OASResponseMock(res));

        Map<String, Object> params = new Map<String, Object>{
            'post' => Boolean.getExample(),
            'apply' => Boolean.getExample(),
            'r_delete' => Boolean.getExample(),
            'action' => 'null',
            'location' => 'null',
            'propertylist' => new List<String>{''},
            'serviceRanking' => Integer.getExample()
        };

        OASClient client;
        OASConfigmgrApi api;
        OASComDayCqReplicationAuditReplicati response;
        OASComDayCqReplicationAuditReplicati expectedResponse;
        String js = '';

        client = new OASClient();
        api = new OASConfigmgrApi(client);

        js = JSON.serialize(OASComDayCqReplicationAuditReplicati.getExample());
        res.setHeader('Content-Type', 'application/json');
        res.setBody(js);
        expectedResponse = OASComDayCqReplicationAuditReplicati.getExample();
        response = (OASComDayCqReplicationAuditReplicati) api.comDayCqReplicationAuditReplicationEventListener(params);
        System.assertEquals(expectedResponse, response);
    }

    /**
     * 
     *
     * 
     */
    @isTest
    private static void comDayCqReplicationContentStaticContentBuilderTest() {
        HttpResponse res = new HttpResponse();
        res.setStatusCode(200);
        res.setStatus('OK');
        Test.setMock(HttpCalloutMock.class, new OASResponseMock(res));

        Map<String, Object> params = new Map<String, Object>{
            'post' => Boolean.getExample(),
            'apply' => Boolean.getExample(),
            'r_delete' => Boolean.getExample(),
            'action' => 'null',
            'location' => 'null',
            'propertylist' => new List<String>{''},
            'host' => 'null',
            'port' => Integer.getExample()
        };

        OASClient client;
        OASConfigmgrApi api;
        OASComDayCqReplicationContentStaticC response;
        OASComDayCqReplicationContentStaticC expectedResponse;
        String js = '';

        client = new OASClient();
        api = new OASConfigmgrApi(client);

        js = JSON.serialize(OASComDayCqReplicationContentStaticC.getExample());
        res.setHeader('Content-Type', 'application/json');
        res.setBody(js);
        expectedResponse = OASComDayCqReplicationContentStaticC.getExample();
        response = (OASComDayCqReplicationContentStaticC) api.comDayCqReplicationContentStaticContentBuilder(params);
        System.assertEquals(expectedResponse, response);
    }

    /**
     * 
     *
     * 
     */
    @isTest
    private static void comDayCqReplicationImplAgentManagerImplTest() {
        HttpResponse res = new HttpResponse();
        res.setStatusCode(200);
        res.setStatus('OK');
        Test.setMock(HttpCalloutMock.class, new OASResponseMock(res));

        Map<String, Object> params = new Map<String, Object>{
            'post' => Boolean.getExample(),
            'apply' => Boolean.getExample(),
            'r_delete' => Boolean.getExample(),
            'action' => 'null',
            'location' => 'null',
            'propertylist' => new List<String>{''},
            'jobTopics' => 'null',
            'serviceUserTarget' => 'null',
            'agentProviderTarget' => 'null'
        };

        OASClient client;
        OASConfigmgrApi api;
        OASComDayCqReplicationImplAgentManag response;
        OASComDayCqReplicationImplAgentManag expectedResponse;
        String js = '';

        client = new OASClient();
        api = new OASConfigmgrApi(client);

        js = JSON.serialize(OASComDayCqReplicationImplAgentManag.getExample());
        res.setHeader('Content-Type', 'application/json');
        res.setBody(js);
        expectedResponse = OASComDayCqReplicationImplAgentManag.getExample();
        response = (OASComDayCqReplicationImplAgentManag) api.comDayCqReplicationImplAgentManagerImpl(params);
        System.assertEquals(expectedResponse, response);
    }

    /**
     * 
     *
     * 
     */
    @isTest
    private static void comDayCqReplicationImplContentDurboBinaryLessContentBuilderTest() {
        HttpResponse res = new HttpResponse();
        res.setStatusCode(200);
        res.setStatus('OK');
        Test.setMock(HttpCalloutMock.class, new OASResponseMock(res));

        Map<String, Object> params = new Map<String, Object>{
            'post' => Boolean.getExample(),
            'apply' => Boolean.getExample(),
            'r_delete' => Boolean.getExample(),
            'action' => 'null',
            'location' => 'null',
            'propertylist' => new List<String>{''},
            'binaryThreshold' => Integer.getExample()
        };

        OASClient client;
        OASConfigmgrApi api;
        OASComDayCqReplicationImplContentDur response;
        OASComDayCqReplicationImplContentDur expectedResponse;
        String js = '';

        client = new OASClient();
        api = new OASConfigmgrApi(client);

        js = JSON.serialize(OASComDayCqReplicationImplContentDur.getExample());
        res.setHeader('Content-Type', 'application/json');
        res.setBody(js);
        expectedResponse = OASComDayCqReplicationImplContentDur.getExample();
        response = (OASComDayCqReplicationImplContentDur) api.comDayCqReplicationImplContentDurboBinaryLessContentBuilder(params);
        System.assertEquals(expectedResponse, response);
    }

    /**
     * 
     *
     * 
     */
    @isTest
    private static void comDayCqReplicationImplContentDurboDurboImportConfigurationProvTest() {
        HttpResponse res = new HttpResponse();
        res.setStatusCode(200);
        res.setStatus('OK');
        Test.setMock(HttpCalloutMock.class, new OASResponseMock(res));

        Map<String, Object> params = new Map<String, Object>{
            'post' => Boolean.getExample(),
            'apply' => Boolean.getExample(),
            'r_delete' => Boolean.getExample(),
            'action' => 'null',
            'location' => 'null',
            'propertylist' => new List<String>{''},
            'preserveHierarchyNodes' => Boolean.getExample(),
            'ignoreVersioning' => Boolean.getExample(),
            'importAcl' => Boolean.getExample(),
            'saveThreshold' => Integer.getExample(),
            'preserveUserPaths' => Boolean.getExample(),
            'preserveUuid' => Boolean.getExample(),
            'preserveUuidNodetypes' => new List<String>{''},
            'preserveUuidSubtrees' => new List<String>{''},
            'autoCommit' => Boolean.getExample()
        };

        OASClient client;
        OASConfigmgrApi api;
        OASComDayCqReplicationImplContentDur response;
        OASComDayCqReplicationImplContentDur expectedResponse;
        String js = '';

        client = new OASClient();
        api = new OASConfigmgrApi(client);

        js = JSON.serialize(OASComDayCqReplicationImplContentDur.getExample());
        res.setHeader('Content-Type', 'application/json');
        res.setBody(js);
        expectedResponse = OASComDayCqReplicationImplContentDur.getExample();
        response = (OASComDayCqReplicationImplContentDur) api.comDayCqReplicationImplContentDurboDurboImportConfigurationProv(params);
        System.assertEquals(expectedResponse, response);
    }

    /**
     * 
     *
     * 
     */
    @isTest
    private static void comDayCqReplicationImplReplicationContentFactoryProviderImplTest() {
        HttpResponse res = new HttpResponse();
        res.setStatusCode(200);
        res.setStatus('OK');
        Test.setMock(HttpCalloutMock.class, new OASResponseMock(res));

        Map<String, Object> params = new Map<String, Object>{
            'post' => Boolean.getExample(),
            'apply' => Boolean.getExample(),
            'r_delete' => Boolean.getExample(),
            'action' => 'null',
            'location' => 'null',
            'propertylist' => new List<String>{''},
            'replicationContentUseFileStorage' => Boolean.getExample(),
            'replicationContentMaxCommitAttempts' => Integer.getExample()
        };

        OASClient client;
        OASConfigmgrApi api;
        OASComDayCqReplicationImplReplicatio response;
        OASComDayCqReplicationImplReplicatio expectedResponse;
        String js = '';

        client = new OASClient();
        api = new OASConfigmgrApi(client);

        js = JSON.serialize(OASComDayCqReplicationImplReplicatio.getExample());
        res.setHeader('Content-Type', 'application/json');
        res.setBody(js);
        expectedResponse = OASComDayCqReplicationImplReplicatio.getExample();
        response = (OASComDayCqReplicationImplReplicatio) api.comDayCqReplicationImplReplicationContentFactoryProviderImpl(params);
        System.assertEquals(expectedResponse, response);
    }

    /**
     * 
     *
     * 
     */
    @isTest
    private static void comDayCqReplicationImplReplicationReceiverImplTest() {
        HttpResponse res = new HttpResponse();
        res.setStatusCode(200);
        res.setStatus('OK');
        Test.setMock(HttpCalloutMock.class, new OASResponseMock(res));

        Map<String, Object> params = new Map<String, Object>{
            'post' => Boolean.getExample(),
            'apply' => Boolean.getExample(),
            'r_delete' => Boolean.getExample(),
            'action' => 'null',
            'location' => 'null',
            'propertylist' => new List<String>{''},
            'receiverTmpfileThreshold' => Integer.getExample(),
            'receiverPackagesUseInstall' => Boolean.getExample()
        };

        OASClient client;
        OASConfigmgrApi api;
        OASComDayCqReplicationImplReplicatio response;
        OASComDayCqReplicationImplReplicatio expectedResponse;
        String js = '';

        client = new OASClient();
        api = new OASConfigmgrApi(client);

        js = JSON.serialize(OASComDayCqReplicationImplReplicatio.getExample());
        res.setHeader('Content-Type', 'application/json');
        res.setBody(js);
        expectedResponse = OASComDayCqReplicationImplReplicatio.getExample();
        response = (OASComDayCqReplicationImplReplicatio) api.comDayCqReplicationImplReplicationReceiverImpl(params);
        System.assertEquals(expectedResponse, response);
    }

    /**
     * 
     *
     * 
     */
    @isTest
    private static void comDayCqReplicationImplReplicatorImplTest() {
        HttpResponse res = new HttpResponse();
        res.setStatusCode(200);
        res.setStatus('OK');
        Test.setMock(HttpCalloutMock.class, new OASResponseMock(res));

        Map<String, Object> params = new Map<String, Object>{
            'post' => Boolean.getExample(),
            'apply' => Boolean.getExample(),
            'r_delete' => Boolean.getExample(),
            'action' => 'null',
            'location' => 'null',
            'propertylist' => new List<String>{''},
            'distributeEvents' => Boolean.getExample()
        };

        OASClient client;
        OASConfigmgrApi api;
        OASComDayCqReplicationImplReplicator response;
        OASComDayCqReplicationImplReplicator expectedResponse;
        String js = '';

        client = new OASClient();
        api = new OASConfigmgrApi(client);

        js = JSON.serialize(OASComDayCqReplicationImplReplicator.getExample());
        res.setHeader('Content-Type', 'application/json');
        res.setBody(js);
        expectedResponse = OASComDayCqReplicationImplReplicator.getExample();
        response = (OASComDayCqReplicationImplReplicator) api.comDayCqReplicationImplReplicatorImpl(params);
        System.assertEquals(expectedResponse, response);
    }

    /**
     * 
     *
     * 
     */
    @isTest
    private static void comDayCqReplicationImplReverseReplicatorTest() {
        HttpResponse res = new HttpResponse();
        res.setStatusCode(200);
        res.setStatus('OK');
        Test.setMock(HttpCalloutMock.class, new OASResponseMock(res));

        Map<String, Object> params = new Map<String, Object>{
            'post' => Boolean.getExample(),
            'apply' => Boolean.getExample(),
            'r_delete' => Boolean.getExample(),
            'action' => 'null',
            'location' => 'null',
            'propertylist' => new List<String>{''},
            'schedulerPeriod' => Integer.getExample()
        };

        OASClient client;
        OASConfigmgrApi api;
        OASComDayCqReplicationImplReverseRep response;
        OASComDayCqReplicationImplReverseRep expectedResponse;
        String js = '';

        client = new OASClient();
        api = new OASConfigmgrApi(client);

        js = JSON.serialize(OASComDayCqReplicationImplReverseRep.getExample());
        res.setHeader('Content-Type', 'application/json');
        res.setBody(js);
        expectedResponse = OASComDayCqReplicationImplReverseRep.getExample();
        response = (OASComDayCqReplicationImplReverseRep) api.comDayCqReplicationImplReverseReplicator(params);
        System.assertEquals(expectedResponse, response);
    }

    /**
     * 
     *
     * 
     */
    @isTest
    private static void comDayCqReplicationImplTransportBinaryLessTransportHandlerTest() {
        HttpResponse res = new HttpResponse();
        res.setStatusCode(200);
        res.setStatus('OK');
        Test.setMock(HttpCalloutMock.class, new OASResponseMock(res));

        Map<String, Object> params = new Map<String, Object>{
            'post' => Boolean.getExample(),
            'apply' => Boolean.getExample(),
            'r_delete' => Boolean.getExample(),
            'action' => 'null',
            'location' => 'null',
            'propertylist' => new List<String>{''},
            'disabledCipherSuites' => new List<String>{''},
            'enabledCipherSuites' => new List<String>{''}
        };

        OASClient client;
        OASConfigmgrApi api;
        OASComDayCqReplicationImplTransportB response;
        OASComDayCqReplicationImplTransportB expectedResponse;
        String js = '';

        client = new OASClient();
        api = new OASConfigmgrApi(client);

        js = JSON.serialize(OASComDayCqReplicationImplTransportB.getExample());
        res.setHeader('Content-Type', 'application/json');
        res.setBody(js);
        expectedResponse = OASComDayCqReplicationImplTransportB.getExample();
        response = (OASComDayCqReplicationImplTransportB) api.comDayCqReplicationImplTransportBinaryLessTransportHandler(params);
        System.assertEquals(expectedResponse, response);
    }

    /**
     * 
     *
     * 
     */
    @isTest
    private static void comDayCqReplicationImplTransportHttpTest() {
        HttpResponse res = new HttpResponse();
        res.setStatusCode(200);
        res.setStatus('OK');
        Test.setMock(HttpCalloutMock.class, new OASResponseMock(res));

        Map<String, Object> params = new Map<String, Object>{
            'post' => Boolean.getExample(),
            'apply' => Boolean.getExample(),
            'r_delete' => Boolean.getExample(),
            'action' => 'null',
            'location' => 'null',
            'propertylist' => new List<String>{''},
            'disabledCipherSuites' => new List<String>{''},
            'enabledCipherSuites' => new List<String>{''}
        };

        OASClient client;
        OASConfigmgrApi api;
        OASComDayCqReplicationImplTransportH response;
        OASComDayCqReplicationImplTransportH expectedResponse;
        String js = '';

        client = new OASClient();
        api = new OASConfigmgrApi(client);

        js = JSON.serialize(OASComDayCqReplicationImplTransportH.getExample());
        res.setHeader('Content-Type', 'application/json');
        res.setBody(js);
        expectedResponse = OASComDayCqReplicationImplTransportH.getExample();
        response = (OASComDayCqReplicationImplTransportH) api.comDayCqReplicationImplTransportHttp(params);
        System.assertEquals(expectedResponse, response);
    }

    /**
     * 
     *
     * 
     */
    @isTest
    private static void comDayCqReportingImplCacheCacheImplTest() {
        HttpResponse res = new HttpResponse();
        res.setStatusCode(200);
        res.setStatus('OK');
        Test.setMock(HttpCalloutMock.class, new OASResponseMock(res));

        Map<String, Object> params = new Map<String, Object>{
            'post' => Boolean.getExample(),
            'apply' => Boolean.getExample(),
            'r_delete' => Boolean.getExample(),
            'action' => 'null',
            'location' => 'null',
            'propertylist' => new List<String>{''},
            'repcacheEnable' => Boolean.getExample(),
            'repcacheTtl' => Integer.getExample(),
            'repcacheMax' => Integer.getExample()
        };

        OASClient client;
        OASConfigmgrApi api;
        OASComDayCqReportingImplCacheCacheIm response;
        OASComDayCqReportingImplCacheCacheIm expectedResponse;
        String js = '';

        client = new OASClient();
        api = new OASConfigmgrApi(client);

        js = JSON.serialize(OASComDayCqReportingImplCacheCacheIm.getExample());
        res.setHeader('Content-Type', 'application/json');
        res.setBody(js);
        expectedResponse = OASComDayCqReportingImplCacheCacheIm.getExample();
        response = (OASComDayCqReportingImplCacheCacheIm) api.comDayCqReportingImplCacheCacheImpl(params);
        System.assertEquals(expectedResponse, response);
    }

    /**
     * 
     *
     * 
     */
    @isTest
    private static void comDayCqReportingImplConfigServiceImplTest() {
        HttpResponse res = new HttpResponse();
        res.setStatusCode(200);
        res.setStatus('OK');
        Test.setMock(HttpCalloutMock.class, new OASResponseMock(res));

        Map<String, Object> params = new Map<String, Object>{
            'post' => Boolean.getExample(),
            'apply' => Boolean.getExample(),
            'r_delete' => Boolean.getExample(),
            'action' => 'null',
            'location' => 'null',
            'propertylist' => new List<String>{''},
            'repconfTimezone' => 'null',
            'repconfLocale' => 'null',
            'repconfSnapshots' => 'null',
            'repconfRepdir' => 'null',
            'repconfHourofday' => Integer.getExample(),
            'repconfMinofhour' => Integer.getExample(),
            'repconfMaxrows' => Integer.getExample(),
            'repconfFakedata' => Boolean.getExample(),
            'repconfSnapshotuser' => 'null',
            'repconfEnforcesnapshotuser' => Boolean.getExample()
        };

        OASClient client;
        OASConfigmgrApi api;
        OASComDayCqReportingImplConfigServic response;
        OASComDayCqReportingImplConfigServic expectedResponse;
        String js = '';

        client = new OASClient();
        api = new OASConfigmgrApi(client);

        js = JSON.serialize(OASComDayCqReportingImplConfigServic.getExample());
        res.setHeader('Content-Type', 'application/json');
        res.setBody(js);
        expectedResponse = OASComDayCqReportingImplConfigServic.getExample();
        response = (OASComDayCqReportingImplConfigServic) api.comDayCqReportingImplConfigServiceImpl(params);
        System.assertEquals(expectedResponse, response);
    }

    /**
     * 
     *
     * 
     */
    @isTest
    private static void comDayCqReportingImplRLogAnalyzerTest() {
        HttpResponse res = new HttpResponse();
        res.setStatusCode(200);
        res.setStatus('OK');
        Test.setMock(HttpCalloutMock.class, new OASResponseMock(res));

        Map<String, Object> params = new Map<String, Object>{
            'post' => Boolean.getExample(),
            'apply' => Boolean.getExample(),
            'r_delete' => Boolean.getExample(),
            'action' => 'null',
            'location' => 'null',
            'propertylist' => new List<String>{''},
            'requestLogOutput' => 'null'
        };

        OASClient client;
        OASConfigmgrApi api;
        OASComDayCqReportingImplRLogAnalyzer response;
        OASComDayCqReportingImplRLogAnalyzer expectedResponse;
        String js = '';

        client = new OASClient();
        api = new OASConfigmgrApi(client);

        js = JSON.serialize(OASComDayCqReportingImplRLogAnalyzer.getExample());
        res.setHeader('Content-Type', 'application/json');
        res.setBody(js);
        expectedResponse = OASComDayCqReportingImplRLogAnalyzer.getExample();
        response = (OASComDayCqReportingImplRLogAnalyzer) api.comDayCqReportingImplRLogAnalyzer(params);
        System.assertEquals(expectedResponse, response);
    }

    /**
     * 
     *
     * 
     */
    @isTest
    private static void comDayCqRewriterLinkcheckerImplLinkCheckerImplTest() {
        HttpResponse res = new HttpResponse();
        res.setStatusCode(200);
        res.setStatus('OK');
        Test.setMock(HttpCalloutMock.class, new OASResponseMock(res));

        Map<String, Object> params = new Map<String, Object>{
            'post' => Boolean.getExample(),
            'apply' => Boolean.getExample(),
            'r_delete' => Boolean.getExample(),
            'action' => 'null',
            'location' => 'null',
            'propertylist' => new List<String>{''},
            'schedulerPeriod' => Integer.getExample(),
            'schedulerConcurrent' => Boolean.getExample(),
            'serviceBadLinkToleranceInterval' => Integer.getExample(),
            'serviceCheckOverridePatterns' => new List<String>{''},
            'serviceCacheBrokenInternalLinks' => Boolean.getExample(),
            'serviceSpecialLinkPrefix' => new List<String>{''},
            'serviceSpecialLinkPatterns' => new List<String>{''}
        };

        OASClient client;
        OASConfigmgrApi api;
        OASComDayCqRewriterLinkcheckerImplLi response;
        OASComDayCqRewriterLinkcheckerImplLi expectedResponse;
        String js = '';

        client = new OASClient();
        api = new OASConfigmgrApi(client);

        js = JSON.serialize(OASComDayCqRewriterLinkcheckerImplLi.getExample());
        res.setHeader('Content-Type', 'application/json');
        res.setBody(js);
        expectedResponse = OASComDayCqRewriterLinkcheckerImplLi.getExample();
        response = (OASComDayCqRewriterLinkcheckerImplLi) api.comDayCqRewriterLinkcheckerImplLinkCheckerImpl(params);
        System.assertEquals(expectedResponse, response);
    }

    /**
     * 
     *
     * 
     */
    @isTest
    private static void comDayCqRewriterLinkcheckerImplLinkCheckerTaskTest() {
        HttpResponse res = new HttpResponse();
        res.setStatusCode(200);
        res.setStatus('OK');
        Test.setMock(HttpCalloutMock.class, new OASResponseMock(res));

        Map<String, Object> params = new Map<String, Object>{
            'post' => Boolean.getExample(),
            'apply' => Boolean.getExample(),
            'r_delete' => Boolean.getExample(),
            'action' => 'null',
            'location' => 'null',
            'propertylist' => new List<String>{''},
            'schedulerPeriod' => Integer.getExample(),
            'schedulerConcurrent' => Boolean.getExample(),
            'goodLinkTestInterval' => Integer.getExample(),
            'badLinkTestInterval' => Integer.getExample(),
            'linkUnusedInterval' => Integer.getExample(),
            'connectionTimeout' => Integer.getExample()
        };

        OASClient client;
        OASConfigmgrApi api;
        OASComDayCqRewriterLinkcheckerImplLi response;
        OASComDayCqRewriterLinkcheckerImplLi expectedResponse;
        String js = '';

        client = new OASClient();
        api = new OASConfigmgrApi(client);

        js = JSON.serialize(OASComDayCqRewriterLinkcheckerImplLi.getExample());
        res.setHeader('Content-Type', 'application/json');
        res.setBody(js);
        expectedResponse = OASComDayCqRewriterLinkcheckerImplLi.getExample();
        response = (OASComDayCqRewriterLinkcheckerImplLi) api.comDayCqRewriterLinkcheckerImplLinkCheckerTask(params);
        System.assertEquals(expectedResponse, response);
    }

    /**
     * 
     *
     * 
     */
    @isTest
    private static void comDayCqRewriterLinkcheckerImplLinkCheckerTransformerFactoryTest() {
        HttpResponse res = new HttpResponse();
        res.setStatusCode(200);
        res.setStatus('OK');
        Test.setMock(HttpCalloutMock.class, new OASResponseMock(res));

        Map<String, Object> params = new Map<String, Object>{
            'post' => Boolean.getExample(),
            'apply' => Boolean.getExample(),
            'r_delete' => Boolean.getExample(),
            'action' => 'null',
            'location' => 'null',
            'propertylist' => new List<String>{''},
            'linkcheckertransformerDisableRewriting' => Boolean.getExample(),
            'linkcheckertransformerDisableChecking' => Boolean.getExample(),
            'linkcheckertransformerMapCacheSize' => Integer.getExample(),
            'linkcheckertransformerStrictExtensionCheck' => Boolean.getExample(),
            'linkcheckertransformerStripHtmltExtension' => Boolean.getExample(),
            'linkcheckertransformerRewriteElements' => new List<String>{''},
            'linkcheckertransformerStripExtensionPathBlacklist' => new List<String>{''}
        };

        OASClient client;
        OASConfigmgrApi api;
        OASComDayCqRewriterLinkcheckerImplLi response;
        OASComDayCqRewriterLinkcheckerImplLi expectedResponse;
        String js = '';

        client = new OASClient();
        api = new OASConfigmgrApi(client);

        js = JSON.serialize(OASComDayCqRewriterLinkcheckerImplLi.getExample());
        res.setHeader('Content-Type', 'application/json');
        res.setBody(js);
        expectedResponse = OASComDayCqRewriterLinkcheckerImplLi.getExample();
        response = (OASComDayCqRewriterLinkcheckerImplLi) api.comDayCqRewriterLinkcheckerImplLinkCheckerTransformerFactory(params);
        System.assertEquals(expectedResponse, response);
    }

    /**
     * 
     *
     * 
     */
    @isTest
    private static void comDayCqRewriterLinkcheckerImplLinkInfoStorageImplTest() {
        HttpResponse res = new HttpResponse();
        res.setStatusCode(200);
        res.setStatus('OK');
        Test.setMock(HttpCalloutMock.class, new OASResponseMock(res));

        Map<String, Object> params = new Map<String, Object>{
            'post' => Boolean.getExample(),
            'apply' => Boolean.getExample(),
            'r_delete' => Boolean.getExample(),
            'action' => 'null',
            'location' => 'null',
            'propertylist' => new List<String>{''},
            'serviceMaxLinksPerHost' => Integer.getExample(),
            'serviceSaveExternalLinkReferences' => Boolean.getExample()
        };

        OASClient client;
        OASConfigmgrApi api;
        OASComDayCqRewriterLinkcheckerImplLi response;
        OASComDayCqRewriterLinkcheckerImplLi expectedResponse;
        String js = '';

        client = new OASClient();
        api = new OASConfigmgrApi(client);

        js = JSON.serialize(OASComDayCqRewriterLinkcheckerImplLi.getExample());
        res.setHeader('Content-Type', 'application/json');
        res.setBody(js);
        expectedResponse = OASComDayCqRewriterLinkcheckerImplLi.getExample();
        response = (OASComDayCqRewriterLinkcheckerImplLi) api.comDayCqRewriterLinkcheckerImplLinkInfoStorageImpl(params);
        System.assertEquals(expectedResponse, response);
    }

    /**
     * 
     *
     * 
     */
    @isTest
    private static void comDayCqRewriterProcessorImplHtmlParserFactoryTest() {
        HttpResponse res = new HttpResponse();
        res.setStatusCode(200);
        res.setStatus('OK');
        Test.setMock(HttpCalloutMock.class, new OASResponseMock(res));

        Map<String, Object> params = new Map<String, Object>{
            'post' => Boolean.getExample(),
            'apply' => Boolean.getExample(),
            'r_delete' => Boolean.getExample(),
            'action' => 'null',
            'location' => 'null',
            'propertylist' => new List<String>{''},
            'htmlparserProcessTags' => new List<String>{''},
            'htmlparserPreserveCamelCase' => Boolean.getExample()
        };

        OASClient client;
        OASConfigmgrApi api;
        OASComDayCqRewriterProcessorImplHtml response;
        OASComDayCqRewriterProcessorImplHtml expectedResponse;
        String js = '';

        client = new OASClient();
        api = new OASConfigmgrApi(client);

        js = JSON.serialize(OASComDayCqRewriterProcessorImplHtml.getExample());
        res.setHeader('Content-Type', 'application/json');
        res.setBody(js);
        expectedResponse = OASComDayCqRewriterProcessorImplHtml.getExample();
        response = (OASComDayCqRewriterProcessorImplHtml) api.comDayCqRewriterProcessorImplHtmlParserFactory(params);
        System.assertEquals(expectedResponse, response);
    }

    /**
     * 
     *
     * 
     */
    @isTest
    private static void comDayCqSearchImplBuilderQueryBuilderImplTest() {
        HttpResponse res = new HttpResponse();
        res.setStatusCode(200);
        res.setStatus('OK');
        Test.setMock(HttpCalloutMock.class, new OASResponseMock(res));

        Map<String, Object> params = new Map<String, Object>{
            'post' => Boolean.getExample(),
            'apply' => Boolean.getExample(),
            'r_delete' => Boolean.getExample(),
            'action' => 'null',
            'location' => 'null',
            'propertylist' => new List<String>{''},
            'excerptProperties' => new List<String>{''},
            'cacheMaxEntries' => Integer.getExample(),
            'cacheEntryLifetime' => Integer.getExample(),
            'xpathUnion' => Boolean.getExample()
        };

        OASClient client;
        OASConfigmgrApi api;
        OASComDayCqSearchImplBuilderQueryBui response;
        OASComDayCqSearchImplBuilderQueryBui expectedResponse;
        String js = '';

        client = new OASClient();
        api = new OASConfigmgrApi(client);

        js = JSON.serialize(OASComDayCqSearchImplBuilderQueryBui.getExample());
        res.setHeader('Content-Type', 'application/json');
        res.setBody(js);
        expectedResponse = OASComDayCqSearchImplBuilderQueryBui.getExample();
        response = (OASComDayCqSearchImplBuilderQueryBui) api.comDayCqSearchImplBuilderQueryBuilderImpl(params);
        System.assertEquals(expectedResponse, response);
    }

    /**
     * 
     *
     * 
     */
    @isTest
    private static void comDayCqSearchSuggestImplSuggestionIndexManagerImplTest() {
        HttpResponse res = new HttpResponse();
        res.setStatusCode(200);
        res.setStatus('OK');
        Test.setMock(HttpCalloutMock.class, new OASResponseMock(res));

        Map<String, Object> params = new Map<String, Object>{
            'post' => Boolean.getExample(),
            'apply' => Boolean.getExample(),
            'r_delete' => Boolean.getExample(),
            'action' => 'null',
            'location' => 'null',
            'propertylist' => new List<String>{''},
            'pathBuilderTarget' => 'null',
            'suggestBasepath' => 'null'
        };

        OASClient client;
        OASConfigmgrApi api;
        OASComDayCqSearchSuggestImplSuggesti response;
        OASComDayCqSearchSuggestImplSuggesti expectedResponse;
        String js = '';

        client = new OASClient();
        api = new OASConfigmgrApi(client);

        js = JSON.serialize(OASComDayCqSearchSuggestImplSuggesti.getExample());
        res.setHeader('Content-Type', 'application/json');
        res.setBody(js);
        expectedResponse = OASComDayCqSearchSuggestImplSuggesti.getExample();
        response = (OASComDayCqSearchSuggestImplSuggesti) api.comDayCqSearchSuggestImplSuggestionIndexManagerImpl(params);
        System.assertEquals(expectedResponse, response);
    }

    /**
     * 
     *
     * 
     */
    @isTest
    private static void comDayCqSearchpromoteImplPublishSearchPromoteConfigHandlerTest() {
        HttpResponse res = new HttpResponse();
        res.setStatusCode(200);
        res.setStatus('OK');
        Test.setMock(HttpCalloutMock.class, new OASResponseMock(res));

        Map<String, Object> params = new Map<String, Object>{
            'post' => Boolean.getExample(),
            'apply' => Boolean.getExample(),
            'r_delete' => Boolean.getExample(),
            'action' => 'null',
            'location' => 'null',
            'propertylist' => new List<String>{''},
            'cqSearchpromoteConfighandlerEnabled' => Boolean.getExample()
        };

        OASClient client;
        OASConfigmgrApi api;
        OASComDayCqSearchpromoteImplPublishS response;
        OASComDayCqSearchpromoteImplPublishS expectedResponse;
        String js = '';

        client = new OASClient();
        api = new OASConfigmgrApi(client);

        js = JSON.serialize(OASComDayCqSearchpromoteImplPublishS.getExample());
        res.setHeader('Content-Type', 'application/json');
        res.setBody(js);
        expectedResponse = OASComDayCqSearchpromoteImplPublishS.getExample();
        response = (OASComDayCqSearchpromoteImplPublishS) api.comDayCqSearchpromoteImplPublishSearchPromoteConfigHandler(params);
        System.assertEquals(expectedResponse, response);
    }

    /**
     * 
     *
     * 
     */
    @isTest
    private static void comDayCqSearchpromoteImplSearchPromoteServiceImplTest() {
        HttpResponse res = new HttpResponse();
        res.setStatusCode(200);
        res.setStatus('OK');
        Test.setMock(HttpCalloutMock.class, new OASResponseMock(res));

        Map<String, Object> params = new Map<String, Object>{
            'post' => Boolean.getExample(),
            'apply' => Boolean.getExample(),
            'r_delete' => Boolean.getExample(),
            'action' => 'null',
            'location' => 'null',
            'propertylist' => new List<String>{''},
            'cqSearchpromoteConfigurationServerUri' => 'null',
            'cqSearchpromoteConfigurationEnvironment' => 'null',
            'connectionTimeout' => Integer.getExample(),
            'socketTimeout' => Integer.getExample()
        };

        OASClient client;
        OASConfigmgrApi api;
        OASComDayCqSearchpromoteImplSearchPr response;
        OASComDayCqSearchpromoteImplSearchPr expectedResponse;
        String js = '';

        client = new OASClient();
        api = new OASConfigmgrApi(client);

        js = JSON.serialize(OASComDayCqSearchpromoteImplSearchPr.getExample());
        res.setHeader('Content-Type', 'application/json');
        res.setBody(js);
        expectedResponse = OASComDayCqSearchpromoteImplSearchPr.getExample();
        response = (OASComDayCqSearchpromoteImplSearchPr) api.comDayCqSearchpromoteImplSearchPromoteServiceImpl(params);
        System.assertEquals(expectedResponse, response);
    }

    /**
     * 
     *
     * 
     */
    @isTest
    private static void comDayCqSecurityACLSetupTest() {
        HttpResponse res = new HttpResponse();
        res.setStatusCode(200);
        res.setStatus('OK');
        Test.setMock(HttpCalloutMock.class, new OASResponseMock(res));

        Map<String, Object> params = new Map<String, Object>{
            'post' => Boolean.getExample(),
            'apply' => Boolean.getExample(),
            'r_delete' => Boolean.getExample(),
            'action' => 'null',
            'location' => 'null',
            'propertylist' => new List<String>{''},
            'cqAclsetupRules' => new List<String>{''}
        };

        OASClient client;
        OASConfigmgrApi api;
        OASComDayCqSecurityACLSetupInfo response;
        OASComDayCqSecurityACLSetupInfo expectedResponse;
        String js = '';

        client = new OASClient();
        api = new OASConfigmgrApi(client);

        js = JSON.serialize(OASComDayCqSecurityACLSetupInfo.getExample());
        res.setHeader('Content-Type', 'application/json');
        res.setBody(js);
        expectedResponse = OASComDayCqSecurityACLSetupInfo.getExample();
        response = (OASComDayCqSecurityACLSetupInfo) api.comDayCqSecurityACLSetup(params);
        System.assertEquals(expectedResponse, response);
    }

    /**
     * 
     *
     * 
     */
    @isTest
    private static void comDayCqStatisticsImplStatisticsServiceImplTest() {
        HttpResponse res = new HttpResponse();
        res.setStatusCode(200);
        res.setStatus('OK');
        Test.setMock(HttpCalloutMock.class, new OASResponseMock(res));

        Map<String, Object> params = new Map<String, Object>{
            'post' => Boolean.getExample(),
            'apply' => Boolean.getExample(),
            'r_delete' => Boolean.getExample(),
            'action' => 'null',
            'location' => 'null',
            'propertylist' => new List<String>{''},
            'schedulerPeriod' => Integer.getExample(),
            'schedulerConcurrent' => Boolean.getExample(),
            'path' => 'null',
            'workspace' => 'null',
            'keywordsPath' => 'null',
            'asyncEntries' => Boolean.getExample()
        };

        OASClient client;
        OASConfigmgrApi api;
        OASComDayCqStatisticsImplStatisticsS response;
        OASComDayCqStatisticsImplStatisticsS expectedResponse;
        String js = '';

        client = new OASClient();
        api = new OASConfigmgrApi(client);

        js = JSON.serialize(OASComDayCqStatisticsImplStatisticsS.getExample());
        res.setHeader('Content-Type', 'application/json');
        res.setBody(js);
        expectedResponse = OASComDayCqStatisticsImplStatisticsS.getExample();
        response = (OASComDayCqStatisticsImplStatisticsS) api.comDayCqStatisticsImplStatisticsServiceImpl(params);
        System.assertEquals(expectedResponse, response);
    }

    /**
     * 
     *
     * 
     */
    @isTest
    private static void comDayCqTaggingImplJcrTagManagerFactoryImplTest() {
        HttpResponse res = new HttpResponse();
        res.setStatusCode(200);
        res.setStatus('OK');
        Test.setMock(HttpCalloutMock.class, new OASResponseMock(res));

        Map<String, Object> params = new Map<String, Object>{
            'post' => Boolean.getExample(),
            'apply' => Boolean.getExample(),
            'r_delete' => Boolean.getExample(),
            'action' => 'null',
            'location' => 'null',
            'propertylist' => new List<String>{''},
            'validationEnabled' => Boolean.getExample()
        };

        OASClient client;
        OASConfigmgrApi api;
        OASComDayCqTaggingImplJcrTagManagerF response;
        OASComDayCqTaggingImplJcrTagManagerF expectedResponse;
        String js = '';

        client = new OASClient();
        api = new OASConfigmgrApi(client);

        js = JSON.serialize(OASComDayCqTaggingImplJcrTagManagerF.getExample());
        res.setHeader('Content-Type', 'application/json');
        res.setBody(js);
        expectedResponse = OASComDayCqTaggingImplJcrTagManagerF.getExample();
        response = (OASComDayCqTaggingImplJcrTagManagerF) api.comDayCqTaggingImplJcrTagManagerFactoryImpl(params);
        System.assertEquals(expectedResponse, response);
    }

    /**
     * 
     *
     * 
     */
    @isTest
    private static void comDayCqTaggingImplSearchTagPredicateEvaluatorTest() {
        HttpResponse res = new HttpResponse();
        res.setStatusCode(200);
        res.setStatus('OK');
        Test.setMock(HttpCalloutMock.class, new OASResponseMock(res));

        Map<String, Object> params = new Map<String, Object>{
            'post' => Boolean.getExample(),
            'apply' => Boolean.getExample(),
            'r_delete' => Boolean.getExample(),
            'action' => 'null',
            'location' => 'null',
            'propertylist' => new List<String>{''},
            'ignorePath' => Boolean.getExample()
        };

        OASClient client;
        OASConfigmgrApi api;
        OASComDayCqTaggingImplSearchTagPredi response;
        OASComDayCqTaggingImplSearchTagPredi expectedResponse;
        String js = '';

        client = new OASClient();
        api = new OASConfigmgrApi(client);

        js = JSON.serialize(OASComDayCqTaggingImplSearchTagPredi.getExample());
        res.setHeader('Content-Type', 'application/json');
        res.setBody(js);
        expectedResponse = OASComDayCqTaggingImplSearchTagPredi.getExample();
        response = (OASComDayCqTaggingImplSearchTagPredi) api.comDayCqTaggingImplSearchTagPredicateEvaluator(params);
        System.assertEquals(expectedResponse, response);
    }

    /**
     * 
     *
     * 
     */
    @isTest
    private static void comDayCqTaggingImplTagGarbageCollectorTest() {
        HttpResponse res = new HttpResponse();
        res.setStatusCode(200);
        res.setStatus('OK');
        Test.setMock(HttpCalloutMock.class, new OASResponseMock(res));

        Map<String, Object> params = new Map<String, Object>{
            'post' => Boolean.getExample(),
            'apply' => Boolean.getExample(),
            'r_delete' => Boolean.getExample(),
            'action' => 'null',
            'location' => 'null',
            'propertylist' => new List<String>{''},
            'schedulerExpression' => 'null'
        };

        OASClient client;
        OASConfigmgrApi api;
        OASComDayCqTaggingImplTagGarbageColl response;
        OASComDayCqTaggingImplTagGarbageColl expectedResponse;
        String js = '';

        client = new OASClient();
        api = new OASConfigmgrApi(client);

        js = JSON.serialize(OASComDayCqTaggingImplTagGarbageColl.getExample());
        res.setHeader('Content-Type', 'application/json');
        res.setBody(js);
        expectedResponse = OASComDayCqTaggingImplTagGarbageColl.getExample();
        response = (OASComDayCqTaggingImplTagGarbageColl) api.comDayCqTaggingImplTagGarbageCollector(params);
        System.assertEquals(expectedResponse, response);
    }

    /**
     * 
     *
     * 
     */
    @isTest
    private static void comDayCqWcmContentsyncImplHandlerPagesUpdateHandlerTest() {
        HttpResponse res = new HttpResponse();
        res.setStatusCode(200);
        res.setStatus('OK');
        Test.setMock(HttpCalloutMock.class, new OASResponseMock(res));

        Map<String, Object> params = new Map<String, Object>{
            'post' => Boolean.getExample(),
            'apply' => Boolean.getExample(),
            'r_delete' => Boolean.getExample(),
            'action' => 'null',
            'location' => 'null',
            'propertylist' => new List<String>{''},
            'cqPagesupdatehandlerImageresourcetypes' => new List<String>{''}
        };

        OASClient client;
        OASConfigmgrApi api;
        OASComDayCqWcmContentsyncImplHandler response;
        OASComDayCqWcmContentsyncImplHandler expectedResponse;
        String js = '';

        client = new OASClient();
        api = new OASConfigmgrApi(client);

        js = JSON.serialize(OASComDayCqWcmContentsyncImplHandler.getExample());
        res.setHeader('Content-Type', 'application/json');
        res.setBody(js);
        expectedResponse = OASComDayCqWcmContentsyncImplHandler.getExample();
        response = (OASComDayCqWcmContentsyncImplHandler) api.comDayCqWcmContentsyncImplHandlerPagesUpdateHandler(params);
        System.assertEquals(expectedResponse, response);
    }

    /**
     * 
     *
     * 
     */
    @isTest
    private static void comDayCqWcmContentsyncImplRewriterPathRewriterTransformerFactorTest() {
        HttpResponse res = new HttpResponse();
        res.setStatusCode(200);
        res.setStatus('OK');
        Test.setMock(HttpCalloutMock.class, new OASResponseMock(res));

        Map<String, Object> params = new Map<String, Object>{
            'post' => Boolean.getExample(),
            'apply' => Boolean.getExample(),
            'r_delete' => Boolean.getExample(),
            'action' => 'null',
            'location' => 'null',
            'propertylist' => new List<String>{''},
            'cqContentsyncPathrewritertransformerMappingLinks' => new List<String>{''},
            'cqContentsyncPathrewritertransformerMappingClientlibs' => new List<String>{''},
            'cqContentsyncPathrewritertransformerMappingImages' => new List<String>{''},
            'cqContentsyncPathrewritertransformerAttributePattern' => 'null',
            'cqContentsyncPathrewritertransformerClientlibraryPattern' => 'null',
            'cqContentsyncPathrewritertransformerClientlibraryReplace' => 'null'
        };

        OASClient client;
        OASConfigmgrApi api;
        OASComDayCqWcmContentsyncImplRewrite response;
        OASComDayCqWcmContentsyncImplRewrite expectedResponse;
        String js = '';

        client = new OASClient();
        api = new OASConfigmgrApi(client);

        js = JSON.serialize(OASComDayCqWcmContentsyncImplRewrite.getExample());
        res.setHeader('Content-Type', 'application/json');
        res.setBody(js);
        expectedResponse = OASComDayCqWcmContentsyncImplRewrite.getExample();
        response = (OASComDayCqWcmContentsyncImplRewrite) api.comDayCqWcmContentsyncImplRewriterPathRewriterTransformerFactor(params);
        System.assertEquals(expectedResponse, response);
    }

    /**
     * 
     *
     * 
     */
    @isTest
    private static void comDayCqWcmCoreImplAuthoringUIModeServiceImplTest() {
        HttpResponse res = new HttpResponse();
        res.setStatusCode(200);
        res.setStatus('OK');
        Test.setMock(HttpCalloutMock.class, new OASResponseMock(res));

        Map<String, Object> params = new Map<String, Object>{
            'post' => Boolean.getExample(),
            'apply' => Boolean.getExample(),
            'r_delete' => Boolean.getExample(),
            'action' => 'null',
            'location' => 'null',
            'propertylist' => new List<String>{''},
            'authoringUIModeServiceDefault' => 'null'
        };

        OASClient client;
        OASConfigmgrApi api;
        OASComDayCqWcmCoreImplAuthoringUIMod response;
        OASComDayCqWcmCoreImplAuthoringUIMod expectedResponse;
        String js = '';

        client = new OASClient();
        api = new OASConfigmgrApi(client);

        js = JSON.serialize(OASComDayCqWcmCoreImplAuthoringUIMod.getExample());
        res.setHeader('Content-Type', 'application/json');
        res.setBody(js);
        expectedResponse = OASComDayCqWcmCoreImplAuthoringUIMod.getExample();
        response = (OASComDayCqWcmCoreImplAuthoringUIMod) api.comDayCqWcmCoreImplAuthoringUIModeServiceImpl(params);
        System.assertEquals(expectedResponse, response);
    }

    /**
     * 
     *
     * 
     */
    @isTest
    private static void comDayCqWcmCoreImplCommandsWCMCommandServletTest() {
        HttpResponse res = new HttpResponse();
        res.setStatusCode(200);
        res.setStatus('OK');
        Test.setMock(HttpCalloutMock.class, new OASResponseMock(res));

        Map<String, Object> params = new Map<String, Object>{
            'post' => Boolean.getExample(),
            'apply' => Boolean.getExample(),
            'r_delete' => Boolean.getExample(),
            'action' => 'null',
            'location' => 'null',
            'propertylist' => new List<String>{''},
            'wcmcommandservletDeleteWhitelist' => new List<String>{''}
        };

        OASClient client;
        OASConfigmgrApi api;
        OASComDayCqWcmCoreImplCommandsWCMCom response;
        OASComDayCqWcmCoreImplCommandsWCMCom expectedResponse;
        String js = '';

        client = new OASClient();
        api = new OASConfigmgrApi(client);

        js = JSON.serialize(OASComDayCqWcmCoreImplCommandsWCMCom.getExample());
        res.setHeader('Content-Type', 'application/json');
        res.setBody(js);
        expectedResponse = OASComDayCqWcmCoreImplCommandsWCMCom.getExample();
        response = (OASComDayCqWcmCoreImplCommandsWCMCom) api.comDayCqWcmCoreImplCommandsWCMCommandServlet(params);
        System.assertEquals(expectedResponse, response);
    }

    /**
     * 
     *
     * 
     */
    @isTest
    private static void comDayCqWcmCoreImplDevicedetectionDeviceIdentificationModeImplTest() {
        HttpResponse res = new HttpResponse();
        res.setStatusCode(200);
        res.setStatus('OK');
        Test.setMock(HttpCalloutMock.class, new OASResponseMock(res));

        Map<String, Object> params = new Map<String, Object>{
            'post' => Boolean.getExample(),
            'apply' => Boolean.getExample(),
            'r_delete' => Boolean.getExample(),
            'action' => 'null',
            'location' => 'null',
            'propertylist' => new List<String>{''},
            'dimDefaultMode' => 'null',
            'dimAppcacheEnabled' => Boolean.getExample()
        };

        OASClient client;
        OASConfigmgrApi api;
        OASComDayCqWcmCoreImplDevicedetectio response;
        OASComDayCqWcmCoreImplDevicedetectio expectedResponse;
        String js = '';

        client = new OASClient();
        api = new OASConfigmgrApi(client);

        js = JSON.serialize(OASComDayCqWcmCoreImplDevicedetectio.getExample());
        res.setHeader('Content-Type', 'application/json');
        res.setBody(js);
        expectedResponse = OASComDayCqWcmCoreImplDevicedetectio.getExample();
        response = (OASComDayCqWcmCoreImplDevicedetectio) api.comDayCqWcmCoreImplDevicedetectionDeviceIdentificationModeImpl(params);
        System.assertEquals(expectedResponse, response);
    }

    /**
     * 
     *
     * 
     */
    @isTest
    private static void comDayCqWcmCoreImplEventPageEventAuditListenerTest() {
        HttpResponse res = new HttpResponse();
        res.setStatusCode(200);
        res.setStatus('OK');
        Test.setMock(HttpCalloutMock.class, new OASResponseMock(res));

        Map<String, Object> params = new Map<String, Object>{
            'post' => Boolean.getExample(),
            'apply' => Boolean.getExample(),
            'r_delete' => Boolean.getExample(),
            'action' => 'null',
            'location' => 'null',
            'propertylist' => new List<String>{''},
            'configured' => 'null'
        };

        OASClient client;
        OASConfigmgrApi api;
        OASComDayCqWcmCoreImplEventPageEvent response;
        OASComDayCqWcmCoreImplEventPageEvent expectedResponse;
        String js = '';

        client = new OASClient();
        api = new OASConfigmgrApi(client);

        js = JSON.serialize(OASComDayCqWcmCoreImplEventPageEvent.getExample());
        res.setHeader('Content-Type', 'application/json');
        res.setBody(js);
        expectedResponse = OASComDayCqWcmCoreImplEventPageEvent.getExample();
        response = (OASComDayCqWcmCoreImplEventPageEvent) api.comDayCqWcmCoreImplEventPageEventAuditListener(params);
        System.assertEquals(expectedResponse, response);
    }

    /**
     * 
     *
     * 
     */
    @isTest
    private static void comDayCqWcmCoreImplEventPagePostProcessorTest() {
        HttpResponse res = new HttpResponse();
        res.setStatusCode(200);
        res.setStatus('OK');
        Test.setMock(HttpCalloutMock.class, new OASResponseMock(res));

        Map<String, Object> params = new Map<String, Object>{
            'post' => Boolean.getExample(),
            'apply' => Boolean.getExample(),
            'r_delete' => Boolean.getExample(),
            'action' => 'null',
            'location' => 'null',
            'propertylist' => new List<String>{''},
            'paths' => new List<String>{''}
        };

        OASClient client;
        OASConfigmgrApi api;
        OASComDayCqWcmCoreImplEventPagePostP response;
        OASComDayCqWcmCoreImplEventPagePostP expectedResponse;
        String js = '';

        client = new OASClient();
        api = new OASConfigmgrApi(client);

        js = JSON.serialize(OASComDayCqWcmCoreImplEventPagePostP.getExample());
        res.setHeader('Content-Type', 'application/json');
        res.setBody(js);
        expectedResponse = OASComDayCqWcmCoreImplEventPagePostP.getExample();
        response = (OASComDayCqWcmCoreImplEventPagePostP) api.comDayCqWcmCoreImplEventPagePostProcessor(params);
        System.assertEquals(expectedResponse, response);
    }

    /**
     * 
     *
     * 
     */
    @isTest
    private static void comDayCqWcmCoreImplEventRepositoryChangeEventListenerTest() {
        HttpResponse res = new HttpResponse();
        res.setStatusCode(200);
        res.setStatus('OK');
        Test.setMock(HttpCalloutMock.class, new OASResponseMock(res));

        Map<String, Object> params = new Map<String, Object>{
            'post' => Boolean.getExample(),
            'apply' => Boolean.getExample(),
            'r_delete' => Boolean.getExample(),
            'action' => 'null',
            'location' => 'null',
            'propertylist' => new List<String>{''},
            'paths' => new List<String>{''},
            'excludedPaths' => new List<String>{''}
        };

        OASClient client;
        OASConfigmgrApi api;
        OASComDayCqWcmCoreImplEventRepositor response;
        OASComDayCqWcmCoreImplEventRepositor expectedResponse;
        String js = '';

        client = new OASClient();
        api = new OASConfigmgrApi(client);

        js = JSON.serialize(OASComDayCqWcmCoreImplEventRepositor.getExample());
        res.setHeader('Content-Type', 'application/json');
        res.setBody(js);
        expectedResponse = OASComDayCqWcmCoreImplEventRepositor.getExample();
        response = (OASComDayCqWcmCoreImplEventRepositor) api.comDayCqWcmCoreImplEventRepositoryChangeEventListener(params);
        System.assertEquals(expectedResponse, response);
    }

    /**
     * 
     *
     * 
     */
    @isTest
    private static void comDayCqWcmCoreImplEventTemplatePostProcessorTest() {
        HttpResponse res = new HttpResponse();
        res.setStatusCode(200);
        res.setStatus('OK');
        Test.setMock(HttpCalloutMock.class, new OASResponseMock(res));

        Map<String, Object> params = new Map<String, Object>{
            'post' => Boolean.getExample(),
            'apply' => Boolean.getExample(),
            'r_delete' => Boolean.getExample(),
            'action' => 'null',
            'location' => 'null',
            'propertylist' => new List<String>{''},
            'paths' => 'null'
        };

        OASClient client;
        OASConfigmgrApi api;
        OASComDayCqWcmCoreImplEventTemplateP response;
        OASComDayCqWcmCoreImplEventTemplateP expectedResponse;
        String js = '';

        client = new OASClient();
        api = new OASConfigmgrApi(client);

        js = JSON.serialize(OASComDayCqWcmCoreImplEventTemplateP.getExample());
        res.setHeader('Content-Type', 'application/json');
        res.setBody(js);
        expectedResponse = OASComDayCqWcmCoreImplEventTemplateP.getExample();
        response = (OASComDayCqWcmCoreImplEventTemplateP) api.comDayCqWcmCoreImplEventTemplatePostProcessor(params);
        System.assertEquals(expectedResponse, response);
    }

    /**
     * 
     *
     * 
     */
    @isTest
    private static void comDayCqWcmCoreImplLanguageManagerImplTest() {
        HttpResponse res = new HttpResponse();
        res.setStatusCode(200);
        res.setStatus('OK');
        Test.setMock(HttpCalloutMock.class, new OASResponseMock(res));

        Map<String, Object> params = new Map<String, Object>{
            'post' => Boolean.getExample(),
            'apply' => Boolean.getExample(),
            'r_delete' => Boolean.getExample(),
            'action' => 'null',
            'location' => 'null',
            'propertylist' => new List<String>{''},
            'langmgrListPath' => 'null',
            'langmgrCountryDefault' => new List<String>{''}
        };

        OASClient client;
        OASConfigmgrApi api;
        OASComDayCqWcmCoreImplLanguageManage response;
        OASComDayCqWcmCoreImplLanguageManage expectedResponse;
        String js = '';

        client = new OASClient();
        api = new OASConfigmgrApi(client);

        js = JSON.serialize(OASComDayCqWcmCoreImplLanguageManage.getExample());
        res.setHeader('Content-Type', 'application/json');
        res.setBody(js);
        expectedResponse = OASComDayCqWcmCoreImplLanguageManage.getExample();
        response = (OASComDayCqWcmCoreImplLanguageManage) api.comDayCqWcmCoreImplLanguageManagerImpl(params);
        System.assertEquals(expectedResponse, response);
    }

    /**
     * 
     *
     * 
     */
    @isTest
    private static void comDayCqWcmCoreImplLinkCheckerConfigurationFactoryImplTest() {
        HttpResponse res = new HttpResponse();
        res.setStatusCode(200);
        res.setStatus('OK');
        Test.setMock(HttpCalloutMock.class, new OASResponseMock(res));

        Map<String, Object> params = new Map<String, Object>{
            'post' => Boolean.getExample(),
            'apply' => Boolean.getExample(),
            'r_delete' => Boolean.getExample(),
            'action' => 'null',
            'location' => 'null',
            'propertylist' => new List<String>{''},
            'linkExpiredPrefix' => 'null',
            'linkExpiredRemove' => Boolean.getExample(),
            'linkExpiredSuffix' => 'null',
            'linkInvalidPrefix' => 'null',
            'linkInvalidRemove' => Boolean.getExample(),
            'linkInvalidSuffix' => 'null',
            'linkPredatedPrefix' => 'null',
            'linkPredatedRemove' => Boolean.getExample(),
            'linkPredatedSuffix' => 'null',
            'linkWcmmodes' => new List<String>{''}
        };

        OASClient client;
        OASConfigmgrApi api;
        OASComDayCqWcmCoreImplLinkCheckerCon response;
        OASComDayCqWcmCoreImplLinkCheckerCon expectedResponse;
        String js = '';

        client = new OASClient();
        api = new OASConfigmgrApi(client);

        js = JSON.serialize(OASComDayCqWcmCoreImplLinkCheckerCon.getExample());
        res.setHeader('Content-Type', 'application/json');
        res.setBody(js);
        expectedResponse = OASComDayCqWcmCoreImplLinkCheckerCon.getExample();
        response = (OASComDayCqWcmCoreImplLinkCheckerCon) api.comDayCqWcmCoreImplLinkCheckerConfigurationFactoryImpl(params);
        System.assertEquals(expectedResponse, response);
    }

    /**
     * 
     *
     * 
     */
    @isTest
    private static void comDayCqWcmCoreImplPagePageInfoAggregatorImplTest() {
        HttpResponse res = new HttpResponse();
        res.setStatusCode(200);
        res.setStatus('OK');
        Test.setMock(HttpCalloutMock.class, new OASResponseMock(res));

        Map<String, Object> params = new Map<String, Object>{
            'post' => Boolean.getExample(),
            'apply' => Boolean.getExample(),
            'r_delete' => Boolean.getExample(),
            'action' => 'null',
            'location' => 'null',
            'propertylist' => new List<String>{''},
            'pageInfoProviderPropertyRegexDefault' => 'null',
            'pageInfoProviderPropertyName' => 'null'
        };

        OASClient client;
        OASConfigmgrApi api;
        OASComDayCqWcmCoreImplPagePageInfoAg response;
        OASComDayCqWcmCoreImplPagePageInfoAg expectedResponse;
        String js = '';

        client = new OASClient();
        api = new OASConfigmgrApi(client);

        js = JSON.serialize(OASComDayCqWcmCoreImplPagePageInfoAg.getExample());
        res.setHeader('Content-Type', 'application/json');
        res.setBody(js);
        expectedResponse = OASComDayCqWcmCoreImplPagePageInfoAg.getExample();
        response = (OASComDayCqWcmCoreImplPagePageInfoAg) api.comDayCqWcmCoreImplPagePageInfoAggregatorImpl(params);
        System.assertEquals(expectedResponse, response);
    }

    /**
     * 
     *
     * 
     */
    @isTest
    private static void comDayCqWcmCoreImplPagePageManagerFactoryImplTest() {
        HttpResponse res = new HttpResponse();
        res.setStatusCode(200);
        res.setStatus('OK');
        Test.setMock(HttpCalloutMock.class, new OASResponseMock(res));

        Map<String, Object> params = new Map<String, Object>{
            'post' => Boolean.getExample(),
            'apply' => Boolean.getExample(),
            'r_delete' => Boolean.getExample(),
            'action' => 'null',
            'location' => 'null',
            'propertylist' => new List<String>{''},
            'illegalCharMapping' => 'null',
            'pageSubTreeActivationCheck' => Boolean.getExample()
        };

        OASClient client;
        OASConfigmgrApi api;
        OASComDayCqWcmCoreImplPagePageManage response;
        OASComDayCqWcmCoreImplPagePageManage expectedResponse;
        String js = '';

        client = new OASClient();
        api = new OASConfigmgrApi(client);

        js = JSON.serialize(OASComDayCqWcmCoreImplPagePageManage.getExample());
        res.setHeader('Content-Type', 'application/json');
        res.setBody(js);
        expectedResponse = OASComDayCqWcmCoreImplPagePageManage.getExample();
        response = (OASComDayCqWcmCoreImplPagePageManage) api.comDayCqWcmCoreImplPagePageManagerFactoryImpl(params);
        System.assertEquals(expectedResponse, response);
    }

    /**
     * 
     *
     * 
     */
    @isTest
    private static void comDayCqWcmCoreImplReferencesContentContentReferenceConfigTest() {
        HttpResponse res = new HttpResponse();
        res.setStatusCode(200);
        res.setStatus('OK');
        Test.setMock(HttpCalloutMock.class, new OASResponseMock(res));

        Map<String, Object> params = new Map<String, Object>{
            'post' => Boolean.getExample(),
            'apply' => Boolean.getExample(),
            'r_delete' => Boolean.getExample(),
            'action' => 'null',
            'location' => 'null',
            'propertylist' => new List<String>{''},
            'contentReferenceConfigResourceTypes' => new List<String>{''}
        };

        OASClient client;
        OASConfigmgrApi api;
        OASComDayCqWcmCoreImplReferencesCont response;
        OASComDayCqWcmCoreImplReferencesCont expectedResponse;
        String js = '';

        client = new OASClient();
        api = new OASConfigmgrApi(client);

        js = JSON.serialize(OASComDayCqWcmCoreImplReferencesCont.getExample());
        res.setHeader('Content-Type', 'application/json');
        res.setBody(js);
        expectedResponse = OASComDayCqWcmCoreImplReferencesCont.getExample();
        response = (OASComDayCqWcmCoreImplReferencesCont) api.comDayCqWcmCoreImplReferencesContentContentReferenceConfig(params);
        System.assertEquals(expectedResponse, response);
    }

    /**
     * 
     *
     * 
     */
    @isTest
    private static void comDayCqWcmCoreImplServletsContentfinderAssetViewHandlerTest() {
        HttpResponse res = new HttpResponse();
        res.setStatusCode(200);
        res.setStatus('OK');
        Test.setMock(HttpCalloutMock.class, new OASResponseMock(res));

        Map<String, Object> params = new Map<String, Object>{
            'post' => Boolean.getExample(),
            'apply' => Boolean.getExample(),
            'r_delete' => Boolean.getExample(),
            'action' => 'null',
            'location' => 'null',
            'propertylist' => new List<String>{''},
            'damShowexpired' => Boolean.getExample(),
            'damShowhidden' => Boolean.getExample(),
            'tagTitleSearch' => Boolean.getExample(),
            'guessTotal' => 'null',
            'damExpiryProperty' => 'null'
        };

        OASClient client;
        OASConfigmgrApi api;
        OASComDayCqWcmCoreImplServletsConten response;
        OASComDayCqWcmCoreImplServletsConten expectedResponse;
        String js = '';

        client = new OASClient();
        api = new OASConfigmgrApi(client);

        js = JSON.serialize(OASComDayCqWcmCoreImplServletsConten.getExample());
        res.setHeader('Content-Type', 'application/json');
        res.setBody(js);
        expectedResponse = OASComDayCqWcmCoreImplServletsConten.getExample();
        response = (OASComDayCqWcmCoreImplServletsConten) api.comDayCqWcmCoreImplServletsContentfinderAssetViewHandler(params);
        System.assertEquals(expectedResponse, response);
    }

    /**
     * 
     *
     * 
     */
    @isTest
    private static void comDayCqWcmCoreImplServletsContentfinderConnectorConnectorVieTest() {
        HttpResponse res = new HttpResponse();
        res.setStatusCode(200);
        res.setStatus('OK');
        Test.setMock(HttpCalloutMock.class, new OASResponseMock(res));

        Map<String, Object> params = new Map<String, Object>{
            'post' => Boolean.getExample(),
            'apply' => Boolean.getExample(),
            'r_delete' => Boolean.getExample(),
            'action' => 'null',
            'location' => 'null',
            'propertylist' => new List<String>{''},
            'itemResourceTypes' => new List<String>{''}
        };

        OASClient client;
        OASConfigmgrApi api;
        OASComDayCqWcmCoreImplServletsConten response;
        OASComDayCqWcmCoreImplServletsConten expectedResponse;
        String js = '';

        client = new OASClient();
        api = new OASConfigmgrApi(client);

        js = JSON.serialize(OASComDayCqWcmCoreImplServletsConten.getExample());
        res.setHeader('Content-Type', 'application/json');
        res.setBody(js);
        expectedResponse = OASComDayCqWcmCoreImplServletsConten.getExample();
        response = (OASComDayCqWcmCoreImplServletsConten) api.comDayCqWcmCoreImplServletsContentfinderConnectorConnectorVie(params);
        System.assertEquals(expectedResponse, response);
    }

    /**
     * 
     *
     * 
     */
    @isTest
    private static void comDayCqWcmCoreImplServletsContentfinderPageViewHandlerTest() {
        HttpResponse res = new HttpResponse();
        res.setStatusCode(200);
        res.setStatus('OK');
        Test.setMock(HttpCalloutMock.class, new OASResponseMock(res));

        Map<String, Object> params = new Map<String, Object>{
            'post' => Boolean.getExample(),
            'apply' => Boolean.getExample(),
            'r_delete' => Boolean.getExample(),
            'action' => 'null',
            'location' => 'null',
            'propertylist' => new List<String>{''},
            'guessTotal' => 'null',
            'tagTitleSearch' => Boolean.getExample()
        };

        OASClient client;
        OASConfigmgrApi api;
        OASComDayCqWcmCoreImplServletsConten response;
        OASComDayCqWcmCoreImplServletsConten expectedResponse;
        String js = '';

        client = new OASClient();
        api = new OASConfigmgrApi(client);

        js = JSON.serialize(OASComDayCqWcmCoreImplServletsConten.getExample());
        res.setHeader('Content-Type', 'application/json');
        res.setBody(js);
        expectedResponse = OASComDayCqWcmCoreImplServletsConten.getExample();
        response = (OASComDayCqWcmCoreImplServletsConten) api.comDayCqWcmCoreImplServletsContentfinderPageViewHandler(params);
        System.assertEquals(expectedResponse, response);
    }

    /**
     * 
     *
     * 
     */
    @isTest
    private static void comDayCqWcmCoreImplServletsFindReplaceServletTest() {
        HttpResponse res = new HttpResponse();
        res.setStatusCode(200);
        res.setStatus('OK');
        Test.setMock(HttpCalloutMock.class, new OASResponseMock(res));

        Map<String, Object> params = new Map<String, Object>{
            'post' => Boolean.getExample(),
            'apply' => Boolean.getExample(),
            'r_delete' => Boolean.getExample(),
            'action' => 'null',
            'location' => 'null',
            'propertylist' => new List<String>{''},
            'scope' => new List<String>{''}
        };

        OASClient client;
        OASConfigmgrApi api;
        OASComDayCqWcmCoreImplServletsFindRe response;
        OASComDayCqWcmCoreImplServletsFindRe expectedResponse;
        String js = '';

        client = new OASClient();
        api = new OASConfigmgrApi(client);

        js = JSON.serialize(OASComDayCqWcmCoreImplServletsFindRe.getExample());
        res.setHeader('Content-Type', 'application/json');
        res.setBody(js);
        expectedResponse = OASComDayCqWcmCoreImplServletsFindRe.getExample();
        response = (OASComDayCqWcmCoreImplServletsFindRe) api.comDayCqWcmCoreImplServletsFindReplaceServlet(params);
        System.assertEquals(expectedResponse, response);
    }

    /**
     * 
     *
     * 
     */
    @isTest
    private static void comDayCqWcmCoreImplServletsReferenceSearchServletTest() {
        HttpResponse res = new HttpResponse();
        res.setStatusCode(200);
        res.setStatus('OK');
        Test.setMock(HttpCalloutMock.class, new OASResponseMock(res));

        Map<String, Object> params = new Map<String, Object>{
            'post' => Boolean.getExample(),
            'apply' => Boolean.getExample(),
            'r_delete' => Boolean.getExample(),
            'action' => 'null',
            'location' => 'null',
            'propertylist' => new List<String>{''},
            'referencesearchservletMaxReferencesPerPage' => Integer.getExample(),
            'referencesearchservletMaxPages' => Integer.getExample()
        };

        OASClient client;
        OASConfigmgrApi api;
        OASComDayCqWcmCoreImplServletsRefere response;
        OASComDayCqWcmCoreImplServletsRefere expectedResponse;
        String js = '';

        client = new OASClient();
        api = new OASConfigmgrApi(client);

        js = JSON.serialize(OASComDayCqWcmCoreImplServletsRefere.getExample());
        res.setHeader('Content-Type', 'application/json');
        res.setBody(js);
        expectedResponse = OASComDayCqWcmCoreImplServletsRefere.getExample();
        response = (OASComDayCqWcmCoreImplServletsRefere) api.comDayCqWcmCoreImplServletsReferenceSearchServlet(params);
        System.assertEquals(expectedResponse, response);
    }

    /**
     * 
     *
     * 
     */
    @isTest
    private static void comDayCqWcmCoreImplServletsThumbnailServletTest() {
        HttpResponse res = new HttpResponse();
        res.setStatusCode(200);
        res.setStatus('OK');
        Test.setMock(HttpCalloutMock.class, new OASResponseMock(res));

        Map<String, Object> params = new Map<String, Object>{
            'post' => Boolean.getExample(),
            'apply' => Boolean.getExample(),
            'r_delete' => Boolean.getExample(),
            'action' => 'null',
            'location' => 'null',
            'propertylist' => new List<String>{''},
            'workspace' => 'null',
            'dimensions' => new List<String>{''}
        };

        OASClient client;
        OASConfigmgrApi api;
        OASComDayCqWcmCoreImplServletsThumbn response;
        OASComDayCqWcmCoreImplServletsThumbn expectedResponse;
        String js = '';

        client = new OASClient();
        api = new OASConfigmgrApi(client);

        js = JSON.serialize(OASComDayCqWcmCoreImplServletsThumbn.getExample());
        res.setHeader('Content-Type', 'application/json');
        res.setBody(js);
        expectedResponse = OASComDayCqWcmCoreImplServletsThumbn.getExample();
        response = (OASComDayCqWcmCoreImplServletsThumbn) api.comDayCqWcmCoreImplServletsThumbnailServlet(params);
        System.assertEquals(expectedResponse, response);
    }

    /**
     * 
     *
     * 
     */
    @isTest
    private static void comDayCqWcmCoreImplUtilsDefaultPageNameValidatorTest() {
        HttpResponse res = new HttpResponse();
        res.setStatusCode(200);
        res.setStatus('OK');
        Test.setMock(HttpCalloutMock.class, new OASResponseMock(res));

        Map<String, Object> params = new Map<String, Object>{
            'post' => Boolean.getExample(),
            'apply' => Boolean.getExample(),
            'r_delete' => Boolean.getExample(),
            'action' => 'null',
            'location' => 'null',
            'propertylist' => new List<String>{''},
            'nonValidChars' => 'null'
        };

        OASClient client;
        OASConfigmgrApi api;
        OASComDayCqWcmCoreImplUtilsDefaultPa response;
        OASComDayCqWcmCoreImplUtilsDefaultPa expectedResponse;
        String js = '';

        client = new OASClient();
        api = new OASConfigmgrApi(client);

        js = JSON.serialize(OASComDayCqWcmCoreImplUtilsDefaultPa.getExample());
        res.setHeader('Content-Type', 'application/json');
        res.setBody(js);
        expectedResponse = OASComDayCqWcmCoreImplUtilsDefaultPa.getExample();
        response = (OASComDayCqWcmCoreImplUtilsDefaultPa) api.comDayCqWcmCoreImplUtilsDefaultPageNameValidator(params);
        System.assertEquals(expectedResponse, response);
    }

    /**
     * 
     *
     * 
     */
    @isTest
    private static void comDayCqWcmCoreImplVariantsPageVariantsProviderImplTest() {
        HttpResponse res = new HttpResponse();
        res.setStatusCode(200);
        res.setStatus('OK');
        Test.setMock(HttpCalloutMock.class, new OASResponseMock(res));

        Map<String, Object> params = new Map<String, Object>{
            'post' => Boolean.getExample(),
            'apply' => Boolean.getExample(),
            'r_delete' => Boolean.getExample(),
            'action' => 'null',
            'location' => 'null',
            'propertylist' => new List<String>{''},
            'defaultExternalizerDomain' => 'null'
        };

        OASClient client;
        OASConfigmgrApi api;
        OASComDayCqWcmCoreImplVariantsPageVa response;
        OASComDayCqWcmCoreImplVariantsPageVa expectedResponse;
        String js = '';

        client = new OASClient();
        api = new OASConfigmgrApi(client);

        js = JSON.serialize(OASComDayCqWcmCoreImplVariantsPageVa.getExample());
        res.setHeader('Content-Type', 'application/json');
        res.setBody(js);
        expectedResponse = OASComDayCqWcmCoreImplVariantsPageVa.getExample();
        response = (OASComDayCqWcmCoreImplVariantsPageVa) api.comDayCqWcmCoreImplVariantsPageVariantsProviderImpl(params);
        System.assertEquals(expectedResponse, response);
    }

    /**
     * 
     *
     * 
     */
    @isTest
    private static void comDayCqWcmCoreImplVersionManagerImplTest() {
        HttpResponse res = new HttpResponse();
        res.setStatusCode(200);
        res.setStatus('OK');
        Test.setMock(HttpCalloutMock.class, new OASResponseMock(res));

        Map<String, Object> params = new Map<String, Object>{
            'post' => Boolean.getExample(),
            'apply' => Boolean.getExample(),
            'r_delete' => Boolean.getExample(),
            'action' => 'null',
            'location' => 'null',
            'propertylist' => new List<String>{''},
            'versionmanagerCreateVersionOnActivation' => Boolean.getExample(),
            'versionmanagerPurgingEnabled' => Boolean.getExample(),
            'versionmanagerPurgePaths' => new List<String>{''},
            'versionmanagerIvPaths' => new List<String>{''},
            'versionmanagerMaxAgeDays' => Integer.getExample(),
            'versionmanagerMaxNumberVersions' => Integer.getExample(),
            'versionmanagerMinNumberVersions' => Integer.getExample()
        };

        OASClient client;
        OASConfigmgrApi api;
        OASComDayCqWcmCoreImplVersionManager response;
        OASComDayCqWcmCoreImplVersionManager expectedResponse;
        String js = '';

        client = new OASClient();
        api = new OASConfigmgrApi(client);

        js = JSON.serialize(OASComDayCqWcmCoreImplVersionManager.getExample());
        res.setHeader('Content-Type', 'application/json');
        res.setBody(js);
        expectedResponse = OASComDayCqWcmCoreImplVersionManager.getExample();
        response = (OASComDayCqWcmCoreImplVersionManager) api.comDayCqWcmCoreImplVersionManagerImpl(params);
        System.assertEquals(expectedResponse, response);
    }

    /**
     * 
     *
     * 
     */
    @isTest
    private static void comDayCqWcmCoreImplVersionPurgeTaskTest() {
        HttpResponse res = new HttpResponse();
        res.setStatusCode(200);
        res.setStatus('OK');
        Test.setMock(HttpCalloutMock.class, new OASResponseMock(res));

        Map<String, Object> params = new Map<String, Object>{
            'post' => Boolean.getExample(),
            'apply' => Boolean.getExample(),
            'r_delete' => Boolean.getExample(),
            'action' => 'null',
            'location' => 'null',
            'propertylist' => new List<String>{''},
            'versionpurgePaths' => new List<String>{''},
            'versionpurgeRecursive' => Boolean.getExample(),
            'versionpurgeMaxVersions' => Integer.getExample(),
            'versionpurgeMinVersions' => Integer.getExample(),
            'versionpurgeMaxAgeDays' => Integer.getExample()
        };

        OASClient client;
        OASConfigmgrApi api;
        OASComDayCqWcmCoreImplVersionPurgeTa response;
        OASComDayCqWcmCoreImplVersionPurgeTa expectedResponse;
        String js = '';

        client = new OASClient();
        api = new OASConfigmgrApi(client);

        js = JSON.serialize(OASComDayCqWcmCoreImplVersionPurgeTa.getExample());
        res.setHeader('Content-Type', 'application/json');
        res.setBody(js);
        expectedResponse = OASComDayCqWcmCoreImplVersionPurgeTa.getExample();
        response = (OASComDayCqWcmCoreImplVersionPurgeTa) api.comDayCqWcmCoreImplVersionPurgeTask(params);
        System.assertEquals(expectedResponse, response);
    }

    /**
     * 
     *
     * 
     */
    @isTest
    private static void comDayCqWcmCoreImplWCMDebugFilterTest() {
        HttpResponse res = new HttpResponse();
        res.setStatusCode(200);
        res.setStatus('OK');
        Test.setMock(HttpCalloutMock.class, new OASResponseMock(res));

        Map<String, Object> params = new Map<String, Object>{
            'post' => Boolean.getExample(),
            'apply' => Boolean.getExample(),
            'r_delete' => Boolean.getExample(),
            'action' => 'null',
            'location' => 'null',
            'propertylist' => new List<String>{''},
            'wcmdbgfilterEnabled' => Boolean.getExample(),
            'wcmdbgfilterJspDebug' => Boolean.getExample()
        };

        OASClient client;
        OASConfigmgrApi api;
        OASComDayCqWcmCoreImplWCMDebugFilter response;
        OASComDayCqWcmCoreImplWCMDebugFilter expectedResponse;
        String js = '';

        client = new OASClient();
        api = new OASConfigmgrApi(client);

        js = JSON.serialize(OASComDayCqWcmCoreImplWCMDebugFilter.getExample());
        res.setHeader('Content-Type', 'application/json');
        res.setBody(js);
        expectedResponse = OASComDayCqWcmCoreImplWCMDebugFilter.getExample();
        response = (OASComDayCqWcmCoreImplWCMDebugFilter) api.comDayCqWcmCoreImplWCMDebugFilter(params);
        System.assertEquals(expectedResponse, response);
    }

    /**
     * 
     *
     * 
     */
    @isTest
    private static void comDayCqWcmCoreImplWCMDeveloperModeFilterTest() {
        HttpResponse res = new HttpResponse();
        res.setStatusCode(200);
        res.setStatus('OK');
        Test.setMock(HttpCalloutMock.class, new OASResponseMock(res));

        Map<String, Object> params = new Map<String, Object>{
            'post' => Boolean.getExample(),
            'apply' => Boolean.getExample(),
            'r_delete' => Boolean.getExample(),
            'action' => 'null',
            'location' => 'null',
            'propertylist' => new List<String>{''},
            'wcmdevmodefilterEnabled' => Boolean.getExample()
        };

        OASClient client;
        OASConfigmgrApi api;
        OASComDayCqWcmCoreImplWCMDeveloperMo response;
        OASComDayCqWcmCoreImplWCMDeveloperMo expectedResponse;
        String js = '';

        client = new OASClient();
        api = new OASConfigmgrApi(client);

        js = JSON.serialize(OASComDayCqWcmCoreImplWCMDeveloperMo.getExample());
        res.setHeader('Content-Type', 'application/json');
        res.setBody(js);
        expectedResponse = OASComDayCqWcmCoreImplWCMDeveloperMo.getExample();
        response = (OASComDayCqWcmCoreImplWCMDeveloperMo) api.comDayCqWcmCoreImplWCMDeveloperModeFilter(params);
        System.assertEquals(expectedResponse, response);
    }

    /**
     * 
     *
     * 
     */
    @isTest
    private static void comDayCqWcmCoreImplWarpTimeWarpFilterTest() {
        HttpResponse res = new HttpResponse();
        res.setStatusCode(200);
        res.setStatus('OK');
        Test.setMock(HttpCalloutMock.class, new OASResponseMock(res));

        Map<String, Object> params = new Map<String, Object>{
            'post' => Boolean.getExample(),
            'apply' => Boolean.getExample(),
            'r_delete' => Boolean.getExample(),
            'action' => 'null',
            'location' => 'null',
            'propertylist' => new List<String>{''},
            'filterOrder' => 'null',
            'filterScope' => 'null'
        };

        OASClient client;
        OASConfigmgrApi api;
        OASComDayCqWcmCoreImplWarpTimeWarpFi response;
        OASComDayCqWcmCoreImplWarpTimeWarpFi expectedResponse;
        String js = '';

        client = new OASClient();
        api = new OASConfigmgrApi(client);

        js = JSON.serialize(OASComDayCqWcmCoreImplWarpTimeWarpFi.getExample());
        res.setHeader('Content-Type', 'application/json');
        res.setBody(js);
        expectedResponse = OASComDayCqWcmCoreImplWarpTimeWarpFi.getExample();
        response = (OASComDayCqWcmCoreImplWarpTimeWarpFi) api.comDayCqWcmCoreImplWarpTimeWarpFilter(params);
        System.assertEquals(expectedResponse, response);
    }

    /**
     * 
     *
     * 
     */
    @isTest
    private static void comDayCqWcmCoreMvtMVTStatisticsImplTest() {
        HttpResponse res = new HttpResponse();
        res.setStatusCode(200);
        res.setStatus('OK');
        Test.setMock(HttpCalloutMock.class, new OASResponseMock(res));

        Map<String, Object> params = new Map<String, Object>{
            'post' => Boolean.getExample(),
            'apply' => Boolean.getExample(),
            'r_delete' => Boolean.getExample(),
            'action' => 'null',
            'location' => 'null',
            'propertylist' => new List<String>{''},
            'mvtstatisticsTrackingurl' => 'null'
        };

        OASClient client;
        OASConfigmgrApi api;
        OASComDayCqWcmCoreMvtMVTStatisticsIm response;
        OASComDayCqWcmCoreMvtMVTStatisticsIm expectedResponse;
        String js = '';

        client = new OASClient();
        api = new OASConfigmgrApi(client);

        js = JSON.serialize(OASComDayCqWcmCoreMvtMVTStatisticsIm.getExample());
        res.setHeader('Content-Type', 'application/json');
        res.setBody(js);
        expectedResponse = OASComDayCqWcmCoreMvtMVTStatisticsIm.getExample();
        response = (OASComDayCqWcmCoreMvtMVTStatisticsIm) api.comDayCqWcmCoreMvtMVTStatisticsImpl(params);
        System.assertEquals(expectedResponse, response);
    }

    /**
     * 
     *
     * 
     */
    @isTest
    private static void comDayCqWcmCoreStatsPageViewStatisticsImplTest() {
        HttpResponse res = new HttpResponse();
        res.setStatusCode(200);
        res.setStatus('OK');
        Test.setMock(HttpCalloutMock.class, new OASResponseMock(res));

        Map<String, Object> params = new Map<String, Object>{
            'post' => Boolean.getExample(),
            'apply' => Boolean.getExample(),
            'r_delete' => Boolean.getExample(),
            'action' => 'null',
            'location' => 'null',
            'propertylist' => new List<String>{''},
            'pageviewstatisticsTrackingurl' => 'null',
            'pageviewstatisticsTrackingscriptEnabled' => 'null'
        };

        OASClient client;
        OASConfigmgrApi api;
        OASComDayCqWcmCoreStatsPageViewStati response;
        OASComDayCqWcmCoreStatsPageViewStati expectedResponse;
        String js = '';

        client = new OASClient();
        api = new OASConfigmgrApi(client);

        js = JSON.serialize(OASComDayCqWcmCoreStatsPageViewStati.getExample());
        res.setHeader('Content-Type', 'application/json');
        res.setBody(js);
        expectedResponse = OASComDayCqWcmCoreStatsPageViewStati.getExample();
        response = (OASComDayCqWcmCoreStatsPageViewStati) api.comDayCqWcmCoreStatsPageViewStatisticsImpl(params);
        System.assertEquals(expectedResponse, response);
    }

    /**
     * 
     *
     * 
     */
    @isTest
    private static void comDayCqWcmCoreWCMRequestFilterTest() {
        HttpResponse res = new HttpResponse();
        res.setStatusCode(200);
        res.setStatus('OK');
        Test.setMock(HttpCalloutMock.class, new OASResponseMock(res));

        Map<String, Object> params = new Map<String, Object>{
            'post' => Boolean.getExample(),
            'apply' => Boolean.getExample(),
            'r_delete' => Boolean.getExample(),
            'action' => 'null',
            'location' => 'null',
            'propertylist' => new List<String>{''},
            'wcmfilterMode' => 'null'
        };

        OASClient client;
        OASConfigmgrApi api;
        OASComDayCqWcmCoreWCMRequestFilterIn response;
        OASComDayCqWcmCoreWCMRequestFilterIn expectedResponse;
        String js = '';

        client = new OASClient();
        api = new OASConfigmgrApi(client);

        js = JSON.serialize(OASComDayCqWcmCoreWCMRequestFilterIn.getExample());
        res.setHeader('Content-Type', 'application/json');
        res.setBody(js);
        expectedResponse = OASComDayCqWcmCoreWCMRequestFilterIn.getExample();
        response = (OASComDayCqWcmCoreWCMRequestFilterIn) api.comDayCqWcmCoreWCMRequestFilter(params);
        System.assertEquals(expectedResponse, response);
    }

    /**
     * 
     *
     * 
     */
    @isTest
    private static void comDayCqWcmDesignimporterDesignPackageImporterTest() {
        HttpResponse res = new HttpResponse();
        res.setStatusCode(200);
        res.setStatus('OK');
        Test.setMock(HttpCalloutMock.class, new OASResponseMock(res));

        Map<String, Object> params = new Map<String, Object>{
            'post' => Boolean.getExample(),
            'apply' => Boolean.getExample(),
            'r_delete' => Boolean.getExample(),
            'action' => 'null',
            'location' => 'null',
            'propertylist' => new List<String>{''},
            'extractFilter' => new List<String>{''}
        };

        OASClient client;
        OASConfigmgrApi api;
        OASComDayCqWcmDesignimporterDesignPa response;
        OASComDayCqWcmDesignimporterDesignPa expectedResponse;
        String js = '';

        client = new OASClient();
        api = new OASConfigmgrApi(client);

        js = JSON.serialize(OASComDayCqWcmDesignimporterDesignPa.getExample());
        res.setHeader('Content-Type', 'application/json');
        res.setBody(js);
        expectedResponse = OASComDayCqWcmDesignimporterDesignPa.getExample();
        response = (OASComDayCqWcmDesignimporterDesignPa) api.comDayCqWcmDesignimporterDesignPackageImporter(params);
        System.assertEquals(expectedResponse, response);
    }

    /**
     * 
     *
     * 
     */
    @isTest
    private static void comDayCqWcmDesignimporterImplCanvasBuilderImplTest() {
        HttpResponse res = new HttpResponse();
        res.setStatusCode(200);
        res.setStatus('OK');
        Test.setMock(HttpCalloutMock.class, new OASResponseMock(res));

        Map<String, Object> params = new Map<String, Object>{
            'post' => Boolean.getExample(),
            'apply' => Boolean.getExample(),
            'r_delete' => Boolean.getExample(),
            'action' => 'null',
            'location' => 'null',
            'propertylist' => new List<String>{''},
            'filepattern' => 'null',
            'buildPageNodes' => Boolean.getExample(),
            'buildClientLibs' => Boolean.getExample(),
            'buildCanvasComponent' => Boolean.getExample()
        };

        OASClient client;
        OASConfigmgrApi api;
        OASComDayCqWcmDesignimporterImplCanv response;
        OASComDayCqWcmDesignimporterImplCanv expectedResponse;
        String js = '';

        client = new OASClient();
        api = new OASConfigmgrApi(client);

        js = JSON.serialize(OASComDayCqWcmDesignimporterImplCanv.getExample());
        res.setHeader('Content-Type', 'application/json');
        res.setBody(js);
        expectedResponse = OASComDayCqWcmDesignimporterImplCanv.getExample();
        response = (OASComDayCqWcmDesignimporterImplCanv) api.comDayCqWcmDesignimporterImplCanvasBuilderImpl(params);
        System.assertEquals(expectedResponse, response);
    }

    /**
     * 
     *
     * 
     */
    @isTest
    private static void comDayCqWcmDesignimporterImplCanvasPageDeleteHandlerTest() {
        HttpResponse res = new HttpResponse();
        res.setStatusCode(200);
        res.setStatus('OK');
        Test.setMock(HttpCalloutMock.class, new OASResponseMock(res));

        Map<String, Object> params = new Map<String, Object>{
            'post' => Boolean.getExample(),
            'apply' => Boolean.getExample(),
            'r_delete' => Boolean.getExample(),
            'action' => 'null',
            'location' => 'null',
            'propertylist' => new List<String>{''},
            'minThreadPoolSize' => Integer.getExample(),
            'maxThreadPoolSize' => Integer.getExample()
        };

        OASClient client;
        OASConfigmgrApi api;
        OASComDayCqWcmDesignimporterImplCanv response;
        OASComDayCqWcmDesignimporterImplCanv expectedResponse;
        String js = '';

        client = new OASClient();
        api = new OASConfigmgrApi(client);

        js = JSON.serialize(OASComDayCqWcmDesignimporterImplCanv.getExample());
        res.setHeader('Content-Type', 'application/json');
        res.setBody(js);
        expectedResponse = OASComDayCqWcmDesignimporterImplCanv.getExample();
        response = (OASComDayCqWcmDesignimporterImplCanv) api.comDayCqWcmDesignimporterImplCanvasPageDeleteHandler(params);
        System.assertEquals(expectedResponse, response);
    }

    /**
     * 
     *
     * 
     */
    @isTest
    private static void comDayCqWcmDesignimporterImplEntryPreprocessorImplTest() {
        HttpResponse res = new HttpResponse();
        res.setStatusCode(200);
        res.setStatus('OK');
        Test.setMock(HttpCalloutMock.class, new OASResponseMock(res));

        Map<String, Object> params = new Map<String, Object>{
            'post' => Boolean.getExample(),
            'apply' => Boolean.getExample(),
            'r_delete' => Boolean.getExample(),
            'action' => 'null',
            'location' => 'null',
            'propertylist' => new List<String>{''},
            'searchPattern' => 'null',
            'replacePattern' => 'null'
        };

        OASClient client;
        OASConfigmgrApi api;
        OASComDayCqWcmDesignimporterImplEntr response;
        OASComDayCqWcmDesignimporterImplEntr expectedResponse;
        String js = '';

        client = new OASClient();
        api = new OASConfigmgrApi(client);

        js = JSON.serialize(OASComDayCqWcmDesignimporterImplEntr.getExample());
        res.setHeader('Content-Type', 'application/json');
        res.setBody(js);
        expectedResponse = OASComDayCqWcmDesignimporterImplEntr.getExample();
        response = (OASComDayCqWcmDesignimporterImplEntr) api.comDayCqWcmDesignimporterImplEntryPreprocessorImpl(params);
        System.assertEquals(expectedResponse, response);
    }

    /**
     * 
     *
     * 
     */
    @isTest
    private static void comDayCqWcmDesignimporterImplMobileCanvasBuilderImplTest() {
        HttpResponse res = new HttpResponse();
        res.setStatusCode(200);
        res.setStatus('OK');
        Test.setMock(HttpCalloutMock.class, new OASResponseMock(res));

        Map<String, Object> params = new Map<String, Object>{
            'post' => Boolean.getExample(),
            'apply' => Boolean.getExample(),
            'r_delete' => Boolean.getExample(),
            'action' => 'null',
            'location' => 'null',
            'propertylist' => new List<String>{''},
            'filepattern' => 'null',
            'deviceGroups' => new List<String>{''},
            'buildPageNodes' => Boolean.getExample(),
            'buildClientLibs' => Boolean.getExample(),
            'buildCanvasComponent' => Boolean.getExample()
        };

        OASClient client;
        OASConfigmgrApi api;
        OASComDayCqWcmDesignimporterImplMobi response;
        OASComDayCqWcmDesignimporterImplMobi expectedResponse;
        String js = '';

        client = new OASClient();
        api = new OASConfigmgrApi(client);

        js = JSON.serialize(OASComDayCqWcmDesignimporterImplMobi.getExample());
        res.setHeader('Content-Type', 'application/json');
        res.setBody(js);
        expectedResponse = OASComDayCqWcmDesignimporterImplMobi.getExample();
        response = (OASComDayCqWcmDesignimporterImplMobi) api.comDayCqWcmDesignimporterImplMobileCanvasBuilderImpl(params);
        System.assertEquals(expectedResponse, response);
    }

    /**
     * 
     *
     * 
     */
    @isTest
    private static void comDayCqWcmDesignimporterParserTaghandlersFactoryCanvasComponeTest() {
        HttpResponse res = new HttpResponse();
        res.setStatusCode(200);
        res.setStatus('OK');
        Test.setMock(HttpCalloutMock.class, new OASResponseMock(res));

        Map<String, Object> params = new Map<String, Object>{
            'post' => Boolean.getExample(),
            'apply' => Boolean.getExample(),
            'r_delete' => Boolean.getExample(),
            'action' => 'null',
            'location' => 'null',
            'propertylist' => new List<String>{''},
            'serviceRanking' => Integer.getExample(),
            'tagpattern' => 'null'
        };

        OASClient client;
        OASConfigmgrApi api;
        OASComDayCqWcmDesignimporterParserTa response;
        OASComDayCqWcmDesignimporterParserTa expectedResponse;
        String js = '';

        client = new OASClient();
        api = new OASConfigmgrApi(client);

        js = JSON.serialize(OASComDayCqWcmDesignimporterParserTa.getExample());
        res.setHeader('Content-Type', 'application/json');
        res.setBody(js);
        expectedResponse = OASComDayCqWcmDesignimporterParserTa.getExample();
        response = (OASComDayCqWcmDesignimporterParserTa) api.comDayCqWcmDesignimporterParserTaghandlersFactoryCanvasCompone(params);
        System.assertEquals(expectedResponse, response);
    }

    /**
     * 
     *
     * 
     */
    @isTest
    private static void comDayCqWcmDesignimporterParserTaghandlersFactoryDefaultComponTest() {
        HttpResponse res = new HttpResponse();
        res.setStatusCode(200);
        res.setStatus('OK');
        Test.setMock(HttpCalloutMock.class, new OASResponseMock(res));

        Map<String, Object> params = new Map<String, Object>{
            'post' => Boolean.getExample(),
            'apply' => Boolean.getExample(),
            'r_delete' => Boolean.getExample(),
            'action' => 'null',
            'location' => 'null',
            'propertylist' => new List<String>{''},
            'serviceRanking' => Integer.getExample(),
            'tagpattern' => 'null'
        };

        OASClient client;
        OASConfigmgrApi api;
        OASComDayCqWcmDesignimporterParserTa response;
        OASComDayCqWcmDesignimporterParserTa expectedResponse;
        String js = '';

        client = new OASClient();
        api = new OASConfigmgrApi(client);

        js = JSON.serialize(OASComDayCqWcmDesignimporterParserTa.getExample());
        res.setHeader('Content-Type', 'application/json');
        res.setBody(js);
        expectedResponse = OASComDayCqWcmDesignimporterParserTa.getExample();
        response = (OASComDayCqWcmDesignimporterParserTa) api.comDayCqWcmDesignimporterParserTaghandlersFactoryDefaultCompon(params);
        System.assertEquals(expectedResponse, response);
    }

    /**
     * 
     *
     * 
     */
    @isTest
    private static void comDayCqWcmDesignimporterParserTaghandlersFactoryDefaultTagHanTest() {
        HttpResponse res = new HttpResponse();
        res.setStatusCode(200);
        res.setStatus('OK');
        Test.setMock(HttpCalloutMock.class, new OASResponseMock(res));

        Map<String, Object> params = new Map<String, Object>{
            'post' => Boolean.getExample(),
            'apply' => Boolean.getExample(),
            'r_delete' => Boolean.getExample(),
            'action' => 'null',
            'location' => 'null',
            'propertylist' => new List<String>{''},
            'serviceRanking' => Integer.getExample(),
            'tagpattern' => 'null'
        };

        OASClient client;
        OASConfigmgrApi api;
        OASComDayCqWcmDesignimporterParserTa response;
        OASComDayCqWcmDesignimporterParserTa expectedResponse;
        String js = '';

        client = new OASClient();
        api = new OASConfigmgrApi(client);

        js = JSON.serialize(OASComDayCqWcmDesignimporterParserTa.getExample());
        res.setHeader('Content-Type', 'application/json');
        res.setBody(js);
        expectedResponse = OASComDayCqWcmDesignimporterParserTa.getExample();
        response = (OASComDayCqWcmDesignimporterParserTa) api.comDayCqWcmDesignimporterParserTaghandlersFactoryDefaultTagHan(params);
        System.assertEquals(expectedResponse, response);
    }

    /**
     * 
     *
     * 
     */
    @isTest
    private static void comDayCqWcmDesignimporterParserTaghandlersFactoryHeadTagHandleTest() {
        HttpResponse res = new HttpResponse();
        res.setStatusCode(200);
        res.setStatus('OK');
        Test.setMock(HttpCalloutMock.class, new OASResponseMock(res));

        Map<String, Object> params = new Map<String, Object>{
            'post' => Boolean.getExample(),
            'apply' => Boolean.getExample(),
            'r_delete' => Boolean.getExample(),
            'action' => 'null',
            'location' => 'null',
            'propertylist' => new List<String>{''},
            'serviceRanking' => Integer.getExample(),
            'tagpattern' => 'null'
        };

        OASClient client;
        OASConfigmgrApi api;
        OASComDayCqWcmDesignimporterParserTa response;
        OASComDayCqWcmDesignimporterParserTa expectedResponse;
        String js = '';

        client = new OASClient();
        api = new OASConfigmgrApi(client);

        js = JSON.serialize(OASComDayCqWcmDesignimporterParserTa.getExample());
        res.setHeader('Content-Type', 'application/json');
        res.setBody(js);
        expectedResponse = OASComDayCqWcmDesignimporterParserTa.getExample();
        response = (OASComDayCqWcmDesignimporterParserTa) api.comDayCqWcmDesignimporterParserTaghandlersFactoryHeadTagHandle(params);
        System.assertEquals(expectedResponse, response);
    }

    /**
     * 
     *
     * 
     */
    @isTest
    private static void comDayCqWcmDesignimporterParserTaghandlersFactoryIFrameTagHandTest() {
        HttpResponse res = new HttpResponse();
        res.setStatusCode(200);
        res.setStatus('OK');
        Test.setMock(HttpCalloutMock.class, new OASResponseMock(res));

        Map<String, Object> params = new Map<String, Object>{
            'post' => Boolean.getExample(),
            'apply' => Boolean.getExample(),
            'r_delete' => Boolean.getExample(),
            'action' => 'null',
            'location' => 'null',
            'propertylist' => new List<String>{''},
            'serviceRanking' => Integer.getExample(),
            'tagpattern' => 'null'
        };

        OASClient client;
        OASConfigmgrApi api;
        OASComDayCqWcmDesignimporterParserTa response;
        OASComDayCqWcmDesignimporterParserTa expectedResponse;
        String js = '';

        client = new OASClient();
        api = new OASConfigmgrApi(client);

        js = JSON.serialize(OASComDayCqWcmDesignimporterParserTa.getExample());
        res.setHeader('Content-Type', 'application/json');
        res.setBody(js);
        expectedResponse = OASComDayCqWcmDesignimporterParserTa.getExample();
        response = (OASComDayCqWcmDesignimporterParserTa) api.comDayCqWcmDesignimporterParserTaghandlersFactoryIFrameTagHand(params);
        System.assertEquals(expectedResponse, response);
    }

    /**
     * 
     *
     * 
     */
    @isTest
    private static void comDayCqWcmDesignimporterParserTaghandlersFactoryImageComponenTest() {
        HttpResponse res = new HttpResponse();
        res.setStatusCode(200);
        res.setStatus('OK');
        Test.setMock(HttpCalloutMock.class, new OASResponseMock(res));

        Map<String, Object> params = new Map<String, Object>{
            'post' => Boolean.getExample(),
            'apply' => Boolean.getExample(),
            'r_delete' => Boolean.getExample(),
            'action' => 'null',
            'location' => 'null',
            'propertylist' => new List<String>{''},
            'serviceRanking' => Integer.getExample(),
            'tagpattern' => 'null',
            'componentResourceType' => 'null'
        };

        OASClient client;
        OASConfigmgrApi api;
        OASComDayCqWcmDesignimporterParserTa response;
        OASComDayCqWcmDesignimporterParserTa expectedResponse;
        String js = '';

        client = new OASClient();
        api = new OASConfigmgrApi(client);

        js = JSON.serialize(OASComDayCqWcmDesignimporterParserTa.getExample());
        res.setHeader('Content-Type', 'application/json');
        res.setBody(js);
        expectedResponse = OASComDayCqWcmDesignimporterParserTa.getExample();
        response = (OASComDayCqWcmDesignimporterParserTa) api.comDayCqWcmDesignimporterParserTaghandlersFactoryImageComponen(params);
        System.assertEquals(expectedResponse, response);
    }

    /**
     * 
     *
     * 
     */
    @isTest
    private static void comDayCqWcmDesignimporterParserTaghandlersFactoryImgTagHandlerTest() {
        HttpResponse res = new HttpResponse();
        res.setStatusCode(200);
        res.setStatus('OK');
        Test.setMock(HttpCalloutMock.class, new OASResponseMock(res));

        Map<String, Object> params = new Map<String, Object>{
            'post' => Boolean.getExample(),
            'apply' => Boolean.getExample(),
            'r_delete' => Boolean.getExample(),
            'action' => 'null',
            'location' => 'null',
            'propertylist' => new List<String>{''},
            'serviceRanking' => Integer.getExample(),
            'tagpattern' => 'null'
        };

        OASClient client;
        OASConfigmgrApi api;
        OASComDayCqWcmDesignimporterParserTa response;
        OASComDayCqWcmDesignimporterParserTa expectedResponse;
        String js = '';

        client = new OASClient();
        api = new OASConfigmgrApi(client);

        js = JSON.serialize(OASComDayCqWcmDesignimporterParserTa.getExample());
        res.setHeader('Content-Type', 'application/json');
        res.setBody(js);
        expectedResponse = OASComDayCqWcmDesignimporterParserTa.getExample();
        response = (OASComDayCqWcmDesignimporterParserTa) api.comDayCqWcmDesignimporterParserTaghandlersFactoryImgTagHandler(params);
        System.assertEquals(expectedResponse, response);
    }

    /**
     * 
     *
     * 
     */
    @isTest
    private static void comDayCqWcmDesignimporterParserTaghandlersFactoryInlineScriptTTest() {
        HttpResponse res = new HttpResponse();
        res.setStatusCode(200);
        res.setStatus('OK');
        Test.setMock(HttpCalloutMock.class, new OASResponseMock(res));

        Map<String, Object> params = new Map<String, Object>{
            'post' => Boolean.getExample(),
            'apply' => Boolean.getExample(),
            'r_delete' => Boolean.getExample(),
            'action' => 'null',
            'location' => 'null',
            'propertylist' => new List<String>{''},
            'serviceRanking' => Integer.getExample(),
            'tagpattern' => 'null'
        };

        OASClient client;
        OASConfigmgrApi api;
        OASComDayCqWcmDesignimporterParserTa response;
        OASComDayCqWcmDesignimporterParserTa expectedResponse;
        String js = '';

        client = new OASClient();
        api = new OASConfigmgrApi(client);

        js = JSON.serialize(OASComDayCqWcmDesignimporterParserTa.getExample());
        res.setHeader('Content-Type', 'application/json');
        res.setBody(js);
        expectedResponse = OASComDayCqWcmDesignimporterParserTa.getExample();
        response = (OASComDayCqWcmDesignimporterParserTa) api.comDayCqWcmDesignimporterParserTaghandlersFactoryInlineScriptT(params);
        System.assertEquals(expectedResponse, response);
    }

    /**
     * 
     *
     * 
     */
    @isTest
    private static void comDayCqWcmDesignimporterParserTaghandlersFactoryLinkTagHandleTest() {
        HttpResponse res = new HttpResponse();
        res.setStatusCode(200);
        res.setStatus('OK');
        Test.setMock(HttpCalloutMock.class, new OASResponseMock(res));

        Map<String, Object> params = new Map<String, Object>{
            'post' => Boolean.getExample(),
            'apply' => Boolean.getExample(),
            'r_delete' => Boolean.getExample(),
            'action' => 'null',
            'location' => 'null',
            'propertylist' => new List<String>{''},
            'serviceRanking' => Integer.getExample(),
            'tagpattern' => 'null'
        };

        OASClient client;
        OASConfigmgrApi api;
        OASComDayCqWcmDesignimporterParserTa response;
        OASComDayCqWcmDesignimporterParserTa expectedResponse;
        String js = '';

        client = new OASClient();
        api = new OASConfigmgrApi(client);

        js = JSON.serialize(OASComDayCqWcmDesignimporterParserTa.getExample());
        res.setHeader('Content-Type', 'application/json');
        res.setBody(js);
        expectedResponse = OASComDayCqWcmDesignimporterParserTa.getExample();
        response = (OASComDayCqWcmDesignimporterParserTa) api.comDayCqWcmDesignimporterParserTaghandlersFactoryLinkTagHandle(params);
        System.assertEquals(expectedResponse, response);
    }

    /**
     * 
     *
     * 
     */
    @isTest
    private static void comDayCqWcmDesignimporterParserTaghandlersFactoryMetaTagHandleTest() {
        HttpResponse res = new HttpResponse();
        res.setStatusCode(200);
        res.setStatus('OK');
        Test.setMock(HttpCalloutMock.class, new OASResponseMock(res));

        Map<String, Object> params = new Map<String, Object>{
            'post' => Boolean.getExample(),
            'apply' => Boolean.getExample(),
            'r_delete' => Boolean.getExample(),
            'action' => 'null',
            'location' => 'null',
            'propertylist' => new List<String>{''},
            'serviceRanking' => Integer.getExample(),
            'tagpattern' => 'null'
        };

        OASClient client;
        OASConfigmgrApi api;
        OASComDayCqWcmDesignimporterParserTa response;
        OASComDayCqWcmDesignimporterParserTa expectedResponse;
        String js = '';

        client = new OASClient();
        api = new OASConfigmgrApi(client);

        js = JSON.serialize(OASComDayCqWcmDesignimporterParserTa.getExample());
        res.setHeader('Content-Type', 'application/json');
        res.setBody(js);
        expectedResponse = OASComDayCqWcmDesignimporterParserTa.getExample();
        response = (OASComDayCqWcmDesignimporterParserTa) api.comDayCqWcmDesignimporterParserTaghandlersFactoryMetaTagHandle(params);
        System.assertEquals(expectedResponse, response);
    }

    /**
     * 
     *
     * 
     */
    @isTest
    private static void comDayCqWcmDesignimporterParserTaghandlersFactoryNonScriptTagHTest() {
        HttpResponse res = new HttpResponse();
        res.setStatusCode(200);
        res.setStatus('OK');
        Test.setMock(HttpCalloutMock.class, new OASResponseMock(res));

        Map<String, Object> params = new Map<String, Object>{
            'post' => Boolean.getExample(),
            'apply' => Boolean.getExample(),
            'r_delete' => Boolean.getExample(),
            'action' => 'null',
            'location' => 'null',
            'propertylist' => new List<String>{''},
            'serviceRanking' => Integer.getExample(),
            'tagpattern' => 'null'
        };

        OASClient client;
        OASConfigmgrApi api;
        OASComDayCqWcmDesignimporterParserTa response;
        OASComDayCqWcmDesignimporterParserTa expectedResponse;
        String js = '';

        client = new OASClient();
        api = new OASConfigmgrApi(client);

        js = JSON.serialize(OASComDayCqWcmDesignimporterParserTa.getExample());
        res.setHeader('Content-Type', 'application/json');
        res.setBody(js);
        expectedResponse = OASComDayCqWcmDesignimporterParserTa.getExample();
        response = (OASComDayCqWcmDesignimporterParserTa) api.comDayCqWcmDesignimporterParserTaghandlersFactoryNonScriptTagH(params);
        System.assertEquals(expectedResponse, response);
    }

    /**
     * 
     *
     * 
     */
    @isTest
    private static void comDayCqWcmDesignimporterParserTaghandlersFactoryParsysComponeTest() {
        HttpResponse res = new HttpResponse();
        res.setStatusCode(200);
        res.setStatus('OK');
        Test.setMock(HttpCalloutMock.class, new OASResponseMock(res));

        Map<String, Object> params = new Map<String, Object>{
            'post' => Boolean.getExample(),
            'apply' => Boolean.getExample(),
            'r_delete' => Boolean.getExample(),
            'action' => 'null',
            'location' => 'null',
            'propertylist' => new List<String>{''},
            'serviceRanking' => Integer.getExample(),
            'tagpattern' => 'null',
            'componentResourceType' => 'null'
        };

        OASClient client;
        OASConfigmgrApi api;
        OASComDayCqWcmDesignimporterParserTa response;
        OASComDayCqWcmDesignimporterParserTa expectedResponse;
        String js = '';

        client = new OASClient();
        api = new OASConfigmgrApi(client);

        js = JSON.serialize(OASComDayCqWcmDesignimporterParserTa.getExample());
        res.setHeader('Content-Type', 'application/json');
        res.setBody(js);
        expectedResponse = OASComDayCqWcmDesignimporterParserTa.getExample();
        response = (OASComDayCqWcmDesignimporterParserTa) api.comDayCqWcmDesignimporterParserTaghandlersFactoryParsysCompone(params);
        System.assertEquals(expectedResponse, response);
    }

    /**
     * 
     *
     * 
     */
    @isTest
    private static void comDayCqWcmDesignimporterParserTaghandlersFactoryScriptTagHandTest() {
        HttpResponse res = new HttpResponse();
        res.setStatusCode(200);
        res.setStatus('OK');
        Test.setMock(HttpCalloutMock.class, new OASResponseMock(res));

        Map<String, Object> params = new Map<String, Object>{
            'post' => Boolean.getExample(),
            'apply' => Boolean.getExample(),
            'r_delete' => Boolean.getExample(),
            'action' => 'null',
            'location' => 'null',
            'propertylist' => new List<String>{''},
            'serviceRanking' => Integer.getExample(),
            'tagpattern' => 'null'
        };

        OASClient client;
        OASConfigmgrApi api;
        OASComDayCqWcmDesignimporterParserTa response;
        OASComDayCqWcmDesignimporterParserTa expectedResponse;
        String js = '';

        client = new OASClient();
        api = new OASConfigmgrApi(client);

        js = JSON.serialize(OASComDayCqWcmDesignimporterParserTa.getExample());
        res.setHeader('Content-Type', 'application/json');
        res.setBody(js);
        expectedResponse = OASComDayCqWcmDesignimporterParserTa.getExample();
        response = (OASComDayCqWcmDesignimporterParserTa) api.comDayCqWcmDesignimporterParserTaghandlersFactoryScriptTagHand(params);
        System.assertEquals(expectedResponse, response);
    }

    /**
     * 
     *
     * 
     */
    @isTest
    private static void comDayCqWcmDesignimporterParserTaghandlersFactoryStyleTagHandlTest() {
        HttpResponse res = new HttpResponse();
        res.setStatusCode(200);
        res.setStatus('OK');
        Test.setMock(HttpCalloutMock.class, new OASResponseMock(res));

        Map<String, Object> params = new Map<String, Object>{
            'post' => Boolean.getExample(),
            'apply' => Boolean.getExample(),
            'r_delete' => Boolean.getExample(),
            'action' => 'null',
            'location' => 'null',
            'propertylist' => new List<String>{''},
            'serviceRanking' => Integer.getExample(),
            'tagpattern' => 'null'
        };

        OASClient client;
        OASConfigmgrApi api;
        OASComDayCqWcmDesignimporterParserTa response;
        OASComDayCqWcmDesignimporterParserTa expectedResponse;
        String js = '';

        client = new OASClient();
        api = new OASConfigmgrApi(client);

        js = JSON.serialize(OASComDayCqWcmDesignimporterParserTa.getExample());
        res.setHeader('Content-Type', 'application/json');
        res.setBody(js);
        expectedResponse = OASComDayCqWcmDesignimporterParserTa.getExample();
        response = (OASComDayCqWcmDesignimporterParserTa) api.comDayCqWcmDesignimporterParserTaghandlersFactoryStyleTagHandl(params);
        System.assertEquals(expectedResponse, response);
    }

    /**
     * 
     *
     * 
     */
    @isTest
    private static void comDayCqWcmDesignimporterParserTaghandlersFactoryTextComponentTest() {
        HttpResponse res = new HttpResponse();
        res.setStatusCode(200);
        res.setStatus('OK');
        Test.setMock(HttpCalloutMock.class, new OASResponseMock(res));

        Map<String, Object> params = new Map<String, Object>{
            'post' => Boolean.getExample(),
            'apply' => Boolean.getExample(),
            'r_delete' => Boolean.getExample(),
            'action' => 'null',
            'location' => 'null',
            'propertylist' => new List<String>{''},
            'serviceRanking' => Integer.getExample(),
            'tagpattern' => 'null',
            'componentResourceType' => 'null'
        };

        OASClient client;
        OASConfigmgrApi api;
        OASComDayCqWcmDesignimporterParserTa response;
        OASComDayCqWcmDesignimporterParserTa expectedResponse;
        String js = '';

        client = new OASClient();
        api = new OASConfigmgrApi(client);

        js = JSON.serialize(OASComDayCqWcmDesignimporterParserTa.getExample());
        res.setHeader('Content-Type', 'application/json');
        res.setBody(js);
        expectedResponse = OASComDayCqWcmDesignimporterParserTa.getExample();
        response = (OASComDayCqWcmDesignimporterParserTa) api.comDayCqWcmDesignimporterParserTaghandlersFactoryTextComponent(params);
        System.assertEquals(expectedResponse, response);
    }

    /**
     * 
     *
     * 
     */
    @isTest
    private static void comDayCqWcmDesignimporterParserTaghandlersFactoryTitleComponenTest() {
        HttpResponse res = new HttpResponse();
        res.setStatusCode(200);
        res.setStatus('OK');
        Test.setMock(HttpCalloutMock.class, new OASResponseMock(res));

        Map<String, Object> params = new Map<String, Object>{
            'post' => Boolean.getExample(),
            'apply' => Boolean.getExample(),
            'r_delete' => Boolean.getExample(),
            'action' => 'null',
            'location' => 'null',
            'propertylist' => new List<String>{''},
            'serviceRanking' => Integer.getExample(),
            'tagpattern' => 'null',
            'componentResourceType' => 'null'
        };

        OASClient client;
        OASConfigmgrApi api;
        OASComDayCqWcmDesignimporterParserTa response;
        OASComDayCqWcmDesignimporterParserTa expectedResponse;
        String js = '';

        client = new OASClient();
        api = new OASConfigmgrApi(client);

        js = JSON.serialize(OASComDayCqWcmDesignimporterParserTa.getExample());
        res.setHeader('Content-Type', 'application/json');
        res.setBody(js);
        expectedResponse = OASComDayCqWcmDesignimporterParserTa.getExample();
        response = (OASComDayCqWcmDesignimporterParserTa) api.comDayCqWcmDesignimporterParserTaghandlersFactoryTitleComponen(params);
        System.assertEquals(expectedResponse, response);
    }

    /**
     * 
     *
     * 
     */
    @isTest
    private static void comDayCqWcmDesignimporterParserTaghandlersFactoryTitleTagHandlTest() {
        HttpResponse res = new HttpResponse();
        res.setStatusCode(200);
        res.setStatus('OK');
        Test.setMock(HttpCalloutMock.class, new OASResponseMock(res));

        Map<String, Object> params = new Map<String, Object>{
            'post' => Boolean.getExample(),
            'apply' => Boolean.getExample(),
            'r_delete' => Boolean.getExample(),
            'action' => 'null',
            'location' => 'null',
            'propertylist' => new List<String>{''},
            'serviceRanking' => Integer.getExample(),
            'tagpattern' => 'null'
        };

        OASClient client;
        OASConfigmgrApi api;
        OASComDayCqWcmDesignimporterParserTa response;
        OASComDayCqWcmDesignimporterParserTa expectedResponse;
        String js = '';

        client = new OASClient();
        api = new OASConfigmgrApi(client);

        js = JSON.serialize(OASComDayCqWcmDesignimporterParserTa.getExample());
        res.setHeader('Content-Type', 'application/json');
        res.setBody(js);
        expectedResponse = OASComDayCqWcmDesignimporterParserTa.getExample();
        response = (OASComDayCqWcmDesignimporterParserTa) api.comDayCqWcmDesignimporterParserTaghandlersFactoryTitleTagHandl(params);
        System.assertEquals(expectedResponse, response);
    }

    /**
     * 
     *
     * 
     */
    @isTest
    private static void comDayCqWcmFoundationFormsImplFormChooserServletTest() {
        HttpResponse res = new HttpResponse();
        res.setStatusCode(200);
        res.setStatus('OK');
        Test.setMock(HttpCalloutMock.class, new OASResponseMock(res));

        Map<String, Object> params = new Map<String, Object>{
            'post' => Boolean.getExample(),
            'apply' => Boolean.getExample(),
            'r_delete' => Boolean.getExample(),
            'action' => 'null',
            'location' => 'null',
            'propertylist' => new List<String>{''},
            'serviceName' => 'null',
            'slingServletResourceTypes' => 'null',
            'slingServletSelectors' => 'null',
            'slingServletMethods' => new List<String>{''},
            'formsFormchooserservletAdvansesearchRequire' => Boolean.getExample()
        };

        OASClient client;
        OASConfigmgrApi api;
        OASComDayCqWcmFoundationFormsImplFor response;
        OASComDayCqWcmFoundationFormsImplFor expectedResponse;
        String js = '';

        client = new OASClient();
        api = new OASConfigmgrApi(client);

        js = JSON.serialize(OASComDayCqWcmFoundationFormsImplFor.getExample());
        res.setHeader('Content-Type', 'application/json');
        res.setBody(js);
        expectedResponse = OASComDayCqWcmFoundationFormsImplFor.getExample();
        response = (OASComDayCqWcmFoundationFormsImplFor) api.comDayCqWcmFoundationFormsImplFormChooserServlet(params);
        System.assertEquals(expectedResponse, response);
    }

    /**
     * 
     *
     * 
     */
    @isTest
    private static void comDayCqWcmFoundationFormsImplFormParagraphPostProcessorTest() {
        HttpResponse res = new HttpResponse();
        res.setStatusCode(200);
        res.setStatus('OK');
        Test.setMock(HttpCalloutMock.class, new OASResponseMock(res));

        Map<String, Object> params = new Map<String, Object>{
            'post' => Boolean.getExample(),
            'apply' => Boolean.getExample(),
            'r_delete' => Boolean.getExample(),
            'action' => 'null',
            'location' => 'null',
            'propertylist' => new List<String>{''},
            'formsFormparagraphpostprocessorEnabled' => Boolean.getExample(),
            'formsFormparagraphpostprocessorFormresourcetypes' => new List<String>{''}
        };

        OASClient client;
        OASConfigmgrApi api;
        OASComDayCqWcmFoundationFormsImplFor response;
        OASComDayCqWcmFoundationFormsImplFor expectedResponse;
        String js = '';

        client = new OASClient();
        api = new OASConfigmgrApi(client);

        js = JSON.serialize(OASComDayCqWcmFoundationFormsImplFor.getExample());
        res.setHeader('Content-Type', 'application/json');
        res.setBody(js);
        expectedResponse = OASComDayCqWcmFoundationFormsImplFor.getExample();
        response = (OASComDayCqWcmFoundationFormsImplFor) api.comDayCqWcmFoundationFormsImplFormParagraphPostProcessor(params);
        System.assertEquals(expectedResponse, response);
    }

    /**
     * 
     *
     * 
     */
    @isTest
    private static void comDayCqWcmFoundationFormsImplFormsHandlingServletTest() {
        HttpResponse res = new HttpResponse();
        res.setStatusCode(200);
        res.setStatus('OK');
        Test.setMock(HttpCalloutMock.class, new OASResponseMock(res));

        Map<String, Object> params = new Map<String, Object>{
            'post' => Boolean.getExample(),
            'apply' => Boolean.getExample(),
            'r_delete' => Boolean.getExample(),
            'action' => 'null',
            'location' => 'null',
            'propertylist' => new List<String>{''},
            'nameWhitelist' => 'null',
            'allowExpressions' => Boolean.getExample()
        };

        OASClient client;
        OASConfigmgrApi api;
        OASComDayCqWcmFoundationFormsImplFor response;
        OASComDayCqWcmFoundationFormsImplFor expectedResponse;
        String js = '';

        client = new OASClient();
        api = new OASConfigmgrApi(client);

        js = JSON.serialize(OASComDayCqWcmFoundationFormsImplFor.getExample());
        res.setHeader('Content-Type', 'application/json');
        res.setBody(js);
        expectedResponse = OASComDayCqWcmFoundationFormsImplFor.getExample();
        response = (OASComDayCqWcmFoundationFormsImplFor) api.comDayCqWcmFoundationFormsImplFormsHandlingServlet(params);
        System.assertEquals(expectedResponse, response);
    }

    /**
     * 
     *
     * 
     */
    @isTest
    private static void comDayCqWcmFoundationFormsImplMailServletTest() {
        HttpResponse res = new HttpResponse();
        res.setStatusCode(200);
        res.setStatus('OK');
        Test.setMock(HttpCalloutMock.class, new OASResponseMock(res));

        Map<String, Object> params = new Map<String, Object>{
            'post' => Boolean.getExample(),
            'apply' => Boolean.getExample(),
            'r_delete' => Boolean.getExample(),
            'action' => 'null',
            'location' => 'null',
            'propertylist' => new List<String>{''},
            'slingServletResourceTypes' => 'null',
            'slingServletSelectors' => 'null',
            'resourceWhitelist' => new List<String>{''},
            'resourceBlacklist' => 'null'
        };

        OASClient client;
        OASConfigmgrApi api;
        OASComDayCqWcmFoundationFormsImplMai response;
        OASComDayCqWcmFoundationFormsImplMai expectedResponse;
        String js = '';

        client = new OASClient();
        api = new OASConfigmgrApi(client);

        js = JSON.serialize(OASComDayCqWcmFoundationFormsImplMai.getExample());
        res.setHeader('Content-Type', 'application/json');
        res.setBody(js);
        expectedResponse = OASComDayCqWcmFoundationFormsImplMai.getExample();
        response = (OASComDayCqWcmFoundationFormsImplMai) api.comDayCqWcmFoundationFormsImplMailServlet(params);
        System.assertEquals(expectedResponse, response);
    }

    /**
     * 
     *
     * 
     */
    @isTest
    private static void comDayCqWcmFoundationImplAdaptiveImageComponentServletTest() {
        HttpResponse res = new HttpResponse();
        res.setStatusCode(200);
        res.setStatus('OK');
        Test.setMock(HttpCalloutMock.class, new OASResponseMock(res));

        Map<String, Object> params = new Map<String, Object>{
            'post' => Boolean.getExample(),
            'apply' => Boolean.getExample(),
            'r_delete' => Boolean.getExample(),
            'action' => 'null',
            'location' => 'null',
            'propertylist' => new List<String>{''},
            'adaptSupportedWidths' => new List<String>{''}
        };

        OASClient client;
        OASConfigmgrApi api;
        OASComDayCqWcmFoundationImplAdaptive response;
        OASComDayCqWcmFoundationImplAdaptive expectedResponse;
        String js = '';

        client = new OASClient();
        api = new OASConfigmgrApi(client);

        js = JSON.serialize(OASComDayCqWcmFoundationImplAdaptive.getExample());
        res.setHeader('Content-Type', 'application/json');
        res.setBody(js);
        expectedResponse = OASComDayCqWcmFoundationImplAdaptive.getExample();
        response = (OASComDayCqWcmFoundationImplAdaptive) api.comDayCqWcmFoundationImplAdaptiveImageComponentServlet(params);
        System.assertEquals(expectedResponse, response);
    }

    /**
     * 
     *
     * 
     */
    @isTest
    private static void comDayCqWcmFoundationImplHTTPAuthHandlerTest() {
        HttpResponse res = new HttpResponse();
        res.setStatusCode(200);
        res.setStatus('OK');
        Test.setMock(HttpCalloutMock.class, new OASResponseMock(res));

        Map<String, Object> params = new Map<String, Object>{
            'post' => Boolean.getExample(),
            'apply' => Boolean.getExample(),
            'r_delete' => Boolean.getExample(),
            'action' => 'null',
            'location' => 'null',
            'propertylist' => new List<String>{''},
            'path' => 'null',
            'authHttpNologin' => Boolean.getExample(),
            'authHttpRealm' => 'null',
            'authDefaultLoginpage' => 'null',
            'authCredForm' => new List<String>{''},
            'authCredUtf8' => new List<String>{''}
        };

        OASClient client;
        OASConfigmgrApi api;
        OASComDayCqWcmFoundationImplHTTPAuth response;
        OASComDayCqWcmFoundationImplHTTPAuth expectedResponse;
        String js = '';

        client = new OASClient();
        api = new OASConfigmgrApi(client);

        js = JSON.serialize(OASComDayCqWcmFoundationImplHTTPAuth.getExample());
        res.setHeader('Content-Type', 'application/json');
        res.setBody(js);
        expectedResponse = OASComDayCqWcmFoundationImplHTTPAuth.getExample();
        response = (OASComDayCqWcmFoundationImplHTTPAuth) api.comDayCqWcmFoundationImplHTTPAuthHandler(params);
        System.assertEquals(expectedResponse, response);
    }

    /**
     * 
     *
     * 
     */
    @isTest
    private static void comDayCqWcmFoundationImplPageImpressionsTrackerTest() {
        HttpResponse res = new HttpResponse();
        res.setStatusCode(200);
        res.setStatus('OK');
        Test.setMock(HttpCalloutMock.class, new OASResponseMock(res));

        Map<String, Object> params = new Map<String, Object>{
            'post' => Boolean.getExample(),
            'apply' => Boolean.getExample(),
            'r_delete' => Boolean.getExample(),
            'action' => 'null',
            'location' => 'null',
            'propertylist' => new List<String>{''},
            'slingAuthRequirements' => 'null'
        };

        OASClient client;
        OASConfigmgrApi api;
        OASComDayCqWcmFoundationImplPageImpr response;
        OASComDayCqWcmFoundationImplPageImpr expectedResponse;
        String js = '';

        client = new OASClient();
        api = new OASConfigmgrApi(client);

        js = JSON.serialize(OASComDayCqWcmFoundationImplPageImpr.getExample());
        res.setHeader('Content-Type', 'application/json');
        res.setBody(js);
        expectedResponse = OASComDayCqWcmFoundationImplPageImpr.getExample();
        response = (OASComDayCqWcmFoundationImplPageImpr) api.comDayCqWcmFoundationImplPageImpressionsTracker(params);
        System.assertEquals(expectedResponse, response);
    }

    /**
     * 
     *
     * 
     */
    @isTest
    private static void comDayCqWcmFoundationImplPageRedirectServletTest() {
        HttpResponse res = new HttpResponse();
        res.setStatusCode(200);
        res.setStatus('OK');
        Test.setMock(HttpCalloutMock.class, new OASResponseMock(res));

        Map<String, Object> params = new Map<String, Object>{
            'post' => Boolean.getExample(),
            'apply' => Boolean.getExample(),
            'r_delete' => Boolean.getExample(),
            'action' => 'null',
            'location' => 'null',
            'propertylist' => new List<String>{''},
            'excludedResourceTypes' => new List<String>{''}
        };

        OASClient client;
        OASConfigmgrApi api;
        OASComDayCqWcmFoundationImplPageRedi response;
        OASComDayCqWcmFoundationImplPageRedi expectedResponse;
        String js = '';

        client = new OASClient();
        api = new OASConfigmgrApi(client);

        js = JSON.serialize(OASComDayCqWcmFoundationImplPageRedi.getExample());
        res.setHeader('Content-Type', 'application/json');
        res.setBody(js);
        expectedResponse = OASComDayCqWcmFoundationImplPageRedi.getExample();
        response = (OASComDayCqWcmFoundationImplPageRedi) api.comDayCqWcmFoundationImplPageRedirectServlet(params);
        System.assertEquals(expectedResponse, response);
    }

    /**
     * 
     *
     * 
     */
    @isTest
    private static void comDayCqWcmFoundationSecurityImplDefaultAttachmentTypeBlacklistTest() {
        HttpResponse res = new HttpResponse();
        res.setStatusCode(200);
        res.setStatus('OK');
        Test.setMock(HttpCalloutMock.class, new OASResponseMock(res));

        Map<String, Object> params = new Map<String, Object>{
            'post' => Boolean.getExample(),
            'apply' => Boolean.getExample(),
            'r_delete' => Boolean.getExample(),
            'action' => 'null',
            'location' => 'null',
            'propertylist' => new List<String>{''},
            'defaultAttachmentTypeBlacklist' => new List<String>{''},
            'baselineAttachmentTypeBlacklist' => new List<String>{''}
        };

        OASClient client;
        OASConfigmgrApi api;
        OASComDayCqWcmFoundationSecurityImpl response;
        OASComDayCqWcmFoundationSecurityImpl expectedResponse;
        String js = '';

        client = new OASClient();
        api = new OASConfigmgrApi(client);

        js = JSON.serialize(OASComDayCqWcmFoundationSecurityImpl.getExample());
        res.setHeader('Content-Type', 'application/json');
        res.setBody(js);
        expectedResponse = OASComDayCqWcmFoundationSecurityImpl.getExample();
        response = (OASComDayCqWcmFoundationSecurityImpl) api.comDayCqWcmFoundationSecurityImplDefaultAttachmentTypeBlacklist(params);
        System.assertEquals(expectedResponse, response);
    }

    /**
     * 
     *
     * 
     */
    @isTest
    private static void comDayCqWcmFoundationSecurityImplSaferSlingPostValidatorImplTest() {
        HttpResponse res = new HttpResponse();
        res.setStatusCode(200);
        res.setStatus('OK');
        Test.setMock(HttpCalloutMock.class, new OASResponseMock(res));

        Map<String, Object> params = new Map<String, Object>{
            'post' => Boolean.getExample(),
            'apply' => Boolean.getExample(),
            'r_delete' => Boolean.getExample(),
            'action' => 'null',
            'location' => 'null',
            'propertylist' => new List<String>{''},
            'parameterWhitelist' => new List<String>{''},
            'parameterWhitelistPrefixes' => new List<String>{''},
            'binaryParameterWhitelist' => new List<String>{''},
            'modifierWhitelist' => new List<String>{''},
            'operationWhitelist' => new List<String>{''},
            'operationWhitelistPrefixes' => new List<String>{''},
            'typehintWhitelist' => new List<String>{''},
            'resourcetypeWhitelist' => new List<String>{''}
        };

        OASClient client;
        OASConfigmgrApi api;
        OASComDayCqWcmFoundationSecurityImpl response;
        OASComDayCqWcmFoundationSecurityImpl expectedResponse;
        String js = '';

        client = new OASClient();
        api = new OASConfigmgrApi(client);

        js = JSON.serialize(OASComDayCqWcmFoundationSecurityImpl.getExample());
        res.setHeader('Content-Type', 'application/json');
        res.setBody(js);
        expectedResponse = OASComDayCqWcmFoundationSecurityImpl.getExample();
        response = (OASComDayCqWcmFoundationSecurityImpl) api.comDayCqWcmFoundationSecurityImplSaferSlingPostValidatorImpl(params);
        System.assertEquals(expectedResponse, response);
    }

    /**
     * 
     *
     * 
     */
    @isTest
    private static void comDayCqWcmMobileCoreImplDeviceDeviceInfoTransformerFactoryTest() {
        HttpResponse res = new HttpResponse();
        res.setStatusCode(200);
        res.setStatus('OK');
        Test.setMock(HttpCalloutMock.class, new OASResponseMock(res));

        Map<String, Object> params = new Map<String, Object>{
            'post' => Boolean.getExample(),
            'apply' => Boolean.getExample(),
            'r_delete' => Boolean.getExample(),
            'action' => 'null',
            'location' => 'null',
            'propertylist' => new List<String>{''},
            'deviceInfoTransformerEnabled' => Boolean.getExample(),
            'deviceInfoTransformerCssStyle' => 'null'
        };

        OASClient client;
        OASConfigmgrApi api;
        OASComDayCqWcmMobileCoreImplDeviceDe response;
        OASComDayCqWcmMobileCoreImplDeviceDe expectedResponse;
        String js = '';

        client = new OASClient();
        api = new OASConfigmgrApi(client);

        js = JSON.serialize(OASComDayCqWcmMobileCoreImplDeviceDe.getExample());
        res.setHeader('Content-Type', 'application/json');
        res.setBody(js);
        expectedResponse = OASComDayCqWcmMobileCoreImplDeviceDe.getExample();
        response = (OASComDayCqWcmMobileCoreImplDeviceDe) api.comDayCqWcmMobileCoreImplDeviceDeviceInfoTransformerFactory(params);
        System.assertEquals(expectedResponse, response);
    }

    /**
     * 
     *
     * 
     */
    @isTest
    private static void comDayCqWcmMobileCoreImplRedirectRedirectFilterTest() {
        HttpResponse res = new HttpResponse();
        res.setStatusCode(200);
        res.setStatus('OK');
        Test.setMock(HttpCalloutMock.class, new OASResponseMock(res));

        Map<String, Object> params = new Map<String, Object>{
            'post' => Boolean.getExample(),
            'apply' => Boolean.getExample(),
            'r_delete' => Boolean.getExample(),
            'action' => 'null',
            'location' => 'null',
            'propertylist' => new List<String>{''},
            'redirectEnabled' => Boolean.getExample(),
            'redirectStatsEnabled' => Boolean.getExample(),
            'redirectExtensions' => new List<String>{''},
            'redirectPaths' => new List<String>{''}
        };

        OASClient client;
        OASConfigmgrApi api;
        OASComDayCqWcmMobileCoreImplRedirect response;
        OASComDayCqWcmMobileCoreImplRedirect expectedResponse;
        String js = '';

        client = new OASClient();
        api = new OASConfigmgrApi(client);

        js = JSON.serialize(OASComDayCqWcmMobileCoreImplRedirect.getExample());
        res.setHeader('Content-Type', 'application/json');
        res.setBody(js);
        expectedResponse = OASComDayCqWcmMobileCoreImplRedirect.getExample();
        response = (OASComDayCqWcmMobileCoreImplRedirect) api.comDayCqWcmMobileCoreImplRedirectRedirectFilter(params);
        System.assertEquals(expectedResponse, response);
    }

    /**
     * 
     *
     * 
     */
    @isTest
    private static void comDayCqWcmMsmImplActionsContentCopyActionFactoryTest() {
        HttpResponse res = new HttpResponse();
        res.setStatusCode(200);
        res.setStatus('OK');
        Test.setMock(HttpCalloutMock.class, new OASResponseMock(res));

        Map<String, Object> params = new Map<String, Object>{
            'post' => Boolean.getExample(),
            'apply' => Boolean.getExample(),
            'r_delete' => Boolean.getExample(),
            'action' => 'null',
            'location' => 'null',
            'propertylist' => new List<String>{''},
            'cqWcmMsmActionExcludednodetypes' => new List<String>{''},
            'cqWcmMsmActionExcludedparagraphitems' => new List<String>{''},
            'cqWcmMsmActionExcludedprops' => new List<String>{''},
            'contentcopyactionOrderStyle' => 'null'
        };

        OASClient client;
        OASConfigmgrApi api;
        OASComDayCqWcmMsmImplActionsContentC response;
        OASComDayCqWcmMsmImplActionsContentC expectedResponse;
        String js = '';

        client = new OASClient();
        api = new OASConfigmgrApi(client);

        js = JSON.serialize(OASComDayCqWcmMsmImplActionsContentC.getExample());
        res.setHeader('Content-Type', 'application/json');
        res.setBody(js);
        expectedResponse = OASComDayCqWcmMsmImplActionsContentC.getExample();
        response = (OASComDayCqWcmMsmImplActionsContentC) api.comDayCqWcmMsmImplActionsContentCopyActionFactory(params);
        System.assertEquals(expectedResponse, response);
    }

    /**
     * 
     *
     * 
     */
    @isTest
    private static void comDayCqWcmMsmImplActionsContentDeleteActionFactoryTest() {
        HttpResponse res = new HttpResponse();
        res.setStatusCode(200);
        res.setStatus('OK');
        Test.setMock(HttpCalloutMock.class, new OASResponseMock(res));

        Map<String, Object> params = new Map<String, Object>{
            'post' => Boolean.getExample(),
            'apply' => Boolean.getExample(),
            'r_delete' => Boolean.getExample(),
            'action' => 'null',
            'location' => 'null',
            'propertylist' => new List<String>{''},
            'cqWcmMsmActionExcludednodetypes' => new List<String>{''},
            'cqWcmMsmActionExcludedparagraphitems' => new List<String>{''},
            'cqWcmMsmActionExcludedprops' => new List<String>{''}
        };

        OASClient client;
        OASConfigmgrApi api;
        OASComDayCqWcmMsmImplActionsContentD response;
        OASComDayCqWcmMsmImplActionsContentD expectedResponse;
        String js = '';

        client = new OASClient();
        api = new OASConfigmgrApi(client);

        js = JSON.serialize(OASComDayCqWcmMsmImplActionsContentD.getExample());
        res.setHeader('Content-Type', 'application/json');
        res.setBody(js);
        expectedResponse = OASComDayCqWcmMsmImplActionsContentD.getExample();
        response = (OASComDayCqWcmMsmImplActionsContentD) api.comDayCqWcmMsmImplActionsContentDeleteActionFactory(params);
        System.assertEquals(expectedResponse, response);
    }

    /**
     * 
     *
     * 
     */
    @isTest
    private static void comDayCqWcmMsmImplActionsContentUpdateActionFactoryTest() {
        HttpResponse res = new HttpResponse();
        res.setStatusCode(200);
        res.setStatus('OK');
        Test.setMock(HttpCalloutMock.class, new OASResponseMock(res));

        Map<String, Object> params = new Map<String, Object>{
            'post' => Boolean.getExample(),
            'apply' => Boolean.getExample(),
            'r_delete' => Boolean.getExample(),
            'action' => 'null',
            'location' => 'null',
            'propertylist' => new List<String>{''},
            'cqWcmMsmActionExcludednodetypes' => new List<String>{''},
            'cqWcmMsmActionExcludedparagraphitems' => new List<String>{''},
            'cqWcmMsmActionExcludedprops' => new List<String>{''},
            'cqWcmMsmActionIgnoredMixin' => new List<String>{''}
        };

        OASClient client;
        OASConfigmgrApi api;
        OASComDayCqWcmMsmImplActionsContentU response;
        OASComDayCqWcmMsmImplActionsContentU expectedResponse;
        String js = '';

        client = new OASClient();
        api = new OASConfigmgrApi(client);

        js = JSON.serialize(OASComDayCqWcmMsmImplActionsContentU.getExample());
        res.setHeader('Content-Type', 'application/json');
        res.setBody(js);
        expectedResponse = OASComDayCqWcmMsmImplActionsContentU.getExample();
        response = (OASComDayCqWcmMsmImplActionsContentU) api.comDayCqWcmMsmImplActionsContentUpdateActionFactory(params);
        System.assertEquals(expectedResponse, response);
    }

    /**
     * 
     *
     * 
     */
    @isTest
    private static void comDayCqWcmMsmImplActionsOrderChildrenActionFactoryTest() {
        HttpResponse res = new HttpResponse();
        res.setStatusCode(200);
        res.setStatus('OK');
        Test.setMock(HttpCalloutMock.class, new OASResponseMock(res));

        Map<String, Object> params = new Map<String, Object>{
            'post' => Boolean.getExample(),
            'apply' => Boolean.getExample(),
            'r_delete' => Boolean.getExample(),
            'action' => 'null',
            'location' => 'null',
            'propertylist' => new List<String>{''},
            'cqWcmMsmActionExcludednodetypes' => new List<String>{''},
            'cqWcmMsmActionExcludedparagraphitems' => new List<String>{''},
            'cqWcmMsmActionExcludedprops' => new List<String>{''}
        };

        OASClient client;
        OASConfigmgrApi api;
        OASComDayCqWcmMsmImplActionsOrderChi response;
        OASComDayCqWcmMsmImplActionsOrderChi expectedResponse;
        String js = '';

        client = new OASClient();
        api = new OASConfigmgrApi(client);

        js = JSON.serialize(OASComDayCqWcmMsmImplActionsOrderChi.getExample());
        res.setHeader('Content-Type', 'application/json');
        res.setBody(js);
        expectedResponse = OASComDayCqWcmMsmImplActionsOrderChi.getExample();
        response = (OASComDayCqWcmMsmImplActionsOrderChi) api.comDayCqWcmMsmImplActionsOrderChildrenActionFactory(params);
        System.assertEquals(expectedResponse, response);
    }

    /**
     * 
     *
     * 
     */
    @isTest
    private static void comDayCqWcmMsmImplActionsPageMoveActionFactoryTest() {
        HttpResponse res = new HttpResponse();
        res.setStatusCode(200);
        res.setStatus('OK');
        Test.setMock(HttpCalloutMock.class, new OASResponseMock(res));

        Map<String, Object> params = new Map<String, Object>{
            'post' => Boolean.getExample(),
            'apply' => Boolean.getExample(),
            'r_delete' => Boolean.getExample(),
            'action' => 'null',
            'location' => 'null',
            'propertylist' => new List<String>{''},
            'cqWcmMsmActionExcludednodetypes' => new List<String>{''},
            'cqWcmMsmActionExcludedparagraphitems' => new List<String>{''},
            'cqWcmMsmActionExcludedprops' => new List<String>{''},
            'cqWcmMsmImplActionsPagemovePropReferenceUpdate' => Boolean.getExample()
        };

        OASClient client;
        OASConfigmgrApi api;
        OASComDayCqWcmMsmImplActionsPageMove response;
        OASComDayCqWcmMsmImplActionsPageMove expectedResponse;
        String js = '';

        client = new OASClient();
        api = new OASConfigmgrApi(client);

        js = JSON.serialize(OASComDayCqWcmMsmImplActionsPageMove.getExample());
        res.setHeader('Content-Type', 'application/json');
        res.setBody(js);
        expectedResponse = OASComDayCqWcmMsmImplActionsPageMove.getExample();
        response = (OASComDayCqWcmMsmImplActionsPageMove) api.comDayCqWcmMsmImplActionsPageMoveActionFactory(params);
        System.assertEquals(expectedResponse, response);
    }

    /**
     * 
     *
     * 
     */
    @isTest
    private static void comDayCqWcmMsmImplActionsReferencesUpdateActionFactoryTest() {
        HttpResponse res = new HttpResponse();
        res.setStatusCode(200);
        res.setStatus('OK');
        Test.setMock(HttpCalloutMock.class, new OASResponseMock(res));

        Map<String, Object> params = new Map<String, Object>{
            'post' => Boolean.getExample(),
            'apply' => Boolean.getExample(),
            'r_delete' => Boolean.getExample(),
            'action' => 'null',
            'location' => 'null',
            'propertylist' => new List<String>{''},
            'cqWcmMsmActionExcludednodetypes' => new List<String>{''},
            'cqWcmMsmActionExcludedparagraphitems' => new List<String>{''},
            'cqWcmMsmActionExcludedprops' => new List<String>{''},
            'cqWcmMsmImplActionReferencesupdatePropUpdateNested' => Boolean.getExample()
        };

        OASClient client;
        OASConfigmgrApi api;
        OASComDayCqWcmMsmImplActionsReferenc response;
        OASComDayCqWcmMsmImplActionsReferenc expectedResponse;
        String js = '';

        client = new OASClient();
        api = new OASConfigmgrApi(client);

        js = JSON.serialize(OASComDayCqWcmMsmImplActionsReferenc.getExample());
        res.setHeader('Content-Type', 'application/json');
        res.setBody(js);
        expectedResponse = OASComDayCqWcmMsmImplActionsReferenc.getExample();
        response = (OASComDayCqWcmMsmImplActionsReferenc) api.comDayCqWcmMsmImplActionsReferencesUpdateActionFactory(params);
        System.assertEquals(expectedResponse, response);
    }

    /**
     * 
     *
     * 
     */
    @isTest
    private static void comDayCqWcmMsmImplActionsVersionCopyActionFactoryTest() {
        HttpResponse res = new HttpResponse();
        res.setStatusCode(200);
        res.setStatus('OK');
        Test.setMock(HttpCalloutMock.class, new OASResponseMock(res));

        Map<String, Object> params = new Map<String, Object>{
            'post' => Boolean.getExample(),
            'apply' => Boolean.getExample(),
            'r_delete' => Boolean.getExample(),
            'action' => 'null',
            'location' => 'null',
            'propertylist' => new List<String>{''},
            'cqWcmMsmActionExcludednodetypes' => new List<String>{''},
            'cqWcmMsmActionExcludedparagraphitems' => new List<String>{''},
            'cqWcmMsmActionExcludedprops' => new List<String>{''}
        };

        OASClient client;
        OASConfigmgrApi api;
        OASComDayCqWcmMsmImplActionsVersionC response;
        OASComDayCqWcmMsmImplActionsVersionC expectedResponse;
        String js = '';

        client = new OASClient();
        api = new OASConfigmgrApi(client);

        js = JSON.serialize(OASComDayCqWcmMsmImplActionsVersionC.getExample());
        res.setHeader('Content-Type', 'application/json');
        res.setBody(js);
        expectedResponse = OASComDayCqWcmMsmImplActionsVersionC.getExample();
        response = (OASComDayCqWcmMsmImplActionsVersionC) api.comDayCqWcmMsmImplActionsVersionCopyActionFactory(params);
        System.assertEquals(expectedResponse, response);
    }

    /**
     * 
     *
     * 
     */
    @isTest
    private static void comDayCqWcmMsmImplLiveRelationshipManagerImplTest() {
        HttpResponse res = new HttpResponse();
        res.setStatusCode(200);
        res.setStatus('OK');
        Test.setMock(HttpCalloutMock.class, new OASResponseMock(res));

        Map<String, Object> params = new Map<String, Object>{
            'post' => Boolean.getExample(),
            'apply' => Boolean.getExample(),
            'r_delete' => Boolean.getExample(),
            'action' => 'null',
            'location' => 'null',
            'propertylist' => new List<String>{''},
            'liverelationshipmgrRelationsconfigDefault' => 'null'
        };

        OASClient client;
        OASConfigmgrApi api;
        OASComDayCqWcmMsmImplLiveRelationshi response;
        OASComDayCqWcmMsmImplLiveRelationshi expectedResponse;
        String js = '';

        client = new OASClient();
        api = new OASConfigmgrApi(client);

        js = JSON.serialize(OASComDayCqWcmMsmImplLiveRelationshi.getExample());
        res.setHeader('Content-Type', 'application/json');
        res.setBody(js);
        expectedResponse = OASComDayCqWcmMsmImplLiveRelationshi.getExample();
        response = (OASComDayCqWcmMsmImplLiveRelationshi) api.comDayCqWcmMsmImplLiveRelationshipManagerImpl(params);
        System.assertEquals(expectedResponse, response);
    }

    /**
     * 
     *
     * 
     */
    @isTest
    private static void comDayCqWcmMsmImplRolloutManagerImplTest() {
        HttpResponse res = new HttpResponse();
        res.setStatusCode(200);
        res.setStatus('OK');
        Test.setMock(HttpCalloutMock.class, new OASResponseMock(res));

        Map<String, Object> params = new Map<String, Object>{
            'post' => Boolean.getExample(),
            'apply' => Boolean.getExample(),
            'r_delete' => Boolean.getExample(),
            'action' => 'null',
            'location' => 'null',
            'propertylist' => new List<String>{''},
            'eventFilter' => 'null',
            'rolloutmgrExcludedpropsDefault' => new List<String>{''},
            'rolloutmgrExcludedparagraphpropsDefault' => new List<String>{''},
            'rolloutmgrExcludednodetypesDefault' => new List<String>{''},
            'rolloutmgrThreadpoolMaxsize' => Integer.getExample(),
            'rolloutmgrThreadpoolMaxshutdowntime' => Integer.getExample(),
            'rolloutmgrThreadpoolPriority' => 'null',
            'rolloutmgrCommitSize' => Integer.getExample(),
            'rolloutmgrConflicthandlingEnabled' => Boolean.getExample()
        };

        OASClient client;
        OASConfigmgrApi api;
        OASComDayCqWcmMsmImplRolloutManagerI response;
        OASComDayCqWcmMsmImplRolloutManagerI expectedResponse;
        String js = '';

        client = new OASClient();
        api = new OASConfigmgrApi(client);

        js = JSON.serialize(OASComDayCqWcmMsmImplRolloutManagerI.getExample());
        res.setHeader('Content-Type', 'application/json');
        res.setBody(js);
        expectedResponse = OASComDayCqWcmMsmImplRolloutManagerI.getExample();
        response = (OASComDayCqWcmMsmImplRolloutManagerI) api.comDayCqWcmMsmImplRolloutManagerImpl(params);
        System.assertEquals(expectedResponse, response);
    }

    /**
     * 
     *
     * 
     */
    @isTest
    private static void comDayCqWcmMsmImplServletsAuditLogServletTest() {
        HttpResponse res = new HttpResponse();
        res.setStatusCode(200);
        res.setStatus('OK');
        Test.setMock(HttpCalloutMock.class, new OASResponseMock(res));

        Map<String, Object> params = new Map<String, Object>{
            'post' => Boolean.getExample(),
            'apply' => Boolean.getExample(),
            'r_delete' => Boolean.getExample(),
            'action' => 'null',
            'location' => 'null',
            'propertylist' => new List<String>{''},
            'auditlogservletDefaultEventsCount' => Integer.getExample(),
            'auditlogservletDefaultPath' => 'null'
        };

        OASClient client;
        OASConfigmgrApi api;
        OASComDayCqWcmMsmImplServletsAuditLo response;
        OASComDayCqWcmMsmImplServletsAuditLo expectedResponse;
        String js = '';

        client = new OASClient();
        api = new OASConfigmgrApi(client);

        js = JSON.serialize(OASComDayCqWcmMsmImplServletsAuditLo.getExample());
        res.setHeader('Content-Type', 'application/json');
        res.setBody(js);
        expectedResponse = OASComDayCqWcmMsmImplServletsAuditLo.getExample();
        response = (OASComDayCqWcmMsmImplServletsAuditLo) api.comDayCqWcmMsmImplServletsAuditLogServlet(params);
        System.assertEquals(expectedResponse, response);
    }

    /**
     * 
     *
     * 
     */
    @isTest
    private static void comDayCqWcmNotificationEmailImplEmailChannelTest() {
        HttpResponse res = new HttpResponse();
        res.setStatusCode(200);
        res.setStatus('OK');
        Test.setMock(HttpCalloutMock.class, new OASResponseMock(res));

        Map<String, Object> params = new Map<String, Object>{
            'post' => Boolean.getExample(),
            'apply' => Boolean.getExample(),
            'r_delete' => Boolean.getExample(),
            'action' => 'null',
            'location' => 'null',
            'propertylist' => new List<String>{''},
            'emailFrom' => 'null'
        };

        OASClient client;
        OASConfigmgrApi api;
        OASComDayCqWcmNotificationEmailImplE response;
        OASComDayCqWcmNotificationEmailImplE expectedResponse;
        String js = '';

        client = new OASClient();
        api = new OASConfigmgrApi(client);

        js = JSON.serialize(OASComDayCqWcmNotificationEmailImplE.getExample());
        res.setHeader('Content-Type', 'application/json');
        res.setBody(js);
        expectedResponse = OASComDayCqWcmNotificationEmailImplE.getExample();
        response = (OASComDayCqWcmNotificationEmailImplE) api.comDayCqWcmNotificationEmailImplEmailChannel(params);
        System.assertEquals(expectedResponse, response);
    }

    /**
     * 
     *
     * 
     */
    @isTest
    private static void comDayCqWcmNotificationImplNotificationManagerImplTest() {
        HttpResponse res = new HttpResponse();
        res.setStatusCode(200);
        res.setStatus('OK');
        Test.setMock(HttpCalloutMock.class, new OASResponseMock(res));

        Map<String, Object> params = new Map<String, Object>{
            'post' => Boolean.getExample(),
            'apply' => Boolean.getExample(),
            'r_delete' => Boolean.getExample(),
            'action' => 'null',
            'location' => 'null',
            'propertylist' => new List<String>{''},
            'eventTopics' => new List<String>{''}
        };

        OASClient client;
        OASConfigmgrApi api;
        OASComDayCqWcmNotificationImplNotifi response;
        OASComDayCqWcmNotificationImplNotifi expectedResponse;
        String js = '';

        client = new OASClient();
        api = new OASConfigmgrApi(client);

        js = JSON.serialize(OASComDayCqWcmNotificationImplNotifi.getExample());
        res.setHeader('Content-Type', 'application/json');
        res.setBody(js);
        expectedResponse = OASComDayCqWcmNotificationImplNotifi.getExample();
        response = (OASComDayCqWcmNotificationImplNotifi) api.comDayCqWcmNotificationImplNotificationManagerImpl(params);
        System.assertEquals(expectedResponse, response);
    }

    /**
     * 
     *
     * 
     */
    @isTest
    private static void comDayCqWcmScriptingImplBVPManagerTest() {
        HttpResponse res = new HttpResponse();
        res.setStatusCode(200);
        res.setStatus('OK');
        Test.setMock(HttpCalloutMock.class, new OASResponseMock(res));

        Map<String, Object> params = new Map<String, Object>{
            'post' => Boolean.getExample(),
            'apply' => Boolean.getExample(),
            'r_delete' => Boolean.getExample(),
            'action' => 'null',
            'location' => 'null',
            'propertylist' => new List<String>{''},
            'comDayCqWcmScriptingBvpScriptEngines' => new List<String>{''}
        };

        OASClient client;
        OASConfigmgrApi api;
        OASComDayCqWcmScriptingImplBVPManage response;
        OASComDayCqWcmScriptingImplBVPManage expectedResponse;
        String js = '';

        client = new OASClient();
        api = new OASConfigmgrApi(client);

        js = JSON.serialize(OASComDayCqWcmScriptingImplBVPManage.getExample());
        res.setHeader('Content-Type', 'application/json');
        res.setBody(js);
        expectedResponse = OASComDayCqWcmScriptingImplBVPManage.getExample();
        response = (OASComDayCqWcmScriptingImplBVPManage) api.comDayCqWcmScriptingImplBVPManager(params);
        System.assertEquals(expectedResponse, response);
    }

    /**
     * 
     *
     * 
     */
    @isTest
    private static void comDayCqWcmUndoUndoConfigTest() {
        HttpResponse res = new HttpResponse();
        res.setStatusCode(200);
        res.setStatus('OK');
        Test.setMock(HttpCalloutMock.class, new OASResponseMock(res));

        Map<String, Object> params = new Map<String, Object>{
            'post' => Boolean.getExample(),
            'apply' => Boolean.getExample(),
            'r_delete' => Boolean.getExample(),
            'action' => 'null',
            'location' => 'null',
            'propertylist' => new List<String>{''},
            'cqWcmUndoEnabled' => Boolean.getExample(),
            'cqWcmUndoPath' => 'null',
            'cqWcmUndoValidity' => Integer.getExample(),
            'cqWcmUndoSteps' => Integer.getExample(),
            'cqWcmUndoPersistence' => 'null',
            'cqWcmUndoPersistenceMode' => Boolean.getExample(),
            'cqWcmUndoMarkermode' => 'null',
            'cqWcmUndoWhitelist' => new List<String>{''},
            'cqWcmUndoBlacklist' => new List<String>{''}
        };

        OASClient client;
        OASConfigmgrApi api;
        OASComDayCqWcmUndoUndoConfigInfo response;
        OASComDayCqWcmUndoUndoConfigInfo expectedResponse;
        String js = '';

        client = new OASClient();
        api = new OASConfigmgrApi(client);

        js = JSON.serialize(OASComDayCqWcmUndoUndoConfigInfo.getExample());
        res.setHeader('Content-Type', 'application/json');
        res.setBody(js);
        expectedResponse = OASComDayCqWcmUndoUndoConfigInfo.getExample();
        response = (OASComDayCqWcmUndoUndoConfigInfo) api.comDayCqWcmUndoUndoConfig(params);
        System.assertEquals(expectedResponse, response);
    }

    /**
     * 
     *
     * 
     */
    @isTest
    private static void comDayCqWcmWebservicesupportImplReplicationEventListenerTest() {
        HttpResponse res = new HttpResponse();
        res.setStatusCode(200);
        res.setStatus('OK');
        Test.setMock(HttpCalloutMock.class, new OASResponseMock(res));

        Map<String, Object> params = new Map<String, Object>{
            'post' => Boolean.getExample(),
            'apply' => Boolean.getExample(),
            'r_delete' => Boolean.getExample(),
            'action' => 'null',
            'location' => 'null',
            'propertylist' => new List<String>{''},
            'flushAgents' => new List<String>{''}
        };

        OASClient client;
        OASConfigmgrApi api;
        OASComDayCqWcmWebservicesupportImplR response;
        OASComDayCqWcmWebservicesupportImplR expectedResponse;
        String js = '';

        client = new OASClient();
        api = new OASConfigmgrApi(client);

        js = JSON.serialize(OASComDayCqWcmWebservicesupportImplR.getExample());
        res.setHeader('Content-Type', 'application/json');
        res.setBody(js);
        expectedResponse = OASComDayCqWcmWebservicesupportImplR.getExample();
        response = (OASComDayCqWcmWebservicesupportImplR) api.comDayCqWcmWebservicesupportImplReplicationEventListener(params);
        System.assertEquals(expectedResponse, response);
    }

    /**
     * 
     *
     * 
     */
    @isTest
    private static void comDayCqWcmWorkflowImplWcmWorkflowServiceImplTest() {
        HttpResponse res = new HttpResponse();
        res.setStatusCode(200);
        res.setStatus('OK');
        Test.setMock(HttpCalloutMock.class, new OASResponseMock(res));

        Map<String, Object> params = new Map<String, Object>{
            'post' => Boolean.getExample(),
            'apply' => Boolean.getExample(),
            'r_delete' => Boolean.getExample(),
            'action' => 'null',
            'location' => 'null',
            'propertylist' => new List<String>{''},
            'eventFilter' => 'null',
            'minThreadPoolSize' => Integer.getExample(),
            'maxThreadPoolSize' => Integer.getExample(),
            'cqWcmWorkflowTerminateOnActivate' => Boolean.getExample(),
            'cqWcmWorklfowTerminateExclusionList' => new List<String>{''}
        };

        OASClient client;
        OASConfigmgrApi api;
        OASComDayCqWcmWorkflowImplWcmWorkflo response;
        OASComDayCqWcmWorkflowImplWcmWorkflo expectedResponse;
        String js = '';

        client = new OASClient();
        api = new OASConfigmgrApi(client);

        js = JSON.serialize(OASComDayCqWcmWorkflowImplWcmWorkflo.getExample());
        res.setHeader('Content-Type', 'application/json');
        res.setBody(js);
        expectedResponse = OASComDayCqWcmWorkflowImplWcmWorkflo.getExample();
        response = (OASComDayCqWcmWorkflowImplWcmWorkflo) api.comDayCqWcmWorkflowImplWcmWorkflowServiceImpl(params);
        System.assertEquals(expectedResponse, response);
    }

    /**
     * 
     *
     * 
     */
    @isTest
    private static void comDayCqWcmWorkflowImplWorkflowPackageInfoProviderTest() {
        HttpResponse res = new HttpResponse();
        res.setStatusCode(200);
        res.setStatus('OK');
        Test.setMock(HttpCalloutMock.class, new OASResponseMock(res));

        Map<String, Object> params = new Map<String, Object>{
            'post' => Boolean.getExample(),
            'apply' => Boolean.getExample(),
            'r_delete' => Boolean.getExample(),
            'action' => 'null',
            'location' => 'null',
            'propertylist' => new List<String>{''},
            'workflowpackageinfoproviderFilter' => new List<String>{''},
            'workflowpackageinfoproviderFilterRootpath' => 'null'
        };

        OASClient client;
        OASConfigmgrApi api;
        OASComDayCqWcmWorkflowImplWorkflowPa response;
        OASComDayCqWcmWorkflowImplWorkflowPa expectedResponse;
        String js = '';

        client = new OASClient();
        api = new OASConfigmgrApi(client);

        js = JSON.serialize(OASComDayCqWcmWorkflowImplWorkflowPa.getExample());
        res.setHeader('Content-Type', 'application/json');
        res.setBody(js);
        expectedResponse = OASComDayCqWcmWorkflowImplWorkflowPa.getExample();
        response = (OASComDayCqWcmWorkflowImplWorkflowPa) api.comDayCqWcmWorkflowImplWorkflowPackageInfoProvider(params);
        System.assertEquals(expectedResponse, response);
    }

    /**
     * 
     *
     * 
     */
    @isTest
    private static void comDayCqWidgetImplHtmlLibraryManagerImplTest() {
        HttpResponse res = new HttpResponse();
        res.setStatusCode(200);
        res.setStatus('OK');
        Test.setMock(HttpCalloutMock.class, new OASResponseMock(res));

        Map<String, Object> params = new Map<String, Object>{
            'post' => Boolean.getExample(),
            'apply' => Boolean.getExample(),
            'r_delete' => Boolean.getExample(),
            'action' => 'null',
            'location' => 'null',
            'propertylist' => new List<String>{''},
            'htmllibmanagerClientmanager' => 'null',
            'htmllibmanagerDebug' => Boolean.getExample(),
            'htmllibmanagerDebugConsole' => Boolean.getExample(),
            'htmllibmanagerDebugInitJs' => 'null',
            'htmllibmanagerDefaultthemename' => 'null',
            'htmllibmanagerDefaultuserthemename' => 'null',
            'htmllibmanagerFirebuglitePath' => 'null',
            'htmllibmanagerForceCQUrlInfo' => Boolean.getExample(),
            'htmllibmanagerGzip' => Boolean.getExample(),
            'htmllibmanagerMaxage' => Integer.getExample(),
            'htmllibmanagerMaxDataUriSize' => Integer.getExample(),
            'htmllibmanagerMinify' => Boolean.getExample(),
            'htmllibmanagerPathList' => new List<String>{''},
            'htmllibmanagerTiming' => Boolean.getExample()
        };

        OASClient client;
        OASConfigmgrApi api;
        OASComDayCqWidgetImplHtmlLibraryMana response;
        OASComDayCqWidgetImplHtmlLibraryMana expectedResponse;
        String js = '';

        client = new OASClient();
        api = new OASConfigmgrApi(client);

        js = JSON.serialize(OASComDayCqWidgetImplHtmlLibraryMana.getExample());
        res.setHeader('Content-Type', 'application/json');
        res.setBody(js);
        expectedResponse = OASComDayCqWidgetImplHtmlLibraryMana.getExample();
        response = (OASComDayCqWidgetImplHtmlLibraryMana) api.comDayCqWidgetImplHtmlLibraryManagerImpl(params);
        System.assertEquals(expectedResponse, response);
    }

    /**
     * 
     *
     * 
     */
    @isTest
    private static void comDayCqWidgetImplWidgetExtensionProviderImplTest() {
        HttpResponse res = new HttpResponse();
        res.setStatusCode(200);
        res.setStatus('OK');
        Test.setMock(HttpCalloutMock.class, new OASResponseMock(res));

        Map<String, Object> params = new Map<String, Object>{
            'post' => Boolean.getExample(),
            'apply' => Boolean.getExample(),
            'r_delete' => Boolean.getExample(),
            'action' => 'null',
            'location' => 'null',
            'propertylist' => new List<String>{''},
            'extendableWidgets' => new List<String>{''},
            'widgetextensionproviderDebug' => Boolean.getExample()
        };

        OASClient client;
        OASConfigmgrApi api;
        OASComDayCqWidgetImplWidgetExtension response;
        OASComDayCqWidgetImplWidgetExtension expectedResponse;
        String js = '';

        client = new OASClient();
        api = new OASConfigmgrApi(client);

        js = JSON.serialize(OASComDayCqWidgetImplWidgetExtension.getExample());
        res.setHeader('Content-Type', 'application/json');
        res.setBody(js);
        expectedResponse = OASComDayCqWidgetImplWidgetExtension.getExample();
        response = (OASComDayCqWidgetImplWidgetExtension) api.comDayCqWidgetImplWidgetExtensionProviderImpl(params);
        System.assertEquals(expectedResponse, response);
    }

    /**
     * 
     *
     * 
     */
    @isTest
    private static void comDayCqWorkflowImplEmailEMailNotificationServiceTest() {
        HttpResponse res = new HttpResponse();
        res.setStatusCode(200);
        res.setStatus('OK');
        Test.setMock(HttpCalloutMock.class, new OASResponseMock(res));

        Map<String, Object> params = new Map<String, Object>{
            'post' => Boolean.getExample(),
            'apply' => Boolean.getExample(),
            'r_delete' => Boolean.getExample(),
            'action' => 'null',
            'location' => 'null',
            'propertylist' => new List<String>{''},
            'fromAddress' => 'null',
            'hostPrefix' => 'null',
            'notifyOnabort' => Boolean.getExample(),
            'notifyOncomplete' => Boolean.getExample(),
            'notifyOncontainercomplete' => Boolean.getExample(),
            'notifyUseronly' => Boolean.getExample()
        };

        OASClient client;
        OASConfigmgrApi api;
        OASComDayCqWorkflowImplEmailEMailNot response;
        OASComDayCqWorkflowImplEmailEMailNot expectedResponse;
        String js = '';

        client = new OASClient();
        api = new OASConfigmgrApi(client);

        js = JSON.serialize(OASComDayCqWorkflowImplEmailEMailNot.getExample());
        res.setHeader('Content-Type', 'application/json');
        res.setBody(js);
        expectedResponse = OASComDayCqWorkflowImplEmailEMailNot.getExample();
        response = (OASComDayCqWorkflowImplEmailEMailNot) api.comDayCqWorkflowImplEmailEMailNotificationService(params);
        System.assertEquals(expectedResponse, response);
    }

    /**
     * 
     *
     * 
     */
    @isTest
    private static void comDayCqWorkflowImplEmailTaskEMailNotificationServiceTest() {
        HttpResponse res = new HttpResponse();
        res.setStatusCode(200);
        res.setStatus('OK');
        Test.setMock(HttpCalloutMock.class, new OASResponseMock(res));

        Map<String, Object> params = new Map<String, Object>{
            'post' => Boolean.getExample(),
            'apply' => Boolean.getExample(),
            'r_delete' => Boolean.getExample(),
            'action' => 'null',
            'location' => 'null',
            'propertylist' => new List<String>{''},
            'notifyOnupdate' => Boolean.getExample(),
            'notifyOncomplete' => Boolean.getExample()
        };

        OASClient client;
        OASConfigmgrApi api;
        OASComDayCqWorkflowImplEmailTaskEMai response;
        OASComDayCqWorkflowImplEmailTaskEMai expectedResponse;
        String js = '';

        client = new OASClient();
        api = new OASConfigmgrApi(client);

        js = JSON.serialize(OASComDayCqWorkflowImplEmailTaskEMai.getExample());
        res.setHeader('Content-Type', 'application/json');
        res.setBody(js);
        expectedResponse = OASComDayCqWorkflowImplEmailTaskEMai.getExample();
        response = (OASComDayCqWorkflowImplEmailTaskEMai) api.comDayCqWorkflowImplEmailTaskEMailNotificationService(params);
        System.assertEquals(expectedResponse, response);
    }

    /**
     * 
     *
     * 
     */
    @isTest
    private static void comDayCrxSecurityTokenImplImplTokenAuthenticationHandlerTest() {
        HttpResponse res = new HttpResponse();
        res.setStatusCode(200);
        res.setStatus('OK');
        Test.setMock(HttpCalloutMock.class, new OASResponseMock(res));

        Map<String, Object> params = new Map<String, Object>{
            'post' => Boolean.getExample(),
            'apply' => Boolean.getExample(),
            'r_delete' => Boolean.getExample(),
            'action' => 'null',
            'location' => 'null',
            'propertylist' => new List<String>{''},
            'path' => 'null',
            'tokenRequiredAttr' => 'null',
            'tokenAlternateUrl' => 'null',
            'tokenEncapsulated' => Boolean.getExample(),
            'skipTokenRefresh' => new List<String>{''}
        };

        OASClient client;
        OASConfigmgrApi api;
        OASComDayCrxSecurityTokenImplImplTok response;
        OASComDayCrxSecurityTokenImplImplTok expectedResponse;
        String js = '';

        client = new OASClient();
        api = new OASConfigmgrApi(client);

        js = JSON.serialize(OASComDayCrxSecurityTokenImplImplTok.getExample());
        res.setHeader('Content-Type', 'application/json');
        res.setBody(js);
        expectedResponse = OASComDayCrxSecurityTokenImplImplTok.getExample();
        response = (OASComDayCrxSecurityTokenImplImplTok) api.comDayCrxSecurityTokenImplImplTokenAuthenticationHandler(params);
        System.assertEquals(expectedResponse, response);
    }

    /**
     * 
     *
     * 
     */
    @isTest
    private static void comDayCrxSecurityTokenImplTokenCleanupTaskTest() {
        HttpResponse res = new HttpResponse();
        res.setStatusCode(200);
        res.setStatus('OK');
        Test.setMock(HttpCalloutMock.class, new OASResponseMock(res));

        Map<String, Object> params = new Map<String, Object>{
            'post' => Boolean.getExample(),
            'apply' => Boolean.getExample(),
            'r_delete' => Boolean.getExample(),
            'action' => 'null',
            'location' => 'null',
            'propertylist' => new List<String>{''},
            'enableTokenCleanupTask' => Boolean.getExample(),
            'schedulerExpression' => 'null',
            'batchSize' => Integer.getExample()
        };

        OASClient client;
        OASConfigmgrApi api;
        OASComDayCrxSecurityTokenImplTokenCl response;
        OASComDayCrxSecurityTokenImplTokenCl expectedResponse;
        String js = '';

        client = new OASClient();
        api = new OASConfigmgrApi(client);

        js = JSON.serialize(OASComDayCrxSecurityTokenImplTokenCl.getExample());
        res.setHeader('Content-Type', 'application/json');
        res.setBody(js);
        expectedResponse = OASComDayCrxSecurityTokenImplTokenCl.getExample();
        response = (OASComDayCrxSecurityTokenImplTokenCl) api.comDayCrxSecurityTokenImplTokenCleanupTask(params);
        System.assertEquals(expectedResponse, response);
    }

    /**
     * 
     *
     * 
     */
    @isTest
    private static void guideLocalizationServiceTest() {
        HttpResponse res = new HttpResponse();
        res.setStatusCode(200);
        res.setStatus('OK');
        Test.setMock(HttpCalloutMock.class, new OASResponseMock(res));

        Map<String, Object> params = new Map<String, Object>{
            'post' => Boolean.getExample(),
            'apply' => Boolean.getExample(),
            'r_delete' => Boolean.getExample(),
            'action' => 'null',
            'location' => 'null',
            'propertylist' => new List<String>{''},
            'supportedLocales' => new List<String>{''},
            'localizableProperties' => new List<String>{''}
        };

        OASClient client;
        OASConfigmgrApi api;
        OASGuideLocalizationServiceInfo response;
        OASGuideLocalizationServiceInfo expectedResponse;
        String js = '';

        client = new OASClient();
        api = new OASConfigmgrApi(client);

        js = JSON.serialize(OASGuideLocalizationServiceInfo.getExample());
        res.setHeader('Content-Type', 'application/json');
        res.setBody(js);
        expectedResponse = OASGuideLocalizationServiceInfo.getExample();
        response = (OASGuideLocalizationServiceInfo) api.guideLocalizationService(params);
        System.assertEquals(expectedResponse, response);
    }

    /**
     * 
     *
     * 
     */
    @isTest
    private static void messagingUserComponentFactoryTest() {
        HttpResponse res = new HttpResponse();
        res.setStatusCode(200);
        res.setStatus('OK');
        Test.setMock(HttpCalloutMock.class, new OASResponseMock(res));

        Map<String, Object> params = new Map<String, Object>{
            'post' => Boolean.getExample(),
            'apply' => Boolean.getExample(),
            'r_delete' => Boolean.getExample(),
            'action' => 'null',
            'location' => 'null',
            'propertylist' => new List<String>{''},
            'priority' => Integer.getExample()
        };

        OASClient client;
        OASConfigmgrApi api;
        OASMessagingUserComponentFactoryInfo response;
        OASMessagingUserComponentFactoryInfo expectedResponse;
        String js = '';

        client = new OASClient();
        api = new OASConfigmgrApi(client);

        js = JSON.serialize(OASMessagingUserComponentFactoryInfo.getExample());
        res.setHeader('Content-Type', 'application/json');
        res.setBody(js);
        expectedResponse = OASMessagingUserComponentFactoryInfo.getExample();
        response = (OASMessagingUserComponentFactoryInfo) api.messagingUserComponentFactory(params);
        System.assertEquals(expectedResponse, response);
    }

    /**
     * 
     *
     * 
     */
    @isTest
    private static void orgApacheAriesJmxFrameworkStateConfigTest() {
        HttpResponse res = new HttpResponse();
        res.setStatusCode(200);
        res.setStatus('OK');
        Test.setMock(HttpCalloutMock.class, new OASResponseMock(res));

        Map<String, Object> params = new Map<String, Object>{
            'post' => Boolean.getExample(),
            'apply' => Boolean.getExample(),
            'r_delete' => Boolean.getExample(),
            'action' => 'null',
            'location' => 'null',
            'propertylist' => new List<String>{''},
            'attributeChangeNotificationEnabled' => Boolean.getExample()
        };

        OASClient client;
        OASConfigmgrApi api;
        OASOrgApacheAriesJmxFrameworkStateCo response;
        OASOrgApacheAriesJmxFrameworkStateCo expectedResponse;
        String js = '';

        client = new OASClient();
        api = new OASConfigmgrApi(client);

        js = JSON.serialize(OASOrgApacheAriesJmxFrameworkStateCo.getExample());
        res.setHeader('Content-Type', 'application/json');
        res.setBody(js);
        expectedResponse = OASOrgApacheAriesJmxFrameworkStateCo.getExample();
        response = (OASOrgApacheAriesJmxFrameworkStateCo) api.orgApacheAriesJmxFrameworkStateConfig(params);
        System.assertEquals(expectedResponse, response);
    }

    /**
     * 
     *
     * 
     */
    @isTest
    private static void orgApacheFelixEventadminImplEventAdminTest() {
        HttpResponse res = new HttpResponse();
        res.setStatusCode(200);
        res.setStatus('OK');
        Test.setMock(HttpCalloutMock.class, new OASResponseMock(res));

        Map<String, Object> params = new Map<String, Object>{
            'post' => Boolean.getExample(),
            'apply' => Boolean.getExample(),
            'r_delete' => Boolean.getExample(),
            'action' => 'null',
            'location' => 'null',
            'propertylist' => new List<String>{''},
            'orgApacheFelixEventadminThreadPoolSize' => Integer.getExample(),
            'orgApacheFelixEventadminAsyncToSyncThreadRatio' => Double.getExample(),
            'orgApacheFelixEventadminTimeout' => Integer.getExample(),
            'orgApacheFelixEventadminRequireTopic' => Boolean.getExample(),
            'orgApacheFelixEventadminIgnoreTimeout' => new List<String>{''},
            'orgApacheFelixEventadminIgnoreTopic' => new List<String>{''}
        };

        OASClient client;
        OASConfigmgrApi api;
        OASOrgApacheFelixEventadminImplEvent response;
        OASOrgApacheFelixEventadminImplEvent expectedResponse;
        String js = '';

        client = new OASClient();
        api = new OASConfigmgrApi(client);

        js = JSON.serialize(OASOrgApacheFelixEventadminImplEvent.getExample());
        res.setHeader('Content-Type', 'application/json');
        res.setBody(js);
        expectedResponse = OASOrgApacheFelixEventadminImplEvent.getExample();
        response = (OASOrgApacheFelixEventadminImplEvent) api.orgApacheFelixEventadminImplEventAdmin(params);
        System.assertEquals(expectedResponse, response);
    }

    /**
     * 
     *
     * 
     */
    @isTest
    private static void orgApacheFelixHttpTest() {
        HttpResponse res = new HttpResponse();
        res.setStatusCode(200);
        res.setStatus('OK');
        Test.setMock(HttpCalloutMock.class, new OASResponseMock(res));

        Map<String, Object> params = new Map<String, Object>{
            'post' => Boolean.getExample(),
            'apply' => Boolean.getExample(),
            'r_delete' => Boolean.getExample(),
            'action' => 'null',
            'location' => 'null',
            'propertylist' => new List<String>{''},
            'orgApacheFelixHttpHost' => 'null',
            'orgApacheFelixHttpEnable' => Boolean.getExample(),
            'orgOsgiServiceHttpPort' => Integer.getExample(),
            'orgApacheFelixHttpTimeout' => Integer.getExample(),
            'orgApacheFelixHttpsEnable' => Boolean.getExample(),
            'orgOsgiServiceHttpPortSecure' => Integer.getExample(),
            'orgApacheFelixHttpsKeystore' => 'null',
            'orgApacheFelixHttpsKeystorePassword' => 'null',
            'orgApacheFelixHttpsKeystoreKeyPassword' => 'null',
            'orgApacheFelixHttpsTruststore' => 'null',
            'orgApacheFelixHttpsTruststorePassword' => 'null',
            'orgApacheFelixHttpsClientcertificate' => 'null',
            'orgApacheFelixHttpContextPath' => 'null',
            'orgApacheFelixHttpMbeans' => Boolean.getExample(),
            'orgApacheFelixHttpSessionTimeout' => Integer.getExample(),
            'orgApacheFelixHttpJettyThreadpoolMax' => Integer.getExample(),
            'orgApacheFelixHttpJettyAcceptors' => Integer.getExample(),
            'orgApacheFelixHttpJettySelectors' => Integer.getExample(),
            'orgApacheFelixHttpJettyHeaderBufferSize' => Integer.getExample(),
            'orgApacheFelixHttpJettyRequestBufferSize' => Integer.getExample(),
            'orgApacheFelixHttpJettyResponseBufferSize' => Integer.getExample(),
            'orgApacheFelixHttpJettyMaxFormSize' => Integer.getExample(),
            'orgApacheFelixHttpPathExclusions' => new List<String>{''},
            'orgApacheFelixHttpsJettyCiphersuitesExcluded' => new List<String>{''},
            'orgApacheFelixHttpsJettyCiphersuitesIncluded' => new List<String>{''},
            'orgApacheFelixHttpJettySendServerHeader' => Boolean.getExample(),
            'orgApacheFelixHttpsJettyProtocolsIncluded' => new List<String>{''},
            'orgApacheFelixHttpsJettyProtocolsExcluded' => new List<String>{''},
            'orgApacheFelixProxyLoadBalancerConnectionEnable' => Boolean.getExample(),
            'orgApacheFelixHttpsJettyRenegotiateAllowed' => Boolean.getExample(),
            'orgApacheFelixHttpsJettySessionCookieHttpOnly' => Boolean.getExample(),
            'orgApacheFelixHttpsJettySessionCookieSecure' => Boolean.getExample(),
            'orgEclipseJettyServletSessionIdPathParameterName' => 'null',
            'orgEclipseJettyServletCheckingRemoteSessionIdEncoding' => Boolean.getExample(),
            'orgEclipseJettyServletSessionCookie' => 'null',
            'orgEclipseJettyServletSessionDomain' => 'null',
            'orgEclipseJettyServletSessionPath' => 'null',
            'orgEclipseJettyServletMaxAge' => Integer.getExample(),
            'orgApacheFelixHttpName' => 'null',
            'orgApacheFelixJettyGziphandlerEnable' => Boolean.getExample(),
            'orgApacheFelixJettyGzipMinGzipSize' => Integer.getExample(),
            'orgApacheFelixJettyGzipCompressionLevel' => Integer.getExample(),
            'orgApacheFelixJettyGzipInflateBufferSize' => Integer.getExample(),
            'orgApacheFelixJettyGzipSyncFlush' => Boolean.getExample(),
            'orgApacheFelixJettyGzipExcludedUserAgents' => new List<String>{''},
            'orgApacheFelixJettyGzipIncludedMethods' => new List<String>{''},
            'orgApacheFelixJettyGzipExcludedMethods' => new List<String>{''},
            'orgApacheFelixJettyGzipIncludedPaths' => new List<String>{''},
            'orgApacheFelixJettyGzipExcludedPaths' => new List<String>{''},
            'orgApacheFelixJettyGzipIncludedMimeTypes' => new List<String>{''},
            'orgApacheFelixJettyGzipExcludedMimeTypes' => new List<String>{''},
            'orgApacheFelixHttpSessionInvalidate' => Boolean.getExample(),
            'orgApacheFelixHttpSessionUniqueid' => Boolean.getExample()
        };

        OASClient client;
        OASConfigmgrApi api;
        OASOrgApacheFelixHttpInfo response;
        OASOrgApacheFelixHttpInfo expectedResponse;
        String js = '';

        client = new OASClient();
        api = new OASConfigmgrApi(client);

        js = JSON.serialize(OASOrgApacheFelixHttpInfo.getExample());
        res.setHeader('Content-Type', 'application/json');
        res.setBody(js);
        expectedResponse = OASOrgApacheFelixHttpInfo.getExample();
        response = (OASOrgApacheFelixHttpInfo) api.orgApacheFelixHttp(params);
        System.assertEquals(expectedResponse, response);
    }

    /**
     * 
     *
     * 
     */
    @isTest
    private static void orgApacheFelixHttpSslfilterSslFilterTest() {
        HttpResponse res = new HttpResponse();
        res.setStatusCode(200);
        res.setStatus('OK');
        Test.setMock(HttpCalloutMock.class, new OASResponseMock(res));

        Map<String, Object> params = new Map<String, Object>{
            'post' => Boolean.getExample(),
            'apply' => Boolean.getExample(),
            'r_delete' => Boolean.getExample(),
            'action' => 'null',
            'location' => 'null',
            'propertylist' => new List<String>{''},
            'sslForwardHeader' => 'null',
            'sslForwardValue' => 'null',
            'sslForwardCertHeader' => 'null',
            'rewriteAbsoluteUrls' => Boolean.getExample()
        };

        OASClient client;
        OASConfigmgrApi api;
        OASOrgApacheFelixHttpSslfilterSslFil response;
        OASOrgApacheFelixHttpSslfilterSslFil expectedResponse;
        String js = '';

        client = new OASClient();
        api = new OASConfigmgrApi(client);

        js = JSON.serialize(OASOrgApacheFelixHttpSslfilterSslFil.getExample());
        res.setHeader('Content-Type', 'application/json');
        res.setBody(js);
        expectedResponse = OASOrgApacheFelixHttpSslfilterSslFil.getExample();
        response = (OASOrgApacheFelixHttpSslfilterSslFil) api.orgApacheFelixHttpSslfilterSslFilter(params);
        System.assertEquals(expectedResponse, response);
    }

    /**
     * 
     *
     * 
     */
    @isTest
    private static void orgApacheFelixJaasConfigurationFactoryTest() {
        HttpResponse res = new HttpResponse();
        res.setStatusCode(200);
        res.setStatus('OK');
        Test.setMock(HttpCalloutMock.class, new OASResponseMock(res));

        Map<String, Object> params = new Map<String, Object>{
            'post' => Boolean.getExample(),
            'apply' => Boolean.getExample(),
            'r_delete' => Boolean.getExample(),
            'action' => 'null',
            'location' => 'null',
            'propertylist' => new List<String>{''},
            'jaasControlFlag' => 'null',
            'jaasRanking' => Integer.getExample(),
            'jaasRealmName' => 'null',
            'jaasClassname' => 'null',
            'jaasOptions' => new List<String>{''}
        };

        OASClient client;
        OASConfigmgrApi api;
        OASOrgApacheFelixJaasConfigurationFa response;
        OASOrgApacheFelixJaasConfigurationFa expectedResponse;
        String js = '';

        client = new OASClient();
        api = new OASConfigmgrApi(client);

        js = JSON.serialize(OASOrgApacheFelixJaasConfigurationFa.getExample());
        res.setHeader('Content-Type', 'application/json');
        res.setBody(js);
        expectedResponse = OASOrgApacheFelixJaasConfigurationFa.getExample();
        response = (OASOrgApacheFelixJaasConfigurationFa) api.orgApacheFelixJaasConfigurationFactory(params);
        System.assertEquals(expectedResponse, response);
    }

    /**
     * 
     *
     * 
     */
    @isTest
    private static void orgApacheFelixJaasConfigurationSpiTest() {
        HttpResponse res = new HttpResponse();
        res.setStatusCode(200);
        res.setStatus('OK');
        Test.setMock(HttpCalloutMock.class, new OASResponseMock(res));

        Map<String, Object> params = new Map<String, Object>{
            'post' => Boolean.getExample(),
            'apply' => Boolean.getExample(),
            'r_delete' => Boolean.getExample(),
            'action' => 'null',
            'location' => 'null',
            'propertylist' => new List<String>{''},
            'jaasDefaultRealmName' => 'null',
            'jaasConfigProviderName' => 'null',
            'jaasGlobalConfigPolicy' => 'null'
        };

        OASClient client;
        OASConfigmgrApi api;
        OASOrgApacheFelixJaasConfigurationSp response;
        OASOrgApacheFelixJaasConfigurationSp expectedResponse;
        String js = '';

        client = new OASClient();
        api = new OASConfigmgrApi(client);

        js = JSON.serialize(OASOrgApacheFelixJaasConfigurationSp.getExample());
        res.setHeader('Content-Type', 'application/json');
        res.setBody(js);
        expectedResponse = OASOrgApacheFelixJaasConfigurationSp.getExample();
        response = (OASOrgApacheFelixJaasConfigurationSp) api.orgApacheFelixJaasConfigurationSpi(params);
        System.assertEquals(expectedResponse, response);
    }

    /**
     * 
     *
     * 
     */
    @isTest
    private static void orgApacheFelixScrScrServiceTest() {
        HttpResponse res = new HttpResponse();
        res.setStatusCode(200);
        res.setStatus('OK');
        Test.setMock(HttpCalloutMock.class, new OASResponseMock(res));

        Map<String, Object> params = new Map<String, Object>{
            'post' => Boolean.getExample(),
            'apply' => Boolean.getExample(),
            'r_delete' => Boolean.getExample(),
            'action' => 'null',
            'location' => 'null',
            'propertylist' => new List<String>{''},
            'dsLoglevel' => Integer.getExample(),
            'dsFactoryEnabled' => Boolean.getExample(),
            'dsDelayedKeepInstances' => Boolean.getExample(),
            'dsLockTimeoutMilliseconds' => Integer.getExample(),
            'dsStopTimeoutMilliseconds' => Integer.getExample(),
            'dsGlobalExtender' => Boolean.getExample()
        };

        OASClient client;
        OASConfigmgrApi api;
        OASOrgApacheFelixScrScrServiceInfo response;
        OASOrgApacheFelixScrScrServiceInfo expectedResponse;
        String js = '';

        client = new OASClient();
        api = new OASConfigmgrApi(client);

        js = JSON.serialize(OASOrgApacheFelixScrScrServiceInfo.getExample());
        res.setHeader('Content-Type', 'application/json');
        res.setBody(js);
        expectedResponse = OASOrgApacheFelixScrScrServiceInfo.getExample();
        response = (OASOrgApacheFelixScrScrServiceInfo) api.orgApacheFelixScrScrService(params);
        System.assertEquals(expectedResponse, response);
    }

    /**
     * 
     *
     * 
     */
    @isTest
    private static void orgApacheFelixSystemreadyImplComponentsCheckTest() {
        HttpResponse res = new HttpResponse();
        res.setStatusCode(200);
        res.setStatus('OK');
        Test.setMock(HttpCalloutMock.class, new OASResponseMock(res));

        Map<String, Object> params = new Map<String, Object>{
            'post' => Boolean.getExample(),
            'apply' => Boolean.getExample(),
            'r_delete' => Boolean.getExample(),
            'action' => 'null',
            'location' => 'null',
            'propertylist' => new List<String>{''},
            'componentsList' => new List<String>{''},
            'r_type' => 'null'
        };

        OASClient client;
        OASConfigmgrApi api;
        OASOrgApacheFelixSystemreadyImplComp response;
        OASOrgApacheFelixSystemreadyImplComp expectedResponse;
        String js = '';

        client = new OASClient();
        api = new OASConfigmgrApi(client);

        js = JSON.serialize(OASOrgApacheFelixSystemreadyImplComp.getExample());
        res.setHeader('Content-Type', 'application/json');
        res.setBody(js);
        expectedResponse = OASOrgApacheFelixSystemreadyImplComp.getExample();
        response = (OASOrgApacheFelixSystemreadyImplComp) api.orgApacheFelixSystemreadyImplComponentsCheck(params);
        System.assertEquals(expectedResponse, response);
    }

    /**
     * 
     *
     * 
     */
    @isTest
    private static void orgApacheFelixSystemreadyImplFrameworkStartCheckTest() {
        HttpResponse res = new HttpResponse();
        res.setStatusCode(200);
        res.setStatus('OK');
        Test.setMock(HttpCalloutMock.class, new OASResponseMock(res));

        Map<String, Object> params = new Map<String, Object>{
            'post' => Boolean.getExample(),
            'apply' => Boolean.getExample(),
            'r_delete' => Boolean.getExample(),
            'action' => 'null',
            'location' => 'null',
            'propertylist' => new List<String>{''},
            'timeout' => Integer.getExample(),
            'targetStartLevel' => Integer.getExample(),
            'targetStartLevelPropName' => 'null',
            'r_type' => 'null'
        };

        OASClient client;
        OASConfigmgrApi api;
        OASOrgApacheFelixSystemreadyImplFram response;
        OASOrgApacheFelixSystemreadyImplFram expectedResponse;
        String js = '';

        client = new OASClient();
        api = new OASConfigmgrApi(client);

        js = JSON.serialize(OASOrgApacheFelixSystemreadyImplFram.getExample());
        res.setHeader('Content-Type', 'application/json');
        res.setBody(js);
        expectedResponse = OASOrgApacheFelixSystemreadyImplFram.getExample();
        response = (OASOrgApacheFelixSystemreadyImplFram) api.orgApacheFelixSystemreadyImplFrameworkStartCheck(params);
        System.assertEquals(expectedResponse, response);
    }

    /**
     * 
     *
     * 
     */
    @isTest
    private static void orgApacheFelixSystemreadyImplServicesCheckTest() {
        HttpResponse res = new HttpResponse();
        res.setStatusCode(200);
        res.setStatus('OK');
        Test.setMock(HttpCalloutMock.class, new OASResponseMock(res));

        Map<String, Object> params = new Map<String, Object>{
            'post' => Boolean.getExample(),
            'apply' => Boolean.getExample(),
            'r_delete' => Boolean.getExample(),
            'action' => 'null',
            'location' => 'null',
            'propertylist' => new List<String>{''},
            'servicesList' => new List<String>{''},
            'r_type' => 'null'
        };

        OASClient client;
        OASConfigmgrApi api;
        OASOrgApacheFelixSystemreadyImplServ response;
        OASOrgApacheFelixSystemreadyImplServ expectedResponse;
        String js = '';

        client = new OASClient();
        api = new OASConfigmgrApi(client);

        js = JSON.serialize(OASOrgApacheFelixSystemreadyImplServ.getExample());
        res.setHeader('Content-Type', 'application/json');
        res.setBody(js);
        expectedResponse = OASOrgApacheFelixSystemreadyImplServ.getExample();
        response = (OASOrgApacheFelixSystemreadyImplServ) api.orgApacheFelixSystemreadyImplServicesCheck(params);
        System.assertEquals(expectedResponse, response);
    }

    /**
     * 
     *
     * 
     */
    @isTest
    private static void orgApacheFelixSystemreadyImplServletSystemAliveServletTest() {
        HttpResponse res = new HttpResponse();
        res.setStatusCode(200);
        res.setStatus('OK');
        Test.setMock(HttpCalloutMock.class, new OASResponseMock(res));

        Map<String, Object> params = new Map<String, Object>{
            'post' => Boolean.getExample(),
            'apply' => Boolean.getExample(),
            'r_delete' => Boolean.getExample(),
            'action' => 'null',
            'location' => 'null',
            'propertylist' => new List<String>{''},
            'osgiHttpWhiteboardServletPattern' => 'null',
            'osgiHttpWhiteboardContextSelect' => 'null'
        };

        OASClient client;
        OASConfigmgrApi api;
        OASOrgApacheFelixSystemreadyImplServ response;
        OASOrgApacheFelixSystemreadyImplServ expectedResponse;
        String js = '';

        client = new OASClient();
        api = new OASConfigmgrApi(client);

        js = JSON.serialize(OASOrgApacheFelixSystemreadyImplServ.getExample());
        res.setHeader('Content-Type', 'application/json');
        res.setBody(js);
        expectedResponse = OASOrgApacheFelixSystemreadyImplServ.getExample();
        response = (OASOrgApacheFelixSystemreadyImplServ) api.orgApacheFelixSystemreadyImplServletSystemAliveServlet(params);
        System.assertEquals(expectedResponse, response);
    }

    /**
     * 
     *
     * 
     */
    @isTest
    private static void orgApacheFelixSystemreadyImplServletSystemReadyServletTest() {
        HttpResponse res = new HttpResponse();
        res.setStatusCode(200);
        res.setStatus('OK');
        Test.setMock(HttpCalloutMock.class, new OASResponseMock(res));

        Map<String, Object> params = new Map<String, Object>{
            'post' => Boolean.getExample(),
            'apply' => Boolean.getExample(),
            'r_delete' => Boolean.getExample(),
            'action' => 'null',
            'location' => 'null',
            'propertylist' => new List<String>{''},
            'osgiHttpWhiteboardServletPattern' => 'null',
            'osgiHttpWhiteboardContextSelect' => 'null'
        };

        OASClient client;
        OASConfigmgrApi api;
        OASOrgApacheFelixSystemreadyImplServ response;
        OASOrgApacheFelixSystemreadyImplServ expectedResponse;
        String js = '';

        client = new OASClient();
        api = new OASConfigmgrApi(client);

        js = JSON.serialize(OASOrgApacheFelixSystemreadyImplServ.getExample());
        res.setHeader('Content-Type', 'application/json');
        res.setBody(js);
        expectedResponse = OASOrgApacheFelixSystemreadyImplServ.getExample();
        response = (OASOrgApacheFelixSystemreadyImplServ) api.orgApacheFelixSystemreadyImplServletSystemReadyServlet(params);
        System.assertEquals(expectedResponse, response);
    }

    /**
     * 
     *
     * 
     */
    @isTest
    private static void orgApacheFelixSystemreadySystemReadyMonitorTest() {
        HttpResponse res = new HttpResponse();
        res.setStatusCode(200);
        res.setStatus('OK');
        Test.setMock(HttpCalloutMock.class, new OASResponseMock(res));

        Map<String, Object> params = new Map<String, Object>{
            'post' => Boolean.getExample(),
            'apply' => Boolean.getExample(),
            'r_delete' => Boolean.getExample(),
            'action' => 'null',
            'location' => 'null',
            'propertylist' => new List<String>{''},
            'pollInterval' => Integer.getExample()
        };

        OASClient client;
        OASConfigmgrApi api;
        OASOrgApacheFelixSystemreadySystemRe response;
        OASOrgApacheFelixSystemreadySystemRe expectedResponse;
        String js = '';

        client = new OASClient();
        api = new OASConfigmgrApi(client);

        js = JSON.serialize(OASOrgApacheFelixSystemreadySystemRe.getExample());
        res.setHeader('Content-Type', 'application/json');
        res.setBody(js);
        expectedResponse = OASOrgApacheFelixSystemreadySystemRe.getExample();
        response = (OASOrgApacheFelixSystemreadySystemRe) api.orgApacheFelixSystemreadySystemReadyMonitor(params);
        System.assertEquals(expectedResponse, response);
    }

    /**
     * 
     *
     * 
     */
    @isTest
    private static void orgApacheFelixWebconsoleInternalServletOsgiManagerTest() {
        HttpResponse res = new HttpResponse();
        res.setStatusCode(200);
        res.setStatus('OK');
        Test.setMock(HttpCalloutMock.class, new OASResponseMock(res));

        Map<String, Object> params = new Map<String, Object>{
            'post' => Boolean.getExample(),
            'apply' => Boolean.getExample(),
            'r_delete' => Boolean.getExample(),
            'action' => 'null',
            'location' => 'null',
            'propertylist' => new List<String>{''},
            'managerRoot' => 'null',
            'httpServiceFilter' => 'null',
            'defaultRender' => 'null',
            'realm' => 'null',
            'username' => 'null',
            'password' => 'null',
            'category' => 'null',
            'locale' => 'null',
            'loglevel' => Integer.getExample(),
            'plugins' => 'null'
        };

        OASClient client;
        OASConfigmgrApi api;
        OASOrgApacheFelixWebconsoleInternalS response;
        OASOrgApacheFelixWebconsoleInternalS expectedResponse;
        String js = '';

        client = new OASClient();
        api = new OASConfigmgrApi(client);

        js = JSON.serialize(OASOrgApacheFelixWebconsoleInternalS.getExample());
        res.setHeader('Content-Type', 'application/json');
        res.setBody(js);
        expectedResponse = OASOrgApacheFelixWebconsoleInternalS.getExample();
        response = (OASOrgApacheFelixWebconsoleInternalS) api.orgApacheFelixWebconsoleInternalServletOsgiManager(params);
        System.assertEquals(expectedResponse, response);
    }

    /**
     * 
     *
     * 
     */
    @isTest
    private static void orgApacheFelixWebconsolePluginsEventInternalPluginServletTest() {
        HttpResponse res = new HttpResponse();
        res.setStatusCode(200);
        res.setStatus('OK');
        Test.setMock(HttpCalloutMock.class, new OASResponseMock(res));

        Map<String, Object> params = new Map<String, Object>{
            'post' => Boolean.getExample(),
            'apply' => Boolean.getExample(),
            'r_delete' => Boolean.getExample(),
            'action' => 'null',
            'location' => 'null',
            'propertylist' => new List<String>{''},
            'maxSize' => Integer.getExample()
        };

        OASClient client;
        OASConfigmgrApi api;
        OASOrgApacheFelixWebconsolePluginsEv response;
        OASOrgApacheFelixWebconsolePluginsEv expectedResponse;
        String js = '';

        client = new OASClient();
        api = new OASConfigmgrApi(client);

        js = JSON.serialize(OASOrgApacheFelixWebconsolePluginsEv.getExample());
        res.setHeader('Content-Type', 'application/json');
        res.setBody(js);
        expectedResponse = OASOrgApacheFelixWebconsolePluginsEv.getExample();
        response = (OASOrgApacheFelixWebconsolePluginsEv) api.orgApacheFelixWebconsolePluginsEventInternalPluginServlet(params);
        System.assertEquals(expectedResponse, response);
    }

    /**
     * 
     *
     * 
     */
    @isTest
    private static void orgApacheFelixWebconsolePluginsMemoryusageInternalMemoryUsageCoTest() {
        HttpResponse res = new HttpResponse();
        res.setStatusCode(200);
        res.setStatus('OK');
        Test.setMock(HttpCalloutMock.class, new OASResponseMock(res));

        Map<String, Object> params = new Map<String, Object>{
            'post' => Boolean.getExample(),
            'apply' => Boolean.getExample(),
            'r_delete' => Boolean.getExample(),
            'action' => 'null',
            'location' => 'null',
            'propertylist' => new List<String>{''},
            'felixMemoryusageDumpThreshold' => Integer.getExample(),
            'felixMemoryusageDumpInterval' => Integer.getExample(),
            'felixMemoryusageDumpLocation' => 'null'
        };

        OASClient client;
        OASConfigmgrApi api;
        OASOrgApacheFelixWebconsolePluginsMe response;
        OASOrgApacheFelixWebconsolePluginsMe expectedResponse;
        String js = '';

        client = new OASClient();
        api = new OASConfigmgrApi(client);

        js = JSON.serialize(OASOrgApacheFelixWebconsolePluginsMe.getExample());
        res.setHeader('Content-Type', 'application/json');
        res.setBody(js);
        expectedResponse = OASOrgApacheFelixWebconsolePluginsMe.getExample();
        response = (OASOrgApacheFelixWebconsolePluginsMe) api.orgApacheFelixWebconsolePluginsMemoryusageInternalMemoryUsageCo(params);
        System.assertEquals(expectedResponse, response);
    }

    /**
     * 
     *
     * 
     */
    @isTest
    private static void orgApacheHttpProxyconfiguratorTest() {
        HttpResponse res = new HttpResponse();
        res.setStatusCode(200);
        res.setStatus('OK');
        Test.setMock(HttpCalloutMock.class, new OASResponseMock(res));

        Map<String, Object> params = new Map<String, Object>{
            'post' => Boolean.getExample(),
            'apply' => Boolean.getExample(),
            'r_delete' => Boolean.getExample(),
            'action' => 'null',
            'location' => 'null',
            'propertylist' => new List<String>{''},
            'proxyEnabled' => Boolean.getExample(),
            'proxyHost' => 'null',
            'proxyPort' => Integer.getExample(),
            'proxyUser' => 'null',
            'proxyPassword' => 'null',
            'proxyExceptions' => new List<String>{''}
        };

        OASClient client;
        OASConfigmgrApi api;
        OASOrgApacheHttpProxyconfiguratorInf response;
        OASOrgApacheHttpProxyconfiguratorInf expectedResponse;
        String js = '';

        client = new OASClient();
        api = new OASConfigmgrApi(client);

        js = JSON.serialize(OASOrgApacheHttpProxyconfiguratorInf.getExample());
        res.setHeader('Content-Type', 'application/json');
        res.setBody(js);
        expectedResponse = OASOrgApacheHttpProxyconfiguratorInf.getExample();
        response = (OASOrgApacheHttpProxyconfiguratorInf) api.orgApacheHttpProxyconfigurator(params);
        System.assertEquals(expectedResponse, response);
    }

    /**
     * 
     *
     * 
     */
    @isTest
    private static void orgApacheJackrabbitOakPluginsBlobDatastoreDataStoreTextProviderTest() {
        HttpResponse res = new HttpResponse();
        res.setStatusCode(200);
        res.setStatus('OK');
        Test.setMock(HttpCalloutMock.class, new OASResponseMock(res));

        Map<String, Object> params = new Map<String, Object>{
            'post' => Boolean.getExample(),
            'apply' => Boolean.getExample(),
            'r_delete' => Boolean.getExample(),
            'action' => 'null',
            'location' => 'null',
            'propertylist' => new List<String>{''},
            'dir' => 'null'
        };

        OASClient client;
        OASConfigmgrApi api;
        OASOrgApacheJackrabbitOakPluginsBlob response;
        OASOrgApacheJackrabbitOakPluginsBlob expectedResponse;
        String js = '';

        client = new OASClient();
        api = new OASConfigmgrApi(client);

        js = JSON.serialize(OASOrgApacheJackrabbitOakPluginsBlob.getExample());
        res.setHeader('Content-Type', 'application/json');
        res.setBody(js);
        expectedResponse = OASOrgApacheJackrabbitOakPluginsBlob.getExample();
        response = (OASOrgApacheJackrabbitOakPluginsBlob) api.orgApacheJackrabbitOakPluginsBlobDatastoreDataStoreTextProvider(params);
        System.assertEquals(expectedResponse, response);
    }

    /**
     * 
     *
     * 
     */
    @isTest
    private static void orgApacheJackrabbitOakPluginsBlobDatastoreFileDataStoreTest() {
        HttpResponse res = new HttpResponse();
        res.setStatusCode(200);
        res.setStatus('OK');
        Test.setMock(HttpCalloutMock.class, new OASResponseMock(res));

        Map<String, Object> params = new Map<String, Object>{
            'post' => Boolean.getExample(),
            'apply' => Boolean.getExample(),
            'r_delete' => Boolean.getExample(),
            'action' => 'null',
            'location' => 'null',
            'propertylist' => new List<String>{''},
            'path' => 'null'
        };

        OASClient client;
        OASConfigmgrApi api;
        OASOrgApacheJackrabbitOakPluginsBlob response;
        OASOrgApacheJackrabbitOakPluginsBlob expectedResponse;
        String js = '';

        client = new OASClient();
        api = new OASConfigmgrApi(client);

        js = JSON.serialize(OASOrgApacheJackrabbitOakPluginsBlob.getExample());
        res.setHeader('Content-Type', 'application/json');
        res.setBody(js);
        expectedResponse = OASOrgApacheJackrabbitOakPluginsBlob.getExample();
        response = (OASOrgApacheJackrabbitOakPluginsBlob) api.orgApacheJackrabbitOakPluginsBlobDatastoreFileDataStore(params);
        System.assertEquals(expectedResponse, response);
    }

    /**
     * 
     *
     * 
     */
    @isTest
    private static void orgApacheJackrabbitOakPluginsDocumentDocumentNodeStoreServiceTest() {
        HttpResponse res = new HttpResponse();
        res.setStatusCode(200);
        res.setStatus('OK');
        Test.setMock(HttpCalloutMock.class, new OASResponseMock(res));

        Map<String, Object> params = new Map<String, Object>{
            'post' => Boolean.getExample(),
            'apply' => Boolean.getExample(),
            'r_delete' => Boolean.getExample(),
            'action' => 'null',
            'location' => 'null',
            'propertylist' => new List<String>{''},
            'mongouri' => 'null',
            'db' => 'null',
            'socketKeepAlive' => Boolean.getExample(),
            'cache' => Integer.getExample(),
            'nodeCachePercentage' => Integer.getExample(),
            'prevDocCachePercentage' => Integer.getExample(),
            'childrenCachePercentage' => Integer.getExample(),
            'diffCachePercentage' => Integer.getExample(),
            'cacheSegmentCount' => Integer.getExample(),
            'cacheStackMoveDistance' => Integer.getExample(),
            'blobCacheSize' => Integer.getExample(),
            'persistentCache' => 'null',
            'journalCache' => 'null',
            'customBlobStore' => Boolean.getExample(),
            'journalGCInterval' => Integer.getExample(),
            'journalGCMaxAge' => Integer.getExample(),
            'prefetchExternalChanges' => Boolean.getExample(),
            'role' => 'null',
            'versionGcMaxAgeInSecs' => Integer.getExample(),
            'versionGCExpression' => 'null',
            'versionGCTimeLimitInSecs' => Integer.getExample(),
            'blobGcMaxAgeInSecs' => Integer.getExample(),
            'blobTrackSnapshotIntervalInSecs' => Integer.getExample(),
            'repositoryHome' => 'null',
            'maxReplicationLagInSecs' => Integer.getExample(),
            'documentStoreType' => 'null',
            'bundlingDisabled' => Boolean.getExample(),
            'updateLimit' => Integer.getExample(),
            'persistentCacheIncludes' => new List<String>{''},
            'leaseCheckMode' => 'null'
        };

        OASClient client;
        OASConfigmgrApi api;
        OASOrgApacheJackrabbitOakPluginsDocu response;
        OASOrgApacheJackrabbitOakPluginsDocu expectedResponse;
        String js = '';

        client = new OASClient();
        api = new OASConfigmgrApi(client);

        js = JSON.serialize(OASOrgApacheJackrabbitOakPluginsDocu.getExample());
        res.setHeader('Content-Type', 'application/json');
        res.setBody(js);
        expectedResponse = OASOrgApacheJackrabbitOakPluginsDocu.getExample();
        response = (OASOrgApacheJackrabbitOakPluginsDocu) api.orgApacheJackrabbitOakPluginsDocumentDocumentNodeStoreService(params);
        System.assertEquals(expectedResponse, response);
    }

    /**
     * 
     *
     * 
     */
    @isTest
    private static void orgApacheJackrabbitOakPluginsDocumentDocumentNodeStoreServicePreTest() {
        HttpResponse res = new HttpResponse();
        res.setStatusCode(200);
        res.setStatus('OK');
        Test.setMock(HttpCalloutMock.class, new OASResponseMock(res));

        Map<String, Object> params = new Map<String, Object>{
            'post' => Boolean.getExample(),
            'apply' => Boolean.getExample(),
            'r_delete' => Boolean.getExample(),
            'action' => 'null',
            'location' => 'null',
            'propertylist' => new List<String>{''},
            'persistentCacheIncludes' => new List<String>{''}
        };

        OASClient client;
        OASConfigmgrApi api;
        OASOrgApacheJackrabbitOakPluginsDocu response;
        OASOrgApacheJackrabbitOakPluginsDocu expectedResponse;
        String js = '';

        client = new OASClient();
        api = new OASConfigmgrApi(client);

        js = JSON.serialize(OASOrgApacheJackrabbitOakPluginsDocu.getExample());
        res.setHeader('Content-Type', 'application/json');
        res.setBody(js);
        expectedResponse = OASOrgApacheJackrabbitOakPluginsDocu.getExample();
        response = (OASOrgApacheJackrabbitOakPluginsDocu) api.orgApacheJackrabbitOakPluginsDocumentDocumentNodeStoreServicePre(params);
        System.assertEquals(expectedResponse, response);
    }

    /**
     * 
     *
     * 
     */
    @isTest
    private static void orgApacheJackrabbitOakPluginsDocumentSecondarySecondaryStoreCacTest() {
        HttpResponse res = new HttpResponse();
        res.setStatusCode(200);
        res.setStatus('OK');
        Test.setMock(HttpCalloutMock.class, new OASResponseMock(res));

        Map<String, Object> params = new Map<String, Object>{
            'post' => Boolean.getExample(),
            'apply' => Boolean.getExample(),
            'r_delete' => Boolean.getExample(),
            'action' => 'null',
            'location' => 'null',
            'propertylist' => new List<String>{''},
            'includedPaths' => new List<String>{''},
            'enableAsyncObserver' => Boolean.getExample(),
            'observerQueueSize' => Integer.getExample()
        };

        OASClient client;
        OASConfigmgrApi api;
        OASOrgApacheJackrabbitOakPluginsDocu response;
        OASOrgApacheJackrabbitOakPluginsDocu expectedResponse;
        String js = '';

        client = new OASClient();
        api = new OASConfigmgrApi(client);

        js = JSON.serialize(OASOrgApacheJackrabbitOakPluginsDocu.getExample());
        res.setHeader('Content-Type', 'application/json');
        res.setBody(js);
        expectedResponse = OASOrgApacheJackrabbitOakPluginsDocu.getExample();
        response = (OASOrgApacheJackrabbitOakPluginsDocu) api.orgApacheJackrabbitOakPluginsDocumentSecondarySecondaryStoreCac(params);
        System.assertEquals(expectedResponse, response);
    }

    /**
     * 
     *
     * 
     */
    @isTest
    private static void orgApacheJackrabbitOakPluginsIndexAsyncIndexerServiceTest() {
        HttpResponse res = new HttpResponse();
        res.setStatusCode(200);
        res.setStatus('OK');
        Test.setMock(HttpCalloutMock.class, new OASResponseMock(res));

        Map<String, Object> params = new Map<String, Object>{
            'post' => Boolean.getExample(),
            'apply' => Boolean.getExample(),
            'r_delete' => Boolean.getExample(),
            'action' => 'null',
            'location' => 'null',
            'propertylist' => new List<String>{''},
            'asyncConfigs' => new List<String>{''},
            'leaseTimeOutMinutes' => Integer.getExample(),
            'failingIndexTimeoutSeconds' => Integer.getExample(),
            'errorWarnIntervalSeconds' => Integer.getExample()
        };

        OASClient client;
        OASConfigmgrApi api;
        OASOrgApacheJackrabbitOakPluginsInde response;
        OASOrgApacheJackrabbitOakPluginsInde expectedResponse;
        String js = '';

        client = new OASClient();
        api = new OASConfigmgrApi(client);

        js = JSON.serialize(OASOrgApacheJackrabbitOakPluginsInde.getExample());
        res.setHeader('Content-Type', 'application/json');
        res.setBody(js);
        expectedResponse = OASOrgApacheJackrabbitOakPluginsInde.getExample();
        response = (OASOrgApacheJackrabbitOakPluginsInde) api.orgApacheJackrabbitOakPluginsIndexAsyncIndexerService(params);
        System.assertEquals(expectedResponse, response);
    }

    /**
     * 
     *
     * 
     */
    @isTest
    private static void orgApacheJackrabbitOakPluginsIndexLuceneLuceneIndexProviderServTest() {
        HttpResponse res = new HttpResponse();
        res.setStatusCode(200);
        res.setStatus('OK');
        Test.setMock(HttpCalloutMock.class, new OASResponseMock(res));

        Map<String, Object> params = new Map<String, Object>{
            'post' => Boolean.getExample(),
            'apply' => Boolean.getExample(),
            'r_delete' => Boolean.getExample(),
            'action' => 'null',
            'location' => 'null',
            'propertylist' => new List<String>{''},
            'disabled' => Boolean.getExample(),
            'debug' => Boolean.getExample(),
            'localIndexDir' => 'null',
            'enableOpenIndexAsync' => Boolean.getExample(),
            'threadPoolSize' => Integer.getExample(),
            'prefetchIndexFiles' => Boolean.getExample(),
            'extractedTextCacheSizeInMB' => Integer.getExample(),
            'extractedTextCacheExpiryInSecs' => Integer.getExample(),
            'alwaysUsePreExtractedCache' => Boolean.getExample(),
            'booleanClauseLimit' => Integer.getExample(),
            'enableHybridIndexing' => Boolean.getExample(),
            'hybridQueueSize' => Integer.getExample(),
            'disableStoredIndexDefinition' => Boolean.getExample(),
            'deletedBlobsCollectionEnabled' => Boolean.getExample(),
            'propIndexCleanerIntervalInSecs' => Integer.getExample(),
            'enableSingleBlobIndexFiles' => Boolean.getExample()
        };

        OASClient client;
        OASConfigmgrApi api;
        OASOrgApacheJackrabbitOakPluginsInde response;
        OASOrgApacheJackrabbitOakPluginsInde expectedResponse;
        String js = '';

        client = new OASClient();
        api = new OASConfigmgrApi(client);

        js = JSON.serialize(OASOrgApacheJackrabbitOakPluginsInde.getExample());
        res.setHeader('Content-Type', 'application/json');
        res.setBody(js);
        expectedResponse = OASOrgApacheJackrabbitOakPluginsInde.getExample();
        response = (OASOrgApacheJackrabbitOakPluginsInde) api.orgApacheJackrabbitOakPluginsIndexLuceneLuceneIndexProviderServ(params);
        System.assertEquals(expectedResponse, response);
    }

    /**
     * 
     *
     * 
     */
    @isTest
    private static void orgApacheJackrabbitOakPluginsIndexSolrOsgiEmbeddedSolrServerCoTest() {
        HttpResponse res = new HttpResponse();
        res.setStatusCode(200);
        res.setStatus('OK');
        Test.setMock(HttpCalloutMock.class, new OASResponseMock(res));

        Map<String, Object> params = new Map<String, Object>{
            'post' => Boolean.getExample(),
            'apply' => Boolean.getExample(),
            'r_delete' => Boolean.getExample(),
            'action' => 'null',
            'location' => 'null',
            'propertylist' => new List<String>{''},
            'solrHomePath' => 'null',
            'solrCoreName' => 'null'
        };

        OASClient client;
        OASConfigmgrApi api;
        OASOrgApacheJackrabbitOakPluginsInde response;
        OASOrgApacheJackrabbitOakPluginsInde expectedResponse;
        String js = '';

        client = new OASClient();
        api = new OASConfigmgrApi(client);

        js = JSON.serialize(OASOrgApacheJackrabbitOakPluginsInde.getExample());
        res.setHeader('Content-Type', 'application/json');
        res.setBody(js);
        expectedResponse = OASOrgApacheJackrabbitOakPluginsInde.getExample();
        response = (OASOrgApacheJackrabbitOakPluginsInde) api.orgApacheJackrabbitOakPluginsIndexSolrOsgiEmbeddedSolrServerCo(params);
        System.assertEquals(expectedResponse, response);
    }

    /**
     * 
     *
     * 
     */
    @isTest
    private static void orgApacheJackrabbitOakPluginsIndexSolrOsgiNodeStateSolrServersTest() {
        HttpResponse res = new HttpResponse();
        res.setStatusCode(200);
        res.setStatus('OK');
        Test.setMock(HttpCalloutMock.class, new OASResponseMock(res));

        Map<String, Object> params = new Map<String, Object>{
            'post' => Boolean.getExample(),
            'apply' => Boolean.getExample(),
            'r_delete' => Boolean.getExample(),
            'action' => 'null',
            'location' => 'null',
            'propertylist' => new List<String>{''},
            'enabled' => Boolean.getExample()
        };

        OASClient client;
        OASConfigmgrApi api;
        OASOrgApacheJackrabbitOakPluginsInde response;
        OASOrgApacheJackrabbitOakPluginsInde expectedResponse;
        String js = '';

        client = new OASClient();
        api = new OASConfigmgrApi(client);

        js = JSON.serialize(OASOrgApacheJackrabbitOakPluginsInde.getExample());
        res.setHeader('Content-Type', 'application/json');
        res.setBody(js);
        expectedResponse = OASOrgApacheJackrabbitOakPluginsInde.getExample();
        response = (OASOrgApacheJackrabbitOakPluginsInde) api.orgApacheJackrabbitOakPluginsIndexSolrOsgiNodeStateSolrServers(params);
        System.assertEquals(expectedResponse, response);
    }

    /**
     * 
     *
     * 
     */
    @isTest
    private static void orgApacheJackrabbitOakPluginsIndexSolrOsgiOakSolrConfigurationTest() {
        HttpResponse res = new HttpResponse();
        res.setStatusCode(200);
        res.setStatus('OK');
        Test.setMock(HttpCalloutMock.class, new OASResponseMock(res));

        Map<String, Object> params = new Map<String, Object>{
            'post' => Boolean.getExample(),
            'apply' => Boolean.getExample(),
            'r_delete' => Boolean.getExample(),
            'action' => 'null',
            'location' => 'null',
            'propertylist' => new List<String>{''},
            'pathDescField' => 'null',
            'pathChildField' => 'null',
            'pathParentField' => 'null',
            'pathExactField' => 'null',
            'catchAllField' => 'null',
            'collapsedPathField' => 'null',
            'pathDepthField' => 'null',
            'commitPolicy' => 'null',
            'rows' => Integer.getExample(),
            'pathRestrictions' => Boolean.getExample(),
            'propertyRestrictions' => Boolean.getExample(),
            'primarytypesRestrictions' => Boolean.getExample(),
            'ignoredProperties' => new List<String>{''},
            'usedProperties' => new List<String>{''},
            'typeMappings' => new List<String>{''},
            'propertyMappings' => new List<String>{''},
            'collapseJcrcontentNodes' => Boolean.getExample()
        };

        OASClient client;
        OASConfigmgrApi api;
        OASOrgApacheJackrabbitOakPluginsInde response;
        OASOrgApacheJackrabbitOakPluginsInde expectedResponse;
        String js = '';

        client = new OASClient();
        api = new OASConfigmgrApi(client);

        js = JSON.serialize(OASOrgApacheJackrabbitOakPluginsInde.getExample());
        res.setHeader('Content-Type', 'application/json');
        res.setBody(js);
        expectedResponse = OASOrgApacheJackrabbitOakPluginsInde.getExample();
        response = (OASOrgApacheJackrabbitOakPluginsInde) api.orgApacheJackrabbitOakPluginsIndexSolrOsgiOakSolrConfiguration(params);
        System.assertEquals(expectedResponse, response);
    }

    /**
     * 
     *
     * 
     */
    @isTest
    private static void orgApacheJackrabbitOakPluginsIndexSolrOsgiRemoteSolrServerConfTest() {
        HttpResponse res = new HttpResponse();
        res.setStatusCode(200);
        res.setStatus('OK');
        Test.setMock(HttpCalloutMock.class, new OASResponseMock(res));

        Map<String, Object> params = new Map<String, Object>{
            'post' => Boolean.getExample(),
            'apply' => Boolean.getExample(),
            'r_delete' => Boolean.getExample(),
            'action' => 'null',
            'location' => 'null',
            'propertylist' => new List<String>{''},
            'solrHttpUrl' => 'null',
            'solrZkHost' => 'null',
            'solrCollection' => 'null',
            'solrSocketTimeout' => Integer.getExample(),
            'solrConnectionTimeout' => Integer.getExample(),
            'solrShardsNo' => Integer.getExample(),
            'solrReplicationFactor' => Integer.getExample(),
            'solrConfDir' => 'null'
        };

        OASClient client;
        OASConfigmgrApi api;
        OASOrgApacheJackrabbitOakPluginsInde response;
        OASOrgApacheJackrabbitOakPluginsInde expectedResponse;
        String js = '';

        client = new OASClient();
        api = new OASConfigmgrApi(client);

        js = JSON.serialize(OASOrgApacheJackrabbitOakPluginsInde.getExample());
        res.setHeader('Content-Type', 'application/json');
        res.setBody(js);
        expectedResponse = OASOrgApacheJackrabbitOakPluginsInde.getExample();
        response = (OASOrgApacheJackrabbitOakPluginsInde) api.orgApacheJackrabbitOakPluginsIndexSolrOsgiRemoteSolrServerConf(params);
        System.assertEquals(expectedResponse, response);
    }

    /**
     * 
     *
     * 
     */
    @isTest
    private static void orgApacheJackrabbitOakPluginsIndexSolrOsgiSolrQueryIndexProvidTest() {
        HttpResponse res = new HttpResponse();
        res.setStatusCode(200);
        res.setStatus('OK');
        Test.setMock(HttpCalloutMock.class, new OASResponseMock(res));

        Map<String, Object> params = new Map<String, Object>{
            'post' => Boolean.getExample(),
            'apply' => Boolean.getExample(),
            'r_delete' => Boolean.getExample(),
            'action' => 'null',
            'location' => 'null',
            'propertylist' => new List<String>{''},
            'queryAggregation' => Boolean.getExample()
        };

        OASClient client;
        OASConfigmgrApi api;
        OASOrgApacheJackrabbitOakPluginsInde response;
        OASOrgApacheJackrabbitOakPluginsInde expectedResponse;
        String js = '';

        client = new OASClient();
        api = new OASConfigmgrApi(client);

        js = JSON.serialize(OASOrgApacheJackrabbitOakPluginsInde.getExample());
        res.setHeader('Content-Type', 'application/json');
        res.setBody(js);
        expectedResponse = OASOrgApacheJackrabbitOakPluginsInde.getExample();
        response = (OASOrgApacheJackrabbitOakPluginsInde) api.orgApacheJackrabbitOakPluginsIndexSolrOsgiSolrQueryIndexProvid(params);
        System.assertEquals(expectedResponse, response);
    }

    /**
     * 
     *
     * 
     */
    @isTest
    private static void orgApacheJackrabbitOakPluginsIndexSolrOsgiSolrServerProviderSeTest() {
        HttpResponse res = new HttpResponse();
        res.setStatusCode(200);
        res.setStatus('OK');
        Test.setMock(HttpCalloutMock.class, new OASResponseMock(res));

        Map<String, Object> params = new Map<String, Object>{
            'post' => Boolean.getExample(),
            'apply' => Boolean.getExample(),
            'r_delete' => Boolean.getExample(),
            'action' => 'null',
            'location' => 'null',
            'propertylist' => new List<String>{''},
            'serverType' => 'null'
        };

        OASClient client;
        OASConfigmgrApi api;
        OASOrgApacheJackrabbitOakPluginsInde response;
        OASOrgApacheJackrabbitOakPluginsInde expectedResponse;
        String js = '';

        client = new OASClient();
        api = new OASConfigmgrApi(client);

        js = JSON.serialize(OASOrgApacheJackrabbitOakPluginsInde.getExample());
        res.setHeader('Content-Type', 'application/json');
        res.setBody(js);
        expectedResponse = OASOrgApacheJackrabbitOakPluginsInde.getExample();
        response = (OASOrgApacheJackrabbitOakPluginsInde) api.orgApacheJackrabbitOakPluginsIndexSolrOsgiSolrServerProviderSe(params);
        System.assertEquals(expectedResponse, response);
    }

    /**
     * 
     *
     * 
     */
    @isTest
    private static void orgApacheJackrabbitOakPluginsMetricStatisticsProviderFactoryTest() {
        HttpResponse res = new HttpResponse();
        res.setStatusCode(200);
        res.setStatus('OK');
        Test.setMock(HttpCalloutMock.class, new OASResponseMock(res));

        Map<String, Object> params = new Map<String, Object>{
            'post' => Boolean.getExample(),
            'apply' => Boolean.getExample(),
            'r_delete' => Boolean.getExample(),
            'action' => 'null',
            'location' => 'null',
            'propertylist' => new List<String>{''},
            'providerType' => 'null'
        };

        OASClient client;
        OASConfigmgrApi api;
        OASOrgApacheJackrabbitOakPluginsMetr response;
        OASOrgApacheJackrabbitOakPluginsMetr expectedResponse;
        String js = '';

        client = new OASClient();
        api = new OASConfigmgrApi(client);

        js = JSON.serialize(OASOrgApacheJackrabbitOakPluginsMetr.getExample());
        res.setHeader('Content-Type', 'application/json');
        res.setBody(js);
        expectedResponse = OASOrgApacheJackrabbitOakPluginsMetr.getExample();
        response = (OASOrgApacheJackrabbitOakPluginsMetr) api.orgApacheJackrabbitOakPluginsMetricStatisticsProviderFactory(params);
        System.assertEquals(expectedResponse, response);
    }

    /**
     * 
     *
     * 
     */
    @isTest
    private static void orgApacheJackrabbitOakPluginsObservationChangeCollectorProviderTest() {
        HttpResponse res = new HttpResponse();
        res.setStatusCode(200);
        res.setStatus('OK');
        Test.setMock(HttpCalloutMock.class, new OASResponseMock(res));

        Map<String, Object> params = new Map<String, Object>{
            'post' => Boolean.getExample(),
            'apply' => Boolean.getExample(),
            'r_delete' => Boolean.getExample(),
            'action' => 'null',
            'location' => 'null',
            'propertylist' => new List<String>{''},
            'maxItems' => Integer.getExample(),
            'maxPathDepth' => Integer.getExample(),
            'enabled' => Boolean.getExample()
        };

        OASClient client;
        OASConfigmgrApi api;
        OASOrgApacheJackrabbitOakPluginsObse response;
        OASOrgApacheJackrabbitOakPluginsObse expectedResponse;
        String js = '';

        client = new OASClient();
        api = new OASConfigmgrApi(client);

        js = JSON.serialize(OASOrgApacheJackrabbitOakPluginsObse.getExample());
        res.setHeader('Content-Type', 'application/json');
        res.setBody(js);
        expectedResponse = OASOrgApacheJackrabbitOakPluginsObse.getExample();
        response = (OASOrgApacheJackrabbitOakPluginsObse) api.orgApacheJackrabbitOakPluginsObservationChangeCollectorProvider(params);
        System.assertEquals(expectedResponse, response);
    }

    /**
     * 
     *
     * 
     */
    @isTest
    private static void orgApacheJackrabbitOakQueryQueryEngineSettingsServiceTest() {
        HttpResponse res = new HttpResponse();
        res.setStatusCode(200);
        res.setStatus('OK');
        Test.setMock(HttpCalloutMock.class, new OASResponseMock(res));

        Map<String, Object> params = new Map<String, Object>{
            'post' => Boolean.getExample(),
            'apply' => Boolean.getExample(),
            'r_delete' => Boolean.getExample(),
            'action' => 'null',
            'location' => 'null',
            'propertylist' => new List<String>{''},
            'queryLimitInMemory' => Integer.getExample(),
            'queryLimitReads' => Integer.getExample(),
            'queryFailTraversal' => Boolean.getExample(),
            'fastQuerySize' => Boolean.getExample()
        };

        OASClient client;
        OASConfigmgrApi api;
        OASOrgApacheJackrabbitOakQueryQueryE response;
        OASOrgApacheJackrabbitOakQueryQueryE expectedResponse;
        String js = '';

        client = new OASClient();
        api = new OASConfigmgrApi(client);

        js = JSON.serialize(OASOrgApacheJackrabbitOakQueryQueryE.getExample());
        res.setHeader('Content-Type', 'application/json');
        res.setBody(js);
        expectedResponse = OASOrgApacheJackrabbitOakQueryQueryE.getExample();
        response = (OASOrgApacheJackrabbitOakQueryQueryE) api.orgApacheJackrabbitOakQueryQueryEngineSettingsService(params);
        System.assertEquals(expectedResponse, response);
    }

    /**
     * 
     *
     * 
     */
    @isTest
    private static void orgApacheJackrabbitOakSecurityAuthenticationAuthenticationConfigTest() {
        HttpResponse res = new HttpResponse();
        res.setStatusCode(200);
        res.setStatus('OK');
        Test.setMock(HttpCalloutMock.class, new OASResponseMock(res));

        Map<String, Object> params = new Map<String, Object>{
            'post' => Boolean.getExample(),
            'apply' => Boolean.getExample(),
            'r_delete' => Boolean.getExample(),
            'action' => 'null',
            'location' => 'null',
            'propertylist' => new List<String>{''},
            'orgApacheJackrabbitOakAuthenticationAppName' => 'null',
            'orgApacheJackrabbitOakAuthenticationConfigSpiName' => 'null'
        };

        OASClient client;
        OASConfigmgrApi api;
        OASOrgApacheJackrabbitOakSecurityAut response;
        OASOrgApacheJackrabbitOakSecurityAut expectedResponse;
        String js = '';

        client = new OASClient();
        api = new OASConfigmgrApi(client);

        js = JSON.serialize(OASOrgApacheJackrabbitOakSecurityAut.getExample());
        res.setHeader('Content-Type', 'application/json');
        res.setBody(js);
        expectedResponse = OASOrgApacheJackrabbitOakSecurityAut.getExample();
        response = (OASOrgApacheJackrabbitOakSecurityAut) api.orgApacheJackrabbitOakSecurityAuthenticationAuthenticationConfig(params);
        System.assertEquals(expectedResponse, response);
    }

    /**
     * 
     *
     * 
     */
    @isTest
    private static void orgApacheJackrabbitOakSecurityAuthenticationLdapImplLdapIdentiTest() {
        HttpResponse res = new HttpResponse();
        res.setStatusCode(200);
        res.setStatus('OK');
        Test.setMock(HttpCalloutMock.class, new OASResponseMock(res));

        Map<String, Object> params = new Map<String, Object>{
            'post' => Boolean.getExample(),
            'apply' => Boolean.getExample(),
            'r_delete' => Boolean.getExample(),
            'action' => 'null',
            'location' => 'null',
            'propertylist' => new List<String>{''},
            'providerName' => 'null',
            'hostName' => 'null',
            'hostPort' => Integer.getExample(),
            'hostSsl' => Boolean.getExample(),
            'hostTls' => Boolean.getExample(),
            'hostNoCertCheck' => Boolean.getExample(),
            'bindDn' => 'null',
            'bindPassword' => 'null',
            'searchTimeout' => 'null',
            'adminPoolMaxActive' => Integer.getExample(),
            'adminPoolLookupOnValidate' => Boolean.getExample(),
            'userPoolMaxActive' => Integer.getExample(),
            'userPoolLookupOnValidate' => Boolean.getExample(),
            'userBaseDN' => 'null',
            'userObjectclass' => new List<String>{''},
            'userIdAttribute' => 'null',
            'userExtraFilter' => 'null',
            'userMakeDnPath' => Boolean.getExample(),
            'groupBaseDN' => 'null',
            'groupObjectclass' => new List<String>{''},
            'groupNameAttribute' => 'null',
            'groupExtraFilter' => 'null',
            'groupMakeDnPath' => Boolean.getExample(),
            'groupMemberAttribute' => 'null',
            'useUidForExtId' => Boolean.getExample(),
            'customattributes' => new List<String>{''}
        };

        OASClient client;
        OASConfigmgrApi api;
        OASOrgApacheJackrabbitOakSecurityAut response;
        OASOrgApacheJackrabbitOakSecurityAut expectedResponse;
        String js = '';

        client = new OASClient();
        api = new OASConfigmgrApi(client);

        js = JSON.serialize(OASOrgApacheJackrabbitOakSecurityAut.getExample());
        res.setHeader('Content-Type', 'application/json');
        res.setBody(js);
        expectedResponse = OASOrgApacheJackrabbitOakSecurityAut.getExample();
        response = (OASOrgApacheJackrabbitOakSecurityAut) api.orgApacheJackrabbitOakSecurityAuthenticationLdapImplLdapIdenti(params);
        System.assertEquals(expectedResponse, response);
    }

    /**
     * 
     *
     * 
     */
    @isTest
    private static void orgApacheJackrabbitOakSecurityAuthenticationTokenTokenConfiguraTest() {
        HttpResponse res = new HttpResponse();
        res.setStatusCode(200);
        res.setStatus('OK');
        Test.setMock(HttpCalloutMock.class, new OASResponseMock(res));

        Map<String, Object> params = new Map<String, Object>{
            'post' => Boolean.getExample(),
            'apply' => Boolean.getExample(),
            'r_delete' => Boolean.getExample(),
            'action' => 'null',
            'location' => 'null',
            'propertylist' => new List<String>{''},
            'tokenExpiration' => 'null',
            'tokenLength' => 'null',
            'tokenRefresh' => Boolean.getExample(),
            'tokenCleanupThreshold' => Integer.getExample(),
            'passwordHashAlgorithm' => 'null',
            'passwordHashIterations' => Integer.getExample(),
            'passwordSaltSize' => Integer.getExample()
        };

        OASClient client;
        OASConfigmgrApi api;
        OASOrgApacheJackrabbitOakSecurityAut response;
        OASOrgApacheJackrabbitOakSecurityAut expectedResponse;
        String js = '';

        client = new OASClient();
        api = new OASConfigmgrApi(client);

        js = JSON.serialize(OASOrgApacheJackrabbitOakSecurityAut.getExample());
        res.setHeader('Content-Type', 'application/json');
        res.setBody(js);
        expectedResponse = OASOrgApacheJackrabbitOakSecurityAut.getExample();
        response = (OASOrgApacheJackrabbitOakSecurityAut) api.orgApacheJackrabbitOakSecurityAuthenticationTokenTokenConfigura(params);
        System.assertEquals(expectedResponse, response);
    }

    /**
     * 
     *
     * 
     */
    @isTest
    private static void orgApacheJackrabbitOakSecurityAuthorizationAuthorizationConfigurTest() {
        HttpResponse res = new HttpResponse();
        res.setStatusCode(200);
        res.setStatus('OK');
        Test.setMock(HttpCalloutMock.class, new OASResponseMock(res));

        Map<String, Object> params = new Map<String, Object>{
            'post' => Boolean.getExample(),
            'apply' => Boolean.getExample(),
            'r_delete' => Boolean.getExample(),
            'action' => 'null',
            'location' => 'null',
            'propertylist' => new List<String>{''},
            'permissionsJr2' => 'null',
            'importBehavior' => 'null',
            'readPaths' => new List<String>{''},
            'administrativePrincipals' => new List<String>{''},
            'configurationRanking' => Integer.getExample()
        };

        OASClient client;
        OASConfigmgrApi api;
        OASOrgApacheJackrabbitOakSecurityAut response;
        OASOrgApacheJackrabbitOakSecurityAut expectedResponse;
        String js = '';

        client = new OASClient();
        api = new OASConfigmgrApi(client);

        js = JSON.serialize(OASOrgApacheJackrabbitOakSecurityAut.getExample());
        res.setHeader('Content-Type', 'application/json');
        res.setBody(js);
        expectedResponse = OASOrgApacheJackrabbitOakSecurityAut.getExample();
        response = (OASOrgApacheJackrabbitOakSecurityAut) api.orgApacheJackrabbitOakSecurityAuthorizationAuthorizationConfigur(params);
        System.assertEquals(expectedResponse, response);
    }

    /**
     * 
     *
     * 
     */
    @isTest
    private static void orgApacheJackrabbitOakSecurityInternalSecurityProviderRegistratiTest() {
        HttpResponse res = new HttpResponse();
        res.setStatusCode(200);
        res.setStatus('OK');
        Test.setMock(HttpCalloutMock.class, new OASResponseMock(res));

        Map<String, Object> params = new Map<String, Object>{
            'post' => Boolean.getExample(),
            'apply' => Boolean.getExample(),
            'r_delete' => Boolean.getExample(),
            'action' => 'null',
            'location' => 'null',
            'propertylist' => new List<String>{''},
            'requiredServicePids' => new List<String>{''},
            'authorizationCompositionType' => 'null'
        };

        OASClient client;
        OASConfigmgrApi api;
        OASOrgApacheJackrabbitOakSecurityInt response;
        OASOrgApacheJackrabbitOakSecurityInt expectedResponse;
        String js = '';

        client = new OASClient();
        api = new OASConfigmgrApi(client);

        js = JSON.serialize(OASOrgApacheJackrabbitOakSecurityInt.getExample());
        res.setHeader('Content-Type', 'application/json');
        res.setBody(js);
        expectedResponse = OASOrgApacheJackrabbitOakSecurityInt.getExample();
        response = (OASOrgApacheJackrabbitOakSecurityInt) api.orgApacheJackrabbitOakSecurityInternalSecurityProviderRegistrati(params);
        System.assertEquals(expectedResponse, response);
    }

    /**
     * 
     *
     * 
     */
    @isTest
    private static void orgApacheJackrabbitOakSecurityUserRandomAuthorizableNodeNameTest() {
        HttpResponse res = new HttpResponse();
        res.setStatusCode(200);
        res.setStatus('OK');
        Test.setMock(HttpCalloutMock.class, new OASResponseMock(res));

        Map<String, Object> params = new Map<String, Object>{
            'post' => Boolean.getExample(),
            'apply' => Boolean.getExample(),
            'r_delete' => Boolean.getExample(),
            'action' => 'null',
            'location' => 'null',
            'propertylist' => new List<String>{''},
            'length' => Integer.getExample()
        };

        OASClient client;
        OASConfigmgrApi api;
        OASOrgApacheJackrabbitOakSecurityUse response;
        OASOrgApacheJackrabbitOakSecurityUse expectedResponse;
        String js = '';

        client = new OASClient();
        api = new OASConfigmgrApi(client);

        js = JSON.serialize(OASOrgApacheJackrabbitOakSecurityUse.getExample());
        res.setHeader('Content-Type', 'application/json');
        res.setBody(js);
        expectedResponse = OASOrgApacheJackrabbitOakSecurityUse.getExample();
        response = (OASOrgApacheJackrabbitOakSecurityUse) api.orgApacheJackrabbitOakSecurityUserRandomAuthorizableNodeName(params);
        System.assertEquals(expectedResponse, response);
    }

    /**
     * 
     *
     * 
     */
    @isTest
    private static void orgApacheJackrabbitOakSecurityUserUserConfigurationImplTest() {
        HttpResponse res = new HttpResponse();
        res.setStatusCode(200);
        res.setStatus('OK');
        Test.setMock(HttpCalloutMock.class, new OASResponseMock(res));

        Map<String, Object> params = new Map<String, Object>{
            'post' => Boolean.getExample(),
            'apply' => Boolean.getExample(),
            'r_delete' => Boolean.getExample(),
            'action' => 'null',
            'location' => 'null',
            'propertylist' => new List<String>{''},
            'usersPath' => 'null',
            'groupsPath' => 'null',
            'systemRelativePath' => 'null',
            'defaultDepth' => Integer.getExample(),
            'importBehavior' => 'null',
            'passwordHashAlgorithm' => 'null',
            'passwordHashIterations' => Integer.getExample(),
            'passwordSaltSize' => Integer.getExample(),
            'omitAdminPw' => Boolean.getExample(),
            'supportAutoSave' => Boolean.getExample(),
            'passwordMaxAge' => Integer.getExample(),
            'initialPasswordChange' => Boolean.getExample(),
            'passwordHistorySize' => Integer.getExample(),
            'passwordExpiryForAdmin' => Boolean.getExample(),
            'cacheExpiration' => Integer.getExample(),
            'enableRFC7613UsercaseMappedProfile' => Boolean.getExample()
        };

        OASClient client;
        OASConfigmgrApi api;
        OASOrgApacheJackrabbitOakSecurityUse response;
        OASOrgApacheJackrabbitOakSecurityUse expectedResponse;
        String js = '';

        client = new OASClient();
        api = new OASConfigmgrApi(client);

        js = JSON.serialize(OASOrgApacheJackrabbitOakSecurityUse.getExample());
        res.setHeader('Content-Type', 'application/json');
        res.setBody(js);
        expectedResponse = OASOrgApacheJackrabbitOakSecurityUse.getExample();
        response = (OASOrgApacheJackrabbitOakSecurityUse) api.orgApacheJackrabbitOakSecurityUserUserConfigurationImpl(params);
        System.assertEquals(expectedResponse, response);
    }

    /**
     * 
     *
     * 
     */
    @isTest
    private static void orgApacheJackrabbitOakSegmentAzureAzureSegmentStoreServiceTest() {
        HttpResponse res = new HttpResponse();
        res.setStatusCode(200);
        res.setStatus('OK');
        Test.setMock(HttpCalloutMock.class, new OASResponseMock(res));

        Map<String, Object> params = new Map<String, Object>{
            'post' => Boolean.getExample(),
            'apply' => Boolean.getExample(),
            'r_delete' => Boolean.getExample(),
            'action' => 'null',
            'location' => 'null',
            'propertylist' => new List<String>{''},
            'accountName' => 'null',
            'containerName' => 'null',
            'accessKey' => 'null',
            'rootPath' => 'null',
            'connectionURL' => 'null'
        };

        OASClient client;
        OASConfigmgrApi api;
        OASOrgApacheJackrabbitOakSegmentAzur response;
        OASOrgApacheJackrabbitOakSegmentAzur expectedResponse;
        String js = '';

        client = new OASClient();
        api = new OASConfigmgrApi(client);

        js = JSON.serialize(OASOrgApacheJackrabbitOakSegmentAzur.getExample());
        res.setHeader('Content-Type', 'application/json');
        res.setBody(js);
        expectedResponse = OASOrgApacheJackrabbitOakSegmentAzur.getExample();
        response = (OASOrgApacheJackrabbitOakSegmentAzur) api.orgApacheJackrabbitOakSegmentAzureAzureSegmentStoreService(params);
        System.assertEquals(expectedResponse, response);
    }

    /**
     * 
     *
     * 
     */
    @isTest
    private static void orgApacheJackrabbitOakSegmentSegmentNodeStoreFactoryTest() {
        HttpResponse res = new HttpResponse();
        res.setStatusCode(200);
        res.setStatus('OK');
        Test.setMock(HttpCalloutMock.class, new OASResponseMock(res));

        Map<String, Object> params = new Map<String, Object>{
            'post' => Boolean.getExample(),
            'apply' => Boolean.getExample(),
            'r_delete' => Boolean.getExample(),
            'action' => 'null',
            'location' => 'null',
            'propertylist' => new List<String>{''},
            'repositoryHome' => 'null',
            'tarmkMode' => 'null',
            'tarmkSize' => Integer.getExample(),
            'segmentCacheSize' => Integer.getExample(),
            'stringCacheSize' => Integer.getExample(),
            'templateCacheSize' => Integer.getExample(),
            'stringDeduplicationCacheSize' => Integer.getExample(),
            'templateDeduplicationCacheSize' => Integer.getExample(),
            'nodeDeduplicationCacheSize' => Integer.getExample(),
            'pauseCompaction' => Boolean.getExample(),
            'compactionRetryCount' => Integer.getExample(),
            'compactionForceTimeout' => Integer.getExample(),
            'compactionSizeDeltaEstimation' => Integer.getExample(),
            'compactionDisableEstimation' => Boolean.getExample(),
            'compactionRetainedGenerations' => Integer.getExample(),
            'compactionMemoryThreshold' => Integer.getExample(),
            'compactionProgressLog' => Integer.getExample(),
            'standby' => Boolean.getExample(),
            'customBlobStore' => Boolean.getExample(),
            'customSegmentStore' => Boolean.getExample(),
            'splitPersistence' => Boolean.getExample(),
            'repositoryBackupDir' => 'null',
            'blobGcMaxAgeInSecs' => Integer.getExample(),
            'blobTrackSnapshotIntervalInSecs' => Integer.getExample(),
            'role' => 'null',
            'registerDescriptors' => Boolean.getExample(),
            'dispatchChanges' => Boolean.getExample()
        };

        OASClient client;
        OASConfigmgrApi api;
        OASOrgApacheJackrabbitOakSegmentSegm response;
        OASOrgApacheJackrabbitOakSegmentSegm expectedResponse;
        String js = '';

        client = new OASClient();
        api = new OASConfigmgrApi(client);

        js = JSON.serialize(OASOrgApacheJackrabbitOakSegmentSegm.getExample());
        res.setHeader('Content-Type', 'application/json');
        res.setBody(js);
        expectedResponse = OASOrgApacheJackrabbitOakSegmentSegm.getExample();
        response = (OASOrgApacheJackrabbitOakSegmentSegm) api.orgApacheJackrabbitOakSegmentSegmentNodeStoreFactory(params);
        System.assertEquals(expectedResponse, response);
    }

    /**
     * 
     *
     * 
     */
    @isTest
    private static void orgApacheJackrabbitOakSegmentSegmentNodeStoreMonitorServiceTest() {
        HttpResponse res = new HttpResponse();
        res.setStatusCode(200);
        res.setStatus('OK');
        Test.setMock(HttpCalloutMock.class, new OASResponseMock(res));

        Map<String, Object> params = new Map<String, Object>{
            'post' => Boolean.getExample(),
            'apply' => Boolean.getExample(),
            'r_delete' => Boolean.getExample(),
            'action' => 'null',
            'location' => 'null',
            'propertylist' => new List<String>{''},
            'commitsTrackerWriterGroups' => new List<String>{''}
        };

        OASClient client;
        OASConfigmgrApi api;
        OASOrgApacheJackrabbitOakSegmentSegm response;
        OASOrgApacheJackrabbitOakSegmentSegm expectedResponse;
        String js = '';

        client = new OASClient();
        api = new OASConfigmgrApi(client);

        js = JSON.serialize(OASOrgApacheJackrabbitOakSegmentSegm.getExample());
        res.setHeader('Content-Type', 'application/json');
        res.setBody(js);
        expectedResponse = OASOrgApacheJackrabbitOakSegmentSegm.getExample();
        response = (OASOrgApacheJackrabbitOakSegmentSegm) api.orgApacheJackrabbitOakSegmentSegmentNodeStoreMonitorService(params);
        System.assertEquals(expectedResponse, response);
    }

    /**
     * 
     *
     * 
     */
    @isTest
    private static void orgApacheJackrabbitOakSegmentSegmentNodeStoreServiceTest() {
        HttpResponse res = new HttpResponse();
        res.setStatusCode(200);
        res.setStatus('OK');
        Test.setMock(HttpCalloutMock.class, new OASResponseMock(res));

        Map<String, Object> params = new Map<String, Object>{
            'post' => Boolean.getExample(),
            'apply' => Boolean.getExample(),
            'r_delete' => Boolean.getExample(),
            'action' => 'null',
            'location' => 'null',
            'propertylist' => new List<String>{''},
            'repositoryHome' => 'null',
            'tarmkMode' => 'null',
            'tarmkSize' => Integer.getExample(),
            'segmentCacheSize' => Integer.getExample(),
            'stringCacheSize' => Integer.getExample(),
            'templateCacheSize' => Integer.getExample(),
            'stringDeduplicationCacheSize' => Integer.getExample(),
            'templateDeduplicationCacheSize' => Integer.getExample(),
            'nodeDeduplicationCacheSize' => Integer.getExample(),
            'pauseCompaction' => Boolean.getExample(),
            'compactionRetryCount' => Integer.getExample(),
            'compactionForceTimeout' => Integer.getExample(),
            'compactionSizeDeltaEstimation' => Integer.getExample(),
            'compactionDisableEstimation' => Boolean.getExample(),
            'compactionRetainedGenerations' => Integer.getExample(),
            'compactionMemoryThreshold' => Integer.getExample(),
            'compactionProgressLog' => Integer.getExample(),
            'standby' => Boolean.getExample(),
            'customBlobStore' => Boolean.getExample(),
            'customSegmentStore' => Boolean.getExample(),
            'splitPersistence' => Boolean.getExample(),
            'repositoryBackupDir' => 'null',
            'blobGcMaxAgeInSecs' => Integer.getExample(),
            'blobTrackSnapshotIntervalInSecs' => Integer.getExample()
        };

        OASClient client;
        OASConfigmgrApi api;
        OASOrgApacheJackrabbitOakSegmentSegm response;
        OASOrgApacheJackrabbitOakSegmentSegm expectedResponse;
        String js = '';

        client = new OASClient();
        api = new OASConfigmgrApi(client);

        js = JSON.serialize(OASOrgApacheJackrabbitOakSegmentSegm.getExample());
        res.setHeader('Content-Type', 'application/json');
        res.setBody(js);
        expectedResponse = OASOrgApacheJackrabbitOakSegmentSegm.getExample();
        response = (OASOrgApacheJackrabbitOakSegmentSegm) api.orgApacheJackrabbitOakSegmentSegmentNodeStoreService(params);
        System.assertEquals(expectedResponse, response);
    }

    /**
     * 
     *
     * 
     */
    @isTest
    private static void orgApacheJackrabbitOakSegmentStandbyStoreStandbyStoreServiceTest() {
        HttpResponse res = new HttpResponse();
        res.setStatusCode(200);
        res.setStatus('OK');
        Test.setMock(HttpCalloutMock.class, new OASResponseMock(res));

        Map<String, Object> params = new Map<String, Object>{
            'post' => Boolean.getExample(),
            'apply' => Boolean.getExample(),
            'r_delete' => Boolean.getExample(),
            'action' => 'null',
            'location' => 'null',
            'propertylist' => new List<String>{''},
            'orgApacheSlingInstallerConfigurationPersist' => Boolean.getExample(),
            'mode' => 'null',
            'port' => Integer.getExample(),
            'primaryHost' => 'null',
            'interval' => Integer.getExample(),
            'primaryAllowedClientIpRanges' => new List<String>{''},
            'secure' => Boolean.getExample(),
            'standbyReadtimeout' => Integer.getExample(),
            'standbyAutoclean' => Boolean.getExample()
        };

        OASClient client;
        OASConfigmgrApi api;
        OASOrgApacheJackrabbitOakSegmentStan response;
        OASOrgApacheJackrabbitOakSegmentStan expectedResponse;
        String js = '';

        client = new OASClient();
        api = new OASConfigmgrApi(client);

        js = JSON.serialize(OASOrgApacheJackrabbitOakSegmentStan.getExample());
        res.setHeader('Content-Type', 'application/json');
        res.setBody(js);
        expectedResponse = OASOrgApacheJackrabbitOakSegmentStan.getExample();
        response = (OASOrgApacheJackrabbitOakSegmentStan) api.orgApacheJackrabbitOakSegmentStandbyStoreStandbyStoreService(params);
        System.assertEquals(expectedResponse, response);
    }

    /**
     * 
     *
     * 
     */
    @isTest
    private static void orgApacheJackrabbitOakSpiSecurityAuthenticationExternalImplDeTest() {
        HttpResponse res = new HttpResponse();
        res.setStatusCode(200);
        res.setStatus('OK');
        Test.setMock(HttpCalloutMock.class, new OASResponseMock(res));

        Map<String, Object> params = new Map<String, Object>{
            'post' => Boolean.getExample(),
            'apply' => Boolean.getExample(),
            'r_delete' => Boolean.getExample(),
            'action' => 'null',
            'location' => 'null',
            'propertylist' => new List<String>{''},
            'handlerName' => 'null',
            'userExpirationTime' => 'null',
            'userAutoMembership' => new List<String>{''},
            'userPropertyMapping' => new List<String>{''},
            'userPathPrefix' => 'null',
            'userMembershipExpTime' => 'null',
            'userMembershipNestingDepth' => Integer.getExample(),
            'userDynamicMembership' => Boolean.getExample(),
            'userDisableMissing' => Boolean.getExample(),
            'groupExpirationTime' => 'null',
            'groupAutoMembership' => new List<String>{''},
            'groupPropertyMapping' => new List<String>{''},
            'groupPathPrefix' => 'null',
            'enableRFC7613UsercaseMappedProfile' => Boolean.getExample()
        };

        OASClient client;
        OASConfigmgrApi api;
        OASOrgApacheJackrabbitOakSpiSecurity response;
        OASOrgApacheJackrabbitOakSpiSecurity expectedResponse;
        String js = '';

        client = new OASClient();
        api = new OASConfigmgrApi(client);

        js = JSON.serialize(OASOrgApacheJackrabbitOakSpiSecurity.getExample());
        res.setHeader('Content-Type', 'application/json');
        res.setBody(js);
        expectedResponse = OASOrgApacheJackrabbitOakSpiSecurity.getExample();
        response = (OASOrgApacheJackrabbitOakSpiSecurity) api.orgApacheJackrabbitOakSpiSecurityAuthenticationExternalImplDe(params);
        System.assertEquals(expectedResponse, response);
    }

    /**
     * 
     *
     * 
     */
    @isTest
    private static void orgApacheJackrabbitOakSpiSecurityAuthenticationExternalImplExTest() {
        HttpResponse res = new HttpResponse();
        res.setStatusCode(200);
        res.setStatus('OK');
        Test.setMock(HttpCalloutMock.class, new OASResponseMock(res));

        Map<String, Object> params = new Map<String, Object>{
            'post' => Boolean.getExample(),
            'apply' => Boolean.getExample(),
            'r_delete' => Boolean.getExample(),
            'action' => 'null',
            'location' => 'null',
            'propertylist' => new List<String>{''},
            'jaasRanking' => Integer.getExample(),
            'jaasControlFlag' => 'null',
            'jaasRealmName' => 'null',
            'idpName' => 'null',
            'syncHandlerName' => 'null'
        };

        OASClient client;
        OASConfigmgrApi api;
        OASOrgApacheJackrabbitOakSpiSecurity response;
        OASOrgApacheJackrabbitOakSpiSecurity expectedResponse;
        String js = '';

        client = new OASClient();
        api = new OASConfigmgrApi(client);

        js = JSON.serialize(OASOrgApacheJackrabbitOakSpiSecurity.getExample());
        res.setHeader('Content-Type', 'application/json');
        res.setBody(js);
        expectedResponse = OASOrgApacheJackrabbitOakSpiSecurity.getExample();
        response = (OASOrgApacheJackrabbitOakSpiSecurity) api.orgApacheJackrabbitOakSpiSecurityAuthenticationExternalImplEx(params);
        System.assertEquals(expectedResponse, response);
    }

    /**
     * 
     *
     * 
     */
    @isTest
    private static void orgApacheJackrabbitOakSpiSecurityAuthenticationExternalImplPrTest() {
        HttpResponse res = new HttpResponse();
        res.setStatusCode(200);
        res.setStatus('OK');
        Test.setMock(HttpCalloutMock.class, new OASResponseMock(res));

        Map<String, Object> params = new Map<String, Object>{
            'post' => Boolean.getExample(),
            'apply' => Boolean.getExample(),
            'r_delete' => Boolean.getExample(),
            'action' => 'null',
            'location' => 'null',
            'propertylist' => new List<String>{''},
            'protectExternalId' => Boolean.getExample()
        };

        OASClient client;
        OASConfigmgrApi api;
        OASOrgApacheJackrabbitOakSpiSecurity response;
        OASOrgApacheJackrabbitOakSpiSecurity expectedResponse;
        String js = '';

        client = new OASClient();
        api = new OASConfigmgrApi(client);

        js = JSON.serialize(OASOrgApacheJackrabbitOakSpiSecurity.getExample());
        res.setHeader('Content-Type', 'application/json');
        res.setBody(js);
        expectedResponse = OASOrgApacheJackrabbitOakSpiSecurity.getExample();
        response = (OASOrgApacheJackrabbitOakSpiSecurity) api.orgApacheJackrabbitOakSpiSecurityAuthenticationExternalImplPr(params);
        System.assertEquals(expectedResponse, response);
    }

    /**
     * 
     *
     * 
     */
    @isTest
    private static void orgApacheJackrabbitOakSpiSecurityAuthorizationCugImplCugConfiTest() {
        HttpResponse res = new HttpResponse();
        res.setStatusCode(200);
        res.setStatus('OK');
        Test.setMock(HttpCalloutMock.class, new OASResponseMock(res));

        Map<String, Object> params = new Map<String, Object>{
            'post' => Boolean.getExample(),
            'apply' => Boolean.getExample(),
            'r_delete' => Boolean.getExample(),
            'action' => 'null',
            'location' => 'null',
            'propertylist' => new List<String>{''},
            'cugSupportedPaths' => new List<String>{''},
            'cugEnabled' => Boolean.getExample(),
            'configurationRanking' => Integer.getExample()
        };

        OASClient client;
        OASConfigmgrApi api;
        OASOrgApacheJackrabbitOakSpiSecurity response;
        OASOrgApacheJackrabbitOakSpiSecurity expectedResponse;
        String js = '';

        client = new OASClient();
        api = new OASConfigmgrApi(client);

        js = JSON.serialize(OASOrgApacheJackrabbitOakSpiSecurity.getExample());
        res.setHeader('Content-Type', 'application/json');
        res.setBody(js);
        expectedResponse = OASOrgApacheJackrabbitOakSpiSecurity.getExample();
        response = (OASOrgApacheJackrabbitOakSpiSecurity) api.orgApacheJackrabbitOakSpiSecurityAuthorizationCugImplCugConfi(params);
        System.assertEquals(expectedResponse, response);
    }

    /**
     * 
     *
     * 
     */
    @isTest
    private static void orgApacheJackrabbitOakSpiSecurityAuthorizationCugImplCugExcluTest() {
        HttpResponse res = new HttpResponse();
        res.setStatusCode(200);
        res.setStatus('OK');
        Test.setMock(HttpCalloutMock.class, new OASResponseMock(res));

        Map<String, Object> params = new Map<String, Object>{
            'post' => Boolean.getExample(),
            'apply' => Boolean.getExample(),
            'r_delete' => Boolean.getExample(),
            'action' => 'null',
            'location' => 'null',
            'propertylist' => new List<String>{''},
            'principalNames' => new List<String>{''}
        };

        OASClient client;
        OASConfigmgrApi api;
        OASOrgApacheJackrabbitOakSpiSecurity response;
        OASOrgApacheJackrabbitOakSpiSecurity expectedResponse;
        String js = '';

        client = new OASClient();
        api = new OASConfigmgrApi(client);

        js = JSON.serialize(OASOrgApacheJackrabbitOakSpiSecurity.getExample());
        res.setHeader('Content-Type', 'application/json');
        res.setBody(js);
        expectedResponse = OASOrgApacheJackrabbitOakSpiSecurity.getExample();
        response = (OASOrgApacheJackrabbitOakSpiSecurity) api.orgApacheJackrabbitOakSpiSecurityAuthorizationCugImplCugExclu(params);
        System.assertEquals(expectedResponse, response);
    }

    /**
     * 
     *
     * 
     */
    @isTest
    private static void orgApacheJackrabbitOakSpiSecurityUserActionDefaultAuthorizableTest() {
        HttpResponse res = new HttpResponse();
        res.setStatusCode(200);
        res.setStatus('OK');
        Test.setMock(HttpCalloutMock.class, new OASResponseMock(res));

        Map<String, Object> params = new Map<String, Object>{
            'post' => Boolean.getExample(),
            'apply' => Boolean.getExample(),
            'r_delete' => Boolean.getExample(),
            'action' => 'null',
            'location' => 'null',
            'propertylist' => new List<String>{''},
            'enabledActions' => 'null',
            'userPrivilegeNames' => new List<String>{''},
            'groupPrivilegeNames' => new List<String>{''},
            'constraint' => 'null'
        };

        OASClient client;
        OASConfigmgrApi api;
        OASOrgApacheJackrabbitOakSpiSecurity response;
        OASOrgApacheJackrabbitOakSpiSecurity expectedResponse;
        String js = '';

        client = new OASClient();
        api = new OASConfigmgrApi(client);

        js = JSON.serialize(OASOrgApacheJackrabbitOakSpiSecurity.getExample());
        res.setHeader('Content-Type', 'application/json');
        res.setBody(js);
        expectedResponse = OASOrgApacheJackrabbitOakSpiSecurity.getExample();
        response = (OASOrgApacheJackrabbitOakSpiSecurity) api.orgApacheJackrabbitOakSpiSecurityUserActionDefaultAuthorizable(params);
        System.assertEquals(expectedResponse, response);
    }

    /**
     * 
     *
     * 
     */
    @isTest
    private static void orgApacheJackrabbitVaultPackagingImplPackagingImplTest() {
        HttpResponse res = new HttpResponse();
        res.setStatusCode(200);
        res.setStatus('OK');
        Test.setMock(HttpCalloutMock.class, new OASResponseMock(res));

        Map<String, Object> params = new Map<String, Object>{
            'post' => Boolean.getExample(),
            'apply' => Boolean.getExample(),
            'r_delete' => Boolean.getExample(),
            'action' => 'null',
            'location' => 'null',
            'propertylist' => new List<String>{''},
            'packageRoots' => new List<String>{''}
        };

        OASClient client;
        OASConfigmgrApi api;
        OASOrgApacheJackrabbitVaultPackaging response;
        OASOrgApacheJackrabbitVaultPackaging expectedResponse;
        String js = '';

        client = new OASClient();
        api = new OASConfigmgrApi(client);

        js = JSON.serialize(OASOrgApacheJackrabbitVaultPackaging.getExample());
        res.setHeader('Content-Type', 'application/json');
        res.setBody(js);
        expectedResponse = OASOrgApacheJackrabbitVaultPackaging.getExample();
        response = (OASOrgApacheJackrabbitVaultPackaging) api.orgApacheJackrabbitVaultPackagingImplPackagingImpl(params);
        System.assertEquals(expectedResponse, response);
    }

    /**
     * 
     *
     * 
     */
    @isTest
    private static void orgApacheJackrabbitVaultPackagingRegistryImplFSPackageRegistryTest() {
        HttpResponse res = new HttpResponse();
        res.setStatusCode(200);
        res.setStatus('OK');
        Test.setMock(HttpCalloutMock.class, new OASResponseMock(res));

        Map<String, Object> params = new Map<String, Object>{
            'post' => Boolean.getExample(),
            'apply' => Boolean.getExample(),
            'r_delete' => Boolean.getExample(),
            'action' => 'null',
            'location' => 'null',
            'propertylist' => new List<String>{''},
            'homePath' => 'null'
        };

        OASClient client;
        OASConfigmgrApi api;
        OASOrgApacheJackrabbitVaultPackaging response;
        OASOrgApacheJackrabbitVaultPackaging expectedResponse;
        String js = '';

        client = new OASClient();
        api = new OASConfigmgrApi(client);

        js = JSON.serialize(OASOrgApacheJackrabbitVaultPackaging.getExample());
        res.setHeader('Content-Type', 'application/json');
        res.setBody(js);
        expectedResponse = OASOrgApacheJackrabbitVaultPackaging.getExample();
        response = (OASOrgApacheJackrabbitVaultPackaging) api.orgApacheJackrabbitVaultPackagingRegistryImplFSPackageRegistry(params);
        System.assertEquals(expectedResponse, response);
    }

    /**
     * 
     *
     * 
     */
    @isTest
    private static void orgApacheSlingAuthCoreImplLogoutServletTest() {
        HttpResponse res = new HttpResponse();
        res.setStatusCode(200);
        res.setStatus('OK');
        Test.setMock(HttpCalloutMock.class, new OASResponseMock(res));

        Map<String, Object> params = new Map<String, Object>{
            'post' => Boolean.getExample(),
            'apply' => Boolean.getExample(),
            'r_delete' => Boolean.getExample(),
            'action' => 'null',
            'location' => 'null',
            'propertylist' => new List<String>{''},
            'slingServletMethods' => new List<String>{''},
            'slingServletPaths' => 'null'
        };

        OASClient client;
        OASConfigmgrApi api;
        OASOrgApacheSlingAuthCoreImplLogoutS response;
        OASOrgApacheSlingAuthCoreImplLogoutS expectedResponse;
        String js = '';

        client = new OASClient();
        api = new OASConfigmgrApi(client);

        js = JSON.serialize(OASOrgApacheSlingAuthCoreImplLogoutS.getExample());
        res.setHeader('Content-Type', 'application/json');
        res.setBody(js);
        expectedResponse = OASOrgApacheSlingAuthCoreImplLogoutS.getExample();
        response = (OASOrgApacheSlingAuthCoreImplLogoutS) api.orgApacheSlingAuthCoreImplLogoutServlet(params);
        System.assertEquals(expectedResponse, response);
    }

    /**
     * 
     *
     * 
     */
    @isTest
    private static void orgApacheSlingCaconfigImplConfigurationBindingsValueProviderTest() {
        HttpResponse res = new HttpResponse();
        res.setStatusCode(200);
        res.setStatus('OK');
        Test.setMock(HttpCalloutMock.class, new OASResponseMock(res));

        Map<String, Object> params = new Map<String, Object>{
            'post' => Boolean.getExample(),
            'apply' => Boolean.getExample(),
            'r_delete' => Boolean.getExample(),
            'action' => 'null',
            'location' => 'null',
            'propertylist' => new List<String>{''},
            'enabled' => Boolean.getExample()
        };

        OASClient client;
        OASConfigmgrApi api;
        OASOrgApacheSlingCaconfigImplConfigu response;
        OASOrgApacheSlingCaconfigImplConfigu expectedResponse;
        String js = '';

        client = new OASClient();
        api = new OASConfigmgrApi(client);

        js = JSON.serialize(OASOrgApacheSlingCaconfigImplConfigu.getExample());
        res.setHeader('Content-Type', 'application/json');
        res.setBody(js);
        expectedResponse = OASOrgApacheSlingCaconfigImplConfigu.getExample();
        response = (OASOrgApacheSlingCaconfigImplConfigu) api.orgApacheSlingCaconfigImplConfigurationBindingsValueProvider(params);
        System.assertEquals(expectedResponse, response);
    }

    /**
     * 
     *
     * 
     */
    @isTest
    private static void orgApacheSlingCaconfigImplConfigurationResolverImplTest() {
        HttpResponse res = new HttpResponse();
        res.setStatusCode(200);
        res.setStatus('OK');
        Test.setMock(HttpCalloutMock.class, new OASResponseMock(res));

        Map<String, Object> params = new Map<String, Object>{
            'post' => Boolean.getExample(),
            'apply' => Boolean.getExample(),
            'r_delete' => Boolean.getExample(),
            'action' => 'null',
            'location' => 'null',
            'propertylist' => new List<String>{''},
            'configBucketNames' => new List<String>{''}
        };

        OASClient client;
        OASConfigmgrApi api;
        OASOrgApacheSlingCaconfigImplConfigu response;
        OASOrgApacheSlingCaconfigImplConfigu expectedResponse;
        String js = '';

        client = new OASClient();
        api = new OASConfigmgrApi(client);

        js = JSON.serialize(OASOrgApacheSlingCaconfigImplConfigu.getExample());
        res.setHeader('Content-Type', 'application/json');
        res.setBody(js);
        expectedResponse = OASOrgApacheSlingCaconfigImplConfigu.getExample();
        response = (OASOrgApacheSlingCaconfigImplConfigu) api.orgApacheSlingCaconfigImplConfigurationResolverImpl(params);
        System.assertEquals(expectedResponse, response);
    }

    /**
     * 
     *
     * 
     */
    @isTest
    private static void orgApacheSlingCaconfigImplDefDefaultConfigurationInheritanceStraTest() {
        HttpResponse res = new HttpResponse();
        res.setStatusCode(200);
        res.setStatus('OK');
        Test.setMock(HttpCalloutMock.class, new OASResponseMock(res));

        Map<String, Object> params = new Map<String, Object>{
            'post' => Boolean.getExample(),
            'apply' => Boolean.getExample(),
            'r_delete' => Boolean.getExample(),
            'action' => 'null',
            'location' => 'null',
            'propertylist' => new List<String>{''},
            'enabled' => Boolean.getExample(),
            'configPropertyInheritancePropertyNames' => new List<String>{''}
        };

        OASClient client;
        OASConfigmgrApi api;
        OASOrgApacheSlingCaconfigImplDefDefa response;
        OASOrgApacheSlingCaconfigImplDefDefa expectedResponse;
        String js = '';

        client = new OASClient();
        api = new OASConfigmgrApi(client);

        js = JSON.serialize(OASOrgApacheSlingCaconfigImplDefDefa.getExample());
        res.setHeader('Content-Type', 'application/json');
        res.setBody(js);
        expectedResponse = OASOrgApacheSlingCaconfigImplDefDefa.getExample();
        response = (OASOrgApacheSlingCaconfigImplDefDefa) api.orgApacheSlingCaconfigImplDefDefaultConfigurationInheritanceStra(params);
        System.assertEquals(expectedResponse, response);
    }

    /**
     * 
     *
     * 
     */
    @isTest
    private static void orgApacheSlingCaconfigImplDefDefaultConfigurationPersistenceStraTest() {
        HttpResponse res = new HttpResponse();
        res.setStatusCode(200);
        res.setStatus('OK');
        Test.setMock(HttpCalloutMock.class, new OASResponseMock(res));

        Map<String, Object> params = new Map<String, Object>{
            'post' => Boolean.getExample(),
            'apply' => Boolean.getExample(),
            'r_delete' => Boolean.getExample(),
            'action' => 'null',
            'location' => 'null',
            'propertylist' => new List<String>{''},
            'enabled' => Boolean.getExample()
        };

        OASClient client;
        OASConfigmgrApi api;
        OASOrgApacheSlingCaconfigImplDefDefa response;
        OASOrgApacheSlingCaconfigImplDefDefa expectedResponse;
        String js = '';

        client = new OASClient();
        api = new OASConfigmgrApi(client);

        js = JSON.serialize(OASOrgApacheSlingCaconfigImplDefDefa.getExample());
        res.setHeader('Content-Type', 'application/json');
        res.setBody(js);
        expectedResponse = OASOrgApacheSlingCaconfigImplDefDefa.getExample();
        response = (OASOrgApacheSlingCaconfigImplDefDefa) api.orgApacheSlingCaconfigImplDefDefaultConfigurationPersistenceStra(params);
        System.assertEquals(expectedResponse, response);
    }

    /**
     * 
     *
     * 
     */
    @isTest
    private static void orgApacheSlingCaconfigImplOverrideOsgiConfigurationOverrideProviTest() {
        HttpResponse res = new HttpResponse();
        res.setStatusCode(200);
        res.setStatus('OK');
        Test.setMock(HttpCalloutMock.class, new OASResponseMock(res));

        Map<String, Object> params = new Map<String, Object>{
            'post' => Boolean.getExample(),
            'apply' => Boolean.getExample(),
            'r_delete' => Boolean.getExample(),
            'action' => 'null',
            'location' => 'null',
            'propertylist' => new List<String>{''},
            'description' => 'null',
            'overrides' => new List<String>{''},
            'enabled' => Boolean.getExample(),
            'serviceRanking' => Integer.getExample()
        };

        OASClient client;
        OASConfigmgrApi api;
        OASOrgApacheSlingCaconfigImplOverrid response;
        OASOrgApacheSlingCaconfigImplOverrid expectedResponse;
        String js = '';

        client = new OASClient();
        api = new OASConfigmgrApi(client);

        js = JSON.serialize(OASOrgApacheSlingCaconfigImplOverrid.getExample());
        res.setHeader('Content-Type', 'application/json');
        res.setBody(js);
        expectedResponse = OASOrgApacheSlingCaconfigImplOverrid.getExample();
        response = (OASOrgApacheSlingCaconfigImplOverrid) api.orgApacheSlingCaconfigImplOverrideOsgiConfigurationOverrideProvi(params);
        System.assertEquals(expectedResponse, response);
    }

    /**
     * 
     *
     * 
     */
    @isTest
    private static void orgApacheSlingCaconfigImplOverrideSystemPropertyConfigurationOveTest() {
        HttpResponse res = new HttpResponse();
        res.setStatusCode(200);
        res.setStatus('OK');
        Test.setMock(HttpCalloutMock.class, new OASResponseMock(res));

        Map<String, Object> params = new Map<String, Object>{
            'post' => Boolean.getExample(),
            'apply' => Boolean.getExample(),
            'r_delete' => Boolean.getExample(),
            'action' => 'null',
            'location' => 'null',
            'propertylist' => new List<String>{''},
            'enabled' => Boolean.getExample(),
            'serviceRanking' => Integer.getExample()
        };

        OASClient client;
        OASConfigmgrApi api;
        OASOrgApacheSlingCaconfigImplOverrid response;
        OASOrgApacheSlingCaconfigImplOverrid expectedResponse;
        String js = '';

        client = new OASClient();
        api = new OASConfigmgrApi(client);

        js = JSON.serialize(OASOrgApacheSlingCaconfigImplOverrid.getExample());
        res.setHeader('Content-Type', 'application/json');
        res.setBody(js);
        expectedResponse = OASOrgApacheSlingCaconfigImplOverrid.getExample();
        response = (OASOrgApacheSlingCaconfigImplOverrid) api.orgApacheSlingCaconfigImplOverrideSystemPropertyConfigurationOve(params);
        System.assertEquals(expectedResponse, response);
    }

    /**
     * 
     *
     * 
     */
    @isTest
    private static void orgApacheSlingCaconfigManagementImplConfigurationManagementSettiTest() {
        HttpResponse res = new HttpResponse();
        res.setStatusCode(200);
        res.setStatus('OK');
        Test.setMock(HttpCalloutMock.class, new OASResponseMock(res));

        Map<String, Object> params = new Map<String, Object>{
            'post' => Boolean.getExample(),
            'apply' => Boolean.getExample(),
            'r_delete' => Boolean.getExample(),
            'action' => 'null',
            'location' => 'null',
            'propertylist' => new List<String>{''},
            'ignorePropertyNameRegex' => new List<String>{''},
            'configCollectionPropertiesResourceNames' => new List<String>{''}
        };

        OASClient client;
        OASConfigmgrApi api;
        OASOrgApacheSlingCaconfigManagementI response;
        OASOrgApacheSlingCaconfigManagementI expectedResponse;
        String js = '';

        client = new OASClient();
        api = new OASConfigmgrApi(client);

        js = JSON.serialize(OASOrgApacheSlingCaconfigManagementI.getExample());
        res.setHeader('Content-Type', 'application/json');
        res.setBody(js);
        expectedResponse = OASOrgApacheSlingCaconfigManagementI.getExample();
        response = (OASOrgApacheSlingCaconfigManagementI) api.orgApacheSlingCaconfigManagementImplConfigurationManagementSetti(params);
        System.assertEquals(expectedResponse, response);
    }

    /**
     * 
     *
     * 
     */
    @isTest
    private static void orgApacheSlingCaconfigResourceImplDefDefaultConfigurationResourTest() {
        HttpResponse res = new HttpResponse();
        res.setStatusCode(200);
        res.setStatus('OK');
        Test.setMock(HttpCalloutMock.class, new OASResponseMock(res));

        Map<String, Object> params = new Map<String, Object>{
            'post' => Boolean.getExample(),
            'apply' => Boolean.getExample(),
            'r_delete' => Boolean.getExample(),
            'action' => 'null',
            'location' => 'null',
            'propertylist' => new List<String>{''},
            'enabled' => Boolean.getExample(),
            'configPath' => 'null',
            'fallbackPaths' => new List<String>{''},
            'configCollectionInheritancePropertyNames' => new List<String>{''}
        };

        OASClient client;
        OASConfigmgrApi api;
        OASOrgApacheSlingCaconfigResourceImp response;
        OASOrgApacheSlingCaconfigResourceImp expectedResponse;
        String js = '';

        client = new OASClient();
        api = new OASConfigmgrApi(client);

        js = JSON.serialize(OASOrgApacheSlingCaconfigResourceImp.getExample());
        res.setHeader('Content-Type', 'application/json');
        res.setBody(js);
        expectedResponse = OASOrgApacheSlingCaconfigResourceImp.getExample();
        response = (OASOrgApacheSlingCaconfigResourceImp) api.orgApacheSlingCaconfigResourceImplDefDefaultConfigurationResour(params);
        System.assertEquals(expectedResponse, response);
    }

    /**
     * 
     *
     * 
     */
    @isTest
    private static void orgApacheSlingCaconfigResourceImplDefDefaultContextPathStrategyTest() {
        HttpResponse res = new HttpResponse();
        res.setStatusCode(200);
        res.setStatus('OK');
        Test.setMock(HttpCalloutMock.class, new OASResponseMock(res));

        Map<String, Object> params = new Map<String, Object>{
            'post' => Boolean.getExample(),
            'apply' => Boolean.getExample(),
            'r_delete' => Boolean.getExample(),
            'action' => 'null',
            'location' => 'null',
            'propertylist' => new List<String>{''},
            'enabled' => Boolean.getExample(),
            'configRefResourceNames' => new List<String>{''},
            'configRefPropertyNames' => new List<String>{''},
            'serviceRanking' => Integer.getExample()
        };

        OASClient client;
        OASConfigmgrApi api;
        OASOrgApacheSlingCaconfigResourceImp response;
        OASOrgApacheSlingCaconfigResourceImp expectedResponse;
        String js = '';

        client = new OASClient();
        api = new OASConfigmgrApi(client);

        js = JSON.serialize(OASOrgApacheSlingCaconfigResourceImp.getExample());
        res.setHeader('Content-Type', 'application/json');
        res.setBody(js);
        expectedResponse = OASOrgApacheSlingCaconfigResourceImp.getExample();
        response = (OASOrgApacheSlingCaconfigResourceImp) api.orgApacheSlingCaconfigResourceImplDefDefaultContextPathStrategy(params);
        System.assertEquals(expectedResponse, response);
    }

    /**
     * 
     *
     * 
     */
    @isTest
    private static void orgApacheSlingCommonsHtmlInternalTagsoupHtmlParserTest() {
        HttpResponse res = new HttpResponse();
        res.setStatusCode(200);
        res.setStatus('OK');
        Test.setMock(HttpCalloutMock.class, new OASResponseMock(res));

        Map<String, Object> params = new Map<String, Object>{
            'post' => Boolean.getExample(),
            'apply' => Boolean.getExample(),
            'r_delete' => Boolean.getExample(),
            'action' => 'null',
            'location' => 'null',
            'propertylist' => new List<String>{''},
            'parserFeatures' => new List<String>{''}
        };

        OASClient client;
        OASConfigmgrApi api;
        OASOrgApacheSlingCommonsHtmlInternal response;
        OASOrgApacheSlingCommonsHtmlInternal expectedResponse;
        String js = '';

        client = new OASClient();
        api = new OASConfigmgrApi(client);

        js = JSON.serialize(OASOrgApacheSlingCommonsHtmlInternal.getExample());
        res.setHeader('Content-Type', 'application/json');
        res.setBody(js);
        expectedResponse = OASOrgApacheSlingCommonsHtmlInternal.getExample();
        response = (OASOrgApacheSlingCommonsHtmlInternal) api.orgApacheSlingCommonsHtmlInternalTagsoupHtmlParser(params);
        System.assertEquals(expectedResponse, response);
    }

    /**
     * 
     *
     * 
     */
    @isTest
    private static void orgApacheSlingCommonsLogLogManagerTest() {
        HttpResponse res = new HttpResponse();
        res.setStatusCode(200);
        res.setStatus('OK');
        Test.setMock(HttpCalloutMock.class, new OASResponseMock(res));

        Map<String, Object> params = new Map<String, Object>{
            'post' => Boolean.getExample(),
            'apply' => Boolean.getExample(),
            'r_delete' => Boolean.getExample(),
            'action' => 'null',
            'location' => 'null',
            'propertylist' => new List<String>{''},
            'orgApacheSlingCommonsLogLevel' => 'null',
            'orgApacheSlingCommonsLogFile' => 'null',
            'orgApacheSlingCommonsLogFileNumber' => Integer.getExample(),
            'orgApacheSlingCommonsLogFileSize' => 'null',
            'orgApacheSlingCommonsLogPattern' => 'null',
            'orgApacheSlingCommonsLogConfigurationFile' => 'null',
            'orgApacheSlingCommonsLogPackagingDataEnabled' => Boolean.getExample(),
            'orgApacheSlingCommonsLogMaxCallerDataDepth' => Integer.getExample(),
            'orgApacheSlingCommonsLogMaxOldFileCountInDump' => Integer.getExample(),
            'orgApacheSlingCommonsLogNumOfLines' => Integer.getExample()
        };

        OASClient client;
        OASConfigmgrApi api;
        OASOrgApacheSlingCommonsLogLogManage response;
        OASOrgApacheSlingCommonsLogLogManage expectedResponse;
        String js = '';

        client = new OASClient();
        api = new OASConfigmgrApi(client);

        js = JSON.serialize(OASOrgApacheSlingCommonsLogLogManage.getExample());
        res.setHeader('Content-Type', 'application/json');
        res.setBody(js);
        expectedResponse = OASOrgApacheSlingCommonsLogLogManage.getExample();
        response = (OASOrgApacheSlingCommonsLogLogManage) api.orgApacheSlingCommonsLogLogManager(params);
        System.assertEquals(expectedResponse, response);
    }

    /**
     * 
     *
     * 
     */
    @isTest
    private static void orgApacheSlingCommonsLogLogManagerFactoryConfigTest() {
        HttpResponse res = new HttpResponse();
        res.setStatusCode(200);
        res.setStatus('OK');
        Test.setMock(HttpCalloutMock.class, new OASResponseMock(res));

        Map<String, Object> params = new Map<String, Object>{
            'post' => Boolean.getExample(),
            'apply' => Boolean.getExample(),
            'r_delete' => Boolean.getExample(),
            'action' => 'null',
            'location' => 'null',
            'propertylist' => new List<String>{''},
            'orgApacheSlingCommonsLogLevel' => 'null',
            'orgApacheSlingCommonsLogFile' => 'null',
            'orgApacheSlingCommonsLogPattern' => 'null',
            'orgApacheSlingCommonsLogNames' => new List<String>{''},
            'orgApacheSlingCommonsLogAdditiv' => Boolean.getExample()
        };

        OASClient client;
        OASConfigmgrApi api;
        OASOrgApacheSlingCommonsLogLogManage response;
        OASOrgApacheSlingCommonsLogLogManage expectedResponse;
        String js = '';

        client = new OASClient();
        api = new OASConfigmgrApi(client);

        js = JSON.serialize(OASOrgApacheSlingCommonsLogLogManage.getExample());
        res.setHeader('Content-Type', 'application/json');
        res.setBody(js);
        expectedResponse = OASOrgApacheSlingCommonsLogLogManage.getExample();
        response = (OASOrgApacheSlingCommonsLogLogManage) api.orgApacheSlingCommonsLogLogManagerFactoryConfig(params);
        System.assertEquals(expectedResponse, response);
    }

    /**
     * 
     *
     * 
     */
    @isTest
    private static void orgApacheSlingCommonsLogLogManagerFactoryWriterTest() {
        HttpResponse res = new HttpResponse();
        res.setStatusCode(200);
        res.setStatus('OK');
        Test.setMock(HttpCalloutMock.class, new OASResponseMock(res));

        Map<String, Object> params = new Map<String, Object>{
            'post' => Boolean.getExample(),
            'apply' => Boolean.getExample(),
            'r_delete' => Boolean.getExample(),
            'action' => 'null',
            'location' => 'null',
            'propertylist' => new List<String>{''},
            'orgApacheSlingCommonsLogFile' => 'null',
            'orgApacheSlingCommonsLogFileNumber' => Integer.getExample(),
            'orgApacheSlingCommonsLogFileSize' => 'null',
            'orgApacheSlingCommonsLogFileBuffered' => Boolean.getExample()
        };

        OASClient client;
        OASConfigmgrApi api;
        OASOrgApacheSlingCommonsLogLogManage response;
        OASOrgApacheSlingCommonsLogLogManage expectedResponse;
        String js = '';

        client = new OASClient();
        api = new OASConfigmgrApi(client);

        js = JSON.serialize(OASOrgApacheSlingCommonsLogLogManage.getExample());
        res.setHeader('Content-Type', 'application/json');
        res.setBody(js);
        expectedResponse = OASOrgApacheSlingCommonsLogLogManage.getExample();
        response = (OASOrgApacheSlingCommonsLogLogManage) api.orgApacheSlingCommonsLogLogManagerFactoryWriter(params);
        System.assertEquals(expectedResponse, response);
    }

    /**
     * 
     *
     * 
     */
    @isTest
    private static void orgApacheSlingCommonsMetricsInternalLogReporterTest() {
        HttpResponse res = new HttpResponse();
        res.setStatusCode(200);
        res.setStatus('OK');
        Test.setMock(HttpCalloutMock.class, new OASResponseMock(res));

        Map<String, Object> params = new Map<String, Object>{
            'post' => Boolean.getExample(),
            'apply' => Boolean.getExample(),
            'r_delete' => Boolean.getExample(),
            'action' => 'null',
            'location' => 'null',
            'propertylist' => new List<String>{''},
            'period' => Integer.getExample(),
            'timeUnit' => 'null',
            'level' => 'null',
            'loggerName' => 'null',
            'prefix' => 'null',
            'pattern' => 'null',
            'registryName' => 'null'
        };

        OASClient client;
        OASConfigmgrApi api;
        OASOrgApacheSlingCommonsMetricsInter response;
        OASOrgApacheSlingCommonsMetricsInter expectedResponse;
        String js = '';

        client = new OASClient();
        api = new OASConfigmgrApi(client);

        js = JSON.serialize(OASOrgApacheSlingCommonsMetricsInter.getExample());
        res.setHeader('Content-Type', 'application/json');
        res.setBody(js);
        expectedResponse = OASOrgApacheSlingCommonsMetricsInter.getExample();
        response = (OASOrgApacheSlingCommonsMetricsInter) api.orgApacheSlingCommonsMetricsInternalLogReporter(params);
        System.assertEquals(expectedResponse, response);
    }

    /**
     * 
     *
     * 
     */
    @isTest
    private static void orgApacheSlingCommonsMetricsRrd4jImplCodahaleMetricsReporterTest() {
        HttpResponse res = new HttpResponse();
        res.setStatusCode(200);
        res.setStatus('OK');
        Test.setMock(HttpCalloutMock.class, new OASResponseMock(res));

        Map<String, Object> params = new Map<String, Object>{
            'post' => Boolean.getExample(),
            'apply' => Boolean.getExample(),
            'r_delete' => Boolean.getExample(),
            'action' => 'null',
            'location' => 'null',
            'propertylist' => new List<String>{''},
            'datasources' => new List<String>{''},
            'step' => Integer.getExample(),
            'archives' => new List<String>{''},
            'path' => 'null'
        };

        OASClient client;
        OASConfigmgrApi api;
        OASOrgApacheSlingCommonsMetricsRrd4j response;
        OASOrgApacheSlingCommonsMetricsRrd4j expectedResponse;
        String js = '';

        client = new OASClient();
        api = new OASConfigmgrApi(client);

        js = JSON.serialize(OASOrgApacheSlingCommonsMetricsRrd4j.getExample());
        res.setHeader('Content-Type', 'application/json');
        res.setBody(js);
        expectedResponse = OASOrgApacheSlingCommonsMetricsRrd4j.getExample();
        response = (OASOrgApacheSlingCommonsMetricsRrd4j) api.orgApacheSlingCommonsMetricsRrd4jImplCodahaleMetricsReporter(params);
        System.assertEquals(expectedResponse, response);
    }

    /**
     * 
     *
     * 
     */
    @isTest
    private static void orgApacheSlingCommonsMimeInternalMimeTypeServiceImplTest() {
        HttpResponse res = new HttpResponse();
        res.setStatusCode(200);
        res.setStatus('OK');
        Test.setMock(HttpCalloutMock.class, new OASResponseMock(res));

        Map<String, Object> params = new Map<String, Object>{
            'post' => Boolean.getExample(),
            'apply' => Boolean.getExample(),
            'r_delete' => Boolean.getExample(),
            'action' => 'null',
            'location' => 'null',
            'propertylist' => new List<String>{''},
            'mimeTypes' => new List<String>{''}
        };

        OASClient client;
        OASConfigmgrApi api;
        OASOrgApacheSlingCommonsMimeInternal response;
        OASOrgApacheSlingCommonsMimeInternal expectedResponse;
        String js = '';

        client = new OASClient();
        api = new OASConfigmgrApi(client);

        js = JSON.serialize(OASOrgApacheSlingCommonsMimeInternal.getExample());
        res.setHeader('Content-Type', 'application/json');
        res.setBody(js);
        expectedResponse = OASOrgApacheSlingCommonsMimeInternal.getExample();
        response = (OASOrgApacheSlingCommonsMimeInternal) api.orgApacheSlingCommonsMimeInternalMimeTypeServiceImpl(params);
        System.assertEquals(expectedResponse, response);
    }

    /**
     * 
     *
     * 
     */
    @isTest
    private static void orgApacheSlingCommonsSchedulerImplQuartzSchedulerTest() {
        HttpResponse res = new HttpResponse();
        res.setStatusCode(200);
        res.setStatus('OK');
        Test.setMock(HttpCalloutMock.class, new OASResponseMock(res));

        Map<String, Object> params = new Map<String, Object>{
            'post' => Boolean.getExample(),
            'apply' => Boolean.getExample(),
            'r_delete' => Boolean.getExample(),
            'action' => 'null',
            'location' => 'null',
            'propertylist' => new List<String>{''},
            'poolName' => 'null',
            'allowedPoolNames' => new List<String>{''},
            'schedulerUseleaderforsingle' => Boolean.getExample(),
            'metricsFilters' => new List<String>{''},
            'slowThresholdMillis' => Integer.getExample()
        };

        OASClient client;
        OASConfigmgrApi api;
        OASOrgApacheSlingCommonsSchedulerImp response;
        OASOrgApacheSlingCommonsSchedulerImp expectedResponse;
        String js = '';

        client = new OASClient();
        api = new OASConfigmgrApi(client);

        js = JSON.serialize(OASOrgApacheSlingCommonsSchedulerImp.getExample());
        res.setHeader('Content-Type', 'application/json');
        res.setBody(js);
        expectedResponse = OASOrgApacheSlingCommonsSchedulerImp.getExample();
        response = (OASOrgApacheSlingCommonsSchedulerImp) api.orgApacheSlingCommonsSchedulerImplQuartzScheduler(params);
        System.assertEquals(expectedResponse, response);
    }

    /**
     * 
     *
     * 
     */
    @isTest
    private static void orgApacheSlingCommonsSchedulerImplSchedulerHealthCheckTest() {
        HttpResponse res = new HttpResponse();
        res.setStatusCode(200);
        res.setStatus('OK');
        Test.setMock(HttpCalloutMock.class, new OASResponseMock(res));

        Map<String, Object> params = new Map<String, Object>{
            'post' => Boolean.getExample(),
            'apply' => Boolean.getExample(),
            'r_delete' => Boolean.getExample(),
            'action' => 'null',
            'location' => 'null',
            'propertylist' => new List<String>{''},
            'maxQuartzJobDurationAcceptable' => Integer.getExample()
        };

        OASClient client;
        OASConfigmgrApi api;
        OASOrgApacheSlingCommonsSchedulerImp response;
        OASOrgApacheSlingCommonsSchedulerImp expectedResponse;
        String js = '';

        client = new OASClient();
        api = new OASConfigmgrApi(client);

        js = JSON.serialize(OASOrgApacheSlingCommonsSchedulerImp.getExample());
        res.setHeader('Content-Type', 'application/json');
        res.setBody(js);
        expectedResponse = OASOrgApacheSlingCommonsSchedulerImp.getExample();
        response = (OASOrgApacheSlingCommonsSchedulerImp) api.orgApacheSlingCommonsSchedulerImplSchedulerHealthCheck(params);
        System.assertEquals(expectedResponse, response);
    }

    /**
     * 
     *
     * 
     */
    @isTest
    private static void orgApacheSlingCommonsThreadsImplDefaultThreadPoolFactoryTest() {
        HttpResponse res = new HttpResponse();
        res.setStatusCode(200);
        res.setStatus('OK');
        Test.setMock(HttpCalloutMock.class, new OASResponseMock(res));

        Map<String, Object> params = new Map<String, Object>{
            'post' => Boolean.getExample(),
            'apply' => Boolean.getExample(),
            'r_delete' => Boolean.getExample(),
            'action' => 'null',
            'location' => 'null',
            'propertylist' => new List<String>{''},
            'name' => 'null',
            'minPoolSize' => Integer.getExample(),
            'maxPoolSize' => Integer.getExample(),
            'queueSize' => Integer.getExample(),
            'maxThreadAge' => Integer.getExample(),
            'keepAliveTime' => Integer.getExample(),
            'blockPolicy' => 'null',
            'shutdownGraceful' => Boolean.getExample(),
            'daemon' => Boolean.getExample(),
            'shutdownWaitTime' => Integer.getExample(),
            'priority' => 'null'
        };

        OASClient client;
        OASConfigmgrApi api;
        OASOrgApacheSlingCommonsThreadsImplD response;
        OASOrgApacheSlingCommonsThreadsImplD expectedResponse;
        String js = '';

        client = new OASClient();
        api = new OASConfigmgrApi(client);

        js = JSON.serialize(OASOrgApacheSlingCommonsThreadsImplD.getExample());
        res.setHeader('Content-Type', 'application/json');
        res.setBody(js);
        expectedResponse = OASOrgApacheSlingCommonsThreadsImplD.getExample();
        response = (OASOrgApacheSlingCommonsThreadsImplD) api.orgApacheSlingCommonsThreadsImplDefaultThreadPoolFactory(params);
        System.assertEquals(expectedResponse, response);
    }

    /**
     * 
     *
     * 
     */
    @isTest
    private static void orgApacheSlingDatasourceDataSourceFactoryTest() {
        HttpResponse res = new HttpResponse();
        res.setStatusCode(200);
        res.setStatus('OK');
        Test.setMock(HttpCalloutMock.class, new OASResponseMock(res));

        Map<String, Object> params = new Map<String, Object>{
            'post' => Boolean.getExample(),
            'apply' => Boolean.getExample(),
            'r_delete' => Boolean.getExample(),
            'action' => 'null',
            'location' => 'null',
            'propertylist' => new List<String>{''},
            'datasourceName' => 'null',
            'datasourceSvcPropName' => 'null',
            'driverClassName' => 'null',
            'url' => 'null',
            'username' => 'null',
            'password' => 'null',
            'defaultAutoCommit' => 'null',
            'defaultReadOnly' => 'null',
            'defaultTransactionIsolation' => 'null',
            'defaultCatalog' => 'null',
            'maxActive' => Integer.getExample(),
            'maxIdle' => Integer.getExample(),
            'minIdle' => Integer.getExample(),
            'initialSize' => Integer.getExample(),
            'maxWait' => Integer.getExample(),
            'maxAge' => Integer.getExample(),
            'testOnBorrow' => Boolean.getExample(),
            'testOnReturn' => Boolean.getExample(),
            'testWhileIdle' => Boolean.getExample(),
            'validationQuery' => 'null',
            'validationQueryTimeout' => Integer.getExample(),
            'timeBetweenEvictionRunsMillis' => Integer.getExample(),
            'minEvictableIdleTimeMillis' => Integer.getExample(),
            'connectionProperties' => 'null',
            'initSQL' => 'null',
            'jdbcInterceptors' => 'null',
            'validationInterval' => Integer.getExample(),
            'logValidationErrors' => Boolean.getExample(),
            'datasourceSvcProperties' => new List<String>{''}
        };

        OASClient client;
        OASConfigmgrApi api;
        OASOrgApacheSlingDatasourceDataSourc response;
        OASOrgApacheSlingDatasourceDataSourc expectedResponse;
        String js = '';

        client = new OASClient();
        api = new OASConfigmgrApi(client);

        js = JSON.serialize(OASOrgApacheSlingDatasourceDataSourc.getExample());
        res.setHeader('Content-Type', 'application/json');
        res.setBody(js);
        expectedResponse = OASOrgApacheSlingDatasourceDataSourc.getExample();
        response = (OASOrgApacheSlingDatasourceDataSourc) api.orgApacheSlingDatasourceDataSourceFactory(params);
        System.assertEquals(expectedResponse, response);
    }

    /**
     * 
     *
     * 
     */
    @isTest
    private static void orgApacheSlingDatasourceJNDIDataSourceFactoryTest() {
        HttpResponse res = new HttpResponse();
        res.setStatusCode(200);
        res.setStatus('OK');
        Test.setMock(HttpCalloutMock.class, new OASResponseMock(res));

        Map<String, Object> params = new Map<String, Object>{
            'post' => Boolean.getExample(),
            'apply' => Boolean.getExample(),
            'r_delete' => Boolean.getExample(),
            'action' => 'null',
            'location' => 'null',
            'propertylist' => new List<String>{''},
            'datasourceName' => 'null',
            'datasourceSvcPropName' => 'null',
            'datasourceJndiName' => 'null',
            'jndiProperties' => new List<String>{''}
        };

        OASClient client;
        OASConfigmgrApi api;
        OASOrgApacheSlingDatasourceJNDIDataS response;
        OASOrgApacheSlingDatasourceJNDIDataS expectedResponse;
        String js = '';

        client = new OASClient();
        api = new OASConfigmgrApi(client);

        js = JSON.serialize(OASOrgApacheSlingDatasourceJNDIDataS.getExample());
        res.setHeader('Content-Type', 'application/json');
        res.setBody(js);
        expectedResponse = OASOrgApacheSlingDatasourceJNDIDataS.getExample();
        response = (OASOrgApacheSlingDatasourceJNDIDataS) api.orgApacheSlingDatasourceJNDIDataSourceFactory(params);
        System.assertEquals(expectedResponse, response);
    }

    /**
     * 
     *
     * 
     */
    @isTest
    private static void orgApacheSlingDiscoveryOakConfigTest() {
        HttpResponse res = new HttpResponse();
        res.setStatusCode(200);
        res.setStatus('OK');
        Test.setMock(HttpCalloutMock.class, new OASResponseMock(res));

        Map<String, Object> params = new Map<String, Object>{
            'post' => Boolean.getExample(),
            'apply' => Boolean.getExample(),
            'r_delete' => Boolean.getExample(),
            'action' => 'null',
            'location' => 'null',
            'propertylist' => new List<String>{''},
            'connectorPingTimeout' => Integer.getExample(),
            'connectorPingInterval' => Integer.getExample(),
            'discoveryLiteCheckInterval' => Integer.getExample(),
            'clusterSyncServiceTimeout' => Integer.getExample(),
            'clusterSyncServiceInterval' => Integer.getExample(),
            'enableSyncToken' => Boolean.getExample(),
            'minEventDelay' => Integer.getExample(),
            'socketConnectTimeout' => Integer.getExample(),
            'soTimeout' => Integer.getExample(),
            'topologyConnectorUrls' => new List<String>{''},
            'topologyConnectorWhitelist' => new List<String>{''},
            'autoStopLocalLoopEnabled' => Boolean.getExample(),
            'gzipConnectorRequestsEnabled' => Boolean.getExample(),
            'hmacEnabled' => Boolean.getExample(),
            'enableEncryption' => Boolean.getExample(),
            'sharedKey' => 'null',
            'hmacSharedKeyTTL' => Integer.getExample(),
            'backoffStandbyFactor' => 'null',
            'backoffStableFactor' => 'null'
        };

        OASClient client;
        OASConfigmgrApi api;
        OASOrgApacheSlingDiscoveryOakConfigI response;
        OASOrgApacheSlingDiscoveryOakConfigI expectedResponse;
        String js = '';

        client = new OASClient();
        api = new OASConfigmgrApi(client);

        js = JSON.serialize(OASOrgApacheSlingDiscoveryOakConfigI.getExample());
        res.setHeader('Content-Type', 'application/json');
        res.setBody(js);
        expectedResponse = OASOrgApacheSlingDiscoveryOakConfigI.getExample();
        response = (OASOrgApacheSlingDiscoveryOakConfigI) api.orgApacheSlingDiscoveryOakConfig(params);
        System.assertEquals(expectedResponse, response);
    }

    /**
     * 
     *
     * 
     */
    @isTest
    private static void orgApacheSlingDiscoveryOakSynchronizedClocksHealthCheckTest() {
        HttpResponse res = new HttpResponse();
        res.setStatusCode(200);
        res.setStatus('OK');
        Test.setMock(HttpCalloutMock.class, new OASResponseMock(res));

        Map<String, Object> params = new Map<String, Object>{
            'post' => Boolean.getExample(),
            'apply' => Boolean.getExample(),
            'r_delete' => Boolean.getExample(),
            'action' => 'null',
            'location' => 'null',
            'propertylist' => new List<String>{''},
            'hcName' => 'null',
            'hcTags' => new List<String>{''},
            'hcMbeanName' => 'null'
        };

        OASClient client;
        OASConfigmgrApi api;
        OASOrgApacheSlingDiscoveryOakSynchro response;
        OASOrgApacheSlingDiscoveryOakSynchro expectedResponse;
        String js = '';

        client = new OASClient();
        api = new OASConfigmgrApi(client);

        js = JSON.serialize(OASOrgApacheSlingDiscoveryOakSynchro.getExample());
        res.setHeader('Content-Type', 'application/json');
        res.setBody(js);
        expectedResponse = OASOrgApacheSlingDiscoveryOakSynchro.getExample();
        response = (OASOrgApacheSlingDiscoveryOakSynchro) api.orgApacheSlingDiscoveryOakSynchronizedClocksHealthCheck(params);
        System.assertEquals(expectedResponse, response);
    }

    /**
     * 
     *
     * 
     */
    @isTest
    private static void orgApacheSlingDistributionAgentImplForwardDistributionAgentFactoTest() {
        HttpResponse res = new HttpResponse();
        res.setStatusCode(200);
        res.setStatus('OK');
        Test.setMock(HttpCalloutMock.class, new OASResponseMock(res));

        Map<String, Object> params = new Map<String, Object>{
            'post' => Boolean.getExample(),
            'apply' => Boolean.getExample(),
            'r_delete' => Boolean.getExample(),
            'action' => 'null',
            'location' => 'null',
            'propertylist' => new List<String>{''},
            'name' => 'null',
            'title' => 'null',
            'details' => 'null',
            'enabled' => Boolean.getExample(),
            'serviceName' => 'null',
            'logLevel' => 'null',
            'allowedRoots' => new List<String>{''},
            'queueProcessingEnabled' => Boolean.getExample(),
            'packageImporterEndpoints' => new List<String>{''},
            'passiveQueues' => new List<String>{''},
            'priorityQueues' => new List<String>{''},
            'retryStrategy' => 'null',
            'retryAttempts' => Integer.getExample(),
            'requestAuthorizationStrategyTarget' => 'null',
            'transportSecretProviderTarget' => 'null',
            'packageBuilderTarget' => 'null',
            'triggersTarget' => 'null',
            'queueProvider' => 'null',
            'asyncDelivery' => Boolean.getExample(),
            'httpConnTimeout' => Integer.getExample()
        };

        OASClient client;
        OASConfigmgrApi api;
        OASOrgApacheSlingDistributionAgentIm response;
        OASOrgApacheSlingDistributionAgentIm expectedResponse;
        String js = '';

        client = new OASClient();
        api = new OASConfigmgrApi(client);

        js = JSON.serialize(OASOrgApacheSlingDistributionAgentIm.getExample());
        res.setHeader('Content-Type', 'application/json');
        res.setBody(js);
        expectedResponse = OASOrgApacheSlingDistributionAgentIm.getExample();
        response = (OASOrgApacheSlingDistributionAgentIm) api.orgApacheSlingDistributionAgentImplForwardDistributionAgentFacto(params);
        System.assertEquals(expectedResponse, response);
    }

    /**
     * 
     *
     * 
     */
    @isTest
    private static void orgApacheSlingDistributionAgentImplPrivilegeDistributionRequestATest() {
        HttpResponse res = new HttpResponse();
        res.setStatusCode(200);
        res.setStatus('OK');
        Test.setMock(HttpCalloutMock.class, new OASResponseMock(res));

        Map<String, Object> params = new Map<String, Object>{
            'post' => Boolean.getExample(),
            'apply' => Boolean.getExample(),
            'r_delete' => Boolean.getExample(),
            'action' => 'null',
            'location' => 'null',
            'propertylist' => new List<String>{''},
            'name' => 'null',
            'jcrPrivilege' => 'null'
        };

        OASClient client;
        OASConfigmgrApi api;
        OASOrgApacheSlingDistributionAgentIm response;
        OASOrgApacheSlingDistributionAgentIm expectedResponse;
        String js = '';

        client = new OASClient();
        api = new OASConfigmgrApi(client);

        js = JSON.serialize(OASOrgApacheSlingDistributionAgentIm.getExample());
        res.setHeader('Content-Type', 'application/json');
        res.setBody(js);
        expectedResponse = OASOrgApacheSlingDistributionAgentIm.getExample();
        response = (OASOrgApacheSlingDistributionAgentIm) api.orgApacheSlingDistributionAgentImplPrivilegeDistributionRequestA(params);
        System.assertEquals(expectedResponse, response);
    }

    /**
     * 
     *
     * 
     */
    @isTest
    private static void orgApacheSlingDistributionAgentImplQueueDistributionAgentFactoryTest() {
        HttpResponse res = new HttpResponse();
        res.setStatusCode(200);
        res.setStatus('OK');
        Test.setMock(HttpCalloutMock.class, new OASResponseMock(res));

        Map<String, Object> params = new Map<String, Object>{
            'post' => Boolean.getExample(),
            'apply' => Boolean.getExample(),
            'r_delete' => Boolean.getExample(),
            'action' => 'null',
            'location' => 'null',
            'propertylist' => new List<String>{''},
            'name' => 'null',
            'title' => 'null',
            'details' => 'null',
            'enabled' => Boolean.getExample(),
            'serviceName' => 'null',
            'logLevel' => 'null',
            'allowedRoots' => new List<String>{''},
            'requestAuthorizationStrategyTarget' => 'null',
            'queueProviderFactoryTarget' => 'null',
            'packageBuilderTarget' => 'null',
            'triggersTarget' => 'null',
            'priorityQueues' => new List<String>{''}
        };

        OASClient client;
        OASConfigmgrApi api;
        OASOrgApacheSlingDistributionAgentIm response;
        OASOrgApacheSlingDistributionAgentIm expectedResponse;
        String js = '';

        client = new OASClient();
        api = new OASConfigmgrApi(client);

        js = JSON.serialize(OASOrgApacheSlingDistributionAgentIm.getExample());
        res.setHeader('Content-Type', 'application/json');
        res.setBody(js);
        expectedResponse = OASOrgApacheSlingDistributionAgentIm.getExample();
        response = (OASOrgApacheSlingDistributionAgentIm) api.orgApacheSlingDistributionAgentImplQueueDistributionAgentFactory(params);
        System.assertEquals(expectedResponse, response);
    }

    /**
     * 
     *
     * 
     */
    @isTest
    private static void orgApacheSlingDistributionAgentImplReverseDistributionAgentFactoTest() {
        HttpResponse res = new HttpResponse();
        res.setStatusCode(200);
        res.setStatus('OK');
        Test.setMock(HttpCalloutMock.class, new OASResponseMock(res));

        Map<String, Object> params = new Map<String, Object>{
            'post' => Boolean.getExample(),
            'apply' => Boolean.getExample(),
            'r_delete' => Boolean.getExample(),
            'action' => 'null',
            'location' => 'null',
            'propertylist' => new List<String>{''},
            'name' => 'null',
            'title' => 'null',
            'details' => 'null',
            'enabled' => Boolean.getExample(),
            'serviceName' => 'null',
            'logLevel' => 'null',
            'queueProcessingEnabled' => Boolean.getExample(),
            'packageExporterEndpoints' => new List<String>{''},
            'pullItems' => Integer.getExample(),
            'httpConnTimeout' => Integer.getExample(),
            'requestAuthorizationStrategyTarget' => 'null',
            'transportSecretProviderTarget' => 'null',
            'packageBuilderTarget' => 'null',
            'triggersTarget' => 'null'
        };

        OASClient client;
        OASConfigmgrApi api;
        OASOrgApacheSlingDistributionAgentIm response;
        OASOrgApacheSlingDistributionAgentIm expectedResponse;
        String js = '';

        client = new OASClient();
        api = new OASConfigmgrApi(client);

        js = JSON.serialize(OASOrgApacheSlingDistributionAgentIm.getExample());
        res.setHeader('Content-Type', 'application/json');
        res.setBody(js);
        expectedResponse = OASOrgApacheSlingDistributionAgentIm.getExample();
        response = (OASOrgApacheSlingDistributionAgentIm) api.orgApacheSlingDistributionAgentImplReverseDistributionAgentFacto(params);
        System.assertEquals(expectedResponse, response);
    }

    /**
     * 
     *
     * 
     */
    @isTest
    private static void orgApacheSlingDistributionAgentImplSimpleDistributionAgentFactorTest() {
        HttpResponse res = new HttpResponse();
        res.setStatusCode(200);
        res.setStatus('OK');
        Test.setMock(HttpCalloutMock.class, new OASResponseMock(res));

        Map<String, Object> params = new Map<String, Object>{
            'post' => Boolean.getExample(),
            'apply' => Boolean.getExample(),
            'r_delete' => Boolean.getExample(),
            'action' => 'null',
            'location' => 'null',
            'propertylist' => new List<String>{''},
            'name' => 'null',
            'title' => 'null',
            'details' => 'null',
            'enabled' => Boolean.getExample(),
            'serviceName' => 'null',
            'logLevel' => 'null',
            'queueProcessingEnabled' => Boolean.getExample(),
            'packageExporterTarget' => 'null',
            'packageImporterTarget' => 'null',
            'requestAuthorizationStrategyTarget' => 'null',
            'triggersTarget' => 'null'
        };

        OASClient client;
        OASConfigmgrApi api;
        OASOrgApacheSlingDistributionAgentIm response;
        OASOrgApacheSlingDistributionAgentIm expectedResponse;
        String js = '';

        client = new OASClient();
        api = new OASConfigmgrApi(client);

        js = JSON.serialize(OASOrgApacheSlingDistributionAgentIm.getExample());
        res.setHeader('Content-Type', 'application/json');
        res.setBody(js);
        expectedResponse = OASOrgApacheSlingDistributionAgentIm.getExample();
        response = (OASOrgApacheSlingDistributionAgentIm) api.orgApacheSlingDistributionAgentImplSimpleDistributionAgentFactor(params);
        System.assertEquals(expectedResponse, response);
    }

    /**
     * 
     *
     * 
     */
    @isTest
    private static void orgApacheSlingDistributionAgentImplSyncDistributionAgentFactoryTest() {
        HttpResponse res = new HttpResponse();
        res.setStatusCode(200);
        res.setStatus('OK');
        Test.setMock(HttpCalloutMock.class, new OASResponseMock(res));

        Map<String, Object> params = new Map<String, Object>{
            'post' => Boolean.getExample(),
            'apply' => Boolean.getExample(),
            'r_delete' => Boolean.getExample(),
            'action' => 'null',
            'location' => 'null',
            'propertylist' => new List<String>{''},
            'name' => 'null',
            'title' => 'null',
            'details' => 'null',
            'enabled' => Boolean.getExample(),
            'serviceName' => 'null',
            'logLevel' => 'null',
            'queueProcessingEnabled' => Boolean.getExample(),
            'passiveQueues' => new List<String>{''},
            'packageExporterEndpoints' => new List<String>{''},
            'packageImporterEndpoints' => new List<String>{''},
            'retryStrategy' => 'null',
            'retryAttempts' => Integer.getExample(),
            'pullItems' => Integer.getExample(),
            'httpConnTimeout' => Integer.getExample(),
            'requestAuthorizationStrategyTarget' => 'null',
            'transportSecretProviderTarget' => 'null',
            'packageBuilderTarget' => 'null',
            'triggersTarget' => 'null'
        };

        OASClient client;
        OASConfigmgrApi api;
        OASOrgApacheSlingDistributionAgentIm response;
        OASOrgApacheSlingDistributionAgentIm expectedResponse;
        String js = '';

        client = new OASClient();
        api = new OASConfigmgrApi(client);

        js = JSON.serialize(OASOrgApacheSlingDistributionAgentIm.getExample());
        res.setHeader('Content-Type', 'application/json');
        res.setBody(js);
        expectedResponse = OASOrgApacheSlingDistributionAgentIm.getExample();
        response = (OASOrgApacheSlingDistributionAgentIm) api.orgApacheSlingDistributionAgentImplSyncDistributionAgentFactory(params);
        System.assertEquals(expectedResponse, response);
    }

    /**
     * 
     *
     * 
     */
    @isTest
    private static void orgApacheSlingDistributionMonitorDistributionQueueHealthCheckTest() {
        HttpResponse res = new HttpResponse();
        res.setStatusCode(200);
        res.setStatus('OK');
        Test.setMock(HttpCalloutMock.class, new OASResponseMock(res));

        Map<String, Object> params = new Map<String, Object>{
            'post' => Boolean.getExample(),
            'apply' => Boolean.getExample(),
            'r_delete' => Boolean.getExample(),
            'action' => 'null',
            'location' => 'null',
            'propertylist' => new List<String>{''},
            'hcName' => 'null',
            'hcTags' => new List<String>{''},
            'hcMbeanName' => 'null',
            'numberOfRetriesAllowed' => Integer.getExample()
        };

        OASClient client;
        OASConfigmgrApi api;
        OASOrgApacheSlingDistributionMonitor response;
        OASOrgApacheSlingDistributionMonitor expectedResponse;
        String js = '';

        client = new OASClient();
        api = new OASConfigmgrApi(client);

        js = JSON.serialize(OASOrgApacheSlingDistributionMonitor.getExample());
        res.setHeader('Content-Type', 'application/json');
        res.setBody(js);
        expectedResponse = OASOrgApacheSlingDistributionMonitor.getExample();
        response = (OASOrgApacheSlingDistributionMonitor) api.orgApacheSlingDistributionMonitorDistributionQueueHealthCheck(params);
        System.assertEquals(expectedResponse, response);
    }

    /**
     * 
     *
     * 
     */
    @isTest
    private static void orgApacheSlingDistributionPackagingImplExporterAgentDistributioTest() {
        HttpResponse res = new HttpResponse();
        res.setStatusCode(200);
        res.setStatus('OK');
        Test.setMock(HttpCalloutMock.class, new OASResponseMock(res));

        Map<String, Object> params = new Map<String, Object>{
            'post' => Boolean.getExample(),
            'apply' => Boolean.getExample(),
            'r_delete' => Boolean.getExample(),
            'action' => 'null',
            'location' => 'null',
            'propertylist' => new List<String>{''},
            'name' => 'null',
            'queue' => 'null',
            'dropInvalidItems' => Boolean.getExample(),
            'agentTarget' => 'null'
        };

        OASClient client;
        OASConfigmgrApi api;
        OASOrgApacheSlingDistributionPackagi response;
        OASOrgApacheSlingDistributionPackagi expectedResponse;
        String js = '';

        client = new OASClient();
        api = new OASConfigmgrApi(client);

        js = JSON.serialize(OASOrgApacheSlingDistributionPackagi.getExample());
        res.setHeader('Content-Type', 'application/json');
        res.setBody(js);
        expectedResponse = OASOrgApacheSlingDistributionPackagi.getExample();
        response = (OASOrgApacheSlingDistributionPackagi) api.orgApacheSlingDistributionPackagingImplExporterAgentDistributio(params);
        System.assertEquals(expectedResponse, response);
    }

    /**
     * 
     *
     * 
     */
    @isTest
    private static void orgApacheSlingDistributionPackagingImplExporterLocalDistributioTest() {
        HttpResponse res = new HttpResponse();
        res.setStatusCode(200);
        res.setStatus('OK');
        Test.setMock(HttpCalloutMock.class, new OASResponseMock(res));

        Map<String, Object> params = new Map<String, Object>{
            'post' => Boolean.getExample(),
            'apply' => Boolean.getExample(),
            'r_delete' => Boolean.getExample(),
            'action' => 'null',
            'location' => 'null',
            'propertylist' => new List<String>{''},
            'name' => 'null',
            'packageBuilderTarget' => 'null'
        };

        OASClient client;
        OASConfigmgrApi api;
        OASOrgApacheSlingDistributionPackagi response;
        OASOrgApacheSlingDistributionPackagi expectedResponse;
        String js = '';

        client = new OASClient();
        api = new OASConfigmgrApi(client);

        js = JSON.serialize(OASOrgApacheSlingDistributionPackagi.getExample());
        res.setHeader('Content-Type', 'application/json');
        res.setBody(js);
        expectedResponse = OASOrgApacheSlingDistributionPackagi.getExample();
        response = (OASOrgApacheSlingDistributionPackagi) api.orgApacheSlingDistributionPackagingImplExporterLocalDistributio(params);
        System.assertEquals(expectedResponse, response);
    }

    /**
     * 
     *
     * 
     */
    @isTest
    private static void orgApacheSlingDistributionPackagingImplExporterRemoteDistributiTest() {
        HttpResponse res = new HttpResponse();
        res.setStatusCode(200);
        res.setStatus('OK');
        Test.setMock(HttpCalloutMock.class, new OASResponseMock(res));

        Map<String, Object> params = new Map<String, Object>{
            'post' => Boolean.getExample(),
            'apply' => Boolean.getExample(),
            'r_delete' => Boolean.getExample(),
            'action' => 'null',
            'location' => 'null',
            'propertylist' => new List<String>{''},
            'name' => 'null',
            'endpoints' => new List<String>{''},
            'pullItems' => Integer.getExample(),
            'packageBuilderTarget' => 'null',
            'transportSecretProviderTarget' => 'null'
        };

        OASClient client;
        OASConfigmgrApi api;
        OASOrgApacheSlingDistributionPackagi response;
        OASOrgApacheSlingDistributionPackagi expectedResponse;
        String js = '';

        client = new OASClient();
        api = new OASConfigmgrApi(client);

        js = JSON.serialize(OASOrgApacheSlingDistributionPackagi.getExample());
        res.setHeader('Content-Type', 'application/json');
        res.setBody(js);
        expectedResponse = OASOrgApacheSlingDistributionPackagi.getExample();
        response = (OASOrgApacheSlingDistributionPackagi) api.orgApacheSlingDistributionPackagingImplExporterRemoteDistributi(params);
        System.assertEquals(expectedResponse, response);
    }

    /**
     * 
     *
     * 
     */
    @isTest
    private static void orgApacheSlingDistributionPackagingImplImporterLocalDistributioTest() {
        HttpResponse res = new HttpResponse();
        res.setStatusCode(200);
        res.setStatus('OK');
        Test.setMock(HttpCalloutMock.class, new OASResponseMock(res));

        Map<String, Object> params = new Map<String, Object>{
            'post' => Boolean.getExample(),
            'apply' => Boolean.getExample(),
            'r_delete' => Boolean.getExample(),
            'action' => 'null',
            'location' => 'null',
            'propertylist' => new List<String>{''},
            'name' => 'null',
            'packageBuilderTarget' => 'null'
        };

        OASClient client;
        OASConfigmgrApi api;
        OASOrgApacheSlingDistributionPackagi response;
        OASOrgApacheSlingDistributionPackagi expectedResponse;
        String js = '';

        client = new OASClient();
        api = new OASConfigmgrApi(client);

        js = JSON.serialize(OASOrgApacheSlingDistributionPackagi.getExample());
        res.setHeader('Content-Type', 'application/json');
        res.setBody(js);
        expectedResponse = OASOrgApacheSlingDistributionPackagi.getExample();
        response = (OASOrgApacheSlingDistributionPackagi) api.orgApacheSlingDistributionPackagingImplImporterLocalDistributio(params);
        System.assertEquals(expectedResponse, response);
    }

    /**
     * 
     *
     * 
     */
    @isTest
    private static void orgApacheSlingDistributionPackagingImplImporterRemoteDistributiTest() {
        HttpResponse res = new HttpResponse();
        res.setStatusCode(200);
        res.setStatus('OK');
        Test.setMock(HttpCalloutMock.class, new OASResponseMock(res));

        Map<String, Object> params = new Map<String, Object>{
            'post' => Boolean.getExample(),
            'apply' => Boolean.getExample(),
            'r_delete' => Boolean.getExample(),
            'action' => 'null',
            'location' => 'null',
            'propertylist' => new List<String>{''},
            'name' => 'null',
            'endpoints' => new List<String>{''},
            'transportSecretProviderTarget' => 'null'
        };

        OASClient client;
        OASConfigmgrApi api;
        OASOrgApacheSlingDistributionPackagi response;
        OASOrgApacheSlingDistributionPackagi expectedResponse;
        String js = '';

        client = new OASClient();
        api = new OASConfigmgrApi(client);

        js = JSON.serialize(OASOrgApacheSlingDistributionPackagi.getExample());
        res.setHeader('Content-Type', 'application/json');
        res.setBody(js);
        expectedResponse = OASOrgApacheSlingDistributionPackagi.getExample();
        response = (OASOrgApacheSlingDistributionPackagi) api.orgApacheSlingDistributionPackagingImplImporterRemoteDistributi(params);
        System.assertEquals(expectedResponse, response);
    }

    /**
     * 
     *
     * 
     */
    @isTest
    private static void orgApacheSlingDistributionPackagingImplImporterRepositoryDistriTest() {
        HttpResponse res = new HttpResponse();
        res.setStatusCode(200);
        res.setStatus('OK');
        Test.setMock(HttpCalloutMock.class, new OASResponseMock(res));

        Map<String, Object> params = new Map<String, Object>{
            'post' => Boolean.getExample(),
            'apply' => Boolean.getExample(),
            'r_delete' => Boolean.getExample(),
            'action' => 'null',
            'location' => 'null',
            'propertylist' => new List<String>{''},
            'name' => 'null',
            'serviceName' => 'null',
            'path' => 'null',
            'privilegeName' => 'null'
        };

        OASClient client;
        OASConfigmgrApi api;
        OASOrgApacheSlingDistributionPackagi response;
        OASOrgApacheSlingDistributionPackagi expectedResponse;
        String js = '';

        client = new OASClient();
        api = new OASConfigmgrApi(client);

        js = JSON.serialize(OASOrgApacheSlingDistributionPackagi.getExample());
        res.setHeader('Content-Type', 'application/json');
        res.setBody(js);
        expectedResponse = OASOrgApacheSlingDistributionPackagi.getExample();
        response = (OASOrgApacheSlingDistributionPackagi) api.orgApacheSlingDistributionPackagingImplImporterRepositoryDistri(params);
        System.assertEquals(expectedResponse, response);
    }

    /**
     * 
     *
     * 
     */
    @isTest
    private static void orgApacheSlingDistributionResourcesImplDistributionConfigurationTest() {
        HttpResponse res = new HttpResponse();
        res.setStatusCode(200);
        res.setStatus('OK');
        Test.setMock(HttpCalloutMock.class, new OASResponseMock(res));

        Map<String, Object> params = new Map<String, Object>{
            'post' => Boolean.getExample(),
            'apply' => Boolean.getExample(),
            'r_delete' => Boolean.getExample(),
            'action' => 'null',
            'location' => 'null',
            'propertylist' => new List<String>{''},
            'providerRoots' => 'null',
            'kind' => 'null'
        };

        OASClient client;
        OASConfigmgrApi api;
        OASOrgApacheSlingDistributionResourc response;
        OASOrgApacheSlingDistributionResourc expectedResponse;
        String js = '';

        client = new OASClient();
        api = new OASConfigmgrApi(client);

        js = JSON.serialize(OASOrgApacheSlingDistributionResourc.getExample());
        res.setHeader('Content-Type', 'application/json');
        res.setBody(js);
        expectedResponse = OASOrgApacheSlingDistributionResourc.getExample();
        response = (OASOrgApacheSlingDistributionResourc) api.orgApacheSlingDistributionResourcesImplDistributionConfiguration(params);
        System.assertEquals(expectedResponse, response);
    }

    /**
     * 
     *
     * 
     */
    @isTest
    private static void orgApacheSlingDistributionResourcesImplDistributionServiceResourTest() {
        HttpResponse res = new HttpResponse();
        res.setStatusCode(200);
        res.setStatus('OK');
        Test.setMock(HttpCalloutMock.class, new OASResponseMock(res));

        Map<String, Object> params = new Map<String, Object>{
            'post' => Boolean.getExample(),
            'apply' => Boolean.getExample(),
            'r_delete' => Boolean.getExample(),
            'action' => 'null',
            'location' => 'null',
            'propertylist' => new List<String>{''},
            'providerRoots' => 'null',
            'kind' => 'null'
        };

        OASClient client;
        OASConfigmgrApi api;
        OASOrgApacheSlingDistributionResourc response;
        OASOrgApacheSlingDistributionResourc expectedResponse;
        String js = '';

        client = new OASClient();
        api = new OASConfigmgrApi(client);

        js = JSON.serialize(OASOrgApacheSlingDistributionResourc.getExample());
        res.setHeader('Content-Type', 'application/json');
        res.setBody(js);
        expectedResponse = OASOrgApacheSlingDistributionResourc.getExample();
        response = (OASOrgApacheSlingDistributionResourc) api.orgApacheSlingDistributionResourcesImplDistributionServiceResour(params);
        System.assertEquals(expectedResponse, response);
    }

    /**
     * 
     *
     * 
     */
    @isTest
    private static void orgApacheSlingDistributionSerializationImplDistributionPackageBuTest() {
        HttpResponse res = new HttpResponse();
        res.setStatusCode(200);
        res.setStatus('OK');
        Test.setMock(HttpCalloutMock.class, new OASResponseMock(res));

        Map<String, Object> params = new Map<String, Object>{
            'post' => Boolean.getExample(),
            'apply' => Boolean.getExample(),
            'r_delete' => Boolean.getExample(),
            'action' => 'null',
            'location' => 'null',
            'propertylist' => new List<String>{''},
            'name' => 'null',
            'r_type' => 'null',
            'formatTarget' => 'null',
            'tempFsFolder' => 'null',
            'fileThreshold' => Integer.getExample(),
            'memoryUnit' => 'null',
            'useOffHeapMemory' => Boolean.getExample(),
            'digestAlgorithm' => 'null',
            'monitoringQueueSize' => Integer.getExample(),
            'cleanupDelay' => Integer.getExample(),
            'packageFilters' => new List<String>{''},
            'propertyFilters' => new List<String>{''}
        };

        OASClient client;
        OASConfigmgrApi api;
        OASOrgApacheSlingDistributionSeriali response;
        OASOrgApacheSlingDistributionSeriali expectedResponse;
        String js = '';

        client = new OASClient();
        api = new OASConfigmgrApi(client);

        js = JSON.serialize(OASOrgApacheSlingDistributionSeriali.getExample());
        res.setHeader('Content-Type', 'application/json');
        res.setBody(js);
        expectedResponse = OASOrgApacheSlingDistributionSeriali.getExample();
        response = (OASOrgApacheSlingDistributionSeriali) api.orgApacheSlingDistributionSerializationImplDistributionPackageBu(params);
        System.assertEquals(expectedResponse, response);
    }

    /**
     * 
     *
     * 
     */
    @isTest
    private static void orgApacheSlingDistributionSerializationImplVltVaultDistributionTest() {
        HttpResponse res = new HttpResponse();
        res.setStatusCode(200);
        res.setStatus('OK');
        Test.setMock(HttpCalloutMock.class, new OASResponseMock(res));

        Map<String, Object> params = new Map<String, Object>{
            'post' => Boolean.getExample(),
            'apply' => Boolean.getExample(),
            'r_delete' => Boolean.getExample(),
            'action' => 'null',
            'location' => 'null',
            'propertylist' => new List<String>{''},
            'name' => 'null',
            'r_type' => 'null',
            'importMode' => 'null',
            'aclHandling' => 'null',
            'packageRoots' => 'null',
            'packageFilters' => new List<String>{''},
            'propertyFilters' => new List<String>{''},
            'tempFsFolder' => 'null',
            'useBinaryReferences' => Boolean.getExample(),
            'autoSaveThreshold' => Integer.getExample(),
            'cleanupDelay' => Integer.getExample(),
            'fileThreshold' => Integer.getExample(),
            'MEGA_BYTES' => 'null',
            'useOffHeapMemory' => Boolean.getExample(),
            'digestAlgorithm' => 'null',
            'monitoringQueueSize' => Integer.getExample(),
            'pathsMapping' => new List<String>{''},
            'strictImport' => Boolean.getExample()
        };

        OASClient client;
        OASConfigmgrApi api;
        OASOrgApacheSlingDistributionSeriali response;
        OASOrgApacheSlingDistributionSeriali expectedResponse;
        String js = '';

        client = new OASClient();
        api = new OASConfigmgrApi(client);

        js = JSON.serialize(OASOrgApacheSlingDistributionSeriali.getExample());
        res.setHeader('Content-Type', 'application/json');
        res.setBody(js);
        expectedResponse = OASOrgApacheSlingDistributionSeriali.getExample();
        response = (OASOrgApacheSlingDistributionSeriali) api.orgApacheSlingDistributionSerializationImplVltVaultDistribution(params);
        System.assertEquals(expectedResponse, response);
    }

    /**
     * 
     *
     * 
     */
    @isTest
    private static void orgApacheSlingDistributionTransportImplUserCredentialsDistributiTest() {
        HttpResponse res = new HttpResponse();
        res.setStatusCode(200);
        res.setStatus('OK');
        Test.setMock(HttpCalloutMock.class, new OASResponseMock(res));

        Map<String, Object> params = new Map<String, Object>{
            'post' => Boolean.getExample(),
            'apply' => Boolean.getExample(),
            'r_delete' => Boolean.getExample(),
            'action' => 'null',
            'location' => 'null',
            'propertylist' => new List<String>{''},
            'name' => 'null',
            'username' => 'null',
            'password' => 'null'
        };

        OASClient client;
        OASConfigmgrApi api;
        OASOrgApacheSlingDistributionTranspo response;
        OASOrgApacheSlingDistributionTranspo expectedResponse;
        String js = '';

        client = new OASClient();
        api = new OASConfigmgrApi(client);

        js = JSON.serialize(OASOrgApacheSlingDistributionTranspo.getExample());
        res.setHeader('Content-Type', 'application/json');
        res.setBody(js);
        expectedResponse = OASOrgApacheSlingDistributionTranspo.getExample();
        response = (OASOrgApacheSlingDistributionTranspo) api.orgApacheSlingDistributionTransportImplUserCredentialsDistributi(params);
        System.assertEquals(expectedResponse, response);
    }

    /**
     * 
     *
     * 
     */
    @isTest
    private static void orgApacheSlingDistributionTriggerImplDistributionEventDistributeTest() {
        HttpResponse res = new HttpResponse();
        res.setStatusCode(200);
        res.setStatus('OK');
        Test.setMock(HttpCalloutMock.class, new OASResponseMock(res));

        Map<String, Object> params = new Map<String, Object>{
            'post' => Boolean.getExample(),
            'apply' => Boolean.getExample(),
            'r_delete' => Boolean.getExample(),
            'action' => 'null',
            'location' => 'null',
            'propertylist' => new List<String>{''},
            'name' => 'null',
            'path' => 'null'
        };

        OASClient client;
        OASConfigmgrApi api;
        OASOrgApacheSlingDistributionTrigger response;
        OASOrgApacheSlingDistributionTrigger expectedResponse;
        String js = '';

        client = new OASClient();
        api = new OASConfigmgrApi(client);

        js = JSON.serialize(OASOrgApacheSlingDistributionTrigger.getExample());
        res.setHeader('Content-Type', 'application/json');
        res.setBody(js);
        expectedResponse = OASOrgApacheSlingDistributionTrigger.getExample();
        response = (OASOrgApacheSlingDistributionTrigger) api.orgApacheSlingDistributionTriggerImplDistributionEventDistribute(params);
        System.assertEquals(expectedResponse, response);
    }

    /**
     * 
     *
     * 
     */
    @isTest
    private static void orgApacheSlingDistributionTriggerImplJcrEventDistributionTriggerTest() {
        HttpResponse res = new HttpResponse();
        res.setStatusCode(200);
        res.setStatus('OK');
        Test.setMock(HttpCalloutMock.class, new OASResponseMock(res));

        Map<String, Object> params = new Map<String, Object>{
            'post' => Boolean.getExample(),
            'apply' => Boolean.getExample(),
            'r_delete' => Boolean.getExample(),
            'action' => 'null',
            'location' => 'null',
            'propertylist' => new List<String>{''},
            'name' => 'null',
            'path' => 'null',
            'ignoredPathsPatterns' => new List<String>{''},
            'serviceName' => 'null',
            'deep' => Boolean.getExample()
        };

        OASClient client;
        OASConfigmgrApi api;
        OASOrgApacheSlingDistributionTrigger response;
        OASOrgApacheSlingDistributionTrigger expectedResponse;
        String js = '';

        client = new OASClient();
        api = new OASConfigmgrApi(client);

        js = JSON.serialize(OASOrgApacheSlingDistributionTrigger.getExample());
        res.setHeader('Content-Type', 'application/json');
        res.setBody(js);
        expectedResponse = OASOrgApacheSlingDistributionTrigger.getExample();
        response = (OASOrgApacheSlingDistributionTrigger) api.orgApacheSlingDistributionTriggerImplJcrEventDistributionTrigger(params);
        System.assertEquals(expectedResponse, response);
    }

    /**
     * 
     *
     * 
     */
    @isTest
    private static void orgApacheSlingDistributionTriggerImplPersistedJcrEventDistributiTest() {
        HttpResponse res = new HttpResponse();
        res.setStatusCode(200);
        res.setStatus('OK');
        Test.setMock(HttpCalloutMock.class, new OASResponseMock(res));

        Map<String, Object> params = new Map<String, Object>{
            'post' => Boolean.getExample(),
            'apply' => Boolean.getExample(),
            'r_delete' => Boolean.getExample(),
            'action' => 'null',
            'location' => 'null',
            'propertylist' => new List<String>{''},
            'name' => 'null',
            'path' => 'null',
            'serviceName' => 'null',
            'nuggetsPath' => 'null'
        };

        OASClient client;
        OASConfigmgrApi api;
        OASOrgApacheSlingDistributionTrigger response;
        OASOrgApacheSlingDistributionTrigger expectedResponse;
        String js = '';

        client = new OASClient();
        api = new OASConfigmgrApi(client);

        js = JSON.serialize(OASOrgApacheSlingDistributionTrigger.getExample());
        res.setHeader('Content-Type', 'application/json');
        res.setBody(js);
        expectedResponse = OASOrgApacheSlingDistributionTrigger.getExample();
        response = (OASOrgApacheSlingDistributionTrigger) api.orgApacheSlingDistributionTriggerImplPersistedJcrEventDistributi(params);
        System.assertEquals(expectedResponse, response);
    }

    /**
     * 
     *
     * 
     */
    @isTest
    private static void orgApacheSlingDistributionTriggerImplRemoteEventDistributionTrigTest() {
        HttpResponse res = new HttpResponse();
        res.setStatusCode(200);
        res.setStatus('OK');
        Test.setMock(HttpCalloutMock.class, new OASResponseMock(res));

        Map<String, Object> params = new Map<String, Object>{
            'post' => Boolean.getExample(),
            'apply' => Boolean.getExample(),
            'r_delete' => Boolean.getExample(),
            'action' => 'null',
            'location' => 'null',
            'propertylist' => new List<String>{''},
            'name' => 'null',
            'endpoint' => 'null',
            'transportSecretProviderTarget' => 'null'
        };

        OASClient client;
        OASConfigmgrApi api;
        OASOrgApacheSlingDistributionTrigger response;
        OASOrgApacheSlingDistributionTrigger expectedResponse;
        String js = '';

        client = new OASClient();
        api = new OASConfigmgrApi(client);

        js = JSON.serialize(OASOrgApacheSlingDistributionTrigger.getExample());
        res.setHeader('Content-Type', 'application/json');
        res.setBody(js);
        expectedResponse = OASOrgApacheSlingDistributionTrigger.getExample();
        response = (OASOrgApacheSlingDistributionTrigger) api.orgApacheSlingDistributionTriggerImplRemoteEventDistributionTrig(params);
        System.assertEquals(expectedResponse, response);
    }

    /**
     * 
     *
     * 
     */
    @isTest
    private static void orgApacheSlingDistributionTriggerImplResourceEventDistributionTrTest() {
        HttpResponse res = new HttpResponse();
        res.setStatusCode(200);
        res.setStatus('OK');
        Test.setMock(HttpCalloutMock.class, new OASResponseMock(res));

        Map<String, Object> params = new Map<String, Object>{
            'post' => Boolean.getExample(),
            'apply' => Boolean.getExample(),
            'r_delete' => Boolean.getExample(),
            'action' => 'null',
            'location' => 'null',
            'propertylist' => new List<String>{''},
            'name' => 'null',
            'path' => 'null'
        };

        OASClient client;
        OASConfigmgrApi api;
        OASOrgApacheSlingDistributionTrigger response;
        OASOrgApacheSlingDistributionTrigger expectedResponse;
        String js = '';

        client = new OASClient();
        api = new OASConfigmgrApi(client);

        js = JSON.serialize(OASOrgApacheSlingDistributionTrigger.getExample());
        res.setHeader('Content-Type', 'application/json');
        res.setBody(js);
        expectedResponse = OASOrgApacheSlingDistributionTrigger.getExample();
        response = (OASOrgApacheSlingDistributionTrigger) api.orgApacheSlingDistributionTriggerImplResourceEventDistributionTr(params);
        System.assertEquals(expectedResponse, response);
    }

    /**
     * 
     *
     * 
     */
    @isTest
    private static void orgApacheSlingDistributionTriggerImplScheduledDistributionTriggeTest() {
        HttpResponse res = new HttpResponse();
        res.setStatusCode(200);
        res.setStatus('OK');
        Test.setMock(HttpCalloutMock.class, new OASResponseMock(res));

        Map<String, Object> params = new Map<String, Object>{
            'post' => Boolean.getExample(),
            'apply' => Boolean.getExample(),
            'r_delete' => Boolean.getExample(),
            'action' => 'null',
            'location' => 'null',
            'propertylist' => new List<String>{''},
            'name' => 'null',
            'path' => 'null',
            'seconds' => 'null',
            'serviceName' => 'null'
        };

        OASClient client;
        OASConfigmgrApi api;
        OASOrgApacheSlingDistributionTrigger response;
        OASOrgApacheSlingDistributionTrigger expectedResponse;
        String js = '';

        client = new OASClient();
        api = new OASConfigmgrApi(client);

        js = JSON.serialize(OASOrgApacheSlingDistributionTrigger.getExample());
        res.setHeader('Content-Type', 'application/json');
        res.setBody(js);
        expectedResponse = OASOrgApacheSlingDistributionTrigger.getExample();
        response = (OASOrgApacheSlingDistributionTrigger) api.orgApacheSlingDistributionTriggerImplScheduledDistributionTrigge(params);
        System.assertEquals(expectedResponse, response);
    }

    /**
     * 
     *
     * 
     */
    @isTest
    private static void orgApacheSlingEngineImplAuthSlingAuthenticatorTest() {
        HttpResponse res = new HttpResponse();
        res.setStatusCode(200);
        res.setStatus('OK');
        Test.setMock(HttpCalloutMock.class, new OASResponseMock(res));

        Map<String, Object> params = new Map<String, Object>{
            'post' => Boolean.getExample(),
            'apply' => Boolean.getExample(),
            'r_delete' => Boolean.getExample(),
            'action' => 'null',
            'location' => 'null',
            'propertylist' => new List<String>{''},
            'osgiHttpWhiteboardContextSelect' => 'null',
            'osgiHttpWhiteboardListener' => 'null',
            'authSudoCookie' => 'null',
            'authSudoParameter' => 'null',
            'authAnnonymous' => Boolean.getExample(),
            'slingAuthRequirements' => new List<String>{''},
            'slingAuthAnonymousUser' => 'null',
            'slingAuthAnonymousPassword' => 'null',
            'authHttp' => 'null',
            'authHttpRealm' => 'null',
            'authUriSuffix' => new List<String>{''}
        };

        OASClient client;
        OASConfigmgrApi api;
        OASOrgApacheSlingEngineImplAuthSling response;
        OASOrgApacheSlingEngineImplAuthSling expectedResponse;
        String js = '';

        client = new OASClient();
        api = new OASConfigmgrApi(client);

        js = JSON.serialize(OASOrgApacheSlingEngineImplAuthSling.getExample());
        res.setHeader('Content-Type', 'application/json');
        res.setBody(js);
        expectedResponse = OASOrgApacheSlingEngineImplAuthSling.getExample();
        response = (OASOrgApacheSlingEngineImplAuthSling) api.orgApacheSlingEngineImplAuthSlingAuthenticator(params);
        System.assertEquals(expectedResponse, response);
    }

    /**
     * 
     *
     * 
     */
    @isTest
    private static void orgApacheSlingEngineImplDebugRequestProgressTrackerLogFilterTest() {
        HttpResponse res = new HttpResponse();
        res.setStatusCode(200);
        res.setStatus('OK');
        Test.setMock(HttpCalloutMock.class, new OASResponseMock(res));

        Map<String, Object> params = new Map<String, Object>{
            'post' => Boolean.getExample(),
            'apply' => Boolean.getExample(),
            'r_delete' => Boolean.getExample(),
            'action' => 'null',
            'location' => 'null',
            'propertylist' => new List<String>{''},
            'extensions' => new List<String>{''},
            'minDurationMs' => Integer.getExample(),
            'maxDurationMs' => Integer.getExample(),
            'compactLogFormat' => Boolean.getExample()
        };

        OASClient client;
        OASConfigmgrApi api;
        OASOrgApacheSlingEngineImplDebugRequ response;
        OASOrgApacheSlingEngineImplDebugRequ expectedResponse;
        String js = '';

        client = new OASClient();
        api = new OASConfigmgrApi(client);

        js = JSON.serialize(OASOrgApacheSlingEngineImplDebugRequ.getExample());
        res.setHeader('Content-Type', 'application/json');
        res.setBody(js);
        expectedResponse = OASOrgApacheSlingEngineImplDebugRequ.getExample();
        response = (OASOrgApacheSlingEngineImplDebugRequ) api.orgApacheSlingEngineImplDebugRequestProgressTrackerLogFilter(params);
        System.assertEquals(expectedResponse, response);
    }

    /**
     * 
     *
     * 
     */
    @isTest
    private static void orgApacheSlingEngineImplLogRequestLoggerTest() {
        HttpResponse res = new HttpResponse();
        res.setStatusCode(200);
        res.setStatus('OK');
        Test.setMock(HttpCalloutMock.class, new OASResponseMock(res));

        Map<String, Object> params = new Map<String, Object>{
            'post' => Boolean.getExample(),
            'apply' => Boolean.getExample(),
            'r_delete' => Boolean.getExample(),
            'action' => 'null',
            'location' => 'null',
            'propertylist' => new List<String>{''},
            'requestLogOutput' => 'null',
            'requestLogOutputtype' => Integer.getExample(),
            'requestLogEnabled' => Boolean.getExample(),
            'accessLogOutput' => 'null',
            'accessLogOutputtype' => Integer.getExample(),
            'accessLogEnabled' => Boolean.getExample()
        };

        OASClient client;
        OASConfigmgrApi api;
        OASOrgApacheSlingEngineImplLogReques response;
        OASOrgApacheSlingEngineImplLogReques expectedResponse;
        String js = '';

        client = new OASClient();
        api = new OASConfigmgrApi(client);

        js = JSON.serialize(OASOrgApacheSlingEngineImplLogReques.getExample());
        res.setHeader('Content-Type', 'application/json');
        res.setBody(js);
        expectedResponse = OASOrgApacheSlingEngineImplLogReques.getExample();
        response = (OASOrgApacheSlingEngineImplLogReques) api.orgApacheSlingEngineImplLogRequestLogger(params);
        System.assertEquals(expectedResponse, response);
    }

    /**
     * 
     *
     * 
     */
    @isTest
    private static void orgApacheSlingEngineImplLogRequestLoggerServiceTest() {
        HttpResponse res = new HttpResponse();
        res.setStatusCode(200);
        res.setStatus('OK');
        Test.setMock(HttpCalloutMock.class, new OASResponseMock(res));

        Map<String, Object> params = new Map<String, Object>{
            'post' => Boolean.getExample(),
            'apply' => Boolean.getExample(),
            'r_delete' => Boolean.getExample(),
            'action' => 'null',
            'location' => 'null',
            'propertylist' => new List<String>{''},
            'requestLogServiceFormat' => 'null',
            'requestLogServiceOutput' => 'null',
            'requestLogServiceOutputtype' => Integer.getExample(),
            'requestLogServiceOnentry' => Boolean.getExample()
        };

        OASClient client;
        OASConfigmgrApi api;
        OASOrgApacheSlingEngineImplLogReques response;
        OASOrgApacheSlingEngineImplLogReques expectedResponse;
        String js = '';

        client = new OASClient();
        api = new OASConfigmgrApi(client);

        js = JSON.serialize(OASOrgApacheSlingEngineImplLogReques.getExample());
        res.setHeader('Content-Type', 'application/json');
        res.setBody(js);
        expectedResponse = OASOrgApacheSlingEngineImplLogReques.getExample();
        response = (OASOrgApacheSlingEngineImplLogReques) api.orgApacheSlingEngineImplLogRequestLoggerService(params);
        System.assertEquals(expectedResponse, response);
    }

    /**
     * 
     *
     * 
     */
    @isTest
    private static void orgApacheSlingEngineImplSlingMainServletTest() {
        HttpResponse res = new HttpResponse();
        res.setStatusCode(200);
        res.setStatus('OK');
        Test.setMock(HttpCalloutMock.class, new OASResponseMock(res));

        Map<String, Object> params = new Map<String, Object>{
            'post' => Boolean.getExample(),
            'apply' => Boolean.getExample(),
            'r_delete' => Boolean.getExample(),
            'action' => 'null',
            'location' => 'null',
            'propertylist' => new List<String>{''},
            'slingMaxCalls' => Integer.getExample(),
            'slingMaxInclusions' => Integer.getExample(),
            'slingTraceAllow' => Boolean.getExample(),
            'slingMaxRecordRequests' => Integer.getExample(),
            'slingStorePatternRequests' => new List<String>{''},
            'slingServerinfo' => 'null',
            'slingAdditionalResponseHeaders' => new List<String>{''}
        };

        OASClient client;
        OASConfigmgrApi api;
        OASOrgApacheSlingEngineImplSlingMain response;
        OASOrgApacheSlingEngineImplSlingMain expectedResponse;
        String js = '';

        client = new OASClient();
        api = new OASConfigmgrApi(client);

        js = JSON.serialize(OASOrgApacheSlingEngineImplSlingMain.getExample());
        res.setHeader('Content-Type', 'application/json');
        res.setBody(js);
        expectedResponse = OASOrgApacheSlingEngineImplSlingMain.getExample();
        response = (OASOrgApacheSlingEngineImplSlingMain) api.orgApacheSlingEngineImplSlingMainServlet(params);
        System.assertEquals(expectedResponse, response);
    }

    /**
     * 
     *
     * 
     */
    @isTest
    private static void orgApacheSlingEngineParametersTest() {
        HttpResponse res = new HttpResponse();
        res.setStatusCode(200);
        res.setStatus('OK');
        Test.setMock(HttpCalloutMock.class, new OASResponseMock(res));

        Map<String, Object> params = new Map<String, Object>{
            'post' => Boolean.getExample(),
            'apply' => Boolean.getExample(),
            'r_delete' => Boolean.getExample(),
            'action' => 'null',
            'location' => 'null',
            'propertylist' => new List<String>{''},
            'slingDefaultParameterEncoding' => 'null',
            'slingDefaultMaxParameters' => Integer.getExample(),
            'fileLocation' => 'null',
            'fileThreshold' => Integer.getExample(),
            'fileMax' => Integer.getExample(),
            'requestMax' => Integer.getExample(),
            'slingDefaultParameterCheckForAdditionalContainerParameters' => Boolean.getExample()
        };

        OASClient client;
        OASConfigmgrApi api;
        OASOrgApacheSlingEngineParametersInf response;
        OASOrgApacheSlingEngineParametersInf expectedResponse;
        String js = '';

        client = new OASClient();
        api = new OASConfigmgrApi(client);

        js = JSON.serialize(OASOrgApacheSlingEngineParametersInf.getExample());
        res.setHeader('Content-Type', 'application/json');
        res.setBody(js);
        expectedResponse = OASOrgApacheSlingEngineParametersInf.getExample();
        response = (OASOrgApacheSlingEngineParametersInf) api.orgApacheSlingEngineParameters(params);
        System.assertEquals(expectedResponse, response);
    }

    /**
     * 
     *
     * 
     */
    @isTest
    private static void orgApacheSlingEventImplEventingThreadPoolTest() {
        HttpResponse res = new HttpResponse();
        res.setStatusCode(200);
        res.setStatus('OK');
        Test.setMock(HttpCalloutMock.class, new OASResponseMock(res));

        Map<String, Object> params = new Map<String, Object>{
            'post' => Boolean.getExample(),
            'apply' => Boolean.getExample(),
            'r_delete' => Boolean.getExample(),
            'action' => 'null',
            'location' => 'null',
            'propertylist' => new List<String>{''},
            'minPoolSize' => Integer.getExample()
        };

        OASClient client;
        OASConfigmgrApi api;
        OASOrgApacheSlingEventImplEventingTh response;
        OASOrgApacheSlingEventImplEventingTh expectedResponse;
        String js = '';

        client = new OASClient();
        api = new OASConfigmgrApi(client);

        js = JSON.serialize(OASOrgApacheSlingEventImplEventingTh.getExample());
        res.setHeader('Content-Type', 'application/json');
        res.setBody(js);
        expectedResponse = OASOrgApacheSlingEventImplEventingTh.getExample();
        response = (OASOrgApacheSlingEventImplEventingTh) api.orgApacheSlingEventImplEventingThreadPool(params);
        System.assertEquals(expectedResponse, response);
    }

    /**
     * 
     *
     * 
     */
    @isTest
    private static void orgApacheSlingEventImplJobsDefaultJobManagerTest() {
        HttpResponse res = new HttpResponse();
        res.setStatusCode(200);
        res.setStatus('OK');
        Test.setMock(HttpCalloutMock.class, new OASResponseMock(res));

        Map<String, Object> params = new Map<String, Object>{
            'post' => Boolean.getExample(),
            'apply' => Boolean.getExample(),
            'r_delete' => Boolean.getExample(),
            'action' => 'null',
            'location' => 'null',
            'propertylist' => new List<String>{''},
            'queuePriority' => 'null',
            'queueRetries' => Integer.getExample(),
            'queueRetrydelay' => Integer.getExample(),
            'queueMaxparallel' => Integer.getExample()
        };

        OASClient client;
        OASConfigmgrApi api;
        OASOrgApacheSlingEventImplJobsDefaul response;
        OASOrgApacheSlingEventImplJobsDefaul expectedResponse;
        String js = '';

        client = new OASClient();
        api = new OASConfigmgrApi(client);

        js = JSON.serialize(OASOrgApacheSlingEventImplJobsDefaul.getExample());
        res.setHeader('Content-Type', 'application/json');
        res.setBody(js);
        expectedResponse = OASOrgApacheSlingEventImplJobsDefaul.getExample();
        response = (OASOrgApacheSlingEventImplJobsDefaul) api.orgApacheSlingEventImplJobsDefaultJobManager(params);
        System.assertEquals(expectedResponse, response);
    }

    /**
     * 
     *
     * 
     */
    @isTest
    private static void orgApacheSlingEventImplJobsJcrPersistenceHandlerTest() {
        HttpResponse res = new HttpResponse();
        res.setStatusCode(200);
        res.setStatus('OK');
        Test.setMock(HttpCalloutMock.class, new OASResponseMock(res));

        Map<String, Object> params = new Map<String, Object>{
            'post' => Boolean.getExample(),
            'apply' => Boolean.getExample(),
            'r_delete' => Boolean.getExample(),
            'action' => 'null',
            'location' => 'null',
            'propertylist' => new List<String>{''},
            'jobConsumermanagerDisableDistribution' => Boolean.getExample(),
            'startupDelay' => Integer.getExample(),
            'cleanupPeriod' => Integer.getExample()
        };

        OASClient client;
        OASConfigmgrApi api;
        OASOrgApacheSlingEventImplJobsJcrPer response;
        OASOrgApacheSlingEventImplJobsJcrPer expectedResponse;
        String js = '';

        client = new OASClient();
        api = new OASConfigmgrApi(client);

        js = JSON.serialize(OASOrgApacheSlingEventImplJobsJcrPer.getExample());
        res.setHeader('Content-Type', 'application/json');
        res.setBody(js);
        expectedResponse = OASOrgApacheSlingEventImplJobsJcrPer.getExample();
        response = (OASOrgApacheSlingEventImplJobsJcrPer) api.orgApacheSlingEventImplJobsJcrPersistenceHandler(params);
        System.assertEquals(expectedResponse, response);
    }

    /**
     * 
     *
     * 
     */
    @isTest
    private static void orgApacheSlingEventImplJobsJobConsumerManagerTest() {
        HttpResponse res = new HttpResponse();
        res.setStatusCode(200);
        res.setStatus('OK');
        Test.setMock(HttpCalloutMock.class, new OASResponseMock(res));

        Map<String, Object> params = new Map<String, Object>{
            'post' => Boolean.getExample(),
            'apply' => Boolean.getExample(),
            'r_delete' => Boolean.getExample(),
            'action' => 'null',
            'location' => 'null',
            'propertylist' => new List<String>{''},
            'orgApacheSlingInstallerConfigurationPersist' => Boolean.getExample(),
            'jobConsumermanagerWhitelist' => new List<String>{''},
            'jobConsumermanagerBlacklist' => new List<String>{''}
        };

        OASClient client;
        OASConfigmgrApi api;
        OASOrgApacheSlingEventImplJobsJobCon response;
        OASOrgApacheSlingEventImplJobsJobCon expectedResponse;
        String js = '';

        client = new OASClient();
        api = new OASConfigmgrApi(client);

        js = JSON.serialize(OASOrgApacheSlingEventImplJobsJobCon.getExample());
        res.setHeader('Content-Type', 'application/json');
        res.setBody(js);
        expectedResponse = OASOrgApacheSlingEventImplJobsJobCon.getExample();
        response = (OASOrgApacheSlingEventImplJobsJobCon) api.orgApacheSlingEventImplJobsJobConsumerManager(params);
        System.assertEquals(expectedResponse, response);
    }

    /**
     * 
     *
     * 
     */
    @isTest
    private static void orgApacheSlingEventJobsQueueConfigurationTest() {
        HttpResponse res = new HttpResponse();
        res.setStatusCode(200);
        res.setStatus('OK');
        Test.setMock(HttpCalloutMock.class, new OASResponseMock(res));

        Map<String, Object> params = new Map<String, Object>{
            'post' => Boolean.getExample(),
            'apply' => Boolean.getExample(),
            'r_delete' => Boolean.getExample(),
            'action' => 'null',
            'location' => 'null',
            'propertylist' => new List<String>{''},
            'queueName' => 'null',
            'queueTopics' => new List<String>{''},
            'queueType' => 'null',
            'queuePriority' => 'null',
            'queueRetries' => Integer.getExample(),
            'queueRetrydelay' => Integer.getExample(),
            'queueMaxparallel' => Double.getExample(),
            'queueKeepJobs' => Boolean.getExample(),
            'queuePreferRunOnCreationInstance' => Boolean.getExample(),
            'queueThreadPoolSize' => Integer.getExample(),
            'serviceRanking' => Integer.getExample()
        };

        OASClient client;
        OASConfigmgrApi api;
        OASOrgApacheSlingEventJobsQueueConfi response;
        OASOrgApacheSlingEventJobsQueueConfi expectedResponse;
        String js = '';

        client = new OASClient();
        api = new OASConfigmgrApi(client);

        js = JSON.serialize(OASOrgApacheSlingEventJobsQueueConfi.getExample());
        res.setHeader('Content-Type', 'application/json');
        res.setBody(js);
        expectedResponse = OASOrgApacheSlingEventJobsQueueConfi.getExample();
        response = (OASOrgApacheSlingEventJobsQueueConfi) api.orgApacheSlingEventJobsQueueConfiguration(params);
        System.assertEquals(expectedResponse, response);
    }

    /**
     * 
     *
     * 
     */
    @isTest
    private static void orgApacheSlingExtensionsWebconsolesecurityproviderInternalSlingWTest() {
        HttpResponse res = new HttpResponse();
        res.setStatusCode(200);
        res.setStatus('OK');
        Test.setMock(HttpCalloutMock.class, new OASResponseMock(res));

        Map<String, Object> params = new Map<String, Object>{
            'post' => Boolean.getExample(),
            'apply' => Boolean.getExample(),
            'r_delete' => Boolean.getExample(),
            'action' => 'null',
            'location' => 'null',
            'propertylist' => new List<String>{''},
            'users' => new List<String>{''},
            'groups' => new List<String>{''}
        };

        OASClient client;
        OASConfigmgrApi api;
        OASOrgApacheSlingExtensionsWebconsol response;
        OASOrgApacheSlingExtensionsWebconsol expectedResponse;
        String js = '';

        client = new OASClient();
        api = new OASConfigmgrApi(client);

        js = JSON.serialize(OASOrgApacheSlingExtensionsWebconsol.getExample());
        res.setHeader('Content-Type', 'application/json');
        res.setBody(js);
        expectedResponse = OASOrgApacheSlingExtensionsWebconsol.getExample();
        response = (OASOrgApacheSlingExtensionsWebconsol) api.orgApacheSlingExtensionsWebconsolesecurityproviderInternalSlingW(params);
        System.assertEquals(expectedResponse, response);
    }

    /**
     * 
     *
     * 
     */
    @isTest
    private static void orgApacheSlingFeatureflagsFeatureTest() {
        HttpResponse res = new HttpResponse();
        res.setStatusCode(200);
        res.setStatus('OK');
        Test.setMock(HttpCalloutMock.class, new OASResponseMock(res));

        Map<String, Object> params = new Map<String, Object>{
            'post' => Boolean.getExample(),
            'apply' => Boolean.getExample(),
            'r_delete' => Boolean.getExample(),
            'action' => 'null',
            'location' => 'null',
            'propertylist' => new List<String>{''},
            'name' => 'null',
            'description' => 'null',
            'enabled' => Boolean.getExample()
        };

        OASClient client;
        OASConfigmgrApi api;
        OASOrgApacheSlingFeatureflagsFeature response;
        OASOrgApacheSlingFeatureflagsFeature expectedResponse;
        String js = '';

        client = new OASClient();
        api = new OASConfigmgrApi(client);

        js = JSON.serialize(OASOrgApacheSlingFeatureflagsFeature.getExample());
        res.setHeader('Content-Type', 'application/json');
        res.setBody(js);
        expectedResponse = OASOrgApacheSlingFeatureflagsFeature.getExample();
        response = (OASOrgApacheSlingFeatureflagsFeature) api.orgApacheSlingFeatureflagsFeature(params);
        System.assertEquals(expectedResponse, response);
    }

    /**
     * 
     *
     * 
     */
    @isTest
    private static void orgApacheSlingFeatureflagsImplConfiguredFeatureTest() {
        HttpResponse res = new HttpResponse();
        res.setStatusCode(200);
        res.setStatus('OK');
        Test.setMock(HttpCalloutMock.class, new OASResponseMock(res));

        Map<String, Object> params = new Map<String, Object>{
            'post' => Boolean.getExample(),
            'apply' => Boolean.getExample(),
            'r_delete' => Boolean.getExample(),
            'action' => 'null',
            'location' => 'null',
            'propertylist' => new List<String>{''},
            'name' => 'null',
            'description' => 'null',
            'enabled' => Boolean.getExample()
        };

        OASClient client;
        OASConfigmgrApi api;
        OASOrgApacheSlingFeatureflagsImplCon response;
        OASOrgApacheSlingFeatureflagsImplCon expectedResponse;
        String js = '';

        client = new OASClient();
        api = new OASConfigmgrApi(client);

        js = JSON.serialize(OASOrgApacheSlingFeatureflagsImplCon.getExample());
        res.setHeader('Content-Type', 'application/json');
        res.setBody(js);
        expectedResponse = OASOrgApacheSlingFeatureflagsImplCon.getExample();
        response = (OASOrgApacheSlingFeatureflagsImplCon) api.orgApacheSlingFeatureflagsImplConfiguredFeature(params);
        System.assertEquals(expectedResponse, response);
    }

    /**
     * 
     *
     * 
     */
    @isTest
    private static void orgApacheSlingHapiImplHApiUtilImplTest() {
        HttpResponse res = new HttpResponse();
        res.setStatusCode(200);
        res.setStatus('OK');
        Test.setMock(HttpCalloutMock.class, new OASResponseMock(res));

        Map<String, Object> params = new Map<String, Object>{
            'post' => Boolean.getExample(),
            'apply' => Boolean.getExample(),
            'r_delete' => Boolean.getExample(),
            'action' => 'null',
            'location' => 'null',
            'propertylist' => new List<String>{''},
            'orgApacheSlingHapiToolsResourcetype' => 'null',
            'orgApacheSlingHapiToolsCollectionresourcetype' => 'null',
            'orgApacheSlingHapiToolsSearchpaths' => new List<String>{''},
            'orgApacheSlingHapiToolsExternalurl' => 'null',
            'orgApacheSlingHapiToolsEnabled' => Boolean.getExample()
        };

        OASClient client;
        OASConfigmgrApi api;
        OASOrgApacheSlingHapiImplHApiUtilImp response;
        OASOrgApacheSlingHapiImplHApiUtilImp expectedResponse;
        String js = '';

        client = new OASClient();
        api = new OASConfigmgrApi(client);

        js = JSON.serialize(OASOrgApacheSlingHapiImplHApiUtilImp.getExample());
        res.setHeader('Content-Type', 'application/json');
        res.setBody(js);
        expectedResponse = OASOrgApacheSlingHapiImplHApiUtilImp.getExample();
        response = (OASOrgApacheSlingHapiImplHApiUtilImp) api.orgApacheSlingHapiImplHApiUtilImpl(params);
        System.assertEquals(expectedResponse, response);
    }

    /**
     * 
     *
     * 
     */
    @isTest
    private static void orgApacheSlingHcCoreImplCompositeHealthCheckTest() {
        HttpResponse res = new HttpResponse();
        res.setStatusCode(200);
        res.setStatus('OK');
        Test.setMock(HttpCalloutMock.class, new OASResponseMock(res));

        Map<String, Object> params = new Map<String, Object>{
            'post' => Boolean.getExample(),
            'apply' => Boolean.getExample(),
            'r_delete' => Boolean.getExample(),
            'action' => 'null',
            'location' => 'null',
            'propertylist' => new List<String>{''},
            'hcName' => 'null',
            'hcTags' => new List<String>{''},
            'hcMbeanName' => 'null',
            'filterTags' => new List<String>{''},
            'filterCombineTagsWithOr' => Boolean.getExample()
        };

        OASClient client;
        OASConfigmgrApi api;
        OASOrgApacheSlingHcCoreImplComposite response;
        OASOrgApacheSlingHcCoreImplComposite expectedResponse;
        String js = '';

        client = new OASClient();
        api = new OASConfigmgrApi(client);

        js = JSON.serialize(OASOrgApacheSlingHcCoreImplComposite.getExample());
        res.setHeader('Content-Type', 'application/json');
        res.setBody(js);
        expectedResponse = OASOrgApacheSlingHcCoreImplComposite.getExample();
        response = (OASOrgApacheSlingHcCoreImplComposite) api.orgApacheSlingHcCoreImplCompositeHealthCheck(params);
        System.assertEquals(expectedResponse, response);
    }

    /**
     * 
     *
     * 
     */
    @isTest
    private static void orgApacheSlingHcCoreImplExecutorHealthCheckExecutorImplTest() {
        HttpResponse res = new HttpResponse();
        res.setStatusCode(200);
        res.setStatus('OK');
        Test.setMock(HttpCalloutMock.class, new OASResponseMock(res));

        Map<String, Object> params = new Map<String, Object>{
            'post' => Boolean.getExample(),
            'apply' => Boolean.getExample(),
            'r_delete' => Boolean.getExample(),
            'action' => 'null',
            'location' => 'null',
            'propertylist' => new List<String>{''},
            'timeoutInMs' => Integer.getExample(),
            'longRunningFutureThresholdForCriticalMs' => Integer.getExample(),
            'resultCacheTtlInMs' => Integer.getExample()
        };

        OASClient client;
        OASConfigmgrApi api;
        OASOrgApacheSlingHcCoreImplExecutorH response;
        OASOrgApacheSlingHcCoreImplExecutorH expectedResponse;
        String js = '';

        client = new OASClient();
        api = new OASConfigmgrApi(client);

        js = JSON.serialize(OASOrgApacheSlingHcCoreImplExecutorH.getExample());
        res.setHeader('Content-Type', 'application/json');
        res.setBody(js);
        expectedResponse = OASOrgApacheSlingHcCoreImplExecutorH.getExample();
        response = (OASOrgApacheSlingHcCoreImplExecutorH) api.orgApacheSlingHcCoreImplExecutorHealthCheckExecutorImpl(params);
        System.assertEquals(expectedResponse, response);
    }

    /**
     * 
     *
     * 
     */
    @isTest
    private static void orgApacheSlingHcCoreImplJmxAttributeHealthCheckTest() {
        HttpResponse res = new HttpResponse();
        res.setStatusCode(200);
        res.setStatus('OK');
        Test.setMock(HttpCalloutMock.class, new OASResponseMock(res));

        Map<String, Object> params = new Map<String, Object>{
            'post' => Boolean.getExample(),
            'apply' => Boolean.getExample(),
            'r_delete' => Boolean.getExample(),
            'action' => 'null',
            'location' => 'null',
            'propertylist' => new List<String>{''},
            'hcName' => 'null',
            'hcTags' => new List<String>{''},
            'hcMbeanName' => 'null',
            'mbeanName' => 'null',
            'attributeName' => 'null',
            'attributeValueConstraint' => 'null'
        };

        OASClient client;
        OASConfigmgrApi api;
        OASOrgApacheSlingHcCoreImplJmxAttrib response;
        OASOrgApacheSlingHcCoreImplJmxAttrib expectedResponse;
        String js = '';

        client = new OASClient();
        api = new OASConfigmgrApi(client);

        js = JSON.serialize(OASOrgApacheSlingHcCoreImplJmxAttrib.getExample());
        res.setHeader('Content-Type', 'application/json');
        res.setBody(js);
        expectedResponse = OASOrgApacheSlingHcCoreImplJmxAttrib.getExample();
        response = (OASOrgApacheSlingHcCoreImplJmxAttrib) api.orgApacheSlingHcCoreImplJmxAttributeHealthCheck(params);
        System.assertEquals(expectedResponse, response);
    }

    /**
     * 
     *
     * 
     */
    @isTest
    private static void orgApacheSlingHcCoreImplScriptableHealthCheckTest() {
        HttpResponse res = new HttpResponse();
        res.setStatusCode(200);
        res.setStatus('OK');
        Test.setMock(HttpCalloutMock.class, new OASResponseMock(res));

        Map<String, Object> params = new Map<String, Object>{
            'post' => Boolean.getExample(),
            'apply' => Boolean.getExample(),
            'r_delete' => Boolean.getExample(),
            'action' => 'null',
            'location' => 'null',
            'propertylist' => new List<String>{''},
            'hcName' => 'null',
            'hcTags' => new List<String>{''},
            'hcMbeanName' => 'null',
            'expression' => 'null',
            'languageExtension' => 'null'
        };

        OASClient client;
        OASConfigmgrApi api;
        OASOrgApacheSlingHcCoreImplScriptabl response;
        OASOrgApacheSlingHcCoreImplScriptabl expectedResponse;
        String js = '';

        client = new OASClient();
        api = new OASConfigmgrApi(client);

        js = JSON.serialize(OASOrgApacheSlingHcCoreImplScriptabl.getExample());
        res.setHeader('Content-Type', 'application/json');
        res.setBody(js);
        expectedResponse = OASOrgApacheSlingHcCoreImplScriptabl.getExample();
        response = (OASOrgApacheSlingHcCoreImplScriptabl) api.orgApacheSlingHcCoreImplScriptableHealthCheck(params);
        System.assertEquals(expectedResponse, response);
    }

    /**
     * 
     *
     * 
     */
    @isTest
    private static void orgApacheSlingHcCoreImplServletHealthCheckExecutorServletTest() {
        HttpResponse res = new HttpResponse();
        res.setStatusCode(200);
        res.setStatus('OK');
        Test.setMock(HttpCalloutMock.class, new OASResponseMock(res));

        Map<String, Object> params = new Map<String, Object>{
            'post' => Boolean.getExample(),
            'apply' => Boolean.getExample(),
            'r_delete' => Boolean.getExample(),
            'action' => 'null',
            'location' => 'null',
            'propertylist' => new List<String>{''},
            'servletPath' => 'null',
            'disabled' => Boolean.getExample(),
            'corsAccessControlAllowOrigin' => 'null'
        };

        OASClient client;
        OASConfigmgrApi api;
        OASOrgApacheSlingHcCoreImplServletHe response;
        OASOrgApacheSlingHcCoreImplServletHe expectedResponse;
        String js = '';

        client = new OASClient();
        api = new OASConfigmgrApi(client);

        js = JSON.serialize(OASOrgApacheSlingHcCoreImplServletHe.getExample());
        res.setHeader('Content-Type', 'application/json');
        res.setBody(js);
        expectedResponse = OASOrgApacheSlingHcCoreImplServletHe.getExample();
        response = (OASOrgApacheSlingHcCoreImplServletHe) api.orgApacheSlingHcCoreImplServletHealthCheckExecutorServlet(params);
        System.assertEquals(expectedResponse, response);
    }

    /**
     * 
     *
     * 
     */
    @isTest
    private static void orgApacheSlingHcCoreImplServletResultTxtVerboseSerializerTest() {
        HttpResponse res = new HttpResponse();
        res.setStatusCode(200);
        res.setStatus('OK');
        Test.setMock(HttpCalloutMock.class, new OASResponseMock(res));

        Map<String, Object> params = new Map<String, Object>{
            'post' => Boolean.getExample(),
            'apply' => Boolean.getExample(),
            'r_delete' => Boolean.getExample(),
            'action' => 'null',
            'location' => 'null',
            'propertylist' => new List<String>{''},
            'totalWidth' => Integer.getExample(),
            'colWidthName' => Integer.getExample(),
            'colWidthResult' => Integer.getExample(),
            'colWidthTiming' => Integer.getExample()
        };

        OASClient client;
        OASConfigmgrApi api;
        OASOrgApacheSlingHcCoreImplServletRe response;
        OASOrgApacheSlingHcCoreImplServletRe expectedResponse;
        String js = '';

        client = new OASClient();
        api = new OASConfigmgrApi(client);

        js = JSON.serialize(OASOrgApacheSlingHcCoreImplServletRe.getExample());
        res.setHeader('Content-Type', 'application/json');
        res.setBody(js);
        expectedResponse = OASOrgApacheSlingHcCoreImplServletRe.getExample();
        response = (OASOrgApacheSlingHcCoreImplServletRe) api.orgApacheSlingHcCoreImplServletResultTxtVerboseSerializer(params);
        System.assertEquals(expectedResponse, response);
    }

    /**
     * 
     *
     * 
     */
    @isTest
    private static void orgApacheSlingI18nImplI18NFilterTest() {
        HttpResponse res = new HttpResponse();
        res.setStatusCode(200);
        res.setStatus('OK');
        Test.setMock(HttpCalloutMock.class, new OASResponseMock(res));

        Map<String, Object> params = new Map<String, Object>{
            'post' => Boolean.getExample(),
            'apply' => Boolean.getExample(),
            'r_delete' => Boolean.getExample(),
            'action' => 'null',
            'location' => 'null',
            'propertylist' => new List<String>{''},
            'serviceRanking' => Integer.getExample(),
            'slingFilterScope' => new List<String>{''}
        };

        OASClient client;
        OASConfigmgrApi api;
        OASOrgApacheSlingI18nImplI18NFilterI response;
        OASOrgApacheSlingI18nImplI18NFilterI expectedResponse;
        String js = '';

        client = new OASClient();
        api = new OASConfigmgrApi(client);

        js = JSON.serialize(OASOrgApacheSlingI18nImplI18NFilterI.getExample());
        res.setHeader('Content-Type', 'application/json');
        res.setBody(js);
        expectedResponse = OASOrgApacheSlingI18nImplI18NFilterI.getExample();
        response = (OASOrgApacheSlingI18nImplI18NFilterI) api.orgApacheSlingI18nImplI18NFilter(params);
        System.assertEquals(expectedResponse, response);
    }

    /**
     * 
     *
     * 
     */
    @isTest
    private static void orgApacheSlingI18nImplJcrResourceBundleProviderTest() {
        HttpResponse res = new HttpResponse();
        res.setStatusCode(200);
        res.setStatus('OK');
        Test.setMock(HttpCalloutMock.class, new OASResponseMock(res));

        Map<String, Object> params = new Map<String, Object>{
            'post' => Boolean.getExample(),
            'apply' => Boolean.getExample(),
            'r_delete' => Boolean.getExample(),
            'action' => 'null',
            'location' => 'null',
            'propertylist' => new List<String>{''},
            'localeDefault' => 'null',
            'preloadBundles' => Boolean.getExample(),
            'invalidationDelay' => Integer.getExample()
        };

        OASClient client;
        OASConfigmgrApi api;
        OASOrgApacheSlingI18nImplJcrResource response;
        OASOrgApacheSlingI18nImplJcrResource expectedResponse;
        String js = '';

        client = new OASClient();
        api = new OASConfigmgrApi(client);

        js = JSON.serialize(OASOrgApacheSlingI18nImplJcrResource.getExample());
        res.setHeader('Content-Type', 'application/json');
        res.setBody(js);
        expectedResponse = OASOrgApacheSlingI18nImplJcrResource.getExample();
        response = (OASOrgApacheSlingI18nImplJcrResource) api.orgApacheSlingI18nImplJcrResourceBundleProvider(params);
        System.assertEquals(expectedResponse, response);
    }

    /**
     * 
     *
     * 
     */
    @isTest
    private static void orgApacheSlingInstallerProviderJcrImplJcrInstallerTest() {
        HttpResponse res = new HttpResponse();
        res.setStatusCode(200);
        res.setStatus('OK');
        Test.setMock(HttpCalloutMock.class, new OASResponseMock(res));

        Map<String, Object> params = new Map<String, Object>{
            'post' => Boolean.getExample(),
            'apply' => Boolean.getExample(),
            'r_delete' => Boolean.getExample(),
            'action' => 'null',
            'location' => 'null',
            'propertylist' => new List<String>{''},
            'handlerSchemes' => new List<String>{''},
            'slingJcrinstallFolderNameRegexp' => 'null',
            'slingJcrinstallFolderMaxDepth' => Integer.getExample(),
            'slingJcrinstallSearchPath' => new List<String>{''},
            'slingJcrinstallNewConfigPath' => 'null',
            'slingJcrinstallSignalPath' => 'null',
            'slingJcrinstallEnableWriteback' => Boolean.getExample()
        };

        OASClient client;
        OASConfigmgrApi api;
        OASOrgApacheSlingInstallerProviderJc response;
        OASOrgApacheSlingInstallerProviderJc expectedResponse;
        String js = '';

        client = new OASClient();
        api = new OASConfigmgrApi(client);

        js = JSON.serialize(OASOrgApacheSlingInstallerProviderJc.getExample());
        res.setHeader('Content-Type', 'application/json');
        res.setBody(js);
        expectedResponse = OASOrgApacheSlingInstallerProviderJc.getExample();
        response = (OASOrgApacheSlingInstallerProviderJc) api.orgApacheSlingInstallerProviderJcrImplJcrInstaller(params);
        System.assertEquals(expectedResponse, response);
    }

    /**
     * 
     *
     * 
     */
    @isTest
    private static void orgApacheSlingJcrBaseInternalLoginAdminWhitelistTest() {
        HttpResponse res = new HttpResponse();
        res.setStatusCode(200);
        res.setStatus('OK');
        Test.setMock(HttpCalloutMock.class, new OASResponseMock(res));

        Map<String, Object> params = new Map<String, Object>{
            'post' => Boolean.getExample(),
            'apply' => Boolean.getExample(),
            'r_delete' => Boolean.getExample(),
            'action' => 'null',
            'location' => 'null',
            'propertylist' => new List<String>{''},
            'whitelistBypass' => Boolean.getExample(),
            'whitelistBundlesRegexp' => 'null'
        };

        OASClient client;
        OASConfigmgrApi api;
        OASOrgApacheSlingJcrBaseInternalLogi response;
        OASOrgApacheSlingJcrBaseInternalLogi expectedResponse;
        String js = '';

        client = new OASClient();
        api = new OASConfigmgrApi(client);

        js = JSON.serialize(OASOrgApacheSlingJcrBaseInternalLogi.getExample());
        res.setHeader('Content-Type', 'application/json');
        res.setBody(js);
        expectedResponse = OASOrgApacheSlingJcrBaseInternalLogi.getExample();
        response = (OASOrgApacheSlingJcrBaseInternalLogi) api.orgApacheSlingJcrBaseInternalLoginAdminWhitelist(params);
        System.assertEquals(expectedResponse, response);
    }

    /**
     * 
     *
     * 
     */
    @isTest
    private static void orgApacheSlingJcrBaseInternalLoginAdminWhitelistFragmentTest() {
        HttpResponse res = new HttpResponse();
        res.setStatusCode(200);
        res.setStatus('OK');
        Test.setMock(HttpCalloutMock.class, new OASResponseMock(res));

        Map<String, Object> params = new Map<String, Object>{
            'post' => Boolean.getExample(),
            'apply' => Boolean.getExample(),
            'r_delete' => Boolean.getExample(),
            'action' => 'null',
            'location' => 'null',
            'propertylist' => new List<String>{''},
            'whitelistName' => 'null',
            'whitelistBundles' => new List<String>{''}
        };

        OASClient client;
        OASConfigmgrApi api;
        OASOrgApacheSlingJcrBaseInternalLogi response;
        OASOrgApacheSlingJcrBaseInternalLogi expectedResponse;
        String js = '';

        client = new OASClient();
        api = new OASConfigmgrApi(client);

        js = JSON.serialize(OASOrgApacheSlingJcrBaseInternalLogi.getExample());
        res.setHeader('Content-Type', 'application/json');
        res.setBody(js);
        expectedResponse = OASOrgApacheSlingJcrBaseInternalLogi.getExample();
        response = (OASOrgApacheSlingJcrBaseInternalLogi) api.orgApacheSlingJcrBaseInternalLoginAdminWhitelistFragment(params);
        System.assertEquals(expectedResponse, response);
    }

    /**
     * 
     *
     * 
     */
    @isTest
    private static void orgApacheSlingJcrDavexImplServletsSlingDavExServletTest() {
        HttpResponse res = new HttpResponse();
        res.setStatusCode(200);
        res.setStatus('OK');
        Test.setMock(HttpCalloutMock.class, new OASResponseMock(res));

        Map<String, Object> params = new Map<String, Object>{
            'post' => Boolean.getExample(),
            'apply' => Boolean.getExample(),
            'r_delete' => Boolean.getExample(),
            'action' => 'null',
            'location' => 'null',
            'propertylist' => new List<String>{''},
            'alias' => 'null',
            'davCreateAbsoluteUri' => Boolean.getExample(),
            'davProtectedhandlers' => 'null'
        };

        OASClient client;
        OASConfigmgrApi api;
        OASOrgApacheSlingJcrDavexImplServlet response;
        OASOrgApacheSlingJcrDavexImplServlet expectedResponse;
        String js = '';

        client = new OASClient();
        api = new OASConfigmgrApi(client);

        js = JSON.serialize(OASOrgApacheSlingJcrDavexImplServlet.getExample());
        res.setHeader('Content-Type', 'application/json');
        res.setBody(js);
        expectedResponse = OASOrgApacheSlingJcrDavexImplServlet.getExample();
        response = (OASOrgApacheSlingJcrDavexImplServlet) api.orgApacheSlingJcrDavexImplServletsSlingDavExServlet(params);
        System.assertEquals(expectedResponse, response);
    }

    /**
     * 
     *
     * 
     */
    @isTest
    private static void orgApacheSlingJcrJackrabbitServerJndiRegistrationSupportTest() {
        HttpResponse res = new HttpResponse();
        res.setStatusCode(200);
        res.setStatus('OK');
        Test.setMock(HttpCalloutMock.class, new OASResponseMock(res));

        Map<String, Object> params = new Map<String, Object>{
            'post' => Boolean.getExample(),
            'apply' => Boolean.getExample(),
            'r_delete' => Boolean.getExample(),
            'action' => 'null',
            'location' => 'null',
            'propertylist' => new List<String>{''},
            'javaNamingFactoryInitial' => 'null',
            'javaNamingProviderUrl' => 'null'
        };

        OASClient client;
        OASConfigmgrApi api;
        OASOrgApacheSlingJcrJackrabbitServer response;
        OASOrgApacheSlingJcrJackrabbitServer expectedResponse;
        String js = '';

        client = new OASClient();
        api = new OASConfigmgrApi(client);

        js = JSON.serialize(OASOrgApacheSlingJcrJackrabbitServer.getExample());
        res.setHeader('Content-Type', 'application/json');
        res.setBody(js);
        expectedResponse = OASOrgApacheSlingJcrJackrabbitServer.getExample();
        response = (OASOrgApacheSlingJcrJackrabbitServer) api.orgApacheSlingJcrJackrabbitServerJndiRegistrationSupport(params);
        System.assertEquals(expectedResponse, response);
    }

    /**
     * 
     *
     * 
     */
    @isTest
    private static void orgApacheSlingJcrJackrabbitServerRmiRegistrationSupportTest() {
        HttpResponse res = new HttpResponse();
        res.setStatusCode(200);
        res.setStatus('OK');
        Test.setMock(HttpCalloutMock.class, new OASResponseMock(res));

        Map<String, Object> params = new Map<String, Object>{
            'post' => Boolean.getExample(),
            'apply' => Boolean.getExample(),
            'r_delete' => Boolean.getExample(),
            'action' => 'null',
            'location' => 'null',
            'propertylist' => new List<String>{''},
            'port' => Integer.getExample()
        };

        OASClient client;
        OASConfigmgrApi api;
        OASOrgApacheSlingJcrJackrabbitServer response;
        OASOrgApacheSlingJcrJackrabbitServer expectedResponse;
        String js = '';

        client = new OASClient();
        api = new OASConfigmgrApi(client);

        js = JSON.serialize(OASOrgApacheSlingJcrJackrabbitServer.getExample());
        res.setHeader('Content-Type', 'application/json');
        res.setBody(js);
        expectedResponse = OASOrgApacheSlingJcrJackrabbitServer.getExample();
        response = (OASOrgApacheSlingJcrJackrabbitServer) api.orgApacheSlingJcrJackrabbitServerRmiRegistrationSupport(params);
        System.assertEquals(expectedResponse, response);
    }

    /**
     * 
     *
     * 
     */
    @isTest
    private static void orgApacheSlingJcrRepoinitImplRepositoryInitializerTest() {
        HttpResponse res = new HttpResponse();
        res.setStatusCode(200);
        res.setStatus('OK');
        Test.setMock(HttpCalloutMock.class, new OASResponseMock(res));

        Map<String, Object> params = new Map<String, Object>{
            'post' => Boolean.getExample(),
            'apply' => Boolean.getExample(),
            'r_delete' => Boolean.getExample(),
            'action' => 'null',
            'location' => 'null',
            'propertylist' => new List<String>{''},
            'references' => new List<String>{''}
        };

        OASClient client;
        OASConfigmgrApi api;
        OASOrgApacheSlingJcrRepoinitImplRepo response;
        OASOrgApacheSlingJcrRepoinitImplRepo expectedResponse;
        String js = '';

        client = new OASClient();
        api = new OASConfigmgrApi(client);

        js = JSON.serialize(OASOrgApacheSlingJcrRepoinitImplRepo.getExample());
        res.setHeader('Content-Type', 'application/json');
        res.setBody(js);
        expectedResponse = OASOrgApacheSlingJcrRepoinitImplRepo.getExample();
        response = (OASOrgApacheSlingJcrRepoinitImplRepo) api.orgApacheSlingJcrRepoinitImplRepositoryInitializer(params);
        System.assertEquals(expectedResponse, response);
    }

    /**
     * 
     *
     * 
     */
    @isTest
    private static void orgApacheSlingJcrRepoinitRepositoryInitializerTest() {
        HttpResponse res = new HttpResponse();
        res.setStatusCode(200);
        res.setStatus('OK');
        Test.setMock(HttpCalloutMock.class, new OASResponseMock(res));

        Map<String, Object> params = new Map<String, Object>{
            'post' => Boolean.getExample(),
            'apply' => Boolean.getExample(),
            'r_delete' => Boolean.getExample(),
            'action' => 'null',
            'location' => 'null',
            'propertylist' => new List<String>{''},
            'references' => new List<String>{''},
            'scripts' => new List<String>{''}
        };

        OASClient client;
        OASConfigmgrApi api;
        OASOrgApacheSlingJcrRepoinitReposito response;
        OASOrgApacheSlingJcrRepoinitReposito expectedResponse;
        String js = '';

        client = new OASClient();
        api = new OASConfigmgrApi(client);

        js = JSON.serialize(OASOrgApacheSlingJcrRepoinitReposito.getExample());
        res.setHeader('Content-Type', 'application/json');
        res.setBody(js);
        expectedResponse = OASOrgApacheSlingJcrRepoinitReposito.getExample();
        response = (OASOrgApacheSlingJcrRepoinitReposito) api.orgApacheSlingJcrRepoinitRepositoryInitializer(params);
        System.assertEquals(expectedResponse, response);
    }

    /**
     * 
     *
     * 
     */
    @isTest
    private static void orgApacheSlingJcrResourceInternalJcrResourceResolverFactoryImplTest() {
        HttpResponse res = new HttpResponse();
        res.setStatusCode(200);
        res.setStatus('OK');
        Test.setMock(HttpCalloutMock.class, new OASResponseMock(res));

        Map<String, Object> params = new Map<String, Object>{
            'post' => Boolean.getExample(),
            'apply' => Boolean.getExample(),
            'r_delete' => Boolean.getExample(),
            'action' => 'null',
            'location' => 'null',
            'propertylist' => new List<String>{''},
            'resourceResolverSearchpath' => new List<String>{''},
            'resourceResolverManglenamespaces' => Boolean.getExample(),
            'resourceResolverAllowDirect' => Boolean.getExample(),
            'resourceResolverRequiredProviders' => new List<String>{''},
            'resourceResolverRequiredProvidernames' => new List<String>{''},
            'resourceResolverVirtual' => new List<String>{''},
            'resourceResolverMapping' => new List<String>{''},
            'resourceResolverMapLocation' => 'null',
            'resourceResolverMapObservation' => new List<String>{''},
            'resourceResolverDefaultVanityRedirectStatus' => Integer.getExample(),
            'resourceResolverEnableVanitypath' => Boolean.getExample(),
            'resourceResolverVanitypathMaxEntries' => Integer.getExample(),
            'resourceResolverVanitypathMaxEntriesStartup' => Boolean.getExample(),
            'resourceResolverVanitypathBloomfilterMaxBytes' => Integer.getExample(),
            'resourceResolverOptimizeAliasResolution' => Boolean.getExample(),
            'resourceResolverVanitypathWhitelist' => new List<String>{''},
            'resourceResolverVanitypathBlacklist' => new List<String>{''},
            'resourceResolverVanityPrecedence' => Boolean.getExample(),
            'resourceResolverProviderhandlingParanoid' => Boolean.getExample(),
            'resourceResolverLogClosing' => Boolean.getExample(),
            'resourceResolverLogUnclosed' => Boolean.getExample()
        };

        OASClient client;
        OASConfigmgrApi api;
        OASOrgApacheSlingJcrResourceInternal response;
        OASOrgApacheSlingJcrResourceInternal expectedResponse;
        String js = '';

        client = new OASClient();
        api = new OASConfigmgrApi(client);

        js = JSON.serialize(OASOrgApacheSlingJcrResourceInternal.getExample());
        res.setHeader('Content-Type', 'application/json');
        res.setBody(js);
        expectedResponse = OASOrgApacheSlingJcrResourceInternal.getExample();
        response = (OASOrgApacheSlingJcrResourceInternal) api.orgApacheSlingJcrResourceInternalJcrResourceResolverFactoryImpl(params);
        System.assertEquals(expectedResponse, response);
    }

    /**
     * 
     *
     * 
     */
    @isTest
    private static void orgApacheSlingJcrResourceInternalJcrSystemUserValidatorTest() {
        HttpResponse res = new HttpResponse();
        res.setStatusCode(200);
        res.setStatus('OK');
        Test.setMock(HttpCalloutMock.class, new OASResponseMock(res));

        Map<String, Object> params = new Map<String, Object>{
            'post' => Boolean.getExample(),
            'apply' => Boolean.getExample(),
            'r_delete' => Boolean.getExample(),
            'action' => 'null',
            'location' => 'null',
            'propertylist' => new List<String>{''},
            'allowOnlySystemUser' => Boolean.getExample()
        };

        OASClient client;
        OASConfigmgrApi api;
        OASOrgApacheSlingJcrResourceInternal response;
        OASOrgApacheSlingJcrResourceInternal expectedResponse;
        String js = '';

        client = new OASClient();
        api = new OASConfigmgrApi(client);

        js = JSON.serialize(OASOrgApacheSlingJcrResourceInternal.getExample());
        res.setHeader('Content-Type', 'application/json');
        res.setBody(js);
        expectedResponse = OASOrgApacheSlingJcrResourceInternal.getExample();
        response = (OASOrgApacheSlingJcrResourceInternal) api.orgApacheSlingJcrResourceInternalJcrSystemUserValidator(params);
        System.assertEquals(expectedResponse, response);
    }

    /**
     * 
     *
     * 
     */
    @isTest
    private static void orgApacheSlingJcrResourcesecurityImplResourceAccessGateFactoryTest() {
        HttpResponse res = new HttpResponse();
        res.setStatusCode(200);
        res.setStatus('OK');
        Test.setMock(HttpCalloutMock.class, new OASResponseMock(res));

        Map<String, Object> params = new Map<String, Object>{
            'post' => Boolean.getExample(),
            'apply' => Boolean.getExample(),
            'r_delete' => Boolean.getExample(),
            'action' => 'null',
            'location' => 'null',
            'propertylist' => new List<String>{''},
            'path' => 'null',
            'checkpathPrefix' => 'null',
            'jcrPath' => 'null'
        };

        OASClient client;
        OASConfigmgrApi api;
        OASOrgApacheSlingJcrResourcesecurity response;
        OASOrgApacheSlingJcrResourcesecurity expectedResponse;
        String js = '';

        client = new OASClient();
        api = new OASConfigmgrApi(client);

        js = JSON.serialize(OASOrgApacheSlingJcrResourcesecurity.getExample());
        res.setHeader('Content-Type', 'application/json');
        res.setBody(js);
        expectedResponse = OASOrgApacheSlingJcrResourcesecurity.getExample();
        response = (OASOrgApacheSlingJcrResourcesecurity) api.orgApacheSlingJcrResourcesecurityImplResourceAccessGateFactory(params);
        System.assertEquals(expectedResponse, response);
    }

    /**
     * 
     *
     * 
     */
    @isTest
    private static void orgApacheSlingJcrWebdavImplHandlerDefaultHandlerServiceTest() {
        HttpResponse res = new HttpResponse();
        res.setStatusCode(200);
        res.setStatus('OK');
        Test.setMock(HttpCalloutMock.class, new OASResponseMock(res));

        Map<String, Object> params = new Map<String, Object>{
            'post' => Boolean.getExample(),
            'apply' => Boolean.getExample(),
            'r_delete' => Boolean.getExample(),
            'action' => 'null',
            'location' => 'null',
            'propertylist' => new List<String>{''},
            'serviceRanking' => Integer.getExample(),
            'typeCollections' => 'null',
            'typeNoncollections' => 'null',
            'typeContent' => 'null'
        };

        OASClient client;
        OASConfigmgrApi api;
        OASOrgApacheSlingJcrWebdavImplHandle response;
        OASOrgApacheSlingJcrWebdavImplHandle expectedResponse;
        String js = '';

        client = new OASClient();
        api = new OASConfigmgrApi(client);

        js = JSON.serialize(OASOrgApacheSlingJcrWebdavImplHandle.getExample());
        res.setHeader('Content-Type', 'application/json');
        res.setBody(js);
        expectedResponse = OASOrgApacheSlingJcrWebdavImplHandle.getExample();
        response = (OASOrgApacheSlingJcrWebdavImplHandle) api.orgApacheSlingJcrWebdavImplHandlerDefaultHandlerService(params);
        System.assertEquals(expectedResponse, response);
    }

    /**
     * 
     *
     * 
     */
    @isTest
    private static void orgApacheSlingJcrWebdavImplHandlerDirListingExportHandlerServicTest() {
        HttpResponse res = new HttpResponse();
        res.setStatusCode(200);
        res.setStatus('OK');
        Test.setMock(HttpCalloutMock.class, new OASResponseMock(res));

        Map<String, Object> params = new Map<String, Object>{
            'post' => Boolean.getExample(),
            'apply' => Boolean.getExample(),
            'r_delete' => Boolean.getExample(),
            'action' => 'null',
            'location' => 'null',
            'propertylist' => new List<String>{''},
            'serviceRanking' => Integer.getExample()
        };

        OASClient client;
        OASConfigmgrApi api;
        OASOrgApacheSlingJcrWebdavImplHandle response;
        OASOrgApacheSlingJcrWebdavImplHandle expectedResponse;
        String js = '';

        client = new OASClient();
        api = new OASConfigmgrApi(client);

        js = JSON.serialize(OASOrgApacheSlingJcrWebdavImplHandle.getExample());
        res.setHeader('Content-Type', 'application/json');
        res.setBody(js);
        expectedResponse = OASOrgApacheSlingJcrWebdavImplHandle.getExample();
        response = (OASOrgApacheSlingJcrWebdavImplHandle) api.orgApacheSlingJcrWebdavImplHandlerDirListingExportHandlerServic(params);
        System.assertEquals(expectedResponse, response);
    }

    /**
     * 
     *
     * 
     */
    @isTest
    private static void orgApacheSlingJcrWebdavImplServletsSimpleWebDavServletTest() {
        HttpResponse res = new HttpResponse();
        res.setStatusCode(200);
        res.setStatus('OK');
        Test.setMock(HttpCalloutMock.class, new OASResponseMock(res));

        Map<String, Object> params = new Map<String, Object>{
            'post' => Boolean.getExample(),
            'apply' => Boolean.getExample(),
            'r_delete' => Boolean.getExample(),
            'action' => 'null',
            'location' => 'null',
            'propertylist' => new List<String>{''},
            'davRoot' => 'null',
            'davCreateAbsoluteUri' => Boolean.getExample(),
            'davRealm' => 'null',
            'collectionTypes' => new List<String>{''},
            'filterPrefixes' => new List<String>{''},
            'filterTypes' => 'null',
            'filterUris' => 'null',
            'typeCollections' => 'null',
            'typeNoncollections' => 'null',
            'typeContent' => 'null'
        };

        OASClient client;
        OASConfigmgrApi api;
        OASOrgApacheSlingJcrWebdavImplServle response;
        OASOrgApacheSlingJcrWebdavImplServle expectedResponse;
        String js = '';

        client = new OASClient();
        api = new OASConfigmgrApi(client);

        js = JSON.serialize(OASOrgApacheSlingJcrWebdavImplServle.getExample());
        res.setHeader('Content-Type', 'application/json');
        res.setBody(js);
        expectedResponse = OASOrgApacheSlingJcrWebdavImplServle.getExample();
        response = (OASOrgApacheSlingJcrWebdavImplServle) api.orgApacheSlingJcrWebdavImplServletsSimpleWebDavServlet(params);
        System.assertEquals(expectedResponse, response);
    }

    /**
     * 
     *
     * 
     */
    @isTest
    private static void orgApacheSlingJmxProviderImplJMXResourceProviderTest() {
        HttpResponse res = new HttpResponse();
        res.setStatusCode(200);
        res.setStatus('OK');
        Test.setMock(HttpCalloutMock.class, new OASResponseMock(res));

        Map<String, Object> params = new Map<String, Object>{
            'post' => Boolean.getExample(),
            'apply' => Boolean.getExample(),
            'r_delete' => Boolean.getExample(),
            'action' => 'null',
            'location' => 'null',
            'propertylist' => new List<String>{''},
            'providerRoots' => 'null'
        };

        OASClient client;
        OASConfigmgrApi api;
        OASOrgApacheSlingJmxProviderImplJMXR response;
        OASOrgApacheSlingJmxProviderImplJMXR expectedResponse;
        String js = '';

        client = new OASClient();
        api = new OASConfigmgrApi(client);

        js = JSON.serialize(OASOrgApacheSlingJmxProviderImplJMXR.getExample());
        res.setHeader('Content-Type', 'application/json');
        res.setBody(js);
        expectedResponse = OASOrgApacheSlingJmxProviderImplJMXR.getExample();
        response = (OASOrgApacheSlingJmxProviderImplJMXR) api.orgApacheSlingJmxProviderImplJMXResourceProvider(params);
        System.assertEquals(expectedResponse, response);
    }

    /**
     * 
     *
     * 
     */
    @isTest
    private static void orgApacheSlingModelsImplModelAdapterFactoryTest() {
        HttpResponse res = new HttpResponse();
        res.setStatusCode(200);
        res.setStatus('OK');
        Test.setMock(HttpCalloutMock.class, new OASResponseMock(res));

        Map<String, Object> params = new Map<String, Object>{
            'post' => Boolean.getExample(),
            'apply' => Boolean.getExample(),
            'r_delete' => Boolean.getExample(),
            'action' => 'null',
            'location' => 'null',
            'propertylist' => new List<String>{''},
            'osgiHttpWhiteboardListener' => 'null',
            'osgiHttpWhiteboardContextSelect' => 'null',
            'maxRecursionDepth' => Integer.getExample(),
            'cleanupJobPeriod' => Integer.getExample()
        };

        OASClient client;
        OASConfigmgrApi api;
        OASOrgApacheSlingModelsImplModelAdap response;
        OASOrgApacheSlingModelsImplModelAdap expectedResponse;
        String js = '';

        client = new OASClient();
        api = new OASConfigmgrApi(client);

        js = JSON.serialize(OASOrgApacheSlingModelsImplModelAdap.getExample());
        res.setHeader('Content-Type', 'application/json');
        res.setBody(js);
        expectedResponse = OASOrgApacheSlingModelsImplModelAdap.getExample();
        response = (OASOrgApacheSlingModelsImplModelAdap) api.orgApacheSlingModelsImplModelAdapterFactory(params);
        System.assertEquals(expectedResponse, response);
    }

    /**
     * 
     *
     * 
     */
    @isTest
    private static void orgApacheSlingModelsJacksonexporterImplResourceModuleProviderTest() {
        HttpResponse res = new HttpResponse();
        res.setStatusCode(200);
        res.setStatus('OK');
        Test.setMock(HttpCalloutMock.class, new OASResponseMock(res));

        Map<String, Object> params = new Map<String, Object>{
            'post' => Boolean.getExample(),
            'apply' => Boolean.getExample(),
            'r_delete' => Boolean.getExample(),
            'action' => 'null',
            'location' => 'null',
            'propertylist' => new List<String>{''},
            'maxRecursionLevels' => Integer.getExample()
        };

        OASClient client;
        OASConfigmgrApi api;
        OASOrgApacheSlingModelsJacksonexport response;
        OASOrgApacheSlingModelsJacksonexport expectedResponse;
        String js = '';

        client = new OASClient();
        api = new OASConfigmgrApi(client);

        js = JSON.serialize(OASOrgApacheSlingModelsJacksonexport.getExample());
        res.setHeader('Content-Type', 'application/json');
        res.setBody(js);
        expectedResponse = OASOrgApacheSlingModelsJacksonexport.getExample();
        response = (OASOrgApacheSlingModelsJacksonexport) api.orgApacheSlingModelsJacksonexporterImplResourceModuleProvider(params);
        System.assertEquals(expectedResponse, response);
    }

    /**
     * 
     *
     * 
     */
    @isTest
    private static void orgApacheSlingResourceInventoryImplResourceInventoryPrinterFactoTest() {
        HttpResponse res = new HttpResponse();
        res.setStatusCode(200);
        res.setStatus('OK');
        Test.setMock(HttpCalloutMock.class, new OASResponseMock(res));

        Map<String, Object> params = new Map<String, Object>{
            'post' => Boolean.getExample(),
            'apply' => Boolean.getExample(),
            'r_delete' => Boolean.getExample(),
            'action' => 'null',
            'location' => 'null',
            'propertylist' => new List<String>{''},
            'felixInventoryPrinterName' => 'null',
            'felixInventoryPrinterTitle' => 'null',
            'path' => 'null'
        };

        OASClient client;
        OASConfigmgrApi api;
        OASOrgApacheSlingResourceInventoryIm response;
        OASOrgApacheSlingResourceInventoryIm expectedResponse;
        String js = '';

        client = new OASClient();
        api = new OASConfigmgrApi(client);

        js = JSON.serialize(OASOrgApacheSlingResourceInventoryIm.getExample());
        res.setHeader('Content-Type', 'application/json');
        res.setBody(js);
        expectedResponse = OASOrgApacheSlingResourceInventoryIm.getExample();
        response = (OASOrgApacheSlingResourceInventoryIm) api.orgApacheSlingResourceInventoryImplResourceInventoryPrinterFacto(params);
        System.assertEquals(expectedResponse, response);
    }

    /**
     * 
     *
     * 
     */
    @isTest
    private static void orgApacheSlingResourcemergerImplMergedResourceProviderFactoryTest() {
        HttpResponse res = new HttpResponse();
        res.setStatusCode(200);
        res.setStatus('OK');
        Test.setMock(HttpCalloutMock.class, new OASResponseMock(res));

        Map<String, Object> params = new Map<String, Object>{
            'post' => Boolean.getExample(),
            'apply' => Boolean.getExample(),
            'r_delete' => Boolean.getExample(),
            'action' => 'null',
            'location' => 'null',
            'propertylist' => new List<String>{''},
            'mergeRoot' => 'null',
            'mergeReadOnly' => Boolean.getExample()
        };

        OASClient client;
        OASConfigmgrApi api;
        OASOrgApacheSlingResourcemergerImplM response;
        OASOrgApacheSlingResourcemergerImplM expectedResponse;
        String js = '';

        client = new OASClient();
        api = new OASConfigmgrApi(client);

        js = JSON.serialize(OASOrgApacheSlingResourcemergerImplM.getExample());
        res.setHeader('Content-Type', 'application/json');
        res.setBody(js);
        expectedResponse = OASOrgApacheSlingResourcemergerImplM.getExample();
        response = (OASOrgApacheSlingResourcemergerImplM) api.orgApacheSlingResourcemergerImplMergedResourceProviderFactory(params);
        System.assertEquals(expectedResponse, response);
    }

    /**
     * 
     *
     * 
     */
    @isTest
    private static void orgApacheSlingResourcemergerPickerOverridingTest() {
        HttpResponse res = new HttpResponse();
        res.setStatusCode(200);
        res.setStatus('OK');
        Test.setMock(HttpCalloutMock.class, new OASResponseMock(res));

        Map<String, Object> params = new Map<String, Object>{
            'post' => Boolean.getExample(),
            'apply' => Boolean.getExample(),
            'r_delete' => Boolean.getExample(),
            'action' => 'null',
            'location' => 'null',
            'propertylist' => new List<String>{''},
            'mergeRoot' => 'null',
            'mergeReadOnly' => Boolean.getExample()
        };

        OASClient client;
        OASConfigmgrApi api;
        OASOrgApacheSlingResourcemergerPicke response;
        OASOrgApacheSlingResourcemergerPicke expectedResponse;
        String js = '';

        client = new OASClient();
        api = new OASConfigmgrApi(client);

        js = JSON.serialize(OASOrgApacheSlingResourcemergerPicke.getExample());
        res.setHeader('Content-Type', 'application/json');
        res.setBody(js);
        expectedResponse = OASOrgApacheSlingResourcemergerPicke.getExample();
        response = (OASOrgApacheSlingResourcemergerPicke) api.orgApacheSlingResourcemergerPickerOverriding(params);
        System.assertEquals(expectedResponse, response);
    }

    /**
     * 
     *
     * 
     */
    @isTest
    private static void orgApacheSlingScriptingCoreImplScriptCacheImplTest() {
        HttpResponse res = new HttpResponse();
        res.setStatusCode(200);
        res.setStatus('OK');
        Test.setMock(HttpCalloutMock.class, new OASResponseMock(res));

        Map<String, Object> params = new Map<String, Object>{
            'post' => Boolean.getExample(),
            'apply' => Boolean.getExample(),
            'r_delete' => Boolean.getExample(),
            'action' => 'null',
            'location' => 'null',
            'propertylist' => new List<String>{''},
            'orgApacheSlingScriptingCacheSize' => Integer.getExample(),
            'orgApacheSlingScriptingCacheAdditionalExtensions' => new List<String>{''}
        };

        OASClient client;
        OASConfigmgrApi api;
        OASOrgApacheSlingScriptingCoreImplSc response;
        OASOrgApacheSlingScriptingCoreImplSc expectedResponse;
        String js = '';

        client = new OASClient();
        api = new OASConfigmgrApi(client);

        js = JSON.serialize(OASOrgApacheSlingScriptingCoreImplSc.getExample());
        res.setHeader('Content-Type', 'application/json');
        res.setBody(js);
        expectedResponse = OASOrgApacheSlingScriptingCoreImplSc.getExample();
        response = (OASOrgApacheSlingScriptingCoreImplSc) api.orgApacheSlingScriptingCoreImplScriptCacheImpl(params);
        System.assertEquals(expectedResponse, response);
    }

    /**
     * 
     *
     * 
     */
    @isTest
    private static void orgApacheSlingScriptingCoreImplScriptingResourceResolverProviderTest() {
        HttpResponse res = new HttpResponse();
        res.setStatusCode(200);
        res.setStatus('OK');
        Test.setMock(HttpCalloutMock.class, new OASResponseMock(res));

        Map<String, Object> params = new Map<String, Object>{
            'post' => Boolean.getExample(),
            'apply' => Boolean.getExample(),
            'r_delete' => Boolean.getExample(),
            'action' => 'null',
            'location' => 'null',
            'propertylist' => new List<String>{''},
            'logStacktraceOnclose' => Boolean.getExample()
        };

        OASClient client;
        OASConfigmgrApi api;
        OASOrgApacheSlingScriptingCoreImplSc response;
        OASOrgApacheSlingScriptingCoreImplSc expectedResponse;
        String js = '';

        client = new OASClient();
        api = new OASConfigmgrApi(client);

        js = JSON.serialize(OASOrgApacheSlingScriptingCoreImplSc.getExample());
        res.setHeader('Content-Type', 'application/json');
        res.setBody(js);
        expectedResponse = OASOrgApacheSlingScriptingCoreImplSc.getExample();
        response = (OASOrgApacheSlingScriptingCoreImplSc) api.orgApacheSlingScriptingCoreImplScriptingResourceResolverProvider(params);
        System.assertEquals(expectedResponse, response);
    }

    /**
     * 
     *
     * 
     */
    @isTest
    private static void orgApacheSlingScriptingJavaImplJavaScriptEngineFactoryTest() {
        HttpResponse res = new HttpResponse();
        res.setStatusCode(200);
        res.setStatus('OK');
        Test.setMock(HttpCalloutMock.class, new OASResponseMock(res));

        Map<String, Object> params = new Map<String, Object>{
            'post' => Boolean.getExample(),
            'apply' => Boolean.getExample(),
            'r_delete' => Boolean.getExample(),
            'action' => 'null',
            'location' => 'null',
            'propertylist' => new List<String>{''},
            'javaClassdebuginfo' => Boolean.getExample(),
            'javaJavaEncoding' => 'null',
            'javaCompilerSourceVM' => 'null',
            'javaCompilerTargetVM' => 'null'
        };

        OASClient client;
        OASConfigmgrApi api;
        OASOrgApacheSlingScriptingJavaImplJa response;
        OASOrgApacheSlingScriptingJavaImplJa expectedResponse;
        String js = '';

        client = new OASClient();
        api = new OASConfigmgrApi(client);

        js = JSON.serialize(OASOrgApacheSlingScriptingJavaImplJa.getExample());
        res.setHeader('Content-Type', 'application/json');
        res.setBody(js);
        expectedResponse = OASOrgApacheSlingScriptingJavaImplJa.getExample();
        response = (OASOrgApacheSlingScriptingJavaImplJa) api.orgApacheSlingScriptingJavaImplJavaScriptEngineFactory(params);
        System.assertEquals(expectedResponse, response);
    }

    /**
     * 
     *
     * 
     */
    @isTest
    private static void orgApacheSlingScriptingJavascriptInternalRhinoJavaScriptEngineFaTest() {
        HttpResponse res = new HttpResponse();
        res.setStatusCode(200);
        res.setStatus('OK');
        Test.setMock(HttpCalloutMock.class, new OASResponseMock(res));

        Map<String, Object> params = new Map<String, Object>{
            'post' => Boolean.getExample(),
            'apply' => Boolean.getExample(),
            'r_delete' => Boolean.getExample(),
            'action' => 'null',
            'location' => 'null',
            'propertylist' => new List<String>{''},
            'orgApacheSlingScriptingJavascriptRhinoOptLevel' => Integer.getExample()
        };

        OASClient client;
        OASConfigmgrApi api;
        OASOrgApacheSlingScriptingJavascript response;
        OASOrgApacheSlingScriptingJavascript expectedResponse;
        String js = '';

        client = new OASClient();
        api = new OASConfigmgrApi(client);

        js = JSON.serialize(OASOrgApacheSlingScriptingJavascript.getExample());
        res.setHeader('Content-Type', 'application/json');
        res.setBody(js);
        expectedResponse = OASOrgApacheSlingScriptingJavascript.getExample();
        response = (OASOrgApacheSlingScriptingJavascript) api.orgApacheSlingScriptingJavascriptInternalRhinoJavaScriptEngineFa(params);
        System.assertEquals(expectedResponse, response);
    }

    /**
     * 
     *
     * 
     */
    @isTest
    private static void orgApacheSlingScriptingJspJspScriptEngineFactoryTest() {
        HttpResponse res = new HttpResponse();
        res.setStatusCode(200);
        res.setStatus('OK');
        Test.setMock(HttpCalloutMock.class, new OASResponseMock(res));

        Map<String, Object> params = new Map<String, Object>{
            'post' => Boolean.getExample(),
            'apply' => Boolean.getExample(),
            'r_delete' => Boolean.getExample(),
            'action' => 'null',
            'location' => 'null',
            'propertylist' => new List<String>{''},
            'jasperCompilerTargetVM' => 'null',
            'jasperCompilerSourceVM' => 'null',
            'jasperClassdebuginfo' => Boolean.getExample(),
            'jasperEnablePooling' => Boolean.getExample(),
            'jasperIeClassId' => 'null',
            'jasperGenStringAsCharArray' => Boolean.getExample(),
            'jasperKeepgenerated' => Boolean.getExample(),
            'jasperMappedfile' => Boolean.getExample(),
            'jasperTrimSpaces' => Boolean.getExample(),
            'jasperDisplaySourceFragments' => Boolean.getExample(),
            'defaultIsSession' => Boolean.getExample()
        };

        OASClient client;
        OASConfigmgrApi api;
        OASOrgApacheSlingScriptingJspJspScri response;
        OASOrgApacheSlingScriptingJspJspScri expectedResponse;
        String js = '';

        client = new OASClient();
        api = new OASConfigmgrApi(client);

        js = JSON.serialize(OASOrgApacheSlingScriptingJspJspScri.getExample());
        res.setHeader('Content-Type', 'application/json');
        res.setBody(js);
        expectedResponse = OASOrgApacheSlingScriptingJspJspScri.getExample();
        response = (OASOrgApacheSlingScriptingJspJspScri) api.orgApacheSlingScriptingJspJspScriptEngineFactory(params);
        System.assertEquals(expectedResponse, response);
    }

    /**
     * 
     *
     * 
     */
    @isTest
    private static void orgApacheSlingScriptingSightlyJsImplJsapiSlyBindingsValuesProvTest() {
        HttpResponse res = new HttpResponse();
        res.setStatusCode(200);
        res.setStatus('OK');
        Test.setMock(HttpCalloutMock.class, new OASResponseMock(res));

        Map<String, Object> params = new Map<String, Object>{
            'post' => Boolean.getExample(),
            'apply' => Boolean.getExample(),
            'r_delete' => Boolean.getExample(),
            'action' => 'null',
            'location' => 'null',
            'propertylist' => new List<String>{''},
            'orgApacheSlingScriptingSightlyJsBindings' => new List<String>{''}
        };

        OASClient client;
        OASConfigmgrApi api;
        OASOrgApacheSlingScriptingSightlyJsI response;
        OASOrgApacheSlingScriptingSightlyJsI expectedResponse;
        String js = '';

        client = new OASClient();
        api = new OASConfigmgrApi(client);

        js = JSON.serialize(OASOrgApacheSlingScriptingSightlyJsI.getExample());
        res.setHeader('Content-Type', 'application/json');
        res.setBody(js);
        expectedResponse = OASOrgApacheSlingScriptingSightlyJsI.getExample();
        response = (OASOrgApacheSlingScriptingSightlyJsI) api.orgApacheSlingScriptingSightlyJsImplJsapiSlyBindingsValuesProv(params);
        System.assertEquals(expectedResponse, response);
    }

    /**
     * 
     *
     * 
     */
    @isTest
    private static void orgApacheSlingSecurityImplContentDispositionFilterTest() {
        HttpResponse res = new HttpResponse();
        res.setStatusCode(200);
        res.setStatus('OK');
        Test.setMock(HttpCalloutMock.class, new OASResponseMock(res));

        Map<String, Object> params = new Map<String, Object>{
            'post' => Boolean.getExample(),
            'apply' => Boolean.getExample(),
            'r_delete' => Boolean.getExample(),
            'action' => 'null',
            'location' => 'null',
            'propertylist' => new List<String>{''},
            'slingContentDispositionPaths' => new List<String>{''},
            'slingContentDispositionExcludedPaths' => new List<String>{''},
            'slingContentDispositionAllPaths' => Boolean.getExample()
        };

        OASClient client;
        OASConfigmgrApi api;
        OASOrgApacheSlingSecurityImplContent response;
        OASOrgApacheSlingSecurityImplContent expectedResponse;
        String js = '';

        client = new OASClient();
        api = new OASConfigmgrApi(client);

        js = JSON.serialize(OASOrgApacheSlingSecurityImplContent.getExample());
        res.setHeader('Content-Type', 'application/json');
        res.setBody(js);
        expectedResponse = OASOrgApacheSlingSecurityImplContent.getExample();
        response = (OASOrgApacheSlingSecurityImplContent) api.orgApacheSlingSecurityImplContentDispositionFilter(params);
        System.assertEquals(expectedResponse, response);
    }

    /**
     * 
     *
     * 
     */
    @isTest
    private static void orgApacheSlingSecurityImplReferrerFilterTest() {
        HttpResponse res = new HttpResponse();
        res.setStatusCode(200);
        res.setStatus('OK');
        Test.setMock(HttpCalloutMock.class, new OASResponseMock(res));

        Map<String, Object> params = new Map<String, Object>{
            'post' => Boolean.getExample(),
            'apply' => Boolean.getExample(),
            'r_delete' => Boolean.getExample(),
            'action' => 'null',
            'location' => 'null',
            'propertylist' => new List<String>{''},
            'allowEmpty' => Boolean.getExample(),
            'allowHosts' => new List<String>{''},
            'allowHostsRegexp' => new List<String>{''},
            'filterMethods' => new List<String>{''},
            'excludeAgentsRegexp' => new List<String>{''}
        };

        OASClient client;
        OASConfigmgrApi api;
        OASOrgApacheSlingSecurityImplReferre response;
        OASOrgApacheSlingSecurityImplReferre expectedResponse;
        String js = '';

        client = new OASClient();
        api = new OASConfigmgrApi(client);

        js = JSON.serialize(OASOrgApacheSlingSecurityImplReferre.getExample());
        res.setHeader('Content-Type', 'application/json');
        res.setBody(js);
        expectedResponse = OASOrgApacheSlingSecurityImplReferre.getExample();
        response = (OASOrgApacheSlingSecurityImplReferre) api.orgApacheSlingSecurityImplReferrerFilter(params);
        System.assertEquals(expectedResponse, response);
    }

    /**
     * 
     *
     * 
     */
    @isTest
    private static void orgApacheSlingServiceusermappingImplServiceUserMapperImplTest() {
        HttpResponse res = new HttpResponse();
        res.setStatusCode(200);
        res.setStatus('OK');
        Test.setMock(HttpCalloutMock.class, new OASResponseMock(res));

        Map<String, Object> params = new Map<String, Object>{
            'post' => Boolean.getExample(),
            'apply' => Boolean.getExample(),
            'r_delete' => Boolean.getExample(),
            'action' => 'null',
            'location' => 'null',
            'propertylist' => new List<String>{''},
            'userMapping' => new List<String>{''},
            'userDefault' => 'null',
            'userEnableDefaultMapping' => Boolean.getExample(),
            'requireValidation' => Boolean.getExample()
        };

        OASClient client;
        OASConfigmgrApi api;
        OASOrgApacheSlingServiceusermappingI response;
        OASOrgApacheSlingServiceusermappingI expectedResponse;
        String js = '';

        client = new OASClient();
        api = new OASConfigmgrApi(client);

        js = JSON.serialize(OASOrgApacheSlingServiceusermappingI.getExample());
        res.setHeader('Content-Type', 'application/json');
        res.setBody(js);
        expectedResponse = OASOrgApacheSlingServiceusermappingI.getExample();
        response = (OASOrgApacheSlingServiceusermappingI) api.orgApacheSlingServiceusermappingImplServiceUserMapperImpl(params);
        System.assertEquals(expectedResponse, response);
    }

    /**
     * 
     *
     * 
     */
    @isTest
    private static void orgApacheSlingServiceusermappingImplServiceUserMapperImplAmendedTest() {
        HttpResponse res = new HttpResponse();
        res.setStatusCode(200);
        res.setStatus('OK');
        Test.setMock(HttpCalloutMock.class, new OASResponseMock(res));

        Map<String, Object> params = new Map<String, Object>{
            'post' => Boolean.getExample(),
            'apply' => Boolean.getExample(),
            'r_delete' => Boolean.getExample(),
            'action' => 'null',
            'location' => 'null',
            'propertylist' => new List<String>{''},
            'serviceRanking' => Integer.getExample(),
            'userMapping' => new List<String>{''}
        };

        OASClient client;
        OASConfigmgrApi api;
        OASOrgApacheSlingServiceusermappingI response;
        OASOrgApacheSlingServiceusermappingI expectedResponse;
        String js = '';

        client = new OASClient();
        api = new OASConfigmgrApi(client);

        js = JSON.serialize(OASOrgApacheSlingServiceusermappingI.getExample());
        res.setHeader('Content-Type', 'application/json');
        res.setBody(js);
        expectedResponse = OASOrgApacheSlingServiceusermappingI.getExample();
        response = (OASOrgApacheSlingServiceusermappingI) api.orgApacheSlingServiceusermappingImplServiceUserMapperImplAmended(params);
        System.assertEquals(expectedResponse, response);
    }

    /**
     * 
     *
     * 
     */
    @isTest
    private static void orgApacheSlingServletsGetDefaultGetServletTest() {
        HttpResponse res = new HttpResponse();
        res.setStatusCode(200);
        res.setStatus('OK');
        Test.setMock(HttpCalloutMock.class, new OASResponseMock(res));

        Map<String, Object> params = new Map<String, Object>{
            'post' => Boolean.getExample(),
            'apply' => Boolean.getExample(),
            'r_delete' => Boolean.getExample(),
            'action' => 'null',
            'location' => 'null',
            'propertylist' => new List<String>{''},
            'aliases' => new List<String>{''},
            'index' => Boolean.getExample(),
            'indexFiles' => new List<String>{''},
            'enableHtml' => Boolean.getExample(),
            'enableJson' => Boolean.getExample(),
            'enableTxt' => Boolean.getExample(),
            'enableXml' => Boolean.getExample(),
            'jsonMaximumresults' => Integer.getExample(),
            'ecmaSuport' => Boolean.getExample()
        };

        OASClient client;
        OASConfigmgrApi api;
        OASOrgApacheSlingServletsGetDefaultG response;
        OASOrgApacheSlingServletsGetDefaultG expectedResponse;
        String js = '';

        client = new OASClient();
        api = new OASConfigmgrApi(client);

        js = JSON.serialize(OASOrgApacheSlingServletsGetDefaultG.getExample());
        res.setHeader('Content-Type', 'application/json');
        res.setBody(js);
        expectedResponse = OASOrgApacheSlingServletsGetDefaultG.getExample();
        response = (OASOrgApacheSlingServletsGetDefaultG) api.orgApacheSlingServletsGetDefaultGetServlet(params);
        System.assertEquals(expectedResponse, response);
    }

    /**
     * 
     *
     * 
     */
    @isTest
    private static void orgApacheSlingServletsGetImplVersionVersionInfoServletTest() {
        HttpResponse res = new HttpResponse();
        res.setStatusCode(200);
        res.setStatus('OK');
        Test.setMock(HttpCalloutMock.class, new OASResponseMock(res));

        Map<String, Object> params = new Map<String, Object>{
            'post' => Boolean.getExample(),
            'apply' => Boolean.getExample(),
            'r_delete' => Boolean.getExample(),
            'action' => 'null',
            'location' => 'null',
            'propertylist' => new List<String>{''},
            'slingServletSelectors' => new List<String>{''},
            'ecmaSuport' => Boolean.getExample()
        };

        OASClient client;
        OASConfigmgrApi api;
        OASOrgApacheSlingServletsGetImplVers response;
        OASOrgApacheSlingServletsGetImplVers expectedResponse;
        String js = '';

        client = new OASClient();
        api = new OASConfigmgrApi(client);

        js = JSON.serialize(OASOrgApacheSlingServletsGetImplVers.getExample());
        res.setHeader('Content-Type', 'application/json');
        res.setBody(js);
        expectedResponse = OASOrgApacheSlingServletsGetImplVers.getExample();
        response = (OASOrgApacheSlingServletsGetImplVers) api.orgApacheSlingServletsGetImplVersionVersionInfoServlet(params);
        System.assertEquals(expectedResponse, response);
    }

    /**
     * 
     *
     * 
     */
    @isTest
    private static void orgApacheSlingServletsPostImplHelperChunkCleanUpTaskTest() {
        HttpResponse res = new HttpResponse();
        res.setStatusCode(200);
        res.setStatus('OK');
        Test.setMock(HttpCalloutMock.class, new OASResponseMock(res));

        Map<String, Object> params = new Map<String, Object>{
            'post' => Boolean.getExample(),
            'apply' => Boolean.getExample(),
            'r_delete' => Boolean.getExample(),
            'action' => 'null',
            'location' => 'null',
            'propertylist' => new List<String>{''},
            'schedulerExpression' => 'null',
            'schedulerConcurrent' => Boolean.getExample(),
            'chunkCleanupAge' => Integer.getExample()
        };

        OASClient client;
        OASConfigmgrApi api;
        OASOrgApacheSlingServletsPostImplHel response;
        OASOrgApacheSlingServletsPostImplHel expectedResponse;
        String js = '';

        client = new OASClient();
        api = new OASConfigmgrApi(client);

        js = JSON.serialize(OASOrgApacheSlingServletsPostImplHel.getExample());
        res.setHeader('Content-Type', 'application/json');
        res.setBody(js);
        expectedResponse = OASOrgApacheSlingServletsPostImplHel.getExample();
        response = (OASOrgApacheSlingServletsPostImplHel) api.orgApacheSlingServletsPostImplHelperChunkCleanUpTask(params);
        System.assertEquals(expectedResponse, response);
    }

    /**
     * 
     *
     * 
     */
    @isTest
    private static void orgApacheSlingServletsPostImplSlingPostServletTest() {
        HttpResponse res = new HttpResponse();
        res.setStatusCode(200);
        res.setStatus('OK');
        Test.setMock(HttpCalloutMock.class, new OASResponseMock(res));

        Map<String, Object> params = new Map<String, Object>{
            'post' => Boolean.getExample(),
            'apply' => Boolean.getExample(),
            'r_delete' => Boolean.getExample(),
            'action' => 'null',
            'location' => 'null',
            'propertylist' => new List<String>{''},
            'servletPostDateFormats' => new List<String>{''},
            'servletPostNodeNameHints' => new List<String>{''},
            'servletPostNodeNameMaxLength' => Integer.getExample(),
            'servletPostCheckinNewVersionableNodes' => Boolean.getExample(),
            'servletPostAutoCheckout' => Boolean.getExample(),
            'servletPostAutoCheckin' => Boolean.getExample(),
            'servletPostIgnorePattern' => 'null'
        };

        OASClient client;
        OASConfigmgrApi api;
        OASOrgApacheSlingServletsPostImplSli response;
        OASOrgApacheSlingServletsPostImplSli expectedResponse;
        String js = '';

        client = new OASClient();
        api = new OASConfigmgrApi(client);

        js = JSON.serialize(OASOrgApacheSlingServletsPostImplSli.getExample());
        res.setHeader('Content-Type', 'application/json');
        res.setBody(js);
        expectedResponse = OASOrgApacheSlingServletsPostImplSli.getExample();
        response = (OASOrgApacheSlingServletsPostImplSli) api.orgApacheSlingServletsPostImplSlingPostServlet(params);
        System.assertEquals(expectedResponse, response);
    }

    /**
     * 
     *
     * 
     */
    @isTest
    private static void orgApacheSlingServletsResolverSlingServletResolverTest() {
        HttpResponse res = new HttpResponse();
        res.setStatusCode(200);
        res.setStatus('OK');
        Test.setMock(HttpCalloutMock.class, new OASResponseMock(res));

        Map<String, Object> params = new Map<String, Object>{
            'post' => Boolean.getExample(),
            'apply' => Boolean.getExample(),
            'r_delete' => Boolean.getExample(),
            'action' => 'null',
            'location' => 'null',
            'propertylist' => new List<String>{''},
            'servletresolverServletRoot' => 'null',
            'servletresolverCacheSize' => Integer.getExample(),
            'servletresolverPaths' => new List<String>{''},
            'servletresolverDefaultExtensions' => new List<String>{''}
        };

        OASClient client;
        OASConfigmgrApi api;
        OASOrgApacheSlingServletsResolverSli response;
        OASOrgApacheSlingServletsResolverSli expectedResponse;
        String js = '';

        client = new OASClient();
        api = new OASConfigmgrApi(client);

        js = JSON.serialize(OASOrgApacheSlingServletsResolverSli.getExample());
        res.setHeader('Content-Type', 'application/json');
        res.setBody(js);
        expectedResponse = OASOrgApacheSlingServletsResolverSli.getExample();
        response = (OASOrgApacheSlingServletsResolverSli) api.orgApacheSlingServletsResolverSlingServletResolver(params);
        System.assertEquals(expectedResponse, response);
    }

    /**
     * 
     *
     * 
     */
    @isTest
    private static void orgApacheSlingSettingsImplSlingSettingsServiceImplTest() {
        HttpResponse res = new HttpResponse();
        res.setStatusCode(200);
        res.setStatus('OK');
        Test.setMock(HttpCalloutMock.class, new OASResponseMock(res));

        Map<String, Object> params = new Map<String, Object>{
            'post' => Boolean.getExample(),
            'apply' => Boolean.getExample(),
            'r_delete' => Boolean.getExample(),
            'action' => 'null',
            'location' => 'null',
            'propertylist' => new List<String>{''},
            'slingName' => 'null',
            'slingDescription' => 'null'
        };

        OASClient client;
        OASConfigmgrApi api;
        OASOrgApacheSlingSettingsImplSlingSe response;
        OASOrgApacheSlingSettingsImplSlingSe expectedResponse;
        String js = '';

        client = new OASClient();
        api = new OASConfigmgrApi(client);

        js = JSON.serialize(OASOrgApacheSlingSettingsImplSlingSe.getExample());
        res.setHeader('Content-Type', 'application/json');
        res.setBody(js);
        expectedResponse = OASOrgApacheSlingSettingsImplSlingSe.getExample();
        response = (OASOrgApacheSlingSettingsImplSlingSe) api.orgApacheSlingSettingsImplSlingSettingsServiceImpl(params);
        System.assertEquals(expectedResponse, response);
    }

    /**
     * 
     *
     * 
     */
    @isTest
    private static void orgApacheSlingStartupfilterImplStartupFilterImplTest() {
        HttpResponse res = new HttpResponse();
        res.setStatusCode(200);
        res.setStatus('OK');
        Test.setMock(HttpCalloutMock.class, new OASResponseMock(res));

        Map<String, Object> params = new Map<String, Object>{
            'post' => Boolean.getExample(),
            'apply' => Boolean.getExample(),
            'r_delete' => Boolean.getExample(),
            'action' => 'null',
            'location' => 'null',
            'propertylist' => new List<String>{''},
            'activeByDefault' => Boolean.getExample(),
            'defaultMessage' => 'null'
        };

        OASClient client;
        OASConfigmgrApi api;
        OASOrgApacheSlingStartupfilterImplSt response;
        OASOrgApacheSlingStartupfilterImplSt expectedResponse;
        String js = '';

        client = new OASClient();
        api = new OASConfigmgrApi(client);

        js = JSON.serialize(OASOrgApacheSlingStartupfilterImplSt.getExample());
        res.setHeader('Content-Type', 'application/json');
        res.setBody(js);
        expectedResponse = OASOrgApacheSlingStartupfilterImplSt.getExample();
        response = (OASOrgApacheSlingStartupfilterImplSt) api.orgApacheSlingStartupfilterImplStartupFilterImpl(params);
        System.assertEquals(expectedResponse, response);
    }

    /**
     * 
     *
     * 
     */
    @isTest
    private static void orgApacheSlingTenantInternalTenantProviderImplTest() {
        HttpResponse res = new HttpResponse();
        res.setStatusCode(200);
        res.setStatus('OK');
        Test.setMock(HttpCalloutMock.class, new OASResponseMock(res));

        Map<String, Object> params = new Map<String, Object>{
            'post' => Boolean.getExample(),
            'apply' => Boolean.getExample(),
            'r_delete' => Boolean.getExample(),
            'action' => 'null',
            'location' => 'null',
            'propertylist' => new List<String>{''},
            'tenantRoot' => 'null',
            'tenantPathMatcher' => new List<String>{''}
        };

        OASClient client;
        OASConfigmgrApi api;
        OASOrgApacheSlingTenantInternalTenan response;
        OASOrgApacheSlingTenantInternalTenan expectedResponse;
        String js = '';

        client = new OASClient();
        api = new OASConfigmgrApi(client);

        js = JSON.serialize(OASOrgApacheSlingTenantInternalTenan.getExample());
        res.setHeader('Content-Type', 'application/json');
        res.setBody(js);
        expectedResponse = OASOrgApacheSlingTenantInternalTenan.getExample();
        response = (OASOrgApacheSlingTenantInternalTenan) api.orgApacheSlingTenantInternalTenantProviderImpl(params);
        System.assertEquals(expectedResponse, response);
    }

    /**
     * 
     *
     * 
     */
    @isTest
    private static void orgApacheSlingTracerInternalLogTracerTest() {
        HttpResponse res = new HttpResponse();
        res.setStatusCode(200);
        res.setStatus('OK');
        Test.setMock(HttpCalloutMock.class, new OASResponseMock(res));

        Map<String, Object> params = new Map<String, Object>{
            'post' => Boolean.getExample(),
            'apply' => Boolean.getExample(),
            'r_delete' => Boolean.getExample(),
            'action' => 'null',
            'location' => 'null',
            'propertylist' => new List<String>{''},
            'tracerSets' => new List<String>{''},
            'enabled' => Boolean.getExample(),
            'servletEnabled' => Boolean.getExample(),
            'recordingCacheSizeInMB' => Integer.getExample(),
            'recordingCacheDurationInSecs' => Integer.getExample(),
            'recordingCompressionEnabled' => Boolean.getExample(),
            'gzipResponse' => Boolean.getExample()
        };

        OASClient client;
        OASConfigmgrApi api;
        OASOrgApacheSlingTracerInternalLogTr response;
        OASOrgApacheSlingTracerInternalLogTr expectedResponse;
        String js = '';

        client = new OASClient();
        api = new OASConfigmgrApi(client);

        js = JSON.serialize(OASOrgApacheSlingTracerInternalLogTr.getExample());
        res.setHeader('Content-Type', 'application/json');
        res.setBody(js);
        expectedResponse = OASOrgApacheSlingTracerInternalLogTr.getExample();
        response = (OASOrgApacheSlingTracerInternalLogTr) api.orgApacheSlingTracerInternalLogTracer(params);
        System.assertEquals(expectedResponse, response);
    }

    /**
     * 
     *
     * 
     */
    @isTest
    private static void orgApacheSlingXssImplXSSFilterImplTest() {
        HttpResponse res = new HttpResponse();
        res.setStatusCode(200);
        res.setStatus('OK');
        Test.setMock(HttpCalloutMock.class, new OASResponseMock(res));

        Map<String, Object> params = new Map<String, Object>{
            'post' => Boolean.getExample(),
            'apply' => Boolean.getExample(),
            'r_delete' => Boolean.getExample(),
            'action' => 'null',
            'location' => 'null',
            'propertylist' => new List<String>{''},
            'policyPath' => 'null'
        };

        OASClient client;
        OASConfigmgrApi api;
        OASOrgApacheSlingXssImplXSSFilterImp response;
        OASOrgApacheSlingXssImplXSSFilterImp expectedResponse;
        String js = '';

        client = new OASClient();
        api = new OASConfigmgrApi(client);

        js = JSON.serialize(OASOrgApacheSlingXssImplXSSFilterImp.getExample());
        res.setHeader('Content-Type', 'application/json');
        res.setBody(js);
        expectedResponse = OASOrgApacheSlingXssImplXSSFilterImp.getExample();
        response = (OASOrgApacheSlingXssImplXSSFilterImp) api.orgApacheSlingXssImplXSSFilterImpl(params);
        System.assertEquals(expectedResponse, response);
    }
}