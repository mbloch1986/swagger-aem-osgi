/*
 * Adobe Experience Manager OSGI config (AEM) API
 *
 * Swagger AEM OSGI is an OpenAPI specification for Adobe Experience Manager (AEM) OSGI Configurations API
 *
 * OpenAPI spec version: 1.0.0-pre.0
 * Contact: opensource@shinesolutions.com
 * Generated by: https://openapi-generator.tech
 */

using System;
using System.Linq;
using System.Text;
using System.Collections.Generic;
using System.ComponentModel.DataAnnotations;
using System.Runtime.Serialization;
using Newtonsoft.Json;

namespace Org.OpenAPITools.Models
{ 
    /// <summary>
    /// 
    /// </summary>
    [DataContract]
    public partial class ComAdobeCqSocialSyncImplUserSyncListenerImplProperties : IEquatable<ComAdobeCqSocialSyncImplUserSyncListenerImplProperties>
    { 
        /// <summary>
        /// Gets or Sets Nodetypes
        /// </summary>
        [DataMember(Name="nodetypes")]
        public ConfigNodePropertyArray Nodetypes { get; set; }

        /// <summary>
        /// Gets or Sets Ignorableprops
        /// </summary>
        [DataMember(Name="ignorableprops")]
        public ConfigNodePropertyArray Ignorableprops { get; set; }

        /// <summary>
        /// Gets or Sets Ignorablenodes
        /// </summary>
        [DataMember(Name="ignorablenodes")]
        public ConfigNodePropertyArray Ignorablenodes { get; set; }

        /// <summary>
        /// Gets or Sets Enabled
        /// </summary>
        [DataMember(Name="enabled")]
        public ConfigNodePropertyBoolean Enabled { get; set; }

        /// <summary>
        /// Gets or Sets Distfolders
        /// </summary>
        [DataMember(Name="distfolders")]
        public ConfigNodePropertyArray Distfolders { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class ComAdobeCqSocialSyncImplUserSyncListenerImplProperties {\n");
            sb.Append("  Nodetypes: ").Append(Nodetypes).Append("\n");
            sb.Append("  Ignorableprops: ").Append(Ignorableprops).Append("\n");
            sb.Append("  Ignorablenodes: ").Append(Ignorablenodes).Append("\n");
            sb.Append("  Enabled: ").Append(Enabled).Append("\n");
            sb.Append("  Distfolders: ").Append(Distfolders).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            if (obj is null) return false;
            if (ReferenceEquals(this, obj)) return true;
            return obj.GetType() == GetType() && Equals((ComAdobeCqSocialSyncImplUserSyncListenerImplProperties)obj);
        }

        /// <summary>
        /// Returns true if ComAdobeCqSocialSyncImplUserSyncListenerImplProperties instances are equal
        /// </summary>
        /// <param name="other">Instance of ComAdobeCqSocialSyncImplUserSyncListenerImplProperties to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(ComAdobeCqSocialSyncImplUserSyncListenerImplProperties other)
        {
            if (other is null) return false;
            if (ReferenceEquals(this, other)) return true;

            return 
                (
                    Nodetypes == other.Nodetypes ||
                    Nodetypes != null &&
                    Nodetypes.Equals(other.Nodetypes)
                ) && 
                (
                    Ignorableprops == other.Ignorableprops ||
                    Ignorableprops != null &&
                    Ignorableprops.Equals(other.Ignorableprops)
                ) && 
                (
                    Ignorablenodes == other.Ignorablenodes ||
                    Ignorablenodes != null &&
                    Ignorablenodes.Equals(other.Ignorablenodes)
                ) && 
                (
                    Enabled == other.Enabled ||
                    Enabled != null &&
                    Enabled.Equals(other.Enabled)
                ) && 
                (
                    Distfolders == other.Distfolders ||
                    Distfolders != null &&
                    Distfolders.Equals(other.Distfolders)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                var hashCode = 41;
                // Suitable nullity checks etc, of course :)
                    if (Nodetypes != null)
                    hashCode = hashCode * 59 + Nodetypes.GetHashCode();
                    if (Ignorableprops != null)
                    hashCode = hashCode * 59 + Ignorableprops.GetHashCode();
                    if (Ignorablenodes != null)
                    hashCode = hashCode * 59 + Ignorablenodes.GetHashCode();
                    if (Enabled != null)
                    hashCode = hashCode * 59 + Enabled.GetHashCode();
                    if (Distfolders != null)
                    hashCode = hashCode * 59 + Distfolders.GetHashCode();
                return hashCode;
            }
        }

        #region Operators
        #pragma warning disable 1591

        public static bool operator ==(ComAdobeCqSocialSyncImplUserSyncListenerImplProperties left, ComAdobeCqSocialSyncImplUserSyncListenerImplProperties right)
        {
            return Equals(left, right);
        }

        public static bool operator !=(ComAdobeCqSocialSyncImplUserSyncListenerImplProperties left, ComAdobeCqSocialSyncImplUserSyncListenerImplProperties right)
        {
            return !Equals(left, right);
        }

        #pragma warning restore 1591
        #endregion Operators
    }
}
