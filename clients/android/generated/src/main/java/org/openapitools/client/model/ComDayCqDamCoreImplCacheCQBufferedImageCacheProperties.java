/**
 * Adobe Experience Manager OSGI config (AEM) API
 * Swagger AEM OSGI is an OpenAPI specification for Adobe Experience Manager (AEM) OSGI Configurations API
 *
 * OpenAPI spec version: 1.0.0-pre.0
 * Contact: opensource@shinesolutions.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

package org.openapitools.client.model;

import org.openapitools.client.model.ConfigNodePropertyInteger;
import org.openapitools.client.model.ConfigNodePropertyString;
import io.swagger.annotations.*;
import com.google.gson.annotations.SerializedName;

@ApiModel(description = "")
public class ComDayCqDamCoreImplCacheCQBufferedImageCacheProperties {
  
  @SerializedName("cq.dam.image.cache.max.memory")
  private ConfigNodePropertyInteger cqDamImageCacheMaxMemory = null;
  @SerializedName("cq.dam.image.cache.max.age")
  private ConfigNodePropertyInteger cqDamImageCacheMaxAge = null;
  @SerializedName("cq.dam.image.cache.max.dimension")
  private ConfigNodePropertyString cqDamImageCacheMaxDimension = null;

  /**
   **/
  @ApiModelProperty(value = "")
  public ConfigNodePropertyInteger getCqDamImageCacheMaxMemory() {
    return cqDamImageCacheMaxMemory;
  }
  public void setCqDamImageCacheMaxMemory(ConfigNodePropertyInteger cqDamImageCacheMaxMemory) {
    this.cqDamImageCacheMaxMemory = cqDamImageCacheMaxMemory;
  }

  /**
   **/
  @ApiModelProperty(value = "")
  public ConfigNodePropertyInteger getCqDamImageCacheMaxAge() {
    return cqDamImageCacheMaxAge;
  }
  public void setCqDamImageCacheMaxAge(ConfigNodePropertyInteger cqDamImageCacheMaxAge) {
    this.cqDamImageCacheMaxAge = cqDamImageCacheMaxAge;
  }

  /**
   **/
  @ApiModelProperty(value = "")
  public ConfigNodePropertyString getCqDamImageCacheMaxDimension() {
    return cqDamImageCacheMaxDimension;
  }
  public void setCqDamImageCacheMaxDimension(ConfigNodePropertyString cqDamImageCacheMaxDimension) {
    this.cqDamImageCacheMaxDimension = cqDamImageCacheMaxDimension;
  }


  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    ComDayCqDamCoreImplCacheCQBufferedImageCacheProperties comDayCqDamCoreImplCacheCQBufferedImageCacheProperties = (ComDayCqDamCoreImplCacheCQBufferedImageCacheProperties) o;
    return (this.cqDamImageCacheMaxMemory == null ? comDayCqDamCoreImplCacheCQBufferedImageCacheProperties.cqDamImageCacheMaxMemory == null : this.cqDamImageCacheMaxMemory.equals(comDayCqDamCoreImplCacheCQBufferedImageCacheProperties.cqDamImageCacheMaxMemory)) &&
        (this.cqDamImageCacheMaxAge == null ? comDayCqDamCoreImplCacheCQBufferedImageCacheProperties.cqDamImageCacheMaxAge == null : this.cqDamImageCacheMaxAge.equals(comDayCqDamCoreImplCacheCQBufferedImageCacheProperties.cqDamImageCacheMaxAge)) &&
        (this.cqDamImageCacheMaxDimension == null ? comDayCqDamCoreImplCacheCQBufferedImageCacheProperties.cqDamImageCacheMaxDimension == null : this.cqDamImageCacheMaxDimension.equals(comDayCqDamCoreImplCacheCQBufferedImageCacheProperties.cqDamImageCacheMaxDimension));
  }

  @Override
  public int hashCode() {
    int result = 17;
    result = 31 * result + (this.cqDamImageCacheMaxMemory == null ? 0: this.cqDamImageCacheMaxMemory.hashCode());
    result = 31 * result + (this.cqDamImageCacheMaxAge == null ? 0: this.cqDamImageCacheMaxAge.hashCode());
    result = 31 * result + (this.cqDamImageCacheMaxDimension == null ? 0: this.cqDamImageCacheMaxDimension.hashCode());
    return result;
  }

  @Override
  public String toString()  {
    StringBuilder sb = new StringBuilder();
    sb.append("class ComDayCqDamCoreImplCacheCQBufferedImageCacheProperties {\n");
    
    sb.append("  cqDamImageCacheMaxMemory: ").append(cqDamImageCacheMaxMemory).append("\n");
    sb.append("  cqDamImageCacheMaxAge: ").append(cqDamImageCacheMaxAge).append("\n");
    sb.append("  cqDamImageCacheMaxDimension: ").append(cqDamImageCacheMaxDimension).append("\n");
    sb.append("}\n");
    return sb.toString();
  }
}
