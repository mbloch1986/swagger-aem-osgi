/**
 * Adobe Experience Manager OSGI config (AEM) API
 * Swagger AEM OSGI is an OpenAPI specification for Adobe Experience Manager (AEM) OSGI Configurations API
 *
 * OpenAPI spec version: 1.0.0-pre.0
 * Contact: opensource@shinesolutions.com
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 3.2.1-SNAPSHOT.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * ComAdobeCqSocialTranslationImplTranslationServiceConfigManagerProperties.h
 *
 * 
 */

#ifndef ComAdobeCqSocialTranslationImplTranslationServiceConfigManagerProperties_H_
#define ComAdobeCqSocialTranslationImplTranslationServiceConfigManagerProperties_H_



#include "ConfigNodePropertyBoolean.h"
#include "ConfigNodePropertyDropDown.h"
#include "ConfigNodePropertyString.h"
#include <memory>

namespace org {
namespace openapitools {
namespace server {
namespace model {

/// <summary>
/// 
/// </summary>
class  ComAdobeCqSocialTranslationImplTranslationServiceConfigManagerProperties
{
public:
    ComAdobeCqSocialTranslationImplTranslationServiceConfigManagerProperties();
    virtual ~ComAdobeCqSocialTranslationImplTranslationServiceConfigManagerProperties();
    
    std::string toJsonString();
    void fromJsonString(std::string const& jsonString);

    /////////////////////////////////////////////
    /// ComAdobeCqSocialTranslationImplTranslationServiceConfigManagerProperties members
    
    /// <summary>
    /// 
    /// </summary>
    std::shared_ptr<ConfigNodePropertyDropDown> getTranslateLanguage() const;
    void setTranslateLanguage(std::shared_ptr<ConfigNodePropertyDropDown> value);
    /// <summary>
    /// 
    /// </summary>
    std::shared_ptr<ConfigNodePropertyDropDown> getTranslateDisplay() const;
    void setTranslateDisplay(std::shared_ptr<ConfigNodePropertyDropDown> value);
    /// <summary>
    /// 
    /// </summary>
    std::shared_ptr<ConfigNodePropertyBoolean> getTranslateAttribution() const;
    void setTranslateAttribution(std::shared_ptr<ConfigNodePropertyBoolean> value);
    /// <summary>
    /// 
    /// </summary>
    std::shared_ptr<ConfigNodePropertyDropDown> getTranslateCaching() const;
    void setTranslateCaching(std::shared_ptr<ConfigNodePropertyDropDown> value);
    /// <summary>
    /// 
    /// </summary>
    std::shared_ptr<ConfigNodePropertyDropDown> getTranslateSmartRendering() const;
    void setTranslateSmartRendering(std::shared_ptr<ConfigNodePropertyDropDown> value);
    /// <summary>
    /// 
    /// </summary>
    std::shared_ptr<ConfigNodePropertyString> getTranslateCachingDuration() const;
    void setTranslateCachingDuration(std::shared_ptr<ConfigNodePropertyString> value);
    /// <summary>
    /// 
    /// </summary>
    std::shared_ptr<ConfigNodePropertyString> getTranslateSessionSaveInterval() const;
    void setTranslateSessionSaveInterval(std::shared_ptr<ConfigNodePropertyString> value);
    /// <summary>
    /// 
    /// </summary>
    std::shared_ptr<ConfigNodePropertyString> getTranslateSessionSaveBatchLimit() const;
    void setTranslateSessionSaveBatchLimit(std::shared_ptr<ConfigNodePropertyString> value);

protected:
    std::shared_ptr<ConfigNodePropertyDropDown> m_Translate_language;
    std::shared_ptr<ConfigNodePropertyDropDown> m_Translate_display;
    std::shared_ptr<ConfigNodePropertyBoolean> m_Translate_attribution;
    std::shared_ptr<ConfigNodePropertyDropDown> m_Translate_caching;
    std::shared_ptr<ConfigNodePropertyDropDown> m_Translate_smart_rendering;
    std::shared_ptr<ConfigNodePropertyString> m_Translate_caching_duration;
    std::shared_ptr<ConfigNodePropertyString> m_Translate_session_save_interval;
    std::shared_ptr<ConfigNodePropertyString> m_Translate_session_save_batchLimit;
};

}
}
}
}

#endif /* ComAdobeCqSocialTranslationImplTranslationServiceConfigManagerProperties_H_ */
