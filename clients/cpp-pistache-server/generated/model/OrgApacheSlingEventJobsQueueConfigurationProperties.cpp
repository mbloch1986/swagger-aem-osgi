/**
* Adobe Experience Manager OSGI config (AEM) API
* Swagger AEM OSGI is an OpenAPI specification for Adobe Experience Manager (AEM) OSGI Configurations API
*
* OpenAPI spec version: 1.0.0-pre.0
* Contact: opensource@shinesolutions.com
*
* NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
* https://openapi-generator.tech
* Do not edit the class manually.
*/


#include "OrgApacheSlingEventJobsQueueConfigurationProperties.h"

namespace org {
namespace openapitools {
namespace server {
namespace model {

OrgApacheSlingEventJobsQueueConfigurationProperties::OrgApacheSlingEventJobsQueueConfigurationProperties()
{
    m_Queue_nameIsSet = false;
    m_Queue_topicsIsSet = false;
    m_Queue_typeIsSet = false;
    m_Queue_priorityIsSet = false;
    m_Queue_retriesIsSet = false;
    m_Queue_retrydelayIsSet = false;
    m_Queue_maxparallelIsSet = false;
    m_Queue_keepJobsIsSet = false;
    m_Queue_preferRunOnCreationInstanceIsSet = false;
    m_Queue_threadPoolSizeIsSet = false;
    m_Service_rankingIsSet = false;
    
}

OrgApacheSlingEventJobsQueueConfigurationProperties::~OrgApacheSlingEventJobsQueueConfigurationProperties()
{
}

void OrgApacheSlingEventJobsQueueConfigurationProperties::validate()
{
    // TODO: implement validation
}

nlohmann::json OrgApacheSlingEventJobsQueueConfigurationProperties::toJson() const
{
    nlohmann::json val = nlohmann::json::object();

    if(m_Queue_nameIsSet)
    {
        val["queue.name"] = ModelBase::toJson(m_Queue_name);
    }
    if(m_Queue_topicsIsSet)
    {
        val["queue.topics"] = ModelBase::toJson(m_Queue_topics);
    }
    if(m_Queue_typeIsSet)
    {
        val["queue.type"] = ModelBase::toJson(m_Queue_type);
    }
    if(m_Queue_priorityIsSet)
    {
        val["queue.priority"] = ModelBase::toJson(m_Queue_priority);
    }
    if(m_Queue_retriesIsSet)
    {
        val["queue.retries"] = ModelBase::toJson(m_Queue_retries);
    }
    if(m_Queue_retrydelayIsSet)
    {
        val["queue.retrydelay"] = ModelBase::toJson(m_Queue_retrydelay);
    }
    if(m_Queue_maxparallelIsSet)
    {
        val["queue.maxparallel"] = ModelBase::toJson(m_Queue_maxparallel);
    }
    if(m_Queue_keepJobsIsSet)
    {
        val["queue.keepJobs"] = ModelBase::toJson(m_Queue_keepJobs);
    }
    if(m_Queue_preferRunOnCreationInstanceIsSet)
    {
        val["queue.preferRunOnCreationInstance"] = ModelBase::toJson(m_Queue_preferRunOnCreationInstance);
    }
    if(m_Queue_threadPoolSizeIsSet)
    {
        val["queue.threadPoolSize"] = ModelBase::toJson(m_Queue_threadPoolSize);
    }
    if(m_Service_rankingIsSet)
    {
        val["service.ranking"] = ModelBase::toJson(m_Service_ranking);
    }
    

    return val;
}

void OrgApacheSlingEventJobsQueueConfigurationProperties::fromJson(nlohmann::json& val)
{
    if(val.find("queue.name") != val.end())
    {
        if(!val["queue.name"].is_null())
        {
            ConfigNodePropertyString newItem;
            newItem.fromJson(val["queue.name"]);
            setQueueName( newItem );
        }
        
    }
    if(val.find("queue.topics") != val.end())
    {
        if(!val["queue.topics"].is_null())
        {
            ConfigNodePropertyArray newItem;
            newItem.fromJson(val["queue.topics"]);
            setQueueTopics( newItem );
        }
        
    }
    if(val.find("queue.type") != val.end())
    {
        if(!val["queue.type"].is_null())
        {
            ConfigNodePropertyDropDown newItem;
            newItem.fromJson(val["queue.type"]);
            setQueueType( newItem );
        }
        
    }
    if(val.find("queue.priority") != val.end())
    {
        if(!val["queue.priority"].is_null())
        {
            ConfigNodePropertyDropDown newItem;
            newItem.fromJson(val["queue.priority"]);
            setQueuePriority( newItem );
        }
        
    }
    if(val.find("queue.retries") != val.end())
    {
        if(!val["queue.retries"].is_null())
        {
            ConfigNodePropertyInteger newItem;
            newItem.fromJson(val["queue.retries"]);
            setQueueRetries( newItem );
        }
        
    }
    if(val.find("queue.retrydelay") != val.end())
    {
        if(!val["queue.retrydelay"].is_null())
        {
            ConfigNodePropertyInteger newItem;
            newItem.fromJson(val["queue.retrydelay"]);
            setQueueRetrydelay( newItem );
        }
        
    }
    if(val.find("queue.maxparallel") != val.end())
    {
        if(!val["queue.maxparallel"].is_null())
        {
            ConfigNodePropertyFloat newItem;
            newItem.fromJson(val["queue.maxparallel"]);
            setQueueMaxparallel( newItem );
        }
        
    }
    if(val.find("queue.keepJobs") != val.end())
    {
        if(!val["queue.keepJobs"].is_null())
        {
            ConfigNodePropertyBoolean newItem;
            newItem.fromJson(val["queue.keepJobs"]);
            setQueueKeepJobs( newItem );
        }
        
    }
    if(val.find("queue.preferRunOnCreationInstance") != val.end())
    {
        if(!val["queue.preferRunOnCreationInstance"].is_null())
        {
            ConfigNodePropertyBoolean newItem;
            newItem.fromJson(val["queue.preferRunOnCreationInstance"]);
            setQueuePreferRunOnCreationInstance( newItem );
        }
        
    }
    if(val.find("queue.threadPoolSize") != val.end())
    {
        if(!val["queue.threadPoolSize"].is_null())
        {
            ConfigNodePropertyInteger newItem;
            newItem.fromJson(val["queue.threadPoolSize"]);
            setQueueThreadPoolSize( newItem );
        }
        
    }
    if(val.find("service.ranking") != val.end())
    {
        if(!val["service.ranking"].is_null())
        {
            ConfigNodePropertyInteger newItem;
            newItem.fromJson(val["service.ranking"]);
            setServiceRanking( newItem );
        }
        
    }
    
}


ConfigNodePropertyString OrgApacheSlingEventJobsQueueConfigurationProperties::getQueueName() const
{
    return m_Queue_name;
}
void OrgApacheSlingEventJobsQueueConfigurationProperties::setQueueName(ConfigNodePropertyString const& value)
{
    m_Queue_name = value;
    m_Queue_nameIsSet = true;
}
bool OrgApacheSlingEventJobsQueueConfigurationProperties::queueNameIsSet() const
{
    return m_Queue_nameIsSet;
}
void OrgApacheSlingEventJobsQueueConfigurationProperties::unsetQueue_name()
{
    m_Queue_nameIsSet = false;
}
ConfigNodePropertyArray OrgApacheSlingEventJobsQueueConfigurationProperties::getQueueTopics() const
{
    return m_Queue_topics;
}
void OrgApacheSlingEventJobsQueueConfigurationProperties::setQueueTopics(ConfigNodePropertyArray const& value)
{
    m_Queue_topics = value;
    m_Queue_topicsIsSet = true;
}
bool OrgApacheSlingEventJobsQueueConfigurationProperties::queueTopicsIsSet() const
{
    return m_Queue_topicsIsSet;
}
void OrgApacheSlingEventJobsQueueConfigurationProperties::unsetQueue_topics()
{
    m_Queue_topicsIsSet = false;
}
ConfigNodePropertyDropDown OrgApacheSlingEventJobsQueueConfigurationProperties::getQueueType() const
{
    return m_Queue_type;
}
void OrgApacheSlingEventJobsQueueConfigurationProperties::setQueueType(ConfigNodePropertyDropDown const& value)
{
    m_Queue_type = value;
    m_Queue_typeIsSet = true;
}
bool OrgApacheSlingEventJobsQueueConfigurationProperties::queueTypeIsSet() const
{
    return m_Queue_typeIsSet;
}
void OrgApacheSlingEventJobsQueueConfigurationProperties::unsetQueue_type()
{
    m_Queue_typeIsSet = false;
}
ConfigNodePropertyDropDown OrgApacheSlingEventJobsQueueConfigurationProperties::getQueuePriority() const
{
    return m_Queue_priority;
}
void OrgApacheSlingEventJobsQueueConfigurationProperties::setQueuePriority(ConfigNodePropertyDropDown const& value)
{
    m_Queue_priority = value;
    m_Queue_priorityIsSet = true;
}
bool OrgApacheSlingEventJobsQueueConfigurationProperties::queuePriorityIsSet() const
{
    return m_Queue_priorityIsSet;
}
void OrgApacheSlingEventJobsQueueConfigurationProperties::unsetQueue_priority()
{
    m_Queue_priorityIsSet = false;
}
ConfigNodePropertyInteger OrgApacheSlingEventJobsQueueConfigurationProperties::getQueueRetries() const
{
    return m_Queue_retries;
}
void OrgApacheSlingEventJobsQueueConfigurationProperties::setQueueRetries(ConfigNodePropertyInteger const& value)
{
    m_Queue_retries = value;
    m_Queue_retriesIsSet = true;
}
bool OrgApacheSlingEventJobsQueueConfigurationProperties::queueRetriesIsSet() const
{
    return m_Queue_retriesIsSet;
}
void OrgApacheSlingEventJobsQueueConfigurationProperties::unsetQueue_retries()
{
    m_Queue_retriesIsSet = false;
}
ConfigNodePropertyInteger OrgApacheSlingEventJobsQueueConfigurationProperties::getQueueRetrydelay() const
{
    return m_Queue_retrydelay;
}
void OrgApacheSlingEventJobsQueueConfigurationProperties::setQueueRetrydelay(ConfigNodePropertyInteger const& value)
{
    m_Queue_retrydelay = value;
    m_Queue_retrydelayIsSet = true;
}
bool OrgApacheSlingEventJobsQueueConfigurationProperties::queueRetrydelayIsSet() const
{
    return m_Queue_retrydelayIsSet;
}
void OrgApacheSlingEventJobsQueueConfigurationProperties::unsetQueue_retrydelay()
{
    m_Queue_retrydelayIsSet = false;
}
ConfigNodePropertyFloat OrgApacheSlingEventJobsQueueConfigurationProperties::getQueueMaxparallel() const
{
    return m_Queue_maxparallel;
}
void OrgApacheSlingEventJobsQueueConfigurationProperties::setQueueMaxparallel(ConfigNodePropertyFloat const& value)
{
    m_Queue_maxparallel = value;
    m_Queue_maxparallelIsSet = true;
}
bool OrgApacheSlingEventJobsQueueConfigurationProperties::queueMaxparallelIsSet() const
{
    return m_Queue_maxparallelIsSet;
}
void OrgApacheSlingEventJobsQueueConfigurationProperties::unsetQueue_maxparallel()
{
    m_Queue_maxparallelIsSet = false;
}
ConfigNodePropertyBoolean OrgApacheSlingEventJobsQueueConfigurationProperties::getQueueKeepJobs() const
{
    return m_Queue_keepJobs;
}
void OrgApacheSlingEventJobsQueueConfigurationProperties::setQueueKeepJobs(ConfigNodePropertyBoolean const& value)
{
    m_Queue_keepJobs = value;
    m_Queue_keepJobsIsSet = true;
}
bool OrgApacheSlingEventJobsQueueConfigurationProperties::queueKeepJobsIsSet() const
{
    return m_Queue_keepJobsIsSet;
}
void OrgApacheSlingEventJobsQueueConfigurationProperties::unsetQueue_keepJobs()
{
    m_Queue_keepJobsIsSet = false;
}
ConfigNodePropertyBoolean OrgApacheSlingEventJobsQueueConfigurationProperties::getQueuePreferRunOnCreationInstance() const
{
    return m_Queue_preferRunOnCreationInstance;
}
void OrgApacheSlingEventJobsQueueConfigurationProperties::setQueuePreferRunOnCreationInstance(ConfigNodePropertyBoolean const& value)
{
    m_Queue_preferRunOnCreationInstance = value;
    m_Queue_preferRunOnCreationInstanceIsSet = true;
}
bool OrgApacheSlingEventJobsQueueConfigurationProperties::queuePreferRunOnCreationInstanceIsSet() const
{
    return m_Queue_preferRunOnCreationInstanceIsSet;
}
void OrgApacheSlingEventJobsQueueConfigurationProperties::unsetQueue_preferRunOnCreationInstance()
{
    m_Queue_preferRunOnCreationInstanceIsSet = false;
}
ConfigNodePropertyInteger OrgApacheSlingEventJobsQueueConfigurationProperties::getQueueThreadPoolSize() const
{
    return m_Queue_threadPoolSize;
}
void OrgApacheSlingEventJobsQueueConfigurationProperties::setQueueThreadPoolSize(ConfigNodePropertyInteger const& value)
{
    m_Queue_threadPoolSize = value;
    m_Queue_threadPoolSizeIsSet = true;
}
bool OrgApacheSlingEventJobsQueueConfigurationProperties::queueThreadPoolSizeIsSet() const
{
    return m_Queue_threadPoolSizeIsSet;
}
void OrgApacheSlingEventJobsQueueConfigurationProperties::unsetQueue_threadPoolSize()
{
    m_Queue_threadPoolSizeIsSet = false;
}
ConfigNodePropertyInteger OrgApacheSlingEventJobsQueueConfigurationProperties::getServiceRanking() const
{
    return m_Service_ranking;
}
void OrgApacheSlingEventJobsQueueConfigurationProperties::setServiceRanking(ConfigNodePropertyInteger const& value)
{
    m_Service_ranking = value;
    m_Service_rankingIsSet = true;
}
bool OrgApacheSlingEventJobsQueueConfigurationProperties::serviceRankingIsSet() const
{
    return m_Service_rankingIsSet;
}
void OrgApacheSlingEventJobsQueueConfigurationProperties::unsetService_ranking()
{
    m_Service_rankingIsSet = false;
}

}
}
}
}

