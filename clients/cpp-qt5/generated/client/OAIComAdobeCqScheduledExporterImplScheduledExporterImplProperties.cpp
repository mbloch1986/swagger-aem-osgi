/**
 * Adobe Experience Manager OSGI config (AEM) API
 * Swagger AEM OSGI is an OpenAPI specification for Adobe Experience Manager (AEM) OSGI Configurations API
 *
 * OpenAPI spec version: 1.0.0-pre.0
 * Contact: opensource@shinesolutions.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


#include "OAIComAdobeCqScheduledExporterImplScheduledExporterImplProperties.h"

#include "OAIHelpers.h"

#include <QJsonDocument>
#include <QJsonArray>
#include <QObject>
#include <QDebug>

namespace OpenAPI {

OAIComAdobeCqScheduledExporterImplScheduledExporterImplProperties::OAIComAdobeCqScheduledExporterImplScheduledExporterImplProperties(QString json) {
    init();
    this->fromJson(json);
}

OAIComAdobeCqScheduledExporterImplScheduledExporterImplProperties::OAIComAdobeCqScheduledExporterImplScheduledExporterImplProperties() {
    init();
}

OAIComAdobeCqScheduledExporterImplScheduledExporterImplProperties::~OAIComAdobeCqScheduledExporterImplScheduledExporterImplProperties() {
    this->cleanup();
}

void
OAIComAdobeCqScheduledExporterImplScheduledExporterImplProperties::init() {
    include_paths = new OAIConfigNodePropertyArray();
    m_include_paths_isSet = false;
    exporter_user = new OAIConfigNodePropertyString();
    m_exporter_user_isSet = false;
}

void
OAIComAdobeCqScheduledExporterImplScheduledExporterImplProperties::cleanup() {
    if(include_paths != nullptr) { 
        delete include_paths;
    }
    if(exporter_user != nullptr) { 
        delete exporter_user;
    }
}

OAIComAdobeCqScheduledExporterImplScheduledExporterImplProperties*
OAIComAdobeCqScheduledExporterImplScheduledExporterImplProperties::fromJson(QString json) {
    QByteArray array (json.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
    return this;
}

void
OAIComAdobeCqScheduledExporterImplScheduledExporterImplProperties::fromJsonObject(QJsonObject pJson) {
    ::OpenAPI::setValue(&include_paths, pJson["include.paths"], "OAIConfigNodePropertyArray", "OAIConfigNodePropertyArray");
    
    ::OpenAPI::setValue(&exporter_user, pJson["exporter.user"], "OAIConfigNodePropertyString", "OAIConfigNodePropertyString");
    
}

QString
OAIComAdobeCqScheduledExporterImplScheduledExporterImplProperties::asJson ()
{
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject
OAIComAdobeCqScheduledExporterImplScheduledExporterImplProperties::asJsonObject() {
    QJsonObject obj;
    if((include_paths != nullptr) && (include_paths->isSet())){
        toJsonValue(QString("include.paths"), include_paths, obj, QString("OAIConfigNodePropertyArray"));
    }
    if((exporter_user != nullptr) && (exporter_user->isSet())){
        toJsonValue(QString("exporter.user"), exporter_user, obj, QString("OAIConfigNodePropertyString"));
    }

    return obj;
}

OAIConfigNodePropertyArray*
OAIComAdobeCqScheduledExporterImplScheduledExporterImplProperties::getIncludePaths() {
    return include_paths;
}
void
OAIComAdobeCqScheduledExporterImplScheduledExporterImplProperties::setIncludePaths(OAIConfigNodePropertyArray* include_paths) {
    this->include_paths = include_paths;
    this->m_include_paths_isSet = true;
}

OAIConfigNodePropertyString*
OAIComAdobeCqScheduledExporterImplScheduledExporterImplProperties::getExporterUser() {
    return exporter_user;
}
void
OAIComAdobeCqScheduledExporterImplScheduledExporterImplProperties::setExporterUser(OAIConfigNodePropertyString* exporter_user) {
    this->exporter_user = exporter_user;
    this->m_exporter_user_isSet = true;
}


bool
OAIComAdobeCqScheduledExporterImplScheduledExporterImplProperties::isSet(){
    bool isObjectUpdated = false;
    do{
        if(include_paths != nullptr && include_paths->isSet()){ isObjectUpdated = true; break;}
        if(exporter_user != nullptr && exporter_user->isSet()){ isObjectUpdated = true; break;}
    }while(false);
    return isObjectUpdated;
}
}

