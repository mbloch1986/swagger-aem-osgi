/**
 * Adobe Experience Manager OSGI config (AEM) API
 * Swagger AEM OSGI is an OpenAPI specification for Adobe Experience Manager (AEM) OSGI Configurations API
 *
 * OpenAPI spec version: 1.0.0-pre.0
 * Contact: opensource@shinesolutions.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


#include "OAIOrgApacheJackrabbitOakPluginsIndexSolrOsgiRemoteSolrServerConfProperties.h"

#include "OAIHelpers.h"

#include <QJsonDocument>
#include <QJsonArray>
#include <QObject>
#include <QDebug>

namespace OpenAPI {

OAIOrgApacheJackrabbitOakPluginsIndexSolrOsgiRemoteSolrServerConfProperties::OAIOrgApacheJackrabbitOakPluginsIndexSolrOsgiRemoteSolrServerConfProperties(QString json) {
    init();
    this->fromJson(json);
}

OAIOrgApacheJackrabbitOakPluginsIndexSolrOsgiRemoteSolrServerConfProperties::OAIOrgApacheJackrabbitOakPluginsIndexSolrOsgiRemoteSolrServerConfProperties() {
    init();
}

OAIOrgApacheJackrabbitOakPluginsIndexSolrOsgiRemoteSolrServerConfProperties::~OAIOrgApacheJackrabbitOakPluginsIndexSolrOsgiRemoteSolrServerConfProperties() {
    this->cleanup();
}

void
OAIOrgApacheJackrabbitOakPluginsIndexSolrOsgiRemoteSolrServerConfProperties::init() {
    solr_http_url = new OAIConfigNodePropertyString();
    m_solr_http_url_isSet = false;
    solr_zk_host = new OAIConfigNodePropertyString();
    m_solr_zk_host_isSet = false;
    solr_collection = new OAIConfigNodePropertyString();
    m_solr_collection_isSet = false;
    solr_socket_timeout = new OAIConfigNodePropertyInteger();
    m_solr_socket_timeout_isSet = false;
    solr_connection_timeout = new OAIConfigNodePropertyInteger();
    m_solr_connection_timeout_isSet = false;
    solr_shards_no = new OAIConfigNodePropertyInteger();
    m_solr_shards_no_isSet = false;
    solr_replication_factor = new OAIConfigNodePropertyInteger();
    m_solr_replication_factor_isSet = false;
    solr_conf_dir = new OAIConfigNodePropertyString();
    m_solr_conf_dir_isSet = false;
}

void
OAIOrgApacheJackrabbitOakPluginsIndexSolrOsgiRemoteSolrServerConfProperties::cleanup() {
    if(solr_http_url != nullptr) { 
        delete solr_http_url;
    }
    if(solr_zk_host != nullptr) { 
        delete solr_zk_host;
    }
    if(solr_collection != nullptr) { 
        delete solr_collection;
    }
    if(solr_socket_timeout != nullptr) { 
        delete solr_socket_timeout;
    }
    if(solr_connection_timeout != nullptr) { 
        delete solr_connection_timeout;
    }
    if(solr_shards_no != nullptr) { 
        delete solr_shards_no;
    }
    if(solr_replication_factor != nullptr) { 
        delete solr_replication_factor;
    }
    if(solr_conf_dir != nullptr) { 
        delete solr_conf_dir;
    }
}

OAIOrgApacheJackrabbitOakPluginsIndexSolrOsgiRemoteSolrServerConfProperties*
OAIOrgApacheJackrabbitOakPluginsIndexSolrOsgiRemoteSolrServerConfProperties::fromJson(QString json) {
    QByteArray array (json.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
    return this;
}

void
OAIOrgApacheJackrabbitOakPluginsIndexSolrOsgiRemoteSolrServerConfProperties::fromJsonObject(QJsonObject pJson) {
    ::OpenAPI::setValue(&solr_http_url, pJson["solr.http.url"], "OAIConfigNodePropertyString", "OAIConfigNodePropertyString");
    
    ::OpenAPI::setValue(&solr_zk_host, pJson["solr.zk.host"], "OAIConfigNodePropertyString", "OAIConfigNodePropertyString");
    
    ::OpenAPI::setValue(&solr_collection, pJson["solr.collection"], "OAIConfigNodePropertyString", "OAIConfigNodePropertyString");
    
    ::OpenAPI::setValue(&solr_socket_timeout, pJson["solr.socket.timeout"], "OAIConfigNodePropertyInteger", "OAIConfigNodePropertyInteger");
    
    ::OpenAPI::setValue(&solr_connection_timeout, pJson["solr.connection.timeout"], "OAIConfigNodePropertyInteger", "OAIConfigNodePropertyInteger");
    
    ::OpenAPI::setValue(&solr_shards_no, pJson["solr.shards.no"], "OAIConfigNodePropertyInteger", "OAIConfigNodePropertyInteger");
    
    ::OpenAPI::setValue(&solr_replication_factor, pJson["solr.replication.factor"], "OAIConfigNodePropertyInteger", "OAIConfigNodePropertyInteger");
    
    ::OpenAPI::setValue(&solr_conf_dir, pJson["solr.conf.dir"], "OAIConfigNodePropertyString", "OAIConfigNodePropertyString");
    
}

QString
OAIOrgApacheJackrabbitOakPluginsIndexSolrOsgiRemoteSolrServerConfProperties::asJson ()
{
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject
OAIOrgApacheJackrabbitOakPluginsIndexSolrOsgiRemoteSolrServerConfProperties::asJsonObject() {
    QJsonObject obj;
    if((solr_http_url != nullptr) && (solr_http_url->isSet())){
        toJsonValue(QString("solr.http.url"), solr_http_url, obj, QString("OAIConfigNodePropertyString"));
    }
    if((solr_zk_host != nullptr) && (solr_zk_host->isSet())){
        toJsonValue(QString("solr.zk.host"), solr_zk_host, obj, QString("OAIConfigNodePropertyString"));
    }
    if((solr_collection != nullptr) && (solr_collection->isSet())){
        toJsonValue(QString("solr.collection"), solr_collection, obj, QString("OAIConfigNodePropertyString"));
    }
    if((solr_socket_timeout != nullptr) && (solr_socket_timeout->isSet())){
        toJsonValue(QString("solr.socket.timeout"), solr_socket_timeout, obj, QString("OAIConfigNodePropertyInteger"));
    }
    if((solr_connection_timeout != nullptr) && (solr_connection_timeout->isSet())){
        toJsonValue(QString("solr.connection.timeout"), solr_connection_timeout, obj, QString("OAIConfigNodePropertyInteger"));
    }
    if((solr_shards_no != nullptr) && (solr_shards_no->isSet())){
        toJsonValue(QString("solr.shards.no"), solr_shards_no, obj, QString("OAIConfigNodePropertyInteger"));
    }
    if((solr_replication_factor != nullptr) && (solr_replication_factor->isSet())){
        toJsonValue(QString("solr.replication.factor"), solr_replication_factor, obj, QString("OAIConfigNodePropertyInteger"));
    }
    if((solr_conf_dir != nullptr) && (solr_conf_dir->isSet())){
        toJsonValue(QString("solr.conf.dir"), solr_conf_dir, obj, QString("OAIConfigNodePropertyString"));
    }

    return obj;
}

OAIConfigNodePropertyString*
OAIOrgApacheJackrabbitOakPluginsIndexSolrOsgiRemoteSolrServerConfProperties::getSolrHttpUrl() {
    return solr_http_url;
}
void
OAIOrgApacheJackrabbitOakPluginsIndexSolrOsgiRemoteSolrServerConfProperties::setSolrHttpUrl(OAIConfigNodePropertyString* solr_http_url) {
    this->solr_http_url = solr_http_url;
    this->m_solr_http_url_isSet = true;
}

OAIConfigNodePropertyString*
OAIOrgApacheJackrabbitOakPluginsIndexSolrOsgiRemoteSolrServerConfProperties::getSolrZkHost() {
    return solr_zk_host;
}
void
OAIOrgApacheJackrabbitOakPluginsIndexSolrOsgiRemoteSolrServerConfProperties::setSolrZkHost(OAIConfigNodePropertyString* solr_zk_host) {
    this->solr_zk_host = solr_zk_host;
    this->m_solr_zk_host_isSet = true;
}

OAIConfigNodePropertyString*
OAIOrgApacheJackrabbitOakPluginsIndexSolrOsgiRemoteSolrServerConfProperties::getSolrCollection() {
    return solr_collection;
}
void
OAIOrgApacheJackrabbitOakPluginsIndexSolrOsgiRemoteSolrServerConfProperties::setSolrCollection(OAIConfigNodePropertyString* solr_collection) {
    this->solr_collection = solr_collection;
    this->m_solr_collection_isSet = true;
}

OAIConfigNodePropertyInteger*
OAIOrgApacheJackrabbitOakPluginsIndexSolrOsgiRemoteSolrServerConfProperties::getSolrSocketTimeout() {
    return solr_socket_timeout;
}
void
OAIOrgApacheJackrabbitOakPluginsIndexSolrOsgiRemoteSolrServerConfProperties::setSolrSocketTimeout(OAIConfigNodePropertyInteger* solr_socket_timeout) {
    this->solr_socket_timeout = solr_socket_timeout;
    this->m_solr_socket_timeout_isSet = true;
}

OAIConfigNodePropertyInteger*
OAIOrgApacheJackrabbitOakPluginsIndexSolrOsgiRemoteSolrServerConfProperties::getSolrConnectionTimeout() {
    return solr_connection_timeout;
}
void
OAIOrgApacheJackrabbitOakPluginsIndexSolrOsgiRemoteSolrServerConfProperties::setSolrConnectionTimeout(OAIConfigNodePropertyInteger* solr_connection_timeout) {
    this->solr_connection_timeout = solr_connection_timeout;
    this->m_solr_connection_timeout_isSet = true;
}

OAIConfigNodePropertyInteger*
OAIOrgApacheJackrabbitOakPluginsIndexSolrOsgiRemoteSolrServerConfProperties::getSolrShardsNo() {
    return solr_shards_no;
}
void
OAIOrgApacheJackrabbitOakPluginsIndexSolrOsgiRemoteSolrServerConfProperties::setSolrShardsNo(OAIConfigNodePropertyInteger* solr_shards_no) {
    this->solr_shards_no = solr_shards_no;
    this->m_solr_shards_no_isSet = true;
}

OAIConfigNodePropertyInteger*
OAIOrgApacheJackrabbitOakPluginsIndexSolrOsgiRemoteSolrServerConfProperties::getSolrReplicationFactor() {
    return solr_replication_factor;
}
void
OAIOrgApacheJackrabbitOakPluginsIndexSolrOsgiRemoteSolrServerConfProperties::setSolrReplicationFactor(OAIConfigNodePropertyInteger* solr_replication_factor) {
    this->solr_replication_factor = solr_replication_factor;
    this->m_solr_replication_factor_isSet = true;
}

OAIConfigNodePropertyString*
OAIOrgApacheJackrabbitOakPluginsIndexSolrOsgiRemoteSolrServerConfProperties::getSolrConfDir() {
    return solr_conf_dir;
}
void
OAIOrgApacheJackrabbitOakPluginsIndexSolrOsgiRemoteSolrServerConfProperties::setSolrConfDir(OAIConfigNodePropertyString* solr_conf_dir) {
    this->solr_conf_dir = solr_conf_dir;
    this->m_solr_conf_dir_isSet = true;
}


bool
OAIOrgApacheJackrabbitOakPluginsIndexSolrOsgiRemoteSolrServerConfProperties::isSet(){
    bool isObjectUpdated = false;
    do{
        if(solr_http_url != nullptr && solr_http_url->isSet()){ isObjectUpdated = true; break;}
        if(solr_zk_host != nullptr && solr_zk_host->isSet()){ isObjectUpdated = true; break;}
        if(solr_collection != nullptr && solr_collection->isSet()){ isObjectUpdated = true; break;}
        if(solr_socket_timeout != nullptr && solr_socket_timeout->isSet()){ isObjectUpdated = true; break;}
        if(solr_connection_timeout != nullptr && solr_connection_timeout->isSet()){ isObjectUpdated = true; break;}
        if(solr_shards_no != nullptr && solr_shards_no->isSet()){ isObjectUpdated = true; break;}
        if(solr_replication_factor != nullptr && solr_replication_factor->isSet()){ isObjectUpdated = true; break;}
        if(solr_conf_dir != nullptr && solr_conf_dir->isSet()){ isObjectUpdated = true; break;}
    }while(false);
    return isObjectUpdated;
}
}

