/**
 * Adobe Experience Manager OSGI config (AEM) API
 * Swagger AEM OSGI is an OpenAPI specification for Adobe Experience Manager (AEM) OSGI Configurations API
 *
 * OpenAPI spec version: 1.0.0-pre.0
 * Contact: opensource@shinesolutions.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


#include "OAIComAdobeCqSocialUgcbaseDispatcherImplFlushServiceImplProperties.h"

#include "OAIHelpers.h"

#include <QJsonDocument>
#include <QJsonArray>
#include <QObject>
#include <QDebug>

namespace OpenAPI {

OAIComAdobeCqSocialUgcbaseDispatcherImplFlushServiceImplProperties::OAIComAdobeCqSocialUgcbaseDispatcherImplFlushServiceImplProperties(QString json) {
    init();
    this->fromJson(json);
}

OAIComAdobeCqSocialUgcbaseDispatcherImplFlushServiceImplProperties::OAIComAdobeCqSocialUgcbaseDispatcherImplFlushServiceImplProperties() {
    init();
}

OAIComAdobeCqSocialUgcbaseDispatcherImplFlushServiceImplProperties::~OAIComAdobeCqSocialUgcbaseDispatcherImplFlushServiceImplProperties() {
    this->cleanup();
}

void
OAIComAdobeCqSocialUgcbaseDispatcherImplFlushServiceImplProperties::init() {
    thread_pool_size = new OAIConfigNodePropertyInteger();
    m_thread_pool_size_isSet = false;
    delay_time = new OAIConfigNodePropertyInteger();
    m_delay_time_isSet = false;
    worker_sleep_time = new OAIConfigNodePropertyInteger();
    m_worker_sleep_time_isSet = false;
}

void
OAIComAdobeCqSocialUgcbaseDispatcherImplFlushServiceImplProperties::cleanup() {
    if(thread_pool_size != nullptr) { 
        delete thread_pool_size;
    }
    if(delay_time != nullptr) { 
        delete delay_time;
    }
    if(worker_sleep_time != nullptr) { 
        delete worker_sleep_time;
    }
}

OAIComAdobeCqSocialUgcbaseDispatcherImplFlushServiceImplProperties*
OAIComAdobeCqSocialUgcbaseDispatcherImplFlushServiceImplProperties::fromJson(QString json) {
    QByteArray array (json.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
    return this;
}

void
OAIComAdobeCqSocialUgcbaseDispatcherImplFlushServiceImplProperties::fromJsonObject(QJsonObject pJson) {
    ::OpenAPI::setValue(&thread_pool_size, pJson["threadPoolSize"], "OAIConfigNodePropertyInteger", "OAIConfigNodePropertyInteger");
    
    ::OpenAPI::setValue(&delay_time, pJson["delayTime"], "OAIConfigNodePropertyInteger", "OAIConfigNodePropertyInteger");
    
    ::OpenAPI::setValue(&worker_sleep_time, pJson["workerSleepTime"], "OAIConfigNodePropertyInteger", "OAIConfigNodePropertyInteger");
    
}

QString
OAIComAdobeCqSocialUgcbaseDispatcherImplFlushServiceImplProperties::asJson ()
{
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject
OAIComAdobeCqSocialUgcbaseDispatcherImplFlushServiceImplProperties::asJsonObject() {
    QJsonObject obj;
    if((thread_pool_size != nullptr) && (thread_pool_size->isSet())){
        toJsonValue(QString("threadPoolSize"), thread_pool_size, obj, QString("OAIConfigNodePropertyInteger"));
    }
    if((delay_time != nullptr) && (delay_time->isSet())){
        toJsonValue(QString("delayTime"), delay_time, obj, QString("OAIConfigNodePropertyInteger"));
    }
    if((worker_sleep_time != nullptr) && (worker_sleep_time->isSet())){
        toJsonValue(QString("workerSleepTime"), worker_sleep_time, obj, QString("OAIConfigNodePropertyInteger"));
    }

    return obj;
}

OAIConfigNodePropertyInteger*
OAIComAdobeCqSocialUgcbaseDispatcherImplFlushServiceImplProperties::getThreadPoolSize() {
    return thread_pool_size;
}
void
OAIComAdobeCqSocialUgcbaseDispatcherImplFlushServiceImplProperties::setThreadPoolSize(OAIConfigNodePropertyInteger* thread_pool_size) {
    this->thread_pool_size = thread_pool_size;
    this->m_thread_pool_size_isSet = true;
}

OAIConfigNodePropertyInteger*
OAIComAdobeCqSocialUgcbaseDispatcherImplFlushServiceImplProperties::getDelayTime() {
    return delay_time;
}
void
OAIComAdobeCqSocialUgcbaseDispatcherImplFlushServiceImplProperties::setDelayTime(OAIConfigNodePropertyInteger* delay_time) {
    this->delay_time = delay_time;
    this->m_delay_time_isSet = true;
}

OAIConfigNodePropertyInteger*
OAIComAdobeCqSocialUgcbaseDispatcherImplFlushServiceImplProperties::getWorkerSleepTime() {
    return worker_sleep_time;
}
void
OAIComAdobeCqSocialUgcbaseDispatcherImplFlushServiceImplProperties::setWorkerSleepTime(OAIConfigNodePropertyInteger* worker_sleep_time) {
    this->worker_sleep_time = worker_sleep_time;
    this->m_worker_sleep_time_isSet = true;
}


bool
OAIComAdobeCqSocialUgcbaseDispatcherImplFlushServiceImplProperties::isSet(){
    bool isObjectUpdated = false;
    do{
        if(thread_pool_size != nullptr && thread_pool_size->isSet()){ isObjectUpdated = true; break;}
        if(delay_time != nullptr && delay_time->isSet()){ isObjectUpdated = true; break;}
        if(worker_sleep_time != nullptr && worker_sleep_time->isSet()){ isObjectUpdated = true; break;}
    }while(false);
    return isObjectUpdated;
}
}

