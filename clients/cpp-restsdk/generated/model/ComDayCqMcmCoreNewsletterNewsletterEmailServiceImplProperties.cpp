/**
 * Adobe Experience Manager OSGI config (AEM) API
 * Swagger AEM OSGI is an OpenAPI specification for Adobe Experience Manager (AEM) OSGI Configurations API
 *
 * OpenAPI spec version: 1.0.0-pre.0
 * Contact: opensource@shinesolutions.com
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 3.2.1-SNAPSHOT.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */



#include "ComDayCqMcmCoreNewsletterNewsletterEmailServiceImplProperties.h"

namespace org {
namespace openapitools {
namespace client {
namespace model {

ComDayCqMcmCoreNewsletterNewsletterEmailServiceImplProperties::ComDayCqMcmCoreNewsletterNewsletterEmailServiceImplProperties()
{
    m_From_addressIsSet = false;
    m_Sender_hostIsSet = false;
    m_Max_bounce_countIsSet = false;
}

ComDayCqMcmCoreNewsletterNewsletterEmailServiceImplProperties::~ComDayCqMcmCoreNewsletterNewsletterEmailServiceImplProperties()
{
}

void ComDayCqMcmCoreNewsletterNewsletterEmailServiceImplProperties::validate()
{
    // TODO: implement validation
}

web::json::value ComDayCqMcmCoreNewsletterNewsletterEmailServiceImplProperties::toJson() const
{
    web::json::value val = web::json::value::object();

    if(m_From_addressIsSet)
    {
        val[utility::conversions::to_string_t("from.address")] = ModelBase::toJson(m_From_address);
    }
    if(m_Sender_hostIsSet)
    {
        val[utility::conversions::to_string_t("sender.host")] = ModelBase::toJson(m_Sender_host);
    }
    if(m_Max_bounce_countIsSet)
    {
        val[utility::conversions::to_string_t("max.bounce.count")] = ModelBase::toJson(m_Max_bounce_count);
    }

    return val;
}

void ComDayCqMcmCoreNewsletterNewsletterEmailServiceImplProperties::fromJson(web::json::value& val)
{
    if(val.has_field(utility::conversions::to_string_t("from.address")))
    {
        if(!val[utility::conversions::to_string_t("from.address")].is_null())
        {
            std::shared_ptr<ConfigNodePropertyString> newItem(new ConfigNodePropertyString());
            newItem->fromJson(val[utility::conversions::to_string_t("from.address")]);
            setFromAddress( newItem );
        }
    }
    if(val.has_field(utility::conversions::to_string_t("sender.host")))
    {
        if(!val[utility::conversions::to_string_t("sender.host")].is_null())
        {
            std::shared_ptr<ConfigNodePropertyString> newItem(new ConfigNodePropertyString());
            newItem->fromJson(val[utility::conversions::to_string_t("sender.host")]);
            setSenderHost( newItem );
        }
    }
    if(val.has_field(utility::conversions::to_string_t("max.bounce.count")))
    {
        if(!val[utility::conversions::to_string_t("max.bounce.count")].is_null())
        {
            std::shared_ptr<ConfigNodePropertyString> newItem(new ConfigNodePropertyString());
            newItem->fromJson(val[utility::conversions::to_string_t("max.bounce.count")]);
            setMaxBounceCount( newItem );
        }
    }
}

void ComDayCqMcmCoreNewsletterNewsletterEmailServiceImplProperties::toMultipart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix) const
{
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t("."))
    {
        namePrefix += utility::conversions::to_string_t(".");
    }

    if(m_From_addressIsSet)
    {
        if (m_From_address.get())
        {
            m_From_address->toMultipart(multipart, utility::conversions::to_string_t("from.address."));
        }
    }
    if(m_Sender_hostIsSet)
    {
        if (m_Sender_host.get())
        {
            m_Sender_host->toMultipart(multipart, utility::conversions::to_string_t("sender.host."));
        }
    }
    if(m_Max_bounce_countIsSet)
    {
        if (m_Max_bounce_count.get())
        {
            m_Max_bounce_count->toMultipart(multipart, utility::conversions::to_string_t("max.bounce.count."));
        }
    }
}

void ComDayCqMcmCoreNewsletterNewsletterEmailServiceImplProperties::fromMultiPart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix)
{
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t("."))
    {
        namePrefix += utility::conversions::to_string_t(".");
    }

    if(multipart->hasContent(utility::conversions::to_string_t("from.address")))
    {
        if(multipart->hasContent(utility::conversions::to_string_t("from.address")))
        {
            std::shared_ptr<ConfigNodePropertyString> newItem(new ConfigNodePropertyString());
            newItem->fromMultiPart(multipart, utility::conversions::to_string_t("from.address."));
            setFromAddress( newItem );
        }
    }
    if(multipart->hasContent(utility::conversions::to_string_t("sender.host")))
    {
        if(multipart->hasContent(utility::conversions::to_string_t("sender.host")))
        {
            std::shared_ptr<ConfigNodePropertyString> newItem(new ConfigNodePropertyString());
            newItem->fromMultiPart(multipart, utility::conversions::to_string_t("sender.host."));
            setSenderHost( newItem );
        }
    }
    if(multipart->hasContent(utility::conversions::to_string_t("max.bounce.count")))
    {
        if(multipart->hasContent(utility::conversions::to_string_t("max.bounce.count")))
        {
            std::shared_ptr<ConfigNodePropertyString> newItem(new ConfigNodePropertyString());
            newItem->fromMultiPart(multipart, utility::conversions::to_string_t("max.bounce.count."));
            setMaxBounceCount( newItem );
        }
    }
}

std::shared_ptr<ConfigNodePropertyString> ComDayCqMcmCoreNewsletterNewsletterEmailServiceImplProperties::getFromAddress() const
{
    return m_From_address;
}


void ComDayCqMcmCoreNewsletterNewsletterEmailServiceImplProperties::setFromAddress(std::shared_ptr<ConfigNodePropertyString> value)
{
    m_From_address = value;
    m_From_addressIsSet = true;
}
bool ComDayCqMcmCoreNewsletterNewsletterEmailServiceImplProperties::fromAddressIsSet() const
{
    return m_From_addressIsSet;
}

void ComDayCqMcmCoreNewsletterNewsletterEmailServiceImplProperties::unsetFrom_address()
{
    m_From_addressIsSet = false;
}

std::shared_ptr<ConfigNodePropertyString> ComDayCqMcmCoreNewsletterNewsletterEmailServiceImplProperties::getSenderHost() const
{
    return m_Sender_host;
}


void ComDayCqMcmCoreNewsletterNewsletterEmailServiceImplProperties::setSenderHost(std::shared_ptr<ConfigNodePropertyString> value)
{
    m_Sender_host = value;
    m_Sender_hostIsSet = true;
}
bool ComDayCqMcmCoreNewsletterNewsletterEmailServiceImplProperties::senderHostIsSet() const
{
    return m_Sender_hostIsSet;
}

void ComDayCqMcmCoreNewsletterNewsletterEmailServiceImplProperties::unsetSender_host()
{
    m_Sender_hostIsSet = false;
}

std::shared_ptr<ConfigNodePropertyString> ComDayCqMcmCoreNewsletterNewsletterEmailServiceImplProperties::getMaxBounceCount() const
{
    return m_Max_bounce_count;
}


void ComDayCqMcmCoreNewsletterNewsletterEmailServiceImplProperties::setMaxBounceCount(std::shared_ptr<ConfigNodePropertyString> value)
{
    m_Max_bounce_count = value;
    m_Max_bounce_countIsSet = true;
}
bool ComDayCqMcmCoreNewsletterNewsletterEmailServiceImplProperties::maxBounceCountIsSet() const
{
    return m_Max_bounce_countIsSet;
}

void ComDayCqMcmCoreNewsletterNewsletterEmailServiceImplProperties::unsetMax_bounce_count()
{
    m_Max_bounce_countIsSet = false;
}

}
}
}
}

