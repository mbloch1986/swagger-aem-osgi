/**
* Adobe Experience Manager OSGI config (AEM) API
* Swagger AEM OSGI is an OpenAPI specification for Adobe Experience Manager (AEM) OSGI Configurations API
*
* OpenAPI spec version: 1.0.0-pre.0
* Contact: opensource@shinesolutions.com
*
* NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
* https://openapi-generator.tech
* Do not edit the class manually.
*/


#include "OrgApacheSlingServletsPostImplSlingPostServletProperties.h"

namespace org {
namespace openapitools {
namespace server {
namespace model {

OrgApacheSlingServletsPostImplSlingPostServletProperties::OrgApacheSlingServletsPostImplSlingPostServletProperties()
{
    m_Servlet_post_dateFormatsIsSet = false;
    m_Servlet_post_nodeNameHintsIsSet = false;
    m_Servlet_post_nodeNameMaxLengthIsSet = false;
    m_Servlet_post_checkinNewVersionableNodesIsSet = false;
    m_Servlet_post_autoCheckoutIsSet = false;
    m_Servlet_post_autoCheckinIsSet = false;
    m_Servlet_post_ignorePatternIsSet = false;
    
}

OrgApacheSlingServletsPostImplSlingPostServletProperties::~OrgApacheSlingServletsPostImplSlingPostServletProperties()
{
}

void OrgApacheSlingServletsPostImplSlingPostServletProperties::validate()
{
    // TODO: implement validation
}

nlohmann::json OrgApacheSlingServletsPostImplSlingPostServletProperties::toJson() const
{
    nlohmann::json val = nlohmann::json::object();

    if(m_Servlet_post_dateFormatsIsSet)
    {
        val["servlet.post.dateFormats"] = ModelBase::toJson(m_Servlet_post_dateFormats);
    }
    if(m_Servlet_post_nodeNameHintsIsSet)
    {
        val["servlet.post.nodeNameHints"] = ModelBase::toJson(m_Servlet_post_nodeNameHints);
    }
    if(m_Servlet_post_nodeNameMaxLengthIsSet)
    {
        val["servlet.post.nodeNameMaxLength"] = ModelBase::toJson(m_Servlet_post_nodeNameMaxLength);
    }
    if(m_Servlet_post_checkinNewVersionableNodesIsSet)
    {
        val["servlet.post.checkinNewVersionableNodes"] = ModelBase::toJson(m_Servlet_post_checkinNewVersionableNodes);
    }
    if(m_Servlet_post_autoCheckoutIsSet)
    {
        val["servlet.post.autoCheckout"] = ModelBase::toJson(m_Servlet_post_autoCheckout);
    }
    if(m_Servlet_post_autoCheckinIsSet)
    {
        val["servlet.post.autoCheckin"] = ModelBase::toJson(m_Servlet_post_autoCheckin);
    }
    if(m_Servlet_post_ignorePatternIsSet)
    {
        val["servlet.post.ignorePattern"] = ModelBase::toJson(m_Servlet_post_ignorePattern);
    }
    

    return val;
}

void OrgApacheSlingServletsPostImplSlingPostServletProperties::fromJson(nlohmann::json& val)
{
    if(val.find("servlet.post.dateFormats") != val.end())
    {
        if(!val["servlet.post.dateFormats"].is_null())
        {
            ConfigNodePropertyArray newItem;
            newItem.fromJson(val["servlet.post.dateFormats"]);
            setServletPostDateFormats( newItem );
        }
        
    }
    if(val.find("servlet.post.nodeNameHints") != val.end())
    {
        if(!val["servlet.post.nodeNameHints"].is_null())
        {
            ConfigNodePropertyArray newItem;
            newItem.fromJson(val["servlet.post.nodeNameHints"]);
            setServletPostNodeNameHints( newItem );
        }
        
    }
    if(val.find("servlet.post.nodeNameMaxLength") != val.end())
    {
        if(!val["servlet.post.nodeNameMaxLength"].is_null())
        {
            ConfigNodePropertyInteger newItem;
            newItem.fromJson(val["servlet.post.nodeNameMaxLength"]);
            setServletPostNodeNameMaxLength( newItem );
        }
        
    }
    if(val.find("servlet.post.checkinNewVersionableNodes") != val.end())
    {
        if(!val["servlet.post.checkinNewVersionableNodes"].is_null())
        {
            ConfigNodePropertyBoolean newItem;
            newItem.fromJson(val["servlet.post.checkinNewVersionableNodes"]);
            setServletPostCheckinNewVersionableNodes( newItem );
        }
        
    }
    if(val.find("servlet.post.autoCheckout") != val.end())
    {
        if(!val["servlet.post.autoCheckout"].is_null())
        {
            ConfigNodePropertyBoolean newItem;
            newItem.fromJson(val["servlet.post.autoCheckout"]);
            setServletPostAutoCheckout( newItem );
        }
        
    }
    if(val.find("servlet.post.autoCheckin") != val.end())
    {
        if(!val["servlet.post.autoCheckin"].is_null())
        {
            ConfigNodePropertyBoolean newItem;
            newItem.fromJson(val["servlet.post.autoCheckin"]);
            setServletPostAutoCheckin( newItem );
        }
        
    }
    if(val.find("servlet.post.ignorePattern") != val.end())
    {
        if(!val["servlet.post.ignorePattern"].is_null())
        {
            ConfigNodePropertyString newItem;
            newItem.fromJson(val["servlet.post.ignorePattern"]);
            setServletPostIgnorePattern( newItem );
        }
        
    }
    
}


ConfigNodePropertyArray OrgApacheSlingServletsPostImplSlingPostServletProperties::getServletPostDateFormats() const
{
    return m_Servlet_post_dateFormats;
}
void OrgApacheSlingServletsPostImplSlingPostServletProperties::setServletPostDateFormats(ConfigNodePropertyArray const& value)
{
    m_Servlet_post_dateFormats = value;
    m_Servlet_post_dateFormatsIsSet = true;
}
bool OrgApacheSlingServletsPostImplSlingPostServletProperties::servletPostDateFormatsIsSet() const
{
    return m_Servlet_post_dateFormatsIsSet;
}
void OrgApacheSlingServletsPostImplSlingPostServletProperties::unsetServlet_post_dateFormats()
{
    m_Servlet_post_dateFormatsIsSet = false;
}
ConfigNodePropertyArray OrgApacheSlingServletsPostImplSlingPostServletProperties::getServletPostNodeNameHints() const
{
    return m_Servlet_post_nodeNameHints;
}
void OrgApacheSlingServletsPostImplSlingPostServletProperties::setServletPostNodeNameHints(ConfigNodePropertyArray const& value)
{
    m_Servlet_post_nodeNameHints = value;
    m_Servlet_post_nodeNameHintsIsSet = true;
}
bool OrgApacheSlingServletsPostImplSlingPostServletProperties::servletPostNodeNameHintsIsSet() const
{
    return m_Servlet_post_nodeNameHintsIsSet;
}
void OrgApacheSlingServletsPostImplSlingPostServletProperties::unsetServlet_post_nodeNameHints()
{
    m_Servlet_post_nodeNameHintsIsSet = false;
}
ConfigNodePropertyInteger OrgApacheSlingServletsPostImplSlingPostServletProperties::getServletPostNodeNameMaxLength() const
{
    return m_Servlet_post_nodeNameMaxLength;
}
void OrgApacheSlingServletsPostImplSlingPostServletProperties::setServletPostNodeNameMaxLength(ConfigNodePropertyInteger const& value)
{
    m_Servlet_post_nodeNameMaxLength = value;
    m_Servlet_post_nodeNameMaxLengthIsSet = true;
}
bool OrgApacheSlingServletsPostImplSlingPostServletProperties::servletPostNodeNameMaxLengthIsSet() const
{
    return m_Servlet_post_nodeNameMaxLengthIsSet;
}
void OrgApacheSlingServletsPostImplSlingPostServletProperties::unsetServlet_post_nodeNameMaxLength()
{
    m_Servlet_post_nodeNameMaxLengthIsSet = false;
}
ConfigNodePropertyBoolean OrgApacheSlingServletsPostImplSlingPostServletProperties::getServletPostCheckinNewVersionableNodes() const
{
    return m_Servlet_post_checkinNewVersionableNodes;
}
void OrgApacheSlingServletsPostImplSlingPostServletProperties::setServletPostCheckinNewVersionableNodes(ConfigNodePropertyBoolean const& value)
{
    m_Servlet_post_checkinNewVersionableNodes = value;
    m_Servlet_post_checkinNewVersionableNodesIsSet = true;
}
bool OrgApacheSlingServletsPostImplSlingPostServletProperties::servletPostCheckinNewVersionableNodesIsSet() const
{
    return m_Servlet_post_checkinNewVersionableNodesIsSet;
}
void OrgApacheSlingServletsPostImplSlingPostServletProperties::unsetServlet_post_checkinNewVersionableNodes()
{
    m_Servlet_post_checkinNewVersionableNodesIsSet = false;
}
ConfigNodePropertyBoolean OrgApacheSlingServletsPostImplSlingPostServletProperties::getServletPostAutoCheckout() const
{
    return m_Servlet_post_autoCheckout;
}
void OrgApacheSlingServletsPostImplSlingPostServletProperties::setServletPostAutoCheckout(ConfigNodePropertyBoolean const& value)
{
    m_Servlet_post_autoCheckout = value;
    m_Servlet_post_autoCheckoutIsSet = true;
}
bool OrgApacheSlingServletsPostImplSlingPostServletProperties::servletPostAutoCheckoutIsSet() const
{
    return m_Servlet_post_autoCheckoutIsSet;
}
void OrgApacheSlingServletsPostImplSlingPostServletProperties::unsetServlet_post_autoCheckout()
{
    m_Servlet_post_autoCheckoutIsSet = false;
}
ConfigNodePropertyBoolean OrgApacheSlingServletsPostImplSlingPostServletProperties::getServletPostAutoCheckin() const
{
    return m_Servlet_post_autoCheckin;
}
void OrgApacheSlingServletsPostImplSlingPostServletProperties::setServletPostAutoCheckin(ConfigNodePropertyBoolean const& value)
{
    m_Servlet_post_autoCheckin = value;
    m_Servlet_post_autoCheckinIsSet = true;
}
bool OrgApacheSlingServletsPostImplSlingPostServletProperties::servletPostAutoCheckinIsSet() const
{
    return m_Servlet_post_autoCheckinIsSet;
}
void OrgApacheSlingServletsPostImplSlingPostServletProperties::unsetServlet_post_autoCheckin()
{
    m_Servlet_post_autoCheckinIsSet = false;
}
ConfigNodePropertyString OrgApacheSlingServletsPostImplSlingPostServletProperties::getServletPostIgnorePattern() const
{
    return m_Servlet_post_ignorePattern;
}
void OrgApacheSlingServletsPostImplSlingPostServletProperties::setServletPostIgnorePattern(ConfigNodePropertyString const& value)
{
    m_Servlet_post_ignorePattern = value;
    m_Servlet_post_ignorePatternIsSet = true;
}
bool OrgApacheSlingServletsPostImplSlingPostServletProperties::servletPostIgnorePatternIsSet() const
{
    return m_Servlet_post_ignorePatternIsSet;
}
void OrgApacheSlingServletsPostImplSlingPostServletProperties::unsetServlet_post_ignorePattern()
{
    m_Servlet_post_ignorePatternIsSet = false;
}

}
}
}
}

