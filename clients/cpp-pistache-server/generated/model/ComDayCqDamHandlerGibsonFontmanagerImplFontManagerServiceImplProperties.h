/**
* Adobe Experience Manager OSGI config (AEM) API
* Swagger AEM OSGI is an OpenAPI specification for Adobe Experience Manager (AEM) OSGI Configurations API
*
* OpenAPI spec version: 1.0.0-pre.0
* Contact: opensource@shinesolutions.com
*
* NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
* https://openapi-generator.tech
* Do not edit the class manually.
*/
/*
 * ComDayCqDamHandlerGibsonFontmanagerImplFontManagerServiceImplProperties.h
 *
 * 
 */

#ifndef ComDayCqDamHandlerGibsonFontmanagerImplFontManagerServiceImplProperties_H_
#define ComDayCqDamHandlerGibsonFontmanagerImplFontManagerServiceImplProperties_H_


#include "ModelBase.h"

#include "ConfigNodePropertyArray.h"
#include "ConfigNodePropertyString.h"

namespace org {
namespace openapitools {
namespace server {
namespace model {

/// <summary>
/// 
/// </summary>
class  ComDayCqDamHandlerGibsonFontmanagerImplFontManagerServiceImplProperties
    : public ModelBase
{
public:
    ComDayCqDamHandlerGibsonFontmanagerImplFontManagerServiceImplProperties();
    virtual ~ComDayCqDamHandlerGibsonFontmanagerImplFontManagerServiceImplProperties();

    /////////////////////////////////////////////
    /// ModelBase overrides

    void validate() override;

    nlohmann::json toJson() const override;
    void fromJson(nlohmann::json& json) override;

    /////////////////////////////////////////////
    /// ComDayCqDamHandlerGibsonFontmanagerImplFontManagerServiceImplProperties members

    /// <summary>
    /// 
    /// </summary>
    ConfigNodePropertyString getEventFilter() const;
    void setEventFilter(ConfigNodePropertyString const& value);
    bool eventFilterIsSet() const;
    void unsetEvent_filter();
    /// <summary>
    /// 
    /// </summary>
    ConfigNodePropertyArray getFontmgrSystemFontDir() const;
    void setFontmgrSystemFontDir(ConfigNodePropertyArray const& value);
    bool fontmgrSystemFontDirIsSet() const;
    void unsetFontmgr_system_font_dir();
    /// <summary>
    /// 
    /// </summary>
    ConfigNodePropertyString getFontmgrAdobeFontDir() const;
    void setFontmgrAdobeFontDir(ConfigNodePropertyString const& value);
    bool fontmgrAdobeFontDirIsSet() const;
    void unsetFontmgr_adobe_font_dir();
    /// <summary>
    /// 
    /// </summary>
    ConfigNodePropertyString getFontmgrCustomerFontDir() const;
    void setFontmgrCustomerFontDir(ConfigNodePropertyString const& value);
    bool fontmgrCustomerFontDirIsSet() const;
    void unsetFontmgr_customer_font_dir();

protected:
    ConfigNodePropertyString m_Event_filter;
    bool m_Event_filterIsSet;
    ConfigNodePropertyArray m_Fontmgr_system_font_dir;
    bool m_Fontmgr_system_font_dirIsSet;
    ConfigNodePropertyString m_Fontmgr_adobe_font_dir;
    bool m_Fontmgr_adobe_font_dirIsSet;
    ConfigNodePropertyString m_Fontmgr_customer_font_dir;
    bool m_Fontmgr_customer_font_dirIsSet;
};

}
}
}
}

#endif /* ComDayCqDamHandlerGibsonFontmanagerImplFontManagerServiceImplProperties_H_ */
