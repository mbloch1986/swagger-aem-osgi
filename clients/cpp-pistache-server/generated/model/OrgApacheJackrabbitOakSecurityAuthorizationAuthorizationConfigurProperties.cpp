/**
* Adobe Experience Manager OSGI config (AEM) API
* Swagger AEM OSGI is an OpenAPI specification for Adobe Experience Manager (AEM) OSGI Configurations API
*
* OpenAPI spec version: 1.0.0-pre.0
* Contact: opensource@shinesolutions.com
*
* NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
* https://openapi-generator.tech
* Do not edit the class manually.
*/


#include "OrgApacheJackrabbitOakSecurityAuthorizationAuthorizationConfigurProperties.h"

namespace org {
namespace openapitools {
namespace server {
namespace model {

OrgApacheJackrabbitOakSecurityAuthorizationAuthorizationConfigurProperties::OrgApacheJackrabbitOakSecurityAuthorizationAuthorizationConfigurProperties()
{
    m_PermissionsJr2IsSet = false;
    m_ImportBehaviorIsSet = false;
    m_ReadPathsIsSet = false;
    m_AdministrativePrincipalsIsSet = false;
    m_ConfigurationRankingIsSet = false;
    
}

OrgApacheJackrabbitOakSecurityAuthorizationAuthorizationConfigurProperties::~OrgApacheJackrabbitOakSecurityAuthorizationAuthorizationConfigurProperties()
{
}

void OrgApacheJackrabbitOakSecurityAuthorizationAuthorizationConfigurProperties::validate()
{
    // TODO: implement validation
}

nlohmann::json OrgApacheJackrabbitOakSecurityAuthorizationAuthorizationConfigurProperties::toJson() const
{
    nlohmann::json val = nlohmann::json::object();

    if(m_PermissionsJr2IsSet)
    {
        val["permissionsJr2"] = ModelBase::toJson(m_PermissionsJr2);
    }
    if(m_ImportBehaviorIsSet)
    {
        val["importBehavior"] = ModelBase::toJson(m_ImportBehavior);
    }
    if(m_ReadPathsIsSet)
    {
        val["readPaths"] = ModelBase::toJson(m_ReadPaths);
    }
    if(m_AdministrativePrincipalsIsSet)
    {
        val["administrativePrincipals"] = ModelBase::toJson(m_AdministrativePrincipals);
    }
    if(m_ConfigurationRankingIsSet)
    {
        val["configurationRanking"] = ModelBase::toJson(m_ConfigurationRanking);
    }
    

    return val;
}

void OrgApacheJackrabbitOakSecurityAuthorizationAuthorizationConfigurProperties::fromJson(nlohmann::json& val)
{
    if(val.find("permissionsJr2") != val.end())
    {
        if(!val["permissionsJr2"].is_null())
        {
            ConfigNodePropertyDropDown newItem;
            newItem.fromJson(val["permissionsJr2"]);
            setPermissionsJr2( newItem );
        }
        
    }
    if(val.find("importBehavior") != val.end())
    {
        if(!val["importBehavior"].is_null())
        {
            ConfigNodePropertyDropDown newItem;
            newItem.fromJson(val["importBehavior"]);
            setImportBehavior( newItem );
        }
        
    }
    if(val.find("readPaths") != val.end())
    {
        if(!val["readPaths"].is_null())
        {
            ConfigNodePropertyArray newItem;
            newItem.fromJson(val["readPaths"]);
            setReadPaths( newItem );
        }
        
    }
    if(val.find("administrativePrincipals") != val.end())
    {
        if(!val["administrativePrincipals"].is_null())
        {
            ConfigNodePropertyArray newItem;
            newItem.fromJson(val["administrativePrincipals"]);
            setAdministrativePrincipals( newItem );
        }
        
    }
    if(val.find("configurationRanking") != val.end())
    {
        if(!val["configurationRanking"].is_null())
        {
            ConfigNodePropertyInteger newItem;
            newItem.fromJson(val["configurationRanking"]);
            setConfigurationRanking( newItem );
        }
        
    }
    
}


ConfigNodePropertyDropDown OrgApacheJackrabbitOakSecurityAuthorizationAuthorizationConfigurProperties::getPermissionsJr2() const
{
    return m_PermissionsJr2;
}
void OrgApacheJackrabbitOakSecurityAuthorizationAuthorizationConfigurProperties::setPermissionsJr2(ConfigNodePropertyDropDown const& value)
{
    m_PermissionsJr2 = value;
    m_PermissionsJr2IsSet = true;
}
bool OrgApacheJackrabbitOakSecurityAuthorizationAuthorizationConfigurProperties::permissionsJr2IsSet() const
{
    return m_PermissionsJr2IsSet;
}
void OrgApacheJackrabbitOakSecurityAuthorizationAuthorizationConfigurProperties::unsetPermissionsJr2()
{
    m_PermissionsJr2IsSet = false;
}
ConfigNodePropertyDropDown OrgApacheJackrabbitOakSecurityAuthorizationAuthorizationConfigurProperties::getImportBehavior() const
{
    return m_ImportBehavior;
}
void OrgApacheJackrabbitOakSecurityAuthorizationAuthorizationConfigurProperties::setImportBehavior(ConfigNodePropertyDropDown const& value)
{
    m_ImportBehavior = value;
    m_ImportBehaviorIsSet = true;
}
bool OrgApacheJackrabbitOakSecurityAuthorizationAuthorizationConfigurProperties::importBehaviorIsSet() const
{
    return m_ImportBehaviorIsSet;
}
void OrgApacheJackrabbitOakSecurityAuthorizationAuthorizationConfigurProperties::unsetImportBehavior()
{
    m_ImportBehaviorIsSet = false;
}
ConfigNodePropertyArray OrgApacheJackrabbitOakSecurityAuthorizationAuthorizationConfigurProperties::getReadPaths() const
{
    return m_ReadPaths;
}
void OrgApacheJackrabbitOakSecurityAuthorizationAuthorizationConfigurProperties::setReadPaths(ConfigNodePropertyArray const& value)
{
    m_ReadPaths = value;
    m_ReadPathsIsSet = true;
}
bool OrgApacheJackrabbitOakSecurityAuthorizationAuthorizationConfigurProperties::readPathsIsSet() const
{
    return m_ReadPathsIsSet;
}
void OrgApacheJackrabbitOakSecurityAuthorizationAuthorizationConfigurProperties::unsetReadPaths()
{
    m_ReadPathsIsSet = false;
}
ConfigNodePropertyArray OrgApacheJackrabbitOakSecurityAuthorizationAuthorizationConfigurProperties::getAdministrativePrincipals() const
{
    return m_AdministrativePrincipals;
}
void OrgApacheJackrabbitOakSecurityAuthorizationAuthorizationConfigurProperties::setAdministrativePrincipals(ConfigNodePropertyArray const& value)
{
    m_AdministrativePrincipals = value;
    m_AdministrativePrincipalsIsSet = true;
}
bool OrgApacheJackrabbitOakSecurityAuthorizationAuthorizationConfigurProperties::administrativePrincipalsIsSet() const
{
    return m_AdministrativePrincipalsIsSet;
}
void OrgApacheJackrabbitOakSecurityAuthorizationAuthorizationConfigurProperties::unsetAdministrativePrincipals()
{
    m_AdministrativePrincipalsIsSet = false;
}
ConfigNodePropertyInteger OrgApacheJackrabbitOakSecurityAuthorizationAuthorizationConfigurProperties::getConfigurationRanking() const
{
    return m_ConfigurationRanking;
}
void OrgApacheJackrabbitOakSecurityAuthorizationAuthorizationConfigurProperties::setConfigurationRanking(ConfigNodePropertyInteger const& value)
{
    m_ConfigurationRanking = value;
    m_ConfigurationRankingIsSet = true;
}
bool OrgApacheJackrabbitOakSecurityAuthorizationAuthorizationConfigurProperties::configurationRankingIsSet() const
{
    return m_ConfigurationRankingIsSet;
}
void OrgApacheJackrabbitOakSecurityAuthorizationAuthorizationConfigurProperties::unsetConfigurationRanking()
{
    m_ConfigurationRankingIsSet = false;
}

}
}
}
}

