/**
 * @fileoverview AUTOMATICALLY GENERATED service for API.Client.ConfigmgrApi.
 * Do not edit this file by hand or your changes will be lost next time it is
 * generated.
 *
 * Swagger AEM OSGI is an OpenAPI specification for Adobe Experience Manager (AEM) OSGI Configurations API
 * Version: 1.0.0-pre.0
 * Generated by: org.openapitools.codegen.languages.JavascriptClosureAngularClientCodegen
 */
goog.provide('API.Client.ConfigmgrApi');

goog.require('API.Client.MessagingUserComponentFactoryInfo');
goog.require('API.Client.adaptiveFormAndInteractiveCommunicationWebChannelConfigurationInfo');
goog.require('API.Client.adaptiveFormAndInteractiveCommunicationWebChannelThemeConfigurInfo');
goog.require('API.Client.analyticsComponentQueryCacheServiceInfo');
goog.require('API.Client.apacheSlingHealthCheckResultHTMLSerializerInfo');
goog.require('API.Client.comAdobeAemFormsndocumentsConfigAEMFormsManagerConfigurationInfo');
goog.require('API.Client.comAdobeAemTransactionCoreImplTransactionRecorderInfo');
goog.require('API.Client.comAdobeAemUpgradePrechecksHcImplDeprecateIndexesHCInfo');
goog.require('API.Client.comAdobeAemUpgradePrechecksHcImplReplicationAgentsDisabledHCInfo');
goog.require('API.Client.comAdobeAemUpgradePrechecksMbeanImplPreUpgradeTasksMBeanImplInfo');
goog.require('API.Client.comAdobeAemUpgradePrechecksTasksImplConsistencyCheckTaskImplInfo');
goog.require('API.Client.comAdobeCqAccountApiAccountManagementServiceInfo');
goog.require('API.Client.comAdobeCqAccountImplAccountManagementServletInfo');
goog.require('API.Client.comAdobeCqAddressImplLocationLocationListServletInfo');
goog.require('API.Client.comAdobeCqAuditPurgeDamInfo');
goog.require('API.Client.comAdobeCqAuditPurgePagesInfo');
goog.require('API.Client.comAdobeCqAuditPurgeReplicationInfo');
goog.require('API.Client.comAdobeCqCdnRewriterImplAWSCloudFrontRewriterInfo');
goog.require('API.Client.comAdobeCqCdnRewriterImplCDNConfigServiceImplInfo');
goog.require('API.Client.comAdobeCqCdnRewriterImplCDNRewriterInfo');
goog.require('API.Client.comAdobeCqCloudconfigCoreImplConfigurationReplicationEventHandleInfo');
goog.require('API.Client.comAdobeCqCommerceImplAssetDynamicImageHandlerInfo');
goog.require('API.Client.comAdobeCqCommerceImplAssetProductAssetHandlerProviderImplInfo');
goog.require('API.Client.comAdobeCqCommerceImplAssetStaticImageHandlerInfo');
goog.require('API.Client.comAdobeCqCommerceImplAssetVideoHandlerInfo');
goog.require('API.Client.comAdobeCqCommerceImplPromotionPromotionManagerImplInfo');
goog.require('API.Client.comAdobeCqCommercePimImplCataloggeneratorCatalogGeneratorImplInfo');
goog.require('API.Client.comAdobeCqCommercePimImplPageEventListenerInfo');
goog.require('API.Client.comAdobeCqCommercePimImplProductfeedProductFeedServiceImplInfo');
goog.require('API.Client.comAdobeCqContentinsightImplReportingServicesSettingsProviderInfo');
goog.require('API.Client.comAdobeCqContentinsightImplServletsBrightEdgeProxyServletInfo');
goog.require('API.Client.comAdobeCqContentinsightImplServletsReportingServicesProxyServleInfo');
goog.require('API.Client.comAdobeCqDamCfmImplComponentComponentConfigImplInfo');
goog.require('API.Client.comAdobeCqDamCfmImplConfFeatureConfigImplInfo');
goog.require('API.Client.comAdobeCqDamCfmImplContentRewriterAssetProcessorInfo');
goog.require('API.Client.comAdobeCqDamCfmImplContentRewriterParRangeFilterInfo');
goog.require('API.Client.comAdobeCqDamCfmImplContentRewriterPayloadFilterInfo');
goog.require('API.Client.comAdobeCqDamDmProcessImagePTiffManagerImplInfo');
goog.require('API.Client.comAdobeCqDamIpsImplReplicationTriggerReplicateOnModifyWorkerInfo');
goog.require('API.Client.comAdobeCqDamMacSyncHelperImplMACSyncClientImplInfo');
goog.require('API.Client.comAdobeCqDamMacSyncImplDAMSyncServiceImplInfo');
goog.require('API.Client.comAdobeCqDamProcessorNuiImplNuiAssetProcessorInfo');
goog.require('API.Client.comAdobeCqDamS7imagingImplIsImageServerComponentInfo');
goog.require('API.Client.comAdobeCqDamS7imagingImplPsPlatformServerServletInfo');
goog.require('API.Client.comAdobeCqDamWebdavImplIoAssetIOHandlerInfo');
goog.require('API.Client.comAdobeCqDamWebdavImplIoDamWebdavVersionLinkingJobInfo');
goog.require('API.Client.comAdobeCqDamWebdavImplIoSpecialFilesHandlerInfo');
goog.require('API.Client.comAdobeCqDeserfwImplDeserializationFirewallImplInfo');
goog.require('API.Client.comAdobeCqDtmImplServiceDTMWebServiceImplInfo');
goog.require('API.Client.comAdobeCqDtmImplServletsDTMDeployHookServletInfo');
goog.require('API.Client.comAdobeCqDtmReactorImplServiceWebServiceImplInfo');
goog.require('API.Client.comAdobeCqExperiencelogImplExperienceLogConfigServletInfo');
goog.require('API.Client.comAdobeCqHcContentPackagesHealthCheckInfo');
goog.require('API.Client.comAdobeCqHistoryImplHistoryRequestFilterInfo');
goog.require('API.Client.comAdobeCqHistoryImplHistoryServiceImplInfo');
goog.require('API.Client.comAdobeCqInboxImplTypeproviderItemTypeProviderInfo');
goog.require('API.Client.comAdobeCqProjectsImplServletProjectImageServletInfo');
goog.require('API.Client.comAdobeCqProjectsPurgeSchedulerInfo');
goog.require('API.Client.comAdobeCqScheduledExporterImplScheduledExporterImplInfo');
goog.require('API.Client.comAdobeCqScreensAnalyticsImplScreensAnalyticsServiceImplInfo');
goog.require('API.Client.comAdobeCqScreensDeviceImplDeviceServiceInfo');
goog.require('API.Client.comAdobeCqScreensDeviceRegistrationImplRegistrationServiceImplInfo');
goog.require('API.Client.comAdobeCqScreensImplHandlerChannelsUpdateHandlerInfo');
goog.require('API.Client.comAdobeCqScreensImplJobsDistributedDevicesStatiUpdateJobInfo');
goog.require('API.Client.comAdobeCqScreensImplRemoteImplDistributedHttpClientImplInfo');
goog.require('API.Client.comAdobeCqScreensImplScreensChannelPostProcessorInfo');
goog.require('API.Client.comAdobeCqScreensMonitoringImplScreensMonitoringServiceImplInfo');
goog.require('API.Client.comAdobeCqScreensMqActivemqImplArtemisJMSProviderInfo');
goog.require('API.Client.comAdobeCqScreensOfflinecontentImplBulkOfflineUpdateServiceImplInfo');
goog.require('API.Client.comAdobeCqScreensOfflinecontentImplOfflineContentServiceImplInfo');
goog.require('API.Client.comAdobeCqScreensSegmentationImplSegmentationFeatureFlagInfo');
goog.require('API.Client.comAdobeCqSecurityHcBundlesImplHtmlLibraryManagerConfigHealthChInfo');
goog.require('API.Client.comAdobeCqSecurityHcBundlesImplWcmFilterHealthCheckInfo');
goog.require('API.Client.comAdobeCqSecurityHcDispatcherImplDispatcherAccessHealthCheckInfo');
goog.require('API.Client.comAdobeCqSecurityHcPackagesImplExampleContentHealthCheckInfo');
goog.require('API.Client.comAdobeCqSecurityHcWebserverImplClickjackingHealthCheckInfo');
goog.require('API.Client.comAdobeCqSocialAccountverificationImplAccountManagementConfigImInfo');
goog.require('API.Client.comAdobeCqSocialActivitystreamsClientImplSocialActivityComponenInfo');
goog.require('API.Client.comAdobeCqSocialActivitystreamsClientImplSocialActivityStreamCoInfo');
goog.require('API.Client.comAdobeCqSocialActivitystreamsListenerImplEventListenerHandlerInfo');
goog.require('API.Client.comAdobeCqSocialActivitystreamsListenerImplModerationEventExtenInfo');
goog.require('API.Client.comAdobeCqSocialActivitystreamsListenerImplRatingEventActivitySInfo');
goog.require('API.Client.comAdobeCqSocialActivitystreamsListenerImplResourceActivityStreInfo');
goog.require('API.Client.comAdobeCqSocialCalendarClientEndpointsImplCalendarOperationsIInfo');
goog.require('API.Client.comAdobeCqSocialCalendarClientOperationextensionsEventAttachmenInfo');
goog.require('API.Client.comAdobeCqSocialCalendarServletsTimeZoneServletInfo');
goog.require('API.Client.comAdobeCqSocialCommonsCommentsEndpointsImplCommentDeleteEventInfo');
goog.require('API.Client.comAdobeCqSocialCommonsCommentsEndpointsImplCommentOperationSeInfo');
goog.require('API.Client.comAdobeCqSocialCommonsCommentsEndpointsImplTranslationOperatiInfo');
goog.require('API.Client.comAdobeCqSocialCommonsCommentsListingImplSearchCommentSocialCInfo');
goog.require('API.Client.comAdobeCqSocialCommonsCommentsSchedulerImplSearchScheduledPosInfo');
goog.require('API.Client.comAdobeCqSocialCommonsCorsCORSAuthenticationFilterInfo');
goog.require('API.Client.comAdobeCqSocialCommonsEmailreplyImplAndroidEmailClientProviderInfo');
goog.require('API.Client.comAdobeCqSocialCommonsEmailreplyImplCommentEmailBuilderImplInfo');
goog.require('API.Client.comAdobeCqSocialCommonsEmailreplyImplCommentEmailEventListenerInfo');
goog.require('API.Client.comAdobeCqSocialCommonsEmailreplyImplCustomEmailClientProviderInfo');
goog.require('API.Client.comAdobeCqSocialCommonsEmailreplyImplEmailQuotedTextPatternsImpInfo');
goog.require('API.Client.comAdobeCqSocialCommonsEmailreplyImplEmailReplyConfigurationImpInfo');
goog.require('API.Client.comAdobeCqSocialCommonsEmailreplyImplEmailReplyImporterInfo');
goog.require('API.Client.comAdobeCqSocialCommonsEmailreplyImplGmailEmailClientProviderInfo');
goog.require('API.Client.comAdobeCqSocialCommonsEmailreplyImplIOSEmailClientProviderInfo');
goog.require('API.Client.comAdobeCqSocialCommonsEmailreplyImplMacmailEmailClientProviderInfo');
goog.require('API.Client.comAdobeCqSocialCommonsEmailreplyImplOutLookEmailClientProviderInfo');
goog.require('API.Client.comAdobeCqSocialCommonsEmailreplyImplUnknownEmailClientProviderInfo');
goog.require('API.Client.comAdobeCqSocialCommonsEmailreplyImplYahooEmailClientProviderInfo');
goog.require('API.Client.comAdobeCqSocialCommonsMaintainanceImplDeleteTempUGCImageUploadInfo');
goog.require('API.Client.comAdobeCqSocialCommonsUgclimiterImplUGCLimiterServiceImplInfo');
goog.require('API.Client.comAdobeCqSocialCommonsUgclimitsconfigImplCommunityUserUGCLimitInfo');
goog.require('API.Client.comAdobeCqSocialConnectOauthImplFacebookProviderImplInfo');
goog.require('API.Client.comAdobeCqSocialConnectOauthImplSocialOAuthAuthenticationHandleInfo');
goog.require('API.Client.comAdobeCqSocialConnectOauthImplSocialOAuthUserProfileMapperInfo');
goog.require('API.Client.comAdobeCqSocialConnectOauthImplTwitterProviderImplInfo');
goog.require('API.Client.comAdobeCqSocialContentFragmentsServicesImplCommunitiesFragmenInfo');
goog.require('API.Client.comAdobeCqSocialDatastoreAsImplASResourceProviderFactoryInfo');
goog.require('API.Client.comAdobeCqSocialDatastoreOpImplSocialMSResourceProviderFactoryInfo');
goog.require('API.Client.comAdobeCqSocialDatastoreRdbImplSocialRDBResourceProviderFactorInfo');
goog.require('API.Client.comAdobeCqSocialEnablementAdaptorsEnablementLearningPathAdaptorFInfo');
goog.require('API.Client.comAdobeCqSocialEnablementAdaptorsEnablementResourceAdaptorFactoInfo');
goog.require('API.Client.comAdobeCqSocialEnablementLearningpathEndpointsImplEnablementLInfo');
goog.require('API.Client.comAdobeCqSocialEnablementResourceEndpointsImplEnablementResouInfo');
goog.require('API.Client.comAdobeCqSocialEnablementServicesImplAuthorMarkerImplInfo');
goog.require('API.Client.comAdobeCqSocialFilelibraryClientEndpointsFilelibraryDownloadGeInfo');
goog.require('API.Client.comAdobeCqSocialFilelibraryClientEndpointsImplFileLibraryOperaInfo');
goog.require('API.Client.comAdobeCqSocialForumClientEndpointsImplForumOperationsServiceInfo');
goog.require('API.Client.comAdobeCqSocialForumDispatcherImplFlushOperationsInfo');
goog.require('API.Client.comAdobeCqSocialGroupClientImplCommunityGroupCollectionComponenInfo');
goog.require('API.Client.comAdobeCqSocialGroupImplGroupServiceImplInfo');
goog.require('API.Client.comAdobeCqSocialHandlebarsGuavaTemplateCacheImplInfo');
goog.require('API.Client.comAdobeCqSocialIdeationClientEndpointsImplIdeationOperationsSInfo');
goog.require('API.Client.comAdobeCqSocialJournalClientEndpointsImplJournalOperationsSerInfo');
goog.require('API.Client.comAdobeCqSocialMembersEndpointsImplCommunityMemberGroupProfileInfo');
goog.require('API.Client.comAdobeCqSocialMembersEndpointsImplCommunityMemberUserProfileOInfo');
goog.require('API.Client.comAdobeCqSocialMembersImplCommunityMemberGroupProfileComponentFInfo');
goog.require('API.Client.comAdobeCqSocialMessagingClientEndpointsImplMessagingOperationInfo');
goog.require('API.Client.comAdobeCqSocialModerationDashboardApiFilterGroupSocialComponenInfo');
goog.require('API.Client.comAdobeCqSocialModerationDashboardApiModerationDashboardSocialInfo');
goog.require('API.Client.comAdobeCqSocialModerationDashboardApiUserDetailsSocialComponenInfo');
goog.require('API.Client.comAdobeCqSocialModerationDashboardInternalImplFilterGroupSociInfo');
goog.require('API.Client.comAdobeCqSocialNotificationsImplMentionsRouterInfo');
goog.require('API.Client.comAdobeCqSocialNotificationsImplNotificationManagerImplInfo');
goog.require('API.Client.comAdobeCqSocialNotificationsImplNotificationsRouterInfo');
goog.require('API.Client.comAdobeCqSocialQnaClientEndpointsImplQnaForumOperationsServicInfo');
goog.require('API.Client.comAdobeCqSocialReportingAnalyticsServicesImplAnalyticsReportIInfo');
goog.require('API.Client.comAdobeCqSocialReportingAnalyticsServicesImplAnalyticsReportMInfo');
goog.require('API.Client.comAdobeCqSocialReportingAnalyticsServicesImplSiteTrendReportSInfo');
goog.require('API.Client.comAdobeCqSocialReviewClientEndpointsImplReviewOperationsServiInfo');
goog.require('API.Client.comAdobeCqSocialScfCoreOperationsImplSocialOperationsServletInfo');
goog.require('API.Client.comAdobeCqSocialScfEndpointsImplDefaultSocialGetServletInfo');
goog.require('API.Client.comAdobeCqSocialScoringImplScoringEventListenerInfo');
goog.require('API.Client.comAdobeCqSocialServiceusersInternalImplServiceUserWrapperImplInfo');
goog.require('API.Client.comAdobeCqSocialSiteEndpointsImplSiteOperationServiceInfo');
goog.require('API.Client.comAdobeCqSocialSiteImplAnalyticsComponentConfigurationServiceImInfo');
goog.require('API.Client.comAdobeCqSocialSiteImplSiteConfiguratorImplInfo');
goog.require('API.Client.comAdobeCqSocialSrpImplSocialSolrConnectorInfo');
goog.require('API.Client.comAdobeCqSocialSyncImplDiffChangesObserverInfo');
goog.require('API.Client.comAdobeCqSocialSyncImplGroupSyncListenerImplInfo');
goog.require('API.Client.comAdobeCqSocialSyncImplPublisherSyncServiceImplInfo');
goog.require('API.Client.comAdobeCqSocialSyncImplUserSyncListenerImplInfo');
goog.require('API.Client.comAdobeCqSocialTranslationImplTranslationServiceConfigManagerInfo');
goog.require('API.Client.comAdobeCqSocialTranslationImplUGCLanguageDetectorInfo');
goog.require('API.Client.comAdobeCqSocialUgcbaseDispatcherImplFlushServiceImplInfo');
goog.require('API.Client.comAdobeCqSocialUgcbaseImplAysncReverseReplicatorImplInfo');
goog.require('API.Client.comAdobeCqSocialUgcbaseImplPublisherConfigurationImplInfo');
goog.require('API.Client.comAdobeCqSocialUgcbaseImplSocialUtilsImplInfo');
goog.require('API.Client.comAdobeCqSocialUgcbaseModerationImplAutoModerationImplInfo');
goog.require('API.Client.comAdobeCqSocialUgcbaseModerationImplSentimentProcessInfo');
goog.require('API.Client.comAdobeCqSocialUgcbaseSecurityImplDefaultAttachmentTypeBlackliInfo');
goog.require('API.Client.comAdobeCqSocialUgcbaseSecurityImplSaferSlingPostValidatorImplInfo');
goog.require('API.Client.comAdobeCqSocialUserEndpointsImplUsersGroupFromPublishServletInfo');
goog.require('API.Client.comAdobeCqSocialUserImplTransportHttpToPublisherInfo');
goog.require('API.Client.comAdobeCqUiWcmCommonsInternalServletsRteRTEFilterServletFactInfo');
goog.require('API.Client.comAdobeCqUpgradesCleanupImplUpgradeContentCleanupInfo');
goog.require('API.Client.comAdobeCqUpgradesCleanupImplUpgradeInstallFolderCleanupInfo');
goog.require('API.Client.comAdobeCqWcmJobsAsyncImplAsyncDeleteConfigProviderServiceInfo');
goog.require('API.Client.comAdobeCqWcmJobsAsyncImplAsyncJobCleanUpTaskInfo');
goog.require('API.Client.comAdobeCqWcmJobsAsyncImplAsyncMoveConfigProviderServiceInfo');
goog.require('API.Client.comAdobeCqWcmJobsAsyncImplAsyncPageMoveConfigProviderServiceInfo');
goog.require('API.Client.comAdobeCqWcmLaunchesImplLaunchesEventHandlerInfo');
goog.require('API.Client.comAdobeCqWcmMobileQrcodeServletQRCodeImageGeneratorInfo');
goog.require('API.Client.comAdobeCqWcmStyleInternalComponentStyleInfoCacheImplInfo');
goog.require('API.Client.comAdobeCqWcmTranslationImplTranslationPlatformConfigurationImplInfo');
goog.require('API.Client.comAdobeFdFpConfigFormsPortalDraftsandSubmissionConfigServiceInfo');
goog.require('API.Client.comAdobeFdFpConfigFormsPortalSchedulerServiceInfo');
goog.require('API.Client.comAdobeFormsCommonServiceImplDefaultDataProviderInfo');
goog.require('API.Client.comAdobeFormsCommonServiceImplFormsCommonConfigurationServiceImpInfo');
goog.require('API.Client.comAdobeFormsCommonServletTempCleanUpTaskInfo');
goog.require('API.Client.comAdobeGraniteAcpPlatformPlatformServletInfo');
goog.require('API.Client.comAdobeGraniteActivitystreamsImplActivityManagerImplInfo');
goog.require('API.Client.comAdobeGraniteAnalyzerBaseSystemStatusServletInfo');
goog.require('API.Client.comAdobeGraniteAnalyzerScriptsCompileAllScriptsCompilerServletInfo');
goog.require('API.Client.comAdobeGraniteApicontrollerFilterResolverHookFactoryInfo');
goog.require('API.Client.comAdobeGraniteAuthCertImplClientCertAuthHandlerInfo');
goog.require('API.Client.comAdobeGraniteAuthImsImplExternalUserIdMappingProviderExtensionInfo');
goog.require('API.Client.comAdobeGraniteAuthImsImplIMSAccessTokenRequestCustomizerImplInfo');
goog.require('API.Client.comAdobeGraniteAuthImsImplIMSInstanceCredentialsValidatorInfo');
goog.require('API.Client.comAdobeGraniteAuthImsImplIMSProviderImplInfo');
goog.require('API.Client.comAdobeGraniteAuthImsImplImsConfigProviderImplInfo');
goog.require('API.Client.comAdobeGraniteAuthImsInfo');
goog.require('API.Client.comAdobeGraniteAuthOauthAccesstokenProviderInfo');
goog.require('API.Client.comAdobeGraniteAuthOauthImplBearerAuthenticationHandlerInfo');
goog.require('API.Client.comAdobeGraniteAuthOauthImplDefaultTokenValidatorImplInfo');
goog.require('API.Client.comAdobeGraniteAuthOauthImplFacebookProviderImplInfo');
goog.require('API.Client.comAdobeGraniteAuthOauthImplGithubProviderImplInfo');
goog.require('API.Client.comAdobeGraniteAuthOauthImplGraniteProviderInfo');
goog.require('API.Client.comAdobeGraniteAuthOauthImplHelperProviderConfigManagerInfo');
goog.require('API.Client.comAdobeGraniteAuthOauthImplHelperProviderConfigManagerInternalInfo');
goog.require('API.Client.comAdobeGraniteAuthOauthImplOAuthAuthenticationHandlerInfo');
goog.require('API.Client.comAdobeGraniteAuthOauthImplTwitterProviderImplInfo');
goog.require('API.Client.comAdobeGraniteAuthOauthProviderInfo');
goog.require('API.Client.comAdobeGraniteAuthRequirementImplDefaultRequirementHandlerInfo');
goog.require('API.Client.comAdobeGraniteAuthSamlSamlAuthenticationHandlerInfo');
goog.require('API.Client.comAdobeGraniteAuthSsoImplSsoAuthenticationHandlerInfo');
goog.require('API.Client.comAdobeGraniteBundlesHcImplCodeCacheHealthCheckInfo');
goog.require('API.Client.comAdobeGraniteBundlesHcImplCrxdeSupportBundleHealthCheckInfo');
goog.require('API.Client.comAdobeGraniteBundlesHcImplDavExBundleHealthCheckInfo');
goog.require('API.Client.comAdobeGraniteBundlesHcImplInactiveBundlesHealthCheckInfo');
goog.require('API.Client.comAdobeGraniteBundlesHcImplJobsHealthCheckInfo');
goog.require('API.Client.comAdobeGraniteBundlesHcImplSlingGetServletHealthCheckInfo');
goog.require('API.Client.comAdobeGraniteBundlesHcImplSlingJavaScriptHandlerHealthCheckInfo');
goog.require('API.Client.comAdobeGraniteBundlesHcImplSlingJspScriptHandlerHealthCheckInfo');
goog.require('API.Client.comAdobeGraniteBundlesHcImplSlingReferrerFilterHealthCheckInfo');
goog.require('API.Client.comAdobeGraniteBundlesHcImplWebDavBundleHealthCheckInfo');
goog.require('API.Client.comAdobeGraniteCommentsInternalCommentReplicationContentFilterFacInfo');
goog.require('API.Client.comAdobeGraniteCompatrouterImplCompatSwitchingServiceImplInfo');
goog.require('API.Client.comAdobeGraniteCompatrouterImplRoutingConfigInfo');
goog.require('API.Client.comAdobeGraniteCompatrouterImplSwitchMappingConfigInfo');
goog.require('API.Client.comAdobeGraniteConfImplRuntimeAwareConfigurationResourceResolvingInfo');
goog.require('API.Client.comAdobeGraniteContexthubImplContextHubImplInfo');
goog.require('API.Client.comAdobeGraniteCorsImplCORSPolicyImplInfo');
goog.require('API.Client.comAdobeGraniteCsrfImplCSRFFilterInfo');
goog.require('API.Client.comAdobeGraniteCsrfImplCSRFServletInfo');
goog.require('API.Client.comAdobeGraniteDistributionCoreImplCryptoDistributionTransportSeInfo');
goog.require('API.Client.comAdobeGraniteDistributionCoreImplDiffDiffChangesObserverInfo');
goog.require('API.Client.comAdobeGraniteDistributionCoreImplDiffDiffEventListenerInfo');
goog.require('API.Client.comAdobeGraniteDistributionCoreImplDistributionToReplicationEvenInfo');
goog.require('API.Client.comAdobeGraniteDistributionCoreImplReplicationAdaptersReplicatInfo');
goog.require('API.Client.comAdobeGraniteDistributionCoreImplReplicationDistributionTransInfo');
goog.require('API.Client.comAdobeGraniteDistributionCoreImplTransportAccessTokenDistribuInfo');
goog.require('API.Client.comAdobeGraniteFragsImplCheckHttpHeaderFlagInfo');
goog.require('API.Client.comAdobeGraniteFragsImplRandomFeatureInfo');
goog.require('API.Client.comAdobeGraniteHttpcacheFileFileCacheStoreInfo');
goog.require('API.Client.comAdobeGraniteHttpcacheImplOuterCacheFilterInfo');
goog.require('API.Client.comAdobeGraniteI18nImplBundlePseudoTranslationsInfo');
goog.require('API.Client.comAdobeGraniteI18nImplPreferencesLocaleResolverServiceInfo');
goog.require('API.Client.comAdobeGraniteInfocollectorInfoCollectorInfo');
goog.require('API.Client.comAdobeGraniteJettySslInternalGraniteSslConnectorFactoryInfo');
goog.require('API.Client.comAdobeGraniteLicenseImplLicenseCheckFilterInfo');
goog.require('API.Client.comAdobeGraniteLoggingImplLogAnalyserImplInfo');
goog.require('API.Client.comAdobeGraniteLoggingImplLogErrorHealthCheckInfo');
goog.require('API.Client.comAdobeGraniteMaintenanceCrxImplDataStoreGarbageCollectionTaskInfo');
goog.require('API.Client.comAdobeGraniteMaintenanceCrxImplLuceneBinariesCleanupTaskInfo');
goog.require('API.Client.comAdobeGraniteMaintenanceCrxImplRevisionCleanupTaskInfo');
goog.require('API.Client.comAdobeGraniteMonitoringImplScriptConfigImplInfo');
goog.require('API.Client.comAdobeGraniteOauthServerAuthImplOAuth2ServerAuthenticationHanInfo');
goog.require('API.Client.comAdobeGraniteOauthServerImplAccessTokenCleanupTaskInfo');
goog.require('API.Client.comAdobeGraniteOauthServerImplOAuth2ClientRevocationServletInfo');
goog.require('API.Client.comAdobeGraniteOauthServerImplOAuth2RevocationEndpointServletInfo');
goog.require('API.Client.comAdobeGraniteOauthServerImplOAuth2TokenEndpointServletInfo');
goog.require('API.Client.comAdobeGraniteOauthServerImplOAuth2TokenRevocationServletInfo');
goog.require('API.Client.comAdobeGraniteOffloadingImplOffloadingConfiguratorInfo');
goog.require('API.Client.comAdobeGraniteOffloadingImplOffloadingJobClonerInfo');
goog.require('API.Client.comAdobeGraniteOffloadingImplOffloadingJobOffloaderInfo');
goog.require('API.Client.comAdobeGraniteOffloadingImplTransporterOffloadingAgentManagerInfo');
goog.require('API.Client.comAdobeGraniteOffloadingImplTransporterOffloadingDefaultTranspoInfo');
goog.require('API.Client.comAdobeGraniteOmnisearchImplCoreOmniSearchServiceImplInfo');
goog.require('API.Client.comAdobeGraniteOptoutImplOptOutServiceImplInfo');
goog.require('API.Client.comAdobeGraniteQueriesImplHcAsyncIndexHealthCheckInfo');
goog.require('API.Client.comAdobeGraniteQueriesImplHcLargeIndexHealthCheckInfo');
goog.require('API.Client.comAdobeGraniteQueriesImplHcQueriesStatusHealthCheckInfo');
goog.require('API.Client.comAdobeGraniteQueriesImplHcQueryHealthCheckMetricsInfo');
goog.require('API.Client.comAdobeGraniteQueriesImplHcQueryLimitsHealthCheckInfo');
goog.require('API.Client.comAdobeGraniteReplicationHcImplReplicationQueueHealthCheckInfo');
goog.require('API.Client.comAdobeGraniteReplicationHcImplReplicationTransportUsersHealthCInfo');
goog.require('API.Client.comAdobeGraniteRepositoryHcImplAuthorizableNodeNameHealthCheckInfo');
goog.require('API.Client.comAdobeGraniteRepositoryHcImplContentSlingSlingContentHealthCInfo');
goog.require('API.Client.comAdobeGraniteRepositoryHcImplContinuousRGCHealthCheckInfo');
goog.require('API.Client.comAdobeGraniteRepositoryHcImplDefaultAccessUserProfileHealthCheInfo');
goog.require('API.Client.comAdobeGraniteRepositoryHcImplDefaultLoginsHealthCheckInfo');
goog.require('API.Client.comAdobeGraniteRepositoryHcImplDiskSpaceHealthCheckInfo');
goog.require('API.Client.comAdobeGraniteRepositoryHcImplObservationQueueLengthHealthCheckInfo');
goog.require('API.Client.comAdobeGraniteRepositoryImplCommitStatsConfigInfo');
goog.require('API.Client.comAdobeGraniteRepositoryServiceUserConfigurationInfo');
goog.require('API.Client.comAdobeGraniteRequestsLoggingImplHcRequestsStatusHealthCheckImInfo');
goog.require('API.Client.comAdobeGraniteResourcestatusImplCompositeStatusTypeInfo');
goog.require('API.Client.comAdobeGraniteResourcestatusImplStatusResourceProviderImplInfo');
goog.require('API.Client.comAdobeGraniteRestAssetsImplAssetContentDispositionFilterInfo');
goog.require('API.Client.comAdobeGraniteRestImplApiEndpointResourceProviderFactoryImplInfo');
goog.require('API.Client.comAdobeGraniteRestImplServletDefaultGETServletInfo');
goog.require('API.Client.comAdobeGraniteSecurityUserUiInternalServletsSSLConfigurationSInfo');
goog.require('API.Client.comAdobeGraniteSecurityUserUserPropertiesServiceInfo');
goog.require('API.Client.comAdobeGraniteSocialgraphImplSocialGraphFactoryImplInfo');
goog.require('API.Client.comAdobeGraniteSystemMonitoringImplSystemStatsMBeanImplInfo');
goog.require('API.Client.comAdobeGraniteTaskmanagementImplJcrTaskAdapterFactoryInfo');
goog.require('API.Client.comAdobeGraniteTaskmanagementImplJcrTaskArchiveServiceInfo');
goog.require('API.Client.comAdobeGraniteTaskmanagementImplPurgeTaskPurgeMaintenanceTaskInfo');
goog.require('API.Client.comAdobeGraniteTaskmanagementImplServiceTaskManagerAdapterFactorInfo');
goog.require('API.Client.comAdobeGraniteThreaddumpThreadDumpCollectorInfo');
goog.require('API.Client.comAdobeGraniteTranslationConnectorMsftCoreImplMicrosoftTranslInfo');
goog.require('API.Client.comAdobeGraniteTranslationCoreImplTranslationManagerImplInfo');
goog.require('API.Client.comAdobeGraniteUiClientlibsImplHtmlLibraryManagerImplInfo');
goog.require('API.Client.comAdobeGraniteWorkflowConsoleFragsWorkflowWithdrawFeatureInfo');
goog.require('API.Client.comAdobeGraniteWorkflowConsolePublishWorkflowPublishEventServiceInfo');
goog.require('API.Client.comAdobeGraniteWorkflowCoreJcrWorkflowBucketManagerInfo');
goog.require('API.Client.comAdobeGraniteWorkflowCoreJobExternalProcessJobHandlerInfo');
goog.require('API.Client.comAdobeGraniteWorkflowCoreJobJobHandlerInfo');
goog.require('API.Client.comAdobeGraniteWorkflowCoreOffloadingWorkflowOffloadingJobConsumInfo');
goog.require('API.Client.comAdobeGraniteWorkflowCorePayloadMapCacheInfo');
goog.require('API.Client.comAdobeGraniteWorkflowCorePayloadmapPayloadMoveListenerInfo');
goog.require('API.Client.comAdobeGraniteWorkflowCoreWorkflowConfigInfo');
goog.require('API.Client.comAdobeGraniteWorkflowCoreWorkflowSessionFactoryInfo');
goog.require('API.Client.comAdobeGraniteWorkflowPurgeSchedulerInfo');
goog.require('API.Client.comAdobeOctopusNcommBootstrapInfo');
goog.require('API.Client.comAdobeSocialIntegrationsLivefyreUserPingforpullImplPingPullSInfo');
goog.require('API.Client.comAdobeXmpWorkerFilesNcommXMPFilesNCommInfo');
goog.require('API.Client.comDayCommonsDatasourceJdbcpoolJdbcPoolServiceInfo');
goog.require('API.Client.comDayCommonsHttpclientInfo');
goog.require('API.Client.comDayCqAnalyticsImplStorePropertiesChangeListenerInfo');
goog.require('API.Client.comDayCqAnalyticsSitecatalystImplExporterClassificationsExporteInfo');
goog.require('API.Client.comDayCqAnalyticsSitecatalystImplImporterReportImporterInfo');
goog.require('API.Client.comDayCqAnalyticsSitecatalystImplSitecatalystAdapterFactoryInfo');
goog.require('API.Client.comDayCqAnalyticsSitecatalystImplSitecatalystHttpClientImplInfo');
goog.require('API.Client.comDayCqAnalyticsTestandtargetImplAccountOptionsUpdaterInfo');
goog.require('API.Client.comDayCqAnalyticsTestandtargetImplDeleteAuthorActivityListenerInfo');
goog.require('API.Client.comDayCqAnalyticsTestandtargetImplPushAuthorCampaignPageListenerInfo');
goog.require('API.Client.comDayCqAnalyticsTestandtargetImplSegmentImporterInfo');
goog.require('API.Client.comDayCqAnalyticsTestandtargetImplServiceWebServiceImplInfo');
goog.require('API.Client.comDayCqAnalyticsTestandtargetImplServletsAdminServerServletInfo');
goog.require('API.Client.comDayCqAnalyticsTestandtargetImplTestandtargetHttpClientImplInfo');
goog.require('API.Client.comDayCqAuthImplCugCugSupportImplInfo');
goog.require('API.Client.comDayCqAuthImplLoginSelectorHandlerInfo');
goog.require('API.Client.comDayCqCommonsImplExternalizerImplInfo');
goog.require('API.Client.comDayCqCommonsServletsRootMappingServletInfo');
goog.require('API.Client.comDayCqCompatCodeupgradeImplCodeUpgradeExecutionConditionCheckeInfo');
goog.require('API.Client.comDayCqCompatCodeupgradeImplUpgradeTaskIgnoreListInfo');
goog.require('API.Client.comDayCqCompatCodeupgradeImplVersionRangeTaskIgnorelistInfo');
goog.require('API.Client.comDayCqContentsyncImplContentSyncManagerImplInfo');
goog.require('API.Client.comDayCqDamCommonsHandlerStandardImageHandlerInfo');
goog.require('API.Client.comDayCqDamCommonsMetadataXmpFilterBlackWhiteInfo');
goog.require('API.Client.comDayCqDamCommonsUtilImplAssetCacheImplInfo');
goog.require('API.Client.comDayCqDamCoreImplAnnotationPdfAnnotationPdfConfigInfo');
goog.require('API.Client.comDayCqDamCoreImplAssetMoveListenerInfo');
goog.require('API.Client.comDayCqDamCoreImplAssethomeAssetHomePageConfigurationInfo');
goog.require('API.Client.comDayCqDamCoreImplAssetlinkshareAdhocAssetShareProxyServletInfo');
goog.require('API.Client.comDayCqDamCoreImplCacheCQBufferedImageCacheInfo');
goog.require('API.Client.comDayCqDamCoreImplDamChangeEventListenerInfo');
goog.require('API.Client.comDayCqDamCoreImplDamEventPurgeServiceInfo');
goog.require('API.Client.comDayCqDamCoreImplDamEventRecorderImplInfo');
goog.require('API.Client.comDayCqDamCoreImplEventDamEventAuditListenerInfo');
goog.require('API.Client.comDayCqDamCoreImplExpiryNotificationJobImplInfo');
goog.require('API.Client.comDayCqDamCoreImplFoldermetadataschemaFolderMetadataSchemaFeatInfo');
goog.require('API.Client.comDayCqDamCoreImplGfxCommonsGfxRendererInfo');
goog.require('API.Client.comDayCqDamCoreImplHandlerEPSFormatHandlerInfo');
goog.require('API.Client.comDayCqDamCoreImplHandlerIndesignFormatHandlerInfo');
goog.require('API.Client.comDayCqDamCoreImplHandlerJpegHandlerInfo');
goog.require('API.Client.comDayCqDamCoreImplHandlerXmpNCommXMPHandlerInfo');
goog.require('API.Client.comDayCqDamCoreImplJmxAssetIndexUpdateMonitorInfo');
goog.require('API.Client.comDayCqDamCoreImplJmxAssetMigrationMBeanImplInfo');
goog.require('API.Client.comDayCqDamCoreImplJmxAssetUpdateMonitorImplInfo');
goog.require('API.Client.comDayCqDamCoreImplJobsMetadataexportAsyncMetadataExportConfigInfo');
goog.require('API.Client.comDayCqDamCoreImplJobsMetadataimportAsyncMetadataImportConfigInfo');
goog.require('API.Client.comDayCqDamCoreImplLightboxLightboxServletInfo');
goog.require('API.Client.comDayCqDamCoreImplMetadataEditorSelectComponentHandlerInfo');
goog.require('API.Client.comDayCqDamCoreImplMimeTypeAssetUploadRestrictionHelperInfo');
goog.require('API.Client.comDayCqDamCoreImplMimeTypeDamMimeTypeServiceImplInfo');
goog.require('API.Client.comDayCqDamCoreImplMissingMetadataNotificationJobInfo');
goog.require('API.Client.comDayCqDamCoreImplProcessSendTransientWorkflowCompletedEmailPrInfo');
goog.require('API.Client.comDayCqDamCoreImplProcessTextExtractionProcessInfo');
goog.require('API.Client.comDayCqDamCoreImplRenditionMakerImplInfo');
goog.require('API.Client.comDayCqDamCoreImplReportsReportExportServiceInfo');
goog.require('API.Client.comDayCqDamCoreImplReportsReportPurgeServiceInfo');
goog.require('API.Client.comDayCqDamCoreImplServletAssetDownloadServletInfo');
goog.require('API.Client.comDayCqDamCoreImplServletAssetStatusServletInfo');
goog.require('API.Client.comDayCqDamCoreImplServletAssetXMPSearchServletInfo');
goog.require('API.Client.comDayCqDamCoreImplServletBatchMetadataServletInfo');
goog.require('API.Client.comDayCqDamCoreImplServletBinaryProviderServletInfo');
goog.require('API.Client.comDayCqDamCoreImplServletCollectionServletInfo');
goog.require('API.Client.comDayCqDamCoreImplServletCollectionsServletInfo');
goog.require('API.Client.comDayCqDamCoreImplServletCompanionServletInfo');
goog.require('API.Client.comDayCqDamCoreImplServletCreateAssetServletInfo');
goog.require('API.Client.comDayCqDamCoreImplServletDamContentDispositionFilterInfo');
goog.require('API.Client.comDayCqDamCoreImplServletGuidLookupFilterInfo');
goog.require('API.Client.comDayCqDamCoreImplServletHealthCheckServletInfo');
goog.require('API.Client.comDayCqDamCoreImplServletMetadataGetServletInfo');
goog.require('API.Client.comDayCqDamCoreImplServletMultipleLicenseAcceptServletInfo');
goog.require('API.Client.comDayCqDamCoreImplServletResourceCollectionServletInfo');
goog.require('API.Client.comDayCqDamCoreImplUiPreviewFolderPreviewUpdaterImplInfo');
goog.require('API.Client.comDayCqDamCoreImplUnzipUnzipConfigInfo');
goog.require('API.Client.comDayCqDamCoreProcessExifToolExtractMetadataProcessInfo');
goog.require('API.Client.comDayCqDamCoreProcessExtractMetadataProcessInfo');
goog.require('API.Client.comDayCqDamCoreProcessMetadataProcessorProcessInfo');
goog.require('API.Client.comDayCqDamHandlerFfmpegLocatorImplInfo');
goog.require('API.Client.comDayCqDamHandlerGibsonFontmanagerImplFontManagerServiceImplInfo');
goog.require('API.Client.comDayCqDamHandlerStandardPdfPdfHandlerInfo');
goog.require('API.Client.comDayCqDamHandlerStandardPsPostScriptHandlerInfo');
goog.require('API.Client.comDayCqDamHandlerStandardPsdPsdHandlerInfo');
goog.require('API.Client.comDayCqDamIdsImplIDSJobProcessorInfo');
goog.require('API.Client.comDayCqDamIdsImplIDSPoolManagerImplInfo');
goog.require('API.Client.comDayCqDamInddImplHandlerIndesignXMPHandlerInfo');
goog.require('API.Client.comDayCqDamInddImplServletSnippetCreationServletInfo');
goog.require('API.Client.comDayCqDamInddProcessINDDMediaExtractProcessInfo');
goog.require('API.Client.comDayCqDamPerformanceInternalAssetPerformanceDataHandlerImplInfo');
goog.require('API.Client.comDayCqDamPerformanceInternalAssetPerformanceReportSyncJobInfo');
goog.require('API.Client.comDayCqDamPimImplSourcingUploadProcessProductAssetsUploadProInfo');
goog.require('API.Client.comDayCqDamS7damCommonAnalyticsImplS7damDynamicMediaConfigEvenInfo');
goog.require('API.Client.comDayCqDamS7damCommonAnalyticsImplSiteCatalystReportRunnerInfo');
goog.require('API.Client.comDayCqDamS7damCommonPostServletsSetCreateHandlerInfo');
goog.require('API.Client.comDayCqDamS7damCommonPostServletsSetModifyHandlerInfo');
goog.require('API.Client.comDayCqDamS7damCommonProcessVideoThumbnailDownloadProcessInfo');
goog.require('API.Client.comDayCqDamS7damCommonS7damDamChangeEventListenerInfo');
goog.require('API.Client.comDayCqDamS7damCommonServletsS7damProductInfoServletInfo');
goog.require('API.Client.comDayCqDamS7damCommonVideoImplVideoProxyClientServiceImplInfo');
goog.require('API.Client.comDayCqDamScene7ImplScene7APIClientImplInfo');
goog.require('API.Client.comDayCqDamScene7ImplScene7AssetMimeTypeServiceImplInfo');
goog.require('API.Client.comDayCqDamScene7ImplScene7ConfigurationEventListenerInfo');
goog.require('API.Client.comDayCqDamScene7ImplScene7DamChangeEventListenerInfo');
goog.require('API.Client.comDayCqDamScene7ImplScene7FlashTemplatesServiceImplInfo');
goog.require('API.Client.comDayCqDamScene7ImplScene7UploadServiceImplInfo');
goog.require('API.Client.comDayCqDamStockIntegrationImplCacheStockCacheConfigurationSerInfo');
goog.require('API.Client.comDayCqDamStockIntegrationImplConfigurationStockConfigurationInfo');
goog.require('API.Client.comDayCqDamVideoImplServletVideoTestServletInfo');
goog.require('API.Client.comDayCqExtwidgetServletsImageSpriteServletInfo');
goog.require('API.Client.comDayCqImageInternalFontFontHelperInfo');
goog.require('API.Client.comDayCqJcrclustersupportClusterStartLevelControllerInfo');
goog.require('API.Client.comDayCqMailerDefaultMailServiceInfo');
goog.require('API.Client.comDayCqMailerImplCqMailingServiceInfo');
goog.require('API.Client.comDayCqMailerImplEmailCqEmailTemplateFactoryInfo');
goog.require('API.Client.comDayCqMailerImplEmailCqRetrieverTemplateFactoryInfo');
goog.require('API.Client.comDayCqMcmCampaignImplIntegrationConfigImplInfo');
goog.require('API.Client.comDayCqMcmCampaignImporterPersonalizedTextHandlerFactoryInfo');
goog.require('API.Client.comDayCqMcmCoreNewsletterNewsletterEmailServiceImplInfo');
goog.require('API.Client.comDayCqMcmImplMCMConfigurationInfo');
goog.require('API.Client.comDayCqMcmLandingpageParserTaghandlersCtaClickThroughComponenInfo');
goog.require('API.Client.comDayCqMcmLandingpageParserTaghandlersCtaGraphicalClickThrougInfo');
goog.require('API.Client.comDayCqMcmLandingpageParserTaghandlersCtaLeadFormCTAComponentInfo');
goog.require('API.Client.comDayCqMcmLandingpageParserTaghandlersMboxMBoxExperienceTagHaInfo');
goog.require('API.Client.comDayCqMcmLandingpageParserTaghandlersMboxTargetComponentTagHInfo');
goog.require('API.Client.comDayCqNotificationImplNotificationServiceImplInfo');
goog.require('API.Client.comDayCqPersonalizationImplServletsTargetingConfigurationServletInfo');
goog.require('API.Client.comDayCqPollingImporterImplManagedPollConfigImplInfo');
goog.require('API.Client.comDayCqPollingImporterImplManagedPollingImporterImplInfo');
goog.require('API.Client.comDayCqPollingImporterImplPollingImporterImplInfo');
goog.require('API.Client.comDayCqReplicationAuditReplicationEventListenerInfo');
goog.require('API.Client.comDayCqReplicationContentStaticContentBuilderInfo');
goog.require('API.Client.comDayCqReplicationImplAgentManagerImplInfo');
goog.require('API.Client.comDayCqReplicationImplContentDurboBinaryLessContentBuilderInfo');
goog.require('API.Client.comDayCqReplicationImplContentDurboDurboImportConfigurationProvInfo');
goog.require('API.Client.comDayCqReplicationImplReplicationContentFactoryProviderImplInfo');
goog.require('API.Client.comDayCqReplicationImplReplicationReceiverImplInfo');
goog.require('API.Client.comDayCqReplicationImplReplicatorImplInfo');
goog.require('API.Client.comDayCqReplicationImplReverseReplicatorInfo');
goog.require('API.Client.comDayCqReplicationImplTransportBinaryLessTransportHandlerInfo');
goog.require('API.Client.comDayCqReplicationImplTransportHttpInfo');
goog.require('API.Client.comDayCqReportingImplCacheCacheImplInfo');
goog.require('API.Client.comDayCqReportingImplConfigServiceImplInfo');
goog.require('API.Client.comDayCqReportingImplRLogAnalyzerInfo');
goog.require('API.Client.comDayCqRewriterLinkcheckerImplLinkCheckerImplInfo');
goog.require('API.Client.comDayCqRewriterLinkcheckerImplLinkCheckerTaskInfo');
goog.require('API.Client.comDayCqRewriterLinkcheckerImplLinkCheckerTransformerFactoryInfo');
goog.require('API.Client.comDayCqRewriterLinkcheckerImplLinkInfoStorageImplInfo');
goog.require('API.Client.comDayCqRewriterProcessorImplHtmlParserFactoryInfo');
goog.require('API.Client.comDayCqSearchImplBuilderQueryBuilderImplInfo');
goog.require('API.Client.comDayCqSearchSuggestImplSuggestionIndexManagerImplInfo');
goog.require('API.Client.comDayCqSearchpromoteImplPublishSearchPromoteConfigHandlerInfo');
goog.require('API.Client.comDayCqSearchpromoteImplSearchPromoteServiceImplInfo');
goog.require('API.Client.comDayCqSecurityACLSetupInfo');
goog.require('API.Client.comDayCqStatisticsImplStatisticsServiceImplInfo');
goog.require('API.Client.comDayCqTaggingImplJcrTagManagerFactoryImplInfo');
goog.require('API.Client.comDayCqTaggingImplSearchTagPredicateEvaluatorInfo');
goog.require('API.Client.comDayCqTaggingImplTagGarbageCollectorInfo');
goog.require('API.Client.comDayCqWcmContentsyncImplHandlerPagesUpdateHandlerInfo');
goog.require('API.Client.comDayCqWcmContentsyncImplRewriterPathRewriterTransformerFactorInfo');
goog.require('API.Client.comDayCqWcmCoreImplAuthoringUIModeServiceImplInfo');
goog.require('API.Client.comDayCqWcmCoreImplCommandsWCMCommandServletInfo');
goog.require('API.Client.comDayCqWcmCoreImplDevicedetectionDeviceIdentificationModeImplInfo');
goog.require('API.Client.comDayCqWcmCoreImplEventPageEventAuditListenerInfo');
goog.require('API.Client.comDayCqWcmCoreImplEventPagePostProcessorInfo');
goog.require('API.Client.comDayCqWcmCoreImplEventRepositoryChangeEventListenerInfo');
goog.require('API.Client.comDayCqWcmCoreImplEventTemplatePostProcessorInfo');
goog.require('API.Client.comDayCqWcmCoreImplLanguageManagerImplInfo');
goog.require('API.Client.comDayCqWcmCoreImplLinkCheckerConfigurationFactoryImplInfo');
goog.require('API.Client.comDayCqWcmCoreImplPagePageInfoAggregatorImplInfo');
goog.require('API.Client.comDayCqWcmCoreImplPagePageManagerFactoryImplInfo');
goog.require('API.Client.comDayCqWcmCoreImplReferencesContentContentReferenceConfigInfo');
goog.require('API.Client.comDayCqWcmCoreImplServletsContentfinderAssetViewHandlerInfo');
goog.require('API.Client.comDayCqWcmCoreImplServletsContentfinderConnectorConnectorVieInfo');
goog.require('API.Client.comDayCqWcmCoreImplServletsContentfinderPageViewHandlerInfo');
goog.require('API.Client.comDayCqWcmCoreImplServletsFindReplaceServletInfo');
goog.require('API.Client.comDayCqWcmCoreImplServletsReferenceSearchServletInfo');
goog.require('API.Client.comDayCqWcmCoreImplServletsThumbnailServletInfo');
goog.require('API.Client.comDayCqWcmCoreImplUtilsDefaultPageNameValidatorInfo');
goog.require('API.Client.comDayCqWcmCoreImplVariantsPageVariantsProviderImplInfo');
goog.require('API.Client.comDayCqWcmCoreImplVersionManagerImplInfo');
goog.require('API.Client.comDayCqWcmCoreImplVersionPurgeTaskInfo');
goog.require('API.Client.comDayCqWcmCoreImplWCMDebugFilterInfo');
goog.require('API.Client.comDayCqWcmCoreImplWCMDeveloperModeFilterInfo');
goog.require('API.Client.comDayCqWcmCoreImplWarpTimeWarpFilterInfo');
goog.require('API.Client.comDayCqWcmCoreMvtMVTStatisticsImplInfo');
goog.require('API.Client.comDayCqWcmCoreStatsPageViewStatisticsImplInfo');
goog.require('API.Client.comDayCqWcmCoreWCMRequestFilterInfo');
goog.require('API.Client.comDayCqWcmDesignimporterDesignPackageImporterInfo');
goog.require('API.Client.comDayCqWcmDesignimporterImplCanvasBuilderImplInfo');
goog.require('API.Client.comDayCqWcmDesignimporterImplCanvasPageDeleteHandlerInfo');
goog.require('API.Client.comDayCqWcmDesignimporterImplEntryPreprocessorImplInfo');
goog.require('API.Client.comDayCqWcmDesignimporterImplMobileCanvasBuilderImplInfo');
goog.require('API.Client.comDayCqWcmDesignimporterParserTaghandlersFactoryCanvasComponeInfo');
goog.require('API.Client.comDayCqWcmDesignimporterParserTaghandlersFactoryDefaultComponInfo');
goog.require('API.Client.comDayCqWcmDesignimporterParserTaghandlersFactoryDefaultTagHanInfo');
goog.require('API.Client.comDayCqWcmDesignimporterParserTaghandlersFactoryHeadTagHandleInfo');
goog.require('API.Client.comDayCqWcmDesignimporterParserTaghandlersFactoryIFrameTagHandInfo');
goog.require('API.Client.comDayCqWcmDesignimporterParserTaghandlersFactoryImageComponenInfo');
goog.require('API.Client.comDayCqWcmDesignimporterParserTaghandlersFactoryImgTagHandlerInfo');
goog.require('API.Client.comDayCqWcmDesignimporterParserTaghandlersFactoryInlineScriptTInfo');
goog.require('API.Client.comDayCqWcmDesignimporterParserTaghandlersFactoryLinkTagHandleInfo');
goog.require('API.Client.comDayCqWcmDesignimporterParserTaghandlersFactoryMetaTagHandleInfo');
goog.require('API.Client.comDayCqWcmDesignimporterParserTaghandlersFactoryNonScriptTagHInfo');
goog.require('API.Client.comDayCqWcmDesignimporterParserTaghandlersFactoryParsysComponeInfo');
goog.require('API.Client.comDayCqWcmDesignimporterParserTaghandlersFactoryScriptTagHandInfo');
goog.require('API.Client.comDayCqWcmDesignimporterParserTaghandlersFactoryStyleTagHandlInfo');
goog.require('API.Client.comDayCqWcmDesignimporterParserTaghandlersFactoryTextComponentInfo');
goog.require('API.Client.comDayCqWcmDesignimporterParserTaghandlersFactoryTitleComponenInfo');
goog.require('API.Client.comDayCqWcmDesignimporterParserTaghandlersFactoryTitleTagHandlInfo');
goog.require('API.Client.comDayCqWcmFoundationFormsImplFormChooserServletInfo');
goog.require('API.Client.comDayCqWcmFoundationFormsImplFormParagraphPostProcessorInfo');
goog.require('API.Client.comDayCqWcmFoundationFormsImplFormsHandlingServletInfo');
goog.require('API.Client.comDayCqWcmFoundationFormsImplMailServletInfo');
goog.require('API.Client.comDayCqWcmFoundationImplAdaptiveImageComponentServletInfo');
goog.require('API.Client.comDayCqWcmFoundationImplHTTPAuthHandlerInfo');
goog.require('API.Client.comDayCqWcmFoundationImplPageImpressionsTrackerInfo');
goog.require('API.Client.comDayCqWcmFoundationImplPageRedirectServletInfo');
goog.require('API.Client.comDayCqWcmFoundationSecurityImplDefaultAttachmentTypeBlacklistInfo');
goog.require('API.Client.comDayCqWcmFoundationSecurityImplSaferSlingPostValidatorImplInfo');
goog.require('API.Client.comDayCqWcmMobileCoreImplDeviceDeviceInfoTransformerFactoryInfo');
goog.require('API.Client.comDayCqWcmMobileCoreImplRedirectRedirectFilterInfo');
goog.require('API.Client.comDayCqWcmMsmImplActionsContentCopyActionFactoryInfo');
goog.require('API.Client.comDayCqWcmMsmImplActionsContentDeleteActionFactoryInfo');
goog.require('API.Client.comDayCqWcmMsmImplActionsContentUpdateActionFactoryInfo');
goog.require('API.Client.comDayCqWcmMsmImplActionsOrderChildrenActionFactoryInfo');
goog.require('API.Client.comDayCqWcmMsmImplActionsPageMoveActionFactoryInfo');
goog.require('API.Client.comDayCqWcmMsmImplActionsReferencesUpdateActionFactoryInfo');
goog.require('API.Client.comDayCqWcmMsmImplActionsVersionCopyActionFactoryInfo');
goog.require('API.Client.comDayCqWcmMsmImplLiveRelationshipManagerImplInfo');
goog.require('API.Client.comDayCqWcmMsmImplRolloutManagerImplInfo');
goog.require('API.Client.comDayCqWcmMsmImplServletsAuditLogServletInfo');
goog.require('API.Client.comDayCqWcmNotificationEmailImplEmailChannelInfo');
goog.require('API.Client.comDayCqWcmNotificationImplNotificationManagerImplInfo');
goog.require('API.Client.comDayCqWcmScriptingImplBVPManagerInfo');
goog.require('API.Client.comDayCqWcmUndoUndoConfigInfo');
goog.require('API.Client.comDayCqWcmWebservicesupportImplReplicationEventListenerInfo');
goog.require('API.Client.comDayCqWcmWorkflowImplWcmWorkflowServiceImplInfo');
goog.require('API.Client.comDayCqWcmWorkflowImplWorkflowPackageInfoProviderInfo');
goog.require('API.Client.comDayCqWidgetImplHtmlLibraryManagerImplInfo');
goog.require('API.Client.comDayCqWidgetImplWidgetExtensionProviderImplInfo');
goog.require('API.Client.comDayCqWorkflowImplEmailEMailNotificationServiceInfo');
goog.require('API.Client.comDayCqWorkflowImplEmailTaskEMailNotificationServiceInfo');
goog.require('API.Client.comDayCrxSecurityTokenImplImplTokenAuthenticationHandlerInfo');
goog.require('API.Client.comDayCrxSecurityTokenImplTokenCleanupTaskInfo');
goog.require('API.Client.guideLocalizationServiceInfo');
goog.require('API.Client.orgApacheAriesJmxFrameworkStateConfigInfo');
goog.require('API.Client.orgApacheFelixEventadminImplEventAdminInfo');
goog.require('API.Client.orgApacheFelixHttpInfo');
goog.require('API.Client.orgApacheFelixHttpSslfilterSslFilterInfo');
goog.require('API.Client.orgApacheFelixJaasConfigurationFactoryInfo');
goog.require('API.Client.orgApacheFelixJaasConfigurationSpiInfo');
goog.require('API.Client.orgApacheFelixScrScrServiceInfo');
goog.require('API.Client.orgApacheFelixSystemreadyImplComponentsCheckInfo');
goog.require('API.Client.orgApacheFelixSystemreadyImplFrameworkStartCheckInfo');
goog.require('API.Client.orgApacheFelixSystemreadyImplServicesCheckInfo');
goog.require('API.Client.orgApacheFelixSystemreadyImplServletSystemAliveServletInfo');
goog.require('API.Client.orgApacheFelixSystemreadyImplServletSystemReadyServletInfo');
goog.require('API.Client.orgApacheFelixSystemreadySystemReadyMonitorInfo');
goog.require('API.Client.orgApacheFelixWebconsoleInternalServletOsgiManagerInfo');
goog.require('API.Client.orgApacheFelixWebconsolePluginsEventInternalPluginServletInfo');
goog.require('API.Client.orgApacheFelixWebconsolePluginsMemoryusageInternalMemoryUsageCoInfo');
goog.require('API.Client.orgApacheHttpProxyconfiguratorInfo');
goog.require('API.Client.orgApacheJackrabbitOakPluginsBlobDatastoreDataStoreTextProviderInfo');
goog.require('API.Client.orgApacheJackrabbitOakPluginsBlobDatastoreFileDataStoreInfo');
goog.require('API.Client.orgApacheJackrabbitOakPluginsDocumentDocumentNodeStoreServiceInfo');
goog.require('API.Client.orgApacheJackrabbitOakPluginsDocumentDocumentNodeStoreServicePreInfo');
goog.require('API.Client.orgApacheJackrabbitOakPluginsDocumentSecondarySecondaryStoreCacInfo');
goog.require('API.Client.orgApacheJackrabbitOakPluginsIndexAsyncIndexerServiceInfo');
goog.require('API.Client.orgApacheJackrabbitOakPluginsIndexLuceneLuceneIndexProviderServInfo');
goog.require('API.Client.orgApacheJackrabbitOakPluginsIndexSolrOsgiEmbeddedSolrServerCoInfo');
goog.require('API.Client.orgApacheJackrabbitOakPluginsIndexSolrOsgiNodeStateSolrServersInfo');
goog.require('API.Client.orgApacheJackrabbitOakPluginsIndexSolrOsgiOakSolrConfigurationInfo');
goog.require('API.Client.orgApacheJackrabbitOakPluginsIndexSolrOsgiRemoteSolrServerConfInfo');
goog.require('API.Client.orgApacheJackrabbitOakPluginsIndexSolrOsgiSolrQueryIndexProvidInfo');
goog.require('API.Client.orgApacheJackrabbitOakPluginsIndexSolrOsgiSolrServerProviderSeInfo');
goog.require('API.Client.orgApacheJackrabbitOakPluginsMetricStatisticsProviderFactoryInfo');
goog.require('API.Client.orgApacheJackrabbitOakPluginsObservationChangeCollectorProviderInfo');
goog.require('API.Client.orgApacheJackrabbitOakQueryQueryEngineSettingsServiceInfo');
goog.require('API.Client.orgApacheJackrabbitOakSecurityAuthenticationAuthenticationConfigInfo');
goog.require('API.Client.orgApacheJackrabbitOakSecurityAuthenticationLdapImplLdapIdentiInfo');
goog.require('API.Client.orgApacheJackrabbitOakSecurityAuthenticationTokenTokenConfiguraInfo');
goog.require('API.Client.orgApacheJackrabbitOakSecurityAuthorizationAuthorizationConfigurInfo');
goog.require('API.Client.orgApacheJackrabbitOakSecurityInternalSecurityProviderRegistratiInfo');
goog.require('API.Client.orgApacheJackrabbitOakSecurityUserRandomAuthorizableNodeNameInfo');
goog.require('API.Client.orgApacheJackrabbitOakSecurityUserUserConfigurationImplInfo');
goog.require('API.Client.orgApacheJackrabbitOakSegmentAzureAzureSegmentStoreServiceInfo');
goog.require('API.Client.orgApacheJackrabbitOakSegmentSegmentNodeStoreFactoryInfo');
goog.require('API.Client.orgApacheJackrabbitOakSegmentSegmentNodeStoreMonitorServiceInfo');
goog.require('API.Client.orgApacheJackrabbitOakSegmentSegmentNodeStoreServiceInfo');
goog.require('API.Client.orgApacheJackrabbitOakSegmentStandbyStoreStandbyStoreServiceInfo');
goog.require('API.Client.orgApacheJackrabbitOakSpiSecurityAuthenticationExternalImplDeInfo');
goog.require('API.Client.orgApacheJackrabbitOakSpiSecurityAuthenticationExternalImplExInfo');
goog.require('API.Client.orgApacheJackrabbitOakSpiSecurityAuthenticationExternalImplPrInfo');
goog.require('API.Client.orgApacheJackrabbitOakSpiSecurityAuthorizationCugImplCugConfiInfo');
goog.require('API.Client.orgApacheJackrabbitOakSpiSecurityAuthorizationCugImplCugExcluInfo');
goog.require('API.Client.orgApacheJackrabbitOakSpiSecurityUserActionDefaultAuthorizableInfo');
goog.require('API.Client.orgApacheJackrabbitVaultPackagingImplPackagingImplInfo');
goog.require('API.Client.orgApacheJackrabbitVaultPackagingRegistryImplFSPackageRegistryInfo');
goog.require('API.Client.orgApacheSlingAuthCoreImplLogoutServletInfo');
goog.require('API.Client.orgApacheSlingCaconfigImplConfigurationBindingsValueProviderInfo');
goog.require('API.Client.orgApacheSlingCaconfigImplConfigurationResolverImplInfo');
goog.require('API.Client.orgApacheSlingCaconfigImplDefDefaultConfigurationInheritanceStraInfo');
goog.require('API.Client.orgApacheSlingCaconfigImplDefDefaultConfigurationPersistenceStraInfo');
goog.require('API.Client.orgApacheSlingCaconfigImplOverrideOsgiConfigurationOverrideProviInfo');
goog.require('API.Client.orgApacheSlingCaconfigImplOverrideSystemPropertyConfigurationOveInfo');
goog.require('API.Client.orgApacheSlingCaconfigManagementImplConfigurationManagementSettiInfo');
goog.require('API.Client.orgApacheSlingCaconfigResourceImplDefDefaultConfigurationResourInfo');
goog.require('API.Client.orgApacheSlingCaconfigResourceImplDefDefaultContextPathStrategyInfo');
goog.require('API.Client.orgApacheSlingCommonsHtmlInternalTagsoupHtmlParserInfo');
goog.require('API.Client.orgApacheSlingCommonsLogLogManagerFactoryConfigInfo');
goog.require('API.Client.orgApacheSlingCommonsLogLogManagerFactoryWriterInfo');
goog.require('API.Client.orgApacheSlingCommonsLogLogManagerInfo');
goog.require('API.Client.orgApacheSlingCommonsMetricsInternalLogReporterInfo');
goog.require('API.Client.orgApacheSlingCommonsMetricsRrd4jImplCodahaleMetricsReporterInfo');
goog.require('API.Client.orgApacheSlingCommonsMimeInternalMimeTypeServiceImplInfo');
goog.require('API.Client.orgApacheSlingCommonsSchedulerImplQuartzSchedulerInfo');
goog.require('API.Client.orgApacheSlingCommonsSchedulerImplSchedulerHealthCheckInfo');
goog.require('API.Client.orgApacheSlingCommonsThreadsImplDefaultThreadPoolFactoryInfo');
goog.require('API.Client.orgApacheSlingDatasourceDataSourceFactoryInfo');
goog.require('API.Client.orgApacheSlingDatasourceJNDIDataSourceFactoryInfo');
goog.require('API.Client.orgApacheSlingDiscoveryOakConfigInfo');
goog.require('API.Client.orgApacheSlingDiscoveryOakSynchronizedClocksHealthCheckInfo');
goog.require('API.Client.orgApacheSlingDistributionAgentImplForwardDistributionAgentFactoInfo');
goog.require('API.Client.orgApacheSlingDistributionAgentImplPrivilegeDistributionRequestAInfo');
goog.require('API.Client.orgApacheSlingDistributionAgentImplQueueDistributionAgentFactoryInfo');
goog.require('API.Client.orgApacheSlingDistributionAgentImplReverseDistributionAgentFactoInfo');
goog.require('API.Client.orgApacheSlingDistributionAgentImplSimpleDistributionAgentFactorInfo');
goog.require('API.Client.orgApacheSlingDistributionAgentImplSyncDistributionAgentFactoryInfo');
goog.require('API.Client.orgApacheSlingDistributionMonitorDistributionQueueHealthCheckInfo');
goog.require('API.Client.orgApacheSlingDistributionPackagingImplExporterAgentDistributioInfo');
goog.require('API.Client.orgApacheSlingDistributionPackagingImplExporterLocalDistributioInfo');
goog.require('API.Client.orgApacheSlingDistributionPackagingImplExporterRemoteDistributiInfo');
goog.require('API.Client.orgApacheSlingDistributionPackagingImplImporterLocalDistributioInfo');
goog.require('API.Client.orgApacheSlingDistributionPackagingImplImporterRemoteDistributiInfo');
goog.require('API.Client.orgApacheSlingDistributionPackagingImplImporterRepositoryDistriInfo');
goog.require('API.Client.orgApacheSlingDistributionResourcesImplDistributionConfigurationInfo');
goog.require('API.Client.orgApacheSlingDistributionResourcesImplDistributionServiceResourInfo');
goog.require('API.Client.orgApacheSlingDistributionSerializationImplDistributionPackageBuInfo');
goog.require('API.Client.orgApacheSlingDistributionSerializationImplVltVaultDistributionInfo');
goog.require('API.Client.orgApacheSlingDistributionTransportImplUserCredentialsDistributiInfo');
goog.require('API.Client.orgApacheSlingDistributionTriggerImplDistributionEventDistributeInfo');
goog.require('API.Client.orgApacheSlingDistributionTriggerImplJcrEventDistributionTriggerInfo');
goog.require('API.Client.orgApacheSlingDistributionTriggerImplPersistedJcrEventDistributiInfo');
goog.require('API.Client.orgApacheSlingDistributionTriggerImplRemoteEventDistributionTrigInfo');
goog.require('API.Client.orgApacheSlingDistributionTriggerImplResourceEventDistributionTrInfo');
goog.require('API.Client.orgApacheSlingDistributionTriggerImplScheduledDistributionTriggeInfo');
goog.require('API.Client.orgApacheSlingEngineImplAuthSlingAuthenticatorInfo');
goog.require('API.Client.orgApacheSlingEngineImplDebugRequestProgressTrackerLogFilterInfo');
goog.require('API.Client.orgApacheSlingEngineImplLogRequestLoggerInfo');
goog.require('API.Client.orgApacheSlingEngineImplLogRequestLoggerServiceInfo');
goog.require('API.Client.orgApacheSlingEngineImplSlingMainServletInfo');
goog.require('API.Client.orgApacheSlingEngineParametersInfo');
goog.require('API.Client.orgApacheSlingEventImplEventingThreadPoolInfo');
goog.require('API.Client.orgApacheSlingEventImplJobsDefaultJobManagerInfo');
goog.require('API.Client.orgApacheSlingEventImplJobsJcrPersistenceHandlerInfo');
goog.require('API.Client.orgApacheSlingEventImplJobsJobConsumerManagerInfo');
goog.require('API.Client.orgApacheSlingEventJobsQueueConfigurationInfo');
goog.require('API.Client.orgApacheSlingExtensionsWebconsolesecurityproviderInternalSlingWInfo');
goog.require('API.Client.orgApacheSlingFeatureflagsFeatureInfo');
goog.require('API.Client.orgApacheSlingFeatureflagsImplConfiguredFeatureInfo');
goog.require('API.Client.orgApacheSlingHapiImplHApiUtilImplInfo');
goog.require('API.Client.orgApacheSlingHcCoreImplCompositeHealthCheckInfo');
goog.require('API.Client.orgApacheSlingHcCoreImplExecutorHealthCheckExecutorImplInfo');
goog.require('API.Client.orgApacheSlingHcCoreImplJmxAttributeHealthCheckInfo');
goog.require('API.Client.orgApacheSlingHcCoreImplScriptableHealthCheckInfo');
goog.require('API.Client.orgApacheSlingHcCoreImplServletHealthCheckExecutorServletInfo');
goog.require('API.Client.orgApacheSlingHcCoreImplServletResultTxtVerboseSerializerInfo');
goog.require('API.Client.orgApacheSlingI18nImplI18NFilterInfo');
goog.require('API.Client.orgApacheSlingI18nImplJcrResourceBundleProviderInfo');
goog.require('API.Client.orgApacheSlingInstallerProviderJcrImplJcrInstallerInfo');
goog.require('API.Client.orgApacheSlingJcrBaseInternalLoginAdminWhitelistFragmentInfo');
goog.require('API.Client.orgApacheSlingJcrBaseInternalLoginAdminWhitelistInfo');
goog.require('API.Client.orgApacheSlingJcrDavexImplServletsSlingDavExServletInfo');
goog.require('API.Client.orgApacheSlingJcrJackrabbitServerJndiRegistrationSupportInfo');
goog.require('API.Client.orgApacheSlingJcrJackrabbitServerRmiRegistrationSupportInfo');
goog.require('API.Client.orgApacheSlingJcrRepoinitImplRepositoryInitializerInfo');
goog.require('API.Client.orgApacheSlingJcrRepoinitRepositoryInitializerInfo');
goog.require('API.Client.orgApacheSlingJcrResourceInternalJcrResourceResolverFactoryImplInfo');
goog.require('API.Client.orgApacheSlingJcrResourceInternalJcrSystemUserValidatorInfo');
goog.require('API.Client.orgApacheSlingJcrResourcesecurityImplResourceAccessGateFactoryInfo');
goog.require('API.Client.orgApacheSlingJcrWebdavImplHandlerDefaultHandlerServiceInfo');
goog.require('API.Client.orgApacheSlingJcrWebdavImplHandlerDirListingExportHandlerServicInfo');
goog.require('API.Client.orgApacheSlingJcrWebdavImplServletsSimpleWebDavServletInfo');
goog.require('API.Client.orgApacheSlingJmxProviderImplJMXResourceProviderInfo');
goog.require('API.Client.orgApacheSlingModelsImplModelAdapterFactoryInfo');
goog.require('API.Client.orgApacheSlingModelsJacksonexporterImplResourceModuleProviderInfo');
goog.require('API.Client.orgApacheSlingResourceInventoryImplResourceInventoryPrinterFactoInfo');
goog.require('API.Client.orgApacheSlingResourcemergerImplMergedResourceProviderFactoryInfo');
goog.require('API.Client.orgApacheSlingResourcemergerPickerOverridingInfo');
goog.require('API.Client.orgApacheSlingScriptingCoreImplScriptCacheImplInfo');
goog.require('API.Client.orgApacheSlingScriptingCoreImplScriptingResourceResolverProviderInfo');
goog.require('API.Client.orgApacheSlingScriptingJavaImplJavaScriptEngineFactoryInfo');
goog.require('API.Client.orgApacheSlingScriptingJavascriptInternalRhinoJavaScriptEngineFaInfo');
goog.require('API.Client.orgApacheSlingScriptingJspJspScriptEngineFactoryInfo');
goog.require('API.Client.orgApacheSlingScriptingSightlyJsImplJsapiSlyBindingsValuesProvInfo');
goog.require('API.Client.orgApacheSlingSecurityImplContentDispositionFilterInfo');
goog.require('API.Client.orgApacheSlingSecurityImplReferrerFilterInfo');
goog.require('API.Client.orgApacheSlingServiceusermappingImplServiceUserMapperImplAmendedInfo');
goog.require('API.Client.orgApacheSlingServiceusermappingImplServiceUserMapperImplInfo');
goog.require('API.Client.orgApacheSlingServletsGetDefaultGetServletInfo');
goog.require('API.Client.orgApacheSlingServletsGetImplVersionVersionInfoServletInfo');
goog.require('API.Client.orgApacheSlingServletsPostImplHelperChunkCleanUpTaskInfo');
goog.require('API.Client.orgApacheSlingServletsPostImplSlingPostServletInfo');
goog.require('API.Client.orgApacheSlingServletsResolverSlingServletResolverInfo');
goog.require('API.Client.orgApacheSlingSettingsImplSlingSettingsServiceImplInfo');
goog.require('API.Client.orgApacheSlingStartupfilterImplStartupFilterImplInfo');
goog.require('API.Client.orgApacheSlingTenantInternalTenantProviderImplInfo');
goog.require('API.Client.orgApacheSlingTracerInternalLogTracerInfo');
goog.require('API.Client.orgApacheSlingXssImplXSSFilterImplInfo');

/**
 * @constructor
 * @param {!angular.$http} $http
 * @param {!Object} $httpParamSerializer
 * @param {!angular.$injector} $injector
 * @struct
 */
API.Client.ConfigmgrApi = function($http, $httpParamSerializer, $injector) {
  /** @private {!string} */
  this.basePath_ = $injector.has('ConfigmgrApiBasePath') ?
                   /** @type {!string} */ ($injector.get('ConfigmgrApiBasePath')) :
                   'http://localhost';

  /** @private {!Object<string, string>} */
  this.defaultHeaders_ = $injector.has('ConfigmgrApiDefaultHeaders') ?
                   /** @type {!Object<string, string>} */ (
                       $injector.get('ConfigmgrApiDefaultHeaders')) :
                   {};

  /** @private {!angular.$http} */
  this.http_ = $http;

  /** @package {!Object} */
  this.httpParamSerializer = $injector.get('$httpParamSerializer');
}
API.Client.ConfigmgrApi.$inject = ['$http', '$httpParamSerializer', '$injector'];

/**
 * 
 * 
 * @param {!boolean=} opt_post 
 * @param {!boolean=} opt_apply 
 * @param {!boolean=} opt_delete 
 * @param {!string=} opt_action 
 * @param {!string=} opt_location 
 * @param {!Array<!string>=} opt_propertylist 
 * @param {!boolean=} opt_showPlaceholder 
 * @param {!number=} opt_maximumCacheEntries 
 * @param {!string=} opt_afScriptingCompatversion 
 * @param {!boolean=} opt_makeFileNameUnique 
 * @param {!boolean=} opt_generatingCompliantData 
 * @param {!angular.$http.Config=} opt_extraHttpRequestParams Extra HTTP parameters to send.
 * @return {!angular.$q.Promise<!API.Client.adaptiveFormAndInteractiveCommunicationWebChannelConfigurationInfo>}
 */
API.Client.ConfigmgrApi.prototype.adaptiveFormAndInteractiveCommunicationWebChannelConfiguration = function(opt_post, opt_apply, opt_delete, opt_action, opt_location, opt_propertylist, opt_showPlaceholder, opt_maximumCacheEntries, opt_afScriptingCompatversion, opt_makeFileNameUnique, opt_generatingCompliantData, opt_extraHttpRequestParams) {
  /** @const {string} */
  var path = this.basePath_ + '/system/console/configMgr/Adaptive Form and Interactive Communication Web Channel Configuration';

  /** @type {!Object} */
  var queryParameters = {};

  /** @type {!Object} */
  var headerParams = angular.extend({}, this.defaultHeaders_);
  if (opt_post !== undefined) {
    queryParameters['post'] = opt_post;
  }

  if (opt_apply !== undefined) {
    queryParameters['apply'] = opt_apply;
  }

  if (opt_delete !== undefined) {
    queryParameters['delete'] = opt_delete;
  }

  if (opt_action !== undefined) {
    queryParameters['action'] = opt_action;
  }

  if (opt_location !== undefined) {
    queryParameters['$location'] = opt_location;
  }

  if (opt_propertylist !== undefined) {
    queryParameters['propertylist'] = opt_propertylist;
  }

  if (opt_showPlaceholder !== undefined) {
    queryParameters['showPlaceholder'] = opt_showPlaceholder;
  }

  if (opt_maximumCacheEntries !== undefined) {
    queryParameters['maximumCacheEntries'] = opt_maximumCacheEntries;
  }

  if (opt_afScriptingCompatversion !== undefined) {
    queryParameters['af.scripting.compatversion'] = opt_afScriptingCompatversion;
  }

  if (opt_makeFileNameUnique !== undefined) {
    queryParameters['makeFileNameUnique'] = opt_makeFileNameUnique;
  }

  if (opt_generatingCompliantData !== undefined) {
    queryParameters['generatingCompliantData'] = opt_generatingCompliantData;
  }

  /** @type {!Object} */
  var httpRequestParams = {
    method: 'POST',
    url: path,
    json: true,
            params: queryParameters,
    headers: headerParams
  };

  if (opt_extraHttpRequestParams) {
    httpRequestParams = angular.extend(httpRequestParams, opt_extraHttpRequestParams);
  }

  return (/** @type {?} */ (this.http_))(httpRequestParams);
}

/**
 * 
 * 
 * @param {!boolean=} opt_post 
 * @param {!boolean=} opt_apply 
 * @param {!boolean=} opt_delete 
 * @param {!string=} opt_action 
 * @param {!string=} opt_location 
 * @param {!Array<!string>=} opt_propertylist 
 * @param {!Array<!string>=} opt_fontList 
 * @param {!angular.$http.Config=} opt_extraHttpRequestParams Extra HTTP parameters to send.
 * @return {!angular.$q.Promise<!API.Client.adaptiveFormAndInteractiveCommunicationWebChannelThemeConfigurInfo>}
 */
API.Client.ConfigmgrApi.prototype.adaptiveFormAndInteractiveCommunicationWebChannelThemeConfigur = function(opt_post, opt_apply, opt_delete, opt_action, opt_location, opt_propertylist, opt_fontList, opt_extraHttpRequestParams) {
  /** @const {string} */
  var path = this.basePath_ + '/system/console/configMgr/Adaptive Form and Interactive Communication Web Channel Theme Configuration';

  /** @type {!Object} */
  var queryParameters = {};

  /** @type {!Object} */
  var headerParams = angular.extend({}, this.defaultHeaders_);
  if (opt_post !== undefined) {
    queryParameters['post'] = opt_post;
  }

  if (opt_apply !== undefined) {
    queryParameters['apply'] = opt_apply;
  }

  if (opt_delete !== undefined) {
    queryParameters['delete'] = opt_delete;
  }

  if (opt_action !== undefined) {
    queryParameters['action'] = opt_action;
  }

  if (opt_location !== undefined) {
    queryParameters['$location'] = opt_location;
  }

  if (opt_propertylist !== undefined) {
    queryParameters['propertylist'] = opt_propertylist;
  }

  if (opt_fontList !== undefined) {
    queryParameters['fontList'] = opt_fontList;
  }

  /** @type {!Object} */
  var httpRequestParams = {
    method: 'POST',
    url: path,
    json: true,
            params: queryParameters,
    headers: headerParams
  };

  if (opt_extraHttpRequestParams) {
    httpRequestParams = angular.extend(httpRequestParams, opt_extraHttpRequestParams);
  }

  return (/** @type {?} */ (this.http_))(httpRequestParams);
}

/**
 * 
 * 
 * @param {!boolean=} opt_post 
 * @param {!boolean=} opt_apply 
 * @param {!boolean=} opt_delete 
 * @param {!string=} opt_action 
 * @param {!string=} opt_location 
 * @param {!Array<!string>=} opt_propertylist 
 * @param {!number=} opt_cqAnalyticsComponentQueryCacheSize 
 * @param {!angular.$http.Config=} opt_extraHttpRequestParams Extra HTTP parameters to send.
 * @return {!angular.$q.Promise<!API.Client.analyticsComponentQueryCacheServiceInfo>}
 */
API.Client.ConfigmgrApi.prototype.analyticsComponentQueryCacheService = function(opt_post, opt_apply, opt_delete, opt_action, opt_location, opt_propertylist, opt_cqAnalyticsComponentQueryCacheSize, opt_extraHttpRequestParams) {
  /** @const {string} */
  var path = this.basePath_ + '/system/console/configMgr/Analytics Component Query Cache Service';

  /** @type {!Object} */
  var queryParameters = {};

  /** @type {!Object} */
  var headerParams = angular.extend({}, this.defaultHeaders_);
  if (opt_post !== undefined) {
    queryParameters['post'] = opt_post;
  }

  if (opt_apply !== undefined) {
    queryParameters['apply'] = opt_apply;
  }

  if (opt_delete !== undefined) {
    queryParameters['delete'] = opt_delete;
  }

  if (opt_action !== undefined) {
    queryParameters['action'] = opt_action;
  }

  if (opt_location !== undefined) {
    queryParameters['$location'] = opt_location;
  }

  if (opt_propertylist !== undefined) {
    queryParameters['propertylist'] = opt_propertylist;
  }

  if (opt_cqAnalyticsComponentQueryCacheSize !== undefined) {
    queryParameters['cq.analytics.component.query.cache.size'] = opt_cqAnalyticsComponentQueryCacheSize;
  }

  /** @type {!Object} */
  var httpRequestParams = {
    method: 'POST',
    url: path,
    json: true,
            params: queryParameters,
    headers: headerParams
  };

  if (opt_extraHttpRequestParams) {
    httpRequestParams = angular.extend(httpRequestParams, opt_extraHttpRequestParams);
  }

  return (/** @type {?} */ (this.http_))(httpRequestParams);
}

/**
 * 
 * 
 * @param {!boolean=} opt_post 
 * @param {!boolean=} opt_apply 
 * @param {!boolean=} opt_delete 
 * @param {!string=} opt_action 
 * @param {!string=} opt_location 
 * @param {!Array<!string>=} opt_propertylist 
 * @param {!string=} opt_styleString 
 * @param {!angular.$http.Config=} opt_extraHttpRequestParams Extra HTTP parameters to send.
 * @return {!angular.$q.Promise<!API.Client.apacheSlingHealthCheckResultHTMLSerializerInfo>}
 */
API.Client.ConfigmgrApi.prototype.apacheSlingHealthCheckResultHTMLSerializer = function(opt_post, opt_apply, opt_delete, opt_action, opt_location, opt_propertylist, opt_styleString, opt_extraHttpRequestParams) {
  /** @const {string} */
  var path = this.basePath_ + '/system/console/configMgr/Apache Sling Health Check Result HTML Serializer';

  /** @type {!Object} */
  var queryParameters = {};

  /** @type {!Object} */
  var headerParams = angular.extend({}, this.defaultHeaders_);
  if (opt_post !== undefined) {
    queryParameters['post'] = opt_post;
  }

  if (opt_apply !== undefined) {
    queryParameters['apply'] = opt_apply;
  }

  if (opt_delete !== undefined) {
    queryParameters['delete'] = opt_delete;
  }

  if (opt_action !== undefined) {
    queryParameters['action'] = opt_action;
  }

  if (opt_location !== undefined) {
    queryParameters['$location'] = opt_location;
  }

  if (opt_propertylist !== undefined) {
    queryParameters['propertylist'] = opt_propertylist;
  }

  if (opt_styleString !== undefined) {
    queryParameters['styleString'] = opt_styleString;
  }

  /** @type {!Object} */
  var httpRequestParams = {
    method: 'POST',
    url: path,
    json: true,
            params: queryParameters,
    headers: headerParams
  };

  if (opt_extraHttpRequestParams) {
    httpRequestParams = angular.extend(httpRequestParams, opt_extraHttpRequestParams);
  }

  return (/** @type {?} */ (this.http_))(httpRequestParams);
}

/**
 * 
 * 
 * @param {!boolean=} opt_post 
 * @param {!boolean=} opt_apply 
 * @param {!boolean=} opt_delete 
 * @param {!string=} opt_action 
 * @param {!string=} opt_location 
 * @param {!Array<!string>=} opt_propertylist 
 * @param {!boolean=} opt_formsManagerConfigIncludeOOTBTemplates 
 * @param {!boolean=} opt_formsManagerConfigIncludeDeprecatedTemplates 
 * @param {!angular.$http.Config=} opt_extraHttpRequestParams Extra HTTP parameters to send.
 * @return {!angular.$q.Promise<!API.Client.comAdobeAemFormsndocumentsConfigAEMFormsManagerConfigurationInfo>}
 */
API.Client.ConfigmgrApi.prototype.comAdobeAemFormsndocumentsConfigAEMFormsManagerConfiguration = function(opt_post, opt_apply, opt_delete, opt_action, opt_location, opt_propertylist, opt_formsManagerConfigIncludeOOTBTemplates, opt_formsManagerConfigIncludeDeprecatedTemplates, opt_extraHttpRequestParams) {
  /** @const {string} */
  var path = this.basePath_ + '/system/console/configMgr/com.adobe.aem.formsndocuments.config.AEMFormsManagerConfiguration';

  /** @type {!Object} */
  var queryParameters = {};

  /** @type {!Object} */
  var headerParams = angular.extend({}, this.defaultHeaders_);
  if (opt_post !== undefined) {
    queryParameters['post'] = opt_post;
  }

  if (opt_apply !== undefined) {
    queryParameters['apply'] = opt_apply;
  }

  if (opt_delete !== undefined) {
    queryParameters['delete'] = opt_delete;
  }

  if (opt_action !== undefined) {
    queryParameters['action'] = opt_action;
  }

  if (opt_location !== undefined) {
    queryParameters['$location'] = opt_location;
  }

  if (opt_propertylist !== undefined) {
    queryParameters['propertylist'] = opt_propertylist;
  }

  if (opt_formsManagerConfigIncludeOOTBTemplates !== undefined) {
    queryParameters['formsManagerConfig.includeOOTBTemplates'] = opt_formsManagerConfigIncludeOOTBTemplates;
  }

  if (opt_formsManagerConfigIncludeDeprecatedTemplates !== undefined) {
    queryParameters['formsManagerConfig.includeDeprecatedTemplates'] = opt_formsManagerConfigIncludeDeprecatedTemplates;
  }

  /** @type {!Object} */
  var httpRequestParams = {
    method: 'POST',
    url: path,
    json: true,
            params: queryParameters,
    headers: headerParams
  };

  if (opt_extraHttpRequestParams) {
    httpRequestParams = angular.extend(httpRequestParams, opt_extraHttpRequestParams);
  }

  return (/** @type {?} */ (this.http_))(httpRequestParams);
}

/**
 * 
 * 
 * @param {!boolean=} opt_post 
 * @param {!boolean=} opt_apply 
 * @param {!boolean=} opt_delete 
 * @param {!string=} opt_action 
 * @param {!string=} opt_location 
 * @param {!Array<!string>=} opt_propertylist 
 * @param {!boolean=} opt_isTransactionRecordingEnabled 
 * @param {!angular.$http.Config=} opt_extraHttpRequestParams Extra HTTP parameters to send.
 * @return {!angular.$q.Promise<!API.Client.comAdobeAemTransactionCoreImplTransactionRecorderInfo>}
 */
API.Client.ConfigmgrApi.prototype.comAdobeAemTransactionCoreImplTransactionRecorder = function(opt_post, opt_apply, opt_delete, opt_action, opt_location, opt_propertylist, opt_isTransactionRecordingEnabled, opt_extraHttpRequestParams) {
  /** @const {string} */
  var path = this.basePath_ + '/system/console/configMgr/com.adobe.aem.transaction.core.impl.TransactionRecorder';

  /** @type {!Object} */
  var queryParameters = {};

  /** @type {!Object} */
  var headerParams = angular.extend({}, this.defaultHeaders_);
  if (opt_post !== undefined) {
    queryParameters['post'] = opt_post;
  }

  if (opt_apply !== undefined) {
    queryParameters['apply'] = opt_apply;
  }

  if (opt_delete !== undefined) {
    queryParameters['delete'] = opt_delete;
  }

  if (opt_action !== undefined) {
    queryParameters['action'] = opt_action;
  }

  if (opt_location !== undefined) {
    queryParameters['$location'] = opt_location;
  }

  if (opt_propertylist !== undefined) {
    queryParameters['propertylist'] = opt_propertylist;
  }

  if (opt_isTransactionRecordingEnabled !== undefined) {
    queryParameters['isTransactionRecordingEnabled'] = opt_isTransactionRecordingEnabled;
  }

  /** @type {!Object} */
  var httpRequestParams = {
    method: 'POST',
    url: path,
    json: true,
            params: queryParameters,
    headers: headerParams
  };

  if (opt_extraHttpRequestParams) {
    httpRequestParams = angular.extend(httpRequestParams, opt_extraHttpRequestParams);
  }

  return (/** @type {?} */ (this.http_))(httpRequestParams);
}

/**
 * 
 * 
 * @param {!boolean=} opt_post 
 * @param {!boolean=} opt_apply 
 * @param {!boolean=} opt_delete 
 * @param {!string=} opt_action 
 * @param {!string=} opt_location 
 * @param {!Array<!string>=} opt_propertylist 
 * @param {!string=} opt_hcName 
 * @param {!Array<!string>=} opt_hcTags 
 * @param {!string=} opt_hcMbeanName 
 * @param {!angular.$http.Config=} opt_extraHttpRequestParams Extra HTTP parameters to send.
 * @return {!angular.$q.Promise<!API.Client.comAdobeAemUpgradePrechecksHcImplDeprecateIndexesHCInfo>}
 */
API.Client.ConfigmgrApi.prototype.comAdobeAemUpgradePrechecksHcImplDeprecateIndexesHC = function(opt_post, opt_apply, opt_delete, opt_action, opt_location, opt_propertylist, opt_hcName, opt_hcTags, opt_hcMbeanName, opt_extraHttpRequestParams) {
  /** @const {string} */
  var path = this.basePath_ + '/system/console/configMgr/com.adobe.aem.upgrade.prechecks.hc.impl.DeprecateIndexesHC';

  /** @type {!Object} */
  var queryParameters = {};

  /** @type {!Object} */
  var headerParams = angular.extend({}, this.defaultHeaders_);
  if (opt_post !== undefined) {
    queryParameters['post'] = opt_post;
  }

  if (opt_apply !== undefined) {
    queryParameters['apply'] = opt_apply;
  }

  if (opt_delete !== undefined) {
    queryParameters['delete'] = opt_delete;
  }

  if (opt_action !== undefined) {
    queryParameters['action'] = opt_action;
  }

  if (opt_location !== undefined) {
    queryParameters['$location'] = opt_location;
  }

  if (opt_propertylist !== undefined) {
    queryParameters['propertylist'] = opt_propertylist;
  }

  if (opt_hcName !== undefined) {
    queryParameters['hc.name'] = opt_hcName;
  }

  if (opt_hcTags !== undefined) {
    queryParameters['hc.tags'] = opt_hcTags;
  }

  if (opt_hcMbeanName !== undefined) {
    queryParameters['hc.mbean.name'] = opt_hcMbeanName;
  }

  /** @type {!Object} */
  var httpRequestParams = {
    method: 'POST',
    url: path,
    json: true,
            params: queryParameters,
    headers: headerParams
  };

  if (opt_extraHttpRequestParams) {
    httpRequestParams = angular.extend(httpRequestParams, opt_extraHttpRequestParams);
  }

  return (/** @type {?} */ (this.http_))(httpRequestParams);
}

/**
 * 
 * 
 * @param {!boolean=} opt_post 
 * @param {!boolean=} opt_apply 
 * @param {!boolean=} opt_delete 
 * @param {!string=} opt_action 
 * @param {!string=} opt_location 
 * @param {!Array<!string>=} opt_propertylist 
 * @param {!string=} opt_hcName 
 * @param {!Array<!string>=} opt_hcTags 
 * @param {!string=} opt_hcMbeanName 
 * @param {!angular.$http.Config=} opt_extraHttpRequestParams Extra HTTP parameters to send.
 * @return {!angular.$q.Promise<!API.Client.comAdobeAemUpgradePrechecksHcImplReplicationAgentsDisabledHCInfo>}
 */
API.Client.ConfigmgrApi.prototype.comAdobeAemUpgradePrechecksHcImplReplicationAgentsDisabledHC = function(opt_post, opt_apply, opt_delete, opt_action, opt_location, opt_propertylist, opt_hcName, opt_hcTags, opt_hcMbeanName, opt_extraHttpRequestParams) {
  /** @const {string} */
  var path = this.basePath_ + '/system/console/configMgr/com.adobe.aem.upgrade.prechecks.hc.impl.ReplicationAgentsDisabledHC';

  /** @type {!Object} */
  var queryParameters = {};

  /** @type {!Object} */
  var headerParams = angular.extend({}, this.defaultHeaders_);
  if (opt_post !== undefined) {
    queryParameters['post'] = opt_post;
  }

  if (opt_apply !== undefined) {
    queryParameters['apply'] = opt_apply;
  }

  if (opt_delete !== undefined) {
    queryParameters['delete'] = opt_delete;
  }

  if (opt_action !== undefined) {
    queryParameters['action'] = opt_action;
  }

  if (opt_location !== undefined) {
    queryParameters['$location'] = opt_location;
  }

  if (opt_propertylist !== undefined) {
    queryParameters['propertylist'] = opt_propertylist;
  }

  if (opt_hcName !== undefined) {
    queryParameters['hc.name'] = opt_hcName;
  }

  if (opt_hcTags !== undefined) {
    queryParameters['hc.tags'] = opt_hcTags;
  }

  if (opt_hcMbeanName !== undefined) {
    queryParameters['hc.mbean.name'] = opt_hcMbeanName;
  }

  /** @type {!Object} */
  var httpRequestParams = {
    method: 'POST',
    url: path,
    json: true,
            params: queryParameters,
    headers: headerParams
  };

  if (opt_extraHttpRequestParams) {
    httpRequestParams = angular.extend(httpRequestParams, opt_extraHttpRequestParams);
  }

  return (/** @type {?} */ (this.http_))(httpRequestParams);
}

/**
 * 
 * 
 * @param {!boolean=} opt_post 
 * @param {!boolean=} opt_apply 
 * @param {!boolean=} opt_delete 
 * @param {!string=} opt_action 
 * @param {!string=} opt_location 
 * @param {!Array<!string>=} opt_propertylist 
 * @param {!Array<!string>=} opt_preUpgradeMaintenanceTasks 
 * @param {!Array<!string>=} opt_preUpgradeHcTags 
 * @param {!angular.$http.Config=} opt_extraHttpRequestParams Extra HTTP parameters to send.
 * @return {!angular.$q.Promise<!API.Client.comAdobeAemUpgradePrechecksMbeanImplPreUpgradeTasksMBeanImplInfo>}
 */
API.Client.ConfigmgrApi.prototype.comAdobeAemUpgradePrechecksMbeanImplPreUpgradeTasksMBeanImpl = function(opt_post, opt_apply, opt_delete, opt_action, opt_location, opt_propertylist, opt_preUpgradeMaintenanceTasks, opt_preUpgradeHcTags, opt_extraHttpRequestParams) {
  /** @const {string} */
  var path = this.basePath_ + '/system/console/configMgr/com.adobe.aem.upgrade.prechecks.mbean.impl.PreUpgradeTasksMBeanImpl';

  /** @type {!Object} */
  var queryParameters = {};

  /** @type {!Object} */
  var headerParams = angular.extend({}, this.defaultHeaders_);
  if (opt_post !== undefined) {
    queryParameters['post'] = opt_post;
  }

  if (opt_apply !== undefined) {
    queryParameters['apply'] = opt_apply;
  }

  if (opt_delete !== undefined) {
    queryParameters['delete'] = opt_delete;
  }

  if (opt_action !== undefined) {
    queryParameters['action'] = opt_action;
  }

  if (opt_location !== undefined) {
    queryParameters['$location'] = opt_location;
  }

  if (opt_propertylist !== undefined) {
    queryParameters['propertylist'] = opt_propertylist;
  }

  if (opt_preUpgradeMaintenanceTasks !== undefined) {
    queryParameters['pre-upgrade.maintenance.tasks'] = opt_preUpgradeMaintenanceTasks;
  }

  if (opt_preUpgradeHcTags !== undefined) {
    queryParameters['pre-upgrade.hc.tags'] = opt_preUpgradeHcTags;
  }

  /** @type {!Object} */
  var httpRequestParams = {
    method: 'POST',
    url: path,
    json: true,
            params: queryParameters,
    headers: headerParams
  };

  if (opt_extraHttpRequestParams) {
    httpRequestParams = angular.extend(httpRequestParams, opt_extraHttpRequestParams);
  }

  return (/** @type {?} */ (this.http_))(httpRequestParams);
}

/**
 * 
 * 
 * @param {!boolean=} opt_post 
 * @param {!boolean=} opt_apply 
 * @param {!boolean=} opt_delete 
 * @param {!string=} opt_action 
 * @param {!string=} opt_location 
 * @param {!Array<!string>=} opt_propertylist 
 * @param {!string=} opt_rootPath 
 * @param {!boolean=} opt_fixInconsistencies 
 * @param {!angular.$http.Config=} opt_extraHttpRequestParams Extra HTTP parameters to send.
 * @return {!angular.$q.Promise<!API.Client.comAdobeAemUpgradePrechecksTasksImplConsistencyCheckTaskImplInfo>}
 */
API.Client.ConfigmgrApi.prototype.comAdobeAemUpgradePrechecksTasksImplConsistencyCheckTaskImpl = function(opt_post, opt_apply, opt_delete, opt_action, opt_location, opt_propertylist, opt_rootPath, opt_fixInconsistencies, opt_extraHttpRequestParams) {
  /** @const {string} */
  var path = this.basePath_ + '/system/console/configMgr/com.adobe.aem.upgrade.prechecks.tasks.impl.ConsistencyCheckTaskImpl';

  /** @type {!Object} */
  var queryParameters = {};

  /** @type {!Object} */
  var headerParams = angular.extend({}, this.defaultHeaders_);
  if (opt_post !== undefined) {
    queryParameters['post'] = opt_post;
  }

  if (opt_apply !== undefined) {
    queryParameters['apply'] = opt_apply;
  }

  if (opt_delete !== undefined) {
    queryParameters['delete'] = opt_delete;
  }

  if (opt_action !== undefined) {
    queryParameters['action'] = opt_action;
  }

  if (opt_location !== undefined) {
    queryParameters['$location'] = opt_location;
  }

  if (opt_propertylist !== undefined) {
    queryParameters['propertylist'] = opt_propertylist;
  }

  if (opt_rootPath !== undefined) {
    queryParameters['root.path'] = opt_rootPath;
  }

  if (opt_fixInconsistencies !== undefined) {
    queryParameters['fix.inconsistencies'] = opt_fixInconsistencies;
  }

  /** @type {!Object} */
  var httpRequestParams = {
    method: 'POST',
    url: path,
    json: true,
            params: queryParameters,
    headers: headerParams
  };

  if (opt_extraHttpRequestParams) {
    httpRequestParams = angular.extend(httpRequestParams, opt_extraHttpRequestParams);
  }

  return (/** @type {?} */ (this.http_))(httpRequestParams);
}

/**
 * 
 * 
 * @param {!boolean=} opt_post 
 * @param {!boolean=} opt_apply 
 * @param {!boolean=} opt_delete 
 * @param {!string=} opt_action 
 * @param {!string=} opt_location 
 * @param {!Array<!string>=} opt_propertylist 
 * @param {!number=} opt_cqAccountmanagerTokenValidityPeriod 
 * @param {!string=} opt_cqAccountmanagerConfigRequestnewaccountMail 
 * @param {!string=} opt_cqAccountmanagerConfigRequestnewpwdMail 
 * @param {!angular.$http.Config=} opt_extraHttpRequestParams Extra HTTP parameters to send.
 * @return {!angular.$q.Promise<!API.Client.comAdobeCqAccountApiAccountManagementServiceInfo>}
 */
API.Client.ConfigmgrApi.prototype.comAdobeCqAccountApiAccountManagementService = function(opt_post, opt_apply, opt_delete, opt_action, opt_location, opt_propertylist, opt_cqAccountmanagerTokenValidityPeriod, opt_cqAccountmanagerConfigRequestnewaccountMail, opt_cqAccountmanagerConfigRequestnewpwdMail, opt_extraHttpRequestParams) {
  /** @const {string} */
  var path = this.basePath_ + '/system/console/configMgr/com.adobe.cq.account.api.AccountManagementService';

  /** @type {!Object} */
  var queryParameters = {};

  /** @type {!Object} */
  var headerParams = angular.extend({}, this.defaultHeaders_);
  if (opt_post !== undefined) {
    queryParameters['post'] = opt_post;
  }

  if (opt_apply !== undefined) {
    queryParameters['apply'] = opt_apply;
  }

  if (opt_delete !== undefined) {
    queryParameters['delete'] = opt_delete;
  }

  if (opt_action !== undefined) {
    queryParameters['action'] = opt_action;
  }

  if (opt_location !== undefined) {
    queryParameters['$location'] = opt_location;
  }

  if (opt_propertylist !== undefined) {
    queryParameters['propertylist'] = opt_propertylist;
  }

  if (opt_cqAccountmanagerTokenValidityPeriod !== undefined) {
    queryParameters['cq.accountmanager.token.validity.period'] = opt_cqAccountmanagerTokenValidityPeriod;
  }

  if (opt_cqAccountmanagerConfigRequestnewaccountMail !== undefined) {
    queryParameters['cq.accountmanager.config.requestnewaccount.mail'] = opt_cqAccountmanagerConfigRequestnewaccountMail;
  }

  if (opt_cqAccountmanagerConfigRequestnewpwdMail !== undefined) {
    queryParameters['cq.accountmanager.config.requestnewpwd.mail'] = opt_cqAccountmanagerConfigRequestnewpwdMail;
  }

  /** @type {!Object} */
  var httpRequestParams = {
    method: 'POST',
    url: path,
    json: true,
            params: queryParameters,
    headers: headerParams
  };

  if (opt_extraHttpRequestParams) {
    httpRequestParams = angular.extend(httpRequestParams, opt_extraHttpRequestParams);
  }

  return (/** @type {?} */ (this.http_))(httpRequestParams);
}

/**
 * 
 * 
 * @param {!boolean=} opt_post 
 * @param {!boolean=} opt_apply 
 * @param {!boolean=} opt_delete 
 * @param {!string=} opt_action 
 * @param {!string=} opt_location 
 * @param {!Array<!string>=} opt_propertylist 
 * @param {!string=} opt_cqAccountmanagerConfigInformnewaccountMail 
 * @param {!string=} opt_cqAccountmanagerConfigInformnewpwdMail 
 * @param {!angular.$http.Config=} opt_extraHttpRequestParams Extra HTTP parameters to send.
 * @return {!angular.$q.Promise<!API.Client.comAdobeCqAccountImplAccountManagementServletInfo>}
 */
API.Client.ConfigmgrApi.prototype.comAdobeCqAccountImplAccountManagementServlet = function(opt_post, opt_apply, opt_delete, opt_action, opt_location, opt_propertylist, opt_cqAccountmanagerConfigInformnewaccountMail, opt_cqAccountmanagerConfigInformnewpwdMail, opt_extraHttpRequestParams) {
  /** @const {string} */
  var path = this.basePath_ + '/system/console/configMgr/com.adobe.cq.account.impl.AccountManagementServlet';

  /** @type {!Object} */
  var queryParameters = {};

  /** @type {!Object} */
  var headerParams = angular.extend({}, this.defaultHeaders_);
  if (opt_post !== undefined) {
    queryParameters['post'] = opt_post;
  }

  if (opt_apply !== undefined) {
    queryParameters['apply'] = opt_apply;
  }

  if (opt_delete !== undefined) {
    queryParameters['delete'] = opt_delete;
  }

  if (opt_action !== undefined) {
    queryParameters['action'] = opt_action;
  }

  if (opt_location !== undefined) {
    queryParameters['$location'] = opt_location;
  }

  if (opt_propertylist !== undefined) {
    queryParameters['propertylist'] = opt_propertylist;
  }

  if (opt_cqAccountmanagerConfigInformnewaccountMail !== undefined) {
    queryParameters['cq.accountmanager.config.informnewaccount.mail'] = opt_cqAccountmanagerConfigInformnewaccountMail;
  }

  if (opt_cqAccountmanagerConfigInformnewpwdMail !== undefined) {
    queryParameters['cq.accountmanager.config.informnewpwd.mail'] = opt_cqAccountmanagerConfigInformnewpwdMail;
  }

  /** @type {!Object} */
  var httpRequestParams = {
    method: 'POST',
    url: path,
    json: true,
            params: queryParameters,
    headers: headerParams
  };

  if (opt_extraHttpRequestParams) {
    httpRequestParams = angular.extend(httpRequestParams, opt_extraHttpRequestParams);
  }

  return (/** @type {?} */ (this.http_))(httpRequestParams);
}

/**
 * 
 * 
 * @param {!boolean=} opt_post 
 * @param {!boolean=} opt_apply 
 * @param {!boolean=} opt_delete 
 * @param {!string=} opt_action 
 * @param {!string=} opt_location 
 * @param {!Array<!string>=} opt_propertylist 
 * @param {!number=} opt_cqAddressLocationDefaultMaxResults 
 * @param {!angular.$http.Config=} opt_extraHttpRequestParams Extra HTTP parameters to send.
 * @return {!angular.$q.Promise<!API.Client.comAdobeCqAddressImplLocationLocationListServletInfo>}
 */
API.Client.ConfigmgrApi.prototype.comAdobeCqAddressImplLocationLocationListServlet = function(opt_post, opt_apply, opt_delete, opt_action, opt_location, opt_propertylist, opt_cqAddressLocationDefaultMaxResults, opt_extraHttpRequestParams) {
  /** @const {string} */
  var path = this.basePath_ + '/system/console/configMgr/com.adobe.cq.address.impl.location.LocationListServlet';

  /** @type {!Object} */
  var queryParameters = {};

  /** @type {!Object} */
  var headerParams = angular.extend({}, this.defaultHeaders_);
  if (opt_post !== undefined) {
    queryParameters['post'] = opt_post;
  }

  if (opt_apply !== undefined) {
    queryParameters['apply'] = opt_apply;
  }

  if (opt_delete !== undefined) {
    queryParameters['delete'] = opt_delete;
  }

  if (opt_action !== undefined) {
    queryParameters['action'] = opt_action;
  }

  if (opt_location !== undefined) {
    queryParameters['$location'] = opt_location;
  }

  if (opt_propertylist !== undefined) {
    queryParameters['propertylist'] = opt_propertylist;
  }

  if (opt_cqAddressLocationDefaultMaxResults !== undefined) {
    queryParameters['cq.address.location.default.maxResults'] = opt_cqAddressLocationDefaultMaxResults;
  }

  /** @type {!Object} */
  var httpRequestParams = {
    method: 'POST',
    url: path,
    json: true,
            params: queryParameters,
    headers: headerParams
  };

  if (opt_extraHttpRequestParams) {
    httpRequestParams = angular.extend(httpRequestParams, opt_extraHttpRequestParams);
  }

  return (/** @type {?} */ (this.http_))(httpRequestParams);
}

/**
 * 
 * 
 * @param {!boolean=} opt_post 
 * @param {!boolean=} opt_apply 
 * @param {!boolean=} opt_delete 
 * @param {!string=} opt_action 
 * @param {!string=} opt_location 
 * @param {!Array<!string>=} opt_propertylist 
 * @param {!string=} opt_auditlogRuleName 
 * @param {!string=} opt_auditlogRuleContentpath 
 * @param {!number=} opt_auditlogRuleMinimumage 
 * @param {!string=} opt_auditlogRuleTypes 
 * @param {!angular.$http.Config=} opt_extraHttpRequestParams Extra HTTP parameters to send.
 * @return {!angular.$q.Promise<!API.Client.comAdobeCqAuditPurgeDamInfo>}
 */
API.Client.ConfigmgrApi.prototype.comAdobeCqAuditPurgeDam = function(opt_post, opt_apply, opt_delete, opt_action, opt_location, opt_propertylist, opt_auditlogRuleName, opt_auditlogRuleContentpath, opt_auditlogRuleMinimumage, opt_auditlogRuleTypes, opt_extraHttpRequestParams) {
  /** @const {string} */
  var path = this.basePath_ + '/system/console/configMgr/com.adobe.cq.audit.purge.Dam';

  /** @type {!Object} */
  var queryParameters = {};

  /** @type {!Object} */
  var headerParams = angular.extend({}, this.defaultHeaders_);
  if (opt_post !== undefined) {
    queryParameters['post'] = opt_post;
  }

  if (opt_apply !== undefined) {
    queryParameters['apply'] = opt_apply;
  }

  if (opt_delete !== undefined) {
    queryParameters['delete'] = opt_delete;
  }

  if (opt_action !== undefined) {
    queryParameters['action'] = opt_action;
  }

  if (opt_location !== undefined) {
    queryParameters['$location'] = opt_location;
  }

  if (opt_propertylist !== undefined) {
    queryParameters['propertylist'] = opt_propertylist;
  }

  if (opt_auditlogRuleName !== undefined) {
    queryParameters['auditlog.rule.name'] = opt_auditlogRuleName;
  }

  if (opt_auditlogRuleContentpath !== undefined) {
    queryParameters['auditlog.rule.contentpath'] = opt_auditlogRuleContentpath;
  }

  if (opt_auditlogRuleMinimumage !== undefined) {
    queryParameters['auditlog.rule.minimumage'] = opt_auditlogRuleMinimumage;
  }

  if (opt_auditlogRuleTypes !== undefined) {
    queryParameters['auditlog.rule.types'] = opt_auditlogRuleTypes;
  }

  /** @type {!Object} */
  var httpRequestParams = {
    method: 'POST',
    url: path,
    json: true,
            params: queryParameters,
    headers: headerParams
  };

  if (opt_extraHttpRequestParams) {
    httpRequestParams = angular.extend(httpRequestParams, opt_extraHttpRequestParams);
  }

  return (/** @type {?} */ (this.http_))(httpRequestParams);
}

/**
 * 
 * 
 * @param {!boolean=} opt_post 
 * @param {!boolean=} opt_apply 
 * @param {!boolean=} opt_delete 
 * @param {!string=} opt_action 
 * @param {!string=} opt_location 
 * @param {!Array<!string>=} opt_propertylist 
 * @param {!string=} opt_auditlogRuleName 
 * @param {!string=} opt_auditlogRuleContentpath 
 * @param {!number=} opt_auditlogRuleMinimumage 
 * @param {!string=} opt_auditlogRuleTypes 
 * @param {!angular.$http.Config=} opt_extraHttpRequestParams Extra HTTP parameters to send.
 * @return {!angular.$q.Promise<!API.Client.comAdobeCqAuditPurgePagesInfo>}
 */
API.Client.ConfigmgrApi.prototype.comAdobeCqAuditPurgePages = function(opt_post, opt_apply, opt_delete, opt_action, opt_location, opt_propertylist, opt_auditlogRuleName, opt_auditlogRuleContentpath, opt_auditlogRuleMinimumage, opt_auditlogRuleTypes, opt_extraHttpRequestParams) {
  /** @const {string} */
  var path = this.basePath_ + '/system/console/configMgr/com.adobe.cq.audit.purge.Pages';

  /** @type {!Object} */
  var queryParameters = {};

  /** @type {!Object} */
  var headerParams = angular.extend({}, this.defaultHeaders_);
  if (opt_post !== undefined) {
    queryParameters['post'] = opt_post;
  }

  if (opt_apply !== undefined) {
    queryParameters['apply'] = opt_apply;
  }

  if (opt_delete !== undefined) {
    queryParameters['delete'] = opt_delete;
  }

  if (opt_action !== undefined) {
    queryParameters['action'] = opt_action;
  }

  if (opt_location !== undefined) {
    queryParameters['$location'] = opt_location;
  }

  if (opt_propertylist !== undefined) {
    queryParameters['propertylist'] = opt_propertylist;
  }

  if (opt_auditlogRuleName !== undefined) {
    queryParameters['auditlog.rule.name'] = opt_auditlogRuleName;
  }

  if (opt_auditlogRuleContentpath !== undefined) {
    queryParameters['auditlog.rule.contentpath'] = opt_auditlogRuleContentpath;
  }

  if (opt_auditlogRuleMinimumage !== undefined) {
    queryParameters['auditlog.rule.minimumage'] = opt_auditlogRuleMinimumage;
  }

  if (opt_auditlogRuleTypes !== undefined) {
    queryParameters['auditlog.rule.types'] = opt_auditlogRuleTypes;
  }

  /** @type {!Object} */
  var httpRequestParams = {
    method: 'POST',
    url: path,
    json: true,
            params: queryParameters,
    headers: headerParams
  };

  if (opt_extraHttpRequestParams) {
    httpRequestParams = angular.extend(httpRequestParams, opt_extraHttpRequestParams);
  }

  return (/** @type {?} */ (this.http_))(httpRequestParams);
}

/**
 * 
 * 
 * @param {!boolean=} opt_post 
 * @param {!boolean=} opt_apply 
 * @param {!boolean=} opt_delete 
 * @param {!string=} opt_action 
 * @param {!string=} opt_location 
 * @param {!Array<!string>=} opt_propertylist 
 * @param {!string=} opt_auditlogRuleName 
 * @param {!string=} opt_auditlogRuleContentpath 
 * @param {!number=} opt_auditlogRuleMinimumage 
 * @param {!string=} opt_auditlogRuleTypes 
 * @param {!angular.$http.Config=} opt_extraHttpRequestParams Extra HTTP parameters to send.
 * @return {!angular.$q.Promise<!API.Client.comAdobeCqAuditPurgeReplicationInfo>}
 */
API.Client.ConfigmgrApi.prototype.comAdobeCqAuditPurgeReplication = function(opt_post, opt_apply, opt_delete, opt_action, opt_location, opt_propertylist, opt_auditlogRuleName, opt_auditlogRuleContentpath, opt_auditlogRuleMinimumage, opt_auditlogRuleTypes, opt_extraHttpRequestParams) {
  /** @const {string} */
  var path = this.basePath_ + '/system/console/configMgr/com.adobe.cq.audit.purge.Replication';

  /** @type {!Object} */
  var queryParameters = {};

  /** @type {!Object} */
  var headerParams = angular.extend({}, this.defaultHeaders_);
  if (opt_post !== undefined) {
    queryParameters['post'] = opt_post;
  }

  if (opt_apply !== undefined) {
    queryParameters['apply'] = opt_apply;
  }

  if (opt_delete !== undefined) {
    queryParameters['delete'] = opt_delete;
  }

  if (opt_action !== undefined) {
    queryParameters['action'] = opt_action;
  }

  if (opt_location !== undefined) {
    queryParameters['$location'] = opt_location;
  }

  if (opt_propertylist !== undefined) {
    queryParameters['propertylist'] = opt_propertylist;
  }

  if (opt_auditlogRuleName !== undefined) {
    queryParameters['auditlog.rule.name'] = opt_auditlogRuleName;
  }

  if (opt_auditlogRuleContentpath !== undefined) {
    queryParameters['auditlog.rule.contentpath'] = opt_auditlogRuleContentpath;
  }

  if (opt_auditlogRuleMinimumage !== undefined) {
    queryParameters['auditlog.rule.minimumage'] = opt_auditlogRuleMinimumage;
  }

  if (opt_auditlogRuleTypes !== undefined) {
    queryParameters['auditlog.rule.types'] = opt_auditlogRuleTypes;
  }

  /** @type {!Object} */
  var httpRequestParams = {
    method: 'POST',
    url: path,
    json: true,
            params: queryParameters,
    headers: headerParams
  };

  if (opt_extraHttpRequestParams) {
    httpRequestParams = angular.extend(httpRequestParams, opt_extraHttpRequestParams);
  }

  return (/** @type {?} */ (this.http_))(httpRequestParams);
}

/**
 * 
 * 
 * @param {!boolean=} opt_post 
 * @param {!boolean=} opt_apply 
 * @param {!boolean=} opt_delete 
 * @param {!string=} opt_action 
 * @param {!string=} opt_location 
 * @param {!Array<!string>=} opt_propertylist 
 * @param {!number=} opt_serviceRanking 
 * @param {!string=} opt_keypairId 
 * @param {!string=} opt_keypairAlias 
 * @param {!Array<!string>=} opt_cdnrewriterAttributes 
 * @param {!string=} opt_cdnRewriterDistributionDomain 
 * @param {!angular.$http.Config=} opt_extraHttpRequestParams Extra HTTP parameters to send.
 * @return {!angular.$q.Promise<!API.Client.comAdobeCqCdnRewriterImplAWSCloudFrontRewriterInfo>}
 */
API.Client.ConfigmgrApi.prototype.comAdobeCqCdnRewriterImplAWSCloudFrontRewriter = function(opt_post, opt_apply, opt_delete, opt_action, opt_location, opt_propertylist, opt_serviceRanking, opt_keypairId, opt_keypairAlias, opt_cdnrewriterAttributes, opt_cdnRewriterDistributionDomain, opt_extraHttpRequestParams) {
  /** @const {string} */
  var path = this.basePath_ + '/system/console/configMgr/com.adobe.cq.cdn.rewriter.impl.AWSCloudFrontRewriter';

  /** @type {!Object} */
  var queryParameters = {};

  /** @type {!Object} */
  var headerParams = angular.extend({}, this.defaultHeaders_);
  if (opt_post !== undefined) {
    queryParameters['post'] = opt_post;
  }

  if (opt_apply !== undefined) {
    queryParameters['apply'] = opt_apply;
  }

  if (opt_delete !== undefined) {
    queryParameters['delete'] = opt_delete;
  }

  if (opt_action !== undefined) {
    queryParameters['action'] = opt_action;
  }

  if (opt_location !== undefined) {
    queryParameters['$location'] = opt_location;
  }

  if (opt_propertylist !== undefined) {
    queryParameters['propertylist'] = opt_propertylist;
  }

  if (opt_serviceRanking !== undefined) {
    queryParameters['service.ranking'] = opt_serviceRanking;
  }

  if (opt_keypairId !== undefined) {
    queryParameters['keypair.id'] = opt_keypairId;
  }

  if (opt_keypairAlias !== undefined) {
    queryParameters['keypair.alias'] = opt_keypairAlias;
  }

  if (opt_cdnrewriterAttributes !== undefined) {
    queryParameters['cdnrewriter.attributes'] = opt_cdnrewriterAttributes;
  }

  if (opt_cdnRewriterDistributionDomain !== undefined) {
    queryParameters['cdn.rewriter.distribution.domain'] = opt_cdnRewriterDistributionDomain;
  }

  /** @type {!Object} */
  var httpRequestParams = {
    method: 'POST',
    url: path,
    json: true,
            params: queryParameters,
    headers: headerParams
  };

  if (opt_extraHttpRequestParams) {
    httpRequestParams = angular.extend(httpRequestParams, opt_extraHttpRequestParams);
  }

  return (/** @type {?} */ (this.http_))(httpRequestParams);
}

/**
 * 
 * 
 * @param {!boolean=} opt_post 
 * @param {!boolean=} opt_apply 
 * @param {!boolean=} opt_delete 
 * @param {!string=} opt_action 
 * @param {!string=} opt_location 
 * @param {!Array<!string>=} opt_propertylist 
 * @param {!string=} opt_cdnConfigDistributionDomain 
 * @param {!boolean=} opt_cdnConfigEnableRewriting 
 * @param {!Array<!string>=} opt_cdnConfigPathPrefixes 
 * @param {!number=} opt_cdnConfigCdnttl 
 * @param {!string=} opt_cdnConfigApplicationProtocol 
 * @param {!angular.$http.Config=} opt_extraHttpRequestParams Extra HTTP parameters to send.
 * @return {!angular.$q.Promise<!API.Client.comAdobeCqCdnRewriterImplCDNConfigServiceImplInfo>}
 */
API.Client.ConfigmgrApi.prototype.comAdobeCqCdnRewriterImplCDNConfigServiceImpl = function(opt_post, opt_apply, opt_delete, opt_action, opt_location, opt_propertylist, opt_cdnConfigDistributionDomain, opt_cdnConfigEnableRewriting, opt_cdnConfigPathPrefixes, opt_cdnConfigCdnttl, opt_cdnConfigApplicationProtocol, opt_extraHttpRequestParams) {
  /** @const {string} */
  var path = this.basePath_ + '/system/console/configMgr/com.adobe.cq.cdn.rewriter.impl.CDNConfigServiceImpl';

  /** @type {!Object} */
  var queryParameters = {};

  /** @type {!Object} */
  var headerParams = angular.extend({}, this.defaultHeaders_);
  if (opt_post !== undefined) {
    queryParameters['post'] = opt_post;
  }

  if (opt_apply !== undefined) {
    queryParameters['apply'] = opt_apply;
  }

  if (opt_delete !== undefined) {
    queryParameters['delete'] = opt_delete;
  }

  if (opt_action !== undefined) {
    queryParameters['action'] = opt_action;
  }

  if (opt_location !== undefined) {
    queryParameters['$location'] = opt_location;
  }

  if (opt_propertylist !== undefined) {
    queryParameters['propertylist'] = opt_propertylist;
  }

  if (opt_cdnConfigDistributionDomain !== undefined) {
    queryParameters['cdn.config.distribution.domain'] = opt_cdnConfigDistributionDomain;
  }

  if (opt_cdnConfigEnableRewriting !== undefined) {
    queryParameters['cdn.config.enable.rewriting'] = opt_cdnConfigEnableRewriting;
  }

  if (opt_cdnConfigPathPrefixes !== undefined) {
    queryParameters['cdn.config.path.prefixes'] = opt_cdnConfigPathPrefixes;
  }

  if (opt_cdnConfigCdnttl !== undefined) {
    queryParameters['cdn.config.cdnttl'] = opt_cdnConfigCdnttl;
  }

  if (opt_cdnConfigApplicationProtocol !== undefined) {
    queryParameters['cdn.config.application.protocol'] = opt_cdnConfigApplicationProtocol;
  }

  /** @type {!Object} */
  var httpRequestParams = {
    method: 'POST',
    url: path,
    json: true,
            params: queryParameters,
    headers: headerParams
  };

  if (opt_extraHttpRequestParams) {
    httpRequestParams = angular.extend(httpRequestParams, opt_extraHttpRequestParams);
  }

  return (/** @type {?} */ (this.http_))(httpRequestParams);
}

/**
 * 
 * 
 * @param {!boolean=} opt_post 
 * @param {!boolean=} opt_apply 
 * @param {!boolean=} opt_delete 
 * @param {!string=} opt_action 
 * @param {!string=} opt_location 
 * @param {!Array<!string>=} opt_propertylist 
 * @param {!number=} opt_serviceRanking 
 * @param {!Array<!string>=} opt_cdnrewriterAttributes 
 * @param {!string=} opt_cdnRewriterDistributionDomain 
 * @param {!angular.$http.Config=} opt_extraHttpRequestParams Extra HTTP parameters to send.
 * @return {!angular.$q.Promise<!API.Client.comAdobeCqCdnRewriterImplCDNRewriterInfo>}
 */
API.Client.ConfigmgrApi.prototype.comAdobeCqCdnRewriterImplCDNRewriter = function(opt_post, opt_apply, opt_delete, opt_action, opt_location, opt_propertylist, opt_serviceRanking, opt_cdnrewriterAttributes, opt_cdnRewriterDistributionDomain, opt_extraHttpRequestParams) {
  /** @const {string} */
  var path = this.basePath_ + '/system/console/configMgr/com.adobe.cq.cdn.rewriter.impl.CDNRewriter';

  /** @type {!Object} */
  var queryParameters = {};

  /** @type {!Object} */
  var headerParams = angular.extend({}, this.defaultHeaders_);
  if (opt_post !== undefined) {
    queryParameters['post'] = opt_post;
  }

  if (opt_apply !== undefined) {
    queryParameters['apply'] = opt_apply;
  }

  if (opt_delete !== undefined) {
    queryParameters['delete'] = opt_delete;
  }

  if (opt_action !== undefined) {
    queryParameters['action'] = opt_action;
  }

  if (opt_location !== undefined) {
    queryParameters['$location'] = opt_location;
  }

  if (opt_propertylist !== undefined) {
    queryParameters['propertylist'] = opt_propertylist;
  }

  if (opt_serviceRanking !== undefined) {
    queryParameters['service.ranking'] = opt_serviceRanking;
  }

  if (opt_cdnrewriterAttributes !== undefined) {
    queryParameters['cdnrewriter.attributes'] = opt_cdnrewriterAttributes;
  }

  if (opt_cdnRewriterDistributionDomain !== undefined) {
    queryParameters['cdn.rewriter.distribution.domain'] = opt_cdnRewriterDistributionDomain;
  }

  /** @type {!Object} */
  var httpRequestParams = {
    method: 'POST',
    url: path,
    json: true,
            params: queryParameters,
    headers: headerParams
  };

  if (opt_extraHttpRequestParams) {
    httpRequestParams = angular.extend(httpRequestParams, opt_extraHttpRequestParams);
  }

  return (/** @type {?} */ (this.http_))(httpRequestParams);
}

/**
 * 
 * 
 * @param {!boolean=} opt_post 
 * @param {!boolean=} opt_apply 
 * @param {!boolean=} opt_delete 
 * @param {!string=} opt_action 
 * @param {!string=} opt_location 
 * @param {!Array<!string>=} opt_propertylist 
 * @param {!Array<!string>=} opt_flushAgents 
 * @param {!angular.$http.Config=} opt_extraHttpRequestParams Extra HTTP parameters to send.
 * @return {!angular.$q.Promise<!API.Client.comAdobeCqCloudconfigCoreImplConfigurationReplicationEventHandleInfo>}
 */
API.Client.ConfigmgrApi.prototype.comAdobeCqCloudconfigCoreImplConfigurationReplicationEventHandle = function(opt_post, opt_apply, opt_delete, opt_action, opt_location, opt_propertylist, opt_flushAgents, opt_extraHttpRequestParams) {
  /** @const {string} */
  var path = this.basePath_ + '/system/console/configMgr/com.adobe.cq.cloudconfig.core.impl.ConfigurationReplicationEventHandler';

  /** @type {!Object} */
  var queryParameters = {};

  /** @type {!Object} */
  var headerParams = angular.extend({}, this.defaultHeaders_);
  if (opt_post !== undefined) {
    queryParameters['post'] = opt_post;
  }

  if (opt_apply !== undefined) {
    queryParameters['apply'] = opt_apply;
  }

  if (opt_delete !== undefined) {
    queryParameters['delete'] = opt_delete;
  }

  if (opt_action !== undefined) {
    queryParameters['action'] = opt_action;
  }

  if (opt_location !== undefined) {
    queryParameters['$location'] = opt_location;
  }

  if (opt_propertylist !== undefined) {
    queryParameters['propertylist'] = opt_propertylist;
  }

  if (opt_flushAgents !== undefined) {
    queryParameters['flush.agents'] = opt_flushAgents;
  }

  /** @type {!Object} */
  var httpRequestParams = {
    method: 'POST',
    url: path,
    json: true,
            params: queryParameters,
    headers: headerParams
  };

  if (opt_extraHttpRequestParams) {
    httpRequestParams = angular.extend(httpRequestParams, opt_extraHttpRequestParams);
  }

  return (/** @type {?} */ (this.http_))(httpRequestParams);
}

/**
 * 
 * 
 * @param {!boolean=} opt_post 
 * @param {!boolean=} opt_apply 
 * @param {!boolean=} opt_delete 
 * @param {!string=} opt_action 
 * @param {!string=} opt_location 
 * @param {!Array<!string>=} opt_propertylist 
 * @param {!boolean=} opt_cqCommerceAssetHandlerActive 
 * @param {!string=} opt_cqCommerceAssetHandlerName 
 * @param {!angular.$http.Config=} opt_extraHttpRequestParams Extra HTTP parameters to send.
 * @return {!angular.$q.Promise<!API.Client.comAdobeCqCommerceImplAssetDynamicImageHandlerInfo>}
 */
API.Client.ConfigmgrApi.prototype.comAdobeCqCommerceImplAssetDynamicImageHandler = function(opt_post, opt_apply, opt_delete, opt_action, opt_location, opt_propertylist, opt_cqCommerceAssetHandlerActive, opt_cqCommerceAssetHandlerName, opt_extraHttpRequestParams) {
  /** @const {string} */
  var path = this.basePath_ + '/system/console/configMgr/com.adobe.cq.commerce.impl.asset.DynamicImageHandler';

  /** @type {!Object} */
  var queryParameters = {};

  /** @type {!Object} */
  var headerParams = angular.extend({}, this.defaultHeaders_);
  if (opt_post !== undefined) {
    queryParameters['post'] = opt_post;
  }

  if (opt_apply !== undefined) {
    queryParameters['apply'] = opt_apply;
  }

  if (opt_delete !== undefined) {
    queryParameters['delete'] = opt_delete;
  }

  if (opt_action !== undefined) {
    queryParameters['action'] = opt_action;
  }

  if (opt_location !== undefined) {
    queryParameters['$location'] = opt_location;
  }

  if (opt_propertylist !== undefined) {
    queryParameters['propertylist'] = opt_propertylist;
  }

  if (opt_cqCommerceAssetHandlerActive !== undefined) {
    queryParameters['cq.commerce.asset.handler.active'] = opt_cqCommerceAssetHandlerActive;
  }

  if (opt_cqCommerceAssetHandlerName !== undefined) {
    queryParameters['cq.commerce.asset.handler.name'] = opt_cqCommerceAssetHandlerName;
  }

  /** @type {!Object} */
  var httpRequestParams = {
    method: 'POST',
    url: path,
    json: true,
            params: queryParameters,
    headers: headerParams
  };

  if (opt_extraHttpRequestParams) {
    httpRequestParams = angular.extend(httpRequestParams, opt_extraHttpRequestParams);
  }

  return (/** @type {?} */ (this.http_))(httpRequestParams);
}

/**
 * 
 * 
 * @param {!boolean=} opt_post 
 * @param {!boolean=} opt_apply 
 * @param {!boolean=} opt_delete 
 * @param {!string=} opt_action 
 * @param {!string=} opt_location 
 * @param {!Array<!string>=} opt_propertylist 
 * @param {!string=} opt_cqCommerceAssetHandlerFallback 
 * @param {!angular.$http.Config=} opt_extraHttpRequestParams Extra HTTP parameters to send.
 * @return {!angular.$q.Promise<!API.Client.comAdobeCqCommerceImplAssetProductAssetHandlerProviderImplInfo>}
 */
API.Client.ConfigmgrApi.prototype.comAdobeCqCommerceImplAssetProductAssetHandlerProviderImpl = function(opt_post, opt_apply, opt_delete, opt_action, opt_location, opt_propertylist, opt_cqCommerceAssetHandlerFallback, opt_extraHttpRequestParams) {
  /** @const {string} */
  var path = this.basePath_ + '/system/console/configMgr/com.adobe.cq.commerce.impl.asset.ProductAssetHandlerProviderImpl';

  /** @type {!Object} */
  var queryParameters = {};

  /** @type {!Object} */
  var headerParams = angular.extend({}, this.defaultHeaders_);
  if (opt_post !== undefined) {
    queryParameters['post'] = opt_post;
  }

  if (opt_apply !== undefined) {
    queryParameters['apply'] = opt_apply;
  }

  if (opt_delete !== undefined) {
    queryParameters['delete'] = opt_delete;
  }

  if (opt_action !== undefined) {
    queryParameters['action'] = opt_action;
  }

  if (opt_location !== undefined) {
    queryParameters['$location'] = opt_location;
  }

  if (opt_propertylist !== undefined) {
    queryParameters['propertylist'] = opt_propertylist;
  }

  if (opt_cqCommerceAssetHandlerFallback !== undefined) {
    queryParameters['cq.commerce.asset.handler.fallback'] = opt_cqCommerceAssetHandlerFallback;
  }

  /** @type {!Object} */
  var httpRequestParams = {
    method: 'POST',
    url: path,
    json: true,
            params: queryParameters,
    headers: headerParams
  };

  if (opt_extraHttpRequestParams) {
    httpRequestParams = angular.extend(httpRequestParams, opt_extraHttpRequestParams);
  }

  return (/** @type {?} */ (this.http_))(httpRequestParams);
}

/**
 * 
 * 
 * @param {!boolean=} opt_post 
 * @param {!boolean=} opt_apply 
 * @param {!boolean=} opt_delete 
 * @param {!string=} opt_action 
 * @param {!string=} opt_location 
 * @param {!Array<!string>=} opt_propertylist 
 * @param {!boolean=} opt_cqCommerceAssetHandlerActive 
 * @param {!string=} opt_cqCommerceAssetHandlerName 
 * @param {!angular.$http.Config=} opt_extraHttpRequestParams Extra HTTP parameters to send.
 * @return {!angular.$q.Promise<!API.Client.comAdobeCqCommerceImplAssetStaticImageHandlerInfo>}
 */
API.Client.ConfigmgrApi.prototype.comAdobeCqCommerceImplAssetStaticImageHandler = function(opt_post, opt_apply, opt_delete, opt_action, opt_location, opt_propertylist, opt_cqCommerceAssetHandlerActive, opt_cqCommerceAssetHandlerName, opt_extraHttpRequestParams) {
  /** @const {string} */
  var path = this.basePath_ + '/system/console/configMgr/com.adobe.cq.commerce.impl.asset.StaticImageHandler';

  /** @type {!Object} */
  var queryParameters = {};

  /** @type {!Object} */
  var headerParams = angular.extend({}, this.defaultHeaders_);
  if (opt_post !== undefined) {
    queryParameters['post'] = opt_post;
  }

  if (opt_apply !== undefined) {
    queryParameters['apply'] = opt_apply;
  }

  if (opt_delete !== undefined) {
    queryParameters['delete'] = opt_delete;
  }

  if (opt_action !== undefined) {
    queryParameters['action'] = opt_action;
  }

  if (opt_location !== undefined) {
    queryParameters['$location'] = opt_location;
  }

  if (opt_propertylist !== undefined) {
    queryParameters['propertylist'] = opt_propertylist;
  }

  if (opt_cqCommerceAssetHandlerActive !== undefined) {
    queryParameters['cq.commerce.asset.handler.active'] = opt_cqCommerceAssetHandlerActive;
  }

  if (opt_cqCommerceAssetHandlerName !== undefined) {
    queryParameters['cq.commerce.asset.handler.name'] = opt_cqCommerceAssetHandlerName;
  }

  /** @type {!Object} */
  var httpRequestParams = {
    method: 'POST',
    url: path,
    json: true,
            params: queryParameters,
    headers: headerParams
  };

  if (opt_extraHttpRequestParams) {
    httpRequestParams = angular.extend(httpRequestParams, opt_extraHttpRequestParams);
  }

  return (/** @type {?} */ (this.http_))(httpRequestParams);
}

/**
 * 
 * 
 * @param {!boolean=} opt_post 
 * @param {!boolean=} opt_apply 
 * @param {!boolean=} opt_delete 
 * @param {!string=} opt_action 
 * @param {!string=} opt_location 
 * @param {!Array<!string>=} opt_propertylist 
 * @param {!boolean=} opt_cqCommerceAssetHandlerActive 
 * @param {!string=} opt_cqCommerceAssetHandlerName 
 * @param {!angular.$http.Config=} opt_extraHttpRequestParams Extra HTTP parameters to send.
 * @return {!angular.$q.Promise<!API.Client.comAdobeCqCommerceImplAssetVideoHandlerInfo>}
 */
API.Client.ConfigmgrApi.prototype.comAdobeCqCommerceImplAssetVideoHandler = function(opt_post, opt_apply, opt_delete, opt_action, opt_location, opt_propertylist, opt_cqCommerceAssetHandlerActive, opt_cqCommerceAssetHandlerName, opt_extraHttpRequestParams) {
  /** @const {string} */
  var path = this.basePath_ + '/system/console/configMgr/com.adobe.cq.commerce.impl.asset.VideoHandler';

  /** @type {!Object} */
  var queryParameters = {};

  /** @type {!Object} */
  var headerParams = angular.extend({}, this.defaultHeaders_);
  if (opt_post !== undefined) {
    queryParameters['post'] = opt_post;
  }

  if (opt_apply !== undefined) {
    queryParameters['apply'] = opt_apply;
  }

  if (opt_delete !== undefined) {
    queryParameters['delete'] = opt_delete;
  }

  if (opt_action !== undefined) {
    queryParameters['action'] = opt_action;
  }

  if (opt_location !== undefined) {
    queryParameters['$location'] = opt_location;
  }

  if (opt_propertylist !== undefined) {
    queryParameters['propertylist'] = opt_propertylist;
  }

  if (opt_cqCommerceAssetHandlerActive !== undefined) {
    queryParameters['cq.commerce.asset.handler.active'] = opt_cqCommerceAssetHandlerActive;
  }

  if (opt_cqCommerceAssetHandlerName !== undefined) {
    queryParameters['cq.commerce.asset.handler.name'] = opt_cqCommerceAssetHandlerName;
  }

  /** @type {!Object} */
  var httpRequestParams = {
    method: 'POST',
    url: path,
    json: true,
            params: queryParameters,
    headers: headerParams
  };

  if (opt_extraHttpRequestParams) {
    httpRequestParams = angular.extend(httpRequestParams, opt_extraHttpRequestParams);
  }

  return (/** @type {?} */ (this.http_))(httpRequestParams);
}

/**
 * 
 * 
 * @param {!boolean=} opt_post 
 * @param {!boolean=} opt_apply 
 * @param {!boolean=} opt_delete 
 * @param {!string=} opt_action 
 * @param {!string=} opt_location 
 * @param {!Array<!string>=} opt_propertylist 
 * @param {!string=} opt_cqCommercePromotionRoot 
 * @param {!angular.$http.Config=} opt_extraHttpRequestParams Extra HTTP parameters to send.
 * @return {!angular.$q.Promise<!API.Client.comAdobeCqCommerceImplPromotionPromotionManagerImplInfo>}
 */
API.Client.ConfigmgrApi.prototype.comAdobeCqCommerceImplPromotionPromotionManagerImpl = function(opt_post, opt_apply, opt_delete, opt_action, opt_location, opt_propertylist, opt_cqCommercePromotionRoot, opt_extraHttpRequestParams) {
  /** @const {string} */
  var path = this.basePath_ + '/system/console/configMgr/com.adobe.cq.commerce.impl.promotion.PromotionManagerImpl';

  /** @type {!Object} */
  var queryParameters = {};

  /** @type {!Object} */
  var headerParams = angular.extend({}, this.defaultHeaders_);
  if (opt_post !== undefined) {
    queryParameters['post'] = opt_post;
  }

  if (opt_apply !== undefined) {
    queryParameters['apply'] = opt_apply;
  }

  if (opt_delete !== undefined) {
    queryParameters['delete'] = opt_delete;
  }

  if (opt_action !== undefined) {
    queryParameters['action'] = opt_action;
  }

  if (opt_location !== undefined) {
    queryParameters['$location'] = opt_location;
  }

  if (opt_propertylist !== undefined) {
    queryParameters['propertylist'] = opt_propertylist;
  }

  if (opt_cqCommercePromotionRoot !== undefined) {
    queryParameters['cq.commerce.promotion.root'] = opt_cqCommercePromotionRoot;
  }

  /** @type {!Object} */
  var httpRequestParams = {
    method: 'POST',
    url: path,
    json: true,
            params: queryParameters,
    headers: headerParams
  };

  if (opt_extraHttpRequestParams) {
    httpRequestParams = angular.extend(httpRequestParams, opt_extraHttpRequestParams);
  }

  return (/** @type {?} */ (this.http_))(httpRequestParams);
}

/**
 * 
 * 
 * @param {!boolean=} opt_post 
 * @param {!boolean=} opt_apply 
 * @param {!boolean=} opt_delete 
 * @param {!string=} opt_action 
 * @param {!string=} opt_location 
 * @param {!Array<!string>=} opt_propertylist 
 * @param {!number=} opt_cqCommerceCataloggeneratorBucketsize 
 * @param {!string=} opt_cqCommerceCataloggeneratorBucketname 
 * @param {!Array<!string>=} opt_cqCommerceCataloggeneratorExcludedtemplateproperties 
 * @param {!angular.$http.Config=} opt_extraHttpRequestParams Extra HTTP parameters to send.
 * @return {!angular.$q.Promise<!API.Client.comAdobeCqCommercePimImplCataloggeneratorCatalogGeneratorImplInfo>}
 */
API.Client.ConfigmgrApi.prototype.comAdobeCqCommercePimImplCataloggeneratorCatalogGeneratorImpl = function(opt_post, opt_apply, opt_delete, opt_action, opt_location, opt_propertylist, opt_cqCommerceCataloggeneratorBucketsize, opt_cqCommerceCataloggeneratorBucketname, opt_cqCommerceCataloggeneratorExcludedtemplateproperties, opt_extraHttpRequestParams) {
  /** @const {string} */
  var path = this.basePath_ + '/system/console/configMgr/com.adobe.cq.commerce.pim.impl.cataloggenerator.CatalogGeneratorImpl';

  /** @type {!Object} */
  var queryParameters = {};

  /** @type {!Object} */
  var headerParams = angular.extend({}, this.defaultHeaders_);
  if (opt_post !== undefined) {
    queryParameters['post'] = opt_post;
  }

  if (opt_apply !== undefined) {
    queryParameters['apply'] = opt_apply;
  }

  if (opt_delete !== undefined) {
    queryParameters['delete'] = opt_delete;
  }

  if (opt_action !== undefined) {
    queryParameters['action'] = opt_action;
  }

  if (opt_location !== undefined) {
    queryParameters['$location'] = opt_location;
  }

  if (opt_propertylist !== undefined) {
    queryParameters['propertylist'] = opt_propertylist;
  }

  if (opt_cqCommerceCataloggeneratorBucketsize !== undefined) {
    queryParameters['cq.commerce.cataloggenerator.bucketsize'] = opt_cqCommerceCataloggeneratorBucketsize;
  }

  if (opt_cqCommerceCataloggeneratorBucketname !== undefined) {
    queryParameters['cq.commerce.cataloggenerator.bucketname'] = opt_cqCommerceCataloggeneratorBucketname;
  }

  if (opt_cqCommerceCataloggeneratorExcludedtemplateproperties !== undefined) {
    queryParameters['cq.commerce.cataloggenerator.excludedtemplateproperties'] = opt_cqCommerceCataloggeneratorExcludedtemplateproperties;
  }

  /** @type {!Object} */
  var httpRequestParams = {
    method: 'POST',
    url: path,
    json: true,
            params: queryParameters,
    headers: headerParams
  };

  if (opt_extraHttpRequestParams) {
    httpRequestParams = angular.extend(httpRequestParams, opt_extraHttpRequestParams);
  }

  return (/** @type {?} */ (this.http_))(httpRequestParams);
}

/**
 * 
 * 
 * @param {!boolean=} opt_post 
 * @param {!boolean=} opt_apply 
 * @param {!boolean=} opt_delete 
 * @param {!string=} opt_action 
 * @param {!string=} opt_location 
 * @param {!Array<!string>=} opt_propertylist 
 * @param {!boolean=} opt_cqCommercePageeventlistenerEnabled 
 * @param {!angular.$http.Config=} opt_extraHttpRequestParams Extra HTTP parameters to send.
 * @return {!angular.$q.Promise<!API.Client.comAdobeCqCommercePimImplPageEventListenerInfo>}
 */
API.Client.ConfigmgrApi.prototype.comAdobeCqCommercePimImplPageEventListener = function(opt_post, opt_apply, opt_delete, opt_action, opt_location, opt_propertylist, opt_cqCommercePageeventlistenerEnabled, opt_extraHttpRequestParams) {
  /** @const {string} */
  var path = this.basePath_ + '/system/console/configMgr/com.adobe.cq.commerce.pim.impl.PageEventListener';

  /** @type {!Object} */
  var queryParameters = {};

  /** @type {!Object} */
  var headerParams = angular.extend({}, this.defaultHeaders_);
  if (opt_post !== undefined) {
    queryParameters['post'] = opt_post;
  }

  if (opt_apply !== undefined) {
    queryParameters['apply'] = opt_apply;
  }

  if (opt_delete !== undefined) {
    queryParameters['delete'] = opt_delete;
  }

  if (opt_action !== undefined) {
    queryParameters['action'] = opt_action;
  }

  if (opt_location !== undefined) {
    queryParameters['$location'] = opt_location;
  }

  if (opt_propertylist !== undefined) {
    queryParameters['propertylist'] = opt_propertylist;
  }

  if (opt_cqCommercePageeventlistenerEnabled !== undefined) {
    queryParameters['cq.commerce.pageeventlistener.enabled'] = opt_cqCommercePageeventlistenerEnabled;
  }

  /** @type {!Object} */
  var httpRequestParams = {
    method: 'POST',
    url: path,
    json: true,
            params: queryParameters,
    headers: headerParams
  };

  if (opt_extraHttpRequestParams) {
    httpRequestParams = angular.extend(httpRequestParams, opt_extraHttpRequestParams);
  }

  return (/** @type {?} */ (this.http_))(httpRequestParams);
}

/**
 * 
 * 
 * @param {!boolean=} opt_post 
 * @param {!boolean=} opt_apply 
 * @param {!boolean=} opt_delete 
 * @param {!string=} opt_action 
 * @param {!string=} opt_location 
 * @param {!Array<!string>=} opt_propertylist 
 * @param {!string=} opt_feedGeneratorAlgorithm 
 * @param {!angular.$http.Config=} opt_extraHttpRequestParams Extra HTTP parameters to send.
 * @return {!angular.$q.Promise<!API.Client.comAdobeCqCommercePimImplProductfeedProductFeedServiceImplInfo>}
 */
API.Client.ConfigmgrApi.prototype.comAdobeCqCommercePimImplProductfeedProductFeedServiceImpl = function(opt_post, opt_apply, opt_delete, opt_action, opt_location, opt_propertylist, opt_feedGeneratorAlgorithm, opt_extraHttpRequestParams) {
  /** @const {string} */
  var path = this.basePath_ + '/system/console/configMgr/com.adobe.cq.commerce.pim.impl.productfeed.ProductFeedServiceImpl';

  /** @type {!Object} */
  var queryParameters = {};

  /** @type {!Object} */
  var headerParams = angular.extend({}, this.defaultHeaders_);
  if (opt_post !== undefined) {
    queryParameters['post'] = opt_post;
  }

  if (opt_apply !== undefined) {
    queryParameters['apply'] = opt_apply;
  }

  if (opt_delete !== undefined) {
    queryParameters['delete'] = opt_delete;
  }

  if (opt_action !== undefined) {
    queryParameters['action'] = opt_action;
  }

  if (opt_location !== undefined) {
    queryParameters['$location'] = opt_location;
  }

  if (opt_propertylist !== undefined) {
    queryParameters['propertylist'] = opt_propertylist;
  }

  if (opt_feedGeneratorAlgorithm !== undefined) {
    queryParameters['Feed generator algorithm'] = opt_feedGeneratorAlgorithm;
  }

  /** @type {!Object} */
  var httpRequestParams = {
    method: 'POST',
    url: path,
    json: true,
            params: queryParameters,
    headers: headerParams
  };

  if (opt_extraHttpRequestParams) {
    httpRequestParams = angular.extend(httpRequestParams, opt_extraHttpRequestParams);
  }

  return (/** @type {?} */ (this.http_))(httpRequestParams);
}

/**
 * 
 * 
 * @param {!boolean=} opt_post 
 * @param {!boolean=} opt_apply 
 * @param {!boolean=} opt_delete 
 * @param {!string=} opt_action 
 * @param {!string=} opt_location 
 * @param {!Array<!string>=} opt_propertylist 
 * @param {!string=} opt_reportingservicesUrl 
 * @param {!angular.$http.Config=} opt_extraHttpRequestParams Extra HTTP parameters to send.
 * @return {!angular.$q.Promise<!API.Client.comAdobeCqContentinsightImplReportingServicesSettingsProviderInfo>}
 */
API.Client.ConfigmgrApi.prototype.comAdobeCqContentinsightImplReportingServicesSettingsProvider = function(opt_post, opt_apply, opt_delete, opt_action, opt_location, opt_propertylist, opt_reportingservicesUrl, opt_extraHttpRequestParams) {
  /** @const {string} */
  var path = this.basePath_ + '/system/console/configMgr/com.adobe.cq.contentinsight.impl.ReportingServicesSettingsProvider';

  /** @type {!Object} */
  var queryParameters = {};

  /** @type {!Object} */
  var headerParams = angular.extend({}, this.defaultHeaders_);
  if (opt_post !== undefined) {
    queryParameters['post'] = opt_post;
  }

  if (opt_apply !== undefined) {
    queryParameters['apply'] = opt_apply;
  }

  if (opt_delete !== undefined) {
    queryParameters['delete'] = opt_delete;
  }

  if (opt_action !== undefined) {
    queryParameters['action'] = opt_action;
  }

  if (opt_location !== undefined) {
    queryParameters['$location'] = opt_location;
  }

  if (opt_propertylist !== undefined) {
    queryParameters['propertylist'] = opt_propertylist;
  }

  if (opt_reportingservicesUrl !== undefined) {
    queryParameters['reportingservices.url'] = opt_reportingservicesUrl;
  }

  /** @type {!Object} */
  var httpRequestParams = {
    method: 'POST',
    url: path,
    json: true,
            params: queryParameters,
    headers: headerParams
  };

  if (opt_extraHttpRequestParams) {
    httpRequestParams = angular.extend(httpRequestParams, opt_extraHttpRequestParams);
  }

  return (/** @type {?} */ (this.http_))(httpRequestParams);
}

/**
 * 
 * 
 * @param {!boolean=} opt_post 
 * @param {!boolean=} opt_apply 
 * @param {!boolean=} opt_delete 
 * @param {!string=} opt_action 
 * @param {!string=} opt_location 
 * @param {!Array<!string>=} opt_propertylist 
 * @param {!string=} opt_brightedgeUrl 
 * @param {!angular.$http.Config=} opt_extraHttpRequestParams Extra HTTP parameters to send.
 * @return {!angular.$q.Promise<!API.Client.comAdobeCqContentinsightImplServletsBrightEdgeProxyServletInfo>}
 */
API.Client.ConfigmgrApi.prototype.comAdobeCqContentinsightImplServletsBrightEdgeProxyServlet = function(opt_post, opt_apply, opt_delete, opt_action, opt_location, opt_propertylist, opt_brightedgeUrl, opt_extraHttpRequestParams) {
  /** @const {string} */
  var path = this.basePath_ + '/system/console/configMgr/com.adobe.cq.contentinsight.impl.servlets.BrightEdgeProxyServlet';

  /** @type {!Object} */
  var queryParameters = {};

  /** @type {!Object} */
  var headerParams = angular.extend({}, this.defaultHeaders_);
  if (opt_post !== undefined) {
    queryParameters['post'] = opt_post;
  }

  if (opt_apply !== undefined) {
    queryParameters['apply'] = opt_apply;
  }

  if (opt_delete !== undefined) {
    queryParameters['delete'] = opt_delete;
  }

  if (opt_action !== undefined) {
    queryParameters['action'] = opt_action;
  }

  if (opt_location !== undefined) {
    queryParameters['$location'] = opt_location;
  }

  if (opt_propertylist !== undefined) {
    queryParameters['propertylist'] = opt_propertylist;
  }

  if (opt_brightedgeUrl !== undefined) {
    queryParameters['brightedge.url'] = opt_brightedgeUrl;
  }

  /** @type {!Object} */
  var httpRequestParams = {
    method: 'POST',
    url: path,
    json: true,
            params: queryParameters,
    headers: headerParams
  };

  if (opt_extraHttpRequestParams) {
    httpRequestParams = angular.extend(httpRequestParams, opt_extraHttpRequestParams);
  }

  return (/** @type {?} */ (this.http_))(httpRequestParams);
}

/**
 * 
 * 
 * @param {!boolean=} opt_post 
 * @param {!boolean=} opt_apply 
 * @param {!boolean=} opt_delete 
 * @param {!string=} opt_action 
 * @param {!string=} opt_location 
 * @param {!Array<!string>=} opt_propertylist 
 * @param {!Array<!string>=} opt_reportingservicesProxyWhitelist 
 * @param {!angular.$http.Config=} opt_extraHttpRequestParams Extra HTTP parameters to send.
 * @return {!angular.$q.Promise<!API.Client.comAdobeCqContentinsightImplServletsReportingServicesProxyServleInfo>}
 */
API.Client.ConfigmgrApi.prototype.comAdobeCqContentinsightImplServletsReportingServicesProxyServle = function(opt_post, opt_apply, opt_delete, opt_action, opt_location, opt_propertylist, opt_reportingservicesProxyWhitelist, opt_extraHttpRequestParams) {
  /** @const {string} */
  var path = this.basePath_ + '/system/console/configMgr/com.adobe.cq.contentinsight.impl.servlets.ReportingServicesProxyServlet';

  /** @type {!Object} */
  var queryParameters = {};

  /** @type {!Object} */
  var headerParams = angular.extend({}, this.defaultHeaders_);
  if (opt_post !== undefined) {
    queryParameters['post'] = opt_post;
  }

  if (opt_apply !== undefined) {
    queryParameters['apply'] = opt_apply;
  }

  if (opt_delete !== undefined) {
    queryParameters['delete'] = opt_delete;
  }

  if (opt_action !== undefined) {
    queryParameters['action'] = opt_action;
  }

  if (opt_location !== undefined) {
    queryParameters['$location'] = opt_location;
  }

  if (opt_propertylist !== undefined) {
    queryParameters['propertylist'] = opt_propertylist;
  }

  if (opt_reportingservicesProxyWhitelist !== undefined) {
    queryParameters['reportingservices.proxy.whitelist'] = opt_reportingservicesProxyWhitelist;
  }

  /** @type {!Object} */
  var httpRequestParams = {
    method: 'POST',
    url: path,
    json: true,
            params: queryParameters,
    headers: headerParams
  };

  if (opt_extraHttpRequestParams) {
    httpRequestParams = angular.extend(httpRequestParams, opt_extraHttpRequestParams);
  }

  return (/** @type {?} */ (this.http_))(httpRequestParams);
}

/**
 * 
 * 
 * @param {!boolean=} opt_post 
 * @param {!boolean=} opt_apply 
 * @param {!boolean=} opt_delete 
 * @param {!string=} opt_action 
 * @param {!string=} opt_location 
 * @param {!Array<!string>=} opt_propertylist 
 * @param {!string=} opt_damCfmComponentResourceType 
 * @param {!string=} opt_damCfmComponentFileReferenceProp 
 * @param {!string=} opt_damCfmComponentElementsProp 
 * @param {!string=} opt_damCfmComponentVariationProp 
 * @param {!angular.$http.Config=} opt_extraHttpRequestParams Extra HTTP parameters to send.
 * @return {!angular.$q.Promise<!API.Client.comAdobeCqDamCfmImplComponentComponentConfigImplInfo>}
 */
API.Client.ConfigmgrApi.prototype.comAdobeCqDamCfmImplComponentComponentConfigImpl = function(opt_post, opt_apply, opt_delete, opt_action, opt_location, opt_propertylist, opt_damCfmComponentResourceType, opt_damCfmComponentFileReferenceProp, opt_damCfmComponentElementsProp, opt_damCfmComponentVariationProp, opt_extraHttpRequestParams) {
  /** @const {string} */
  var path = this.basePath_ + '/system/console/configMgr/com.adobe.cq.dam.cfm.impl.component.ComponentConfigImpl';

  /** @type {!Object} */
  var queryParameters = {};

  /** @type {!Object} */
  var headerParams = angular.extend({}, this.defaultHeaders_);
  if (opt_post !== undefined) {
    queryParameters['post'] = opt_post;
  }

  if (opt_apply !== undefined) {
    queryParameters['apply'] = opt_apply;
  }

  if (opt_delete !== undefined) {
    queryParameters['delete'] = opt_delete;
  }

  if (opt_action !== undefined) {
    queryParameters['action'] = opt_action;
  }

  if (opt_location !== undefined) {
    queryParameters['$location'] = opt_location;
  }

  if (opt_propertylist !== undefined) {
    queryParameters['propertylist'] = opt_propertylist;
  }

  if (opt_damCfmComponentResourceType !== undefined) {
    queryParameters['dam.cfm.component.resourceType'] = opt_damCfmComponentResourceType;
  }

  if (opt_damCfmComponentFileReferenceProp !== undefined) {
    queryParameters['dam.cfm.component.fileReferenceProp'] = opt_damCfmComponentFileReferenceProp;
  }

  if (opt_damCfmComponentElementsProp !== undefined) {
    queryParameters['dam.cfm.component.elementsProp'] = opt_damCfmComponentElementsProp;
  }

  if (opt_damCfmComponentVariationProp !== undefined) {
    queryParameters['dam.cfm.component.variationProp'] = opt_damCfmComponentVariationProp;
  }

  /** @type {!Object} */
  var httpRequestParams = {
    method: 'POST',
    url: path,
    json: true,
            params: queryParameters,
    headers: headerParams
  };

  if (opt_extraHttpRequestParams) {
    httpRequestParams = angular.extend(httpRequestParams, opt_extraHttpRequestParams);
  }

  return (/** @type {?} */ (this.http_))(httpRequestParams);
}

/**
 * 
 * 
 * @param {!boolean=} opt_post 
 * @param {!boolean=} opt_apply 
 * @param {!boolean=} opt_delete 
 * @param {!string=} opt_action 
 * @param {!string=} opt_location 
 * @param {!Array<!string>=} opt_propertylist 
 * @param {!Array<!string>=} opt_damCfmResourceTypes 
 * @param {!Array<!string>=} opt_damCfmReferenceProperties 
 * @param {!angular.$http.Config=} opt_extraHttpRequestParams Extra HTTP parameters to send.
 * @return {!angular.$q.Promise<!API.Client.comAdobeCqDamCfmImplConfFeatureConfigImplInfo>}
 */
API.Client.ConfigmgrApi.prototype.comAdobeCqDamCfmImplConfFeatureConfigImpl = function(opt_post, opt_apply, opt_delete, opt_action, opt_location, opt_propertylist, opt_damCfmResourceTypes, opt_damCfmReferenceProperties, opt_extraHttpRequestParams) {
  /** @const {string} */
  var path = this.basePath_ + '/system/console/configMgr/com.adobe.cq.dam.cfm.impl.conf.FeatureConfigImpl';

  /** @type {!Object} */
  var queryParameters = {};

  /** @type {!Object} */
  var headerParams = angular.extend({}, this.defaultHeaders_);
  if (opt_post !== undefined) {
    queryParameters['post'] = opt_post;
  }

  if (opt_apply !== undefined) {
    queryParameters['apply'] = opt_apply;
  }

  if (opt_delete !== undefined) {
    queryParameters['delete'] = opt_delete;
  }

  if (opt_action !== undefined) {
    queryParameters['action'] = opt_action;
  }

  if (opt_location !== undefined) {
    queryParameters['$location'] = opt_location;
  }

  if (opt_propertylist !== undefined) {
    queryParameters['propertylist'] = opt_propertylist;
  }

  if (opt_damCfmResourceTypes !== undefined) {
    queryParameters['dam.cfm.resourceTypes'] = opt_damCfmResourceTypes;
  }

  if (opt_damCfmReferenceProperties !== undefined) {
    queryParameters['dam.cfm.referenceProperties'] = opt_damCfmReferenceProperties;
  }

  /** @type {!Object} */
  var httpRequestParams = {
    method: 'POST',
    url: path,
    json: true,
            params: queryParameters,
    headers: headerParams
  };

  if (opt_extraHttpRequestParams) {
    httpRequestParams = angular.extend(httpRequestParams, opt_extraHttpRequestParams);
  }

  return (/** @type {?} */ (this.http_))(httpRequestParams);
}

/**
 * 
 * 
 * @param {!boolean=} opt_post 
 * @param {!boolean=} opt_apply 
 * @param {!boolean=} opt_delete 
 * @param {!string=} opt_action 
 * @param {!string=} opt_location 
 * @param {!Array<!string>=} opt_propertylist 
 * @param {!string=} opt_pipelineType 
 * @param {!angular.$http.Config=} opt_extraHttpRequestParams Extra HTTP parameters to send.
 * @return {!angular.$q.Promise<!API.Client.comAdobeCqDamCfmImplContentRewriterAssetProcessorInfo>}
 */
API.Client.ConfigmgrApi.prototype.comAdobeCqDamCfmImplContentRewriterAssetProcessor = function(opt_post, opt_apply, opt_delete, opt_action, opt_location, opt_propertylist, opt_pipelineType, opt_extraHttpRequestParams) {
  /** @const {string} */
  var path = this.basePath_ + '/system/console/configMgr/com.adobe.cq.dam.cfm.impl.content.rewriter.AssetProcessor';

  /** @type {!Object} */
  var queryParameters = {};

  /** @type {!Object} */
  var headerParams = angular.extend({}, this.defaultHeaders_);
  if (opt_post !== undefined) {
    queryParameters['post'] = opt_post;
  }

  if (opt_apply !== undefined) {
    queryParameters['apply'] = opt_apply;
  }

  if (opt_delete !== undefined) {
    queryParameters['delete'] = opt_delete;
  }

  if (opt_action !== undefined) {
    queryParameters['action'] = opt_action;
  }

  if (opt_location !== undefined) {
    queryParameters['$location'] = opt_location;
  }

  if (opt_propertylist !== undefined) {
    queryParameters['propertylist'] = opt_propertylist;
  }

  if (opt_pipelineType !== undefined) {
    queryParameters['pipeline.type'] = opt_pipelineType;
  }

  /** @type {!Object} */
  var httpRequestParams = {
    method: 'POST',
    url: path,
    json: true,
            params: queryParameters,
    headers: headerParams
  };

  if (opt_extraHttpRequestParams) {
    httpRequestParams = angular.extend(httpRequestParams, opt_extraHttpRequestParams);
  }

  return (/** @type {?} */ (this.http_))(httpRequestParams);
}

/**
 * 
 * 
 * @param {!boolean=} opt_post 
 * @param {!boolean=} opt_apply 
 * @param {!boolean=} opt_delete 
 * @param {!string=} opt_action 
 * @param {!string=} opt_location 
 * @param {!Array<!string>=} opt_propertylist 
 * @param {!string=} opt_pipelineType 
 * @param {!angular.$http.Config=} opt_extraHttpRequestParams Extra HTTP parameters to send.
 * @return {!angular.$q.Promise<!API.Client.comAdobeCqDamCfmImplContentRewriterParRangeFilterInfo>}
 */
API.Client.ConfigmgrApi.prototype.comAdobeCqDamCfmImplContentRewriterParRangeFilter = function(opt_post, opt_apply, opt_delete, opt_action, opt_location, opt_propertylist, opt_pipelineType, opt_extraHttpRequestParams) {
  /** @const {string} */
  var path = this.basePath_ + '/system/console/configMgr/com.adobe.cq.dam.cfm.impl.content.rewriter.ParRangeFilter';

  /** @type {!Object} */
  var queryParameters = {};

  /** @type {!Object} */
  var headerParams = angular.extend({}, this.defaultHeaders_);
  if (opt_post !== undefined) {
    queryParameters['post'] = opt_post;
  }

  if (opt_apply !== undefined) {
    queryParameters['apply'] = opt_apply;
  }

  if (opt_delete !== undefined) {
    queryParameters['delete'] = opt_delete;
  }

  if (opt_action !== undefined) {
    queryParameters['action'] = opt_action;
  }

  if (opt_location !== undefined) {
    queryParameters['$location'] = opt_location;
  }

  if (opt_propertylist !== undefined) {
    queryParameters['propertylist'] = opt_propertylist;
  }

  if (opt_pipelineType !== undefined) {
    queryParameters['pipeline.type'] = opt_pipelineType;
  }

  /** @type {!Object} */
  var httpRequestParams = {
    method: 'POST',
    url: path,
    json: true,
            params: queryParameters,
    headers: headerParams
  };

  if (opt_extraHttpRequestParams) {
    httpRequestParams = angular.extend(httpRequestParams, opt_extraHttpRequestParams);
  }

  return (/** @type {?} */ (this.http_))(httpRequestParams);
}

/**
 * 
 * 
 * @param {!boolean=} opt_post 
 * @param {!boolean=} opt_apply 
 * @param {!boolean=} opt_delete 
 * @param {!string=} opt_action 
 * @param {!string=} opt_location 
 * @param {!Array<!string>=} opt_propertylist 
 * @param {!string=} opt_pipelineType 
 * @param {!angular.$http.Config=} opt_extraHttpRequestParams Extra HTTP parameters to send.
 * @return {!angular.$q.Promise<!API.Client.comAdobeCqDamCfmImplContentRewriterPayloadFilterInfo>}
 */
API.Client.ConfigmgrApi.prototype.comAdobeCqDamCfmImplContentRewriterPayloadFilter = function(opt_post, opt_apply, opt_delete, opt_action, opt_location, opt_propertylist, opt_pipelineType, opt_extraHttpRequestParams) {
  /** @const {string} */
  var path = this.basePath_ + '/system/console/configMgr/com.adobe.cq.dam.cfm.impl.content.rewriter.PayloadFilter';

  /** @type {!Object} */
  var queryParameters = {};

  /** @type {!Object} */
  var headerParams = angular.extend({}, this.defaultHeaders_);
  if (opt_post !== undefined) {
    queryParameters['post'] = opt_post;
  }

  if (opt_apply !== undefined) {
    queryParameters['apply'] = opt_apply;
  }

  if (opt_delete !== undefined) {
    queryParameters['delete'] = opt_delete;
  }

  if (opt_action !== undefined) {
    queryParameters['action'] = opt_action;
  }

  if (opt_location !== undefined) {
    queryParameters['$location'] = opt_location;
  }

  if (opt_propertylist !== undefined) {
    queryParameters['propertylist'] = opt_propertylist;
  }

  if (opt_pipelineType !== undefined) {
    queryParameters['pipeline.type'] = opt_pipelineType;
  }

  /** @type {!Object} */
  var httpRequestParams = {
    method: 'POST',
    url: path,
    json: true,
            params: queryParameters,
    headers: headerParams
  };

  if (opt_extraHttpRequestParams) {
    httpRequestParams = angular.extend(httpRequestParams, opt_extraHttpRequestParams);
  }

  return (/** @type {?} */ (this.http_))(httpRequestParams);
}

/**
 * 
 * 
 * @param {!boolean=} opt_post 
 * @param {!boolean=} opt_apply 
 * @param {!boolean=} opt_delete 
 * @param {!string=} opt_action 
 * @param {!string=} opt_location 
 * @param {!Array<!string>=} opt_propertylist 
 * @param {!number=} opt_maxMemory 
 * @param {!angular.$http.Config=} opt_extraHttpRequestParams Extra HTTP parameters to send.
 * @return {!angular.$q.Promise<!API.Client.comAdobeCqDamDmProcessImagePTiffManagerImplInfo>}
 */
API.Client.ConfigmgrApi.prototype.comAdobeCqDamDmProcessImagePTiffManagerImpl = function(opt_post, opt_apply, opt_delete, opt_action, opt_location, opt_propertylist, opt_maxMemory, opt_extraHttpRequestParams) {
  /** @const {string} */
  var path = this.basePath_ + '/system/console/configMgr/com.adobe.cq.dam.dm.process.image.PTiffManagerImpl';

  /** @type {!Object} */
  var queryParameters = {};

  /** @type {!Object} */
  var headerParams = angular.extend({}, this.defaultHeaders_);
  if (opt_post !== undefined) {
    queryParameters['post'] = opt_post;
  }

  if (opt_apply !== undefined) {
    queryParameters['apply'] = opt_apply;
  }

  if (opt_delete !== undefined) {
    queryParameters['delete'] = opt_delete;
  }

  if (opt_action !== undefined) {
    queryParameters['action'] = opt_action;
  }

  if (opt_location !== undefined) {
    queryParameters['$location'] = opt_location;
  }

  if (opt_propertylist !== undefined) {
    queryParameters['propertylist'] = opt_propertylist;
  }

  if (opt_maxMemory !== undefined) {
    queryParameters['maxMemory'] = opt_maxMemory;
  }

  /** @type {!Object} */
  var httpRequestParams = {
    method: 'POST',
    url: path,
    json: true,
            params: queryParameters,
    headers: headerParams
  };

  if (opt_extraHttpRequestParams) {
    httpRequestParams = angular.extend(httpRequestParams, opt_extraHttpRequestParams);
  }

  return (/** @type {?} */ (this.http_))(httpRequestParams);
}

/**
 * 
 * 
 * @param {!boolean=} opt_post 
 * @param {!boolean=} opt_apply 
 * @param {!boolean=} opt_delete 
 * @param {!string=} opt_action 
 * @param {!string=} opt_location 
 * @param {!Array<!string>=} opt_propertylist 
 * @param {!boolean=} opt_dmreplicateonmodifyEnabled 
 * @param {!boolean=} opt_dmreplicateonmodifyForcesyncdeletes 
 * @param {!angular.$http.Config=} opt_extraHttpRequestParams Extra HTTP parameters to send.
 * @return {!angular.$q.Promise<!API.Client.comAdobeCqDamIpsImplReplicationTriggerReplicateOnModifyWorkerInfo>}
 */
API.Client.ConfigmgrApi.prototype.comAdobeCqDamIpsImplReplicationTriggerReplicateOnModifyWorker = function(opt_post, opt_apply, opt_delete, opt_action, opt_location, opt_propertylist, opt_dmreplicateonmodifyEnabled, opt_dmreplicateonmodifyForcesyncdeletes, opt_extraHttpRequestParams) {
  /** @const {string} */
  var path = this.basePath_ + '/system/console/configMgr/com.adobe.cq.dam.ips.impl.replication.trigger.ReplicateOnModifyWorker';

  /** @type {!Object} */
  var queryParameters = {};

  /** @type {!Object} */
  var headerParams = angular.extend({}, this.defaultHeaders_);
  if (opt_post !== undefined) {
    queryParameters['post'] = opt_post;
  }

  if (opt_apply !== undefined) {
    queryParameters['apply'] = opt_apply;
  }

  if (opt_delete !== undefined) {
    queryParameters['delete'] = opt_delete;
  }

  if (opt_action !== undefined) {
    queryParameters['action'] = opt_action;
  }

  if (opt_location !== undefined) {
    queryParameters['$location'] = opt_location;
  }

  if (opt_propertylist !== undefined) {
    queryParameters['propertylist'] = opt_propertylist;
  }

  if (opt_dmreplicateonmodifyEnabled !== undefined) {
    queryParameters['dmreplicateonmodify.enabled'] = opt_dmreplicateonmodifyEnabled;
  }

  if (opt_dmreplicateonmodifyForcesyncdeletes !== undefined) {
    queryParameters['dmreplicateonmodify.forcesyncdeletes'] = opt_dmreplicateonmodifyForcesyncdeletes;
  }

  /** @type {!Object} */
  var httpRequestParams = {
    method: 'POST',
    url: path,
    json: true,
            params: queryParameters,
    headers: headerParams
  };

  if (opt_extraHttpRequestParams) {
    httpRequestParams = angular.extend(httpRequestParams, opt_extraHttpRequestParams);
  }

  return (/** @type {?} */ (this.http_))(httpRequestParams);
}

/**
 * 
 * 
 * @param {!boolean=} opt_post 
 * @param {!boolean=} opt_apply 
 * @param {!boolean=} opt_delete 
 * @param {!string=} opt_action 
 * @param {!string=} opt_location 
 * @param {!Array<!string>=} opt_propertylist 
 * @param {!number=} opt_comAdobeDamMacSyncClientSoTimeout 
 * @param {!angular.$http.Config=} opt_extraHttpRequestParams Extra HTTP parameters to send.
 * @return {!angular.$q.Promise<!API.Client.comAdobeCqDamMacSyncHelperImplMACSyncClientImplInfo>}
 */
API.Client.ConfigmgrApi.prototype.comAdobeCqDamMacSyncHelperImplMACSyncClientImpl = function(opt_post, opt_apply, opt_delete, opt_action, opt_location, opt_propertylist, opt_comAdobeDamMacSyncClientSoTimeout, opt_extraHttpRequestParams) {
  /** @const {string} */
  var path = this.basePath_ + '/system/console/configMgr/com.adobe.cq.dam.mac.sync.helper.impl.MACSyncClientImpl';

  /** @type {!Object} */
  var queryParameters = {};

  /** @type {!Object} */
  var headerParams = angular.extend({}, this.defaultHeaders_);
  if (opt_post !== undefined) {
    queryParameters['post'] = opt_post;
  }

  if (opt_apply !== undefined) {
    queryParameters['apply'] = opt_apply;
  }

  if (opt_delete !== undefined) {
    queryParameters['delete'] = opt_delete;
  }

  if (opt_action !== undefined) {
    queryParameters['action'] = opt_action;
  }

  if (opt_location !== undefined) {
    queryParameters['$location'] = opt_location;
  }

  if (opt_propertylist !== undefined) {
    queryParameters['propertylist'] = opt_propertylist;
  }

  if (opt_comAdobeDamMacSyncClientSoTimeout !== undefined) {
    queryParameters['com.adobe.dam.mac.sync.client.so.timeout'] = opt_comAdobeDamMacSyncClientSoTimeout;
  }

  /** @type {!Object} */
  var httpRequestParams = {
    method: 'POST',
    url: path,
    json: true,
            params: queryParameters,
    headers: headerParams
  };

  if (opt_extraHttpRequestParams) {
    httpRequestParams = angular.extend(httpRequestParams, opt_extraHttpRequestParams);
  }

  return (/** @type {?} */ (this.http_))(httpRequestParams);
}

/**
 * 
 * 
 * @param {!boolean=} opt_post 
 * @param {!boolean=} opt_apply 
 * @param {!boolean=} opt_delete 
 * @param {!string=} opt_action 
 * @param {!string=} opt_location 
 * @param {!Array<!string>=} opt_propertylist 
 * @param {!Array<!string>=} opt_comAdobeCqDamMacSyncDamsyncserviceRegisteredPaths 
 * @param {!boolean=} opt_comAdobeCqDamMacSyncDamsyncserviceSyncRenditions 
 * @param {!number=} opt_comAdobeCqDamMacSyncDamsyncserviceReplicateThreadWaitMs 
 * @param {!string=} opt_comAdobeCqDamMacSyncDamsyncservicePlatform 
 * @param {!angular.$http.Config=} opt_extraHttpRequestParams Extra HTTP parameters to send.
 * @return {!angular.$q.Promise<!API.Client.comAdobeCqDamMacSyncImplDAMSyncServiceImplInfo>}
 */
API.Client.ConfigmgrApi.prototype.comAdobeCqDamMacSyncImplDAMSyncServiceImpl = function(opt_post, opt_apply, opt_delete, opt_action, opt_location, opt_propertylist, opt_comAdobeCqDamMacSyncDamsyncserviceRegisteredPaths, opt_comAdobeCqDamMacSyncDamsyncserviceSyncRenditions, opt_comAdobeCqDamMacSyncDamsyncserviceReplicateThreadWaitMs, opt_comAdobeCqDamMacSyncDamsyncservicePlatform, opt_extraHttpRequestParams) {
  /** @const {string} */
  var path = this.basePath_ + '/system/console/configMgr/com.adobe.cq.dam.mac.sync.impl.DAMSyncServiceImpl';

  /** @type {!Object} */
  var queryParameters = {};

  /** @type {!Object} */
  var headerParams = angular.extend({}, this.defaultHeaders_);
  if (opt_post !== undefined) {
    queryParameters['post'] = opt_post;
  }

  if (opt_apply !== undefined) {
    queryParameters['apply'] = opt_apply;
  }

  if (opt_delete !== undefined) {
    queryParameters['delete'] = opt_delete;
  }

  if (opt_action !== undefined) {
    queryParameters['action'] = opt_action;
  }

  if (opt_location !== undefined) {
    queryParameters['$location'] = opt_location;
  }

  if (opt_propertylist !== undefined) {
    queryParameters['propertylist'] = opt_propertylist;
  }

  if (opt_comAdobeCqDamMacSyncDamsyncserviceRegisteredPaths !== undefined) {
    queryParameters['com.adobe.cq.dam.mac.sync.damsyncservice.registered_paths'] = opt_comAdobeCqDamMacSyncDamsyncserviceRegisteredPaths;
  }

  if (opt_comAdobeCqDamMacSyncDamsyncserviceSyncRenditions !== undefined) {
    queryParameters['com.adobe.cq.dam.mac.sync.damsyncservice.sync.renditions'] = opt_comAdobeCqDamMacSyncDamsyncserviceSyncRenditions;
  }

  if (opt_comAdobeCqDamMacSyncDamsyncserviceReplicateThreadWaitMs !== undefined) {
    queryParameters['com.adobe.cq.dam.mac.sync.damsyncservice.replicate.thread.wait.ms'] = opt_comAdobeCqDamMacSyncDamsyncserviceReplicateThreadWaitMs;
  }

  if (opt_comAdobeCqDamMacSyncDamsyncservicePlatform !== undefined) {
    queryParameters['com.adobe.cq.dam.mac.sync.damsyncservice.platform'] = opt_comAdobeCqDamMacSyncDamsyncservicePlatform;
  }

  /** @type {!Object} */
  var httpRequestParams = {
    method: 'POST',
    url: path,
    json: true,
            params: queryParameters,
    headers: headerParams
  };

  if (opt_extraHttpRequestParams) {
    httpRequestParams = angular.extend(httpRequestParams, opt_extraHttpRequestParams);
  }

  return (/** @type {?} */ (this.http_))(httpRequestParams);
}

/**
 * 
 * 
 * @param {!boolean=} opt_post 
 * @param {!boolean=} opt_apply 
 * @param {!boolean=} opt_delete 
 * @param {!string=} opt_action 
 * @param {!string=} opt_location 
 * @param {!Array<!string>=} opt_propertylist 
 * @param {!boolean=} opt_nuiEnabled 
 * @param {!string=} opt_nuiServiceUrl 
 * @param {!string=} opt_nuiApiKey 
 * @param {!angular.$http.Config=} opt_extraHttpRequestParams Extra HTTP parameters to send.
 * @return {!angular.$q.Promise<!API.Client.comAdobeCqDamProcessorNuiImplNuiAssetProcessorInfo>}
 */
API.Client.ConfigmgrApi.prototype.comAdobeCqDamProcessorNuiImplNuiAssetProcessor = function(opt_post, opt_apply, opt_delete, opt_action, opt_location, opt_propertylist, opt_nuiEnabled, opt_nuiServiceUrl, opt_nuiApiKey, opt_extraHttpRequestParams) {
  /** @const {string} */
  var path = this.basePath_ + '/system/console/configMgr/com.adobe.cq.dam.processor.nui.impl.NuiAssetProcessor';

  /** @type {!Object} */
  var queryParameters = {};

  /** @type {!Object} */
  var headerParams = angular.extend({}, this.defaultHeaders_);
  if (opt_post !== undefined) {
    queryParameters['post'] = opt_post;
  }

  if (opt_apply !== undefined) {
    queryParameters['apply'] = opt_apply;
  }

  if (opt_delete !== undefined) {
    queryParameters['delete'] = opt_delete;
  }

  if (opt_action !== undefined) {
    queryParameters['action'] = opt_action;
  }

  if (opt_location !== undefined) {
    queryParameters['$location'] = opt_location;
  }

  if (opt_propertylist !== undefined) {
    queryParameters['propertylist'] = opt_propertylist;
  }

  if (opt_nuiEnabled !== undefined) {
    queryParameters['nuiEnabled'] = opt_nuiEnabled;
  }

  if (opt_nuiServiceUrl !== undefined) {
    queryParameters['nuiServiceUrl'] = opt_nuiServiceUrl;
  }

  if (opt_nuiApiKey !== undefined) {
    queryParameters['nuiApiKey'] = opt_nuiApiKey;
  }

  /** @type {!Object} */
  var httpRequestParams = {
    method: 'POST',
    url: path,
    json: true,
            params: queryParameters,
    headers: headerParams
  };

  if (opt_extraHttpRequestParams) {
    httpRequestParams = angular.extend(httpRequestParams, opt_extraHttpRequestParams);
  }

  return (/** @type {?} */ (this.http_))(httpRequestParams);
}

/**
 * 
 * 
 * @param {!boolean=} opt_post 
 * @param {!boolean=} opt_apply 
 * @param {!boolean=} opt_delete 
 * @param {!string=} opt_action 
 * @param {!string=} opt_location 
 * @param {!Array<!string>=} opt_propertylist 
 * @param {!string=} opt_tcpPort 
 * @param {!boolean=} opt_allowRemoteAccess 
 * @param {!string=} opt_maxRenderRgnPixels 
 * @param {!string=} opt_maxMessageSize 
 * @param {!number=} opt_randomAccessUrlTimeout 
 * @param {!number=} opt_workerThreads 
 * @param {!angular.$http.Config=} opt_extraHttpRequestParams Extra HTTP parameters to send.
 * @return {!angular.$q.Promise<!API.Client.comAdobeCqDamS7imagingImplIsImageServerComponentInfo>}
 */
API.Client.ConfigmgrApi.prototype.comAdobeCqDamS7imagingImplIsImageServerComponent = function(opt_post, opt_apply, opt_delete, opt_action, opt_location, opt_propertylist, opt_tcpPort, opt_allowRemoteAccess, opt_maxRenderRgnPixels, opt_maxMessageSize, opt_randomAccessUrlTimeout, opt_workerThreads, opt_extraHttpRequestParams) {
  /** @const {string} */
  var path = this.basePath_ + '/system/console/configMgr/com.adobe.cq.dam.s7imaging.impl.is.ImageServerComponent';

  /** @type {!Object} */
  var queryParameters = {};

  /** @type {!Object} */
  var headerParams = angular.extend({}, this.defaultHeaders_);
  if (opt_post !== undefined) {
    queryParameters['post'] = opt_post;
  }

  if (opt_apply !== undefined) {
    queryParameters['apply'] = opt_apply;
  }

  if (opt_delete !== undefined) {
    queryParameters['delete'] = opt_delete;
  }

  if (opt_action !== undefined) {
    queryParameters['action'] = opt_action;
  }

  if (opt_location !== undefined) {
    queryParameters['$location'] = opt_location;
  }

  if (opt_propertylist !== undefined) {
    queryParameters['propertylist'] = opt_propertylist;
  }

  if (opt_tcpPort !== undefined) {
    queryParameters['TcpPort'] = opt_tcpPort;
  }

  if (opt_allowRemoteAccess !== undefined) {
    queryParameters['AllowRemoteAccess'] = opt_allowRemoteAccess;
  }

  if (opt_maxRenderRgnPixels !== undefined) {
    queryParameters['MaxRenderRgnPixels'] = opt_maxRenderRgnPixels;
  }

  if (opt_maxMessageSize !== undefined) {
    queryParameters['MaxMessageSize'] = opt_maxMessageSize;
  }

  if (opt_randomAccessUrlTimeout !== undefined) {
    queryParameters['RandomAccessUrlTimeout'] = opt_randomAccessUrlTimeout;
  }

  if (opt_workerThreads !== undefined) {
    queryParameters['WorkerThreads'] = opt_workerThreads;
  }

  /** @type {!Object} */
  var httpRequestParams = {
    method: 'POST',
    url: path,
    json: true,
            params: queryParameters,
    headers: headerParams
  };

  if (opt_extraHttpRequestParams) {
    httpRequestParams = angular.extend(httpRequestParams, opt_extraHttpRequestParams);
  }

  return (/** @type {?} */ (this.http_))(httpRequestParams);
}

/**
 * 
 * 
 * @param {!boolean=} opt_post 
 * @param {!boolean=} opt_apply 
 * @param {!boolean=} opt_delete 
 * @param {!string=} opt_action 
 * @param {!string=} opt_location 
 * @param {!Array<!string>=} opt_propertylist 
 * @param {!boolean=} opt_cacheEnable 
 * @param {!Array<!string>=} opt_cacheRootPaths 
 * @param {!number=} opt_cacheMaxSize 
 * @param {!number=} opt_cacheMaxEntries 
 * @param {!angular.$http.Config=} opt_extraHttpRequestParams Extra HTTP parameters to send.
 * @return {!angular.$q.Promise<!API.Client.comAdobeCqDamS7imagingImplPsPlatformServerServletInfo>}
 */
API.Client.ConfigmgrApi.prototype.comAdobeCqDamS7imagingImplPsPlatformServerServlet = function(opt_post, opt_apply, opt_delete, opt_action, opt_location, opt_propertylist, opt_cacheEnable, opt_cacheRootPaths, opt_cacheMaxSize, opt_cacheMaxEntries, opt_extraHttpRequestParams) {
  /** @const {string} */
  var path = this.basePath_ + '/system/console/configMgr/com.adobe.cq.dam.s7imaging.impl.ps.PlatformServerServlet';

  /** @type {!Object} */
  var queryParameters = {};

  /** @type {!Object} */
  var headerParams = angular.extend({}, this.defaultHeaders_);
  if (opt_post !== undefined) {
    queryParameters['post'] = opt_post;
  }

  if (opt_apply !== undefined) {
    queryParameters['apply'] = opt_apply;
  }

  if (opt_delete !== undefined) {
    queryParameters['delete'] = opt_delete;
  }

  if (opt_action !== undefined) {
    queryParameters['action'] = opt_action;
  }

  if (opt_location !== undefined) {
    queryParameters['$location'] = opt_location;
  }

  if (opt_propertylist !== undefined) {
    queryParameters['propertylist'] = opt_propertylist;
  }

  if (opt_cacheEnable !== undefined) {
    queryParameters['cache.enable'] = opt_cacheEnable;
  }

  if (opt_cacheRootPaths !== undefined) {
    queryParameters['cache.rootPaths'] = opt_cacheRootPaths;
  }

  if (opt_cacheMaxSize !== undefined) {
    queryParameters['cache.maxSize'] = opt_cacheMaxSize;
  }

  if (opt_cacheMaxEntries !== undefined) {
    queryParameters['cache.maxEntries'] = opt_cacheMaxEntries;
  }

  /** @type {!Object} */
  var httpRequestParams = {
    method: 'POST',
    url: path,
    json: true,
            params: queryParameters,
    headers: headerParams
  };

  if (opt_extraHttpRequestParams) {
    httpRequestParams = angular.extend(httpRequestParams, opt_extraHttpRequestParams);
  }

  return (/** @type {?} */ (this.http_))(httpRequestParams);
}

/**
 * 
 * 
 * @param {!boolean=} opt_post 
 * @param {!boolean=} opt_apply 
 * @param {!boolean=} opt_delete 
 * @param {!string=} opt_action 
 * @param {!string=} opt_location 
 * @param {!Array<!string>=} opt_propertylist 
 * @param {!number=} opt_serviceRanking 
 * @param {!string=} opt_pathPrefix 
 * @param {!boolean=} opt_createVersion 
 * @param {!angular.$http.Config=} opt_extraHttpRequestParams Extra HTTP parameters to send.
 * @return {!angular.$q.Promise<!API.Client.comAdobeCqDamWebdavImplIoAssetIOHandlerInfo>}
 */
API.Client.ConfigmgrApi.prototype.comAdobeCqDamWebdavImplIoAssetIOHandler = function(opt_post, opt_apply, opt_delete, opt_action, opt_location, opt_propertylist, opt_serviceRanking, opt_pathPrefix, opt_createVersion, opt_extraHttpRequestParams) {
  /** @const {string} */
  var path = this.basePath_ + '/system/console/configMgr/com.adobe.cq.dam.webdav.impl.io.AssetIOHandler';

  /** @type {!Object} */
  var queryParameters = {};

  /** @type {!Object} */
  var headerParams = angular.extend({}, this.defaultHeaders_);
  if (opt_post !== undefined) {
    queryParameters['post'] = opt_post;
  }

  if (opt_apply !== undefined) {
    queryParameters['apply'] = opt_apply;
  }

  if (opt_delete !== undefined) {
    queryParameters['delete'] = opt_delete;
  }

  if (opt_action !== undefined) {
    queryParameters['action'] = opt_action;
  }

  if (opt_location !== undefined) {
    queryParameters['$location'] = opt_location;
  }

  if (opt_propertylist !== undefined) {
    queryParameters['propertylist'] = opt_propertylist;
  }

  if (opt_serviceRanking !== undefined) {
    queryParameters['service.ranking'] = opt_serviceRanking;
  }

  if (opt_pathPrefix !== undefined) {
    queryParameters['pathPrefix'] = opt_pathPrefix;
  }

  if (opt_createVersion !== undefined) {
    queryParameters['createVersion'] = opt_createVersion;
  }

  /** @type {!Object} */
  var httpRequestParams = {
    method: 'POST',
    url: path,
    json: true,
            params: queryParameters,
    headers: headerParams
  };

  if (opt_extraHttpRequestParams) {
    httpRequestParams = angular.extend(httpRequestParams, opt_extraHttpRequestParams);
  }

  return (/** @type {?} */ (this.http_))(httpRequestParams);
}

/**
 * 
 * 
 * @param {!boolean=} opt_post 
 * @param {!boolean=} opt_apply 
 * @param {!boolean=} opt_delete 
 * @param {!string=} opt_action 
 * @param {!string=} opt_location 
 * @param {!Array<!string>=} opt_propertylist 
 * @param {!boolean=} opt_cqDamWebdavVersionLinkingEnable 
 * @param {!number=} opt_cqDamWebdavVersionLinkingSchedulerPeriod 
 * @param {!number=} opt_cqDamWebdavVersionLinkingStagingTimeout 
 * @param {!angular.$http.Config=} opt_extraHttpRequestParams Extra HTTP parameters to send.
 * @return {!angular.$q.Promise<!API.Client.comAdobeCqDamWebdavImplIoDamWebdavVersionLinkingJobInfo>}
 */
API.Client.ConfigmgrApi.prototype.comAdobeCqDamWebdavImplIoDamWebdavVersionLinkingJob = function(opt_post, opt_apply, opt_delete, opt_action, opt_location, opt_propertylist, opt_cqDamWebdavVersionLinkingEnable, opt_cqDamWebdavVersionLinkingSchedulerPeriod, opt_cqDamWebdavVersionLinkingStagingTimeout, opt_extraHttpRequestParams) {
  /** @const {string} */
  var path = this.basePath_ + '/system/console/configMgr/com.adobe.cq.dam.webdav.impl.io.DamWebdavVersionLinkingJob';

  /** @type {!Object} */
  var queryParameters = {};

  /** @type {!Object} */
  var headerParams = angular.extend({}, this.defaultHeaders_);
  if (opt_post !== undefined) {
    queryParameters['post'] = opt_post;
  }

  if (opt_apply !== undefined) {
    queryParameters['apply'] = opt_apply;
  }

  if (opt_delete !== undefined) {
    queryParameters['delete'] = opt_delete;
  }

  if (opt_action !== undefined) {
    queryParameters['action'] = opt_action;
  }

  if (opt_location !== undefined) {
    queryParameters['$location'] = opt_location;
  }

  if (opt_propertylist !== undefined) {
    queryParameters['propertylist'] = opt_propertylist;
  }

  if (opt_cqDamWebdavVersionLinkingEnable !== undefined) {
    queryParameters['cq.dam.webdav.version.linking.enable'] = opt_cqDamWebdavVersionLinkingEnable;
  }

  if (opt_cqDamWebdavVersionLinkingSchedulerPeriod !== undefined) {
    queryParameters['cq.dam.webdav.version.linking.scheduler.period'] = opt_cqDamWebdavVersionLinkingSchedulerPeriod;
  }

  if (opt_cqDamWebdavVersionLinkingStagingTimeout !== undefined) {
    queryParameters['cq.dam.webdav.version.linking.staging.timeout'] = opt_cqDamWebdavVersionLinkingStagingTimeout;
  }

  /** @type {!Object} */
  var httpRequestParams = {
    method: 'POST',
    url: path,
    json: true,
            params: queryParameters,
    headers: headerParams
  };

  if (opt_extraHttpRequestParams) {
    httpRequestParams = angular.extend(httpRequestParams, opt_extraHttpRequestParams);
  }

  return (/** @type {?} */ (this.http_))(httpRequestParams);
}

/**
 * 
 * 
 * @param {!boolean=} opt_post 
 * @param {!boolean=} opt_apply 
 * @param {!boolean=} opt_delete 
 * @param {!string=} opt_action 
 * @param {!string=} opt_location 
 * @param {!Array<!string>=} opt_propertylist 
 * @param {!Array<!string>=} opt_comDayCqDamCoreImplIoSpecialFilesHandlerFilepatters 
 * @param {!angular.$http.Config=} opt_extraHttpRequestParams Extra HTTP parameters to send.
 * @return {!angular.$q.Promise<!API.Client.comAdobeCqDamWebdavImplIoSpecialFilesHandlerInfo>}
 */
API.Client.ConfigmgrApi.prototype.comAdobeCqDamWebdavImplIoSpecialFilesHandler = function(opt_post, opt_apply, opt_delete, opt_action, opt_location, opt_propertylist, opt_comDayCqDamCoreImplIoSpecialFilesHandlerFilepatters, opt_extraHttpRequestParams) {
  /** @const {string} */
  var path = this.basePath_ + '/system/console/configMgr/com.adobe.cq.dam.webdav.impl.io.SpecialFilesHandler';

  /** @type {!Object} */
  var queryParameters = {};

  /** @type {!Object} */
  var headerParams = angular.extend({}, this.defaultHeaders_);
  if (opt_post !== undefined) {
    queryParameters['post'] = opt_post;
  }

  if (opt_apply !== undefined) {
    queryParameters['apply'] = opt_apply;
  }

  if (opt_delete !== undefined) {
    queryParameters['delete'] = opt_delete;
  }

  if (opt_action !== undefined) {
    queryParameters['action'] = opt_action;
  }

  if (opt_location !== undefined) {
    queryParameters['$location'] = opt_location;
  }

  if (opt_propertylist !== undefined) {
    queryParameters['propertylist'] = opt_propertylist;
  }

  if (opt_comDayCqDamCoreImplIoSpecialFilesHandlerFilepatters !== undefined) {
    queryParameters['com.day.cq.dam.core.impl.io.SpecialFilesHandler.filepatters'] = opt_comDayCqDamCoreImplIoSpecialFilesHandlerFilepatters;
  }

  /** @type {!Object} */
  var httpRequestParams = {
    method: 'POST',
    url: path,
    json: true,
            params: queryParameters,
    headers: headerParams
  };

  if (opt_extraHttpRequestParams) {
    httpRequestParams = angular.extend(httpRequestParams, opt_extraHttpRequestParams);
  }

  return (/** @type {?} */ (this.http_))(httpRequestParams);
}

/**
 * 
 * 
 * @param {!boolean=} opt_post 
 * @param {!boolean=} opt_apply 
 * @param {!boolean=} opt_delete 
 * @param {!string=} opt_action 
 * @param {!string=} opt_location 
 * @param {!Array<!string>=} opt_propertylist 
 * @param {!Array<!string>=} opt_firewallDeserializationWhitelist 
 * @param {!Array<!string>=} opt_firewallDeserializationBlacklist 
 * @param {!string=} opt_firewallDeserializationDiagnostics 
 * @param {!angular.$http.Config=} opt_extraHttpRequestParams Extra HTTP parameters to send.
 * @return {!angular.$q.Promise<!API.Client.comAdobeCqDeserfwImplDeserializationFirewallImplInfo>}
 */
API.Client.ConfigmgrApi.prototype.comAdobeCqDeserfwImplDeserializationFirewallImpl = function(opt_post, opt_apply, opt_delete, opt_action, opt_location, opt_propertylist, opt_firewallDeserializationWhitelist, opt_firewallDeserializationBlacklist, opt_firewallDeserializationDiagnostics, opt_extraHttpRequestParams) {
  /** @const {string} */
  var path = this.basePath_ + '/system/console/configMgr/com.adobe.cq.deserfw.impl.DeserializationFirewallImpl';

  /** @type {!Object} */
  var queryParameters = {};

  /** @type {!Object} */
  var headerParams = angular.extend({}, this.defaultHeaders_);
  if (opt_post !== undefined) {
    queryParameters['post'] = opt_post;
  }

  if (opt_apply !== undefined) {
    queryParameters['apply'] = opt_apply;
  }

  if (opt_delete !== undefined) {
    queryParameters['delete'] = opt_delete;
  }

  if (opt_action !== undefined) {
    queryParameters['action'] = opt_action;
  }

  if (opt_location !== undefined) {
    queryParameters['$location'] = opt_location;
  }

  if (opt_propertylist !== undefined) {
    queryParameters['propertylist'] = opt_propertylist;
  }

  if (opt_firewallDeserializationWhitelist !== undefined) {
    queryParameters['firewall.deserialization.whitelist'] = opt_firewallDeserializationWhitelist;
  }

  if (opt_firewallDeserializationBlacklist !== undefined) {
    queryParameters['firewall.deserialization.blacklist'] = opt_firewallDeserializationBlacklist;
  }

  if (opt_firewallDeserializationDiagnostics !== undefined) {
    queryParameters['firewall.deserialization.diagnostics'] = opt_firewallDeserializationDiagnostics;
  }

  /** @type {!Object} */
  var httpRequestParams = {
    method: 'POST',
    url: path,
    json: true,
            params: queryParameters,
    headers: headerParams
  };

  if (opt_extraHttpRequestParams) {
    httpRequestParams = angular.extend(httpRequestParams, opt_extraHttpRequestParams);
  }

  return (/** @type {?} */ (this.http_))(httpRequestParams);
}

/**
 * 
 * 
 * @param {!boolean=} opt_post 
 * @param {!boolean=} opt_apply 
 * @param {!boolean=} opt_delete 
 * @param {!string=} opt_action 
 * @param {!string=} opt_location 
 * @param {!Array<!string>=} opt_propertylist 
 * @param {!number=} opt_connectionTimeout 
 * @param {!number=} opt_socketTimeout 
 * @param {!angular.$http.Config=} opt_extraHttpRequestParams Extra HTTP parameters to send.
 * @return {!angular.$q.Promise<!API.Client.comAdobeCqDtmImplServiceDTMWebServiceImplInfo>}
 */
API.Client.ConfigmgrApi.prototype.comAdobeCqDtmImplServiceDTMWebServiceImpl = function(opt_post, opt_apply, opt_delete, opt_action, opt_location, opt_propertylist, opt_connectionTimeout, opt_socketTimeout, opt_extraHttpRequestParams) {
  /** @const {string} */
  var path = this.basePath_ + '/system/console/configMgr/com.adobe.cq.dtm.impl.service.DTMWebServiceImpl';

  /** @type {!Object} */
  var queryParameters = {};

  /** @type {!Object} */
  var headerParams = angular.extend({}, this.defaultHeaders_);
  if (opt_post !== undefined) {
    queryParameters['post'] = opt_post;
  }

  if (opt_apply !== undefined) {
    queryParameters['apply'] = opt_apply;
  }

  if (opt_delete !== undefined) {
    queryParameters['delete'] = opt_delete;
  }

  if (opt_action !== undefined) {
    queryParameters['action'] = opt_action;
  }

  if (opt_location !== undefined) {
    queryParameters['$location'] = opt_location;
  }

  if (opt_propertylist !== undefined) {
    queryParameters['propertylist'] = opt_propertylist;
  }

  if (opt_connectionTimeout !== undefined) {
    queryParameters['connection.timeout'] = opt_connectionTimeout;
  }

  if (opt_socketTimeout !== undefined) {
    queryParameters['socket.timeout'] = opt_socketTimeout;
  }

  /** @type {!Object} */
  var httpRequestParams = {
    method: 'POST',
    url: path,
    json: true,
            params: queryParameters,
    headers: headerParams
  };

  if (opt_extraHttpRequestParams) {
    httpRequestParams = angular.extend(httpRequestParams, opt_extraHttpRequestParams);
  }

  return (/** @type {?} */ (this.http_))(httpRequestParams);
}

/**
 * 
 * 
 * @param {!boolean=} opt_post 
 * @param {!boolean=} opt_apply 
 * @param {!boolean=} opt_delete 
 * @param {!string=} opt_action 
 * @param {!string=} opt_location 
 * @param {!Array<!string>=} opt_propertylist 
 * @param {!Array<!string>=} opt_dtmStagingIpWhitelist 
 * @param {!Array<!string>=} opt_dtmProductionIpWhitelist 
 * @param {!angular.$http.Config=} opt_extraHttpRequestParams Extra HTTP parameters to send.
 * @return {!angular.$q.Promise<!API.Client.comAdobeCqDtmImplServletsDTMDeployHookServletInfo>}
 */
API.Client.ConfigmgrApi.prototype.comAdobeCqDtmImplServletsDTMDeployHookServlet = function(opt_post, opt_apply, opt_delete, opt_action, opt_location, opt_propertylist, opt_dtmStagingIpWhitelist, opt_dtmProductionIpWhitelist, opt_extraHttpRequestParams) {
  /** @const {string} */
  var path = this.basePath_ + '/system/console/configMgr/com.adobe.cq.dtm.impl.servlets.DTMDeployHookServlet';

  /** @type {!Object} */
  var queryParameters = {};

  /** @type {!Object} */
  var headerParams = angular.extend({}, this.defaultHeaders_);
  if (opt_post !== undefined) {
    queryParameters['post'] = opt_post;
  }

  if (opt_apply !== undefined) {
    queryParameters['apply'] = opt_apply;
  }

  if (opt_delete !== undefined) {
    queryParameters['delete'] = opt_delete;
  }

  if (opt_action !== undefined) {
    queryParameters['action'] = opt_action;
  }

  if (opt_location !== undefined) {
    queryParameters['$location'] = opt_location;
  }

  if (opt_propertylist !== undefined) {
    queryParameters['propertylist'] = opt_propertylist;
  }

  if (opt_dtmStagingIpWhitelist !== undefined) {
    queryParameters['dtm.staging.ip.whitelist'] = opt_dtmStagingIpWhitelist;
  }

  if (opt_dtmProductionIpWhitelist !== undefined) {
    queryParameters['dtm.production.ip.whitelist'] = opt_dtmProductionIpWhitelist;
  }

  /** @type {!Object} */
  var httpRequestParams = {
    method: 'POST',
    url: path,
    json: true,
            params: queryParameters,
    headers: headerParams
  };

  if (opt_extraHttpRequestParams) {
    httpRequestParams = angular.extend(httpRequestParams, opt_extraHttpRequestParams);
  }

  return (/** @type {?} */ (this.http_))(httpRequestParams);
}

/**
 * 
 * 
 * @param {!boolean=} opt_post 
 * @param {!boolean=} opt_apply 
 * @param {!boolean=} opt_delete 
 * @param {!string=} opt_action 
 * @param {!string=} opt_location 
 * @param {!Array<!string>=} opt_propertylist 
 * @param {!string=} opt_endpointUri 
 * @param {!number=} opt_connectionTimeout 
 * @param {!number=} opt_socketTimeout 
 * @param {!angular.$http.Config=} opt_extraHttpRequestParams Extra HTTP parameters to send.
 * @return {!angular.$q.Promise<!API.Client.comAdobeCqDtmReactorImplServiceWebServiceImplInfo>}
 */
API.Client.ConfigmgrApi.prototype.comAdobeCqDtmReactorImplServiceWebServiceImpl = function(opt_post, opt_apply, opt_delete, opt_action, opt_location, opt_propertylist, opt_endpointUri, opt_connectionTimeout, opt_socketTimeout, opt_extraHttpRequestParams) {
  /** @const {string} */
  var path = this.basePath_ + '/system/console/configMgr/com.adobe.cq.dtm.reactor.impl.service.WebServiceImpl';

  /** @type {!Object} */
  var queryParameters = {};

  /** @type {!Object} */
  var headerParams = angular.extend({}, this.defaultHeaders_);
  if (opt_post !== undefined) {
    queryParameters['post'] = opt_post;
  }

  if (opt_apply !== undefined) {
    queryParameters['apply'] = opt_apply;
  }

  if (opt_delete !== undefined) {
    queryParameters['delete'] = opt_delete;
  }

  if (opt_action !== undefined) {
    queryParameters['action'] = opt_action;
  }

  if (opt_location !== undefined) {
    queryParameters['$location'] = opt_location;
  }

  if (opt_propertylist !== undefined) {
    queryParameters['propertylist'] = opt_propertylist;
  }

  if (opt_endpointUri !== undefined) {
    queryParameters['endpointUri'] = opt_endpointUri;
  }

  if (opt_connectionTimeout !== undefined) {
    queryParameters['connectionTimeout'] = opt_connectionTimeout;
  }

  if (opt_socketTimeout !== undefined) {
    queryParameters['socketTimeout'] = opt_socketTimeout;
  }

  /** @type {!Object} */
  var httpRequestParams = {
    method: 'POST',
    url: path,
    json: true,
            params: queryParameters,
    headers: headerParams
  };

  if (opt_extraHttpRequestParams) {
    httpRequestParams = angular.extend(httpRequestParams, opt_extraHttpRequestParams);
  }

  return (/** @type {?} */ (this.http_))(httpRequestParams);
}

/**
 * 
 * 
 * @param {!boolean=} opt_post 
 * @param {!boolean=} opt_apply 
 * @param {!boolean=} opt_delete 
 * @param {!string=} opt_action 
 * @param {!string=} opt_location 
 * @param {!Array<!string>=} opt_propertylist 
 * @param {!boolean=} opt_enabled 
 * @param {!Array<!string>=} opt_disabledForGroups 
 * @param {!angular.$http.Config=} opt_extraHttpRequestParams Extra HTTP parameters to send.
 * @return {!angular.$q.Promise<!API.Client.comAdobeCqExperiencelogImplExperienceLogConfigServletInfo>}
 */
API.Client.ConfigmgrApi.prototype.comAdobeCqExperiencelogImplExperienceLogConfigServlet = function(opt_post, opt_apply, opt_delete, opt_action, opt_location, opt_propertylist, opt_enabled, opt_disabledForGroups, opt_extraHttpRequestParams) {
  /** @const {string} */
  var path = this.basePath_ + '/system/console/configMgr/com.adobe.cq.experiencelog.impl.ExperienceLogConfigServlet';

  /** @type {!Object} */
  var queryParameters = {};

  /** @type {!Object} */
  var headerParams = angular.extend({}, this.defaultHeaders_);
  if (opt_post !== undefined) {
    queryParameters['post'] = opt_post;
  }

  if (opt_apply !== undefined) {
    queryParameters['apply'] = opt_apply;
  }

  if (opt_delete !== undefined) {
    queryParameters['delete'] = opt_delete;
  }

  if (opt_action !== undefined) {
    queryParameters['action'] = opt_action;
  }

  if (opt_location !== undefined) {
    queryParameters['$location'] = opt_location;
  }

  if (opt_propertylist !== undefined) {
    queryParameters['propertylist'] = opt_propertylist;
  }

  if (opt_enabled !== undefined) {
    queryParameters['enabled'] = opt_enabled;
  }

  if (opt_disabledForGroups !== undefined) {
    queryParameters['disabledForGroups'] = opt_disabledForGroups;
  }

  /** @type {!Object} */
  var httpRequestParams = {
    method: 'POST',
    url: path,
    json: true,
            params: queryParameters,
    headers: headerParams
  };

  if (opt_extraHttpRequestParams) {
    httpRequestParams = angular.extend(httpRequestParams, opt_extraHttpRequestParams);
  }

  return (/** @type {?} */ (this.http_))(httpRequestParams);
}

/**
 * 
 * 
 * @param {!boolean=} opt_post 
 * @param {!boolean=} opt_apply 
 * @param {!boolean=} opt_delete 
 * @param {!string=} opt_action 
 * @param {!string=} opt_location 
 * @param {!Array<!string>=} opt_propertylist 
 * @param {!string=} opt_hcName 
 * @param {!Array<!string>=} opt_hcTags 
 * @param {!string=} opt_hcMbeanName 
 * @param {!Array<!string>=} opt_packageNames 
 * @param {!angular.$http.Config=} opt_extraHttpRequestParams Extra HTTP parameters to send.
 * @return {!angular.$q.Promise<!API.Client.comAdobeCqHcContentPackagesHealthCheckInfo>}
 */
API.Client.ConfigmgrApi.prototype.comAdobeCqHcContentPackagesHealthCheck = function(opt_post, opt_apply, opt_delete, opt_action, opt_location, opt_propertylist, opt_hcName, opt_hcTags, opt_hcMbeanName, opt_packageNames, opt_extraHttpRequestParams) {
  /** @const {string} */
  var path = this.basePath_ + '/system/console/configMgr/com.adobe.cq.hc.ContentPackagesHealthCheck';

  /** @type {!Object} */
  var queryParameters = {};

  /** @type {!Object} */
  var headerParams = angular.extend({}, this.defaultHeaders_);
  if (opt_post !== undefined) {
    queryParameters['post'] = opt_post;
  }

  if (opt_apply !== undefined) {
    queryParameters['apply'] = opt_apply;
  }

  if (opt_delete !== undefined) {
    queryParameters['delete'] = opt_delete;
  }

  if (opt_action !== undefined) {
    queryParameters['action'] = opt_action;
  }

  if (opt_location !== undefined) {
    queryParameters['$location'] = opt_location;
  }

  if (opt_propertylist !== undefined) {
    queryParameters['propertylist'] = opt_propertylist;
  }

  if (opt_hcName !== undefined) {
    queryParameters['hc.name'] = opt_hcName;
  }

  if (opt_hcTags !== undefined) {
    queryParameters['hc.tags'] = opt_hcTags;
  }

  if (opt_hcMbeanName !== undefined) {
    queryParameters['hc.mbean.name'] = opt_hcMbeanName;
  }

  if (opt_packageNames !== undefined) {
    queryParameters['package.names'] = opt_packageNames;
  }

  /** @type {!Object} */
  var httpRequestParams = {
    method: 'POST',
    url: path,
    json: true,
            params: queryParameters,
    headers: headerParams
  };

  if (opt_extraHttpRequestParams) {
    httpRequestParams = angular.extend(httpRequestParams, opt_extraHttpRequestParams);
  }

  return (/** @type {?} */ (this.http_))(httpRequestParams);
}

/**
 * 
 * 
 * @param {!boolean=} opt_post 
 * @param {!boolean=} opt_apply 
 * @param {!boolean=} opt_delete 
 * @param {!string=} opt_action 
 * @param {!string=} opt_location 
 * @param {!Array<!string>=} opt_propertylist 
 * @param {!Array<!string>=} opt_historyRequestFilterExcludedSelectors 
 * @param {!Array<!string>=} opt_historyRequestFilterExcludedExtensions 
 * @param {!angular.$http.Config=} opt_extraHttpRequestParams Extra HTTP parameters to send.
 * @return {!angular.$q.Promise<!API.Client.comAdobeCqHistoryImplHistoryRequestFilterInfo>}
 */
API.Client.ConfigmgrApi.prototype.comAdobeCqHistoryImplHistoryRequestFilter = function(opt_post, opt_apply, opt_delete, opt_action, opt_location, opt_propertylist, opt_historyRequestFilterExcludedSelectors, opt_historyRequestFilterExcludedExtensions, opt_extraHttpRequestParams) {
  /** @const {string} */
  var path = this.basePath_ + '/system/console/configMgr/com.adobe.cq.history.impl.HistoryRequestFilter';

  /** @type {!Object} */
  var queryParameters = {};

  /** @type {!Object} */
  var headerParams = angular.extend({}, this.defaultHeaders_);
  if (opt_post !== undefined) {
    queryParameters['post'] = opt_post;
  }

  if (opt_apply !== undefined) {
    queryParameters['apply'] = opt_apply;
  }

  if (opt_delete !== undefined) {
    queryParameters['delete'] = opt_delete;
  }

  if (opt_action !== undefined) {
    queryParameters['action'] = opt_action;
  }

  if (opt_location !== undefined) {
    queryParameters['$location'] = opt_location;
  }

  if (opt_propertylist !== undefined) {
    queryParameters['propertylist'] = opt_propertylist;
  }

  if (opt_historyRequestFilterExcludedSelectors !== undefined) {
    queryParameters['history.requestFilter.excludedSelectors'] = opt_historyRequestFilterExcludedSelectors;
  }

  if (opt_historyRequestFilterExcludedExtensions !== undefined) {
    queryParameters['history.requestFilter.excludedExtensions'] = opt_historyRequestFilterExcludedExtensions;
  }

  /** @type {!Object} */
  var httpRequestParams = {
    method: 'POST',
    url: path,
    json: true,
            params: queryParameters,
    headers: headerParams
  };

  if (opt_extraHttpRequestParams) {
    httpRequestParams = angular.extend(httpRequestParams, opt_extraHttpRequestParams);
  }

  return (/** @type {?} */ (this.http_))(httpRequestParams);
}

/**
 * 
 * 
 * @param {!boolean=} opt_post 
 * @param {!boolean=} opt_apply 
 * @param {!boolean=} opt_delete 
 * @param {!string=} opt_action 
 * @param {!string=} opt_location 
 * @param {!Array<!string>=} opt_propertylist 
 * @param {!Array<!string>=} opt_historyServiceResourceTypes 
 * @param {!Array<!string>=} opt_historyServicePathFilter 
 * @param {!angular.$http.Config=} opt_extraHttpRequestParams Extra HTTP parameters to send.
 * @return {!angular.$q.Promise<!API.Client.comAdobeCqHistoryImplHistoryServiceImplInfo>}
 */
API.Client.ConfigmgrApi.prototype.comAdobeCqHistoryImplHistoryServiceImpl = function(opt_post, opt_apply, opt_delete, opt_action, opt_location, opt_propertylist, opt_historyServiceResourceTypes, opt_historyServicePathFilter, opt_extraHttpRequestParams) {
  /** @const {string} */
  var path = this.basePath_ + '/system/console/configMgr/com.adobe.cq.history.impl.HistoryServiceImpl';

  /** @type {!Object} */
  var queryParameters = {};

  /** @type {!Object} */
  var headerParams = angular.extend({}, this.defaultHeaders_);
  if (opt_post !== undefined) {
    queryParameters['post'] = opt_post;
  }

  if (opt_apply !== undefined) {
    queryParameters['apply'] = opt_apply;
  }

  if (opt_delete !== undefined) {
    queryParameters['delete'] = opt_delete;
  }

  if (opt_action !== undefined) {
    queryParameters['action'] = opt_action;
  }

  if (opt_location !== undefined) {
    queryParameters['$location'] = opt_location;
  }

  if (opt_propertylist !== undefined) {
    queryParameters['propertylist'] = opt_propertylist;
  }

  if (opt_historyServiceResourceTypes !== undefined) {
    queryParameters['history.service.resourceTypes'] = opt_historyServiceResourceTypes;
  }

  if (opt_historyServicePathFilter !== undefined) {
    queryParameters['history.service.pathFilter'] = opt_historyServicePathFilter;
  }

  /** @type {!Object} */
  var httpRequestParams = {
    method: 'POST',
    url: path,
    json: true,
            params: queryParameters,
    headers: headerParams
  };

  if (opt_extraHttpRequestParams) {
    httpRequestParams = angular.extend(httpRequestParams, opt_extraHttpRequestParams);
  }

  return (/** @type {?} */ (this.http_))(httpRequestParams);
}

/**
 * 
 * 
 * @param {!boolean=} opt_post 
 * @param {!boolean=} opt_apply 
 * @param {!boolean=} opt_delete 
 * @param {!string=} opt_action 
 * @param {!string=} opt_location 
 * @param {!Array<!string>=} opt_propertylist 
 * @param {!Array<!string>=} opt_inboxImplTypeproviderRegistrypaths 
 * @param {!Array<!string>=} opt_inboxImplTypeproviderLegacypaths 
 * @param {!string=} opt_inboxImplTypeproviderDefaulturlFailureitem 
 * @param {!string=} opt_inboxImplTypeproviderDefaulturlWorkitem 
 * @param {!string=} opt_inboxImplTypeproviderDefaulturlTask 
 * @param {!angular.$http.Config=} opt_extraHttpRequestParams Extra HTTP parameters to send.
 * @return {!angular.$q.Promise<!API.Client.comAdobeCqInboxImplTypeproviderItemTypeProviderInfo>}
 */
API.Client.ConfigmgrApi.prototype.comAdobeCqInboxImplTypeproviderItemTypeProvider = function(opt_post, opt_apply, opt_delete, opt_action, opt_location, opt_propertylist, opt_inboxImplTypeproviderRegistrypaths, opt_inboxImplTypeproviderLegacypaths, opt_inboxImplTypeproviderDefaulturlFailureitem, opt_inboxImplTypeproviderDefaulturlWorkitem, opt_inboxImplTypeproviderDefaulturlTask, opt_extraHttpRequestParams) {
  /** @const {string} */
  var path = this.basePath_ + '/system/console/configMgr/com.adobe.cq.inbox.impl.typeprovider.ItemTypeProvider';

  /** @type {!Object} */
  var queryParameters = {};

  /** @type {!Object} */
  var headerParams = angular.extend({}, this.defaultHeaders_);
  if (opt_post !== undefined) {
    queryParameters['post'] = opt_post;
  }

  if (opt_apply !== undefined) {
    queryParameters['apply'] = opt_apply;
  }

  if (opt_delete !== undefined) {
    queryParameters['delete'] = opt_delete;
  }

  if (opt_action !== undefined) {
    queryParameters['action'] = opt_action;
  }

  if (opt_location !== undefined) {
    queryParameters['$location'] = opt_location;
  }

  if (opt_propertylist !== undefined) {
    queryParameters['propertylist'] = opt_propertylist;
  }

  if (opt_inboxImplTypeproviderRegistrypaths !== undefined) {
    queryParameters['inbox.impl.typeprovider.registrypaths'] = opt_inboxImplTypeproviderRegistrypaths;
  }

  if (opt_inboxImplTypeproviderLegacypaths !== undefined) {
    queryParameters['inbox.impl.typeprovider.legacypaths'] = opt_inboxImplTypeproviderLegacypaths;
  }

  if (opt_inboxImplTypeproviderDefaulturlFailureitem !== undefined) {
    queryParameters['inbox.impl.typeprovider.defaulturl.failureitem'] = opt_inboxImplTypeproviderDefaulturlFailureitem;
  }

  if (opt_inboxImplTypeproviderDefaulturlWorkitem !== undefined) {
    queryParameters['inbox.impl.typeprovider.defaulturl.workitem'] = opt_inboxImplTypeproviderDefaulturlWorkitem;
  }

  if (opt_inboxImplTypeproviderDefaulturlTask !== undefined) {
    queryParameters['inbox.impl.typeprovider.defaulturl.task'] = opt_inboxImplTypeproviderDefaulturlTask;
  }

  /** @type {!Object} */
  var httpRequestParams = {
    method: 'POST',
    url: path,
    json: true,
            params: queryParameters,
    headers: headerParams
  };

  if (opt_extraHttpRequestParams) {
    httpRequestParams = angular.extend(httpRequestParams, opt_extraHttpRequestParams);
  }

  return (/** @type {?} */ (this.http_))(httpRequestParams);
}

/**
 * 
 * 
 * @param {!boolean=} opt_post 
 * @param {!boolean=} opt_apply 
 * @param {!boolean=} opt_delete 
 * @param {!string=} opt_action 
 * @param {!string=} opt_location 
 * @param {!Array<!string>=} opt_propertylist 
 * @param {!string=} opt_imageQuality 
 * @param {!string=} opt_imageSupportedResolutions 
 * @param {!angular.$http.Config=} opt_extraHttpRequestParams Extra HTTP parameters to send.
 * @return {!angular.$q.Promise<!API.Client.comAdobeCqProjectsImplServletProjectImageServletInfo>}
 */
API.Client.ConfigmgrApi.prototype.comAdobeCqProjectsImplServletProjectImageServlet = function(opt_post, opt_apply, opt_delete, opt_action, opt_location, opt_propertylist, opt_imageQuality, opt_imageSupportedResolutions, opt_extraHttpRequestParams) {
  /** @const {string} */
  var path = this.basePath_ + '/system/console/configMgr/com.adobe.cq.projects.impl.servlet.ProjectImageServlet';

  /** @type {!Object} */
  var queryParameters = {};

  /** @type {!Object} */
  var headerParams = angular.extend({}, this.defaultHeaders_);
  if (opt_post !== undefined) {
    queryParameters['post'] = opt_post;
  }

  if (opt_apply !== undefined) {
    queryParameters['apply'] = opt_apply;
  }

  if (opt_delete !== undefined) {
    queryParameters['delete'] = opt_delete;
  }

  if (opt_action !== undefined) {
    queryParameters['action'] = opt_action;
  }

  if (opt_location !== undefined) {
    queryParameters['$location'] = opt_location;
  }

  if (opt_propertylist !== undefined) {
    queryParameters['propertylist'] = opt_propertylist;
  }

  if (opt_imageQuality !== undefined) {
    queryParameters['image.quality'] = opt_imageQuality;
  }

  if (opt_imageSupportedResolutions !== undefined) {
    queryParameters['image.supported.resolutions'] = opt_imageSupportedResolutions;
  }

  /** @type {!Object} */
  var httpRequestParams = {
    method: 'POST',
    url: path,
    json: true,
            params: queryParameters,
    headers: headerParams
  };

  if (opt_extraHttpRequestParams) {
    httpRequestParams = angular.extend(httpRequestParams, opt_extraHttpRequestParams);
  }

  return (/** @type {?} */ (this.http_))(httpRequestParams);
}

/**
 * 
 * 
 * @param {!boolean=} opt_post 
 * @param {!boolean=} opt_apply 
 * @param {!boolean=} opt_delete 
 * @param {!string=} opt_action 
 * @param {!string=} opt_location 
 * @param {!Array<!string>=} opt_propertylist 
 * @param {!string=} opt_scheduledpurgeName 
 * @param {!boolean=} opt_scheduledpurgePurgeActive 
 * @param {!Array<!string>=} opt_scheduledpurgeTemplates 
 * @param {!boolean=} opt_scheduledpurgePurgeGroups 
 * @param {!boolean=} opt_scheduledpurgePurgeAssets 
 * @param {!boolean=} opt_scheduledpurgeTerminateRunningWorkflows 
 * @param {!number=} opt_scheduledpurgeDaysold 
 * @param {!number=} opt_scheduledpurgeSaveThreshold 
 * @param {!angular.$http.Config=} opt_extraHttpRequestParams Extra HTTP parameters to send.
 * @return {!angular.$q.Promise<!API.Client.comAdobeCqProjectsPurgeSchedulerInfo>}
 */
API.Client.ConfigmgrApi.prototype.comAdobeCqProjectsPurgeScheduler = function(opt_post, opt_apply, opt_delete, opt_action, opt_location, opt_propertylist, opt_scheduledpurgeName, opt_scheduledpurgePurgeActive, opt_scheduledpurgeTemplates, opt_scheduledpurgePurgeGroups, opt_scheduledpurgePurgeAssets, opt_scheduledpurgeTerminateRunningWorkflows, opt_scheduledpurgeDaysold, opt_scheduledpurgeSaveThreshold, opt_extraHttpRequestParams) {
  /** @const {string} */
  var path = this.basePath_ + '/system/console/configMgr/com.adobe.cq.projects.purge.Scheduler';

  /** @type {!Object} */
  var queryParameters = {};

  /** @type {!Object} */
  var headerParams = angular.extend({}, this.defaultHeaders_);
  if (opt_post !== undefined) {
    queryParameters['post'] = opt_post;
  }

  if (opt_apply !== undefined) {
    queryParameters['apply'] = opt_apply;
  }

  if (opt_delete !== undefined) {
    queryParameters['delete'] = opt_delete;
  }

  if (opt_action !== undefined) {
    queryParameters['action'] = opt_action;
  }

  if (opt_location !== undefined) {
    queryParameters['$location'] = opt_location;
  }

  if (opt_propertylist !== undefined) {
    queryParameters['propertylist'] = opt_propertylist;
  }

  if (opt_scheduledpurgeName !== undefined) {
    queryParameters['scheduledpurge.name'] = opt_scheduledpurgeName;
  }

  if (opt_scheduledpurgePurgeActive !== undefined) {
    queryParameters['scheduledpurge.purgeActive'] = opt_scheduledpurgePurgeActive;
  }

  if (opt_scheduledpurgeTemplates !== undefined) {
    queryParameters['scheduledpurge.templates'] = opt_scheduledpurgeTemplates;
  }

  if (opt_scheduledpurgePurgeGroups !== undefined) {
    queryParameters['scheduledpurge.purgeGroups'] = opt_scheduledpurgePurgeGroups;
  }

  if (opt_scheduledpurgePurgeAssets !== undefined) {
    queryParameters['scheduledpurge.purgeAssets'] = opt_scheduledpurgePurgeAssets;
  }

  if (opt_scheduledpurgeTerminateRunningWorkflows !== undefined) {
    queryParameters['scheduledpurge.terminateRunningWorkflows'] = opt_scheduledpurgeTerminateRunningWorkflows;
  }

  if (opt_scheduledpurgeDaysold !== undefined) {
    queryParameters['scheduledpurge.daysold'] = opt_scheduledpurgeDaysold;
  }

  if (opt_scheduledpurgeSaveThreshold !== undefined) {
    queryParameters['scheduledpurge.saveThreshold'] = opt_scheduledpurgeSaveThreshold;
  }

  /** @type {!Object} */
  var httpRequestParams = {
    method: 'POST',
    url: path,
    json: true,
            params: queryParameters,
    headers: headerParams
  };

  if (opt_extraHttpRequestParams) {
    httpRequestParams = angular.extend(httpRequestParams, opt_extraHttpRequestParams);
  }

  return (/** @type {?} */ (this.http_))(httpRequestParams);
}

/**
 * 
 * 
 * @param {!boolean=} opt_post 
 * @param {!boolean=} opt_apply 
 * @param {!boolean=} opt_delete 
 * @param {!string=} opt_action 
 * @param {!string=} opt_location 
 * @param {!Array<!string>=} opt_propertylist 
 * @param {!Array<!string>=} opt_includePaths 
 * @param {!string=} opt_exporterUser 
 * @param {!angular.$http.Config=} opt_extraHttpRequestParams Extra HTTP parameters to send.
 * @return {!angular.$q.Promise<!API.Client.comAdobeCqScheduledExporterImplScheduledExporterImplInfo>}
 */
API.Client.ConfigmgrApi.prototype.comAdobeCqScheduledExporterImplScheduledExporterImpl = function(opt_post, opt_apply, opt_delete, opt_action, opt_location, opt_propertylist, opt_includePaths, opt_exporterUser, opt_extraHttpRequestParams) {
  /** @const {string} */
  var path = this.basePath_ + '/system/console/configMgr/com.adobe.cq.scheduled.exporter.impl.ScheduledExporterImpl';

  /** @type {!Object} */
  var queryParameters = {};

  /** @type {!Object} */
  var headerParams = angular.extend({}, this.defaultHeaders_);
  if (opt_post !== undefined) {
    queryParameters['post'] = opt_post;
  }

  if (opt_apply !== undefined) {
    queryParameters['apply'] = opt_apply;
  }

  if (opt_delete !== undefined) {
    queryParameters['delete'] = opt_delete;
  }

  if (opt_action !== undefined) {
    queryParameters['action'] = opt_action;
  }

  if (opt_location !== undefined) {
    queryParameters['$location'] = opt_location;
  }

  if (opt_propertylist !== undefined) {
    queryParameters['propertylist'] = opt_propertylist;
  }

  if (opt_includePaths !== undefined) {
    queryParameters['include.paths'] = opt_includePaths;
  }

  if (opt_exporterUser !== undefined) {
    queryParameters['exporter.user'] = opt_exporterUser;
  }

  /** @type {!Object} */
  var httpRequestParams = {
    method: 'POST',
    url: path,
    json: true,
            params: queryParameters,
    headers: headerParams
  };

  if (opt_extraHttpRequestParams) {
    httpRequestParams = angular.extend(httpRequestParams, opt_extraHttpRequestParams);
  }

  return (/** @type {?} */ (this.http_))(httpRequestParams);
}

/**
 * 
 * 
 * @param {!boolean=} opt_post 
 * @param {!boolean=} opt_apply 
 * @param {!boolean=} opt_delete 
 * @param {!string=} opt_action 
 * @param {!string=} opt_location 
 * @param {!Array<!string>=} opt_propertylist 
 * @param {!string=} opt_comAdobeCqScreensAnalyticsImplUrl 
 * @param {!string=} opt_comAdobeCqScreensAnalyticsImplApikey 
 * @param {!string=} opt_comAdobeCqScreensAnalyticsImplProject 
 * @param {!string=} opt_comAdobeCqScreensAnalyticsImplEnvironment 
 * @param {!number=} opt_comAdobeCqScreensAnalyticsImplSendFrequency 
 * @param {!angular.$http.Config=} opt_extraHttpRequestParams Extra HTTP parameters to send.
 * @return {!angular.$q.Promise<!API.Client.comAdobeCqScreensAnalyticsImplScreensAnalyticsServiceImplInfo>}
 */
API.Client.ConfigmgrApi.prototype.comAdobeCqScreensAnalyticsImplScreensAnalyticsServiceImpl = function(opt_post, opt_apply, opt_delete, opt_action, opt_location, opt_propertylist, opt_comAdobeCqScreensAnalyticsImplUrl, opt_comAdobeCqScreensAnalyticsImplApikey, opt_comAdobeCqScreensAnalyticsImplProject, opt_comAdobeCqScreensAnalyticsImplEnvironment, opt_comAdobeCqScreensAnalyticsImplSendFrequency, opt_extraHttpRequestParams) {
  /** @const {string} */
  var path = this.basePath_ + '/system/console/configMgr/com.adobe.cq.screens.analytics.impl.ScreensAnalyticsServiceImpl';

  /** @type {!Object} */
  var queryParameters = {};

  /** @type {!Object} */
  var headerParams = angular.extend({}, this.defaultHeaders_);
  if (opt_post !== undefined) {
    queryParameters['post'] = opt_post;
  }

  if (opt_apply !== undefined) {
    queryParameters['apply'] = opt_apply;
  }

  if (opt_delete !== undefined) {
    queryParameters['delete'] = opt_delete;
  }

  if (opt_action !== undefined) {
    queryParameters['action'] = opt_action;
  }

  if (opt_location !== undefined) {
    queryParameters['$location'] = opt_location;
  }

  if (opt_propertylist !== undefined) {
    queryParameters['propertylist'] = opt_propertylist;
  }

  if (opt_comAdobeCqScreensAnalyticsImplUrl !== undefined) {
    queryParameters['com.adobe.cq.screens.analytics.impl.url'] = opt_comAdobeCqScreensAnalyticsImplUrl;
  }

  if (opt_comAdobeCqScreensAnalyticsImplApikey !== undefined) {
    queryParameters['com.adobe.cq.screens.analytics.impl.apikey'] = opt_comAdobeCqScreensAnalyticsImplApikey;
  }

  if (opt_comAdobeCqScreensAnalyticsImplProject !== undefined) {
    queryParameters['com.adobe.cq.screens.analytics.impl.project'] = opt_comAdobeCqScreensAnalyticsImplProject;
  }

  if (opt_comAdobeCqScreensAnalyticsImplEnvironment !== undefined) {
    queryParameters['com.adobe.cq.screens.analytics.impl.environment'] = opt_comAdobeCqScreensAnalyticsImplEnvironment;
  }

  if (opt_comAdobeCqScreensAnalyticsImplSendFrequency !== undefined) {
    queryParameters['com.adobe.cq.screens.analytics.impl.sendFrequency'] = opt_comAdobeCqScreensAnalyticsImplSendFrequency;
  }

  /** @type {!Object} */
  var httpRequestParams = {
    method: 'POST',
    url: path,
    json: true,
            params: queryParameters,
    headers: headerParams
  };

  if (opt_extraHttpRequestParams) {
    httpRequestParams = angular.extend(httpRequestParams, opt_extraHttpRequestParams);
  }

  return (/** @type {?} */ (this.http_))(httpRequestParams);
}

/**
 * 
 * 
 * @param {!boolean=} opt_post 
 * @param {!boolean=} opt_apply 
 * @param {!boolean=} opt_delete 
 * @param {!string=} opt_action 
 * @param {!string=} opt_location 
 * @param {!Array<!string>=} opt_propertylist 
 * @param {!number=} opt_comAdobeAemScreensPlayerPingfrequency 
 * @param {!string=} opt_comAdobeAemScreensDevicePaswordSpecialchars 
 * @param {!number=} opt_comAdobeAemScreensDevicePaswordMinlowercasechars 
 * @param {!number=} opt_comAdobeAemScreensDevicePaswordMinuppercasechars 
 * @param {!number=} opt_comAdobeAemScreensDevicePaswordMinnumberchars 
 * @param {!number=} opt_comAdobeAemScreensDevicePaswordMinspecialchars 
 * @param {!number=} opt_comAdobeAemScreensDevicePaswordMinlength 
 * @param {!angular.$http.Config=} opt_extraHttpRequestParams Extra HTTP parameters to send.
 * @return {!angular.$q.Promise<!API.Client.comAdobeCqScreensDeviceImplDeviceServiceInfo>}
 */
API.Client.ConfigmgrApi.prototype.comAdobeCqScreensDeviceImplDeviceService = function(opt_post, opt_apply, opt_delete, opt_action, opt_location, opt_propertylist, opt_comAdobeAemScreensPlayerPingfrequency, opt_comAdobeAemScreensDevicePaswordSpecialchars, opt_comAdobeAemScreensDevicePaswordMinlowercasechars, opt_comAdobeAemScreensDevicePaswordMinuppercasechars, opt_comAdobeAemScreensDevicePaswordMinnumberchars, opt_comAdobeAemScreensDevicePaswordMinspecialchars, opt_comAdobeAemScreensDevicePaswordMinlength, opt_extraHttpRequestParams) {
  /** @const {string} */
  var path = this.basePath_ + '/system/console/configMgr/com.adobe.cq.screens.device.impl.DeviceService';

  /** @type {!Object} */
  var queryParameters = {};

  /** @type {!Object} */
  var headerParams = angular.extend({}, this.defaultHeaders_);
  if (opt_post !== undefined) {
    queryParameters['post'] = opt_post;
  }

  if (opt_apply !== undefined) {
    queryParameters['apply'] = opt_apply;
  }

  if (opt_delete !== undefined) {
    queryParameters['delete'] = opt_delete;
  }

  if (opt_action !== undefined) {
    queryParameters['action'] = opt_action;
  }

  if (opt_location !== undefined) {
    queryParameters['$location'] = opt_location;
  }

  if (opt_propertylist !== undefined) {
    queryParameters['propertylist'] = opt_propertylist;
  }

  if (opt_comAdobeAemScreensPlayerPingfrequency !== undefined) {
    queryParameters['com.adobe.aem.screens.player.pingfrequency'] = opt_comAdobeAemScreensPlayerPingfrequency;
  }

  if (opt_comAdobeAemScreensDevicePaswordSpecialchars !== undefined) {
    queryParameters['com.adobe.aem.screens.device.pasword.specialchars'] = opt_comAdobeAemScreensDevicePaswordSpecialchars;
  }

  if (opt_comAdobeAemScreensDevicePaswordMinlowercasechars !== undefined) {
    queryParameters['com.adobe.aem.screens.device.pasword.minlowercasechars'] = opt_comAdobeAemScreensDevicePaswordMinlowercasechars;
  }

  if (opt_comAdobeAemScreensDevicePaswordMinuppercasechars !== undefined) {
    queryParameters['com.adobe.aem.screens.device.pasword.minuppercasechars'] = opt_comAdobeAemScreensDevicePaswordMinuppercasechars;
  }

  if (opt_comAdobeAemScreensDevicePaswordMinnumberchars !== undefined) {
    queryParameters['com.adobe.aem.screens.device.pasword.minnumberchars'] = opt_comAdobeAemScreensDevicePaswordMinnumberchars;
  }

  if (opt_comAdobeAemScreensDevicePaswordMinspecialchars !== undefined) {
    queryParameters['com.adobe.aem.screens.device.pasword.minspecialchars'] = opt_comAdobeAemScreensDevicePaswordMinspecialchars;
  }

  if (opt_comAdobeAemScreensDevicePaswordMinlength !== undefined) {
    queryParameters['com.adobe.aem.screens.device.pasword.minlength'] = opt_comAdobeAemScreensDevicePaswordMinlength;
  }

  /** @type {!Object} */
  var httpRequestParams = {
    method: 'POST',
    url: path,
    json: true,
            params: queryParameters,
    headers: headerParams
  };

  if (opt_extraHttpRequestParams) {
    httpRequestParams = angular.extend(httpRequestParams, opt_extraHttpRequestParams);
  }

  return (/** @type {?} */ (this.http_))(httpRequestParams);
}

/**
 * 
 * 
 * @param {!boolean=} opt_post 
 * @param {!boolean=} opt_apply 
 * @param {!boolean=} opt_delete 
 * @param {!string=} opt_action 
 * @param {!string=} opt_location 
 * @param {!Array<!string>=} opt_propertylist 
 * @param {!number=} opt_deviceRegistrationTimeout 
 * @param {!angular.$http.Config=} opt_extraHttpRequestParams Extra HTTP parameters to send.
 * @return {!angular.$q.Promise<!API.Client.comAdobeCqScreensDeviceRegistrationImplRegistrationServiceImplInfo>}
 */
API.Client.ConfigmgrApi.prototype.comAdobeCqScreensDeviceRegistrationImplRegistrationServiceImpl = function(opt_post, opt_apply, opt_delete, opt_action, opt_location, opt_propertylist, opt_deviceRegistrationTimeout, opt_extraHttpRequestParams) {
  /** @const {string} */
  var path = this.basePath_ + '/system/console/configMgr/com.adobe.cq.screens.device.registration.impl.RegistrationServiceImpl';

  /** @type {!Object} */
  var queryParameters = {};

  /** @type {!Object} */
  var headerParams = angular.extend({}, this.defaultHeaders_);
  if (opt_post !== undefined) {
    queryParameters['post'] = opt_post;
  }

  if (opt_apply !== undefined) {
    queryParameters['apply'] = opt_apply;
  }

  if (opt_delete !== undefined) {
    queryParameters['delete'] = opt_delete;
  }

  if (opt_action !== undefined) {
    queryParameters['action'] = opt_action;
  }

  if (opt_location !== undefined) {
    queryParameters['$location'] = opt_location;
  }

  if (opt_propertylist !== undefined) {
    queryParameters['propertylist'] = opt_propertylist;
  }

  if (opt_deviceRegistrationTimeout !== undefined) {
    queryParameters['deviceRegistrationTimeout'] = opt_deviceRegistrationTimeout;
  }

  /** @type {!Object} */
  var httpRequestParams = {
    method: 'POST',
    url: path,
    json: true,
            params: queryParameters,
    headers: headerParams
  };

  if (opt_extraHttpRequestParams) {
    httpRequestParams = angular.extend(httpRequestParams, opt_extraHttpRequestParams);
  }

  return (/** @type {?} */ (this.http_))(httpRequestParams);
}

/**
 * 
 * 
 * @param {!boolean=} opt_post 
 * @param {!boolean=} opt_apply 
 * @param {!boolean=} opt_delete 
 * @param {!string=} opt_action 
 * @param {!string=} opt_location 
 * @param {!Array<!string>=} opt_propertylist 
 * @param {!Array<!string>=} opt_cqPagesupdatehandlerImageresourcetypes 
 * @param {!Array<!string>=} opt_cqPagesupdatehandlerProductresourcetypes 
 * @param {!Array<!string>=} opt_cqPagesupdatehandlerVideoresourcetypes 
 * @param {!Array<!string>=} opt_cqPagesupdatehandlerDynamicsequenceresourcetypes 
 * @param {!Array<!string>=} opt_cqPagesupdatehandlerPreviewmodepaths 
 * @param {!angular.$http.Config=} opt_extraHttpRequestParams Extra HTTP parameters to send.
 * @return {!angular.$q.Promise<!API.Client.comAdobeCqScreensImplHandlerChannelsUpdateHandlerInfo>}
 */
API.Client.ConfigmgrApi.prototype.comAdobeCqScreensImplHandlerChannelsUpdateHandler = function(opt_post, opt_apply, opt_delete, opt_action, opt_location, opt_propertylist, opt_cqPagesupdatehandlerImageresourcetypes, opt_cqPagesupdatehandlerProductresourcetypes, opt_cqPagesupdatehandlerVideoresourcetypes, opt_cqPagesupdatehandlerDynamicsequenceresourcetypes, opt_cqPagesupdatehandlerPreviewmodepaths, opt_extraHttpRequestParams) {
  /** @const {string} */
  var path = this.basePath_ + '/system/console/configMgr/com.adobe.cq.screens.impl.handler.ChannelsUpdateHandler';

  /** @type {!Object} */
  var queryParameters = {};

  /** @type {!Object} */
  var headerParams = angular.extend({}, this.defaultHeaders_);
  if (opt_post !== undefined) {
    queryParameters['post'] = opt_post;
  }

  if (opt_apply !== undefined) {
    queryParameters['apply'] = opt_apply;
  }

  if (opt_delete !== undefined) {
    queryParameters['delete'] = opt_delete;
  }

  if (opt_action !== undefined) {
    queryParameters['action'] = opt_action;
  }

  if (opt_location !== undefined) {
    queryParameters['$location'] = opt_location;
  }

  if (opt_propertylist !== undefined) {
    queryParameters['propertylist'] = opt_propertylist;
  }

  if (opt_cqPagesupdatehandlerImageresourcetypes !== undefined) {
    queryParameters['cq.pagesupdatehandler.imageresourcetypes'] = opt_cqPagesupdatehandlerImageresourcetypes;
  }

  if (opt_cqPagesupdatehandlerProductresourcetypes !== undefined) {
    queryParameters['cq.pagesupdatehandler.productresourcetypes'] = opt_cqPagesupdatehandlerProductresourcetypes;
  }

  if (opt_cqPagesupdatehandlerVideoresourcetypes !== undefined) {
    queryParameters['cq.pagesupdatehandler.videoresourcetypes'] = opt_cqPagesupdatehandlerVideoresourcetypes;
  }

  if (opt_cqPagesupdatehandlerDynamicsequenceresourcetypes !== undefined) {
    queryParameters['cq.pagesupdatehandler.dynamicsequenceresourcetypes'] = opt_cqPagesupdatehandlerDynamicsequenceresourcetypes;
  }

  if (opt_cqPagesupdatehandlerPreviewmodepaths !== undefined) {
    queryParameters['cq.pagesupdatehandler.previewmodepaths'] = opt_cqPagesupdatehandlerPreviewmodepaths;
  }

  /** @type {!Object} */
  var httpRequestParams = {
    method: 'POST',
    url: path,
    json: true,
            params: queryParameters,
    headers: headerParams
  };

  if (opt_extraHttpRequestParams) {
    httpRequestParams = angular.extend(httpRequestParams, opt_extraHttpRequestParams);
  }

  return (/** @type {?} */ (this.http_))(httpRequestParams);
}

/**
 * 
 * 
 * @param {!boolean=} opt_post 
 * @param {!boolean=} opt_apply 
 * @param {!boolean=} opt_delete 
 * @param {!string=} opt_action 
 * @param {!string=} opt_location 
 * @param {!Array<!string>=} opt_propertylist 
 * @param {!string=} opt_schedulerExpression 
 * @param {!angular.$http.Config=} opt_extraHttpRequestParams Extra HTTP parameters to send.
 * @return {!angular.$q.Promise<!API.Client.comAdobeCqScreensImplJobsDistributedDevicesStatiUpdateJobInfo>}
 */
API.Client.ConfigmgrApi.prototype.comAdobeCqScreensImplJobsDistributedDevicesStatiUpdateJob = function(opt_post, opt_apply, opt_delete, opt_action, opt_location, opt_propertylist, opt_schedulerExpression, opt_extraHttpRequestParams) {
  /** @const {string} */
  var path = this.basePath_ + '/system/console/configMgr/com.adobe.cq.screens.impl.jobs.DistributedDevicesStatiUpdateJob';

  /** @type {!Object} */
  var queryParameters = {};

  /** @type {!Object} */
  var headerParams = angular.extend({}, this.defaultHeaders_);
  if (opt_post !== undefined) {
    queryParameters['post'] = opt_post;
  }

  if (opt_apply !== undefined) {
    queryParameters['apply'] = opt_apply;
  }

  if (opt_delete !== undefined) {
    queryParameters['delete'] = opt_delete;
  }

  if (opt_action !== undefined) {
    queryParameters['action'] = opt_action;
  }

  if (opt_location !== undefined) {
    queryParameters['$location'] = opt_location;
  }

  if (opt_propertylist !== undefined) {
    queryParameters['propertylist'] = opt_propertylist;
  }

  if (opt_schedulerExpression !== undefined) {
    queryParameters['scheduler.expression'] = opt_schedulerExpression;
  }

  /** @type {!Object} */
  var httpRequestParams = {
    method: 'POST',
    url: path,
    json: true,
            params: queryParameters,
    headers: headerParams
  };

  if (opt_extraHttpRequestParams) {
    httpRequestParams = angular.extend(httpRequestParams, opt_extraHttpRequestParams);
  }

  return (/** @type {?} */ (this.http_))(httpRequestParams);
}

/**
 * 
 * 
 * @param {!boolean=} opt_post 
 * @param {!boolean=} opt_apply 
 * @param {!boolean=} opt_delete 
 * @param {!string=} opt_action 
 * @param {!string=} opt_location 
 * @param {!Array<!string>=} opt_propertylist 
 * @param {!number=} opt_comAdobeAemScreensImplRemoteRequestTimeout 
 * @param {!angular.$http.Config=} opt_extraHttpRequestParams Extra HTTP parameters to send.
 * @return {!angular.$q.Promise<!API.Client.comAdobeCqScreensImplRemoteImplDistributedHttpClientImplInfo>}
 */
API.Client.ConfigmgrApi.prototype.comAdobeCqScreensImplRemoteImplDistributedHttpClientImpl = function(opt_post, opt_apply, opt_delete, opt_action, opt_location, opt_propertylist, opt_comAdobeAemScreensImplRemoteRequestTimeout, opt_extraHttpRequestParams) {
  /** @const {string} */
  var path = this.basePath_ + '/system/console/configMgr/com.adobe.cq.screens.impl.remote.impl.DistributedHttpClientImpl';

  /** @type {!Object} */
  var queryParameters = {};

  /** @type {!Object} */
  var headerParams = angular.extend({}, this.defaultHeaders_);
  if (opt_post !== undefined) {
    queryParameters['post'] = opt_post;
  }

  if (opt_apply !== undefined) {
    queryParameters['apply'] = opt_apply;
  }

  if (opt_delete !== undefined) {
    queryParameters['delete'] = opt_delete;
  }

  if (opt_action !== undefined) {
    queryParameters['action'] = opt_action;
  }

  if (opt_location !== undefined) {
    queryParameters['$location'] = opt_location;
  }

  if (opt_propertylist !== undefined) {
    queryParameters['propertylist'] = opt_propertylist;
  }

  if (opt_comAdobeAemScreensImplRemoteRequestTimeout !== undefined) {
    queryParameters['com.adobe.aem.screens.impl.remote.request_timeout'] = opt_comAdobeAemScreensImplRemoteRequestTimeout;
  }

  /** @type {!Object} */
  var httpRequestParams = {
    method: 'POST',
    url: path,
    json: true,
            params: queryParameters,
    headers: headerParams
  };

  if (opt_extraHttpRequestParams) {
    httpRequestParams = angular.extend(httpRequestParams, opt_extraHttpRequestParams);
  }

  return (/** @type {?} */ (this.http_))(httpRequestParams);
}

/**
 * 
 * 
 * @param {!boolean=} opt_post 
 * @param {!boolean=} opt_apply 
 * @param {!boolean=} opt_delete 
 * @param {!string=} opt_action 
 * @param {!string=} opt_location 
 * @param {!Array<!string>=} opt_propertylist 
 * @param {!Array<!string>=} opt_screensChannelsPropertiesToRemove 
 * @param {!angular.$http.Config=} opt_extraHttpRequestParams Extra HTTP parameters to send.
 * @return {!angular.$q.Promise<!API.Client.comAdobeCqScreensImplScreensChannelPostProcessorInfo>}
 */
API.Client.ConfigmgrApi.prototype.comAdobeCqScreensImplScreensChannelPostProcessor = function(opt_post, opt_apply, opt_delete, opt_action, opt_location, opt_propertylist, opt_screensChannelsPropertiesToRemove, opt_extraHttpRequestParams) {
  /** @const {string} */
  var path = this.basePath_ + '/system/console/configMgr/com.adobe.cq.screens.impl.ScreensChannelPostProcessor';

  /** @type {!Object} */
  var queryParameters = {};

  /** @type {!Object} */
  var headerParams = angular.extend({}, this.defaultHeaders_);
  if (opt_post !== undefined) {
    queryParameters['post'] = opt_post;
  }

  if (opt_apply !== undefined) {
    queryParameters['apply'] = opt_apply;
  }

  if (opt_delete !== undefined) {
    queryParameters['delete'] = opt_delete;
  }

  if (opt_action !== undefined) {
    queryParameters['action'] = opt_action;
  }

  if (opt_location !== undefined) {
    queryParameters['$location'] = opt_location;
  }

  if (opt_propertylist !== undefined) {
    queryParameters['propertylist'] = opt_propertylist;
  }

  if (opt_screensChannelsPropertiesToRemove !== undefined) {
    queryParameters['screens.channels.properties.to.remove'] = opt_screensChannelsPropertiesToRemove;
  }

  /** @type {!Object} */
  var httpRequestParams = {
    method: 'POST',
    url: path,
    json: true,
            params: queryParameters,
    headers: headerParams
  };

  if (opt_extraHttpRequestParams) {
    httpRequestParams = angular.extend(httpRequestParams, opt_extraHttpRequestParams);
  }

  return (/** @type {?} */ (this.http_))(httpRequestParams);
}

/**
 * 
 * 
 * @param {!boolean=} opt_post 
 * @param {!boolean=} opt_apply 
 * @param {!boolean=} opt_delete 
 * @param {!string=} opt_action 
 * @param {!string=} opt_location 
 * @param {!Array<!string>=} opt_propertylist 
 * @param {!Array<!string>=} opt_comAdobeCqScreensMonitoringImplScreensMonitoringServiceImplProjectPath 
 * @param {!string=} opt_comAdobeCqScreensMonitoringImplScreensMonitoringServiceImplScheduleFrequency 
 * @param {!number=} opt_comAdobeCqScreensMonitoringImplScreensMonitoringServiceImplPingTimeout 
 * @param {!string=} opt_comAdobeCqScreensMonitoringImplScreensMonitoringServiceImplRecipients 
 * @param {!string=} opt_comAdobeCqScreensMonitoringImplScreensMonitoringServiceImplSmtpserver 
 * @param {!number=} opt_comAdobeCqScreensMonitoringImplScreensMonitoringServiceImplSmtpport 
 * @param {!boolean=} opt_comAdobeCqScreensMonitoringImplScreensMonitoringServiceImplUsetls 
 * @param {!string=} opt_comAdobeCqScreensMonitoringImplScreensMonitoringServiceImplUsername 
 * @param {!string=} opt_comAdobeCqScreensMonitoringImplScreensMonitoringServiceImplPassword 
 * @param {!angular.$http.Config=} opt_extraHttpRequestParams Extra HTTP parameters to send.
 * @return {!angular.$q.Promise<!API.Client.comAdobeCqScreensMonitoringImplScreensMonitoringServiceImplInfo>}
 */
API.Client.ConfigmgrApi.prototype.comAdobeCqScreensMonitoringImplScreensMonitoringServiceImpl = function(opt_post, opt_apply, opt_delete, opt_action, opt_location, opt_propertylist, opt_comAdobeCqScreensMonitoringImplScreensMonitoringServiceImplProjectPath, opt_comAdobeCqScreensMonitoringImplScreensMonitoringServiceImplScheduleFrequency, opt_comAdobeCqScreensMonitoringImplScreensMonitoringServiceImplPingTimeout, opt_comAdobeCqScreensMonitoringImplScreensMonitoringServiceImplRecipients, opt_comAdobeCqScreensMonitoringImplScreensMonitoringServiceImplSmtpserver, opt_comAdobeCqScreensMonitoringImplScreensMonitoringServiceImplSmtpport, opt_comAdobeCqScreensMonitoringImplScreensMonitoringServiceImplUsetls, opt_comAdobeCqScreensMonitoringImplScreensMonitoringServiceImplUsername, opt_comAdobeCqScreensMonitoringImplScreensMonitoringServiceImplPassword, opt_extraHttpRequestParams) {
  /** @const {string} */
  var path = this.basePath_ + '/system/console/configMgr/com.adobe.cq.screens.monitoring.impl.ScreensMonitoringServiceImpl';

  /** @type {!Object} */
  var queryParameters = {};

  /** @type {!Object} */
  var headerParams = angular.extend({}, this.defaultHeaders_);
  if (opt_post !== undefined) {
    queryParameters['post'] = opt_post;
  }

  if (opt_apply !== undefined) {
    queryParameters['apply'] = opt_apply;
  }

  if (opt_delete !== undefined) {
    queryParameters['delete'] = opt_delete;
  }

  if (opt_action !== undefined) {
    queryParameters['action'] = opt_action;
  }

  if (opt_location !== undefined) {
    queryParameters['$location'] = opt_location;
  }

  if (opt_propertylist !== undefined) {
    queryParameters['propertylist'] = opt_propertylist;
  }

  if (opt_comAdobeCqScreensMonitoringImplScreensMonitoringServiceImplProjectPath !== undefined) {
    queryParameters['com.adobe.cq.screens.monitoring.impl.ScreensMonitoringServiceImpl.projectPath'] = opt_comAdobeCqScreensMonitoringImplScreensMonitoringServiceImplProjectPath;
  }

  if (opt_comAdobeCqScreensMonitoringImplScreensMonitoringServiceImplScheduleFrequency !== undefined) {
    queryParameters['com.adobe.cq.screens.monitoring.impl.ScreensMonitoringServiceImpl.scheduleFrequency'] = opt_comAdobeCqScreensMonitoringImplScreensMonitoringServiceImplScheduleFrequency;
  }

  if (opt_comAdobeCqScreensMonitoringImplScreensMonitoringServiceImplPingTimeout !== undefined) {
    queryParameters['com.adobe.cq.screens.monitoring.impl.ScreensMonitoringServiceImpl.pingTimeout'] = opt_comAdobeCqScreensMonitoringImplScreensMonitoringServiceImplPingTimeout;
  }

  if (opt_comAdobeCqScreensMonitoringImplScreensMonitoringServiceImplRecipients !== undefined) {
    queryParameters['com.adobe.cq.screens.monitoring.impl.ScreensMonitoringServiceImpl.recipients'] = opt_comAdobeCqScreensMonitoringImplScreensMonitoringServiceImplRecipients;
  }

  if (opt_comAdobeCqScreensMonitoringImplScreensMonitoringServiceImplSmtpserver !== undefined) {
    queryParameters['com.adobe.cq.screens.monitoring.impl.ScreensMonitoringServiceImpl.smtpserver'] = opt_comAdobeCqScreensMonitoringImplScreensMonitoringServiceImplSmtpserver;
  }

  if (opt_comAdobeCqScreensMonitoringImplScreensMonitoringServiceImplSmtpport !== undefined) {
    queryParameters['com.adobe.cq.screens.monitoring.impl.ScreensMonitoringServiceImpl.smtpport'] = opt_comAdobeCqScreensMonitoringImplScreensMonitoringServiceImplSmtpport;
  }

  if (opt_comAdobeCqScreensMonitoringImplScreensMonitoringServiceImplUsetls !== undefined) {
    queryParameters['com.adobe.cq.screens.monitoring.impl.ScreensMonitoringServiceImpl.usetls'] = opt_comAdobeCqScreensMonitoringImplScreensMonitoringServiceImplUsetls;
  }

  if (opt_comAdobeCqScreensMonitoringImplScreensMonitoringServiceImplUsername !== undefined) {
    queryParameters['com.adobe.cq.screens.monitoring.impl.ScreensMonitoringServiceImpl.username'] = opt_comAdobeCqScreensMonitoringImplScreensMonitoringServiceImplUsername;
  }

  if (opt_comAdobeCqScreensMonitoringImplScreensMonitoringServiceImplPassword !== undefined) {
    queryParameters['com.adobe.cq.screens.monitoring.impl.ScreensMonitoringServiceImpl.password'] = opt_comAdobeCqScreensMonitoringImplScreensMonitoringServiceImplPassword;
  }

  /** @type {!Object} */
  var httpRequestParams = {
    method: 'POST',
    url: path,
    json: true,
            params: queryParameters,
    headers: headerParams
  };

  if (opt_extraHttpRequestParams) {
    httpRequestParams = angular.extend(httpRequestParams, opt_extraHttpRequestParams);
  }

  return (/** @type {?} */ (this.http_))(httpRequestParams);
}

/**
 * 
 * 
 * @param {!boolean=} opt_post 
 * @param {!boolean=} opt_apply 
 * @param {!boolean=} opt_delete 
 * @param {!string=} opt_action 
 * @param {!string=} opt_location 
 * @param {!Array<!string>=} opt_propertylist 
 * @param {!number=} opt_serviceRanking 
 * @param {!number=} opt_globalSize 
 * @param {!number=} opt_maxDiskUsage 
 * @param {!boolean=} opt_persistenceEnabled 
 * @param {!number=} opt_threadPoolMaxSize 
 * @param {!number=} opt_scheduledThreadPoolMaxSize 
 * @param {!number=} opt_gracefulShutdownTimeout 
 * @param {!Array<!string>=} opt_queues 
 * @param {!Array<!string>=} opt_topics 
 * @param {!number=} opt_addressesMaxDeliveryAttempts 
 * @param {!number=} opt_addressesExpiryDelay 
 * @param {!string=} opt_addressesAddressFullMessagePolicy 
 * @param {!number=} opt_addressesMaxSizeBytes 
 * @param {!number=} opt_addressesPageSizeBytes 
 * @param {!number=} opt_addressesPageCacheMaxSize 
 * @param {!string=} opt_clusterUser 
 * @param {!string=} opt_clusterPassword 
 * @param {!number=} opt_clusterCallTimeout 
 * @param {!number=} opt_clusterCallFailoverTimeout 
 * @param {!number=} opt_clusterClientFailureCheckPeriod 
 * @param {!number=} opt_clusterNotificationAttempts 
 * @param {!number=} opt_clusterNotificationInterval 
 * @param {!number=} opt_idCacheSize 
 * @param {!number=} opt_clusterConfirmationWindowSize 
 * @param {!number=} opt_clusterConnectionTtl 
 * @param {!boolean=} opt_clusterDuplicateDetection 
 * @param {!number=} opt_clusterInitialConnectAttempts 
 * @param {!number=} opt_clusterMaxRetryInterval 
 * @param {!number=} opt_clusterMinLargeMessageSize 
 * @param {!number=} opt_clusterProducerWindowSize 
 * @param {!number=} opt_clusterReconnectAttempts 
 * @param {!number=} opt_clusterRetryInterval 
 * @param {!number=} opt_clusterRetryIntervalMultiplier 
 * @param {!angular.$http.Config=} opt_extraHttpRequestParams Extra HTTP parameters to send.
 * @return {!angular.$q.Promise<!API.Client.comAdobeCqScreensMqActivemqImplArtemisJMSProviderInfo>}
 */
API.Client.ConfigmgrApi.prototype.comAdobeCqScreensMqActivemqImplArtemisJMSProvider = function(opt_post, opt_apply, opt_delete, opt_action, opt_location, opt_propertylist, opt_serviceRanking, opt_globalSize, opt_maxDiskUsage, opt_persistenceEnabled, opt_threadPoolMaxSize, opt_scheduledThreadPoolMaxSize, opt_gracefulShutdownTimeout, opt_queues, opt_topics, opt_addressesMaxDeliveryAttempts, opt_addressesExpiryDelay, opt_addressesAddressFullMessagePolicy, opt_addressesMaxSizeBytes, opt_addressesPageSizeBytes, opt_addressesPageCacheMaxSize, opt_clusterUser, opt_clusterPassword, opt_clusterCallTimeout, opt_clusterCallFailoverTimeout, opt_clusterClientFailureCheckPeriod, opt_clusterNotificationAttempts, opt_clusterNotificationInterval, opt_idCacheSize, opt_clusterConfirmationWindowSize, opt_clusterConnectionTtl, opt_clusterDuplicateDetection, opt_clusterInitialConnectAttempts, opt_clusterMaxRetryInterval, opt_clusterMinLargeMessageSize, opt_clusterProducerWindowSize, opt_clusterReconnectAttempts, opt_clusterRetryInterval, opt_clusterRetryIntervalMultiplier, opt_extraHttpRequestParams) {
  /** @const {string} */
  var path = this.basePath_ + '/system/console/configMgr/com.adobe.cq.screens.mq.activemq.impl.ArtemisJMSProvider';

  /** @type {!Object} */
  var queryParameters = {};

  /** @type {!Object} */
  var headerParams = angular.extend({}, this.defaultHeaders_);
  if (opt_post !== undefined) {
    queryParameters['post'] = opt_post;
  }

  if (opt_apply !== undefined) {
    queryParameters['apply'] = opt_apply;
  }

  if (opt_delete !== undefined) {
    queryParameters['delete'] = opt_delete;
  }

  if (opt_action !== undefined) {
    queryParameters['action'] = opt_action;
  }

  if (opt_location !== undefined) {
    queryParameters['$location'] = opt_location;
  }

  if (opt_propertylist !== undefined) {
    queryParameters['propertylist'] = opt_propertylist;
  }

  if (opt_serviceRanking !== undefined) {
    queryParameters['service.ranking'] = opt_serviceRanking;
  }

  if (opt_globalSize !== undefined) {
    queryParameters['global.size'] = opt_globalSize;
  }

  if (opt_maxDiskUsage !== undefined) {
    queryParameters['max.disk.usage'] = opt_maxDiskUsage;
  }

  if (opt_persistenceEnabled !== undefined) {
    queryParameters['persistence.enabled'] = opt_persistenceEnabled;
  }

  if (opt_threadPoolMaxSize !== undefined) {
    queryParameters['thread.pool.max.size'] = opt_threadPoolMaxSize;
  }

  if (opt_scheduledThreadPoolMaxSize !== undefined) {
    queryParameters['scheduled.thread.pool.max.size'] = opt_scheduledThreadPoolMaxSize;
  }

  if (opt_gracefulShutdownTimeout !== undefined) {
    queryParameters['graceful.shutdown.timeout'] = opt_gracefulShutdownTimeout;
  }

  if (opt_queues !== undefined) {
    queryParameters['queues'] = opt_queues;
  }

  if (opt_topics !== undefined) {
    queryParameters['topics'] = opt_topics;
  }

  if (opt_addressesMaxDeliveryAttempts !== undefined) {
    queryParameters['addresses.max.delivery.attempts'] = opt_addressesMaxDeliveryAttempts;
  }

  if (opt_addressesExpiryDelay !== undefined) {
    queryParameters['addresses.expiry.delay'] = opt_addressesExpiryDelay;
  }

  if (opt_addressesAddressFullMessagePolicy !== undefined) {
    queryParameters['addresses.address.full.message.policy'] = opt_addressesAddressFullMessagePolicy;
  }

  if (opt_addressesMaxSizeBytes !== undefined) {
    queryParameters['addresses.max.size.bytes'] = opt_addressesMaxSizeBytes;
  }

  if (opt_addressesPageSizeBytes !== undefined) {
    queryParameters['addresses.page.size.bytes'] = opt_addressesPageSizeBytes;
  }

  if (opt_addressesPageCacheMaxSize !== undefined) {
    queryParameters['addresses.page.cache.max.size'] = opt_addressesPageCacheMaxSize;
  }

  if (opt_clusterUser !== undefined) {
    queryParameters['cluster.user'] = opt_clusterUser;
  }

  if (opt_clusterPassword !== undefined) {
    queryParameters['cluster.password'] = opt_clusterPassword;
  }

  if (opt_clusterCallTimeout !== undefined) {
    queryParameters['cluster.call.timeout'] = opt_clusterCallTimeout;
  }

  if (opt_clusterCallFailoverTimeout !== undefined) {
    queryParameters['cluster.call.failover.timeout'] = opt_clusterCallFailoverTimeout;
  }

  if (opt_clusterClientFailureCheckPeriod !== undefined) {
    queryParameters['cluster.client.failure.check.period'] = opt_clusterClientFailureCheckPeriod;
  }

  if (opt_clusterNotificationAttempts !== undefined) {
    queryParameters['cluster.notification.attempts'] = opt_clusterNotificationAttempts;
  }

  if (opt_clusterNotificationInterval !== undefined) {
    queryParameters['cluster.notification.interval'] = opt_clusterNotificationInterval;
  }

  if (opt_idCacheSize !== undefined) {
    queryParameters['id.cache.size'] = opt_idCacheSize;
  }

  if (opt_clusterConfirmationWindowSize !== undefined) {
    queryParameters['cluster.confirmation.window.size'] = opt_clusterConfirmationWindowSize;
  }

  if (opt_clusterConnectionTtl !== undefined) {
    queryParameters['cluster.connection.ttl'] = opt_clusterConnectionTtl;
  }

  if (opt_clusterDuplicateDetection !== undefined) {
    queryParameters['cluster.duplicate.detection'] = opt_clusterDuplicateDetection;
  }

  if (opt_clusterInitialConnectAttempts !== undefined) {
    queryParameters['cluster.initial.connect.attempts'] = opt_clusterInitialConnectAttempts;
  }

  if (opt_clusterMaxRetryInterval !== undefined) {
    queryParameters['cluster.max.retry.interval'] = opt_clusterMaxRetryInterval;
  }

  if (opt_clusterMinLargeMessageSize !== undefined) {
    queryParameters['cluster.min.large.message.size'] = opt_clusterMinLargeMessageSize;
  }

  if (opt_clusterProducerWindowSize !== undefined) {
    queryParameters['cluster.producer.window.size'] = opt_clusterProducerWindowSize;
  }

  if (opt_clusterReconnectAttempts !== undefined) {
    queryParameters['cluster.reconnect.attempts'] = opt_clusterReconnectAttempts;
  }

  if (opt_clusterRetryInterval !== undefined) {
    queryParameters['cluster.retry.interval'] = opt_clusterRetryInterval;
  }

  if (opt_clusterRetryIntervalMultiplier !== undefined) {
    queryParameters['cluster.retry.interval.multiplier'] = opt_clusterRetryIntervalMultiplier;
  }

  /** @type {!Object} */
  var httpRequestParams = {
    method: 'POST',
    url: path,
    json: true,
            params: queryParameters,
    headers: headerParams
  };

  if (opt_extraHttpRequestParams) {
    httpRequestParams = angular.extend(httpRequestParams, opt_extraHttpRequestParams);
  }

  return (/** @type {?} */ (this.http_))(httpRequestParams);
}

/**
 * 
 * 
 * @param {!boolean=} opt_post 
 * @param {!boolean=} opt_apply 
 * @param {!boolean=} opt_delete 
 * @param {!string=} opt_action 
 * @param {!string=} opt_location 
 * @param {!Array<!string>=} opt_propertylist 
 * @param {!Array<!string>=} opt_comAdobeCqScreensOfflinecontentImplBulkOfflineUpdateServiceImplProjectPath 
 * @param {!string=} opt_comAdobeCqScreensOfflinecontentImplBulkOfflineUpdateServiceImplScheduleFrequency 
 * @param {!angular.$http.Config=} opt_extraHttpRequestParams Extra HTTP parameters to send.
 * @return {!angular.$q.Promise<!API.Client.comAdobeCqScreensOfflinecontentImplBulkOfflineUpdateServiceImplInfo>}
 */
API.Client.ConfigmgrApi.prototype.comAdobeCqScreensOfflinecontentImplBulkOfflineUpdateServiceImpl = function(opt_post, opt_apply, opt_delete, opt_action, opt_location, opt_propertylist, opt_comAdobeCqScreensOfflinecontentImplBulkOfflineUpdateServiceImplProjectPath, opt_comAdobeCqScreensOfflinecontentImplBulkOfflineUpdateServiceImplScheduleFrequency, opt_extraHttpRequestParams) {
  /** @const {string} */
  var path = this.basePath_ + '/system/console/configMgr/com.adobe.cq.screens.offlinecontent.impl.BulkOfflineUpdateServiceImpl';

  /** @type {!Object} */
  var queryParameters = {};

  /** @type {!Object} */
  var headerParams = angular.extend({}, this.defaultHeaders_);
  if (opt_post !== undefined) {
    queryParameters['post'] = opt_post;
  }

  if (opt_apply !== undefined) {
    queryParameters['apply'] = opt_apply;
  }

  if (opt_delete !== undefined) {
    queryParameters['delete'] = opt_delete;
  }

  if (opt_action !== undefined) {
    queryParameters['action'] = opt_action;
  }

  if (opt_location !== undefined) {
    queryParameters['$location'] = opt_location;
  }

  if (opt_propertylist !== undefined) {
    queryParameters['propertylist'] = opt_propertylist;
  }

  if (opt_comAdobeCqScreensOfflinecontentImplBulkOfflineUpdateServiceImplProjectPath !== undefined) {
    queryParameters['com.adobe.cq.screens.offlinecontent.impl.BulkOfflineUpdateServiceImpl.projectPath'] = opt_comAdobeCqScreensOfflinecontentImplBulkOfflineUpdateServiceImplProjectPath;
  }

  if (opt_comAdobeCqScreensOfflinecontentImplBulkOfflineUpdateServiceImplScheduleFrequency !== undefined) {
    queryParameters['com.adobe.cq.screens.offlinecontent.impl.BulkOfflineUpdateServiceImpl.scheduleFrequency'] = opt_comAdobeCqScreensOfflinecontentImplBulkOfflineUpdateServiceImplScheduleFrequency;
  }

  /** @type {!Object} */
  var httpRequestParams = {
    method: 'POST',
    url: path,
    json: true,
            params: queryParameters,
    headers: headerParams
  };

  if (opt_extraHttpRequestParams) {
    httpRequestParams = angular.extend(httpRequestParams, opt_extraHttpRequestParams);
  }

  return (/** @type {?} */ (this.http_))(httpRequestParams);
}

/**
 * 
 * 
 * @param {!boolean=} opt_post 
 * @param {!boolean=} opt_apply 
 * @param {!boolean=} opt_delete 
 * @param {!string=} opt_action 
 * @param {!string=} opt_location 
 * @param {!Array<!string>=} opt_propertylist 
 * @param {!boolean=} opt_disableSmartSync 
 * @param {!angular.$http.Config=} opt_extraHttpRequestParams Extra HTTP parameters to send.
 * @return {!angular.$q.Promise<!API.Client.comAdobeCqScreensOfflinecontentImplOfflineContentServiceImplInfo>}
 */
API.Client.ConfigmgrApi.prototype.comAdobeCqScreensOfflinecontentImplOfflineContentServiceImpl = function(opt_post, opt_apply, opt_delete, opt_action, opt_location, opt_propertylist, opt_disableSmartSync, opt_extraHttpRequestParams) {
  /** @const {string} */
  var path = this.basePath_ + '/system/console/configMgr/com.adobe.cq.screens.offlinecontent.impl.OfflineContentServiceImpl';

  /** @type {!Object} */
  var queryParameters = {};

  /** @type {!Object} */
  var headerParams = angular.extend({}, this.defaultHeaders_);
  if (opt_post !== undefined) {
    queryParameters['post'] = opt_post;
  }

  if (opt_apply !== undefined) {
    queryParameters['apply'] = opt_apply;
  }

  if (opt_delete !== undefined) {
    queryParameters['delete'] = opt_delete;
  }

  if (opt_action !== undefined) {
    queryParameters['action'] = opt_action;
  }

  if (opt_location !== undefined) {
    queryParameters['$location'] = opt_location;
  }

  if (opt_propertylist !== undefined) {
    queryParameters['propertylist'] = opt_propertylist;
  }

  if (opt_disableSmartSync !== undefined) {
    queryParameters['disableSmartSync'] = opt_disableSmartSync;
  }

  /** @type {!Object} */
  var httpRequestParams = {
    method: 'POST',
    url: path,
    json: true,
            params: queryParameters,
    headers: headerParams
  };

  if (opt_extraHttpRequestParams) {
    httpRequestParams = angular.extend(httpRequestParams, opt_extraHttpRequestParams);
  }

  return (/** @type {?} */ (this.http_))(httpRequestParams);
}

/**
 * 
 * 
 * @param {!boolean=} opt_post 
 * @param {!boolean=} opt_apply 
 * @param {!boolean=} opt_delete 
 * @param {!string=} opt_action 
 * @param {!string=} opt_location 
 * @param {!Array<!string>=} opt_propertylist 
 * @param {!boolean=} opt_enableDataTriggeredContent 
 * @param {!angular.$http.Config=} opt_extraHttpRequestParams Extra HTTP parameters to send.
 * @return {!angular.$q.Promise<!API.Client.comAdobeCqScreensSegmentationImplSegmentationFeatureFlagInfo>}
 */
API.Client.ConfigmgrApi.prototype.comAdobeCqScreensSegmentationImplSegmentationFeatureFlag = function(opt_post, opt_apply, opt_delete, opt_action, opt_location, opt_propertylist, opt_enableDataTriggeredContent, opt_extraHttpRequestParams) {
  /** @const {string} */
  var path = this.basePath_ + '/system/console/configMgr/com.adobe.cq.screens.segmentation.impl.SegmentationFeatureFlag';

  /** @type {!Object} */
  var queryParameters = {};

  /** @type {!Object} */
  var headerParams = angular.extend({}, this.defaultHeaders_);
  if (opt_post !== undefined) {
    queryParameters['post'] = opt_post;
  }

  if (opt_apply !== undefined) {
    queryParameters['apply'] = opt_apply;
  }

  if (opt_delete !== undefined) {
    queryParameters['delete'] = opt_delete;
  }

  if (opt_action !== undefined) {
    queryParameters['action'] = opt_action;
  }

  if (opt_location !== undefined) {
    queryParameters['$location'] = opt_location;
  }

  if (opt_propertylist !== undefined) {
    queryParameters['propertylist'] = opt_propertylist;
  }

  if (opt_enableDataTriggeredContent !== undefined) {
    queryParameters['enableDataTriggeredContent'] = opt_enableDataTriggeredContent;
  }

  /** @type {!Object} */
  var httpRequestParams = {
    method: 'POST',
    url: path,
    json: true,
            params: queryParameters,
    headers: headerParams
  };

  if (opt_extraHttpRequestParams) {
    httpRequestParams = angular.extend(httpRequestParams, opt_extraHttpRequestParams);
  }

  return (/** @type {?} */ (this.http_))(httpRequestParams);
}

/**
 * 
 * 
 * @param {!boolean=} opt_post 
 * @param {!boolean=} opt_apply 
 * @param {!boolean=} opt_delete 
 * @param {!string=} opt_action 
 * @param {!string=} opt_location 
 * @param {!Array<!string>=} opt_propertylist 
 * @param {!Array<!string>=} opt_hcTags 
 * @param {!angular.$http.Config=} opt_extraHttpRequestParams Extra HTTP parameters to send.
 * @return {!angular.$q.Promise<!API.Client.comAdobeCqSecurityHcBundlesImplHtmlLibraryManagerConfigHealthChInfo>}
 */
API.Client.ConfigmgrApi.prototype.comAdobeCqSecurityHcBundlesImplHtmlLibraryManagerConfigHealthCh = function(opt_post, opt_apply, opt_delete, opt_action, opt_location, opt_propertylist, opt_hcTags, opt_extraHttpRequestParams) {
  /** @const {string} */
  var path = this.basePath_ + '/system/console/configMgr/com.adobe.cq.security.hc.bundles.impl.HtmlLibraryManagerConfigHealthCheck';

  /** @type {!Object} */
  var queryParameters = {};

  /** @type {!Object} */
  var headerParams = angular.extend({}, this.defaultHeaders_);
  if (opt_post !== undefined) {
    queryParameters['post'] = opt_post;
  }

  if (opt_apply !== undefined) {
    queryParameters['apply'] = opt_apply;
  }

  if (opt_delete !== undefined) {
    queryParameters['delete'] = opt_delete;
  }

  if (opt_action !== undefined) {
    queryParameters['action'] = opt_action;
  }

  if (opt_location !== undefined) {
    queryParameters['$location'] = opt_location;
  }

  if (opt_propertylist !== undefined) {
    queryParameters['propertylist'] = opt_propertylist;
  }

  if (opt_hcTags !== undefined) {
    queryParameters['hc.tags'] = opt_hcTags;
  }

  /** @type {!Object} */
  var httpRequestParams = {
    method: 'POST',
    url: path,
    json: true,
            params: queryParameters,
    headers: headerParams
  };

  if (opt_extraHttpRequestParams) {
    httpRequestParams = angular.extend(httpRequestParams, opt_extraHttpRequestParams);
  }

  return (/** @type {?} */ (this.http_))(httpRequestParams);
}

/**
 * 
 * 
 * @param {!boolean=} opt_post 
 * @param {!boolean=} opt_apply 
 * @param {!boolean=} opt_delete 
 * @param {!string=} opt_action 
 * @param {!string=} opt_location 
 * @param {!Array<!string>=} opt_propertylist 
 * @param {!Array<!string>=} opt_hcTags 
 * @param {!angular.$http.Config=} opt_extraHttpRequestParams Extra HTTP parameters to send.
 * @return {!angular.$q.Promise<!API.Client.comAdobeCqSecurityHcBundlesImplWcmFilterHealthCheckInfo>}
 */
API.Client.ConfigmgrApi.prototype.comAdobeCqSecurityHcBundlesImplWcmFilterHealthCheck = function(opt_post, opt_apply, opt_delete, opt_action, opt_location, opt_propertylist, opt_hcTags, opt_extraHttpRequestParams) {
  /** @const {string} */
  var path = this.basePath_ + '/system/console/configMgr/com.adobe.cq.security.hc.bundles.impl.WcmFilterHealthCheck';

  /** @type {!Object} */
  var queryParameters = {};

  /** @type {!Object} */
  var headerParams = angular.extend({}, this.defaultHeaders_);
  if (opt_post !== undefined) {
    queryParameters['post'] = opt_post;
  }

  if (opt_apply !== undefined) {
    queryParameters['apply'] = opt_apply;
  }

  if (opt_delete !== undefined) {
    queryParameters['delete'] = opt_delete;
  }

  if (opt_action !== undefined) {
    queryParameters['action'] = opt_action;
  }

  if (opt_location !== undefined) {
    queryParameters['$location'] = opt_location;
  }

  if (opt_propertylist !== undefined) {
    queryParameters['propertylist'] = opt_propertylist;
  }

  if (opt_hcTags !== undefined) {
    queryParameters['hc.tags'] = opt_hcTags;
  }

  /** @type {!Object} */
  var httpRequestParams = {
    method: 'POST',
    url: path,
    json: true,
            params: queryParameters,
    headers: headerParams
  };

  if (opt_extraHttpRequestParams) {
    httpRequestParams = angular.extend(httpRequestParams, opt_extraHttpRequestParams);
  }

  return (/** @type {?} */ (this.http_))(httpRequestParams);
}

/**
 * 
 * 
 * @param {!boolean=} opt_post 
 * @param {!boolean=} opt_apply 
 * @param {!boolean=} opt_delete 
 * @param {!string=} opt_action 
 * @param {!string=} opt_location 
 * @param {!Array<!string>=} opt_propertylist 
 * @param {!Array<!string>=} opt_hcTags 
 * @param {!string=} opt_dispatcherAddress 
 * @param {!Array<!string>=} opt_dispatcherFilterAllowed 
 * @param {!Array<!string>=} opt_dispatcherFilterBlocked 
 * @param {!angular.$http.Config=} opt_extraHttpRequestParams Extra HTTP parameters to send.
 * @return {!angular.$q.Promise<!API.Client.comAdobeCqSecurityHcDispatcherImplDispatcherAccessHealthCheckInfo>}
 */
API.Client.ConfigmgrApi.prototype.comAdobeCqSecurityHcDispatcherImplDispatcherAccessHealthCheck = function(opt_post, opt_apply, opt_delete, opt_action, opt_location, opt_propertylist, opt_hcTags, opt_dispatcherAddress, opt_dispatcherFilterAllowed, opt_dispatcherFilterBlocked, opt_extraHttpRequestParams) {
  /** @const {string} */
  var path = this.basePath_ + '/system/console/configMgr/com.adobe.cq.security.hc.dispatcher.impl.DispatcherAccessHealthCheck';

  /** @type {!Object} */
  var queryParameters = {};

  /** @type {!Object} */
  var headerParams = angular.extend({}, this.defaultHeaders_);
  if (opt_post !== undefined) {
    queryParameters['post'] = opt_post;
  }

  if (opt_apply !== undefined) {
    queryParameters['apply'] = opt_apply;
  }

  if (opt_delete !== undefined) {
    queryParameters['delete'] = opt_delete;
  }

  if (opt_action !== undefined) {
    queryParameters['action'] = opt_action;
  }

  if (opt_location !== undefined) {
    queryParameters['$location'] = opt_location;
  }

  if (opt_propertylist !== undefined) {
    queryParameters['propertylist'] = opt_propertylist;
  }

  if (opt_hcTags !== undefined) {
    queryParameters['hc.tags'] = opt_hcTags;
  }

  if (opt_dispatcherAddress !== undefined) {
    queryParameters['dispatcher.address'] = opt_dispatcherAddress;
  }

  if (opt_dispatcherFilterAllowed !== undefined) {
    queryParameters['dispatcher.filter.allowed'] = opt_dispatcherFilterAllowed;
  }

  if (opt_dispatcherFilterBlocked !== undefined) {
    queryParameters['dispatcher.filter.blocked'] = opt_dispatcherFilterBlocked;
  }

  /** @type {!Object} */
  var httpRequestParams = {
    method: 'POST',
    url: path,
    json: true,
            params: queryParameters,
    headers: headerParams
  };

  if (opt_extraHttpRequestParams) {
    httpRequestParams = angular.extend(httpRequestParams, opt_extraHttpRequestParams);
  }

  return (/** @type {?} */ (this.http_))(httpRequestParams);
}

/**
 * 
 * 
 * @param {!boolean=} opt_post 
 * @param {!boolean=} opt_apply 
 * @param {!boolean=} opt_delete 
 * @param {!string=} opt_action 
 * @param {!string=} opt_location 
 * @param {!Array<!string>=} opt_propertylist 
 * @param {!Array<!string>=} opt_hcTags 
 * @param {!angular.$http.Config=} opt_extraHttpRequestParams Extra HTTP parameters to send.
 * @return {!angular.$q.Promise<!API.Client.comAdobeCqSecurityHcPackagesImplExampleContentHealthCheckInfo>}
 */
API.Client.ConfigmgrApi.prototype.comAdobeCqSecurityHcPackagesImplExampleContentHealthCheck = function(opt_post, opt_apply, opt_delete, opt_action, opt_location, opt_propertylist, opt_hcTags, opt_extraHttpRequestParams) {
  /** @const {string} */
  var path = this.basePath_ + '/system/console/configMgr/com.adobe.cq.security.hc.packages.impl.ExampleContentHealthCheck';

  /** @type {!Object} */
  var queryParameters = {};

  /** @type {!Object} */
  var headerParams = angular.extend({}, this.defaultHeaders_);
  if (opt_post !== undefined) {
    queryParameters['post'] = opt_post;
  }

  if (opt_apply !== undefined) {
    queryParameters['apply'] = opt_apply;
  }

  if (opt_delete !== undefined) {
    queryParameters['delete'] = opt_delete;
  }

  if (opt_action !== undefined) {
    queryParameters['action'] = opt_action;
  }

  if (opt_location !== undefined) {
    queryParameters['$location'] = opt_location;
  }

  if (opt_propertylist !== undefined) {
    queryParameters['propertylist'] = opt_propertylist;
  }

  if (opt_hcTags !== undefined) {
    queryParameters['hc.tags'] = opt_hcTags;
  }

  /** @type {!Object} */
  var httpRequestParams = {
    method: 'POST',
    url: path,
    json: true,
            params: queryParameters,
    headers: headerParams
  };

  if (opt_extraHttpRequestParams) {
    httpRequestParams = angular.extend(httpRequestParams, opt_extraHttpRequestParams);
  }

  return (/** @type {?} */ (this.http_))(httpRequestParams);
}

/**
 * 
 * 
 * @param {!boolean=} opt_post 
 * @param {!boolean=} opt_apply 
 * @param {!boolean=} opt_delete 
 * @param {!string=} opt_action 
 * @param {!string=} opt_location 
 * @param {!Array<!string>=} opt_propertylist 
 * @param {!Array<!string>=} opt_hcTags 
 * @param {!string=} opt_webserverAddress 
 * @param {!angular.$http.Config=} opt_extraHttpRequestParams Extra HTTP parameters to send.
 * @return {!angular.$q.Promise<!API.Client.comAdobeCqSecurityHcWebserverImplClickjackingHealthCheckInfo>}
 */
API.Client.ConfigmgrApi.prototype.comAdobeCqSecurityHcWebserverImplClickjackingHealthCheck = function(opt_post, opt_apply, opt_delete, opt_action, opt_location, opt_propertylist, opt_hcTags, opt_webserverAddress, opt_extraHttpRequestParams) {
  /** @const {string} */
  var path = this.basePath_ + '/system/console/configMgr/com.adobe.cq.security.hc.webserver.impl.ClickjackingHealthCheck';

  /** @type {!Object} */
  var queryParameters = {};

  /** @type {!Object} */
  var headerParams = angular.extend({}, this.defaultHeaders_);
  if (opt_post !== undefined) {
    queryParameters['post'] = opt_post;
  }

  if (opt_apply !== undefined) {
    queryParameters['apply'] = opt_apply;
  }

  if (opt_delete !== undefined) {
    queryParameters['delete'] = opt_delete;
  }

  if (opt_action !== undefined) {
    queryParameters['action'] = opt_action;
  }

  if (opt_location !== undefined) {
    queryParameters['$location'] = opt_location;
  }

  if (opt_propertylist !== undefined) {
    queryParameters['propertylist'] = opt_propertylist;
  }

  if (opt_hcTags !== undefined) {
    queryParameters['hc.tags'] = opt_hcTags;
  }

  if (opt_webserverAddress !== undefined) {
    queryParameters['webserver.address'] = opt_webserverAddress;
  }

  /** @type {!Object} */
  var httpRequestParams = {
    method: 'POST',
    url: path,
    json: true,
            params: queryParameters,
    headers: headerParams
  };

  if (opt_extraHttpRequestParams) {
    httpRequestParams = angular.extend(httpRequestParams, opt_extraHttpRequestParams);
  }

  return (/** @type {?} */ (this.http_))(httpRequestParams);
}

/**
 * 
 * 
 * @param {!boolean=} opt_post 
 * @param {!boolean=} opt_apply 
 * @param {!boolean=} opt_delete 
 * @param {!string=} opt_action 
 * @param {!string=} opt_location 
 * @param {!Array<!string>=} opt_propertylist 
 * @param {!boolean=} opt_enable 
 * @param {!number=} opt_ttl1 
 * @param {!number=} opt_ttl2 
 * @param {!angular.$http.Config=} opt_extraHttpRequestParams Extra HTTP parameters to send.
 * @return {!angular.$q.Promise<!API.Client.comAdobeCqSocialAccountverificationImplAccountManagementConfigImInfo>}
 */
API.Client.ConfigmgrApi.prototype.comAdobeCqSocialAccountverificationImplAccountManagementConfigIm = function(opt_post, opt_apply, opt_delete, opt_action, opt_location, opt_propertylist, opt_enable, opt_ttl1, opt_ttl2, opt_extraHttpRequestParams) {
  /** @const {string} */
  var path = this.basePath_ + '/system/console/configMgr/com.adobe.cq.social.accountverification.impl.AccountManagementConfigImpl';

  /** @type {!Object} */
  var queryParameters = {};

  /** @type {!Object} */
  var headerParams = angular.extend({}, this.defaultHeaders_);
  if (opt_post !== undefined) {
    queryParameters['post'] = opt_post;
  }

  if (opt_apply !== undefined) {
    queryParameters['apply'] = opt_apply;
  }

  if (opt_delete !== undefined) {
    queryParameters['delete'] = opt_delete;
  }

  if (opt_action !== undefined) {
    queryParameters['action'] = opt_action;
  }

  if (opt_location !== undefined) {
    queryParameters['$location'] = opt_location;
  }

  if (opt_propertylist !== undefined) {
    queryParameters['propertylist'] = opt_propertylist;
  }

  if (opt_enable !== undefined) {
    queryParameters['enable'] = opt_enable;
  }

  if (opt_ttl1 !== undefined) {
    queryParameters['ttl1'] = opt_ttl1;
  }

  if (opt_ttl2 !== undefined) {
    queryParameters['ttl2'] = opt_ttl2;
  }

  /** @type {!Object} */
  var httpRequestParams = {
    method: 'POST',
    url: path,
    json: true,
            params: queryParameters,
    headers: headerParams
  };

  if (opt_extraHttpRequestParams) {
    httpRequestParams = angular.extend(httpRequestParams, opt_extraHttpRequestParams);
  }

  return (/** @type {?} */ (this.http_))(httpRequestParams);
}

/**
 * 
 * 
 * @param {!boolean=} opt_post 
 * @param {!boolean=} opt_apply 
 * @param {!boolean=} opt_delete 
 * @param {!string=} opt_action 
 * @param {!string=} opt_location 
 * @param {!Array<!string>=} opt_propertylist 
 * @param {!number=} opt_priority 
 * @param {!angular.$http.Config=} opt_extraHttpRequestParams Extra HTTP parameters to send.
 * @return {!angular.$q.Promise<!API.Client.comAdobeCqSocialActivitystreamsClientImplSocialActivityComponenInfo>}
 */
API.Client.ConfigmgrApi.prototype.comAdobeCqSocialActivitystreamsClientImplSocialActivityComponen = function(opt_post, opt_apply, opt_delete, opt_action, opt_location, opt_propertylist, opt_priority, opt_extraHttpRequestParams) {
  /** @const {string} */
  var path = this.basePath_ + '/system/console/configMgr/com.adobe.cq.social.activitystreams.client.impl.SocialActivityComponentFactoryImpl';

  /** @type {!Object} */
  var queryParameters = {};

  /** @type {!Object} */
  var headerParams = angular.extend({}, this.defaultHeaders_);
  if (opt_post !== undefined) {
    queryParameters['post'] = opt_post;
  }

  if (opt_apply !== undefined) {
    queryParameters['apply'] = opt_apply;
  }

  if (opt_delete !== undefined) {
    queryParameters['delete'] = opt_delete;
  }

  if (opt_action !== undefined) {
    queryParameters['action'] = opt_action;
  }

  if (opt_location !== undefined) {
    queryParameters['$location'] = opt_location;
  }

  if (opt_propertylist !== undefined) {
    queryParameters['propertylist'] = opt_propertylist;
  }

  if (opt_priority !== undefined) {
    queryParameters['priority'] = opt_priority;
  }

  /** @type {!Object} */
  var httpRequestParams = {
    method: 'POST',
    url: path,
    json: true,
            params: queryParameters,
    headers: headerParams
  };

  if (opt_extraHttpRequestParams) {
    httpRequestParams = angular.extend(httpRequestParams, opt_extraHttpRequestParams);
  }

  return (/** @type {?} */ (this.http_))(httpRequestParams);
}

/**
 * 
 * 
 * @param {!boolean=} opt_post 
 * @param {!boolean=} opt_apply 
 * @param {!boolean=} opt_delete 
 * @param {!string=} opt_action 
 * @param {!string=} opt_location 
 * @param {!Array<!string>=} opt_propertylist 
 * @param {!number=} opt_priority 
 * @param {!angular.$http.Config=} opt_extraHttpRequestParams Extra HTTP parameters to send.
 * @return {!angular.$q.Promise<!API.Client.comAdobeCqSocialActivitystreamsClientImplSocialActivityStreamCoInfo>}
 */
API.Client.ConfigmgrApi.prototype.comAdobeCqSocialActivitystreamsClientImplSocialActivityStreamCo = function(opt_post, opt_apply, opt_delete, opt_action, opt_location, opt_propertylist, opt_priority, opt_extraHttpRequestParams) {
  /** @const {string} */
  var path = this.basePath_ + '/system/console/configMgr/com.adobe.cq.social.activitystreams.client.impl.SocialActivityStreamComponentFactory';

  /** @type {!Object} */
  var queryParameters = {};

  /** @type {!Object} */
  var headerParams = angular.extend({}, this.defaultHeaders_);
  if (opt_post !== undefined) {
    queryParameters['post'] = opt_post;
  }

  if (opt_apply !== undefined) {
    queryParameters['apply'] = opt_apply;
  }

  if (opt_delete !== undefined) {
    queryParameters['delete'] = opt_delete;
  }

  if (opt_action !== undefined) {
    queryParameters['action'] = opt_action;
  }

  if (opt_location !== undefined) {
    queryParameters['$location'] = opt_location;
  }

  if (opt_propertylist !== undefined) {
    queryParameters['propertylist'] = opt_propertylist;
  }

  if (opt_priority !== undefined) {
    queryParameters['priority'] = opt_priority;
  }

  /** @type {!Object} */
  var httpRequestParams = {
    method: 'POST',
    url: path,
    json: true,
            params: queryParameters,
    headers: headerParams
  };

  if (opt_extraHttpRequestParams) {
    httpRequestParams = angular.extend(httpRequestParams, opt_extraHttpRequestParams);
  }

  return (/** @type {?} */ (this.http_))(httpRequestParams);
}

/**
 * 
 * 
 * @param {!boolean=} opt_post 
 * @param {!boolean=} opt_apply 
 * @param {!boolean=} opt_delete 
 * @param {!string=} opt_action 
 * @param {!string=} opt_location 
 * @param {!Array<!string>=} opt_propertylist 
 * @param {!string=} opt_eventTopics 
 * @param {!string=} opt_eventFilter 
 * @param {!angular.$http.Config=} opt_extraHttpRequestParams Extra HTTP parameters to send.
 * @return {!angular.$q.Promise<!API.Client.comAdobeCqSocialActivitystreamsListenerImplEventListenerHandlerInfo>}
 */
API.Client.ConfigmgrApi.prototype.comAdobeCqSocialActivitystreamsListenerImplEventListenerHandler = function(opt_post, opt_apply, opt_delete, opt_action, opt_location, opt_propertylist, opt_eventTopics, opt_eventFilter, opt_extraHttpRequestParams) {
  /** @const {string} */
  var path = this.basePath_ + '/system/console/configMgr/com.adobe.cq.social.activitystreams.listener.impl.EventListenerHandler';

  /** @type {!Object} */
  var queryParameters = {};

  /** @type {!Object} */
  var headerParams = angular.extend({}, this.defaultHeaders_);
  if (opt_post !== undefined) {
    queryParameters['post'] = opt_post;
  }

  if (opt_apply !== undefined) {
    queryParameters['apply'] = opt_apply;
  }

  if (opt_delete !== undefined) {
    queryParameters['delete'] = opt_delete;
  }

  if (opt_action !== undefined) {
    queryParameters['action'] = opt_action;
  }

  if (opt_location !== undefined) {
    queryParameters['$location'] = opt_location;
  }

  if (opt_propertylist !== undefined) {
    queryParameters['propertylist'] = opt_propertylist;
  }

  if (opt_eventTopics !== undefined) {
    queryParameters['event.topics'] = opt_eventTopics;
  }

  if (opt_eventFilter !== undefined) {
    queryParameters['event.filter'] = opt_eventFilter;
  }

  /** @type {!Object} */
  var httpRequestParams = {
    method: 'POST',
    url: path,
    json: true,
            params: queryParameters,
    headers: headerParams
  };

  if (opt_extraHttpRequestParams) {
    httpRequestParams = angular.extend(httpRequestParams, opt_extraHttpRequestParams);
  }

  return (/** @type {?} */ (this.http_))(httpRequestParams);
}

/**
 * 
 * 
 * @param {!boolean=} opt_post 
 * @param {!boolean=} opt_apply 
 * @param {!boolean=} opt_delete 
 * @param {!string=} opt_action 
 * @param {!string=} opt_location 
 * @param {!Array<!string>=} opt_propertylist 
 * @param {!boolean=} opt_accepted 
 * @param {!number=} opt_ranked 
 * @param {!angular.$http.Config=} opt_extraHttpRequestParams Extra HTTP parameters to send.
 * @return {!angular.$q.Promise<!API.Client.comAdobeCqSocialActivitystreamsListenerImplModerationEventExtenInfo>}
 */
API.Client.ConfigmgrApi.prototype.comAdobeCqSocialActivitystreamsListenerImplModerationEventExten = function(opt_post, opt_apply, opt_delete, opt_action, opt_location, opt_propertylist, opt_accepted, opt_ranked, opt_extraHttpRequestParams) {
  /** @const {string} */
  var path = this.basePath_ + '/system/console/configMgr/com.adobe.cq.social.activitystreams.listener.impl.ModerationEventExtension';

  /** @type {!Object} */
  var queryParameters = {};

  /** @type {!Object} */
  var headerParams = angular.extend({}, this.defaultHeaders_);
  if (opt_post !== undefined) {
    queryParameters['post'] = opt_post;
  }

  if (opt_apply !== undefined) {
    queryParameters['apply'] = opt_apply;
  }

  if (opt_delete !== undefined) {
    queryParameters['delete'] = opt_delete;
  }

  if (opt_action !== undefined) {
    queryParameters['action'] = opt_action;
  }

  if (opt_location !== undefined) {
    queryParameters['$location'] = opt_location;
  }

  if (opt_propertylist !== undefined) {
    queryParameters['propertylist'] = opt_propertylist;
  }

  if (opt_accepted !== undefined) {
    queryParameters['accepted'] = opt_accepted;
  }

  if (opt_ranked !== undefined) {
    queryParameters['ranked'] = opt_ranked;
  }

  /** @type {!Object} */
  var httpRequestParams = {
    method: 'POST',
    url: path,
    json: true,
            params: queryParameters,
    headers: headerParams
  };

  if (opt_extraHttpRequestParams) {
    httpRequestParams = angular.extend(httpRequestParams, opt_extraHttpRequestParams);
  }

  return (/** @type {?} */ (this.http_))(httpRequestParams);
}

/**
 * 
 * 
 * @param {!boolean=} opt_post 
 * @param {!boolean=} opt_apply 
 * @param {!boolean=} opt_delete 
 * @param {!string=} opt_action 
 * @param {!string=} opt_location 
 * @param {!Array<!string>=} opt_propertylist 
 * @param {!number=} opt_ranking 
 * @param {!boolean=} opt_enable 
 * @param {!angular.$http.Config=} opt_extraHttpRequestParams Extra HTTP parameters to send.
 * @return {!angular.$q.Promise<!API.Client.comAdobeCqSocialActivitystreamsListenerImplRatingEventActivitySInfo>}
 */
API.Client.ConfigmgrApi.prototype.comAdobeCqSocialActivitystreamsListenerImplRatingEventActivityS = function(opt_post, opt_apply, opt_delete, opt_action, opt_location, opt_propertylist, opt_ranking, opt_enable, opt_extraHttpRequestParams) {
  /** @const {string} */
  var path = this.basePath_ + '/system/console/configMgr/com.adobe.cq.social.activitystreams.listener.impl.RatingEventActivitySuppressor';

  /** @type {!Object} */
  var queryParameters = {};

  /** @type {!Object} */
  var headerParams = angular.extend({}, this.defaultHeaders_);
  if (opt_post !== undefined) {
    queryParameters['post'] = opt_post;
  }

  if (opt_apply !== undefined) {
    queryParameters['apply'] = opt_apply;
  }

  if (opt_delete !== undefined) {
    queryParameters['delete'] = opt_delete;
  }

  if (opt_action !== undefined) {
    queryParameters['action'] = opt_action;
  }

  if (opt_location !== undefined) {
    queryParameters['$location'] = opt_location;
  }

  if (opt_propertylist !== undefined) {
    queryParameters['propertylist'] = opt_propertylist;
  }

  if (opt_ranking !== undefined) {
    queryParameters['ranking'] = opt_ranking;
  }

  if (opt_enable !== undefined) {
    queryParameters['enable'] = opt_enable;
  }

  /** @type {!Object} */
  var httpRequestParams = {
    method: 'POST',
    url: path,
    json: true,
            params: queryParameters,
    headers: headerParams
  };

  if (opt_extraHttpRequestParams) {
    httpRequestParams = angular.extend(httpRequestParams, opt_extraHttpRequestParams);
  }

  return (/** @type {?} */ (this.http_))(httpRequestParams);
}

/**
 * 
 * 
 * @param {!boolean=} opt_post 
 * @param {!boolean=} opt_apply 
 * @param {!boolean=} opt_delete 
 * @param {!string=} opt_action 
 * @param {!string=} opt_location 
 * @param {!Array<!string>=} opt_propertylist 
 * @param {!string=} opt_streamPath 
 * @param {!string=} opt_streamName 
 * @param {!angular.$http.Config=} opt_extraHttpRequestParams Extra HTTP parameters to send.
 * @return {!angular.$q.Promise<!API.Client.comAdobeCqSocialActivitystreamsListenerImplResourceActivityStreInfo>}
 */
API.Client.ConfigmgrApi.prototype.comAdobeCqSocialActivitystreamsListenerImplResourceActivityStre = function(opt_post, opt_apply, opt_delete, opt_action, opt_location, opt_propertylist, opt_streamPath, opt_streamName, opt_extraHttpRequestParams) {
  /** @const {string} */
  var path = this.basePath_ + '/system/console/configMgr/com.adobe.cq.social.activitystreams.listener.impl.ResourceActivityStreamProviderFactory';

  /** @type {!Object} */
  var queryParameters = {};

  /** @type {!Object} */
  var headerParams = angular.extend({}, this.defaultHeaders_);
  if (opt_post !== undefined) {
    queryParameters['post'] = opt_post;
  }

  if (opt_apply !== undefined) {
    queryParameters['apply'] = opt_apply;
  }

  if (opt_delete !== undefined) {
    queryParameters['delete'] = opt_delete;
  }

  if (opt_action !== undefined) {
    queryParameters['action'] = opt_action;
  }

  if (opt_location !== undefined) {
    queryParameters['$location'] = opt_location;
  }

  if (opt_propertylist !== undefined) {
    queryParameters['propertylist'] = opt_propertylist;
  }

  if (opt_streamPath !== undefined) {
    queryParameters['streamPath'] = opt_streamPath;
  }

  if (opt_streamName !== undefined) {
    queryParameters['streamName'] = opt_streamName;
  }

  /** @type {!Object} */
  var httpRequestParams = {
    method: 'POST',
    url: path,
    json: true,
            params: queryParameters,
    headers: headerParams
  };

  if (opt_extraHttpRequestParams) {
    httpRequestParams = angular.extend(httpRequestParams, opt_extraHttpRequestParams);
  }

  return (/** @type {?} */ (this.http_))(httpRequestParams);
}

/**
 * 
 * 
 * @param {!boolean=} opt_post 
 * @param {!boolean=} opt_apply 
 * @param {!boolean=} opt_delete 
 * @param {!string=} opt_action 
 * @param {!string=} opt_location 
 * @param {!Array<!string>=} opt_propertylist 
 * @param {!number=} opt_maxRetry 
 * @param {!Array<!string>=} opt_fieldWhitelist 
 * @param {!Array<!string>=} opt_attachmentTypeBlacklist 
 * @param {!angular.$http.Config=} opt_extraHttpRequestParams Extra HTTP parameters to send.
 * @return {!angular.$q.Promise<!API.Client.comAdobeCqSocialCalendarClientEndpointsImplCalendarOperationsIInfo>}
 */
API.Client.ConfigmgrApi.prototype.comAdobeCqSocialCalendarClientEndpointsImplCalendarOperationsI = function(opt_post, opt_apply, opt_delete, opt_action, opt_location, opt_propertylist, opt_maxRetry, opt_fieldWhitelist, opt_attachmentTypeBlacklist, opt_extraHttpRequestParams) {
  /** @const {string} */
  var path = this.basePath_ + '/system/console/configMgr/com.adobe.cq.social.calendar.client.endpoints.impl.CalendarOperationsImpl';

  /** @type {!Object} */
  var queryParameters = {};

  /** @type {!Object} */
  var headerParams = angular.extend({}, this.defaultHeaders_);
  if (opt_post !== undefined) {
    queryParameters['post'] = opt_post;
  }

  if (opt_apply !== undefined) {
    queryParameters['apply'] = opt_apply;
  }

  if (opt_delete !== undefined) {
    queryParameters['delete'] = opt_delete;
  }

  if (opt_action !== undefined) {
    queryParameters['action'] = opt_action;
  }

  if (opt_location !== undefined) {
    queryParameters['$location'] = opt_location;
  }

  if (opt_propertylist !== undefined) {
    queryParameters['propertylist'] = opt_propertylist;
  }

  if (opt_maxRetry !== undefined) {
    queryParameters['MaxRetry'] = opt_maxRetry;
  }

  if (opt_fieldWhitelist !== undefined) {
    queryParameters['fieldWhitelist'] = opt_fieldWhitelist;
  }

  if (opt_attachmentTypeBlacklist !== undefined) {
    queryParameters['attachmentTypeBlacklist'] = opt_attachmentTypeBlacklist;
  }

  /** @type {!Object} */
  var httpRequestParams = {
    method: 'POST',
    url: path,
    json: true,
            params: queryParameters,
    headers: headerParams
  };

  if (opt_extraHttpRequestParams) {
    httpRequestParams = angular.extend(httpRequestParams, opt_extraHttpRequestParams);
  }

  return (/** @type {?} */ (this.http_))(httpRequestParams);
}

/**
 * 
 * 
 * @param {!boolean=} opt_post 
 * @param {!boolean=} opt_apply 
 * @param {!boolean=} opt_delete 
 * @param {!string=} opt_action 
 * @param {!string=} opt_location 
 * @param {!Array<!string>=} opt_propertylist 
 * @param {!string=} opt_attachmentTypeBlacklist 
 * @param {!number=} opt_extensionOrder 
 * @param {!angular.$http.Config=} opt_extraHttpRequestParams Extra HTTP parameters to send.
 * @return {!angular.$q.Promise<!API.Client.comAdobeCqSocialCalendarClientOperationextensionsEventAttachmenInfo>}
 */
API.Client.ConfigmgrApi.prototype.comAdobeCqSocialCalendarClientOperationextensionsEventAttachmen = function(opt_post, opt_apply, opt_delete, opt_action, opt_location, opt_propertylist, opt_attachmentTypeBlacklist, opt_extensionOrder, opt_extraHttpRequestParams) {
  /** @const {string} */
  var path = this.basePath_ + '/system/console/configMgr/com.adobe.cq.social.calendar.client.operationextensions.EventAttachment';

  /** @type {!Object} */
  var queryParameters = {};

  /** @type {!Object} */
  var headerParams = angular.extend({}, this.defaultHeaders_);
  if (opt_post !== undefined) {
    queryParameters['post'] = opt_post;
  }

  if (opt_apply !== undefined) {
    queryParameters['apply'] = opt_apply;
  }

  if (opt_delete !== undefined) {
    queryParameters['delete'] = opt_delete;
  }

  if (opt_action !== undefined) {
    queryParameters['action'] = opt_action;
  }

  if (opt_location !== undefined) {
    queryParameters['$location'] = opt_location;
  }

  if (opt_propertylist !== undefined) {
    queryParameters['propertylist'] = opt_propertylist;
  }

  if (opt_attachmentTypeBlacklist !== undefined) {
    queryParameters['attachmentTypeBlacklist'] = opt_attachmentTypeBlacklist;
  }

  if (opt_extensionOrder !== undefined) {
    queryParameters['extension.order'] = opt_extensionOrder;
  }

  /** @type {!Object} */
  var httpRequestParams = {
    method: 'POST',
    url: path,
    json: true,
            params: queryParameters,
    headers: headerParams
  };

  if (opt_extraHttpRequestParams) {
    httpRequestParams = angular.extend(httpRequestParams, opt_extraHttpRequestParams);
  }

  return (/** @type {?} */ (this.http_))(httpRequestParams);
}

/**
 * 
 * 
 * @param {!boolean=} opt_post 
 * @param {!boolean=} opt_apply 
 * @param {!boolean=} opt_delete 
 * @param {!string=} opt_action 
 * @param {!string=} opt_location 
 * @param {!Array<!string>=} opt_propertylist 
 * @param {!number=} opt_timezonesExpirytime 
 * @param {!angular.$http.Config=} opt_extraHttpRequestParams Extra HTTP parameters to send.
 * @return {!angular.$q.Promise<!API.Client.comAdobeCqSocialCalendarServletsTimeZoneServletInfo>}
 */
API.Client.ConfigmgrApi.prototype.comAdobeCqSocialCalendarServletsTimeZoneServlet = function(opt_post, opt_apply, opt_delete, opt_action, opt_location, opt_propertylist, opt_timezonesExpirytime, opt_extraHttpRequestParams) {
  /** @const {string} */
  var path = this.basePath_ + '/system/console/configMgr/com.adobe.cq.social.calendar.servlets.TimeZoneServlet';

  /** @type {!Object} */
  var queryParameters = {};

  /** @type {!Object} */
  var headerParams = angular.extend({}, this.defaultHeaders_);
  if (opt_post !== undefined) {
    queryParameters['post'] = opt_post;
  }

  if (opt_apply !== undefined) {
    queryParameters['apply'] = opt_apply;
  }

  if (opt_delete !== undefined) {
    queryParameters['delete'] = opt_delete;
  }

  if (opt_action !== undefined) {
    queryParameters['action'] = opt_action;
  }

  if (opt_location !== undefined) {
    queryParameters['$location'] = opt_location;
  }

  if (opt_propertylist !== undefined) {
    queryParameters['propertylist'] = opt_propertylist;
  }

  if (opt_timezonesExpirytime !== undefined) {
    queryParameters['timezones.expirytime'] = opt_timezonesExpirytime;
  }

  /** @type {!Object} */
  var httpRequestParams = {
    method: 'POST',
    url: path,
    json: true,
            params: queryParameters,
    headers: headerParams
  };

  if (opt_extraHttpRequestParams) {
    httpRequestParams = angular.extend(httpRequestParams, opt_extraHttpRequestParams);
  }

  return (/** @type {?} */ (this.http_))(httpRequestParams);
}

/**
 * 
 * 
 * @param {!boolean=} opt_post 
 * @param {!boolean=} opt_apply 
 * @param {!boolean=} opt_delete 
 * @param {!string=} opt_action 
 * @param {!string=} opt_location 
 * @param {!Array<!string>=} opt_propertylist 
 * @param {!number=} opt_ranking 
 * @param {!angular.$http.Config=} opt_extraHttpRequestParams Extra HTTP parameters to send.
 * @return {!angular.$q.Promise<!API.Client.comAdobeCqSocialCommonsCommentsEndpointsImplCommentDeleteEventInfo>}
 */
API.Client.ConfigmgrApi.prototype.comAdobeCqSocialCommonsCommentsEndpointsImplCommentDeleteEvent = function(opt_post, opt_apply, opt_delete, opt_action, opt_location, opt_propertylist, opt_ranking, opt_extraHttpRequestParams) {
  /** @const {string} */
  var path = this.basePath_ + '/system/console/configMgr/com.adobe.cq.social.commons.comments.endpoints.impl.CommentDeleteEventActivitySuppressor';

  /** @type {!Object} */
  var queryParameters = {};

  /** @type {!Object} */
  var headerParams = angular.extend({}, this.defaultHeaders_);
  if (opt_post !== undefined) {
    queryParameters['post'] = opt_post;
  }

  if (opt_apply !== undefined) {
    queryParameters['apply'] = opt_apply;
  }

  if (opt_delete !== undefined) {
    queryParameters['delete'] = opt_delete;
  }

  if (opt_action !== undefined) {
    queryParameters['action'] = opt_action;
  }

  if (opt_location !== undefined) {
    queryParameters['$location'] = opt_location;
  }

  if (opt_propertylist !== undefined) {
    queryParameters['propertylist'] = opt_propertylist;
  }

  if (opt_ranking !== undefined) {
    queryParameters['ranking'] = opt_ranking;
  }

  /** @type {!Object} */
  var httpRequestParams = {
    method: 'POST',
    url: path,
    json: true,
            params: queryParameters,
    headers: headerParams
  };

  if (opt_extraHttpRequestParams) {
    httpRequestParams = angular.extend(httpRequestParams, opt_extraHttpRequestParams);
  }

  return (/** @type {?} */ (this.http_))(httpRequestParams);
}

/**
 * 
 * 
 * @param {!boolean=} opt_post 
 * @param {!boolean=} opt_apply 
 * @param {!boolean=} opt_delete 
 * @param {!string=} opt_action 
 * @param {!string=} opt_location 
 * @param {!Array<!string>=} opt_propertylist 
 * @param {!Array<!string>=} opt_fieldWhitelist 
 * @param {!Array<!string>=} opt_attachmentTypeBlacklist 
 * @param {!angular.$http.Config=} opt_extraHttpRequestParams Extra HTTP parameters to send.
 * @return {!angular.$q.Promise<!API.Client.comAdobeCqSocialCommonsCommentsEndpointsImplCommentOperationSeInfo>}
 */
API.Client.ConfigmgrApi.prototype.comAdobeCqSocialCommonsCommentsEndpointsImplCommentOperationSe = function(opt_post, opt_apply, opt_delete, opt_action, opt_location, opt_propertylist, opt_fieldWhitelist, opt_attachmentTypeBlacklist, opt_extraHttpRequestParams) {
  /** @const {string} */
  var path = this.basePath_ + '/system/console/configMgr/com.adobe.cq.social.commons.comments.endpoints.impl.CommentOperationService';

  /** @type {!Object} */
  var queryParameters = {};

  /** @type {!Object} */
  var headerParams = angular.extend({}, this.defaultHeaders_);
  if (opt_post !== undefined) {
    queryParameters['post'] = opt_post;
  }

  if (opt_apply !== undefined) {
    queryParameters['apply'] = opt_apply;
  }

  if (opt_delete !== undefined) {
    queryParameters['delete'] = opt_delete;
  }

  if (opt_action !== undefined) {
    queryParameters['action'] = opt_action;
  }

  if (opt_location !== undefined) {
    queryParameters['$location'] = opt_location;
  }

  if (opt_propertylist !== undefined) {
    queryParameters['propertylist'] = opt_propertylist;
  }

  if (opt_fieldWhitelist !== undefined) {
    queryParameters['fieldWhitelist'] = opt_fieldWhitelist;
  }

  if (opt_attachmentTypeBlacklist !== undefined) {
    queryParameters['attachmentTypeBlacklist'] = opt_attachmentTypeBlacklist;
  }

  /** @type {!Object} */
  var httpRequestParams = {
    method: 'POST',
    url: path,
    json: true,
            params: queryParameters,
    headers: headerParams
  };

  if (opt_extraHttpRequestParams) {
    httpRequestParams = angular.extend(httpRequestParams, opt_extraHttpRequestParams);
  }

  return (/** @type {?} */ (this.http_))(httpRequestParams);
}

/**
 * 
 * 
 * @param {!boolean=} opt_post 
 * @param {!boolean=} opt_apply 
 * @param {!boolean=} opt_delete 
 * @param {!string=} opt_action 
 * @param {!string=} opt_location 
 * @param {!Array<!string>=} opt_propertylist 
 * @param {!Array<!string>=} opt_fieldWhitelist 
 * @param {!Array<!string>=} opt_attachmentTypeBlacklist 
 * @param {!angular.$http.Config=} opt_extraHttpRequestParams Extra HTTP parameters to send.
 * @return {!angular.$q.Promise<!API.Client.comAdobeCqSocialCommonsCommentsEndpointsImplTranslationOperatiInfo>}
 */
API.Client.ConfigmgrApi.prototype.comAdobeCqSocialCommonsCommentsEndpointsImplTranslationOperati = function(opt_post, opt_apply, opt_delete, opt_action, opt_location, opt_propertylist, opt_fieldWhitelist, opt_attachmentTypeBlacklist, opt_extraHttpRequestParams) {
  /** @const {string} */
  var path = this.basePath_ + '/system/console/configMgr/com.adobe.cq.social.commons.comments.endpoints.impl.TranslationOperationService';

  /** @type {!Object} */
  var queryParameters = {};

  /** @type {!Object} */
  var headerParams = angular.extend({}, this.defaultHeaders_);
  if (opt_post !== undefined) {
    queryParameters['post'] = opt_post;
  }

  if (opt_apply !== undefined) {
    queryParameters['apply'] = opt_apply;
  }

  if (opt_delete !== undefined) {
    queryParameters['delete'] = opt_delete;
  }

  if (opt_action !== undefined) {
    queryParameters['action'] = opt_action;
  }

  if (opt_location !== undefined) {
    queryParameters['$location'] = opt_location;
  }

  if (opt_propertylist !== undefined) {
    queryParameters['propertylist'] = opt_propertylist;
  }

  if (opt_fieldWhitelist !== undefined) {
    queryParameters['fieldWhitelist'] = opt_fieldWhitelist;
  }

  if (opt_attachmentTypeBlacklist !== undefined) {
    queryParameters['attachmentTypeBlacklist'] = opt_attachmentTypeBlacklist;
  }

  /** @type {!Object} */
  var httpRequestParams = {
    method: 'POST',
    url: path,
    json: true,
            params: queryParameters,
    headers: headerParams
  };

  if (opt_extraHttpRequestParams) {
    httpRequestParams = angular.extend(httpRequestParams, opt_extraHttpRequestParams);
  }

  return (/** @type {?} */ (this.http_))(httpRequestParams);
}

/**
 * 
 * 
 * @param {!boolean=} opt_post 
 * @param {!boolean=} opt_apply 
 * @param {!boolean=} opt_delete 
 * @param {!string=} opt_action 
 * @param {!string=} opt_location 
 * @param {!Array<!string>=} opt_propertylist 
 * @param {!number=} opt_numUserLimit 
 * @param {!angular.$http.Config=} opt_extraHttpRequestParams Extra HTTP parameters to send.
 * @return {!angular.$q.Promise<!API.Client.comAdobeCqSocialCommonsCommentsListingImplSearchCommentSocialCInfo>}
 */
API.Client.ConfigmgrApi.prototype.comAdobeCqSocialCommonsCommentsListingImplSearchCommentSocialC = function(opt_post, opt_apply, opt_delete, opt_action, opt_location, opt_propertylist, opt_numUserLimit, opt_extraHttpRequestParams) {
  /** @const {string} */
  var path = this.basePath_ + '/system/console/configMgr/com.adobe.cq.social.commons.comments.listing.impl.SearchCommentSocialComponentListProvider';

  /** @type {!Object} */
  var queryParameters = {};

  /** @type {!Object} */
  var headerParams = angular.extend({}, this.defaultHeaders_);
  if (opt_post !== undefined) {
    queryParameters['post'] = opt_post;
  }

  if (opt_apply !== undefined) {
    queryParameters['apply'] = opt_apply;
  }

  if (opt_delete !== undefined) {
    queryParameters['delete'] = opt_delete;
  }

  if (opt_action !== undefined) {
    queryParameters['action'] = opt_action;
  }

  if (opt_location !== undefined) {
    queryParameters['$location'] = opt_location;
  }

  if (opt_propertylist !== undefined) {
    queryParameters['propertylist'] = opt_propertylist;
  }

  if (opt_numUserLimit !== undefined) {
    queryParameters['numUserLimit'] = opt_numUserLimit;
  }

  /** @type {!Object} */
  var httpRequestParams = {
    method: 'POST',
    url: path,
    json: true,
            params: queryParameters,
    headers: headerParams
  };

  if (opt_extraHttpRequestParams) {
    httpRequestParams = angular.extend(httpRequestParams, opt_extraHttpRequestParams);
  }

  return (/** @type {?} */ (this.http_))(httpRequestParams);
}

/**
 * 
 * 
 * @param {!boolean=} opt_post 
 * @param {!boolean=} opt_apply 
 * @param {!boolean=} opt_delete 
 * @param {!string=} opt_action 
 * @param {!string=} opt_location 
 * @param {!Array<!string>=} opt_propertylist 
 * @param {!boolean=} opt_enableScheduledPostsSearch 
 * @param {!number=} opt_numberOfMinutes 
 * @param {!number=} opt_maxSearchLimit 
 * @param {!angular.$http.Config=} opt_extraHttpRequestParams Extra HTTP parameters to send.
 * @return {!angular.$q.Promise<!API.Client.comAdobeCqSocialCommonsCommentsSchedulerImplSearchScheduledPosInfo>}
 */
API.Client.ConfigmgrApi.prototype.comAdobeCqSocialCommonsCommentsSchedulerImplSearchScheduledPos = function(opt_post, opt_apply, opt_delete, opt_action, opt_location, opt_propertylist, opt_enableScheduledPostsSearch, opt_numberOfMinutes, opt_maxSearchLimit, opt_extraHttpRequestParams) {
  /** @const {string} */
  var path = this.basePath_ + '/system/console/configMgr/com.adobe.cq.social.commons.comments.scheduler.impl.SearchScheduledPosts';

  /** @type {!Object} */
  var queryParameters = {};

  /** @type {!Object} */
  var headerParams = angular.extend({}, this.defaultHeaders_);
  if (opt_post !== undefined) {
    queryParameters['post'] = opt_post;
  }

  if (opt_apply !== undefined) {
    queryParameters['apply'] = opt_apply;
  }

  if (opt_delete !== undefined) {
    queryParameters['delete'] = opt_delete;
  }

  if (opt_action !== undefined) {
    queryParameters['action'] = opt_action;
  }

  if (opt_location !== undefined) {
    queryParameters['$location'] = opt_location;
  }

  if (opt_propertylist !== undefined) {
    queryParameters['propertylist'] = opt_propertylist;
  }

  if (opt_enableScheduledPostsSearch !== undefined) {
    queryParameters['enableScheduledPostsSearch'] = opt_enableScheduledPostsSearch;
  }

  if (opt_numberOfMinutes !== undefined) {
    queryParameters['numberOfMinutes'] = opt_numberOfMinutes;
  }

  if (opt_maxSearchLimit !== undefined) {
    queryParameters['maxSearchLimit'] = opt_maxSearchLimit;
  }

  /** @type {!Object} */
  var httpRequestParams = {
    method: 'POST',
    url: path,
    json: true,
            params: queryParameters,
    headers: headerParams
  };

  if (opt_extraHttpRequestParams) {
    httpRequestParams = angular.extend(httpRequestParams, opt_extraHttpRequestParams);
  }

  return (/** @type {?} */ (this.http_))(httpRequestParams);
}

/**
 * 
 * 
 * @param {!boolean=} opt_post 
 * @param {!boolean=} opt_apply 
 * @param {!boolean=} opt_delete 
 * @param {!string=} opt_action 
 * @param {!string=} opt_location 
 * @param {!Array<!string>=} opt_propertylist 
 * @param {!boolean=} opt_corsEnabling 
 * @param {!angular.$http.Config=} opt_extraHttpRequestParams Extra HTTP parameters to send.
 * @return {!angular.$q.Promise<!API.Client.comAdobeCqSocialCommonsCorsCORSAuthenticationFilterInfo>}
 */
API.Client.ConfigmgrApi.prototype.comAdobeCqSocialCommonsCorsCORSAuthenticationFilter = function(opt_post, opt_apply, opt_delete, opt_action, opt_location, opt_propertylist, opt_corsEnabling, opt_extraHttpRequestParams) {
  /** @const {string} */
  var path = this.basePath_ + '/system/console/configMgr/com.adobe.cq.social.commons.cors.CORSAuthenticationFilter';

  /** @type {!Object} */
  var queryParameters = {};

  /** @type {!Object} */
  var headerParams = angular.extend({}, this.defaultHeaders_);
  if (opt_post !== undefined) {
    queryParameters['post'] = opt_post;
  }

  if (opt_apply !== undefined) {
    queryParameters['apply'] = opt_apply;
  }

  if (opt_delete !== undefined) {
    queryParameters['delete'] = opt_delete;
  }

  if (opt_action !== undefined) {
    queryParameters['action'] = opt_action;
  }

  if (opt_location !== undefined) {
    queryParameters['$location'] = opt_location;
  }

  if (opt_propertylist !== undefined) {
    queryParameters['propertylist'] = opt_propertylist;
  }

  if (opt_corsEnabling !== undefined) {
    queryParameters['cors.enabling'] = opt_corsEnabling;
  }

  /** @type {!Object} */
  var httpRequestParams = {
    method: 'POST',
    url: path,
    json: true,
            params: queryParameters,
    headers: headerParams
  };

  if (opt_extraHttpRequestParams) {
    httpRequestParams = angular.extend(httpRequestParams, opt_extraHttpRequestParams);
  }

  return (/** @type {?} */ (this.http_))(httpRequestParams);
}

/**
 * 
 * 
 * @param {!boolean=} opt_post 
 * @param {!boolean=} opt_apply 
 * @param {!boolean=} opt_delete 
 * @param {!string=} opt_action 
 * @param {!string=} opt_location 
 * @param {!Array<!string>=} opt_propertylist 
 * @param {!number=} opt_priorityOrder 
 * @param {!Array<!string>=} opt_replyEmailPatterns 
 * @param {!angular.$http.Config=} opt_extraHttpRequestParams Extra HTTP parameters to send.
 * @return {!angular.$q.Promise<!API.Client.comAdobeCqSocialCommonsEmailreplyImplAndroidEmailClientProviderInfo>}
 */
API.Client.ConfigmgrApi.prototype.comAdobeCqSocialCommonsEmailreplyImplAndroidEmailClientProvider = function(opt_post, opt_apply, opt_delete, opt_action, opt_location, opt_propertylist, opt_priorityOrder, opt_replyEmailPatterns, opt_extraHttpRequestParams) {
  /** @const {string} */
  var path = this.basePath_ + '/system/console/configMgr/com.adobe.cq.social.commons.emailreply.impl.AndroidEmailClientProvider';

  /** @type {!Object} */
  var queryParameters = {};

  /** @type {!Object} */
  var headerParams = angular.extend({}, this.defaultHeaders_);
  if (opt_post !== undefined) {
    queryParameters['post'] = opt_post;
  }

  if (opt_apply !== undefined) {
    queryParameters['apply'] = opt_apply;
  }

  if (opt_delete !== undefined) {
    queryParameters['delete'] = opt_delete;
  }

  if (opt_action !== undefined) {
    queryParameters['action'] = opt_action;
  }

  if (opt_location !== undefined) {
    queryParameters['$location'] = opt_location;
  }

  if (opt_propertylist !== undefined) {
    queryParameters['propertylist'] = opt_propertylist;
  }

  if (opt_priorityOrder !== undefined) {
    queryParameters['priorityOrder'] = opt_priorityOrder;
  }

  if (opt_replyEmailPatterns !== undefined) {
    queryParameters['replyEmailPatterns'] = opt_replyEmailPatterns;
  }

  /** @type {!Object} */
  var httpRequestParams = {
    method: 'POST',
    url: path,
    json: true,
            params: queryParameters,
    headers: headerParams
  };

  if (opt_extraHttpRequestParams) {
    httpRequestParams = angular.extend(httpRequestParams, opt_extraHttpRequestParams);
  }

  return (/** @type {?} */ (this.http_))(httpRequestParams);
}

/**
 * 
 * 
 * @param {!boolean=} opt_post 
 * @param {!boolean=} opt_apply 
 * @param {!boolean=} opt_delete 
 * @param {!string=} opt_action 
 * @param {!string=} opt_location 
 * @param {!Array<!string>=} opt_propertylist 
 * @param {!string=} opt_contextPath 
 * @param {!angular.$http.Config=} opt_extraHttpRequestParams Extra HTTP parameters to send.
 * @return {!angular.$q.Promise<!API.Client.comAdobeCqSocialCommonsEmailreplyImplCommentEmailBuilderImplInfo>}
 */
API.Client.ConfigmgrApi.prototype.comAdobeCqSocialCommonsEmailreplyImplCommentEmailBuilderImpl = function(opt_post, opt_apply, opt_delete, opt_action, opt_location, opt_propertylist, opt_contextPath, opt_extraHttpRequestParams) {
  /** @const {string} */
  var path = this.basePath_ + '/system/console/configMgr/com.adobe.cq.social.commons.emailreply.impl.CommentEmailBuilderImpl';

  /** @type {!Object} */
  var queryParameters = {};

  /** @type {!Object} */
  var headerParams = angular.extend({}, this.defaultHeaders_);
  if (opt_post !== undefined) {
    queryParameters['post'] = opt_post;
  }

  if (opt_apply !== undefined) {
    queryParameters['apply'] = opt_apply;
  }

  if (opt_delete !== undefined) {
    queryParameters['delete'] = opt_delete;
  }

  if (opt_action !== undefined) {
    queryParameters['action'] = opt_action;
  }

  if (opt_location !== undefined) {
    queryParameters['$location'] = opt_location;
  }

  if (opt_propertylist !== undefined) {
    queryParameters['propertylist'] = opt_propertylist;
  }

  if (opt_contextPath !== undefined) {
    queryParameters['context.path'] = opt_contextPath;
  }

  /** @type {!Object} */
  var httpRequestParams = {
    method: 'POST',
    url: path,
    json: true,
            params: queryParameters,
    headers: headerParams
  };

  if (opt_extraHttpRequestParams) {
    httpRequestParams = angular.extend(httpRequestParams, opt_extraHttpRequestParams);
  }

  return (/** @type {?} */ (this.http_))(httpRequestParams);
}

/**
 * 
 * 
 * @param {!boolean=} opt_post 
 * @param {!boolean=} opt_apply 
 * @param {!boolean=} opt_delete 
 * @param {!string=} opt_action 
 * @param {!string=} opt_location 
 * @param {!Array<!string>=} opt_propertylist 
 * @param {!string=} opt_eventTopics 
 * @param {!angular.$http.Config=} opt_extraHttpRequestParams Extra HTTP parameters to send.
 * @return {!angular.$q.Promise<!API.Client.comAdobeCqSocialCommonsEmailreplyImplCommentEmailEventListenerInfo>}
 */
API.Client.ConfigmgrApi.prototype.comAdobeCqSocialCommonsEmailreplyImplCommentEmailEventListener = function(opt_post, opt_apply, opt_delete, opt_action, opt_location, opt_propertylist, opt_eventTopics, opt_extraHttpRequestParams) {
  /** @const {string} */
  var path = this.basePath_ + '/system/console/configMgr/com.adobe.cq.social.commons.emailreply.impl.CommentEmailEventListener';

  /** @type {!Object} */
  var queryParameters = {};

  /** @type {!Object} */
  var headerParams = angular.extend({}, this.defaultHeaders_);
  if (opt_post !== undefined) {
    queryParameters['post'] = opt_post;
  }

  if (opt_apply !== undefined) {
    queryParameters['apply'] = opt_apply;
  }

  if (opt_delete !== undefined) {
    queryParameters['delete'] = opt_delete;
  }

  if (opt_action !== undefined) {
    queryParameters['action'] = opt_action;
  }

  if (opt_location !== undefined) {
    queryParameters['$location'] = opt_location;
  }

  if (opt_propertylist !== undefined) {
    queryParameters['propertylist'] = opt_propertylist;
  }

  if (opt_eventTopics !== undefined) {
    queryParameters['event.topics'] = opt_eventTopics;
  }

  /** @type {!Object} */
  var httpRequestParams = {
    method: 'POST',
    url: path,
    json: true,
            params: queryParameters,
    headers: headerParams
  };

  if (opt_extraHttpRequestParams) {
    httpRequestParams = angular.extend(httpRequestParams, opt_extraHttpRequestParams);
  }

  return (/** @type {?} */ (this.http_))(httpRequestParams);
}

/**
 * 
 * 
 * @param {!boolean=} opt_post 
 * @param {!boolean=} opt_apply 
 * @param {!boolean=} opt_delete 
 * @param {!string=} opt_action 
 * @param {!string=} opt_location 
 * @param {!Array<!string>=} opt_propertylist 
 * @param {!number=} opt_priorityOrder 
 * @param {!Array<!string>=} opt_replyEmailPatterns 
 * @param {!angular.$http.Config=} opt_extraHttpRequestParams Extra HTTP parameters to send.
 * @return {!angular.$q.Promise<!API.Client.comAdobeCqSocialCommonsEmailreplyImplCustomEmailClientProviderInfo>}
 */
API.Client.ConfigmgrApi.prototype.comAdobeCqSocialCommonsEmailreplyImplCustomEmailClientProvider = function(opt_post, opt_apply, opt_delete, opt_action, opt_location, opt_propertylist, opt_priorityOrder, opt_replyEmailPatterns, opt_extraHttpRequestParams) {
  /** @const {string} */
  var path = this.basePath_ + '/system/console/configMgr/com.adobe.cq.social.commons.emailreply.impl.CustomEmailClientProvider';

  /** @type {!Object} */
  var queryParameters = {};

  /** @type {!Object} */
  var headerParams = angular.extend({}, this.defaultHeaders_);
  if (opt_post !== undefined) {
    queryParameters['post'] = opt_post;
  }

  if (opt_apply !== undefined) {
    queryParameters['apply'] = opt_apply;
  }

  if (opt_delete !== undefined) {
    queryParameters['delete'] = opt_delete;
  }

  if (opt_action !== undefined) {
    queryParameters['action'] = opt_action;
  }

  if (opt_location !== undefined) {
    queryParameters['$location'] = opt_location;
  }

  if (opt_propertylist !== undefined) {
    queryParameters['propertylist'] = opt_propertylist;
  }

  if (opt_priorityOrder !== undefined) {
    queryParameters['priorityOrder'] = opt_priorityOrder;
  }

  if (opt_replyEmailPatterns !== undefined) {
    queryParameters['replyEmailPatterns'] = opt_replyEmailPatterns;
  }

  /** @type {!Object} */
  var httpRequestParams = {
    method: 'POST',
    url: path,
    json: true,
            params: queryParameters,
    headers: headerParams
  };

  if (opt_extraHttpRequestParams) {
    httpRequestParams = angular.extend(httpRequestParams, opt_extraHttpRequestParams);
  }

  return (/** @type {?} */ (this.http_))(httpRequestParams);
}

/**
 * 
 * 
 * @param {!boolean=} opt_post 
 * @param {!boolean=} opt_apply 
 * @param {!boolean=} opt_delete 
 * @param {!string=} opt_action 
 * @param {!string=} opt_location 
 * @param {!Array<!string>=} opt_propertylist 
 * @param {!string=} opt_patternTime 
 * @param {!string=} opt_patternNewline 
 * @param {!string=} opt_patternDayOfMonth 
 * @param {!string=} opt_patternMonth 
 * @param {!string=} opt_patternYear 
 * @param {!string=} opt_patternDate 
 * @param {!string=} opt_patternDateTime 
 * @param {!string=} opt_patternEmail 
 * @param {!angular.$http.Config=} opt_extraHttpRequestParams Extra HTTP parameters to send.
 * @return {!angular.$q.Promise<!API.Client.comAdobeCqSocialCommonsEmailreplyImplEmailQuotedTextPatternsImpInfo>}
 */
API.Client.ConfigmgrApi.prototype.comAdobeCqSocialCommonsEmailreplyImplEmailQuotedTextPatternsImp = function(opt_post, opt_apply, opt_delete, opt_action, opt_location, opt_propertylist, opt_patternTime, opt_patternNewline, opt_patternDayOfMonth, opt_patternMonth, opt_patternYear, opt_patternDate, opt_patternDateTime, opt_patternEmail, opt_extraHttpRequestParams) {
  /** @const {string} */
  var path = this.basePath_ + '/system/console/configMgr/com.adobe.cq.social.commons.emailreply.impl.EmailQuotedTextPatternsImpl';

  /** @type {!Object} */
  var queryParameters = {};

  /** @type {!Object} */
  var headerParams = angular.extend({}, this.defaultHeaders_);
  if (opt_post !== undefined) {
    queryParameters['post'] = opt_post;
  }

  if (opt_apply !== undefined) {
    queryParameters['apply'] = opt_apply;
  }

  if (opt_delete !== undefined) {
    queryParameters['delete'] = opt_delete;
  }

  if (opt_action !== undefined) {
    queryParameters['action'] = opt_action;
  }

  if (opt_location !== undefined) {
    queryParameters['$location'] = opt_location;
  }

  if (opt_propertylist !== undefined) {
    queryParameters['propertylist'] = opt_propertylist;
  }

  if (opt_patternTime !== undefined) {
    queryParameters['pattern.time'] = opt_patternTime;
  }

  if (opt_patternNewline !== undefined) {
    queryParameters['pattern.newline'] = opt_patternNewline;
  }

  if (opt_patternDayOfMonth !== undefined) {
    queryParameters['pattern.dayOfMonth'] = opt_patternDayOfMonth;
  }

  if (opt_patternMonth !== undefined) {
    queryParameters['pattern.month'] = opt_patternMonth;
  }

  if (opt_patternYear !== undefined) {
    queryParameters['pattern.year'] = opt_patternYear;
  }

  if (opt_patternDate !== undefined) {
    queryParameters['pattern.date'] = opt_patternDate;
  }

  if (opt_patternDateTime !== undefined) {
    queryParameters['pattern.dateTime'] = opt_patternDateTime;
  }

  if (opt_patternEmail !== undefined) {
    queryParameters['pattern.email'] = opt_patternEmail;
  }

  /** @type {!Object} */
  var httpRequestParams = {
    method: 'POST',
    url: path,
    json: true,
            params: queryParameters,
    headers: headerParams
  };

  if (opt_extraHttpRequestParams) {
    httpRequestParams = angular.extend(httpRequestParams, opt_extraHttpRequestParams);
  }

  return (/** @type {?} */ (this.http_))(httpRequestParams);
}

/**
 * 
 * 
 * @param {!boolean=} opt_post 
 * @param {!boolean=} opt_apply 
 * @param {!boolean=} opt_delete 
 * @param {!string=} opt_action 
 * @param {!string=} opt_location 
 * @param {!Array<!string>=} opt_propertylist 
 * @param {!string=} opt_emailName 
 * @param {!boolean=} opt_emailCreatePostFromReply 
 * @param {!string=} opt_emailAddCommentIdTo 
 * @param {!number=} opt_emailSubjectMaximumLength 
 * @param {!string=} opt_emailReplyToAddress 
 * @param {!string=} opt_emailReplyToDelimiter 
 * @param {!string=} opt_emailTrackerIdPrefixInSubject 
 * @param {!string=} opt_emailTrackerIdPrefixInBody 
 * @param {!boolean=} opt_emailAsHTML 
 * @param {!string=} opt_emailDefaultUserName 
 * @param {!string=} opt_emailTemplatesRootPath 
 * @param {!angular.$http.Config=} opt_extraHttpRequestParams Extra HTTP parameters to send.
 * @return {!angular.$q.Promise<!API.Client.comAdobeCqSocialCommonsEmailreplyImplEmailReplyConfigurationImpInfo>}
 */
API.Client.ConfigmgrApi.prototype.comAdobeCqSocialCommonsEmailreplyImplEmailReplyConfigurationImp = function(opt_post, opt_apply, opt_delete, opt_action, opt_location, opt_propertylist, opt_emailName, opt_emailCreatePostFromReply, opt_emailAddCommentIdTo, opt_emailSubjectMaximumLength, opt_emailReplyToAddress, opt_emailReplyToDelimiter, opt_emailTrackerIdPrefixInSubject, opt_emailTrackerIdPrefixInBody, opt_emailAsHTML, opt_emailDefaultUserName, opt_emailTemplatesRootPath, opt_extraHttpRequestParams) {
  /** @const {string} */
  var path = this.basePath_ + '/system/console/configMgr/com.adobe.cq.social.commons.emailreply.impl.EmailReplyConfigurationImpl';

  /** @type {!Object} */
  var queryParameters = {};

  /** @type {!Object} */
  var headerParams = angular.extend({}, this.defaultHeaders_);
  if (opt_post !== undefined) {
    queryParameters['post'] = opt_post;
  }

  if (opt_apply !== undefined) {
    queryParameters['apply'] = opt_apply;
  }

  if (opt_delete !== undefined) {
    queryParameters['delete'] = opt_delete;
  }

  if (opt_action !== undefined) {
    queryParameters['action'] = opt_action;
  }

  if (opt_location !== undefined) {
    queryParameters['$location'] = opt_location;
  }

  if (opt_propertylist !== undefined) {
    queryParameters['propertylist'] = opt_propertylist;
  }

  if (opt_emailName !== undefined) {
    queryParameters['email.name'] = opt_emailName;
  }

  if (opt_emailCreatePostFromReply !== undefined) {
    queryParameters['email.createPostFromReply'] = opt_emailCreatePostFromReply;
  }

  if (opt_emailAddCommentIdTo !== undefined) {
    queryParameters['email.addCommentIdTo'] = opt_emailAddCommentIdTo;
  }

  if (opt_emailSubjectMaximumLength !== undefined) {
    queryParameters['email.subjectMaximumLength'] = opt_emailSubjectMaximumLength;
  }

  if (opt_emailReplyToAddress !== undefined) {
    queryParameters['email.replyToAddress'] = opt_emailReplyToAddress;
  }

  if (opt_emailReplyToDelimiter !== undefined) {
    queryParameters['email.replyToDelimiter'] = opt_emailReplyToDelimiter;
  }

  if (opt_emailTrackerIdPrefixInSubject !== undefined) {
    queryParameters['email.trackerIdPrefixInSubject'] = opt_emailTrackerIdPrefixInSubject;
  }

  if (opt_emailTrackerIdPrefixInBody !== undefined) {
    queryParameters['email.trackerIdPrefixInBody'] = opt_emailTrackerIdPrefixInBody;
  }

  if (opt_emailAsHTML !== undefined) {
    queryParameters['email.asHTML'] = opt_emailAsHTML;
  }

  if (opt_emailDefaultUserName !== undefined) {
    queryParameters['email.defaultUserName'] = opt_emailDefaultUserName;
  }

  if (opt_emailTemplatesRootPath !== undefined) {
    queryParameters['email.templates.rootPath'] = opt_emailTemplatesRootPath;
  }

  /** @type {!Object} */
  var httpRequestParams = {
    method: 'POST',
    url: path,
    json: true,
            params: queryParameters,
    headers: headerParams
  };

  if (opt_extraHttpRequestParams) {
    httpRequestParams = angular.extend(httpRequestParams, opt_extraHttpRequestParams);
  }

  return (/** @type {?} */ (this.http_))(httpRequestParams);
}

/**
 * 
 * 
 * @param {!boolean=} opt_post 
 * @param {!boolean=} opt_apply 
 * @param {!boolean=} opt_delete 
 * @param {!string=} opt_action 
 * @param {!string=} opt_location 
 * @param {!Array<!string>=} opt_propertylist 
 * @param {!string=} opt_connectProtocol 
 * @param {!angular.$http.Config=} opt_extraHttpRequestParams Extra HTTP parameters to send.
 * @return {!angular.$q.Promise<!API.Client.comAdobeCqSocialCommonsEmailreplyImplEmailReplyImporterInfo>}
 */
API.Client.ConfigmgrApi.prototype.comAdobeCqSocialCommonsEmailreplyImplEmailReplyImporter = function(opt_post, opt_apply, opt_delete, opt_action, opt_location, opt_propertylist, opt_connectProtocol, opt_extraHttpRequestParams) {
  /** @const {string} */
  var path = this.basePath_ + '/system/console/configMgr/com.adobe.cq.social.commons.emailreply.impl.EmailReplyImporter';

  /** @type {!Object} */
  var queryParameters = {};

  /** @type {!Object} */
  var headerParams = angular.extend({}, this.defaultHeaders_);
  if (opt_post !== undefined) {
    queryParameters['post'] = opt_post;
  }

  if (opt_apply !== undefined) {
    queryParameters['apply'] = opt_apply;
  }

  if (opt_delete !== undefined) {
    queryParameters['delete'] = opt_delete;
  }

  if (opt_action !== undefined) {
    queryParameters['action'] = opt_action;
  }

  if (opt_location !== undefined) {
    queryParameters['$location'] = opt_location;
  }

  if (opt_propertylist !== undefined) {
    queryParameters['propertylist'] = opt_propertylist;
  }

  if (opt_connectProtocol !== undefined) {
    queryParameters['connectProtocol'] = opt_connectProtocol;
  }

  /** @type {!Object} */
  var httpRequestParams = {
    method: 'POST',
    url: path,
    json: true,
            params: queryParameters,
    headers: headerParams
  };

  if (opt_extraHttpRequestParams) {
    httpRequestParams = angular.extend(httpRequestParams, opt_extraHttpRequestParams);
  }

  return (/** @type {?} */ (this.http_))(httpRequestParams);
}

/**
 * 
 * 
 * @param {!boolean=} opt_post 
 * @param {!boolean=} opt_apply 
 * @param {!boolean=} opt_delete 
 * @param {!string=} opt_action 
 * @param {!string=} opt_location 
 * @param {!Array<!string>=} opt_propertylist 
 * @param {!number=} opt_priorityOrder 
 * @param {!Array<!string>=} opt_replyEmailPatterns 
 * @param {!angular.$http.Config=} opt_extraHttpRequestParams Extra HTTP parameters to send.
 * @return {!angular.$q.Promise<!API.Client.comAdobeCqSocialCommonsEmailreplyImplGmailEmailClientProviderInfo>}
 */
API.Client.ConfigmgrApi.prototype.comAdobeCqSocialCommonsEmailreplyImplGmailEmailClientProvider = function(opt_post, opt_apply, opt_delete, opt_action, opt_location, opt_propertylist, opt_priorityOrder, opt_replyEmailPatterns, opt_extraHttpRequestParams) {
  /** @const {string} */
  var path = this.basePath_ + '/system/console/configMgr/com.adobe.cq.social.commons.emailreply.impl.GmailEmailClientProvider';

  /** @type {!Object} */
  var queryParameters = {};

  /** @type {!Object} */
  var headerParams = angular.extend({}, this.defaultHeaders_);
  if (opt_post !== undefined) {
    queryParameters['post'] = opt_post;
  }

  if (opt_apply !== undefined) {
    queryParameters['apply'] = opt_apply;
  }

  if (opt_delete !== undefined) {
    queryParameters['delete'] = opt_delete;
  }

  if (opt_action !== undefined) {
    queryParameters['action'] = opt_action;
  }

  if (opt_location !== undefined) {
    queryParameters['$location'] = opt_location;
  }

  if (opt_propertylist !== undefined) {
    queryParameters['propertylist'] = opt_propertylist;
  }

  if (opt_priorityOrder !== undefined) {
    queryParameters['priorityOrder'] = opt_priorityOrder;
  }

  if (opt_replyEmailPatterns !== undefined) {
    queryParameters['replyEmailPatterns'] = opt_replyEmailPatterns;
  }

  /** @type {!Object} */
  var httpRequestParams = {
    method: 'POST',
    url: path,
    json: true,
            params: queryParameters,
    headers: headerParams
  };

  if (opt_extraHttpRequestParams) {
    httpRequestParams = angular.extend(httpRequestParams, opt_extraHttpRequestParams);
  }

  return (/** @type {?} */ (this.http_))(httpRequestParams);
}

/**
 * 
 * 
 * @param {!boolean=} opt_post 
 * @param {!boolean=} opt_apply 
 * @param {!boolean=} opt_delete 
 * @param {!string=} opt_action 
 * @param {!string=} opt_location 
 * @param {!Array<!string>=} opt_propertylist 
 * @param {!number=} opt_priorityOrder 
 * @param {!Array<!string>=} opt_replyEmailPatterns 
 * @param {!angular.$http.Config=} opt_extraHttpRequestParams Extra HTTP parameters to send.
 * @return {!angular.$q.Promise<!API.Client.comAdobeCqSocialCommonsEmailreplyImplIOSEmailClientProviderInfo>}
 */
API.Client.ConfigmgrApi.prototype.comAdobeCqSocialCommonsEmailreplyImplIOSEmailClientProvider = function(opt_post, opt_apply, opt_delete, opt_action, opt_location, opt_propertylist, opt_priorityOrder, opt_replyEmailPatterns, opt_extraHttpRequestParams) {
  /** @const {string} */
  var path = this.basePath_ + '/system/console/configMgr/com.adobe.cq.social.commons.emailreply.impl.IOSEmailClientProvider';

  /** @type {!Object} */
  var queryParameters = {};

  /** @type {!Object} */
  var headerParams = angular.extend({}, this.defaultHeaders_);
  if (opt_post !== undefined) {
    queryParameters['post'] = opt_post;
  }

  if (opt_apply !== undefined) {
    queryParameters['apply'] = opt_apply;
  }

  if (opt_delete !== undefined) {
    queryParameters['delete'] = opt_delete;
  }

  if (opt_action !== undefined) {
    queryParameters['action'] = opt_action;
  }

  if (opt_location !== undefined) {
    queryParameters['$location'] = opt_location;
  }

  if (opt_propertylist !== undefined) {
    queryParameters['propertylist'] = opt_propertylist;
  }

  if (opt_priorityOrder !== undefined) {
    queryParameters['priorityOrder'] = opt_priorityOrder;
  }

  if (opt_replyEmailPatterns !== undefined) {
    queryParameters['replyEmailPatterns'] = opt_replyEmailPatterns;
  }

  /** @type {!Object} */
  var httpRequestParams = {
    method: 'POST',
    url: path,
    json: true,
            params: queryParameters,
    headers: headerParams
  };

  if (opt_extraHttpRequestParams) {
    httpRequestParams = angular.extend(httpRequestParams, opt_extraHttpRequestParams);
  }

  return (/** @type {?} */ (this.http_))(httpRequestParams);
}

/**
 * 
 * 
 * @param {!boolean=} opt_post 
 * @param {!boolean=} opt_apply 
 * @param {!boolean=} opt_delete 
 * @param {!string=} opt_action 
 * @param {!string=} opt_location 
 * @param {!Array<!string>=} opt_propertylist 
 * @param {!number=} opt_priorityOrder 
 * @param {!Array<!string>=} opt_replyEmailPatterns 
 * @param {!angular.$http.Config=} opt_extraHttpRequestParams Extra HTTP parameters to send.
 * @return {!angular.$q.Promise<!API.Client.comAdobeCqSocialCommonsEmailreplyImplMacmailEmailClientProviderInfo>}
 */
API.Client.ConfigmgrApi.prototype.comAdobeCqSocialCommonsEmailreplyImplMacmailEmailClientProvider = function(opt_post, opt_apply, opt_delete, opt_action, opt_location, opt_propertylist, opt_priorityOrder, opt_replyEmailPatterns, opt_extraHttpRequestParams) {
  /** @const {string} */
  var path = this.basePath_ + '/system/console/configMgr/com.adobe.cq.social.commons.emailreply.impl.MacmailEmailClientProvider';

  /** @type {!Object} */
  var queryParameters = {};

  /** @type {!Object} */
  var headerParams = angular.extend({}, this.defaultHeaders_);
  if (opt_post !== undefined) {
    queryParameters['post'] = opt_post;
  }

  if (opt_apply !== undefined) {
    queryParameters['apply'] = opt_apply;
  }

  if (opt_delete !== undefined) {
    queryParameters['delete'] = opt_delete;
  }

  if (opt_action !== undefined) {
    queryParameters['action'] = opt_action;
  }

  if (opt_location !== undefined) {
    queryParameters['$location'] = opt_location;
  }

  if (opt_propertylist !== undefined) {
    queryParameters['propertylist'] = opt_propertylist;
  }

  if (opt_priorityOrder !== undefined) {
    queryParameters['priorityOrder'] = opt_priorityOrder;
  }

  if (opt_replyEmailPatterns !== undefined) {
    queryParameters['replyEmailPatterns'] = opt_replyEmailPatterns;
  }

  /** @type {!Object} */
  var httpRequestParams = {
    method: 'POST',
    url: path,
    json: true,
            params: queryParameters,
    headers: headerParams
  };

  if (opt_extraHttpRequestParams) {
    httpRequestParams = angular.extend(httpRequestParams, opt_extraHttpRequestParams);
  }

  return (/** @type {?} */ (this.http_))(httpRequestParams);
}

/**
 * 
 * 
 * @param {!boolean=} opt_post 
 * @param {!boolean=} opt_apply 
 * @param {!boolean=} opt_delete 
 * @param {!string=} opt_action 
 * @param {!string=} opt_location 
 * @param {!Array<!string>=} opt_propertylist 
 * @param {!number=} opt_priorityOrder 
 * @param {!Array<!string>=} opt_replyEmailPatterns 
 * @param {!angular.$http.Config=} opt_extraHttpRequestParams Extra HTTP parameters to send.
 * @return {!angular.$q.Promise<!API.Client.comAdobeCqSocialCommonsEmailreplyImplOutLookEmailClientProviderInfo>}
 */
API.Client.ConfigmgrApi.prototype.comAdobeCqSocialCommonsEmailreplyImplOutLookEmailClientProvider = function(opt_post, opt_apply, opt_delete, opt_action, opt_location, opt_propertylist, opt_priorityOrder, opt_replyEmailPatterns, opt_extraHttpRequestParams) {
  /** @const {string} */
  var path = this.basePath_ + '/system/console/configMgr/com.adobe.cq.social.commons.emailreply.impl.OutLookEmailClientProvider';

  /** @type {!Object} */
  var queryParameters = {};

  /** @type {!Object} */
  var headerParams = angular.extend({}, this.defaultHeaders_);
  if (opt_post !== undefined) {
    queryParameters['post'] = opt_post;
  }

  if (opt_apply !== undefined) {
    queryParameters['apply'] = opt_apply;
  }

  if (opt_delete !== undefined) {
    queryParameters['delete'] = opt_delete;
  }

  if (opt_action !== undefined) {
    queryParameters['action'] = opt_action;
  }

  if (opt_location !== undefined) {
    queryParameters['$location'] = opt_location;
  }

  if (opt_propertylist !== undefined) {
    queryParameters['propertylist'] = opt_propertylist;
  }

  if (opt_priorityOrder !== undefined) {
    queryParameters['priorityOrder'] = opt_priorityOrder;
  }

  if (opt_replyEmailPatterns !== undefined) {
    queryParameters['replyEmailPatterns'] = opt_replyEmailPatterns;
  }

  /** @type {!Object} */
  var httpRequestParams = {
    method: 'POST',
    url: path,
    json: true,
            params: queryParameters,
    headers: headerParams
  };

  if (opt_extraHttpRequestParams) {
    httpRequestParams = angular.extend(httpRequestParams, opt_extraHttpRequestParams);
  }

  return (/** @type {?} */ (this.http_))(httpRequestParams);
}

/**
 * 
 * 
 * @param {!boolean=} opt_post 
 * @param {!boolean=} opt_apply 
 * @param {!boolean=} opt_delete 
 * @param {!string=} opt_action 
 * @param {!string=} opt_location 
 * @param {!Array<!string>=} opt_propertylist 
 * @param {!Array<!string>=} opt_replyEmailPatterns 
 * @param {!number=} opt_priorityOrder 
 * @param {!angular.$http.Config=} opt_extraHttpRequestParams Extra HTTP parameters to send.
 * @return {!angular.$q.Promise<!API.Client.comAdobeCqSocialCommonsEmailreplyImplUnknownEmailClientProviderInfo>}
 */
API.Client.ConfigmgrApi.prototype.comAdobeCqSocialCommonsEmailreplyImplUnknownEmailClientProvider = function(opt_post, opt_apply, opt_delete, opt_action, opt_location, opt_propertylist, opt_replyEmailPatterns, opt_priorityOrder, opt_extraHttpRequestParams) {
  /** @const {string} */
  var path = this.basePath_ + '/system/console/configMgr/com.adobe.cq.social.commons.emailreply.impl.UnknownEmailClientProvider';

  /** @type {!Object} */
  var queryParameters = {};

  /** @type {!Object} */
  var headerParams = angular.extend({}, this.defaultHeaders_);
  if (opt_post !== undefined) {
    queryParameters['post'] = opt_post;
  }

  if (opt_apply !== undefined) {
    queryParameters['apply'] = opt_apply;
  }

  if (opt_delete !== undefined) {
    queryParameters['delete'] = opt_delete;
  }

  if (opt_action !== undefined) {
    queryParameters['action'] = opt_action;
  }

  if (opt_location !== undefined) {
    queryParameters['$location'] = opt_location;
  }

  if (opt_propertylist !== undefined) {
    queryParameters['propertylist'] = opt_propertylist;
  }

  if (opt_replyEmailPatterns !== undefined) {
    queryParameters['replyEmailPatterns'] = opt_replyEmailPatterns;
  }

  if (opt_priorityOrder !== undefined) {
    queryParameters['priorityOrder'] = opt_priorityOrder;
  }

  /** @type {!Object} */
  var httpRequestParams = {
    method: 'POST',
    url: path,
    json: true,
            params: queryParameters,
    headers: headerParams
  };

  if (opt_extraHttpRequestParams) {
    httpRequestParams = angular.extend(httpRequestParams, opt_extraHttpRequestParams);
  }

  return (/** @type {?} */ (this.http_))(httpRequestParams);
}

/**
 * 
 * 
 * @param {!boolean=} opt_post 
 * @param {!boolean=} opt_apply 
 * @param {!boolean=} opt_delete 
 * @param {!string=} opt_action 
 * @param {!string=} opt_location 
 * @param {!Array<!string>=} opt_propertylist 
 * @param {!number=} opt_priorityOrder 
 * @param {!Array<!string>=} opt_replyEmailPatterns 
 * @param {!angular.$http.Config=} opt_extraHttpRequestParams Extra HTTP parameters to send.
 * @return {!angular.$q.Promise<!API.Client.comAdobeCqSocialCommonsEmailreplyImplYahooEmailClientProviderInfo>}
 */
API.Client.ConfigmgrApi.prototype.comAdobeCqSocialCommonsEmailreplyImplYahooEmailClientProvider = function(opt_post, opt_apply, opt_delete, opt_action, opt_location, opt_propertylist, opt_priorityOrder, opt_replyEmailPatterns, opt_extraHttpRequestParams) {
  /** @const {string} */
  var path = this.basePath_ + '/system/console/configMgr/com.adobe.cq.social.commons.emailreply.impl.YahooEmailClientProvider';

  /** @type {!Object} */
  var queryParameters = {};

  /** @type {!Object} */
  var headerParams = angular.extend({}, this.defaultHeaders_);
  if (opt_post !== undefined) {
    queryParameters['post'] = opt_post;
  }

  if (opt_apply !== undefined) {
    queryParameters['apply'] = opt_apply;
  }

  if (opt_delete !== undefined) {
    queryParameters['delete'] = opt_delete;
  }

  if (opt_action !== undefined) {
    queryParameters['action'] = opt_action;
  }

  if (opt_location !== undefined) {
    queryParameters['$location'] = opt_location;
  }

  if (opt_propertylist !== undefined) {
    queryParameters['propertylist'] = opt_propertylist;
  }

  if (opt_priorityOrder !== undefined) {
    queryParameters['priorityOrder'] = opt_priorityOrder;
  }

  if (opt_replyEmailPatterns !== undefined) {
    queryParameters['replyEmailPatterns'] = opt_replyEmailPatterns;
  }

  /** @type {!Object} */
  var httpRequestParams = {
    method: 'POST',
    url: path,
    json: true,
            params: queryParameters,
    headers: headerParams
  };

  if (opt_extraHttpRequestParams) {
    httpRequestParams = angular.extend(httpRequestParams, opt_extraHttpRequestParams);
  }

  return (/** @type {?} */ (this.http_))(httpRequestParams);
}

/**
 * 
 * 
 * @param {!boolean=} opt_post 
 * @param {!boolean=} opt_apply 
 * @param {!boolean=} opt_delete 
 * @param {!string=} opt_action 
 * @param {!string=} opt_location 
 * @param {!Array<!string>=} opt_propertylist 
 * @param {!number=} opt_numberOfDays 
 * @param {!number=} opt_ageOfFile 
 * @param {!angular.$http.Config=} opt_extraHttpRequestParams Extra HTTP parameters to send.
 * @return {!angular.$q.Promise<!API.Client.comAdobeCqSocialCommonsMaintainanceImplDeleteTempUGCImageUploadInfo>}
 */
API.Client.ConfigmgrApi.prototype.comAdobeCqSocialCommonsMaintainanceImplDeleteTempUGCImageUpload = function(opt_post, opt_apply, opt_delete, opt_action, opt_location, opt_propertylist, opt_numberOfDays, opt_ageOfFile, opt_extraHttpRequestParams) {
  /** @const {string} */
  var path = this.basePath_ + '/system/console/configMgr/com.adobe.cq.social.commons.maintainance.impl.DeleteTempUGCImageUploads';

  /** @type {!Object} */
  var queryParameters = {};

  /** @type {!Object} */
  var headerParams = angular.extend({}, this.defaultHeaders_);
  if (opt_post !== undefined) {
    queryParameters['post'] = opt_post;
  }

  if (opt_apply !== undefined) {
    queryParameters['apply'] = opt_apply;
  }

  if (opt_delete !== undefined) {
    queryParameters['delete'] = opt_delete;
  }

  if (opt_action !== undefined) {
    queryParameters['action'] = opt_action;
  }

  if (opt_location !== undefined) {
    queryParameters['$location'] = opt_location;
  }

  if (opt_propertylist !== undefined) {
    queryParameters['propertylist'] = opt_propertylist;
  }

  if (opt_numberOfDays !== undefined) {
    queryParameters['numberOfDays'] = opt_numberOfDays;
  }

  if (opt_ageOfFile !== undefined) {
    queryParameters['ageOfFile'] = opt_ageOfFile;
  }

  /** @type {!Object} */
  var httpRequestParams = {
    method: 'POST',
    url: path,
    json: true,
            params: queryParameters,
    headers: headerParams
  };

  if (opt_extraHttpRequestParams) {
    httpRequestParams = angular.extend(httpRequestParams, opt_extraHttpRequestParams);
  }

  return (/** @type {?} */ (this.http_))(httpRequestParams);
}

/**
 * 
 * 
 * @param {!boolean=} opt_post 
 * @param {!boolean=} opt_apply 
 * @param {!boolean=} opt_delete 
 * @param {!string=} opt_action 
 * @param {!string=} opt_location 
 * @param {!Array<!string>=} opt_propertylist 
 * @param {!string=} opt_eventTopics 
 * @param {!string=} opt_eventFilter 
 * @param {!Array<!string>=} opt_verbs 
 * @param {!angular.$http.Config=} opt_extraHttpRequestParams Extra HTTP parameters to send.
 * @return {!angular.$q.Promise<!API.Client.comAdobeCqSocialCommonsUgclimiterImplUGCLimiterServiceImplInfo>}
 */
API.Client.ConfigmgrApi.prototype.comAdobeCqSocialCommonsUgclimiterImplUGCLimiterServiceImpl = function(opt_post, opt_apply, opt_delete, opt_action, opt_location, opt_propertylist, opt_eventTopics, opt_eventFilter, opt_verbs, opt_extraHttpRequestParams) {
  /** @const {string} */
  var path = this.basePath_ + '/system/console/configMgr/com.adobe.cq.social.commons.ugclimiter.impl.UGCLimiterServiceImpl';

  /** @type {!Object} */
  var queryParameters = {};

  /** @type {!Object} */
  var headerParams = angular.extend({}, this.defaultHeaders_);
  if (opt_post !== undefined) {
    queryParameters['post'] = opt_post;
  }

  if (opt_apply !== undefined) {
    queryParameters['apply'] = opt_apply;
  }

  if (opt_delete !== undefined) {
    queryParameters['delete'] = opt_delete;
  }

  if (opt_action !== undefined) {
    queryParameters['action'] = opt_action;
  }

  if (opt_location !== undefined) {
    queryParameters['$location'] = opt_location;
  }

  if (opt_propertylist !== undefined) {
    queryParameters['propertylist'] = opt_propertylist;
  }

  if (opt_eventTopics !== undefined) {
    queryParameters['event.topics'] = opt_eventTopics;
  }

  if (opt_eventFilter !== undefined) {
    queryParameters['event.filter'] = opt_eventFilter;
  }

  if (opt_verbs !== undefined) {
    queryParameters['verbs'] = opt_verbs;
  }

  /** @type {!Object} */
  var httpRequestParams = {
    method: 'POST',
    url: path,
    json: true,
            params: queryParameters,
    headers: headerParams
  };

  if (opt_extraHttpRequestParams) {
    httpRequestParams = angular.extend(httpRequestParams, opt_extraHttpRequestParams);
  }

  return (/** @type {?} */ (this.http_))(httpRequestParams);
}

/**
 * 
 * 
 * @param {!boolean=} opt_post 
 * @param {!boolean=} opt_apply 
 * @param {!boolean=} opt_delete 
 * @param {!string=} opt_action 
 * @param {!string=} opt_location 
 * @param {!Array<!string>=} opt_propertylist 
 * @param {!boolean=} opt_enable 
 * @param {!number=} opt_uGCLimit 
 * @param {!number=} opt_ugcLimitDuration 
 * @param {!Array<!string>=} opt_domains 
 * @param {!Array<!string>=} opt_toList 
 * @param {!angular.$http.Config=} opt_extraHttpRequestParams Extra HTTP parameters to send.
 * @return {!angular.$q.Promise<!API.Client.comAdobeCqSocialCommonsUgclimitsconfigImplCommunityUserUGCLimitInfo>}
 */
API.Client.ConfigmgrApi.prototype.comAdobeCqSocialCommonsUgclimitsconfigImplCommunityUserUGCLimit = function(opt_post, opt_apply, opt_delete, opt_action, opt_location, opt_propertylist, opt_enable, opt_uGCLimit, opt_ugcLimitDuration, opt_domains, opt_toList, opt_extraHttpRequestParams) {
  /** @const {string} */
  var path = this.basePath_ + '/system/console/configMgr/com.adobe.cq.social.commons.ugclimitsconfig.impl.CommunityUserUGCLimitsConfigImpl';

  /** @type {!Object} */
  var queryParameters = {};

  /** @type {!Object} */
  var headerParams = angular.extend({}, this.defaultHeaders_);
  if (opt_post !== undefined) {
    queryParameters['post'] = opt_post;
  }

  if (opt_apply !== undefined) {
    queryParameters['apply'] = opt_apply;
  }

  if (opt_delete !== undefined) {
    queryParameters['delete'] = opt_delete;
  }

  if (opt_action !== undefined) {
    queryParameters['action'] = opt_action;
  }

  if (opt_location !== undefined) {
    queryParameters['$location'] = opt_location;
  }

  if (opt_propertylist !== undefined) {
    queryParameters['propertylist'] = opt_propertylist;
  }

  if (opt_enable !== undefined) {
    queryParameters['enable'] = opt_enable;
  }

  if (opt_uGCLimit !== undefined) {
    queryParameters['UGCLimit'] = opt_uGCLimit;
  }

  if (opt_ugcLimitDuration !== undefined) {
    queryParameters['ugcLimitDuration'] = opt_ugcLimitDuration;
  }

  if (opt_domains !== undefined) {
    queryParameters['domains'] = opt_domains;
  }

  if (opt_toList !== undefined) {
    queryParameters['toList'] = opt_toList;
  }

  /** @type {!Object} */
  var httpRequestParams = {
    method: 'POST',
    url: path,
    json: true,
            params: queryParameters,
    headers: headerParams
  };

  if (opt_extraHttpRequestParams) {
    httpRequestParams = angular.extend(httpRequestParams, opt_extraHttpRequestParams);
  }

  return (/** @type {?} */ (this.http_))(httpRequestParams);
}

/**
 * 
 * 
 * @param {!boolean=} opt_post 
 * @param {!boolean=} opt_apply 
 * @param {!boolean=} opt_delete 
 * @param {!string=} opt_action 
 * @param {!string=} opt_location 
 * @param {!Array<!string>=} opt_propertylist 
 * @param {!string=} opt_oauthProviderId 
 * @param {!string=} opt_oauthCloudConfigRoot 
 * @param {!string=} opt_providerConfigRoot 
 * @param {!boolean=} opt_providerConfigCreateTagsEnabled 
 * @param {!string=} opt_providerConfigUserFolder 
 * @param {!boolean=} opt_providerConfigFacebookFetchFields 
 * @param {!Array<!string>=} opt_providerConfigFacebookFields 
 * @param {!boolean=} opt_providerConfigRefreshUserdataEnabled 
 * @param {!angular.$http.Config=} opt_extraHttpRequestParams Extra HTTP parameters to send.
 * @return {!angular.$q.Promise<!API.Client.comAdobeCqSocialConnectOauthImplFacebookProviderImplInfo>}
 */
API.Client.ConfigmgrApi.prototype.comAdobeCqSocialConnectOauthImplFacebookProviderImpl = function(opt_post, opt_apply, opt_delete, opt_action, opt_location, opt_propertylist, opt_oauthProviderId, opt_oauthCloudConfigRoot, opt_providerConfigRoot, opt_providerConfigCreateTagsEnabled, opt_providerConfigUserFolder, opt_providerConfigFacebookFetchFields, opt_providerConfigFacebookFields, opt_providerConfigRefreshUserdataEnabled, opt_extraHttpRequestParams) {
  /** @const {string} */
  var path = this.basePath_ + '/system/console/configMgr/com.adobe.cq.social.connect.oauth.impl.FacebookProviderImpl';

  /** @type {!Object} */
  var queryParameters = {};

  /** @type {!Object} */
  var headerParams = angular.extend({}, this.defaultHeaders_);
  if (opt_post !== undefined) {
    queryParameters['post'] = opt_post;
  }

  if (opt_apply !== undefined) {
    queryParameters['apply'] = opt_apply;
  }

  if (opt_delete !== undefined) {
    queryParameters['delete'] = opt_delete;
  }

  if (opt_action !== undefined) {
    queryParameters['action'] = opt_action;
  }

  if (opt_location !== undefined) {
    queryParameters['$location'] = opt_location;
  }

  if (opt_propertylist !== undefined) {
    queryParameters['propertylist'] = opt_propertylist;
  }

  if (opt_oauthProviderId !== undefined) {
    queryParameters['oauth.provider.id'] = opt_oauthProviderId;
  }

  if (opt_oauthCloudConfigRoot !== undefined) {
    queryParameters['oauth.cloud.config.root'] = opt_oauthCloudConfigRoot;
  }

  if (opt_providerConfigRoot !== undefined) {
    queryParameters['provider.config.root'] = opt_providerConfigRoot;
  }

  if (opt_providerConfigCreateTagsEnabled !== undefined) {
    queryParameters['provider.config.create.tags.enabled'] = opt_providerConfigCreateTagsEnabled;
  }

  if (opt_providerConfigUserFolder !== undefined) {
    queryParameters['provider.config.user.folder'] = opt_providerConfigUserFolder;
  }

  if (opt_providerConfigFacebookFetchFields !== undefined) {
    queryParameters['provider.config.facebook.fetch.fields'] = opt_providerConfigFacebookFetchFields;
  }

  if (opt_providerConfigFacebookFields !== undefined) {
    queryParameters['provider.config.facebook.fields'] = opt_providerConfigFacebookFields;
  }

  if (opt_providerConfigRefreshUserdataEnabled !== undefined) {
    queryParameters['provider.config.refresh.userdata.enabled'] = opt_providerConfigRefreshUserdataEnabled;
  }

  /** @type {!Object} */
  var httpRequestParams = {
    method: 'POST',
    url: path,
    json: true,
            params: queryParameters,
    headers: headerParams
  };

  if (opt_extraHttpRequestParams) {
    httpRequestParams = angular.extend(httpRequestParams, opt_extraHttpRequestParams);
  }

  return (/** @type {?} */ (this.http_))(httpRequestParams);
}

/**
 * 
 * 
 * @param {!boolean=} opt_post 
 * @param {!boolean=} opt_apply 
 * @param {!boolean=} opt_delete 
 * @param {!string=} opt_action 
 * @param {!string=} opt_location 
 * @param {!Array<!string>=} opt_propertylist 
 * @param {!Array<!string>=} opt_path 
 * @param {!number=} opt_serviceRanking 
 * @param {!angular.$http.Config=} opt_extraHttpRequestParams Extra HTTP parameters to send.
 * @return {!angular.$q.Promise<!API.Client.comAdobeCqSocialConnectOauthImplSocialOAuthAuthenticationHandleInfo>}
 */
API.Client.ConfigmgrApi.prototype.comAdobeCqSocialConnectOauthImplSocialOAuthAuthenticationHandle = function(opt_post, opt_apply, opt_delete, opt_action, opt_location, opt_propertylist, opt_path, opt_serviceRanking, opt_extraHttpRequestParams) {
  /** @const {string} */
  var path = this.basePath_ + '/system/console/configMgr/com.adobe.cq.social.connect.oauth.impl.SocialOAuthAuthenticationHandler';

  /** @type {!Object} */
  var queryParameters = {};

  /** @type {!Object} */
  var headerParams = angular.extend({}, this.defaultHeaders_);
  if (opt_post !== undefined) {
    queryParameters['post'] = opt_post;
  }

  if (opt_apply !== undefined) {
    queryParameters['apply'] = opt_apply;
  }

  if (opt_delete !== undefined) {
    queryParameters['delete'] = opt_delete;
  }

  if (opt_action !== undefined) {
    queryParameters['action'] = opt_action;
  }

  if (opt_location !== undefined) {
    queryParameters['$location'] = opt_location;
  }

  if (opt_propertylist !== undefined) {
    queryParameters['propertylist'] = opt_propertylist;
  }

  if (opt_path !== undefined) {
    queryParameters['path'] = opt_path;
  }

  if (opt_serviceRanking !== undefined) {
    queryParameters['service.ranking'] = opt_serviceRanking;
  }

  /** @type {!Object} */
  var httpRequestParams = {
    method: 'POST',
    url: path,
    json: true,
            params: queryParameters,
    headers: headerParams
  };

  if (opt_extraHttpRequestParams) {
    httpRequestParams = angular.extend(httpRequestParams, opt_extraHttpRequestParams);
  }

  return (/** @type {?} */ (this.http_))(httpRequestParams);
}

/**
 * 
 * 
 * @param {!boolean=} opt_post 
 * @param {!boolean=} opt_apply 
 * @param {!boolean=} opt_delete 
 * @param {!string=} opt_action 
 * @param {!string=} opt_location 
 * @param {!Array<!string>=} opt_propertylist 
 * @param {!Array<!string>=} opt_facebook 
 * @param {!Array<!string>=} opt_twitter 
 * @param {!string=} opt_providerConfigUserFolder 
 * @param {!angular.$http.Config=} opt_extraHttpRequestParams Extra HTTP parameters to send.
 * @return {!angular.$q.Promise<!API.Client.comAdobeCqSocialConnectOauthImplSocialOAuthUserProfileMapperInfo>}
 */
API.Client.ConfigmgrApi.prototype.comAdobeCqSocialConnectOauthImplSocialOAuthUserProfileMapper = function(opt_post, opt_apply, opt_delete, opt_action, opt_location, opt_propertylist, opt_facebook, opt_twitter, opt_providerConfigUserFolder, opt_extraHttpRequestParams) {
  /** @const {string} */
  var path = this.basePath_ + '/system/console/configMgr/com.adobe.cq.social.connect.oauth.impl.SocialOAuthUserProfileMapper';

  /** @type {!Object} */
  var queryParameters = {};

  /** @type {!Object} */
  var headerParams = angular.extend({}, this.defaultHeaders_);
  if (opt_post !== undefined) {
    queryParameters['post'] = opt_post;
  }

  if (opt_apply !== undefined) {
    queryParameters['apply'] = opt_apply;
  }

  if (opt_delete !== undefined) {
    queryParameters['delete'] = opt_delete;
  }

  if (opt_action !== undefined) {
    queryParameters['action'] = opt_action;
  }

  if (opt_location !== undefined) {
    queryParameters['$location'] = opt_location;
  }

  if (opt_propertylist !== undefined) {
    queryParameters['propertylist'] = opt_propertylist;
  }

  if (opt_facebook !== undefined) {
    queryParameters['facebook'] = opt_facebook;
  }

  if (opt_twitter !== undefined) {
    queryParameters['twitter'] = opt_twitter;
  }

  if (opt_providerConfigUserFolder !== undefined) {
    queryParameters['provider.config.user.folder'] = opt_providerConfigUserFolder;
  }

  /** @type {!Object} */
  var httpRequestParams = {
    method: 'POST',
    url: path,
    json: true,
            params: queryParameters,
    headers: headerParams
  };

  if (opt_extraHttpRequestParams) {
    httpRequestParams = angular.extend(httpRequestParams, opt_extraHttpRequestParams);
  }

  return (/** @type {?} */ (this.http_))(httpRequestParams);
}

/**
 * 
 * 
 * @param {!boolean=} opt_post 
 * @param {!boolean=} opt_apply 
 * @param {!boolean=} opt_delete 
 * @param {!string=} opt_action 
 * @param {!string=} opt_location 
 * @param {!Array<!string>=} opt_propertylist 
 * @param {!string=} opt_oauthProviderId 
 * @param {!string=} opt_oauthCloudConfigRoot 
 * @param {!string=} opt_providerConfigRoot 
 * @param {!string=} opt_providerConfigUserFolder 
 * @param {!boolean=} opt_providerConfigTwitterEnableParams 
 * @param {!Array<!string>=} opt_providerConfigTwitterParams 
 * @param {!boolean=} opt_providerConfigRefreshUserdataEnabled 
 * @param {!angular.$http.Config=} opt_extraHttpRequestParams Extra HTTP parameters to send.
 * @return {!angular.$q.Promise<!API.Client.comAdobeCqSocialConnectOauthImplTwitterProviderImplInfo>}
 */
API.Client.ConfigmgrApi.prototype.comAdobeCqSocialConnectOauthImplTwitterProviderImpl = function(opt_post, opt_apply, opt_delete, opt_action, opt_location, opt_propertylist, opt_oauthProviderId, opt_oauthCloudConfigRoot, opt_providerConfigRoot, opt_providerConfigUserFolder, opt_providerConfigTwitterEnableParams, opt_providerConfigTwitterParams, opt_providerConfigRefreshUserdataEnabled, opt_extraHttpRequestParams) {
  /** @const {string} */
  var path = this.basePath_ + '/system/console/configMgr/com.adobe.cq.social.connect.oauth.impl.TwitterProviderImpl';

  /** @type {!Object} */
  var queryParameters = {};

  /** @type {!Object} */
  var headerParams = angular.extend({}, this.defaultHeaders_);
  if (opt_post !== undefined) {
    queryParameters['post'] = opt_post;
  }

  if (opt_apply !== undefined) {
    queryParameters['apply'] = opt_apply;
  }

  if (opt_delete !== undefined) {
    queryParameters['delete'] = opt_delete;
  }

  if (opt_action !== undefined) {
    queryParameters['action'] = opt_action;
  }

  if (opt_location !== undefined) {
    queryParameters['$location'] = opt_location;
  }

  if (opt_propertylist !== undefined) {
    queryParameters['propertylist'] = opt_propertylist;
  }

  if (opt_oauthProviderId !== undefined) {
    queryParameters['oauth.provider.id'] = opt_oauthProviderId;
  }

  if (opt_oauthCloudConfigRoot !== undefined) {
    queryParameters['oauth.cloud.config.root'] = opt_oauthCloudConfigRoot;
  }

  if (opt_providerConfigRoot !== undefined) {
    queryParameters['provider.config.root'] = opt_providerConfigRoot;
  }

  if (opt_providerConfigUserFolder !== undefined) {
    queryParameters['provider.config.user.folder'] = opt_providerConfigUserFolder;
  }

  if (opt_providerConfigTwitterEnableParams !== undefined) {
    queryParameters['provider.config.twitter.enable.params'] = opt_providerConfigTwitterEnableParams;
  }

  if (opt_providerConfigTwitterParams !== undefined) {
    queryParameters['provider.config.twitter.params'] = opt_providerConfigTwitterParams;
  }

  if (opt_providerConfigRefreshUserdataEnabled !== undefined) {
    queryParameters['provider.config.refresh.userdata.enabled'] = opt_providerConfigRefreshUserdataEnabled;
  }

  /** @type {!Object} */
  var httpRequestParams = {
    method: 'POST',
    url: path,
    json: true,
            params: queryParameters,
    headers: headerParams
  };

  if (opt_extraHttpRequestParams) {
    httpRequestParams = angular.extend(httpRequestParams, opt_extraHttpRequestParams);
  }

  return (/** @type {?} */ (this.http_))(httpRequestParams);
}

/**
 * 
 * 
 * @param {!boolean=} opt_post 
 * @param {!boolean=} opt_apply 
 * @param {!boolean=} opt_delete 
 * @param {!string=} opt_action 
 * @param {!string=} opt_location 
 * @param {!Array<!string>=} opt_propertylist 
 * @param {!boolean=} opt_cqSocialContentFragmentsServicesEnabled 
 * @param {!number=} opt_cqSocialContentFragmentsServicesWaitTimeSeconds 
 * @param {!angular.$http.Config=} opt_extraHttpRequestParams Extra HTTP parameters to send.
 * @return {!angular.$q.Promise<!API.Client.comAdobeCqSocialContentFragmentsServicesImplCommunitiesFragmenInfo>}
 */
API.Client.ConfigmgrApi.prototype.comAdobeCqSocialContentFragmentsServicesImplCommunitiesFragmen = function(opt_post, opt_apply, opt_delete, opt_action, opt_location, opt_propertylist, opt_cqSocialContentFragmentsServicesEnabled, opt_cqSocialContentFragmentsServicesWaitTimeSeconds, opt_extraHttpRequestParams) {
  /** @const {string} */
  var path = this.basePath_ + '/system/console/configMgr/com.adobe.cq.social.content.fragments.services.impl.CommunitiesFragmentCreationServiceImpl';

  /** @type {!Object} */
  var queryParameters = {};

  /** @type {!Object} */
  var headerParams = angular.extend({}, this.defaultHeaders_);
  if (opt_post !== undefined) {
    queryParameters['post'] = opt_post;
  }

  if (opt_apply !== undefined) {
    queryParameters['apply'] = opt_apply;
  }

  if (opt_delete !== undefined) {
    queryParameters['delete'] = opt_delete;
  }

  if (opt_action !== undefined) {
    queryParameters['action'] = opt_action;
  }

  if (opt_location !== undefined) {
    queryParameters['$location'] = opt_location;
  }

  if (opt_propertylist !== undefined) {
    queryParameters['propertylist'] = opt_propertylist;
  }

  if (opt_cqSocialContentFragmentsServicesEnabled !== undefined) {
    queryParameters['cq.social.content.fragments.services.enabled'] = opt_cqSocialContentFragmentsServicesEnabled;
  }

  if (opt_cqSocialContentFragmentsServicesWaitTimeSeconds !== undefined) {
    queryParameters['cq.social.content.fragments.services.waitTimeSeconds'] = opt_cqSocialContentFragmentsServicesWaitTimeSeconds;
  }

  /** @type {!Object} */
  var httpRequestParams = {
    method: 'POST',
    url: path,
    json: true,
            params: queryParameters,
    headers: headerParams
  };

  if (opt_extraHttpRequestParams) {
    httpRequestParams = angular.extend(httpRequestParams, opt_extraHttpRequestParams);
  }

  return (/** @type {?} */ (this.http_))(httpRequestParams);
}

/**
 * 
 * 
 * @param {!boolean=} opt_post 
 * @param {!boolean=} opt_apply 
 * @param {!boolean=} opt_delete 
 * @param {!string=} opt_action 
 * @param {!string=} opt_location 
 * @param {!Array<!string>=} opt_propertylist 
 * @param {!string=} opt_versionId 
 * @param {!boolean=} opt_cacheOn 
 * @param {!number=} opt_concurrencyLevel 
 * @param {!number=} opt_cacheStartSize 
 * @param {!number=} opt_cacheTtl 
 * @param {!number=} opt_cacheSize 
 * @param {!number=} opt_timeLimit 
 * @param {!angular.$http.Config=} opt_extraHttpRequestParams Extra HTTP parameters to send.
 * @return {!angular.$q.Promise<!API.Client.comAdobeCqSocialDatastoreAsImplASResourceProviderFactoryInfo>}
 */
API.Client.ConfigmgrApi.prototype.comAdobeCqSocialDatastoreAsImplASResourceProviderFactory = function(opt_post, opt_apply, opt_delete, opt_action, opt_location, opt_propertylist, opt_versionId, opt_cacheOn, opt_concurrencyLevel, opt_cacheStartSize, opt_cacheTtl, opt_cacheSize, opt_timeLimit, opt_extraHttpRequestParams) {
  /** @const {string} */
  var path = this.basePath_ + '/system/console/configMgr/com.adobe.cq.social.datastore.as.impl.ASResourceProviderFactory';

  /** @type {!Object} */
  var queryParameters = {};

  /** @type {!Object} */
  var headerParams = angular.extend({}, this.defaultHeaders_);
  if (opt_post !== undefined) {
    queryParameters['post'] = opt_post;
  }

  if (opt_apply !== undefined) {
    queryParameters['apply'] = opt_apply;
  }

  if (opt_delete !== undefined) {
    queryParameters['delete'] = opt_delete;
  }

  if (opt_action !== undefined) {
    queryParameters['action'] = opt_action;
  }

  if (opt_location !== undefined) {
    queryParameters['$location'] = opt_location;
  }

  if (opt_propertylist !== undefined) {
    queryParameters['propertylist'] = opt_propertylist;
  }

  if (opt_versionId !== undefined) {
    queryParameters['version.id'] = opt_versionId;
  }

  if (opt_cacheOn !== undefined) {
    queryParameters['cache.on'] = opt_cacheOn;
  }

  if (opt_concurrencyLevel !== undefined) {
    queryParameters['concurrency.level'] = opt_concurrencyLevel;
  }

  if (opt_cacheStartSize !== undefined) {
    queryParameters['cache.start.size'] = opt_cacheStartSize;
  }

  if (opt_cacheTtl !== undefined) {
    queryParameters['cache.ttl'] = opt_cacheTtl;
  }

  if (opt_cacheSize !== undefined) {
    queryParameters['cache.size'] = opt_cacheSize;
  }

  if (opt_timeLimit !== undefined) {
    queryParameters['time.limit'] = opt_timeLimit;
  }

  /** @type {!Object} */
  var httpRequestParams = {
    method: 'POST',
    url: path,
    json: true,
            params: queryParameters,
    headers: headerParams
  };

  if (opt_extraHttpRequestParams) {
    httpRequestParams = angular.extend(httpRequestParams, opt_extraHttpRequestParams);
  }

  return (/** @type {?} */ (this.http_))(httpRequestParams);
}

/**
 * 
 * 
 * @param {!boolean=} opt_post 
 * @param {!boolean=} opt_apply 
 * @param {!boolean=} opt_delete 
 * @param {!string=} opt_action 
 * @param {!string=} opt_location 
 * @param {!Array<!string>=} opt_propertylist 
 * @param {!string=} opt_solrZkTimeout 
 * @param {!string=} opt_solrCommit 
 * @param {!boolean=} opt_cacheOn 
 * @param {!number=} opt_concurrencyLevel 
 * @param {!number=} opt_cacheStartSize 
 * @param {!number=} opt_cacheTtl 
 * @param {!number=} opt_cacheSize 
 * @param {!angular.$http.Config=} opt_extraHttpRequestParams Extra HTTP parameters to send.
 * @return {!angular.$q.Promise<!API.Client.comAdobeCqSocialDatastoreOpImplSocialMSResourceProviderFactoryInfo>}
 */
API.Client.ConfigmgrApi.prototype.comAdobeCqSocialDatastoreOpImplSocialMSResourceProviderFactory = function(opt_post, opt_apply, opt_delete, opt_action, opt_location, opt_propertylist, opt_solrZkTimeout, opt_solrCommit, opt_cacheOn, opt_concurrencyLevel, opt_cacheStartSize, opt_cacheTtl, opt_cacheSize, opt_extraHttpRequestParams) {
  /** @const {string} */
  var path = this.basePath_ + '/system/console/configMgr/com.adobe.cq.social.datastore.op.impl.SocialMSResourceProviderFactory';

  /** @type {!Object} */
  var queryParameters = {};

  /** @type {!Object} */
  var headerParams = angular.extend({}, this.defaultHeaders_);
  if (opt_post !== undefined) {
    queryParameters['post'] = opt_post;
  }

  if (opt_apply !== undefined) {
    queryParameters['apply'] = opt_apply;
  }

  if (opt_delete !== undefined) {
    queryParameters['delete'] = opt_delete;
  }

  if (opt_action !== undefined) {
    queryParameters['action'] = opt_action;
  }

  if (opt_location !== undefined) {
    queryParameters['$location'] = opt_location;
  }

  if (opt_propertylist !== undefined) {
    queryParameters['propertylist'] = opt_propertylist;
  }

  if (opt_solrZkTimeout !== undefined) {
    queryParameters['solr.zk.timeout'] = opt_solrZkTimeout;
  }

  if (opt_solrCommit !== undefined) {
    queryParameters['solr.commit'] = opt_solrCommit;
  }

  if (opt_cacheOn !== undefined) {
    queryParameters['cache.on'] = opt_cacheOn;
  }

  if (opt_concurrencyLevel !== undefined) {
    queryParameters['concurrency.level'] = opt_concurrencyLevel;
  }

  if (opt_cacheStartSize !== undefined) {
    queryParameters['cache.start.size'] = opt_cacheStartSize;
  }

  if (opt_cacheTtl !== undefined) {
    queryParameters['cache.ttl'] = opt_cacheTtl;
  }

  if (opt_cacheSize !== undefined) {
    queryParameters['cache.size'] = opt_cacheSize;
  }

  /** @type {!Object} */
  var httpRequestParams = {
    method: 'POST',
    url: path,
    json: true,
            params: queryParameters,
    headers: headerParams
  };

  if (opt_extraHttpRequestParams) {
    httpRequestParams = angular.extend(httpRequestParams, opt_extraHttpRequestParams);
  }

  return (/** @type {?} */ (this.http_))(httpRequestParams);
}

/**
 * 
 * 
 * @param {!boolean=} opt_post 
 * @param {!boolean=} opt_apply 
 * @param {!boolean=} opt_delete 
 * @param {!string=} opt_action 
 * @param {!string=} opt_location 
 * @param {!Array<!string>=} opt_propertylist 
 * @param {!string=} opt_solrZkTimeout 
 * @param {!string=} opt_solrCommit 
 * @param {!boolean=} opt_cacheOn 
 * @param {!number=} opt_concurrencyLevel 
 * @param {!number=} opt_cacheStartSize 
 * @param {!number=} opt_cacheTtl 
 * @param {!number=} opt_cacheSize 
 * @param {!angular.$http.Config=} opt_extraHttpRequestParams Extra HTTP parameters to send.
 * @return {!angular.$q.Promise<!API.Client.comAdobeCqSocialDatastoreRdbImplSocialRDBResourceProviderFactorInfo>}
 */
API.Client.ConfigmgrApi.prototype.comAdobeCqSocialDatastoreRdbImplSocialRDBResourceProviderFactor = function(opt_post, opt_apply, opt_delete, opt_action, opt_location, opt_propertylist, opt_solrZkTimeout, opt_solrCommit, opt_cacheOn, opt_concurrencyLevel, opt_cacheStartSize, opt_cacheTtl, opt_cacheSize, opt_extraHttpRequestParams) {
  /** @const {string} */
  var path = this.basePath_ + '/system/console/configMgr/com.adobe.cq.social.datastore.rdb.impl.SocialRDBResourceProviderFactory';

  /** @type {!Object} */
  var queryParameters = {};

  /** @type {!Object} */
  var headerParams = angular.extend({}, this.defaultHeaders_);
  if (opt_post !== undefined) {
    queryParameters['post'] = opt_post;
  }

  if (opt_apply !== undefined) {
    queryParameters['apply'] = opt_apply;
  }

  if (opt_delete !== undefined) {
    queryParameters['delete'] = opt_delete;
  }

  if (opt_action !== undefined) {
    queryParameters['action'] = opt_action;
  }

  if (opt_location !== undefined) {
    queryParameters['$location'] = opt_location;
  }

  if (opt_propertylist !== undefined) {
    queryParameters['propertylist'] = opt_propertylist;
  }

  if (opt_solrZkTimeout !== undefined) {
    queryParameters['solr.zk.timeout'] = opt_solrZkTimeout;
  }

  if (opt_solrCommit !== undefined) {
    queryParameters['solr.commit'] = opt_solrCommit;
  }

  if (opt_cacheOn !== undefined) {
    queryParameters['cache.on'] = opt_cacheOn;
  }

  if (opt_concurrencyLevel !== undefined) {
    queryParameters['concurrency.level'] = opt_concurrencyLevel;
  }

  if (opt_cacheStartSize !== undefined) {
    queryParameters['cache.start.size'] = opt_cacheStartSize;
  }

  if (opt_cacheTtl !== undefined) {
    queryParameters['cache.ttl'] = opt_cacheTtl;
  }

  if (opt_cacheSize !== undefined) {
    queryParameters['cache.size'] = opt_cacheSize;
  }

  /** @type {!Object} */
  var httpRequestParams = {
    method: 'POST',
    url: path,
    json: true,
            params: queryParameters,
    headers: headerParams
  };

  if (opt_extraHttpRequestParams) {
    httpRequestParams = angular.extend(httpRequestParams, opt_extraHttpRequestParams);
  }

  return (/** @type {?} */ (this.http_))(httpRequestParams);
}

/**
 * 
 * 
 * @param {!boolean=} opt_post 
 * @param {!boolean=} opt_apply 
 * @param {!boolean=} opt_delete 
 * @param {!string=} opt_action 
 * @param {!string=} opt_location 
 * @param {!Array<!string>=} opt_propertylist 
 * @param {!boolean=} opt_isMemberCheck 
 * @param {!angular.$http.Config=} opt_extraHttpRequestParams Extra HTTP parameters to send.
 * @return {!angular.$q.Promise<!API.Client.comAdobeCqSocialEnablementAdaptorsEnablementLearningPathAdaptorFInfo>}
 */
API.Client.ConfigmgrApi.prototype.comAdobeCqSocialEnablementAdaptorsEnablementLearningPathAdaptorF = function(opt_post, opt_apply, opt_delete, opt_action, opt_location, opt_propertylist, opt_isMemberCheck, opt_extraHttpRequestParams) {
  /** @const {string} */
  var path = this.basePath_ + '/system/console/configMgr/com.adobe.cq.social.enablement.adaptors.EnablementLearningPathAdaptorFactory';

  /** @type {!Object} */
  var queryParameters = {};

  /** @type {!Object} */
  var headerParams = angular.extend({}, this.defaultHeaders_);
  if (opt_post !== undefined) {
    queryParameters['post'] = opt_post;
  }

  if (opt_apply !== undefined) {
    queryParameters['apply'] = opt_apply;
  }

  if (opt_delete !== undefined) {
    queryParameters['delete'] = opt_delete;
  }

  if (opt_action !== undefined) {
    queryParameters['action'] = opt_action;
  }

  if (opt_location !== undefined) {
    queryParameters['$location'] = opt_location;
  }

  if (opt_propertylist !== undefined) {
    queryParameters['propertylist'] = opt_propertylist;
  }

  if (opt_isMemberCheck !== undefined) {
    queryParameters['isMemberCheck'] = opt_isMemberCheck;
  }

  /** @type {!Object} */
  var httpRequestParams = {
    method: 'POST',
    url: path,
    json: true,
            params: queryParameters,
    headers: headerParams
  };

  if (opt_extraHttpRequestParams) {
    httpRequestParams = angular.extend(httpRequestParams, opt_extraHttpRequestParams);
  }

  return (/** @type {?} */ (this.http_))(httpRequestParams);
}

/**
 * 
 * 
 * @param {!boolean=} opt_post 
 * @param {!boolean=} opt_apply 
 * @param {!boolean=} opt_delete 
 * @param {!string=} opt_action 
 * @param {!string=} opt_location 
 * @param {!Array<!string>=} opt_propertylist 
 * @param {!boolean=} opt_isMemberCheck 
 * @param {!angular.$http.Config=} opt_extraHttpRequestParams Extra HTTP parameters to send.
 * @return {!angular.$q.Promise<!API.Client.comAdobeCqSocialEnablementAdaptorsEnablementResourceAdaptorFactoInfo>}
 */
API.Client.ConfigmgrApi.prototype.comAdobeCqSocialEnablementAdaptorsEnablementResourceAdaptorFacto = function(opt_post, opt_apply, opt_delete, opt_action, opt_location, opt_propertylist, opt_isMemberCheck, opt_extraHttpRequestParams) {
  /** @const {string} */
  var path = this.basePath_ + '/system/console/configMgr/com.adobe.cq.social.enablement.adaptors.EnablementResourceAdaptorFactory';

  /** @type {!Object} */
  var queryParameters = {};

  /** @type {!Object} */
  var headerParams = angular.extend({}, this.defaultHeaders_);
  if (opt_post !== undefined) {
    queryParameters['post'] = opt_post;
  }

  if (opt_apply !== undefined) {
    queryParameters['apply'] = opt_apply;
  }

  if (opt_delete !== undefined) {
    queryParameters['delete'] = opt_delete;
  }

  if (opt_action !== undefined) {
    queryParameters['action'] = opt_action;
  }

  if (opt_location !== undefined) {
    queryParameters['$location'] = opt_location;
  }

  if (opt_propertylist !== undefined) {
    queryParameters['propertylist'] = opt_propertylist;
  }

  if (opt_isMemberCheck !== undefined) {
    queryParameters['isMemberCheck'] = opt_isMemberCheck;
  }

  /** @type {!Object} */
  var httpRequestParams = {
    method: 'POST',
    url: path,
    json: true,
            params: queryParameters,
    headers: headerParams
  };

  if (opt_extraHttpRequestParams) {
    httpRequestParams = angular.extend(httpRequestParams, opt_extraHttpRequestParams);
  }

  return (/** @type {?} */ (this.http_))(httpRequestParams);
}

/**
 * 
 * 
 * @param {!boolean=} opt_post 
 * @param {!boolean=} opt_apply 
 * @param {!boolean=} opt_delete 
 * @param {!string=} opt_action 
 * @param {!string=} opt_location 
 * @param {!Array<!string>=} opt_propertylist 
 * @param {!Array<!string>=} opt_fieldWhitelist 
 * @param {!angular.$http.Config=} opt_extraHttpRequestParams Extra HTTP parameters to send.
 * @return {!angular.$q.Promise<!API.Client.comAdobeCqSocialEnablementLearningpathEndpointsImplEnablementLInfo>}
 */
API.Client.ConfigmgrApi.prototype.comAdobeCqSocialEnablementLearningpathEndpointsImplEnablementL = function(opt_post, opt_apply, opt_delete, opt_action, opt_location, opt_propertylist, opt_fieldWhitelist, opt_extraHttpRequestParams) {
  /** @const {string} */
  var path = this.basePath_ + '/system/console/configMgr/com.adobe.cq.social.enablement.learningpath.endpoints.impl.EnablementLearningPathModelOperationService';

  /** @type {!Object} */
  var queryParameters = {};

  /** @type {!Object} */
  var headerParams = angular.extend({}, this.defaultHeaders_);
  if (opt_post !== undefined) {
    queryParameters['post'] = opt_post;
  }

  if (opt_apply !== undefined) {
    queryParameters['apply'] = opt_apply;
  }

  if (opt_delete !== undefined) {
    queryParameters['delete'] = opt_delete;
  }

  if (opt_action !== undefined) {
    queryParameters['action'] = opt_action;
  }

  if (opt_location !== undefined) {
    queryParameters['$location'] = opt_location;
  }

  if (opt_propertylist !== undefined) {
    queryParameters['propertylist'] = opt_propertylist;
  }

  if (opt_fieldWhitelist !== undefined) {
    queryParameters['fieldWhitelist'] = opt_fieldWhitelist;
  }

  /** @type {!Object} */
  var httpRequestParams = {
    method: 'POST',
    url: path,
    json: true,
            params: queryParameters,
    headers: headerParams
  };

  if (opt_extraHttpRequestParams) {
    httpRequestParams = angular.extend(httpRequestParams, opt_extraHttpRequestParams);
  }

  return (/** @type {?} */ (this.http_))(httpRequestParams);
}

/**
 * 
 * 
 * @param {!boolean=} opt_post 
 * @param {!boolean=} opt_apply 
 * @param {!boolean=} opt_delete 
 * @param {!string=} opt_action 
 * @param {!string=} opt_location 
 * @param {!Array<!string>=} opt_propertylist 
 * @param {!Array<!string>=} opt_fieldWhitelist 
 * @param {!angular.$http.Config=} opt_extraHttpRequestParams Extra HTTP parameters to send.
 * @return {!angular.$q.Promise<!API.Client.comAdobeCqSocialEnablementResourceEndpointsImplEnablementResouInfo>}
 */
API.Client.ConfigmgrApi.prototype.comAdobeCqSocialEnablementResourceEndpointsImplEnablementResou = function(opt_post, opt_apply, opt_delete, opt_action, opt_location, opt_propertylist, opt_fieldWhitelist, opt_extraHttpRequestParams) {
  /** @const {string} */
  var path = this.basePath_ + '/system/console/configMgr/com.adobe.cq.social.enablement.resource.endpoints.impl.EnablementResourceModelOperationService';

  /** @type {!Object} */
  var queryParameters = {};

  /** @type {!Object} */
  var headerParams = angular.extend({}, this.defaultHeaders_);
  if (opt_post !== undefined) {
    queryParameters['post'] = opt_post;
  }

  if (opt_apply !== undefined) {
    queryParameters['apply'] = opt_apply;
  }

  if (opt_delete !== undefined) {
    queryParameters['delete'] = opt_delete;
  }

  if (opt_action !== undefined) {
    queryParameters['action'] = opt_action;
  }

  if (opt_location !== undefined) {
    queryParameters['$location'] = opt_location;
  }

  if (opt_propertylist !== undefined) {
    queryParameters['propertylist'] = opt_propertylist;
  }

  if (opt_fieldWhitelist !== undefined) {
    queryParameters['fieldWhitelist'] = opt_fieldWhitelist;
  }

  /** @type {!Object} */
  var httpRequestParams = {
    method: 'POST',
    url: path,
    json: true,
            params: queryParameters,
    headers: headerParams
  };

  if (opt_extraHttpRequestParams) {
    httpRequestParams = angular.extend(httpRequestParams, opt_extraHttpRequestParams);
  }

  return (/** @type {?} */ (this.http_))(httpRequestParams);
}

/**
 * 
 * 
 * @param {!boolean=} opt_post 
 * @param {!boolean=} opt_apply 
 * @param {!boolean=} opt_delete 
 * @param {!string=} opt_action 
 * @param {!string=} opt_location 
 * @param {!Array<!string>=} opt_propertylist 
 * @param {!number=} opt_serviceRanking 
 * @param {!angular.$http.Config=} opt_extraHttpRequestParams Extra HTTP parameters to send.
 * @return {!angular.$q.Promise<!API.Client.comAdobeCqSocialEnablementServicesImplAuthorMarkerImplInfo>}
 */
API.Client.ConfigmgrApi.prototype.comAdobeCqSocialEnablementServicesImplAuthorMarkerImpl = function(opt_post, opt_apply, opt_delete, opt_action, opt_location, opt_propertylist, opt_serviceRanking, opt_extraHttpRequestParams) {
  /** @const {string} */
  var path = this.basePath_ + '/system/console/configMgr/com.adobe.cq.social.enablement.services.impl.AuthorMarkerImpl';

  /** @type {!Object} */
  var queryParameters = {};

  /** @type {!Object} */
  var headerParams = angular.extend({}, this.defaultHeaders_);
  if (opt_post !== undefined) {
    queryParameters['post'] = opt_post;
  }

  if (opt_apply !== undefined) {
    queryParameters['apply'] = opt_apply;
  }

  if (opt_delete !== undefined) {
    queryParameters['delete'] = opt_delete;
  }

  if (opt_action !== undefined) {
    queryParameters['action'] = opt_action;
  }

  if (opt_location !== undefined) {
    queryParameters['$location'] = opt_location;
  }

  if (opt_propertylist !== undefined) {
    queryParameters['propertylist'] = opt_propertylist;
  }

  if (opt_serviceRanking !== undefined) {
    queryParameters['service.ranking'] = opt_serviceRanking;
  }

  /** @type {!Object} */
  var httpRequestParams = {
    method: 'POST',
    url: path,
    json: true,
            params: queryParameters,
    headers: headerParams
  };

  if (opt_extraHttpRequestParams) {
    httpRequestParams = angular.extend(httpRequestParams, opt_extraHttpRequestParams);
  }

  return (/** @type {?} */ (this.http_))(httpRequestParams);
}

/**
 * 
 * 
 * @param {!boolean=} opt_post 
 * @param {!boolean=} opt_apply 
 * @param {!boolean=} opt_delete 
 * @param {!string=} opt_action 
 * @param {!string=} opt_location 
 * @param {!Array<!string>=} opt_propertylist 
 * @param {!string=} opt_slingServletSelectors 
 * @param {!string=} opt_slingServletExtensions 
 * @param {!angular.$http.Config=} opt_extraHttpRequestParams Extra HTTP parameters to send.
 * @return {!angular.$q.Promise<!API.Client.comAdobeCqSocialFilelibraryClientEndpointsFilelibraryDownloadGeInfo>}
 */
API.Client.ConfigmgrApi.prototype.comAdobeCqSocialFilelibraryClientEndpointsFilelibraryDownloadGe = function(opt_post, opt_apply, opt_delete, opt_action, opt_location, opt_propertylist, opt_slingServletSelectors, opt_slingServletExtensions, opt_extraHttpRequestParams) {
  /** @const {string} */
  var path = this.basePath_ + '/system/console/configMgr/com.adobe.cq.social.filelibrary.client.endpoints.FilelibraryDownloadGetServlet';

  /** @type {!Object} */
  var queryParameters = {};

  /** @type {!Object} */
  var headerParams = angular.extend({}, this.defaultHeaders_);
  if (opt_post !== undefined) {
    queryParameters['post'] = opt_post;
  }

  if (opt_apply !== undefined) {
    queryParameters['apply'] = opt_apply;
  }

  if (opt_delete !== undefined) {
    queryParameters['delete'] = opt_delete;
  }

  if (opt_action !== undefined) {
    queryParameters['action'] = opt_action;
  }

  if (opt_location !== undefined) {
    queryParameters['$location'] = opt_location;
  }

  if (opt_propertylist !== undefined) {
    queryParameters['propertylist'] = opt_propertylist;
  }

  if (opt_slingServletSelectors !== undefined) {
    queryParameters['sling.servlet.selectors'] = opt_slingServletSelectors;
  }

  if (opt_slingServletExtensions !== undefined) {
    queryParameters['sling.servlet.extensions'] = opt_slingServletExtensions;
  }

  /** @type {!Object} */
  var httpRequestParams = {
    method: 'POST',
    url: path,
    json: true,
            params: queryParameters,
    headers: headerParams
  };

  if (opt_extraHttpRequestParams) {
    httpRequestParams = angular.extend(httpRequestParams, opt_extraHttpRequestParams);
  }

  return (/** @type {?} */ (this.http_))(httpRequestParams);
}

/**
 * 
 * 
 * @param {!boolean=} opt_post 
 * @param {!boolean=} opt_apply 
 * @param {!boolean=} opt_delete 
 * @param {!string=} opt_action 
 * @param {!string=} opt_location 
 * @param {!Array<!string>=} opt_propertylist 
 * @param {!Array<!string>=} opt_fieldWhitelist 
 * @param {!Array<!string>=} opt_attachmentTypeBlacklist 
 * @param {!angular.$http.Config=} opt_extraHttpRequestParams Extra HTTP parameters to send.
 * @return {!angular.$q.Promise<!API.Client.comAdobeCqSocialFilelibraryClientEndpointsImplFileLibraryOperaInfo>}
 */
API.Client.ConfigmgrApi.prototype.comAdobeCqSocialFilelibraryClientEndpointsImplFileLibraryOpera = function(opt_post, opt_apply, opt_delete, opt_action, opt_location, opt_propertylist, opt_fieldWhitelist, opt_attachmentTypeBlacklist, opt_extraHttpRequestParams) {
  /** @const {string} */
  var path = this.basePath_ + '/system/console/configMgr/com.adobe.cq.social.filelibrary.client.endpoints.impl.FileLibraryOperationsService';

  /** @type {!Object} */
  var queryParameters = {};

  /** @type {!Object} */
  var headerParams = angular.extend({}, this.defaultHeaders_);
  if (opt_post !== undefined) {
    queryParameters['post'] = opt_post;
  }

  if (opt_apply !== undefined) {
    queryParameters['apply'] = opt_apply;
  }

  if (opt_delete !== undefined) {
    queryParameters['delete'] = opt_delete;
  }

  if (opt_action !== undefined) {
    queryParameters['action'] = opt_action;
  }

  if (opt_location !== undefined) {
    queryParameters['$location'] = opt_location;
  }

  if (opt_propertylist !== undefined) {
    queryParameters['propertylist'] = opt_propertylist;
  }

  if (opt_fieldWhitelist !== undefined) {
    queryParameters['fieldWhitelist'] = opt_fieldWhitelist;
  }

  if (opt_attachmentTypeBlacklist !== undefined) {
    queryParameters['attachmentTypeBlacklist'] = opt_attachmentTypeBlacklist;
  }

  /** @type {!Object} */
  var httpRequestParams = {
    method: 'POST',
    url: path,
    json: true,
            params: queryParameters,
    headers: headerParams
  };

  if (opt_extraHttpRequestParams) {
    httpRequestParams = angular.extend(httpRequestParams, opt_extraHttpRequestParams);
  }

  return (/** @type {?} */ (this.http_))(httpRequestParams);
}

/**
 * 
 * 
 * @param {!boolean=} opt_post 
 * @param {!boolean=} opt_apply 
 * @param {!boolean=} opt_delete 
 * @param {!string=} opt_action 
 * @param {!string=} opt_location 
 * @param {!Array<!string>=} opt_propertylist 
 * @param {!Array<!string>=} opt_fieldWhitelist 
 * @param {!Array<!string>=} opt_attachmentTypeBlacklist 
 * @param {!angular.$http.Config=} opt_extraHttpRequestParams Extra HTTP parameters to send.
 * @return {!angular.$q.Promise<!API.Client.comAdobeCqSocialForumClientEndpointsImplForumOperationsServiceInfo>}
 */
API.Client.ConfigmgrApi.prototype.comAdobeCqSocialForumClientEndpointsImplForumOperationsService = function(opt_post, opt_apply, opt_delete, opt_action, opt_location, opt_propertylist, opt_fieldWhitelist, opt_attachmentTypeBlacklist, opt_extraHttpRequestParams) {
  /** @const {string} */
  var path = this.basePath_ + '/system/console/configMgr/com.adobe.cq.social.forum.client.endpoints.impl.ForumOperationsService';

  /** @type {!Object} */
  var queryParameters = {};

  /** @type {!Object} */
  var headerParams = angular.extend({}, this.defaultHeaders_);
  if (opt_post !== undefined) {
    queryParameters['post'] = opt_post;
  }

  if (opt_apply !== undefined) {
    queryParameters['apply'] = opt_apply;
  }

  if (opt_delete !== undefined) {
    queryParameters['delete'] = opt_delete;
  }

  if (opt_action !== undefined) {
    queryParameters['action'] = opt_action;
  }

  if (opt_location !== undefined) {
    queryParameters['$location'] = opt_location;
  }

  if (opt_propertylist !== undefined) {
    queryParameters['propertylist'] = opt_propertylist;
  }

  if (opt_fieldWhitelist !== undefined) {
    queryParameters['fieldWhitelist'] = opt_fieldWhitelist;
  }

  if (opt_attachmentTypeBlacklist !== undefined) {
    queryParameters['attachmentTypeBlacklist'] = opt_attachmentTypeBlacklist;
  }

  /** @type {!Object} */
  var httpRequestParams = {
    method: 'POST',
    url: path,
    json: true,
            params: queryParameters,
    headers: headerParams
  };

  if (opt_extraHttpRequestParams) {
    httpRequestParams = angular.extend(httpRequestParams, opt_extraHttpRequestParams);
  }

  return (/** @type {?} */ (this.http_))(httpRequestParams);
}

/**
 * 
 * 
 * @param {!boolean=} opt_post 
 * @param {!boolean=} opt_apply 
 * @param {!boolean=} opt_delete 
 * @param {!string=} opt_action 
 * @param {!string=} opt_location 
 * @param {!Array<!string>=} opt_propertylist 
 * @param {!number=} opt_extensionOrder 
 * @param {!boolean=} opt_flushForumontopic 
 * @param {!angular.$http.Config=} opt_extraHttpRequestParams Extra HTTP parameters to send.
 * @return {!angular.$q.Promise<!API.Client.comAdobeCqSocialForumDispatcherImplFlushOperationsInfo>}
 */
API.Client.ConfigmgrApi.prototype.comAdobeCqSocialForumDispatcherImplFlushOperations = function(opt_post, opt_apply, opt_delete, opt_action, opt_location, opt_propertylist, opt_extensionOrder, opt_flushForumontopic, opt_extraHttpRequestParams) {
  /** @const {string} */
  var path = this.basePath_ + '/system/console/configMgr/com.adobe.cq.social.forum.dispatcher.impl.FlushOperations';

  /** @type {!Object} */
  var queryParameters = {};

  /** @type {!Object} */
  var headerParams = angular.extend({}, this.defaultHeaders_);
  if (opt_post !== undefined) {
    queryParameters['post'] = opt_post;
  }

  if (opt_apply !== undefined) {
    queryParameters['apply'] = opt_apply;
  }

  if (opt_delete !== undefined) {
    queryParameters['delete'] = opt_delete;
  }

  if (opt_action !== undefined) {
    queryParameters['action'] = opt_action;
  }

  if (opt_location !== undefined) {
    queryParameters['$location'] = opt_location;
  }

  if (opt_propertylist !== undefined) {
    queryParameters['propertylist'] = opt_propertylist;
  }

  if (opt_extensionOrder !== undefined) {
    queryParameters['extension.order'] = opt_extensionOrder;
  }

  if (opt_flushForumontopic !== undefined) {
    queryParameters['flush.forumontopic'] = opt_flushForumontopic;
  }

  /** @type {!Object} */
  var httpRequestParams = {
    method: 'POST',
    url: path,
    json: true,
            params: queryParameters,
    headers: headerParams
  };

  if (opt_extraHttpRequestParams) {
    httpRequestParams = angular.extend(httpRequestParams, opt_extraHttpRequestParams);
  }

  return (/** @type {?} */ (this.http_))(httpRequestParams);
}

/**
 * 
 * 
 * @param {!boolean=} opt_post 
 * @param {!boolean=} opt_apply 
 * @param {!boolean=} opt_delete 
 * @param {!string=} opt_action 
 * @param {!string=} opt_location 
 * @param {!Array<!string>=} opt_propertylist 
 * @param {!boolean=} opt_groupListingPaginationEnable 
 * @param {!boolean=} opt_groupListingLazyloadingEnable 
 * @param {!number=} opt_pageSize 
 * @param {!number=} opt_priority 
 * @param {!angular.$http.Config=} opt_extraHttpRequestParams Extra HTTP parameters to send.
 * @return {!angular.$q.Promise<!API.Client.comAdobeCqSocialGroupClientImplCommunityGroupCollectionComponenInfo>}
 */
API.Client.ConfigmgrApi.prototype.comAdobeCqSocialGroupClientImplCommunityGroupCollectionComponen = function(opt_post, opt_apply, opt_delete, opt_action, opt_location, opt_propertylist, opt_groupListingPaginationEnable, opt_groupListingLazyloadingEnable, opt_pageSize, opt_priority, opt_extraHttpRequestParams) {
  /** @const {string} */
  var path = this.basePath_ + '/system/console/configMgr/com.adobe.cq.social.group.client.impl.CommunityGroupCollectionComponentFactory';

  /** @type {!Object} */
  var queryParameters = {};

  /** @type {!Object} */
  var headerParams = angular.extend({}, this.defaultHeaders_);
  if (opt_post !== undefined) {
    queryParameters['post'] = opt_post;
  }

  if (opt_apply !== undefined) {
    queryParameters['apply'] = opt_apply;
  }

  if (opt_delete !== undefined) {
    queryParameters['delete'] = opt_delete;
  }

  if (opt_action !== undefined) {
    queryParameters['action'] = opt_action;
  }

  if (opt_location !== undefined) {
    queryParameters['$location'] = opt_location;
  }

  if (opt_propertylist !== undefined) {
    queryParameters['propertylist'] = opt_propertylist;
  }

  if (opt_groupListingPaginationEnable !== undefined) {
    queryParameters['group.listing.pagination.enable'] = opt_groupListingPaginationEnable;
  }

  if (opt_groupListingLazyloadingEnable !== undefined) {
    queryParameters['group.listing.lazyloading.enable'] = opt_groupListingLazyloadingEnable;
  }

  if (opt_pageSize !== undefined) {
    queryParameters['page.size'] = opt_pageSize;
  }

  if (opt_priority !== undefined) {
    queryParameters['priority'] = opt_priority;
  }

  /** @type {!Object} */
  var httpRequestParams = {
    method: 'POST',
    url: path,
    json: true,
            params: queryParameters,
    headers: headerParams
  };

  if (opt_extraHttpRequestParams) {
    httpRequestParams = angular.extend(httpRequestParams, opt_extraHttpRequestParams);
  }

  return (/** @type {?} */ (this.http_))(httpRequestParams);
}

/**
 * 
 * 
 * @param {!boolean=} opt_post 
 * @param {!boolean=} opt_apply 
 * @param {!boolean=} opt_delete 
 * @param {!string=} opt_action 
 * @param {!string=} opt_location 
 * @param {!Array<!string>=} opt_propertylist 
 * @param {!number=} opt_maxWaitTime 
 * @param {!number=} opt_minWaitBetweenRetries 
 * @param {!angular.$http.Config=} opt_extraHttpRequestParams Extra HTTP parameters to send.
 * @return {!angular.$q.Promise<!API.Client.comAdobeCqSocialGroupImplGroupServiceImplInfo>}
 */
API.Client.ConfigmgrApi.prototype.comAdobeCqSocialGroupImplGroupServiceImpl = function(opt_post, opt_apply, opt_delete, opt_action, opt_location, opt_propertylist, opt_maxWaitTime, opt_minWaitBetweenRetries, opt_extraHttpRequestParams) {
  /** @const {string} */
  var path = this.basePath_ + '/system/console/configMgr/com.adobe.cq.social.group.impl.GroupServiceImpl';

  /** @type {!Object} */
  var queryParameters = {};

  /** @type {!Object} */
  var headerParams = angular.extend({}, this.defaultHeaders_);
  if (opt_post !== undefined) {
    queryParameters['post'] = opt_post;
  }

  if (opt_apply !== undefined) {
    queryParameters['apply'] = opt_apply;
  }

  if (opt_delete !== undefined) {
    queryParameters['delete'] = opt_delete;
  }

  if (opt_action !== undefined) {
    queryParameters['action'] = opt_action;
  }

  if (opt_location !== undefined) {
    queryParameters['$location'] = opt_location;
  }

  if (opt_propertylist !== undefined) {
    queryParameters['propertylist'] = opt_propertylist;
  }

  if (opt_maxWaitTime !== undefined) {
    queryParameters['maxWaitTime'] = opt_maxWaitTime;
  }

  if (opt_minWaitBetweenRetries !== undefined) {
    queryParameters['minWaitBetweenRetries'] = opt_minWaitBetweenRetries;
  }

  /** @type {!Object} */
  var httpRequestParams = {
    method: 'POST',
    url: path,
    json: true,
            params: queryParameters,
    headers: headerParams
  };

  if (opt_extraHttpRequestParams) {
    httpRequestParams = angular.extend(httpRequestParams, opt_extraHttpRequestParams);
  }

  return (/** @type {?} */ (this.http_))(httpRequestParams);
}

/**
 * 
 * 
 * @param {!boolean=} opt_post 
 * @param {!boolean=} opt_apply 
 * @param {!boolean=} opt_delete 
 * @param {!string=} opt_action 
 * @param {!string=} opt_location 
 * @param {!Array<!string>=} opt_propertylist 
 * @param {!boolean=} opt_parameterGuavaCacheEnabled 
 * @param {!string=} opt_parameterGuavaCacheParams 
 * @param {!boolean=} opt_parameterGuavaCacheReload 
 * @param {!number=} opt_serviceRanking 
 * @param {!angular.$http.Config=} opt_extraHttpRequestParams Extra HTTP parameters to send.
 * @return {!angular.$q.Promise<!API.Client.comAdobeCqSocialHandlebarsGuavaTemplateCacheImplInfo>}
 */
API.Client.ConfigmgrApi.prototype.comAdobeCqSocialHandlebarsGuavaTemplateCacheImpl = function(opt_post, opt_apply, opt_delete, opt_action, opt_location, opt_propertylist, opt_parameterGuavaCacheEnabled, opt_parameterGuavaCacheParams, opt_parameterGuavaCacheReload, opt_serviceRanking, opt_extraHttpRequestParams) {
  /** @const {string} */
  var path = this.basePath_ + '/system/console/configMgr/com.adobe.cq.social.handlebars.GuavaTemplateCacheImpl';

  /** @type {!Object} */
  var queryParameters = {};

  /** @type {!Object} */
  var headerParams = angular.extend({}, this.defaultHeaders_);
  if (opt_post !== undefined) {
    queryParameters['post'] = opt_post;
  }

  if (opt_apply !== undefined) {
    queryParameters['apply'] = opt_apply;
  }

  if (opt_delete !== undefined) {
    queryParameters['delete'] = opt_delete;
  }

  if (opt_action !== undefined) {
    queryParameters['action'] = opt_action;
  }

  if (opt_location !== undefined) {
    queryParameters['$location'] = opt_location;
  }

  if (opt_propertylist !== undefined) {
    queryParameters['propertylist'] = opt_propertylist;
  }

  if (opt_parameterGuavaCacheEnabled !== undefined) {
    queryParameters['parameter.guava.cache.enabled'] = opt_parameterGuavaCacheEnabled;
  }

  if (opt_parameterGuavaCacheParams !== undefined) {
    queryParameters['parameter.guava.cache.params'] = opt_parameterGuavaCacheParams;
  }

  if (opt_parameterGuavaCacheReload !== undefined) {
    queryParameters['parameter.guava.cache.reload'] = opt_parameterGuavaCacheReload;
  }

  if (opt_serviceRanking !== undefined) {
    queryParameters['service.ranking'] = opt_serviceRanking;
  }

  /** @type {!Object} */
  var httpRequestParams = {
    method: 'POST',
    url: path,
    json: true,
            params: queryParameters,
    headers: headerParams
  };

  if (opt_extraHttpRequestParams) {
    httpRequestParams = angular.extend(httpRequestParams, opt_extraHttpRequestParams);
  }

  return (/** @type {?} */ (this.http_))(httpRequestParams);
}

/**
 * 
 * 
 * @param {!boolean=} opt_post 
 * @param {!boolean=} opt_apply 
 * @param {!boolean=} opt_delete 
 * @param {!string=} opt_action 
 * @param {!string=} opt_location 
 * @param {!Array<!string>=} opt_propertylist 
 * @param {!Array<!string>=} opt_fieldWhitelist 
 * @param {!Array<!string>=} opt_attachmentTypeBlacklist 
 * @param {!angular.$http.Config=} opt_extraHttpRequestParams Extra HTTP parameters to send.
 * @return {!angular.$q.Promise<!API.Client.comAdobeCqSocialIdeationClientEndpointsImplIdeationOperationsSInfo>}
 */
API.Client.ConfigmgrApi.prototype.comAdobeCqSocialIdeationClientEndpointsImplIdeationOperationsS = function(opt_post, opt_apply, opt_delete, opt_action, opt_location, opt_propertylist, opt_fieldWhitelist, opt_attachmentTypeBlacklist, opt_extraHttpRequestParams) {
  /** @const {string} */
  var path = this.basePath_ + '/system/console/configMgr/com.adobe.cq.social.ideation.client.endpoints.impl.IdeationOperationsService';

  /** @type {!Object} */
  var queryParameters = {};

  /** @type {!Object} */
  var headerParams = angular.extend({}, this.defaultHeaders_);
  if (opt_post !== undefined) {
    queryParameters['post'] = opt_post;
  }

  if (opt_apply !== undefined) {
    queryParameters['apply'] = opt_apply;
  }

  if (opt_delete !== undefined) {
    queryParameters['delete'] = opt_delete;
  }

  if (opt_action !== undefined) {
    queryParameters['action'] = opt_action;
  }

  if (opt_location !== undefined) {
    queryParameters['$location'] = opt_location;
  }

  if (opt_propertylist !== undefined) {
    queryParameters['propertylist'] = opt_propertylist;
  }

  if (opt_fieldWhitelist !== undefined) {
    queryParameters['fieldWhitelist'] = opt_fieldWhitelist;
  }

  if (opt_attachmentTypeBlacklist !== undefined) {
    queryParameters['attachmentTypeBlacklist'] = opt_attachmentTypeBlacklist;
  }

  /** @type {!Object} */
  var httpRequestParams = {
    method: 'POST',
    url: path,
    json: true,
            params: queryParameters,
    headers: headerParams
  };

  if (opt_extraHttpRequestParams) {
    httpRequestParams = angular.extend(httpRequestParams, opt_extraHttpRequestParams);
  }

  return (/** @type {?} */ (this.http_))(httpRequestParams);
}

/**
 * 
 * 
 * @param {!boolean=} opt_post 
 * @param {!boolean=} opt_apply 
 * @param {!boolean=} opt_delete 
 * @param {!string=} opt_action 
 * @param {!string=} opt_location 
 * @param {!Array<!string>=} opt_propertylist 
 * @param {!Array<!string>=} opt_fieldWhitelist 
 * @param {!Array<!string>=} opt_attachmentTypeBlacklist 
 * @param {!angular.$http.Config=} opt_extraHttpRequestParams Extra HTTP parameters to send.
 * @return {!angular.$q.Promise<!API.Client.comAdobeCqSocialJournalClientEndpointsImplJournalOperationsSerInfo>}
 */
API.Client.ConfigmgrApi.prototype.comAdobeCqSocialJournalClientEndpointsImplJournalOperationsSer = function(opt_post, opt_apply, opt_delete, opt_action, opt_location, opt_propertylist, opt_fieldWhitelist, opt_attachmentTypeBlacklist, opt_extraHttpRequestParams) {
  /** @const {string} */
  var path = this.basePath_ + '/system/console/configMgr/com.adobe.cq.social.journal.client.endpoints.impl.JournalOperationsService';

  /** @type {!Object} */
  var queryParameters = {};

  /** @type {!Object} */
  var headerParams = angular.extend({}, this.defaultHeaders_);
  if (opt_post !== undefined) {
    queryParameters['post'] = opt_post;
  }

  if (opt_apply !== undefined) {
    queryParameters['apply'] = opt_apply;
  }

  if (opt_delete !== undefined) {
    queryParameters['delete'] = opt_delete;
  }

  if (opt_action !== undefined) {
    queryParameters['action'] = opt_action;
  }

  if (opt_location !== undefined) {
    queryParameters['$location'] = opt_location;
  }

  if (opt_propertylist !== undefined) {
    queryParameters['propertylist'] = opt_propertylist;
  }

  if (opt_fieldWhitelist !== undefined) {
    queryParameters['fieldWhitelist'] = opt_fieldWhitelist;
  }

  if (opt_attachmentTypeBlacklist !== undefined) {
    queryParameters['attachmentTypeBlacklist'] = opt_attachmentTypeBlacklist;
  }

  /** @type {!Object} */
  var httpRequestParams = {
    method: 'POST',
    url: path,
    json: true,
            params: queryParameters,
    headers: headerParams
  };

  if (opt_extraHttpRequestParams) {
    httpRequestParams = angular.extend(httpRequestParams, opt_extraHttpRequestParams);
  }

  return (/** @type {?} */ (this.http_))(httpRequestParams);
}

/**
 * 
 * 
 * @param {!boolean=} opt_post 
 * @param {!boolean=} opt_apply 
 * @param {!boolean=} opt_delete 
 * @param {!string=} opt_action 
 * @param {!string=} opt_location 
 * @param {!Array<!string>=} opt_propertylist 
 * @param {!Array<!string>=} opt_fieldWhitelist 
 * @param {!angular.$http.Config=} opt_extraHttpRequestParams Extra HTTP parameters to send.
 * @return {!angular.$q.Promise<!API.Client.comAdobeCqSocialMembersEndpointsImplCommunityMemberGroupProfileInfo>}
 */
API.Client.ConfigmgrApi.prototype.comAdobeCqSocialMembersEndpointsImplCommunityMemberGroupProfile = function(opt_post, opt_apply, opt_delete, opt_action, opt_location, opt_propertylist, opt_fieldWhitelist, opt_extraHttpRequestParams) {
  /** @const {string} */
  var path = this.basePath_ + '/system/console/configMgr/com.adobe.cq.social.members.endpoints.impl.CommunityMemberGroupProfileOperationService';

  /** @type {!Object} */
  var queryParameters = {};

  /** @type {!Object} */
  var headerParams = angular.extend({}, this.defaultHeaders_);
  if (opt_post !== undefined) {
    queryParameters['post'] = opt_post;
  }

  if (opt_apply !== undefined) {
    queryParameters['apply'] = opt_apply;
  }

  if (opt_delete !== undefined) {
    queryParameters['delete'] = opt_delete;
  }

  if (opt_action !== undefined) {
    queryParameters['action'] = opt_action;
  }

  if (opt_location !== undefined) {
    queryParameters['$location'] = opt_location;
  }

  if (opt_propertylist !== undefined) {
    queryParameters['propertylist'] = opt_propertylist;
  }

  if (opt_fieldWhitelist !== undefined) {
    queryParameters['fieldWhitelist'] = opt_fieldWhitelist;
  }

  /** @type {!Object} */
  var httpRequestParams = {
    method: 'POST',
    url: path,
    json: true,
            params: queryParameters,
    headers: headerParams
  };

  if (opt_extraHttpRequestParams) {
    httpRequestParams = angular.extend(httpRequestParams, opt_extraHttpRequestParams);
  }

  return (/** @type {?} */ (this.http_))(httpRequestParams);
}

/**
 * 
 * 
 * @param {!boolean=} opt_post 
 * @param {!boolean=} opt_apply 
 * @param {!boolean=} opt_delete 
 * @param {!string=} opt_action 
 * @param {!string=} opt_location 
 * @param {!Array<!string>=} opt_propertylist 
 * @param {!Array<!string>=} opt_fieldWhitelist 
 * @param {!angular.$http.Config=} opt_extraHttpRequestParams Extra HTTP parameters to send.
 * @return {!angular.$q.Promise<!API.Client.comAdobeCqSocialMembersEndpointsImplCommunityMemberUserProfileOInfo>}
 */
API.Client.ConfigmgrApi.prototype.comAdobeCqSocialMembersEndpointsImplCommunityMemberUserProfileO = function(opt_post, opt_apply, opt_delete, opt_action, opt_location, opt_propertylist, opt_fieldWhitelist, opt_extraHttpRequestParams) {
  /** @const {string} */
  var path = this.basePath_ + '/system/console/configMgr/com.adobe.cq.social.members.endpoints.impl.CommunityMemberUserProfileOperationService';

  /** @type {!Object} */
  var queryParameters = {};

  /** @type {!Object} */
  var headerParams = angular.extend({}, this.defaultHeaders_);
  if (opt_post !== undefined) {
    queryParameters['post'] = opt_post;
  }

  if (opt_apply !== undefined) {
    queryParameters['apply'] = opt_apply;
  }

  if (opt_delete !== undefined) {
    queryParameters['delete'] = opt_delete;
  }

  if (opt_action !== undefined) {
    queryParameters['action'] = opt_action;
  }

  if (opt_location !== undefined) {
    queryParameters['$location'] = opt_location;
  }

  if (opt_propertylist !== undefined) {
    queryParameters['propertylist'] = opt_propertylist;
  }

  if (opt_fieldWhitelist !== undefined) {
    queryParameters['fieldWhitelist'] = opt_fieldWhitelist;
  }

  /** @type {!Object} */
  var httpRequestParams = {
    method: 'POST',
    url: path,
    json: true,
            params: queryParameters,
    headers: headerParams
  };

  if (opt_extraHttpRequestParams) {
    httpRequestParams = angular.extend(httpRequestParams, opt_extraHttpRequestParams);
  }

  return (/** @type {?} */ (this.http_))(httpRequestParams);
}

/**
 * 
 * 
 * @param {!boolean=} opt_post 
 * @param {!boolean=} opt_apply 
 * @param {!boolean=} opt_delete 
 * @param {!string=} opt_action 
 * @param {!string=} opt_location 
 * @param {!Array<!string>=} opt_propertylist 
 * @param {!number=} opt_everyoneLimit 
 * @param {!number=} opt_priority 
 * @param {!angular.$http.Config=} opt_extraHttpRequestParams Extra HTTP parameters to send.
 * @return {!angular.$q.Promise<!API.Client.comAdobeCqSocialMembersImplCommunityMemberGroupProfileComponentFInfo>}
 */
API.Client.ConfigmgrApi.prototype.comAdobeCqSocialMembersImplCommunityMemberGroupProfileComponentF = function(opt_post, opt_apply, opt_delete, opt_action, opt_location, opt_propertylist, opt_everyoneLimit, opt_priority, opt_extraHttpRequestParams) {
  /** @const {string} */
  var path = this.basePath_ + '/system/console/configMgr/com.adobe.cq.social.members.impl.CommunityMemberGroupProfileComponentFactory';

  /** @type {!Object} */
  var queryParameters = {};

  /** @type {!Object} */
  var headerParams = angular.extend({}, this.defaultHeaders_);
  if (opt_post !== undefined) {
    queryParameters['post'] = opt_post;
  }

  if (opt_apply !== undefined) {
    queryParameters['apply'] = opt_apply;
  }

  if (opt_delete !== undefined) {
    queryParameters['delete'] = opt_delete;
  }

  if (opt_action !== undefined) {
    queryParameters['action'] = opt_action;
  }

  if (opt_location !== undefined) {
    queryParameters['$location'] = opt_location;
  }

  if (opt_propertylist !== undefined) {
    queryParameters['propertylist'] = opt_propertylist;
  }

  if (opt_everyoneLimit !== undefined) {
    queryParameters['everyoneLimit'] = opt_everyoneLimit;
  }

  if (opt_priority !== undefined) {
    queryParameters['priority'] = opt_priority;
  }

  /** @type {!Object} */
  var httpRequestParams = {
    method: 'POST',
    url: path,
    json: true,
            params: queryParameters,
    headers: headerParams
  };

  if (opt_extraHttpRequestParams) {
    httpRequestParams = angular.extend(httpRequestParams, opt_extraHttpRequestParams);
  }

  return (/** @type {?} */ (this.http_))(httpRequestParams);
}

/**
 * 
 * 
 * @param {!boolean=} opt_post 
 * @param {!boolean=} opt_apply 
 * @param {!boolean=} opt_delete 
 * @param {!string=} opt_action 
 * @param {!string=} opt_location 
 * @param {!Array<!string>=} opt_propertylist 
 * @param {!Array<!string>=} opt_messageProperties 
 * @param {!number=} opt_messageBoxSizeLimit 
 * @param {!number=} opt_messageCountLimit 
 * @param {!boolean=} opt_notifyFailure 
 * @param {!string=} opt_failureMessageFrom 
 * @param {!string=} opt_failureTemplatePath 
 * @param {!number=} opt_maxRetries 
 * @param {!number=} opt_minWaitBetweenRetries 
 * @param {!number=} opt_countUpdatePoolSize 
 * @param {!string=} opt_inboxPath 
 * @param {!string=} opt_sentitemsPath 
 * @param {!boolean=} opt_supportAttachments 
 * @param {!boolean=} opt_supportGroupMessaging 
 * @param {!number=} opt_maxTotalRecipients 
 * @param {!number=} opt_batchSize 
 * @param {!number=} opt_maxTotalAttachmentSize 
 * @param {!Array<!string>=} opt_attachmentTypeBlacklist 
 * @param {!Array<!string>=} opt_allowedAttachmentTypes 
 * @param {!string=} opt_serviceSelector 
 * @param {!Array<!string>=} opt_fieldWhitelist 
 * @param {!angular.$http.Config=} opt_extraHttpRequestParams Extra HTTP parameters to send.
 * @return {!angular.$q.Promise<!API.Client.comAdobeCqSocialMessagingClientEndpointsImplMessagingOperationInfo>}
 */
API.Client.ConfigmgrApi.prototype.comAdobeCqSocialMessagingClientEndpointsImplMessagingOperation = function(opt_post, opt_apply, opt_delete, opt_action, opt_location, opt_propertylist, opt_messageProperties, opt_messageBoxSizeLimit, opt_messageCountLimit, opt_notifyFailure, opt_failureMessageFrom, opt_failureTemplatePath, opt_maxRetries, opt_minWaitBetweenRetries, opt_countUpdatePoolSize, opt_inboxPath, opt_sentitemsPath, opt_supportAttachments, opt_supportGroupMessaging, opt_maxTotalRecipients, opt_batchSize, opt_maxTotalAttachmentSize, opt_attachmentTypeBlacklist, opt_allowedAttachmentTypes, opt_serviceSelector, opt_fieldWhitelist, opt_extraHttpRequestParams) {
  /** @const {string} */
  var path = this.basePath_ + '/system/console/configMgr/com.adobe.cq.social.messaging.client.endpoints.impl.MessagingOperationsServiceImpl';

  /** @type {!Object} */
  var queryParameters = {};

  /** @type {!Object} */
  var headerParams = angular.extend({}, this.defaultHeaders_);
  if (opt_post !== undefined) {
    queryParameters['post'] = opt_post;
  }

  if (opt_apply !== undefined) {
    queryParameters['apply'] = opt_apply;
  }

  if (opt_delete !== undefined) {
    queryParameters['delete'] = opt_delete;
  }

  if (opt_action !== undefined) {
    queryParameters['action'] = opt_action;
  }

  if (opt_location !== undefined) {
    queryParameters['$location'] = opt_location;
  }

  if (opt_propertylist !== undefined) {
    queryParameters['propertylist'] = opt_propertylist;
  }

  if (opt_messageProperties !== undefined) {
    queryParameters['message.properties'] = opt_messageProperties;
  }

  if (opt_messageBoxSizeLimit !== undefined) {
    queryParameters['messageBoxSizeLimit'] = opt_messageBoxSizeLimit;
  }

  if (opt_messageCountLimit !== undefined) {
    queryParameters['messageCountLimit'] = opt_messageCountLimit;
  }

  if (opt_notifyFailure !== undefined) {
    queryParameters['notifyFailure'] = opt_notifyFailure;
  }

  if (opt_failureMessageFrom !== undefined) {
    queryParameters['failureMessageFrom'] = opt_failureMessageFrom;
  }

  if (opt_failureTemplatePath !== undefined) {
    queryParameters['failureTemplatePath'] = opt_failureTemplatePath;
  }

  if (opt_maxRetries !== undefined) {
    queryParameters['maxRetries'] = opt_maxRetries;
  }

  if (opt_minWaitBetweenRetries !== undefined) {
    queryParameters['minWaitBetweenRetries'] = opt_minWaitBetweenRetries;
  }

  if (opt_countUpdatePoolSize !== undefined) {
    queryParameters['countUpdatePoolSize'] = opt_countUpdatePoolSize;
  }

  if (opt_inboxPath !== undefined) {
    queryParameters['inbox.path'] = opt_inboxPath;
  }

  if (opt_sentitemsPath !== undefined) {
    queryParameters['sentitems.path'] = opt_sentitemsPath;
  }

  if (opt_supportAttachments !== undefined) {
    queryParameters['supportAttachments'] = opt_supportAttachments;
  }

  if (opt_supportGroupMessaging !== undefined) {
    queryParameters['supportGroupMessaging'] = opt_supportGroupMessaging;
  }

  if (opt_maxTotalRecipients !== undefined) {
    queryParameters['maxTotalRecipients'] = opt_maxTotalRecipients;
  }

  if (opt_batchSize !== undefined) {
    queryParameters['batchSize'] = opt_batchSize;
  }

  if (opt_maxTotalAttachmentSize !== undefined) {
    queryParameters['maxTotalAttachmentSize'] = opt_maxTotalAttachmentSize;
  }

  if (opt_attachmentTypeBlacklist !== undefined) {
    queryParameters['attachmentTypeBlacklist'] = opt_attachmentTypeBlacklist;
  }

  if (opt_allowedAttachmentTypes !== undefined) {
    queryParameters['allowedAttachmentTypes'] = opt_allowedAttachmentTypes;
  }

  if (opt_serviceSelector !== undefined) {
    queryParameters['serviceSelector'] = opt_serviceSelector;
  }

  if (opt_fieldWhitelist !== undefined) {
    queryParameters['fieldWhitelist'] = opt_fieldWhitelist;
  }

  /** @type {!Object} */
  var httpRequestParams = {
    method: 'POST',
    url: path,
    json: true,
            params: queryParameters,
    headers: headerParams
  };

  if (opt_extraHttpRequestParams) {
    httpRequestParams = angular.extend(httpRequestParams, opt_extraHttpRequestParams);
  }

  return (/** @type {?} */ (this.http_))(httpRequestParams);
}

/**
 * 
 * 
 * @param {!boolean=} opt_post 
 * @param {!boolean=} opt_apply 
 * @param {!boolean=} opt_delete 
 * @param {!string=} opt_action 
 * @param {!string=} opt_location 
 * @param {!Array<!string>=} opt_propertylist 
 * @param {!Array<!string>=} opt_resourceTypeFilters 
 * @param {!number=} opt_priority 
 * @param {!angular.$http.Config=} opt_extraHttpRequestParams Extra HTTP parameters to send.
 * @return {!angular.$q.Promise<!API.Client.comAdobeCqSocialModerationDashboardApiFilterGroupSocialComponenInfo>}
 */
API.Client.ConfigmgrApi.prototype.comAdobeCqSocialModerationDashboardApiFilterGroupSocialComponen = function(opt_post, opt_apply, opt_delete, opt_action, opt_location, opt_propertylist, opt_resourceTypeFilters, opt_priority, opt_extraHttpRequestParams) {
  /** @const {string} */
  var path = this.basePath_ + '/system/console/configMgr/com.adobe.cq.social.moderation.dashboard.api.FilterGroupSocialComponentFactory';

  /** @type {!Object} */
  var queryParameters = {};

  /** @type {!Object} */
  var headerParams = angular.extend({}, this.defaultHeaders_);
  if (opt_post !== undefined) {
    queryParameters['post'] = opt_post;
  }

  if (opt_apply !== undefined) {
    queryParameters['apply'] = opt_apply;
  }

  if (opt_delete !== undefined) {
    queryParameters['delete'] = opt_delete;
  }

  if (opt_action !== undefined) {
    queryParameters['action'] = opt_action;
  }

  if (opt_location !== undefined) {
    queryParameters['$location'] = opt_location;
  }

  if (opt_propertylist !== undefined) {
    queryParameters['propertylist'] = opt_propertylist;
  }

  if (opt_resourceTypeFilters !== undefined) {
    queryParameters['resourceType.filters'] = opt_resourceTypeFilters;
  }

  if (opt_priority !== undefined) {
    queryParameters['priority'] = opt_priority;
  }

  /** @type {!Object} */
  var httpRequestParams = {
    method: 'POST',
    url: path,
    json: true,
            params: queryParameters,
    headers: headerParams
  };

  if (opt_extraHttpRequestParams) {
    httpRequestParams = angular.extend(httpRequestParams, opt_extraHttpRequestParams);
  }

  return (/** @type {?} */ (this.http_))(httpRequestParams);
}

/**
 * 
 * 
 * @param {!boolean=} opt_post 
 * @param {!boolean=} opt_apply 
 * @param {!boolean=} opt_delete 
 * @param {!string=} opt_action 
 * @param {!string=} opt_location 
 * @param {!Array<!string>=} opt_propertylist 
 * @param {!number=} opt_priority 
 * @param {!angular.$http.Config=} opt_extraHttpRequestParams Extra HTTP parameters to send.
 * @return {!angular.$q.Promise<!API.Client.comAdobeCqSocialModerationDashboardApiModerationDashboardSocialInfo>}
 */
API.Client.ConfigmgrApi.prototype.comAdobeCqSocialModerationDashboardApiModerationDashboardSocial = function(opt_post, opt_apply, opt_delete, opt_action, opt_location, opt_propertylist, opt_priority, opt_extraHttpRequestParams) {
  /** @const {string} */
  var path = this.basePath_ + '/system/console/configMgr/com.adobe.cq.social.moderation.dashboard.api.ModerationDashboardSocialComponentFactory';

  /** @type {!Object} */
  var queryParameters = {};

  /** @type {!Object} */
  var headerParams = angular.extend({}, this.defaultHeaders_);
  if (opt_post !== undefined) {
    queryParameters['post'] = opt_post;
  }

  if (opt_apply !== undefined) {
    queryParameters['apply'] = opt_apply;
  }

  if (opt_delete !== undefined) {
    queryParameters['delete'] = opt_delete;
  }

  if (opt_action !== undefined) {
    queryParameters['action'] = opt_action;
  }

  if (opt_location !== undefined) {
    queryParameters['$location'] = opt_location;
  }

  if (opt_propertylist !== undefined) {
    queryParameters['propertylist'] = opt_propertylist;
  }

  if (opt_priority !== undefined) {
    queryParameters['priority'] = opt_priority;
  }

  /** @type {!Object} */
  var httpRequestParams = {
    method: 'POST',
    url: path,
    json: true,
            params: queryParameters,
    headers: headerParams
  };

  if (opt_extraHttpRequestParams) {
    httpRequestParams = angular.extend(httpRequestParams, opt_extraHttpRequestParams);
  }

  return (/** @type {?} */ (this.http_))(httpRequestParams);
}

/**
 * 
 * 
 * @param {!boolean=} opt_post 
 * @param {!boolean=} opt_apply 
 * @param {!boolean=} opt_delete 
 * @param {!string=} opt_action 
 * @param {!string=} opt_location 
 * @param {!Array<!string>=} opt_propertylist 
 * @param {!number=} opt_priority 
 * @param {!angular.$http.Config=} opt_extraHttpRequestParams Extra HTTP parameters to send.
 * @return {!angular.$q.Promise<!API.Client.comAdobeCqSocialModerationDashboardApiUserDetailsSocialComponenInfo>}
 */
API.Client.ConfigmgrApi.prototype.comAdobeCqSocialModerationDashboardApiUserDetailsSocialComponen = function(opt_post, opt_apply, opt_delete, opt_action, opt_location, opt_propertylist, opt_priority, opt_extraHttpRequestParams) {
  /** @const {string} */
  var path = this.basePath_ + '/system/console/configMgr/com.adobe.cq.social.moderation.dashboard.api.UserDetailsSocialComponentFactory';

  /** @type {!Object} */
  var queryParameters = {};

  /** @type {!Object} */
  var headerParams = angular.extend({}, this.defaultHeaders_);
  if (opt_post !== undefined) {
    queryParameters['post'] = opt_post;
  }

  if (opt_apply !== undefined) {
    queryParameters['apply'] = opt_apply;
  }

  if (opt_delete !== undefined) {
    queryParameters['delete'] = opt_delete;
  }

  if (opt_action !== undefined) {
    queryParameters['action'] = opt_action;
  }

  if (opt_location !== undefined) {
    queryParameters['$location'] = opt_location;
  }

  if (opt_propertylist !== undefined) {
    queryParameters['propertylist'] = opt_propertylist;
  }

  if (opt_priority !== undefined) {
    queryParameters['priority'] = opt_priority;
  }

  /** @type {!Object} */
  var httpRequestParams = {
    method: 'POST',
    url: path,
    json: true,
            params: queryParameters,
    headers: headerParams
  };

  if (opt_extraHttpRequestParams) {
    httpRequestParams = angular.extend(httpRequestParams, opt_extraHttpRequestParams);
  }

  return (/** @type {?} */ (this.http_))(httpRequestParams);
}

/**
 * 
 * 
 * @param {!boolean=} opt_post 
 * @param {!boolean=} opt_apply 
 * @param {!boolean=} opt_delete 
 * @param {!string=} opt_action 
 * @param {!string=} opt_location 
 * @param {!Array<!string>=} opt_propertylist 
 * @param {!Array<!string>=} opt_resourceTypeFilters 
 * @param {!number=} opt_priority 
 * @param {!angular.$http.Config=} opt_extraHttpRequestParams Extra HTTP parameters to send.
 * @return {!angular.$q.Promise<!API.Client.comAdobeCqSocialModerationDashboardInternalImplFilterGroupSociInfo>}
 */
API.Client.ConfigmgrApi.prototype.comAdobeCqSocialModerationDashboardInternalImplFilterGroupSoci = function(opt_post, opt_apply, opt_delete, opt_action, opt_location, opt_propertylist, opt_resourceTypeFilters, opt_priority, opt_extraHttpRequestParams) {
  /** @const {string} */
  var path = this.basePath_ + '/system/console/configMgr/com.adobe.cq.social.moderation.dashboard.internal.impl.FilterGroupSocialComponentFactoryV2';

  /** @type {!Object} */
  var queryParameters = {};

  /** @type {!Object} */
  var headerParams = angular.extend({}, this.defaultHeaders_);
  if (opt_post !== undefined) {
    queryParameters['post'] = opt_post;
  }

  if (opt_apply !== undefined) {
    queryParameters['apply'] = opt_apply;
  }

  if (opt_delete !== undefined) {
    queryParameters['delete'] = opt_delete;
  }

  if (opt_action !== undefined) {
    queryParameters['action'] = opt_action;
  }

  if (opt_location !== undefined) {
    queryParameters['$location'] = opt_location;
  }

  if (opt_propertylist !== undefined) {
    queryParameters['propertylist'] = opt_propertylist;
  }

  if (opt_resourceTypeFilters !== undefined) {
    queryParameters['resourceType.filters'] = opt_resourceTypeFilters;
  }

  if (opt_priority !== undefined) {
    queryParameters['priority'] = opt_priority;
  }

  /** @type {!Object} */
  var httpRequestParams = {
    method: 'POST',
    url: path,
    json: true,
            params: queryParameters,
    headers: headerParams
  };

  if (opt_extraHttpRequestParams) {
    httpRequestParams = angular.extend(httpRequestParams, opt_extraHttpRequestParams);
  }

  return (/** @type {?} */ (this.http_))(httpRequestParams);
}

/**
 * 
 * 
 * @param {!boolean=} opt_post 
 * @param {!boolean=} opt_apply 
 * @param {!boolean=} opt_delete 
 * @param {!string=} opt_action 
 * @param {!string=} opt_location 
 * @param {!Array<!string>=} opt_propertylist 
 * @param {!string=} opt_eventTopics 
 * @param {!string=} opt_eventFilter 
 * @param {!angular.$http.Config=} opt_extraHttpRequestParams Extra HTTP parameters to send.
 * @return {!angular.$q.Promise<!API.Client.comAdobeCqSocialNotificationsImplMentionsRouterInfo>}
 */
API.Client.ConfigmgrApi.prototype.comAdobeCqSocialNotificationsImplMentionsRouter = function(opt_post, opt_apply, opt_delete, opt_action, opt_location, opt_propertylist, opt_eventTopics, opt_eventFilter, opt_extraHttpRequestParams) {
  /** @const {string} */
  var path = this.basePath_ + '/system/console/configMgr/com.adobe.cq.social.notifications.impl.MentionsRouter';

  /** @type {!Object} */
  var queryParameters = {};

  /** @type {!Object} */
  var headerParams = angular.extend({}, this.defaultHeaders_);
  if (opt_post !== undefined) {
    queryParameters['post'] = opt_post;
  }

  if (opt_apply !== undefined) {
    queryParameters['apply'] = opt_apply;
  }

  if (opt_delete !== undefined) {
    queryParameters['delete'] = opt_delete;
  }

  if (opt_action !== undefined) {
    queryParameters['action'] = opt_action;
  }

  if (opt_location !== undefined) {
    queryParameters['$location'] = opt_location;
  }

  if (opt_propertylist !== undefined) {
    queryParameters['propertylist'] = opt_propertylist;
  }

  if (opt_eventTopics !== undefined) {
    queryParameters['event.topics'] = opt_eventTopics;
  }

  if (opt_eventFilter !== undefined) {
    queryParameters['event.filter'] = opt_eventFilter;
  }

  /** @type {!Object} */
  var httpRequestParams = {
    method: 'POST',
    url: path,
    json: true,
            params: queryParameters,
    headers: headerParams
  };

  if (opt_extraHttpRequestParams) {
    httpRequestParams = angular.extend(httpRequestParams, opt_extraHttpRequestParams);
  }

  return (/** @type {?} */ (this.http_))(httpRequestParams);
}

/**
 * 
 * 
 * @param {!boolean=} opt_post 
 * @param {!boolean=} opt_apply 
 * @param {!boolean=} opt_delete 
 * @param {!string=} opt_action 
 * @param {!string=} opt_location 
 * @param {!Array<!string>=} opt_propertylist 
 * @param {!number=} opt_maxUnreadNotificationCount 
 * @param {!angular.$http.Config=} opt_extraHttpRequestParams Extra HTTP parameters to send.
 * @return {!angular.$q.Promise<!API.Client.comAdobeCqSocialNotificationsImplNotificationManagerImplInfo>}
 */
API.Client.ConfigmgrApi.prototype.comAdobeCqSocialNotificationsImplNotificationManagerImpl = function(opt_post, opt_apply, opt_delete, opt_action, opt_location, opt_propertylist, opt_maxUnreadNotificationCount, opt_extraHttpRequestParams) {
  /** @const {string} */
  var path = this.basePath_ + '/system/console/configMgr/com.adobe.cq.social.notifications.impl.NotificationManagerImpl';

  /** @type {!Object} */
  var queryParameters = {};

  /** @type {!Object} */
  var headerParams = angular.extend({}, this.defaultHeaders_);
  if (opt_post !== undefined) {
    queryParameters['post'] = opt_post;
  }

  if (opt_apply !== undefined) {
    queryParameters['apply'] = opt_apply;
  }

  if (opt_delete !== undefined) {
    queryParameters['delete'] = opt_delete;
  }

  if (opt_action !== undefined) {
    queryParameters['action'] = opt_action;
  }

  if (opt_location !== undefined) {
    queryParameters['$location'] = opt_location;
  }

  if (opt_propertylist !== undefined) {
    queryParameters['propertylist'] = opt_propertylist;
  }

  if (opt_maxUnreadNotificationCount !== undefined) {
    queryParameters['max.unread.notification.count'] = opt_maxUnreadNotificationCount;
  }

  /** @type {!Object} */
  var httpRequestParams = {
    method: 'POST',
    url: path,
    json: true,
            params: queryParameters,
    headers: headerParams
  };

  if (opt_extraHttpRequestParams) {
    httpRequestParams = angular.extend(httpRequestParams, opt_extraHttpRequestParams);
  }

  return (/** @type {?} */ (this.http_))(httpRequestParams);
}

/**
 * 
 * 
 * @param {!boolean=} opt_post 
 * @param {!boolean=} opt_apply 
 * @param {!boolean=} opt_delete 
 * @param {!string=} opt_action 
 * @param {!string=} opt_location 
 * @param {!Array<!string>=} opt_propertylist 
 * @param {!string=} opt_eventTopics 
 * @param {!string=} opt_eventFilter 
 * @param {!angular.$http.Config=} opt_extraHttpRequestParams Extra HTTP parameters to send.
 * @return {!angular.$q.Promise<!API.Client.comAdobeCqSocialNotificationsImplNotificationsRouterInfo>}
 */
API.Client.ConfigmgrApi.prototype.comAdobeCqSocialNotificationsImplNotificationsRouter = function(opt_post, opt_apply, opt_delete, opt_action, opt_location, opt_propertylist, opt_eventTopics, opt_eventFilter, opt_extraHttpRequestParams) {
  /** @const {string} */
  var path = this.basePath_ + '/system/console/configMgr/com.adobe.cq.social.notifications.impl.NotificationsRouter';

  /** @type {!Object} */
  var queryParameters = {};

  /** @type {!Object} */
  var headerParams = angular.extend({}, this.defaultHeaders_);
  if (opt_post !== undefined) {
    queryParameters['post'] = opt_post;
  }

  if (opt_apply !== undefined) {
    queryParameters['apply'] = opt_apply;
  }

  if (opt_delete !== undefined) {
    queryParameters['delete'] = opt_delete;
  }

  if (opt_action !== undefined) {
    queryParameters['action'] = opt_action;
  }

  if (opt_location !== undefined) {
    queryParameters['$location'] = opt_location;
  }

  if (opt_propertylist !== undefined) {
    queryParameters['propertylist'] = opt_propertylist;
  }

  if (opt_eventTopics !== undefined) {
    queryParameters['event.topics'] = opt_eventTopics;
  }

  if (opt_eventFilter !== undefined) {
    queryParameters['event.filter'] = opt_eventFilter;
  }

  /** @type {!Object} */
  var httpRequestParams = {
    method: 'POST',
    url: path,
    json: true,
            params: queryParameters,
    headers: headerParams
  };

  if (opt_extraHttpRequestParams) {
    httpRequestParams = angular.extend(httpRequestParams, opt_extraHttpRequestParams);
  }

  return (/** @type {?} */ (this.http_))(httpRequestParams);
}

/**
 * 
 * 
 * @param {!boolean=} opt_post 
 * @param {!boolean=} opt_apply 
 * @param {!boolean=} opt_delete 
 * @param {!string=} opt_action 
 * @param {!string=} opt_location 
 * @param {!Array<!string>=} opt_propertylist 
 * @param {!Array<!string>=} opt_fieldWhitelist 
 * @param {!Array<!string>=} opt_attachmentTypeBlacklist 
 * @param {!angular.$http.Config=} opt_extraHttpRequestParams Extra HTTP parameters to send.
 * @return {!angular.$q.Promise<!API.Client.comAdobeCqSocialQnaClientEndpointsImplQnaForumOperationsServicInfo>}
 */
API.Client.ConfigmgrApi.prototype.comAdobeCqSocialQnaClientEndpointsImplQnaForumOperationsServic = function(opt_post, opt_apply, opt_delete, opt_action, opt_location, opt_propertylist, opt_fieldWhitelist, opt_attachmentTypeBlacklist, opt_extraHttpRequestParams) {
  /** @const {string} */
  var path = this.basePath_ + '/system/console/configMgr/com.adobe.cq.social.qna.client.endpoints.impl.QnaForumOperationsService';

  /** @type {!Object} */
  var queryParameters = {};

  /** @type {!Object} */
  var headerParams = angular.extend({}, this.defaultHeaders_);
  if (opt_post !== undefined) {
    queryParameters['post'] = opt_post;
  }

  if (opt_apply !== undefined) {
    queryParameters['apply'] = opt_apply;
  }

  if (opt_delete !== undefined) {
    queryParameters['delete'] = opt_delete;
  }

  if (opt_action !== undefined) {
    queryParameters['action'] = opt_action;
  }

  if (opt_location !== undefined) {
    queryParameters['$location'] = opt_location;
  }

  if (opt_propertylist !== undefined) {
    queryParameters['propertylist'] = opt_propertylist;
  }

  if (opt_fieldWhitelist !== undefined) {
    queryParameters['fieldWhitelist'] = opt_fieldWhitelist;
  }

  if (opt_attachmentTypeBlacklist !== undefined) {
    queryParameters['attachmentTypeBlacklist'] = opt_attachmentTypeBlacklist;
  }

  /** @type {!Object} */
  var httpRequestParams = {
    method: 'POST',
    url: path,
    json: true,
            params: queryParameters,
    headers: headerParams
  };

  if (opt_extraHttpRequestParams) {
    httpRequestParams = angular.extend(httpRequestParams, opt_extraHttpRequestParams);
  }

  return (/** @type {?} */ (this.http_))(httpRequestParams);
}

/**
 * 
 * 
 * @param {!boolean=} opt_post 
 * @param {!boolean=} opt_apply 
 * @param {!boolean=} opt_delete 
 * @param {!string=} opt_action 
 * @param {!string=} opt_location 
 * @param {!Array<!string>=} opt_propertylist 
 * @param {!number=} opt_cqSocialReportingAnalyticsPollingImporterInterval 
 * @param {!number=} opt_cqSocialReportingAnalyticsPollingImporterPageSize 
 * @param {!angular.$http.Config=} opt_extraHttpRequestParams Extra HTTP parameters to send.
 * @return {!angular.$q.Promise<!API.Client.comAdobeCqSocialReportingAnalyticsServicesImplAnalyticsReportIInfo>}
 */
API.Client.ConfigmgrApi.prototype.comAdobeCqSocialReportingAnalyticsServicesImplAnalyticsReportI = function(opt_post, opt_apply, opt_delete, opt_action, opt_location, opt_propertylist, opt_cqSocialReportingAnalyticsPollingImporterInterval, opt_cqSocialReportingAnalyticsPollingImporterPageSize, opt_extraHttpRequestParams) {
  /** @const {string} */
  var path = this.basePath_ + '/system/console/configMgr/com.adobe.cq.social.reporting.analytics.services.impl.AnalyticsReportImporterServiceImpl';

  /** @type {!Object} */
  var queryParameters = {};

  /** @type {!Object} */
  var headerParams = angular.extend({}, this.defaultHeaders_);
  if (opt_post !== undefined) {
    queryParameters['post'] = opt_post;
  }

  if (opt_apply !== undefined) {
    queryParameters['apply'] = opt_apply;
  }

  if (opt_delete !== undefined) {
    queryParameters['delete'] = opt_delete;
  }

  if (opt_action !== undefined) {
    queryParameters['action'] = opt_action;
  }

  if (opt_location !== undefined) {
    queryParameters['$location'] = opt_location;
  }

  if (opt_propertylist !== undefined) {
    queryParameters['propertylist'] = opt_propertylist;
  }

  if (opt_cqSocialReportingAnalyticsPollingImporterInterval !== undefined) {
    queryParameters['cq.social.reporting.analytics.polling.importer.interval'] = opt_cqSocialReportingAnalyticsPollingImporterInterval;
  }

  if (opt_cqSocialReportingAnalyticsPollingImporterPageSize !== undefined) {
    queryParameters['cq.social.reporting.analytics.polling.importer.pageSize'] = opt_cqSocialReportingAnalyticsPollingImporterPageSize;
  }

  /** @type {!Object} */
  var httpRequestParams = {
    method: 'POST',
    url: path,
    json: true,
            params: queryParameters,
    headers: headerParams
  };

  if (opt_extraHttpRequestParams) {
    httpRequestParams = angular.extend(httpRequestParams, opt_extraHttpRequestParams);
  }

  return (/** @type {?} */ (this.http_))(httpRequestParams);
}

/**
 * 
 * 
 * @param {!boolean=} opt_post 
 * @param {!boolean=} opt_apply 
 * @param {!boolean=} opt_delete 
 * @param {!string=} opt_action 
 * @param {!string=} opt_location 
 * @param {!Array<!string>=} opt_propertylist 
 * @param {!number=} opt_reportFetchDelay 
 * @param {!angular.$http.Config=} opt_extraHttpRequestParams Extra HTTP parameters to send.
 * @return {!angular.$q.Promise<!API.Client.comAdobeCqSocialReportingAnalyticsServicesImplAnalyticsReportMInfo>}
 */
API.Client.ConfigmgrApi.prototype.comAdobeCqSocialReportingAnalyticsServicesImplAnalyticsReportM = function(opt_post, opt_apply, opt_delete, opt_action, opt_location, opt_propertylist, opt_reportFetchDelay, opt_extraHttpRequestParams) {
  /** @const {string} */
  var path = this.basePath_ + '/system/console/configMgr/com.adobe.cq.social.reporting.analytics.services.impl.AnalyticsReportManagementServiceImpl';

  /** @type {!Object} */
  var queryParameters = {};

  /** @type {!Object} */
  var headerParams = angular.extend({}, this.defaultHeaders_);
  if (opt_post !== undefined) {
    queryParameters['post'] = opt_post;
  }

  if (opt_apply !== undefined) {
    queryParameters['apply'] = opt_apply;
  }

  if (opt_delete !== undefined) {
    queryParameters['delete'] = opt_delete;
  }

  if (opt_action !== undefined) {
    queryParameters['action'] = opt_action;
  }

  if (opt_location !== undefined) {
    queryParameters['$location'] = opt_location;
  }

  if (opt_propertylist !== undefined) {
    queryParameters['propertylist'] = opt_propertylist;
  }

  if (opt_reportFetchDelay !== undefined) {
    queryParameters['report.fetch.delay'] = opt_reportFetchDelay;
  }

  /** @type {!Object} */
  var httpRequestParams = {
    method: 'POST',
    url: path,
    json: true,
            params: queryParameters,
    headers: headerParams
  };

  if (opt_extraHttpRequestParams) {
    httpRequestParams = angular.extend(httpRequestParams, opt_extraHttpRequestParams);
  }

  return (/** @type {?} */ (this.http_))(httpRequestParams);
}

/**
 * 
 * 
 * @param {!boolean=} opt_post 
 * @param {!boolean=} opt_apply 
 * @param {!boolean=} opt_delete 
 * @param {!string=} opt_action 
 * @param {!string=} opt_location 
 * @param {!Array<!string>=} opt_propertylist 
 * @param {!Array<!string>=} opt_cqSocialConsoleAnalyticsSitesMapping 
 * @param {!number=} opt_priority 
 * @param {!angular.$http.Config=} opt_extraHttpRequestParams Extra HTTP parameters to send.
 * @return {!angular.$q.Promise<!API.Client.comAdobeCqSocialReportingAnalyticsServicesImplSiteTrendReportSInfo>}
 */
API.Client.ConfigmgrApi.prototype.comAdobeCqSocialReportingAnalyticsServicesImplSiteTrendReportS = function(opt_post, opt_apply, opt_delete, opt_action, opt_location, opt_propertylist, opt_cqSocialConsoleAnalyticsSitesMapping, opt_priority, opt_extraHttpRequestParams) {
  /** @const {string} */
  var path = this.basePath_ + '/system/console/configMgr/com.adobe.cq.social.reporting.analytics.services.impl.SiteTrendReportSocialComponentFactory';

  /** @type {!Object} */
  var queryParameters = {};

  /** @type {!Object} */
  var headerParams = angular.extend({}, this.defaultHeaders_);
  if (opt_post !== undefined) {
    queryParameters['post'] = opt_post;
  }

  if (opt_apply !== undefined) {
    queryParameters['apply'] = opt_apply;
  }

  if (opt_delete !== undefined) {
    queryParameters['delete'] = opt_delete;
  }

  if (opt_action !== undefined) {
    queryParameters['action'] = opt_action;
  }

  if (opt_location !== undefined) {
    queryParameters['$location'] = opt_location;
  }

  if (opt_propertylist !== undefined) {
    queryParameters['propertylist'] = opt_propertylist;
  }

  if (opt_cqSocialConsoleAnalyticsSitesMapping !== undefined) {
    queryParameters['cq.social.console.analytics.sites.mapping'] = opt_cqSocialConsoleAnalyticsSitesMapping;
  }

  if (opt_priority !== undefined) {
    queryParameters['priority'] = opt_priority;
  }

  /** @type {!Object} */
  var httpRequestParams = {
    method: 'POST',
    url: path,
    json: true,
            params: queryParameters,
    headers: headerParams
  };

  if (opt_extraHttpRequestParams) {
    httpRequestParams = angular.extend(httpRequestParams, opt_extraHttpRequestParams);
  }

  return (/** @type {?} */ (this.http_))(httpRequestParams);
}

/**
 * 
 * 
 * @param {!boolean=} opt_post 
 * @param {!boolean=} opt_apply 
 * @param {!boolean=} opt_delete 
 * @param {!string=} opt_action 
 * @param {!string=} opt_location 
 * @param {!Array<!string>=} opt_propertylist 
 * @param {!Array<!string>=} opt_fieldWhitelist 
 * @param {!Array<!string>=} opt_attachmentTypeBlacklist 
 * @param {!angular.$http.Config=} opt_extraHttpRequestParams Extra HTTP parameters to send.
 * @return {!angular.$q.Promise<!API.Client.comAdobeCqSocialReviewClientEndpointsImplReviewOperationsServiInfo>}
 */
API.Client.ConfigmgrApi.prototype.comAdobeCqSocialReviewClientEndpointsImplReviewOperationsServi = function(opt_post, opt_apply, opt_delete, opt_action, opt_location, opt_propertylist, opt_fieldWhitelist, opt_attachmentTypeBlacklist, opt_extraHttpRequestParams) {
  /** @const {string} */
  var path = this.basePath_ + '/system/console/configMgr/com.adobe.cq.social.review.client.endpoints.impl.ReviewOperationsService';

  /** @type {!Object} */
  var queryParameters = {};

  /** @type {!Object} */
  var headerParams = angular.extend({}, this.defaultHeaders_);
  if (opt_post !== undefined) {
    queryParameters['post'] = opt_post;
  }

  if (opt_apply !== undefined) {
    queryParameters['apply'] = opt_apply;
  }

  if (opt_delete !== undefined) {
    queryParameters['delete'] = opt_delete;
  }

  if (opt_action !== undefined) {
    queryParameters['action'] = opt_action;
  }

  if (opt_location !== undefined) {
    queryParameters['$location'] = opt_location;
  }

  if (opt_propertylist !== undefined) {
    queryParameters['propertylist'] = opt_propertylist;
  }

  if (opt_fieldWhitelist !== undefined) {
    queryParameters['fieldWhitelist'] = opt_fieldWhitelist;
  }

  if (opt_attachmentTypeBlacklist !== undefined) {
    queryParameters['attachmentTypeBlacklist'] = opt_attachmentTypeBlacklist;
  }

  /** @type {!Object} */
  var httpRequestParams = {
    method: 'POST',
    url: path,
    json: true,
            params: queryParameters,
    headers: headerParams
  };

  if (opt_extraHttpRequestParams) {
    httpRequestParams = angular.extend(httpRequestParams, opt_extraHttpRequestParams);
  }

  return (/** @type {?} */ (this.http_))(httpRequestParams);
}

/**
 * 
 * 
 * @param {!boolean=} opt_post 
 * @param {!boolean=} opt_apply 
 * @param {!boolean=} opt_delete 
 * @param {!string=} opt_action 
 * @param {!string=} opt_location 
 * @param {!Array<!string>=} opt_propertylist 
 * @param {!string=} opt_slingServletSelectors 
 * @param {!string=} opt_slingServletExtensions 
 * @param {!angular.$http.Config=} opt_extraHttpRequestParams Extra HTTP parameters to send.
 * @return {!angular.$q.Promise<!API.Client.comAdobeCqSocialScfCoreOperationsImplSocialOperationsServletInfo>}
 */
API.Client.ConfigmgrApi.prototype.comAdobeCqSocialScfCoreOperationsImplSocialOperationsServlet = function(opt_post, opt_apply, opt_delete, opt_action, opt_location, opt_propertylist, opt_slingServletSelectors, opt_slingServletExtensions, opt_extraHttpRequestParams) {
  /** @const {string} */
  var path = this.basePath_ + '/system/console/configMgr/com.adobe.cq.social.scf.core.operations.impl.SocialOperationsServlet';

  /** @type {!Object} */
  var queryParameters = {};

  /** @type {!Object} */
  var headerParams = angular.extend({}, this.defaultHeaders_);
  if (opt_post !== undefined) {
    queryParameters['post'] = opt_post;
  }

  if (opt_apply !== undefined) {
    queryParameters['apply'] = opt_apply;
  }

  if (opt_delete !== undefined) {
    queryParameters['delete'] = opt_delete;
  }

  if (opt_action !== undefined) {
    queryParameters['action'] = opt_action;
  }

  if (opt_location !== undefined) {
    queryParameters['$location'] = opt_location;
  }

  if (opt_propertylist !== undefined) {
    queryParameters['propertylist'] = opt_propertylist;
  }

  if (opt_slingServletSelectors !== undefined) {
    queryParameters['sling.servlet.selectors'] = opt_slingServletSelectors;
  }

  if (opt_slingServletExtensions !== undefined) {
    queryParameters['sling.servlet.extensions'] = opt_slingServletExtensions;
  }

  /** @type {!Object} */
  var httpRequestParams = {
    method: 'POST',
    url: path,
    json: true,
            params: queryParameters,
    headers: headerParams
  };

  if (opt_extraHttpRequestParams) {
    httpRequestParams = angular.extend(httpRequestParams, opt_extraHttpRequestParams);
  }

  return (/** @type {?} */ (this.http_))(httpRequestParams);
}

/**
 * 
 * 
 * @param {!boolean=} opt_post 
 * @param {!boolean=} opt_apply 
 * @param {!boolean=} opt_delete 
 * @param {!string=} opt_action 
 * @param {!string=} opt_location 
 * @param {!Array<!string>=} opt_propertylist 
 * @param {!Array<!string>=} opt_slingServletSelectors 
 * @param {!string=} opt_slingServletExtensions 
 * @param {!angular.$http.Config=} opt_extraHttpRequestParams Extra HTTP parameters to send.
 * @return {!angular.$q.Promise<!API.Client.comAdobeCqSocialScfEndpointsImplDefaultSocialGetServletInfo>}
 */
API.Client.ConfigmgrApi.prototype.comAdobeCqSocialScfEndpointsImplDefaultSocialGetServlet = function(opt_post, opt_apply, opt_delete, opt_action, opt_location, opt_propertylist, opt_slingServletSelectors, opt_slingServletExtensions, opt_extraHttpRequestParams) {
  /** @const {string} */
  var path = this.basePath_ + '/system/console/configMgr/com.adobe.cq.social.scf.endpoints.impl.DefaultSocialGetServlet';

  /** @type {!Object} */
  var queryParameters = {};

  /** @type {!Object} */
  var headerParams = angular.extend({}, this.defaultHeaders_);
  if (opt_post !== undefined) {
    queryParameters['post'] = opt_post;
  }

  if (opt_apply !== undefined) {
    queryParameters['apply'] = opt_apply;
  }

  if (opt_delete !== undefined) {
    queryParameters['delete'] = opt_delete;
  }

  if (opt_action !== undefined) {
    queryParameters['action'] = opt_action;
  }

  if (opt_location !== undefined) {
    queryParameters['$location'] = opt_location;
  }

  if (opt_propertylist !== undefined) {
    queryParameters['propertylist'] = opt_propertylist;
  }

  if (opt_slingServletSelectors !== undefined) {
    queryParameters['sling.servlet.selectors'] = opt_slingServletSelectors;
  }

  if (opt_slingServletExtensions !== undefined) {
    queryParameters['sling.servlet.extensions'] = opt_slingServletExtensions;
  }

  /** @type {!Object} */
  var httpRequestParams = {
    method: 'POST',
    url: path,
    json: true,
            params: queryParameters,
    headers: headerParams
  };

  if (opt_extraHttpRequestParams) {
    httpRequestParams = angular.extend(httpRequestParams, opt_extraHttpRequestParams);
  }

  return (/** @type {?} */ (this.http_))(httpRequestParams);
}

/**
 * 
 * 
 * @param {!boolean=} opt_post 
 * @param {!boolean=} opt_apply 
 * @param {!boolean=} opt_delete 
 * @param {!string=} opt_action 
 * @param {!string=} opt_location 
 * @param {!Array<!string>=} opt_propertylist 
 * @param {!string=} opt_eventTopics 
 * @param {!string=} opt_eventFilter 
 * @param {!angular.$http.Config=} opt_extraHttpRequestParams Extra HTTP parameters to send.
 * @return {!angular.$q.Promise<!API.Client.comAdobeCqSocialScoringImplScoringEventListenerInfo>}
 */
API.Client.ConfigmgrApi.prototype.comAdobeCqSocialScoringImplScoringEventListener = function(opt_post, opt_apply, opt_delete, opt_action, opt_location, opt_propertylist, opt_eventTopics, opt_eventFilter, opt_extraHttpRequestParams) {
  /** @const {string} */
  var path = this.basePath_ + '/system/console/configMgr/com.adobe.cq.social.scoring.impl.ScoringEventListener';

  /** @type {!Object} */
  var queryParameters = {};

  /** @type {!Object} */
  var headerParams = angular.extend({}, this.defaultHeaders_);
  if (opt_post !== undefined) {
    queryParameters['post'] = opt_post;
  }

  if (opt_apply !== undefined) {
    queryParameters['apply'] = opt_apply;
  }

  if (opt_delete !== undefined) {
    queryParameters['delete'] = opt_delete;
  }

  if (opt_action !== undefined) {
    queryParameters['action'] = opt_action;
  }

  if (opt_location !== undefined) {
    queryParameters['$location'] = opt_location;
  }

  if (opt_propertylist !== undefined) {
    queryParameters['propertylist'] = opt_propertylist;
  }

  if (opt_eventTopics !== undefined) {
    queryParameters['event.topics'] = opt_eventTopics;
  }

  if (opt_eventFilter !== undefined) {
    queryParameters['event.filter'] = opt_eventFilter;
  }

  /** @type {!Object} */
  var httpRequestParams = {
    method: 'POST',
    url: path,
    json: true,
            params: queryParameters,
    headers: headerParams
  };

  if (opt_extraHttpRequestParams) {
    httpRequestParams = angular.extend(httpRequestParams, opt_extraHttpRequestParams);
  }

  return (/** @type {?} */ (this.http_))(httpRequestParams);
}

/**
 * 
 * 
 * @param {!boolean=} opt_post 
 * @param {!boolean=} opt_apply 
 * @param {!boolean=} opt_delete 
 * @param {!string=} opt_action 
 * @param {!string=} opt_location 
 * @param {!Array<!string>=} opt_propertylist 
 * @param {!boolean=} opt_enableFallback 
 * @param {!angular.$http.Config=} opt_extraHttpRequestParams Extra HTTP parameters to send.
 * @return {!angular.$q.Promise<!API.Client.comAdobeCqSocialServiceusersInternalImplServiceUserWrapperImplInfo>}
 */
API.Client.ConfigmgrApi.prototype.comAdobeCqSocialServiceusersInternalImplServiceUserWrapperImpl = function(opt_post, opt_apply, opt_delete, opt_action, opt_location, opt_propertylist, opt_enableFallback, opt_extraHttpRequestParams) {
  /** @const {string} */
  var path = this.basePath_ + '/system/console/configMgr/com.adobe.cq.social.serviceusers.internal.impl.ServiceUserWrapperImpl';

  /** @type {!Object} */
  var queryParameters = {};

  /** @type {!Object} */
  var headerParams = angular.extend({}, this.defaultHeaders_);
  if (opt_post !== undefined) {
    queryParameters['post'] = opt_post;
  }

  if (opt_apply !== undefined) {
    queryParameters['apply'] = opt_apply;
  }

  if (opt_delete !== undefined) {
    queryParameters['delete'] = opt_delete;
  }

  if (opt_action !== undefined) {
    queryParameters['action'] = opt_action;
  }

  if (opt_location !== undefined) {
    queryParameters['$location'] = opt_location;
  }

  if (opt_propertylist !== undefined) {
    queryParameters['propertylist'] = opt_propertylist;
  }

  if (opt_enableFallback !== undefined) {
    queryParameters['enableFallback'] = opt_enableFallback;
  }

  /** @type {!Object} */
  var httpRequestParams = {
    method: 'POST',
    url: path,
    json: true,
            params: queryParameters,
    headers: headerParams
  };

  if (opt_extraHttpRequestParams) {
    httpRequestParams = angular.extend(httpRequestParams, opt_extraHttpRequestParams);
  }

  return (/** @type {?} */ (this.http_))(httpRequestParams);
}

/**
 * 
 * 
 * @param {!boolean=} opt_post 
 * @param {!boolean=} opt_apply 
 * @param {!boolean=} opt_delete 
 * @param {!string=} opt_action 
 * @param {!string=} opt_location 
 * @param {!Array<!string>=} opt_propertylist 
 * @param {!Array<!string>=} opt_fieldWhitelist 
 * @param {!Array<!string>=} opt_sitePathFilters 
 * @param {!string=} opt_sitePackageGroup 
 * @param {!angular.$http.Config=} opt_extraHttpRequestParams Extra HTTP parameters to send.
 * @return {!angular.$q.Promise<!API.Client.comAdobeCqSocialSiteEndpointsImplSiteOperationServiceInfo>}
 */
API.Client.ConfigmgrApi.prototype.comAdobeCqSocialSiteEndpointsImplSiteOperationService = function(opt_post, opt_apply, opt_delete, opt_action, opt_location, opt_propertylist, opt_fieldWhitelist, opt_sitePathFilters, opt_sitePackageGroup, opt_extraHttpRequestParams) {
  /** @const {string} */
  var path = this.basePath_ + '/system/console/configMgr/com.adobe.cq.social.site.endpoints.impl.SiteOperationService';

  /** @type {!Object} */
  var queryParameters = {};

  /** @type {!Object} */
  var headerParams = angular.extend({}, this.defaultHeaders_);
  if (opt_post !== undefined) {
    queryParameters['post'] = opt_post;
  }

  if (opt_apply !== undefined) {
    queryParameters['apply'] = opt_apply;
  }

  if (opt_delete !== undefined) {
    queryParameters['delete'] = opt_delete;
  }

  if (opt_action !== undefined) {
    queryParameters['action'] = opt_action;
  }

  if (opt_location !== undefined) {
    queryParameters['$location'] = opt_location;
  }

  if (opt_propertylist !== undefined) {
    queryParameters['propertylist'] = opt_propertylist;
  }

  if (opt_fieldWhitelist !== undefined) {
    queryParameters['fieldWhitelist'] = opt_fieldWhitelist;
  }

  if (opt_sitePathFilters !== undefined) {
    queryParameters['sitePathFilters'] = opt_sitePathFilters;
  }

  if (opt_sitePackageGroup !== undefined) {
    queryParameters['sitePackageGroup'] = opt_sitePackageGroup;
  }

  /** @type {!Object} */
  var httpRequestParams = {
    method: 'POST',
    url: path,
    json: true,
            params: queryParameters,
    headers: headerParams
  };

  if (opt_extraHttpRequestParams) {
    httpRequestParams = angular.extend(httpRequestParams, opt_extraHttpRequestParams);
  }

  return (/** @type {?} */ (this.http_))(httpRequestParams);
}

/**
 * 
 * 
 * @param {!boolean=} opt_post 
 * @param {!boolean=} opt_apply 
 * @param {!boolean=} opt_delete 
 * @param {!string=} opt_action 
 * @param {!string=} opt_location 
 * @param {!Array<!string>=} opt_propertylist 
 * @param {!Array<!string>=} opt_cqSocialConsoleAnalyticsComponents 
 * @param {!angular.$http.Config=} opt_extraHttpRequestParams Extra HTTP parameters to send.
 * @return {!angular.$q.Promise<!API.Client.comAdobeCqSocialSiteImplAnalyticsComponentConfigurationServiceImInfo>}
 */
API.Client.ConfigmgrApi.prototype.comAdobeCqSocialSiteImplAnalyticsComponentConfigurationServiceIm = function(opt_post, opt_apply, opt_delete, opt_action, opt_location, opt_propertylist, opt_cqSocialConsoleAnalyticsComponents, opt_extraHttpRequestParams) {
  /** @const {string} */
  var path = this.basePath_ + '/system/console/configMgr/com.adobe.cq.social.site.impl.AnalyticsComponentConfigurationServiceImpl';

  /** @type {!Object} */
  var queryParameters = {};

  /** @type {!Object} */
  var headerParams = angular.extend({}, this.defaultHeaders_);
  if (opt_post !== undefined) {
    queryParameters['post'] = opt_post;
  }

  if (opt_apply !== undefined) {
    queryParameters['apply'] = opt_apply;
  }

  if (opt_delete !== undefined) {
    queryParameters['delete'] = opt_delete;
  }

  if (opt_action !== undefined) {
    queryParameters['action'] = opt_action;
  }

  if (opt_location !== undefined) {
    queryParameters['$location'] = opt_location;
  }

  if (opt_propertylist !== undefined) {
    queryParameters['propertylist'] = opt_propertylist;
  }

  if (opt_cqSocialConsoleAnalyticsComponents !== undefined) {
    queryParameters['cq.social.console.analytics.components'] = opt_cqSocialConsoleAnalyticsComponents;
  }

  /** @type {!Object} */
  var httpRequestParams = {
    method: 'POST',
    url: path,
    json: true,
            params: queryParameters,
    headers: headerParams
  };

  if (opt_extraHttpRequestParams) {
    httpRequestParams = angular.extend(httpRequestParams, opt_extraHttpRequestParams);
  }

  return (/** @type {?} */ (this.http_))(httpRequestParams);
}

/**
 * 
 * 
 * @param {!boolean=} opt_post 
 * @param {!boolean=} opt_apply 
 * @param {!boolean=} opt_delete 
 * @param {!string=} opt_action 
 * @param {!string=} opt_location 
 * @param {!Array<!string>=} opt_propertylist 
 * @param {!Array<!string>=} opt_componentsUsingTags 
 * @param {!angular.$http.Config=} opt_extraHttpRequestParams Extra HTTP parameters to send.
 * @return {!angular.$q.Promise<!API.Client.comAdobeCqSocialSiteImplSiteConfiguratorImplInfo>}
 */
API.Client.ConfigmgrApi.prototype.comAdobeCqSocialSiteImplSiteConfiguratorImpl = function(opt_post, opt_apply, opt_delete, opt_action, opt_location, opt_propertylist, opt_componentsUsingTags, opt_extraHttpRequestParams) {
  /** @const {string} */
  var path = this.basePath_ + '/system/console/configMgr/com.adobe.cq.social.site.impl.SiteConfiguratorImpl';

  /** @type {!Object} */
  var queryParameters = {};

  /** @type {!Object} */
  var headerParams = angular.extend({}, this.defaultHeaders_);
  if (opt_post !== undefined) {
    queryParameters['post'] = opt_post;
  }

  if (opt_apply !== undefined) {
    queryParameters['apply'] = opt_apply;
  }

  if (opt_delete !== undefined) {
    queryParameters['delete'] = opt_delete;
  }

  if (opt_action !== undefined) {
    queryParameters['action'] = opt_action;
  }

  if (opt_location !== undefined) {
    queryParameters['$location'] = opt_location;
  }

  if (opt_propertylist !== undefined) {
    queryParameters['propertylist'] = opt_propertylist;
  }

  if (opt_componentsUsingTags !== undefined) {
    queryParameters['componentsUsingTags'] = opt_componentsUsingTags;
  }

  /** @type {!Object} */
  var httpRequestParams = {
    method: 'POST',
    url: path,
    json: true,
            params: queryParameters,
    headers: headerParams
  };

  if (opt_extraHttpRequestParams) {
    httpRequestParams = angular.extend(httpRequestParams, opt_extraHttpRequestParams);
  }

  return (/** @type {?} */ (this.http_))(httpRequestParams);
}

/**
 * 
 * 
 * @param {!boolean=} opt_post 
 * @param {!boolean=} opt_apply 
 * @param {!boolean=} opt_delete 
 * @param {!string=} opt_action 
 * @param {!string=} opt_location 
 * @param {!Array<!string>=} opt_propertylist 
 * @param {!string=} opt_srpType 
 * @param {!angular.$http.Config=} opt_extraHttpRequestParams Extra HTTP parameters to send.
 * @return {!angular.$q.Promise<!API.Client.comAdobeCqSocialSrpImplSocialSolrConnectorInfo>}
 */
API.Client.ConfigmgrApi.prototype.comAdobeCqSocialSrpImplSocialSolrConnector = function(opt_post, opt_apply, opt_delete, opt_action, opt_location, opt_propertylist, opt_srpType, opt_extraHttpRequestParams) {
  /** @const {string} */
  var path = this.basePath_ + '/system/console/configMgr/com.adobe.cq.social.srp.impl.SocialSolrConnector';

  /** @type {!Object} */
  var queryParameters = {};

  /** @type {!Object} */
  var headerParams = angular.extend({}, this.defaultHeaders_);
  if (opt_post !== undefined) {
    queryParameters['post'] = opt_post;
  }

  if (opt_apply !== undefined) {
    queryParameters['apply'] = opt_apply;
  }

  if (opt_delete !== undefined) {
    queryParameters['delete'] = opt_delete;
  }

  if (opt_action !== undefined) {
    queryParameters['action'] = opt_action;
  }

  if (opt_location !== undefined) {
    queryParameters['$location'] = opt_location;
  }

  if (opt_propertylist !== undefined) {
    queryParameters['propertylist'] = opt_propertylist;
  }

  if (opt_srpType !== undefined) {
    queryParameters['srp.type'] = opt_srpType;
  }

  /** @type {!Object} */
  var httpRequestParams = {
    method: 'POST',
    url: path,
    json: true,
            params: queryParameters,
    headers: headerParams
  };

  if (opt_extraHttpRequestParams) {
    httpRequestParams = angular.extend(httpRequestParams, opt_extraHttpRequestParams);
  }

  return (/** @type {?} */ (this.http_))(httpRequestParams);
}

/**
 * 
 * 
 * @param {!boolean=} opt_post 
 * @param {!boolean=} opt_apply 
 * @param {!boolean=} opt_delete 
 * @param {!string=} opt_action 
 * @param {!string=} opt_location 
 * @param {!Array<!string>=} opt_propertylist 
 * @param {!boolean=} opt_enabled 
 * @param {!string=} opt_agentName 
 * @param {!string=} opt_diffPath 
 * @param {!string=} opt_propertyNames 
 * @param {!angular.$http.Config=} opt_extraHttpRequestParams Extra HTTP parameters to send.
 * @return {!angular.$q.Promise<!API.Client.comAdobeCqSocialSyncImplDiffChangesObserverInfo>}
 */
API.Client.ConfigmgrApi.prototype.comAdobeCqSocialSyncImplDiffChangesObserver = function(opt_post, opt_apply, opt_delete, opt_action, opt_location, opt_propertylist, opt_enabled, opt_agentName, opt_diffPath, opt_propertyNames, opt_extraHttpRequestParams) {
  /** @const {string} */
  var path = this.basePath_ + '/system/console/configMgr/com.adobe.cq.social.sync.impl.DiffChangesObserver';

  /** @type {!Object} */
  var queryParameters = {};

  /** @type {!Object} */
  var headerParams = angular.extend({}, this.defaultHeaders_);
  if (opt_post !== undefined) {
    queryParameters['post'] = opt_post;
  }

  if (opt_apply !== undefined) {
    queryParameters['apply'] = opt_apply;
  }

  if (opt_delete !== undefined) {
    queryParameters['delete'] = opt_delete;
  }

  if (opt_action !== undefined) {
    queryParameters['action'] = opt_action;
  }

  if (opt_location !== undefined) {
    queryParameters['$location'] = opt_location;
  }

  if (opt_propertylist !== undefined) {
    queryParameters['propertylist'] = opt_propertylist;
  }

  if (opt_enabled !== undefined) {
    queryParameters['enabled'] = opt_enabled;
  }

  if (opt_agentName !== undefined) {
    queryParameters['agentName'] = opt_agentName;
  }

  if (opt_diffPath !== undefined) {
    queryParameters['diffPath'] = opt_diffPath;
  }

  if (opt_propertyNames !== undefined) {
    queryParameters['propertyNames'] = opt_propertyNames;
  }

  /** @type {!Object} */
  var httpRequestParams = {
    method: 'POST',
    url: path,
    json: true,
            params: queryParameters,
    headers: headerParams
  };

  if (opt_extraHttpRequestParams) {
    httpRequestParams = angular.extend(httpRequestParams, opt_extraHttpRequestParams);
  }

  return (/** @type {?} */ (this.http_))(httpRequestParams);
}

/**
 * 
 * 
 * @param {!boolean=} opt_post 
 * @param {!boolean=} opt_apply 
 * @param {!boolean=} opt_delete 
 * @param {!string=} opt_action 
 * @param {!string=} opt_location 
 * @param {!Array<!string>=} opt_propertylist 
 * @param {!Array<!string>=} opt_nodetypes 
 * @param {!Array<!string>=} opt_ignorableprops 
 * @param {!string=} opt_ignorablenodes 
 * @param {!boolean=} opt_enabled 
 * @param {!string=} opt_distfolders 
 * @param {!angular.$http.Config=} opt_extraHttpRequestParams Extra HTTP parameters to send.
 * @return {!angular.$q.Promise<!API.Client.comAdobeCqSocialSyncImplGroupSyncListenerImplInfo>}
 */
API.Client.ConfigmgrApi.prototype.comAdobeCqSocialSyncImplGroupSyncListenerImpl = function(opt_post, opt_apply, opt_delete, opt_action, opt_location, opt_propertylist, opt_nodetypes, opt_ignorableprops, opt_ignorablenodes, opt_enabled, opt_distfolders, opt_extraHttpRequestParams) {
  /** @const {string} */
  var path = this.basePath_ + '/system/console/configMgr/com.adobe.cq.social.sync.impl.GroupSyncListenerImpl';

  /** @type {!Object} */
  var queryParameters = {};

  /** @type {!Object} */
  var headerParams = angular.extend({}, this.defaultHeaders_);
  if (opt_post !== undefined) {
    queryParameters['post'] = opt_post;
  }

  if (opt_apply !== undefined) {
    queryParameters['apply'] = opt_apply;
  }

  if (opt_delete !== undefined) {
    queryParameters['delete'] = opt_delete;
  }

  if (opt_action !== undefined) {
    queryParameters['action'] = opt_action;
  }

  if (opt_location !== undefined) {
    queryParameters['$location'] = opt_location;
  }

  if (opt_propertylist !== undefined) {
    queryParameters['propertylist'] = opt_propertylist;
  }

  if (opt_nodetypes !== undefined) {
    queryParameters['nodetypes'] = opt_nodetypes;
  }

  if (opt_ignorableprops !== undefined) {
    queryParameters['ignorableprops'] = opt_ignorableprops;
  }

  if (opt_ignorablenodes !== undefined) {
    queryParameters['ignorablenodes'] = opt_ignorablenodes;
  }

  if (opt_enabled !== undefined) {
    queryParameters['enabled'] = opt_enabled;
  }

  if (opt_distfolders !== undefined) {
    queryParameters['distfolders'] = opt_distfolders;
  }

  /** @type {!Object} */
  var httpRequestParams = {
    method: 'POST',
    url: path,
    json: true,
            params: queryParameters,
    headers: headerParams
  };

  if (opt_extraHttpRequestParams) {
    httpRequestParams = angular.extend(httpRequestParams, opt_extraHttpRequestParams);
  }

  return (/** @type {?} */ (this.http_))(httpRequestParams);
}

/**
 * 
 * 
 * @param {!boolean=} opt_post 
 * @param {!boolean=} opt_apply 
 * @param {!boolean=} opt_delete 
 * @param {!string=} opt_action 
 * @param {!string=} opt_location 
 * @param {!Array<!string>=} opt_propertylist 
 * @param {!Array<!string>=} opt_activeRunModes 
 * @param {!angular.$http.Config=} opt_extraHttpRequestParams Extra HTTP parameters to send.
 * @return {!angular.$q.Promise<!API.Client.comAdobeCqSocialSyncImplPublisherSyncServiceImplInfo>}
 */
API.Client.ConfigmgrApi.prototype.comAdobeCqSocialSyncImplPublisherSyncServiceImpl = function(opt_post, opt_apply, opt_delete, opt_action, opt_location, opt_propertylist, opt_activeRunModes, opt_extraHttpRequestParams) {
  /** @const {string} */
  var path = this.basePath_ + '/system/console/configMgr/com.adobe.cq.social.sync.impl.PublisherSyncServiceImpl';

  /** @type {!Object} */
  var queryParameters = {};

  /** @type {!Object} */
  var headerParams = angular.extend({}, this.defaultHeaders_);
  if (opt_post !== undefined) {
    queryParameters['post'] = opt_post;
  }

  if (opt_apply !== undefined) {
    queryParameters['apply'] = opt_apply;
  }

  if (opt_delete !== undefined) {
    queryParameters['delete'] = opt_delete;
  }

  if (opt_action !== undefined) {
    queryParameters['action'] = opt_action;
  }

  if (opt_location !== undefined) {
    queryParameters['$location'] = opt_location;
  }

  if (opt_propertylist !== undefined) {
    queryParameters['propertylist'] = opt_propertylist;
  }

  if (opt_activeRunModes !== undefined) {
    queryParameters['activeRunModes'] = opt_activeRunModes;
  }

  /** @type {!Object} */
  var httpRequestParams = {
    method: 'POST',
    url: path,
    json: true,
            params: queryParameters,
    headers: headerParams
  };

  if (opt_extraHttpRequestParams) {
    httpRequestParams = angular.extend(httpRequestParams, opt_extraHttpRequestParams);
  }

  return (/** @type {?} */ (this.http_))(httpRequestParams);
}

/**
 * 
 * 
 * @param {!boolean=} opt_post 
 * @param {!boolean=} opt_apply 
 * @param {!boolean=} opt_delete 
 * @param {!string=} opt_action 
 * @param {!string=} opt_location 
 * @param {!Array<!string>=} opt_propertylist 
 * @param {!Array<!string>=} opt_nodetypes 
 * @param {!Array<!string>=} opt_ignorableprops 
 * @param {!Array<!string>=} opt_ignorablenodes 
 * @param {!boolean=} opt_enabled 
 * @param {!Array<!string>=} opt_distfolders 
 * @param {!angular.$http.Config=} opt_extraHttpRequestParams Extra HTTP parameters to send.
 * @return {!angular.$q.Promise<!API.Client.comAdobeCqSocialSyncImplUserSyncListenerImplInfo>}
 */
API.Client.ConfigmgrApi.prototype.comAdobeCqSocialSyncImplUserSyncListenerImpl = function(opt_post, opt_apply, opt_delete, opt_action, opt_location, opt_propertylist, opt_nodetypes, opt_ignorableprops, opt_ignorablenodes, opt_enabled, opt_distfolders, opt_extraHttpRequestParams) {
  /** @const {string} */
  var path = this.basePath_ + '/system/console/configMgr/com.adobe.cq.social.sync.impl.UserSyncListenerImpl';

  /** @type {!Object} */
  var queryParameters = {};

  /** @type {!Object} */
  var headerParams = angular.extend({}, this.defaultHeaders_);
  if (opt_post !== undefined) {
    queryParameters['post'] = opt_post;
  }

  if (opt_apply !== undefined) {
    queryParameters['apply'] = opt_apply;
  }

  if (opt_delete !== undefined) {
    queryParameters['delete'] = opt_delete;
  }

  if (opt_action !== undefined) {
    queryParameters['action'] = opt_action;
  }

  if (opt_location !== undefined) {
    queryParameters['$location'] = opt_location;
  }

  if (opt_propertylist !== undefined) {
    queryParameters['propertylist'] = opt_propertylist;
  }

  if (opt_nodetypes !== undefined) {
    queryParameters['nodetypes'] = opt_nodetypes;
  }

  if (opt_ignorableprops !== undefined) {
    queryParameters['ignorableprops'] = opt_ignorableprops;
  }

  if (opt_ignorablenodes !== undefined) {
    queryParameters['ignorablenodes'] = opt_ignorablenodes;
  }

  if (opt_enabled !== undefined) {
    queryParameters['enabled'] = opt_enabled;
  }

  if (opt_distfolders !== undefined) {
    queryParameters['distfolders'] = opt_distfolders;
  }

  /** @type {!Object} */
  var httpRequestParams = {
    method: 'POST',
    url: path,
    json: true,
            params: queryParameters,
    headers: headerParams
  };

  if (opt_extraHttpRequestParams) {
    httpRequestParams = angular.extend(httpRequestParams, opt_extraHttpRequestParams);
  }

  return (/** @type {?} */ (this.http_))(httpRequestParams);
}

/**
 * 
 * 
 * @param {!boolean=} opt_post 
 * @param {!boolean=} opt_apply 
 * @param {!boolean=} opt_delete 
 * @param {!string=} opt_action 
 * @param {!string=} opt_location 
 * @param {!Array<!string>=} opt_propertylist 
 * @param {!string=} opt_translateLanguage 
 * @param {!string=} opt_translateDisplay 
 * @param {!boolean=} opt_translateAttribution 
 * @param {!string=} opt_translateCaching 
 * @param {!string=} opt_translateSmartRendering 
 * @param {!string=} opt_translateCachingDuration 
 * @param {!string=} opt_translateSessionSaveInterval 
 * @param {!string=} opt_translateSessionSaveBatchLimit 
 * @param {!angular.$http.Config=} opt_extraHttpRequestParams Extra HTTP parameters to send.
 * @return {!angular.$q.Promise<!API.Client.comAdobeCqSocialTranslationImplTranslationServiceConfigManagerInfo>}
 */
API.Client.ConfigmgrApi.prototype.comAdobeCqSocialTranslationImplTranslationServiceConfigManager = function(opt_post, opt_apply, opt_delete, opt_action, opt_location, opt_propertylist, opt_translateLanguage, opt_translateDisplay, opt_translateAttribution, opt_translateCaching, opt_translateSmartRendering, opt_translateCachingDuration, opt_translateSessionSaveInterval, opt_translateSessionSaveBatchLimit, opt_extraHttpRequestParams) {
  /** @const {string} */
  var path = this.basePath_ + '/system/console/configMgr/com.adobe.cq.social.translation.impl.TranslationServiceConfigManager';

  /** @type {!Object} */
  var queryParameters = {};

  /** @type {!Object} */
  var headerParams = angular.extend({}, this.defaultHeaders_);
  if (opt_post !== undefined) {
    queryParameters['post'] = opt_post;
  }

  if (opt_apply !== undefined) {
    queryParameters['apply'] = opt_apply;
  }

  if (opt_delete !== undefined) {
    queryParameters['delete'] = opt_delete;
  }

  if (opt_action !== undefined) {
    queryParameters['action'] = opt_action;
  }

  if (opt_location !== undefined) {
    queryParameters['$location'] = opt_location;
  }

  if (opt_propertylist !== undefined) {
    queryParameters['propertylist'] = opt_propertylist;
  }

  if (opt_translateLanguage !== undefined) {
    queryParameters['translate.language'] = opt_translateLanguage;
  }

  if (opt_translateDisplay !== undefined) {
    queryParameters['translate.display'] = opt_translateDisplay;
  }

  if (opt_translateAttribution !== undefined) {
    queryParameters['translate.attribution'] = opt_translateAttribution;
  }

  if (opt_translateCaching !== undefined) {
    queryParameters['translate.caching'] = opt_translateCaching;
  }

  if (opt_translateSmartRendering !== undefined) {
    queryParameters['translate.smart.rendering'] = opt_translateSmartRendering;
  }

  if (opt_translateCachingDuration !== undefined) {
    queryParameters['translate.caching.duration'] = opt_translateCachingDuration;
  }

  if (opt_translateSessionSaveInterval !== undefined) {
    queryParameters['translate.session.save.interval'] = opt_translateSessionSaveInterval;
  }

  if (opt_translateSessionSaveBatchLimit !== undefined) {
    queryParameters['translate.session.save.batchLimit'] = opt_translateSessionSaveBatchLimit;
  }

  /** @type {!Object} */
  var httpRequestParams = {
    method: 'POST',
    url: path,
    json: true,
            params: queryParameters,
    headers: headerParams
  };

  if (opt_extraHttpRequestParams) {
    httpRequestParams = angular.extend(httpRequestParams, opt_extraHttpRequestParams);
  }

  return (/** @type {?} */ (this.http_))(httpRequestParams);
}

/**
 * 
 * 
 * @param {!boolean=} opt_post 
 * @param {!boolean=} opt_apply 
 * @param {!boolean=} opt_delete 
 * @param {!string=} opt_action 
 * @param {!string=} opt_location 
 * @param {!Array<!string>=} opt_propertylist 
 * @param {!string=} opt_eventTopics 
 * @param {!string=} opt_eventFilter 
 * @param {!Array<!string>=} opt_translateListenerType 
 * @param {!Array<!string>=} opt_translatePropertyList 
 * @param {!number=} opt_poolSize 
 * @param {!number=} opt_maxPoolSize 
 * @param {!number=} opt_queueSize 
 * @param {!number=} opt_keepAliveTime 
 * @param {!angular.$http.Config=} opt_extraHttpRequestParams Extra HTTP parameters to send.
 * @return {!angular.$q.Promise<!API.Client.comAdobeCqSocialTranslationImplUGCLanguageDetectorInfo>}
 */
API.Client.ConfigmgrApi.prototype.comAdobeCqSocialTranslationImplUGCLanguageDetector = function(opt_post, opt_apply, opt_delete, opt_action, opt_location, opt_propertylist, opt_eventTopics, opt_eventFilter, opt_translateListenerType, opt_translatePropertyList, opt_poolSize, opt_maxPoolSize, opt_queueSize, opt_keepAliveTime, opt_extraHttpRequestParams) {
  /** @const {string} */
  var path = this.basePath_ + '/system/console/configMgr/com.adobe.cq.social.translation.impl.UGCLanguageDetector';

  /** @type {!Object} */
  var queryParameters = {};

  /** @type {!Object} */
  var headerParams = angular.extend({}, this.defaultHeaders_);
  if (opt_post !== undefined) {
    queryParameters['post'] = opt_post;
  }

  if (opt_apply !== undefined) {
    queryParameters['apply'] = opt_apply;
  }

  if (opt_delete !== undefined) {
    queryParameters['delete'] = opt_delete;
  }

  if (opt_action !== undefined) {
    queryParameters['action'] = opt_action;
  }

  if (opt_location !== undefined) {
    queryParameters['$location'] = opt_location;
  }

  if (opt_propertylist !== undefined) {
    queryParameters['propertylist'] = opt_propertylist;
  }

  if (opt_eventTopics !== undefined) {
    queryParameters['event.topics'] = opt_eventTopics;
  }

  if (opt_eventFilter !== undefined) {
    queryParameters['event.filter'] = opt_eventFilter;
  }

  if (opt_translateListenerType !== undefined) {
    queryParameters['translate.listener.type'] = opt_translateListenerType;
  }

  if (opt_translatePropertyList !== undefined) {
    queryParameters['translate.property.list'] = opt_translatePropertyList;
  }

  if (opt_poolSize !== undefined) {
    queryParameters['poolSize'] = opt_poolSize;
  }

  if (opt_maxPoolSize !== undefined) {
    queryParameters['maxPoolSize'] = opt_maxPoolSize;
  }

  if (opt_queueSize !== undefined) {
    queryParameters['queueSize'] = opt_queueSize;
  }

  if (opt_keepAliveTime !== undefined) {
    queryParameters['keepAliveTime'] = opt_keepAliveTime;
  }

  /** @type {!Object} */
  var httpRequestParams = {
    method: 'POST',
    url: path,
    json: true,
            params: queryParameters,
    headers: headerParams
  };

  if (opt_extraHttpRequestParams) {
    httpRequestParams = angular.extend(httpRequestParams, opt_extraHttpRequestParams);
  }

  return (/** @type {?} */ (this.http_))(httpRequestParams);
}

/**
 * 
 * 
 * @param {!boolean=} opt_post 
 * @param {!boolean=} opt_apply 
 * @param {!boolean=} opt_delete 
 * @param {!string=} opt_action 
 * @param {!string=} opt_location 
 * @param {!Array<!string>=} opt_propertylist 
 * @param {!number=} opt_threadPoolSize 
 * @param {!number=} opt_delayTime 
 * @param {!number=} opt_workerSleepTime 
 * @param {!angular.$http.Config=} opt_extraHttpRequestParams Extra HTTP parameters to send.
 * @return {!angular.$q.Promise<!API.Client.comAdobeCqSocialUgcbaseDispatcherImplFlushServiceImplInfo>}
 */
API.Client.ConfigmgrApi.prototype.comAdobeCqSocialUgcbaseDispatcherImplFlushServiceImpl = function(opt_post, opt_apply, opt_delete, opt_action, opt_location, opt_propertylist, opt_threadPoolSize, opt_delayTime, opt_workerSleepTime, opt_extraHttpRequestParams) {
  /** @const {string} */
  var path = this.basePath_ + '/system/console/configMgr/com.adobe.cq.social.ugcbase.dispatcher.impl.FlushServiceImpl';

  /** @type {!Object} */
  var queryParameters = {};

  /** @type {!Object} */
  var headerParams = angular.extend({}, this.defaultHeaders_);
  if (opt_post !== undefined) {
    queryParameters['post'] = opt_post;
  }

  if (opt_apply !== undefined) {
    queryParameters['apply'] = opt_apply;
  }

  if (opt_delete !== undefined) {
    queryParameters['delete'] = opt_delete;
  }

  if (opt_action !== undefined) {
    queryParameters['action'] = opt_action;
  }

  if (opt_location !== undefined) {
    queryParameters['$location'] = opt_location;
  }

  if (opt_propertylist !== undefined) {
    queryParameters['propertylist'] = opt_propertylist;
  }

  if (opt_threadPoolSize !== undefined) {
    queryParameters['threadPoolSize'] = opt_threadPoolSize;
  }

  if (opt_delayTime !== undefined) {
    queryParameters['delayTime'] = opt_delayTime;
  }

  if (opt_workerSleepTime !== undefined) {
    queryParameters['workerSleepTime'] = opt_workerSleepTime;
  }

  /** @type {!Object} */
  var httpRequestParams = {
    method: 'POST',
    url: path,
    json: true,
            params: queryParameters,
    headers: headerParams
  };

  if (opt_extraHttpRequestParams) {
    httpRequestParams = angular.extend(httpRequestParams, opt_extraHttpRequestParams);
  }

  return (/** @type {?} */ (this.http_))(httpRequestParams);
}

/**
 * 
 * 
 * @param {!boolean=} opt_post 
 * @param {!boolean=} opt_apply 
 * @param {!boolean=} opt_delete 
 * @param {!string=} opt_action 
 * @param {!string=} opt_location 
 * @param {!Array<!string>=} opt_propertylist 
 * @param {!number=} opt_poolSize 
 * @param {!number=} opt_maxPoolSize 
 * @param {!number=} opt_queueSize 
 * @param {!number=} opt_keepAliveTime 
 * @param {!angular.$http.Config=} opt_extraHttpRequestParams Extra HTTP parameters to send.
 * @return {!angular.$q.Promise<!API.Client.comAdobeCqSocialUgcbaseImplAysncReverseReplicatorImplInfo>}
 */
API.Client.ConfigmgrApi.prototype.comAdobeCqSocialUgcbaseImplAysncReverseReplicatorImpl = function(opt_post, opt_apply, opt_delete, opt_action, opt_location, opt_propertylist, opt_poolSize, opt_maxPoolSize, opt_queueSize, opt_keepAliveTime, opt_extraHttpRequestParams) {
  /** @const {string} */
  var path = this.basePath_ + '/system/console/configMgr/com.adobe.cq.social.ugcbase.impl.AysncReverseReplicatorImpl';

  /** @type {!Object} */
  var queryParameters = {};

  /** @type {!Object} */
  var headerParams = angular.extend({}, this.defaultHeaders_);
  if (opt_post !== undefined) {
    queryParameters['post'] = opt_post;
  }

  if (opt_apply !== undefined) {
    queryParameters['apply'] = opt_apply;
  }

  if (opt_delete !== undefined) {
    queryParameters['delete'] = opt_delete;
  }

  if (opt_action !== undefined) {
    queryParameters['action'] = opt_action;
  }

  if (opt_location !== undefined) {
    queryParameters['$location'] = opt_location;
  }

  if (opt_propertylist !== undefined) {
    queryParameters['propertylist'] = opt_propertylist;
  }

  if (opt_poolSize !== undefined) {
    queryParameters['poolSize'] = opt_poolSize;
  }

  if (opt_maxPoolSize !== undefined) {
    queryParameters['maxPoolSize'] = opt_maxPoolSize;
  }

  if (opt_queueSize !== undefined) {
    queryParameters['queueSize'] = opt_queueSize;
  }

  if (opt_keepAliveTime !== undefined) {
    queryParameters['keepAliveTime'] = opt_keepAliveTime;
  }

  /** @type {!Object} */
  var httpRequestParams = {
    method: 'POST',
    url: path,
    json: true,
            params: queryParameters,
    headers: headerParams
  };

  if (opt_extraHttpRequestParams) {
    httpRequestParams = angular.extend(httpRequestParams, opt_extraHttpRequestParams);
  }

  return (/** @type {?} */ (this.http_))(httpRequestParams);
}

/**
 * 
 * 
 * @param {!boolean=} opt_post 
 * @param {!boolean=} opt_apply 
 * @param {!boolean=} opt_delete 
 * @param {!string=} opt_action 
 * @param {!string=} opt_location 
 * @param {!Array<!string>=} opt_propertylist 
 * @param {!boolean=} opt_isPrimaryPublisher 
 * @param {!angular.$http.Config=} opt_extraHttpRequestParams Extra HTTP parameters to send.
 * @return {!angular.$q.Promise<!API.Client.comAdobeCqSocialUgcbaseImplPublisherConfigurationImplInfo>}
 */
API.Client.ConfigmgrApi.prototype.comAdobeCqSocialUgcbaseImplPublisherConfigurationImpl = function(opt_post, opt_apply, opt_delete, opt_action, opt_location, opt_propertylist, opt_isPrimaryPublisher, opt_extraHttpRequestParams) {
  /** @const {string} */
  var path = this.basePath_ + '/system/console/configMgr/com.adobe.cq.social.ugcbase.impl.PublisherConfigurationImpl';

  /** @type {!Object} */
  var queryParameters = {};

  /** @type {!Object} */
  var headerParams = angular.extend({}, this.defaultHeaders_);
  if (opt_post !== undefined) {
    queryParameters['post'] = opt_post;
  }

  if (opt_apply !== undefined) {
    queryParameters['apply'] = opt_apply;
  }

  if (opt_delete !== undefined) {
    queryParameters['delete'] = opt_delete;
  }

  if (opt_action !== undefined) {
    queryParameters['action'] = opt_action;
  }

  if (opt_location !== undefined) {
    queryParameters['$location'] = opt_location;
  }

  if (opt_propertylist !== undefined) {
    queryParameters['propertylist'] = opt_propertylist;
  }

  if (opt_isPrimaryPublisher !== undefined) {
    queryParameters['isPrimaryPublisher'] = opt_isPrimaryPublisher;
  }

  /** @type {!Object} */
  var httpRequestParams = {
    method: 'POST',
    url: path,
    json: true,
            params: queryParameters,
    headers: headerParams
  };

  if (opt_extraHttpRequestParams) {
    httpRequestParams = angular.extend(httpRequestParams, opt_extraHttpRequestParams);
  }

  return (/** @type {?} */ (this.http_))(httpRequestParams);
}

/**
 * 
 * 
 * @param {!boolean=} opt_post 
 * @param {!boolean=} opt_apply 
 * @param {!boolean=} opt_delete 
 * @param {!string=} opt_action 
 * @param {!string=} opt_location 
 * @param {!Array<!string>=} opt_propertylist 
 * @param {!boolean=} opt_legacyCloudUGCPathMapping 
 * @param {!angular.$http.Config=} opt_extraHttpRequestParams Extra HTTP parameters to send.
 * @return {!angular.$q.Promise<!API.Client.comAdobeCqSocialUgcbaseImplSocialUtilsImplInfo>}
 */
API.Client.ConfigmgrApi.prototype.comAdobeCqSocialUgcbaseImplSocialUtilsImpl = function(opt_post, opt_apply, opt_delete, opt_action, opt_location, opt_propertylist, opt_legacyCloudUGCPathMapping, opt_extraHttpRequestParams) {
  /** @const {string} */
  var path = this.basePath_ + '/system/console/configMgr/com.adobe.cq.social.ugcbase.impl.SocialUtilsImpl';

  /** @type {!Object} */
  var queryParameters = {};

  /** @type {!Object} */
  var headerParams = angular.extend({}, this.defaultHeaders_);
  if (opt_post !== undefined) {
    queryParameters['post'] = opt_post;
  }

  if (opt_apply !== undefined) {
    queryParameters['apply'] = opt_apply;
  }

  if (opt_delete !== undefined) {
    queryParameters['delete'] = opt_delete;
  }

  if (opt_action !== undefined) {
    queryParameters['action'] = opt_action;
  }

  if (opt_location !== undefined) {
    queryParameters['$location'] = opt_location;
  }

  if (opt_propertylist !== undefined) {
    queryParameters['propertylist'] = opt_propertylist;
  }

  if (opt_legacyCloudUGCPathMapping !== undefined) {
    queryParameters['legacyCloudUGCPathMapping'] = opt_legacyCloudUGCPathMapping;
  }

  /** @type {!Object} */
  var httpRequestParams = {
    method: 'POST',
    url: path,
    json: true,
            params: queryParameters,
    headers: headerParams
  };

  if (opt_extraHttpRequestParams) {
    httpRequestParams = angular.extend(httpRequestParams, opt_extraHttpRequestParams);
  }

  return (/** @type {?} */ (this.http_))(httpRequestParams);
}

/**
 * 
 * 
 * @param {!boolean=} opt_post 
 * @param {!boolean=} opt_apply 
 * @param {!boolean=} opt_delete 
 * @param {!string=} opt_action 
 * @param {!string=} opt_location 
 * @param {!Array<!string>=} opt_propertylist 
 * @param {!Array<!string>=} opt_automoderationSequence 
 * @param {!boolean=} opt_automoderationOnfailurestop 
 * @param {!angular.$http.Config=} opt_extraHttpRequestParams Extra HTTP parameters to send.
 * @return {!angular.$q.Promise<!API.Client.comAdobeCqSocialUgcbaseModerationImplAutoModerationImplInfo>}
 */
API.Client.ConfigmgrApi.prototype.comAdobeCqSocialUgcbaseModerationImplAutoModerationImpl = function(opt_post, opt_apply, opt_delete, opt_action, opt_location, opt_propertylist, opt_automoderationSequence, opt_automoderationOnfailurestop, opt_extraHttpRequestParams) {
  /** @const {string} */
  var path = this.basePath_ + '/system/console/configMgr/com.adobe.cq.social.ugcbase.moderation.impl.AutoModerationImpl';

  /** @type {!Object} */
  var queryParameters = {};

  /** @type {!Object} */
  var headerParams = angular.extend({}, this.defaultHeaders_);
  if (opt_post !== undefined) {
    queryParameters['post'] = opt_post;
  }

  if (opt_apply !== undefined) {
    queryParameters['apply'] = opt_apply;
  }

  if (opt_delete !== undefined) {
    queryParameters['delete'] = opt_delete;
  }

  if (opt_action !== undefined) {
    queryParameters['action'] = opt_action;
  }

  if (opt_location !== undefined) {
    queryParameters['$location'] = opt_location;
  }

  if (opt_propertylist !== undefined) {
    queryParameters['propertylist'] = opt_propertylist;
  }

  if (opt_automoderationSequence !== undefined) {
    queryParameters['automoderation.sequence'] = opt_automoderationSequence;
  }

  if (opt_automoderationOnfailurestop !== undefined) {
    queryParameters['automoderation.onfailurestop'] = opt_automoderationOnfailurestop;
  }

  /** @type {!Object} */
  var httpRequestParams = {
    method: 'POST',
    url: path,
    json: true,
            params: queryParameters,
    headers: headerParams
  };

  if (opt_extraHttpRequestParams) {
    httpRequestParams = angular.extend(httpRequestParams, opt_extraHttpRequestParams);
  }

  return (/** @type {?} */ (this.http_))(httpRequestParams);
}

/**
 * 
 * 
 * @param {!boolean=} opt_post 
 * @param {!boolean=} opt_apply 
 * @param {!boolean=} opt_delete 
 * @param {!string=} opt_action 
 * @param {!string=} opt_location 
 * @param {!Array<!string>=} opt_propertylist 
 * @param {!Array<!string>=} opt_watchwordsPositive 
 * @param {!Array<!string>=} opt_watchwordsNegative 
 * @param {!string=} opt_watchwordsPath 
 * @param {!string=} opt_sentimentPath 
 * @param {!angular.$http.Config=} opt_extraHttpRequestParams Extra HTTP parameters to send.
 * @return {!angular.$q.Promise<!API.Client.comAdobeCqSocialUgcbaseModerationImplSentimentProcessInfo>}
 */
API.Client.ConfigmgrApi.prototype.comAdobeCqSocialUgcbaseModerationImplSentimentProcess = function(opt_post, opt_apply, opt_delete, opt_action, opt_location, opt_propertylist, opt_watchwordsPositive, opt_watchwordsNegative, opt_watchwordsPath, opt_sentimentPath, opt_extraHttpRequestParams) {
  /** @const {string} */
  var path = this.basePath_ + '/system/console/configMgr/com.adobe.cq.social.ugcbase.moderation.impl.SentimentProcess';

  /** @type {!Object} */
  var queryParameters = {};

  /** @type {!Object} */
  var headerParams = angular.extend({}, this.defaultHeaders_);
  if (opt_post !== undefined) {
    queryParameters['post'] = opt_post;
  }

  if (opt_apply !== undefined) {
    queryParameters['apply'] = opt_apply;
  }

  if (opt_delete !== undefined) {
    queryParameters['delete'] = opt_delete;
  }

  if (opt_action !== undefined) {
    queryParameters['action'] = opt_action;
  }

  if (opt_location !== undefined) {
    queryParameters['$location'] = opt_location;
  }

  if (opt_propertylist !== undefined) {
    queryParameters['propertylist'] = opt_propertylist;
  }

  if (opt_watchwordsPositive !== undefined) {
    queryParameters['watchwords.positive'] = opt_watchwordsPositive;
  }

  if (opt_watchwordsNegative !== undefined) {
    queryParameters['watchwords.negative'] = opt_watchwordsNegative;
  }

  if (opt_watchwordsPath !== undefined) {
    queryParameters['watchwords.path'] = opt_watchwordsPath;
  }

  if (opt_sentimentPath !== undefined) {
    queryParameters['sentiment.path'] = opt_sentimentPath;
  }

  /** @type {!Object} */
  var httpRequestParams = {
    method: 'POST',
    url: path,
    json: true,
            params: queryParameters,
    headers: headerParams
  };

  if (opt_extraHttpRequestParams) {
    httpRequestParams = angular.extend(httpRequestParams, opt_extraHttpRequestParams);
  }

  return (/** @type {?} */ (this.http_))(httpRequestParams);
}

/**
 * 
 * 
 * @param {!boolean=} opt_post 
 * @param {!boolean=} opt_apply 
 * @param {!boolean=} opt_delete 
 * @param {!string=} opt_action 
 * @param {!string=} opt_location 
 * @param {!Array<!string>=} opt_propertylist 
 * @param {!Array<!string>=} opt_defaultAttachmentTypeBlacklist 
 * @param {!Array<!string>=} opt_baselineAttachmentTypeBlacklist 
 * @param {!angular.$http.Config=} opt_extraHttpRequestParams Extra HTTP parameters to send.
 * @return {!angular.$q.Promise<!API.Client.comAdobeCqSocialUgcbaseSecurityImplDefaultAttachmentTypeBlackliInfo>}
 */
API.Client.ConfigmgrApi.prototype.comAdobeCqSocialUgcbaseSecurityImplDefaultAttachmentTypeBlackli = function(opt_post, opt_apply, opt_delete, opt_action, opt_location, opt_propertylist, opt_defaultAttachmentTypeBlacklist, opt_baselineAttachmentTypeBlacklist, opt_extraHttpRequestParams) {
  /** @const {string} */
  var path = this.basePath_ + '/system/console/configMgr/com.adobe.cq.social.ugcbase.security.impl.DefaultAttachmentTypeBlacklistService';

  /** @type {!Object} */
  var queryParameters = {};

  /** @type {!Object} */
  var headerParams = angular.extend({}, this.defaultHeaders_);
  if (opt_post !== undefined) {
    queryParameters['post'] = opt_post;
  }

  if (opt_apply !== undefined) {
    queryParameters['apply'] = opt_apply;
  }

  if (opt_delete !== undefined) {
    queryParameters['delete'] = opt_delete;
  }

  if (opt_action !== undefined) {
    queryParameters['action'] = opt_action;
  }

  if (opt_location !== undefined) {
    queryParameters['$location'] = opt_location;
  }

  if (opt_propertylist !== undefined) {
    queryParameters['propertylist'] = opt_propertylist;
  }

  if (opt_defaultAttachmentTypeBlacklist !== undefined) {
    queryParameters['default.attachment.type.blacklist'] = opt_defaultAttachmentTypeBlacklist;
  }

  if (opt_baselineAttachmentTypeBlacklist !== undefined) {
    queryParameters['baseline.attachment.type.blacklist'] = opt_baselineAttachmentTypeBlacklist;
  }

  /** @type {!Object} */
  var httpRequestParams = {
    method: 'POST',
    url: path,
    json: true,
            params: queryParameters,
    headers: headerParams
  };

  if (opt_extraHttpRequestParams) {
    httpRequestParams = angular.extend(httpRequestParams, opt_extraHttpRequestParams);
  }

  return (/** @type {?} */ (this.http_))(httpRequestParams);
}

/**
 * 
 * 
 * @param {!boolean=} opt_post 
 * @param {!boolean=} opt_apply 
 * @param {!boolean=} opt_delete 
 * @param {!string=} opt_action 
 * @param {!string=} opt_location 
 * @param {!Array<!string>=} opt_propertylist 
 * @param {!Array<!string>=} opt_parameterWhitelist 
 * @param {!Array<!string>=} opt_parameterWhitelistPrefixes 
 * @param {!Array<!string>=} opt_binaryParameterWhitelist 
 * @param {!Array<!string>=} opt_modifierWhitelist 
 * @param {!Array<!string>=} opt_operationWhitelist 
 * @param {!Array<!string>=} opt_operationWhitelistPrefixes 
 * @param {!Array<!string>=} opt_typehintWhitelist 
 * @param {!Array<!string>=} opt_resourcetypeWhitelist 
 * @param {!angular.$http.Config=} opt_extraHttpRequestParams Extra HTTP parameters to send.
 * @return {!angular.$q.Promise<!API.Client.comAdobeCqSocialUgcbaseSecurityImplSaferSlingPostValidatorImplInfo>}
 */
API.Client.ConfigmgrApi.prototype.comAdobeCqSocialUgcbaseSecurityImplSaferSlingPostValidatorImpl = function(opt_post, opt_apply, opt_delete, opt_action, opt_location, opt_propertylist, opt_parameterWhitelist, opt_parameterWhitelistPrefixes, opt_binaryParameterWhitelist, opt_modifierWhitelist, opt_operationWhitelist, opt_operationWhitelistPrefixes, opt_typehintWhitelist, opt_resourcetypeWhitelist, opt_extraHttpRequestParams) {
  /** @const {string} */
  var path = this.basePath_ + '/system/console/configMgr/com.adobe.cq.social.ugcbase.security.impl.SaferSlingPostValidatorImpl';

  /** @type {!Object} */
  var queryParameters = {};

  /** @type {!Object} */
  var headerParams = angular.extend({}, this.defaultHeaders_);
  if (opt_post !== undefined) {
    queryParameters['post'] = opt_post;
  }

  if (opt_apply !== undefined) {
    queryParameters['apply'] = opt_apply;
  }

  if (opt_delete !== undefined) {
    queryParameters['delete'] = opt_delete;
  }

  if (opt_action !== undefined) {
    queryParameters['action'] = opt_action;
  }

  if (opt_location !== undefined) {
    queryParameters['$location'] = opt_location;
  }

  if (opt_propertylist !== undefined) {
    queryParameters['propertylist'] = opt_propertylist;
  }

  if (opt_parameterWhitelist !== undefined) {
    queryParameters['parameter.whitelist'] = opt_parameterWhitelist;
  }

  if (opt_parameterWhitelistPrefixes !== undefined) {
    queryParameters['parameter.whitelist.prefixes'] = opt_parameterWhitelistPrefixes;
  }

  if (opt_binaryParameterWhitelist !== undefined) {
    queryParameters['binary.parameter.whitelist'] = opt_binaryParameterWhitelist;
  }

  if (opt_modifierWhitelist !== undefined) {
    queryParameters['modifier.whitelist'] = opt_modifierWhitelist;
  }

  if (opt_operationWhitelist !== undefined) {
    queryParameters['operation.whitelist'] = opt_operationWhitelist;
  }

  if (opt_operationWhitelistPrefixes !== undefined) {
    queryParameters['operation.whitelist.prefixes'] = opt_operationWhitelistPrefixes;
  }

  if (opt_typehintWhitelist !== undefined) {
    queryParameters['typehint.whitelist'] = opt_typehintWhitelist;
  }

  if (opt_resourcetypeWhitelist !== undefined) {
    queryParameters['resourcetype.whitelist'] = opt_resourcetypeWhitelist;
  }

  /** @type {!Object} */
  var httpRequestParams = {
    method: 'POST',
    url: path,
    json: true,
            params: queryParameters,
    headers: headerParams
  };

  if (opt_extraHttpRequestParams) {
    httpRequestParams = angular.extend(httpRequestParams, opt_extraHttpRequestParams);
  }

  return (/** @type {?} */ (this.http_))(httpRequestParams);
}

/**
 * 
 * 
 * @param {!boolean=} opt_post 
 * @param {!boolean=} opt_apply 
 * @param {!boolean=} opt_delete 
 * @param {!string=} opt_action 
 * @param {!string=} opt_location 
 * @param {!Array<!string>=} opt_propertylist 
 * @param {!string=} opt_slingServletExtensions 
 * @param {!string=} opt_slingServletPaths 
 * @param {!string=} opt_slingServletMethods 
 * @param {!angular.$http.Config=} opt_extraHttpRequestParams Extra HTTP parameters to send.
 * @return {!angular.$q.Promise<!API.Client.comAdobeCqSocialUserEndpointsImplUsersGroupFromPublishServletInfo>}
 */
API.Client.ConfigmgrApi.prototype.comAdobeCqSocialUserEndpointsImplUsersGroupFromPublishServlet = function(opt_post, opt_apply, opt_delete, opt_action, opt_location, opt_propertylist, opt_slingServletExtensions, opt_slingServletPaths, opt_slingServletMethods, opt_extraHttpRequestParams) {
  /** @const {string} */
  var path = this.basePath_ + '/system/console/configMgr/com.adobe.cq.social.user.endpoints.impl.UsersGroupFromPublishServlet';

  /** @type {!Object} */
  var queryParameters = {};

  /** @type {!Object} */
  var headerParams = angular.extend({}, this.defaultHeaders_);
  if (opt_post !== undefined) {
    queryParameters['post'] = opt_post;
  }

  if (opt_apply !== undefined) {
    queryParameters['apply'] = opt_apply;
  }

  if (opt_delete !== undefined) {
    queryParameters['delete'] = opt_delete;
  }

  if (opt_action !== undefined) {
    queryParameters['action'] = opt_action;
  }

  if (opt_location !== undefined) {
    queryParameters['$location'] = opt_location;
  }

  if (opt_propertylist !== undefined) {
    queryParameters['propertylist'] = opt_propertylist;
  }

  if (opt_slingServletExtensions !== undefined) {
    queryParameters['sling.servlet.extensions'] = opt_slingServletExtensions;
  }

  if (opt_slingServletPaths !== undefined) {
    queryParameters['sling.servlet.paths'] = opt_slingServletPaths;
  }

  if (opt_slingServletMethods !== undefined) {
    queryParameters['sling.servlet.methods'] = opt_slingServletMethods;
  }

  /** @type {!Object} */
  var httpRequestParams = {
    method: 'POST',
    url: path,
    json: true,
            params: queryParameters,
    headers: headerParams
  };

  if (opt_extraHttpRequestParams) {
    httpRequestParams = angular.extend(httpRequestParams, opt_extraHttpRequestParams);
  }

  return (/** @type {?} */ (this.http_))(httpRequestParams);
}

/**
 * 
 * 
 * @param {!boolean=} opt_post 
 * @param {!boolean=} opt_apply 
 * @param {!boolean=} opt_delete 
 * @param {!string=} opt_action 
 * @param {!string=} opt_location 
 * @param {!Array<!string>=} opt_propertylist 
 * @param {!boolean=} opt_enable 
 * @param {!Array<!string>=} opt_agentConfiguration 
 * @param {!string=} opt_contextPath 
 * @param {!Array<!string>=} opt_disabledCipherSuites 
 * @param {!Array<!string>=} opt_enabledCipherSuites 
 * @param {!angular.$http.Config=} opt_extraHttpRequestParams Extra HTTP parameters to send.
 * @return {!angular.$q.Promise<!API.Client.comAdobeCqSocialUserImplTransportHttpToPublisherInfo>}
 */
API.Client.ConfigmgrApi.prototype.comAdobeCqSocialUserImplTransportHttpToPublisher = function(opt_post, opt_apply, opt_delete, opt_action, opt_location, opt_propertylist, opt_enable, opt_agentConfiguration, opt_contextPath, opt_disabledCipherSuites, opt_enabledCipherSuites, opt_extraHttpRequestParams) {
  /** @const {string} */
  var path = this.basePath_ + '/system/console/configMgr/com.adobe.cq.social.user.impl.transport.HttpToPublisher';

  /** @type {!Object} */
  var queryParameters = {};

  /** @type {!Object} */
  var headerParams = angular.extend({}, this.defaultHeaders_);
  if (opt_post !== undefined) {
    queryParameters['post'] = opt_post;
  }

  if (opt_apply !== undefined) {
    queryParameters['apply'] = opt_apply;
  }

  if (opt_delete !== undefined) {
    queryParameters['delete'] = opt_delete;
  }

  if (opt_action !== undefined) {
    queryParameters['action'] = opt_action;
  }

  if (opt_location !== undefined) {
    queryParameters['$location'] = opt_location;
  }

  if (opt_propertylist !== undefined) {
    queryParameters['propertylist'] = opt_propertylist;
  }

  if (opt_enable !== undefined) {
    queryParameters['enable'] = opt_enable;
  }

  if (opt_agentConfiguration !== undefined) {
    queryParameters['agent.configuration'] = opt_agentConfiguration;
  }

  if (opt_contextPath !== undefined) {
    queryParameters['context.path'] = opt_contextPath;
  }

  if (opt_disabledCipherSuites !== undefined) {
    queryParameters['disabled.cipher.suites'] = opt_disabledCipherSuites;
  }

  if (opt_enabledCipherSuites !== undefined) {
    queryParameters['enabled.cipher.suites'] = opt_enabledCipherSuites;
  }

  /** @type {!Object} */
  var httpRequestParams = {
    method: 'POST',
    url: path,
    json: true,
            params: queryParameters,
    headers: headerParams
  };

  if (opt_extraHttpRequestParams) {
    httpRequestParams = angular.extend(httpRequestParams, opt_extraHttpRequestParams);
  }

  return (/** @type {?} */ (this.http_))(httpRequestParams);
}

/**
 * 
 * 
 * @param {!boolean=} opt_post 
 * @param {!boolean=} opt_apply 
 * @param {!boolean=} opt_delete 
 * @param {!string=} opt_action 
 * @param {!string=} opt_location 
 * @param {!Array<!string>=} opt_propertylist 
 * @param {!Array<!string>=} opt_resourceTypes 
 * @param {!angular.$http.Config=} opt_extraHttpRequestParams Extra HTTP parameters to send.
 * @return {!angular.$q.Promise<!API.Client.comAdobeCqUiWcmCommonsInternalServletsRteRTEFilterServletFactInfo>}
 */
API.Client.ConfigmgrApi.prototype.comAdobeCqUiWcmCommonsInternalServletsRteRTEFilterServletFact = function(opt_post, opt_apply, opt_delete, opt_action, opt_location, opt_propertylist, opt_resourceTypes, opt_extraHttpRequestParams) {
  /** @const {string} */
  var path = this.basePath_ + '/system/console/configMgr/com.adobe.cq.ui.wcm.commons.internal.servlets.rte.RTEFilterServletFactory.amended';

  /** @type {!Object} */
  var queryParameters = {};

  /** @type {!Object} */
  var headerParams = angular.extend({}, this.defaultHeaders_);
  if (opt_post !== undefined) {
    queryParameters['post'] = opt_post;
  }

  if (opt_apply !== undefined) {
    queryParameters['apply'] = opt_apply;
  }

  if (opt_delete !== undefined) {
    queryParameters['delete'] = opt_delete;
  }

  if (opt_action !== undefined) {
    queryParameters['action'] = opt_action;
  }

  if (opt_location !== undefined) {
    queryParameters['$location'] = opt_location;
  }

  if (opt_propertylist !== undefined) {
    queryParameters['propertylist'] = opt_propertylist;
  }

  if (opt_resourceTypes !== undefined) {
    queryParameters['resource.types'] = opt_resourceTypes;
  }

  /** @type {!Object} */
  var httpRequestParams = {
    method: 'POST',
    url: path,
    json: true,
            params: queryParameters,
    headers: headerParams
  };

  if (opt_extraHttpRequestParams) {
    httpRequestParams = angular.extend(httpRequestParams, opt_extraHttpRequestParams);
  }

  return (/** @type {?} */ (this.http_))(httpRequestParams);
}

/**
 * 
 * 
 * @param {!boolean=} opt_post 
 * @param {!boolean=} opt_apply 
 * @param {!boolean=} opt_delete 
 * @param {!string=} opt_action 
 * @param {!string=} opt_location 
 * @param {!Array<!string>=} opt_propertylist 
 * @param {!Array<!string>=} opt_deletePathRegexps 
 * @param {!string=} opt_deleteSql2Query 
 * @param {!angular.$http.Config=} opt_extraHttpRequestParams Extra HTTP parameters to send.
 * @return {!angular.$q.Promise<!API.Client.comAdobeCqUpgradesCleanupImplUpgradeContentCleanupInfo>}
 */
API.Client.ConfigmgrApi.prototype.comAdobeCqUpgradesCleanupImplUpgradeContentCleanup = function(opt_post, opt_apply, opt_delete, opt_action, opt_location, opt_propertylist, opt_deletePathRegexps, opt_deleteSql2Query, opt_extraHttpRequestParams) {
  /** @const {string} */
  var path = this.basePath_ + '/system/console/configMgr/com.adobe.cq.upgrades.cleanup.impl.UpgradeContentCleanup';

  /** @type {!Object} */
  var queryParameters = {};

  /** @type {!Object} */
  var headerParams = angular.extend({}, this.defaultHeaders_);
  if (opt_post !== undefined) {
    queryParameters['post'] = opt_post;
  }

  if (opt_apply !== undefined) {
    queryParameters['apply'] = opt_apply;
  }

  if (opt_delete !== undefined) {
    queryParameters['delete'] = opt_delete;
  }

  if (opt_action !== undefined) {
    queryParameters['action'] = opt_action;
  }

  if (opt_location !== undefined) {
    queryParameters['$location'] = opt_location;
  }

  if (opt_propertylist !== undefined) {
    queryParameters['propertylist'] = opt_propertylist;
  }

  if (opt_deletePathRegexps !== undefined) {
    queryParameters['delete.path.regexps'] = opt_deletePathRegexps;
  }

  if (opt_deleteSql2Query !== undefined) {
    queryParameters['delete.sql2.query'] = opt_deleteSql2Query;
  }

  /** @type {!Object} */
  var httpRequestParams = {
    method: 'POST',
    url: path,
    json: true,
            params: queryParameters,
    headers: headerParams
  };

  if (opt_extraHttpRequestParams) {
    httpRequestParams = angular.extend(httpRequestParams, opt_extraHttpRequestParams);
  }

  return (/** @type {?} */ (this.http_))(httpRequestParams);
}

/**
 * 
 * 
 * @param {!boolean=} opt_post 
 * @param {!boolean=} opt_apply 
 * @param {!boolean=} opt_delete 
 * @param {!string=} opt_action 
 * @param {!string=} opt_location 
 * @param {!Array<!string>=} opt_propertylist 
 * @param {!Array<!string>=} opt_deleteNameRegexps 
 * @param {!angular.$http.Config=} opt_extraHttpRequestParams Extra HTTP parameters to send.
 * @return {!angular.$q.Promise<!API.Client.comAdobeCqUpgradesCleanupImplUpgradeInstallFolderCleanupInfo>}
 */
API.Client.ConfigmgrApi.prototype.comAdobeCqUpgradesCleanupImplUpgradeInstallFolderCleanup = function(opt_post, opt_apply, opt_delete, opt_action, opt_location, opt_propertylist, opt_deleteNameRegexps, opt_extraHttpRequestParams) {
  /** @const {string} */
  var path = this.basePath_ + '/system/console/configMgr/com.adobe.cq.upgrades.cleanup.impl.UpgradeInstallFolderCleanup';

  /** @type {!Object} */
  var queryParameters = {};

  /** @type {!Object} */
  var headerParams = angular.extend({}, this.defaultHeaders_);
  if (opt_post !== undefined) {
    queryParameters['post'] = opt_post;
  }

  if (opt_apply !== undefined) {
    queryParameters['apply'] = opt_apply;
  }

  if (opt_delete !== undefined) {
    queryParameters['delete'] = opt_delete;
  }

  if (opt_action !== undefined) {
    queryParameters['action'] = opt_action;
  }

  if (opt_location !== undefined) {
    queryParameters['$location'] = opt_location;
  }

  if (opt_propertylist !== undefined) {
    queryParameters['propertylist'] = opt_propertylist;
  }

  if (opt_deleteNameRegexps !== undefined) {
    queryParameters['delete.name.regexps'] = opt_deleteNameRegexps;
  }

  /** @type {!Object} */
  var httpRequestParams = {
    method: 'POST',
    url: path,
    json: true,
            params: queryParameters,
    headers: headerParams
  };

  if (opt_extraHttpRequestParams) {
    httpRequestParams = angular.extend(httpRequestParams, opt_extraHttpRequestParams);
  }

  return (/** @type {?} */ (this.http_))(httpRequestParams);
}

/**
 * 
 * 
 * @param {!boolean=} opt_post 
 * @param {!boolean=} opt_apply 
 * @param {!boolean=} opt_delete 
 * @param {!string=} opt_action 
 * @param {!string=} opt_location 
 * @param {!Array<!string>=} opt_propertylist 
 * @param {!number=} opt_threshold 
 * @param {!string=} opt_jobTopicName 
 * @param {!boolean=} opt_emailEnabled 
 * @param {!angular.$http.Config=} opt_extraHttpRequestParams Extra HTTP parameters to send.
 * @return {!angular.$q.Promise<!API.Client.comAdobeCqWcmJobsAsyncImplAsyncDeleteConfigProviderServiceInfo>}
 */
API.Client.ConfigmgrApi.prototype.comAdobeCqWcmJobsAsyncImplAsyncDeleteConfigProviderService = function(opt_post, opt_apply, opt_delete, opt_action, opt_location, opt_propertylist, opt_threshold, opt_jobTopicName, opt_emailEnabled, opt_extraHttpRequestParams) {
  /** @const {string} */
  var path = this.basePath_ + '/system/console/configMgr/com.adobe.cq.wcm.jobs.async.impl.AsyncDeleteConfigProviderService';

  /** @type {!Object} */
  var queryParameters = {};

  /** @type {!Object} */
  var headerParams = angular.extend({}, this.defaultHeaders_);
  if (opt_post !== undefined) {
    queryParameters['post'] = opt_post;
  }

  if (opt_apply !== undefined) {
    queryParameters['apply'] = opt_apply;
  }

  if (opt_delete !== undefined) {
    queryParameters['delete'] = opt_delete;
  }

  if (opt_action !== undefined) {
    queryParameters['action'] = opt_action;
  }

  if (opt_location !== undefined) {
    queryParameters['$location'] = opt_location;
  }

  if (opt_propertylist !== undefined) {
    queryParameters['propertylist'] = opt_propertylist;
  }

  if (opt_threshold !== undefined) {
    queryParameters['threshold'] = opt_threshold;
  }

  if (opt_jobTopicName !== undefined) {
    queryParameters['jobTopicName'] = opt_jobTopicName;
  }

  if (opt_emailEnabled !== undefined) {
    queryParameters['emailEnabled'] = opt_emailEnabled;
  }

  /** @type {!Object} */
  var httpRequestParams = {
    method: 'POST',
    url: path,
    json: true,
            params: queryParameters,
    headers: headerParams
  };

  if (opt_extraHttpRequestParams) {
    httpRequestParams = angular.extend(httpRequestParams, opt_extraHttpRequestParams);
  }

  return (/** @type {?} */ (this.http_))(httpRequestParams);
}

/**
 * 
 * 
 * @param {!boolean=} opt_post 
 * @param {!boolean=} opt_apply 
 * @param {!boolean=} opt_delete 
 * @param {!string=} opt_action 
 * @param {!string=} opt_location 
 * @param {!Array<!string>=} opt_propertylist 
 * @param {!string=} opt_schedulerExpression 
 * @param {!number=} opt_jobPurgeThreshold 
 * @param {!number=} opt_jobPurgeMaxJobs 
 * @param {!angular.$http.Config=} opt_extraHttpRequestParams Extra HTTP parameters to send.
 * @return {!angular.$q.Promise<!API.Client.comAdobeCqWcmJobsAsyncImplAsyncJobCleanUpTaskInfo>}
 */
API.Client.ConfigmgrApi.prototype.comAdobeCqWcmJobsAsyncImplAsyncJobCleanUpTask = function(opt_post, opt_apply, opt_delete, opt_action, opt_location, opt_propertylist, opt_schedulerExpression, opt_jobPurgeThreshold, opt_jobPurgeMaxJobs, opt_extraHttpRequestParams) {
  /** @const {string} */
  var path = this.basePath_ + '/system/console/configMgr/com.adobe.cq.wcm.jobs.async.impl.AsyncJobCleanUpTask';

  /** @type {!Object} */
  var queryParameters = {};

  /** @type {!Object} */
  var headerParams = angular.extend({}, this.defaultHeaders_);
  if (opt_post !== undefined) {
    queryParameters['post'] = opt_post;
  }

  if (opt_apply !== undefined) {
    queryParameters['apply'] = opt_apply;
  }

  if (opt_delete !== undefined) {
    queryParameters['delete'] = opt_delete;
  }

  if (opt_action !== undefined) {
    queryParameters['action'] = opt_action;
  }

  if (opt_location !== undefined) {
    queryParameters['$location'] = opt_location;
  }

  if (opt_propertylist !== undefined) {
    queryParameters['propertylist'] = opt_propertylist;
  }

  if (opt_schedulerExpression !== undefined) {
    queryParameters['scheduler.expression'] = opt_schedulerExpression;
  }

  if (opt_jobPurgeThreshold !== undefined) {
    queryParameters['job.purge.threshold'] = opt_jobPurgeThreshold;
  }

  if (opt_jobPurgeMaxJobs !== undefined) {
    queryParameters['job.purge.max.jobs'] = opt_jobPurgeMaxJobs;
  }

  /** @type {!Object} */
  var httpRequestParams = {
    method: 'POST',
    url: path,
    json: true,
            params: queryParameters,
    headers: headerParams
  };

  if (opt_extraHttpRequestParams) {
    httpRequestParams = angular.extend(httpRequestParams, opt_extraHttpRequestParams);
  }

  return (/** @type {?} */ (this.http_))(httpRequestParams);
}

/**
 * 
 * 
 * @param {!boolean=} opt_post 
 * @param {!boolean=} opt_apply 
 * @param {!boolean=} opt_delete 
 * @param {!string=} opt_action 
 * @param {!string=} opt_location 
 * @param {!Array<!string>=} opt_propertylist 
 * @param {!number=} opt_threshold 
 * @param {!string=} opt_jobTopicName 
 * @param {!boolean=} opt_emailEnabled 
 * @param {!angular.$http.Config=} opt_extraHttpRequestParams Extra HTTP parameters to send.
 * @return {!angular.$q.Promise<!API.Client.comAdobeCqWcmJobsAsyncImplAsyncMoveConfigProviderServiceInfo>}
 */
API.Client.ConfigmgrApi.prototype.comAdobeCqWcmJobsAsyncImplAsyncMoveConfigProviderService = function(opt_post, opt_apply, opt_delete, opt_action, opt_location, opt_propertylist, opt_threshold, opt_jobTopicName, opt_emailEnabled, opt_extraHttpRequestParams) {
  /** @const {string} */
  var path = this.basePath_ + '/system/console/configMgr/com.adobe.cq.wcm.jobs.async.impl.AsyncMoveConfigProviderService';

  /** @type {!Object} */
  var queryParameters = {};

  /** @type {!Object} */
  var headerParams = angular.extend({}, this.defaultHeaders_);
  if (opt_post !== undefined) {
    queryParameters['post'] = opt_post;
  }

  if (opt_apply !== undefined) {
    queryParameters['apply'] = opt_apply;
  }

  if (opt_delete !== undefined) {
    queryParameters['delete'] = opt_delete;
  }

  if (opt_action !== undefined) {
    queryParameters['action'] = opt_action;
  }

  if (opt_location !== undefined) {
    queryParameters['$location'] = opt_location;
  }

  if (opt_propertylist !== undefined) {
    queryParameters['propertylist'] = opt_propertylist;
  }

  if (opt_threshold !== undefined) {
    queryParameters['threshold'] = opt_threshold;
  }

  if (opt_jobTopicName !== undefined) {
    queryParameters['jobTopicName'] = opt_jobTopicName;
  }

  if (opt_emailEnabled !== undefined) {
    queryParameters['emailEnabled'] = opt_emailEnabled;
  }

  /** @type {!Object} */
  var httpRequestParams = {
    method: 'POST',
    url: path,
    json: true,
            params: queryParameters,
    headers: headerParams
  };

  if (opt_extraHttpRequestParams) {
    httpRequestParams = angular.extend(httpRequestParams, opt_extraHttpRequestParams);
  }

  return (/** @type {?} */ (this.http_))(httpRequestParams);
}

/**
 * 
 * 
 * @param {!boolean=} opt_post 
 * @param {!boolean=} opt_apply 
 * @param {!boolean=} opt_delete 
 * @param {!string=} opt_action 
 * @param {!string=} opt_location 
 * @param {!Array<!string>=} opt_propertylist 
 * @param {!number=} opt_threshold 
 * @param {!string=} opt_jobTopicName 
 * @param {!boolean=} opt_emailEnabled 
 * @param {!angular.$http.Config=} opt_extraHttpRequestParams Extra HTTP parameters to send.
 * @return {!angular.$q.Promise<!API.Client.comAdobeCqWcmJobsAsyncImplAsyncPageMoveConfigProviderServiceInfo>}
 */
API.Client.ConfigmgrApi.prototype.comAdobeCqWcmJobsAsyncImplAsyncPageMoveConfigProviderService = function(opt_post, opt_apply, opt_delete, opt_action, opt_location, opt_propertylist, opt_threshold, opt_jobTopicName, opt_emailEnabled, opt_extraHttpRequestParams) {
  /** @const {string} */
  var path = this.basePath_ + '/system/console/configMgr/com.adobe.cq.wcm.jobs.async.impl.AsyncPageMoveConfigProviderService';

  /** @type {!Object} */
  var queryParameters = {};

  /** @type {!Object} */
  var headerParams = angular.extend({}, this.defaultHeaders_);
  if (opt_post !== undefined) {
    queryParameters['post'] = opt_post;
  }

  if (opt_apply !== undefined) {
    queryParameters['apply'] = opt_apply;
  }

  if (opt_delete !== undefined) {
    queryParameters['delete'] = opt_delete;
  }

  if (opt_action !== undefined) {
    queryParameters['action'] = opt_action;
  }

  if (opt_location !== undefined) {
    queryParameters['$location'] = opt_location;
  }

  if (opt_propertylist !== undefined) {
    queryParameters['propertylist'] = opt_propertylist;
  }

  if (opt_threshold !== undefined) {
    queryParameters['threshold'] = opt_threshold;
  }

  if (opt_jobTopicName !== undefined) {
    queryParameters['jobTopicName'] = opt_jobTopicName;
  }

  if (opt_emailEnabled !== undefined) {
    queryParameters['emailEnabled'] = opt_emailEnabled;
  }

  /** @type {!Object} */
  var httpRequestParams = {
    method: 'POST',
    url: path,
    json: true,
            params: queryParameters,
    headers: headerParams
  };

  if (opt_extraHttpRequestParams) {
    httpRequestParams = angular.extend(httpRequestParams, opt_extraHttpRequestParams);
  }

  return (/** @type {?} */ (this.http_))(httpRequestParams);
}

/**
 * 
 * 
 * @param {!boolean=} opt_post 
 * @param {!boolean=} opt_apply 
 * @param {!boolean=} opt_delete 
 * @param {!string=} opt_action 
 * @param {!string=} opt_location 
 * @param {!Array<!string>=} opt_propertylist 
 * @param {!string=} opt_eventFilter 
 * @param {!number=} opt_launchesEventhandlerThreadpoolMaxsize 
 * @param {!string=} opt_launchesEventhandlerThreadpoolPriority 
 * @param {!boolean=} opt_launchesEventhandlerUpdatelastmodification 
 * @param {!angular.$http.Config=} opt_extraHttpRequestParams Extra HTTP parameters to send.
 * @return {!angular.$q.Promise<!API.Client.comAdobeCqWcmLaunchesImplLaunchesEventHandlerInfo>}
 */
API.Client.ConfigmgrApi.prototype.comAdobeCqWcmLaunchesImplLaunchesEventHandler = function(opt_post, opt_apply, opt_delete, opt_action, opt_location, opt_propertylist, opt_eventFilter, opt_launchesEventhandlerThreadpoolMaxsize, opt_launchesEventhandlerThreadpoolPriority, opt_launchesEventhandlerUpdatelastmodification, opt_extraHttpRequestParams) {
  /** @const {string} */
  var path = this.basePath_ + '/system/console/configMgr/com.adobe.cq.wcm.launches.impl.LaunchesEventHandler';

  /** @type {!Object} */
  var queryParameters = {};

  /** @type {!Object} */
  var headerParams = angular.extend({}, this.defaultHeaders_);
  if (opt_post !== undefined) {
    queryParameters['post'] = opt_post;
  }

  if (opt_apply !== undefined) {
    queryParameters['apply'] = opt_apply;
  }

  if (opt_delete !== undefined) {
    queryParameters['delete'] = opt_delete;
  }

  if (opt_action !== undefined) {
    queryParameters['action'] = opt_action;
  }

  if (opt_location !== undefined) {
    queryParameters['$location'] = opt_location;
  }

  if (opt_propertylist !== undefined) {
    queryParameters['propertylist'] = opt_propertylist;
  }

  if (opt_eventFilter !== undefined) {
    queryParameters['event.filter'] = opt_eventFilter;
  }

  if (opt_launchesEventhandlerThreadpoolMaxsize !== undefined) {
    queryParameters['launches.eventhandler.threadpool.maxsize'] = opt_launchesEventhandlerThreadpoolMaxsize;
  }

  if (opt_launchesEventhandlerThreadpoolPriority !== undefined) {
    queryParameters['launches.eventhandler.threadpool.priority'] = opt_launchesEventhandlerThreadpoolPriority;
  }

  if (opt_launchesEventhandlerUpdatelastmodification !== undefined) {
    queryParameters['launches.eventhandler.updatelastmodification'] = opt_launchesEventhandlerUpdatelastmodification;
  }

  /** @type {!Object} */
  var httpRequestParams = {
    method: 'POST',
    url: path,
    json: true,
            params: queryParameters,
    headers: headerParams
  };

  if (opt_extraHttpRequestParams) {
    httpRequestParams = angular.extend(httpRequestParams, opt_extraHttpRequestParams);
  }

  return (/** @type {?} */ (this.http_))(httpRequestParams);
}

/**
 * 
 * 
 * @param {!boolean=} opt_post 
 * @param {!boolean=} opt_apply 
 * @param {!boolean=} opt_delete 
 * @param {!string=} opt_action 
 * @param {!string=} opt_location 
 * @param {!Array<!string>=} opt_propertylist 
 * @param {!Array<!string>=} opt_cqWcmQrcodeServletWhitelist 
 * @param {!angular.$http.Config=} opt_extraHttpRequestParams Extra HTTP parameters to send.
 * @return {!angular.$q.Promise<!API.Client.comAdobeCqWcmMobileQrcodeServletQRCodeImageGeneratorInfo>}
 */
API.Client.ConfigmgrApi.prototype.comAdobeCqWcmMobileQrcodeServletQRCodeImageGenerator = function(opt_post, opt_apply, opt_delete, opt_action, opt_location, opt_propertylist, opt_cqWcmQrcodeServletWhitelist, opt_extraHttpRequestParams) {
  /** @const {string} */
  var path = this.basePath_ + '/system/console/configMgr/com.adobe.cq.wcm.mobile.qrcode.servlet.QRCodeImageGenerator';

  /** @type {!Object} */
  var queryParameters = {};

  /** @type {!Object} */
  var headerParams = angular.extend({}, this.defaultHeaders_);
  if (opt_post !== undefined) {
    queryParameters['post'] = opt_post;
  }

  if (opt_apply !== undefined) {
    queryParameters['apply'] = opt_apply;
  }

  if (opt_delete !== undefined) {
    queryParameters['delete'] = opt_delete;
  }

  if (opt_action !== undefined) {
    queryParameters['action'] = opt_action;
  }

  if (opt_location !== undefined) {
    queryParameters['$location'] = opt_location;
  }

  if (opt_propertylist !== undefined) {
    queryParameters['propertylist'] = opt_propertylist;
  }

  if (opt_cqWcmQrcodeServletWhitelist !== undefined) {
    queryParameters['cq.wcm.qrcode.servlet.whitelist'] = opt_cqWcmQrcodeServletWhitelist;
  }

  /** @type {!Object} */
  var httpRequestParams = {
    method: 'POST',
    url: path,
    json: true,
            params: queryParameters,
    headers: headerParams
  };

  if (opt_extraHttpRequestParams) {
    httpRequestParams = angular.extend(httpRequestParams, opt_extraHttpRequestParams);
  }

  return (/** @type {?} */ (this.http_))(httpRequestParams);
}

/**
 * 
 * 
 * @param {!boolean=} opt_post 
 * @param {!boolean=} opt_apply 
 * @param {!boolean=} opt_delete 
 * @param {!string=} opt_action 
 * @param {!string=} opt_location 
 * @param {!Array<!string>=} opt_propertylist 
 * @param {!number=} opt_size 
 * @param {!angular.$http.Config=} opt_extraHttpRequestParams Extra HTTP parameters to send.
 * @return {!angular.$q.Promise<!API.Client.comAdobeCqWcmStyleInternalComponentStyleInfoCacheImplInfo>}
 */
API.Client.ConfigmgrApi.prototype.comAdobeCqWcmStyleInternalComponentStyleInfoCacheImpl = function(opt_post, opt_apply, opt_delete, opt_action, opt_location, opt_propertylist, opt_size, opt_extraHttpRequestParams) {
  /** @const {string} */
  var path = this.basePath_ + '/system/console/configMgr/com.adobe.cq.wcm.style.internal.ComponentStyleInfoCacheImpl';

  /** @type {!Object} */
  var queryParameters = {};

  /** @type {!Object} */
  var headerParams = angular.extend({}, this.defaultHeaders_);
  if (opt_post !== undefined) {
    queryParameters['post'] = opt_post;
  }

  if (opt_apply !== undefined) {
    queryParameters['apply'] = opt_apply;
  }

  if (opt_delete !== undefined) {
    queryParameters['delete'] = opt_delete;
  }

  if (opt_action !== undefined) {
    queryParameters['action'] = opt_action;
  }

  if (opt_location !== undefined) {
    queryParameters['$location'] = opt_location;
  }

  if (opt_propertylist !== undefined) {
    queryParameters['propertylist'] = opt_propertylist;
  }

  if (opt_size !== undefined) {
    queryParameters['size'] = opt_size;
  }

  /** @type {!Object} */
  var httpRequestParams = {
    method: 'POST',
    url: path,
    json: true,
            params: queryParameters,
    headers: headerParams
  };

  if (opt_extraHttpRequestParams) {
    httpRequestParams = angular.extend(httpRequestParams, opt_extraHttpRequestParams);
  }

  return (/** @type {?} */ (this.http_))(httpRequestParams);
}

/**
 * 
 * 
 * @param {!boolean=} opt_post 
 * @param {!boolean=} opt_apply 
 * @param {!boolean=} opt_delete 
 * @param {!string=} opt_action 
 * @param {!string=} opt_location 
 * @param {!Array<!string>=} opt_propertylist 
 * @param {!string=} opt_syncTranslationStateSchedulingFormat 
 * @param {!string=} opt_schedulingRepeatTranslationSchedulingFormat 
 * @param {!string=} opt_syncTranslationStateLockTimeoutInMinutes 
 * @param {!string=} opt_exportFormat 
 * @param {!angular.$http.Config=} opt_extraHttpRequestParams Extra HTTP parameters to send.
 * @return {!angular.$q.Promise<!API.Client.comAdobeCqWcmTranslationImplTranslationPlatformConfigurationImplInfo>}
 */
API.Client.ConfigmgrApi.prototype.comAdobeCqWcmTranslationImplTranslationPlatformConfigurationImpl = function(opt_post, opt_apply, opt_delete, opt_action, opt_location, opt_propertylist, opt_syncTranslationStateSchedulingFormat, opt_schedulingRepeatTranslationSchedulingFormat, opt_syncTranslationStateLockTimeoutInMinutes, opt_exportFormat, opt_extraHttpRequestParams) {
  /** @const {string} */
  var path = this.basePath_ + '/system/console/configMgr/com.adobe.cq.wcm.translation.impl.TranslationPlatformConfigurationImpl';

  /** @type {!Object} */
  var queryParameters = {};

  /** @type {!Object} */
  var headerParams = angular.extend({}, this.defaultHeaders_);
  if (opt_post !== undefined) {
    queryParameters['post'] = opt_post;
  }

  if (opt_apply !== undefined) {
    queryParameters['apply'] = opt_apply;
  }

  if (opt_delete !== undefined) {
    queryParameters['delete'] = opt_delete;
  }

  if (opt_action !== undefined) {
    queryParameters['action'] = opt_action;
  }

  if (opt_location !== undefined) {
    queryParameters['$location'] = opt_location;
  }

  if (opt_propertylist !== undefined) {
    queryParameters['propertylist'] = opt_propertylist;
  }

  if (opt_syncTranslationStateSchedulingFormat !== undefined) {
    queryParameters['syncTranslationState.schedulingFormat'] = opt_syncTranslationStateSchedulingFormat;
  }

  if (opt_schedulingRepeatTranslationSchedulingFormat !== undefined) {
    queryParameters['schedulingRepeatTranslation.schedulingFormat'] = opt_schedulingRepeatTranslationSchedulingFormat;
  }

  if (opt_syncTranslationStateLockTimeoutInMinutes !== undefined) {
    queryParameters['syncTranslationState.lockTimeoutInMinutes'] = opt_syncTranslationStateLockTimeoutInMinutes;
  }

  if (opt_exportFormat !== undefined) {
    queryParameters['export.format'] = opt_exportFormat;
  }

  /** @type {!Object} */
  var httpRequestParams = {
    method: 'POST',
    url: path,
    json: true,
            params: queryParameters,
    headers: headerParams
  };

  if (opt_extraHttpRequestParams) {
    httpRequestParams = angular.extend(httpRequestParams, opt_extraHttpRequestParams);
  }

  return (/** @type {?} */ (this.http_))(httpRequestParams);
}

/**
 * 
 * 
 * @param {!boolean=} opt_post 
 * @param {!boolean=} opt_apply 
 * @param {!boolean=} opt_delete 
 * @param {!string=} opt_action 
 * @param {!string=} opt_location 
 * @param {!Array<!string>=} opt_propertylist 
 * @param {!Array<!string>=} opt_portalOutboxes 
 * @param {!string=} opt_draftDataService 
 * @param {!string=} opt_draftMetadataService 
 * @param {!string=} opt_submitDataService 
 * @param {!string=} opt_submitMetadataService 
 * @param {!string=} opt_pendingSignDataService 
 * @param {!string=} opt_pendingSignMetadataService 
 * @param {!angular.$http.Config=} opt_extraHttpRequestParams Extra HTTP parameters to send.
 * @return {!angular.$q.Promise<!API.Client.comAdobeFdFpConfigFormsPortalDraftsandSubmissionConfigServiceInfo>}
 */
API.Client.ConfigmgrApi.prototype.comAdobeFdFpConfigFormsPortalDraftsandSubmissionConfigService = function(opt_post, opt_apply, opt_delete, opt_action, opt_location, opt_propertylist, opt_portalOutboxes, opt_draftDataService, opt_draftMetadataService, opt_submitDataService, opt_submitMetadataService, opt_pendingSignDataService, opt_pendingSignMetadataService, opt_extraHttpRequestParams) {
  /** @const {string} */
  var path = this.basePath_ + '/system/console/configMgr/com.adobe.fd.fp.config.FormsPortalDraftsandSubmissionConfigService';

  /** @type {!Object} */
  var queryParameters = {};

  /** @type {!Object} */
  var headerParams = angular.extend({}, this.defaultHeaders_);
  if (opt_post !== undefined) {
    queryParameters['post'] = opt_post;
  }

  if (opt_apply !== undefined) {
    queryParameters['apply'] = opt_apply;
  }

  if (opt_delete !== undefined) {
    queryParameters['delete'] = opt_delete;
  }

  if (opt_action !== undefined) {
    queryParameters['action'] = opt_action;
  }

  if (opt_location !== undefined) {
    queryParameters['$location'] = opt_location;
  }

  if (opt_propertylist !== undefined) {
    queryParameters['propertylist'] = opt_propertylist;
  }

  if (opt_portalOutboxes !== undefined) {
    queryParameters['portal.outboxes'] = opt_portalOutboxes;
  }

  if (opt_draftDataService !== undefined) {
    queryParameters['draft.data.service'] = opt_draftDataService;
  }

  if (opt_draftMetadataService !== undefined) {
    queryParameters['draft.metadata.service'] = opt_draftMetadataService;
  }

  if (opt_submitDataService !== undefined) {
    queryParameters['submit.data.service'] = opt_submitDataService;
  }

  if (opt_submitMetadataService !== undefined) {
    queryParameters['submit.metadata.service'] = opt_submitMetadataService;
  }

  if (opt_pendingSignDataService !== undefined) {
    queryParameters['pendingSign.data.service'] = opt_pendingSignDataService;
  }

  if (opt_pendingSignMetadataService !== undefined) {
    queryParameters['pendingSign.metadata.service'] = opt_pendingSignMetadataService;
  }

  /** @type {!Object} */
  var httpRequestParams = {
    method: 'POST',
    url: path,
    json: true,
            params: queryParameters,
    headers: headerParams
  };

  if (opt_extraHttpRequestParams) {
    httpRequestParams = angular.extend(httpRequestParams, opt_extraHttpRequestParams);
  }

  return (/** @type {?} */ (this.http_))(httpRequestParams);
}

/**
 * 
 * 
 * @param {!boolean=} opt_post 
 * @param {!boolean=} opt_apply 
 * @param {!boolean=} opt_delete 
 * @param {!string=} opt_action 
 * @param {!string=} opt_location 
 * @param {!Array<!string>=} opt_propertylist 
 * @param {!string=} opt_formportalInterval 
 * @param {!angular.$http.Config=} opt_extraHttpRequestParams Extra HTTP parameters to send.
 * @return {!angular.$q.Promise<!API.Client.comAdobeFdFpConfigFormsPortalSchedulerServiceInfo>}
 */
API.Client.ConfigmgrApi.prototype.comAdobeFdFpConfigFormsPortalSchedulerService = function(opt_post, opt_apply, opt_delete, opt_action, opt_location, opt_propertylist, opt_formportalInterval, opt_extraHttpRequestParams) {
  /** @const {string} */
  var path = this.basePath_ + '/system/console/configMgr/com.adobe.fd.fp.config.FormsPortalSchedulerService';

  /** @type {!Object} */
  var queryParameters = {};

  /** @type {!Object} */
  var headerParams = angular.extend({}, this.defaultHeaders_);
  if (opt_post !== undefined) {
    queryParameters['post'] = opt_post;
  }

  if (opt_apply !== undefined) {
    queryParameters['apply'] = opt_apply;
  }

  if (opt_delete !== undefined) {
    queryParameters['delete'] = opt_delete;
  }

  if (opt_action !== undefined) {
    queryParameters['action'] = opt_action;
  }

  if (opt_location !== undefined) {
    queryParameters['$location'] = opt_location;
  }

  if (opt_propertylist !== undefined) {
    queryParameters['propertylist'] = opt_propertylist;
  }

  if (opt_formportalInterval !== undefined) {
    queryParameters['formportal.interval'] = opt_formportalInterval;
  }

  /** @type {!Object} */
  var httpRequestParams = {
    method: 'POST',
    url: path,
    json: true,
            params: queryParameters,
    headers: headerParams
  };

  if (opt_extraHttpRequestParams) {
    httpRequestParams = angular.extend(httpRequestParams, opt_extraHttpRequestParams);
  }

  return (/** @type {?} */ (this.http_))(httpRequestParams);
}

/**
 * 
 * 
 * @param {!boolean=} opt_post 
 * @param {!boolean=} opt_apply 
 * @param {!boolean=} opt_delete 
 * @param {!string=} opt_action 
 * @param {!string=} opt_location 
 * @param {!Array<!string>=} opt_propertylist 
 * @param {!Array<!string>=} opt_alloweddataFileLocations 
 * @param {!angular.$http.Config=} opt_extraHttpRequestParams Extra HTTP parameters to send.
 * @return {!angular.$q.Promise<!API.Client.comAdobeFormsCommonServiceImplDefaultDataProviderInfo>}
 */
API.Client.ConfigmgrApi.prototype.comAdobeFormsCommonServiceImplDefaultDataProvider = function(opt_post, opt_apply, opt_delete, opt_action, opt_location, opt_propertylist, opt_alloweddataFileLocations, opt_extraHttpRequestParams) {
  /** @const {string} */
  var path = this.basePath_ + '/system/console/configMgr/com.adobe.forms.common.service.impl.DefaultDataProvider';

  /** @type {!Object} */
  var queryParameters = {};

  /** @type {!Object} */
  var headerParams = angular.extend({}, this.defaultHeaders_);
  if (opt_post !== undefined) {
    queryParameters['post'] = opt_post;
  }

  if (opt_apply !== undefined) {
    queryParameters['apply'] = opt_apply;
  }

  if (opt_delete !== undefined) {
    queryParameters['delete'] = opt_delete;
  }

  if (opt_action !== undefined) {
    queryParameters['action'] = opt_action;
  }

  if (opt_location !== undefined) {
    queryParameters['$location'] = opt_location;
  }

  if (opt_propertylist !== undefined) {
    queryParameters['propertylist'] = opt_propertylist;
  }

  if (opt_alloweddataFileLocations !== undefined) {
    queryParameters['alloweddataFileLocations'] = opt_alloweddataFileLocations;
  }

  /** @type {!Object} */
  var httpRequestParams = {
    method: 'POST',
    url: path,
    json: true,
            params: queryParameters,
    headers: headerParams
  };

  if (opt_extraHttpRequestParams) {
    httpRequestParams = angular.extend(httpRequestParams, opt_extraHttpRequestParams);
  }

  return (/** @type {?} */ (this.http_))(httpRequestParams);
}

/**
 * 
 * 
 * @param {!boolean=} opt_post 
 * @param {!boolean=} opt_apply 
 * @param {!boolean=} opt_delete 
 * @param {!string=} opt_action 
 * @param {!string=} opt_location 
 * @param {!Array<!string>=} opt_propertylist 
 * @param {!string=} opt_tempStorageConfig 
 * @param {!angular.$http.Config=} opt_extraHttpRequestParams Extra HTTP parameters to send.
 * @return {!angular.$q.Promise<!API.Client.comAdobeFormsCommonServiceImplFormsCommonConfigurationServiceImpInfo>}
 */
API.Client.ConfigmgrApi.prototype.comAdobeFormsCommonServiceImplFormsCommonConfigurationServiceImp = function(opt_post, opt_apply, opt_delete, opt_action, opt_location, opt_propertylist, opt_tempStorageConfig, opt_extraHttpRequestParams) {
  /** @const {string} */
  var path = this.basePath_ + '/system/console/configMgr/com.adobe.forms.common.service.impl.FormsCommonConfigurationServiceImpl';

  /** @type {!Object} */
  var queryParameters = {};

  /** @type {!Object} */
  var headerParams = angular.extend({}, this.defaultHeaders_);
  if (opt_post !== undefined) {
    queryParameters['post'] = opt_post;
  }

  if (opt_apply !== undefined) {
    queryParameters['apply'] = opt_apply;
  }

  if (opt_delete !== undefined) {
    queryParameters['delete'] = opt_delete;
  }

  if (opt_action !== undefined) {
    queryParameters['action'] = opt_action;
  }

  if (opt_location !== undefined) {
    queryParameters['$location'] = opt_location;
  }

  if (opt_propertylist !== undefined) {
    queryParameters['propertylist'] = opt_propertylist;
  }

  if (opt_tempStorageConfig !== undefined) {
    queryParameters['tempStorageConfig'] = opt_tempStorageConfig;
  }

  /** @type {!Object} */
  var httpRequestParams = {
    method: 'POST',
    url: path,
    json: true,
            params: queryParameters,
    headers: headerParams
  };

  if (opt_extraHttpRequestParams) {
    httpRequestParams = angular.extend(httpRequestParams, opt_extraHttpRequestParams);
  }

  return (/** @type {?} */ (this.http_))(httpRequestParams);
}

/**
 * 
 * 
 * @param {!boolean=} opt_post 
 * @param {!boolean=} opt_apply 
 * @param {!boolean=} opt_delete 
 * @param {!string=} opt_action 
 * @param {!string=} opt_location 
 * @param {!Array<!string>=} opt_propertylist 
 * @param {!string=} opt_schedulerExpression 
 * @param {!string=} opt_durationForTemporaryStorage 
 * @param {!string=} opt_durationForAnonymousStorage 
 * @param {!angular.$http.Config=} opt_extraHttpRequestParams Extra HTTP parameters to send.
 * @return {!angular.$q.Promise<!API.Client.comAdobeFormsCommonServletTempCleanUpTaskInfo>}
 */
API.Client.ConfigmgrApi.prototype.comAdobeFormsCommonServletTempCleanUpTask = function(opt_post, opt_apply, opt_delete, opt_action, opt_location, opt_propertylist, opt_schedulerExpression, opt_durationForTemporaryStorage, opt_durationForAnonymousStorage, opt_extraHttpRequestParams) {
  /** @const {string} */
  var path = this.basePath_ + '/system/console/configMgr/com.adobe.forms.common.servlet.TempCleanUpTask';

  /** @type {!Object} */
  var queryParameters = {};

  /** @type {!Object} */
  var headerParams = angular.extend({}, this.defaultHeaders_);
  if (opt_post !== undefined) {
    queryParameters['post'] = opt_post;
  }

  if (opt_apply !== undefined) {
    queryParameters['apply'] = opt_apply;
  }

  if (opt_delete !== undefined) {
    queryParameters['delete'] = opt_delete;
  }

  if (opt_action !== undefined) {
    queryParameters['action'] = opt_action;
  }

  if (opt_location !== undefined) {
    queryParameters['$location'] = opt_location;
  }

  if (opt_propertylist !== undefined) {
    queryParameters['propertylist'] = opt_propertylist;
  }

  if (opt_schedulerExpression !== undefined) {
    queryParameters['scheduler.expression'] = opt_schedulerExpression;
  }

  if (opt_durationForTemporaryStorage !== undefined) {
    queryParameters['Duration for Temporary Storage'] = opt_durationForTemporaryStorage;
  }

  if (opt_durationForAnonymousStorage !== undefined) {
    queryParameters['Duration for Anonymous Storage'] = opt_durationForAnonymousStorage;
  }

  /** @type {!Object} */
  var httpRequestParams = {
    method: 'POST',
    url: path,
    json: true,
            params: queryParameters,
    headers: headerParams
  };

  if (opt_extraHttpRequestParams) {
    httpRequestParams = angular.extend(httpRequestParams, opt_extraHttpRequestParams);
  }

  return (/** @type {?} */ (this.http_))(httpRequestParams);
}

/**
 * 
 * 
 * @param {!boolean=} opt_post 
 * @param {!boolean=} opt_apply 
 * @param {!boolean=} opt_delete 
 * @param {!string=} opt_action 
 * @param {!string=} opt_location 
 * @param {!Array<!string>=} opt_propertylist 
 * @param {!number=} opt_queryLimit 
 * @param {!Array<!string>=} opt_fileTypeExtensionMap 
 * @param {!angular.$http.Config=} opt_extraHttpRequestParams Extra HTTP parameters to send.
 * @return {!angular.$q.Promise<!API.Client.comAdobeGraniteAcpPlatformPlatformServletInfo>}
 */
API.Client.ConfigmgrApi.prototype.comAdobeGraniteAcpPlatformPlatformServlet = function(opt_post, opt_apply, opt_delete, opt_action, opt_location, opt_propertylist, opt_queryLimit, opt_fileTypeExtensionMap, opt_extraHttpRequestParams) {
  /** @const {string} */
  var path = this.basePath_ + '/system/console/configMgr/com.adobe.granite.acp.platform.PlatformServlet';

  /** @type {!Object} */
  var queryParameters = {};

  /** @type {!Object} */
  var headerParams = angular.extend({}, this.defaultHeaders_);
  if (opt_post !== undefined) {
    queryParameters['post'] = opt_post;
  }

  if (opt_apply !== undefined) {
    queryParameters['apply'] = opt_apply;
  }

  if (opt_delete !== undefined) {
    queryParameters['delete'] = opt_delete;
  }

  if (opt_action !== undefined) {
    queryParameters['action'] = opt_action;
  }

  if (opt_location !== undefined) {
    queryParameters['$location'] = opt_location;
  }

  if (opt_propertylist !== undefined) {
    queryParameters['propertylist'] = opt_propertylist;
  }

  if (opt_queryLimit !== undefined) {
    queryParameters['query.limit'] = opt_queryLimit;
  }

  if (opt_fileTypeExtensionMap !== undefined) {
    queryParameters['file.type.extension.map'] = opt_fileTypeExtensionMap;
  }

  /** @type {!Object} */
  var httpRequestParams = {
    method: 'POST',
    url: path,
    json: true,
            params: queryParameters,
    headers: headerParams
  };

  if (opt_extraHttpRequestParams) {
    httpRequestParams = angular.extend(httpRequestParams, opt_extraHttpRequestParams);
  }

  return (/** @type {?} */ (this.http_))(httpRequestParams);
}

/**
 * 
 * 
 * @param {!boolean=} opt_post 
 * @param {!boolean=} opt_apply 
 * @param {!boolean=} opt_delete 
 * @param {!string=} opt_action 
 * @param {!string=} opt_location 
 * @param {!Array<!string>=} opt_propertylist 
 * @param {!Array<!string>=} opt_aggregateRelationships 
 * @param {!boolean=} opt_aggregateDescendVirtual 
 * @param {!angular.$http.Config=} opt_extraHttpRequestParams Extra HTTP parameters to send.
 * @return {!angular.$q.Promise<!API.Client.comAdobeGraniteActivitystreamsImplActivityManagerImplInfo>}
 */
API.Client.ConfigmgrApi.prototype.comAdobeGraniteActivitystreamsImplActivityManagerImpl = function(opt_post, opt_apply, opt_delete, opt_action, opt_location, opt_propertylist, opt_aggregateRelationships, opt_aggregateDescendVirtual, opt_extraHttpRequestParams) {
  /** @const {string} */
  var path = this.basePath_ + '/system/console/configMgr/com.adobe.granite.activitystreams.impl.ActivityManagerImpl';

  /** @type {!Object} */
  var queryParameters = {};

  /** @type {!Object} */
  var headerParams = angular.extend({}, this.defaultHeaders_);
  if (opt_post !== undefined) {
    queryParameters['post'] = opt_post;
  }

  if (opt_apply !== undefined) {
    queryParameters['apply'] = opt_apply;
  }

  if (opt_delete !== undefined) {
    queryParameters['delete'] = opt_delete;
  }

  if (opt_action !== undefined) {
    queryParameters['action'] = opt_action;
  }

  if (opt_location !== undefined) {
    queryParameters['$location'] = opt_location;
  }

  if (opt_propertylist !== undefined) {
    queryParameters['propertylist'] = opt_propertylist;
  }

  if (opt_aggregateRelationships !== undefined) {
    queryParameters['aggregate.relationships'] = opt_aggregateRelationships;
  }

  if (opt_aggregateDescendVirtual !== undefined) {
    queryParameters['aggregate.descend.virtual'] = opt_aggregateDescendVirtual;
  }

  /** @type {!Object} */
  var httpRequestParams = {
    method: 'POST',
    url: path,
    json: true,
            params: queryParameters,
    headers: headerParams
  };

  if (opt_extraHttpRequestParams) {
    httpRequestParams = angular.extend(httpRequestParams, opt_extraHttpRequestParams);
  }

  return (/** @type {?} */ (this.http_))(httpRequestParams);
}

/**
 * 
 * 
 * @param {!boolean=} opt_post 
 * @param {!boolean=} opt_apply 
 * @param {!boolean=} opt_delete 
 * @param {!string=} opt_action 
 * @param {!string=} opt_location 
 * @param {!Array<!string>=} opt_propertylist 
 * @param {!boolean=} opt_disabled 
 * @param {!angular.$http.Config=} opt_extraHttpRequestParams Extra HTTP parameters to send.
 * @return {!angular.$q.Promise<!API.Client.comAdobeGraniteAnalyzerBaseSystemStatusServletInfo>}
 */
API.Client.ConfigmgrApi.prototype.comAdobeGraniteAnalyzerBaseSystemStatusServlet = function(opt_post, opt_apply, opt_delete, opt_action, opt_location, opt_propertylist, opt_disabled, opt_extraHttpRequestParams) {
  /** @const {string} */
  var path = this.basePath_ + '/system/console/configMgr/com.adobe.granite.analyzer.base.SystemStatusServlet';

  /** @type {!Object} */
  var queryParameters = {};

  /** @type {!Object} */
  var headerParams = angular.extend({}, this.defaultHeaders_);
  if (opt_post !== undefined) {
    queryParameters['post'] = opt_post;
  }

  if (opt_apply !== undefined) {
    queryParameters['apply'] = opt_apply;
  }

  if (opt_delete !== undefined) {
    queryParameters['delete'] = opt_delete;
  }

  if (opt_action !== undefined) {
    queryParameters['action'] = opt_action;
  }

  if (opt_location !== undefined) {
    queryParameters['$location'] = opt_location;
  }

  if (opt_propertylist !== undefined) {
    queryParameters['propertylist'] = opt_propertylist;
  }

  if (opt_disabled !== undefined) {
    queryParameters['disabled'] = opt_disabled;
  }

  /** @type {!Object} */
  var httpRequestParams = {
    method: 'POST',
    url: path,
    json: true,
            params: queryParameters,
    headers: headerParams
  };

  if (opt_extraHttpRequestParams) {
    httpRequestParams = angular.extend(httpRequestParams, opt_extraHttpRequestParams);
  }

  return (/** @type {?} */ (this.http_))(httpRequestParams);
}

/**
 * 
 * 
 * @param {!boolean=} opt_post 
 * @param {!boolean=} opt_apply 
 * @param {!boolean=} opt_delete 
 * @param {!string=} opt_action 
 * @param {!string=} opt_location 
 * @param {!Array<!string>=} opt_propertylist 
 * @param {!boolean=} opt_disabled 
 * @param {!angular.$http.Config=} opt_extraHttpRequestParams Extra HTTP parameters to send.
 * @return {!angular.$q.Promise<!API.Client.comAdobeGraniteAnalyzerScriptsCompileAllScriptsCompilerServletInfo>}
 */
API.Client.ConfigmgrApi.prototype.comAdobeGraniteAnalyzerScriptsCompileAllScriptsCompilerServlet = function(opt_post, opt_apply, opt_delete, opt_action, opt_location, opt_propertylist, opt_disabled, opt_extraHttpRequestParams) {
  /** @const {string} */
  var path = this.basePath_ + '/system/console/configMgr/com.adobe.granite.analyzer.scripts.compile.AllScriptsCompilerServlet';

  /** @type {!Object} */
  var queryParameters = {};

  /** @type {!Object} */
  var headerParams = angular.extend({}, this.defaultHeaders_);
  if (opt_post !== undefined) {
    queryParameters['post'] = opt_post;
  }

  if (opt_apply !== undefined) {
    queryParameters['apply'] = opt_apply;
  }

  if (opt_delete !== undefined) {
    queryParameters['delete'] = opt_delete;
  }

  if (opt_action !== undefined) {
    queryParameters['action'] = opt_action;
  }

  if (opt_location !== undefined) {
    queryParameters['$location'] = opt_location;
  }

  if (opt_propertylist !== undefined) {
    queryParameters['propertylist'] = opt_propertylist;
  }

  if (opt_disabled !== undefined) {
    queryParameters['disabled'] = opt_disabled;
  }

  /** @type {!Object} */
  var httpRequestParams = {
    method: 'POST',
    url: path,
    json: true,
            params: queryParameters,
    headers: headerParams
  };

  if (opt_extraHttpRequestParams) {
    httpRequestParams = angular.extend(httpRequestParams, opt_extraHttpRequestParams);
  }

  return (/** @type {?} */ (this.http_))(httpRequestParams);
}

/**
 * 
 * 
 * @param {!boolean=} opt_post 
 * @param {!boolean=} opt_apply 
 * @param {!boolean=} opt_delete 
 * @param {!string=} opt_action 
 * @param {!string=} opt_location 
 * @param {!Array<!string>=} opt_propertylist 
 * @param {!string=} opt_comAdobeCqCdnCdnRewriter 
 * @param {!string=} opt_comAdobeCqCloudConfigComponents 
 * @param {!string=} opt_comAdobeCqCloudConfigCore 
 * @param {!string=} opt_comAdobeCqCloudConfigUi 
 * @param {!string=} opt_comAdobeCqComAdobeCqEditor 
 * @param {!string=} opt_comAdobeCqComAdobeCqProjectsCore 
 * @param {!string=} opt_comAdobeCqComAdobeCqProjectsWcmCore 
 * @param {!string=} opt_comAdobeCqComAdobeCqUiCommons 
 * @param {!string=} opt_comAdobeCqComAdobeCqWcmStyle 
 * @param {!string=} opt_comAdobeCqCqActivitymapIntegration 
 * @param {!string=} opt_comAdobeCqCqContexthubCommons 
 * @param {!string=} opt_comAdobeCqCqDtm 
 * @param {!string=} opt_comAdobeCqCqHealthcheck 
 * @param {!string=} opt_comAdobeCqCqMultisiteTargeting 
 * @param {!string=} opt_comAdobeCqCqPreUpgradeCleanup 
 * @param {!string=} opt_comAdobeCqCqProductInfoProvider 
 * @param {!string=} opt_comAdobeCqCqRestSites 
 * @param {!string=} opt_comAdobeCqCqSecurityHc 
 * @param {!string=} opt_comAdobeCqDamCqDamSvgHandler 
 * @param {!string=} opt_comAdobeCqDamCqScene7Imaging 
 * @param {!string=} opt_comAdobeCqDtmReactorCore 
 * @param {!string=} opt_comAdobeCqDtmReactorUi 
 * @param {!string=} opt_comAdobeCqExpJspelResolver 
 * @param {!string=} opt_comAdobeCqInboxCqInbox 
 * @param {!string=} opt_comAdobeCqJsonSchemaParser 
 * @param {!string=} opt_comAdobeCqMediaCqMediaPublishingDpsFpCore 
 * @param {!string=} opt_comAdobeCqMobileCqMobileCaas 
 * @param {!string=} opt_comAdobeCqMobileCqMobileIndexBuilder 
 * @param {!string=} opt_comAdobeCqMobileCqMobilePhonegapBuild 
 * @param {!string=} opt_comAdobeCqMyspell 
 * @param {!string=} opt_comAdobeCqSampleWeRetailCore 
 * @param {!string=} opt_comAdobeCqScreensComAdobeCqScreensDcc 
 * @param {!string=} opt_comAdobeCqScreensComAdobeCqScreensMqCore 
 * @param {!string=} opt_comAdobeCqSocialCqSocialAsProvider 
 * @param {!string=} opt_comAdobeCqSocialCqSocialBadgingBasicImpl 
 * @param {!string=} opt_comAdobeCqSocialCqSocialBadgingImpl 
 * @param {!string=} opt_comAdobeCqSocialCqSocialCalendarImpl 
 * @param {!string=} opt_comAdobeCqSocialCqSocialContentFragmentsImpl 
 * @param {!string=} opt_comAdobeCqSocialCqSocialEnablementImpl 
 * @param {!string=} opt_comAdobeCqSocialCqSocialGraphImpl 
 * @param {!string=} opt_comAdobeCqSocialCqSocialIdeationImpl 
 * @param {!string=} opt_comAdobeCqSocialCqSocialJcrProvider 
 * @param {!string=} opt_comAdobeCqSocialCqSocialMembersImpl 
 * @param {!string=} opt_comAdobeCqSocialCqSocialMsProvider 
 * @param {!string=} opt_comAdobeCqSocialCqSocialNotificationsChannelsWeb 
 * @param {!string=} opt_comAdobeCqSocialCqSocialNotificationsImpl 
 * @param {!string=} opt_comAdobeCqSocialCqSocialRdbProvider 
 * @param {!string=} opt_comAdobeCqSocialCqSocialScfImpl 
 * @param {!string=} opt_comAdobeCqSocialCqSocialScoringBasicImpl 
 * @param {!string=} opt_comAdobeCqSocialCqSocialScoringImpl 
 * @param {!string=} opt_comAdobeCqSocialCqSocialServiceusersImpl 
 * @param {!string=} opt_comAdobeCqSocialCqSocialSrpImpl 
 * @param {!string=} opt_comAdobeCqSocialCqSocialUgcbaseImpl 
 * @param {!string=} opt_comAdobeDamCqDamCfmImpl 
 * @param {!string=} opt_comAdobeFormsFoundationFormsFoundationBase 
 * @param {!string=} opt_comAdobeGraniteApicontroller 
 * @param {!string=} opt_comAdobeGraniteAssetCore 
 * @param {!string=} opt_comAdobeGraniteAuthSso 
 * @param {!string=} opt_comAdobeGraniteBundlesHcImpl 
 * @param {!string=} opt_comAdobeGraniteCompatRouter 
 * @param {!string=} opt_comAdobeGraniteConf 
 * @param {!string=} opt_comAdobeGraniteConfUiCore 
 * @param {!string=} opt_comAdobeGraniteCors 
 * @param {!string=} opt_comAdobeGraniteCrxExplorer 
 * @param {!string=} opt_comAdobeGraniteCrxdeLite 
 * @param {!string=} opt_comAdobeGraniteCryptoConfig 
 * @param {!string=} opt_comAdobeGraniteCryptoExtension 
 * @param {!string=} opt_comAdobeGraniteCryptoFile 
 * @param {!string=} opt_comAdobeGraniteCryptoJcr 
 * @param {!string=} opt_comAdobeGraniteCsrf 
 * @param {!string=} opt_comAdobeGraniteDistributionCore 
 * @param {!string=} opt_comAdobeGraniteDropwizardMetrics 
 * @param {!string=} opt_comAdobeGraniteFragsImpl 
 * @param {!string=} opt_comAdobeGraniteGibson 
 * @param {!string=} opt_comAdobeGraniteInfocollector 
 * @param {!string=} opt_comAdobeGraniteInstallerFactoryPackages 
 * @param {!string=} opt_comAdobeGraniteJettySsl 
 * @param {!string=} opt_comAdobeGraniteJobsAsync 
 * @param {!string=} opt_comAdobeGraniteMaintenanceOak 
 * @param {!string=} opt_comAdobeGraniteMonitoringCore 
 * @param {!string=} opt_comAdobeGraniteQueries 
 * @param {!string=} opt_comAdobeGraniteReplicationHcImpl 
 * @param {!string=} opt_comAdobeGraniteRepositoryChecker 
 * @param {!string=} opt_comAdobeGraniteRepositoryHcImpl 
 * @param {!string=} opt_comAdobeGraniteRestAssets 
 * @param {!string=} opt_comAdobeGraniteSecurityUi 
 * @param {!string=} opt_comAdobeGraniteStartup 
 * @param {!string=} opt_comAdobeGraniteTagsoup 
 * @param {!string=} opt_comAdobeGraniteTaskmanagementCore 
 * @param {!string=} opt_comAdobeGraniteTaskmanagementWorkflow 
 * @param {!string=} opt_comAdobeGraniteUiClientlibsCompilerLess 
 * @param {!string=} opt_comAdobeGraniteUiClientlibsProcessorGcc 
 * @param {!string=} opt_comAdobeGraniteWebconsolePlugins 
 * @param {!string=} opt_comAdobeGraniteWorkflowConsole 
 * @param {!string=} opt_comAdobeXmpWorkerFilesNativeFragmentLinux 
 * @param {!string=} opt_comAdobeXmpWorkerFilesNativeFragmentMacosx 
 * @param {!string=} opt_comAdobeXmpWorkerFilesNativeFragmentWin 
 * @param {!string=} opt_comDayCommonsOsgiWrapperSimpleJndi 
 * @param {!string=} opt_comDayCqCqAuthhandler 
 * @param {!string=} opt_comDayCqCqCompatConfigupdate 
 * @param {!string=} opt_comDayCqCqLicensebranding 
 * @param {!string=} opt_comDayCqCqNotifcationImpl 
 * @param {!string=} opt_comDayCqCqReplicationAudit 
 * @param {!string=} opt_comDayCqCqSearchExt 
 * @param {!string=} opt_comDayCqDamCqDamAnnotationPrint 
 * @param {!string=} opt_comDayCqDamCqDamAssetUsage 
 * @param {!string=} opt_comDayCqDamCqDamS7dam 
 * @param {!string=} opt_comDayCqDamCqDamSimilaritysearch 
 * @param {!string=} opt_comDayCqDamDamWebdavSupport 
 * @param {!string=} opt_comDayCqPreUpgradeTasks 
 * @param {!string=} opt_comDayCqReplicationExtensions 
 * @param {!string=} opt_comDayCqWcmCqMsmCore 
 * @param {!string=} opt_comDayCqWcmCqWcmTranslation 
 * @param {!string=} opt_dayCommonsJrawio 
 * @param {!string=} opt_orgApacheAriesJmxWhiteboard 
 * @param {!string=} opt_orgApacheFelixHttpSslfilter 
 * @param {!string=} opt_orgApacheFelixOrgApacheFelixThreaddump 
 * @param {!string=} opt_orgApacheFelixWebconsolePluginsDs 
 * @param {!string=} opt_orgApacheFelixWebconsolePluginsEvent 
 * @param {!string=} opt_orgApacheFelixWebconsolePluginsMemoryusage 
 * @param {!string=} opt_orgApacheFelixWebconsolePluginsPackageadmin 
 * @param {!string=} opt_orgApacheJackrabbitOakAuthLdap 
 * @param {!string=} opt_orgApacheJackrabbitOakSegmentTar 
 * @param {!string=} opt_orgApacheJackrabbitOakSolrOsgi 
 * @param {!string=} opt_orgApacheSlingBundleresourceImpl 
 * @param {!string=} opt_orgApacheSlingCommonsFsclassloader 
 * @param {!string=} opt_orgApacheSlingCommonsLogWebconsole 
 * @param {!string=} opt_orgApacheSlingDatasource 
 * @param {!string=} opt_orgApacheSlingDiscoveryBase 
 * @param {!string=} opt_orgApacheSlingDiscoveryOak 
 * @param {!string=} opt_orgApacheSlingDiscoverySupport 
 * @param {!string=} opt_orgApacheSlingDistributionApi 
 * @param {!string=} opt_orgApacheSlingDistributionCore 
 * @param {!string=} opt_orgApacheSlingExtensionsWebconsolesecurityprovider 
 * @param {!string=} opt_orgApacheSlingHcWebconsole 
 * @param {!string=} opt_orgApacheSlingInstallerConsole 
 * @param {!string=} opt_orgApacheSlingInstallerProviderFile 
 * @param {!string=} opt_orgApacheSlingInstallerProviderJcr 
 * @param {!string=} opt_orgApacheSlingJcrDavex 
 * @param {!string=} opt_orgApacheSlingJcrResourcesecurity 
 * @param {!string=} opt_orgApacheSlingJmxProvider 
 * @param {!string=} opt_orgApacheSlingLaunchpadInstaller 
 * @param {!string=} opt_orgApacheSlingModelsImpl 
 * @param {!string=} opt_orgApacheSlingRepoinitParser 
 * @param {!string=} opt_orgApacheSlingResourceInventory 
 * @param {!string=} opt_orgApacheSlingResourceresolver 
 * @param {!string=} opt_orgApacheSlingScriptingJavascript 
 * @param {!string=} opt_orgApacheSlingScriptingJst 
 * @param {!string=} opt_orgApacheSlingScriptingSightlyJsProvider 
 * @param {!string=} opt_orgApacheSlingScriptingSightlyModelsProvider 
 * @param {!string=} opt_orgApacheSlingSecurity 
 * @param {!string=} opt_orgApacheSlingServletsCompat 
 * @param {!string=} opt_orgApacheSlingServletsGet 
 * @param {!string=} opt_orgApacheSlingStartupfilterDisabler 
 * @param {!string=} opt_orgApacheSlingTracer 
 * @param {!string=} opt_weRetailClientAppCore 
 * @param {!angular.$http.Config=} opt_extraHttpRequestParams Extra HTTP parameters to send.
 * @return {!angular.$q.Promise<!API.Client.comAdobeGraniteApicontrollerFilterResolverHookFactoryInfo>}
 */
API.Client.ConfigmgrApi.prototype.comAdobeGraniteApicontrollerFilterResolverHookFactory = function(opt_post, opt_apply, opt_delete, opt_action, opt_location, opt_propertylist, opt_comAdobeCqCdnCdnRewriter, opt_comAdobeCqCloudConfigComponents, opt_comAdobeCqCloudConfigCore, opt_comAdobeCqCloudConfigUi, opt_comAdobeCqComAdobeCqEditor, opt_comAdobeCqComAdobeCqProjectsCore, opt_comAdobeCqComAdobeCqProjectsWcmCore, opt_comAdobeCqComAdobeCqUiCommons, opt_comAdobeCqComAdobeCqWcmStyle, opt_comAdobeCqCqActivitymapIntegration, opt_comAdobeCqCqContexthubCommons, opt_comAdobeCqCqDtm, opt_comAdobeCqCqHealthcheck, opt_comAdobeCqCqMultisiteTargeting, opt_comAdobeCqCqPreUpgradeCleanup, opt_comAdobeCqCqProductInfoProvider, opt_comAdobeCqCqRestSites, opt_comAdobeCqCqSecurityHc, opt_comAdobeCqDamCqDamSvgHandler, opt_comAdobeCqDamCqScene7Imaging, opt_comAdobeCqDtmReactorCore, opt_comAdobeCqDtmReactorUi, opt_comAdobeCqExpJspelResolver, opt_comAdobeCqInboxCqInbox, opt_comAdobeCqJsonSchemaParser, opt_comAdobeCqMediaCqMediaPublishingDpsFpCore, opt_comAdobeCqMobileCqMobileCaas, opt_comAdobeCqMobileCqMobileIndexBuilder, opt_comAdobeCqMobileCqMobilePhonegapBuild, opt_comAdobeCqMyspell, opt_comAdobeCqSampleWeRetailCore, opt_comAdobeCqScreensComAdobeCqScreensDcc, opt_comAdobeCqScreensComAdobeCqScreensMqCore, opt_comAdobeCqSocialCqSocialAsProvider, opt_comAdobeCqSocialCqSocialBadgingBasicImpl, opt_comAdobeCqSocialCqSocialBadgingImpl, opt_comAdobeCqSocialCqSocialCalendarImpl, opt_comAdobeCqSocialCqSocialContentFragmentsImpl, opt_comAdobeCqSocialCqSocialEnablementImpl, opt_comAdobeCqSocialCqSocialGraphImpl, opt_comAdobeCqSocialCqSocialIdeationImpl, opt_comAdobeCqSocialCqSocialJcrProvider, opt_comAdobeCqSocialCqSocialMembersImpl, opt_comAdobeCqSocialCqSocialMsProvider, opt_comAdobeCqSocialCqSocialNotificationsChannelsWeb, opt_comAdobeCqSocialCqSocialNotificationsImpl, opt_comAdobeCqSocialCqSocialRdbProvider, opt_comAdobeCqSocialCqSocialScfImpl, opt_comAdobeCqSocialCqSocialScoringBasicImpl, opt_comAdobeCqSocialCqSocialScoringImpl, opt_comAdobeCqSocialCqSocialServiceusersImpl, opt_comAdobeCqSocialCqSocialSrpImpl, opt_comAdobeCqSocialCqSocialUgcbaseImpl, opt_comAdobeDamCqDamCfmImpl, opt_comAdobeFormsFoundationFormsFoundationBase, opt_comAdobeGraniteApicontroller, opt_comAdobeGraniteAssetCore, opt_comAdobeGraniteAuthSso, opt_comAdobeGraniteBundlesHcImpl, opt_comAdobeGraniteCompatRouter, opt_comAdobeGraniteConf, opt_comAdobeGraniteConfUiCore, opt_comAdobeGraniteCors, opt_comAdobeGraniteCrxExplorer, opt_comAdobeGraniteCrxdeLite, opt_comAdobeGraniteCryptoConfig, opt_comAdobeGraniteCryptoExtension, opt_comAdobeGraniteCryptoFile, opt_comAdobeGraniteCryptoJcr, opt_comAdobeGraniteCsrf, opt_comAdobeGraniteDistributionCore, opt_comAdobeGraniteDropwizardMetrics, opt_comAdobeGraniteFragsImpl, opt_comAdobeGraniteGibson, opt_comAdobeGraniteInfocollector, opt_comAdobeGraniteInstallerFactoryPackages, opt_comAdobeGraniteJettySsl, opt_comAdobeGraniteJobsAsync, opt_comAdobeGraniteMaintenanceOak, opt_comAdobeGraniteMonitoringCore, opt_comAdobeGraniteQueries, opt_comAdobeGraniteReplicationHcImpl, opt_comAdobeGraniteRepositoryChecker, opt_comAdobeGraniteRepositoryHcImpl, opt_comAdobeGraniteRestAssets, opt_comAdobeGraniteSecurityUi, opt_comAdobeGraniteStartup, opt_comAdobeGraniteTagsoup, opt_comAdobeGraniteTaskmanagementCore, opt_comAdobeGraniteTaskmanagementWorkflow, opt_comAdobeGraniteUiClientlibsCompilerLess, opt_comAdobeGraniteUiClientlibsProcessorGcc, opt_comAdobeGraniteWebconsolePlugins, opt_comAdobeGraniteWorkflowConsole, opt_comAdobeXmpWorkerFilesNativeFragmentLinux, opt_comAdobeXmpWorkerFilesNativeFragmentMacosx, opt_comAdobeXmpWorkerFilesNativeFragmentWin, opt_comDayCommonsOsgiWrapperSimpleJndi, opt_comDayCqCqAuthhandler, opt_comDayCqCqCompatConfigupdate, opt_comDayCqCqLicensebranding, opt_comDayCqCqNotifcationImpl, opt_comDayCqCqReplicationAudit, opt_comDayCqCqSearchExt, opt_comDayCqDamCqDamAnnotationPrint, opt_comDayCqDamCqDamAssetUsage, opt_comDayCqDamCqDamS7dam, opt_comDayCqDamCqDamSimilaritysearch, opt_comDayCqDamDamWebdavSupport, opt_comDayCqPreUpgradeTasks, opt_comDayCqReplicationExtensions, opt_comDayCqWcmCqMsmCore, opt_comDayCqWcmCqWcmTranslation, opt_dayCommonsJrawio, opt_orgApacheAriesJmxWhiteboard, opt_orgApacheFelixHttpSslfilter, opt_orgApacheFelixOrgApacheFelixThreaddump, opt_orgApacheFelixWebconsolePluginsDs, opt_orgApacheFelixWebconsolePluginsEvent, opt_orgApacheFelixWebconsolePluginsMemoryusage, opt_orgApacheFelixWebconsolePluginsPackageadmin, opt_orgApacheJackrabbitOakAuthLdap, opt_orgApacheJackrabbitOakSegmentTar, opt_orgApacheJackrabbitOakSolrOsgi, opt_orgApacheSlingBundleresourceImpl, opt_orgApacheSlingCommonsFsclassloader, opt_orgApacheSlingCommonsLogWebconsole, opt_orgApacheSlingDatasource, opt_orgApacheSlingDiscoveryBase, opt_orgApacheSlingDiscoveryOak, opt_orgApacheSlingDiscoverySupport, opt_orgApacheSlingDistributionApi, opt_orgApacheSlingDistributionCore, opt_orgApacheSlingExtensionsWebconsolesecurityprovider, opt_orgApacheSlingHcWebconsole, opt_orgApacheSlingInstallerConsole, opt_orgApacheSlingInstallerProviderFile, opt_orgApacheSlingInstallerProviderJcr, opt_orgApacheSlingJcrDavex, opt_orgApacheSlingJcrResourcesecurity, opt_orgApacheSlingJmxProvider, opt_orgApacheSlingLaunchpadInstaller, opt_orgApacheSlingModelsImpl, opt_orgApacheSlingRepoinitParser, opt_orgApacheSlingResourceInventory, opt_orgApacheSlingResourceresolver, opt_orgApacheSlingScriptingJavascript, opt_orgApacheSlingScriptingJst, opt_orgApacheSlingScriptingSightlyJsProvider, opt_orgApacheSlingScriptingSightlyModelsProvider, opt_orgApacheSlingSecurity, opt_orgApacheSlingServletsCompat, opt_orgApacheSlingServletsGet, opt_orgApacheSlingStartupfilterDisabler, opt_orgApacheSlingTracer, opt_weRetailClientAppCore, opt_extraHttpRequestParams) {
  /** @const {string} */
  var path = this.basePath_ + '/system/console/configMgr/com.adobe.granite.apicontroller.FilterResolverHookFactory';

  /** @type {!Object} */
  var queryParameters = {};

  /** @type {!Object} */
  var headerParams = angular.extend({}, this.defaultHeaders_);
  if (opt_post !== undefined) {
    queryParameters['post'] = opt_post;
  }

  if (opt_apply !== undefined) {
    queryParameters['apply'] = opt_apply;
  }

  if (opt_delete !== undefined) {
    queryParameters['delete'] = opt_delete;
  }

  if (opt_action !== undefined) {
    queryParameters['action'] = opt_action;
  }

  if (opt_location !== undefined) {
    queryParameters['$location'] = opt_location;
  }

  if (opt_propertylist !== undefined) {
    queryParameters['propertylist'] = opt_propertylist;
  }

  if (opt_comAdobeCqCdnCdnRewriter !== undefined) {
    queryParameters['com.adobe.cq.cdn.cdn-rewriter'] = opt_comAdobeCqCdnCdnRewriter;
  }

  if (opt_comAdobeCqCloudConfigComponents !== undefined) {
    queryParameters['com.adobe.cq.cloud-config.components'] = opt_comAdobeCqCloudConfigComponents;
  }

  if (opt_comAdobeCqCloudConfigCore !== undefined) {
    queryParameters['com.adobe.cq.cloud-config.core'] = opt_comAdobeCqCloudConfigCore;
  }

  if (opt_comAdobeCqCloudConfigUi !== undefined) {
    queryParameters['com.adobe.cq.cloud-config.ui'] = opt_comAdobeCqCloudConfigUi;
  }

  if (opt_comAdobeCqComAdobeCqEditor !== undefined) {
    queryParameters['com.adobe.cq.com.adobe.cq.editor'] = opt_comAdobeCqComAdobeCqEditor;
  }

  if (opt_comAdobeCqComAdobeCqProjectsCore !== undefined) {
    queryParameters['com.adobe.cq.com.adobe.cq.projects.core'] = opt_comAdobeCqComAdobeCqProjectsCore;
  }

  if (opt_comAdobeCqComAdobeCqProjectsWcmCore !== undefined) {
    queryParameters['com.adobe.cq.com.adobe.cq.projects.wcm.core'] = opt_comAdobeCqComAdobeCqProjectsWcmCore;
  }

  if (opt_comAdobeCqComAdobeCqUiCommons !== undefined) {
    queryParameters['com.adobe.cq.com.adobe.cq.ui.commons'] = opt_comAdobeCqComAdobeCqUiCommons;
  }

  if (opt_comAdobeCqComAdobeCqWcmStyle !== undefined) {
    queryParameters['com.adobe.cq.com.adobe.cq.wcm.style'] = opt_comAdobeCqComAdobeCqWcmStyle;
  }

  if (opt_comAdobeCqCqActivitymapIntegration !== undefined) {
    queryParameters['com.adobe.cq.cq-activitymap-integration'] = opt_comAdobeCqCqActivitymapIntegration;
  }

  if (opt_comAdobeCqCqContexthubCommons !== undefined) {
    queryParameters['com.adobe.cq.cq-contexthub-commons'] = opt_comAdobeCqCqContexthubCommons;
  }

  if (opt_comAdobeCqCqDtm !== undefined) {
    queryParameters['com.adobe.cq.cq-dtm'] = opt_comAdobeCqCqDtm;
  }

  if (opt_comAdobeCqCqHealthcheck !== undefined) {
    queryParameters['com.adobe.cq.cq-healthcheck'] = opt_comAdobeCqCqHealthcheck;
  }

  if (opt_comAdobeCqCqMultisiteTargeting !== undefined) {
    queryParameters['com.adobe.cq.cq-multisite-targeting'] = opt_comAdobeCqCqMultisiteTargeting;
  }

  if (opt_comAdobeCqCqPreUpgradeCleanup !== undefined) {
    queryParameters['com.adobe.cq.cq-pre-upgrade-cleanup'] = opt_comAdobeCqCqPreUpgradeCleanup;
  }

  if (opt_comAdobeCqCqProductInfoProvider !== undefined) {
    queryParameters['com.adobe.cq.cq-product-info-provider'] = opt_comAdobeCqCqProductInfoProvider;
  }

  if (opt_comAdobeCqCqRestSites !== undefined) {
    queryParameters['com.adobe.cq.cq-rest-sites'] = opt_comAdobeCqCqRestSites;
  }

  if (opt_comAdobeCqCqSecurityHc !== undefined) {
    queryParameters['com.adobe.cq.cq-security-hc'] = opt_comAdobeCqCqSecurityHc;
  }

  if (opt_comAdobeCqDamCqDamSvgHandler !== undefined) {
    queryParameters['com.adobe.cq.dam.cq-dam-svg-handler'] = opt_comAdobeCqDamCqDamSvgHandler;
  }

  if (opt_comAdobeCqDamCqScene7Imaging !== undefined) {
    queryParameters['com.adobe.cq.dam.cq-scene7-imaging'] = opt_comAdobeCqDamCqScene7Imaging;
  }

  if (opt_comAdobeCqDtmReactorCore !== undefined) {
    queryParameters['com.adobe.cq.dtm-reactor.core'] = opt_comAdobeCqDtmReactorCore;
  }

  if (opt_comAdobeCqDtmReactorUi !== undefined) {
    queryParameters['com.adobe.cq.dtm-reactor.ui'] = opt_comAdobeCqDtmReactorUi;
  }

  if (opt_comAdobeCqExpJspelResolver !== undefined) {
    queryParameters['com.adobe.cq.exp-jspel-resolver'] = opt_comAdobeCqExpJspelResolver;
  }

  if (opt_comAdobeCqInboxCqInbox !== undefined) {
    queryParameters['com.adobe.cq.inbox.cq-inbox'] = opt_comAdobeCqInboxCqInbox;
  }

  if (opt_comAdobeCqJsonSchemaParser !== undefined) {
    queryParameters['com.adobe.cq.json-schema-parser'] = opt_comAdobeCqJsonSchemaParser;
  }

  if (opt_comAdobeCqMediaCqMediaPublishingDpsFpCore !== undefined) {
    queryParameters['com.adobe.cq.media.cq-media-publishing-dps-fp-core'] = opt_comAdobeCqMediaCqMediaPublishingDpsFpCore;
  }

  if (opt_comAdobeCqMobileCqMobileCaas !== undefined) {
    queryParameters['com.adobe.cq.mobile.cq-mobile-caas'] = opt_comAdobeCqMobileCqMobileCaas;
  }

  if (opt_comAdobeCqMobileCqMobileIndexBuilder !== undefined) {
    queryParameters['com.adobe.cq.mobile.cq-mobile-index-builder'] = opt_comAdobeCqMobileCqMobileIndexBuilder;
  }

  if (opt_comAdobeCqMobileCqMobilePhonegapBuild !== undefined) {
    queryParameters['com.adobe.cq.mobile.cq-mobile-phonegap-build'] = opt_comAdobeCqMobileCqMobilePhonegapBuild;
  }

  if (opt_comAdobeCqMyspell !== undefined) {
    queryParameters['com.adobe.cq.myspell'] = opt_comAdobeCqMyspell;
  }

  if (opt_comAdobeCqSampleWeRetailCore !== undefined) {
    queryParameters['com.adobe.cq.sample.we.retail.core'] = opt_comAdobeCqSampleWeRetailCore;
  }

  if (opt_comAdobeCqScreensComAdobeCqScreensDcc !== undefined) {
    queryParameters['com.adobe.cq.screens.com.adobe.cq.screens.dcc'] = opt_comAdobeCqScreensComAdobeCqScreensDcc;
  }

  if (opt_comAdobeCqScreensComAdobeCqScreensMqCore !== undefined) {
    queryParameters['com.adobe.cq.screens.com.adobe.cq.screens.mq.core'] = opt_comAdobeCqScreensComAdobeCqScreensMqCore;
  }

  if (opt_comAdobeCqSocialCqSocialAsProvider !== undefined) {
    queryParameters['com.adobe.cq.social.cq-social-as-provider'] = opt_comAdobeCqSocialCqSocialAsProvider;
  }

  if (opt_comAdobeCqSocialCqSocialBadgingBasicImpl !== undefined) {
    queryParameters['com.adobe.cq.social.cq-social-badging-basic-impl'] = opt_comAdobeCqSocialCqSocialBadgingBasicImpl;
  }

  if (opt_comAdobeCqSocialCqSocialBadgingImpl !== undefined) {
    queryParameters['com.adobe.cq.social.cq-social-badging-impl'] = opt_comAdobeCqSocialCqSocialBadgingImpl;
  }

  if (opt_comAdobeCqSocialCqSocialCalendarImpl !== undefined) {
    queryParameters['com.adobe.cq.social.cq-social-calendar-impl'] = opt_comAdobeCqSocialCqSocialCalendarImpl;
  }

  if (opt_comAdobeCqSocialCqSocialContentFragmentsImpl !== undefined) {
    queryParameters['com.adobe.cq.social.cq-social-content-fragments-impl'] = opt_comAdobeCqSocialCqSocialContentFragmentsImpl;
  }

  if (opt_comAdobeCqSocialCqSocialEnablementImpl !== undefined) {
    queryParameters['com.adobe.cq.social.cq-social-enablement-impl'] = opt_comAdobeCqSocialCqSocialEnablementImpl;
  }

  if (opt_comAdobeCqSocialCqSocialGraphImpl !== undefined) {
    queryParameters['com.adobe.cq.social.cq-social-graph-impl'] = opt_comAdobeCqSocialCqSocialGraphImpl;
  }

  if (opt_comAdobeCqSocialCqSocialIdeationImpl !== undefined) {
    queryParameters['com.adobe.cq.social.cq-social-ideation-impl'] = opt_comAdobeCqSocialCqSocialIdeationImpl;
  }

  if (opt_comAdobeCqSocialCqSocialJcrProvider !== undefined) {
    queryParameters['com.adobe.cq.social.cq-social-jcr-provider'] = opt_comAdobeCqSocialCqSocialJcrProvider;
  }

  if (opt_comAdobeCqSocialCqSocialMembersImpl !== undefined) {
    queryParameters['com.adobe.cq.social.cq-social-members-impl'] = opt_comAdobeCqSocialCqSocialMembersImpl;
  }

  if (opt_comAdobeCqSocialCqSocialMsProvider !== undefined) {
    queryParameters['com.adobe.cq.social.cq-social-ms-provider'] = opt_comAdobeCqSocialCqSocialMsProvider;
  }

  if (opt_comAdobeCqSocialCqSocialNotificationsChannelsWeb !== undefined) {
    queryParameters['com.adobe.cq.social.cq-social-notifications-channels-web'] = opt_comAdobeCqSocialCqSocialNotificationsChannelsWeb;
  }

  if (opt_comAdobeCqSocialCqSocialNotificationsImpl !== undefined) {
    queryParameters['com.adobe.cq.social.cq-social-notifications-impl'] = opt_comAdobeCqSocialCqSocialNotificationsImpl;
  }

  if (opt_comAdobeCqSocialCqSocialRdbProvider !== undefined) {
    queryParameters['com.adobe.cq.social.cq-social-rdb-provider'] = opt_comAdobeCqSocialCqSocialRdbProvider;
  }

  if (opt_comAdobeCqSocialCqSocialScfImpl !== undefined) {
    queryParameters['com.adobe.cq.social.cq-social-scf-impl'] = opt_comAdobeCqSocialCqSocialScfImpl;
  }

  if (opt_comAdobeCqSocialCqSocialScoringBasicImpl !== undefined) {
    queryParameters['com.adobe.cq.social.cq-social-scoring-basic-impl'] = opt_comAdobeCqSocialCqSocialScoringBasicImpl;
  }

  if (opt_comAdobeCqSocialCqSocialScoringImpl !== undefined) {
    queryParameters['com.adobe.cq.social.cq-social-scoring-impl'] = opt_comAdobeCqSocialCqSocialScoringImpl;
  }

  if (opt_comAdobeCqSocialCqSocialServiceusersImpl !== undefined) {
    queryParameters['com.adobe.cq.social.cq-social-serviceusers-impl'] = opt_comAdobeCqSocialCqSocialServiceusersImpl;
  }

  if (opt_comAdobeCqSocialCqSocialSrpImpl !== undefined) {
    queryParameters['com.adobe.cq.social.cq-social-srp-impl'] = opt_comAdobeCqSocialCqSocialSrpImpl;
  }

  if (opt_comAdobeCqSocialCqSocialUgcbaseImpl !== undefined) {
    queryParameters['com.adobe.cq.social.cq-social-ugcbase-impl'] = opt_comAdobeCqSocialCqSocialUgcbaseImpl;
  }

  if (opt_comAdobeDamCqDamCfmImpl !== undefined) {
    queryParameters['com.adobe.dam.cq-dam-cfm-impl'] = opt_comAdobeDamCqDamCfmImpl;
  }

  if (opt_comAdobeFormsFoundationFormsFoundationBase !== undefined) {
    queryParameters['com.adobe.forms.foundation-forms-foundation-base'] = opt_comAdobeFormsFoundationFormsFoundationBase;
  }

  if (opt_comAdobeGraniteApicontroller !== undefined) {
    queryParameters['com.adobe.granite.apicontroller'] = opt_comAdobeGraniteApicontroller;
  }

  if (opt_comAdobeGraniteAssetCore !== undefined) {
    queryParameters['com.adobe.granite.asset.core'] = opt_comAdobeGraniteAssetCore;
  }

  if (opt_comAdobeGraniteAuthSso !== undefined) {
    queryParameters['com.adobe.granite.auth.sso'] = opt_comAdobeGraniteAuthSso;
  }

  if (opt_comAdobeGraniteBundlesHcImpl !== undefined) {
    queryParameters['com.adobe.granite.bundles.hc.impl'] = opt_comAdobeGraniteBundlesHcImpl;
  }

  if (opt_comAdobeGraniteCompatRouter !== undefined) {
    queryParameters['com.adobe.granite.compat-router'] = opt_comAdobeGraniteCompatRouter;
  }

  if (opt_comAdobeGraniteConf !== undefined) {
    queryParameters['com.adobe.granite.conf'] = opt_comAdobeGraniteConf;
  }

  if (opt_comAdobeGraniteConfUiCore !== undefined) {
    queryParameters['com.adobe.granite.conf.ui.core'] = opt_comAdobeGraniteConfUiCore;
  }

  if (opt_comAdobeGraniteCors !== undefined) {
    queryParameters['com.adobe.granite.cors'] = opt_comAdobeGraniteCors;
  }

  if (opt_comAdobeGraniteCrxExplorer !== undefined) {
    queryParameters['com.adobe.granite.crx-explorer'] = opt_comAdobeGraniteCrxExplorer;
  }

  if (opt_comAdobeGraniteCrxdeLite !== undefined) {
    queryParameters['com.adobe.granite.crxde-lite'] = opt_comAdobeGraniteCrxdeLite;
  }

  if (opt_comAdobeGraniteCryptoConfig !== undefined) {
    queryParameters['com.adobe.granite.crypto.config'] = opt_comAdobeGraniteCryptoConfig;
  }

  if (opt_comAdobeGraniteCryptoExtension !== undefined) {
    queryParameters['com.adobe.granite.crypto.extension'] = opt_comAdobeGraniteCryptoExtension;
  }

  if (opt_comAdobeGraniteCryptoFile !== undefined) {
    queryParameters['com.adobe.granite.crypto.file'] = opt_comAdobeGraniteCryptoFile;
  }

  if (opt_comAdobeGraniteCryptoJcr !== undefined) {
    queryParameters['com.adobe.granite.crypto.jcr'] = opt_comAdobeGraniteCryptoJcr;
  }

  if (opt_comAdobeGraniteCsrf !== undefined) {
    queryParameters['com.adobe.granite.csrf'] = opt_comAdobeGraniteCsrf;
  }

  if (opt_comAdobeGraniteDistributionCore !== undefined) {
    queryParameters['com.adobe.granite.distribution.core'] = opt_comAdobeGraniteDistributionCore;
  }

  if (opt_comAdobeGraniteDropwizardMetrics !== undefined) {
    queryParameters['com.adobe.granite.dropwizard.metrics'] = opt_comAdobeGraniteDropwizardMetrics;
  }

  if (opt_comAdobeGraniteFragsImpl !== undefined) {
    queryParameters['com.adobe.granite.frags.impl'] = opt_comAdobeGraniteFragsImpl;
  }

  if (opt_comAdobeGraniteGibson !== undefined) {
    queryParameters['com.adobe.granite.gibson'] = opt_comAdobeGraniteGibson;
  }

  if (opt_comAdobeGraniteInfocollector !== undefined) {
    queryParameters['com.adobe.granite.infocollector'] = opt_comAdobeGraniteInfocollector;
  }

  if (opt_comAdobeGraniteInstallerFactoryPackages !== undefined) {
    queryParameters['com.adobe.granite.installer.factory.packages'] = opt_comAdobeGraniteInstallerFactoryPackages;
  }

  if (opt_comAdobeGraniteJettySsl !== undefined) {
    queryParameters['com.adobe.granite.jetty.ssl'] = opt_comAdobeGraniteJettySsl;
  }

  if (opt_comAdobeGraniteJobsAsync !== undefined) {
    queryParameters['com.adobe.granite.jobs.async'] = opt_comAdobeGraniteJobsAsync;
  }

  if (opt_comAdobeGraniteMaintenanceOak !== undefined) {
    queryParameters['com.adobe.granite.maintenance.oak'] = opt_comAdobeGraniteMaintenanceOak;
  }

  if (opt_comAdobeGraniteMonitoringCore !== undefined) {
    queryParameters['com.adobe.granite.monitoring.core'] = opt_comAdobeGraniteMonitoringCore;
  }

  if (opt_comAdobeGraniteQueries !== undefined) {
    queryParameters['com.adobe.granite.queries'] = opt_comAdobeGraniteQueries;
  }

  if (opt_comAdobeGraniteReplicationHcImpl !== undefined) {
    queryParameters['com.adobe.granite.replication.hc.impl'] = opt_comAdobeGraniteReplicationHcImpl;
  }

  if (opt_comAdobeGraniteRepositoryChecker !== undefined) {
    queryParameters['com.adobe.granite.repository.checker'] = opt_comAdobeGraniteRepositoryChecker;
  }

  if (opt_comAdobeGraniteRepositoryHcImpl !== undefined) {
    queryParameters['com.adobe.granite.repository.hc.impl'] = opt_comAdobeGraniteRepositoryHcImpl;
  }

  if (opt_comAdobeGraniteRestAssets !== undefined) {
    queryParameters['com.adobe.granite.rest.assets'] = opt_comAdobeGraniteRestAssets;
  }

  if (opt_comAdobeGraniteSecurityUi !== undefined) {
    queryParameters['com.adobe.granite.security.ui'] = opt_comAdobeGraniteSecurityUi;
  }

  if (opt_comAdobeGraniteStartup !== undefined) {
    queryParameters['com.adobe.granite.startup'] = opt_comAdobeGraniteStartup;
  }

  if (opt_comAdobeGraniteTagsoup !== undefined) {
    queryParameters['com.adobe.granite.tagsoup'] = opt_comAdobeGraniteTagsoup;
  }

  if (opt_comAdobeGraniteTaskmanagementCore !== undefined) {
    queryParameters['com.adobe.granite.taskmanagement.core'] = opt_comAdobeGraniteTaskmanagementCore;
  }

  if (opt_comAdobeGraniteTaskmanagementWorkflow !== undefined) {
    queryParameters['com.adobe.granite.taskmanagement.workflow'] = opt_comAdobeGraniteTaskmanagementWorkflow;
  }

  if (opt_comAdobeGraniteUiClientlibsCompilerLess !== undefined) {
    queryParameters['com.adobe.granite.ui.clientlibs.compiler.less'] = opt_comAdobeGraniteUiClientlibsCompilerLess;
  }

  if (opt_comAdobeGraniteUiClientlibsProcessorGcc !== undefined) {
    queryParameters['com.adobe.granite.ui.clientlibs.processor.gcc'] = opt_comAdobeGraniteUiClientlibsProcessorGcc;
  }

  if (opt_comAdobeGraniteWebconsolePlugins !== undefined) {
    queryParameters['com.adobe.granite.webconsole.plugins'] = opt_comAdobeGraniteWebconsolePlugins;
  }

  if (opt_comAdobeGraniteWorkflowConsole !== undefined) {
    queryParameters['com.adobe.granite.workflow.console'] = opt_comAdobeGraniteWorkflowConsole;
  }

  if (opt_comAdobeXmpWorkerFilesNativeFragmentLinux !== undefined) {
    queryParameters['com.adobe.xmp.worker.files.native.fragment.linux'] = opt_comAdobeXmpWorkerFilesNativeFragmentLinux;
  }

  if (opt_comAdobeXmpWorkerFilesNativeFragmentMacosx !== undefined) {
    queryParameters['com.adobe.xmp.worker.files.native.fragment.macosx'] = opt_comAdobeXmpWorkerFilesNativeFragmentMacosx;
  }

  if (opt_comAdobeXmpWorkerFilesNativeFragmentWin !== undefined) {
    queryParameters['com.adobe.xmp.worker.files.native.fragment.win'] = opt_comAdobeXmpWorkerFilesNativeFragmentWin;
  }

  if (opt_comDayCommonsOsgiWrapperSimpleJndi !== undefined) {
    queryParameters['com.day.commons.osgi.wrapper.simple-jndi'] = opt_comDayCommonsOsgiWrapperSimpleJndi;
  }

  if (opt_comDayCqCqAuthhandler !== undefined) {
    queryParameters['com.day.cq.cq-authhandler'] = opt_comDayCqCqAuthhandler;
  }

  if (opt_comDayCqCqCompatConfigupdate !== undefined) {
    queryParameters['com.day.cq.cq-compat-configupdate'] = opt_comDayCqCqCompatConfigupdate;
  }

  if (opt_comDayCqCqLicensebranding !== undefined) {
    queryParameters['com.day.cq.cq-licensebranding'] = opt_comDayCqCqLicensebranding;
  }

  if (opt_comDayCqCqNotifcationImpl !== undefined) {
    queryParameters['com.day.cq.cq-notifcation-impl'] = opt_comDayCqCqNotifcationImpl;
  }

  if (opt_comDayCqCqReplicationAudit !== undefined) {
    queryParameters['com.day.cq.cq-replication-audit'] = opt_comDayCqCqReplicationAudit;
  }

  if (opt_comDayCqCqSearchExt !== undefined) {
    queryParameters['com.day.cq.cq-search-ext'] = opt_comDayCqCqSearchExt;
  }

  if (opt_comDayCqDamCqDamAnnotationPrint !== undefined) {
    queryParameters['com.day.cq.dam.cq-dam-annotation-print'] = opt_comDayCqDamCqDamAnnotationPrint;
  }

  if (opt_comDayCqDamCqDamAssetUsage !== undefined) {
    queryParameters['com.day.cq.dam.cq-dam-asset-usage'] = opt_comDayCqDamCqDamAssetUsage;
  }

  if (opt_comDayCqDamCqDamS7dam !== undefined) {
    queryParameters['com.day.cq.dam.cq-dam-s7dam'] = opt_comDayCqDamCqDamS7dam;
  }

  if (opt_comDayCqDamCqDamSimilaritysearch !== undefined) {
    queryParameters['com.day.cq.dam.cq-dam-similaritysearch'] = opt_comDayCqDamCqDamSimilaritysearch;
  }

  if (opt_comDayCqDamDamWebdavSupport !== undefined) {
    queryParameters['com.day.cq.dam.dam-webdav-support'] = opt_comDayCqDamDamWebdavSupport;
  }

  if (opt_comDayCqPreUpgradeTasks !== undefined) {
    queryParameters['com.day.cq.pre-upgrade-tasks'] = opt_comDayCqPreUpgradeTasks;
  }

  if (opt_comDayCqReplicationExtensions !== undefined) {
    queryParameters['com.day.cq.replication.extensions'] = opt_comDayCqReplicationExtensions;
  }

  if (opt_comDayCqWcmCqMsmCore !== undefined) {
    queryParameters['com.day.cq.wcm.cq-msm-core'] = opt_comDayCqWcmCqMsmCore;
  }

  if (opt_comDayCqWcmCqWcmTranslation !== undefined) {
    queryParameters['com.day.cq.wcm.cq-wcm-translation'] = opt_comDayCqWcmCqWcmTranslation;
  }

  if (opt_dayCommonsJrawio !== undefined) {
    queryParameters['day-commons-jrawio'] = opt_dayCommonsJrawio;
  }

  if (opt_orgApacheAriesJmxWhiteboard !== undefined) {
    queryParameters['org.apache.aries.jmx.whiteboard'] = opt_orgApacheAriesJmxWhiteboard;
  }

  if (opt_orgApacheFelixHttpSslfilter !== undefined) {
    queryParameters['org.apache.felix.http.sslfilter'] = opt_orgApacheFelixHttpSslfilter;
  }

  if (opt_orgApacheFelixOrgApacheFelixThreaddump !== undefined) {
    queryParameters['org.apache.felix.org.apache.felix.threaddump'] = opt_orgApacheFelixOrgApacheFelixThreaddump;
  }

  if (opt_orgApacheFelixWebconsolePluginsDs !== undefined) {
    queryParameters['org.apache.felix.webconsole.plugins.ds'] = opt_orgApacheFelixWebconsolePluginsDs;
  }

  if (opt_orgApacheFelixWebconsolePluginsEvent !== undefined) {
    queryParameters['org.apache.felix.webconsole.plugins.event'] = opt_orgApacheFelixWebconsolePluginsEvent;
  }

  if (opt_orgApacheFelixWebconsolePluginsMemoryusage !== undefined) {
    queryParameters['org.apache.felix.webconsole.plugins.memoryusage'] = opt_orgApacheFelixWebconsolePluginsMemoryusage;
  }

  if (opt_orgApacheFelixWebconsolePluginsPackageadmin !== undefined) {
    queryParameters['org.apache.felix.webconsole.plugins.packageadmin'] = opt_orgApacheFelixWebconsolePluginsPackageadmin;
  }

  if (opt_orgApacheJackrabbitOakAuthLdap !== undefined) {
    queryParameters['org.apache.jackrabbit.oak-auth-ldap'] = opt_orgApacheJackrabbitOakAuthLdap;
  }

  if (opt_orgApacheJackrabbitOakSegmentTar !== undefined) {
    queryParameters['org.apache.jackrabbit.oak-segment-tar'] = opt_orgApacheJackrabbitOakSegmentTar;
  }

  if (opt_orgApacheJackrabbitOakSolrOsgi !== undefined) {
    queryParameters['org.apache.jackrabbit.oak-solr-osgi'] = opt_orgApacheJackrabbitOakSolrOsgi;
  }

  if (opt_orgApacheSlingBundleresourceImpl !== undefined) {
    queryParameters['org.apache.sling.bundleresource.impl'] = opt_orgApacheSlingBundleresourceImpl;
  }

  if (opt_orgApacheSlingCommonsFsclassloader !== undefined) {
    queryParameters['org.apache.sling.commons.fsclassloader'] = opt_orgApacheSlingCommonsFsclassloader;
  }

  if (opt_orgApacheSlingCommonsLogWebconsole !== undefined) {
    queryParameters['org.apache.sling.commons.log.webconsole'] = opt_orgApacheSlingCommonsLogWebconsole;
  }

  if (opt_orgApacheSlingDatasource !== undefined) {
    queryParameters['org.apache.sling.datasource'] = opt_orgApacheSlingDatasource;
  }

  if (opt_orgApacheSlingDiscoveryBase !== undefined) {
    queryParameters['org.apache.sling.discovery.base'] = opt_orgApacheSlingDiscoveryBase;
  }

  if (opt_orgApacheSlingDiscoveryOak !== undefined) {
    queryParameters['org.apache.sling.discovery.oak'] = opt_orgApacheSlingDiscoveryOak;
  }

  if (opt_orgApacheSlingDiscoverySupport !== undefined) {
    queryParameters['org.apache.sling.discovery.support'] = opt_orgApacheSlingDiscoverySupport;
  }

  if (opt_orgApacheSlingDistributionApi !== undefined) {
    queryParameters['org.apache.sling.distribution.api'] = opt_orgApacheSlingDistributionApi;
  }

  if (opt_orgApacheSlingDistributionCore !== undefined) {
    queryParameters['org.apache.sling.distribution.core'] = opt_orgApacheSlingDistributionCore;
  }

  if (opt_orgApacheSlingExtensionsWebconsolesecurityprovider !== undefined) {
    queryParameters['org.apache.sling.extensions.webconsolesecurityprovider'] = opt_orgApacheSlingExtensionsWebconsolesecurityprovider;
  }

  if (opt_orgApacheSlingHcWebconsole !== undefined) {
    queryParameters['org.apache.sling.hc.webconsole'] = opt_orgApacheSlingHcWebconsole;
  }

  if (opt_orgApacheSlingInstallerConsole !== undefined) {
    queryParameters['org.apache.sling.installer.console'] = opt_orgApacheSlingInstallerConsole;
  }

  if (opt_orgApacheSlingInstallerProviderFile !== undefined) {
    queryParameters['org.apache.sling.installer.provider.file'] = opt_orgApacheSlingInstallerProviderFile;
  }

  if (opt_orgApacheSlingInstallerProviderJcr !== undefined) {
    queryParameters['org.apache.sling.installer.provider.jcr'] = opt_orgApacheSlingInstallerProviderJcr;
  }

  if (opt_orgApacheSlingJcrDavex !== undefined) {
    queryParameters['org.apache.sling.jcr.davex'] = opt_orgApacheSlingJcrDavex;
  }

  if (opt_orgApacheSlingJcrResourcesecurity !== undefined) {
    queryParameters['org.apache.sling.jcr.resourcesecurity'] = opt_orgApacheSlingJcrResourcesecurity;
  }

  if (opt_orgApacheSlingJmxProvider !== undefined) {
    queryParameters['org.apache.sling.jmx.provider'] = opt_orgApacheSlingJmxProvider;
  }

  if (opt_orgApacheSlingLaunchpadInstaller !== undefined) {
    queryParameters['org.apache.sling.launchpad.installer'] = opt_orgApacheSlingLaunchpadInstaller;
  }

  if (opt_orgApacheSlingModelsImpl !== undefined) {
    queryParameters['org.apache.sling.models.impl'] = opt_orgApacheSlingModelsImpl;
  }

  if (opt_orgApacheSlingRepoinitParser !== undefined) {
    queryParameters['org.apache.sling.repoinit.parser'] = opt_orgApacheSlingRepoinitParser;
  }

  if (opt_orgApacheSlingResourceInventory !== undefined) {
    queryParameters['org.apache.sling.resource.inventory'] = opt_orgApacheSlingResourceInventory;
  }

  if (opt_orgApacheSlingResourceresolver !== undefined) {
    queryParameters['org.apache.sling.resourceresolver'] = opt_orgApacheSlingResourceresolver;
  }

  if (opt_orgApacheSlingScriptingJavascript !== undefined) {
    queryParameters['org.apache.sling.scripting.javascript'] = opt_orgApacheSlingScriptingJavascript;
  }

  if (opt_orgApacheSlingScriptingJst !== undefined) {
    queryParameters['org.apache.sling.scripting.jst'] = opt_orgApacheSlingScriptingJst;
  }

  if (opt_orgApacheSlingScriptingSightlyJsProvider !== undefined) {
    queryParameters['org.apache.sling.scripting.sightly.js.provider'] = opt_orgApacheSlingScriptingSightlyJsProvider;
  }

  if (opt_orgApacheSlingScriptingSightlyModelsProvider !== undefined) {
    queryParameters['org.apache.sling.scripting.sightly.models.provider'] = opt_orgApacheSlingScriptingSightlyModelsProvider;
  }

  if (opt_orgApacheSlingSecurity !== undefined) {
    queryParameters['org.apache.sling.security'] = opt_orgApacheSlingSecurity;
  }

  if (opt_orgApacheSlingServletsCompat !== undefined) {
    queryParameters['org.apache.sling.servlets.compat'] = opt_orgApacheSlingServletsCompat;
  }

  if (opt_orgApacheSlingServletsGet !== undefined) {
    queryParameters['org.apache.sling.servlets.get'] = opt_orgApacheSlingServletsGet;
  }

  if (opt_orgApacheSlingStartupfilterDisabler !== undefined) {
    queryParameters['org.apache.sling.startupfilter.disabler'] = opt_orgApacheSlingStartupfilterDisabler;
  }

  if (opt_orgApacheSlingTracer !== undefined) {
    queryParameters['org.apache.sling.tracer'] = opt_orgApacheSlingTracer;
  }

  if (opt_weRetailClientAppCore !== undefined) {
    queryParameters['we.retail.client.app.core'] = opt_weRetailClientAppCore;
  }

  /** @type {!Object} */
  var httpRequestParams = {
    method: 'POST',
    url: path,
    json: true,
            params: queryParameters,
    headers: headerParams
  };

  if (opt_extraHttpRequestParams) {
    httpRequestParams = angular.extend(httpRequestParams, opt_extraHttpRequestParams);
  }

  return (/** @type {?} */ (this.http_))(httpRequestParams);
}

/**
 * 
 * 
 * @param {!boolean=} opt_post 
 * @param {!boolean=} opt_apply 
 * @param {!boolean=} opt_delete 
 * @param {!string=} opt_action 
 * @param {!string=} opt_location 
 * @param {!Array<!string>=} opt_propertylist 
 * @param {!string=} opt_path 
 * @param {!number=} opt_serviceRanking 
 * @param {!angular.$http.Config=} opt_extraHttpRequestParams Extra HTTP parameters to send.
 * @return {!angular.$q.Promise<!API.Client.comAdobeGraniteAuthCertImplClientCertAuthHandlerInfo>}
 */
API.Client.ConfigmgrApi.prototype.comAdobeGraniteAuthCertImplClientCertAuthHandler = function(opt_post, opt_apply, opt_delete, opt_action, opt_location, opt_propertylist, opt_path, opt_serviceRanking, opt_extraHttpRequestParams) {
  /** @const {string} */
  var path = this.basePath_ + '/system/console/configMgr/com.adobe.granite.auth.cert.impl.ClientCertAuthHandler';

  /** @type {!Object} */
  var queryParameters = {};

  /** @type {!Object} */
  var headerParams = angular.extend({}, this.defaultHeaders_);
  if (opt_post !== undefined) {
    queryParameters['post'] = opt_post;
  }

  if (opt_apply !== undefined) {
    queryParameters['apply'] = opt_apply;
  }

  if (opt_delete !== undefined) {
    queryParameters['delete'] = opt_delete;
  }

  if (opt_action !== undefined) {
    queryParameters['action'] = opt_action;
  }

  if (opt_location !== undefined) {
    queryParameters['$location'] = opt_location;
  }

  if (opt_propertylist !== undefined) {
    queryParameters['propertylist'] = opt_propertylist;
  }

  if (opt_path !== undefined) {
    queryParameters['path'] = opt_path;
  }

  if (opt_serviceRanking !== undefined) {
    queryParameters['service.ranking'] = opt_serviceRanking;
  }

  /** @type {!Object} */
  var httpRequestParams = {
    method: 'POST',
    url: path,
    json: true,
            params: queryParameters,
    headers: headerParams
  };

  if (opt_extraHttpRequestParams) {
    httpRequestParams = angular.extend(httpRequestParams, opt_extraHttpRequestParams);
  }

  return (/** @type {?} */ (this.http_))(httpRequestParams);
}

/**
 * 
 * 
 * @param {!boolean=} opt_post 
 * @param {!boolean=} opt_apply 
 * @param {!boolean=} opt_delete 
 * @param {!string=} opt_action 
 * @param {!string=} opt_location 
 * @param {!Array<!string>=} opt_propertylist 
 * @param {!string=} opt_configid 
 * @param {!string=} opt_scope 
 * @param {!angular.$http.Config=} opt_extraHttpRequestParams Extra HTTP parameters to send.
 * @return {!angular.$q.Promise<!API.Client.comAdobeGraniteAuthImsInfo>}
 */
API.Client.ConfigmgrApi.prototype.comAdobeGraniteAuthIms = function(opt_post, opt_apply, opt_delete, opt_action, opt_location, opt_propertylist, opt_configid, opt_scope, opt_extraHttpRequestParams) {
  /** @const {string} */
  var path = this.basePath_ + '/system/console/configMgr/com.adobe.granite.auth.ims';

  /** @type {!Object} */
  var queryParameters = {};

  /** @type {!Object} */
  var headerParams = angular.extend({}, this.defaultHeaders_);
  if (opt_post !== undefined) {
    queryParameters['post'] = opt_post;
  }

  if (opt_apply !== undefined) {
    queryParameters['apply'] = opt_apply;
  }

  if (opt_delete !== undefined) {
    queryParameters['delete'] = opt_delete;
  }

  if (opt_action !== undefined) {
    queryParameters['action'] = opt_action;
  }

  if (opt_location !== undefined) {
    queryParameters['$location'] = opt_location;
  }

  if (opt_propertylist !== undefined) {
    queryParameters['propertylist'] = opt_propertylist;
  }

  if (opt_configid !== undefined) {
    queryParameters['configid'] = opt_configid;
  }

  if (opt_scope !== undefined) {
    queryParameters['scope'] = opt_scope;
  }

  /** @type {!Object} */
  var httpRequestParams = {
    method: 'POST',
    url: path,
    json: true,
            params: queryParameters,
    headers: headerParams
  };

  if (opt_extraHttpRequestParams) {
    httpRequestParams = angular.extend(httpRequestParams, opt_extraHttpRequestParams);
  }

  return (/** @type {?} */ (this.http_))(httpRequestParams);
}

/**
 * 
 * 
 * @param {!boolean=} opt_post 
 * @param {!boolean=} opt_apply 
 * @param {!boolean=} opt_delete 
 * @param {!string=} opt_action 
 * @param {!string=} opt_location 
 * @param {!Array<!string>=} opt_propertylist 
 * @param {!string=} opt_oauthProviderId 
 * @param {!angular.$http.Config=} opt_extraHttpRequestParams Extra HTTP parameters to send.
 * @return {!angular.$q.Promise<!API.Client.comAdobeGraniteAuthImsImplExternalUserIdMappingProviderExtensionInfo>}
 */
API.Client.ConfigmgrApi.prototype.comAdobeGraniteAuthImsImplExternalUserIdMappingProviderExtension = function(opt_post, opt_apply, opt_delete, opt_action, opt_location, opt_propertylist, opt_oauthProviderId, opt_extraHttpRequestParams) {
  /** @const {string} */
  var path = this.basePath_ + '/system/console/configMgr/com.adobe.granite.auth.ims.impl.ExternalUserIdMappingProviderExtension';

  /** @type {!Object} */
  var queryParameters = {};

  /** @type {!Object} */
  var headerParams = angular.extend({}, this.defaultHeaders_);
  if (opt_post !== undefined) {
    queryParameters['post'] = opt_post;
  }

  if (opt_apply !== undefined) {
    queryParameters['apply'] = opt_apply;
  }

  if (opt_delete !== undefined) {
    queryParameters['delete'] = opt_delete;
  }

  if (opt_action !== undefined) {
    queryParameters['action'] = opt_action;
  }

  if (opt_location !== undefined) {
    queryParameters['$location'] = opt_location;
  }

  if (opt_propertylist !== undefined) {
    queryParameters['propertylist'] = opt_propertylist;
  }

  if (opt_oauthProviderId !== undefined) {
    queryParameters['oauth.provider.id'] = opt_oauthProviderId;
  }

  /** @type {!Object} */
  var httpRequestParams = {
    method: 'POST',
    url: path,
    json: true,
            params: queryParameters,
    headers: headerParams
  };

  if (opt_extraHttpRequestParams) {
    httpRequestParams = angular.extend(httpRequestParams, opt_extraHttpRequestParams);
  }

  return (/** @type {?} */ (this.http_))(httpRequestParams);
}

/**
 * 
 * 
 * @param {!boolean=} opt_post 
 * @param {!boolean=} opt_apply 
 * @param {!boolean=} opt_delete 
 * @param {!string=} opt_action 
 * @param {!string=} opt_location 
 * @param {!Array<!string>=} opt_propertylist 
 * @param {!string=} opt_authImsClientSecret 
 * @param {!string=} opt_customizerType 
 * @param {!angular.$http.Config=} opt_extraHttpRequestParams Extra HTTP parameters to send.
 * @return {!angular.$q.Promise<!API.Client.comAdobeGraniteAuthImsImplIMSAccessTokenRequestCustomizerImplInfo>}
 */
API.Client.ConfigmgrApi.prototype.comAdobeGraniteAuthImsImplIMSAccessTokenRequestCustomizerImpl = function(opt_post, opt_apply, opt_delete, opt_action, opt_location, opt_propertylist, opt_authImsClientSecret, opt_customizerType, opt_extraHttpRequestParams) {
  /** @const {string} */
  var path = this.basePath_ + '/system/console/configMgr/com.adobe.granite.auth.ims.impl.IMSAccessTokenRequestCustomizerImpl';

  /** @type {!Object} */
  var queryParameters = {};

  /** @type {!Object} */
  var headerParams = angular.extend({}, this.defaultHeaders_);
  if (opt_post !== undefined) {
    queryParameters['post'] = opt_post;
  }

  if (opt_apply !== undefined) {
    queryParameters['apply'] = opt_apply;
  }

  if (opt_delete !== undefined) {
    queryParameters['delete'] = opt_delete;
  }

  if (opt_action !== undefined) {
    queryParameters['action'] = opt_action;
  }

  if (opt_location !== undefined) {
    queryParameters['$location'] = opt_location;
  }

  if (opt_propertylist !== undefined) {
    queryParameters['propertylist'] = opt_propertylist;
  }

  if (opt_authImsClientSecret !== undefined) {
    queryParameters['auth.ims.client.secret'] = opt_authImsClientSecret;
  }

  if (opt_customizerType !== undefined) {
    queryParameters['customizer.type'] = opt_customizerType;
  }

  /** @type {!Object} */
  var httpRequestParams = {
    method: 'POST',
    url: path,
    json: true,
            params: queryParameters,
    headers: headerParams
  };

  if (opt_extraHttpRequestParams) {
    httpRequestParams = angular.extend(httpRequestParams, opt_extraHttpRequestParams);
  }

  return (/** @type {?} */ (this.http_))(httpRequestParams);
}

/**
 * 
 * 
 * @param {!boolean=} opt_post 
 * @param {!boolean=} opt_apply 
 * @param {!boolean=} opt_delete 
 * @param {!string=} opt_action 
 * @param {!string=} opt_location 
 * @param {!Array<!string>=} opt_propertylist 
 * @param {!string=} opt_oauthProviderId 
 * @param {!angular.$http.Config=} opt_extraHttpRequestParams Extra HTTP parameters to send.
 * @return {!angular.$q.Promise<!API.Client.comAdobeGraniteAuthImsImplIMSInstanceCredentialsValidatorInfo>}
 */
API.Client.ConfigmgrApi.prototype.comAdobeGraniteAuthImsImplIMSInstanceCredentialsValidator = function(opt_post, opt_apply, opt_delete, opt_action, opt_location, opt_propertylist, opt_oauthProviderId, opt_extraHttpRequestParams) {
  /** @const {string} */
  var path = this.basePath_ + '/system/console/configMgr/com.adobe.granite.auth.ims.impl.IMSInstanceCredentialsValidator';

  /** @type {!Object} */
  var queryParameters = {};

  /** @type {!Object} */
  var headerParams = angular.extend({}, this.defaultHeaders_);
  if (opt_post !== undefined) {
    queryParameters['post'] = opt_post;
  }

  if (opt_apply !== undefined) {
    queryParameters['apply'] = opt_apply;
  }

  if (opt_delete !== undefined) {
    queryParameters['delete'] = opt_delete;
  }

  if (opt_action !== undefined) {
    queryParameters['action'] = opt_action;
  }

  if (opt_location !== undefined) {
    queryParameters['$location'] = opt_location;
  }

  if (opt_propertylist !== undefined) {
    queryParameters['propertylist'] = opt_propertylist;
  }

  if (opt_oauthProviderId !== undefined) {
    queryParameters['oauth.provider.id'] = opt_oauthProviderId;
  }

  /** @type {!Object} */
  var httpRequestParams = {
    method: 'POST',
    url: path,
    json: true,
            params: queryParameters,
    headers: headerParams
  };

  if (opt_extraHttpRequestParams) {
    httpRequestParams = angular.extend(httpRequestParams, opt_extraHttpRequestParams);
  }

  return (/** @type {?} */ (this.http_))(httpRequestParams);
}

/**
 * 
 * 
 * @param {!boolean=} opt_post 
 * @param {!boolean=} opt_apply 
 * @param {!boolean=} opt_delete 
 * @param {!string=} opt_action 
 * @param {!string=} opt_location 
 * @param {!Array<!string>=} opt_propertylist 
 * @param {!string=} opt_oauthProviderId 
 * @param {!string=} opt_oauthProviderImsAuthorizationUrl 
 * @param {!string=} opt_oauthProviderImsTokenUrl 
 * @param {!string=} opt_oauthProviderImsProfileUrl 
 * @param {!Array<!string>=} opt_oauthProviderImsExtendedDetailsUrls 
 * @param {!string=} opt_oauthProviderImsValidateTokenUrl 
 * @param {!string=} opt_oauthProviderImsSessionProperty 
 * @param {!string=} opt_oauthProviderImsServiceTokenClientId 
 * @param {!string=} opt_oauthProviderImsServiceTokenClientSecret 
 * @param {!string=} opt_oauthProviderImsServiceToken 
 * @param {!string=} opt_imsOrgRef 
 * @param {!Array<!string>=} opt_imsGroupMapping 
 * @param {!boolean=} opt_oauthProviderImsOnlyLicenseGroup 
 * @param {!angular.$http.Config=} opt_extraHttpRequestParams Extra HTTP parameters to send.
 * @return {!angular.$q.Promise<!API.Client.comAdobeGraniteAuthImsImplIMSProviderImplInfo>}
 */
API.Client.ConfigmgrApi.prototype.comAdobeGraniteAuthImsImplIMSProviderImpl = function(opt_post, opt_apply, opt_delete, opt_action, opt_location, opt_propertylist, opt_oauthProviderId, opt_oauthProviderImsAuthorizationUrl, opt_oauthProviderImsTokenUrl, opt_oauthProviderImsProfileUrl, opt_oauthProviderImsExtendedDetailsUrls, opt_oauthProviderImsValidateTokenUrl, opt_oauthProviderImsSessionProperty, opt_oauthProviderImsServiceTokenClientId, opt_oauthProviderImsServiceTokenClientSecret, opt_oauthProviderImsServiceToken, opt_imsOrgRef, opt_imsGroupMapping, opt_oauthProviderImsOnlyLicenseGroup, opt_extraHttpRequestParams) {
  /** @const {string} */
  var path = this.basePath_ + '/system/console/configMgr/com.adobe.granite.auth.ims.impl.IMSProviderImpl';

  /** @type {!Object} */
  var queryParameters = {};

  /** @type {!Object} */
  var headerParams = angular.extend({}, this.defaultHeaders_);
  if (opt_post !== undefined) {
    queryParameters['post'] = opt_post;
  }

  if (opt_apply !== undefined) {
    queryParameters['apply'] = opt_apply;
  }

  if (opt_delete !== undefined) {
    queryParameters['delete'] = opt_delete;
  }

  if (opt_action !== undefined) {
    queryParameters['action'] = opt_action;
  }

  if (opt_location !== undefined) {
    queryParameters['$location'] = opt_location;
  }

  if (opt_propertylist !== undefined) {
    queryParameters['propertylist'] = opt_propertylist;
  }

  if (opt_oauthProviderId !== undefined) {
    queryParameters['oauth.provider.id'] = opt_oauthProviderId;
  }

  if (opt_oauthProviderImsAuthorizationUrl !== undefined) {
    queryParameters['oauth.provider.ims.authorization.url'] = opt_oauthProviderImsAuthorizationUrl;
  }

  if (opt_oauthProviderImsTokenUrl !== undefined) {
    queryParameters['oauth.provider.ims.token.url'] = opt_oauthProviderImsTokenUrl;
  }

  if (opt_oauthProviderImsProfileUrl !== undefined) {
    queryParameters['oauth.provider.ims.profile.url'] = opt_oauthProviderImsProfileUrl;
  }

  if (opt_oauthProviderImsExtendedDetailsUrls !== undefined) {
    queryParameters['oauth.provider.ims.extended.details.urls'] = opt_oauthProviderImsExtendedDetailsUrls;
  }

  if (opt_oauthProviderImsValidateTokenUrl !== undefined) {
    queryParameters['oauth.provider.ims.validate.token.url'] = opt_oauthProviderImsValidateTokenUrl;
  }

  if (opt_oauthProviderImsSessionProperty !== undefined) {
    queryParameters['oauth.provider.ims.session.property'] = opt_oauthProviderImsSessionProperty;
  }

  if (opt_oauthProviderImsServiceTokenClientId !== undefined) {
    queryParameters['oauth.provider.ims.service.token.client.id'] = opt_oauthProviderImsServiceTokenClientId;
  }

  if (opt_oauthProviderImsServiceTokenClientSecret !== undefined) {
    queryParameters['oauth.provider.ims.service.token.client.secret'] = opt_oauthProviderImsServiceTokenClientSecret;
  }

  if (opt_oauthProviderImsServiceToken !== undefined) {
    queryParameters['oauth.provider.ims.service.token'] = opt_oauthProviderImsServiceToken;
  }

  if (opt_imsOrgRef !== undefined) {
    queryParameters['ims.org.ref'] = opt_imsOrgRef;
  }

  if (opt_imsGroupMapping !== undefined) {
    queryParameters['ims.group.mapping'] = opt_imsGroupMapping;
  }

  if (opt_oauthProviderImsOnlyLicenseGroup !== undefined) {
    queryParameters['oauth.provider.ims.only.license.group'] = opt_oauthProviderImsOnlyLicenseGroup;
  }

  /** @type {!Object} */
  var httpRequestParams = {
    method: 'POST',
    url: path,
    json: true,
            params: queryParameters,
    headers: headerParams
  };

  if (opt_extraHttpRequestParams) {
    httpRequestParams = angular.extend(httpRequestParams, opt_extraHttpRequestParams);
  }

  return (/** @type {?} */ (this.http_))(httpRequestParams);
}

/**
 * 
 * 
 * @param {!boolean=} opt_post 
 * @param {!boolean=} opt_apply 
 * @param {!boolean=} opt_delete 
 * @param {!string=} opt_action 
 * @param {!string=} opt_location 
 * @param {!Array<!string>=} opt_propertylist 
 * @param {!string=} opt_oauthConfigmanagerImsConfigid 
 * @param {!string=} opt_imsOwningEntity 
 * @param {!string=} opt_aemInstanceId 
 * @param {!string=} opt_imsServiceCode 
 * @param {!angular.$http.Config=} opt_extraHttpRequestParams Extra HTTP parameters to send.
 * @return {!angular.$q.Promise<!API.Client.comAdobeGraniteAuthImsImplImsConfigProviderImplInfo>}
 */
API.Client.ConfigmgrApi.prototype.comAdobeGraniteAuthImsImplImsConfigProviderImpl = function(opt_post, opt_apply, opt_delete, opt_action, opt_location, opt_propertylist, opt_oauthConfigmanagerImsConfigid, opt_imsOwningEntity, opt_aemInstanceId, opt_imsServiceCode, opt_extraHttpRequestParams) {
  /** @const {string} */
  var path = this.basePath_ + '/system/console/configMgr/com.adobe.granite.auth.ims.impl.ImsConfigProviderImpl';

  /** @type {!Object} */
  var queryParameters = {};

  /** @type {!Object} */
  var headerParams = angular.extend({}, this.defaultHeaders_);
  if (opt_post !== undefined) {
    queryParameters['post'] = opt_post;
  }

  if (opt_apply !== undefined) {
    queryParameters['apply'] = opt_apply;
  }

  if (opt_delete !== undefined) {
    queryParameters['delete'] = opt_delete;
  }

  if (opt_action !== undefined) {
    queryParameters['action'] = opt_action;
  }

  if (opt_location !== undefined) {
    queryParameters['$location'] = opt_location;
  }

  if (opt_propertylist !== undefined) {
    queryParameters['propertylist'] = opt_propertylist;
  }

  if (opt_oauthConfigmanagerImsConfigid !== undefined) {
    queryParameters['oauth.configmanager.ims.configid'] = opt_oauthConfigmanagerImsConfigid;
  }

  if (opt_imsOwningEntity !== undefined) {
    queryParameters['ims.owningEntity'] = opt_imsOwningEntity;
  }

  if (opt_aemInstanceId !== undefined) {
    queryParameters['aem.instanceId'] = opt_aemInstanceId;
  }

  if (opt_imsServiceCode !== undefined) {
    queryParameters['ims.serviceCode'] = opt_imsServiceCode;
  }

  /** @type {!Object} */
  var httpRequestParams = {
    method: 'POST',
    url: path,
    json: true,
            params: queryParameters,
    headers: headerParams
  };

  if (opt_extraHttpRequestParams) {
    httpRequestParams = angular.extend(httpRequestParams, opt_extraHttpRequestParams);
  }

  return (/** @type {?} */ (this.http_))(httpRequestParams);
}

/**
 * 
 * 
 * @param {!boolean=} opt_post 
 * @param {!boolean=} opt_apply 
 * @param {!boolean=} opt_delete 
 * @param {!string=} opt_action 
 * @param {!string=} opt_location 
 * @param {!Array<!string>=} opt_propertylist 
 * @param {!string=} opt_name 
 * @param {!string=} opt_authTokenProviderTitle 
 * @param {!Array<!string>=} opt_authTokenProviderDefaultClaims 
 * @param {!string=} opt_authTokenProviderEndpoint 
 * @param {!string=} opt_authAccessTokenRequest 
 * @param {!string=} opt_authTokenProviderKeypairAlias 
 * @param {!number=} opt_authTokenProviderConnTimeout 
 * @param {!number=} opt_authTokenProviderSoTimeout 
 * @param {!string=} opt_authTokenProviderClientId 
 * @param {!string=} opt_authTokenProviderScope 
 * @param {!boolean=} opt_authTokenProviderReuseAccessToken 
 * @param {!boolean=} opt_authTokenProviderRelaxedSsl 
 * @param {!string=} opt_tokenRequestCustomizerType 
 * @param {!string=} opt_authTokenValidatorType 
 * @param {!angular.$http.Config=} opt_extraHttpRequestParams Extra HTTP parameters to send.
 * @return {!angular.$q.Promise<!API.Client.comAdobeGraniteAuthOauthAccesstokenProviderInfo>}
 */
API.Client.ConfigmgrApi.prototype.comAdobeGraniteAuthOauthAccesstokenProvider = function(opt_post, opt_apply, opt_delete, opt_action, opt_location, opt_propertylist, opt_name, opt_authTokenProviderTitle, opt_authTokenProviderDefaultClaims, opt_authTokenProviderEndpoint, opt_authAccessTokenRequest, opt_authTokenProviderKeypairAlias, opt_authTokenProviderConnTimeout, opt_authTokenProviderSoTimeout, opt_authTokenProviderClientId, opt_authTokenProviderScope, opt_authTokenProviderReuseAccessToken, opt_authTokenProviderRelaxedSsl, opt_tokenRequestCustomizerType, opt_authTokenValidatorType, opt_extraHttpRequestParams) {
  /** @const {string} */
  var path = this.basePath_ + '/system/console/configMgr/com.adobe.granite.auth.oauth.accesstoken.provider';

  /** @type {!Object} */
  var queryParameters = {};

  /** @type {!Object} */
  var headerParams = angular.extend({}, this.defaultHeaders_);
  if (opt_post !== undefined) {
    queryParameters['post'] = opt_post;
  }

  if (opt_apply !== undefined) {
    queryParameters['apply'] = opt_apply;
  }

  if (opt_delete !== undefined) {
    queryParameters['delete'] = opt_delete;
  }

  if (opt_action !== undefined) {
    queryParameters['action'] = opt_action;
  }

  if (opt_location !== undefined) {
    queryParameters['$location'] = opt_location;
  }

  if (opt_propertylist !== undefined) {
    queryParameters['propertylist'] = opt_propertylist;
  }

  if (opt_name !== undefined) {
    queryParameters['name'] = opt_name;
  }

  if (opt_authTokenProviderTitle !== undefined) {
    queryParameters['auth.token.provider.title'] = opt_authTokenProviderTitle;
  }

  if (opt_authTokenProviderDefaultClaims !== undefined) {
    queryParameters['auth.token.provider.default.claims'] = opt_authTokenProviderDefaultClaims;
  }

  if (opt_authTokenProviderEndpoint !== undefined) {
    queryParameters['auth.token.provider.endpoint'] = opt_authTokenProviderEndpoint;
  }

  if (opt_authAccessTokenRequest !== undefined) {
    queryParameters['auth.access.token.request'] = opt_authAccessTokenRequest;
  }

  if (opt_authTokenProviderKeypairAlias !== undefined) {
    queryParameters['auth.token.provider.keypair.alias'] = opt_authTokenProviderKeypairAlias;
  }

  if (opt_authTokenProviderConnTimeout !== undefined) {
    queryParameters['auth.token.provider.conn.timeout'] = opt_authTokenProviderConnTimeout;
  }

  if (opt_authTokenProviderSoTimeout !== undefined) {
    queryParameters['auth.token.provider.so.timeout'] = opt_authTokenProviderSoTimeout;
  }

  if (opt_authTokenProviderClientId !== undefined) {
    queryParameters['auth.token.provider.client.id'] = opt_authTokenProviderClientId;
  }

  if (opt_authTokenProviderScope !== undefined) {
    queryParameters['auth.token.provider.scope'] = opt_authTokenProviderScope;
  }

  if (opt_authTokenProviderReuseAccessToken !== undefined) {
    queryParameters['auth.token.provider.reuse.access.token'] = opt_authTokenProviderReuseAccessToken;
  }

  if (opt_authTokenProviderRelaxedSsl !== undefined) {
    queryParameters['auth.token.provider.relaxed.ssl'] = opt_authTokenProviderRelaxedSsl;
  }

  if (opt_tokenRequestCustomizerType !== undefined) {
    queryParameters['token.request.customizer.type'] = opt_tokenRequestCustomizerType;
  }

  if (opt_authTokenValidatorType !== undefined) {
    queryParameters['auth.token.validator.type'] = opt_authTokenValidatorType;
  }

  /** @type {!Object} */
  var httpRequestParams = {
    method: 'POST',
    url: path,
    json: true,
            params: queryParameters,
    headers: headerParams
  };

  if (opt_extraHttpRequestParams) {
    httpRequestParams = angular.extend(httpRequestParams, opt_extraHttpRequestParams);
  }

  return (/** @type {?} */ (this.http_))(httpRequestParams);
}

/**
 * 
 * 
 * @param {!boolean=} opt_post 
 * @param {!boolean=} opt_apply 
 * @param {!boolean=} opt_delete 
 * @param {!string=} opt_action 
 * @param {!string=} opt_location 
 * @param {!Array<!string>=} opt_propertylist 
 * @param {!string=} opt_path 
 * @param {!Array<!string>=} opt_oauthClientIdsAllowed 
 * @param {!boolean=} opt_authBearerSyncIms 
 * @param {!string=} opt_authTokenRequestParameter 
 * @param {!string=} opt_oauthBearerConfigid 
 * @param {!boolean=} opt_oauthJwtSupport 
 * @param {!angular.$http.Config=} opt_extraHttpRequestParams Extra HTTP parameters to send.
 * @return {!angular.$q.Promise<!API.Client.comAdobeGraniteAuthOauthImplBearerAuthenticationHandlerInfo>}
 */
API.Client.ConfigmgrApi.prototype.comAdobeGraniteAuthOauthImplBearerAuthenticationHandler = function(opt_post, opt_apply, opt_delete, opt_action, opt_location, opt_propertylist, opt_path, opt_oauthClientIdsAllowed, opt_authBearerSyncIms, opt_authTokenRequestParameter, opt_oauthBearerConfigid, opt_oauthJwtSupport, opt_extraHttpRequestParams) {
  /** @const {string} */
  var path = this.basePath_ + '/system/console/configMgr/com.adobe.granite.auth.oauth.impl.BearerAuthenticationHandler';

  /** @type {!Object} */
  var queryParameters = {};

  /** @type {!Object} */
  var headerParams = angular.extend({}, this.defaultHeaders_);
  if (opt_post !== undefined) {
    queryParameters['post'] = opt_post;
  }

  if (opt_apply !== undefined) {
    queryParameters['apply'] = opt_apply;
  }

  if (opt_delete !== undefined) {
    queryParameters['delete'] = opt_delete;
  }

  if (opt_action !== undefined) {
    queryParameters['action'] = opt_action;
  }

  if (opt_location !== undefined) {
    queryParameters['$location'] = opt_location;
  }

  if (opt_propertylist !== undefined) {
    queryParameters['propertylist'] = opt_propertylist;
  }

  if (opt_path !== undefined) {
    queryParameters['path'] = opt_path;
  }

  if (opt_oauthClientIdsAllowed !== undefined) {
    queryParameters['oauth.clientIds.allowed'] = opt_oauthClientIdsAllowed;
  }

  if (opt_authBearerSyncIms !== undefined) {
    queryParameters['auth.bearer.sync.ims'] = opt_authBearerSyncIms;
  }

  if (opt_authTokenRequestParameter !== undefined) {
    queryParameters['auth.tokenRequestParameter'] = opt_authTokenRequestParameter;
  }

  if (opt_oauthBearerConfigid !== undefined) {
    queryParameters['oauth.bearer.configid'] = opt_oauthBearerConfigid;
  }

  if (opt_oauthJwtSupport !== undefined) {
    queryParameters['oauth.jwt.support'] = opt_oauthJwtSupport;
  }

  /** @type {!Object} */
  var httpRequestParams = {
    method: 'POST',
    url: path,
    json: true,
            params: queryParameters,
    headers: headerParams
  };

  if (opt_extraHttpRequestParams) {
    httpRequestParams = angular.extend(httpRequestParams, opt_extraHttpRequestParams);
  }

  return (/** @type {?} */ (this.http_))(httpRequestParams);
}

/**
 * 
 * 
 * @param {!boolean=} opt_post 
 * @param {!boolean=} opt_apply 
 * @param {!boolean=} opt_delete 
 * @param {!string=} opt_action 
 * @param {!string=} opt_location 
 * @param {!Array<!string>=} opt_propertylist 
 * @param {!string=} opt_authTokenValidatorType 
 * @param {!angular.$http.Config=} opt_extraHttpRequestParams Extra HTTP parameters to send.
 * @return {!angular.$q.Promise<!API.Client.comAdobeGraniteAuthOauthImplDefaultTokenValidatorImplInfo>}
 */
API.Client.ConfigmgrApi.prototype.comAdobeGraniteAuthOauthImplDefaultTokenValidatorImpl = function(opt_post, opt_apply, opt_delete, opt_action, opt_location, opt_propertylist, opt_authTokenValidatorType, opt_extraHttpRequestParams) {
  /** @const {string} */
  var path = this.basePath_ + '/system/console/configMgr/com.adobe.granite.auth.oauth.impl.DefaultTokenValidatorImpl';

  /** @type {!Object} */
  var queryParameters = {};

  /** @type {!Object} */
  var headerParams = angular.extend({}, this.defaultHeaders_);
  if (opt_post !== undefined) {
    queryParameters['post'] = opt_post;
  }

  if (opt_apply !== undefined) {
    queryParameters['apply'] = opt_apply;
  }

  if (opt_delete !== undefined) {
    queryParameters['delete'] = opt_delete;
  }

  if (opt_action !== undefined) {
    queryParameters['action'] = opt_action;
  }

  if (opt_location !== undefined) {
    queryParameters['$location'] = opt_location;
  }

  if (opt_propertylist !== undefined) {
    queryParameters['propertylist'] = opt_propertylist;
  }

  if (opt_authTokenValidatorType !== undefined) {
    queryParameters['auth.token.validator.type'] = opt_authTokenValidatorType;
  }

  /** @type {!Object} */
  var httpRequestParams = {
    method: 'POST',
    url: path,
    json: true,
            params: queryParameters,
    headers: headerParams
  };

  if (opt_extraHttpRequestParams) {
    httpRequestParams = angular.extend(httpRequestParams, opt_extraHttpRequestParams);
  }

  return (/** @type {?} */ (this.http_))(httpRequestParams);
}

/**
 * 
 * 
 * @param {!boolean=} opt_post 
 * @param {!boolean=} opt_apply 
 * @param {!boolean=} opt_delete 
 * @param {!string=} opt_action 
 * @param {!string=} opt_location 
 * @param {!Array<!string>=} opt_propertylist 
 * @param {!string=} opt_oauthProviderId 
 * @param {!angular.$http.Config=} opt_extraHttpRequestParams Extra HTTP parameters to send.
 * @return {!angular.$q.Promise<!API.Client.comAdobeGraniteAuthOauthImplFacebookProviderImplInfo>}
 */
API.Client.ConfigmgrApi.prototype.comAdobeGraniteAuthOauthImplFacebookProviderImpl = function(opt_post, opt_apply, opt_delete, opt_action, opt_location, opt_propertylist, opt_oauthProviderId, opt_extraHttpRequestParams) {
  /** @const {string} */
  var path = this.basePath_ + '/system/console/configMgr/com.adobe.granite.auth.oauth.impl.FacebookProviderImpl';

  /** @type {!Object} */
  var queryParameters = {};

  /** @type {!Object} */
  var headerParams = angular.extend({}, this.defaultHeaders_);
  if (opt_post !== undefined) {
    queryParameters['post'] = opt_post;
  }

  if (opt_apply !== undefined) {
    queryParameters['apply'] = opt_apply;
  }

  if (opt_delete !== undefined) {
    queryParameters['delete'] = opt_delete;
  }

  if (opt_action !== undefined) {
    queryParameters['action'] = opt_action;
  }

  if (opt_location !== undefined) {
    queryParameters['$location'] = opt_location;
  }

  if (opt_propertylist !== undefined) {
    queryParameters['propertylist'] = opt_propertylist;
  }

  if (opt_oauthProviderId !== undefined) {
    queryParameters['oauth.provider.id'] = opt_oauthProviderId;
  }

  /** @type {!Object} */
  var httpRequestParams = {
    method: 'POST',
    url: path,
    json: true,
            params: queryParameters,
    headers: headerParams
  };

  if (opt_extraHttpRequestParams) {
    httpRequestParams = angular.extend(httpRequestParams, opt_extraHttpRequestParams);
  }

  return (/** @type {?} */ (this.http_))(httpRequestParams);
}

/**
 * 
 * 
 * @param {!boolean=} opt_post 
 * @param {!boolean=} opt_apply 
 * @param {!boolean=} opt_delete 
 * @param {!string=} opt_action 
 * @param {!string=} opt_location 
 * @param {!Array<!string>=} opt_propertylist 
 * @param {!string=} opt_oauthProviderId 
 * @param {!string=} opt_oauthProviderGithubAuthorizationUrl 
 * @param {!string=} opt_oauthProviderGithubTokenUrl 
 * @param {!string=} opt_oauthProviderGithubProfileUrl 
 * @param {!angular.$http.Config=} opt_extraHttpRequestParams Extra HTTP parameters to send.
 * @return {!angular.$q.Promise<!API.Client.comAdobeGraniteAuthOauthImplGithubProviderImplInfo>}
 */
API.Client.ConfigmgrApi.prototype.comAdobeGraniteAuthOauthImplGithubProviderImpl = function(opt_post, opt_apply, opt_delete, opt_action, opt_location, opt_propertylist, opt_oauthProviderId, opt_oauthProviderGithubAuthorizationUrl, opt_oauthProviderGithubTokenUrl, opt_oauthProviderGithubProfileUrl, opt_extraHttpRequestParams) {
  /** @const {string} */
  var path = this.basePath_ + '/system/console/configMgr/com.adobe.granite.auth.oauth.impl.GithubProviderImpl';

  /** @type {!Object} */
  var queryParameters = {};

  /** @type {!Object} */
  var headerParams = angular.extend({}, this.defaultHeaders_);
  if (opt_post !== undefined) {
    queryParameters['post'] = opt_post;
  }

  if (opt_apply !== undefined) {
    queryParameters['apply'] = opt_apply;
  }

  if (opt_delete !== undefined) {
    queryParameters['delete'] = opt_delete;
  }

  if (opt_action !== undefined) {
    queryParameters['action'] = opt_action;
  }

  if (opt_location !== undefined) {
    queryParameters['$location'] = opt_location;
  }

  if (opt_propertylist !== undefined) {
    queryParameters['propertylist'] = opt_propertylist;
  }

  if (opt_oauthProviderId !== undefined) {
    queryParameters['oauth.provider.id'] = opt_oauthProviderId;
  }

  if (opt_oauthProviderGithubAuthorizationUrl !== undefined) {
    queryParameters['oauth.provider.github.authorization.url'] = opt_oauthProviderGithubAuthorizationUrl;
  }

  if (opt_oauthProviderGithubTokenUrl !== undefined) {
    queryParameters['oauth.provider.github.token.url'] = opt_oauthProviderGithubTokenUrl;
  }

  if (opt_oauthProviderGithubProfileUrl !== undefined) {
    queryParameters['oauth.provider.github.profile.url'] = opt_oauthProviderGithubProfileUrl;
  }

  /** @type {!Object} */
  var httpRequestParams = {
    method: 'POST',
    url: path,
    json: true,
            params: queryParameters,
    headers: headerParams
  };

  if (opt_extraHttpRequestParams) {
    httpRequestParams = angular.extend(httpRequestParams, opt_extraHttpRequestParams);
  }

  return (/** @type {?} */ (this.http_))(httpRequestParams);
}

/**
 * 
 * 
 * @param {!boolean=} opt_post 
 * @param {!boolean=} opt_apply 
 * @param {!boolean=} opt_delete 
 * @param {!string=} opt_action 
 * @param {!string=} opt_location 
 * @param {!Array<!string>=} opt_propertylist 
 * @param {!string=} opt_oauthProviderId 
 * @param {!string=} opt_oauthProviderGraniteAuthorizationUrl 
 * @param {!string=} opt_oauthProviderGraniteTokenUrl 
 * @param {!string=} opt_oauthProviderGraniteProfileUrl 
 * @param {!string=} opt_oauthProviderGraniteExtendedDetailsUrls 
 * @param {!angular.$http.Config=} opt_extraHttpRequestParams Extra HTTP parameters to send.
 * @return {!angular.$q.Promise<!API.Client.comAdobeGraniteAuthOauthImplGraniteProviderInfo>}
 */
API.Client.ConfigmgrApi.prototype.comAdobeGraniteAuthOauthImplGraniteProvider = function(opt_post, opt_apply, opt_delete, opt_action, opt_location, opt_propertylist, opt_oauthProviderId, opt_oauthProviderGraniteAuthorizationUrl, opt_oauthProviderGraniteTokenUrl, opt_oauthProviderGraniteProfileUrl, opt_oauthProviderGraniteExtendedDetailsUrls, opt_extraHttpRequestParams) {
  /** @const {string} */
  var path = this.basePath_ + '/system/console/configMgr/com.adobe.granite.auth.oauth.impl.GraniteProvider';

  /** @type {!Object} */
  var queryParameters = {};

  /** @type {!Object} */
  var headerParams = angular.extend({}, this.defaultHeaders_);
  if (opt_post !== undefined) {
    queryParameters['post'] = opt_post;
  }

  if (opt_apply !== undefined) {
    queryParameters['apply'] = opt_apply;
  }

  if (opt_delete !== undefined) {
    queryParameters['delete'] = opt_delete;
  }

  if (opt_action !== undefined) {
    queryParameters['action'] = opt_action;
  }

  if (opt_location !== undefined) {
    queryParameters['$location'] = opt_location;
  }

  if (opt_propertylist !== undefined) {
    queryParameters['propertylist'] = opt_propertylist;
  }

  if (opt_oauthProviderId !== undefined) {
    queryParameters['oauth.provider.id'] = opt_oauthProviderId;
  }

  if (opt_oauthProviderGraniteAuthorizationUrl !== undefined) {
    queryParameters['oauth.provider.granite.authorization.url'] = opt_oauthProviderGraniteAuthorizationUrl;
  }

  if (opt_oauthProviderGraniteTokenUrl !== undefined) {
    queryParameters['oauth.provider.granite.token.url'] = opt_oauthProviderGraniteTokenUrl;
  }

  if (opt_oauthProviderGraniteProfileUrl !== undefined) {
    queryParameters['oauth.provider.granite.profile.url'] = opt_oauthProviderGraniteProfileUrl;
  }

  if (opt_oauthProviderGraniteExtendedDetailsUrls !== undefined) {
    queryParameters['oauth.provider.granite.extended.details.urls'] = opt_oauthProviderGraniteExtendedDetailsUrls;
  }

  /** @type {!Object} */
  var httpRequestParams = {
    method: 'POST',
    url: path,
    json: true,
            params: queryParameters,
    headers: headerParams
  };

  if (opt_extraHttpRequestParams) {
    httpRequestParams = angular.extend(httpRequestParams, opt_extraHttpRequestParams);
  }

  return (/** @type {?} */ (this.http_))(httpRequestParams);
}

/**
 * 
 * 
 * @param {!boolean=} opt_post 
 * @param {!boolean=} opt_apply 
 * @param {!boolean=} opt_delete 
 * @param {!string=} opt_action 
 * @param {!string=} opt_location 
 * @param {!Array<!string>=} opt_propertylist 
 * @param {!string=} opt_oauthCookieLoginTimeout 
 * @param {!string=} opt_oauthCookieMaxAge 
 * @param {!angular.$http.Config=} opt_extraHttpRequestParams Extra HTTP parameters to send.
 * @return {!angular.$q.Promise<!API.Client.comAdobeGraniteAuthOauthImplHelperProviderConfigManagerInfo>}
 */
API.Client.ConfigmgrApi.prototype.comAdobeGraniteAuthOauthImplHelperProviderConfigManager = function(opt_post, opt_apply, opt_delete, opt_action, opt_location, opt_propertylist, opt_oauthCookieLoginTimeout, opt_oauthCookieMaxAge, opt_extraHttpRequestParams) {
  /** @const {string} */
  var path = this.basePath_ + '/system/console/configMgr/com.adobe.granite.auth.oauth.impl.helper.ProviderConfigManager';

  /** @type {!Object} */
  var queryParameters = {};

  /** @type {!Object} */
  var headerParams = angular.extend({}, this.defaultHeaders_);
  if (opt_post !== undefined) {
    queryParameters['post'] = opt_post;
  }

  if (opt_apply !== undefined) {
    queryParameters['apply'] = opt_apply;
  }

  if (opt_delete !== undefined) {
    queryParameters['delete'] = opt_delete;
  }

  if (opt_action !== undefined) {
    queryParameters['action'] = opt_action;
  }

  if (opt_location !== undefined) {
    queryParameters['$location'] = opt_location;
  }

  if (opt_propertylist !== undefined) {
    queryParameters['propertylist'] = opt_propertylist;
  }

  if (opt_oauthCookieLoginTimeout !== undefined) {
    queryParameters['oauth.cookie.login.timeout'] = opt_oauthCookieLoginTimeout;
  }

  if (opt_oauthCookieMaxAge !== undefined) {
    queryParameters['oauth.cookie.max.age'] = opt_oauthCookieMaxAge;
  }

  /** @type {!Object} */
  var httpRequestParams = {
    method: 'POST',
    url: path,
    json: true,
            params: queryParameters,
    headers: headerParams
  };

  if (opt_extraHttpRequestParams) {
    httpRequestParams = angular.extend(httpRequestParams, opt_extraHttpRequestParams);
  }

  return (/** @type {?} */ (this.http_))(httpRequestParams);
}

/**
 * 
 * 
 * @param {!boolean=} opt_post 
 * @param {!boolean=} opt_apply 
 * @param {!boolean=} opt_delete 
 * @param {!string=} opt_action 
 * @param {!string=} opt_location 
 * @param {!Array<!string>=} opt_propertylist 
 * @param {!string=} opt_oauthCookieLoginTimeout 
 * @param {!string=} opt_oauthCookieMaxAge 
 * @param {!angular.$http.Config=} opt_extraHttpRequestParams Extra HTTP parameters to send.
 * @return {!angular.$q.Promise<!API.Client.comAdobeGraniteAuthOauthImplHelperProviderConfigManagerInternalInfo>}
 */
API.Client.ConfigmgrApi.prototype.comAdobeGraniteAuthOauthImplHelperProviderConfigManagerInternal = function(opt_post, opt_apply, opt_delete, opt_action, opt_location, opt_propertylist, opt_oauthCookieLoginTimeout, opt_oauthCookieMaxAge, opt_extraHttpRequestParams) {
  /** @const {string} */
  var path = this.basePath_ + '/system/console/configMgr/com.adobe.granite.auth.oauth.impl.helper.ProviderConfigManagerInternal';

  /** @type {!Object} */
  var queryParameters = {};

  /** @type {!Object} */
  var headerParams = angular.extend({}, this.defaultHeaders_);
  if (opt_post !== undefined) {
    queryParameters['post'] = opt_post;
  }

  if (opt_apply !== undefined) {
    queryParameters['apply'] = opt_apply;
  }

  if (opt_delete !== undefined) {
    queryParameters['delete'] = opt_delete;
  }

  if (opt_action !== undefined) {
    queryParameters['action'] = opt_action;
  }

  if (opt_location !== undefined) {
    queryParameters['$location'] = opt_location;
  }

  if (opt_propertylist !== undefined) {
    queryParameters['propertylist'] = opt_propertylist;
  }

  if (opt_oauthCookieLoginTimeout !== undefined) {
    queryParameters['oauth.cookie.login.timeout'] = opt_oauthCookieLoginTimeout;
  }

  if (opt_oauthCookieMaxAge !== undefined) {
    queryParameters['oauth.cookie.max.age'] = opt_oauthCookieMaxAge;
  }

  /** @type {!Object} */
  var httpRequestParams = {
    method: 'POST',
    url: path,
    json: true,
            params: queryParameters,
    headers: headerParams
  };

  if (opt_extraHttpRequestParams) {
    httpRequestParams = angular.extend(httpRequestParams, opt_extraHttpRequestParams);
  }

  return (/** @type {?} */ (this.http_))(httpRequestParams);
}

/**
 * 
 * 
 * @param {!boolean=} opt_post 
 * @param {!boolean=} opt_apply 
 * @param {!boolean=} opt_delete 
 * @param {!string=} opt_action 
 * @param {!string=} opt_location 
 * @param {!Array<!string>=} opt_propertylist 
 * @param {!string=} opt_path 
 * @param {!angular.$http.Config=} opt_extraHttpRequestParams Extra HTTP parameters to send.
 * @return {!angular.$q.Promise<!API.Client.comAdobeGraniteAuthOauthImplOAuthAuthenticationHandlerInfo>}
 */
API.Client.ConfigmgrApi.prototype.comAdobeGraniteAuthOauthImplOAuthAuthenticationHandler = function(opt_post, opt_apply, opt_delete, opt_action, opt_location, opt_propertylist, opt_path, opt_extraHttpRequestParams) {
  /** @const {string} */
  var path = this.basePath_ + '/system/console/configMgr/com.adobe.granite.auth.oauth.impl.OAuthAuthenticationHandler';

  /** @type {!Object} */
  var queryParameters = {};

  /** @type {!Object} */
  var headerParams = angular.extend({}, this.defaultHeaders_);
  if (opt_post !== undefined) {
    queryParameters['post'] = opt_post;
  }

  if (opt_apply !== undefined) {
    queryParameters['apply'] = opt_apply;
  }

  if (opt_delete !== undefined) {
    queryParameters['delete'] = opt_delete;
  }

  if (opt_action !== undefined) {
    queryParameters['action'] = opt_action;
  }

  if (opt_location !== undefined) {
    queryParameters['$location'] = opt_location;
  }

  if (opt_propertylist !== undefined) {
    queryParameters['propertylist'] = opt_propertylist;
  }

  if (opt_path !== undefined) {
    queryParameters['path'] = opt_path;
  }

  /** @type {!Object} */
  var httpRequestParams = {
    method: 'POST',
    url: path,
    json: true,
            params: queryParameters,
    headers: headerParams
  };

  if (opt_extraHttpRequestParams) {
    httpRequestParams = angular.extend(httpRequestParams, opt_extraHttpRequestParams);
  }

  return (/** @type {?} */ (this.http_))(httpRequestParams);
}

/**
 * 
 * 
 * @param {!boolean=} opt_post 
 * @param {!boolean=} opt_apply 
 * @param {!boolean=} opt_delete 
 * @param {!string=} opt_action 
 * @param {!string=} opt_location 
 * @param {!Array<!string>=} opt_propertylist 
 * @param {!string=} opt_oauthProviderId 
 * @param {!angular.$http.Config=} opt_extraHttpRequestParams Extra HTTP parameters to send.
 * @return {!angular.$q.Promise<!API.Client.comAdobeGraniteAuthOauthImplTwitterProviderImplInfo>}
 */
API.Client.ConfigmgrApi.prototype.comAdobeGraniteAuthOauthImplTwitterProviderImpl = function(opt_post, opt_apply, opt_delete, opt_action, opt_location, opt_propertylist, opt_oauthProviderId, opt_extraHttpRequestParams) {
  /** @const {string} */
  var path = this.basePath_ + '/system/console/configMgr/com.adobe.granite.auth.oauth.impl.TwitterProviderImpl';

  /** @type {!Object} */
  var queryParameters = {};

  /** @type {!Object} */
  var headerParams = angular.extend({}, this.defaultHeaders_);
  if (opt_post !== undefined) {
    queryParameters['post'] = opt_post;
  }

  if (opt_apply !== undefined) {
    queryParameters['apply'] = opt_apply;
  }

  if (opt_delete !== undefined) {
    queryParameters['delete'] = opt_delete;
  }

  if (opt_action !== undefined) {
    queryParameters['action'] = opt_action;
  }

  if (opt_location !== undefined) {
    queryParameters['$location'] = opt_location;
  }

  if (opt_propertylist !== undefined) {
    queryParameters['propertylist'] = opt_propertylist;
  }

  if (opt_oauthProviderId !== undefined) {
    queryParameters['oauth.provider.id'] = opt_oauthProviderId;
  }

  /** @type {!Object} */
  var httpRequestParams = {
    method: 'POST',
    url: path,
    json: true,
            params: queryParameters,
    headers: headerParams
  };

  if (opt_extraHttpRequestParams) {
    httpRequestParams = angular.extend(httpRequestParams, opt_extraHttpRequestParams);
  }

  return (/** @type {?} */ (this.http_))(httpRequestParams);
}

/**
 * 
 * 
 * @param {!boolean=} opt_post 
 * @param {!boolean=} opt_apply 
 * @param {!boolean=} opt_delete 
 * @param {!string=} opt_action 
 * @param {!string=} opt_location 
 * @param {!Array<!string>=} opt_propertylist 
 * @param {!string=} opt_oauthConfigId 
 * @param {!string=} opt_oauthClientId 
 * @param {!string=} opt_oauthClientSecret 
 * @param {!Array<!string>=} opt_oauthScope 
 * @param {!string=} opt_oauthConfigProviderId 
 * @param {!boolean=} opt_oauthCreateUsers 
 * @param {!string=} opt_oauthUseridProperty 
 * @param {!boolean=} opt_forceStrictUsernameMatching 
 * @param {!boolean=} opt_oauthEncodeUserids 
 * @param {!boolean=} opt_oauthHashUserids 
 * @param {!string=} opt_oauthCallBackUrl 
 * @param {!boolean=} opt_oauthAccessTokenPersist 
 * @param {!boolean=} opt_oauthAccessTokenPersistCookie 
 * @param {!boolean=} opt_oauthCsrfStateProtection 
 * @param {!boolean=} opt_oauthRedirectRequestParams 
 * @param {!boolean=} opt_oauthConfigSiblingsAllow 
 * @param {!angular.$http.Config=} opt_extraHttpRequestParams Extra HTTP parameters to send.
 * @return {!angular.$q.Promise<!API.Client.comAdobeGraniteAuthOauthProviderInfo>}
 */
API.Client.ConfigmgrApi.prototype.comAdobeGraniteAuthOauthProvider = function(opt_post, opt_apply, opt_delete, opt_action, opt_location, opt_propertylist, opt_oauthConfigId, opt_oauthClientId, opt_oauthClientSecret, opt_oauthScope, opt_oauthConfigProviderId, opt_oauthCreateUsers, opt_oauthUseridProperty, opt_forceStrictUsernameMatching, opt_oauthEncodeUserids, opt_oauthHashUserids, opt_oauthCallBackUrl, opt_oauthAccessTokenPersist, opt_oauthAccessTokenPersistCookie, opt_oauthCsrfStateProtection, opt_oauthRedirectRequestParams, opt_oauthConfigSiblingsAllow, opt_extraHttpRequestParams) {
  /** @const {string} */
  var path = this.basePath_ + '/system/console/configMgr/com.adobe.granite.auth.oauth.provider';

  /** @type {!Object} */
  var queryParameters = {};

  /** @type {!Object} */
  var headerParams = angular.extend({}, this.defaultHeaders_);
  if (opt_post !== undefined) {
    queryParameters['post'] = opt_post;
  }

  if (opt_apply !== undefined) {
    queryParameters['apply'] = opt_apply;
  }

  if (opt_delete !== undefined) {
    queryParameters['delete'] = opt_delete;
  }

  if (opt_action !== undefined) {
    queryParameters['action'] = opt_action;
  }

  if (opt_location !== undefined) {
    queryParameters['$location'] = opt_location;
  }

  if (opt_propertylist !== undefined) {
    queryParameters['propertylist'] = opt_propertylist;
  }

  if (opt_oauthConfigId !== undefined) {
    queryParameters['oauth.config.id'] = opt_oauthConfigId;
  }

  if (opt_oauthClientId !== undefined) {
    queryParameters['oauth.client.id'] = opt_oauthClientId;
  }

  if (opt_oauthClientSecret !== undefined) {
    queryParameters['oauth.client.secret'] = opt_oauthClientSecret;
  }

  if (opt_oauthScope !== undefined) {
    queryParameters['oauth.scope'] = opt_oauthScope;
  }

  if (opt_oauthConfigProviderId !== undefined) {
    queryParameters['oauth.config.provider.id'] = opt_oauthConfigProviderId;
  }

  if (opt_oauthCreateUsers !== undefined) {
    queryParameters['oauth.create.users'] = opt_oauthCreateUsers;
  }

  if (opt_oauthUseridProperty !== undefined) {
    queryParameters['oauth.userid.property'] = opt_oauthUseridProperty;
  }

  if (opt_forceStrictUsernameMatching !== undefined) {
    queryParameters['force.strict.username.matching'] = opt_forceStrictUsernameMatching;
  }

  if (opt_oauthEncodeUserids !== undefined) {
    queryParameters['oauth.encode.userids'] = opt_oauthEncodeUserids;
  }

  if (opt_oauthHashUserids !== undefined) {
    queryParameters['oauth.hash.userids'] = opt_oauthHashUserids;
  }

  if (opt_oauthCallBackUrl !== undefined) {
    queryParameters['oauth.callBackUrl'] = opt_oauthCallBackUrl;
  }

  if (opt_oauthAccessTokenPersist !== undefined) {
    queryParameters['oauth.access.token.persist'] = opt_oauthAccessTokenPersist;
  }

  if (opt_oauthAccessTokenPersistCookie !== undefined) {
    queryParameters['oauth.access.token.persist.cookie'] = opt_oauthAccessTokenPersistCookie;
  }

  if (opt_oauthCsrfStateProtection !== undefined) {
    queryParameters['oauth.csrf.state.protection'] = opt_oauthCsrfStateProtection;
  }

  if (opt_oauthRedirectRequestParams !== undefined) {
    queryParameters['oauth.redirect.request.params'] = opt_oauthRedirectRequestParams;
  }

  if (opt_oauthConfigSiblingsAllow !== undefined) {
    queryParameters['oauth.config.siblings.allow'] = opt_oauthConfigSiblingsAllow;
  }

  /** @type {!Object} */
  var httpRequestParams = {
    method: 'POST',
    url: path,
    json: true,
            params: queryParameters,
    headers: headerParams
  };

  if (opt_extraHttpRequestParams) {
    httpRequestParams = angular.extend(httpRequestParams, opt_extraHttpRequestParams);
  }

  return (/** @type {?} */ (this.http_))(httpRequestParams);
}

/**
 * 
 * 
 * @param {!boolean=} opt_post 
 * @param {!boolean=} opt_apply 
 * @param {!boolean=} opt_delete 
 * @param {!string=} opt_action 
 * @param {!string=} opt_location 
 * @param {!Array<!string>=} opt_propertylist 
 * @param {!Array<!string>=} opt_supportedPaths 
 * @param {!angular.$http.Config=} opt_extraHttpRequestParams Extra HTTP parameters to send.
 * @return {!angular.$q.Promise<!API.Client.comAdobeGraniteAuthRequirementImplDefaultRequirementHandlerInfo>}
 */
API.Client.ConfigmgrApi.prototype.comAdobeGraniteAuthRequirementImplDefaultRequirementHandler = function(opt_post, opt_apply, opt_delete, opt_action, opt_location, opt_propertylist, opt_supportedPaths, opt_extraHttpRequestParams) {
  /** @const {string} */
  var path = this.basePath_ + '/system/console/configMgr/com.adobe.granite.auth.requirement.impl.DefaultRequirementHandler';

  /** @type {!Object} */
  var queryParameters = {};

  /** @type {!Object} */
  var headerParams = angular.extend({}, this.defaultHeaders_);
  if (opt_post !== undefined) {
    queryParameters['post'] = opt_post;
  }

  if (opt_apply !== undefined) {
    queryParameters['apply'] = opt_apply;
  }

  if (opt_delete !== undefined) {
    queryParameters['delete'] = opt_delete;
  }

  if (opt_action !== undefined) {
    queryParameters['action'] = opt_action;
  }

  if (opt_location !== undefined) {
    queryParameters['$location'] = opt_location;
  }

  if (opt_propertylist !== undefined) {
    queryParameters['propertylist'] = opt_propertylist;
  }

  if (opt_supportedPaths !== undefined) {
    queryParameters['supportedPaths'] = opt_supportedPaths;
  }

  /** @type {!Object} */
  var httpRequestParams = {
    method: 'POST',
    url: path,
    json: true,
            params: queryParameters,
    headers: headerParams
  };

  if (opt_extraHttpRequestParams) {
    httpRequestParams = angular.extend(httpRequestParams, opt_extraHttpRequestParams);
  }

  return (/** @type {?} */ (this.http_))(httpRequestParams);
}

/**
 * 
 * 
 * @param {!boolean=} opt_post 
 * @param {!boolean=} opt_apply 
 * @param {!boolean=} opt_delete 
 * @param {!string=} opt_action 
 * @param {!string=} opt_location 
 * @param {!Array<!string>=} opt_propertylist 
 * @param {!Array<!string>=} opt_path 
 * @param {!number=} opt_serviceRanking 
 * @param {!string=} opt_idpUrl 
 * @param {!string=} opt_idpCertAlias 
 * @param {!boolean=} opt_idpHttpRedirect 
 * @param {!string=} opt_serviceProviderEntityId 
 * @param {!string=} opt_assertionConsumerServiceURL 
 * @param {!string=} opt_spPrivateKeyAlias 
 * @param {!string=} opt_keyStorePassword 
 * @param {!string=} opt_defaultRedirectUrl 
 * @param {!string=} opt_userIDAttribute 
 * @param {!boolean=} opt_useEncryption 
 * @param {!boolean=} opt_createUser 
 * @param {!string=} opt_userIntermediatePath 
 * @param {!boolean=} opt_addGroupMemberships 
 * @param {!string=} opt_groupMembershipAttribute 
 * @param {!Array<!string>=} opt_defaultGroups 
 * @param {!string=} opt_nameIdFormat 
 * @param {!Array<!string>=} opt_synchronizeAttributes 
 * @param {!boolean=} opt_handleLogout 
 * @param {!string=} opt_logoutUrl 
 * @param {!number=} opt_clockTolerance 
 * @param {!string=} opt_digestMethod 
 * @param {!string=} opt_signatureMethod 
 * @param {!string=} opt_identitySyncType 
 * @param {!string=} opt_idpIdentifier 
 * @param {!angular.$http.Config=} opt_extraHttpRequestParams Extra HTTP parameters to send.
 * @return {!angular.$q.Promise<!API.Client.comAdobeGraniteAuthSamlSamlAuthenticationHandlerInfo>}
 */
API.Client.ConfigmgrApi.prototype.comAdobeGraniteAuthSamlSamlAuthenticationHandler = function(opt_post, opt_apply, opt_delete, opt_action, opt_location, opt_propertylist, opt_path, opt_serviceRanking, opt_idpUrl, opt_idpCertAlias, opt_idpHttpRedirect, opt_serviceProviderEntityId, opt_assertionConsumerServiceURL, opt_spPrivateKeyAlias, opt_keyStorePassword, opt_defaultRedirectUrl, opt_userIDAttribute, opt_useEncryption, opt_createUser, opt_userIntermediatePath, opt_addGroupMemberships, opt_groupMembershipAttribute, opt_defaultGroups, opt_nameIdFormat, opt_synchronizeAttributes, opt_handleLogout, opt_logoutUrl, opt_clockTolerance, opt_digestMethod, opt_signatureMethod, opt_identitySyncType, opt_idpIdentifier, opt_extraHttpRequestParams) {
  /** @const {string} */
  var path = this.basePath_ + '/system/console/configMgr/com.adobe.granite.auth.saml.SamlAuthenticationHandler';

  /** @type {!Object} */
  var queryParameters = {};

  /** @type {!Object} */
  var headerParams = angular.extend({}, this.defaultHeaders_);
  if (opt_post !== undefined) {
    queryParameters['post'] = opt_post;
  }

  if (opt_apply !== undefined) {
    queryParameters['apply'] = opt_apply;
  }

  if (opt_delete !== undefined) {
    queryParameters['delete'] = opt_delete;
  }

  if (opt_action !== undefined) {
    queryParameters['action'] = opt_action;
  }

  if (opt_location !== undefined) {
    queryParameters['$location'] = opt_location;
  }

  if (opt_propertylist !== undefined) {
    queryParameters['propertylist'] = opt_propertylist;
  }

  if (opt_path !== undefined) {
    queryParameters['path'] = opt_path;
  }

  if (opt_serviceRanking !== undefined) {
    queryParameters['service.ranking'] = opt_serviceRanking;
  }

  if (opt_idpUrl !== undefined) {
    queryParameters['idpUrl'] = opt_idpUrl;
  }

  if (opt_idpCertAlias !== undefined) {
    queryParameters['idpCertAlias'] = opt_idpCertAlias;
  }

  if (opt_idpHttpRedirect !== undefined) {
    queryParameters['idpHttpRedirect'] = opt_idpHttpRedirect;
  }

  if (opt_serviceProviderEntityId !== undefined) {
    queryParameters['serviceProviderEntityId'] = opt_serviceProviderEntityId;
  }

  if (opt_assertionConsumerServiceURL !== undefined) {
    queryParameters['assertionConsumerServiceURL'] = opt_assertionConsumerServiceURL;
  }

  if (opt_spPrivateKeyAlias !== undefined) {
    queryParameters['spPrivateKeyAlias'] = opt_spPrivateKeyAlias;
  }

  if (opt_keyStorePassword !== undefined) {
    queryParameters['keyStorePassword'] = opt_keyStorePassword;
  }

  if (opt_defaultRedirectUrl !== undefined) {
    queryParameters['defaultRedirectUrl'] = opt_defaultRedirectUrl;
  }

  if (opt_userIDAttribute !== undefined) {
    queryParameters['userIDAttribute'] = opt_userIDAttribute;
  }

  if (opt_useEncryption !== undefined) {
    queryParameters['useEncryption'] = opt_useEncryption;
  }

  if (opt_createUser !== undefined) {
    queryParameters['createUser'] = opt_createUser;
  }

  if (opt_userIntermediatePath !== undefined) {
    queryParameters['userIntermediatePath'] = opt_userIntermediatePath;
  }

  if (opt_addGroupMemberships !== undefined) {
    queryParameters['addGroupMemberships'] = opt_addGroupMemberships;
  }

  if (opt_groupMembershipAttribute !== undefined) {
    queryParameters['groupMembershipAttribute'] = opt_groupMembershipAttribute;
  }

  if (opt_defaultGroups !== undefined) {
    queryParameters['defaultGroups'] = opt_defaultGroups;
  }

  if (opt_nameIdFormat !== undefined) {
    queryParameters['nameIdFormat'] = opt_nameIdFormat;
  }

  if (opt_synchronizeAttributes !== undefined) {
    queryParameters['synchronizeAttributes'] = opt_synchronizeAttributes;
  }

  if (opt_handleLogout !== undefined) {
    queryParameters['handleLogout'] = opt_handleLogout;
  }

  if (opt_logoutUrl !== undefined) {
    queryParameters['logoutUrl'] = opt_logoutUrl;
  }

  if (opt_clockTolerance !== undefined) {
    queryParameters['clockTolerance'] = opt_clockTolerance;
  }

  if (opt_digestMethod !== undefined) {
    queryParameters['digestMethod'] = opt_digestMethod;
  }

  if (opt_signatureMethod !== undefined) {
    queryParameters['signatureMethod'] = opt_signatureMethod;
  }

  if (opt_identitySyncType !== undefined) {
    queryParameters['identitySyncType'] = opt_identitySyncType;
  }

  if (opt_idpIdentifier !== undefined) {
    queryParameters['idpIdentifier'] = opt_idpIdentifier;
  }

  /** @type {!Object} */
  var httpRequestParams = {
    method: 'POST',
    url: path,
    json: true,
            params: queryParameters,
    headers: headerParams
  };

  if (opt_extraHttpRequestParams) {
    httpRequestParams = angular.extend(httpRequestParams, opt_extraHttpRequestParams);
  }

  return (/** @type {?} */ (this.http_))(httpRequestParams);
}

/**
 * 
 * 
 * @param {!boolean=} opt_post 
 * @param {!boolean=} opt_apply 
 * @param {!boolean=} opt_delete 
 * @param {!string=} opt_action 
 * @param {!string=} opt_location 
 * @param {!Array<!string>=} opt_propertylist 
 * @param {!string=} opt_path 
 * @param {!number=} opt_serviceRanking 
 * @param {!string=} opt_jaasControlFlag 
 * @param {!string=} opt_jaasRealmName 
 * @param {!number=} opt_jaasRanking 
 * @param {!Array<!string>=} opt_headers 
 * @param {!Array<!string>=} opt_cookies 
 * @param {!Array<!string>=} opt_parameters 
 * @param {!Array<!string>=} opt_usermap 
 * @param {!string=} opt_format 
 * @param {!string=} opt_trustedCredentialsAttribute 
 * @param {!angular.$http.Config=} opt_extraHttpRequestParams Extra HTTP parameters to send.
 * @return {!angular.$q.Promise<!API.Client.comAdobeGraniteAuthSsoImplSsoAuthenticationHandlerInfo>}
 */
API.Client.ConfigmgrApi.prototype.comAdobeGraniteAuthSsoImplSsoAuthenticationHandler = function(opt_post, opt_apply, opt_delete, opt_action, opt_location, opt_propertylist, opt_path, opt_serviceRanking, opt_jaasControlFlag, opt_jaasRealmName, opt_jaasRanking, opt_headers, opt_cookies, opt_parameters, opt_usermap, opt_format, opt_trustedCredentialsAttribute, opt_extraHttpRequestParams) {
  /** @const {string} */
  var path = this.basePath_ + '/system/console/configMgr/com.adobe.granite.auth.sso.impl.SsoAuthenticationHandler';

  /** @type {!Object} */
  var queryParameters = {};

  /** @type {!Object} */
  var headerParams = angular.extend({}, this.defaultHeaders_);
  if (opt_post !== undefined) {
    queryParameters['post'] = opt_post;
  }

  if (opt_apply !== undefined) {
    queryParameters['apply'] = opt_apply;
  }

  if (opt_delete !== undefined) {
    queryParameters['delete'] = opt_delete;
  }

  if (opt_action !== undefined) {
    queryParameters['action'] = opt_action;
  }

  if (opt_location !== undefined) {
    queryParameters['$location'] = opt_location;
  }

  if (opt_propertylist !== undefined) {
    queryParameters['propertylist'] = opt_propertylist;
  }

  if (opt_path !== undefined) {
    queryParameters['path'] = opt_path;
  }

  if (opt_serviceRanking !== undefined) {
    queryParameters['service.ranking'] = opt_serviceRanking;
  }

  if (opt_jaasControlFlag !== undefined) {
    queryParameters['jaas.controlFlag'] = opt_jaasControlFlag;
  }

  if (opt_jaasRealmName !== undefined) {
    queryParameters['jaas.realmName'] = opt_jaasRealmName;
  }

  if (opt_jaasRanking !== undefined) {
    queryParameters['jaas.ranking'] = opt_jaasRanking;
  }

  if (opt_headers !== undefined) {
    queryParameters['headers'] = opt_headers;
  }

  if (opt_cookies !== undefined) {
    queryParameters['cookies'] = opt_cookies;
  }

  if (opt_parameters !== undefined) {
    queryParameters['parameters'] = opt_parameters;
  }

  if (opt_usermap !== undefined) {
    queryParameters['usermap'] = opt_usermap;
  }

  if (opt_format !== undefined) {
    queryParameters['format'] = opt_format;
  }

  if (opt_trustedCredentialsAttribute !== undefined) {
    queryParameters['trustedCredentialsAttribute'] = opt_trustedCredentialsAttribute;
  }

  /** @type {!Object} */
  var httpRequestParams = {
    method: 'POST',
    url: path,
    json: true,
            params: queryParameters,
    headers: headerParams
  };

  if (opt_extraHttpRequestParams) {
    httpRequestParams = angular.extend(httpRequestParams, opt_extraHttpRequestParams);
  }

  return (/** @type {?} */ (this.http_))(httpRequestParams);
}

/**
 * 
 * 
 * @param {!boolean=} opt_post 
 * @param {!boolean=} opt_apply 
 * @param {!boolean=} opt_delete 
 * @param {!string=} opt_action 
 * @param {!string=} opt_location 
 * @param {!Array<!string>=} opt_propertylist 
 * @param {!Array<!string>=} opt_hcTags 
 * @param {!number=} opt_minimumCodeCacheSize 
 * @param {!angular.$http.Config=} opt_extraHttpRequestParams Extra HTTP parameters to send.
 * @return {!angular.$q.Promise<!API.Client.comAdobeGraniteBundlesHcImplCodeCacheHealthCheckInfo>}
 */
API.Client.ConfigmgrApi.prototype.comAdobeGraniteBundlesHcImplCodeCacheHealthCheck = function(opt_post, opt_apply, opt_delete, opt_action, opt_location, opt_propertylist, opt_hcTags, opt_minimumCodeCacheSize, opt_extraHttpRequestParams) {
  /** @const {string} */
  var path = this.basePath_ + '/system/console/configMgr/com.adobe.granite.bundles.hc.impl.CodeCacheHealthCheck';

  /** @type {!Object} */
  var queryParameters = {};

  /** @type {!Object} */
  var headerParams = angular.extend({}, this.defaultHeaders_);
  if (opt_post !== undefined) {
    queryParameters['post'] = opt_post;
  }

  if (opt_apply !== undefined) {
    queryParameters['apply'] = opt_apply;
  }

  if (opt_delete !== undefined) {
    queryParameters['delete'] = opt_delete;
  }

  if (opt_action !== undefined) {
    queryParameters['action'] = opt_action;
  }

  if (opt_location !== undefined) {
    queryParameters['$location'] = opt_location;
  }

  if (opt_propertylist !== undefined) {
    queryParameters['propertylist'] = opt_propertylist;
  }

  if (opt_hcTags !== undefined) {
    queryParameters['hc.tags'] = opt_hcTags;
  }

  if (opt_minimumCodeCacheSize !== undefined) {
    queryParameters['minimum.code.cache.size'] = opt_minimumCodeCacheSize;
  }

  /** @type {!Object} */
  var httpRequestParams = {
    method: 'POST',
    url: path,
    json: true,
            params: queryParameters,
    headers: headerParams
  };

  if (opt_extraHttpRequestParams) {
    httpRequestParams = angular.extend(httpRequestParams, opt_extraHttpRequestParams);
  }

  return (/** @type {?} */ (this.http_))(httpRequestParams);
}

/**
 * 
 * 
 * @param {!boolean=} opt_post 
 * @param {!boolean=} opt_apply 
 * @param {!boolean=} opt_delete 
 * @param {!string=} opt_action 
 * @param {!string=} opt_location 
 * @param {!Array<!string>=} opt_propertylist 
 * @param {!Array<!string>=} opt_hcTags 
 * @param {!angular.$http.Config=} opt_extraHttpRequestParams Extra HTTP parameters to send.
 * @return {!angular.$q.Promise<!API.Client.comAdobeGraniteBundlesHcImplCrxdeSupportBundleHealthCheckInfo>}
 */
API.Client.ConfigmgrApi.prototype.comAdobeGraniteBundlesHcImplCrxdeSupportBundleHealthCheck = function(opt_post, opt_apply, opt_delete, opt_action, opt_location, opt_propertylist, opt_hcTags, opt_extraHttpRequestParams) {
  /** @const {string} */
  var path = this.basePath_ + '/system/console/configMgr/com.adobe.granite.bundles.hc.impl.CrxdeSupportBundleHealthCheck';

  /** @type {!Object} */
  var queryParameters = {};

  /** @type {!Object} */
  var headerParams = angular.extend({}, this.defaultHeaders_);
  if (opt_post !== undefined) {
    queryParameters['post'] = opt_post;
  }

  if (opt_apply !== undefined) {
    queryParameters['apply'] = opt_apply;
  }

  if (opt_delete !== undefined) {
    queryParameters['delete'] = opt_delete;
  }

  if (opt_action !== undefined) {
    queryParameters['action'] = opt_action;
  }

  if (opt_location !== undefined) {
    queryParameters['$location'] = opt_location;
  }

  if (opt_propertylist !== undefined) {
    queryParameters['propertylist'] = opt_propertylist;
  }

  if (opt_hcTags !== undefined) {
    queryParameters['hc.tags'] = opt_hcTags;
  }

  /** @type {!Object} */
  var httpRequestParams = {
    method: 'POST',
    url: path,
    json: true,
            params: queryParameters,
    headers: headerParams
  };

  if (opt_extraHttpRequestParams) {
    httpRequestParams = angular.extend(httpRequestParams, opt_extraHttpRequestParams);
  }

  return (/** @type {?} */ (this.http_))(httpRequestParams);
}

/**
 * 
 * 
 * @param {!boolean=} opt_post 
 * @param {!boolean=} opt_apply 
 * @param {!boolean=} opt_delete 
 * @param {!string=} opt_action 
 * @param {!string=} opt_location 
 * @param {!Array<!string>=} opt_propertylist 
 * @param {!Array<!string>=} opt_hcTags 
 * @param {!angular.$http.Config=} opt_extraHttpRequestParams Extra HTTP parameters to send.
 * @return {!angular.$q.Promise<!API.Client.comAdobeGraniteBundlesHcImplDavExBundleHealthCheckInfo>}
 */
API.Client.ConfigmgrApi.prototype.comAdobeGraniteBundlesHcImplDavExBundleHealthCheck = function(opt_post, opt_apply, opt_delete, opt_action, opt_location, opt_propertylist, opt_hcTags, opt_extraHttpRequestParams) {
  /** @const {string} */
  var path = this.basePath_ + '/system/console/configMgr/com.adobe.granite.bundles.hc.impl.DavExBundleHealthCheck';

  /** @type {!Object} */
  var queryParameters = {};

  /** @type {!Object} */
  var headerParams = angular.extend({}, this.defaultHeaders_);
  if (opt_post !== undefined) {
    queryParameters['post'] = opt_post;
  }

  if (opt_apply !== undefined) {
    queryParameters['apply'] = opt_apply;
  }

  if (opt_delete !== undefined) {
    queryParameters['delete'] = opt_delete;
  }

  if (opt_action !== undefined) {
    queryParameters['action'] = opt_action;
  }

  if (opt_location !== undefined) {
    queryParameters['$location'] = opt_location;
  }

  if (opt_propertylist !== undefined) {
    queryParameters['propertylist'] = opt_propertylist;
  }

  if (opt_hcTags !== undefined) {
    queryParameters['hc.tags'] = opt_hcTags;
  }

  /** @type {!Object} */
  var httpRequestParams = {
    method: 'POST',
    url: path,
    json: true,
            params: queryParameters,
    headers: headerParams
  };

  if (opt_extraHttpRequestParams) {
    httpRequestParams = angular.extend(httpRequestParams, opt_extraHttpRequestParams);
  }

  return (/** @type {?} */ (this.http_))(httpRequestParams);
}

/**
 * 
 * 
 * @param {!boolean=} opt_post 
 * @param {!boolean=} opt_apply 
 * @param {!boolean=} opt_delete 
 * @param {!string=} opt_action 
 * @param {!string=} opt_location 
 * @param {!Array<!string>=} opt_propertylist 
 * @param {!Array<!string>=} opt_hcTags 
 * @param {!Array<!string>=} opt_ignoredBundles 
 * @param {!angular.$http.Config=} opt_extraHttpRequestParams Extra HTTP parameters to send.
 * @return {!angular.$q.Promise<!API.Client.comAdobeGraniteBundlesHcImplInactiveBundlesHealthCheckInfo>}
 */
API.Client.ConfigmgrApi.prototype.comAdobeGraniteBundlesHcImplInactiveBundlesHealthCheck = function(opt_post, opt_apply, opt_delete, opt_action, opt_location, opt_propertylist, opt_hcTags, opt_ignoredBundles, opt_extraHttpRequestParams) {
  /** @const {string} */
  var path = this.basePath_ + '/system/console/configMgr/com.adobe.granite.bundles.hc.impl.InactiveBundlesHealthCheck';

  /** @type {!Object} */
  var queryParameters = {};

  /** @type {!Object} */
  var headerParams = angular.extend({}, this.defaultHeaders_);
  if (opt_post !== undefined) {
    queryParameters['post'] = opt_post;
  }

  if (opt_apply !== undefined) {
    queryParameters['apply'] = opt_apply;
  }

  if (opt_delete !== undefined) {
    queryParameters['delete'] = opt_delete;
  }

  if (opt_action !== undefined) {
    queryParameters['action'] = opt_action;
  }

  if (opt_location !== undefined) {
    queryParameters['$location'] = opt_location;
  }

  if (opt_propertylist !== undefined) {
    queryParameters['propertylist'] = opt_propertylist;
  }

  if (opt_hcTags !== undefined) {
    queryParameters['hc.tags'] = opt_hcTags;
  }

  if (opt_ignoredBundles !== undefined) {
    queryParameters['ignored.bundles'] = opt_ignoredBundles;
  }

  /** @type {!Object} */
  var httpRequestParams = {
    method: 'POST',
    url: path,
    json: true,
            params: queryParameters,
    headers: headerParams
  };

  if (opt_extraHttpRequestParams) {
    httpRequestParams = angular.extend(httpRequestParams, opt_extraHttpRequestParams);
  }

  return (/** @type {?} */ (this.http_))(httpRequestParams);
}

/**
 * 
 * 
 * @param {!boolean=} opt_post 
 * @param {!boolean=} opt_apply 
 * @param {!boolean=} opt_delete 
 * @param {!string=} opt_action 
 * @param {!string=} opt_location 
 * @param {!Array<!string>=} opt_propertylist 
 * @param {!Array<!string>=} opt_hcTags 
 * @param {!number=} opt_maxQueuedJobs 
 * @param {!angular.$http.Config=} opt_extraHttpRequestParams Extra HTTP parameters to send.
 * @return {!angular.$q.Promise<!API.Client.comAdobeGraniteBundlesHcImplJobsHealthCheckInfo>}
 */
API.Client.ConfigmgrApi.prototype.comAdobeGraniteBundlesHcImplJobsHealthCheck = function(opt_post, opt_apply, opt_delete, opt_action, opt_location, opt_propertylist, opt_hcTags, opt_maxQueuedJobs, opt_extraHttpRequestParams) {
  /** @const {string} */
  var path = this.basePath_ + '/system/console/configMgr/com.adobe.granite.bundles.hc.impl.JobsHealthCheck';

  /** @type {!Object} */
  var queryParameters = {};

  /** @type {!Object} */
  var headerParams = angular.extend({}, this.defaultHeaders_);
  if (opt_post !== undefined) {
    queryParameters['post'] = opt_post;
  }

  if (opt_apply !== undefined) {
    queryParameters['apply'] = opt_apply;
  }

  if (opt_delete !== undefined) {
    queryParameters['delete'] = opt_delete;
  }

  if (opt_action !== undefined) {
    queryParameters['action'] = opt_action;
  }

  if (opt_location !== undefined) {
    queryParameters['$location'] = opt_location;
  }

  if (opt_propertylist !== undefined) {
    queryParameters['propertylist'] = opt_propertylist;
  }

  if (opt_hcTags !== undefined) {
    queryParameters['hc.tags'] = opt_hcTags;
  }

  if (opt_maxQueuedJobs !== undefined) {
    queryParameters['max.queued.jobs'] = opt_maxQueuedJobs;
  }

  /** @type {!Object} */
  var httpRequestParams = {
    method: 'POST',
    url: path,
    json: true,
            params: queryParameters,
    headers: headerParams
  };

  if (opt_extraHttpRequestParams) {
    httpRequestParams = angular.extend(httpRequestParams, opt_extraHttpRequestParams);
  }

  return (/** @type {?} */ (this.http_))(httpRequestParams);
}

/**
 * 
 * 
 * @param {!boolean=} opt_post 
 * @param {!boolean=} opt_apply 
 * @param {!boolean=} opt_delete 
 * @param {!string=} opt_action 
 * @param {!string=} opt_location 
 * @param {!Array<!string>=} opt_propertylist 
 * @param {!Array<!string>=} opt_hcTags 
 * @param {!angular.$http.Config=} opt_extraHttpRequestParams Extra HTTP parameters to send.
 * @return {!angular.$q.Promise<!API.Client.comAdobeGraniteBundlesHcImplSlingGetServletHealthCheckInfo>}
 */
API.Client.ConfigmgrApi.prototype.comAdobeGraniteBundlesHcImplSlingGetServletHealthCheck = function(opt_post, opt_apply, opt_delete, opt_action, opt_location, opt_propertylist, opt_hcTags, opt_extraHttpRequestParams) {
  /** @const {string} */
  var path = this.basePath_ + '/system/console/configMgr/com.adobe.granite.bundles.hc.impl.SlingGetServletHealthCheck';

  /** @type {!Object} */
  var queryParameters = {};

  /** @type {!Object} */
  var headerParams = angular.extend({}, this.defaultHeaders_);
  if (opt_post !== undefined) {
    queryParameters['post'] = opt_post;
  }

  if (opt_apply !== undefined) {
    queryParameters['apply'] = opt_apply;
  }

  if (opt_delete !== undefined) {
    queryParameters['delete'] = opt_delete;
  }

  if (opt_action !== undefined) {
    queryParameters['action'] = opt_action;
  }

  if (opt_location !== undefined) {
    queryParameters['$location'] = opt_location;
  }

  if (opt_propertylist !== undefined) {
    queryParameters['propertylist'] = opt_propertylist;
  }

  if (opt_hcTags !== undefined) {
    queryParameters['hc.tags'] = opt_hcTags;
  }

  /** @type {!Object} */
  var httpRequestParams = {
    method: 'POST',
    url: path,
    json: true,
            params: queryParameters,
    headers: headerParams
  };

  if (opt_extraHttpRequestParams) {
    httpRequestParams = angular.extend(httpRequestParams, opt_extraHttpRequestParams);
  }

  return (/** @type {?} */ (this.http_))(httpRequestParams);
}

/**
 * 
 * 
 * @param {!boolean=} opt_post 
 * @param {!boolean=} opt_apply 
 * @param {!boolean=} opt_delete 
 * @param {!string=} opt_action 
 * @param {!string=} opt_location 
 * @param {!Array<!string>=} opt_propertylist 
 * @param {!Array<!string>=} opt_hcTags 
 * @param {!angular.$http.Config=} opt_extraHttpRequestParams Extra HTTP parameters to send.
 * @return {!angular.$q.Promise<!API.Client.comAdobeGraniteBundlesHcImplSlingJavaScriptHandlerHealthCheckInfo>}
 */
API.Client.ConfigmgrApi.prototype.comAdobeGraniteBundlesHcImplSlingJavaScriptHandlerHealthCheck = function(opt_post, opt_apply, opt_delete, opt_action, opt_location, opt_propertylist, opt_hcTags, opt_extraHttpRequestParams) {
  /** @const {string} */
  var path = this.basePath_ + '/system/console/configMgr/com.adobe.granite.bundles.hc.impl.SlingJavaScriptHandlerHealthCheck';

  /** @type {!Object} */
  var queryParameters = {};

  /** @type {!Object} */
  var headerParams = angular.extend({}, this.defaultHeaders_);
  if (opt_post !== undefined) {
    queryParameters['post'] = opt_post;
  }

  if (opt_apply !== undefined) {
    queryParameters['apply'] = opt_apply;
  }

  if (opt_delete !== undefined) {
    queryParameters['delete'] = opt_delete;
  }

  if (opt_action !== undefined) {
    queryParameters['action'] = opt_action;
  }

  if (opt_location !== undefined) {
    queryParameters['$location'] = opt_location;
  }

  if (opt_propertylist !== undefined) {
    queryParameters['propertylist'] = opt_propertylist;
  }

  if (opt_hcTags !== undefined) {
    queryParameters['hc.tags'] = opt_hcTags;
  }

  /** @type {!Object} */
  var httpRequestParams = {
    method: 'POST',
    url: path,
    json: true,
            params: queryParameters,
    headers: headerParams
  };

  if (opt_extraHttpRequestParams) {
    httpRequestParams = angular.extend(httpRequestParams, opt_extraHttpRequestParams);
  }

  return (/** @type {?} */ (this.http_))(httpRequestParams);
}

/**
 * 
 * 
 * @param {!boolean=} opt_post 
 * @param {!boolean=} opt_apply 
 * @param {!boolean=} opt_delete 
 * @param {!string=} opt_action 
 * @param {!string=} opt_location 
 * @param {!Array<!string>=} opt_propertylist 
 * @param {!Array<!string>=} opt_hcTags 
 * @param {!angular.$http.Config=} opt_extraHttpRequestParams Extra HTTP parameters to send.
 * @return {!angular.$q.Promise<!API.Client.comAdobeGraniteBundlesHcImplSlingJspScriptHandlerHealthCheckInfo>}
 */
API.Client.ConfigmgrApi.prototype.comAdobeGraniteBundlesHcImplSlingJspScriptHandlerHealthCheck = function(opt_post, opt_apply, opt_delete, opt_action, opt_location, opt_propertylist, opt_hcTags, opt_extraHttpRequestParams) {
  /** @const {string} */
  var path = this.basePath_ + '/system/console/configMgr/com.adobe.granite.bundles.hc.impl.SlingJspScriptHandlerHealthCheck';

  /** @type {!Object} */
  var queryParameters = {};

  /** @type {!Object} */
  var headerParams = angular.extend({}, this.defaultHeaders_);
  if (opt_post !== undefined) {
    queryParameters['post'] = opt_post;
  }

  if (opt_apply !== undefined) {
    queryParameters['apply'] = opt_apply;
  }

  if (opt_delete !== undefined) {
    queryParameters['delete'] = opt_delete;
  }

  if (opt_action !== undefined) {
    queryParameters['action'] = opt_action;
  }

  if (opt_location !== undefined) {
    queryParameters['$location'] = opt_location;
  }

  if (opt_propertylist !== undefined) {
    queryParameters['propertylist'] = opt_propertylist;
  }

  if (opt_hcTags !== undefined) {
    queryParameters['hc.tags'] = opt_hcTags;
  }

  /** @type {!Object} */
  var httpRequestParams = {
    method: 'POST',
    url: path,
    json: true,
            params: queryParameters,
    headers: headerParams
  };

  if (opt_extraHttpRequestParams) {
    httpRequestParams = angular.extend(httpRequestParams, opt_extraHttpRequestParams);
  }

  return (/** @type {?} */ (this.http_))(httpRequestParams);
}

/**
 * 
 * 
 * @param {!boolean=} opt_post 
 * @param {!boolean=} opt_apply 
 * @param {!boolean=} opt_delete 
 * @param {!string=} opt_action 
 * @param {!string=} opt_location 
 * @param {!Array<!string>=} opt_propertylist 
 * @param {!Array<!string>=} opt_hcTags 
 * @param {!angular.$http.Config=} opt_extraHttpRequestParams Extra HTTP parameters to send.
 * @return {!angular.$q.Promise<!API.Client.comAdobeGraniteBundlesHcImplSlingReferrerFilterHealthCheckInfo>}
 */
API.Client.ConfigmgrApi.prototype.comAdobeGraniteBundlesHcImplSlingReferrerFilterHealthCheck = function(opt_post, opt_apply, opt_delete, opt_action, opt_location, opt_propertylist, opt_hcTags, opt_extraHttpRequestParams) {
  /** @const {string} */
  var path = this.basePath_ + '/system/console/configMgr/com.adobe.granite.bundles.hc.impl.SlingReferrerFilterHealthCheck';

  /** @type {!Object} */
  var queryParameters = {};

  /** @type {!Object} */
  var headerParams = angular.extend({}, this.defaultHeaders_);
  if (opt_post !== undefined) {
    queryParameters['post'] = opt_post;
  }

  if (opt_apply !== undefined) {
    queryParameters['apply'] = opt_apply;
  }

  if (opt_delete !== undefined) {
    queryParameters['delete'] = opt_delete;
  }

  if (opt_action !== undefined) {
    queryParameters['action'] = opt_action;
  }

  if (opt_location !== undefined) {
    queryParameters['$location'] = opt_location;
  }

  if (opt_propertylist !== undefined) {
    queryParameters['propertylist'] = opt_propertylist;
  }

  if (opt_hcTags !== undefined) {
    queryParameters['hc.tags'] = opt_hcTags;
  }

  /** @type {!Object} */
  var httpRequestParams = {
    method: 'POST',
    url: path,
    json: true,
            params: queryParameters,
    headers: headerParams
  };

  if (opt_extraHttpRequestParams) {
    httpRequestParams = angular.extend(httpRequestParams, opt_extraHttpRequestParams);
  }

  return (/** @type {?} */ (this.http_))(httpRequestParams);
}

/**
 * 
 * 
 * @param {!boolean=} opt_post 
 * @param {!boolean=} opt_apply 
 * @param {!boolean=} opt_delete 
 * @param {!string=} opt_action 
 * @param {!string=} opt_location 
 * @param {!Array<!string>=} opt_propertylist 
 * @param {!Array<!string>=} opt_hcTags 
 * @param {!angular.$http.Config=} opt_extraHttpRequestParams Extra HTTP parameters to send.
 * @return {!angular.$q.Promise<!API.Client.comAdobeGraniteBundlesHcImplWebDavBundleHealthCheckInfo>}
 */
API.Client.ConfigmgrApi.prototype.comAdobeGraniteBundlesHcImplWebDavBundleHealthCheck = function(opt_post, opt_apply, opt_delete, opt_action, opt_location, opt_propertylist, opt_hcTags, opt_extraHttpRequestParams) {
  /** @const {string} */
  var path = this.basePath_ + '/system/console/configMgr/com.adobe.granite.bundles.hc.impl.WebDavBundleHealthCheck';

  /** @type {!Object} */
  var queryParameters = {};

  /** @type {!Object} */
  var headerParams = angular.extend({}, this.defaultHeaders_);
  if (opt_post !== undefined) {
    queryParameters['post'] = opt_post;
  }

  if (opt_apply !== undefined) {
    queryParameters['apply'] = opt_apply;
  }

  if (opt_delete !== undefined) {
    queryParameters['delete'] = opt_delete;
  }

  if (opt_action !== undefined) {
    queryParameters['action'] = opt_action;
  }

  if (opt_location !== undefined) {
    queryParameters['$location'] = opt_location;
  }

  if (opt_propertylist !== undefined) {
    queryParameters['propertylist'] = opt_propertylist;
  }

  if (opt_hcTags !== undefined) {
    queryParameters['hc.tags'] = opt_hcTags;
  }

  /** @type {!Object} */
  var httpRequestParams = {
    method: 'POST',
    url: path,
    json: true,
            params: queryParameters,
    headers: headerParams
  };

  if (opt_extraHttpRequestParams) {
    httpRequestParams = angular.extend(httpRequestParams, opt_extraHttpRequestParams);
  }

  return (/** @type {?} */ (this.http_))(httpRequestParams);
}

/**
 * 
 * 
 * @param {!boolean=} opt_post 
 * @param {!boolean=} opt_apply 
 * @param {!boolean=} opt_delete 
 * @param {!string=} opt_action 
 * @param {!string=} opt_location 
 * @param {!Array<!string>=} opt_propertylist 
 * @param {!Array<!string>=} opt_replicateCommentResourceTypes 
 * @param {!angular.$http.Config=} opt_extraHttpRequestParams Extra HTTP parameters to send.
 * @return {!angular.$q.Promise<!API.Client.comAdobeGraniteCommentsInternalCommentReplicationContentFilterFacInfo>}
 */
API.Client.ConfigmgrApi.prototype.comAdobeGraniteCommentsInternalCommentReplicationContentFilterFac = function(opt_post, opt_apply, opt_delete, opt_action, opt_location, opt_propertylist, opt_replicateCommentResourceTypes, opt_extraHttpRequestParams) {
  /** @const {string} */
  var path = this.basePath_ + '/system/console/configMgr/com.adobe.granite.comments.internal.CommentReplicationContentFilterFactory';

  /** @type {!Object} */
  var queryParameters = {};

  /** @type {!Object} */
  var headerParams = angular.extend({}, this.defaultHeaders_);
  if (opt_post !== undefined) {
    queryParameters['post'] = opt_post;
  }

  if (opt_apply !== undefined) {
    queryParameters['apply'] = opt_apply;
  }

  if (opt_delete !== undefined) {
    queryParameters['delete'] = opt_delete;
  }

  if (opt_action !== undefined) {
    queryParameters['action'] = opt_action;
  }

  if (opt_location !== undefined) {
    queryParameters['$location'] = opt_location;
  }

  if (opt_propertylist !== undefined) {
    queryParameters['propertylist'] = opt_propertylist;
  }

  if (opt_replicateCommentResourceTypes !== undefined) {
    queryParameters['replicate.comment.resourceTypes'] = opt_replicateCommentResourceTypes;
  }

  /** @type {!Object} */
  var httpRequestParams = {
    method: 'POST',
    url: path,
    json: true,
            params: queryParameters,
    headers: headerParams
  };

  if (opt_extraHttpRequestParams) {
    httpRequestParams = angular.extend(httpRequestParams, opt_extraHttpRequestParams);
  }

  return (/** @type {?} */ (this.http_))(httpRequestParams);
}

/**
 * 
 * 
 * @param {!boolean=} opt_post 
 * @param {!boolean=} opt_apply 
 * @param {!boolean=} opt_delete 
 * @param {!string=} opt_action 
 * @param {!string=} opt_location 
 * @param {!Array<!string>=} opt_propertylist 
 * @param {!Array<!string>=} opt_compatgroups 
 * @param {!boolean=} opt_enabled 
 * @param {!angular.$http.Config=} opt_extraHttpRequestParams Extra HTTP parameters to send.
 * @return {!angular.$q.Promise<!API.Client.comAdobeGraniteCompatrouterImplCompatSwitchingServiceImplInfo>}
 */
API.Client.ConfigmgrApi.prototype.comAdobeGraniteCompatrouterImplCompatSwitchingServiceImpl = function(opt_post, opt_apply, opt_delete, opt_action, opt_location, opt_propertylist, opt_compatgroups, opt_enabled, opt_extraHttpRequestParams) {
  /** @const {string} */
  var path = this.basePath_ + '/system/console/configMgr/com.adobe.granite.compatrouter.impl.CompatSwitchingServiceImpl';

  /** @type {!Object} */
  var queryParameters = {};

  /** @type {!Object} */
  var headerParams = angular.extend({}, this.defaultHeaders_);
  if (opt_post !== undefined) {
    queryParameters['post'] = opt_post;
  }

  if (opt_apply !== undefined) {
    queryParameters['apply'] = opt_apply;
  }

  if (opt_delete !== undefined) {
    queryParameters['delete'] = opt_delete;
  }

  if (opt_action !== undefined) {
    queryParameters['action'] = opt_action;
  }

  if (opt_location !== undefined) {
    queryParameters['$location'] = opt_location;
  }

  if (opt_propertylist !== undefined) {
    queryParameters['propertylist'] = opt_propertylist;
  }

  if (opt_compatgroups !== undefined) {
    queryParameters['compatgroups'] = opt_compatgroups;
  }

  if (opt_enabled !== undefined) {
    queryParameters['enabled'] = opt_enabled;
  }

  /** @type {!Object} */
  var httpRequestParams = {
    method: 'POST',
    url: path,
    json: true,
            params: queryParameters,
    headers: headerParams
  };

  if (opt_extraHttpRequestParams) {
    httpRequestParams = angular.extend(httpRequestParams, opt_extraHttpRequestParams);
  }

  return (/** @type {?} */ (this.http_))(httpRequestParams);
}

/**
 * 
 * 
 * @param {!boolean=} opt_post 
 * @param {!boolean=} opt_apply 
 * @param {!boolean=} opt_delete 
 * @param {!string=} opt_action 
 * @param {!string=} opt_location 
 * @param {!Array<!string>=} opt_propertylist 
 * @param {!string=} opt_id 
 * @param {!string=} opt_compatPath 
 * @param {!string=} opt_newPath 
 * @param {!angular.$http.Config=} opt_extraHttpRequestParams Extra HTTP parameters to send.
 * @return {!angular.$q.Promise<!API.Client.comAdobeGraniteCompatrouterImplRoutingConfigInfo>}
 */
API.Client.ConfigmgrApi.prototype.comAdobeGraniteCompatrouterImplRoutingConfig = function(opt_post, opt_apply, opt_delete, opt_action, opt_location, opt_propertylist, opt_id, opt_compatPath, opt_newPath, opt_extraHttpRequestParams) {
  /** @const {string} */
  var path = this.basePath_ + '/system/console/configMgr/com.adobe.granite.compatrouter.impl.RoutingConfig';

  /** @type {!Object} */
  var queryParameters = {};

  /** @type {!Object} */
  var headerParams = angular.extend({}, this.defaultHeaders_);
  if (opt_post !== undefined) {
    queryParameters['post'] = opt_post;
  }

  if (opt_apply !== undefined) {
    queryParameters['apply'] = opt_apply;
  }

  if (opt_delete !== undefined) {
    queryParameters['delete'] = opt_delete;
  }

  if (opt_action !== undefined) {
    queryParameters['action'] = opt_action;
  }

  if (opt_location !== undefined) {
    queryParameters['$location'] = opt_location;
  }

  if (opt_propertylist !== undefined) {
    queryParameters['propertylist'] = opt_propertylist;
  }

  if (opt_id !== undefined) {
    queryParameters['id'] = opt_id;
  }

  if (opt_compatPath !== undefined) {
    queryParameters['compatPath'] = opt_compatPath;
  }

  if (opt_newPath !== undefined) {
    queryParameters['newPath'] = opt_newPath;
  }

  /** @type {!Object} */
  var httpRequestParams = {
    method: 'POST',
    url: path,
    json: true,
            params: queryParameters,
    headers: headerParams
  };

  if (opt_extraHttpRequestParams) {
    httpRequestParams = angular.extend(httpRequestParams, opt_extraHttpRequestParams);
  }

  return (/** @type {?} */ (this.http_))(httpRequestParams);
}

/**
 * 
 * 
 * @param {!boolean=} opt_post 
 * @param {!boolean=} opt_apply 
 * @param {!boolean=} opt_delete 
 * @param {!string=} opt_action 
 * @param {!string=} opt_location 
 * @param {!Array<!string>=} opt_propertylist 
 * @param {!string=} opt_group 
 * @param {!Array<!string>=} opt_ids 
 * @param {!angular.$http.Config=} opt_extraHttpRequestParams Extra HTTP parameters to send.
 * @return {!angular.$q.Promise<!API.Client.comAdobeGraniteCompatrouterImplSwitchMappingConfigInfo>}
 */
API.Client.ConfigmgrApi.prototype.comAdobeGraniteCompatrouterImplSwitchMappingConfig = function(opt_post, opt_apply, opt_delete, opt_action, opt_location, opt_propertylist, opt_group, opt_ids, opt_extraHttpRequestParams) {
  /** @const {string} */
  var path = this.basePath_ + '/system/console/configMgr/com.adobe.granite.compatrouter.impl.SwitchMappingConfig';

  /** @type {!Object} */
  var queryParameters = {};

  /** @type {!Object} */
  var headerParams = angular.extend({}, this.defaultHeaders_);
  if (opt_post !== undefined) {
    queryParameters['post'] = opt_post;
  }

  if (opt_apply !== undefined) {
    queryParameters['apply'] = opt_apply;
  }

  if (opt_delete !== undefined) {
    queryParameters['delete'] = opt_delete;
  }

  if (opt_action !== undefined) {
    queryParameters['action'] = opt_action;
  }

  if (opt_location !== undefined) {
    queryParameters['$location'] = opt_location;
  }

  if (opt_propertylist !== undefined) {
    queryParameters['propertylist'] = opt_propertylist;
  }

  if (opt_group !== undefined) {
    queryParameters['group'] = opt_group;
  }

  if (opt_ids !== undefined) {
    queryParameters['ids'] = opt_ids;
  }

  /** @type {!Object} */
  var httpRequestParams = {
    method: 'POST',
    url: path,
    json: true,
            params: queryParameters,
    headers: headerParams
  };

  if (opt_extraHttpRequestParams) {
    httpRequestParams = angular.extend(httpRequestParams, opt_extraHttpRequestParams);
  }

  return (/** @type {?} */ (this.http_))(httpRequestParams);
}

/**
 * 
 * 
 * @param {!boolean=} opt_post 
 * @param {!boolean=} opt_apply 
 * @param {!boolean=} opt_delete 
 * @param {!string=} opt_action 
 * @param {!string=} opt_location 
 * @param {!Array<!string>=} opt_propertylist 
 * @param {!boolean=} opt_enabled 
 * @param {!Array<!string>=} opt_fallbackPaths 
 * @param {!angular.$http.Config=} opt_extraHttpRequestParams Extra HTTP parameters to send.
 * @return {!angular.$q.Promise<!API.Client.comAdobeGraniteConfImplRuntimeAwareConfigurationResourceResolvingInfo>}
 */
API.Client.ConfigmgrApi.prototype.comAdobeGraniteConfImplRuntimeAwareConfigurationResourceResolving = function(opt_post, opt_apply, opt_delete, opt_action, opt_location, opt_propertylist, opt_enabled, opt_fallbackPaths, opt_extraHttpRequestParams) {
  /** @const {string} */
  var path = this.basePath_ + '/system/console/configMgr/com.adobe.granite.conf.impl.RuntimeAwareConfigurationResourceResolvingStrategy';

  /** @type {!Object} */
  var queryParameters = {};

  /** @type {!Object} */
  var headerParams = angular.extend({}, this.defaultHeaders_);
  if (opt_post !== undefined) {
    queryParameters['post'] = opt_post;
  }

  if (opt_apply !== undefined) {
    queryParameters['apply'] = opt_apply;
  }

  if (opt_delete !== undefined) {
    queryParameters['delete'] = opt_delete;
  }

  if (opt_action !== undefined) {
    queryParameters['action'] = opt_action;
  }

  if (opt_location !== undefined) {
    queryParameters['$location'] = opt_location;
  }

  if (opt_propertylist !== undefined) {
    queryParameters['propertylist'] = opt_propertylist;
  }

  if (opt_enabled !== undefined) {
    queryParameters['enabled'] = opt_enabled;
  }

  if (opt_fallbackPaths !== undefined) {
    queryParameters['fallbackPaths'] = opt_fallbackPaths;
  }

  /** @type {!Object} */
  var httpRequestParams = {
    method: 'POST',
    url: path,
    json: true,
            params: queryParameters,
    headers: headerParams
  };

  if (opt_extraHttpRequestParams) {
    httpRequestParams = angular.extend(httpRequestParams, opt_extraHttpRequestParams);
  }

  return (/** @type {?} */ (this.http_))(httpRequestParams);
}

/**
 * 
 * 
 * @param {!boolean=} opt_post 
 * @param {!boolean=} opt_apply 
 * @param {!boolean=} opt_delete 
 * @param {!string=} opt_action 
 * @param {!string=} opt_location 
 * @param {!Array<!string>=} opt_propertylist 
 * @param {!boolean=} opt_comAdobeGraniteContexthubSilentMode 
 * @param {!boolean=} opt_comAdobeGraniteContexthubShowUi 
 * @param {!angular.$http.Config=} opt_extraHttpRequestParams Extra HTTP parameters to send.
 * @return {!angular.$q.Promise<!API.Client.comAdobeGraniteContexthubImplContextHubImplInfo>}
 */
API.Client.ConfigmgrApi.prototype.comAdobeGraniteContexthubImplContextHubImpl = function(opt_post, opt_apply, opt_delete, opt_action, opt_location, opt_propertylist, opt_comAdobeGraniteContexthubSilentMode, opt_comAdobeGraniteContexthubShowUi, opt_extraHttpRequestParams) {
  /** @const {string} */
  var path = this.basePath_ + '/system/console/configMgr/com.adobe.granite.contexthub.impl.ContextHubImpl';

  /** @type {!Object} */
  var queryParameters = {};

  /** @type {!Object} */
  var headerParams = angular.extend({}, this.defaultHeaders_);
  if (opt_post !== undefined) {
    queryParameters['post'] = opt_post;
  }

  if (opt_apply !== undefined) {
    queryParameters['apply'] = opt_apply;
  }

  if (opt_delete !== undefined) {
    queryParameters['delete'] = opt_delete;
  }

  if (opt_action !== undefined) {
    queryParameters['action'] = opt_action;
  }

  if (opt_location !== undefined) {
    queryParameters['$location'] = opt_location;
  }

  if (opt_propertylist !== undefined) {
    queryParameters['propertylist'] = opt_propertylist;
  }

  if (opt_comAdobeGraniteContexthubSilentMode !== undefined) {
    queryParameters['com.adobe.granite.contexthub.silent_mode'] = opt_comAdobeGraniteContexthubSilentMode;
  }

  if (opt_comAdobeGraniteContexthubShowUi !== undefined) {
    queryParameters['com.adobe.granite.contexthub.show_ui'] = opt_comAdobeGraniteContexthubShowUi;
  }

  /** @type {!Object} */
  var httpRequestParams = {
    method: 'POST',
    url: path,
    json: true,
            params: queryParameters,
    headers: headerParams
  };

  if (opt_extraHttpRequestParams) {
    httpRequestParams = angular.extend(httpRequestParams, opt_extraHttpRequestParams);
  }

  return (/** @type {?} */ (this.http_))(httpRequestParams);
}

/**
 * 
 * 
 * @param {!boolean=} opt_post 
 * @param {!boolean=} opt_apply 
 * @param {!boolean=} opt_delete 
 * @param {!string=} opt_action 
 * @param {!string=} opt_location 
 * @param {!Array<!string>=} opt_propertylist 
 * @param {!Array<!string>=} opt_alloworigin 
 * @param {!Array<!string>=} opt_alloworiginregexp 
 * @param {!Array<!string>=} opt_allowedpaths 
 * @param {!Array<!string>=} opt_exposedheaders 
 * @param {!number=} opt_maxage 
 * @param {!Array<!string>=} opt_supportedheaders 
 * @param {!Array<!string>=} opt_supportedmethods 
 * @param {!boolean=} opt_supportscredentials 
 * @param {!angular.$http.Config=} opt_extraHttpRequestParams Extra HTTP parameters to send.
 * @return {!angular.$q.Promise<!API.Client.comAdobeGraniteCorsImplCORSPolicyImplInfo>}
 */
API.Client.ConfigmgrApi.prototype.comAdobeGraniteCorsImplCORSPolicyImpl = function(opt_post, opt_apply, opt_delete, opt_action, opt_location, opt_propertylist, opt_alloworigin, opt_alloworiginregexp, opt_allowedpaths, opt_exposedheaders, opt_maxage, opt_supportedheaders, opt_supportedmethods, opt_supportscredentials, opt_extraHttpRequestParams) {
  /** @const {string} */
  var path = this.basePath_ + '/system/console/configMgr/com.adobe.granite.cors.impl.CORSPolicyImpl';

  /** @type {!Object} */
  var queryParameters = {};

  /** @type {!Object} */
  var headerParams = angular.extend({}, this.defaultHeaders_);
  if (opt_post !== undefined) {
    queryParameters['post'] = opt_post;
  }

  if (opt_apply !== undefined) {
    queryParameters['apply'] = opt_apply;
  }

  if (opt_delete !== undefined) {
    queryParameters['delete'] = opt_delete;
  }

  if (opt_action !== undefined) {
    queryParameters['action'] = opt_action;
  }

  if (opt_location !== undefined) {
    queryParameters['$location'] = opt_location;
  }

  if (opt_propertylist !== undefined) {
    queryParameters['propertylist'] = opt_propertylist;
  }

  if (opt_alloworigin !== undefined) {
    queryParameters['alloworigin'] = opt_alloworigin;
  }

  if (opt_alloworiginregexp !== undefined) {
    queryParameters['alloworiginregexp'] = opt_alloworiginregexp;
  }

  if (opt_allowedpaths !== undefined) {
    queryParameters['allowedpaths'] = opt_allowedpaths;
  }

  if (opt_exposedheaders !== undefined) {
    queryParameters['exposedheaders'] = opt_exposedheaders;
  }

  if (opt_maxage !== undefined) {
    queryParameters['maxage'] = opt_maxage;
  }

  if (opt_supportedheaders !== undefined) {
    queryParameters['supportedheaders'] = opt_supportedheaders;
  }

  if (opt_supportedmethods !== undefined) {
    queryParameters['supportedmethods'] = opt_supportedmethods;
  }

  if (opt_supportscredentials !== undefined) {
    queryParameters['supportscredentials'] = opt_supportscredentials;
  }

  /** @type {!Object} */
  var httpRequestParams = {
    method: 'POST',
    url: path,
    json: true,
            params: queryParameters,
    headers: headerParams
  };

  if (opt_extraHttpRequestParams) {
    httpRequestParams = angular.extend(httpRequestParams, opt_extraHttpRequestParams);
  }

  return (/** @type {?} */ (this.http_))(httpRequestParams);
}

/**
 * 
 * 
 * @param {!boolean=} opt_post 
 * @param {!boolean=} opt_apply 
 * @param {!boolean=} opt_delete 
 * @param {!string=} opt_action 
 * @param {!string=} opt_location 
 * @param {!Array<!string>=} opt_propertylist 
 * @param {!Array<!string>=} opt_filterMethods 
 * @param {!boolean=} opt_filterEnableSafeUserAgents 
 * @param {!Array<!string>=} opt_filterSafeUserAgents 
 * @param {!Array<!string>=} opt_filterExcludedPaths 
 * @param {!angular.$http.Config=} opt_extraHttpRequestParams Extra HTTP parameters to send.
 * @return {!angular.$q.Promise<!API.Client.comAdobeGraniteCsrfImplCSRFFilterInfo>}
 */
API.Client.ConfigmgrApi.prototype.comAdobeGraniteCsrfImplCSRFFilter = function(opt_post, opt_apply, opt_delete, opt_action, opt_location, opt_propertylist, opt_filterMethods, opt_filterEnableSafeUserAgents, opt_filterSafeUserAgents, opt_filterExcludedPaths, opt_extraHttpRequestParams) {
  /** @const {string} */
  var path = this.basePath_ + '/system/console/configMgr/com.adobe.granite.csrf.impl.CSRFFilter';

  /** @type {!Object} */
  var queryParameters = {};

  /** @type {!Object} */
  var headerParams = angular.extend({}, this.defaultHeaders_);
  if (opt_post !== undefined) {
    queryParameters['post'] = opt_post;
  }

  if (opt_apply !== undefined) {
    queryParameters['apply'] = opt_apply;
  }

  if (opt_delete !== undefined) {
    queryParameters['delete'] = opt_delete;
  }

  if (opt_action !== undefined) {
    queryParameters['action'] = opt_action;
  }

  if (opt_location !== undefined) {
    queryParameters['$location'] = opt_location;
  }

  if (opt_propertylist !== undefined) {
    queryParameters['propertylist'] = opt_propertylist;
  }

  if (opt_filterMethods !== undefined) {
    queryParameters['filter.methods'] = opt_filterMethods;
  }

  if (opt_filterEnableSafeUserAgents !== undefined) {
    queryParameters['filter.enable.safe.user.agents'] = opt_filterEnableSafeUserAgents;
  }

  if (opt_filterSafeUserAgents !== undefined) {
    queryParameters['filter.safe.user.agents'] = opt_filterSafeUserAgents;
  }

  if (opt_filterExcludedPaths !== undefined) {
    queryParameters['filter.excluded.paths'] = opt_filterExcludedPaths;
  }

  /** @type {!Object} */
  var httpRequestParams = {
    method: 'POST',
    url: path,
    json: true,
            params: queryParameters,
    headers: headerParams
  };

  if (opt_extraHttpRequestParams) {
    httpRequestParams = angular.extend(httpRequestParams, opt_extraHttpRequestParams);
  }

  return (/** @type {?} */ (this.http_))(httpRequestParams);
}

/**
 * 
 * 
 * @param {!boolean=} opt_post 
 * @param {!boolean=} opt_apply 
 * @param {!boolean=} opt_delete 
 * @param {!string=} opt_action 
 * @param {!string=} opt_location 
 * @param {!Array<!string>=} opt_propertylist 
 * @param {!number=} opt_csrfTokenExpiresIn 
 * @param {!string=} opt_slingAuthRequirements 
 * @param {!angular.$http.Config=} opt_extraHttpRequestParams Extra HTTP parameters to send.
 * @return {!angular.$q.Promise<!API.Client.comAdobeGraniteCsrfImplCSRFServletInfo>}
 */
API.Client.ConfigmgrApi.prototype.comAdobeGraniteCsrfImplCSRFServlet = function(opt_post, opt_apply, opt_delete, opt_action, opt_location, opt_propertylist, opt_csrfTokenExpiresIn, opt_slingAuthRequirements, opt_extraHttpRequestParams) {
  /** @const {string} */
  var path = this.basePath_ + '/system/console/configMgr/com.adobe.granite.csrf.impl.CSRFServlet';

  /** @type {!Object} */
  var queryParameters = {};

  /** @type {!Object} */
  var headerParams = angular.extend({}, this.defaultHeaders_);
  if (opt_post !== undefined) {
    queryParameters['post'] = opt_post;
  }

  if (opt_apply !== undefined) {
    queryParameters['apply'] = opt_apply;
  }

  if (opt_delete !== undefined) {
    queryParameters['delete'] = opt_delete;
  }

  if (opt_action !== undefined) {
    queryParameters['action'] = opt_action;
  }

  if (opt_location !== undefined) {
    queryParameters['$location'] = opt_location;
  }

  if (opt_propertylist !== undefined) {
    queryParameters['propertylist'] = opt_propertylist;
  }

  if (opt_csrfTokenExpiresIn !== undefined) {
    queryParameters['csrf.token.expires.in'] = opt_csrfTokenExpiresIn;
  }

  if (opt_slingAuthRequirements !== undefined) {
    queryParameters['sling.auth.requirements'] = opt_slingAuthRequirements;
  }

  /** @type {!Object} */
  var httpRequestParams = {
    method: 'POST',
    url: path,
    json: true,
            params: queryParameters,
    headers: headerParams
  };

  if (opt_extraHttpRequestParams) {
    httpRequestParams = angular.extend(httpRequestParams, opt_extraHttpRequestParams);
  }

  return (/** @type {?} */ (this.http_))(httpRequestParams);
}

/**
 * 
 * 
 * @param {!boolean=} opt_post 
 * @param {!boolean=} opt_apply 
 * @param {!boolean=} opt_delete 
 * @param {!string=} opt_action 
 * @param {!string=} opt_location 
 * @param {!Array<!string>=} opt_propertylist 
 * @param {!string=} opt_name 
 * @param {!string=} opt_username 
 * @param {!string=} opt_encryptedPassword 
 * @param {!angular.$http.Config=} opt_extraHttpRequestParams Extra HTTP parameters to send.
 * @return {!angular.$q.Promise<!API.Client.comAdobeGraniteDistributionCoreImplCryptoDistributionTransportSeInfo>}
 */
API.Client.ConfigmgrApi.prototype.comAdobeGraniteDistributionCoreImplCryptoDistributionTransportSe = function(opt_post, opt_apply, opt_delete, opt_action, opt_location, opt_propertylist, opt_name, opt_username, opt_encryptedPassword, opt_extraHttpRequestParams) {
  /** @const {string} */
  var path = this.basePath_ + '/system/console/configMgr/com.adobe.granite.distribution.core.impl.CryptoDistributionTransportSecretProvider';

  /** @type {!Object} */
  var queryParameters = {};

  /** @type {!Object} */
  var headerParams = angular.extend({}, this.defaultHeaders_);
  if (opt_post !== undefined) {
    queryParameters['post'] = opt_post;
  }

  if (opt_apply !== undefined) {
    queryParameters['apply'] = opt_apply;
  }

  if (opt_delete !== undefined) {
    queryParameters['delete'] = opt_delete;
  }

  if (opt_action !== undefined) {
    queryParameters['action'] = opt_action;
  }

  if (opt_location !== undefined) {
    queryParameters['$location'] = opt_location;
  }

  if (opt_propertylist !== undefined) {
    queryParameters['propertylist'] = opt_propertylist;
  }

  if (opt_name !== undefined) {
    queryParameters['name'] = opt_name;
  }

  if (opt_username !== undefined) {
    queryParameters['username'] = opt_username;
  }

  if (opt_encryptedPassword !== undefined) {
    queryParameters['encryptedPassword'] = opt_encryptedPassword;
  }

  /** @type {!Object} */
  var httpRequestParams = {
    method: 'POST',
    url: path,
    json: true,
            params: queryParameters,
    headers: headerParams
  };

  if (opt_extraHttpRequestParams) {
    httpRequestParams = angular.extend(httpRequestParams, opt_extraHttpRequestParams);
  }

  return (/** @type {?} */ (this.http_))(httpRequestParams);
}

/**
 * 
 * 
 * @param {!boolean=} opt_post 
 * @param {!boolean=} opt_apply 
 * @param {!boolean=} opt_delete 
 * @param {!string=} opt_action 
 * @param {!string=} opt_location 
 * @param {!Array<!string>=} opt_propertylist 
 * @param {!boolean=} opt_enabled 
 * @param {!string=} opt_agentName 
 * @param {!string=} opt_diffPath 
 * @param {!string=} opt_observedPath 
 * @param {!string=} opt_serviceName 
 * @param {!string=} opt_propertyNames 
 * @param {!number=} opt_distributionDelay 
 * @param {!string=} opt_serviceUserTarget 
 * @param {!angular.$http.Config=} opt_extraHttpRequestParams Extra HTTP parameters to send.
 * @return {!angular.$q.Promise<!API.Client.comAdobeGraniteDistributionCoreImplDiffDiffChangesObserverInfo>}
 */
API.Client.ConfigmgrApi.prototype.comAdobeGraniteDistributionCoreImplDiffDiffChangesObserver = function(opt_post, opt_apply, opt_delete, opt_action, opt_location, opt_propertylist, opt_enabled, opt_agentName, opt_diffPath, opt_observedPath, opt_serviceName, opt_propertyNames, opt_distributionDelay, opt_serviceUserTarget, opt_extraHttpRequestParams) {
  /** @const {string} */
  var path = this.basePath_ + '/system/console/configMgr/com.adobe.granite.distribution.core.impl.diff.DiffChangesObserver';

  /** @type {!Object} */
  var queryParameters = {};

  /** @type {!Object} */
  var headerParams = angular.extend({}, this.defaultHeaders_);
  if (opt_post !== undefined) {
    queryParameters['post'] = opt_post;
  }

  if (opt_apply !== undefined) {
    queryParameters['apply'] = opt_apply;
  }

  if (opt_delete !== undefined) {
    queryParameters['delete'] = opt_delete;
  }

  if (opt_action !== undefined) {
    queryParameters['action'] = opt_action;
  }

  if (opt_location !== undefined) {
    queryParameters['$location'] = opt_location;
  }

  if (opt_propertylist !== undefined) {
    queryParameters['propertylist'] = opt_propertylist;
  }

  if (opt_enabled !== undefined) {
    queryParameters['enabled'] = opt_enabled;
  }

  if (opt_agentName !== undefined) {
    queryParameters['agentName'] = opt_agentName;
  }

  if (opt_diffPath !== undefined) {
    queryParameters['diffPath'] = opt_diffPath;
  }

  if (opt_observedPath !== undefined) {
    queryParameters['observedPath'] = opt_observedPath;
  }

  if (opt_serviceName !== undefined) {
    queryParameters['serviceName'] = opt_serviceName;
  }

  if (opt_propertyNames !== undefined) {
    queryParameters['propertyNames'] = opt_propertyNames;
  }

  if (opt_distributionDelay !== undefined) {
    queryParameters['distributionDelay'] = opt_distributionDelay;
  }

  if (opt_serviceUserTarget !== undefined) {
    queryParameters['serviceUser.target'] = opt_serviceUserTarget;
  }

  /** @type {!Object} */
  var httpRequestParams = {
    method: 'POST',
    url: path,
    json: true,
            params: queryParameters,
    headers: headerParams
  };

  if (opt_extraHttpRequestParams) {
    httpRequestParams = angular.extend(httpRequestParams, opt_extraHttpRequestParams);
  }

  return (/** @type {?} */ (this.http_))(httpRequestParams);
}

/**
 * 
 * 
 * @param {!boolean=} opt_post 
 * @param {!boolean=} opt_apply 
 * @param {!boolean=} opt_delete 
 * @param {!string=} opt_action 
 * @param {!string=} opt_location 
 * @param {!Array<!string>=} opt_propertylist 
 * @param {!string=} opt_diffPath 
 * @param {!string=} opt_serviceName 
 * @param {!string=} opt_serviceUserTarget 
 * @param {!angular.$http.Config=} opt_extraHttpRequestParams Extra HTTP parameters to send.
 * @return {!angular.$q.Promise<!API.Client.comAdobeGraniteDistributionCoreImplDiffDiffEventListenerInfo>}
 */
API.Client.ConfigmgrApi.prototype.comAdobeGraniteDistributionCoreImplDiffDiffEventListener = function(opt_post, opt_apply, opt_delete, opt_action, opt_location, opt_propertylist, opt_diffPath, opt_serviceName, opt_serviceUserTarget, opt_extraHttpRequestParams) {
  /** @const {string} */
  var path = this.basePath_ + '/system/console/configMgr/com.adobe.granite.distribution.core.impl.diff.DiffEventListener';

  /** @type {!Object} */
  var queryParameters = {};

  /** @type {!Object} */
  var headerParams = angular.extend({}, this.defaultHeaders_);
  if (opt_post !== undefined) {
    queryParameters['post'] = opt_post;
  }

  if (opt_apply !== undefined) {
    queryParameters['apply'] = opt_apply;
  }

  if (opt_delete !== undefined) {
    queryParameters['delete'] = opt_delete;
  }

  if (opt_action !== undefined) {
    queryParameters['action'] = opt_action;
  }

  if (opt_location !== undefined) {
    queryParameters['$location'] = opt_location;
  }

  if (opt_propertylist !== undefined) {
    queryParameters['propertylist'] = opt_propertylist;
  }

  if (opt_diffPath !== undefined) {
    queryParameters['diffPath'] = opt_diffPath;
  }

  if (opt_serviceName !== undefined) {
    queryParameters['serviceName'] = opt_serviceName;
  }

  if (opt_serviceUserTarget !== undefined) {
    queryParameters['serviceUser.target'] = opt_serviceUserTarget;
  }

  /** @type {!Object} */
  var httpRequestParams = {
    method: 'POST',
    url: path,
    json: true,
            params: queryParameters,
    headers: headerParams
  };

  if (opt_extraHttpRequestParams) {
    httpRequestParams = angular.extend(httpRequestParams, opt_extraHttpRequestParams);
  }

  return (/** @type {?} */ (this.http_))(httpRequestParams);
}

/**
 * 
 * 
 * @param {!boolean=} opt_post 
 * @param {!boolean=} opt_apply 
 * @param {!boolean=} opt_delete 
 * @param {!string=} opt_action 
 * @param {!string=} opt_location 
 * @param {!Array<!string>=} opt_propertylist 
 * @param {!Array<!string>=} opt_importerName 
 * @param {!angular.$http.Config=} opt_extraHttpRequestParams Extra HTTP parameters to send.
 * @return {!angular.$q.Promise<!API.Client.comAdobeGraniteDistributionCoreImplDistributionToReplicationEvenInfo>}
 */
API.Client.ConfigmgrApi.prototype.comAdobeGraniteDistributionCoreImplDistributionToReplicationEven = function(opt_post, opt_apply, opt_delete, opt_action, opt_location, opt_propertylist, opt_importerName, opt_extraHttpRequestParams) {
  /** @const {string} */
  var path = this.basePath_ + '/system/console/configMgr/com.adobe.granite.distribution.core.impl.DistributionToReplicationEventTransformer';

  /** @type {!Object} */
  var queryParameters = {};

  /** @type {!Object} */
  var headerParams = angular.extend({}, this.defaultHeaders_);
  if (opt_post !== undefined) {
    queryParameters['post'] = opt_post;
  }

  if (opt_apply !== undefined) {
    queryParameters['apply'] = opt_apply;
  }

  if (opt_delete !== undefined) {
    queryParameters['delete'] = opt_delete;
  }

  if (opt_action !== undefined) {
    queryParameters['action'] = opt_action;
  }

  if (opt_location !== undefined) {
    queryParameters['$location'] = opt_location;
  }

  if (opt_propertylist !== undefined) {
    queryParameters['propertylist'] = opt_propertylist;
  }

  if (opt_importerName !== undefined) {
    queryParameters['importer.name'] = opt_importerName;
  }

  /** @type {!Object} */
  var httpRequestParams = {
    method: 'POST',
    url: path,
    json: true,
            params: queryParameters,
    headers: headerParams
  };

  if (opt_extraHttpRequestParams) {
    httpRequestParams = angular.extend(httpRequestParams, opt_extraHttpRequestParams);
  }

  return (/** @type {?} */ (this.http_))(httpRequestParams);
}

/**
 * 
 * 
 * @param {!boolean=} opt_post 
 * @param {!boolean=} opt_apply 
 * @param {!boolean=} opt_delete 
 * @param {!string=} opt_action 
 * @param {!string=} opt_location 
 * @param {!Array<!string>=} opt_propertylist 
 * @param {!string=} opt_providerName 
 * @param {!boolean=} opt_forwardRequests 
 * @param {!angular.$http.Config=} opt_extraHttpRequestParams Extra HTTP parameters to send.
 * @return {!angular.$q.Promise<!API.Client.comAdobeGraniteDistributionCoreImplReplicationAdaptersReplicatInfo>}
 */
API.Client.ConfigmgrApi.prototype.comAdobeGraniteDistributionCoreImplReplicationAdaptersReplicat = function(opt_post, opt_apply, opt_delete, opt_action, opt_location, opt_propertylist, opt_providerName, opt_forwardRequests, opt_extraHttpRequestParams) {
  /** @const {string} */
  var path = this.basePath_ + '/system/console/configMgr/com.adobe.granite.distribution.core.impl.replication.adapters.ReplicationAgentProvider';

  /** @type {!Object} */
  var queryParameters = {};

  /** @type {!Object} */
  var headerParams = angular.extend({}, this.defaultHeaders_);
  if (opt_post !== undefined) {
    queryParameters['post'] = opt_post;
  }

  if (opt_apply !== undefined) {
    queryParameters['apply'] = opt_apply;
  }

  if (opt_delete !== undefined) {
    queryParameters['delete'] = opt_delete;
  }

  if (opt_action !== undefined) {
    queryParameters['action'] = opt_action;
  }

  if (opt_location !== undefined) {
    queryParameters['$location'] = opt_location;
  }

  if (opt_propertylist !== undefined) {
    queryParameters['propertylist'] = opt_propertylist;
  }

  if (opt_providerName !== undefined) {
    queryParameters['providerName'] = opt_providerName;
  }

  if (opt_forwardRequests !== undefined) {
    queryParameters['forward.requests'] = opt_forwardRequests;
  }

  /** @type {!Object} */
  var httpRequestParams = {
    method: 'POST',
    url: path,
    json: true,
            params: queryParameters,
    headers: headerParams
  };

  if (opt_extraHttpRequestParams) {
    httpRequestParams = angular.extend(httpRequestParams, opt_extraHttpRequestParams);
  }

  return (/** @type {?} */ (this.http_))(httpRequestParams);
}

/**
 * 
 * 
 * @param {!boolean=} opt_post 
 * @param {!boolean=} opt_apply 
 * @param {!boolean=} opt_delete 
 * @param {!string=} opt_action 
 * @param {!string=} opt_location 
 * @param {!Array<!string>=} opt_propertylist 
 * @param {!boolean=} opt_forwardRequests 
 * @param {!angular.$http.Config=} opt_extraHttpRequestParams Extra HTTP parameters to send.
 * @return {!angular.$q.Promise<!API.Client.comAdobeGraniteDistributionCoreImplReplicationDistributionTransInfo>}
 */
API.Client.ConfigmgrApi.prototype.comAdobeGraniteDistributionCoreImplReplicationDistributionTrans = function(opt_post, opt_apply, opt_delete, opt_action, opt_location, opt_propertylist, opt_forwardRequests, opt_extraHttpRequestParams) {
  /** @const {string} */
  var path = this.basePath_ + '/system/console/configMgr/com.adobe.granite.distribution.core.impl.replication.DistributionTransportHandler';

  /** @type {!Object} */
  var queryParameters = {};

  /** @type {!Object} */
  var headerParams = angular.extend({}, this.defaultHeaders_);
  if (opt_post !== undefined) {
    queryParameters['post'] = opt_post;
  }

  if (opt_apply !== undefined) {
    queryParameters['apply'] = opt_apply;
  }

  if (opt_delete !== undefined) {
    queryParameters['delete'] = opt_delete;
  }

  if (opt_action !== undefined) {
    queryParameters['action'] = opt_action;
  }

  if (opt_location !== undefined) {
    queryParameters['$location'] = opt_location;
  }

  if (opt_propertylist !== undefined) {
    queryParameters['propertylist'] = opt_propertylist;
  }

  if (opt_forwardRequests !== undefined) {
    queryParameters['forward.requests'] = opt_forwardRequests;
  }

  /** @type {!Object} */
  var httpRequestParams = {
    method: 'POST',
    url: path,
    json: true,
            params: queryParameters,
    headers: headerParams
  };

  if (opt_extraHttpRequestParams) {
    httpRequestParams = angular.extend(httpRequestParams, opt_extraHttpRequestParams);
  }

  return (/** @type {?} */ (this.http_))(httpRequestParams);
}

/**
 * 
 * 
 * @param {!boolean=} opt_post 
 * @param {!boolean=} opt_apply 
 * @param {!boolean=} opt_delete 
 * @param {!string=} opt_action 
 * @param {!string=} opt_location 
 * @param {!Array<!string>=} opt_propertylist 
 * @param {!string=} opt_name 
 * @param {!string=} opt_serviceName 
 * @param {!string=} opt_userId 
 * @param {!string=} opt_accessTokenProviderTarget 
 * @param {!angular.$http.Config=} opt_extraHttpRequestParams Extra HTTP parameters to send.
 * @return {!angular.$q.Promise<!API.Client.comAdobeGraniteDistributionCoreImplTransportAccessTokenDistribuInfo>}
 */
API.Client.ConfigmgrApi.prototype.comAdobeGraniteDistributionCoreImplTransportAccessTokenDistribu = function(opt_post, opt_apply, opt_delete, opt_action, opt_location, opt_propertylist, opt_name, opt_serviceName, opt_userId, opt_accessTokenProviderTarget, opt_extraHttpRequestParams) {
  /** @const {string} */
  var path = this.basePath_ + '/system/console/configMgr/com.adobe.granite.distribution.core.impl.transport.AccessTokenDistributionTransportSecretProvider';

  /** @type {!Object} */
  var queryParameters = {};

  /** @type {!Object} */
  var headerParams = angular.extend({}, this.defaultHeaders_);
  if (opt_post !== undefined) {
    queryParameters['post'] = opt_post;
  }

  if (opt_apply !== undefined) {
    queryParameters['apply'] = opt_apply;
  }

  if (opt_delete !== undefined) {
    queryParameters['delete'] = opt_delete;
  }

  if (opt_action !== undefined) {
    queryParameters['action'] = opt_action;
  }

  if (opt_location !== undefined) {
    queryParameters['$location'] = opt_location;
  }

  if (opt_propertylist !== undefined) {
    queryParameters['propertylist'] = opt_propertylist;
  }

  if (opt_name !== undefined) {
    queryParameters['name'] = opt_name;
  }

  if (opt_serviceName !== undefined) {
    queryParameters['serviceName'] = opt_serviceName;
  }

  if (opt_userId !== undefined) {
    queryParameters['userId'] = opt_userId;
  }

  if (opt_accessTokenProviderTarget !== undefined) {
    queryParameters['accessTokenProvider.target'] = opt_accessTokenProviderTarget;
  }

  /** @type {!Object} */
  var httpRequestParams = {
    method: 'POST',
    url: path,
    json: true,
            params: queryParameters,
    headers: headerParams
  };

  if (opt_extraHttpRequestParams) {
    httpRequestParams = angular.extend(httpRequestParams, opt_extraHttpRequestParams);
  }

  return (/** @type {?} */ (this.http_))(httpRequestParams);
}

/**
 * 
 * 
 * @param {!boolean=} opt_post 
 * @param {!boolean=} opt_apply 
 * @param {!boolean=} opt_delete 
 * @param {!string=} opt_action 
 * @param {!string=} opt_location 
 * @param {!Array<!string>=} opt_propertylist 
 * @param {!string=} opt_featureName 
 * @param {!string=} opt_featureDescription 
 * @param {!string=} opt_httpHeaderName 
 * @param {!string=} opt_httpHeaderValuepattern 
 * @param {!angular.$http.Config=} opt_extraHttpRequestParams Extra HTTP parameters to send.
 * @return {!angular.$q.Promise<!API.Client.comAdobeGraniteFragsImplCheckHttpHeaderFlagInfo>}
 */
API.Client.ConfigmgrApi.prototype.comAdobeGraniteFragsImplCheckHttpHeaderFlag = function(opt_post, opt_apply, opt_delete, opt_action, opt_location, opt_propertylist, opt_featureName, opt_featureDescription, opt_httpHeaderName, opt_httpHeaderValuepattern, opt_extraHttpRequestParams) {
  /** @const {string} */
  var path = this.basePath_ + '/system/console/configMgr/com.adobe.granite.frags.impl.CheckHttpHeaderFlag';

  /** @type {!Object} */
  var queryParameters = {};

  /** @type {!Object} */
  var headerParams = angular.extend({}, this.defaultHeaders_);
  if (opt_post !== undefined) {
    queryParameters['post'] = opt_post;
  }

  if (opt_apply !== undefined) {
    queryParameters['apply'] = opt_apply;
  }

  if (opt_delete !== undefined) {
    queryParameters['delete'] = opt_delete;
  }

  if (opt_action !== undefined) {
    queryParameters['action'] = opt_action;
  }

  if (opt_location !== undefined) {
    queryParameters['$location'] = opt_location;
  }

  if (opt_propertylist !== undefined) {
    queryParameters['propertylist'] = opt_propertylist;
  }

  if (opt_featureName !== undefined) {
    queryParameters['feature.name'] = opt_featureName;
  }

  if (opt_featureDescription !== undefined) {
    queryParameters['feature.description'] = opt_featureDescription;
  }

  if (opt_httpHeaderName !== undefined) {
    queryParameters['http.header.name'] = opt_httpHeaderName;
  }

  if (opt_httpHeaderValuepattern !== undefined) {
    queryParameters['http.header.valuepattern'] = opt_httpHeaderValuepattern;
  }

  /** @type {!Object} */
  var httpRequestParams = {
    method: 'POST',
    url: path,
    json: true,
            params: queryParameters,
    headers: headerParams
  };

  if (opt_extraHttpRequestParams) {
    httpRequestParams = angular.extend(httpRequestParams, opt_extraHttpRequestParams);
  }

  return (/** @type {?} */ (this.http_))(httpRequestParams);
}

/**
 * 
 * 
 * @param {!boolean=} opt_post 
 * @param {!boolean=} opt_apply 
 * @param {!boolean=} opt_delete 
 * @param {!string=} opt_action 
 * @param {!string=} opt_location 
 * @param {!Array<!string>=} opt_propertylist 
 * @param {!string=} opt_featureName 
 * @param {!string=} opt_featureDescription 
 * @param {!string=} opt_activePercentage 
 * @param {!string=} opt_cookieName 
 * @param {!number=} opt_cookieMaxAge 
 * @param {!angular.$http.Config=} opt_extraHttpRequestParams Extra HTTP parameters to send.
 * @return {!angular.$q.Promise<!API.Client.comAdobeGraniteFragsImplRandomFeatureInfo>}
 */
API.Client.ConfigmgrApi.prototype.comAdobeGraniteFragsImplRandomFeature = function(opt_post, opt_apply, opt_delete, opt_action, opt_location, opt_propertylist, opt_featureName, opt_featureDescription, opt_activePercentage, opt_cookieName, opt_cookieMaxAge, opt_extraHttpRequestParams) {
  /** @const {string} */
  var path = this.basePath_ + '/system/console/configMgr/com.adobe.granite.frags.impl.RandomFeature';

  /** @type {!Object} */
  var queryParameters = {};

  /** @type {!Object} */
  var headerParams = angular.extend({}, this.defaultHeaders_);
  if (opt_post !== undefined) {
    queryParameters['post'] = opt_post;
  }

  if (opt_apply !== undefined) {
    queryParameters['apply'] = opt_apply;
  }

  if (opt_delete !== undefined) {
    queryParameters['delete'] = opt_delete;
  }

  if (opt_action !== undefined) {
    queryParameters['action'] = opt_action;
  }

  if (opt_location !== undefined) {
    queryParameters['$location'] = opt_location;
  }

  if (opt_propertylist !== undefined) {
    queryParameters['propertylist'] = opt_propertylist;
  }

  if (opt_featureName !== undefined) {
    queryParameters['feature.name'] = opt_featureName;
  }

  if (opt_featureDescription !== undefined) {
    queryParameters['feature.description'] = opt_featureDescription;
  }

  if (opt_activePercentage !== undefined) {
    queryParameters['active.percentage'] = opt_activePercentage;
  }

  if (opt_cookieName !== undefined) {
    queryParameters['cookie.name'] = opt_cookieName;
  }

  if (opt_cookieMaxAge !== undefined) {
    queryParameters['cookie.maxAge'] = opt_cookieMaxAge;
  }

  /** @type {!Object} */
  var httpRequestParams = {
    method: 'POST',
    url: path,
    json: true,
            params: queryParameters,
    headers: headerParams
  };

  if (opt_extraHttpRequestParams) {
    httpRequestParams = angular.extend(httpRequestParams, opt_extraHttpRequestParams);
  }

  return (/** @type {?} */ (this.http_))(httpRequestParams);
}

/**
 * 
 * 
 * @param {!boolean=} opt_post 
 * @param {!boolean=} opt_apply 
 * @param {!boolean=} opt_delete 
 * @param {!string=} opt_action 
 * @param {!string=} opt_location 
 * @param {!Array<!string>=} opt_propertylist 
 * @param {!string=} opt_comAdobeGraniteHttpcacheFileDocumentRoot 
 * @param {!string=} opt_comAdobeGraniteHttpcacheFileIncludeHost 
 * @param {!angular.$http.Config=} opt_extraHttpRequestParams Extra HTTP parameters to send.
 * @return {!angular.$q.Promise<!API.Client.comAdobeGraniteHttpcacheFileFileCacheStoreInfo>}
 */
API.Client.ConfigmgrApi.prototype.comAdobeGraniteHttpcacheFileFileCacheStore = function(opt_post, opt_apply, opt_delete, opt_action, opt_location, opt_propertylist, opt_comAdobeGraniteHttpcacheFileDocumentRoot, opt_comAdobeGraniteHttpcacheFileIncludeHost, opt_extraHttpRequestParams) {
  /** @const {string} */
  var path = this.basePath_ + '/system/console/configMgr/com.adobe.granite.httpcache.file.FileCacheStore';

  /** @type {!Object} */
  var queryParameters = {};

  /** @type {!Object} */
  var headerParams = angular.extend({}, this.defaultHeaders_);
  if (opt_post !== undefined) {
    queryParameters['post'] = opt_post;
  }

  if (opt_apply !== undefined) {
    queryParameters['apply'] = opt_apply;
  }

  if (opt_delete !== undefined) {
    queryParameters['delete'] = opt_delete;
  }

  if (opt_action !== undefined) {
    queryParameters['action'] = opt_action;
  }

  if (opt_location !== undefined) {
    queryParameters['$location'] = opt_location;
  }

  if (opt_propertylist !== undefined) {
    queryParameters['propertylist'] = opt_propertylist;
  }

  if (opt_comAdobeGraniteHttpcacheFileDocumentRoot !== undefined) {
    queryParameters['com.adobe.granite.httpcache.file.documentRoot'] = opt_comAdobeGraniteHttpcacheFileDocumentRoot;
  }

  if (opt_comAdobeGraniteHttpcacheFileIncludeHost !== undefined) {
    queryParameters['com.adobe.granite.httpcache.file.includeHost'] = opt_comAdobeGraniteHttpcacheFileIncludeHost;
  }

  /** @type {!Object} */
  var httpRequestParams = {
    method: 'POST',
    url: path,
    json: true,
            params: queryParameters,
    headers: headerParams
  };

  if (opt_extraHttpRequestParams) {
    httpRequestParams = angular.extend(httpRequestParams, opt_extraHttpRequestParams);
  }

  return (/** @type {?} */ (this.http_))(httpRequestParams);
}

/**
 * 
 * 
 * @param {!boolean=} opt_post 
 * @param {!boolean=} opt_apply 
 * @param {!boolean=} opt_delete 
 * @param {!string=} opt_action 
 * @param {!string=} opt_location 
 * @param {!Array<!string>=} opt_propertylist 
 * @param {!Array<!string>=} opt_comAdobeGraniteHttpcacheUrlPaths 
 * @param {!angular.$http.Config=} opt_extraHttpRequestParams Extra HTTP parameters to send.
 * @return {!angular.$q.Promise<!API.Client.comAdobeGraniteHttpcacheImplOuterCacheFilterInfo>}
 */
API.Client.ConfigmgrApi.prototype.comAdobeGraniteHttpcacheImplOuterCacheFilter = function(opt_post, opt_apply, opt_delete, opt_action, opt_location, opt_propertylist, opt_comAdobeGraniteHttpcacheUrlPaths, opt_extraHttpRequestParams) {
  /** @const {string} */
  var path = this.basePath_ + '/system/console/configMgr/com.adobe.granite.httpcache.impl.OuterCacheFilter';

  /** @type {!Object} */
  var queryParameters = {};

  /** @type {!Object} */
  var headerParams = angular.extend({}, this.defaultHeaders_);
  if (opt_post !== undefined) {
    queryParameters['post'] = opt_post;
  }

  if (opt_apply !== undefined) {
    queryParameters['apply'] = opt_apply;
  }

  if (opt_delete !== undefined) {
    queryParameters['delete'] = opt_delete;
  }

  if (opt_action !== undefined) {
    queryParameters['action'] = opt_action;
  }

  if (opt_location !== undefined) {
    queryParameters['$location'] = opt_location;
  }

  if (opt_propertylist !== undefined) {
    queryParameters['propertylist'] = opt_propertylist;
  }

  if (opt_comAdobeGraniteHttpcacheUrlPaths !== undefined) {
    queryParameters['com.adobe.granite.httpcache.url.paths'] = opt_comAdobeGraniteHttpcacheUrlPaths;
  }

  /** @type {!Object} */
  var httpRequestParams = {
    method: 'POST',
    url: path,
    json: true,
            params: queryParameters,
    headers: headerParams
  };

  if (opt_extraHttpRequestParams) {
    httpRequestParams = angular.extend(httpRequestParams, opt_extraHttpRequestParams);
  }

  return (/** @type {?} */ (this.http_))(httpRequestParams);
}

/**
 * 
 * 
 * @param {!boolean=} opt_post 
 * @param {!boolean=} opt_apply 
 * @param {!boolean=} opt_delete 
 * @param {!string=} opt_action 
 * @param {!string=} opt_location 
 * @param {!Array<!string>=} opt_propertylist 
 * @param {!Array<!string>=} opt_pseudoPatterns 
 * @param {!angular.$http.Config=} opt_extraHttpRequestParams Extra HTTP parameters to send.
 * @return {!angular.$q.Promise<!API.Client.comAdobeGraniteI18nImplBundlePseudoTranslationsInfo>}
 */
API.Client.ConfigmgrApi.prototype.comAdobeGraniteI18nImplBundlePseudoTranslations = function(opt_post, opt_apply, opt_delete, opt_action, opt_location, opt_propertylist, opt_pseudoPatterns, opt_extraHttpRequestParams) {
  /** @const {string} */
  var path = this.basePath_ + '/system/console/configMgr/com.adobe.granite.i18n.impl.bundle.PseudoTranslations';

  /** @type {!Object} */
  var queryParameters = {};

  /** @type {!Object} */
  var headerParams = angular.extend({}, this.defaultHeaders_);
  if (opt_post !== undefined) {
    queryParameters['post'] = opt_post;
  }

  if (opt_apply !== undefined) {
    queryParameters['apply'] = opt_apply;
  }

  if (opt_delete !== undefined) {
    queryParameters['delete'] = opt_delete;
  }

  if (opt_action !== undefined) {
    queryParameters['action'] = opt_action;
  }

  if (opt_location !== undefined) {
    queryParameters['$location'] = opt_location;
  }

  if (opt_propertylist !== undefined) {
    queryParameters['propertylist'] = opt_propertylist;
  }

  if (opt_pseudoPatterns !== undefined) {
    queryParameters['pseudo.patterns'] = opt_pseudoPatterns;
  }

  /** @type {!Object} */
  var httpRequestParams = {
    method: 'POST',
    url: path,
    json: true,
            params: queryParameters,
    headers: headerParams
  };

  if (opt_extraHttpRequestParams) {
    httpRequestParams = angular.extend(httpRequestParams, opt_extraHttpRequestParams);
  }

  return (/** @type {?} */ (this.http_))(httpRequestParams);
}

/**
 * 
 * 
 * @param {!boolean=} opt_post 
 * @param {!boolean=} opt_apply 
 * @param {!boolean=} opt_delete 
 * @param {!string=} opt_action 
 * @param {!string=} opt_location 
 * @param {!Array<!string>=} opt_propertylist 
 * @param {!string=} opt_securityPreferencesName 
 * @param {!angular.$http.Config=} opt_extraHttpRequestParams Extra HTTP parameters to send.
 * @return {!angular.$q.Promise<!API.Client.comAdobeGraniteI18nImplPreferencesLocaleResolverServiceInfo>}
 */
API.Client.ConfigmgrApi.prototype.comAdobeGraniteI18nImplPreferencesLocaleResolverService = function(opt_post, opt_apply, opt_delete, opt_action, opt_location, opt_propertylist, opt_securityPreferencesName, opt_extraHttpRequestParams) {
  /** @const {string} */
  var path = this.basePath_ + '/system/console/configMgr/com.adobe.granite.i18n.impl.PreferencesLocaleResolverService';

  /** @type {!Object} */
  var queryParameters = {};

  /** @type {!Object} */
  var headerParams = angular.extend({}, this.defaultHeaders_);
  if (opt_post !== undefined) {
    queryParameters['post'] = opt_post;
  }

  if (opt_apply !== undefined) {
    queryParameters['apply'] = opt_apply;
  }

  if (opt_delete !== undefined) {
    queryParameters['delete'] = opt_delete;
  }

  if (opt_action !== undefined) {
    queryParameters['action'] = opt_action;
  }

  if (opt_location !== undefined) {
    queryParameters['$location'] = opt_location;
  }

  if (opt_propertylist !== undefined) {
    queryParameters['propertylist'] = opt_propertylist;
  }

  if (opt_securityPreferencesName !== undefined) {
    queryParameters['security.preferences.name'] = opt_securityPreferencesName;
  }

  /** @type {!Object} */
  var httpRequestParams = {
    method: 'POST',
    url: path,
    json: true,
            params: queryParameters,
    headers: headerParams
  };

  if (opt_extraHttpRequestParams) {
    httpRequestParams = angular.extend(httpRequestParams, opt_extraHttpRequestParams);
  }

  return (/** @type {?} */ (this.http_))(httpRequestParams);
}

/**
 * 
 * 
 * @param {!boolean=} opt_post 
 * @param {!boolean=} opt_apply 
 * @param {!boolean=} opt_delete 
 * @param {!string=} opt_action 
 * @param {!string=} opt_location 
 * @param {!Array<!string>=} opt_propertylist 
 * @param {!boolean=} opt_graniteInfocollectorIncludeThreadDumps 
 * @param {!boolean=} opt_graniteInfocollectorIncludeHeapDump 
 * @param {!angular.$http.Config=} opt_extraHttpRequestParams Extra HTTP parameters to send.
 * @return {!angular.$q.Promise<!API.Client.comAdobeGraniteInfocollectorInfoCollectorInfo>}
 */
API.Client.ConfigmgrApi.prototype.comAdobeGraniteInfocollectorInfoCollector = function(opt_post, opt_apply, opt_delete, opt_action, opt_location, opt_propertylist, opt_graniteInfocollectorIncludeThreadDumps, opt_graniteInfocollectorIncludeHeapDump, opt_extraHttpRequestParams) {
  /** @const {string} */
  var path = this.basePath_ + '/system/console/configMgr/com.adobe.granite.infocollector.InfoCollector';

  /** @type {!Object} */
  var queryParameters = {};

  /** @type {!Object} */
  var headerParams = angular.extend({}, this.defaultHeaders_);
  if (opt_post !== undefined) {
    queryParameters['post'] = opt_post;
  }

  if (opt_apply !== undefined) {
    queryParameters['apply'] = opt_apply;
  }

  if (opt_delete !== undefined) {
    queryParameters['delete'] = opt_delete;
  }

  if (opt_action !== undefined) {
    queryParameters['action'] = opt_action;
  }

  if (opt_location !== undefined) {
    queryParameters['$location'] = opt_location;
  }

  if (opt_propertylist !== undefined) {
    queryParameters['propertylist'] = opt_propertylist;
  }

  if (opt_graniteInfocollectorIncludeThreadDumps !== undefined) {
    queryParameters['granite.infocollector.includeThreadDumps'] = opt_graniteInfocollectorIncludeThreadDumps;
  }

  if (opt_graniteInfocollectorIncludeHeapDump !== undefined) {
    queryParameters['granite.infocollector.includeHeapDump'] = opt_graniteInfocollectorIncludeHeapDump;
  }

  /** @type {!Object} */
  var httpRequestParams = {
    method: 'POST',
    url: path,
    json: true,
            params: queryParameters,
    headers: headerParams
  };

  if (opt_extraHttpRequestParams) {
    httpRequestParams = angular.extend(httpRequestParams, opt_extraHttpRequestParams);
  }

  return (/** @type {?} */ (this.http_))(httpRequestParams);
}

/**
 * 
 * 
 * @param {!boolean=} opt_post 
 * @param {!boolean=} opt_apply 
 * @param {!boolean=} opt_delete 
 * @param {!string=} opt_action 
 * @param {!string=} opt_location 
 * @param {!Array<!string>=} opt_propertylist 
 * @param {!number=} opt_comAdobeGraniteJettySslPort 
 * @param {!string=} opt_comAdobeGraniteJettySslKeystoreUser 
 * @param {!string=} opt_comAdobeGraniteJettySslKeystorePassword 
 * @param {!Array<!string>=} opt_comAdobeGraniteJettySslCiphersuitesExcluded 
 * @param {!Array<!string>=} opt_comAdobeGraniteJettySslCiphersuitesIncluded 
 * @param {!string=} opt_comAdobeGraniteJettySslClientCertificate 
 * @param {!angular.$http.Config=} opt_extraHttpRequestParams Extra HTTP parameters to send.
 * @return {!angular.$q.Promise<!API.Client.comAdobeGraniteJettySslInternalGraniteSslConnectorFactoryInfo>}
 */
API.Client.ConfigmgrApi.prototype.comAdobeGraniteJettySslInternalGraniteSslConnectorFactory = function(opt_post, opt_apply, opt_delete, opt_action, opt_location, opt_propertylist, opt_comAdobeGraniteJettySslPort, opt_comAdobeGraniteJettySslKeystoreUser, opt_comAdobeGraniteJettySslKeystorePassword, opt_comAdobeGraniteJettySslCiphersuitesExcluded, opt_comAdobeGraniteJettySslCiphersuitesIncluded, opt_comAdobeGraniteJettySslClientCertificate, opt_extraHttpRequestParams) {
  /** @const {string} */
  var path = this.basePath_ + '/system/console/configMgr/com.adobe.granite.jetty.ssl.internal.GraniteSslConnectorFactory';

  /** @type {!Object} */
  var queryParameters = {};

  /** @type {!Object} */
  var headerParams = angular.extend({}, this.defaultHeaders_);
  if (opt_post !== undefined) {
    queryParameters['post'] = opt_post;
  }

  if (opt_apply !== undefined) {
    queryParameters['apply'] = opt_apply;
  }

  if (opt_delete !== undefined) {
    queryParameters['delete'] = opt_delete;
  }

  if (opt_action !== undefined) {
    queryParameters['action'] = opt_action;
  }

  if (opt_location !== undefined) {
    queryParameters['$location'] = opt_location;
  }

  if (opt_propertylist !== undefined) {
    queryParameters['propertylist'] = opt_propertylist;
  }

  if (opt_comAdobeGraniteJettySslPort !== undefined) {
    queryParameters['com.adobe.granite.jetty.ssl.port'] = opt_comAdobeGraniteJettySslPort;
  }

  if (opt_comAdobeGraniteJettySslKeystoreUser !== undefined) {
    queryParameters['com.adobe.granite.jetty.ssl.keystore.user'] = opt_comAdobeGraniteJettySslKeystoreUser;
  }

  if (opt_comAdobeGraniteJettySslKeystorePassword !== undefined) {
    queryParameters['com.adobe.granite.jetty.ssl.keystore.password'] = opt_comAdobeGraniteJettySslKeystorePassword;
  }

  if (opt_comAdobeGraniteJettySslCiphersuitesExcluded !== undefined) {
    queryParameters['com.adobe.granite.jetty.ssl.ciphersuites.excluded'] = opt_comAdobeGraniteJettySslCiphersuitesExcluded;
  }

  if (opt_comAdobeGraniteJettySslCiphersuitesIncluded !== undefined) {
    queryParameters['com.adobe.granite.jetty.ssl.ciphersuites.included'] = opt_comAdobeGraniteJettySslCiphersuitesIncluded;
  }

  if (opt_comAdobeGraniteJettySslClientCertificate !== undefined) {
    queryParameters['com.adobe.granite.jetty.ssl.client.certificate'] = opt_comAdobeGraniteJettySslClientCertificate;
  }

  /** @type {!Object} */
  var httpRequestParams = {
    method: 'POST',
    url: path,
    json: true,
            params: queryParameters,
    headers: headerParams
  };

  if (opt_extraHttpRequestParams) {
    httpRequestParams = angular.extend(httpRequestParams, opt_extraHttpRequestParams);
  }

  return (/** @type {?} */ (this.http_))(httpRequestParams);
}

/**
 * 
 * 
 * @param {!boolean=} opt_post 
 * @param {!boolean=} opt_apply 
 * @param {!boolean=} opt_delete 
 * @param {!string=} opt_action 
 * @param {!string=} opt_location 
 * @param {!Array<!string>=} opt_propertylist 
 * @param {!number=} opt_checkInternval 
 * @param {!Array<!string>=} opt_excludeIds 
 * @param {!boolean=} opt_encryptPing 
 * @param {!angular.$http.Config=} opt_extraHttpRequestParams Extra HTTP parameters to send.
 * @return {!angular.$q.Promise<!API.Client.comAdobeGraniteLicenseImplLicenseCheckFilterInfo>}
 */
API.Client.ConfigmgrApi.prototype.comAdobeGraniteLicenseImplLicenseCheckFilter = function(opt_post, opt_apply, opt_delete, opt_action, opt_location, opt_propertylist, opt_checkInternval, opt_excludeIds, opt_encryptPing, opt_extraHttpRequestParams) {
  /** @const {string} */
  var path = this.basePath_ + '/system/console/configMgr/com.adobe.granite.license.impl.LicenseCheckFilter';

  /** @type {!Object} */
  var queryParameters = {};

  /** @type {!Object} */
  var headerParams = angular.extend({}, this.defaultHeaders_);
  if (opt_post !== undefined) {
    queryParameters['post'] = opt_post;
  }

  if (opt_apply !== undefined) {
    queryParameters['apply'] = opt_apply;
  }

  if (opt_delete !== undefined) {
    queryParameters['delete'] = opt_delete;
  }

  if (opt_action !== undefined) {
    queryParameters['action'] = opt_action;
  }

  if (opt_location !== undefined) {
    queryParameters['$location'] = opt_location;
  }

  if (opt_propertylist !== undefined) {
    queryParameters['propertylist'] = opt_propertylist;
  }

  if (opt_checkInternval !== undefined) {
    queryParameters['checkInternval'] = opt_checkInternval;
  }

  if (opt_excludeIds !== undefined) {
    queryParameters['excludeIds'] = opt_excludeIds;
  }

  if (opt_encryptPing !== undefined) {
    queryParameters['encryptPing'] = opt_encryptPing;
  }

  /** @type {!Object} */
  var httpRequestParams = {
    method: 'POST',
    url: path,
    json: true,
            params: queryParameters,
    headers: headerParams
  };

  if (opt_extraHttpRequestParams) {
    httpRequestParams = angular.extend(httpRequestParams, opt_extraHttpRequestParams);
  }

  return (/** @type {?} */ (this.http_))(httpRequestParams);
}

/**
 * 
 * 
 * @param {!boolean=} opt_post 
 * @param {!boolean=} opt_apply 
 * @param {!boolean=} opt_delete 
 * @param {!string=} opt_action 
 * @param {!string=} opt_location 
 * @param {!Array<!string>=} opt_propertylist 
 * @param {!number=} opt_messagesQueueSize 
 * @param {!Array<!string>=} opt_loggerConfig 
 * @param {!number=} opt_messagesSize 
 * @param {!angular.$http.Config=} opt_extraHttpRequestParams Extra HTTP parameters to send.
 * @return {!angular.$q.Promise<!API.Client.comAdobeGraniteLoggingImplLogAnalyserImplInfo>}
 */
API.Client.ConfigmgrApi.prototype.comAdobeGraniteLoggingImplLogAnalyserImpl = function(opt_post, opt_apply, opt_delete, opt_action, opt_location, opt_propertylist, opt_messagesQueueSize, opt_loggerConfig, opt_messagesSize, opt_extraHttpRequestParams) {
  /** @const {string} */
  var path = this.basePath_ + '/system/console/configMgr/com.adobe.granite.logging.impl.LogAnalyserImpl';

  /** @type {!Object} */
  var queryParameters = {};

  /** @type {!Object} */
  var headerParams = angular.extend({}, this.defaultHeaders_);
  if (opt_post !== undefined) {
    queryParameters['post'] = opt_post;
  }

  if (opt_apply !== undefined) {
    queryParameters['apply'] = opt_apply;
  }

  if (opt_delete !== undefined) {
    queryParameters['delete'] = opt_delete;
  }

  if (opt_action !== undefined) {
    queryParameters['action'] = opt_action;
  }

  if (opt_location !== undefined) {
    queryParameters['$location'] = opt_location;
  }

  if (opt_propertylist !== undefined) {
    queryParameters['propertylist'] = opt_propertylist;
  }

  if (opt_messagesQueueSize !== undefined) {
    queryParameters['messages.queue.size'] = opt_messagesQueueSize;
  }

  if (opt_loggerConfig !== undefined) {
    queryParameters['logger.config'] = opt_loggerConfig;
  }

  if (opt_messagesSize !== undefined) {
    queryParameters['messages.size'] = opt_messagesSize;
  }

  /** @type {!Object} */
  var httpRequestParams = {
    method: 'POST',
    url: path,
    json: true,
            params: queryParameters,
    headers: headerParams
  };

  if (opt_extraHttpRequestParams) {
    httpRequestParams = angular.extend(httpRequestParams, opt_extraHttpRequestParams);
  }

  return (/** @type {?} */ (this.http_))(httpRequestParams);
}

/**
 * 
 * 
 * @param {!boolean=} opt_post 
 * @param {!boolean=} opt_apply 
 * @param {!boolean=} opt_delete 
 * @param {!string=} opt_action 
 * @param {!string=} opt_location 
 * @param {!Array<!string>=} opt_propertylist 
 * @param {!Array<!string>=} opt_hcTags 
 * @param {!angular.$http.Config=} opt_extraHttpRequestParams Extra HTTP parameters to send.
 * @return {!angular.$q.Promise<!API.Client.comAdobeGraniteLoggingImplLogErrorHealthCheckInfo>}
 */
API.Client.ConfigmgrApi.prototype.comAdobeGraniteLoggingImplLogErrorHealthCheck = function(opt_post, opt_apply, opt_delete, opt_action, opt_location, opt_propertylist, opt_hcTags, opt_extraHttpRequestParams) {
  /** @const {string} */
  var path = this.basePath_ + '/system/console/configMgr/com.adobe.granite.logging.impl.LogErrorHealthCheck';

  /** @type {!Object} */
  var queryParameters = {};

  /** @type {!Object} */
  var headerParams = angular.extend({}, this.defaultHeaders_);
  if (opt_post !== undefined) {
    queryParameters['post'] = opt_post;
  }

  if (opt_apply !== undefined) {
    queryParameters['apply'] = opt_apply;
  }

  if (opt_delete !== undefined) {
    queryParameters['delete'] = opt_delete;
  }

  if (opt_action !== undefined) {
    queryParameters['action'] = opt_action;
  }

  if (opt_location !== undefined) {
    queryParameters['$location'] = opt_location;
  }

  if (opt_propertylist !== undefined) {
    queryParameters['propertylist'] = opt_propertylist;
  }

  if (opt_hcTags !== undefined) {
    queryParameters['hc.tags'] = opt_hcTags;
  }

  /** @type {!Object} */
  var httpRequestParams = {
    method: 'POST',
    url: path,
    json: true,
            params: queryParameters,
    headers: headerParams
  };

  if (opt_extraHttpRequestParams) {
    httpRequestParams = angular.extend(httpRequestParams, opt_extraHttpRequestParams);
  }

  return (/** @type {?} */ (this.http_))(httpRequestParams);
}

/**
 * 
 * 
 * @param {!boolean=} opt_post 
 * @param {!boolean=} opt_apply 
 * @param {!boolean=} opt_delete 
 * @param {!string=} opt_action 
 * @param {!string=} opt_location 
 * @param {!Array<!string>=} opt_propertylist 
 * @param {!boolean=} opt_graniteMaintenanceMandatory 
 * @param {!string=} opt_jobTopics 
 * @param {!angular.$http.Config=} opt_extraHttpRequestParams Extra HTTP parameters to send.
 * @return {!angular.$q.Promise<!API.Client.comAdobeGraniteMaintenanceCrxImplDataStoreGarbageCollectionTaskInfo>}
 */
API.Client.ConfigmgrApi.prototype.comAdobeGraniteMaintenanceCrxImplDataStoreGarbageCollectionTask = function(opt_post, opt_apply, opt_delete, opt_action, opt_location, opt_propertylist, opt_graniteMaintenanceMandatory, opt_jobTopics, opt_extraHttpRequestParams) {
  /** @const {string} */
  var path = this.basePath_ + '/system/console/configMgr/com.adobe.granite.maintenance.crx.impl.DataStoreGarbageCollectionTask';

  /** @type {!Object} */
  var queryParameters = {};

  /** @type {!Object} */
  var headerParams = angular.extend({}, this.defaultHeaders_);
  if (opt_post !== undefined) {
    queryParameters['post'] = opt_post;
  }

  if (opt_apply !== undefined) {
    queryParameters['apply'] = opt_apply;
  }

  if (opt_delete !== undefined) {
    queryParameters['delete'] = opt_delete;
  }

  if (opt_action !== undefined) {
    queryParameters['action'] = opt_action;
  }

  if (opt_location !== undefined) {
    queryParameters['$location'] = opt_location;
  }

  if (opt_propertylist !== undefined) {
    queryParameters['propertylist'] = opt_propertylist;
  }

  if (opt_graniteMaintenanceMandatory !== undefined) {
    queryParameters['granite.maintenance.mandatory'] = opt_graniteMaintenanceMandatory;
  }

  if (opt_jobTopics !== undefined) {
    queryParameters['job.topics'] = opt_jobTopics;
  }

  /** @type {!Object} */
  var httpRequestParams = {
    method: 'POST',
    url: path,
    json: true,
            params: queryParameters,
    headers: headerParams
  };

  if (opt_extraHttpRequestParams) {
    httpRequestParams = angular.extend(httpRequestParams, opt_extraHttpRequestParams);
  }

  return (/** @type {?} */ (this.http_))(httpRequestParams);
}

/**
 * 
 * 
 * @param {!boolean=} opt_post 
 * @param {!boolean=} opt_apply 
 * @param {!boolean=} opt_delete 
 * @param {!string=} opt_action 
 * @param {!string=} opt_location 
 * @param {!Array<!string>=} opt_propertylist 
 * @param {!string=} opt_jobTopics 
 * @param {!angular.$http.Config=} opt_extraHttpRequestParams Extra HTTP parameters to send.
 * @return {!angular.$q.Promise<!API.Client.comAdobeGraniteMaintenanceCrxImplLuceneBinariesCleanupTaskInfo>}
 */
API.Client.ConfigmgrApi.prototype.comAdobeGraniteMaintenanceCrxImplLuceneBinariesCleanupTask = function(opt_post, opt_apply, opt_delete, opt_action, opt_location, opt_propertylist, opt_jobTopics, opt_extraHttpRequestParams) {
  /** @const {string} */
  var path = this.basePath_ + '/system/console/configMgr/com.adobe.granite.maintenance.crx.impl.LuceneBinariesCleanupTask';

  /** @type {!Object} */
  var queryParameters = {};

  /** @type {!Object} */
  var headerParams = angular.extend({}, this.defaultHeaders_);
  if (opt_post !== undefined) {
    queryParameters['post'] = opt_post;
  }

  if (opt_apply !== undefined) {
    queryParameters['apply'] = opt_apply;
  }

  if (opt_delete !== undefined) {
    queryParameters['delete'] = opt_delete;
  }

  if (opt_action !== undefined) {
    queryParameters['action'] = opt_action;
  }

  if (opt_location !== undefined) {
    queryParameters['$location'] = opt_location;
  }

  if (opt_propertylist !== undefined) {
    queryParameters['propertylist'] = opt_propertylist;
  }

  if (opt_jobTopics !== undefined) {
    queryParameters['job.topics'] = opt_jobTopics;
  }

  /** @type {!Object} */
  var httpRequestParams = {
    method: 'POST',
    url: path,
    json: true,
            params: queryParameters,
    headers: headerParams
  };

  if (opt_extraHttpRequestParams) {
    httpRequestParams = angular.extend(httpRequestParams, opt_extraHttpRequestParams);
  }

  return (/** @type {?} */ (this.http_))(httpRequestParams);
}

/**
 * 
 * 
 * @param {!boolean=} opt_post 
 * @param {!boolean=} opt_apply 
 * @param {!boolean=} opt_delete 
 * @param {!string=} opt_action 
 * @param {!string=} opt_location 
 * @param {!Array<!string>=} opt_propertylist 
 * @param {!Array<!string>=} opt_fullGcDays 
 * @param {!angular.$http.Config=} opt_extraHttpRequestParams Extra HTTP parameters to send.
 * @return {!angular.$q.Promise<!API.Client.comAdobeGraniteMaintenanceCrxImplRevisionCleanupTaskInfo>}
 */
API.Client.ConfigmgrApi.prototype.comAdobeGraniteMaintenanceCrxImplRevisionCleanupTask = function(opt_post, opt_apply, opt_delete, opt_action, opt_location, opt_propertylist, opt_fullGcDays, opt_extraHttpRequestParams) {
  /** @const {string} */
  var path = this.basePath_ + '/system/console/configMgr/com.adobe.granite.maintenance.crx.impl.RevisionCleanupTask';

  /** @type {!Object} */
  var queryParameters = {};

  /** @type {!Object} */
  var headerParams = angular.extend({}, this.defaultHeaders_);
  if (opt_post !== undefined) {
    queryParameters['post'] = opt_post;
  }

  if (opt_apply !== undefined) {
    queryParameters['apply'] = opt_apply;
  }

  if (opt_delete !== undefined) {
    queryParameters['delete'] = opt_delete;
  }

  if (opt_action !== undefined) {
    queryParameters['action'] = opt_action;
  }

  if (opt_location !== undefined) {
    queryParameters['$location'] = opt_location;
  }

  if (opt_propertylist !== undefined) {
    queryParameters['propertylist'] = opt_propertylist;
  }

  if (opt_fullGcDays !== undefined) {
    queryParameters['full.gc.days'] = opt_fullGcDays;
  }

  /** @type {!Object} */
  var httpRequestParams = {
    method: 'POST',
    url: path,
    json: true,
            params: queryParameters,
    headers: headerParams
  };

  if (opt_extraHttpRequestParams) {
    httpRequestParams = angular.extend(httpRequestParams, opt_extraHttpRequestParams);
  }

  return (/** @type {?} */ (this.http_))(httpRequestParams);
}

/**
 * 
 * 
 * @param {!boolean=} opt_post 
 * @param {!boolean=} opt_apply 
 * @param {!boolean=} opt_delete 
 * @param {!string=} opt_action 
 * @param {!string=} opt_location 
 * @param {!Array<!string>=} opt_propertylist 
 * @param {!string=} opt_scriptFilename 
 * @param {!string=} opt_scriptDisplay 
 * @param {!string=} opt_scriptPath 
 * @param {!Array<!string>=} opt_scriptPlatform 
 * @param {!number=} opt_interval 
 * @param {!string=} opt_jmxdomain 
 * @param {!angular.$http.Config=} opt_extraHttpRequestParams Extra HTTP parameters to send.
 * @return {!angular.$q.Promise<!API.Client.comAdobeGraniteMonitoringImplScriptConfigImplInfo>}
 */
API.Client.ConfigmgrApi.prototype.comAdobeGraniteMonitoringImplScriptConfigImpl = function(opt_post, opt_apply, opt_delete, opt_action, opt_location, opt_propertylist, opt_scriptFilename, opt_scriptDisplay, opt_scriptPath, opt_scriptPlatform, opt_interval, opt_jmxdomain, opt_extraHttpRequestParams) {
  /** @const {string} */
  var path = this.basePath_ + '/system/console/configMgr/com.adobe.granite.monitoring.impl.ScriptConfigImpl';

  /** @type {!Object} */
  var queryParameters = {};

  /** @type {!Object} */
  var headerParams = angular.extend({}, this.defaultHeaders_);
  if (opt_post !== undefined) {
    queryParameters['post'] = opt_post;
  }

  if (opt_apply !== undefined) {
    queryParameters['apply'] = opt_apply;
  }

  if (opt_delete !== undefined) {
    queryParameters['delete'] = opt_delete;
  }

  if (opt_action !== undefined) {
    queryParameters['action'] = opt_action;
  }

  if (opt_location !== undefined) {
    queryParameters['$location'] = opt_location;
  }

  if (opt_propertylist !== undefined) {
    queryParameters['propertylist'] = opt_propertylist;
  }

  if (opt_scriptFilename !== undefined) {
    queryParameters['script.filename'] = opt_scriptFilename;
  }

  if (opt_scriptDisplay !== undefined) {
    queryParameters['script.display'] = opt_scriptDisplay;
  }

  if (opt_scriptPath !== undefined) {
    queryParameters['script.path'] = opt_scriptPath;
  }

  if (opt_scriptPlatform !== undefined) {
    queryParameters['script.platform'] = opt_scriptPlatform;
  }

  if (opt_interval !== undefined) {
    queryParameters['interval'] = opt_interval;
  }

  if (opt_jmxdomain !== undefined) {
    queryParameters['jmxdomain'] = opt_jmxdomain;
  }

  /** @type {!Object} */
  var httpRequestParams = {
    method: 'POST',
    url: path,
    json: true,
            params: queryParameters,
    headers: headerParams
  };

  if (opt_extraHttpRequestParams) {
    httpRequestParams = angular.extend(httpRequestParams, opt_extraHttpRequestParams);
  }

  return (/** @type {?} */ (this.http_))(httpRequestParams);
}

/**
 * 
 * 
 * @param {!boolean=} opt_post 
 * @param {!boolean=} opt_apply 
 * @param {!boolean=} opt_delete 
 * @param {!string=} opt_action 
 * @param {!string=} opt_location 
 * @param {!Array<!string>=} opt_propertylist 
 * @param {!string=} opt_path 
 * @param {!string=} opt_jaasControlFlag 
 * @param {!string=} opt_jaasRealmName 
 * @param {!number=} opt_jaasRanking 
 * @param {!boolean=} opt_oauthOfflineValidation 
 * @param {!angular.$http.Config=} opt_extraHttpRequestParams Extra HTTP parameters to send.
 * @return {!angular.$q.Promise<!API.Client.comAdobeGraniteOauthServerAuthImplOAuth2ServerAuthenticationHanInfo>}
 */
API.Client.ConfigmgrApi.prototype.comAdobeGraniteOauthServerAuthImplOAuth2ServerAuthenticationHan = function(opt_post, opt_apply, opt_delete, opt_action, opt_location, opt_propertylist, opt_path, opt_jaasControlFlag, opt_jaasRealmName, opt_jaasRanking, opt_oauthOfflineValidation, opt_extraHttpRequestParams) {
  /** @const {string} */
  var path = this.basePath_ + '/system/console/configMgr/com.adobe.granite.oauth.server.auth.impl.OAuth2ServerAuthenticationHandler';

  /** @type {!Object} */
  var queryParameters = {};

  /** @type {!Object} */
  var headerParams = angular.extend({}, this.defaultHeaders_);
  if (opt_post !== undefined) {
    queryParameters['post'] = opt_post;
  }

  if (opt_apply !== undefined) {
    queryParameters['apply'] = opt_apply;
  }

  if (opt_delete !== undefined) {
    queryParameters['delete'] = opt_delete;
  }

  if (opt_action !== undefined) {
    queryParameters['action'] = opt_action;
  }

  if (opt_location !== undefined) {
    queryParameters['$location'] = opt_location;
  }

  if (opt_propertylist !== undefined) {
    queryParameters['propertylist'] = opt_propertylist;
  }

  if (opt_path !== undefined) {
    queryParameters['path'] = opt_path;
  }

  if (opt_jaasControlFlag !== undefined) {
    queryParameters['jaas.controlFlag'] = opt_jaasControlFlag;
  }

  if (opt_jaasRealmName !== undefined) {
    queryParameters['jaas.realmName'] = opt_jaasRealmName;
  }

  if (opt_jaasRanking !== undefined) {
    queryParameters['jaas.ranking'] = opt_jaasRanking;
  }

  if (opt_oauthOfflineValidation !== undefined) {
    queryParameters['oauth.offline.validation'] = opt_oauthOfflineValidation;
  }

  /** @type {!Object} */
  var httpRequestParams = {
    method: 'POST',
    url: path,
    json: true,
            params: queryParameters,
    headers: headerParams
  };

  if (opt_extraHttpRequestParams) {
    httpRequestParams = angular.extend(httpRequestParams, opt_extraHttpRequestParams);
  }

  return (/** @type {?} */ (this.http_))(httpRequestParams);
}

/**
 * 
 * 
 * @param {!boolean=} opt_post 
 * @param {!boolean=} opt_apply 
 * @param {!boolean=} opt_delete 
 * @param {!string=} opt_action 
 * @param {!string=} opt_location 
 * @param {!Array<!string>=} opt_propertylist 
 * @param {!string=} opt_schedulerExpression 
 * @param {!angular.$http.Config=} opt_extraHttpRequestParams Extra HTTP parameters to send.
 * @return {!angular.$q.Promise<!API.Client.comAdobeGraniteOauthServerImplAccessTokenCleanupTaskInfo>}
 */
API.Client.ConfigmgrApi.prototype.comAdobeGraniteOauthServerImplAccessTokenCleanupTask = function(opt_post, opt_apply, opt_delete, opt_action, opt_location, opt_propertylist, opt_schedulerExpression, opt_extraHttpRequestParams) {
  /** @const {string} */
  var path = this.basePath_ + '/system/console/configMgr/com.adobe.granite.oauth.server.impl.AccessTokenCleanupTask';

  /** @type {!Object} */
  var queryParameters = {};

  /** @type {!Object} */
  var headerParams = angular.extend({}, this.defaultHeaders_);
  if (opt_post !== undefined) {
    queryParameters['post'] = opt_post;
  }

  if (opt_apply !== undefined) {
    queryParameters['apply'] = opt_apply;
  }

  if (opt_delete !== undefined) {
    queryParameters['delete'] = opt_delete;
  }

  if (opt_action !== undefined) {
    queryParameters['action'] = opt_action;
  }

  if (opt_location !== undefined) {
    queryParameters['$location'] = opt_location;
  }

  if (opt_propertylist !== undefined) {
    queryParameters['propertylist'] = opt_propertylist;
  }

  if (opt_schedulerExpression !== undefined) {
    queryParameters['scheduler.expression'] = opt_schedulerExpression;
  }

  /** @type {!Object} */
  var httpRequestParams = {
    method: 'POST',
    url: path,
    json: true,
            params: queryParameters,
    headers: headerParams
  };

  if (opt_extraHttpRequestParams) {
    httpRequestParams = angular.extend(httpRequestParams, opt_extraHttpRequestParams);
  }

  return (/** @type {?} */ (this.http_))(httpRequestParams);
}

/**
 * 
 * 
 * @param {!boolean=} opt_post 
 * @param {!boolean=} opt_apply 
 * @param {!boolean=} opt_delete 
 * @param {!string=} opt_action 
 * @param {!string=} opt_location 
 * @param {!Array<!string>=} opt_propertylist 
 * @param {!boolean=} opt_oauthClientRevocationActive 
 * @param {!angular.$http.Config=} opt_extraHttpRequestParams Extra HTTP parameters to send.
 * @return {!angular.$q.Promise<!API.Client.comAdobeGraniteOauthServerImplOAuth2ClientRevocationServletInfo>}
 */
API.Client.ConfigmgrApi.prototype.comAdobeGraniteOauthServerImplOAuth2ClientRevocationServlet = function(opt_post, opt_apply, opt_delete, opt_action, opt_location, opt_propertylist, opt_oauthClientRevocationActive, opt_extraHttpRequestParams) {
  /** @const {string} */
  var path = this.basePath_ + '/system/console/configMgr/com.adobe.granite.oauth.server.impl.OAuth2ClientRevocationServlet';

  /** @type {!Object} */
  var queryParameters = {};

  /** @type {!Object} */
  var headerParams = angular.extend({}, this.defaultHeaders_);
  if (opt_post !== undefined) {
    queryParameters['post'] = opt_post;
  }

  if (opt_apply !== undefined) {
    queryParameters['apply'] = opt_apply;
  }

  if (opt_delete !== undefined) {
    queryParameters['delete'] = opt_delete;
  }

  if (opt_action !== undefined) {
    queryParameters['action'] = opt_action;
  }

  if (opt_location !== undefined) {
    queryParameters['$location'] = opt_location;
  }

  if (opt_propertylist !== undefined) {
    queryParameters['propertylist'] = opt_propertylist;
  }

  if (opt_oauthClientRevocationActive !== undefined) {
    queryParameters['oauth.client.revocation.active'] = opt_oauthClientRevocationActive;
  }

  /** @type {!Object} */
  var httpRequestParams = {
    method: 'POST',
    url: path,
    json: true,
            params: queryParameters,
    headers: headerParams
  };

  if (opt_extraHttpRequestParams) {
    httpRequestParams = angular.extend(httpRequestParams, opt_extraHttpRequestParams);
  }

  return (/** @type {?} */ (this.http_))(httpRequestParams);
}

/**
 * 
 * 
 * @param {!boolean=} opt_post 
 * @param {!boolean=} opt_apply 
 * @param {!boolean=} opt_delete 
 * @param {!string=} opt_action 
 * @param {!string=} opt_location 
 * @param {!Array<!string>=} opt_propertylist 
 * @param {!string=} opt_slingServletPaths 
 * @param {!boolean=} opt_oauthRevocationActive 
 * @param {!angular.$http.Config=} opt_extraHttpRequestParams Extra HTTP parameters to send.
 * @return {!angular.$q.Promise<!API.Client.comAdobeGraniteOauthServerImplOAuth2RevocationEndpointServletInfo>}
 */
API.Client.ConfigmgrApi.prototype.comAdobeGraniteOauthServerImplOAuth2RevocationEndpointServlet = function(opt_post, opt_apply, opt_delete, opt_action, opt_location, opt_propertylist, opt_slingServletPaths, opt_oauthRevocationActive, opt_extraHttpRequestParams) {
  /** @const {string} */
  var path = this.basePath_ + '/system/console/configMgr/com.adobe.granite.oauth.server.impl.OAuth2RevocationEndpointServlet';

  /** @type {!Object} */
  var queryParameters = {};

  /** @type {!Object} */
  var headerParams = angular.extend({}, this.defaultHeaders_);
  if (opt_post !== undefined) {
    queryParameters['post'] = opt_post;
  }

  if (opt_apply !== undefined) {
    queryParameters['apply'] = opt_apply;
  }

  if (opt_delete !== undefined) {
    queryParameters['delete'] = opt_delete;
  }

  if (opt_action !== undefined) {
    queryParameters['action'] = opt_action;
  }

  if (opt_location !== undefined) {
    queryParameters['$location'] = opt_location;
  }

  if (opt_propertylist !== undefined) {
    queryParameters['propertylist'] = opt_propertylist;
  }

  if (opt_slingServletPaths !== undefined) {
    queryParameters['sling.servlet.paths'] = opt_slingServletPaths;
  }

  if (opt_oauthRevocationActive !== undefined) {
    queryParameters['oauth.revocation.active'] = opt_oauthRevocationActive;
  }

  /** @type {!Object} */
  var httpRequestParams = {
    method: 'POST',
    url: path,
    json: true,
            params: queryParameters,
    headers: headerParams
  };

  if (opt_extraHttpRequestParams) {
    httpRequestParams = angular.extend(httpRequestParams, opt_extraHttpRequestParams);
  }

  return (/** @type {?} */ (this.http_))(httpRequestParams);
}

/**
 * 
 * 
 * @param {!boolean=} opt_post 
 * @param {!boolean=} opt_apply 
 * @param {!boolean=} opt_delete 
 * @param {!string=} opt_action 
 * @param {!string=} opt_location 
 * @param {!Array<!string>=} opt_propertylist 
 * @param {!string=} opt_oauthIssuer 
 * @param {!string=} opt_oauthAccessTokenExpiresIn 
 * @param {!string=} opt_osgiHttpWhiteboardServletPattern 
 * @param {!string=} opt_osgiHttpWhiteboardContextSelect 
 * @param {!angular.$http.Config=} opt_extraHttpRequestParams Extra HTTP parameters to send.
 * @return {!angular.$q.Promise<!API.Client.comAdobeGraniteOauthServerImplOAuth2TokenEndpointServletInfo>}
 */
API.Client.ConfigmgrApi.prototype.comAdobeGraniteOauthServerImplOAuth2TokenEndpointServlet = function(opt_post, opt_apply, opt_delete, opt_action, opt_location, opt_propertylist, opt_oauthIssuer, opt_oauthAccessTokenExpiresIn, opt_osgiHttpWhiteboardServletPattern, opt_osgiHttpWhiteboardContextSelect, opt_extraHttpRequestParams) {
  /** @const {string} */
  var path = this.basePath_ + '/system/console/configMgr/com.adobe.granite.oauth.server.impl.OAuth2TokenEndpointServlet';

  /** @type {!Object} */
  var queryParameters = {};

  /** @type {!Object} */
  var headerParams = angular.extend({}, this.defaultHeaders_);
  if (opt_post !== undefined) {
    queryParameters['post'] = opt_post;
  }

  if (opt_apply !== undefined) {
    queryParameters['apply'] = opt_apply;
  }

  if (opt_delete !== undefined) {
    queryParameters['delete'] = opt_delete;
  }

  if (opt_action !== undefined) {
    queryParameters['action'] = opt_action;
  }

  if (opt_location !== undefined) {
    queryParameters['$location'] = opt_location;
  }

  if (opt_propertylist !== undefined) {
    queryParameters['propertylist'] = opt_propertylist;
  }

  if (opt_oauthIssuer !== undefined) {
    queryParameters['oauth.issuer'] = opt_oauthIssuer;
  }

  if (opt_oauthAccessTokenExpiresIn !== undefined) {
    queryParameters['oauth.access.token.expires.in'] = opt_oauthAccessTokenExpiresIn;
  }

  if (opt_osgiHttpWhiteboardServletPattern !== undefined) {
    queryParameters['osgi.http.whiteboard.servlet.pattern'] = opt_osgiHttpWhiteboardServletPattern;
  }

  if (opt_osgiHttpWhiteboardContextSelect !== undefined) {
    queryParameters['osgi.http.whiteboard.context.select'] = opt_osgiHttpWhiteboardContextSelect;
  }

  /** @type {!Object} */
  var httpRequestParams = {
    method: 'POST',
    url: path,
    json: true,
            params: queryParameters,
    headers: headerParams
  };

  if (opt_extraHttpRequestParams) {
    httpRequestParams = angular.extend(httpRequestParams, opt_extraHttpRequestParams);
  }

  return (/** @type {?} */ (this.http_))(httpRequestParams);
}

/**
 * 
 * 
 * @param {!boolean=} opt_post 
 * @param {!boolean=} opt_apply 
 * @param {!boolean=} opt_delete 
 * @param {!string=} opt_action 
 * @param {!string=} opt_location 
 * @param {!Array<!string>=} opt_propertylist 
 * @param {!boolean=} opt_oauthTokenRevocationActive 
 * @param {!angular.$http.Config=} opt_extraHttpRequestParams Extra HTTP parameters to send.
 * @return {!angular.$q.Promise<!API.Client.comAdobeGraniteOauthServerImplOAuth2TokenRevocationServletInfo>}
 */
API.Client.ConfigmgrApi.prototype.comAdobeGraniteOauthServerImplOAuth2TokenRevocationServlet = function(opt_post, opt_apply, opt_delete, opt_action, opt_location, opt_propertylist, opt_oauthTokenRevocationActive, opt_extraHttpRequestParams) {
  /** @const {string} */
  var path = this.basePath_ + '/system/console/configMgr/com.adobe.granite.oauth.server.impl.OAuth2TokenRevocationServlet';

  /** @type {!Object} */
  var queryParameters = {};

  /** @type {!Object} */
  var headerParams = angular.extend({}, this.defaultHeaders_);
  if (opt_post !== undefined) {
    queryParameters['post'] = opt_post;
  }

  if (opt_apply !== undefined) {
    queryParameters['apply'] = opt_apply;
  }

  if (opt_delete !== undefined) {
    queryParameters['delete'] = opt_delete;
  }

  if (opt_action !== undefined) {
    queryParameters['action'] = opt_action;
  }

  if (opt_location !== undefined) {
    queryParameters['$location'] = opt_location;
  }

  if (opt_propertylist !== undefined) {
    queryParameters['propertylist'] = opt_propertylist;
  }

  if (opt_oauthTokenRevocationActive !== undefined) {
    queryParameters['oauth.token.revocation.active'] = opt_oauthTokenRevocationActive;
  }

  /** @type {!Object} */
  var httpRequestParams = {
    method: 'POST',
    url: path,
    json: true,
            params: queryParameters,
    headers: headerParams
  };

  if (opt_extraHttpRequestParams) {
    httpRequestParams = angular.extend(httpRequestParams, opt_extraHttpRequestParams);
  }

  return (/** @type {?} */ (this.http_))(httpRequestParams);
}

/**
 * 
 * 
 * @param {!boolean=} opt_post 
 * @param {!boolean=} opt_apply 
 * @param {!boolean=} opt_delete 
 * @param {!string=} opt_action 
 * @param {!string=} opt_location 
 * @param {!Array<!string>=} opt_propertylist 
 * @param {!string=} opt_offloadingTransporter 
 * @param {!boolean=} opt_offloadingCleanupPayload 
 * @param {!angular.$http.Config=} opt_extraHttpRequestParams Extra HTTP parameters to send.
 * @return {!angular.$q.Promise<!API.Client.comAdobeGraniteOffloadingImplOffloadingConfiguratorInfo>}
 */
API.Client.ConfigmgrApi.prototype.comAdobeGraniteOffloadingImplOffloadingConfigurator = function(opt_post, opt_apply, opt_delete, opt_action, opt_location, opt_propertylist, opt_offloadingTransporter, opt_offloadingCleanupPayload, opt_extraHttpRequestParams) {
  /** @const {string} */
  var path = this.basePath_ + '/system/console/configMgr/com.adobe.granite.offloading.impl.OffloadingConfigurator';

  /** @type {!Object} */
  var queryParameters = {};

  /** @type {!Object} */
  var headerParams = angular.extend({}, this.defaultHeaders_);
  if (opt_post !== undefined) {
    queryParameters['post'] = opt_post;
  }

  if (opt_apply !== undefined) {
    queryParameters['apply'] = opt_apply;
  }

  if (opt_delete !== undefined) {
    queryParameters['delete'] = opt_delete;
  }

  if (opt_action !== undefined) {
    queryParameters['action'] = opt_action;
  }

  if (opt_location !== undefined) {
    queryParameters['$location'] = opt_location;
  }

  if (opt_propertylist !== undefined) {
    queryParameters['propertylist'] = opt_propertylist;
  }

  if (opt_offloadingTransporter !== undefined) {
    queryParameters['offloading.transporter'] = opt_offloadingTransporter;
  }

  if (opt_offloadingCleanupPayload !== undefined) {
    queryParameters['offloading.cleanup.payload'] = opt_offloadingCleanupPayload;
  }

  /** @type {!Object} */
  var httpRequestParams = {
    method: 'POST',
    url: path,
    json: true,
            params: queryParameters,
    headers: headerParams
  };

  if (opt_extraHttpRequestParams) {
    httpRequestParams = angular.extend(httpRequestParams, opt_extraHttpRequestParams);
  }

  return (/** @type {?} */ (this.http_))(httpRequestParams);
}

/**
 * 
 * 
 * @param {!boolean=} opt_post 
 * @param {!boolean=} opt_apply 
 * @param {!boolean=} opt_delete 
 * @param {!string=} opt_action 
 * @param {!string=} opt_location 
 * @param {!Array<!string>=} opt_propertylist 
 * @param {!boolean=} opt_offloadingJobclonerEnabled 
 * @param {!angular.$http.Config=} opt_extraHttpRequestParams Extra HTTP parameters to send.
 * @return {!angular.$q.Promise<!API.Client.comAdobeGraniteOffloadingImplOffloadingJobClonerInfo>}
 */
API.Client.ConfigmgrApi.prototype.comAdobeGraniteOffloadingImplOffloadingJobCloner = function(opt_post, opt_apply, opt_delete, opt_action, opt_location, opt_propertylist, opt_offloadingJobclonerEnabled, opt_extraHttpRequestParams) {
  /** @const {string} */
  var path = this.basePath_ + '/system/console/configMgr/com.adobe.granite.offloading.impl.OffloadingJobCloner';

  /** @type {!Object} */
  var queryParameters = {};

  /** @type {!Object} */
  var headerParams = angular.extend({}, this.defaultHeaders_);
  if (opt_post !== undefined) {
    queryParameters['post'] = opt_post;
  }

  if (opt_apply !== undefined) {
    queryParameters['apply'] = opt_apply;
  }

  if (opt_delete !== undefined) {
    queryParameters['delete'] = opt_delete;
  }

  if (opt_action !== undefined) {
    queryParameters['action'] = opt_action;
  }

  if (opt_location !== undefined) {
    queryParameters['$location'] = opt_location;
  }

  if (opt_propertylist !== undefined) {
    queryParameters['propertylist'] = opt_propertylist;
  }

  if (opt_offloadingJobclonerEnabled !== undefined) {
    queryParameters['offloading.jobcloner.enabled'] = opt_offloadingJobclonerEnabled;
  }

  /** @type {!Object} */
  var httpRequestParams = {
    method: 'POST',
    url: path,
    json: true,
            params: queryParameters,
    headers: headerParams
  };

  if (opt_extraHttpRequestParams) {
    httpRequestParams = angular.extend(httpRequestParams, opt_extraHttpRequestParams);
  }

  return (/** @type {?} */ (this.http_))(httpRequestParams);
}

/**
 * 
 * 
 * @param {!boolean=} opt_post 
 * @param {!boolean=} opt_apply 
 * @param {!boolean=} opt_delete 
 * @param {!string=} opt_action 
 * @param {!string=} opt_location 
 * @param {!Array<!string>=} opt_propertylist 
 * @param {!boolean=} opt_offloadingOffloaderEnabled 
 * @param {!angular.$http.Config=} opt_extraHttpRequestParams Extra HTTP parameters to send.
 * @return {!angular.$q.Promise<!API.Client.comAdobeGraniteOffloadingImplOffloadingJobOffloaderInfo>}
 */
API.Client.ConfigmgrApi.prototype.comAdobeGraniteOffloadingImplOffloadingJobOffloader = function(opt_post, opt_apply, opt_delete, opt_action, opt_location, opt_propertylist, opt_offloadingOffloaderEnabled, opt_extraHttpRequestParams) {
  /** @const {string} */
  var path = this.basePath_ + '/system/console/configMgr/com.adobe.granite.offloading.impl.OffloadingJobOffloader';

  /** @type {!Object} */
  var queryParameters = {};

  /** @type {!Object} */
  var headerParams = angular.extend({}, this.defaultHeaders_);
  if (opt_post !== undefined) {
    queryParameters['post'] = opt_post;
  }

  if (opt_apply !== undefined) {
    queryParameters['apply'] = opt_apply;
  }

  if (opt_delete !== undefined) {
    queryParameters['delete'] = opt_delete;
  }

  if (opt_action !== undefined) {
    queryParameters['action'] = opt_action;
  }

  if (opt_location !== undefined) {
    queryParameters['$location'] = opt_location;
  }

  if (opt_propertylist !== undefined) {
    queryParameters['propertylist'] = opt_propertylist;
  }

  if (opt_offloadingOffloaderEnabled !== undefined) {
    queryParameters['offloading.offloader.enabled'] = opt_offloadingOffloaderEnabled;
  }

  /** @type {!Object} */
  var httpRequestParams = {
    method: 'POST',
    url: path,
    json: true,
            params: queryParameters,
    headers: headerParams
  };

  if (opt_extraHttpRequestParams) {
    httpRequestParams = angular.extend(httpRequestParams, opt_extraHttpRequestParams);
  }

  return (/** @type {?} */ (this.http_))(httpRequestParams);
}

/**
 * 
 * 
 * @param {!boolean=} opt_post 
 * @param {!boolean=} opt_apply 
 * @param {!boolean=} opt_delete 
 * @param {!string=} opt_action 
 * @param {!string=} opt_location 
 * @param {!Array<!string>=} opt_propertylist 
 * @param {!boolean=} opt_offloadingAgentmanagerEnabled 
 * @param {!angular.$http.Config=} opt_extraHttpRequestParams Extra HTTP parameters to send.
 * @return {!angular.$q.Promise<!API.Client.comAdobeGraniteOffloadingImplTransporterOffloadingAgentManagerInfo>}
 */
API.Client.ConfigmgrApi.prototype.comAdobeGraniteOffloadingImplTransporterOffloadingAgentManager = function(opt_post, opt_apply, opt_delete, opt_action, opt_location, opt_propertylist, opt_offloadingAgentmanagerEnabled, opt_extraHttpRequestParams) {
  /** @const {string} */
  var path = this.basePath_ + '/system/console/configMgr/com.adobe.granite.offloading.impl.transporter.OffloadingAgentManager';

  /** @type {!Object} */
  var queryParameters = {};

  /** @type {!Object} */
  var headerParams = angular.extend({}, this.defaultHeaders_);
  if (opt_post !== undefined) {
    queryParameters['post'] = opt_post;
  }

  if (opt_apply !== undefined) {
    queryParameters['apply'] = opt_apply;
  }

  if (opt_delete !== undefined) {
    queryParameters['delete'] = opt_delete;
  }

  if (opt_action !== undefined) {
    queryParameters['action'] = opt_action;
  }

  if (opt_location !== undefined) {
    queryParameters['$location'] = opt_location;
  }

  if (opt_propertylist !== undefined) {
    queryParameters['propertylist'] = opt_propertylist;
  }

  if (opt_offloadingAgentmanagerEnabled !== undefined) {
    queryParameters['offloading.agentmanager.enabled'] = opt_offloadingAgentmanagerEnabled;
  }

  /** @type {!Object} */
  var httpRequestParams = {
    method: 'POST',
    url: path,
    json: true,
            params: queryParameters,
    headers: headerParams
  };

  if (opt_extraHttpRequestParams) {
    httpRequestParams = angular.extend(httpRequestParams, opt_extraHttpRequestParams);
  }

  return (/** @type {?} */ (this.http_))(httpRequestParams);
}

/**
 * 
 * 
 * @param {!boolean=} opt_post 
 * @param {!boolean=} opt_apply 
 * @param {!boolean=} opt_delete 
 * @param {!string=} opt_action 
 * @param {!string=} opt_location 
 * @param {!Array<!string>=} opt_propertylist 
 * @param {!string=} opt_defaultTransportAgentToWorkerPrefix 
 * @param {!string=} opt_defaultTransportAgentToMasterPrefix 
 * @param {!string=} opt_defaultTransportInputPackage 
 * @param {!string=} opt_defaultTransportOutputPackage 
 * @param {!boolean=} opt_defaultTransportReplicationSynchronous 
 * @param {!boolean=} opt_defaultTransportContentpackage 
 * @param {!boolean=} opt_offloadingTransporterDefaultEnabled 
 * @param {!angular.$http.Config=} opt_extraHttpRequestParams Extra HTTP parameters to send.
 * @return {!angular.$q.Promise<!API.Client.comAdobeGraniteOffloadingImplTransporterOffloadingDefaultTranspoInfo>}
 */
API.Client.ConfigmgrApi.prototype.comAdobeGraniteOffloadingImplTransporterOffloadingDefaultTranspo = function(opt_post, opt_apply, opt_delete, opt_action, opt_location, opt_propertylist, opt_defaultTransportAgentToWorkerPrefix, opt_defaultTransportAgentToMasterPrefix, opt_defaultTransportInputPackage, opt_defaultTransportOutputPackage, opt_defaultTransportReplicationSynchronous, opt_defaultTransportContentpackage, opt_offloadingTransporterDefaultEnabled, opt_extraHttpRequestParams) {
  /** @const {string} */
  var path = this.basePath_ + '/system/console/configMgr/com.adobe.granite.offloading.impl.transporter.OffloadingDefaultTransporter';

  /** @type {!Object} */
  var queryParameters = {};

  /** @type {!Object} */
  var headerParams = angular.extend({}, this.defaultHeaders_);
  if (opt_post !== undefined) {
    queryParameters['post'] = opt_post;
  }

  if (opt_apply !== undefined) {
    queryParameters['apply'] = opt_apply;
  }

  if (opt_delete !== undefined) {
    queryParameters['delete'] = opt_delete;
  }

  if (opt_action !== undefined) {
    queryParameters['action'] = opt_action;
  }

  if (opt_location !== undefined) {
    queryParameters['$location'] = opt_location;
  }

  if (opt_propertylist !== undefined) {
    queryParameters['propertylist'] = opt_propertylist;
  }

  if (opt_defaultTransportAgentToWorkerPrefix !== undefined) {
    queryParameters['default.transport.agent-to-worker.prefix'] = opt_defaultTransportAgentToWorkerPrefix;
  }

  if (opt_defaultTransportAgentToMasterPrefix !== undefined) {
    queryParameters['default.transport.agent-to-master.prefix'] = opt_defaultTransportAgentToMasterPrefix;
  }

  if (opt_defaultTransportInputPackage !== undefined) {
    queryParameters['default.transport.input.package'] = opt_defaultTransportInputPackage;
  }

  if (opt_defaultTransportOutputPackage !== undefined) {
    queryParameters['default.transport.output.package'] = opt_defaultTransportOutputPackage;
  }

  if (opt_defaultTransportReplicationSynchronous !== undefined) {
    queryParameters['default.transport.replication.synchronous'] = opt_defaultTransportReplicationSynchronous;
  }

  if (opt_defaultTransportContentpackage !== undefined) {
    queryParameters['default.transport.contentpackage'] = opt_defaultTransportContentpackage;
  }

  if (opt_offloadingTransporterDefaultEnabled !== undefined) {
    queryParameters['offloading.transporter.default.enabled'] = opt_offloadingTransporterDefaultEnabled;
  }

  /** @type {!Object} */
  var httpRequestParams = {
    method: 'POST',
    url: path,
    json: true,
            params: queryParameters,
    headers: headerParams
  };

  if (opt_extraHttpRequestParams) {
    httpRequestParams = angular.extend(httpRequestParams, opt_extraHttpRequestParams);
  }

  return (/** @type {?} */ (this.http_))(httpRequestParams);
}

/**
 * 
 * 
 * @param {!boolean=} opt_post 
 * @param {!boolean=} opt_apply 
 * @param {!boolean=} opt_delete 
 * @param {!string=} opt_action 
 * @param {!string=} opt_location 
 * @param {!Array<!string>=} opt_propertylist 
 * @param {!number=} opt_omnisearchSuggestionRequiretextMin 
 * @param {!boolean=} opt_omnisearchSuggestionSpellcheckRequire 
 * @param {!angular.$http.Config=} opt_extraHttpRequestParams Extra HTTP parameters to send.
 * @return {!angular.$q.Promise<!API.Client.comAdobeGraniteOmnisearchImplCoreOmniSearchServiceImplInfo>}
 */
API.Client.ConfigmgrApi.prototype.comAdobeGraniteOmnisearchImplCoreOmniSearchServiceImpl = function(opt_post, opt_apply, opt_delete, opt_action, opt_location, opt_propertylist, opt_omnisearchSuggestionRequiretextMin, opt_omnisearchSuggestionSpellcheckRequire, opt_extraHttpRequestParams) {
  /** @const {string} */
  var path = this.basePath_ + '/system/console/configMgr/com.adobe.granite.omnisearch.impl.core.OmniSearchServiceImpl';

  /** @type {!Object} */
  var queryParameters = {};

  /** @type {!Object} */
  var headerParams = angular.extend({}, this.defaultHeaders_);
  if (opt_post !== undefined) {
    queryParameters['post'] = opt_post;
  }

  if (opt_apply !== undefined) {
    queryParameters['apply'] = opt_apply;
  }

  if (opt_delete !== undefined) {
    queryParameters['delete'] = opt_delete;
  }

  if (opt_action !== undefined) {
    queryParameters['action'] = opt_action;
  }

  if (opt_location !== undefined) {
    queryParameters['$location'] = opt_location;
  }

  if (opt_propertylist !== undefined) {
    queryParameters['propertylist'] = opt_propertylist;
  }

  if (opt_omnisearchSuggestionRequiretextMin !== undefined) {
    queryParameters['omnisearch.suggestion.requiretext.min'] = opt_omnisearchSuggestionRequiretextMin;
  }

  if (opt_omnisearchSuggestionSpellcheckRequire !== undefined) {
    queryParameters['omnisearch.suggestion.spellcheck.require'] = opt_omnisearchSuggestionSpellcheckRequire;
  }

  /** @type {!Object} */
  var httpRequestParams = {
    method: 'POST',
    url: path,
    json: true,
            params: queryParameters,
    headers: headerParams
  };

  if (opt_extraHttpRequestParams) {
    httpRequestParams = angular.extend(httpRequestParams, opt_extraHttpRequestParams);
  }

  return (/** @type {?} */ (this.http_))(httpRequestParams);
}

/**
 * 
 * 
 * @param {!boolean=} opt_post 
 * @param {!boolean=} opt_apply 
 * @param {!boolean=} opt_delete 
 * @param {!string=} opt_action 
 * @param {!string=} opt_location 
 * @param {!Array<!string>=} opt_propertylist 
 * @param {!Array<!string>=} opt_optoutCookies 
 * @param {!Array<!string>=} opt_optoutHeaders 
 * @param {!Array<!string>=} opt_optoutWhitelistCookies 
 * @param {!angular.$http.Config=} opt_extraHttpRequestParams Extra HTTP parameters to send.
 * @return {!angular.$q.Promise<!API.Client.comAdobeGraniteOptoutImplOptOutServiceImplInfo>}
 */
API.Client.ConfigmgrApi.prototype.comAdobeGraniteOptoutImplOptOutServiceImpl = function(opt_post, opt_apply, opt_delete, opt_action, opt_location, opt_propertylist, opt_optoutCookies, opt_optoutHeaders, opt_optoutWhitelistCookies, opt_extraHttpRequestParams) {
  /** @const {string} */
  var path = this.basePath_ + '/system/console/configMgr/com.adobe.granite.optout.impl.OptOutServiceImpl';

  /** @type {!Object} */
  var queryParameters = {};

  /** @type {!Object} */
  var headerParams = angular.extend({}, this.defaultHeaders_);
  if (opt_post !== undefined) {
    queryParameters['post'] = opt_post;
  }

  if (opt_apply !== undefined) {
    queryParameters['apply'] = opt_apply;
  }

  if (opt_delete !== undefined) {
    queryParameters['delete'] = opt_delete;
  }

  if (opt_action !== undefined) {
    queryParameters['action'] = opt_action;
  }

  if (opt_location !== undefined) {
    queryParameters['$location'] = opt_location;
  }

  if (opt_propertylist !== undefined) {
    queryParameters['propertylist'] = opt_propertylist;
  }

  if (opt_optoutCookies !== undefined) {
    queryParameters['optout.cookies'] = opt_optoutCookies;
  }

  if (opt_optoutHeaders !== undefined) {
    queryParameters['optout.headers'] = opt_optoutHeaders;
  }

  if (opt_optoutWhitelistCookies !== undefined) {
    queryParameters['optout.whitelist.cookies'] = opt_optoutWhitelistCookies;
  }

  /** @type {!Object} */
  var httpRequestParams = {
    method: 'POST',
    url: path,
    json: true,
            params: queryParameters,
    headers: headerParams
  };

  if (opt_extraHttpRequestParams) {
    httpRequestParams = angular.extend(httpRequestParams, opt_extraHttpRequestParams);
  }

  return (/** @type {?} */ (this.http_))(httpRequestParams);
}

/**
 * 
 * 
 * @param {!boolean=} opt_post 
 * @param {!boolean=} opt_apply 
 * @param {!boolean=} opt_delete 
 * @param {!string=} opt_action 
 * @param {!string=} opt_location 
 * @param {!Array<!string>=} opt_propertylist 
 * @param {!number=} opt_indexingCriticalThreshold 
 * @param {!number=} opt_indexingWarnThreshold 
 * @param {!Array<!string>=} opt_hcTags 
 * @param {!angular.$http.Config=} opt_extraHttpRequestParams Extra HTTP parameters to send.
 * @return {!angular.$q.Promise<!API.Client.comAdobeGraniteQueriesImplHcAsyncIndexHealthCheckInfo>}
 */
API.Client.ConfigmgrApi.prototype.comAdobeGraniteQueriesImplHcAsyncIndexHealthCheck = function(opt_post, opt_apply, opt_delete, opt_action, opt_location, opt_propertylist, opt_indexingCriticalThreshold, opt_indexingWarnThreshold, opt_hcTags, opt_extraHttpRequestParams) {
  /** @const {string} */
  var path = this.basePath_ + '/system/console/configMgr/com.adobe.granite.queries.impl.hc.AsyncIndexHealthCheck';

  /** @type {!Object} */
  var queryParameters = {};

  /** @type {!Object} */
  var headerParams = angular.extend({}, this.defaultHeaders_);
  if (opt_post !== undefined) {
    queryParameters['post'] = opt_post;
  }

  if (opt_apply !== undefined) {
    queryParameters['apply'] = opt_apply;
  }

  if (opt_delete !== undefined) {
    queryParameters['delete'] = opt_delete;
  }

  if (opt_action !== undefined) {
    queryParameters['action'] = opt_action;
  }

  if (opt_location !== undefined) {
    queryParameters['$location'] = opt_location;
  }

  if (opt_propertylist !== undefined) {
    queryParameters['propertylist'] = opt_propertylist;
  }

  if (opt_indexingCriticalThreshold !== undefined) {
    queryParameters['indexing.critical.threshold'] = opt_indexingCriticalThreshold;
  }

  if (opt_indexingWarnThreshold !== undefined) {
    queryParameters['indexing.warn.threshold'] = opt_indexingWarnThreshold;
  }

  if (opt_hcTags !== undefined) {
    queryParameters['hc.tags'] = opt_hcTags;
  }

  /** @type {!Object} */
  var httpRequestParams = {
    method: 'POST',
    url: path,
    json: true,
            params: queryParameters,
    headers: headerParams
  };

  if (opt_extraHttpRequestParams) {
    httpRequestParams = angular.extend(httpRequestParams, opt_extraHttpRequestParams);
  }

  return (/** @type {?} */ (this.http_))(httpRequestParams);
}

/**
 * 
 * 
 * @param {!boolean=} opt_post 
 * @param {!boolean=} opt_apply 
 * @param {!boolean=} opt_delete 
 * @param {!string=} opt_action 
 * @param {!string=} opt_location 
 * @param {!Array<!string>=} opt_propertylist 
 * @param {!number=} opt_largeIndexCriticalThreshold 
 * @param {!number=} opt_largeIndexWarnThreshold 
 * @param {!Array<!string>=} opt_hcTags 
 * @param {!angular.$http.Config=} opt_extraHttpRequestParams Extra HTTP parameters to send.
 * @return {!angular.$q.Promise<!API.Client.comAdobeGraniteQueriesImplHcLargeIndexHealthCheckInfo>}
 */
API.Client.ConfigmgrApi.prototype.comAdobeGraniteQueriesImplHcLargeIndexHealthCheck = function(opt_post, opt_apply, opt_delete, opt_action, opt_location, opt_propertylist, opt_largeIndexCriticalThreshold, opt_largeIndexWarnThreshold, opt_hcTags, opt_extraHttpRequestParams) {
  /** @const {string} */
  var path = this.basePath_ + '/system/console/configMgr/com.adobe.granite.queries.impl.hc.LargeIndexHealthCheck';

  /** @type {!Object} */
  var queryParameters = {};

  /** @type {!Object} */
  var headerParams = angular.extend({}, this.defaultHeaders_);
  if (opt_post !== undefined) {
    queryParameters['post'] = opt_post;
  }

  if (opt_apply !== undefined) {
    queryParameters['apply'] = opt_apply;
  }

  if (opt_delete !== undefined) {
    queryParameters['delete'] = opt_delete;
  }

  if (opt_action !== undefined) {
    queryParameters['action'] = opt_action;
  }

  if (opt_location !== undefined) {
    queryParameters['$location'] = opt_location;
  }

  if (opt_propertylist !== undefined) {
    queryParameters['propertylist'] = opt_propertylist;
  }

  if (opt_largeIndexCriticalThreshold !== undefined) {
    queryParameters['large.index.critical.threshold'] = opt_largeIndexCriticalThreshold;
  }

  if (opt_largeIndexWarnThreshold !== undefined) {
    queryParameters['large.index.warn.threshold'] = opt_largeIndexWarnThreshold;
  }

  if (opt_hcTags !== undefined) {
    queryParameters['hc.tags'] = opt_hcTags;
  }

  /** @type {!Object} */
  var httpRequestParams = {
    method: 'POST',
    url: path,
    json: true,
            params: queryParameters,
    headers: headerParams
  };

  if (opt_extraHttpRequestParams) {
    httpRequestParams = angular.extend(httpRequestParams, opt_extraHttpRequestParams);
  }

  return (/** @type {?} */ (this.http_))(httpRequestParams);
}

/**
 * 
 * 
 * @param {!boolean=} opt_post 
 * @param {!boolean=} opt_apply 
 * @param {!boolean=} opt_delete 
 * @param {!string=} opt_action 
 * @param {!string=} opt_location 
 * @param {!Array<!string>=} opt_propertylist 
 * @param {!Array<!string>=} opt_hcTags 
 * @param {!angular.$http.Config=} opt_extraHttpRequestParams Extra HTTP parameters to send.
 * @return {!angular.$q.Promise<!API.Client.comAdobeGraniteQueriesImplHcQueriesStatusHealthCheckInfo>}
 */
API.Client.ConfigmgrApi.prototype.comAdobeGraniteQueriesImplHcQueriesStatusHealthCheck = function(opt_post, opt_apply, opt_delete, opt_action, opt_location, opt_propertylist, opt_hcTags, opt_extraHttpRequestParams) {
  /** @const {string} */
  var path = this.basePath_ + '/system/console/configMgr/com.adobe.granite.queries.impl.hc.QueriesStatusHealthCheck';

  /** @type {!Object} */
  var queryParameters = {};

  /** @type {!Object} */
  var headerParams = angular.extend({}, this.defaultHeaders_);
  if (opt_post !== undefined) {
    queryParameters['post'] = opt_post;
  }

  if (opt_apply !== undefined) {
    queryParameters['apply'] = opt_apply;
  }

  if (opt_delete !== undefined) {
    queryParameters['delete'] = opt_delete;
  }

  if (opt_action !== undefined) {
    queryParameters['action'] = opt_action;
  }

  if (opt_location !== undefined) {
    queryParameters['$location'] = opt_location;
  }

  if (opt_propertylist !== undefined) {
    queryParameters['propertylist'] = opt_propertylist;
  }

  if (opt_hcTags !== undefined) {
    queryParameters['hc.tags'] = opt_hcTags;
  }

  /** @type {!Object} */
  var httpRequestParams = {
    method: 'POST',
    url: path,
    json: true,
            params: queryParameters,
    headers: headerParams
  };

  if (opt_extraHttpRequestParams) {
    httpRequestParams = angular.extend(httpRequestParams, opt_extraHttpRequestParams);
  }

  return (/** @type {?} */ (this.http_))(httpRequestParams);
}

/**
 * 
 * 
 * @param {!boolean=} opt_post 
 * @param {!boolean=} opt_apply 
 * @param {!boolean=} opt_delete 
 * @param {!string=} opt_action 
 * @param {!string=} opt_location 
 * @param {!Array<!string>=} opt_propertylist 
 * @param {!number=} opt_getPeriod 
 * @param {!angular.$http.Config=} opt_extraHttpRequestParams Extra HTTP parameters to send.
 * @return {!angular.$q.Promise<!API.Client.comAdobeGraniteQueriesImplHcQueryHealthCheckMetricsInfo>}
 */
API.Client.ConfigmgrApi.prototype.comAdobeGraniteQueriesImplHcQueryHealthCheckMetrics = function(opt_post, opt_apply, opt_delete, opt_action, opt_location, opt_propertylist, opt_getPeriod, opt_extraHttpRequestParams) {
  /** @const {string} */
  var path = this.basePath_ + '/system/console/configMgr/com.adobe.granite.queries.impl.hc.QueryHealthCheckMetrics';

  /** @type {!Object} */
  var queryParameters = {};

  /** @type {!Object} */
  var headerParams = angular.extend({}, this.defaultHeaders_);
  if (opt_post !== undefined) {
    queryParameters['post'] = opt_post;
  }

  if (opt_apply !== undefined) {
    queryParameters['apply'] = opt_apply;
  }

  if (opt_delete !== undefined) {
    queryParameters['delete'] = opt_delete;
  }

  if (opt_action !== undefined) {
    queryParameters['action'] = opt_action;
  }

  if (opt_location !== undefined) {
    queryParameters['$location'] = opt_location;
  }

  if (opt_propertylist !== undefined) {
    queryParameters['propertylist'] = opt_propertylist;
  }

  if (opt_getPeriod !== undefined) {
    queryParameters['getPeriod'] = opt_getPeriod;
  }

  /** @type {!Object} */
  var httpRequestParams = {
    method: 'POST',
    url: path,
    json: true,
            params: queryParameters,
    headers: headerParams
  };

  if (opt_extraHttpRequestParams) {
    httpRequestParams = angular.extend(httpRequestParams, opt_extraHttpRequestParams);
  }

  return (/** @type {?} */ (this.http_))(httpRequestParams);
}

/**
 * 
 * 
 * @param {!boolean=} opt_post 
 * @param {!boolean=} opt_apply 
 * @param {!boolean=} opt_delete 
 * @param {!string=} opt_action 
 * @param {!string=} opt_location 
 * @param {!Array<!string>=} opt_propertylist 
 * @param {!Array<!string>=} opt_hcTags 
 * @param {!angular.$http.Config=} opt_extraHttpRequestParams Extra HTTP parameters to send.
 * @return {!angular.$q.Promise<!API.Client.comAdobeGraniteQueriesImplHcQueryLimitsHealthCheckInfo>}
 */
API.Client.ConfigmgrApi.prototype.comAdobeGraniteQueriesImplHcQueryLimitsHealthCheck = function(opt_post, opt_apply, opt_delete, opt_action, opt_location, opt_propertylist, opt_hcTags, opt_extraHttpRequestParams) {
  /** @const {string} */
  var path = this.basePath_ + '/system/console/configMgr/com.adobe.granite.queries.impl.hc.QueryLimitsHealthCheck';

  /** @type {!Object} */
  var queryParameters = {};

  /** @type {!Object} */
  var headerParams = angular.extend({}, this.defaultHeaders_);
  if (opt_post !== undefined) {
    queryParameters['post'] = opt_post;
  }

  if (opt_apply !== undefined) {
    queryParameters['apply'] = opt_apply;
  }

  if (opt_delete !== undefined) {
    queryParameters['delete'] = opt_delete;
  }

  if (opt_action !== undefined) {
    queryParameters['action'] = opt_action;
  }

  if (opt_location !== undefined) {
    queryParameters['$location'] = opt_location;
  }

  if (opt_propertylist !== undefined) {
    queryParameters['propertylist'] = opt_propertylist;
  }

  if (opt_hcTags !== undefined) {
    queryParameters['hc.tags'] = opt_hcTags;
  }

  /** @type {!Object} */
  var httpRequestParams = {
    method: 'POST',
    url: path,
    json: true,
            params: queryParameters,
    headers: headerParams
  };

  if (opt_extraHttpRequestParams) {
    httpRequestParams = angular.extend(httpRequestParams, opt_extraHttpRequestParams);
  }

  return (/** @type {?} */ (this.http_))(httpRequestParams);
}

/**
 * 
 * 
 * @param {!boolean=} opt_post 
 * @param {!boolean=} opt_apply 
 * @param {!boolean=} opt_delete 
 * @param {!string=} opt_action 
 * @param {!string=} opt_location 
 * @param {!Array<!string>=} opt_propertylist 
 * @param {!number=} opt_numberOfRetriesAllowed 
 * @param {!Array<!string>=} opt_hcTags 
 * @param {!angular.$http.Config=} opt_extraHttpRequestParams Extra HTTP parameters to send.
 * @return {!angular.$q.Promise<!API.Client.comAdobeGraniteReplicationHcImplReplicationQueueHealthCheckInfo>}
 */
API.Client.ConfigmgrApi.prototype.comAdobeGraniteReplicationHcImplReplicationQueueHealthCheck = function(opt_post, opt_apply, opt_delete, opt_action, opt_location, opt_propertylist, opt_numberOfRetriesAllowed, opt_hcTags, opt_extraHttpRequestParams) {
  /** @const {string} */
  var path = this.basePath_ + '/system/console/configMgr/com.adobe.granite.replication.hc.impl.ReplicationQueueHealthCheck';

  /** @type {!Object} */
  var queryParameters = {};

  /** @type {!Object} */
  var headerParams = angular.extend({}, this.defaultHeaders_);
  if (opt_post !== undefined) {
    queryParameters['post'] = opt_post;
  }

  if (opt_apply !== undefined) {
    queryParameters['apply'] = opt_apply;
  }

  if (opt_delete !== undefined) {
    queryParameters['delete'] = opt_delete;
  }

  if (opt_action !== undefined) {
    queryParameters['action'] = opt_action;
  }

  if (opt_location !== undefined) {
    queryParameters['$location'] = opt_location;
  }

  if (opt_propertylist !== undefined) {
    queryParameters['propertylist'] = opt_propertylist;
  }

  if (opt_numberOfRetriesAllowed !== undefined) {
    queryParameters['number.of.retries.allowed'] = opt_numberOfRetriesAllowed;
  }

  if (opt_hcTags !== undefined) {
    queryParameters['hc.tags'] = opt_hcTags;
  }

  /** @type {!Object} */
  var httpRequestParams = {
    method: 'POST',
    url: path,
    json: true,
            params: queryParameters,
    headers: headerParams
  };

  if (opt_extraHttpRequestParams) {
    httpRequestParams = angular.extend(httpRequestParams, opt_extraHttpRequestParams);
  }

  return (/** @type {?} */ (this.http_))(httpRequestParams);
}

/**
 * 
 * 
 * @param {!boolean=} opt_post 
 * @param {!boolean=} opt_apply 
 * @param {!boolean=} opt_delete 
 * @param {!string=} opt_action 
 * @param {!string=} opt_location 
 * @param {!Array<!string>=} opt_propertylist 
 * @param {!Array<!string>=} opt_hcTags 
 * @param {!angular.$http.Config=} opt_extraHttpRequestParams Extra HTTP parameters to send.
 * @return {!angular.$q.Promise<!API.Client.comAdobeGraniteReplicationHcImplReplicationTransportUsersHealthCInfo>}
 */
API.Client.ConfigmgrApi.prototype.comAdobeGraniteReplicationHcImplReplicationTransportUsersHealthC = function(opt_post, opt_apply, opt_delete, opt_action, opt_location, opt_propertylist, opt_hcTags, opt_extraHttpRequestParams) {
  /** @const {string} */
  var path = this.basePath_ + '/system/console/configMgr/com.adobe.granite.replication.hc.impl.ReplicationTransportUsersHealthCheck';

  /** @type {!Object} */
  var queryParameters = {};

  /** @type {!Object} */
  var headerParams = angular.extend({}, this.defaultHeaders_);
  if (opt_post !== undefined) {
    queryParameters['post'] = opt_post;
  }

  if (opt_apply !== undefined) {
    queryParameters['apply'] = opt_apply;
  }

  if (opt_delete !== undefined) {
    queryParameters['delete'] = opt_delete;
  }

  if (opt_action !== undefined) {
    queryParameters['action'] = opt_action;
  }

  if (opt_location !== undefined) {
    queryParameters['$location'] = opt_location;
  }

  if (opt_propertylist !== undefined) {
    queryParameters['propertylist'] = opt_propertylist;
  }

  if (opt_hcTags !== undefined) {
    queryParameters['hc.tags'] = opt_hcTags;
  }

  /** @type {!Object} */
  var httpRequestParams = {
    method: 'POST',
    url: path,
    json: true,
            params: queryParameters,
    headers: headerParams
  };

  if (opt_extraHttpRequestParams) {
    httpRequestParams = angular.extend(httpRequestParams, opt_extraHttpRequestParams);
  }

  return (/** @type {?} */ (this.http_))(httpRequestParams);
}

/**
 * 
 * 
 * @param {!boolean=} opt_post 
 * @param {!boolean=} opt_apply 
 * @param {!boolean=} opt_delete 
 * @param {!string=} opt_action 
 * @param {!string=} opt_location 
 * @param {!Array<!string>=} opt_propertylist 
 * @param {!Array<!string>=} opt_hcTags 
 * @param {!angular.$http.Config=} opt_extraHttpRequestParams Extra HTTP parameters to send.
 * @return {!angular.$q.Promise<!API.Client.comAdobeGraniteRepositoryHcImplAuthorizableNodeNameHealthCheckInfo>}
 */
API.Client.ConfigmgrApi.prototype.comAdobeGraniteRepositoryHcImplAuthorizableNodeNameHealthCheck = function(opt_post, opt_apply, opt_delete, opt_action, opt_location, opt_propertylist, opt_hcTags, opt_extraHttpRequestParams) {
  /** @const {string} */
  var path = this.basePath_ + '/system/console/configMgr/com.adobe.granite.repository.hc.impl.AuthorizableNodeNameHealthCheck';

  /** @type {!Object} */
  var queryParameters = {};

  /** @type {!Object} */
  var headerParams = angular.extend({}, this.defaultHeaders_);
  if (opt_post !== undefined) {
    queryParameters['post'] = opt_post;
  }

  if (opt_apply !== undefined) {
    queryParameters['apply'] = opt_apply;
  }

  if (opt_delete !== undefined) {
    queryParameters['delete'] = opt_delete;
  }

  if (opt_action !== undefined) {
    queryParameters['action'] = opt_action;
  }

  if (opt_location !== undefined) {
    queryParameters['$location'] = opt_location;
  }

  if (opt_propertylist !== undefined) {
    queryParameters['propertylist'] = opt_propertylist;
  }

  if (opt_hcTags !== undefined) {
    queryParameters['hc.tags'] = opt_hcTags;
  }

  /** @type {!Object} */
  var httpRequestParams = {
    method: 'POST',
    url: path,
    json: true,
            params: queryParameters,
    headers: headerParams
  };

  if (opt_extraHttpRequestParams) {
    httpRequestParams = angular.extend(httpRequestParams, opt_extraHttpRequestParams);
  }

  return (/** @type {?} */ (this.http_))(httpRequestParams);
}

/**
 * 
 * 
 * @param {!boolean=} opt_post 
 * @param {!boolean=} opt_apply 
 * @param {!boolean=} opt_delete 
 * @param {!string=} opt_action 
 * @param {!string=} opt_location 
 * @param {!Array<!string>=} opt_propertylist 
 * @param {!Array<!string>=} opt_hcTags 
 * @param {!Array<!string>=} opt_excludeSearchPath 
 * @param {!angular.$http.Config=} opt_extraHttpRequestParams Extra HTTP parameters to send.
 * @return {!angular.$q.Promise<!API.Client.comAdobeGraniteRepositoryHcImplContentSlingSlingContentHealthCInfo>}
 */
API.Client.ConfigmgrApi.prototype.comAdobeGraniteRepositoryHcImplContentSlingSlingContentHealthC = function(opt_post, opt_apply, opt_delete, opt_action, opt_location, opt_propertylist, opt_hcTags, opt_excludeSearchPath, opt_extraHttpRequestParams) {
  /** @const {string} */
  var path = this.basePath_ + '/system/console/configMgr/com.adobe.granite.repository.hc.impl.content.sling.SlingContentHealthCheck';

  /** @type {!Object} */
  var queryParameters = {};

  /** @type {!Object} */
  var headerParams = angular.extend({}, this.defaultHeaders_);
  if (opt_post !== undefined) {
    queryParameters['post'] = opt_post;
  }

  if (opt_apply !== undefined) {
    queryParameters['apply'] = opt_apply;
  }

  if (opt_delete !== undefined) {
    queryParameters['delete'] = opt_delete;
  }

  if (opt_action !== undefined) {
    queryParameters['action'] = opt_action;
  }

  if (opt_location !== undefined) {
    queryParameters['$location'] = opt_location;
  }

  if (opt_propertylist !== undefined) {
    queryParameters['propertylist'] = opt_propertylist;
  }

  if (opt_hcTags !== undefined) {
    queryParameters['hc.tags'] = opt_hcTags;
  }

  if (opt_excludeSearchPath !== undefined) {
    queryParameters['exclude.search.path'] = opt_excludeSearchPath;
  }

  /** @type {!Object} */
  var httpRequestParams = {
    method: 'POST',
    url: path,
    json: true,
            params: queryParameters,
    headers: headerParams
  };

  if (opt_extraHttpRequestParams) {
    httpRequestParams = angular.extend(httpRequestParams, opt_extraHttpRequestParams);
  }

  return (/** @type {?} */ (this.http_))(httpRequestParams);
}

/**
 * 
 * 
 * @param {!boolean=} opt_post 
 * @param {!boolean=} opt_apply 
 * @param {!boolean=} opt_delete 
 * @param {!string=} opt_action 
 * @param {!string=} opt_location 
 * @param {!Array<!string>=} opt_propertylist 
 * @param {!Array<!string>=} opt_hcTags 
 * @param {!angular.$http.Config=} opt_extraHttpRequestParams Extra HTTP parameters to send.
 * @return {!angular.$q.Promise<!API.Client.comAdobeGraniteRepositoryHcImplContinuousRGCHealthCheckInfo>}
 */
API.Client.ConfigmgrApi.prototype.comAdobeGraniteRepositoryHcImplContinuousRGCHealthCheck = function(opt_post, opt_apply, opt_delete, opt_action, opt_location, opt_propertylist, opt_hcTags, opt_extraHttpRequestParams) {
  /** @const {string} */
  var path = this.basePath_ + '/system/console/configMgr/com.adobe.granite.repository.hc.impl.ContinuousRGCHealthCheck';

  /** @type {!Object} */
  var queryParameters = {};

  /** @type {!Object} */
  var headerParams = angular.extend({}, this.defaultHeaders_);
  if (opt_post !== undefined) {
    queryParameters['post'] = opt_post;
  }

  if (opt_apply !== undefined) {
    queryParameters['apply'] = opt_apply;
  }

  if (opt_delete !== undefined) {
    queryParameters['delete'] = opt_delete;
  }

  if (opt_action !== undefined) {
    queryParameters['action'] = opt_action;
  }

  if (opt_location !== undefined) {
    queryParameters['$location'] = opt_location;
  }

  if (opt_propertylist !== undefined) {
    queryParameters['propertylist'] = opt_propertylist;
  }

  if (opt_hcTags !== undefined) {
    queryParameters['hc.tags'] = opt_hcTags;
  }

  /** @type {!Object} */
  var httpRequestParams = {
    method: 'POST',
    url: path,
    json: true,
            params: queryParameters,
    headers: headerParams
  };

  if (opt_extraHttpRequestParams) {
    httpRequestParams = angular.extend(httpRequestParams, opt_extraHttpRequestParams);
  }

  return (/** @type {?} */ (this.http_))(httpRequestParams);
}

/**
 * 
 * 
 * @param {!boolean=} opt_post 
 * @param {!boolean=} opt_apply 
 * @param {!boolean=} opt_delete 
 * @param {!string=} opt_action 
 * @param {!string=} opt_location 
 * @param {!Array<!string>=} opt_propertylist 
 * @param {!Array<!string>=} opt_hcTags 
 * @param {!angular.$http.Config=} opt_extraHttpRequestParams Extra HTTP parameters to send.
 * @return {!angular.$q.Promise<!API.Client.comAdobeGraniteRepositoryHcImplDefaultAccessUserProfileHealthCheInfo>}
 */
API.Client.ConfigmgrApi.prototype.comAdobeGraniteRepositoryHcImplDefaultAccessUserProfileHealthChe = function(opt_post, opt_apply, opt_delete, opt_action, opt_location, opt_propertylist, opt_hcTags, opt_extraHttpRequestParams) {
  /** @const {string} */
  var path = this.basePath_ + '/system/console/configMgr/com.adobe.granite.repository.hc.impl.DefaultAccessUserProfileHealthCheck';

  /** @type {!Object} */
  var queryParameters = {};

  /** @type {!Object} */
  var headerParams = angular.extend({}, this.defaultHeaders_);
  if (opt_post !== undefined) {
    queryParameters['post'] = opt_post;
  }

  if (opt_apply !== undefined) {
    queryParameters['apply'] = opt_apply;
  }

  if (opt_delete !== undefined) {
    queryParameters['delete'] = opt_delete;
  }

  if (opt_action !== undefined) {
    queryParameters['action'] = opt_action;
  }

  if (opt_location !== undefined) {
    queryParameters['$location'] = opt_location;
  }

  if (opt_propertylist !== undefined) {
    queryParameters['propertylist'] = opt_propertylist;
  }

  if (opt_hcTags !== undefined) {
    queryParameters['hc.tags'] = opt_hcTags;
  }

  /** @type {!Object} */
  var httpRequestParams = {
    method: 'POST',
    url: path,
    json: true,
            params: queryParameters,
    headers: headerParams
  };

  if (opt_extraHttpRequestParams) {
    httpRequestParams = angular.extend(httpRequestParams, opt_extraHttpRequestParams);
  }

  return (/** @type {?} */ (this.http_))(httpRequestParams);
}

/**
 * 
 * 
 * @param {!boolean=} opt_post 
 * @param {!boolean=} opt_apply 
 * @param {!boolean=} opt_delete 
 * @param {!string=} opt_action 
 * @param {!string=} opt_location 
 * @param {!Array<!string>=} opt_propertylist 
 * @param {!Array<!string>=} opt_hcTags 
 * @param {!Array<!string>=} opt_accountLogins 
 * @param {!Array<!string>=} opt_consoleLogins 
 * @param {!angular.$http.Config=} opt_extraHttpRequestParams Extra HTTP parameters to send.
 * @return {!angular.$q.Promise<!API.Client.comAdobeGraniteRepositoryHcImplDefaultLoginsHealthCheckInfo>}
 */
API.Client.ConfigmgrApi.prototype.comAdobeGraniteRepositoryHcImplDefaultLoginsHealthCheck = function(opt_post, opt_apply, opt_delete, opt_action, opt_location, opt_propertylist, opt_hcTags, opt_accountLogins, opt_consoleLogins, opt_extraHttpRequestParams) {
  /** @const {string} */
  var path = this.basePath_ + '/system/console/configMgr/com.adobe.granite.repository.hc.impl.DefaultLoginsHealthCheck';

  /** @type {!Object} */
  var queryParameters = {};

  /** @type {!Object} */
  var headerParams = angular.extend({}, this.defaultHeaders_);
  if (opt_post !== undefined) {
    queryParameters['post'] = opt_post;
  }

  if (opt_apply !== undefined) {
    queryParameters['apply'] = opt_apply;
  }

  if (opt_delete !== undefined) {
    queryParameters['delete'] = opt_delete;
  }

  if (opt_action !== undefined) {
    queryParameters['action'] = opt_action;
  }

  if (opt_location !== undefined) {
    queryParameters['$location'] = opt_location;
  }

  if (opt_propertylist !== undefined) {
    queryParameters['propertylist'] = opt_propertylist;
  }

  if (opt_hcTags !== undefined) {
    queryParameters['hc.tags'] = opt_hcTags;
  }

  if (opt_accountLogins !== undefined) {
    queryParameters['account.logins'] = opt_accountLogins;
  }

  if (opt_consoleLogins !== undefined) {
    queryParameters['console.logins'] = opt_consoleLogins;
  }

  /** @type {!Object} */
  var httpRequestParams = {
    method: 'POST',
    url: path,
    json: true,
            params: queryParameters,
    headers: headerParams
  };

  if (opt_extraHttpRequestParams) {
    httpRequestParams = angular.extend(httpRequestParams, opt_extraHttpRequestParams);
  }

  return (/** @type {?} */ (this.http_))(httpRequestParams);
}

/**
 * 
 * 
 * @param {!boolean=} opt_post 
 * @param {!boolean=} opt_apply 
 * @param {!boolean=} opt_delete 
 * @param {!string=} opt_action 
 * @param {!string=} opt_location 
 * @param {!Array<!string>=} opt_propertylist 
 * @param {!Array<!string>=} opt_hcTags 
 * @param {!number=} opt_diskSpaceWarnThreshold 
 * @param {!number=} opt_diskSpaceErrorThreshold 
 * @param {!angular.$http.Config=} opt_extraHttpRequestParams Extra HTTP parameters to send.
 * @return {!angular.$q.Promise<!API.Client.comAdobeGraniteRepositoryHcImplDiskSpaceHealthCheckInfo>}
 */
API.Client.ConfigmgrApi.prototype.comAdobeGraniteRepositoryHcImplDiskSpaceHealthCheck = function(opt_post, opt_apply, opt_delete, opt_action, opt_location, opt_propertylist, opt_hcTags, opt_diskSpaceWarnThreshold, opt_diskSpaceErrorThreshold, opt_extraHttpRequestParams) {
  /** @const {string} */
  var path = this.basePath_ + '/system/console/configMgr/com.adobe.granite.repository.hc.impl.DiskSpaceHealthCheck';

  /** @type {!Object} */
  var queryParameters = {};

  /** @type {!Object} */
  var headerParams = angular.extend({}, this.defaultHeaders_);
  if (opt_post !== undefined) {
    queryParameters['post'] = opt_post;
  }

  if (opt_apply !== undefined) {
    queryParameters['apply'] = opt_apply;
  }

  if (opt_delete !== undefined) {
    queryParameters['delete'] = opt_delete;
  }

  if (opt_action !== undefined) {
    queryParameters['action'] = opt_action;
  }

  if (opt_location !== undefined) {
    queryParameters['$location'] = opt_location;
  }

  if (opt_propertylist !== undefined) {
    queryParameters['propertylist'] = opt_propertylist;
  }

  if (opt_hcTags !== undefined) {
    queryParameters['hc.tags'] = opt_hcTags;
  }

  if (opt_diskSpaceWarnThreshold !== undefined) {
    queryParameters['disk.space.warn.threshold'] = opt_diskSpaceWarnThreshold;
  }

  if (opt_diskSpaceErrorThreshold !== undefined) {
    queryParameters['disk.space.error.threshold'] = opt_diskSpaceErrorThreshold;
  }

  /** @type {!Object} */
  var httpRequestParams = {
    method: 'POST',
    url: path,
    json: true,
            params: queryParameters,
    headers: headerParams
  };

  if (opt_extraHttpRequestParams) {
    httpRequestParams = angular.extend(httpRequestParams, opt_extraHttpRequestParams);
  }

  return (/** @type {?} */ (this.http_))(httpRequestParams);
}

/**
 * 
 * 
 * @param {!boolean=} opt_post 
 * @param {!boolean=} opt_apply 
 * @param {!boolean=} opt_delete 
 * @param {!string=} opt_action 
 * @param {!string=} opt_location 
 * @param {!Array<!string>=} opt_propertylist 
 * @param {!Array<!string>=} opt_hcTags 
 * @param {!angular.$http.Config=} opt_extraHttpRequestParams Extra HTTP parameters to send.
 * @return {!angular.$q.Promise<!API.Client.comAdobeGraniteRepositoryHcImplObservationQueueLengthHealthCheckInfo>}
 */
API.Client.ConfigmgrApi.prototype.comAdobeGraniteRepositoryHcImplObservationQueueLengthHealthCheck = function(opt_post, opt_apply, opt_delete, opt_action, opt_location, opt_propertylist, opt_hcTags, opt_extraHttpRequestParams) {
  /** @const {string} */
  var path = this.basePath_ + '/system/console/configMgr/com.adobe.granite.repository.hc.impl.ObservationQueueLengthHealthCheck';

  /** @type {!Object} */
  var queryParameters = {};

  /** @type {!Object} */
  var headerParams = angular.extend({}, this.defaultHeaders_);
  if (opt_post !== undefined) {
    queryParameters['post'] = opt_post;
  }

  if (opt_apply !== undefined) {
    queryParameters['apply'] = opt_apply;
  }

  if (opt_delete !== undefined) {
    queryParameters['delete'] = opt_delete;
  }

  if (opt_action !== undefined) {
    queryParameters['action'] = opt_action;
  }

  if (opt_location !== undefined) {
    queryParameters['$location'] = opt_location;
  }

  if (opt_propertylist !== undefined) {
    queryParameters['propertylist'] = opt_propertylist;
  }

  if (opt_hcTags !== undefined) {
    queryParameters['hc.tags'] = opt_hcTags;
  }

  /** @type {!Object} */
  var httpRequestParams = {
    method: 'POST',
    url: path,
    json: true,
            params: queryParameters,
    headers: headerParams
  };

  if (opt_extraHttpRequestParams) {
    httpRequestParams = angular.extend(httpRequestParams, opt_extraHttpRequestParams);
  }

  return (/** @type {?} */ (this.http_))(httpRequestParams);
}

/**
 * 
 * 
 * @param {!boolean=} opt_post 
 * @param {!boolean=} opt_apply 
 * @param {!boolean=} opt_delete 
 * @param {!string=} opt_action 
 * @param {!string=} opt_location 
 * @param {!Array<!string>=} opt_propertylist 
 * @param {!boolean=} opt_enabled 
 * @param {!number=} opt_intervalSeconds 
 * @param {!number=} opt_commitsPerIntervalThreshold 
 * @param {!number=} opt_maxLocationLength 
 * @param {!number=} opt_maxDetailsShown 
 * @param {!number=} opt_minDetailsPercentage 
 * @param {!Array<!string>=} opt_threadMatchers 
 * @param {!number=} opt_maxGreedyDepth 
 * @param {!string=} opt_greedyStackMatchers 
 * @param {!Array<!string>=} opt_stackFilters 
 * @param {!Array<!string>=} opt_stackMatchers 
 * @param {!Array<!string>=} opt_stackCategorizers 
 * @param {!Array<!string>=} opt_stackShorteners 
 * @param {!angular.$http.Config=} opt_extraHttpRequestParams Extra HTTP parameters to send.
 * @return {!angular.$q.Promise<!API.Client.comAdobeGraniteRepositoryImplCommitStatsConfigInfo>}
 */
API.Client.ConfigmgrApi.prototype.comAdobeGraniteRepositoryImplCommitStatsConfig = function(opt_post, opt_apply, opt_delete, opt_action, opt_location, opt_propertylist, opt_enabled, opt_intervalSeconds, opt_commitsPerIntervalThreshold, opt_maxLocationLength, opt_maxDetailsShown, opt_minDetailsPercentage, opt_threadMatchers, opt_maxGreedyDepth, opt_greedyStackMatchers, opt_stackFilters, opt_stackMatchers, opt_stackCategorizers, opt_stackShorteners, opt_extraHttpRequestParams) {
  /** @const {string} */
  var path = this.basePath_ + '/system/console/configMgr/com.adobe.granite.repository.impl.CommitStatsConfig';

  /** @type {!Object} */
  var queryParameters = {};

  /** @type {!Object} */
  var headerParams = angular.extend({}, this.defaultHeaders_);
  if (opt_post !== undefined) {
    queryParameters['post'] = opt_post;
  }

  if (opt_apply !== undefined) {
    queryParameters['apply'] = opt_apply;
  }

  if (opt_delete !== undefined) {
    queryParameters['delete'] = opt_delete;
  }

  if (opt_action !== undefined) {
    queryParameters['action'] = opt_action;
  }

  if (opt_location !== undefined) {
    queryParameters['$location'] = opt_location;
  }

  if (opt_propertylist !== undefined) {
    queryParameters['propertylist'] = opt_propertylist;
  }

  if (opt_enabled !== undefined) {
    queryParameters['enabled'] = opt_enabled;
  }

  if (opt_intervalSeconds !== undefined) {
    queryParameters['intervalSeconds'] = opt_intervalSeconds;
  }

  if (opt_commitsPerIntervalThreshold !== undefined) {
    queryParameters['commitsPerIntervalThreshold'] = opt_commitsPerIntervalThreshold;
  }

  if (opt_maxLocationLength !== undefined) {
    queryParameters['maxLocationLength'] = opt_maxLocationLength;
  }

  if (opt_maxDetailsShown !== undefined) {
    queryParameters['maxDetailsShown'] = opt_maxDetailsShown;
  }

  if (opt_minDetailsPercentage !== undefined) {
    queryParameters['minDetailsPercentage'] = opt_minDetailsPercentage;
  }

  if (opt_threadMatchers !== undefined) {
    queryParameters['threadMatchers'] = opt_threadMatchers;
  }

  if (opt_maxGreedyDepth !== undefined) {
    queryParameters['maxGreedyDepth'] = opt_maxGreedyDepth;
  }

  if (opt_greedyStackMatchers !== undefined) {
    queryParameters['greedyStackMatchers'] = opt_greedyStackMatchers;
  }

  if (opt_stackFilters !== undefined) {
    queryParameters['stackFilters'] = opt_stackFilters;
  }

  if (opt_stackMatchers !== undefined) {
    queryParameters['stackMatchers'] = opt_stackMatchers;
  }

  if (opt_stackCategorizers !== undefined) {
    queryParameters['stackCategorizers'] = opt_stackCategorizers;
  }

  if (opt_stackShorteners !== undefined) {
    queryParameters['stackShorteners'] = opt_stackShorteners;
  }

  /** @type {!Object} */
  var httpRequestParams = {
    method: 'POST',
    url: path,
    json: true,
            params: queryParameters,
    headers: headerParams
  };

  if (opt_extraHttpRequestParams) {
    httpRequestParams = angular.extend(httpRequestParams, opt_extraHttpRequestParams);
  }

  return (/** @type {?} */ (this.http_))(httpRequestParams);
}

/**
 * 
 * 
 * @param {!boolean=} opt_post 
 * @param {!boolean=} opt_apply 
 * @param {!boolean=} opt_delete 
 * @param {!string=} opt_action 
 * @param {!string=} opt_location 
 * @param {!Array<!string>=} opt_propertylist 
 * @param {!number=} opt_serviceRanking 
 * @param {!boolean=} opt_serviceusersSimpleSubjectPopulation 
 * @param {!Array<!string>=} opt_serviceusersList 
 * @param {!angular.$http.Config=} opt_extraHttpRequestParams Extra HTTP parameters to send.
 * @return {!angular.$q.Promise<!API.Client.comAdobeGraniteRepositoryServiceUserConfigurationInfo>}
 */
API.Client.ConfigmgrApi.prototype.comAdobeGraniteRepositoryServiceUserConfiguration = function(opt_post, opt_apply, opt_delete, opt_action, opt_location, opt_propertylist, opt_serviceRanking, opt_serviceusersSimpleSubjectPopulation, opt_serviceusersList, opt_extraHttpRequestParams) {
  /** @const {string} */
  var path = this.basePath_ + '/system/console/configMgr/com.adobe.granite.repository.ServiceUserConfiguration';

  /** @type {!Object} */
  var queryParameters = {};

  /** @type {!Object} */
  var headerParams = angular.extend({}, this.defaultHeaders_);
  if (opt_post !== undefined) {
    queryParameters['post'] = opt_post;
  }

  if (opt_apply !== undefined) {
    queryParameters['apply'] = opt_apply;
  }

  if (opt_delete !== undefined) {
    queryParameters['delete'] = opt_delete;
  }

  if (opt_action !== undefined) {
    queryParameters['action'] = opt_action;
  }

  if (opt_location !== undefined) {
    queryParameters['$location'] = opt_location;
  }

  if (opt_propertylist !== undefined) {
    queryParameters['propertylist'] = opt_propertylist;
  }

  if (opt_serviceRanking !== undefined) {
    queryParameters['service.ranking'] = opt_serviceRanking;
  }

  if (opt_serviceusersSimpleSubjectPopulation !== undefined) {
    queryParameters['serviceusers.simpleSubjectPopulation'] = opt_serviceusersSimpleSubjectPopulation;
  }

  if (opt_serviceusersList !== undefined) {
    queryParameters['serviceusers.list'] = opt_serviceusersList;
  }

  /** @type {!Object} */
  var httpRequestParams = {
    method: 'POST',
    url: path,
    json: true,
            params: queryParameters,
    headers: headerParams
  };

  if (opt_extraHttpRequestParams) {
    httpRequestParams = angular.extend(httpRequestParams, opt_extraHttpRequestParams);
  }

  return (/** @type {?} */ (this.http_))(httpRequestParams);
}

/**
 * 
 * 
 * @param {!boolean=} opt_post 
 * @param {!boolean=} opt_apply 
 * @param {!boolean=} opt_delete 
 * @param {!string=} opt_action 
 * @param {!string=} opt_location 
 * @param {!Array<!string>=} opt_propertylist 
 * @param {!Array<!string>=} opt_hcTags 
 * @param {!angular.$http.Config=} opt_extraHttpRequestParams Extra HTTP parameters to send.
 * @return {!angular.$q.Promise<!API.Client.comAdobeGraniteRequestsLoggingImplHcRequestsStatusHealthCheckImInfo>}
 */
API.Client.ConfigmgrApi.prototype.comAdobeGraniteRequestsLoggingImplHcRequestsStatusHealthCheckIm = function(opt_post, opt_apply, opt_delete, opt_action, opt_location, opt_propertylist, opt_hcTags, opt_extraHttpRequestParams) {
  /** @const {string} */
  var path = this.basePath_ + '/system/console/configMgr/com.adobe.granite.requests.logging.impl.hc.RequestsStatusHealthCheckImpl';

  /** @type {!Object} */
  var queryParameters = {};

  /** @type {!Object} */
  var headerParams = angular.extend({}, this.defaultHeaders_);
  if (opt_post !== undefined) {
    queryParameters['post'] = opt_post;
  }

  if (opt_apply !== undefined) {
    queryParameters['apply'] = opt_apply;
  }

  if (opt_delete !== undefined) {
    queryParameters['delete'] = opt_delete;
  }

  if (opt_action !== undefined) {
    queryParameters['action'] = opt_action;
  }

  if (opt_location !== undefined) {
    queryParameters['$location'] = opt_location;
  }

  if (opt_propertylist !== undefined) {
    queryParameters['propertylist'] = opt_propertylist;
  }

  if (opt_hcTags !== undefined) {
    queryParameters['hc.tags'] = opt_hcTags;
  }

  /** @type {!Object} */
  var httpRequestParams = {
    method: 'POST',
    url: path,
    json: true,
            params: queryParameters,
    headers: headerParams
  };

  if (opt_extraHttpRequestParams) {
    httpRequestParams = angular.extend(httpRequestParams, opt_extraHttpRequestParams);
  }

  return (/** @type {?} */ (this.http_))(httpRequestParams);
}

/**
 * 
 * 
 * @param {!boolean=} opt_post 
 * @param {!boolean=} opt_apply 
 * @param {!boolean=} opt_delete 
 * @param {!string=} opt_action 
 * @param {!string=} opt_location 
 * @param {!Array<!string>=} opt_propertylist 
 * @param {!string=} opt_name 
 * @param {!Array<!string>=} opt_types 
 * @param {!angular.$http.Config=} opt_extraHttpRequestParams Extra HTTP parameters to send.
 * @return {!angular.$q.Promise<!API.Client.comAdobeGraniteResourcestatusImplCompositeStatusTypeInfo>}
 */
API.Client.ConfigmgrApi.prototype.comAdobeGraniteResourcestatusImplCompositeStatusType = function(opt_post, opt_apply, opt_delete, opt_action, opt_location, opt_propertylist, opt_name, opt_types, opt_extraHttpRequestParams) {
  /** @const {string} */
  var path = this.basePath_ + '/system/console/configMgr/com.adobe.granite.resourcestatus.impl.CompositeStatusType';

  /** @type {!Object} */
  var queryParameters = {};

  /** @type {!Object} */
  var headerParams = angular.extend({}, this.defaultHeaders_);
  if (opt_post !== undefined) {
    queryParameters['post'] = opt_post;
  }

  if (opt_apply !== undefined) {
    queryParameters['apply'] = opt_apply;
  }

  if (opt_delete !== undefined) {
    queryParameters['delete'] = opt_delete;
  }

  if (opt_action !== undefined) {
    queryParameters['action'] = opt_action;
  }

  if (opt_location !== undefined) {
    queryParameters['$location'] = opt_location;
  }

  if (opt_propertylist !== undefined) {
    queryParameters['propertylist'] = opt_propertylist;
  }

  if (opt_name !== undefined) {
    queryParameters['name'] = opt_name;
  }

  if (opt_types !== undefined) {
    queryParameters['types'] = opt_types;
  }

  /** @type {!Object} */
  var httpRequestParams = {
    method: 'POST',
    url: path,
    json: true,
            params: queryParameters,
    headers: headerParams
  };

  if (opt_extraHttpRequestParams) {
    httpRequestParams = angular.extend(httpRequestParams, opt_extraHttpRequestParams);
  }

  return (/** @type {?} */ (this.http_))(httpRequestParams);
}

/**
 * 
 * 
 * @param {!boolean=} opt_post 
 * @param {!boolean=} opt_apply 
 * @param {!boolean=} opt_delete 
 * @param {!string=} opt_action 
 * @param {!string=} opt_location 
 * @param {!Array<!string>=} opt_propertylist 
 * @param {!string=} opt_providerRoot 
 * @param {!angular.$http.Config=} opt_extraHttpRequestParams Extra HTTP parameters to send.
 * @return {!angular.$q.Promise<!API.Client.comAdobeGraniteResourcestatusImplStatusResourceProviderImplInfo>}
 */
API.Client.ConfigmgrApi.prototype.comAdobeGraniteResourcestatusImplStatusResourceProviderImpl = function(opt_post, opt_apply, opt_delete, opt_action, opt_location, opt_propertylist, opt_providerRoot, opt_extraHttpRequestParams) {
  /** @const {string} */
  var path = this.basePath_ + '/system/console/configMgr/com.adobe.granite.resourcestatus.impl.StatusResourceProviderImpl';

  /** @type {!Object} */
  var queryParameters = {};

  /** @type {!Object} */
  var headerParams = angular.extend({}, this.defaultHeaders_);
  if (opt_post !== undefined) {
    queryParameters['post'] = opt_post;
  }

  if (opt_apply !== undefined) {
    queryParameters['apply'] = opt_apply;
  }

  if (opt_delete !== undefined) {
    queryParameters['delete'] = opt_delete;
  }

  if (opt_action !== undefined) {
    queryParameters['action'] = opt_action;
  }

  if (opt_location !== undefined) {
    queryParameters['$location'] = opt_location;
  }

  if (opt_propertylist !== undefined) {
    queryParameters['propertylist'] = opt_propertylist;
  }

  if (opt_providerRoot !== undefined) {
    queryParameters['provider.root'] = opt_providerRoot;
  }

  /** @type {!Object} */
  var httpRequestParams = {
    method: 'POST',
    url: path,
    json: true,
            params: queryParameters,
    headers: headerParams
  };

  if (opt_extraHttpRequestParams) {
    httpRequestParams = angular.extend(httpRequestParams, opt_extraHttpRequestParams);
  }

  return (/** @type {?} */ (this.http_))(httpRequestParams);
}

/**
 * 
 * 
 * @param {!boolean=} opt_post 
 * @param {!boolean=} opt_apply 
 * @param {!boolean=} opt_delete 
 * @param {!string=} opt_action 
 * @param {!string=} opt_location 
 * @param {!Array<!string>=} opt_propertylist 
 * @param {!boolean=} opt_mimeAllowEmpty 
 * @param {!Array<!string>=} opt_mimeAllowed 
 * @param {!angular.$http.Config=} opt_extraHttpRequestParams Extra HTTP parameters to send.
 * @return {!angular.$q.Promise<!API.Client.comAdobeGraniteRestAssetsImplAssetContentDispositionFilterInfo>}
 */
API.Client.ConfigmgrApi.prototype.comAdobeGraniteRestAssetsImplAssetContentDispositionFilter = function(opt_post, opt_apply, opt_delete, opt_action, opt_location, opt_propertylist, opt_mimeAllowEmpty, opt_mimeAllowed, opt_extraHttpRequestParams) {
  /** @const {string} */
  var path = this.basePath_ + '/system/console/configMgr/com.adobe.granite.rest.assets.impl.AssetContentDispositionFilter';

  /** @type {!Object} */
  var queryParameters = {};

  /** @type {!Object} */
  var headerParams = angular.extend({}, this.defaultHeaders_);
  if (opt_post !== undefined) {
    queryParameters['post'] = opt_post;
  }

  if (opt_apply !== undefined) {
    queryParameters['apply'] = opt_apply;
  }

  if (opt_delete !== undefined) {
    queryParameters['delete'] = opt_delete;
  }

  if (opt_action !== undefined) {
    queryParameters['action'] = opt_action;
  }

  if (opt_location !== undefined) {
    queryParameters['$location'] = opt_location;
  }

  if (opt_propertylist !== undefined) {
    queryParameters['propertylist'] = opt_propertylist;
  }

  if (opt_mimeAllowEmpty !== undefined) {
    queryParameters['mime.allowEmpty'] = opt_mimeAllowEmpty;
  }

  if (opt_mimeAllowed !== undefined) {
    queryParameters['mime.allowed'] = opt_mimeAllowed;
  }

  /** @type {!Object} */
  var httpRequestParams = {
    method: 'POST',
    url: path,
    json: true,
            params: queryParameters,
    headers: headerParams
  };

  if (opt_extraHttpRequestParams) {
    httpRequestParams = angular.extend(httpRequestParams, opt_extraHttpRequestParams);
  }

  return (/** @type {?} */ (this.http_))(httpRequestParams);
}

/**
 * 
 * 
 * @param {!boolean=} opt_post 
 * @param {!boolean=} opt_apply 
 * @param {!boolean=} opt_delete 
 * @param {!string=} opt_action 
 * @param {!string=} opt_location 
 * @param {!Array<!string>=} opt_propertylist 
 * @param {!string=} opt_providerRoots 
 * @param {!angular.$http.Config=} opt_extraHttpRequestParams Extra HTTP parameters to send.
 * @return {!angular.$q.Promise<!API.Client.comAdobeGraniteRestImplApiEndpointResourceProviderFactoryImplInfo>}
 */
API.Client.ConfigmgrApi.prototype.comAdobeGraniteRestImplApiEndpointResourceProviderFactoryImpl = function(opt_post, opt_apply, opt_delete, opt_action, opt_location, opt_propertylist, opt_providerRoots, opt_extraHttpRequestParams) {
  /** @const {string} */
  var path = this.basePath_ + '/system/console/configMgr/com.adobe.granite.rest.impl.ApiEndpointResourceProviderFactoryImpl';

  /** @type {!Object} */
  var queryParameters = {};

  /** @type {!Object} */
  var headerParams = angular.extend({}, this.defaultHeaders_);
  if (opt_post !== undefined) {
    queryParameters['post'] = opt_post;
  }

  if (opt_apply !== undefined) {
    queryParameters['apply'] = opt_apply;
  }

  if (opt_delete !== undefined) {
    queryParameters['delete'] = opt_delete;
  }

  if (opt_action !== undefined) {
    queryParameters['action'] = opt_action;
  }

  if (opt_location !== undefined) {
    queryParameters['$location'] = opt_location;
  }

  if (opt_propertylist !== undefined) {
    queryParameters['propertylist'] = opt_propertylist;
  }

  if (opt_providerRoots !== undefined) {
    queryParameters['provider.roots'] = opt_providerRoots;
  }

  /** @type {!Object} */
  var httpRequestParams = {
    method: 'POST',
    url: path,
    json: true,
            params: queryParameters,
    headers: headerParams
  };

  if (opt_extraHttpRequestParams) {
    httpRequestParams = angular.extend(httpRequestParams, opt_extraHttpRequestParams);
  }

  return (/** @type {?} */ (this.http_))(httpRequestParams);
}

/**
 * 
 * 
 * @param {!boolean=} opt_post 
 * @param {!boolean=} opt_apply 
 * @param {!boolean=} opt_delete 
 * @param {!string=} opt_action 
 * @param {!string=} opt_location 
 * @param {!Array<!string>=} opt_propertylist 
 * @param {!number=} opt_defaultLimit 
 * @param {!boolean=} opt_useAbsoluteUri 
 * @param {!angular.$http.Config=} opt_extraHttpRequestParams Extra HTTP parameters to send.
 * @return {!angular.$q.Promise<!API.Client.comAdobeGraniteRestImplServletDefaultGETServletInfo>}
 */
API.Client.ConfigmgrApi.prototype.comAdobeGraniteRestImplServletDefaultGETServlet = function(opt_post, opt_apply, opt_delete, opt_action, opt_location, opt_propertylist, opt_defaultLimit, opt_useAbsoluteUri, opt_extraHttpRequestParams) {
  /** @const {string} */
  var path = this.basePath_ + '/system/console/configMgr/com.adobe.granite.rest.impl.servlet.DefaultGETServlet';

  /** @type {!Object} */
  var queryParameters = {};

  /** @type {!Object} */
  var headerParams = angular.extend({}, this.defaultHeaders_);
  if (opt_post !== undefined) {
    queryParameters['post'] = opt_post;
  }

  if (opt_apply !== undefined) {
    queryParameters['apply'] = opt_apply;
  }

  if (opt_delete !== undefined) {
    queryParameters['delete'] = opt_delete;
  }

  if (opt_action !== undefined) {
    queryParameters['action'] = opt_action;
  }

  if (opt_location !== undefined) {
    queryParameters['$location'] = opt_location;
  }

  if (opt_propertylist !== undefined) {
    queryParameters['propertylist'] = opt_propertylist;
  }

  if (opt_defaultLimit !== undefined) {
    queryParameters['default.limit'] = opt_defaultLimit;
  }

  if (opt_useAbsoluteUri !== undefined) {
    queryParameters['use.absolute.uri'] = opt_useAbsoluteUri;
  }

  /** @type {!Object} */
  var httpRequestParams = {
    method: 'POST',
    url: path,
    json: true,
            params: queryParameters,
    headers: headerParams
  };

  if (opt_extraHttpRequestParams) {
    httpRequestParams = angular.extend(httpRequestParams, opt_extraHttpRequestParams);
  }

  return (/** @type {?} */ (this.http_))(httpRequestParams);
}

/**
 * 
 * 
 * @param {!boolean=} opt_post 
 * @param {!boolean=} opt_apply 
 * @param {!boolean=} opt_delete 
 * @param {!string=} opt_action 
 * @param {!string=} opt_location 
 * @param {!Array<!string>=} opt_propertylist 
 * @param {!Array<!string>=} opt_hcTags 
 * @param {!angular.$http.Config=} opt_extraHttpRequestParams Extra HTTP parameters to send.
 * @return {!angular.$q.Promise<!API.Client.comAdobeGraniteSecurityUserUiInternalServletsSSLConfigurationSInfo>}
 */
API.Client.ConfigmgrApi.prototype.comAdobeGraniteSecurityUserUiInternalServletsSSLConfigurationS = function(opt_post, opt_apply, opt_delete, opt_action, opt_location, opt_propertylist, opt_hcTags, opt_extraHttpRequestParams) {
  /** @const {string} */
  var path = this.basePath_ + '/system/console/configMgr/com.adobe.granite.security.user.ui.internal.servlets.SSLConfigurationServlet';

  /** @type {!Object} */
  var queryParameters = {};

  /** @type {!Object} */
  var headerParams = angular.extend({}, this.defaultHeaders_);
  if (opt_post !== undefined) {
    queryParameters['post'] = opt_post;
  }

  if (opt_apply !== undefined) {
    queryParameters['apply'] = opt_apply;
  }

  if (opt_delete !== undefined) {
    queryParameters['delete'] = opt_delete;
  }

  if (opt_action !== undefined) {
    queryParameters['action'] = opt_action;
  }

  if (opt_location !== undefined) {
    queryParameters['$location'] = opt_location;
  }

  if (opt_propertylist !== undefined) {
    queryParameters['propertylist'] = opt_propertylist;
  }

  if (opt_hcTags !== undefined) {
    queryParameters['hc.tags'] = opt_hcTags;
  }

  /** @type {!Object} */
  var httpRequestParams = {
    method: 'POST',
    url: path,
    json: true,
            params: queryParameters,
    headers: headerParams
  };

  if (opt_extraHttpRequestParams) {
    httpRequestParams = angular.extend(httpRequestParams, opt_extraHttpRequestParams);
  }

  return (/** @type {?} */ (this.http_))(httpRequestParams);
}

/**
 * 
 * 
 * @param {!boolean=} opt_post 
 * @param {!boolean=} opt_apply 
 * @param {!boolean=} opt_delete 
 * @param {!string=} opt_action 
 * @param {!string=} opt_location 
 * @param {!Array<!string>=} opt_propertylist 
 * @param {!string=} opt_adapterCondition 
 * @param {!Array<!string>=} opt_graniteUserpropertiesNodetypes 
 * @param {!Array<!string>=} opt_graniteUserpropertiesResourcetypes 
 * @param {!angular.$http.Config=} opt_extraHttpRequestParams Extra HTTP parameters to send.
 * @return {!angular.$q.Promise<!API.Client.comAdobeGraniteSecurityUserUserPropertiesServiceInfo>}
 */
API.Client.ConfigmgrApi.prototype.comAdobeGraniteSecurityUserUserPropertiesService = function(opt_post, opt_apply, opt_delete, opt_action, opt_location, opt_propertylist, opt_adapterCondition, opt_graniteUserpropertiesNodetypes, opt_graniteUserpropertiesResourcetypes, opt_extraHttpRequestParams) {
  /** @const {string} */
  var path = this.basePath_ + '/system/console/configMgr/com.adobe.granite.security.user.UserPropertiesService';

  /** @type {!Object} */
  var queryParameters = {};

  /** @type {!Object} */
  var headerParams = angular.extend({}, this.defaultHeaders_);
  if (opt_post !== undefined) {
    queryParameters['post'] = opt_post;
  }

  if (opt_apply !== undefined) {
    queryParameters['apply'] = opt_apply;
  }

  if (opt_delete !== undefined) {
    queryParameters['delete'] = opt_delete;
  }

  if (opt_action !== undefined) {
    queryParameters['action'] = opt_action;
  }

  if (opt_location !== undefined) {
    queryParameters['$location'] = opt_location;
  }

  if (opt_propertylist !== undefined) {
    queryParameters['propertylist'] = opt_propertylist;
  }

  if (opt_adapterCondition !== undefined) {
    queryParameters['adapter.condition'] = opt_adapterCondition;
  }

  if (opt_graniteUserpropertiesNodetypes !== undefined) {
    queryParameters['granite.userproperties.nodetypes'] = opt_graniteUserpropertiesNodetypes;
  }

  if (opt_graniteUserpropertiesResourcetypes !== undefined) {
    queryParameters['granite.userproperties.resourcetypes'] = opt_graniteUserpropertiesResourcetypes;
  }

  /** @type {!Object} */
  var httpRequestParams = {
    method: 'POST',
    url: path,
    json: true,
            params: queryParameters,
    headers: headerParams
  };

  if (opt_extraHttpRequestParams) {
    httpRequestParams = angular.extend(httpRequestParams, opt_extraHttpRequestParams);
  }

  return (/** @type {?} */ (this.http_))(httpRequestParams);
}

/**
 * 
 * 
 * @param {!boolean=} opt_post 
 * @param {!boolean=} opt_apply 
 * @param {!boolean=} opt_delete 
 * @param {!string=} opt_action 
 * @param {!string=} opt_location 
 * @param {!Array<!string>=} opt_propertylist 
 * @param {!string=} opt_group2memberRelationshipOutgoing 
 * @param {!Array<!string>=} opt_group2memberExcludedOutgoing 
 * @param {!string=} opt_group2memberRelationshipIncoming 
 * @param {!Array<!string>=} opt_group2memberExcludedIncoming 
 * @param {!angular.$http.Config=} opt_extraHttpRequestParams Extra HTTP parameters to send.
 * @return {!angular.$q.Promise<!API.Client.comAdobeGraniteSocialgraphImplSocialGraphFactoryImplInfo>}
 */
API.Client.ConfigmgrApi.prototype.comAdobeGraniteSocialgraphImplSocialGraphFactoryImpl = function(opt_post, opt_apply, opt_delete, opt_action, opt_location, opt_propertylist, opt_group2memberRelationshipOutgoing, opt_group2memberExcludedOutgoing, opt_group2memberRelationshipIncoming, opt_group2memberExcludedIncoming, opt_extraHttpRequestParams) {
  /** @const {string} */
  var path = this.basePath_ + '/system/console/configMgr/com.adobe.granite.socialgraph.impl.SocialGraphFactoryImpl';

  /** @type {!Object} */
  var queryParameters = {};

  /** @type {!Object} */
  var headerParams = angular.extend({}, this.defaultHeaders_);
  if (opt_post !== undefined) {
    queryParameters['post'] = opt_post;
  }

  if (opt_apply !== undefined) {
    queryParameters['apply'] = opt_apply;
  }

  if (opt_delete !== undefined) {
    queryParameters['delete'] = opt_delete;
  }

  if (opt_action !== undefined) {
    queryParameters['action'] = opt_action;
  }

  if (opt_location !== undefined) {
    queryParameters['$location'] = opt_location;
  }

  if (opt_propertylist !== undefined) {
    queryParameters['propertylist'] = opt_propertylist;
  }

  if (opt_group2memberRelationshipOutgoing !== undefined) {
    queryParameters['group2member.relationship.outgoing'] = opt_group2memberRelationshipOutgoing;
  }

  if (opt_group2memberExcludedOutgoing !== undefined) {
    queryParameters['group2member.excluded.outgoing'] = opt_group2memberExcludedOutgoing;
  }

  if (opt_group2memberRelationshipIncoming !== undefined) {
    queryParameters['group2member.relationship.incoming'] = opt_group2memberRelationshipIncoming;
  }

  if (opt_group2memberExcludedIncoming !== undefined) {
    queryParameters['group2member.excluded.incoming'] = opt_group2memberExcludedIncoming;
  }

  /** @type {!Object} */
  var httpRequestParams = {
    method: 'POST',
    url: path,
    json: true,
            params: queryParameters,
    headers: headerParams
  };

  if (opt_extraHttpRequestParams) {
    httpRequestParams = angular.extend(httpRequestParams, opt_extraHttpRequestParams);
  }

  return (/** @type {?} */ (this.http_))(httpRequestParams);
}

/**
 * 
 * 
 * @param {!boolean=} opt_post 
 * @param {!boolean=} opt_apply 
 * @param {!boolean=} opt_delete 
 * @param {!string=} opt_action 
 * @param {!string=} opt_location 
 * @param {!Array<!string>=} opt_propertylist 
 * @param {!string=} opt_schedulerExpression 
 * @param {!string=} opt_jmxObjectname 
 * @param {!angular.$http.Config=} opt_extraHttpRequestParams Extra HTTP parameters to send.
 * @return {!angular.$q.Promise<!API.Client.comAdobeGraniteSystemMonitoringImplSystemStatsMBeanImplInfo>}
 */
API.Client.ConfigmgrApi.prototype.comAdobeGraniteSystemMonitoringImplSystemStatsMBeanImpl = function(opt_post, opt_apply, opt_delete, opt_action, opt_location, opt_propertylist, opt_schedulerExpression, opt_jmxObjectname, opt_extraHttpRequestParams) {
  /** @const {string} */
  var path = this.basePath_ + '/system/console/configMgr/com.adobe.granite.system.monitoring.impl.SystemStatsMBeanImpl';

  /** @type {!Object} */
  var queryParameters = {};

  /** @type {!Object} */
  var headerParams = angular.extend({}, this.defaultHeaders_);
  if (opt_post !== undefined) {
    queryParameters['post'] = opt_post;
  }

  if (opt_apply !== undefined) {
    queryParameters['apply'] = opt_apply;
  }

  if (opt_delete !== undefined) {
    queryParameters['delete'] = opt_delete;
  }

  if (opt_action !== undefined) {
    queryParameters['action'] = opt_action;
  }

  if (opt_location !== undefined) {
    queryParameters['$location'] = opt_location;
  }

  if (opt_propertylist !== undefined) {
    queryParameters['propertylist'] = opt_propertylist;
  }

  if (opt_schedulerExpression !== undefined) {
    queryParameters['scheduler.expression'] = opt_schedulerExpression;
  }

  if (opt_jmxObjectname !== undefined) {
    queryParameters['jmx.objectname'] = opt_jmxObjectname;
  }

  /** @type {!Object} */
  var httpRequestParams = {
    method: 'POST',
    url: path,
    json: true,
            params: queryParameters,
    headers: headerParams
  };

  if (opt_extraHttpRequestParams) {
    httpRequestParams = angular.extend(httpRequestParams, opt_extraHttpRequestParams);
  }

  return (/** @type {?} */ (this.http_))(httpRequestParams);
}

/**
 * 
 * 
 * @param {!boolean=} opt_post 
 * @param {!boolean=} opt_apply 
 * @param {!boolean=} opt_delete 
 * @param {!string=} opt_action 
 * @param {!string=} opt_location 
 * @param {!Array<!string>=} opt_propertylist 
 * @param {!string=} opt_adapterCondition 
 * @param {!angular.$http.Config=} opt_extraHttpRequestParams Extra HTTP parameters to send.
 * @return {!angular.$q.Promise<!API.Client.comAdobeGraniteTaskmanagementImplJcrTaskAdapterFactoryInfo>}
 */
API.Client.ConfigmgrApi.prototype.comAdobeGraniteTaskmanagementImplJcrTaskAdapterFactory = function(opt_post, opt_apply, opt_delete, opt_action, opt_location, opt_propertylist, opt_adapterCondition, opt_extraHttpRequestParams) {
  /** @const {string} */
  var path = this.basePath_ + '/system/console/configMgr/com.adobe.granite.taskmanagement.impl.jcr.TaskAdapterFactory';

  /** @type {!Object} */
  var queryParameters = {};

  /** @type {!Object} */
  var headerParams = angular.extend({}, this.defaultHeaders_);
  if (opt_post !== undefined) {
    queryParameters['post'] = opt_post;
  }

  if (opt_apply !== undefined) {
    queryParameters['apply'] = opt_apply;
  }

  if (opt_delete !== undefined) {
    queryParameters['delete'] = opt_delete;
  }

  if (opt_action !== undefined) {
    queryParameters['action'] = opt_action;
  }

  if (opt_location !== undefined) {
    queryParameters['$location'] = opt_location;
  }

  if (opt_propertylist !== undefined) {
    queryParameters['propertylist'] = opt_propertylist;
  }

  if (opt_adapterCondition !== undefined) {
    queryParameters['adapter.condition'] = opt_adapterCondition;
  }

  /** @type {!Object} */
  var httpRequestParams = {
    method: 'POST',
    url: path,
    json: true,
            params: queryParameters,
    headers: headerParams
  };

  if (opt_extraHttpRequestParams) {
    httpRequestParams = angular.extend(httpRequestParams, opt_extraHttpRequestParams);
  }

  return (/** @type {?} */ (this.http_))(httpRequestParams);
}

/**
 * 
 * 
 * @param {!boolean=} opt_post 
 * @param {!boolean=} opt_apply 
 * @param {!boolean=} opt_delete 
 * @param {!string=} opt_action 
 * @param {!string=} opt_location 
 * @param {!Array<!string>=} opt_propertylist 
 * @param {!boolean=} opt_archivingEnabled 
 * @param {!string=} opt_schedulerExpression 
 * @param {!number=} opt_archiveSinceDaysCompleted 
 * @param {!angular.$http.Config=} opt_extraHttpRequestParams Extra HTTP parameters to send.
 * @return {!angular.$q.Promise<!API.Client.comAdobeGraniteTaskmanagementImplJcrTaskArchiveServiceInfo>}
 */
API.Client.ConfigmgrApi.prototype.comAdobeGraniteTaskmanagementImplJcrTaskArchiveService = function(opt_post, opt_apply, opt_delete, opt_action, opt_location, opt_propertylist, opt_archivingEnabled, opt_schedulerExpression, opt_archiveSinceDaysCompleted, opt_extraHttpRequestParams) {
  /** @const {string} */
  var path = this.basePath_ + '/system/console/configMgr/com.adobe.granite.taskmanagement.impl.jcr.TaskArchiveService';

  /** @type {!Object} */
  var queryParameters = {};

  /** @type {!Object} */
  var headerParams = angular.extend({}, this.defaultHeaders_);
  if (opt_post !== undefined) {
    queryParameters['post'] = opt_post;
  }

  if (opt_apply !== undefined) {
    queryParameters['apply'] = opt_apply;
  }

  if (opt_delete !== undefined) {
    queryParameters['delete'] = opt_delete;
  }

  if (opt_action !== undefined) {
    queryParameters['action'] = opt_action;
  }

  if (opt_location !== undefined) {
    queryParameters['$location'] = opt_location;
  }

  if (opt_propertylist !== undefined) {
    queryParameters['propertylist'] = opt_propertylist;
  }

  if (opt_archivingEnabled !== undefined) {
    queryParameters['archiving.enabled'] = opt_archivingEnabled;
  }

  if (opt_schedulerExpression !== undefined) {
    queryParameters['scheduler.expression'] = opt_schedulerExpression;
  }

  if (opt_archiveSinceDaysCompleted !== undefined) {
    queryParameters['archive.since.days.completed'] = opt_archiveSinceDaysCompleted;
  }

  /** @type {!Object} */
  var httpRequestParams = {
    method: 'POST',
    url: path,
    json: true,
            params: queryParameters,
    headers: headerParams
  };

  if (opt_extraHttpRequestParams) {
    httpRequestParams = angular.extend(httpRequestParams, opt_extraHttpRequestParams);
  }

  return (/** @type {?} */ (this.http_))(httpRequestParams);
}

/**
 * 
 * 
 * @param {!boolean=} opt_post 
 * @param {!boolean=} opt_apply 
 * @param {!boolean=} opt_delete 
 * @param {!string=} opt_action 
 * @param {!string=} opt_location 
 * @param {!Array<!string>=} opt_propertylist 
 * @param {!boolean=} opt_purgeCompleted 
 * @param {!number=} opt_completedAge 
 * @param {!boolean=} opt_purgeActive 
 * @param {!number=} opt_activeAge 
 * @param {!number=} opt_saveThreshold 
 * @param {!angular.$http.Config=} opt_extraHttpRequestParams Extra HTTP parameters to send.
 * @return {!angular.$q.Promise<!API.Client.comAdobeGraniteTaskmanagementImplPurgeTaskPurgeMaintenanceTaskInfo>}
 */
API.Client.ConfigmgrApi.prototype.comAdobeGraniteTaskmanagementImplPurgeTaskPurgeMaintenanceTask = function(opt_post, opt_apply, opt_delete, opt_action, opt_location, opt_propertylist, opt_purgeCompleted, opt_completedAge, opt_purgeActive, opt_activeAge, opt_saveThreshold, opt_extraHttpRequestParams) {
  /** @const {string} */
  var path = this.basePath_ + '/system/console/configMgr/com.adobe.granite.taskmanagement.impl.purge.TaskPurgeMaintenanceTask';

  /** @type {!Object} */
  var queryParameters = {};

  /** @type {!Object} */
  var headerParams = angular.extend({}, this.defaultHeaders_);
  if (opt_post !== undefined) {
    queryParameters['post'] = opt_post;
  }

  if (opt_apply !== undefined) {
    queryParameters['apply'] = opt_apply;
  }

  if (opt_delete !== undefined) {
    queryParameters['delete'] = opt_delete;
  }

  if (opt_action !== undefined) {
    queryParameters['action'] = opt_action;
  }

  if (opt_location !== undefined) {
    queryParameters['$location'] = opt_location;
  }

  if (opt_propertylist !== undefined) {
    queryParameters['propertylist'] = opt_propertylist;
  }

  if (opt_purgeCompleted !== undefined) {
    queryParameters['purgeCompleted'] = opt_purgeCompleted;
  }

  if (opt_completedAge !== undefined) {
    queryParameters['completedAge'] = opt_completedAge;
  }

  if (opt_purgeActive !== undefined) {
    queryParameters['purgeActive'] = opt_purgeActive;
  }

  if (opt_activeAge !== undefined) {
    queryParameters['activeAge'] = opt_activeAge;
  }

  if (opt_saveThreshold !== undefined) {
    queryParameters['saveThreshold'] = opt_saveThreshold;
  }

  /** @type {!Object} */
  var httpRequestParams = {
    method: 'POST',
    url: path,
    json: true,
            params: queryParameters,
    headers: headerParams
  };

  if (opt_extraHttpRequestParams) {
    httpRequestParams = angular.extend(httpRequestParams, opt_extraHttpRequestParams);
  }

  return (/** @type {?} */ (this.http_))(httpRequestParams);
}

/**
 * 
 * 
 * @param {!boolean=} opt_post 
 * @param {!boolean=} opt_apply 
 * @param {!boolean=} opt_delete 
 * @param {!string=} opt_action 
 * @param {!string=} opt_location 
 * @param {!Array<!string>=} opt_propertylist 
 * @param {!string=} opt_adapterCondition 
 * @param {!Array<!string>=} opt_taskmanagerAdmingroups 
 * @param {!angular.$http.Config=} opt_extraHttpRequestParams Extra HTTP parameters to send.
 * @return {!angular.$q.Promise<!API.Client.comAdobeGraniteTaskmanagementImplServiceTaskManagerAdapterFactorInfo>}
 */
API.Client.ConfigmgrApi.prototype.comAdobeGraniteTaskmanagementImplServiceTaskManagerAdapterFactor = function(opt_post, opt_apply, opt_delete, opt_action, opt_location, opt_propertylist, opt_adapterCondition, opt_taskmanagerAdmingroups, opt_extraHttpRequestParams) {
  /** @const {string} */
  var path = this.basePath_ + '/system/console/configMgr/com.adobe.granite.taskmanagement.impl.service.TaskManagerAdapterFactory';

  /** @type {!Object} */
  var queryParameters = {};

  /** @type {!Object} */
  var headerParams = angular.extend({}, this.defaultHeaders_);
  if (opt_post !== undefined) {
    queryParameters['post'] = opt_post;
  }

  if (opt_apply !== undefined) {
    queryParameters['apply'] = opt_apply;
  }

  if (opt_delete !== undefined) {
    queryParameters['delete'] = opt_delete;
  }

  if (opt_action !== undefined) {
    queryParameters['action'] = opt_action;
  }

  if (opt_location !== undefined) {
    queryParameters['$location'] = opt_location;
  }

  if (opt_propertylist !== undefined) {
    queryParameters['propertylist'] = opt_propertylist;
  }

  if (opt_adapterCondition !== undefined) {
    queryParameters['adapter.condition'] = opt_adapterCondition;
  }

  if (opt_taskmanagerAdmingroups !== undefined) {
    queryParameters['taskmanager.admingroups'] = opt_taskmanagerAdmingroups;
  }

  /** @type {!Object} */
  var httpRequestParams = {
    method: 'POST',
    url: path,
    json: true,
            params: queryParameters,
    headers: headerParams
  };

  if (opt_extraHttpRequestParams) {
    httpRequestParams = angular.extend(httpRequestParams, opt_extraHttpRequestParams);
  }

  return (/** @type {?} */ (this.http_))(httpRequestParams);
}

/**
 * 
 * 
 * @param {!boolean=} opt_post 
 * @param {!boolean=} opt_apply 
 * @param {!boolean=} opt_delete 
 * @param {!string=} opt_action 
 * @param {!string=} opt_location 
 * @param {!Array<!string>=} opt_propertylist 
 * @param {!number=} opt_schedulerPeriod 
 * @param {!string=} opt_schedulerRunOn 
 * @param {!boolean=} opt_graniteThreaddumpEnabled 
 * @param {!number=} opt_graniteThreaddumpDumpsPerFile 
 * @param {!boolean=} opt_graniteThreaddumpEnableGzipCompression 
 * @param {!boolean=} opt_graniteThreaddumpEnableDirectoriesCompression 
 * @param {!boolean=} opt_graniteThreaddumpEnableJStack 
 * @param {!number=} opt_graniteThreaddumpMaxBackupDays 
 * @param {!string=} opt_graniteThreaddumpBackupCleanTrigger 
 * @param {!angular.$http.Config=} opt_extraHttpRequestParams Extra HTTP parameters to send.
 * @return {!angular.$q.Promise<!API.Client.comAdobeGraniteThreaddumpThreadDumpCollectorInfo>}
 */
API.Client.ConfigmgrApi.prototype.comAdobeGraniteThreaddumpThreadDumpCollector = function(opt_post, opt_apply, opt_delete, opt_action, opt_location, opt_propertylist, opt_schedulerPeriod, opt_schedulerRunOn, opt_graniteThreaddumpEnabled, opt_graniteThreaddumpDumpsPerFile, opt_graniteThreaddumpEnableGzipCompression, opt_graniteThreaddumpEnableDirectoriesCompression, opt_graniteThreaddumpEnableJStack, opt_graniteThreaddumpMaxBackupDays, opt_graniteThreaddumpBackupCleanTrigger, opt_extraHttpRequestParams) {
  /** @const {string} */
  var path = this.basePath_ + '/system/console/configMgr/com.adobe.granite.threaddump.ThreadDumpCollector';

  /** @type {!Object} */
  var queryParameters = {};

  /** @type {!Object} */
  var headerParams = angular.extend({}, this.defaultHeaders_);
  if (opt_post !== undefined) {
    queryParameters['post'] = opt_post;
  }

  if (opt_apply !== undefined) {
    queryParameters['apply'] = opt_apply;
  }

  if (opt_delete !== undefined) {
    queryParameters['delete'] = opt_delete;
  }

  if (opt_action !== undefined) {
    queryParameters['action'] = opt_action;
  }

  if (opt_location !== undefined) {
    queryParameters['$location'] = opt_location;
  }

  if (opt_propertylist !== undefined) {
    queryParameters['propertylist'] = opt_propertylist;
  }

  if (opt_schedulerPeriod !== undefined) {
    queryParameters['scheduler.period'] = opt_schedulerPeriod;
  }

  if (opt_schedulerRunOn !== undefined) {
    queryParameters['scheduler.runOn'] = opt_schedulerRunOn;
  }

  if (opt_graniteThreaddumpEnabled !== undefined) {
    queryParameters['granite.threaddump.enabled'] = opt_graniteThreaddumpEnabled;
  }

  if (opt_graniteThreaddumpDumpsPerFile !== undefined) {
    queryParameters['granite.threaddump.dumpsPerFile'] = opt_graniteThreaddumpDumpsPerFile;
  }

  if (opt_graniteThreaddumpEnableGzipCompression !== undefined) {
    queryParameters['granite.threaddump.enableGzipCompression'] = opt_graniteThreaddumpEnableGzipCompression;
  }

  if (opt_graniteThreaddumpEnableDirectoriesCompression !== undefined) {
    queryParameters['granite.threaddump.enableDirectoriesCompression'] = opt_graniteThreaddumpEnableDirectoriesCompression;
  }

  if (opt_graniteThreaddumpEnableJStack !== undefined) {
    queryParameters['granite.threaddump.enableJStack'] = opt_graniteThreaddumpEnableJStack;
  }

  if (opt_graniteThreaddumpMaxBackupDays !== undefined) {
    queryParameters['granite.threaddump.maxBackupDays'] = opt_graniteThreaddumpMaxBackupDays;
  }

  if (opt_graniteThreaddumpBackupCleanTrigger !== undefined) {
    queryParameters['granite.threaddump.backupCleanTrigger'] = opt_graniteThreaddumpBackupCleanTrigger;
  }

  /** @type {!Object} */
  var httpRequestParams = {
    method: 'POST',
    url: path,
    json: true,
            params: queryParameters,
    headers: headerParams
  };

  if (opt_extraHttpRequestParams) {
    httpRequestParams = angular.extend(httpRequestParams, opt_extraHttpRequestParams);
  }

  return (/** @type {?} */ (this.http_))(httpRequestParams);
}

/**
 * 
 * 
 * @param {!boolean=} opt_post 
 * @param {!boolean=} opt_apply 
 * @param {!boolean=} opt_delete 
 * @param {!string=} opt_action 
 * @param {!string=} opt_location 
 * @param {!Array<!string>=} opt_propertylist 
 * @param {!string=} opt_translationFactory 
 * @param {!string=} opt_defaultConnectorLabel 
 * @param {!string=} opt_defaultConnectorAttribution 
 * @param {!string=} opt_defaultConnectorWorkspaceId 
 * @param {!string=} opt_defaultConnectorSubscriptionKey 
 * @param {!string=} opt_languageMapLocation 
 * @param {!string=} opt_categoryMapLocation 
 * @param {!number=} opt_retryAttempts 
 * @param {!number=} opt_timeoutCount 
 * @param {!angular.$http.Config=} opt_extraHttpRequestParams Extra HTTP parameters to send.
 * @return {!angular.$q.Promise<!API.Client.comAdobeGraniteTranslationConnectorMsftCoreImplMicrosoftTranslInfo>}
 */
API.Client.ConfigmgrApi.prototype.comAdobeGraniteTranslationConnectorMsftCoreImplMicrosoftTransl = function(opt_post, opt_apply, opt_delete, opt_action, opt_location, opt_propertylist, opt_translationFactory, opt_defaultConnectorLabel, opt_defaultConnectorAttribution, opt_defaultConnectorWorkspaceId, opt_defaultConnectorSubscriptionKey, opt_languageMapLocation, opt_categoryMapLocation, opt_retryAttempts, opt_timeoutCount, opt_extraHttpRequestParams) {
  /** @const {string} */
  var path = this.basePath_ + '/system/console/configMgr/com.adobe.granite.translation.connector.msft.core.impl.MicrosoftTranslationServiceFactoryImpl';

  /** @type {!Object} */
  var queryParameters = {};

  /** @type {!Object} */
  var headerParams = angular.extend({}, this.defaultHeaders_);
  if (opt_post !== undefined) {
    queryParameters['post'] = opt_post;
  }

  if (opt_apply !== undefined) {
    queryParameters['apply'] = opt_apply;
  }

  if (opt_delete !== undefined) {
    queryParameters['delete'] = opt_delete;
  }

  if (opt_action !== undefined) {
    queryParameters['action'] = opt_action;
  }

  if (opt_location !== undefined) {
    queryParameters['$location'] = opt_location;
  }

  if (opt_propertylist !== undefined) {
    queryParameters['propertylist'] = opt_propertylist;
  }

  if (opt_translationFactory !== undefined) {
    queryParameters['translationFactory'] = opt_translationFactory;
  }

  if (opt_defaultConnectorLabel !== undefined) {
    queryParameters['defaultConnectorLabel'] = opt_defaultConnectorLabel;
  }

  if (opt_defaultConnectorAttribution !== undefined) {
    queryParameters['defaultConnectorAttribution'] = opt_defaultConnectorAttribution;
  }

  if (opt_defaultConnectorWorkspaceId !== undefined) {
    queryParameters['defaultConnectorWorkspaceId'] = opt_defaultConnectorWorkspaceId;
  }

  if (opt_defaultConnectorSubscriptionKey !== undefined) {
    queryParameters['defaultConnectorSubscriptionKey'] = opt_defaultConnectorSubscriptionKey;
  }

  if (opt_languageMapLocation !== undefined) {
    queryParameters['languageMapLocation'] = opt_languageMapLocation;
  }

  if (opt_categoryMapLocation !== undefined) {
    queryParameters['categoryMapLocation'] = opt_categoryMapLocation;
  }

  if (opt_retryAttempts !== undefined) {
    queryParameters['retryAttempts'] = opt_retryAttempts;
  }

  if (opt_timeoutCount !== undefined) {
    queryParameters['timeoutCount'] = opt_timeoutCount;
  }

  /** @type {!Object} */
  var httpRequestParams = {
    method: 'POST',
    url: path,
    json: true,
            params: queryParameters,
    headers: headerParams
  };

  if (opt_extraHttpRequestParams) {
    httpRequestParams = angular.extend(httpRequestParams, opt_extraHttpRequestParams);
  }

  return (/** @type {?} */ (this.http_))(httpRequestParams);
}

/**
 * 
 * 
 * @param {!boolean=} opt_post 
 * @param {!boolean=} opt_apply 
 * @param {!boolean=} opt_delete 
 * @param {!string=} opt_action 
 * @param {!string=} opt_location 
 * @param {!Array<!string>=} opt_propertylist 
 * @param {!string=} opt_defaultConnectorName 
 * @param {!string=} opt_defaultCategory 
 * @param {!angular.$http.Config=} opt_extraHttpRequestParams Extra HTTP parameters to send.
 * @return {!angular.$q.Promise<!API.Client.comAdobeGraniteTranslationCoreImplTranslationManagerImplInfo>}
 */
API.Client.ConfigmgrApi.prototype.comAdobeGraniteTranslationCoreImplTranslationManagerImpl = function(opt_post, opt_apply, opt_delete, opt_action, opt_location, opt_propertylist, opt_defaultConnectorName, opt_defaultCategory, opt_extraHttpRequestParams) {
  /** @const {string} */
  var path = this.basePath_ + '/system/console/configMgr/com.adobe.granite.translation.core.impl.TranslationManagerImpl';

  /** @type {!Object} */
  var queryParameters = {};

  /** @type {!Object} */
  var headerParams = angular.extend({}, this.defaultHeaders_);
  if (opt_post !== undefined) {
    queryParameters['post'] = opt_post;
  }

  if (opt_apply !== undefined) {
    queryParameters['apply'] = opt_apply;
  }

  if (opt_delete !== undefined) {
    queryParameters['delete'] = opt_delete;
  }

  if (opt_action !== undefined) {
    queryParameters['action'] = opt_action;
  }

  if (opt_location !== undefined) {
    queryParameters['$location'] = opt_location;
  }

  if (opt_propertylist !== undefined) {
    queryParameters['propertylist'] = opt_propertylist;
  }

  if (opt_defaultConnectorName !== undefined) {
    queryParameters['defaultConnectorName'] = opt_defaultConnectorName;
  }

  if (opt_defaultCategory !== undefined) {
    queryParameters['defaultCategory'] = opt_defaultCategory;
  }

  /** @type {!Object} */
  var httpRequestParams = {
    method: 'POST',
    url: path,
    json: true,
            params: queryParameters,
    headers: headerParams
  };

  if (opt_extraHttpRequestParams) {
    httpRequestParams = angular.extend(httpRequestParams, opt_extraHttpRequestParams);
  }

  return (/** @type {?} */ (this.http_))(httpRequestParams);
}

/**
 * 
 * 
 * @param {!boolean=} opt_post 
 * @param {!boolean=} opt_apply 
 * @param {!boolean=} opt_delete 
 * @param {!string=} opt_action 
 * @param {!string=} opt_location 
 * @param {!Array<!string>=} opt_propertylist 
 * @param {!boolean=} opt_htmllibmanagerTiming 
 * @param {!string=} opt_htmllibmanagerDebugInitJs 
 * @param {!boolean=} opt_htmllibmanagerMinify 
 * @param {!boolean=} opt_htmllibmanagerDebug 
 * @param {!boolean=} opt_htmllibmanagerGzip 
 * @param {!number=} opt_htmllibmanagerMaxDataUriSize 
 * @param {!number=} opt_htmllibmanagerMaxage 
 * @param {!boolean=} opt_htmllibmanagerForceCQUrlInfo 
 * @param {!string=} opt_htmllibmanagerDefaultthemename 
 * @param {!string=} opt_htmllibmanagerDefaultuserthemename 
 * @param {!string=} opt_htmllibmanagerClientmanager 
 * @param {!Array<!string>=} opt_htmllibmanagerPathList 
 * @param {!Array<!string>=} opt_htmllibmanagerExcludedPathList 
 * @param {!Array<!string>=} opt_htmllibmanagerProcessorJs 
 * @param {!Array<!string>=} opt_htmllibmanagerProcessorCss 
 * @param {!Array<!string>=} opt_htmllibmanagerLongcachePatterns 
 * @param {!string=} opt_htmllibmanagerLongcacheFormat 
 * @param {!boolean=} opt_htmllibmanagerUseFileSystemOutputCache 
 * @param {!string=} opt_htmllibmanagerFileSystemOutputCacheLocation 
 * @param {!Array<!string>=} opt_htmllibmanagerDisableReplacement 
 * @param {!angular.$http.Config=} opt_extraHttpRequestParams Extra HTTP parameters to send.
 * @return {!angular.$q.Promise<!API.Client.comAdobeGraniteUiClientlibsImplHtmlLibraryManagerImplInfo>}
 */
API.Client.ConfigmgrApi.prototype.comAdobeGraniteUiClientlibsImplHtmlLibraryManagerImpl = function(opt_post, opt_apply, opt_delete, opt_action, opt_location, opt_propertylist, opt_htmllibmanagerTiming, opt_htmllibmanagerDebugInitJs, opt_htmllibmanagerMinify, opt_htmllibmanagerDebug, opt_htmllibmanagerGzip, opt_htmllibmanagerMaxDataUriSize, opt_htmllibmanagerMaxage, opt_htmllibmanagerForceCQUrlInfo, opt_htmllibmanagerDefaultthemename, opt_htmllibmanagerDefaultuserthemename, opt_htmllibmanagerClientmanager, opt_htmllibmanagerPathList, opt_htmllibmanagerExcludedPathList, opt_htmllibmanagerProcessorJs, opt_htmllibmanagerProcessorCss, opt_htmllibmanagerLongcachePatterns, opt_htmllibmanagerLongcacheFormat, opt_htmllibmanagerUseFileSystemOutputCache, opt_htmllibmanagerFileSystemOutputCacheLocation, opt_htmllibmanagerDisableReplacement, opt_extraHttpRequestParams) {
  /** @const {string} */
  var path = this.basePath_ + '/system/console/configMgr/com.adobe.granite.ui.clientlibs.impl.HtmlLibraryManagerImpl';

  /** @type {!Object} */
  var queryParameters = {};

  /** @type {!Object} */
  var headerParams = angular.extend({}, this.defaultHeaders_);
  if (opt_post !== undefined) {
    queryParameters['post'] = opt_post;
  }

  if (opt_apply !== undefined) {
    queryParameters['apply'] = opt_apply;
  }

  if (opt_delete !== undefined) {
    queryParameters['delete'] = opt_delete;
  }

  if (opt_action !== undefined) {
    queryParameters['action'] = opt_action;
  }

  if (opt_location !== undefined) {
    queryParameters['$location'] = opt_location;
  }

  if (opt_propertylist !== undefined) {
    queryParameters['propertylist'] = opt_propertylist;
  }

  if (opt_htmllibmanagerTiming !== undefined) {
    queryParameters['htmllibmanager.timing'] = opt_htmllibmanagerTiming;
  }

  if (opt_htmllibmanagerDebugInitJs !== undefined) {
    queryParameters['htmllibmanager.debug.init.js'] = opt_htmllibmanagerDebugInitJs;
  }

  if (opt_htmllibmanagerMinify !== undefined) {
    queryParameters['htmllibmanager.minify'] = opt_htmllibmanagerMinify;
  }

  if (opt_htmllibmanagerDebug !== undefined) {
    queryParameters['htmllibmanager.debug'] = opt_htmllibmanagerDebug;
  }

  if (opt_htmllibmanagerGzip !== undefined) {
    queryParameters['htmllibmanager.gzip'] = opt_htmllibmanagerGzip;
  }

  if (opt_htmllibmanagerMaxDataUriSize !== undefined) {
    queryParameters['htmllibmanager.maxDataUriSize'] = opt_htmllibmanagerMaxDataUriSize;
  }

  if (opt_htmllibmanagerMaxage !== undefined) {
    queryParameters['htmllibmanager.maxage'] = opt_htmllibmanagerMaxage;
  }

  if (opt_htmllibmanagerForceCQUrlInfo !== undefined) {
    queryParameters['htmllibmanager.forceCQUrlInfo'] = opt_htmllibmanagerForceCQUrlInfo;
  }

  if (opt_htmllibmanagerDefaultthemename !== undefined) {
    queryParameters['htmllibmanager.defaultthemename'] = opt_htmllibmanagerDefaultthemename;
  }

  if (opt_htmllibmanagerDefaultuserthemename !== undefined) {
    queryParameters['htmllibmanager.defaultuserthemename'] = opt_htmllibmanagerDefaultuserthemename;
  }

  if (opt_htmllibmanagerClientmanager !== undefined) {
    queryParameters['htmllibmanager.clientmanager'] = opt_htmllibmanagerClientmanager;
  }

  if (opt_htmllibmanagerPathList !== undefined) {
    queryParameters['htmllibmanager.path.list'] = opt_htmllibmanagerPathList;
  }

  if (opt_htmllibmanagerExcludedPathList !== undefined) {
    queryParameters['htmllibmanager.excluded.path.list'] = opt_htmllibmanagerExcludedPathList;
  }

  if (opt_htmllibmanagerProcessorJs !== undefined) {
    queryParameters['htmllibmanager.processor.js'] = opt_htmllibmanagerProcessorJs;
  }

  if (opt_htmllibmanagerProcessorCss !== undefined) {
    queryParameters['htmllibmanager.processor.css'] = opt_htmllibmanagerProcessorCss;
  }

  if (opt_htmllibmanagerLongcachePatterns !== undefined) {
    queryParameters['htmllibmanager.longcache.patterns'] = opt_htmllibmanagerLongcachePatterns;
  }

  if (opt_htmllibmanagerLongcacheFormat !== undefined) {
    queryParameters['htmllibmanager.longcache.format'] = opt_htmllibmanagerLongcacheFormat;
  }

  if (opt_htmllibmanagerUseFileSystemOutputCache !== undefined) {
    queryParameters['htmllibmanager.useFileSystemOutputCache'] = opt_htmllibmanagerUseFileSystemOutputCache;
  }

  if (opt_htmllibmanagerFileSystemOutputCacheLocation !== undefined) {
    queryParameters['htmllibmanager.fileSystemOutputCacheLocation'] = opt_htmllibmanagerFileSystemOutputCacheLocation;
  }

  if (opt_htmllibmanagerDisableReplacement !== undefined) {
    queryParameters['htmllibmanager.disable.replacement'] = opt_htmllibmanagerDisableReplacement;
  }

  /** @type {!Object} */
  var httpRequestParams = {
    method: 'POST',
    url: path,
    json: true,
            params: queryParameters,
    headers: headerParams
  };

  if (opt_extraHttpRequestParams) {
    httpRequestParams = angular.extend(httpRequestParams, opt_extraHttpRequestParams);
  }

  return (/** @type {?} */ (this.http_))(httpRequestParams);
}

/**
 * 
 * 
 * @param {!boolean=} opt_post 
 * @param {!boolean=} opt_apply 
 * @param {!boolean=} opt_delete 
 * @param {!string=} opt_action 
 * @param {!string=} opt_location 
 * @param {!Array<!string>=} opt_propertylist 
 * @param {!boolean=} opt_enabled 
 * @param {!angular.$http.Config=} opt_extraHttpRequestParams Extra HTTP parameters to send.
 * @return {!angular.$q.Promise<!API.Client.comAdobeGraniteWorkflowConsoleFragsWorkflowWithdrawFeatureInfo>}
 */
API.Client.ConfigmgrApi.prototype.comAdobeGraniteWorkflowConsoleFragsWorkflowWithdrawFeature = function(opt_post, opt_apply, opt_delete, opt_action, opt_location, opt_propertylist, opt_enabled, opt_extraHttpRequestParams) {
  /** @const {string} */
  var path = this.basePath_ + '/system/console/configMgr/com.adobe.granite.workflow.console.frags.WorkflowWithdrawFeature';

  /** @type {!Object} */
  var queryParameters = {};

  /** @type {!Object} */
  var headerParams = angular.extend({}, this.defaultHeaders_);
  if (opt_post !== undefined) {
    queryParameters['post'] = opt_post;
  }

  if (opt_apply !== undefined) {
    queryParameters['apply'] = opt_apply;
  }

  if (opt_delete !== undefined) {
    queryParameters['delete'] = opt_delete;
  }

  if (opt_action !== undefined) {
    queryParameters['action'] = opt_action;
  }

  if (opt_location !== undefined) {
    queryParameters['$location'] = opt_location;
  }

  if (opt_propertylist !== undefined) {
    queryParameters['propertylist'] = opt_propertylist;
  }

  if (opt_enabled !== undefined) {
    queryParameters['enabled'] = opt_enabled;
  }

  /** @type {!Object} */
  var httpRequestParams = {
    method: 'POST',
    url: path,
    json: true,
            params: queryParameters,
    headers: headerParams
  };

  if (opt_extraHttpRequestParams) {
    httpRequestParams = angular.extend(httpRequestParams, opt_extraHttpRequestParams);
  }

  return (/** @type {?} */ (this.http_))(httpRequestParams);
}

/**
 * 
 * 
 * @param {!boolean=} opt_post 
 * @param {!boolean=} opt_apply 
 * @param {!boolean=} opt_delete 
 * @param {!string=} opt_action 
 * @param {!string=} opt_location 
 * @param {!Array<!string>=} opt_propertylist 
 * @param {!boolean=} opt_graniteWorkflowWorkflowPublishEventServiceEnabled 
 * @param {!angular.$http.Config=} opt_extraHttpRequestParams Extra HTTP parameters to send.
 * @return {!angular.$q.Promise<!API.Client.comAdobeGraniteWorkflowConsolePublishWorkflowPublishEventServiceInfo>}
 */
API.Client.ConfigmgrApi.prototype.comAdobeGraniteWorkflowConsolePublishWorkflowPublishEventService = function(opt_post, opt_apply, opt_delete, opt_action, opt_location, opt_propertylist, opt_graniteWorkflowWorkflowPublishEventServiceEnabled, opt_extraHttpRequestParams) {
  /** @const {string} */
  var path = this.basePath_ + '/system/console/configMgr/com.adobe.granite.workflow.console.publish.WorkflowPublishEventService';

  /** @type {!Object} */
  var queryParameters = {};

  /** @type {!Object} */
  var headerParams = angular.extend({}, this.defaultHeaders_);
  if (opt_post !== undefined) {
    queryParameters['post'] = opt_post;
  }

  if (opt_apply !== undefined) {
    queryParameters['apply'] = opt_apply;
  }

  if (opt_delete !== undefined) {
    queryParameters['delete'] = opt_delete;
  }

  if (opt_action !== undefined) {
    queryParameters['action'] = opt_action;
  }

  if (opt_location !== undefined) {
    queryParameters['$location'] = opt_location;
  }

  if (opt_propertylist !== undefined) {
    queryParameters['propertylist'] = opt_propertylist;
  }

  if (opt_graniteWorkflowWorkflowPublishEventServiceEnabled !== undefined) {
    queryParameters['granite.workflow.WorkflowPublishEventService.enabled'] = opt_graniteWorkflowWorkflowPublishEventServiceEnabled;
  }

  /** @type {!Object} */
  var httpRequestParams = {
    method: 'POST',
    url: path,
    json: true,
            params: queryParameters,
    headers: headerParams
  };

  if (opt_extraHttpRequestParams) {
    httpRequestParams = angular.extend(httpRequestParams, opt_extraHttpRequestParams);
  }

  return (/** @type {?} */ (this.http_))(httpRequestParams);
}

/**
 * 
 * 
 * @param {!boolean=} opt_post 
 * @param {!boolean=} opt_apply 
 * @param {!boolean=} opt_delete 
 * @param {!string=} opt_action 
 * @param {!string=} opt_location 
 * @param {!Array<!string>=} opt_propertylist 
 * @param {!number=} opt_bucketSize 
 * @param {!angular.$http.Config=} opt_extraHttpRequestParams Extra HTTP parameters to send.
 * @return {!angular.$q.Promise<!API.Client.comAdobeGraniteWorkflowCoreJcrWorkflowBucketManagerInfo>}
 */
API.Client.ConfigmgrApi.prototype.comAdobeGraniteWorkflowCoreJcrWorkflowBucketManager = function(opt_post, opt_apply, opt_delete, opt_action, opt_location, opt_propertylist, opt_bucketSize, opt_extraHttpRequestParams) {
  /** @const {string} */
  var path = this.basePath_ + '/system/console/configMgr/com.adobe.granite.workflow.core.jcr.WorkflowBucketManager';

  /** @type {!Object} */
  var queryParameters = {};

  /** @type {!Object} */
  var headerParams = angular.extend({}, this.defaultHeaders_);
  if (opt_post !== undefined) {
    queryParameters['post'] = opt_post;
  }

  if (opt_apply !== undefined) {
    queryParameters['apply'] = opt_apply;
  }

  if (opt_delete !== undefined) {
    queryParameters['delete'] = opt_delete;
  }

  if (opt_action !== undefined) {
    queryParameters['action'] = opt_action;
  }

  if (opt_location !== undefined) {
    queryParameters['$location'] = opt_location;
  }

  if (opt_propertylist !== undefined) {
    queryParameters['propertylist'] = opt_propertylist;
  }

  if (opt_bucketSize !== undefined) {
    queryParameters['bucketSize'] = opt_bucketSize;
  }

  /** @type {!Object} */
  var httpRequestParams = {
    method: 'POST',
    url: path,
    json: true,
            params: queryParameters,
    headers: headerParams
  };

  if (opt_extraHttpRequestParams) {
    httpRequestParams = angular.extend(httpRequestParams, opt_extraHttpRequestParams);
  }

  return (/** @type {?} */ (this.http_))(httpRequestParams);
}

/**
 * 
 * 
 * @param {!boolean=} opt_post 
 * @param {!boolean=} opt_apply 
 * @param {!boolean=} opt_delete 
 * @param {!string=} opt_action 
 * @param {!string=} opt_location 
 * @param {!Array<!string>=} opt_propertylist 
 * @param {!number=} opt_defaultTimeout 
 * @param {!number=} opt_maxTimeout 
 * @param {!number=} opt_defaultPeriod 
 * @param {!angular.$http.Config=} opt_extraHttpRequestParams Extra HTTP parameters to send.
 * @return {!angular.$q.Promise<!API.Client.comAdobeGraniteWorkflowCoreJobExternalProcessJobHandlerInfo>}
 */
API.Client.ConfigmgrApi.prototype.comAdobeGraniteWorkflowCoreJobExternalProcessJobHandler = function(opt_post, opt_apply, opt_delete, opt_action, opt_location, opt_propertylist, opt_defaultTimeout, opt_maxTimeout, opt_defaultPeriod, opt_extraHttpRequestParams) {
  /** @const {string} */
  var path = this.basePath_ + '/system/console/configMgr/com.adobe.granite.workflow.core.job.ExternalProcessJobHandler';

  /** @type {!Object} */
  var queryParameters = {};

  /** @type {!Object} */
  var headerParams = angular.extend({}, this.defaultHeaders_);
  if (opt_post !== undefined) {
    queryParameters['post'] = opt_post;
  }

  if (opt_apply !== undefined) {
    queryParameters['apply'] = opt_apply;
  }

  if (opt_delete !== undefined) {
    queryParameters['delete'] = opt_delete;
  }

  if (opt_action !== undefined) {
    queryParameters['action'] = opt_action;
  }

  if (opt_location !== undefined) {
    queryParameters['$location'] = opt_location;
  }

  if (opt_propertylist !== undefined) {
    queryParameters['propertylist'] = opt_propertylist;
  }

  if (opt_defaultTimeout !== undefined) {
    queryParameters['default.timeout'] = opt_defaultTimeout;
  }

  if (opt_maxTimeout !== undefined) {
    queryParameters['max.timeout'] = opt_maxTimeout;
  }

  if (opt_defaultPeriod !== undefined) {
    queryParameters['default.period'] = opt_defaultPeriod;
  }

  /** @type {!Object} */
  var httpRequestParams = {
    method: 'POST',
    url: path,
    json: true,
            params: queryParameters,
    headers: headerParams
  };

  if (opt_extraHttpRequestParams) {
    httpRequestParams = angular.extend(httpRequestParams, opt_extraHttpRequestParams);
  }

  return (/** @type {?} */ (this.http_))(httpRequestParams);
}

/**
 * 
 * 
 * @param {!boolean=} opt_post 
 * @param {!boolean=} opt_apply 
 * @param {!boolean=} opt_delete 
 * @param {!string=} opt_action 
 * @param {!string=} opt_location 
 * @param {!Array<!string>=} opt_propertylist 
 * @param {!Array<!string>=} opt_jobTopics 
 * @param {!boolean=} opt_allowSelfProcessTermination 
 * @param {!angular.$http.Config=} opt_extraHttpRequestParams Extra HTTP parameters to send.
 * @return {!angular.$q.Promise<!API.Client.comAdobeGraniteWorkflowCoreJobJobHandlerInfo>}
 */
API.Client.ConfigmgrApi.prototype.comAdobeGraniteWorkflowCoreJobJobHandler = function(opt_post, opt_apply, opt_delete, opt_action, opt_location, opt_propertylist, opt_jobTopics, opt_allowSelfProcessTermination, opt_extraHttpRequestParams) {
  /** @const {string} */
  var path = this.basePath_ + '/system/console/configMgr/com.adobe.granite.workflow.core.job.JobHandler';

  /** @type {!Object} */
  var queryParameters = {};

  /** @type {!Object} */
  var headerParams = angular.extend({}, this.defaultHeaders_);
  if (opt_post !== undefined) {
    queryParameters['post'] = opt_post;
  }

  if (opt_apply !== undefined) {
    queryParameters['apply'] = opt_apply;
  }

  if (opt_delete !== undefined) {
    queryParameters['delete'] = opt_delete;
  }

  if (opt_action !== undefined) {
    queryParameters['action'] = opt_action;
  }

  if (opt_location !== undefined) {
    queryParameters['$location'] = opt_location;
  }

  if (opt_propertylist !== undefined) {
    queryParameters['propertylist'] = opt_propertylist;
  }

  if (opt_jobTopics !== undefined) {
    queryParameters['job.topics'] = opt_jobTopics;
  }

  if (opt_allowSelfProcessTermination !== undefined) {
    queryParameters['allow.self.process.termination'] = opt_allowSelfProcessTermination;
  }

  /** @type {!Object} */
  var httpRequestParams = {
    method: 'POST',
    url: path,
    json: true,
            params: queryParameters,
    headers: headerParams
  };

  if (opt_extraHttpRequestParams) {
    httpRequestParams = angular.extend(httpRequestParams, opt_extraHttpRequestParams);
  }

  return (/** @type {?} */ (this.http_))(httpRequestParams);
}

/**
 * 
 * 
 * @param {!boolean=} opt_post 
 * @param {!boolean=} opt_apply 
 * @param {!boolean=} opt_delete 
 * @param {!string=} opt_action 
 * @param {!string=} opt_location 
 * @param {!Array<!string>=} opt_propertylist 
 * @param {!string=} opt_jobTopics 
 * @param {!angular.$http.Config=} opt_extraHttpRequestParams Extra HTTP parameters to send.
 * @return {!angular.$q.Promise<!API.Client.comAdobeGraniteWorkflowCoreOffloadingWorkflowOffloadingJobConsumInfo>}
 */
API.Client.ConfigmgrApi.prototype.comAdobeGraniteWorkflowCoreOffloadingWorkflowOffloadingJobConsum = function(opt_post, opt_apply, opt_delete, opt_action, opt_location, opt_propertylist, opt_jobTopics, opt_extraHttpRequestParams) {
  /** @const {string} */
  var path = this.basePath_ + '/system/console/configMgr/com.adobe.granite.workflow.core.offloading.WorkflowOffloadingJobConsumer';

  /** @type {!Object} */
  var queryParameters = {};

  /** @type {!Object} */
  var headerParams = angular.extend({}, this.defaultHeaders_);
  if (opt_post !== undefined) {
    queryParameters['post'] = opt_post;
  }

  if (opt_apply !== undefined) {
    queryParameters['apply'] = opt_apply;
  }

  if (opt_delete !== undefined) {
    queryParameters['delete'] = opt_delete;
  }

  if (opt_action !== undefined) {
    queryParameters['action'] = opt_action;
  }

  if (opt_location !== undefined) {
    queryParameters['$location'] = opt_location;
  }

  if (opt_propertylist !== undefined) {
    queryParameters['propertylist'] = opt_propertylist;
  }

  if (opt_jobTopics !== undefined) {
    queryParameters['job.topics'] = opt_jobTopics;
  }

  /** @type {!Object} */
  var httpRequestParams = {
    method: 'POST',
    url: path,
    json: true,
            params: queryParameters,
    headers: headerParams
  };

  if (opt_extraHttpRequestParams) {
    httpRequestParams = angular.extend(httpRequestParams, opt_extraHttpRequestParams);
  }

  return (/** @type {?} */ (this.http_))(httpRequestParams);
}

/**
 * 
 * 
 * @param {!boolean=} opt_post 
 * @param {!boolean=} opt_apply 
 * @param {!boolean=} opt_delete 
 * @param {!string=} opt_action 
 * @param {!string=} opt_location 
 * @param {!Array<!string>=} opt_propertylist 
 * @param {!Array<!string>=} opt_getSystemWorkflowModels 
 * @param {!string=} opt_getPackageRootPath 
 * @param {!angular.$http.Config=} opt_extraHttpRequestParams Extra HTTP parameters to send.
 * @return {!angular.$q.Promise<!API.Client.comAdobeGraniteWorkflowCorePayloadMapCacheInfo>}
 */
API.Client.ConfigmgrApi.prototype.comAdobeGraniteWorkflowCorePayloadMapCache = function(opt_post, opt_apply, opt_delete, opt_action, opt_location, opt_propertylist, opt_getSystemWorkflowModels, opt_getPackageRootPath, opt_extraHttpRequestParams) {
  /** @const {string} */
  var path = this.basePath_ + '/system/console/configMgr/com.adobe.granite.workflow.core.PayloadMapCache';

  /** @type {!Object} */
  var queryParameters = {};

  /** @type {!Object} */
  var headerParams = angular.extend({}, this.defaultHeaders_);
  if (opt_post !== undefined) {
    queryParameters['post'] = opt_post;
  }

  if (opt_apply !== undefined) {
    queryParameters['apply'] = opt_apply;
  }

  if (opt_delete !== undefined) {
    queryParameters['delete'] = opt_delete;
  }

  if (opt_action !== undefined) {
    queryParameters['action'] = opt_action;
  }

  if (opt_location !== undefined) {
    queryParameters['$location'] = opt_location;
  }

  if (opt_propertylist !== undefined) {
    queryParameters['propertylist'] = opt_propertylist;
  }

  if (opt_getSystemWorkflowModels !== undefined) {
    queryParameters['getSystemWorkflowModels'] = opt_getSystemWorkflowModels;
  }

  if (opt_getPackageRootPath !== undefined) {
    queryParameters['getPackageRootPath'] = opt_getPackageRootPath;
  }

  /** @type {!Object} */
  var httpRequestParams = {
    method: 'POST',
    url: path,
    json: true,
            params: queryParameters,
    headers: headerParams
  };

  if (opt_extraHttpRequestParams) {
    httpRequestParams = angular.extend(httpRequestParams, opt_extraHttpRequestParams);
  }

  return (/** @type {?} */ (this.http_))(httpRequestParams);
}

/**
 * 
 * 
 * @param {!boolean=} opt_post 
 * @param {!boolean=} opt_apply 
 * @param {!boolean=} opt_delete 
 * @param {!string=} opt_action 
 * @param {!string=} opt_location 
 * @param {!Array<!string>=} opt_propertylist 
 * @param {!Array<!string>=} opt_payloadMoveWhiteList 
 * @param {!boolean=} opt_payloadMoveHandleFromWorkflowProcess 
 * @param {!angular.$http.Config=} opt_extraHttpRequestParams Extra HTTP parameters to send.
 * @return {!angular.$q.Promise<!API.Client.comAdobeGraniteWorkflowCorePayloadmapPayloadMoveListenerInfo>}
 */
API.Client.ConfigmgrApi.prototype.comAdobeGraniteWorkflowCorePayloadmapPayloadMoveListener = function(opt_post, opt_apply, opt_delete, opt_action, opt_location, opt_propertylist, opt_payloadMoveWhiteList, opt_payloadMoveHandleFromWorkflowProcess, opt_extraHttpRequestParams) {
  /** @const {string} */
  var path = this.basePath_ + '/system/console/configMgr/com.adobe.granite.workflow.core.payloadmap.PayloadMoveListener';

  /** @type {!Object} */
  var queryParameters = {};

  /** @type {!Object} */
  var headerParams = angular.extend({}, this.defaultHeaders_);
  if (opt_post !== undefined) {
    queryParameters['post'] = opt_post;
  }

  if (opt_apply !== undefined) {
    queryParameters['apply'] = opt_apply;
  }

  if (opt_delete !== undefined) {
    queryParameters['delete'] = opt_delete;
  }

  if (opt_action !== undefined) {
    queryParameters['action'] = opt_action;
  }

  if (opt_location !== undefined) {
    queryParameters['$location'] = opt_location;
  }

  if (opt_propertylist !== undefined) {
    queryParameters['propertylist'] = opt_propertylist;
  }

  if (opt_payloadMoveWhiteList !== undefined) {
    queryParameters['payload.move.white.list'] = opt_payloadMoveWhiteList;
  }

  if (opt_payloadMoveHandleFromWorkflowProcess !== undefined) {
    queryParameters['payload.move.handle.from.workflow.process'] = opt_payloadMoveHandleFromWorkflowProcess;
  }

  /** @type {!Object} */
  var httpRequestParams = {
    method: 'POST',
    url: path,
    json: true,
            params: queryParameters,
    headers: headerParams
  };

  if (opt_extraHttpRequestParams) {
    httpRequestParams = angular.extend(httpRequestParams, opt_extraHttpRequestParams);
  }

  return (/** @type {?} */ (this.http_))(httpRequestParams);
}

/**
 * 
 * 
 * @param {!boolean=} opt_post 
 * @param {!boolean=} opt_apply 
 * @param {!boolean=} opt_delete 
 * @param {!string=} opt_action 
 * @param {!string=} opt_location 
 * @param {!Array<!string>=} opt_propertylist 
 * @param {!Array<!string>=} opt_cqWorkflowConfigWorkflowPackagesRootPath 
 * @param {!boolean=} opt_cqWorkflowConfigWorkflowProcessLegacyMode 
 * @param {!boolean=} opt_cqWorkflowConfigAllowLocking 
 * @param {!angular.$http.Config=} opt_extraHttpRequestParams Extra HTTP parameters to send.
 * @return {!angular.$q.Promise<!API.Client.comAdobeGraniteWorkflowCoreWorkflowConfigInfo>}
 */
API.Client.ConfigmgrApi.prototype.comAdobeGraniteWorkflowCoreWorkflowConfig = function(opt_post, opt_apply, opt_delete, opt_action, opt_location, opt_propertylist, opt_cqWorkflowConfigWorkflowPackagesRootPath, opt_cqWorkflowConfigWorkflowProcessLegacyMode, opt_cqWorkflowConfigAllowLocking, opt_extraHttpRequestParams) {
  /** @const {string} */
  var path = this.basePath_ + '/system/console/configMgr/com.adobe.granite.workflow.core.WorkflowConfig';

  /** @type {!Object} */
  var queryParameters = {};

  /** @type {!Object} */
  var headerParams = angular.extend({}, this.defaultHeaders_);
  if (opt_post !== undefined) {
    queryParameters['post'] = opt_post;
  }

  if (opt_apply !== undefined) {
    queryParameters['apply'] = opt_apply;
  }

  if (opt_delete !== undefined) {
    queryParameters['delete'] = opt_delete;
  }

  if (opt_action !== undefined) {
    queryParameters['action'] = opt_action;
  }

  if (opt_location !== undefined) {
    queryParameters['$location'] = opt_location;
  }

  if (opt_propertylist !== undefined) {
    queryParameters['propertylist'] = opt_propertylist;
  }

  if (opt_cqWorkflowConfigWorkflowPackagesRootPath !== undefined) {
    queryParameters['cq.workflow.config.workflow.packages.root.path'] = opt_cqWorkflowConfigWorkflowPackagesRootPath;
  }

  if (opt_cqWorkflowConfigWorkflowProcessLegacyMode !== undefined) {
    queryParameters['cq.workflow.config.workflow.process.legacy.mode'] = opt_cqWorkflowConfigWorkflowProcessLegacyMode;
  }

  if (opt_cqWorkflowConfigAllowLocking !== undefined) {
    queryParameters['cq.workflow.config.allow.locking'] = opt_cqWorkflowConfigAllowLocking;
  }

  /** @type {!Object} */
  var httpRequestParams = {
    method: 'POST',
    url: path,
    json: true,
            params: queryParameters,
    headers: headerParams
  };

  if (opt_extraHttpRequestParams) {
    httpRequestParams = angular.extend(httpRequestParams, opt_extraHttpRequestParams);
  }

  return (/** @type {?} */ (this.http_))(httpRequestParams);
}

/**
 * 
 * 
 * @param {!boolean=} opt_post 
 * @param {!boolean=} opt_apply 
 * @param {!boolean=} opt_delete 
 * @param {!string=} opt_action 
 * @param {!string=} opt_location 
 * @param {!Array<!string>=} opt_propertylist 
 * @param {!string=} opt_graniteWorkflowinboxSortPropertyName 
 * @param {!string=} opt_graniteWorkflowinboxSortOrder 
 * @param {!number=} opt_cqWorkflowJobRetry 
 * @param {!Array<!string>=} opt_cqWorkflowSuperuser 
 * @param {!number=} opt_graniteWorkflowInboxQuerySize 
 * @param {!boolean=} opt_graniteWorkflowAdminUserGroupFilter 
 * @param {!boolean=} opt_graniteWorkflowEnforceWorkitemAssigneePermissions 
 * @param {!boolean=} opt_graniteWorkflowEnforceWorkflowInitiatorPermissions 
 * @param {!boolean=} opt_graniteWorkflowInjectTenantIdInJobTopics 
 * @param {!number=} opt_graniteWorkflowMaxPurgeSaveThreshold 
 * @param {!number=} opt_graniteWorkflowMaxPurgeQueryCount 
 * @param {!angular.$http.Config=} opt_extraHttpRequestParams Extra HTTP parameters to send.
 * @return {!angular.$q.Promise<!API.Client.comAdobeGraniteWorkflowCoreWorkflowSessionFactoryInfo>}
 */
API.Client.ConfigmgrApi.prototype.comAdobeGraniteWorkflowCoreWorkflowSessionFactory = function(opt_post, opt_apply, opt_delete, opt_action, opt_location, opt_propertylist, opt_graniteWorkflowinboxSortPropertyName, opt_graniteWorkflowinboxSortOrder, opt_cqWorkflowJobRetry, opt_cqWorkflowSuperuser, opt_graniteWorkflowInboxQuerySize, opt_graniteWorkflowAdminUserGroupFilter, opt_graniteWorkflowEnforceWorkitemAssigneePermissions, opt_graniteWorkflowEnforceWorkflowInitiatorPermissions, opt_graniteWorkflowInjectTenantIdInJobTopics, opt_graniteWorkflowMaxPurgeSaveThreshold, opt_graniteWorkflowMaxPurgeQueryCount, opt_extraHttpRequestParams) {
  /** @const {string} */
  var path = this.basePath_ + '/system/console/configMgr/com.adobe.granite.workflow.core.WorkflowSessionFactory';

  /** @type {!Object} */
  var queryParameters = {};

  /** @type {!Object} */
  var headerParams = angular.extend({}, this.defaultHeaders_);
  if (opt_post !== undefined) {
    queryParameters['post'] = opt_post;
  }

  if (opt_apply !== undefined) {
    queryParameters['apply'] = opt_apply;
  }

  if (opt_delete !== undefined) {
    queryParameters['delete'] = opt_delete;
  }

  if (opt_action !== undefined) {
    queryParameters['action'] = opt_action;
  }

  if (opt_location !== undefined) {
    queryParameters['$location'] = opt_location;
  }

  if (opt_propertylist !== undefined) {
    queryParameters['propertylist'] = opt_propertylist;
  }

  if (opt_graniteWorkflowinboxSortPropertyName !== undefined) {
    queryParameters['granite.workflowinbox.sort.propertyName'] = opt_graniteWorkflowinboxSortPropertyName;
  }

  if (opt_graniteWorkflowinboxSortOrder !== undefined) {
    queryParameters['granite.workflowinbox.sort.order'] = opt_graniteWorkflowinboxSortOrder;
  }

  if (opt_cqWorkflowJobRetry !== undefined) {
    queryParameters['cq.workflow.job.retry'] = opt_cqWorkflowJobRetry;
  }

  if (opt_cqWorkflowSuperuser !== undefined) {
    queryParameters['cq.workflow.superuser'] = opt_cqWorkflowSuperuser;
  }

  if (opt_graniteWorkflowInboxQuerySize !== undefined) {
    queryParameters['granite.workflow.inboxQuerySize'] = opt_graniteWorkflowInboxQuerySize;
  }

  if (opt_graniteWorkflowAdminUserGroupFilter !== undefined) {
    queryParameters['granite.workflow.adminUserGroupFilter'] = opt_graniteWorkflowAdminUserGroupFilter;
  }

  if (opt_graniteWorkflowEnforceWorkitemAssigneePermissions !== undefined) {
    queryParameters['granite.workflow.enforceWorkitemAssigneePermissions'] = opt_graniteWorkflowEnforceWorkitemAssigneePermissions;
  }

  if (opt_graniteWorkflowEnforceWorkflowInitiatorPermissions !== undefined) {
    queryParameters['granite.workflow.enforceWorkflowInitiatorPermissions'] = opt_graniteWorkflowEnforceWorkflowInitiatorPermissions;
  }

  if (opt_graniteWorkflowInjectTenantIdInJobTopics !== undefined) {
    queryParameters['granite.workflow.injectTenantIdInJobTopics'] = opt_graniteWorkflowInjectTenantIdInJobTopics;
  }

  if (opt_graniteWorkflowMaxPurgeSaveThreshold !== undefined) {
    queryParameters['granite.workflow.maxPurgeSaveThreshold'] = opt_graniteWorkflowMaxPurgeSaveThreshold;
  }

  if (opt_graniteWorkflowMaxPurgeQueryCount !== undefined) {
    queryParameters['granite.workflow.maxPurgeQueryCount'] = opt_graniteWorkflowMaxPurgeQueryCount;
  }

  /** @type {!Object} */
  var httpRequestParams = {
    method: 'POST',
    url: path,
    json: true,
            params: queryParameters,
    headers: headerParams
  };

  if (opt_extraHttpRequestParams) {
    httpRequestParams = angular.extend(httpRequestParams, opt_extraHttpRequestParams);
  }

  return (/** @type {?} */ (this.http_))(httpRequestParams);
}

/**
 * 
 * 
 * @param {!boolean=} opt_post 
 * @param {!boolean=} opt_apply 
 * @param {!boolean=} opt_delete 
 * @param {!string=} opt_action 
 * @param {!string=} opt_location 
 * @param {!Array<!string>=} opt_propertylist 
 * @param {!string=} opt_scheduledpurgeName 
 * @param {!string=} opt_scheduledpurgeWorkflowStatus 
 * @param {!Array<!string>=} opt_scheduledpurgeModelIds 
 * @param {!number=} opt_scheduledpurgeDaysold 
 * @param {!angular.$http.Config=} opt_extraHttpRequestParams Extra HTTP parameters to send.
 * @return {!angular.$q.Promise<!API.Client.comAdobeGraniteWorkflowPurgeSchedulerInfo>}
 */
API.Client.ConfigmgrApi.prototype.comAdobeGraniteWorkflowPurgeScheduler = function(opt_post, opt_apply, opt_delete, opt_action, opt_location, opt_propertylist, opt_scheduledpurgeName, opt_scheduledpurgeWorkflowStatus, opt_scheduledpurgeModelIds, opt_scheduledpurgeDaysold, opt_extraHttpRequestParams) {
  /** @const {string} */
  var path = this.basePath_ + '/system/console/configMgr/com.adobe.granite.workflow.purge.Scheduler';

  /** @type {!Object} */
  var queryParameters = {};

  /** @type {!Object} */
  var headerParams = angular.extend({}, this.defaultHeaders_);
  if (opt_post !== undefined) {
    queryParameters['post'] = opt_post;
  }

  if (opt_apply !== undefined) {
    queryParameters['apply'] = opt_apply;
  }

  if (opt_delete !== undefined) {
    queryParameters['delete'] = opt_delete;
  }

  if (opt_action !== undefined) {
    queryParameters['action'] = opt_action;
  }

  if (opt_location !== undefined) {
    queryParameters['$location'] = opt_location;
  }

  if (opt_propertylist !== undefined) {
    queryParameters['propertylist'] = opt_propertylist;
  }

  if (opt_scheduledpurgeName !== undefined) {
    queryParameters['scheduledpurge.name'] = opt_scheduledpurgeName;
  }

  if (opt_scheduledpurgeWorkflowStatus !== undefined) {
    queryParameters['scheduledpurge.workflowStatus'] = opt_scheduledpurgeWorkflowStatus;
  }

  if (opt_scheduledpurgeModelIds !== undefined) {
    queryParameters['scheduledpurge.modelIds'] = opt_scheduledpurgeModelIds;
  }

  if (opt_scheduledpurgeDaysold !== undefined) {
    queryParameters['scheduledpurge.daysold'] = opt_scheduledpurgeDaysold;
  }

  /** @type {!Object} */
  var httpRequestParams = {
    method: 'POST',
    url: path,
    json: true,
            params: queryParameters,
    headers: headerParams
  };

  if (opt_extraHttpRequestParams) {
    httpRequestParams = angular.extend(httpRequestParams, opt_extraHttpRequestParams);
  }

  return (/** @type {?} */ (this.http_))(httpRequestParams);
}

/**
 * 
 * 
 * @param {!boolean=} opt_post 
 * @param {!boolean=} opt_apply 
 * @param {!boolean=} opt_delete 
 * @param {!string=} opt_action 
 * @param {!string=} opt_location 
 * @param {!Array<!string>=} opt_propertylist 
 * @param {!number=} opt_maxConnections 
 * @param {!number=} opt_maxRequests 
 * @param {!number=} opt_requestTimeout 
 * @param {!number=} opt_requestRetries 
 * @param {!number=} opt_launchTimeout 
 * @param {!angular.$http.Config=} opt_extraHttpRequestParams Extra HTTP parameters to send.
 * @return {!angular.$q.Promise<!API.Client.comAdobeOctopusNcommBootstrapInfo>}
 */
API.Client.ConfigmgrApi.prototype.comAdobeOctopusNcommBootstrap = function(opt_post, opt_apply, opt_delete, opt_action, opt_location, opt_propertylist, opt_maxConnections, opt_maxRequests, opt_requestTimeout, opt_requestRetries, opt_launchTimeout, opt_extraHttpRequestParams) {
  /** @const {string} */
  var path = this.basePath_ + '/system/console/configMgr/com.adobe.octopus.ncomm.bootstrap';

  /** @type {!Object} */
  var queryParameters = {};

  /** @type {!Object} */
  var headerParams = angular.extend({}, this.defaultHeaders_);
  if (opt_post !== undefined) {
    queryParameters['post'] = opt_post;
  }

  if (opt_apply !== undefined) {
    queryParameters['apply'] = opt_apply;
  }

  if (opt_delete !== undefined) {
    queryParameters['delete'] = opt_delete;
  }

  if (opt_action !== undefined) {
    queryParameters['action'] = opt_action;
  }

  if (opt_location !== undefined) {
    queryParameters['$location'] = opt_location;
  }

  if (opt_propertylist !== undefined) {
    queryParameters['propertylist'] = opt_propertylist;
  }

  if (opt_maxConnections !== undefined) {
    queryParameters['maxConnections'] = opt_maxConnections;
  }

  if (opt_maxRequests !== undefined) {
    queryParameters['maxRequests'] = opt_maxRequests;
  }

  if (opt_requestTimeout !== undefined) {
    queryParameters['requestTimeout'] = opt_requestTimeout;
  }

  if (opt_requestRetries !== undefined) {
    queryParameters['requestRetries'] = opt_requestRetries;
  }

  if (opt_launchTimeout !== undefined) {
    queryParameters['launchTimeout'] = opt_launchTimeout;
  }

  /** @type {!Object} */
  var httpRequestParams = {
    method: 'POST',
    url: path,
    json: true,
            params: queryParameters,
    headers: headerParams
  };

  if (opt_extraHttpRequestParams) {
    httpRequestParams = angular.extend(httpRequestParams, opt_extraHttpRequestParams);
  }

  return (/** @type {?} */ (this.http_))(httpRequestParams);
}

/**
 * 
 * 
 * @param {!boolean=} opt_post 
 * @param {!boolean=} opt_apply 
 * @param {!boolean=} opt_delete 
 * @param {!string=} opt_action 
 * @param {!string=} opt_location 
 * @param {!Array<!string>=} opt_propertylist 
 * @param {!string=} opt_communitiesIntegrationLivefyreSlingEventFilter 
 * @param {!angular.$http.Config=} opt_extraHttpRequestParams Extra HTTP parameters to send.
 * @return {!angular.$q.Promise<!API.Client.comAdobeSocialIntegrationsLivefyreUserPingforpullImplPingPullSInfo>}
 */
API.Client.ConfigmgrApi.prototype.comAdobeSocialIntegrationsLivefyreUserPingforpullImplPingPullS = function(opt_post, opt_apply, opt_delete, opt_action, opt_location, opt_propertylist, opt_communitiesIntegrationLivefyreSlingEventFilter, opt_extraHttpRequestParams) {
  /** @const {string} */
  var path = this.basePath_ + '/system/console/configMgr/com.adobe.social.integrations.livefyre.user.pingforpull.impl.PingPullServlet';

  /** @type {!Object} */
  var queryParameters = {};

  /** @type {!Object} */
  var headerParams = angular.extend({}, this.defaultHeaders_);
  if (opt_post !== undefined) {
    queryParameters['post'] = opt_post;
  }

  if (opt_apply !== undefined) {
    queryParameters['apply'] = opt_apply;
  }

  if (opt_delete !== undefined) {
    queryParameters['delete'] = opt_delete;
  }

  if (opt_action !== undefined) {
    queryParameters['action'] = opt_action;
  }

  if (opt_location !== undefined) {
    queryParameters['$location'] = opt_location;
  }

  if (opt_propertylist !== undefined) {
    queryParameters['propertylist'] = opt_propertylist;
  }

  if (opt_communitiesIntegrationLivefyreSlingEventFilter !== undefined) {
    queryParameters['communities.integration.livefyre.sling.event.filter'] = opt_communitiesIntegrationLivefyreSlingEventFilter;
  }

  /** @type {!Object} */
  var httpRequestParams = {
    method: 'POST',
    url: path,
    json: true,
            params: queryParameters,
    headers: headerParams
  };

  if (opt_extraHttpRequestParams) {
    httpRequestParams = angular.extend(httpRequestParams, opt_extraHttpRequestParams);
  }

  return (/** @type {?} */ (this.http_))(httpRequestParams);
}

/**
 * 
 * 
 * @param {!boolean=} opt_post 
 * @param {!boolean=} opt_apply 
 * @param {!boolean=} opt_delete 
 * @param {!string=} opt_action 
 * @param {!string=} opt_location 
 * @param {!Array<!string>=} opt_propertylist 
 * @param {!string=} opt_maxConnections 
 * @param {!string=} opt_maxRequests 
 * @param {!string=} opt_requestTimeout 
 * @param {!string=} opt_logDir 
 * @param {!angular.$http.Config=} opt_extraHttpRequestParams Extra HTTP parameters to send.
 * @return {!angular.$q.Promise<!API.Client.comAdobeXmpWorkerFilesNcommXMPFilesNCommInfo>}
 */
API.Client.ConfigmgrApi.prototype.comAdobeXmpWorkerFilesNcommXMPFilesNComm = function(opt_post, opt_apply, opt_delete, opt_action, opt_location, opt_propertylist, opt_maxConnections, opt_maxRequests, opt_requestTimeout, opt_logDir, opt_extraHttpRequestParams) {
  /** @const {string} */
  var path = this.basePath_ + '/system/console/configMgr/com.adobe.xmp.worker.files.ncomm.XMPFilesNComm';

  /** @type {!Object} */
  var queryParameters = {};

  /** @type {!Object} */
  var headerParams = angular.extend({}, this.defaultHeaders_);
  if (opt_post !== undefined) {
    queryParameters['post'] = opt_post;
  }

  if (opt_apply !== undefined) {
    queryParameters['apply'] = opt_apply;
  }

  if (opt_delete !== undefined) {
    queryParameters['delete'] = opt_delete;
  }

  if (opt_action !== undefined) {
    queryParameters['action'] = opt_action;
  }

  if (opt_location !== undefined) {
    queryParameters['$location'] = opt_location;
  }

  if (opt_propertylist !== undefined) {
    queryParameters['propertylist'] = opt_propertylist;
  }

  if (opt_maxConnections !== undefined) {
    queryParameters['maxConnections'] = opt_maxConnections;
  }

  if (opt_maxRequests !== undefined) {
    queryParameters['maxRequests'] = opt_maxRequests;
  }

  if (opt_requestTimeout !== undefined) {
    queryParameters['requestTimeout'] = opt_requestTimeout;
  }

  if (opt_logDir !== undefined) {
    queryParameters['logDir'] = opt_logDir;
  }

  /** @type {!Object} */
  var httpRequestParams = {
    method: 'POST',
    url: path,
    json: true,
            params: queryParameters,
    headers: headerParams
  };

  if (opt_extraHttpRequestParams) {
    httpRequestParams = angular.extend(httpRequestParams, opt_extraHttpRequestParams);
  }

  return (/** @type {?} */ (this.http_))(httpRequestParams);
}

/**
 * 
 * 
 * @param {!boolean=} opt_post 
 * @param {!boolean=} opt_apply 
 * @param {!boolean=} opt_delete 
 * @param {!string=} opt_action 
 * @param {!string=} opt_location 
 * @param {!Array<!string>=} opt_propertylist 
 * @param {!string=} opt_jdbcDriverClass 
 * @param {!string=} opt_jdbcConnectionUri 
 * @param {!string=} opt_jdbcUsername 
 * @param {!string=} opt_jdbcPassword 
 * @param {!string=} opt_jdbcValidationQuery 
 * @param {!boolean=} opt_defaultReadonly 
 * @param {!boolean=} opt_defaultAutocommit 
 * @param {!number=} opt_poolSize 
 * @param {!number=} opt_poolMaxWaitMsec 
 * @param {!string=} opt_datasourceName 
 * @param {!Array<!string>=} opt_datasourceSvcProperties 
 * @param {!angular.$http.Config=} opt_extraHttpRequestParams Extra HTTP parameters to send.
 * @return {!angular.$q.Promise<!API.Client.comDayCommonsDatasourceJdbcpoolJdbcPoolServiceInfo>}
 */
API.Client.ConfigmgrApi.prototype.comDayCommonsDatasourceJdbcpoolJdbcPoolService = function(opt_post, opt_apply, opt_delete, opt_action, opt_location, opt_propertylist, opt_jdbcDriverClass, opt_jdbcConnectionUri, opt_jdbcUsername, opt_jdbcPassword, opt_jdbcValidationQuery, opt_defaultReadonly, opt_defaultAutocommit, opt_poolSize, opt_poolMaxWaitMsec, opt_datasourceName, opt_datasourceSvcProperties, opt_extraHttpRequestParams) {
  /** @const {string} */
  var path = this.basePath_ + '/system/console/configMgr/com.day.commons.datasource.jdbcpool.JdbcPoolService';

  /** @type {!Object} */
  var queryParameters = {};

  /** @type {!Object} */
  var headerParams = angular.extend({}, this.defaultHeaders_);
  if (opt_post !== undefined) {
    queryParameters['post'] = opt_post;
  }

  if (opt_apply !== undefined) {
    queryParameters['apply'] = opt_apply;
  }

  if (opt_delete !== undefined) {
    queryParameters['delete'] = opt_delete;
  }

  if (opt_action !== undefined) {
    queryParameters['action'] = opt_action;
  }

  if (opt_location !== undefined) {
    queryParameters['$location'] = opt_location;
  }

  if (opt_propertylist !== undefined) {
    queryParameters['propertylist'] = opt_propertylist;
  }

  if (opt_jdbcDriverClass !== undefined) {
    queryParameters['jdbc.driver.class'] = opt_jdbcDriverClass;
  }

  if (opt_jdbcConnectionUri !== undefined) {
    queryParameters['jdbc.connection.uri'] = opt_jdbcConnectionUri;
  }

  if (opt_jdbcUsername !== undefined) {
    queryParameters['jdbc.username'] = opt_jdbcUsername;
  }

  if (opt_jdbcPassword !== undefined) {
    queryParameters['jdbc.password'] = opt_jdbcPassword;
  }

  if (opt_jdbcValidationQuery !== undefined) {
    queryParameters['jdbc.validation.query'] = opt_jdbcValidationQuery;
  }

  if (opt_defaultReadonly !== undefined) {
    queryParameters['default.readonly'] = opt_defaultReadonly;
  }

  if (opt_defaultAutocommit !== undefined) {
    queryParameters['default.autocommit'] = opt_defaultAutocommit;
  }

  if (opt_poolSize !== undefined) {
    queryParameters['pool.size'] = opt_poolSize;
  }

  if (opt_poolMaxWaitMsec !== undefined) {
    queryParameters['pool.max.wait.msec'] = opt_poolMaxWaitMsec;
  }

  if (opt_datasourceName !== undefined) {
    queryParameters['datasource.name'] = opt_datasourceName;
  }

  if (opt_datasourceSvcProperties !== undefined) {
    queryParameters['datasource.svc.properties'] = opt_datasourceSvcProperties;
  }

  /** @type {!Object} */
  var httpRequestParams = {
    method: 'POST',
    url: path,
    json: true,
            params: queryParameters,
    headers: headerParams
  };

  if (opt_extraHttpRequestParams) {
    httpRequestParams = angular.extend(httpRequestParams, opt_extraHttpRequestParams);
  }

  return (/** @type {?} */ (this.http_))(httpRequestParams);
}

/**
 * 
 * 
 * @param {!boolean=} opt_post 
 * @param {!boolean=} opt_apply 
 * @param {!boolean=} opt_delete 
 * @param {!string=} opt_action 
 * @param {!string=} opt_location 
 * @param {!Array<!string>=} opt_propertylist 
 * @param {!boolean=} opt_proxyEnabled 
 * @param {!string=} opt_proxyHost 
 * @param {!string=} opt_proxyUser 
 * @param {!string=} opt_proxyPassword 
 * @param {!string=} opt_proxyNtlmHost 
 * @param {!string=} opt_proxyNtlmDomain 
 * @param {!Array<!string>=} opt_proxyExceptions 
 * @param {!angular.$http.Config=} opt_extraHttpRequestParams Extra HTTP parameters to send.
 * @return {!angular.$q.Promise<!API.Client.comDayCommonsHttpclientInfo>}
 */
API.Client.ConfigmgrApi.prototype.comDayCommonsHttpclient = function(opt_post, opt_apply, opt_delete, opt_action, opt_location, opt_propertylist, opt_proxyEnabled, opt_proxyHost, opt_proxyUser, opt_proxyPassword, opt_proxyNtlmHost, opt_proxyNtlmDomain, opt_proxyExceptions, opt_extraHttpRequestParams) {
  /** @const {string} */
  var path = this.basePath_ + '/system/console/configMgr/com.day.commons.httpclient';

  /** @type {!Object} */
  var queryParameters = {};

  /** @type {!Object} */
  var headerParams = angular.extend({}, this.defaultHeaders_);
  if (opt_post !== undefined) {
    queryParameters['post'] = opt_post;
  }

  if (opt_apply !== undefined) {
    queryParameters['apply'] = opt_apply;
  }

  if (opt_delete !== undefined) {
    queryParameters['delete'] = opt_delete;
  }

  if (opt_action !== undefined) {
    queryParameters['action'] = opt_action;
  }

  if (opt_location !== undefined) {
    queryParameters['$location'] = opt_location;
  }

  if (opt_propertylist !== undefined) {
    queryParameters['propertylist'] = opt_propertylist;
  }

  if (opt_proxyEnabled !== undefined) {
    queryParameters['proxy.enabled'] = opt_proxyEnabled;
  }

  if (opt_proxyHost !== undefined) {
    queryParameters['proxy.host'] = opt_proxyHost;
  }

  if (opt_proxyUser !== undefined) {
    queryParameters['proxy.user'] = opt_proxyUser;
  }

  if (opt_proxyPassword !== undefined) {
    queryParameters['proxy.password'] = opt_proxyPassword;
  }

  if (opt_proxyNtlmHost !== undefined) {
    queryParameters['proxy.ntlm.host'] = opt_proxyNtlmHost;
  }

  if (opt_proxyNtlmDomain !== undefined) {
    queryParameters['proxy.ntlm.domain'] = opt_proxyNtlmDomain;
  }

  if (opt_proxyExceptions !== undefined) {
    queryParameters['proxy.exceptions'] = opt_proxyExceptions;
  }

  /** @type {!Object} */
  var httpRequestParams = {
    method: 'POST',
    url: path,
    json: true,
            params: queryParameters,
    headers: headerParams
  };

  if (opt_extraHttpRequestParams) {
    httpRequestParams = angular.extend(httpRequestParams, opt_extraHttpRequestParams);
  }

  return (/** @type {?} */ (this.http_))(httpRequestParams);
}

/**
 * 
 * 
 * @param {!boolean=} opt_post 
 * @param {!boolean=} opt_apply 
 * @param {!boolean=} opt_delete 
 * @param {!string=} opt_action 
 * @param {!string=} opt_location 
 * @param {!Array<!string>=} opt_propertylist 
 * @param {!Array<!string>=} opt_cqStoreListenerAdditionalStorePaths 
 * @param {!angular.$http.Config=} opt_extraHttpRequestParams Extra HTTP parameters to send.
 * @return {!angular.$q.Promise<!API.Client.comDayCqAnalyticsImplStorePropertiesChangeListenerInfo>}
 */
API.Client.ConfigmgrApi.prototype.comDayCqAnalyticsImplStorePropertiesChangeListener = function(opt_post, opt_apply, opt_delete, opt_action, opt_location, opt_propertylist, opt_cqStoreListenerAdditionalStorePaths, opt_extraHttpRequestParams) {
  /** @const {string} */
  var path = this.basePath_ + '/system/console/configMgr/com.day.cq.analytics.impl.StorePropertiesChangeListener';

  /** @type {!Object} */
  var queryParameters = {};

  /** @type {!Object} */
  var headerParams = angular.extend({}, this.defaultHeaders_);
  if (opt_post !== undefined) {
    queryParameters['post'] = opt_post;
  }

  if (opt_apply !== undefined) {
    queryParameters['apply'] = opt_apply;
  }

  if (opt_delete !== undefined) {
    queryParameters['delete'] = opt_delete;
  }

  if (opt_action !== undefined) {
    queryParameters['action'] = opt_action;
  }

  if (opt_location !== undefined) {
    queryParameters['$location'] = opt_location;
  }

  if (opt_propertylist !== undefined) {
    queryParameters['propertylist'] = opt_propertylist;
  }

  if (opt_cqStoreListenerAdditionalStorePaths !== undefined) {
    queryParameters['cq.store.listener.additionalStorePaths'] = opt_cqStoreListenerAdditionalStorePaths;
  }

  /** @type {!Object} */
  var httpRequestParams = {
    method: 'POST',
    url: path,
    json: true,
            params: queryParameters,
    headers: headerParams
  };

  if (opt_extraHttpRequestParams) {
    httpRequestParams = angular.extend(httpRequestParams, opt_extraHttpRequestParams);
  }

  return (/** @type {?} */ (this.http_))(httpRequestParams);
}

/**
 * 
 * 
 * @param {!boolean=} opt_post 
 * @param {!boolean=} opt_apply 
 * @param {!boolean=} opt_delete 
 * @param {!string=} opt_action 
 * @param {!string=} opt_location 
 * @param {!Array<!string>=} opt_propertylist 
 * @param {!Array<!string>=} opt_allowedPaths 
 * @param {!number=} opt_cqAnalyticsSaintExporterPagesize 
 * @param {!angular.$http.Config=} opt_extraHttpRequestParams Extra HTTP parameters to send.
 * @return {!angular.$q.Promise<!API.Client.comDayCqAnalyticsSitecatalystImplExporterClassificationsExporteInfo>}
 */
API.Client.ConfigmgrApi.prototype.comDayCqAnalyticsSitecatalystImplExporterClassificationsExporte = function(opt_post, opt_apply, opt_delete, opt_action, opt_location, opt_propertylist, opt_allowedPaths, opt_cqAnalyticsSaintExporterPagesize, opt_extraHttpRequestParams) {
  /** @const {string} */
  var path = this.basePath_ + '/system/console/configMgr/com.day.cq.analytics.sitecatalyst.impl.exporter.ClassificationsExporter';

  /** @type {!Object} */
  var queryParameters = {};

  /** @type {!Object} */
  var headerParams = angular.extend({}, this.defaultHeaders_);
  if (opt_post !== undefined) {
    queryParameters['post'] = opt_post;
  }

  if (opt_apply !== undefined) {
    queryParameters['apply'] = opt_apply;
  }

  if (opt_delete !== undefined) {
    queryParameters['delete'] = opt_delete;
  }

  if (opt_action !== undefined) {
    queryParameters['action'] = opt_action;
  }

  if (opt_location !== undefined) {
    queryParameters['$location'] = opt_location;
  }

  if (opt_propertylist !== undefined) {
    queryParameters['propertylist'] = opt_propertylist;
  }

  if (opt_allowedPaths !== undefined) {
    queryParameters['allowed.paths'] = opt_allowedPaths;
  }

  if (opt_cqAnalyticsSaintExporterPagesize !== undefined) {
    queryParameters['cq.analytics.saint.exporter.pagesize'] = opt_cqAnalyticsSaintExporterPagesize;
  }

  /** @type {!Object} */
  var httpRequestParams = {
    method: 'POST',
    url: path,
    json: true,
            params: queryParameters,
    headers: headerParams
  };

  if (opt_extraHttpRequestParams) {
    httpRequestParams = angular.extend(httpRequestParams, opt_extraHttpRequestParams);
  }

  return (/** @type {?} */ (this.http_))(httpRequestParams);
}

/**
 * 
 * 
 * @param {!boolean=} opt_post 
 * @param {!boolean=} opt_apply 
 * @param {!boolean=} opt_delete 
 * @param {!string=} opt_action 
 * @param {!string=} opt_location 
 * @param {!Array<!string>=} opt_propertylist 
 * @param {!number=} opt_reportFetchAttempts 
 * @param {!number=} opt_reportFetchDelay 
 * @param {!angular.$http.Config=} opt_extraHttpRequestParams Extra HTTP parameters to send.
 * @return {!angular.$q.Promise<!API.Client.comDayCqAnalyticsSitecatalystImplImporterReportImporterInfo>}
 */
API.Client.ConfigmgrApi.prototype.comDayCqAnalyticsSitecatalystImplImporterReportImporter = function(opt_post, opt_apply, opt_delete, opt_action, opt_location, opt_propertylist, opt_reportFetchAttempts, opt_reportFetchDelay, opt_extraHttpRequestParams) {
  /** @const {string} */
  var path = this.basePath_ + '/system/console/configMgr/com.day.cq.analytics.sitecatalyst.impl.importer.ReportImporter';

  /** @type {!Object} */
  var queryParameters = {};

  /** @type {!Object} */
  var headerParams = angular.extend({}, this.defaultHeaders_);
  if (opt_post !== undefined) {
    queryParameters['post'] = opt_post;
  }

  if (opt_apply !== undefined) {
    queryParameters['apply'] = opt_apply;
  }

  if (opt_delete !== undefined) {
    queryParameters['delete'] = opt_delete;
  }

  if (opt_action !== undefined) {
    queryParameters['action'] = opt_action;
  }

  if (opt_location !== undefined) {
    queryParameters['$location'] = opt_location;
  }

  if (opt_propertylist !== undefined) {
    queryParameters['propertylist'] = opt_propertylist;
  }

  if (opt_reportFetchAttempts !== undefined) {
    queryParameters['report.fetch.attempts'] = opt_reportFetchAttempts;
  }

  if (opt_reportFetchDelay !== undefined) {
    queryParameters['report.fetch.delay'] = opt_reportFetchDelay;
  }

  /** @type {!Object} */
  var httpRequestParams = {
    method: 'POST',
    url: path,
    json: true,
            params: queryParameters,
    headers: headerParams
  };

  if (opt_extraHttpRequestParams) {
    httpRequestParams = angular.extend(httpRequestParams, opt_extraHttpRequestParams);
  }

  return (/** @type {?} */ (this.http_))(httpRequestParams);
}

/**
 * 
 * 
 * @param {!boolean=} opt_post 
 * @param {!boolean=} opt_apply 
 * @param {!boolean=} opt_delete 
 * @param {!string=} opt_action 
 * @param {!string=} opt_location 
 * @param {!Array<!string>=} opt_propertylist 
 * @param {!Array<!string>=} opt_cqAnalyticsAdapterfactoryContextstores 
 * @param {!angular.$http.Config=} opt_extraHttpRequestParams Extra HTTP parameters to send.
 * @return {!angular.$q.Promise<!API.Client.comDayCqAnalyticsSitecatalystImplSitecatalystAdapterFactoryInfo>}
 */
API.Client.ConfigmgrApi.prototype.comDayCqAnalyticsSitecatalystImplSitecatalystAdapterFactory = function(opt_post, opt_apply, opt_delete, opt_action, opt_location, opt_propertylist, opt_cqAnalyticsAdapterfactoryContextstores, opt_extraHttpRequestParams) {
  /** @const {string} */
  var path = this.basePath_ + '/system/console/configMgr/com.day.cq.analytics.sitecatalyst.impl.SitecatalystAdapterFactory';

  /** @type {!Object} */
  var queryParameters = {};

  /** @type {!Object} */
  var headerParams = angular.extend({}, this.defaultHeaders_);
  if (opt_post !== undefined) {
    queryParameters['post'] = opt_post;
  }

  if (opt_apply !== undefined) {
    queryParameters['apply'] = opt_apply;
  }

  if (opt_delete !== undefined) {
    queryParameters['delete'] = opt_delete;
  }

  if (opt_action !== undefined) {
    queryParameters['action'] = opt_action;
  }

  if (opt_location !== undefined) {
    queryParameters['$location'] = opt_location;
  }

  if (opt_propertylist !== undefined) {
    queryParameters['propertylist'] = opt_propertylist;
  }

  if (opt_cqAnalyticsAdapterfactoryContextstores !== undefined) {
    queryParameters['cq.analytics.adapterfactory.contextstores'] = opt_cqAnalyticsAdapterfactoryContextstores;
  }

  /** @type {!Object} */
  var httpRequestParams = {
    method: 'POST',
    url: path,
    json: true,
            params: queryParameters,
    headers: headerParams
  };

  if (opt_extraHttpRequestParams) {
    httpRequestParams = angular.extend(httpRequestParams, opt_extraHttpRequestParams);
  }

  return (/** @type {?} */ (this.http_))(httpRequestParams);
}

/**
 * 
 * 
 * @param {!boolean=} opt_post 
 * @param {!boolean=} opt_apply 
 * @param {!boolean=} opt_delete 
 * @param {!string=} opt_action 
 * @param {!string=} opt_location 
 * @param {!Array<!string>=} opt_propertylist 
 * @param {!Array<!string>=} opt_cqAnalyticsSitecatalystServiceDatacenterUrl 
 * @param {!Array<!string>=} opt_devhostnamepatterns 
 * @param {!number=} opt_connectionTimeout 
 * @param {!number=} opt_socketTimeout 
 * @param {!angular.$http.Config=} opt_extraHttpRequestParams Extra HTTP parameters to send.
 * @return {!angular.$q.Promise<!API.Client.comDayCqAnalyticsSitecatalystImplSitecatalystHttpClientImplInfo>}
 */
API.Client.ConfigmgrApi.prototype.comDayCqAnalyticsSitecatalystImplSitecatalystHttpClientImpl = function(opt_post, opt_apply, opt_delete, opt_action, opt_location, opt_propertylist, opt_cqAnalyticsSitecatalystServiceDatacenterUrl, opt_devhostnamepatterns, opt_connectionTimeout, opt_socketTimeout, opt_extraHttpRequestParams) {
  /** @const {string} */
  var path = this.basePath_ + '/system/console/configMgr/com.day.cq.analytics.sitecatalyst.impl.SitecatalystHttpClientImpl';

  /** @type {!Object} */
  var queryParameters = {};

  /** @type {!Object} */
  var headerParams = angular.extend({}, this.defaultHeaders_);
  if (opt_post !== undefined) {
    queryParameters['post'] = opt_post;
  }

  if (opt_apply !== undefined) {
    queryParameters['apply'] = opt_apply;
  }

  if (opt_delete !== undefined) {
    queryParameters['delete'] = opt_delete;
  }

  if (opt_action !== undefined) {
    queryParameters['action'] = opt_action;
  }

  if (opt_location !== undefined) {
    queryParameters['$location'] = opt_location;
  }

  if (opt_propertylist !== undefined) {
    queryParameters['propertylist'] = opt_propertylist;
  }

  if (opt_cqAnalyticsSitecatalystServiceDatacenterUrl !== undefined) {
    queryParameters['cq.analytics.sitecatalyst.service.datacenter.url'] = opt_cqAnalyticsSitecatalystServiceDatacenterUrl;
  }

  if (opt_devhostnamepatterns !== undefined) {
    queryParameters['devhostnamepatterns'] = opt_devhostnamepatterns;
  }

  if (opt_connectionTimeout !== undefined) {
    queryParameters['connection.timeout'] = opt_connectionTimeout;
  }

  if (opt_socketTimeout !== undefined) {
    queryParameters['socket.timeout'] = opt_socketTimeout;
  }

  /** @type {!Object} */
  var httpRequestParams = {
    method: 'POST',
    url: path,
    json: true,
            params: queryParameters,
    headers: headerParams
  };

  if (opt_extraHttpRequestParams) {
    httpRequestParams = angular.extend(httpRequestParams, opt_extraHttpRequestParams);
  }

  return (/** @type {?} */ (this.http_))(httpRequestParams);
}

/**
 * 
 * 
 * @param {!boolean=} opt_post 
 * @param {!boolean=} opt_apply 
 * @param {!boolean=} opt_delete 
 * @param {!string=} opt_action 
 * @param {!string=} opt_location 
 * @param {!Array<!string>=} opt_propertylist 
 * @param {!boolean=} opt_cqAnalyticsTestandtargetAccountoptionsupdaterEnabled 
 * @param {!angular.$http.Config=} opt_extraHttpRequestParams Extra HTTP parameters to send.
 * @return {!angular.$q.Promise<!API.Client.comDayCqAnalyticsTestandtargetImplAccountOptionsUpdaterInfo>}
 */
API.Client.ConfigmgrApi.prototype.comDayCqAnalyticsTestandtargetImplAccountOptionsUpdater = function(opt_post, opt_apply, opt_delete, opt_action, opt_location, opt_propertylist, opt_cqAnalyticsTestandtargetAccountoptionsupdaterEnabled, opt_extraHttpRequestParams) {
  /** @const {string} */
  var path = this.basePath_ + '/system/console/configMgr/com.day.cq.analytics.testandtarget.impl.AccountOptionsUpdater';

  /** @type {!Object} */
  var queryParameters = {};

  /** @type {!Object} */
  var headerParams = angular.extend({}, this.defaultHeaders_);
  if (opt_post !== undefined) {
    queryParameters['post'] = opt_post;
  }

  if (opt_apply !== undefined) {
    queryParameters['apply'] = opt_apply;
  }

  if (opt_delete !== undefined) {
    queryParameters['delete'] = opt_delete;
  }

  if (opt_action !== undefined) {
    queryParameters['action'] = opt_action;
  }

  if (opt_location !== undefined) {
    queryParameters['$location'] = opt_location;
  }

  if (opt_propertylist !== undefined) {
    queryParameters['propertylist'] = opt_propertylist;
  }

  if (opt_cqAnalyticsTestandtargetAccountoptionsupdaterEnabled !== undefined) {
    queryParameters['cq.analytics.testandtarget.accountoptionsupdater.enabled'] = opt_cqAnalyticsTestandtargetAccountoptionsupdaterEnabled;
  }

  /** @type {!Object} */
  var httpRequestParams = {
    method: 'POST',
    url: path,
    json: true,
            params: queryParameters,
    headers: headerParams
  };

  if (opt_extraHttpRequestParams) {
    httpRequestParams = angular.extend(httpRequestParams, opt_extraHttpRequestParams);
  }

  return (/** @type {?} */ (this.http_))(httpRequestParams);
}

/**
 * 
 * 
 * @param {!boolean=} opt_post 
 * @param {!boolean=} opt_apply 
 * @param {!boolean=} opt_delete 
 * @param {!string=} opt_action 
 * @param {!string=} opt_location 
 * @param {!Array<!string>=} opt_propertylist 
 * @param {!boolean=} opt_cqAnalyticsTestandtargetDeleteauthoractivitylistenerEnabled 
 * @param {!angular.$http.Config=} opt_extraHttpRequestParams Extra HTTP parameters to send.
 * @return {!angular.$q.Promise<!API.Client.comDayCqAnalyticsTestandtargetImplDeleteAuthorActivityListenerInfo>}
 */
API.Client.ConfigmgrApi.prototype.comDayCqAnalyticsTestandtargetImplDeleteAuthorActivityListener = function(opt_post, opt_apply, opt_delete, opt_action, opt_location, opt_propertylist, opt_cqAnalyticsTestandtargetDeleteauthoractivitylistenerEnabled, opt_extraHttpRequestParams) {
  /** @const {string} */
  var path = this.basePath_ + '/system/console/configMgr/com.day.cq.analytics.testandtarget.impl.DeleteAuthorActivityListener';

  /** @type {!Object} */
  var queryParameters = {};

  /** @type {!Object} */
  var headerParams = angular.extend({}, this.defaultHeaders_);
  if (opt_post !== undefined) {
    queryParameters['post'] = opt_post;
  }

  if (opt_apply !== undefined) {
    queryParameters['apply'] = opt_apply;
  }

  if (opt_delete !== undefined) {
    queryParameters['delete'] = opt_delete;
  }

  if (opt_action !== undefined) {
    queryParameters['action'] = opt_action;
  }

  if (opt_location !== undefined) {
    queryParameters['$location'] = opt_location;
  }

  if (opt_propertylist !== undefined) {
    queryParameters['propertylist'] = opt_propertylist;
  }

  if (opt_cqAnalyticsTestandtargetDeleteauthoractivitylistenerEnabled !== undefined) {
    queryParameters['cq.analytics.testandtarget.deleteauthoractivitylistener.enabled'] = opt_cqAnalyticsTestandtargetDeleteauthoractivitylistenerEnabled;
  }

  /** @type {!Object} */
  var httpRequestParams = {
    method: 'POST',
    url: path,
    json: true,
            params: queryParameters,
    headers: headerParams
  };

  if (opt_extraHttpRequestParams) {
    httpRequestParams = angular.extend(httpRequestParams, opt_extraHttpRequestParams);
  }

  return (/** @type {?} */ (this.http_))(httpRequestParams);
}

/**
 * 
 * 
 * @param {!boolean=} opt_post 
 * @param {!boolean=} opt_apply 
 * @param {!boolean=} opt_delete 
 * @param {!string=} opt_action 
 * @param {!string=} opt_location 
 * @param {!Array<!string>=} opt_propertylist 
 * @param {!boolean=} opt_cqAnalyticsTestandtargetPushauthorcampaignpagelistenerEnabled 
 * @param {!angular.$http.Config=} opt_extraHttpRequestParams Extra HTTP parameters to send.
 * @return {!angular.$q.Promise<!API.Client.comDayCqAnalyticsTestandtargetImplPushAuthorCampaignPageListenerInfo>}
 */
API.Client.ConfigmgrApi.prototype.comDayCqAnalyticsTestandtargetImplPushAuthorCampaignPageListener = function(opt_post, opt_apply, opt_delete, opt_action, opt_location, opt_propertylist, opt_cqAnalyticsTestandtargetPushauthorcampaignpagelistenerEnabled, opt_extraHttpRequestParams) {
  /** @const {string} */
  var path = this.basePath_ + '/system/console/configMgr/com.day.cq.analytics.testandtarget.impl.PushAuthorCampaignPageListener';

  /** @type {!Object} */
  var queryParameters = {};

  /** @type {!Object} */
  var headerParams = angular.extend({}, this.defaultHeaders_);
  if (opt_post !== undefined) {
    queryParameters['post'] = opt_post;
  }

  if (opt_apply !== undefined) {
    queryParameters['apply'] = opt_apply;
  }

  if (opt_delete !== undefined) {
    queryParameters['delete'] = opt_delete;
  }

  if (opt_action !== undefined) {
    queryParameters['action'] = opt_action;
  }

  if (opt_location !== undefined) {
    queryParameters['$location'] = opt_location;
  }

  if (opt_propertylist !== undefined) {
    queryParameters['propertylist'] = opt_propertylist;
  }

  if (opt_cqAnalyticsTestandtargetPushauthorcampaignpagelistenerEnabled !== undefined) {
    queryParameters['cq.analytics.testandtarget.pushauthorcampaignpagelistener.enabled'] = opt_cqAnalyticsTestandtargetPushauthorcampaignpagelistenerEnabled;
  }

  /** @type {!Object} */
  var httpRequestParams = {
    method: 'POST',
    url: path,
    json: true,
            params: queryParameters,
    headers: headerParams
  };

  if (opt_extraHttpRequestParams) {
    httpRequestParams = angular.extend(httpRequestParams, opt_extraHttpRequestParams);
  }

  return (/** @type {?} */ (this.http_))(httpRequestParams);
}

/**
 * 
 * 
 * @param {!boolean=} opt_post 
 * @param {!boolean=} opt_apply 
 * @param {!boolean=} opt_delete 
 * @param {!string=} opt_action 
 * @param {!string=} opt_location 
 * @param {!Array<!string>=} opt_propertylist 
 * @param {!boolean=} opt_cqAnalyticsTestandtargetSegmentimporterEnabled 
 * @param {!angular.$http.Config=} opt_extraHttpRequestParams Extra HTTP parameters to send.
 * @return {!angular.$q.Promise<!API.Client.comDayCqAnalyticsTestandtargetImplSegmentImporterInfo>}
 */
API.Client.ConfigmgrApi.prototype.comDayCqAnalyticsTestandtargetImplSegmentImporter = function(opt_post, opt_apply, opt_delete, opt_action, opt_location, opt_propertylist, opt_cqAnalyticsTestandtargetSegmentimporterEnabled, opt_extraHttpRequestParams) {
  /** @const {string} */
  var path = this.basePath_ + '/system/console/configMgr/com.day.cq.analytics.testandtarget.impl.SegmentImporter';

  /** @type {!Object} */
  var queryParameters = {};

  /** @type {!Object} */
  var headerParams = angular.extend({}, this.defaultHeaders_);
  if (opt_post !== undefined) {
    queryParameters['post'] = opt_post;
  }

  if (opt_apply !== undefined) {
    queryParameters['apply'] = opt_apply;
  }

  if (opt_delete !== undefined) {
    queryParameters['delete'] = opt_delete;
  }

  if (opt_action !== undefined) {
    queryParameters['action'] = opt_action;
  }

  if (opt_location !== undefined) {
    queryParameters['$location'] = opt_location;
  }

  if (opt_propertylist !== undefined) {
    queryParameters['propertylist'] = opt_propertylist;
  }

  if (opt_cqAnalyticsTestandtargetSegmentimporterEnabled !== undefined) {
    queryParameters['cq.analytics.testandtarget.segmentimporter.enabled'] = opt_cqAnalyticsTestandtargetSegmentimporterEnabled;
  }

  /** @type {!Object} */
  var httpRequestParams = {
    method: 'POST',
    url: path,
    json: true,
            params: queryParameters,
    headers: headerParams
  };

  if (opt_extraHttpRequestParams) {
    httpRequestParams = angular.extend(httpRequestParams, opt_extraHttpRequestParams);
  }

  return (/** @type {?} */ (this.http_))(httpRequestParams);
}

/**
 * 
 * 
 * @param {!boolean=} opt_post 
 * @param {!boolean=} opt_apply 
 * @param {!boolean=} opt_delete 
 * @param {!string=} opt_action 
 * @param {!string=} opt_location 
 * @param {!Array<!string>=} opt_propertylist 
 * @param {!string=} opt_endpointUri 
 * @param {!number=} opt_connectionTimeout 
 * @param {!number=} opt_socketTimeout 
 * @param {!angular.$http.Config=} opt_extraHttpRequestParams Extra HTTP parameters to send.
 * @return {!angular.$q.Promise<!API.Client.comDayCqAnalyticsTestandtargetImplServiceWebServiceImplInfo>}
 */
API.Client.ConfigmgrApi.prototype.comDayCqAnalyticsTestandtargetImplServiceWebServiceImpl = function(opt_post, opt_apply, opt_delete, opt_action, opt_location, opt_propertylist, opt_endpointUri, opt_connectionTimeout, opt_socketTimeout, opt_extraHttpRequestParams) {
  /** @const {string} */
  var path = this.basePath_ + '/system/console/configMgr/com.day.cq.analytics.testandtarget.impl.service.WebServiceImpl';

  /** @type {!Object} */
  var queryParameters = {};

  /** @type {!Object} */
  var headerParams = angular.extend({}, this.defaultHeaders_);
  if (opt_post !== undefined) {
    queryParameters['post'] = opt_post;
  }

  if (opt_apply !== undefined) {
    queryParameters['apply'] = opt_apply;
  }

  if (opt_delete !== undefined) {
    queryParameters['delete'] = opt_delete;
  }

  if (opt_action !== undefined) {
    queryParameters['action'] = opt_action;
  }

  if (opt_location !== undefined) {
    queryParameters['$location'] = opt_location;
  }

  if (opt_propertylist !== undefined) {
    queryParameters['propertylist'] = opt_propertylist;
  }

  if (opt_endpointUri !== undefined) {
    queryParameters['endpointUri'] = opt_endpointUri;
  }

  if (opt_connectionTimeout !== undefined) {
    queryParameters['connectionTimeout'] = opt_connectionTimeout;
  }

  if (opt_socketTimeout !== undefined) {
    queryParameters['socketTimeout'] = opt_socketTimeout;
  }

  /** @type {!Object} */
  var httpRequestParams = {
    method: 'POST',
    url: path,
    json: true,
            params: queryParameters,
    headers: headerParams
  };

  if (opt_extraHttpRequestParams) {
    httpRequestParams = angular.extend(httpRequestParams, opt_extraHttpRequestParams);
  }

  return (/** @type {?} */ (this.http_))(httpRequestParams);
}

/**
 * 
 * 
 * @param {!boolean=} opt_post 
 * @param {!boolean=} opt_apply 
 * @param {!boolean=} opt_delete 
 * @param {!string=} opt_action 
 * @param {!string=} opt_location 
 * @param {!Array<!string>=} opt_propertylist 
 * @param {!string=} opt_testandtargetEndpointUrl 
 * @param {!angular.$http.Config=} opt_extraHttpRequestParams Extra HTTP parameters to send.
 * @return {!angular.$q.Promise<!API.Client.comDayCqAnalyticsTestandtargetImplServletsAdminServerServletInfo>}
 */
API.Client.ConfigmgrApi.prototype.comDayCqAnalyticsTestandtargetImplServletsAdminServerServlet = function(opt_post, opt_apply, opt_delete, opt_action, opt_location, opt_propertylist, opt_testandtargetEndpointUrl, opt_extraHttpRequestParams) {
  /** @const {string} */
  var path = this.basePath_ + '/system/console/configMgr/com.day.cq.analytics.testandtarget.impl.servlets.AdminServerServlet';

  /** @type {!Object} */
  var queryParameters = {};

  /** @type {!Object} */
  var headerParams = angular.extend({}, this.defaultHeaders_);
  if (opt_post !== undefined) {
    queryParameters['post'] = opt_post;
  }

  if (opt_apply !== undefined) {
    queryParameters['apply'] = opt_apply;
  }

  if (opt_delete !== undefined) {
    queryParameters['delete'] = opt_delete;
  }

  if (opt_action !== undefined) {
    queryParameters['action'] = opt_action;
  }

  if (opt_location !== undefined) {
    queryParameters['$location'] = opt_location;
  }

  if (opt_propertylist !== undefined) {
    queryParameters['propertylist'] = opt_propertylist;
  }

  if (opt_testandtargetEndpointUrl !== undefined) {
    queryParameters['testandtarget.endpoint.url'] = opt_testandtargetEndpointUrl;
  }

  /** @type {!Object} */
  var httpRequestParams = {
    method: 'POST',
    url: path,
    json: true,
            params: queryParameters,
    headers: headerParams
  };

  if (opt_extraHttpRequestParams) {
    httpRequestParams = angular.extend(httpRequestParams, opt_extraHttpRequestParams);
  }

  return (/** @type {?} */ (this.http_))(httpRequestParams);
}

/**
 * 
 * 
 * @param {!boolean=} opt_post 
 * @param {!boolean=} opt_apply 
 * @param {!boolean=} opt_delete 
 * @param {!string=} opt_action 
 * @param {!string=} opt_location 
 * @param {!Array<!string>=} opt_propertylist 
 * @param {!string=} opt_cqAnalyticsTestandtargetApiUrl 
 * @param {!number=} opt_cqAnalyticsTestandtargetTimeout 
 * @param {!number=} opt_cqAnalyticsTestandtargetSockettimeout 
 * @param {!string=} opt_cqAnalyticsTestandtargetRecommendationsUrlReplace 
 * @param {!string=} opt_cqAnalyticsTestandtargetRecommendationsUrlReplacewith 
 * @param {!angular.$http.Config=} opt_extraHttpRequestParams Extra HTTP parameters to send.
 * @return {!angular.$q.Promise<!API.Client.comDayCqAnalyticsTestandtargetImplTestandtargetHttpClientImplInfo>}
 */
API.Client.ConfigmgrApi.prototype.comDayCqAnalyticsTestandtargetImplTestandtargetHttpClientImpl = function(opt_post, opt_apply, opt_delete, opt_action, opt_location, opt_propertylist, opt_cqAnalyticsTestandtargetApiUrl, opt_cqAnalyticsTestandtargetTimeout, opt_cqAnalyticsTestandtargetSockettimeout, opt_cqAnalyticsTestandtargetRecommendationsUrlReplace, opt_cqAnalyticsTestandtargetRecommendationsUrlReplacewith, opt_extraHttpRequestParams) {
  /** @const {string} */
  var path = this.basePath_ + '/system/console/configMgr/com.day.cq.analytics.testandtarget.impl.TestandtargetHttpClientImpl';

  /** @type {!Object} */
  var queryParameters = {};

  /** @type {!Object} */
  var headerParams = angular.extend({}, this.defaultHeaders_);
  if (opt_post !== undefined) {
    queryParameters['post'] = opt_post;
  }

  if (opt_apply !== undefined) {
    queryParameters['apply'] = opt_apply;
  }

  if (opt_delete !== undefined) {
    queryParameters['delete'] = opt_delete;
  }

  if (opt_action !== undefined) {
    queryParameters['action'] = opt_action;
  }

  if (opt_location !== undefined) {
    queryParameters['$location'] = opt_location;
  }

  if (opt_propertylist !== undefined) {
    queryParameters['propertylist'] = opt_propertylist;
  }

  if (opt_cqAnalyticsTestandtargetApiUrl !== undefined) {
    queryParameters['cq.analytics.testandtarget.api.url'] = opt_cqAnalyticsTestandtargetApiUrl;
  }

  if (opt_cqAnalyticsTestandtargetTimeout !== undefined) {
    queryParameters['cq.analytics.testandtarget.timeout'] = opt_cqAnalyticsTestandtargetTimeout;
  }

  if (opt_cqAnalyticsTestandtargetSockettimeout !== undefined) {
    queryParameters['cq.analytics.testandtarget.sockettimeout'] = opt_cqAnalyticsTestandtargetSockettimeout;
  }

  if (opt_cqAnalyticsTestandtargetRecommendationsUrlReplace !== undefined) {
    queryParameters['cq.analytics.testandtarget.recommendations.url.replace'] = opt_cqAnalyticsTestandtargetRecommendationsUrlReplace;
  }

  if (opt_cqAnalyticsTestandtargetRecommendationsUrlReplacewith !== undefined) {
    queryParameters['cq.analytics.testandtarget.recommendations.url.replacewith'] = opt_cqAnalyticsTestandtargetRecommendationsUrlReplacewith;
  }

  /** @type {!Object} */
  var httpRequestParams = {
    method: 'POST',
    url: path,
    json: true,
            params: queryParameters,
    headers: headerParams
  };

  if (opt_extraHttpRequestParams) {
    httpRequestParams = angular.extend(httpRequestParams, opt_extraHttpRequestParams);
  }

  return (/** @type {?} */ (this.http_))(httpRequestParams);
}

/**
 * 
 * 
 * @param {!boolean=} opt_post 
 * @param {!boolean=} opt_apply 
 * @param {!boolean=} opt_delete 
 * @param {!string=} opt_action 
 * @param {!string=} opt_location 
 * @param {!Array<!string>=} opt_propertylist 
 * @param {!Array<!string>=} opt_cugExemptedPrincipals 
 * @param {!boolean=} opt_cugEnabled 
 * @param {!string=} opt_cugPrincipalsRegex 
 * @param {!string=} opt_cugPrincipalsReplacement 
 * @param {!angular.$http.Config=} opt_extraHttpRequestParams Extra HTTP parameters to send.
 * @return {!angular.$q.Promise<!API.Client.comDayCqAuthImplCugCugSupportImplInfo>}
 */
API.Client.ConfigmgrApi.prototype.comDayCqAuthImplCugCugSupportImpl = function(opt_post, opt_apply, opt_delete, opt_action, opt_location, opt_propertylist, opt_cugExemptedPrincipals, opt_cugEnabled, opt_cugPrincipalsRegex, opt_cugPrincipalsReplacement, opt_extraHttpRequestParams) {
  /** @const {string} */
  var path = this.basePath_ + '/system/console/configMgr/com.day.cq.auth.impl.cug.CugSupportImpl';

  /** @type {!Object} */
  var queryParameters = {};

  /** @type {!Object} */
  var headerParams = angular.extend({}, this.defaultHeaders_);
  if (opt_post !== undefined) {
    queryParameters['post'] = opt_post;
  }

  if (opt_apply !== undefined) {
    queryParameters['apply'] = opt_apply;
  }

  if (opt_delete !== undefined) {
    queryParameters['delete'] = opt_delete;
  }

  if (opt_action !== undefined) {
    queryParameters['action'] = opt_action;
  }

  if (opt_location !== undefined) {
    queryParameters['$location'] = opt_location;
  }

  if (opt_propertylist !== undefined) {
    queryParameters['propertylist'] = opt_propertylist;
  }

  if (opt_cugExemptedPrincipals !== undefined) {
    queryParameters['cug.exempted.principals'] = opt_cugExemptedPrincipals;
  }

  if (opt_cugEnabled !== undefined) {
    queryParameters['cug.enabled'] = opt_cugEnabled;
  }

  if (opt_cugPrincipalsRegex !== undefined) {
    queryParameters['cug.principals.regex'] = opt_cugPrincipalsRegex;
  }

  if (opt_cugPrincipalsReplacement !== undefined) {
    queryParameters['cug.principals.replacement'] = opt_cugPrincipalsReplacement;
  }

  /** @type {!Object} */
  var httpRequestParams = {
    method: 'POST',
    url: path,
    json: true,
            params: queryParameters,
    headers: headerParams
  };

  if (opt_extraHttpRequestParams) {
    httpRequestParams = angular.extend(httpRequestParams, opt_extraHttpRequestParams);
  }

  return (/** @type {?} */ (this.http_))(httpRequestParams);
}

/**
 * 
 * 
 * @param {!boolean=} opt_post 
 * @param {!boolean=} opt_apply 
 * @param {!boolean=} opt_delete 
 * @param {!string=} opt_action 
 * @param {!string=} opt_location 
 * @param {!Array<!string>=} opt_propertylist 
 * @param {!string=} opt_path 
 * @param {!number=} opt_serviceRanking 
 * @param {!Array<!string>=} opt_authLoginselectorMappings 
 * @param {!Array<!string>=} opt_authLoginselectorChangepwMappings 
 * @param {!string=} opt_authLoginselectorDefaultloginpage 
 * @param {!string=} opt_authLoginselectorDefaultchangepwpage 
 * @param {!Array<!string>=} opt_authLoginselectorHandle 
 * @param {!boolean=} opt_authLoginselectorHandleAllExtensions 
 * @param {!angular.$http.Config=} opt_extraHttpRequestParams Extra HTTP parameters to send.
 * @return {!angular.$q.Promise<!API.Client.comDayCqAuthImplLoginSelectorHandlerInfo>}
 */
API.Client.ConfigmgrApi.prototype.comDayCqAuthImplLoginSelectorHandler = function(opt_post, opt_apply, opt_delete, opt_action, opt_location, opt_propertylist, opt_path, opt_serviceRanking, opt_authLoginselectorMappings, opt_authLoginselectorChangepwMappings, opt_authLoginselectorDefaultloginpage, opt_authLoginselectorDefaultchangepwpage, opt_authLoginselectorHandle, opt_authLoginselectorHandleAllExtensions, opt_extraHttpRequestParams) {
  /** @const {string} */
  var path = this.basePath_ + '/system/console/configMgr/com.day.cq.auth.impl.LoginSelectorHandler';

  /** @type {!Object} */
  var queryParameters = {};

  /** @type {!Object} */
  var headerParams = angular.extend({}, this.defaultHeaders_);
  if (opt_post !== undefined) {
    queryParameters['post'] = opt_post;
  }

  if (opt_apply !== undefined) {
    queryParameters['apply'] = opt_apply;
  }

  if (opt_delete !== undefined) {
    queryParameters['delete'] = opt_delete;
  }

  if (opt_action !== undefined) {
    queryParameters['action'] = opt_action;
  }

  if (opt_location !== undefined) {
    queryParameters['$location'] = opt_location;
  }

  if (opt_propertylist !== undefined) {
    queryParameters['propertylist'] = opt_propertylist;
  }

  if (opt_path !== undefined) {
    queryParameters['path'] = opt_path;
  }

  if (opt_serviceRanking !== undefined) {
    queryParameters['service.ranking'] = opt_serviceRanking;
  }

  if (opt_authLoginselectorMappings !== undefined) {
    queryParameters['auth.loginselector.mappings'] = opt_authLoginselectorMappings;
  }

  if (opt_authLoginselectorChangepwMappings !== undefined) {
    queryParameters['auth.loginselector.changepw.mappings'] = opt_authLoginselectorChangepwMappings;
  }

  if (opt_authLoginselectorDefaultloginpage !== undefined) {
    queryParameters['auth.loginselector.defaultloginpage'] = opt_authLoginselectorDefaultloginpage;
  }

  if (opt_authLoginselectorDefaultchangepwpage !== undefined) {
    queryParameters['auth.loginselector.defaultchangepwpage'] = opt_authLoginselectorDefaultchangepwpage;
  }

  if (opt_authLoginselectorHandle !== undefined) {
    queryParameters['auth.loginselector.handle'] = opt_authLoginselectorHandle;
  }

  if (opt_authLoginselectorHandleAllExtensions !== undefined) {
    queryParameters['auth.loginselector.handle.all.extensions'] = opt_authLoginselectorHandleAllExtensions;
  }

  /** @type {!Object} */
  var httpRequestParams = {
    method: 'POST',
    url: path,
    json: true,
            params: queryParameters,
    headers: headerParams
  };

  if (opt_extraHttpRequestParams) {
    httpRequestParams = angular.extend(httpRequestParams, opt_extraHttpRequestParams);
  }

  return (/** @type {?} */ (this.http_))(httpRequestParams);
}

/**
 * 
 * 
 * @param {!boolean=} opt_post 
 * @param {!boolean=} opt_apply 
 * @param {!boolean=} opt_delete 
 * @param {!string=} opt_action 
 * @param {!string=} opt_location 
 * @param {!Array<!string>=} opt_propertylist 
 * @param {!Array<!string>=} opt_externalizerDomains 
 * @param {!string=} opt_externalizerHost 
 * @param {!string=} opt_externalizerContextpath 
 * @param {!boolean=} opt_externalizerEncodedpath 
 * @param {!angular.$http.Config=} opt_extraHttpRequestParams Extra HTTP parameters to send.
 * @return {!angular.$q.Promise<!API.Client.comDayCqCommonsImplExternalizerImplInfo>}
 */
API.Client.ConfigmgrApi.prototype.comDayCqCommonsImplExternalizerImpl = function(opt_post, opt_apply, opt_delete, opt_action, opt_location, opt_propertylist, opt_externalizerDomains, opt_externalizerHost, opt_externalizerContextpath, opt_externalizerEncodedpath, opt_extraHttpRequestParams) {
  /** @const {string} */
  var path = this.basePath_ + '/system/console/configMgr/com.day.cq.commons.impl.ExternalizerImpl';

  /** @type {!Object} */
  var queryParameters = {};

  /** @type {!Object} */
  var headerParams = angular.extend({}, this.defaultHeaders_);
  if (opt_post !== undefined) {
    queryParameters['post'] = opt_post;
  }

  if (opt_apply !== undefined) {
    queryParameters['apply'] = opt_apply;
  }

  if (opt_delete !== undefined) {
    queryParameters['delete'] = opt_delete;
  }

  if (opt_action !== undefined) {
    queryParameters['action'] = opt_action;
  }

  if (opt_location !== undefined) {
    queryParameters['$location'] = opt_location;
  }

  if (opt_propertylist !== undefined) {
    queryParameters['propertylist'] = opt_propertylist;
  }

  if (opt_externalizerDomains !== undefined) {
    queryParameters['externalizer.domains'] = opt_externalizerDomains;
  }

  if (opt_externalizerHost !== undefined) {
    queryParameters['externalizer.host'] = opt_externalizerHost;
  }

  if (opt_externalizerContextpath !== undefined) {
    queryParameters['externalizer.contextpath'] = opt_externalizerContextpath;
  }

  if (opt_externalizerEncodedpath !== undefined) {
    queryParameters['externalizer.encodedpath'] = opt_externalizerEncodedpath;
  }

  /** @type {!Object} */
  var httpRequestParams = {
    method: 'POST',
    url: path,
    json: true,
            params: queryParameters,
    headers: headerParams
  };

  if (opt_extraHttpRequestParams) {
    httpRequestParams = angular.extend(httpRequestParams, opt_extraHttpRequestParams);
  }

  return (/** @type {?} */ (this.http_))(httpRequestParams);
}

/**
 * 
 * 
 * @param {!boolean=} opt_post 
 * @param {!boolean=} opt_apply 
 * @param {!boolean=} opt_delete 
 * @param {!string=} opt_action 
 * @param {!string=} opt_location 
 * @param {!Array<!string>=} opt_propertylist 
 * @param {!string=} opt_rootmappingTarget 
 * @param {!angular.$http.Config=} opt_extraHttpRequestParams Extra HTTP parameters to send.
 * @return {!angular.$q.Promise<!API.Client.comDayCqCommonsServletsRootMappingServletInfo>}
 */
API.Client.ConfigmgrApi.prototype.comDayCqCommonsServletsRootMappingServlet = function(opt_post, opt_apply, opt_delete, opt_action, opt_location, opt_propertylist, opt_rootmappingTarget, opt_extraHttpRequestParams) {
  /** @const {string} */
  var path = this.basePath_ + '/system/console/configMgr/com.day.cq.commons.servlets.RootMappingServlet';

  /** @type {!Object} */
  var queryParameters = {};

  /** @type {!Object} */
  var headerParams = angular.extend({}, this.defaultHeaders_);
  if (opt_post !== undefined) {
    queryParameters['post'] = opt_post;
  }

  if (opt_apply !== undefined) {
    queryParameters['apply'] = opt_apply;
  }

  if (opt_delete !== undefined) {
    queryParameters['delete'] = opt_delete;
  }

  if (opt_action !== undefined) {
    queryParameters['action'] = opt_action;
  }

  if (opt_location !== undefined) {
    queryParameters['$location'] = opt_location;
  }

  if (opt_propertylist !== undefined) {
    queryParameters['propertylist'] = opt_propertylist;
  }

  if (opt_rootmappingTarget !== undefined) {
    queryParameters['rootmapping.target'] = opt_rootmappingTarget;
  }

  /** @type {!Object} */
  var httpRequestParams = {
    method: 'POST',
    url: path,
    json: true,
            params: queryParameters,
    headers: headerParams
  };

  if (opt_extraHttpRequestParams) {
    httpRequestParams = angular.extend(httpRequestParams, opt_extraHttpRequestParams);
  }

  return (/** @type {?} */ (this.http_))(httpRequestParams);
}

/**
 * 
 * 
 * @param {!boolean=} opt_post 
 * @param {!boolean=} opt_apply 
 * @param {!boolean=} opt_delete 
 * @param {!string=} opt_action 
 * @param {!string=} opt_location 
 * @param {!Array<!string>=} opt_propertylist 
 * @param {!Array<!string>=} opt_codeupgradetasks 
 * @param {!Array<!string>=} opt_codeupgradetaskfilters 
 * @param {!angular.$http.Config=} opt_extraHttpRequestParams Extra HTTP parameters to send.
 * @return {!angular.$q.Promise<!API.Client.comDayCqCompatCodeupgradeImplCodeUpgradeExecutionConditionCheckeInfo>}
 */
API.Client.ConfigmgrApi.prototype.comDayCqCompatCodeupgradeImplCodeUpgradeExecutionConditionChecke = function(opt_post, opt_apply, opt_delete, opt_action, opt_location, opt_propertylist, opt_codeupgradetasks, opt_codeupgradetaskfilters, opt_extraHttpRequestParams) {
  /** @const {string} */
  var path = this.basePath_ + '/system/console/configMgr/com.day.cq.compat.codeupgrade.impl.CodeUpgradeExecutionConditionChecker';

  /** @type {!Object} */
  var queryParameters = {};

  /** @type {!Object} */
  var headerParams = angular.extend({}, this.defaultHeaders_);
  if (opt_post !== undefined) {
    queryParameters['post'] = opt_post;
  }

  if (opt_apply !== undefined) {
    queryParameters['apply'] = opt_apply;
  }

  if (opt_delete !== undefined) {
    queryParameters['delete'] = opt_delete;
  }

  if (opt_action !== undefined) {
    queryParameters['action'] = opt_action;
  }

  if (opt_location !== undefined) {
    queryParameters['$location'] = opt_location;
  }

  if (opt_propertylist !== undefined) {
    queryParameters['propertylist'] = opt_propertylist;
  }

  if (opt_codeupgradetasks !== undefined) {
    queryParameters['codeupgradetasks'] = opt_codeupgradetasks;
  }

  if (opt_codeupgradetaskfilters !== undefined) {
    queryParameters['codeupgradetaskfilters'] = opt_codeupgradetaskfilters;
  }

  /** @type {!Object} */
  var httpRequestParams = {
    method: 'POST',
    url: path,
    json: true,
            params: queryParameters,
    headers: headerParams
  };

  if (opt_extraHttpRequestParams) {
    httpRequestParams = angular.extend(httpRequestParams, opt_extraHttpRequestParams);
  }

  return (/** @type {?} */ (this.http_))(httpRequestParams);
}

/**
 * 
 * 
 * @param {!boolean=} opt_post 
 * @param {!boolean=} opt_apply 
 * @param {!boolean=} opt_delete 
 * @param {!string=} opt_action 
 * @param {!string=} opt_location 
 * @param {!Array<!string>=} opt_propertylist 
 * @param {!Array<!string>=} opt_upgradeTaskIgnoreList 
 * @param {!angular.$http.Config=} opt_extraHttpRequestParams Extra HTTP parameters to send.
 * @return {!angular.$q.Promise<!API.Client.comDayCqCompatCodeupgradeImplUpgradeTaskIgnoreListInfo>}
 */
API.Client.ConfigmgrApi.prototype.comDayCqCompatCodeupgradeImplUpgradeTaskIgnoreList = function(opt_post, opt_apply, opt_delete, opt_action, opt_location, opt_propertylist, opt_upgradeTaskIgnoreList, opt_extraHttpRequestParams) {
  /** @const {string} */
  var path = this.basePath_ + '/system/console/configMgr/com.day.cq.compat.codeupgrade.impl.UpgradeTaskIgnoreList';

  /** @type {!Object} */
  var queryParameters = {};

  /** @type {!Object} */
  var headerParams = angular.extend({}, this.defaultHeaders_);
  if (opt_post !== undefined) {
    queryParameters['post'] = opt_post;
  }

  if (opt_apply !== undefined) {
    queryParameters['apply'] = opt_apply;
  }

  if (opt_delete !== undefined) {
    queryParameters['delete'] = opt_delete;
  }

  if (opt_action !== undefined) {
    queryParameters['action'] = opt_action;
  }

  if (opt_location !== undefined) {
    queryParameters['$location'] = opt_location;
  }

  if (opt_propertylist !== undefined) {
    queryParameters['propertylist'] = opt_propertylist;
  }

  if (opt_upgradeTaskIgnoreList !== undefined) {
    queryParameters['upgradeTaskIgnoreList'] = opt_upgradeTaskIgnoreList;
  }

  /** @type {!Object} */
  var httpRequestParams = {
    method: 'POST',
    url: path,
    json: true,
            params: queryParameters,
    headers: headerParams
  };

  if (opt_extraHttpRequestParams) {
    httpRequestParams = angular.extend(httpRequestParams, opt_extraHttpRequestParams);
  }

  return (/** @type {?} */ (this.http_))(httpRequestParams);
}

/**
 * 
 * 
 * @param {!boolean=} opt_post 
 * @param {!boolean=} opt_apply 
 * @param {!boolean=} opt_delete 
 * @param {!string=} opt_action 
 * @param {!string=} opt_location 
 * @param {!Array<!string>=} opt_propertylist 
 * @param {!string=} opt_effectiveBundleListPath 
 * @param {!angular.$http.Config=} opt_extraHttpRequestParams Extra HTTP parameters to send.
 * @return {!angular.$q.Promise<!API.Client.comDayCqCompatCodeupgradeImplVersionRangeTaskIgnorelistInfo>}
 */
API.Client.ConfigmgrApi.prototype.comDayCqCompatCodeupgradeImplVersionRangeTaskIgnorelist = function(opt_post, opt_apply, opt_delete, opt_action, opt_location, opt_propertylist, opt_effectiveBundleListPath, opt_extraHttpRequestParams) {
  /** @const {string} */
  var path = this.basePath_ + '/system/console/configMgr/com.day.cq.compat.codeupgrade.impl.VersionRangeTaskIgnorelist';

  /** @type {!Object} */
  var queryParameters = {};

  /** @type {!Object} */
  var headerParams = angular.extend({}, this.defaultHeaders_);
  if (opt_post !== undefined) {
    queryParameters['post'] = opt_post;
  }

  if (opt_apply !== undefined) {
    queryParameters['apply'] = opt_apply;
  }

  if (opt_delete !== undefined) {
    queryParameters['delete'] = opt_delete;
  }

  if (opt_action !== undefined) {
    queryParameters['action'] = opt_action;
  }

  if (opt_location !== undefined) {
    queryParameters['$location'] = opt_location;
  }

  if (opt_propertylist !== undefined) {
    queryParameters['propertylist'] = opt_propertylist;
  }

  if (opt_effectiveBundleListPath !== undefined) {
    queryParameters['effectiveBundleListPath'] = opt_effectiveBundleListPath;
  }

  /** @type {!Object} */
  var httpRequestParams = {
    method: 'POST',
    url: path,
    json: true,
            params: queryParameters,
    headers: headerParams
  };

  if (opt_extraHttpRequestParams) {
    httpRequestParams = angular.extend(httpRequestParams, opt_extraHttpRequestParams);
  }

  return (/** @type {?} */ (this.http_))(httpRequestParams);
}

/**
 * 
 * 
 * @param {!boolean=} opt_post 
 * @param {!boolean=} opt_apply 
 * @param {!boolean=} opt_delete 
 * @param {!string=} opt_action 
 * @param {!string=} opt_location 
 * @param {!Array<!string>=} opt_propertylist 
 * @param {!string=} opt_contentsyncFallbackAuthorizable 
 * @param {!string=} opt_contentsyncFallbackUpdateuser 
 * @param {!angular.$http.Config=} opt_extraHttpRequestParams Extra HTTP parameters to send.
 * @return {!angular.$q.Promise<!API.Client.comDayCqContentsyncImplContentSyncManagerImplInfo>}
 */
API.Client.ConfigmgrApi.prototype.comDayCqContentsyncImplContentSyncManagerImpl = function(opt_post, opt_apply, opt_delete, opt_action, opt_location, opt_propertylist, opt_contentsyncFallbackAuthorizable, opt_contentsyncFallbackUpdateuser, opt_extraHttpRequestParams) {
  /** @const {string} */
  var path = this.basePath_ + '/system/console/configMgr/com.day.cq.contentsync.impl.ContentSyncManagerImpl';

  /** @type {!Object} */
  var queryParameters = {};

  /** @type {!Object} */
  var headerParams = angular.extend({}, this.defaultHeaders_);
  if (opt_post !== undefined) {
    queryParameters['post'] = opt_post;
  }

  if (opt_apply !== undefined) {
    queryParameters['apply'] = opt_apply;
  }

  if (opt_delete !== undefined) {
    queryParameters['delete'] = opt_delete;
  }

  if (opt_action !== undefined) {
    queryParameters['action'] = opt_action;
  }

  if (opt_location !== undefined) {
    queryParameters['$location'] = opt_location;
  }

  if (opt_propertylist !== undefined) {
    queryParameters['propertylist'] = opt_propertylist;
  }

  if (opt_contentsyncFallbackAuthorizable !== undefined) {
    queryParameters['contentsync.fallback.authorizable'] = opt_contentsyncFallbackAuthorizable;
  }

  if (opt_contentsyncFallbackUpdateuser !== undefined) {
    queryParameters['contentsync.fallback.updateuser'] = opt_contentsyncFallbackUpdateuser;
  }

  /** @type {!Object} */
  var httpRequestParams = {
    method: 'POST',
    url: path,
    json: true,
            params: queryParameters,
    headers: headerParams
  };

  if (opt_extraHttpRequestParams) {
    httpRequestParams = angular.extend(httpRequestParams, opt_extraHttpRequestParams);
  }

  return (/** @type {?} */ (this.http_))(httpRequestParams);
}

/**
 * 
 * 
 * @param {!boolean=} opt_post 
 * @param {!boolean=} opt_apply 
 * @param {!boolean=} opt_delete 
 * @param {!string=} opt_action 
 * @param {!string=} opt_location 
 * @param {!Array<!string>=} opt_propertylist 
 * @param {!number=} opt_largeFileThreshold 
 * @param {!number=} opt_largeCommentThreshold 
 * @param {!boolean=} opt_cqDamEnableExtMetaExtraction 
 * @param {!angular.$http.Config=} opt_extraHttpRequestParams Extra HTTP parameters to send.
 * @return {!angular.$q.Promise<!API.Client.comDayCqDamCommonsHandlerStandardImageHandlerInfo>}
 */
API.Client.ConfigmgrApi.prototype.comDayCqDamCommonsHandlerStandardImageHandler = function(opt_post, opt_apply, opt_delete, opt_action, opt_location, opt_propertylist, opt_largeFileThreshold, opt_largeCommentThreshold, opt_cqDamEnableExtMetaExtraction, opt_extraHttpRequestParams) {
  /** @const {string} */
  var path = this.basePath_ + '/system/console/configMgr/com.day.cq.dam.commons.handler.StandardImageHandler';

  /** @type {!Object} */
  var queryParameters = {};

  /** @type {!Object} */
  var headerParams = angular.extend({}, this.defaultHeaders_);
  if (opt_post !== undefined) {
    queryParameters['post'] = opt_post;
  }

  if (opt_apply !== undefined) {
    queryParameters['apply'] = opt_apply;
  }

  if (opt_delete !== undefined) {
    queryParameters['delete'] = opt_delete;
  }

  if (opt_action !== undefined) {
    queryParameters['action'] = opt_action;
  }

  if (opt_location !== undefined) {
    queryParameters['$location'] = opt_location;
  }

  if (opt_propertylist !== undefined) {
    queryParameters['propertylist'] = opt_propertylist;
  }

  if (opt_largeFileThreshold !== undefined) {
    queryParameters['large_file_threshold'] = opt_largeFileThreshold;
  }

  if (opt_largeCommentThreshold !== undefined) {
    queryParameters['large_comment_threshold'] = opt_largeCommentThreshold;
  }

  if (opt_cqDamEnableExtMetaExtraction !== undefined) {
    queryParameters['cq.dam.enable.ext.meta.extraction'] = opt_cqDamEnableExtMetaExtraction;
  }

  /** @type {!Object} */
  var httpRequestParams = {
    method: 'POST',
    url: path,
    json: true,
            params: queryParameters,
    headers: headerParams
  };

  if (opt_extraHttpRequestParams) {
    httpRequestParams = angular.extend(httpRequestParams, opt_extraHttpRequestParams);
  }

  return (/** @type {?} */ (this.http_))(httpRequestParams);
}

/**
 * 
 * 
 * @param {!boolean=} opt_post 
 * @param {!boolean=} opt_apply 
 * @param {!boolean=} opt_delete 
 * @param {!string=} opt_action 
 * @param {!string=} opt_location 
 * @param {!Array<!string>=} opt_propertylist 
 * @param {!boolean=} opt_xmpFilterApplyWhitelist 
 * @param {!Array<!string>=} opt_xmpFilterWhitelist 
 * @param {!boolean=} opt_xmpFilterApplyBlacklist 
 * @param {!Array<!string>=} opt_xmpFilterBlacklist 
 * @param {!angular.$http.Config=} opt_extraHttpRequestParams Extra HTTP parameters to send.
 * @return {!angular.$q.Promise<!API.Client.comDayCqDamCommonsMetadataXmpFilterBlackWhiteInfo>}
 */
API.Client.ConfigmgrApi.prototype.comDayCqDamCommonsMetadataXmpFilterBlackWhite = function(opt_post, opt_apply, opt_delete, opt_action, opt_location, opt_propertylist, opt_xmpFilterApplyWhitelist, opt_xmpFilterWhitelist, opt_xmpFilterApplyBlacklist, opt_xmpFilterBlacklist, opt_extraHttpRequestParams) {
  /** @const {string} */
  var path = this.basePath_ + '/system/console/configMgr/com.day.cq.dam.commons.metadata.XmpFilterBlackWhite';

  /** @type {!Object} */
  var queryParameters = {};

  /** @type {!Object} */
  var headerParams = angular.extend({}, this.defaultHeaders_);
  if (opt_post !== undefined) {
    queryParameters['post'] = opt_post;
  }

  if (opt_apply !== undefined) {
    queryParameters['apply'] = opt_apply;
  }

  if (opt_delete !== undefined) {
    queryParameters['delete'] = opt_delete;
  }

  if (opt_action !== undefined) {
    queryParameters['action'] = opt_action;
  }

  if (opt_location !== undefined) {
    queryParameters['$location'] = opt_location;
  }

  if (opt_propertylist !== undefined) {
    queryParameters['propertylist'] = opt_propertylist;
  }

  if (opt_xmpFilterApplyWhitelist !== undefined) {
    queryParameters['xmp.filter.apply_whitelist'] = opt_xmpFilterApplyWhitelist;
  }

  if (opt_xmpFilterWhitelist !== undefined) {
    queryParameters['xmp.filter.whitelist'] = opt_xmpFilterWhitelist;
  }

  if (opt_xmpFilterApplyBlacklist !== undefined) {
    queryParameters['xmp.filter.apply_blacklist'] = opt_xmpFilterApplyBlacklist;
  }

  if (opt_xmpFilterBlacklist !== undefined) {
    queryParameters['xmp.filter.blacklist'] = opt_xmpFilterBlacklist;
  }

  /** @type {!Object} */
  var httpRequestParams = {
    method: 'POST',
    url: path,
    json: true,
            params: queryParameters,
    headers: headerParams
  };

  if (opt_extraHttpRequestParams) {
    httpRequestParams = angular.extend(httpRequestParams, opt_extraHttpRequestParams);
  }

  return (/** @type {?} */ (this.http_))(httpRequestParams);
}

/**
 * 
 * 
 * @param {!boolean=} opt_post 
 * @param {!boolean=} opt_apply 
 * @param {!boolean=} opt_delete 
 * @param {!string=} opt_action 
 * @param {!string=} opt_location 
 * @param {!Array<!string>=} opt_propertylist 
 * @param {!number=} opt_largeFileMin 
 * @param {!boolean=} opt_cacheApply 
 * @param {!Array<!string>=} opt_mimeTypes 
 * @param {!angular.$http.Config=} opt_extraHttpRequestParams Extra HTTP parameters to send.
 * @return {!angular.$q.Promise<!API.Client.comDayCqDamCommonsUtilImplAssetCacheImplInfo>}
 */
API.Client.ConfigmgrApi.prototype.comDayCqDamCommonsUtilImplAssetCacheImpl = function(opt_post, opt_apply, opt_delete, opt_action, opt_location, opt_propertylist, opt_largeFileMin, opt_cacheApply, opt_mimeTypes, opt_extraHttpRequestParams) {
  /** @const {string} */
  var path = this.basePath_ + '/system/console/configMgr/com.day.cq.dam.commons.util.impl.AssetCacheImpl';

  /** @type {!Object} */
  var queryParameters = {};

  /** @type {!Object} */
  var headerParams = angular.extend({}, this.defaultHeaders_);
  if (opt_post !== undefined) {
    queryParameters['post'] = opt_post;
  }

  if (opt_apply !== undefined) {
    queryParameters['apply'] = opt_apply;
  }

  if (opt_delete !== undefined) {
    queryParameters['delete'] = opt_delete;
  }

  if (opt_action !== undefined) {
    queryParameters['action'] = opt_action;
  }

  if (opt_location !== undefined) {
    queryParameters['$location'] = opt_location;
  }

  if (opt_propertylist !== undefined) {
    queryParameters['propertylist'] = opt_propertylist;
  }

  if (opt_largeFileMin !== undefined) {
    queryParameters['large.file.min'] = opt_largeFileMin;
  }

  if (opt_cacheApply !== undefined) {
    queryParameters['cache.apply'] = opt_cacheApply;
  }

  if (opt_mimeTypes !== undefined) {
    queryParameters['mime.types'] = opt_mimeTypes;
  }

  /** @type {!Object} */
  var httpRequestParams = {
    method: 'POST',
    url: path,
    json: true,
            params: queryParameters,
    headers: headerParams
  };

  if (opt_extraHttpRequestParams) {
    httpRequestParams = angular.extend(httpRequestParams, opt_extraHttpRequestParams);
  }

  return (/** @type {?} */ (this.http_))(httpRequestParams);
}

/**
 * 
 * 
 * @param {!boolean=} opt_post 
 * @param {!boolean=} opt_apply 
 * @param {!boolean=} opt_delete 
 * @param {!string=} opt_action 
 * @param {!string=} opt_location 
 * @param {!Array<!string>=} opt_propertylist 
 * @param {!number=} opt_cqDamConfigAnnotationPdfDocumentWidth 
 * @param {!number=} opt_cqDamConfigAnnotationPdfDocumentHeight 
 * @param {!number=} opt_cqDamConfigAnnotationPdfDocumentPaddingHorizontal 
 * @param {!number=} opt_cqDamConfigAnnotationPdfDocumentPaddingVertical 
 * @param {!number=} opt_cqDamConfigAnnotationPdfFontSize 
 * @param {!string=} opt_cqDamConfigAnnotationPdfFontColor 
 * @param {!string=} opt_cqDamConfigAnnotationPdfFontFamily 
 * @param {!string=} opt_cqDamConfigAnnotationPdfFontLight 
 * @param {!number=} opt_cqDamConfigAnnotationPdfMarginTextImage 
 * @param {!number=} opt_cqDamConfigAnnotationPdfMinImageHeight 
 * @param {!number=} opt_cqDamConfigAnnotationPdfReviewStatusWidth 
 * @param {!string=} opt_cqDamConfigAnnotationPdfReviewStatusColorApproved 
 * @param {!string=} opt_cqDamConfigAnnotationPdfReviewStatusColorRejected 
 * @param {!string=} opt_cqDamConfigAnnotationPdfReviewStatusColorChangesRequested 
 * @param {!number=} opt_cqDamConfigAnnotationPdfAnnotationMarkerWidth 
 * @param {!number=} opt_cqDamConfigAnnotationPdfAssetMinheight 
 * @param {!angular.$http.Config=} opt_extraHttpRequestParams Extra HTTP parameters to send.
 * @return {!angular.$q.Promise<!API.Client.comDayCqDamCoreImplAnnotationPdfAnnotationPdfConfigInfo>}
 */
API.Client.ConfigmgrApi.prototype.comDayCqDamCoreImplAnnotationPdfAnnotationPdfConfig = function(opt_post, opt_apply, opt_delete, opt_action, opt_location, opt_propertylist, opt_cqDamConfigAnnotationPdfDocumentWidth, opt_cqDamConfigAnnotationPdfDocumentHeight, opt_cqDamConfigAnnotationPdfDocumentPaddingHorizontal, opt_cqDamConfigAnnotationPdfDocumentPaddingVertical, opt_cqDamConfigAnnotationPdfFontSize, opt_cqDamConfigAnnotationPdfFontColor, opt_cqDamConfigAnnotationPdfFontFamily, opt_cqDamConfigAnnotationPdfFontLight, opt_cqDamConfigAnnotationPdfMarginTextImage, opt_cqDamConfigAnnotationPdfMinImageHeight, opt_cqDamConfigAnnotationPdfReviewStatusWidth, opt_cqDamConfigAnnotationPdfReviewStatusColorApproved, opt_cqDamConfigAnnotationPdfReviewStatusColorRejected, opt_cqDamConfigAnnotationPdfReviewStatusColorChangesRequested, opt_cqDamConfigAnnotationPdfAnnotationMarkerWidth, opt_cqDamConfigAnnotationPdfAssetMinheight, opt_extraHttpRequestParams) {
  /** @const {string} */
  var path = this.basePath_ + '/system/console/configMgr/com.day.cq.dam.core.impl.annotation.pdf.AnnotationPdfConfig';

  /** @type {!Object} */
  var queryParameters = {};

  /** @type {!Object} */
  var headerParams = angular.extend({}, this.defaultHeaders_);
  if (opt_post !== undefined) {
    queryParameters['post'] = opt_post;
  }

  if (opt_apply !== undefined) {
    queryParameters['apply'] = opt_apply;
  }

  if (opt_delete !== undefined) {
    queryParameters['delete'] = opt_delete;
  }

  if (opt_action !== undefined) {
    queryParameters['action'] = opt_action;
  }

  if (opt_location !== undefined) {
    queryParameters['$location'] = opt_location;
  }

  if (opt_propertylist !== undefined) {
    queryParameters['propertylist'] = opt_propertylist;
  }

  if (opt_cqDamConfigAnnotationPdfDocumentWidth !== undefined) {
    queryParameters['cq.dam.config.annotation.pdf.document.width'] = opt_cqDamConfigAnnotationPdfDocumentWidth;
  }

  if (opt_cqDamConfigAnnotationPdfDocumentHeight !== undefined) {
    queryParameters['cq.dam.config.annotation.pdf.document.height'] = opt_cqDamConfigAnnotationPdfDocumentHeight;
  }

  if (opt_cqDamConfigAnnotationPdfDocumentPaddingHorizontal !== undefined) {
    queryParameters['cq.dam.config.annotation.pdf.document.padding.horizontal'] = opt_cqDamConfigAnnotationPdfDocumentPaddingHorizontal;
  }

  if (opt_cqDamConfigAnnotationPdfDocumentPaddingVertical !== undefined) {
    queryParameters['cq.dam.config.annotation.pdf.document.padding.vertical'] = opt_cqDamConfigAnnotationPdfDocumentPaddingVertical;
  }

  if (opt_cqDamConfigAnnotationPdfFontSize !== undefined) {
    queryParameters['cq.dam.config.annotation.pdf.font.size'] = opt_cqDamConfigAnnotationPdfFontSize;
  }

  if (opt_cqDamConfigAnnotationPdfFontColor !== undefined) {
    queryParameters['cq.dam.config.annotation.pdf.font.color'] = opt_cqDamConfigAnnotationPdfFontColor;
  }

  if (opt_cqDamConfigAnnotationPdfFontFamily !== undefined) {
    queryParameters['cq.dam.config.annotation.pdf.font.family'] = opt_cqDamConfigAnnotationPdfFontFamily;
  }

  if (opt_cqDamConfigAnnotationPdfFontLight !== undefined) {
    queryParameters['cq.dam.config.annotation.pdf.font.light'] = opt_cqDamConfigAnnotationPdfFontLight;
  }

  if (opt_cqDamConfigAnnotationPdfMarginTextImage !== undefined) {
    queryParameters['cq.dam.config.annotation.pdf.marginTextImage'] = opt_cqDamConfigAnnotationPdfMarginTextImage;
  }

  if (opt_cqDamConfigAnnotationPdfMinImageHeight !== undefined) {
    queryParameters['cq.dam.config.annotation.pdf.minImageHeight'] = opt_cqDamConfigAnnotationPdfMinImageHeight;
  }

  if (opt_cqDamConfigAnnotationPdfReviewStatusWidth !== undefined) {
    queryParameters['cq.dam.config.annotation.pdf.reviewStatus.width'] = opt_cqDamConfigAnnotationPdfReviewStatusWidth;
  }

  if (opt_cqDamConfigAnnotationPdfReviewStatusColorApproved !== undefined) {
    queryParameters['cq.dam.config.annotation.pdf.reviewStatus.color.approved'] = opt_cqDamConfigAnnotationPdfReviewStatusColorApproved;
  }

  if (opt_cqDamConfigAnnotationPdfReviewStatusColorRejected !== undefined) {
    queryParameters['cq.dam.config.annotation.pdf.reviewStatus.color.rejected'] = opt_cqDamConfigAnnotationPdfReviewStatusColorRejected;
  }

  if (opt_cqDamConfigAnnotationPdfReviewStatusColorChangesRequested !== undefined) {
    queryParameters['cq.dam.config.annotation.pdf.reviewStatus.color.changesRequested'] = opt_cqDamConfigAnnotationPdfReviewStatusColorChangesRequested;
  }

  if (opt_cqDamConfigAnnotationPdfAnnotationMarkerWidth !== undefined) {
    queryParameters['cq.dam.config.annotation.pdf.annotationMarker.width'] = opt_cqDamConfigAnnotationPdfAnnotationMarkerWidth;
  }

  if (opt_cqDamConfigAnnotationPdfAssetMinheight !== undefined) {
    queryParameters['cq.dam.config.annotation.pdf.asset.minheight'] = opt_cqDamConfigAnnotationPdfAssetMinheight;
  }

  /** @type {!Object} */
  var httpRequestParams = {
    method: 'POST',
    url: path,
    json: true,
            params: queryParameters,
    headers: headerParams
  };

  if (opt_extraHttpRequestParams) {
    httpRequestParams = angular.extend(httpRequestParams, opt_extraHttpRequestParams);
  }

  return (/** @type {?} */ (this.http_))(httpRequestParams);
}

/**
 * 
 * 
 * @param {!boolean=} opt_post 
 * @param {!boolean=} opt_apply 
 * @param {!boolean=} opt_delete 
 * @param {!string=} opt_action 
 * @param {!string=} opt_location 
 * @param {!Array<!string>=} opt_propertylist 
 * @param {!boolean=} opt_enabled 
 * @param {!angular.$http.Config=} opt_extraHttpRequestParams Extra HTTP parameters to send.
 * @return {!angular.$q.Promise<!API.Client.comDayCqDamCoreImplAssetMoveListenerInfo>}
 */
API.Client.ConfigmgrApi.prototype.comDayCqDamCoreImplAssetMoveListener = function(opt_post, opt_apply, opt_delete, opt_action, opt_location, opt_propertylist, opt_enabled, opt_extraHttpRequestParams) {
  /** @const {string} */
  var path = this.basePath_ + '/system/console/configMgr/com.day.cq.dam.core.impl.AssetMoveListener';

  /** @type {!Object} */
  var queryParameters = {};

  /** @type {!Object} */
  var headerParams = angular.extend({}, this.defaultHeaders_);
  if (opt_post !== undefined) {
    queryParameters['post'] = opt_post;
  }

  if (opt_apply !== undefined) {
    queryParameters['apply'] = opt_apply;
  }

  if (opt_delete !== undefined) {
    queryParameters['delete'] = opt_delete;
  }

  if (opt_action !== undefined) {
    queryParameters['action'] = opt_action;
  }

  if (opt_location !== undefined) {
    queryParameters['$location'] = opt_location;
  }

  if (opt_propertylist !== undefined) {
    queryParameters['propertylist'] = opt_propertylist;
  }

  if (opt_enabled !== undefined) {
    queryParameters['enabled'] = opt_enabled;
  }

  /** @type {!Object} */
  var httpRequestParams = {
    method: 'POST',
    url: path,
    json: true,
            params: queryParameters,
    headers: headerParams
  };

  if (opt_extraHttpRequestParams) {
    httpRequestParams = angular.extend(httpRequestParams, opt_extraHttpRequestParams);
  }

  return (/** @type {?} */ (this.http_))(httpRequestParams);
}

/**
 * 
 * 
 * @param {!boolean=} opt_post 
 * @param {!boolean=} opt_apply 
 * @param {!boolean=} opt_delete 
 * @param {!string=} opt_action 
 * @param {!string=} opt_location 
 * @param {!Array<!string>=} opt_propertylist 
 * @param {!boolean=} opt_isEnabled 
 * @param {!angular.$http.Config=} opt_extraHttpRequestParams Extra HTTP parameters to send.
 * @return {!angular.$q.Promise<!API.Client.comDayCqDamCoreImplAssethomeAssetHomePageConfigurationInfo>}
 */
API.Client.ConfigmgrApi.prototype.comDayCqDamCoreImplAssethomeAssetHomePageConfiguration = function(opt_post, opt_apply, opt_delete, opt_action, opt_location, opt_propertylist, opt_isEnabled, opt_extraHttpRequestParams) {
  /** @const {string} */
  var path = this.basePath_ + '/system/console/configMgr/com.day.cq.dam.core.impl.assethome.AssetHomePageConfiguration';

  /** @type {!Object} */
  var queryParameters = {};

  /** @type {!Object} */
  var headerParams = angular.extend({}, this.defaultHeaders_);
  if (opt_post !== undefined) {
    queryParameters['post'] = opt_post;
  }

  if (opt_apply !== undefined) {
    queryParameters['apply'] = opt_apply;
  }

  if (opt_delete !== undefined) {
    queryParameters['delete'] = opt_delete;
  }

  if (opt_action !== undefined) {
    queryParameters['action'] = opt_action;
  }

  if (opt_location !== undefined) {
    queryParameters['$location'] = opt_location;
  }

  if (opt_propertylist !== undefined) {
    queryParameters['propertylist'] = opt_propertylist;
  }

  if (opt_isEnabled !== undefined) {
    queryParameters['isEnabled'] = opt_isEnabled;
  }

  /** @type {!Object} */
  var httpRequestParams = {
    method: 'POST',
    url: path,
    json: true,
            params: queryParameters,
    headers: headerParams
  };

  if (opt_extraHttpRequestParams) {
    httpRequestParams = angular.extend(httpRequestParams, opt_extraHttpRequestParams);
  }

  return (/** @type {?} */ (this.http_))(httpRequestParams);
}

/**
 * 
 * 
 * @param {!boolean=} opt_post 
 * @param {!boolean=} opt_apply 
 * @param {!boolean=} opt_delete 
 * @param {!string=} opt_action 
 * @param {!string=} opt_location 
 * @param {!Array<!string>=} opt_propertylist 
 * @param {!number=} opt_cqDamAdhocAssetSharePrezipMaxcontentsize 
 * @param {!angular.$http.Config=} opt_extraHttpRequestParams Extra HTTP parameters to send.
 * @return {!angular.$q.Promise<!API.Client.comDayCqDamCoreImplAssetlinkshareAdhocAssetShareProxyServletInfo>}
 */
API.Client.ConfigmgrApi.prototype.comDayCqDamCoreImplAssetlinkshareAdhocAssetShareProxyServlet = function(opt_post, opt_apply, opt_delete, opt_action, opt_location, opt_propertylist, opt_cqDamAdhocAssetSharePrezipMaxcontentsize, opt_extraHttpRequestParams) {
  /** @const {string} */
  var path = this.basePath_ + '/system/console/configMgr/com.day.cq.dam.core.impl.assetlinkshare.AdhocAssetShareProxyServlet';

  /** @type {!Object} */
  var queryParameters = {};

  /** @type {!Object} */
  var headerParams = angular.extend({}, this.defaultHeaders_);
  if (opt_post !== undefined) {
    queryParameters['post'] = opt_post;
  }

  if (opt_apply !== undefined) {
    queryParameters['apply'] = opt_apply;
  }

  if (opt_delete !== undefined) {
    queryParameters['delete'] = opt_delete;
  }

  if (opt_action !== undefined) {
    queryParameters['action'] = opt_action;
  }

  if (opt_location !== undefined) {
    queryParameters['$location'] = opt_location;
  }

  if (opt_propertylist !== undefined) {
    queryParameters['propertylist'] = opt_propertylist;
  }

  if (opt_cqDamAdhocAssetSharePrezipMaxcontentsize !== undefined) {
    queryParameters['cq.dam.adhoc.asset.share.prezip.maxcontentsize'] = opt_cqDamAdhocAssetSharePrezipMaxcontentsize;
  }

  /** @type {!Object} */
  var httpRequestParams = {
    method: 'POST',
    url: path,
    json: true,
            params: queryParameters,
    headers: headerParams
  };

  if (opt_extraHttpRequestParams) {
    httpRequestParams = angular.extend(httpRequestParams, opt_extraHttpRequestParams);
  }

  return (/** @type {?} */ (this.http_))(httpRequestParams);
}

/**
 * 
 * 
 * @param {!boolean=} opt_post 
 * @param {!boolean=} opt_apply 
 * @param {!boolean=} opt_delete 
 * @param {!string=} opt_action 
 * @param {!string=} opt_location 
 * @param {!Array<!string>=} opt_propertylist 
 * @param {!number=} opt_cqDamImageCacheMaxMemory 
 * @param {!number=} opt_cqDamImageCacheMaxAge 
 * @param {!string=} opt_cqDamImageCacheMaxDimension 
 * @param {!angular.$http.Config=} opt_extraHttpRequestParams Extra HTTP parameters to send.
 * @return {!angular.$q.Promise<!API.Client.comDayCqDamCoreImplCacheCQBufferedImageCacheInfo>}
 */
API.Client.ConfigmgrApi.prototype.comDayCqDamCoreImplCacheCQBufferedImageCache = function(opt_post, opt_apply, opt_delete, opt_action, opt_location, opt_propertylist, opt_cqDamImageCacheMaxMemory, opt_cqDamImageCacheMaxAge, opt_cqDamImageCacheMaxDimension, opt_extraHttpRequestParams) {
  /** @const {string} */
  var path = this.basePath_ + '/system/console/configMgr/com.day.cq.dam.core.impl.cache.CQBufferedImageCache';

  /** @type {!Object} */
  var queryParameters = {};

  /** @type {!Object} */
  var headerParams = angular.extend({}, this.defaultHeaders_);
  if (opt_post !== undefined) {
    queryParameters['post'] = opt_post;
  }

  if (opt_apply !== undefined) {
    queryParameters['apply'] = opt_apply;
  }

  if (opt_delete !== undefined) {
    queryParameters['delete'] = opt_delete;
  }

  if (opt_action !== undefined) {
    queryParameters['action'] = opt_action;
  }

  if (opt_location !== undefined) {
    queryParameters['$location'] = opt_location;
  }

  if (opt_propertylist !== undefined) {
    queryParameters['propertylist'] = opt_propertylist;
  }

  if (opt_cqDamImageCacheMaxMemory !== undefined) {
    queryParameters['cq.dam.image.cache.max.memory'] = opt_cqDamImageCacheMaxMemory;
  }

  if (opt_cqDamImageCacheMaxAge !== undefined) {
    queryParameters['cq.dam.image.cache.max.age'] = opt_cqDamImageCacheMaxAge;
  }

  if (opt_cqDamImageCacheMaxDimension !== undefined) {
    queryParameters['cq.dam.image.cache.max.dimension'] = opt_cqDamImageCacheMaxDimension;
  }

  /** @type {!Object} */
  var httpRequestParams = {
    method: 'POST',
    url: path,
    json: true,
            params: queryParameters,
    headers: headerParams
  };

  if (opt_extraHttpRequestParams) {
    httpRequestParams = angular.extend(httpRequestParams, opt_extraHttpRequestParams);
  }

  return (/** @type {?} */ (this.http_))(httpRequestParams);
}

/**
 * 
 * 
 * @param {!boolean=} opt_post 
 * @param {!boolean=} opt_apply 
 * @param {!boolean=} opt_delete 
 * @param {!string=} opt_action 
 * @param {!string=} opt_location 
 * @param {!Array<!string>=} opt_propertylist 
 * @param {!Array<!string>=} opt_changeeventlistenerObservedPaths 
 * @param {!angular.$http.Config=} opt_extraHttpRequestParams Extra HTTP parameters to send.
 * @return {!angular.$q.Promise<!API.Client.comDayCqDamCoreImplDamChangeEventListenerInfo>}
 */
API.Client.ConfigmgrApi.prototype.comDayCqDamCoreImplDamChangeEventListener = function(opt_post, opt_apply, opt_delete, opt_action, opt_location, opt_propertylist, opt_changeeventlistenerObservedPaths, opt_extraHttpRequestParams) {
  /** @const {string} */
  var path = this.basePath_ + '/system/console/configMgr/com.day.cq.dam.core.impl.DamChangeEventListener';

  /** @type {!Object} */
  var queryParameters = {};

  /** @type {!Object} */
  var headerParams = angular.extend({}, this.defaultHeaders_);
  if (opt_post !== undefined) {
    queryParameters['post'] = opt_post;
  }

  if (opt_apply !== undefined) {
    queryParameters['apply'] = opt_apply;
  }

  if (opt_delete !== undefined) {
    queryParameters['delete'] = opt_delete;
  }

  if (opt_action !== undefined) {
    queryParameters['action'] = opt_action;
  }

  if (opt_location !== undefined) {
    queryParameters['$location'] = opt_location;
  }

  if (opt_propertylist !== undefined) {
    queryParameters['propertylist'] = opt_propertylist;
  }

  if (opt_changeeventlistenerObservedPaths !== undefined) {
    queryParameters['changeeventlistener.observed.paths'] = opt_changeeventlistenerObservedPaths;
  }

  /** @type {!Object} */
  var httpRequestParams = {
    method: 'POST',
    url: path,
    json: true,
            params: queryParameters,
    headers: headerParams
  };

  if (opt_extraHttpRequestParams) {
    httpRequestParams = angular.extend(httpRequestParams, opt_extraHttpRequestParams);
  }

  return (/** @type {?} */ (this.http_))(httpRequestParams);
}

/**
 * 
 * 
 * @param {!boolean=} opt_post 
 * @param {!boolean=} opt_apply 
 * @param {!boolean=} opt_delete 
 * @param {!string=} opt_action 
 * @param {!string=} opt_location 
 * @param {!Array<!string>=} opt_propertylist 
 * @param {!string=} opt_schedulerExpression 
 * @param {!number=} opt_maxSavedActivities 
 * @param {!number=} opt_saveInterval 
 * @param {!boolean=} opt_enableActivityPurge 
 * @param {!string=} opt_eventTypes 
 * @param {!angular.$http.Config=} opt_extraHttpRequestParams Extra HTTP parameters to send.
 * @return {!angular.$q.Promise<!API.Client.comDayCqDamCoreImplDamEventPurgeServiceInfo>}
 */
API.Client.ConfigmgrApi.prototype.comDayCqDamCoreImplDamEventPurgeService = function(opt_post, opt_apply, opt_delete, opt_action, opt_location, opt_propertylist, opt_schedulerExpression, opt_maxSavedActivities, opt_saveInterval, opt_enableActivityPurge, opt_eventTypes, opt_extraHttpRequestParams) {
  /** @const {string} */
  var path = this.basePath_ + '/system/console/configMgr/com.day.cq.dam.core.impl.DamEventPurgeService';

  /** @type {!Object} */
  var queryParameters = {};

  /** @type {!Object} */
  var headerParams = angular.extend({}, this.defaultHeaders_);
  if (opt_post !== undefined) {
    queryParameters['post'] = opt_post;
  }

  if (opt_apply !== undefined) {
    queryParameters['apply'] = opt_apply;
  }

  if (opt_delete !== undefined) {
    queryParameters['delete'] = opt_delete;
  }

  if (opt_action !== undefined) {
    queryParameters['action'] = opt_action;
  }

  if (opt_location !== undefined) {
    queryParameters['$location'] = opt_location;
  }

  if (opt_propertylist !== undefined) {
    queryParameters['propertylist'] = opt_propertylist;
  }

  if (opt_schedulerExpression !== undefined) {
    queryParameters['scheduler.expression'] = opt_schedulerExpression;
  }

  if (opt_maxSavedActivities !== undefined) {
    queryParameters['maxSavedActivities'] = opt_maxSavedActivities;
  }

  if (opt_saveInterval !== undefined) {
    queryParameters['saveInterval'] = opt_saveInterval;
  }

  if (opt_enableActivityPurge !== undefined) {
    queryParameters['enableActivityPurge'] = opt_enableActivityPurge;
  }

  if (opt_eventTypes !== undefined) {
    queryParameters['eventTypes'] = opt_eventTypes;
  }

  /** @type {!Object} */
  var httpRequestParams = {
    method: 'POST',
    url: path,
    json: true,
            params: queryParameters,
    headers: headerParams
  };

  if (opt_extraHttpRequestParams) {
    httpRequestParams = angular.extend(httpRequestParams, opt_extraHttpRequestParams);
  }

  return (/** @type {?} */ (this.http_))(httpRequestParams);
}

/**
 * 
 * 
 * @param {!boolean=} opt_post 
 * @param {!boolean=} opt_apply 
 * @param {!boolean=} opt_delete 
 * @param {!string=} opt_action 
 * @param {!string=} opt_location 
 * @param {!Array<!string>=} opt_propertylist 
 * @param {!string=} opt_eventFilter 
 * @param {!number=} opt_eventQueueLength 
 * @param {!boolean=} opt_eventrecorderEnabled 
 * @param {!Array<!string>=} opt_eventrecorderBlacklist 
 * @param {!string=} opt_eventrecorderEventtypes 
 * @param {!angular.$http.Config=} opt_extraHttpRequestParams Extra HTTP parameters to send.
 * @return {!angular.$q.Promise<!API.Client.comDayCqDamCoreImplDamEventRecorderImplInfo>}
 */
API.Client.ConfigmgrApi.prototype.comDayCqDamCoreImplDamEventRecorderImpl = function(opt_post, opt_apply, opt_delete, opt_action, opt_location, opt_propertylist, opt_eventFilter, opt_eventQueueLength, opt_eventrecorderEnabled, opt_eventrecorderBlacklist, opt_eventrecorderEventtypes, opt_extraHttpRequestParams) {
  /** @const {string} */
  var path = this.basePath_ + '/system/console/configMgr/com.day.cq.dam.core.impl.DamEventRecorderImpl';

  /** @type {!Object} */
  var queryParameters = {};

  /** @type {!Object} */
  var headerParams = angular.extend({}, this.defaultHeaders_);
  if (opt_post !== undefined) {
    queryParameters['post'] = opt_post;
  }

  if (opt_apply !== undefined) {
    queryParameters['apply'] = opt_apply;
  }

  if (opt_delete !== undefined) {
    queryParameters['delete'] = opt_delete;
  }

  if (opt_action !== undefined) {
    queryParameters['action'] = opt_action;
  }

  if (opt_location !== undefined) {
    queryParameters['$location'] = opt_location;
  }

  if (opt_propertylist !== undefined) {
    queryParameters['propertylist'] = opt_propertylist;
  }

  if (opt_eventFilter !== undefined) {
    queryParameters['event.filter'] = opt_eventFilter;
  }

  if (opt_eventQueueLength !== undefined) {
    queryParameters['event.queue.length'] = opt_eventQueueLength;
  }

  if (opt_eventrecorderEnabled !== undefined) {
    queryParameters['eventrecorder.enabled'] = opt_eventrecorderEnabled;
  }

  if (opt_eventrecorderBlacklist !== undefined) {
    queryParameters['eventrecorder.blacklist'] = opt_eventrecorderBlacklist;
  }

  if (opt_eventrecorderEventtypes !== undefined) {
    queryParameters['eventrecorder.eventtypes'] = opt_eventrecorderEventtypes;
  }

  /** @type {!Object} */
  var httpRequestParams = {
    method: 'POST',
    url: path,
    json: true,
            params: queryParameters,
    headers: headerParams
  };

  if (opt_extraHttpRequestParams) {
    httpRequestParams = angular.extend(httpRequestParams, opt_extraHttpRequestParams);
  }

  return (/** @type {?} */ (this.http_))(httpRequestParams);
}

/**
 * 
 * 
 * @param {!boolean=} opt_post 
 * @param {!boolean=} opt_apply 
 * @param {!boolean=} opt_delete 
 * @param {!string=} opt_action 
 * @param {!string=} opt_location 
 * @param {!Array<!string>=} opt_propertylist 
 * @param {!string=} opt_eventFilter 
 * @param {!boolean=} opt_enabled 
 * @param {!angular.$http.Config=} opt_extraHttpRequestParams Extra HTTP parameters to send.
 * @return {!angular.$q.Promise<!API.Client.comDayCqDamCoreImplEventDamEventAuditListenerInfo>}
 */
API.Client.ConfigmgrApi.prototype.comDayCqDamCoreImplEventDamEventAuditListener = function(opt_post, opt_apply, opt_delete, opt_action, opt_location, opt_propertylist, opt_eventFilter, opt_enabled, opt_extraHttpRequestParams) {
  /** @const {string} */
  var path = this.basePath_ + '/system/console/configMgr/com.day.cq.dam.core.impl.event.DamEventAuditListener';

  /** @type {!Object} */
  var queryParameters = {};

  /** @type {!Object} */
  var headerParams = angular.extend({}, this.defaultHeaders_);
  if (opt_post !== undefined) {
    queryParameters['post'] = opt_post;
  }

  if (opt_apply !== undefined) {
    queryParameters['apply'] = opt_apply;
  }

  if (opt_delete !== undefined) {
    queryParameters['delete'] = opt_delete;
  }

  if (opt_action !== undefined) {
    queryParameters['action'] = opt_action;
  }

  if (opt_location !== undefined) {
    queryParameters['$location'] = opt_location;
  }

  if (opt_propertylist !== undefined) {
    queryParameters['propertylist'] = opt_propertylist;
  }

  if (opt_eventFilter !== undefined) {
    queryParameters['event.filter'] = opt_eventFilter;
  }

  if (opt_enabled !== undefined) {
    queryParameters['enabled'] = opt_enabled;
  }

  /** @type {!Object} */
  var httpRequestParams = {
    method: 'POST',
    url: path,
    json: true,
            params: queryParameters,
    headers: headerParams
  };

  if (opt_extraHttpRequestParams) {
    httpRequestParams = angular.extend(httpRequestParams, opt_extraHttpRequestParams);
  }

  return (/** @type {?} */ (this.http_))(httpRequestParams);
}

/**
 * 
 * 
 * @param {!boolean=} opt_post 
 * @param {!boolean=} opt_apply 
 * @param {!boolean=} opt_delete 
 * @param {!string=} opt_action 
 * @param {!string=} opt_location 
 * @param {!Array<!string>=} opt_propertylist 
 * @param {!boolean=} opt_cqDamExpiryNotificationSchedulerIstimebased 
 * @param {!string=} opt_cqDamExpiryNotificationSchedulerTimebasedRule 
 * @param {!number=} opt_cqDamExpiryNotificationSchedulerPeriodRule 
 * @param {!boolean=} opt_sendEmail 
 * @param {!number=} opt_assetExpiredLimit 
 * @param {!number=} opt_priorNotificationSeconds 
 * @param {!string=} opt_cqDamExpiryNotificationUrlProtocol 
 * @param {!angular.$http.Config=} opt_extraHttpRequestParams Extra HTTP parameters to send.
 * @return {!angular.$q.Promise<!API.Client.comDayCqDamCoreImplExpiryNotificationJobImplInfo>}
 */
API.Client.ConfigmgrApi.prototype.comDayCqDamCoreImplExpiryNotificationJobImpl = function(opt_post, opt_apply, opt_delete, opt_action, opt_location, opt_propertylist, opt_cqDamExpiryNotificationSchedulerIstimebased, opt_cqDamExpiryNotificationSchedulerTimebasedRule, opt_cqDamExpiryNotificationSchedulerPeriodRule, opt_sendEmail, opt_assetExpiredLimit, opt_priorNotificationSeconds, opt_cqDamExpiryNotificationUrlProtocol, opt_extraHttpRequestParams) {
  /** @const {string} */
  var path = this.basePath_ + '/system/console/configMgr/com.day.cq.dam.core.impl.ExpiryNotificationJobImpl';

  /** @type {!Object} */
  var queryParameters = {};

  /** @type {!Object} */
  var headerParams = angular.extend({}, this.defaultHeaders_);
  if (opt_post !== undefined) {
    queryParameters['post'] = opt_post;
  }

  if (opt_apply !== undefined) {
    queryParameters['apply'] = opt_apply;
  }

  if (opt_delete !== undefined) {
    queryParameters['delete'] = opt_delete;
  }

  if (opt_action !== undefined) {
    queryParameters['action'] = opt_action;
  }

  if (opt_location !== undefined) {
    queryParameters['$location'] = opt_location;
  }

  if (opt_propertylist !== undefined) {
    queryParameters['propertylist'] = opt_propertylist;
  }

  if (opt_cqDamExpiryNotificationSchedulerIstimebased !== undefined) {
    queryParameters['cq.dam.expiry.notification.scheduler.istimebased'] = opt_cqDamExpiryNotificationSchedulerIstimebased;
  }

  if (opt_cqDamExpiryNotificationSchedulerTimebasedRule !== undefined) {
    queryParameters['cq.dam.expiry.notification.scheduler.timebased.rule'] = opt_cqDamExpiryNotificationSchedulerTimebasedRule;
  }

  if (opt_cqDamExpiryNotificationSchedulerPeriodRule !== undefined) {
    queryParameters['cq.dam.expiry.notification.scheduler.period.rule'] = opt_cqDamExpiryNotificationSchedulerPeriodRule;
  }

  if (opt_sendEmail !== undefined) {
    queryParameters['send_email'] = opt_sendEmail;
  }

  if (opt_assetExpiredLimit !== undefined) {
    queryParameters['asset_expired_limit'] = opt_assetExpiredLimit;
  }

  if (opt_priorNotificationSeconds !== undefined) {
    queryParameters['prior_notification_seconds'] = opt_priorNotificationSeconds;
  }

  if (opt_cqDamExpiryNotificationUrlProtocol !== undefined) {
    queryParameters['cq.dam.expiry.notification.url.protocol'] = opt_cqDamExpiryNotificationUrlProtocol;
  }

  /** @type {!Object} */
  var httpRequestParams = {
    method: 'POST',
    url: path,
    json: true,
            params: queryParameters,
    headers: headerParams
  };

  if (opt_extraHttpRequestParams) {
    httpRequestParams = angular.extend(httpRequestParams, opt_extraHttpRequestParams);
  }

  return (/** @type {?} */ (this.http_))(httpRequestParams);
}

/**
 * 
 * 
 * @param {!boolean=} opt_post 
 * @param {!boolean=} opt_apply 
 * @param {!boolean=} opt_delete 
 * @param {!string=} opt_action 
 * @param {!string=} opt_location 
 * @param {!Array<!string>=} opt_propertylist 
 * @param {!boolean=} opt_isEnabled 
 * @param {!angular.$http.Config=} opt_extraHttpRequestParams Extra HTTP parameters to send.
 * @return {!angular.$q.Promise<!API.Client.comDayCqDamCoreImplFoldermetadataschemaFolderMetadataSchemaFeatInfo>}
 */
API.Client.ConfigmgrApi.prototype.comDayCqDamCoreImplFoldermetadataschemaFolderMetadataSchemaFeat = function(opt_post, opt_apply, opt_delete, opt_action, opt_location, opt_propertylist, opt_isEnabled, opt_extraHttpRequestParams) {
  /** @const {string} */
  var path = this.basePath_ + '/system/console/configMgr/com.day.cq.dam.core.impl.foldermetadataschema.FolderMetadataSchemaFeatureFlag';

  /** @type {!Object} */
  var queryParameters = {};

  /** @type {!Object} */
  var headerParams = angular.extend({}, this.defaultHeaders_);
  if (opt_post !== undefined) {
    queryParameters['post'] = opt_post;
  }

  if (opt_apply !== undefined) {
    queryParameters['apply'] = opt_apply;
  }

  if (opt_delete !== undefined) {
    queryParameters['delete'] = opt_delete;
  }

  if (opt_action !== undefined) {
    queryParameters['action'] = opt_action;
  }

  if (opt_location !== undefined) {
    queryParameters['$location'] = opt_location;
  }

  if (opt_propertylist !== undefined) {
    queryParameters['propertylist'] = opt_propertylist;
  }

  if (opt_isEnabled !== undefined) {
    queryParameters['isEnabled'] = opt_isEnabled;
  }

  /** @type {!Object} */
  var httpRequestParams = {
    method: 'POST',
    url: path,
    json: true,
            params: queryParameters,
    headers: headerParams
  };

  if (opt_extraHttpRequestParams) {
    httpRequestParams = angular.extend(httpRequestParams, opt_extraHttpRequestParams);
  }

  return (/** @type {?} */ (this.http_))(httpRequestParams);
}

/**
 * 
 * 
 * @param {!boolean=} opt_post 
 * @param {!boolean=} opt_apply 
 * @param {!boolean=} opt_delete 
 * @param {!string=} opt_action 
 * @param {!string=} opt_location 
 * @param {!Array<!string>=} opt_propertylist 
 * @param {!boolean=} opt_skipBufferedcache 
 * @param {!angular.$http.Config=} opt_extraHttpRequestParams Extra HTTP parameters to send.
 * @return {!angular.$q.Promise<!API.Client.comDayCqDamCoreImplGfxCommonsGfxRendererInfo>}
 */
API.Client.ConfigmgrApi.prototype.comDayCqDamCoreImplGfxCommonsGfxRenderer = function(opt_post, opt_apply, opt_delete, opt_action, opt_location, opt_propertylist, opt_skipBufferedcache, opt_extraHttpRequestParams) {
  /** @const {string} */
  var path = this.basePath_ + '/system/console/configMgr/com.day.cq.dam.core.impl.gfx.CommonsGfxRenderer';

  /** @type {!Object} */
  var queryParameters = {};

  /** @type {!Object} */
  var headerParams = angular.extend({}, this.defaultHeaders_);
  if (opt_post !== undefined) {
    queryParameters['post'] = opt_post;
  }

  if (opt_apply !== undefined) {
    queryParameters['apply'] = opt_apply;
  }

  if (opt_delete !== undefined) {
    queryParameters['delete'] = opt_delete;
  }

  if (opt_action !== undefined) {
    queryParameters['action'] = opt_action;
  }

  if (opt_location !== undefined) {
    queryParameters['$location'] = opt_location;
  }

  if (opt_propertylist !== undefined) {
    queryParameters['propertylist'] = opt_propertylist;
  }

  if (opt_skipBufferedcache !== undefined) {
    queryParameters['skip.bufferedcache'] = opt_skipBufferedcache;
  }

  /** @type {!Object} */
  var httpRequestParams = {
    method: 'POST',
    url: path,
    json: true,
            params: queryParameters,
    headers: headerParams
  };

  if (opt_extraHttpRequestParams) {
    httpRequestParams = angular.extend(httpRequestParams, opt_extraHttpRequestParams);
  }

  return (/** @type {?} */ (this.http_))(httpRequestParams);
}

/**
 * 
 * 
 * @param {!boolean=} opt_post 
 * @param {!boolean=} opt_apply 
 * @param {!boolean=} opt_delete 
 * @param {!string=} opt_action 
 * @param {!string=} opt_location 
 * @param {!Array<!string>=} opt_propertylist 
 * @param {!string=} opt_mimetype 
 * @param {!angular.$http.Config=} opt_extraHttpRequestParams Extra HTTP parameters to send.
 * @return {!angular.$q.Promise<!API.Client.comDayCqDamCoreImplHandlerEPSFormatHandlerInfo>}
 */
API.Client.ConfigmgrApi.prototype.comDayCqDamCoreImplHandlerEPSFormatHandler = function(opt_post, opt_apply, opt_delete, opt_action, opt_location, opt_propertylist, opt_mimetype, opt_extraHttpRequestParams) {
  /** @const {string} */
  var path = this.basePath_ + '/system/console/configMgr/com.day.cq.dam.core.impl.handler.EPSFormatHandler';

  /** @type {!Object} */
  var queryParameters = {};

  /** @type {!Object} */
  var headerParams = angular.extend({}, this.defaultHeaders_);
  if (opt_post !== undefined) {
    queryParameters['post'] = opt_post;
  }

  if (opt_apply !== undefined) {
    queryParameters['apply'] = opt_apply;
  }

  if (opt_delete !== undefined) {
    queryParameters['delete'] = opt_delete;
  }

  if (opt_action !== undefined) {
    queryParameters['action'] = opt_action;
  }

  if (opt_location !== undefined) {
    queryParameters['$location'] = opt_location;
  }

  if (opt_propertylist !== undefined) {
    queryParameters['propertylist'] = opt_propertylist;
  }

  if (opt_mimetype !== undefined) {
    queryParameters['mimetype'] = opt_mimetype;
  }

  /** @type {!Object} */
  var httpRequestParams = {
    method: 'POST',
    url: path,
    json: true,
            params: queryParameters,
    headers: headerParams
  };

  if (opt_extraHttpRequestParams) {
    httpRequestParams = angular.extend(httpRequestParams, opt_extraHttpRequestParams);
  }

  return (/** @type {?} */ (this.http_))(httpRequestParams);
}

/**
 * 
 * 
 * @param {!boolean=} opt_post 
 * @param {!boolean=} opt_apply 
 * @param {!boolean=} opt_delete 
 * @param {!string=} opt_action 
 * @param {!string=} opt_location 
 * @param {!Array<!string>=} opt_propertylist 
 * @param {!Array<!string>=} opt_mimetype 
 * @param {!angular.$http.Config=} opt_extraHttpRequestParams Extra HTTP parameters to send.
 * @return {!angular.$q.Promise<!API.Client.comDayCqDamCoreImplHandlerIndesignFormatHandlerInfo>}
 */
API.Client.ConfigmgrApi.prototype.comDayCqDamCoreImplHandlerIndesignFormatHandler = function(opt_post, opt_apply, opt_delete, opt_action, opt_location, opt_propertylist, opt_mimetype, opt_extraHttpRequestParams) {
  /** @const {string} */
  var path = this.basePath_ + '/system/console/configMgr/com.day.cq.dam.core.impl.handler.IndesignFormatHandler';

  /** @type {!Object} */
  var queryParameters = {};

  /** @type {!Object} */
  var headerParams = angular.extend({}, this.defaultHeaders_);
  if (opt_post !== undefined) {
    queryParameters['post'] = opt_post;
  }

  if (opt_apply !== undefined) {
    queryParameters['apply'] = opt_apply;
  }

  if (opt_delete !== undefined) {
    queryParameters['delete'] = opt_delete;
  }

  if (opt_action !== undefined) {
    queryParameters['action'] = opt_action;
  }

  if (opt_location !== undefined) {
    queryParameters['$location'] = opt_location;
  }

  if (opt_propertylist !== undefined) {
    queryParameters['propertylist'] = opt_propertylist;
  }

  if (opt_mimetype !== undefined) {
    queryParameters['mimetype'] = opt_mimetype;
  }

  /** @type {!Object} */
  var httpRequestParams = {
    method: 'POST',
    url: path,
    json: true,
            params: queryParameters,
    headers: headerParams
  };

  if (opt_extraHttpRequestParams) {
    httpRequestParams = angular.extend(httpRequestParams, opt_extraHttpRequestParams);
  }

  return (/** @type {?} */ (this.http_))(httpRequestParams);
}

/**
 * 
 * 
 * @param {!boolean=} opt_post 
 * @param {!boolean=} opt_apply 
 * @param {!boolean=} opt_delete 
 * @param {!string=} opt_action 
 * @param {!string=} opt_location 
 * @param {!Array<!string>=} opt_propertylist 
 * @param {!boolean=} opt_cqDamEnableExtMetaExtraction 
 * @param {!number=} opt_largeFileThreshold 
 * @param {!number=} opt_largeCommentThreshold 
 * @param {!angular.$http.Config=} opt_extraHttpRequestParams Extra HTTP parameters to send.
 * @return {!angular.$q.Promise<!API.Client.comDayCqDamCoreImplHandlerJpegHandlerInfo>}
 */
API.Client.ConfigmgrApi.prototype.comDayCqDamCoreImplHandlerJpegHandler = function(opt_post, opt_apply, opt_delete, opt_action, opt_location, opt_propertylist, opt_cqDamEnableExtMetaExtraction, opt_largeFileThreshold, opt_largeCommentThreshold, opt_extraHttpRequestParams) {
  /** @const {string} */
  var path = this.basePath_ + '/system/console/configMgr/com.day.cq.dam.core.impl.handler.JpegHandler';

  /** @type {!Object} */
  var queryParameters = {};

  /** @type {!Object} */
  var headerParams = angular.extend({}, this.defaultHeaders_);
  if (opt_post !== undefined) {
    queryParameters['post'] = opt_post;
  }

  if (opt_apply !== undefined) {
    queryParameters['apply'] = opt_apply;
  }

  if (opt_delete !== undefined) {
    queryParameters['delete'] = opt_delete;
  }

  if (opt_action !== undefined) {
    queryParameters['action'] = opt_action;
  }

  if (opt_location !== undefined) {
    queryParameters['$location'] = opt_location;
  }

  if (opt_propertylist !== undefined) {
    queryParameters['propertylist'] = opt_propertylist;
  }

  if (opt_cqDamEnableExtMetaExtraction !== undefined) {
    queryParameters['cq.dam.enable.ext.meta.extraction'] = opt_cqDamEnableExtMetaExtraction;
  }

  if (opt_largeFileThreshold !== undefined) {
    queryParameters['large_file_threshold'] = opt_largeFileThreshold;
  }

  if (opt_largeCommentThreshold !== undefined) {
    queryParameters['large_comment_threshold'] = opt_largeCommentThreshold;
  }

  /** @type {!Object} */
  var httpRequestParams = {
    method: 'POST',
    url: path,
    json: true,
            params: queryParameters,
    headers: headerParams
  };

  if (opt_extraHttpRequestParams) {
    httpRequestParams = angular.extend(httpRequestParams, opt_extraHttpRequestParams);
  }

  return (/** @type {?} */ (this.http_))(httpRequestParams);
}

/**
 * 
 * 
 * @param {!boolean=} opt_post 
 * @param {!boolean=} opt_apply 
 * @param {!boolean=} opt_delete 
 * @param {!string=} opt_action 
 * @param {!string=} opt_location 
 * @param {!Array<!string>=} opt_propertylist 
 * @param {!Array<!string>=} opt_xmphandlerCqFormats 
 * @param {!angular.$http.Config=} opt_extraHttpRequestParams Extra HTTP parameters to send.
 * @return {!angular.$q.Promise<!API.Client.comDayCqDamCoreImplHandlerXmpNCommXMPHandlerInfo>}
 */
API.Client.ConfigmgrApi.prototype.comDayCqDamCoreImplHandlerXmpNCommXMPHandler = function(opt_post, opt_apply, opt_delete, opt_action, opt_location, opt_propertylist, opt_xmphandlerCqFormats, opt_extraHttpRequestParams) {
  /** @const {string} */
  var path = this.basePath_ + '/system/console/configMgr/com.day.cq.dam.core.impl.handler.xmp.NCommXMPHandler';

  /** @type {!Object} */
  var queryParameters = {};

  /** @type {!Object} */
  var headerParams = angular.extend({}, this.defaultHeaders_);
  if (opt_post !== undefined) {
    queryParameters['post'] = opt_post;
  }

  if (opt_apply !== undefined) {
    queryParameters['apply'] = opt_apply;
  }

  if (opt_delete !== undefined) {
    queryParameters['delete'] = opt_delete;
  }

  if (opt_action !== undefined) {
    queryParameters['action'] = opt_action;
  }

  if (opt_location !== undefined) {
    queryParameters['$location'] = opt_location;
  }

  if (opt_propertylist !== undefined) {
    queryParameters['propertylist'] = opt_propertylist;
  }

  if (opt_xmphandlerCqFormats !== undefined) {
    queryParameters['xmphandler.cq.formats'] = opt_xmphandlerCqFormats;
  }

  /** @type {!Object} */
  var httpRequestParams = {
    method: 'POST',
    url: path,
    json: true,
            params: queryParameters,
    headers: headerParams
  };

  if (opt_extraHttpRequestParams) {
    httpRequestParams = angular.extend(httpRequestParams, opt_extraHttpRequestParams);
  }

  return (/** @type {?} */ (this.http_))(httpRequestParams);
}

/**
 * 
 * 
 * @param {!boolean=} opt_post 
 * @param {!boolean=} opt_apply 
 * @param {!boolean=} opt_delete 
 * @param {!string=} opt_action 
 * @param {!string=} opt_location 
 * @param {!Array<!string>=} opt_propertylist 
 * @param {!string=} opt_jmxObjectname 
 * @param {!boolean=} opt_propertyMeasureEnabled 
 * @param {!string=} opt_propertyName 
 * @param {!number=} opt_propertyMaxWaitMs 
 * @param {!number=} opt_propertyMaxRate 
 * @param {!boolean=} opt_fulltextMeasureEnabled 
 * @param {!string=} opt_fulltextName 
 * @param {!number=} opt_fulltextMaxWaitMs 
 * @param {!number=} opt_fulltextMaxRate 
 * @param {!angular.$http.Config=} opt_extraHttpRequestParams Extra HTTP parameters to send.
 * @return {!angular.$q.Promise<!API.Client.comDayCqDamCoreImplJmxAssetIndexUpdateMonitorInfo>}
 */
API.Client.ConfigmgrApi.prototype.comDayCqDamCoreImplJmxAssetIndexUpdateMonitor = function(opt_post, opt_apply, opt_delete, opt_action, opt_location, opt_propertylist, opt_jmxObjectname, opt_propertyMeasureEnabled, opt_propertyName, opt_propertyMaxWaitMs, opt_propertyMaxRate, opt_fulltextMeasureEnabled, opt_fulltextName, opt_fulltextMaxWaitMs, opt_fulltextMaxRate, opt_extraHttpRequestParams) {
  /** @const {string} */
  var path = this.basePath_ + '/system/console/configMgr/com.day.cq.dam.core.impl.jmx.AssetIndexUpdateMonitor';

  /** @type {!Object} */
  var queryParameters = {};

  /** @type {!Object} */
  var headerParams = angular.extend({}, this.defaultHeaders_);
  if (opt_post !== undefined) {
    queryParameters['post'] = opt_post;
  }

  if (opt_apply !== undefined) {
    queryParameters['apply'] = opt_apply;
  }

  if (opt_delete !== undefined) {
    queryParameters['delete'] = opt_delete;
  }

  if (opt_action !== undefined) {
    queryParameters['action'] = opt_action;
  }

  if (opt_location !== undefined) {
    queryParameters['$location'] = opt_location;
  }

  if (opt_propertylist !== undefined) {
    queryParameters['propertylist'] = opt_propertylist;
  }

  if (opt_jmxObjectname !== undefined) {
    queryParameters['jmx.objectname'] = opt_jmxObjectname;
  }

  if (opt_propertyMeasureEnabled !== undefined) {
    queryParameters['property.measure.enabled'] = opt_propertyMeasureEnabled;
  }

  if (opt_propertyName !== undefined) {
    queryParameters['property.name'] = opt_propertyName;
  }

  if (opt_propertyMaxWaitMs !== undefined) {
    queryParameters['property.max.wait.ms'] = opt_propertyMaxWaitMs;
  }

  if (opt_propertyMaxRate !== undefined) {
    queryParameters['property.max.rate'] = opt_propertyMaxRate;
  }

  if (opt_fulltextMeasureEnabled !== undefined) {
    queryParameters['fulltext.measure.enabled'] = opt_fulltextMeasureEnabled;
  }

  if (opt_fulltextName !== undefined) {
    queryParameters['fulltext.name'] = opt_fulltextName;
  }

  if (opt_fulltextMaxWaitMs !== undefined) {
    queryParameters['fulltext.max.wait.ms'] = opt_fulltextMaxWaitMs;
  }

  if (opt_fulltextMaxRate !== undefined) {
    queryParameters['fulltext.max.rate'] = opt_fulltextMaxRate;
  }

  /** @type {!Object} */
  var httpRequestParams = {
    method: 'POST',
    url: path,
    json: true,
            params: queryParameters,
    headers: headerParams
  };

  if (opt_extraHttpRequestParams) {
    httpRequestParams = angular.extend(httpRequestParams, opt_extraHttpRequestParams);
  }

  return (/** @type {?} */ (this.http_))(httpRequestParams);
}

/**
 * 
 * 
 * @param {!boolean=} opt_post 
 * @param {!boolean=} opt_apply 
 * @param {!boolean=} opt_delete 
 * @param {!string=} opt_action 
 * @param {!string=} opt_location 
 * @param {!Array<!string>=} opt_propertylist 
 * @param {!string=} opt_jmxObjectname 
 * @param {!angular.$http.Config=} opt_extraHttpRequestParams Extra HTTP parameters to send.
 * @return {!angular.$q.Promise<!API.Client.comDayCqDamCoreImplJmxAssetMigrationMBeanImplInfo>}
 */
API.Client.ConfigmgrApi.prototype.comDayCqDamCoreImplJmxAssetMigrationMBeanImpl = function(opt_post, opt_apply, opt_delete, opt_action, opt_location, opt_propertylist, opt_jmxObjectname, opt_extraHttpRequestParams) {
  /** @const {string} */
  var path = this.basePath_ + '/system/console/configMgr/com.day.cq.dam.core.impl.jmx.AssetMigrationMBeanImpl';

  /** @type {!Object} */
  var queryParameters = {};

  /** @type {!Object} */
  var headerParams = angular.extend({}, this.defaultHeaders_);
  if (opt_post !== undefined) {
    queryParameters['post'] = opt_post;
  }

  if (opt_apply !== undefined) {
    queryParameters['apply'] = opt_apply;
  }

  if (opt_delete !== undefined) {
    queryParameters['delete'] = opt_delete;
  }

  if (opt_action !== undefined) {
    queryParameters['action'] = opt_action;
  }

  if (opt_location !== undefined) {
    queryParameters['$location'] = opt_location;
  }

  if (opt_propertylist !== undefined) {
    queryParameters['propertylist'] = opt_propertylist;
  }

  if (opt_jmxObjectname !== undefined) {
    queryParameters['jmx.objectname'] = opt_jmxObjectname;
  }

  /** @type {!Object} */
  var httpRequestParams = {
    method: 'POST',
    url: path,
    json: true,
            params: queryParameters,
    headers: headerParams
  };

  if (opt_extraHttpRequestParams) {
    httpRequestParams = angular.extend(httpRequestParams, opt_extraHttpRequestParams);
  }

  return (/** @type {?} */ (this.http_))(httpRequestParams);
}

/**
 * 
 * 
 * @param {!boolean=} opt_post 
 * @param {!boolean=} opt_apply 
 * @param {!boolean=} opt_delete 
 * @param {!string=} opt_action 
 * @param {!string=} opt_location 
 * @param {!Array<!string>=} opt_propertylist 
 * @param {!string=} opt_jmxObjectname 
 * @param {!boolean=} opt_active 
 * @param {!angular.$http.Config=} opt_extraHttpRequestParams Extra HTTP parameters to send.
 * @return {!angular.$q.Promise<!API.Client.comDayCqDamCoreImplJmxAssetUpdateMonitorImplInfo>}
 */
API.Client.ConfigmgrApi.prototype.comDayCqDamCoreImplJmxAssetUpdateMonitorImpl = function(opt_post, opt_apply, opt_delete, opt_action, opt_location, opt_propertylist, opt_jmxObjectname, opt_active, opt_extraHttpRequestParams) {
  /** @const {string} */
  var path = this.basePath_ + '/system/console/configMgr/com.day.cq.dam.core.impl.jmx.AssetUpdateMonitorImpl';

  /** @type {!Object} */
  var queryParameters = {};

  /** @type {!Object} */
  var headerParams = angular.extend({}, this.defaultHeaders_);
  if (opt_post !== undefined) {
    queryParameters['post'] = opt_post;
  }

  if (opt_apply !== undefined) {
    queryParameters['apply'] = opt_apply;
  }

  if (opt_delete !== undefined) {
    queryParameters['delete'] = opt_delete;
  }

  if (opt_action !== undefined) {
    queryParameters['action'] = opt_action;
  }

  if (opt_location !== undefined) {
    queryParameters['$location'] = opt_location;
  }

  if (opt_propertylist !== undefined) {
    queryParameters['propertylist'] = opt_propertylist;
  }

  if (opt_jmxObjectname !== undefined) {
    queryParameters['jmx.objectname'] = opt_jmxObjectname;
  }

  if (opt_active !== undefined) {
    queryParameters['active'] = opt_active;
  }

  /** @type {!Object} */
  var httpRequestParams = {
    method: 'POST',
    url: path,
    json: true,
            params: queryParameters,
    headers: headerParams
  };

  if (opt_extraHttpRequestParams) {
    httpRequestParams = angular.extend(httpRequestParams, opt_extraHttpRequestParams);
  }

  return (/** @type {?} */ (this.http_))(httpRequestParams);
}

/**
 * 
 * 
 * @param {!boolean=} opt_post 
 * @param {!boolean=} opt_apply 
 * @param {!boolean=} opt_delete 
 * @param {!string=} opt_action 
 * @param {!string=} opt_location 
 * @param {!Array<!string>=} opt_propertylist 
 * @param {!string=} opt_operation 
 * @param {!boolean=} opt_emailEnabled 
 * @param {!angular.$http.Config=} opt_extraHttpRequestParams Extra HTTP parameters to send.
 * @return {!angular.$q.Promise<!API.Client.comDayCqDamCoreImplJobsMetadataexportAsyncMetadataExportConfigInfo>}
 */
API.Client.ConfigmgrApi.prototype.comDayCqDamCoreImplJobsMetadataexportAsyncMetadataExportConfig = function(opt_post, opt_apply, opt_delete, opt_action, opt_location, opt_propertylist, opt_operation, opt_emailEnabled, opt_extraHttpRequestParams) {
  /** @const {string} */
  var path = this.basePath_ + '/system/console/configMgr/com.day.cq.dam.core.impl.jobs.metadataexport.AsyncMetadataExportConfigProviderService';

  /** @type {!Object} */
  var queryParameters = {};

  /** @type {!Object} */
  var headerParams = angular.extend({}, this.defaultHeaders_);
  if (opt_post !== undefined) {
    queryParameters['post'] = opt_post;
  }

  if (opt_apply !== undefined) {
    queryParameters['apply'] = opt_apply;
  }

  if (opt_delete !== undefined) {
    queryParameters['delete'] = opt_delete;
  }

  if (opt_action !== undefined) {
    queryParameters['action'] = opt_action;
  }

  if (opt_location !== undefined) {
    queryParameters['$location'] = opt_location;
  }

  if (opt_propertylist !== undefined) {
    queryParameters['propertylist'] = opt_propertylist;
  }

  if (opt_operation !== undefined) {
    queryParameters['operation'] = opt_operation;
  }

  if (opt_emailEnabled !== undefined) {
    queryParameters['emailEnabled'] = opt_emailEnabled;
  }

  /** @type {!Object} */
  var httpRequestParams = {
    method: 'POST',
    url: path,
    json: true,
            params: queryParameters,
    headers: headerParams
  };

  if (opt_extraHttpRequestParams) {
    httpRequestParams = angular.extend(httpRequestParams, opt_extraHttpRequestParams);
  }

  return (/** @type {?} */ (this.http_))(httpRequestParams);
}

/**
 * 
 * 
 * @param {!boolean=} opt_post 
 * @param {!boolean=} opt_apply 
 * @param {!boolean=} opt_delete 
 * @param {!string=} opt_action 
 * @param {!string=} opt_location 
 * @param {!Array<!string>=} opt_propertylist 
 * @param {!string=} opt_operation 
 * @param {!string=} opt_operationIcon 
 * @param {!string=} opt_topicName 
 * @param {!boolean=} opt_emailEnabled 
 * @param {!angular.$http.Config=} opt_extraHttpRequestParams Extra HTTP parameters to send.
 * @return {!angular.$q.Promise<!API.Client.comDayCqDamCoreImplJobsMetadataimportAsyncMetadataImportConfigInfo>}
 */
API.Client.ConfigmgrApi.prototype.comDayCqDamCoreImplJobsMetadataimportAsyncMetadataImportConfig = function(opt_post, opt_apply, opt_delete, opt_action, opt_location, opt_propertylist, opt_operation, opt_operationIcon, opt_topicName, opt_emailEnabled, opt_extraHttpRequestParams) {
  /** @const {string} */
  var path = this.basePath_ + '/system/console/configMgr/com.day.cq.dam.core.impl.jobs.metadataimport.AsyncMetadataImportConfigProviderService';

  /** @type {!Object} */
  var queryParameters = {};

  /** @type {!Object} */
  var headerParams = angular.extend({}, this.defaultHeaders_);
  if (opt_post !== undefined) {
    queryParameters['post'] = opt_post;
  }

  if (opt_apply !== undefined) {
    queryParameters['apply'] = opt_apply;
  }

  if (opt_delete !== undefined) {
    queryParameters['delete'] = opt_delete;
  }

  if (opt_action !== undefined) {
    queryParameters['action'] = opt_action;
  }

  if (opt_location !== undefined) {
    queryParameters['$location'] = opt_location;
  }

  if (opt_propertylist !== undefined) {
    queryParameters['propertylist'] = opt_propertylist;
  }

  if (opt_operation !== undefined) {
    queryParameters['operation'] = opt_operation;
  }

  if (opt_operationIcon !== undefined) {
    queryParameters['operationIcon'] = opt_operationIcon;
  }

  if (opt_topicName !== undefined) {
    queryParameters['topicName'] = opt_topicName;
  }

  if (opt_emailEnabled !== undefined) {
    queryParameters['emailEnabled'] = opt_emailEnabled;
  }

  /** @type {!Object} */
  var httpRequestParams = {
    method: 'POST',
    url: path,
    json: true,
            params: queryParameters,
    headers: headerParams
  };

  if (opt_extraHttpRequestParams) {
    httpRequestParams = angular.extend(httpRequestParams, opt_extraHttpRequestParams);
  }

  return (/** @type {?} */ (this.http_))(httpRequestParams);
}

/**
 * 
 * 
 * @param {!boolean=} opt_post 
 * @param {!boolean=} opt_apply 
 * @param {!boolean=} opt_delete 
 * @param {!string=} opt_action 
 * @param {!string=} opt_location 
 * @param {!Array<!string>=} opt_propertylist 
 * @param {!string=} opt_slingServletPaths 
 * @param {!Array<!string>=} opt_slingServletMethods 
 * @param {!boolean=} opt_cqDamEnableAnonymous 
 * @param {!angular.$http.Config=} opt_extraHttpRequestParams Extra HTTP parameters to send.
 * @return {!angular.$q.Promise<!API.Client.comDayCqDamCoreImplLightboxLightboxServletInfo>}
 */
API.Client.ConfigmgrApi.prototype.comDayCqDamCoreImplLightboxLightboxServlet = function(opt_post, opt_apply, opt_delete, opt_action, opt_location, opt_propertylist, opt_slingServletPaths, opt_slingServletMethods, opt_cqDamEnableAnonymous, opt_extraHttpRequestParams) {
  /** @const {string} */
  var path = this.basePath_ + '/system/console/configMgr/com.day.cq.dam.core.impl.lightbox.LightboxServlet';

  /** @type {!Object} */
  var queryParameters = {};

  /** @type {!Object} */
  var headerParams = angular.extend({}, this.defaultHeaders_);
  if (opt_post !== undefined) {
    queryParameters['post'] = opt_post;
  }

  if (opt_apply !== undefined) {
    queryParameters['apply'] = opt_apply;
  }

  if (opt_delete !== undefined) {
    queryParameters['delete'] = opt_delete;
  }

  if (opt_action !== undefined) {
    queryParameters['action'] = opt_action;
  }

  if (opt_location !== undefined) {
    queryParameters['$location'] = opt_location;
  }

  if (opt_propertylist !== undefined) {
    queryParameters['propertylist'] = opt_propertylist;
  }

  if (opt_slingServletPaths !== undefined) {
    queryParameters['sling.servlet.paths'] = opt_slingServletPaths;
  }

  if (opt_slingServletMethods !== undefined) {
    queryParameters['sling.servlet.methods'] = opt_slingServletMethods;
  }

  if (opt_cqDamEnableAnonymous !== undefined) {
    queryParameters['cq.dam.enable.anonymous'] = opt_cqDamEnableAnonymous;
  }

  /** @type {!Object} */
  var httpRequestParams = {
    method: 'POST',
    url: path,
    json: true,
            params: queryParameters,
    headers: headerParams
  };

  if (opt_extraHttpRequestParams) {
    httpRequestParams = angular.extend(httpRequestParams, opt_extraHttpRequestParams);
  }

  return (/** @type {?} */ (this.http_))(httpRequestParams);
}

/**
 * 
 * 
 * @param {!boolean=} opt_post 
 * @param {!boolean=} opt_apply 
 * @param {!boolean=} opt_delete 
 * @param {!string=} opt_action 
 * @param {!string=} opt_location 
 * @param {!Array<!string>=} opt_propertylist 
 * @param {!Array<!string>=} opt_granitedata 
 * @param {!angular.$http.Config=} opt_extraHttpRequestParams Extra HTTP parameters to send.
 * @return {!angular.$q.Promise<!API.Client.comDayCqDamCoreImplMetadataEditorSelectComponentHandlerInfo>}
 */
API.Client.ConfigmgrApi.prototype.comDayCqDamCoreImplMetadataEditorSelectComponentHandler = function(opt_post, opt_apply, opt_delete, opt_action, opt_location, opt_propertylist, opt_granitedata, opt_extraHttpRequestParams) {
  /** @const {string} */
  var path = this.basePath_ + '/system/console/configMgr/com.day.cq.dam.core.impl.metadata.editor.SelectComponentHandler';

  /** @type {!Object} */
  var queryParameters = {};

  /** @type {!Object} */
  var headerParams = angular.extend({}, this.defaultHeaders_);
  if (opt_post !== undefined) {
    queryParameters['post'] = opt_post;
  }

  if (opt_apply !== undefined) {
    queryParameters['apply'] = opt_apply;
  }

  if (opt_delete !== undefined) {
    queryParameters['delete'] = opt_delete;
  }

  if (opt_action !== undefined) {
    queryParameters['action'] = opt_action;
  }

  if (opt_location !== undefined) {
    queryParameters['$location'] = opt_location;
  }

  if (opt_propertylist !== undefined) {
    queryParameters['propertylist'] = opt_propertylist;
  }

  if (opt_granitedata !== undefined) {
    queryParameters['granite:data'] = opt_granitedata;
  }

  /** @type {!Object} */
  var httpRequestParams = {
    method: 'POST',
    url: path,
    json: true,
            params: queryParameters,
    headers: headerParams
  };

  if (opt_extraHttpRequestParams) {
    httpRequestParams = angular.extend(httpRequestParams, opt_extraHttpRequestParams);
  }

  return (/** @type {?} */ (this.http_))(httpRequestParams);
}

/**
 * 
 * 
 * @param {!boolean=} opt_post 
 * @param {!boolean=} opt_apply 
 * @param {!boolean=} opt_delete 
 * @param {!string=} opt_action 
 * @param {!string=} opt_location 
 * @param {!Array<!string>=} opt_propertylist 
 * @param {!boolean=} opt_cqDamAllowAllMime 
 * @param {!Array<!string>=} opt_cqDamAllowedAssetMimes 
 * @param {!angular.$http.Config=} opt_extraHttpRequestParams Extra HTTP parameters to send.
 * @return {!angular.$q.Promise<!API.Client.comDayCqDamCoreImplMimeTypeAssetUploadRestrictionHelperInfo>}
 */
API.Client.ConfigmgrApi.prototype.comDayCqDamCoreImplMimeTypeAssetUploadRestrictionHelper = function(opt_post, opt_apply, opt_delete, opt_action, opt_location, opt_propertylist, opt_cqDamAllowAllMime, opt_cqDamAllowedAssetMimes, opt_extraHttpRequestParams) {
  /** @const {string} */
  var path = this.basePath_ + '/system/console/configMgr/com.day.cq.dam.core.impl.mimeType.AssetUploadRestrictionHelper';

  /** @type {!Object} */
  var queryParameters = {};

  /** @type {!Object} */
  var headerParams = angular.extend({}, this.defaultHeaders_);
  if (opt_post !== undefined) {
    queryParameters['post'] = opt_post;
  }

  if (opt_apply !== undefined) {
    queryParameters['apply'] = opt_apply;
  }

  if (opt_delete !== undefined) {
    queryParameters['delete'] = opt_delete;
  }

  if (opt_action !== undefined) {
    queryParameters['action'] = opt_action;
  }

  if (opt_location !== undefined) {
    queryParameters['$location'] = opt_location;
  }

  if (opt_propertylist !== undefined) {
    queryParameters['propertylist'] = opt_propertylist;
  }

  if (opt_cqDamAllowAllMime !== undefined) {
    queryParameters['cq.dam.allow.all.mime'] = opt_cqDamAllowAllMime;
  }

  if (opt_cqDamAllowedAssetMimes !== undefined) {
    queryParameters['cq.dam.allowed.asset.mimes'] = opt_cqDamAllowedAssetMimes;
  }

  /** @type {!Object} */
  var httpRequestParams = {
    method: 'POST',
    url: path,
    json: true,
            params: queryParameters,
    headers: headerParams
  };

  if (opt_extraHttpRequestParams) {
    httpRequestParams = angular.extend(httpRequestParams, opt_extraHttpRequestParams);
  }

  return (/** @type {?} */ (this.http_))(httpRequestParams);
}

/**
 * 
 * 
 * @param {!boolean=} opt_post 
 * @param {!boolean=} opt_apply 
 * @param {!boolean=} opt_delete 
 * @param {!string=} opt_action 
 * @param {!string=} opt_location 
 * @param {!Array<!string>=} opt_propertylist 
 * @param {!boolean=} opt_cqDamDetectAssetMimeFromContent 
 * @param {!angular.$http.Config=} opt_extraHttpRequestParams Extra HTTP parameters to send.
 * @return {!angular.$q.Promise<!API.Client.comDayCqDamCoreImplMimeTypeDamMimeTypeServiceImplInfo>}
 */
API.Client.ConfigmgrApi.prototype.comDayCqDamCoreImplMimeTypeDamMimeTypeServiceImpl = function(opt_post, opt_apply, opt_delete, opt_action, opt_location, opt_propertylist, opt_cqDamDetectAssetMimeFromContent, opt_extraHttpRequestParams) {
  /** @const {string} */
  var path = this.basePath_ + '/system/console/configMgr/com.day.cq.dam.core.impl.mimeType.DamMimeTypeServiceImpl';

  /** @type {!Object} */
  var queryParameters = {};

  /** @type {!Object} */
  var headerParams = angular.extend({}, this.defaultHeaders_);
  if (opt_post !== undefined) {
    queryParameters['post'] = opt_post;
  }

  if (opt_apply !== undefined) {
    queryParameters['apply'] = opt_apply;
  }

  if (opt_delete !== undefined) {
    queryParameters['delete'] = opt_delete;
  }

  if (opt_action !== undefined) {
    queryParameters['action'] = opt_action;
  }

  if (opt_location !== undefined) {
    queryParameters['$location'] = opt_location;
  }

  if (opt_propertylist !== undefined) {
    queryParameters['propertylist'] = opt_propertylist;
  }

  if (opt_cqDamDetectAssetMimeFromContent !== undefined) {
    queryParameters['cq.dam.detect.asset.mime.from.content'] = opt_cqDamDetectAssetMimeFromContent;
  }

  /** @type {!Object} */
  var httpRequestParams = {
    method: 'POST',
    url: path,
    json: true,
            params: queryParameters,
    headers: headerParams
  };

  if (opt_extraHttpRequestParams) {
    httpRequestParams = angular.extend(httpRequestParams, opt_extraHttpRequestParams);
  }

  return (/** @type {?} */ (this.http_))(httpRequestParams);
}

/**
 * 
 * 
 * @param {!boolean=} opt_post 
 * @param {!boolean=} opt_apply 
 * @param {!boolean=} opt_delete 
 * @param {!string=} opt_action 
 * @param {!string=} opt_location 
 * @param {!Array<!string>=} opt_propertylist 
 * @param {!boolean=} opt_cqDamMissingmetadataNotificationSchedulerIstimebased 
 * @param {!string=} opt_cqDamMissingmetadataNotificationSchedulerTimebasedRule 
 * @param {!number=} opt_cqDamMissingmetadataNotificationSchedulerPeriodRule 
 * @param {!string=} opt_cqDamMissingmetadataNotificationRecipient 
 * @param {!angular.$http.Config=} opt_extraHttpRequestParams Extra HTTP parameters to send.
 * @return {!angular.$q.Promise<!API.Client.comDayCqDamCoreImplMissingMetadataNotificationJobInfo>}
 */
API.Client.ConfigmgrApi.prototype.comDayCqDamCoreImplMissingMetadataNotificationJob = function(opt_post, opt_apply, opt_delete, opt_action, opt_location, opt_propertylist, opt_cqDamMissingmetadataNotificationSchedulerIstimebased, opt_cqDamMissingmetadataNotificationSchedulerTimebasedRule, opt_cqDamMissingmetadataNotificationSchedulerPeriodRule, opt_cqDamMissingmetadataNotificationRecipient, opt_extraHttpRequestParams) {
  /** @const {string} */
  var path = this.basePath_ + '/system/console/configMgr/com.day.cq.dam.core.impl.MissingMetadataNotificationJob';

  /** @type {!Object} */
  var queryParameters = {};

  /** @type {!Object} */
  var headerParams = angular.extend({}, this.defaultHeaders_);
  if (opt_post !== undefined) {
    queryParameters['post'] = opt_post;
  }

  if (opt_apply !== undefined) {
    queryParameters['apply'] = opt_apply;
  }

  if (opt_delete !== undefined) {
    queryParameters['delete'] = opt_delete;
  }

  if (opt_action !== undefined) {
    queryParameters['action'] = opt_action;
  }

  if (opt_location !== undefined) {
    queryParameters['$location'] = opt_location;
  }

  if (opt_propertylist !== undefined) {
    queryParameters['propertylist'] = opt_propertylist;
  }

  if (opt_cqDamMissingmetadataNotificationSchedulerIstimebased !== undefined) {
    queryParameters['cq.dam.missingmetadata.notification.scheduler.istimebased'] = opt_cqDamMissingmetadataNotificationSchedulerIstimebased;
  }

  if (opt_cqDamMissingmetadataNotificationSchedulerTimebasedRule !== undefined) {
    queryParameters['cq.dam.missingmetadata.notification.scheduler.timebased.rule'] = opt_cqDamMissingmetadataNotificationSchedulerTimebasedRule;
  }

  if (opt_cqDamMissingmetadataNotificationSchedulerPeriodRule !== undefined) {
    queryParameters['cq.dam.missingmetadata.notification.scheduler.period.rule'] = opt_cqDamMissingmetadataNotificationSchedulerPeriodRule;
  }

  if (opt_cqDamMissingmetadataNotificationRecipient !== undefined) {
    queryParameters['cq.dam.missingmetadata.notification.recipient'] = opt_cqDamMissingmetadataNotificationRecipient;
  }

  /** @type {!Object} */
  var httpRequestParams = {
    method: 'POST',
    url: path,
    json: true,
            params: queryParameters,
    headers: headerParams
  };

  if (opt_extraHttpRequestParams) {
    httpRequestParams = angular.extend(httpRequestParams, opt_extraHttpRequestParams);
  }

  return (/** @type {?} */ (this.http_))(httpRequestParams);
}

/**
 * 
 * 
 * @param {!boolean=} opt_post 
 * @param {!boolean=} opt_apply 
 * @param {!boolean=} opt_delete 
 * @param {!string=} opt_action 
 * @param {!string=} opt_location 
 * @param {!Array<!string>=} opt_propertylist 
 * @param {!string=} opt_processLabel 
 * @param {!boolean=} opt_notifyOnComplete 
 * @param {!angular.$http.Config=} opt_extraHttpRequestParams Extra HTTP parameters to send.
 * @return {!angular.$q.Promise<!API.Client.comDayCqDamCoreImplProcessSendTransientWorkflowCompletedEmailPrInfo>}
 */
API.Client.ConfigmgrApi.prototype.comDayCqDamCoreImplProcessSendTransientWorkflowCompletedEmailPr = function(opt_post, opt_apply, opt_delete, opt_action, opt_location, opt_propertylist, opt_processLabel, opt_notifyOnComplete, opt_extraHttpRequestParams) {
  /** @const {string} */
  var path = this.basePath_ + '/system/console/configMgr/com.day.cq.dam.core.impl.process.SendTransientWorkflowCompletedEmailProcess';

  /** @type {!Object} */
  var queryParameters = {};

  /** @type {!Object} */
  var headerParams = angular.extend({}, this.defaultHeaders_);
  if (opt_post !== undefined) {
    queryParameters['post'] = opt_post;
  }

  if (opt_apply !== undefined) {
    queryParameters['apply'] = opt_apply;
  }

  if (opt_delete !== undefined) {
    queryParameters['delete'] = opt_delete;
  }

  if (opt_action !== undefined) {
    queryParameters['action'] = opt_action;
  }

  if (opt_location !== undefined) {
    queryParameters['$location'] = opt_location;
  }

  if (opt_propertylist !== undefined) {
    queryParameters['propertylist'] = opt_propertylist;
  }

  if (opt_processLabel !== undefined) {
    queryParameters['process.label'] = opt_processLabel;
  }

  if (opt_notifyOnComplete !== undefined) {
    queryParameters['Notify on Complete'] = opt_notifyOnComplete;
  }

  /** @type {!Object} */
  var httpRequestParams = {
    method: 'POST',
    url: path,
    json: true,
            params: queryParameters,
    headers: headerParams
  };

  if (opt_extraHttpRequestParams) {
    httpRequestParams = angular.extend(httpRequestParams, opt_extraHttpRequestParams);
  }

  return (/** @type {?} */ (this.http_))(httpRequestParams);
}

/**
 * 
 * 
 * @param {!boolean=} opt_post 
 * @param {!boolean=} opt_apply 
 * @param {!boolean=} opt_delete 
 * @param {!string=} opt_action 
 * @param {!string=} opt_location 
 * @param {!Array<!string>=} opt_propertylist 
 * @param {!Array<!string>=} opt_mimeTypes 
 * @param {!number=} opt_maxExtract 
 * @param {!angular.$http.Config=} opt_extraHttpRequestParams Extra HTTP parameters to send.
 * @return {!angular.$q.Promise<!API.Client.comDayCqDamCoreImplProcessTextExtractionProcessInfo>}
 */
API.Client.ConfigmgrApi.prototype.comDayCqDamCoreImplProcessTextExtractionProcess = function(opt_post, opt_apply, opt_delete, opt_action, opt_location, opt_propertylist, opt_mimeTypes, opt_maxExtract, opt_extraHttpRequestParams) {
  /** @const {string} */
  var path = this.basePath_ + '/system/console/configMgr/com.day.cq.dam.core.impl.process.TextExtractionProcess';

  /** @type {!Object} */
  var queryParameters = {};

  /** @type {!Object} */
  var headerParams = angular.extend({}, this.defaultHeaders_);
  if (opt_post !== undefined) {
    queryParameters['post'] = opt_post;
  }

  if (opt_apply !== undefined) {
    queryParameters['apply'] = opt_apply;
  }

  if (opt_delete !== undefined) {
    queryParameters['delete'] = opt_delete;
  }

  if (opt_action !== undefined) {
    queryParameters['action'] = opt_action;
  }

  if (opt_location !== undefined) {
    queryParameters['$location'] = opt_location;
  }

  if (opt_propertylist !== undefined) {
    queryParameters['propertylist'] = opt_propertylist;
  }

  if (opt_mimeTypes !== undefined) {
    queryParameters['mimeTypes'] = opt_mimeTypes;
  }

  if (opt_maxExtract !== undefined) {
    queryParameters['maxExtract'] = opt_maxExtract;
  }

  /** @type {!Object} */
  var httpRequestParams = {
    method: 'POST',
    url: path,
    json: true,
            params: queryParameters,
    headers: headerParams
  };

  if (opt_extraHttpRequestParams) {
    httpRequestParams = angular.extend(httpRequestParams, opt_extraHttpRequestParams);
  }

  return (/** @type {?} */ (this.http_))(httpRequestParams);
}

/**
 * 
 * 
 * @param {!boolean=} opt_post 
 * @param {!boolean=} opt_apply 
 * @param {!boolean=} opt_delete 
 * @param {!string=} opt_action 
 * @param {!string=} opt_location 
 * @param {!Array<!string>=} opt_propertylist 
 * @param {!boolean=} opt_xmpPropagate 
 * @param {!Array<!string>=} opt_xmpExcludes 
 * @param {!angular.$http.Config=} opt_extraHttpRequestParams Extra HTTP parameters to send.
 * @return {!angular.$q.Promise<!API.Client.comDayCqDamCoreImplRenditionMakerImplInfo>}
 */
API.Client.ConfigmgrApi.prototype.comDayCqDamCoreImplRenditionMakerImpl = function(opt_post, opt_apply, opt_delete, opt_action, opt_location, opt_propertylist, opt_xmpPropagate, opt_xmpExcludes, opt_extraHttpRequestParams) {
  /** @const {string} */
  var path = this.basePath_ + '/system/console/configMgr/com.day.cq.dam.core.impl.RenditionMakerImpl';

  /** @type {!Object} */
  var queryParameters = {};

  /** @type {!Object} */
  var headerParams = angular.extend({}, this.defaultHeaders_);
  if (opt_post !== undefined) {
    queryParameters['post'] = opt_post;
  }

  if (opt_apply !== undefined) {
    queryParameters['apply'] = opt_apply;
  }

  if (opt_delete !== undefined) {
    queryParameters['delete'] = opt_delete;
  }

  if (opt_action !== undefined) {
    queryParameters['action'] = opt_action;
  }

  if (opt_location !== undefined) {
    queryParameters['$location'] = opt_location;
  }

  if (opt_propertylist !== undefined) {
    queryParameters['propertylist'] = opt_propertylist;
  }

  if (opt_xmpPropagate !== undefined) {
    queryParameters['xmp.propagate'] = opt_xmpPropagate;
  }

  if (opt_xmpExcludes !== undefined) {
    queryParameters['xmp.excludes'] = opt_xmpExcludes;
  }

  /** @type {!Object} */
  var httpRequestParams = {
    method: 'POST',
    url: path,
    json: true,
            params: queryParameters,
    headers: headerParams
  };

  if (opt_extraHttpRequestParams) {
    httpRequestParams = angular.extend(httpRequestParams, opt_extraHttpRequestParams);
  }

  return (/** @type {?} */ (this.http_))(httpRequestParams);
}

/**
 * 
 * 
 * @param {!boolean=} opt_post 
 * @param {!boolean=} opt_apply 
 * @param {!boolean=} opt_delete 
 * @param {!string=} opt_action 
 * @param {!string=} opt_location 
 * @param {!Array<!string>=} opt_propertylist 
 * @param {!number=} opt_queryBatchSize 
 * @param {!angular.$http.Config=} opt_extraHttpRequestParams Extra HTTP parameters to send.
 * @return {!angular.$q.Promise<!API.Client.comDayCqDamCoreImplReportsReportExportServiceInfo>}
 */
API.Client.ConfigmgrApi.prototype.comDayCqDamCoreImplReportsReportExportService = function(opt_post, opt_apply, opt_delete, opt_action, opt_location, opt_propertylist, opt_queryBatchSize, opt_extraHttpRequestParams) {
  /** @const {string} */
  var path = this.basePath_ + '/system/console/configMgr/com.day.cq.dam.core.impl.reports.ReportExportService';

  /** @type {!Object} */
  var queryParameters = {};

  /** @type {!Object} */
  var headerParams = angular.extend({}, this.defaultHeaders_);
  if (opt_post !== undefined) {
    queryParameters['post'] = opt_post;
  }

  if (opt_apply !== undefined) {
    queryParameters['apply'] = opt_apply;
  }

  if (opt_delete !== undefined) {
    queryParameters['delete'] = opt_delete;
  }

  if (opt_action !== undefined) {
    queryParameters['action'] = opt_action;
  }

  if (opt_location !== undefined) {
    queryParameters['$location'] = opt_location;
  }

  if (opt_propertylist !== undefined) {
    queryParameters['propertylist'] = opt_propertylist;
  }

  if (opt_queryBatchSize !== undefined) {
    queryParameters['queryBatchSize'] = opt_queryBatchSize;
  }

  /** @type {!Object} */
  var httpRequestParams = {
    method: 'POST',
    url: path,
    json: true,
            params: queryParameters,
    headers: headerParams
  };

  if (opt_extraHttpRequestParams) {
    httpRequestParams = angular.extend(httpRequestParams, opt_extraHttpRequestParams);
  }

  return (/** @type {?} */ (this.http_))(httpRequestParams);
}

/**
 * 
 * 
 * @param {!boolean=} opt_post 
 * @param {!boolean=} opt_apply 
 * @param {!boolean=} opt_delete 
 * @param {!string=} opt_action 
 * @param {!string=} opt_location 
 * @param {!Array<!string>=} opt_propertylist 
 * @param {!string=} opt_schedulerExpression 
 * @param {!number=} opt_maxSavedReports 
 * @param {!number=} opt_timeDuration 
 * @param {!boolean=} opt_enableReportPurge 
 * @param {!angular.$http.Config=} opt_extraHttpRequestParams Extra HTTP parameters to send.
 * @return {!angular.$q.Promise<!API.Client.comDayCqDamCoreImplReportsReportPurgeServiceInfo>}
 */
API.Client.ConfigmgrApi.prototype.comDayCqDamCoreImplReportsReportPurgeService = function(opt_post, opt_apply, opt_delete, opt_action, opt_location, opt_propertylist, opt_schedulerExpression, opt_maxSavedReports, opt_timeDuration, opt_enableReportPurge, opt_extraHttpRequestParams) {
  /** @const {string} */
  var path = this.basePath_ + '/system/console/configMgr/com.day.cq.dam.core.impl.reports.ReportPurgeService';

  /** @type {!Object} */
  var queryParameters = {};

  /** @type {!Object} */
  var headerParams = angular.extend({}, this.defaultHeaders_);
  if (opt_post !== undefined) {
    queryParameters['post'] = opt_post;
  }

  if (opt_apply !== undefined) {
    queryParameters['apply'] = opt_apply;
  }

  if (opt_delete !== undefined) {
    queryParameters['delete'] = opt_delete;
  }

  if (opt_action !== undefined) {
    queryParameters['action'] = opt_action;
  }

  if (opt_location !== undefined) {
    queryParameters['$location'] = opt_location;
  }

  if (opt_propertylist !== undefined) {
    queryParameters['propertylist'] = opt_propertylist;
  }

  if (opt_schedulerExpression !== undefined) {
    queryParameters['scheduler.expression'] = opt_schedulerExpression;
  }

  if (opt_maxSavedReports !== undefined) {
    queryParameters['maxSavedReports'] = opt_maxSavedReports;
  }

  if (opt_timeDuration !== undefined) {
    queryParameters['timeDuration'] = opt_timeDuration;
  }

  if (opt_enableReportPurge !== undefined) {
    queryParameters['enableReportPurge'] = opt_enableReportPurge;
  }

  /** @type {!Object} */
  var httpRequestParams = {
    method: 'POST',
    url: path,
    json: true,
            params: queryParameters,
    headers: headerParams
  };

  if (opt_extraHttpRequestParams) {
    httpRequestParams = angular.extend(httpRequestParams, opt_extraHttpRequestParams);
  }

  return (/** @type {?} */ (this.http_))(httpRequestParams);
}

/**
 * 
 * 
 * @param {!boolean=} opt_post 
 * @param {!boolean=} opt_apply 
 * @param {!boolean=} opt_delete 
 * @param {!string=} opt_action 
 * @param {!string=} opt_location 
 * @param {!Array<!string>=} opt_propertylist 
 * @param {!boolean=} opt_enabled 
 * @param {!angular.$http.Config=} opt_extraHttpRequestParams Extra HTTP parameters to send.
 * @return {!angular.$q.Promise<!API.Client.comDayCqDamCoreImplServletAssetDownloadServletInfo>}
 */
API.Client.ConfigmgrApi.prototype.comDayCqDamCoreImplServletAssetDownloadServlet = function(opt_post, opt_apply, opt_delete, opt_action, opt_location, opt_propertylist, opt_enabled, opt_extraHttpRequestParams) {
  /** @const {string} */
  var path = this.basePath_ + '/system/console/configMgr/com.day.cq.dam.core.impl.servlet.AssetDownloadServlet';

  /** @type {!Object} */
  var queryParameters = {};

  /** @type {!Object} */
  var headerParams = angular.extend({}, this.defaultHeaders_);
  if (opt_post !== undefined) {
    queryParameters['post'] = opt_post;
  }

  if (opt_apply !== undefined) {
    queryParameters['apply'] = opt_apply;
  }

  if (opt_delete !== undefined) {
    queryParameters['delete'] = opt_delete;
  }

  if (opt_action !== undefined) {
    queryParameters['action'] = opt_action;
  }

  if (opt_location !== undefined) {
    queryParameters['$location'] = opt_location;
  }

  if (opt_propertylist !== undefined) {
    queryParameters['propertylist'] = opt_propertylist;
  }

  if (opt_enabled !== undefined) {
    queryParameters['enabled'] = opt_enabled;
  }

  /** @type {!Object} */
  var httpRequestParams = {
    method: 'POST',
    url: path,
    json: true,
            params: queryParameters,
    headers: headerParams
  };

  if (opt_extraHttpRequestParams) {
    httpRequestParams = angular.extend(httpRequestParams, opt_extraHttpRequestParams);
  }

  return (/** @type {?} */ (this.http_))(httpRequestParams);
}

/**
 * 
 * 
 * @param {!boolean=} opt_post 
 * @param {!boolean=} opt_apply 
 * @param {!boolean=} opt_delete 
 * @param {!string=} opt_action 
 * @param {!string=} opt_location 
 * @param {!Array<!string>=} opt_propertylist 
 * @param {!number=} opt_cqDamBatchStatusMaxassets 
 * @param {!angular.$http.Config=} opt_extraHttpRequestParams Extra HTTP parameters to send.
 * @return {!angular.$q.Promise<!API.Client.comDayCqDamCoreImplServletAssetStatusServletInfo>}
 */
API.Client.ConfigmgrApi.prototype.comDayCqDamCoreImplServletAssetStatusServlet = function(opt_post, opt_apply, opt_delete, opt_action, opt_location, opt_propertylist, opt_cqDamBatchStatusMaxassets, opt_extraHttpRequestParams) {
  /** @const {string} */
  var path = this.basePath_ + '/system/console/configMgr/com.day.cq.dam.core.impl.servlet.AssetStatusServlet';

  /** @type {!Object} */
  var queryParameters = {};

  /** @type {!Object} */
  var headerParams = angular.extend({}, this.defaultHeaders_);
  if (opt_post !== undefined) {
    queryParameters['post'] = opt_post;
  }

  if (opt_apply !== undefined) {
    queryParameters['apply'] = opt_apply;
  }

  if (opt_delete !== undefined) {
    queryParameters['delete'] = opt_delete;
  }

  if (opt_action !== undefined) {
    queryParameters['action'] = opt_action;
  }

  if (opt_location !== undefined) {
    queryParameters['$location'] = opt_location;
  }

  if (opt_propertylist !== undefined) {
    queryParameters['propertylist'] = opt_propertylist;
  }

  if (opt_cqDamBatchStatusMaxassets !== undefined) {
    queryParameters['cq.dam.batch.status.maxassets'] = opt_cqDamBatchStatusMaxassets;
  }

  /** @type {!Object} */
  var httpRequestParams = {
    method: 'POST',
    url: path,
    json: true,
            params: queryParameters,
    headers: headerParams
  };

  if (opt_extraHttpRequestParams) {
    httpRequestParams = angular.extend(httpRequestParams, opt_extraHttpRequestParams);
  }

  return (/** @type {?} */ (this.http_))(httpRequestParams);
}

/**
 * 
 * 
 * @param {!boolean=} opt_post 
 * @param {!boolean=} opt_apply 
 * @param {!boolean=} opt_delete 
 * @param {!string=} opt_action 
 * @param {!string=} opt_location 
 * @param {!Array<!string>=} opt_propertylist 
 * @param {!number=} opt_cqDamBatchIndesignMaxassets 
 * @param {!angular.$http.Config=} opt_extraHttpRequestParams Extra HTTP parameters to send.
 * @return {!angular.$q.Promise<!API.Client.comDayCqDamCoreImplServletAssetXMPSearchServletInfo>}
 */
API.Client.ConfigmgrApi.prototype.comDayCqDamCoreImplServletAssetXMPSearchServlet = function(opt_post, opt_apply, opt_delete, opt_action, opt_location, opt_propertylist, opt_cqDamBatchIndesignMaxassets, opt_extraHttpRequestParams) {
  /** @const {string} */
  var path = this.basePath_ + '/system/console/configMgr/com.day.cq.dam.core.impl.servlet.AssetXMPSearchServlet';

  /** @type {!Object} */
  var queryParameters = {};

  /** @type {!Object} */
  var headerParams = angular.extend({}, this.defaultHeaders_);
  if (opt_post !== undefined) {
    queryParameters['post'] = opt_post;
  }

  if (opt_apply !== undefined) {
    queryParameters['apply'] = opt_apply;
  }

  if (opt_delete !== undefined) {
    queryParameters['delete'] = opt_delete;
  }

  if (opt_action !== undefined) {
    queryParameters['action'] = opt_action;
  }

  if (opt_location !== undefined) {
    queryParameters['$location'] = opt_location;
  }

  if (opt_propertylist !== undefined) {
    queryParameters['propertylist'] = opt_propertylist;
  }

  if (opt_cqDamBatchIndesignMaxassets !== undefined) {
    queryParameters['cq.dam.batch.indesign.maxassets'] = opt_cqDamBatchIndesignMaxassets;
  }

  /** @type {!Object} */
  var httpRequestParams = {
    method: 'POST',
    url: path,
    json: true,
            params: queryParameters,
    headers: headerParams
  };

  if (opt_extraHttpRequestParams) {
    httpRequestParams = angular.extend(httpRequestParams, opt_extraHttpRequestParams);
  }

  return (/** @type {?} */ (this.http_))(httpRequestParams);
}

/**
 * 
 * 
 * @param {!boolean=} opt_post 
 * @param {!boolean=} opt_apply 
 * @param {!boolean=} opt_delete 
 * @param {!string=} opt_action 
 * @param {!string=} opt_location 
 * @param {!Array<!string>=} opt_propertylist 
 * @param {!Array<!string>=} opt_cqDamBatchMetadataAssetDefault 
 * @param {!Array<!string>=} opt_cqDamBatchMetadataCollectionDefault 
 * @param {!number=} opt_cqDamBatchMetadataMaxresources 
 * @param {!angular.$http.Config=} opt_extraHttpRequestParams Extra HTTP parameters to send.
 * @return {!angular.$q.Promise<!API.Client.comDayCqDamCoreImplServletBatchMetadataServletInfo>}
 */
API.Client.ConfigmgrApi.prototype.comDayCqDamCoreImplServletBatchMetadataServlet = function(opt_post, opt_apply, opt_delete, opt_action, opt_location, opt_propertylist, opt_cqDamBatchMetadataAssetDefault, opt_cqDamBatchMetadataCollectionDefault, opt_cqDamBatchMetadataMaxresources, opt_extraHttpRequestParams) {
  /** @const {string} */
  var path = this.basePath_ + '/system/console/configMgr/com.day.cq.dam.core.impl.servlet.BatchMetadataServlet';

  /** @type {!Object} */
  var queryParameters = {};

  /** @type {!Object} */
  var headerParams = angular.extend({}, this.defaultHeaders_);
  if (opt_post !== undefined) {
    queryParameters['post'] = opt_post;
  }

  if (opt_apply !== undefined) {
    queryParameters['apply'] = opt_apply;
  }

  if (opt_delete !== undefined) {
    queryParameters['delete'] = opt_delete;
  }

  if (opt_action !== undefined) {
    queryParameters['action'] = opt_action;
  }

  if (opt_location !== undefined) {
    queryParameters['$location'] = opt_location;
  }

  if (opt_propertylist !== undefined) {
    queryParameters['propertylist'] = opt_propertylist;
  }

  if (opt_cqDamBatchMetadataAssetDefault !== undefined) {
    queryParameters['cq.dam.batch.metadata.asset.default'] = opt_cqDamBatchMetadataAssetDefault;
  }

  if (opt_cqDamBatchMetadataCollectionDefault !== undefined) {
    queryParameters['cq.dam.batch.metadata.collection.default'] = opt_cqDamBatchMetadataCollectionDefault;
  }

  if (opt_cqDamBatchMetadataMaxresources !== undefined) {
    queryParameters['cq.dam.batch.metadata.maxresources'] = opt_cqDamBatchMetadataMaxresources;
  }

  /** @type {!Object} */
  var httpRequestParams = {
    method: 'POST',
    url: path,
    json: true,
            params: queryParameters,
    headers: headerParams
  };

  if (opt_extraHttpRequestParams) {
    httpRequestParams = angular.extend(httpRequestParams, opt_extraHttpRequestParams);
  }

  return (/** @type {?} */ (this.http_))(httpRequestParams);
}

/**
 * 
 * 
 * @param {!boolean=} opt_post 
 * @param {!boolean=} opt_apply 
 * @param {!boolean=} opt_delete 
 * @param {!string=} opt_action 
 * @param {!string=} opt_location 
 * @param {!Array<!string>=} opt_propertylist 
 * @param {!Array<!string>=} opt_slingServletResourceTypes 
 * @param {!Array<!string>=} opt_slingServletMethods 
 * @param {!boolean=} opt_cqDamDrmEnable 
 * @param {!angular.$http.Config=} opt_extraHttpRequestParams Extra HTTP parameters to send.
 * @return {!angular.$q.Promise<!API.Client.comDayCqDamCoreImplServletBinaryProviderServletInfo>}
 */
API.Client.ConfigmgrApi.prototype.comDayCqDamCoreImplServletBinaryProviderServlet = function(opt_post, opt_apply, opt_delete, opt_action, opt_location, opt_propertylist, opt_slingServletResourceTypes, opt_slingServletMethods, opt_cqDamDrmEnable, opt_extraHttpRequestParams) {
  /** @const {string} */
  var path = this.basePath_ + '/system/console/configMgr/com.day.cq.dam.core.impl.servlet.BinaryProviderServlet';

  /** @type {!Object} */
  var queryParameters = {};

  /** @type {!Object} */
  var headerParams = angular.extend({}, this.defaultHeaders_);
  if (opt_post !== undefined) {
    queryParameters['post'] = opt_post;
  }

  if (opt_apply !== undefined) {
    queryParameters['apply'] = opt_apply;
  }

  if (opt_delete !== undefined) {
    queryParameters['delete'] = opt_delete;
  }

  if (opt_action !== undefined) {
    queryParameters['action'] = opt_action;
  }

  if (opt_location !== undefined) {
    queryParameters['$location'] = opt_location;
  }

  if (opt_propertylist !== undefined) {
    queryParameters['propertylist'] = opt_propertylist;
  }

  if (opt_slingServletResourceTypes !== undefined) {
    queryParameters['sling.servlet.resourceTypes'] = opt_slingServletResourceTypes;
  }

  if (opt_slingServletMethods !== undefined) {
    queryParameters['sling.servlet.methods'] = opt_slingServletMethods;
  }

  if (opt_cqDamDrmEnable !== undefined) {
    queryParameters['cq.dam.drm.enable'] = opt_cqDamDrmEnable;
  }

  /** @type {!Object} */
  var httpRequestParams = {
    method: 'POST',
    url: path,
    json: true,
            params: queryParameters,
    headers: headerParams
  };

  if (opt_extraHttpRequestParams) {
    httpRequestParams = angular.extend(httpRequestParams, opt_extraHttpRequestParams);
  }

  return (/** @type {?} */ (this.http_))(httpRequestParams);
}

/**
 * 
 * 
 * @param {!boolean=} opt_post 
 * @param {!boolean=} opt_apply 
 * @param {!boolean=} opt_delete 
 * @param {!string=} opt_action 
 * @param {!string=} opt_location 
 * @param {!Array<!string>=} opt_propertylist 
 * @param {!Array<!string>=} opt_cqDamBatchCollectionProperties 
 * @param {!number=} opt_cqDamBatchCollectionMaxcollections 
 * @param {!angular.$http.Config=} opt_extraHttpRequestParams Extra HTTP parameters to send.
 * @return {!angular.$q.Promise<!API.Client.comDayCqDamCoreImplServletCollectionServletInfo>}
 */
API.Client.ConfigmgrApi.prototype.comDayCqDamCoreImplServletCollectionServlet = function(opt_post, opt_apply, opt_delete, opt_action, opt_location, opt_propertylist, opt_cqDamBatchCollectionProperties, opt_cqDamBatchCollectionMaxcollections, opt_extraHttpRequestParams) {
  /** @const {string} */
  var path = this.basePath_ + '/system/console/configMgr/com.day.cq.dam.core.impl.servlet.CollectionServlet';

  /** @type {!Object} */
  var queryParameters = {};

  /** @type {!Object} */
  var headerParams = angular.extend({}, this.defaultHeaders_);
  if (opt_post !== undefined) {
    queryParameters['post'] = opt_post;
  }

  if (opt_apply !== undefined) {
    queryParameters['apply'] = opt_apply;
  }

  if (opt_delete !== undefined) {
    queryParameters['delete'] = opt_delete;
  }

  if (opt_action !== undefined) {
    queryParameters['action'] = opt_action;
  }

  if (opt_location !== undefined) {
    queryParameters['$location'] = opt_location;
  }

  if (opt_propertylist !== undefined) {
    queryParameters['propertylist'] = opt_propertylist;
  }

  if (opt_cqDamBatchCollectionProperties !== undefined) {
    queryParameters['cq.dam.batch.collection.properties'] = opt_cqDamBatchCollectionProperties;
  }

  if (opt_cqDamBatchCollectionMaxcollections !== undefined) {
    queryParameters['cq.dam.batch.collection.maxcollections'] = opt_cqDamBatchCollectionMaxcollections;
  }

  /** @type {!Object} */
  var httpRequestParams = {
    method: 'POST',
    url: path,
    json: true,
            params: queryParameters,
    headers: headerParams
  };

  if (opt_extraHttpRequestParams) {
    httpRequestParams = angular.extend(httpRequestParams, opt_extraHttpRequestParams);
  }

  return (/** @type {?} */ (this.http_))(httpRequestParams);
}

/**
 * 
 * 
 * @param {!boolean=} opt_post 
 * @param {!boolean=} opt_apply 
 * @param {!boolean=} opt_delete 
 * @param {!string=} opt_action 
 * @param {!string=} opt_location 
 * @param {!Array<!string>=} opt_propertylist 
 * @param {!Array<!string>=} opt_cqDamBatchCollectionsProperties 
 * @param {!number=} opt_cqDamBatchCollectionsLimit 
 * @param {!angular.$http.Config=} opt_extraHttpRequestParams Extra HTTP parameters to send.
 * @return {!angular.$q.Promise<!API.Client.comDayCqDamCoreImplServletCollectionsServletInfo>}
 */
API.Client.ConfigmgrApi.prototype.comDayCqDamCoreImplServletCollectionsServlet = function(opt_post, opt_apply, opt_delete, opt_action, opt_location, opt_propertylist, opt_cqDamBatchCollectionsProperties, opt_cqDamBatchCollectionsLimit, opt_extraHttpRequestParams) {
  /** @const {string} */
  var path = this.basePath_ + '/system/console/configMgr/com.day.cq.dam.core.impl.servlet.CollectionsServlet';

  /** @type {!Object} */
  var queryParameters = {};

  /** @type {!Object} */
  var headerParams = angular.extend({}, this.defaultHeaders_);
  if (opt_post !== undefined) {
    queryParameters['post'] = opt_post;
  }

  if (opt_apply !== undefined) {
    queryParameters['apply'] = opt_apply;
  }

  if (opt_delete !== undefined) {
    queryParameters['delete'] = opt_delete;
  }

  if (opt_action !== undefined) {
    queryParameters['action'] = opt_action;
  }

  if (opt_location !== undefined) {
    queryParameters['$location'] = opt_location;
  }

  if (opt_propertylist !== undefined) {
    queryParameters['propertylist'] = opt_propertylist;
  }

  if (opt_cqDamBatchCollectionsProperties !== undefined) {
    queryParameters['cq.dam.batch.collections.properties'] = opt_cqDamBatchCollectionsProperties;
  }

  if (opt_cqDamBatchCollectionsLimit !== undefined) {
    queryParameters['cq.dam.batch.collections.limit'] = opt_cqDamBatchCollectionsLimit;
  }

  /** @type {!Object} */
  var httpRequestParams = {
    method: 'POST',
    url: path,
    json: true,
            params: queryParameters,
    headers: headerParams
  };

  if (opt_extraHttpRequestParams) {
    httpRequestParams = angular.extend(httpRequestParams, opt_extraHttpRequestParams);
  }

  return (/** @type {?} */ (this.http_))(httpRequestParams);
}

/**
 * 
 * 
 * @param {!boolean=} opt_post 
 * @param {!boolean=} opt_apply 
 * @param {!boolean=} opt_delete 
 * @param {!string=} opt_action 
 * @param {!string=} opt_location 
 * @param {!Array<!string>=} opt_propertylist 
 * @param {!string=} opt_moreInfo 
 * @param {!string=} opt_mntoverlaydamguicontentassetsmoreinfoHtmlpath 
 * @param {!angular.$http.Config=} opt_extraHttpRequestParams Extra HTTP parameters to send.
 * @return {!angular.$q.Promise<!API.Client.comDayCqDamCoreImplServletCompanionServletInfo>}
 */
API.Client.ConfigmgrApi.prototype.comDayCqDamCoreImplServletCompanionServlet = function(opt_post, opt_apply, opt_delete, opt_action, opt_location, opt_propertylist, opt_moreInfo, opt_mntoverlaydamguicontentassetsmoreinfoHtmlpath, opt_extraHttpRequestParams) {
  /** @const {string} */
  var path = this.basePath_ + '/system/console/configMgr/com.day.cq.dam.core.impl.servlet.CompanionServlet';

  /** @type {!Object} */
  var queryParameters = {};

  /** @type {!Object} */
  var headerParams = angular.extend({}, this.defaultHeaders_);
  if (opt_post !== undefined) {
    queryParameters['post'] = opt_post;
  }

  if (opt_apply !== undefined) {
    queryParameters['apply'] = opt_apply;
  }

  if (opt_delete !== undefined) {
    queryParameters['delete'] = opt_delete;
  }

  if (opt_action !== undefined) {
    queryParameters['action'] = opt_action;
  }

  if (opt_location !== undefined) {
    queryParameters['$location'] = opt_location;
  }

  if (opt_propertylist !== undefined) {
    queryParameters['propertylist'] = opt_propertylist;
  }

  if (opt_moreInfo !== undefined) {
    queryParameters['More Info'] = opt_moreInfo;
  }

  if (opt_mntoverlaydamguicontentassetsmoreinfoHtmlpath !== undefined) {
    queryParameters['/mnt/overlay/dam/gui/content/assets/moreinfo.html/${path}'] = opt_mntoverlaydamguicontentassetsmoreinfoHtmlpath;
  }

  /** @type {!Object} */
  var httpRequestParams = {
    method: 'POST',
    url: path,
    json: true,
            params: queryParameters,
    headers: headerParams
  };

  if (opt_extraHttpRequestParams) {
    httpRequestParams = angular.extend(httpRequestParams, opt_extraHttpRequestParams);
  }

  return (/** @type {?} */ (this.http_))(httpRequestParams);
}

/**
 * 
 * 
 * @param {!boolean=} opt_post 
 * @param {!boolean=} opt_apply 
 * @param {!boolean=} opt_delete 
 * @param {!string=} opt_action 
 * @param {!string=} opt_location 
 * @param {!Array<!string>=} opt_propertylist 
 * @param {!boolean=} opt_detectDuplicate 
 * @param {!angular.$http.Config=} opt_extraHttpRequestParams Extra HTTP parameters to send.
 * @return {!angular.$q.Promise<!API.Client.comDayCqDamCoreImplServletCreateAssetServletInfo>}
 */
API.Client.ConfigmgrApi.prototype.comDayCqDamCoreImplServletCreateAssetServlet = function(opt_post, opt_apply, opt_delete, opt_action, opt_location, opt_propertylist, opt_detectDuplicate, opt_extraHttpRequestParams) {
  /** @const {string} */
  var path = this.basePath_ + '/system/console/configMgr/com.day.cq.dam.core.impl.servlet.CreateAssetServlet';

  /** @type {!Object} */
  var queryParameters = {};

  /** @type {!Object} */
  var headerParams = angular.extend({}, this.defaultHeaders_);
  if (opt_post !== undefined) {
    queryParameters['post'] = opt_post;
  }

  if (opt_apply !== undefined) {
    queryParameters['apply'] = opt_apply;
  }

  if (opt_delete !== undefined) {
    queryParameters['delete'] = opt_delete;
  }

  if (opt_action !== undefined) {
    queryParameters['action'] = opt_action;
  }

  if (opt_location !== undefined) {
    queryParameters['$location'] = opt_location;
  }

  if (opt_propertylist !== undefined) {
    queryParameters['propertylist'] = opt_propertylist;
  }

  if (opt_detectDuplicate !== undefined) {
    queryParameters['detect_duplicate'] = opt_detectDuplicate;
  }

  /** @type {!Object} */
  var httpRequestParams = {
    method: 'POST',
    url: path,
    json: true,
            params: queryParameters,
    headers: headerParams
  };

  if (opt_extraHttpRequestParams) {
    httpRequestParams = angular.extend(httpRequestParams, opt_extraHttpRequestParams);
  }

  return (/** @type {?} */ (this.http_))(httpRequestParams);
}

/**
 * 
 * 
 * @param {!boolean=} opt_post 
 * @param {!boolean=} opt_apply 
 * @param {!boolean=} opt_delete 
 * @param {!string=} opt_action 
 * @param {!string=} opt_location 
 * @param {!Array<!string>=} opt_propertylist 
 * @param {!Array<!string>=} opt_cqMimeTypeBlacklist 
 * @param {!boolean=} opt_cqDamEmptyMime 
 * @param {!angular.$http.Config=} opt_extraHttpRequestParams Extra HTTP parameters to send.
 * @return {!angular.$q.Promise<!API.Client.comDayCqDamCoreImplServletDamContentDispositionFilterInfo>}
 */
API.Client.ConfigmgrApi.prototype.comDayCqDamCoreImplServletDamContentDispositionFilter = function(opt_post, opt_apply, opt_delete, opt_action, opt_location, opt_propertylist, opt_cqMimeTypeBlacklist, opt_cqDamEmptyMime, opt_extraHttpRequestParams) {
  /** @const {string} */
  var path = this.basePath_ + '/system/console/configMgr/com.day.cq.dam.core.impl.servlet.DamContentDispositionFilter';

  /** @type {!Object} */
  var queryParameters = {};

  /** @type {!Object} */
  var headerParams = angular.extend({}, this.defaultHeaders_);
  if (opt_post !== undefined) {
    queryParameters['post'] = opt_post;
  }

  if (opt_apply !== undefined) {
    queryParameters['apply'] = opt_apply;
  }

  if (opt_delete !== undefined) {
    queryParameters['delete'] = opt_delete;
  }

  if (opt_action !== undefined) {
    queryParameters['action'] = opt_action;
  }

  if (opt_location !== undefined) {
    queryParameters['$location'] = opt_location;
  }

  if (opt_propertylist !== undefined) {
    queryParameters['propertylist'] = opt_propertylist;
  }

  if (opt_cqMimeTypeBlacklist !== undefined) {
    queryParameters['cq.mime.type.blacklist'] = opt_cqMimeTypeBlacklist;
  }

  if (opt_cqDamEmptyMime !== undefined) {
    queryParameters['cq.dam.empty.mime'] = opt_cqDamEmptyMime;
  }

  /** @type {!Object} */
  var httpRequestParams = {
    method: 'POST',
    url: path,
    json: true,
            params: queryParameters,
    headers: headerParams
  };

  if (opt_extraHttpRequestParams) {
    httpRequestParams = angular.extend(httpRequestParams, opt_extraHttpRequestParams);
  }

  return (/** @type {?} */ (this.http_))(httpRequestParams);
}

/**
 * 
 * 
 * @param {!boolean=} opt_post 
 * @param {!boolean=} opt_apply 
 * @param {!boolean=} opt_delete 
 * @param {!string=} opt_action 
 * @param {!string=} opt_location 
 * @param {!Array<!string>=} opt_propertylist 
 * @param {!boolean=} opt_cqDamCoreGuidlookupfilterEnabled 
 * @param {!angular.$http.Config=} opt_extraHttpRequestParams Extra HTTP parameters to send.
 * @return {!angular.$q.Promise<!API.Client.comDayCqDamCoreImplServletGuidLookupFilterInfo>}
 */
API.Client.ConfigmgrApi.prototype.comDayCqDamCoreImplServletGuidLookupFilter = function(opt_post, opt_apply, opt_delete, opt_action, opt_location, opt_propertylist, opt_cqDamCoreGuidlookupfilterEnabled, opt_extraHttpRequestParams) {
  /** @const {string} */
  var path = this.basePath_ + '/system/console/configMgr/com.day.cq.dam.core.impl.servlet.GuidLookupFilter';

  /** @type {!Object} */
  var queryParameters = {};

  /** @type {!Object} */
  var headerParams = angular.extend({}, this.defaultHeaders_);
  if (opt_post !== undefined) {
    queryParameters['post'] = opt_post;
  }

  if (opt_apply !== undefined) {
    queryParameters['apply'] = opt_apply;
  }

  if (opt_delete !== undefined) {
    queryParameters['delete'] = opt_delete;
  }

  if (opt_action !== undefined) {
    queryParameters['action'] = opt_action;
  }

  if (opt_location !== undefined) {
    queryParameters['$location'] = opt_location;
  }

  if (opt_propertylist !== undefined) {
    queryParameters['propertylist'] = opt_propertylist;
  }

  if (opt_cqDamCoreGuidlookupfilterEnabled !== undefined) {
    queryParameters['cq.dam.core.guidlookupfilter.enabled'] = opt_cqDamCoreGuidlookupfilterEnabled;
  }

  /** @type {!Object} */
  var httpRequestParams = {
    method: 'POST',
    url: path,
    json: true,
            params: queryParameters,
    headers: headerParams
  };

  if (opt_extraHttpRequestParams) {
    httpRequestParams = angular.extend(httpRequestParams, opt_extraHttpRequestParams);
  }

  return (/** @type {?} */ (this.http_))(httpRequestParams);
}

/**
 * 
 * 
 * @param {!boolean=} opt_post 
 * @param {!boolean=} opt_apply 
 * @param {!boolean=} opt_delete 
 * @param {!string=} opt_action 
 * @param {!string=} opt_location 
 * @param {!Array<!string>=} opt_propertylist 
 * @param {!string=} opt_cqDamSyncWorkflowId 
 * @param {!Array<!string>=} opt_cqDamSyncFolderTypes 
 * @param {!angular.$http.Config=} opt_extraHttpRequestParams Extra HTTP parameters to send.
 * @return {!angular.$q.Promise<!API.Client.comDayCqDamCoreImplServletHealthCheckServletInfo>}
 */
API.Client.ConfigmgrApi.prototype.comDayCqDamCoreImplServletHealthCheckServlet = function(opt_post, opt_apply, opt_delete, opt_action, opt_location, opt_propertylist, opt_cqDamSyncWorkflowId, opt_cqDamSyncFolderTypes, opt_extraHttpRequestParams) {
  /** @const {string} */
  var path = this.basePath_ + '/system/console/configMgr/com.day.cq.dam.core.impl.servlet.HealthCheckServlet';

  /** @type {!Object} */
  var queryParameters = {};

  /** @type {!Object} */
  var headerParams = angular.extend({}, this.defaultHeaders_);
  if (opt_post !== undefined) {
    queryParameters['post'] = opt_post;
  }

  if (opt_apply !== undefined) {
    queryParameters['apply'] = opt_apply;
  }

  if (opt_delete !== undefined) {
    queryParameters['delete'] = opt_delete;
  }

  if (opt_action !== undefined) {
    queryParameters['action'] = opt_action;
  }

  if (opt_location !== undefined) {
    queryParameters['$location'] = opt_location;
  }

  if (opt_propertylist !== undefined) {
    queryParameters['propertylist'] = opt_propertylist;
  }

  if (opt_cqDamSyncWorkflowId !== undefined) {
    queryParameters['cq.dam.sync.workflow.id'] = opt_cqDamSyncWorkflowId;
  }

  if (opt_cqDamSyncFolderTypes !== undefined) {
    queryParameters['cq.dam.sync.folder.types'] = opt_cqDamSyncFolderTypes;
  }

  /** @type {!Object} */
  var httpRequestParams = {
    method: 'POST',
    url: path,
    json: true,
            params: queryParameters,
    headers: headerParams
  };

  if (opt_extraHttpRequestParams) {
    httpRequestParams = angular.extend(httpRequestParams, opt_extraHttpRequestParams);
  }

  return (/** @type {?} */ (this.http_))(httpRequestParams);
}

/**
 * 
 * 
 * @param {!boolean=} opt_post 
 * @param {!boolean=} opt_apply 
 * @param {!boolean=} opt_delete 
 * @param {!string=} opt_action 
 * @param {!string=} opt_location 
 * @param {!Array<!string>=} opt_propertylist 
 * @param {!string=} opt_slingServletResourceTypes 
 * @param {!string=} opt_slingServletMethods 
 * @param {!string=} opt_slingServletExtensions 
 * @param {!string=} opt_slingServletSelectors 
 * @param {!angular.$http.Config=} opt_extraHttpRequestParams Extra HTTP parameters to send.
 * @return {!angular.$q.Promise<!API.Client.comDayCqDamCoreImplServletMetadataGetServletInfo>}
 */
API.Client.ConfigmgrApi.prototype.comDayCqDamCoreImplServletMetadataGetServlet = function(opt_post, opt_apply, opt_delete, opt_action, opt_location, opt_propertylist, opt_slingServletResourceTypes, opt_slingServletMethods, opt_slingServletExtensions, opt_slingServletSelectors, opt_extraHttpRequestParams) {
  /** @const {string} */
  var path = this.basePath_ + '/system/console/configMgr/com.day.cq.dam.core.impl.servlet.MetadataGetServlet';

  /** @type {!Object} */
  var queryParameters = {};

  /** @type {!Object} */
  var headerParams = angular.extend({}, this.defaultHeaders_);
  if (opt_post !== undefined) {
    queryParameters['post'] = opt_post;
  }

  if (opt_apply !== undefined) {
    queryParameters['apply'] = opt_apply;
  }

  if (opt_delete !== undefined) {
    queryParameters['delete'] = opt_delete;
  }

  if (opt_action !== undefined) {
    queryParameters['action'] = opt_action;
  }

  if (opt_location !== undefined) {
    queryParameters['$location'] = opt_location;
  }

  if (opt_propertylist !== undefined) {
    queryParameters['propertylist'] = opt_propertylist;
  }

  if (opt_slingServletResourceTypes !== undefined) {
    queryParameters['sling.servlet.resourceTypes'] = opt_slingServletResourceTypes;
  }

  if (opt_slingServletMethods !== undefined) {
    queryParameters['sling.servlet.methods'] = opt_slingServletMethods;
  }

  if (opt_slingServletExtensions !== undefined) {
    queryParameters['sling.servlet.extensions'] = opt_slingServletExtensions;
  }

  if (opt_slingServletSelectors !== undefined) {
    queryParameters['sling.servlet.selectors'] = opt_slingServletSelectors;
  }

  /** @type {!Object} */
  var httpRequestParams = {
    method: 'POST',
    url: path,
    json: true,
            params: queryParameters,
    headers: headerParams
  };

  if (opt_extraHttpRequestParams) {
    httpRequestParams = angular.extend(httpRequestParams, opt_extraHttpRequestParams);
  }

  return (/** @type {?} */ (this.http_))(httpRequestParams);
}

/**
 * 
 * 
 * @param {!boolean=} opt_post 
 * @param {!boolean=} opt_apply 
 * @param {!boolean=} opt_delete 
 * @param {!string=} opt_action 
 * @param {!string=} opt_location 
 * @param {!Array<!string>=} opt_propertylist 
 * @param {!boolean=} opt_cqDamDrmEnable 
 * @param {!angular.$http.Config=} opt_extraHttpRequestParams Extra HTTP parameters to send.
 * @return {!angular.$q.Promise<!API.Client.comDayCqDamCoreImplServletMultipleLicenseAcceptServletInfo>}
 */
API.Client.ConfigmgrApi.prototype.comDayCqDamCoreImplServletMultipleLicenseAcceptServlet = function(opt_post, opt_apply, opt_delete, opt_action, opt_location, opt_propertylist, opt_cqDamDrmEnable, opt_extraHttpRequestParams) {
  /** @const {string} */
  var path = this.basePath_ + '/system/console/configMgr/com.day.cq.dam.core.impl.servlet.MultipleLicenseAcceptServlet';

  /** @type {!Object} */
  var queryParameters = {};

  /** @type {!Object} */
  var headerParams = angular.extend({}, this.defaultHeaders_);
  if (opt_post !== undefined) {
    queryParameters['post'] = opt_post;
  }

  if (opt_apply !== undefined) {
    queryParameters['apply'] = opt_apply;
  }

  if (opt_delete !== undefined) {
    queryParameters['delete'] = opt_delete;
  }

  if (opt_action !== undefined) {
    queryParameters['action'] = opt_action;
  }

  if (opt_location !== undefined) {
    queryParameters['$location'] = opt_location;
  }

  if (opt_propertylist !== undefined) {
    queryParameters['propertylist'] = opt_propertylist;
  }

  if (opt_cqDamDrmEnable !== undefined) {
    queryParameters['cq.dam.drm.enable'] = opt_cqDamDrmEnable;
  }

  /** @type {!Object} */
  var httpRequestParams = {
    method: 'POST',
    url: path,
    json: true,
            params: queryParameters,
    headers: headerParams
  };

  if (opt_extraHttpRequestParams) {
    httpRequestParams = angular.extend(httpRequestParams, opt_extraHttpRequestParams);
  }

  return (/** @type {?} */ (this.http_))(httpRequestParams);
}

/**
 * 
 * 
 * @param {!boolean=} opt_post 
 * @param {!boolean=} opt_apply 
 * @param {!boolean=} opt_delete 
 * @param {!string=} opt_action 
 * @param {!string=} opt_location 
 * @param {!Array<!string>=} opt_propertylist 
 * @param {!Array<!string>=} opt_slingServletResourceTypes 
 * @param {!string=} opt_slingServletMethods 
 * @param {!string=} opt_slingServletSelectors 
 * @param {!string=} opt_downloadConfig 
 * @param {!string=} opt_viewSelector 
 * @param {!boolean=} opt_sendEmail 
 * @param {!angular.$http.Config=} opt_extraHttpRequestParams Extra HTTP parameters to send.
 * @return {!angular.$q.Promise<!API.Client.comDayCqDamCoreImplServletResourceCollectionServletInfo>}
 */
API.Client.ConfigmgrApi.prototype.comDayCqDamCoreImplServletResourceCollectionServlet = function(opt_post, opt_apply, opt_delete, opt_action, opt_location, opt_propertylist, opt_slingServletResourceTypes, opt_slingServletMethods, opt_slingServletSelectors, opt_downloadConfig, opt_viewSelector, opt_sendEmail, opt_extraHttpRequestParams) {
  /** @const {string} */
  var path = this.basePath_ + '/system/console/configMgr/com.day.cq.dam.core.impl.servlet.ResourceCollectionServlet';

  /** @type {!Object} */
  var queryParameters = {};

  /** @type {!Object} */
  var headerParams = angular.extend({}, this.defaultHeaders_);
  if (opt_post !== undefined) {
    queryParameters['post'] = opt_post;
  }

  if (opt_apply !== undefined) {
    queryParameters['apply'] = opt_apply;
  }

  if (opt_delete !== undefined) {
    queryParameters['delete'] = opt_delete;
  }

  if (opt_action !== undefined) {
    queryParameters['action'] = opt_action;
  }

  if (opt_location !== undefined) {
    queryParameters['$location'] = opt_location;
  }

  if (opt_propertylist !== undefined) {
    queryParameters['propertylist'] = opt_propertylist;
  }

  if (opt_slingServletResourceTypes !== undefined) {
    queryParameters['sling.servlet.resourceTypes'] = opt_slingServletResourceTypes;
  }

  if (opt_slingServletMethods !== undefined) {
    queryParameters['sling.servlet.methods'] = opt_slingServletMethods;
  }

  if (opt_slingServletSelectors !== undefined) {
    queryParameters['sling.servlet.selectors'] = opt_slingServletSelectors;
  }

  if (opt_downloadConfig !== undefined) {
    queryParameters['download.config'] = opt_downloadConfig;
  }

  if (opt_viewSelector !== undefined) {
    queryParameters['view.selector'] = opt_viewSelector;
  }

  if (opt_sendEmail !== undefined) {
    queryParameters['send_email'] = opt_sendEmail;
  }

  /** @type {!Object} */
  var httpRequestParams = {
    method: 'POST',
    url: path,
    json: true,
            params: queryParameters,
    headers: headerParams
  };

  if (opt_extraHttpRequestParams) {
    httpRequestParams = angular.extend(httpRequestParams, opt_extraHttpRequestParams);
  }

  return (/** @type {?} */ (this.http_))(httpRequestParams);
}

/**
 * 
 * 
 * @param {!boolean=} opt_post 
 * @param {!boolean=} opt_apply 
 * @param {!boolean=} opt_delete 
 * @param {!string=} opt_action 
 * @param {!string=} opt_location 
 * @param {!Array<!string>=} opt_propertylist 
 * @param {!boolean=} opt_createPreviewEnabled 
 * @param {!boolean=} opt_updatePreviewEnabled 
 * @param {!number=} opt_queueSize 
 * @param {!string=} opt_folderPreviewRenditionRegex 
 * @param {!angular.$http.Config=} opt_extraHttpRequestParams Extra HTTP parameters to send.
 * @return {!angular.$q.Promise<!API.Client.comDayCqDamCoreImplUiPreviewFolderPreviewUpdaterImplInfo>}
 */
API.Client.ConfigmgrApi.prototype.comDayCqDamCoreImplUiPreviewFolderPreviewUpdaterImpl = function(opt_post, opt_apply, opt_delete, opt_action, opt_location, opt_propertylist, opt_createPreviewEnabled, opt_updatePreviewEnabled, opt_queueSize, opt_folderPreviewRenditionRegex, opt_extraHttpRequestParams) {
  /** @const {string} */
  var path = this.basePath_ + '/system/console/configMgr/com.day.cq.dam.core.impl.ui.preview.FolderPreviewUpdaterImpl';

  /** @type {!Object} */
  var queryParameters = {};

  /** @type {!Object} */
  var headerParams = angular.extend({}, this.defaultHeaders_);
  if (opt_post !== undefined) {
    queryParameters['post'] = opt_post;
  }

  if (opt_apply !== undefined) {
    queryParameters['apply'] = opt_apply;
  }

  if (opt_delete !== undefined) {
    queryParameters['delete'] = opt_delete;
  }

  if (opt_action !== undefined) {
    queryParameters['action'] = opt_action;
  }

  if (opt_location !== undefined) {
    queryParameters['$location'] = opt_location;
  }

  if (opt_propertylist !== undefined) {
    queryParameters['propertylist'] = opt_propertylist;
  }

  if (opt_createPreviewEnabled !== undefined) {
    queryParameters['createPreviewEnabled'] = opt_createPreviewEnabled;
  }

  if (opt_updatePreviewEnabled !== undefined) {
    queryParameters['updatePreviewEnabled'] = opt_updatePreviewEnabled;
  }

  if (opt_queueSize !== undefined) {
    queryParameters['queueSize'] = opt_queueSize;
  }

  if (opt_folderPreviewRenditionRegex !== undefined) {
    queryParameters['folderPreviewRenditionRegex'] = opt_folderPreviewRenditionRegex;
  }

  /** @type {!Object} */
  var httpRequestParams = {
    method: 'POST',
    url: path,
    json: true,
            params: queryParameters,
    headers: headerParams
  };

  if (opt_extraHttpRequestParams) {
    httpRequestParams = angular.extend(httpRequestParams, opt_extraHttpRequestParams);
  }

  return (/** @type {?} */ (this.http_))(httpRequestParams);
}

/**
 * 
 * 
 * @param {!boolean=} opt_post 
 * @param {!boolean=} opt_apply 
 * @param {!boolean=} opt_delete 
 * @param {!string=} opt_action 
 * @param {!string=} opt_location 
 * @param {!Array<!string>=} opt_propertylist 
 * @param {!number=} opt_cqDamConfigUnzipMaxuncompressedsize 
 * @param {!string=} opt_cqDamConfigUnzipEncoding 
 * @param {!angular.$http.Config=} opt_extraHttpRequestParams Extra HTTP parameters to send.
 * @return {!angular.$q.Promise<!API.Client.comDayCqDamCoreImplUnzipUnzipConfigInfo>}
 */
API.Client.ConfigmgrApi.prototype.comDayCqDamCoreImplUnzipUnzipConfig = function(opt_post, opt_apply, opt_delete, opt_action, opt_location, opt_propertylist, opt_cqDamConfigUnzipMaxuncompressedsize, opt_cqDamConfigUnzipEncoding, opt_extraHttpRequestParams) {
  /** @const {string} */
  var path = this.basePath_ + '/system/console/configMgr/com.day.cq.dam.core.impl.unzip.UnzipConfig';

  /** @type {!Object} */
  var queryParameters = {};

  /** @type {!Object} */
  var headerParams = angular.extend({}, this.defaultHeaders_);
  if (opt_post !== undefined) {
    queryParameters['post'] = opt_post;
  }

  if (opt_apply !== undefined) {
    queryParameters['apply'] = opt_apply;
  }

  if (opt_delete !== undefined) {
    queryParameters['delete'] = opt_delete;
  }

  if (opt_action !== undefined) {
    queryParameters['action'] = opt_action;
  }

  if (opt_location !== undefined) {
    queryParameters['$location'] = opt_location;
  }

  if (opt_propertylist !== undefined) {
    queryParameters['propertylist'] = opt_propertylist;
  }

  if (opt_cqDamConfigUnzipMaxuncompressedsize !== undefined) {
    queryParameters['cq.dam.config.unzip.maxuncompressedsize'] = opt_cqDamConfigUnzipMaxuncompressedsize;
  }

  if (opt_cqDamConfigUnzipEncoding !== undefined) {
    queryParameters['cq.dam.config.unzip.encoding'] = opt_cqDamConfigUnzipEncoding;
  }

  /** @type {!Object} */
  var httpRequestParams = {
    method: 'POST',
    url: path,
    json: true,
            params: queryParameters,
    headers: headerParams
  };

  if (opt_extraHttpRequestParams) {
    httpRequestParams = angular.extend(httpRequestParams, opt_extraHttpRequestParams);
  }

  return (/** @type {?} */ (this.http_))(httpRequestParams);
}

/**
 * 
 * 
 * @param {!boolean=} opt_post 
 * @param {!boolean=} opt_apply 
 * @param {!boolean=} opt_delete 
 * @param {!string=} opt_action 
 * @param {!string=} opt_location 
 * @param {!Array<!string>=} opt_propertylist 
 * @param {!string=} opt_processLabel 
 * @param {!boolean=} opt_cqDamEnableSha1 
 * @param {!angular.$http.Config=} opt_extraHttpRequestParams Extra HTTP parameters to send.
 * @return {!angular.$q.Promise<!API.Client.comDayCqDamCoreProcessExifToolExtractMetadataProcessInfo>}
 */
API.Client.ConfigmgrApi.prototype.comDayCqDamCoreProcessExifToolExtractMetadataProcess = function(opt_post, opt_apply, opt_delete, opt_action, opt_location, opt_propertylist, opt_processLabel, opt_cqDamEnableSha1, opt_extraHttpRequestParams) {
  /** @const {string} */
  var path = this.basePath_ + '/system/console/configMgr/com.day.cq.dam.core.process.ExifToolExtractMetadataProcess';

  /** @type {!Object} */
  var queryParameters = {};

  /** @type {!Object} */
  var headerParams = angular.extend({}, this.defaultHeaders_);
  if (opt_post !== undefined) {
    queryParameters['post'] = opt_post;
  }

  if (opt_apply !== undefined) {
    queryParameters['apply'] = opt_apply;
  }

  if (opt_delete !== undefined) {
    queryParameters['delete'] = opt_delete;
  }

  if (opt_action !== undefined) {
    queryParameters['action'] = opt_action;
  }

  if (opt_location !== undefined) {
    queryParameters['$location'] = opt_location;
  }

  if (opt_propertylist !== undefined) {
    queryParameters['propertylist'] = opt_propertylist;
  }

  if (opt_processLabel !== undefined) {
    queryParameters['process.label'] = opt_processLabel;
  }

  if (opt_cqDamEnableSha1 !== undefined) {
    queryParameters['cq.dam.enable.sha1'] = opt_cqDamEnableSha1;
  }

  /** @type {!Object} */
  var httpRequestParams = {
    method: 'POST',
    url: path,
    json: true,
            params: queryParameters,
    headers: headerParams
  };

  if (opt_extraHttpRequestParams) {
    httpRequestParams = angular.extend(httpRequestParams, opt_extraHttpRequestParams);
  }

  return (/** @type {?} */ (this.http_))(httpRequestParams);
}

/**
 * 
 * 
 * @param {!boolean=} opt_post 
 * @param {!boolean=} opt_apply 
 * @param {!boolean=} opt_delete 
 * @param {!string=} opt_action 
 * @param {!string=} opt_location 
 * @param {!Array<!string>=} opt_propertylist 
 * @param {!string=} opt_processLabel 
 * @param {!boolean=} opt_cqDamEnableSha1 
 * @param {!angular.$http.Config=} opt_extraHttpRequestParams Extra HTTP parameters to send.
 * @return {!angular.$q.Promise<!API.Client.comDayCqDamCoreProcessExtractMetadataProcessInfo>}
 */
API.Client.ConfigmgrApi.prototype.comDayCqDamCoreProcessExtractMetadataProcess = function(opt_post, opt_apply, opt_delete, opt_action, opt_location, opt_propertylist, opt_processLabel, opt_cqDamEnableSha1, opt_extraHttpRequestParams) {
  /** @const {string} */
  var path = this.basePath_ + '/system/console/configMgr/com.day.cq.dam.core.process.ExtractMetadataProcess';

  /** @type {!Object} */
  var queryParameters = {};

  /** @type {!Object} */
  var headerParams = angular.extend({}, this.defaultHeaders_);
  if (opt_post !== undefined) {
    queryParameters['post'] = opt_post;
  }

  if (opt_apply !== undefined) {
    queryParameters['apply'] = opt_apply;
  }

  if (opt_delete !== undefined) {
    queryParameters['delete'] = opt_delete;
  }

  if (opt_action !== undefined) {
    queryParameters['action'] = opt_action;
  }

  if (opt_location !== undefined) {
    queryParameters['$location'] = opt_location;
  }

  if (opt_propertylist !== undefined) {
    queryParameters['propertylist'] = opt_propertylist;
  }

  if (opt_processLabel !== undefined) {
    queryParameters['process.label'] = opt_processLabel;
  }

  if (opt_cqDamEnableSha1 !== undefined) {
    queryParameters['cq.dam.enable.sha1'] = opt_cqDamEnableSha1;
  }

  /** @type {!Object} */
  var httpRequestParams = {
    method: 'POST',
    url: path,
    json: true,
            params: queryParameters,
    headers: headerParams
  };

  if (opt_extraHttpRequestParams) {
    httpRequestParams = angular.extend(httpRequestParams, opt_extraHttpRequestParams);
  }

  return (/** @type {?} */ (this.http_))(httpRequestParams);
}

/**
 * 
 * 
 * @param {!boolean=} opt_post 
 * @param {!boolean=} opt_apply 
 * @param {!boolean=} opt_delete 
 * @param {!string=} opt_action 
 * @param {!string=} opt_location 
 * @param {!Array<!string>=} opt_propertylist 
 * @param {!string=} opt_processLabel 
 * @param {!boolean=} opt_cqDamEnableSha1 
 * @param {!Array<!string>=} opt_cqDamMetadataXssprotectedProperties 
 * @param {!angular.$http.Config=} opt_extraHttpRequestParams Extra HTTP parameters to send.
 * @return {!angular.$q.Promise<!API.Client.comDayCqDamCoreProcessMetadataProcessorProcessInfo>}
 */
API.Client.ConfigmgrApi.prototype.comDayCqDamCoreProcessMetadataProcessorProcess = function(opt_post, opt_apply, opt_delete, opt_action, opt_location, opt_propertylist, opt_processLabel, opt_cqDamEnableSha1, opt_cqDamMetadataXssprotectedProperties, opt_extraHttpRequestParams) {
  /** @const {string} */
  var path = this.basePath_ + '/system/console/configMgr/com.day.cq.dam.core.process.MetadataProcessorProcess';

  /** @type {!Object} */
  var queryParameters = {};

  /** @type {!Object} */
  var headerParams = angular.extend({}, this.defaultHeaders_);
  if (opt_post !== undefined) {
    queryParameters['post'] = opt_post;
  }

  if (opt_apply !== undefined) {
    queryParameters['apply'] = opt_apply;
  }

  if (opt_delete !== undefined) {
    queryParameters['delete'] = opt_delete;
  }

  if (opt_action !== undefined) {
    queryParameters['action'] = opt_action;
  }

  if (opt_location !== undefined) {
    queryParameters['$location'] = opt_location;
  }

  if (opt_propertylist !== undefined) {
    queryParameters['propertylist'] = opt_propertylist;
  }

  if (opt_processLabel !== undefined) {
    queryParameters['process.label'] = opt_processLabel;
  }

  if (opt_cqDamEnableSha1 !== undefined) {
    queryParameters['cq.dam.enable.sha1'] = opt_cqDamEnableSha1;
  }

  if (opt_cqDamMetadataXssprotectedProperties !== undefined) {
    queryParameters['cq.dam.metadata.xssprotected.properties'] = opt_cqDamMetadataXssprotectedProperties;
  }

  /** @type {!Object} */
  var httpRequestParams = {
    method: 'POST',
    url: path,
    json: true,
            params: queryParameters,
    headers: headerParams
  };

  if (opt_extraHttpRequestParams) {
    httpRequestParams = angular.extend(httpRequestParams, opt_extraHttpRequestParams);
  }

  return (/** @type {?} */ (this.http_))(httpRequestParams);
}

/**
 * 
 * 
 * @param {!boolean=} opt_post 
 * @param {!boolean=} opt_apply 
 * @param {!boolean=} opt_delete 
 * @param {!string=} opt_action 
 * @param {!string=} opt_location 
 * @param {!Array<!string>=} opt_propertylist 
 * @param {!Array<!string>=} opt_executableSearchpath 
 * @param {!angular.$http.Config=} opt_extraHttpRequestParams Extra HTTP parameters to send.
 * @return {!angular.$q.Promise<!API.Client.comDayCqDamHandlerFfmpegLocatorImplInfo>}
 */
API.Client.ConfigmgrApi.prototype.comDayCqDamHandlerFfmpegLocatorImpl = function(opt_post, opt_apply, opt_delete, opt_action, opt_location, opt_propertylist, opt_executableSearchpath, opt_extraHttpRequestParams) {
  /** @const {string} */
  var path = this.basePath_ + '/system/console/configMgr/com.day.cq.dam.handler.ffmpeg.LocatorImpl';

  /** @type {!Object} */
  var queryParameters = {};

  /** @type {!Object} */
  var headerParams = angular.extend({}, this.defaultHeaders_);
  if (opt_post !== undefined) {
    queryParameters['post'] = opt_post;
  }

  if (opt_apply !== undefined) {
    queryParameters['apply'] = opt_apply;
  }

  if (opt_delete !== undefined) {
    queryParameters['delete'] = opt_delete;
  }

  if (opt_action !== undefined) {
    queryParameters['action'] = opt_action;
  }

  if (opt_location !== undefined) {
    queryParameters['$location'] = opt_location;
  }

  if (opt_propertylist !== undefined) {
    queryParameters['propertylist'] = opt_propertylist;
  }

  if (opt_executableSearchpath !== undefined) {
    queryParameters['executable.searchpath'] = opt_executableSearchpath;
  }

  /** @type {!Object} */
  var httpRequestParams = {
    method: 'POST',
    url: path,
    json: true,
            params: queryParameters,
    headers: headerParams
  };

  if (opt_extraHttpRequestParams) {
    httpRequestParams = angular.extend(httpRequestParams, opt_extraHttpRequestParams);
  }

  return (/** @type {?} */ (this.http_))(httpRequestParams);
}

/**
 * 
 * 
 * @param {!boolean=} opt_post 
 * @param {!boolean=} opt_apply 
 * @param {!boolean=} opt_delete 
 * @param {!string=} opt_action 
 * @param {!string=} opt_location 
 * @param {!Array<!string>=} opt_propertylist 
 * @param {!string=} opt_eventFilter 
 * @param {!Array<!string>=} opt_fontmgrSystemFontDir 
 * @param {!string=} opt_fontmgrAdobeFontDir 
 * @param {!string=} opt_fontmgrCustomerFontDir 
 * @param {!angular.$http.Config=} opt_extraHttpRequestParams Extra HTTP parameters to send.
 * @return {!angular.$q.Promise<!API.Client.comDayCqDamHandlerGibsonFontmanagerImplFontManagerServiceImplInfo>}
 */
API.Client.ConfigmgrApi.prototype.comDayCqDamHandlerGibsonFontmanagerImplFontManagerServiceImpl = function(opt_post, opt_apply, opt_delete, opt_action, opt_location, opt_propertylist, opt_eventFilter, opt_fontmgrSystemFontDir, opt_fontmgrAdobeFontDir, opt_fontmgrCustomerFontDir, opt_extraHttpRequestParams) {
  /** @const {string} */
  var path = this.basePath_ + '/system/console/configMgr/com.day.cq.dam.handler.gibson.fontmanager.impl.FontManagerServiceImpl';

  /** @type {!Object} */
  var queryParameters = {};

  /** @type {!Object} */
  var headerParams = angular.extend({}, this.defaultHeaders_);
  if (opt_post !== undefined) {
    queryParameters['post'] = opt_post;
  }

  if (opt_apply !== undefined) {
    queryParameters['apply'] = opt_apply;
  }

  if (opt_delete !== undefined) {
    queryParameters['delete'] = opt_delete;
  }

  if (opt_action !== undefined) {
    queryParameters['action'] = opt_action;
  }

  if (opt_location !== undefined) {
    queryParameters['$location'] = opt_location;
  }

  if (opt_propertylist !== undefined) {
    queryParameters['propertylist'] = opt_propertylist;
  }

  if (opt_eventFilter !== undefined) {
    queryParameters['event.filter'] = opt_eventFilter;
  }

  if (opt_fontmgrSystemFontDir !== undefined) {
    queryParameters['fontmgr.system.font.dir'] = opt_fontmgrSystemFontDir;
  }

  if (opt_fontmgrAdobeFontDir !== undefined) {
    queryParameters['fontmgr.adobe.font.dir'] = opt_fontmgrAdobeFontDir;
  }

  if (opt_fontmgrCustomerFontDir !== undefined) {
    queryParameters['fontmgr.customer.font.dir'] = opt_fontmgrCustomerFontDir;
  }

  /** @type {!Object} */
  var httpRequestParams = {
    method: 'POST',
    url: path,
    json: true,
            params: queryParameters,
    headers: headerParams
  };

  if (opt_extraHttpRequestParams) {
    httpRequestParams = angular.extend(httpRequestParams, opt_extraHttpRequestParams);
  }

  return (/** @type {?} */ (this.http_))(httpRequestParams);
}

/**
 * 
 * 
 * @param {!boolean=} opt_post 
 * @param {!boolean=} opt_apply 
 * @param {!boolean=} opt_delete 
 * @param {!string=} opt_action 
 * @param {!string=} opt_location 
 * @param {!Array<!string>=} opt_propertylist 
 * @param {!boolean=} opt_rasterAnnotation 
 * @param {!angular.$http.Config=} opt_extraHttpRequestParams Extra HTTP parameters to send.
 * @return {!angular.$q.Promise<!API.Client.comDayCqDamHandlerStandardPdfPdfHandlerInfo>}
 */
API.Client.ConfigmgrApi.prototype.comDayCqDamHandlerStandardPdfPdfHandler = function(opt_post, opt_apply, opt_delete, opt_action, opt_location, opt_propertylist, opt_rasterAnnotation, opt_extraHttpRequestParams) {
  /** @const {string} */
  var path = this.basePath_ + '/system/console/configMgr/com.day.cq.dam.handler.standard.pdf.PdfHandler';

  /** @type {!Object} */
  var queryParameters = {};

  /** @type {!Object} */
  var headerParams = angular.extend({}, this.defaultHeaders_);
  if (opt_post !== undefined) {
    queryParameters['post'] = opt_post;
  }

  if (opt_apply !== undefined) {
    queryParameters['apply'] = opt_apply;
  }

  if (opt_delete !== undefined) {
    queryParameters['delete'] = opt_delete;
  }

  if (opt_action !== undefined) {
    queryParameters['action'] = opt_action;
  }

  if (opt_location !== undefined) {
    queryParameters['$location'] = opt_location;
  }

  if (opt_propertylist !== undefined) {
    queryParameters['propertylist'] = opt_propertylist;
  }

  if (opt_rasterAnnotation !== undefined) {
    queryParameters['raster.annotation'] = opt_rasterAnnotation;
  }

  /** @type {!Object} */
  var httpRequestParams = {
    method: 'POST',
    url: path,
    json: true,
            params: queryParameters,
    headers: headerParams
  };

  if (opt_extraHttpRequestParams) {
    httpRequestParams = angular.extend(httpRequestParams, opt_extraHttpRequestParams);
  }

  return (/** @type {?} */ (this.http_))(httpRequestParams);
}

/**
 * 
 * 
 * @param {!boolean=} opt_post 
 * @param {!boolean=} opt_apply 
 * @param {!boolean=} opt_delete 
 * @param {!string=} opt_action 
 * @param {!string=} opt_location 
 * @param {!Array<!string>=} opt_propertylist 
 * @param {!boolean=} opt_rasterAnnotation 
 * @param {!angular.$http.Config=} opt_extraHttpRequestParams Extra HTTP parameters to send.
 * @return {!angular.$q.Promise<!API.Client.comDayCqDamHandlerStandardPsPostScriptHandlerInfo>}
 */
API.Client.ConfigmgrApi.prototype.comDayCqDamHandlerStandardPsPostScriptHandler = function(opt_post, opt_apply, opt_delete, opt_action, opt_location, opt_propertylist, opt_rasterAnnotation, opt_extraHttpRequestParams) {
  /** @const {string} */
  var path = this.basePath_ + '/system/console/configMgr/com.day.cq.dam.handler.standard.ps.PostScriptHandler';

  /** @type {!Object} */
  var queryParameters = {};

  /** @type {!Object} */
  var headerParams = angular.extend({}, this.defaultHeaders_);
  if (opt_post !== undefined) {
    queryParameters['post'] = opt_post;
  }

  if (opt_apply !== undefined) {
    queryParameters['apply'] = opt_apply;
  }

  if (opt_delete !== undefined) {
    queryParameters['delete'] = opt_delete;
  }

  if (opt_action !== undefined) {
    queryParameters['action'] = opt_action;
  }

  if (opt_location !== undefined) {
    queryParameters['$location'] = opt_location;
  }

  if (opt_propertylist !== undefined) {
    queryParameters['propertylist'] = opt_propertylist;
  }

  if (opt_rasterAnnotation !== undefined) {
    queryParameters['raster.annotation'] = opt_rasterAnnotation;
  }

  /** @type {!Object} */
  var httpRequestParams = {
    method: 'POST',
    url: path,
    json: true,
            params: queryParameters,
    headers: headerParams
  };

  if (opt_extraHttpRequestParams) {
    httpRequestParams = angular.extend(httpRequestParams, opt_extraHttpRequestParams);
  }

  return (/** @type {?} */ (this.http_))(httpRequestParams);
}

/**
 * 
 * 
 * @param {!boolean=} opt_post 
 * @param {!boolean=} opt_apply 
 * @param {!boolean=} opt_delete 
 * @param {!string=} opt_action 
 * @param {!string=} opt_location 
 * @param {!Array<!string>=} opt_propertylist 
 * @param {!number=} opt_largeFileThreshold 
 * @param {!angular.$http.Config=} opt_extraHttpRequestParams Extra HTTP parameters to send.
 * @return {!angular.$q.Promise<!API.Client.comDayCqDamHandlerStandardPsdPsdHandlerInfo>}
 */
API.Client.ConfigmgrApi.prototype.comDayCqDamHandlerStandardPsdPsdHandler = function(opt_post, opt_apply, opt_delete, opt_action, opt_location, opt_propertylist, opt_largeFileThreshold, opt_extraHttpRequestParams) {
  /** @const {string} */
  var path = this.basePath_ + '/system/console/configMgr/com.day.cq.dam.handler.standard.psd.PsdHandler';

  /** @type {!Object} */
  var queryParameters = {};

  /** @type {!Object} */
  var headerParams = angular.extend({}, this.defaultHeaders_);
  if (opt_post !== undefined) {
    queryParameters['post'] = opt_post;
  }

  if (opt_apply !== undefined) {
    queryParameters['apply'] = opt_apply;
  }

  if (opt_delete !== undefined) {
    queryParameters['delete'] = opt_delete;
  }

  if (opt_action !== undefined) {
    queryParameters['action'] = opt_action;
  }

  if (opt_location !== undefined) {
    queryParameters['$location'] = opt_location;
  }

  if (opt_propertylist !== undefined) {
    queryParameters['propertylist'] = opt_propertylist;
  }

  if (opt_largeFileThreshold !== undefined) {
    queryParameters['large_file_threshold'] = opt_largeFileThreshold;
  }

  /** @type {!Object} */
  var httpRequestParams = {
    method: 'POST',
    url: path,
    json: true,
            params: queryParameters,
    headers: headerParams
  };

  if (opt_extraHttpRequestParams) {
    httpRequestParams = angular.extend(httpRequestParams, opt_extraHttpRequestParams);
  }

  return (/** @type {?} */ (this.http_))(httpRequestParams);
}

/**
 * 
 * 
 * @param {!boolean=} opt_post 
 * @param {!boolean=} opt_apply 
 * @param {!boolean=} opt_delete 
 * @param {!string=} opt_action 
 * @param {!string=} opt_location 
 * @param {!Array<!string>=} opt_propertylist 
 * @param {!boolean=} opt_enableMultisession 
 * @param {!boolean=} opt_idsCcEnable 
 * @param {!boolean=} opt_enableRetry 
 * @param {!boolean=} opt_enableRetryScripterror 
 * @param {!string=} opt_externalizerDomainCqhost 
 * @param {!string=} opt_externalizerDomainHttp 
 * @param {!angular.$http.Config=} opt_extraHttpRequestParams Extra HTTP parameters to send.
 * @return {!angular.$q.Promise<!API.Client.comDayCqDamIdsImplIDSJobProcessorInfo>}
 */
API.Client.ConfigmgrApi.prototype.comDayCqDamIdsImplIDSJobProcessor = function(opt_post, opt_apply, opt_delete, opt_action, opt_location, opt_propertylist, opt_enableMultisession, opt_idsCcEnable, opt_enableRetry, opt_enableRetryScripterror, opt_externalizerDomainCqhost, opt_externalizerDomainHttp, opt_extraHttpRequestParams) {
  /** @const {string} */
  var path = this.basePath_ + '/system/console/configMgr/com.day.cq.dam.ids.impl.IDSJobProcessor';

  /** @type {!Object} */
  var queryParameters = {};

  /** @type {!Object} */
  var headerParams = angular.extend({}, this.defaultHeaders_);
  if (opt_post !== undefined) {
    queryParameters['post'] = opt_post;
  }

  if (opt_apply !== undefined) {
    queryParameters['apply'] = opt_apply;
  }

  if (opt_delete !== undefined) {
    queryParameters['delete'] = opt_delete;
  }

  if (opt_action !== undefined) {
    queryParameters['action'] = opt_action;
  }

  if (opt_location !== undefined) {
    queryParameters['$location'] = opt_location;
  }

  if (opt_propertylist !== undefined) {
    queryParameters['propertylist'] = opt_propertylist;
  }

  if (opt_enableMultisession !== undefined) {
    queryParameters['enable.multisession'] = opt_enableMultisession;
  }

  if (opt_idsCcEnable !== undefined) {
    queryParameters['ids.cc.enable'] = opt_idsCcEnable;
  }

  if (opt_enableRetry !== undefined) {
    queryParameters['enable.retry'] = opt_enableRetry;
  }

  if (opt_enableRetryScripterror !== undefined) {
    queryParameters['enable.retry.scripterror'] = opt_enableRetryScripterror;
  }

  if (opt_externalizerDomainCqhost !== undefined) {
    queryParameters['externalizer.domain.cqhost'] = opt_externalizerDomainCqhost;
  }

  if (opt_externalizerDomainHttp !== undefined) {
    queryParameters['externalizer.domain.http'] = opt_externalizerDomainHttp;
  }

  /** @type {!Object} */
  var httpRequestParams = {
    method: 'POST',
    url: path,
    json: true,
            params: queryParameters,
    headers: headerParams
  };

  if (opt_extraHttpRequestParams) {
    httpRequestParams = angular.extend(httpRequestParams, opt_extraHttpRequestParams);
  }

  return (/** @type {?} */ (this.http_))(httpRequestParams);
}

/**
 * 
 * 
 * @param {!boolean=} opt_post 
 * @param {!boolean=} opt_apply 
 * @param {!boolean=} opt_delete 
 * @param {!string=} opt_action 
 * @param {!string=} opt_location 
 * @param {!Array<!string>=} opt_propertylist 
 * @param {!number=} opt_maxErrorsToBlacklist 
 * @param {!number=} opt_retryIntervalToWhitelist 
 * @param {!number=} opt_connectTimeout 
 * @param {!number=} opt_socketTimeout 
 * @param {!string=} opt_processLabel 
 * @param {!number=} opt_connectionUseMax 
 * @param {!angular.$http.Config=} opt_extraHttpRequestParams Extra HTTP parameters to send.
 * @return {!angular.$q.Promise<!API.Client.comDayCqDamIdsImplIDSPoolManagerImplInfo>}
 */
API.Client.ConfigmgrApi.prototype.comDayCqDamIdsImplIDSPoolManagerImpl = function(opt_post, opt_apply, opt_delete, opt_action, opt_location, opt_propertylist, opt_maxErrorsToBlacklist, opt_retryIntervalToWhitelist, opt_connectTimeout, opt_socketTimeout, opt_processLabel, opt_connectionUseMax, opt_extraHttpRequestParams) {
  /** @const {string} */
  var path = this.basePath_ + '/system/console/configMgr/com.day.cq.dam.ids.impl.IDSPoolManagerImpl';

  /** @type {!Object} */
  var queryParameters = {};

  /** @type {!Object} */
  var headerParams = angular.extend({}, this.defaultHeaders_);
  if (opt_post !== undefined) {
    queryParameters['post'] = opt_post;
  }

  if (opt_apply !== undefined) {
    queryParameters['apply'] = opt_apply;
  }

  if (opt_delete !== undefined) {
    queryParameters['delete'] = opt_delete;
  }

  if (opt_action !== undefined) {
    queryParameters['action'] = opt_action;
  }

  if (opt_location !== undefined) {
    queryParameters['$location'] = opt_location;
  }

  if (opt_propertylist !== undefined) {
    queryParameters['propertylist'] = opt_propertylist;
  }

  if (opt_maxErrorsToBlacklist !== undefined) {
    queryParameters['max.errors.to.blacklist'] = opt_maxErrorsToBlacklist;
  }

  if (opt_retryIntervalToWhitelist !== undefined) {
    queryParameters['retry.interval.to.whitelist'] = opt_retryIntervalToWhitelist;
  }

  if (opt_connectTimeout !== undefined) {
    queryParameters['connect.timeout'] = opt_connectTimeout;
  }

  if (opt_socketTimeout !== undefined) {
    queryParameters['socket.timeout'] = opt_socketTimeout;
  }

  if (opt_processLabel !== undefined) {
    queryParameters['process.label'] = opt_processLabel;
  }

  if (opt_connectionUseMax !== undefined) {
    queryParameters['connection.use.max'] = opt_connectionUseMax;
  }

  /** @type {!Object} */
  var httpRequestParams = {
    method: 'POST',
    url: path,
    json: true,
            params: queryParameters,
    headers: headerParams
  };

  if (opt_extraHttpRequestParams) {
    httpRequestParams = angular.extend(httpRequestParams, opt_extraHttpRequestParams);
  }

  return (/** @type {?} */ (this.http_))(httpRequestParams);
}

/**
 * 
 * 
 * @param {!boolean=} opt_post 
 * @param {!boolean=} opt_apply 
 * @param {!boolean=} opt_delete 
 * @param {!string=} opt_action 
 * @param {!string=} opt_location 
 * @param {!Array<!string>=} opt_propertylist 
 * @param {!string=} opt_processLabel 
 * @param {!boolean=} opt_extractPages 
 * @param {!angular.$http.Config=} opt_extraHttpRequestParams Extra HTTP parameters to send.
 * @return {!angular.$q.Promise<!API.Client.comDayCqDamInddImplHandlerIndesignXMPHandlerInfo>}
 */
API.Client.ConfigmgrApi.prototype.comDayCqDamInddImplHandlerIndesignXMPHandler = function(opt_post, opt_apply, opt_delete, opt_action, opt_location, opt_propertylist, opt_processLabel, opt_extractPages, opt_extraHttpRequestParams) {
  /** @const {string} */
  var path = this.basePath_ + '/system/console/configMgr/com.day.cq.dam.indd.impl.handler.IndesignXMPHandler';

  /** @type {!Object} */
  var queryParameters = {};

  /** @type {!Object} */
  var headerParams = angular.extend({}, this.defaultHeaders_);
  if (opt_post !== undefined) {
    queryParameters['post'] = opt_post;
  }

  if (opt_apply !== undefined) {
    queryParameters['apply'] = opt_apply;
  }

  if (opt_delete !== undefined) {
    queryParameters['delete'] = opt_delete;
  }

  if (opt_action !== undefined) {
    queryParameters['action'] = opt_action;
  }

  if (opt_location !== undefined) {
    queryParameters['$location'] = opt_location;
  }

  if (opt_propertylist !== undefined) {
    queryParameters['propertylist'] = opt_propertylist;
  }

  if (opt_processLabel !== undefined) {
    queryParameters['process.label'] = opt_processLabel;
  }

  if (opt_extractPages !== undefined) {
    queryParameters['extract.pages'] = opt_extractPages;
  }

  /** @type {!Object} */
  var httpRequestParams = {
    method: 'POST',
    url: path,
    json: true,
            params: queryParameters,
    headers: headerParams
  };

  if (opt_extraHttpRequestParams) {
    httpRequestParams = angular.extend(httpRequestParams, opt_extraHttpRequestParams);
  }

  return (/** @type {?} */ (this.http_))(httpRequestParams);
}

/**
 * 
 * 
 * @param {!boolean=} opt_post 
 * @param {!boolean=} opt_apply 
 * @param {!boolean=} opt_delete 
 * @param {!string=} opt_action 
 * @param {!string=} opt_location 
 * @param {!Array<!string>=} opt_propertylist 
 * @param {!number=} opt_snippetcreationMaxcollections 
 * @param {!angular.$http.Config=} opt_extraHttpRequestParams Extra HTTP parameters to send.
 * @return {!angular.$q.Promise<!API.Client.comDayCqDamInddImplServletSnippetCreationServletInfo>}
 */
API.Client.ConfigmgrApi.prototype.comDayCqDamInddImplServletSnippetCreationServlet = function(opt_post, opt_apply, opt_delete, opt_action, opt_location, opt_propertylist, opt_snippetcreationMaxcollections, opt_extraHttpRequestParams) {
  /** @const {string} */
  var path = this.basePath_ + '/system/console/configMgr/com.day.cq.dam.indd.impl.servlet.SnippetCreationServlet';

  /** @type {!Object} */
  var queryParameters = {};

  /** @type {!Object} */
  var headerParams = angular.extend({}, this.defaultHeaders_);
  if (opt_post !== undefined) {
    queryParameters['post'] = opt_post;
  }

  if (opt_apply !== undefined) {
    queryParameters['apply'] = opt_apply;
  }

  if (opt_delete !== undefined) {
    queryParameters['delete'] = opt_delete;
  }

  if (opt_action !== undefined) {
    queryParameters['action'] = opt_action;
  }

  if (opt_location !== undefined) {
    queryParameters['$location'] = opt_location;
  }

  if (opt_propertylist !== undefined) {
    queryParameters['propertylist'] = opt_propertylist;
  }

  if (opt_snippetcreationMaxcollections !== undefined) {
    queryParameters['snippetcreation.maxcollections'] = opt_snippetcreationMaxcollections;
  }

  /** @type {!Object} */
  var httpRequestParams = {
    method: 'POST',
    url: path,
    json: true,
            params: queryParameters,
    headers: headerParams
  };

  if (opt_extraHttpRequestParams) {
    httpRequestParams = angular.extend(httpRequestParams, opt_extraHttpRequestParams);
  }

  return (/** @type {?} */ (this.http_))(httpRequestParams);
}

/**
 * 
 * 
 * @param {!boolean=} opt_post 
 * @param {!boolean=} opt_apply 
 * @param {!boolean=} opt_delete 
 * @param {!string=} opt_action 
 * @param {!string=} opt_location 
 * @param {!Array<!string>=} opt_propertylist 
 * @param {!string=} opt_processLabel 
 * @param {!string=} opt_cqDamInddPagesRegex 
 * @param {!boolean=} opt_idsJobDecoupled 
 * @param {!string=} opt_idsJobWorkflowModel 
 * @param {!angular.$http.Config=} opt_extraHttpRequestParams Extra HTTP parameters to send.
 * @return {!angular.$q.Promise<!API.Client.comDayCqDamInddProcessINDDMediaExtractProcessInfo>}
 */
API.Client.ConfigmgrApi.prototype.comDayCqDamInddProcessINDDMediaExtractProcess = function(opt_post, opt_apply, opt_delete, opt_action, opt_location, opt_propertylist, opt_processLabel, opt_cqDamInddPagesRegex, opt_idsJobDecoupled, opt_idsJobWorkflowModel, opt_extraHttpRequestParams) {
  /** @const {string} */
  var path = this.basePath_ + '/system/console/configMgr/com.day.cq.dam.indd.process.INDDMediaExtractProcess';

  /** @type {!Object} */
  var queryParameters = {};

  /** @type {!Object} */
  var headerParams = angular.extend({}, this.defaultHeaders_);
  if (opt_post !== undefined) {
    queryParameters['post'] = opt_post;
  }

  if (opt_apply !== undefined) {
    queryParameters['apply'] = opt_apply;
  }

  if (opt_delete !== undefined) {
    queryParameters['delete'] = opt_delete;
  }

  if (opt_action !== undefined) {
    queryParameters['action'] = opt_action;
  }

  if (opt_location !== undefined) {
    queryParameters['$location'] = opt_location;
  }

  if (opt_propertylist !== undefined) {
    queryParameters['propertylist'] = opt_propertylist;
  }

  if (opt_processLabel !== undefined) {
    queryParameters['process.label'] = opt_processLabel;
  }

  if (opt_cqDamInddPagesRegex !== undefined) {
    queryParameters['cq.dam.indd.pages.regex'] = opt_cqDamInddPagesRegex;
  }

  if (opt_idsJobDecoupled !== undefined) {
    queryParameters['ids.job.decoupled'] = opt_idsJobDecoupled;
  }

  if (opt_idsJobWorkflowModel !== undefined) {
    queryParameters['ids.job.workflow.model'] = opt_idsJobWorkflowModel;
  }

  /** @type {!Object} */
  var httpRequestParams = {
    method: 'POST',
    url: path,
    json: true,
            params: queryParameters,
    headers: headerParams
  };

  if (opt_extraHttpRequestParams) {
    httpRequestParams = angular.extend(httpRequestParams, opt_extraHttpRequestParams);
  }

  return (/** @type {?} */ (this.http_))(httpRequestParams);
}

/**
 * 
 * 
 * @param {!boolean=} opt_post 
 * @param {!boolean=} opt_apply 
 * @param {!boolean=} opt_delete 
 * @param {!string=} opt_action 
 * @param {!string=} opt_location 
 * @param {!Array<!string>=} opt_propertylist 
 * @param {!number=} opt_batchCommitSize 
 * @param {!angular.$http.Config=} opt_extraHttpRequestParams Extra HTTP parameters to send.
 * @return {!angular.$q.Promise<!API.Client.comDayCqDamPerformanceInternalAssetPerformanceDataHandlerImplInfo>}
 */
API.Client.ConfigmgrApi.prototype.comDayCqDamPerformanceInternalAssetPerformanceDataHandlerImpl = function(opt_post, opt_apply, opt_delete, opt_action, opt_location, opt_propertylist, opt_batchCommitSize, opt_extraHttpRequestParams) {
  /** @const {string} */
  var path = this.basePath_ + '/system/console/configMgr/com.day.cq.dam.performance.internal.AssetPerformanceDataHandlerImpl';

  /** @type {!Object} */
  var queryParameters = {};

  /** @type {!Object} */
  var headerParams = angular.extend({}, this.defaultHeaders_);
  if (opt_post !== undefined) {
    queryParameters['post'] = opt_post;
  }

  if (opt_apply !== undefined) {
    queryParameters['apply'] = opt_apply;
  }

  if (opt_delete !== undefined) {
    queryParameters['delete'] = opt_delete;
  }

  if (opt_action !== undefined) {
    queryParameters['action'] = opt_action;
  }

  if (opt_location !== undefined) {
    queryParameters['$location'] = opt_location;
  }

  if (opt_propertylist !== undefined) {
    queryParameters['propertylist'] = opt_propertylist;
  }

  if (opt_batchCommitSize !== undefined) {
    queryParameters['batch.commit.size'] = opt_batchCommitSize;
  }

  /** @type {!Object} */
  var httpRequestParams = {
    method: 'POST',
    url: path,
    json: true,
            params: queryParameters,
    headers: headerParams
  };

  if (opt_extraHttpRequestParams) {
    httpRequestParams = angular.extend(httpRequestParams, opt_extraHttpRequestParams);
  }

  return (/** @type {?} */ (this.http_))(httpRequestParams);
}

/**
 * 
 * 
 * @param {!boolean=} opt_post 
 * @param {!boolean=} opt_apply 
 * @param {!boolean=} opt_delete 
 * @param {!string=} opt_action 
 * @param {!string=} opt_location 
 * @param {!Array<!string>=} opt_propertylist 
 * @param {!string=} opt_schedulerExpression 
 * @param {!angular.$http.Config=} opt_extraHttpRequestParams Extra HTTP parameters to send.
 * @return {!angular.$q.Promise<!API.Client.comDayCqDamPerformanceInternalAssetPerformanceReportSyncJobInfo>}
 */
API.Client.ConfigmgrApi.prototype.comDayCqDamPerformanceInternalAssetPerformanceReportSyncJob = function(opt_post, opt_apply, opt_delete, opt_action, opt_location, opt_propertylist, opt_schedulerExpression, opt_extraHttpRequestParams) {
  /** @const {string} */
  var path = this.basePath_ + '/system/console/configMgr/com.day.cq.dam.performance.internal.AssetPerformanceReportSyncJob';

  /** @type {!Object} */
  var queryParameters = {};

  /** @type {!Object} */
  var headerParams = angular.extend({}, this.defaultHeaders_);
  if (opt_post !== undefined) {
    queryParameters['post'] = opt_post;
  }

  if (opt_apply !== undefined) {
    queryParameters['apply'] = opt_apply;
  }

  if (opt_delete !== undefined) {
    queryParameters['delete'] = opt_delete;
  }

  if (opt_action !== undefined) {
    queryParameters['action'] = opt_action;
  }

  if (opt_location !== undefined) {
    queryParameters['$location'] = opt_location;
  }

  if (opt_propertylist !== undefined) {
    queryParameters['propertylist'] = opt_propertylist;
  }

  if (opt_schedulerExpression !== undefined) {
    queryParameters['scheduler.expression'] = opt_schedulerExpression;
  }

  /** @type {!Object} */
  var httpRequestParams = {
    method: 'POST',
    url: path,
    json: true,
            params: queryParameters,
    headers: headerParams
  };

  if (opt_extraHttpRequestParams) {
    httpRequestParams = angular.extend(httpRequestParams, opt_extraHttpRequestParams);
  }

  return (/** @type {?} */ (this.http_))(httpRequestParams);
}

/**
 * 
 * 
 * @param {!boolean=} opt_post 
 * @param {!boolean=} opt_apply 
 * @param {!boolean=} opt_delete 
 * @param {!string=} opt_action 
 * @param {!string=} opt_location 
 * @param {!Array<!string>=} opt_propertylist 
 * @param {!boolean=} opt_deleteZipFile 
 * @param {!angular.$http.Config=} opt_extraHttpRequestParams Extra HTTP parameters to send.
 * @return {!angular.$q.Promise<!API.Client.comDayCqDamPimImplSourcingUploadProcessProductAssetsUploadProInfo>}
 */
API.Client.ConfigmgrApi.prototype.comDayCqDamPimImplSourcingUploadProcessProductAssetsUploadPro = function(opt_post, opt_apply, opt_delete, opt_action, opt_location, opt_propertylist, opt_deleteZipFile, opt_extraHttpRequestParams) {
  /** @const {string} */
  var path = this.basePath_ + '/system/console/configMgr/com.day.cq.dam.pim.impl.sourcing.upload.process.ProductAssetsUploadProcess';

  /** @type {!Object} */
  var queryParameters = {};

  /** @type {!Object} */
  var headerParams = angular.extend({}, this.defaultHeaders_);
  if (opt_post !== undefined) {
    queryParameters['post'] = opt_post;
  }

  if (opt_apply !== undefined) {
    queryParameters['apply'] = opt_apply;
  }

  if (opt_delete !== undefined) {
    queryParameters['delete'] = opt_delete;
  }

  if (opt_action !== undefined) {
    queryParameters['action'] = opt_action;
  }

  if (opt_location !== undefined) {
    queryParameters['$location'] = opt_location;
  }

  if (opt_propertylist !== undefined) {
    queryParameters['propertylist'] = opt_propertylist;
  }

  if (opt_deleteZipFile !== undefined) {
    queryParameters['delete.zip.file'] = opt_deleteZipFile;
  }

  /** @type {!Object} */
  var httpRequestParams = {
    method: 'POST',
    url: path,
    json: true,
            params: queryParameters,
    headers: headerParams
  };

  if (opt_extraHttpRequestParams) {
    httpRequestParams = angular.extend(httpRequestParams, opt_extraHttpRequestParams);
  }

  return (/** @type {?} */ (this.http_))(httpRequestParams);
}

/**
 * 
 * 
 * @param {!boolean=} opt_post 
 * @param {!boolean=} opt_apply 
 * @param {!boolean=} opt_delete 
 * @param {!string=} opt_action 
 * @param {!string=} opt_location 
 * @param {!Array<!string>=} opt_propertylist 
 * @param {!boolean=} opt_cqDamS7damDynamicmediaconfigeventlistenerEnabled 
 * @param {!angular.$http.Config=} opt_extraHttpRequestParams Extra HTTP parameters to send.
 * @return {!angular.$q.Promise<!API.Client.comDayCqDamS7damCommonAnalyticsImplS7damDynamicMediaConfigEvenInfo>}
 */
API.Client.ConfigmgrApi.prototype.comDayCqDamS7damCommonAnalyticsImplS7damDynamicMediaConfigEven = function(opt_post, opt_apply, opt_delete, opt_action, opt_location, opt_propertylist, opt_cqDamS7damDynamicmediaconfigeventlistenerEnabled, opt_extraHttpRequestParams) {
  /** @const {string} */
  var path = this.basePath_ + '/system/console/configMgr/com.day.cq.dam.s7dam.common.analytics.impl.S7damDynamicMediaConfigEventListener';

  /** @type {!Object} */
  var queryParameters = {};

  /** @type {!Object} */
  var headerParams = angular.extend({}, this.defaultHeaders_);
  if (opt_post !== undefined) {
    queryParameters['post'] = opt_post;
  }

  if (opt_apply !== undefined) {
    queryParameters['apply'] = opt_apply;
  }

  if (opt_delete !== undefined) {
    queryParameters['delete'] = opt_delete;
  }

  if (opt_action !== undefined) {
    queryParameters['action'] = opt_action;
  }

  if (opt_location !== undefined) {
    queryParameters['$location'] = opt_location;
  }

  if (opt_propertylist !== undefined) {
    queryParameters['propertylist'] = opt_propertylist;
  }

  if (opt_cqDamS7damDynamicmediaconfigeventlistenerEnabled !== undefined) {
    queryParameters['cq.dam.s7dam.dynamicmediaconfigeventlistener.enabled'] = opt_cqDamS7damDynamicmediaconfigeventlistenerEnabled;
  }

  /** @type {!Object} */
  var httpRequestParams = {
    method: 'POST',
    url: path,
    json: true,
            params: queryParameters,
    headers: headerParams
  };

  if (opt_extraHttpRequestParams) {
    httpRequestParams = angular.extend(httpRequestParams, opt_extraHttpRequestParams);
  }

  return (/** @type {?} */ (this.http_))(httpRequestParams);
}

/**
 * 
 * 
 * @param {!boolean=} opt_post 
 * @param {!boolean=} opt_apply 
 * @param {!boolean=} opt_delete 
 * @param {!string=} opt_action 
 * @param {!string=} opt_location 
 * @param {!Array<!string>=} opt_propertylist 
 * @param {!string=} opt_schedulerExpression 
 * @param {!boolean=} opt_schedulerConcurrent 
 * @param {!angular.$http.Config=} opt_extraHttpRequestParams Extra HTTP parameters to send.
 * @return {!angular.$q.Promise<!API.Client.comDayCqDamS7damCommonAnalyticsImplSiteCatalystReportRunnerInfo>}
 */
API.Client.ConfigmgrApi.prototype.comDayCqDamS7damCommonAnalyticsImplSiteCatalystReportRunner = function(opt_post, opt_apply, opt_delete, opt_action, opt_location, opt_propertylist, opt_schedulerExpression, opt_schedulerConcurrent, opt_extraHttpRequestParams) {
  /** @const {string} */
  var path = this.basePath_ + '/system/console/configMgr/com.day.cq.dam.s7dam.common.analytics.impl.SiteCatalystReportRunner';

  /** @type {!Object} */
  var queryParameters = {};

  /** @type {!Object} */
  var headerParams = angular.extend({}, this.defaultHeaders_);
  if (opt_post !== undefined) {
    queryParameters['post'] = opt_post;
  }

  if (opt_apply !== undefined) {
    queryParameters['apply'] = opt_apply;
  }

  if (opt_delete !== undefined) {
    queryParameters['delete'] = opt_delete;
  }

  if (opt_action !== undefined) {
    queryParameters['action'] = opt_action;
  }

  if (opt_location !== undefined) {
    queryParameters['$location'] = opt_location;
  }

  if (opt_propertylist !== undefined) {
    queryParameters['propertylist'] = opt_propertylist;
  }

  if (opt_schedulerExpression !== undefined) {
    queryParameters['scheduler.expression'] = opt_schedulerExpression;
  }

  if (opt_schedulerConcurrent !== undefined) {
    queryParameters['scheduler.concurrent'] = opt_schedulerConcurrent;
  }

  /** @type {!Object} */
  var httpRequestParams = {
    method: 'POST',
    url: path,
    json: true,
            params: queryParameters,
    headers: headerParams
  };

  if (opt_extraHttpRequestParams) {
    httpRequestParams = angular.extend(httpRequestParams, opt_extraHttpRequestParams);
  }

  return (/** @type {?} */ (this.http_))(httpRequestParams);
}

/**
 * 
 * 
 * @param {!boolean=} opt_post 
 * @param {!boolean=} opt_apply 
 * @param {!boolean=} opt_delete 
 * @param {!string=} opt_action 
 * @param {!string=} opt_location 
 * @param {!Array<!string>=} opt_propertylist 
 * @param {!string=} opt_slingPostOperation 
 * @param {!string=} opt_slingServletMethods 
 * @param {!angular.$http.Config=} opt_extraHttpRequestParams Extra HTTP parameters to send.
 * @return {!angular.$q.Promise<!API.Client.comDayCqDamS7damCommonPostServletsSetCreateHandlerInfo>}
 */
API.Client.ConfigmgrApi.prototype.comDayCqDamS7damCommonPostServletsSetCreateHandler = function(opt_post, opt_apply, opt_delete, opt_action, opt_location, opt_propertylist, opt_slingPostOperation, opt_slingServletMethods, opt_extraHttpRequestParams) {
  /** @const {string} */
  var path = this.basePath_ + '/system/console/configMgr/com.day.cq.dam.s7dam.common.post.servlets.SetCreateHandler';

  /** @type {!Object} */
  var queryParameters = {};

  /** @type {!Object} */
  var headerParams = angular.extend({}, this.defaultHeaders_);
  if (opt_post !== undefined) {
    queryParameters['post'] = opt_post;
  }

  if (opt_apply !== undefined) {
    queryParameters['apply'] = opt_apply;
  }

  if (opt_delete !== undefined) {
    queryParameters['delete'] = opt_delete;
  }

  if (opt_action !== undefined) {
    queryParameters['action'] = opt_action;
  }

  if (opt_location !== undefined) {
    queryParameters['$location'] = opt_location;
  }

  if (opt_propertylist !== undefined) {
    queryParameters['propertylist'] = opt_propertylist;
  }

  if (opt_slingPostOperation !== undefined) {
    queryParameters['sling.post.operation'] = opt_slingPostOperation;
  }

  if (opt_slingServletMethods !== undefined) {
    queryParameters['sling.servlet.methods'] = opt_slingServletMethods;
  }

  /** @type {!Object} */
  var httpRequestParams = {
    method: 'POST',
    url: path,
    json: true,
            params: queryParameters,
    headers: headerParams
  };

  if (opt_extraHttpRequestParams) {
    httpRequestParams = angular.extend(httpRequestParams, opt_extraHttpRequestParams);
  }

  return (/** @type {?} */ (this.http_))(httpRequestParams);
}

/**
 * 
 * 
 * @param {!boolean=} opt_post 
 * @param {!boolean=} opt_apply 
 * @param {!boolean=} opt_delete 
 * @param {!string=} opt_action 
 * @param {!string=} opt_location 
 * @param {!Array<!string>=} opt_propertylist 
 * @param {!string=} opt_slingPostOperation 
 * @param {!string=} opt_slingServletMethods 
 * @param {!angular.$http.Config=} opt_extraHttpRequestParams Extra HTTP parameters to send.
 * @return {!angular.$q.Promise<!API.Client.comDayCqDamS7damCommonPostServletsSetModifyHandlerInfo>}
 */
API.Client.ConfigmgrApi.prototype.comDayCqDamS7damCommonPostServletsSetModifyHandler = function(opt_post, opt_apply, opt_delete, opt_action, opt_location, opt_propertylist, opt_slingPostOperation, opt_slingServletMethods, opt_extraHttpRequestParams) {
  /** @const {string} */
  var path = this.basePath_ + '/system/console/configMgr/com.day.cq.dam.s7dam.common.post.servlets.SetModifyHandler';

  /** @type {!Object} */
  var queryParameters = {};

  /** @type {!Object} */
  var headerParams = angular.extend({}, this.defaultHeaders_);
  if (opt_post !== undefined) {
    queryParameters['post'] = opt_post;
  }

  if (opt_apply !== undefined) {
    queryParameters['apply'] = opt_apply;
  }

  if (opt_delete !== undefined) {
    queryParameters['delete'] = opt_delete;
  }

  if (opt_action !== undefined) {
    queryParameters['action'] = opt_action;
  }

  if (opt_location !== undefined) {
    queryParameters['$location'] = opt_location;
  }

  if (opt_propertylist !== undefined) {
    queryParameters['propertylist'] = opt_propertylist;
  }

  if (opt_slingPostOperation !== undefined) {
    queryParameters['sling.post.operation'] = opt_slingPostOperation;
  }

  if (opt_slingServletMethods !== undefined) {
    queryParameters['sling.servlet.methods'] = opt_slingServletMethods;
  }

  /** @type {!Object} */
  var httpRequestParams = {
    method: 'POST',
    url: path,
    json: true,
            params: queryParameters,
    headers: headerParams
  };

  if (opt_extraHttpRequestParams) {
    httpRequestParams = angular.extend(httpRequestParams, opt_extraHttpRequestParams);
  }

  return (/** @type {?} */ (this.http_))(httpRequestParams);
}

/**
 * 
 * 
 * @param {!boolean=} opt_post 
 * @param {!boolean=} opt_apply 
 * @param {!boolean=} opt_delete 
 * @param {!string=} opt_action 
 * @param {!string=} opt_location 
 * @param {!Array<!string>=} opt_propertylist 
 * @param {!string=} opt_processLabel 
 * @param {!angular.$http.Config=} opt_extraHttpRequestParams Extra HTTP parameters to send.
 * @return {!angular.$q.Promise<!API.Client.comDayCqDamS7damCommonProcessVideoThumbnailDownloadProcessInfo>}
 */
API.Client.ConfigmgrApi.prototype.comDayCqDamS7damCommonProcessVideoThumbnailDownloadProcess = function(opt_post, opt_apply, opt_delete, opt_action, opt_location, opt_propertylist, opt_processLabel, opt_extraHttpRequestParams) {
  /** @const {string} */
  var path = this.basePath_ + '/system/console/configMgr/com.day.cq.dam.s7dam.common.process.VideoThumbnailDownloadProcess';

  /** @type {!Object} */
  var queryParameters = {};

  /** @type {!Object} */
  var headerParams = angular.extend({}, this.defaultHeaders_);
  if (opt_post !== undefined) {
    queryParameters['post'] = opt_post;
  }

  if (opt_apply !== undefined) {
    queryParameters['apply'] = opt_apply;
  }

  if (opt_delete !== undefined) {
    queryParameters['delete'] = opt_delete;
  }

  if (opt_action !== undefined) {
    queryParameters['action'] = opt_action;
  }

  if (opt_location !== undefined) {
    queryParameters['$location'] = opt_location;
  }

  if (opt_propertylist !== undefined) {
    queryParameters['propertylist'] = opt_propertylist;
  }

  if (opt_processLabel !== undefined) {
    queryParameters['process.label'] = opt_processLabel;
  }

  /** @type {!Object} */
  var httpRequestParams = {
    method: 'POST',
    url: path,
    json: true,
            params: queryParameters,
    headers: headerParams
  };

  if (opt_extraHttpRequestParams) {
    httpRequestParams = angular.extend(httpRequestParams, opt_extraHttpRequestParams);
  }

  return (/** @type {?} */ (this.http_))(httpRequestParams);
}

/**
 * 
 * 
 * @param {!boolean=} opt_post 
 * @param {!boolean=} opt_apply 
 * @param {!boolean=} opt_delete 
 * @param {!string=} opt_action 
 * @param {!string=} opt_location 
 * @param {!Array<!string>=} opt_propertylist 
 * @param {!boolean=} opt_cqDamS7damDamchangeeventlistenerEnabled 
 * @param {!angular.$http.Config=} opt_extraHttpRequestParams Extra HTTP parameters to send.
 * @return {!angular.$q.Promise<!API.Client.comDayCqDamS7damCommonS7damDamChangeEventListenerInfo>}
 */
API.Client.ConfigmgrApi.prototype.comDayCqDamS7damCommonS7damDamChangeEventListener = function(opt_post, opt_apply, opt_delete, opt_action, opt_location, opt_propertylist, opt_cqDamS7damDamchangeeventlistenerEnabled, opt_extraHttpRequestParams) {
  /** @const {string} */
  var path = this.basePath_ + '/system/console/configMgr/com.day.cq.dam.s7dam.common.S7damDamChangeEventListener';

  /** @type {!Object} */
  var queryParameters = {};

  /** @type {!Object} */
  var headerParams = angular.extend({}, this.defaultHeaders_);
  if (opt_post !== undefined) {
    queryParameters['post'] = opt_post;
  }

  if (opt_apply !== undefined) {
    queryParameters['apply'] = opt_apply;
  }

  if (opt_delete !== undefined) {
    queryParameters['delete'] = opt_delete;
  }

  if (opt_action !== undefined) {
    queryParameters['action'] = opt_action;
  }

  if (opt_location !== undefined) {
    queryParameters['$location'] = opt_location;
  }

  if (opt_propertylist !== undefined) {
    queryParameters['propertylist'] = opt_propertylist;
  }

  if (opt_cqDamS7damDamchangeeventlistenerEnabled !== undefined) {
    queryParameters['cq.dam.s7dam.damchangeeventlistener.enabled'] = opt_cqDamS7damDamchangeeventlistenerEnabled;
  }

  /** @type {!Object} */
  var httpRequestParams = {
    method: 'POST',
    url: path,
    json: true,
            params: queryParameters,
    headers: headerParams
  };

  if (opt_extraHttpRequestParams) {
    httpRequestParams = angular.extend(httpRequestParams, opt_extraHttpRequestParams);
  }

  return (/** @type {?} */ (this.http_))(httpRequestParams);
}

/**
 * 
 * 
 * @param {!boolean=} opt_post 
 * @param {!boolean=} opt_apply 
 * @param {!boolean=} opt_delete 
 * @param {!string=} opt_action 
 * @param {!string=} opt_location 
 * @param {!Array<!string>=} opt_propertylist 
 * @param {!string=} opt_slingServletPaths 
 * @param {!string=} opt_slingServletMethods 
 * @param {!angular.$http.Config=} opt_extraHttpRequestParams Extra HTTP parameters to send.
 * @return {!angular.$q.Promise<!API.Client.comDayCqDamS7damCommonServletsS7damProductInfoServletInfo>}
 */
API.Client.ConfigmgrApi.prototype.comDayCqDamS7damCommonServletsS7damProductInfoServlet = function(opt_post, opt_apply, opt_delete, opt_action, opt_location, opt_propertylist, opt_slingServletPaths, opt_slingServletMethods, opt_extraHttpRequestParams) {
  /** @const {string} */
  var path = this.basePath_ + '/system/console/configMgr/com.day.cq.dam.s7dam.common.servlets.S7damProductInfoServlet';

  /** @type {!Object} */
  var queryParameters = {};

  /** @type {!Object} */
  var headerParams = angular.extend({}, this.defaultHeaders_);
  if (opt_post !== undefined) {
    queryParameters['post'] = opt_post;
  }

  if (opt_apply !== undefined) {
    queryParameters['apply'] = opt_apply;
  }

  if (opt_delete !== undefined) {
    queryParameters['delete'] = opt_delete;
  }

  if (opt_action !== undefined) {
    queryParameters['action'] = opt_action;
  }

  if (opt_location !== undefined) {
    queryParameters['$location'] = opt_location;
  }

  if (opt_propertylist !== undefined) {
    queryParameters['propertylist'] = opt_propertylist;
  }

  if (opt_slingServletPaths !== undefined) {
    queryParameters['sling.servlet.paths'] = opt_slingServletPaths;
  }

  if (opt_slingServletMethods !== undefined) {
    queryParameters['sling.servlet.methods'] = opt_slingServletMethods;
  }

  /** @type {!Object} */
  var httpRequestParams = {
    method: 'POST',
    url: path,
    json: true,
            params: queryParameters,
    headers: headerParams
  };

  if (opt_extraHttpRequestParams) {
    httpRequestParams = angular.extend(httpRequestParams, opt_extraHttpRequestParams);
  }

  return (/** @type {?} */ (this.http_))(httpRequestParams);
}

/**
 * 
 * 
 * @param {!boolean=} opt_post 
 * @param {!boolean=} opt_apply 
 * @param {!boolean=} opt_delete 
 * @param {!string=} opt_action 
 * @param {!string=} opt_location 
 * @param {!Array<!string>=} opt_propertylist 
 * @param {!number=} opt_cqDamS7damVideoproxyclientserviceMultipartuploadMinsizeName 
 * @param {!number=} opt_cqDamS7damVideoproxyclientserviceMultipartuploadPartsizeName 
 * @param {!number=} opt_cqDamS7damVideoproxyclientserviceMultipartuploadNumthreadName 
 * @param {!number=} opt_cqDamS7damVideoproxyclientserviceHttpReadtimeoutName 
 * @param {!number=} opt_cqDamS7damVideoproxyclientserviceHttpConnectiontimeoutName 
 * @param {!number=} opt_cqDamS7damVideoproxyclientserviceHttpMaxretrycountName 
 * @param {!number=} opt_cqDamS7damVideoproxyclientserviceUploadprogressIntervalName 
 * @param {!angular.$http.Config=} opt_extraHttpRequestParams Extra HTTP parameters to send.
 * @return {!angular.$q.Promise<!API.Client.comDayCqDamS7damCommonVideoImplVideoProxyClientServiceImplInfo>}
 */
API.Client.ConfigmgrApi.prototype.comDayCqDamS7damCommonVideoImplVideoProxyClientServiceImpl = function(opt_post, opt_apply, opt_delete, opt_action, opt_location, opt_propertylist, opt_cqDamS7damVideoproxyclientserviceMultipartuploadMinsizeName, opt_cqDamS7damVideoproxyclientserviceMultipartuploadPartsizeName, opt_cqDamS7damVideoproxyclientserviceMultipartuploadNumthreadName, opt_cqDamS7damVideoproxyclientserviceHttpReadtimeoutName, opt_cqDamS7damVideoproxyclientserviceHttpConnectiontimeoutName, opt_cqDamS7damVideoproxyclientserviceHttpMaxretrycountName, opt_cqDamS7damVideoproxyclientserviceUploadprogressIntervalName, opt_extraHttpRequestParams) {
  /** @const {string} */
  var path = this.basePath_ + '/system/console/configMgr/com.day.cq.dam.s7dam.common.video.impl.VideoProxyClientServiceImpl';

  /** @type {!Object} */
  var queryParameters = {};

  /** @type {!Object} */
  var headerParams = angular.extend({}, this.defaultHeaders_);
  if (opt_post !== undefined) {
    queryParameters['post'] = opt_post;
  }

  if (opt_apply !== undefined) {
    queryParameters['apply'] = opt_apply;
  }

  if (opt_delete !== undefined) {
    queryParameters['delete'] = opt_delete;
  }

  if (opt_action !== undefined) {
    queryParameters['action'] = opt_action;
  }

  if (opt_location !== undefined) {
    queryParameters['$location'] = opt_location;
  }

  if (opt_propertylist !== undefined) {
    queryParameters['propertylist'] = opt_propertylist;
  }

  if (opt_cqDamS7damVideoproxyclientserviceMultipartuploadMinsizeName !== undefined) {
    queryParameters['cq.dam.s7dam.videoproxyclientservice.multipartupload.minsize.name'] = opt_cqDamS7damVideoproxyclientserviceMultipartuploadMinsizeName;
  }

  if (opt_cqDamS7damVideoproxyclientserviceMultipartuploadPartsizeName !== undefined) {
    queryParameters['cq.dam.s7dam.videoproxyclientservice.multipartupload.partsize.name'] = opt_cqDamS7damVideoproxyclientserviceMultipartuploadPartsizeName;
  }

  if (opt_cqDamS7damVideoproxyclientserviceMultipartuploadNumthreadName !== undefined) {
    queryParameters['cq.dam.s7dam.videoproxyclientservice.multipartupload.numthread.name'] = opt_cqDamS7damVideoproxyclientserviceMultipartuploadNumthreadName;
  }

  if (opt_cqDamS7damVideoproxyclientserviceHttpReadtimeoutName !== undefined) {
    queryParameters['cq.dam.s7dam.videoproxyclientservice.http.readtimeout.name'] = opt_cqDamS7damVideoproxyclientserviceHttpReadtimeoutName;
  }

  if (opt_cqDamS7damVideoproxyclientserviceHttpConnectiontimeoutName !== undefined) {
    queryParameters['cq.dam.s7dam.videoproxyclientservice.http.connectiontimeout.name'] = opt_cqDamS7damVideoproxyclientserviceHttpConnectiontimeoutName;
  }

  if (opt_cqDamS7damVideoproxyclientserviceHttpMaxretrycountName !== undefined) {
    queryParameters['cq.dam.s7dam.videoproxyclientservice.http.maxretrycount.name'] = opt_cqDamS7damVideoproxyclientserviceHttpMaxretrycountName;
  }

  if (opt_cqDamS7damVideoproxyclientserviceUploadprogressIntervalName !== undefined) {
    queryParameters['cq.dam.s7dam.videoproxyclientservice.uploadprogress.interval.name'] = opt_cqDamS7damVideoproxyclientserviceUploadprogressIntervalName;
  }

  /** @type {!Object} */
  var httpRequestParams = {
    method: 'POST',
    url: path,
    json: true,
            params: queryParameters,
    headers: headerParams
  };

  if (opt_extraHttpRequestParams) {
    httpRequestParams = angular.extend(httpRequestParams, opt_extraHttpRequestParams);
  }

  return (/** @type {?} */ (this.http_))(httpRequestParams);
}

/**
 * 
 * 
 * @param {!boolean=} opt_post 
 * @param {!boolean=} opt_apply 
 * @param {!boolean=} opt_delete 
 * @param {!string=} opt_action 
 * @param {!string=} opt_location 
 * @param {!Array<!string>=} opt_propertylist 
 * @param {!number=} opt_cqDamScene7ApiclientRecordsperpageNofilterName 
 * @param {!number=} opt_cqDamScene7ApiclientRecordsperpageWithfilterName 
 * @param {!angular.$http.Config=} opt_extraHttpRequestParams Extra HTTP parameters to send.
 * @return {!angular.$q.Promise<!API.Client.comDayCqDamScene7ImplScene7APIClientImplInfo>}
 */
API.Client.ConfigmgrApi.prototype.comDayCqDamScene7ImplScene7APIClientImpl = function(opt_post, opt_apply, opt_delete, opt_action, opt_location, opt_propertylist, opt_cqDamScene7ApiclientRecordsperpageNofilterName, opt_cqDamScene7ApiclientRecordsperpageWithfilterName, opt_extraHttpRequestParams) {
  /** @const {string} */
  var path = this.basePath_ + '/system/console/configMgr/com.day.cq.dam.scene7.impl.Scene7APIClientImpl';

  /** @type {!Object} */
  var queryParameters = {};

  /** @type {!Object} */
  var headerParams = angular.extend({}, this.defaultHeaders_);
  if (opt_post !== undefined) {
    queryParameters['post'] = opt_post;
  }

  if (opt_apply !== undefined) {
    queryParameters['apply'] = opt_apply;
  }

  if (opt_delete !== undefined) {
    queryParameters['delete'] = opt_delete;
  }

  if (opt_action !== undefined) {
    queryParameters['action'] = opt_action;
  }

  if (opt_location !== undefined) {
    queryParameters['$location'] = opt_location;
  }

  if (opt_propertylist !== undefined) {
    queryParameters['propertylist'] = opt_propertylist;
  }

  if (opt_cqDamScene7ApiclientRecordsperpageNofilterName !== undefined) {
    queryParameters['cq.dam.scene7.apiclient.recordsperpage.nofilter.name'] = opt_cqDamScene7ApiclientRecordsperpageNofilterName;
  }

  if (opt_cqDamScene7ApiclientRecordsperpageWithfilterName !== undefined) {
    queryParameters['cq.dam.scene7.apiclient.recordsperpage.withfilter.name'] = opt_cqDamScene7ApiclientRecordsperpageWithfilterName;
  }

  /** @type {!Object} */
  var httpRequestParams = {
    method: 'POST',
    url: path,
    json: true,
            params: queryParameters,
    headers: headerParams
  };

  if (opt_extraHttpRequestParams) {
    httpRequestParams = angular.extend(httpRequestParams, opt_extraHttpRequestParams);
  }

  return (/** @type {?} */ (this.http_))(httpRequestParams);
}

/**
 * 
 * 
 * @param {!boolean=} opt_post 
 * @param {!boolean=} opt_apply 
 * @param {!boolean=} opt_delete 
 * @param {!string=} opt_action 
 * @param {!string=} opt_location 
 * @param {!Array<!string>=} opt_propertylist 
 * @param {!Array<!string>=} opt_cqDamScene7AssetmimetypeserviceMapping 
 * @param {!angular.$http.Config=} opt_extraHttpRequestParams Extra HTTP parameters to send.
 * @return {!angular.$q.Promise<!API.Client.comDayCqDamScene7ImplScene7AssetMimeTypeServiceImplInfo>}
 */
API.Client.ConfigmgrApi.prototype.comDayCqDamScene7ImplScene7AssetMimeTypeServiceImpl = function(opt_post, opt_apply, opt_delete, opt_action, opt_location, opt_propertylist, opt_cqDamScene7AssetmimetypeserviceMapping, opt_extraHttpRequestParams) {
  /** @const {string} */
  var path = this.basePath_ + '/system/console/configMgr/com.day.cq.dam.scene7.impl.Scene7AssetMimeTypeServiceImpl';

  /** @type {!Object} */
  var queryParameters = {};

  /** @type {!Object} */
  var headerParams = angular.extend({}, this.defaultHeaders_);
  if (opt_post !== undefined) {
    queryParameters['post'] = opt_post;
  }

  if (opt_apply !== undefined) {
    queryParameters['apply'] = opt_apply;
  }

  if (opt_delete !== undefined) {
    queryParameters['delete'] = opt_delete;
  }

  if (opt_action !== undefined) {
    queryParameters['action'] = opt_action;
  }

  if (opt_location !== undefined) {
    queryParameters['$location'] = opt_location;
  }

  if (opt_propertylist !== undefined) {
    queryParameters['propertylist'] = opt_propertylist;
  }

  if (opt_cqDamScene7AssetmimetypeserviceMapping !== undefined) {
    queryParameters['cq.dam.scene7.assetmimetypeservice.mapping'] = opt_cqDamScene7AssetmimetypeserviceMapping;
  }

  /** @type {!Object} */
  var httpRequestParams = {
    method: 'POST',
    url: path,
    json: true,
            params: queryParameters,
    headers: headerParams
  };

  if (opt_extraHttpRequestParams) {
    httpRequestParams = angular.extend(httpRequestParams, opt_extraHttpRequestParams);
  }

  return (/** @type {?} */ (this.http_))(httpRequestParams);
}

/**
 * 
 * 
 * @param {!boolean=} opt_post 
 * @param {!boolean=} opt_apply 
 * @param {!boolean=} opt_delete 
 * @param {!string=} opt_action 
 * @param {!string=} opt_location 
 * @param {!Array<!string>=} opt_propertylist 
 * @param {!boolean=} opt_cqDamScene7ConfigurationeventlistenerEnabled 
 * @param {!angular.$http.Config=} opt_extraHttpRequestParams Extra HTTP parameters to send.
 * @return {!angular.$q.Promise<!API.Client.comDayCqDamScene7ImplScene7ConfigurationEventListenerInfo>}
 */
API.Client.ConfigmgrApi.prototype.comDayCqDamScene7ImplScene7ConfigurationEventListener = function(opt_post, opt_apply, opt_delete, opt_action, opt_location, opt_propertylist, opt_cqDamScene7ConfigurationeventlistenerEnabled, opt_extraHttpRequestParams) {
  /** @const {string} */
  var path = this.basePath_ + '/system/console/configMgr/com.day.cq.dam.scene7.impl.Scene7ConfigurationEventListener';

  /** @type {!Object} */
  var queryParameters = {};

  /** @type {!Object} */
  var headerParams = angular.extend({}, this.defaultHeaders_);
  if (opt_post !== undefined) {
    queryParameters['post'] = opt_post;
  }

  if (opt_apply !== undefined) {
    queryParameters['apply'] = opt_apply;
  }

  if (opt_delete !== undefined) {
    queryParameters['delete'] = opt_delete;
  }

  if (opt_action !== undefined) {
    queryParameters['action'] = opt_action;
  }

  if (opt_location !== undefined) {
    queryParameters['$location'] = opt_location;
  }

  if (opt_propertylist !== undefined) {
    queryParameters['propertylist'] = opt_propertylist;
  }

  if (opt_cqDamScene7ConfigurationeventlistenerEnabled !== undefined) {
    queryParameters['cq.dam.scene7.configurationeventlistener.enabled'] = opt_cqDamScene7ConfigurationeventlistenerEnabled;
  }

  /** @type {!Object} */
  var httpRequestParams = {
    method: 'POST',
    url: path,
    json: true,
            params: queryParameters,
    headers: headerParams
  };

  if (opt_extraHttpRequestParams) {
    httpRequestParams = angular.extend(httpRequestParams, opt_extraHttpRequestParams);
  }

  return (/** @type {?} */ (this.http_))(httpRequestParams);
}

/**
 * 
 * 
 * @param {!boolean=} opt_post 
 * @param {!boolean=} opt_apply 
 * @param {!boolean=} opt_delete 
 * @param {!string=} opt_action 
 * @param {!string=} opt_location 
 * @param {!Array<!string>=} opt_propertylist 
 * @param {!boolean=} opt_cqDamScene7DamchangeeventlistenerEnabled 
 * @param {!Array<!string>=} opt_cqDamScene7DamchangeeventlistenerObservedPaths 
 * @param {!angular.$http.Config=} opt_extraHttpRequestParams Extra HTTP parameters to send.
 * @return {!angular.$q.Promise<!API.Client.comDayCqDamScene7ImplScene7DamChangeEventListenerInfo>}
 */
API.Client.ConfigmgrApi.prototype.comDayCqDamScene7ImplScene7DamChangeEventListener = function(opt_post, opt_apply, opt_delete, opt_action, opt_location, opt_propertylist, opt_cqDamScene7DamchangeeventlistenerEnabled, opt_cqDamScene7DamchangeeventlistenerObservedPaths, opt_extraHttpRequestParams) {
  /** @const {string} */
  var path = this.basePath_ + '/system/console/configMgr/com.day.cq.dam.scene7.impl.Scene7DamChangeEventListener';

  /** @type {!Object} */
  var queryParameters = {};

  /** @type {!Object} */
  var headerParams = angular.extend({}, this.defaultHeaders_);
  if (opt_post !== undefined) {
    queryParameters['post'] = opt_post;
  }

  if (opt_apply !== undefined) {
    queryParameters['apply'] = opt_apply;
  }

  if (opt_delete !== undefined) {
    queryParameters['delete'] = opt_delete;
  }

  if (opt_action !== undefined) {
    queryParameters['action'] = opt_action;
  }

  if (opt_location !== undefined) {
    queryParameters['$location'] = opt_location;
  }

  if (opt_propertylist !== undefined) {
    queryParameters['propertylist'] = opt_propertylist;
  }

  if (opt_cqDamScene7DamchangeeventlistenerEnabled !== undefined) {
    queryParameters['cq.dam.scene7.damchangeeventlistener.enabled'] = opt_cqDamScene7DamchangeeventlistenerEnabled;
  }

  if (opt_cqDamScene7DamchangeeventlistenerObservedPaths !== undefined) {
    queryParameters['cq.dam.scene7.damchangeeventlistener.observed.paths'] = opt_cqDamScene7DamchangeeventlistenerObservedPaths;
  }

  /** @type {!Object} */
  var httpRequestParams = {
    method: 'POST',
    url: path,
    json: true,
            params: queryParameters,
    headers: headerParams
  };

  if (opt_extraHttpRequestParams) {
    httpRequestParams = angular.extend(httpRequestParams, opt_extraHttpRequestParams);
  }

  return (/** @type {?} */ (this.http_))(httpRequestParams);
}

/**
 * 
 * 
 * @param {!boolean=} opt_post 
 * @param {!boolean=} opt_apply 
 * @param {!boolean=} opt_delete 
 * @param {!string=} opt_action 
 * @param {!string=} opt_location 
 * @param {!Array<!string>=} opt_propertylist 
 * @param {!string=} opt_scene7FlashTemplatesRti 
 * @param {!string=} opt_scene7FlashTemplatesRsi 
 * @param {!string=} opt_scene7FlashTemplatesRb 
 * @param {!string=} opt_scene7FlashTemplatesRurl 
 * @param {!string=} opt_scene7FlashTemplateUrlFormatParameter 
 * @param {!angular.$http.Config=} opt_extraHttpRequestParams Extra HTTP parameters to send.
 * @return {!angular.$q.Promise<!API.Client.comDayCqDamScene7ImplScene7FlashTemplatesServiceImplInfo>}
 */
API.Client.ConfigmgrApi.prototype.comDayCqDamScene7ImplScene7FlashTemplatesServiceImpl = function(opt_post, opt_apply, opt_delete, opt_action, opt_location, opt_propertylist, opt_scene7FlashTemplatesRti, opt_scene7FlashTemplatesRsi, opt_scene7FlashTemplatesRb, opt_scene7FlashTemplatesRurl, opt_scene7FlashTemplateUrlFormatParameter, opt_extraHttpRequestParams) {
  /** @const {string} */
  var path = this.basePath_ + '/system/console/configMgr/com.day.cq.dam.scene7.impl.Scene7FlashTemplatesServiceImpl';

  /** @type {!Object} */
  var queryParameters = {};

  /** @type {!Object} */
  var headerParams = angular.extend({}, this.defaultHeaders_);
  if (opt_post !== undefined) {
    queryParameters['post'] = opt_post;
  }

  if (opt_apply !== undefined) {
    queryParameters['apply'] = opt_apply;
  }

  if (opt_delete !== undefined) {
    queryParameters['delete'] = opt_delete;
  }

  if (opt_action !== undefined) {
    queryParameters['action'] = opt_action;
  }

  if (opt_location !== undefined) {
    queryParameters['$location'] = opt_location;
  }

  if (opt_propertylist !== undefined) {
    queryParameters['propertylist'] = opt_propertylist;
  }

  if (opt_scene7FlashTemplatesRti !== undefined) {
    queryParameters['scene7FlashTemplates.rti'] = opt_scene7FlashTemplatesRti;
  }

  if (opt_scene7FlashTemplatesRsi !== undefined) {
    queryParameters['scene7FlashTemplates.rsi'] = opt_scene7FlashTemplatesRsi;
  }

  if (opt_scene7FlashTemplatesRb !== undefined) {
    queryParameters['scene7FlashTemplates.rb'] = opt_scene7FlashTemplatesRb;
  }

  if (opt_scene7FlashTemplatesRurl !== undefined) {
    queryParameters['scene7FlashTemplates.rurl'] = opt_scene7FlashTemplatesRurl;
  }

  if (opt_scene7FlashTemplateUrlFormatParameter !== undefined) {
    queryParameters['scene7FlashTemplate.urlFormatParameter'] = opt_scene7FlashTemplateUrlFormatParameter;
  }

  /** @type {!Object} */
  var httpRequestParams = {
    method: 'POST',
    url: path,
    json: true,
            params: queryParameters,
    headers: headerParams
  };

  if (opt_extraHttpRequestParams) {
    httpRequestParams = angular.extend(httpRequestParams, opt_extraHttpRequestParams);
  }

  return (/** @type {?} */ (this.http_))(httpRequestParams);
}

/**
 * 
 * 
 * @param {!boolean=} opt_post 
 * @param {!boolean=} opt_apply 
 * @param {!boolean=} opt_delete 
 * @param {!string=} opt_action 
 * @param {!string=} opt_location 
 * @param {!Array<!string>=} opt_propertylist 
 * @param {!number=} opt_cqDamScene7UploadserviceActivejobtimeoutLabel 
 * @param {!number=} opt_cqDamScene7UploadserviceConnectionmaxperrouteLabel 
 * @param {!angular.$http.Config=} opt_extraHttpRequestParams Extra HTTP parameters to send.
 * @return {!angular.$q.Promise<!API.Client.comDayCqDamScene7ImplScene7UploadServiceImplInfo>}
 */
API.Client.ConfigmgrApi.prototype.comDayCqDamScene7ImplScene7UploadServiceImpl = function(opt_post, opt_apply, opt_delete, opt_action, opt_location, opt_propertylist, opt_cqDamScene7UploadserviceActivejobtimeoutLabel, opt_cqDamScene7UploadserviceConnectionmaxperrouteLabel, opt_extraHttpRequestParams) {
  /** @const {string} */
  var path = this.basePath_ + '/system/console/configMgr/com.day.cq.dam.scene7.impl.Scene7UploadServiceImpl';

  /** @type {!Object} */
  var queryParameters = {};

  /** @type {!Object} */
  var headerParams = angular.extend({}, this.defaultHeaders_);
  if (opt_post !== undefined) {
    queryParameters['post'] = opt_post;
  }

  if (opt_apply !== undefined) {
    queryParameters['apply'] = opt_apply;
  }

  if (opt_delete !== undefined) {
    queryParameters['delete'] = opt_delete;
  }

  if (opt_action !== undefined) {
    queryParameters['action'] = opt_action;
  }

  if (opt_location !== undefined) {
    queryParameters['$location'] = opt_location;
  }

  if (opt_propertylist !== undefined) {
    queryParameters['propertylist'] = opt_propertylist;
  }

  if (opt_cqDamScene7UploadserviceActivejobtimeoutLabel !== undefined) {
    queryParameters['cq.dam.scene7.uploadservice.activejobtimeout.label'] = opt_cqDamScene7UploadserviceActivejobtimeoutLabel;
  }

  if (opt_cqDamScene7UploadserviceConnectionmaxperrouteLabel !== undefined) {
    queryParameters['cq.dam.scene7.uploadservice.connectionmaxperroute.label'] = opt_cqDamScene7UploadserviceConnectionmaxperrouteLabel;
  }

  /** @type {!Object} */
  var httpRequestParams = {
    method: 'POST',
    url: path,
    json: true,
            params: queryParameters,
    headers: headerParams
  };

  if (opt_extraHttpRequestParams) {
    httpRequestParams = angular.extend(httpRequestParams, opt_extraHttpRequestParams);
  }

  return (/** @type {?} */ (this.http_))(httpRequestParams);
}

/**
 * 
 * 
 * @param {!boolean=} opt_post 
 * @param {!boolean=} opt_apply 
 * @param {!boolean=} opt_delete 
 * @param {!string=} opt_action 
 * @param {!string=} opt_location 
 * @param {!Array<!string>=} opt_propertylist 
 * @param {!string=} opt_getCacheExpirationUnit 
 * @param {!number=} opt_getCacheExpirationValue 
 * @param {!angular.$http.Config=} opt_extraHttpRequestParams Extra HTTP parameters to send.
 * @return {!angular.$q.Promise<!API.Client.comDayCqDamStockIntegrationImplCacheStockCacheConfigurationSerInfo>}
 */
API.Client.ConfigmgrApi.prototype.comDayCqDamStockIntegrationImplCacheStockCacheConfigurationSer = function(opt_post, opt_apply, opt_delete, opt_action, opt_location, opt_propertylist, opt_getCacheExpirationUnit, opt_getCacheExpirationValue, opt_extraHttpRequestParams) {
  /** @const {string} */
  var path = this.basePath_ + '/system/console/configMgr/com.day.cq.dam.stock.integration.impl.cache.StockCacheConfigurationServiceImpl';

  /** @type {!Object} */
  var queryParameters = {};

  /** @type {!Object} */
  var headerParams = angular.extend({}, this.defaultHeaders_);
  if (opt_post !== undefined) {
    queryParameters['post'] = opt_post;
  }

  if (opt_apply !== undefined) {
    queryParameters['apply'] = opt_apply;
  }

  if (opt_delete !== undefined) {
    queryParameters['delete'] = opt_delete;
  }

  if (opt_action !== undefined) {
    queryParameters['action'] = opt_action;
  }

  if (opt_location !== undefined) {
    queryParameters['$location'] = opt_location;
  }

  if (opt_propertylist !== undefined) {
    queryParameters['propertylist'] = opt_propertylist;
  }

  if (opt_getCacheExpirationUnit !== undefined) {
    queryParameters['getCacheExpirationUnit'] = opt_getCacheExpirationUnit;
  }

  if (opt_getCacheExpirationValue !== undefined) {
    queryParameters['getCacheExpirationValue'] = opt_getCacheExpirationValue;
  }

  /** @type {!Object} */
  var httpRequestParams = {
    method: 'POST',
    url: path,
    json: true,
            params: queryParameters,
    headers: headerParams
  };

  if (opt_extraHttpRequestParams) {
    httpRequestParams = angular.extend(httpRequestParams, opt_extraHttpRequestParams);
  }

  return (/** @type {?} */ (this.http_))(httpRequestParams);
}

/**
 * 
 * 
 * @param {!boolean=} opt_post 
 * @param {!boolean=} opt_apply 
 * @param {!boolean=} opt_delete 
 * @param {!string=} opt_action 
 * @param {!string=} opt_location 
 * @param {!Array<!string>=} opt_propertylist 
 * @param {!string=} opt_name 
 * @param {!string=} opt_locale 
 * @param {!string=} opt_imsConfig 
 * @param {!angular.$http.Config=} opt_extraHttpRequestParams Extra HTTP parameters to send.
 * @return {!angular.$q.Promise<!API.Client.comDayCqDamStockIntegrationImplConfigurationStockConfigurationInfo>}
 */
API.Client.ConfigmgrApi.prototype.comDayCqDamStockIntegrationImplConfigurationStockConfiguration = function(opt_post, opt_apply, opt_delete, opt_action, opt_location, opt_propertylist, opt_name, opt_locale, opt_imsConfig, opt_extraHttpRequestParams) {
  /** @const {string} */
  var path = this.basePath_ + '/system/console/configMgr/com.day.cq.dam.stock.integration.impl.configuration.StockConfigurationImpl';

  /** @type {!Object} */
  var queryParameters = {};

  /** @type {!Object} */
  var headerParams = angular.extend({}, this.defaultHeaders_);
  if (opt_post !== undefined) {
    queryParameters['post'] = opt_post;
  }

  if (opt_apply !== undefined) {
    queryParameters['apply'] = opt_apply;
  }

  if (opt_delete !== undefined) {
    queryParameters['delete'] = opt_delete;
  }

  if (opt_action !== undefined) {
    queryParameters['action'] = opt_action;
  }

  if (opt_location !== undefined) {
    queryParameters['$location'] = opt_location;
  }

  if (opt_propertylist !== undefined) {
    queryParameters['propertylist'] = opt_propertylist;
  }

  if (opt_name !== undefined) {
    queryParameters['name'] = opt_name;
  }

  if (opt_locale !== undefined) {
    queryParameters['locale'] = opt_locale;
  }

  if (opt_imsConfig !== undefined) {
    queryParameters['imsConfig'] = opt_imsConfig;
  }

  /** @type {!Object} */
  var httpRequestParams = {
    method: 'POST',
    url: path,
    json: true,
            params: queryParameters,
    headers: headerParams
  };

  if (opt_extraHttpRequestParams) {
    httpRequestParams = angular.extend(httpRequestParams, opt_extraHttpRequestParams);
  }

  return (/** @type {?} */ (this.http_))(httpRequestParams);
}

/**
 * 
 * 
 * @param {!boolean=} opt_post 
 * @param {!boolean=} opt_apply 
 * @param {!boolean=} opt_delete 
 * @param {!string=} opt_action 
 * @param {!string=} opt_location 
 * @param {!Array<!string>=} opt_propertylist 
 * @param {!boolean=} opt_enabled 
 * @param {!angular.$http.Config=} opt_extraHttpRequestParams Extra HTTP parameters to send.
 * @return {!angular.$q.Promise<!API.Client.comDayCqDamVideoImplServletVideoTestServletInfo>}
 */
API.Client.ConfigmgrApi.prototype.comDayCqDamVideoImplServletVideoTestServlet = function(opt_post, opt_apply, opt_delete, opt_action, opt_location, opt_propertylist, opt_enabled, opt_extraHttpRequestParams) {
  /** @const {string} */
  var path = this.basePath_ + '/system/console/configMgr/com.day.cq.dam.video.impl.servlet.VideoTestServlet';

  /** @type {!Object} */
  var queryParameters = {};

  /** @type {!Object} */
  var headerParams = angular.extend({}, this.defaultHeaders_);
  if (opt_post !== undefined) {
    queryParameters['post'] = opt_post;
  }

  if (opt_apply !== undefined) {
    queryParameters['apply'] = opt_apply;
  }

  if (opt_delete !== undefined) {
    queryParameters['delete'] = opt_delete;
  }

  if (opt_action !== undefined) {
    queryParameters['action'] = opt_action;
  }

  if (opt_location !== undefined) {
    queryParameters['$location'] = opt_location;
  }

  if (opt_propertylist !== undefined) {
    queryParameters['propertylist'] = opt_propertylist;
  }

  if (opt_enabled !== undefined) {
    queryParameters['enabled'] = opt_enabled;
  }

  /** @type {!Object} */
  var httpRequestParams = {
    method: 'POST',
    url: path,
    json: true,
            params: queryParameters,
    headers: headerParams
  };

  if (opt_extraHttpRequestParams) {
    httpRequestParams = angular.extend(httpRequestParams, opt_extraHttpRequestParams);
  }

  return (/** @type {?} */ (this.http_))(httpRequestParams);
}

/**
 * 
 * 
 * @param {!boolean=} opt_post 
 * @param {!boolean=} opt_apply 
 * @param {!boolean=} opt_delete 
 * @param {!string=} opt_action 
 * @param {!string=} opt_location 
 * @param {!Array<!string>=} opt_propertylist 
 * @param {!number=} opt_maxWidth 
 * @param {!number=} opt_maxHeight 
 * @param {!angular.$http.Config=} opt_extraHttpRequestParams Extra HTTP parameters to send.
 * @return {!angular.$q.Promise<!API.Client.comDayCqExtwidgetServletsImageSpriteServletInfo>}
 */
API.Client.ConfigmgrApi.prototype.comDayCqExtwidgetServletsImageSpriteServlet = function(opt_post, opt_apply, opt_delete, opt_action, opt_location, opt_propertylist, opt_maxWidth, opt_maxHeight, opt_extraHttpRequestParams) {
  /** @const {string} */
  var path = this.basePath_ + '/system/console/configMgr/com.day.cq.extwidget.servlets.ImageSpriteServlet';

  /** @type {!Object} */
  var queryParameters = {};

  /** @type {!Object} */
  var headerParams = angular.extend({}, this.defaultHeaders_);
  if (opt_post !== undefined) {
    queryParameters['post'] = opt_post;
  }

  if (opt_apply !== undefined) {
    queryParameters['apply'] = opt_apply;
  }

  if (opt_delete !== undefined) {
    queryParameters['delete'] = opt_delete;
  }

  if (opt_action !== undefined) {
    queryParameters['action'] = opt_action;
  }

  if (opt_location !== undefined) {
    queryParameters['$location'] = opt_location;
  }

  if (opt_propertylist !== undefined) {
    queryParameters['propertylist'] = opt_propertylist;
  }

  if (opt_maxWidth !== undefined) {
    queryParameters['maxWidth'] = opt_maxWidth;
  }

  if (opt_maxHeight !== undefined) {
    queryParameters['maxHeight'] = opt_maxHeight;
  }

  /** @type {!Object} */
  var httpRequestParams = {
    method: 'POST',
    url: path,
    json: true,
            params: queryParameters,
    headers: headerParams
  };

  if (opt_extraHttpRequestParams) {
    httpRequestParams = angular.extend(httpRequestParams, opt_extraHttpRequestParams);
  }

  return (/** @type {?} */ (this.http_))(httpRequestParams);
}

/**
 * 
 * 
 * @param {!boolean=} opt_post 
 * @param {!boolean=} opt_apply 
 * @param {!boolean=} opt_delete 
 * @param {!string=} opt_action 
 * @param {!string=} opt_location 
 * @param {!Array<!string>=} opt_propertylist 
 * @param {!Array<!string>=} opt_fontpath 
 * @param {!number=} opt_oversamplingFactor 
 * @param {!angular.$http.Config=} opt_extraHttpRequestParams Extra HTTP parameters to send.
 * @return {!angular.$q.Promise<!API.Client.comDayCqImageInternalFontFontHelperInfo>}
 */
API.Client.ConfigmgrApi.prototype.comDayCqImageInternalFontFontHelper = function(opt_post, opt_apply, opt_delete, opt_action, opt_location, opt_propertylist, opt_fontpath, opt_oversamplingFactor, opt_extraHttpRequestParams) {
  /** @const {string} */
  var path = this.basePath_ + '/system/console/configMgr/com.day.cq.image.internal.font.FontHelper';

  /** @type {!Object} */
  var queryParameters = {};

  /** @type {!Object} */
  var headerParams = angular.extend({}, this.defaultHeaders_);
  if (opt_post !== undefined) {
    queryParameters['post'] = opt_post;
  }

  if (opt_apply !== undefined) {
    queryParameters['apply'] = opt_apply;
  }

  if (opt_delete !== undefined) {
    queryParameters['delete'] = opt_delete;
  }

  if (opt_action !== undefined) {
    queryParameters['action'] = opt_action;
  }

  if (opt_location !== undefined) {
    queryParameters['$location'] = opt_location;
  }

  if (opt_propertylist !== undefined) {
    queryParameters['propertylist'] = opt_propertylist;
  }

  if (opt_fontpath !== undefined) {
    queryParameters['fontpath'] = opt_fontpath;
  }

  if (opt_oversamplingFactor !== undefined) {
    queryParameters['oversamplingFactor'] = opt_oversamplingFactor;
  }

  /** @type {!Object} */
  var httpRequestParams = {
    method: 'POST',
    url: path,
    json: true,
            params: queryParameters,
    headers: headerParams
  };

  if (opt_extraHttpRequestParams) {
    httpRequestParams = angular.extend(httpRequestParams, opt_extraHttpRequestParams);
  }

  return (/** @type {?} */ (this.http_))(httpRequestParams);
}

/**
 * 
 * 
 * @param {!boolean=} opt_post 
 * @param {!boolean=} opt_apply 
 * @param {!boolean=} opt_delete 
 * @param {!string=} opt_action 
 * @param {!string=} opt_location 
 * @param {!Array<!string>=} opt_propertylist 
 * @param {!boolean=} opt_clusterLevelEnable 
 * @param {!number=} opt_clusterMasterLevel 
 * @param {!number=} opt_clusterSlaveLevel 
 * @param {!angular.$http.Config=} opt_extraHttpRequestParams Extra HTTP parameters to send.
 * @return {!angular.$q.Promise<!API.Client.comDayCqJcrclustersupportClusterStartLevelControllerInfo>}
 */
API.Client.ConfigmgrApi.prototype.comDayCqJcrclustersupportClusterStartLevelController = function(opt_post, opt_apply, opt_delete, opt_action, opt_location, opt_propertylist, opt_clusterLevelEnable, opt_clusterMasterLevel, opt_clusterSlaveLevel, opt_extraHttpRequestParams) {
  /** @const {string} */
  var path = this.basePath_ + '/system/console/configMgr/com.day.cq.jcrclustersupport.ClusterStartLevelController';

  /** @type {!Object} */
  var queryParameters = {};

  /** @type {!Object} */
  var headerParams = angular.extend({}, this.defaultHeaders_);
  if (opt_post !== undefined) {
    queryParameters['post'] = opt_post;
  }

  if (opt_apply !== undefined) {
    queryParameters['apply'] = opt_apply;
  }

  if (opt_delete !== undefined) {
    queryParameters['delete'] = opt_delete;
  }

  if (opt_action !== undefined) {
    queryParameters['action'] = opt_action;
  }

  if (opt_location !== undefined) {
    queryParameters['$location'] = opt_location;
  }

  if (opt_propertylist !== undefined) {
    queryParameters['propertylist'] = opt_propertylist;
  }

  if (opt_clusterLevelEnable !== undefined) {
    queryParameters['cluster.level.enable'] = opt_clusterLevelEnable;
  }

  if (opt_clusterMasterLevel !== undefined) {
    queryParameters['cluster.master.level'] = opt_clusterMasterLevel;
  }

  if (opt_clusterSlaveLevel !== undefined) {
    queryParameters['cluster.slave.level'] = opt_clusterSlaveLevel;
  }

  /** @type {!Object} */
  var httpRequestParams = {
    method: 'POST',
    url: path,
    json: true,
            params: queryParameters,
    headers: headerParams
  };

  if (opt_extraHttpRequestParams) {
    httpRequestParams = angular.extend(httpRequestParams, opt_extraHttpRequestParams);
  }

  return (/** @type {?} */ (this.http_))(httpRequestParams);
}

/**
 * 
 * 
 * @param {!boolean=} opt_post 
 * @param {!boolean=} opt_apply 
 * @param {!boolean=} opt_delete 
 * @param {!string=} opt_action 
 * @param {!string=} opt_location 
 * @param {!Array<!string>=} opt_propertylist 
 * @param {!string=} opt_smtpHost 
 * @param {!number=} opt_smtpPort 
 * @param {!string=} opt_smtpUser 
 * @param {!string=} opt_smtpPassword 
 * @param {!string=} opt_fromAddress 
 * @param {!boolean=} opt_smtpSsl 
 * @param {!boolean=} opt_smtpStarttls 
 * @param {!boolean=} opt_debugEmail 
 * @param {!angular.$http.Config=} opt_extraHttpRequestParams Extra HTTP parameters to send.
 * @return {!angular.$q.Promise<!API.Client.comDayCqMailerDefaultMailServiceInfo>}
 */
API.Client.ConfigmgrApi.prototype.comDayCqMailerDefaultMailService = function(opt_post, opt_apply, opt_delete, opt_action, opt_location, opt_propertylist, opt_smtpHost, opt_smtpPort, opt_smtpUser, opt_smtpPassword, opt_fromAddress, opt_smtpSsl, opt_smtpStarttls, opt_debugEmail, opt_extraHttpRequestParams) {
  /** @const {string} */
  var path = this.basePath_ + '/system/console/configMgr/com.day.cq.mailer.DefaultMailService';

  /** @type {!Object} */
  var queryParameters = {};

  /** @type {!Object} */
  var headerParams = angular.extend({}, this.defaultHeaders_);
  if (opt_post !== undefined) {
    queryParameters['post'] = opt_post;
  }

  if (opt_apply !== undefined) {
    queryParameters['apply'] = opt_apply;
  }

  if (opt_delete !== undefined) {
    queryParameters['delete'] = opt_delete;
  }

  if (opt_action !== undefined) {
    queryParameters['action'] = opt_action;
  }

  if (opt_location !== undefined) {
    queryParameters['$location'] = opt_location;
  }

  if (opt_propertylist !== undefined) {
    queryParameters['propertylist'] = opt_propertylist;
  }

  if (opt_smtpHost !== undefined) {
    queryParameters['smtp.host'] = opt_smtpHost;
  }

  if (opt_smtpPort !== undefined) {
    queryParameters['smtp.port'] = opt_smtpPort;
  }

  if (opt_smtpUser !== undefined) {
    queryParameters['smtp.user'] = opt_smtpUser;
  }

  if (opt_smtpPassword !== undefined) {
    queryParameters['smtp.password'] = opt_smtpPassword;
  }

  if (opt_fromAddress !== undefined) {
    queryParameters['from.address'] = opt_fromAddress;
  }

  if (opt_smtpSsl !== undefined) {
    queryParameters['smtp.ssl'] = opt_smtpSsl;
  }

  if (opt_smtpStarttls !== undefined) {
    queryParameters['smtp.starttls'] = opt_smtpStarttls;
  }

  if (opt_debugEmail !== undefined) {
    queryParameters['debug.email'] = opt_debugEmail;
  }

  /** @type {!Object} */
  var httpRequestParams = {
    method: 'POST',
    url: path,
    json: true,
            params: queryParameters,
    headers: headerParams
  };

  if (opt_extraHttpRequestParams) {
    httpRequestParams = angular.extend(httpRequestParams, opt_extraHttpRequestParams);
  }

  return (/** @type {?} */ (this.http_))(httpRequestParams);
}

/**
 * 
 * 
 * @param {!boolean=} opt_post 
 * @param {!boolean=} opt_apply 
 * @param {!boolean=} opt_delete 
 * @param {!string=} opt_action 
 * @param {!string=} opt_location 
 * @param {!Array<!string>=} opt_propertylist 
 * @param {!string=} opt_maxRecipientCount 
 * @param {!angular.$http.Config=} opt_extraHttpRequestParams Extra HTTP parameters to send.
 * @return {!angular.$q.Promise<!API.Client.comDayCqMailerImplCqMailingServiceInfo>}
 */
API.Client.ConfigmgrApi.prototype.comDayCqMailerImplCqMailingService = function(opt_post, opt_apply, opt_delete, opt_action, opt_location, opt_propertylist, opt_maxRecipientCount, opt_extraHttpRequestParams) {
  /** @const {string} */
  var path = this.basePath_ + '/system/console/configMgr/com.day.cq.mailer.impl.CqMailingService';

  /** @type {!Object} */
  var queryParameters = {};

  /** @type {!Object} */
  var headerParams = angular.extend({}, this.defaultHeaders_);
  if (opt_post !== undefined) {
    queryParameters['post'] = opt_post;
  }

  if (opt_apply !== undefined) {
    queryParameters['apply'] = opt_apply;
  }

  if (opt_delete !== undefined) {
    queryParameters['delete'] = opt_delete;
  }

  if (opt_action !== undefined) {
    queryParameters['action'] = opt_action;
  }

  if (opt_location !== undefined) {
    queryParameters['$location'] = opt_location;
  }

  if (opt_propertylist !== undefined) {
    queryParameters['propertylist'] = opt_propertylist;
  }

  if (opt_maxRecipientCount !== undefined) {
    queryParameters['max.recipient.count'] = opt_maxRecipientCount;
  }

  /** @type {!Object} */
  var httpRequestParams = {
    method: 'POST',
    url: path,
    json: true,
            params: queryParameters,
    headers: headerParams
  };

  if (opt_extraHttpRequestParams) {
    httpRequestParams = angular.extend(httpRequestParams, opt_extraHttpRequestParams);
  }

  return (/** @type {?} */ (this.http_))(httpRequestParams);
}

/**
 * 
 * 
 * @param {!boolean=} opt_post 
 * @param {!boolean=} opt_apply 
 * @param {!boolean=} opt_delete 
 * @param {!string=} opt_action 
 * @param {!string=} opt_location 
 * @param {!Array<!string>=} opt_propertylist 
 * @param {!string=} opt_mailerEmailCharset 
 * @param {!angular.$http.Config=} opt_extraHttpRequestParams Extra HTTP parameters to send.
 * @return {!angular.$q.Promise<!API.Client.comDayCqMailerImplEmailCqEmailTemplateFactoryInfo>}
 */
API.Client.ConfigmgrApi.prototype.comDayCqMailerImplEmailCqEmailTemplateFactory = function(opt_post, opt_apply, opt_delete, opt_action, opt_location, opt_propertylist, opt_mailerEmailCharset, opt_extraHttpRequestParams) {
  /** @const {string} */
  var path = this.basePath_ + '/system/console/configMgr/com.day.cq.mailer.impl.email.CqEmailTemplateFactory';

  /** @type {!Object} */
  var queryParameters = {};

  /** @type {!Object} */
  var headerParams = angular.extend({}, this.defaultHeaders_);
  if (opt_post !== undefined) {
    queryParameters['post'] = opt_post;
  }

  if (opt_apply !== undefined) {
    queryParameters['apply'] = opt_apply;
  }

  if (opt_delete !== undefined) {
    queryParameters['delete'] = opt_delete;
  }

  if (opt_action !== undefined) {
    queryParameters['action'] = opt_action;
  }

  if (opt_location !== undefined) {
    queryParameters['$location'] = opt_location;
  }

  if (opt_propertylist !== undefined) {
    queryParameters['propertylist'] = opt_propertylist;
  }

  if (opt_mailerEmailCharset !== undefined) {
    queryParameters['mailer.email.charset'] = opt_mailerEmailCharset;
  }

  /** @type {!Object} */
  var httpRequestParams = {
    method: 'POST',
    url: path,
    json: true,
            params: queryParameters,
    headers: headerParams
  };

  if (opt_extraHttpRequestParams) {
    httpRequestParams = angular.extend(httpRequestParams, opt_extraHttpRequestParams);
  }

  return (/** @type {?} */ (this.http_))(httpRequestParams);
}

/**
 * 
 * 
 * @param {!boolean=} opt_post 
 * @param {!boolean=} opt_apply 
 * @param {!boolean=} opt_delete 
 * @param {!string=} opt_action 
 * @param {!string=} opt_location 
 * @param {!Array<!string>=} opt_propertylist 
 * @param {!boolean=} opt_mailerEmailEmbed 
 * @param {!string=} opt_mailerEmailCharset 
 * @param {!string=} opt_mailerEmailRetrieverUserID 
 * @param {!string=} opt_mailerEmailRetrieverUserPWD 
 * @param {!angular.$http.Config=} opt_extraHttpRequestParams Extra HTTP parameters to send.
 * @return {!angular.$q.Promise<!API.Client.comDayCqMailerImplEmailCqRetrieverTemplateFactoryInfo>}
 */
API.Client.ConfigmgrApi.prototype.comDayCqMailerImplEmailCqRetrieverTemplateFactory = function(opt_post, opt_apply, opt_delete, opt_action, opt_location, opt_propertylist, opt_mailerEmailEmbed, opt_mailerEmailCharset, opt_mailerEmailRetrieverUserID, opt_mailerEmailRetrieverUserPWD, opt_extraHttpRequestParams) {
  /** @const {string} */
  var path = this.basePath_ + '/system/console/configMgr/com.day.cq.mailer.impl.email.CqRetrieverTemplateFactory';

  /** @type {!Object} */
  var queryParameters = {};

  /** @type {!Object} */
  var headerParams = angular.extend({}, this.defaultHeaders_);
  if (opt_post !== undefined) {
    queryParameters['post'] = opt_post;
  }

  if (opt_apply !== undefined) {
    queryParameters['apply'] = opt_apply;
  }

  if (opt_delete !== undefined) {
    queryParameters['delete'] = opt_delete;
  }

  if (opt_action !== undefined) {
    queryParameters['action'] = opt_action;
  }

  if (opt_location !== undefined) {
    queryParameters['$location'] = opt_location;
  }

  if (opt_propertylist !== undefined) {
    queryParameters['propertylist'] = opt_propertylist;
  }

  if (opt_mailerEmailEmbed !== undefined) {
    queryParameters['mailer.email.embed'] = opt_mailerEmailEmbed;
  }

  if (opt_mailerEmailCharset !== undefined) {
    queryParameters['mailer.email.charset'] = opt_mailerEmailCharset;
  }

  if (opt_mailerEmailRetrieverUserID !== undefined) {
    queryParameters['mailer.email.retrieverUserID'] = opt_mailerEmailRetrieverUserID;
  }

  if (opt_mailerEmailRetrieverUserPWD !== undefined) {
    queryParameters['mailer.email.retrieverUserPWD'] = opt_mailerEmailRetrieverUserPWD;
  }

  /** @type {!Object} */
  var httpRequestParams = {
    method: 'POST',
    url: path,
    json: true,
            params: queryParameters,
    headers: headerParams
  };

  if (opt_extraHttpRequestParams) {
    httpRequestParams = angular.extend(httpRequestParams, opt_extraHttpRequestParams);
  }

  return (/** @type {?} */ (this.http_))(httpRequestParams);
}

/**
 * 
 * 
 * @param {!boolean=} opt_post 
 * @param {!boolean=} opt_apply 
 * @param {!boolean=} opt_delete 
 * @param {!string=} opt_action 
 * @param {!string=} opt_location 
 * @param {!Array<!string>=} opt_propertylist 
 * @param {!Array<!string>=} opt_aemMcmCampaignFormConstraints 
 * @param {!string=} opt_aemMcmCampaignPublicUrl 
 * @param {!boolean=} opt_aemMcmCampaignRelaxedSSL 
 * @param {!angular.$http.Config=} opt_extraHttpRequestParams Extra HTTP parameters to send.
 * @return {!angular.$q.Promise<!API.Client.comDayCqMcmCampaignImplIntegrationConfigImplInfo>}
 */
API.Client.ConfigmgrApi.prototype.comDayCqMcmCampaignImplIntegrationConfigImpl = function(opt_post, opt_apply, opt_delete, opt_action, opt_location, opt_propertylist, opt_aemMcmCampaignFormConstraints, opt_aemMcmCampaignPublicUrl, opt_aemMcmCampaignRelaxedSSL, opt_extraHttpRequestParams) {
  /** @const {string} */
  var path = this.basePath_ + '/system/console/configMgr/com.day.cq.mcm.campaign.impl.IntegrationConfigImpl';

  /** @type {!Object} */
  var queryParameters = {};

  /** @type {!Object} */
  var headerParams = angular.extend({}, this.defaultHeaders_);
  if (opt_post !== undefined) {
    queryParameters['post'] = opt_post;
  }

  if (opt_apply !== undefined) {
    queryParameters['apply'] = opt_apply;
  }

  if (opt_delete !== undefined) {
    queryParameters['delete'] = opt_delete;
  }

  if (opt_action !== undefined) {
    queryParameters['action'] = opt_action;
  }

  if (opt_location !== undefined) {
    queryParameters['$location'] = opt_location;
  }

  if (opt_propertylist !== undefined) {
    queryParameters['propertylist'] = opt_propertylist;
  }

  if (opt_aemMcmCampaignFormConstraints !== undefined) {
    queryParameters['aem.mcm.campaign.formConstraints'] = opt_aemMcmCampaignFormConstraints;
  }

  if (opt_aemMcmCampaignPublicUrl !== undefined) {
    queryParameters['aem.mcm.campaign.publicUrl'] = opt_aemMcmCampaignPublicUrl;
  }

  if (opt_aemMcmCampaignRelaxedSSL !== undefined) {
    queryParameters['aem.mcm.campaign.relaxedSSL'] = opt_aemMcmCampaignRelaxedSSL;
  }

  /** @type {!Object} */
  var httpRequestParams = {
    method: 'POST',
    url: path,
    json: true,
            params: queryParameters,
    headers: headerParams
  };

  if (opt_extraHttpRequestParams) {
    httpRequestParams = angular.extend(httpRequestParams, opt_extraHttpRequestParams);
  }

  return (/** @type {?} */ (this.http_))(httpRequestParams);
}

/**
 * 
 * 
 * @param {!boolean=} opt_post 
 * @param {!boolean=} opt_apply 
 * @param {!boolean=} opt_delete 
 * @param {!string=} opt_action 
 * @param {!string=} opt_location 
 * @param {!Array<!string>=} opt_propertylist 
 * @param {!number=} opt_serviceRanking 
 * @param {!string=} opt_tagpattern 
 * @param {!angular.$http.Config=} opt_extraHttpRequestParams Extra HTTP parameters to send.
 * @return {!angular.$q.Promise<!API.Client.comDayCqMcmCampaignImporterPersonalizedTextHandlerFactoryInfo>}
 */
API.Client.ConfigmgrApi.prototype.comDayCqMcmCampaignImporterPersonalizedTextHandlerFactory = function(opt_post, opt_apply, opt_delete, opt_action, opt_location, opt_propertylist, opt_serviceRanking, opt_tagpattern, opt_extraHttpRequestParams) {
  /** @const {string} */
  var path = this.basePath_ + '/system/console/configMgr/com.day.cq.mcm.campaign.importer.PersonalizedTextHandlerFactory';

  /** @type {!Object} */
  var queryParameters = {};

  /** @type {!Object} */
  var headerParams = angular.extend({}, this.defaultHeaders_);
  if (opt_post !== undefined) {
    queryParameters['post'] = opt_post;
  }

  if (opt_apply !== undefined) {
    queryParameters['apply'] = opt_apply;
  }

  if (opt_delete !== undefined) {
    queryParameters['delete'] = opt_delete;
  }

  if (opt_action !== undefined) {
    queryParameters['action'] = opt_action;
  }

  if (opt_location !== undefined) {
    queryParameters['$location'] = opt_location;
  }

  if (opt_propertylist !== undefined) {
    queryParameters['propertylist'] = opt_propertylist;
  }

  if (opt_serviceRanking !== undefined) {
    queryParameters['service.ranking'] = opt_serviceRanking;
  }

  if (opt_tagpattern !== undefined) {
    queryParameters['tagpattern'] = opt_tagpattern;
  }

  /** @type {!Object} */
  var httpRequestParams = {
    method: 'POST',
    url: path,
    json: true,
            params: queryParameters,
    headers: headerParams
  };

  if (opt_extraHttpRequestParams) {
    httpRequestParams = angular.extend(httpRequestParams, opt_extraHttpRequestParams);
  }

  return (/** @type {?} */ (this.http_))(httpRequestParams);
}

/**
 * 
 * 
 * @param {!boolean=} opt_post 
 * @param {!boolean=} opt_apply 
 * @param {!boolean=} opt_delete 
 * @param {!string=} opt_action 
 * @param {!string=} opt_location 
 * @param {!Array<!string>=} opt_propertylist 
 * @param {!string=} opt_fromAddress 
 * @param {!string=} opt_senderHost 
 * @param {!string=} opt_maxBounceCount 
 * @param {!angular.$http.Config=} opt_extraHttpRequestParams Extra HTTP parameters to send.
 * @return {!angular.$q.Promise<!API.Client.comDayCqMcmCoreNewsletterNewsletterEmailServiceImplInfo>}
 */
API.Client.ConfigmgrApi.prototype.comDayCqMcmCoreNewsletterNewsletterEmailServiceImpl = function(opt_post, opt_apply, opt_delete, opt_action, opt_location, opt_propertylist, opt_fromAddress, opt_senderHost, opt_maxBounceCount, opt_extraHttpRequestParams) {
  /** @const {string} */
  var path = this.basePath_ + '/system/console/configMgr/com.day.cq.mcm.core.newsletter.NewsletterEmailServiceImpl';

  /** @type {!Object} */
  var queryParameters = {};

  /** @type {!Object} */
  var headerParams = angular.extend({}, this.defaultHeaders_);
  if (opt_post !== undefined) {
    queryParameters['post'] = opt_post;
  }

  if (opt_apply !== undefined) {
    queryParameters['apply'] = opt_apply;
  }

  if (opt_delete !== undefined) {
    queryParameters['delete'] = opt_delete;
  }

  if (opt_action !== undefined) {
    queryParameters['action'] = opt_action;
  }

  if (opt_location !== undefined) {
    queryParameters['$location'] = opt_location;
  }

  if (opt_propertylist !== undefined) {
    queryParameters['propertylist'] = opt_propertylist;
  }

  if (opt_fromAddress !== undefined) {
    queryParameters['from.address'] = opt_fromAddress;
  }

  if (opt_senderHost !== undefined) {
    queryParameters['sender.host'] = opt_senderHost;
  }

  if (opt_maxBounceCount !== undefined) {
    queryParameters['max.bounce.count'] = opt_maxBounceCount;
  }

  /** @type {!Object} */
  var httpRequestParams = {
    method: 'POST',
    url: path,
    json: true,
            params: queryParameters,
    headers: headerParams
  };

  if (opt_extraHttpRequestParams) {
    httpRequestParams = angular.extend(httpRequestParams, opt_extraHttpRequestParams);
  }

  return (/** @type {?} */ (this.http_))(httpRequestParams);
}

/**
 * 
 * 
 * @param {!boolean=} opt_post 
 * @param {!boolean=} opt_apply 
 * @param {!boolean=} opt_delete 
 * @param {!string=} opt_action 
 * @param {!string=} opt_location 
 * @param {!Array<!string>=} opt_propertylist 
 * @param {!Array<!string>=} opt_experienceIndirection 
 * @param {!Array<!string>=} opt_touchpointIndirection 
 * @param {!angular.$http.Config=} opt_extraHttpRequestParams Extra HTTP parameters to send.
 * @return {!angular.$q.Promise<!API.Client.comDayCqMcmImplMCMConfigurationInfo>}
 */
API.Client.ConfigmgrApi.prototype.comDayCqMcmImplMCMConfiguration = function(opt_post, opt_apply, opt_delete, opt_action, opt_location, opt_propertylist, opt_experienceIndirection, opt_touchpointIndirection, opt_extraHttpRequestParams) {
  /** @const {string} */
  var path = this.basePath_ + '/system/console/configMgr/com.day.cq.mcm.impl.MCMConfiguration';

  /** @type {!Object} */
  var queryParameters = {};

  /** @type {!Object} */
  var headerParams = angular.extend({}, this.defaultHeaders_);
  if (opt_post !== undefined) {
    queryParameters['post'] = opt_post;
  }

  if (opt_apply !== undefined) {
    queryParameters['apply'] = opt_apply;
  }

  if (opt_delete !== undefined) {
    queryParameters['delete'] = opt_delete;
  }

  if (opt_action !== undefined) {
    queryParameters['action'] = opt_action;
  }

  if (opt_location !== undefined) {
    queryParameters['$location'] = opt_location;
  }

  if (opt_propertylist !== undefined) {
    queryParameters['propertylist'] = opt_propertylist;
  }

  if (opt_experienceIndirection !== undefined) {
    queryParameters['experience.indirection'] = opt_experienceIndirection;
  }

  if (opt_touchpointIndirection !== undefined) {
    queryParameters['touchpoint.indirection'] = opt_touchpointIndirection;
  }

  /** @type {!Object} */
  var httpRequestParams = {
    method: 'POST',
    url: path,
    json: true,
            params: queryParameters,
    headers: headerParams
  };

  if (opt_extraHttpRequestParams) {
    httpRequestParams = angular.extend(httpRequestParams, opt_extraHttpRequestParams);
  }

  return (/** @type {?} */ (this.http_))(httpRequestParams);
}

/**
 * 
 * 
 * @param {!boolean=} opt_post 
 * @param {!boolean=} opt_apply 
 * @param {!boolean=} opt_delete 
 * @param {!string=} opt_action 
 * @param {!string=} opt_location 
 * @param {!Array<!string>=} opt_propertylist 
 * @param {!number=} opt_serviceRanking 
 * @param {!string=} opt_tagpattern 
 * @param {!string=} opt_componentResourceType 
 * @param {!angular.$http.Config=} opt_extraHttpRequestParams Extra HTTP parameters to send.
 * @return {!angular.$q.Promise<!API.Client.comDayCqMcmLandingpageParserTaghandlersCtaClickThroughComponenInfo>}
 */
API.Client.ConfigmgrApi.prototype.comDayCqMcmLandingpageParserTaghandlersCtaClickThroughComponen = function(opt_post, opt_apply, opt_delete, opt_action, opt_location, opt_propertylist, opt_serviceRanking, opt_tagpattern, opt_componentResourceType, opt_extraHttpRequestParams) {
  /** @const {string} */
  var path = this.basePath_ + '/system/console/configMgr/com.day.cq.mcm.landingpage.parser.taghandlers.cta.ClickThroughComponentTagHandlerFactory';

  /** @type {!Object} */
  var queryParameters = {};

  /** @type {!Object} */
  var headerParams = angular.extend({}, this.defaultHeaders_);
  if (opt_post !== undefined) {
    queryParameters['post'] = opt_post;
  }

  if (opt_apply !== undefined) {
    queryParameters['apply'] = opt_apply;
  }

  if (opt_delete !== undefined) {
    queryParameters['delete'] = opt_delete;
  }

  if (opt_action !== undefined) {
    queryParameters['action'] = opt_action;
  }

  if (opt_location !== undefined) {
    queryParameters['$location'] = opt_location;
  }

  if (opt_propertylist !== undefined) {
    queryParameters['propertylist'] = opt_propertylist;
  }

  if (opt_serviceRanking !== undefined) {
    queryParameters['service.ranking'] = opt_serviceRanking;
  }

  if (opt_tagpattern !== undefined) {
    queryParameters['tagpattern'] = opt_tagpattern;
  }

  if (opt_componentResourceType !== undefined) {
    queryParameters['component.resourceType'] = opt_componentResourceType;
  }

  /** @type {!Object} */
  var httpRequestParams = {
    method: 'POST',
    url: path,
    json: true,
            params: queryParameters,
    headers: headerParams
  };

  if (opt_extraHttpRequestParams) {
    httpRequestParams = angular.extend(httpRequestParams, opt_extraHttpRequestParams);
  }

  return (/** @type {?} */ (this.http_))(httpRequestParams);
}

/**
 * 
 * 
 * @param {!boolean=} opt_post 
 * @param {!boolean=} opt_apply 
 * @param {!boolean=} opt_delete 
 * @param {!string=} opt_action 
 * @param {!string=} opt_location 
 * @param {!Array<!string>=} opt_propertylist 
 * @param {!number=} opt_serviceRanking 
 * @param {!string=} opt_tagpattern 
 * @param {!string=} opt_componentResourceType 
 * @param {!angular.$http.Config=} opt_extraHttpRequestParams Extra HTTP parameters to send.
 * @return {!angular.$q.Promise<!API.Client.comDayCqMcmLandingpageParserTaghandlersCtaGraphicalClickThrougInfo>}
 */
API.Client.ConfigmgrApi.prototype.comDayCqMcmLandingpageParserTaghandlersCtaGraphicalClickThroug = function(opt_post, opt_apply, opt_delete, opt_action, opt_location, opt_propertylist, opt_serviceRanking, opt_tagpattern, opt_componentResourceType, opt_extraHttpRequestParams) {
  /** @const {string} */
  var path = this.basePath_ + '/system/console/configMgr/com.day.cq.mcm.landingpage.parser.taghandlers.cta.GraphicalClickThroughComponentTagHandlerFactory';

  /** @type {!Object} */
  var queryParameters = {};

  /** @type {!Object} */
  var headerParams = angular.extend({}, this.defaultHeaders_);
  if (opt_post !== undefined) {
    queryParameters['post'] = opt_post;
  }

  if (opt_apply !== undefined) {
    queryParameters['apply'] = opt_apply;
  }

  if (opt_delete !== undefined) {
    queryParameters['delete'] = opt_delete;
  }

  if (opt_action !== undefined) {
    queryParameters['action'] = opt_action;
  }

  if (opt_location !== undefined) {
    queryParameters['$location'] = opt_location;
  }

  if (opt_propertylist !== undefined) {
    queryParameters['propertylist'] = opt_propertylist;
  }

  if (opt_serviceRanking !== undefined) {
    queryParameters['service.ranking'] = opt_serviceRanking;
  }

  if (opt_tagpattern !== undefined) {
    queryParameters['tagpattern'] = opt_tagpattern;
  }

  if (opt_componentResourceType !== undefined) {
    queryParameters['component.resourceType'] = opt_componentResourceType;
  }

  /** @type {!Object} */
  var httpRequestParams = {
    method: 'POST',
    url: path,
    json: true,
            params: queryParameters,
    headers: headerParams
  };

  if (opt_extraHttpRequestParams) {
    httpRequestParams = angular.extend(httpRequestParams, opt_extraHttpRequestParams);
  }

  return (/** @type {?} */ (this.http_))(httpRequestParams);
}

/**
 * 
 * 
 * @param {!boolean=} opt_post 
 * @param {!boolean=} opt_apply 
 * @param {!boolean=} opt_delete 
 * @param {!string=} opt_action 
 * @param {!string=} opt_location 
 * @param {!Array<!string>=} opt_propertylist 
 * @param {!number=} opt_serviceRanking 
 * @param {!string=} opt_tagpattern 
 * @param {!angular.$http.Config=} opt_extraHttpRequestParams Extra HTTP parameters to send.
 * @return {!angular.$q.Promise<!API.Client.comDayCqMcmLandingpageParserTaghandlersCtaLeadFormCTAComponentInfo>}
 */
API.Client.ConfigmgrApi.prototype.comDayCqMcmLandingpageParserTaghandlersCtaLeadFormCTAComponent = function(opt_post, opt_apply, opt_delete, opt_action, opt_location, opt_propertylist, opt_serviceRanking, opt_tagpattern, opt_extraHttpRequestParams) {
  /** @const {string} */
  var path = this.basePath_ + '/system/console/configMgr/com.day.cq.mcm.landingpage.parser.taghandlers.cta.LeadFormCTAComponentTagHandlerFactory';

  /** @type {!Object} */
  var queryParameters = {};

  /** @type {!Object} */
  var headerParams = angular.extend({}, this.defaultHeaders_);
  if (opt_post !== undefined) {
    queryParameters['post'] = opt_post;
  }

  if (opt_apply !== undefined) {
    queryParameters['apply'] = opt_apply;
  }

  if (opt_delete !== undefined) {
    queryParameters['delete'] = opt_delete;
  }

  if (opt_action !== undefined) {
    queryParameters['action'] = opt_action;
  }

  if (opt_location !== undefined) {
    queryParameters['$location'] = opt_location;
  }

  if (opt_propertylist !== undefined) {
    queryParameters['propertylist'] = opt_propertylist;
  }

  if (opt_serviceRanking !== undefined) {
    queryParameters['service.ranking'] = opt_serviceRanking;
  }

  if (opt_tagpattern !== undefined) {
    queryParameters['tagpattern'] = opt_tagpattern;
  }

  /** @type {!Object} */
  var httpRequestParams = {
    method: 'POST',
    url: path,
    json: true,
            params: queryParameters,
    headers: headerParams
  };

  if (opt_extraHttpRequestParams) {
    httpRequestParams = angular.extend(httpRequestParams, opt_extraHttpRequestParams);
  }

  return (/** @type {?} */ (this.http_))(httpRequestParams);
}

/**
 * 
 * 
 * @param {!boolean=} opt_post 
 * @param {!boolean=} opt_apply 
 * @param {!boolean=} opt_delete 
 * @param {!string=} opt_action 
 * @param {!string=} opt_location 
 * @param {!Array<!string>=} opt_propertylist 
 * @param {!number=} opt_serviceRanking 
 * @param {!string=} opt_tagpattern 
 * @param {!angular.$http.Config=} opt_extraHttpRequestParams Extra HTTP parameters to send.
 * @return {!angular.$q.Promise<!API.Client.comDayCqMcmLandingpageParserTaghandlersMboxMBoxExperienceTagHaInfo>}
 */
API.Client.ConfigmgrApi.prototype.comDayCqMcmLandingpageParserTaghandlersMboxMBoxExperienceTagHa = function(opt_post, opt_apply, opt_delete, opt_action, opt_location, opt_propertylist, opt_serviceRanking, opt_tagpattern, opt_extraHttpRequestParams) {
  /** @const {string} */
  var path = this.basePath_ + '/system/console/configMgr/com.day.cq.mcm.landingpage.parser.taghandlers.mbox.MBoxExperienceTagHandlerFactory';

  /** @type {!Object} */
  var queryParameters = {};

  /** @type {!Object} */
  var headerParams = angular.extend({}, this.defaultHeaders_);
  if (opt_post !== undefined) {
    queryParameters['post'] = opt_post;
  }

  if (opt_apply !== undefined) {
    queryParameters['apply'] = opt_apply;
  }

  if (opt_delete !== undefined) {
    queryParameters['delete'] = opt_delete;
  }

  if (opt_action !== undefined) {
    queryParameters['action'] = opt_action;
  }

  if (opt_location !== undefined) {
    queryParameters['$location'] = opt_location;
  }

  if (opt_propertylist !== undefined) {
    queryParameters['propertylist'] = opt_propertylist;
  }

  if (opt_serviceRanking !== undefined) {
    queryParameters['service.ranking'] = opt_serviceRanking;
  }

  if (opt_tagpattern !== undefined) {
    queryParameters['tagpattern'] = opt_tagpattern;
  }

  /** @type {!Object} */
  var httpRequestParams = {
    method: 'POST',
    url: path,
    json: true,
            params: queryParameters,
    headers: headerParams
  };

  if (opt_extraHttpRequestParams) {
    httpRequestParams = angular.extend(httpRequestParams, opt_extraHttpRequestParams);
  }

  return (/** @type {?} */ (this.http_))(httpRequestParams);
}

/**
 * 
 * 
 * @param {!boolean=} opt_post 
 * @param {!boolean=} opt_apply 
 * @param {!boolean=} opt_delete 
 * @param {!string=} opt_action 
 * @param {!string=} opt_location 
 * @param {!Array<!string>=} opt_propertylist 
 * @param {!number=} opt_serviceRanking 
 * @param {!string=} opt_tagpattern 
 * @param {!string=} opt_componentResourceType 
 * @param {!angular.$http.Config=} opt_extraHttpRequestParams Extra HTTP parameters to send.
 * @return {!angular.$q.Promise<!API.Client.comDayCqMcmLandingpageParserTaghandlersMboxTargetComponentTagHInfo>}
 */
API.Client.ConfigmgrApi.prototype.comDayCqMcmLandingpageParserTaghandlersMboxTargetComponentTagH = function(opt_post, opt_apply, opt_delete, opt_action, opt_location, opt_propertylist, opt_serviceRanking, opt_tagpattern, opt_componentResourceType, opt_extraHttpRequestParams) {
  /** @const {string} */
  var path = this.basePath_ + '/system/console/configMgr/com.day.cq.mcm.landingpage.parser.taghandlers.mbox.TargetComponentTagHandlerFactory';

  /** @type {!Object} */
  var queryParameters = {};

  /** @type {!Object} */
  var headerParams = angular.extend({}, this.defaultHeaders_);
  if (opt_post !== undefined) {
    queryParameters['post'] = opt_post;
  }

  if (opt_apply !== undefined) {
    queryParameters['apply'] = opt_apply;
  }

  if (opt_delete !== undefined) {
    queryParameters['delete'] = opt_delete;
  }

  if (opt_action !== undefined) {
    queryParameters['action'] = opt_action;
  }

  if (opt_location !== undefined) {
    queryParameters['$location'] = opt_location;
  }

  if (opt_propertylist !== undefined) {
    queryParameters['propertylist'] = opt_propertylist;
  }

  if (opt_serviceRanking !== undefined) {
    queryParameters['service.ranking'] = opt_serviceRanking;
  }

  if (opt_tagpattern !== undefined) {
    queryParameters['tagpattern'] = opt_tagpattern;
  }

  if (opt_componentResourceType !== undefined) {
    queryParameters['component.resourceType'] = opt_componentResourceType;
  }

  /** @type {!Object} */
  var httpRequestParams = {
    method: 'POST',
    url: path,
    json: true,
            params: queryParameters,
    headers: headerParams
  };

  if (opt_extraHttpRequestParams) {
    httpRequestParams = angular.extend(httpRequestParams, opt_extraHttpRequestParams);
  }

  return (/** @type {?} */ (this.http_))(httpRequestParams);
}

/**
 * 
 * 
 * @param {!boolean=} opt_post 
 * @param {!boolean=} opt_apply 
 * @param {!boolean=} opt_delete 
 * @param {!string=} opt_action 
 * @param {!string=} opt_location 
 * @param {!Array<!string>=} opt_propertylist 
 * @param {!string=} opt_eventFilter 
 * @param {!angular.$http.Config=} opt_extraHttpRequestParams Extra HTTP parameters to send.
 * @return {!angular.$q.Promise<!API.Client.comDayCqNotificationImplNotificationServiceImplInfo>}
 */
API.Client.ConfigmgrApi.prototype.comDayCqNotificationImplNotificationServiceImpl = function(opt_post, opt_apply, opt_delete, opt_action, opt_location, opt_propertylist, opt_eventFilter, opt_extraHttpRequestParams) {
  /** @const {string} */
  var path = this.basePath_ + '/system/console/configMgr/com.day.cq.notification.impl.NotificationServiceImpl';

  /** @type {!Object} */
  var queryParameters = {};

  /** @type {!Object} */
  var headerParams = angular.extend({}, this.defaultHeaders_);
  if (opt_post !== undefined) {
    queryParameters['post'] = opt_post;
  }

  if (opt_apply !== undefined) {
    queryParameters['apply'] = opt_apply;
  }

  if (opt_delete !== undefined) {
    queryParameters['delete'] = opt_delete;
  }

  if (opt_action !== undefined) {
    queryParameters['action'] = opt_action;
  }

  if (opt_location !== undefined) {
    queryParameters['$location'] = opt_location;
  }

  if (opt_propertylist !== undefined) {
    queryParameters['propertylist'] = opt_propertylist;
  }

  if (opt_eventFilter !== undefined) {
    queryParameters['event.filter'] = opt_eventFilter;
  }

  /** @type {!Object} */
  var httpRequestParams = {
    method: 'POST',
    url: path,
    json: true,
            params: queryParameters,
    headers: headerParams
  };

  if (opt_extraHttpRequestParams) {
    httpRequestParams = angular.extend(httpRequestParams, opt_extraHttpRequestParams);
  }

  return (/** @type {?} */ (this.http_))(httpRequestParams);
}

/**
 * 
 * 
 * @param {!boolean=} opt_post 
 * @param {!boolean=} opt_apply 
 * @param {!boolean=} opt_delete 
 * @param {!string=} opt_action 
 * @param {!string=} opt_location 
 * @param {!Array<!string>=} opt_propertylist 
 * @param {!boolean=} opt_forcelocation 
 * @param {!angular.$http.Config=} opt_extraHttpRequestParams Extra HTTP parameters to send.
 * @return {!angular.$q.Promise<!API.Client.comDayCqPersonalizationImplServletsTargetingConfigurationServletInfo>}
 */
API.Client.ConfigmgrApi.prototype.comDayCqPersonalizationImplServletsTargetingConfigurationServlet = function(opt_post, opt_apply, opt_delete, opt_action, opt_location, opt_propertylist, opt_forcelocation, opt_extraHttpRequestParams) {
  /** @const {string} */
  var path = this.basePath_ + '/system/console/configMgr/com.day.cq.personalization.impl.servlets.TargetingConfigurationServlet';

  /** @type {!Object} */
  var queryParameters = {};

  /** @type {!Object} */
  var headerParams = angular.extend({}, this.defaultHeaders_);
  if (opt_post !== undefined) {
    queryParameters['post'] = opt_post;
  }

  if (opt_apply !== undefined) {
    queryParameters['apply'] = opt_apply;
  }

  if (opt_delete !== undefined) {
    queryParameters['delete'] = opt_delete;
  }

  if (opt_action !== undefined) {
    queryParameters['action'] = opt_action;
  }

  if (opt_location !== undefined) {
    queryParameters['$location'] = opt_location;
  }

  if (opt_propertylist !== undefined) {
    queryParameters['propertylist'] = opt_propertylist;
  }

  if (opt_forcelocation !== undefined) {
    queryParameters['forcelocation'] = opt_forcelocation;
  }

  /** @type {!Object} */
  var httpRequestParams = {
    method: 'POST',
    url: path,
    json: true,
            params: queryParameters,
    headers: headerParams
  };

  if (opt_extraHttpRequestParams) {
    httpRequestParams = angular.extend(httpRequestParams, opt_extraHttpRequestParams);
  }

  return (/** @type {?} */ (this.http_))(httpRequestParams);
}

/**
 * 
 * 
 * @param {!boolean=} opt_post 
 * @param {!boolean=} opt_apply 
 * @param {!boolean=} opt_delete 
 * @param {!string=} opt_action 
 * @param {!string=} opt_location 
 * @param {!Array<!string>=} opt_propertylist 
 * @param {!string=} opt_id 
 * @param {!boolean=} opt_enabled 
 * @param {!boolean=} opt_reference 
 * @param {!number=} opt_interval 
 * @param {!string=} opt_expression 
 * @param {!string=} opt_source 
 * @param {!string=} opt_target 
 * @param {!string=} opt_login 
 * @param {!string=} opt_password 
 * @param {!angular.$http.Config=} opt_extraHttpRequestParams Extra HTTP parameters to send.
 * @return {!angular.$q.Promise<!API.Client.comDayCqPollingImporterImplManagedPollConfigImplInfo>}
 */
API.Client.ConfigmgrApi.prototype.comDayCqPollingImporterImplManagedPollConfigImpl = function(opt_post, opt_apply, opt_delete, opt_action, opt_location, opt_propertylist, opt_id, opt_enabled, opt_reference, opt_interval, opt_expression, opt_source, opt_target, opt_login, opt_password, opt_extraHttpRequestParams) {
  /** @const {string} */
  var path = this.basePath_ + '/system/console/configMgr/com.day.cq.polling.importer.impl.ManagedPollConfigImpl';

  /** @type {!Object} */
  var queryParameters = {};

  /** @type {!Object} */
  var headerParams = angular.extend({}, this.defaultHeaders_);
  if (opt_post !== undefined) {
    queryParameters['post'] = opt_post;
  }

  if (opt_apply !== undefined) {
    queryParameters['apply'] = opt_apply;
  }

  if (opt_delete !== undefined) {
    queryParameters['delete'] = opt_delete;
  }

  if (opt_action !== undefined) {
    queryParameters['action'] = opt_action;
  }

  if (opt_location !== undefined) {
    queryParameters['$location'] = opt_location;
  }

  if (opt_propertylist !== undefined) {
    queryParameters['propertylist'] = opt_propertylist;
  }

  if (opt_id !== undefined) {
    queryParameters['id'] = opt_id;
  }

  if (opt_enabled !== undefined) {
    queryParameters['enabled'] = opt_enabled;
  }

  if (opt_reference !== undefined) {
    queryParameters['reference'] = opt_reference;
  }

  if (opt_interval !== undefined) {
    queryParameters['interval'] = opt_interval;
  }

  if (opt_expression !== undefined) {
    queryParameters['expression'] = opt_expression;
  }

  if (opt_source !== undefined) {
    queryParameters['source'] = opt_source;
  }

  if (opt_target !== undefined) {
    queryParameters['target'] = opt_target;
  }

  if (opt_login !== undefined) {
    queryParameters['login'] = opt_login;
  }

  if (opt_password !== undefined) {
    queryParameters['password'] = opt_password;
  }

  /** @type {!Object} */
  var httpRequestParams = {
    method: 'POST',
    url: path,
    json: true,
            params: queryParameters,
    headers: headerParams
  };

  if (opt_extraHttpRequestParams) {
    httpRequestParams = angular.extend(httpRequestParams, opt_extraHttpRequestParams);
  }

  return (/** @type {?} */ (this.http_))(httpRequestParams);
}

/**
 * 
 * 
 * @param {!boolean=} opt_post 
 * @param {!boolean=} opt_apply 
 * @param {!boolean=} opt_delete 
 * @param {!string=} opt_action 
 * @param {!string=} opt_location 
 * @param {!Array<!string>=} opt_propertylist 
 * @param {!string=} opt_importerUser 
 * @param {!angular.$http.Config=} opt_extraHttpRequestParams Extra HTTP parameters to send.
 * @return {!angular.$q.Promise<!API.Client.comDayCqPollingImporterImplManagedPollingImporterImplInfo>}
 */
API.Client.ConfigmgrApi.prototype.comDayCqPollingImporterImplManagedPollingImporterImpl = function(opt_post, opt_apply, opt_delete, opt_action, opt_location, opt_propertylist, opt_importerUser, opt_extraHttpRequestParams) {
  /** @const {string} */
  var path = this.basePath_ + '/system/console/configMgr/com.day.cq.polling.importer.impl.ManagedPollingImporterImpl';

  /** @type {!Object} */
  var queryParameters = {};

  /** @type {!Object} */
  var headerParams = angular.extend({}, this.defaultHeaders_);
  if (opt_post !== undefined) {
    queryParameters['post'] = opt_post;
  }

  if (opt_apply !== undefined) {
    queryParameters['apply'] = opt_apply;
  }

  if (opt_delete !== undefined) {
    queryParameters['delete'] = opt_delete;
  }

  if (opt_action !== undefined) {
    queryParameters['action'] = opt_action;
  }

  if (opt_location !== undefined) {
    queryParameters['$location'] = opt_location;
  }

  if (opt_propertylist !== undefined) {
    queryParameters['propertylist'] = opt_propertylist;
  }

  if (opt_importerUser !== undefined) {
    queryParameters['importer.user'] = opt_importerUser;
  }

  /** @type {!Object} */
  var httpRequestParams = {
    method: 'POST',
    url: path,
    json: true,
            params: queryParameters,
    headers: headerParams
  };

  if (opt_extraHttpRequestParams) {
    httpRequestParams = angular.extend(httpRequestParams, opt_extraHttpRequestParams);
  }

  return (/** @type {?} */ (this.http_))(httpRequestParams);
}

/**
 * 
 * 
 * @param {!boolean=} opt_post 
 * @param {!boolean=} opt_apply 
 * @param {!boolean=} opt_delete 
 * @param {!string=} opt_action 
 * @param {!string=} opt_location 
 * @param {!Array<!string>=} opt_propertylist 
 * @param {!number=} opt_importerMinInterval 
 * @param {!string=} opt_importerUser 
 * @param {!Array<!string>=} opt_excludePaths 
 * @param {!Array<!string>=} opt_includePaths 
 * @param {!angular.$http.Config=} opt_extraHttpRequestParams Extra HTTP parameters to send.
 * @return {!angular.$q.Promise<!API.Client.comDayCqPollingImporterImplPollingImporterImplInfo>}
 */
API.Client.ConfigmgrApi.prototype.comDayCqPollingImporterImplPollingImporterImpl = function(opt_post, opt_apply, opt_delete, opt_action, opt_location, opt_propertylist, opt_importerMinInterval, opt_importerUser, opt_excludePaths, opt_includePaths, opt_extraHttpRequestParams) {
  /** @const {string} */
  var path = this.basePath_ + '/system/console/configMgr/com.day.cq.polling.importer.impl.PollingImporterImpl';

  /** @type {!Object} */
  var queryParameters = {};

  /** @type {!Object} */
  var headerParams = angular.extend({}, this.defaultHeaders_);
  if (opt_post !== undefined) {
    queryParameters['post'] = opt_post;
  }

  if (opt_apply !== undefined) {
    queryParameters['apply'] = opt_apply;
  }

  if (opt_delete !== undefined) {
    queryParameters['delete'] = opt_delete;
  }

  if (opt_action !== undefined) {
    queryParameters['action'] = opt_action;
  }

  if (opt_location !== undefined) {
    queryParameters['$location'] = opt_location;
  }

  if (opt_propertylist !== undefined) {
    queryParameters['propertylist'] = opt_propertylist;
  }

  if (opt_importerMinInterval !== undefined) {
    queryParameters['importer.min.interval'] = opt_importerMinInterval;
  }

  if (opt_importerUser !== undefined) {
    queryParameters['importer.user'] = opt_importerUser;
  }

  if (opt_excludePaths !== undefined) {
    queryParameters['exclude.paths'] = opt_excludePaths;
  }

  if (opt_includePaths !== undefined) {
    queryParameters['include.paths'] = opt_includePaths;
  }

  /** @type {!Object} */
  var httpRequestParams = {
    method: 'POST',
    url: path,
    json: true,
            params: queryParameters,
    headers: headerParams
  };

  if (opt_extraHttpRequestParams) {
    httpRequestParams = angular.extend(httpRequestParams, opt_extraHttpRequestParams);
  }

  return (/** @type {?} */ (this.http_))(httpRequestParams);
}

/**
 * 
 * 
 * @param {!boolean=} opt_post 
 * @param {!boolean=} opt_apply 
 * @param {!boolean=} opt_delete 
 * @param {!string=} opt_action 
 * @param {!string=} opt_location 
 * @param {!Array<!string>=} opt_propertylist 
 * @param {!number=} opt_serviceRanking 
 * @param {!angular.$http.Config=} opt_extraHttpRequestParams Extra HTTP parameters to send.
 * @return {!angular.$q.Promise<!API.Client.comDayCqReplicationAuditReplicationEventListenerInfo>}
 */
API.Client.ConfigmgrApi.prototype.comDayCqReplicationAuditReplicationEventListener = function(opt_post, opt_apply, opt_delete, opt_action, opt_location, opt_propertylist, opt_serviceRanking, opt_extraHttpRequestParams) {
  /** @const {string} */
  var path = this.basePath_ + '/system/console/configMgr/com.day.cq.replication.audit.ReplicationEventListener';

  /** @type {!Object} */
  var queryParameters = {};

  /** @type {!Object} */
  var headerParams = angular.extend({}, this.defaultHeaders_);
  if (opt_post !== undefined) {
    queryParameters['post'] = opt_post;
  }

  if (opt_apply !== undefined) {
    queryParameters['apply'] = opt_apply;
  }

  if (opt_delete !== undefined) {
    queryParameters['delete'] = opt_delete;
  }

  if (opt_action !== undefined) {
    queryParameters['action'] = opt_action;
  }

  if (opt_location !== undefined) {
    queryParameters['$location'] = opt_location;
  }

  if (opt_propertylist !== undefined) {
    queryParameters['propertylist'] = opt_propertylist;
  }

  if (opt_serviceRanking !== undefined) {
    queryParameters['service.ranking'] = opt_serviceRanking;
  }

  /** @type {!Object} */
  var httpRequestParams = {
    method: 'POST',
    url: path,
    json: true,
            params: queryParameters,
    headers: headerParams
  };

  if (opt_extraHttpRequestParams) {
    httpRequestParams = angular.extend(httpRequestParams, opt_extraHttpRequestParams);
  }

  return (/** @type {?} */ (this.http_))(httpRequestParams);
}

/**
 * 
 * 
 * @param {!boolean=} opt_post 
 * @param {!boolean=} opt_apply 
 * @param {!boolean=} opt_delete 
 * @param {!string=} opt_action 
 * @param {!string=} opt_location 
 * @param {!Array<!string>=} opt_propertylist 
 * @param {!string=} opt_host 
 * @param {!number=} opt_port 
 * @param {!angular.$http.Config=} opt_extraHttpRequestParams Extra HTTP parameters to send.
 * @return {!angular.$q.Promise<!API.Client.comDayCqReplicationContentStaticContentBuilderInfo>}
 */
API.Client.ConfigmgrApi.prototype.comDayCqReplicationContentStaticContentBuilder = function(opt_post, opt_apply, opt_delete, opt_action, opt_location, opt_propertylist, opt_host, opt_port, opt_extraHttpRequestParams) {
  /** @const {string} */
  var path = this.basePath_ + '/system/console/configMgr/com.day.cq.replication.content.StaticContentBuilder';

  /** @type {!Object} */
  var queryParameters = {};

  /** @type {!Object} */
  var headerParams = angular.extend({}, this.defaultHeaders_);
  if (opt_post !== undefined) {
    queryParameters['post'] = opt_post;
  }

  if (opt_apply !== undefined) {
    queryParameters['apply'] = opt_apply;
  }

  if (opt_delete !== undefined) {
    queryParameters['delete'] = opt_delete;
  }

  if (opt_action !== undefined) {
    queryParameters['action'] = opt_action;
  }

  if (opt_location !== undefined) {
    queryParameters['$location'] = opt_location;
  }

  if (opt_propertylist !== undefined) {
    queryParameters['propertylist'] = opt_propertylist;
  }

  if (opt_host !== undefined) {
    queryParameters['host'] = opt_host;
  }

  if (opt_port !== undefined) {
    queryParameters['port'] = opt_port;
  }

  /** @type {!Object} */
  var httpRequestParams = {
    method: 'POST',
    url: path,
    json: true,
            params: queryParameters,
    headers: headerParams
  };

  if (opt_extraHttpRequestParams) {
    httpRequestParams = angular.extend(httpRequestParams, opt_extraHttpRequestParams);
  }

  return (/** @type {?} */ (this.http_))(httpRequestParams);
}

/**
 * 
 * 
 * @param {!boolean=} opt_post 
 * @param {!boolean=} opt_apply 
 * @param {!boolean=} opt_delete 
 * @param {!string=} opt_action 
 * @param {!string=} opt_location 
 * @param {!Array<!string>=} opt_propertylist 
 * @param {!string=} opt_jobTopics 
 * @param {!string=} opt_serviceUserTarget 
 * @param {!string=} opt_agentProviderTarget 
 * @param {!angular.$http.Config=} opt_extraHttpRequestParams Extra HTTP parameters to send.
 * @return {!angular.$q.Promise<!API.Client.comDayCqReplicationImplAgentManagerImplInfo>}
 */
API.Client.ConfigmgrApi.prototype.comDayCqReplicationImplAgentManagerImpl = function(opt_post, opt_apply, opt_delete, opt_action, opt_location, opt_propertylist, opt_jobTopics, opt_serviceUserTarget, opt_agentProviderTarget, opt_extraHttpRequestParams) {
  /** @const {string} */
  var path = this.basePath_ + '/system/console/configMgr/com.day.cq.replication.impl.AgentManagerImpl';

  /** @type {!Object} */
  var queryParameters = {};

  /** @type {!Object} */
  var headerParams = angular.extend({}, this.defaultHeaders_);
  if (opt_post !== undefined) {
    queryParameters['post'] = opt_post;
  }

  if (opt_apply !== undefined) {
    queryParameters['apply'] = opt_apply;
  }

  if (opt_delete !== undefined) {
    queryParameters['delete'] = opt_delete;
  }

  if (opt_action !== undefined) {
    queryParameters['action'] = opt_action;
  }

  if (opt_location !== undefined) {
    queryParameters['$location'] = opt_location;
  }

  if (opt_propertylist !== undefined) {
    queryParameters['propertylist'] = opt_propertylist;
  }

  if (opt_jobTopics !== undefined) {
    queryParameters['job.topics'] = opt_jobTopics;
  }

  if (opt_serviceUserTarget !== undefined) {
    queryParameters['serviceUser.target'] = opt_serviceUserTarget;
  }

  if (opt_agentProviderTarget !== undefined) {
    queryParameters['agentProvider.target'] = opt_agentProviderTarget;
  }

  /** @type {!Object} */
  var httpRequestParams = {
    method: 'POST',
    url: path,
    json: true,
            params: queryParameters,
    headers: headerParams
  };

  if (opt_extraHttpRequestParams) {
    httpRequestParams = angular.extend(httpRequestParams, opt_extraHttpRequestParams);
  }

  return (/** @type {?} */ (this.http_))(httpRequestParams);
}

/**
 * 
 * 
 * @param {!boolean=} opt_post 
 * @param {!boolean=} opt_apply 
 * @param {!boolean=} opt_delete 
 * @param {!string=} opt_action 
 * @param {!string=} opt_location 
 * @param {!Array<!string>=} opt_propertylist 
 * @param {!number=} opt_binaryThreshold 
 * @param {!angular.$http.Config=} opt_extraHttpRequestParams Extra HTTP parameters to send.
 * @return {!angular.$q.Promise<!API.Client.comDayCqReplicationImplContentDurboBinaryLessContentBuilderInfo>}
 */
API.Client.ConfigmgrApi.prototype.comDayCqReplicationImplContentDurboBinaryLessContentBuilder = function(opt_post, opt_apply, opt_delete, opt_action, opt_location, opt_propertylist, opt_binaryThreshold, opt_extraHttpRequestParams) {
  /** @const {string} */
  var path = this.basePath_ + '/system/console/configMgr/com.day.cq.replication.impl.content.durbo.BinaryLessContentBuilder';

  /** @type {!Object} */
  var queryParameters = {};

  /** @type {!Object} */
  var headerParams = angular.extend({}, this.defaultHeaders_);
  if (opt_post !== undefined) {
    queryParameters['post'] = opt_post;
  }

  if (opt_apply !== undefined) {
    queryParameters['apply'] = opt_apply;
  }

  if (opt_delete !== undefined) {
    queryParameters['delete'] = opt_delete;
  }

  if (opt_action !== undefined) {
    queryParameters['action'] = opt_action;
  }

  if (opt_location !== undefined) {
    queryParameters['$location'] = opt_location;
  }

  if (opt_propertylist !== undefined) {
    queryParameters['propertylist'] = opt_propertylist;
  }

  if (opt_binaryThreshold !== undefined) {
    queryParameters['binary.threshold'] = opt_binaryThreshold;
  }

  /** @type {!Object} */
  var httpRequestParams = {
    method: 'POST',
    url: path,
    json: true,
            params: queryParameters,
    headers: headerParams
  };

  if (opt_extraHttpRequestParams) {
    httpRequestParams = angular.extend(httpRequestParams, opt_extraHttpRequestParams);
  }

  return (/** @type {?} */ (this.http_))(httpRequestParams);
}

/**
 * 
 * 
 * @param {!boolean=} opt_post 
 * @param {!boolean=} opt_apply 
 * @param {!boolean=} opt_delete 
 * @param {!string=} opt_action 
 * @param {!string=} opt_location 
 * @param {!Array<!string>=} opt_propertylist 
 * @param {!boolean=} opt_preserveHierarchyNodes 
 * @param {!boolean=} opt_ignoreVersioning 
 * @param {!boolean=} opt_importAcl 
 * @param {!number=} opt_saveThreshold 
 * @param {!boolean=} opt_preserveUserPaths 
 * @param {!boolean=} opt_preserveUuid 
 * @param {!Array<!string>=} opt_preserveUuidNodetypes 
 * @param {!Array<!string>=} opt_preserveUuidSubtrees 
 * @param {!boolean=} opt_autoCommit 
 * @param {!angular.$http.Config=} opt_extraHttpRequestParams Extra HTTP parameters to send.
 * @return {!angular.$q.Promise<!API.Client.comDayCqReplicationImplContentDurboDurboImportConfigurationProvInfo>}
 */
API.Client.ConfigmgrApi.prototype.comDayCqReplicationImplContentDurboDurboImportConfigurationProv = function(opt_post, opt_apply, opt_delete, opt_action, opt_location, opt_propertylist, opt_preserveHierarchyNodes, opt_ignoreVersioning, opt_importAcl, opt_saveThreshold, opt_preserveUserPaths, opt_preserveUuid, opt_preserveUuidNodetypes, opt_preserveUuidSubtrees, opt_autoCommit, opt_extraHttpRequestParams) {
  /** @const {string} */
  var path = this.basePath_ + '/system/console/configMgr/com.day.cq.replication.impl.content.durbo.DurboImportConfigurationProviderService';

  /** @type {!Object} */
  var queryParameters = {};

  /** @type {!Object} */
  var headerParams = angular.extend({}, this.defaultHeaders_);
  if (opt_post !== undefined) {
    queryParameters['post'] = opt_post;
  }

  if (opt_apply !== undefined) {
    queryParameters['apply'] = opt_apply;
  }

  if (opt_delete !== undefined) {
    queryParameters['delete'] = opt_delete;
  }

  if (opt_action !== undefined) {
    queryParameters['action'] = opt_action;
  }

  if (opt_location !== undefined) {
    queryParameters['$location'] = opt_location;
  }

  if (opt_propertylist !== undefined) {
    queryParameters['propertylist'] = opt_propertylist;
  }

  if (opt_preserveHierarchyNodes !== undefined) {
    queryParameters['preserve.hierarchy.nodes'] = opt_preserveHierarchyNodes;
  }

  if (opt_ignoreVersioning !== undefined) {
    queryParameters['ignore.versioning'] = opt_ignoreVersioning;
  }

  if (opt_importAcl !== undefined) {
    queryParameters['import.acl'] = opt_importAcl;
  }

  if (opt_saveThreshold !== undefined) {
    queryParameters['save.threshold'] = opt_saveThreshold;
  }

  if (opt_preserveUserPaths !== undefined) {
    queryParameters['preserve.user.paths'] = opt_preserveUserPaths;
  }

  if (opt_preserveUuid !== undefined) {
    queryParameters['preserve.uuid'] = opt_preserveUuid;
  }

  if (opt_preserveUuidNodetypes !== undefined) {
    queryParameters['preserve.uuid.nodetypes'] = opt_preserveUuidNodetypes;
  }

  if (opt_preserveUuidSubtrees !== undefined) {
    queryParameters['preserve.uuid.subtrees'] = opt_preserveUuidSubtrees;
  }

  if (opt_autoCommit !== undefined) {
    queryParameters['auto.commit'] = opt_autoCommit;
  }

  /** @type {!Object} */
  var httpRequestParams = {
    method: 'POST',
    url: path,
    json: true,
            params: queryParameters,
    headers: headerParams
  };

  if (opt_extraHttpRequestParams) {
    httpRequestParams = angular.extend(httpRequestParams, opt_extraHttpRequestParams);
  }

  return (/** @type {?} */ (this.http_))(httpRequestParams);
}

/**
 * 
 * 
 * @param {!boolean=} opt_post 
 * @param {!boolean=} opt_apply 
 * @param {!boolean=} opt_delete 
 * @param {!string=} opt_action 
 * @param {!string=} opt_location 
 * @param {!Array<!string>=} opt_propertylist 
 * @param {!boolean=} opt_replicationContentUseFileStorage 
 * @param {!number=} opt_replicationContentMaxCommitAttempts 
 * @param {!angular.$http.Config=} opt_extraHttpRequestParams Extra HTTP parameters to send.
 * @return {!angular.$q.Promise<!API.Client.comDayCqReplicationImplReplicationContentFactoryProviderImplInfo>}
 */
API.Client.ConfigmgrApi.prototype.comDayCqReplicationImplReplicationContentFactoryProviderImpl = function(opt_post, opt_apply, opt_delete, opt_action, opt_location, opt_propertylist, opt_replicationContentUseFileStorage, opt_replicationContentMaxCommitAttempts, opt_extraHttpRequestParams) {
  /** @const {string} */
  var path = this.basePath_ + '/system/console/configMgr/com.day.cq.replication.impl.ReplicationContentFactoryProviderImpl';

  /** @type {!Object} */
  var queryParameters = {};

  /** @type {!Object} */
  var headerParams = angular.extend({}, this.defaultHeaders_);
  if (opt_post !== undefined) {
    queryParameters['post'] = opt_post;
  }

  if (opt_apply !== undefined) {
    queryParameters['apply'] = opt_apply;
  }

  if (opt_delete !== undefined) {
    queryParameters['delete'] = opt_delete;
  }

  if (opt_action !== undefined) {
    queryParameters['action'] = opt_action;
  }

  if (opt_location !== undefined) {
    queryParameters['$location'] = opt_location;
  }

  if (opt_propertylist !== undefined) {
    queryParameters['propertylist'] = opt_propertylist;
  }

  if (opt_replicationContentUseFileStorage !== undefined) {
    queryParameters['replication.content.useFileStorage'] = opt_replicationContentUseFileStorage;
  }

  if (opt_replicationContentMaxCommitAttempts !== undefined) {
    queryParameters['replication.content.maxCommitAttempts'] = opt_replicationContentMaxCommitAttempts;
  }

  /** @type {!Object} */
  var httpRequestParams = {
    method: 'POST',
    url: path,
    json: true,
            params: queryParameters,
    headers: headerParams
  };

  if (opt_extraHttpRequestParams) {
    httpRequestParams = angular.extend(httpRequestParams, opt_extraHttpRequestParams);
  }

  return (/** @type {?} */ (this.http_))(httpRequestParams);
}

/**
 * 
 * 
 * @param {!boolean=} opt_post 
 * @param {!boolean=} opt_apply 
 * @param {!boolean=} opt_delete 
 * @param {!string=} opt_action 
 * @param {!string=} opt_location 
 * @param {!Array<!string>=} opt_propertylist 
 * @param {!number=} opt_receiverTmpfileThreshold 
 * @param {!boolean=} opt_receiverPackagesUseInstall 
 * @param {!angular.$http.Config=} opt_extraHttpRequestParams Extra HTTP parameters to send.
 * @return {!angular.$q.Promise<!API.Client.comDayCqReplicationImplReplicationReceiverImplInfo>}
 */
API.Client.ConfigmgrApi.prototype.comDayCqReplicationImplReplicationReceiverImpl = function(opt_post, opt_apply, opt_delete, opt_action, opt_location, opt_propertylist, opt_receiverTmpfileThreshold, opt_receiverPackagesUseInstall, opt_extraHttpRequestParams) {
  /** @const {string} */
  var path = this.basePath_ + '/system/console/configMgr/com.day.cq.replication.impl.ReplicationReceiverImpl';

  /** @type {!Object} */
  var queryParameters = {};

  /** @type {!Object} */
  var headerParams = angular.extend({}, this.defaultHeaders_);
  if (opt_post !== undefined) {
    queryParameters['post'] = opt_post;
  }

  if (opt_apply !== undefined) {
    queryParameters['apply'] = opt_apply;
  }

  if (opt_delete !== undefined) {
    queryParameters['delete'] = opt_delete;
  }

  if (opt_action !== undefined) {
    queryParameters['action'] = opt_action;
  }

  if (opt_location !== undefined) {
    queryParameters['$location'] = opt_location;
  }

  if (opt_propertylist !== undefined) {
    queryParameters['propertylist'] = opt_propertylist;
  }

  if (opt_receiverTmpfileThreshold !== undefined) {
    queryParameters['receiver.tmpfile.threshold'] = opt_receiverTmpfileThreshold;
  }

  if (opt_receiverPackagesUseInstall !== undefined) {
    queryParameters['receiver.packages.use.install'] = opt_receiverPackagesUseInstall;
  }

  /** @type {!Object} */
  var httpRequestParams = {
    method: 'POST',
    url: path,
    json: true,
            params: queryParameters,
    headers: headerParams
  };

  if (opt_extraHttpRequestParams) {
    httpRequestParams = angular.extend(httpRequestParams, opt_extraHttpRequestParams);
  }

  return (/** @type {?} */ (this.http_))(httpRequestParams);
}

/**
 * 
 * 
 * @param {!boolean=} opt_post 
 * @param {!boolean=} opt_apply 
 * @param {!boolean=} opt_delete 
 * @param {!string=} opt_action 
 * @param {!string=} opt_location 
 * @param {!Array<!string>=} opt_propertylist 
 * @param {!boolean=} opt_distributeEvents 
 * @param {!angular.$http.Config=} opt_extraHttpRequestParams Extra HTTP parameters to send.
 * @return {!angular.$q.Promise<!API.Client.comDayCqReplicationImplReplicatorImplInfo>}
 */
API.Client.ConfigmgrApi.prototype.comDayCqReplicationImplReplicatorImpl = function(opt_post, opt_apply, opt_delete, opt_action, opt_location, opt_propertylist, opt_distributeEvents, opt_extraHttpRequestParams) {
  /** @const {string} */
  var path = this.basePath_ + '/system/console/configMgr/com.day.cq.replication.impl.ReplicatorImpl';

  /** @type {!Object} */
  var queryParameters = {};

  /** @type {!Object} */
  var headerParams = angular.extend({}, this.defaultHeaders_);
  if (opt_post !== undefined) {
    queryParameters['post'] = opt_post;
  }

  if (opt_apply !== undefined) {
    queryParameters['apply'] = opt_apply;
  }

  if (opt_delete !== undefined) {
    queryParameters['delete'] = opt_delete;
  }

  if (opt_action !== undefined) {
    queryParameters['action'] = opt_action;
  }

  if (opt_location !== undefined) {
    queryParameters['$location'] = opt_location;
  }

  if (opt_propertylist !== undefined) {
    queryParameters['propertylist'] = opt_propertylist;
  }

  if (opt_distributeEvents !== undefined) {
    queryParameters['distribute_events'] = opt_distributeEvents;
  }

  /** @type {!Object} */
  var httpRequestParams = {
    method: 'POST',
    url: path,
    json: true,
            params: queryParameters,
    headers: headerParams
  };

  if (opt_extraHttpRequestParams) {
    httpRequestParams = angular.extend(httpRequestParams, opt_extraHttpRequestParams);
  }

  return (/** @type {?} */ (this.http_))(httpRequestParams);
}

/**
 * 
 * 
 * @param {!boolean=} opt_post 
 * @param {!boolean=} opt_apply 
 * @param {!boolean=} opt_delete 
 * @param {!string=} opt_action 
 * @param {!string=} opt_location 
 * @param {!Array<!string>=} opt_propertylist 
 * @param {!number=} opt_schedulerPeriod 
 * @param {!angular.$http.Config=} opt_extraHttpRequestParams Extra HTTP parameters to send.
 * @return {!angular.$q.Promise<!API.Client.comDayCqReplicationImplReverseReplicatorInfo>}
 */
API.Client.ConfigmgrApi.prototype.comDayCqReplicationImplReverseReplicator = function(opt_post, opt_apply, opt_delete, opt_action, opt_location, opt_propertylist, opt_schedulerPeriod, opt_extraHttpRequestParams) {
  /** @const {string} */
  var path = this.basePath_ + '/system/console/configMgr/com.day.cq.replication.impl.ReverseReplicator';

  /** @type {!Object} */
  var queryParameters = {};

  /** @type {!Object} */
  var headerParams = angular.extend({}, this.defaultHeaders_);
  if (opt_post !== undefined) {
    queryParameters['post'] = opt_post;
  }

  if (opt_apply !== undefined) {
    queryParameters['apply'] = opt_apply;
  }

  if (opt_delete !== undefined) {
    queryParameters['delete'] = opt_delete;
  }

  if (opt_action !== undefined) {
    queryParameters['action'] = opt_action;
  }

  if (opt_location !== undefined) {
    queryParameters['$location'] = opt_location;
  }

  if (opt_propertylist !== undefined) {
    queryParameters['propertylist'] = opt_propertylist;
  }

  if (opt_schedulerPeriod !== undefined) {
    queryParameters['scheduler.period'] = opt_schedulerPeriod;
  }

  /** @type {!Object} */
  var httpRequestParams = {
    method: 'POST',
    url: path,
    json: true,
            params: queryParameters,
    headers: headerParams
  };

  if (opt_extraHttpRequestParams) {
    httpRequestParams = angular.extend(httpRequestParams, opt_extraHttpRequestParams);
  }

  return (/** @type {?} */ (this.http_))(httpRequestParams);
}

/**
 * 
 * 
 * @param {!boolean=} opt_post 
 * @param {!boolean=} opt_apply 
 * @param {!boolean=} opt_delete 
 * @param {!string=} opt_action 
 * @param {!string=} opt_location 
 * @param {!Array<!string>=} opt_propertylist 
 * @param {!Array<!string>=} opt_disabledCipherSuites 
 * @param {!Array<!string>=} opt_enabledCipherSuites 
 * @param {!angular.$http.Config=} opt_extraHttpRequestParams Extra HTTP parameters to send.
 * @return {!angular.$q.Promise<!API.Client.comDayCqReplicationImplTransportBinaryLessTransportHandlerInfo>}
 */
API.Client.ConfigmgrApi.prototype.comDayCqReplicationImplTransportBinaryLessTransportHandler = function(opt_post, opt_apply, opt_delete, opt_action, opt_location, opt_propertylist, opt_disabledCipherSuites, opt_enabledCipherSuites, opt_extraHttpRequestParams) {
  /** @const {string} */
  var path = this.basePath_ + '/system/console/configMgr/com.day.cq.replication.impl.transport.BinaryLessTransportHandler';

  /** @type {!Object} */
  var queryParameters = {};

  /** @type {!Object} */
  var headerParams = angular.extend({}, this.defaultHeaders_);
  if (opt_post !== undefined) {
    queryParameters['post'] = opt_post;
  }

  if (opt_apply !== undefined) {
    queryParameters['apply'] = opt_apply;
  }

  if (opt_delete !== undefined) {
    queryParameters['delete'] = opt_delete;
  }

  if (opt_action !== undefined) {
    queryParameters['action'] = opt_action;
  }

  if (opt_location !== undefined) {
    queryParameters['$location'] = opt_location;
  }

  if (opt_propertylist !== undefined) {
    queryParameters['propertylist'] = opt_propertylist;
  }

  if (opt_disabledCipherSuites !== undefined) {
    queryParameters['disabled.cipher.suites'] = opt_disabledCipherSuites;
  }

  if (opt_enabledCipherSuites !== undefined) {
    queryParameters['enabled.cipher.suites'] = opt_enabledCipherSuites;
  }

  /** @type {!Object} */
  var httpRequestParams = {
    method: 'POST',
    url: path,
    json: true,
            params: queryParameters,
    headers: headerParams
  };

  if (opt_extraHttpRequestParams) {
    httpRequestParams = angular.extend(httpRequestParams, opt_extraHttpRequestParams);
  }

  return (/** @type {?} */ (this.http_))(httpRequestParams);
}

/**
 * 
 * 
 * @param {!boolean=} opt_post 
 * @param {!boolean=} opt_apply 
 * @param {!boolean=} opt_delete 
 * @param {!string=} opt_action 
 * @param {!string=} opt_location 
 * @param {!Array<!string>=} opt_propertylist 
 * @param {!Array<!string>=} opt_disabledCipherSuites 
 * @param {!Array<!string>=} opt_enabledCipherSuites 
 * @param {!angular.$http.Config=} opt_extraHttpRequestParams Extra HTTP parameters to send.
 * @return {!angular.$q.Promise<!API.Client.comDayCqReplicationImplTransportHttpInfo>}
 */
API.Client.ConfigmgrApi.prototype.comDayCqReplicationImplTransportHttp = function(opt_post, opt_apply, opt_delete, opt_action, opt_location, opt_propertylist, opt_disabledCipherSuites, opt_enabledCipherSuites, opt_extraHttpRequestParams) {
  /** @const {string} */
  var path = this.basePath_ + '/system/console/configMgr/com.day.cq.replication.impl.transport.Http';

  /** @type {!Object} */
  var queryParameters = {};

  /** @type {!Object} */
  var headerParams = angular.extend({}, this.defaultHeaders_);
  if (opt_post !== undefined) {
    queryParameters['post'] = opt_post;
  }

  if (opt_apply !== undefined) {
    queryParameters['apply'] = opt_apply;
  }

  if (opt_delete !== undefined) {
    queryParameters['delete'] = opt_delete;
  }

  if (opt_action !== undefined) {
    queryParameters['action'] = opt_action;
  }

  if (opt_location !== undefined) {
    queryParameters['$location'] = opt_location;
  }

  if (opt_propertylist !== undefined) {
    queryParameters['propertylist'] = opt_propertylist;
  }

  if (opt_disabledCipherSuites !== undefined) {
    queryParameters['disabled.cipher.suites'] = opt_disabledCipherSuites;
  }

  if (opt_enabledCipherSuites !== undefined) {
    queryParameters['enabled.cipher.suites'] = opt_enabledCipherSuites;
  }

  /** @type {!Object} */
  var httpRequestParams = {
    method: 'POST',
    url: path,
    json: true,
            params: queryParameters,
    headers: headerParams
  };

  if (opt_extraHttpRequestParams) {
    httpRequestParams = angular.extend(httpRequestParams, opt_extraHttpRequestParams);
  }

  return (/** @type {?} */ (this.http_))(httpRequestParams);
}

/**
 * 
 * 
 * @param {!boolean=} opt_post 
 * @param {!boolean=} opt_apply 
 * @param {!boolean=} opt_delete 
 * @param {!string=} opt_action 
 * @param {!string=} opt_location 
 * @param {!Array<!string>=} opt_propertylist 
 * @param {!boolean=} opt_repcacheEnable 
 * @param {!number=} opt_repcacheTtl 
 * @param {!number=} opt_repcacheMax 
 * @param {!angular.$http.Config=} opt_extraHttpRequestParams Extra HTTP parameters to send.
 * @return {!angular.$q.Promise<!API.Client.comDayCqReportingImplCacheCacheImplInfo>}
 */
API.Client.ConfigmgrApi.prototype.comDayCqReportingImplCacheCacheImpl = function(opt_post, opt_apply, opt_delete, opt_action, opt_location, opt_propertylist, opt_repcacheEnable, opt_repcacheTtl, opt_repcacheMax, opt_extraHttpRequestParams) {
  /** @const {string} */
  var path = this.basePath_ + '/system/console/configMgr/com.day.cq.reporting.impl.cache.CacheImpl';

  /** @type {!Object} */
  var queryParameters = {};

  /** @type {!Object} */
  var headerParams = angular.extend({}, this.defaultHeaders_);
  if (opt_post !== undefined) {
    queryParameters['post'] = opt_post;
  }

  if (opt_apply !== undefined) {
    queryParameters['apply'] = opt_apply;
  }

  if (opt_delete !== undefined) {
    queryParameters['delete'] = opt_delete;
  }

  if (opt_action !== undefined) {
    queryParameters['action'] = opt_action;
  }

  if (opt_location !== undefined) {
    queryParameters['$location'] = opt_location;
  }

  if (opt_propertylist !== undefined) {
    queryParameters['propertylist'] = opt_propertylist;
  }

  if (opt_repcacheEnable !== undefined) {
    queryParameters['repcache.enable'] = opt_repcacheEnable;
  }

  if (opt_repcacheTtl !== undefined) {
    queryParameters['repcache.ttl'] = opt_repcacheTtl;
  }

  if (opt_repcacheMax !== undefined) {
    queryParameters['repcache.max'] = opt_repcacheMax;
  }

  /** @type {!Object} */
  var httpRequestParams = {
    method: 'POST',
    url: path,
    json: true,
            params: queryParameters,
    headers: headerParams
  };

  if (opt_extraHttpRequestParams) {
    httpRequestParams = angular.extend(httpRequestParams, opt_extraHttpRequestParams);
  }

  return (/** @type {?} */ (this.http_))(httpRequestParams);
}

/**
 * 
 * 
 * @param {!boolean=} opt_post 
 * @param {!boolean=} opt_apply 
 * @param {!boolean=} opt_delete 
 * @param {!string=} opt_action 
 * @param {!string=} opt_location 
 * @param {!Array<!string>=} opt_propertylist 
 * @param {!string=} opt_repconfTimezone 
 * @param {!string=} opt_repconfLocale 
 * @param {!string=} opt_repconfSnapshots 
 * @param {!string=} opt_repconfRepdir 
 * @param {!number=} opt_repconfHourofday 
 * @param {!number=} opt_repconfMinofhour 
 * @param {!number=} opt_repconfMaxrows 
 * @param {!boolean=} opt_repconfFakedata 
 * @param {!string=} opt_repconfSnapshotuser 
 * @param {!boolean=} opt_repconfEnforcesnapshotuser 
 * @param {!angular.$http.Config=} opt_extraHttpRequestParams Extra HTTP parameters to send.
 * @return {!angular.$q.Promise<!API.Client.comDayCqReportingImplConfigServiceImplInfo>}
 */
API.Client.ConfigmgrApi.prototype.comDayCqReportingImplConfigServiceImpl = function(opt_post, opt_apply, opt_delete, opt_action, opt_location, opt_propertylist, opt_repconfTimezone, opt_repconfLocale, opt_repconfSnapshots, opt_repconfRepdir, opt_repconfHourofday, opt_repconfMinofhour, opt_repconfMaxrows, opt_repconfFakedata, opt_repconfSnapshotuser, opt_repconfEnforcesnapshotuser, opt_extraHttpRequestParams) {
  /** @const {string} */
  var path = this.basePath_ + '/system/console/configMgr/com.day.cq.reporting.impl.ConfigServiceImpl';

  /** @type {!Object} */
  var queryParameters = {};

  /** @type {!Object} */
  var headerParams = angular.extend({}, this.defaultHeaders_);
  if (opt_post !== undefined) {
    queryParameters['post'] = opt_post;
  }

  if (opt_apply !== undefined) {
    queryParameters['apply'] = opt_apply;
  }

  if (opt_delete !== undefined) {
    queryParameters['delete'] = opt_delete;
  }

  if (opt_action !== undefined) {
    queryParameters['action'] = opt_action;
  }

  if (opt_location !== undefined) {
    queryParameters['$location'] = opt_location;
  }

  if (opt_propertylist !== undefined) {
    queryParameters['propertylist'] = opt_propertylist;
  }

  if (opt_repconfTimezone !== undefined) {
    queryParameters['repconf.timezone'] = opt_repconfTimezone;
  }

  if (opt_repconfLocale !== undefined) {
    queryParameters['repconf.locale'] = opt_repconfLocale;
  }

  if (opt_repconfSnapshots !== undefined) {
    queryParameters['repconf.snapshots'] = opt_repconfSnapshots;
  }

  if (opt_repconfRepdir !== undefined) {
    queryParameters['repconf.repdir'] = opt_repconfRepdir;
  }

  if (opt_repconfHourofday !== undefined) {
    queryParameters['repconf.hourofday'] = opt_repconfHourofday;
  }

  if (opt_repconfMinofhour !== undefined) {
    queryParameters['repconf.minofhour'] = opt_repconfMinofhour;
  }

  if (opt_repconfMaxrows !== undefined) {
    queryParameters['repconf.maxrows'] = opt_repconfMaxrows;
  }

  if (opt_repconfFakedata !== undefined) {
    queryParameters['repconf.fakedata'] = opt_repconfFakedata;
  }

  if (opt_repconfSnapshotuser !== undefined) {
    queryParameters['repconf.snapshotuser'] = opt_repconfSnapshotuser;
  }

  if (opt_repconfEnforcesnapshotuser !== undefined) {
    queryParameters['repconf.enforcesnapshotuser'] = opt_repconfEnforcesnapshotuser;
  }

  /** @type {!Object} */
  var httpRequestParams = {
    method: 'POST',
    url: path,
    json: true,
            params: queryParameters,
    headers: headerParams
  };

  if (opt_extraHttpRequestParams) {
    httpRequestParams = angular.extend(httpRequestParams, opt_extraHttpRequestParams);
  }

  return (/** @type {?} */ (this.http_))(httpRequestParams);
}

/**
 * 
 * 
 * @param {!boolean=} opt_post 
 * @param {!boolean=} opt_apply 
 * @param {!boolean=} opt_delete 
 * @param {!string=} opt_action 
 * @param {!string=} opt_location 
 * @param {!Array<!string>=} opt_propertylist 
 * @param {!string=} opt_requestLogOutput 
 * @param {!angular.$http.Config=} opt_extraHttpRequestParams Extra HTTP parameters to send.
 * @return {!angular.$q.Promise<!API.Client.comDayCqReportingImplRLogAnalyzerInfo>}
 */
API.Client.ConfigmgrApi.prototype.comDayCqReportingImplRLogAnalyzer = function(opt_post, opt_apply, opt_delete, opt_action, opt_location, opt_propertylist, opt_requestLogOutput, opt_extraHttpRequestParams) {
  /** @const {string} */
  var path = this.basePath_ + '/system/console/configMgr/com.day.cq.reporting.impl.RLogAnalyzer';

  /** @type {!Object} */
  var queryParameters = {};

  /** @type {!Object} */
  var headerParams = angular.extend({}, this.defaultHeaders_);
  if (opt_post !== undefined) {
    queryParameters['post'] = opt_post;
  }

  if (opt_apply !== undefined) {
    queryParameters['apply'] = opt_apply;
  }

  if (opt_delete !== undefined) {
    queryParameters['delete'] = opt_delete;
  }

  if (opt_action !== undefined) {
    queryParameters['action'] = opt_action;
  }

  if (opt_location !== undefined) {
    queryParameters['$location'] = opt_location;
  }

  if (opt_propertylist !== undefined) {
    queryParameters['propertylist'] = opt_propertylist;
  }

  if (opt_requestLogOutput !== undefined) {
    queryParameters['request.log.output'] = opt_requestLogOutput;
  }

  /** @type {!Object} */
  var httpRequestParams = {
    method: 'POST',
    url: path,
    json: true,
            params: queryParameters,
    headers: headerParams
  };

  if (opt_extraHttpRequestParams) {
    httpRequestParams = angular.extend(httpRequestParams, opt_extraHttpRequestParams);
  }

  return (/** @type {?} */ (this.http_))(httpRequestParams);
}

/**
 * 
 * 
 * @param {!boolean=} opt_post 
 * @param {!boolean=} opt_apply 
 * @param {!boolean=} opt_delete 
 * @param {!string=} opt_action 
 * @param {!string=} opt_location 
 * @param {!Array<!string>=} opt_propertylist 
 * @param {!number=} opt_schedulerPeriod 
 * @param {!boolean=} opt_schedulerConcurrent 
 * @param {!number=} opt_serviceBadLinkToleranceInterval 
 * @param {!Array<!string>=} opt_serviceCheckOverridePatterns 
 * @param {!boolean=} opt_serviceCacheBrokenInternalLinks 
 * @param {!Array<!string>=} opt_serviceSpecialLinkPrefix 
 * @param {!Array<!string>=} opt_serviceSpecialLinkPatterns 
 * @param {!angular.$http.Config=} opt_extraHttpRequestParams Extra HTTP parameters to send.
 * @return {!angular.$q.Promise<!API.Client.comDayCqRewriterLinkcheckerImplLinkCheckerImplInfo>}
 */
API.Client.ConfigmgrApi.prototype.comDayCqRewriterLinkcheckerImplLinkCheckerImpl = function(opt_post, opt_apply, opt_delete, opt_action, opt_location, opt_propertylist, opt_schedulerPeriod, opt_schedulerConcurrent, opt_serviceBadLinkToleranceInterval, opt_serviceCheckOverridePatterns, opt_serviceCacheBrokenInternalLinks, opt_serviceSpecialLinkPrefix, opt_serviceSpecialLinkPatterns, opt_extraHttpRequestParams) {
  /** @const {string} */
  var path = this.basePath_ + '/system/console/configMgr/com.day.cq.rewriter.linkchecker.impl.LinkCheckerImpl';

  /** @type {!Object} */
  var queryParameters = {};

  /** @type {!Object} */
  var headerParams = angular.extend({}, this.defaultHeaders_);
  if (opt_post !== undefined) {
    queryParameters['post'] = opt_post;
  }

  if (opt_apply !== undefined) {
    queryParameters['apply'] = opt_apply;
  }

  if (opt_delete !== undefined) {
    queryParameters['delete'] = opt_delete;
  }

  if (opt_action !== undefined) {
    queryParameters['action'] = opt_action;
  }

  if (opt_location !== undefined) {
    queryParameters['$location'] = opt_location;
  }

  if (opt_propertylist !== undefined) {
    queryParameters['propertylist'] = opt_propertylist;
  }

  if (opt_schedulerPeriod !== undefined) {
    queryParameters['scheduler.period'] = opt_schedulerPeriod;
  }

  if (opt_schedulerConcurrent !== undefined) {
    queryParameters['scheduler.concurrent'] = opt_schedulerConcurrent;
  }

  if (opt_serviceBadLinkToleranceInterval !== undefined) {
    queryParameters['service.bad_link_tolerance_interval'] = opt_serviceBadLinkToleranceInterval;
  }

  if (opt_serviceCheckOverridePatterns !== undefined) {
    queryParameters['service.check_override_patterns'] = opt_serviceCheckOverridePatterns;
  }

  if (opt_serviceCacheBrokenInternalLinks !== undefined) {
    queryParameters['service.cache_broken_internal_links'] = opt_serviceCacheBrokenInternalLinks;
  }

  if (opt_serviceSpecialLinkPrefix !== undefined) {
    queryParameters['service.special_link_prefix'] = opt_serviceSpecialLinkPrefix;
  }

  if (opt_serviceSpecialLinkPatterns !== undefined) {
    queryParameters['service.special_link_patterns'] = opt_serviceSpecialLinkPatterns;
  }

  /** @type {!Object} */
  var httpRequestParams = {
    method: 'POST',
    url: path,
    json: true,
            params: queryParameters,
    headers: headerParams
  };

  if (opt_extraHttpRequestParams) {
    httpRequestParams = angular.extend(httpRequestParams, opt_extraHttpRequestParams);
  }

  return (/** @type {?} */ (this.http_))(httpRequestParams);
}

/**
 * 
 * 
 * @param {!boolean=} opt_post 
 * @param {!boolean=} opt_apply 
 * @param {!boolean=} opt_delete 
 * @param {!string=} opt_action 
 * @param {!string=} opt_location 
 * @param {!Array<!string>=} opt_propertylist 
 * @param {!number=} opt_schedulerPeriod 
 * @param {!boolean=} opt_schedulerConcurrent 
 * @param {!number=} opt_goodLinkTestInterval 
 * @param {!number=} opt_badLinkTestInterval 
 * @param {!number=} opt_linkUnusedInterval 
 * @param {!number=} opt_connectionTimeout 
 * @param {!angular.$http.Config=} opt_extraHttpRequestParams Extra HTTP parameters to send.
 * @return {!angular.$q.Promise<!API.Client.comDayCqRewriterLinkcheckerImplLinkCheckerTaskInfo>}
 */
API.Client.ConfigmgrApi.prototype.comDayCqRewriterLinkcheckerImplLinkCheckerTask = function(opt_post, opt_apply, opt_delete, opt_action, opt_location, opt_propertylist, opt_schedulerPeriod, opt_schedulerConcurrent, opt_goodLinkTestInterval, opt_badLinkTestInterval, opt_linkUnusedInterval, opt_connectionTimeout, opt_extraHttpRequestParams) {
  /** @const {string} */
  var path = this.basePath_ + '/system/console/configMgr/com.day.cq.rewriter.linkchecker.impl.LinkCheckerTask';

  /** @type {!Object} */
  var queryParameters = {};

  /** @type {!Object} */
  var headerParams = angular.extend({}, this.defaultHeaders_);
  if (opt_post !== undefined) {
    queryParameters['post'] = opt_post;
  }

  if (opt_apply !== undefined) {
    queryParameters['apply'] = opt_apply;
  }

  if (opt_delete !== undefined) {
    queryParameters['delete'] = opt_delete;
  }

  if (opt_action !== undefined) {
    queryParameters['action'] = opt_action;
  }

  if (opt_location !== undefined) {
    queryParameters['$location'] = opt_location;
  }

  if (opt_propertylist !== undefined) {
    queryParameters['propertylist'] = opt_propertylist;
  }

  if (opt_schedulerPeriod !== undefined) {
    queryParameters['scheduler.period'] = opt_schedulerPeriod;
  }

  if (opt_schedulerConcurrent !== undefined) {
    queryParameters['scheduler.concurrent'] = opt_schedulerConcurrent;
  }

  if (opt_goodLinkTestInterval !== undefined) {
    queryParameters['good_link_test_interval'] = opt_goodLinkTestInterval;
  }

  if (opt_badLinkTestInterval !== undefined) {
    queryParameters['bad_link_test_interval'] = opt_badLinkTestInterval;
  }

  if (opt_linkUnusedInterval !== undefined) {
    queryParameters['link_unused_interval'] = opt_linkUnusedInterval;
  }

  if (opt_connectionTimeout !== undefined) {
    queryParameters['connection.timeout'] = opt_connectionTimeout;
  }

  /** @type {!Object} */
  var httpRequestParams = {
    method: 'POST',
    url: path,
    json: true,
            params: queryParameters,
    headers: headerParams
  };

  if (opt_extraHttpRequestParams) {
    httpRequestParams = angular.extend(httpRequestParams, opt_extraHttpRequestParams);
  }

  return (/** @type {?} */ (this.http_))(httpRequestParams);
}

/**
 * 
 * 
 * @param {!boolean=} opt_post 
 * @param {!boolean=} opt_apply 
 * @param {!boolean=} opt_delete 
 * @param {!string=} opt_action 
 * @param {!string=} opt_location 
 * @param {!Array<!string>=} opt_propertylist 
 * @param {!boolean=} opt_linkcheckertransformerDisableRewriting 
 * @param {!boolean=} opt_linkcheckertransformerDisableChecking 
 * @param {!number=} opt_linkcheckertransformerMapCacheSize 
 * @param {!boolean=} opt_linkcheckertransformerStrictExtensionCheck 
 * @param {!boolean=} opt_linkcheckertransformerStripHtmltExtension 
 * @param {!Array<!string>=} opt_linkcheckertransformerRewriteElements 
 * @param {!Array<!string>=} opt_linkcheckertransformerStripExtensionPathBlacklist 
 * @param {!angular.$http.Config=} opt_extraHttpRequestParams Extra HTTP parameters to send.
 * @return {!angular.$q.Promise<!API.Client.comDayCqRewriterLinkcheckerImplLinkCheckerTransformerFactoryInfo>}
 */
API.Client.ConfigmgrApi.prototype.comDayCqRewriterLinkcheckerImplLinkCheckerTransformerFactory = function(opt_post, opt_apply, opt_delete, opt_action, opt_location, opt_propertylist, opt_linkcheckertransformerDisableRewriting, opt_linkcheckertransformerDisableChecking, opt_linkcheckertransformerMapCacheSize, opt_linkcheckertransformerStrictExtensionCheck, opt_linkcheckertransformerStripHtmltExtension, opt_linkcheckertransformerRewriteElements, opt_linkcheckertransformerStripExtensionPathBlacklist, opt_extraHttpRequestParams) {
  /** @const {string} */
  var path = this.basePath_ + '/system/console/configMgr/com.day.cq.rewriter.linkchecker.impl.LinkCheckerTransformerFactory';

  /** @type {!Object} */
  var queryParameters = {};

  /** @type {!Object} */
  var headerParams = angular.extend({}, this.defaultHeaders_);
  if (opt_post !== undefined) {
    queryParameters['post'] = opt_post;
  }

  if (opt_apply !== undefined) {
    queryParameters['apply'] = opt_apply;
  }

  if (opt_delete !== undefined) {
    queryParameters['delete'] = opt_delete;
  }

  if (opt_action !== undefined) {
    queryParameters['action'] = opt_action;
  }

  if (opt_location !== undefined) {
    queryParameters['$location'] = opt_location;
  }

  if (opt_propertylist !== undefined) {
    queryParameters['propertylist'] = opt_propertylist;
  }

  if (opt_linkcheckertransformerDisableRewriting !== undefined) {
    queryParameters['linkcheckertransformer.disableRewriting'] = opt_linkcheckertransformerDisableRewriting;
  }

  if (opt_linkcheckertransformerDisableChecking !== undefined) {
    queryParameters['linkcheckertransformer.disableChecking'] = opt_linkcheckertransformerDisableChecking;
  }

  if (opt_linkcheckertransformerMapCacheSize !== undefined) {
    queryParameters['linkcheckertransformer.mapCacheSize'] = opt_linkcheckertransformerMapCacheSize;
  }

  if (opt_linkcheckertransformerStrictExtensionCheck !== undefined) {
    queryParameters['linkcheckertransformer.strictExtensionCheck'] = opt_linkcheckertransformerStrictExtensionCheck;
  }

  if (opt_linkcheckertransformerStripHtmltExtension !== undefined) {
    queryParameters['linkcheckertransformer.stripHtmltExtension'] = opt_linkcheckertransformerStripHtmltExtension;
  }

  if (opt_linkcheckertransformerRewriteElements !== undefined) {
    queryParameters['linkcheckertransformer.rewriteElements'] = opt_linkcheckertransformerRewriteElements;
  }

  if (opt_linkcheckertransformerStripExtensionPathBlacklist !== undefined) {
    queryParameters['linkcheckertransformer.stripExtensionPathBlacklist'] = opt_linkcheckertransformerStripExtensionPathBlacklist;
  }

  /** @type {!Object} */
  var httpRequestParams = {
    method: 'POST',
    url: path,
    json: true,
            params: queryParameters,
    headers: headerParams
  };

  if (opt_extraHttpRequestParams) {
    httpRequestParams = angular.extend(httpRequestParams, opt_extraHttpRequestParams);
  }

  return (/** @type {?} */ (this.http_))(httpRequestParams);
}

/**
 * 
 * 
 * @param {!boolean=} opt_post 
 * @param {!boolean=} opt_apply 
 * @param {!boolean=} opt_delete 
 * @param {!string=} opt_action 
 * @param {!string=} opt_location 
 * @param {!Array<!string>=} opt_propertylist 
 * @param {!number=} opt_serviceMaxLinksPerHost 
 * @param {!boolean=} opt_serviceSaveExternalLinkReferences 
 * @param {!angular.$http.Config=} opt_extraHttpRequestParams Extra HTTP parameters to send.
 * @return {!angular.$q.Promise<!API.Client.comDayCqRewriterLinkcheckerImplLinkInfoStorageImplInfo>}
 */
API.Client.ConfigmgrApi.prototype.comDayCqRewriterLinkcheckerImplLinkInfoStorageImpl = function(opt_post, opt_apply, opt_delete, opt_action, opt_location, opt_propertylist, opt_serviceMaxLinksPerHost, opt_serviceSaveExternalLinkReferences, opt_extraHttpRequestParams) {
  /** @const {string} */
  var path = this.basePath_ + '/system/console/configMgr/com.day.cq.rewriter.linkchecker.impl.LinkInfoStorageImpl';

  /** @type {!Object} */
  var queryParameters = {};

  /** @type {!Object} */
  var headerParams = angular.extend({}, this.defaultHeaders_);
  if (opt_post !== undefined) {
    queryParameters['post'] = opt_post;
  }

  if (opt_apply !== undefined) {
    queryParameters['apply'] = opt_apply;
  }

  if (opt_delete !== undefined) {
    queryParameters['delete'] = opt_delete;
  }

  if (opt_action !== undefined) {
    queryParameters['action'] = opt_action;
  }

  if (opt_location !== undefined) {
    queryParameters['$location'] = opt_location;
  }

  if (opt_propertylist !== undefined) {
    queryParameters['propertylist'] = opt_propertylist;
  }

  if (opt_serviceMaxLinksPerHost !== undefined) {
    queryParameters['service.max_links_per_host'] = opt_serviceMaxLinksPerHost;
  }

  if (opt_serviceSaveExternalLinkReferences !== undefined) {
    queryParameters['service.save_external_link_references'] = opt_serviceSaveExternalLinkReferences;
  }

  /** @type {!Object} */
  var httpRequestParams = {
    method: 'POST',
    url: path,
    json: true,
            params: queryParameters,
    headers: headerParams
  };

  if (opt_extraHttpRequestParams) {
    httpRequestParams = angular.extend(httpRequestParams, opt_extraHttpRequestParams);
  }

  return (/** @type {?} */ (this.http_))(httpRequestParams);
}

/**
 * 
 * 
 * @param {!boolean=} opt_post 
 * @param {!boolean=} opt_apply 
 * @param {!boolean=} opt_delete 
 * @param {!string=} opt_action 
 * @param {!string=} opt_location 
 * @param {!Array<!string>=} opt_propertylist 
 * @param {!Array<!string>=} opt_htmlparserProcessTags 
 * @param {!boolean=} opt_htmlparserPreserveCamelCase 
 * @param {!angular.$http.Config=} opt_extraHttpRequestParams Extra HTTP parameters to send.
 * @return {!angular.$q.Promise<!API.Client.comDayCqRewriterProcessorImplHtmlParserFactoryInfo>}
 */
API.Client.ConfigmgrApi.prototype.comDayCqRewriterProcessorImplHtmlParserFactory = function(opt_post, opt_apply, opt_delete, opt_action, opt_location, opt_propertylist, opt_htmlparserProcessTags, opt_htmlparserPreserveCamelCase, opt_extraHttpRequestParams) {
  /** @const {string} */
  var path = this.basePath_ + '/system/console/configMgr/com.day.cq.rewriter.processor.impl.HtmlParserFactory';

  /** @type {!Object} */
  var queryParameters = {};

  /** @type {!Object} */
  var headerParams = angular.extend({}, this.defaultHeaders_);
  if (opt_post !== undefined) {
    queryParameters['post'] = opt_post;
  }

  if (opt_apply !== undefined) {
    queryParameters['apply'] = opt_apply;
  }

  if (opt_delete !== undefined) {
    queryParameters['delete'] = opt_delete;
  }

  if (opt_action !== undefined) {
    queryParameters['action'] = opt_action;
  }

  if (opt_location !== undefined) {
    queryParameters['$location'] = opt_location;
  }

  if (opt_propertylist !== undefined) {
    queryParameters['propertylist'] = opt_propertylist;
  }

  if (opt_htmlparserProcessTags !== undefined) {
    queryParameters['htmlparser.processTags'] = opt_htmlparserProcessTags;
  }

  if (opt_htmlparserPreserveCamelCase !== undefined) {
    queryParameters['htmlparser.preserveCamelCase'] = opt_htmlparserPreserveCamelCase;
  }

  /** @type {!Object} */
  var httpRequestParams = {
    method: 'POST',
    url: path,
    json: true,
            params: queryParameters,
    headers: headerParams
  };

  if (opt_extraHttpRequestParams) {
    httpRequestParams = angular.extend(httpRequestParams, opt_extraHttpRequestParams);
  }

  return (/** @type {?} */ (this.http_))(httpRequestParams);
}

/**
 * 
 * 
 * @param {!boolean=} opt_post 
 * @param {!boolean=} opt_apply 
 * @param {!boolean=} opt_delete 
 * @param {!string=} opt_action 
 * @param {!string=} opt_location 
 * @param {!Array<!string>=} opt_propertylist 
 * @param {!Array<!string>=} opt_excerptProperties 
 * @param {!number=} opt_cacheMaxEntries 
 * @param {!number=} opt_cacheEntryLifetime 
 * @param {!boolean=} opt_xpathUnion 
 * @param {!angular.$http.Config=} opt_extraHttpRequestParams Extra HTTP parameters to send.
 * @return {!angular.$q.Promise<!API.Client.comDayCqSearchImplBuilderQueryBuilderImplInfo>}
 */
API.Client.ConfigmgrApi.prototype.comDayCqSearchImplBuilderQueryBuilderImpl = function(opt_post, opt_apply, opt_delete, opt_action, opt_location, opt_propertylist, opt_excerptProperties, opt_cacheMaxEntries, opt_cacheEntryLifetime, opt_xpathUnion, opt_extraHttpRequestParams) {
  /** @const {string} */
  var path = this.basePath_ + '/system/console/configMgr/com.day.cq.search.impl.builder.QueryBuilderImpl';

  /** @type {!Object} */
  var queryParameters = {};

  /** @type {!Object} */
  var headerParams = angular.extend({}, this.defaultHeaders_);
  if (opt_post !== undefined) {
    queryParameters['post'] = opt_post;
  }

  if (opt_apply !== undefined) {
    queryParameters['apply'] = opt_apply;
  }

  if (opt_delete !== undefined) {
    queryParameters['delete'] = opt_delete;
  }

  if (opt_action !== undefined) {
    queryParameters['action'] = opt_action;
  }

  if (opt_location !== undefined) {
    queryParameters['$location'] = opt_location;
  }

  if (opt_propertylist !== undefined) {
    queryParameters['propertylist'] = opt_propertylist;
  }

  if (opt_excerptProperties !== undefined) {
    queryParameters['excerpt.properties'] = opt_excerptProperties;
  }

  if (opt_cacheMaxEntries !== undefined) {
    queryParameters['cache.max.entries'] = opt_cacheMaxEntries;
  }

  if (opt_cacheEntryLifetime !== undefined) {
    queryParameters['cache.entry.lifetime'] = opt_cacheEntryLifetime;
  }

  if (opt_xpathUnion !== undefined) {
    queryParameters['xpath.union'] = opt_xpathUnion;
  }

  /** @type {!Object} */
  var httpRequestParams = {
    method: 'POST',
    url: path,
    json: true,
            params: queryParameters,
    headers: headerParams
  };

  if (opt_extraHttpRequestParams) {
    httpRequestParams = angular.extend(httpRequestParams, opt_extraHttpRequestParams);
  }

  return (/** @type {?} */ (this.http_))(httpRequestParams);
}

/**
 * 
 * 
 * @param {!boolean=} opt_post 
 * @param {!boolean=} opt_apply 
 * @param {!boolean=} opt_delete 
 * @param {!string=} opt_action 
 * @param {!string=} opt_location 
 * @param {!Array<!string>=} opt_propertylist 
 * @param {!string=} opt_pathBuilderTarget 
 * @param {!string=} opt_suggestBasepath 
 * @param {!angular.$http.Config=} opt_extraHttpRequestParams Extra HTTP parameters to send.
 * @return {!angular.$q.Promise<!API.Client.comDayCqSearchSuggestImplSuggestionIndexManagerImplInfo>}
 */
API.Client.ConfigmgrApi.prototype.comDayCqSearchSuggestImplSuggestionIndexManagerImpl = function(opt_post, opt_apply, opt_delete, opt_action, opt_location, opt_propertylist, opt_pathBuilderTarget, opt_suggestBasepath, opt_extraHttpRequestParams) {
  /** @const {string} */
  var path = this.basePath_ + '/system/console/configMgr/com.day.cq.search.suggest.impl.SuggestionIndexManagerImpl';

  /** @type {!Object} */
  var queryParameters = {};

  /** @type {!Object} */
  var headerParams = angular.extend({}, this.defaultHeaders_);
  if (opt_post !== undefined) {
    queryParameters['post'] = opt_post;
  }

  if (opt_apply !== undefined) {
    queryParameters['apply'] = opt_apply;
  }

  if (opt_delete !== undefined) {
    queryParameters['delete'] = opt_delete;
  }

  if (opt_action !== undefined) {
    queryParameters['action'] = opt_action;
  }

  if (opt_location !== undefined) {
    queryParameters['$location'] = opt_location;
  }

  if (opt_propertylist !== undefined) {
    queryParameters['propertylist'] = opt_propertylist;
  }

  if (opt_pathBuilderTarget !== undefined) {
    queryParameters['pathBuilder.target'] = opt_pathBuilderTarget;
  }

  if (opt_suggestBasepath !== undefined) {
    queryParameters['suggest.basepath'] = opt_suggestBasepath;
  }

  /** @type {!Object} */
  var httpRequestParams = {
    method: 'POST',
    url: path,
    json: true,
            params: queryParameters,
    headers: headerParams
  };

  if (opt_extraHttpRequestParams) {
    httpRequestParams = angular.extend(httpRequestParams, opt_extraHttpRequestParams);
  }

  return (/** @type {?} */ (this.http_))(httpRequestParams);
}

/**
 * 
 * 
 * @param {!boolean=} opt_post 
 * @param {!boolean=} opt_apply 
 * @param {!boolean=} opt_delete 
 * @param {!string=} opt_action 
 * @param {!string=} opt_location 
 * @param {!Array<!string>=} opt_propertylist 
 * @param {!boolean=} opt_cqSearchpromoteConfighandlerEnabled 
 * @param {!angular.$http.Config=} opt_extraHttpRequestParams Extra HTTP parameters to send.
 * @return {!angular.$q.Promise<!API.Client.comDayCqSearchpromoteImplPublishSearchPromoteConfigHandlerInfo>}
 */
API.Client.ConfigmgrApi.prototype.comDayCqSearchpromoteImplPublishSearchPromoteConfigHandler = function(opt_post, opt_apply, opt_delete, opt_action, opt_location, opt_propertylist, opt_cqSearchpromoteConfighandlerEnabled, opt_extraHttpRequestParams) {
  /** @const {string} */
  var path = this.basePath_ + '/system/console/configMgr/com.day.cq.searchpromote.impl.PublishSearchPromoteConfigHandler';

  /** @type {!Object} */
  var queryParameters = {};

  /** @type {!Object} */
  var headerParams = angular.extend({}, this.defaultHeaders_);
  if (opt_post !== undefined) {
    queryParameters['post'] = opt_post;
  }

  if (opt_apply !== undefined) {
    queryParameters['apply'] = opt_apply;
  }

  if (opt_delete !== undefined) {
    queryParameters['delete'] = opt_delete;
  }

  if (opt_action !== undefined) {
    queryParameters['action'] = opt_action;
  }

  if (opt_location !== undefined) {
    queryParameters['$location'] = opt_location;
  }

  if (opt_propertylist !== undefined) {
    queryParameters['propertylist'] = opt_propertylist;
  }

  if (opt_cqSearchpromoteConfighandlerEnabled !== undefined) {
    queryParameters['cq.searchpromote.confighandler.enabled'] = opt_cqSearchpromoteConfighandlerEnabled;
  }

  /** @type {!Object} */
  var httpRequestParams = {
    method: 'POST',
    url: path,
    json: true,
            params: queryParameters,
    headers: headerParams
  };

  if (opt_extraHttpRequestParams) {
    httpRequestParams = angular.extend(httpRequestParams, opt_extraHttpRequestParams);
  }

  return (/** @type {?} */ (this.http_))(httpRequestParams);
}

/**
 * 
 * 
 * @param {!boolean=} opt_post 
 * @param {!boolean=} opt_apply 
 * @param {!boolean=} opt_delete 
 * @param {!string=} opt_action 
 * @param {!string=} opt_location 
 * @param {!Array<!string>=} opt_propertylist 
 * @param {!string=} opt_cqSearchpromoteConfigurationServerUri 
 * @param {!string=} opt_cqSearchpromoteConfigurationEnvironment 
 * @param {!number=} opt_connectionTimeout 
 * @param {!number=} opt_socketTimeout 
 * @param {!angular.$http.Config=} opt_extraHttpRequestParams Extra HTTP parameters to send.
 * @return {!angular.$q.Promise<!API.Client.comDayCqSearchpromoteImplSearchPromoteServiceImplInfo>}
 */
API.Client.ConfigmgrApi.prototype.comDayCqSearchpromoteImplSearchPromoteServiceImpl = function(opt_post, opt_apply, opt_delete, opt_action, opt_location, opt_propertylist, opt_cqSearchpromoteConfigurationServerUri, opt_cqSearchpromoteConfigurationEnvironment, opt_connectionTimeout, opt_socketTimeout, opt_extraHttpRequestParams) {
  /** @const {string} */
  var path = this.basePath_ + '/system/console/configMgr/com.day.cq.searchpromote.impl.SearchPromoteServiceImpl';

  /** @type {!Object} */
  var queryParameters = {};

  /** @type {!Object} */
  var headerParams = angular.extend({}, this.defaultHeaders_);
  if (opt_post !== undefined) {
    queryParameters['post'] = opt_post;
  }

  if (opt_apply !== undefined) {
    queryParameters['apply'] = opt_apply;
  }

  if (opt_delete !== undefined) {
    queryParameters['delete'] = opt_delete;
  }

  if (opt_action !== undefined) {
    queryParameters['action'] = opt_action;
  }

  if (opt_location !== undefined) {
    queryParameters['$location'] = opt_location;
  }

  if (opt_propertylist !== undefined) {
    queryParameters['propertylist'] = opt_propertylist;
  }

  if (opt_cqSearchpromoteConfigurationServerUri !== undefined) {
    queryParameters['cq.searchpromote.configuration.server.uri'] = opt_cqSearchpromoteConfigurationServerUri;
  }

  if (opt_cqSearchpromoteConfigurationEnvironment !== undefined) {
    queryParameters['cq.searchpromote.configuration.environment'] = opt_cqSearchpromoteConfigurationEnvironment;
  }

  if (opt_connectionTimeout !== undefined) {
    queryParameters['connection.timeout'] = opt_connectionTimeout;
  }

  if (opt_socketTimeout !== undefined) {
    queryParameters['socket.timeout'] = opt_socketTimeout;
  }

  /** @type {!Object} */
  var httpRequestParams = {
    method: 'POST',
    url: path,
    json: true,
            params: queryParameters,
    headers: headerParams
  };

  if (opt_extraHttpRequestParams) {
    httpRequestParams = angular.extend(httpRequestParams, opt_extraHttpRequestParams);
  }

  return (/** @type {?} */ (this.http_))(httpRequestParams);
}

/**
 * 
 * 
 * @param {!boolean=} opt_post 
 * @param {!boolean=} opt_apply 
 * @param {!boolean=} opt_delete 
 * @param {!string=} opt_action 
 * @param {!string=} opt_location 
 * @param {!Array<!string>=} opt_propertylist 
 * @param {!Array<!string>=} opt_cqAclsetupRules 
 * @param {!angular.$http.Config=} opt_extraHttpRequestParams Extra HTTP parameters to send.
 * @return {!angular.$q.Promise<!API.Client.comDayCqSecurityACLSetupInfo>}
 */
API.Client.ConfigmgrApi.prototype.comDayCqSecurityACLSetup = function(opt_post, opt_apply, opt_delete, opt_action, opt_location, opt_propertylist, opt_cqAclsetupRules, opt_extraHttpRequestParams) {
  /** @const {string} */
  var path = this.basePath_ + '/system/console/configMgr/com.day.cq.security.ACLSetup';

  /** @type {!Object} */
  var queryParameters = {};

  /** @type {!Object} */
  var headerParams = angular.extend({}, this.defaultHeaders_);
  if (opt_post !== undefined) {
    queryParameters['post'] = opt_post;
  }

  if (opt_apply !== undefined) {
    queryParameters['apply'] = opt_apply;
  }

  if (opt_delete !== undefined) {
    queryParameters['delete'] = opt_delete;
  }

  if (opt_action !== undefined) {
    queryParameters['action'] = opt_action;
  }

  if (opt_location !== undefined) {
    queryParameters['$location'] = opt_location;
  }

  if (opt_propertylist !== undefined) {
    queryParameters['propertylist'] = opt_propertylist;
  }

  if (opt_cqAclsetupRules !== undefined) {
    queryParameters['cq.aclsetup.rules'] = opt_cqAclsetupRules;
  }

  /** @type {!Object} */
  var httpRequestParams = {
    method: 'POST',
    url: path,
    json: true,
            params: queryParameters,
    headers: headerParams
  };

  if (opt_extraHttpRequestParams) {
    httpRequestParams = angular.extend(httpRequestParams, opt_extraHttpRequestParams);
  }

  return (/** @type {?} */ (this.http_))(httpRequestParams);
}

/**
 * 
 * 
 * @param {!boolean=} opt_post 
 * @param {!boolean=} opt_apply 
 * @param {!boolean=} opt_delete 
 * @param {!string=} opt_action 
 * @param {!string=} opt_location 
 * @param {!Array<!string>=} opt_propertylist 
 * @param {!number=} opt_schedulerPeriod 
 * @param {!boolean=} opt_schedulerConcurrent 
 * @param {!string=} opt_path 
 * @param {!string=} opt_workspace 
 * @param {!string=} opt_keywordsPath 
 * @param {!boolean=} opt_asyncEntries 
 * @param {!angular.$http.Config=} opt_extraHttpRequestParams Extra HTTP parameters to send.
 * @return {!angular.$q.Promise<!API.Client.comDayCqStatisticsImplStatisticsServiceImplInfo>}
 */
API.Client.ConfigmgrApi.prototype.comDayCqStatisticsImplStatisticsServiceImpl = function(opt_post, opt_apply, opt_delete, opt_action, opt_location, opt_propertylist, opt_schedulerPeriod, opt_schedulerConcurrent, opt_path, opt_workspace, opt_keywordsPath, opt_asyncEntries, opt_extraHttpRequestParams) {
  /** @const {string} */
  var path = this.basePath_ + '/system/console/configMgr/com.day.cq.statistics.impl.StatisticsServiceImpl';

  /** @type {!Object} */
  var queryParameters = {};

  /** @type {!Object} */
  var headerParams = angular.extend({}, this.defaultHeaders_);
  if (opt_post !== undefined) {
    queryParameters['post'] = opt_post;
  }

  if (opt_apply !== undefined) {
    queryParameters['apply'] = opt_apply;
  }

  if (opt_delete !== undefined) {
    queryParameters['delete'] = opt_delete;
  }

  if (opt_action !== undefined) {
    queryParameters['action'] = opt_action;
  }

  if (opt_location !== undefined) {
    queryParameters['$location'] = opt_location;
  }

  if (opt_propertylist !== undefined) {
    queryParameters['propertylist'] = opt_propertylist;
  }

  if (opt_schedulerPeriod !== undefined) {
    queryParameters['scheduler.period'] = opt_schedulerPeriod;
  }

  if (opt_schedulerConcurrent !== undefined) {
    queryParameters['scheduler.concurrent'] = opt_schedulerConcurrent;
  }

  if (opt_path !== undefined) {
    queryParameters['path'] = opt_path;
  }

  if (opt_workspace !== undefined) {
    queryParameters['workspace'] = opt_workspace;
  }

  if (opt_keywordsPath !== undefined) {
    queryParameters['keywordsPath'] = opt_keywordsPath;
  }

  if (opt_asyncEntries !== undefined) {
    queryParameters['asyncEntries'] = opt_asyncEntries;
  }

  /** @type {!Object} */
  var httpRequestParams = {
    method: 'POST',
    url: path,
    json: true,
            params: queryParameters,
    headers: headerParams
  };

  if (opt_extraHttpRequestParams) {
    httpRequestParams = angular.extend(httpRequestParams, opt_extraHttpRequestParams);
  }

  return (/** @type {?} */ (this.http_))(httpRequestParams);
}

/**
 * 
 * 
 * @param {!boolean=} opt_post 
 * @param {!boolean=} opt_apply 
 * @param {!boolean=} opt_delete 
 * @param {!string=} opt_action 
 * @param {!string=} opt_location 
 * @param {!Array<!string>=} opt_propertylist 
 * @param {!boolean=} opt_validationEnabled 
 * @param {!angular.$http.Config=} opt_extraHttpRequestParams Extra HTTP parameters to send.
 * @return {!angular.$q.Promise<!API.Client.comDayCqTaggingImplJcrTagManagerFactoryImplInfo>}
 */
API.Client.ConfigmgrApi.prototype.comDayCqTaggingImplJcrTagManagerFactoryImpl = function(opt_post, opt_apply, opt_delete, opt_action, opt_location, opt_propertylist, opt_validationEnabled, opt_extraHttpRequestParams) {
  /** @const {string} */
  var path = this.basePath_ + '/system/console/configMgr/com.day.cq.tagging.impl.JcrTagManagerFactoryImpl';

  /** @type {!Object} */
  var queryParameters = {};

  /** @type {!Object} */
  var headerParams = angular.extend({}, this.defaultHeaders_);
  if (opt_post !== undefined) {
    queryParameters['post'] = opt_post;
  }

  if (opt_apply !== undefined) {
    queryParameters['apply'] = opt_apply;
  }

  if (opt_delete !== undefined) {
    queryParameters['delete'] = opt_delete;
  }

  if (opt_action !== undefined) {
    queryParameters['action'] = opt_action;
  }

  if (opt_location !== undefined) {
    queryParameters['$location'] = opt_location;
  }

  if (opt_propertylist !== undefined) {
    queryParameters['propertylist'] = opt_propertylist;
  }

  if (opt_validationEnabled !== undefined) {
    queryParameters['validation.enabled'] = opt_validationEnabled;
  }

  /** @type {!Object} */
  var httpRequestParams = {
    method: 'POST',
    url: path,
    json: true,
            params: queryParameters,
    headers: headerParams
  };

  if (opt_extraHttpRequestParams) {
    httpRequestParams = angular.extend(httpRequestParams, opt_extraHttpRequestParams);
  }

  return (/** @type {?} */ (this.http_))(httpRequestParams);
}

/**
 * 
 * 
 * @param {!boolean=} opt_post 
 * @param {!boolean=} opt_apply 
 * @param {!boolean=} opt_delete 
 * @param {!string=} opt_action 
 * @param {!string=} opt_location 
 * @param {!Array<!string>=} opt_propertylist 
 * @param {!boolean=} opt_ignorePath 
 * @param {!angular.$http.Config=} opt_extraHttpRequestParams Extra HTTP parameters to send.
 * @return {!angular.$q.Promise<!API.Client.comDayCqTaggingImplSearchTagPredicateEvaluatorInfo>}
 */
API.Client.ConfigmgrApi.prototype.comDayCqTaggingImplSearchTagPredicateEvaluator = function(opt_post, opt_apply, opt_delete, opt_action, opt_location, opt_propertylist, opt_ignorePath, opt_extraHttpRequestParams) {
  /** @const {string} */
  var path = this.basePath_ + '/system/console/configMgr/com.day.cq.tagging.impl.search.TagPredicateEvaluator';

  /** @type {!Object} */
  var queryParameters = {};

  /** @type {!Object} */
  var headerParams = angular.extend({}, this.defaultHeaders_);
  if (opt_post !== undefined) {
    queryParameters['post'] = opt_post;
  }

  if (opt_apply !== undefined) {
    queryParameters['apply'] = opt_apply;
  }

  if (opt_delete !== undefined) {
    queryParameters['delete'] = opt_delete;
  }

  if (opt_action !== undefined) {
    queryParameters['action'] = opt_action;
  }

  if (opt_location !== undefined) {
    queryParameters['$location'] = opt_location;
  }

  if (opt_propertylist !== undefined) {
    queryParameters['propertylist'] = opt_propertylist;
  }

  if (opt_ignorePath !== undefined) {
    queryParameters['ignore_path'] = opt_ignorePath;
  }

  /** @type {!Object} */
  var httpRequestParams = {
    method: 'POST',
    url: path,
    json: true,
            params: queryParameters,
    headers: headerParams
  };

  if (opt_extraHttpRequestParams) {
    httpRequestParams = angular.extend(httpRequestParams, opt_extraHttpRequestParams);
  }

  return (/** @type {?} */ (this.http_))(httpRequestParams);
}

/**
 * 
 * 
 * @param {!boolean=} opt_post 
 * @param {!boolean=} opt_apply 
 * @param {!boolean=} opt_delete 
 * @param {!string=} opt_action 
 * @param {!string=} opt_location 
 * @param {!Array<!string>=} opt_propertylist 
 * @param {!string=} opt_schedulerExpression 
 * @param {!angular.$http.Config=} opt_extraHttpRequestParams Extra HTTP parameters to send.
 * @return {!angular.$q.Promise<!API.Client.comDayCqTaggingImplTagGarbageCollectorInfo>}
 */
API.Client.ConfigmgrApi.prototype.comDayCqTaggingImplTagGarbageCollector = function(opt_post, opt_apply, opt_delete, opt_action, opt_location, opt_propertylist, opt_schedulerExpression, opt_extraHttpRequestParams) {
  /** @const {string} */
  var path = this.basePath_ + '/system/console/configMgr/com.day.cq.tagging.impl.TagGarbageCollector';

  /** @type {!Object} */
  var queryParameters = {};

  /** @type {!Object} */
  var headerParams = angular.extend({}, this.defaultHeaders_);
  if (opt_post !== undefined) {
    queryParameters['post'] = opt_post;
  }

  if (opt_apply !== undefined) {
    queryParameters['apply'] = opt_apply;
  }

  if (opt_delete !== undefined) {
    queryParameters['delete'] = opt_delete;
  }

  if (opt_action !== undefined) {
    queryParameters['action'] = opt_action;
  }

  if (opt_location !== undefined) {
    queryParameters['$location'] = opt_location;
  }

  if (opt_propertylist !== undefined) {
    queryParameters['propertylist'] = opt_propertylist;
  }

  if (opt_schedulerExpression !== undefined) {
    queryParameters['scheduler.expression'] = opt_schedulerExpression;
  }

  /** @type {!Object} */
  var httpRequestParams = {
    method: 'POST',
    url: path,
    json: true,
            params: queryParameters,
    headers: headerParams
  };

  if (opt_extraHttpRequestParams) {
    httpRequestParams = angular.extend(httpRequestParams, opt_extraHttpRequestParams);
  }

  return (/** @type {?} */ (this.http_))(httpRequestParams);
}

/**
 * 
 * 
 * @param {!boolean=} opt_post 
 * @param {!boolean=} opt_apply 
 * @param {!boolean=} opt_delete 
 * @param {!string=} opt_action 
 * @param {!string=} opt_location 
 * @param {!Array<!string>=} opt_propertylist 
 * @param {!Array<!string>=} opt_cqPagesupdatehandlerImageresourcetypes 
 * @param {!angular.$http.Config=} opt_extraHttpRequestParams Extra HTTP parameters to send.
 * @return {!angular.$q.Promise<!API.Client.comDayCqWcmContentsyncImplHandlerPagesUpdateHandlerInfo>}
 */
API.Client.ConfigmgrApi.prototype.comDayCqWcmContentsyncImplHandlerPagesUpdateHandler = function(opt_post, opt_apply, opt_delete, opt_action, opt_location, opt_propertylist, opt_cqPagesupdatehandlerImageresourcetypes, opt_extraHttpRequestParams) {
  /** @const {string} */
  var path = this.basePath_ + '/system/console/configMgr/com.day.cq.wcm.contentsync.impl.handler.PagesUpdateHandler';

  /** @type {!Object} */
  var queryParameters = {};

  /** @type {!Object} */
  var headerParams = angular.extend({}, this.defaultHeaders_);
  if (opt_post !== undefined) {
    queryParameters['post'] = opt_post;
  }

  if (opt_apply !== undefined) {
    queryParameters['apply'] = opt_apply;
  }

  if (opt_delete !== undefined) {
    queryParameters['delete'] = opt_delete;
  }

  if (opt_action !== undefined) {
    queryParameters['action'] = opt_action;
  }

  if (opt_location !== undefined) {
    queryParameters['$location'] = opt_location;
  }

  if (opt_propertylist !== undefined) {
    queryParameters['propertylist'] = opt_propertylist;
  }

  if (opt_cqPagesupdatehandlerImageresourcetypes !== undefined) {
    queryParameters['cq.pagesupdatehandler.imageresourcetypes'] = opt_cqPagesupdatehandlerImageresourcetypes;
  }

  /** @type {!Object} */
  var httpRequestParams = {
    method: 'POST',
    url: path,
    json: true,
            params: queryParameters,
    headers: headerParams
  };

  if (opt_extraHttpRequestParams) {
    httpRequestParams = angular.extend(httpRequestParams, opt_extraHttpRequestParams);
  }

  return (/** @type {?} */ (this.http_))(httpRequestParams);
}

/**
 * 
 * 
 * @param {!boolean=} opt_post 
 * @param {!boolean=} opt_apply 
 * @param {!boolean=} opt_delete 
 * @param {!string=} opt_action 
 * @param {!string=} opt_location 
 * @param {!Array<!string>=} opt_propertylist 
 * @param {!Array<!string>=} opt_cqContentsyncPathrewritertransformerMappingLinks 
 * @param {!Array<!string>=} opt_cqContentsyncPathrewritertransformerMappingClientlibs 
 * @param {!Array<!string>=} opt_cqContentsyncPathrewritertransformerMappingImages 
 * @param {!string=} opt_cqContentsyncPathrewritertransformerAttributePattern 
 * @param {!string=} opt_cqContentsyncPathrewritertransformerClientlibraryPattern 
 * @param {!string=} opt_cqContentsyncPathrewritertransformerClientlibraryReplace 
 * @param {!angular.$http.Config=} opt_extraHttpRequestParams Extra HTTP parameters to send.
 * @return {!angular.$q.Promise<!API.Client.comDayCqWcmContentsyncImplRewriterPathRewriterTransformerFactorInfo>}
 */
API.Client.ConfigmgrApi.prototype.comDayCqWcmContentsyncImplRewriterPathRewriterTransformerFactor = function(opt_post, opt_apply, opt_delete, opt_action, opt_location, opt_propertylist, opt_cqContentsyncPathrewritertransformerMappingLinks, opt_cqContentsyncPathrewritertransformerMappingClientlibs, opt_cqContentsyncPathrewritertransformerMappingImages, opt_cqContentsyncPathrewritertransformerAttributePattern, opt_cqContentsyncPathrewritertransformerClientlibraryPattern, opt_cqContentsyncPathrewritertransformerClientlibraryReplace, opt_extraHttpRequestParams) {
  /** @const {string} */
  var path = this.basePath_ + '/system/console/configMgr/com.day.cq.wcm.contentsync.impl.rewriter.PathRewriterTransformerFactory';

  /** @type {!Object} */
  var queryParameters = {};

  /** @type {!Object} */
  var headerParams = angular.extend({}, this.defaultHeaders_);
  if (opt_post !== undefined) {
    queryParameters['post'] = opt_post;
  }

  if (opt_apply !== undefined) {
    queryParameters['apply'] = opt_apply;
  }

  if (opt_delete !== undefined) {
    queryParameters['delete'] = opt_delete;
  }

  if (opt_action !== undefined) {
    queryParameters['action'] = opt_action;
  }

  if (opt_location !== undefined) {
    queryParameters['$location'] = opt_location;
  }

  if (opt_propertylist !== undefined) {
    queryParameters['propertylist'] = opt_propertylist;
  }

  if (opt_cqContentsyncPathrewritertransformerMappingLinks !== undefined) {
    queryParameters['cq.contentsync.pathrewritertransformer.mapping.links'] = opt_cqContentsyncPathrewritertransformerMappingLinks;
  }

  if (opt_cqContentsyncPathrewritertransformerMappingClientlibs !== undefined) {
    queryParameters['cq.contentsync.pathrewritertransformer.mapping.clientlibs'] = opt_cqContentsyncPathrewritertransformerMappingClientlibs;
  }

  if (opt_cqContentsyncPathrewritertransformerMappingImages !== undefined) {
    queryParameters['cq.contentsync.pathrewritertransformer.mapping.images'] = opt_cqContentsyncPathrewritertransformerMappingImages;
  }

  if (opt_cqContentsyncPathrewritertransformerAttributePattern !== undefined) {
    queryParameters['cq.contentsync.pathrewritertransformer.attribute.pattern'] = opt_cqContentsyncPathrewritertransformerAttributePattern;
  }

  if (opt_cqContentsyncPathrewritertransformerClientlibraryPattern !== undefined) {
    queryParameters['cq.contentsync.pathrewritertransformer.clientlibrary.pattern'] = opt_cqContentsyncPathrewritertransformerClientlibraryPattern;
  }

  if (opt_cqContentsyncPathrewritertransformerClientlibraryReplace !== undefined) {
    queryParameters['cq.contentsync.pathrewritertransformer.clientlibrary.replace'] = opt_cqContentsyncPathrewritertransformerClientlibraryReplace;
  }

  /** @type {!Object} */
  var httpRequestParams = {
    method: 'POST',
    url: path,
    json: true,
            params: queryParameters,
    headers: headerParams
  };

  if (opt_extraHttpRequestParams) {
    httpRequestParams = angular.extend(httpRequestParams, opt_extraHttpRequestParams);
  }

  return (/** @type {?} */ (this.http_))(httpRequestParams);
}

/**
 * 
 * 
 * @param {!boolean=} opt_post 
 * @param {!boolean=} opt_apply 
 * @param {!boolean=} opt_delete 
 * @param {!string=} opt_action 
 * @param {!string=} opt_location 
 * @param {!Array<!string>=} opt_propertylist 
 * @param {!string=} opt_authoringUIModeServiceDefault 
 * @param {!angular.$http.Config=} opt_extraHttpRequestParams Extra HTTP parameters to send.
 * @return {!angular.$q.Promise<!API.Client.comDayCqWcmCoreImplAuthoringUIModeServiceImplInfo>}
 */
API.Client.ConfigmgrApi.prototype.comDayCqWcmCoreImplAuthoringUIModeServiceImpl = function(opt_post, opt_apply, opt_delete, opt_action, opt_location, opt_propertylist, opt_authoringUIModeServiceDefault, opt_extraHttpRequestParams) {
  /** @const {string} */
  var path = this.basePath_ + '/system/console/configMgr/com.day.cq.wcm.core.impl.AuthoringUIModeServiceImpl';

  /** @type {!Object} */
  var queryParameters = {};

  /** @type {!Object} */
  var headerParams = angular.extend({}, this.defaultHeaders_);
  if (opt_post !== undefined) {
    queryParameters['post'] = opt_post;
  }

  if (opt_apply !== undefined) {
    queryParameters['apply'] = opt_apply;
  }

  if (opt_delete !== undefined) {
    queryParameters['delete'] = opt_delete;
  }

  if (opt_action !== undefined) {
    queryParameters['action'] = opt_action;
  }

  if (opt_location !== undefined) {
    queryParameters['$location'] = opt_location;
  }

  if (opt_propertylist !== undefined) {
    queryParameters['propertylist'] = opt_propertylist;
  }

  if (opt_authoringUIModeServiceDefault !== undefined) {
    queryParameters['authoringUIModeService.default'] = opt_authoringUIModeServiceDefault;
  }

  /** @type {!Object} */
  var httpRequestParams = {
    method: 'POST',
    url: path,
    json: true,
            params: queryParameters,
    headers: headerParams
  };

  if (opt_extraHttpRequestParams) {
    httpRequestParams = angular.extend(httpRequestParams, opt_extraHttpRequestParams);
  }

  return (/** @type {?} */ (this.http_))(httpRequestParams);
}

/**
 * 
 * 
 * @param {!boolean=} opt_post 
 * @param {!boolean=} opt_apply 
 * @param {!boolean=} opt_delete 
 * @param {!string=} opt_action 
 * @param {!string=} opt_location 
 * @param {!Array<!string>=} opt_propertylist 
 * @param {!Array<!string>=} opt_wcmcommandservletDeleteWhitelist 
 * @param {!angular.$http.Config=} opt_extraHttpRequestParams Extra HTTP parameters to send.
 * @return {!angular.$q.Promise<!API.Client.comDayCqWcmCoreImplCommandsWCMCommandServletInfo>}
 */
API.Client.ConfigmgrApi.prototype.comDayCqWcmCoreImplCommandsWCMCommandServlet = function(opt_post, opt_apply, opt_delete, opt_action, opt_location, opt_propertylist, opt_wcmcommandservletDeleteWhitelist, opt_extraHttpRequestParams) {
  /** @const {string} */
  var path = this.basePath_ + '/system/console/configMgr/com.day.cq.wcm.core.impl.commands.WCMCommandServlet';

  /** @type {!Object} */
  var queryParameters = {};

  /** @type {!Object} */
  var headerParams = angular.extend({}, this.defaultHeaders_);
  if (opt_post !== undefined) {
    queryParameters['post'] = opt_post;
  }

  if (opt_apply !== undefined) {
    queryParameters['apply'] = opt_apply;
  }

  if (opt_delete !== undefined) {
    queryParameters['delete'] = opt_delete;
  }

  if (opt_action !== undefined) {
    queryParameters['action'] = opt_action;
  }

  if (opt_location !== undefined) {
    queryParameters['$location'] = opt_location;
  }

  if (opt_propertylist !== undefined) {
    queryParameters['propertylist'] = opt_propertylist;
  }

  if (opt_wcmcommandservletDeleteWhitelist !== undefined) {
    queryParameters['wcmcommandservlet.delete_whitelist'] = opt_wcmcommandservletDeleteWhitelist;
  }

  /** @type {!Object} */
  var httpRequestParams = {
    method: 'POST',
    url: path,
    json: true,
            params: queryParameters,
    headers: headerParams
  };

  if (opt_extraHttpRequestParams) {
    httpRequestParams = angular.extend(httpRequestParams, opt_extraHttpRequestParams);
  }

  return (/** @type {?} */ (this.http_))(httpRequestParams);
}

/**
 * 
 * 
 * @param {!boolean=} opt_post 
 * @param {!boolean=} opt_apply 
 * @param {!boolean=} opt_delete 
 * @param {!string=} opt_action 
 * @param {!string=} opt_location 
 * @param {!Array<!string>=} opt_propertylist 
 * @param {!string=} opt_dimDefaultMode 
 * @param {!boolean=} opt_dimAppcacheEnabled 
 * @param {!angular.$http.Config=} opt_extraHttpRequestParams Extra HTTP parameters to send.
 * @return {!angular.$q.Promise<!API.Client.comDayCqWcmCoreImplDevicedetectionDeviceIdentificationModeImplInfo>}
 */
API.Client.ConfigmgrApi.prototype.comDayCqWcmCoreImplDevicedetectionDeviceIdentificationModeImpl = function(opt_post, opt_apply, opt_delete, opt_action, opt_location, opt_propertylist, opt_dimDefaultMode, opt_dimAppcacheEnabled, opt_extraHttpRequestParams) {
  /** @const {string} */
  var path = this.basePath_ + '/system/console/configMgr/com.day.cq.wcm.core.impl.devicedetection.DeviceIdentificationModeImpl';

  /** @type {!Object} */
  var queryParameters = {};

  /** @type {!Object} */
  var headerParams = angular.extend({}, this.defaultHeaders_);
  if (opt_post !== undefined) {
    queryParameters['post'] = opt_post;
  }

  if (opt_apply !== undefined) {
    queryParameters['apply'] = opt_apply;
  }

  if (opt_delete !== undefined) {
    queryParameters['delete'] = opt_delete;
  }

  if (opt_action !== undefined) {
    queryParameters['action'] = opt_action;
  }

  if (opt_location !== undefined) {
    queryParameters['$location'] = opt_location;
  }

  if (opt_propertylist !== undefined) {
    queryParameters['propertylist'] = opt_propertylist;
  }

  if (opt_dimDefaultMode !== undefined) {
    queryParameters['dim.default.mode'] = opt_dimDefaultMode;
  }

  if (opt_dimAppcacheEnabled !== undefined) {
    queryParameters['dim.appcache.enabled'] = opt_dimAppcacheEnabled;
  }

  /** @type {!Object} */
  var httpRequestParams = {
    method: 'POST',
    url: path,
    json: true,
            params: queryParameters,
    headers: headerParams
  };

  if (opt_extraHttpRequestParams) {
    httpRequestParams = angular.extend(httpRequestParams, opt_extraHttpRequestParams);
  }

  return (/** @type {?} */ (this.http_))(httpRequestParams);
}

/**
 * 
 * 
 * @param {!boolean=} opt_post 
 * @param {!boolean=} opt_apply 
 * @param {!boolean=} opt_delete 
 * @param {!string=} opt_action 
 * @param {!string=} opt_location 
 * @param {!Array<!string>=} opt_propertylist 
 * @param {!string=} opt_configured 
 * @param {!angular.$http.Config=} opt_extraHttpRequestParams Extra HTTP parameters to send.
 * @return {!angular.$q.Promise<!API.Client.comDayCqWcmCoreImplEventPageEventAuditListenerInfo>}
 */
API.Client.ConfigmgrApi.prototype.comDayCqWcmCoreImplEventPageEventAuditListener = function(opt_post, opt_apply, opt_delete, opt_action, opt_location, opt_propertylist, opt_configured, opt_extraHttpRequestParams) {
  /** @const {string} */
  var path = this.basePath_ + '/system/console/configMgr/com.day.cq.wcm.core.impl.event.PageEventAuditListener';

  /** @type {!Object} */
  var queryParameters = {};

  /** @type {!Object} */
  var headerParams = angular.extend({}, this.defaultHeaders_);
  if (opt_post !== undefined) {
    queryParameters['post'] = opt_post;
  }

  if (opt_apply !== undefined) {
    queryParameters['apply'] = opt_apply;
  }

  if (opt_delete !== undefined) {
    queryParameters['delete'] = opt_delete;
  }

  if (opt_action !== undefined) {
    queryParameters['action'] = opt_action;
  }

  if (opt_location !== undefined) {
    queryParameters['$location'] = opt_location;
  }

  if (opt_propertylist !== undefined) {
    queryParameters['propertylist'] = opt_propertylist;
  }

  if (opt_configured !== undefined) {
    queryParameters['configured'] = opt_configured;
  }

  /** @type {!Object} */
  var httpRequestParams = {
    method: 'POST',
    url: path,
    json: true,
            params: queryParameters,
    headers: headerParams
  };

  if (opt_extraHttpRequestParams) {
    httpRequestParams = angular.extend(httpRequestParams, opt_extraHttpRequestParams);
  }

  return (/** @type {?} */ (this.http_))(httpRequestParams);
}

/**
 * 
 * 
 * @param {!boolean=} opt_post 
 * @param {!boolean=} opt_apply 
 * @param {!boolean=} opt_delete 
 * @param {!string=} opt_action 
 * @param {!string=} opt_location 
 * @param {!Array<!string>=} opt_propertylist 
 * @param {!Array<!string>=} opt_paths 
 * @param {!angular.$http.Config=} opt_extraHttpRequestParams Extra HTTP parameters to send.
 * @return {!angular.$q.Promise<!API.Client.comDayCqWcmCoreImplEventPagePostProcessorInfo>}
 */
API.Client.ConfigmgrApi.prototype.comDayCqWcmCoreImplEventPagePostProcessor = function(opt_post, opt_apply, opt_delete, opt_action, opt_location, opt_propertylist, opt_paths, opt_extraHttpRequestParams) {
  /** @const {string} */
  var path = this.basePath_ + '/system/console/configMgr/com.day.cq.wcm.core.impl.event.PagePostProcessor';

  /** @type {!Object} */
  var queryParameters = {};

  /** @type {!Object} */
  var headerParams = angular.extend({}, this.defaultHeaders_);
  if (opt_post !== undefined) {
    queryParameters['post'] = opt_post;
  }

  if (opt_apply !== undefined) {
    queryParameters['apply'] = opt_apply;
  }

  if (opt_delete !== undefined) {
    queryParameters['delete'] = opt_delete;
  }

  if (opt_action !== undefined) {
    queryParameters['action'] = opt_action;
  }

  if (opt_location !== undefined) {
    queryParameters['$location'] = opt_location;
  }

  if (opt_propertylist !== undefined) {
    queryParameters['propertylist'] = opt_propertylist;
  }

  if (opt_paths !== undefined) {
    queryParameters['paths'] = opt_paths;
  }

  /** @type {!Object} */
  var httpRequestParams = {
    method: 'POST',
    url: path,
    json: true,
            params: queryParameters,
    headers: headerParams
  };

  if (opt_extraHttpRequestParams) {
    httpRequestParams = angular.extend(httpRequestParams, opt_extraHttpRequestParams);
  }

  return (/** @type {?} */ (this.http_))(httpRequestParams);
}

/**
 * 
 * 
 * @param {!boolean=} opt_post 
 * @param {!boolean=} opt_apply 
 * @param {!boolean=} opt_delete 
 * @param {!string=} opt_action 
 * @param {!string=} opt_location 
 * @param {!Array<!string>=} opt_propertylist 
 * @param {!Array<!string>=} opt_paths 
 * @param {!Array<!string>=} opt_excludedPaths 
 * @param {!angular.$http.Config=} opt_extraHttpRequestParams Extra HTTP parameters to send.
 * @return {!angular.$q.Promise<!API.Client.comDayCqWcmCoreImplEventRepositoryChangeEventListenerInfo>}
 */
API.Client.ConfigmgrApi.prototype.comDayCqWcmCoreImplEventRepositoryChangeEventListener = function(opt_post, opt_apply, opt_delete, opt_action, opt_location, opt_propertylist, opt_paths, opt_excludedPaths, opt_extraHttpRequestParams) {
  /** @const {string} */
  var path = this.basePath_ + '/system/console/configMgr/com.day.cq.wcm.core.impl.event.RepositoryChangeEventListener';

  /** @type {!Object} */
  var queryParameters = {};

  /** @type {!Object} */
  var headerParams = angular.extend({}, this.defaultHeaders_);
  if (opt_post !== undefined) {
    queryParameters['post'] = opt_post;
  }

  if (opt_apply !== undefined) {
    queryParameters['apply'] = opt_apply;
  }

  if (opt_delete !== undefined) {
    queryParameters['delete'] = opt_delete;
  }

  if (opt_action !== undefined) {
    queryParameters['action'] = opt_action;
  }

  if (opt_location !== undefined) {
    queryParameters['$location'] = opt_location;
  }

  if (opt_propertylist !== undefined) {
    queryParameters['propertylist'] = opt_propertylist;
  }

  if (opt_paths !== undefined) {
    queryParameters['paths'] = opt_paths;
  }

  if (opt_excludedPaths !== undefined) {
    queryParameters['excludedPaths'] = opt_excludedPaths;
  }

  /** @type {!Object} */
  var httpRequestParams = {
    method: 'POST',
    url: path,
    json: true,
            params: queryParameters,
    headers: headerParams
  };

  if (opt_extraHttpRequestParams) {
    httpRequestParams = angular.extend(httpRequestParams, opt_extraHttpRequestParams);
  }

  return (/** @type {?} */ (this.http_))(httpRequestParams);
}

/**
 * 
 * 
 * @param {!boolean=} opt_post 
 * @param {!boolean=} opt_apply 
 * @param {!boolean=} opt_delete 
 * @param {!string=} opt_action 
 * @param {!string=} opt_location 
 * @param {!Array<!string>=} opt_propertylist 
 * @param {!string=} opt_paths 
 * @param {!angular.$http.Config=} opt_extraHttpRequestParams Extra HTTP parameters to send.
 * @return {!angular.$q.Promise<!API.Client.comDayCqWcmCoreImplEventTemplatePostProcessorInfo>}
 */
API.Client.ConfigmgrApi.prototype.comDayCqWcmCoreImplEventTemplatePostProcessor = function(opt_post, opt_apply, opt_delete, opt_action, opt_location, opt_propertylist, opt_paths, opt_extraHttpRequestParams) {
  /** @const {string} */
  var path = this.basePath_ + '/system/console/configMgr/com.day.cq.wcm.core.impl.event.TemplatePostProcessor';

  /** @type {!Object} */
  var queryParameters = {};

  /** @type {!Object} */
  var headerParams = angular.extend({}, this.defaultHeaders_);
  if (opt_post !== undefined) {
    queryParameters['post'] = opt_post;
  }

  if (opt_apply !== undefined) {
    queryParameters['apply'] = opt_apply;
  }

  if (opt_delete !== undefined) {
    queryParameters['delete'] = opt_delete;
  }

  if (opt_action !== undefined) {
    queryParameters['action'] = opt_action;
  }

  if (opt_location !== undefined) {
    queryParameters['$location'] = opt_location;
  }

  if (opt_propertylist !== undefined) {
    queryParameters['propertylist'] = opt_propertylist;
  }

  if (opt_paths !== undefined) {
    queryParameters['paths'] = opt_paths;
  }

  /** @type {!Object} */
  var httpRequestParams = {
    method: 'POST',
    url: path,
    json: true,
            params: queryParameters,
    headers: headerParams
  };

  if (opt_extraHttpRequestParams) {
    httpRequestParams = angular.extend(httpRequestParams, opt_extraHttpRequestParams);
  }

  return (/** @type {?} */ (this.http_))(httpRequestParams);
}

/**
 * 
 * 
 * @param {!boolean=} opt_post 
 * @param {!boolean=} opt_apply 
 * @param {!boolean=} opt_delete 
 * @param {!string=} opt_action 
 * @param {!string=} opt_location 
 * @param {!Array<!string>=} opt_propertylist 
 * @param {!string=} opt_langmgrListPath 
 * @param {!Array<!string>=} opt_langmgrCountryDefault 
 * @param {!angular.$http.Config=} opt_extraHttpRequestParams Extra HTTP parameters to send.
 * @return {!angular.$q.Promise<!API.Client.comDayCqWcmCoreImplLanguageManagerImplInfo>}
 */
API.Client.ConfigmgrApi.prototype.comDayCqWcmCoreImplLanguageManagerImpl = function(opt_post, opt_apply, opt_delete, opt_action, opt_location, opt_propertylist, opt_langmgrListPath, opt_langmgrCountryDefault, opt_extraHttpRequestParams) {
  /** @const {string} */
  var path = this.basePath_ + '/system/console/configMgr/com.day.cq.wcm.core.impl.LanguageManagerImpl';

  /** @type {!Object} */
  var queryParameters = {};

  /** @type {!Object} */
  var headerParams = angular.extend({}, this.defaultHeaders_);
  if (opt_post !== undefined) {
    queryParameters['post'] = opt_post;
  }

  if (opt_apply !== undefined) {
    queryParameters['apply'] = opt_apply;
  }

  if (opt_delete !== undefined) {
    queryParameters['delete'] = opt_delete;
  }

  if (opt_action !== undefined) {
    queryParameters['action'] = opt_action;
  }

  if (opt_location !== undefined) {
    queryParameters['$location'] = opt_location;
  }

  if (opt_propertylist !== undefined) {
    queryParameters['propertylist'] = opt_propertylist;
  }

  if (opt_langmgrListPath !== undefined) {
    queryParameters['langmgr.list.path'] = opt_langmgrListPath;
  }

  if (opt_langmgrCountryDefault !== undefined) {
    queryParameters['langmgr.country.default'] = opt_langmgrCountryDefault;
  }

  /** @type {!Object} */
  var httpRequestParams = {
    method: 'POST',
    url: path,
    json: true,
            params: queryParameters,
    headers: headerParams
  };

  if (opt_extraHttpRequestParams) {
    httpRequestParams = angular.extend(httpRequestParams, opt_extraHttpRequestParams);
  }

  return (/** @type {?} */ (this.http_))(httpRequestParams);
}

/**
 * 
 * 
 * @param {!boolean=} opt_post 
 * @param {!boolean=} opt_apply 
 * @param {!boolean=} opt_delete 
 * @param {!string=} opt_action 
 * @param {!string=} opt_location 
 * @param {!Array<!string>=} opt_propertylist 
 * @param {!string=} opt_linkExpiredPrefix 
 * @param {!boolean=} opt_linkExpiredRemove 
 * @param {!string=} opt_linkExpiredSuffix 
 * @param {!string=} opt_linkInvalidPrefix 
 * @param {!boolean=} opt_linkInvalidRemove 
 * @param {!string=} opt_linkInvalidSuffix 
 * @param {!string=} opt_linkPredatedPrefix 
 * @param {!boolean=} opt_linkPredatedRemove 
 * @param {!string=} opt_linkPredatedSuffix 
 * @param {!Array<!string>=} opt_linkWcmmodes 
 * @param {!angular.$http.Config=} opt_extraHttpRequestParams Extra HTTP parameters to send.
 * @return {!angular.$q.Promise<!API.Client.comDayCqWcmCoreImplLinkCheckerConfigurationFactoryImplInfo>}
 */
API.Client.ConfigmgrApi.prototype.comDayCqWcmCoreImplLinkCheckerConfigurationFactoryImpl = function(opt_post, opt_apply, opt_delete, opt_action, opt_location, opt_propertylist, opt_linkExpiredPrefix, opt_linkExpiredRemove, opt_linkExpiredSuffix, opt_linkInvalidPrefix, opt_linkInvalidRemove, opt_linkInvalidSuffix, opt_linkPredatedPrefix, opt_linkPredatedRemove, opt_linkPredatedSuffix, opt_linkWcmmodes, opt_extraHttpRequestParams) {
  /** @const {string} */
  var path = this.basePath_ + '/system/console/configMgr/com.day.cq.wcm.core.impl.LinkCheckerConfigurationFactoryImpl';

  /** @type {!Object} */
  var queryParameters = {};

  /** @type {!Object} */
  var headerParams = angular.extend({}, this.defaultHeaders_);
  if (opt_post !== undefined) {
    queryParameters['post'] = opt_post;
  }

  if (opt_apply !== undefined) {
    queryParameters['apply'] = opt_apply;
  }

  if (opt_delete !== undefined) {
    queryParameters['delete'] = opt_delete;
  }

  if (opt_action !== undefined) {
    queryParameters['action'] = opt_action;
  }

  if (opt_location !== undefined) {
    queryParameters['$location'] = opt_location;
  }

  if (opt_propertylist !== undefined) {
    queryParameters['propertylist'] = opt_propertylist;
  }

  if (opt_linkExpiredPrefix !== undefined) {
    queryParameters['link.expired.prefix'] = opt_linkExpiredPrefix;
  }

  if (opt_linkExpiredRemove !== undefined) {
    queryParameters['link.expired.remove'] = opt_linkExpiredRemove;
  }

  if (opt_linkExpiredSuffix !== undefined) {
    queryParameters['link.expired.suffix'] = opt_linkExpiredSuffix;
  }

  if (opt_linkInvalidPrefix !== undefined) {
    queryParameters['link.invalid.prefix'] = opt_linkInvalidPrefix;
  }

  if (opt_linkInvalidRemove !== undefined) {
    queryParameters['link.invalid.remove'] = opt_linkInvalidRemove;
  }

  if (opt_linkInvalidSuffix !== undefined) {
    queryParameters['link.invalid.suffix'] = opt_linkInvalidSuffix;
  }

  if (opt_linkPredatedPrefix !== undefined) {
    queryParameters['link.predated.prefix'] = opt_linkPredatedPrefix;
  }

  if (opt_linkPredatedRemove !== undefined) {
    queryParameters['link.predated.remove'] = opt_linkPredatedRemove;
  }

  if (opt_linkPredatedSuffix !== undefined) {
    queryParameters['link.predated.suffix'] = opt_linkPredatedSuffix;
  }

  if (opt_linkWcmmodes !== undefined) {
    queryParameters['link.wcmmodes'] = opt_linkWcmmodes;
  }

  /** @type {!Object} */
  var httpRequestParams = {
    method: 'POST',
    url: path,
    json: true,
            params: queryParameters,
    headers: headerParams
  };

  if (opt_extraHttpRequestParams) {
    httpRequestParams = angular.extend(httpRequestParams, opt_extraHttpRequestParams);
  }

  return (/** @type {?} */ (this.http_))(httpRequestParams);
}

/**
 * 
 * 
 * @param {!boolean=} opt_post 
 * @param {!boolean=} opt_apply 
 * @param {!boolean=} opt_delete 
 * @param {!string=} opt_action 
 * @param {!string=} opt_location 
 * @param {!Array<!string>=} opt_propertylist 
 * @param {!string=} opt_pageInfoProviderPropertyRegexDefault 
 * @param {!string=} opt_pageInfoProviderPropertyName 
 * @param {!angular.$http.Config=} opt_extraHttpRequestParams Extra HTTP parameters to send.
 * @return {!angular.$q.Promise<!API.Client.comDayCqWcmCoreImplPagePageInfoAggregatorImplInfo>}
 */
API.Client.ConfigmgrApi.prototype.comDayCqWcmCoreImplPagePageInfoAggregatorImpl = function(opt_post, opt_apply, opt_delete, opt_action, opt_location, opt_propertylist, opt_pageInfoProviderPropertyRegexDefault, opt_pageInfoProviderPropertyName, opt_extraHttpRequestParams) {
  /** @const {string} */
  var path = this.basePath_ + '/system/console/configMgr/com.day.cq.wcm.core.impl.page.PageInfoAggregatorImpl';

  /** @type {!Object} */
  var queryParameters = {};

  /** @type {!Object} */
  var headerParams = angular.extend({}, this.defaultHeaders_);
  if (opt_post !== undefined) {
    queryParameters['post'] = opt_post;
  }

  if (opt_apply !== undefined) {
    queryParameters['apply'] = opt_apply;
  }

  if (opt_delete !== undefined) {
    queryParameters['delete'] = opt_delete;
  }

  if (opt_action !== undefined) {
    queryParameters['action'] = opt_action;
  }

  if (opt_location !== undefined) {
    queryParameters['$location'] = opt_location;
  }

  if (opt_propertylist !== undefined) {
    queryParameters['propertylist'] = opt_propertylist;
  }

  if (opt_pageInfoProviderPropertyRegexDefault !== undefined) {
    queryParameters['page.info.provider.property.regex.default'] = opt_pageInfoProviderPropertyRegexDefault;
  }

  if (opt_pageInfoProviderPropertyName !== undefined) {
    queryParameters['page.info.provider.property.name'] = opt_pageInfoProviderPropertyName;
  }

  /** @type {!Object} */
  var httpRequestParams = {
    method: 'POST',
    url: path,
    json: true,
            params: queryParameters,
    headers: headerParams
  };

  if (opt_extraHttpRequestParams) {
    httpRequestParams = angular.extend(httpRequestParams, opt_extraHttpRequestParams);
  }

  return (/** @type {?} */ (this.http_))(httpRequestParams);
}

/**
 * 
 * 
 * @param {!boolean=} opt_post 
 * @param {!boolean=} opt_apply 
 * @param {!boolean=} opt_delete 
 * @param {!string=} opt_action 
 * @param {!string=} opt_location 
 * @param {!Array<!string>=} opt_propertylist 
 * @param {!string=} opt_illegalCharMapping 
 * @param {!boolean=} opt_pageSubTreeActivationCheck 
 * @param {!angular.$http.Config=} opt_extraHttpRequestParams Extra HTTP parameters to send.
 * @return {!angular.$q.Promise<!API.Client.comDayCqWcmCoreImplPagePageManagerFactoryImplInfo>}
 */
API.Client.ConfigmgrApi.prototype.comDayCqWcmCoreImplPagePageManagerFactoryImpl = function(opt_post, opt_apply, opt_delete, opt_action, opt_location, opt_propertylist, opt_illegalCharMapping, opt_pageSubTreeActivationCheck, opt_extraHttpRequestParams) {
  /** @const {string} */
  var path = this.basePath_ + '/system/console/configMgr/com.day.cq.wcm.core.impl.page.PageManagerFactoryImpl';

  /** @type {!Object} */
  var queryParameters = {};

  /** @type {!Object} */
  var headerParams = angular.extend({}, this.defaultHeaders_);
  if (opt_post !== undefined) {
    queryParameters['post'] = opt_post;
  }

  if (opt_apply !== undefined) {
    queryParameters['apply'] = opt_apply;
  }

  if (opt_delete !== undefined) {
    queryParameters['delete'] = opt_delete;
  }

  if (opt_action !== undefined) {
    queryParameters['action'] = opt_action;
  }

  if (opt_location !== undefined) {
    queryParameters['$location'] = opt_location;
  }

  if (opt_propertylist !== undefined) {
    queryParameters['propertylist'] = opt_propertylist;
  }

  if (opt_illegalCharMapping !== undefined) {
    queryParameters['illegalCharMapping'] = opt_illegalCharMapping;
  }

  if (opt_pageSubTreeActivationCheck !== undefined) {
    queryParameters['pageSubTreeActivationCheck'] = opt_pageSubTreeActivationCheck;
  }

  /** @type {!Object} */
  var httpRequestParams = {
    method: 'POST',
    url: path,
    json: true,
            params: queryParameters,
    headers: headerParams
  };

  if (opt_extraHttpRequestParams) {
    httpRequestParams = angular.extend(httpRequestParams, opt_extraHttpRequestParams);
  }

  return (/** @type {?} */ (this.http_))(httpRequestParams);
}

/**
 * 
 * 
 * @param {!boolean=} opt_post 
 * @param {!boolean=} opt_apply 
 * @param {!boolean=} opt_delete 
 * @param {!string=} opt_action 
 * @param {!string=} opt_location 
 * @param {!Array<!string>=} opt_propertylist 
 * @param {!Array<!string>=} opt_contentReferenceConfigResourceTypes 
 * @param {!angular.$http.Config=} opt_extraHttpRequestParams Extra HTTP parameters to send.
 * @return {!angular.$q.Promise<!API.Client.comDayCqWcmCoreImplReferencesContentContentReferenceConfigInfo>}
 */
API.Client.ConfigmgrApi.prototype.comDayCqWcmCoreImplReferencesContentContentReferenceConfig = function(opt_post, opt_apply, opt_delete, opt_action, opt_location, opt_propertylist, opt_contentReferenceConfigResourceTypes, opt_extraHttpRequestParams) {
  /** @const {string} */
  var path = this.basePath_ + '/system/console/configMgr/com.day.cq.wcm.core.impl.references.content.ContentReferenceConfig';

  /** @type {!Object} */
  var queryParameters = {};

  /** @type {!Object} */
  var headerParams = angular.extend({}, this.defaultHeaders_);
  if (opt_post !== undefined) {
    queryParameters['post'] = opt_post;
  }

  if (opt_apply !== undefined) {
    queryParameters['apply'] = opt_apply;
  }

  if (opt_delete !== undefined) {
    queryParameters['delete'] = opt_delete;
  }

  if (opt_action !== undefined) {
    queryParameters['action'] = opt_action;
  }

  if (opt_location !== undefined) {
    queryParameters['$location'] = opt_location;
  }

  if (opt_propertylist !== undefined) {
    queryParameters['propertylist'] = opt_propertylist;
  }

  if (opt_contentReferenceConfigResourceTypes !== undefined) {
    queryParameters['contentReferenceConfig.resourceTypes'] = opt_contentReferenceConfigResourceTypes;
  }

  /** @type {!Object} */
  var httpRequestParams = {
    method: 'POST',
    url: path,
    json: true,
            params: queryParameters,
    headers: headerParams
  };

  if (opt_extraHttpRequestParams) {
    httpRequestParams = angular.extend(httpRequestParams, opt_extraHttpRequestParams);
  }

  return (/** @type {?} */ (this.http_))(httpRequestParams);
}

/**
 * 
 * 
 * @param {!boolean=} opt_post 
 * @param {!boolean=} opt_apply 
 * @param {!boolean=} opt_delete 
 * @param {!string=} opt_action 
 * @param {!string=} opt_location 
 * @param {!Array<!string>=} opt_propertylist 
 * @param {!boolean=} opt_damShowexpired 
 * @param {!boolean=} opt_damShowhidden 
 * @param {!boolean=} opt_tagTitleSearch 
 * @param {!string=} opt_guessTotal 
 * @param {!string=} opt_damExpiryProperty 
 * @param {!angular.$http.Config=} opt_extraHttpRequestParams Extra HTTP parameters to send.
 * @return {!angular.$q.Promise<!API.Client.comDayCqWcmCoreImplServletsContentfinderAssetViewHandlerInfo>}
 */
API.Client.ConfigmgrApi.prototype.comDayCqWcmCoreImplServletsContentfinderAssetViewHandler = function(opt_post, opt_apply, opt_delete, opt_action, opt_location, opt_propertylist, opt_damShowexpired, opt_damShowhidden, opt_tagTitleSearch, opt_guessTotal, opt_damExpiryProperty, opt_extraHttpRequestParams) {
  /** @const {string} */
  var path = this.basePath_ + '/system/console/configMgr/com.day.cq.wcm.core.impl.servlets.contentfinder.AssetViewHandler';

  /** @type {!Object} */
  var queryParameters = {};

  /** @type {!Object} */
  var headerParams = angular.extend({}, this.defaultHeaders_);
  if (opt_post !== undefined) {
    queryParameters['post'] = opt_post;
  }

  if (opt_apply !== undefined) {
    queryParameters['apply'] = opt_apply;
  }

  if (opt_delete !== undefined) {
    queryParameters['delete'] = opt_delete;
  }

  if (opt_action !== undefined) {
    queryParameters['action'] = opt_action;
  }

  if (opt_location !== undefined) {
    queryParameters['$location'] = opt_location;
  }

  if (opt_propertylist !== undefined) {
    queryParameters['propertylist'] = opt_propertylist;
  }

  if (opt_damShowexpired !== undefined) {
    queryParameters['dam.showexpired'] = opt_damShowexpired;
  }

  if (opt_damShowhidden !== undefined) {
    queryParameters['dam.showhidden'] = opt_damShowhidden;
  }

  if (opt_tagTitleSearch !== undefined) {
    queryParameters['tagTitleSearch'] = opt_tagTitleSearch;
  }

  if (opt_guessTotal !== undefined) {
    queryParameters['guessTotal'] = opt_guessTotal;
  }

  if (opt_damExpiryProperty !== undefined) {
    queryParameters['dam.expiryProperty'] = opt_damExpiryProperty;
  }

  /** @type {!Object} */
  var httpRequestParams = {
    method: 'POST',
    url: path,
    json: true,
            params: queryParameters,
    headers: headerParams
  };

  if (opt_extraHttpRequestParams) {
    httpRequestParams = angular.extend(httpRequestParams, opt_extraHttpRequestParams);
  }

  return (/** @type {?} */ (this.http_))(httpRequestParams);
}

/**
 * 
 * 
 * @param {!boolean=} opt_post 
 * @param {!boolean=} opt_apply 
 * @param {!boolean=} opt_delete 
 * @param {!string=} opt_action 
 * @param {!string=} opt_location 
 * @param {!Array<!string>=} opt_propertylist 
 * @param {!Array<!string>=} opt_itemResourceTypes 
 * @param {!angular.$http.Config=} opt_extraHttpRequestParams Extra HTTP parameters to send.
 * @return {!angular.$q.Promise<!API.Client.comDayCqWcmCoreImplServletsContentfinderConnectorConnectorVieInfo>}
 */
API.Client.ConfigmgrApi.prototype.comDayCqWcmCoreImplServletsContentfinderConnectorConnectorVie = function(opt_post, opt_apply, opt_delete, opt_action, opt_location, opt_propertylist, opt_itemResourceTypes, opt_extraHttpRequestParams) {
  /** @const {string} */
  var path = this.basePath_ + '/system/console/configMgr/com.day.cq.wcm.core.impl.servlets.contentfinder.connector.ConnectorViewHandler';

  /** @type {!Object} */
  var queryParameters = {};

  /** @type {!Object} */
  var headerParams = angular.extend({}, this.defaultHeaders_);
  if (opt_post !== undefined) {
    queryParameters['post'] = opt_post;
  }

  if (opt_apply !== undefined) {
    queryParameters['apply'] = opt_apply;
  }

  if (opt_delete !== undefined) {
    queryParameters['delete'] = opt_delete;
  }

  if (opt_action !== undefined) {
    queryParameters['action'] = opt_action;
  }

  if (opt_location !== undefined) {
    queryParameters['$location'] = opt_location;
  }

  if (opt_propertylist !== undefined) {
    queryParameters['propertylist'] = opt_propertylist;
  }

  if (opt_itemResourceTypes !== undefined) {
    queryParameters['item.resource.types'] = opt_itemResourceTypes;
  }

  /** @type {!Object} */
  var httpRequestParams = {
    method: 'POST',
    url: path,
    json: true,
            params: queryParameters,
    headers: headerParams
  };

  if (opt_extraHttpRequestParams) {
    httpRequestParams = angular.extend(httpRequestParams, opt_extraHttpRequestParams);
  }

  return (/** @type {?} */ (this.http_))(httpRequestParams);
}

/**
 * 
 * 
 * @param {!boolean=} opt_post 
 * @param {!boolean=} opt_apply 
 * @param {!boolean=} opt_delete 
 * @param {!string=} opt_action 
 * @param {!string=} opt_location 
 * @param {!Array<!string>=} opt_propertylist 
 * @param {!string=} opt_guessTotal 
 * @param {!boolean=} opt_tagTitleSearch 
 * @param {!angular.$http.Config=} opt_extraHttpRequestParams Extra HTTP parameters to send.
 * @return {!angular.$q.Promise<!API.Client.comDayCqWcmCoreImplServletsContentfinderPageViewHandlerInfo>}
 */
API.Client.ConfigmgrApi.prototype.comDayCqWcmCoreImplServletsContentfinderPageViewHandler = function(opt_post, opt_apply, opt_delete, opt_action, opt_location, opt_propertylist, opt_guessTotal, opt_tagTitleSearch, opt_extraHttpRequestParams) {
  /** @const {string} */
  var path = this.basePath_ + '/system/console/configMgr/com.day.cq.wcm.core.impl.servlets.contentfinder.PageViewHandler';

  /** @type {!Object} */
  var queryParameters = {};

  /** @type {!Object} */
  var headerParams = angular.extend({}, this.defaultHeaders_);
  if (opt_post !== undefined) {
    queryParameters['post'] = opt_post;
  }

  if (opt_apply !== undefined) {
    queryParameters['apply'] = opt_apply;
  }

  if (opt_delete !== undefined) {
    queryParameters['delete'] = opt_delete;
  }

  if (opt_action !== undefined) {
    queryParameters['action'] = opt_action;
  }

  if (opt_location !== undefined) {
    queryParameters['$location'] = opt_location;
  }

  if (opt_propertylist !== undefined) {
    queryParameters['propertylist'] = opt_propertylist;
  }

  if (opt_guessTotal !== undefined) {
    queryParameters['guessTotal'] = opt_guessTotal;
  }

  if (opt_tagTitleSearch !== undefined) {
    queryParameters['tagTitleSearch'] = opt_tagTitleSearch;
  }

  /** @type {!Object} */
  var httpRequestParams = {
    method: 'POST',
    url: path,
    json: true,
            params: queryParameters,
    headers: headerParams
  };

  if (opt_extraHttpRequestParams) {
    httpRequestParams = angular.extend(httpRequestParams, opt_extraHttpRequestParams);
  }

  return (/** @type {?} */ (this.http_))(httpRequestParams);
}

/**
 * 
 * 
 * @param {!boolean=} opt_post 
 * @param {!boolean=} opt_apply 
 * @param {!boolean=} opt_delete 
 * @param {!string=} opt_action 
 * @param {!string=} opt_location 
 * @param {!Array<!string>=} opt_propertylist 
 * @param {!Array<!string>=} opt_scope 
 * @param {!angular.$http.Config=} opt_extraHttpRequestParams Extra HTTP parameters to send.
 * @return {!angular.$q.Promise<!API.Client.comDayCqWcmCoreImplServletsFindReplaceServletInfo>}
 */
API.Client.ConfigmgrApi.prototype.comDayCqWcmCoreImplServletsFindReplaceServlet = function(opt_post, opt_apply, opt_delete, opt_action, opt_location, opt_propertylist, opt_scope, opt_extraHttpRequestParams) {
  /** @const {string} */
  var path = this.basePath_ + '/system/console/configMgr/com.day.cq.wcm.core.impl.servlets.FindReplaceServlet';

  /** @type {!Object} */
  var queryParameters = {};

  /** @type {!Object} */
  var headerParams = angular.extend({}, this.defaultHeaders_);
  if (opt_post !== undefined) {
    queryParameters['post'] = opt_post;
  }

  if (opt_apply !== undefined) {
    queryParameters['apply'] = opt_apply;
  }

  if (opt_delete !== undefined) {
    queryParameters['delete'] = opt_delete;
  }

  if (opt_action !== undefined) {
    queryParameters['action'] = opt_action;
  }

  if (opt_location !== undefined) {
    queryParameters['$location'] = opt_location;
  }

  if (opt_propertylist !== undefined) {
    queryParameters['propertylist'] = opt_propertylist;
  }

  if (opt_scope !== undefined) {
    queryParameters['scope'] = opt_scope;
  }

  /** @type {!Object} */
  var httpRequestParams = {
    method: 'POST',
    url: path,
    json: true,
            params: queryParameters,
    headers: headerParams
  };

  if (opt_extraHttpRequestParams) {
    httpRequestParams = angular.extend(httpRequestParams, opt_extraHttpRequestParams);
  }

  return (/** @type {?} */ (this.http_))(httpRequestParams);
}

/**
 * 
 * 
 * @param {!boolean=} opt_post 
 * @param {!boolean=} opt_apply 
 * @param {!boolean=} opt_delete 
 * @param {!string=} opt_action 
 * @param {!string=} opt_location 
 * @param {!Array<!string>=} opt_propertylist 
 * @param {!number=} opt_referencesearchservletMaxReferencesPerPage 
 * @param {!number=} opt_referencesearchservletMaxPages 
 * @param {!angular.$http.Config=} opt_extraHttpRequestParams Extra HTTP parameters to send.
 * @return {!angular.$q.Promise<!API.Client.comDayCqWcmCoreImplServletsReferenceSearchServletInfo>}
 */
API.Client.ConfigmgrApi.prototype.comDayCqWcmCoreImplServletsReferenceSearchServlet = function(opt_post, opt_apply, opt_delete, opt_action, opt_location, opt_propertylist, opt_referencesearchservletMaxReferencesPerPage, opt_referencesearchservletMaxPages, opt_extraHttpRequestParams) {
  /** @const {string} */
  var path = this.basePath_ + '/system/console/configMgr/com.day.cq.wcm.core.impl.servlets.ReferenceSearchServlet';

  /** @type {!Object} */
  var queryParameters = {};

  /** @type {!Object} */
  var headerParams = angular.extend({}, this.defaultHeaders_);
  if (opt_post !== undefined) {
    queryParameters['post'] = opt_post;
  }

  if (opt_apply !== undefined) {
    queryParameters['apply'] = opt_apply;
  }

  if (opt_delete !== undefined) {
    queryParameters['delete'] = opt_delete;
  }

  if (opt_action !== undefined) {
    queryParameters['action'] = opt_action;
  }

  if (opt_location !== undefined) {
    queryParameters['$location'] = opt_location;
  }

  if (opt_propertylist !== undefined) {
    queryParameters['propertylist'] = opt_propertylist;
  }

  if (opt_referencesearchservletMaxReferencesPerPage !== undefined) {
    queryParameters['referencesearchservlet.maxReferencesPerPage'] = opt_referencesearchservletMaxReferencesPerPage;
  }

  if (opt_referencesearchservletMaxPages !== undefined) {
    queryParameters['referencesearchservlet.maxPages'] = opt_referencesearchservletMaxPages;
  }

  /** @type {!Object} */
  var httpRequestParams = {
    method: 'POST',
    url: path,
    json: true,
            params: queryParameters,
    headers: headerParams
  };

  if (opt_extraHttpRequestParams) {
    httpRequestParams = angular.extend(httpRequestParams, opt_extraHttpRequestParams);
  }

  return (/** @type {?} */ (this.http_))(httpRequestParams);
}

/**
 * 
 * 
 * @param {!boolean=} opt_post 
 * @param {!boolean=} opt_apply 
 * @param {!boolean=} opt_delete 
 * @param {!string=} opt_action 
 * @param {!string=} opt_location 
 * @param {!Array<!string>=} opt_propertylist 
 * @param {!string=} opt_workspace 
 * @param {!Array<!string>=} opt_dimensions 
 * @param {!angular.$http.Config=} opt_extraHttpRequestParams Extra HTTP parameters to send.
 * @return {!angular.$q.Promise<!API.Client.comDayCqWcmCoreImplServletsThumbnailServletInfo>}
 */
API.Client.ConfigmgrApi.prototype.comDayCqWcmCoreImplServletsThumbnailServlet = function(opt_post, opt_apply, opt_delete, opt_action, opt_location, opt_propertylist, opt_workspace, opt_dimensions, opt_extraHttpRequestParams) {
  /** @const {string} */
  var path = this.basePath_ + '/system/console/configMgr/com.day.cq.wcm.core.impl.servlets.ThumbnailServlet';

  /** @type {!Object} */
  var queryParameters = {};

  /** @type {!Object} */
  var headerParams = angular.extend({}, this.defaultHeaders_);
  if (opt_post !== undefined) {
    queryParameters['post'] = opt_post;
  }

  if (opt_apply !== undefined) {
    queryParameters['apply'] = opt_apply;
  }

  if (opt_delete !== undefined) {
    queryParameters['delete'] = opt_delete;
  }

  if (opt_action !== undefined) {
    queryParameters['action'] = opt_action;
  }

  if (opt_location !== undefined) {
    queryParameters['$location'] = opt_location;
  }

  if (opt_propertylist !== undefined) {
    queryParameters['propertylist'] = opt_propertylist;
  }

  if (opt_workspace !== undefined) {
    queryParameters['workspace'] = opt_workspace;
  }

  if (opt_dimensions !== undefined) {
    queryParameters['dimensions'] = opt_dimensions;
  }

  /** @type {!Object} */
  var httpRequestParams = {
    method: 'POST',
    url: path,
    json: true,
            params: queryParameters,
    headers: headerParams
  };

  if (opt_extraHttpRequestParams) {
    httpRequestParams = angular.extend(httpRequestParams, opt_extraHttpRequestParams);
  }

  return (/** @type {?} */ (this.http_))(httpRequestParams);
}

/**
 * 
 * 
 * @param {!boolean=} opt_post 
 * @param {!boolean=} opt_apply 
 * @param {!boolean=} opt_delete 
 * @param {!string=} opt_action 
 * @param {!string=} opt_location 
 * @param {!Array<!string>=} opt_propertylist 
 * @param {!string=} opt_nonValidChars 
 * @param {!angular.$http.Config=} opt_extraHttpRequestParams Extra HTTP parameters to send.
 * @return {!angular.$q.Promise<!API.Client.comDayCqWcmCoreImplUtilsDefaultPageNameValidatorInfo>}
 */
API.Client.ConfigmgrApi.prototype.comDayCqWcmCoreImplUtilsDefaultPageNameValidator = function(opt_post, opt_apply, opt_delete, opt_action, opt_location, opt_propertylist, opt_nonValidChars, opt_extraHttpRequestParams) {
  /** @const {string} */
  var path = this.basePath_ + '/system/console/configMgr/com.day.cq.wcm.core.impl.utils.DefaultPageNameValidator';

  /** @type {!Object} */
  var queryParameters = {};

  /** @type {!Object} */
  var headerParams = angular.extend({}, this.defaultHeaders_);
  if (opt_post !== undefined) {
    queryParameters['post'] = opt_post;
  }

  if (opt_apply !== undefined) {
    queryParameters['apply'] = opt_apply;
  }

  if (opt_delete !== undefined) {
    queryParameters['delete'] = opt_delete;
  }

  if (opt_action !== undefined) {
    queryParameters['action'] = opt_action;
  }

  if (opt_location !== undefined) {
    queryParameters['$location'] = opt_location;
  }

  if (opt_propertylist !== undefined) {
    queryParameters['propertylist'] = opt_propertylist;
  }

  if (opt_nonValidChars !== undefined) {
    queryParameters['nonValidChars'] = opt_nonValidChars;
  }

  /** @type {!Object} */
  var httpRequestParams = {
    method: 'POST',
    url: path,
    json: true,
            params: queryParameters,
    headers: headerParams
  };

  if (opt_extraHttpRequestParams) {
    httpRequestParams = angular.extend(httpRequestParams, opt_extraHttpRequestParams);
  }

  return (/** @type {?} */ (this.http_))(httpRequestParams);
}

/**
 * 
 * 
 * @param {!boolean=} opt_post 
 * @param {!boolean=} opt_apply 
 * @param {!boolean=} opt_delete 
 * @param {!string=} opt_action 
 * @param {!string=} opt_location 
 * @param {!Array<!string>=} opt_propertylist 
 * @param {!string=} opt_defaultExternalizerDomain 
 * @param {!angular.$http.Config=} opt_extraHttpRequestParams Extra HTTP parameters to send.
 * @return {!angular.$q.Promise<!API.Client.comDayCqWcmCoreImplVariantsPageVariantsProviderImplInfo>}
 */
API.Client.ConfigmgrApi.prototype.comDayCqWcmCoreImplVariantsPageVariantsProviderImpl = function(opt_post, opt_apply, opt_delete, opt_action, opt_location, opt_propertylist, opt_defaultExternalizerDomain, opt_extraHttpRequestParams) {
  /** @const {string} */
  var path = this.basePath_ + '/system/console/configMgr/com.day.cq.wcm.core.impl.variants.PageVariantsProviderImpl';

  /** @type {!Object} */
  var queryParameters = {};

  /** @type {!Object} */
  var headerParams = angular.extend({}, this.defaultHeaders_);
  if (opt_post !== undefined) {
    queryParameters['post'] = opt_post;
  }

  if (opt_apply !== undefined) {
    queryParameters['apply'] = opt_apply;
  }

  if (opt_delete !== undefined) {
    queryParameters['delete'] = opt_delete;
  }

  if (opt_action !== undefined) {
    queryParameters['action'] = opt_action;
  }

  if (opt_location !== undefined) {
    queryParameters['$location'] = opt_location;
  }

  if (opt_propertylist !== undefined) {
    queryParameters['propertylist'] = opt_propertylist;
  }

  if (opt_defaultExternalizerDomain !== undefined) {
    queryParameters['default.externalizer.domain'] = opt_defaultExternalizerDomain;
  }

  /** @type {!Object} */
  var httpRequestParams = {
    method: 'POST',
    url: path,
    json: true,
            params: queryParameters,
    headers: headerParams
  };

  if (opt_extraHttpRequestParams) {
    httpRequestParams = angular.extend(httpRequestParams, opt_extraHttpRequestParams);
  }

  return (/** @type {?} */ (this.http_))(httpRequestParams);
}

/**
 * 
 * 
 * @param {!boolean=} opt_post 
 * @param {!boolean=} opt_apply 
 * @param {!boolean=} opt_delete 
 * @param {!string=} opt_action 
 * @param {!string=} opt_location 
 * @param {!Array<!string>=} opt_propertylist 
 * @param {!boolean=} opt_versionmanagerCreateVersionOnActivation 
 * @param {!boolean=} opt_versionmanagerPurgingEnabled 
 * @param {!Array<!string>=} opt_versionmanagerPurgePaths 
 * @param {!Array<!string>=} opt_versionmanagerIvPaths 
 * @param {!number=} opt_versionmanagerMaxAgeDays 
 * @param {!number=} opt_versionmanagerMaxNumberVersions 
 * @param {!number=} opt_versionmanagerMinNumberVersions 
 * @param {!angular.$http.Config=} opt_extraHttpRequestParams Extra HTTP parameters to send.
 * @return {!angular.$q.Promise<!API.Client.comDayCqWcmCoreImplVersionManagerImplInfo>}
 */
API.Client.ConfigmgrApi.prototype.comDayCqWcmCoreImplVersionManagerImpl = function(opt_post, opt_apply, opt_delete, opt_action, opt_location, opt_propertylist, opt_versionmanagerCreateVersionOnActivation, opt_versionmanagerPurgingEnabled, opt_versionmanagerPurgePaths, opt_versionmanagerIvPaths, opt_versionmanagerMaxAgeDays, opt_versionmanagerMaxNumberVersions, opt_versionmanagerMinNumberVersions, opt_extraHttpRequestParams) {
  /** @const {string} */
  var path = this.basePath_ + '/system/console/configMgr/com.day.cq.wcm.core.impl.VersionManagerImpl';

  /** @type {!Object} */
  var queryParameters = {};

  /** @type {!Object} */
  var headerParams = angular.extend({}, this.defaultHeaders_);
  if (opt_post !== undefined) {
    queryParameters['post'] = opt_post;
  }

  if (opt_apply !== undefined) {
    queryParameters['apply'] = opt_apply;
  }

  if (opt_delete !== undefined) {
    queryParameters['delete'] = opt_delete;
  }

  if (opt_action !== undefined) {
    queryParameters['action'] = opt_action;
  }

  if (opt_location !== undefined) {
    queryParameters['$location'] = opt_location;
  }

  if (opt_propertylist !== undefined) {
    queryParameters['propertylist'] = opt_propertylist;
  }

  if (opt_versionmanagerCreateVersionOnActivation !== undefined) {
    queryParameters['versionmanager.createVersionOnActivation'] = opt_versionmanagerCreateVersionOnActivation;
  }

  if (opt_versionmanagerPurgingEnabled !== undefined) {
    queryParameters['versionmanager.purgingEnabled'] = opt_versionmanagerPurgingEnabled;
  }

  if (opt_versionmanagerPurgePaths !== undefined) {
    queryParameters['versionmanager.purgePaths'] = opt_versionmanagerPurgePaths;
  }

  if (opt_versionmanagerIvPaths !== undefined) {
    queryParameters['versionmanager.ivPaths'] = opt_versionmanagerIvPaths;
  }

  if (opt_versionmanagerMaxAgeDays !== undefined) {
    queryParameters['versionmanager.maxAgeDays'] = opt_versionmanagerMaxAgeDays;
  }

  if (opt_versionmanagerMaxNumberVersions !== undefined) {
    queryParameters['versionmanager.maxNumberVersions'] = opt_versionmanagerMaxNumberVersions;
  }

  if (opt_versionmanagerMinNumberVersions !== undefined) {
    queryParameters['versionmanager.minNumberVersions'] = opt_versionmanagerMinNumberVersions;
  }

  /** @type {!Object} */
  var httpRequestParams = {
    method: 'POST',
    url: path,
    json: true,
            params: queryParameters,
    headers: headerParams
  };

  if (opt_extraHttpRequestParams) {
    httpRequestParams = angular.extend(httpRequestParams, opt_extraHttpRequestParams);
  }

  return (/** @type {?} */ (this.http_))(httpRequestParams);
}

/**
 * 
 * 
 * @param {!boolean=} opt_post 
 * @param {!boolean=} opt_apply 
 * @param {!boolean=} opt_delete 
 * @param {!string=} opt_action 
 * @param {!string=} opt_location 
 * @param {!Array<!string>=} opt_propertylist 
 * @param {!Array<!string>=} opt_versionpurgePaths 
 * @param {!boolean=} opt_versionpurgeRecursive 
 * @param {!number=} opt_versionpurgeMaxVersions 
 * @param {!number=} opt_versionpurgeMinVersions 
 * @param {!number=} opt_versionpurgeMaxAgeDays 
 * @param {!angular.$http.Config=} opt_extraHttpRequestParams Extra HTTP parameters to send.
 * @return {!angular.$q.Promise<!API.Client.comDayCqWcmCoreImplVersionPurgeTaskInfo>}
 */
API.Client.ConfigmgrApi.prototype.comDayCqWcmCoreImplVersionPurgeTask = function(opt_post, opt_apply, opt_delete, opt_action, opt_location, opt_propertylist, opt_versionpurgePaths, opt_versionpurgeRecursive, opt_versionpurgeMaxVersions, opt_versionpurgeMinVersions, opt_versionpurgeMaxAgeDays, opt_extraHttpRequestParams) {
  /** @const {string} */
  var path = this.basePath_ + '/system/console/configMgr/com.day.cq.wcm.core.impl.VersionPurgeTask';

  /** @type {!Object} */
  var queryParameters = {};

  /** @type {!Object} */
  var headerParams = angular.extend({}, this.defaultHeaders_);
  if (opt_post !== undefined) {
    queryParameters['post'] = opt_post;
  }

  if (opt_apply !== undefined) {
    queryParameters['apply'] = opt_apply;
  }

  if (opt_delete !== undefined) {
    queryParameters['delete'] = opt_delete;
  }

  if (opt_action !== undefined) {
    queryParameters['action'] = opt_action;
  }

  if (opt_location !== undefined) {
    queryParameters['$location'] = opt_location;
  }

  if (opt_propertylist !== undefined) {
    queryParameters['propertylist'] = opt_propertylist;
  }

  if (opt_versionpurgePaths !== undefined) {
    queryParameters['versionpurge.paths'] = opt_versionpurgePaths;
  }

  if (opt_versionpurgeRecursive !== undefined) {
    queryParameters['versionpurge.recursive'] = opt_versionpurgeRecursive;
  }

  if (opt_versionpurgeMaxVersions !== undefined) {
    queryParameters['versionpurge.maxVersions'] = opt_versionpurgeMaxVersions;
  }

  if (opt_versionpurgeMinVersions !== undefined) {
    queryParameters['versionpurge.minVersions'] = opt_versionpurgeMinVersions;
  }

  if (opt_versionpurgeMaxAgeDays !== undefined) {
    queryParameters['versionpurge.maxAgeDays'] = opt_versionpurgeMaxAgeDays;
  }

  /** @type {!Object} */
  var httpRequestParams = {
    method: 'POST',
    url: path,
    json: true,
            params: queryParameters,
    headers: headerParams
  };

  if (opt_extraHttpRequestParams) {
    httpRequestParams = angular.extend(httpRequestParams, opt_extraHttpRequestParams);
  }

  return (/** @type {?} */ (this.http_))(httpRequestParams);
}

/**
 * 
 * 
 * @param {!boolean=} opt_post 
 * @param {!boolean=} opt_apply 
 * @param {!boolean=} opt_delete 
 * @param {!string=} opt_action 
 * @param {!string=} opt_location 
 * @param {!Array<!string>=} opt_propertylist 
 * @param {!boolean=} opt_wcmdbgfilterEnabled 
 * @param {!boolean=} opt_wcmdbgfilterJspDebug 
 * @param {!angular.$http.Config=} opt_extraHttpRequestParams Extra HTTP parameters to send.
 * @return {!angular.$q.Promise<!API.Client.comDayCqWcmCoreImplWCMDebugFilterInfo>}
 */
API.Client.ConfigmgrApi.prototype.comDayCqWcmCoreImplWCMDebugFilter = function(opt_post, opt_apply, opt_delete, opt_action, opt_location, opt_propertylist, opt_wcmdbgfilterEnabled, opt_wcmdbgfilterJspDebug, opt_extraHttpRequestParams) {
  /** @const {string} */
  var path = this.basePath_ + '/system/console/configMgr/com.day.cq.wcm.core.impl.WCMDebugFilter';

  /** @type {!Object} */
  var queryParameters = {};

  /** @type {!Object} */
  var headerParams = angular.extend({}, this.defaultHeaders_);
  if (opt_post !== undefined) {
    queryParameters['post'] = opt_post;
  }

  if (opt_apply !== undefined) {
    queryParameters['apply'] = opt_apply;
  }

  if (opt_delete !== undefined) {
    queryParameters['delete'] = opt_delete;
  }

  if (opt_action !== undefined) {
    queryParameters['action'] = opt_action;
  }

  if (opt_location !== undefined) {
    queryParameters['$location'] = opt_location;
  }

  if (opt_propertylist !== undefined) {
    queryParameters['propertylist'] = opt_propertylist;
  }

  if (opt_wcmdbgfilterEnabled !== undefined) {
    queryParameters['wcmdbgfilter.enabled'] = opt_wcmdbgfilterEnabled;
  }

  if (opt_wcmdbgfilterJspDebug !== undefined) {
    queryParameters['wcmdbgfilter.jspDebug'] = opt_wcmdbgfilterJspDebug;
  }

  /** @type {!Object} */
  var httpRequestParams = {
    method: 'POST',
    url: path,
    json: true,
            params: queryParameters,
    headers: headerParams
  };

  if (opt_extraHttpRequestParams) {
    httpRequestParams = angular.extend(httpRequestParams, opt_extraHttpRequestParams);
  }

  return (/** @type {?} */ (this.http_))(httpRequestParams);
}

/**
 * 
 * 
 * @param {!boolean=} opt_post 
 * @param {!boolean=} opt_apply 
 * @param {!boolean=} opt_delete 
 * @param {!string=} opt_action 
 * @param {!string=} opt_location 
 * @param {!Array<!string>=} opt_propertylist 
 * @param {!boolean=} opt_wcmdevmodefilterEnabled 
 * @param {!angular.$http.Config=} opt_extraHttpRequestParams Extra HTTP parameters to send.
 * @return {!angular.$q.Promise<!API.Client.comDayCqWcmCoreImplWCMDeveloperModeFilterInfo>}
 */
API.Client.ConfigmgrApi.prototype.comDayCqWcmCoreImplWCMDeveloperModeFilter = function(opt_post, opt_apply, opt_delete, opt_action, opt_location, opt_propertylist, opt_wcmdevmodefilterEnabled, opt_extraHttpRequestParams) {
  /** @const {string} */
  var path = this.basePath_ + '/system/console/configMgr/com.day.cq.wcm.core.impl.WCMDeveloperModeFilter';

  /** @type {!Object} */
  var queryParameters = {};

  /** @type {!Object} */
  var headerParams = angular.extend({}, this.defaultHeaders_);
  if (opt_post !== undefined) {
    queryParameters['post'] = opt_post;
  }

  if (opt_apply !== undefined) {
    queryParameters['apply'] = opt_apply;
  }

  if (opt_delete !== undefined) {
    queryParameters['delete'] = opt_delete;
  }

  if (opt_action !== undefined) {
    queryParameters['action'] = opt_action;
  }

  if (opt_location !== undefined) {
    queryParameters['$location'] = opt_location;
  }

  if (opt_propertylist !== undefined) {
    queryParameters['propertylist'] = opt_propertylist;
  }

  if (opt_wcmdevmodefilterEnabled !== undefined) {
    queryParameters['wcmdevmodefilter.enabled'] = opt_wcmdevmodefilterEnabled;
  }

  /** @type {!Object} */
  var httpRequestParams = {
    method: 'POST',
    url: path,
    json: true,
            params: queryParameters,
    headers: headerParams
  };

  if (opt_extraHttpRequestParams) {
    httpRequestParams = angular.extend(httpRequestParams, opt_extraHttpRequestParams);
  }

  return (/** @type {?} */ (this.http_))(httpRequestParams);
}

/**
 * 
 * 
 * @param {!boolean=} opt_post 
 * @param {!boolean=} opt_apply 
 * @param {!boolean=} opt_delete 
 * @param {!string=} opt_action 
 * @param {!string=} opt_location 
 * @param {!Array<!string>=} opt_propertylist 
 * @param {!string=} opt_filterOrder 
 * @param {!string=} opt_filterScope 
 * @param {!angular.$http.Config=} opt_extraHttpRequestParams Extra HTTP parameters to send.
 * @return {!angular.$q.Promise<!API.Client.comDayCqWcmCoreImplWarpTimeWarpFilterInfo>}
 */
API.Client.ConfigmgrApi.prototype.comDayCqWcmCoreImplWarpTimeWarpFilter = function(opt_post, opt_apply, opt_delete, opt_action, opt_location, opt_propertylist, opt_filterOrder, opt_filterScope, opt_extraHttpRequestParams) {
  /** @const {string} */
  var path = this.basePath_ + '/system/console/configMgr/com.day.cq.wcm.core.impl.warp.TimeWarpFilter';

  /** @type {!Object} */
  var queryParameters = {};

  /** @type {!Object} */
  var headerParams = angular.extend({}, this.defaultHeaders_);
  if (opt_post !== undefined) {
    queryParameters['post'] = opt_post;
  }

  if (opt_apply !== undefined) {
    queryParameters['apply'] = opt_apply;
  }

  if (opt_delete !== undefined) {
    queryParameters['delete'] = opt_delete;
  }

  if (opt_action !== undefined) {
    queryParameters['action'] = opt_action;
  }

  if (opt_location !== undefined) {
    queryParameters['$location'] = opt_location;
  }

  if (opt_propertylist !== undefined) {
    queryParameters['propertylist'] = opt_propertylist;
  }

  if (opt_filterOrder !== undefined) {
    queryParameters['filter.order'] = opt_filterOrder;
  }

  if (opt_filterScope !== undefined) {
    queryParameters['filter.scope'] = opt_filterScope;
  }

  /** @type {!Object} */
  var httpRequestParams = {
    method: 'POST',
    url: path,
    json: true,
            params: queryParameters,
    headers: headerParams
  };

  if (opt_extraHttpRequestParams) {
    httpRequestParams = angular.extend(httpRequestParams, opt_extraHttpRequestParams);
  }

  return (/** @type {?} */ (this.http_))(httpRequestParams);
}

/**
 * 
 * 
 * @param {!boolean=} opt_post 
 * @param {!boolean=} opt_apply 
 * @param {!boolean=} opt_delete 
 * @param {!string=} opt_action 
 * @param {!string=} opt_location 
 * @param {!Array<!string>=} opt_propertylist 
 * @param {!string=} opt_mvtstatisticsTrackingurl 
 * @param {!angular.$http.Config=} opt_extraHttpRequestParams Extra HTTP parameters to send.
 * @return {!angular.$q.Promise<!API.Client.comDayCqWcmCoreMvtMVTStatisticsImplInfo>}
 */
API.Client.ConfigmgrApi.prototype.comDayCqWcmCoreMvtMVTStatisticsImpl = function(opt_post, opt_apply, opt_delete, opt_action, opt_location, opt_propertylist, opt_mvtstatisticsTrackingurl, opt_extraHttpRequestParams) {
  /** @const {string} */
  var path = this.basePath_ + '/system/console/configMgr/com.day.cq.wcm.core.mvt.MVTStatisticsImpl';

  /** @type {!Object} */
  var queryParameters = {};

  /** @type {!Object} */
  var headerParams = angular.extend({}, this.defaultHeaders_);
  if (opt_post !== undefined) {
    queryParameters['post'] = opt_post;
  }

  if (opt_apply !== undefined) {
    queryParameters['apply'] = opt_apply;
  }

  if (opt_delete !== undefined) {
    queryParameters['delete'] = opt_delete;
  }

  if (opt_action !== undefined) {
    queryParameters['action'] = opt_action;
  }

  if (opt_location !== undefined) {
    queryParameters['$location'] = opt_location;
  }

  if (opt_propertylist !== undefined) {
    queryParameters['propertylist'] = opt_propertylist;
  }

  if (opt_mvtstatisticsTrackingurl !== undefined) {
    queryParameters['mvtstatistics.trackingurl'] = opt_mvtstatisticsTrackingurl;
  }

  /** @type {!Object} */
  var httpRequestParams = {
    method: 'POST',
    url: path,
    json: true,
            params: queryParameters,
    headers: headerParams
  };

  if (opt_extraHttpRequestParams) {
    httpRequestParams = angular.extend(httpRequestParams, opt_extraHttpRequestParams);
  }

  return (/** @type {?} */ (this.http_))(httpRequestParams);
}

/**
 * 
 * 
 * @param {!boolean=} opt_post 
 * @param {!boolean=} opt_apply 
 * @param {!boolean=} opt_delete 
 * @param {!string=} opt_action 
 * @param {!string=} opt_location 
 * @param {!Array<!string>=} opt_propertylist 
 * @param {!string=} opt_pageviewstatisticsTrackingurl 
 * @param {!string=} opt_pageviewstatisticsTrackingscriptEnabled 
 * @param {!angular.$http.Config=} opt_extraHttpRequestParams Extra HTTP parameters to send.
 * @return {!angular.$q.Promise<!API.Client.comDayCqWcmCoreStatsPageViewStatisticsImplInfo>}
 */
API.Client.ConfigmgrApi.prototype.comDayCqWcmCoreStatsPageViewStatisticsImpl = function(opt_post, opt_apply, opt_delete, opt_action, opt_location, opt_propertylist, opt_pageviewstatisticsTrackingurl, opt_pageviewstatisticsTrackingscriptEnabled, opt_extraHttpRequestParams) {
  /** @const {string} */
  var path = this.basePath_ + '/system/console/configMgr/com.day.cq.wcm.core.stats.PageViewStatisticsImpl';

  /** @type {!Object} */
  var queryParameters = {};

  /** @type {!Object} */
  var headerParams = angular.extend({}, this.defaultHeaders_);
  if (opt_post !== undefined) {
    queryParameters['post'] = opt_post;
  }

  if (opt_apply !== undefined) {
    queryParameters['apply'] = opt_apply;
  }

  if (opt_delete !== undefined) {
    queryParameters['delete'] = opt_delete;
  }

  if (opt_action !== undefined) {
    queryParameters['action'] = opt_action;
  }

  if (opt_location !== undefined) {
    queryParameters['$location'] = opt_location;
  }

  if (opt_propertylist !== undefined) {
    queryParameters['propertylist'] = opt_propertylist;
  }

  if (opt_pageviewstatisticsTrackingurl !== undefined) {
    queryParameters['pageviewstatistics.trackingurl'] = opt_pageviewstatisticsTrackingurl;
  }

  if (opt_pageviewstatisticsTrackingscriptEnabled !== undefined) {
    queryParameters['pageviewstatistics.trackingscript.enabled'] = opt_pageviewstatisticsTrackingscriptEnabled;
  }

  /** @type {!Object} */
  var httpRequestParams = {
    method: 'POST',
    url: path,
    json: true,
            params: queryParameters,
    headers: headerParams
  };

  if (opt_extraHttpRequestParams) {
    httpRequestParams = angular.extend(httpRequestParams, opt_extraHttpRequestParams);
  }

  return (/** @type {?} */ (this.http_))(httpRequestParams);
}

/**
 * 
 * 
 * @param {!boolean=} opt_post 
 * @param {!boolean=} opt_apply 
 * @param {!boolean=} opt_delete 
 * @param {!string=} opt_action 
 * @param {!string=} opt_location 
 * @param {!Array<!string>=} opt_propertylist 
 * @param {!string=} opt_wcmfilterMode 
 * @param {!angular.$http.Config=} opt_extraHttpRequestParams Extra HTTP parameters to send.
 * @return {!angular.$q.Promise<!API.Client.comDayCqWcmCoreWCMRequestFilterInfo>}
 */
API.Client.ConfigmgrApi.prototype.comDayCqWcmCoreWCMRequestFilter = function(opt_post, opt_apply, opt_delete, opt_action, opt_location, opt_propertylist, opt_wcmfilterMode, opt_extraHttpRequestParams) {
  /** @const {string} */
  var path = this.basePath_ + '/system/console/configMgr/com.day.cq.wcm.core.WCMRequestFilter';

  /** @type {!Object} */
  var queryParameters = {};

  /** @type {!Object} */
  var headerParams = angular.extend({}, this.defaultHeaders_);
  if (opt_post !== undefined) {
    queryParameters['post'] = opt_post;
  }

  if (opt_apply !== undefined) {
    queryParameters['apply'] = opt_apply;
  }

  if (opt_delete !== undefined) {
    queryParameters['delete'] = opt_delete;
  }

  if (opt_action !== undefined) {
    queryParameters['action'] = opt_action;
  }

  if (opt_location !== undefined) {
    queryParameters['$location'] = opt_location;
  }

  if (opt_propertylist !== undefined) {
    queryParameters['propertylist'] = opt_propertylist;
  }

  if (opt_wcmfilterMode !== undefined) {
    queryParameters['wcmfilter.mode'] = opt_wcmfilterMode;
  }

  /** @type {!Object} */
  var httpRequestParams = {
    method: 'POST',
    url: path,
    json: true,
            params: queryParameters,
    headers: headerParams
  };

  if (opt_extraHttpRequestParams) {
    httpRequestParams = angular.extend(httpRequestParams, opt_extraHttpRequestParams);
  }

  return (/** @type {?} */ (this.http_))(httpRequestParams);
}

/**
 * 
 * 
 * @param {!boolean=} opt_post 
 * @param {!boolean=} opt_apply 
 * @param {!boolean=} opt_delete 
 * @param {!string=} opt_action 
 * @param {!string=} opt_location 
 * @param {!Array<!string>=} opt_propertylist 
 * @param {!Array<!string>=} opt_extractFilter 
 * @param {!angular.$http.Config=} opt_extraHttpRequestParams Extra HTTP parameters to send.
 * @return {!angular.$q.Promise<!API.Client.comDayCqWcmDesignimporterDesignPackageImporterInfo>}
 */
API.Client.ConfigmgrApi.prototype.comDayCqWcmDesignimporterDesignPackageImporter = function(opt_post, opt_apply, opt_delete, opt_action, opt_location, opt_propertylist, opt_extractFilter, opt_extraHttpRequestParams) {
  /** @const {string} */
  var path = this.basePath_ + '/system/console/configMgr/com.day.cq.wcm.designimporter.DesignPackageImporter';

  /** @type {!Object} */
  var queryParameters = {};

  /** @type {!Object} */
  var headerParams = angular.extend({}, this.defaultHeaders_);
  if (opt_post !== undefined) {
    queryParameters['post'] = opt_post;
  }

  if (opt_apply !== undefined) {
    queryParameters['apply'] = opt_apply;
  }

  if (opt_delete !== undefined) {
    queryParameters['delete'] = opt_delete;
  }

  if (opt_action !== undefined) {
    queryParameters['action'] = opt_action;
  }

  if (opt_location !== undefined) {
    queryParameters['$location'] = opt_location;
  }

  if (opt_propertylist !== undefined) {
    queryParameters['propertylist'] = opt_propertylist;
  }

  if (opt_extractFilter !== undefined) {
    queryParameters['extract.filter'] = opt_extractFilter;
  }

  /** @type {!Object} */
  var httpRequestParams = {
    method: 'POST',
    url: path,
    json: true,
            params: queryParameters,
    headers: headerParams
  };

  if (opt_extraHttpRequestParams) {
    httpRequestParams = angular.extend(httpRequestParams, opt_extraHttpRequestParams);
  }

  return (/** @type {?} */ (this.http_))(httpRequestParams);
}

/**
 * 
 * 
 * @param {!boolean=} opt_post 
 * @param {!boolean=} opt_apply 
 * @param {!boolean=} opt_delete 
 * @param {!string=} opt_action 
 * @param {!string=} opt_location 
 * @param {!Array<!string>=} opt_propertylist 
 * @param {!string=} opt_filepattern 
 * @param {!boolean=} opt_buildPageNodes 
 * @param {!boolean=} opt_buildClientLibs 
 * @param {!boolean=} opt_buildCanvasComponent 
 * @param {!angular.$http.Config=} opt_extraHttpRequestParams Extra HTTP parameters to send.
 * @return {!angular.$q.Promise<!API.Client.comDayCqWcmDesignimporterImplCanvasBuilderImplInfo>}
 */
API.Client.ConfigmgrApi.prototype.comDayCqWcmDesignimporterImplCanvasBuilderImpl = function(opt_post, opt_apply, opt_delete, opt_action, opt_location, opt_propertylist, opt_filepattern, opt_buildPageNodes, opt_buildClientLibs, opt_buildCanvasComponent, opt_extraHttpRequestParams) {
  /** @const {string} */
  var path = this.basePath_ + '/system/console/configMgr/com.day.cq.wcm.designimporter.impl.CanvasBuilderImpl';

  /** @type {!Object} */
  var queryParameters = {};

  /** @type {!Object} */
  var headerParams = angular.extend({}, this.defaultHeaders_);
  if (opt_post !== undefined) {
    queryParameters['post'] = opt_post;
  }

  if (opt_apply !== undefined) {
    queryParameters['apply'] = opt_apply;
  }

  if (opt_delete !== undefined) {
    queryParameters['delete'] = opt_delete;
  }

  if (opt_action !== undefined) {
    queryParameters['action'] = opt_action;
  }

  if (opt_location !== undefined) {
    queryParameters['$location'] = opt_location;
  }

  if (opt_propertylist !== undefined) {
    queryParameters['propertylist'] = opt_propertylist;
  }

  if (opt_filepattern !== undefined) {
    queryParameters['filepattern'] = opt_filepattern;
  }

  if (opt_buildPageNodes !== undefined) {
    queryParameters['build.page.nodes'] = opt_buildPageNodes;
  }

  if (opt_buildClientLibs !== undefined) {
    queryParameters['build.client.libs'] = opt_buildClientLibs;
  }

  if (opt_buildCanvasComponent !== undefined) {
    queryParameters['build.canvas.component'] = opt_buildCanvasComponent;
  }

  /** @type {!Object} */
  var httpRequestParams = {
    method: 'POST',
    url: path,
    json: true,
            params: queryParameters,
    headers: headerParams
  };

  if (opt_extraHttpRequestParams) {
    httpRequestParams = angular.extend(httpRequestParams, opt_extraHttpRequestParams);
  }

  return (/** @type {?} */ (this.http_))(httpRequestParams);
}

/**
 * 
 * 
 * @param {!boolean=} opt_post 
 * @param {!boolean=} opt_apply 
 * @param {!boolean=} opt_delete 
 * @param {!string=} opt_action 
 * @param {!string=} opt_location 
 * @param {!Array<!string>=} opt_propertylist 
 * @param {!number=} opt_minThreadPoolSize 
 * @param {!number=} opt_maxThreadPoolSize 
 * @param {!angular.$http.Config=} opt_extraHttpRequestParams Extra HTTP parameters to send.
 * @return {!angular.$q.Promise<!API.Client.comDayCqWcmDesignimporterImplCanvasPageDeleteHandlerInfo>}
 */
API.Client.ConfigmgrApi.prototype.comDayCqWcmDesignimporterImplCanvasPageDeleteHandler = function(opt_post, opt_apply, opt_delete, opt_action, opt_location, opt_propertylist, opt_minThreadPoolSize, opt_maxThreadPoolSize, opt_extraHttpRequestParams) {
  /** @const {string} */
  var path = this.basePath_ + '/system/console/configMgr/com.day.cq.wcm.designimporter.impl.CanvasPageDeleteHandler';

  /** @type {!Object} */
  var queryParameters = {};

  /** @type {!Object} */
  var headerParams = angular.extend({}, this.defaultHeaders_);
  if (opt_post !== undefined) {
    queryParameters['post'] = opt_post;
  }

  if (opt_apply !== undefined) {
    queryParameters['apply'] = opt_apply;
  }

  if (opt_delete !== undefined) {
    queryParameters['delete'] = opt_delete;
  }

  if (opt_action !== undefined) {
    queryParameters['action'] = opt_action;
  }

  if (opt_location !== undefined) {
    queryParameters['$location'] = opt_location;
  }

  if (opt_propertylist !== undefined) {
    queryParameters['propertylist'] = opt_propertylist;
  }

  if (opt_minThreadPoolSize !== undefined) {
    queryParameters['minThreadPoolSize'] = opt_minThreadPoolSize;
  }

  if (opt_maxThreadPoolSize !== undefined) {
    queryParameters['maxThreadPoolSize'] = opt_maxThreadPoolSize;
  }

  /** @type {!Object} */
  var httpRequestParams = {
    method: 'POST',
    url: path,
    json: true,
            params: queryParameters,
    headers: headerParams
  };

  if (opt_extraHttpRequestParams) {
    httpRequestParams = angular.extend(httpRequestParams, opt_extraHttpRequestParams);
  }

  return (/** @type {?} */ (this.http_))(httpRequestParams);
}

/**
 * 
 * 
 * @param {!boolean=} opt_post 
 * @param {!boolean=} opt_apply 
 * @param {!boolean=} opt_delete 
 * @param {!string=} opt_action 
 * @param {!string=} opt_location 
 * @param {!Array<!string>=} opt_propertylist 
 * @param {!string=} opt_searchPattern 
 * @param {!string=} opt_replacePattern 
 * @param {!angular.$http.Config=} opt_extraHttpRequestParams Extra HTTP parameters to send.
 * @return {!angular.$q.Promise<!API.Client.comDayCqWcmDesignimporterImplEntryPreprocessorImplInfo>}
 */
API.Client.ConfigmgrApi.prototype.comDayCqWcmDesignimporterImplEntryPreprocessorImpl = function(opt_post, opt_apply, opt_delete, opt_action, opt_location, opt_propertylist, opt_searchPattern, opt_replacePattern, opt_extraHttpRequestParams) {
  /** @const {string} */
  var path = this.basePath_ + '/system/console/configMgr/com.day.cq.wcm.designimporter.impl.EntryPreprocessorImpl';

  /** @type {!Object} */
  var queryParameters = {};

  /** @type {!Object} */
  var headerParams = angular.extend({}, this.defaultHeaders_);
  if (opt_post !== undefined) {
    queryParameters['post'] = opt_post;
  }

  if (opt_apply !== undefined) {
    queryParameters['apply'] = opt_apply;
  }

  if (opt_delete !== undefined) {
    queryParameters['delete'] = opt_delete;
  }

  if (opt_action !== undefined) {
    queryParameters['action'] = opt_action;
  }

  if (opt_location !== undefined) {
    queryParameters['$location'] = opt_location;
  }

  if (opt_propertylist !== undefined) {
    queryParameters['propertylist'] = opt_propertylist;
  }

  if (opt_searchPattern !== undefined) {
    queryParameters['search.pattern'] = opt_searchPattern;
  }

  if (opt_replacePattern !== undefined) {
    queryParameters['replace.pattern'] = opt_replacePattern;
  }

  /** @type {!Object} */
  var httpRequestParams = {
    method: 'POST',
    url: path,
    json: true,
            params: queryParameters,
    headers: headerParams
  };

  if (opt_extraHttpRequestParams) {
    httpRequestParams = angular.extend(httpRequestParams, opt_extraHttpRequestParams);
  }

  return (/** @type {?} */ (this.http_))(httpRequestParams);
}

/**
 * 
 * 
 * @param {!boolean=} opt_post 
 * @param {!boolean=} opt_apply 
 * @param {!boolean=} opt_delete 
 * @param {!string=} opt_action 
 * @param {!string=} opt_location 
 * @param {!Array<!string>=} opt_propertylist 
 * @param {!string=} opt_filepattern 
 * @param {!Array<!string>=} opt_deviceGroups 
 * @param {!boolean=} opt_buildPageNodes 
 * @param {!boolean=} opt_buildClientLibs 
 * @param {!boolean=} opt_buildCanvasComponent 
 * @param {!angular.$http.Config=} opt_extraHttpRequestParams Extra HTTP parameters to send.
 * @return {!angular.$q.Promise<!API.Client.comDayCqWcmDesignimporterImplMobileCanvasBuilderImplInfo>}
 */
API.Client.ConfigmgrApi.prototype.comDayCqWcmDesignimporterImplMobileCanvasBuilderImpl = function(opt_post, opt_apply, opt_delete, opt_action, opt_location, opt_propertylist, opt_filepattern, opt_deviceGroups, opt_buildPageNodes, opt_buildClientLibs, opt_buildCanvasComponent, opt_extraHttpRequestParams) {
  /** @const {string} */
  var path = this.basePath_ + '/system/console/configMgr/com.day.cq.wcm.designimporter.impl.MobileCanvasBuilderImpl';

  /** @type {!Object} */
  var queryParameters = {};

  /** @type {!Object} */
  var headerParams = angular.extend({}, this.defaultHeaders_);
  if (opt_post !== undefined) {
    queryParameters['post'] = opt_post;
  }

  if (opt_apply !== undefined) {
    queryParameters['apply'] = opt_apply;
  }

  if (opt_delete !== undefined) {
    queryParameters['delete'] = opt_delete;
  }

  if (opt_action !== undefined) {
    queryParameters['action'] = opt_action;
  }

  if (opt_location !== undefined) {
    queryParameters['$location'] = opt_location;
  }

  if (opt_propertylist !== undefined) {
    queryParameters['propertylist'] = opt_propertylist;
  }

  if (opt_filepattern !== undefined) {
    queryParameters['filepattern'] = opt_filepattern;
  }

  if (opt_deviceGroups !== undefined) {
    queryParameters['device.groups'] = opt_deviceGroups;
  }

  if (opt_buildPageNodes !== undefined) {
    queryParameters['build.page.nodes'] = opt_buildPageNodes;
  }

  if (opt_buildClientLibs !== undefined) {
    queryParameters['build.client.libs'] = opt_buildClientLibs;
  }

  if (opt_buildCanvasComponent !== undefined) {
    queryParameters['build.canvas.component'] = opt_buildCanvasComponent;
  }

  /** @type {!Object} */
  var httpRequestParams = {
    method: 'POST',
    url: path,
    json: true,
            params: queryParameters,
    headers: headerParams
  };

  if (opt_extraHttpRequestParams) {
    httpRequestParams = angular.extend(httpRequestParams, opt_extraHttpRequestParams);
  }

  return (/** @type {?} */ (this.http_))(httpRequestParams);
}

/**
 * 
 * 
 * @param {!boolean=} opt_post 
 * @param {!boolean=} opt_apply 
 * @param {!boolean=} opt_delete 
 * @param {!string=} opt_action 
 * @param {!string=} opt_location 
 * @param {!Array<!string>=} opt_propertylist 
 * @param {!number=} opt_serviceRanking 
 * @param {!string=} opt_tagpattern 
 * @param {!angular.$http.Config=} opt_extraHttpRequestParams Extra HTTP parameters to send.
 * @return {!angular.$q.Promise<!API.Client.comDayCqWcmDesignimporterParserTaghandlersFactoryCanvasComponeInfo>}
 */
API.Client.ConfigmgrApi.prototype.comDayCqWcmDesignimporterParserTaghandlersFactoryCanvasCompone = function(opt_post, opt_apply, opt_delete, opt_action, opt_location, opt_propertylist, opt_serviceRanking, opt_tagpattern, opt_extraHttpRequestParams) {
  /** @const {string} */
  var path = this.basePath_ + '/system/console/configMgr/com.day.cq.wcm.designimporter.parser.taghandlers.factory.CanvasComponentTagHandlerFactory';

  /** @type {!Object} */
  var queryParameters = {};

  /** @type {!Object} */
  var headerParams = angular.extend({}, this.defaultHeaders_);
  if (opt_post !== undefined) {
    queryParameters['post'] = opt_post;
  }

  if (opt_apply !== undefined) {
    queryParameters['apply'] = opt_apply;
  }

  if (opt_delete !== undefined) {
    queryParameters['delete'] = opt_delete;
  }

  if (opt_action !== undefined) {
    queryParameters['action'] = opt_action;
  }

  if (opt_location !== undefined) {
    queryParameters['$location'] = opt_location;
  }

  if (opt_propertylist !== undefined) {
    queryParameters['propertylist'] = opt_propertylist;
  }

  if (opt_serviceRanking !== undefined) {
    queryParameters['service.ranking'] = opt_serviceRanking;
  }

  if (opt_tagpattern !== undefined) {
    queryParameters['tagpattern'] = opt_tagpattern;
  }

  /** @type {!Object} */
  var httpRequestParams = {
    method: 'POST',
    url: path,
    json: true,
            params: queryParameters,
    headers: headerParams
  };

  if (opt_extraHttpRequestParams) {
    httpRequestParams = angular.extend(httpRequestParams, opt_extraHttpRequestParams);
  }

  return (/** @type {?} */ (this.http_))(httpRequestParams);
}

/**
 * 
 * 
 * @param {!boolean=} opt_post 
 * @param {!boolean=} opt_apply 
 * @param {!boolean=} opt_delete 
 * @param {!string=} opt_action 
 * @param {!string=} opt_location 
 * @param {!Array<!string>=} opt_propertylist 
 * @param {!number=} opt_serviceRanking 
 * @param {!string=} opt_tagpattern 
 * @param {!angular.$http.Config=} opt_extraHttpRequestParams Extra HTTP parameters to send.
 * @return {!angular.$q.Promise<!API.Client.comDayCqWcmDesignimporterParserTaghandlersFactoryDefaultComponInfo>}
 */
API.Client.ConfigmgrApi.prototype.comDayCqWcmDesignimporterParserTaghandlersFactoryDefaultCompon = function(opt_post, opt_apply, opt_delete, opt_action, opt_location, opt_propertylist, opt_serviceRanking, opt_tagpattern, opt_extraHttpRequestParams) {
  /** @const {string} */
  var path = this.basePath_ + '/system/console/configMgr/com.day.cq.wcm.designimporter.parser.taghandlers.factory.DefaultComponentTagHandlerFactory';

  /** @type {!Object} */
  var queryParameters = {};

  /** @type {!Object} */
  var headerParams = angular.extend({}, this.defaultHeaders_);
  if (opt_post !== undefined) {
    queryParameters['post'] = opt_post;
  }

  if (opt_apply !== undefined) {
    queryParameters['apply'] = opt_apply;
  }

  if (opt_delete !== undefined) {
    queryParameters['delete'] = opt_delete;
  }

  if (opt_action !== undefined) {
    queryParameters['action'] = opt_action;
  }

  if (opt_location !== undefined) {
    queryParameters['$location'] = opt_location;
  }

  if (opt_propertylist !== undefined) {
    queryParameters['propertylist'] = opt_propertylist;
  }

  if (opt_serviceRanking !== undefined) {
    queryParameters['service.ranking'] = opt_serviceRanking;
  }

  if (opt_tagpattern !== undefined) {
    queryParameters['tagpattern'] = opt_tagpattern;
  }

  /** @type {!Object} */
  var httpRequestParams = {
    method: 'POST',
    url: path,
    json: true,
            params: queryParameters,
    headers: headerParams
  };

  if (opt_extraHttpRequestParams) {
    httpRequestParams = angular.extend(httpRequestParams, opt_extraHttpRequestParams);
  }

  return (/** @type {?} */ (this.http_))(httpRequestParams);
}

/**
 * 
 * 
 * @param {!boolean=} opt_post 
 * @param {!boolean=} opt_apply 
 * @param {!boolean=} opt_delete 
 * @param {!string=} opt_action 
 * @param {!string=} opt_location 
 * @param {!Array<!string>=} opt_propertylist 
 * @param {!number=} opt_serviceRanking 
 * @param {!string=} opt_tagpattern 
 * @param {!angular.$http.Config=} opt_extraHttpRequestParams Extra HTTP parameters to send.
 * @return {!angular.$q.Promise<!API.Client.comDayCqWcmDesignimporterParserTaghandlersFactoryDefaultTagHanInfo>}
 */
API.Client.ConfigmgrApi.prototype.comDayCqWcmDesignimporterParserTaghandlersFactoryDefaultTagHan = function(opt_post, opt_apply, opt_delete, opt_action, opt_location, opt_propertylist, opt_serviceRanking, opt_tagpattern, opt_extraHttpRequestParams) {
  /** @const {string} */
  var path = this.basePath_ + '/system/console/configMgr/com.day.cq.wcm.designimporter.parser.taghandlers.factory.DefaultTagHandlerFactory';

  /** @type {!Object} */
  var queryParameters = {};

  /** @type {!Object} */
  var headerParams = angular.extend({}, this.defaultHeaders_);
  if (opt_post !== undefined) {
    queryParameters['post'] = opt_post;
  }

  if (opt_apply !== undefined) {
    queryParameters['apply'] = opt_apply;
  }

  if (opt_delete !== undefined) {
    queryParameters['delete'] = opt_delete;
  }

  if (opt_action !== undefined) {
    queryParameters['action'] = opt_action;
  }

  if (opt_location !== undefined) {
    queryParameters['$location'] = opt_location;
  }

  if (opt_propertylist !== undefined) {
    queryParameters['propertylist'] = opt_propertylist;
  }

  if (opt_serviceRanking !== undefined) {
    queryParameters['service.ranking'] = opt_serviceRanking;
  }

  if (opt_tagpattern !== undefined) {
    queryParameters['tagpattern'] = opt_tagpattern;
  }

  /** @type {!Object} */
  var httpRequestParams = {
    method: 'POST',
    url: path,
    json: true,
            params: queryParameters,
    headers: headerParams
  };

  if (opt_extraHttpRequestParams) {
    httpRequestParams = angular.extend(httpRequestParams, opt_extraHttpRequestParams);
  }

  return (/** @type {?} */ (this.http_))(httpRequestParams);
}

/**
 * 
 * 
 * @param {!boolean=} opt_post 
 * @param {!boolean=} opt_apply 
 * @param {!boolean=} opt_delete 
 * @param {!string=} opt_action 
 * @param {!string=} opt_location 
 * @param {!Array<!string>=} opt_propertylist 
 * @param {!number=} opt_serviceRanking 
 * @param {!string=} opt_tagpattern 
 * @param {!angular.$http.Config=} opt_extraHttpRequestParams Extra HTTP parameters to send.
 * @return {!angular.$q.Promise<!API.Client.comDayCqWcmDesignimporterParserTaghandlersFactoryHeadTagHandleInfo>}
 */
API.Client.ConfigmgrApi.prototype.comDayCqWcmDesignimporterParserTaghandlersFactoryHeadTagHandle = function(opt_post, opt_apply, opt_delete, opt_action, opt_location, opt_propertylist, opt_serviceRanking, opt_tagpattern, opt_extraHttpRequestParams) {
  /** @const {string} */
  var path = this.basePath_ + '/system/console/configMgr/com.day.cq.wcm.designimporter.parser.taghandlers.factory.HeadTagHandlerFactory';

  /** @type {!Object} */
  var queryParameters = {};

  /** @type {!Object} */
  var headerParams = angular.extend({}, this.defaultHeaders_);
  if (opt_post !== undefined) {
    queryParameters['post'] = opt_post;
  }

  if (opt_apply !== undefined) {
    queryParameters['apply'] = opt_apply;
  }

  if (opt_delete !== undefined) {
    queryParameters['delete'] = opt_delete;
  }

  if (opt_action !== undefined) {
    queryParameters['action'] = opt_action;
  }

  if (opt_location !== undefined) {
    queryParameters['$location'] = opt_location;
  }

  if (opt_propertylist !== undefined) {
    queryParameters['propertylist'] = opt_propertylist;
  }

  if (opt_serviceRanking !== undefined) {
    queryParameters['service.ranking'] = opt_serviceRanking;
  }

  if (opt_tagpattern !== undefined) {
    queryParameters['tagpattern'] = opt_tagpattern;
  }

  /** @type {!Object} */
  var httpRequestParams = {
    method: 'POST',
    url: path,
    json: true,
            params: queryParameters,
    headers: headerParams
  };

  if (opt_extraHttpRequestParams) {
    httpRequestParams = angular.extend(httpRequestParams, opt_extraHttpRequestParams);
  }

  return (/** @type {?} */ (this.http_))(httpRequestParams);
}

/**
 * 
 * 
 * @param {!boolean=} opt_post 
 * @param {!boolean=} opt_apply 
 * @param {!boolean=} opt_delete 
 * @param {!string=} opt_action 
 * @param {!string=} opt_location 
 * @param {!Array<!string>=} opt_propertylist 
 * @param {!number=} opt_serviceRanking 
 * @param {!string=} opt_tagpattern 
 * @param {!angular.$http.Config=} opt_extraHttpRequestParams Extra HTTP parameters to send.
 * @return {!angular.$q.Promise<!API.Client.comDayCqWcmDesignimporterParserTaghandlersFactoryIFrameTagHandInfo>}
 */
API.Client.ConfigmgrApi.prototype.comDayCqWcmDesignimporterParserTaghandlersFactoryIFrameTagHand = function(opt_post, opt_apply, opt_delete, opt_action, opt_location, opt_propertylist, opt_serviceRanking, opt_tagpattern, opt_extraHttpRequestParams) {
  /** @const {string} */
  var path = this.basePath_ + '/system/console/configMgr/com.day.cq.wcm.designimporter.parser.taghandlers.factory.IFrameTagHandlerFactory';

  /** @type {!Object} */
  var queryParameters = {};

  /** @type {!Object} */
  var headerParams = angular.extend({}, this.defaultHeaders_);
  if (opt_post !== undefined) {
    queryParameters['post'] = opt_post;
  }

  if (opt_apply !== undefined) {
    queryParameters['apply'] = opt_apply;
  }

  if (opt_delete !== undefined) {
    queryParameters['delete'] = opt_delete;
  }

  if (opt_action !== undefined) {
    queryParameters['action'] = opt_action;
  }

  if (opt_location !== undefined) {
    queryParameters['$location'] = opt_location;
  }

  if (opt_propertylist !== undefined) {
    queryParameters['propertylist'] = opt_propertylist;
  }

  if (opt_serviceRanking !== undefined) {
    queryParameters['service.ranking'] = opt_serviceRanking;
  }

  if (opt_tagpattern !== undefined) {
    queryParameters['tagpattern'] = opt_tagpattern;
  }

  /** @type {!Object} */
  var httpRequestParams = {
    method: 'POST',
    url: path,
    json: true,
            params: queryParameters,
    headers: headerParams
  };

  if (opt_extraHttpRequestParams) {
    httpRequestParams = angular.extend(httpRequestParams, opt_extraHttpRequestParams);
  }

  return (/** @type {?} */ (this.http_))(httpRequestParams);
}

/**
 * 
 * 
 * @param {!boolean=} opt_post 
 * @param {!boolean=} opt_apply 
 * @param {!boolean=} opt_delete 
 * @param {!string=} opt_action 
 * @param {!string=} opt_location 
 * @param {!Array<!string>=} opt_propertylist 
 * @param {!number=} opt_serviceRanking 
 * @param {!string=} opt_tagpattern 
 * @param {!string=} opt_componentResourceType 
 * @param {!angular.$http.Config=} opt_extraHttpRequestParams Extra HTTP parameters to send.
 * @return {!angular.$q.Promise<!API.Client.comDayCqWcmDesignimporterParserTaghandlersFactoryImageComponenInfo>}
 */
API.Client.ConfigmgrApi.prototype.comDayCqWcmDesignimporterParserTaghandlersFactoryImageComponen = function(opt_post, opt_apply, opt_delete, opt_action, opt_location, opt_propertylist, opt_serviceRanking, opt_tagpattern, opt_componentResourceType, opt_extraHttpRequestParams) {
  /** @const {string} */
  var path = this.basePath_ + '/system/console/configMgr/com.day.cq.wcm.designimporter.parser.taghandlers.factory.ImageComponentTagHandlerFactory';

  /** @type {!Object} */
  var queryParameters = {};

  /** @type {!Object} */
  var headerParams = angular.extend({}, this.defaultHeaders_);
  if (opt_post !== undefined) {
    queryParameters['post'] = opt_post;
  }

  if (opt_apply !== undefined) {
    queryParameters['apply'] = opt_apply;
  }

  if (opt_delete !== undefined) {
    queryParameters['delete'] = opt_delete;
  }

  if (opt_action !== undefined) {
    queryParameters['action'] = opt_action;
  }

  if (opt_location !== undefined) {
    queryParameters['$location'] = opt_location;
  }

  if (opt_propertylist !== undefined) {
    queryParameters['propertylist'] = opt_propertylist;
  }

  if (opt_serviceRanking !== undefined) {
    queryParameters['service.ranking'] = opt_serviceRanking;
  }

  if (opt_tagpattern !== undefined) {
    queryParameters['tagpattern'] = opt_tagpattern;
  }

  if (opt_componentResourceType !== undefined) {
    queryParameters['component.resourceType'] = opt_componentResourceType;
  }

  /** @type {!Object} */
  var httpRequestParams = {
    method: 'POST',
    url: path,
    json: true,
            params: queryParameters,
    headers: headerParams
  };

  if (opt_extraHttpRequestParams) {
    httpRequestParams = angular.extend(httpRequestParams, opt_extraHttpRequestParams);
  }

  return (/** @type {?} */ (this.http_))(httpRequestParams);
}

/**
 * 
 * 
 * @param {!boolean=} opt_post 
 * @param {!boolean=} opt_apply 
 * @param {!boolean=} opt_delete 
 * @param {!string=} opt_action 
 * @param {!string=} opt_location 
 * @param {!Array<!string>=} opt_propertylist 
 * @param {!number=} opt_serviceRanking 
 * @param {!string=} opt_tagpattern 
 * @param {!angular.$http.Config=} opt_extraHttpRequestParams Extra HTTP parameters to send.
 * @return {!angular.$q.Promise<!API.Client.comDayCqWcmDesignimporterParserTaghandlersFactoryImgTagHandlerInfo>}
 */
API.Client.ConfigmgrApi.prototype.comDayCqWcmDesignimporterParserTaghandlersFactoryImgTagHandler = function(opt_post, opt_apply, opt_delete, opt_action, opt_location, opt_propertylist, opt_serviceRanking, opt_tagpattern, opt_extraHttpRequestParams) {
  /** @const {string} */
  var path = this.basePath_ + '/system/console/configMgr/com.day.cq.wcm.designimporter.parser.taghandlers.factory.ImgTagHandlerFactory';

  /** @type {!Object} */
  var queryParameters = {};

  /** @type {!Object} */
  var headerParams = angular.extend({}, this.defaultHeaders_);
  if (opt_post !== undefined) {
    queryParameters['post'] = opt_post;
  }

  if (opt_apply !== undefined) {
    queryParameters['apply'] = opt_apply;
  }

  if (opt_delete !== undefined) {
    queryParameters['delete'] = opt_delete;
  }

  if (opt_action !== undefined) {
    queryParameters['action'] = opt_action;
  }

  if (opt_location !== undefined) {
    queryParameters['$location'] = opt_location;
  }

  if (opt_propertylist !== undefined) {
    queryParameters['propertylist'] = opt_propertylist;
  }

  if (opt_serviceRanking !== undefined) {
    queryParameters['service.ranking'] = opt_serviceRanking;
  }

  if (opt_tagpattern !== undefined) {
    queryParameters['tagpattern'] = opt_tagpattern;
  }

  /** @type {!Object} */
  var httpRequestParams = {
    method: 'POST',
    url: path,
    json: true,
            params: queryParameters,
    headers: headerParams
  };

  if (opt_extraHttpRequestParams) {
    httpRequestParams = angular.extend(httpRequestParams, opt_extraHttpRequestParams);
  }

  return (/** @type {?} */ (this.http_))(httpRequestParams);
}

/**
 * 
 * 
 * @param {!boolean=} opt_post 
 * @param {!boolean=} opt_apply 
 * @param {!boolean=} opt_delete 
 * @param {!string=} opt_action 
 * @param {!string=} opt_location 
 * @param {!Array<!string>=} opt_propertylist 
 * @param {!number=} opt_serviceRanking 
 * @param {!string=} opt_tagpattern 
 * @param {!angular.$http.Config=} opt_extraHttpRequestParams Extra HTTP parameters to send.
 * @return {!angular.$q.Promise<!API.Client.comDayCqWcmDesignimporterParserTaghandlersFactoryInlineScriptTInfo>}
 */
API.Client.ConfigmgrApi.prototype.comDayCqWcmDesignimporterParserTaghandlersFactoryInlineScriptT = function(opt_post, opt_apply, opt_delete, opt_action, opt_location, opt_propertylist, opt_serviceRanking, opt_tagpattern, opt_extraHttpRequestParams) {
  /** @const {string} */
  var path = this.basePath_ + '/system/console/configMgr/com.day.cq.wcm.designimporter.parser.taghandlers.factory.InlineScriptTagHandlerFactory';

  /** @type {!Object} */
  var queryParameters = {};

  /** @type {!Object} */
  var headerParams = angular.extend({}, this.defaultHeaders_);
  if (opt_post !== undefined) {
    queryParameters['post'] = opt_post;
  }

  if (opt_apply !== undefined) {
    queryParameters['apply'] = opt_apply;
  }

  if (opt_delete !== undefined) {
    queryParameters['delete'] = opt_delete;
  }

  if (opt_action !== undefined) {
    queryParameters['action'] = opt_action;
  }

  if (opt_location !== undefined) {
    queryParameters['$location'] = opt_location;
  }

  if (opt_propertylist !== undefined) {
    queryParameters['propertylist'] = opt_propertylist;
  }

  if (opt_serviceRanking !== undefined) {
    queryParameters['service.ranking'] = opt_serviceRanking;
  }

  if (opt_tagpattern !== undefined) {
    queryParameters['tagpattern'] = opt_tagpattern;
  }

  /** @type {!Object} */
  var httpRequestParams = {
    method: 'POST',
    url: path,
    json: true,
            params: queryParameters,
    headers: headerParams
  };

  if (opt_extraHttpRequestParams) {
    httpRequestParams = angular.extend(httpRequestParams, opt_extraHttpRequestParams);
  }

  return (/** @type {?} */ (this.http_))(httpRequestParams);
}

/**
 * 
 * 
 * @param {!boolean=} opt_post 
 * @param {!boolean=} opt_apply 
 * @param {!boolean=} opt_delete 
 * @param {!string=} opt_action 
 * @param {!string=} opt_location 
 * @param {!Array<!string>=} opt_propertylist 
 * @param {!number=} opt_serviceRanking 
 * @param {!string=} opt_tagpattern 
 * @param {!angular.$http.Config=} opt_extraHttpRequestParams Extra HTTP parameters to send.
 * @return {!angular.$q.Promise<!API.Client.comDayCqWcmDesignimporterParserTaghandlersFactoryLinkTagHandleInfo>}
 */
API.Client.ConfigmgrApi.prototype.comDayCqWcmDesignimporterParserTaghandlersFactoryLinkTagHandle = function(opt_post, opt_apply, opt_delete, opt_action, opt_location, opt_propertylist, opt_serviceRanking, opt_tagpattern, opt_extraHttpRequestParams) {
  /** @const {string} */
  var path = this.basePath_ + '/system/console/configMgr/com.day.cq.wcm.designimporter.parser.taghandlers.factory.LinkTagHandlerFactory';

  /** @type {!Object} */
  var queryParameters = {};

  /** @type {!Object} */
  var headerParams = angular.extend({}, this.defaultHeaders_);
  if (opt_post !== undefined) {
    queryParameters['post'] = opt_post;
  }

  if (opt_apply !== undefined) {
    queryParameters['apply'] = opt_apply;
  }

  if (opt_delete !== undefined) {
    queryParameters['delete'] = opt_delete;
  }

  if (opt_action !== undefined) {
    queryParameters['action'] = opt_action;
  }

  if (opt_location !== undefined) {
    queryParameters['$location'] = opt_location;
  }

  if (opt_propertylist !== undefined) {
    queryParameters['propertylist'] = opt_propertylist;
  }

  if (opt_serviceRanking !== undefined) {
    queryParameters['service.ranking'] = opt_serviceRanking;
  }

  if (opt_tagpattern !== undefined) {
    queryParameters['tagpattern'] = opt_tagpattern;
  }

  /** @type {!Object} */
  var httpRequestParams = {
    method: 'POST',
    url: path,
    json: true,
            params: queryParameters,
    headers: headerParams
  };

  if (opt_extraHttpRequestParams) {
    httpRequestParams = angular.extend(httpRequestParams, opt_extraHttpRequestParams);
  }

  return (/** @type {?} */ (this.http_))(httpRequestParams);
}

/**
 * 
 * 
 * @param {!boolean=} opt_post 
 * @param {!boolean=} opt_apply 
 * @param {!boolean=} opt_delete 
 * @param {!string=} opt_action 
 * @param {!string=} opt_location 
 * @param {!Array<!string>=} opt_propertylist 
 * @param {!number=} opt_serviceRanking 
 * @param {!string=} opt_tagpattern 
 * @param {!angular.$http.Config=} opt_extraHttpRequestParams Extra HTTP parameters to send.
 * @return {!angular.$q.Promise<!API.Client.comDayCqWcmDesignimporterParserTaghandlersFactoryMetaTagHandleInfo>}
 */
API.Client.ConfigmgrApi.prototype.comDayCqWcmDesignimporterParserTaghandlersFactoryMetaTagHandle = function(opt_post, opt_apply, opt_delete, opt_action, opt_location, opt_propertylist, opt_serviceRanking, opt_tagpattern, opt_extraHttpRequestParams) {
  /** @const {string} */
  var path = this.basePath_ + '/system/console/configMgr/com.day.cq.wcm.designimporter.parser.taghandlers.factory.MetaTagHandlerFactory';

  /** @type {!Object} */
  var queryParameters = {};

  /** @type {!Object} */
  var headerParams = angular.extend({}, this.defaultHeaders_);
  if (opt_post !== undefined) {
    queryParameters['post'] = opt_post;
  }

  if (opt_apply !== undefined) {
    queryParameters['apply'] = opt_apply;
  }

  if (opt_delete !== undefined) {
    queryParameters['delete'] = opt_delete;
  }

  if (opt_action !== undefined) {
    queryParameters['action'] = opt_action;
  }

  if (opt_location !== undefined) {
    queryParameters['$location'] = opt_location;
  }

  if (opt_propertylist !== undefined) {
    queryParameters['propertylist'] = opt_propertylist;
  }

  if (opt_serviceRanking !== undefined) {
    queryParameters['service.ranking'] = opt_serviceRanking;
  }

  if (opt_tagpattern !== undefined) {
    queryParameters['tagpattern'] = opt_tagpattern;
  }

  /** @type {!Object} */
  var httpRequestParams = {
    method: 'POST',
    url: path,
    json: true,
            params: queryParameters,
    headers: headerParams
  };

  if (opt_extraHttpRequestParams) {
    httpRequestParams = angular.extend(httpRequestParams, opt_extraHttpRequestParams);
  }

  return (/** @type {?} */ (this.http_))(httpRequestParams);
}

/**
 * 
 * 
 * @param {!boolean=} opt_post 
 * @param {!boolean=} opt_apply 
 * @param {!boolean=} opt_delete 
 * @param {!string=} opt_action 
 * @param {!string=} opt_location 
 * @param {!Array<!string>=} opt_propertylist 
 * @param {!number=} opt_serviceRanking 
 * @param {!string=} opt_tagpattern 
 * @param {!angular.$http.Config=} opt_extraHttpRequestParams Extra HTTP parameters to send.
 * @return {!angular.$q.Promise<!API.Client.comDayCqWcmDesignimporterParserTaghandlersFactoryNonScriptTagHInfo>}
 */
API.Client.ConfigmgrApi.prototype.comDayCqWcmDesignimporterParserTaghandlersFactoryNonScriptTagH = function(opt_post, opt_apply, opt_delete, opt_action, opt_location, opt_propertylist, opt_serviceRanking, opt_tagpattern, opt_extraHttpRequestParams) {
  /** @const {string} */
  var path = this.basePath_ + '/system/console/configMgr/com.day.cq.wcm.designimporter.parser.taghandlers.factory.NonScriptTagHandlerFactory';

  /** @type {!Object} */
  var queryParameters = {};

  /** @type {!Object} */
  var headerParams = angular.extend({}, this.defaultHeaders_);
  if (opt_post !== undefined) {
    queryParameters['post'] = opt_post;
  }

  if (opt_apply !== undefined) {
    queryParameters['apply'] = opt_apply;
  }

  if (opt_delete !== undefined) {
    queryParameters['delete'] = opt_delete;
  }

  if (opt_action !== undefined) {
    queryParameters['action'] = opt_action;
  }

  if (opt_location !== undefined) {
    queryParameters['$location'] = opt_location;
  }

  if (opt_propertylist !== undefined) {
    queryParameters['propertylist'] = opt_propertylist;
  }

  if (opt_serviceRanking !== undefined) {
    queryParameters['service.ranking'] = opt_serviceRanking;
  }

  if (opt_tagpattern !== undefined) {
    queryParameters['tagpattern'] = opt_tagpattern;
  }

  /** @type {!Object} */
  var httpRequestParams = {
    method: 'POST',
    url: path,
    json: true,
            params: queryParameters,
    headers: headerParams
  };

  if (opt_extraHttpRequestParams) {
    httpRequestParams = angular.extend(httpRequestParams, opt_extraHttpRequestParams);
  }

  return (/** @type {?} */ (this.http_))(httpRequestParams);
}

/**
 * 
 * 
 * @param {!boolean=} opt_post 
 * @param {!boolean=} opt_apply 
 * @param {!boolean=} opt_delete 
 * @param {!string=} opt_action 
 * @param {!string=} opt_location 
 * @param {!Array<!string>=} opt_propertylist 
 * @param {!number=} opt_serviceRanking 
 * @param {!string=} opt_tagpattern 
 * @param {!string=} opt_componentResourceType 
 * @param {!angular.$http.Config=} opt_extraHttpRequestParams Extra HTTP parameters to send.
 * @return {!angular.$q.Promise<!API.Client.comDayCqWcmDesignimporterParserTaghandlersFactoryParsysComponeInfo>}
 */
API.Client.ConfigmgrApi.prototype.comDayCqWcmDesignimporterParserTaghandlersFactoryParsysCompone = function(opt_post, opt_apply, opt_delete, opt_action, opt_location, opt_propertylist, opt_serviceRanking, opt_tagpattern, opt_componentResourceType, opt_extraHttpRequestParams) {
  /** @const {string} */
  var path = this.basePath_ + '/system/console/configMgr/com.day.cq.wcm.designimporter.parser.taghandlers.factory.ParsysComponentTagHandlerFactory';

  /** @type {!Object} */
  var queryParameters = {};

  /** @type {!Object} */
  var headerParams = angular.extend({}, this.defaultHeaders_);
  if (opt_post !== undefined) {
    queryParameters['post'] = opt_post;
  }

  if (opt_apply !== undefined) {
    queryParameters['apply'] = opt_apply;
  }

  if (opt_delete !== undefined) {
    queryParameters['delete'] = opt_delete;
  }

  if (opt_action !== undefined) {
    queryParameters['action'] = opt_action;
  }

  if (opt_location !== undefined) {
    queryParameters['$location'] = opt_location;
  }

  if (opt_propertylist !== undefined) {
    queryParameters['propertylist'] = opt_propertylist;
  }

  if (opt_serviceRanking !== undefined) {
    queryParameters['service.ranking'] = opt_serviceRanking;
  }

  if (opt_tagpattern !== undefined) {
    queryParameters['tagpattern'] = opt_tagpattern;
  }

  if (opt_componentResourceType !== undefined) {
    queryParameters['component.resourceType'] = opt_componentResourceType;
  }

  /** @type {!Object} */
  var httpRequestParams = {
    method: 'POST',
    url: path,
    json: true,
            params: queryParameters,
    headers: headerParams
  };

  if (opt_extraHttpRequestParams) {
    httpRequestParams = angular.extend(httpRequestParams, opt_extraHttpRequestParams);
  }

  return (/** @type {?} */ (this.http_))(httpRequestParams);
}

/**
 * 
 * 
 * @param {!boolean=} opt_post 
 * @param {!boolean=} opt_apply 
 * @param {!boolean=} opt_delete 
 * @param {!string=} opt_action 
 * @param {!string=} opt_location 
 * @param {!Array<!string>=} opt_propertylist 
 * @param {!number=} opt_serviceRanking 
 * @param {!string=} opt_tagpattern 
 * @param {!angular.$http.Config=} opt_extraHttpRequestParams Extra HTTP parameters to send.
 * @return {!angular.$q.Promise<!API.Client.comDayCqWcmDesignimporterParserTaghandlersFactoryScriptTagHandInfo>}
 */
API.Client.ConfigmgrApi.prototype.comDayCqWcmDesignimporterParserTaghandlersFactoryScriptTagHand = function(opt_post, opt_apply, opt_delete, opt_action, opt_location, opt_propertylist, opt_serviceRanking, opt_tagpattern, opt_extraHttpRequestParams) {
  /** @const {string} */
  var path = this.basePath_ + '/system/console/configMgr/com.day.cq.wcm.designimporter.parser.taghandlers.factory.ScriptTagHandlerFactory';

  /** @type {!Object} */
  var queryParameters = {};

  /** @type {!Object} */
  var headerParams = angular.extend({}, this.defaultHeaders_);
  if (opt_post !== undefined) {
    queryParameters['post'] = opt_post;
  }

  if (opt_apply !== undefined) {
    queryParameters['apply'] = opt_apply;
  }

  if (opt_delete !== undefined) {
    queryParameters['delete'] = opt_delete;
  }

  if (opt_action !== undefined) {
    queryParameters['action'] = opt_action;
  }

  if (opt_location !== undefined) {
    queryParameters['$location'] = opt_location;
  }

  if (opt_propertylist !== undefined) {
    queryParameters['propertylist'] = opt_propertylist;
  }

  if (opt_serviceRanking !== undefined) {
    queryParameters['service.ranking'] = opt_serviceRanking;
  }

  if (opt_tagpattern !== undefined) {
    queryParameters['tagpattern'] = opt_tagpattern;
  }

  /** @type {!Object} */
  var httpRequestParams = {
    method: 'POST',
    url: path,
    json: true,
            params: queryParameters,
    headers: headerParams
  };

  if (opt_extraHttpRequestParams) {
    httpRequestParams = angular.extend(httpRequestParams, opt_extraHttpRequestParams);
  }

  return (/** @type {?} */ (this.http_))(httpRequestParams);
}

/**
 * 
 * 
 * @param {!boolean=} opt_post 
 * @param {!boolean=} opt_apply 
 * @param {!boolean=} opt_delete 
 * @param {!string=} opt_action 
 * @param {!string=} opt_location 
 * @param {!Array<!string>=} opt_propertylist 
 * @param {!number=} opt_serviceRanking 
 * @param {!string=} opt_tagpattern 
 * @param {!angular.$http.Config=} opt_extraHttpRequestParams Extra HTTP parameters to send.
 * @return {!angular.$q.Promise<!API.Client.comDayCqWcmDesignimporterParserTaghandlersFactoryStyleTagHandlInfo>}
 */
API.Client.ConfigmgrApi.prototype.comDayCqWcmDesignimporterParserTaghandlersFactoryStyleTagHandl = function(opt_post, opt_apply, opt_delete, opt_action, opt_location, opt_propertylist, opt_serviceRanking, opt_tagpattern, opt_extraHttpRequestParams) {
  /** @const {string} */
  var path = this.basePath_ + '/system/console/configMgr/com.day.cq.wcm.designimporter.parser.taghandlers.factory.StyleTagHandlerFactory';

  /** @type {!Object} */
  var queryParameters = {};

  /** @type {!Object} */
  var headerParams = angular.extend({}, this.defaultHeaders_);
  if (opt_post !== undefined) {
    queryParameters['post'] = opt_post;
  }

  if (opt_apply !== undefined) {
    queryParameters['apply'] = opt_apply;
  }

  if (opt_delete !== undefined) {
    queryParameters['delete'] = opt_delete;
  }

  if (opt_action !== undefined) {
    queryParameters['action'] = opt_action;
  }

  if (opt_location !== undefined) {
    queryParameters['$location'] = opt_location;
  }

  if (opt_propertylist !== undefined) {
    queryParameters['propertylist'] = opt_propertylist;
  }

  if (opt_serviceRanking !== undefined) {
    queryParameters['service.ranking'] = opt_serviceRanking;
  }

  if (opt_tagpattern !== undefined) {
    queryParameters['tagpattern'] = opt_tagpattern;
  }

  /** @type {!Object} */
  var httpRequestParams = {
    method: 'POST',
    url: path,
    json: true,
            params: queryParameters,
    headers: headerParams
  };

  if (opt_extraHttpRequestParams) {
    httpRequestParams = angular.extend(httpRequestParams, opt_extraHttpRequestParams);
  }

  return (/** @type {?} */ (this.http_))(httpRequestParams);
}

/**
 * 
 * 
 * @param {!boolean=} opt_post 
 * @param {!boolean=} opt_apply 
 * @param {!boolean=} opt_delete 
 * @param {!string=} opt_action 
 * @param {!string=} opt_location 
 * @param {!Array<!string>=} opt_propertylist 
 * @param {!number=} opt_serviceRanking 
 * @param {!string=} opt_tagpattern 
 * @param {!string=} opt_componentResourceType 
 * @param {!angular.$http.Config=} opt_extraHttpRequestParams Extra HTTP parameters to send.
 * @return {!angular.$q.Promise<!API.Client.comDayCqWcmDesignimporterParserTaghandlersFactoryTextComponentInfo>}
 */
API.Client.ConfigmgrApi.prototype.comDayCqWcmDesignimporterParserTaghandlersFactoryTextComponent = function(opt_post, opt_apply, opt_delete, opt_action, opt_location, opt_propertylist, opt_serviceRanking, opt_tagpattern, opt_componentResourceType, opt_extraHttpRequestParams) {
  /** @const {string} */
  var path = this.basePath_ + '/system/console/configMgr/com.day.cq.wcm.designimporter.parser.taghandlers.factory.TextComponentTagHandlerFactory';

  /** @type {!Object} */
  var queryParameters = {};

  /** @type {!Object} */
  var headerParams = angular.extend({}, this.defaultHeaders_);
  if (opt_post !== undefined) {
    queryParameters['post'] = opt_post;
  }

  if (opt_apply !== undefined) {
    queryParameters['apply'] = opt_apply;
  }

  if (opt_delete !== undefined) {
    queryParameters['delete'] = opt_delete;
  }

  if (opt_action !== undefined) {
    queryParameters['action'] = opt_action;
  }

  if (opt_location !== undefined) {
    queryParameters['$location'] = opt_location;
  }

  if (opt_propertylist !== undefined) {
    queryParameters['propertylist'] = opt_propertylist;
  }

  if (opt_serviceRanking !== undefined) {
    queryParameters['service.ranking'] = opt_serviceRanking;
  }

  if (opt_tagpattern !== undefined) {
    queryParameters['tagpattern'] = opt_tagpattern;
  }

  if (opt_componentResourceType !== undefined) {
    queryParameters['component.resourceType'] = opt_componentResourceType;
  }

  /** @type {!Object} */
  var httpRequestParams = {
    method: 'POST',
    url: path,
    json: true,
            params: queryParameters,
    headers: headerParams
  };

  if (opt_extraHttpRequestParams) {
    httpRequestParams = angular.extend(httpRequestParams, opt_extraHttpRequestParams);
  }

  return (/** @type {?} */ (this.http_))(httpRequestParams);
}

/**
 * 
 * 
 * @param {!boolean=} opt_post 
 * @param {!boolean=} opt_apply 
 * @param {!boolean=} opt_delete 
 * @param {!string=} opt_action 
 * @param {!string=} opt_location 
 * @param {!Array<!string>=} opt_propertylist 
 * @param {!number=} opt_serviceRanking 
 * @param {!string=} opt_tagpattern 
 * @param {!string=} opt_componentResourceType 
 * @param {!angular.$http.Config=} opt_extraHttpRequestParams Extra HTTP parameters to send.
 * @return {!angular.$q.Promise<!API.Client.comDayCqWcmDesignimporterParserTaghandlersFactoryTitleComponenInfo>}
 */
API.Client.ConfigmgrApi.prototype.comDayCqWcmDesignimporterParserTaghandlersFactoryTitleComponen = function(opt_post, opt_apply, opt_delete, opt_action, opt_location, opt_propertylist, opt_serviceRanking, opt_tagpattern, opt_componentResourceType, opt_extraHttpRequestParams) {
  /** @const {string} */
  var path = this.basePath_ + '/system/console/configMgr/com.day.cq.wcm.designimporter.parser.taghandlers.factory.TitleComponentTagHandlerFactory';

  /** @type {!Object} */
  var queryParameters = {};

  /** @type {!Object} */
  var headerParams = angular.extend({}, this.defaultHeaders_);
  if (opt_post !== undefined) {
    queryParameters['post'] = opt_post;
  }

  if (opt_apply !== undefined) {
    queryParameters['apply'] = opt_apply;
  }

  if (opt_delete !== undefined) {
    queryParameters['delete'] = opt_delete;
  }

  if (opt_action !== undefined) {
    queryParameters['action'] = opt_action;
  }

  if (opt_location !== undefined) {
    queryParameters['$location'] = opt_location;
  }

  if (opt_propertylist !== undefined) {
    queryParameters['propertylist'] = opt_propertylist;
  }

  if (opt_serviceRanking !== undefined) {
    queryParameters['service.ranking'] = opt_serviceRanking;
  }

  if (opt_tagpattern !== undefined) {
    queryParameters['tagpattern'] = opt_tagpattern;
  }

  if (opt_componentResourceType !== undefined) {
    queryParameters['component.resourceType'] = opt_componentResourceType;
  }

  /** @type {!Object} */
  var httpRequestParams = {
    method: 'POST',
    url: path,
    json: true,
            params: queryParameters,
    headers: headerParams
  };

  if (opt_extraHttpRequestParams) {
    httpRequestParams = angular.extend(httpRequestParams, opt_extraHttpRequestParams);
  }

  return (/** @type {?} */ (this.http_))(httpRequestParams);
}

/**
 * 
 * 
 * @param {!boolean=} opt_post 
 * @param {!boolean=} opt_apply 
 * @param {!boolean=} opt_delete 
 * @param {!string=} opt_action 
 * @param {!string=} opt_location 
 * @param {!Array<!string>=} opt_propertylist 
 * @param {!number=} opt_serviceRanking 
 * @param {!string=} opt_tagpattern 
 * @param {!angular.$http.Config=} opt_extraHttpRequestParams Extra HTTP parameters to send.
 * @return {!angular.$q.Promise<!API.Client.comDayCqWcmDesignimporterParserTaghandlersFactoryTitleTagHandlInfo>}
 */
API.Client.ConfigmgrApi.prototype.comDayCqWcmDesignimporterParserTaghandlersFactoryTitleTagHandl = function(opt_post, opt_apply, opt_delete, opt_action, opt_location, opt_propertylist, opt_serviceRanking, opt_tagpattern, opt_extraHttpRequestParams) {
  /** @const {string} */
  var path = this.basePath_ + '/system/console/configMgr/com.day.cq.wcm.designimporter.parser.taghandlers.factory.TitleTagHandlerFactory';

  /** @type {!Object} */
  var queryParameters = {};

  /** @type {!Object} */
  var headerParams = angular.extend({}, this.defaultHeaders_);
  if (opt_post !== undefined) {
    queryParameters['post'] = opt_post;
  }

  if (opt_apply !== undefined) {
    queryParameters['apply'] = opt_apply;
  }

  if (opt_delete !== undefined) {
    queryParameters['delete'] = opt_delete;
  }

  if (opt_action !== undefined) {
    queryParameters['action'] = opt_action;
  }

  if (opt_location !== undefined) {
    queryParameters['$location'] = opt_location;
  }

  if (opt_propertylist !== undefined) {
    queryParameters['propertylist'] = opt_propertylist;
  }

  if (opt_serviceRanking !== undefined) {
    queryParameters['service.ranking'] = opt_serviceRanking;
  }

  if (opt_tagpattern !== undefined) {
    queryParameters['tagpattern'] = opt_tagpattern;
  }

  /** @type {!Object} */
  var httpRequestParams = {
    method: 'POST',
    url: path,
    json: true,
            params: queryParameters,
    headers: headerParams
  };

  if (opt_extraHttpRequestParams) {
    httpRequestParams = angular.extend(httpRequestParams, opt_extraHttpRequestParams);
  }

  return (/** @type {?} */ (this.http_))(httpRequestParams);
}

/**
 * 
 * 
 * @param {!boolean=} opt_post 
 * @param {!boolean=} opt_apply 
 * @param {!boolean=} opt_delete 
 * @param {!string=} opt_action 
 * @param {!string=} opt_location 
 * @param {!Array<!string>=} opt_propertylist 
 * @param {!string=} opt_serviceName 
 * @param {!string=} opt_slingServletResourceTypes 
 * @param {!string=} opt_slingServletSelectors 
 * @param {!Array<!string>=} opt_slingServletMethods 
 * @param {!boolean=} opt_formsFormchooserservletAdvansesearchRequire 
 * @param {!angular.$http.Config=} opt_extraHttpRequestParams Extra HTTP parameters to send.
 * @return {!angular.$q.Promise<!API.Client.comDayCqWcmFoundationFormsImplFormChooserServletInfo>}
 */
API.Client.ConfigmgrApi.prototype.comDayCqWcmFoundationFormsImplFormChooserServlet = function(opt_post, opt_apply, opt_delete, opt_action, opt_location, opt_propertylist, opt_serviceName, opt_slingServletResourceTypes, opt_slingServletSelectors, opt_slingServletMethods, opt_formsFormchooserservletAdvansesearchRequire, opt_extraHttpRequestParams) {
  /** @const {string} */
  var path = this.basePath_ + '/system/console/configMgr/com.day.cq.wcm.foundation.forms.impl.FormChooserServlet';

  /** @type {!Object} */
  var queryParameters = {};

  /** @type {!Object} */
  var headerParams = angular.extend({}, this.defaultHeaders_);
  if (opt_post !== undefined) {
    queryParameters['post'] = opt_post;
  }

  if (opt_apply !== undefined) {
    queryParameters['apply'] = opt_apply;
  }

  if (opt_delete !== undefined) {
    queryParameters['delete'] = opt_delete;
  }

  if (opt_action !== undefined) {
    queryParameters['action'] = opt_action;
  }

  if (opt_location !== undefined) {
    queryParameters['$location'] = opt_location;
  }

  if (opt_propertylist !== undefined) {
    queryParameters['propertylist'] = opt_propertylist;
  }

  if (opt_serviceName !== undefined) {
    queryParameters['service.name'] = opt_serviceName;
  }

  if (opt_slingServletResourceTypes !== undefined) {
    queryParameters['sling.servlet.resourceTypes'] = opt_slingServletResourceTypes;
  }

  if (opt_slingServletSelectors !== undefined) {
    queryParameters['sling.servlet.selectors'] = opt_slingServletSelectors;
  }

  if (opt_slingServletMethods !== undefined) {
    queryParameters['sling.servlet.methods'] = opt_slingServletMethods;
  }

  if (opt_formsFormchooserservletAdvansesearchRequire !== undefined) {
    queryParameters['forms.formchooserservlet.advansesearch.require'] = opt_formsFormchooserservletAdvansesearchRequire;
  }

  /** @type {!Object} */
  var httpRequestParams = {
    method: 'POST',
    url: path,
    json: true,
            params: queryParameters,
    headers: headerParams
  };

  if (opt_extraHttpRequestParams) {
    httpRequestParams = angular.extend(httpRequestParams, opt_extraHttpRequestParams);
  }

  return (/** @type {?} */ (this.http_))(httpRequestParams);
}

/**
 * 
 * 
 * @param {!boolean=} opt_post 
 * @param {!boolean=} opt_apply 
 * @param {!boolean=} opt_delete 
 * @param {!string=} opt_action 
 * @param {!string=} opt_location 
 * @param {!Array<!string>=} opt_propertylist 
 * @param {!boolean=} opt_formsFormparagraphpostprocessorEnabled 
 * @param {!Array<!string>=} opt_formsFormparagraphpostprocessorFormresourcetypes 
 * @param {!angular.$http.Config=} opt_extraHttpRequestParams Extra HTTP parameters to send.
 * @return {!angular.$q.Promise<!API.Client.comDayCqWcmFoundationFormsImplFormParagraphPostProcessorInfo>}
 */
API.Client.ConfigmgrApi.prototype.comDayCqWcmFoundationFormsImplFormParagraphPostProcessor = function(opt_post, opt_apply, opt_delete, opt_action, opt_location, opt_propertylist, opt_formsFormparagraphpostprocessorEnabled, opt_formsFormparagraphpostprocessorFormresourcetypes, opt_extraHttpRequestParams) {
  /** @const {string} */
  var path = this.basePath_ + '/system/console/configMgr/com.day.cq.wcm.foundation.forms.impl.FormParagraphPostProcessor';

  /** @type {!Object} */
  var queryParameters = {};

  /** @type {!Object} */
  var headerParams = angular.extend({}, this.defaultHeaders_);
  if (opt_post !== undefined) {
    queryParameters['post'] = opt_post;
  }

  if (opt_apply !== undefined) {
    queryParameters['apply'] = opt_apply;
  }

  if (opt_delete !== undefined) {
    queryParameters['delete'] = opt_delete;
  }

  if (opt_action !== undefined) {
    queryParameters['action'] = opt_action;
  }

  if (opt_location !== undefined) {
    queryParameters['$location'] = opt_location;
  }

  if (opt_propertylist !== undefined) {
    queryParameters['propertylist'] = opt_propertylist;
  }

  if (opt_formsFormparagraphpostprocessorEnabled !== undefined) {
    queryParameters['forms.formparagraphpostprocessor.enabled'] = opt_formsFormparagraphpostprocessorEnabled;
  }

  if (opt_formsFormparagraphpostprocessorFormresourcetypes !== undefined) {
    queryParameters['forms.formparagraphpostprocessor.formresourcetypes'] = opt_formsFormparagraphpostprocessorFormresourcetypes;
  }

  /** @type {!Object} */
  var httpRequestParams = {
    method: 'POST',
    url: path,
    json: true,
            params: queryParameters,
    headers: headerParams
  };

  if (opt_extraHttpRequestParams) {
    httpRequestParams = angular.extend(httpRequestParams, opt_extraHttpRequestParams);
  }

  return (/** @type {?} */ (this.http_))(httpRequestParams);
}

/**
 * 
 * 
 * @param {!boolean=} opt_post 
 * @param {!boolean=} opt_apply 
 * @param {!boolean=} opt_delete 
 * @param {!string=} opt_action 
 * @param {!string=} opt_location 
 * @param {!Array<!string>=} opt_propertylist 
 * @param {!string=} opt_nameWhitelist 
 * @param {!boolean=} opt_allowExpressions 
 * @param {!angular.$http.Config=} opt_extraHttpRequestParams Extra HTTP parameters to send.
 * @return {!angular.$q.Promise<!API.Client.comDayCqWcmFoundationFormsImplFormsHandlingServletInfo>}
 */
API.Client.ConfigmgrApi.prototype.comDayCqWcmFoundationFormsImplFormsHandlingServlet = function(opt_post, opt_apply, opt_delete, opt_action, opt_location, opt_propertylist, opt_nameWhitelist, opt_allowExpressions, opt_extraHttpRequestParams) {
  /** @const {string} */
  var path = this.basePath_ + '/system/console/configMgr/com.day.cq.wcm.foundation.forms.impl.FormsHandlingServlet';

  /** @type {!Object} */
  var queryParameters = {};

  /** @type {!Object} */
  var headerParams = angular.extend({}, this.defaultHeaders_);
  if (opt_post !== undefined) {
    queryParameters['post'] = opt_post;
  }

  if (opt_apply !== undefined) {
    queryParameters['apply'] = opt_apply;
  }

  if (opt_delete !== undefined) {
    queryParameters['delete'] = opt_delete;
  }

  if (opt_action !== undefined) {
    queryParameters['action'] = opt_action;
  }

  if (opt_location !== undefined) {
    queryParameters['$location'] = opt_location;
  }

  if (opt_propertylist !== undefined) {
    queryParameters['propertylist'] = opt_propertylist;
  }

  if (opt_nameWhitelist !== undefined) {
    queryParameters['name.whitelist'] = opt_nameWhitelist;
  }

  if (opt_allowExpressions !== undefined) {
    queryParameters['allow.expressions'] = opt_allowExpressions;
  }

  /** @type {!Object} */
  var httpRequestParams = {
    method: 'POST',
    url: path,
    json: true,
            params: queryParameters,
    headers: headerParams
  };

  if (opt_extraHttpRequestParams) {
    httpRequestParams = angular.extend(httpRequestParams, opt_extraHttpRequestParams);
  }

  return (/** @type {?} */ (this.http_))(httpRequestParams);
}

/**
 * 
 * 
 * @param {!boolean=} opt_post 
 * @param {!boolean=} opt_apply 
 * @param {!boolean=} opt_delete 
 * @param {!string=} opt_action 
 * @param {!string=} opt_location 
 * @param {!Array<!string>=} opt_propertylist 
 * @param {!string=} opt_slingServletResourceTypes 
 * @param {!string=} opt_slingServletSelectors 
 * @param {!Array<!string>=} opt_resourceWhitelist 
 * @param {!string=} opt_resourceBlacklist 
 * @param {!angular.$http.Config=} opt_extraHttpRequestParams Extra HTTP parameters to send.
 * @return {!angular.$q.Promise<!API.Client.comDayCqWcmFoundationFormsImplMailServletInfo>}
 */
API.Client.ConfigmgrApi.prototype.comDayCqWcmFoundationFormsImplMailServlet = function(opt_post, opt_apply, opt_delete, opt_action, opt_location, opt_propertylist, opt_slingServletResourceTypes, opt_slingServletSelectors, opt_resourceWhitelist, opt_resourceBlacklist, opt_extraHttpRequestParams) {
  /** @const {string} */
  var path = this.basePath_ + '/system/console/configMgr/com.day.cq.wcm.foundation.forms.impl.MailServlet';

  /** @type {!Object} */
  var queryParameters = {};

  /** @type {!Object} */
  var headerParams = angular.extend({}, this.defaultHeaders_);
  if (opt_post !== undefined) {
    queryParameters['post'] = opt_post;
  }

  if (opt_apply !== undefined) {
    queryParameters['apply'] = opt_apply;
  }

  if (opt_delete !== undefined) {
    queryParameters['delete'] = opt_delete;
  }

  if (opt_action !== undefined) {
    queryParameters['action'] = opt_action;
  }

  if (opt_location !== undefined) {
    queryParameters['$location'] = opt_location;
  }

  if (opt_propertylist !== undefined) {
    queryParameters['propertylist'] = opt_propertylist;
  }

  if (opt_slingServletResourceTypes !== undefined) {
    queryParameters['sling.servlet.resourceTypes'] = opt_slingServletResourceTypes;
  }

  if (opt_slingServletSelectors !== undefined) {
    queryParameters['sling.servlet.selectors'] = opt_slingServletSelectors;
  }

  if (opt_resourceWhitelist !== undefined) {
    queryParameters['resource.whitelist'] = opt_resourceWhitelist;
  }

  if (opt_resourceBlacklist !== undefined) {
    queryParameters['resource.blacklist'] = opt_resourceBlacklist;
  }

  /** @type {!Object} */
  var httpRequestParams = {
    method: 'POST',
    url: path,
    json: true,
            params: queryParameters,
    headers: headerParams
  };

  if (opt_extraHttpRequestParams) {
    httpRequestParams = angular.extend(httpRequestParams, opt_extraHttpRequestParams);
  }

  return (/** @type {?} */ (this.http_))(httpRequestParams);
}

/**
 * 
 * 
 * @param {!boolean=} opt_post 
 * @param {!boolean=} opt_apply 
 * @param {!boolean=} opt_delete 
 * @param {!string=} opt_action 
 * @param {!string=} opt_location 
 * @param {!Array<!string>=} opt_propertylist 
 * @param {!Array<!string>=} opt_adaptSupportedWidths 
 * @param {!angular.$http.Config=} opt_extraHttpRequestParams Extra HTTP parameters to send.
 * @return {!angular.$q.Promise<!API.Client.comDayCqWcmFoundationImplAdaptiveImageComponentServletInfo>}
 */
API.Client.ConfigmgrApi.prototype.comDayCqWcmFoundationImplAdaptiveImageComponentServlet = function(opt_post, opt_apply, opt_delete, opt_action, opt_location, opt_propertylist, opt_adaptSupportedWidths, opt_extraHttpRequestParams) {
  /** @const {string} */
  var path = this.basePath_ + '/system/console/configMgr/com.day.cq.wcm.foundation.impl.AdaptiveImageComponentServlet';

  /** @type {!Object} */
  var queryParameters = {};

  /** @type {!Object} */
  var headerParams = angular.extend({}, this.defaultHeaders_);
  if (opt_post !== undefined) {
    queryParameters['post'] = opt_post;
  }

  if (opt_apply !== undefined) {
    queryParameters['apply'] = opt_apply;
  }

  if (opt_delete !== undefined) {
    queryParameters['delete'] = opt_delete;
  }

  if (opt_action !== undefined) {
    queryParameters['action'] = opt_action;
  }

  if (opt_location !== undefined) {
    queryParameters['$location'] = opt_location;
  }

  if (opt_propertylist !== undefined) {
    queryParameters['propertylist'] = opt_propertylist;
  }

  if (opt_adaptSupportedWidths !== undefined) {
    queryParameters['adapt.supported.widths'] = opt_adaptSupportedWidths;
  }

  /** @type {!Object} */
  var httpRequestParams = {
    method: 'POST',
    url: path,
    json: true,
            params: queryParameters,
    headers: headerParams
  };

  if (opt_extraHttpRequestParams) {
    httpRequestParams = angular.extend(httpRequestParams, opt_extraHttpRequestParams);
  }

  return (/** @type {?} */ (this.http_))(httpRequestParams);
}

/**
 * 
 * 
 * @param {!boolean=} opt_post 
 * @param {!boolean=} opt_apply 
 * @param {!boolean=} opt_delete 
 * @param {!string=} opt_action 
 * @param {!string=} opt_location 
 * @param {!Array<!string>=} opt_propertylist 
 * @param {!string=} opt_path 
 * @param {!boolean=} opt_authHttpNologin 
 * @param {!string=} opt_authHttpRealm 
 * @param {!string=} opt_authDefaultLoginpage 
 * @param {!Array<!string>=} opt_authCredForm 
 * @param {!Array<!string>=} opt_authCredUtf8 
 * @param {!angular.$http.Config=} opt_extraHttpRequestParams Extra HTTP parameters to send.
 * @return {!angular.$q.Promise<!API.Client.comDayCqWcmFoundationImplHTTPAuthHandlerInfo>}
 */
API.Client.ConfigmgrApi.prototype.comDayCqWcmFoundationImplHTTPAuthHandler = function(opt_post, opt_apply, opt_delete, opt_action, opt_location, opt_propertylist, opt_path, opt_authHttpNologin, opt_authHttpRealm, opt_authDefaultLoginpage, opt_authCredForm, opt_authCredUtf8, opt_extraHttpRequestParams) {
  /** @const {string} */
  var path = this.basePath_ + '/system/console/configMgr/com.day.cq.wcm.foundation.impl.HTTPAuthHandler';

  /** @type {!Object} */
  var queryParameters = {};

  /** @type {!Object} */
  var headerParams = angular.extend({}, this.defaultHeaders_);
  if (opt_post !== undefined) {
    queryParameters['post'] = opt_post;
  }

  if (opt_apply !== undefined) {
    queryParameters['apply'] = opt_apply;
  }

  if (opt_delete !== undefined) {
    queryParameters['delete'] = opt_delete;
  }

  if (opt_action !== undefined) {
    queryParameters['action'] = opt_action;
  }

  if (opt_location !== undefined) {
    queryParameters['$location'] = opt_location;
  }

  if (opt_propertylist !== undefined) {
    queryParameters['propertylist'] = opt_propertylist;
  }

  if (opt_path !== undefined) {
    queryParameters['path'] = opt_path;
  }

  if (opt_authHttpNologin !== undefined) {
    queryParameters['auth.http.nologin'] = opt_authHttpNologin;
  }

  if (opt_authHttpRealm !== undefined) {
    queryParameters['auth.http.realm'] = opt_authHttpRealm;
  }

  if (opt_authDefaultLoginpage !== undefined) {
    queryParameters['auth.default.loginpage'] = opt_authDefaultLoginpage;
  }

  if (opt_authCredForm !== undefined) {
    queryParameters['auth.cred.form'] = opt_authCredForm;
  }

  if (opt_authCredUtf8 !== undefined) {
    queryParameters['auth.cred.utf8'] = opt_authCredUtf8;
  }

  /** @type {!Object} */
  var httpRequestParams = {
    method: 'POST',
    url: path,
    json: true,
            params: queryParameters,
    headers: headerParams
  };

  if (opt_extraHttpRequestParams) {
    httpRequestParams = angular.extend(httpRequestParams, opt_extraHttpRequestParams);
  }

  return (/** @type {?} */ (this.http_))(httpRequestParams);
}

/**
 * 
 * 
 * @param {!boolean=} opt_post 
 * @param {!boolean=} opt_apply 
 * @param {!boolean=} opt_delete 
 * @param {!string=} opt_action 
 * @param {!string=} opt_location 
 * @param {!Array<!string>=} opt_propertylist 
 * @param {!string=} opt_slingAuthRequirements 
 * @param {!angular.$http.Config=} opt_extraHttpRequestParams Extra HTTP parameters to send.
 * @return {!angular.$q.Promise<!API.Client.comDayCqWcmFoundationImplPageImpressionsTrackerInfo>}
 */
API.Client.ConfigmgrApi.prototype.comDayCqWcmFoundationImplPageImpressionsTracker = function(opt_post, opt_apply, opt_delete, opt_action, opt_location, opt_propertylist, opt_slingAuthRequirements, opt_extraHttpRequestParams) {
  /** @const {string} */
  var path = this.basePath_ + '/system/console/configMgr/com.day.cq.wcm.foundation.impl.PageImpressionsTracker';

  /** @type {!Object} */
  var queryParameters = {};

  /** @type {!Object} */
  var headerParams = angular.extend({}, this.defaultHeaders_);
  if (opt_post !== undefined) {
    queryParameters['post'] = opt_post;
  }

  if (opt_apply !== undefined) {
    queryParameters['apply'] = opt_apply;
  }

  if (opt_delete !== undefined) {
    queryParameters['delete'] = opt_delete;
  }

  if (opt_action !== undefined) {
    queryParameters['action'] = opt_action;
  }

  if (opt_location !== undefined) {
    queryParameters['$location'] = opt_location;
  }

  if (opt_propertylist !== undefined) {
    queryParameters['propertylist'] = opt_propertylist;
  }

  if (opt_slingAuthRequirements !== undefined) {
    queryParameters['sling.auth.requirements'] = opt_slingAuthRequirements;
  }

  /** @type {!Object} */
  var httpRequestParams = {
    method: 'POST',
    url: path,
    json: true,
            params: queryParameters,
    headers: headerParams
  };

  if (opt_extraHttpRequestParams) {
    httpRequestParams = angular.extend(httpRequestParams, opt_extraHttpRequestParams);
  }

  return (/** @type {?} */ (this.http_))(httpRequestParams);
}

/**
 * 
 * 
 * @param {!boolean=} opt_post 
 * @param {!boolean=} opt_apply 
 * @param {!boolean=} opt_delete 
 * @param {!string=} opt_action 
 * @param {!string=} opt_location 
 * @param {!Array<!string>=} opt_propertylist 
 * @param {!Array<!string>=} opt_excludedResourceTypes 
 * @param {!angular.$http.Config=} opt_extraHttpRequestParams Extra HTTP parameters to send.
 * @return {!angular.$q.Promise<!API.Client.comDayCqWcmFoundationImplPageRedirectServletInfo>}
 */
API.Client.ConfigmgrApi.prototype.comDayCqWcmFoundationImplPageRedirectServlet = function(opt_post, opt_apply, opt_delete, opt_action, opt_location, opt_propertylist, opt_excludedResourceTypes, opt_extraHttpRequestParams) {
  /** @const {string} */
  var path = this.basePath_ + '/system/console/configMgr/com.day.cq.wcm.foundation.impl.PageRedirectServlet';

  /** @type {!Object} */
  var queryParameters = {};

  /** @type {!Object} */
  var headerParams = angular.extend({}, this.defaultHeaders_);
  if (opt_post !== undefined) {
    queryParameters['post'] = opt_post;
  }

  if (opt_apply !== undefined) {
    queryParameters['apply'] = opt_apply;
  }

  if (opt_delete !== undefined) {
    queryParameters['delete'] = opt_delete;
  }

  if (opt_action !== undefined) {
    queryParameters['action'] = opt_action;
  }

  if (opt_location !== undefined) {
    queryParameters['$location'] = opt_location;
  }

  if (opt_propertylist !== undefined) {
    queryParameters['propertylist'] = opt_propertylist;
  }

  if (opt_excludedResourceTypes !== undefined) {
    queryParameters['excluded.resource.types'] = opt_excludedResourceTypes;
  }

  /** @type {!Object} */
  var httpRequestParams = {
    method: 'POST',
    url: path,
    json: true,
            params: queryParameters,
    headers: headerParams
  };

  if (opt_extraHttpRequestParams) {
    httpRequestParams = angular.extend(httpRequestParams, opt_extraHttpRequestParams);
  }

  return (/** @type {?} */ (this.http_))(httpRequestParams);
}

/**
 * 
 * 
 * @param {!boolean=} opt_post 
 * @param {!boolean=} opt_apply 
 * @param {!boolean=} opt_delete 
 * @param {!string=} opt_action 
 * @param {!string=} opt_location 
 * @param {!Array<!string>=} opt_propertylist 
 * @param {!Array<!string>=} opt_defaultAttachmentTypeBlacklist 
 * @param {!Array<!string>=} opt_baselineAttachmentTypeBlacklist 
 * @param {!angular.$http.Config=} opt_extraHttpRequestParams Extra HTTP parameters to send.
 * @return {!angular.$q.Promise<!API.Client.comDayCqWcmFoundationSecurityImplDefaultAttachmentTypeBlacklistInfo>}
 */
API.Client.ConfigmgrApi.prototype.comDayCqWcmFoundationSecurityImplDefaultAttachmentTypeBlacklist = function(opt_post, opt_apply, opt_delete, opt_action, opt_location, opt_propertylist, opt_defaultAttachmentTypeBlacklist, opt_baselineAttachmentTypeBlacklist, opt_extraHttpRequestParams) {
  /** @const {string} */
  var path = this.basePath_ + '/system/console/configMgr/com.day.cq.wcm.foundation.security.impl.DefaultAttachmentTypeBlacklistService';

  /** @type {!Object} */
  var queryParameters = {};

  /** @type {!Object} */
  var headerParams = angular.extend({}, this.defaultHeaders_);
  if (opt_post !== undefined) {
    queryParameters['post'] = opt_post;
  }

  if (opt_apply !== undefined) {
    queryParameters['apply'] = opt_apply;
  }

  if (opt_delete !== undefined) {
    queryParameters['delete'] = opt_delete;
  }

  if (opt_action !== undefined) {
    queryParameters['action'] = opt_action;
  }

  if (opt_location !== undefined) {
    queryParameters['$location'] = opt_location;
  }

  if (opt_propertylist !== undefined) {
    queryParameters['propertylist'] = opt_propertylist;
  }

  if (opt_defaultAttachmentTypeBlacklist !== undefined) {
    queryParameters['default.attachment.type.blacklist'] = opt_defaultAttachmentTypeBlacklist;
  }

  if (opt_baselineAttachmentTypeBlacklist !== undefined) {
    queryParameters['baseline.attachment.type.blacklist'] = opt_baselineAttachmentTypeBlacklist;
  }

  /** @type {!Object} */
  var httpRequestParams = {
    method: 'POST',
    url: path,
    json: true,
            params: queryParameters,
    headers: headerParams
  };

  if (opt_extraHttpRequestParams) {
    httpRequestParams = angular.extend(httpRequestParams, opt_extraHttpRequestParams);
  }

  return (/** @type {?} */ (this.http_))(httpRequestParams);
}

/**
 * 
 * 
 * @param {!boolean=} opt_post 
 * @param {!boolean=} opt_apply 
 * @param {!boolean=} opt_delete 
 * @param {!string=} opt_action 
 * @param {!string=} opt_location 
 * @param {!Array<!string>=} opt_propertylist 
 * @param {!Array<!string>=} opt_parameterWhitelist 
 * @param {!Array<!string>=} opt_parameterWhitelistPrefixes 
 * @param {!Array<!string>=} opt_binaryParameterWhitelist 
 * @param {!Array<!string>=} opt_modifierWhitelist 
 * @param {!Array<!string>=} opt_operationWhitelist 
 * @param {!Array<!string>=} opt_operationWhitelistPrefixes 
 * @param {!Array<!string>=} opt_typehintWhitelist 
 * @param {!Array<!string>=} opt_resourcetypeWhitelist 
 * @param {!angular.$http.Config=} opt_extraHttpRequestParams Extra HTTP parameters to send.
 * @return {!angular.$q.Promise<!API.Client.comDayCqWcmFoundationSecurityImplSaferSlingPostValidatorImplInfo>}
 */
API.Client.ConfigmgrApi.prototype.comDayCqWcmFoundationSecurityImplSaferSlingPostValidatorImpl = function(opt_post, opt_apply, opt_delete, opt_action, opt_location, opt_propertylist, opt_parameterWhitelist, opt_parameterWhitelistPrefixes, opt_binaryParameterWhitelist, opt_modifierWhitelist, opt_operationWhitelist, opt_operationWhitelistPrefixes, opt_typehintWhitelist, opt_resourcetypeWhitelist, opt_extraHttpRequestParams) {
  /** @const {string} */
  var path = this.basePath_ + '/system/console/configMgr/com.day.cq.wcm.foundation.security.impl.SaferSlingPostValidatorImpl';

  /** @type {!Object} */
  var queryParameters = {};

  /** @type {!Object} */
  var headerParams = angular.extend({}, this.defaultHeaders_);
  if (opt_post !== undefined) {
    queryParameters['post'] = opt_post;
  }

  if (opt_apply !== undefined) {
    queryParameters['apply'] = opt_apply;
  }

  if (opt_delete !== undefined) {
    queryParameters['delete'] = opt_delete;
  }

  if (opt_action !== undefined) {
    queryParameters['action'] = opt_action;
  }

  if (opt_location !== undefined) {
    queryParameters['$location'] = opt_location;
  }

  if (opt_propertylist !== undefined) {
    queryParameters['propertylist'] = opt_propertylist;
  }

  if (opt_parameterWhitelist !== undefined) {
    queryParameters['parameter.whitelist'] = opt_parameterWhitelist;
  }

  if (opt_parameterWhitelistPrefixes !== undefined) {
    queryParameters['parameter.whitelist.prefixes'] = opt_parameterWhitelistPrefixes;
  }

  if (opt_binaryParameterWhitelist !== undefined) {
    queryParameters['binary.parameter.whitelist'] = opt_binaryParameterWhitelist;
  }

  if (opt_modifierWhitelist !== undefined) {
    queryParameters['modifier.whitelist'] = opt_modifierWhitelist;
  }

  if (opt_operationWhitelist !== undefined) {
    queryParameters['operation.whitelist'] = opt_operationWhitelist;
  }

  if (opt_operationWhitelistPrefixes !== undefined) {
    queryParameters['operation.whitelist.prefixes'] = opt_operationWhitelistPrefixes;
  }

  if (opt_typehintWhitelist !== undefined) {
    queryParameters['typehint.whitelist'] = opt_typehintWhitelist;
  }

  if (opt_resourcetypeWhitelist !== undefined) {
    queryParameters['resourcetype.whitelist'] = opt_resourcetypeWhitelist;
  }

  /** @type {!Object} */
  var httpRequestParams = {
    method: 'POST',
    url: path,
    json: true,
            params: queryParameters,
    headers: headerParams
  };

  if (opt_extraHttpRequestParams) {
    httpRequestParams = angular.extend(httpRequestParams, opt_extraHttpRequestParams);
  }

  return (/** @type {?} */ (this.http_))(httpRequestParams);
}

/**
 * 
 * 
 * @param {!boolean=} opt_post 
 * @param {!boolean=} opt_apply 
 * @param {!boolean=} opt_delete 
 * @param {!string=} opt_action 
 * @param {!string=} opt_location 
 * @param {!Array<!string>=} opt_propertylist 
 * @param {!boolean=} opt_deviceInfoTransformerEnabled 
 * @param {!string=} opt_deviceInfoTransformerCssStyle 
 * @param {!angular.$http.Config=} opt_extraHttpRequestParams Extra HTTP parameters to send.
 * @return {!angular.$q.Promise<!API.Client.comDayCqWcmMobileCoreImplDeviceDeviceInfoTransformerFactoryInfo>}
 */
API.Client.ConfigmgrApi.prototype.comDayCqWcmMobileCoreImplDeviceDeviceInfoTransformerFactory = function(opt_post, opt_apply, opt_delete, opt_action, opt_location, opt_propertylist, opt_deviceInfoTransformerEnabled, opt_deviceInfoTransformerCssStyle, opt_extraHttpRequestParams) {
  /** @const {string} */
  var path = this.basePath_ + '/system/console/configMgr/com.day.cq.wcm.mobile.core.impl.device.DeviceInfoTransformerFactory';

  /** @type {!Object} */
  var queryParameters = {};

  /** @type {!Object} */
  var headerParams = angular.extend({}, this.defaultHeaders_);
  if (opt_post !== undefined) {
    queryParameters['post'] = opt_post;
  }

  if (opt_apply !== undefined) {
    queryParameters['apply'] = opt_apply;
  }

  if (opt_delete !== undefined) {
    queryParameters['delete'] = opt_delete;
  }

  if (opt_action !== undefined) {
    queryParameters['action'] = opt_action;
  }

  if (opt_location !== undefined) {
    queryParameters['$location'] = opt_location;
  }

  if (opt_propertylist !== undefined) {
    queryParameters['propertylist'] = opt_propertylist;
  }

  if (opt_deviceInfoTransformerEnabled !== undefined) {
    queryParameters['device.info.transformer.enabled'] = opt_deviceInfoTransformerEnabled;
  }

  if (opt_deviceInfoTransformerCssStyle !== undefined) {
    queryParameters['device.info.transformer.css.style'] = opt_deviceInfoTransformerCssStyle;
  }

  /** @type {!Object} */
  var httpRequestParams = {
    method: 'POST',
    url: path,
    json: true,
            params: queryParameters,
    headers: headerParams
  };

  if (opt_extraHttpRequestParams) {
    httpRequestParams = angular.extend(httpRequestParams, opt_extraHttpRequestParams);
  }

  return (/** @type {?} */ (this.http_))(httpRequestParams);
}

/**
 * 
 * 
 * @param {!boolean=} opt_post 
 * @param {!boolean=} opt_apply 
 * @param {!boolean=} opt_delete 
 * @param {!string=} opt_action 
 * @param {!string=} opt_location 
 * @param {!Array<!string>=} opt_propertylist 
 * @param {!boolean=} opt_redirectEnabled 
 * @param {!boolean=} opt_redirectStatsEnabled 
 * @param {!Array<!string>=} opt_redirectExtensions 
 * @param {!Array<!string>=} opt_redirectPaths 
 * @param {!angular.$http.Config=} opt_extraHttpRequestParams Extra HTTP parameters to send.
 * @return {!angular.$q.Promise<!API.Client.comDayCqWcmMobileCoreImplRedirectRedirectFilterInfo>}
 */
API.Client.ConfigmgrApi.prototype.comDayCqWcmMobileCoreImplRedirectRedirectFilter = function(opt_post, opt_apply, opt_delete, opt_action, opt_location, opt_propertylist, opt_redirectEnabled, opt_redirectStatsEnabled, opt_redirectExtensions, opt_redirectPaths, opt_extraHttpRequestParams) {
  /** @const {string} */
  var path = this.basePath_ + '/system/console/configMgr/com.day.cq.wcm.mobile.core.impl.redirect.RedirectFilter';

  /** @type {!Object} */
  var queryParameters = {};

  /** @type {!Object} */
  var headerParams = angular.extend({}, this.defaultHeaders_);
  if (opt_post !== undefined) {
    queryParameters['post'] = opt_post;
  }

  if (opt_apply !== undefined) {
    queryParameters['apply'] = opt_apply;
  }

  if (opt_delete !== undefined) {
    queryParameters['delete'] = opt_delete;
  }

  if (opt_action !== undefined) {
    queryParameters['action'] = opt_action;
  }

  if (opt_location !== undefined) {
    queryParameters['$location'] = opt_location;
  }

  if (opt_propertylist !== undefined) {
    queryParameters['propertylist'] = opt_propertylist;
  }

  if (opt_redirectEnabled !== undefined) {
    queryParameters['redirect.enabled'] = opt_redirectEnabled;
  }

  if (opt_redirectStatsEnabled !== undefined) {
    queryParameters['redirect.stats.enabled'] = opt_redirectStatsEnabled;
  }

  if (opt_redirectExtensions !== undefined) {
    queryParameters['redirect.extensions'] = opt_redirectExtensions;
  }

  if (opt_redirectPaths !== undefined) {
    queryParameters['redirect.paths'] = opt_redirectPaths;
  }

  /** @type {!Object} */
  var httpRequestParams = {
    method: 'POST',
    url: path,
    json: true,
            params: queryParameters,
    headers: headerParams
  };

  if (opt_extraHttpRequestParams) {
    httpRequestParams = angular.extend(httpRequestParams, opt_extraHttpRequestParams);
  }

  return (/** @type {?} */ (this.http_))(httpRequestParams);
}

/**
 * 
 * 
 * @param {!boolean=} opt_post 
 * @param {!boolean=} opt_apply 
 * @param {!boolean=} opt_delete 
 * @param {!string=} opt_action 
 * @param {!string=} opt_location 
 * @param {!Array<!string>=} opt_propertylist 
 * @param {!Array<!string>=} opt_cqWcmMsmActionExcludednodetypes 
 * @param {!Array<!string>=} opt_cqWcmMsmActionExcludedparagraphitems 
 * @param {!Array<!string>=} opt_cqWcmMsmActionExcludedprops 
 * @param {!string=} opt_contentcopyactionOrderStyle 
 * @param {!angular.$http.Config=} opt_extraHttpRequestParams Extra HTTP parameters to send.
 * @return {!angular.$q.Promise<!API.Client.comDayCqWcmMsmImplActionsContentCopyActionFactoryInfo>}
 */
API.Client.ConfigmgrApi.prototype.comDayCqWcmMsmImplActionsContentCopyActionFactory = function(opt_post, opt_apply, opt_delete, opt_action, opt_location, opt_propertylist, opt_cqWcmMsmActionExcludednodetypes, opt_cqWcmMsmActionExcludedparagraphitems, opt_cqWcmMsmActionExcludedprops, opt_contentcopyactionOrderStyle, opt_extraHttpRequestParams) {
  /** @const {string} */
  var path = this.basePath_ + '/system/console/configMgr/com.day.cq.wcm.msm.impl.actions.ContentCopyActionFactory';

  /** @type {!Object} */
  var queryParameters = {};

  /** @type {!Object} */
  var headerParams = angular.extend({}, this.defaultHeaders_);
  if (opt_post !== undefined) {
    queryParameters['post'] = opt_post;
  }

  if (opt_apply !== undefined) {
    queryParameters['apply'] = opt_apply;
  }

  if (opt_delete !== undefined) {
    queryParameters['delete'] = opt_delete;
  }

  if (opt_action !== undefined) {
    queryParameters['action'] = opt_action;
  }

  if (opt_location !== undefined) {
    queryParameters['$location'] = opt_location;
  }

  if (opt_propertylist !== undefined) {
    queryParameters['propertylist'] = opt_propertylist;
  }

  if (opt_cqWcmMsmActionExcludednodetypes !== undefined) {
    queryParameters['cq.wcm.msm.action.excludednodetypes'] = opt_cqWcmMsmActionExcludednodetypes;
  }

  if (opt_cqWcmMsmActionExcludedparagraphitems !== undefined) {
    queryParameters['cq.wcm.msm.action.excludedparagraphitems'] = opt_cqWcmMsmActionExcludedparagraphitems;
  }

  if (opt_cqWcmMsmActionExcludedprops !== undefined) {
    queryParameters['cq.wcm.msm.action.excludedprops'] = opt_cqWcmMsmActionExcludedprops;
  }

  if (opt_contentcopyactionOrderStyle !== undefined) {
    queryParameters['contentcopyaction.order.style'] = opt_contentcopyactionOrderStyle;
  }

  /** @type {!Object} */
  var httpRequestParams = {
    method: 'POST',
    url: path,
    json: true,
            params: queryParameters,
    headers: headerParams
  };

  if (opt_extraHttpRequestParams) {
    httpRequestParams = angular.extend(httpRequestParams, opt_extraHttpRequestParams);
  }

  return (/** @type {?} */ (this.http_))(httpRequestParams);
}

/**
 * 
 * 
 * @param {!boolean=} opt_post 
 * @param {!boolean=} opt_apply 
 * @param {!boolean=} opt_delete 
 * @param {!string=} opt_action 
 * @param {!string=} opt_location 
 * @param {!Array<!string>=} opt_propertylist 
 * @param {!Array<!string>=} opt_cqWcmMsmActionExcludednodetypes 
 * @param {!Array<!string>=} opt_cqWcmMsmActionExcludedparagraphitems 
 * @param {!Array<!string>=} opt_cqWcmMsmActionExcludedprops 
 * @param {!angular.$http.Config=} opt_extraHttpRequestParams Extra HTTP parameters to send.
 * @return {!angular.$q.Promise<!API.Client.comDayCqWcmMsmImplActionsContentDeleteActionFactoryInfo>}
 */
API.Client.ConfigmgrApi.prototype.comDayCqWcmMsmImplActionsContentDeleteActionFactory = function(opt_post, opt_apply, opt_delete, opt_action, opt_location, opt_propertylist, opt_cqWcmMsmActionExcludednodetypes, opt_cqWcmMsmActionExcludedparagraphitems, opt_cqWcmMsmActionExcludedprops, opt_extraHttpRequestParams) {
  /** @const {string} */
  var path = this.basePath_ + '/system/console/configMgr/com.day.cq.wcm.msm.impl.actions.ContentDeleteActionFactory';

  /** @type {!Object} */
  var queryParameters = {};

  /** @type {!Object} */
  var headerParams = angular.extend({}, this.defaultHeaders_);
  if (opt_post !== undefined) {
    queryParameters['post'] = opt_post;
  }

  if (opt_apply !== undefined) {
    queryParameters['apply'] = opt_apply;
  }

  if (opt_delete !== undefined) {
    queryParameters['delete'] = opt_delete;
  }

  if (opt_action !== undefined) {
    queryParameters['action'] = opt_action;
  }

  if (opt_location !== undefined) {
    queryParameters['$location'] = opt_location;
  }

  if (opt_propertylist !== undefined) {
    queryParameters['propertylist'] = opt_propertylist;
  }

  if (opt_cqWcmMsmActionExcludednodetypes !== undefined) {
    queryParameters['cq.wcm.msm.action.excludednodetypes'] = opt_cqWcmMsmActionExcludednodetypes;
  }

  if (opt_cqWcmMsmActionExcludedparagraphitems !== undefined) {
    queryParameters['cq.wcm.msm.action.excludedparagraphitems'] = opt_cqWcmMsmActionExcludedparagraphitems;
  }

  if (opt_cqWcmMsmActionExcludedprops !== undefined) {
    queryParameters['cq.wcm.msm.action.excludedprops'] = opt_cqWcmMsmActionExcludedprops;
  }

  /** @type {!Object} */
  var httpRequestParams = {
    method: 'POST',
    url: path,
    json: true,
            params: queryParameters,
    headers: headerParams
  };

  if (opt_extraHttpRequestParams) {
    httpRequestParams = angular.extend(httpRequestParams, opt_extraHttpRequestParams);
  }

  return (/** @type {?} */ (this.http_))(httpRequestParams);
}

/**
 * 
 * 
 * @param {!boolean=} opt_post 
 * @param {!boolean=} opt_apply 
 * @param {!boolean=} opt_delete 
 * @param {!string=} opt_action 
 * @param {!string=} opt_location 
 * @param {!Array<!string>=} opt_propertylist 
 * @param {!Array<!string>=} opt_cqWcmMsmActionExcludednodetypes 
 * @param {!Array<!string>=} opt_cqWcmMsmActionExcludedparagraphitems 
 * @param {!Array<!string>=} opt_cqWcmMsmActionExcludedprops 
 * @param {!Array<!string>=} opt_cqWcmMsmActionIgnoredMixin 
 * @param {!angular.$http.Config=} opt_extraHttpRequestParams Extra HTTP parameters to send.
 * @return {!angular.$q.Promise<!API.Client.comDayCqWcmMsmImplActionsContentUpdateActionFactoryInfo>}
 */
API.Client.ConfigmgrApi.prototype.comDayCqWcmMsmImplActionsContentUpdateActionFactory = function(opt_post, opt_apply, opt_delete, opt_action, opt_location, opt_propertylist, opt_cqWcmMsmActionExcludednodetypes, opt_cqWcmMsmActionExcludedparagraphitems, opt_cqWcmMsmActionExcludedprops, opt_cqWcmMsmActionIgnoredMixin, opt_extraHttpRequestParams) {
  /** @const {string} */
  var path = this.basePath_ + '/system/console/configMgr/com.day.cq.wcm.msm.impl.actions.ContentUpdateActionFactory';

  /** @type {!Object} */
  var queryParameters = {};

  /** @type {!Object} */
  var headerParams = angular.extend({}, this.defaultHeaders_);
  if (opt_post !== undefined) {
    queryParameters['post'] = opt_post;
  }

  if (opt_apply !== undefined) {
    queryParameters['apply'] = opt_apply;
  }

  if (opt_delete !== undefined) {
    queryParameters['delete'] = opt_delete;
  }

  if (opt_action !== undefined) {
    queryParameters['action'] = opt_action;
  }

  if (opt_location !== undefined) {
    queryParameters['$location'] = opt_location;
  }

  if (opt_propertylist !== undefined) {
    queryParameters['propertylist'] = opt_propertylist;
  }

  if (opt_cqWcmMsmActionExcludednodetypes !== undefined) {
    queryParameters['cq.wcm.msm.action.excludednodetypes'] = opt_cqWcmMsmActionExcludednodetypes;
  }

  if (opt_cqWcmMsmActionExcludedparagraphitems !== undefined) {
    queryParameters['cq.wcm.msm.action.excludedparagraphitems'] = opt_cqWcmMsmActionExcludedparagraphitems;
  }

  if (opt_cqWcmMsmActionExcludedprops !== undefined) {
    queryParameters['cq.wcm.msm.action.excludedprops'] = opt_cqWcmMsmActionExcludedprops;
  }

  if (opt_cqWcmMsmActionIgnoredMixin !== undefined) {
    queryParameters['cq.wcm.msm.action.ignoredMixin'] = opt_cqWcmMsmActionIgnoredMixin;
  }

  /** @type {!Object} */
  var httpRequestParams = {
    method: 'POST',
    url: path,
    json: true,
            params: queryParameters,
    headers: headerParams
  };

  if (opt_extraHttpRequestParams) {
    httpRequestParams = angular.extend(httpRequestParams, opt_extraHttpRequestParams);
  }

  return (/** @type {?} */ (this.http_))(httpRequestParams);
}

/**
 * 
 * 
 * @param {!boolean=} opt_post 
 * @param {!boolean=} opt_apply 
 * @param {!boolean=} opt_delete 
 * @param {!string=} opt_action 
 * @param {!string=} opt_location 
 * @param {!Array<!string>=} opt_propertylist 
 * @param {!Array<!string>=} opt_cqWcmMsmActionExcludednodetypes 
 * @param {!Array<!string>=} opt_cqWcmMsmActionExcludedparagraphitems 
 * @param {!Array<!string>=} opt_cqWcmMsmActionExcludedprops 
 * @param {!angular.$http.Config=} opt_extraHttpRequestParams Extra HTTP parameters to send.
 * @return {!angular.$q.Promise<!API.Client.comDayCqWcmMsmImplActionsOrderChildrenActionFactoryInfo>}
 */
API.Client.ConfigmgrApi.prototype.comDayCqWcmMsmImplActionsOrderChildrenActionFactory = function(opt_post, opt_apply, opt_delete, opt_action, opt_location, opt_propertylist, opt_cqWcmMsmActionExcludednodetypes, opt_cqWcmMsmActionExcludedparagraphitems, opt_cqWcmMsmActionExcludedprops, opt_extraHttpRequestParams) {
  /** @const {string} */
  var path = this.basePath_ + '/system/console/configMgr/com.day.cq.wcm.msm.impl.actions.OrderChildrenActionFactory';

  /** @type {!Object} */
  var queryParameters = {};

  /** @type {!Object} */
  var headerParams = angular.extend({}, this.defaultHeaders_);
  if (opt_post !== undefined) {
    queryParameters['post'] = opt_post;
  }

  if (opt_apply !== undefined) {
    queryParameters['apply'] = opt_apply;
  }

  if (opt_delete !== undefined) {
    queryParameters['delete'] = opt_delete;
  }

  if (opt_action !== undefined) {
    queryParameters['action'] = opt_action;
  }

  if (opt_location !== undefined) {
    queryParameters['$location'] = opt_location;
  }

  if (opt_propertylist !== undefined) {
    queryParameters['propertylist'] = opt_propertylist;
  }

  if (opt_cqWcmMsmActionExcludednodetypes !== undefined) {
    queryParameters['cq.wcm.msm.action.excludednodetypes'] = opt_cqWcmMsmActionExcludednodetypes;
  }

  if (opt_cqWcmMsmActionExcludedparagraphitems !== undefined) {
    queryParameters['cq.wcm.msm.action.excludedparagraphitems'] = opt_cqWcmMsmActionExcludedparagraphitems;
  }

  if (opt_cqWcmMsmActionExcludedprops !== undefined) {
    queryParameters['cq.wcm.msm.action.excludedprops'] = opt_cqWcmMsmActionExcludedprops;
  }

  /** @type {!Object} */
  var httpRequestParams = {
    method: 'POST',
    url: path,
    json: true,
            params: queryParameters,
    headers: headerParams
  };

  if (opt_extraHttpRequestParams) {
    httpRequestParams = angular.extend(httpRequestParams, opt_extraHttpRequestParams);
  }

  return (/** @type {?} */ (this.http_))(httpRequestParams);
}

/**
 * 
 * 
 * @param {!boolean=} opt_post 
 * @param {!boolean=} opt_apply 
 * @param {!boolean=} opt_delete 
 * @param {!string=} opt_action 
 * @param {!string=} opt_location 
 * @param {!Array<!string>=} opt_propertylist 
 * @param {!Array<!string>=} opt_cqWcmMsmActionExcludednodetypes 
 * @param {!Array<!string>=} opt_cqWcmMsmActionExcludedparagraphitems 
 * @param {!Array<!string>=} opt_cqWcmMsmActionExcludedprops 
 * @param {!boolean=} opt_cqWcmMsmImplActionsPagemovePropReferenceUpdate 
 * @param {!angular.$http.Config=} opt_extraHttpRequestParams Extra HTTP parameters to send.
 * @return {!angular.$q.Promise<!API.Client.comDayCqWcmMsmImplActionsPageMoveActionFactoryInfo>}
 */
API.Client.ConfigmgrApi.prototype.comDayCqWcmMsmImplActionsPageMoveActionFactory = function(opt_post, opt_apply, opt_delete, opt_action, opt_location, opt_propertylist, opt_cqWcmMsmActionExcludednodetypes, opt_cqWcmMsmActionExcludedparagraphitems, opt_cqWcmMsmActionExcludedprops, opt_cqWcmMsmImplActionsPagemovePropReferenceUpdate, opt_extraHttpRequestParams) {
  /** @const {string} */
  var path = this.basePath_ + '/system/console/configMgr/com.day.cq.wcm.msm.impl.actions.PageMoveActionFactory';

  /** @type {!Object} */
  var queryParameters = {};

  /** @type {!Object} */
  var headerParams = angular.extend({}, this.defaultHeaders_);
  if (opt_post !== undefined) {
    queryParameters['post'] = opt_post;
  }

  if (opt_apply !== undefined) {
    queryParameters['apply'] = opt_apply;
  }

  if (opt_delete !== undefined) {
    queryParameters['delete'] = opt_delete;
  }

  if (opt_action !== undefined) {
    queryParameters['action'] = opt_action;
  }

  if (opt_location !== undefined) {
    queryParameters['$location'] = opt_location;
  }

  if (opt_propertylist !== undefined) {
    queryParameters['propertylist'] = opt_propertylist;
  }

  if (opt_cqWcmMsmActionExcludednodetypes !== undefined) {
    queryParameters['cq.wcm.msm.action.excludednodetypes'] = opt_cqWcmMsmActionExcludednodetypes;
  }

  if (opt_cqWcmMsmActionExcludedparagraphitems !== undefined) {
    queryParameters['cq.wcm.msm.action.excludedparagraphitems'] = opt_cqWcmMsmActionExcludedparagraphitems;
  }

  if (opt_cqWcmMsmActionExcludedprops !== undefined) {
    queryParameters['cq.wcm.msm.action.excludedprops'] = opt_cqWcmMsmActionExcludedprops;
  }

  if (opt_cqWcmMsmImplActionsPagemovePropReferenceUpdate !== undefined) {
    queryParameters['cq.wcm.msm.impl.actions.pagemove.prop_referenceUpdate'] = opt_cqWcmMsmImplActionsPagemovePropReferenceUpdate;
  }

  /** @type {!Object} */
  var httpRequestParams = {
    method: 'POST',
    url: path,
    json: true,
            params: queryParameters,
    headers: headerParams
  };

  if (opt_extraHttpRequestParams) {
    httpRequestParams = angular.extend(httpRequestParams, opt_extraHttpRequestParams);
  }

  return (/** @type {?} */ (this.http_))(httpRequestParams);
}

/**
 * 
 * 
 * @param {!boolean=} opt_post 
 * @param {!boolean=} opt_apply 
 * @param {!boolean=} opt_delete 
 * @param {!string=} opt_action 
 * @param {!string=} opt_location 
 * @param {!Array<!string>=} opt_propertylist 
 * @param {!Array<!string>=} opt_cqWcmMsmActionExcludednodetypes 
 * @param {!Array<!string>=} opt_cqWcmMsmActionExcludedparagraphitems 
 * @param {!Array<!string>=} opt_cqWcmMsmActionExcludedprops 
 * @param {!boolean=} opt_cqWcmMsmImplActionReferencesupdatePropUpdateNested 
 * @param {!angular.$http.Config=} opt_extraHttpRequestParams Extra HTTP parameters to send.
 * @return {!angular.$q.Promise<!API.Client.comDayCqWcmMsmImplActionsReferencesUpdateActionFactoryInfo>}
 */
API.Client.ConfigmgrApi.prototype.comDayCqWcmMsmImplActionsReferencesUpdateActionFactory = function(opt_post, opt_apply, opt_delete, opt_action, opt_location, opt_propertylist, opt_cqWcmMsmActionExcludednodetypes, opt_cqWcmMsmActionExcludedparagraphitems, opt_cqWcmMsmActionExcludedprops, opt_cqWcmMsmImplActionReferencesupdatePropUpdateNested, opt_extraHttpRequestParams) {
  /** @const {string} */
  var path = this.basePath_ + '/system/console/configMgr/com.day.cq.wcm.msm.impl.actions.ReferencesUpdateActionFactory';

  /** @type {!Object} */
  var queryParameters = {};

  /** @type {!Object} */
  var headerParams = angular.extend({}, this.defaultHeaders_);
  if (opt_post !== undefined) {
    queryParameters['post'] = opt_post;
  }

  if (opt_apply !== undefined) {
    queryParameters['apply'] = opt_apply;
  }

  if (opt_delete !== undefined) {
    queryParameters['delete'] = opt_delete;
  }

  if (opt_action !== undefined) {
    queryParameters['action'] = opt_action;
  }

  if (opt_location !== undefined) {
    queryParameters['$location'] = opt_location;
  }

  if (opt_propertylist !== undefined) {
    queryParameters['propertylist'] = opt_propertylist;
  }

  if (opt_cqWcmMsmActionExcludednodetypes !== undefined) {
    queryParameters['cq.wcm.msm.action.excludednodetypes'] = opt_cqWcmMsmActionExcludednodetypes;
  }

  if (opt_cqWcmMsmActionExcludedparagraphitems !== undefined) {
    queryParameters['cq.wcm.msm.action.excludedparagraphitems'] = opt_cqWcmMsmActionExcludedparagraphitems;
  }

  if (opt_cqWcmMsmActionExcludedprops !== undefined) {
    queryParameters['cq.wcm.msm.action.excludedprops'] = opt_cqWcmMsmActionExcludedprops;
  }

  if (opt_cqWcmMsmImplActionReferencesupdatePropUpdateNested !== undefined) {
    queryParameters['cq.wcm.msm.impl.action.referencesupdate.prop_updateNested'] = opt_cqWcmMsmImplActionReferencesupdatePropUpdateNested;
  }

  /** @type {!Object} */
  var httpRequestParams = {
    method: 'POST',
    url: path,
    json: true,
            params: queryParameters,
    headers: headerParams
  };

  if (opt_extraHttpRequestParams) {
    httpRequestParams = angular.extend(httpRequestParams, opt_extraHttpRequestParams);
  }

  return (/** @type {?} */ (this.http_))(httpRequestParams);
}

/**
 * 
 * 
 * @param {!boolean=} opt_post 
 * @param {!boolean=} opt_apply 
 * @param {!boolean=} opt_delete 
 * @param {!string=} opt_action 
 * @param {!string=} opt_location 
 * @param {!Array<!string>=} opt_propertylist 
 * @param {!Array<!string>=} opt_cqWcmMsmActionExcludednodetypes 
 * @param {!Array<!string>=} opt_cqWcmMsmActionExcludedparagraphitems 
 * @param {!Array<!string>=} opt_cqWcmMsmActionExcludedprops 
 * @param {!angular.$http.Config=} opt_extraHttpRequestParams Extra HTTP parameters to send.
 * @return {!angular.$q.Promise<!API.Client.comDayCqWcmMsmImplActionsVersionCopyActionFactoryInfo>}
 */
API.Client.ConfigmgrApi.prototype.comDayCqWcmMsmImplActionsVersionCopyActionFactory = function(opt_post, opt_apply, opt_delete, opt_action, opt_location, opt_propertylist, opt_cqWcmMsmActionExcludednodetypes, opt_cqWcmMsmActionExcludedparagraphitems, opt_cqWcmMsmActionExcludedprops, opt_extraHttpRequestParams) {
  /** @const {string} */
  var path = this.basePath_ + '/system/console/configMgr/com.day.cq.wcm.msm.impl.actions.VersionCopyActionFactory';

  /** @type {!Object} */
  var queryParameters = {};

  /** @type {!Object} */
  var headerParams = angular.extend({}, this.defaultHeaders_);
  if (opt_post !== undefined) {
    queryParameters['post'] = opt_post;
  }

  if (opt_apply !== undefined) {
    queryParameters['apply'] = opt_apply;
  }

  if (opt_delete !== undefined) {
    queryParameters['delete'] = opt_delete;
  }

  if (opt_action !== undefined) {
    queryParameters['action'] = opt_action;
  }

  if (opt_location !== undefined) {
    queryParameters['$location'] = opt_location;
  }

  if (opt_propertylist !== undefined) {
    queryParameters['propertylist'] = opt_propertylist;
  }

  if (opt_cqWcmMsmActionExcludednodetypes !== undefined) {
    queryParameters['cq.wcm.msm.action.excludednodetypes'] = opt_cqWcmMsmActionExcludednodetypes;
  }

  if (opt_cqWcmMsmActionExcludedparagraphitems !== undefined) {
    queryParameters['cq.wcm.msm.action.excludedparagraphitems'] = opt_cqWcmMsmActionExcludedparagraphitems;
  }

  if (opt_cqWcmMsmActionExcludedprops !== undefined) {
    queryParameters['cq.wcm.msm.action.excludedprops'] = opt_cqWcmMsmActionExcludedprops;
  }

  /** @type {!Object} */
  var httpRequestParams = {
    method: 'POST',
    url: path,
    json: true,
            params: queryParameters,
    headers: headerParams
  };

  if (opt_extraHttpRequestParams) {
    httpRequestParams = angular.extend(httpRequestParams, opt_extraHttpRequestParams);
  }

  return (/** @type {?} */ (this.http_))(httpRequestParams);
}

/**
 * 
 * 
 * @param {!boolean=} opt_post 
 * @param {!boolean=} opt_apply 
 * @param {!boolean=} opt_delete 
 * @param {!string=} opt_action 
 * @param {!string=} opt_location 
 * @param {!Array<!string>=} opt_propertylist 
 * @param {!string=} opt_liverelationshipmgrRelationsconfigDefault 
 * @param {!angular.$http.Config=} opt_extraHttpRequestParams Extra HTTP parameters to send.
 * @return {!angular.$q.Promise<!API.Client.comDayCqWcmMsmImplLiveRelationshipManagerImplInfo>}
 */
API.Client.ConfigmgrApi.prototype.comDayCqWcmMsmImplLiveRelationshipManagerImpl = function(opt_post, opt_apply, opt_delete, opt_action, opt_location, opt_propertylist, opt_liverelationshipmgrRelationsconfigDefault, opt_extraHttpRequestParams) {
  /** @const {string} */
  var path = this.basePath_ + '/system/console/configMgr/com.day.cq.wcm.msm.impl.LiveRelationshipManagerImpl';

  /** @type {!Object} */
  var queryParameters = {};

  /** @type {!Object} */
  var headerParams = angular.extend({}, this.defaultHeaders_);
  if (opt_post !== undefined) {
    queryParameters['post'] = opt_post;
  }

  if (opt_apply !== undefined) {
    queryParameters['apply'] = opt_apply;
  }

  if (opt_delete !== undefined) {
    queryParameters['delete'] = opt_delete;
  }

  if (opt_action !== undefined) {
    queryParameters['action'] = opt_action;
  }

  if (opt_location !== undefined) {
    queryParameters['$location'] = opt_location;
  }

  if (opt_propertylist !== undefined) {
    queryParameters['propertylist'] = opt_propertylist;
  }

  if (opt_liverelationshipmgrRelationsconfigDefault !== undefined) {
    queryParameters['liverelationshipmgr.relationsconfig.default'] = opt_liverelationshipmgrRelationsconfigDefault;
  }

  /** @type {!Object} */
  var httpRequestParams = {
    method: 'POST',
    url: path,
    json: true,
            params: queryParameters,
    headers: headerParams
  };

  if (opt_extraHttpRequestParams) {
    httpRequestParams = angular.extend(httpRequestParams, opt_extraHttpRequestParams);
  }

  return (/** @type {?} */ (this.http_))(httpRequestParams);
}

/**
 * 
 * 
 * @param {!boolean=} opt_post 
 * @param {!boolean=} opt_apply 
 * @param {!boolean=} opt_delete 
 * @param {!string=} opt_action 
 * @param {!string=} opt_location 
 * @param {!Array<!string>=} opt_propertylist 
 * @param {!string=} opt_eventFilter 
 * @param {!Array<!string>=} opt_rolloutmgrExcludedpropsDefault 
 * @param {!Array<!string>=} opt_rolloutmgrExcludedparagraphpropsDefault 
 * @param {!Array<!string>=} opt_rolloutmgrExcludednodetypesDefault 
 * @param {!number=} opt_rolloutmgrThreadpoolMaxsize 
 * @param {!number=} opt_rolloutmgrThreadpoolMaxshutdowntime 
 * @param {!string=} opt_rolloutmgrThreadpoolPriority 
 * @param {!number=} opt_rolloutmgrCommitSize 
 * @param {!boolean=} opt_rolloutmgrConflicthandlingEnabled 
 * @param {!angular.$http.Config=} opt_extraHttpRequestParams Extra HTTP parameters to send.
 * @return {!angular.$q.Promise<!API.Client.comDayCqWcmMsmImplRolloutManagerImplInfo>}
 */
API.Client.ConfigmgrApi.prototype.comDayCqWcmMsmImplRolloutManagerImpl = function(opt_post, opt_apply, opt_delete, opt_action, opt_location, opt_propertylist, opt_eventFilter, opt_rolloutmgrExcludedpropsDefault, opt_rolloutmgrExcludedparagraphpropsDefault, opt_rolloutmgrExcludednodetypesDefault, opt_rolloutmgrThreadpoolMaxsize, opt_rolloutmgrThreadpoolMaxshutdowntime, opt_rolloutmgrThreadpoolPriority, opt_rolloutmgrCommitSize, opt_rolloutmgrConflicthandlingEnabled, opt_extraHttpRequestParams) {
  /** @const {string} */
  var path = this.basePath_ + '/system/console/configMgr/com.day.cq.wcm.msm.impl.RolloutManagerImpl';

  /** @type {!Object} */
  var queryParameters = {};

  /** @type {!Object} */
  var headerParams = angular.extend({}, this.defaultHeaders_);
  if (opt_post !== undefined) {
    queryParameters['post'] = opt_post;
  }

  if (opt_apply !== undefined) {
    queryParameters['apply'] = opt_apply;
  }

  if (opt_delete !== undefined) {
    queryParameters['delete'] = opt_delete;
  }

  if (opt_action !== undefined) {
    queryParameters['action'] = opt_action;
  }

  if (opt_location !== undefined) {
    queryParameters['$location'] = opt_location;
  }

  if (opt_propertylist !== undefined) {
    queryParameters['propertylist'] = opt_propertylist;
  }

  if (opt_eventFilter !== undefined) {
    queryParameters['event.filter'] = opt_eventFilter;
  }

  if (opt_rolloutmgrExcludedpropsDefault !== undefined) {
    queryParameters['rolloutmgr.excludedprops.default'] = opt_rolloutmgrExcludedpropsDefault;
  }

  if (opt_rolloutmgrExcludedparagraphpropsDefault !== undefined) {
    queryParameters['rolloutmgr.excludedparagraphprops.default'] = opt_rolloutmgrExcludedparagraphpropsDefault;
  }

  if (opt_rolloutmgrExcludednodetypesDefault !== undefined) {
    queryParameters['rolloutmgr.excludednodetypes.default'] = opt_rolloutmgrExcludednodetypesDefault;
  }

  if (opt_rolloutmgrThreadpoolMaxsize !== undefined) {
    queryParameters['rolloutmgr.threadpool.maxsize'] = opt_rolloutmgrThreadpoolMaxsize;
  }

  if (opt_rolloutmgrThreadpoolMaxshutdowntime !== undefined) {
    queryParameters['rolloutmgr.threadpool.maxshutdowntime'] = opt_rolloutmgrThreadpoolMaxshutdowntime;
  }

  if (opt_rolloutmgrThreadpoolPriority !== undefined) {
    queryParameters['rolloutmgr.threadpool.priority'] = opt_rolloutmgrThreadpoolPriority;
  }

  if (opt_rolloutmgrCommitSize !== undefined) {
    queryParameters['rolloutmgr.commit.size'] = opt_rolloutmgrCommitSize;
  }

  if (opt_rolloutmgrConflicthandlingEnabled !== undefined) {
    queryParameters['rolloutmgr.conflicthandling.enabled'] = opt_rolloutmgrConflicthandlingEnabled;
  }

  /** @type {!Object} */
  var httpRequestParams = {
    method: 'POST',
    url: path,
    json: true,
            params: queryParameters,
    headers: headerParams
  };

  if (opt_extraHttpRequestParams) {
    httpRequestParams = angular.extend(httpRequestParams, opt_extraHttpRequestParams);
  }

  return (/** @type {?} */ (this.http_))(httpRequestParams);
}

/**
 * 
 * 
 * @param {!boolean=} opt_post 
 * @param {!boolean=} opt_apply 
 * @param {!boolean=} opt_delete 
 * @param {!string=} opt_action 
 * @param {!string=} opt_location 
 * @param {!Array<!string>=} opt_propertylist 
 * @param {!number=} opt_auditlogservletDefaultEventsCount 
 * @param {!string=} opt_auditlogservletDefaultPath 
 * @param {!angular.$http.Config=} opt_extraHttpRequestParams Extra HTTP parameters to send.
 * @return {!angular.$q.Promise<!API.Client.comDayCqWcmMsmImplServletsAuditLogServletInfo>}
 */
API.Client.ConfigmgrApi.prototype.comDayCqWcmMsmImplServletsAuditLogServlet = function(opt_post, opt_apply, opt_delete, opt_action, opt_location, opt_propertylist, opt_auditlogservletDefaultEventsCount, opt_auditlogservletDefaultPath, opt_extraHttpRequestParams) {
  /** @const {string} */
  var path = this.basePath_ + '/system/console/configMgr/com.day.cq.wcm.msm.impl.servlets.AuditLogServlet';

  /** @type {!Object} */
  var queryParameters = {};

  /** @type {!Object} */
  var headerParams = angular.extend({}, this.defaultHeaders_);
  if (opt_post !== undefined) {
    queryParameters['post'] = opt_post;
  }

  if (opt_apply !== undefined) {
    queryParameters['apply'] = opt_apply;
  }

  if (opt_delete !== undefined) {
    queryParameters['delete'] = opt_delete;
  }

  if (opt_action !== undefined) {
    queryParameters['action'] = opt_action;
  }

  if (opt_location !== undefined) {
    queryParameters['$location'] = opt_location;
  }

  if (opt_propertylist !== undefined) {
    queryParameters['propertylist'] = opt_propertylist;
  }

  if (opt_auditlogservletDefaultEventsCount !== undefined) {
    queryParameters['auditlogservlet.default.events.count'] = opt_auditlogservletDefaultEventsCount;
  }

  if (opt_auditlogservletDefaultPath !== undefined) {
    queryParameters['auditlogservlet.default.path'] = opt_auditlogservletDefaultPath;
  }

  /** @type {!Object} */
  var httpRequestParams = {
    method: 'POST',
    url: path,
    json: true,
            params: queryParameters,
    headers: headerParams
  };

  if (opt_extraHttpRequestParams) {
    httpRequestParams = angular.extend(httpRequestParams, opt_extraHttpRequestParams);
  }

  return (/** @type {?} */ (this.http_))(httpRequestParams);
}

/**
 * 
 * 
 * @param {!boolean=} opt_post 
 * @param {!boolean=} opt_apply 
 * @param {!boolean=} opt_delete 
 * @param {!string=} opt_action 
 * @param {!string=} opt_location 
 * @param {!Array<!string>=} opt_propertylist 
 * @param {!string=} opt_emailFrom 
 * @param {!angular.$http.Config=} opt_extraHttpRequestParams Extra HTTP parameters to send.
 * @return {!angular.$q.Promise<!API.Client.comDayCqWcmNotificationEmailImplEmailChannelInfo>}
 */
API.Client.ConfigmgrApi.prototype.comDayCqWcmNotificationEmailImplEmailChannel = function(opt_post, opt_apply, opt_delete, opt_action, opt_location, opt_propertylist, opt_emailFrom, opt_extraHttpRequestParams) {
  /** @const {string} */
  var path = this.basePath_ + '/system/console/configMgr/com.day.cq.wcm.notification.email.impl.EmailChannel';

  /** @type {!Object} */
  var queryParameters = {};

  /** @type {!Object} */
  var headerParams = angular.extend({}, this.defaultHeaders_);
  if (opt_post !== undefined) {
    queryParameters['post'] = opt_post;
  }

  if (opt_apply !== undefined) {
    queryParameters['apply'] = opt_apply;
  }

  if (opt_delete !== undefined) {
    queryParameters['delete'] = opt_delete;
  }

  if (opt_action !== undefined) {
    queryParameters['action'] = opt_action;
  }

  if (opt_location !== undefined) {
    queryParameters['$location'] = opt_location;
  }

  if (opt_propertylist !== undefined) {
    queryParameters['propertylist'] = opt_propertylist;
  }

  if (opt_emailFrom !== undefined) {
    queryParameters['email.from'] = opt_emailFrom;
  }

  /** @type {!Object} */
  var httpRequestParams = {
    method: 'POST',
    url: path,
    json: true,
            params: queryParameters,
    headers: headerParams
  };

  if (opt_extraHttpRequestParams) {
    httpRequestParams = angular.extend(httpRequestParams, opt_extraHttpRequestParams);
  }

  return (/** @type {?} */ (this.http_))(httpRequestParams);
}

/**
 * 
 * 
 * @param {!boolean=} opt_post 
 * @param {!boolean=} opt_apply 
 * @param {!boolean=} opt_delete 
 * @param {!string=} opt_action 
 * @param {!string=} opt_location 
 * @param {!Array<!string>=} opt_propertylist 
 * @param {!Array<!string>=} opt_eventTopics 
 * @param {!angular.$http.Config=} opt_extraHttpRequestParams Extra HTTP parameters to send.
 * @return {!angular.$q.Promise<!API.Client.comDayCqWcmNotificationImplNotificationManagerImplInfo>}
 */
API.Client.ConfigmgrApi.prototype.comDayCqWcmNotificationImplNotificationManagerImpl = function(opt_post, opt_apply, opt_delete, opt_action, opt_location, opt_propertylist, opt_eventTopics, opt_extraHttpRequestParams) {
  /** @const {string} */
  var path = this.basePath_ + '/system/console/configMgr/com.day.cq.wcm.notification.impl.NotificationManagerImpl';

  /** @type {!Object} */
  var queryParameters = {};

  /** @type {!Object} */
  var headerParams = angular.extend({}, this.defaultHeaders_);
  if (opt_post !== undefined) {
    queryParameters['post'] = opt_post;
  }

  if (opt_apply !== undefined) {
    queryParameters['apply'] = opt_apply;
  }

  if (opt_delete !== undefined) {
    queryParameters['delete'] = opt_delete;
  }

  if (opt_action !== undefined) {
    queryParameters['action'] = opt_action;
  }

  if (opt_location !== undefined) {
    queryParameters['$location'] = opt_location;
  }

  if (opt_propertylist !== undefined) {
    queryParameters['propertylist'] = opt_propertylist;
  }

  if (opt_eventTopics !== undefined) {
    queryParameters['event.topics'] = opt_eventTopics;
  }

  /** @type {!Object} */
  var httpRequestParams = {
    method: 'POST',
    url: path,
    json: true,
            params: queryParameters,
    headers: headerParams
  };

  if (opt_extraHttpRequestParams) {
    httpRequestParams = angular.extend(httpRequestParams, opt_extraHttpRequestParams);
  }

  return (/** @type {?} */ (this.http_))(httpRequestParams);
}

/**
 * 
 * 
 * @param {!boolean=} opt_post 
 * @param {!boolean=} opt_apply 
 * @param {!boolean=} opt_delete 
 * @param {!string=} opt_action 
 * @param {!string=} opt_location 
 * @param {!Array<!string>=} opt_propertylist 
 * @param {!Array<!string>=} opt_comDayCqWcmScriptingBvpScriptEngines 
 * @param {!angular.$http.Config=} opt_extraHttpRequestParams Extra HTTP parameters to send.
 * @return {!angular.$q.Promise<!API.Client.comDayCqWcmScriptingImplBVPManagerInfo>}
 */
API.Client.ConfigmgrApi.prototype.comDayCqWcmScriptingImplBVPManager = function(opt_post, opt_apply, opt_delete, opt_action, opt_location, opt_propertylist, opt_comDayCqWcmScriptingBvpScriptEngines, opt_extraHttpRequestParams) {
  /** @const {string} */
  var path = this.basePath_ + '/system/console/configMgr/com.day.cq.wcm.scripting.impl.BVPManager';

  /** @type {!Object} */
  var queryParameters = {};

  /** @type {!Object} */
  var headerParams = angular.extend({}, this.defaultHeaders_);
  if (opt_post !== undefined) {
    queryParameters['post'] = opt_post;
  }

  if (opt_apply !== undefined) {
    queryParameters['apply'] = opt_apply;
  }

  if (opt_delete !== undefined) {
    queryParameters['delete'] = opt_delete;
  }

  if (opt_action !== undefined) {
    queryParameters['action'] = opt_action;
  }

  if (opt_location !== undefined) {
    queryParameters['$location'] = opt_location;
  }

  if (opt_propertylist !== undefined) {
    queryParameters['propertylist'] = opt_propertylist;
  }

  if (opt_comDayCqWcmScriptingBvpScriptEngines !== undefined) {
    queryParameters['com.day.cq.wcm.scripting.bvp.script.engines'] = opt_comDayCqWcmScriptingBvpScriptEngines;
  }

  /** @type {!Object} */
  var httpRequestParams = {
    method: 'POST',
    url: path,
    json: true,
            params: queryParameters,
    headers: headerParams
  };

  if (opt_extraHttpRequestParams) {
    httpRequestParams = angular.extend(httpRequestParams, opt_extraHttpRequestParams);
  }

  return (/** @type {?} */ (this.http_))(httpRequestParams);
}

/**
 * 
 * 
 * @param {!boolean=} opt_post 
 * @param {!boolean=} opt_apply 
 * @param {!boolean=} opt_delete 
 * @param {!string=} opt_action 
 * @param {!string=} opt_location 
 * @param {!Array<!string>=} opt_propertylist 
 * @param {!boolean=} opt_cqWcmUndoEnabled 
 * @param {!string=} opt_cqWcmUndoPath 
 * @param {!number=} opt_cqWcmUndoValidity 
 * @param {!number=} opt_cqWcmUndoSteps 
 * @param {!string=} opt_cqWcmUndoPersistence 
 * @param {!boolean=} opt_cqWcmUndoPersistenceMode 
 * @param {!string=} opt_cqWcmUndoMarkermode 
 * @param {!Array<!string>=} opt_cqWcmUndoWhitelist 
 * @param {!Array<!string>=} opt_cqWcmUndoBlacklist 
 * @param {!angular.$http.Config=} opt_extraHttpRequestParams Extra HTTP parameters to send.
 * @return {!angular.$q.Promise<!API.Client.comDayCqWcmUndoUndoConfigInfo>}
 */
API.Client.ConfigmgrApi.prototype.comDayCqWcmUndoUndoConfig = function(opt_post, opt_apply, opt_delete, opt_action, opt_location, opt_propertylist, opt_cqWcmUndoEnabled, opt_cqWcmUndoPath, opt_cqWcmUndoValidity, opt_cqWcmUndoSteps, opt_cqWcmUndoPersistence, opt_cqWcmUndoPersistenceMode, opt_cqWcmUndoMarkermode, opt_cqWcmUndoWhitelist, opt_cqWcmUndoBlacklist, opt_extraHttpRequestParams) {
  /** @const {string} */
  var path = this.basePath_ + '/system/console/configMgr/com.day.cq.wcm.undo.UndoConfig';

  /** @type {!Object} */
  var queryParameters = {};

  /** @type {!Object} */
  var headerParams = angular.extend({}, this.defaultHeaders_);
  if (opt_post !== undefined) {
    queryParameters['post'] = opt_post;
  }

  if (opt_apply !== undefined) {
    queryParameters['apply'] = opt_apply;
  }

  if (opt_delete !== undefined) {
    queryParameters['delete'] = opt_delete;
  }

  if (opt_action !== undefined) {
    queryParameters['action'] = opt_action;
  }

  if (opt_location !== undefined) {
    queryParameters['$location'] = opt_location;
  }

  if (opt_propertylist !== undefined) {
    queryParameters['propertylist'] = opt_propertylist;
  }

  if (opt_cqWcmUndoEnabled !== undefined) {
    queryParameters['cq.wcm.undo.enabled'] = opt_cqWcmUndoEnabled;
  }

  if (opt_cqWcmUndoPath !== undefined) {
    queryParameters['cq.wcm.undo.path'] = opt_cqWcmUndoPath;
  }

  if (opt_cqWcmUndoValidity !== undefined) {
    queryParameters['cq.wcm.undo.validity'] = opt_cqWcmUndoValidity;
  }

  if (opt_cqWcmUndoSteps !== undefined) {
    queryParameters['cq.wcm.undo.steps'] = opt_cqWcmUndoSteps;
  }

  if (opt_cqWcmUndoPersistence !== undefined) {
    queryParameters['cq.wcm.undo.persistence'] = opt_cqWcmUndoPersistence;
  }

  if (opt_cqWcmUndoPersistenceMode !== undefined) {
    queryParameters['cq.wcm.undo.persistence.mode'] = opt_cqWcmUndoPersistenceMode;
  }

  if (opt_cqWcmUndoMarkermode !== undefined) {
    queryParameters['cq.wcm.undo.markermode'] = opt_cqWcmUndoMarkermode;
  }

  if (opt_cqWcmUndoWhitelist !== undefined) {
    queryParameters['cq.wcm.undo.whitelist'] = opt_cqWcmUndoWhitelist;
  }

  if (opt_cqWcmUndoBlacklist !== undefined) {
    queryParameters['cq.wcm.undo.blacklist'] = opt_cqWcmUndoBlacklist;
  }

  /** @type {!Object} */
  var httpRequestParams = {
    method: 'POST',
    url: path,
    json: true,
            params: queryParameters,
    headers: headerParams
  };

  if (opt_extraHttpRequestParams) {
    httpRequestParams = angular.extend(httpRequestParams, opt_extraHttpRequestParams);
  }

  return (/** @type {?} */ (this.http_))(httpRequestParams);
}

/**
 * 
 * 
 * @param {!boolean=} opt_post 
 * @param {!boolean=} opt_apply 
 * @param {!boolean=} opt_delete 
 * @param {!string=} opt_action 
 * @param {!string=} opt_location 
 * @param {!Array<!string>=} opt_propertylist 
 * @param {!Array<!string>=} opt_flushAgents 
 * @param {!angular.$http.Config=} opt_extraHttpRequestParams Extra HTTP parameters to send.
 * @return {!angular.$q.Promise<!API.Client.comDayCqWcmWebservicesupportImplReplicationEventListenerInfo>}
 */
API.Client.ConfigmgrApi.prototype.comDayCqWcmWebservicesupportImplReplicationEventListener = function(opt_post, opt_apply, opt_delete, opt_action, opt_location, opt_propertylist, opt_flushAgents, opt_extraHttpRequestParams) {
  /** @const {string} */
  var path = this.basePath_ + '/system/console/configMgr/com.day.cq.wcm.webservicesupport.impl.ReplicationEventListener';

  /** @type {!Object} */
  var queryParameters = {};

  /** @type {!Object} */
  var headerParams = angular.extend({}, this.defaultHeaders_);
  if (opt_post !== undefined) {
    queryParameters['post'] = opt_post;
  }

  if (opt_apply !== undefined) {
    queryParameters['apply'] = opt_apply;
  }

  if (opt_delete !== undefined) {
    queryParameters['delete'] = opt_delete;
  }

  if (opt_action !== undefined) {
    queryParameters['action'] = opt_action;
  }

  if (opt_location !== undefined) {
    queryParameters['$location'] = opt_location;
  }

  if (opt_propertylist !== undefined) {
    queryParameters['propertylist'] = opt_propertylist;
  }

  if (opt_flushAgents !== undefined) {
    queryParameters['Flush agents'] = opt_flushAgents;
  }

  /** @type {!Object} */
  var httpRequestParams = {
    method: 'POST',
    url: path,
    json: true,
            params: queryParameters,
    headers: headerParams
  };

  if (opt_extraHttpRequestParams) {
    httpRequestParams = angular.extend(httpRequestParams, opt_extraHttpRequestParams);
  }

  return (/** @type {?} */ (this.http_))(httpRequestParams);
}

/**
 * 
 * 
 * @param {!boolean=} opt_post 
 * @param {!boolean=} opt_apply 
 * @param {!boolean=} opt_delete 
 * @param {!string=} opt_action 
 * @param {!string=} opt_location 
 * @param {!Array<!string>=} opt_propertylist 
 * @param {!string=} opt_eventFilter 
 * @param {!number=} opt_minThreadPoolSize 
 * @param {!number=} opt_maxThreadPoolSize 
 * @param {!boolean=} opt_cqWcmWorkflowTerminateOnActivate 
 * @param {!Array<!string>=} opt_cqWcmWorklfowTerminateExclusionList 
 * @param {!angular.$http.Config=} opt_extraHttpRequestParams Extra HTTP parameters to send.
 * @return {!angular.$q.Promise<!API.Client.comDayCqWcmWorkflowImplWcmWorkflowServiceImplInfo>}
 */
API.Client.ConfigmgrApi.prototype.comDayCqWcmWorkflowImplWcmWorkflowServiceImpl = function(opt_post, opt_apply, opt_delete, opt_action, opt_location, opt_propertylist, opt_eventFilter, opt_minThreadPoolSize, opt_maxThreadPoolSize, opt_cqWcmWorkflowTerminateOnActivate, opt_cqWcmWorklfowTerminateExclusionList, opt_extraHttpRequestParams) {
  /** @const {string} */
  var path = this.basePath_ + '/system/console/configMgr/com.day.cq.wcm.workflow.impl.WcmWorkflowServiceImpl';

  /** @type {!Object} */
  var queryParameters = {};

  /** @type {!Object} */
  var headerParams = angular.extend({}, this.defaultHeaders_);
  if (opt_post !== undefined) {
    queryParameters['post'] = opt_post;
  }

  if (opt_apply !== undefined) {
    queryParameters['apply'] = opt_apply;
  }

  if (opt_delete !== undefined) {
    queryParameters['delete'] = opt_delete;
  }

  if (opt_action !== undefined) {
    queryParameters['action'] = opt_action;
  }

  if (opt_location !== undefined) {
    queryParameters['$location'] = opt_location;
  }

  if (opt_propertylist !== undefined) {
    queryParameters['propertylist'] = opt_propertylist;
  }

  if (opt_eventFilter !== undefined) {
    queryParameters['event.filter'] = opt_eventFilter;
  }

  if (opt_minThreadPoolSize !== undefined) {
    queryParameters['minThreadPoolSize'] = opt_minThreadPoolSize;
  }

  if (opt_maxThreadPoolSize !== undefined) {
    queryParameters['maxThreadPoolSize'] = opt_maxThreadPoolSize;
  }

  if (opt_cqWcmWorkflowTerminateOnActivate !== undefined) {
    queryParameters['cq.wcm.workflow.terminate.on.activate'] = opt_cqWcmWorkflowTerminateOnActivate;
  }

  if (opt_cqWcmWorklfowTerminateExclusionList !== undefined) {
    queryParameters['cq.wcm.worklfow.terminate.exclusion.list'] = opt_cqWcmWorklfowTerminateExclusionList;
  }

  /** @type {!Object} */
  var httpRequestParams = {
    method: 'POST',
    url: path,
    json: true,
            params: queryParameters,
    headers: headerParams
  };

  if (opt_extraHttpRequestParams) {
    httpRequestParams = angular.extend(httpRequestParams, opt_extraHttpRequestParams);
  }

  return (/** @type {?} */ (this.http_))(httpRequestParams);
}

/**
 * 
 * 
 * @param {!boolean=} opt_post 
 * @param {!boolean=} opt_apply 
 * @param {!boolean=} opt_delete 
 * @param {!string=} opt_action 
 * @param {!string=} opt_location 
 * @param {!Array<!string>=} opt_propertylist 
 * @param {!Array<!string>=} opt_workflowpackageinfoproviderFilter 
 * @param {!string=} opt_workflowpackageinfoproviderFilterRootpath 
 * @param {!angular.$http.Config=} opt_extraHttpRequestParams Extra HTTP parameters to send.
 * @return {!angular.$q.Promise<!API.Client.comDayCqWcmWorkflowImplWorkflowPackageInfoProviderInfo>}
 */
API.Client.ConfigmgrApi.prototype.comDayCqWcmWorkflowImplWorkflowPackageInfoProvider = function(opt_post, opt_apply, opt_delete, opt_action, opt_location, opt_propertylist, opt_workflowpackageinfoproviderFilter, opt_workflowpackageinfoproviderFilterRootpath, opt_extraHttpRequestParams) {
  /** @const {string} */
  var path = this.basePath_ + '/system/console/configMgr/com.day.cq.wcm.workflow.impl.WorkflowPackageInfoProvider';

  /** @type {!Object} */
  var queryParameters = {};

  /** @type {!Object} */
  var headerParams = angular.extend({}, this.defaultHeaders_);
  if (opt_post !== undefined) {
    queryParameters['post'] = opt_post;
  }

  if (opt_apply !== undefined) {
    queryParameters['apply'] = opt_apply;
  }

  if (opt_delete !== undefined) {
    queryParameters['delete'] = opt_delete;
  }

  if (opt_action !== undefined) {
    queryParameters['action'] = opt_action;
  }

  if (opt_location !== undefined) {
    queryParameters['$location'] = opt_location;
  }

  if (opt_propertylist !== undefined) {
    queryParameters['propertylist'] = opt_propertylist;
  }

  if (opt_workflowpackageinfoproviderFilter !== undefined) {
    queryParameters['workflowpackageinfoprovider.filter'] = opt_workflowpackageinfoproviderFilter;
  }

  if (opt_workflowpackageinfoproviderFilterRootpath !== undefined) {
    queryParameters['workflowpackageinfoprovider.filter.rootpath'] = opt_workflowpackageinfoproviderFilterRootpath;
  }

  /** @type {!Object} */
  var httpRequestParams = {
    method: 'POST',
    url: path,
    json: true,
            params: queryParameters,
    headers: headerParams
  };

  if (opt_extraHttpRequestParams) {
    httpRequestParams = angular.extend(httpRequestParams, opt_extraHttpRequestParams);
  }

  return (/** @type {?} */ (this.http_))(httpRequestParams);
}

/**
 * 
 * 
 * @param {!boolean=} opt_post 
 * @param {!boolean=} opt_apply 
 * @param {!boolean=} opt_delete 
 * @param {!string=} opt_action 
 * @param {!string=} opt_location 
 * @param {!Array<!string>=} opt_propertylist 
 * @param {!string=} opt_htmllibmanagerClientmanager 
 * @param {!boolean=} opt_htmllibmanagerDebug 
 * @param {!boolean=} opt_htmllibmanagerDebugConsole 
 * @param {!string=} opt_htmllibmanagerDebugInitJs 
 * @param {!string=} opt_htmllibmanagerDefaultthemename 
 * @param {!string=} opt_htmllibmanagerDefaultuserthemename 
 * @param {!string=} opt_htmllibmanagerFirebuglitePath 
 * @param {!boolean=} opt_htmllibmanagerForceCQUrlInfo 
 * @param {!boolean=} opt_htmllibmanagerGzip 
 * @param {!number=} opt_htmllibmanagerMaxage 
 * @param {!number=} opt_htmllibmanagerMaxDataUriSize 
 * @param {!boolean=} opt_htmllibmanagerMinify 
 * @param {!Array<!string>=} opt_htmllibmanagerPathList 
 * @param {!boolean=} opt_htmllibmanagerTiming 
 * @param {!angular.$http.Config=} opt_extraHttpRequestParams Extra HTTP parameters to send.
 * @return {!angular.$q.Promise<!API.Client.comDayCqWidgetImplHtmlLibraryManagerImplInfo>}
 */
API.Client.ConfigmgrApi.prototype.comDayCqWidgetImplHtmlLibraryManagerImpl = function(opt_post, opt_apply, opt_delete, opt_action, opt_location, opt_propertylist, opt_htmllibmanagerClientmanager, opt_htmllibmanagerDebug, opt_htmllibmanagerDebugConsole, opt_htmllibmanagerDebugInitJs, opt_htmllibmanagerDefaultthemename, opt_htmllibmanagerDefaultuserthemename, opt_htmllibmanagerFirebuglitePath, opt_htmllibmanagerForceCQUrlInfo, opt_htmllibmanagerGzip, opt_htmllibmanagerMaxage, opt_htmllibmanagerMaxDataUriSize, opt_htmllibmanagerMinify, opt_htmllibmanagerPathList, opt_htmllibmanagerTiming, opt_extraHttpRequestParams) {
  /** @const {string} */
  var path = this.basePath_ + '/system/console/configMgr/com.day.cq.widget.impl.HtmlLibraryManagerImpl';

  /** @type {!Object} */
  var queryParameters = {};

  /** @type {!Object} */
  var headerParams = angular.extend({}, this.defaultHeaders_);
  if (opt_post !== undefined) {
    queryParameters['post'] = opt_post;
  }

  if (opt_apply !== undefined) {
    queryParameters['apply'] = opt_apply;
  }

  if (opt_delete !== undefined) {
    queryParameters['delete'] = opt_delete;
  }

  if (opt_action !== undefined) {
    queryParameters['action'] = opt_action;
  }

  if (opt_location !== undefined) {
    queryParameters['$location'] = opt_location;
  }

  if (opt_propertylist !== undefined) {
    queryParameters['propertylist'] = opt_propertylist;
  }

  if (opt_htmllibmanagerClientmanager !== undefined) {
    queryParameters['htmllibmanager.clientmanager'] = opt_htmllibmanagerClientmanager;
  }

  if (opt_htmllibmanagerDebug !== undefined) {
    queryParameters['htmllibmanager.debug'] = opt_htmllibmanagerDebug;
  }

  if (opt_htmllibmanagerDebugConsole !== undefined) {
    queryParameters['htmllibmanager.debug.console'] = opt_htmllibmanagerDebugConsole;
  }

  if (opt_htmllibmanagerDebugInitJs !== undefined) {
    queryParameters['htmllibmanager.debug.init.js'] = opt_htmllibmanagerDebugInitJs;
  }

  if (opt_htmllibmanagerDefaultthemename !== undefined) {
    queryParameters['htmllibmanager.defaultthemename'] = opt_htmllibmanagerDefaultthemename;
  }

  if (opt_htmllibmanagerDefaultuserthemename !== undefined) {
    queryParameters['htmllibmanager.defaultuserthemename'] = opt_htmllibmanagerDefaultuserthemename;
  }

  if (opt_htmllibmanagerFirebuglitePath !== undefined) {
    queryParameters['htmllibmanager.firebuglite.path'] = opt_htmllibmanagerFirebuglitePath;
  }

  if (opt_htmllibmanagerForceCQUrlInfo !== undefined) {
    queryParameters['htmllibmanager.forceCQUrlInfo'] = opt_htmllibmanagerForceCQUrlInfo;
  }

  if (opt_htmllibmanagerGzip !== undefined) {
    queryParameters['htmllibmanager.gzip'] = opt_htmllibmanagerGzip;
  }

  if (opt_htmllibmanagerMaxage !== undefined) {
    queryParameters['htmllibmanager.maxage'] = opt_htmllibmanagerMaxage;
  }

  if (opt_htmllibmanagerMaxDataUriSize !== undefined) {
    queryParameters['htmllibmanager.maxDataUriSize'] = opt_htmllibmanagerMaxDataUriSize;
  }

  if (opt_htmllibmanagerMinify !== undefined) {
    queryParameters['htmllibmanager.minify'] = opt_htmllibmanagerMinify;
  }

  if (opt_htmllibmanagerPathList !== undefined) {
    queryParameters['htmllibmanager.path.list'] = opt_htmllibmanagerPathList;
  }

  if (opt_htmllibmanagerTiming !== undefined) {
    queryParameters['htmllibmanager.timing'] = opt_htmllibmanagerTiming;
  }

  /** @type {!Object} */
  var httpRequestParams = {
    method: 'POST',
    url: path,
    json: true,
            params: queryParameters,
    headers: headerParams
  };

  if (opt_extraHttpRequestParams) {
    httpRequestParams = angular.extend(httpRequestParams, opt_extraHttpRequestParams);
  }

  return (/** @type {?} */ (this.http_))(httpRequestParams);
}

/**
 * 
 * 
 * @param {!boolean=} opt_post 
 * @param {!boolean=} opt_apply 
 * @param {!boolean=} opt_delete 
 * @param {!string=} opt_action 
 * @param {!string=} opt_location 
 * @param {!Array<!string>=} opt_propertylist 
 * @param {!Array<!string>=} opt_extendableWidgets 
 * @param {!boolean=} opt_widgetextensionproviderDebug 
 * @param {!angular.$http.Config=} opt_extraHttpRequestParams Extra HTTP parameters to send.
 * @return {!angular.$q.Promise<!API.Client.comDayCqWidgetImplWidgetExtensionProviderImplInfo>}
 */
API.Client.ConfigmgrApi.prototype.comDayCqWidgetImplWidgetExtensionProviderImpl = function(opt_post, opt_apply, opt_delete, opt_action, opt_location, opt_propertylist, opt_extendableWidgets, opt_widgetextensionproviderDebug, opt_extraHttpRequestParams) {
  /** @const {string} */
  var path = this.basePath_ + '/system/console/configMgr/com.day.cq.widget.impl.WidgetExtensionProviderImpl';

  /** @type {!Object} */
  var queryParameters = {};

  /** @type {!Object} */
  var headerParams = angular.extend({}, this.defaultHeaders_);
  if (opt_post !== undefined) {
    queryParameters['post'] = opt_post;
  }

  if (opt_apply !== undefined) {
    queryParameters['apply'] = opt_apply;
  }

  if (opt_delete !== undefined) {
    queryParameters['delete'] = opt_delete;
  }

  if (opt_action !== undefined) {
    queryParameters['action'] = opt_action;
  }

  if (opt_location !== undefined) {
    queryParameters['$location'] = opt_location;
  }

  if (opt_propertylist !== undefined) {
    queryParameters['propertylist'] = opt_propertylist;
  }

  if (opt_extendableWidgets !== undefined) {
    queryParameters['extendable.widgets'] = opt_extendableWidgets;
  }

  if (opt_widgetextensionproviderDebug !== undefined) {
    queryParameters['widgetextensionprovider.debug'] = opt_widgetextensionproviderDebug;
  }

  /** @type {!Object} */
  var httpRequestParams = {
    method: 'POST',
    url: path,
    json: true,
            params: queryParameters,
    headers: headerParams
  };

  if (opt_extraHttpRequestParams) {
    httpRequestParams = angular.extend(httpRequestParams, opt_extraHttpRequestParams);
  }

  return (/** @type {?} */ (this.http_))(httpRequestParams);
}

/**
 * 
 * 
 * @param {!boolean=} opt_post 
 * @param {!boolean=} opt_apply 
 * @param {!boolean=} opt_delete 
 * @param {!string=} opt_action 
 * @param {!string=} opt_location 
 * @param {!Array<!string>=} opt_propertylist 
 * @param {!string=} opt_fromAddress 
 * @param {!string=} opt_hostPrefix 
 * @param {!boolean=} opt_notifyOnabort 
 * @param {!boolean=} opt_notifyOncomplete 
 * @param {!boolean=} opt_notifyOncontainercomplete 
 * @param {!boolean=} opt_notifyUseronly 
 * @param {!angular.$http.Config=} opt_extraHttpRequestParams Extra HTTP parameters to send.
 * @return {!angular.$q.Promise<!API.Client.comDayCqWorkflowImplEmailEMailNotificationServiceInfo>}
 */
API.Client.ConfigmgrApi.prototype.comDayCqWorkflowImplEmailEMailNotificationService = function(opt_post, opt_apply, opt_delete, opt_action, opt_location, opt_propertylist, opt_fromAddress, opt_hostPrefix, opt_notifyOnabort, opt_notifyOncomplete, opt_notifyOncontainercomplete, opt_notifyUseronly, opt_extraHttpRequestParams) {
  /** @const {string} */
  var path = this.basePath_ + '/system/console/configMgr/com.day.cq.workflow.impl.email.EMailNotificationService';

  /** @type {!Object} */
  var queryParameters = {};

  /** @type {!Object} */
  var headerParams = angular.extend({}, this.defaultHeaders_);
  if (opt_post !== undefined) {
    queryParameters['post'] = opt_post;
  }

  if (opt_apply !== undefined) {
    queryParameters['apply'] = opt_apply;
  }

  if (opt_delete !== undefined) {
    queryParameters['delete'] = opt_delete;
  }

  if (opt_action !== undefined) {
    queryParameters['action'] = opt_action;
  }

  if (opt_location !== undefined) {
    queryParameters['$location'] = opt_location;
  }

  if (opt_propertylist !== undefined) {
    queryParameters['propertylist'] = opt_propertylist;
  }

  if (opt_fromAddress !== undefined) {
    queryParameters['from.address'] = opt_fromAddress;
  }

  if (opt_hostPrefix !== undefined) {
    queryParameters['host.prefix'] = opt_hostPrefix;
  }

  if (opt_notifyOnabort !== undefined) {
    queryParameters['notify.onabort'] = opt_notifyOnabort;
  }

  if (opt_notifyOncomplete !== undefined) {
    queryParameters['notify.oncomplete'] = opt_notifyOncomplete;
  }

  if (opt_notifyOncontainercomplete !== undefined) {
    queryParameters['notify.oncontainercomplete'] = opt_notifyOncontainercomplete;
  }

  if (opt_notifyUseronly !== undefined) {
    queryParameters['notify.useronly'] = opt_notifyUseronly;
  }

  /** @type {!Object} */
  var httpRequestParams = {
    method: 'POST',
    url: path,
    json: true,
            params: queryParameters,
    headers: headerParams
  };

  if (opt_extraHttpRequestParams) {
    httpRequestParams = angular.extend(httpRequestParams, opt_extraHttpRequestParams);
  }

  return (/** @type {?} */ (this.http_))(httpRequestParams);
}

/**
 * 
 * 
 * @param {!boolean=} opt_post 
 * @param {!boolean=} opt_apply 
 * @param {!boolean=} opt_delete 
 * @param {!string=} opt_action 
 * @param {!string=} opt_location 
 * @param {!Array<!string>=} opt_propertylist 
 * @param {!boolean=} opt_notifyOnupdate 
 * @param {!boolean=} opt_notifyOncomplete 
 * @param {!angular.$http.Config=} opt_extraHttpRequestParams Extra HTTP parameters to send.
 * @return {!angular.$q.Promise<!API.Client.comDayCqWorkflowImplEmailTaskEMailNotificationServiceInfo>}
 */
API.Client.ConfigmgrApi.prototype.comDayCqWorkflowImplEmailTaskEMailNotificationService = function(opt_post, opt_apply, opt_delete, opt_action, opt_location, opt_propertylist, opt_notifyOnupdate, opt_notifyOncomplete, opt_extraHttpRequestParams) {
  /** @const {string} */
  var path = this.basePath_ + '/system/console/configMgr/com.day.cq.workflow.impl.email.TaskEMailNotificationService';

  /** @type {!Object} */
  var queryParameters = {};

  /** @type {!Object} */
  var headerParams = angular.extend({}, this.defaultHeaders_);
  if (opt_post !== undefined) {
    queryParameters['post'] = opt_post;
  }

  if (opt_apply !== undefined) {
    queryParameters['apply'] = opt_apply;
  }

  if (opt_delete !== undefined) {
    queryParameters['delete'] = opt_delete;
  }

  if (opt_action !== undefined) {
    queryParameters['action'] = opt_action;
  }

  if (opt_location !== undefined) {
    queryParameters['$location'] = opt_location;
  }

  if (opt_propertylist !== undefined) {
    queryParameters['propertylist'] = opt_propertylist;
  }

  if (opt_notifyOnupdate !== undefined) {
    queryParameters['notify.onupdate'] = opt_notifyOnupdate;
  }

  if (opt_notifyOncomplete !== undefined) {
    queryParameters['notify.oncomplete'] = opt_notifyOncomplete;
  }

  /** @type {!Object} */
  var httpRequestParams = {
    method: 'POST',
    url: path,
    json: true,
            params: queryParameters,
    headers: headerParams
  };

  if (opt_extraHttpRequestParams) {
    httpRequestParams = angular.extend(httpRequestParams, opt_extraHttpRequestParams);
  }

  return (/** @type {?} */ (this.http_))(httpRequestParams);
}

/**
 * 
 * 
 * @param {!boolean=} opt_post 
 * @param {!boolean=} opt_apply 
 * @param {!boolean=} opt_delete 
 * @param {!string=} opt_action 
 * @param {!string=} opt_location 
 * @param {!Array<!string>=} opt_propertylist 
 * @param {!string=} opt_path 
 * @param {!string=} opt_tokenRequiredAttr 
 * @param {!string=} opt_tokenAlternateUrl 
 * @param {!boolean=} opt_tokenEncapsulated 
 * @param {!Array<!string>=} opt_skipTokenRefresh 
 * @param {!angular.$http.Config=} opt_extraHttpRequestParams Extra HTTP parameters to send.
 * @return {!angular.$q.Promise<!API.Client.comDayCrxSecurityTokenImplImplTokenAuthenticationHandlerInfo>}
 */
API.Client.ConfigmgrApi.prototype.comDayCrxSecurityTokenImplImplTokenAuthenticationHandler = function(opt_post, opt_apply, opt_delete, opt_action, opt_location, opt_propertylist, opt_path, opt_tokenRequiredAttr, opt_tokenAlternateUrl, opt_tokenEncapsulated, opt_skipTokenRefresh, opt_extraHttpRequestParams) {
  /** @const {string} */
  var path = this.basePath_ + '/system/console/configMgr/com.day.crx.security.token.impl.impl.TokenAuthenticationHandler';

  /** @type {!Object} */
  var queryParameters = {};

  /** @type {!Object} */
  var headerParams = angular.extend({}, this.defaultHeaders_);
  if (opt_post !== undefined) {
    queryParameters['post'] = opt_post;
  }

  if (opt_apply !== undefined) {
    queryParameters['apply'] = opt_apply;
  }

  if (opt_delete !== undefined) {
    queryParameters['delete'] = opt_delete;
  }

  if (opt_action !== undefined) {
    queryParameters['action'] = opt_action;
  }

  if (opt_location !== undefined) {
    queryParameters['$location'] = opt_location;
  }

  if (opt_propertylist !== undefined) {
    queryParameters['propertylist'] = opt_propertylist;
  }

  if (opt_path !== undefined) {
    queryParameters['path'] = opt_path;
  }

  if (opt_tokenRequiredAttr !== undefined) {
    queryParameters['token.required.attr'] = opt_tokenRequiredAttr;
  }

  if (opt_tokenAlternateUrl !== undefined) {
    queryParameters['token.alternate.url'] = opt_tokenAlternateUrl;
  }

  if (opt_tokenEncapsulated !== undefined) {
    queryParameters['token.encapsulated'] = opt_tokenEncapsulated;
  }

  if (opt_skipTokenRefresh !== undefined) {
    queryParameters['skip.token.refresh'] = opt_skipTokenRefresh;
  }

  /** @type {!Object} */
  var httpRequestParams = {
    method: 'POST',
    url: path,
    json: true,
            params: queryParameters,
    headers: headerParams
  };

  if (opt_extraHttpRequestParams) {
    httpRequestParams = angular.extend(httpRequestParams, opt_extraHttpRequestParams);
  }

  return (/** @type {?} */ (this.http_))(httpRequestParams);
}

/**
 * 
 * 
 * @param {!boolean=} opt_post 
 * @param {!boolean=} opt_apply 
 * @param {!boolean=} opt_delete 
 * @param {!string=} opt_action 
 * @param {!string=} opt_location 
 * @param {!Array<!string>=} opt_propertylist 
 * @param {!boolean=} opt_enableTokenCleanupTask 
 * @param {!string=} opt_schedulerExpression 
 * @param {!number=} opt_batchSize 
 * @param {!angular.$http.Config=} opt_extraHttpRequestParams Extra HTTP parameters to send.
 * @return {!angular.$q.Promise<!API.Client.comDayCrxSecurityTokenImplTokenCleanupTaskInfo>}
 */
API.Client.ConfigmgrApi.prototype.comDayCrxSecurityTokenImplTokenCleanupTask = function(opt_post, opt_apply, opt_delete, opt_action, opt_location, opt_propertylist, opt_enableTokenCleanupTask, opt_schedulerExpression, opt_batchSize, opt_extraHttpRequestParams) {
  /** @const {string} */
  var path = this.basePath_ + '/system/console/configMgr/com.day.crx.security.token.impl.TokenCleanupTask';

  /** @type {!Object} */
  var queryParameters = {};

  /** @type {!Object} */
  var headerParams = angular.extend({}, this.defaultHeaders_);
  if (opt_post !== undefined) {
    queryParameters['post'] = opt_post;
  }

  if (opt_apply !== undefined) {
    queryParameters['apply'] = opt_apply;
  }

  if (opt_delete !== undefined) {
    queryParameters['delete'] = opt_delete;
  }

  if (opt_action !== undefined) {
    queryParameters['action'] = opt_action;
  }

  if (opt_location !== undefined) {
    queryParameters['$location'] = opt_location;
  }

  if (opt_propertylist !== undefined) {
    queryParameters['propertylist'] = opt_propertylist;
  }

  if (opt_enableTokenCleanupTask !== undefined) {
    queryParameters['enable.token.cleanup.task'] = opt_enableTokenCleanupTask;
  }

  if (opt_schedulerExpression !== undefined) {
    queryParameters['scheduler.expression'] = opt_schedulerExpression;
  }

  if (opt_batchSize !== undefined) {
    queryParameters['batch.size'] = opt_batchSize;
  }

  /** @type {!Object} */
  var httpRequestParams = {
    method: 'POST',
    url: path,
    json: true,
            params: queryParameters,
    headers: headerParams
  };

  if (opt_extraHttpRequestParams) {
    httpRequestParams = angular.extend(httpRequestParams, opt_extraHttpRequestParams);
  }

  return (/** @type {?} */ (this.http_))(httpRequestParams);
}

/**
 * 
 * 
 * @param {!boolean=} opt_post 
 * @param {!boolean=} opt_apply 
 * @param {!boolean=} opt_delete 
 * @param {!string=} opt_action 
 * @param {!string=} opt_location 
 * @param {!Array<!string>=} opt_propertylist 
 * @param {!Array<!string>=} opt_supportedLocales 
 * @param {!Array<!string>=} opt_localizableProperties 
 * @param {!angular.$http.Config=} opt_extraHttpRequestParams Extra HTTP parameters to send.
 * @return {!angular.$q.Promise<!API.Client.guideLocalizationServiceInfo>}
 */
API.Client.ConfigmgrApi.prototype.guideLocalizationService = function(opt_post, opt_apply, opt_delete, opt_action, opt_location, opt_propertylist, opt_supportedLocales, opt_localizableProperties, opt_extraHttpRequestParams) {
  /** @const {string} */
  var path = this.basePath_ + '/system/console/configMgr/Guide Localization Service';

  /** @type {!Object} */
  var queryParameters = {};

  /** @type {!Object} */
  var headerParams = angular.extend({}, this.defaultHeaders_);
  if (opt_post !== undefined) {
    queryParameters['post'] = opt_post;
  }

  if (opt_apply !== undefined) {
    queryParameters['apply'] = opt_apply;
  }

  if (opt_delete !== undefined) {
    queryParameters['delete'] = opt_delete;
  }

  if (opt_action !== undefined) {
    queryParameters['action'] = opt_action;
  }

  if (opt_location !== undefined) {
    queryParameters['$location'] = opt_location;
  }

  if (opt_propertylist !== undefined) {
    queryParameters['propertylist'] = opt_propertylist;
  }

  if (opt_supportedLocales !== undefined) {
    queryParameters['supportedLocales'] = opt_supportedLocales;
  }

  if (opt_localizableProperties !== undefined) {
    queryParameters['Localizable Properties'] = opt_localizableProperties;
  }

  /** @type {!Object} */
  var httpRequestParams = {
    method: 'POST',
    url: path,
    json: true,
            params: queryParameters,
    headers: headerParams
  };

  if (opt_extraHttpRequestParams) {
    httpRequestParams = angular.extend(httpRequestParams, opt_extraHttpRequestParams);
  }

  return (/** @type {?} */ (this.http_))(httpRequestParams);
}

/**
 * 
 * 
 * @param {!boolean=} opt_post 
 * @param {!boolean=} opt_apply 
 * @param {!boolean=} opt_delete 
 * @param {!string=} opt_action 
 * @param {!string=} opt_location 
 * @param {!Array<!string>=} opt_propertylist 
 * @param {!number=} opt_priority 
 * @param {!angular.$http.Config=} opt_extraHttpRequestParams Extra HTTP parameters to send.
 * @return {!angular.$q.Promise<!API.Client.MessagingUserComponentFactoryInfo>}
 */
API.Client.ConfigmgrApi.prototype.messagingUserComponentFactory = function(opt_post, opt_apply, opt_delete, opt_action, opt_location, opt_propertylist, opt_priority, opt_extraHttpRequestParams) {
  /** @const {string} */
  var path = this.basePath_ + '/system/console/configMgr/MessagingUserComponentFactory';

  /** @type {!Object} */
  var queryParameters = {};

  /** @type {!Object} */
  var headerParams = angular.extend({}, this.defaultHeaders_);
  if (opt_post !== undefined) {
    queryParameters['post'] = opt_post;
  }

  if (opt_apply !== undefined) {
    queryParameters['apply'] = opt_apply;
  }

  if (opt_delete !== undefined) {
    queryParameters['delete'] = opt_delete;
  }

  if (opt_action !== undefined) {
    queryParameters['action'] = opt_action;
  }

  if (opt_location !== undefined) {
    queryParameters['$location'] = opt_location;
  }

  if (opt_propertylist !== undefined) {
    queryParameters['propertylist'] = opt_propertylist;
  }

  if (opt_priority !== undefined) {
    queryParameters['priority'] = opt_priority;
  }

  /** @type {!Object} */
  var httpRequestParams = {
    method: 'POST',
    url: path,
    json: true,
            params: queryParameters,
    headers: headerParams
  };

  if (opt_extraHttpRequestParams) {
    httpRequestParams = angular.extend(httpRequestParams, opt_extraHttpRequestParams);
  }

  return (/** @type {?} */ (this.http_))(httpRequestParams);
}

/**
 * 
 * 
 * @param {!boolean=} opt_post 
 * @param {!boolean=} opt_apply 
 * @param {!boolean=} opt_delete 
 * @param {!string=} opt_action 
 * @param {!string=} opt_location 
 * @param {!Array<!string>=} opt_propertylist 
 * @param {!boolean=} opt_attributeChangeNotificationEnabled 
 * @param {!angular.$http.Config=} opt_extraHttpRequestParams Extra HTTP parameters to send.
 * @return {!angular.$q.Promise<!API.Client.orgApacheAriesJmxFrameworkStateConfigInfo>}
 */
API.Client.ConfigmgrApi.prototype.orgApacheAriesJmxFrameworkStateConfig = function(opt_post, opt_apply, opt_delete, opt_action, opt_location, opt_propertylist, opt_attributeChangeNotificationEnabled, opt_extraHttpRequestParams) {
  /** @const {string} */
  var path = this.basePath_ + '/system/console/configMgr/org.apache.aries.jmx.framework.StateConfig';

  /** @type {!Object} */
  var queryParameters = {};

  /** @type {!Object} */
  var headerParams = angular.extend({}, this.defaultHeaders_);
  if (opt_post !== undefined) {
    queryParameters['post'] = opt_post;
  }

  if (opt_apply !== undefined) {
    queryParameters['apply'] = opt_apply;
  }

  if (opt_delete !== undefined) {
    queryParameters['delete'] = opt_delete;
  }

  if (opt_action !== undefined) {
    queryParameters['action'] = opt_action;
  }

  if (opt_location !== undefined) {
    queryParameters['$location'] = opt_location;
  }

  if (opt_propertylist !== undefined) {
    queryParameters['propertylist'] = opt_propertylist;
  }

  if (opt_attributeChangeNotificationEnabled !== undefined) {
    queryParameters['attributeChangeNotificationEnabled'] = opt_attributeChangeNotificationEnabled;
  }

  /** @type {!Object} */
  var httpRequestParams = {
    method: 'POST',
    url: path,
    json: true,
            params: queryParameters,
    headers: headerParams
  };

  if (opt_extraHttpRequestParams) {
    httpRequestParams = angular.extend(httpRequestParams, opt_extraHttpRequestParams);
  }

  return (/** @type {?} */ (this.http_))(httpRequestParams);
}

/**
 * 
 * 
 * @param {!boolean=} opt_post 
 * @param {!boolean=} opt_apply 
 * @param {!boolean=} opt_delete 
 * @param {!string=} opt_action 
 * @param {!string=} opt_location 
 * @param {!Array<!string>=} opt_propertylist 
 * @param {!number=} opt_orgApacheFelixEventadminThreadPoolSize 
 * @param {!number=} opt_orgApacheFelixEventadminAsyncToSyncThreadRatio 
 * @param {!number=} opt_orgApacheFelixEventadminTimeout 
 * @param {!boolean=} opt_orgApacheFelixEventadminRequireTopic 
 * @param {!Array<!string>=} opt_orgApacheFelixEventadminIgnoreTimeout 
 * @param {!Array<!string>=} opt_orgApacheFelixEventadminIgnoreTopic 
 * @param {!angular.$http.Config=} opt_extraHttpRequestParams Extra HTTP parameters to send.
 * @return {!angular.$q.Promise<!API.Client.orgApacheFelixEventadminImplEventAdminInfo>}
 */
API.Client.ConfigmgrApi.prototype.orgApacheFelixEventadminImplEventAdmin = function(opt_post, opt_apply, opt_delete, opt_action, opt_location, opt_propertylist, opt_orgApacheFelixEventadminThreadPoolSize, opt_orgApacheFelixEventadminAsyncToSyncThreadRatio, opt_orgApacheFelixEventadminTimeout, opt_orgApacheFelixEventadminRequireTopic, opt_orgApacheFelixEventadminIgnoreTimeout, opt_orgApacheFelixEventadminIgnoreTopic, opt_extraHttpRequestParams) {
  /** @const {string} */
  var path = this.basePath_ + '/system/console/configMgr/org.apache.felix.eventadmin.impl.EventAdmin';

  /** @type {!Object} */
  var queryParameters = {};

  /** @type {!Object} */
  var headerParams = angular.extend({}, this.defaultHeaders_);
  if (opt_post !== undefined) {
    queryParameters['post'] = opt_post;
  }

  if (opt_apply !== undefined) {
    queryParameters['apply'] = opt_apply;
  }

  if (opt_delete !== undefined) {
    queryParameters['delete'] = opt_delete;
  }

  if (opt_action !== undefined) {
    queryParameters['action'] = opt_action;
  }

  if (opt_location !== undefined) {
    queryParameters['$location'] = opt_location;
  }

  if (opt_propertylist !== undefined) {
    queryParameters['propertylist'] = opt_propertylist;
  }

  if (opt_orgApacheFelixEventadminThreadPoolSize !== undefined) {
    queryParameters['org.apache.felix.eventadmin.ThreadPoolSize'] = opt_orgApacheFelixEventadminThreadPoolSize;
  }

  if (opt_orgApacheFelixEventadminAsyncToSyncThreadRatio !== undefined) {
    queryParameters['org.apache.felix.eventadmin.AsyncToSyncThreadRatio'] = opt_orgApacheFelixEventadminAsyncToSyncThreadRatio;
  }

  if (opt_orgApacheFelixEventadminTimeout !== undefined) {
    queryParameters['org.apache.felix.eventadmin.Timeout'] = opt_orgApacheFelixEventadminTimeout;
  }

  if (opt_orgApacheFelixEventadminRequireTopic !== undefined) {
    queryParameters['org.apache.felix.eventadmin.RequireTopic'] = opt_orgApacheFelixEventadminRequireTopic;
  }

  if (opt_orgApacheFelixEventadminIgnoreTimeout !== undefined) {
    queryParameters['org.apache.felix.eventadmin.IgnoreTimeout'] = opt_orgApacheFelixEventadminIgnoreTimeout;
  }

  if (opt_orgApacheFelixEventadminIgnoreTopic !== undefined) {
    queryParameters['org.apache.felix.eventadmin.IgnoreTopic'] = opt_orgApacheFelixEventadminIgnoreTopic;
  }

  /** @type {!Object} */
  var httpRequestParams = {
    method: 'POST',
    url: path,
    json: true,
            params: queryParameters,
    headers: headerParams
  };

  if (opt_extraHttpRequestParams) {
    httpRequestParams = angular.extend(httpRequestParams, opt_extraHttpRequestParams);
  }

  return (/** @type {?} */ (this.http_))(httpRequestParams);
}

/**
 * 
 * 
 * @param {!boolean=} opt_post 
 * @param {!boolean=} opt_apply 
 * @param {!boolean=} opt_delete 
 * @param {!string=} opt_action 
 * @param {!string=} opt_location 
 * @param {!Array<!string>=} opt_propertylist 
 * @param {!string=} opt_orgApacheFelixHttpHost 
 * @param {!boolean=} opt_orgApacheFelixHttpEnable 
 * @param {!number=} opt_orgOsgiServiceHttpPort 
 * @param {!number=} opt_orgApacheFelixHttpTimeout 
 * @param {!boolean=} opt_orgApacheFelixHttpsEnable 
 * @param {!number=} opt_orgOsgiServiceHttpPortSecure 
 * @param {!string=} opt_orgApacheFelixHttpsKeystore 
 * @param {!string=} opt_orgApacheFelixHttpsKeystorePassword 
 * @param {!string=} opt_orgApacheFelixHttpsKeystoreKeyPassword 
 * @param {!string=} opt_orgApacheFelixHttpsTruststore 
 * @param {!string=} opt_orgApacheFelixHttpsTruststorePassword 
 * @param {!string=} opt_orgApacheFelixHttpsClientcertificate 
 * @param {!string=} opt_orgApacheFelixHttpContextPath 
 * @param {!boolean=} opt_orgApacheFelixHttpMbeans 
 * @param {!number=} opt_orgApacheFelixHttpSessionTimeout 
 * @param {!number=} opt_orgApacheFelixHttpJettyThreadpoolMax 
 * @param {!number=} opt_orgApacheFelixHttpJettyAcceptors 
 * @param {!number=} opt_orgApacheFelixHttpJettySelectors 
 * @param {!number=} opt_orgApacheFelixHttpJettyHeaderBufferSize 
 * @param {!number=} opt_orgApacheFelixHttpJettyRequestBufferSize 
 * @param {!number=} opt_orgApacheFelixHttpJettyResponseBufferSize 
 * @param {!number=} opt_orgApacheFelixHttpJettyMaxFormSize 
 * @param {!Array<!string>=} opt_orgApacheFelixHttpPathExclusions 
 * @param {!Array<!string>=} opt_orgApacheFelixHttpsJettyCiphersuitesExcluded 
 * @param {!Array<!string>=} opt_orgApacheFelixHttpsJettyCiphersuitesIncluded 
 * @param {!boolean=} opt_orgApacheFelixHttpJettySendServerHeader 
 * @param {!Array<!string>=} opt_orgApacheFelixHttpsJettyProtocolsIncluded 
 * @param {!Array<!string>=} opt_orgApacheFelixHttpsJettyProtocolsExcluded 
 * @param {!boolean=} opt_orgApacheFelixProxyLoadBalancerConnectionEnable 
 * @param {!boolean=} opt_orgApacheFelixHttpsJettyRenegotiateAllowed 
 * @param {!boolean=} opt_orgApacheFelixHttpsJettySessionCookieHttpOnly 
 * @param {!boolean=} opt_orgApacheFelixHttpsJettySessionCookieSecure 
 * @param {!string=} opt_orgEclipseJettyServletSessionIdPathParameterName 
 * @param {!boolean=} opt_orgEclipseJettyServletCheckingRemoteSessionIdEncoding 
 * @param {!string=} opt_orgEclipseJettyServletSessionCookie 
 * @param {!string=} opt_orgEclipseJettyServletSessionDomain 
 * @param {!string=} opt_orgEclipseJettyServletSessionPath 
 * @param {!number=} opt_orgEclipseJettyServletMaxAge 
 * @param {!string=} opt_orgApacheFelixHttpName 
 * @param {!boolean=} opt_orgApacheFelixJettyGziphandlerEnable 
 * @param {!number=} opt_orgApacheFelixJettyGzipMinGzipSize 
 * @param {!number=} opt_orgApacheFelixJettyGzipCompressionLevel 
 * @param {!number=} opt_orgApacheFelixJettyGzipInflateBufferSize 
 * @param {!boolean=} opt_orgApacheFelixJettyGzipSyncFlush 
 * @param {!Array<!string>=} opt_orgApacheFelixJettyGzipExcludedUserAgents 
 * @param {!Array<!string>=} opt_orgApacheFelixJettyGzipIncludedMethods 
 * @param {!Array<!string>=} opt_orgApacheFelixJettyGzipExcludedMethods 
 * @param {!Array<!string>=} opt_orgApacheFelixJettyGzipIncludedPaths 
 * @param {!Array<!string>=} opt_orgApacheFelixJettyGzipExcludedPaths 
 * @param {!Array<!string>=} opt_orgApacheFelixJettyGzipIncludedMimeTypes 
 * @param {!Array<!string>=} opt_orgApacheFelixJettyGzipExcludedMimeTypes 
 * @param {!boolean=} opt_orgApacheFelixHttpSessionInvalidate 
 * @param {!boolean=} opt_orgApacheFelixHttpSessionUniqueid 
 * @param {!angular.$http.Config=} opt_extraHttpRequestParams Extra HTTP parameters to send.
 * @return {!angular.$q.Promise<!API.Client.orgApacheFelixHttpInfo>}
 */
API.Client.ConfigmgrApi.prototype.orgApacheFelixHttp = function(opt_post, opt_apply, opt_delete, opt_action, opt_location, opt_propertylist, opt_orgApacheFelixHttpHost, opt_orgApacheFelixHttpEnable, opt_orgOsgiServiceHttpPort, opt_orgApacheFelixHttpTimeout, opt_orgApacheFelixHttpsEnable, opt_orgOsgiServiceHttpPortSecure, opt_orgApacheFelixHttpsKeystore, opt_orgApacheFelixHttpsKeystorePassword, opt_orgApacheFelixHttpsKeystoreKeyPassword, opt_orgApacheFelixHttpsTruststore, opt_orgApacheFelixHttpsTruststorePassword, opt_orgApacheFelixHttpsClientcertificate, opt_orgApacheFelixHttpContextPath, opt_orgApacheFelixHttpMbeans, opt_orgApacheFelixHttpSessionTimeout, opt_orgApacheFelixHttpJettyThreadpoolMax, opt_orgApacheFelixHttpJettyAcceptors, opt_orgApacheFelixHttpJettySelectors, opt_orgApacheFelixHttpJettyHeaderBufferSize, opt_orgApacheFelixHttpJettyRequestBufferSize, opt_orgApacheFelixHttpJettyResponseBufferSize, opt_orgApacheFelixHttpJettyMaxFormSize, opt_orgApacheFelixHttpPathExclusions, opt_orgApacheFelixHttpsJettyCiphersuitesExcluded, opt_orgApacheFelixHttpsJettyCiphersuitesIncluded, opt_orgApacheFelixHttpJettySendServerHeader, opt_orgApacheFelixHttpsJettyProtocolsIncluded, opt_orgApacheFelixHttpsJettyProtocolsExcluded, opt_orgApacheFelixProxyLoadBalancerConnectionEnable, opt_orgApacheFelixHttpsJettyRenegotiateAllowed, opt_orgApacheFelixHttpsJettySessionCookieHttpOnly, opt_orgApacheFelixHttpsJettySessionCookieSecure, opt_orgEclipseJettyServletSessionIdPathParameterName, opt_orgEclipseJettyServletCheckingRemoteSessionIdEncoding, opt_orgEclipseJettyServletSessionCookie, opt_orgEclipseJettyServletSessionDomain, opt_orgEclipseJettyServletSessionPath, opt_orgEclipseJettyServletMaxAge, opt_orgApacheFelixHttpName, opt_orgApacheFelixJettyGziphandlerEnable, opt_orgApacheFelixJettyGzipMinGzipSize, opt_orgApacheFelixJettyGzipCompressionLevel, opt_orgApacheFelixJettyGzipInflateBufferSize, opt_orgApacheFelixJettyGzipSyncFlush, opt_orgApacheFelixJettyGzipExcludedUserAgents, opt_orgApacheFelixJettyGzipIncludedMethods, opt_orgApacheFelixJettyGzipExcludedMethods, opt_orgApacheFelixJettyGzipIncludedPaths, opt_orgApacheFelixJettyGzipExcludedPaths, opt_orgApacheFelixJettyGzipIncludedMimeTypes, opt_orgApacheFelixJettyGzipExcludedMimeTypes, opt_orgApacheFelixHttpSessionInvalidate, opt_orgApacheFelixHttpSessionUniqueid, opt_extraHttpRequestParams) {
  /** @const {string} */
  var path = this.basePath_ + '/system/console/configMgr/org.apache.felix.http';

  /** @type {!Object} */
  var queryParameters = {};

  /** @type {!Object} */
  var headerParams = angular.extend({}, this.defaultHeaders_);
  if (opt_post !== undefined) {
    queryParameters['post'] = opt_post;
  }

  if (opt_apply !== undefined) {
    queryParameters['apply'] = opt_apply;
  }

  if (opt_delete !== undefined) {
    queryParameters['delete'] = opt_delete;
  }

  if (opt_action !== undefined) {
    queryParameters['action'] = opt_action;
  }

  if (opt_location !== undefined) {
    queryParameters['$location'] = opt_location;
  }

  if (opt_propertylist !== undefined) {
    queryParameters['propertylist'] = opt_propertylist;
  }

  if (opt_orgApacheFelixHttpHost !== undefined) {
    queryParameters['org.apache.felix.http.host'] = opt_orgApacheFelixHttpHost;
  }

  if (opt_orgApacheFelixHttpEnable !== undefined) {
    queryParameters['org.apache.felix.http.enable'] = opt_orgApacheFelixHttpEnable;
  }

  if (opt_orgOsgiServiceHttpPort !== undefined) {
    queryParameters['org.osgi.service.http.port'] = opt_orgOsgiServiceHttpPort;
  }

  if (opt_orgApacheFelixHttpTimeout !== undefined) {
    queryParameters['org.apache.felix.http.timeout'] = opt_orgApacheFelixHttpTimeout;
  }

  if (opt_orgApacheFelixHttpsEnable !== undefined) {
    queryParameters['org.apache.felix.https.enable'] = opt_orgApacheFelixHttpsEnable;
  }

  if (opt_orgOsgiServiceHttpPortSecure !== undefined) {
    queryParameters['org.osgi.service.http.port.secure'] = opt_orgOsgiServiceHttpPortSecure;
  }

  if (opt_orgApacheFelixHttpsKeystore !== undefined) {
    queryParameters['org.apache.felix.https.keystore'] = opt_orgApacheFelixHttpsKeystore;
  }

  if (opt_orgApacheFelixHttpsKeystorePassword !== undefined) {
    queryParameters['org.apache.felix.https.keystore.password'] = opt_orgApacheFelixHttpsKeystorePassword;
  }

  if (opt_orgApacheFelixHttpsKeystoreKeyPassword !== undefined) {
    queryParameters['org.apache.felix.https.keystore.key.password'] = opt_orgApacheFelixHttpsKeystoreKeyPassword;
  }

  if (opt_orgApacheFelixHttpsTruststore !== undefined) {
    queryParameters['org.apache.felix.https.truststore'] = opt_orgApacheFelixHttpsTruststore;
  }

  if (opt_orgApacheFelixHttpsTruststorePassword !== undefined) {
    queryParameters['org.apache.felix.https.truststore.password'] = opt_orgApacheFelixHttpsTruststorePassword;
  }

  if (opt_orgApacheFelixHttpsClientcertificate !== undefined) {
    queryParameters['org.apache.felix.https.clientcertificate'] = opt_orgApacheFelixHttpsClientcertificate;
  }

  if (opt_orgApacheFelixHttpContextPath !== undefined) {
    queryParameters['org.apache.felix.http.context_path'] = opt_orgApacheFelixHttpContextPath;
  }

  if (opt_orgApacheFelixHttpMbeans !== undefined) {
    queryParameters['org.apache.felix.http.mbeans'] = opt_orgApacheFelixHttpMbeans;
  }

  if (opt_orgApacheFelixHttpSessionTimeout !== undefined) {
    queryParameters['org.apache.felix.http.session.timeout'] = opt_orgApacheFelixHttpSessionTimeout;
  }

  if (opt_orgApacheFelixHttpJettyThreadpoolMax !== undefined) {
    queryParameters['org.apache.felix.http.jetty.threadpool.max'] = opt_orgApacheFelixHttpJettyThreadpoolMax;
  }

  if (opt_orgApacheFelixHttpJettyAcceptors !== undefined) {
    queryParameters['org.apache.felix.http.jetty.acceptors'] = opt_orgApacheFelixHttpJettyAcceptors;
  }

  if (opt_orgApacheFelixHttpJettySelectors !== undefined) {
    queryParameters['org.apache.felix.http.jetty.selectors'] = opt_orgApacheFelixHttpJettySelectors;
  }

  if (opt_orgApacheFelixHttpJettyHeaderBufferSize !== undefined) {
    queryParameters['org.apache.felix.http.jetty.headerBufferSize'] = opt_orgApacheFelixHttpJettyHeaderBufferSize;
  }

  if (opt_orgApacheFelixHttpJettyRequestBufferSize !== undefined) {
    queryParameters['org.apache.felix.http.jetty.requestBufferSize'] = opt_orgApacheFelixHttpJettyRequestBufferSize;
  }

  if (opt_orgApacheFelixHttpJettyResponseBufferSize !== undefined) {
    queryParameters['org.apache.felix.http.jetty.responseBufferSize'] = opt_orgApacheFelixHttpJettyResponseBufferSize;
  }

  if (opt_orgApacheFelixHttpJettyMaxFormSize !== undefined) {
    queryParameters['org.apache.felix.http.jetty.maxFormSize'] = opt_orgApacheFelixHttpJettyMaxFormSize;
  }

  if (opt_orgApacheFelixHttpPathExclusions !== undefined) {
    queryParameters['org.apache.felix.http.path_exclusions'] = opt_orgApacheFelixHttpPathExclusions;
  }

  if (opt_orgApacheFelixHttpsJettyCiphersuitesExcluded !== undefined) {
    queryParameters['org.apache.felix.https.jetty.ciphersuites.excluded'] = opt_orgApacheFelixHttpsJettyCiphersuitesExcluded;
  }

  if (opt_orgApacheFelixHttpsJettyCiphersuitesIncluded !== undefined) {
    queryParameters['org.apache.felix.https.jetty.ciphersuites.included'] = opt_orgApacheFelixHttpsJettyCiphersuitesIncluded;
  }

  if (opt_orgApacheFelixHttpJettySendServerHeader !== undefined) {
    queryParameters['org.apache.felix.http.jetty.sendServerHeader'] = opt_orgApacheFelixHttpJettySendServerHeader;
  }

  if (opt_orgApacheFelixHttpsJettyProtocolsIncluded !== undefined) {
    queryParameters['org.apache.felix.https.jetty.protocols.included'] = opt_orgApacheFelixHttpsJettyProtocolsIncluded;
  }

  if (opt_orgApacheFelixHttpsJettyProtocolsExcluded !== undefined) {
    queryParameters['org.apache.felix.https.jetty.protocols.excluded'] = opt_orgApacheFelixHttpsJettyProtocolsExcluded;
  }

  if (opt_orgApacheFelixProxyLoadBalancerConnectionEnable !== undefined) {
    queryParameters['org.apache.felix.proxy.load.balancer.connection.enable'] = opt_orgApacheFelixProxyLoadBalancerConnectionEnable;
  }

  if (opt_orgApacheFelixHttpsJettyRenegotiateAllowed !== undefined) {
    queryParameters['org.apache.felix.https.jetty.renegotiateAllowed'] = opt_orgApacheFelixHttpsJettyRenegotiateAllowed;
  }

  if (opt_orgApacheFelixHttpsJettySessionCookieHttpOnly !== undefined) {
    queryParameters['org.apache.felix.https.jetty.session.cookie.httpOnly'] = opt_orgApacheFelixHttpsJettySessionCookieHttpOnly;
  }

  if (opt_orgApacheFelixHttpsJettySessionCookieSecure !== undefined) {
    queryParameters['org.apache.felix.https.jetty.session.cookie.secure'] = opt_orgApacheFelixHttpsJettySessionCookieSecure;
  }

  if (opt_orgEclipseJettyServletSessionIdPathParameterName !== undefined) {
    queryParameters['org.eclipse.jetty.servlet.SessionIdPathParameterName'] = opt_orgEclipseJettyServletSessionIdPathParameterName;
  }

  if (opt_orgEclipseJettyServletCheckingRemoteSessionIdEncoding !== undefined) {
    queryParameters['org.eclipse.jetty.servlet.CheckingRemoteSessionIdEncoding'] = opt_orgEclipseJettyServletCheckingRemoteSessionIdEncoding;
  }

  if (opt_orgEclipseJettyServletSessionCookie !== undefined) {
    queryParameters['org.eclipse.jetty.servlet.SessionCookie'] = opt_orgEclipseJettyServletSessionCookie;
  }

  if (opt_orgEclipseJettyServletSessionDomain !== undefined) {
    queryParameters['org.eclipse.jetty.servlet.SessionDomain'] = opt_orgEclipseJettyServletSessionDomain;
  }

  if (opt_orgEclipseJettyServletSessionPath !== undefined) {
    queryParameters['org.eclipse.jetty.servlet.SessionPath'] = opt_orgEclipseJettyServletSessionPath;
  }

  if (opt_orgEclipseJettyServletMaxAge !== undefined) {
    queryParameters['org.eclipse.jetty.servlet.MaxAge'] = opt_orgEclipseJettyServletMaxAge;
  }

  if (opt_orgApacheFelixHttpName !== undefined) {
    queryParameters['org.apache.felix.http.name'] = opt_orgApacheFelixHttpName;
  }

  if (opt_orgApacheFelixJettyGziphandlerEnable !== undefined) {
    queryParameters['org.apache.felix.jetty.gziphandler.enable'] = opt_orgApacheFelixJettyGziphandlerEnable;
  }

  if (opt_orgApacheFelixJettyGzipMinGzipSize !== undefined) {
    queryParameters['org.apache.felix.jetty.gzip.minGzipSize'] = opt_orgApacheFelixJettyGzipMinGzipSize;
  }

  if (opt_orgApacheFelixJettyGzipCompressionLevel !== undefined) {
    queryParameters['org.apache.felix.jetty.gzip.compressionLevel'] = opt_orgApacheFelixJettyGzipCompressionLevel;
  }

  if (opt_orgApacheFelixJettyGzipInflateBufferSize !== undefined) {
    queryParameters['org.apache.felix.jetty.gzip.inflateBufferSize'] = opt_orgApacheFelixJettyGzipInflateBufferSize;
  }

  if (opt_orgApacheFelixJettyGzipSyncFlush !== undefined) {
    queryParameters['org.apache.felix.jetty.gzip.syncFlush'] = opt_orgApacheFelixJettyGzipSyncFlush;
  }

  if (opt_orgApacheFelixJettyGzipExcludedUserAgents !== undefined) {
    queryParameters['org.apache.felix.jetty.gzip.excludedUserAgents'] = opt_orgApacheFelixJettyGzipExcludedUserAgents;
  }

  if (opt_orgApacheFelixJettyGzipIncludedMethods !== undefined) {
    queryParameters['org.apache.felix.jetty.gzip.includedMethods'] = opt_orgApacheFelixJettyGzipIncludedMethods;
  }

  if (opt_orgApacheFelixJettyGzipExcludedMethods !== undefined) {
    queryParameters['org.apache.felix.jetty.gzip.excludedMethods'] = opt_orgApacheFelixJettyGzipExcludedMethods;
  }

  if (opt_orgApacheFelixJettyGzipIncludedPaths !== undefined) {
    queryParameters['org.apache.felix.jetty.gzip.includedPaths'] = opt_orgApacheFelixJettyGzipIncludedPaths;
  }

  if (opt_orgApacheFelixJettyGzipExcludedPaths !== undefined) {
    queryParameters['org.apache.felix.jetty.gzip.excludedPaths'] = opt_orgApacheFelixJettyGzipExcludedPaths;
  }

  if (opt_orgApacheFelixJettyGzipIncludedMimeTypes !== undefined) {
    queryParameters['org.apache.felix.jetty.gzip.includedMimeTypes'] = opt_orgApacheFelixJettyGzipIncludedMimeTypes;
  }

  if (opt_orgApacheFelixJettyGzipExcludedMimeTypes !== undefined) {
    queryParameters['org.apache.felix.jetty.gzip.excludedMimeTypes'] = opt_orgApacheFelixJettyGzipExcludedMimeTypes;
  }

  if (opt_orgApacheFelixHttpSessionInvalidate !== undefined) {
    queryParameters['org.apache.felix.http.session.invalidate'] = opt_orgApacheFelixHttpSessionInvalidate;
  }

  if (opt_orgApacheFelixHttpSessionUniqueid !== undefined) {
    queryParameters['org.apache.felix.http.session.uniqueid'] = opt_orgApacheFelixHttpSessionUniqueid;
  }

  /** @type {!Object} */
  var httpRequestParams = {
    method: 'POST',
    url: path,
    json: true,
            params: queryParameters,
    headers: headerParams
  };

  if (opt_extraHttpRequestParams) {
    httpRequestParams = angular.extend(httpRequestParams, opt_extraHttpRequestParams);
  }

  return (/** @type {?} */ (this.http_))(httpRequestParams);
}

/**
 * 
 * 
 * @param {!boolean=} opt_post 
 * @param {!boolean=} opt_apply 
 * @param {!boolean=} opt_delete 
 * @param {!string=} opt_action 
 * @param {!string=} opt_location 
 * @param {!Array<!string>=} opt_propertylist 
 * @param {!string=} opt_sslForwardHeader 
 * @param {!string=} opt_sslForwardValue 
 * @param {!string=} opt_sslForwardCertHeader 
 * @param {!boolean=} opt_rewriteAbsoluteUrls 
 * @param {!angular.$http.Config=} opt_extraHttpRequestParams Extra HTTP parameters to send.
 * @return {!angular.$q.Promise<!API.Client.orgApacheFelixHttpSslfilterSslFilterInfo>}
 */
API.Client.ConfigmgrApi.prototype.orgApacheFelixHttpSslfilterSslFilter = function(opt_post, opt_apply, opt_delete, opt_action, opt_location, opt_propertylist, opt_sslForwardHeader, opt_sslForwardValue, opt_sslForwardCertHeader, opt_rewriteAbsoluteUrls, opt_extraHttpRequestParams) {
  /** @const {string} */
  var path = this.basePath_ + '/system/console/configMgr/org.apache.felix.http.sslfilter.SslFilter';

  /** @type {!Object} */
  var queryParameters = {};

  /** @type {!Object} */
  var headerParams = angular.extend({}, this.defaultHeaders_);
  if (opt_post !== undefined) {
    queryParameters['post'] = opt_post;
  }

  if (opt_apply !== undefined) {
    queryParameters['apply'] = opt_apply;
  }

  if (opt_delete !== undefined) {
    queryParameters['delete'] = opt_delete;
  }

  if (opt_action !== undefined) {
    queryParameters['action'] = opt_action;
  }

  if (opt_location !== undefined) {
    queryParameters['$location'] = opt_location;
  }

  if (opt_propertylist !== undefined) {
    queryParameters['propertylist'] = opt_propertylist;
  }

  if (opt_sslForwardHeader !== undefined) {
    queryParameters['ssl-forward.header'] = opt_sslForwardHeader;
  }

  if (opt_sslForwardValue !== undefined) {
    queryParameters['ssl-forward.value'] = opt_sslForwardValue;
  }

  if (opt_sslForwardCertHeader !== undefined) {
    queryParameters['ssl-forward-cert.header'] = opt_sslForwardCertHeader;
  }

  if (opt_rewriteAbsoluteUrls !== undefined) {
    queryParameters['rewrite.absolute.urls'] = opt_rewriteAbsoluteUrls;
  }

  /** @type {!Object} */
  var httpRequestParams = {
    method: 'POST',
    url: path,
    json: true,
            params: queryParameters,
    headers: headerParams
  };

  if (opt_extraHttpRequestParams) {
    httpRequestParams = angular.extend(httpRequestParams, opt_extraHttpRequestParams);
  }

  return (/** @type {?} */ (this.http_))(httpRequestParams);
}

/**
 * 
 * 
 * @param {!boolean=} opt_post 
 * @param {!boolean=} opt_apply 
 * @param {!boolean=} opt_delete 
 * @param {!string=} opt_action 
 * @param {!string=} opt_location 
 * @param {!Array<!string>=} opt_propertylist 
 * @param {!string=} opt_jaasControlFlag 
 * @param {!number=} opt_jaasRanking 
 * @param {!string=} opt_jaasRealmName 
 * @param {!string=} opt_jaasClassname 
 * @param {!Array<!string>=} opt_jaasOptions 
 * @param {!angular.$http.Config=} opt_extraHttpRequestParams Extra HTTP parameters to send.
 * @return {!angular.$q.Promise<!API.Client.orgApacheFelixJaasConfigurationFactoryInfo>}
 */
API.Client.ConfigmgrApi.prototype.orgApacheFelixJaasConfigurationFactory = function(opt_post, opt_apply, opt_delete, opt_action, opt_location, opt_propertylist, opt_jaasControlFlag, opt_jaasRanking, opt_jaasRealmName, opt_jaasClassname, opt_jaasOptions, opt_extraHttpRequestParams) {
  /** @const {string} */
  var path = this.basePath_ + '/system/console/configMgr/org.apache.felix.jaas.Configuration.factory';

  /** @type {!Object} */
  var queryParameters = {};

  /** @type {!Object} */
  var headerParams = angular.extend({}, this.defaultHeaders_);
  if (opt_post !== undefined) {
    queryParameters['post'] = opt_post;
  }

  if (opt_apply !== undefined) {
    queryParameters['apply'] = opt_apply;
  }

  if (opt_delete !== undefined) {
    queryParameters['delete'] = opt_delete;
  }

  if (opt_action !== undefined) {
    queryParameters['action'] = opt_action;
  }

  if (opt_location !== undefined) {
    queryParameters['$location'] = opt_location;
  }

  if (opt_propertylist !== undefined) {
    queryParameters['propertylist'] = opt_propertylist;
  }

  if (opt_jaasControlFlag !== undefined) {
    queryParameters['jaas.controlFlag'] = opt_jaasControlFlag;
  }

  if (opt_jaasRanking !== undefined) {
    queryParameters['jaas.ranking'] = opt_jaasRanking;
  }

  if (opt_jaasRealmName !== undefined) {
    queryParameters['jaas.realmName'] = opt_jaasRealmName;
  }

  if (opt_jaasClassname !== undefined) {
    queryParameters['jaas.classname'] = opt_jaasClassname;
  }

  if (opt_jaasOptions !== undefined) {
    queryParameters['jaas.options'] = opt_jaasOptions;
  }

  /** @type {!Object} */
  var httpRequestParams = {
    method: 'POST',
    url: path,
    json: true,
            params: queryParameters,
    headers: headerParams
  };

  if (opt_extraHttpRequestParams) {
    httpRequestParams = angular.extend(httpRequestParams, opt_extraHttpRequestParams);
  }

  return (/** @type {?} */ (this.http_))(httpRequestParams);
}

/**
 * 
 * 
 * @param {!boolean=} opt_post 
 * @param {!boolean=} opt_apply 
 * @param {!boolean=} opt_delete 
 * @param {!string=} opt_action 
 * @param {!string=} opt_location 
 * @param {!Array<!string>=} opt_propertylist 
 * @param {!string=} opt_jaasDefaultRealmName 
 * @param {!string=} opt_jaasConfigProviderName 
 * @param {!string=} opt_jaasGlobalConfigPolicy 
 * @param {!angular.$http.Config=} opt_extraHttpRequestParams Extra HTTP parameters to send.
 * @return {!angular.$q.Promise<!API.Client.orgApacheFelixJaasConfigurationSpiInfo>}
 */
API.Client.ConfigmgrApi.prototype.orgApacheFelixJaasConfigurationSpi = function(opt_post, opt_apply, opt_delete, opt_action, opt_location, opt_propertylist, opt_jaasDefaultRealmName, opt_jaasConfigProviderName, opt_jaasGlobalConfigPolicy, opt_extraHttpRequestParams) {
  /** @const {string} */
  var path = this.basePath_ + '/system/console/configMgr/org.apache.felix.jaas.ConfigurationSpi';

  /** @type {!Object} */
  var queryParameters = {};

  /** @type {!Object} */
  var headerParams = angular.extend({}, this.defaultHeaders_);
  if (opt_post !== undefined) {
    queryParameters['post'] = opt_post;
  }

  if (opt_apply !== undefined) {
    queryParameters['apply'] = opt_apply;
  }

  if (opt_delete !== undefined) {
    queryParameters['delete'] = opt_delete;
  }

  if (opt_action !== undefined) {
    queryParameters['action'] = opt_action;
  }

  if (opt_location !== undefined) {
    queryParameters['$location'] = opt_location;
  }

  if (opt_propertylist !== undefined) {
    queryParameters['propertylist'] = opt_propertylist;
  }

  if (opt_jaasDefaultRealmName !== undefined) {
    queryParameters['jaas.defaultRealmName'] = opt_jaasDefaultRealmName;
  }

  if (opt_jaasConfigProviderName !== undefined) {
    queryParameters['jaas.configProviderName'] = opt_jaasConfigProviderName;
  }

  if (opt_jaasGlobalConfigPolicy !== undefined) {
    queryParameters['jaas.globalConfigPolicy'] = opt_jaasGlobalConfigPolicy;
  }

  /** @type {!Object} */
  var httpRequestParams = {
    method: 'POST',
    url: path,
    json: true,
            params: queryParameters,
    headers: headerParams
  };

  if (opt_extraHttpRequestParams) {
    httpRequestParams = angular.extend(httpRequestParams, opt_extraHttpRequestParams);
  }

  return (/** @type {?} */ (this.http_))(httpRequestParams);
}

/**
 * 
 * 
 * @param {!boolean=} opt_post 
 * @param {!boolean=} opt_apply 
 * @param {!boolean=} opt_delete 
 * @param {!string=} opt_action 
 * @param {!string=} opt_location 
 * @param {!Array<!string>=} opt_propertylist 
 * @param {!number=} opt_dsLoglevel 
 * @param {!boolean=} opt_dsFactoryEnabled 
 * @param {!boolean=} opt_dsDelayedKeepInstances 
 * @param {!number=} opt_dsLockTimeoutMilliseconds 
 * @param {!number=} opt_dsStopTimeoutMilliseconds 
 * @param {!boolean=} opt_dsGlobalExtender 
 * @param {!angular.$http.Config=} opt_extraHttpRequestParams Extra HTTP parameters to send.
 * @return {!angular.$q.Promise<!API.Client.orgApacheFelixScrScrServiceInfo>}
 */
API.Client.ConfigmgrApi.prototype.orgApacheFelixScrScrService = function(opt_post, opt_apply, opt_delete, opt_action, opt_location, opt_propertylist, opt_dsLoglevel, opt_dsFactoryEnabled, opt_dsDelayedKeepInstances, opt_dsLockTimeoutMilliseconds, opt_dsStopTimeoutMilliseconds, opt_dsGlobalExtender, opt_extraHttpRequestParams) {
  /** @const {string} */
  var path = this.basePath_ + '/system/console/configMgr/org.apache.felix.scr.ScrService';

  /** @type {!Object} */
  var queryParameters = {};

  /** @type {!Object} */
  var headerParams = angular.extend({}, this.defaultHeaders_);
  if (opt_post !== undefined) {
    queryParameters['post'] = opt_post;
  }

  if (opt_apply !== undefined) {
    queryParameters['apply'] = opt_apply;
  }

  if (opt_delete !== undefined) {
    queryParameters['delete'] = opt_delete;
  }

  if (opt_action !== undefined) {
    queryParameters['action'] = opt_action;
  }

  if (opt_location !== undefined) {
    queryParameters['$location'] = opt_location;
  }

  if (opt_propertylist !== undefined) {
    queryParameters['propertylist'] = opt_propertylist;
  }

  if (opt_dsLoglevel !== undefined) {
    queryParameters['ds.loglevel'] = opt_dsLoglevel;
  }

  if (opt_dsFactoryEnabled !== undefined) {
    queryParameters['ds.factory.enabled'] = opt_dsFactoryEnabled;
  }

  if (opt_dsDelayedKeepInstances !== undefined) {
    queryParameters['ds.delayed.keepInstances'] = opt_dsDelayedKeepInstances;
  }

  if (opt_dsLockTimeoutMilliseconds !== undefined) {
    queryParameters['ds.lock.timeout.milliseconds'] = opt_dsLockTimeoutMilliseconds;
  }

  if (opt_dsStopTimeoutMilliseconds !== undefined) {
    queryParameters['ds.stop.timeout.milliseconds'] = opt_dsStopTimeoutMilliseconds;
  }

  if (opt_dsGlobalExtender !== undefined) {
    queryParameters['ds.global.extender'] = opt_dsGlobalExtender;
  }

  /** @type {!Object} */
  var httpRequestParams = {
    method: 'POST',
    url: path,
    json: true,
            params: queryParameters,
    headers: headerParams
  };

  if (opt_extraHttpRequestParams) {
    httpRequestParams = angular.extend(httpRequestParams, opt_extraHttpRequestParams);
  }

  return (/** @type {?} */ (this.http_))(httpRequestParams);
}

/**
 * 
 * 
 * @param {!boolean=} opt_post 
 * @param {!boolean=} opt_apply 
 * @param {!boolean=} opt_delete 
 * @param {!string=} opt_action 
 * @param {!string=} opt_location 
 * @param {!Array<!string>=} opt_propertylist 
 * @param {!Array<!string>=} opt_componentsList 
 * @param {!string=} opt_type 
 * @param {!angular.$http.Config=} opt_extraHttpRequestParams Extra HTTP parameters to send.
 * @return {!angular.$q.Promise<!API.Client.orgApacheFelixSystemreadyImplComponentsCheckInfo>}
 */
API.Client.ConfigmgrApi.prototype.orgApacheFelixSystemreadyImplComponentsCheck = function(opt_post, opt_apply, opt_delete, opt_action, opt_location, opt_propertylist, opt_componentsList, opt_type, opt_extraHttpRequestParams) {
  /** @const {string} */
  var path = this.basePath_ + '/system/console/configMgr/org.apache.felix.systemready.impl.ComponentsCheck';

  /** @type {!Object} */
  var queryParameters = {};

  /** @type {!Object} */
  var headerParams = angular.extend({}, this.defaultHeaders_);
  if (opt_post !== undefined) {
    queryParameters['post'] = opt_post;
  }

  if (opt_apply !== undefined) {
    queryParameters['apply'] = opt_apply;
  }

  if (opt_delete !== undefined) {
    queryParameters['delete'] = opt_delete;
  }

  if (opt_action !== undefined) {
    queryParameters['action'] = opt_action;
  }

  if (opt_location !== undefined) {
    queryParameters['$location'] = opt_location;
  }

  if (opt_propertylist !== undefined) {
    queryParameters['propertylist'] = opt_propertylist;
  }

  if (opt_componentsList !== undefined) {
    queryParameters['components.list'] = opt_componentsList;
  }

  if (opt_type !== undefined) {
    queryParameters['type'] = opt_type;
  }

  /** @type {!Object} */
  var httpRequestParams = {
    method: 'POST',
    url: path,
    json: true,
            params: queryParameters,
    headers: headerParams
  };

  if (opt_extraHttpRequestParams) {
    httpRequestParams = angular.extend(httpRequestParams, opt_extraHttpRequestParams);
  }

  return (/** @type {?} */ (this.http_))(httpRequestParams);
}

/**
 * 
 * 
 * @param {!boolean=} opt_post 
 * @param {!boolean=} opt_apply 
 * @param {!boolean=} opt_delete 
 * @param {!string=} opt_action 
 * @param {!string=} opt_location 
 * @param {!Array<!string>=} opt_propertylist 
 * @param {!number=} opt_timeout 
 * @param {!number=} opt_targetStartLevel 
 * @param {!string=} opt_targetStartLevelPropName 
 * @param {!string=} opt_type 
 * @param {!angular.$http.Config=} opt_extraHttpRequestParams Extra HTTP parameters to send.
 * @return {!angular.$q.Promise<!API.Client.orgApacheFelixSystemreadyImplFrameworkStartCheckInfo>}
 */
API.Client.ConfigmgrApi.prototype.orgApacheFelixSystemreadyImplFrameworkStartCheck = function(opt_post, opt_apply, opt_delete, opt_action, opt_location, opt_propertylist, opt_timeout, opt_targetStartLevel, opt_targetStartLevelPropName, opt_type, opt_extraHttpRequestParams) {
  /** @const {string} */
  var path = this.basePath_ + '/system/console/configMgr/org.apache.felix.systemready.impl.FrameworkStartCheck';

  /** @type {!Object} */
  var queryParameters = {};

  /** @type {!Object} */
  var headerParams = angular.extend({}, this.defaultHeaders_);
  if (opt_post !== undefined) {
    queryParameters['post'] = opt_post;
  }

  if (opt_apply !== undefined) {
    queryParameters['apply'] = opt_apply;
  }

  if (opt_delete !== undefined) {
    queryParameters['delete'] = opt_delete;
  }

  if (opt_action !== undefined) {
    queryParameters['action'] = opt_action;
  }

  if (opt_location !== undefined) {
    queryParameters['$location'] = opt_location;
  }

  if (opt_propertylist !== undefined) {
    queryParameters['propertylist'] = opt_propertylist;
  }

  if (opt_timeout !== undefined) {
    queryParameters['timeout'] = opt_timeout;
  }

  if (opt_targetStartLevel !== undefined) {
    queryParameters['target.start.level'] = opt_targetStartLevel;
  }

  if (opt_targetStartLevelPropName !== undefined) {
    queryParameters['target.start.level.prop.name'] = opt_targetStartLevelPropName;
  }

  if (opt_type !== undefined) {
    queryParameters['type'] = opt_type;
  }

  /** @type {!Object} */
  var httpRequestParams = {
    method: 'POST',
    url: path,
    json: true,
            params: queryParameters,
    headers: headerParams
  };

  if (opt_extraHttpRequestParams) {
    httpRequestParams = angular.extend(httpRequestParams, opt_extraHttpRequestParams);
  }

  return (/** @type {?} */ (this.http_))(httpRequestParams);
}

/**
 * 
 * 
 * @param {!boolean=} opt_post 
 * @param {!boolean=} opt_apply 
 * @param {!boolean=} opt_delete 
 * @param {!string=} opt_action 
 * @param {!string=} opt_location 
 * @param {!Array<!string>=} opt_propertylist 
 * @param {!Array<!string>=} opt_servicesList 
 * @param {!string=} opt_type 
 * @param {!angular.$http.Config=} opt_extraHttpRequestParams Extra HTTP parameters to send.
 * @return {!angular.$q.Promise<!API.Client.orgApacheFelixSystemreadyImplServicesCheckInfo>}
 */
API.Client.ConfigmgrApi.prototype.orgApacheFelixSystemreadyImplServicesCheck = function(opt_post, opt_apply, opt_delete, opt_action, opt_location, opt_propertylist, opt_servicesList, opt_type, opt_extraHttpRequestParams) {
  /** @const {string} */
  var path = this.basePath_ + '/system/console/configMgr/org.apache.felix.systemready.impl.ServicesCheck';

  /** @type {!Object} */
  var queryParameters = {};

  /** @type {!Object} */
  var headerParams = angular.extend({}, this.defaultHeaders_);
  if (opt_post !== undefined) {
    queryParameters['post'] = opt_post;
  }

  if (opt_apply !== undefined) {
    queryParameters['apply'] = opt_apply;
  }

  if (opt_delete !== undefined) {
    queryParameters['delete'] = opt_delete;
  }

  if (opt_action !== undefined) {
    queryParameters['action'] = opt_action;
  }

  if (opt_location !== undefined) {
    queryParameters['$location'] = opt_location;
  }

  if (opt_propertylist !== undefined) {
    queryParameters['propertylist'] = opt_propertylist;
  }

  if (opt_servicesList !== undefined) {
    queryParameters['services.list'] = opt_servicesList;
  }

  if (opt_type !== undefined) {
    queryParameters['type'] = opt_type;
  }

  /** @type {!Object} */
  var httpRequestParams = {
    method: 'POST',
    url: path,
    json: true,
            params: queryParameters,
    headers: headerParams
  };

  if (opt_extraHttpRequestParams) {
    httpRequestParams = angular.extend(httpRequestParams, opt_extraHttpRequestParams);
  }

  return (/** @type {?} */ (this.http_))(httpRequestParams);
}

/**
 * 
 * 
 * @param {!boolean=} opt_post 
 * @param {!boolean=} opt_apply 
 * @param {!boolean=} opt_delete 
 * @param {!string=} opt_action 
 * @param {!string=} opt_location 
 * @param {!Array<!string>=} opt_propertylist 
 * @param {!string=} opt_osgiHttpWhiteboardServletPattern 
 * @param {!string=} opt_osgiHttpWhiteboardContextSelect 
 * @param {!angular.$http.Config=} opt_extraHttpRequestParams Extra HTTP parameters to send.
 * @return {!angular.$q.Promise<!API.Client.orgApacheFelixSystemreadyImplServletSystemAliveServletInfo>}
 */
API.Client.ConfigmgrApi.prototype.orgApacheFelixSystemreadyImplServletSystemAliveServlet = function(opt_post, opt_apply, opt_delete, opt_action, opt_location, opt_propertylist, opt_osgiHttpWhiteboardServletPattern, opt_osgiHttpWhiteboardContextSelect, opt_extraHttpRequestParams) {
  /** @const {string} */
  var path = this.basePath_ + '/system/console/configMgr/org.apache.felix.systemready.impl.servlet.SystemAliveServlet';

  /** @type {!Object} */
  var queryParameters = {};

  /** @type {!Object} */
  var headerParams = angular.extend({}, this.defaultHeaders_);
  if (opt_post !== undefined) {
    queryParameters['post'] = opt_post;
  }

  if (opt_apply !== undefined) {
    queryParameters['apply'] = opt_apply;
  }

  if (opt_delete !== undefined) {
    queryParameters['delete'] = opt_delete;
  }

  if (opt_action !== undefined) {
    queryParameters['action'] = opt_action;
  }

  if (opt_location !== undefined) {
    queryParameters['$location'] = opt_location;
  }

  if (opt_propertylist !== undefined) {
    queryParameters['propertylist'] = opt_propertylist;
  }

  if (opt_osgiHttpWhiteboardServletPattern !== undefined) {
    queryParameters['osgi.http.whiteboard.servlet.pattern'] = opt_osgiHttpWhiteboardServletPattern;
  }

  if (opt_osgiHttpWhiteboardContextSelect !== undefined) {
    queryParameters['osgi.http.whiteboard.context.select'] = opt_osgiHttpWhiteboardContextSelect;
  }

  /** @type {!Object} */
  var httpRequestParams = {
    method: 'POST',
    url: path,
    json: true,
            params: queryParameters,
    headers: headerParams
  };

  if (opt_extraHttpRequestParams) {
    httpRequestParams = angular.extend(httpRequestParams, opt_extraHttpRequestParams);
  }

  return (/** @type {?} */ (this.http_))(httpRequestParams);
}

/**
 * 
 * 
 * @param {!boolean=} opt_post 
 * @param {!boolean=} opt_apply 
 * @param {!boolean=} opt_delete 
 * @param {!string=} opt_action 
 * @param {!string=} opt_location 
 * @param {!Array<!string>=} opt_propertylist 
 * @param {!string=} opt_osgiHttpWhiteboardServletPattern 
 * @param {!string=} opt_osgiHttpWhiteboardContextSelect 
 * @param {!angular.$http.Config=} opt_extraHttpRequestParams Extra HTTP parameters to send.
 * @return {!angular.$q.Promise<!API.Client.orgApacheFelixSystemreadyImplServletSystemReadyServletInfo>}
 */
API.Client.ConfigmgrApi.prototype.orgApacheFelixSystemreadyImplServletSystemReadyServlet = function(opt_post, opt_apply, opt_delete, opt_action, opt_location, opt_propertylist, opt_osgiHttpWhiteboardServletPattern, opt_osgiHttpWhiteboardContextSelect, opt_extraHttpRequestParams) {
  /** @const {string} */
  var path = this.basePath_ + '/system/console/configMgr/org.apache.felix.systemready.impl.servlet.SystemReadyServlet';

  /** @type {!Object} */
  var queryParameters = {};

  /** @type {!Object} */
  var headerParams = angular.extend({}, this.defaultHeaders_);
  if (opt_post !== undefined) {
    queryParameters['post'] = opt_post;
  }

  if (opt_apply !== undefined) {
    queryParameters['apply'] = opt_apply;
  }

  if (opt_delete !== undefined) {
    queryParameters['delete'] = opt_delete;
  }

  if (opt_action !== undefined) {
    queryParameters['action'] = opt_action;
  }

  if (opt_location !== undefined) {
    queryParameters['$location'] = opt_location;
  }

  if (opt_propertylist !== undefined) {
    queryParameters['propertylist'] = opt_propertylist;
  }

  if (opt_osgiHttpWhiteboardServletPattern !== undefined) {
    queryParameters['osgi.http.whiteboard.servlet.pattern'] = opt_osgiHttpWhiteboardServletPattern;
  }

  if (opt_osgiHttpWhiteboardContextSelect !== undefined) {
    queryParameters['osgi.http.whiteboard.context.select'] = opt_osgiHttpWhiteboardContextSelect;
  }

  /** @type {!Object} */
  var httpRequestParams = {
    method: 'POST',
    url: path,
    json: true,
            params: queryParameters,
    headers: headerParams
  };

  if (opt_extraHttpRequestParams) {
    httpRequestParams = angular.extend(httpRequestParams, opt_extraHttpRequestParams);
  }

  return (/** @type {?} */ (this.http_))(httpRequestParams);
}

/**
 * 
 * 
 * @param {!boolean=} opt_post 
 * @param {!boolean=} opt_apply 
 * @param {!boolean=} opt_delete 
 * @param {!string=} opt_action 
 * @param {!string=} opt_location 
 * @param {!Array<!string>=} opt_propertylist 
 * @param {!number=} opt_pollInterval 
 * @param {!angular.$http.Config=} opt_extraHttpRequestParams Extra HTTP parameters to send.
 * @return {!angular.$q.Promise<!API.Client.orgApacheFelixSystemreadySystemReadyMonitorInfo>}
 */
API.Client.ConfigmgrApi.prototype.orgApacheFelixSystemreadySystemReadyMonitor = function(opt_post, opt_apply, opt_delete, opt_action, opt_location, opt_propertylist, opt_pollInterval, opt_extraHttpRequestParams) {
  /** @const {string} */
  var path = this.basePath_ + '/system/console/configMgr/org.apache.felix.systemready.SystemReadyMonitor';

  /** @type {!Object} */
  var queryParameters = {};

  /** @type {!Object} */
  var headerParams = angular.extend({}, this.defaultHeaders_);
  if (opt_post !== undefined) {
    queryParameters['post'] = opt_post;
  }

  if (opt_apply !== undefined) {
    queryParameters['apply'] = opt_apply;
  }

  if (opt_delete !== undefined) {
    queryParameters['delete'] = opt_delete;
  }

  if (opt_action !== undefined) {
    queryParameters['action'] = opt_action;
  }

  if (opt_location !== undefined) {
    queryParameters['$location'] = opt_location;
  }

  if (opt_propertylist !== undefined) {
    queryParameters['propertylist'] = opt_propertylist;
  }

  if (opt_pollInterval !== undefined) {
    queryParameters['poll.interval'] = opt_pollInterval;
  }

  /** @type {!Object} */
  var httpRequestParams = {
    method: 'POST',
    url: path,
    json: true,
            params: queryParameters,
    headers: headerParams
  };

  if (opt_extraHttpRequestParams) {
    httpRequestParams = angular.extend(httpRequestParams, opt_extraHttpRequestParams);
  }

  return (/** @type {?} */ (this.http_))(httpRequestParams);
}

/**
 * 
 * 
 * @param {!boolean=} opt_post 
 * @param {!boolean=} opt_apply 
 * @param {!boolean=} opt_delete 
 * @param {!string=} opt_action 
 * @param {!string=} opt_location 
 * @param {!Array<!string>=} opt_propertylist 
 * @param {!string=} opt_managerRoot 
 * @param {!string=} opt_httpServiceFilter 
 * @param {!string=} opt_defaultRender 
 * @param {!string=} opt_realm 
 * @param {!string=} opt_username 
 * @param {!string=} opt_password 
 * @param {!string=} opt_category 
 * @param {!string=} opt_locale 
 * @param {!number=} opt_loglevel 
 * @param {!string=} opt_plugins 
 * @param {!angular.$http.Config=} opt_extraHttpRequestParams Extra HTTP parameters to send.
 * @return {!angular.$q.Promise<!API.Client.orgApacheFelixWebconsoleInternalServletOsgiManagerInfo>}
 */
API.Client.ConfigmgrApi.prototype.orgApacheFelixWebconsoleInternalServletOsgiManager = function(opt_post, opt_apply, opt_delete, opt_action, opt_location, opt_propertylist, opt_managerRoot, opt_httpServiceFilter, opt_defaultRender, opt_realm, opt_username, opt_password, opt_category, opt_locale, opt_loglevel, opt_plugins, opt_extraHttpRequestParams) {
  /** @const {string} */
  var path = this.basePath_ + '/system/console/configMgr/org.apache.felix.webconsole.internal.servlet.OsgiManager';

  /** @type {!Object} */
  var queryParameters = {};

  /** @type {!Object} */
  var headerParams = angular.extend({}, this.defaultHeaders_);
  if (opt_post !== undefined) {
    queryParameters['post'] = opt_post;
  }

  if (opt_apply !== undefined) {
    queryParameters['apply'] = opt_apply;
  }

  if (opt_delete !== undefined) {
    queryParameters['delete'] = opt_delete;
  }

  if (opt_action !== undefined) {
    queryParameters['action'] = opt_action;
  }

  if (opt_location !== undefined) {
    queryParameters['$location'] = opt_location;
  }

  if (opt_propertylist !== undefined) {
    queryParameters['propertylist'] = opt_propertylist;
  }

  if (opt_managerRoot !== undefined) {
    queryParameters['manager.root'] = opt_managerRoot;
  }

  if (opt_httpServiceFilter !== undefined) {
    queryParameters['http.service.filter'] = opt_httpServiceFilter;
  }

  if (opt_defaultRender !== undefined) {
    queryParameters['default.render'] = opt_defaultRender;
  }

  if (opt_realm !== undefined) {
    queryParameters['realm'] = opt_realm;
  }

  if (opt_username !== undefined) {
    queryParameters['username'] = opt_username;
  }

  if (opt_password !== undefined) {
    queryParameters['password'] = opt_password;
  }

  if (opt_category !== undefined) {
    queryParameters['category'] = opt_category;
  }

  if (opt_locale !== undefined) {
    queryParameters['locale'] = opt_locale;
  }

  if (opt_loglevel !== undefined) {
    queryParameters['loglevel'] = opt_loglevel;
  }

  if (opt_plugins !== undefined) {
    queryParameters['plugins'] = opt_plugins;
  }

  /** @type {!Object} */
  var httpRequestParams = {
    method: 'POST',
    url: path,
    json: true,
            params: queryParameters,
    headers: headerParams
  };

  if (opt_extraHttpRequestParams) {
    httpRequestParams = angular.extend(httpRequestParams, opt_extraHttpRequestParams);
  }

  return (/** @type {?} */ (this.http_))(httpRequestParams);
}

/**
 * 
 * 
 * @param {!boolean=} opt_post 
 * @param {!boolean=} opt_apply 
 * @param {!boolean=} opt_delete 
 * @param {!string=} opt_action 
 * @param {!string=} opt_location 
 * @param {!Array<!string>=} opt_propertylist 
 * @param {!number=} opt_maxSize 
 * @param {!angular.$http.Config=} opt_extraHttpRequestParams Extra HTTP parameters to send.
 * @return {!angular.$q.Promise<!API.Client.orgApacheFelixWebconsolePluginsEventInternalPluginServletInfo>}
 */
API.Client.ConfigmgrApi.prototype.orgApacheFelixWebconsolePluginsEventInternalPluginServlet = function(opt_post, opt_apply, opt_delete, opt_action, opt_location, opt_propertylist, opt_maxSize, opt_extraHttpRequestParams) {
  /** @const {string} */
  var path = this.basePath_ + '/system/console/configMgr/org.apache.felix.webconsole.plugins.event.internal.PluginServlet';

  /** @type {!Object} */
  var queryParameters = {};

  /** @type {!Object} */
  var headerParams = angular.extend({}, this.defaultHeaders_);
  if (opt_post !== undefined) {
    queryParameters['post'] = opt_post;
  }

  if (opt_apply !== undefined) {
    queryParameters['apply'] = opt_apply;
  }

  if (opt_delete !== undefined) {
    queryParameters['delete'] = opt_delete;
  }

  if (opt_action !== undefined) {
    queryParameters['action'] = opt_action;
  }

  if (opt_location !== undefined) {
    queryParameters['$location'] = opt_location;
  }

  if (opt_propertylist !== undefined) {
    queryParameters['propertylist'] = opt_propertylist;
  }

  if (opt_maxSize !== undefined) {
    queryParameters['max.size'] = opt_maxSize;
  }

  /** @type {!Object} */
  var httpRequestParams = {
    method: 'POST',
    url: path,
    json: true,
            params: queryParameters,
    headers: headerParams
  };

  if (opt_extraHttpRequestParams) {
    httpRequestParams = angular.extend(httpRequestParams, opt_extraHttpRequestParams);
  }

  return (/** @type {?} */ (this.http_))(httpRequestParams);
}

/**
 * 
 * 
 * @param {!boolean=} opt_post 
 * @param {!boolean=} opt_apply 
 * @param {!boolean=} opt_delete 
 * @param {!string=} opt_action 
 * @param {!string=} opt_location 
 * @param {!Array<!string>=} opt_propertylist 
 * @param {!number=} opt_felixMemoryusageDumpThreshold 
 * @param {!number=} opt_felixMemoryusageDumpInterval 
 * @param {!string=} opt_felixMemoryusageDumpLocation 
 * @param {!angular.$http.Config=} opt_extraHttpRequestParams Extra HTTP parameters to send.
 * @return {!angular.$q.Promise<!API.Client.orgApacheFelixWebconsolePluginsMemoryusageInternalMemoryUsageCoInfo>}
 */
API.Client.ConfigmgrApi.prototype.orgApacheFelixWebconsolePluginsMemoryusageInternalMemoryUsageCo = function(opt_post, opt_apply, opt_delete, opt_action, opt_location, opt_propertylist, opt_felixMemoryusageDumpThreshold, opt_felixMemoryusageDumpInterval, opt_felixMemoryusageDumpLocation, opt_extraHttpRequestParams) {
  /** @const {string} */
  var path = this.basePath_ + '/system/console/configMgr/org.apache.felix.webconsole.plugins.memoryusage.internal.MemoryUsageConfigurator';

  /** @type {!Object} */
  var queryParameters = {};

  /** @type {!Object} */
  var headerParams = angular.extend({}, this.defaultHeaders_);
  if (opt_post !== undefined) {
    queryParameters['post'] = opt_post;
  }

  if (opt_apply !== undefined) {
    queryParameters['apply'] = opt_apply;
  }

  if (opt_delete !== undefined) {
    queryParameters['delete'] = opt_delete;
  }

  if (opt_action !== undefined) {
    queryParameters['action'] = opt_action;
  }

  if (opt_location !== undefined) {
    queryParameters['$location'] = opt_location;
  }

  if (opt_propertylist !== undefined) {
    queryParameters['propertylist'] = opt_propertylist;
  }

  if (opt_felixMemoryusageDumpThreshold !== undefined) {
    queryParameters['felix.memoryusage.dump.threshold'] = opt_felixMemoryusageDumpThreshold;
  }

  if (opt_felixMemoryusageDumpInterval !== undefined) {
    queryParameters['felix.memoryusage.dump.interval'] = opt_felixMemoryusageDumpInterval;
  }

  if (opt_felixMemoryusageDumpLocation !== undefined) {
    queryParameters['felix.memoryusage.dump.location'] = opt_felixMemoryusageDumpLocation;
  }

  /** @type {!Object} */
  var httpRequestParams = {
    method: 'POST',
    url: path,
    json: true,
            params: queryParameters,
    headers: headerParams
  };

  if (opt_extraHttpRequestParams) {
    httpRequestParams = angular.extend(httpRequestParams, opt_extraHttpRequestParams);
  }

  return (/** @type {?} */ (this.http_))(httpRequestParams);
}

/**
 * 
 * 
 * @param {!boolean=} opt_post 
 * @param {!boolean=} opt_apply 
 * @param {!boolean=} opt_delete 
 * @param {!string=} opt_action 
 * @param {!string=} opt_location 
 * @param {!Array<!string>=} opt_propertylist 
 * @param {!boolean=} opt_proxyEnabled 
 * @param {!string=} opt_proxyHost 
 * @param {!number=} opt_proxyPort 
 * @param {!string=} opt_proxyUser 
 * @param {!string=} opt_proxyPassword 
 * @param {!Array<!string>=} opt_proxyExceptions 
 * @param {!angular.$http.Config=} opt_extraHttpRequestParams Extra HTTP parameters to send.
 * @return {!angular.$q.Promise<!API.Client.orgApacheHttpProxyconfiguratorInfo>}
 */
API.Client.ConfigmgrApi.prototype.orgApacheHttpProxyconfigurator = function(opt_post, opt_apply, opt_delete, opt_action, opt_location, opt_propertylist, opt_proxyEnabled, opt_proxyHost, opt_proxyPort, opt_proxyUser, opt_proxyPassword, opt_proxyExceptions, opt_extraHttpRequestParams) {
  /** @const {string} */
  var path = this.basePath_ + '/system/console/configMgr/org.apache.http.proxyconfigurator';

  /** @type {!Object} */
  var queryParameters = {};

  /** @type {!Object} */
  var headerParams = angular.extend({}, this.defaultHeaders_);
  if (opt_post !== undefined) {
    queryParameters['post'] = opt_post;
  }

  if (opt_apply !== undefined) {
    queryParameters['apply'] = opt_apply;
  }

  if (opt_delete !== undefined) {
    queryParameters['delete'] = opt_delete;
  }

  if (opt_action !== undefined) {
    queryParameters['action'] = opt_action;
  }

  if (opt_location !== undefined) {
    queryParameters['$location'] = opt_location;
  }

  if (opt_propertylist !== undefined) {
    queryParameters['propertylist'] = opt_propertylist;
  }

  if (opt_proxyEnabled !== undefined) {
    queryParameters['proxy.enabled'] = opt_proxyEnabled;
  }

  if (opt_proxyHost !== undefined) {
    queryParameters['proxy.host'] = opt_proxyHost;
  }

  if (opt_proxyPort !== undefined) {
    queryParameters['proxy.port'] = opt_proxyPort;
  }

  if (opt_proxyUser !== undefined) {
    queryParameters['proxy.user'] = opt_proxyUser;
  }

  if (opt_proxyPassword !== undefined) {
    queryParameters['proxy.password'] = opt_proxyPassword;
  }

  if (opt_proxyExceptions !== undefined) {
    queryParameters['proxy.exceptions'] = opt_proxyExceptions;
  }

  /** @type {!Object} */
  var httpRequestParams = {
    method: 'POST',
    url: path,
    json: true,
            params: queryParameters,
    headers: headerParams
  };

  if (opt_extraHttpRequestParams) {
    httpRequestParams = angular.extend(httpRequestParams, opt_extraHttpRequestParams);
  }

  return (/** @type {?} */ (this.http_))(httpRequestParams);
}

/**
 * 
 * 
 * @param {!boolean=} opt_post 
 * @param {!boolean=} opt_apply 
 * @param {!boolean=} opt_delete 
 * @param {!string=} opt_action 
 * @param {!string=} opt_location 
 * @param {!Array<!string>=} opt_propertylist 
 * @param {!string=} opt_dir 
 * @param {!angular.$http.Config=} opt_extraHttpRequestParams Extra HTTP parameters to send.
 * @return {!angular.$q.Promise<!API.Client.orgApacheJackrabbitOakPluginsBlobDatastoreDataStoreTextProviderInfo>}
 */
API.Client.ConfigmgrApi.prototype.orgApacheJackrabbitOakPluginsBlobDatastoreDataStoreTextProvider = function(opt_post, opt_apply, opt_delete, opt_action, opt_location, opt_propertylist, opt_dir, opt_extraHttpRequestParams) {
  /** @const {string} */
  var path = this.basePath_ + '/system/console/configMgr/org.apache.jackrabbit.oak.plugins.blob.datastore.DataStoreTextProviderService';

  /** @type {!Object} */
  var queryParameters = {};

  /** @type {!Object} */
  var headerParams = angular.extend({}, this.defaultHeaders_);
  if (opt_post !== undefined) {
    queryParameters['post'] = opt_post;
  }

  if (opt_apply !== undefined) {
    queryParameters['apply'] = opt_apply;
  }

  if (opt_delete !== undefined) {
    queryParameters['delete'] = opt_delete;
  }

  if (opt_action !== undefined) {
    queryParameters['action'] = opt_action;
  }

  if (opt_location !== undefined) {
    queryParameters['$location'] = opt_location;
  }

  if (opt_propertylist !== undefined) {
    queryParameters['propertylist'] = opt_propertylist;
  }

  if (opt_dir !== undefined) {
    queryParameters['dir'] = opt_dir;
  }

  /** @type {!Object} */
  var httpRequestParams = {
    method: 'POST',
    url: path,
    json: true,
            params: queryParameters,
    headers: headerParams
  };

  if (opt_extraHttpRequestParams) {
    httpRequestParams = angular.extend(httpRequestParams, opt_extraHttpRequestParams);
  }

  return (/** @type {?} */ (this.http_))(httpRequestParams);
}

/**
 * 
 * 
 * @param {!boolean=} opt_post 
 * @param {!boolean=} opt_apply 
 * @param {!boolean=} opt_delete 
 * @param {!string=} opt_action 
 * @param {!string=} opt_location 
 * @param {!Array<!string>=} opt_propertylist 
 * @param {!string=} opt_path 
 * @param {!angular.$http.Config=} opt_extraHttpRequestParams Extra HTTP parameters to send.
 * @return {!angular.$q.Promise<!API.Client.orgApacheJackrabbitOakPluginsBlobDatastoreFileDataStoreInfo>}
 */
API.Client.ConfigmgrApi.prototype.orgApacheJackrabbitOakPluginsBlobDatastoreFileDataStore = function(opt_post, opt_apply, opt_delete, opt_action, opt_location, opt_propertylist, opt_path, opt_extraHttpRequestParams) {
  /** @const {string} */
  var path = this.basePath_ + '/system/console/configMgr/org.apache.jackrabbit.oak.plugins.blob.datastore.FileDataStore';

  /** @type {!Object} */
  var queryParameters = {};

  /** @type {!Object} */
  var headerParams = angular.extend({}, this.defaultHeaders_);
  if (opt_post !== undefined) {
    queryParameters['post'] = opt_post;
  }

  if (opt_apply !== undefined) {
    queryParameters['apply'] = opt_apply;
  }

  if (opt_delete !== undefined) {
    queryParameters['delete'] = opt_delete;
  }

  if (opt_action !== undefined) {
    queryParameters['action'] = opt_action;
  }

  if (opt_location !== undefined) {
    queryParameters['$location'] = opt_location;
  }

  if (opt_propertylist !== undefined) {
    queryParameters['propertylist'] = opt_propertylist;
  }

  if (opt_path !== undefined) {
    queryParameters['path'] = opt_path;
  }

  /** @type {!Object} */
  var httpRequestParams = {
    method: 'POST',
    url: path,
    json: true,
            params: queryParameters,
    headers: headerParams
  };

  if (opt_extraHttpRequestParams) {
    httpRequestParams = angular.extend(httpRequestParams, opt_extraHttpRequestParams);
  }

  return (/** @type {?} */ (this.http_))(httpRequestParams);
}

/**
 * 
 * 
 * @param {!boolean=} opt_post 
 * @param {!boolean=} opt_apply 
 * @param {!boolean=} opt_delete 
 * @param {!string=} opt_action 
 * @param {!string=} opt_location 
 * @param {!Array<!string>=} opt_propertylist 
 * @param {!string=} opt_mongouri 
 * @param {!string=} opt_db 
 * @param {!boolean=} opt_socketKeepAlive 
 * @param {!number=} opt_cache 
 * @param {!number=} opt_nodeCachePercentage 
 * @param {!number=} opt_prevDocCachePercentage 
 * @param {!number=} opt_childrenCachePercentage 
 * @param {!number=} opt_diffCachePercentage 
 * @param {!number=} opt_cacheSegmentCount 
 * @param {!number=} opt_cacheStackMoveDistance 
 * @param {!number=} opt_blobCacheSize 
 * @param {!string=} opt_persistentCache 
 * @param {!string=} opt_journalCache 
 * @param {!boolean=} opt_customBlobStore 
 * @param {!number=} opt_journalGCInterval 
 * @param {!number=} opt_journalGCMaxAge 
 * @param {!boolean=} opt_prefetchExternalChanges 
 * @param {!string=} opt_role 
 * @param {!number=} opt_versionGcMaxAgeInSecs 
 * @param {!string=} opt_versionGCExpression 
 * @param {!number=} opt_versionGCTimeLimitInSecs 
 * @param {!number=} opt_blobGcMaxAgeInSecs 
 * @param {!number=} opt_blobTrackSnapshotIntervalInSecs 
 * @param {!string=} opt_repositoryHome 
 * @param {!number=} opt_maxReplicationLagInSecs 
 * @param {!string=} opt_documentStoreType 
 * @param {!boolean=} opt_bundlingDisabled 
 * @param {!number=} opt_updateLimit 
 * @param {!Array<!string>=} opt_persistentCacheIncludes 
 * @param {!string=} opt_leaseCheckMode 
 * @param {!angular.$http.Config=} opt_extraHttpRequestParams Extra HTTP parameters to send.
 * @return {!angular.$q.Promise<!API.Client.orgApacheJackrabbitOakPluginsDocumentDocumentNodeStoreServiceInfo>}
 */
API.Client.ConfigmgrApi.prototype.orgApacheJackrabbitOakPluginsDocumentDocumentNodeStoreService = function(opt_post, opt_apply, opt_delete, opt_action, opt_location, opt_propertylist, opt_mongouri, opt_db, opt_socketKeepAlive, opt_cache, opt_nodeCachePercentage, opt_prevDocCachePercentage, opt_childrenCachePercentage, opt_diffCachePercentage, opt_cacheSegmentCount, opt_cacheStackMoveDistance, opt_blobCacheSize, opt_persistentCache, opt_journalCache, opt_customBlobStore, opt_journalGCInterval, opt_journalGCMaxAge, opt_prefetchExternalChanges, opt_role, opt_versionGcMaxAgeInSecs, opt_versionGCExpression, opt_versionGCTimeLimitInSecs, opt_blobGcMaxAgeInSecs, opt_blobTrackSnapshotIntervalInSecs, opt_repositoryHome, opt_maxReplicationLagInSecs, opt_documentStoreType, opt_bundlingDisabled, opt_updateLimit, opt_persistentCacheIncludes, opt_leaseCheckMode, opt_extraHttpRequestParams) {
  /** @const {string} */
  var path = this.basePath_ + '/system/console/configMgr/org.apache.jackrabbit.oak.plugins.document.DocumentNodeStoreService';

  /** @type {!Object} */
  var queryParameters = {};

  /** @type {!Object} */
  var headerParams = angular.extend({}, this.defaultHeaders_);
  if (opt_post !== undefined) {
    queryParameters['post'] = opt_post;
  }

  if (opt_apply !== undefined) {
    queryParameters['apply'] = opt_apply;
  }

  if (opt_delete !== undefined) {
    queryParameters['delete'] = opt_delete;
  }

  if (opt_action !== undefined) {
    queryParameters['action'] = opt_action;
  }

  if (opt_location !== undefined) {
    queryParameters['$location'] = opt_location;
  }

  if (opt_propertylist !== undefined) {
    queryParameters['propertylist'] = opt_propertylist;
  }

  if (opt_mongouri !== undefined) {
    queryParameters['mongouri'] = opt_mongouri;
  }

  if (opt_db !== undefined) {
    queryParameters['db'] = opt_db;
  }

  if (opt_socketKeepAlive !== undefined) {
    queryParameters['socketKeepAlive'] = opt_socketKeepAlive;
  }

  if (opt_cache !== undefined) {
    queryParameters['cache'] = opt_cache;
  }

  if (opt_nodeCachePercentage !== undefined) {
    queryParameters['nodeCachePercentage'] = opt_nodeCachePercentage;
  }

  if (opt_prevDocCachePercentage !== undefined) {
    queryParameters['prevDocCachePercentage'] = opt_prevDocCachePercentage;
  }

  if (opt_childrenCachePercentage !== undefined) {
    queryParameters['childrenCachePercentage'] = opt_childrenCachePercentage;
  }

  if (opt_diffCachePercentage !== undefined) {
    queryParameters['diffCachePercentage'] = opt_diffCachePercentage;
  }

  if (opt_cacheSegmentCount !== undefined) {
    queryParameters['cacheSegmentCount'] = opt_cacheSegmentCount;
  }

  if (opt_cacheStackMoveDistance !== undefined) {
    queryParameters['cacheStackMoveDistance'] = opt_cacheStackMoveDistance;
  }

  if (opt_blobCacheSize !== undefined) {
    queryParameters['blobCacheSize'] = opt_blobCacheSize;
  }

  if (opt_persistentCache !== undefined) {
    queryParameters['persistentCache'] = opt_persistentCache;
  }

  if (opt_journalCache !== undefined) {
    queryParameters['journalCache'] = opt_journalCache;
  }

  if (opt_customBlobStore !== undefined) {
    queryParameters['customBlobStore'] = opt_customBlobStore;
  }

  if (opt_journalGCInterval !== undefined) {
    queryParameters['journalGCInterval'] = opt_journalGCInterval;
  }

  if (opt_journalGCMaxAge !== undefined) {
    queryParameters['journalGCMaxAge'] = opt_journalGCMaxAge;
  }

  if (opt_prefetchExternalChanges !== undefined) {
    queryParameters['prefetchExternalChanges'] = opt_prefetchExternalChanges;
  }

  if (opt_role !== undefined) {
    queryParameters['role'] = opt_role;
  }

  if (opt_versionGcMaxAgeInSecs !== undefined) {
    queryParameters['versionGcMaxAgeInSecs'] = opt_versionGcMaxAgeInSecs;
  }

  if (opt_versionGCExpression !== undefined) {
    queryParameters['versionGCExpression'] = opt_versionGCExpression;
  }

  if (opt_versionGCTimeLimitInSecs !== undefined) {
    queryParameters['versionGCTimeLimitInSecs'] = opt_versionGCTimeLimitInSecs;
  }

  if (opt_blobGcMaxAgeInSecs !== undefined) {
    queryParameters['blobGcMaxAgeInSecs'] = opt_blobGcMaxAgeInSecs;
  }

  if (opt_blobTrackSnapshotIntervalInSecs !== undefined) {
    queryParameters['blobTrackSnapshotIntervalInSecs'] = opt_blobTrackSnapshotIntervalInSecs;
  }

  if (opt_repositoryHome !== undefined) {
    queryParameters['repository.home'] = opt_repositoryHome;
  }

  if (opt_maxReplicationLagInSecs !== undefined) {
    queryParameters['maxReplicationLagInSecs'] = opt_maxReplicationLagInSecs;
  }

  if (opt_documentStoreType !== undefined) {
    queryParameters['documentStoreType'] = opt_documentStoreType;
  }

  if (opt_bundlingDisabled !== undefined) {
    queryParameters['bundlingDisabled'] = opt_bundlingDisabled;
  }

  if (opt_updateLimit !== undefined) {
    queryParameters['updateLimit'] = opt_updateLimit;
  }

  if (opt_persistentCacheIncludes !== undefined) {
    queryParameters['persistentCacheIncludes'] = opt_persistentCacheIncludes;
  }

  if (opt_leaseCheckMode !== undefined) {
    queryParameters['leaseCheckMode'] = opt_leaseCheckMode;
  }

  /** @type {!Object} */
  var httpRequestParams = {
    method: 'POST',
    url: path,
    json: true,
            params: queryParameters,
    headers: headerParams
  };

  if (opt_extraHttpRequestParams) {
    httpRequestParams = angular.extend(httpRequestParams, opt_extraHttpRequestParams);
  }

  return (/** @type {?} */ (this.http_))(httpRequestParams);
}

/**
 * 
 * 
 * @param {!boolean=} opt_post 
 * @param {!boolean=} opt_apply 
 * @param {!boolean=} opt_delete 
 * @param {!string=} opt_action 
 * @param {!string=} opt_location 
 * @param {!Array<!string>=} opt_propertylist 
 * @param {!Array<!string>=} opt_persistentCacheIncludes 
 * @param {!angular.$http.Config=} opt_extraHttpRequestParams Extra HTTP parameters to send.
 * @return {!angular.$q.Promise<!API.Client.orgApacheJackrabbitOakPluginsDocumentDocumentNodeStoreServicePreInfo>}
 */
API.Client.ConfigmgrApi.prototype.orgApacheJackrabbitOakPluginsDocumentDocumentNodeStoreServicePre = function(opt_post, opt_apply, opt_delete, opt_action, opt_location, opt_propertylist, opt_persistentCacheIncludes, opt_extraHttpRequestParams) {
  /** @const {string} */
  var path = this.basePath_ + '/system/console/configMgr/org.apache.jackrabbit.oak.plugins.document.DocumentNodeStoreServicePreset';

  /** @type {!Object} */
  var queryParameters = {};

  /** @type {!Object} */
  var headerParams = angular.extend({}, this.defaultHeaders_);
  if (opt_post !== undefined) {
    queryParameters['post'] = opt_post;
  }

  if (opt_apply !== undefined) {
    queryParameters['apply'] = opt_apply;
  }

  if (opt_delete !== undefined) {
    queryParameters['delete'] = opt_delete;
  }

  if (opt_action !== undefined) {
    queryParameters['action'] = opt_action;
  }

  if (opt_location !== undefined) {
    queryParameters['$location'] = opt_location;
  }

  if (opt_propertylist !== undefined) {
    queryParameters['propertylist'] = opt_propertylist;
  }

  if (opt_persistentCacheIncludes !== undefined) {
    queryParameters['persistentCacheIncludes'] = opt_persistentCacheIncludes;
  }

  /** @type {!Object} */
  var httpRequestParams = {
    method: 'POST',
    url: path,
    json: true,
            params: queryParameters,
    headers: headerParams
  };

  if (opt_extraHttpRequestParams) {
    httpRequestParams = angular.extend(httpRequestParams, opt_extraHttpRequestParams);
  }

  return (/** @type {?} */ (this.http_))(httpRequestParams);
}

/**
 * 
 * 
 * @param {!boolean=} opt_post 
 * @param {!boolean=} opt_apply 
 * @param {!boolean=} opt_delete 
 * @param {!string=} opt_action 
 * @param {!string=} opt_location 
 * @param {!Array<!string>=} opt_propertylist 
 * @param {!Array<!string>=} opt_includedPaths 
 * @param {!boolean=} opt_enableAsyncObserver 
 * @param {!number=} opt_observerQueueSize 
 * @param {!angular.$http.Config=} opt_extraHttpRequestParams Extra HTTP parameters to send.
 * @return {!angular.$q.Promise<!API.Client.orgApacheJackrabbitOakPluginsDocumentSecondarySecondaryStoreCacInfo>}
 */
API.Client.ConfigmgrApi.prototype.orgApacheJackrabbitOakPluginsDocumentSecondarySecondaryStoreCac = function(opt_post, opt_apply, opt_delete, opt_action, opt_location, opt_propertylist, opt_includedPaths, opt_enableAsyncObserver, opt_observerQueueSize, opt_extraHttpRequestParams) {
  /** @const {string} */
  var path = this.basePath_ + '/system/console/configMgr/org.apache.jackrabbit.oak.plugins.document.secondary.SecondaryStoreCacheService';

  /** @type {!Object} */
  var queryParameters = {};

  /** @type {!Object} */
  var headerParams = angular.extend({}, this.defaultHeaders_);
  if (opt_post !== undefined) {
    queryParameters['post'] = opt_post;
  }

  if (opt_apply !== undefined) {
    queryParameters['apply'] = opt_apply;
  }

  if (opt_delete !== undefined) {
    queryParameters['delete'] = opt_delete;
  }

  if (opt_action !== undefined) {
    queryParameters['action'] = opt_action;
  }

  if (opt_location !== undefined) {
    queryParameters['$location'] = opt_location;
  }

  if (opt_propertylist !== undefined) {
    queryParameters['propertylist'] = opt_propertylist;
  }

  if (opt_includedPaths !== undefined) {
    queryParameters['includedPaths'] = opt_includedPaths;
  }

  if (opt_enableAsyncObserver !== undefined) {
    queryParameters['enableAsyncObserver'] = opt_enableAsyncObserver;
  }

  if (opt_observerQueueSize !== undefined) {
    queryParameters['observerQueueSize'] = opt_observerQueueSize;
  }

  /** @type {!Object} */
  var httpRequestParams = {
    method: 'POST',
    url: path,
    json: true,
            params: queryParameters,
    headers: headerParams
  };

  if (opt_extraHttpRequestParams) {
    httpRequestParams = angular.extend(httpRequestParams, opt_extraHttpRequestParams);
  }

  return (/** @type {?} */ (this.http_))(httpRequestParams);
}

/**
 * 
 * 
 * @param {!boolean=} opt_post 
 * @param {!boolean=} opt_apply 
 * @param {!boolean=} opt_delete 
 * @param {!string=} opt_action 
 * @param {!string=} opt_location 
 * @param {!Array<!string>=} opt_propertylist 
 * @param {!Array<!string>=} opt_asyncConfigs 
 * @param {!number=} opt_leaseTimeOutMinutes 
 * @param {!number=} opt_failingIndexTimeoutSeconds 
 * @param {!number=} opt_errorWarnIntervalSeconds 
 * @param {!angular.$http.Config=} opt_extraHttpRequestParams Extra HTTP parameters to send.
 * @return {!angular.$q.Promise<!API.Client.orgApacheJackrabbitOakPluginsIndexAsyncIndexerServiceInfo>}
 */
API.Client.ConfigmgrApi.prototype.orgApacheJackrabbitOakPluginsIndexAsyncIndexerService = function(opt_post, opt_apply, opt_delete, opt_action, opt_location, opt_propertylist, opt_asyncConfigs, opt_leaseTimeOutMinutes, opt_failingIndexTimeoutSeconds, opt_errorWarnIntervalSeconds, opt_extraHttpRequestParams) {
  /** @const {string} */
  var path = this.basePath_ + '/system/console/configMgr/org.apache.jackrabbit.oak.plugins.index.AsyncIndexerService';

  /** @type {!Object} */
  var queryParameters = {};

  /** @type {!Object} */
  var headerParams = angular.extend({}, this.defaultHeaders_);
  if (opt_post !== undefined) {
    queryParameters['post'] = opt_post;
  }

  if (opt_apply !== undefined) {
    queryParameters['apply'] = opt_apply;
  }

  if (opt_delete !== undefined) {
    queryParameters['delete'] = opt_delete;
  }

  if (opt_action !== undefined) {
    queryParameters['action'] = opt_action;
  }

  if (opt_location !== undefined) {
    queryParameters['$location'] = opt_location;
  }

  if (opt_propertylist !== undefined) {
    queryParameters['propertylist'] = opt_propertylist;
  }

  if (opt_asyncConfigs !== undefined) {
    queryParameters['asyncConfigs'] = opt_asyncConfigs;
  }

  if (opt_leaseTimeOutMinutes !== undefined) {
    queryParameters['leaseTimeOutMinutes'] = opt_leaseTimeOutMinutes;
  }

  if (opt_failingIndexTimeoutSeconds !== undefined) {
    queryParameters['failingIndexTimeoutSeconds'] = opt_failingIndexTimeoutSeconds;
  }

  if (opt_errorWarnIntervalSeconds !== undefined) {
    queryParameters['errorWarnIntervalSeconds'] = opt_errorWarnIntervalSeconds;
  }

  /** @type {!Object} */
  var httpRequestParams = {
    method: 'POST',
    url: path,
    json: true,
            params: queryParameters,
    headers: headerParams
  };

  if (opt_extraHttpRequestParams) {
    httpRequestParams = angular.extend(httpRequestParams, opt_extraHttpRequestParams);
  }

  return (/** @type {?} */ (this.http_))(httpRequestParams);
}

/**
 * 
 * 
 * @param {!boolean=} opt_post 
 * @param {!boolean=} opt_apply 
 * @param {!boolean=} opt_delete 
 * @param {!string=} opt_action 
 * @param {!string=} opt_location 
 * @param {!Array<!string>=} opt_propertylist 
 * @param {!boolean=} opt_disabled 
 * @param {!boolean=} opt_debug 
 * @param {!string=} opt_localIndexDir 
 * @param {!boolean=} opt_enableOpenIndexAsync 
 * @param {!number=} opt_threadPoolSize 
 * @param {!boolean=} opt_prefetchIndexFiles 
 * @param {!number=} opt_extractedTextCacheSizeInMB 
 * @param {!number=} opt_extractedTextCacheExpiryInSecs 
 * @param {!boolean=} opt_alwaysUsePreExtractedCache 
 * @param {!number=} opt_booleanClauseLimit 
 * @param {!boolean=} opt_enableHybridIndexing 
 * @param {!number=} opt_hybridQueueSize 
 * @param {!boolean=} opt_disableStoredIndexDefinition 
 * @param {!boolean=} opt_deletedBlobsCollectionEnabled 
 * @param {!number=} opt_propIndexCleanerIntervalInSecs 
 * @param {!boolean=} opt_enableSingleBlobIndexFiles 
 * @param {!angular.$http.Config=} opt_extraHttpRequestParams Extra HTTP parameters to send.
 * @return {!angular.$q.Promise<!API.Client.orgApacheJackrabbitOakPluginsIndexLuceneLuceneIndexProviderServInfo>}
 */
API.Client.ConfigmgrApi.prototype.orgApacheJackrabbitOakPluginsIndexLuceneLuceneIndexProviderServ = function(opt_post, opt_apply, opt_delete, opt_action, opt_location, opt_propertylist, opt_disabled, opt_debug, opt_localIndexDir, opt_enableOpenIndexAsync, opt_threadPoolSize, opt_prefetchIndexFiles, opt_extractedTextCacheSizeInMB, opt_extractedTextCacheExpiryInSecs, opt_alwaysUsePreExtractedCache, opt_booleanClauseLimit, opt_enableHybridIndexing, opt_hybridQueueSize, opt_disableStoredIndexDefinition, opt_deletedBlobsCollectionEnabled, opt_propIndexCleanerIntervalInSecs, opt_enableSingleBlobIndexFiles, opt_extraHttpRequestParams) {
  /** @const {string} */
  var path = this.basePath_ + '/system/console/configMgr/org.apache.jackrabbit.oak.plugins.index.lucene.LuceneIndexProviderService';

  /** @type {!Object} */
  var queryParameters = {};

  /** @type {!Object} */
  var headerParams = angular.extend({}, this.defaultHeaders_);
  if (opt_post !== undefined) {
    queryParameters['post'] = opt_post;
  }

  if (opt_apply !== undefined) {
    queryParameters['apply'] = opt_apply;
  }

  if (opt_delete !== undefined) {
    queryParameters['delete'] = opt_delete;
  }

  if (opt_action !== undefined) {
    queryParameters['action'] = opt_action;
  }

  if (opt_location !== undefined) {
    queryParameters['$location'] = opt_location;
  }

  if (opt_propertylist !== undefined) {
    queryParameters['propertylist'] = opt_propertylist;
  }

  if (opt_disabled !== undefined) {
    queryParameters['disabled'] = opt_disabled;
  }

  if (opt_debug !== undefined) {
    queryParameters['debug'] = opt_debug;
  }

  if (opt_localIndexDir !== undefined) {
    queryParameters['localIndexDir'] = opt_localIndexDir;
  }

  if (opt_enableOpenIndexAsync !== undefined) {
    queryParameters['enableOpenIndexAsync'] = opt_enableOpenIndexAsync;
  }

  if (opt_threadPoolSize !== undefined) {
    queryParameters['threadPoolSize'] = opt_threadPoolSize;
  }

  if (opt_prefetchIndexFiles !== undefined) {
    queryParameters['prefetchIndexFiles'] = opt_prefetchIndexFiles;
  }

  if (opt_extractedTextCacheSizeInMB !== undefined) {
    queryParameters['extractedTextCacheSizeInMB'] = opt_extractedTextCacheSizeInMB;
  }

  if (opt_extractedTextCacheExpiryInSecs !== undefined) {
    queryParameters['extractedTextCacheExpiryInSecs'] = opt_extractedTextCacheExpiryInSecs;
  }

  if (opt_alwaysUsePreExtractedCache !== undefined) {
    queryParameters['alwaysUsePreExtractedCache'] = opt_alwaysUsePreExtractedCache;
  }

  if (opt_booleanClauseLimit !== undefined) {
    queryParameters['booleanClauseLimit'] = opt_booleanClauseLimit;
  }

  if (opt_enableHybridIndexing !== undefined) {
    queryParameters['enableHybridIndexing'] = opt_enableHybridIndexing;
  }

  if (opt_hybridQueueSize !== undefined) {
    queryParameters['hybridQueueSize'] = opt_hybridQueueSize;
  }

  if (opt_disableStoredIndexDefinition !== undefined) {
    queryParameters['disableStoredIndexDefinition'] = opt_disableStoredIndexDefinition;
  }

  if (opt_deletedBlobsCollectionEnabled !== undefined) {
    queryParameters['deletedBlobsCollectionEnabled'] = opt_deletedBlobsCollectionEnabled;
  }

  if (opt_propIndexCleanerIntervalInSecs !== undefined) {
    queryParameters['propIndexCleanerIntervalInSecs'] = opt_propIndexCleanerIntervalInSecs;
  }

  if (opt_enableSingleBlobIndexFiles !== undefined) {
    queryParameters['enableSingleBlobIndexFiles'] = opt_enableSingleBlobIndexFiles;
  }

  /** @type {!Object} */
  var httpRequestParams = {
    method: 'POST',
    url: path,
    json: true,
            params: queryParameters,
    headers: headerParams
  };

  if (opt_extraHttpRequestParams) {
    httpRequestParams = angular.extend(httpRequestParams, opt_extraHttpRequestParams);
  }

  return (/** @type {?} */ (this.http_))(httpRequestParams);
}

/**
 * 
 * 
 * @param {!boolean=} opt_post 
 * @param {!boolean=} opt_apply 
 * @param {!boolean=} opt_delete 
 * @param {!string=} opt_action 
 * @param {!string=} opt_location 
 * @param {!Array<!string>=} opt_propertylist 
 * @param {!string=} opt_solrHomePath 
 * @param {!string=} opt_solrCoreName 
 * @param {!angular.$http.Config=} opt_extraHttpRequestParams Extra HTTP parameters to send.
 * @return {!angular.$q.Promise<!API.Client.orgApacheJackrabbitOakPluginsIndexSolrOsgiEmbeddedSolrServerCoInfo>}
 */
API.Client.ConfigmgrApi.prototype.orgApacheJackrabbitOakPluginsIndexSolrOsgiEmbeddedSolrServerCo = function(opt_post, opt_apply, opt_delete, opt_action, opt_location, opt_propertylist, opt_solrHomePath, opt_solrCoreName, opt_extraHttpRequestParams) {
  /** @const {string} */
  var path = this.basePath_ + '/system/console/configMgr/org.apache.jackrabbit.oak.plugins.index.solr.osgi.EmbeddedSolrServerConfigurationProvider';

  /** @type {!Object} */
  var queryParameters = {};

  /** @type {!Object} */
  var headerParams = angular.extend({}, this.defaultHeaders_);
  if (opt_post !== undefined) {
    queryParameters['post'] = opt_post;
  }

  if (opt_apply !== undefined) {
    queryParameters['apply'] = opt_apply;
  }

  if (opt_delete !== undefined) {
    queryParameters['delete'] = opt_delete;
  }

  if (opt_action !== undefined) {
    queryParameters['action'] = opt_action;
  }

  if (opt_location !== undefined) {
    queryParameters['$location'] = opt_location;
  }

  if (opt_propertylist !== undefined) {
    queryParameters['propertylist'] = opt_propertylist;
  }

  if (opt_solrHomePath !== undefined) {
    queryParameters['solr.home.path'] = opt_solrHomePath;
  }

  if (opt_solrCoreName !== undefined) {
    queryParameters['solr.core.name'] = opt_solrCoreName;
  }

  /** @type {!Object} */
  var httpRequestParams = {
    method: 'POST',
    url: path,
    json: true,
            params: queryParameters,
    headers: headerParams
  };

  if (opt_extraHttpRequestParams) {
    httpRequestParams = angular.extend(httpRequestParams, opt_extraHttpRequestParams);
  }

  return (/** @type {?} */ (this.http_))(httpRequestParams);
}

/**
 * 
 * 
 * @param {!boolean=} opt_post 
 * @param {!boolean=} opt_apply 
 * @param {!boolean=} opt_delete 
 * @param {!string=} opt_action 
 * @param {!string=} opt_location 
 * @param {!Array<!string>=} opt_propertylist 
 * @param {!boolean=} opt_enabled 
 * @param {!angular.$http.Config=} opt_extraHttpRequestParams Extra HTTP parameters to send.
 * @return {!angular.$q.Promise<!API.Client.orgApacheJackrabbitOakPluginsIndexSolrOsgiNodeStateSolrServersInfo>}
 */
API.Client.ConfigmgrApi.prototype.orgApacheJackrabbitOakPluginsIndexSolrOsgiNodeStateSolrServers = function(opt_post, opt_apply, opt_delete, opt_action, opt_location, opt_propertylist, opt_enabled, opt_extraHttpRequestParams) {
  /** @const {string} */
  var path = this.basePath_ + '/system/console/configMgr/org.apache.jackrabbit.oak.plugins.index.solr.osgi.NodeStateSolrServersObserverService';

  /** @type {!Object} */
  var queryParameters = {};

  /** @type {!Object} */
  var headerParams = angular.extend({}, this.defaultHeaders_);
  if (opt_post !== undefined) {
    queryParameters['post'] = opt_post;
  }

  if (opt_apply !== undefined) {
    queryParameters['apply'] = opt_apply;
  }

  if (opt_delete !== undefined) {
    queryParameters['delete'] = opt_delete;
  }

  if (opt_action !== undefined) {
    queryParameters['action'] = opt_action;
  }

  if (opt_location !== undefined) {
    queryParameters['$location'] = opt_location;
  }

  if (opt_propertylist !== undefined) {
    queryParameters['propertylist'] = opt_propertylist;
  }

  if (opt_enabled !== undefined) {
    queryParameters['enabled'] = opt_enabled;
  }

  /** @type {!Object} */
  var httpRequestParams = {
    method: 'POST',
    url: path,
    json: true,
            params: queryParameters,
    headers: headerParams
  };

  if (opt_extraHttpRequestParams) {
    httpRequestParams = angular.extend(httpRequestParams, opt_extraHttpRequestParams);
  }

  return (/** @type {?} */ (this.http_))(httpRequestParams);
}

/**
 * 
 * 
 * @param {!boolean=} opt_post 
 * @param {!boolean=} opt_apply 
 * @param {!boolean=} opt_delete 
 * @param {!string=} opt_action 
 * @param {!string=} opt_location 
 * @param {!Array<!string>=} opt_propertylist 
 * @param {!string=} opt_pathDescField 
 * @param {!string=} opt_pathChildField 
 * @param {!string=} opt_pathParentField 
 * @param {!string=} opt_pathExactField 
 * @param {!string=} opt_catchAllField 
 * @param {!string=} opt_collapsedPathField 
 * @param {!string=} opt_pathDepthField 
 * @param {!string=} opt_commitPolicy 
 * @param {!number=} opt_rows 
 * @param {!boolean=} opt_pathRestrictions 
 * @param {!boolean=} opt_propertyRestrictions 
 * @param {!boolean=} opt_primarytypesRestrictions 
 * @param {!Array<!string>=} opt_ignoredProperties 
 * @param {!Array<!string>=} opt_usedProperties 
 * @param {!Array<!string>=} opt_typeMappings 
 * @param {!Array<!string>=} opt_propertyMappings 
 * @param {!boolean=} opt_collapseJcrcontentNodes 
 * @param {!angular.$http.Config=} opt_extraHttpRequestParams Extra HTTP parameters to send.
 * @return {!angular.$q.Promise<!API.Client.orgApacheJackrabbitOakPluginsIndexSolrOsgiOakSolrConfigurationInfo>}
 */
API.Client.ConfigmgrApi.prototype.orgApacheJackrabbitOakPluginsIndexSolrOsgiOakSolrConfiguration = function(opt_post, opt_apply, opt_delete, opt_action, opt_location, opt_propertylist, opt_pathDescField, opt_pathChildField, opt_pathParentField, opt_pathExactField, opt_catchAllField, opt_collapsedPathField, opt_pathDepthField, opt_commitPolicy, opt_rows, opt_pathRestrictions, opt_propertyRestrictions, opt_primarytypesRestrictions, opt_ignoredProperties, opt_usedProperties, opt_typeMappings, opt_propertyMappings, opt_collapseJcrcontentNodes, opt_extraHttpRequestParams) {
  /** @const {string} */
  var path = this.basePath_ + '/system/console/configMgr/org.apache.jackrabbit.oak.plugins.index.solr.osgi.OakSolrConfigurationProviderService';

  /** @type {!Object} */
  var queryParameters = {};

  /** @type {!Object} */
  var headerParams = angular.extend({}, this.defaultHeaders_);
  if (opt_post !== undefined) {
    queryParameters['post'] = opt_post;
  }

  if (opt_apply !== undefined) {
    queryParameters['apply'] = opt_apply;
  }

  if (opt_delete !== undefined) {
    queryParameters['delete'] = opt_delete;
  }

  if (opt_action !== undefined) {
    queryParameters['action'] = opt_action;
  }

  if (opt_location !== undefined) {
    queryParameters['$location'] = opt_location;
  }

  if (opt_propertylist !== undefined) {
    queryParameters['propertylist'] = opt_propertylist;
  }

  if (opt_pathDescField !== undefined) {
    queryParameters['path.desc.field'] = opt_pathDescField;
  }

  if (opt_pathChildField !== undefined) {
    queryParameters['path.child.field'] = opt_pathChildField;
  }

  if (opt_pathParentField !== undefined) {
    queryParameters['path.parent.field'] = opt_pathParentField;
  }

  if (opt_pathExactField !== undefined) {
    queryParameters['path.exact.field'] = opt_pathExactField;
  }

  if (opt_catchAllField !== undefined) {
    queryParameters['catch.all.field'] = opt_catchAllField;
  }

  if (opt_collapsedPathField !== undefined) {
    queryParameters['collapsed.path.field'] = opt_collapsedPathField;
  }

  if (opt_pathDepthField !== undefined) {
    queryParameters['path.depth.field'] = opt_pathDepthField;
  }

  if (opt_commitPolicy !== undefined) {
    queryParameters['commit.policy'] = opt_commitPolicy;
  }

  if (opt_rows !== undefined) {
    queryParameters['rows'] = opt_rows;
  }

  if (opt_pathRestrictions !== undefined) {
    queryParameters['path.restrictions'] = opt_pathRestrictions;
  }

  if (opt_propertyRestrictions !== undefined) {
    queryParameters['property.restrictions'] = opt_propertyRestrictions;
  }

  if (opt_primarytypesRestrictions !== undefined) {
    queryParameters['primarytypes.restrictions'] = opt_primarytypesRestrictions;
  }

  if (opt_ignoredProperties !== undefined) {
    queryParameters['ignored.properties'] = opt_ignoredProperties;
  }

  if (opt_usedProperties !== undefined) {
    queryParameters['used.properties'] = opt_usedProperties;
  }

  if (opt_typeMappings !== undefined) {
    queryParameters['type.mappings'] = opt_typeMappings;
  }

  if (opt_propertyMappings !== undefined) {
    queryParameters['property.mappings'] = opt_propertyMappings;
  }

  if (opt_collapseJcrcontentNodes !== undefined) {
    queryParameters['collapse.jcrcontent.nodes'] = opt_collapseJcrcontentNodes;
  }

  /** @type {!Object} */
  var httpRequestParams = {
    method: 'POST',
    url: path,
    json: true,
            params: queryParameters,
    headers: headerParams
  };

  if (opt_extraHttpRequestParams) {
    httpRequestParams = angular.extend(httpRequestParams, opt_extraHttpRequestParams);
  }

  return (/** @type {?} */ (this.http_))(httpRequestParams);
}

/**
 * 
 * 
 * @param {!boolean=} opt_post 
 * @param {!boolean=} opt_apply 
 * @param {!boolean=} opt_delete 
 * @param {!string=} opt_action 
 * @param {!string=} opt_location 
 * @param {!Array<!string>=} opt_propertylist 
 * @param {!string=} opt_solrHttpUrl 
 * @param {!string=} opt_solrZkHost 
 * @param {!string=} opt_solrCollection 
 * @param {!number=} opt_solrSocketTimeout 
 * @param {!number=} opt_solrConnectionTimeout 
 * @param {!number=} opt_solrShardsNo 
 * @param {!number=} opt_solrReplicationFactor 
 * @param {!string=} opt_solrConfDir 
 * @param {!angular.$http.Config=} opt_extraHttpRequestParams Extra HTTP parameters to send.
 * @return {!angular.$q.Promise<!API.Client.orgApacheJackrabbitOakPluginsIndexSolrOsgiRemoteSolrServerConfInfo>}
 */
API.Client.ConfigmgrApi.prototype.orgApacheJackrabbitOakPluginsIndexSolrOsgiRemoteSolrServerConf = function(opt_post, opt_apply, opt_delete, opt_action, opt_location, opt_propertylist, opt_solrHttpUrl, opt_solrZkHost, opt_solrCollection, opt_solrSocketTimeout, opt_solrConnectionTimeout, opt_solrShardsNo, opt_solrReplicationFactor, opt_solrConfDir, opt_extraHttpRequestParams) {
  /** @const {string} */
  var path = this.basePath_ + '/system/console/configMgr/org.apache.jackrabbit.oak.plugins.index.solr.osgi.RemoteSolrServerConfigurationProvider';

  /** @type {!Object} */
  var queryParameters = {};

  /** @type {!Object} */
  var headerParams = angular.extend({}, this.defaultHeaders_);
  if (opt_post !== undefined) {
    queryParameters['post'] = opt_post;
  }

  if (opt_apply !== undefined) {
    queryParameters['apply'] = opt_apply;
  }

  if (opt_delete !== undefined) {
    queryParameters['delete'] = opt_delete;
  }

  if (opt_action !== undefined) {
    queryParameters['action'] = opt_action;
  }

  if (opt_location !== undefined) {
    queryParameters['$location'] = opt_location;
  }

  if (opt_propertylist !== undefined) {
    queryParameters['propertylist'] = opt_propertylist;
  }

  if (opt_solrHttpUrl !== undefined) {
    queryParameters['solr.http.url'] = opt_solrHttpUrl;
  }

  if (opt_solrZkHost !== undefined) {
    queryParameters['solr.zk.host'] = opt_solrZkHost;
  }

  if (opt_solrCollection !== undefined) {
    queryParameters['solr.collection'] = opt_solrCollection;
  }

  if (opt_solrSocketTimeout !== undefined) {
    queryParameters['solr.socket.timeout'] = opt_solrSocketTimeout;
  }

  if (opt_solrConnectionTimeout !== undefined) {
    queryParameters['solr.connection.timeout'] = opt_solrConnectionTimeout;
  }

  if (opt_solrShardsNo !== undefined) {
    queryParameters['solr.shards.no'] = opt_solrShardsNo;
  }

  if (opt_solrReplicationFactor !== undefined) {
    queryParameters['solr.replication.factor'] = opt_solrReplicationFactor;
  }

  if (opt_solrConfDir !== undefined) {
    queryParameters['solr.conf.dir'] = opt_solrConfDir;
  }

  /** @type {!Object} */
  var httpRequestParams = {
    method: 'POST',
    url: path,
    json: true,
            params: queryParameters,
    headers: headerParams
  };

  if (opt_extraHttpRequestParams) {
    httpRequestParams = angular.extend(httpRequestParams, opt_extraHttpRequestParams);
  }

  return (/** @type {?} */ (this.http_))(httpRequestParams);
}

/**
 * 
 * 
 * @param {!boolean=} opt_post 
 * @param {!boolean=} opt_apply 
 * @param {!boolean=} opt_delete 
 * @param {!string=} opt_action 
 * @param {!string=} opt_location 
 * @param {!Array<!string>=} opt_propertylist 
 * @param {!boolean=} opt_queryAggregation 
 * @param {!angular.$http.Config=} opt_extraHttpRequestParams Extra HTTP parameters to send.
 * @return {!angular.$q.Promise<!API.Client.orgApacheJackrabbitOakPluginsIndexSolrOsgiSolrQueryIndexProvidInfo>}
 */
API.Client.ConfigmgrApi.prototype.orgApacheJackrabbitOakPluginsIndexSolrOsgiSolrQueryIndexProvid = function(opt_post, opt_apply, opt_delete, opt_action, opt_location, opt_propertylist, opt_queryAggregation, opt_extraHttpRequestParams) {
  /** @const {string} */
  var path = this.basePath_ + '/system/console/configMgr/org.apache.jackrabbit.oak.plugins.index.solr.osgi.SolrQueryIndexProviderService';

  /** @type {!Object} */
  var queryParameters = {};

  /** @type {!Object} */
  var headerParams = angular.extend({}, this.defaultHeaders_);
  if (opt_post !== undefined) {
    queryParameters['post'] = opt_post;
  }

  if (opt_apply !== undefined) {
    queryParameters['apply'] = opt_apply;
  }

  if (opt_delete !== undefined) {
    queryParameters['delete'] = opt_delete;
  }

  if (opt_action !== undefined) {
    queryParameters['action'] = opt_action;
  }

  if (opt_location !== undefined) {
    queryParameters['$location'] = opt_location;
  }

  if (opt_propertylist !== undefined) {
    queryParameters['propertylist'] = opt_propertylist;
  }

  if (opt_queryAggregation !== undefined) {
    queryParameters['query.aggregation'] = opt_queryAggregation;
  }

  /** @type {!Object} */
  var httpRequestParams = {
    method: 'POST',
    url: path,
    json: true,
            params: queryParameters,
    headers: headerParams
  };

  if (opt_extraHttpRequestParams) {
    httpRequestParams = angular.extend(httpRequestParams, opt_extraHttpRequestParams);
  }

  return (/** @type {?} */ (this.http_))(httpRequestParams);
}

/**
 * 
 * 
 * @param {!boolean=} opt_post 
 * @param {!boolean=} opt_apply 
 * @param {!boolean=} opt_delete 
 * @param {!string=} opt_action 
 * @param {!string=} opt_location 
 * @param {!Array<!string>=} opt_propertylist 
 * @param {!string=} opt_serverType 
 * @param {!angular.$http.Config=} opt_extraHttpRequestParams Extra HTTP parameters to send.
 * @return {!angular.$q.Promise<!API.Client.orgApacheJackrabbitOakPluginsIndexSolrOsgiSolrServerProviderSeInfo>}
 */
API.Client.ConfigmgrApi.prototype.orgApacheJackrabbitOakPluginsIndexSolrOsgiSolrServerProviderSe = function(opt_post, opt_apply, opt_delete, opt_action, opt_location, opt_propertylist, opt_serverType, opt_extraHttpRequestParams) {
  /** @const {string} */
  var path = this.basePath_ + '/system/console/configMgr/org.apache.jackrabbit.oak.plugins.index.solr.osgi.SolrServerProviderService';

  /** @type {!Object} */
  var queryParameters = {};

  /** @type {!Object} */
  var headerParams = angular.extend({}, this.defaultHeaders_);
  if (opt_post !== undefined) {
    queryParameters['post'] = opt_post;
  }

  if (opt_apply !== undefined) {
    queryParameters['apply'] = opt_apply;
  }

  if (opt_delete !== undefined) {
    queryParameters['delete'] = opt_delete;
  }

  if (opt_action !== undefined) {
    queryParameters['action'] = opt_action;
  }

  if (opt_location !== undefined) {
    queryParameters['$location'] = opt_location;
  }

  if (opt_propertylist !== undefined) {
    queryParameters['propertylist'] = opt_propertylist;
  }

  if (opt_serverType !== undefined) {
    queryParameters['server.type'] = opt_serverType;
  }

  /** @type {!Object} */
  var httpRequestParams = {
    method: 'POST',
    url: path,
    json: true,
            params: queryParameters,
    headers: headerParams
  };

  if (opt_extraHttpRequestParams) {
    httpRequestParams = angular.extend(httpRequestParams, opt_extraHttpRequestParams);
  }

  return (/** @type {?} */ (this.http_))(httpRequestParams);
}

/**
 * 
 * 
 * @param {!boolean=} opt_post 
 * @param {!boolean=} opt_apply 
 * @param {!boolean=} opt_delete 
 * @param {!string=} opt_action 
 * @param {!string=} opt_location 
 * @param {!Array<!string>=} opt_propertylist 
 * @param {!string=} opt_providerType 
 * @param {!angular.$http.Config=} opt_extraHttpRequestParams Extra HTTP parameters to send.
 * @return {!angular.$q.Promise<!API.Client.orgApacheJackrabbitOakPluginsMetricStatisticsProviderFactoryInfo>}
 */
API.Client.ConfigmgrApi.prototype.orgApacheJackrabbitOakPluginsMetricStatisticsProviderFactory = function(opt_post, opt_apply, opt_delete, opt_action, opt_location, opt_propertylist, opt_providerType, opt_extraHttpRequestParams) {
  /** @const {string} */
  var path = this.basePath_ + '/system/console/configMgr/org.apache.jackrabbit.oak.plugins.metric.StatisticsProviderFactory';

  /** @type {!Object} */
  var queryParameters = {};

  /** @type {!Object} */
  var headerParams = angular.extend({}, this.defaultHeaders_);
  if (opt_post !== undefined) {
    queryParameters['post'] = opt_post;
  }

  if (opt_apply !== undefined) {
    queryParameters['apply'] = opt_apply;
  }

  if (opt_delete !== undefined) {
    queryParameters['delete'] = opt_delete;
  }

  if (opt_action !== undefined) {
    queryParameters['action'] = opt_action;
  }

  if (opt_location !== undefined) {
    queryParameters['$location'] = opt_location;
  }

  if (opt_propertylist !== undefined) {
    queryParameters['propertylist'] = opt_propertylist;
  }

  if (opt_providerType !== undefined) {
    queryParameters['providerType'] = opt_providerType;
  }

  /** @type {!Object} */
  var httpRequestParams = {
    method: 'POST',
    url: path,
    json: true,
            params: queryParameters,
    headers: headerParams
  };

  if (opt_extraHttpRequestParams) {
    httpRequestParams = angular.extend(httpRequestParams, opt_extraHttpRequestParams);
  }

  return (/** @type {?} */ (this.http_))(httpRequestParams);
}

/**
 * 
 * 
 * @param {!boolean=} opt_post 
 * @param {!boolean=} opt_apply 
 * @param {!boolean=} opt_delete 
 * @param {!string=} opt_action 
 * @param {!string=} opt_location 
 * @param {!Array<!string>=} opt_propertylist 
 * @param {!number=} opt_maxItems 
 * @param {!number=} opt_maxPathDepth 
 * @param {!boolean=} opt_enabled 
 * @param {!angular.$http.Config=} opt_extraHttpRequestParams Extra HTTP parameters to send.
 * @return {!angular.$q.Promise<!API.Client.orgApacheJackrabbitOakPluginsObservationChangeCollectorProviderInfo>}
 */
API.Client.ConfigmgrApi.prototype.orgApacheJackrabbitOakPluginsObservationChangeCollectorProvider = function(opt_post, opt_apply, opt_delete, opt_action, opt_location, opt_propertylist, opt_maxItems, opt_maxPathDepth, opt_enabled, opt_extraHttpRequestParams) {
  /** @const {string} */
  var path = this.basePath_ + '/system/console/configMgr/org.apache.jackrabbit.oak.plugins.observation.ChangeCollectorProvider';

  /** @type {!Object} */
  var queryParameters = {};

  /** @type {!Object} */
  var headerParams = angular.extend({}, this.defaultHeaders_);
  if (opt_post !== undefined) {
    queryParameters['post'] = opt_post;
  }

  if (opt_apply !== undefined) {
    queryParameters['apply'] = opt_apply;
  }

  if (opt_delete !== undefined) {
    queryParameters['delete'] = opt_delete;
  }

  if (opt_action !== undefined) {
    queryParameters['action'] = opt_action;
  }

  if (opt_location !== undefined) {
    queryParameters['$location'] = opt_location;
  }

  if (opt_propertylist !== undefined) {
    queryParameters['propertylist'] = opt_propertylist;
  }

  if (opt_maxItems !== undefined) {
    queryParameters['maxItems'] = opt_maxItems;
  }

  if (opt_maxPathDepth !== undefined) {
    queryParameters['maxPathDepth'] = opt_maxPathDepth;
  }

  if (opt_enabled !== undefined) {
    queryParameters['enabled'] = opt_enabled;
  }

  /** @type {!Object} */
  var httpRequestParams = {
    method: 'POST',
    url: path,
    json: true,
            params: queryParameters,
    headers: headerParams
  };

  if (opt_extraHttpRequestParams) {
    httpRequestParams = angular.extend(httpRequestParams, opt_extraHttpRequestParams);
  }

  return (/** @type {?} */ (this.http_))(httpRequestParams);
}

/**
 * 
 * 
 * @param {!boolean=} opt_post 
 * @param {!boolean=} opt_apply 
 * @param {!boolean=} opt_delete 
 * @param {!string=} opt_action 
 * @param {!string=} opt_location 
 * @param {!Array<!string>=} opt_propertylist 
 * @param {!number=} opt_queryLimitInMemory 
 * @param {!number=} opt_queryLimitReads 
 * @param {!boolean=} opt_queryFailTraversal 
 * @param {!boolean=} opt_fastQuerySize 
 * @param {!angular.$http.Config=} opt_extraHttpRequestParams Extra HTTP parameters to send.
 * @return {!angular.$q.Promise<!API.Client.orgApacheJackrabbitOakQueryQueryEngineSettingsServiceInfo>}
 */
API.Client.ConfigmgrApi.prototype.orgApacheJackrabbitOakQueryQueryEngineSettingsService = function(opt_post, opt_apply, opt_delete, opt_action, opt_location, opt_propertylist, opt_queryLimitInMemory, opt_queryLimitReads, opt_queryFailTraversal, opt_fastQuerySize, opt_extraHttpRequestParams) {
  /** @const {string} */
  var path = this.basePath_ + '/system/console/configMgr/org.apache.jackrabbit.oak.query.QueryEngineSettingsService';

  /** @type {!Object} */
  var queryParameters = {};

  /** @type {!Object} */
  var headerParams = angular.extend({}, this.defaultHeaders_);
  if (opt_post !== undefined) {
    queryParameters['post'] = opt_post;
  }

  if (opt_apply !== undefined) {
    queryParameters['apply'] = opt_apply;
  }

  if (opt_delete !== undefined) {
    queryParameters['delete'] = opt_delete;
  }

  if (opt_action !== undefined) {
    queryParameters['action'] = opt_action;
  }

  if (opt_location !== undefined) {
    queryParameters['$location'] = opt_location;
  }

  if (opt_propertylist !== undefined) {
    queryParameters['propertylist'] = opt_propertylist;
  }

  if (opt_queryLimitInMemory !== undefined) {
    queryParameters['queryLimitInMemory'] = opt_queryLimitInMemory;
  }

  if (opt_queryLimitReads !== undefined) {
    queryParameters['queryLimitReads'] = opt_queryLimitReads;
  }

  if (opt_queryFailTraversal !== undefined) {
    queryParameters['queryFailTraversal'] = opt_queryFailTraversal;
  }

  if (opt_fastQuerySize !== undefined) {
    queryParameters['fastQuerySize'] = opt_fastQuerySize;
  }

  /** @type {!Object} */
  var httpRequestParams = {
    method: 'POST',
    url: path,
    json: true,
            params: queryParameters,
    headers: headerParams
  };

  if (opt_extraHttpRequestParams) {
    httpRequestParams = angular.extend(httpRequestParams, opt_extraHttpRequestParams);
  }

  return (/** @type {?} */ (this.http_))(httpRequestParams);
}

/**
 * 
 * 
 * @param {!boolean=} opt_post 
 * @param {!boolean=} opt_apply 
 * @param {!boolean=} opt_delete 
 * @param {!string=} opt_action 
 * @param {!string=} opt_location 
 * @param {!Array<!string>=} opt_propertylist 
 * @param {!string=} opt_orgApacheJackrabbitOakAuthenticationAppName 
 * @param {!string=} opt_orgApacheJackrabbitOakAuthenticationConfigSpiName 
 * @param {!angular.$http.Config=} opt_extraHttpRequestParams Extra HTTP parameters to send.
 * @return {!angular.$q.Promise<!API.Client.orgApacheJackrabbitOakSecurityAuthenticationAuthenticationConfigInfo>}
 */
API.Client.ConfigmgrApi.prototype.orgApacheJackrabbitOakSecurityAuthenticationAuthenticationConfig = function(opt_post, opt_apply, opt_delete, opt_action, opt_location, opt_propertylist, opt_orgApacheJackrabbitOakAuthenticationAppName, opt_orgApacheJackrabbitOakAuthenticationConfigSpiName, opt_extraHttpRequestParams) {
  /** @const {string} */
  var path = this.basePath_ + '/system/console/configMgr/org.apache.jackrabbit.oak.security.authentication.AuthenticationConfigurationImpl';

  /** @type {!Object} */
  var queryParameters = {};

  /** @type {!Object} */
  var headerParams = angular.extend({}, this.defaultHeaders_);
  if (opt_post !== undefined) {
    queryParameters['post'] = opt_post;
  }

  if (opt_apply !== undefined) {
    queryParameters['apply'] = opt_apply;
  }

  if (opt_delete !== undefined) {
    queryParameters['delete'] = opt_delete;
  }

  if (opt_action !== undefined) {
    queryParameters['action'] = opt_action;
  }

  if (opt_location !== undefined) {
    queryParameters['$location'] = opt_location;
  }

  if (opt_propertylist !== undefined) {
    queryParameters['propertylist'] = opt_propertylist;
  }

  if (opt_orgApacheJackrabbitOakAuthenticationAppName !== undefined) {
    queryParameters['org.apache.jackrabbit.oak.authentication.appName'] = opt_orgApacheJackrabbitOakAuthenticationAppName;
  }

  if (opt_orgApacheJackrabbitOakAuthenticationConfigSpiName !== undefined) {
    queryParameters['org.apache.jackrabbit.oak.authentication.configSpiName'] = opt_orgApacheJackrabbitOakAuthenticationConfigSpiName;
  }

  /** @type {!Object} */
  var httpRequestParams = {
    method: 'POST',
    url: path,
    json: true,
            params: queryParameters,
    headers: headerParams
  };

  if (opt_extraHttpRequestParams) {
    httpRequestParams = angular.extend(httpRequestParams, opt_extraHttpRequestParams);
  }

  return (/** @type {?} */ (this.http_))(httpRequestParams);
}

/**
 * 
 * 
 * @param {!boolean=} opt_post 
 * @param {!boolean=} opt_apply 
 * @param {!boolean=} opt_delete 
 * @param {!string=} opt_action 
 * @param {!string=} opt_location 
 * @param {!Array<!string>=} opt_propertylist 
 * @param {!string=} opt_providerName 
 * @param {!string=} opt_hostName 
 * @param {!number=} opt_hostPort 
 * @param {!boolean=} opt_hostSsl 
 * @param {!boolean=} opt_hostTls 
 * @param {!boolean=} opt_hostNoCertCheck 
 * @param {!string=} opt_bindDn 
 * @param {!string=} opt_bindPassword 
 * @param {!string=} opt_searchTimeout 
 * @param {!number=} opt_adminPoolMaxActive 
 * @param {!boolean=} opt_adminPoolLookupOnValidate 
 * @param {!number=} opt_userPoolMaxActive 
 * @param {!boolean=} opt_userPoolLookupOnValidate 
 * @param {!string=} opt_userBaseDN 
 * @param {!Array<!string>=} opt_userObjectclass 
 * @param {!string=} opt_userIdAttribute 
 * @param {!string=} opt_userExtraFilter 
 * @param {!boolean=} opt_userMakeDnPath 
 * @param {!string=} opt_groupBaseDN 
 * @param {!Array<!string>=} opt_groupObjectclass 
 * @param {!string=} opt_groupNameAttribute 
 * @param {!string=} opt_groupExtraFilter 
 * @param {!boolean=} opt_groupMakeDnPath 
 * @param {!string=} opt_groupMemberAttribute 
 * @param {!boolean=} opt_useUidForExtId 
 * @param {!Array<!string>=} opt_customattributes 
 * @param {!angular.$http.Config=} opt_extraHttpRequestParams Extra HTTP parameters to send.
 * @return {!angular.$q.Promise<!API.Client.orgApacheJackrabbitOakSecurityAuthenticationLdapImplLdapIdentiInfo>}
 */
API.Client.ConfigmgrApi.prototype.orgApacheJackrabbitOakSecurityAuthenticationLdapImplLdapIdenti = function(opt_post, opt_apply, opt_delete, opt_action, opt_location, opt_propertylist, opt_providerName, opt_hostName, opt_hostPort, opt_hostSsl, opt_hostTls, opt_hostNoCertCheck, opt_bindDn, opt_bindPassword, opt_searchTimeout, opt_adminPoolMaxActive, opt_adminPoolLookupOnValidate, opt_userPoolMaxActive, opt_userPoolLookupOnValidate, opt_userBaseDN, opt_userObjectclass, opt_userIdAttribute, opt_userExtraFilter, opt_userMakeDnPath, opt_groupBaseDN, opt_groupObjectclass, opt_groupNameAttribute, opt_groupExtraFilter, opt_groupMakeDnPath, opt_groupMemberAttribute, opt_useUidForExtId, opt_customattributes, opt_extraHttpRequestParams) {
  /** @const {string} */
  var path = this.basePath_ + '/system/console/configMgr/org.apache.jackrabbit.oak.security.authentication.ldap.impl.LdapIdentityProvider';

  /** @type {!Object} */
  var queryParameters = {};

  /** @type {!Object} */
  var headerParams = angular.extend({}, this.defaultHeaders_);
  if (opt_post !== undefined) {
    queryParameters['post'] = opt_post;
  }

  if (opt_apply !== undefined) {
    queryParameters['apply'] = opt_apply;
  }

  if (opt_delete !== undefined) {
    queryParameters['delete'] = opt_delete;
  }

  if (opt_action !== undefined) {
    queryParameters['action'] = opt_action;
  }

  if (opt_location !== undefined) {
    queryParameters['$location'] = opt_location;
  }

  if (opt_propertylist !== undefined) {
    queryParameters['propertylist'] = opt_propertylist;
  }

  if (opt_providerName !== undefined) {
    queryParameters['provider.name'] = opt_providerName;
  }

  if (opt_hostName !== undefined) {
    queryParameters['host.name'] = opt_hostName;
  }

  if (opt_hostPort !== undefined) {
    queryParameters['host.port'] = opt_hostPort;
  }

  if (opt_hostSsl !== undefined) {
    queryParameters['host.ssl'] = opt_hostSsl;
  }

  if (opt_hostTls !== undefined) {
    queryParameters['host.tls'] = opt_hostTls;
  }

  if (opt_hostNoCertCheck !== undefined) {
    queryParameters['host.noCertCheck'] = opt_hostNoCertCheck;
  }

  if (opt_bindDn !== undefined) {
    queryParameters['bind.dn'] = opt_bindDn;
  }

  if (opt_bindPassword !== undefined) {
    queryParameters['bind.password'] = opt_bindPassword;
  }

  if (opt_searchTimeout !== undefined) {
    queryParameters['searchTimeout'] = opt_searchTimeout;
  }

  if (opt_adminPoolMaxActive !== undefined) {
    queryParameters['adminPool.maxActive'] = opt_adminPoolMaxActive;
  }

  if (opt_adminPoolLookupOnValidate !== undefined) {
    queryParameters['adminPool.lookupOnValidate'] = opt_adminPoolLookupOnValidate;
  }

  if (opt_userPoolMaxActive !== undefined) {
    queryParameters['userPool.maxActive'] = opt_userPoolMaxActive;
  }

  if (opt_userPoolLookupOnValidate !== undefined) {
    queryParameters['userPool.lookupOnValidate'] = opt_userPoolLookupOnValidate;
  }

  if (opt_userBaseDN !== undefined) {
    queryParameters['user.baseDN'] = opt_userBaseDN;
  }

  if (opt_userObjectclass !== undefined) {
    queryParameters['user.objectclass'] = opt_userObjectclass;
  }

  if (opt_userIdAttribute !== undefined) {
    queryParameters['user.idAttribute'] = opt_userIdAttribute;
  }

  if (opt_userExtraFilter !== undefined) {
    queryParameters['user.extraFilter'] = opt_userExtraFilter;
  }

  if (opt_userMakeDnPath !== undefined) {
    queryParameters['user.makeDnPath'] = opt_userMakeDnPath;
  }

  if (opt_groupBaseDN !== undefined) {
    queryParameters['group.baseDN'] = opt_groupBaseDN;
  }

  if (opt_groupObjectclass !== undefined) {
    queryParameters['group.objectclass'] = opt_groupObjectclass;
  }

  if (opt_groupNameAttribute !== undefined) {
    queryParameters['group.nameAttribute'] = opt_groupNameAttribute;
  }

  if (opt_groupExtraFilter !== undefined) {
    queryParameters['group.extraFilter'] = opt_groupExtraFilter;
  }

  if (opt_groupMakeDnPath !== undefined) {
    queryParameters['group.makeDnPath'] = opt_groupMakeDnPath;
  }

  if (opt_groupMemberAttribute !== undefined) {
    queryParameters['group.memberAttribute'] = opt_groupMemberAttribute;
  }

  if (opt_useUidForExtId !== undefined) {
    queryParameters['useUidForExtId'] = opt_useUidForExtId;
  }

  if (opt_customattributes !== undefined) {
    queryParameters['customattributes'] = opt_customattributes;
  }

  /** @type {!Object} */
  var httpRequestParams = {
    method: 'POST',
    url: path,
    json: true,
            params: queryParameters,
    headers: headerParams
  };

  if (opt_extraHttpRequestParams) {
    httpRequestParams = angular.extend(httpRequestParams, opt_extraHttpRequestParams);
  }

  return (/** @type {?} */ (this.http_))(httpRequestParams);
}

/**
 * 
 * 
 * @param {!boolean=} opt_post 
 * @param {!boolean=} opt_apply 
 * @param {!boolean=} opt_delete 
 * @param {!string=} opt_action 
 * @param {!string=} opt_location 
 * @param {!Array<!string>=} opt_propertylist 
 * @param {!string=} opt_tokenExpiration 
 * @param {!string=} opt_tokenLength 
 * @param {!boolean=} opt_tokenRefresh 
 * @param {!number=} opt_tokenCleanupThreshold 
 * @param {!string=} opt_passwordHashAlgorithm 
 * @param {!number=} opt_passwordHashIterations 
 * @param {!number=} opt_passwordSaltSize 
 * @param {!angular.$http.Config=} opt_extraHttpRequestParams Extra HTTP parameters to send.
 * @return {!angular.$q.Promise<!API.Client.orgApacheJackrabbitOakSecurityAuthenticationTokenTokenConfiguraInfo>}
 */
API.Client.ConfigmgrApi.prototype.orgApacheJackrabbitOakSecurityAuthenticationTokenTokenConfigura = function(opt_post, opt_apply, opt_delete, opt_action, opt_location, opt_propertylist, opt_tokenExpiration, opt_tokenLength, opt_tokenRefresh, opt_tokenCleanupThreshold, opt_passwordHashAlgorithm, opt_passwordHashIterations, opt_passwordSaltSize, opt_extraHttpRequestParams) {
  /** @const {string} */
  var path = this.basePath_ + '/system/console/configMgr/org.apache.jackrabbit.oak.security.authentication.token.TokenConfigurationImpl';

  /** @type {!Object} */
  var queryParameters = {};

  /** @type {!Object} */
  var headerParams = angular.extend({}, this.defaultHeaders_);
  if (opt_post !== undefined) {
    queryParameters['post'] = opt_post;
  }

  if (opt_apply !== undefined) {
    queryParameters['apply'] = opt_apply;
  }

  if (opt_delete !== undefined) {
    queryParameters['delete'] = opt_delete;
  }

  if (opt_action !== undefined) {
    queryParameters['action'] = opt_action;
  }

  if (opt_location !== undefined) {
    queryParameters['$location'] = opt_location;
  }

  if (opt_propertylist !== undefined) {
    queryParameters['propertylist'] = opt_propertylist;
  }

  if (opt_tokenExpiration !== undefined) {
    queryParameters['tokenExpiration'] = opt_tokenExpiration;
  }

  if (opt_tokenLength !== undefined) {
    queryParameters['tokenLength'] = opt_tokenLength;
  }

  if (opt_tokenRefresh !== undefined) {
    queryParameters['tokenRefresh'] = opt_tokenRefresh;
  }

  if (opt_tokenCleanupThreshold !== undefined) {
    queryParameters['tokenCleanupThreshold'] = opt_tokenCleanupThreshold;
  }

  if (opt_passwordHashAlgorithm !== undefined) {
    queryParameters['passwordHashAlgorithm'] = opt_passwordHashAlgorithm;
  }

  if (opt_passwordHashIterations !== undefined) {
    queryParameters['passwordHashIterations'] = opt_passwordHashIterations;
  }

  if (opt_passwordSaltSize !== undefined) {
    queryParameters['passwordSaltSize'] = opt_passwordSaltSize;
  }

  /** @type {!Object} */
  var httpRequestParams = {
    method: 'POST',
    url: path,
    json: true,
            params: queryParameters,
    headers: headerParams
  };

  if (opt_extraHttpRequestParams) {
    httpRequestParams = angular.extend(httpRequestParams, opt_extraHttpRequestParams);
  }

  return (/** @type {?} */ (this.http_))(httpRequestParams);
}

/**
 * 
 * 
 * @param {!boolean=} opt_post 
 * @param {!boolean=} opt_apply 
 * @param {!boolean=} opt_delete 
 * @param {!string=} opt_action 
 * @param {!string=} opt_location 
 * @param {!Array<!string>=} opt_propertylist 
 * @param {!string=} opt_permissionsJr2 
 * @param {!string=} opt_importBehavior 
 * @param {!Array<!string>=} opt_readPaths 
 * @param {!Array<!string>=} opt_administrativePrincipals 
 * @param {!number=} opt_configurationRanking 
 * @param {!angular.$http.Config=} opt_extraHttpRequestParams Extra HTTP parameters to send.
 * @return {!angular.$q.Promise<!API.Client.orgApacheJackrabbitOakSecurityAuthorizationAuthorizationConfigurInfo>}
 */
API.Client.ConfigmgrApi.prototype.orgApacheJackrabbitOakSecurityAuthorizationAuthorizationConfigur = function(opt_post, opt_apply, opt_delete, opt_action, opt_location, opt_propertylist, opt_permissionsJr2, opt_importBehavior, opt_readPaths, opt_administrativePrincipals, opt_configurationRanking, opt_extraHttpRequestParams) {
  /** @const {string} */
  var path = this.basePath_ + '/system/console/configMgr/org.apache.jackrabbit.oak.security.authorization.AuthorizationConfigurationImpl';

  /** @type {!Object} */
  var queryParameters = {};

  /** @type {!Object} */
  var headerParams = angular.extend({}, this.defaultHeaders_);
  if (opt_post !== undefined) {
    queryParameters['post'] = opt_post;
  }

  if (opt_apply !== undefined) {
    queryParameters['apply'] = opt_apply;
  }

  if (opt_delete !== undefined) {
    queryParameters['delete'] = opt_delete;
  }

  if (opt_action !== undefined) {
    queryParameters['action'] = opt_action;
  }

  if (opt_location !== undefined) {
    queryParameters['$location'] = opt_location;
  }

  if (opt_propertylist !== undefined) {
    queryParameters['propertylist'] = opt_propertylist;
  }

  if (opt_permissionsJr2 !== undefined) {
    queryParameters['permissionsJr2'] = opt_permissionsJr2;
  }

  if (opt_importBehavior !== undefined) {
    queryParameters['importBehavior'] = opt_importBehavior;
  }

  if (opt_readPaths !== undefined) {
    queryParameters['readPaths'] = opt_readPaths;
  }

  if (opt_administrativePrincipals !== undefined) {
    queryParameters['administrativePrincipals'] = opt_administrativePrincipals;
  }

  if (opt_configurationRanking !== undefined) {
    queryParameters['configurationRanking'] = opt_configurationRanking;
  }

  /** @type {!Object} */
  var httpRequestParams = {
    method: 'POST',
    url: path,
    json: true,
            params: queryParameters,
    headers: headerParams
  };

  if (opt_extraHttpRequestParams) {
    httpRequestParams = angular.extend(httpRequestParams, opt_extraHttpRequestParams);
  }

  return (/** @type {?} */ (this.http_))(httpRequestParams);
}

/**
 * 
 * 
 * @param {!boolean=} opt_post 
 * @param {!boolean=} opt_apply 
 * @param {!boolean=} opt_delete 
 * @param {!string=} opt_action 
 * @param {!string=} opt_location 
 * @param {!Array<!string>=} opt_propertylist 
 * @param {!Array<!string>=} opt_requiredServicePids 
 * @param {!string=} opt_authorizationCompositionType 
 * @param {!angular.$http.Config=} opt_extraHttpRequestParams Extra HTTP parameters to send.
 * @return {!angular.$q.Promise<!API.Client.orgApacheJackrabbitOakSecurityInternalSecurityProviderRegistratiInfo>}
 */
API.Client.ConfigmgrApi.prototype.orgApacheJackrabbitOakSecurityInternalSecurityProviderRegistrati = function(opt_post, opt_apply, opt_delete, opt_action, opt_location, opt_propertylist, opt_requiredServicePids, opt_authorizationCompositionType, opt_extraHttpRequestParams) {
  /** @const {string} */
  var path = this.basePath_ + '/system/console/configMgr/org.apache.jackrabbit.oak.security.internal.SecurityProviderRegistration';

  /** @type {!Object} */
  var queryParameters = {};

  /** @type {!Object} */
  var headerParams = angular.extend({}, this.defaultHeaders_);
  if (opt_post !== undefined) {
    queryParameters['post'] = opt_post;
  }

  if (opt_apply !== undefined) {
    queryParameters['apply'] = opt_apply;
  }

  if (opt_delete !== undefined) {
    queryParameters['delete'] = opt_delete;
  }

  if (opt_action !== undefined) {
    queryParameters['action'] = opt_action;
  }

  if (opt_location !== undefined) {
    queryParameters['$location'] = opt_location;
  }

  if (opt_propertylist !== undefined) {
    queryParameters['propertylist'] = opt_propertylist;
  }

  if (opt_requiredServicePids !== undefined) {
    queryParameters['requiredServicePids'] = opt_requiredServicePids;
  }

  if (opt_authorizationCompositionType !== undefined) {
    queryParameters['authorizationCompositionType'] = opt_authorizationCompositionType;
  }

  /** @type {!Object} */
  var httpRequestParams = {
    method: 'POST',
    url: path,
    json: true,
            params: queryParameters,
    headers: headerParams
  };

  if (opt_extraHttpRequestParams) {
    httpRequestParams = angular.extend(httpRequestParams, opt_extraHttpRequestParams);
  }

  return (/** @type {?} */ (this.http_))(httpRequestParams);
}

/**
 * 
 * 
 * @param {!boolean=} opt_post 
 * @param {!boolean=} opt_apply 
 * @param {!boolean=} opt_delete 
 * @param {!string=} opt_action 
 * @param {!string=} opt_location 
 * @param {!Array<!string>=} opt_propertylist 
 * @param {!number=} opt_length 
 * @param {!angular.$http.Config=} opt_extraHttpRequestParams Extra HTTP parameters to send.
 * @return {!angular.$q.Promise<!API.Client.orgApacheJackrabbitOakSecurityUserRandomAuthorizableNodeNameInfo>}
 */
API.Client.ConfigmgrApi.prototype.orgApacheJackrabbitOakSecurityUserRandomAuthorizableNodeName = function(opt_post, opt_apply, opt_delete, opt_action, opt_location, opt_propertylist, opt_length, opt_extraHttpRequestParams) {
  /** @const {string} */
  var path = this.basePath_ + '/system/console/configMgr/org.apache.jackrabbit.oak.security.user.RandomAuthorizableNodeName';

  /** @type {!Object} */
  var queryParameters = {};

  /** @type {!Object} */
  var headerParams = angular.extend({}, this.defaultHeaders_);
  if (opt_post !== undefined) {
    queryParameters['post'] = opt_post;
  }

  if (opt_apply !== undefined) {
    queryParameters['apply'] = opt_apply;
  }

  if (opt_delete !== undefined) {
    queryParameters['delete'] = opt_delete;
  }

  if (opt_action !== undefined) {
    queryParameters['action'] = opt_action;
  }

  if (opt_location !== undefined) {
    queryParameters['$location'] = opt_location;
  }

  if (opt_propertylist !== undefined) {
    queryParameters['propertylist'] = opt_propertylist;
  }

  if (opt_length !== undefined) {
    queryParameters['length'] = opt_length;
  }

  /** @type {!Object} */
  var httpRequestParams = {
    method: 'POST',
    url: path,
    json: true,
            params: queryParameters,
    headers: headerParams
  };

  if (opt_extraHttpRequestParams) {
    httpRequestParams = angular.extend(httpRequestParams, opt_extraHttpRequestParams);
  }

  return (/** @type {?} */ (this.http_))(httpRequestParams);
}

/**
 * 
 * 
 * @param {!boolean=} opt_post 
 * @param {!boolean=} opt_apply 
 * @param {!boolean=} opt_delete 
 * @param {!string=} opt_action 
 * @param {!string=} opt_location 
 * @param {!Array<!string>=} opt_propertylist 
 * @param {!string=} opt_usersPath 
 * @param {!string=} opt_groupsPath 
 * @param {!string=} opt_systemRelativePath 
 * @param {!number=} opt_defaultDepth 
 * @param {!string=} opt_importBehavior 
 * @param {!string=} opt_passwordHashAlgorithm 
 * @param {!number=} opt_passwordHashIterations 
 * @param {!number=} opt_passwordSaltSize 
 * @param {!boolean=} opt_omitAdminPw 
 * @param {!boolean=} opt_supportAutoSave 
 * @param {!number=} opt_passwordMaxAge 
 * @param {!boolean=} opt_initialPasswordChange 
 * @param {!number=} opt_passwordHistorySize 
 * @param {!boolean=} opt_passwordExpiryForAdmin 
 * @param {!number=} opt_cacheExpiration 
 * @param {!boolean=} opt_enableRFC7613UsercaseMappedProfile 
 * @param {!angular.$http.Config=} opt_extraHttpRequestParams Extra HTTP parameters to send.
 * @return {!angular.$q.Promise<!API.Client.orgApacheJackrabbitOakSecurityUserUserConfigurationImplInfo>}
 */
API.Client.ConfigmgrApi.prototype.orgApacheJackrabbitOakSecurityUserUserConfigurationImpl = function(opt_post, opt_apply, opt_delete, opt_action, opt_location, opt_propertylist, opt_usersPath, opt_groupsPath, opt_systemRelativePath, opt_defaultDepth, opt_importBehavior, opt_passwordHashAlgorithm, opt_passwordHashIterations, opt_passwordSaltSize, opt_omitAdminPw, opt_supportAutoSave, opt_passwordMaxAge, opt_initialPasswordChange, opt_passwordHistorySize, opt_passwordExpiryForAdmin, opt_cacheExpiration, opt_enableRFC7613UsercaseMappedProfile, opt_extraHttpRequestParams) {
  /** @const {string} */
  var path = this.basePath_ + '/system/console/configMgr/org.apache.jackrabbit.oak.security.user.UserConfigurationImpl';

  /** @type {!Object} */
  var queryParameters = {};

  /** @type {!Object} */
  var headerParams = angular.extend({}, this.defaultHeaders_);
  if (opt_post !== undefined) {
    queryParameters['post'] = opt_post;
  }

  if (opt_apply !== undefined) {
    queryParameters['apply'] = opt_apply;
  }

  if (opt_delete !== undefined) {
    queryParameters['delete'] = opt_delete;
  }

  if (opt_action !== undefined) {
    queryParameters['action'] = opt_action;
  }

  if (opt_location !== undefined) {
    queryParameters['$location'] = opt_location;
  }

  if (opt_propertylist !== undefined) {
    queryParameters['propertylist'] = opt_propertylist;
  }

  if (opt_usersPath !== undefined) {
    queryParameters['usersPath'] = opt_usersPath;
  }

  if (opt_groupsPath !== undefined) {
    queryParameters['groupsPath'] = opt_groupsPath;
  }

  if (opt_systemRelativePath !== undefined) {
    queryParameters['systemRelativePath'] = opt_systemRelativePath;
  }

  if (opt_defaultDepth !== undefined) {
    queryParameters['defaultDepth'] = opt_defaultDepth;
  }

  if (opt_importBehavior !== undefined) {
    queryParameters['importBehavior'] = opt_importBehavior;
  }

  if (opt_passwordHashAlgorithm !== undefined) {
    queryParameters['passwordHashAlgorithm'] = opt_passwordHashAlgorithm;
  }

  if (opt_passwordHashIterations !== undefined) {
    queryParameters['passwordHashIterations'] = opt_passwordHashIterations;
  }

  if (opt_passwordSaltSize !== undefined) {
    queryParameters['passwordSaltSize'] = opt_passwordSaltSize;
  }

  if (opt_omitAdminPw !== undefined) {
    queryParameters['omitAdminPw'] = opt_omitAdminPw;
  }

  if (opt_supportAutoSave !== undefined) {
    queryParameters['supportAutoSave'] = opt_supportAutoSave;
  }

  if (opt_passwordMaxAge !== undefined) {
    queryParameters['passwordMaxAge'] = opt_passwordMaxAge;
  }

  if (opt_initialPasswordChange !== undefined) {
    queryParameters['initialPasswordChange'] = opt_initialPasswordChange;
  }

  if (opt_passwordHistorySize !== undefined) {
    queryParameters['passwordHistorySize'] = opt_passwordHistorySize;
  }

  if (opt_passwordExpiryForAdmin !== undefined) {
    queryParameters['passwordExpiryForAdmin'] = opt_passwordExpiryForAdmin;
  }

  if (opt_cacheExpiration !== undefined) {
    queryParameters['cacheExpiration'] = opt_cacheExpiration;
  }

  if (opt_enableRFC7613UsercaseMappedProfile !== undefined) {
    queryParameters['enableRFC7613UsercaseMappedProfile'] = opt_enableRFC7613UsercaseMappedProfile;
  }

  /** @type {!Object} */
  var httpRequestParams = {
    method: 'POST',
    url: path,
    json: true,
            params: queryParameters,
    headers: headerParams
  };

  if (opt_extraHttpRequestParams) {
    httpRequestParams = angular.extend(httpRequestParams, opt_extraHttpRequestParams);
  }

  return (/** @type {?} */ (this.http_))(httpRequestParams);
}

/**
 * 
 * 
 * @param {!boolean=} opt_post 
 * @param {!boolean=} opt_apply 
 * @param {!boolean=} opt_delete 
 * @param {!string=} opt_action 
 * @param {!string=} opt_location 
 * @param {!Array<!string>=} opt_propertylist 
 * @param {!string=} opt_accountName 
 * @param {!string=} opt_containerName 
 * @param {!string=} opt_accessKey 
 * @param {!string=} opt_rootPath 
 * @param {!string=} opt_connectionURL 
 * @param {!angular.$http.Config=} opt_extraHttpRequestParams Extra HTTP parameters to send.
 * @return {!angular.$q.Promise<!API.Client.orgApacheJackrabbitOakSegmentAzureAzureSegmentStoreServiceInfo>}
 */
API.Client.ConfigmgrApi.prototype.orgApacheJackrabbitOakSegmentAzureAzureSegmentStoreService = function(opt_post, opt_apply, opt_delete, opt_action, opt_location, opt_propertylist, opt_accountName, opt_containerName, opt_accessKey, opt_rootPath, opt_connectionURL, opt_extraHttpRequestParams) {
  /** @const {string} */
  var path = this.basePath_ + '/system/console/configMgr/org.apache.jackrabbit.oak.segment.azure.AzureSegmentStoreService';

  /** @type {!Object} */
  var queryParameters = {};

  /** @type {!Object} */
  var headerParams = angular.extend({}, this.defaultHeaders_);
  if (opt_post !== undefined) {
    queryParameters['post'] = opt_post;
  }

  if (opt_apply !== undefined) {
    queryParameters['apply'] = opt_apply;
  }

  if (opt_delete !== undefined) {
    queryParameters['delete'] = opt_delete;
  }

  if (opt_action !== undefined) {
    queryParameters['action'] = opt_action;
  }

  if (opt_location !== undefined) {
    queryParameters['$location'] = opt_location;
  }

  if (opt_propertylist !== undefined) {
    queryParameters['propertylist'] = opt_propertylist;
  }

  if (opt_accountName !== undefined) {
    queryParameters['accountName'] = opt_accountName;
  }

  if (opt_containerName !== undefined) {
    queryParameters['containerName'] = opt_containerName;
  }

  if (opt_accessKey !== undefined) {
    queryParameters['accessKey'] = opt_accessKey;
  }

  if (opt_rootPath !== undefined) {
    queryParameters['rootPath'] = opt_rootPath;
  }

  if (opt_connectionURL !== undefined) {
    queryParameters['connectionURL'] = opt_connectionURL;
  }

  /** @type {!Object} */
  var httpRequestParams = {
    method: 'POST',
    url: path,
    json: true,
            params: queryParameters,
    headers: headerParams
  };

  if (opt_extraHttpRequestParams) {
    httpRequestParams = angular.extend(httpRequestParams, opt_extraHttpRequestParams);
  }

  return (/** @type {?} */ (this.http_))(httpRequestParams);
}

/**
 * 
 * 
 * @param {!boolean=} opt_post 
 * @param {!boolean=} opt_apply 
 * @param {!boolean=} opt_delete 
 * @param {!string=} opt_action 
 * @param {!string=} opt_location 
 * @param {!Array<!string>=} opt_propertylist 
 * @param {!string=} opt_repositoryHome 
 * @param {!string=} opt_tarmkMode 
 * @param {!number=} opt_tarmkSize 
 * @param {!number=} opt_segmentCacheSize 
 * @param {!number=} opt_stringCacheSize 
 * @param {!number=} opt_templateCacheSize 
 * @param {!number=} opt_stringDeduplicationCacheSize 
 * @param {!number=} opt_templateDeduplicationCacheSize 
 * @param {!number=} opt_nodeDeduplicationCacheSize 
 * @param {!boolean=} opt_pauseCompaction 
 * @param {!number=} opt_compactionRetryCount 
 * @param {!number=} opt_compactionForceTimeout 
 * @param {!number=} opt_compactionSizeDeltaEstimation 
 * @param {!boolean=} opt_compactionDisableEstimation 
 * @param {!number=} opt_compactionRetainedGenerations 
 * @param {!number=} opt_compactionMemoryThreshold 
 * @param {!number=} opt_compactionProgressLog 
 * @param {!boolean=} opt_standby 
 * @param {!boolean=} opt_customBlobStore 
 * @param {!boolean=} opt_customSegmentStore 
 * @param {!boolean=} opt_splitPersistence 
 * @param {!string=} opt_repositoryBackupDir 
 * @param {!number=} opt_blobGcMaxAgeInSecs 
 * @param {!number=} opt_blobTrackSnapshotIntervalInSecs 
 * @param {!string=} opt_role 
 * @param {!boolean=} opt_registerDescriptors 
 * @param {!boolean=} opt_dispatchChanges 
 * @param {!angular.$http.Config=} opt_extraHttpRequestParams Extra HTTP parameters to send.
 * @return {!angular.$q.Promise<!API.Client.orgApacheJackrabbitOakSegmentSegmentNodeStoreFactoryInfo>}
 */
API.Client.ConfigmgrApi.prototype.orgApacheJackrabbitOakSegmentSegmentNodeStoreFactory = function(opt_post, opt_apply, opt_delete, opt_action, opt_location, opt_propertylist, opt_repositoryHome, opt_tarmkMode, opt_tarmkSize, opt_segmentCacheSize, opt_stringCacheSize, opt_templateCacheSize, opt_stringDeduplicationCacheSize, opt_templateDeduplicationCacheSize, opt_nodeDeduplicationCacheSize, opt_pauseCompaction, opt_compactionRetryCount, opt_compactionForceTimeout, opt_compactionSizeDeltaEstimation, opt_compactionDisableEstimation, opt_compactionRetainedGenerations, opt_compactionMemoryThreshold, opt_compactionProgressLog, opt_standby, opt_customBlobStore, opt_customSegmentStore, opt_splitPersistence, opt_repositoryBackupDir, opt_blobGcMaxAgeInSecs, opt_blobTrackSnapshotIntervalInSecs, opt_role, opt_registerDescriptors, opt_dispatchChanges, opt_extraHttpRequestParams) {
  /** @const {string} */
  var path = this.basePath_ + '/system/console/configMgr/org.apache.jackrabbit.oak.segment.SegmentNodeStoreFactory';

  /** @type {!Object} */
  var queryParameters = {};

  /** @type {!Object} */
  var headerParams = angular.extend({}, this.defaultHeaders_);
  if (opt_post !== undefined) {
    queryParameters['post'] = opt_post;
  }

  if (opt_apply !== undefined) {
    queryParameters['apply'] = opt_apply;
  }

  if (opt_delete !== undefined) {
    queryParameters['delete'] = opt_delete;
  }

  if (opt_action !== undefined) {
    queryParameters['action'] = opt_action;
  }

  if (opt_location !== undefined) {
    queryParameters['$location'] = opt_location;
  }

  if (opt_propertylist !== undefined) {
    queryParameters['propertylist'] = opt_propertylist;
  }

  if (opt_repositoryHome !== undefined) {
    queryParameters['repository.home'] = opt_repositoryHome;
  }

  if (opt_tarmkMode !== undefined) {
    queryParameters['tarmk.mode'] = opt_tarmkMode;
  }

  if (opt_tarmkSize !== undefined) {
    queryParameters['tarmk.size'] = opt_tarmkSize;
  }

  if (opt_segmentCacheSize !== undefined) {
    queryParameters['segmentCache.size'] = opt_segmentCacheSize;
  }

  if (opt_stringCacheSize !== undefined) {
    queryParameters['stringCache.size'] = opt_stringCacheSize;
  }

  if (opt_templateCacheSize !== undefined) {
    queryParameters['templateCache.size'] = opt_templateCacheSize;
  }

  if (opt_stringDeduplicationCacheSize !== undefined) {
    queryParameters['stringDeduplicationCache.size'] = opt_stringDeduplicationCacheSize;
  }

  if (opt_templateDeduplicationCacheSize !== undefined) {
    queryParameters['templateDeduplicationCache.size'] = opt_templateDeduplicationCacheSize;
  }

  if (opt_nodeDeduplicationCacheSize !== undefined) {
    queryParameters['nodeDeduplicationCache.size'] = opt_nodeDeduplicationCacheSize;
  }

  if (opt_pauseCompaction !== undefined) {
    queryParameters['pauseCompaction'] = opt_pauseCompaction;
  }

  if (opt_compactionRetryCount !== undefined) {
    queryParameters['compaction.retryCount'] = opt_compactionRetryCount;
  }

  if (opt_compactionForceTimeout !== undefined) {
    queryParameters['compaction.force.timeout'] = opt_compactionForceTimeout;
  }

  if (opt_compactionSizeDeltaEstimation !== undefined) {
    queryParameters['compaction.sizeDeltaEstimation'] = opt_compactionSizeDeltaEstimation;
  }

  if (opt_compactionDisableEstimation !== undefined) {
    queryParameters['compaction.disableEstimation'] = opt_compactionDisableEstimation;
  }

  if (opt_compactionRetainedGenerations !== undefined) {
    queryParameters['compaction.retainedGenerations'] = opt_compactionRetainedGenerations;
  }

  if (opt_compactionMemoryThreshold !== undefined) {
    queryParameters['compaction.memoryThreshold'] = opt_compactionMemoryThreshold;
  }

  if (opt_compactionProgressLog !== undefined) {
    queryParameters['compaction.progressLog'] = opt_compactionProgressLog;
  }

  if (opt_standby !== undefined) {
    queryParameters['standby'] = opt_standby;
  }

  if (opt_customBlobStore !== undefined) {
    queryParameters['customBlobStore'] = opt_customBlobStore;
  }

  if (opt_customSegmentStore !== undefined) {
    queryParameters['customSegmentStore'] = opt_customSegmentStore;
  }

  if (opt_splitPersistence !== undefined) {
    queryParameters['splitPersistence'] = opt_splitPersistence;
  }

  if (opt_repositoryBackupDir !== undefined) {
    queryParameters['repository.backup.dir'] = opt_repositoryBackupDir;
  }

  if (opt_blobGcMaxAgeInSecs !== undefined) {
    queryParameters['blobGcMaxAgeInSecs'] = opt_blobGcMaxAgeInSecs;
  }

  if (opt_blobTrackSnapshotIntervalInSecs !== undefined) {
    queryParameters['blobTrackSnapshotIntervalInSecs'] = opt_blobTrackSnapshotIntervalInSecs;
  }

  if (opt_role !== undefined) {
    queryParameters['role'] = opt_role;
  }

  if (opt_registerDescriptors !== undefined) {
    queryParameters['registerDescriptors'] = opt_registerDescriptors;
  }

  if (opt_dispatchChanges !== undefined) {
    queryParameters['dispatchChanges'] = opt_dispatchChanges;
  }

  /** @type {!Object} */
  var httpRequestParams = {
    method: 'POST',
    url: path,
    json: true,
            params: queryParameters,
    headers: headerParams
  };

  if (opt_extraHttpRequestParams) {
    httpRequestParams = angular.extend(httpRequestParams, opt_extraHttpRequestParams);
  }

  return (/** @type {?} */ (this.http_))(httpRequestParams);
}

/**
 * 
 * 
 * @param {!boolean=} opt_post 
 * @param {!boolean=} opt_apply 
 * @param {!boolean=} opt_delete 
 * @param {!string=} opt_action 
 * @param {!string=} opt_location 
 * @param {!Array<!string>=} opt_propertylist 
 * @param {!Array<!string>=} opt_commitsTrackerWriterGroups 
 * @param {!angular.$http.Config=} opt_extraHttpRequestParams Extra HTTP parameters to send.
 * @return {!angular.$q.Promise<!API.Client.orgApacheJackrabbitOakSegmentSegmentNodeStoreMonitorServiceInfo>}
 */
API.Client.ConfigmgrApi.prototype.orgApacheJackrabbitOakSegmentSegmentNodeStoreMonitorService = function(opt_post, opt_apply, opt_delete, opt_action, opt_location, opt_propertylist, opt_commitsTrackerWriterGroups, opt_extraHttpRequestParams) {
  /** @const {string} */
  var path = this.basePath_ + '/system/console/configMgr/org.apache.jackrabbit.oak.segment.SegmentNodeStoreMonitorService';

  /** @type {!Object} */
  var queryParameters = {};

  /** @type {!Object} */
  var headerParams = angular.extend({}, this.defaultHeaders_);
  if (opt_post !== undefined) {
    queryParameters['post'] = opt_post;
  }

  if (opt_apply !== undefined) {
    queryParameters['apply'] = opt_apply;
  }

  if (opt_delete !== undefined) {
    queryParameters['delete'] = opt_delete;
  }

  if (opt_action !== undefined) {
    queryParameters['action'] = opt_action;
  }

  if (opt_location !== undefined) {
    queryParameters['$location'] = opt_location;
  }

  if (opt_propertylist !== undefined) {
    queryParameters['propertylist'] = opt_propertylist;
  }

  if (opt_commitsTrackerWriterGroups !== undefined) {
    queryParameters['commitsTrackerWriterGroups'] = opt_commitsTrackerWriterGroups;
  }

  /** @type {!Object} */
  var httpRequestParams = {
    method: 'POST',
    url: path,
    json: true,
            params: queryParameters,
    headers: headerParams
  };

  if (opt_extraHttpRequestParams) {
    httpRequestParams = angular.extend(httpRequestParams, opt_extraHttpRequestParams);
  }

  return (/** @type {?} */ (this.http_))(httpRequestParams);
}

/**
 * 
 * 
 * @param {!boolean=} opt_post 
 * @param {!boolean=} opt_apply 
 * @param {!boolean=} opt_delete 
 * @param {!string=} opt_action 
 * @param {!string=} opt_location 
 * @param {!Array<!string>=} opt_propertylist 
 * @param {!string=} opt_repositoryHome 
 * @param {!string=} opt_tarmkMode 
 * @param {!number=} opt_tarmkSize 
 * @param {!number=} opt_segmentCacheSize 
 * @param {!number=} opt_stringCacheSize 
 * @param {!number=} opt_templateCacheSize 
 * @param {!number=} opt_stringDeduplicationCacheSize 
 * @param {!number=} opt_templateDeduplicationCacheSize 
 * @param {!number=} opt_nodeDeduplicationCacheSize 
 * @param {!boolean=} opt_pauseCompaction 
 * @param {!number=} opt_compactionRetryCount 
 * @param {!number=} opt_compactionForceTimeout 
 * @param {!number=} opt_compactionSizeDeltaEstimation 
 * @param {!boolean=} opt_compactionDisableEstimation 
 * @param {!number=} opt_compactionRetainedGenerations 
 * @param {!number=} opt_compactionMemoryThreshold 
 * @param {!number=} opt_compactionProgressLog 
 * @param {!boolean=} opt_standby 
 * @param {!boolean=} opt_customBlobStore 
 * @param {!boolean=} opt_customSegmentStore 
 * @param {!boolean=} opt_splitPersistence 
 * @param {!string=} opt_repositoryBackupDir 
 * @param {!number=} opt_blobGcMaxAgeInSecs 
 * @param {!number=} opt_blobTrackSnapshotIntervalInSecs 
 * @param {!angular.$http.Config=} opt_extraHttpRequestParams Extra HTTP parameters to send.
 * @return {!angular.$q.Promise<!API.Client.orgApacheJackrabbitOakSegmentSegmentNodeStoreServiceInfo>}
 */
API.Client.ConfigmgrApi.prototype.orgApacheJackrabbitOakSegmentSegmentNodeStoreService = function(opt_post, opt_apply, opt_delete, opt_action, opt_location, opt_propertylist, opt_repositoryHome, opt_tarmkMode, opt_tarmkSize, opt_segmentCacheSize, opt_stringCacheSize, opt_templateCacheSize, opt_stringDeduplicationCacheSize, opt_templateDeduplicationCacheSize, opt_nodeDeduplicationCacheSize, opt_pauseCompaction, opt_compactionRetryCount, opt_compactionForceTimeout, opt_compactionSizeDeltaEstimation, opt_compactionDisableEstimation, opt_compactionRetainedGenerations, opt_compactionMemoryThreshold, opt_compactionProgressLog, opt_standby, opt_customBlobStore, opt_customSegmentStore, opt_splitPersistence, opt_repositoryBackupDir, opt_blobGcMaxAgeInSecs, opt_blobTrackSnapshotIntervalInSecs, opt_extraHttpRequestParams) {
  /** @const {string} */
  var path = this.basePath_ + '/system/console/configMgr/org.apache.jackrabbit.oak.segment.SegmentNodeStoreService';

  /** @type {!Object} */
  var queryParameters = {};

  /** @type {!Object} */
  var headerParams = angular.extend({}, this.defaultHeaders_);
  if (opt_post !== undefined) {
    queryParameters['post'] = opt_post;
  }

  if (opt_apply !== undefined) {
    queryParameters['apply'] = opt_apply;
  }

  if (opt_delete !== undefined) {
    queryParameters['delete'] = opt_delete;
  }

  if (opt_action !== undefined) {
    queryParameters['action'] = opt_action;
  }

  if (opt_location !== undefined) {
    queryParameters['$location'] = opt_location;
  }

  if (opt_propertylist !== undefined) {
    queryParameters['propertylist'] = opt_propertylist;
  }

  if (opt_repositoryHome !== undefined) {
    queryParameters['repository.home'] = opt_repositoryHome;
  }

  if (opt_tarmkMode !== undefined) {
    queryParameters['tarmk.mode'] = opt_tarmkMode;
  }

  if (opt_tarmkSize !== undefined) {
    queryParameters['tarmk.size'] = opt_tarmkSize;
  }

  if (opt_segmentCacheSize !== undefined) {
    queryParameters['segmentCache.size'] = opt_segmentCacheSize;
  }

  if (opt_stringCacheSize !== undefined) {
    queryParameters['stringCache.size'] = opt_stringCacheSize;
  }

  if (opt_templateCacheSize !== undefined) {
    queryParameters['templateCache.size'] = opt_templateCacheSize;
  }

  if (opt_stringDeduplicationCacheSize !== undefined) {
    queryParameters['stringDeduplicationCache.size'] = opt_stringDeduplicationCacheSize;
  }

  if (opt_templateDeduplicationCacheSize !== undefined) {
    queryParameters['templateDeduplicationCache.size'] = opt_templateDeduplicationCacheSize;
  }

  if (opt_nodeDeduplicationCacheSize !== undefined) {
    queryParameters['nodeDeduplicationCache.size'] = opt_nodeDeduplicationCacheSize;
  }

  if (opt_pauseCompaction !== undefined) {
    queryParameters['pauseCompaction'] = opt_pauseCompaction;
  }

  if (opt_compactionRetryCount !== undefined) {
    queryParameters['compaction.retryCount'] = opt_compactionRetryCount;
  }

  if (opt_compactionForceTimeout !== undefined) {
    queryParameters['compaction.force.timeout'] = opt_compactionForceTimeout;
  }

  if (opt_compactionSizeDeltaEstimation !== undefined) {
    queryParameters['compaction.sizeDeltaEstimation'] = opt_compactionSizeDeltaEstimation;
  }

  if (opt_compactionDisableEstimation !== undefined) {
    queryParameters['compaction.disableEstimation'] = opt_compactionDisableEstimation;
  }

  if (opt_compactionRetainedGenerations !== undefined) {
    queryParameters['compaction.retainedGenerations'] = opt_compactionRetainedGenerations;
  }

  if (opt_compactionMemoryThreshold !== undefined) {
    queryParameters['compaction.memoryThreshold'] = opt_compactionMemoryThreshold;
  }

  if (opt_compactionProgressLog !== undefined) {
    queryParameters['compaction.progressLog'] = opt_compactionProgressLog;
  }

  if (opt_standby !== undefined) {
    queryParameters['standby'] = opt_standby;
  }

  if (opt_customBlobStore !== undefined) {
    queryParameters['customBlobStore'] = opt_customBlobStore;
  }

  if (opt_customSegmentStore !== undefined) {
    queryParameters['customSegmentStore'] = opt_customSegmentStore;
  }

  if (opt_splitPersistence !== undefined) {
    queryParameters['splitPersistence'] = opt_splitPersistence;
  }

  if (opt_repositoryBackupDir !== undefined) {
    queryParameters['repository.backup.dir'] = opt_repositoryBackupDir;
  }

  if (opt_blobGcMaxAgeInSecs !== undefined) {
    queryParameters['blobGcMaxAgeInSecs'] = opt_blobGcMaxAgeInSecs;
  }

  if (opt_blobTrackSnapshotIntervalInSecs !== undefined) {
    queryParameters['blobTrackSnapshotIntervalInSecs'] = opt_blobTrackSnapshotIntervalInSecs;
  }

  /** @type {!Object} */
  var httpRequestParams = {
    method: 'POST',
    url: path,
    json: true,
            params: queryParameters,
    headers: headerParams
  };

  if (opt_extraHttpRequestParams) {
    httpRequestParams = angular.extend(httpRequestParams, opt_extraHttpRequestParams);
  }

  return (/** @type {?} */ (this.http_))(httpRequestParams);
}

/**
 * 
 * 
 * @param {!boolean=} opt_post 
 * @param {!boolean=} opt_apply 
 * @param {!boolean=} opt_delete 
 * @param {!string=} opt_action 
 * @param {!string=} opt_location 
 * @param {!Array<!string>=} opt_propertylist 
 * @param {!boolean=} opt_orgApacheSlingInstallerConfigurationPersist 
 * @param {!string=} opt_mode 
 * @param {!number=} opt_port 
 * @param {!string=} opt_primaryHost 
 * @param {!number=} opt_interval 
 * @param {!Array<!string>=} opt_primaryAllowedClientIpRanges 
 * @param {!boolean=} opt_secure 
 * @param {!number=} opt_standbyReadtimeout 
 * @param {!boolean=} opt_standbyAutoclean 
 * @param {!angular.$http.Config=} opt_extraHttpRequestParams Extra HTTP parameters to send.
 * @return {!angular.$q.Promise<!API.Client.orgApacheJackrabbitOakSegmentStandbyStoreStandbyStoreServiceInfo>}
 */
API.Client.ConfigmgrApi.prototype.orgApacheJackrabbitOakSegmentStandbyStoreStandbyStoreService = function(opt_post, opt_apply, opt_delete, opt_action, opt_location, opt_propertylist, opt_orgApacheSlingInstallerConfigurationPersist, opt_mode, opt_port, opt_primaryHost, opt_interval, opt_primaryAllowedClientIpRanges, opt_secure, opt_standbyReadtimeout, opt_standbyAutoclean, opt_extraHttpRequestParams) {
  /** @const {string} */
  var path = this.basePath_ + '/system/console/configMgr/org.apache.jackrabbit.oak.segment.standby.store.StandbyStoreService';

  /** @type {!Object} */
  var queryParameters = {};

  /** @type {!Object} */
  var headerParams = angular.extend({}, this.defaultHeaders_);
  if (opt_post !== undefined) {
    queryParameters['post'] = opt_post;
  }

  if (opt_apply !== undefined) {
    queryParameters['apply'] = opt_apply;
  }

  if (opt_delete !== undefined) {
    queryParameters['delete'] = opt_delete;
  }

  if (opt_action !== undefined) {
    queryParameters['action'] = opt_action;
  }

  if (opt_location !== undefined) {
    queryParameters['$location'] = opt_location;
  }

  if (opt_propertylist !== undefined) {
    queryParameters['propertylist'] = opt_propertylist;
  }

  if (opt_orgApacheSlingInstallerConfigurationPersist !== undefined) {
    queryParameters['org.apache.sling.installer.configuration.persist'] = opt_orgApacheSlingInstallerConfigurationPersist;
  }

  if (opt_mode !== undefined) {
    queryParameters['mode'] = opt_mode;
  }

  if (opt_port !== undefined) {
    queryParameters['port'] = opt_port;
  }

  if (opt_primaryHost !== undefined) {
    queryParameters['primary.host'] = opt_primaryHost;
  }

  if (opt_interval !== undefined) {
    queryParameters['interval'] = opt_interval;
  }

  if (opt_primaryAllowedClientIpRanges !== undefined) {
    queryParameters['primary.allowed-client-ip-ranges'] = opt_primaryAllowedClientIpRanges;
  }

  if (opt_secure !== undefined) {
    queryParameters['secure'] = opt_secure;
  }

  if (opt_standbyReadtimeout !== undefined) {
    queryParameters['standby.readtimeout'] = opt_standbyReadtimeout;
  }

  if (opt_standbyAutoclean !== undefined) {
    queryParameters['standby.autoclean'] = opt_standbyAutoclean;
  }

  /** @type {!Object} */
  var httpRequestParams = {
    method: 'POST',
    url: path,
    json: true,
            params: queryParameters,
    headers: headerParams
  };

  if (opt_extraHttpRequestParams) {
    httpRequestParams = angular.extend(httpRequestParams, opt_extraHttpRequestParams);
  }

  return (/** @type {?} */ (this.http_))(httpRequestParams);
}

/**
 * 
 * 
 * @param {!boolean=} opt_post 
 * @param {!boolean=} opt_apply 
 * @param {!boolean=} opt_delete 
 * @param {!string=} opt_action 
 * @param {!string=} opt_location 
 * @param {!Array<!string>=} opt_propertylist 
 * @param {!string=} opt_handlerName 
 * @param {!string=} opt_userExpirationTime 
 * @param {!Array<!string>=} opt_userAutoMembership 
 * @param {!Array<!string>=} opt_userPropertyMapping 
 * @param {!string=} opt_userPathPrefix 
 * @param {!string=} opt_userMembershipExpTime 
 * @param {!number=} opt_userMembershipNestingDepth 
 * @param {!boolean=} opt_userDynamicMembership 
 * @param {!boolean=} opt_userDisableMissing 
 * @param {!string=} opt_groupExpirationTime 
 * @param {!Array<!string>=} opt_groupAutoMembership 
 * @param {!Array<!string>=} opt_groupPropertyMapping 
 * @param {!string=} opt_groupPathPrefix 
 * @param {!boolean=} opt_enableRFC7613UsercaseMappedProfile 
 * @param {!angular.$http.Config=} opt_extraHttpRequestParams Extra HTTP parameters to send.
 * @return {!angular.$q.Promise<!API.Client.orgApacheJackrabbitOakSpiSecurityAuthenticationExternalImplDeInfo>}
 */
API.Client.ConfigmgrApi.prototype.orgApacheJackrabbitOakSpiSecurityAuthenticationExternalImplDe = function(opt_post, opt_apply, opt_delete, opt_action, opt_location, opt_propertylist, opt_handlerName, opt_userExpirationTime, opt_userAutoMembership, opt_userPropertyMapping, opt_userPathPrefix, opt_userMembershipExpTime, opt_userMembershipNestingDepth, opt_userDynamicMembership, opt_userDisableMissing, opt_groupExpirationTime, opt_groupAutoMembership, opt_groupPropertyMapping, opt_groupPathPrefix, opt_enableRFC7613UsercaseMappedProfile, opt_extraHttpRequestParams) {
  /** @const {string} */
  var path = this.basePath_ + '/system/console/configMgr/org.apache.jackrabbit.oak.spi.security.authentication.external.impl.DefaultSyncHandler';

  /** @type {!Object} */
  var queryParameters = {};

  /** @type {!Object} */
  var headerParams = angular.extend({}, this.defaultHeaders_);
  if (opt_post !== undefined) {
    queryParameters['post'] = opt_post;
  }

  if (opt_apply !== undefined) {
    queryParameters['apply'] = opt_apply;
  }

  if (opt_delete !== undefined) {
    queryParameters['delete'] = opt_delete;
  }

  if (opt_action !== undefined) {
    queryParameters['action'] = opt_action;
  }

  if (opt_location !== undefined) {
    queryParameters['$location'] = opt_location;
  }

  if (opt_propertylist !== undefined) {
    queryParameters['propertylist'] = opt_propertylist;
  }

  if (opt_handlerName !== undefined) {
    queryParameters['handler.name'] = opt_handlerName;
  }

  if (opt_userExpirationTime !== undefined) {
    queryParameters['user.expirationTime'] = opt_userExpirationTime;
  }

  if (opt_userAutoMembership !== undefined) {
    queryParameters['user.autoMembership'] = opt_userAutoMembership;
  }

  if (opt_userPropertyMapping !== undefined) {
    queryParameters['user.propertyMapping'] = opt_userPropertyMapping;
  }

  if (opt_userPathPrefix !== undefined) {
    queryParameters['user.pathPrefix'] = opt_userPathPrefix;
  }

  if (opt_userMembershipExpTime !== undefined) {
    queryParameters['user.membershipExpTime'] = opt_userMembershipExpTime;
  }

  if (opt_userMembershipNestingDepth !== undefined) {
    queryParameters['user.membershipNestingDepth'] = opt_userMembershipNestingDepth;
  }

  if (opt_userDynamicMembership !== undefined) {
    queryParameters['user.dynamicMembership'] = opt_userDynamicMembership;
  }

  if (opt_userDisableMissing !== undefined) {
    queryParameters['user.disableMissing'] = opt_userDisableMissing;
  }

  if (opt_groupExpirationTime !== undefined) {
    queryParameters['group.expirationTime'] = opt_groupExpirationTime;
  }

  if (opt_groupAutoMembership !== undefined) {
    queryParameters['group.autoMembership'] = opt_groupAutoMembership;
  }

  if (opt_groupPropertyMapping !== undefined) {
    queryParameters['group.propertyMapping'] = opt_groupPropertyMapping;
  }

  if (opt_groupPathPrefix !== undefined) {
    queryParameters['group.pathPrefix'] = opt_groupPathPrefix;
  }

  if (opt_enableRFC7613UsercaseMappedProfile !== undefined) {
    queryParameters['enableRFC7613UsercaseMappedProfile'] = opt_enableRFC7613UsercaseMappedProfile;
  }

  /** @type {!Object} */
  var httpRequestParams = {
    method: 'POST',
    url: path,
    json: true,
            params: queryParameters,
    headers: headerParams
  };

  if (opt_extraHttpRequestParams) {
    httpRequestParams = angular.extend(httpRequestParams, opt_extraHttpRequestParams);
  }

  return (/** @type {?} */ (this.http_))(httpRequestParams);
}

/**
 * 
 * 
 * @param {!boolean=} opt_post 
 * @param {!boolean=} opt_apply 
 * @param {!boolean=} opt_delete 
 * @param {!string=} opt_action 
 * @param {!string=} opt_location 
 * @param {!Array<!string>=} opt_propertylist 
 * @param {!number=} opt_jaasRanking 
 * @param {!string=} opt_jaasControlFlag 
 * @param {!string=} opt_jaasRealmName 
 * @param {!string=} opt_idpName 
 * @param {!string=} opt_syncHandlerName 
 * @param {!angular.$http.Config=} opt_extraHttpRequestParams Extra HTTP parameters to send.
 * @return {!angular.$q.Promise<!API.Client.orgApacheJackrabbitOakSpiSecurityAuthenticationExternalImplExInfo>}
 */
API.Client.ConfigmgrApi.prototype.orgApacheJackrabbitOakSpiSecurityAuthenticationExternalImplEx = function(opt_post, opt_apply, opt_delete, opt_action, opt_location, opt_propertylist, opt_jaasRanking, opt_jaasControlFlag, opt_jaasRealmName, opt_idpName, opt_syncHandlerName, opt_extraHttpRequestParams) {
  /** @const {string} */
  var path = this.basePath_ + '/system/console/configMgr/org.apache.jackrabbit.oak.spi.security.authentication.external.impl.ExternalLoginModuleFactory';

  /** @type {!Object} */
  var queryParameters = {};

  /** @type {!Object} */
  var headerParams = angular.extend({}, this.defaultHeaders_);
  if (opt_post !== undefined) {
    queryParameters['post'] = opt_post;
  }

  if (opt_apply !== undefined) {
    queryParameters['apply'] = opt_apply;
  }

  if (opt_delete !== undefined) {
    queryParameters['delete'] = opt_delete;
  }

  if (opt_action !== undefined) {
    queryParameters['action'] = opt_action;
  }

  if (opt_location !== undefined) {
    queryParameters['$location'] = opt_location;
  }

  if (opt_propertylist !== undefined) {
    queryParameters['propertylist'] = opt_propertylist;
  }

  if (opt_jaasRanking !== undefined) {
    queryParameters['jaas.ranking'] = opt_jaasRanking;
  }

  if (opt_jaasControlFlag !== undefined) {
    queryParameters['jaas.controlFlag'] = opt_jaasControlFlag;
  }

  if (opt_jaasRealmName !== undefined) {
    queryParameters['jaas.realmName'] = opt_jaasRealmName;
  }

  if (opt_idpName !== undefined) {
    queryParameters['idp.name'] = opt_idpName;
  }

  if (opt_syncHandlerName !== undefined) {
    queryParameters['sync.handlerName'] = opt_syncHandlerName;
  }

  /** @type {!Object} */
  var httpRequestParams = {
    method: 'POST',
    url: path,
    json: true,
            params: queryParameters,
    headers: headerParams
  };

  if (opt_extraHttpRequestParams) {
    httpRequestParams = angular.extend(httpRequestParams, opt_extraHttpRequestParams);
  }

  return (/** @type {?} */ (this.http_))(httpRequestParams);
}

/**
 * 
 * 
 * @param {!boolean=} opt_post 
 * @param {!boolean=} opt_apply 
 * @param {!boolean=} opt_delete 
 * @param {!string=} opt_action 
 * @param {!string=} opt_location 
 * @param {!Array<!string>=} opt_propertylist 
 * @param {!boolean=} opt_protectExternalId 
 * @param {!angular.$http.Config=} opt_extraHttpRequestParams Extra HTTP parameters to send.
 * @return {!angular.$q.Promise<!API.Client.orgApacheJackrabbitOakSpiSecurityAuthenticationExternalImplPrInfo>}
 */
API.Client.ConfigmgrApi.prototype.orgApacheJackrabbitOakSpiSecurityAuthenticationExternalImplPr = function(opt_post, opt_apply, opt_delete, opt_action, opt_location, opt_propertylist, opt_protectExternalId, opt_extraHttpRequestParams) {
  /** @const {string} */
  var path = this.basePath_ + '/system/console/configMgr/org.apache.jackrabbit.oak.spi.security.authentication.external.impl.principal.ExternalPrincipalConfiguration';

  /** @type {!Object} */
  var queryParameters = {};

  /** @type {!Object} */
  var headerParams = angular.extend({}, this.defaultHeaders_);
  if (opt_post !== undefined) {
    queryParameters['post'] = opt_post;
  }

  if (opt_apply !== undefined) {
    queryParameters['apply'] = opt_apply;
  }

  if (opt_delete !== undefined) {
    queryParameters['delete'] = opt_delete;
  }

  if (opt_action !== undefined) {
    queryParameters['action'] = opt_action;
  }

  if (opt_location !== undefined) {
    queryParameters['$location'] = opt_location;
  }

  if (opt_propertylist !== undefined) {
    queryParameters['propertylist'] = opt_propertylist;
  }

  if (opt_protectExternalId !== undefined) {
    queryParameters['protectExternalId'] = opt_protectExternalId;
  }

  /** @type {!Object} */
  var httpRequestParams = {
    method: 'POST',
    url: path,
    json: true,
            params: queryParameters,
    headers: headerParams
  };

  if (opt_extraHttpRequestParams) {
    httpRequestParams = angular.extend(httpRequestParams, opt_extraHttpRequestParams);
  }

  return (/** @type {?} */ (this.http_))(httpRequestParams);
}

/**
 * 
 * 
 * @param {!boolean=} opt_post 
 * @param {!boolean=} opt_apply 
 * @param {!boolean=} opt_delete 
 * @param {!string=} opt_action 
 * @param {!string=} opt_location 
 * @param {!Array<!string>=} opt_propertylist 
 * @param {!Array<!string>=} opt_cugSupportedPaths 
 * @param {!boolean=} opt_cugEnabled 
 * @param {!number=} opt_configurationRanking 
 * @param {!angular.$http.Config=} opt_extraHttpRequestParams Extra HTTP parameters to send.
 * @return {!angular.$q.Promise<!API.Client.orgApacheJackrabbitOakSpiSecurityAuthorizationCugImplCugConfiInfo>}
 */
API.Client.ConfigmgrApi.prototype.orgApacheJackrabbitOakSpiSecurityAuthorizationCugImplCugConfi = function(opt_post, opt_apply, opt_delete, opt_action, opt_location, opt_propertylist, opt_cugSupportedPaths, opt_cugEnabled, opt_configurationRanking, opt_extraHttpRequestParams) {
  /** @const {string} */
  var path = this.basePath_ + '/system/console/configMgr/org.apache.jackrabbit.oak.spi.security.authorization.cug.impl.CugConfiguration';

  /** @type {!Object} */
  var queryParameters = {};

  /** @type {!Object} */
  var headerParams = angular.extend({}, this.defaultHeaders_);
  if (opt_post !== undefined) {
    queryParameters['post'] = opt_post;
  }

  if (opt_apply !== undefined) {
    queryParameters['apply'] = opt_apply;
  }

  if (opt_delete !== undefined) {
    queryParameters['delete'] = opt_delete;
  }

  if (opt_action !== undefined) {
    queryParameters['action'] = opt_action;
  }

  if (opt_location !== undefined) {
    queryParameters['$location'] = opt_location;
  }

  if (opt_propertylist !== undefined) {
    queryParameters['propertylist'] = opt_propertylist;
  }

  if (opt_cugSupportedPaths !== undefined) {
    queryParameters['cugSupportedPaths'] = opt_cugSupportedPaths;
  }

  if (opt_cugEnabled !== undefined) {
    queryParameters['cugEnabled'] = opt_cugEnabled;
  }

  if (opt_configurationRanking !== undefined) {
    queryParameters['configurationRanking'] = opt_configurationRanking;
  }

  /** @type {!Object} */
  var httpRequestParams = {
    method: 'POST',
    url: path,
    json: true,
            params: queryParameters,
    headers: headerParams
  };

  if (opt_extraHttpRequestParams) {
    httpRequestParams = angular.extend(httpRequestParams, opt_extraHttpRequestParams);
  }

  return (/** @type {?} */ (this.http_))(httpRequestParams);
}

/**
 * 
 * 
 * @param {!boolean=} opt_post 
 * @param {!boolean=} opt_apply 
 * @param {!boolean=} opt_delete 
 * @param {!string=} opt_action 
 * @param {!string=} opt_location 
 * @param {!Array<!string>=} opt_propertylist 
 * @param {!Array<!string>=} opt_principalNames 
 * @param {!angular.$http.Config=} opt_extraHttpRequestParams Extra HTTP parameters to send.
 * @return {!angular.$q.Promise<!API.Client.orgApacheJackrabbitOakSpiSecurityAuthorizationCugImplCugExcluInfo>}
 */
API.Client.ConfigmgrApi.prototype.orgApacheJackrabbitOakSpiSecurityAuthorizationCugImplCugExclu = function(opt_post, opt_apply, opt_delete, opt_action, opt_location, opt_propertylist, opt_principalNames, opt_extraHttpRequestParams) {
  /** @const {string} */
  var path = this.basePath_ + '/system/console/configMgr/org.apache.jackrabbit.oak.spi.security.authorization.cug.impl.CugExcludeImpl';

  /** @type {!Object} */
  var queryParameters = {};

  /** @type {!Object} */
  var headerParams = angular.extend({}, this.defaultHeaders_);
  if (opt_post !== undefined) {
    queryParameters['post'] = opt_post;
  }

  if (opt_apply !== undefined) {
    queryParameters['apply'] = opt_apply;
  }

  if (opt_delete !== undefined) {
    queryParameters['delete'] = opt_delete;
  }

  if (opt_action !== undefined) {
    queryParameters['action'] = opt_action;
  }

  if (opt_location !== undefined) {
    queryParameters['$location'] = opt_location;
  }

  if (opt_propertylist !== undefined) {
    queryParameters['propertylist'] = opt_propertylist;
  }

  if (opt_principalNames !== undefined) {
    queryParameters['principalNames'] = opt_principalNames;
  }

  /** @type {!Object} */
  var httpRequestParams = {
    method: 'POST',
    url: path,
    json: true,
            params: queryParameters,
    headers: headerParams
  };

  if (opt_extraHttpRequestParams) {
    httpRequestParams = angular.extend(httpRequestParams, opt_extraHttpRequestParams);
  }

  return (/** @type {?} */ (this.http_))(httpRequestParams);
}

/**
 * 
 * 
 * @param {!boolean=} opt_post 
 * @param {!boolean=} opt_apply 
 * @param {!boolean=} opt_delete 
 * @param {!string=} opt_action 
 * @param {!string=} opt_location 
 * @param {!Array<!string>=} opt_propertylist 
 * @param {!string=} opt_enabledActions 
 * @param {!Array<!string>=} opt_userPrivilegeNames 
 * @param {!Array<!string>=} opt_groupPrivilegeNames 
 * @param {!string=} opt_constraint 
 * @param {!angular.$http.Config=} opt_extraHttpRequestParams Extra HTTP parameters to send.
 * @return {!angular.$q.Promise<!API.Client.orgApacheJackrabbitOakSpiSecurityUserActionDefaultAuthorizableInfo>}
 */
API.Client.ConfigmgrApi.prototype.orgApacheJackrabbitOakSpiSecurityUserActionDefaultAuthorizable = function(opt_post, opt_apply, opt_delete, opt_action, opt_location, opt_propertylist, opt_enabledActions, opt_userPrivilegeNames, opt_groupPrivilegeNames, opt_constraint, opt_extraHttpRequestParams) {
  /** @const {string} */
  var path = this.basePath_ + '/system/console/configMgr/org.apache.jackrabbit.oak.spi.security.user.action.DefaultAuthorizableActionProvider';

  /** @type {!Object} */
  var queryParameters = {};

  /** @type {!Object} */
  var headerParams = angular.extend({}, this.defaultHeaders_);
  if (opt_post !== undefined) {
    queryParameters['post'] = opt_post;
  }

  if (opt_apply !== undefined) {
    queryParameters['apply'] = opt_apply;
  }

  if (opt_delete !== undefined) {
    queryParameters['delete'] = opt_delete;
  }

  if (opt_action !== undefined) {
    queryParameters['action'] = opt_action;
  }

  if (opt_location !== undefined) {
    queryParameters['$location'] = opt_location;
  }

  if (opt_propertylist !== undefined) {
    queryParameters['propertylist'] = opt_propertylist;
  }

  if (opt_enabledActions !== undefined) {
    queryParameters['enabledActions'] = opt_enabledActions;
  }

  if (opt_userPrivilegeNames !== undefined) {
    queryParameters['userPrivilegeNames'] = opt_userPrivilegeNames;
  }

  if (opt_groupPrivilegeNames !== undefined) {
    queryParameters['groupPrivilegeNames'] = opt_groupPrivilegeNames;
  }

  if (opt_constraint !== undefined) {
    queryParameters['constraint'] = opt_constraint;
  }

  /** @type {!Object} */
  var httpRequestParams = {
    method: 'POST',
    url: path,
    json: true,
            params: queryParameters,
    headers: headerParams
  };

  if (opt_extraHttpRequestParams) {
    httpRequestParams = angular.extend(httpRequestParams, opt_extraHttpRequestParams);
  }

  return (/** @type {?} */ (this.http_))(httpRequestParams);
}

/**
 * 
 * 
 * @param {!boolean=} opt_post 
 * @param {!boolean=} opt_apply 
 * @param {!boolean=} opt_delete 
 * @param {!string=} opt_action 
 * @param {!string=} opt_location 
 * @param {!Array<!string>=} opt_propertylist 
 * @param {!Array<!string>=} opt_packageRoots 
 * @param {!angular.$http.Config=} opt_extraHttpRequestParams Extra HTTP parameters to send.
 * @return {!angular.$q.Promise<!API.Client.orgApacheJackrabbitVaultPackagingImplPackagingImplInfo>}
 */
API.Client.ConfigmgrApi.prototype.orgApacheJackrabbitVaultPackagingImplPackagingImpl = function(opt_post, opt_apply, opt_delete, opt_action, opt_location, opt_propertylist, opt_packageRoots, opt_extraHttpRequestParams) {
  /** @const {string} */
  var path = this.basePath_ + '/system/console/configMgr/org.apache.jackrabbit.vault.packaging.impl.PackagingImpl';

  /** @type {!Object} */
  var queryParameters = {};

  /** @type {!Object} */
  var headerParams = angular.extend({}, this.defaultHeaders_);
  if (opt_post !== undefined) {
    queryParameters['post'] = opt_post;
  }

  if (opt_apply !== undefined) {
    queryParameters['apply'] = opt_apply;
  }

  if (opt_delete !== undefined) {
    queryParameters['delete'] = opt_delete;
  }

  if (opt_action !== undefined) {
    queryParameters['action'] = opt_action;
  }

  if (opt_location !== undefined) {
    queryParameters['$location'] = opt_location;
  }

  if (opt_propertylist !== undefined) {
    queryParameters['propertylist'] = opt_propertylist;
  }

  if (opt_packageRoots !== undefined) {
    queryParameters['packageRoots'] = opt_packageRoots;
  }

  /** @type {!Object} */
  var httpRequestParams = {
    method: 'POST',
    url: path,
    json: true,
            params: queryParameters,
    headers: headerParams
  };

  if (opt_extraHttpRequestParams) {
    httpRequestParams = angular.extend(httpRequestParams, opt_extraHttpRequestParams);
  }

  return (/** @type {?} */ (this.http_))(httpRequestParams);
}

/**
 * 
 * 
 * @param {!boolean=} opt_post 
 * @param {!boolean=} opt_apply 
 * @param {!boolean=} opt_delete 
 * @param {!string=} opt_action 
 * @param {!string=} opt_location 
 * @param {!Array<!string>=} opt_propertylist 
 * @param {!string=} opt_homePath 
 * @param {!angular.$http.Config=} opt_extraHttpRequestParams Extra HTTP parameters to send.
 * @return {!angular.$q.Promise<!API.Client.orgApacheJackrabbitVaultPackagingRegistryImplFSPackageRegistryInfo>}
 */
API.Client.ConfigmgrApi.prototype.orgApacheJackrabbitVaultPackagingRegistryImplFSPackageRegistry = function(opt_post, opt_apply, opt_delete, opt_action, opt_location, opt_propertylist, opt_homePath, opt_extraHttpRequestParams) {
  /** @const {string} */
  var path = this.basePath_ + '/system/console/configMgr/org.apache.jackrabbit.vault.packaging.registry.impl.FSPackageRegistry';

  /** @type {!Object} */
  var queryParameters = {};

  /** @type {!Object} */
  var headerParams = angular.extend({}, this.defaultHeaders_);
  if (opt_post !== undefined) {
    queryParameters['post'] = opt_post;
  }

  if (opt_apply !== undefined) {
    queryParameters['apply'] = opt_apply;
  }

  if (opt_delete !== undefined) {
    queryParameters['delete'] = opt_delete;
  }

  if (opt_action !== undefined) {
    queryParameters['action'] = opt_action;
  }

  if (opt_location !== undefined) {
    queryParameters['$location'] = opt_location;
  }

  if (opt_propertylist !== undefined) {
    queryParameters['propertylist'] = opt_propertylist;
  }

  if (opt_homePath !== undefined) {
    queryParameters['homePath'] = opt_homePath;
  }

  /** @type {!Object} */
  var httpRequestParams = {
    method: 'POST',
    url: path,
    json: true,
            params: queryParameters,
    headers: headerParams
  };

  if (opt_extraHttpRequestParams) {
    httpRequestParams = angular.extend(httpRequestParams, opt_extraHttpRequestParams);
  }

  return (/** @type {?} */ (this.http_))(httpRequestParams);
}

/**
 * 
 * 
 * @param {!boolean=} opt_post 
 * @param {!boolean=} opt_apply 
 * @param {!boolean=} opt_delete 
 * @param {!string=} opt_action 
 * @param {!string=} opt_location 
 * @param {!Array<!string>=} opt_propertylist 
 * @param {!Array<!string>=} opt_slingServletMethods 
 * @param {!string=} opt_slingServletPaths 
 * @param {!angular.$http.Config=} opt_extraHttpRequestParams Extra HTTP parameters to send.
 * @return {!angular.$q.Promise<!API.Client.orgApacheSlingAuthCoreImplLogoutServletInfo>}
 */
API.Client.ConfigmgrApi.prototype.orgApacheSlingAuthCoreImplLogoutServlet = function(opt_post, opt_apply, opt_delete, opt_action, opt_location, opt_propertylist, opt_slingServletMethods, opt_slingServletPaths, opt_extraHttpRequestParams) {
  /** @const {string} */
  var path = this.basePath_ + '/system/console/configMgr/org.apache.sling.auth.core.impl.LogoutServlet';

  /** @type {!Object} */
  var queryParameters = {};

  /** @type {!Object} */
  var headerParams = angular.extend({}, this.defaultHeaders_);
  if (opt_post !== undefined) {
    queryParameters['post'] = opt_post;
  }

  if (opt_apply !== undefined) {
    queryParameters['apply'] = opt_apply;
  }

  if (opt_delete !== undefined) {
    queryParameters['delete'] = opt_delete;
  }

  if (opt_action !== undefined) {
    queryParameters['action'] = opt_action;
  }

  if (opt_location !== undefined) {
    queryParameters['$location'] = opt_location;
  }

  if (opt_propertylist !== undefined) {
    queryParameters['propertylist'] = opt_propertylist;
  }

  if (opt_slingServletMethods !== undefined) {
    queryParameters['sling.servlet.methods'] = opt_slingServletMethods;
  }

  if (opt_slingServletPaths !== undefined) {
    queryParameters['sling.servlet.paths'] = opt_slingServletPaths;
  }

  /** @type {!Object} */
  var httpRequestParams = {
    method: 'POST',
    url: path,
    json: true,
            params: queryParameters,
    headers: headerParams
  };

  if (opt_extraHttpRequestParams) {
    httpRequestParams = angular.extend(httpRequestParams, opt_extraHttpRequestParams);
  }

  return (/** @type {?} */ (this.http_))(httpRequestParams);
}

/**
 * 
 * 
 * @param {!boolean=} opt_post 
 * @param {!boolean=} opt_apply 
 * @param {!boolean=} opt_delete 
 * @param {!string=} opt_action 
 * @param {!string=} opt_location 
 * @param {!Array<!string>=} opt_propertylist 
 * @param {!boolean=} opt_enabled 
 * @param {!angular.$http.Config=} opt_extraHttpRequestParams Extra HTTP parameters to send.
 * @return {!angular.$q.Promise<!API.Client.orgApacheSlingCaconfigImplConfigurationBindingsValueProviderInfo>}
 */
API.Client.ConfigmgrApi.prototype.orgApacheSlingCaconfigImplConfigurationBindingsValueProvider = function(opt_post, opt_apply, opt_delete, opt_action, opt_location, opt_propertylist, opt_enabled, opt_extraHttpRequestParams) {
  /** @const {string} */
  var path = this.basePath_ + '/system/console/configMgr/org.apache.sling.caconfig.impl.ConfigurationBindingsValueProvider';

  /** @type {!Object} */
  var queryParameters = {};

  /** @type {!Object} */
  var headerParams = angular.extend({}, this.defaultHeaders_);
  if (opt_post !== undefined) {
    queryParameters['post'] = opt_post;
  }

  if (opt_apply !== undefined) {
    queryParameters['apply'] = opt_apply;
  }

  if (opt_delete !== undefined) {
    queryParameters['delete'] = opt_delete;
  }

  if (opt_action !== undefined) {
    queryParameters['action'] = opt_action;
  }

  if (opt_location !== undefined) {
    queryParameters['$location'] = opt_location;
  }

  if (opt_propertylist !== undefined) {
    queryParameters['propertylist'] = opt_propertylist;
  }

  if (opt_enabled !== undefined) {
    queryParameters['enabled'] = opt_enabled;
  }

  /** @type {!Object} */
  var httpRequestParams = {
    method: 'POST',
    url: path,
    json: true,
            params: queryParameters,
    headers: headerParams
  };

  if (opt_extraHttpRequestParams) {
    httpRequestParams = angular.extend(httpRequestParams, opt_extraHttpRequestParams);
  }

  return (/** @type {?} */ (this.http_))(httpRequestParams);
}

/**
 * 
 * 
 * @param {!boolean=} opt_post 
 * @param {!boolean=} opt_apply 
 * @param {!boolean=} opt_delete 
 * @param {!string=} opt_action 
 * @param {!string=} opt_location 
 * @param {!Array<!string>=} opt_propertylist 
 * @param {!Array<!string>=} opt_configBucketNames 
 * @param {!angular.$http.Config=} opt_extraHttpRequestParams Extra HTTP parameters to send.
 * @return {!angular.$q.Promise<!API.Client.orgApacheSlingCaconfigImplConfigurationResolverImplInfo>}
 */
API.Client.ConfigmgrApi.prototype.orgApacheSlingCaconfigImplConfigurationResolverImpl = function(opt_post, opt_apply, opt_delete, opt_action, opt_location, opt_propertylist, opt_configBucketNames, opt_extraHttpRequestParams) {
  /** @const {string} */
  var path = this.basePath_ + '/system/console/configMgr/org.apache.sling.caconfig.impl.ConfigurationResolverImpl';

  /** @type {!Object} */
  var queryParameters = {};

  /** @type {!Object} */
  var headerParams = angular.extend({}, this.defaultHeaders_);
  if (opt_post !== undefined) {
    queryParameters['post'] = opt_post;
  }

  if (opt_apply !== undefined) {
    queryParameters['apply'] = opt_apply;
  }

  if (opt_delete !== undefined) {
    queryParameters['delete'] = opt_delete;
  }

  if (opt_action !== undefined) {
    queryParameters['action'] = opt_action;
  }

  if (opt_location !== undefined) {
    queryParameters['$location'] = opt_location;
  }

  if (opt_propertylist !== undefined) {
    queryParameters['propertylist'] = opt_propertylist;
  }

  if (opt_configBucketNames !== undefined) {
    queryParameters['configBucketNames'] = opt_configBucketNames;
  }

  /** @type {!Object} */
  var httpRequestParams = {
    method: 'POST',
    url: path,
    json: true,
            params: queryParameters,
    headers: headerParams
  };

  if (opt_extraHttpRequestParams) {
    httpRequestParams = angular.extend(httpRequestParams, opt_extraHttpRequestParams);
  }

  return (/** @type {?} */ (this.http_))(httpRequestParams);
}

/**
 * 
 * 
 * @param {!boolean=} opt_post 
 * @param {!boolean=} opt_apply 
 * @param {!boolean=} opt_delete 
 * @param {!string=} opt_action 
 * @param {!string=} opt_location 
 * @param {!Array<!string>=} opt_propertylist 
 * @param {!boolean=} opt_enabled 
 * @param {!Array<!string>=} opt_configPropertyInheritancePropertyNames 
 * @param {!angular.$http.Config=} opt_extraHttpRequestParams Extra HTTP parameters to send.
 * @return {!angular.$q.Promise<!API.Client.orgApacheSlingCaconfigImplDefDefaultConfigurationInheritanceStraInfo>}
 */
API.Client.ConfigmgrApi.prototype.orgApacheSlingCaconfigImplDefDefaultConfigurationInheritanceStra = function(opt_post, opt_apply, opt_delete, opt_action, opt_location, opt_propertylist, opt_enabled, opt_configPropertyInheritancePropertyNames, opt_extraHttpRequestParams) {
  /** @const {string} */
  var path = this.basePath_ + '/system/console/configMgr/org.apache.sling.caconfig.impl.def.DefaultConfigurationInheritanceStrategy';

  /** @type {!Object} */
  var queryParameters = {};

  /** @type {!Object} */
  var headerParams = angular.extend({}, this.defaultHeaders_);
  if (opt_post !== undefined) {
    queryParameters['post'] = opt_post;
  }

  if (opt_apply !== undefined) {
    queryParameters['apply'] = opt_apply;
  }

  if (opt_delete !== undefined) {
    queryParameters['delete'] = opt_delete;
  }

  if (opt_action !== undefined) {
    queryParameters['action'] = opt_action;
  }

  if (opt_location !== undefined) {
    queryParameters['$location'] = opt_location;
  }

  if (opt_propertylist !== undefined) {
    queryParameters['propertylist'] = opt_propertylist;
  }

  if (opt_enabled !== undefined) {
    queryParameters['enabled'] = opt_enabled;
  }

  if (opt_configPropertyInheritancePropertyNames !== undefined) {
    queryParameters['configPropertyInheritancePropertyNames'] = opt_configPropertyInheritancePropertyNames;
  }

  /** @type {!Object} */
  var httpRequestParams = {
    method: 'POST',
    url: path,
    json: true,
            params: queryParameters,
    headers: headerParams
  };

  if (opt_extraHttpRequestParams) {
    httpRequestParams = angular.extend(httpRequestParams, opt_extraHttpRequestParams);
  }

  return (/** @type {?} */ (this.http_))(httpRequestParams);
}

/**
 * 
 * 
 * @param {!boolean=} opt_post 
 * @param {!boolean=} opt_apply 
 * @param {!boolean=} opt_delete 
 * @param {!string=} opt_action 
 * @param {!string=} opt_location 
 * @param {!Array<!string>=} opt_propertylist 
 * @param {!boolean=} opt_enabled 
 * @param {!angular.$http.Config=} opt_extraHttpRequestParams Extra HTTP parameters to send.
 * @return {!angular.$q.Promise<!API.Client.orgApacheSlingCaconfigImplDefDefaultConfigurationPersistenceStraInfo>}
 */
API.Client.ConfigmgrApi.prototype.orgApacheSlingCaconfigImplDefDefaultConfigurationPersistenceStra = function(opt_post, opt_apply, opt_delete, opt_action, opt_location, opt_propertylist, opt_enabled, opt_extraHttpRequestParams) {
  /** @const {string} */
  var path = this.basePath_ + '/system/console/configMgr/org.apache.sling.caconfig.impl.def.DefaultConfigurationPersistenceStrategy';

  /** @type {!Object} */
  var queryParameters = {};

  /** @type {!Object} */
  var headerParams = angular.extend({}, this.defaultHeaders_);
  if (opt_post !== undefined) {
    queryParameters['post'] = opt_post;
  }

  if (opt_apply !== undefined) {
    queryParameters['apply'] = opt_apply;
  }

  if (opt_delete !== undefined) {
    queryParameters['delete'] = opt_delete;
  }

  if (opt_action !== undefined) {
    queryParameters['action'] = opt_action;
  }

  if (opt_location !== undefined) {
    queryParameters['$location'] = opt_location;
  }

  if (opt_propertylist !== undefined) {
    queryParameters['propertylist'] = opt_propertylist;
  }

  if (opt_enabled !== undefined) {
    queryParameters['enabled'] = opt_enabled;
  }

  /** @type {!Object} */
  var httpRequestParams = {
    method: 'POST',
    url: path,
    json: true,
            params: queryParameters,
    headers: headerParams
  };

  if (opt_extraHttpRequestParams) {
    httpRequestParams = angular.extend(httpRequestParams, opt_extraHttpRequestParams);
  }

  return (/** @type {?} */ (this.http_))(httpRequestParams);
}

/**
 * 
 * 
 * @param {!boolean=} opt_post 
 * @param {!boolean=} opt_apply 
 * @param {!boolean=} opt_delete 
 * @param {!string=} opt_action 
 * @param {!string=} opt_location 
 * @param {!Array<!string>=} opt_propertylist 
 * @param {!string=} opt_description 
 * @param {!Array<!string>=} opt_overrides 
 * @param {!boolean=} opt_enabled 
 * @param {!number=} opt_serviceRanking 
 * @param {!angular.$http.Config=} opt_extraHttpRequestParams Extra HTTP parameters to send.
 * @return {!angular.$q.Promise<!API.Client.orgApacheSlingCaconfigImplOverrideOsgiConfigurationOverrideProviInfo>}
 */
API.Client.ConfigmgrApi.prototype.orgApacheSlingCaconfigImplOverrideOsgiConfigurationOverrideProvi = function(opt_post, opt_apply, opt_delete, opt_action, opt_location, opt_propertylist, opt_description, opt_overrides, opt_enabled, opt_serviceRanking, opt_extraHttpRequestParams) {
  /** @const {string} */
  var path = this.basePath_ + '/system/console/configMgr/org.apache.sling.caconfig.impl.override.OsgiConfigurationOverrideProvider';

  /** @type {!Object} */
  var queryParameters = {};

  /** @type {!Object} */
  var headerParams = angular.extend({}, this.defaultHeaders_);
  if (opt_post !== undefined) {
    queryParameters['post'] = opt_post;
  }

  if (opt_apply !== undefined) {
    queryParameters['apply'] = opt_apply;
  }

  if (opt_delete !== undefined) {
    queryParameters['delete'] = opt_delete;
  }

  if (opt_action !== undefined) {
    queryParameters['action'] = opt_action;
  }

  if (opt_location !== undefined) {
    queryParameters['$location'] = opt_location;
  }

  if (opt_propertylist !== undefined) {
    queryParameters['propertylist'] = opt_propertylist;
  }

  if (opt_description !== undefined) {
    queryParameters['description'] = opt_description;
  }

  if (opt_overrides !== undefined) {
    queryParameters['overrides'] = opt_overrides;
  }

  if (opt_enabled !== undefined) {
    queryParameters['enabled'] = opt_enabled;
  }

  if (opt_serviceRanking !== undefined) {
    queryParameters['service.ranking'] = opt_serviceRanking;
  }

  /** @type {!Object} */
  var httpRequestParams = {
    method: 'POST',
    url: path,
    json: true,
            params: queryParameters,
    headers: headerParams
  };

  if (opt_extraHttpRequestParams) {
    httpRequestParams = angular.extend(httpRequestParams, opt_extraHttpRequestParams);
  }

  return (/** @type {?} */ (this.http_))(httpRequestParams);
}

/**
 * 
 * 
 * @param {!boolean=} opt_post 
 * @param {!boolean=} opt_apply 
 * @param {!boolean=} opt_delete 
 * @param {!string=} opt_action 
 * @param {!string=} opt_location 
 * @param {!Array<!string>=} opt_propertylist 
 * @param {!boolean=} opt_enabled 
 * @param {!number=} opt_serviceRanking 
 * @param {!angular.$http.Config=} opt_extraHttpRequestParams Extra HTTP parameters to send.
 * @return {!angular.$q.Promise<!API.Client.orgApacheSlingCaconfigImplOverrideSystemPropertyConfigurationOveInfo>}
 */
API.Client.ConfigmgrApi.prototype.orgApacheSlingCaconfigImplOverrideSystemPropertyConfigurationOve = function(opt_post, opt_apply, opt_delete, opt_action, opt_location, opt_propertylist, opt_enabled, opt_serviceRanking, opt_extraHttpRequestParams) {
  /** @const {string} */
  var path = this.basePath_ + '/system/console/configMgr/org.apache.sling.caconfig.impl.override.SystemPropertyConfigurationOverrideProvider';

  /** @type {!Object} */
  var queryParameters = {};

  /** @type {!Object} */
  var headerParams = angular.extend({}, this.defaultHeaders_);
  if (opt_post !== undefined) {
    queryParameters['post'] = opt_post;
  }

  if (opt_apply !== undefined) {
    queryParameters['apply'] = opt_apply;
  }

  if (opt_delete !== undefined) {
    queryParameters['delete'] = opt_delete;
  }

  if (opt_action !== undefined) {
    queryParameters['action'] = opt_action;
  }

  if (opt_location !== undefined) {
    queryParameters['$location'] = opt_location;
  }

  if (opt_propertylist !== undefined) {
    queryParameters['propertylist'] = opt_propertylist;
  }

  if (opt_enabled !== undefined) {
    queryParameters['enabled'] = opt_enabled;
  }

  if (opt_serviceRanking !== undefined) {
    queryParameters['service.ranking'] = opt_serviceRanking;
  }

  /** @type {!Object} */
  var httpRequestParams = {
    method: 'POST',
    url: path,
    json: true,
            params: queryParameters,
    headers: headerParams
  };

  if (opt_extraHttpRequestParams) {
    httpRequestParams = angular.extend(httpRequestParams, opt_extraHttpRequestParams);
  }

  return (/** @type {?} */ (this.http_))(httpRequestParams);
}

/**
 * 
 * 
 * @param {!boolean=} opt_post 
 * @param {!boolean=} opt_apply 
 * @param {!boolean=} opt_delete 
 * @param {!string=} opt_action 
 * @param {!string=} opt_location 
 * @param {!Array<!string>=} opt_propertylist 
 * @param {!Array<!string>=} opt_ignorePropertyNameRegex 
 * @param {!Array<!string>=} opt_configCollectionPropertiesResourceNames 
 * @param {!angular.$http.Config=} opt_extraHttpRequestParams Extra HTTP parameters to send.
 * @return {!angular.$q.Promise<!API.Client.orgApacheSlingCaconfigManagementImplConfigurationManagementSettiInfo>}
 */
API.Client.ConfigmgrApi.prototype.orgApacheSlingCaconfigManagementImplConfigurationManagementSetti = function(opt_post, opt_apply, opt_delete, opt_action, opt_location, opt_propertylist, opt_ignorePropertyNameRegex, opt_configCollectionPropertiesResourceNames, opt_extraHttpRequestParams) {
  /** @const {string} */
  var path = this.basePath_ + '/system/console/configMgr/org.apache.sling.caconfig.management.impl.ConfigurationManagementSettingsImpl';

  /** @type {!Object} */
  var queryParameters = {};

  /** @type {!Object} */
  var headerParams = angular.extend({}, this.defaultHeaders_);
  if (opt_post !== undefined) {
    queryParameters['post'] = opt_post;
  }

  if (opt_apply !== undefined) {
    queryParameters['apply'] = opt_apply;
  }

  if (opt_delete !== undefined) {
    queryParameters['delete'] = opt_delete;
  }

  if (opt_action !== undefined) {
    queryParameters['action'] = opt_action;
  }

  if (opt_location !== undefined) {
    queryParameters['$location'] = opt_location;
  }

  if (opt_propertylist !== undefined) {
    queryParameters['propertylist'] = opt_propertylist;
  }

  if (opt_ignorePropertyNameRegex !== undefined) {
    queryParameters['ignorePropertyNameRegex'] = opt_ignorePropertyNameRegex;
  }

  if (opt_configCollectionPropertiesResourceNames !== undefined) {
    queryParameters['configCollectionPropertiesResourceNames'] = opt_configCollectionPropertiesResourceNames;
  }

  /** @type {!Object} */
  var httpRequestParams = {
    method: 'POST',
    url: path,
    json: true,
            params: queryParameters,
    headers: headerParams
  };

  if (opt_extraHttpRequestParams) {
    httpRequestParams = angular.extend(httpRequestParams, opt_extraHttpRequestParams);
  }

  return (/** @type {?} */ (this.http_))(httpRequestParams);
}

/**
 * 
 * 
 * @param {!boolean=} opt_post 
 * @param {!boolean=} opt_apply 
 * @param {!boolean=} opt_delete 
 * @param {!string=} opt_action 
 * @param {!string=} opt_location 
 * @param {!Array<!string>=} opt_propertylist 
 * @param {!boolean=} opt_enabled 
 * @param {!string=} opt_configPath 
 * @param {!Array<!string>=} opt_fallbackPaths 
 * @param {!Array<!string>=} opt_configCollectionInheritancePropertyNames 
 * @param {!angular.$http.Config=} opt_extraHttpRequestParams Extra HTTP parameters to send.
 * @return {!angular.$q.Promise<!API.Client.orgApacheSlingCaconfigResourceImplDefDefaultConfigurationResourInfo>}
 */
API.Client.ConfigmgrApi.prototype.orgApacheSlingCaconfigResourceImplDefDefaultConfigurationResour = function(opt_post, opt_apply, opt_delete, opt_action, opt_location, opt_propertylist, opt_enabled, opt_configPath, opt_fallbackPaths, opt_configCollectionInheritancePropertyNames, opt_extraHttpRequestParams) {
  /** @const {string} */
  var path = this.basePath_ + '/system/console/configMgr/org.apache.sling.caconfig.resource.impl.def.DefaultConfigurationResourceResolvingStrategy';

  /** @type {!Object} */
  var queryParameters = {};

  /** @type {!Object} */
  var headerParams = angular.extend({}, this.defaultHeaders_);
  if (opt_post !== undefined) {
    queryParameters['post'] = opt_post;
  }

  if (opt_apply !== undefined) {
    queryParameters['apply'] = opt_apply;
  }

  if (opt_delete !== undefined) {
    queryParameters['delete'] = opt_delete;
  }

  if (opt_action !== undefined) {
    queryParameters['action'] = opt_action;
  }

  if (opt_location !== undefined) {
    queryParameters['$location'] = opt_location;
  }

  if (opt_propertylist !== undefined) {
    queryParameters['propertylist'] = opt_propertylist;
  }

  if (opt_enabled !== undefined) {
    queryParameters['enabled'] = opt_enabled;
  }

  if (opt_configPath !== undefined) {
    queryParameters['configPath'] = opt_configPath;
  }

  if (opt_fallbackPaths !== undefined) {
    queryParameters['fallbackPaths'] = opt_fallbackPaths;
  }

  if (opt_configCollectionInheritancePropertyNames !== undefined) {
    queryParameters['configCollectionInheritancePropertyNames'] = opt_configCollectionInheritancePropertyNames;
  }

  /** @type {!Object} */
  var httpRequestParams = {
    method: 'POST',
    url: path,
    json: true,
            params: queryParameters,
    headers: headerParams
  };

  if (opt_extraHttpRequestParams) {
    httpRequestParams = angular.extend(httpRequestParams, opt_extraHttpRequestParams);
  }

  return (/** @type {?} */ (this.http_))(httpRequestParams);
}

/**
 * 
 * 
 * @param {!boolean=} opt_post 
 * @param {!boolean=} opt_apply 
 * @param {!boolean=} opt_delete 
 * @param {!string=} opt_action 
 * @param {!string=} opt_location 
 * @param {!Array<!string>=} opt_propertylist 
 * @param {!boolean=} opt_enabled 
 * @param {!Array<!string>=} opt_configRefResourceNames 
 * @param {!Array<!string>=} opt_configRefPropertyNames 
 * @param {!number=} opt_serviceRanking 
 * @param {!angular.$http.Config=} opt_extraHttpRequestParams Extra HTTP parameters to send.
 * @return {!angular.$q.Promise<!API.Client.orgApacheSlingCaconfigResourceImplDefDefaultContextPathStrategyInfo>}
 */
API.Client.ConfigmgrApi.prototype.orgApacheSlingCaconfigResourceImplDefDefaultContextPathStrategy = function(opt_post, opt_apply, opt_delete, opt_action, opt_location, opt_propertylist, opt_enabled, opt_configRefResourceNames, opt_configRefPropertyNames, opt_serviceRanking, opt_extraHttpRequestParams) {
  /** @const {string} */
  var path = this.basePath_ + '/system/console/configMgr/org.apache.sling.caconfig.resource.impl.def.DefaultContextPathStrategy';

  /** @type {!Object} */
  var queryParameters = {};

  /** @type {!Object} */
  var headerParams = angular.extend({}, this.defaultHeaders_);
  if (opt_post !== undefined) {
    queryParameters['post'] = opt_post;
  }

  if (opt_apply !== undefined) {
    queryParameters['apply'] = opt_apply;
  }

  if (opt_delete !== undefined) {
    queryParameters['delete'] = opt_delete;
  }

  if (opt_action !== undefined) {
    queryParameters['action'] = opt_action;
  }

  if (opt_location !== undefined) {
    queryParameters['$location'] = opt_location;
  }

  if (opt_propertylist !== undefined) {
    queryParameters['propertylist'] = opt_propertylist;
  }

  if (opt_enabled !== undefined) {
    queryParameters['enabled'] = opt_enabled;
  }

  if (opt_configRefResourceNames !== undefined) {
    queryParameters['configRefResourceNames'] = opt_configRefResourceNames;
  }

  if (opt_configRefPropertyNames !== undefined) {
    queryParameters['configRefPropertyNames'] = opt_configRefPropertyNames;
  }

  if (opt_serviceRanking !== undefined) {
    queryParameters['service.ranking'] = opt_serviceRanking;
  }

  /** @type {!Object} */
  var httpRequestParams = {
    method: 'POST',
    url: path,
    json: true,
            params: queryParameters,
    headers: headerParams
  };

  if (opt_extraHttpRequestParams) {
    httpRequestParams = angular.extend(httpRequestParams, opt_extraHttpRequestParams);
  }

  return (/** @type {?} */ (this.http_))(httpRequestParams);
}

/**
 * 
 * 
 * @param {!boolean=} opt_post 
 * @param {!boolean=} opt_apply 
 * @param {!boolean=} opt_delete 
 * @param {!string=} opt_action 
 * @param {!string=} opt_location 
 * @param {!Array<!string>=} opt_propertylist 
 * @param {!Array<!string>=} opt_parserFeatures 
 * @param {!angular.$http.Config=} opt_extraHttpRequestParams Extra HTTP parameters to send.
 * @return {!angular.$q.Promise<!API.Client.orgApacheSlingCommonsHtmlInternalTagsoupHtmlParserInfo>}
 */
API.Client.ConfigmgrApi.prototype.orgApacheSlingCommonsHtmlInternalTagsoupHtmlParser = function(opt_post, opt_apply, opt_delete, opt_action, opt_location, opt_propertylist, opt_parserFeatures, opt_extraHttpRequestParams) {
  /** @const {string} */
  var path = this.basePath_ + '/system/console/configMgr/org.apache.sling.commons.html.internal.TagsoupHtmlParser';

  /** @type {!Object} */
  var queryParameters = {};

  /** @type {!Object} */
  var headerParams = angular.extend({}, this.defaultHeaders_);
  if (opt_post !== undefined) {
    queryParameters['post'] = opt_post;
  }

  if (opt_apply !== undefined) {
    queryParameters['apply'] = opt_apply;
  }

  if (opt_delete !== undefined) {
    queryParameters['delete'] = opt_delete;
  }

  if (opt_action !== undefined) {
    queryParameters['action'] = opt_action;
  }

  if (opt_location !== undefined) {
    queryParameters['$location'] = opt_location;
  }

  if (opt_propertylist !== undefined) {
    queryParameters['propertylist'] = opt_propertylist;
  }

  if (opt_parserFeatures !== undefined) {
    queryParameters['parser.features'] = opt_parserFeatures;
  }

  /** @type {!Object} */
  var httpRequestParams = {
    method: 'POST',
    url: path,
    json: true,
            params: queryParameters,
    headers: headerParams
  };

  if (opt_extraHttpRequestParams) {
    httpRequestParams = angular.extend(httpRequestParams, opt_extraHttpRequestParams);
  }

  return (/** @type {?} */ (this.http_))(httpRequestParams);
}

/**
 * 
 * 
 * @param {!boolean=} opt_post 
 * @param {!boolean=} opt_apply 
 * @param {!boolean=} opt_delete 
 * @param {!string=} opt_action 
 * @param {!string=} opt_location 
 * @param {!Array<!string>=} opt_propertylist 
 * @param {!string=} opt_orgApacheSlingCommonsLogLevel 
 * @param {!string=} opt_orgApacheSlingCommonsLogFile 
 * @param {!number=} opt_orgApacheSlingCommonsLogFileNumber 
 * @param {!string=} opt_orgApacheSlingCommonsLogFileSize 
 * @param {!string=} opt_orgApacheSlingCommonsLogPattern 
 * @param {!string=} opt_orgApacheSlingCommonsLogConfigurationFile 
 * @param {!boolean=} opt_orgApacheSlingCommonsLogPackagingDataEnabled 
 * @param {!number=} opt_orgApacheSlingCommonsLogMaxCallerDataDepth 
 * @param {!number=} opt_orgApacheSlingCommonsLogMaxOldFileCountInDump 
 * @param {!number=} opt_orgApacheSlingCommonsLogNumOfLines 
 * @param {!angular.$http.Config=} opt_extraHttpRequestParams Extra HTTP parameters to send.
 * @return {!angular.$q.Promise<!API.Client.orgApacheSlingCommonsLogLogManagerInfo>}
 */
API.Client.ConfigmgrApi.prototype.orgApacheSlingCommonsLogLogManager = function(opt_post, opt_apply, opt_delete, opt_action, opt_location, opt_propertylist, opt_orgApacheSlingCommonsLogLevel, opt_orgApacheSlingCommonsLogFile, opt_orgApacheSlingCommonsLogFileNumber, opt_orgApacheSlingCommonsLogFileSize, opt_orgApacheSlingCommonsLogPattern, opt_orgApacheSlingCommonsLogConfigurationFile, opt_orgApacheSlingCommonsLogPackagingDataEnabled, opt_orgApacheSlingCommonsLogMaxCallerDataDepth, opt_orgApacheSlingCommonsLogMaxOldFileCountInDump, opt_orgApacheSlingCommonsLogNumOfLines, opt_extraHttpRequestParams) {
  /** @const {string} */
  var path = this.basePath_ + '/system/console/configMgr/org.apache.sling.commons.log.LogManager';

  /** @type {!Object} */
  var queryParameters = {};

  /** @type {!Object} */
  var headerParams = angular.extend({}, this.defaultHeaders_);
  if (opt_post !== undefined) {
    queryParameters['post'] = opt_post;
  }

  if (opt_apply !== undefined) {
    queryParameters['apply'] = opt_apply;
  }

  if (opt_delete !== undefined) {
    queryParameters['delete'] = opt_delete;
  }

  if (opt_action !== undefined) {
    queryParameters['action'] = opt_action;
  }

  if (opt_location !== undefined) {
    queryParameters['$location'] = opt_location;
  }

  if (opt_propertylist !== undefined) {
    queryParameters['propertylist'] = opt_propertylist;
  }

  if (opt_orgApacheSlingCommonsLogLevel !== undefined) {
    queryParameters['org.apache.sling.commons.log.level'] = opt_orgApacheSlingCommonsLogLevel;
  }

  if (opt_orgApacheSlingCommonsLogFile !== undefined) {
    queryParameters['org.apache.sling.commons.log.file'] = opt_orgApacheSlingCommonsLogFile;
  }

  if (opt_orgApacheSlingCommonsLogFileNumber !== undefined) {
    queryParameters['org.apache.sling.commons.log.file.number'] = opt_orgApacheSlingCommonsLogFileNumber;
  }

  if (opt_orgApacheSlingCommonsLogFileSize !== undefined) {
    queryParameters['org.apache.sling.commons.log.file.size'] = opt_orgApacheSlingCommonsLogFileSize;
  }

  if (opt_orgApacheSlingCommonsLogPattern !== undefined) {
    queryParameters['org.apache.sling.commons.log.pattern'] = opt_orgApacheSlingCommonsLogPattern;
  }

  if (opt_orgApacheSlingCommonsLogConfigurationFile !== undefined) {
    queryParameters['org.apache.sling.commons.log.configurationFile'] = opt_orgApacheSlingCommonsLogConfigurationFile;
  }

  if (opt_orgApacheSlingCommonsLogPackagingDataEnabled !== undefined) {
    queryParameters['org.apache.sling.commons.log.packagingDataEnabled'] = opt_orgApacheSlingCommonsLogPackagingDataEnabled;
  }

  if (opt_orgApacheSlingCommonsLogMaxCallerDataDepth !== undefined) {
    queryParameters['org.apache.sling.commons.log.maxCallerDataDepth'] = opt_orgApacheSlingCommonsLogMaxCallerDataDepth;
  }

  if (opt_orgApacheSlingCommonsLogMaxOldFileCountInDump !== undefined) {
    queryParameters['org.apache.sling.commons.log.maxOldFileCountInDump'] = opt_orgApacheSlingCommonsLogMaxOldFileCountInDump;
  }

  if (opt_orgApacheSlingCommonsLogNumOfLines !== undefined) {
    queryParameters['org.apache.sling.commons.log.numOfLines'] = opt_orgApacheSlingCommonsLogNumOfLines;
  }

  /** @type {!Object} */
  var httpRequestParams = {
    method: 'POST',
    url: path,
    json: true,
            params: queryParameters,
    headers: headerParams
  };

  if (opt_extraHttpRequestParams) {
    httpRequestParams = angular.extend(httpRequestParams, opt_extraHttpRequestParams);
  }

  return (/** @type {?} */ (this.http_))(httpRequestParams);
}

/**
 * 
 * 
 * @param {!boolean=} opt_post 
 * @param {!boolean=} opt_apply 
 * @param {!boolean=} opt_delete 
 * @param {!string=} opt_action 
 * @param {!string=} opt_location 
 * @param {!Array<!string>=} opt_propertylist 
 * @param {!string=} opt_orgApacheSlingCommonsLogLevel 
 * @param {!string=} opt_orgApacheSlingCommonsLogFile 
 * @param {!string=} opt_orgApacheSlingCommonsLogPattern 
 * @param {!Array<!string>=} opt_orgApacheSlingCommonsLogNames 
 * @param {!boolean=} opt_orgApacheSlingCommonsLogAdditiv 
 * @param {!angular.$http.Config=} opt_extraHttpRequestParams Extra HTTP parameters to send.
 * @return {!angular.$q.Promise<!API.Client.orgApacheSlingCommonsLogLogManagerFactoryConfigInfo>}
 */
API.Client.ConfigmgrApi.prototype.orgApacheSlingCommonsLogLogManagerFactoryConfig = function(opt_post, opt_apply, opt_delete, opt_action, opt_location, opt_propertylist, opt_orgApacheSlingCommonsLogLevel, opt_orgApacheSlingCommonsLogFile, opt_orgApacheSlingCommonsLogPattern, opt_orgApacheSlingCommonsLogNames, opt_orgApacheSlingCommonsLogAdditiv, opt_extraHttpRequestParams) {
  /** @const {string} */
  var path = this.basePath_ + '/system/console/configMgr/org.apache.sling.commons.log.LogManager.factory.config';

  /** @type {!Object} */
  var queryParameters = {};

  /** @type {!Object} */
  var headerParams = angular.extend({}, this.defaultHeaders_);
  if (opt_post !== undefined) {
    queryParameters['post'] = opt_post;
  }

  if (opt_apply !== undefined) {
    queryParameters['apply'] = opt_apply;
  }

  if (opt_delete !== undefined) {
    queryParameters['delete'] = opt_delete;
  }

  if (opt_action !== undefined) {
    queryParameters['action'] = opt_action;
  }

  if (opt_location !== undefined) {
    queryParameters['$location'] = opt_location;
  }

  if (opt_propertylist !== undefined) {
    queryParameters['propertylist'] = opt_propertylist;
  }

  if (opt_orgApacheSlingCommonsLogLevel !== undefined) {
    queryParameters['org.apache.sling.commons.log.level'] = opt_orgApacheSlingCommonsLogLevel;
  }

  if (opt_orgApacheSlingCommonsLogFile !== undefined) {
    queryParameters['org.apache.sling.commons.log.file'] = opt_orgApacheSlingCommonsLogFile;
  }

  if (opt_orgApacheSlingCommonsLogPattern !== undefined) {
    queryParameters['org.apache.sling.commons.log.pattern'] = opt_orgApacheSlingCommonsLogPattern;
  }

  if (opt_orgApacheSlingCommonsLogNames !== undefined) {
    queryParameters['org.apache.sling.commons.log.names'] = opt_orgApacheSlingCommonsLogNames;
  }

  if (opt_orgApacheSlingCommonsLogAdditiv !== undefined) {
    queryParameters['org.apache.sling.commons.log.additiv'] = opt_orgApacheSlingCommonsLogAdditiv;
  }

  /** @type {!Object} */
  var httpRequestParams = {
    method: 'POST',
    url: path,
    json: true,
            params: queryParameters,
    headers: headerParams
  };

  if (opt_extraHttpRequestParams) {
    httpRequestParams = angular.extend(httpRequestParams, opt_extraHttpRequestParams);
  }

  return (/** @type {?} */ (this.http_))(httpRequestParams);
}

/**
 * 
 * 
 * @param {!boolean=} opt_post 
 * @param {!boolean=} opt_apply 
 * @param {!boolean=} opt_delete 
 * @param {!string=} opt_action 
 * @param {!string=} opt_location 
 * @param {!Array<!string>=} opt_propertylist 
 * @param {!string=} opt_orgApacheSlingCommonsLogFile 
 * @param {!number=} opt_orgApacheSlingCommonsLogFileNumber 
 * @param {!string=} opt_orgApacheSlingCommonsLogFileSize 
 * @param {!boolean=} opt_orgApacheSlingCommonsLogFileBuffered 
 * @param {!angular.$http.Config=} opt_extraHttpRequestParams Extra HTTP parameters to send.
 * @return {!angular.$q.Promise<!API.Client.orgApacheSlingCommonsLogLogManagerFactoryWriterInfo>}
 */
API.Client.ConfigmgrApi.prototype.orgApacheSlingCommonsLogLogManagerFactoryWriter = function(opt_post, opt_apply, opt_delete, opt_action, opt_location, opt_propertylist, opt_orgApacheSlingCommonsLogFile, opt_orgApacheSlingCommonsLogFileNumber, opt_orgApacheSlingCommonsLogFileSize, opt_orgApacheSlingCommonsLogFileBuffered, opt_extraHttpRequestParams) {
  /** @const {string} */
  var path = this.basePath_ + '/system/console/configMgr/org.apache.sling.commons.log.LogManager.factory.writer';

  /** @type {!Object} */
  var queryParameters = {};

  /** @type {!Object} */
  var headerParams = angular.extend({}, this.defaultHeaders_);
  if (opt_post !== undefined) {
    queryParameters['post'] = opt_post;
  }

  if (opt_apply !== undefined) {
    queryParameters['apply'] = opt_apply;
  }

  if (opt_delete !== undefined) {
    queryParameters['delete'] = opt_delete;
  }

  if (opt_action !== undefined) {
    queryParameters['action'] = opt_action;
  }

  if (opt_location !== undefined) {
    queryParameters['$location'] = opt_location;
  }

  if (opt_propertylist !== undefined) {
    queryParameters['propertylist'] = opt_propertylist;
  }

  if (opt_orgApacheSlingCommonsLogFile !== undefined) {
    queryParameters['org.apache.sling.commons.log.file'] = opt_orgApacheSlingCommonsLogFile;
  }

  if (opt_orgApacheSlingCommonsLogFileNumber !== undefined) {
    queryParameters['org.apache.sling.commons.log.file.number'] = opt_orgApacheSlingCommonsLogFileNumber;
  }

  if (opt_orgApacheSlingCommonsLogFileSize !== undefined) {
    queryParameters['org.apache.sling.commons.log.file.size'] = opt_orgApacheSlingCommonsLogFileSize;
  }

  if (opt_orgApacheSlingCommonsLogFileBuffered !== undefined) {
    queryParameters['org.apache.sling.commons.log.file.buffered'] = opt_orgApacheSlingCommonsLogFileBuffered;
  }

  /** @type {!Object} */
  var httpRequestParams = {
    method: 'POST',
    url: path,
    json: true,
            params: queryParameters,
    headers: headerParams
  };

  if (opt_extraHttpRequestParams) {
    httpRequestParams = angular.extend(httpRequestParams, opt_extraHttpRequestParams);
  }

  return (/** @type {?} */ (this.http_))(httpRequestParams);
}

/**
 * 
 * 
 * @param {!boolean=} opt_post 
 * @param {!boolean=} opt_apply 
 * @param {!boolean=} opt_delete 
 * @param {!string=} opt_action 
 * @param {!string=} opt_location 
 * @param {!Array<!string>=} opt_propertylist 
 * @param {!number=} opt_period 
 * @param {!string=} opt_timeUnit 
 * @param {!string=} opt_level 
 * @param {!string=} opt_loggerName 
 * @param {!string=} opt_prefix 
 * @param {!string=} opt_pattern 
 * @param {!string=} opt_registryName 
 * @param {!angular.$http.Config=} opt_extraHttpRequestParams Extra HTTP parameters to send.
 * @return {!angular.$q.Promise<!API.Client.orgApacheSlingCommonsMetricsInternalLogReporterInfo>}
 */
API.Client.ConfigmgrApi.prototype.orgApacheSlingCommonsMetricsInternalLogReporter = function(opt_post, opt_apply, opt_delete, opt_action, opt_location, opt_propertylist, opt_period, opt_timeUnit, opt_level, opt_loggerName, opt_prefix, opt_pattern, opt_registryName, opt_extraHttpRequestParams) {
  /** @const {string} */
  var path = this.basePath_ + '/system/console/configMgr/org.apache.sling.commons.metrics.internal.LogReporter';

  /** @type {!Object} */
  var queryParameters = {};

  /** @type {!Object} */
  var headerParams = angular.extend({}, this.defaultHeaders_);
  if (opt_post !== undefined) {
    queryParameters['post'] = opt_post;
  }

  if (opt_apply !== undefined) {
    queryParameters['apply'] = opt_apply;
  }

  if (opt_delete !== undefined) {
    queryParameters['delete'] = opt_delete;
  }

  if (opt_action !== undefined) {
    queryParameters['action'] = opt_action;
  }

  if (opt_location !== undefined) {
    queryParameters['$location'] = opt_location;
  }

  if (opt_propertylist !== undefined) {
    queryParameters['propertylist'] = opt_propertylist;
  }

  if (opt_period !== undefined) {
    queryParameters['period'] = opt_period;
  }

  if (opt_timeUnit !== undefined) {
    queryParameters['timeUnit'] = opt_timeUnit;
  }

  if (opt_level !== undefined) {
    queryParameters['level'] = opt_level;
  }

  if (opt_loggerName !== undefined) {
    queryParameters['loggerName'] = opt_loggerName;
  }

  if (opt_prefix !== undefined) {
    queryParameters['prefix'] = opt_prefix;
  }

  if (opt_pattern !== undefined) {
    queryParameters['pattern'] = opt_pattern;
  }

  if (opt_registryName !== undefined) {
    queryParameters['registryName'] = opt_registryName;
  }

  /** @type {!Object} */
  var httpRequestParams = {
    method: 'POST',
    url: path,
    json: true,
            params: queryParameters,
    headers: headerParams
  };

  if (opt_extraHttpRequestParams) {
    httpRequestParams = angular.extend(httpRequestParams, opt_extraHttpRequestParams);
  }

  return (/** @type {?} */ (this.http_))(httpRequestParams);
}

/**
 * 
 * 
 * @param {!boolean=} opt_post 
 * @param {!boolean=} opt_apply 
 * @param {!boolean=} opt_delete 
 * @param {!string=} opt_action 
 * @param {!string=} opt_location 
 * @param {!Array<!string>=} opt_propertylist 
 * @param {!Array<!string>=} opt_datasources 
 * @param {!number=} opt_step 
 * @param {!Array<!string>=} opt_archives 
 * @param {!string=} opt_path 
 * @param {!angular.$http.Config=} opt_extraHttpRequestParams Extra HTTP parameters to send.
 * @return {!angular.$q.Promise<!API.Client.orgApacheSlingCommonsMetricsRrd4jImplCodahaleMetricsReporterInfo>}
 */
API.Client.ConfigmgrApi.prototype.orgApacheSlingCommonsMetricsRrd4jImplCodahaleMetricsReporter = function(opt_post, opt_apply, opt_delete, opt_action, opt_location, opt_propertylist, opt_datasources, opt_step, opt_archives, opt_path, opt_extraHttpRequestParams) {
  /** @const {string} */
  var path = this.basePath_ + '/system/console/configMgr/org.apache.sling.commons.metrics.rrd4j.impl.CodahaleMetricsReporter';

  /** @type {!Object} */
  var queryParameters = {};

  /** @type {!Object} */
  var headerParams = angular.extend({}, this.defaultHeaders_);
  if (opt_post !== undefined) {
    queryParameters['post'] = opt_post;
  }

  if (opt_apply !== undefined) {
    queryParameters['apply'] = opt_apply;
  }

  if (opt_delete !== undefined) {
    queryParameters['delete'] = opt_delete;
  }

  if (opt_action !== undefined) {
    queryParameters['action'] = opt_action;
  }

  if (opt_location !== undefined) {
    queryParameters['$location'] = opt_location;
  }

  if (opt_propertylist !== undefined) {
    queryParameters['propertylist'] = opt_propertylist;
  }

  if (opt_datasources !== undefined) {
    queryParameters['datasources'] = opt_datasources;
  }

  if (opt_step !== undefined) {
    queryParameters['step'] = opt_step;
  }

  if (opt_archives !== undefined) {
    queryParameters['archives'] = opt_archives;
  }

  if (opt_path !== undefined) {
    queryParameters['path'] = opt_path;
  }

  /** @type {!Object} */
  var httpRequestParams = {
    method: 'POST',
    url: path,
    json: true,
            params: queryParameters,
    headers: headerParams
  };

  if (opt_extraHttpRequestParams) {
    httpRequestParams = angular.extend(httpRequestParams, opt_extraHttpRequestParams);
  }

  return (/** @type {?} */ (this.http_))(httpRequestParams);
}

/**
 * 
 * 
 * @param {!boolean=} opt_post 
 * @param {!boolean=} opt_apply 
 * @param {!boolean=} opt_delete 
 * @param {!string=} opt_action 
 * @param {!string=} opt_location 
 * @param {!Array<!string>=} opt_propertylist 
 * @param {!Array<!string>=} opt_mimeTypes 
 * @param {!angular.$http.Config=} opt_extraHttpRequestParams Extra HTTP parameters to send.
 * @return {!angular.$q.Promise<!API.Client.orgApacheSlingCommonsMimeInternalMimeTypeServiceImplInfo>}
 */
API.Client.ConfigmgrApi.prototype.orgApacheSlingCommonsMimeInternalMimeTypeServiceImpl = function(opt_post, opt_apply, opt_delete, opt_action, opt_location, opt_propertylist, opt_mimeTypes, opt_extraHttpRequestParams) {
  /** @const {string} */
  var path = this.basePath_ + '/system/console/configMgr/org.apache.sling.commons.mime.internal.MimeTypeServiceImpl';

  /** @type {!Object} */
  var queryParameters = {};

  /** @type {!Object} */
  var headerParams = angular.extend({}, this.defaultHeaders_);
  if (opt_post !== undefined) {
    queryParameters['post'] = opt_post;
  }

  if (opt_apply !== undefined) {
    queryParameters['apply'] = opt_apply;
  }

  if (opt_delete !== undefined) {
    queryParameters['delete'] = opt_delete;
  }

  if (opt_action !== undefined) {
    queryParameters['action'] = opt_action;
  }

  if (opt_location !== undefined) {
    queryParameters['$location'] = opt_location;
  }

  if (opt_propertylist !== undefined) {
    queryParameters['propertylist'] = opt_propertylist;
  }

  if (opt_mimeTypes !== undefined) {
    queryParameters['mime.types'] = opt_mimeTypes;
  }

  /** @type {!Object} */
  var httpRequestParams = {
    method: 'POST',
    url: path,
    json: true,
            params: queryParameters,
    headers: headerParams
  };

  if (opt_extraHttpRequestParams) {
    httpRequestParams = angular.extend(httpRequestParams, opt_extraHttpRequestParams);
  }

  return (/** @type {?} */ (this.http_))(httpRequestParams);
}

/**
 * 
 * 
 * @param {!boolean=} opt_post 
 * @param {!boolean=} opt_apply 
 * @param {!boolean=} opt_delete 
 * @param {!string=} opt_action 
 * @param {!string=} opt_location 
 * @param {!Array<!string>=} opt_propertylist 
 * @param {!string=} opt_poolName 
 * @param {!Array<!string>=} opt_allowedPoolNames 
 * @param {!boolean=} opt_schedulerUseleaderforsingle 
 * @param {!Array<!string>=} opt_metricsFilters 
 * @param {!number=} opt_slowThresholdMillis 
 * @param {!angular.$http.Config=} opt_extraHttpRequestParams Extra HTTP parameters to send.
 * @return {!angular.$q.Promise<!API.Client.orgApacheSlingCommonsSchedulerImplQuartzSchedulerInfo>}
 */
API.Client.ConfigmgrApi.prototype.orgApacheSlingCommonsSchedulerImplQuartzScheduler = function(opt_post, opt_apply, opt_delete, opt_action, opt_location, opt_propertylist, opt_poolName, opt_allowedPoolNames, opt_schedulerUseleaderforsingle, opt_metricsFilters, opt_slowThresholdMillis, opt_extraHttpRequestParams) {
  /** @const {string} */
  var path = this.basePath_ + '/system/console/configMgr/org.apache.sling.commons.scheduler.impl.QuartzScheduler';

  /** @type {!Object} */
  var queryParameters = {};

  /** @type {!Object} */
  var headerParams = angular.extend({}, this.defaultHeaders_);
  if (opt_post !== undefined) {
    queryParameters['post'] = opt_post;
  }

  if (opt_apply !== undefined) {
    queryParameters['apply'] = opt_apply;
  }

  if (opt_delete !== undefined) {
    queryParameters['delete'] = opt_delete;
  }

  if (opt_action !== undefined) {
    queryParameters['action'] = opt_action;
  }

  if (opt_location !== undefined) {
    queryParameters['$location'] = opt_location;
  }

  if (opt_propertylist !== undefined) {
    queryParameters['propertylist'] = opt_propertylist;
  }

  if (opt_poolName !== undefined) {
    queryParameters['poolName'] = opt_poolName;
  }

  if (opt_allowedPoolNames !== undefined) {
    queryParameters['allowedPoolNames'] = opt_allowedPoolNames;
  }

  if (opt_schedulerUseleaderforsingle !== undefined) {
    queryParameters['scheduler.useleaderforsingle'] = opt_schedulerUseleaderforsingle;
  }

  if (opt_metricsFilters !== undefined) {
    queryParameters['metrics.filters'] = opt_metricsFilters;
  }

  if (opt_slowThresholdMillis !== undefined) {
    queryParameters['slowThresholdMillis'] = opt_slowThresholdMillis;
  }

  /** @type {!Object} */
  var httpRequestParams = {
    method: 'POST',
    url: path,
    json: true,
            params: queryParameters,
    headers: headerParams
  };

  if (opt_extraHttpRequestParams) {
    httpRequestParams = angular.extend(httpRequestParams, opt_extraHttpRequestParams);
  }

  return (/** @type {?} */ (this.http_))(httpRequestParams);
}

/**
 * 
 * 
 * @param {!boolean=} opt_post 
 * @param {!boolean=} opt_apply 
 * @param {!boolean=} opt_delete 
 * @param {!string=} opt_action 
 * @param {!string=} opt_location 
 * @param {!Array<!string>=} opt_propertylist 
 * @param {!number=} opt_maxQuartzJobDurationAcceptable 
 * @param {!angular.$http.Config=} opt_extraHttpRequestParams Extra HTTP parameters to send.
 * @return {!angular.$q.Promise<!API.Client.orgApacheSlingCommonsSchedulerImplSchedulerHealthCheckInfo>}
 */
API.Client.ConfigmgrApi.prototype.orgApacheSlingCommonsSchedulerImplSchedulerHealthCheck = function(opt_post, opt_apply, opt_delete, opt_action, opt_location, opt_propertylist, opt_maxQuartzJobDurationAcceptable, opt_extraHttpRequestParams) {
  /** @const {string} */
  var path = this.basePath_ + '/system/console/configMgr/org.apache.sling.commons.scheduler.impl.SchedulerHealthCheck';

  /** @type {!Object} */
  var queryParameters = {};

  /** @type {!Object} */
  var headerParams = angular.extend({}, this.defaultHeaders_);
  if (opt_post !== undefined) {
    queryParameters['post'] = opt_post;
  }

  if (opt_apply !== undefined) {
    queryParameters['apply'] = opt_apply;
  }

  if (opt_delete !== undefined) {
    queryParameters['delete'] = opt_delete;
  }

  if (opt_action !== undefined) {
    queryParameters['action'] = opt_action;
  }

  if (opt_location !== undefined) {
    queryParameters['$location'] = opt_location;
  }

  if (opt_propertylist !== undefined) {
    queryParameters['propertylist'] = opt_propertylist;
  }

  if (opt_maxQuartzJobDurationAcceptable !== undefined) {
    queryParameters['max.quartzJob.duration.acceptable'] = opt_maxQuartzJobDurationAcceptable;
  }

  /** @type {!Object} */
  var httpRequestParams = {
    method: 'POST',
    url: path,
    json: true,
            params: queryParameters,
    headers: headerParams
  };

  if (opt_extraHttpRequestParams) {
    httpRequestParams = angular.extend(httpRequestParams, opt_extraHttpRequestParams);
  }

  return (/** @type {?} */ (this.http_))(httpRequestParams);
}

/**
 * 
 * 
 * @param {!boolean=} opt_post 
 * @param {!boolean=} opt_apply 
 * @param {!boolean=} opt_delete 
 * @param {!string=} opt_action 
 * @param {!string=} opt_location 
 * @param {!Array<!string>=} opt_propertylist 
 * @param {!string=} opt_name 
 * @param {!number=} opt_minPoolSize 
 * @param {!number=} opt_maxPoolSize 
 * @param {!number=} opt_queueSize 
 * @param {!number=} opt_maxThreadAge 
 * @param {!number=} opt_keepAliveTime 
 * @param {!string=} opt_blockPolicy 
 * @param {!boolean=} opt_shutdownGraceful 
 * @param {!boolean=} opt_daemon 
 * @param {!number=} opt_shutdownWaitTime 
 * @param {!string=} opt_priority 
 * @param {!angular.$http.Config=} opt_extraHttpRequestParams Extra HTTP parameters to send.
 * @return {!angular.$q.Promise<!API.Client.orgApacheSlingCommonsThreadsImplDefaultThreadPoolFactoryInfo>}
 */
API.Client.ConfigmgrApi.prototype.orgApacheSlingCommonsThreadsImplDefaultThreadPoolFactory = function(opt_post, opt_apply, opt_delete, opt_action, opt_location, opt_propertylist, opt_name, opt_minPoolSize, opt_maxPoolSize, opt_queueSize, opt_maxThreadAge, opt_keepAliveTime, opt_blockPolicy, opt_shutdownGraceful, opt_daemon, opt_shutdownWaitTime, opt_priority, opt_extraHttpRequestParams) {
  /** @const {string} */
  var path = this.basePath_ + '/system/console/configMgr/org.apache.sling.commons.threads.impl.DefaultThreadPool.factory';

  /** @type {!Object} */
  var queryParameters = {};

  /** @type {!Object} */
  var headerParams = angular.extend({}, this.defaultHeaders_);
  if (opt_post !== undefined) {
    queryParameters['post'] = opt_post;
  }

  if (opt_apply !== undefined) {
    queryParameters['apply'] = opt_apply;
  }

  if (opt_delete !== undefined) {
    queryParameters['delete'] = opt_delete;
  }

  if (opt_action !== undefined) {
    queryParameters['action'] = opt_action;
  }

  if (opt_location !== undefined) {
    queryParameters['$location'] = opt_location;
  }

  if (opt_propertylist !== undefined) {
    queryParameters['propertylist'] = opt_propertylist;
  }

  if (opt_name !== undefined) {
    queryParameters['name'] = opt_name;
  }

  if (opt_minPoolSize !== undefined) {
    queryParameters['minPoolSize'] = opt_minPoolSize;
  }

  if (opt_maxPoolSize !== undefined) {
    queryParameters['maxPoolSize'] = opt_maxPoolSize;
  }

  if (opt_queueSize !== undefined) {
    queryParameters['queueSize'] = opt_queueSize;
  }

  if (opt_maxThreadAge !== undefined) {
    queryParameters['maxThreadAge'] = opt_maxThreadAge;
  }

  if (opt_keepAliveTime !== undefined) {
    queryParameters['keepAliveTime'] = opt_keepAliveTime;
  }

  if (opt_blockPolicy !== undefined) {
    queryParameters['blockPolicy'] = opt_blockPolicy;
  }

  if (opt_shutdownGraceful !== undefined) {
    queryParameters['shutdownGraceful'] = opt_shutdownGraceful;
  }

  if (opt_daemon !== undefined) {
    queryParameters['daemon'] = opt_daemon;
  }

  if (opt_shutdownWaitTime !== undefined) {
    queryParameters['shutdownWaitTime'] = opt_shutdownWaitTime;
  }

  if (opt_priority !== undefined) {
    queryParameters['priority'] = opt_priority;
  }

  /** @type {!Object} */
  var httpRequestParams = {
    method: 'POST',
    url: path,
    json: true,
            params: queryParameters,
    headers: headerParams
  };

  if (opt_extraHttpRequestParams) {
    httpRequestParams = angular.extend(httpRequestParams, opt_extraHttpRequestParams);
  }

  return (/** @type {?} */ (this.http_))(httpRequestParams);
}

/**
 * 
 * 
 * @param {!boolean=} opt_post 
 * @param {!boolean=} opt_apply 
 * @param {!boolean=} opt_delete 
 * @param {!string=} opt_action 
 * @param {!string=} opt_location 
 * @param {!Array<!string>=} opt_propertylist 
 * @param {!string=} opt_datasourceName 
 * @param {!string=} opt_datasourceSvcPropName 
 * @param {!string=} opt_driverClassName 
 * @param {!string=} opt_url 
 * @param {!string=} opt_username 
 * @param {!string=} opt_password 
 * @param {!string=} opt_defaultAutoCommit 
 * @param {!string=} opt_defaultReadOnly 
 * @param {!string=} opt_defaultTransactionIsolation 
 * @param {!string=} opt_defaultCatalog 
 * @param {!number=} opt_maxActive 
 * @param {!number=} opt_maxIdle 
 * @param {!number=} opt_minIdle 
 * @param {!number=} opt_initialSize 
 * @param {!number=} opt_maxWait 
 * @param {!number=} opt_maxAge 
 * @param {!boolean=} opt_testOnBorrow 
 * @param {!boolean=} opt_testOnReturn 
 * @param {!boolean=} opt_testWhileIdle 
 * @param {!string=} opt_validationQuery 
 * @param {!number=} opt_validationQueryTimeout 
 * @param {!number=} opt_timeBetweenEvictionRunsMillis 
 * @param {!number=} opt_minEvictableIdleTimeMillis 
 * @param {!string=} opt_connectionProperties 
 * @param {!string=} opt_initSQL 
 * @param {!string=} opt_jdbcInterceptors 
 * @param {!number=} opt_validationInterval 
 * @param {!boolean=} opt_logValidationErrors 
 * @param {!Array<!string>=} opt_datasourceSvcProperties 
 * @param {!angular.$http.Config=} opt_extraHttpRequestParams Extra HTTP parameters to send.
 * @return {!angular.$q.Promise<!API.Client.orgApacheSlingDatasourceDataSourceFactoryInfo>}
 */
API.Client.ConfigmgrApi.prototype.orgApacheSlingDatasourceDataSourceFactory = function(opt_post, opt_apply, opt_delete, opt_action, opt_location, opt_propertylist, opt_datasourceName, opt_datasourceSvcPropName, opt_driverClassName, opt_url, opt_username, opt_password, opt_defaultAutoCommit, opt_defaultReadOnly, opt_defaultTransactionIsolation, opt_defaultCatalog, opt_maxActive, opt_maxIdle, opt_minIdle, opt_initialSize, opt_maxWait, opt_maxAge, opt_testOnBorrow, opt_testOnReturn, opt_testWhileIdle, opt_validationQuery, opt_validationQueryTimeout, opt_timeBetweenEvictionRunsMillis, opt_minEvictableIdleTimeMillis, opt_connectionProperties, opt_initSQL, opt_jdbcInterceptors, opt_validationInterval, opt_logValidationErrors, opt_datasourceSvcProperties, opt_extraHttpRequestParams) {
  /** @const {string} */
  var path = this.basePath_ + '/system/console/configMgr/org.apache.sling.datasource.DataSourceFactory';

  /** @type {!Object} */
  var queryParameters = {};

  /** @type {!Object} */
  var headerParams = angular.extend({}, this.defaultHeaders_);
  if (opt_post !== undefined) {
    queryParameters['post'] = opt_post;
  }

  if (opt_apply !== undefined) {
    queryParameters['apply'] = opt_apply;
  }

  if (opt_delete !== undefined) {
    queryParameters['delete'] = opt_delete;
  }

  if (opt_action !== undefined) {
    queryParameters['action'] = opt_action;
  }

  if (opt_location !== undefined) {
    queryParameters['$location'] = opt_location;
  }

  if (opt_propertylist !== undefined) {
    queryParameters['propertylist'] = opt_propertylist;
  }

  if (opt_datasourceName !== undefined) {
    queryParameters['datasource.name'] = opt_datasourceName;
  }

  if (opt_datasourceSvcPropName !== undefined) {
    queryParameters['datasource.svc.prop.name'] = opt_datasourceSvcPropName;
  }

  if (opt_driverClassName !== undefined) {
    queryParameters['driverClassName'] = opt_driverClassName;
  }

  if (opt_url !== undefined) {
    queryParameters['url'] = opt_url;
  }

  if (opt_username !== undefined) {
    queryParameters['username'] = opt_username;
  }

  if (opt_password !== undefined) {
    queryParameters['password'] = opt_password;
  }

  if (opt_defaultAutoCommit !== undefined) {
    queryParameters['defaultAutoCommit'] = opt_defaultAutoCommit;
  }

  if (opt_defaultReadOnly !== undefined) {
    queryParameters['defaultReadOnly'] = opt_defaultReadOnly;
  }

  if (opt_defaultTransactionIsolation !== undefined) {
    queryParameters['defaultTransactionIsolation'] = opt_defaultTransactionIsolation;
  }

  if (opt_defaultCatalog !== undefined) {
    queryParameters['defaultCatalog'] = opt_defaultCatalog;
  }

  if (opt_maxActive !== undefined) {
    queryParameters['maxActive'] = opt_maxActive;
  }

  if (opt_maxIdle !== undefined) {
    queryParameters['maxIdle'] = opt_maxIdle;
  }

  if (opt_minIdle !== undefined) {
    queryParameters['minIdle'] = opt_minIdle;
  }

  if (opt_initialSize !== undefined) {
    queryParameters['initialSize'] = opt_initialSize;
  }

  if (opt_maxWait !== undefined) {
    queryParameters['maxWait'] = opt_maxWait;
  }

  if (opt_maxAge !== undefined) {
    queryParameters['maxAge'] = opt_maxAge;
  }

  if (opt_testOnBorrow !== undefined) {
    queryParameters['testOnBorrow'] = opt_testOnBorrow;
  }

  if (opt_testOnReturn !== undefined) {
    queryParameters['testOnReturn'] = opt_testOnReturn;
  }

  if (opt_testWhileIdle !== undefined) {
    queryParameters['testWhileIdle'] = opt_testWhileIdle;
  }

  if (opt_validationQuery !== undefined) {
    queryParameters['validationQuery'] = opt_validationQuery;
  }

  if (opt_validationQueryTimeout !== undefined) {
    queryParameters['validationQueryTimeout'] = opt_validationQueryTimeout;
  }

  if (opt_timeBetweenEvictionRunsMillis !== undefined) {
    queryParameters['timeBetweenEvictionRunsMillis'] = opt_timeBetweenEvictionRunsMillis;
  }

  if (opt_minEvictableIdleTimeMillis !== undefined) {
    queryParameters['minEvictableIdleTimeMillis'] = opt_minEvictableIdleTimeMillis;
  }

  if (opt_connectionProperties !== undefined) {
    queryParameters['connectionProperties'] = opt_connectionProperties;
  }

  if (opt_initSQL !== undefined) {
    queryParameters['initSQL'] = opt_initSQL;
  }

  if (opt_jdbcInterceptors !== undefined) {
    queryParameters['jdbcInterceptors'] = opt_jdbcInterceptors;
  }

  if (opt_validationInterval !== undefined) {
    queryParameters['validationInterval'] = opt_validationInterval;
  }

  if (opt_logValidationErrors !== undefined) {
    queryParameters['logValidationErrors'] = opt_logValidationErrors;
  }

  if (opt_datasourceSvcProperties !== undefined) {
    queryParameters['datasource.svc.properties'] = opt_datasourceSvcProperties;
  }

  /** @type {!Object} */
  var httpRequestParams = {
    method: 'POST',
    url: path,
    json: true,
            params: queryParameters,
    headers: headerParams
  };

  if (opt_extraHttpRequestParams) {
    httpRequestParams = angular.extend(httpRequestParams, opt_extraHttpRequestParams);
  }

  return (/** @type {?} */ (this.http_))(httpRequestParams);
}

/**
 * 
 * 
 * @param {!boolean=} opt_post 
 * @param {!boolean=} opt_apply 
 * @param {!boolean=} opt_delete 
 * @param {!string=} opt_action 
 * @param {!string=} opt_location 
 * @param {!Array<!string>=} opt_propertylist 
 * @param {!string=} opt_datasourceName 
 * @param {!string=} opt_datasourceSvcPropName 
 * @param {!string=} opt_datasourceJndiName 
 * @param {!Array<!string>=} opt_jndiProperties 
 * @param {!angular.$http.Config=} opt_extraHttpRequestParams Extra HTTP parameters to send.
 * @return {!angular.$q.Promise<!API.Client.orgApacheSlingDatasourceJNDIDataSourceFactoryInfo>}
 */
API.Client.ConfigmgrApi.prototype.orgApacheSlingDatasourceJNDIDataSourceFactory = function(opt_post, opt_apply, opt_delete, opt_action, opt_location, opt_propertylist, opt_datasourceName, opt_datasourceSvcPropName, opt_datasourceJndiName, opt_jndiProperties, opt_extraHttpRequestParams) {
  /** @const {string} */
  var path = this.basePath_ + '/system/console/configMgr/org.apache.sling.datasource.JNDIDataSourceFactory';

  /** @type {!Object} */
  var queryParameters = {};

  /** @type {!Object} */
  var headerParams = angular.extend({}, this.defaultHeaders_);
  if (opt_post !== undefined) {
    queryParameters['post'] = opt_post;
  }

  if (opt_apply !== undefined) {
    queryParameters['apply'] = opt_apply;
  }

  if (opt_delete !== undefined) {
    queryParameters['delete'] = opt_delete;
  }

  if (opt_action !== undefined) {
    queryParameters['action'] = opt_action;
  }

  if (opt_location !== undefined) {
    queryParameters['$location'] = opt_location;
  }

  if (opt_propertylist !== undefined) {
    queryParameters['propertylist'] = opt_propertylist;
  }

  if (opt_datasourceName !== undefined) {
    queryParameters['datasource.name'] = opt_datasourceName;
  }

  if (opt_datasourceSvcPropName !== undefined) {
    queryParameters['datasource.svc.prop.name'] = opt_datasourceSvcPropName;
  }

  if (opt_datasourceJndiName !== undefined) {
    queryParameters['datasource.jndi.name'] = opt_datasourceJndiName;
  }

  if (opt_jndiProperties !== undefined) {
    queryParameters['jndi.properties'] = opt_jndiProperties;
  }

  /** @type {!Object} */
  var httpRequestParams = {
    method: 'POST',
    url: path,
    json: true,
            params: queryParameters,
    headers: headerParams
  };

  if (opt_extraHttpRequestParams) {
    httpRequestParams = angular.extend(httpRequestParams, opt_extraHttpRequestParams);
  }

  return (/** @type {?} */ (this.http_))(httpRequestParams);
}

/**
 * 
 * 
 * @param {!boolean=} opt_post 
 * @param {!boolean=} opt_apply 
 * @param {!boolean=} opt_delete 
 * @param {!string=} opt_action 
 * @param {!string=} opt_location 
 * @param {!Array<!string>=} opt_propertylist 
 * @param {!number=} opt_connectorPingTimeout 
 * @param {!number=} opt_connectorPingInterval 
 * @param {!number=} opt_discoveryLiteCheckInterval 
 * @param {!number=} opt_clusterSyncServiceTimeout 
 * @param {!number=} opt_clusterSyncServiceInterval 
 * @param {!boolean=} opt_enableSyncToken 
 * @param {!number=} opt_minEventDelay 
 * @param {!number=} opt_socketConnectTimeout 
 * @param {!number=} opt_soTimeout 
 * @param {!Array<!string>=} opt_topologyConnectorUrls 
 * @param {!Array<!string>=} opt_topologyConnectorWhitelist 
 * @param {!boolean=} opt_autoStopLocalLoopEnabled 
 * @param {!boolean=} opt_gzipConnectorRequestsEnabled 
 * @param {!boolean=} opt_hmacEnabled 
 * @param {!boolean=} opt_enableEncryption 
 * @param {!string=} opt_sharedKey 
 * @param {!number=} opt_hmacSharedKeyTTL 
 * @param {!string=} opt_backoffStandbyFactor 
 * @param {!string=} opt_backoffStableFactor 
 * @param {!angular.$http.Config=} opt_extraHttpRequestParams Extra HTTP parameters to send.
 * @return {!angular.$q.Promise<!API.Client.orgApacheSlingDiscoveryOakConfigInfo>}
 */
API.Client.ConfigmgrApi.prototype.orgApacheSlingDiscoveryOakConfig = function(opt_post, opt_apply, opt_delete, opt_action, opt_location, opt_propertylist, opt_connectorPingTimeout, opt_connectorPingInterval, opt_discoveryLiteCheckInterval, opt_clusterSyncServiceTimeout, opt_clusterSyncServiceInterval, opt_enableSyncToken, opt_minEventDelay, opt_socketConnectTimeout, opt_soTimeout, opt_topologyConnectorUrls, opt_topologyConnectorWhitelist, opt_autoStopLocalLoopEnabled, opt_gzipConnectorRequestsEnabled, opt_hmacEnabled, opt_enableEncryption, opt_sharedKey, opt_hmacSharedKeyTTL, opt_backoffStandbyFactor, opt_backoffStableFactor, opt_extraHttpRequestParams) {
  /** @const {string} */
  var path = this.basePath_ + '/system/console/configMgr/org.apache.sling.discovery.oak.Config';

  /** @type {!Object} */
  var queryParameters = {};

  /** @type {!Object} */
  var headerParams = angular.extend({}, this.defaultHeaders_);
  if (opt_post !== undefined) {
    queryParameters['post'] = opt_post;
  }

  if (opt_apply !== undefined) {
    queryParameters['apply'] = opt_apply;
  }

  if (opt_delete !== undefined) {
    queryParameters['delete'] = opt_delete;
  }

  if (opt_action !== undefined) {
    queryParameters['action'] = opt_action;
  }

  if (opt_location !== undefined) {
    queryParameters['$location'] = opt_location;
  }

  if (opt_propertylist !== undefined) {
    queryParameters['propertylist'] = opt_propertylist;
  }

  if (opt_connectorPingTimeout !== undefined) {
    queryParameters['connectorPingTimeout'] = opt_connectorPingTimeout;
  }

  if (opt_connectorPingInterval !== undefined) {
    queryParameters['connectorPingInterval'] = opt_connectorPingInterval;
  }

  if (opt_discoveryLiteCheckInterval !== undefined) {
    queryParameters['discoveryLiteCheckInterval'] = opt_discoveryLiteCheckInterval;
  }

  if (opt_clusterSyncServiceTimeout !== undefined) {
    queryParameters['clusterSyncServiceTimeout'] = opt_clusterSyncServiceTimeout;
  }

  if (opt_clusterSyncServiceInterval !== undefined) {
    queryParameters['clusterSyncServiceInterval'] = opt_clusterSyncServiceInterval;
  }

  if (opt_enableSyncToken !== undefined) {
    queryParameters['enableSyncToken'] = opt_enableSyncToken;
  }

  if (opt_minEventDelay !== undefined) {
    queryParameters['minEventDelay'] = opt_minEventDelay;
  }

  if (opt_socketConnectTimeout !== undefined) {
    queryParameters['socketConnectTimeout'] = opt_socketConnectTimeout;
  }

  if (opt_soTimeout !== undefined) {
    queryParameters['soTimeout'] = opt_soTimeout;
  }

  if (opt_topologyConnectorUrls !== undefined) {
    queryParameters['topologyConnectorUrls'] = opt_topologyConnectorUrls;
  }

  if (opt_topologyConnectorWhitelist !== undefined) {
    queryParameters['topologyConnectorWhitelist'] = opt_topologyConnectorWhitelist;
  }

  if (opt_autoStopLocalLoopEnabled !== undefined) {
    queryParameters['autoStopLocalLoopEnabled'] = opt_autoStopLocalLoopEnabled;
  }

  if (opt_gzipConnectorRequestsEnabled !== undefined) {
    queryParameters['gzipConnectorRequestsEnabled'] = opt_gzipConnectorRequestsEnabled;
  }

  if (opt_hmacEnabled !== undefined) {
    queryParameters['hmacEnabled'] = opt_hmacEnabled;
  }

  if (opt_enableEncryption !== undefined) {
    queryParameters['enableEncryption'] = opt_enableEncryption;
  }

  if (opt_sharedKey !== undefined) {
    queryParameters['sharedKey'] = opt_sharedKey;
  }

  if (opt_hmacSharedKeyTTL !== undefined) {
    queryParameters['hmacSharedKeyTTL'] = opt_hmacSharedKeyTTL;
  }

  if (opt_backoffStandbyFactor !== undefined) {
    queryParameters['backoffStandbyFactor'] = opt_backoffStandbyFactor;
  }

  if (opt_backoffStableFactor !== undefined) {
    queryParameters['backoffStableFactor'] = opt_backoffStableFactor;
  }

  /** @type {!Object} */
  var httpRequestParams = {
    method: 'POST',
    url: path,
    json: true,
            params: queryParameters,
    headers: headerParams
  };

  if (opt_extraHttpRequestParams) {
    httpRequestParams = angular.extend(httpRequestParams, opt_extraHttpRequestParams);
  }

  return (/** @type {?} */ (this.http_))(httpRequestParams);
}

/**
 * 
 * 
 * @param {!boolean=} opt_post 
 * @param {!boolean=} opt_apply 
 * @param {!boolean=} opt_delete 
 * @param {!string=} opt_action 
 * @param {!string=} opt_location 
 * @param {!Array<!string>=} opt_propertylist 
 * @param {!string=} opt_hcName 
 * @param {!Array<!string>=} opt_hcTags 
 * @param {!string=} opt_hcMbeanName 
 * @param {!angular.$http.Config=} opt_extraHttpRequestParams Extra HTTP parameters to send.
 * @return {!angular.$q.Promise<!API.Client.orgApacheSlingDiscoveryOakSynchronizedClocksHealthCheckInfo>}
 */
API.Client.ConfigmgrApi.prototype.orgApacheSlingDiscoveryOakSynchronizedClocksHealthCheck = function(opt_post, opt_apply, opt_delete, opt_action, opt_location, opt_propertylist, opt_hcName, opt_hcTags, opt_hcMbeanName, opt_extraHttpRequestParams) {
  /** @const {string} */
  var path = this.basePath_ + '/system/console/configMgr/org.apache.sling.discovery.oak.SynchronizedClocksHealthCheck';

  /** @type {!Object} */
  var queryParameters = {};

  /** @type {!Object} */
  var headerParams = angular.extend({}, this.defaultHeaders_);
  if (opt_post !== undefined) {
    queryParameters['post'] = opt_post;
  }

  if (opt_apply !== undefined) {
    queryParameters['apply'] = opt_apply;
  }

  if (opt_delete !== undefined) {
    queryParameters['delete'] = opt_delete;
  }

  if (opt_action !== undefined) {
    queryParameters['action'] = opt_action;
  }

  if (opt_location !== undefined) {
    queryParameters['$location'] = opt_location;
  }

  if (opt_propertylist !== undefined) {
    queryParameters['propertylist'] = opt_propertylist;
  }

  if (opt_hcName !== undefined) {
    queryParameters['hc.name'] = opt_hcName;
  }

  if (opt_hcTags !== undefined) {
    queryParameters['hc.tags'] = opt_hcTags;
  }

  if (opt_hcMbeanName !== undefined) {
    queryParameters['hc.mbean.name'] = opt_hcMbeanName;
  }

  /** @type {!Object} */
  var httpRequestParams = {
    method: 'POST',
    url: path,
    json: true,
            params: queryParameters,
    headers: headerParams
  };

  if (opt_extraHttpRequestParams) {
    httpRequestParams = angular.extend(httpRequestParams, opt_extraHttpRequestParams);
  }

  return (/** @type {?} */ (this.http_))(httpRequestParams);
}

/**
 * 
 * 
 * @param {!boolean=} opt_post 
 * @param {!boolean=} opt_apply 
 * @param {!boolean=} opt_delete 
 * @param {!string=} opt_action 
 * @param {!string=} opt_location 
 * @param {!Array<!string>=} opt_propertylist 
 * @param {!string=} opt_name 
 * @param {!string=} opt_title 
 * @param {!string=} opt_details 
 * @param {!boolean=} opt_enabled 
 * @param {!string=} opt_serviceName 
 * @param {!string=} opt_logLevel 
 * @param {!Array<!string>=} opt_allowedRoots 
 * @param {!boolean=} opt_queueProcessingEnabled 
 * @param {!Array<!string>=} opt_packageImporterEndpoints 
 * @param {!Array<!string>=} opt_passiveQueues 
 * @param {!Array<!string>=} opt_priorityQueues 
 * @param {!string=} opt_retryStrategy 
 * @param {!number=} opt_retryAttempts 
 * @param {!string=} opt_requestAuthorizationStrategyTarget 
 * @param {!string=} opt_transportSecretProviderTarget 
 * @param {!string=} opt_packageBuilderTarget 
 * @param {!string=} opt_triggersTarget 
 * @param {!string=} opt_queueProvider 
 * @param {!boolean=} opt_asyncDelivery 
 * @param {!number=} opt_httpConnTimeout 
 * @param {!angular.$http.Config=} opt_extraHttpRequestParams Extra HTTP parameters to send.
 * @return {!angular.$q.Promise<!API.Client.orgApacheSlingDistributionAgentImplForwardDistributionAgentFactoInfo>}
 */
API.Client.ConfigmgrApi.prototype.orgApacheSlingDistributionAgentImplForwardDistributionAgentFacto = function(opt_post, opt_apply, opt_delete, opt_action, opt_location, opt_propertylist, opt_name, opt_title, opt_details, opt_enabled, opt_serviceName, opt_logLevel, opt_allowedRoots, opt_queueProcessingEnabled, opt_packageImporterEndpoints, opt_passiveQueues, opt_priorityQueues, opt_retryStrategy, opt_retryAttempts, opt_requestAuthorizationStrategyTarget, opt_transportSecretProviderTarget, opt_packageBuilderTarget, opt_triggersTarget, opt_queueProvider, opt_asyncDelivery, opt_httpConnTimeout, opt_extraHttpRequestParams) {
  /** @const {string} */
  var path = this.basePath_ + '/system/console/configMgr/org.apache.sling.distribution.agent.impl.ForwardDistributionAgentFactory';

  /** @type {!Object} */
  var queryParameters = {};

  /** @type {!Object} */
  var headerParams = angular.extend({}, this.defaultHeaders_);
  if (opt_post !== undefined) {
    queryParameters['post'] = opt_post;
  }

  if (opt_apply !== undefined) {
    queryParameters['apply'] = opt_apply;
  }

  if (opt_delete !== undefined) {
    queryParameters['delete'] = opt_delete;
  }

  if (opt_action !== undefined) {
    queryParameters['action'] = opt_action;
  }

  if (opt_location !== undefined) {
    queryParameters['$location'] = opt_location;
  }

  if (opt_propertylist !== undefined) {
    queryParameters['propertylist'] = opt_propertylist;
  }

  if (opt_name !== undefined) {
    queryParameters['name'] = opt_name;
  }

  if (opt_title !== undefined) {
    queryParameters['title'] = opt_title;
  }

  if (opt_details !== undefined) {
    queryParameters['details'] = opt_details;
  }

  if (opt_enabled !== undefined) {
    queryParameters['enabled'] = opt_enabled;
  }

  if (opt_serviceName !== undefined) {
    queryParameters['serviceName'] = opt_serviceName;
  }

  if (opt_logLevel !== undefined) {
    queryParameters['log.level'] = opt_logLevel;
  }

  if (opt_allowedRoots !== undefined) {
    queryParameters['allowed.roots'] = opt_allowedRoots;
  }

  if (opt_queueProcessingEnabled !== undefined) {
    queryParameters['queue.processing.enabled'] = opt_queueProcessingEnabled;
  }

  if (opt_packageImporterEndpoints !== undefined) {
    queryParameters['packageImporter.endpoints'] = opt_packageImporterEndpoints;
  }

  if (opt_passiveQueues !== undefined) {
    queryParameters['passiveQueues'] = opt_passiveQueues;
  }

  if (opt_priorityQueues !== undefined) {
    queryParameters['priorityQueues'] = opt_priorityQueues;
  }

  if (opt_retryStrategy !== undefined) {
    queryParameters['retry.strategy'] = opt_retryStrategy;
  }

  if (opt_retryAttempts !== undefined) {
    queryParameters['retry.attempts'] = opt_retryAttempts;
  }

  if (opt_requestAuthorizationStrategyTarget !== undefined) {
    queryParameters['requestAuthorizationStrategy.target'] = opt_requestAuthorizationStrategyTarget;
  }

  if (opt_transportSecretProviderTarget !== undefined) {
    queryParameters['transportSecretProvider.target'] = opt_transportSecretProviderTarget;
  }

  if (opt_packageBuilderTarget !== undefined) {
    queryParameters['packageBuilder.target'] = opt_packageBuilderTarget;
  }

  if (opt_triggersTarget !== undefined) {
    queryParameters['triggers.target'] = opt_triggersTarget;
  }

  if (opt_queueProvider !== undefined) {
    queryParameters['queue.provider'] = opt_queueProvider;
  }

  if (opt_asyncDelivery !== undefined) {
    queryParameters['async.delivery'] = opt_asyncDelivery;
  }

  if (opt_httpConnTimeout !== undefined) {
    queryParameters['http.conn.timeout'] = opt_httpConnTimeout;
  }

  /** @type {!Object} */
  var httpRequestParams = {
    method: 'POST',
    url: path,
    json: true,
            params: queryParameters,
    headers: headerParams
  };

  if (opt_extraHttpRequestParams) {
    httpRequestParams = angular.extend(httpRequestParams, opt_extraHttpRequestParams);
  }

  return (/** @type {?} */ (this.http_))(httpRequestParams);
}

/**
 * 
 * 
 * @param {!boolean=} opt_post 
 * @param {!boolean=} opt_apply 
 * @param {!boolean=} opt_delete 
 * @param {!string=} opt_action 
 * @param {!string=} opt_location 
 * @param {!Array<!string>=} opt_propertylist 
 * @param {!string=} opt_name 
 * @param {!string=} opt_jcrPrivilege 
 * @param {!angular.$http.Config=} opt_extraHttpRequestParams Extra HTTP parameters to send.
 * @return {!angular.$q.Promise<!API.Client.orgApacheSlingDistributionAgentImplPrivilegeDistributionRequestAInfo>}
 */
API.Client.ConfigmgrApi.prototype.orgApacheSlingDistributionAgentImplPrivilegeDistributionRequestA = function(opt_post, opt_apply, opt_delete, opt_action, opt_location, opt_propertylist, opt_name, opt_jcrPrivilege, opt_extraHttpRequestParams) {
  /** @const {string} */
  var path = this.basePath_ + '/system/console/configMgr/org.apache.sling.distribution.agent.impl.PrivilegeDistributionRequestAuthorizationStrategyFactory';

  /** @type {!Object} */
  var queryParameters = {};

  /** @type {!Object} */
  var headerParams = angular.extend({}, this.defaultHeaders_);
  if (opt_post !== undefined) {
    queryParameters['post'] = opt_post;
  }

  if (opt_apply !== undefined) {
    queryParameters['apply'] = opt_apply;
  }

  if (opt_delete !== undefined) {
    queryParameters['delete'] = opt_delete;
  }

  if (opt_action !== undefined) {
    queryParameters['action'] = opt_action;
  }

  if (opt_location !== undefined) {
    queryParameters['$location'] = opt_location;
  }

  if (opt_propertylist !== undefined) {
    queryParameters['propertylist'] = opt_propertylist;
  }

  if (opt_name !== undefined) {
    queryParameters['name'] = opt_name;
  }

  if (opt_jcrPrivilege !== undefined) {
    queryParameters['jcrPrivilege'] = opt_jcrPrivilege;
  }

  /** @type {!Object} */
  var httpRequestParams = {
    method: 'POST',
    url: path,
    json: true,
            params: queryParameters,
    headers: headerParams
  };

  if (opt_extraHttpRequestParams) {
    httpRequestParams = angular.extend(httpRequestParams, opt_extraHttpRequestParams);
  }

  return (/** @type {?} */ (this.http_))(httpRequestParams);
}

/**
 * 
 * 
 * @param {!boolean=} opt_post 
 * @param {!boolean=} opt_apply 
 * @param {!boolean=} opt_delete 
 * @param {!string=} opt_action 
 * @param {!string=} opt_location 
 * @param {!Array<!string>=} opt_propertylist 
 * @param {!string=} opt_name 
 * @param {!string=} opt_title 
 * @param {!string=} opt_details 
 * @param {!boolean=} opt_enabled 
 * @param {!string=} opt_serviceName 
 * @param {!string=} opt_logLevel 
 * @param {!Array<!string>=} opt_allowedRoots 
 * @param {!string=} opt_requestAuthorizationStrategyTarget 
 * @param {!string=} opt_queueProviderFactoryTarget 
 * @param {!string=} opt_packageBuilderTarget 
 * @param {!string=} opt_triggersTarget 
 * @param {!Array<!string>=} opt_priorityQueues 
 * @param {!angular.$http.Config=} opt_extraHttpRequestParams Extra HTTP parameters to send.
 * @return {!angular.$q.Promise<!API.Client.orgApacheSlingDistributionAgentImplQueueDistributionAgentFactoryInfo>}
 */
API.Client.ConfigmgrApi.prototype.orgApacheSlingDistributionAgentImplQueueDistributionAgentFactory = function(opt_post, opt_apply, opt_delete, opt_action, opt_location, opt_propertylist, opt_name, opt_title, opt_details, opt_enabled, opt_serviceName, opt_logLevel, opt_allowedRoots, opt_requestAuthorizationStrategyTarget, opt_queueProviderFactoryTarget, opt_packageBuilderTarget, opt_triggersTarget, opt_priorityQueues, opt_extraHttpRequestParams) {
  /** @const {string} */
  var path = this.basePath_ + '/system/console/configMgr/org.apache.sling.distribution.agent.impl.QueueDistributionAgentFactory';

  /** @type {!Object} */
  var queryParameters = {};

  /** @type {!Object} */
  var headerParams = angular.extend({}, this.defaultHeaders_);
  if (opt_post !== undefined) {
    queryParameters['post'] = opt_post;
  }

  if (opt_apply !== undefined) {
    queryParameters['apply'] = opt_apply;
  }

  if (opt_delete !== undefined) {
    queryParameters['delete'] = opt_delete;
  }

  if (opt_action !== undefined) {
    queryParameters['action'] = opt_action;
  }

  if (opt_location !== undefined) {
    queryParameters['$location'] = opt_location;
  }

  if (opt_propertylist !== undefined) {
    queryParameters['propertylist'] = opt_propertylist;
  }

  if (opt_name !== undefined) {
    queryParameters['name'] = opt_name;
  }

  if (opt_title !== undefined) {
    queryParameters['title'] = opt_title;
  }

  if (opt_details !== undefined) {
    queryParameters['details'] = opt_details;
  }

  if (opt_enabled !== undefined) {
    queryParameters['enabled'] = opt_enabled;
  }

  if (opt_serviceName !== undefined) {
    queryParameters['serviceName'] = opt_serviceName;
  }

  if (opt_logLevel !== undefined) {
    queryParameters['log.level'] = opt_logLevel;
  }

  if (opt_allowedRoots !== undefined) {
    queryParameters['allowed.roots'] = opt_allowedRoots;
  }

  if (opt_requestAuthorizationStrategyTarget !== undefined) {
    queryParameters['requestAuthorizationStrategy.target'] = opt_requestAuthorizationStrategyTarget;
  }

  if (opt_queueProviderFactoryTarget !== undefined) {
    queryParameters['queueProviderFactory.target'] = opt_queueProviderFactoryTarget;
  }

  if (opt_packageBuilderTarget !== undefined) {
    queryParameters['packageBuilder.target'] = opt_packageBuilderTarget;
  }

  if (opt_triggersTarget !== undefined) {
    queryParameters['triggers.target'] = opt_triggersTarget;
  }

  if (opt_priorityQueues !== undefined) {
    queryParameters['priorityQueues'] = opt_priorityQueues;
  }

  /** @type {!Object} */
  var httpRequestParams = {
    method: 'POST',
    url: path,
    json: true,
            params: queryParameters,
    headers: headerParams
  };

  if (opt_extraHttpRequestParams) {
    httpRequestParams = angular.extend(httpRequestParams, opt_extraHttpRequestParams);
  }

  return (/** @type {?} */ (this.http_))(httpRequestParams);
}

/**
 * 
 * 
 * @param {!boolean=} opt_post 
 * @param {!boolean=} opt_apply 
 * @param {!boolean=} opt_delete 
 * @param {!string=} opt_action 
 * @param {!string=} opt_location 
 * @param {!Array<!string>=} opt_propertylist 
 * @param {!string=} opt_name 
 * @param {!string=} opt_title 
 * @param {!string=} opt_details 
 * @param {!boolean=} opt_enabled 
 * @param {!string=} opt_serviceName 
 * @param {!string=} opt_logLevel 
 * @param {!boolean=} opt_queueProcessingEnabled 
 * @param {!Array<!string>=} opt_packageExporterEndpoints 
 * @param {!number=} opt_pullItems 
 * @param {!number=} opt_httpConnTimeout 
 * @param {!string=} opt_requestAuthorizationStrategyTarget 
 * @param {!string=} opt_transportSecretProviderTarget 
 * @param {!string=} opt_packageBuilderTarget 
 * @param {!string=} opt_triggersTarget 
 * @param {!angular.$http.Config=} opt_extraHttpRequestParams Extra HTTP parameters to send.
 * @return {!angular.$q.Promise<!API.Client.orgApacheSlingDistributionAgentImplReverseDistributionAgentFactoInfo>}
 */
API.Client.ConfigmgrApi.prototype.orgApacheSlingDistributionAgentImplReverseDistributionAgentFacto = function(opt_post, opt_apply, opt_delete, opt_action, opt_location, opt_propertylist, opt_name, opt_title, opt_details, opt_enabled, opt_serviceName, opt_logLevel, opt_queueProcessingEnabled, opt_packageExporterEndpoints, opt_pullItems, opt_httpConnTimeout, opt_requestAuthorizationStrategyTarget, opt_transportSecretProviderTarget, opt_packageBuilderTarget, opt_triggersTarget, opt_extraHttpRequestParams) {
  /** @const {string} */
  var path = this.basePath_ + '/system/console/configMgr/org.apache.sling.distribution.agent.impl.ReverseDistributionAgentFactory';

  /** @type {!Object} */
  var queryParameters = {};

  /** @type {!Object} */
  var headerParams = angular.extend({}, this.defaultHeaders_);
  if (opt_post !== undefined) {
    queryParameters['post'] = opt_post;
  }

  if (opt_apply !== undefined) {
    queryParameters['apply'] = opt_apply;
  }

  if (opt_delete !== undefined) {
    queryParameters['delete'] = opt_delete;
  }

  if (opt_action !== undefined) {
    queryParameters['action'] = opt_action;
  }

  if (opt_location !== undefined) {
    queryParameters['$location'] = opt_location;
  }

  if (opt_propertylist !== undefined) {
    queryParameters['propertylist'] = opt_propertylist;
  }

  if (opt_name !== undefined) {
    queryParameters['name'] = opt_name;
  }

  if (opt_title !== undefined) {
    queryParameters['title'] = opt_title;
  }

  if (opt_details !== undefined) {
    queryParameters['details'] = opt_details;
  }

  if (opt_enabled !== undefined) {
    queryParameters['enabled'] = opt_enabled;
  }

  if (opt_serviceName !== undefined) {
    queryParameters['serviceName'] = opt_serviceName;
  }

  if (opt_logLevel !== undefined) {
    queryParameters['log.level'] = opt_logLevel;
  }

  if (opt_queueProcessingEnabled !== undefined) {
    queryParameters['queue.processing.enabled'] = opt_queueProcessingEnabled;
  }

  if (opt_packageExporterEndpoints !== undefined) {
    queryParameters['packageExporter.endpoints'] = opt_packageExporterEndpoints;
  }

  if (opt_pullItems !== undefined) {
    queryParameters['pull.items'] = opt_pullItems;
  }

  if (opt_httpConnTimeout !== undefined) {
    queryParameters['http.conn.timeout'] = opt_httpConnTimeout;
  }

  if (opt_requestAuthorizationStrategyTarget !== undefined) {
    queryParameters['requestAuthorizationStrategy.target'] = opt_requestAuthorizationStrategyTarget;
  }

  if (opt_transportSecretProviderTarget !== undefined) {
    queryParameters['transportSecretProvider.target'] = opt_transportSecretProviderTarget;
  }

  if (opt_packageBuilderTarget !== undefined) {
    queryParameters['packageBuilder.target'] = opt_packageBuilderTarget;
  }

  if (opt_triggersTarget !== undefined) {
    queryParameters['triggers.target'] = opt_triggersTarget;
  }

  /** @type {!Object} */
  var httpRequestParams = {
    method: 'POST',
    url: path,
    json: true,
            params: queryParameters,
    headers: headerParams
  };

  if (opt_extraHttpRequestParams) {
    httpRequestParams = angular.extend(httpRequestParams, opt_extraHttpRequestParams);
  }

  return (/** @type {?} */ (this.http_))(httpRequestParams);
}

/**
 * 
 * 
 * @param {!boolean=} opt_post 
 * @param {!boolean=} opt_apply 
 * @param {!boolean=} opt_delete 
 * @param {!string=} opt_action 
 * @param {!string=} opt_location 
 * @param {!Array<!string>=} opt_propertylist 
 * @param {!string=} opt_name 
 * @param {!string=} opt_title 
 * @param {!string=} opt_details 
 * @param {!boolean=} opt_enabled 
 * @param {!string=} opt_serviceName 
 * @param {!string=} opt_logLevel 
 * @param {!boolean=} opt_queueProcessingEnabled 
 * @param {!string=} opt_packageExporterTarget 
 * @param {!string=} opt_packageImporterTarget 
 * @param {!string=} opt_requestAuthorizationStrategyTarget 
 * @param {!string=} opt_triggersTarget 
 * @param {!angular.$http.Config=} opt_extraHttpRequestParams Extra HTTP parameters to send.
 * @return {!angular.$q.Promise<!API.Client.orgApacheSlingDistributionAgentImplSimpleDistributionAgentFactorInfo>}
 */
API.Client.ConfigmgrApi.prototype.orgApacheSlingDistributionAgentImplSimpleDistributionAgentFactor = function(opt_post, opt_apply, opt_delete, opt_action, opt_location, opt_propertylist, opt_name, opt_title, opt_details, opt_enabled, opt_serviceName, opt_logLevel, opt_queueProcessingEnabled, opt_packageExporterTarget, opt_packageImporterTarget, opt_requestAuthorizationStrategyTarget, opt_triggersTarget, opt_extraHttpRequestParams) {
  /** @const {string} */
  var path = this.basePath_ + '/system/console/configMgr/org.apache.sling.distribution.agent.impl.SimpleDistributionAgentFactory';

  /** @type {!Object} */
  var queryParameters = {};

  /** @type {!Object} */
  var headerParams = angular.extend({}, this.defaultHeaders_);
  if (opt_post !== undefined) {
    queryParameters['post'] = opt_post;
  }

  if (opt_apply !== undefined) {
    queryParameters['apply'] = opt_apply;
  }

  if (opt_delete !== undefined) {
    queryParameters['delete'] = opt_delete;
  }

  if (opt_action !== undefined) {
    queryParameters['action'] = opt_action;
  }

  if (opt_location !== undefined) {
    queryParameters['$location'] = opt_location;
  }

  if (opt_propertylist !== undefined) {
    queryParameters['propertylist'] = opt_propertylist;
  }

  if (opt_name !== undefined) {
    queryParameters['name'] = opt_name;
  }

  if (opt_title !== undefined) {
    queryParameters['title'] = opt_title;
  }

  if (opt_details !== undefined) {
    queryParameters['details'] = opt_details;
  }

  if (opt_enabled !== undefined) {
    queryParameters['enabled'] = opt_enabled;
  }

  if (opt_serviceName !== undefined) {
    queryParameters['serviceName'] = opt_serviceName;
  }

  if (opt_logLevel !== undefined) {
    queryParameters['log.level'] = opt_logLevel;
  }

  if (opt_queueProcessingEnabled !== undefined) {
    queryParameters['queue.processing.enabled'] = opt_queueProcessingEnabled;
  }

  if (opt_packageExporterTarget !== undefined) {
    queryParameters['packageExporter.target'] = opt_packageExporterTarget;
  }

  if (opt_packageImporterTarget !== undefined) {
    queryParameters['packageImporter.target'] = opt_packageImporterTarget;
  }

  if (opt_requestAuthorizationStrategyTarget !== undefined) {
    queryParameters['requestAuthorizationStrategy.target'] = opt_requestAuthorizationStrategyTarget;
  }

  if (opt_triggersTarget !== undefined) {
    queryParameters['triggers.target'] = opt_triggersTarget;
  }

  /** @type {!Object} */
  var httpRequestParams = {
    method: 'POST',
    url: path,
    json: true,
            params: queryParameters,
    headers: headerParams
  };

  if (opt_extraHttpRequestParams) {
    httpRequestParams = angular.extend(httpRequestParams, opt_extraHttpRequestParams);
  }

  return (/** @type {?} */ (this.http_))(httpRequestParams);
}

/**
 * 
 * 
 * @param {!boolean=} opt_post 
 * @param {!boolean=} opt_apply 
 * @param {!boolean=} opt_delete 
 * @param {!string=} opt_action 
 * @param {!string=} opt_location 
 * @param {!Array<!string>=} opt_propertylist 
 * @param {!string=} opt_name 
 * @param {!string=} opt_title 
 * @param {!string=} opt_details 
 * @param {!boolean=} opt_enabled 
 * @param {!string=} opt_serviceName 
 * @param {!string=} opt_logLevel 
 * @param {!boolean=} opt_queueProcessingEnabled 
 * @param {!Array<!string>=} opt_passiveQueues 
 * @param {!Array<!string>=} opt_packageExporterEndpoints 
 * @param {!Array<!string>=} opt_packageImporterEndpoints 
 * @param {!string=} opt_retryStrategy 
 * @param {!number=} opt_retryAttempts 
 * @param {!number=} opt_pullItems 
 * @param {!number=} opt_httpConnTimeout 
 * @param {!string=} opt_requestAuthorizationStrategyTarget 
 * @param {!string=} opt_transportSecretProviderTarget 
 * @param {!string=} opt_packageBuilderTarget 
 * @param {!string=} opt_triggersTarget 
 * @param {!angular.$http.Config=} opt_extraHttpRequestParams Extra HTTP parameters to send.
 * @return {!angular.$q.Promise<!API.Client.orgApacheSlingDistributionAgentImplSyncDistributionAgentFactoryInfo>}
 */
API.Client.ConfigmgrApi.prototype.orgApacheSlingDistributionAgentImplSyncDistributionAgentFactory = function(opt_post, opt_apply, opt_delete, opt_action, opt_location, opt_propertylist, opt_name, opt_title, opt_details, opt_enabled, opt_serviceName, opt_logLevel, opt_queueProcessingEnabled, opt_passiveQueues, opt_packageExporterEndpoints, opt_packageImporterEndpoints, opt_retryStrategy, opt_retryAttempts, opt_pullItems, opt_httpConnTimeout, opt_requestAuthorizationStrategyTarget, opt_transportSecretProviderTarget, opt_packageBuilderTarget, opt_triggersTarget, opt_extraHttpRequestParams) {
  /** @const {string} */
  var path = this.basePath_ + '/system/console/configMgr/org.apache.sling.distribution.agent.impl.SyncDistributionAgentFactory';

  /** @type {!Object} */
  var queryParameters = {};

  /** @type {!Object} */
  var headerParams = angular.extend({}, this.defaultHeaders_);
  if (opt_post !== undefined) {
    queryParameters['post'] = opt_post;
  }

  if (opt_apply !== undefined) {
    queryParameters['apply'] = opt_apply;
  }

  if (opt_delete !== undefined) {
    queryParameters['delete'] = opt_delete;
  }

  if (opt_action !== undefined) {
    queryParameters['action'] = opt_action;
  }

  if (opt_location !== undefined) {
    queryParameters['$location'] = opt_location;
  }

  if (opt_propertylist !== undefined) {
    queryParameters['propertylist'] = opt_propertylist;
  }

  if (opt_name !== undefined) {
    queryParameters['name'] = opt_name;
  }

  if (opt_title !== undefined) {
    queryParameters['title'] = opt_title;
  }

  if (opt_details !== undefined) {
    queryParameters['details'] = opt_details;
  }

  if (opt_enabled !== undefined) {
    queryParameters['enabled'] = opt_enabled;
  }

  if (opt_serviceName !== undefined) {
    queryParameters['serviceName'] = opt_serviceName;
  }

  if (opt_logLevel !== undefined) {
    queryParameters['log.level'] = opt_logLevel;
  }

  if (opt_queueProcessingEnabled !== undefined) {
    queryParameters['queue.processing.enabled'] = opt_queueProcessingEnabled;
  }

  if (opt_passiveQueues !== undefined) {
    queryParameters['passiveQueues'] = opt_passiveQueues;
  }

  if (opt_packageExporterEndpoints !== undefined) {
    queryParameters['packageExporter.endpoints'] = opt_packageExporterEndpoints;
  }

  if (opt_packageImporterEndpoints !== undefined) {
    queryParameters['packageImporter.endpoints'] = opt_packageImporterEndpoints;
  }

  if (opt_retryStrategy !== undefined) {
    queryParameters['retry.strategy'] = opt_retryStrategy;
  }

  if (opt_retryAttempts !== undefined) {
    queryParameters['retry.attempts'] = opt_retryAttempts;
  }

  if (opt_pullItems !== undefined) {
    queryParameters['pull.items'] = opt_pullItems;
  }

  if (opt_httpConnTimeout !== undefined) {
    queryParameters['http.conn.timeout'] = opt_httpConnTimeout;
  }

  if (opt_requestAuthorizationStrategyTarget !== undefined) {
    queryParameters['requestAuthorizationStrategy.target'] = opt_requestAuthorizationStrategyTarget;
  }

  if (opt_transportSecretProviderTarget !== undefined) {
    queryParameters['transportSecretProvider.target'] = opt_transportSecretProviderTarget;
  }

  if (opt_packageBuilderTarget !== undefined) {
    queryParameters['packageBuilder.target'] = opt_packageBuilderTarget;
  }

  if (opt_triggersTarget !== undefined) {
    queryParameters['triggers.target'] = opt_triggersTarget;
  }

  /** @type {!Object} */
  var httpRequestParams = {
    method: 'POST',
    url: path,
    json: true,
            params: queryParameters,
    headers: headerParams
  };

  if (opt_extraHttpRequestParams) {
    httpRequestParams = angular.extend(httpRequestParams, opt_extraHttpRequestParams);
  }

  return (/** @type {?} */ (this.http_))(httpRequestParams);
}

/**
 * 
 * 
 * @param {!boolean=} opt_post 
 * @param {!boolean=} opt_apply 
 * @param {!boolean=} opt_delete 
 * @param {!string=} opt_action 
 * @param {!string=} opt_location 
 * @param {!Array<!string>=} opt_propertylist 
 * @param {!string=} opt_hcName 
 * @param {!Array<!string>=} opt_hcTags 
 * @param {!string=} opt_hcMbeanName 
 * @param {!number=} opt_numberOfRetriesAllowed 
 * @param {!angular.$http.Config=} opt_extraHttpRequestParams Extra HTTP parameters to send.
 * @return {!angular.$q.Promise<!API.Client.orgApacheSlingDistributionMonitorDistributionQueueHealthCheckInfo>}
 */
API.Client.ConfigmgrApi.prototype.orgApacheSlingDistributionMonitorDistributionQueueHealthCheck = function(opt_post, opt_apply, opt_delete, opt_action, opt_location, opt_propertylist, opt_hcName, opt_hcTags, opt_hcMbeanName, opt_numberOfRetriesAllowed, opt_extraHttpRequestParams) {
  /** @const {string} */
  var path = this.basePath_ + '/system/console/configMgr/org.apache.sling.distribution.monitor.DistributionQueueHealthCheck';

  /** @type {!Object} */
  var queryParameters = {};

  /** @type {!Object} */
  var headerParams = angular.extend({}, this.defaultHeaders_);
  if (opt_post !== undefined) {
    queryParameters['post'] = opt_post;
  }

  if (opt_apply !== undefined) {
    queryParameters['apply'] = opt_apply;
  }

  if (opt_delete !== undefined) {
    queryParameters['delete'] = opt_delete;
  }

  if (opt_action !== undefined) {
    queryParameters['action'] = opt_action;
  }

  if (opt_location !== undefined) {
    queryParameters['$location'] = opt_location;
  }

  if (opt_propertylist !== undefined) {
    queryParameters['propertylist'] = opt_propertylist;
  }

  if (opt_hcName !== undefined) {
    queryParameters['hc.name'] = opt_hcName;
  }

  if (opt_hcTags !== undefined) {
    queryParameters['hc.tags'] = opt_hcTags;
  }

  if (opt_hcMbeanName !== undefined) {
    queryParameters['hc.mbean.name'] = opt_hcMbeanName;
  }

  if (opt_numberOfRetriesAllowed !== undefined) {
    queryParameters['numberOfRetriesAllowed'] = opt_numberOfRetriesAllowed;
  }

  /** @type {!Object} */
  var httpRequestParams = {
    method: 'POST',
    url: path,
    json: true,
            params: queryParameters,
    headers: headerParams
  };

  if (opt_extraHttpRequestParams) {
    httpRequestParams = angular.extend(httpRequestParams, opt_extraHttpRequestParams);
  }

  return (/** @type {?} */ (this.http_))(httpRequestParams);
}

/**
 * 
 * 
 * @param {!boolean=} opt_post 
 * @param {!boolean=} opt_apply 
 * @param {!boolean=} opt_delete 
 * @param {!string=} opt_action 
 * @param {!string=} opt_location 
 * @param {!Array<!string>=} opt_propertylist 
 * @param {!string=} opt_name 
 * @param {!string=} opt_queue 
 * @param {!boolean=} opt_dropInvalidItems 
 * @param {!string=} opt_agentTarget 
 * @param {!angular.$http.Config=} opt_extraHttpRequestParams Extra HTTP parameters to send.
 * @return {!angular.$q.Promise<!API.Client.orgApacheSlingDistributionPackagingImplExporterAgentDistributioInfo>}
 */
API.Client.ConfigmgrApi.prototype.orgApacheSlingDistributionPackagingImplExporterAgentDistributio = function(opt_post, opt_apply, opt_delete, opt_action, opt_location, opt_propertylist, opt_name, opt_queue, opt_dropInvalidItems, opt_agentTarget, opt_extraHttpRequestParams) {
  /** @const {string} */
  var path = this.basePath_ + '/system/console/configMgr/org.apache.sling.distribution.packaging.impl.exporter.AgentDistributionPackageExporterFactory';

  /** @type {!Object} */
  var queryParameters = {};

  /** @type {!Object} */
  var headerParams = angular.extend({}, this.defaultHeaders_);
  if (opt_post !== undefined) {
    queryParameters['post'] = opt_post;
  }

  if (opt_apply !== undefined) {
    queryParameters['apply'] = opt_apply;
  }

  if (opt_delete !== undefined) {
    queryParameters['delete'] = opt_delete;
  }

  if (opt_action !== undefined) {
    queryParameters['action'] = opt_action;
  }

  if (opt_location !== undefined) {
    queryParameters['$location'] = opt_location;
  }

  if (opt_propertylist !== undefined) {
    queryParameters['propertylist'] = opt_propertylist;
  }

  if (opt_name !== undefined) {
    queryParameters['name'] = opt_name;
  }

  if (opt_queue !== undefined) {
    queryParameters['queue'] = opt_queue;
  }

  if (opt_dropInvalidItems !== undefined) {
    queryParameters['drop.invalid.items'] = opt_dropInvalidItems;
  }

  if (opt_agentTarget !== undefined) {
    queryParameters['agent.target'] = opt_agentTarget;
  }

  /** @type {!Object} */
  var httpRequestParams = {
    method: 'POST',
    url: path,
    json: true,
            params: queryParameters,
    headers: headerParams
  };

  if (opt_extraHttpRequestParams) {
    httpRequestParams = angular.extend(httpRequestParams, opt_extraHttpRequestParams);
  }

  return (/** @type {?} */ (this.http_))(httpRequestParams);
}

/**
 * 
 * 
 * @param {!boolean=} opt_post 
 * @param {!boolean=} opt_apply 
 * @param {!boolean=} opt_delete 
 * @param {!string=} opt_action 
 * @param {!string=} opt_location 
 * @param {!Array<!string>=} opt_propertylist 
 * @param {!string=} opt_name 
 * @param {!string=} opt_packageBuilderTarget 
 * @param {!angular.$http.Config=} opt_extraHttpRequestParams Extra HTTP parameters to send.
 * @return {!angular.$q.Promise<!API.Client.orgApacheSlingDistributionPackagingImplExporterLocalDistributioInfo>}
 */
API.Client.ConfigmgrApi.prototype.orgApacheSlingDistributionPackagingImplExporterLocalDistributio = function(opt_post, opt_apply, opt_delete, opt_action, opt_location, opt_propertylist, opt_name, opt_packageBuilderTarget, opt_extraHttpRequestParams) {
  /** @const {string} */
  var path = this.basePath_ + '/system/console/configMgr/org.apache.sling.distribution.packaging.impl.exporter.LocalDistributionPackageExporterFactory';

  /** @type {!Object} */
  var queryParameters = {};

  /** @type {!Object} */
  var headerParams = angular.extend({}, this.defaultHeaders_);
  if (opt_post !== undefined) {
    queryParameters['post'] = opt_post;
  }

  if (opt_apply !== undefined) {
    queryParameters['apply'] = opt_apply;
  }

  if (opt_delete !== undefined) {
    queryParameters['delete'] = opt_delete;
  }

  if (opt_action !== undefined) {
    queryParameters['action'] = opt_action;
  }

  if (opt_location !== undefined) {
    queryParameters['$location'] = opt_location;
  }

  if (opt_propertylist !== undefined) {
    queryParameters['propertylist'] = opt_propertylist;
  }

  if (opt_name !== undefined) {
    queryParameters['name'] = opt_name;
  }

  if (opt_packageBuilderTarget !== undefined) {
    queryParameters['packageBuilder.target'] = opt_packageBuilderTarget;
  }

  /** @type {!Object} */
  var httpRequestParams = {
    method: 'POST',
    url: path,
    json: true,
            params: queryParameters,
    headers: headerParams
  };

  if (opt_extraHttpRequestParams) {
    httpRequestParams = angular.extend(httpRequestParams, opt_extraHttpRequestParams);
  }

  return (/** @type {?} */ (this.http_))(httpRequestParams);
}

/**
 * 
 * 
 * @param {!boolean=} opt_post 
 * @param {!boolean=} opt_apply 
 * @param {!boolean=} opt_delete 
 * @param {!string=} opt_action 
 * @param {!string=} opt_location 
 * @param {!Array<!string>=} opt_propertylist 
 * @param {!string=} opt_name 
 * @param {!Array<!string>=} opt_endpoints 
 * @param {!number=} opt_pullItems 
 * @param {!string=} opt_packageBuilderTarget 
 * @param {!string=} opt_transportSecretProviderTarget 
 * @param {!angular.$http.Config=} opt_extraHttpRequestParams Extra HTTP parameters to send.
 * @return {!angular.$q.Promise<!API.Client.orgApacheSlingDistributionPackagingImplExporterRemoteDistributiInfo>}
 */
API.Client.ConfigmgrApi.prototype.orgApacheSlingDistributionPackagingImplExporterRemoteDistributi = function(opt_post, opt_apply, opt_delete, opt_action, opt_location, opt_propertylist, opt_name, opt_endpoints, opt_pullItems, opt_packageBuilderTarget, opt_transportSecretProviderTarget, opt_extraHttpRequestParams) {
  /** @const {string} */
  var path = this.basePath_ + '/system/console/configMgr/org.apache.sling.distribution.packaging.impl.exporter.RemoteDistributionPackageExporterFactory';

  /** @type {!Object} */
  var queryParameters = {};

  /** @type {!Object} */
  var headerParams = angular.extend({}, this.defaultHeaders_);
  if (opt_post !== undefined) {
    queryParameters['post'] = opt_post;
  }

  if (opt_apply !== undefined) {
    queryParameters['apply'] = opt_apply;
  }

  if (opt_delete !== undefined) {
    queryParameters['delete'] = opt_delete;
  }

  if (opt_action !== undefined) {
    queryParameters['action'] = opt_action;
  }

  if (opt_location !== undefined) {
    queryParameters['$location'] = opt_location;
  }

  if (opt_propertylist !== undefined) {
    queryParameters['propertylist'] = opt_propertylist;
  }

  if (opt_name !== undefined) {
    queryParameters['name'] = opt_name;
  }

  if (opt_endpoints !== undefined) {
    queryParameters['endpoints'] = opt_endpoints;
  }

  if (opt_pullItems !== undefined) {
    queryParameters['pull.items'] = opt_pullItems;
  }

  if (opt_packageBuilderTarget !== undefined) {
    queryParameters['packageBuilder.target'] = opt_packageBuilderTarget;
  }

  if (opt_transportSecretProviderTarget !== undefined) {
    queryParameters['transportSecretProvider.target'] = opt_transportSecretProviderTarget;
  }

  /** @type {!Object} */
  var httpRequestParams = {
    method: 'POST',
    url: path,
    json: true,
            params: queryParameters,
    headers: headerParams
  };

  if (opt_extraHttpRequestParams) {
    httpRequestParams = angular.extend(httpRequestParams, opt_extraHttpRequestParams);
  }

  return (/** @type {?} */ (this.http_))(httpRequestParams);
}

/**
 * 
 * 
 * @param {!boolean=} opt_post 
 * @param {!boolean=} opt_apply 
 * @param {!boolean=} opt_delete 
 * @param {!string=} opt_action 
 * @param {!string=} opt_location 
 * @param {!Array<!string>=} opt_propertylist 
 * @param {!string=} opt_name 
 * @param {!string=} opt_packageBuilderTarget 
 * @param {!angular.$http.Config=} opt_extraHttpRequestParams Extra HTTP parameters to send.
 * @return {!angular.$q.Promise<!API.Client.orgApacheSlingDistributionPackagingImplImporterLocalDistributioInfo>}
 */
API.Client.ConfigmgrApi.prototype.orgApacheSlingDistributionPackagingImplImporterLocalDistributio = function(opt_post, opt_apply, opt_delete, opt_action, opt_location, opt_propertylist, opt_name, opt_packageBuilderTarget, opt_extraHttpRequestParams) {
  /** @const {string} */
  var path = this.basePath_ + '/system/console/configMgr/org.apache.sling.distribution.packaging.impl.importer.LocalDistributionPackageImporterFactory';

  /** @type {!Object} */
  var queryParameters = {};

  /** @type {!Object} */
  var headerParams = angular.extend({}, this.defaultHeaders_);
  if (opt_post !== undefined) {
    queryParameters['post'] = opt_post;
  }

  if (opt_apply !== undefined) {
    queryParameters['apply'] = opt_apply;
  }

  if (opt_delete !== undefined) {
    queryParameters['delete'] = opt_delete;
  }

  if (opt_action !== undefined) {
    queryParameters['action'] = opt_action;
  }

  if (opt_location !== undefined) {
    queryParameters['$location'] = opt_location;
  }

  if (opt_propertylist !== undefined) {
    queryParameters['propertylist'] = opt_propertylist;
  }

  if (opt_name !== undefined) {
    queryParameters['name'] = opt_name;
  }

  if (opt_packageBuilderTarget !== undefined) {
    queryParameters['packageBuilder.target'] = opt_packageBuilderTarget;
  }

  /** @type {!Object} */
  var httpRequestParams = {
    method: 'POST',
    url: path,
    json: true,
            params: queryParameters,
    headers: headerParams
  };

  if (opt_extraHttpRequestParams) {
    httpRequestParams = angular.extend(httpRequestParams, opt_extraHttpRequestParams);
  }

  return (/** @type {?} */ (this.http_))(httpRequestParams);
}

/**
 * 
 * 
 * @param {!boolean=} opt_post 
 * @param {!boolean=} opt_apply 
 * @param {!boolean=} opt_delete 
 * @param {!string=} opt_action 
 * @param {!string=} opt_location 
 * @param {!Array<!string>=} opt_propertylist 
 * @param {!string=} opt_name 
 * @param {!Array<!string>=} opt_endpoints 
 * @param {!string=} opt_transportSecretProviderTarget 
 * @param {!angular.$http.Config=} opt_extraHttpRequestParams Extra HTTP parameters to send.
 * @return {!angular.$q.Promise<!API.Client.orgApacheSlingDistributionPackagingImplImporterRemoteDistributiInfo>}
 */
API.Client.ConfigmgrApi.prototype.orgApacheSlingDistributionPackagingImplImporterRemoteDistributi = function(opt_post, opt_apply, opt_delete, opt_action, opt_location, opt_propertylist, opt_name, opt_endpoints, opt_transportSecretProviderTarget, opt_extraHttpRequestParams) {
  /** @const {string} */
  var path = this.basePath_ + '/system/console/configMgr/org.apache.sling.distribution.packaging.impl.importer.RemoteDistributionPackageImporterFactory';

  /** @type {!Object} */
  var queryParameters = {};

  /** @type {!Object} */
  var headerParams = angular.extend({}, this.defaultHeaders_);
  if (opt_post !== undefined) {
    queryParameters['post'] = opt_post;
  }

  if (opt_apply !== undefined) {
    queryParameters['apply'] = opt_apply;
  }

  if (opt_delete !== undefined) {
    queryParameters['delete'] = opt_delete;
  }

  if (opt_action !== undefined) {
    queryParameters['action'] = opt_action;
  }

  if (opt_location !== undefined) {
    queryParameters['$location'] = opt_location;
  }

  if (opt_propertylist !== undefined) {
    queryParameters['propertylist'] = opt_propertylist;
  }

  if (opt_name !== undefined) {
    queryParameters['name'] = opt_name;
  }

  if (opt_endpoints !== undefined) {
    queryParameters['endpoints'] = opt_endpoints;
  }

  if (opt_transportSecretProviderTarget !== undefined) {
    queryParameters['transportSecretProvider.target'] = opt_transportSecretProviderTarget;
  }

  /** @type {!Object} */
  var httpRequestParams = {
    method: 'POST',
    url: path,
    json: true,
            params: queryParameters,
    headers: headerParams
  };

  if (opt_extraHttpRequestParams) {
    httpRequestParams = angular.extend(httpRequestParams, opt_extraHttpRequestParams);
  }

  return (/** @type {?} */ (this.http_))(httpRequestParams);
}

/**
 * 
 * 
 * @param {!boolean=} opt_post 
 * @param {!boolean=} opt_apply 
 * @param {!boolean=} opt_delete 
 * @param {!string=} opt_action 
 * @param {!string=} opt_location 
 * @param {!Array<!string>=} opt_propertylist 
 * @param {!string=} opt_name 
 * @param {!string=} opt_serviceName 
 * @param {!string=} opt_path 
 * @param {!string=} opt_privilegeName 
 * @param {!angular.$http.Config=} opt_extraHttpRequestParams Extra HTTP parameters to send.
 * @return {!angular.$q.Promise<!API.Client.orgApacheSlingDistributionPackagingImplImporterRepositoryDistriInfo>}
 */
API.Client.ConfigmgrApi.prototype.orgApacheSlingDistributionPackagingImplImporterRepositoryDistri = function(opt_post, opt_apply, opt_delete, opt_action, opt_location, opt_propertylist, opt_name, opt_serviceName, opt_path, opt_privilegeName, opt_extraHttpRequestParams) {
  /** @const {string} */
  var path = this.basePath_ + '/system/console/configMgr/org.apache.sling.distribution.packaging.impl.importer.RepositoryDistributionPackageImporterFactory';

  /** @type {!Object} */
  var queryParameters = {};

  /** @type {!Object} */
  var headerParams = angular.extend({}, this.defaultHeaders_);
  if (opt_post !== undefined) {
    queryParameters['post'] = opt_post;
  }

  if (opt_apply !== undefined) {
    queryParameters['apply'] = opt_apply;
  }

  if (opt_delete !== undefined) {
    queryParameters['delete'] = opt_delete;
  }

  if (opt_action !== undefined) {
    queryParameters['action'] = opt_action;
  }

  if (opt_location !== undefined) {
    queryParameters['$location'] = opt_location;
  }

  if (opt_propertylist !== undefined) {
    queryParameters['propertylist'] = opt_propertylist;
  }

  if (opt_name !== undefined) {
    queryParameters['name'] = opt_name;
  }

  if (opt_serviceName !== undefined) {
    queryParameters['service.name'] = opt_serviceName;
  }

  if (opt_path !== undefined) {
    queryParameters['path'] = opt_path;
  }

  if (opt_privilegeName !== undefined) {
    queryParameters['privilege.name'] = opt_privilegeName;
  }

  /** @type {!Object} */
  var httpRequestParams = {
    method: 'POST',
    url: path,
    json: true,
            params: queryParameters,
    headers: headerParams
  };

  if (opt_extraHttpRequestParams) {
    httpRequestParams = angular.extend(httpRequestParams, opt_extraHttpRequestParams);
  }

  return (/** @type {?} */ (this.http_))(httpRequestParams);
}

/**
 * 
 * 
 * @param {!boolean=} opt_post 
 * @param {!boolean=} opt_apply 
 * @param {!boolean=} opt_delete 
 * @param {!string=} opt_action 
 * @param {!string=} opt_location 
 * @param {!Array<!string>=} opt_propertylist 
 * @param {!string=} opt_providerRoots 
 * @param {!string=} opt_kind 
 * @param {!angular.$http.Config=} opt_extraHttpRequestParams Extra HTTP parameters to send.
 * @return {!angular.$q.Promise<!API.Client.orgApacheSlingDistributionResourcesImplDistributionConfigurationInfo>}
 */
API.Client.ConfigmgrApi.prototype.orgApacheSlingDistributionResourcesImplDistributionConfiguration = function(opt_post, opt_apply, opt_delete, opt_action, opt_location, opt_propertylist, opt_providerRoots, opt_kind, opt_extraHttpRequestParams) {
  /** @const {string} */
  var path = this.basePath_ + '/system/console/configMgr/org.apache.sling.distribution.resources.impl.DistributionConfigurationResourceProviderFactory';

  /** @type {!Object} */
  var queryParameters = {};

  /** @type {!Object} */
  var headerParams = angular.extend({}, this.defaultHeaders_);
  if (opt_post !== undefined) {
    queryParameters['post'] = opt_post;
  }

  if (opt_apply !== undefined) {
    queryParameters['apply'] = opt_apply;
  }

  if (opt_delete !== undefined) {
    queryParameters['delete'] = opt_delete;
  }

  if (opt_action !== undefined) {
    queryParameters['action'] = opt_action;
  }

  if (opt_location !== undefined) {
    queryParameters['$location'] = opt_location;
  }

  if (opt_propertylist !== undefined) {
    queryParameters['propertylist'] = opt_propertylist;
  }

  if (opt_providerRoots !== undefined) {
    queryParameters['provider.roots'] = opt_providerRoots;
  }

  if (opt_kind !== undefined) {
    queryParameters['kind'] = opt_kind;
  }

  /** @type {!Object} */
  var httpRequestParams = {
    method: 'POST',
    url: path,
    json: true,
            params: queryParameters,
    headers: headerParams
  };

  if (opt_extraHttpRequestParams) {
    httpRequestParams = angular.extend(httpRequestParams, opt_extraHttpRequestParams);
  }

  return (/** @type {?} */ (this.http_))(httpRequestParams);
}

/**
 * 
 * 
 * @param {!boolean=} opt_post 
 * @param {!boolean=} opt_apply 
 * @param {!boolean=} opt_delete 
 * @param {!string=} opt_action 
 * @param {!string=} opt_location 
 * @param {!Array<!string>=} opt_propertylist 
 * @param {!string=} opt_providerRoots 
 * @param {!string=} opt_kind 
 * @param {!angular.$http.Config=} opt_extraHttpRequestParams Extra HTTP parameters to send.
 * @return {!angular.$q.Promise<!API.Client.orgApacheSlingDistributionResourcesImplDistributionServiceResourInfo>}
 */
API.Client.ConfigmgrApi.prototype.orgApacheSlingDistributionResourcesImplDistributionServiceResour = function(opt_post, opt_apply, opt_delete, opt_action, opt_location, opt_propertylist, opt_providerRoots, opt_kind, opt_extraHttpRequestParams) {
  /** @const {string} */
  var path = this.basePath_ + '/system/console/configMgr/org.apache.sling.distribution.resources.impl.DistributionServiceResourceProviderFactory';

  /** @type {!Object} */
  var queryParameters = {};

  /** @type {!Object} */
  var headerParams = angular.extend({}, this.defaultHeaders_);
  if (opt_post !== undefined) {
    queryParameters['post'] = opt_post;
  }

  if (opt_apply !== undefined) {
    queryParameters['apply'] = opt_apply;
  }

  if (opt_delete !== undefined) {
    queryParameters['delete'] = opt_delete;
  }

  if (opt_action !== undefined) {
    queryParameters['action'] = opt_action;
  }

  if (opt_location !== undefined) {
    queryParameters['$location'] = opt_location;
  }

  if (opt_propertylist !== undefined) {
    queryParameters['propertylist'] = opt_propertylist;
  }

  if (opt_providerRoots !== undefined) {
    queryParameters['provider.roots'] = opt_providerRoots;
  }

  if (opt_kind !== undefined) {
    queryParameters['kind'] = opt_kind;
  }

  /** @type {!Object} */
  var httpRequestParams = {
    method: 'POST',
    url: path,
    json: true,
            params: queryParameters,
    headers: headerParams
  };

  if (opt_extraHttpRequestParams) {
    httpRequestParams = angular.extend(httpRequestParams, opt_extraHttpRequestParams);
  }

  return (/** @type {?} */ (this.http_))(httpRequestParams);
}

/**
 * 
 * 
 * @param {!boolean=} opt_post 
 * @param {!boolean=} opt_apply 
 * @param {!boolean=} opt_delete 
 * @param {!string=} opt_action 
 * @param {!string=} opt_location 
 * @param {!Array<!string>=} opt_propertylist 
 * @param {!string=} opt_name 
 * @param {!string=} opt_type 
 * @param {!string=} opt_formatTarget 
 * @param {!string=} opt_tempFsFolder 
 * @param {!number=} opt_fileThreshold 
 * @param {!string=} opt_memoryUnit 
 * @param {!boolean=} opt_useOffHeapMemory 
 * @param {!string=} opt_digestAlgorithm 
 * @param {!number=} opt_monitoringQueueSize 
 * @param {!number=} opt_cleanupDelay 
 * @param {!Array<!string>=} opt_packageFilters 
 * @param {!Array<!string>=} opt_propertyFilters 
 * @param {!angular.$http.Config=} opt_extraHttpRequestParams Extra HTTP parameters to send.
 * @return {!angular.$q.Promise<!API.Client.orgApacheSlingDistributionSerializationImplDistributionPackageBuInfo>}
 */
API.Client.ConfigmgrApi.prototype.orgApacheSlingDistributionSerializationImplDistributionPackageBu = function(opt_post, opt_apply, opt_delete, opt_action, opt_location, opt_propertylist, opt_name, opt_type, opt_formatTarget, opt_tempFsFolder, opt_fileThreshold, opt_memoryUnit, opt_useOffHeapMemory, opt_digestAlgorithm, opt_monitoringQueueSize, opt_cleanupDelay, opt_packageFilters, opt_propertyFilters, opt_extraHttpRequestParams) {
  /** @const {string} */
  var path = this.basePath_ + '/system/console/configMgr/org.apache.sling.distribution.serialization.impl.DistributionPackageBuilderFactory';

  /** @type {!Object} */
  var queryParameters = {};

  /** @type {!Object} */
  var headerParams = angular.extend({}, this.defaultHeaders_);
  if (opt_post !== undefined) {
    queryParameters['post'] = opt_post;
  }

  if (opt_apply !== undefined) {
    queryParameters['apply'] = opt_apply;
  }

  if (opt_delete !== undefined) {
    queryParameters['delete'] = opt_delete;
  }

  if (opt_action !== undefined) {
    queryParameters['action'] = opt_action;
  }

  if (opt_location !== undefined) {
    queryParameters['$location'] = opt_location;
  }

  if (opt_propertylist !== undefined) {
    queryParameters['propertylist'] = opt_propertylist;
  }

  if (opt_name !== undefined) {
    queryParameters['name'] = opt_name;
  }

  if (opt_type !== undefined) {
    queryParameters['type'] = opt_type;
  }

  if (opt_formatTarget !== undefined) {
    queryParameters['format.target'] = opt_formatTarget;
  }

  if (opt_tempFsFolder !== undefined) {
    queryParameters['tempFsFolder'] = opt_tempFsFolder;
  }

  if (opt_fileThreshold !== undefined) {
    queryParameters['fileThreshold'] = opt_fileThreshold;
  }

  if (opt_memoryUnit !== undefined) {
    queryParameters['memoryUnit'] = opt_memoryUnit;
  }

  if (opt_useOffHeapMemory !== undefined) {
    queryParameters['useOffHeapMemory'] = opt_useOffHeapMemory;
  }

  if (opt_digestAlgorithm !== undefined) {
    queryParameters['digestAlgorithm'] = opt_digestAlgorithm;
  }

  if (opt_monitoringQueueSize !== undefined) {
    queryParameters['monitoringQueueSize'] = opt_monitoringQueueSize;
  }

  if (opt_cleanupDelay !== undefined) {
    queryParameters['cleanupDelay'] = opt_cleanupDelay;
  }

  if (opt_packageFilters !== undefined) {
    queryParameters['package.filters'] = opt_packageFilters;
  }

  if (opt_propertyFilters !== undefined) {
    queryParameters['property.filters'] = opt_propertyFilters;
  }

  /** @type {!Object} */
  var httpRequestParams = {
    method: 'POST',
    url: path,
    json: true,
            params: queryParameters,
    headers: headerParams
  };

  if (opt_extraHttpRequestParams) {
    httpRequestParams = angular.extend(httpRequestParams, opt_extraHttpRequestParams);
  }

  return (/** @type {?} */ (this.http_))(httpRequestParams);
}

/**
 * 
 * 
 * @param {!boolean=} opt_post 
 * @param {!boolean=} opt_apply 
 * @param {!boolean=} opt_delete 
 * @param {!string=} opt_action 
 * @param {!string=} opt_location 
 * @param {!Array<!string>=} opt_propertylist 
 * @param {!string=} opt_name 
 * @param {!string=} opt_type 
 * @param {!string=} opt_importMode 
 * @param {!string=} opt_aclHandling 
 * @param {!string=} opt_packageRoots 
 * @param {!Array<!string>=} opt_packageFilters 
 * @param {!Array<!string>=} opt_propertyFilters 
 * @param {!string=} opt_tempFsFolder 
 * @param {!boolean=} opt_useBinaryReferences 
 * @param {!number=} opt_autoSaveThreshold 
 * @param {!number=} opt_cleanupDelay 
 * @param {!number=} opt_fileThreshold 
 * @param {!string=} opt_MEGA_BYTES 
 * @param {!boolean=} opt_useOffHeapMemory 
 * @param {!string=} opt_digestAlgorithm 
 * @param {!number=} opt_monitoringQueueSize 
 * @param {!Array<!string>=} opt_pathsMapping 
 * @param {!boolean=} opt_strictImport 
 * @param {!angular.$http.Config=} opt_extraHttpRequestParams Extra HTTP parameters to send.
 * @return {!angular.$q.Promise<!API.Client.orgApacheSlingDistributionSerializationImplVltVaultDistributionInfo>}
 */
API.Client.ConfigmgrApi.prototype.orgApacheSlingDistributionSerializationImplVltVaultDistribution = function(opt_post, opt_apply, opt_delete, opt_action, opt_location, opt_propertylist, opt_name, opt_type, opt_importMode, opt_aclHandling, opt_packageRoots, opt_packageFilters, opt_propertyFilters, opt_tempFsFolder, opt_useBinaryReferences, opt_autoSaveThreshold, opt_cleanupDelay, opt_fileThreshold, opt_MEGA_BYTES, opt_useOffHeapMemory, opt_digestAlgorithm, opt_monitoringQueueSize, opt_pathsMapping, opt_strictImport, opt_extraHttpRequestParams) {
  /** @const {string} */
  var path = this.basePath_ + '/system/console/configMgr/org.apache.sling.distribution.serialization.impl.vlt.VaultDistributionPackageBuilderFactory';

  /** @type {!Object} */
  var queryParameters = {};

  /** @type {!Object} */
  var headerParams = angular.extend({}, this.defaultHeaders_);
  if (opt_post !== undefined) {
    queryParameters['post'] = opt_post;
  }

  if (opt_apply !== undefined) {
    queryParameters['apply'] = opt_apply;
  }

  if (opt_delete !== undefined) {
    queryParameters['delete'] = opt_delete;
  }

  if (opt_action !== undefined) {
    queryParameters['action'] = opt_action;
  }

  if (opt_location !== undefined) {
    queryParameters['$location'] = opt_location;
  }

  if (opt_propertylist !== undefined) {
    queryParameters['propertylist'] = opt_propertylist;
  }

  if (opt_name !== undefined) {
    queryParameters['name'] = opt_name;
  }

  if (opt_type !== undefined) {
    queryParameters['type'] = opt_type;
  }

  if (opt_importMode !== undefined) {
    queryParameters['importMode'] = opt_importMode;
  }

  if (opt_aclHandling !== undefined) {
    queryParameters['aclHandling'] = opt_aclHandling;
  }

  if (opt_packageRoots !== undefined) {
    queryParameters['package.roots'] = opt_packageRoots;
  }

  if (opt_packageFilters !== undefined) {
    queryParameters['package.filters'] = opt_packageFilters;
  }

  if (opt_propertyFilters !== undefined) {
    queryParameters['property.filters'] = opt_propertyFilters;
  }

  if (opt_tempFsFolder !== undefined) {
    queryParameters['tempFsFolder'] = opt_tempFsFolder;
  }

  if (opt_useBinaryReferences !== undefined) {
    queryParameters['useBinaryReferences'] = opt_useBinaryReferences;
  }

  if (opt_autoSaveThreshold !== undefined) {
    queryParameters['autoSaveThreshold'] = opt_autoSaveThreshold;
  }

  if (opt_cleanupDelay !== undefined) {
    queryParameters['cleanupDelay'] = opt_cleanupDelay;
  }

  if (opt_fileThreshold !== undefined) {
    queryParameters['fileThreshold'] = opt_fileThreshold;
  }

  if (opt_MEGA_BYTES !== undefined) {
    queryParameters['MEGA_BYTES'] = opt_MEGA_BYTES;
  }

  if (opt_useOffHeapMemory !== undefined) {
    queryParameters['useOffHeapMemory'] = opt_useOffHeapMemory;
  }

  if (opt_digestAlgorithm !== undefined) {
    queryParameters['digestAlgorithm'] = opt_digestAlgorithm;
  }

  if (opt_monitoringQueueSize !== undefined) {
    queryParameters['monitoringQueueSize'] = opt_monitoringQueueSize;
  }

  if (opt_pathsMapping !== undefined) {
    queryParameters['pathsMapping'] = opt_pathsMapping;
  }

  if (opt_strictImport !== undefined) {
    queryParameters['strictImport'] = opt_strictImport;
  }

  /** @type {!Object} */
  var httpRequestParams = {
    method: 'POST',
    url: path,
    json: true,
            params: queryParameters,
    headers: headerParams
  };

  if (opt_extraHttpRequestParams) {
    httpRequestParams = angular.extend(httpRequestParams, opt_extraHttpRequestParams);
  }

  return (/** @type {?} */ (this.http_))(httpRequestParams);
}

/**
 * 
 * 
 * @param {!boolean=} opt_post 
 * @param {!boolean=} opt_apply 
 * @param {!boolean=} opt_delete 
 * @param {!string=} opt_action 
 * @param {!string=} opt_location 
 * @param {!Array<!string>=} opt_propertylist 
 * @param {!string=} opt_name 
 * @param {!string=} opt_username 
 * @param {!string=} opt_password 
 * @param {!angular.$http.Config=} opt_extraHttpRequestParams Extra HTTP parameters to send.
 * @return {!angular.$q.Promise<!API.Client.orgApacheSlingDistributionTransportImplUserCredentialsDistributiInfo>}
 */
API.Client.ConfigmgrApi.prototype.orgApacheSlingDistributionTransportImplUserCredentialsDistributi = function(opt_post, opt_apply, opt_delete, opt_action, opt_location, opt_propertylist, opt_name, opt_username, opt_password, opt_extraHttpRequestParams) {
  /** @const {string} */
  var path = this.basePath_ + '/system/console/configMgr/org.apache.sling.distribution.transport.impl.UserCredentialsDistributionTransportSecretProvider';

  /** @type {!Object} */
  var queryParameters = {};

  /** @type {!Object} */
  var headerParams = angular.extend({}, this.defaultHeaders_);
  if (opt_post !== undefined) {
    queryParameters['post'] = opt_post;
  }

  if (opt_apply !== undefined) {
    queryParameters['apply'] = opt_apply;
  }

  if (opt_delete !== undefined) {
    queryParameters['delete'] = opt_delete;
  }

  if (opt_action !== undefined) {
    queryParameters['action'] = opt_action;
  }

  if (opt_location !== undefined) {
    queryParameters['$location'] = opt_location;
  }

  if (opt_propertylist !== undefined) {
    queryParameters['propertylist'] = opt_propertylist;
  }

  if (opt_name !== undefined) {
    queryParameters['name'] = opt_name;
  }

  if (opt_username !== undefined) {
    queryParameters['username'] = opt_username;
  }

  if (opt_password !== undefined) {
    queryParameters['password'] = opt_password;
  }

  /** @type {!Object} */
  var httpRequestParams = {
    method: 'POST',
    url: path,
    json: true,
            params: queryParameters,
    headers: headerParams
  };

  if (opt_extraHttpRequestParams) {
    httpRequestParams = angular.extend(httpRequestParams, opt_extraHttpRequestParams);
  }

  return (/** @type {?} */ (this.http_))(httpRequestParams);
}

/**
 * 
 * 
 * @param {!boolean=} opt_post 
 * @param {!boolean=} opt_apply 
 * @param {!boolean=} opt_delete 
 * @param {!string=} opt_action 
 * @param {!string=} opt_location 
 * @param {!Array<!string>=} opt_propertylist 
 * @param {!string=} opt_name 
 * @param {!string=} opt_path 
 * @param {!angular.$http.Config=} opt_extraHttpRequestParams Extra HTTP parameters to send.
 * @return {!angular.$q.Promise<!API.Client.orgApacheSlingDistributionTriggerImplDistributionEventDistributeInfo>}
 */
API.Client.ConfigmgrApi.prototype.orgApacheSlingDistributionTriggerImplDistributionEventDistribute = function(opt_post, opt_apply, opt_delete, opt_action, opt_location, opt_propertylist, opt_name, opt_path, opt_extraHttpRequestParams) {
  /** @const {string} */
  var path = this.basePath_ + '/system/console/configMgr/org.apache.sling.distribution.trigger.impl.DistributionEventDistributeDistributionTriggerFactory';

  /** @type {!Object} */
  var queryParameters = {};

  /** @type {!Object} */
  var headerParams = angular.extend({}, this.defaultHeaders_);
  if (opt_post !== undefined) {
    queryParameters['post'] = opt_post;
  }

  if (opt_apply !== undefined) {
    queryParameters['apply'] = opt_apply;
  }

  if (opt_delete !== undefined) {
    queryParameters['delete'] = opt_delete;
  }

  if (opt_action !== undefined) {
    queryParameters['action'] = opt_action;
  }

  if (opt_location !== undefined) {
    queryParameters['$location'] = opt_location;
  }

  if (opt_propertylist !== undefined) {
    queryParameters['propertylist'] = opt_propertylist;
  }

  if (opt_name !== undefined) {
    queryParameters['name'] = opt_name;
  }

  if (opt_path !== undefined) {
    queryParameters['path'] = opt_path;
  }

  /** @type {!Object} */
  var httpRequestParams = {
    method: 'POST',
    url: path,
    json: true,
            params: queryParameters,
    headers: headerParams
  };

  if (opt_extraHttpRequestParams) {
    httpRequestParams = angular.extend(httpRequestParams, opt_extraHttpRequestParams);
  }

  return (/** @type {?} */ (this.http_))(httpRequestParams);
}

/**
 * 
 * 
 * @param {!boolean=} opt_post 
 * @param {!boolean=} opt_apply 
 * @param {!boolean=} opt_delete 
 * @param {!string=} opt_action 
 * @param {!string=} opt_location 
 * @param {!Array<!string>=} opt_propertylist 
 * @param {!string=} opt_name 
 * @param {!string=} opt_path 
 * @param {!Array<!string>=} opt_ignoredPathsPatterns 
 * @param {!string=} opt_serviceName 
 * @param {!boolean=} opt_deep 
 * @param {!angular.$http.Config=} opt_extraHttpRequestParams Extra HTTP parameters to send.
 * @return {!angular.$q.Promise<!API.Client.orgApacheSlingDistributionTriggerImplJcrEventDistributionTriggerInfo>}
 */
API.Client.ConfigmgrApi.prototype.orgApacheSlingDistributionTriggerImplJcrEventDistributionTrigger = function(opt_post, opt_apply, opt_delete, opt_action, opt_location, opt_propertylist, opt_name, opt_path, opt_ignoredPathsPatterns, opt_serviceName, opt_deep, opt_extraHttpRequestParams) {
  /** @const {string} */
  var path = this.basePath_ + '/system/console/configMgr/org.apache.sling.distribution.trigger.impl.JcrEventDistributionTriggerFactory';

  /** @type {!Object} */
  var queryParameters = {};

  /** @type {!Object} */
  var headerParams = angular.extend({}, this.defaultHeaders_);
  if (opt_post !== undefined) {
    queryParameters['post'] = opt_post;
  }

  if (opt_apply !== undefined) {
    queryParameters['apply'] = opt_apply;
  }

  if (opt_delete !== undefined) {
    queryParameters['delete'] = opt_delete;
  }

  if (opt_action !== undefined) {
    queryParameters['action'] = opt_action;
  }

  if (opt_location !== undefined) {
    queryParameters['$location'] = opt_location;
  }

  if (opt_propertylist !== undefined) {
    queryParameters['propertylist'] = opt_propertylist;
  }

  if (opt_name !== undefined) {
    queryParameters['name'] = opt_name;
  }

  if (opt_path !== undefined) {
    queryParameters['path'] = opt_path;
  }

  if (opt_ignoredPathsPatterns !== undefined) {
    queryParameters['ignoredPathsPatterns'] = opt_ignoredPathsPatterns;
  }

  if (opt_serviceName !== undefined) {
    queryParameters['serviceName'] = opt_serviceName;
  }

  if (opt_deep !== undefined) {
    queryParameters['deep'] = opt_deep;
  }

  /** @type {!Object} */
  var httpRequestParams = {
    method: 'POST',
    url: path,
    json: true,
            params: queryParameters,
    headers: headerParams
  };

  if (opt_extraHttpRequestParams) {
    httpRequestParams = angular.extend(httpRequestParams, opt_extraHttpRequestParams);
  }

  return (/** @type {?} */ (this.http_))(httpRequestParams);
}

/**
 * 
 * 
 * @param {!boolean=} opt_post 
 * @param {!boolean=} opt_apply 
 * @param {!boolean=} opt_delete 
 * @param {!string=} opt_action 
 * @param {!string=} opt_location 
 * @param {!Array<!string>=} opt_propertylist 
 * @param {!string=} opt_name 
 * @param {!string=} opt_path 
 * @param {!string=} opt_serviceName 
 * @param {!string=} opt_nuggetsPath 
 * @param {!angular.$http.Config=} opt_extraHttpRequestParams Extra HTTP parameters to send.
 * @return {!angular.$q.Promise<!API.Client.orgApacheSlingDistributionTriggerImplPersistedJcrEventDistributiInfo>}
 */
API.Client.ConfigmgrApi.prototype.orgApacheSlingDistributionTriggerImplPersistedJcrEventDistributi = function(opt_post, opt_apply, opt_delete, opt_action, opt_location, opt_propertylist, opt_name, opt_path, opt_serviceName, opt_nuggetsPath, opt_extraHttpRequestParams) {
  /** @const {string} */
  var path = this.basePath_ + '/system/console/configMgr/org.apache.sling.distribution.trigger.impl.PersistedJcrEventDistributionTriggerFactory';

  /** @type {!Object} */
  var queryParameters = {};

  /** @type {!Object} */
  var headerParams = angular.extend({}, this.defaultHeaders_);
  if (opt_post !== undefined) {
    queryParameters['post'] = opt_post;
  }

  if (opt_apply !== undefined) {
    queryParameters['apply'] = opt_apply;
  }

  if (opt_delete !== undefined) {
    queryParameters['delete'] = opt_delete;
  }

  if (opt_action !== undefined) {
    queryParameters['action'] = opt_action;
  }

  if (opt_location !== undefined) {
    queryParameters['$location'] = opt_location;
  }

  if (opt_propertylist !== undefined) {
    queryParameters['propertylist'] = opt_propertylist;
  }

  if (opt_name !== undefined) {
    queryParameters['name'] = opt_name;
  }

  if (opt_path !== undefined) {
    queryParameters['path'] = opt_path;
  }

  if (opt_serviceName !== undefined) {
    queryParameters['serviceName'] = opt_serviceName;
  }

  if (opt_nuggetsPath !== undefined) {
    queryParameters['nuggetsPath'] = opt_nuggetsPath;
  }

  /** @type {!Object} */
  var httpRequestParams = {
    method: 'POST',
    url: path,
    json: true,
            params: queryParameters,
    headers: headerParams
  };

  if (opt_extraHttpRequestParams) {
    httpRequestParams = angular.extend(httpRequestParams, opt_extraHttpRequestParams);
  }

  return (/** @type {?} */ (this.http_))(httpRequestParams);
}

/**
 * 
 * 
 * @param {!boolean=} opt_post 
 * @param {!boolean=} opt_apply 
 * @param {!boolean=} opt_delete 
 * @param {!string=} opt_action 
 * @param {!string=} opt_location 
 * @param {!Array<!string>=} opt_propertylist 
 * @param {!string=} opt_name 
 * @param {!string=} opt_endpoint 
 * @param {!string=} opt_transportSecretProviderTarget 
 * @param {!angular.$http.Config=} opt_extraHttpRequestParams Extra HTTP parameters to send.
 * @return {!angular.$q.Promise<!API.Client.orgApacheSlingDistributionTriggerImplRemoteEventDistributionTrigInfo>}
 */
API.Client.ConfigmgrApi.prototype.orgApacheSlingDistributionTriggerImplRemoteEventDistributionTrig = function(opt_post, opt_apply, opt_delete, opt_action, opt_location, opt_propertylist, opt_name, opt_endpoint, opt_transportSecretProviderTarget, opt_extraHttpRequestParams) {
  /** @const {string} */
  var path = this.basePath_ + '/system/console/configMgr/org.apache.sling.distribution.trigger.impl.RemoteEventDistributionTriggerFactory';

  /** @type {!Object} */
  var queryParameters = {};

  /** @type {!Object} */
  var headerParams = angular.extend({}, this.defaultHeaders_);
  if (opt_post !== undefined) {
    queryParameters['post'] = opt_post;
  }

  if (opt_apply !== undefined) {
    queryParameters['apply'] = opt_apply;
  }

  if (opt_delete !== undefined) {
    queryParameters['delete'] = opt_delete;
  }

  if (opt_action !== undefined) {
    queryParameters['action'] = opt_action;
  }

  if (opt_location !== undefined) {
    queryParameters['$location'] = opt_location;
  }

  if (opt_propertylist !== undefined) {
    queryParameters['propertylist'] = opt_propertylist;
  }

  if (opt_name !== undefined) {
    queryParameters['name'] = opt_name;
  }

  if (opt_endpoint !== undefined) {
    queryParameters['endpoint'] = opt_endpoint;
  }

  if (opt_transportSecretProviderTarget !== undefined) {
    queryParameters['transportSecretProvider.target'] = opt_transportSecretProviderTarget;
  }

  /** @type {!Object} */
  var httpRequestParams = {
    method: 'POST',
    url: path,
    json: true,
            params: queryParameters,
    headers: headerParams
  };

  if (opt_extraHttpRequestParams) {
    httpRequestParams = angular.extend(httpRequestParams, opt_extraHttpRequestParams);
  }

  return (/** @type {?} */ (this.http_))(httpRequestParams);
}

/**
 * 
 * 
 * @param {!boolean=} opt_post 
 * @param {!boolean=} opt_apply 
 * @param {!boolean=} opt_delete 
 * @param {!string=} opt_action 
 * @param {!string=} opt_location 
 * @param {!Array<!string>=} opt_propertylist 
 * @param {!string=} opt_name 
 * @param {!string=} opt_path 
 * @param {!angular.$http.Config=} opt_extraHttpRequestParams Extra HTTP parameters to send.
 * @return {!angular.$q.Promise<!API.Client.orgApacheSlingDistributionTriggerImplResourceEventDistributionTrInfo>}
 */
API.Client.ConfigmgrApi.prototype.orgApacheSlingDistributionTriggerImplResourceEventDistributionTr = function(opt_post, opt_apply, opt_delete, opt_action, opt_location, opt_propertylist, opt_name, opt_path, opt_extraHttpRequestParams) {
  /** @const {string} */
  var path = this.basePath_ + '/system/console/configMgr/org.apache.sling.distribution.trigger.impl.ResourceEventDistributionTriggerFactory';

  /** @type {!Object} */
  var queryParameters = {};

  /** @type {!Object} */
  var headerParams = angular.extend({}, this.defaultHeaders_);
  if (opt_post !== undefined) {
    queryParameters['post'] = opt_post;
  }

  if (opt_apply !== undefined) {
    queryParameters['apply'] = opt_apply;
  }

  if (opt_delete !== undefined) {
    queryParameters['delete'] = opt_delete;
  }

  if (opt_action !== undefined) {
    queryParameters['action'] = opt_action;
  }

  if (opt_location !== undefined) {
    queryParameters['$location'] = opt_location;
  }

  if (opt_propertylist !== undefined) {
    queryParameters['propertylist'] = opt_propertylist;
  }

  if (opt_name !== undefined) {
    queryParameters['name'] = opt_name;
  }

  if (opt_path !== undefined) {
    queryParameters['path'] = opt_path;
  }

  /** @type {!Object} */
  var httpRequestParams = {
    method: 'POST',
    url: path,
    json: true,
            params: queryParameters,
    headers: headerParams
  };

  if (opt_extraHttpRequestParams) {
    httpRequestParams = angular.extend(httpRequestParams, opt_extraHttpRequestParams);
  }

  return (/** @type {?} */ (this.http_))(httpRequestParams);
}

/**
 * 
 * 
 * @param {!boolean=} opt_post 
 * @param {!boolean=} opt_apply 
 * @param {!boolean=} opt_delete 
 * @param {!string=} opt_action 
 * @param {!string=} opt_location 
 * @param {!Array<!string>=} opt_propertylist 
 * @param {!string=} opt_name 
 * @param {!string=} opt_path 
 * @param {!string=} opt_seconds 
 * @param {!string=} opt_serviceName 
 * @param {!angular.$http.Config=} opt_extraHttpRequestParams Extra HTTP parameters to send.
 * @return {!angular.$q.Promise<!API.Client.orgApacheSlingDistributionTriggerImplScheduledDistributionTriggeInfo>}
 */
API.Client.ConfigmgrApi.prototype.orgApacheSlingDistributionTriggerImplScheduledDistributionTrigge = function(opt_post, opt_apply, opt_delete, opt_action, opt_location, opt_propertylist, opt_name, opt_path, opt_seconds, opt_serviceName, opt_extraHttpRequestParams) {
  /** @const {string} */
  var path = this.basePath_ + '/system/console/configMgr/org.apache.sling.distribution.trigger.impl.ScheduledDistributionTriggerFactory';

  /** @type {!Object} */
  var queryParameters = {};

  /** @type {!Object} */
  var headerParams = angular.extend({}, this.defaultHeaders_);
  if (opt_post !== undefined) {
    queryParameters['post'] = opt_post;
  }

  if (opt_apply !== undefined) {
    queryParameters['apply'] = opt_apply;
  }

  if (opt_delete !== undefined) {
    queryParameters['delete'] = opt_delete;
  }

  if (opt_action !== undefined) {
    queryParameters['action'] = opt_action;
  }

  if (opt_location !== undefined) {
    queryParameters['$location'] = opt_location;
  }

  if (opt_propertylist !== undefined) {
    queryParameters['propertylist'] = opt_propertylist;
  }

  if (opt_name !== undefined) {
    queryParameters['name'] = opt_name;
  }

  if (opt_path !== undefined) {
    queryParameters['path'] = opt_path;
  }

  if (opt_seconds !== undefined) {
    queryParameters['seconds'] = opt_seconds;
  }

  if (opt_serviceName !== undefined) {
    queryParameters['serviceName'] = opt_serviceName;
  }

  /** @type {!Object} */
  var httpRequestParams = {
    method: 'POST',
    url: path,
    json: true,
            params: queryParameters,
    headers: headerParams
  };

  if (opt_extraHttpRequestParams) {
    httpRequestParams = angular.extend(httpRequestParams, opt_extraHttpRequestParams);
  }

  return (/** @type {?} */ (this.http_))(httpRequestParams);
}

/**
 * 
 * 
 * @param {!boolean=} opt_post 
 * @param {!boolean=} opt_apply 
 * @param {!boolean=} opt_delete 
 * @param {!string=} opt_action 
 * @param {!string=} opt_location 
 * @param {!Array<!string>=} opt_propertylist 
 * @param {!string=} opt_osgiHttpWhiteboardContextSelect 
 * @param {!string=} opt_osgiHttpWhiteboardListener 
 * @param {!string=} opt_authSudoCookie 
 * @param {!string=} opt_authSudoParameter 
 * @param {!boolean=} opt_authAnnonymous 
 * @param {!Array<!string>=} opt_slingAuthRequirements 
 * @param {!string=} opt_slingAuthAnonymousUser 
 * @param {!string=} opt_slingAuthAnonymousPassword 
 * @param {!string=} opt_authHttp 
 * @param {!string=} opt_authHttpRealm 
 * @param {!Array<!string>=} opt_authUriSuffix 
 * @param {!angular.$http.Config=} opt_extraHttpRequestParams Extra HTTP parameters to send.
 * @return {!angular.$q.Promise<!API.Client.orgApacheSlingEngineImplAuthSlingAuthenticatorInfo>}
 */
API.Client.ConfigmgrApi.prototype.orgApacheSlingEngineImplAuthSlingAuthenticator = function(opt_post, opt_apply, opt_delete, opt_action, opt_location, opt_propertylist, opt_osgiHttpWhiteboardContextSelect, opt_osgiHttpWhiteboardListener, opt_authSudoCookie, opt_authSudoParameter, opt_authAnnonymous, opt_slingAuthRequirements, opt_slingAuthAnonymousUser, opt_slingAuthAnonymousPassword, opt_authHttp, opt_authHttpRealm, opt_authUriSuffix, opt_extraHttpRequestParams) {
  /** @const {string} */
  var path = this.basePath_ + '/system/console/configMgr/org.apache.sling.engine.impl.auth.SlingAuthenticator';

  /** @type {!Object} */
  var queryParameters = {};

  /** @type {!Object} */
  var headerParams = angular.extend({}, this.defaultHeaders_);
  if (opt_post !== undefined) {
    queryParameters['post'] = opt_post;
  }

  if (opt_apply !== undefined) {
    queryParameters['apply'] = opt_apply;
  }

  if (opt_delete !== undefined) {
    queryParameters['delete'] = opt_delete;
  }

  if (opt_action !== undefined) {
    queryParameters['action'] = opt_action;
  }

  if (opt_location !== undefined) {
    queryParameters['$location'] = opt_location;
  }

  if (opt_propertylist !== undefined) {
    queryParameters['propertylist'] = opt_propertylist;
  }

  if (opt_osgiHttpWhiteboardContextSelect !== undefined) {
    queryParameters['osgi.http.whiteboard.context.select'] = opt_osgiHttpWhiteboardContextSelect;
  }

  if (opt_osgiHttpWhiteboardListener !== undefined) {
    queryParameters['osgi.http.whiteboard.listener'] = opt_osgiHttpWhiteboardListener;
  }

  if (opt_authSudoCookie !== undefined) {
    queryParameters['auth.sudo.cookie'] = opt_authSudoCookie;
  }

  if (opt_authSudoParameter !== undefined) {
    queryParameters['auth.sudo.parameter'] = opt_authSudoParameter;
  }

  if (opt_authAnnonymous !== undefined) {
    queryParameters['auth.annonymous'] = opt_authAnnonymous;
  }

  if (opt_slingAuthRequirements !== undefined) {
    queryParameters['sling.auth.requirements'] = opt_slingAuthRequirements;
  }

  if (opt_slingAuthAnonymousUser !== undefined) {
    queryParameters['sling.auth.anonymous.user'] = opt_slingAuthAnonymousUser;
  }

  if (opt_slingAuthAnonymousPassword !== undefined) {
    queryParameters['sling.auth.anonymous.password'] = opt_slingAuthAnonymousPassword;
  }

  if (opt_authHttp !== undefined) {
    queryParameters['auth.http'] = opt_authHttp;
  }

  if (opt_authHttpRealm !== undefined) {
    queryParameters['auth.http.realm'] = opt_authHttpRealm;
  }

  if (opt_authUriSuffix !== undefined) {
    queryParameters['auth.uri.suffix'] = opt_authUriSuffix;
  }

  /** @type {!Object} */
  var httpRequestParams = {
    method: 'POST',
    url: path,
    json: true,
            params: queryParameters,
    headers: headerParams
  };

  if (opt_extraHttpRequestParams) {
    httpRequestParams = angular.extend(httpRequestParams, opt_extraHttpRequestParams);
  }

  return (/** @type {?} */ (this.http_))(httpRequestParams);
}

/**
 * 
 * 
 * @param {!boolean=} opt_post 
 * @param {!boolean=} opt_apply 
 * @param {!boolean=} opt_delete 
 * @param {!string=} opt_action 
 * @param {!string=} opt_location 
 * @param {!Array<!string>=} opt_propertylist 
 * @param {!Array<!string>=} opt_extensions 
 * @param {!number=} opt_minDurationMs 
 * @param {!number=} opt_maxDurationMs 
 * @param {!boolean=} opt_compactLogFormat 
 * @param {!angular.$http.Config=} opt_extraHttpRequestParams Extra HTTP parameters to send.
 * @return {!angular.$q.Promise<!API.Client.orgApacheSlingEngineImplDebugRequestProgressTrackerLogFilterInfo>}
 */
API.Client.ConfigmgrApi.prototype.orgApacheSlingEngineImplDebugRequestProgressTrackerLogFilter = function(opt_post, opt_apply, opt_delete, opt_action, opt_location, opt_propertylist, opt_extensions, opt_minDurationMs, opt_maxDurationMs, opt_compactLogFormat, opt_extraHttpRequestParams) {
  /** @const {string} */
  var path = this.basePath_ + '/system/console/configMgr/org.apache.sling.engine.impl.debug.RequestProgressTrackerLogFilter';

  /** @type {!Object} */
  var queryParameters = {};

  /** @type {!Object} */
  var headerParams = angular.extend({}, this.defaultHeaders_);
  if (opt_post !== undefined) {
    queryParameters['post'] = opt_post;
  }

  if (opt_apply !== undefined) {
    queryParameters['apply'] = opt_apply;
  }

  if (opt_delete !== undefined) {
    queryParameters['delete'] = opt_delete;
  }

  if (opt_action !== undefined) {
    queryParameters['action'] = opt_action;
  }

  if (opt_location !== undefined) {
    queryParameters['$location'] = opt_location;
  }

  if (opt_propertylist !== undefined) {
    queryParameters['propertylist'] = opt_propertylist;
  }

  if (opt_extensions !== undefined) {
    queryParameters['extensions'] = opt_extensions;
  }

  if (opt_minDurationMs !== undefined) {
    queryParameters['minDurationMs'] = opt_minDurationMs;
  }

  if (opt_maxDurationMs !== undefined) {
    queryParameters['maxDurationMs'] = opt_maxDurationMs;
  }

  if (opt_compactLogFormat !== undefined) {
    queryParameters['compactLogFormat'] = opt_compactLogFormat;
  }

  /** @type {!Object} */
  var httpRequestParams = {
    method: 'POST',
    url: path,
    json: true,
            params: queryParameters,
    headers: headerParams
  };

  if (opt_extraHttpRequestParams) {
    httpRequestParams = angular.extend(httpRequestParams, opt_extraHttpRequestParams);
  }

  return (/** @type {?} */ (this.http_))(httpRequestParams);
}

/**
 * 
 * 
 * @param {!boolean=} opt_post 
 * @param {!boolean=} opt_apply 
 * @param {!boolean=} opt_delete 
 * @param {!string=} opt_action 
 * @param {!string=} opt_location 
 * @param {!Array<!string>=} opt_propertylist 
 * @param {!string=} opt_requestLogOutput 
 * @param {!number=} opt_requestLogOutputtype 
 * @param {!boolean=} opt_requestLogEnabled 
 * @param {!string=} opt_accessLogOutput 
 * @param {!number=} opt_accessLogOutputtype 
 * @param {!boolean=} opt_accessLogEnabled 
 * @param {!angular.$http.Config=} opt_extraHttpRequestParams Extra HTTP parameters to send.
 * @return {!angular.$q.Promise<!API.Client.orgApacheSlingEngineImplLogRequestLoggerInfo>}
 */
API.Client.ConfigmgrApi.prototype.orgApacheSlingEngineImplLogRequestLogger = function(opt_post, opt_apply, opt_delete, opt_action, opt_location, opt_propertylist, opt_requestLogOutput, opt_requestLogOutputtype, opt_requestLogEnabled, opt_accessLogOutput, opt_accessLogOutputtype, opt_accessLogEnabled, opt_extraHttpRequestParams) {
  /** @const {string} */
  var path = this.basePath_ + '/system/console/configMgr/org.apache.sling.engine.impl.log.RequestLogger';

  /** @type {!Object} */
  var queryParameters = {};

  /** @type {!Object} */
  var headerParams = angular.extend({}, this.defaultHeaders_);
  if (opt_post !== undefined) {
    queryParameters['post'] = opt_post;
  }

  if (opt_apply !== undefined) {
    queryParameters['apply'] = opt_apply;
  }

  if (opt_delete !== undefined) {
    queryParameters['delete'] = opt_delete;
  }

  if (opt_action !== undefined) {
    queryParameters['action'] = opt_action;
  }

  if (opt_location !== undefined) {
    queryParameters['$location'] = opt_location;
  }

  if (opt_propertylist !== undefined) {
    queryParameters['propertylist'] = opt_propertylist;
  }

  if (opt_requestLogOutput !== undefined) {
    queryParameters['request.log.output'] = opt_requestLogOutput;
  }

  if (opt_requestLogOutputtype !== undefined) {
    queryParameters['request.log.outputtype'] = opt_requestLogOutputtype;
  }

  if (opt_requestLogEnabled !== undefined) {
    queryParameters['request.log.enabled'] = opt_requestLogEnabled;
  }

  if (opt_accessLogOutput !== undefined) {
    queryParameters['access.log.output'] = opt_accessLogOutput;
  }

  if (opt_accessLogOutputtype !== undefined) {
    queryParameters['access.log.outputtype'] = opt_accessLogOutputtype;
  }

  if (opt_accessLogEnabled !== undefined) {
    queryParameters['access.log.enabled'] = opt_accessLogEnabled;
  }

  /** @type {!Object} */
  var httpRequestParams = {
    method: 'POST',
    url: path,
    json: true,
            params: queryParameters,
    headers: headerParams
  };

  if (opt_extraHttpRequestParams) {
    httpRequestParams = angular.extend(httpRequestParams, opt_extraHttpRequestParams);
  }

  return (/** @type {?} */ (this.http_))(httpRequestParams);
}

/**
 * 
 * 
 * @param {!boolean=} opt_post 
 * @param {!boolean=} opt_apply 
 * @param {!boolean=} opt_delete 
 * @param {!string=} opt_action 
 * @param {!string=} opt_location 
 * @param {!Array<!string>=} opt_propertylist 
 * @param {!string=} opt_requestLogServiceFormat 
 * @param {!string=} opt_requestLogServiceOutput 
 * @param {!number=} opt_requestLogServiceOutputtype 
 * @param {!boolean=} opt_requestLogServiceOnentry 
 * @param {!angular.$http.Config=} opt_extraHttpRequestParams Extra HTTP parameters to send.
 * @return {!angular.$q.Promise<!API.Client.orgApacheSlingEngineImplLogRequestLoggerServiceInfo>}
 */
API.Client.ConfigmgrApi.prototype.orgApacheSlingEngineImplLogRequestLoggerService = function(opt_post, opt_apply, opt_delete, opt_action, opt_location, opt_propertylist, opt_requestLogServiceFormat, opt_requestLogServiceOutput, opt_requestLogServiceOutputtype, opt_requestLogServiceOnentry, opt_extraHttpRequestParams) {
  /** @const {string} */
  var path = this.basePath_ + '/system/console/configMgr/org.apache.sling.engine.impl.log.RequestLoggerService';

  /** @type {!Object} */
  var queryParameters = {};

  /** @type {!Object} */
  var headerParams = angular.extend({}, this.defaultHeaders_);
  if (opt_post !== undefined) {
    queryParameters['post'] = opt_post;
  }

  if (opt_apply !== undefined) {
    queryParameters['apply'] = opt_apply;
  }

  if (opt_delete !== undefined) {
    queryParameters['delete'] = opt_delete;
  }

  if (opt_action !== undefined) {
    queryParameters['action'] = opt_action;
  }

  if (opt_location !== undefined) {
    queryParameters['$location'] = opt_location;
  }

  if (opt_propertylist !== undefined) {
    queryParameters['propertylist'] = opt_propertylist;
  }

  if (opt_requestLogServiceFormat !== undefined) {
    queryParameters['request.log.service.format'] = opt_requestLogServiceFormat;
  }

  if (opt_requestLogServiceOutput !== undefined) {
    queryParameters['request.log.service.output'] = opt_requestLogServiceOutput;
  }

  if (opt_requestLogServiceOutputtype !== undefined) {
    queryParameters['request.log.service.outputtype'] = opt_requestLogServiceOutputtype;
  }

  if (opt_requestLogServiceOnentry !== undefined) {
    queryParameters['request.log.service.onentry'] = opt_requestLogServiceOnentry;
  }

  /** @type {!Object} */
  var httpRequestParams = {
    method: 'POST',
    url: path,
    json: true,
            params: queryParameters,
    headers: headerParams
  };

  if (opt_extraHttpRequestParams) {
    httpRequestParams = angular.extend(httpRequestParams, opt_extraHttpRequestParams);
  }

  return (/** @type {?} */ (this.http_))(httpRequestParams);
}

/**
 * 
 * 
 * @param {!boolean=} opt_post 
 * @param {!boolean=} opt_apply 
 * @param {!boolean=} opt_delete 
 * @param {!string=} opt_action 
 * @param {!string=} opt_location 
 * @param {!Array<!string>=} opt_propertylist 
 * @param {!number=} opt_slingMaxCalls 
 * @param {!number=} opt_slingMaxInclusions 
 * @param {!boolean=} opt_slingTraceAllow 
 * @param {!number=} opt_slingMaxRecordRequests 
 * @param {!Array<!string>=} opt_slingStorePatternRequests 
 * @param {!string=} opt_slingServerinfo 
 * @param {!Array<!string>=} opt_slingAdditionalResponseHeaders 
 * @param {!angular.$http.Config=} opt_extraHttpRequestParams Extra HTTP parameters to send.
 * @return {!angular.$q.Promise<!API.Client.orgApacheSlingEngineImplSlingMainServletInfo>}
 */
API.Client.ConfigmgrApi.prototype.orgApacheSlingEngineImplSlingMainServlet = function(opt_post, opt_apply, opt_delete, opt_action, opt_location, opt_propertylist, opt_slingMaxCalls, opt_slingMaxInclusions, opt_slingTraceAllow, opt_slingMaxRecordRequests, opt_slingStorePatternRequests, opt_slingServerinfo, opt_slingAdditionalResponseHeaders, opt_extraHttpRequestParams) {
  /** @const {string} */
  var path = this.basePath_ + '/system/console/configMgr/org.apache.sling.engine.impl.SlingMainServlet';

  /** @type {!Object} */
  var queryParameters = {};

  /** @type {!Object} */
  var headerParams = angular.extend({}, this.defaultHeaders_);
  if (opt_post !== undefined) {
    queryParameters['post'] = opt_post;
  }

  if (opt_apply !== undefined) {
    queryParameters['apply'] = opt_apply;
  }

  if (opt_delete !== undefined) {
    queryParameters['delete'] = opt_delete;
  }

  if (opt_action !== undefined) {
    queryParameters['action'] = opt_action;
  }

  if (opt_location !== undefined) {
    queryParameters['$location'] = opt_location;
  }

  if (opt_propertylist !== undefined) {
    queryParameters['propertylist'] = opt_propertylist;
  }

  if (opt_slingMaxCalls !== undefined) {
    queryParameters['sling.max.calls'] = opt_slingMaxCalls;
  }

  if (opt_slingMaxInclusions !== undefined) {
    queryParameters['sling.max.inclusions'] = opt_slingMaxInclusions;
  }

  if (opt_slingTraceAllow !== undefined) {
    queryParameters['sling.trace.allow'] = opt_slingTraceAllow;
  }

  if (opt_slingMaxRecordRequests !== undefined) {
    queryParameters['sling.max.record.requests'] = opt_slingMaxRecordRequests;
  }

  if (opt_slingStorePatternRequests !== undefined) {
    queryParameters['sling.store.pattern.requests'] = opt_slingStorePatternRequests;
  }

  if (opt_slingServerinfo !== undefined) {
    queryParameters['sling.serverinfo'] = opt_slingServerinfo;
  }

  if (opt_slingAdditionalResponseHeaders !== undefined) {
    queryParameters['sling.additional.response.headers'] = opt_slingAdditionalResponseHeaders;
  }

  /** @type {!Object} */
  var httpRequestParams = {
    method: 'POST',
    url: path,
    json: true,
            params: queryParameters,
    headers: headerParams
  };

  if (opt_extraHttpRequestParams) {
    httpRequestParams = angular.extend(httpRequestParams, opt_extraHttpRequestParams);
  }

  return (/** @type {?} */ (this.http_))(httpRequestParams);
}

/**
 * 
 * 
 * @param {!boolean=} opt_post 
 * @param {!boolean=} opt_apply 
 * @param {!boolean=} opt_delete 
 * @param {!string=} opt_action 
 * @param {!string=} opt_location 
 * @param {!Array<!string>=} opt_propertylist 
 * @param {!string=} opt_slingDefaultParameterEncoding 
 * @param {!number=} opt_slingDefaultMaxParameters 
 * @param {!string=} opt_fileLocation 
 * @param {!number=} opt_fileThreshold 
 * @param {!number=} opt_fileMax 
 * @param {!number=} opt_requestMax 
 * @param {!boolean=} opt_slingDefaultParameterCheckForAdditionalContainerParameters 
 * @param {!angular.$http.Config=} opt_extraHttpRequestParams Extra HTTP parameters to send.
 * @return {!angular.$q.Promise<!API.Client.orgApacheSlingEngineParametersInfo>}
 */
API.Client.ConfigmgrApi.prototype.orgApacheSlingEngineParameters = function(opt_post, opt_apply, opt_delete, opt_action, opt_location, opt_propertylist, opt_slingDefaultParameterEncoding, opt_slingDefaultMaxParameters, opt_fileLocation, opt_fileThreshold, opt_fileMax, opt_requestMax, opt_slingDefaultParameterCheckForAdditionalContainerParameters, opt_extraHttpRequestParams) {
  /** @const {string} */
  var path = this.basePath_ + '/system/console/configMgr/org.apache.sling.engine.parameters';

  /** @type {!Object} */
  var queryParameters = {};

  /** @type {!Object} */
  var headerParams = angular.extend({}, this.defaultHeaders_);
  if (opt_post !== undefined) {
    queryParameters['post'] = opt_post;
  }

  if (opt_apply !== undefined) {
    queryParameters['apply'] = opt_apply;
  }

  if (opt_delete !== undefined) {
    queryParameters['delete'] = opt_delete;
  }

  if (opt_action !== undefined) {
    queryParameters['action'] = opt_action;
  }

  if (opt_location !== undefined) {
    queryParameters['$location'] = opt_location;
  }

  if (opt_propertylist !== undefined) {
    queryParameters['propertylist'] = opt_propertylist;
  }

  if (opt_slingDefaultParameterEncoding !== undefined) {
    queryParameters['sling.default.parameter.encoding'] = opt_slingDefaultParameterEncoding;
  }

  if (opt_slingDefaultMaxParameters !== undefined) {
    queryParameters['sling.default.max.parameters'] = opt_slingDefaultMaxParameters;
  }

  if (opt_fileLocation !== undefined) {
    queryParameters['file.location'] = opt_fileLocation;
  }

  if (opt_fileThreshold !== undefined) {
    queryParameters['file.threshold'] = opt_fileThreshold;
  }

  if (opt_fileMax !== undefined) {
    queryParameters['file.max'] = opt_fileMax;
  }

  if (opt_requestMax !== undefined) {
    queryParameters['request.max'] = opt_requestMax;
  }

  if (opt_slingDefaultParameterCheckForAdditionalContainerParameters !== undefined) {
    queryParameters['sling.default.parameter.checkForAdditionalContainerParameters'] = opt_slingDefaultParameterCheckForAdditionalContainerParameters;
  }

  /** @type {!Object} */
  var httpRequestParams = {
    method: 'POST',
    url: path,
    json: true,
            params: queryParameters,
    headers: headerParams
  };

  if (opt_extraHttpRequestParams) {
    httpRequestParams = angular.extend(httpRequestParams, opt_extraHttpRequestParams);
  }

  return (/** @type {?} */ (this.http_))(httpRequestParams);
}

/**
 * 
 * 
 * @param {!boolean=} opt_post 
 * @param {!boolean=} opt_apply 
 * @param {!boolean=} opt_delete 
 * @param {!string=} opt_action 
 * @param {!string=} opt_location 
 * @param {!Array<!string>=} opt_propertylist 
 * @param {!number=} opt_minPoolSize 
 * @param {!angular.$http.Config=} opt_extraHttpRequestParams Extra HTTP parameters to send.
 * @return {!angular.$q.Promise<!API.Client.orgApacheSlingEventImplEventingThreadPoolInfo>}
 */
API.Client.ConfigmgrApi.prototype.orgApacheSlingEventImplEventingThreadPool = function(opt_post, opt_apply, opt_delete, opt_action, opt_location, opt_propertylist, opt_minPoolSize, opt_extraHttpRequestParams) {
  /** @const {string} */
  var path = this.basePath_ + '/system/console/configMgr/org.apache.sling.event.impl.EventingThreadPool';

  /** @type {!Object} */
  var queryParameters = {};

  /** @type {!Object} */
  var headerParams = angular.extend({}, this.defaultHeaders_);
  if (opt_post !== undefined) {
    queryParameters['post'] = opt_post;
  }

  if (opt_apply !== undefined) {
    queryParameters['apply'] = opt_apply;
  }

  if (opt_delete !== undefined) {
    queryParameters['delete'] = opt_delete;
  }

  if (opt_action !== undefined) {
    queryParameters['action'] = opt_action;
  }

  if (opt_location !== undefined) {
    queryParameters['$location'] = opt_location;
  }

  if (opt_propertylist !== undefined) {
    queryParameters['propertylist'] = opt_propertylist;
  }

  if (opt_minPoolSize !== undefined) {
    queryParameters['minPoolSize'] = opt_minPoolSize;
  }

  /** @type {!Object} */
  var httpRequestParams = {
    method: 'POST',
    url: path,
    json: true,
            params: queryParameters,
    headers: headerParams
  };

  if (opt_extraHttpRequestParams) {
    httpRequestParams = angular.extend(httpRequestParams, opt_extraHttpRequestParams);
  }

  return (/** @type {?} */ (this.http_))(httpRequestParams);
}

/**
 * 
 * 
 * @param {!boolean=} opt_post 
 * @param {!boolean=} opt_apply 
 * @param {!boolean=} opt_delete 
 * @param {!string=} opt_action 
 * @param {!string=} opt_location 
 * @param {!Array<!string>=} opt_propertylist 
 * @param {!string=} opt_queuePriority 
 * @param {!number=} opt_queueRetries 
 * @param {!number=} opt_queueRetrydelay 
 * @param {!number=} opt_queueMaxparallel 
 * @param {!angular.$http.Config=} opt_extraHttpRequestParams Extra HTTP parameters to send.
 * @return {!angular.$q.Promise<!API.Client.orgApacheSlingEventImplJobsDefaultJobManagerInfo>}
 */
API.Client.ConfigmgrApi.prototype.orgApacheSlingEventImplJobsDefaultJobManager = function(opt_post, opt_apply, opt_delete, opt_action, opt_location, opt_propertylist, opt_queuePriority, opt_queueRetries, opt_queueRetrydelay, opt_queueMaxparallel, opt_extraHttpRequestParams) {
  /** @const {string} */
  var path = this.basePath_ + '/system/console/configMgr/org.apache.sling.event.impl.jobs.DefaultJobManager';

  /** @type {!Object} */
  var queryParameters = {};

  /** @type {!Object} */
  var headerParams = angular.extend({}, this.defaultHeaders_);
  if (opt_post !== undefined) {
    queryParameters['post'] = opt_post;
  }

  if (opt_apply !== undefined) {
    queryParameters['apply'] = opt_apply;
  }

  if (opt_delete !== undefined) {
    queryParameters['delete'] = opt_delete;
  }

  if (opt_action !== undefined) {
    queryParameters['action'] = opt_action;
  }

  if (opt_location !== undefined) {
    queryParameters['$location'] = opt_location;
  }

  if (opt_propertylist !== undefined) {
    queryParameters['propertylist'] = opt_propertylist;
  }

  if (opt_queuePriority !== undefined) {
    queryParameters['queue.priority'] = opt_queuePriority;
  }

  if (opt_queueRetries !== undefined) {
    queryParameters['queue.retries'] = opt_queueRetries;
  }

  if (opt_queueRetrydelay !== undefined) {
    queryParameters['queue.retrydelay'] = opt_queueRetrydelay;
  }

  if (opt_queueMaxparallel !== undefined) {
    queryParameters['queue.maxparallel'] = opt_queueMaxparallel;
  }

  /** @type {!Object} */
  var httpRequestParams = {
    method: 'POST',
    url: path,
    json: true,
            params: queryParameters,
    headers: headerParams
  };

  if (opt_extraHttpRequestParams) {
    httpRequestParams = angular.extend(httpRequestParams, opt_extraHttpRequestParams);
  }

  return (/** @type {?} */ (this.http_))(httpRequestParams);
}

/**
 * 
 * 
 * @param {!boolean=} opt_post 
 * @param {!boolean=} opt_apply 
 * @param {!boolean=} opt_delete 
 * @param {!string=} opt_action 
 * @param {!string=} opt_location 
 * @param {!Array<!string>=} opt_propertylist 
 * @param {!boolean=} opt_jobConsumermanagerDisableDistribution 
 * @param {!number=} opt_startupDelay 
 * @param {!number=} opt_cleanupPeriod 
 * @param {!angular.$http.Config=} opt_extraHttpRequestParams Extra HTTP parameters to send.
 * @return {!angular.$q.Promise<!API.Client.orgApacheSlingEventImplJobsJcrPersistenceHandlerInfo>}
 */
API.Client.ConfigmgrApi.prototype.orgApacheSlingEventImplJobsJcrPersistenceHandler = function(opt_post, opt_apply, opt_delete, opt_action, opt_location, opt_propertylist, opt_jobConsumermanagerDisableDistribution, opt_startupDelay, opt_cleanupPeriod, opt_extraHttpRequestParams) {
  /** @const {string} */
  var path = this.basePath_ + '/system/console/configMgr/org.apache.sling.event.impl.jobs.jcr.PersistenceHandler';

  /** @type {!Object} */
  var queryParameters = {};

  /** @type {!Object} */
  var headerParams = angular.extend({}, this.defaultHeaders_);
  if (opt_post !== undefined) {
    queryParameters['post'] = opt_post;
  }

  if (opt_apply !== undefined) {
    queryParameters['apply'] = opt_apply;
  }

  if (opt_delete !== undefined) {
    queryParameters['delete'] = opt_delete;
  }

  if (opt_action !== undefined) {
    queryParameters['action'] = opt_action;
  }

  if (opt_location !== undefined) {
    queryParameters['$location'] = opt_location;
  }

  if (opt_propertylist !== undefined) {
    queryParameters['propertylist'] = opt_propertylist;
  }

  if (opt_jobConsumermanagerDisableDistribution !== undefined) {
    queryParameters['job.consumermanager.disableDistribution'] = opt_jobConsumermanagerDisableDistribution;
  }

  if (opt_startupDelay !== undefined) {
    queryParameters['startup.delay'] = opt_startupDelay;
  }

  if (opt_cleanupPeriod !== undefined) {
    queryParameters['cleanup.period'] = opt_cleanupPeriod;
  }

  /** @type {!Object} */
  var httpRequestParams = {
    method: 'POST',
    url: path,
    json: true,
            params: queryParameters,
    headers: headerParams
  };

  if (opt_extraHttpRequestParams) {
    httpRequestParams = angular.extend(httpRequestParams, opt_extraHttpRequestParams);
  }

  return (/** @type {?} */ (this.http_))(httpRequestParams);
}

/**
 * 
 * 
 * @param {!boolean=} opt_post 
 * @param {!boolean=} opt_apply 
 * @param {!boolean=} opt_delete 
 * @param {!string=} opt_action 
 * @param {!string=} opt_location 
 * @param {!Array<!string>=} opt_propertylist 
 * @param {!boolean=} opt_orgApacheSlingInstallerConfigurationPersist 
 * @param {!Array<!string>=} opt_jobConsumermanagerWhitelist 
 * @param {!Array<!string>=} opt_jobConsumermanagerBlacklist 
 * @param {!angular.$http.Config=} opt_extraHttpRequestParams Extra HTTP parameters to send.
 * @return {!angular.$q.Promise<!API.Client.orgApacheSlingEventImplJobsJobConsumerManagerInfo>}
 */
API.Client.ConfigmgrApi.prototype.orgApacheSlingEventImplJobsJobConsumerManager = function(opt_post, opt_apply, opt_delete, opt_action, opt_location, opt_propertylist, opt_orgApacheSlingInstallerConfigurationPersist, opt_jobConsumermanagerWhitelist, opt_jobConsumermanagerBlacklist, opt_extraHttpRequestParams) {
  /** @const {string} */
  var path = this.basePath_ + '/system/console/configMgr/org.apache.sling.event.impl.jobs.JobConsumerManager';

  /** @type {!Object} */
  var queryParameters = {};

  /** @type {!Object} */
  var headerParams = angular.extend({}, this.defaultHeaders_);
  if (opt_post !== undefined) {
    queryParameters['post'] = opt_post;
  }

  if (opt_apply !== undefined) {
    queryParameters['apply'] = opt_apply;
  }

  if (opt_delete !== undefined) {
    queryParameters['delete'] = opt_delete;
  }

  if (opt_action !== undefined) {
    queryParameters['action'] = opt_action;
  }

  if (opt_location !== undefined) {
    queryParameters['$location'] = opt_location;
  }

  if (opt_propertylist !== undefined) {
    queryParameters['propertylist'] = opt_propertylist;
  }

  if (opt_orgApacheSlingInstallerConfigurationPersist !== undefined) {
    queryParameters['org.apache.sling.installer.configuration.persist'] = opt_orgApacheSlingInstallerConfigurationPersist;
  }

  if (opt_jobConsumermanagerWhitelist !== undefined) {
    queryParameters['job.consumermanager.whitelist'] = opt_jobConsumermanagerWhitelist;
  }

  if (opt_jobConsumermanagerBlacklist !== undefined) {
    queryParameters['job.consumermanager.blacklist'] = opt_jobConsumermanagerBlacklist;
  }

  /** @type {!Object} */
  var httpRequestParams = {
    method: 'POST',
    url: path,
    json: true,
            params: queryParameters,
    headers: headerParams
  };

  if (opt_extraHttpRequestParams) {
    httpRequestParams = angular.extend(httpRequestParams, opt_extraHttpRequestParams);
  }

  return (/** @type {?} */ (this.http_))(httpRequestParams);
}

/**
 * 
 * 
 * @param {!boolean=} opt_post 
 * @param {!boolean=} opt_apply 
 * @param {!boolean=} opt_delete 
 * @param {!string=} opt_action 
 * @param {!string=} opt_location 
 * @param {!Array<!string>=} opt_propertylist 
 * @param {!string=} opt_queueName 
 * @param {!Array<!string>=} opt_queueTopics 
 * @param {!string=} opt_queueType 
 * @param {!string=} opt_queuePriority 
 * @param {!number=} opt_queueRetries 
 * @param {!number=} opt_queueRetrydelay 
 * @param {!number=} opt_queueMaxparallel 
 * @param {!boolean=} opt_queueKeepJobs 
 * @param {!boolean=} opt_queuePreferRunOnCreationInstance 
 * @param {!number=} opt_queueThreadPoolSize 
 * @param {!number=} opt_serviceRanking 
 * @param {!angular.$http.Config=} opt_extraHttpRequestParams Extra HTTP parameters to send.
 * @return {!angular.$q.Promise<!API.Client.orgApacheSlingEventJobsQueueConfigurationInfo>}
 */
API.Client.ConfigmgrApi.prototype.orgApacheSlingEventJobsQueueConfiguration = function(opt_post, opt_apply, opt_delete, opt_action, opt_location, opt_propertylist, opt_queueName, opt_queueTopics, opt_queueType, opt_queuePriority, opt_queueRetries, opt_queueRetrydelay, opt_queueMaxparallel, opt_queueKeepJobs, opt_queuePreferRunOnCreationInstance, opt_queueThreadPoolSize, opt_serviceRanking, opt_extraHttpRequestParams) {
  /** @const {string} */
  var path = this.basePath_ + '/system/console/configMgr/org.apache.sling.event.jobs.QueueConfiguration';

  /** @type {!Object} */
  var queryParameters = {};

  /** @type {!Object} */
  var headerParams = angular.extend({}, this.defaultHeaders_);
  if (opt_post !== undefined) {
    queryParameters['post'] = opt_post;
  }

  if (opt_apply !== undefined) {
    queryParameters['apply'] = opt_apply;
  }

  if (opt_delete !== undefined) {
    queryParameters['delete'] = opt_delete;
  }

  if (opt_action !== undefined) {
    queryParameters['action'] = opt_action;
  }

  if (opt_location !== undefined) {
    queryParameters['$location'] = opt_location;
  }

  if (opt_propertylist !== undefined) {
    queryParameters['propertylist'] = opt_propertylist;
  }

  if (opt_queueName !== undefined) {
    queryParameters['queue.name'] = opt_queueName;
  }

  if (opt_queueTopics !== undefined) {
    queryParameters['queue.topics'] = opt_queueTopics;
  }

  if (opt_queueType !== undefined) {
    queryParameters['queue.type'] = opt_queueType;
  }

  if (opt_queuePriority !== undefined) {
    queryParameters['queue.priority'] = opt_queuePriority;
  }

  if (opt_queueRetries !== undefined) {
    queryParameters['queue.retries'] = opt_queueRetries;
  }

  if (opt_queueRetrydelay !== undefined) {
    queryParameters['queue.retrydelay'] = opt_queueRetrydelay;
  }

  if (opt_queueMaxparallel !== undefined) {
    queryParameters['queue.maxparallel'] = opt_queueMaxparallel;
  }

  if (opt_queueKeepJobs !== undefined) {
    queryParameters['queue.keepJobs'] = opt_queueKeepJobs;
  }

  if (opt_queuePreferRunOnCreationInstance !== undefined) {
    queryParameters['queue.preferRunOnCreationInstance'] = opt_queuePreferRunOnCreationInstance;
  }

  if (opt_queueThreadPoolSize !== undefined) {
    queryParameters['queue.threadPoolSize'] = opt_queueThreadPoolSize;
  }

  if (opt_serviceRanking !== undefined) {
    queryParameters['service.ranking'] = opt_serviceRanking;
  }

  /** @type {!Object} */
  var httpRequestParams = {
    method: 'POST',
    url: path,
    json: true,
            params: queryParameters,
    headers: headerParams
  };

  if (opt_extraHttpRequestParams) {
    httpRequestParams = angular.extend(httpRequestParams, opt_extraHttpRequestParams);
  }

  return (/** @type {?} */ (this.http_))(httpRequestParams);
}

/**
 * 
 * 
 * @param {!boolean=} opt_post 
 * @param {!boolean=} opt_apply 
 * @param {!boolean=} opt_delete 
 * @param {!string=} opt_action 
 * @param {!string=} opt_location 
 * @param {!Array<!string>=} opt_propertylist 
 * @param {!Array<!string>=} opt_users 
 * @param {!Array<!string>=} opt_groups 
 * @param {!angular.$http.Config=} opt_extraHttpRequestParams Extra HTTP parameters to send.
 * @return {!angular.$q.Promise<!API.Client.orgApacheSlingExtensionsWebconsolesecurityproviderInternalSlingWInfo>}
 */
API.Client.ConfigmgrApi.prototype.orgApacheSlingExtensionsWebconsolesecurityproviderInternalSlingW = function(opt_post, opt_apply, opt_delete, opt_action, opt_location, opt_propertylist, opt_users, opt_groups, opt_extraHttpRequestParams) {
  /** @const {string} */
  var path = this.basePath_ + '/system/console/configMgr/org.apache.sling.extensions.webconsolesecurityprovider.internal.SlingWebConsoleSecurityProvider';

  /** @type {!Object} */
  var queryParameters = {};

  /** @type {!Object} */
  var headerParams = angular.extend({}, this.defaultHeaders_);
  if (opt_post !== undefined) {
    queryParameters['post'] = opt_post;
  }

  if (opt_apply !== undefined) {
    queryParameters['apply'] = opt_apply;
  }

  if (opt_delete !== undefined) {
    queryParameters['delete'] = opt_delete;
  }

  if (opt_action !== undefined) {
    queryParameters['action'] = opt_action;
  }

  if (opt_location !== undefined) {
    queryParameters['$location'] = opt_location;
  }

  if (opt_propertylist !== undefined) {
    queryParameters['propertylist'] = opt_propertylist;
  }

  if (opt_users !== undefined) {
    queryParameters['users'] = opt_users;
  }

  if (opt_groups !== undefined) {
    queryParameters['groups'] = opt_groups;
  }

  /** @type {!Object} */
  var httpRequestParams = {
    method: 'POST',
    url: path,
    json: true,
            params: queryParameters,
    headers: headerParams
  };

  if (opt_extraHttpRequestParams) {
    httpRequestParams = angular.extend(httpRequestParams, opt_extraHttpRequestParams);
  }

  return (/** @type {?} */ (this.http_))(httpRequestParams);
}

/**
 * 
 * 
 * @param {!boolean=} opt_post 
 * @param {!boolean=} opt_apply 
 * @param {!boolean=} opt_delete 
 * @param {!string=} opt_action 
 * @param {!string=} opt_location 
 * @param {!Array<!string>=} opt_propertylist 
 * @param {!string=} opt_name 
 * @param {!string=} opt_description 
 * @param {!boolean=} opt_enabled 
 * @param {!angular.$http.Config=} opt_extraHttpRequestParams Extra HTTP parameters to send.
 * @return {!angular.$q.Promise<!API.Client.orgApacheSlingFeatureflagsFeatureInfo>}
 */
API.Client.ConfigmgrApi.prototype.orgApacheSlingFeatureflagsFeature = function(opt_post, opt_apply, opt_delete, opt_action, opt_location, opt_propertylist, opt_name, opt_description, opt_enabled, opt_extraHttpRequestParams) {
  /** @const {string} */
  var path = this.basePath_ + '/system/console/configMgr/org.apache.sling.featureflags.Feature';

  /** @type {!Object} */
  var queryParameters = {};

  /** @type {!Object} */
  var headerParams = angular.extend({}, this.defaultHeaders_);
  if (opt_post !== undefined) {
    queryParameters['post'] = opt_post;
  }

  if (opt_apply !== undefined) {
    queryParameters['apply'] = opt_apply;
  }

  if (opt_delete !== undefined) {
    queryParameters['delete'] = opt_delete;
  }

  if (opt_action !== undefined) {
    queryParameters['action'] = opt_action;
  }

  if (opt_location !== undefined) {
    queryParameters['$location'] = opt_location;
  }

  if (opt_propertylist !== undefined) {
    queryParameters['propertylist'] = opt_propertylist;
  }

  if (opt_name !== undefined) {
    queryParameters['name'] = opt_name;
  }

  if (opt_description !== undefined) {
    queryParameters['description'] = opt_description;
  }

  if (opt_enabled !== undefined) {
    queryParameters['enabled'] = opt_enabled;
  }

  /** @type {!Object} */
  var httpRequestParams = {
    method: 'POST',
    url: path,
    json: true,
            params: queryParameters,
    headers: headerParams
  };

  if (opt_extraHttpRequestParams) {
    httpRequestParams = angular.extend(httpRequestParams, opt_extraHttpRequestParams);
  }

  return (/** @type {?} */ (this.http_))(httpRequestParams);
}

/**
 * 
 * 
 * @param {!boolean=} opt_post 
 * @param {!boolean=} opt_apply 
 * @param {!boolean=} opt_delete 
 * @param {!string=} opt_action 
 * @param {!string=} opt_location 
 * @param {!Array<!string>=} opt_propertylist 
 * @param {!string=} opt_name 
 * @param {!string=} opt_description 
 * @param {!boolean=} opt_enabled 
 * @param {!angular.$http.Config=} opt_extraHttpRequestParams Extra HTTP parameters to send.
 * @return {!angular.$q.Promise<!API.Client.orgApacheSlingFeatureflagsImplConfiguredFeatureInfo>}
 */
API.Client.ConfigmgrApi.prototype.orgApacheSlingFeatureflagsImplConfiguredFeature = function(opt_post, opt_apply, opt_delete, opt_action, opt_location, opt_propertylist, opt_name, opt_description, opt_enabled, opt_extraHttpRequestParams) {
  /** @const {string} */
  var path = this.basePath_ + '/system/console/configMgr/org.apache.sling.featureflags.impl.ConfiguredFeature';

  /** @type {!Object} */
  var queryParameters = {};

  /** @type {!Object} */
  var headerParams = angular.extend({}, this.defaultHeaders_);
  if (opt_post !== undefined) {
    queryParameters['post'] = opt_post;
  }

  if (opt_apply !== undefined) {
    queryParameters['apply'] = opt_apply;
  }

  if (opt_delete !== undefined) {
    queryParameters['delete'] = opt_delete;
  }

  if (opt_action !== undefined) {
    queryParameters['action'] = opt_action;
  }

  if (opt_location !== undefined) {
    queryParameters['$location'] = opt_location;
  }

  if (opt_propertylist !== undefined) {
    queryParameters['propertylist'] = opt_propertylist;
  }

  if (opt_name !== undefined) {
    queryParameters['name'] = opt_name;
  }

  if (opt_description !== undefined) {
    queryParameters['description'] = opt_description;
  }

  if (opt_enabled !== undefined) {
    queryParameters['enabled'] = opt_enabled;
  }

  /** @type {!Object} */
  var httpRequestParams = {
    method: 'POST',
    url: path,
    json: true,
            params: queryParameters,
    headers: headerParams
  };

  if (opt_extraHttpRequestParams) {
    httpRequestParams = angular.extend(httpRequestParams, opt_extraHttpRequestParams);
  }

  return (/** @type {?} */ (this.http_))(httpRequestParams);
}

/**
 * 
 * 
 * @param {!boolean=} opt_post 
 * @param {!boolean=} opt_apply 
 * @param {!boolean=} opt_delete 
 * @param {!string=} opt_action 
 * @param {!string=} opt_location 
 * @param {!Array<!string>=} opt_propertylist 
 * @param {!string=} opt_orgApacheSlingHapiToolsResourcetype 
 * @param {!string=} opt_orgApacheSlingHapiToolsCollectionresourcetype 
 * @param {!Array<!string>=} opt_orgApacheSlingHapiToolsSearchpaths 
 * @param {!string=} opt_orgApacheSlingHapiToolsExternalurl 
 * @param {!boolean=} opt_orgApacheSlingHapiToolsEnabled 
 * @param {!angular.$http.Config=} opt_extraHttpRequestParams Extra HTTP parameters to send.
 * @return {!angular.$q.Promise<!API.Client.orgApacheSlingHapiImplHApiUtilImplInfo>}
 */
API.Client.ConfigmgrApi.prototype.orgApacheSlingHapiImplHApiUtilImpl = function(opt_post, opt_apply, opt_delete, opt_action, opt_location, opt_propertylist, opt_orgApacheSlingHapiToolsResourcetype, opt_orgApacheSlingHapiToolsCollectionresourcetype, opt_orgApacheSlingHapiToolsSearchpaths, opt_orgApacheSlingHapiToolsExternalurl, opt_orgApacheSlingHapiToolsEnabled, opt_extraHttpRequestParams) {
  /** @const {string} */
  var path = this.basePath_ + '/system/console/configMgr/org.apache.sling.hapi.impl.HApiUtilImpl';

  /** @type {!Object} */
  var queryParameters = {};

  /** @type {!Object} */
  var headerParams = angular.extend({}, this.defaultHeaders_);
  if (opt_post !== undefined) {
    queryParameters['post'] = opt_post;
  }

  if (opt_apply !== undefined) {
    queryParameters['apply'] = opt_apply;
  }

  if (opt_delete !== undefined) {
    queryParameters['delete'] = opt_delete;
  }

  if (opt_action !== undefined) {
    queryParameters['action'] = opt_action;
  }

  if (opt_location !== undefined) {
    queryParameters['$location'] = opt_location;
  }

  if (opt_propertylist !== undefined) {
    queryParameters['propertylist'] = opt_propertylist;
  }

  if (opt_orgApacheSlingHapiToolsResourcetype !== undefined) {
    queryParameters['org.apache.sling.hapi.tools.resourcetype'] = opt_orgApacheSlingHapiToolsResourcetype;
  }

  if (opt_orgApacheSlingHapiToolsCollectionresourcetype !== undefined) {
    queryParameters['org.apache.sling.hapi.tools.collectionresourcetype'] = opt_orgApacheSlingHapiToolsCollectionresourcetype;
  }

  if (opt_orgApacheSlingHapiToolsSearchpaths !== undefined) {
    queryParameters['org.apache.sling.hapi.tools.searchpaths'] = opt_orgApacheSlingHapiToolsSearchpaths;
  }

  if (opt_orgApacheSlingHapiToolsExternalurl !== undefined) {
    queryParameters['org.apache.sling.hapi.tools.externalurl'] = opt_orgApacheSlingHapiToolsExternalurl;
  }

  if (opt_orgApacheSlingHapiToolsEnabled !== undefined) {
    queryParameters['org.apache.sling.hapi.tools.enabled'] = opt_orgApacheSlingHapiToolsEnabled;
  }

  /** @type {!Object} */
  var httpRequestParams = {
    method: 'POST',
    url: path,
    json: true,
            params: queryParameters,
    headers: headerParams
  };

  if (opt_extraHttpRequestParams) {
    httpRequestParams = angular.extend(httpRequestParams, opt_extraHttpRequestParams);
  }

  return (/** @type {?} */ (this.http_))(httpRequestParams);
}

/**
 * 
 * 
 * @param {!boolean=} opt_post 
 * @param {!boolean=} opt_apply 
 * @param {!boolean=} opt_delete 
 * @param {!string=} opt_action 
 * @param {!string=} opt_location 
 * @param {!Array<!string>=} opt_propertylist 
 * @param {!string=} opt_hcName 
 * @param {!Array<!string>=} opt_hcTags 
 * @param {!string=} opt_hcMbeanName 
 * @param {!Array<!string>=} opt_filterTags 
 * @param {!boolean=} opt_filterCombineTagsWithOr 
 * @param {!angular.$http.Config=} opt_extraHttpRequestParams Extra HTTP parameters to send.
 * @return {!angular.$q.Promise<!API.Client.orgApacheSlingHcCoreImplCompositeHealthCheckInfo>}
 */
API.Client.ConfigmgrApi.prototype.orgApacheSlingHcCoreImplCompositeHealthCheck = function(opt_post, opt_apply, opt_delete, opt_action, opt_location, opt_propertylist, opt_hcName, opt_hcTags, opt_hcMbeanName, opt_filterTags, opt_filterCombineTagsWithOr, opt_extraHttpRequestParams) {
  /** @const {string} */
  var path = this.basePath_ + '/system/console/configMgr/org.apache.sling.hc.core.impl.CompositeHealthCheck';

  /** @type {!Object} */
  var queryParameters = {};

  /** @type {!Object} */
  var headerParams = angular.extend({}, this.defaultHeaders_);
  if (opt_post !== undefined) {
    queryParameters['post'] = opt_post;
  }

  if (opt_apply !== undefined) {
    queryParameters['apply'] = opt_apply;
  }

  if (opt_delete !== undefined) {
    queryParameters['delete'] = opt_delete;
  }

  if (opt_action !== undefined) {
    queryParameters['action'] = opt_action;
  }

  if (opt_location !== undefined) {
    queryParameters['$location'] = opt_location;
  }

  if (opt_propertylist !== undefined) {
    queryParameters['propertylist'] = opt_propertylist;
  }

  if (opt_hcName !== undefined) {
    queryParameters['hc.name'] = opt_hcName;
  }

  if (opt_hcTags !== undefined) {
    queryParameters['hc.tags'] = opt_hcTags;
  }

  if (opt_hcMbeanName !== undefined) {
    queryParameters['hc.mbean.name'] = opt_hcMbeanName;
  }

  if (opt_filterTags !== undefined) {
    queryParameters['filter.tags'] = opt_filterTags;
  }

  if (opt_filterCombineTagsWithOr !== undefined) {
    queryParameters['filter.combineTagsWithOr'] = opt_filterCombineTagsWithOr;
  }

  /** @type {!Object} */
  var httpRequestParams = {
    method: 'POST',
    url: path,
    json: true,
            params: queryParameters,
    headers: headerParams
  };

  if (opt_extraHttpRequestParams) {
    httpRequestParams = angular.extend(httpRequestParams, opt_extraHttpRequestParams);
  }

  return (/** @type {?} */ (this.http_))(httpRequestParams);
}

/**
 * 
 * 
 * @param {!boolean=} opt_post 
 * @param {!boolean=} opt_apply 
 * @param {!boolean=} opt_delete 
 * @param {!string=} opt_action 
 * @param {!string=} opt_location 
 * @param {!Array<!string>=} opt_propertylist 
 * @param {!number=} opt_timeoutInMs 
 * @param {!number=} opt_longRunningFutureThresholdForCriticalMs 
 * @param {!number=} opt_resultCacheTtlInMs 
 * @param {!angular.$http.Config=} opt_extraHttpRequestParams Extra HTTP parameters to send.
 * @return {!angular.$q.Promise<!API.Client.orgApacheSlingHcCoreImplExecutorHealthCheckExecutorImplInfo>}
 */
API.Client.ConfigmgrApi.prototype.orgApacheSlingHcCoreImplExecutorHealthCheckExecutorImpl = function(opt_post, opt_apply, opt_delete, opt_action, opt_location, opt_propertylist, opt_timeoutInMs, opt_longRunningFutureThresholdForCriticalMs, opt_resultCacheTtlInMs, opt_extraHttpRequestParams) {
  /** @const {string} */
  var path = this.basePath_ + '/system/console/configMgr/org.apache.sling.hc.core.impl.executor.HealthCheckExecutorImpl';

  /** @type {!Object} */
  var queryParameters = {};

  /** @type {!Object} */
  var headerParams = angular.extend({}, this.defaultHeaders_);
  if (opt_post !== undefined) {
    queryParameters['post'] = opt_post;
  }

  if (opt_apply !== undefined) {
    queryParameters['apply'] = opt_apply;
  }

  if (opt_delete !== undefined) {
    queryParameters['delete'] = opt_delete;
  }

  if (opt_action !== undefined) {
    queryParameters['action'] = opt_action;
  }

  if (opt_location !== undefined) {
    queryParameters['$location'] = opt_location;
  }

  if (opt_propertylist !== undefined) {
    queryParameters['propertylist'] = opt_propertylist;
  }

  if (opt_timeoutInMs !== undefined) {
    queryParameters['timeoutInMs'] = opt_timeoutInMs;
  }

  if (opt_longRunningFutureThresholdForCriticalMs !== undefined) {
    queryParameters['longRunningFutureThresholdForCriticalMs'] = opt_longRunningFutureThresholdForCriticalMs;
  }

  if (opt_resultCacheTtlInMs !== undefined) {
    queryParameters['resultCacheTtlInMs'] = opt_resultCacheTtlInMs;
  }

  /** @type {!Object} */
  var httpRequestParams = {
    method: 'POST',
    url: path,
    json: true,
            params: queryParameters,
    headers: headerParams
  };

  if (opt_extraHttpRequestParams) {
    httpRequestParams = angular.extend(httpRequestParams, opt_extraHttpRequestParams);
  }

  return (/** @type {?} */ (this.http_))(httpRequestParams);
}

/**
 * 
 * 
 * @param {!boolean=} opt_post 
 * @param {!boolean=} opt_apply 
 * @param {!boolean=} opt_delete 
 * @param {!string=} opt_action 
 * @param {!string=} opt_location 
 * @param {!Array<!string>=} opt_propertylist 
 * @param {!string=} opt_hcName 
 * @param {!Array<!string>=} opt_hcTags 
 * @param {!string=} opt_hcMbeanName 
 * @param {!string=} opt_mbeanName 
 * @param {!string=} opt_attributeName 
 * @param {!string=} opt_attributeValueConstraint 
 * @param {!angular.$http.Config=} opt_extraHttpRequestParams Extra HTTP parameters to send.
 * @return {!angular.$q.Promise<!API.Client.orgApacheSlingHcCoreImplJmxAttributeHealthCheckInfo>}
 */
API.Client.ConfigmgrApi.prototype.orgApacheSlingHcCoreImplJmxAttributeHealthCheck = function(opt_post, opt_apply, opt_delete, opt_action, opt_location, opt_propertylist, opt_hcName, opt_hcTags, opt_hcMbeanName, opt_mbeanName, opt_attributeName, opt_attributeValueConstraint, opt_extraHttpRequestParams) {
  /** @const {string} */
  var path = this.basePath_ + '/system/console/configMgr/org.apache.sling.hc.core.impl.JmxAttributeHealthCheck';

  /** @type {!Object} */
  var queryParameters = {};

  /** @type {!Object} */
  var headerParams = angular.extend({}, this.defaultHeaders_);
  if (opt_post !== undefined) {
    queryParameters['post'] = opt_post;
  }

  if (opt_apply !== undefined) {
    queryParameters['apply'] = opt_apply;
  }

  if (opt_delete !== undefined) {
    queryParameters['delete'] = opt_delete;
  }

  if (opt_action !== undefined) {
    queryParameters['action'] = opt_action;
  }

  if (opt_location !== undefined) {
    queryParameters['$location'] = opt_location;
  }

  if (opt_propertylist !== undefined) {
    queryParameters['propertylist'] = opt_propertylist;
  }

  if (opt_hcName !== undefined) {
    queryParameters['hc.name'] = opt_hcName;
  }

  if (opt_hcTags !== undefined) {
    queryParameters['hc.tags'] = opt_hcTags;
  }

  if (opt_hcMbeanName !== undefined) {
    queryParameters['hc.mbean.name'] = opt_hcMbeanName;
  }

  if (opt_mbeanName !== undefined) {
    queryParameters['mbean.name'] = opt_mbeanName;
  }

  if (opt_attributeName !== undefined) {
    queryParameters['attribute.name'] = opt_attributeName;
  }

  if (opt_attributeValueConstraint !== undefined) {
    queryParameters['attribute.value.constraint'] = opt_attributeValueConstraint;
  }

  /** @type {!Object} */
  var httpRequestParams = {
    method: 'POST',
    url: path,
    json: true,
            params: queryParameters,
    headers: headerParams
  };

  if (opt_extraHttpRequestParams) {
    httpRequestParams = angular.extend(httpRequestParams, opt_extraHttpRequestParams);
  }

  return (/** @type {?} */ (this.http_))(httpRequestParams);
}

/**
 * 
 * 
 * @param {!boolean=} opt_post 
 * @param {!boolean=} opt_apply 
 * @param {!boolean=} opt_delete 
 * @param {!string=} opt_action 
 * @param {!string=} opt_location 
 * @param {!Array<!string>=} opt_propertylist 
 * @param {!string=} opt_hcName 
 * @param {!Array<!string>=} opt_hcTags 
 * @param {!string=} opt_hcMbeanName 
 * @param {!string=} opt_expression 
 * @param {!string=} opt_languageExtension 
 * @param {!angular.$http.Config=} opt_extraHttpRequestParams Extra HTTP parameters to send.
 * @return {!angular.$q.Promise<!API.Client.orgApacheSlingHcCoreImplScriptableHealthCheckInfo>}
 */
API.Client.ConfigmgrApi.prototype.orgApacheSlingHcCoreImplScriptableHealthCheck = function(opt_post, opt_apply, opt_delete, opt_action, opt_location, opt_propertylist, opt_hcName, opt_hcTags, opt_hcMbeanName, opt_expression, opt_languageExtension, opt_extraHttpRequestParams) {
  /** @const {string} */
  var path = this.basePath_ + '/system/console/configMgr/org.apache.sling.hc.core.impl.ScriptableHealthCheck';

  /** @type {!Object} */
  var queryParameters = {};

  /** @type {!Object} */
  var headerParams = angular.extend({}, this.defaultHeaders_);
  if (opt_post !== undefined) {
    queryParameters['post'] = opt_post;
  }

  if (opt_apply !== undefined) {
    queryParameters['apply'] = opt_apply;
  }

  if (opt_delete !== undefined) {
    queryParameters['delete'] = opt_delete;
  }

  if (opt_action !== undefined) {
    queryParameters['action'] = opt_action;
  }

  if (opt_location !== undefined) {
    queryParameters['$location'] = opt_location;
  }

  if (opt_propertylist !== undefined) {
    queryParameters['propertylist'] = opt_propertylist;
  }

  if (opt_hcName !== undefined) {
    queryParameters['hc.name'] = opt_hcName;
  }

  if (opt_hcTags !== undefined) {
    queryParameters['hc.tags'] = opt_hcTags;
  }

  if (opt_hcMbeanName !== undefined) {
    queryParameters['hc.mbean.name'] = opt_hcMbeanName;
  }

  if (opt_expression !== undefined) {
    queryParameters['expression'] = opt_expression;
  }

  if (opt_languageExtension !== undefined) {
    queryParameters['language.extension'] = opt_languageExtension;
  }

  /** @type {!Object} */
  var httpRequestParams = {
    method: 'POST',
    url: path,
    json: true,
            params: queryParameters,
    headers: headerParams
  };

  if (opt_extraHttpRequestParams) {
    httpRequestParams = angular.extend(httpRequestParams, opt_extraHttpRequestParams);
  }

  return (/** @type {?} */ (this.http_))(httpRequestParams);
}

/**
 * 
 * 
 * @param {!boolean=} opt_post 
 * @param {!boolean=} opt_apply 
 * @param {!boolean=} opt_delete 
 * @param {!string=} opt_action 
 * @param {!string=} opt_location 
 * @param {!Array<!string>=} opt_propertylist 
 * @param {!string=} opt_servletPath 
 * @param {!boolean=} opt_disabled 
 * @param {!string=} opt_corsAccessControlAllowOrigin 
 * @param {!angular.$http.Config=} opt_extraHttpRequestParams Extra HTTP parameters to send.
 * @return {!angular.$q.Promise<!API.Client.orgApacheSlingHcCoreImplServletHealthCheckExecutorServletInfo>}
 */
API.Client.ConfigmgrApi.prototype.orgApacheSlingHcCoreImplServletHealthCheckExecutorServlet = function(opt_post, opt_apply, opt_delete, opt_action, opt_location, opt_propertylist, opt_servletPath, opt_disabled, opt_corsAccessControlAllowOrigin, opt_extraHttpRequestParams) {
  /** @const {string} */
  var path = this.basePath_ + '/system/console/configMgr/org.apache.sling.hc.core.impl.servlet.HealthCheckExecutorServlet';

  /** @type {!Object} */
  var queryParameters = {};

  /** @type {!Object} */
  var headerParams = angular.extend({}, this.defaultHeaders_);
  if (opt_post !== undefined) {
    queryParameters['post'] = opt_post;
  }

  if (opt_apply !== undefined) {
    queryParameters['apply'] = opt_apply;
  }

  if (opt_delete !== undefined) {
    queryParameters['delete'] = opt_delete;
  }

  if (opt_action !== undefined) {
    queryParameters['action'] = opt_action;
  }

  if (opt_location !== undefined) {
    queryParameters['$location'] = opt_location;
  }

  if (opt_propertylist !== undefined) {
    queryParameters['propertylist'] = opt_propertylist;
  }

  if (opt_servletPath !== undefined) {
    queryParameters['servletPath'] = opt_servletPath;
  }

  if (opt_disabled !== undefined) {
    queryParameters['disabled'] = opt_disabled;
  }

  if (opt_corsAccessControlAllowOrigin !== undefined) {
    queryParameters['cors.accessControlAllowOrigin'] = opt_corsAccessControlAllowOrigin;
  }

  /** @type {!Object} */
  var httpRequestParams = {
    method: 'POST',
    url: path,
    json: true,
            params: queryParameters,
    headers: headerParams
  };

  if (opt_extraHttpRequestParams) {
    httpRequestParams = angular.extend(httpRequestParams, opt_extraHttpRequestParams);
  }

  return (/** @type {?} */ (this.http_))(httpRequestParams);
}

/**
 * 
 * 
 * @param {!boolean=} opt_post 
 * @param {!boolean=} opt_apply 
 * @param {!boolean=} opt_delete 
 * @param {!string=} opt_action 
 * @param {!string=} opt_location 
 * @param {!Array<!string>=} opt_propertylist 
 * @param {!number=} opt_totalWidth 
 * @param {!number=} opt_colWidthName 
 * @param {!number=} opt_colWidthResult 
 * @param {!number=} opt_colWidthTiming 
 * @param {!angular.$http.Config=} opt_extraHttpRequestParams Extra HTTP parameters to send.
 * @return {!angular.$q.Promise<!API.Client.orgApacheSlingHcCoreImplServletResultTxtVerboseSerializerInfo>}
 */
API.Client.ConfigmgrApi.prototype.orgApacheSlingHcCoreImplServletResultTxtVerboseSerializer = function(opt_post, opt_apply, opt_delete, opt_action, opt_location, opt_propertylist, opt_totalWidth, opt_colWidthName, opt_colWidthResult, opt_colWidthTiming, opt_extraHttpRequestParams) {
  /** @const {string} */
  var path = this.basePath_ + '/system/console/configMgr/org.apache.sling.hc.core.impl.servlet.ResultTxtVerboseSerializer';

  /** @type {!Object} */
  var queryParameters = {};

  /** @type {!Object} */
  var headerParams = angular.extend({}, this.defaultHeaders_);
  if (opt_post !== undefined) {
    queryParameters['post'] = opt_post;
  }

  if (opt_apply !== undefined) {
    queryParameters['apply'] = opt_apply;
  }

  if (opt_delete !== undefined) {
    queryParameters['delete'] = opt_delete;
  }

  if (opt_action !== undefined) {
    queryParameters['action'] = opt_action;
  }

  if (opt_location !== undefined) {
    queryParameters['$location'] = opt_location;
  }

  if (opt_propertylist !== undefined) {
    queryParameters['propertylist'] = opt_propertylist;
  }

  if (opt_totalWidth !== undefined) {
    queryParameters['totalWidth'] = opt_totalWidth;
  }

  if (opt_colWidthName !== undefined) {
    queryParameters['colWidthName'] = opt_colWidthName;
  }

  if (opt_colWidthResult !== undefined) {
    queryParameters['colWidthResult'] = opt_colWidthResult;
  }

  if (opt_colWidthTiming !== undefined) {
    queryParameters['colWidthTiming'] = opt_colWidthTiming;
  }

  /** @type {!Object} */
  var httpRequestParams = {
    method: 'POST',
    url: path,
    json: true,
            params: queryParameters,
    headers: headerParams
  };

  if (opt_extraHttpRequestParams) {
    httpRequestParams = angular.extend(httpRequestParams, opt_extraHttpRequestParams);
  }

  return (/** @type {?} */ (this.http_))(httpRequestParams);
}

/**
 * 
 * 
 * @param {!boolean=} opt_post 
 * @param {!boolean=} opt_apply 
 * @param {!boolean=} opt_delete 
 * @param {!string=} opt_action 
 * @param {!string=} opt_location 
 * @param {!Array<!string>=} opt_propertylist 
 * @param {!number=} opt_serviceRanking 
 * @param {!Array<!string>=} opt_slingFilterScope 
 * @param {!angular.$http.Config=} opt_extraHttpRequestParams Extra HTTP parameters to send.
 * @return {!angular.$q.Promise<!API.Client.orgApacheSlingI18nImplI18NFilterInfo>}
 */
API.Client.ConfigmgrApi.prototype.orgApacheSlingI18nImplI18NFilter = function(opt_post, opt_apply, opt_delete, opt_action, opt_location, opt_propertylist, opt_serviceRanking, opt_slingFilterScope, opt_extraHttpRequestParams) {
  /** @const {string} */
  var path = this.basePath_ + '/system/console/configMgr/org.apache.sling.i18n.impl.I18NFilter';

  /** @type {!Object} */
  var queryParameters = {};

  /** @type {!Object} */
  var headerParams = angular.extend({}, this.defaultHeaders_);
  if (opt_post !== undefined) {
    queryParameters['post'] = opt_post;
  }

  if (opt_apply !== undefined) {
    queryParameters['apply'] = opt_apply;
  }

  if (opt_delete !== undefined) {
    queryParameters['delete'] = opt_delete;
  }

  if (opt_action !== undefined) {
    queryParameters['action'] = opt_action;
  }

  if (opt_location !== undefined) {
    queryParameters['$location'] = opt_location;
  }

  if (opt_propertylist !== undefined) {
    queryParameters['propertylist'] = opt_propertylist;
  }

  if (opt_serviceRanking !== undefined) {
    queryParameters['service.ranking'] = opt_serviceRanking;
  }

  if (opt_slingFilterScope !== undefined) {
    queryParameters['sling.filter.scope'] = opt_slingFilterScope;
  }

  /** @type {!Object} */
  var httpRequestParams = {
    method: 'POST',
    url: path,
    json: true,
            params: queryParameters,
    headers: headerParams
  };

  if (opt_extraHttpRequestParams) {
    httpRequestParams = angular.extend(httpRequestParams, opt_extraHttpRequestParams);
  }

  return (/** @type {?} */ (this.http_))(httpRequestParams);
}

/**
 * 
 * 
 * @param {!boolean=} opt_post 
 * @param {!boolean=} opt_apply 
 * @param {!boolean=} opt_delete 
 * @param {!string=} opt_action 
 * @param {!string=} opt_location 
 * @param {!Array<!string>=} opt_propertylist 
 * @param {!string=} opt_localeDefault 
 * @param {!boolean=} opt_preloadBundles 
 * @param {!number=} opt_invalidationDelay 
 * @param {!angular.$http.Config=} opt_extraHttpRequestParams Extra HTTP parameters to send.
 * @return {!angular.$q.Promise<!API.Client.orgApacheSlingI18nImplJcrResourceBundleProviderInfo>}
 */
API.Client.ConfigmgrApi.prototype.orgApacheSlingI18nImplJcrResourceBundleProvider = function(opt_post, opt_apply, opt_delete, opt_action, opt_location, opt_propertylist, opt_localeDefault, opt_preloadBundles, opt_invalidationDelay, opt_extraHttpRequestParams) {
  /** @const {string} */
  var path = this.basePath_ + '/system/console/configMgr/org.apache.sling.i18n.impl.JcrResourceBundleProvider';

  /** @type {!Object} */
  var queryParameters = {};

  /** @type {!Object} */
  var headerParams = angular.extend({}, this.defaultHeaders_);
  if (opt_post !== undefined) {
    queryParameters['post'] = opt_post;
  }

  if (opt_apply !== undefined) {
    queryParameters['apply'] = opt_apply;
  }

  if (opt_delete !== undefined) {
    queryParameters['delete'] = opt_delete;
  }

  if (opt_action !== undefined) {
    queryParameters['action'] = opt_action;
  }

  if (opt_location !== undefined) {
    queryParameters['$location'] = opt_location;
  }

  if (opt_propertylist !== undefined) {
    queryParameters['propertylist'] = opt_propertylist;
  }

  if (opt_localeDefault !== undefined) {
    queryParameters['locale.default'] = opt_localeDefault;
  }

  if (opt_preloadBundles !== undefined) {
    queryParameters['preload.bundles'] = opt_preloadBundles;
  }

  if (opt_invalidationDelay !== undefined) {
    queryParameters['invalidation.delay'] = opt_invalidationDelay;
  }

  /** @type {!Object} */
  var httpRequestParams = {
    method: 'POST',
    url: path,
    json: true,
            params: queryParameters,
    headers: headerParams
  };

  if (opt_extraHttpRequestParams) {
    httpRequestParams = angular.extend(httpRequestParams, opt_extraHttpRequestParams);
  }

  return (/** @type {?} */ (this.http_))(httpRequestParams);
}

/**
 * 
 * 
 * @param {!boolean=} opt_post 
 * @param {!boolean=} opt_apply 
 * @param {!boolean=} opt_delete 
 * @param {!string=} opt_action 
 * @param {!string=} opt_location 
 * @param {!Array<!string>=} opt_propertylist 
 * @param {!Array<!string>=} opt_handlerSchemes 
 * @param {!string=} opt_slingJcrinstallFolderNameRegexp 
 * @param {!number=} opt_slingJcrinstallFolderMaxDepth 
 * @param {!Array<!string>=} opt_slingJcrinstallSearchPath 
 * @param {!string=} opt_slingJcrinstallNewConfigPath 
 * @param {!string=} opt_slingJcrinstallSignalPath 
 * @param {!boolean=} opt_slingJcrinstallEnableWriteback 
 * @param {!angular.$http.Config=} opt_extraHttpRequestParams Extra HTTP parameters to send.
 * @return {!angular.$q.Promise<!API.Client.orgApacheSlingInstallerProviderJcrImplJcrInstallerInfo>}
 */
API.Client.ConfigmgrApi.prototype.orgApacheSlingInstallerProviderJcrImplJcrInstaller = function(opt_post, opt_apply, opt_delete, opt_action, opt_location, opt_propertylist, opt_handlerSchemes, opt_slingJcrinstallFolderNameRegexp, opt_slingJcrinstallFolderMaxDepth, opt_slingJcrinstallSearchPath, opt_slingJcrinstallNewConfigPath, opt_slingJcrinstallSignalPath, opt_slingJcrinstallEnableWriteback, opt_extraHttpRequestParams) {
  /** @const {string} */
  var path = this.basePath_ + '/system/console/configMgr/org.apache.sling.installer.provider.jcr.impl.JcrInstaller';

  /** @type {!Object} */
  var queryParameters = {};

  /** @type {!Object} */
  var headerParams = angular.extend({}, this.defaultHeaders_);
  if (opt_post !== undefined) {
    queryParameters['post'] = opt_post;
  }

  if (opt_apply !== undefined) {
    queryParameters['apply'] = opt_apply;
  }

  if (opt_delete !== undefined) {
    queryParameters['delete'] = opt_delete;
  }

  if (opt_action !== undefined) {
    queryParameters['action'] = opt_action;
  }

  if (opt_location !== undefined) {
    queryParameters['$location'] = opt_location;
  }

  if (opt_propertylist !== undefined) {
    queryParameters['propertylist'] = opt_propertylist;
  }

  if (opt_handlerSchemes !== undefined) {
    queryParameters['handler.schemes'] = opt_handlerSchemes;
  }

  if (opt_slingJcrinstallFolderNameRegexp !== undefined) {
    queryParameters['sling.jcrinstall.folder.name.regexp'] = opt_slingJcrinstallFolderNameRegexp;
  }

  if (opt_slingJcrinstallFolderMaxDepth !== undefined) {
    queryParameters['sling.jcrinstall.folder.max.depth'] = opt_slingJcrinstallFolderMaxDepth;
  }

  if (opt_slingJcrinstallSearchPath !== undefined) {
    queryParameters['sling.jcrinstall.search.path'] = opt_slingJcrinstallSearchPath;
  }

  if (opt_slingJcrinstallNewConfigPath !== undefined) {
    queryParameters['sling.jcrinstall.new.config.path'] = opt_slingJcrinstallNewConfigPath;
  }

  if (opt_slingJcrinstallSignalPath !== undefined) {
    queryParameters['sling.jcrinstall.signal.path'] = opt_slingJcrinstallSignalPath;
  }

  if (opt_slingJcrinstallEnableWriteback !== undefined) {
    queryParameters['sling.jcrinstall.enable.writeback'] = opt_slingJcrinstallEnableWriteback;
  }

  /** @type {!Object} */
  var httpRequestParams = {
    method: 'POST',
    url: path,
    json: true,
            params: queryParameters,
    headers: headerParams
  };

  if (opt_extraHttpRequestParams) {
    httpRequestParams = angular.extend(httpRequestParams, opt_extraHttpRequestParams);
  }

  return (/** @type {?} */ (this.http_))(httpRequestParams);
}

/**
 * 
 * 
 * @param {!boolean=} opt_post 
 * @param {!boolean=} opt_apply 
 * @param {!boolean=} opt_delete 
 * @param {!string=} opt_action 
 * @param {!string=} opt_location 
 * @param {!Array<!string>=} opt_propertylist 
 * @param {!boolean=} opt_whitelistBypass 
 * @param {!string=} opt_whitelistBundlesRegexp 
 * @param {!angular.$http.Config=} opt_extraHttpRequestParams Extra HTTP parameters to send.
 * @return {!angular.$q.Promise<!API.Client.orgApacheSlingJcrBaseInternalLoginAdminWhitelistInfo>}
 */
API.Client.ConfigmgrApi.prototype.orgApacheSlingJcrBaseInternalLoginAdminWhitelist = function(opt_post, opt_apply, opt_delete, opt_action, opt_location, opt_propertylist, opt_whitelistBypass, opt_whitelistBundlesRegexp, opt_extraHttpRequestParams) {
  /** @const {string} */
  var path = this.basePath_ + '/system/console/configMgr/org.apache.sling.jcr.base.internal.LoginAdminWhitelist';

  /** @type {!Object} */
  var queryParameters = {};

  /** @type {!Object} */
  var headerParams = angular.extend({}, this.defaultHeaders_);
  if (opt_post !== undefined) {
    queryParameters['post'] = opt_post;
  }

  if (opt_apply !== undefined) {
    queryParameters['apply'] = opt_apply;
  }

  if (opt_delete !== undefined) {
    queryParameters['delete'] = opt_delete;
  }

  if (opt_action !== undefined) {
    queryParameters['action'] = opt_action;
  }

  if (opt_location !== undefined) {
    queryParameters['$location'] = opt_location;
  }

  if (opt_propertylist !== undefined) {
    queryParameters['propertylist'] = opt_propertylist;
  }

  if (opt_whitelistBypass !== undefined) {
    queryParameters['whitelist.bypass'] = opt_whitelistBypass;
  }

  if (opt_whitelistBundlesRegexp !== undefined) {
    queryParameters['whitelist.bundles.regexp'] = opt_whitelistBundlesRegexp;
  }

  /** @type {!Object} */
  var httpRequestParams = {
    method: 'POST',
    url: path,
    json: true,
            params: queryParameters,
    headers: headerParams
  };

  if (opt_extraHttpRequestParams) {
    httpRequestParams = angular.extend(httpRequestParams, opt_extraHttpRequestParams);
  }

  return (/** @type {?} */ (this.http_))(httpRequestParams);
}

/**
 * 
 * 
 * @param {!boolean=} opt_post 
 * @param {!boolean=} opt_apply 
 * @param {!boolean=} opt_delete 
 * @param {!string=} opt_action 
 * @param {!string=} opt_location 
 * @param {!Array<!string>=} opt_propertylist 
 * @param {!string=} opt_whitelistName 
 * @param {!Array<!string>=} opt_whitelistBundles 
 * @param {!angular.$http.Config=} opt_extraHttpRequestParams Extra HTTP parameters to send.
 * @return {!angular.$q.Promise<!API.Client.orgApacheSlingJcrBaseInternalLoginAdminWhitelistFragmentInfo>}
 */
API.Client.ConfigmgrApi.prototype.orgApacheSlingJcrBaseInternalLoginAdminWhitelistFragment = function(opt_post, opt_apply, opt_delete, opt_action, opt_location, opt_propertylist, opt_whitelistName, opt_whitelistBundles, opt_extraHttpRequestParams) {
  /** @const {string} */
  var path = this.basePath_ + '/system/console/configMgr/org.apache.sling.jcr.base.internal.LoginAdminWhitelist.fragment';

  /** @type {!Object} */
  var queryParameters = {};

  /** @type {!Object} */
  var headerParams = angular.extend({}, this.defaultHeaders_);
  if (opt_post !== undefined) {
    queryParameters['post'] = opt_post;
  }

  if (opt_apply !== undefined) {
    queryParameters['apply'] = opt_apply;
  }

  if (opt_delete !== undefined) {
    queryParameters['delete'] = opt_delete;
  }

  if (opt_action !== undefined) {
    queryParameters['action'] = opt_action;
  }

  if (opt_location !== undefined) {
    queryParameters['$location'] = opt_location;
  }

  if (opt_propertylist !== undefined) {
    queryParameters['propertylist'] = opt_propertylist;
  }

  if (opt_whitelistName !== undefined) {
    queryParameters['whitelist.name'] = opt_whitelistName;
  }

  if (opt_whitelistBundles !== undefined) {
    queryParameters['whitelist.bundles'] = opt_whitelistBundles;
  }

  /** @type {!Object} */
  var httpRequestParams = {
    method: 'POST',
    url: path,
    json: true,
            params: queryParameters,
    headers: headerParams
  };

  if (opt_extraHttpRequestParams) {
    httpRequestParams = angular.extend(httpRequestParams, opt_extraHttpRequestParams);
  }

  return (/** @type {?} */ (this.http_))(httpRequestParams);
}

/**
 * 
 * 
 * @param {!boolean=} opt_post 
 * @param {!boolean=} opt_apply 
 * @param {!boolean=} opt_delete 
 * @param {!string=} opt_action 
 * @param {!string=} opt_location 
 * @param {!Array<!string>=} opt_propertylist 
 * @param {!string=} opt_alias 
 * @param {!boolean=} opt_davCreateAbsoluteUri 
 * @param {!string=} opt_davProtectedhandlers 
 * @param {!angular.$http.Config=} opt_extraHttpRequestParams Extra HTTP parameters to send.
 * @return {!angular.$q.Promise<!API.Client.orgApacheSlingJcrDavexImplServletsSlingDavExServletInfo>}
 */
API.Client.ConfigmgrApi.prototype.orgApacheSlingJcrDavexImplServletsSlingDavExServlet = function(opt_post, opt_apply, opt_delete, opt_action, opt_location, opt_propertylist, opt_alias, opt_davCreateAbsoluteUri, opt_davProtectedhandlers, opt_extraHttpRequestParams) {
  /** @const {string} */
  var path = this.basePath_ + '/system/console/configMgr/org.apache.sling.jcr.davex.impl.servlets.SlingDavExServlet';

  /** @type {!Object} */
  var queryParameters = {};

  /** @type {!Object} */
  var headerParams = angular.extend({}, this.defaultHeaders_);
  if (opt_post !== undefined) {
    queryParameters['post'] = opt_post;
  }

  if (opt_apply !== undefined) {
    queryParameters['apply'] = opt_apply;
  }

  if (opt_delete !== undefined) {
    queryParameters['delete'] = opt_delete;
  }

  if (opt_action !== undefined) {
    queryParameters['action'] = opt_action;
  }

  if (opt_location !== undefined) {
    queryParameters['$location'] = opt_location;
  }

  if (opt_propertylist !== undefined) {
    queryParameters['propertylist'] = opt_propertylist;
  }

  if (opt_alias !== undefined) {
    queryParameters['alias'] = opt_alias;
  }

  if (opt_davCreateAbsoluteUri !== undefined) {
    queryParameters['dav.create-absolute-uri'] = opt_davCreateAbsoluteUri;
  }

  if (opt_davProtectedhandlers !== undefined) {
    queryParameters['dav.protectedhandlers'] = opt_davProtectedhandlers;
  }

  /** @type {!Object} */
  var httpRequestParams = {
    method: 'POST',
    url: path,
    json: true,
            params: queryParameters,
    headers: headerParams
  };

  if (opt_extraHttpRequestParams) {
    httpRequestParams = angular.extend(httpRequestParams, opt_extraHttpRequestParams);
  }

  return (/** @type {?} */ (this.http_))(httpRequestParams);
}

/**
 * 
 * 
 * @param {!boolean=} opt_post 
 * @param {!boolean=} opt_apply 
 * @param {!boolean=} opt_delete 
 * @param {!string=} opt_action 
 * @param {!string=} opt_location 
 * @param {!Array<!string>=} opt_propertylist 
 * @param {!string=} opt_javaNamingFactoryInitial 
 * @param {!string=} opt_javaNamingProviderUrl 
 * @param {!angular.$http.Config=} opt_extraHttpRequestParams Extra HTTP parameters to send.
 * @return {!angular.$q.Promise<!API.Client.orgApacheSlingJcrJackrabbitServerJndiRegistrationSupportInfo>}
 */
API.Client.ConfigmgrApi.prototype.orgApacheSlingJcrJackrabbitServerJndiRegistrationSupport = function(opt_post, opt_apply, opt_delete, opt_action, opt_location, opt_propertylist, opt_javaNamingFactoryInitial, opt_javaNamingProviderUrl, opt_extraHttpRequestParams) {
  /** @const {string} */
  var path = this.basePath_ + '/system/console/configMgr/org.apache.sling.jcr.jackrabbit.server.JndiRegistrationSupport';

  /** @type {!Object} */
  var queryParameters = {};

  /** @type {!Object} */
  var headerParams = angular.extend({}, this.defaultHeaders_);
  if (opt_post !== undefined) {
    queryParameters['post'] = opt_post;
  }

  if (opt_apply !== undefined) {
    queryParameters['apply'] = opt_apply;
  }

  if (opt_delete !== undefined) {
    queryParameters['delete'] = opt_delete;
  }

  if (opt_action !== undefined) {
    queryParameters['action'] = opt_action;
  }

  if (opt_location !== undefined) {
    queryParameters['$location'] = opt_location;
  }

  if (opt_propertylist !== undefined) {
    queryParameters['propertylist'] = opt_propertylist;
  }

  if (opt_javaNamingFactoryInitial !== undefined) {
    queryParameters['java.naming.factory.initial'] = opt_javaNamingFactoryInitial;
  }

  if (opt_javaNamingProviderUrl !== undefined) {
    queryParameters['java.naming.provider.url'] = opt_javaNamingProviderUrl;
  }

  /** @type {!Object} */
  var httpRequestParams = {
    method: 'POST',
    url: path,
    json: true,
            params: queryParameters,
    headers: headerParams
  };

  if (opt_extraHttpRequestParams) {
    httpRequestParams = angular.extend(httpRequestParams, opt_extraHttpRequestParams);
  }

  return (/** @type {?} */ (this.http_))(httpRequestParams);
}

/**
 * 
 * 
 * @param {!boolean=} opt_post 
 * @param {!boolean=} opt_apply 
 * @param {!boolean=} opt_delete 
 * @param {!string=} opt_action 
 * @param {!string=} opt_location 
 * @param {!Array<!string>=} opt_propertylist 
 * @param {!number=} opt_port 
 * @param {!angular.$http.Config=} opt_extraHttpRequestParams Extra HTTP parameters to send.
 * @return {!angular.$q.Promise<!API.Client.orgApacheSlingJcrJackrabbitServerRmiRegistrationSupportInfo>}
 */
API.Client.ConfigmgrApi.prototype.orgApacheSlingJcrJackrabbitServerRmiRegistrationSupport = function(opt_post, opt_apply, opt_delete, opt_action, opt_location, opt_propertylist, opt_port, opt_extraHttpRequestParams) {
  /** @const {string} */
  var path = this.basePath_ + '/system/console/configMgr/org.apache.sling.jcr.jackrabbit.server.RmiRegistrationSupport';

  /** @type {!Object} */
  var queryParameters = {};

  /** @type {!Object} */
  var headerParams = angular.extend({}, this.defaultHeaders_);
  if (opt_post !== undefined) {
    queryParameters['post'] = opt_post;
  }

  if (opt_apply !== undefined) {
    queryParameters['apply'] = opt_apply;
  }

  if (opt_delete !== undefined) {
    queryParameters['delete'] = opt_delete;
  }

  if (opt_action !== undefined) {
    queryParameters['action'] = opt_action;
  }

  if (opt_location !== undefined) {
    queryParameters['$location'] = opt_location;
  }

  if (opt_propertylist !== undefined) {
    queryParameters['propertylist'] = opt_propertylist;
  }

  if (opt_port !== undefined) {
    queryParameters['port'] = opt_port;
  }

  /** @type {!Object} */
  var httpRequestParams = {
    method: 'POST',
    url: path,
    json: true,
            params: queryParameters,
    headers: headerParams
  };

  if (opt_extraHttpRequestParams) {
    httpRequestParams = angular.extend(httpRequestParams, opt_extraHttpRequestParams);
  }

  return (/** @type {?} */ (this.http_))(httpRequestParams);
}

/**
 * 
 * 
 * @param {!boolean=} opt_post 
 * @param {!boolean=} opt_apply 
 * @param {!boolean=} opt_delete 
 * @param {!string=} opt_action 
 * @param {!string=} opt_location 
 * @param {!Array<!string>=} opt_propertylist 
 * @param {!Array<!string>=} opt_references 
 * @param {!angular.$http.Config=} opt_extraHttpRequestParams Extra HTTP parameters to send.
 * @return {!angular.$q.Promise<!API.Client.orgApacheSlingJcrRepoinitImplRepositoryInitializerInfo>}
 */
API.Client.ConfigmgrApi.prototype.orgApacheSlingJcrRepoinitImplRepositoryInitializer = function(opt_post, opt_apply, opt_delete, opt_action, opt_location, opt_propertylist, opt_references, opt_extraHttpRequestParams) {
  /** @const {string} */
  var path = this.basePath_ + '/system/console/configMgr/org.apache.sling.jcr.repoinit.impl.RepositoryInitializer';

  /** @type {!Object} */
  var queryParameters = {};

  /** @type {!Object} */
  var headerParams = angular.extend({}, this.defaultHeaders_);
  if (opt_post !== undefined) {
    queryParameters['post'] = opt_post;
  }

  if (opt_apply !== undefined) {
    queryParameters['apply'] = opt_apply;
  }

  if (opt_delete !== undefined) {
    queryParameters['delete'] = opt_delete;
  }

  if (opt_action !== undefined) {
    queryParameters['action'] = opt_action;
  }

  if (opt_location !== undefined) {
    queryParameters['$location'] = opt_location;
  }

  if (opt_propertylist !== undefined) {
    queryParameters['propertylist'] = opt_propertylist;
  }

  if (opt_references !== undefined) {
    queryParameters['references'] = opt_references;
  }

  /** @type {!Object} */
  var httpRequestParams = {
    method: 'POST',
    url: path,
    json: true,
            params: queryParameters,
    headers: headerParams
  };

  if (opt_extraHttpRequestParams) {
    httpRequestParams = angular.extend(httpRequestParams, opt_extraHttpRequestParams);
  }

  return (/** @type {?} */ (this.http_))(httpRequestParams);
}

/**
 * 
 * 
 * @param {!boolean=} opt_post 
 * @param {!boolean=} opt_apply 
 * @param {!boolean=} opt_delete 
 * @param {!string=} opt_action 
 * @param {!string=} opt_location 
 * @param {!Array<!string>=} opt_propertylist 
 * @param {!Array<!string>=} opt_references 
 * @param {!Array<!string>=} opt_scripts 
 * @param {!angular.$http.Config=} opt_extraHttpRequestParams Extra HTTP parameters to send.
 * @return {!angular.$q.Promise<!API.Client.orgApacheSlingJcrRepoinitRepositoryInitializerInfo>}
 */
API.Client.ConfigmgrApi.prototype.orgApacheSlingJcrRepoinitRepositoryInitializer = function(opt_post, opt_apply, opt_delete, opt_action, opt_location, opt_propertylist, opt_references, opt_scripts, opt_extraHttpRequestParams) {
  /** @const {string} */
  var path = this.basePath_ + '/system/console/configMgr/org.apache.sling.jcr.repoinit.RepositoryInitializer';

  /** @type {!Object} */
  var queryParameters = {};

  /** @type {!Object} */
  var headerParams = angular.extend({}, this.defaultHeaders_);
  if (opt_post !== undefined) {
    queryParameters['post'] = opt_post;
  }

  if (opt_apply !== undefined) {
    queryParameters['apply'] = opt_apply;
  }

  if (opt_delete !== undefined) {
    queryParameters['delete'] = opt_delete;
  }

  if (opt_action !== undefined) {
    queryParameters['action'] = opt_action;
  }

  if (opt_location !== undefined) {
    queryParameters['$location'] = opt_location;
  }

  if (opt_propertylist !== undefined) {
    queryParameters['propertylist'] = opt_propertylist;
  }

  if (opt_references !== undefined) {
    queryParameters['references'] = opt_references;
  }

  if (opt_scripts !== undefined) {
    queryParameters['scripts'] = opt_scripts;
  }

  /** @type {!Object} */
  var httpRequestParams = {
    method: 'POST',
    url: path,
    json: true,
            params: queryParameters,
    headers: headerParams
  };

  if (opt_extraHttpRequestParams) {
    httpRequestParams = angular.extend(httpRequestParams, opt_extraHttpRequestParams);
  }

  return (/** @type {?} */ (this.http_))(httpRequestParams);
}

/**
 * 
 * 
 * @param {!boolean=} opt_post 
 * @param {!boolean=} opt_apply 
 * @param {!boolean=} opt_delete 
 * @param {!string=} opt_action 
 * @param {!string=} opt_location 
 * @param {!Array<!string>=} opt_propertylist 
 * @param {!Array<!string>=} opt_resourceResolverSearchpath 
 * @param {!boolean=} opt_resourceResolverManglenamespaces 
 * @param {!boolean=} opt_resourceResolverAllowDirect 
 * @param {!Array<!string>=} opt_resourceResolverRequiredProviders 
 * @param {!Array<!string>=} opt_resourceResolverRequiredProvidernames 
 * @param {!Array<!string>=} opt_resourceResolverVirtual 
 * @param {!Array<!string>=} opt_resourceResolverMapping 
 * @param {!string=} opt_resourceResolverMapLocation 
 * @param {!Array<!string>=} opt_resourceResolverMapObservation 
 * @param {!number=} opt_resourceResolverDefaultVanityRedirectStatus 
 * @param {!boolean=} opt_resourceResolverEnableVanitypath 
 * @param {!number=} opt_resourceResolverVanitypathMaxEntries 
 * @param {!boolean=} opt_resourceResolverVanitypathMaxEntriesStartup 
 * @param {!number=} opt_resourceResolverVanitypathBloomfilterMaxBytes 
 * @param {!boolean=} opt_resourceResolverOptimizeAliasResolution 
 * @param {!Array<!string>=} opt_resourceResolverVanitypathWhitelist 
 * @param {!Array<!string>=} opt_resourceResolverVanitypathBlacklist 
 * @param {!boolean=} opt_resourceResolverVanityPrecedence 
 * @param {!boolean=} opt_resourceResolverProviderhandlingParanoid 
 * @param {!boolean=} opt_resourceResolverLogClosing 
 * @param {!boolean=} opt_resourceResolverLogUnclosed 
 * @param {!angular.$http.Config=} opt_extraHttpRequestParams Extra HTTP parameters to send.
 * @return {!angular.$q.Promise<!API.Client.orgApacheSlingJcrResourceInternalJcrResourceResolverFactoryImplInfo>}
 */
API.Client.ConfigmgrApi.prototype.orgApacheSlingJcrResourceInternalJcrResourceResolverFactoryImpl = function(opt_post, opt_apply, opt_delete, opt_action, opt_location, opt_propertylist, opt_resourceResolverSearchpath, opt_resourceResolverManglenamespaces, opt_resourceResolverAllowDirect, opt_resourceResolverRequiredProviders, opt_resourceResolverRequiredProvidernames, opt_resourceResolverVirtual, opt_resourceResolverMapping, opt_resourceResolverMapLocation, opt_resourceResolverMapObservation, opt_resourceResolverDefaultVanityRedirectStatus, opt_resourceResolverEnableVanitypath, opt_resourceResolverVanitypathMaxEntries, opt_resourceResolverVanitypathMaxEntriesStartup, opt_resourceResolverVanitypathBloomfilterMaxBytes, opt_resourceResolverOptimizeAliasResolution, opt_resourceResolverVanitypathWhitelist, opt_resourceResolverVanitypathBlacklist, opt_resourceResolverVanityPrecedence, opt_resourceResolverProviderhandlingParanoid, opt_resourceResolverLogClosing, opt_resourceResolverLogUnclosed, opt_extraHttpRequestParams) {
  /** @const {string} */
  var path = this.basePath_ + '/system/console/configMgr/org.apache.sling.jcr.resource.internal.JcrResourceResolverFactoryImpl';

  /** @type {!Object} */
  var queryParameters = {};

  /** @type {!Object} */
  var headerParams = angular.extend({}, this.defaultHeaders_);
  if (opt_post !== undefined) {
    queryParameters['post'] = opt_post;
  }

  if (opt_apply !== undefined) {
    queryParameters['apply'] = opt_apply;
  }

  if (opt_delete !== undefined) {
    queryParameters['delete'] = opt_delete;
  }

  if (opt_action !== undefined) {
    queryParameters['action'] = opt_action;
  }

  if (opt_location !== undefined) {
    queryParameters['$location'] = opt_location;
  }

  if (opt_propertylist !== undefined) {
    queryParameters['propertylist'] = opt_propertylist;
  }

  if (opt_resourceResolverSearchpath !== undefined) {
    queryParameters['resource.resolver.searchpath'] = opt_resourceResolverSearchpath;
  }

  if (opt_resourceResolverManglenamespaces !== undefined) {
    queryParameters['resource.resolver.manglenamespaces'] = opt_resourceResolverManglenamespaces;
  }

  if (opt_resourceResolverAllowDirect !== undefined) {
    queryParameters['resource.resolver.allowDirect'] = opt_resourceResolverAllowDirect;
  }

  if (opt_resourceResolverRequiredProviders !== undefined) {
    queryParameters['resource.resolver.required.providers'] = opt_resourceResolverRequiredProviders;
  }

  if (opt_resourceResolverRequiredProvidernames !== undefined) {
    queryParameters['resource.resolver.required.providernames'] = opt_resourceResolverRequiredProvidernames;
  }

  if (opt_resourceResolverVirtual !== undefined) {
    queryParameters['resource.resolver.virtual'] = opt_resourceResolverVirtual;
  }

  if (opt_resourceResolverMapping !== undefined) {
    queryParameters['resource.resolver.mapping'] = opt_resourceResolverMapping;
  }

  if (opt_resourceResolverMapLocation !== undefined) {
    queryParameters['resource.resolver.map.location'] = opt_resourceResolverMapLocation;
  }

  if (opt_resourceResolverMapObservation !== undefined) {
    queryParameters['resource.resolver.map.observation'] = opt_resourceResolverMapObservation;
  }

  if (opt_resourceResolverDefaultVanityRedirectStatus !== undefined) {
    queryParameters['resource.resolver.default.vanity.redirect.status'] = opt_resourceResolverDefaultVanityRedirectStatus;
  }

  if (opt_resourceResolverEnableVanitypath !== undefined) {
    queryParameters['resource.resolver.enable.vanitypath'] = opt_resourceResolverEnableVanitypath;
  }

  if (opt_resourceResolverVanitypathMaxEntries !== undefined) {
    queryParameters['resource.resolver.vanitypath.maxEntries'] = opt_resourceResolverVanitypathMaxEntries;
  }

  if (opt_resourceResolverVanitypathMaxEntriesStartup !== undefined) {
    queryParameters['resource.resolver.vanitypath.maxEntries.startup'] = opt_resourceResolverVanitypathMaxEntriesStartup;
  }

  if (opt_resourceResolverVanitypathBloomfilterMaxBytes !== undefined) {
    queryParameters['resource.resolver.vanitypath.bloomfilter.maxBytes'] = opt_resourceResolverVanitypathBloomfilterMaxBytes;
  }

  if (opt_resourceResolverOptimizeAliasResolution !== undefined) {
    queryParameters['resource.resolver.optimize.alias.resolution'] = opt_resourceResolverOptimizeAliasResolution;
  }

  if (opt_resourceResolverVanitypathWhitelist !== undefined) {
    queryParameters['resource.resolver.vanitypath.whitelist'] = opt_resourceResolverVanitypathWhitelist;
  }

  if (opt_resourceResolverVanitypathBlacklist !== undefined) {
    queryParameters['resource.resolver.vanitypath.blacklist'] = opt_resourceResolverVanitypathBlacklist;
  }

  if (opt_resourceResolverVanityPrecedence !== undefined) {
    queryParameters['resource.resolver.vanity.precedence'] = opt_resourceResolverVanityPrecedence;
  }

  if (opt_resourceResolverProviderhandlingParanoid !== undefined) {
    queryParameters['resource.resolver.providerhandling.paranoid'] = opt_resourceResolverProviderhandlingParanoid;
  }

  if (opt_resourceResolverLogClosing !== undefined) {
    queryParameters['resource.resolver.log.closing'] = opt_resourceResolverLogClosing;
  }

  if (opt_resourceResolverLogUnclosed !== undefined) {
    queryParameters['resource.resolver.log.unclosed'] = opt_resourceResolverLogUnclosed;
  }

  /** @type {!Object} */
  var httpRequestParams = {
    method: 'POST',
    url: path,
    json: true,
            params: queryParameters,
    headers: headerParams
  };

  if (opt_extraHttpRequestParams) {
    httpRequestParams = angular.extend(httpRequestParams, opt_extraHttpRequestParams);
  }

  return (/** @type {?} */ (this.http_))(httpRequestParams);
}

/**
 * 
 * 
 * @param {!boolean=} opt_post 
 * @param {!boolean=} opt_apply 
 * @param {!boolean=} opt_delete 
 * @param {!string=} opt_action 
 * @param {!string=} opt_location 
 * @param {!Array<!string>=} opt_propertylist 
 * @param {!boolean=} opt_allowOnlySystemUser 
 * @param {!angular.$http.Config=} opt_extraHttpRequestParams Extra HTTP parameters to send.
 * @return {!angular.$q.Promise<!API.Client.orgApacheSlingJcrResourceInternalJcrSystemUserValidatorInfo>}
 */
API.Client.ConfigmgrApi.prototype.orgApacheSlingJcrResourceInternalJcrSystemUserValidator = function(opt_post, opt_apply, opt_delete, opt_action, opt_location, opt_propertylist, opt_allowOnlySystemUser, opt_extraHttpRequestParams) {
  /** @const {string} */
  var path = this.basePath_ + '/system/console/configMgr/org.apache.sling.jcr.resource.internal.JcrSystemUserValidator';

  /** @type {!Object} */
  var queryParameters = {};

  /** @type {!Object} */
  var headerParams = angular.extend({}, this.defaultHeaders_);
  if (opt_post !== undefined) {
    queryParameters['post'] = opt_post;
  }

  if (opt_apply !== undefined) {
    queryParameters['apply'] = opt_apply;
  }

  if (opt_delete !== undefined) {
    queryParameters['delete'] = opt_delete;
  }

  if (opt_action !== undefined) {
    queryParameters['action'] = opt_action;
  }

  if (opt_location !== undefined) {
    queryParameters['$location'] = opt_location;
  }

  if (opt_propertylist !== undefined) {
    queryParameters['propertylist'] = opt_propertylist;
  }

  if (opt_allowOnlySystemUser !== undefined) {
    queryParameters['allow.only.system.user'] = opt_allowOnlySystemUser;
  }

  /** @type {!Object} */
  var httpRequestParams = {
    method: 'POST',
    url: path,
    json: true,
            params: queryParameters,
    headers: headerParams
  };

  if (opt_extraHttpRequestParams) {
    httpRequestParams = angular.extend(httpRequestParams, opt_extraHttpRequestParams);
  }

  return (/** @type {?} */ (this.http_))(httpRequestParams);
}

/**
 * 
 * 
 * @param {!boolean=} opt_post 
 * @param {!boolean=} opt_apply 
 * @param {!boolean=} opt_delete 
 * @param {!string=} opt_action 
 * @param {!string=} opt_location 
 * @param {!Array<!string>=} opt_propertylist 
 * @param {!string=} opt_path 
 * @param {!string=} opt_checkpathPrefix 
 * @param {!string=} opt_jcrPath 
 * @param {!angular.$http.Config=} opt_extraHttpRequestParams Extra HTTP parameters to send.
 * @return {!angular.$q.Promise<!API.Client.orgApacheSlingJcrResourcesecurityImplResourceAccessGateFactoryInfo>}
 */
API.Client.ConfigmgrApi.prototype.orgApacheSlingJcrResourcesecurityImplResourceAccessGateFactory = function(opt_post, opt_apply, opt_delete, opt_action, opt_location, opt_propertylist, opt_path, opt_checkpathPrefix, opt_jcrPath, opt_extraHttpRequestParams) {
  /** @const {string} */
  var path = this.basePath_ + '/system/console/configMgr/org.apache.sling.jcr.resourcesecurity.impl.ResourceAccessGateFactory';

  /** @type {!Object} */
  var queryParameters = {};

  /** @type {!Object} */
  var headerParams = angular.extend({}, this.defaultHeaders_);
  if (opt_post !== undefined) {
    queryParameters['post'] = opt_post;
  }

  if (opt_apply !== undefined) {
    queryParameters['apply'] = opt_apply;
  }

  if (opt_delete !== undefined) {
    queryParameters['delete'] = opt_delete;
  }

  if (opt_action !== undefined) {
    queryParameters['action'] = opt_action;
  }

  if (opt_location !== undefined) {
    queryParameters['$location'] = opt_location;
  }

  if (opt_propertylist !== undefined) {
    queryParameters['propertylist'] = opt_propertylist;
  }

  if (opt_path !== undefined) {
    queryParameters['path'] = opt_path;
  }

  if (opt_checkpathPrefix !== undefined) {
    queryParameters['checkpath.prefix'] = opt_checkpathPrefix;
  }

  if (opt_jcrPath !== undefined) {
    queryParameters['jcrPath'] = opt_jcrPath;
  }

  /** @type {!Object} */
  var httpRequestParams = {
    method: 'POST',
    url: path,
    json: true,
            params: queryParameters,
    headers: headerParams
  };

  if (opt_extraHttpRequestParams) {
    httpRequestParams = angular.extend(httpRequestParams, opt_extraHttpRequestParams);
  }

  return (/** @type {?} */ (this.http_))(httpRequestParams);
}

/**
 * 
 * 
 * @param {!boolean=} opt_post 
 * @param {!boolean=} opt_apply 
 * @param {!boolean=} opt_delete 
 * @param {!string=} opt_action 
 * @param {!string=} opt_location 
 * @param {!Array<!string>=} opt_propertylist 
 * @param {!number=} opt_serviceRanking 
 * @param {!string=} opt_typeCollections 
 * @param {!string=} opt_typeNoncollections 
 * @param {!string=} opt_typeContent 
 * @param {!angular.$http.Config=} opt_extraHttpRequestParams Extra HTTP parameters to send.
 * @return {!angular.$q.Promise<!API.Client.orgApacheSlingJcrWebdavImplHandlerDefaultHandlerServiceInfo>}
 */
API.Client.ConfigmgrApi.prototype.orgApacheSlingJcrWebdavImplHandlerDefaultHandlerService = function(opt_post, opt_apply, opt_delete, opt_action, opt_location, opt_propertylist, opt_serviceRanking, opt_typeCollections, opt_typeNoncollections, opt_typeContent, opt_extraHttpRequestParams) {
  /** @const {string} */
  var path = this.basePath_ + '/system/console/configMgr/org.apache.sling.jcr.webdav.impl.handler.DefaultHandlerService';

  /** @type {!Object} */
  var queryParameters = {};

  /** @type {!Object} */
  var headerParams = angular.extend({}, this.defaultHeaders_);
  if (opt_post !== undefined) {
    queryParameters['post'] = opt_post;
  }

  if (opt_apply !== undefined) {
    queryParameters['apply'] = opt_apply;
  }

  if (opt_delete !== undefined) {
    queryParameters['delete'] = opt_delete;
  }

  if (opt_action !== undefined) {
    queryParameters['action'] = opt_action;
  }

  if (opt_location !== undefined) {
    queryParameters['$location'] = opt_location;
  }

  if (opt_propertylist !== undefined) {
    queryParameters['propertylist'] = opt_propertylist;
  }

  if (opt_serviceRanking !== undefined) {
    queryParameters['service.ranking'] = opt_serviceRanking;
  }

  if (opt_typeCollections !== undefined) {
    queryParameters['type.collections'] = opt_typeCollections;
  }

  if (opt_typeNoncollections !== undefined) {
    queryParameters['type.noncollections'] = opt_typeNoncollections;
  }

  if (opt_typeContent !== undefined) {
    queryParameters['type.content'] = opt_typeContent;
  }

  /** @type {!Object} */
  var httpRequestParams = {
    method: 'POST',
    url: path,
    json: true,
            params: queryParameters,
    headers: headerParams
  };

  if (opt_extraHttpRequestParams) {
    httpRequestParams = angular.extend(httpRequestParams, opt_extraHttpRequestParams);
  }

  return (/** @type {?} */ (this.http_))(httpRequestParams);
}

/**
 * 
 * 
 * @param {!boolean=} opt_post 
 * @param {!boolean=} opt_apply 
 * @param {!boolean=} opt_delete 
 * @param {!string=} opt_action 
 * @param {!string=} opt_location 
 * @param {!Array<!string>=} opt_propertylist 
 * @param {!number=} opt_serviceRanking 
 * @param {!angular.$http.Config=} opt_extraHttpRequestParams Extra HTTP parameters to send.
 * @return {!angular.$q.Promise<!API.Client.orgApacheSlingJcrWebdavImplHandlerDirListingExportHandlerServicInfo>}
 */
API.Client.ConfigmgrApi.prototype.orgApacheSlingJcrWebdavImplHandlerDirListingExportHandlerServic = function(opt_post, opt_apply, opt_delete, opt_action, opt_location, opt_propertylist, opt_serviceRanking, opt_extraHttpRequestParams) {
  /** @const {string} */
  var path = this.basePath_ + '/system/console/configMgr/org.apache.sling.jcr.webdav.impl.handler.DirListingExportHandlerService';

  /** @type {!Object} */
  var queryParameters = {};

  /** @type {!Object} */
  var headerParams = angular.extend({}, this.defaultHeaders_);
  if (opt_post !== undefined) {
    queryParameters['post'] = opt_post;
  }

  if (opt_apply !== undefined) {
    queryParameters['apply'] = opt_apply;
  }

  if (opt_delete !== undefined) {
    queryParameters['delete'] = opt_delete;
  }

  if (opt_action !== undefined) {
    queryParameters['action'] = opt_action;
  }

  if (opt_location !== undefined) {
    queryParameters['$location'] = opt_location;
  }

  if (opt_propertylist !== undefined) {
    queryParameters['propertylist'] = opt_propertylist;
  }

  if (opt_serviceRanking !== undefined) {
    queryParameters['service.ranking'] = opt_serviceRanking;
  }

  /** @type {!Object} */
  var httpRequestParams = {
    method: 'POST',
    url: path,
    json: true,
            params: queryParameters,
    headers: headerParams
  };

  if (opt_extraHttpRequestParams) {
    httpRequestParams = angular.extend(httpRequestParams, opt_extraHttpRequestParams);
  }

  return (/** @type {?} */ (this.http_))(httpRequestParams);
}

/**
 * 
 * 
 * @param {!boolean=} opt_post 
 * @param {!boolean=} opt_apply 
 * @param {!boolean=} opt_delete 
 * @param {!string=} opt_action 
 * @param {!string=} opt_location 
 * @param {!Array<!string>=} opt_propertylist 
 * @param {!string=} opt_davRoot 
 * @param {!boolean=} opt_davCreateAbsoluteUri 
 * @param {!string=} opt_davRealm 
 * @param {!Array<!string>=} opt_collectionTypes 
 * @param {!Array<!string>=} opt_filterPrefixes 
 * @param {!string=} opt_filterTypes 
 * @param {!string=} opt_filterUris 
 * @param {!string=} opt_typeCollections 
 * @param {!string=} opt_typeNoncollections 
 * @param {!string=} opt_typeContent 
 * @param {!angular.$http.Config=} opt_extraHttpRequestParams Extra HTTP parameters to send.
 * @return {!angular.$q.Promise<!API.Client.orgApacheSlingJcrWebdavImplServletsSimpleWebDavServletInfo>}
 */
API.Client.ConfigmgrApi.prototype.orgApacheSlingJcrWebdavImplServletsSimpleWebDavServlet = function(opt_post, opt_apply, opt_delete, opt_action, opt_location, opt_propertylist, opt_davRoot, opt_davCreateAbsoluteUri, opt_davRealm, opt_collectionTypes, opt_filterPrefixes, opt_filterTypes, opt_filterUris, opt_typeCollections, opt_typeNoncollections, opt_typeContent, opt_extraHttpRequestParams) {
  /** @const {string} */
  var path = this.basePath_ + '/system/console/configMgr/org.apache.sling.jcr.webdav.impl.servlets.SimpleWebDavServlet';

  /** @type {!Object} */
  var queryParameters = {};

  /** @type {!Object} */
  var headerParams = angular.extend({}, this.defaultHeaders_);
  if (opt_post !== undefined) {
    queryParameters['post'] = opt_post;
  }

  if (opt_apply !== undefined) {
    queryParameters['apply'] = opt_apply;
  }

  if (opt_delete !== undefined) {
    queryParameters['delete'] = opt_delete;
  }

  if (opt_action !== undefined) {
    queryParameters['action'] = opt_action;
  }

  if (opt_location !== undefined) {
    queryParameters['$location'] = opt_location;
  }

  if (opt_propertylist !== undefined) {
    queryParameters['propertylist'] = opt_propertylist;
  }

  if (opt_davRoot !== undefined) {
    queryParameters['dav.root'] = opt_davRoot;
  }

  if (opt_davCreateAbsoluteUri !== undefined) {
    queryParameters['dav.create-absolute-uri'] = opt_davCreateAbsoluteUri;
  }

  if (opt_davRealm !== undefined) {
    queryParameters['dav.realm'] = opt_davRealm;
  }

  if (opt_collectionTypes !== undefined) {
    queryParameters['collection.types'] = opt_collectionTypes;
  }

  if (opt_filterPrefixes !== undefined) {
    queryParameters['filter.prefixes'] = opt_filterPrefixes;
  }

  if (opt_filterTypes !== undefined) {
    queryParameters['filter.types'] = opt_filterTypes;
  }

  if (opt_filterUris !== undefined) {
    queryParameters['filter.uris'] = opt_filterUris;
  }

  if (opt_typeCollections !== undefined) {
    queryParameters['type.collections'] = opt_typeCollections;
  }

  if (opt_typeNoncollections !== undefined) {
    queryParameters['type.noncollections'] = opt_typeNoncollections;
  }

  if (opt_typeContent !== undefined) {
    queryParameters['type.content'] = opt_typeContent;
  }

  /** @type {!Object} */
  var httpRequestParams = {
    method: 'POST',
    url: path,
    json: true,
            params: queryParameters,
    headers: headerParams
  };

  if (opt_extraHttpRequestParams) {
    httpRequestParams = angular.extend(httpRequestParams, opt_extraHttpRequestParams);
  }

  return (/** @type {?} */ (this.http_))(httpRequestParams);
}

/**
 * 
 * 
 * @param {!boolean=} opt_post 
 * @param {!boolean=} opt_apply 
 * @param {!boolean=} opt_delete 
 * @param {!string=} opt_action 
 * @param {!string=} opt_location 
 * @param {!Array<!string>=} opt_propertylist 
 * @param {!string=} opt_providerRoots 
 * @param {!angular.$http.Config=} opt_extraHttpRequestParams Extra HTTP parameters to send.
 * @return {!angular.$q.Promise<!API.Client.orgApacheSlingJmxProviderImplJMXResourceProviderInfo>}
 */
API.Client.ConfigmgrApi.prototype.orgApacheSlingJmxProviderImplJMXResourceProvider = function(opt_post, opt_apply, opt_delete, opt_action, opt_location, opt_propertylist, opt_providerRoots, opt_extraHttpRequestParams) {
  /** @const {string} */
  var path = this.basePath_ + '/system/console/configMgr/org.apache.sling.jmx.provider.impl.JMXResourceProvider';

  /** @type {!Object} */
  var queryParameters = {};

  /** @type {!Object} */
  var headerParams = angular.extend({}, this.defaultHeaders_);
  if (opt_post !== undefined) {
    queryParameters['post'] = opt_post;
  }

  if (opt_apply !== undefined) {
    queryParameters['apply'] = opt_apply;
  }

  if (opt_delete !== undefined) {
    queryParameters['delete'] = opt_delete;
  }

  if (opt_action !== undefined) {
    queryParameters['action'] = opt_action;
  }

  if (opt_location !== undefined) {
    queryParameters['$location'] = opt_location;
  }

  if (opt_propertylist !== undefined) {
    queryParameters['propertylist'] = opt_propertylist;
  }

  if (opt_providerRoots !== undefined) {
    queryParameters['provider.roots'] = opt_providerRoots;
  }

  /** @type {!Object} */
  var httpRequestParams = {
    method: 'POST',
    url: path,
    json: true,
            params: queryParameters,
    headers: headerParams
  };

  if (opt_extraHttpRequestParams) {
    httpRequestParams = angular.extend(httpRequestParams, opt_extraHttpRequestParams);
  }

  return (/** @type {?} */ (this.http_))(httpRequestParams);
}

/**
 * 
 * 
 * @param {!boolean=} opt_post 
 * @param {!boolean=} opt_apply 
 * @param {!boolean=} opt_delete 
 * @param {!string=} opt_action 
 * @param {!string=} opt_location 
 * @param {!Array<!string>=} opt_propertylist 
 * @param {!string=} opt_osgiHttpWhiteboardListener 
 * @param {!string=} opt_osgiHttpWhiteboardContextSelect 
 * @param {!number=} opt_maxRecursionDepth 
 * @param {!number=} opt_cleanupJobPeriod 
 * @param {!angular.$http.Config=} opt_extraHttpRequestParams Extra HTTP parameters to send.
 * @return {!angular.$q.Promise<!API.Client.orgApacheSlingModelsImplModelAdapterFactoryInfo>}
 */
API.Client.ConfigmgrApi.prototype.orgApacheSlingModelsImplModelAdapterFactory = function(opt_post, opt_apply, opt_delete, opt_action, opt_location, opt_propertylist, opt_osgiHttpWhiteboardListener, opt_osgiHttpWhiteboardContextSelect, opt_maxRecursionDepth, opt_cleanupJobPeriod, opt_extraHttpRequestParams) {
  /** @const {string} */
  var path = this.basePath_ + '/system/console/configMgr/org.apache.sling.models.impl.ModelAdapterFactory';

  /** @type {!Object} */
  var queryParameters = {};

  /** @type {!Object} */
  var headerParams = angular.extend({}, this.defaultHeaders_);
  if (opt_post !== undefined) {
    queryParameters['post'] = opt_post;
  }

  if (opt_apply !== undefined) {
    queryParameters['apply'] = opt_apply;
  }

  if (opt_delete !== undefined) {
    queryParameters['delete'] = opt_delete;
  }

  if (opt_action !== undefined) {
    queryParameters['action'] = opt_action;
  }

  if (opt_location !== undefined) {
    queryParameters['$location'] = opt_location;
  }

  if (opt_propertylist !== undefined) {
    queryParameters['propertylist'] = opt_propertylist;
  }

  if (opt_osgiHttpWhiteboardListener !== undefined) {
    queryParameters['osgi.http.whiteboard.listener'] = opt_osgiHttpWhiteboardListener;
  }

  if (opt_osgiHttpWhiteboardContextSelect !== undefined) {
    queryParameters['osgi.http.whiteboard.context.select'] = opt_osgiHttpWhiteboardContextSelect;
  }

  if (opt_maxRecursionDepth !== undefined) {
    queryParameters['max.recursion.depth'] = opt_maxRecursionDepth;
  }

  if (opt_cleanupJobPeriod !== undefined) {
    queryParameters['cleanup.job.period'] = opt_cleanupJobPeriod;
  }

  /** @type {!Object} */
  var httpRequestParams = {
    method: 'POST',
    url: path,
    json: true,
            params: queryParameters,
    headers: headerParams
  };

  if (opt_extraHttpRequestParams) {
    httpRequestParams = angular.extend(httpRequestParams, opt_extraHttpRequestParams);
  }

  return (/** @type {?} */ (this.http_))(httpRequestParams);
}

/**
 * 
 * 
 * @param {!boolean=} opt_post 
 * @param {!boolean=} opt_apply 
 * @param {!boolean=} opt_delete 
 * @param {!string=} opt_action 
 * @param {!string=} opt_location 
 * @param {!Array<!string>=} opt_propertylist 
 * @param {!number=} opt_maxRecursionLevels 
 * @param {!angular.$http.Config=} opt_extraHttpRequestParams Extra HTTP parameters to send.
 * @return {!angular.$q.Promise<!API.Client.orgApacheSlingModelsJacksonexporterImplResourceModuleProviderInfo>}
 */
API.Client.ConfigmgrApi.prototype.orgApacheSlingModelsJacksonexporterImplResourceModuleProvider = function(opt_post, opt_apply, opt_delete, opt_action, opt_location, opt_propertylist, opt_maxRecursionLevels, opt_extraHttpRequestParams) {
  /** @const {string} */
  var path = this.basePath_ + '/system/console/configMgr/org.apache.sling.models.jacksonexporter.impl.ResourceModuleProvider';

  /** @type {!Object} */
  var queryParameters = {};

  /** @type {!Object} */
  var headerParams = angular.extend({}, this.defaultHeaders_);
  if (opt_post !== undefined) {
    queryParameters['post'] = opt_post;
  }

  if (opt_apply !== undefined) {
    queryParameters['apply'] = opt_apply;
  }

  if (opt_delete !== undefined) {
    queryParameters['delete'] = opt_delete;
  }

  if (opt_action !== undefined) {
    queryParameters['action'] = opt_action;
  }

  if (opt_location !== undefined) {
    queryParameters['$location'] = opt_location;
  }

  if (opt_propertylist !== undefined) {
    queryParameters['propertylist'] = opt_propertylist;
  }

  if (opt_maxRecursionLevels !== undefined) {
    queryParameters['max.recursion.levels'] = opt_maxRecursionLevels;
  }

  /** @type {!Object} */
  var httpRequestParams = {
    method: 'POST',
    url: path,
    json: true,
            params: queryParameters,
    headers: headerParams
  };

  if (opt_extraHttpRequestParams) {
    httpRequestParams = angular.extend(httpRequestParams, opt_extraHttpRequestParams);
  }

  return (/** @type {?} */ (this.http_))(httpRequestParams);
}

/**
 * 
 * 
 * @param {!boolean=} opt_post 
 * @param {!boolean=} opt_apply 
 * @param {!boolean=} opt_delete 
 * @param {!string=} opt_action 
 * @param {!string=} opt_location 
 * @param {!Array<!string>=} opt_propertylist 
 * @param {!string=} opt_felixInventoryPrinterName 
 * @param {!string=} opt_felixInventoryPrinterTitle 
 * @param {!string=} opt_path 
 * @param {!angular.$http.Config=} opt_extraHttpRequestParams Extra HTTP parameters to send.
 * @return {!angular.$q.Promise<!API.Client.orgApacheSlingResourceInventoryImplResourceInventoryPrinterFactoInfo>}
 */
API.Client.ConfigmgrApi.prototype.orgApacheSlingResourceInventoryImplResourceInventoryPrinterFacto = function(opt_post, opt_apply, opt_delete, opt_action, opt_location, opt_propertylist, opt_felixInventoryPrinterName, opt_felixInventoryPrinterTitle, opt_path, opt_extraHttpRequestParams) {
  /** @const {string} */
  var path = this.basePath_ + '/system/console/configMgr/org.apache.sling.resource.inventory.impl.ResourceInventoryPrinterFactory';

  /** @type {!Object} */
  var queryParameters = {};

  /** @type {!Object} */
  var headerParams = angular.extend({}, this.defaultHeaders_);
  if (opt_post !== undefined) {
    queryParameters['post'] = opt_post;
  }

  if (opt_apply !== undefined) {
    queryParameters['apply'] = opt_apply;
  }

  if (opt_delete !== undefined) {
    queryParameters['delete'] = opt_delete;
  }

  if (opt_action !== undefined) {
    queryParameters['action'] = opt_action;
  }

  if (opt_location !== undefined) {
    queryParameters['$location'] = opt_location;
  }

  if (opt_propertylist !== undefined) {
    queryParameters['propertylist'] = opt_propertylist;
  }

  if (opt_felixInventoryPrinterName !== undefined) {
    queryParameters['felix.inventory.printer.name'] = opt_felixInventoryPrinterName;
  }

  if (opt_felixInventoryPrinterTitle !== undefined) {
    queryParameters['felix.inventory.printer.title'] = opt_felixInventoryPrinterTitle;
  }

  if (opt_path !== undefined) {
    queryParameters['path'] = opt_path;
  }

  /** @type {!Object} */
  var httpRequestParams = {
    method: 'POST',
    url: path,
    json: true,
            params: queryParameters,
    headers: headerParams
  };

  if (opt_extraHttpRequestParams) {
    httpRequestParams = angular.extend(httpRequestParams, opt_extraHttpRequestParams);
  }

  return (/** @type {?} */ (this.http_))(httpRequestParams);
}

/**
 * 
 * 
 * @param {!boolean=} opt_post 
 * @param {!boolean=} opt_apply 
 * @param {!boolean=} opt_delete 
 * @param {!string=} opt_action 
 * @param {!string=} opt_location 
 * @param {!Array<!string>=} opt_propertylist 
 * @param {!string=} opt_mergeRoot 
 * @param {!boolean=} opt_mergeReadOnly 
 * @param {!angular.$http.Config=} opt_extraHttpRequestParams Extra HTTP parameters to send.
 * @return {!angular.$q.Promise<!API.Client.orgApacheSlingResourcemergerImplMergedResourceProviderFactoryInfo>}
 */
API.Client.ConfigmgrApi.prototype.orgApacheSlingResourcemergerImplMergedResourceProviderFactory = function(opt_post, opt_apply, opt_delete, opt_action, opt_location, opt_propertylist, opt_mergeRoot, opt_mergeReadOnly, opt_extraHttpRequestParams) {
  /** @const {string} */
  var path = this.basePath_ + '/system/console/configMgr/org.apache.sling.resourcemerger.impl.MergedResourceProviderFactory';

  /** @type {!Object} */
  var queryParameters = {};

  /** @type {!Object} */
  var headerParams = angular.extend({}, this.defaultHeaders_);
  if (opt_post !== undefined) {
    queryParameters['post'] = opt_post;
  }

  if (opt_apply !== undefined) {
    queryParameters['apply'] = opt_apply;
  }

  if (opt_delete !== undefined) {
    queryParameters['delete'] = opt_delete;
  }

  if (opt_action !== undefined) {
    queryParameters['action'] = opt_action;
  }

  if (opt_location !== undefined) {
    queryParameters['$location'] = opt_location;
  }

  if (opt_propertylist !== undefined) {
    queryParameters['propertylist'] = opt_propertylist;
  }

  if (opt_mergeRoot !== undefined) {
    queryParameters['merge.root'] = opt_mergeRoot;
  }

  if (opt_mergeReadOnly !== undefined) {
    queryParameters['merge.readOnly'] = opt_mergeReadOnly;
  }

  /** @type {!Object} */
  var httpRequestParams = {
    method: 'POST',
    url: path,
    json: true,
            params: queryParameters,
    headers: headerParams
  };

  if (opt_extraHttpRequestParams) {
    httpRequestParams = angular.extend(httpRequestParams, opt_extraHttpRequestParams);
  }

  return (/** @type {?} */ (this.http_))(httpRequestParams);
}

/**
 * 
 * 
 * @param {!boolean=} opt_post 
 * @param {!boolean=} opt_apply 
 * @param {!boolean=} opt_delete 
 * @param {!string=} opt_action 
 * @param {!string=} opt_location 
 * @param {!Array<!string>=} opt_propertylist 
 * @param {!string=} opt_mergeRoot 
 * @param {!boolean=} opt_mergeReadOnly 
 * @param {!angular.$http.Config=} opt_extraHttpRequestParams Extra HTTP parameters to send.
 * @return {!angular.$q.Promise<!API.Client.orgApacheSlingResourcemergerPickerOverridingInfo>}
 */
API.Client.ConfigmgrApi.prototype.orgApacheSlingResourcemergerPickerOverriding = function(opt_post, opt_apply, opt_delete, opt_action, opt_location, opt_propertylist, opt_mergeRoot, opt_mergeReadOnly, opt_extraHttpRequestParams) {
  /** @const {string} */
  var path = this.basePath_ + '/system/console/configMgr/org.apache.sling.resourcemerger.picker.overriding';

  /** @type {!Object} */
  var queryParameters = {};

  /** @type {!Object} */
  var headerParams = angular.extend({}, this.defaultHeaders_);
  if (opt_post !== undefined) {
    queryParameters['post'] = opt_post;
  }

  if (opt_apply !== undefined) {
    queryParameters['apply'] = opt_apply;
  }

  if (opt_delete !== undefined) {
    queryParameters['delete'] = opt_delete;
  }

  if (opt_action !== undefined) {
    queryParameters['action'] = opt_action;
  }

  if (opt_location !== undefined) {
    queryParameters['$location'] = opt_location;
  }

  if (opt_propertylist !== undefined) {
    queryParameters['propertylist'] = opt_propertylist;
  }

  if (opt_mergeRoot !== undefined) {
    queryParameters['merge.root'] = opt_mergeRoot;
  }

  if (opt_mergeReadOnly !== undefined) {
    queryParameters['merge.readOnly'] = opt_mergeReadOnly;
  }

  /** @type {!Object} */
  var httpRequestParams = {
    method: 'POST',
    url: path,
    json: true,
            params: queryParameters,
    headers: headerParams
  };

  if (opt_extraHttpRequestParams) {
    httpRequestParams = angular.extend(httpRequestParams, opt_extraHttpRequestParams);
  }

  return (/** @type {?} */ (this.http_))(httpRequestParams);
}

/**
 * 
 * 
 * @param {!boolean=} opt_post 
 * @param {!boolean=} opt_apply 
 * @param {!boolean=} opt_delete 
 * @param {!string=} opt_action 
 * @param {!string=} opt_location 
 * @param {!Array<!string>=} opt_propertylist 
 * @param {!number=} opt_orgApacheSlingScriptingCacheSize 
 * @param {!Array<!string>=} opt_orgApacheSlingScriptingCacheAdditionalExtensions 
 * @param {!angular.$http.Config=} opt_extraHttpRequestParams Extra HTTP parameters to send.
 * @return {!angular.$q.Promise<!API.Client.orgApacheSlingScriptingCoreImplScriptCacheImplInfo>}
 */
API.Client.ConfigmgrApi.prototype.orgApacheSlingScriptingCoreImplScriptCacheImpl = function(opt_post, opt_apply, opt_delete, opt_action, opt_location, opt_propertylist, opt_orgApacheSlingScriptingCacheSize, opt_orgApacheSlingScriptingCacheAdditionalExtensions, opt_extraHttpRequestParams) {
  /** @const {string} */
  var path = this.basePath_ + '/system/console/configMgr/org.apache.sling.scripting.core.impl.ScriptCacheImpl';

  /** @type {!Object} */
  var queryParameters = {};

  /** @type {!Object} */
  var headerParams = angular.extend({}, this.defaultHeaders_);
  if (opt_post !== undefined) {
    queryParameters['post'] = opt_post;
  }

  if (opt_apply !== undefined) {
    queryParameters['apply'] = opt_apply;
  }

  if (opt_delete !== undefined) {
    queryParameters['delete'] = opt_delete;
  }

  if (opt_action !== undefined) {
    queryParameters['action'] = opt_action;
  }

  if (opt_location !== undefined) {
    queryParameters['$location'] = opt_location;
  }

  if (opt_propertylist !== undefined) {
    queryParameters['propertylist'] = opt_propertylist;
  }

  if (opt_orgApacheSlingScriptingCacheSize !== undefined) {
    queryParameters['org.apache.sling.scripting.cache.size'] = opt_orgApacheSlingScriptingCacheSize;
  }

  if (opt_orgApacheSlingScriptingCacheAdditionalExtensions !== undefined) {
    queryParameters['org.apache.sling.scripting.cache.additional_extensions'] = opt_orgApacheSlingScriptingCacheAdditionalExtensions;
  }

  /** @type {!Object} */
  var httpRequestParams = {
    method: 'POST',
    url: path,
    json: true,
            params: queryParameters,
    headers: headerParams
  };

  if (opt_extraHttpRequestParams) {
    httpRequestParams = angular.extend(httpRequestParams, opt_extraHttpRequestParams);
  }

  return (/** @type {?} */ (this.http_))(httpRequestParams);
}

/**
 * 
 * 
 * @param {!boolean=} opt_post 
 * @param {!boolean=} opt_apply 
 * @param {!boolean=} opt_delete 
 * @param {!string=} opt_action 
 * @param {!string=} opt_location 
 * @param {!Array<!string>=} opt_propertylist 
 * @param {!boolean=} opt_logStacktraceOnclose 
 * @param {!angular.$http.Config=} opt_extraHttpRequestParams Extra HTTP parameters to send.
 * @return {!angular.$q.Promise<!API.Client.orgApacheSlingScriptingCoreImplScriptingResourceResolverProviderInfo>}
 */
API.Client.ConfigmgrApi.prototype.orgApacheSlingScriptingCoreImplScriptingResourceResolverProvider = function(opt_post, opt_apply, opt_delete, opt_action, opt_location, opt_propertylist, opt_logStacktraceOnclose, opt_extraHttpRequestParams) {
  /** @const {string} */
  var path = this.basePath_ + '/system/console/configMgr/org.apache.sling.scripting.core.impl.ScriptingResourceResolverProviderImpl';

  /** @type {!Object} */
  var queryParameters = {};

  /** @type {!Object} */
  var headerParams = angular.extend({}, this.defaultHeaders_);
  if (opt_post !== undefined) {
    queryParameters['post'] = opt_post;
  }

  if (opt_apply !== undefined) {
    queryParameters['apply'] = opt_apply;
  }

  if (opt_delete !== undefined) {
    queryParameters['delete'] = opt_delete;
  }

  if (opt_action !== undefined) {
    queryParameters['action'] = opt_action;
  }

  if (opt_location !== undefined) {
    queryParameters['$location'] = opt_location;
  }

  if (opt_propertylist !== undefined) {
    queryParameters['propertylist'] = opt_propertylist;
  }

  if (opt_logStacktraceOnclose !== undefined) {
    queryParameters['log.stacktrace.onclose'] = opt_logStacktraceOnclose;
  }

  /** @type {!Object} */
  var httpRequestParams = {
    method: 'POST',
    url: path,
    json: true,
            params: queryParameters,
    headers: headerParams
  };

  if (opt_extraHttpRequestParams) {
    httpRequestParams = angular.extend(httpRequestParams, opt_extraHttpRequestParams);
  }

  return (/** @type {?} */ (this.http_))(httpRequestParams);
}

/**
 * 
 * 
 * @param {!boolean=} opt_post 
 * @param {!boolean=} opt_apply 
 * @param {!boolean=} opt_delete 
 * @param {!string=} opt_action 
 * @param {!string=} opt_location 
 * @param {!Array<!string>=} opt_propertylist 
 * @param {!boolean=} opt_javaClassdebuginfo 
 * @param {!string=} opt_javaJavaEncoding 
 * @param {!string=} opt_javaCompilerSourceVM 
 * @param {!string=} opt_javaCompilerTargetVM 
 * @param {!angular.$http.Config=} opt_extraHttpRequestParams Extra HTTP parameters to send.
 * @return {!angular.$q.Promise<!API.Client.orgApacheSlingScriptingJavaImplJavaScriptEngineFactoryInfo>}
 */
API.Client.ConfigmgrApi.prototype.orgApacheSlingScriptingJavaImplJavaScriptEngineFactory = function(opt_post, opt_apply, opt_delete, opt_action, opt_location, opt_propertylist, opt_javaClassdebuginfo, opt_javaJavaEncoding, opt_javaCompilerSourceVM, opt_javaCompilerTargetVM, opt_extraHttpRequestParams) {
  /** @const {string} */
  var path = this.basePath_ + '/system/console/configMgr/org.apache.sling.scripting.java.impl.JavaScriptEngineFactory';

  /** @type {!Object} */
  var queryParameters = {};

  /** @type {!Object} */
  var headerParams = angular.extend({}, this.defaultHeaders_);
  if (opt_post !== undefined) {
    queryParameters['post'] = opt_post;
  }

  if (opt_apply !== undefined) {
    queryParameters['apply'] = opt_apply;
  }

  if (opt_delete !== undefined) {
    queryParameters['delete'] = opt_delete;
  }

  if (opt_action !== undefined) {
    queryParameters['action'] = opt_action;
  }

  if (opt_location !== undefined) {
    queryParameters['$location'] = opt_location;
  }

  if (opt_propertylist !== undefined) {
    queryParameters['propertylist'] = opt_propertylist;
  }

  if (opt_javaClassdebuginfo !== undefined) {
    queryParameters['java.classdebuginfo'] = opt_javaClassdebuginfo;
  }

  if (opt_javaJavaEncoding !== undefined) {
    queryParameters['java.javaEncoding'] = opt_javaJavaEncoding;
  }

  if (opt_javaCompilerSourceVM !== undefined) {
    queryParameters['java.compilerSourceVM'] = opt_javaCompilerSourceVM;
  }

  if (opt_javaCompilerTargetVM !== undefined) {
    queryParameters['java.compilerTargetVM'] = opt_javaCompilerTargetVM;
  }

  /** @type {!Object} */
  var httpRequestParams = {
    method: 'POST',
    url: path,
    json: true,
            params: queryParameters,
    headers: headerParams
  };

  if (opt_extraHttpRequestParams) {
    httpRequestParams = angular.extend(httpRequestParams, opt_extraHttpRequestParams);
  }

  return (/** @type {?} */ (this.http_))(httpRequestParams);
}

/**
 * 
 * 
 * @param {!boolean=} opt_post 
 * @param {!boolean=} opt_apply 
 * @param {!boolean=} opt_delete 
 * @param {!string=} opt_action 
 * @param {!string=} opt_location 
 * @param {!Array<!string>=} opt_propertylist 
 * @param {!number=} opt_orgApacheSlingScriptingJavascriptRhinoOptLevel 
 * @param {!angular.$http.Config=} opt_extraHttpRequestParams Extra HTTP parameters to send.
 * @return {!angular.$q.Promise<!API.Client.orgApacheSlingScriptingJavascriptInternalRhinoJavaScriptEngineFaInfo>}
 */
API.Client.ConfigmgrApi.prototype.orgApacheSlingScriptingJavascriptInternalRhinoJavaScriptEngineFa = function(opt_post, opt_apply, opt_delete, opt_action, opt_location, opt_propertylist, opt_orgApacheSlingScriptingJavascriptRhinoOptLevel, opt_extraHttpRequestParams) {
  /** @const {string} */
  var path = this.basePath_ + '/system/console/configMgr/org.apache.sling.scripting.javascript.internal.RhinoJavaScriptEngineFactory';

  /** @type {!Object} */
  var queryParameters = {};

  /** @type {!Object} */
  var headerParams = angular.extend({}, this.defaultHeaders_);
  if (opt_post !== undefined) {
    queryParameters['post'] = opt_post;
  }

  if (opt_apply !== undefined) {
    queryParameters['apply'] = opt_apply;
  }

  if (opt_delete !== undefined) {
    queryParameters['delete'] = opt_delete;
  }

  if (opt_action !== undefined) {
    queryParameters['action'] = opt_action;
  }

  if (opt_location !== undefined) {
    queryParameters['$location'] = opt_location;
  }

  if (opt_propertylist !== undefined) {
    queryParameters['propertylist'] = opt_propertylist;
  }

  if (opt_orgApacheSlingScriptingJavascriptRhinoOptLevel !== undefined) {
    queryParameters['org.apache.sling.scripting.javascript.rhino.optLevel'] = opt_orgApacheSlingScriptingJavascriptRhinoOptLevel;
  }

  /** @type {!Object} */
  var httpRequestParams = {
    method: 'POST',
    url: path,
    json: true,
            params: queryParameters,
    headers: headerParams
  };

  if (opt_extraHttpRequestParams) {
    httpRequestParams = angular.extend(httpRequestParams, opt_extraHttpRequestParams);
  }

  return (/** @type {?} */ (this.http_))(httpRequestParams);
}

/**
 * 
 * 
 * @param {!boolean=} opt_post 
 * @param {!boolean=} opt_apply 
 * @param {!boolean=} opt_delete 
 * @param {!string=} opt_action 
 * @param {!string=} opt_location 
 * @param {!Array<!string>=} opt_propertylist 
 * @param {!string=} opt_jasperCompilerTargetVM 
 * @param {!string=} opt_jasperCompilerSourceVM 
 * @param {!boolean=} opt_jasperClassdebuginfo 
 * @param {!boolean=} opt_jasperEnablePooling 
 * @param {!string=} opt_jasperIeClassId 
 * @param {!boolean=} opt_jasperGenStringAsCharArray 
 * @param {!boolean=} opt_jasperKeepgenerated 
 * @param {!boolean=} opt_jasperMappedfile 
 * @param {!boolean=} opt_jasperTrimSpaces 
 * @param {!boolean=} opt_jasperDisplaySourceFragments 
 * @param {!boolean=} opt_defaultIsSession 
 * @param {!angular.$http.Config=} opt_extraHttpRequestParams Extra HTTP parameters to send.
 * @return {!angular.$q.Promise<!API.Client.orgApacheSlingScriptingJspJspScriptEngineFactoryInfo>}
 */
API.Client.ConfigmgrApi.prototype.orgApacheSlingScriptingJspJspScriptEngineFactory = function(opt_post, opt_apply, opt_delete, opt_action, opt_location, opt_propertylist, opt_jasperCompilerTargetVM, opt_jasperCompilerSourceVM, opt_jasperClassdebuginfo, opt_jasperEnablePooling, opt_jasperIeClassId, opt_jasperGenStringAsCharArray, opt_jasperKeepgenerated, opt_jasperMappedfile, opt_jasperTrimSpaces, opt_jasperDisplaySourceFragments, opt_defaultIsSession, opt_extraHttpRequestParams) {
  /** @const {string} */
  var path = this.basePath_ + '/system/console/configMgr/org.apache.sling.scripting.jsp.JspScriptEngineFactory';

  /** @type {!Object} */
  var queryParameters = {};

  /** @type {!Object} */
  var headerParams = angular.extend({}, this.defaultHeaders_);
  if (opt_post !== undefined) {
    queryParameters['post'] = opt_post;
  }

  if (opt_apply !== undefined) {
    queryParameters['apply'] = opt_apply;
  }

  if (opt_delete !== undefined) {
    queryParameters['delete'] = opt_delete;
  }

  if (opt_action !== undefined) {
    queryParameters['action'] = opt_action;
  }

  if (opt_location !== undefined) {
    queryParameters['$location'] = opt_location;
  }

  if (opt_propertylist !== undefined) {
    queryParameters['propertylist'] = opt_propertylist;
  }

  if (opt_jasperCompilerTargetVM !== undefined) {
    queryParameters['jasper.compilerTargetVM'] = opt_jasperCompilerTargetVM;
  }

  if (opt_jasperCompilerSourceVM !== undefined) {
    queryParameters['jasper.compilerSourceVM'] = opt_jasperCompilerSourceVM;
  }

  if (opt_jasperClassdebuginfo !== undefined) {
    queryParameters['jasper.classdebuginfo'] = opt_jasperClassdebuginfo;
  }

  if (opt_jasperEnablePooling !== undefined) {
    queryParameters['jasper.enablePooling'] = opt_jasperEnablePooling;
  }

  if (opt_jasperIeClassId !== undefined) {
    queryParameters['jasper.ieClassId'] = opt_jasperIeClassId;
  }

  if (opt_jasperGenStringAsCharArray !== undefined) {
    queryParameters['jasper.genStringAsCharArray'] = opt_jasperGenStringAsCharArray;
  }

  if (opt_jasperKeepgenerated !== undefined) {
    queryParameters['jasper.keepgenerated'] = opt_jasperKeepgenerated;
  }

  if (opt_jasperMappedfile !== undefined) {
    queryParameters['jasper.mappedfile'] = opt_jasperMappedfile;
  }

  if (opt_jasperTrimSpaces !== undefined) {
    queryParameters['jasper.trimSpaces'] = opt_jasperTrimSpaces;
  }

  if (opt_jasperDisplaySourceFragments !== undefined) {
    queryParameters['jasper.displaySourceFragments'] = opt_jasperDisplaySourceFragments;
  }

  if (opt_defaultIsSession !== undefined) {
    queryParameters['default.is.session'] = opt_defaultIsSession;
  }

  /** @type {!Object} */
  var httpRequestParams = {
    method: 'POST',
    url: path,
    json: true,
            params: queryParameters,
    headers: headerParams
  };

  if (opt_extraHttpRequestParams) {
    httpRequestParams = angular.extend(httpRequestParams, opt_extraHttpRequestParams);
  }

  return (/** @type {?} */ (this.http_))(httpRequestParams);
}

/**
 * 
 * 
 * @param {!boolean=} opt_post 
 * @param {!boolean=} opt_apply 
 * @param {!boolean=} opt_delete 
 * @param {!string=} opt_action 
 * @param {!string=} opt_location 
 * @param {!Array<!string>=} opt_propertylist 
 * @param {!Array<!string>=} opt_orgApacheSlingScriptingSightlyJsBindings 
 * @param {!angular.$http.Config=} opt_extraHttpRequestParams Extra HTTP parameters to send.
 * @return {!angular.$q.Promise<!API.Client.orgApacheSlingScriptingSightlyJsImplJsapiSlyBindingsValuesProvInfo>}
 */
API.Client.ConfigmgrApi.prototype.orgApacheSlingScriptingSightlyJsImplJsapiSlyBindingsValuesProv = function(opt_post, opt_apply, opt_delete, opt_action, opt_location, opt_propertylist, opt_orgApacheSlingScriptingSightlyJsBindings, opt_extraHttpRequestParams) {
  /** @const {string} */
  var path = this.basePath_ + '/system/console/configMgr/org.apache.sling.scripting.sightly.js.impl.jsapi.SlyBindingsValuesProvider';

  /** @type {!Object} */
  var queryParameters = {};

  /** @type {!Object} */
  var headerParams = angular.extend({}, this.defaultHeaders_);
  if (opt_post !== undefined) {
    queryParameters['post'] = opt_post;
  }

  if (opt_apply !== undefined) {
    queryParameters['apply'] = opt_apply;
  }

  if (opt_delete !== undefined) {
    queryParameters['delete'] = opt_delete;
  }

  if (opt_action !== undefined) {
    queryParameters['action'] = opt_action;
  }

  if (opt_location !== undefined) {
    queryParameters['$location'] = opt_location;
  }

  if (opt_propertylist !== undefined) {
    queryParameters['propertylist'] = opt_propertylist;
  }

  if (opt_orgApacheSlingScriptingSightlyJsBindings !== undefined) {
    queryParameters['org.apache.sling.scripting.sightly.js.bindings'] = opt_orgApacheSlingScriptingSightlyJsBindings;
  }

  /** @type {!Object} */
  var httpRequestParams = {
    method: 'POST',
    url: path,
    json: true,
            params: queryParameters,
    headers: headerParams
  };

  if (opt_extraHttpRequestParams) {
    httpRequestParams = angular.extend(httpRequestParams, opt_extraHttpRequestParams);
  }

  return (/** @type {?} */ (this.http_))(httpRequestParams);
}

/**
 * 
 * 
 * @param {!boolean=} opt_post 
 * @param {!boolean=} opt_apply 
 * @param {!boolean=} opt_delete 
 * @param {!string=} opt_action 
 * @param {!string=} opt_location 
 * @param {!Array<!string>=} opt_propertylist 
 * @param {!Array<!string>=} opt_slingContentDispositionPaths 
 * @param {!Array<!string>=} opt_slingContentDispositionExcludedPaths 
 * @param {!boolean=} opt_slingContentDispositionAllPaths 
 * @param {!angular.$http.Config=} opt_extraHttpRequestParams Extra HTTP parameters to send.
 * @return {!angular.$q.Promise<!API.Client.orgApacheSlingSecurityImplContentDispositionFilterInfo>}
 */
API.Client.ConfigmgrApi.prototype.orgApacheSlingSecurityImplContentDispositionFilter = function(opt_post, opt_apply, opt_delete, opt_action, opt_location, opt_propertylist, opt_slingContentDispositionPaths, opt_slingContentDispositionExcludedPaths, opt_slingContentDispositionAllPaths, opt_extraHttpRequestParams) {
  /** @const {string} */
  var path = this.basePath_ + '/system/console/configMgr/org.apache.sling.security.impl.ContentDispositionFilter';

  /** @type {!Object} */
  var queryParameters = {};

  /** @type {!Object} */
  var headerParams = angular.extend({}, this.defaultHeaders_);
  if (opt_post !== undefined) {
    queryParameters['post'] = opt_post;
  }

  if (opt_apply !== undefined) {
    queryParameters['apply'] = opt_apply;
  }

  if (opt_delete !== undefined) {
    queryParameters['delete'] = opt_delete;
  }

  if (opt_action !== undefined) {
    queryParameters['action'] = opt_action;
  }

  if (opt_location !== undefined) {
    queryParameters['$location'] = opt_location;
  }

  if (opt_propertylist !== undefined) {
    queryParameters['propertylist'] = opt_propertylist;
  }

  if (opt_slingContentDispositionPaths !== undefined) {
    queryParameters['sling.content.disposition.paths'] = opt_slingContentDispositionPaths;
  }

  if (opt_slingContentDispositionExcludedPaths !== undefined) {
    queryParameters['sling.content.disposition.excluded.paths'] = opt_slingContentDispositionExcludedPaths;
  }

  if (opt_slingContentDispositionAllPaths !== undefined) {
    queryParameters['sling.content.disposition.all.paths'] = opt_slingContentDispositionAllPaths;
  }

  /** @type {!Object} */
  var httpRequestParams = {
    method: 'POST',
    url: path,
    json: true,
            params: queryParameters,
    headers: headerParams
  };

  if (opt_extraHttpRequestParams) {
    httpRequestParams = angular.extend(httpRequestParams, opt_extraHttpRequestParams);
  }

  return (/** @type {?} */ (this.http_))(httpRequestParams);
}

/**
 * 
 * 
 * @param {!boolean=} opt_post 
 * @param {!boolean=} opt_apply 
 * @param {!boolean=} opt_delete 
 * @param {!string=} opt_action 
 * @param {!string=} opt_location 
 * @param {!Array<!string>=} opt_propertylist 
 * @param {!boolean=} opt_allowEmpty 
 * @param {!Array<!string>=} opt_allowHosts 
 * @param {!Array<!string>=} opt_allowHostsRegexp 
 * @param {!Array<!string>=} opt_filterMethods 
 * @param {!Array<!string>=} opt_excludeAgentsRegexp 
 * @param {!angular.$http.Config=} opt_extraHttpRequestParams Extra HTTP parameters to send.
 * @return {!angular.$q.Promise<!API.Client.orgApacheSlingSecurityImplReferrerFilterInfo>}
 */
API.Client.ConfigmgrApi.prototype.orgApacheSlingSecurityImplReferrerFilter = function(opt_post, opt_apply, opt_delete, opt_action, opt_location, opt_propertylist, opt_allowEmpty, opt_allowHosts, opt_allowHostsRegexp, opt_filterMethods, opt_excludeAgentsRegexp, opt_extraHttpRequestParams) {
  /** @const {string} */
  var path = this.basePath_ + '/system/console/configMgr/org.apache.sling.security.impl.ReferrerFilter';

  /** @type {!Object} */
  var queryParameters = {};

  /** @type {!Object} */
  var headerParams = angular.extend({}, this.defaultHeaders_);
  if (opt_post !== undefined) {
    queryParameters['post'] = opt_post;
  }

  if (opt_apply !== undefined) {
    queryParameters['apply'] = opt_apply;
  }

  if (opt_delete !== undefined) {
    queryParameters['delete'] = opt_delete;
  }

  if (opt_action !== undefined) {
    queryParameters['action'] = opt_action;
  }

  if (opt_location !== undefined) {
    queryParameters['$location'] = opt_location;
  }

  if (opt_propertylist !== undefined) {
    queryParameters['propertylist'] = opt_propertylist;
  }

  if (opt_allowEmpty !== undefined) {
    queryParameters['allow.empty'] = opt_allowEmpty;
  }

  if (opt_allowHosts !== undefined) {
    queryParameters['allow.hosts'] = opt_allowHosts;
  }

  if (opt_allowHostsRegexp !== undefined) {
    queryParameters['allow.hosts.regexp'] = opt_allowHostsRegexp;
  }

  if (opt_filterMethods !== undefined) {
    queryParameters['filter.methods'] = opt_filterMethods;
  }

  if (opt_excludeAgentsRegexp !== undefined) {
    queryParameters['exclude.agents.regexp'] = opt_excludeAgentsRegexp;
  }

  /** @type {!Object} */
  var httpRequestParams = {
    method: 'POST',
    url: path,
    json: true,
            params: queryParameters,
    headers: headerParams
  };

  if (opt_extraHttpRequestParams) {
    httpRequestParams = angular.extend(httpRequestParams, opt_extraHttpRequestParams);
  }

  return (/** @type {?} */ (this.http_))(httpRequestParams);
}

/**
 * 
 * 
 * @param {!boolean=} opt_post 
 * @param {!boolean=} opt_apply 
 * @param {!boolean=} opt_delete 
 * @param {!string=} opt_action 
 * @param {!string=} opt_location 
 * @param {!Array<!string>=} opt_propertylist 
 * @param {!Array<!string>=} opt_userMapping 
 * @param {!string=} opt_userDefault 
 * @param {!boolean=} opt_userEnableDefaultMapping 
 * @param {!boolean=} opt_requireValidation 
 * @param {!angular.$http.Config=} opt_extraHttpRequestParams Extra HTTP parameters to send.
 * @return {!angular.$q.Promise<!API.Client.orgApacheSlingServiceusermappingImplServiceUserMapperImplInfo>}
 */
API.Client.ConfigmgrApi.prototype.orgApacheSlingServiceusermappingImplServiceUserMapperImpl = function(opt_post, opt_apply, opt_delete, opt_action, opt_location, opt_propertylist, opt_userMapping, opt_userDefault, opt_userEnableDefaultMapping, opt_requireValidation, opt_extraHttpRequestParams) {
  /** @const {string} */
  var path = this.basePath_ + '/system/console/configMgr/org.apache.sling.serviceusermapping.impl.ServiceUserMapperImpl';

  /** @type {!Object} */
  var queryParameters = {};

  /** @type {!Object} */
  var headerParams = angular.extend({}, this.defaultHeaders_);
  if (opt_post !== undefined) {
    queryParameters['post'] = opt_post;
  }

  if (opt_apply !== undefined) {
    queryParameters['apply'] = opt_apply;
  }

  if (opt_delete !== undefined) {
    queryParameters['delete'] = opt_delete;
  }

  if (opt_action !== undefined) {
    queryParameters['action'] = opt_action;
  }

  if (opt_location !== undefined) {
    queryParameters['$location'] = opt_location;
  }

  if (opt_propertylist !== undefined) {
    queryParameters['propertylist'] = opt_propertylist;
  }

  if (opt_userMapping !== undefined) {
    queryParameters['user.mapping'] = opt_userMapping;
  }

  if (opt_userDefault !== undefined) {
    queryParameters['user.default'] = opt_userDefault;
  }

  if (opt_userEnableDefaultMapping !== undefined) {
    queryParameters['user.enable.default.mapping'] = opt_userEnableDefaultMapping;
  }

  if (opt_requireValidation !== undefined) {
    queryParameters['require.validation'] = opt_requireValidation;
  }

  /** @type {!Object} */
  var httpRequestParams = {
    method: 'POST',
    url: path,
    json: true,
            params: queryParameters,
    headers: headerParams
  };

  if (opt_extraHttpRequestParams) {
    httpRequestParams = angular.extend(httpRequestParams, opt_extraHttpRequestParams);
  }

  return (/** @type {?} */ (this.http_))(httpRequestParams);
}

/**
 * 
 * 
 * @param {!boolean=} opt_post 
 * @param {!boolean=} opt_apply 
 * @param {!boolean=} opt_delete 
 * @param {!string=} opt_action 
 * @param {!string=} opt_location 
 * @param {!Array<!string>=} opt_propertylist 
 * @param {!number=} opt_serviceRanking 
 * @param {!Array<!string>=} opt_userMapping 
 * @param {!angular.$http.Config=} opt_extraHttpRequestParams Extra HTTP parameters to send.
 * @return {!angular.$q.Promise<!API.Client.orgApacheSlingServiceusermappingImplServiceUserMapperImplAmendedInfo>}
 */
API.Client.ConfigmgrApi.prototype.orgApacheSlingServiceusermappingImplServiceUserMapperImplAmended = function(opt_post, opt_apply, opt_delete, opt_action, opt_location, opt_propertylist, opt_serviceRanking, opt_userMapping, opt_extraHttpRequestParams) {
  /** @const {string} */
  var path = this.basePath_ + '/system/console/configMgr/org.apache.sling.serviceusermapping.impl.ServiceUserMapperImpl.amended';

  /** @type {!Object} */
  var queryParameters = {};

  /** @type {!Object} */
  var headerParams = angular.extend({}, this.defaultHeaders_);
  if (opt_post !== undefined) {
    queryParameters['post'] = opt_post;
  }

  if (opt_apply !== undefined) {
    queryParameters['apply'] = opt_apply;
  }

  if (opt_delete !== undefined) {
    queryParameters['delete'] = opt_delete;
  }

  if (opt_action !== undefined) {
    queryParameters['action'] = opt_action;
  }

  if (opt_location !== undefined) {
    queryParameters['$location'] = opt_location;
  }

  if (opt_propertylist !== undefined) {
    queryParameters['propertylist'] = opt_propertylist;
  }

  if (opt_serviceRanking !== undefined) {
    queryParameters['service.ranking'] = opt_serviceRanking;
  }

  if (opt_userMapping !== undefined) {
    queryParameters['user.mapping'] = opt_userMapping;
  }

  /** @type {!Object} */
  var httpRequestParams = {
    method: 'POST',
    url: path,
    json: true,
            params: queryParameters,
    headers: headerParams
  };

  if (opt_extraHttpRequestParams) {
    httpRequestParams = angular.extend(httpRequestParams, opt_extraHttpRequestParams);
  }

  return (/** @type {?} */ (this.http_))(httpRequestParams);
}

/**
 * 
 * 
 * @param {!boolean=} opt_post 
 * @param {!boolean=} opt_apply 
 * @param {!boolean=} opt_delete 
 * @param {!string=} opt_action 
 * @param {!string=} opt_location 
 * @param {!Array<!string>=} opt_propertylist 
 * @param {!Array<!string>=} opt_aliases 
 * @param {!boolean=} opt_index 
 * @param {!Array<!string>=} opt_indexFiles 
 * @param {!boolean=} opt_enableHtml 
 * @param {!boolean=} opt_enableJson 
 * @param {!boolean=} opt_enableTxt 
 * @param {!boolean=} opt_enableXml 
 * @param {!number=} opt_jsonMaximumresults 
 * @param {!boolean=} opt_ecmaSuport 
 * @param {!angular.$http.Config=} opt_extraHttpRequestParams Extra HTTP parameters to send.
 * @return {!angular.$q.Promise<!API.Client.orgApacheSlingServletsGetDefaultGetServletInfo>}
 */
API.Client.ConfigmgrApi.prototype.orgApacheSlingServletsGetDefaultGetServlet = function(opt_post, opt_apply, opt_delete, opt_action, opt_location, opt_propertylist, opt_aliases, opt_index, opt_indexFiles, opt_enableHtml, opt_enableJson, opt_enableTxt, opt_enableXml, opt_jsonMaximumresults, opt_ecmaSuport, opt_extraHttpRequestParams) {
  /** @const {string} */
  var path = this.basePath_ + '/system/console/configMgr/org.apache.sling.servlets.get.DefaultGetServlet';

  /** @type {!Object} */
  var queryParameters = {};

  /** @type {!Object} */
  var headerParams = angular.extend({}, this.defaultHeaders_);
  if (opt_post !== undefined) {
    queryParameters['post'] = opt_post;
  }

  if (opt_apply !== undefined) {
    queryParameters['apply'] = opt_apply;
  }

  if (opt_delete !== undefined) {
    queryParameters['delete'] = opt_delete;
  }

  if (opt_action !== undefined) {
    queryParameters['action'] = opt_action;
  }

  if (opt_location !== undefined) {
    queryParameters['$location'] = opt_location;
  }

  if (opt_propertylist !== undefined) {
    queryParameters['propertylist'] = opt_propertylist;
  }

  if (opt_aliases !== undefined) {
    queryParameters['aliases'] = opt_aliases;
  }

  if (opt_index !== undefined) {
    queryParameters['index'] = opt_index;
  }

  if (opt_indexFiles !== undefined) {
    queryParameters['index.files'] = opt_indexFiles;
  }

  if (opt_enableHtml !== undefined) {
    queryParameters['enable.html'] = opt_enableHtml;
  }

  if (opt_enableJson !== undefined) {
    queryParameters['enable.json'] = opt_enableJson;
  }

  if (opt_enableTxt !== undefined) {
    queryParameters['enable.txt'] = opt_enableTxt;
  }

  if (opt_enableXml !== undefined) {
    queryParameters['enable.xml'] = opt_enableXml;
  }

  if (opt_jsonMaximumresults !== undefined) {
    queryParameters['json.maximumresults'] = opt_jsonMaximumresults;
  }

  if (opt_ecmaSuport !== undefined) {
    queryParameters['ecmaSuport'] = opt_ecmaSuport;
  }

  /** @type {!Object} */
  var httpRequestParams = {
    method: 'POST',
    url: path,
    json: true,
            params: queryParameters,
    headers: headerParams
  };

  if (opt_extraHttpRequestParams) {
    httpRequestParams = angular.extend(httpRequestParams, opt_extraHttpRequestParams);
  }

  return (/** @type {?} */ (this.http_))(httpRequestParams);
}

/**
 * 
 * 
 * @param {!boolean=} opt_post 
 * @param {!boolean=} opt_apply 
 * @param {!boolean=} opt_delete 
 * @param {!string=} opt_action 
 * @param {!string=} opt_location 
 * @param {!Array<!string>=} opt_propertylist 
 * @param {!Array<!string>=} opt_slingServletSelectors 
 * @param {!boolean=} opt_ecmaSuport 
 * @param {!angular.$http.Config=} opt_extraHttpRequestParams Extra HTTP parameters to send.
 * @return {!angular.$q.Promise<!API.Client.orgApacheSlingServletsGetImplVersionVersionInfoServletInfo>}
 */
API.Client.ConfigmgrApi.prototype.orgApacheSlingServletsGetImplVersionVersionInfoServlet = function(opt_post, opt_apply, opt_delete, opt_action, opt_location, opt_propertylist, opt_slingServletSelectors, opt_ecmaSuport, opt_extraHttpRequestParams) {
  /** @const {string} */
  var path = this.basePath_ + '/system/console/configMgr/org.apache.sling.servlets.get.impl.version.VersionInfoServlet';

  /** @type {!Object} */
  var queryParameters = {};

  /** @type {!Object} */
  var headerParams = angular.extend({}, this.defaultHeaders_);
  if (opt_post !== undefined) {
    queryParameters['post'] = opt_post;
  }

  if (opt_apply !== undefined) {
    queryParameters['apply'] = opt_apply;
  }

  if (opt_delete !== undefined) {
    queryParameters['delete'] = opt_delete;
  }

  if (opt_action !== undefined) {
    queryParameters['action'] = opt_action;
  }

  if (opt_location !== undefined) {
    queryParameters['$location'] = opt_location;
  }

  if (opt_propertylist !== undefined) {
    queryParameters['propertylist'] = opt_propertylist;
  }

  if (opt_slingServletSelectors !== undefined) {
    queryParameters['sling.servlet.selectors'] = opt_slingServletSelectors;
  }

  if (opt_ecmaSuport !== undefined) {
    queryParameters['ecmaSuport'] = opt_ecmaSuport;
  }

  /** @type {!Object} */
  var httpRequestParams = {
    method: 'POST',
    url: path,
    json: true,
            params: queryParameters,
    headers: headerParams
  };

  if (opt_extraHttpRequestParams) {
    httpRequestParams = angular.extend(httpRequestParams, opt_extraHttpRequestParams);
  }

  return (/** @type {?} */ (this.http_))(httpRequestParams);
}

/**
 * 
 * 
 * @param {!boolean=} opt_post 
 * @param {!boolean=} opt_apply 
 * @param {!boolean=} opt_delete 
 * @param {!string=} opt_action 
 * @param {!string=} opt_location 
 * @param {!Array<!string>=} opt_propertylist 
 * @param {!string=} opt_schedulerExpression 
 * @param {!boolean=} opt_schedulerConcurrent 
 * @param {!number=} opt_chunkCleanupAge 
 * @param {!angular.$http.Config=} opt_extraHttpRequestParams Extra HTTP parameters to send.
 * @return {!angular.$q.Promise<!API.Client.orgApacheSlingServletsPostImplHelperChunkCleanUpTaskInfo>}
 */
API.Client.ConfigmgrApi.prototype.orgApacheSlingServletsPostImplHelperChunkCleanUpTask = function(opt_post, opt_apply, opt_delete, opt_action, opt_location, opt_propertylist, opt_schedulerExpression, opt_schedulerConcurrent, opt_chunkCleanupAge, opt_extraHttpRequestParams) {
  /** @const {string} */
  var path = this.basePath_ + '/system/console/configMgr/org.apache.sling.servlets.post.impl.helper.ChunkCleanUpTask';

  /** @type {!Object} */
  var queryParameters = {};

  /** @type {!Object} */
  var headerParams = angular.extend({}, this.defaultHeaders_);
  if (opt_post !== undefined) {
    queryParameters['post'] = opt_post;
  }

  if (opt_apply !== undefined) {
    queryParameters['apply'] = opt_apply;
  }

  if (opt_delete !== undefined) {
    queryParameters['delete'] = opt_delete;
  }

  if (opt_action !== undefined) {
    queryParameters['action'] = opt_action;
  }

  if (opt_location !== undefined) {
    queryParameters['$location'] = opt_location;
  }

  if (opt_propertylist !== undefined) {
    queryParameters['propertylist'] = opt_propertylist;
  }

  if (opt_schedulerExpression !== undefined) {
    queryParameters['scheduler.expression'] = opt_schedulerExpression;
  }

  if (opt_schedulerConcurrent !== undefined) {
    queryParameters['scheduler.concurrent'] = opt_schedulerConcurrent;
  }

  if (opt_chunkCleanupAge !== undefined) {
    queryParameters['chunk.cleanup.age'] = opt_chunkCleanupAge;
  }

  /** @type {!Object} */
  var httpRequestParams = {
    method: 'POST',
    url: path,
    json: true,
            params: queryParameters,
    headers: headerParams
  };

  if (opt_extraHttpRequestParams) {
    httpRequestParams = angular.extend(httpRequestParams, opt_extraHttpRequestParams);
  }

  return (/** @type {?} */ (this.http_))(httpRequestParams);
}

/**
 * 
 * 
 * @param {!boolean=} opt_post 
 * @param {!boolean=} opt_apply 
 * @param {!boolean=} opt_delete 
 * @param {!string=} opt_action 
 * @param {!string=} opt_location 
 * @param {!Array<!string>=} opt_propertylist 
 * @param {!Array<!string>=} opt_servletPostDateFormats 
 * @param {!Array<!string>=} opt_servletPostNodeNameHints 
 * @param {!number=} opt_servletPostNodeNameMaxLength 
 * @param {!boolean=} opt_servletPostCheckinNewVersionableNodes 
 * @param {!boolean=} opt_servletPostAutoCheckout 
 * @param {!boolean=} opt_servletPostAutoCheckin 
 * @param {!string=} opt_servletPostIgnorePattern 
 * @param {!angular.$http.Config=} opt_extraHttpRequestParams Extra HTTP parameters to send.
 * @return {!angular.$q.Promise<!API.Client.orgApacheSlingServletsPostImplSlingPostServletInfo>}
 */
API.Client.ConfigmgrApi.prototype.orgApacheSlingServletsPostImplSlingPostServlet = function(opt_post, opt_apply, opt_delete, opt_action, opt_location, opt_propertylist, opt_servletPostDateFormats, opt_servletPostNodeNameHints, opt_servletPostNodeNameMaxLength, opt_servletPostCheckinNewVersionableNodes, opt_servletPostAutoCheckout, opt_servletPostAutoCheckin, opt_servletPostIgnorePattern, opt_extraHttpRequestParams) {
  /** @const {string} */
  var path = this.basePath_ + '/system/console/configMgr/org.apache.sling.servlets.post.impl.SlingPostServlet';

  /** @type {!Object} */
  var queryParameters = {};

  /** @type {!Object} */
  var headerParams = angular.extend({}, this.defaultHeaders_);
  if (opt_post !== undefined) {
    queryParameters['post'] = opt_post;
  }

  if (opt_apply !== undefined) {
    queryParameters['apply'] = opt_apply;
  }

  if (opt_delete !== undefined) {
    queryParameters['delete'] = opt_delete;
  }

  if (opt_action !== undefined) {
    queryParameters['action'] = opt_action;
  }

  if (opt_location !== undefined) {
    queryParameters['$location'] = opt_location;
  }

  if (opt_propertylist !== undefined) {
    queryParameters['propertylist'] = opt_propertylist;
  }

  if (opt_servletPostDateFormats !== undefined) {
    queryParameters['servlet.post.dateFormats'] = opt_servletPostDateFormats;
  }

  if (opt_servletPostNodeNameHints !== undefined) {
    queryParameters['servlet.post.nodeNameHints'] = opt_servletPostNodeNameHints;
  }

  if (opt_servletPostNodeNameMaxLength !== undefined) {
    queryParameters['servlet.post.nodeNameMaxLength'] = opt_servletPostNodeNameMaxLength;
  }

  if (opt_servletPostCheckinNewVersionableNodes !== undefined) {
    queryParameters['servlet.post.checkinNewVersionableNodes'] = opt_servletPostCheckinNewVersionableNodes;
  }

  if (opt_servletPostAutoCheckout !== undefined) {
    queryParameters['servlet.post.autoCheckout'] = opt_servletPostAutoCheckout;
  }

  if (opt_servletPostAutoCheckin !== undefined) {
    queryParameters['servlet.post.autoCheckin'] = opt_servletPostAutoCheckin;
  }

  if (opt_servletPostIgnorePattern !== undefined) {
    queryParameters['servlet.post.ignorePattern'] = opt_servletPostIgnorePattern;
  }

  /** @type {!Object} */
  var httpRequestParams = {
    method: 'POST',
    url: path,
    json: true,
            params: queryParameters,
    headers: headerParams
  };

  if (opt_extraHttpRequestParams) {
    httpRequestParams = angular.extend(httpRequestParams, opt_extraHttpRequestParams);
  }

  return (/** @type {?} */ (this.http_))(httpRequestParams);
}

/**
 * 
 * 
 * @param {!boolean=} opt_post 
 * @param {!boolean=} opt_apply 
 * @param {!boolean=} opt_delete 
 * @param {!string=} opt_action 
 * @param {!string=} opt_location 
 * @param {!Array<!string>=} opt_propertylist 
 * @param {!string=} opt_servletresolverServletRoot 
 * @param {!number=} opt_servletresolverCacheSize 
 * @param {!Array<!string>=} opt_servletresolverPaths 
 * @param {!Array<!string>=} opt_servletresolverDefaultExtensions 
 * @param {!angular.$http.Config=} opt_extraHttpRequestParams Extra HTTP parameters to send.
 * @return {!angular.$q.Promise<!API.Client.orgApacheSlingServletsResolverSlingServletResolverInfo>}
 */
API.Client.ConfigmgrApi.prototype.orgApacheSlingServletsResolverSlingServletResolver = function(opt_post, opt_apply, opt_delete, opt_action, opt_location, opt_propertylist, opt_servletresolverServletRoot, opt_servletresolverCacheSize, opt_servletresolverPaths, opt_servletresolverDefaultExtensions, opt_extraHttpRequestParams) {
  /** @const {string} */
  var path = this.basePath_ + '/system/console/configMgr/org.apache.sling.servlets.resolver.SlingServletResolver';

  /** @type {!Object} */
  var queryParameters = {};

  /** @type {!Object} */
  var headerParams = angular.extend({}, this.defaultHeaders_);
  if (opt_post !== undefined) {
    queryParameters['post'] = opt_post;
  }

  if (opt_apply !== undefined) {
    queryParameters['apply'] = opt_apply;
  }

  if (opt_delete !== undefined) {
    queryParameters['delete'] = opt_delete;
  }

  if (opt_action !== undefined) {
    queryParameters['action'] = opt_action;
  }

  if (opt_location !== undefined) {
    queryParameters['$location'] = opt_location;
  }

  if (opt_propertylist !== undefined) {
    queryParameters['propertylist'] = opt_propertylist;
  }

  if (opt_servletresolverServletRoot !== undefined) {
    queryParameters['servletresolver.servletRoot'] = opt_servletresolverServletRoot;
  }

  if (opt_servletresolverCacheSize !== undefined) {
    queryParameters['servletresolver.cacheSize'] = opt_servletresolverCacheSize;
  }

  if (opt_servletresolverPaths !== undefined) {
    queryParameters['servletresolver.paths'] = opt_servletresolverPaths;
  }

  if (opt_servletresolverDefaultExtensions !== undefined) {
    queryParameters['servletresolver.defaultExtensions'] = opt_servletresolverDefaultExtensions;
  }

  /** @type {!Object} */
  var httpRequestParams = {
    method: 'POST',
    url: path,
    json: true,
            params: queryParameters,
    headers: headerParams
  };

  if (opt_extraHttpRequestParams) {
    httpRequestParams = angular.extend(httpRequestParams, opt_extraHttpRequestParams);
  }

  return (/** @type {?} */ (this.http_))(httpRequestParams);
}

/**
 * 
 * 
 * @param {!boolean=} opt_post 
 * @param {!boolean=} opt_apply 
 * @param {!boolean=} opt_delete 
 * @param {!string=} opt_action 
 * @param {!string=} opt_location 
 * @param {!Array<!string>=} opt_propertylist 
 * @param {!string=} opt_slingName 
 * @param {!string=} opt_slingDescription 
 * @param {!angular.$http.Config=} opt_extraHttpRequestParams Extra HTTP parameters to send.
 * @return {!angular.$q.Promise<!API.Client.orgApacheSlingSettingsImplSlingSettingsServiceImplInfo>}
 */
API.Client.ConfigmgrApi.prototype.orgApacheSlingSettingsImplSlingSettingsServiceImpl = function(opt_post, opt_apply, opt_delete, opt_action, opt_location, opt_propertylist, opt_slingName, opt_slingDescription, opt_extraHttpRequestParams) {
  /** @const {string} */
  var path = this.basePath_ + '/system/console/configMgr/org.apache.sling.settings.impl.SlingSettingsServiceImpl';

  /** @type {!Object} */
  var queryParameters = {};

  /** @type {!Object} */
  var headerParams = angular.extend({}, this.defaultHeaders_);
  if (opt_post !== undefined) {
    queryParameters['post'] = opt_post;
  }

  if (opt_apply !== undefined) {
    queryParameters['apply'] = opt_apply;
  }

  if (opt_delete !== undefined) {
    queryParameters['delete'] = opt_delete;
  }

  if (opt_action !== undefined) {
    queryParameters['action'] = opt_action;
  }

  if (opt_location !== undefined) {
    queryParameters['$location'] = opt_location;
  }

  if (opt_propertylist !== undefined) {
    queryParameters['propertylist'] = opt_propertylist;
  }

  if (opt_slingName !== undefined) {
    queryParameters['sling.name'] = opt_slingName;
  }

  if (opt_slingDescription !== undefined) {
    queryParameters['sling.description'] = opt_slingDescription;
  }

  /** @type {!Object} */
  var httpRequestParams = {
    method: 'POST',
    url: path,
    json: true,
            params: queryParameters,
    headers: headerParams
  };

  if (opt_extraHttpRequestParams) {
    httpRequestParams = angular.extend(httpRequestParams, opt_extraHttpRequestParams);
  }

  return (/** @type {?} */ (this.http_))(httpRequestParams);
}

/**
 * 
 * 
 * @param {!boolean=} opt_post 
 * @param {!boolean=} opt_apply 
 * @param {!boolean=} opt_delete 
 * @param {!string=} opt_action 
 * @param {!string=} opt_location 
 * @param {!Array<!string>=} opt_propertylist 
 * @param {!boolean=} opt_activeByDefault 
 * @param {!string=} opt_defaultMessage 
 * @param {!angular.$http.Config=} opt_extraHttpRequestParams Extra HTTP parameters to send.
 * @return {!angular.$q.Promise<!API.Client.orgApacheSlingStartupfilterImplStartupFilterImplInfo>}
 */
API.Client.ConfigmgrApi.prototype.orgApacheSlingStartupfilterImplStartupFilterImpl = function(opt_post, opt_apply, opt_delete, opt_action, opt_location, opt_propertylist, opt_activeByDefault, opt_defaultMessage, opt_extraHttpRequestParams) {
  /** @const {string} */
  var path = this.basePath_ + '/system/console/configMgr/org.apache.sling.startupfilter.impl.StartupFilterImpl';

  /** @type {!Object} */
  var queryParameters = {};

  /** @type {!Object} */
  var headerParams = angular.extend({}, this.defaultHeaders_);
  if (opt_post !== undefined) {
    queryParameters['post'] = opt_post;
  }

  if (opt_apply !== undefined) {
    queryParameters['apply'] = opt_apply;
  }

  if (opt_delete !== undefined) {
    queryParameters['delete'] = opt_delete;
  }

  if (opt_action !== undefined) {
    queryParameters['action'] = opt_action;
  }

  if (opt_location !== undefined) {
    queryParameters['$location'] = opt_location;
  }

  if (opt_propertylist !== undefined) {
    queryParameters['propertylist'] = opt_propertylist;
  }

  if (opt_activeByDefault !== undefined) {
    queryParameters['active.by.default'] = opt_activeByDefault;
  }

  if (opt_defaultMessage !== undefined) {
    queryParameters['default.message'] = opt_defaultMessage;
  }

  /** @type {!Object} */
  var httpRequestParams = {
    method: 'POST',
    url: path,
    json: true,
            params: queryParameters,
    headers: headerParams
  };

  if (opt_extraHttpRequestParams) {
    httpRequestParams = angular.extend(httpRequestParams, opt_extraHttpRequestParams);
  }

  return (/** @type {?} */ (this.http_))(httpRequestParams);
}

/**
 * 
 * 
 * @param {!boolean=} opt_post 
 * @param {!boolean=} opt_apply 
 * @param {!boolean=} opt_delete 
 * @param {!string=} opt_action 
 * @param {!string=} opt_location 
 * @param {!Array<!string>=} opt_propertylist 
 * @param {!string=} opt_tenantRoot 
 * @param {!Array<!string>=} opt_tenantPathMatcher 
 * @param {!angular.$http.Config=} opt_extraHttpRequestParams Extra HTTP parameters to send.
 * @return {!angular.$q.Promise<!API.Client.orgApacheSlingTenantInternalTenantProviderImplInfo>}
 */
API.Client.ConfigmgrApi.prototype.orgApacheSlingTenantInternalTenantProviderImpl = function(opt_post, opt_apply, opt_delete, opt_action, opt_location, opt_propertylist, opt_tenantRoot, opt_tenantPathMatcher, opt_extraHttpRequestParams) {
  /** @const {string} */
  var path = this.basePath_ + '/system/console/configMgr/org.apache.sling.tenant.internal.TenantProviderImpl';

  /** @type {!Object} */
  var queryParameters = {};

  /** @type {!Object} */
  var headerParams = angular.extend({}, this.defaultHeaders_);
  if (opt_post !== undefined) {
    queryParameters['post'] = opt_post;
  }

  if (opt_apply !== undefined) {
    queryParameters['apply'] = opt_apply;
  }

  if (opt_delete !== undefined) {
    queryParameters['delete'] = opt_delete;
  }

  if (opt_action !== undefined) {
    queryParameters['action'] = opt_action;
  }

  if (opt_location !== undefined) {
    queryParameters['$location'] = opt_location;
  }

  if (opt_propertylist !== undefined) {
    queryParameters['propertylist'] = opt_propertylist;
  }

  if (opt_tenantRoot !== undefined) {
    queryParameters['tenant.root'] = opt_tenantRoot;
  }

  if (opt_tenantPathMatcher !== undefined) {
    queryParameters['tenant.path.matcher'] = opt_tenantPathMatcher;
  }

  /** @type {!Object} */
  var httpRequestParams = {
    method: 'POST',
    url: path,
    json: true,
            params: queryParameters,
    headers: headerParams
  };

  if (opt_extraHttpRequestParams) {
    httpRequestParams = angular.extend(httpRequestParams, opt_extraHttpRequestParams);
  }

  return (/** @type {?} */ (this.http_))(httpRequestParams);
}

/**
 * 
 * 
 * @param {!boolean=} opt_post 
 * @param {!boolean=} opt_apply 
 * @param {!boolean=} opt_delete 
 * @param {!string=} opt_action 
 * @param {!string=} opt_location 
 * @param {!Array<!string>=} opt_propertylist 
 * @param {!Array<!string>=} opt_tracerSets 
 * @param {!boolean=} opt_enabled 
 * @param {!boolean=} opt_servletEnabled 
 * @param {!number=} opt_recordingCacheSizeInMB 
 * @param {!number=} opt_recordingCacheDurationInSecs 
 * @param {!boolean=} opt_recordingCompressionEnabled 
 * @param {!boolean=} opt_gzipResponse 
 * @param {!angular.$http.Config=} opt_extraHttpRequestParams Extra HTTP parameters to send.
 * @return {!angular.$q.Promise<!API.Client.orgApacheSlingTracerInternalLogTracerInfo>}
 */
API.Client.ConfigmgrApi.prototype.orgApacheSlingTracerInternalLogTracer = function(opt_post, opt_apply, opt_delete, opt_action, opt_location, opt_propertylist, opt_tracerSets, opt_enabled, opt_servletEnabled, opt_recordingCacheSizeInMB, opt_recordingCacheDurationInSecs, opt_recordingCompressionEnabled, opt_gzipResponse, opt_extraHttpRequestParams) {
  /** @const {string} */
  var path = this.basePath_ + '/system/console/configMgr/org.apache.sling.tracer.internal.LogTracer';

  /** @type {!Object} */
  var queryParameters = {};

  /** @type {!Object} */
  var headerParams = angular.extend({}, this.defaultHeaders_);
  if (opt_post !== undefined) {
    queryParameters['post'] = opt_post;
  }

  if (opt_apply !== undefined) {
    queryParameters['apply'] = opt_apply;
  }

  if (opt_delete !== undefined) {
    queryParameters['delete'] = opt_delete;
  }

  if (opt_action !== undefined) {
    queryParameters['action'] = opt_action;
  }

  if (opt_location !== undefined) {
    queryParameters['$location'] = opt_location;
  }

  if (opt_propertylist !== undefined) {
    queryParameters['propertylist'] = opt_propertylist;
  }

  if (opt_tracerSets !== undefined) {
    queryParameters['tracerSets'] = opt_tracerSets;
  }

  if (opt_enabled !== undefined) {
    queryParameters['enabled'] = opt_enabled;
  }

  if (opt_servletEnabled !== undefined) {
    queryParameters['servletEnabled'] = opt_servletEnabled;
  }

  if (opt_recordingCacheSizeInMB !== undefined) {
    queryParameters['recordingCacheSizeInMB'] = opt_recordingCacheSizeInMB;
  }

  if (opt_recordingCacheDurationInSecs !== undefined) {
    queryParameters['recordingCacheDurationInSecs'] = opt_recordingCacheDurationInSecs;
  }

  if (opt_recordingCompressionEnabled !== undefined) {
    queryParameters['recordingCompressionEnabled'] = opt_recordingCompressionEnabled;
  }

  if (opt_gzipResponse !== undefined) {
    queryParameters['gzipResponse'] = opt_gzipResponse;
  }

  /** @type {!Object} */
  var httpRequestParams = {
    method: 'POST',
    url: path,
    json: true,
            params: queryParameters,
    headers: headerParams
  };

  if (opt_extraHttpRequestParams) {
    httpRequestParams = angular.extend(httpRequestParams, opt_extraHttpRequestParams);
  }

  return (/** @type {?} */ (this.http_))(httpRequestParams);
}

/**
 * 
 * 
 * @param {!boolean=} opt_post 
 * @param {!boolean=} opt_apply 
 * @param {!boolean=} opt_delete 
 * @param {!string=} opt_action 
 * @param {!string=} opt_location 
 * @param {!Array<!string>=} opt_propertylist 
 * @param {!string=} opt_policyPath 
 * @param {!angular.$http.Config=} opt_extraHttpRequestParams Extra HTTP parameters to send.
 * @return {!angular.$q.Promise<!API.Client.orgApacheSlingXssImplXSSFilterImplInfo>}
 */
API.Client.ConfigmgrApi.prototype.orgApacheSlingXssImplXSSFilterImpl = function(opt_post, opt_apply, opt_delete, opt_action, opt_location, opt_propertylist, opt_policyPath, opt_extraHttpRequestParams) {
  /** @const {string} */
  var path = this.basePath_ + '/system/console/configMgr/org.apache.sling.xss.impl.XSSFilterImpl';

  /** @type {!Object} */
  var queryParameters = {};

  /** @type {!Object} */
  var headerParams = angular.extend({}, this.defaultHeaders_);
  if (opt_post !== undefined) {
    queryParameters['post'] = opt_post;
  }

  if (opt_apply !== undefined) {
    queryParameters['apply'] = opt_apply;
  }

  if (opt_delete !== undefined) {
    queryParameters['delete'] = opt_delete;
  }

  if (opt_action !== undefined) {
    queryParameters['action'] = opt_action;
  }

  if (opt_location !== undefined) {
    queryParameters['$location'] = opt_location;
  }

  if (opt_propertylist !== undefined) {
    queryParameters['propertylist'] = opt_propertylist;
  }

  if (opt_policyPath !== undefined) {
    queryParameters['policyPath'] = opt_policyPath;
  }

  /** @type {!Object} */
  var httpRequestParams = {
    method: 'POST',
    url: path,
    json: true,
            params: queryParameters,
    headers: headerParams
  };

  if (opt_extraHttpRequestParams) {
    httpRequestParams = angular.extend(httpRequestParams, opt_extraHttpRequestParams);
  }

  return (/** @type {?} */ (this.http_))(httpRequestParams);
}
