/* 
 * Adobe Experience Manager OSGI config (AEM) API
 *
 * Swagger AEM OSGI is an OpenAPI specification for Adobe Experience Manager (AEM) OSGI Configurations API
 *
 * OpenAPI spec version: 1.0.0-pre.0
 * Contact: opensource@shinesolutions.com
 * Generated by: https://openapi-generator.tech
 */


#[allow(unused_imports)]
use serde_json::Value;

#[derive(Debug, Serialize, Deserialize)]
pub struct ComAdobeCqSocialCommonsEmailreplyImplEmailReplyConfigurationImpProperties {
  #[serde(rename = "email.name")]
  email_name: Option<::models::ConfigNodePropertyString>,
  #[serde(rename = "email.createPostFromReply")]
  email_create_post_from_reply: Option<::models::ConfigNodePropertyBoolean>,
  #[serde(rename = "email.addCommentIdTo")]
  email_add_comment_id_to: Option<::models::ConfigNodePropertyDropDown>,
  #[serde(rename = "email.subjectMaximumLength")]
  email_subject_maximum_length: Option<::models::ConfigNodePropertyInteger>,
  #[serde(rename = "email.replyToAddress")]
  email_reply_to_address: Option<::models::ConfigNodePropertyString>,
  #[serde(rename = "email.replyToDelimiter")]
  email_reply_to_delimiter: Option<::models::ConfigNodePropertyString>,
  #[serde(rename = "email.trackerIdPrefixInSubject")]
  email_tracker_id_prefix_in_subject: Option<::models::ConfigNodePropertyString>,
  #[serde(rename = "email.trackerIdPrefixInBody")]
  email_tracker_id_prefix_in_body: Option<::models::ConfigNodePropertyString>,
  #[serde(rename = "email.asHTML")]
  email_as_html: Option<::models::ConfigNodePropertyBoolean>,
  #[serde(rename = "email.defaultUserName")]
  email_default_user_name: Option<::models::ConfigNodePropertyString>,
  #[serde(rename = "email.templates.rootPath")]
  email_templates_root_path: Option<::models::ConfigNodePropertyString>
}

impl ComAdobeCqSocialCommonsEmailreplyImplEmailReplyConfigurationImpProperties {
  pub fn new() -> ComAdobeCqSocialCommonsEmailreplyImplEmailReplyConfigurationImpProperties {
    ComAdobeCqSocialCommonsEmailreplyImplEmailReplyConfigurationImpProperties {
      email_name: None,
      email_create_post_from_reply: None,
      email_add_comment_id_to: None,
      email_subject_maximum_length: None,
      email_reply_to_address: None,
      email_reply_to_delimiter: None,
      email_tracker_id_prefix_in_subject: None,
      email_tracker_id_prefix_in_body: None,
      email_as_html: None,
      email_default_user_name: None,
      email_templates_root_path: None
    }
  }

  pub fn set_email_name(&mut self, email_name: ::models::ConfigNodePropertyString) {
    self.email_name = Some(email_name);
  }

  pub fn with_email_name(mut self, email_name: ::models::ConfigNodePropertyString) -> ComAdobeCqSocialCommonsEmailreplyImplEmailReplyConfigurationImpProperties {
    self.email_name = Some(email_name);
    self
  }

  pub fn email_name(&self) -> Option<&::models::ConfigNodePropertyString> {
    self.email_name.as_ref()
  }

  pub fn reset_email_name(&mut self) {
    self.email_name = None;
  }

  pub fn set_email_create_post_from_reply(&mut self, email_create_post_from_reply: ::models::ConfigNodePropertyBoolean) {
    self.email_create_post_from_reply = Some(email_create_post_from_reply);
  }

  pub fn with_email_create_post_from_reply(mut self, email_create_post_from_reply: ::models::ConfigNodePropertyBoolean) -> ComAdobeCqSocialCommonsEmailreplyImplEmailReplyConfigurationImpProperties {
    self.email_create_post_from_reply = Some(email_create_post_from_reply);
    self
  }

  pub fn email_create_post_from_reply(&self) -> Option<&::models::ConfigNodePropertyBoolean> {
    self.email_create_post_from_reply.as_ref()
  }

  pub fn reset_email_create_post_from_reply(&mut self) {
    self.email_create_post_from_reply = None;
  }

  pub fn set_email_add_comment_id_to(&mut self, email_add_comment_id_to: ::models::ConfigNodePropertyDropDown) {
    self.email_add_comment_id_to = Some(email_add_comment_id_to);
  }

  pub fn with_email_add_comment_id_to(mut self, email_add_comment_id_to: ::models::ConfigNodePropertyDropDown) -> ComAdobeCqSocialCommonsEmailreplyImplEmailReplyConfigurationImpProperties {
    self.email_add_comment_id_to = Some(email_add_comment_id_to);
    self
  }

  pub fn email_add_comment_id_to(&self) -> Option<&::models::ConfigNodePropertyDropDown> {
    self.email_add_comment_id_to.as_ref()
  }

  pub fn reset_email_add_comment_id_to(&mut self) {
    self.email_add_comment_id_to = None;
  }

  pub fn set_email_subject_maximum_length(&mut self, email_subject_maximum_length: ::models::ConfigNodePropertyInteger) {
    self.email_subject_maximum_length = Some(email_subject_maximum_length);
  }

  pub fn with_email_subject_maximum_length(mut self, email_subject_maximum_length: ::models::ConfigNodePropertyInteger) -> ComAdobeCqSocialCommonsEmailreplyImplEmailReplyConfigurationImpProperties {
    self.email_subject_maximum_length = Some(email_subject_maximum_length);
    self
  }

  pub fn email_subject_maximum_length(&self) -> Option<&::models::ConfigNodePropertyInteger> {
    self.email_subject_maximum_length.as_ref()
  }

  pub fn reset_email_subject_maximum_length(&mut self) {
    self.email_subject_maximum_length = None;
  }

  pub fn set_email_reply_to_address(&mut self, email_reply_to_address: ::models::ConfigNodePropertyString) {
    self.email_reply_to_address = Some(email_reply_to_address);
  }

  pub fn with_email_reply_to_address(mut self, email_reply_to_address: ::models::ConfigNodePropertyString) -> ComAdobeCqSocialCommonsEmailreplyImplEmailReplyConfigurationImpProperties {
    self.email_reply_to_address = Some(email_reply_to_address);
    self
  }

  pub fn email_reply_to_address(&self) -> Option<&::models::ConfigNodePropertyString> {
    self.email_reply_to_address.as_ref()
  }

  pub fn reset_email_reply_to_address(&mut self) {
    self.email_reply_to_address = None;
  }

  pub fn set_email_reply_to_delimiter(&mut self, email_reply_to_delimiter: ::models::ConfigNodePropertyString) {
    self.email_reply_to_delimiter = Some(email_reply_to_delimiter);
  }

  pub fn with_email_reply_to_delimiter(mut self, email_reply_to_delimiter: ::models::ConfigNodePropertyString) -> ComAdobeCqSocialCommonsEmailreplyImplEmailReplyConfigurationImpProperties {
    self.email_reply_to_delimiter = Some(email_reply_to_delimiter);
    self
  }

  pub fn email_reply_to_delimiter(&self) -> Option<&::models::ConfigNodePropertyString> {
    self.email_reply_to_delimiter.as_ref()
  }

  pub fn reset_email_reply_to_delimiter(&mut self) {
    self.email_reply_to_delimiter = None;
  }

  pub fn set_email_tracker_id_prefix_in_subject(&mut self, email_tracker_id_prefix_in_subject: ::models::ConfigNodePropertyString) {
    self.email_tracker_id_prefix_in_subject = Some(email_tracker_id_prefix_in_subject);
  }

  pub fn with_email_tracker_id_prefix_in_subject(mut self, email_tracker_id_prefix_in_subject: ::models::ConfigNodePropertyString) -> ComAdobeCqSocialCommonsEmailreplyImplEmailReplyConfigurationImpProperties {
    self.email_tracker_id_prefix_in_subject = Some(email_tracker_id_prefix_in_subject);
    self
  }

  pub fn email_tracker_id_prefix_in_subject(&self) -> Option<&::models::ConfigNodePropertyString> {
    self.email_tracker_id_prefix_in_subject.as_ref()
  }

  pub fn reset_email_tracker_id_prefix_in_subject(&mut self) {
    self.email_tracker_id_prefix_in_subject = None;
  }

  pub fn set_email_tracker_id_prefix_in_body(&mut self, email_tracker_id_prefix_in_body: ::models::ConfigNodePropertyString) {
    self.email_tracker_id_prefix_in_body = Some(email_tracker_id_prefix_in_body);
  }

  pub fn with_email_tracker_id_prefix_in_body(mut self, email_tracker_id_prefix_in_body: ::models::ConfigNodePropertyString) -> ComAdobeCqSocialCommonsEmailreplyImplEmailReplyConfigurationImpProperties {
    self.email_tracker_id_prefix_in_body = Some(email_tracker_id_prefix_in_body);
    self
  }

  pub fn email_tracker_id_prefix_in_body(&self) -> Option<&::models::ConfigNodePropertyString> {
    self.email_tracker_id_prefix_in_body.as_ref()
  }

  pub fn reset_email_tracker_id_prefix_in_body(&mut self) {
    self.email_tracker_id_prefix_in_body = None;
  }

  pub fn set_email_as_html(&mut self, email_as_html: ::models::ConfigNodePropertyBoolean) {
    self.email_as_html = Some(email_as_html);
  }

  pub fn with_email_as_html(mut self, email_as_html: ::models::ConfigNodePropertyBoolean) -> ComAdobeCqSocialCommonsEmailreplyImplEmailReplyConfigurationImpProperties {
    self.email_as_html = Some(email_as_html);
    self
  }

  pub fn email_as_html(&self) -> Option<&::models::ConfigNodePropertyBoolean> {
    self.email_as_html.as_ref()
  }

  pub fn reset_email_as_html(&mut self) {
    self.email_as_html = None;
  }

  pub fn set_email_default_user_name(&mut self, email_default_user_name: ::models::ConfigNodePropertyString) {
    self.email_default_user_name = Some(email_default_user_name);
  }

  pub fn with_email_default_user_name(mut self, email_default_user_name: ::models::ConfigNodePropertyString) -> ComAdobeCqSocialCommonsEmailreplyImplEmailReplyConfigurationImpProperties {
    self.email_default_user_name = Some(email_default_user_name);
    self
  }

  pub fn email_default_user_name(&self) -> Option<&::models::ConfigNodePropertyString> {
    self.email_default_user_name.as_ref()
  }

  pub fn reset_email_default_user_name(&mut self) {
    self.email_default_user_name = None;
  }

  pub fn set_email_templates_root_path(&mut self, email_templates_root_path: ::models::ConfigNodePropertyString) {
    self.email_templates_root_path = Some(email_templates_root_path);
  }

  pub fn with_email_templates_root_path(mut self, email_templates_root_path: ::models::ConfigNodePropertyString) -> ComAdobeCqSocialCommonsEmailreplyImplEmailReplyConfigurationImpProperties {
    self.email_templates_root_path = Some(email_templates_root_path);
    self
  }

  pub fn email_templates_root_path(&self) -> Option<&::models::ConfigNodePropertyString> {
    self.email_templates_root_path.as_ref()
  }

  pub fn reset_email_templates_root_path(&mut self) {
    self.email_templates_root_path = None;
  }

}



