/**
* Adobe Experience Manager OSGI config (AEM) API
* Swagger AEM OSGI is an OpenAPI specification for Adobe Experience Manager (AEM) OSGI Configurations API
*
* OpenAPI spec version: 1.0.0-pre.0
* Contact: opensource@shinesolutions.com
*
* NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
* https://openapi-generator.tech
* Do not edit the class manually.
*/


#include "ComDayCqDamCoreImplDamEventPurgeServiceProperties.h"

namespace org {
namespace openapitools {
namespace server {
namespace model {

ComDayCqDamCoreImplDamEventPurgeServiceProperties::ComDayCqDamCoreImplDamEventPurgeServiceProperties()
{
    m_Scheduler_expressionIsSet = false;
    m_MaxSavedActivitiesIsSet = false;
    m_SaveIntervalIsSet = false;
    m_EnableActivityPurgeIsSet = false;
    m_EventTypesIsSet = false;
    
}

ComDayCqDamCoreImplDamEventPurgeServiceProperties::~ComDayCqDamCoreImplDamEventPurgeServiceProperties()
{
}

void ComDayCqDamCoreImplDamEventPurgeServiceProperties::validate()
{
    // TODO: implement validation
}

nlohmann::json ComDayCqDamCoreImplDamEventPurgeServiceProperties::toJson() const
{
    nlohmann::json val = nlohmann::json::object();

    if(m_Scheduler_expressionIsSet)
    {
        val["scheduler.expression"] = ModelBase::toJson(m_Scheduler_expression);
    }
    if(m_MaxSavedActivitiesIsSet)
    {
        val["maxSavedActivities"] = ModelBase::toJson(m_MaxSavedActivities);
    }
    if(m_SaveIntervalIsSet)
    {
        val["saveInterval"] = ModelBase::toJson(m_SaveInterval);
    }
    if(m_EnableActivityPurgeIsSet)
    {
        val["enableActivityPurge"] = ModelBase::toJson(m_EnableActivityPurge);
    }
    if(m_EventTypesIsSet)
    {
        val["eventTypes"] = ModelBase::toJson(m_EventTypes);
    }
    

    return val;
}

void ComDayCqDamCoreImplDamEventPurgeServiceProperties::fromJson(nlohmann::json& val)
{
    if(val.find("scheduler.expression") != val.end())
    {
        if(!val["scheduler.expression"].is_null())
        {
            ConfigNodePropertyString newItem;
            newItem.fromJson(val["scheduler.expression"]);
            setSchedulerExpression( newItem );
        }
        
    }
    if(val.find("maxSavedActivities") != val.end())
    {
        if(!val["maxSavedActivities"].is_null())
        {
            ConfigNodePropertyInteger newItem;
            newItem.fromJson(val["maxSavedActivities"]);
            setMaxSavedActivities( newItem );
        }
        
    }
    if(val.find("saveInterval") != val.end())
    {
        if(!val["saveInterval"].is_null())
        {
            ConfigNodePropertyInteger newItem;
            newItem.fromJson(val["saveInterval"]);
            setSaveInterval( newItem );
        }
        
    }
    if(val.find("enableActivityPurge") != val.end())
    {
        if(!val["enableActivityPurge"].is_null())
        {
            ConfigNodePropertyBoolean newItem;
            newItem.fromJson(val["enableActivityPurge"]);
            setEnableActivityPurge( newItem );
        }
        
    }
    if(val.find("eventTypes") != val.end())
    {
        if(!val["eventTypes"].is_null())
        {
            ConfigNodePropertyDropDown newItem;
            newItem.fromJson(val["eventTypes"]);
            setEventTypes( newItem );
        }
        
    }
    
}


ConfigNodePropertyString ComDayCqDamCoreImplDamEventPurgeServiceProperties::getSchedulerExpression() const
{
    return m_Scheduler_expression;
}
void ComDayCqDamCoreImplDamEventPurgeServiceProperties::setSchedulerExpression(ConfigNodePropertyString const& value)
{
    m_Scheduler_expression = value;
    m_Scheduler_expressionIsSet = true;
}
bool ComDayCqDamCoreImplDamEventPurgeServiceProperties::schedulerExpressionIsSet() const
{
    return m_Scheduler_expressionIsSet;
}
void ComDayCqDamCoreImplDamEventPurgeServiceProperties::unsetScheduler_expression()
{
    m_Scheduler_expressionIsSet = false;
}
ConfigNodePropertyInteger ComDayCqDamCoreImplDamEventPurgeServiceProperties::getMaxSavedActivities() const
{
    return m_MaxSavedActivities;
}
void ComDayCqDamCoreImplDamEventPurgeServiceProperties::setMaxSavedActivities(ConfigNodePropertyInteger const& value)
{
    m_MaxSavedActivities = value;
    m_MaxSavedActivitiesIsSet = true;
}
bool ComDayCqDamCoreImplDamEventPurgeServiceProperties::maxSavedActivitiesIsSet() const
{
    return m_MaxSavedActivitiesIsSet;
}
void ComDayCqDamCoreImplDamEventPurgeServiceProperties::unsetMaxSavedActivities()
{
    m_MaxSavedActivitiesIsSet = false;
}
ConfigNodePropertyInteger ComDayCqDamCoreImplDamEventPurgeServiceProperties::getSaveInterval() const
{
    return m_SaveInterval;
}
void ComDayCqDamCoreImplDamEventPurgeServiceProperties::setSaveInterval(ConfigNodePropertyInteger const& value)
{
    m_SaveInterval = value;
    m_SaveIntervalIsSet = true;
}
bool ComDayCqDamCoreImplDamEventPurgeServiceProperties::saveIntervalIsSet() const
{
    return m_SaveIntervalIsSet;
}
void ComDayCqDamCoreImplDamEventPurgeServiceProperties::unsetSaveInterval()
{
    m_SaveIntervalIsSet = false;
}
ConfigNodePropertyBoolean ComDayCqDamCoreImplDamEventPurgeServiceProperties::getEnableActivityPurge() const
{
    return m_EnableActivityPurge;
}
void ComDayCqDamCoreImplDamEventPurgeServiceProperties::setEnableActivityPurge(ConfigNodePropertyBoolean const& value)
{
    m_EnableActivityPurge = value;
    m_EnableActivityPurgeIsSet = true;
}
bool ComDayCqDamCoreImplDamEventPurgeServiceProperties::enableActivityPurgeIsSet() const
{
    return m_EnableActivityPurgeIsSet;
}
void ComDayCqDamCoreImplDamEventPurgeServiceProperties::unsetEnableActivityPurge()
{
    m_EnableActivityPurgeIsSet = false;
}
ConfigNodePropertyDropDown ComDayCqDamCoreImplDamEventPurgeServiceProperties::getEventTypes() const
{
    return m_EventTypes;
}
void ComDayCqDamCoreImplDamEventPurgeServiceProperties::setEventTypes(ConfigNodePropertyDropDown const& value)
{
    m_EventTypes = value;
    m_EventTypesIsSet = true;
}
bool ComDayCqDamCoreImplDamEventPurgeServiceProperties::eventTypesIsSet() const
{
    return m_EventTypesIsSet;
}
void ComDayCqDamCoreImplDamEventPurgeServiceProperties::unsetEventTypes()
{
    m_EventTypesIsSet = false;
}

}
}
}
}

