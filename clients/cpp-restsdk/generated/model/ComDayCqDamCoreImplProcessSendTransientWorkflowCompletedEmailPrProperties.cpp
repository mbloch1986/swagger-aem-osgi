/**
 * Adobe Experience Manager OSGI config (AEM) API
 * Swagger AEM OSGI is an OpenAPI specification for Adobe Experience Manager (AEM) OSGI Configurations API
 *
 * OpenAPI spec version: 1.0.0-pre.0
 * Contact: opensource@shinesolutions.com
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 3.2.1-SNAPSHOT.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */



#include "ComDayCqDamCoreImplProcessSendTransientWorkflowCompletedEmailPrProperties.h"

namespace org {
namespace openapitools {
namespace client {
namespace model {

ComDayCqDamCoreImplProcessSendTransientWorkflowCompletedEmailPrProperties::ComDayCqDamCoreImplProcessSendTransientWorkflowCompletedEmailPrProperties()
{
    m_Process_labelIsSet = false;
    m_Notify_on_CompleteIsSet = false;
}

ComDayCqDamCoreImplProcessSendTransientWorkflowCompletedEmailPrProperties::~ComDayCqDamCoreImplProcessSendTransientWorkflowCompletedEmailPrProperties()
{
}

void ComDayCqDamCoreImplProcessSendTransientWorkflowCompletedEmailPrProperties::validate()
{
    // TODO: implement validation
}

web::json::value ComDayCqDamCoreImplProcessSendTransientWorkflowCompletedEmailPrProperties::toJson() const
{
    web::json::value val = web::json::value::object();

    if(m_Process_labelIsSet)
    {
        val[utility::conversions::to_string_t("process.label")] = ModelBase::toJson(m_Process_label);
    }
    if(m_Notify_on_CompleteIsSet)
    {
        val[utility::conversions::to_string_t("Notify on Complete")] = ModelBase::toJson(m_Notify_on_Complete);
    }

    return val;
}

void ComDayCqDamCoreImplProcessSendTransientWorkflowCompletedEmailPrProperties::fromJson(web::json::value& val)
{
    if(val.has_field(utility::conversions::to_string_t("process.label")))
    {
        if(!val[utility::conversions::to_string_t("process.label")].is_null())
        {
            std::shared_ptr<ConfigNodePropertyString> newItem(new ConfigNodePropertyString());
            newItem->fromJson(val[utility::conversions::to_string_t("process.label")]);
            setProcessLabel( newItem );
        }
    }
    if(val.has_field(utility::conversions::to_string_t("Notify on Complete")))
    {
        if(!val[utility::conversions::to_string_t("Notify on Complete")].is_null())
        {
            std::shared_ptr<ConfigNodePropertyBoolean> newItem(new ConfigNodePropertyBoolean());
            newItem->fromJson(val[utility::conversions::to_string_t("Notify on Complete")]);
            setNotifyOnComplete( newItem );
        }
    }
}

void ComDayCqDamCoreImplProcessSendTransientWorkflowCompletedEmailPrProperties::toMultipart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix) const
{
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t("."))
    {
        namePrefix += utility::conversions::to_string_t(".");
    }

    if(m_Process_labelIsSet)
    {
        if (m_Process_label.get())
        {
            m_Process_label->toMultipart(multipart, utility::conversions::to_string_t("process.label."));
        }
    }
    if(m_Notify_on_CompleteIsSet)
    {
        if (m_Notify_on_Complete.get())
        {
            m_Notify_on_Complete->toMultipart(multipart, utility::conversions::to_string_t("Notify on Complete."));
        }
    }
}

void ComDayCqDamCoreImplProcessSendTransientWorkflowCompletedEmailPrProperties::fromMultiPart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix)
{
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t("."))
    {
        namePrefix += utility::conversions::to_string_t(".");
    }

    if(multipart->hasContent(utility::conversions::to_string_t("process.label")))
    {
        if(multipart->hasContent(utility::conversions::to_string_t("process.label")))
        {
            std::shared_ptr<ConfigNodePropertyString> newItem(new ConfigNodePropertyString());
            newItem->fromMultiPart(multipart, utility::conversions::to_string_t("process.label."));
            setProcessLabel( newItem );
        }
    }
    if(multipart->hasContent(utility::conversions::to_string_t("Notify on Complete")))
    {
        if(multipart->hasContent(utility::conversions::to_string_t("Notify on Complete")))
        {
            std::shared_ptr<ConfigNodePropertyBoolean> newItem(new ConfigNodePropertyBoolean());
            newItem->fromMultiPart(multipart, utility::conversions::to_string_t("Notify on Complete."));
            setNotifyOnComplete( newItem );
        }
    }
}

std::shared_ptr<ConfigNodePropertyString> ComDayCqDamCoreImplProcessSendTransientWorkflowCompletedEmailPrProperties::getProcessLabel() const
{
    return m_Process_label;
}


void ComDayCqDamCoreImplProcessSendTransientWorkflowCompletedEmailPrProperties::setProcessLabel(std::shared_ptr<ConfigNodePropertyString> value)
{
    m_Process_label = value;
    m_Process_labelIsSet = true;
}
bool ComDayCqDamCoreImplProcessSendTransientWorkflowCompletedEmailPrProperties::processLabelIsSet() const
{
    return m_Process_labelIsSet;
}

void ComDayCqDamCoreImplProcessSendTransientWorkflowCompletedEmailPrProperties::unsetProcess_label()
{
    m_Process_labelIsSet = false;
}

std::shared_ptr<ConfigNodePropertyBoolean> ComDayCqDamCoreImplProcessSendTransientWorkflowCompletedEmailPrProperties::getNotifyOnComplete() const
{
    return m_Notify_on_Complete;
}


void ComDayCqDamCoreImplProcessSendTransientWorkflowCompletedEmailPrProperties::setNotifyOnComplete(std::shared_ptr<ConfigNodePropertyBoolean> value)
{
    m_Notify_on_Complete = value;
    m_Notify_on_CompleteIsSet = true;
}
bool ComDayCqDamCoreImplProcessSendTransientWorkflowCompletedEmailPrProperties::notifyOnCompleteIsSet() const
{
    return m_Notify_on_CompleteIsSet;
}

void ComDayCqDamCoreImplProcessSendTransientWorkflowCompletedEmailPrProperties::unsetNotify_on_Complete()
{
    m_Notify_on_CompleteIsSet = false;
}

}
}
}
}

