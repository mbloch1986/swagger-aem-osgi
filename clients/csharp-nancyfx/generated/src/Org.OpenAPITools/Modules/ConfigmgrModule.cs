using System;
using Nancy;
using Nancy.ModelBinding;
using System.Collections.Generic;
using Sharpility.Base;
using Org.OpenAPITools..Models;
using Org.OpenAPITools..Utils;
using NodaTime;

namespace Org.OpenAPITools..Modules
{ 

    /// <summary>
    /// Module processing requests of Configmgr domain.
    /// </summary>
    public sealed class ConfigmgrModule : NancyModule
    {
        /// <summary>
        /// Sets up HTTP methods mappings.
        /// </summary>
        /// <param name="service">Service handling requests</param>
        public ConfigmgrModule(ConfigmgrService service) : base("/")
        { 
            Post["/system/console/configMgr/Adaptive Form and Interactive Communication Web Channel Configuration"] = parameters =>
            {
                var post = Parameters.ValueOf<bool?>(parameters, Context.Request, "post", ParameterType.Query);
                var apply = Parameters.ValueOf<bool?>(parameters, Context.Request, "apply", ParameterType.Query);
                var delete = Parameters.ValueOf<bool?>(parameters, Context.Request, "delete", ParameterType.Query);
                var action = Parameters.ValueOf<string>(parameters, Context.Request, "action", ParameterType.Query);
                var location = Parameters.ValueOf<string>(parameters, Context.Request, "location", ParameterType.Query);
                var propertylist = Parameters.ValueOf<List<string>>(parameters, Context.Request, "propertylist", ParameterType.Query);
                var showPlaceholder = Parameters.ValueOf<bool?>(parameters, Context.Request, "showPlaceholder", ParameterType.Query);
                var maximumCacheEntries = Parameters.ValueOf<int?>(parameters, Context.Request, "maximumCacheEntries", ParameterType.Query);
                var afScriptingCompatversion = Parameters.ValueOf<string>(parameters, Context.Request, "afScriptingCompatversion", ParameterType.Query);
                var makeFileNameUnique = Parameters.ValueOf<bool?>(parameters, Context.Request, "makeFileNameUnique", ParameterType.Query);
                var generatingCompliantData = Parameters.ValueOf<bool?>(parameters, Context.Request, "generatingCompliantData", ParameterType.Query);
                return service.AdaptiveFormAndInteractiveCommunicationWebChannelConfiguration(Context, post, apply, delete, action, location, propertylist, showPlaceholder, maximumCacheEntries, afScriptingCompatversion, makeFileNameUnique, generatingCompliantData);
            };

            Post["/system/console/configMgr/Adaptive Form and Interactive Communication Web Channel Theme Configuration"] = parameters =>
            {
                var post = Parameters.ValueOf<bool?>(parameters, Context.Request, "post", ParameterType.Query);
                var apply = Parameters.ValueOf<bool?>(parameters, Context.Request, "apply", ParameterType.Query);
                var delete = Parameters.ValueOf<bool?>(parameters, Context.Request, "delete", ParameterType.Query);
                var action = Parameters.ValueOf<string>(parameters, Context.Request, "action", ParameterType.Query);
                var location = Parameters.ValueOf<string>(parameters, Context.Request, "location", ParameterType.Query);
                var propertylist = Parameters.ValueOf<List<string>>(parameters, Context.Request, "propertylist", ParameterType.Query);
                var fontList = Parameters.ValueOf<List<string>>(parameters, Context.Request, "fontList", ParameterType.Query);
                return service.AdaptiveFormAndInteractiveCommunicationWebChannelThemeConfigur(Context, post, apply, delete, action, location, propertylist, fontList);
            };

            Post["/system/console/configMgr/Analytics Component Query Cache Service"] = parameters =>
            {
                var post = Parameters.ValueOf<bool?>(parameters, Context.Request, "post", ParameterType.Query);
                var apply = Parameters.ValueOf<bool?>(parameters, Context.Request, "apply", ParameterType.Query);
                var delete = Parameters.ValueOf<bool?>(parameters, Context.Request, "delete", ParameterType.Query);
                var action = Parameters.ValueOf<string>(parameters, Context.Request, "action", ParameterType.Query);
                var location = Parameters.ValueOf<string>(parameters, Context.Request, "location", ParameterType.Query);
                var propertylist = Parameters.ValueOf<List<string>>(parameters, Context.Request, "propertylist", ParameterType.Query);
                var cqAnalyticsComponentQueryCacheSize = Parameters.ValueOf<int?>(parameters, Context.Request, "cqAnalyticsComponentQueryCacheSize", ParameterType.Query);
                return service.AnalyticsComponentQueryCacheService(Context, post, apply, delete, action, location, propertylist, cqAnalyticsComponentQueryCacheSize);
            };

            Post["/system/console/configMgr/Apache Sling Health Check Result HTML Serializer"] = parameters =>
            {
                var post = Parameters.ValueOf<bool?>(parameters, Context.Request, "post", ParameterType.Query);
                var apply = Parameters.ValueOf<bool?>(parameters, Context.Request, "apply", ParameterType.Query);
                var delete = Parameters.ValueOf<bool?>(parameters, Context.Request, "delete", ParameterType.Query);
                var action = Parameters.ValueOf<string>(parameters, Context.Request, "action", ParameterType.Query);
                var location = Parameters.ValueOf<string>(parameters, Context.Request, "location", ParameterType.Query);
                var propertylist = Parameters.ValueOf<List<string>>(parameters, Context.Request, "propertylist", ParameterType.Query);
                var styleString = Parameters.ValueOf<string>(parameters, Context.Request, "styleString", ParameterType.Query);
                return service.ApacheSlingHealthCheckResultHTMLSerializer(Context, post, apply, delete, action, location, propertylist, styleString);
            };

            Post["/system/console/configMgr/com.adobe.aem.formsndocuments.config.AEMFormsManagerConfiguration"] = parameters =>
            {
                var post = Parameters.ValueOf<bool?>(parameters, Context.Request, "post", ParameterType.Query);
                var apply = Parameters.ValueOf<bool?>(parameters, Context.Request, "apply", ParameterType.Query);
                var delete = Parameters.ValueOf<bool?>(parameters, Context.Request, "delete", ParameterType.Query);
                var action = Parameters.ValueOf<string>(parameters, Context.Request, "action", ParameterType.Query);
                var location = Parameters.ValueOf<string>(parameters, Context.Request, "location", ParameterType.Query);
                var propertylist = Parameters.ValueOf<List<string>>(parameters, Context.Request, "propertylist", ParameterType.Query);
                var formsManagerConfigIncludeOOTBTemplates = Parameters.ValueOf<bool?>(parameters, Context.Request, "formsManagerConfigIncludeOOTBTemplates", ParameterType.Query);
                var formsManagerConfigIncludeDeprecatedTemplates = Parameters.ValueOf<bool?>(parameters, Context.Request, "formsManagerConfigIncludeDeprecatedTemplates", ParameterType.Query);
                return service.ComAdobeAemFormsndocumentsConfigAEMFormsManagerConfiguration(Context, post, apply, delete, action, location, propertylist, formsManagerConfigIncludeOOTBTemplates, formsManagerConfigIncludeDeprecatedTemplates);
            };

            Post["/system/console/configMgr/com.adobe.aem.transaction.core.impl.TransactionRecorder"] = parameters =>
            {
                var post = Parameters.ValueOf<bool?>(parameters, Context.Request, "post", ParameterType.Query);
                var apply = Parameters.ValueOf<bool?>(parameters, Context.Request, "apply", ParameterType.Query);
                var delete = Parameters.ValueOf<bool?>(parameters, Context.Request, "delete", ParameterType.Query);
                var action = Parameters.ValueOf<string>(parameters, Context.Request, "action", ParameterType.Query);
                var location = Parameters.ValueOf<string>(parameters, Context.Request, "location", ParameterType.Query);
                var propertylist = Parameters.ValueOf<List<string>>(parameters, Context.Request, "propertylist", ParameterType.Query);
                var isTransactionRecordingEnabled = Parameters.ValueOf<bool?>(parameters, Context.Request, "isTransactionRecordingEnabled", ParameterType.Query);
                return service.ComAdobeAemTransactionCoreImplTransactionRecorder(Context, post, apply, delete, action, location, propertylist, isTransactionRecordingEnabled);
            };

            Post["/system/console/configMgr/com.adobe.aem.upgrade.prechecks.hc.impl.DeprecateIndexesHC"] = parameters =>
            {
                var post = Parameters.ValueOf<bool?>(parameters, Context.Request, "post", ParameterType.Query);
                var apply = Parameters.ValueOf<bool?>(parameters, Context.Request, "apply", ParameterType.Query);
                var delete = Parameters.ValueOf<bool?>(parameters, Context.Request, "delete", ParameterType.Query);
                var action = Parameters.ValueOf<string>(parameters, Context.Request, "action", ParameterType.Query);
                var location = Parameters.ValueOf<string>(parameters, Context.Request, "location", ParameterType.Query);
                var propertylist = Parameters.ValueOf<List<string>>(parameters, Context.Request, "propertylist", ParameterType.Query);
                var hcName = Parameters.ValueOf<string>(parameters, Context.Request, "hcName", ParameterType.Query);
                var hcTags = Parameters.ValueOf<List<string>>(parameters, Context.Request, "hcTags", ParameterType.Query);
                var hcMbeanName = Parameters.ValueOf<string>(parameters, Context.Request, "hcMbeanName", ParameterType.Query);
                return service.ComAdobeAemUpgradePrechecksHcImplDeprecateIndexesHC(Context, post, apply, delete, action, location, propertylist, hcName, hcTags, hcMbeanName);
            };

            Post["/system/console/configMgr/com.adobe.aem.upgrade.prechecks.hc.impl.ReplicationAgentsDisabledHC"] = parameters =>
            {
                var post = Parameters.ValueOf<bool?>(parameters, Context.Request, "post", ParameterType.Query);
                var apply = Parameters.ValueOf<bool?>(parameters, Context.Request, "apply", ParameterType.Query);
                var delete = Parameters.ValueOf<bool?>(parameters, Context.Request, "delete", ParameterType.Query);
                var action = Parameters.ValueOf<string>(parameters, Context.Request, "action", ParameterType.Query);
                var location = Parameters.ValueOf<string>(parameters, Context.Request, "location", ParameterType.Query);
                var propertylist = Parameters.ValueOf<List<string>>(parameters, Context.Request, "propertylist", ParameterType.Query);
                var hcName = Parameters.ValueOf<string>(parameters, Context.Request, "hcName", ParameterType.Query);
                var hcTags = Parameters.ValueOf<List<string>>(parameters, Context.Request, "hcTags", ParameterType.Query);
                var hcMbeanName = Parameters.ValueOf<string>(parameters, Context.Request, "hcMbeanName", ParameterType.Query);
                return service.ComAdobeAemUpgradePrechecksHcImplReplicationAgentsDisabledHC(Context, post, apply, delete, action, location, propertylist, hcName, hcTags, hcMbeanName);
            };

            Post["/system/console/configMgr/com.adobe.aem.upgrade.prechecks.mbean.impl.PreUpgradeTasksMBeanImpl"] = parameters =>
            {
                var post = Parameters.ValueOf<bool?>(parameters, Context.Request, "post", ParameterType.Query);
                var apply = Parameters.ValueOf<bool?>(parameters, Context.Request, "apply", ParameterType.Query);
                var delete = Parameters.ValueOf<bool?>(parameters, Context.Request, "delete", ParameterType.Query);
                var action = Parameters.ValueOf<string>(parameters, Context.Request, "action", ParameterType.Query);
                var location = Parameters.ValueOf<string>(parameters, Context.Request, "location", ParameterType.Query);
                var propertylist = Parameters.ValueOf<List<string>>(parameters, Context.Request, "propertylist", ParameterType.Query);
                var preUpgradeMaintenanceTasks = Parameters.ValueOf<List<string>>(parameters, Context.Request, "preUpgradeMaintenanceTasks", ParameterType.Query);
                var preUpgradeHcTags = Parameters.ValueOf<List<string>>(parameters, Context.Request, "preUpgradeHcTags", ParameterType.Query);
                return service.ComAdobeAemUpgradePrechecksMbeanImplPreUpgradeTasksMBeanImpl(Context, post, apply, delete, action, location, propertylist, preUpgradeMaintenanceTasks, preUpgradeHcTags);
            };

            Post["/system/console/configMgr/com.adobe.aem.upgrade.prechecks.tasks.impl.ConsistencyCheckTaskImpl"] = parameters =>
            {
                var post = Parameters.ValueOf<bool?>(parameters, Context.Request, "post", ParameterType.Query);
                var apply = Parameters.ValueOf<bool?>(parameters, Context.Request, "apply", ParameterType.Query);
                var delete = Parameters.ValueOf<bool?>(parameters, Context.Request, "delete", ParameterType.Query);
                var action = Parameters.ValueOf<string>(parameters, Context.Request, "action", ParameterType.Query);
                var location = Parameters.ValueOf<string>(parameters, Context.Request, "location", ParameterType.Query);
                var propertylist = Parameters.ValueOf<List<string>>(parameters, Context.Request, "propertylist", ParameterType.Query);
                var rootPath = Parameters.ValueOf<string>(parameters, Context.Request, "rootPath", ParameterType.Query);
                var fixInconsistencies = Parameters.ValueOf<bool?>(parameters, Context.Request, "fixInconsistencies", ParameterType.Query);
                return service.ComAdobeAemUpgradePrechecksTasksImplConsistencyCheckTaskImpl(Context, post, apply, delete, action, location, propertylist, rootPath, fixInconsistencies);
            };

            Post["/system/console/configMgr/com.adobe.cq.account.api.AccountManagementService"] = parameters =>
            {
                var post = Parameters.ValueOf<bool?>(parameters, Context.Request, "post", ParameterType.Query);
                var apply = Parameters.ValueOf<bool?>(parameters, Context.Request, "apply", ParameterType.Query);
                var delete = Parameters.ValueOf<bool?>(parameters, Context.Request, "delete", ParameterType.Query);
                var action = Parameters.ValueOf<string>(parameters, Context.Request, "action", ParameterType.Query);
                var location = Parameters.ValueOf<string>(parameters, Context.Request, "location", ParameterType.Query);
                var propertylist = Parameters.ValueOf<List<string>>(parameters, Context.Request, "propertylist", ParameterType.Query);
                var cqAccountmanagerTokenValidityPeriod = Parameters.ValueOf<int?>(parameters, Context.Request, "cqAccountmanagerTokenValidityPeriod", ParameterType.Query);
                var cqAccountmanagerConfigRequestnewaccountMail = Parameters.ValueOf<string>(parameters, Context.Request, "cqAccountmanagerConfigRequestnewaccountMail", ParameterType.Query);
                var cqAccountmanagerConfigRequestnewpwdMail = Parameters.ValueOf<string>(parameters, Context.Request, "cqAccountmanagerConfigRequestnewpwdMail", ParameterType.Query);
                return service.ComAdobeCqAccountApiAccountManagementService(Context, post, apply, delete, action, location, propertylist, cqAccountmanagerTokenValidityPeriod, cqAccountmanagerConfigRequestnewaccountMail, cqAccountmanagerConfigRequestnewpwdMail);
            };

            Post["/system/console/configMgr/com.adobe.cq.account.impl.AccountManagementServlet"] = parameters =>
            {
                var post = Parameters.ValueOf<bool?>(parameters, Context.Request, "post", ParameterType.Query);
                var apply = Parameters.ValueOf<bool?>(parameters, Context.Request, "apply", ParameterType.Query);
                var delete = Parameters.ValueOf<bool?>(parameters, Context.Request, "delete", ParameterType.Query);
                var action = Parameters.ValueOf<string>(parameters, Context.Request, "action", ParameterType.Query);
                var location = Parameters.ValueOf<string>(parameters, Context.Request, "location", ParameterType.Query);
                var propertylist = Parameters.ValueOf<List<string>>(parameters, Context.Request, "propertylist", ParameterType.Query);
                var cqAccountmanagerConfigInformnewaccountMail = Parameters.ValueOf<string>(parameters, Context.Request, "cqAccountmanagerConfigInformnewaccountMail", ParameterType.Query);
                var cqAccountmanagerConfigInformnewpwdMail = Parameters.ValueOf<string>(parameters, Context.Request, "cqAccountmanagerConfigInformnewpwdMail", ParameterType.Query);
                return service.ComAdobeCqAccountImplAccountManagementServlet(Context, post, apply, delete, action, location, propertylist, cqAccountmanagerConfigInformnewaccountMail, cqAccountmanagerConfigInformnewpwdMail);
            };

            Post["/system/console/configMgr/com.adobe.cq.address.impl.location.LocationListServlet"] = parameters =>
            {
                var post = Parameters.ValueOf<bool?>(parameters, Context.Request, "post", ParameterType.Query);
                var apply = Parameters.ValueOf<bool?>(parameters, Context.Request, "apply", ParameterType.Query);
                var delete = Parameters.ValueOf<bool?>(parameters, Context.Request, "delete", ParameterType.Query);
                var action = Parameters.ValueOf<string>(parameters, Context.Request, "action", ParameterType.Query);
                var location = Parameters.ValueOf<string>(parameters, Context.Request, "location", ParameterType.Query);
                var propertylist = Parameters.ValueOf<List<string>>(parameters, Context.Request, "propertylist", ParameterType.Query);
                var cqAddressLocationDefaultMaxResults = Parameters.ValueOf<int?>(parameters, Context.Request, "cqAddressLocationDefaultMaxResults", ParameterType.Query);
                return service.ComAdobeCqAddressImplLocationLocationListServlet(Context, post, apply, delete, action, location, propertylist, cqAddressLocationDefaultMaxResults);
            };

            Post["/system/console/configMgr/com.adobe.cq.audit.purge.Dam"] = parameters =>
            {
                var post = Parameters.ValueOf<bool?>(parameters, Context.Request, "post", ParameterType.Query);
                var apply = Parameters.ValueOf<bool?>(parameters, Context.Request, "apply", ParameterType.Query);
                var delete = Parameters.ValueOf<bool?>(parameters, Context.Request, "delete", ParameterType.Query);
                var action = Parameters.ValueOf<string>(parameters, Context.Request, "action", ParameterType.Query);
                var location = Parameters.ValueOf<string>(parameters, Context.Request, "location", ParameterType.Query);
                var propertylist = Parameters.ValueOf<List<string>>(parameters, Context.Request, "propertylist", ParameterType.Query);
                var auditlogRuleName = Parameters.ValueOf<string>(parameters, Context.Request, "auditlogRuleName", ParameterType.Query);
                var auditlogRuleContentpath = Parameters.ValueOf<string>(parameters, Context.Request, "auditlogRuleContentpath", ParameterType.Query);
                var auditlogRuleMinimumage = Parameters.ValueOf<int?>(parameters, Context.Request, "auditlogRuleMinimumage", ParameterType.Query);
                var auditlogRuleTypes = Parameters.ValueOf<string>(parameters, Context.Request, "auditlogRuleTypes", ParameterType.Query);
                return service.ComAdobeCqAuditPurgeDam(Context, post, apply, delete, action, location, propertylist, auditlogRuleName, auditlogRuleContentpath, auditlogRuleMinimumage, auditlogRuleTypes);
            };

            Post["/system/console/configMgr/com.adobe.cq.audit.purge.Pages"] = parameters =>
            {
                var post = Parameters.ValueOf<bool?>(parameters, Context.Request, "post", ParameterType.Query);
                var apply = Parameters.ValueOf<bool?>(parameters, Context.Request, "apply", ParameterType.Query);
                var delete = Parameters.ValueOf<bool?>(parameters, Context.Request, "delete", ParameterType.Query);
                var action = Parameters.ValueOf<string>(parameters, Context.Request, "action", ParameterType.Query);
                var location = Parameters.ValueOf<string>(parameters, Context.Request, "location", ParameterType.Query);
                var propertylist = Parameters.ValueOf<List<string>>(parameters, Context.Request, "propertylist", ParameterType.Query);
                var auditlogRuleName = Parameters.ValueOf<string>(parameters, Context.Request, "auditlogRuleName", ParameterType.Query);
                var auditlogRuleContentpath = Parameters.ValueOf<string>(parameters, Context.Request, "auditlogRuleContentpath", ParameterType.Query);
                var auditlogRuleMinimumage = Parameters.ValueOf<int?>(parameters, Context.Request, "auditlogRuleMinimumage", ParameterType.Query);
                var auditlogRuleTypes = Parameters.ValueOf<string>(parameters, Context.Request, "auditlogRuleTypes", ParameterType.Query);
                return service.ComAdobeCqAuditPurgePages(Context, post, apply, delete, action, location, propertylist, auditlogRuleName, auditlogRuleContentpath, auditlogRuleMinimumage, auditlogRuleTypes);
            };

            Post["/system/console/configMgr/com.adobe.cq.audit.purge.Replication"] = parameters =>
            {
                var post = Parameters.ValueOf<bool?>(parameters, Context.Request, "post", ParameterType.Query);
                var apply = Parameters.ValueOf<bool?>(parameters, Context.Request, "apply", ParameterType.Query);
                var delete = Parameters.ValueOf<bool?>(parameters, Context.Request, "delete", ParameterType.Query);
                var action = Parameters.ValueOf<string>(parameters, Context.Request, "action", ParameterType.Query);
                var location = Parameters.ValueOf<string>(parameters, Context.Request, "location", ParameterType.Query);
                var propertylist = Parameters.ValueOf<List<string>>(parameters, Context.Request, "propertylist", ParameterType.Query);
                var auditlogRuleName = Parameters.ValueOf<string>(parameters, Context.Request, "auditlogRuleName", ParameterType.Query);
                var auditlogRuleContentpath = Parameters.ValueOf<string>(parameters, Context.Request, "auditlogRuleContentpath", ParameterType.Query);
                var auditlogRuleMinimumage = Parameters.ValueOf<int?>(parameters, Context.Request, "auditlogRuleMinimumage", ParameterType.Query);
                var auditlogRuleTypes = Parameters.ValueOf<string>(parameters, Context.Request, "auditlogRuleTypes", ParameterType.Query);
                return service.ComAdobeCqAuditPurgeReplication(Context, post, apply, delete, action, location, propertylist, auditlogRuleName, auditlogRuleContentpath, auditlogRuleMinimumage, auditlogRuleTypes);
            };

            Post["/system/console/configMgr/com.adobe.cq.cdn.rewriter.impl.AWSCloudFrontRewriter"] = parameters =>
            {
                var post = Parameters.ValueOf<bool?>(parameters, Context.Request, "post", ParameterType.Query);
                var apply = Parameters.ValueOf<bool?>(parameters, Context.Request, "apply", ParameterType.Query);
                var delete = Parameters.ValueOf<bool?>(parameters, Context.Request, "delete", ParameterType.Query);
                var action = Parameters.ValueOf<string>(parameters, Context.Request, "action", ParameterType.Query);
                var location = Parameters.ValueOf<string>(parameters, Context.Request, "location", ParameterType.Query);
                var propertylist = Parameters.ValueOf<List<string>>(parameters, Context.Request, "propertylist", ParameterType.Query);
                var serviceRanking = Parameters.ValueOf<int?>(parameters, Context.Request, "serviceRanking", ParameterType.Query);
                var keypairId = Parameters.ValueOf<string>(parameters, Context.Request, "keypairId", ParameterType.Query);
                var keypairAlias = Parameters.ValueOf<string>(parameters, Context.Request, "keypairAlias", ParameterType.Query);
                var cdnrewriterAttributes = Parameters.ValueOf<List<string>>(parameters, Context.Request, "cdnrewriterAttributes", ParameterType.Query);
                var cdnRewriterDistributionDomain = Parameters.ValueOf<string>(parameters, Context.Request, "cdnRewriterDistributionDomain", ParameterType.Query);
                return service.ComAdobeCqCdnRewriterImplAWSCloudFrontRewriter(Context, post, apply, delete, action, location, propertylist, serviceRanking, keypairId, keypairAlias, cdnrewriterAttributes, cdnRewriterDistributionDomain);
            };

            Post["/system/console/configMgr/com.adobe.cq.cdn.rewriter.impl.CDNConfigServiceImpl"] = parameters =>
            {
                var post = Parameters.ValueOf<bool?>(parameters, Context.Request, "post", ParameterType.Query);
                var apply = Parameters.ValueOf<bool?>(parameters, Context.Request, "apply", ParameterType.Query);
                var delete = Parameters.ValueOf<bool?>(parameters, Context.Request, "delete", ParameterType.Query);
                var action = Parameters.ValueOf<string>(parameters, Context.Request, "action", ParameterType.Query);
                var location = Parameters.ValueOf<string>(parameters, Context.Request, "location", ParameterType.Query);
                var propertylist = Parameters.ValueOf<List<string>>(parameters, Context.Request, "propertylist", ParameterType.Query);
                var cdnConfigDistributionDomain = Parameters.ValueOf<string>(parameters, Context.Request, "cdnConfigDistributionDomain", ParameterType.Query);
                var cdnConfigEnableRewriting = Parameters.ValueOf<bool?>(parameters, Context.Request, "cdnConfigEnableRewriting", ParameterType.Query);
                var cdnConfigPathPrefixes = Parameters.ValueOf<List<string>>(parameters, Context.Request, "cdnConfigPathPrefixes", ParameterType.Query);
                var cdnConfigCdnttl = Parameters.ValueOf<int?>(parameters, Context.Request, "cdnConfigCdnttl", ParameterType.Query);
                var cdnConfigApplicationProtocol = Parameters.ValueOf<string>(parameters, Context.Request, "cdnConfigApplicationProtocol", ParameterType.Query);
                return service.ComAdobeCqCdnRewriterImplCDNConfigServiceImpl(Context, post, apply, delete, action, location, propertylist, cdnConfigDistributionDomain, cdnConfigEnableRewriting, cdnConfigPathPrefixes, cdnConfigCdnttl, cdnConfigApplicationProtocol);
            };

            Post["/system/console/configMgr/com.adobe.cq.cdn.rewriter.impl.CDNRewriter"] = parameters =>
            {
                var post = Parameters.ValueOf<bool?>(parameters, Context.Request, "post", ParameterType.Query);
                var apply = Parameters.ValueOf<bool?>(parameters, Context.Request, "apply", ParameterType.Query);
                var delete = Parameters.ValueOf<bool?>(parameters, Context.Request, "delete", ParameterType.Query);
                var action = Parameters.ValueOf<string>(parameters, Context.Request, "action", ParameterType.Query);
                var location = Parameters.ValueOf<string>(parameters, Context.Request, "location", ParameterType.Query);
                var propertylist = Parameters.ValueOf<List<string>>(parameters, Context.Request, "propertylist", ParameterType.Query);
                var serviceRanking = Parameters.ValueOf<int?>(parameters, Context.Request, "serviceRanking", ParameterType.Query);
                var cdnrewriterAttributes = Parameters.ValueOf<List<string>>(parameters, Context.Request, "cdnrewriterAttributes", ParameterType.Query);
                var cdnRewriterDistributionDomain = Parameters.ValueOf<string>(parameters, Context.Request, "cdnRewriterDistributionDomain", ParameterType.Query);
                return service.ComAdobeCqCdnRewriterImplCDNRewriter(Context, post, apply, delete, action, location, propertylist, serviceRanking, cdnrewriterAttributes, cdnRewriterDistributionDomain);
            };

            Post["/system/console/configMgr/com.adobe.cq.cloudconfig.core.impl.ConfigurationReplicationEventHandler"] = parameters =>
            {
                var post = Parameters.ValueOf<bool?>(parameters, Context.Request, "post", ParameterType.Query);
                var apply = Parameters.ValueOf<bool?>(parameters, Context.Request, "apply", ParameterType.Query);
                var delete = Parameters.ValueOf<bool?>(parameters, Context.Request, "delete", ParameterType.Query);
                var action = Parameters.ValueOf<string>(parameters, Context.Request, "action", ParameterType.Query);
                var location = Parameters.ValueOf<string>(parameters, Context.Request, "location", ParameterType.Query);
                var propertylist = Parameters.ValueOf<List<string>>(parameters, Context.Request, "propertylist", ParameterType.Query);
                var flushAgents = Parameters.ValueOf<List<string>>(parameters, Context.Request, "flushAgents", ParameterType.Query);
                return service.ComAdobeCqCloudconfigCoreImplConfigurationReplicationEventHandle(Context, post, apply, delete, action, location, propertylist, flushAgents);
            };

            Post["/system/console/configMgr/com.adobe.cq.commerce.impl.asset.DynamicImageHandler"] = parameters =>
            {
                var post = Parameters.ValueOf<bool?>(parameters, Context.Request, "post", ParameterType.Query);
                var apply = Parameters.ValueOf<bool?>(parameters, Context.Request, "apply", ParameterType.Query);
                var delete = Parameters.ValueOf<bool?>(parameters, Context.Request, "delete", ParameterType.Query);
                var action = Parameters.ValueOf<string>(parameters, Context.Request, "action", ParameterType.Query);
                var location = Parameters.ValueOf<string>(parameters, Context.Request, "location", ParameterType.Query);
                var propertylist = Parameters.ValueOf<List<string>>(parameters, Context.Request, "propertylist", ParameterType.Query);
                var cqCommerceAssetHandlerActive = Parameters.ValueOf<bool?>(parameters, Context.Request, "cqCommerceAssetHandlerActive", ParameterType.Query);
                var cqCommerceAssetHandlerName = Parameters.ValueOf<string>(parameters, Context.Request, "cqCommerceAssetHandlerName", ParameterType.Query);
                return service.ComAdobeCqCommerceImplAssetDynamicImageHandler(Context, post, apply, delete, action, location, propertylist, cqCommerceAssetHandlerActive, cqCommerceAssetHandlerName);
            };

            Post["/system/console/configMgr/com.adobe.cq.commerce.impl.asset.ProductAssetHandlerProviderImpl"] = parameters =>
            {
                var post = Parameters.ValueOf<bool?>(parameters, Context.Request, "post", ParameterType.Query);
                var apply = Parameters.ValueOf<bool?>(parameters, Context.Request, "apply", ParameterType.Query);
                var delete = Parameters.ValueOf<bool?>(parameters, Context.Request, "delete", ParameterType.Query);
                var action = Parameters.ValueOf<string>(parameters, Context.Request, "action", ParameterType.Query);
                var location = Parameters.ValueOf<string>(parameters, Context.Request, "location", ParameterType.Query);
                var propertylist = Parameters.ValueOf<List<string>>(parameters, Context.Request, "propertylist", ParameterType.Query);
                var cqCommerceAssetHandlerFallback = Parameters.ValueOf<string>(parameters, Context.Request, "cqCommerceAssetHandlerFallback", ParameterType.Query);
                return service.ComAdobeCqCommerceImplAssetProductAssetHandlerProviderImpl(Context, post, apply, delete, action, location, propertylist, cqCommerceAssetHandlerFallback);
            };

            Post["/system/console/configMgr/com.adobe.cq.commerce.impl.asset.StaticImageHandler"] = parameters =>
            {
                var post = Parameters.ValueOf<bool?>(parameters, Context.Request, "post", ParameterType.Query);
                var apply = Parameters.ValueOf<bool?>(parameters, Context.Request, "apply", ParameterType.Query);
                var delete = Parameters.ValueOf<bool?>(parameters, Context.Request, "delete", ParameterType.Query);
                var action = Parameters.ValueOf<string>(parameters, Context.Request, "action", ParameterType.Query);
                var location = Parameters.ValueOf<string>(parameters, Context.Request, "location", ParameterType.Query);
                var propertylist = Parameters.ValueOf<List<string>>(parameters, Context.Request, "propertylist", ParameterType.Query);
                var cqCommerceAssetHandlerActive = Parameters.ValueOf<bool?>(parameters, Context.Request, "cqCommerceAssetHandlerActive", ParameterType.Query);
                var cqCommerceAssetHandlerName = Parameters.ValueOf<string>(parameters, Context.Request, "cqCommerceAssetHandlerName", ParameterType.Query);
                return service.ComAdobeCqCommerceImplAssetStaticImageHandler(Context, post, apply, delete, action, location, propertylist, cqCommerceAssetHandlerActive, cqCommerceAssetHandlerName);
            };

            Post["/system/console/configMgr/com.adobe.cq.commerce.impl.asset.VideoHandler"] = parameters =>
            {
                var post = Parameters.ValueOf<bool?>(parameters, Context.Request, "post", ParameterType.Query);
                var apply = Parameters.ValueOf<bool?>(parameters, Context.Request, "apply", ParameterType.Query);
                var delete = Parameters.ValueOf<bool?>(parameters, Context.Request, "delete", ParameterType.Query);
                var action = Parameters.ValueOf<string>(parameters, Context.Request, "action", ParameterType.Query);
                var location = Parameters.ValueOf<string>(parameters, Context.Request, "location", ParameterType.Query);
                var propertylist = Parameters.ValueOf<List<string>>(parameters, Context.Request, "propertylist", ParameterType.Query);
                var cqCommerceAssetHandlerActive = Parameters.ValueOf<bool?>(parameters, Context.Request, "cqCommerceAssetHandlerActive", ParameterType.Query);
                var cqCommerceAssetHandlerName = Parameters.ValueOf<string>(parameters, Context.Request, "cqCommerceAssetHandlerName", ParameterType.Query);
                return service.ComAdobeCqCommerceImplAssetVideoHandler(Context, post, apply, delete, action, location, propertylist, cqCommerceAssetHandlerActive, cqCommerceAssetHandlerName);
            };

            Post["/system/console/configMgr/com.adobe.cq.commerce.impl.promotion.PromotionManagerImpl"] = parameters =>
            {
                var post = Parameters.ValueOf<bool?>(parameters, Context.Request, "post", ParameterType.Query);
                var apply = Parameters.ValueOf<bool?>(parameters, Context.Request, "apply", ParameterType.Query);
                var delete = Parameters.ValueOf<bool?>(parameters, Context.Request, "delete", ParameterType.Query);
                var action = Parameters.ValueOf<string>(parameters, Context.Request, "action", ParameterType.Query);
                var location = Parameters.ValueOf<string>(parameters, Context.Request, "location", ParameterType.Query);
                var propertylist = Parameters.ValueOf<List<string>>(parameters, Context.Request, "propertylist", ParameterType.Query);
                var cqCommercePromotionRoot = Parameters.ValueOf<string>(parameters, Context.Request, "cqCommercePromotionRoot", ParameterType.Query);
                return service.ComAdobeCqCommerceImplPromotionPromotionManagerImpl(Context, post, apply, delete, action, location, propertylist, cqCommercePromotionRoot);
            };

            Post["/system/console/configMgr/com.adobe.cq.commerce.pim.impl.cataloggenerator.CatalogGeneratorImpl"] = parameters =>
            {
                var post = Parameters.ValueOf<bool?>(parameters, Context.Request, "post", ParameterType.Query);
                var apply = Parameters.ValueOf<bool?>(parameters, Context.Request, "apply", ParameterType.Query);
                var delete = Parameters.ValueOf<bool?>(parameters, Context.Request, "delete", ParameterType.Query);
                var action = Parameters.ValueOf<string>(parameters, Context.Request, "action", ParameterType.Query);
                var location = Parameters.ValueOf<string>(parameters, Context.Request, "location", ParameterType.Query);
                var propertylist = Parameters.ValueOf<List<string>>(parameters, Context.Request, "propertylist", ParameterType.Query);
                var cqCommerceCataloggeneratorBucketsize = Parameters.ValueOf<int?>(parameters, Context.Request, "cqCommerceCataloggeneratorBucketsize", ParameterType.Query);
                var cqCommerceCataloggeneratorBucketname = Parameters.ValueOf<string>(parameters, Context.Request, "cqCommerceCataloggeneratorBucketname", ParameterType.Query);
                var cqCommerceCataloggeneratorExcludedtemplateproperties = Parameters.ValueOf<List<string>>(parameters, Context.Request, "cqCommerceCataloggeneratorExcludedtemplateproperties", ParameterType.Query);
                return service.ComAdobeCqCommercePimImplCataloggeneratorCatalogGeneratorImpl(Context, post, apply, delete, action, location, propertylist, cqCommerceCataloggeneratorBucketsize, cqCommerceCataloggeneratorBucketname, cqCommerceCataloggeneratorExcludedtemplateproperties);
            };

            Post["/system/console/configMgr/com.adobe.cq.commerce.pim.impl.PageEventListener"] = parameters =>
            {
                var post = Parameters.ValueOf<bool?>(parameters, Context.Request, "post", ParameterType.Query);
                var apply = Parameters.ValueOf<bool?>(parameters, Context.Request, "apply", ParameterType.Query);
                var delete = Parameters.ValueOf<bool?>(parameters, Context.Request, "delete", ParameterType.Query);
                var action = Parameters.ValueOf<string>(parameters, Context.Request, "action", ParameterType.Query);
                var location = Parameters.ValueOf<string>(parameters, Context.Request, "location", ParameterType.Query);
                var propertylist = Parameters.ValueOf<List<string>>(parameters, Context.Request, "propertylist", ParameterType.Query);
                var cqCommercePageeventlistenerEnabled = Parameters.ValueOf<bool?>(parameters, Context.Request, "cqCommercePageeventlistenerEnabled", ParameterType.Query);
                return service.ComAdobeCqCommercePimImplPageEventListener(Context, post, apply, delete, action, location, propertylist, cqCommercePageeventlistenerEnabled);
            };

            Post["/system/console/configMgr/com.adobe.cq.commerce.pim.impl.productfeed.ProductFeedServiceImpl"] = parameters =>
            {
                var post = Parameters.ValueOf<bool?>(parameters, Context.Request, "post", ParameterType.Query);
                var apply = Parameters.ValueOf<bool?>(parameters, Context.Request, "apply", ParameterType.Query);
                var delete = Parameters.ValueOf<bool?>(parameters, Context.Request, "delete", ParameterType.Query);
                var action = Parameters.ValueOf<string>(parameters, Context.Request, "action", ParameterType.Query);
                var location = Parameters.ValueOf<string>(parameters, Context.Request, "location", ParameterType.Query);
                var propertylist = Parameters.ValueOf<List<string>>(parameters, Context.Request, "propertylist", ParameterType.Query);
                var feedGeneratorAlgorithm = Parameters.ValueOf<string>(parameters, Context.Request, "feedGeneratorAlgorithm", ParameterType.Query);
                return service.ComAdobeCqCommercePimImplProductfeedProductFeedServiceImpl(Context, post, apply, delete, action, location, propertylist, feedGeneratorAlgorithm);
            };

            Post["/system/console/configMgr/com.adobe.cq.contentinsight.impl.ReportingServicesSettingsProvider"] = parameters =>
            {
                var post = Parameters.ValueOf<bool?>(parameters, Context.Request, "post", ParameterType.Query);
                var apply = Parameters.ValueOf<bool?>(parameters, Context.Request, "apply", ParameterType.Query);
                var delete = Parameters.ValueOf<bool?>(parameters, Context.Request, "delete", ParameterType.Query);
                var action = Parameters.ValueOf<string>(parameters, Context.Request, "action", ParameterType.Query);
                var location = Parameters.ValueOf<string>(parameters, Context.Request, "location", ParameterType.Query);
                var propertylist = Parameters.ValueOf<List<string>>(parameters, Context.Request, "propertylist", ParameterType.Query);
                var reportingservicesUrl = Parameters.ValueOf<string>(parameters, Context.Request, "reportingservicesUrl", ParameterType.Query);
                return service.ComAdobeCqContentinsightImplReportingServicesSettingsProvider(Context, post, apply, delete, action, location, propertylist, reportingservicesUrl);
            };

            Post["/system/console/configMgr/com.adobe.cq.contentinsight.impl.servlets.BrightEdgeProxyServlet"] = parameters =>
            {
                var post = Parameters.ValueOf<bool?>(parameters, Context.Request, "post", ParameterType.Query);
                var apply = Parameters.ValueOf<bool?>(parameters, Context.Request, "apply", ParameterType.Query);
                var delete = Parameters.ValueOf<bool?>(parameters, Context.Request, "delete", ParameterType.Query);
                var action = Parameters.ValueOf<string>(parameters, Context.Request, "action", ParameterType.Query);
                var location = Parameters.ValueOf<string>(parameters, Context.Request, "location", ParameterType.Query);
                var propertylist = Parameters.ValueOf<List<string>>(parameters, Context.Request, "propertylist", ParameterType.Query);
                var brightedgeUrl = Parameters.ValueOf<string>(parameters, Context.Request, "brightedgeUrl", ParameterType.Query);
                return service.ComAdobeCqContentinsightImplServletsBrightEdgeProxyServlet(Context, post, apply, delete, action, location, propertylist, brightedgeUrl);
            };

            Post["/system/console/configMgr/com.adobe.cq.contentinsight.impl.servlets.ReportingServicesProxyServlet"] = parameters =>
            {
                var post = Parameters.ValueOf<bool?>(parameters, Context.Request, "post", ParameterType.Query);
                var apply = Parameters.ValueOf<bool?>(parameters, Context.Request, "apply", ParameterType.Query);
                var delete = Parameters.ValueOf<bool?>(parameters, Context.Request, "delete", ParameterType.Query);
                var action = Parameters.ValueOf<string>(parameters, Context.Request, "action", ParameterType.Query);
                var location = Parameters.ValueOf<string>(parameters, Context.Request, "location", ParameterType.Query);
                var propertylist = Parameters.ValueOf<List<string>>(parameters, Context.Request, "propertylist", ParameterType.Query);
                var reportingservicesProxyWhitelist = Parameters.ValueOf<List<string>>(parameters, Context.Request, "reportingservicesProxyWhitelist", ParameterType.Query);
                return service.ComAdobeCqContentinsightImplServletsReportingServicesProxyServle(Context, post, apply, delete, action, location, propertylist, reportingservicesProxyWhitelist);
            };

            Post["/system/console/configMgr/com.adobe.cq.dam.cfm.impl.component.ComponentConfigImpl"] = parameters =>
            {
                var post = Parameters.ValueOf<bool?>(parameters, Context.Request, "post", ParameterType.Query);
                var apply = Parameters.ValueOf<bool?>(parameters, Context.Request, "apply", ParameterType.Query);
                var delete = Parameters.ValueOf<bool?>(parameters, Context.Request, "delete", ParameterType.Query);
                var action = Parameters.ValueOf<string>(parameters, Context.Request, "action", ParameterType.Query);
                var location = Parameters.ValueOf<string>(parameters, Context.Request, "location", ParameterType.Query);
                var propertylist = Parameters.ValueOf<List<string>>(parameters, Context.Request, "propertylist", ParameterType.Query);
                var damCfmComponentResourceType = Parameters.ValueOf<string>(parameters, Context.Request, "damCfmComponentResourceType", ParameterType.Query);
                var damCfmComponentFileReferenceProp = Parameters.ValueOf<string>(parameters, Context.Request, "damCfmComponentFileReferenceProp", ParameterType.Query);
                var damCfmComponentElementsProp = Parameters.ValueOf<string>(parameters, Context.Request, "damCfmComponentElementsProp", ParameterType.Query);
                var damCfmComponentVariationProp = Parameters.ValueOf<string>(parameters, Context.Request, "damCfmComponentVariationProp", ParameterType.Query);
                return service.ComAdobeCqDamCfmImplComponentComponentConfigImpl(Context, post, apply, delete, action, location, propertylist, damCfmComponentResourceType, damCfmComponentFileReferenceProp, damCfmComponentElementsProp, damCfmComponentVariationProp);
            };

            Post["/system/console/configMgr/com.adobe.cq.dam.cfm.impl.conf.FeatureConfigImpl"] = parameters =>
            {
                var post = Parameters.ValueOf<bool?>(parameters, Context.Request, "post", ParameterType.Query);
                var apply = Parameters.ValueOf<bool?>(parameters, Context.Request, "apply", ParameterType.Query);
                var delete = Parameters.ValueOf<bool?>(parameters, Context.Request, "delete", ParameterType.Query);
                var action = Parameters.ValueOf<string>(parameters, Context.Request, "action", ParameterType.Query);
                var location = Parameters.ValueOf<string>(parameters, Context.Request, "location", ParameterType.Query);
                var propertylist = Parameters.ValueOf<List<string>>(parameters, Context.Request, "propertylist", ParameterType.Query);
                var damCfmResourceTypes = Parameters.ValueOf<List<string>>(parameters, Context.Request, "damCfmResourceTypes", ParameterType.Query);
                var damCfmReferenceProperties = Parameters.ValueOf<List<string>>(parameters, Context.Request, "damCfmReferenceProperties", ParameterType.Query);
                return service.ComAdobeCqDamCfmImplConfFeatureConfigImpl(Context, post, apply, delete, action, location, propertylist, damCfmResourceTypes, damCfmReferenceProperties);
            };

            Post["/system/console/configMgr/com.adobe.cq.dam.cfm.impl.content.rewriter.AssetProcessor"] = parameters =>
            {
                var post = Parameters.ValueOf<bool?>(parameters, Context.Request, "post", ParameterType.Query);
                var apply = Parameters.ValueOf<bool?>(parameters, Context.Request, "apply", ParameterType.Query);
                var delete = Parameters.ValueOf<bool?>(parameters, Context.Request, "delete", ParameterType.Query);
                var action = Parameters.ValueOf<string>(parameters, Context.Request, "action", ParameterType.Query);
                var location = Parameters.ValueOf<string>(parameters, Context.Request, "location", ParameterType.Query);
                var propertylist = Parameters.ValueOf<List<string>>(parameters, Context.Request, "propertylist", ParameterType.Query);
                var pipelineType = Parameters.ValueOf<string>(parameters, Context.Request, "pipelineType", ParameterType.Query);
                return service.ComAdobeCqDamCfmImplContentRewriterAssetProcessor(Context, post, apply, delete, action, location, propertylist, pipelineType);
            };

            Post["/system/console/configMgr/com.adobe.cq.dam.cfm.impl.content.rewriter.ParRangeFilter"] = parameters =>
            {
                var post = Parameters.ValueOf<bool?>(parameters, Context.Request, "post", ParameterType.Query);
                var apply = Parameters.ValueOf<bool?>(parameters, Context.Request, "apply", ParameterType.Query);
                var delete = Parameters.ValueOf<bool?>(parameters, Context.Request, "delete", ParameterType.Query);
                var action = Parameters.ValueOf<string>(parameters, Context.Request, "action", ParameterType.Query);
                var location = Parameters.ValueOf<string>(parameters, Context.Request, "location", ParameterType.Query);
                var propertylist = Parameters.ValueOf<List<string>>(parameters, Context.Request, "propertylist", ParameterType.Query);
                var pipelineType = Parameters.ValueOf<string>(parameters, Context.Request, "pipelineType", ParameterType.Query);
                return service.ComAdobeCqDamCfmImplContentRewriterParRangeFilter(Context, post, apply, delete, action, location, propertylist, pipelineType);
            };

            Post["/system/console/configMgr/com.adobe.cq.dam.cfm.impl.content.rewriter.PayloadFilter"] = parameters =>
            {
                var post = Parameters.ValueOf<bool?>(parameters, Context.Request, "post", ParameterType.Query);
                var apply = Parameters.ValueOf<bool?>(parameters, Context.Request, "apply", ParameterType.Query);
                var delete = Parameters.ValueOf<bool?>(parameters, Context.Request, "delete", ParameterType.Query);
                var action = Parameters.ValueOf<string>(parameters, Context.Request, "action", ParameterType.Query);
                var location = Parameters.ValueOf<string>(parameters, Context.Request, "location", ParameterType.Query);
                var propertylist = Parameters.ValueOf<List<string>>(parameters, Context.Request, "propertylist", ParameterType.Query);
                var pipelineType = Parameters.ValueOf<string>(parameters, Context.Request, "pipelineType", ParameterType.Query);
                return service.ComAdobeCqDamCfmImplContentRewriterPayloadFilter(Context, post, apply, delete, action, location, propertylist, pipelineType);
            };

            Post["/system/console/configMgr/com.adobe.cq.dam.dm.process.image.PTiffManagerImpl"] = parameters =>
            {
                var post = Parameters.ValueOf<bool?>(parameters, Context.Request, "post", ParameterType.Query);
                var apply = Parameters.ValueOf<bool?>(parameters, Context.Request, "apply", ParameterType.Query);
                var delete = Parameters.ValueOf<bool?>(parameters, Context.Request, "delete", ParameterType.Query);
                var action = Parameters.ValueOf<string>(parameters, Context.Request, "action", ParameterType.Query);
                var location = Parameters.ValueOf<string>(parameters, Context.Request, "location", ParameterType.Query);
                var propertylist = Parameters.ValueOf<List<string>>(parameters, Context.Request, "propertylist", ParameterType.Query);
                var maxMemory = Parameters.ValueOf<int?>(parameters, Context.Request, "maxMemory", ParameterType.Query);
                return service.ComAdobeCqDamDmProcessImagePTiffManagerImpl(Context, post, apply, delete, action, location, propertylist, maxMemory);
            };

            Post["/system/console/configMgr/com.adobe.cq.dam.ips.impl.replication.trigger.ReplicateOnModifyWorker"] = parameters =>
            {
                var post = Parameters.ValueOf<bool?>(parameters, Context.Request, "post", ParameterType.Query);
                var apply = Parameters.ValueOf<bool?>(parameters, Context.Request, "apply", ParameterType.Query);
                var delete = Parameters.ValueOf<bool?>(parameters, Context.Request, "delete", ParameterType.Query);
                var action = Parameters.ValueOf<string>(parameters, Context.Request, "action", ParameterType.Query);
                var location = Parameters.ValueOf<string>(parameters, Context.Request, "location", ParameterType.Query);
                var propertylist = Parameters.ValueOf<List<string>>(parameters, Context.Request, "propertylist", ParameterType.Query);
                var dmreplicateonmodifyEnabled = Parameters.ValueOf<bool?>(parameters, Context.Request, "dmreplicateonmodifyEnabled", ParameterType.Query);
                var dmreplicateonmodifyForcesyncdeletes = Parameters.ValueOf<bool?>(parameters, Context.Request, "dmreplicateonmodifyForcesyncdeletes", ParameterType.Query);
                return service.ComAdobeCqDamIpsImplReplicationTriggerReplicateOnModifyWorker(Context, post, apply, delete, action, location, propertylist, dmreplicateonmodifyEnabled, dmreplicateonmodifyForcesyncdeletes);
            };

            Post["/system/console/configMgr/com.adobe.cq.dam.mac.sync.helper.impl.MACSyncClientImpl"] = parameters =>
            {
                var post = Parameters.ValueOf<bool?>(parameters, Context.Request, "post", ParameterType.Query);
                var apply = Parameters.ValueOf<bool?>(parameters, Context.Request, "apply", ParameterType.Query);
                var delete = Parameters.ValueOf<bool?>(parameters, Context.Request, "delete", ParameterType.Query);
                var action = Parameters.ValueOf<string>(parameters, Context.Request, "action", ParameterType.Query);
                var location = Parameters.ValueOf<string>(parameters, Context.Request, "location", ParameterType.Query);
                var propertylist = Parameters.ValueOf<List<string>>(parameters, Context.Request, "propertylist", ParameterType.Query);
                var comAdobeDamMacSyncClientSoTimeout = Parameters.ValueOf<int?>(parameters, Context.Request, "comAdobeDamMacSyncClientSoTimeout", ParameterType.Query);
                return service.ComAdobeCqDamMacSyncHelperImplMACSyncClientImpl(Context, post, apply, delete, action, location, propertylist, comAdobeDamMacSyncClientSoTimeout);
            };

            Post["/system/console/configMgr/com.adobe.cq.dam.mac.sync.impl.DAMSyncServiceImpl"] = parameters =>
            {
                var post = Parameters.ValueOf<bool?>(parameters, Context.Request, "post", ParameterType.Query);
                var apply = Parameters.ValueOf<bool?>(parameters, Context.Request, "apply", ParameterType.Query);
                var delete = Parameters.ValueOf<bool?>(parameters, Context.Request, "delete", ParameterType.Query);
                var action = Parameters.ValueOf<string>(parameters, Context.Request, "action", ParameterType.Query);
                var location = Parameters.ValueOf<string>(parameters, Context.Request, "location", ParameterType.Query);
                var propertylist = Parameters.ValueOf<List<string>>(parameters, Context.Request, "propertylist", ParameterType.Query);
                var comAdobeCqDamMacSyncDamsyncserviceRegisteredPaths = Parameters.ValueOf<List<string>>(parameters, Context.Request, "comAdobeCqDamMacSyncDamsyncserviceRegisteredPaths", ParameterType.Query);
                var comAdobeCqDamMacSyncDamsyncserviceSyncRenditions = Parameters.ValueOf<bool?>(parameters, Context.Request, "comAdobeCqDamMacSyncDamsyncserviceSyncRenditions", ParameterType.Query);
                var comAdobeCqDamMacSyncDamsyncserviceReplicateThreadWaitMs = Parameters.ValueOf<int?>(parameters, Context.Request, "comAdobeCqDamMacSyncDamsyncserviceReplicateThreadWaitMs", ParameterType.Query);
                var comAdobeCqDamMacSyncDamsyncservicePlatform = Parameters.ValueOf<string>(parameters, Context.Request, "comAdobeCqDamMacSyncDamsyncservicePlatform", ParameterType.Query);
                return service.ComAdobeCqDamMacSyncImplDAMSyncServiceImpl(Context, post, apply, delete, action, location, propertylist, comAdobeCqDamMacSyncDamsyncserviceRegisteredPaths, comAdobeCqDamMacSyncDamsyncserviceSyncRenditions, comAdobeCqDamMacSyncDamsyncserviceReplicateThreadWaitMs, comAdobeCqDamMacSyncDamsyncservicePlatform);
            };

            Post["/system/console/configMgr/com.adobe.cq.dam.processor.nui.impl.NuiAssetProcessor"] = parameters =>
            {
                var post = Parameters.ValueOf<bool?>(parameters, Context.Request, "post", ParameterType.Query);
                var apply = Parameters.ValueOf<bool?>(parameters, Context.Request, "apply", ParameterType.Query);
                var delete = Parameters.ValueOf<bool?>(parameters, Context.Request, "delete", ParameterType.Query);
                var action = Parameters.ValueOf<string>(parameters, Context.Request, "action", ParameterType.Query);
                var location = Parameters.ValueOf<string>(parameters, Context.Request, "location", ParameterType.Query);
                var propertylist = Parameters.ValueOf<List<string>>(parameters, Context.Request, "propertylist", ParameterType.Query);
                var nuiEnabled = Parameters.ValueOf<bool?>(parameters, Context.Request, "nuiEnabled", ParameterType.Query);
                var nuiServiceUrl = Parameters.ValueOf<string>(parameters, Context.Request, "nuiServiceUrl", ParameterType.Query);
                var nuiApiKey = Parameters.ValueOf<string>(parameters, Context.Request, "nuiApiKey", ParameterType.Query);
                return service.ComAdobeCqDamProcessorNuiImplNuiAssetProcessor(Context, post, apply, delete, action, location, propertylist, nuiEnabled, nuiServiceUrl, nuiApiKey);
            };

            Post["/system/console/configMgr/com.adobe.cq.dam.s7imaging.impl.is.ImageServerComponent"] = parameters =>
            {
                var post = Parameters.ValueOf<bool?>(parameters, Context.Request, "post", ParameterType.Query);
                var apply = Parameters.ValueOf<bool?>(parameters, Context.Request, "apply", ParameterType.Query);
                var delete = Parameters.ValueOf<bool?>(parameters, Context.Request, "delete", ParameterType.Query);
                var action = Parameters.ValueOf<string>(parameters, Context.Request, "action", ParameterType.Query);
                var location = Parameters.ValueOf<string>(parameters, Context.Request, "location", ParameterType.Query);
                var propertylist = Parameters.ValueOf<List<string>>(parameters, Context.Request, "propertylist", ParameterType.Query);
                var tcpPort = Parameters.ValueOf<string>(parameters, Context.Request, "tcpPort", ParameterType.Query);
                var allowRemoteAccess = Parameters.ValueOf<bool?>(parameters, Context.Request, "allowRemoteAccess", ParameterType.Query);
                var maxRenderRgnPixels = Parameters.ValueOf<string>(parameters, Context.Request, "maxRenderRgnPixels", ParameterType.Query);
                var maxMessageSize = Parameters.ValueOf<string>(parameters, Context.Request, "maxMessageSize", ParameterType.Query);
                var randomAccessUrlTimeout = Parameters.ValueOf<int?>(parameters, Context.Request, "randomAccessUrlTimeout", ParameterType.Query);
                var workerThreads = Parameters.ValueOf<int?>(parameters, Context.Request, "workerThreads", ParameterType.Query);
                return service.ComAdobeCqDamS7imagingImplIsImageServerComponent(Context, post, apply, delete, action, location, propertylist, tcpPort, allowRemoteAccess, maxRenderRgnPixels, maxMessageSize, randomAccessUrlTimeout, workerThreads);
            };

            Post["/system/console/configMgr/com.adobe.cq.dam.s7imaging.impl.ps.PlatformServerServlet"] = parameters =>
            {
                var post = Parameters.ValueOf<bool?>(parameters, Context.Request, "post", ParameterType.Query);
                var apply = Parameters.ValueOf<bool?>(parameters, Context.Request, "apply", ParameterType.Query);
                var delete = Parameters.ValueOf<bool?>(parameters, Context.Request, "delete", ParameterType.Query);
                var action = Parameters.ValueOf<string>(parameters, Context.Request, "action", ParameterType.Query);
                var location = Parameters.ValueOf<string>(parameters, Context.Request, "location", ParameterType.Query);
                var propertylist = Parameters.ValueOf<List<string>>(parameters, Context.Request, "propertylist", ParameterType.Query);
                var cacheEnable = Parameters.ValueOf<bool?>(parameters, Context.Request, "cacheEnable", ParameterType.Query);
                var cacheRootPaths = Parameters.ValueOf<List<string>>(parameters, Context.Request, "cacheRootPaths", ParameterType.Query);
                var cacheMaxSize = Parameters.ValueOf<int?>(parameters, Context.Request, "cacheMaxSize", ParameterType.Query);
                var cacheMaxEntries = Parameters.ValueOf<int?>(parameters, Context.Request, "cacheMaxEntries", ParameterType.Query);
                return service.ComAdobeCqDamS7imagingImplPsPlatformServerServlet(Context, post, apply, delete, action, location, propertylist, cacheEnable, cacheRootPaths, cacheMaxSize, cacheMaxEntries);
            };

            Post["/system/console/configMgr/com.adobe.cq.dam.webdav.impl.io.AssetIOHandler"] = parameters =>
            {
                var post = Parameters.ValueOf<bool?>(parameters, Context.Request, "post", ParameterType.Query);
                var apply = Parameters.ValueOf<bool?>(parameters, Context.Request, "apply", ParameterType.Query);
                var delete = Parameters.ValueOf<bool?>(parameters, Context.Request, "delete", ParameterType.Query);
                var action = Parameters.ValueOf<string>(parameters, Context.Request, "action", ParameterType.Query);
                var location = Parameters.ValueOf<string>(parameters, Context.Request, "location", ParameterType.Query);
                var propertylist = Parameters.ValueOf<List<string>>(parameters, Context.Request, "propertylist", ParameterType.Query);
                var serviceRanking = Parameters.ValueOf<int?>(parameters, Context.Request, "serviceRanking", ParameterType.Query);
                var pathPrefix = Parameters.ValueOf<string>(parameters, Context.Request, "pathPrefix", ParameterType.Query);
                var createVersion = Parameters.ValueOf<bool?>(parameters, Context.Request, "createVersion", ParameterType.Query);
                return service.ComAdobeCqDamWebdavImplIoAssetIOHandler(Context, post, apply, delete, action, location, propertylist, serviceRanking, pathPrefix, createVersion);
            };

            Post["/system/console/configMgr/com.adobe.cq.dam.webdav.impl.io.DamWebdavVersionLinkingJob"] = parameters =>
            {
                var post = Parameters.ValueOf<bool?>(parameters, Context.Request, "post", ParameterType.Query);
                var apply = Parameters.ValueOf<bool?>(parameters, Context.Request, "apply", ParameterType.Query);
                var delete = Parameters.ValueOf<bool?>(parameters, Context.Request, "delete", ParameterType.Query);
                var action = Parameters.ValueOf<string>(parameters, Context.Request, "action", ParameterType.Query);
                var location = Parameters.ValueOf<string>(parameters, Context.Request, "location", ParameterType.Query);
                var propertylist = Parameters.ValueOf<List<string>>(parameters, Context.Request, "propertylist", ParameterType.Query);
                var cqDamWebdavVersionLinkingEnable = Parameters.ValueOf<bool?>(parameters, Context.Request, "cqDamWebdavVersionLinkingEnable", ParameterType.Query);
                var cqDamWebdavVersionLinkingSchedulerPeriod = Parameters.ValueOf<int?>(parameters, Context.Request, "cqDamWebdavVersionLinkingSchedulerPeriod", ParameterType.Query);
                var cqDamWebdavVersionLinkingStagingTimeout = Parameters.ValueOf<int?>(parameters, Context.Request, "cqDamWebdavVersionLinkingStagingTimeout", ParameterType.Query);
                return service.ComAdobeCqDamWebdavImplIoDamWebdavVersionLinkingJob(Context, post, apply, delete, action, location, propertylist, cqDamWebdavVersionLinkingEnable, cqDamWebdavVersionLinkingSchedulerPeriod, cqDamWebdavVersionLinkingStagingTimeout);
            };

            Post["/system/console/configMgr/com.adobe.cq.dam.webdav.impl.io.SpecialFilesHandler"] = parameters =>
            {
                var post = Parameters.ValueOf<bool?>(parameters, Context.Request, "post", ParameterType.Query);
                var apply = Parameters.ValueOf<bool?>(parameters, Context.Request, "apply", ParameterType.Query);
                var delete = Parameters.ValueOf<bool?>(parameters, Context.Request, "delete", ParameterType.Query);
                var action = Parameters.ValueOf<string>(parameters, Context.Request, "action", ParameterType.Query);
                var location = Parameters.ValueOf<string>(parameters, Context.Request, "location", ParameterType.Query);
                var propertylist = Parameters.ValueOf<List<string>>(parameters, Context.Request, "propertylist", ParameterType.Query);
                var comDayCqDamCoreImplIoSpecialFilesHandlerFilepatters = Parameters.ValueOf<List<string>>(parameters, Context.Request, "comDayCqDamCoreImplIoSpecialFilesHandlerFilepatters", ParameterType.Query);
                return service.ComAdobeCqDamWebdavImplIoSpecialFilesHandler(Context, post, apply, delete, action, location, propertylist, comDayCqDamCoreImplIoSpecialFilesHandlerFilepatters);
            };

            Post["/system/console/configMgr/com.adobe.cq.deserfw.impl.DeserializationFirewallImpl"] = parameters =>
            {
                var post = Parameters.ValueOf<bool?>(parameters, Context.Request, "post", ParameterType.Query);
                var apply = Parameters.ValueOf<bool?>(parameters, Context.Request, "apply", ParameterType.Query);
                var delete = Parameters.ValueOf<bool?>(parameters, Context.Request, "delete", ParameterType.Query);
                var action = Parameters.ValueOf<string>(parameters, Context.Request, "action", ParameterType.Query);
                var location = Parameters.ValueOf<string>(parameters, Context.Request, "location", ParameterType.Query);
                var propertylist = Parameters.ValueOf<List<string>>(parameters, Context.Request, "propertylist", ParameterType.Query);
                var firewallDeserializationWhitelist = Parameters.ValueOf<List<string>>(parameters, Context.Request, "firewallDeserializationWhitelist", ParameterType.Query);
                var firewallDeserializationBlacklist = Parameters.ValueOf<List<string>>(parameters, Context.Request, "firewallDeserializationBlacklist", ParameterType.Query);
                var firewallDeserializationDiagnostics = Parameters.ValueOf<string>(parameters, Context.Request, "firewallDeserializationDiagnostics", ParameterType.Query);
                return service.ComAdobeCqDeserfwImplDeserializationFirewallImpl(Context, post, apply, delete, action, location, propertylist, firewallDeserializationWhitelist, firewallDeserializationBlacklist, firewallDeserializationDiagnostics);
            };

            Post["/system/console/configMgr/com.adobe.cq.dtm.impl.service.DTMWebServiceImpl"] = parameters =>
            {
                var post = Parameters.ValueOf<bool?>(parameters, Context.Request, "post", ParameterType.Query);
                var apply = Parameters.ValueOf<bool?>(parameters, Context.Request, "apply", ParameterType.Query);
                var delete = Parameters.ValueOf<bool?>(parameters, Context.Request, "delete", ParameterType.Query);
                var action = Parameters.ValueOf<string>(parameters, Context.Request, "action", ParameterType.Query);
                var location = Parameters.ValueOf<string>(parameters, Context.Request, "location", ParameterType.Query);
                var propertylist = Parameters.ValueOf<List<string>>(parameters, Context.Request, "propertylist", ParameterType.Query);
                var connectionTimeout = Parameters.ValueOf<int?>(parameters, Context.Request, "connectionTimeout", ParameterType.Query);
                var socketTimeout = Parameters.ValueOf<int?>(parameters, Context.Request, "socketTimeout", ParameterType.Query);
                return service.ComAdobeCqDtmImplServiceDTMWebServiceImpl(Context, post, apply, delete, action, location, propertylist, connectionTimeout, socketTimeout);
            };

            Post["/system/console/configMgr/com.adobe.cq.dtm.impl.servlets.DTMDeployHookServlet"] = parameters =>
            {
                var post = Parameters.ValueOf<bool?>(parameters, Context.Request, "post", ParameterType.Query);
                var apply = Parameters.ValueOf<bool?>(parameters, Context.Request, "apply", ParameterType.Query);
                var delete = Parameters.ValueOf<bool?>(parameters, Context.Request, "delete", ParameterType.Query);
                var action = Parameters.ValueOf<string>(parameters, Context.Request, "action", ParameterType.Query);
                var location = Parameters.ValueOf<string>(parameters, Context.Request, "location", ParameterType.Query);
                var propertylist = Parameters.ValueOf<List<string>>(parameters, Context.Request, "propertylist", ParameterType.Query);
                var dtmStagingIpWhitelist = Parameters.ValueOf<List<string>>(parameters, Context.Request, "dtmStagingIpWhitelist", ParameterType.Query);
                var dtmProductionIpWhitelist = Parameters.ValueOf<List<string>>(parameters, Context.Request, "dtmProductionIpWhitelist", ParameterType.Query);
                return service.ComAdobeCqDtmImplServletsDTMDeployHookServlet(Context, post, apply, delete, action, location, propertylist, dtmStagingIpWhitelist, dtmProductionIpWhitelist);
            };

            Post["/system/console/configMgr/com.adobe.cq.dtm.reactor.impl.service.WebServiceImpl"] = parameters =>
            {
                var post = Parameters.ValueOf<bool?>(parameters, Context.Request, "post", ParameterType.Query);
                var apply = Parameters.ValueOf<bool?>(parameters, Context.Request, "apply", ParameterType.Query);
                var delete = Parameters.ValueOf<bool?>(parameters, Context.Request, "delete", ParameterType.Query);
                var action = Parameters.ValueOf<string>(parameters, Context.Request, "action", ParameterType.Query);
                var location = Parameters.ValueOf<string>(parameters, Context.Request, "location", ParameterType.Query);
                var propertylist = Parameters.ValueOf<List<string>>(parameters, Context.Request, "propertylist", ParameterType.Query);
                var endpointUri = Parameters.ValueOf<string>(parameters, Context.Request, "endpointUri", ParameterType.Query);
                var connectionTimeout = Parameters.ValueOf<int?>(parameters, Context.Request, "connectionTimeout", ParameterType.Query);
                var socketTimeout = Parameters.ValueOf<int?>(parameters, Context.Request, "socketTimeout", ParameterType.Query);
                return service.ComAdobeCqDtmReactorImplServiceWebServiceImpl(Context, post, apply, delete, action, location, propertylist, endpointUri, connectionTimeout, socketTimeout);
            };

            Post["/system/console/configMgr/com.adobe.cq.experiencelog.impl.ExperienceLogConfigServlet"] = parameters =>
            {
                var post = Parameters.ValueOf<bool?>(parameters, Context.Request, "post", ParameterType.Query);
                var apply = Parameters.ValueOf<bool?>(parameters, Context.Request, "apply", ParameterType.Query);
                var delete = Parameters.ValueOf<bool?>(parameters, Context.Request, "delete", ParameterType.Query);
                var action = Parameters.ValueOf<string>(parameters, Context.Request, "action", ParameterType.Query);
                var location = Parameters.ValueOf<string>(parameters, Context.Request, "location", ParameterType.Query);
                var propertylist = Parameters.ValueOf<List<string>>(parameters, Context.Request, "propertylist", ParameterType.Query);
                var enabled = Parameters.ValueOf<bool?>(parameters, Context.Request, "enabled", ParameterType.Query);
                var disabledForGroups = Parameters.ValueOf<List<string>>(parameters, Context.Request, "disabledForGroups", ParameterType.Query);
                return service.ComAdobeCqExperiencelogImplExperienceLogConfigServlet(Context, post, apply, delete, action, location, propertylist, enabled, disabledForGroups);
            };

            Post["/system/console/configMgr/com.adobe.cq.hc.ContentPackagesHealthCheck"] = parameters =>
            {
                var post = Parameters.ValueOf<bool?>(parameters, Context.Request, "post", ParameterType.Query);
                var apply = Parameters.ValueOf<bool?>(parameters, Context.Request, "apply", ParameterType.Query);
                var delete = Parameters.ValueOf<bool?>(parameters, Context.Request, "delete", ParameterType.Query);
                var action = Parameters.ValueOf<string>(parameters, Context.Request, "action", ParameterType.Query);
                var location = Parameters.ValueOf<string>(parameters, Context.Request, "location", ParameterType.Query);
                var propertylist = Parameters.ValueOf<List<string>>(parameters, Context.Request, "propertylist", ParameterType.Query);
                var hcName = Parameters.ValueOf<string>(parameters, Context.Request, "hcName", ParameterType.Query);
                var hcTags = Parameters.ValueOf<List<string>>(parameters, Context.Request, "hcTags", ParameterType.Query);
                var hcMbeanName = Parameters.ValueOf<string>(parameters, Context.Request, "hcMbeanName", ParameterType.Query);
                var packageNames = Parameters.ValueOf<List<string>>(parameters, Context.Request, "packageNames", ParameterType.Query);
                return service.ComAdobeCqHcContentPackagesHealthCheck(Context, post, apply, delete, action, location, propertylist, hcName, hcTags, hcMbeanName, packageNames);
            };

            Post["/system/console/configMgr/com.adobe.cq.history.impl.HistoryRequestFilter"] = parameters =>
            {
                var post = Parameters.ValueOf<bool?>(parameters, Context.Request, "post", ParameterType.Query);
                var apply = Parameters.ValueOf<bool?>(parameters, Context.Request, "apply", ParameterType.Query);
                var delete = Parameters.ValueOf<bool?>(parameters, Context.Request, "delete", ParameterType.Query);
                var action = Parameters.ValueOf<string>(parameters, Context.Request, "action", ParameterType.Query);
                var location = Parameters.ValueOf<string>(parameters, Context.Request, "location", ParameterType.Query);
                var propertylist = Parameters.ValueOf<List<string>>(parameters, Context.Request, "propertylist", ParameterType.Query);
                var historyRequestFilterExcludedSelectors = Parameters.ValueOf<List<string>>(parameters, Context.Request, "historyRequestFilterExcludedSelectors", ParameterType.Query);
                var historyRequestFilterExcludedExtensions = Parameters.ValueOf<List<string>>(parameters, Context.Request, "historyRequestFilterExcludedExtensions", ParameterType.Query);
                return service.ComAdobeCqHistoryImplHistoryRequestFilter(Context, post, apply, delete, action, location, propertylist, historyRequestFilterExcludedSelectors, historyRequestFilterExcludedExtensions);
            };

            Post["/system/console/configMgr/com.adobe.cq.history.impl.HistoryServiceImpl"] = parameters =>
            {
                var post = Parameters.ValueOf<bool?>(parameters, Context.Request, "post", ParameterType.Query);
                var apply = Parameters.ValueOf<bool?>(parameters, Context.Request, "apply", ParameterType.Query);
                var delete = Parameters.ValueOf<bool?>(parameters, Context.Request, "delete", ParameterType.Query);
                var action = Parameters.ValueOf<string>(parameters, Context.Request, "action", ParameterType.Query);
                var location = Parameters.ValueOf<string>(parameters, Context.Request, "location", ParameterType.Query);
                var propertylist = Parameters.ValueOf<List<string>>(parameters, Context.Request, "propertylist", ParameterType.Query);
                var historyServiceResourceTypes = Parameters.ValueOf<List<string>>(parameters, Context.Request, "historyServiceResourceTypes", ParameterType.Query);
                var historyServicePathFilter = Parameters.ValueOf<List<string>>(parameters, Context.Request, "historyServicePathFilter", ParameterType.Query);
                return service.ComAdobeCqHistoryImplHistoryServiceImpl(Context, post, apply, delete, action, location, propertylist, historyServiceResourceTypes, historyServicePathFilter);
            };

            Post["/system/console/configMgr/com.adobe.cq.inbox.impl.typeprovider.ItemTypeProvider"] = parameters =>
            {
                var post = Parameters.ValueOf<bool?>(parameters, Context.Request, "post", ParameterType.Query);
                var apply = Parameters.ValueOf<bool?>(parameters, Context.Request, "apply", ParameterType.Query);
                var delete = Parameters.ValueOf<bool?>(parameters, Context.Request, "delete", ParameterType.Query);
                var action = Parameters.ValueOf<string>(parameters, Context.Request, "action", ParameterType.Query);
                var location = Parameters.ValueOf<string>(parameters, Context.Request, "location", ParameterType.Query);
                var propertylist = Parameters.ValueOf<List<string>>(parameters, Context.Request, "propertylist", ParameterType.Query);
                var inboxImplTypeproviderRegistrypaths = Parameters.ValueOf<List<string>>(parameters, Context.Request, "inboxImplTypeproviderRegistrypaths", ParameterType.Query);
                var inboxImplTypeproviderLegacypaths = Parameters.ValueOf<List<string>>(parameters, Context.Request, "inboxImplTypeproviderLegacypaths", ParameterType.Query);
                var inboxImplTypeproviderDefaulturlFailureitem = Parameters.ValueOf<string>(parameters, Context.Request, "inboxImplTypeproviderDefaulturlFailureitem", ParameterType.Query);
                var inboxImplTypeproviderDefaulturlWorkitem = Parameters.ValueOf<string>(parameters, Context.Request, "inboxImplTypeproviderDefaulturlWorkitem", ParameterType.Query);
                var inboxImplTypeproviderDefaulturlTask = Parameters.ValueOf<string>(parameters, Context.Request, "inboxImplTypeproviderDefaulturlTask", ParameterType.Query);
                return service.ComAdobeCqInboxImplTypeproviderItemTypeProvider(Context, post, apply, delete, action, location, propertylist, inboxImplTypeproviderRegistrypaths, inboxImplTypeproviderLegacypaths, inboxImplTypeproviderDefaulturlFailureitem, inboxImplTypeproviderDefaulturlWorkitem, inboxImplTypeproviderDefaulturlTask);
            };

            Post["/system/console/configMgr/com.adobe.cq.projects.impl.servlet.ProjectImageServlet"] = parameters =>
            {
                var post = Parameters.ValueOf<bool?>(parameters, Context.Request, "post", ParameterType.Query);
                var apply = Parameters.ValueOf<bool?>(parameters, Context.Request, "apply", ParameterType.Query);
                var delete = Parameters.ValueOf<bool?>(parameters, Context.Request, "delete", ParameterType.Query);
                var action = Parameters.ValueOf<string>(parameters, Context.Request, "action", ParameterType.Query);
                var location = Parameters.ValueOf<string>(parameters, Context.Request, "location", ParameterType.Query);
                var propertylist = Parameters.ValueOf<List<string>>(parameters, Context.Request, "propertylist", ParameterType.Query);
                var imageQuality = Parameters.ValueOf<string>(parameters, Context.Request, "imageQuality", ParameterType.Query);
                var imageSupportedResolutions = Parameters.ValueOf<string>(parameters, Context.Request, "imageSupportedResolutions", ParameterType.Query);
                return service.ComAdobeCqProjectsImplServletProjectImageServlet(Context, post, apply, delete, action, location, propertylist, imageQuality, imageSupportedResolutions);
            };

            Post["/system/console/configMgr/com.adobe.cq.projects.purge.Scheduler"] = parameters =>
            {
                var post = Parameters.ValueOf<bool?>(parameters, Context.Request, "post", ParameterType.Query);
                var apply = Parameters.ValueOf<bool?>(parameters, Context.Request, "apply", ParameterType.Query);
                var delete = Parameters.ValueOf<bool?>(parameters, Context.Request, "delete", ParameterType.Query);
                var action = Parameters.ValueOf<string>(parameters, Context.Request, "action", ParameterType.Query);
                var location = Parameters.ValueOf<string>(parameters, Context.Request, "location", ParameterType.Query);
                var propertylist = Parameters.ValueOf<List<string>>(parameters, Context.Request, "propertylist", ParameterType.Query);
                var scheduledpurgeName = Parameters.ValueOf<string>(parameters, Context.Request, "scheduledpurgeName", ParameterType.Query);
                var scheduledpurgePurgeActive = Parameters.ValueOf<bool?>(parameters, Context.Request, "scheduledpurgePurgeActive", ParameterType.Query);
                var scheduledpurgeTemplates = Parameters.ValueOf<List<string>>(parameters, Context.Request, "scheduledpurgeTemplates", ParameterType.Query);
                var scheduledpurgePurgeGroups = Parameters.ValueOf<bool?>(parameters, Context.Request, "scheduledpurgePurgeGroups", ParameterType.Query);
                var scheduledpurgePurgeAssets = Parameters.ValueOf<bool?>(parameters, Context.Request, "scheduledpurgePurgeAssets", ParameterType.Query);
                var scheduledpurgeTerminateRunningWorkflows = Parameters.ValueOf<bool?>(parameters, Context.Request, "scheduledpurgeTerminateRunningWorkflows", ParameterType.Query);
                var scheduledpurgeDaysold = Parameters.ValueOf<int?>(parameters, Context.Request, "scheduledpurgeDaysold", ParameterType.Query);
                var scheduledpurgeSaveThreshold = Parameters.ValueOf<int?>(parameters, Context.Request, "scheduledpurgeSaveThreshold", ParameterType.Query);
                return service.ComAdobeCqProjectsPurgeScheduler(Context, post, apply, delete, action, location, propertylist, scheduledpurgeName, scheduledpurgePurgeActive, scheduledpurgeTemplates, scheduledpurgePurgeGroups, scheduledpurgePurgeAssets, scheduledpurgeTerminateRunningWorkflows, scheduledpurgeDaysold, scheduledpurgeSaveThreshold);
            };

            Post["/system/console/configMgr/com.adobe.cq.scheduled.exporter.impl.ScheduledExporterImpl"] = parameters =>
            {
                var post = Parameters.ValueOf<bool?>(parameters, Context.Request, "post", ParameterType.Query);
                var apply = Parameters.ValueOf<bool?>(parameters, Context.Request, "apply", ParameterType.Query);
                var delete = Parameters.ValueOf<bool?>(parameters, Context.Request, "delete", ParameterType.Query);
                var action = Parameters.ValueOf<string>(parameters, Context.Request, "action", ParameterType.Query);
                var location = Parameters.ValueOf<string>(parameters, Context.Request, "location", ParameterType.Query);
                var propertylist = Parameters.ValueOf<List<string>>(parameters, Context.Request, "propertylist", ParameterType.Query);
                var includePaths = Parameters.ValueOf<List<string>>(parameters, Context.Request, "includePaths", ParameterType.Query);
                var exporterUser = Parameters.ValueOf<string>(parameters, Context.Request, "exporterUser", ParameterType.Query);
                return service.ComAdobeCqScheduledExporterImplScheduledExporterImpl(Context, post, apply, delete, action, location, propertylist, includePaths, exporterUser);
            };

            Post["/system/console/configMgr/com.adobe.cq.screens.analytics.impl.ScreensAnalyticsServiceImpl"] = parameters =>
            {
                var post = Parameters.ValueOf<bool?>(parameters, Context.Request, "post", ParameterType.Query);
                var apply = Parameters.ValueOf<bool?>(parameters, Context.Request, "apply", ParameterType.Query);
                var delete = Parameters.ValueOf<bool?>(parameters, Context.Request, "delete", ParameterType.Query);
                var action = Parameters.ValueOf<string>(parameters, Context.Request, "action", ParameterType.Query);
                var location = Parameters.ValueOf<string>(parameters, Context.Request, "location", ParameterType.Query);
                var propertylist = Parameters.ValueOf<List<string>>(parameters, Context.Request, "propertylist", ParameterType.Query);
                var comAdobeCqScreensAnalyticsImplUrl = Parameters.ValueOf<string>(parameters, Context.Request, "comAdobeCqScreensAnalyticsImplUrl", ParameterType.Query);
                var comAdobeCqScreensAnalyticsImplApikey = Parameters.ValueOf<string>(parameters, Context.Request, "comAdobeCqScreensAnalyticsImplApikey", ParameterType.Query);
                var comAdobeCqScreensAnalyticsImplProject = Parameters.ValueOf<string>(parameters, Context.Request, "comAdobeCqScreensAnalyticsImplProject", ParameterType.Query);
                var comAdobeCqScreensAnalyticsImplEnvironment = Parameters.ValueOf<string>(parameters, Context.Request, "comAdobeCqScreensAnalyticsImplEnvironment", ParameterType.Query);
                var comAdobeCqScreensAnalyticsImplSendFrequency = Parameters.ValueOf<int?>(parameters, Context.Request, "comAdobeCqScreensAnalyticsImplSendFrequency", ParameterType.Query);
                return service.ComAdobeCqScreensAnalyticsImplScreensAnalyticsServiceImpl(Context, post, apply, delete, action, location, propertylist, comAdobeCqScreensAnalyticsImplUrl, comAdobeCqScreensAnalyticsImplApikey, comAdobeCqScreensAnalyticsImplProject, comAdobeCqScreensAnalyticsImplEnvironment, comAdobeCqScreensAnalyticsImplSendFrequency);
            };

            Post["/system/console/configMgr/com.adobe.cq.screens.device.impl.DeviceService"] = parameters =>
            {
                var post = Parameters.ValueOf<bool?>(parameters, Context.Request, "post", ParameterType.Query);
                var apply = Parameters.ValueOf<bool?>(parameters, Context.Request, "apply", ParameterType.Query);
                var delete = Parameters.ValueOf<bool?>(parameters, Context.Request, "delete", ParameterType.Query);
                var action = Parameters.ValueOf<string>(parameters, Context.Request, "action", ParameterType.Query);
                var location = Parameters.ValueOf<string>(parameters, Context.Request, "location", ParameterType.Query);
                var propertylist = Parameters.ValueOf<List<string>>(parameters, Context.Request, "propertylist", ParameterType.Query);
                var comAdobeAemScreensPlayerPingfrequency = Parameters.ValueOf<int?>(parameters, Context.Request, "comAdobeAemScreensPlayerPingfrequency", ParameterType.Query);
                var comAdobeAemScreensDevicePaswordSpecialchars = Parameters.ValueOf<string>(parameters, Context.Request, "comAdobeAemScreensDevicePaswordSpecialchars", ParameterType.Query);
                var comAdobeAemScreensDevicePaswordMinlowercasechars = Parameters.ValueOf<int?>(parameters, Context.Request, "comAdobeAemScreensDevicePaswordMinlowercasechars", ParameterType.Query);
                var comAdobeAemScreensDevicePaswordMinuppercasechars = Parameters.ValueOf<int?>(parameters, Context.Request, "comAdobeAemScreensDevicePaswordMinuppercasechars", ParameterType.Query);
                var comAdobeAemScreensDevicePaswordMinnumberchars = Parameters.ValueOf<int?>(parameters, Context.Request, "comAdobeAemScreensDevicePaswordMinnumberchars", ParameterType.Query);
                var comAdobeAemScreensDevicePaswordMinspecialchars = Parameters.ValueOf<int?>(parameters, Context.Request, "comAdobeAemScreensDevicePaswordMinspecialchars", ParameterType.Query);
                var comAdobeAemScreensDevicePaswordMinlength = Parameters.ValueOf<int?>(parameters, Context.Request, "comAdobeAemScreensDevicePaswordMinlength", ParameterType.Query);
                return service.ComAdobeCqScreensDeviceImplDeviceService(Context, post, apply, delete, action, location, propertylist, comAdobeAemScreensPlayerPingfrequency, comAdobeAemScreensDevicePaswordSpecialchars, comAdobeAemScreensDevicePaswordMinlowercasechars, comAdobeAemScreensDevicePaswordMinuppercasechars, comAdobeAemScreensDevicePaswordMinnumberchars, comAdobeAemScreensDevicePaswordMinspecialchars, comAdobeAemScreensDevicePaswordMinlength);
            };

            Post["/system/console/configMgr/com.adobe.cq.screens.device.registration.impl.RegistrationServiceImpl"] = parameters =>
            {
                var post = Parameters.ValueOf<bool?>(parameters, Context.Request, "post", ParameterType.Query);
                var apply = Parameters.ValueOf<bool?>(parameters, Context.Request, "apply", ParameterType.Query);
                var delete = Parameters.ValueOf<bool?>(parameters, Context.Request, "delete", ParameterType.Query);
                var action = Parameters.ValueOf<string>(parameters, Context.Request, "action", ParameterType.Query);
                var location = Parameters.ValueOf<string>(parameters, Context.Request, "location", ParameterType.Query);
                var propertylist = Parameters.ValueOf<List<string>>(parameters, Context.Request, "propertylist", ParameterType.Query);
                var deviceRegistrationTimeout = Parameters.ValueOf<int?>(parameters, Context.Request, "deviceRegistrationTimeout", ParameterType.Query);
                return service.ComAdobeCqScreensDeviceRegistrationImplRegistrationServiceImpl(Context, post, apply, delete, action, location, propertylist, deviceRegistrationTimeout);
            };

            Post["/system/console/configMgr/com.adobe.cq.screens.impl.handler.ChannelsUpdateHandler"] = parameters =>
            {
                var post = Parameters.ValueOf<bool?>(parameters, Context.Request, "post", ParameterType.Query);
                var apply = Parameters.ValueOf<bool?>(parameters, Context.Request, "apply", ParameterType.Query);
                var delete = Parameters.ValueOf<bool?>(parameters, Context.Request, "delete", ParameterType.Query);
                var action = Parameters.ValueOf<string>(parameters, Context.Request, "action", ParameterType.Query);
                var location = Parameters.ValueOf<string>(parameters, Context.Request, "location", ParameterType.Query);
                var propertylist = Parameters.ValueOf<List<string>>(parameters, Context.Request, "propertylist", ParameterType.Query);
                var cqPagesupdatehandlerImageresourcetypes = Parameters.ValueOf<List<string>>(parameters, Context.Request, "cqPagesupdatehandlerImageresourcetypes", ParameterType.Query);
                var cqPagesupdatehandlerProductresourcetypes = Parameters.ValueOf<List<string>>(parameters, Context.Request, "cqPagesupdatehandlerProductresourcetypes", ParameterType.Query);
                var cqPagesupdatehandlerVideoresourcetypes = Parameters.ValueOf<List<string>>(parameters, Context.Request, "cqPagesupdatehandlerVideoresourcetypes", ParameterType.Query);
                var cqPagesupdatehandlerDynamicsequenceresourcetypes = Parameters.ValueOf<List<string>>(parameters, Context.Request, "cqPagesupdatehandlerDynamicsequenceresourcetypes", ParameterType.Query);
                var cqPagesupdatehandlerPreviewmodepaths = Parameters.ValueOf<List<string>>(parameters, Context.Request, "cqPagesupdatehandlerPreviewmodepaths", ParameterType.Query);
                return service.ComAdobeCqScreensImplHandlerChannelsUpdateHandler(Context, post, apply, delete, action, location, propertylist, cqPagesupdatehandlerImageresourcetypes, cqPagesupdatehandlerProductresourcetypes, cqPagesupdatehandlerVideoresourcetypes, cqPagesupdatehandlerDynamicsequenceresourcetypes, cqPagesupdatehandlerPreviewmodepaths);
            };

            Post["/system/console/configMgr/com.adobe.cq.screens.impl.jobs.DistributedDevicesStatiUpdateJob"] = parameters =>
            {
                var post = Parameters.ValueOf<bool?>(parameters, Context.Request, "post", ParameterType.Query);
                var apply = Parameters.ValueOf<bool?>(parameters, Context.Request, "apply", ParameterType.Query);
                var delete = Parameters.ValueOf<bool?>(parameters, Context.Request, "delete", ParameterType.Query);
                var action = Parameters.ValueOf<string>(parameters, Context.Request, "action", ParameterType.Query);
                var location = Parameters.ValueOf<string>(parameters, Context.Request, "location", ParameterType.Query);
                var propertylist = Parameters.ValueOf<List<string>>(parameters, Context.Request, "propertylist", ParameterType.Query);
                var schedulerExpression = Parameters.ValueOf<string>(parameters, Context.Request, "schedulerExpression", ParameterType.Query);
                return service.ComAdobeCqScreensImplJobsDistributedDevicesStatiUpdateJob(Context, post, apply, delete, action, location, propertylist, schedulerExpression);
            };

            Post["/system/console/configMgr/com.adobe.cq.screens.impl.remote.impl.DistributedHttpClientImpl"] = parameters =>
            {
                var post = Parameters.ValueOf<bool?>(parameters, Context.Request, "post", ParameterType.Query);
                var apply = Parameters.ValueOf<bool?>(parameters, Context.Request, "apply", ParameterType.Query);
                var delete = Parameters.ValueOf<bool?>(parameters, Context.Request, "delete", ParameterType.Query);
                var action = Parameters.ValueOf<string>(parameters, Context.Request, "action", ParameterType.Query);
                var location = Parameters.ValueOf<string>(parameters, Context.Request, "location", ParameterType.Query);
                var propertylist = Parameters.ValueOf<List<string>>(parameters, Context.Request, "propertylist", ParameterType.Query);
                var comAdobeAemScreensImplRemoteRequestTimeout = Parameters.ValueOf<int?>(parameters, Context.Request, "comAdobeAemScreensImplRemoteRequestTimeout", ParameterType.Query);
                return service.ComAdobeCqScreensImplRemoteImplDistributedHttpClientImpl(Context, post, apply, delete, action, location, propertylist, comAdobeAemScreensImplRemoteRequestTimeout);
            };

            Post["/system/console/configMgr/com.adobe.cq.screens.impl.ScreensChannelPostProcessor"] = parameters =>
            {
                var post = Parameters.ValueOf<bool?>(parameters, Context.Request, "post", ParameterType.Query);
                var apply = Parameters.ValueOf<bool?>(parameters, Context.Request, "apply", ParameterType.Query);
                var delete = Parameters.ValueOf<bool?>(parameters, Context.Request, "delete", ParameterType.Query);
                var action = Parameters.ValueOf<string>(parameters, Context.Request, "action", ParameterType.Query);
                var location = Parameters.ValueOf<string>(parameters, Context.Request, "location", ParameterType.Query);
                var propertylist = Parameters.ValueOf<List<string>>(parameters, Context.Request, "propertylist", ParameterType.Query);
                var screensChannelsPropertiesToRemove = Parameters.ValueOf<List<string>>(parameters, Context.Request, "screensChannelsPropertiesToRemove", ParameterType.Query);
                return service.ComAdobeCqScreensImplScreensChannelPostProcessor(Context, post, apply, delete, action, location, propertylist, screensChannelsPropertiesToRemove);
            };

            Post["/system/console/configMgr/com.adobe.cq.screens.monitoring.impl.ScreensMonitoringServiceImpl"] = parameters =>
            {
                var post = Parameters.ValueOf<bool?>(parameters, Context.Request, "post", ParameterType.Query);
                var apply = Parameters.ValueOf<bool?>(parameters, Context.Request, "apply", ParameterType.Query);
                var delete = Parameters.ValueOf<bool?>(parameters, Context.Request, "delete", ParameterType.Query);
                var action = Parameters.ValueOf<string>(parameters, Context.Request, "action", ParameterType.Query);
                var location = Parameters.ValueOf<string>(parameters, Context.Request, "location", ParameterType.Query);
                var propertylist = Parameters.ValueOf<List<string>>(parameters, Context.Request, "propertylist", ParameterType.Query);
                var comAdobeCqScreensMonitoringImplScreensMonitoringServiceImplProjectPath = Parameters.ValueOf<List<string>>(parameters, Context.Request, "comAdobeCqScreensMonitoringImplScreensMonitoringServiceImplProjectPath", ParameterType.Query);
                var comAdobeCqScreensMonitoringImplScreensMonitoringServiceImplScheduleFrequency = Parameters.ValueOf<string>(parameters, Context.Request, "comAdobeCqScreensMonitoringImplScreensMonitoringServiceImplScheduleFrequency", ParameterType.Query);
                var comAdobeCqScreensMonitoringImplScreensMonitoringServiceImplPingTimeout = Parameters.ValueOf<int?>(parameters, Context.Request, "comAdobeCqScreensMonitoringImplScreensMonitoringServiceImplPingTimeout", ParameterType.Query);
                var comAdobeCqScreensMonitoringImplScreensMonitoringServiceImplRecipients = Parameters.ValueOf<string>(parameters, Context.Request, "comAdobeCqScreensMonitoringImplScreensMonitoringServiceImplRecipients", ParameterType.Query);
                var comAdobeCqScreensMonitoringImplScreensMonitoringServiceImplSmtpserver = Parameters.ValueOf<string>(parameters, Context.Request, "comAdobeCqScreensMonitoringImplScreensMonitoringServiceImplSmtpserver", ParameterType.Query);
                var comAdobeCqScreensMonitoringImplScreensMonitoringServiceImplSmtpport = Parameters.ValueOf<int?>(parameters, Context.Request, "comAdobeCqScreensMonitoringImplScreensMonitoringServiceImplSmtpport", ParameterType.Query);
                var comAdobeCqScreensMonitoringImplScreensMonitoringServiceImplUsetls = Parameters.ValueOf<bool?>(parameters, Context.Request, "comAdobeCqScreensMonitoringImplScreensMonitoringServiceImplUsetls", ParameterType.Query);
                var comAdobeCqScreensMonitoringImplScreensMonitoringServiceImplUsername = Parameters.ValueOf<string>(parameters, Context.Request, "comAdobeCqScreensMonitoringImplScreensMonitoringServiceImplUsername", ParameterType.Query);
                var comAdobeCqScreensMonitoringImplScreensMonitoringServiceImplPassword = Parameters.ValueOf<string>(parameters, Context.Request, "comAdobeCqScreensMonitoringImplScreensMonitoringServiceImplPassword", ParameterType.Query);
                return service.ComAdobeCqScreensMonitoringImplScreensMonitoringServiceImpl(Context, post, apply, delete, action, location, propertylist, comAdobeCqScreensMonitoringImplScreensMonitoringServiceImplProjectPath, comAdobeCqScreensMonitoringImplScreensMonitoringServiceImplScheduleFrequency, comAdobeCqScreensMonitoringImplScreensMonitoringServiceImplPingTimeout, comAdobeCqScreensMonitoringImplScreensMonitoringServiceImplRecipients, comAdobeCqScreensMonitoringImplScreensMonitoringServiceImplSmtpserver, comAdobeCqScreensMonitoringImplScreensMonitoringServiceImplSmtpport, comAdobeCqScreensMonitoringImplScreensMonitoringServiceImplUsetls, comAdobeCqScreensMonitoringImplScreensMonitoringServiceImplUsername, comAdobeCqScreensMonitoringImplScreensMonitoringServiceImplPassword);
            };

            Post["/system/console/configMgr/com.adobe.cq.screens.mq.activemq.impl.ArtemisJMSProvider"] = parameters =>
            {
                var post = Parameters.ValueOf<bool?>(parameters, Context.Request, "post", ParameterType.Query);
                var apply = Parameters.ValueOf<bool?>(parameters, Context.Request, "apply", ParameterType.Query);
                var delete = Parameters.ValueOf<bool?>(parameters, Context.Request, "delete", ParameterType.Query);
                var action = Parameters.ValueOf<string>(parameters, Context.Request, "action", ParameterType.Query);
                var location = Parameters.ValueOf<string>(parameters, Context.Request, "location", ParameterType.Query);
                var propertylist = Parameters.ValueOf<List<string>>(parameters, Context.Request, "propertylist", ParameterType.Query);
                var serviceRanking = Parameters.ValueOf<int?>(parameters, Context.Request, "serviceRanking", ParameterType.Query);
                var globalSize = Parameters.ValueOf<int?>(parameters, Context.Request, "globalSize", ParameterType.Query);
                var maxDiskUsage = Parameters.ValueOf<int?>(parameters, Context.Request, "maxDiskUsage", ParameterType.Query);
                var persistenceEnabled = Parameters.ValueOf<bool?>(parameters, Context.Request, "persistenceEnabled", ParameterType.Query);
                var threadPoolMaxSize = Parameters.ValueOf<int?>(parameters, Context.Request, "threadPoolMaxSize", ParameterType.Query);
                var scheduledThreadPoolMaxSize = Parameters.ValueOf<int?>(parameters, Context.Request, "scheduledThreadPoolMaxSize", ParameterType.Query);
                var gracefulShutdownTimeout = Parameters.ValueOf<int?>(parameters, Context.Request, "gracefulShutdownTimeout", ParameterType.Query);
                var queues = Parameters.ValueOf<List<string>>(parameters, Context.Request, "queues", ParameterType.Query);
                var topics = Parameters.ValueOf<List<string>>(parameters, Context.Request, "topics", ParameterType.Query);
                var addressesMaxDeliveryAttempts = Parameters.ValueOf<int?>(parameters, Context.Request, "addressesMaxDeliveryAttempts", ParameterType.Query);
                var addressesExpiryDelay = Parameters.ValueOf<int?>(parameters, Context.Request, "addressesExpiryDelay", ParameterType.Query);
                var addressesAddressFullMessagePolicy = Parameters.ValueOf<string>(parameters, Context.Request, "addressesAddressFullMessagePolicy", ParameterType.Query);
                var addressesMaxSizeBytes = Parameters.ValueOf<int?>(parameters, Context.Request, "addressesMaxSizeBytes", ParameterType.Query);
                var addressesPageSizeBytes = Parameters.ValueOf<int?>(parameters, Context.Request, "addressesPageSizeBytes", ParameterType.Query);
                var addressesPageCacheMaxSize = Parameters.ValueOf<int?>(parameters, Context.Request, "addressesPageCacheMaxSize", ParameterType.Query);
                var clusterUser = Parameters.ValueOf<string>(parameters, Context.Request, "clusterUser", ParameterType.Query);
                var clusterPassword = Parameters.ValueOf<string>(parameters, Context.Request, "clusterPassword", ParameterType.Query);
                var clusterCallTimeout = Parameters.ValueOf<int?>(parameters, Context.Request, "clusterCallTimeout", ParameterType.Query);
                var clusterCallFailoverTimeout = Parameters.ValueOf<int?>(parameters, Context.Request, "clusterCallFailoverTimeout", ParameterType.Query);
                var clusterClientFailureCheckPeriod = Parameters.ValueOf<int?>(parameters, Context.Request, "clusterClientFailureCheckPeriod", ParameterType.Query);
                var clusterNotificationAttempts = Parameters.ValueOf<int?>(parameters, Context.Request, "clusterNotificationAttempts", ParameterType.Query);
                var clusterNotificationInterval = Parameters.ValueOf<int?>(parameters, Context.Request, "clusterNotificationInterval", ParameterType.Query);
                var idCacheSize = Parameters.ValueOf<int?>(parameters, Context.Request, "idCacheSize", ParameterType.Query);
                var clusterConfirmationWindowSize = Parameters.ValueOf<int?>(parameters, Context.Request, "clusterConfirmationWindowSize", ParameterType.Query);
                var clusterConnectionTtl = Parameters.ValueOf<int?>(parameters, Context.Request, "clusterConnectionTtl", ParameterType.Query);
                var clusterDuplicateDetection = Parameters.ValueOf<bool?>(parameters, Context.Request, "clusterDuplicateDetection", ParameterType.Query);
                var clusterInitialConnectAttempts = Parameters.ValueOf<int?>(parameters, Context.Request, "clusterInitialConnectAttempts", ParameterType.Query);
                var clusterMaxRetryInterval = Parameters.ValueOf<int?>(parameters, Context.Request, "clusterMaxRetryInterval", ParameterType.Query);
                var clusterMinLargeMessageSize = Parameters.ValueOf<int?>(parameters, Context.Request, "clusterMinLargeMessageSize", ParameterType.Query);
                var clusterProducerWindowSize = Parameters.ValueOf<int?>(parameters, Context.Request, "clusterProducerWindowSize", ParameterType.Query);
                var clusterReconnectAttempts = Parameters.ValueOf<int?>(parameters, Context.Request, "clusterReconnectAttempts", ParameterType.Query);
                var clusterRetryInterval = Parameters.ValueOf<int?>(parameters, Context.Request, "clusterRetryInterval", ParameterType.Query);
                var clusterRetryIntervalMultiplier = Parameters.ValueOf<decimal?>(parameters, Context.Request, "clusterRetryIntervalMultiplier", ParameterType.Query);
                return service.ComAdobeCqScreensMqActivemqImplArtemisJMSProvider(Context, post, apply, delete, action, location, propertylist, serviceRanking, globalSize, maxDiskUsage, persistenceEnabled, threadPoolMaxSize, scheduledThreadPoolMaxSize, gracefulShutdownTimeout, queues, topics, addressesMaxDeliveryAttempts, addressesExpiryDelay, addressesAddressFullMessagePolicy, addressesMaxSizeBytes, addressesPageSizeBytes, addressesPageCacheMaxSize, clusterUser, clusterPassword, clusterCallTimeout, clusterCallFailoverTimeout, clusterClientFailureCheckPeriod, clusterNotificationAttempts, clusterNotificationInterval, idCacheSize, clusterConfirmationWindowSize, clusterConnectionTtl, clusterDuplicateDetection, clusterInitialConnectAttempts, clusterMaxRetryInterval, clusterMinLargeMessageSize, clusterProducerWindowSize, clusterReconnectAttempts, clusterRetryInterval, clusterRetryIntervalMultiplier);
            };

            Post["/system/console/configMgr/com.adobe.cq.screens.offlinecontent.impl.BulkOfflineUpdateServiceImpl"] = parameters =>
            {
                var post = Parameters.ValueOf<bool?>(parameters, Context.Request, "post", ParameterType.Query);
                var apply = Parameters.ValueOf<bool?>(parameters, Context.Request, "apply", ParameterType.Query);
                var delete = Parameters.ValueOf<bool?>(parameters, Context.Request, "delete", ParameterType.Query);
                var action = Parameters.ValueOf<string>(parameters, Context.Request, "action", ParameterType.Query);
                var location = Parameters.ValueOf<string>(parameters, Context.Request, "location", ParameterType.Query);
                var propertylist = Parameters.ValueOf<List<string>>(parameters, Context.Request, "propertylist", ParameterType.Query);
                var comAdobeCqScreensOfflinecontentImplBulkOfflineUpdateServiceImplProjectPath = Parameters.ValueOf<List<string>>(parameters, Context.Request, "comAdobeCqScreensOfflinecontentImplBulkOfflineUpdateServiceImplProjectPath", ParameterType.Query);
                var comAdobeCqScreensOfflinecontentImplBulkOfflineUpdateServiceImplScheduleFrequency = Parameters.ValueOf<string>(parameters, Context.Request, "comAdobeCqScreensOfflinecontentImplBulkOfflineUpdateServiceImplScheduleFrequency", ParameterType.Query);
                return service.ComAdobeCqScreensOfflinecontentImplBulkOfflineUpdateServiceImpl(Context, post, apply, delete, action, location, propertylist, comAdobeCqScreensOfflinecontentImplBulkOfflineUpdateServiceImplProjectPath, comAdobeCqScreensOfflinecontentImplBulkOfflineUpdateServiceImplScheduleFrequency);
            };

            Post["/system/console/configMgr/com.adobe.cq.screens.offlinecontent.impl.OfflineContentServiceImpl"] = parameters =>
            {
                var post = Parameters.ValueOf<bool?>(parameters, Context.Request, "post", ParameterType.Query);
                var apply = Parameters.ValueOf<bool?>(parameters, Context.Request, "apply", ParameterType.Query);
                var delete = Parameters.ValueOf<bool?>(parameters, Context.Request, "delete", ParameterType.Query);
                var action = Parameters.ValueOf<string>(parameters, Context.Request, "action", ParameterType.Query);
                var location = Parameters.ValueOf<string>(parameters, Context.Request, "location", ParameterType.Query);
                var propertylist = Parameters.ValueOf<List<string>>(parameters, Context.Request, "propertylist", ParameterType.Query);
                var disableSmartSync = Parameters.ValueOf<bool?>(parameters, Context.Request, "disableSmartSync", ParameterType.Query);
                return service.ComAdobeCqScreensOfflinecontentImplOfflineContentServiceImpl(Context, post, apply, delete, action, location, propertylist, disableSmartSync);
            };

            Post["/system/console/configMgr/com.adobe.cq.screens.segmentation.impl.SegmentationFeatureFlag"] = parameters =>
            {
                var post = Parameters.ValueOf<bool?>(parameters, Context.Request, "post", ParameterType.Query);
                var apply = Parameters.ValueOf<bool?>(parameters, Context.Request, "apply", ParameterType.Query);
                var delete = Parameters.ValueOf<bool?>(parameters, Context.Request, "delete", ParameterType.Query);
                var action = Parameters.ValueOf<string>(parameters, Context.Request, "action", ParameterType.Query);
                var location = Parameters.ValueOf<string>(parameters, Context.Request, "location", ParameterType.Query);
                var propertylist = Parameters.ValueOf<List<string>>(parameters, Context.Request, "propertylist", ParameterType.Query);
                var enableDataTriggeredContent = Parameters.ValueOf<bool?>(parameters, Context.Request, "enableDataTriggeredContent", ParameterType.Query);
                return service.ComAdobeCqScreensSegmentationImplSegmentationFeatureFlag(Context, post, apply, delete, action, location, propertylist, enableDataTriggeredContent);
            };

            Post["/system/console/configMgr/com.adobe.cq.security.hc.bundles.impl.HtmlLibraryManagerConfigHealthCheck"] = parameters =>
            {
                var post = Parameters.ValueOf<bool?>(parameters, Context.Request, "post", ParameterType.Query);
                var apply = Parameters.ValueOf<bool?>(parameters, Context.Request, "apply", ParameterType.Query);
                var delete = Parameters.ValueOf<bool?>(parameters, Context.Request, "delete", ParameterType.Query);
                var action = Parameters.ValueOf<string>(parameters, Context.Request, "action", ParameterType.Query);
                var location = Parameters.ValueOf<string>(parameters, Context.Request, "location", ParameterType.Query);
                var propertylist = Parameters.ValueOf<List<string>>(parameters, Context.Request, "propertylist", ParameterType.Query);
                var hcTags = Parameters.ValueOf<List<string>>(parameters, Context.Request, "hcTags", ParameterType.Query);
                return service.ComAdobeCqSecurityHcBundlesImplHtmlLibraryManagerConfigHealthCh(Context, post, apply, delete, action, location, propertylist, hcTags);
            };

            Post["/system/console/configMgr/com.adobe.cq.security.hc.bundles.impl.WcmFilterHealthCheck"] = parameters =>
            {
                var post = Parameters.ValueOf<bool?>(parameters, Context.Request, "post", ParameterType.Query);
                var apply = Parameters.ValueOf<bool?>(parameters, Context.Request, "apply", ParameterType.Query);
                var delete = Parameters.ValueOf<bool?>(parameters, Context.Request, "delete", ParameterType.Query);
                var action = Parameters.ValueOf<string>(parameters, Context.Request, "action", ParameterType.Query);
                var location = Parameters.ValueOf<string>(parameters, Context.Request, "location", ParameterType.Query);
                var propertylist = Parameters.ValueOf<List<string>>(parameters, Context.Request, "propertylist", ParameterType.Query);
                var hcTags = Parameters.ValueOf<List<string>>(parameters, Context.Request, "hcTags", ParameterType.Query);
                return service.ComAdobeCqSecurityHcBundlesImplWcmFilterHealthCheck(Context, post, apply, delete, action, location, propertylist, hcTags);
            };

            Post["/system/console/configMgr/com.adobe.cq.security.hc.dispatcher.impl.DispatcherAccessHealthCheck"] = parameters =>
            {
                var post = Parameters.ValueOf<bool?>(parameters, Context.Request, "post", ParameterType.Query);
                var apply = Parameters.ValueOf<bool?>(parameters, Context.Request, "apply", ParameterType.Query);
                var delete = Parameters.ValueOf<bool?>(parameters, Context.Request, "delete", ParameterType.Query);
                var action = Parameters.ValueOf<string>(parameters, Context.Request, "action", ParameterType.Query);
                var location = Parameters.ValueOf<string>(parameters, Context.Request, "location", ParameterType.Query);
                var propertylist = Parameters.ValueOf<List<string>>(parameters, Context.Request, "propertylist", ParameterType.Query);
                var hcTags = Parameters.ValueOf<List<string>>(parameters, Context.Request, "hcTags", ParameterType.Query);
                var dispatcherAddress = Parameters.ValueOf<string>(parameters, Context.Request, "dispatcherAddress", ParameterType.Query);
                var dispatcherFilterAllowed = Parameters.ValueOf<List<string>>(parameters, Context.Request, "dispatcherFilterAllowed", ParameterType.Query);
                var dispatcherFilterBlocked = Parameters.ValueOf<List<string>>(parameters, Context.Request, "dispatcherFilterBlocked", ParameterType.Query);
                return service.ComAdobeCqSecurityHcDispatcherImplDispatcherAccessHealthCheck(Context, post, apply, delete, action, location, propertylist, hcTags, dispatcherAddress, dispatcherFilterAllowed, dispatcherFilterBlocked);
            };

            Post["/system/console/configMgr/com.adobe.cq.security.hc.packages.impl.ExampleContentHealthCheck"] = parameters =>
            {
                var post = Parameters.ValueOf<bool?>(parameters, Context.Request, "post", ParameterType.Query);
                var apply = Parameters.ValueOf<bool?>(parameters, Context.Request, "apply", ParameterType.Query);
                var delete = Parameters.ValueOf<bool?>(parameters, Context.Request, "delete", ParameterType.Query);
                var action = Parameters.ValueOf<string>(parameters, Context.Request, "action", ParameterType.Query);
                var location = Parameters.ValueOf<string>(parameters, Context.Request, "location", ParameterType.Query);
                var propertylist = Parameters.ValueOf<List<string>>(parameters, Context.Request, "propertylist", ParameterType.Query);
                var hcTags = Parameters.ValueOf<List<string>>(parameters, Context.Request, "hcTags", ParameterType.Query);
                return service.ComAdobeCqSecurityHcPackagesImplExampleContentHealthCheck(Context, post, apply, delete, action, location, propertylist, hcTags);
            };

            Post["/system/console/configMgr/com.adobe.cq.security.hc.webserver.impl.ClickjackingHealthCheck"] = parameters =>
            {
                var post = Parameters.ValueOf<bool?>(parameters, Context.Request, "post", ParameterType.Query);
                var apply = Parameters.ValueOf<bool?>(parameters, Context.Request, "apply", ParameterType.Query);
                var delete = Parameters.ValueOf<bool?>(parameters, Context.Request, "delete", ParameterType.Query);
                var action = Parameters.ValueOf<string>(parameters, Context.Request, "action", ParameterType.Query);
                var location = Parameters.ValueOf<string>(parameters, Context.Request, "location", ParameterType.Query);
                var propertylist = Parameters.ValueOf<List<string>>(parameters, Context.Request, "propertylist", ParameterType.Query);
                var hcTags = Parameters.ValueOf<List<string>>(parameters, Context.Request, "hcTags", ParameterType.Query);
                var webserverAddress = Parameters.ValueOf<string>(parameters, Context.Request, "webserverAddress", ParameterType.Query);
                return service.ComAdobeCqSecurityHcWebserverImplClickjackingHealthCheck(Context, post, apply, delete, action, location, propertylist, hcTags, webserverAddress);
            };

            Post["/system/console/configMgr/com.adobe.cq.social.accountverification.impl.AccountManagementConfigImpl"] = parameters =>
            {
                var post = Parameters.ValueOf<bool?>(parameters, Context.Request, "post", ParameterType.Query);
                var apply = Parameters.ValueOf<bool?>(parameters, Context.Request, "apply", ParameterType.Query);
                var delete = Parameters.ValueOf<bool?>(parameters, Context.Request, "delete", ParameterType.Query);
                var action = Parameters.ValueOf<string>(parameters, Context.Request, "action", ParameterType.Query);
                var location = Parameters.ValueOf<string>(parameters, Context.Request, "location", ParameterType.Query);
                var propertylist = Parameters.ValueOf<List<string>>(parameters, Context.Request, "propertylist", ParameterType.Query);
                var enable = Parameters.ValueOf<bool?>(parameters, Context.Request, "enable", ParameterType.Query);
                var ttl1 = Parameters.ValueOf<int?>(parameters, Context.Request, "ttl1", ParameterType.Query);
                var ttl2 = Parameters.ValueOf<int?>(parameters, Context.Request, "ttl2", ParameterType.Query);
                return service.ComAdobeCqSocialAccountverificationImplAccountManagementConfigIm(Context, post, apply, delete, action, location, propertylist, enable, ttl1, ttl2);
            };

            Post["/system/console/configMgr/com.adobe.cq.social.activitystreams.client.impl.SocialActivityComponentFactoryImpl"] = parameters =>
            {
                var post = Parameters.ValueOf<bool?>(parameters, Context.Request, "post", ParameterType.Query);
                var apply = Parameters.ValueOf<bool?>(parameters, Context.Request, "apply", ParameterType.Query);
                var delete = Parameters.ValueOf<bool?>(parameters, Context.Request, "delete", ParameterType.Query);
                var action = Parameters.ValueOf<string>(parameters, Context.Request, "action", ParameterType.Query);
                var location = Parameters.ValueOf<string>(parameters, Context.Request, "location", ParameterType.Query);
                var propertylist = Parameters.ValueOf<List<string>>(parameters, Context.Request, "propertylist", ParameterType.Query);
                var priority = Parameters.ValueOf<int?>(parameters, Context.Request, "priority", ParameterType.Query);
                return service.ComAdobeCqSocialActivitystreamsClientImplSocialActivityComponen(Context, post, apply, delete, action, location, propertylist, priority);
            };

            Post["/system/console/configMgr/com.adobe.cq.social.activitystreams.client.impl.SocialActivityStreamComponentFactory"] = parameters =>
            {
                var post = Parameters.ValueOf<bool?>(parameters, Context.Request, "post", ParameterType.Query);
                var apply = Parameters.ValueOf<bool?>(parameters, Context.Request, "apply", ParameterType.Query);
                var delete = Parameters.ValueOf<bool?>(parameters, Context.Request, "delete", ParameterType.Query);
                var action = Parameters.ValueOf<string>(parameters, Context.Request, "action", ParameterType.Query);
                var location = Parameters.ValueOf<string>(parameters, Context.Request, "location", ParameterType.Query);
                var propertylist = Parameters.ValueOf<List<string>>(parameters, Context.Request, "propertylist", ParameterType.Query);
                var priority = Parameters.ValueOf<int?>(parameters, Context.Request, "priority", ParameterType.Query);
                return service.ComAdobeCqSocialActivitystreamsClientImplSocialActivityStreamCo(Context, post, apply, delete, action, location, propertylist, priority);
            };

            Post["/system/console/configMgr/com.adobe.cq.social.activitystreams.listener.impl.EventListenerHandler"] = parameters =>
            {
                var post = Parameters.ValueOf<bool?>(parameters, Context.Request, "post", ParameterType.Query);
                var apply = Parameters.ValueOf<bool?>(parameters, Context.Request, "apply", ParameterType.Query);
                var delete = Parameters.ValueOf<bool?>(parameters, Context.Request, "delete", ParameterType.Query);
                var action = Parameters.ValueOf<string>(parameters, Context.Request, "action", ParameterType.Query);
                var location = Parameters.ValueOf<string>(parameters, Context.Request, "location", ParameterType.Query);
                var propertylist = Parameters.ValueOf<List<string>>(parameters, Context.Request, "propertylist", ParameterType.Query);
                var eventTopics = Parameters.ValueOf<string>(parameters, Context.Request, "eventTopics", ParameterType.Query);
                var eventFilter = Parameters.ValueOf<string>(parameters, Context.Request, "eventFilter", ParameterType.Query);
                return service.ComAdobeCqSocialActivitystreamsListenerImplEventListenerHandler(Context, post, apply, delete, action, location, propertylist, eventTopics, eventFilter);
            };

            Post["/system/console/configMgr/com.adobe.cq.social.activitystreams.listener.impl.ModerationEventExtension"] = parameters =>
            {
                var post = Parameters.ValueOf<bool?>(parameters, Context.Request, "post", ParameterType.Query);
                var apply = Parameters.ValueOf<bool?>(parameters, Context.Request, "apply", ParameterType.Query);
                var delete = Parameters.ValueOf<bool?>(parameters, Context.Request, "delete", ParameterType.Query);
                var action = Parameters.ValueOf<string>(parameters, Context.Request, "action", ParameterType.Query);
                var location = Parameters.ValueOf<string>(parameters, Context.Request, "location", ParameterType.Query);
                var propertylist = Parameters.ValueOf<List<string>>(parameters, Context.Request, "propertylist", ParameterType.Query);
                var accepted = Parameters.ValueOf<bool?>(parameters, Context.Request, "accepted", ParameterType.Query);
                var ranked = Parameters.ValueOf<int?>(parameters, Context.Request, "ranked", ParameterType.Query);
                return service.ComAdobeCqSocialActivitystreamsListenerImplModerationEventExten(Context, post, apply, delete, action, location, propertylist, accepted, ranked);
            };

            Post["/system/console/configMgr/com.adobe.cq.social.activitystreams.listener.impl.RatingEventActivitySuppressor"] = parameters =>
            {
                var post = Parameters.ValueOf<bool?>(parameters, Context.Request, "post", ParameterType.Query);
                var apply = Parameters.ValueOf<bool?>(parameters, Context.Request, "apply", ParameterType.Query);
                var delete = Parameters.ValueOf<bool?>(parameters, Context.Request, "delete", ParameterType.Query);
                var action = Parameters.ValueOf<string>(parameters, Context.Request, "action", ParameterType.Query);
                var location = Parameters.ValueOf<string>(parameters, Context.Request, "location", ParameterType.Query);
                var propertylist = Parameters.ValueOf<List<string>>(parameters, Context.Request, "propertylist", ParameterType.Query);
                var ranking = Parameters.ValueOf<int?>(parameters, Context.Request, "ranking", ParameterType.Query);
                var enable = Parameters.ValueOf<bool?>(parameters, Context.Request, "enable", ParameterType.Query);
                return service.ComAdobeCqSocialActivitystreamsListenerImplRatingEventActivityS(Context, post, apply, delete, action, location, propertylist, ranking, enable);
            };

            Post["/system/console/configMgr/com.adobe.cq.social.activitystreams.listener.impl.ResourceActivityStreamProviderFactory"] = parameters =>
            {
                var post = Parameters.ValueOf<bool?>(parameters, Context.Request, "post", ParameterType.Query);
                var apply = Parameters.ValueOf<bool?>(parameters, Context.Request, "apply", ParameterType.Query);
                var delete = Parameters.ValueOf<bool?>(parameters, Context.Request, "delete", ParameterType.Query);
                var action = Parameters.ValueOf<string>(parameters, Context.Request, "action", ParameterType.Query);
                var location = Parameters.ValueOf<string>(parameters, Context.Request, "location", ParameterType.Query);
                var propertylist = Parameters.ValueOf<List<string>>(parameters, Context.Request, "propertylist", ParameterType.Query);
                var streamPath = Parameters.ValueOf<string>(parameters, Context.Request, "streamPath", ParameterType.Query);
                var streamName = Parameters.ValueOf<string>(parameters, Context.Request, "streamName", ParameterType.Query);
                return service.ComAdobeCqSocialActivitystreamsListenerImplResourceActivityStre(Context, post, apply, delete, action, location, propertylist, streamPath, streamName);
            };

            Post["/system/console/configMgr/com.adobe.cq.social.calendar.client.endpoints.impl.CalendarOperationsImpl"] = parameters =>
            {
                var post = Parameters.ValueOf<bool?>(parameters, Context.Request, "post", ParameterType.Query);
                var apply = Parameters.ValueOf<bool?>(parameters, Context.Request, "apply", ParameterType.Query);
                var delete = Parameters.ValueOf<bool?>(parameters, Context.Request, "delete", ParameterType.Query);
                var action = Parameters.ValueOf<string>(parameters, Context.Request, "action", ParameterType.Query);
                var location = Parameters.ValueOf<string>(parameters, Context.Request, "location", ParameterType.Query);
                var propertylist = Parameters.ValueOf<List<string>>(parameters, Context.Request, "propertylist", ParameterType.Query);
                var maxRetry = Parameters.ValueOf<int?>(parameters, Context.Request, "maxRetry", ParameterType.Query);
                var fieldWhitelist = Parameters.ValueOf<List<string>>(parameters, Context.Request, "fieldWhitelist", ParameterType.Query);
                var attachmentTypeBlacklist = Parameters.ValueOf<List<string>>(parameters, Context.Request, "attachmentTypeBlacklist", ParameterType.Query);
                return service.ComAdobeCqSocialCalendarClientEndpointsImplCalendarOperationsI(Context, post, apply, delete, action, location, propertylist, maxRetry, fieldWhitelist, attachmentTypeBlacklist);
            };

            Post["/system/console/configMgr/com.adobe.cq.social.calendar.client.operationextensions.EventAttachment"] = parameters =>
            {
                var post = Parameters.ValueOf<bool?>(parameters, Context.Request, "post", ParameterType.Query);
                var apply = Parameters.ValueOf<bool?>(parameters, Context.Request, "apply", ParameterType.Query);
                var delete = Parameters.ValueOf<bool?>(parameters, Context.Request, "delete", ParameterType.Query);
                var action = Parameters.ValueOf<string>(parameters, Context.Request, "action", ParameterType.Query);
                var location = Parameters.ValueOf<string>(parameters, Context.Request, "location", ParameterType.Query);
                var propertylist = Parameters.ValueOf<List<string>>(parameters, Context.Request, "propertylist", ParameterType.Query);
                var attachmentTypeBlacklist = Parameters.ValueOf<string>(parameters, Context.Request, "attachmentTypeBlacklist", ParameterType.Query);
                var extensionOrder = Parameters.ValueOf<int?>(parameters, Context.Request, "extensionOrder", ParameterType.Query);
                return service.ComAdobeCqSocialCalendarClientOperationextensionsEventAttachmen(Context, post, apply, delete, action, location, propertylist, attachmentTypeBlacklist, extensionOrder);
            };

            Post["/system/console/configMgr/com.adobe.cq.social.calendar.servlets.TimeZoneServlet"] = parameters =>
            {
                var post = Parameters.ValueOf<bool?>(parameters, Context.Request, "post", ParameterType.Query);
                var apply = Parameters.ValueOf<bool?>(parameters, Context.Request, "apply", ParameterType.Query);
                var delete = Parameters.ValueOf<bool?>(parameters, Context.Request, "delete", ParameterType.Query);
                var action = Parameters.ValueOf<string>(parameters, Context.Request, "action", ParameterType.Query);
                var location = Parameters.ValueOf<string>(parameters, Context.Request, "location", ParameterType.Query);
                var propertylist = Parameters.ValueOf<List<string>>(parameters, Context.Request, "propertylist", ParameterType.Query);
                var timezonesExpirytime = Parameters.ValueOf<int?>(parameters, Context.Request, "timezonesExpirytime", ParameterType.Query);
                return service.ComAdobeCqSocialCalendarServletsTimeZoneServlet(Context, post, apply, delete, action, location, propertylist, timezonesExpirytime);
            };

            Post["/system/console/configMgr/com.adobe.cq.social.commons.comments.endpoints.impl.CommentDeleteEventActivitySuppressor"] = parameters =>
            {
                var post = Parameters.ValueOf<bool?>(parameters, Context.Request, "post", ParameterType.Query);
                var apply = Parameters.ValueOf<bool?>(parameters, Context.Request, "apply", ParameterType.Query);
                var delete = Parameters.ValueOf<bool?>(parameters, Context.Request, "delete", ParameterType.Query);
                var action = Parameters.ValueOf<string>(parameters, Context.Request, "action", ParameterType.Query);
                var location = Parameters.ValueOf<string>(parameters, Context.Request, "location", ParameterType.Query);
                var propertylist = Parameters.ValueOf<List<string>>(parameters, Context.Request, "propertylist", ParameterType.Query);
                var ranking = Parameters.ValueOf<int?>(parameters, Context.Request, "ranking", ParameterType.Query);
                return service.ComAdobeCqSocialCommonsCommentsEndpointsImplCommentDeleteEvent(Context, post, apply, delete, action, location, propertylist, ranking);
            };

            Post["/system/console/configMgr/com.adobe.cq.social.commons.comments.endpoints.impl.CommentOperationService"] = parameters =>
            {
                var post = Parameters.ValueOf<bool?>(parameters, Context.Request, "post", ParameterType.Query);
                var apply = Parameters.ValueOf<bool?>(parameters, Context.Request, "apply", ParameterType.Query);
                var delete = Parameters.ValueOf<bool?>(parameters, Context.Request, "delete", ParameterType.Query);
                var action = Parameters.ValueOf<string>(parameters, Context.Request, "action", ParameterType.Query);
                var location = Parameters.ValueOf<string>(parameters, Context.Request, "location", ParameterType.Query);
                var propertylist = Parameters.ValueOf<List<string>>(parameters, Context.Request, "propertylist", ParameterType.Query);
                var fieldWhitelist = Parameters.ValueOf<List<string>>(parameters, Context.Request, "fieldWhitelist", ParameterType.Query);
                var attachmentTypeBlacklist = Parameters.ValueOf<List<string>>(parameters, Context.Request, "attachmentTypeBlacklist", ParameterType.Query);
                return service.ComAdobeCqSocialCommonsCommentsEndpointsImplCommentOperationSe(Context, post, apply, delete, action, location, propertylist, fieldWhitelist, attachmentTypeBlacklist);
            };

            Post["/system/console/configMgr/com.adobe.cq.social.commons.comments.endpoints.impl.TranslationOperationService"] = parameters =>
            {
                var post = Parameters.ValueOf<bool?>(parameters, Context.Request, "post", ParameterType.Query);
                var apply = Parameters.ValueOf<bool?>(parameters, Context.Request, "apply", ParameterType.Query);
                var delete = Parameters.ValueOf<bool?>(parameters, Context.Request, "delete", ParameterType.Query);
                var action = Parameters.ValueOf<string>(parameters, Context.Request, "action", ParameterType.Query);
                var location = Parameters.ValueOf<string>(parameters, Context.Request, "location", ParameterType.Query);
                var propertylist = Parameters.ValueOf<List<string>>(parameters, Context.Request, "propertylist", ParameterType.Query);
                var fieldWhitelist = Parameters.ValueOf<List<string>>(parameters, Context.Request, "fieldWhitelist", ParameterType.Query);
                var attachmentTypeBlacklist = Parameters.ValueOf<List<string>>(parameters, Context.Request, "attachmentTypeBlacklist", ParameterType.Query);
                return service.ComAdobeCqSocialCommonsCommentsEndpointsImplTranslationOperati(Context, post, apply, delete, action, location, propertylist, fieldWhitelist, attachmentTypeBlacklist);
            };

            Post["/system/console/configMgr/com.adobe.cq.social.commons.comments.listing.impl.SearchCommentSocialComponentListProvider"] = parameters =>
            {
                var post = Parameters.ValueOf<bool?>(parameters, Context.Request, "post", ParameterType.Query);
                var apply = Parameters.ValueOf<bool?>(parameters, Context.Request, "apply", ParameterType.Query);
                var delete = Parameters.ValueOf<bool?>(parameters, Context.Request, "delete", ParameterType.Query);
                var action = Parameters.ValueOf<string>(parameters, Context.Request, "action", ParameterType.Query);
                var location = Parameters.ValueOf<string>(parameters, Context.Request, "location", ParameterType.Query);
                var propertylist = Parameters.ValueOf<List<string>>(parameters, Context.Request, "propertylist", ParameterType.Query);
                var numUserLimit = Parameters.ValueOf<int?>(parameters, Context.Request, "numUserLimit", ParameterType.Query);
                return service.ComAdobeCqSocialCommonsCommentsListingImplSearchCommentSocialC(Context, post, apply, delete, action, location, propertylist, numUserLimit);
            };

            Post["/system/console/configMgr/com.adobe.cq.social.commons.comments.scheduler.impl.SearchScheduledPosts"] = parameters =>
            {
                var post = Parameters.ValueOf<bool?>(parameters, Context.Request, "post", ParameterType.Query);
                var apply = Parameters.ValueOf<bool?>(parameters, Context.Request, "apply", ParameterType.Query);
                var delete = Parameters.ValueOf<bool?>(parameters, Context.Request, "delete", ParameterType.Query);
                var action = Parameters.ValueOf<string>(parameters, Context.Request, "action", ParameterType.Query);
                var location = Parameters.ValueOf<string>(parameters, Context.Request, "location", ParameterType.Query);
                var propertylist = Parameters.ValueOf<List<string>>(parameters, Context.Request, "propertylist", ParameterType.Query);
                var enableScheduledPostsSearch = Parameters.ValueOf<bool?>(parameters, Context.Request, "enableScheduledPostsSearch", ParameterType.Query);
                var numberOfMinutes = Parameters.ValueOf<int?>(parameters, Context.Request, "numberOfMinutes", ParameterType.Query);
                var maxSearchLimit = Parameters.ValueOf<int?>(parameters, Context.Request, "maxSearchLimit", ParameterType.Query);
                return service.ComAdobeCqSocialCommonsCommentsSchedulerImplSearchScheduledPos(Context, post, apply, delete, action, location, propertylist, enableScheduledPostsSearch, numberOfMinutes, maxSearchLimit);
            };

            Post["/system/console/configMgr/com.adobe.cq.social.commons.cors.CORSAuthenticationFilter"] = parameters =>
            {
                var post = Parameters.ValueOf<bool?>(parameters, Context.Request, "post", ParameterType.Query);
                var apply = Parameters.ValueOf<bool?>(parameters, Context.Request, "apply", ParameterType.Query);
                var delete = Parameters.ValueOf<bool?>(parameters, Context.Request, "delete", ParameterType.Query);
                var action = Parameters.ValueOf<string>(parameters, Context.Request, "action", ParameterType.Query);
                var location = Parameters.ValueOf<string>(parameters, Context.Request, "location", ParameterType.Query);
                var propertylist = Parameters.ValueOf<List<string>>(parameters, Context.Request, "propertylist", ParameterType.Query);
                var corsEnabling = Parameters.ValueOf<bool?>(parameters, Context.Request, "corsEnabling", ParameterType.Query);
                return service.ComAdobeCqSocialCommonsCorsCORSAuthenticationFilter(Context, post, apply, delete, action, location, propertylist, corsEnabling);
            };

            Post["/system/console/configMgr/com.adobe.cq.social.commons.emailreply.impl.AndroidEmailClientProvider"] = parameters =>
            {
                var post = Parameters.ValueOf<bool?>(parameters, Context.Request, "post", ParameterType.Query);
                var apply = Parameters.ValueOf<bool?>(parameters, Context.Request, "apply", ParameterType.Query);
                var delete = Parameters.ValueOf<bool?>(parameters, Context.Request, "delete", ParameterType.Query);
                var action = Parameters.ValueOf<string>(parameters, Context.Request, "action", ParameterType.Query);
                var location = Parameters.ValueOf<string>(parameters, Context.Request, "location", ParameterType.Query);
                var propertylist = Parameters.ValueOf<List<string>>(parameters, Context.Request, "propertylist", ParameterType.Query);
                var priorityOrder = Parameters.ValueOf<int?>(parameters, Context.Request, "priorityOrder", ParameterType.Query);
                var replyEmailPatterns = Parameters.ValueOf<List<string>>(parameters, Context.Request, "replyEmailPatterns", ParameterType.Query);
                return service.ComAdobeCqSocialCommonsEmailreplyImplAndroidEmailClientProvider(Context, post, apply, delete, action, location, propertylist, priorityOrder, replyEmailPatterns);
            };

            Post["/system/console/configMgr/com.adobe.cq.social.commons.emailreply.impl.CommentEmailBuilderImpl"] = parameters =>
            {
                var post = Parameters.ValueOf<bool?>(parameters, Context.Request, "post", ParameterType.Query);
                var apply = Parameters.ValueOf<bool?>(parameters, Context.Request, "apply", ParameterType.Query);
                var delete = Parameters.ValueOf<bool?>(parameters, Context.Request, "delete", ParameterType.Query);
                var action = Parameters.ValueOf<string>(parameters, Context.Request, "action", ParameterType.Query);
                var location = Parameters.ValueOf<string>(parameters, Context.Request, "location", ParameterType.Query);
                var propertylist = Parameters.ValueOf<List<string>>(parameters, Context.Request, "propertylist", ParameterType.Query);
                var contextPath = Parameters.ValueOf<string>(parameters, Context.Request, "contextPath", ParameterType.Query);
                return service.ComAdobeCqSocialCommonsEmailreplyImplCommentEmailBuilderImpl(Context, post, apply, delete, action, location, propertylist, contextPath);
            };

            Post["/system/console/configMgr/com.adobe.cq.social.commons.emailreply.impl.CommentEmailEventListener"] = parameters =>
            {
                var post = Parameters.ValueOf<bool?>(parameters, Context.Request, "post", ParameterType.Query);
                var apply = Parameters.ValueOf<bool?>(parameters, Context.Request, "apply", ParameterType.Query);
                var delete = Parameters.ValueOf<bool?>(parameters, Context.Request, "delete", ParameterType.Query);
                var action = Parameters.ValueOf<string>(parameters, Context.Request, "action", ParameterType.Query);
                var location = Parameters.ValueOf<string>(parameters, Context.Request, "location", ParameterType.Query);
                var propertylist = Parameters.ValueOf<List<string>>(parameters, Context.Request, "propertylist", ParameterType.Query);
                var eventTopics = Parameters.ValueOf<string>(parameters, Context.Request, "eventTopics", ParameterType.Query);
                return service.ComAdobeCqSocialCommonsEmailreplyImplCommentEmailEventListener(Context, post, apply, delete, action, location, propertylist, eventTopics);
            };

            Post["/system/console/configMgr/com.adobe.cq.social.commons.emailreply.impl.CustomEmailClientProvider"] = parameters =>
            {
                var post = Parameters.ValueOf<bool?>(parameters, Context.Request, "post", ParameterType.Query);
                var apply = Parameters.ValueOf<bool?>(parameters, Context.Request, "apply", ParameterType.Query);
                var delete = Parameters.ValueOf<bool?>(parameters, Context.Request, "delete", ParameterType.Query);
                var action = Parameters.ValueOf<string>(parameters, Context.Request, "action", ParameterType.Query);
                var location = Parameters.ValueOf<string>(parameters, Context.Request, "location", ParameterType.Query);
                var propertylist = Parameters.ValueOf<List<string>>(parameters, Context.Request, "propertylist", ParameterType.Query);
                var priorityOrder = Parameters.ValueOf<int?>(parameters, Context.Request, "priorityOrder", ParameterType.Query);
                var replyEmailPatterns = Parameters.ValueOf<List<string>>(parameters, Context.Request, "replyEmailPatterns", ParameterType.Query);
                return service.ComAdobeCqSocialCommonsEmailreplyImplCustomEmailClientProvider(Context, post, apply, delete, action, location, propertylist, priorityOrder, replyEmailPatterns);
            };

            Post["/system/console/configMgr/com.adobe.cq.social.commons.emailreply.impl.EmailQuotedTextPatternsImpl"] = parameters =>
            {
                var post = Parameters.ValueOf<bool?>(parameters, Context.Request, "post", ParameterType.Query);
                var apply = Parameters.ValueOf<bool?>(parameters, Context.Request, "apply", ParameterType.Query);
                var delete = Parameters.ValueOf<bool?>(parameters, Context.Request, "delete", ParameterType.Query);
                var action = Parameters.ValueOf<string>(parameters, Context.Request, "action", ParameterType.Query);
                var location = Parameters.ValueOf<string>(parameters, Context.Request, "location", ParameterType.Query);
                var propertylist = Parameters.ValueOf<List<string>>(parameters, Context.Request, "propertylist", ParameterType.Query);
                var patternTime = Parameters.ValueOf<string>(parameters, Context.Request, "patternTime", ParameterType.Query);
                var patternNewline = Parameters.ValueOf<string>(parameters, Context.Request, "patternNewline", ParameterType.Query);
                var patternDayOfMonth = Parameters.ValueOf<string>(parameters, Context.Request, "patternDayOfMonth", ParameterType.Query);
                var patternMonth = Parameters.ValueOf<string>(parameters, Context.Request, "patternMonth", ParameterType.Query);
                var patternYear = Parameters.ValueOf<string>(parameters, Context.Request, "patternYear", ParameterType.Query);
                var patternDate = Parameters.ValueOf<string>(parameters, Context.Request, "patternDate", ParameterType.Query);
                var patternDateTime = Parameters.ValueOf<string>(parameters, Context.Request, "patternDateTime", ParameterType.Query);
                var patternEmail = Parameters.ValueOf<string>(parameters, Context.Request, "patternEmail", ParameterType.Query);
                return service.ComAdobeCqSocialCommonsEmailreplyImplEmailQuotedTextPatternsImp(Context, post, apply, delete, action, location, propertylist, patternTime, patternNewline, patternDayOfMonth, patternMonth, patternYear, patternDate, patternDateTime, patternEmail);
            };

            Post["/system/console/configMgr/com.adobe.cq.social.commons.emailreply.impl.EmailReplyConfigurationImpl"] = parameters =>
            {
                var post = Parameters.ValueOf<bool?>(parameters, Context.Request, "post", ParameterType.Query);
                var apply = Parameters.ValueOf<bool?>(parameters, Context.Request, "apply", ParameterType.Query);
                var delete = Parameters.ValueOf<bool?>(parameters, Context.Request, "delete", ParameterType.Query);
                var action = Parameters.ValueOf<string>(parameters, Context.Request, "action", ParameterType.Query);
                var location = Parameters.ValueOf<string>(parameters, Context.Request, "location", ParameterType.Query);
                var propertylist = Parameters.ValueOf<List<string>>(parameters, Context.Request, "propertylist", ParameterType.Query);
                var emailName = Parameters.ValueOf<string>(parameters, Context.Request, "emailName", ParameterType.Query);
                var emailCreatePostFromReply = Parameters.ValueOf<bool?>(parameters, Context.Request, "emailCreatePostFromReply", ParameterType.Query);
                var emailAddCommentIdTo = Parameters.ValueOf<string>(parameters, Context.Request, "emailAddCommentIdTo", ParameterType.Query);
                var emailSubjectMaximumLength = Parameters.ValueOf<int?>(parameters, Context.Request, "emailSubjectMaximumLength", ParameterType.Query);
                var emailReplyToAddress = Parameters.ValueOf<string>(parameters, Context.Request, "emailReplyToAddress", ParameterType.Query);
                var emailReplyToDelimiter = Parameters.ValueOf<string>(parameters, Context.Request, "emailReplyToDelimiter", ParameterType.Query);
                var emailTrackerIdPrefixInSubject = Parameters.ValueOf<string>(parameters, Context.Request, "emailTrackerIdPrefixInSubject", ParameterType.Query);
                var emailTrackerIdPrefixInBody = Parameters.ValueOf<string>(parameters, Context.Request, "emailTrackerIdPrefixInBody", ParameterType.Query);
                var emailAsHTML = Parameters.ValueOf<bool?>(parameters, Context.Request, "emailAsHTML", ParameterType.Query);
                var emailDefaultUserName = Parameters.ValueOf<string>(parameters, Context.Request, "emailDefaultUserName", ParameterType.Query);
                var emailTemplatesRootPath = Parameters.ValueOf<string>(parameters, Context.Request, "emailTemplatesRootPath", ParameterType.Query);
                return service.ComAdobeCqSocialCommonsEmailreplyImplEmailReplyConfigurationImp(Context, post, apply, delete, action, location, propertylist, emailName, emailCreatePostFromReply, emailAddCommentIdTo, emailSubjectMaximumLength, emailReplyToAddress, emailReplyToDelimiter, emailTrackerIdPrefixInSubject, emailTrackerIdPrefixInBody, emailAsHTML, emailDefaultUserName, emailTemplatesRootPath);
            };

            Post["/system/console/configMgr/com.adobe.cq.social.commons.emailreply.impl.EmailReplyImporter"] = parameters =>
            {
                var post = Parameters.ValueOf<bool?>(parameters, Context.Request, "post", ParameterType.Query);
                var apply = Parameters.ValueOf<bool?>(parameters, Context.Request, "apply", ParameterType.Query);
                var delete = Parameters.ValueOf<bool?>(parameters, Context.Request, "delete", ParameterType.Query);
                var action = Parameters.ValueOf<string>(parameters, Context.Request, "action", ParameterType.Query);
                var location = Parameters.ValueOf<string>(parameters, Context.Request, "location", ParameterType.Query);
                var propertylist = Parameters.ValueOf<List<string>>(parameters, Context.Request, "propertylist", ParameterType.Query);
                var connectProtocol = Parameters.ValueOf<string>(parameters, Context.Request, "connectProtocol", ParameterType.Query);
                return service.ComAdobeCqSocialCommonsEmailreplyImplEmailReplyImporter(Context, post, apply, delete, action, location, propertylist, connectProtocol);
            };

            Post["/system/console/configMgr/com.adobe.cq.social.commons.emailreply.impl.GmailEmailClientProvider"] = parameters =>
            {
                var post = Parameters.ValueOf<bool?>(parameters, Context.Request, "post", ParameterType.Query);
                var apply = Parameters.ValueOf<bool?>(parameters, Context.Request, "apply", ParameterType.Query);
                var delete = Parameters.ValueOf<bool?>(parameters, Context.Request, "delete", ParameterType.Query);
                var action = Parameters.ValueOf<string>(parameters, Context.Request, "action", ParameterType.Query);
                var location = Parameters.ValueOf<string>(parameters, Context.Request, "location", ParameterType.Query);
                var propertylist = Parameters.ValueOf<List<string>>(parameters, Context.Request, "propertylist", ParameterType.Query);
                var priorityOrder = Parameters.ValueOf<int?>(parameters, Context.Request, "priorityOrder", ParameterType.Query);
                var replyEmailPatterns = Parameters.ValueOf<List<string>>(parameters, Context.Request, "replyEmailPatterns", ParameterType.Query);
                return service.ComAdobeCqSocialCommonsEmailreplyImplGmailEmailClientProvider(Context, post, apply, delete, action, location, propertylist, priorityOrder, replyEmailPatterns);
            };

            Post["/system/console/configMgr/com.adobe.cq.social.commons.emailreply.impl.IOSEmailClientProvider"] = parameters =>
            {
                var post = Parameters.ValueOf<bool?>(parameters, Context.Request, "post", ParameterType.Query);
                var apply = Parameters.ValueOf<bool?>(parameters, Context.Request, "apply", ParameterType.Query);
                var delete = Parameters.ValueOf<bool?>(parameters, Context.Request, "delete", ParameterType.Query);
                var action = Parameters.ValueOf<string>(parameters, Context.Request, "action", ParameterType.Query);
                var location = Parameters.ValueOf<string>(parameters, Context.Request, "location", ParameterType.Query);
                var propertylist = Parameters.ValueOf<List<string>>(parameters, Context.Request, "propertylist", ParameterType.Query);
                var priorityOrder = Parameters.ValueOf<int?>(parameters, Context.Request, "priorityOrder", ParameterType.Query);
                var replyEmailPatterns = Parameters.ValueOf<List<string>>(parameters, Context.Request, "replyEmailPatterns", ParameterType.Query);
                return service.ComAdobeCqSocialCommonsEmailreplyImplIOSEmailClientProvider(Context, post, apply, delete, action, location, propertylist, priorityOrder, replyEmailPatterns);
            };

            Post["/system/console/configMgr/com.adobe.cq.social.commons.emailreply.impl.MacmailEmailClientProvider"] = parameters =>
            {
                var post = Parameters.ValueOf<bool?>(parameters, Context.Request, "post", ParameterType.Query);
                var apply = Parameters.ValueOf<bool?>(parameters, Context.Request, "apply", ParameterType.Query);
                var delete = Parameters.ValueOf<bool?>(parameters, Context.Request, "delete", ParameterType.Query);
                var action = Parameters.ValueOf<string>(parameters, Context.Request, "action", ParameterType.Query);
                var location = Parameters.ValueOf<string>(parameters, Context.Request, "location", ParameterType.Query);
                var propertylist = Parameters.ValueOf<List<string>>(parameters, Context.Request, "propertylist", ParameterType.Query);
                var priorityOrder = Parameters.ValueOf<int?>(parameters, Context.Request, "priorityOrder", ParameterType.Query);
                var replyEmailPatterns = Parameters.ValueOf<List<string>>(parameters, Context.Request, "replyEmailPatterns", ParameterType.Query);
                return service.ComAdobeCqSocialCommonsEmailreplyImplMacmailEmailClientProvider(Context, post, apply, delete, action, location, propertylist, priorityOrder, replyEmailPatterns);
            };

            Post["/system/console/configMgr/com.adobe.cq.social.commons.emailreply.impl.OutLookEmailClientProvider"] = parameters =>
            {
                var post = Parameters.ValueOf<bool?>(parameters, Context.Request, "post", ParameterType.Query);
                var apply = Parameters.ValueOf<bool?>(parameters, Context.Request, "apply", ParameterType.Query);
                var delete = Parameters.ValueOf<bool?>(parameters, Context.Request, "delete", ParameterType.Query);
                var action = Parameters.ValueOf<string>(parameters, Context.Request, "action", ParameterType.Query);
                var location = Parameters.ValueOf<string>(parameters, Context.Request, "location", ParameterType.Query);
                var propertylist = Parameters.ValueOf<List<string>>(parameters, Context.Request, "propertylist", ParameterType.Query);
                var priorityOrder = Parameters.ValueOf<int?>(parameters, Context.Request, "priorityOrder", ParameterType.Query);
                var replyEmailPatterns = Parameters.ValueOf<List<string>>(parameters, Context.Request, "replyEmailPatterns", ParameterType.Query);
                return service.ComAdobeCqSocialCommonsEmailreplyImplOutLookEmailClientProvider(Context, post, apply, delete, action, location, propertylist, priorityOrder, replyEmailPatterns);
            };

            Post["/system/console/configMgr/com.adobe.cq.social.commons.emailreply.impl.UnknownEmailClientProvider"] = parameters =>
            {
                var post = Parameters.ValueOf<bool?>(parameters, Context.Request, "post", ParameterType.Query);
                var apply = Parameters.ValueOf<bool?>(parameters, Context.Request, "apply", ParameterType.Query);
                var delete = Parameters.ValueOf<bool?>(parameters, Context.Request, "delete", ParameterType.Query);
                var action = Parameters.ValueOf<string>(parameters, Context.Request, "action", ParameterType.Query);
                var location = Parameters.ValueOf<string>(parameters, Context.Request, "location", ParameterType.Query);
                var propertylist = Parameters.ValueOf<List<string>>(parameters, Context.Request, "propertylist", ParameterType.Query);
                var replyEmailPatterns = Parameters.ValueOf<List<string>>(parameters, Context.Request, "replyEmailPatterns", ParameterType.Query);
                var priorityOrder = Parameters.ValueOf<int?>(parameters, Context.Request, "priorityOrder", ParameterType.Query);
                return service.ComAdobeCqSocialCommonsEmailreplyImplUnknownEmailClientProvider(Context, post, apply, delete, action, location, propertylist, replyEmailPatterns, priorityOrder);
            };

            Post["/system/console/configMgr/com.adobe.cq.social.commons.emailreply.impl.YahooEmailClientProvider"] = parameters =>
            {
                var post = Parameters.ValueOf<bool?>(parameters, Context.Request, "post", ParameterType.Query);
                var apply = Parameters.ValueOf<bool?>(parameters, Context.Request, "apply", ParameterType.Query);
                var delete = Parameters.ValueOf<bool?>(parameters, Context.Request, "delete", ParameterType.Query);
                var action = Parameters.ValueOf<string>(parameters, Context.Request, "action", ParameterType.Query);
                var location = Parameters.ValueOf<string>(parameters, Context.Request, "location", ParameterType.Query);
                var propertylist = Parameters.ValueOf<List<string>>(parameters, Context.Request, "propertylist", ParameterType.Query);
                var priorityOrder = Parameters.ValueOf<int?>(parameters, Context.Request, "priorityOrder", ParameterType.Query);
                var replyEmailPatterns = Parameters.ValueOf<List<string>>(parameters, Context.Request, "replyEmailPatterns", ParameterType.Query);
                return service.ComAdobeCqSocialCommonsEmailreplyImplYahooEmailClientProvider(Context, post, apply, delete, action, location, propertylist, priorityOrder, replyEmailPatterns);
            };

            Post["/system/console/configMgr/com.adobe.cq.social.commons.maintainance.impl.DeleteTempUGCImageUploads"] = parameters =>
            {
                var post = Parameters.ValueOf<bool?>(parameters, Context.Request, "post", ParameterType.Query);
                var apply = Parameters.ValueOf<bool?>(parameters, Context.Request, "apply", ParameterType.Query);
                var delete = Parameters.ValueOf<bool?>(parameters, Context.Request, "delete", ParameterType.Query);
                var action = Parameters.ValueOf<string>(parameters, Context.Request, "action", ParameterType.Query);
                var location = Parameters.ValueOf<string>(parameters, Context.Request, "location", ParameterType.Query);
                var propertylist = Parameters.ValueOf<List<string>>(parameters, Context.Request, "propertylist", ParameterType.Query);
                var numberOfDays = Parameters.ValueOf<int?>(parameters, Context.Request, "numberOfDays", ParameterType.Query);
                var ageOfFile = Parameters.ValueOf<int?>(parameters, Context.Request, "ageOfFile", ParameterType.Query);
                return service.ComAdobeCqSocialCommonsMaintainanceImplDeleteTempUGCImageUpload(Context, post, apply, delete, action, location, propertylist, numberOfDays, ageOfFile);
            };

            Post["/system/console/configMgr/com.adobe.cq.social.commons.ugclimiter.impl.UGCLimiterServiceImpl"] = parameters =>
            {
                var post = Parameters.ValueOf<bool?>(parameters, Context.Request, "post", ParameterType.Query);
                var apply = Parameters.ValueOf<bool?>(parameters, Context.Request, "apply", ParameterType.Query);
                var delete = Parameters.ValueOf<bool?>(parameters, Context.Request, "delete", ParameterType.Query);
                var action = Parameters.ValueOf<string>(parameters, Context.Request, "action", ParameterType.Query);
                var location = Parameters.ValueOf<string>(parameters, Context.Request, "location", ParameterType.Query);
                var propertylist = Parameters.ValueOf<List<string>>(parameters, Context.Request, "propertylist", ParameterType.Query);
                var eventTopics = Parameters.ValueOf<string>(parameters, Context.Request, "eventTopics", ParameterType.Query);
                var eventFilter = Parameters.ValueOf<string>(parameters, Context.Request, "eventFilter", ParameterType.Query);
                var verbs = Parameters.ValueOf<List<string>>(parameters, Context.Request, "verbs", ParameterType.Query);
                return service.ComAdobeCqSocialCommonsUgclimiterImplUGCLimiterServiceImpl(Context, post, apply, delete, action, location, propertylist, eventTopics, eventFilter, verbs);
            };

            Post["/system/console/configMgr/com.adobe.cq.social.commons.ugclimitsconfig.impl.CommunityUserUGCLimitsConfigImpl"] = parameters =>
            {
                var post = Parameters.ValueOf<bool?>(parameters, Context.Request, "post", ParameterType.Query);
                var apply = Parameters.ValueOf<bool?>(parameters, Context.Request, "apply", ParameterType.Query);
                var delete = Parameters.ValueOf<bool?>(parameters, Context.Request, "delete", ParameterType.Query);
                var action = Parameters.ValueOf<string>(parameters, Context.Request, "action", ParameterType.Query);
                var location = Parameters.ValueOf<string>(parameters, Context.Request, "location", ParameterType.Query);
                var propertylist = Parameters.ValueOf<List<string>>(parameters, Context.Request, "propertylist", ParameterType.Query);
                var enable = Parameters.ValueOf<bool?>(parameters, Context.Request, "enable", ParameterType.Query);
                var uGCLimit = Parameters.ValueOf<int?>(parameters, Context.Request, "uGCLimit", ParameterType.Query);
                var ugcLimitDuration = Parameters.ValueOf<int?>(parameters, Context.Request, "ugcLimitDuration", ParameterType.Query);
                var domains = Parameters.ValueOf<List<string>>(parameters, Context.Request, "domains", ParameterType.Query);
                var toList = Parameters.ValueOf<List<string>>(parameters, Context.Request, "toList", ParameterType.Query);
                return service.ComAdobeCqSocialCommonsUgclimitsconfigImplCommunityUserUGCLimit(Context, post, apply, delete, action, location, propertylist, enable, uGCLimit, ugcLimitDuration, domains, toList);
            };

            Post["/system/console/configMgr/com.adobe.cq.social.connect.oauth.impl.FacebookProviderImpl"] = parameters =>
            {
                var post = Parameters.ValueOf<bool?>(parameters, Context.Request, "post", ParameterType.Query);
                var apply = Parameters.ValueOf<bool?>(parameters, Context.Request, "apply", ParameterType.Query);
                var delete = Parameters.ValueOf<bool?>(parameters, Context.Request, "delete", ParameterType.Query);
                var action = Parameters.ValueOf<string>(parameters, Context.Request, "action", ParameterType.Query);
                var location = Parameters.ValueOf<string>(parameters, Context.Request, "location", ParameterType.Query);
                var propertylist = Parameters.ValueOf<List<string>>(parameters, Context.Request, "propertylist", ParameterType.Query);
                var oauthProviderId = Parameters.ValueOf<string>(parameters, Context.Request, "oauthProviderId", ParameterType.Query);
                var oauthCloudConfigRoot = Parameters.ValueOf<string>(parameters, Context.Request, "oauthCloudConfigRoot", ParameterType.Query);
                var providerConfigRoot = Parameters.ValueOf<string>(parameters, Context.Request, "providerConfigRoot", ParameterType.Query);
                var providerConfigCreateTagsEnabled = Parameters.ValueOf<bool?>(parameters, Context.Request, "providerConfigCreateTagsEnabled", ParameterType.Query);
                var providerConfigUserFolder = Parameters.ValueOf<string>(parameters, Context.Request, "providerConfigUserFolder", ParameterType.Query);
                var providerConfigFacebookFetchFields = Parameters.ValueOf<bool?>(parameters, Context.Request, "providerConfigFacebookFetchFields", ParameterType.Query);
                var providerConfigFacebookFields = Parameters.ValueOf<List<string>>(parameters, Context.Request, "providerConfigFacebookFields", ParameterType.Query);
                var providerConfigRefreshUserdataEnabled = Parameters.ValueOf<bool?>(parameters, Context.Request, "providerConfigRefreshUserdataEnabled", ParameterType.Query);
                return service.ComAdobeCqSocialConnectOauthImplFacebookProviderImpl(Context, post, apply, delete, action, location, propertylist, oauthProviderId, oauthCloudConfigRoot, providerConfigRoot, providerConfigCreateTagsEnabled, providerConfigUserFolder, providerConfigFacebookFetchFields, providerConfigFacebookFields, providerConfigRefreshUserdataEnabled);
            };

            Post["/system/console/configMgr/com.adobe.cq.social.connect.oauth.impl.SocialOAuthAuthenticationHandler"] = parameters =>
            {
                var post = Parameters.ValueOf<bool?>(parameters, Context.Request, "post", ParameterType.Query);
                var apply = Parameters.ValueOf<bool?>(parameters, Context.Request, "apply", ParameterType.Query);
                var delete = Parameters.ValueOf<bool?>(parameters, Context.Request, "delete", ParameterType.Query);
                var action = Parameters.ValueOf<string>(parameters, Context.Request, "action", ParameterType.Query);
                var location = Parameters.ValueOf<string>(parameters, Context.Request, "location", ParameterType.Query);
                var propertylist = Parameters.ValueOf<List<string>>(parameters, Context.Request, "propertylist", ParameterType.Query);
                var path = Parameters.ValueOf<List<string>>(parameters, Context.Request, "path", ParameterType.Query);
                var serviceRanking = Parameters.ValueOf<int?>(parameters, Context.Request, "serviceRanking", ParameterType.Query);
                return service.ComAdobeCqSocialConnectOauthImplSocialOAuthAuthenticationHandle(Context, post, apply, delete, action, location, propertylist, path, serviceRanking);
            };

            Post["/system/console/configMgr/com.adobe.cq.social.connect.oauth.impl.SocialOAuthUserProfileMapper"] = parameters =>
            {
                var post = Parameters.ValueOf<bool?>(parameters, Context.Request, "post", ParameterType.Query);
                var apply = Parameters.ValueOf<bool?>(parameters, Context.Request, "apply", ParameterType.Query);
                var delete = Parameters.ValueOf<bool?>(parameters, Context.Request, "delete", ParameterType.Query);
                var action = Parameters.ValueOf<string>(parameters, Context.Request, "action", ParameterType.Query);
                var location = Parameters.ValueOf<string>(parameters, Context.Request, "location", ParameterType.Query);
                var propertylist = Parameters.ValueOf<List<string>>(parameters, Context.Request, "propertylist", ParameterType.Query);
                var facebook = Parameters.ValueOf<List<string>>(parameters, Context.Request, "facebook", ParameterType.Query);
                var twitter = Parameters.ValueOf<List<string>>(parameters, Context.Request, "twitter", ParameterType.Query);
                var providerConfigUserFolder = Parameters.ValueOf<string>(parameters, Context.Request, "providerConfigUserFolder", ParameterType.Query);
                return service.ComAdobeCqSocialConnectOauthImplSocialOAuthUserProfileMapper(Context, post, apply, delete, action, location, propertylist, facebook, twitter, providerConfigUserFolder);
            };

            Post["/system/console/configMgr/com.adobe.cq.social.connect.oauth.impl.TwitterProviderImpl"] = parameters =>
            {
                var post = Parameters.ValueOf<bool?>(parameters, Context.Request, "post", ParameterType.Query);
                var apply = Parameters.ValueOf<bool?>(parameters, Context.Request, "apply", ParameterType.Query);
                var delete = Parameters.ValueOf<bool?>(parameters, Context.Request, "delete", ParameterType.Query);
                var action = Parameters.ValueOf<string>(parameters, Context.Request, "action", ParameterType.Query);
                var location = Parameters.ValueOf<string>(parameters, Context.Request, "location", ParameterType.Query);
                var propertylist = Parameters.ValueOf<List<string>>(parameters, Context.Request, "propertylist", ParameterType.Query);
                var oauthProviderId = Parameters.ValueOf<string>(parameters, Context.Request, "oauthProviderId", ParameterType.Query);
                var oauthCloudConfigRoot = Parameters.ValueOf<string>(parameters, Context.Request, "oauthCloudConfigRoot", ParameterType.Query);
                var providerConfigRoot = Parameters.ValueOf<string>(parameters, Context.Request, "providerConfigRoot", ParameterType.Query);
                var providerConfigUserFolder = Parameters.ValueOf<string>(parameters, Context.Request, "providerConfigUserFolder", ParameterType.Query);
                var providerConfigTwitterEnableParams = Parameters.ValueOf<bool?>(parameters, Context.Request, "providerConfigTwitterEnableParams", ParameterType.Query);
                var providerConfigTwitterParams = Parameters.ValueOf<List<string>>(parameters, Context.Request, "providerConfigTwitterParams", ParameterType.Query);
                var providerConfigRefreshUserdataEnabled = Parameters.ValueOf<bool?>(parameters, Context.Request, "providerConfigRefreshUserdataEnabled", ParameterType.Query);
                return service.ComAdobeCqSocialConnectOauthImplTwitterProviderImpl(Context, post, apply, delete, action, location, propertylist, oauthProviderId, oauthCloudConfigRoot, providerConfigRoot, providerConfigUserFolder, providerConfigTwitterEnableParams, providerConfigTwitterParams, providerConfigRefreshUserdataEnabled);
            };

            Post["/system/console/configMgr/com.adobe.cq.social.content.fragments.services.impl.CommunitiesFragmentCreationServiceImpl"] = parameters =>
            {
                var post = Parameters.ValueOf<bool?>(parameters, Context.Request, "post", ParameterType.Query);
                var apply = Parameters.ValueOf<bool?>(parameters, Context.Request, "apply", ParameterType.Query);
                var delete = Parameters.ValueOf<bool?>(parameters, Context.Request, "delete", ParameterType.Query);
                var action = Parameters.ValueOf<string>(parameters, Context.Request, "action", ParameterType.Query);
                var location = Parameters.ValueOf<string>(parameters, Context.Request, "location", ParameterType.Query);
                var propertylist = Parameters.ValueOf<List<string>>(parameters, Context.Request, "propertylist", ParameterType.Query);
                var cqSocialContentFragmentsServicesEnabled = Parameters.ValueOf<bool?>(parameters, Context.Request, "cqSocialContentFragmentsServicesEnabled", ParameterType.Query);
                var cqSocialContentFragmentsServicesWaitTimeSeconds = Parameters.ValueOf<int?>(parameters, Context.Request, "cqSocialContentFragmentsServicesWaitTimeSeconds", ParameterType.Query);
                return service.ComAdobeCqSocialContentFragmentsServicesImplCommunitiesFragmen(Context, post, apply, delete, action, location, propertylist, cqSocialContentFragmentsServicesEnabled, cqSocialContentFragmentsServicesWaitTimeSeconds);
            };

            Post["/system/console/configMgr/com.adobe.cq.social.datastore.as.impl.ASResourceProviderFactory"] = parameters =>
            {
                var post = Parameters.ValueOf<bool?>(parameters, Context.Request, "post", ParameterType.Query);
                var apply = Parameters.ValueOf<bool?>(parameters, Context.Request, "apply", ParameterType.Query);
                var delete = Parameters.ValueOf<bool?>(parameters, Context.Request, "delete", ParameterType.Query);
                var action = Parameters.ValueOf<string>(parameters, Context.Request, "action", ParameterType.Query);
                var location = Parameters.ValueOf<string>(parameters, Context.Request, "location", ParameterType.Query);
                var propertylist = Parameters.ValueOf<List<string>>(parameters, Context.Request, "propertylist", ParameterType.Query);
                var versionId = Parameters.ValueOf<string>(parameters, Context.Request, "versionId", ParameterType.Query);
                var cacheOn = Parameters.ValueOf<bool?>(parameters, Context.Request, "cacheOn", ParameterType.Query);
                var concurrencyLevel = Parameters.ValueOf<int?>(parameters, Context.Request, "concurrencyLevel", ParameterType.Query);
                var cacheStartSize = Parameters.ValueOf<int?>(parameters, Context.Request, "cacheStartSize", ParameterType.Query);
                var cacheTtl = Parameters.ValueOf<int?>(parameters, Context.Request, "cacheTtl", ParameterType.Query);
                var cacheSize = Parameters.ValueOf<int?>(parameters, Context.Request, "cacheSize", ParameterType.Query);
                var timeLimit = Parameters.ValueOf<int?>(parameters, Context.Request, "timeLimit", ParameterType.Query);
                return service.ComAdobeCqSocialDatastoreAsImplASResourceProviderFactory(Context, post, apply, delete, action, location, propertylist, versionId, cacheOn, concurrencyLevel, cacheStartSize, cacheTtl, cacheSize, timeLimit);
            };

            Post["/system/console/configMgr/com.adobe.cq.social.datastore.op.impl.SocialMSResourceProviderFactory"] = parameters =>
            {
                var post = Parameters.ValueOf<bool?>(parameters, Context.Request, "post", ParameterType.Query);
                var apply = Parameters.ValueOf<bool?>(parameters, Context.Request, "apply", ParameterType.Query);
                var delete = Parameters.ValueOf<bool?>(parameters, Context.Request, "delete", ParameterType.Query);
                var action = Parameters.ValueOf<string>(parameters, Context.Request, "action", ParameterType.Query);
                var location = Parameters.ValueOf<string>(parameters, Context.Request, "location", ParameterType.Query);
                var propertylist = Parameters.ValueOf<List<string>>(parameters, Context.Request, "propertylist", ParameterType.Query);
                var solrZkTimeout = Parameters.ValueOf<string>(parameters, Context.Request, "solrZkTimeout", ParameterType.Query);
                var solrCommit = Parameters.ValueOf<string>(parameters, Context.Request, "solrCommit", ParameterType.Query);
                var cacheOn = Parameters.ValueOf<bool?>(parameters, Context.Request, "cacheOn", ParameterType.Query);
                var concurrencyLevel = Parameters.ValueOf<int?>(parameters, Context.Request, "concurrencyLevel", ParameterType.Query);
                var cacheStartSize = Parameters.ValueOf<int?>(parameters, Context.Request, "cacheStartSize", ParameterType.Query);
                var cacheTtl = Parameters.ValueOf<int?>(parameters, Context.Request, "cacheTtl", ParameterType.Query);
                var cacheSize = Parameters.ValueOf<int?>(parameters, Context.Request, "cacheSize", ParameterType.Query);
                return service.ComAdobeCqSocialDatastoreOpImplSocialMSResourceProviderFactory(Context, post, apply, delete, action, location, propertylist, solrZkTimeout, solrCommit, cacheOn, concurrencyLevel, cacheStartSize, cacheTtl, cacheSize);
            };

            Post["/system/console/configMgr/com.adobe.cq.social.datastore.rdb.impl.SocialRDBResourceProviderFactory"] = parameters =>
            {
                var post = Parameters.ValueOf<bool?>(parameters, Context.Request, "post", ParameterType.Query);
                var apply = Parameters.ValueOf<bool?>(parameters, Context.Request, "apply", ParameterType.Query);
                var delete = Parameters.ValueOf<bool?>(parameters, Context.Request, "delete", ParameterType.Query);
                var action = Parameters.ValueOf<string>(parameters, Context.Request, "action", ParameterType.Query);
                var location = Parameters.ValueOf<string>(parameters, Context.Request, "location", ParameterType.Query);
                var propertylist = Parameters.ValueOf<List<string>>(parameters, Context.Request, "propertylist", ParameterType.Query);
                var solrZkTimeout = Parameters.ValueOf<string>(parameters, Context.Request, "solrZkTimeout", ParameterType.Query);
                var solrCommit = Parameters.ValueOf<string>(parameters, Context.Request, "solrCommit", ParameterType.Query);
                var cacheOn = Parameters.ValueOf<bool?>(parameters, Context.Request, "cacheOn", ParameterType.Query);
                var concurrencyLevel = Parameters.ValueOf<int?>(parameters, Context.Request, "concurrencyLevel", ParameterType.Query);
                var cacheStartSize = Parameters.ValueOf<int?>(parameters, Context.Request, "cacheStartSize", ParameterType.Query);
                var cacheTtl = Parameters.ValueOf<int?>(parameters, Context.Request, "cacheTtl", ParameterType.Query);
                var cacheSize = Parameters.ValueOf<int?>(parameters, Context.Request, "cacheSize", ParameterType.Query);
                return service.ComAdobeCqSocialDatastoreRdbImplSocialRDBResourceProviderFactor(Context, post, apply, delete, action, location, propertylist, solrZkTimeout, solrCommit, cacheOn, concurrencyLevel, cacheStartSize, cacheTtl, cacheSize);
            };

            Post["/system/console/configMgr/com.adobe.cq.social.enablement.adaptors.EnablementLearningPathAdaptorFactory"] = parameters =>
            {
                var post = Parameters.ValueOf<bool?>(parameters, Context.Request, "post", ParameterType.Query);
                var apply = Parameters.ValueOf<bool?>(parameters, Context.Request, "apply", ParameterType.Query);
                var delete = Parameters.ValueOf<bool?>(parameters, Context.Request, "delete", ParameterType.Query);
                var action = Parameters.ValueOf<string>(parameters, Context.Request, "action", ParameterType.Query);
                var location = Parameters.ValueOf<string>(parameters, Context.Request, "location", ParameterType.Query);
                var propertylist = Parameters.ValueOf<List<string>>(parameters, Context.Request, "propertylist", ParameterType.Query);
                var isMemberCheck = Parameters.ValueOf<bool?>(parameters, Context.Request, "isMemberCheck", ParameterType.Query);
                return service.ComAdobeCqSocialEnablementAdaptorsEnablementLearningPathAdaptorF(Context, post, apply, delete, action, location, propertylist, isMemberCheck);
            };

            Post["/system/console/configMgr/com.adobe.cq.social.enablement.adaptors.EnablementResourceAdaptorFactory"] = parameters =>
            {
                var post = Parameters.ValueOf<bool?>(parameters, Context.Request, "post", ParameterType.Query);
                var apply = Parameters.ValueOf<bool?>(parameters, Context.Request, "apply", ParameterType.Query);
                var delete = Parameters.ValueOf<bool?>(parameters, Context.Request, "delete", ParameterType.Query);
                var action = Parameters.ValueOf<string>(parameters, Context.Request, "action", ParameterType.Query);
                var location = Parameters.ValueOf<string>(parameters, Context.Request, "location", ParameterType.Query);
                var propertylist = Parameters.ValueOf<List<string>>(parameters, Context.Request, "propertylist", ParameterType.Query);
                var isMemberCheck = Parameters.ValueOf<bool?>(parameters, Context.Request, "isMemberCheck", ParameterType.Query);
                return service.ComAdobeCqSocialEnablementAdaptorsEnablementResourceAdaptorFacto(Context, post, apply, delete, action, location, propertylist, isMemberCheck);
            };

            Post["/system/console/configMgr/com.adobe.cq.social.enablement.learningpath.endpoints.impl.EnablementLearningPathModelOperationService"] = parameters =>
            {
                var post = Parameters.ValueOf<bool?>(parameters, Context.Request, "post", ParameterType.Query);
                var apply = Parameters.ValueOf<bool?>(parameters, Context.Request, "apply", ParameterType.Query);
                var delete = Parameters.ValueOf<bool?>(parameters, Context.Request, "delete", ParameterType.Query);
                var action = Parameters.ValueOf<string>(parameters, Context.Request, "action", ParameterType.Query);
                var location = Parameters.ValueOf<string>(parameters, Context.Request, "location", ParameterType.Query);
                var propertylist = Parameters.ValueOf<List<string>>(parameters, Context.Request, "propertylist", ParameterType.Query);
                var fieldWhitelist = Parameters.ValueOf<List<string>>(parameters, Context.Request, "fieldWhitelist", ParameterType.Query);
                return service.ComAdobeCqSocialEnablementLearningpathEndpointsImplEnablementL(Context, post, apply, delete, action, location, propertylist, fieldWhitelist);
            };

            Post["/system/console/configMgr/com.adobe.cq.social.enablement.resource.endpoints.impl.EnablementResourceModelOperationService"] = parameters =>
            {
                var post = Parameters.ValueOf<bool?>(parameters, Context.Request, "post", ParameterType.Query);
                var apply = Parameters.ValueOf<bool?>(parameters, Context.Request, "apply", ParameterType.Query);
                var delete = Parameters.ValueOf<bool?>(parameters, Context.Request, "delete", ParameterType.Query);
                var action = Parameters.ValueOf<string>(parameters, Context.Request, "action", ParameterType.Query);
                var location = Parameters.ValueOf<string>(parameters, Context.Request, "location", ParameterType.Query);
                var propertylist = Parameters.ValueOf<List<string>>(parameters, Context.Request, "propertylist", ParameterType.Query);
                var fieldWhitelist = Parameters.ValueOf<List<string>>(parameters, Context.Request, "fieldWhitelist", ParameterType.Query);
                return service.ComAdobeCqSocialEnablementResourceEndpointsImplEnablementResou(Context, post, apply, delete, action, location, propertylist, fieldWhitelist);
            };

            Post["/system/console/configMgr/com.adobe.cq.social.enablement.services.impl.AuthorMarkerImpl"] = parameters =>
            {
                var post = Parameters.ValueOf<bool?>(parameters, Context.Request, "post", ParameterType.Query);
                var apply = Parameters.ValueOf<bool?>(parameters, Context.Request, "apply", ParameterType.Query);
                var delete = Parameters.ValueOf<bool?>(parameters, Context.Request, "delete", ParameterType.Query);
                var action = Parameters.ValueOf<string>(parameters, Context.Request, "action", ParameterType.Query);
                var location = Parameters.ValueOf<string>(parameters, Context.Request, "location", ParameterType.Query);
                var propertylist = Parameters.ValueOf<List<string>>(parameters, Context.Request, "propertylist", ParameterType.Query);
                var serviceRanking = Parameters.ValueOf<int?>(parameters, Context.Request, "serviceRanking", ParameterType.Query);
                return service.ComAdobeCqSocialEnablementServicesImplAuthorMarkerImpl(Context, post, apply, delete, action, location, propertylist, serviceRanking);
            };

            Post["/system/console/configMgr/com.adobe.cq.social.filelibrary.client.endpoints.FilelibraryDownloadGetServlet"] = parameters =>
            {
                var post = Parameters.ValueOf<bool?>(parameters, Context.Request, "post", ParameterType.Query);
                var apply = Parameters.ValueOf<bool?>(parameters, Context.Request, "apply", ParameterType.Query);
                var delete = Parameters.ValueOf<bool?>(parameters, Context.Request, "delete", ParameterType.Query);
                var action = Parameters.ValueOf<string>(parameters, Context.Request, "action", ParameterType.Query);
                var location = Parameters.ValueOf<string>(parameters, Context.Request, "location", ParameterType.Query);
                var propertylist = Parameters.ValueOf<List<string>>(parameters, Context.Request, "propertylist", ParameterType.Query);
                var slingServletSelectors = Parameters.ValueOf<string>(parameters, Context.Request, "slingServletSelectors", ParameterType.Query);
                var slingServletExtensions = Parameters.ValueOf<string>(parameters, Context.Request, "slingServletExtensions", ParameterType.Query);
                return service.ComAdobeCqSocialFilelibraryClientEndpointsFilelibraryDownloadGe(Context, post, apply, delete, action, location, propertylist, slingServletSelectors, slingServletExtensions);
            };

            Post["/system/console/configMgr/com.adobe.cq.social.filelibrary.client.endpoints.impl.FileLibraryOperationsService"] = parameters =>
            {
                var post = Parameters.ValueOf<bool?>(parameters, Context.Request, "post", ParameterType.Query);
                var apply = Parameters.ValueOf<bool?>(parameters, Context.Request, "apply", ParameterType.Query);
                var delete = Parameters.ValueOf<bool?>(parameters, Context.Request, "delete", ParameterType.Query);
                var action = Parameters.ValueOf<string>(parameters, Context.Request, "action", ParameterType.Query);
                var location = Parameters.ValueOf<string>(parameters, Context.Request, "location", ParameterType.Query);
                var propertylist = Parameters.ValueOf<List<string>>(parameters, Context.Request, "propertylist", ParameterType.Query);
                var fieldWhitelist = Parameters.ValueOf<List<string>>(parameters, Context.Request, "fieldWhitelist", ParameterType.Query);
                var attachmentTypeBlacklist = Parameters.ValueOf<List<string>>(parameters, Context.Request, "attachmentTypeBlacklist", ParameterType.Query);
                return service.ComAdobeCqSocialFilelibraryClientEndpointsImplFileLibraryOpera(Context, post, apply, delete, action, location, propertylist, fieldWhitelist, attachmentTypeBlacklist);
            };

            Post["/system/console/configMgr/com.adobe.cq.social.forum.client.endpoints.impl.ForumOperationsService"] = parameters =>
            {
                var post = Parameters.ValueOf<bool?>(parameters, Context.Request, "post", ParameterType.Query);
                var apply = Parameters.ValueOf<bool?>(parameters, Context.Request, "apply", ParameterType.Query);
                var delete = Parameters.ValueOf<bool?>(parameters, Context.Request, "delete", ParameterType.Query);
                var action = Parameters.ValueOf<string>(parameters, Context.Request, "action", ParameterType.Query);
                var location = Parameters.ValueOf<string>(parameters, Context.Request, "location", ParameterType.Query);
                var propertylist = Parameters.ValueOf<List<string>>(parameters, Context.Request, "propertylist", ParameterType.Query);
                var fieldWhitelist = Parameters.ValueOf<List<string>>(parameters, Context.Request, "fieldWhitelist", ParameterType.Query);
                var attachmentTypeBlacklist = Parameters.ValueOf<List<string>>(parameters, Context.Request, "attachmentTypeBlacklist", ParameterType.Query);
                return service.ComAdobeCqSocialForumClientEndpointsImplForumOperationsService(Context, post, apply, delete, action, location, propertylist, fieldWhitelist, attachmentTypeBlacklist);
            };

            Post["/system/console/configMgr/com.adobe.cq.social.forum.dispatcher.impl.FlushOperations"] = parameters =>
            {
                var post = Parameters.ValueOf<bool?>(parameters, Context.Request, "post", ParameterType.Query);
                var apply = Parameters.ValueOf<bool?>(parameters, Context.Request, "apply", ParameterType.Query);
                var delete = Parameters.ValueOf<bool?>(parameters, Context.Request, "delete", ParameterType.Query);
                var action = Parameters.ValueOf<string>(parameters, Context.Request, "action", ParameterType.Query);
                var location = Parameters.ValueOf<string>(parameters, Context.Request, "location", ParameterType.Query);
                var propertylist = Parameters.ValueOf<List<string>>(parameters, Context.Request, "propertylist", ParameterType.Query);
                var extensionOrder = Parameters.ValueOf<int?>(parameters, Context.Request, "extensionOrder", ParameterType.Query);
                var flushForumontopic = Parameters.ValueOf<bool?>(parameters, Context.Request, "flushForumontopic", ParameterType.Query);
                return service.ComAdobeCqSocialForumDispatcherImplFlushOperations(Context, post, apply, delete, action, location, propertylist, extensionOrder, flushForumontopic);
            };

            Post["/system/console/configMgr/com.adobe.cq.social.group.client.impl.CommunityGroupCollectionComponentFactory"] = parameters =>
            {
                var post = Parameters.ValueOf<bool?>(parameters, Context.Request, "post", ParameterType.Query);
                var apply = Parameters.ValueOf<bool?>(parameters, Context.Request, "apply", ParameterType.Query);
                var delete = Parameters.ValueOf<bool?>(parameters, Context.Request, "delete", ParameterType.Query);
                var action = Parameters.ValueOf<string>(parameters, Context.Request, "action", ParameterType.Query);
                var location = Parameters.ValueOf<string>(parameters, Context.Request, "location", ParameterType.Query);
                var propertylist = Parameters.ValueOf<List<string>>(parameters, Context.Request, "propertylist", ParameterType.Query);
                var groupListingPaginationEnable = Parameters.ValueOf<bool?>(parameters, Context.Request, "groupListingPaginationEnable", ParameterType.Query);
                var groupListingLazyloadingEnable = Parameters.ValueOf<bool?>(parameters, Context.Request, "groupListingLazyloadingEnable", ParameterType.Query);
                var pageSize = Parameters.ValueOf<int?>(parameters, Context.Request, "pageSize", ParameterType.Query);
                var priority = Parameters.ValueOf<int?>(parameters, Context.Request, "priority", ParameterType.Query);
                return service.ComAdobeCqSocialGroupClientImplCommunityGroupCollectionComponen(Context, post, apply, delete, action, location, propertylist, groupListingPaginationEnable, groupListingLazyloadingEnable, pageSize, priority);
            };

            Post["/system/console/configMgr/com.adobe.cq.social.group.impl.GroupServiceImpl"] = parameters =>
            {
                var post = Parameters.ValueOf<bool?>(parameters, Context.Request, "post", ParameterType.Query);
                var apply = Parameters.ValueOf<bool?>(parameters, Context.Request, "apply", ParameterType.Query);
                var delete = Parameters.ValueOf<bool?>(parameters, Context.Request, "delete", ParameterType.Query);
                var action = Parameters.ValueOf<string>(parameters, Context.Request, "action", ParameterType.Query);
                var location = Parameters.ValueOf<string>(parameters, Context.Request, "location", ParameterType.Query);
                var propertylist = Parameters.ValueOf<List<string>>(parameters, Context.Request, "propertylist", ParameterType.Query);
                var maxWaitTime = Parameters.ValueOf<int?>(parameters, Context.Request, "maxWaitTime", ParameterType.Query);
                var minWaitBetweenRetries = Parameters.ValueOf<int?>(parameters, Context.Request, "minWaitBetweenRetries", ParameterType.Query);
                return service.ComAdobeCqSocialGroupImplGroupServiceImpl(Context, post, apply, delete, action, location, propertylist, maxWaitTime, minWaitBetweenRetries);
            };

            Post["/system/console/configMgr/com.adobe.cq.social.handlebars.GuavaTemplateCacheImpl"] = parameters =>
            {
                var post = Parameters.ValueOf<bool?>(parameters, Context.Request, "post", ParameterType.Query);
                var apply = Parameters.ValueOf<bool?>(parameters, Context.Request, "apply", ParameterType.Query);
                var delete = Parameters.ValueOf<bool?>(parameters, Context.Request, "delete", ParameterType.Query);
                var action = Parameters.ValueOf<string>(parameters, Context.Request, "action", ParameterType.Query);
                var location = Parameters.ValueOf<string>(parameters, Context.Request, "location", ParameterType.Query);
                var propertylist = Parameters.ValueOf<List<string>>(parameters, Context.Request, "propertylist", ParameterType.Query);
                var parameterGuavaCacheEnabled = Parameters.ValueOf<bool?>(parameters, Context.Request, "parameterGuavaCacheEnabled", ParameterType.Query);
                var parameterGuavaCacheParams = Parameters.ValueOf<string>(parameters, Context.Request, "parameterGuavaCacheParams", ParameterType.Query);
                var parameterGuavaCacheReload = Parameters.ValueOf<bool?>(parameters, Context.Request, "parameterGuavaCacheReload", ParameterType.Query);
                var serviceRanking = Parameters.ValueOf<int?>(parameters, Context.Request, "serviceRanking", ParameterType.Query);
                return service.ComAdobeCqSocialHandlebarsGuavaTemplateCacheImpl(Context, post, apply, delete, action, location, propertylist, parameterGuavaCacheEnabled, parameterGuavaCacheParams, parameterGuavaCacheReload, serviceRanking);
            };

            Post["/system/console/configMgr/com.adobe.cq.social.ideation.client.endpoints.impl.IdeationOperationsService"] = parameters =>
            {
                var post = Parameters.ValueOf<bool?>(parameters, Context.Request, "post", ParameterType.Query);
                var apply = Parameters.ValueOf<bool?>(parameters, Context.Request, "apply", ParameterType.Query);
                var delete = Parameters.ValueOf<bool?>(parameters, Context.Request, "delete", ParameterType.Query);
                var action = Parameters.ValueOf<string>(parameters, Context.Request, "action", ParameterType.Query);
                var location = Parameters.ValueOf<string>(parameters, Context.Request, "location", ParameterType.Query);
                var propertylist = Parameters.ValueOf<List<string>>(parameters, Context.Request, "propertylist", ParameterType.Query);
                var fieldWhitelist = Parameters.ValueOf<List<string>>(parameters, Context.Request, "fieldWhitelist", ParameterType.Query);
                var attachmentTypeBlacklist = Parameters.ValueOf<List<string>>(parameters, Context.Request, "attachmentTypeBlacklist", ParameterType.Query);
                return service.ComAdobeCqSocialIdeationClientEndpointsImplIdeationOperationsS(Context, post, apply, delete, action, location, propertylist, fieldWhitelist, attachmentTypeBlacklist);
            };

            Post["/system/console/configMgr/com.adobe.cq.social.journal.client.endpoints.impl.JournalOperationsService"] = parameters =>
            {
                var post = Parameters.ValueOf<bool?>(parameters, Context.Request, "post", ParameterType.Query);
                var apply = Parameters.ValueOf<bool?>(parameters, Context.Request, "apply", ParameterType.Query);
                var delete = Parameters.ValueOf<bool?>(parameters, Context.Request, "delete", ParameterType.Query);
                var action = Parameters.ValueOf<string>(parameters, Context.Request, "action", ParameterType.Query);
                var location = Parameters.ValueOf<string>(parameters, Context.Request, "location", ParameterType.Query);
                var propertylist = Parameters.ValueOf<List<string>>(parameters, Context.Request, "propertylist", ParameterType.Query);
                var fieldWhitelist = Parameters.ValueOf<List<string>>(parameters, Context.Request, "fieldWhitelist", ParameterType.Query);
                var attachmentTypeBlacklist = Parameters.ValueOf<List<string>>(parameters, Context.Request, "attachmentTypeBlacklist", ParameterType.Query);
                return service.ComAdobeCqSocialJournalClientEndpointsImplJournalOperationsSer(Context, post, apply, delete, action, location, propertylist, fieldWhitelist, attachmentTypeBlacklist);
            };

            Post["/system/console/configMgr/com.adobe.cq.social.members.endpoints.impl.CommunityMemberGroupProfileOperationService"] = parameters =>
            {
                var post = Parameters.ValueOf<bool?>(parameters, Context.Request, "post", ParameterType.Query);
                var apply = Parameters.ValueOf<bool?>(parameters, Context.Request, "apply", ParameterType.Query);
                var delete = Parameters.ValueOf<bool?>(parameters, Context.Request, "delete", ParameterType.Query);
                var action = Parameters.ValueOf<string>(parameters, Context.Request, "action", ParameterType.Query);
                var location = Parameters.ValueOf<string>(parameters, Context.Request, "location", ParameterType.Query);
                var propertylist = Parameters.ValueOf<List<string>>(parameters, Context.Request, "propertylist", ParameterType.Query);
                var fieldWhitelist = Parameters.ValueOf<List<string>>(parameters, Context.Request, "fieldWhitelist", ParameterType.Query);
                return service.ComAdobeCqSocialMembersEndpointsImplCommunityMemberGroupProfile(Context, post, apply, delete, action, location, propertylist, fieldWhitelist);
            };

            Post["/system/console/configMgr/com.adobe.cq.social.members.endpoints.impl.CommunityMemberUserProfileOperationService"] = parameters =>
            {
                var post = Parameters.ValueOf<bool?>(parameters, Context.Request, "post", ParameterType.Query);
                var apply = Parameters.ValueOf<bool?>(parameters, Context.Request, "apply", ParameterType.Query);
                var delete = Parameters.ValueOf<bool?>(parameters, Context.Request, "delete", ParameterType.Query);
                var action = Parameters.ValueOf<string>(parameters, Context.Request, "action", ParameterType.Query);
                var location = Parameters.ValueOf<string>(parameters, Context.Request, "location", ParameterType.Query);
                var propertylist = Parameters.ValueOf<List<string>>(parameters, Context.Request, "propertylist", ParameterType.Query);
                var fieldWhitelist = Parameters.ValueOf<List<string>>(parameters, Context.Request, "fieldWhitelist", ParameterType.Query);
                return service.ComAdobeCqSocialMembersEndpointsImplCommunityMemberUserProfileO(Context, post, apply, delete, action, location, propertylist, fieldWhitelist);
            };

            Post["/system/console/configMgr/com.adobe.cq.social.members.impl.CommunityMemberGroupProfileComponentFactory"] = parameters =>
            {
                var post = Parameters.ValueOf<bool?>(parameters, Context.Request, "post", ParameterType.Query);
                var apply = Parameters.ValueOf<bool?>(parameters, Context.Request, "apply", ParameterType.Query);
                var delete = Parameters.ValueOf<bool?>(parameters, Context.Request, "delete", ParameterType.Query);
                var action = Parameters.ValueOf<string>(parameters, Context.Request, "action", ParameterType.Query);
                var location = Parameters.ValueOf<string>(parameters, Context.Request, "location", ParameterType.Query);
                var propertylist = Parameters.ValueOf<List<string>>(parameters, Context.Request, "propertylist", ParameterType.Query);
                var everyoneLimit = Parameters.ValueOf<int?>(parameters, Context.Request, "everyoneLimit", ParameterType.Query);
                var priority = Parameters.ValueOf<int?>(parameters, Context.Request, "priority", ParameterType.Query);
                return service.ComAdobeCqSocialMembersImplCommunityMemberGroupProfileComponentF(Context, post, apply, delete, action, location, propertylist, everyoneLimit, priority);
            };

            Post["/system/console/configMgr/com.adobe.cq.social.messaging.client.endpoints.impl.MessagingOperationsServiceImpl"] = parameters =>
            {
                var post = Parameters.ValueOf<bool?>(parameters, Context.Request, "post", ParameterType.Query);
                var apply = Parameters.ValueOf<bool?>(parameters, Context.Request, "apply", ParameterType.Query);
                var delete = Parameters.ValueOf<bool?>(parameters, Context.Request, "delete", ParameterType.Query);
                var action = Parameters.ValueOf<string>(parameters, Context.Request, "action", ParameterType.Query);
                var location = Parameters.ValueOf<string>(parameters, Context.Request, "location", ParameterType.Query);
                var propertylist = Parameters.ValueOf<List<string>>(parameters, Context.Request, "propertylist", ParameterType.Query);
                var messageProperties = Parameters.ValueOf<List<string>>(parameters, Context.Request, "messageProperties", ParameterType.Query);
                var messageBoxSizeLimit = Parameters.ValueOf<int?>(parameters, Context.Request, "messageBoxSizeLimit", ParameterType.Query);
                var messageCountLimit = Parameters.ValueOf<int?>(parameters, Context.Request, "messageCountLimit", ParameterType.Query);
                var notifyFailure = Parameters.ValueOf<bool?>(parameters, Context.Request, "notifyFailure", ParameterType.Query);
                var failureMessageFrom = Parameters.ValueOf<string>(parameters, Context.Request, "failureMessageFrom", ParameterType.Query);
                var failureTemplatePath = Parameters.ValueOf<string>(parameters, Context.Request, "failureTemplatePath", ParameterType.Query);
                var maxRetries = Parameters.ValueOf<int?>(parameters, Context.Request, "maxRetries", ParameterType.Query);
                var minWaitBetweenRetries = Parameters.ValueOf<int?>(parameters, Context.Request, "minWaitBetweenRetries", ParameterType.Query);
                var countUpdatePoolSize = Parameters.ValueOf<int?>(parameters, Context.Request, "countUpdatePoolSize", ParameterType.Query);
                var inboxPath = Parameters.ValueOf<string>(parameters, Context.Request, "inboxPath", ParameterType.Query);
                var sentitemsPath = Parameters.ValueOf<string>(parameters, Context.Request, "sentitemsPath", ParameterType.Query);
                var supportAttachments = Parameters.ValueOf<bool?>(parameters, Context.Request, "supportAttachments", ParameterType.Query);
                var supportGroupMessaging = Parameters.ValueOf<bool?>(parameters, Context.Request, "supportGroupMessaging", ParameterType.Query);
                var maxTotalRecipients = Parameters.ValueOf<int?>(parameters, Context.Request, "maxTotalRecipients", ParameterType.Query);
                var batchSize = Parameters.ValueOf<int?>(parameters, Context.Request, "batchSize", ParameterType.Query);
                var maxTotalAttachmentSize = Parameters.ValueOf<int?>(parameters, Context.Request, "maxTotalAttachmentSize", ParameterType.Query);
                var attachmentTypeBlacklist = Parameters.ValueOf<List<string>>(parameters, Context.Request, "attachmentTypeBlacklist", ParameterType.Query);
                var allowedAttachmentTypes = Parameters.ValueOf<List<string>>(parameters, Context.Request, "allowedAttachmentTypes", ParameterType.Query);
                var serviceSelector = Parameters.ValueOf<string>(parameters, Context.Request, "serviceSelector", ParameterType.Query);
                var fieldWhitelist = Parameters.ValueOf<List<string>>(parameters, Context.Request, "fieldWhitelist", ParameterType.Query);
                return service.ComAdobeCqSocialMessagingClientEndpointsImplMessagingOperation(Context, post, apply, delete, action, location, propertylist, messageProperties, messageBoxSizeLimit, messageCountLimit, notifyFailure, failureMessageFrom, failureTemplatePath, maxRetries, minWaitBetweenRetries, countUpdatePoolSize, inboxPath, sentitemsPath, supportAttachments, supportGroupMessaging, maxTotalRecipients, batchSize, maxTotalAttachmentSize, attachmentTypeBlacklist, allowedAttachmentTypes, serviceSelector, fieldWhitelist);
            };

            Post["/system/console/configMgr/com.adobe.cq.social.moderation.dashboard.api.FilterGroupSocialComponentFactory"] = parameters =>
            {
                var post = Parameters.ValueOf<bool?>(parameters, Context.Request, "post", ParameterType.Query);
                var apply = Parameters.ValueOf<bool?>(parameters, Context.Request, "apply", ParameterType.Query);
                var delete = Parameters.ValueOf<bool?>(parameters, Context.Request, "delete", ParameterType.Query);
                var action = Parameters.ValueOf<string>(parameters, Context.Request, "action", ParameterType.Query);
                var location = Parameters.ValueOf<string>(parameters, Context.Request, "location", ParameterType.Query);
                var propertylist = Parameters.ValueOf<List<string>>(parameters, Context.Request, "propertylist", ParameterType.Query);
                var resourceTypeFilters = Parameters.ValueOf<List<string>>(parameters, Context.Request, "resourceTypeFilters", ParameterType.Query);
                var priority = Parameters.ValueOf<int?>(parameters, Context.Request, "priority", ParameterType.Query);
                return service.ComAdobeCqSocialModerationDashboardApiFilterGroupSocialComponen(Context, post, apply, delete, action, location, propertylist, resourceTypeFilters, priority);
            };

            Post["/system/console/configMgr/com.adobe.cq.social.moderation.dashboard.api.ModerationDashboardSocialComponentFactory"] = parameters =>
            {
                var post = Parameters.ValueOf<bool?>(parameters, Context.Request, "post", ParameterType.Query);
                var apply = Parameters.ValueOf<bool?>(parameters, Context.Request, "apply", ParameterType.Query);
                var delete = Parameters.ValueOf<bool?>(parameters, Context.Request, "delete", ParameterType.Query);
                var action = Parameters.ValueOf<string>(parameters, Context.Request, "action", ParameterType.Query);
                var location = Parameters.ValueOf<string>(parameters, Context.Request, "location", ParameterType.Query);
                var propertylist = Parameters.ValueOf<List<string>>(parameters, Context.Request, "propertylist", ParameterType.Query);
                var priority = Parameters.ValueOf<int?>(parameters, Context.Request, "priority", ParameterType.Query);
                return service.ComAdobeCqSocialModerationDashboardApiModerationDashboardSocial(Context, post, apply, delete, action, location, propertylist, priority);
            };

            Post["/system/console/configMgr/com.adobe.cq.social.moderation.dashboard.api.UserDetailsSocialComponentFactory"] = parameters =>
            {
                var post = Parameters.ValueOf<bool?>(parameters, Context.Request, "post", ParameterType.Query);
                var apply = Parameters.ValueOf<bool?>(parameters, Context.Request, "apply", ParameterType.Query);
                var delete = Parameters.ValueOf<bool?>(parameters, Context.Request, "delete", ParameterType.Query);
                var action = Parameters.ValueOf<string>(parameters, Context.Request, "action", ParameterType.Query);
                var location = Parameters.ValueOf<string>(parameters, Context.Request, "location", ParameterType.Query);
                var propertylist = Parameters.ValueOf<List<string>>(parameters, Context.Request, "propertylist", ParameterType.Query);
                var priority = Parameters.ValueOf<int?>(parameters, Context.Request, "priority", ParameterType.Query);
                return service.ComAdobeCqSocialModerationDashboardApiUserDetailsSocialComponen(Context, post, apply, delete, action, location, propertylist, priority);
            };

            Post["/system/console/configMgr/com.adobe.cq.social.moderation.dashboard.internal.impl.FilterGroupSocialComponentFactoryV2"] = parameters =>
            {
                var post = Parameters.ValueOf<bool?>(parameters, Context.Request, "post", ParameterType.Query);
                var apply = Parameters.ValueOf<bool?>(parameters, Context.Request, "apply", ParameterType.Query);
                var delete = Parameters.ValueOf<bool?>(parameters, Context.Request, "delete", ParameterType.Query);
                var action = Parameters.ValueOf<string>(parameters, Context.Request, "action", ParameterType.Query);
                var location = Parameters.ValueOf<string>(parameters, Context.Request, "location", ParameterType.Query);
                var propertylist = Parameters.ValueOf<List<string>>(parameters, Context.Request, "propertylist", ParameterType.Query);
                var resourceTypeFilters = Parameters.ValueOf<List<string>>(parameters, Context.Request, "resourceTypeFilters", ParameterType.Query);
                var priority = Parameters.ValueOf<int?>(parameters, Context.Request, "priority", ParameterType.Query);
                return service.ComAdobeCqSocialModerationDashboardInternalImplFilterGroupSoci(Context, post, apply, delete, action, location, propertylist, resourceTypeFilters, priority);
            };

            Post["/system/console/configMgr/com.adobe.cq.social.notifications.impl.MentionsRouter"] = parameters =>
            {
                var post = Parameters.ValueOf<bool?>(parameters, Context.Request, "post", ParameterType.Query);
                var apply = Parameters.ValueOf<bool?>(parameters, Context.Request, "apply", ParameterType.Query);
                var delete = Parameters.ValueOf<bool?>(parameters, Context.Request, "delete", ParameterType.Query);
                var action = Parameters.ValueOf<string>(parameters, Context.Request, "action", ParameterType.Query);
                var location = Parameters.ValueOf<string>(parameters, Context.Request, "location", ParameterType.Query);
                var propertylist = Parameters.ValueOf<List<string>>(parameters, Context.Request, "propertylist", ParameterType.Query);
                var eventTopics = Parameters.ValueOf<string>(parameters, Context.Request, "eventTopics", ParameterType.Query);
                var eventFilter = Parameters.ValueOf<string>(parameters, Context.Request, "eventFilter", ParameterType.Query);
                return service.ComAdobeCqSocialNotificationsImplMentionsRouter(Context, post, apply, delete, action, location, propertylist, eventTopics, eventFilter);
            };

            Post["/system/console/configMgr/com.adobe.cq.social.notifications.impl.NotificationManagerImpl"] = parameters =>
            {
                var post = Parameters.ValueOf<bool?>(parameters, Context.Request, "post", ParameterType.Query);
                var apply = Parameters.ValueOf<bool?>(parameters, Context.Request, "apply", ParameterType.Query);
                var delete = Parameters.ValueOf<bool?>(parameters, Context.Request, "delete", ParameterType.Query);
                var action = Parameters.ValueOf<string>(parameters, Context.Request, "action", ParameterType.Query);
                var location = Parameters.ValueOf<string>(parameters, Context.Request, "location", ParameterType.Query);
                var propertylist = Parameters.ValueOf<List<string>>(parameters, Context.Request, "propertylist", ParameterType.Query);
                var maxUnreadNotificationCount = Parameters.ValueOf<int?>(parameters, Context.Request, "maxUnreadNotificationCount", ParameterType.Query);
                return service.ComAdobeCqSocialNotificationsImplNotificationManagerImpl(Context, post, apply, delete, action, location, propertylist, maxUnreadNotificationCount);
            };

            Post["/system/console/configMgr/com.adobe.cq.social.notifications.impl.NotificationsRouter"] = parameters =>
            {
                var post = Parameters.ValueOf<bool?>(parameters, Context.Request, "post", ParameterType.Query);
                var apply = Parameters.ValueOf<bool?>(parameters, Context.Request, "apply", ParameterType.Query);
                var delete = Parameters.ValueOf<bool?>(parameters, Context.Request, "delete", ParameterType.Query);
                var action = Parameters.ValueOf<string>(parameters, Context.Request, "action", ParameterType.Query);
                var location = Parameters.ValueOf<string>(parameters, Context.Request, "location", ParameterType.Query);
                var propertylist = Parameters.ValueOf<List<string>>(parameters, Context.Request, "propertylist", ParameterType.Query);
                var eventTopics = Parameters.ValueOf<string>(parameters, Context.Request, "eventTopics", ParameterType.Query);
                var eventFilter = Parameters.ValueOf<string>(parameters, Context.Request, "eventFilter", ParameterType.Query);
                return service.ComAdobeCqSocialNotificationsImplNotificationsRouter(Context, post, apply, delete, action, location, propertylist, eventTopics, eventFilter);
            };

            Post["/system/console/configMgr/com.adobe.cq.social.qna.client.endpoints.impl.QnaForumOperationsService"] = parameters =>
            {
                var post = Parameters.ValueOf<bool?>(parameters, Context.Request, "post", ParameterType.Query);
                var apply = Parameters.ValueOf<bool?>(parameters, Context.Request, "apply", ParameterType.Query);
                var delete = Parameters.ValueOf<bool?>(parameters, Context.Request, "delete", ParameterType.Query);
                var action = Parameters.ValueOf<string>(parameters, Context.Request, "action", ParameterType.Query);
                var location = Parameters.ValueOf<string>(parameters, Context.Request, "location", ParameterType.Query);
                var propertylist = Parameters.ValueOf<List<string>>(parameters, Context.Request, "propertylist", ParameterType.Query);
                var fieldWhitelist = Parameters.ValueOf<List<string>>(parameters, Context.Request, "fieldWhitelist", ParameterType.Query);
                var attachmentTypeBlacklist = Parameters.ValueOf<List<string>>(parameters, Context.Request, "attachmentTypeBlacklist", ParameterType.Query);
                return service.ComAdobeCqSocialQnaClientEndpointsImplQnaForumOperationsServic(Context, post, apply, delete, action, location, propertylist, fieldWhitelist, attachmentTypeBlacklist);
            };

            Post["/system/console/configMgr/com.adobe.cq.social.reporting.analytics.services.impl.AnalyticsReportImporterServiceImpl"] = parameters =>
            {
                var post = Parameters.ValueOf<bool?>(parameters, Context.Request, "post", ParameterType.Query);
                var apply = Parameters.ValueOf<bool?>(parameters, Context.Request, "apply", ParameterType.Query);
                var delete = Parameters.ValueOf<bool?>(parameters, Context.Request, "delete", ParameterType.Query);
                var action = Parameters.ValueOf<string>(parameters, Context.Request, "action", ParameterType.Query);
                var location = Parameters.ValueOf<string>(parameters, Context.Request, "location", ParameterType.Query);
                var propertylist = Parameters.ValueOf<List<string>>(parameters, Context.Request, "propertylist", ParameterType.Query);
                var cqSocialReportingAnalyticsPollingImporterInterval = Parameters.ValueOf<int?>(parameters, Context.Request, "cqSocialReportingAnalyticsPollingImporterInterval", ParameterType.Query);
                var cqSocialReportingAnalyticsPollingImporterPageSize = Parameters.ValueOf<int?>(parameters, Context.Request, "cqSocialReportingAnalyticsPollingImporterPageSize", ParameterType.Query);
                return service.ComAdobeCqSocialReportingAnalyticsServicesImplAnalyticsReportI(Context, post, apply, delete, action, location, propertylist, cqSocialReportingAnalyticsPollingImporterInterval, cqSocialReportingAnalyticsPollingImporterPageSize);
            };

            Post["/system/console/configMgr/com.adobe.cq.social.reporting.analytics.services.impl.AnalyticsReportManagementServiceImpl"] = parameters =>
            {
                var post = Parameters.ValueOf<bool?>(parameters, Context.Request, "post", ParameterType.Query);
                var apply = Parameters.ValueOf<bool?>(parameters, Context.Request, "apply", ParameterType.Query);
                var delete = Parameters.ValueOf<bool?>(parameters, Context.Request, "delete", ParameterType.Query);
                var action = Parameters.ValueOf<string>(parameters, Context.Request, "action", ParameterType.Query);
                var location = Parameters.ValueOf<string>(parameters, Context.Request, "location", ParameterType.Query);
                var propertylist = Parameters.ValueOf<List<string>>(parameters, Context.Request, "propertylist", ParameterType.Query);
                var reportFetchDelay = Parameters.ValueOf<int?>(parameters, Context.Request, "reportFetchDelay", ParameterType.Query);
                return service.ComAdobeCqSocialReportingAnalyticsServicesImplAnalyticsReportM(Context, post, apply, delete, action, location, propertylist, reportFetchDelay);
            };

            Post["/system/console/configMgr/com.adobe.cq.social.reporting.analytics.services.impl.SiteTrendReportSocialComponentFactory"] = parameters =>
            {
                var post = Parameters.ValueOf<bool?>(parameters, Context.Request, "post", ParameterType.Query);
                var apply = Parameters.ValueOf<bool?>(parameters, Context.Request, "apply", ParameterType.Query);
                var delete = Parameters.ValueOf<bool?>(parameters, Context.Request, "delete", ParameterType.Query);
                var action = Parameters.ValueOf<string>(parameters, Context.Request, "action", ParameterType.Query);
                var location = Parameters.ValueOf<string>(parameters, Context.Request, "location", ParameterType.Query);
                var propertylist = Parameters.ValueOf<List<string>>(parameters, Context.Request, "propertylist", ParameterType.Query);
                var cqSocialConsoleAnalyticsSitesMapping = Parameters.ValueOf<List<string>>(parameters, Context.Request, "cqSocialConsoleAnalyticsSitesMapping", ParameterType.Query);
                var priority = Parameters.ValueOf<int?>(parameters, Context.Request, "priority", ParameterType.Query);
                return service.ComAdobeCqSocialReportingAnalyticsServicesImplSiteTrendReportS(Context, post, apply, delete, action, location, propertylist, cqSocialConsoleAnalyticsSitesMapping, priority);
            };

            Post["/system/console/configMgr/com.adobe.cq.social.review.client.endpoints.impl.ReviewOperationsService"] = parameters =>
            {
                var post = Parameters.ValueOf<bool?>(parameters, Context.Request, "post", ParameterType.Query);
                var apply = Parameters.ValueOf<bool?>(parameters, Context.Request, "apply", ParameterType.Query);
                var delete = Parameters.ValueOf<bool?>(parameters, Context.Request, "delete", ParameterType.Query);
                var action = Parameters.ValueOf<string>(parameters, Context.Request, "action", ParameterType.Query);
                var location = Parameters.ValueOf<string>(parameters, Context.Request, "location", ParameterType.Query);
                var propertylist = Parameters.ValueOf<List<string>>(parameters, Context.Request, "propertylist", ParameterType.Query);
                var fieldWhitelist = Parameters.ValueOf<List<string>>(parameters, Context.Request, "fieldWhitelist", ParameterType.Query);
                var attachmentTypeBlacklist = Parameters.ValueOf<List<string>>(parameters, Context.Request, "attachmentTypeBlacklist", ParameterType.Query);
                return service.ComAdobeCqSocialReviewClientEndpointsImplReviewOperationsServi(Context, post, apply, delete, action, location, propertylist, fieldWhitelist, attachmentTypeBlacklist);
            };

            Post["/system/console/configMgr/com.adobe.cq.social.scf.core.operations.impl.SocialOperationsServlet"] = parameters =>
            {
                var post = Parameters.ValueOf<bool?>(parameters, Context.Request, "post", ParameterType.Query);
                var apply = Parameters.ValueOf<bool?>(parameters, Context.Request, "apply", ParameterType.Query);
                var delete = Parameters.ValueOf<bool?>(parameters, Context.Request, "delete", ParameterType.Query);
                var action = Parameters.ValueOf<string>(parameters, Context.Request, "action", ParameterType.Query);
                var location = Parameters.ValueOf<string>(parameters, Context.Request, "location", ParameterType.Query);
                var propertylist = Parameters.ValueOf<List<string>>(parameters, Context.Request, "propertylist", ParameterType.Query);
                var slingServletSelectors = Parameters.ValueOf<string>(parameters, Context.Request, "slingServletSelectors", ParameterType.Query);
                var slingServletExtensions = Parameters.ValueOf<string>(parameters, Context.Request, "slingServletExtensions", ParameterType.Query);
                return service.ComAdobeCqSocialScfCoreOperationsImplSocialOperationsServlet(Context, post, apply, delete, action, location, propertylist, slingServletSelectors, slingServletExtensions);
            };

            Post["/system/console/configMgr/com.adobe.cq.social.scf.endpoints.impl.DefaultSocialGetServlet"] = parameters =>
            {
                var post = Parameters.ValueOf<bool?>(parameters, Context.Request, "post", ParameterType.Query);
                var apply = Parameters.ValueOf<bool?>(parameters, Context.Request, "apply", ParameterType.Query);
                var delete = Parameters.ValueOf<bool?>(parameters, Context.Request, "delete", ParameterType.Query);
                var action = Parameters.ValueOf<string>(parameters, Context.Request, "action", ParameterType.Query);
                var location = Parameters.ValueOf<string>(parameters, Context.Request, "location", ParameterType.Query);
                var propertylist = Parameters.ValueOf<List<string>>(parameters, Context.Request, "propertylist", ParameterType.Query);
                var slingServletSelectors = Parameters.ValueOf<List<string>>(parameters, Context.Request, "slingServletSelectors", ParameterType.Query);
                var slingServletExtensions = Parameters.ValueOf<string>(parameters, Context.Request, "slingServletExtensions", ParameterType.Query);
                return service.ComAdobeCqSocialScfEndpointsImplDefaultSocialGetServlet(Context, post, apply, delete, action, location, propertylist, slingServletSelectors, slingServletExtensions);
            };

            Post["/system/console/configMgr/com.adobe.cq.social.scoring.impl.ScoringEventListener"] = parameters =>
            {
                var post = Parameters.ValueOf<bool?>(parameters, Context.Request, "post", ParameterType.Query);
                var apply = Parameters.ValueOf<bool?>(parameters, Context.Request, "apply", ParameterType.Query);
                var delete = Parameters.ValueOf<bool?>(parameters, Context.Request, "delete", ParameterType.Query);
                var action = Parameters.ValueOf<string>(parameters, Context.Request, "action", ParameterType.Query);
                var location = Parameters.ValueOf<string>(parameters, Context.Request, "location", ParameterType.Query);
                var propertylist = Parameters.ValueOf<List<string>>(parameters, Context.Request, "propertylist", ParameterType.Query);
                var eventTopics = Parameters.ValueOf<string>(parameters, Context.Request, "eventTopics", ParameterType.Query);
                var eventFilter = Parameters.ValueOf<string>(parameters, Context.Request, "eventFilter", ParameterType.Query);
                return service.ComAdobeCqSocialScoringImplScoringEventListener(Context, post, apply, delete, action, location, propertylist, eventTopics, eventFilter);
            };

            Post["/system/console/configMgr/com.adobe.cq.social.serviceusers.internal.impl.ServiceUserWrapperImpl"] = parameters =>
            {
                var post = Parameters.ValueOf<bool?>(parameters, Context.Request, "post", ParameterType.Query);
                var apply = Parameters.ValueOf<bool?>(parameters, Context.Request, "apply", ParameterType.Query);
                var delete = Parameters.ValueOf<bool?>(parameters, Context.Request, "delete", ParameterType.Query);
                var action = Parameters.ValueOf<string>(parameters, Context.Request, "action", ParameterType.Query);
                var location = Parameters.ValueOf<string>(parameters, Context.Request, "location", ParameterType.Query);
                var propertylist = Parameters.ValueOf<List<string>>(parameters, Context.Request, "propertylist", ParameterType.Query);
                var enableFallback = Parameters.ValueOf<bool?>(parameters, Context.Request, "enableFallback", ParameterType.Query);
                return service.ComAdobeCqSocialServiceusersInternalImplServiceUserWrapperImpl(Context, post, apply, delete, action, location, propertylist, enableFallback);
            };

            Post["/system/console/configMgr/com.adobe.cq.social.site.endpoints.impl.SiteOperationService"] = parameters =>
            {
                var post = Parameters.ValueOf<bool?>(parameters, Context.Request, "post", ParameterType.Query);
                var apply = Parameters.ValueOf<bool?>(parameters, Context.Request, "apply", ParameterType.Query);
                var delete = Parameters.ValueOf<bool?>(parameters, Context.Request, "delete", ParameterType.Query);
                var action = Parameters.ValueOf<string>(parameters, Context.Request, "action", ParameterType.Query);
                var location = Parameters.ValueOf<string>(parameters, Context.Request, "location", ParameterType.Query);
                var propertylist = Parameters.ValueOf<List<string>>(parameters, Context.Request, "propertylist", ParameterType.Query);
                var fieldWhitelist = Parameters.ValueOf<List<string>>(parameters, Context.Request, "fieldWhitelist", ParameterType.Query);
                var sitePathFilters = Parameters.ValueOf<List<string>>(parameters, Context.Request, "sitePathFilters", ParameterType.Query);
                var sitePackageGroup = Parameters.ValueOf<string>(parameters, Context.Request, "sitePackageGroup", ParameterType.Query);
                return service.ComAdobeCqSocialSiteEndpointsImplSiteOperationService(Context, post, apply, delete, action, location, propertylist, fieldWhitelist, sitePathFilters, sitePackageGroup);
            };

            Post["/system/console/configMgr/com.adobe.cq.social.site.impl.AnalyticsComponentConfigurationServiceImpl"] = parameters =>
            {
                var post = Parameters.ValueOf<bool?>(parameters, Context.Request, "post", ParameterType.Query);
                var apply = Parameters.ValueOf<bool?>(parameters, Context.Request, "apply", ParameterType.Query);
                var delete = Parameters.ValueOf<bool?>(parameters, Context.Request, "delete", ParameterType.Query);
                var action = Parameters.ValueOf<string>(parameters, Context.Request, "action", ParameterType.Query);
                var location = Parameters.ValueOf<string>(parameters, Context.Request, "location", ParameterType.Query);
                var propertylist = Parameters.ValueOf<List<string>>(parameters, Context.Request, "propertylist", ParameterType.Query);
                var cqSocialConsoleAnalyticsComponents = Parameters.ValueOf<List<string>>(parameters, Context.Request, "cqSocialConsoleAnalyticsComponents", ParameterType.Query);
                return service.ComAdobeCqSocialSiteImplAnalyticsComponentConfigurationServiceIm(Context, post, apply, delete, action, location, propertylist, cqSocialConsoleAnalyticsComponents);
            };

            Post["/system/console/configMgr/com.adobe.cq.social.site.impl.SiteConfiguratorImpl"] = parameters =>
            {
                var post = Parameters.ValueOf<bool?>(parameters, Context.Request, "post", ParameterType.Query);
                var apply = Parameters.ValueOf<bool?>(parameters, Context.Request, "apply", ParameterType.Query);
                var delete = Parameters.ValueOf<bool?>(parameters, Context.Request, "delete", ParameterType.Query);
                var action = Parameters.ValueOf<string>(parameters, Context.Request, "action", ParameterType.Query);
                var location = Parameters.ValueOf<string>(parameters, Context.Request, "location", ParameterType.Query);
                var propertylist = Parameters.ValueOf<List<string>>(parameters, Context.Request, "propertylist", ParameterType.Query);
                var componentsUsingTags = Parameters.ValueOf<List<string>>(parameters, Context.Request, "componentsUsingTags", ParameterType.Query);
                return service.ComAdobeCqSocialSiteImplSiteConfiguratorImpl(Context, post, apply, delete, action, location, propertylist, componentsUsingTags);
            };

            Post["/system/console/configMgr/com.adobe.cq.social.srp.impl.SocialSolrConnector"] = parameters =>
            {
                var post = Parameters.ValueOf<bool?>(parameters, Context.Request, "post", ParameterType.Query);
                var apply = Parameters.ValueOf<bool?>(parameters, Context.Request, "apply", ParameterType.Query);
                var delete = Parameters.ValueOf<bool?>(parameters, Context.Request, "delete", ParameterType.Query);
                var action = Parameters.ValueOf<string>(parameters, Context.Request, "action", ParameterType.Query);
                var location = Parameters.ValueOf<string>(parameters, Context.Request, "location", ParameterType.Query);
                var propertylist = Parameters.ValueOf<List<string>>(parameters, Context.Request, "propertylist", ParameterType.Query);
                var srpType = Parameters.ValueOf<string>(parameters, Context.Request, "srpType", ParameterType.Query);
                return service.ComAdobeCqSocialSrpImplSocialSolrConnector(Context, post, apply, delete, action, location, propertylist, srpType);
            };

            Post["/system/console/configMgr/com.adobe.cq.social.sync.impl.DiffChangesObserver"] = parameters =>
            {
                var post = Parameters.ValueOf<bool?>(parameters, Context.Request, "post", ParameterType.Query);
                var apply = Parameters.ValueOf<bool?>(parameters, Context.Request, "apply", ParameterType.Query);
                var delete = Parameters.ValueOf<bool?>(parameters, Context.Request, "delete", ParameterType.Query);
                var action = Parameters.ValueOf<string>(parameters, Context.Request, "action", ParameterType.Query);
                var location = Parameters.ValueOf<string>(parameters, Context.Request, "location", ParameterType.Query);
                var propertylist = Parameters.ValueOf<List<string>>(parameters, Context.Request, "propertylist", ParameterType.Query);
                var enabled = Parameters.ValueOf<bool?>(parameters, Context.Request, "enabled", ParameterType.Query);
                var agentName = Parameters.ValueOf<string>(parameters, Context.Request, "agentName", ParameterType.Query);
                var diffPath = Parameters.ValueOf<string>(parameters, Context.Request, "diffPath", ParameterType.Query);
                var propertyNames = Parameters.ValueOf<string>(parameters, Context.Request, "propertyNames", ParameterType.Query);
                return service.ComAdobeCqSocialSyncImplDiffChangesObserver(Context, post, apply, delete, action, location, propertylist, enabled, agentName, diffPath, propertyNames);
            };

            Post["/system/console/configMgr/com.adobe.cq.social.sync.impl.GroupSyncListenerImpl"] = parameters =>
            {
                var post = Parameters.ValueOf<bool?>(parameters, Context.Request, "post", ParameterType.Query);
                var apply = Parameters.ValueOf<bool?>(parameters, Context.Request, "apply", ParameterType.Query);
                var delete = Parameters.ValueOf<bool?>(parameters, Context.Request, "delete", ParameterType.Query);
                var action = Parameters.ValueOf<string>(parameters, Context.Request, "action", ParameterType.Query);
                var location = Parameters.ValueOf<string>(parameters, Context.Request, "location", ParameterType.Query);
                var propertylist = Parameters.ValueOf<List<string>>(parameters, Context.Request, "propertylist", ParameterType.Query);
                var nodetypes = Parameters.ValueOf<List<string>>(parameters, Context.Request, "nodetypes", ParameterType.Query);
                var ignorableprops = Parameters.ValueOf<List<string>>(parameters, Context.Request, "ignorableprops", ParameterType.Query);
                var ignorablenodes = Parameters.ValueOf<string>(parameters, Context.Request, "ignorablenodes", ParameterType.Query);
                var enabled = Parameters.ValueOf<bool?>(parameters, Context.Request, "enabled", ParameterType.Query);
                var distfolders = Parameters.ValueOf<string>(parameters, Context.Request, "distfolders", ParameterType.Query);
                return service.ComAdobeCqSocialSyncImplGroupSyncListenerImpl(Context, post, apply, delete, action, location, propertylist, nodetypes, ignorableprops, ignorablenodes, enabled, distfolders);
            };

            Post["/system/console/configMgr/com.adobe.cq.social.sync.impl.PublisherSyncServiceImpl"] = parameters =>
            {
                var post = Parameters.ValueOf<bool?>(parameters, Context.Request, "post", ParameterType.Query);
                var apply = Parameters.ValueOf<bool?>(parameters, Context.Request, "apply", ParameterType.Query);
                var delete = Parameters.ValueOf<bool?>(parameters, Context.Request, "delete", ParameterType.Query);
                var action = Parameters.ValueOf<string>(parameters, Context.Request, "action", ParameterType.Query);
                var location = Parameters.ValueOf<string>(parameters, Context.Request, "location", ParameterType.Query);
                var propertylist = Parameters.ValueOf<List<string>>(parameters, Context.Request, "propertylist", ParameterType.Query);
                var activeRunModes = Parameters.ValueOf<List<string>>(parameters, Context.Request, "activeRunModes", ParameterType.Query);
                return service.ComAdobeCqSocialSyncImplPublisherSyncServiceImpl(Context, post, apply, delete, action, location, propertylist, activeRunModes);
            };

            Post["/system/console/configMgr/com.adobe.cq.social.sync.impl.UserSyncListenerImpl"] = parameters =>
            {
                var post = Parameters.ValueOf<bool?>(parameters, Context.Request, "post", ParameterType.Query);
                var apply = Parameters.ValueOf<bool?>(parameters, Context.Request, "apply", ParameterType.Query);
                var delete = Parameters.ValueOf<bool?>(parameters, Context.Request, "delete", ParameterType.Query);
                var action = Parameters.ValueOf<string>(parameters, Context.Request, "action", ParameterType.Query);
                var location = Parameters.ValueOf<string>(parameters, Context.Request, "location", ParameterType.Query);
                var propertylist = Parameters.ValueOf<List<string>>(parameters, Context.Request, "propertylist", ParameterType.Query);
                var nodetypes = Parameters.ValueOf<List<string>>(parameters, Context.Request, "nodetypes", ParameterType.Query);
                var ignorableprops = Parameters.ValueOf<List<string>>(parameters, Context.Request, "ignorableprops", ParameterType.Query);
                var ignorablenodes = Parameters.ValueOf<List<string>>(parameters, Context.Request, "ignorablenodes", ParameterType.Query);
                var enabled = Parameters.ValueOf<bool?>(parameters, Context.Request, "enabled", ParameterType.Query);
                var distfolders = Parameters.ValueOf<List<string>>(parameters, Context.Request, "distfolders", ParameterType.Query);
                return service.ComAdobeCqSocialSyncImplUserSyncListenerImpl(Context, post, apply, delete, action, location, propertylist, nodetypes, ignorableprops, ignorablenodes, enabled, distfolders);
            };

            Post["/system/console/configMgr/com.adobe.cq.social.translation.impl.TranslationServiceConfigManager"] = parameters =>
            {
                var post = Parameters.ValueOf<bool?>(parameters, Context.Request, "post", ParameterType.Query);
                var apply = Parameters.ValueOf<bool?>(parameters, Context.Request, "apply", ParameterType.Query);
                var delete = Parameters.ValueOf<bool?>(parameters, Context.Request, "delete", ParameterType.Query);
                var action = Parameters.ValueOf<string>(parameters, Context.Request, "action", ParameterType.Query);
                var location = Parameters.ValueOf<string>(parameters, Context.Request, "location", ParameterType.Query);
                var propertylist = Parameters.ValueOf<List<string>>(parameters, Context.Request, "propertylist", ParameterType.Query);
                var translateLanguage = Parameters.ValueOf<string>(parameters, Context.Request, "translateLanguage", ParameterType.Query);
                var translateDisplay = Parameters.ValueOf<string>(parameters, Context.Request, "translateDisplay", ParameterType.Query);
                var translateAttribution = Parameters.ValueOf<bool?>(parameters, Context.Request, "translateAttribution", ParameterType.Query);
                var translateCaching = Parameters.ValueOf<string>(parameters, Context.Request, "translateCaching", ParameterType.Query);
                var translateSmartRendering = Parameters.ValueOf<string>(parameters, Context.Request, "translateSmartRendering", ParameterType.Query);
                var translateCachingDuration = Parameters.ValueOf<string>(parameters, Context.Request, "translateCachingDuration", ParameterType.Query);
                var translateSessionSaveInterval = Parameters.ValueOf<string>(parameters, Context.Request, "translateSessionSaveInterval", ParameterType.Query);
                var translateSessionSaveBatchLimit = Parameters.ValueOf<string>(parameters, Context.Request, "translateSessionSaveBatchLimit", ParameterType.Query);
                return service.ComAdobeCqSocialTranslationImplTranslationServiceConfigManager(Context, post, apply, delete, action, location, propertylist, translateLanguage, translateDisplay, translateAttribution, translateCaching, translateSmartRendering, translateCachingDuration, translateSessionSaveInterval, translateSessionSaveBatchLimit);
            };

            Post["/system/console/configMgr/com.adobe.cq.social.translation.impl.UGCLanguageDetector"] = parameters =>
            {
                var post = Parameters.ValueOf<bool?>(parameters, Context.Request, "post", ParameterType.Query);
                var apply = Parameters.ValueOf<bool?>(parameters, Context.Request, "apply", ParameterType.Query);
                var delete = Parameters.ValueOf<bool?>(parameters, Context.Request, "delete", ParameterType.Query);
                var action = Parameters.ValueOf<string>(parameters, Context.Request, "action", ParameterType.Query);
                var location = Parameters.ValueOf<string>(parameters, Context.Request, "location", ParameterType.Query);
                var propertylist = Parameters.ValueOf<List<string>>(parameters, Context.Request, "propertylist", ParameterType.Query);
                var eventTopics = Parameters.ValueOf<string>(parameters, Context.Request, "eventTopics", ParameterType.Query);
                var eventFilter = Parameters.ValueOf<string>(parameters, Context.Request, "eventFilter", ParameterType.Query);
                var translateListenerType = Parameters.ValueOf<List<string>>(parameters, Context.Request, "translateListenerType", ParameterType.Query);
                var translatePropertyList = Parameters.ValueOf<List<string>>(parameters, Context.Request, "translatePropertyList", ParameterType.Query);
                var poolSize = Parameters.ValueOf<int?>(parameters, Context.Request, "poolSize", ParameterType.Query);
                var maxPoolSize = Parameters.ValueOf<int?>(parameters, Context.Request, "maxPoolSize", ParameterType.Query);
                var queueSize = Parameters.ValueOf<int?>(parameters, Context.Request, "queueSize", ParameterType.Query);
                var keepAliveTime = Parameters.ValueOf<int?>(parameters, Context.Request, "keepAliveTime", ParameterType.Query);
                return service.ComAdobeCqSocialTranslationImplUGCLanguageDetector(Context, post, apply, delete, action, location, propertylist, eventTopics, eventFilter, translateListenerType, translatePropertyList, poolSize, maxPoolSize, queueSize, keepAliveTime);
            };

            Post["/system/console/configMgr/com.adobe.cq.social.ugcbase.dispatcher.impl.FlushServiceImpl"] = parameters =>
            {
                var post = Parameters.ValueOf<bool?>(parameters, Context.Request, "post", ParameterType.Query);
                var apply = Parameters.ValueOf<bool?>(parameters, Context.Request, "apply", ParameterType.Query);
                var delete = Parameters.ValueOf<bool?>(parameters, Context.Request, "delete", ParameterType.Query);
                var action = Parameters.ValueOf<string>(parameters, Context.Request, "action", ParameterType.Query);
                var location = Parameters.ValueOf<string>(parameters, Context.Request, "location", ParameterType.Query);
                var propertylist = Parameters.ValueOf<List<string>>(parameters, Context.Request, "propertylist", ParameterType.Query);
                var threadPoolSize = Parameters.ValueOf<int?>(parameters, Context.Request, "threadPoolSize", ParameterType.Query);
                var delayTime = Parameters.ValueOf<int?>(parameters, Context.Request, "delayTime", ParameterType.Query);
                var workerSleepTime = Parameters.ValueOf<int?>(parameters, Context.Request, "workerSleepTime", ParameterType.Query);
                return service.ComAdobeCqSocialUgcbaseDispatcherImplFlushServiceImpl(Context, post, apply, delete, action, location, propertylist, threadPoolSize, delayTime, workerSleepTime);
            };

            Post["/system/console/configMgr/com.adobe.cq.social.ugcbase.impl.AysncReverseReplicatorImpl"] = parameters =>
            {
                var post = Parameters.ValueOf<bool?>(parameters, Context.Request, "post", ParameterType.Query);
                var apply = Parameters.ValueOf<bool?>(parameters, Context.Request, "apply", ParameterType.Query);
                var delete = Parameters.ValueOf<bool?>(parameters, Context.Request, "delete", ParameterType.Query);
                var action = Parameters.ValueOf<string>(parameters, Context.Request, "action", ParameterType.Query);
                var location = Parameters.ValueOf<string>(parameters, Context.Request, "location", ParameterType.Query);
                var propertylist = Parameters.ValueOf<List<string>>(parameters, Context.Request, "propertylist", ParameterType.Query);
                var poolSize = Parameters.ValueOf<int?>(parameters, Context.Request, "poolSize", ParameterType.Query);
                var maxPoolSize = Parameters.ValueOf<int?>(parameters, Context.Request, "maxPoolSize", ParameterType.Query);
                var queueSize = Parameters.ValueOf<int?>(parameters, Context.Request, "queueSize", ParameterType.Query);
                var keepAliveTime = Parameters.ValueOf<int?>(parameters, Context.Request, "keepAliveTime", ParameterType.Query);
                return service.ComAdobeCqSocialUgcbaseImplAysncReverseReplicatorImpl(Context, post, apply, delete, action, location, propertylist, poolSize, maxPoolSize, queueSize, keepAliveTime);
            };

            Post["/system/console/configMgr/com.adobe.cq.social.ugcbase.impl.PublisherConfigurationImpl"] = parameters =>
            {
                var post = Parameters.ValueOf<bool?>(parameters, Context.Request, "post", ParameterType.Query);
                var apply = Parameters.ValueOf<bool?>(parameters, Context.Request, "apply", ParameterType.Query);
                var delete = Parameters.ValueOf<bool?>(parameters, Context.Request, "delete", ParameterType.Query);
                var action = Parameters.ValueOf<string>(parameters, Context.Request, "action", ParameterType.Query);
                var location = Parameters.ValueOf<string>(parameters, Context.Request, "location", ParameterType.Query);
                var propertylist = Parameters.ValueOf<List<string>>(parameters, Context.Request, "propertylist", ParameterType.Query);
                var isPrimaryPublisher = Parameters.ValueOf<bool?>(parameters, Context.Request, "isPrimaryPublisher", ParameterType.Query);
                return service.ComAdobeCqSocialUgcbaseImplPublisherConfigurationImpl(Context, post, apply, delete, action, location, propertylist, isPrimaryPublisher);
            };

            Post["/system/console/configMgr/com.adobe.cq.social.ugcbase.impl.SocialUtilsImpl"] = parameters =>
            {
                var post = Parameters.ValueOf<bool?>(parameters, Context.Request, "post", ParameterType.Query);
                var apply = Parameters.ValueOf<bool?>(parameters, Context.Request, "apply", ParameterType.Query);
                var delete = Parameters.ValueOf<bool?>(parameters, Context.Request, "delete", ParameterType.Query);
                var action = Parameters.ValueOf<string>(parameters, Context.Request, "action", ParameterType.Query);
                var location = Parameters.ValueOf<string>(parameters, Context.Request, "location", ParameterType.Query);
                var propertylist = Parameters.ValueOf<List<string>>(parameters, Context.Request, "propertylist", ParameterType.Query);
                var legacyCloudUGCPathMapping = Parameters.ValueOf<bool?>(parameters, Context.Request, "legacyCloudUGCPathMapping", ParameterType.Query);
                return service.ComAdobeCqSocialUgcbaseImplSocialUtilsImpl(Context, post, apply, delete, action, location, propertylist, legacyCloudUGCPathMapping);
            };

            Post["/system/console/configMgr/com.adobe.cq.social.ugcbase.moderation.impl.AutoModerationImpl"] = parameters =>
            {
                var post = Parameters.ValueOf<bool?>(parameters, Context.Request, "post", ParameterType.Query);
                var apply = Parameters.ValueOf<bool?>(parameters, Context.Request, "apply", ParameterType.Query);
                var delete = Parameters.ValueOf<bool?>(parameters, Context.Request, "delete", ParameterType.Query);
                var action = Parameters.ValueOf<string>(parameters, Context.Request, "action", ParameterType.Query);
                var location = Parameters.ValueOf<string>(parameters, Context.Request, "location", ParameterType.Query);
                var propertylist = Parameters.ValueOf<List<string>>(parameters, Context.Request, "propertylist", ParameterType.Query);
                var automoderationSequence = Parameters.ValueOf<List<string>>(parameters, Context.Request, "automoderationSequence", ParameterType.Query);
                var automoderationOnfailurestop = Parameters.ValueOf<bool?>(parameters, Context.Request, "automoderationOnfailurestop", ParameterType.Query);
                return service.ComAdobeCqSocialUgcbaseModerationImplAutoModerationImpl(Context, post, apply, delete, action, location, propertylist, automoderationSequence, automoderationOnfailurestop);
            };

            Post["/system/console/configMgr/com.adobe.cq.social.ugcbase.moderation.impl.SentimentProcess"] = parameters =>
            {
                var post = Parameters.ValueOf<bool?>(parameters, Context.Request, "post", ParameterType.Query);
                var apply = Parameters.ValueOf<bool?>(parameters, Context.Request, "apply", ParameterType.Query);
                var delete = Parameters.ValueOf<bool?>(parameters, Context.Request, "delete", ParameterType.Query);
                var action = Parameters.ValueOf<string>(parameters, Context.Request, "action", ParameterType.Query);
                var location = Parameters.ValueOf<string>(parameters, Context.Request, "location", ParameterType.Query);
                var propertylist = Parameters.ValueOf<List<string>>(parameters, Context.Request, "propertylist", ParameterType.Query);
                var watchwordsPositive = Parameters.ValueOf<List<string>>(parameters, Context.Request, "watchwordsPositive", ParameterType.Query);
                var watchwordsNegative = Parameters.ValueOf<List<string>>(parameters, Context.Request, "watchwordsNegative", ParameterType.Query);
                var watchwordsPath = Parameters.ValueOf<string>(parameters, Context.Request, "watchwordsPath", ParameterType.Query);
                var sentimentPath = Parameters.ValueOf<string>(parameters, Context.Request, "sentimentPath", ParameterType.Query);
                return service.ComAdobeCqSocialUgcbaseModerationImplSentimentProcess(Context, post, apply, delete, action, location, propertylist, watchwordsPositive, watchwordsNegative, watchwordsPath, sentimentPath);
            };

            Post["/system/console/configMgr/com.adobe.cq.social.ugcbase.security.impl.DefaultAttachmentTypeBlacklistService"] = parameters =>
            {
                var post = Parameters.ValueOf<bool?>(parameters, Context.Request, "post", ParameterType.Query);
                var apply = Parameters.ValueOf<bool?>(parameters, Context.Request, "apply", ParameterType.Query);
                var delete = Parameters.ValueOf<bool?>(parameters, Context.Request, "delete", ParameterType.Query);
                var action = Parameters.ValueOf<string>(parameters, Context.Request, "action", ParameterType.Query);
                var location = Parameters.ValueOf<string>(parameters, Context.Request, "location", ParameterType.Query);
                var propertylist = Parameters.ValueOf<List<string>>(parameters, Context.Request, "propertylist", ParameterType.Query);
                var defaultAttachmentTypeBlacklist = Parameters.ValueOf<List<string>>(parameters, Context.Request, "defaultAttachmentTypeBlacklist", ParameterType.Query);
                var baselineAttachmentTypeBlacklist = Parameters.ValueOf<List<string>>(parameters, Context.Request, "baselineAttachmentTypeBlacklist", ParameterType.Query);
                return service.ComAdobeCqSocialUgcbaseSecurityImplDefaultAttachmentTypeBlackli(Context, post, apply, delete, action, location, propertylist, defaultAttachmentTypeBlacklist, baselineAttachmentTypeBlacklist);
            };

            Post["/system/console/configMgr/com.adobe.cq.social.ugcbase.security.impl.SaferSlingPostValidatorImpl"] = parameters =>
            {
                var post = Parameters.ValueOf<bool?>(parameters, Context.Request, "post", ParameterType.Query);
                var apply = Parameters.ValueOf<bool?>(parameters, Context.Request, "apply", ParameterType.Query);
                var delete = Parameters.ValueOf<bool?>(parameters, Context.Request, "delete", ParameterType.Query);
                var action = Parameters.ValueOf<string>(parameters, Context.Request, "action", ParameterType.Query);
                var location = Parameters.ValueOf<string>(parameters, Context.Request, "location", ParameterType.Query);
                var propertylist = Parameters.ValueOf<List<string>>(parameters, Context.Request, "propertylist", ParameterType.Query);
                var parameterWhitelist = Parameters.ValueOf<List<string>>(parameters, Context.Request, "parameterWhitelist", ParameterType.Query);
                var parameterWhitelistPrefixes = Parameters.ValueOf<List<string>>(parameters, Context.Request, "parameterWhitelistPrefixes", ParameterType.Query);
                var binaryParameterWhitelist = Parameters.ValueOf<List<string>>(parameters, Context.Request, "binaryParameterWhitelist", ParameterType.Query);
                var modifierWhitelist = Parameters.ValueOf<List<string>>(parameters, Context.Request, "modifierWhitelist", ParameterType.Query);
                var operationWhitelist = Parameters.ValueOf<List<string>>(parameters, Context.Request, "operationWhitelist", ParameterType.Query);
                var operationWhitelistPrefixes = Parameters.ValueOf<List<string>>(parameters, Context.Request, "operationWhitelistPrefixes", ParameterType.Query);
                var typehintWhitelist = Parameters.ValueOf<List<string>>(parameters, Context.Request, "typehintWhitelist", ParameterType.Query);
                var resourcetypeWhitelist = Parameters.ValueOf<List<string>>(parameters, Context.Request, "resourcetypeWhitelist", ParameterType.Query);
                return service.ComAdobeCqSocialUgcbaseSecurityImplSaferSlingPostValidatorImpl(Context, post, apply, delete, action, location, propertylist, parameterWhitelist, parameterWhitelistPrefixes, binaryParameterWhitelist, modifierWhitelist, operationWhitelist, operationWhitelistPrefixes, typehintWhitelist, resourcetypeWhitelist);
            };

            Post["/system/console/configMgr/com.adobe.cq.social.user.endpoints.impl.UsersGroupFromPublishServlet"] = parameters =>
            {
                var post = Parameters.ValueOf<bool?>(parameters, Context.Request, "post", ParameterType.Query);
                var apply = Parameters.ValueOf<bool?>(parameters, Context.Request, "apply", ParameterType.Query);
                var delete = Parameters.ValueOf<bool?>(parameters, Context.Request, "delete", ParameterType.Query);
                var action = Parameters.ValueOf<string>(parameters, Context.Request, "action", ParameterType.Query);
                var location = Parameters.ValueOf<string>(parameters, Context.Request, "location", ParameterType.Query);
                var propertylist = Parameters.ValueOf<List<string>>(parameters, Context.Request, "propertylist", ParameterType.Query);
                var slingServletExtensions = Parameters.ValueOf<string>(parameters, Context.Request, "slingServletExtensions", ParameterType.Query);
                var slingServletPaths = Parameters.ValueOf<string>(parameters, Context.Request, "slingServletPaths", ParameterType.Query);
                var slingServletMethods = Parameters.ValueOf<string>(parameters, Context.Request, "slingServletMethods", ParameterType.Query);
                return service.ComAdobeCqSocialUserEndpointsImplUsersGroupFromPublishServlet(Context, post, apply, delete, action, location, propertylist, slingServletExtensions, slingServletPaths, slingServletMethods);
            };

            Post["/system/console/configMgr/com.adobe.cq.social.user.impl.transport.HttpToPublisher"] = parameters =>
            {
                var post = Parameters.ValueOf<bool?>(parameters, Context.Request, "post", ParameterType.Query);
                var apply = Parameters.ValueOf<bool?>(parameters, Context.Request, "apply", ParameterType.Query);
                var delete = Parameters.ValueOf<bool?>(parameters, Context.Request, "delete", ParameterType.Query);
                var action = Parameters.ValueOf<string>(parameters, Context.Request, "action", ParameterType.Query);
                var location = Parameters.ValueOf<string>(parameters, Context.Request, "location", ParameterType.Query);
                var propertylist = Parameters.ValueOf<List<string>>(parameters, Context.Request, "propertylist", ParameterType.Query);
                var enable = Parameters.ValueOf<bool?>(parameters, Context.Request, "enable", ParameterType.Query);
                var agentConfiguration = Parameters.ValueOf<List<string>>(parameters, Context.Request, "agentConfiguration", ParameterType.Query);
                var contextPath = Parameters.ValueOf<string>(parameters, Context.Request, "contextPath", ParameterType.Query);
                var disabledCipherSuites = Parameters.ValueOf<List<string>>(parameters, Context.Request, "disabledCipherSuites", ParameterType.Query);
                var enabledCipherSuites = Parameters.ValueOf<List<string>>(parameters, Context.Request, "enabledCipherSuites", ParameterType.Query);
                return service.ComAdobeCqSocialUserImplTransportHttpToPublisher(Context, post, apply, delete, action, location, propertylist, enable, agentConfiguration, contextPath, disabledCipherSuites, enabledCipherSuites);
            };

            Post["/system/console/configMgr/com.adobe.cq.ui.wcm.commons.internal.servlets.rte.RTEFilterServletFactory.amended"] = parameters =>
            {
                var post = Parameters.ValueOf<bool?>(parameters, Context.Request, "post", ParameterType.Query);
                var apply = Parameters.ValueOf<bool?>(parameters, Context.Request, "apply", ParameterType.Query);
                var delete = Parameters.ValueOf<bool?>(parameters, Context.Request, "delete", ParameterType.Query);
                var action = Parameters.ValueOf<string>(parameters, Context.Request, "action", ParameterType.Query);
                var location = Parameters.ValueOf<string>(parameters, Context.Request, "location", ParameterType.Query);
                var propertylist = Parameters.ValueOf<List<string>>(parameters, Context.Request, "propertylist", ParameterType.Query);
                var resourceTypes = Parameters.ValueOf<List<string>>(parameters, Context.Request, "resourceTypes", ParameterType.Query);
                return service.ComAdobeCqUiWcmCommonsInternalServletsRteRTEFilterServletFact(Context, post, apply, delete, action, location, propertylist, resourceTypes);
            };

            Post["/system/console/configMgr/com.adobe.cq.upgrades.cleanup.impl.UpgradeContentCleanup"] = parameters =>
            {
                var post = Parameters.ValueOf<bool?>(parameters, Context.Request, "post", ParameterType.Query);
                var apply = Parameters.ValueOf<bool?>(parameters, Context.Request, "apply", ParameterType.Query);
                var delete = Parameters.ValueOf<bool?>(parameters, Context.Request, "delete", ParameterType.Query);
                var action = Parameters.ValueOf<string>(parameters, Context.Request, "action", ParameterType.Query);
                var location = Parameters.ValueOf<string>(parameters, Context.Request, "location", ParameterType.Query);
                var propertylist = Parameters.ValueOf<List<string>>(parameters, Context.Request, "propertylist", ParameterType.Query);
                var deletePathRegexps = Parameters.ValueOf<List<string>>(parameters, Context.Request, "deletePathRegexps", ParameterType.Query);
                var deleteSql2Query = Parameters.ValueOf<string>(parameters, Context.Request, "deleteSql2Query", ParameterType.Query);
                return service.ComAdobeCqUpgradesCleanupImplUpgradeContentCleanup(Context, post, apply, delete, action, location, propertylist, deletePathRegexps, deleteSql2Query);
            };

            Post["/system/console/configMgr/com.adobe.cq.upgrades.cleanup.impl.UpgradeInstallFolderCleanup"] = parameters =>
            {
                var post = Parameters.ValueOf<bool?>(parameters, Context.Request, "post", ParameterType.Query);
                var apply = Parameters.ValueOf<bool?>(parameters, Context.Request, "apply", ParameterType.Query);
                var delete = Parameters.ValueOf<bool?>(parameters, Context.Request, "delete", ParameterType.Query);
                var action = Parameters.ValueOf<string>(parameters, Context.Request, "action", ParameterType.Query);
                var location = Parameters.ValueOf<string>(parameters, Context.Request, "location", ParameterType.Query);
                var propertylist = Parameters.ValueOf<List<string>>(parameters, Context.Request, "propertylist", ParameterType.Query);
                var deleteNameRegexps = Parameters.ValueOf<List<string>>(parameters, Context.Request, "deleteNameRegexps", ParameterType.Query);
                return service.ComAdobeCqUpgradesCleanupImplUpgradeInstallFolderCleanup(Context, post, apply, delete, action, location, propertylist, deleteNameRegexps);
            };

            Post["/system/console/configMgr/com.adobe.cq.wcm.jobs.async.impl.AsyncDeleteConfigProviderService"] = parameters =>
            {
                var post = Parameters.ValueOf<bool?>(parameters, Context.Request, "post", ParameterType.Query);
                var apply = Parameters.ValueOf<bool?>(parameters, Context.Request, "apply", ParameterType.Query);
                var delete = Parameters.ValueOf<bool?>(parameters, Context.Request, "delete", ParameterType.Query);
                var action = Parameters.ValueOf<string>(parameters, Context.Request, "action", ParameterType.Query);
                var location = Parameters.ValueOf<string>(parameters, Context.Request, "location", ParameterType.Query);
                var propertylist = Parameters.ValueOf<List<string>>(parameters, Context.Request, "propertylist", ParameterType.Query);
                var threshold = Parameters.ValueOf<int?>(parameters, Context.Request, "threshold", ParameterType.Query);
                var jobTopicName = Parameters.ValueOf<string>(parameters, Context.Request, "jobTopicName", ParameterType.Query);
                var emailEnabled = Parameters.ValueOf<bool?>(parameters, Context.Request, "emailEnabled", ParameterType.Query);
                return service.ComAdobeCqWcmJobsAsyncImplAsyncDeleteConfigProviderService(Context, post, apply, delete, action, location, propertylist, threshold, jobTopicName, emailEnabled);
            };

            Post["/system/console/configMgr/com.adobe.cq.wcm.jobs.async.impl.AsyncJobCleanUpTask"] = parameters =>
            {
                var post = Parameters.ValueOf<bool?>(parameters, Context.Request, "post", ParameterType.Query);
                var apply = Parameters.ValueOf<bool?>(parameters, Context.Request, "apply", ParameterType.Query);
                var delete = Parameters.ValueOf<bool?>(parameters, Context.Request, "delete", ParameterType.Query);
                var action = Parameters.ValueOf<string>(parameters, Context.Request, "action", ParameterType.Query);
                var location = Parameters.ValueOf<string>(parameters, Context.Request, "location", ParameterType.Query);
                var propertylist = Parameters.ValueOf<List<string>>(parameters, Context.Request, "propertylist", ParameterType.Query);
                var schedulerExpression = Parameters.ValueOf<string>(parameters, Context.Request, "schedulerExpression", ParameterType.Query);
                var jobPurgeThreshold = Parameters.ValueOf<int?>(parameters, Context.Request, "jobPurgeThreshold", ParameterType.Query);
                var jobPurgeMaxJobs = Parameters.ValueOf<int?>(parameters, Context.Request, "jobPurgeMaxJobs", ParameterType.Query);
                return service.ComAdobeCqWcmJobsAsyncImplAsyncJobCleanUpTask(Context, post, apply, delete, action, location, propertylist, schedulerExpression, jobPurgeThreshold, jobPurgeMaxJobs);
            };

            Post["/system/console/configMgr/com.adobe.cq.wcm.jobs.async.impl.AsyncMoveConfigProviderService"] = parameters =>
            {
                var post = Parameters.ValueOf<bool?>(parameters, Context.Request, "post", ParameterType.Query);
                var apply = Parameters.ValueOf<bool?>(parameters, Context.Request, "apply", ParameterType.Query);
                var delete = Parameters.ValueOf<bool?>(parameters, Context.Request, "delete", ParameterType.Query);
                var action = Parameters.ValueOf<string>(parameters, Context.Request, "action", ParameterType.Query);
                var location = Parameters.ValueOf<string>(parameters, Context.Request, "location", ParameterType.Query);
                var propertylist = Parameters.ValueOf<List<string>>(parameters, Context.Request, "propertylist", ParameterType.Query);
                var threshold = Parameters.ValueOf<int?>(parameters, Context.Request, "threshold", ParameterType.Query);
                var jobTopicName = Parameters.ValueOf<string>(parameters, Context.Request, "jobTopicName", ParameterType.Query);
                var emailEnabled = Parameters.ValueOf<bool?>(parameters, Context.Request, "emailEnabled", ParameterType.Query);
                return service.ComAdobeCqWcmJobsAsyncImplAsyncMoveConfigProviderService(Context, post, apply, delete, action, location, propertylist, threshold, jobTopicName, emailEnabled);
            };

            Post["/system/console/configMgr/com.adobe.cq.wcm.jobs.async.impl.AsyncPageMoveConfigProviderService"] = parameters =>
            {
                var post = Parameters.ValueOf<bool?>(parameters, Context.Request, "post", ParameterType.Query);
                var apply = Parameters.ValueOf<bool?>(parameters, Context.Request, "apply", ParameterType.Query);
                var delete = Parameters.ValueOf<bool?>(parameters, Context.Request, "delete", ParameterType.Query);
                var action = Parameters.ValueOf<string>(parameters, Context.Request, "action", ParameterType.Query);
                var location = Parameters.ValueOf<string>(parameters, Context.Request, "location", ParameterType.Query);
                var propertylist = Parameters.ValueOf<List<string>>(parameters, Context.Request, "propertylist", ParameterType.Query);
                var threshold = Parameters.ValueOf<int?>(parameters, Context.Request, "threshold", ParameterType.Query);
                var jobTopicName = Parameters.ValueOf<string>(parameters, Context.Request, "jobTopicName", ParameterType.Query);
                var emailEnabled = Parameters.ValueOf<bool?>(parameters, Context.Request, "emailEnabled", ParameterType.Query);
                return service.ComAdobeCqWcmJobsAsyncImplAsyncPageMoveConfigProviderService(Context, post, apply, delete, action, location, propertylist, threshold, jobTopicName, emailEnabled);
            };

            Post["/system/console/configMgr/com.adobe.cq.wcm.launches.impl.LaunchesEventHandler"] = parameters =>
            {
                var post = Parameters.ValueOf<bool?>(parameters, Context.Request, "post", ParameterType.Query);
                var apply = Parameters.ValueOf<bool?>(parameters, Context.Request, "apply", ParameterType.Query);
                var delete = Parameters.ValueOf<bool?>(parameters, Context.Request, "delete", ParameterType.Query);
                var action = Parameters.ValueOf<string>(parameters, Context.Request, "action", ParameterType.Query);
                var location = Parameters.ValueOf<string>(parameters, Context.Request, "location", ParameterType.Query);
                var propertylist = Parameters.ValueOf<List<string>>(parameters, Context.Request, "propertylist", ParameterType.Query);
                var eventFilter = Parameters.ValueOf<string>(parameters, Context.Request, "eventFilter", ParameterType.Query);
                var launchesEventhandlerThreadpoolMaxsize = Parameters.ValueOf<int?>(parameters, Context.Request, "launchesEventhandlerThreadpoolMaxsize", ParameterType.Query);
                var launchesEventhandlerThreadpoolPriority = Parameters.ValueOf<string>(parameters, Context.Request, "launchesEventhandlerThreadpoolPriority", ParameterType.Query);
                var launchesEventhandlerUpdatelastmodification = Parameters.ValueOf<bool?>(parameters, Context.Request, "launchesEventhandlerUpdatelastmodification", ParameterType.Query);
                return service.ComAdobeCqWcmLaunchesImplLaunchesEventHandler(Context, post, apply, delete, action, location, propertylist, eventFilter, launchesEventhandlerThreadpoolMaxsize, launchesEventhandlerThreadpoolPriority, launchesEventhandlerUpdatelastmodification);
            };

            Post["/system/console/configMgr/com.adobe.cq.wcm.mobile.qrcode.servlet.QRCodeImageGenerator"] = parameters =>
            {
                var post = Parameters.ValueOf<bool?>(parameters, Context.Request, "post", ParameterType.Query);
                var apply = Parameters.ValueOf<bool?>(parameters, Context.Request, "apply", ParameterType.Query);
                var delete = Parameters.ValueOf<bool?>(parameters, Context.Request, "delete", ParameterType.Query);
                var action = Parameters.ValueOf<string>(parameters, Context.Request, "action", ParameterType.Query);
                var location = Parameters.ValueOf<string>(parameters, Context.Request, "location", ParameterType.Query);
                var propertylist = Parameters.ValueOf<List<string>>(parameters, Context.Request, "propertylist", ParameterType.Query);
                var cqWcmQrcodeServletWhitelist = Parameters.ValueOf<List<string>>(parameters, Context.Request, "cqWcmQrcodeServletWhitelist", ParameterType.Query);
                return service.ComAdobeCqWcmMobileQrcodeServletQRCodeImageGenerator(Context, post, apply, delete, action, location, propertylist, cqWcmQrcodeServletWhitelist);
            };

            Post["/system/console/configMgr/com.adobe.cq.wcm.style.internal.ComponentStyleInfoCacheImpl"] = parameters =>
            {
                var post = Parameters.ValueOf<bool?>(parameters, Context.Request, "post", ParameterType.Query);
                var apply = Parameters.ValueOf<bool?>(parameters, Context.Request, "apply", ParameterType.Query);
                var delete = Parameters.ValueOf<bool?>(parameters, Context.Request, "delete", ParameterType.Query);
                var action = Parameters.ValueOf<string>(parameters, Context.Request, "action", ParameterType.Query);
                var location = Parameters.ValueOf<string>(parameters, Context.Request, "location", ParameterType.Query);
                var propertylist = Parameters.ValueOf<List<string>>(parameters, Context.Request, "propertylist", ParameterType.Query);
                var size = Parameters.ValueOf<int?>(parameters, Context.Request, "size", ParameterType.Query);
                return service.ComAdobeCqWcmStyleInternalComponentStyleInfoCacheImpl(Context, post, apply, delete, action, location, propertylist, size);
            };

            Post["/system/console/configMgr/com.adobe.cq.wcm.translation.impl.TranslationPlatformConfigurationImpl"] = parameters =>
            {
                var post = Parameters.ValueOf<bool?>(parameters, Context.Request, "post", ParameterType.Query);
                var apply = Parameters.ValueOf<bool?>(parameters, Context.Request, "apply", ParameterType.Query);
                var delete = Parameters.ValueOf<bool?>(parameters, Context.Request, "delete", ParameterType.Query);
                var action = Parameters.ValueOf<string>(parameters, Context.Request, "action", ParameterType.Query);
                var location = Parameters.ValueOf<string>(parameters, Context.Request, "location", ParameterType.Query);
                var propertylist = Parameters.ValueOf<List<string>>(parameters, Context.Request, "propertylist", ParameterType.Query);
                var syncTranslationStateSchedulingFormat = Parameters.ValueOf<string>(parameters, Context.Request, "syncTranslationStateSchedulingFormat", ParameterType.Query);
                var schedulingRepeatTranslationSchedulingFormat = Parameters.ValueOf<string>(parameters, Context.Request, "schedulingRepeatTranslationSchedulingFormat", ParameterType.Query);
                var syncTranslationStateLockTimeoutInMinutes = Parameters.ValueOf<string>(parameters, Context.Request, "syncTranslationStateLockTimeoutInMinutes", ParameterType.Query);
                var exportFormat = Parameters.ValueOf<string>(parameters, Context.Request, "exportFormat", ParameterType.Query);
                return service.ComAdobeCqWcmTranslationImplTranslationPlatformConfigurationImpl(Context, post, apply, delete, action, location, propertylist, syncTranslationStateSchedulingFormat, schedulingRepeatTranslationSchedulingFormat, syncTranslationStateLockTimeoutInMinutes, exportFormat);
            };

            Post["/system/console/configMgr/com.adobe.fd.fp.config.FormsPortalDraftsandSubmissionConfigService"] = parameters =>
            {
                var post = Parameters.ValueOf<bool?>(parameters, Context.Request, "post", ParameterType.Query);
                var apply = Parameters.ValueOf<bool?>(parameters, Context.Request, "apply", ParameterType.Query);
                var delete = Parameters.ValueOf<bool?>(parameters, Context.Request, "delete", ParameterType.Query);
                var action = Parameters.ValueOf<string>(parameters, Context.Request, "action", ParameterType.Query);
                var location = Parameters.ValueOf<string>(parameters, Context.Request, "location", ParameterType.Query);
                var propertylist = Parameters.ValueOf<List<string>>(parameters, Context.Request, "propertylist", ParameterType.Query);
                var portalOutboxes = Parameters.ValueOf<List<string>>(parameters, Context.Request, "portalOutboxes", ParameterType.Query);
                var draftDataService = Parameters.ValueOf<string>(parameters, Context.Request, "draftDataService", ParameterType.Query);
                var draftMetadataService = Parameters.ValueOf<string>(parameters, Context.Request, "draftMetadataService", ParameterType.Query);
                var submitDataService = Parameters.ValueOf<string>(parameters, Context.Request, "submitDataService", ParameterType.Query);
                var submitMetadataService = Parameters.ValueOf<string>(parameters, Context.Request, "submitMetadataService", ParameterType.Query);
                var pendingSignDataService = Parameters.ValueOf<string>(parameters, Context.Request, "pendingSignDataService", ParameterType.Query);
                var pendingSignMetadataService = Parameters.ValueOf<string>(parameters, Context.Request, "pendingSignMetadataService", ParameterType.Query);
                return service.ComAdobeFdFpConfigFormsPortalDraftsandSubmissionConfigService(Context, post, apply, delete, action, location, propertylist, portalOutboxes, draftDataService, draftMetadataService, submitDataService, submitMetadataService, pendingSignDataService, pendingSignMetadataService);
            };

            Post["/system/console/configMgr/com.adobe.fd.fp.config.FormsPortalSchedulerService"] = parameters =>
            {
                var post = Parameters.ValueOf<bool?>(parameters, Context.Request, "post", ParameterType.Query);
                var apply = Parameters.ValueOf<bool?>(parameters, Context.Request, "apply", ParameterType.Query);
                var delete = Parameters.ValueOf<bool?>(parameters, Context.Request, "delete", ParameterType.Query);
                var action = Parameters.ValueOf<string>(parameters, Context.Request, "action", ParameterType.Query);
                var location = Parameters.ValueOf<string>(parameters, Context.Request, "location", ParameterType.Query);
                var propertylist = Parameters.ValueOf<List<string>>(parameters, Context.Request, "propertylist", ParameterType.Query);
                var formportalInterval = Parameters.ValueOf<string>(parameters, Context.Request, "formportalInterval", ParameterType.Query);
                return service.ComAdobeFdFpConfigFormsPortalSchedulerService(Context, post, apply, delete, action, location, propertylist, formportalInterval);
            };

            Post["/system/console/configMgr/com.adobe.forms.common.service.impl.DefaultDataProvider"] = parameters =>
            {
                var post = Parameters.ValueOf<bool?>(parameters, Context.Request, "post", ParameterType.Query);
                var apply = Parameters.ValueOf<bool?>(parameters, Context.Request, "apply", ParameterType.Query);
                var delete = Parameters.ValueOf<bool?>(parameters, Context.Request, "delete", ParameterType.Query);
                var action = Parameters.ValueOf<string>(parameters, Context.Request, "action", ParameterType.Query);
                var location = Parameters.ValueOf<string>(parameters, Context.Request, "location", ParameterType.Query);
                var propertylist = Parameters.ValueOf<List<string>>(parameters, Context.Request, "propertylist", ParameterType.Query);
                var alloweddataFileLocations = Parameters.ValueOf<List<string>>(parameters, Context.Request, "alloweddataFileLocations", ParameterType.Query);
                return service.ComAdobeFormsCommonServiceImplDefaultDataProvider(Context, post, apply, delete, action, location, propertylist, alloweddataFileLocations);
            };

            Post["/system/console/configMgr/com.adobe.forms.common.service.impl.FormsCommonConfigurationServiceImpl"] = parameters =>
            {
                var post = Parameters.ValueOf<bool?>(parameters, Context.Request, "post", ParameterType.Query);
                var apply = Parameters.ValueOf<bool?>(parameters, Context.Request, "apply", ParameterType.Query);
                var delete = Parameters.ValueOf<bool?>(parameters, Context.Request, "delete", ParameterType.Query);
                var action = Parameters.ValueOf<string>(parameters, Context.Request, "action", ParameterType.Query);
                var location = Parameters.ValueOf<string>(parameters, Context.Request, "location", ParameterType.Query);
                var propertylist = Parameters.ValueOf<List<string>>(parameters, Context.Request, "propertylist", ParameterType.Query);
                var tempStorageConfig = Parameters.ValueOf<string>(parameters, Context.Request, "tempStorageConfig", ParameterType.Query);
                return service.ComAdobeFormsCommonServiceImplFormsCommonConfigurationServiceImp(Context, post, apply, delete, action, location, propertylist, tempStorageConfig);
            };

            Post["/system/console/configMgr/com.adobe.forms.common.servlet.TempCleanUpTask"] = parameters =>
            {
                var post = Parameters.ValueOf<bool?>(parameters, Context.Request, "post", ParameterType.Query);
                var apply = Parameters.ValueOf<bool?>(parameters, Context.Request, "apply", ParameterType.Query);
                var delete = Parameters.ValueOf<bool?>(parameters, Context.Request, "delete", ParameterType.Query);
                var action = Parameters.ValueOf<string>(parameters, Context.Request, "action", ParameterType.Query);
                var location = Parameters.ValueOf<string>(parameters, Context.Request, "location", ParameterType.Query);
                var propertylist = Parameters.ValueOf<List<string>>(parameters, Context.Request, "propertylist", ParameterType.Query);
                var schedulerExpression = Parameters.ValueOf<string>(parameters, Context.Request, "schedulerExpression", ParameterType.Query);
                var durationForTemporaryStorage = Parameters.ValueOf<string>(parameters, Context.Request, "durationForTemporaryStorage", ParameterType.Query);
                var durationForAnonymousStorage = Parameters.ValueOf<string>(parameters, Context.Request, "durationForAnonymousStorage", ParameterType.Query);
                return service.ComAdobeFormsCommonServletTempCleanUpTask(Context, post, apply, delete, action, location, propertylist, schedulerExpression, durationForTemporaryStorage, durationForAnonymousStorage);
            };

            Post["/system/console/configMgr/com.adobe.granite.acp.platform.PlatformServlet"] = parameters =>
            {
                var post = Parameters.ValueOf<bool?>(parameters, Context.Request, "post", ParameterType.Query);
                var apply = Parameters.ValueOf<bool?>(parameters, Context.Request, "apply", ParameterType.Query);
                var delete = Parameters.ValueOf<bool?>(parameters, Context.Request, "delete", ParameterType.Query);
                var action = Parameters.ValueOf<string>(parameters, Context.Request, "action", ParameterType.Query);
                var location = Parameters.ValueOf<string>(parameters, Context.Request, "location", ParameterType.Query);
                var propertylist = Parameters.ValueOf<List<string>>(parameters, Context.Request, "propertylist", ParameterType.Query);
                var queryLimit = Parameters.ValueOf<int?>(parameters, Context.Request, "queryLimit", ParameterType.Query);
                var fileTypeExtensionMap = Parameters.ValueOf<List<string>>(parameters, Context.Request, "fileTypeExtensionMap", ParameterType.Query);
                return service.ComAdobeGraniteAcpPlatformPlatformServlet(Context, post, apply, delete, action, location, propertylist, queryLimit, fileTypeExtensionMap);
            };

            Post["/system/console/configMgr/com.adobe.granite.activitystreams.impl.ActivityManagerImpl"] = parameters =>
            {
                var post = Parameters.ValueOf<bool?>(parameters, Context.Request, "post", ParameterType.Query);
                var apply = Parameters.ValueOf<bool?>(parameters, Context.Request, "apply", ParameterType.Query);
                var delete = Parameters.ValueOf<bool?>(parameters, Context.Request, "delete", ParameterType.Query);
                var action = Parameters.ValueOf<string>(parameters, Context.Request, "action", ParameterType.Query);
                var location = Parameters.ValueOf<string>(parameters, Context.Request, "location", ParameterType.Query);
                var propertylist = Parameters.ValueOf<List<string>>(parameters, Context.Request, "propertylist", ParameterType.Query);
                var aggregateRelationships = Parameters.ValueOf<List<string>>(parameters, Context.Request, "aggregateRelationships", ParameterType.Query);
                var aggregateDescendVirtual = Parameters.ValueOf<bool?>(parameters, Context.Request, "aggregateDescendVirtual", ParameterType.Query);
                return service.ComAdobeGraniteActivitystreamsImplActivityManagerImpl(Context, post, apply, delete, action, location, propertylist, aggregateRelationships, aggregateDescendVirtual);
            };

            Post["/system/console/configMgr/com.adobe.granite.analyzer.base.SystemStatusServlet"] = parameters =>
            {
                var post = Parameters.ValueOf<bool?>(parameters, Context.Request, "post", ParameterType.Query);
                var apply = Parameters.ValueOf<bool?>(parameters, Context.Request, "apply", ParameterType.Query);
                var delete = Parameters.ValueOf<bool?>(parameters, Context.Request, "delete", ParameterType.Query);
                var action = Parameters.ValueOf<string>(parameters, Context.Request, "action", ParameterType.Query);
                var location = Parameters.ValueOf<string>(parameters, Context.Request, "location", ParameterType.Query);
                var propertylist = Parameters.ValueOf<List<string>>(parameters, Context.Request, "propertylist", ParameterType.Query);
                var disabled = Parameters.ValueOf<bool?>(parameters, Context.Request, "disabled", ParameterType.Query);
                return service.ComAdobeGraniteAnalyzerBaseSystemStatusServlet(Context, post, apply, delete, action, location, propertylist, disabled);
            };

            Post["/system/console/configMgr/com.adobe.granite.analyzer.scripts.compile.AllScriptsCompilerServlet"] = parameters =>
            {
                var post = Parameters.ValueOf<bool?>(parameters, Context.Request, "post", ParameterType.Query);
                var apply = Parameters.ValueOf<bool?>(parameters, Context.Request, "apply", ParameterType.Query);
                var delete = Parameters.ValueOf<bool?>(parameters, Context.Request, "delete", ParameterType.Query);
                var action = Parameters.ValueOf<string>(parameters, Context.Request, "action", ParameterType.Query);
                var location = Parameters.ValueOf<string>(parameters, Context.Request, "location", ParameterType.Query);
                var propertylist = Parameters.ValueOf<List<string>>(parameters, Context.Request, "propertylist", ParameterType.Query);
                var disabled = Parameters.ValueOf<bool?>(parameters, Context.Request, "disabled", ParameterType.Query);
                return service.ComAdobeGraniteAnalyzerScriptsCompileAllScriptsCompilerServlet(Context, post, apply, delete, action, location, propertylist, disabled);
            };

            Post["/system/console/configMgr/com.adobe.granite.apicontroller.FilterResolverHookFactory"] = parameters =>
            {
                var post = Parameters.ValueOf<bool?>(parameters, Context.Request, "post", ParameterType.Query);
                var apply = Parameters.ValueOf<bool?>(parameters, Context.Request, "apply", ParameterType.Query);
                var delete = Parameters.ValueOf<bool?>(parameters, Context.Request, "delete", ParameterType.Query);
                var action = Parameters.ValueOf<string>(parameters, Context.Request, "action", ParameterType.Query);
                var location = Parameters.ValueOf<string>(parameters, Context.Request, "location", ParameterType.Query);
                var propertylist = Parameters.ValueOf<List<string>>(parameters, Context.Request, "propertylist", ParameterType.Query);
                var comAdobeCqCdnCdnRewriter = Parameters.ValueOf<string>(parameters, Context.Request, "comAdobeCqCdnCdnRewriter", ParameterType.Query);
                var comAdobeCqCloudConfigComponents = Parameters.ValueOf<string>(parameters, Context.Request, "comAdobeCqCloudConfigComponents", ParameterType.Query);
                var comAdobeCqCloudConfigCore = Parameters.ValueOf<string>(parameters, Context.Request, "comAdobeCqCloudConfigCore", ParameterType.Query);
                var comAdobeCqCloudConfigUi = Parameters.ValueOf<string>(parameters, Context.Request, "comAdobeCqCloudConfigUi", ParameterType.Query);
                var comAdobeCqComAdobeCqEditor = Parameters.ValueOf<string>(parameters, Context.Request, "comAdobeCqComAdobeCqEditor", ParameterType.Query);
                var comAdobeCqComAdobeCqProjectsCore = Parameters.ValueOf<string>(parameters, Context.Request, "comAdobeCqComAdobeCqProjectsCore", ParameterType.Query);
                var comAdobeCqComAdobeCqProjectsWcmCore = Parameters.ValueOf<string>(parameters, Context.Request, "comAdobeCqComAdobeCqProjectsWcmCore", ParameterType.Query);
                var comAdobeCqComAdobeCqUiCommons = Parameters.ValueOf<string>(parameters, Context.Request, "comAdobeCqComAdobeCqUiCommons", ParameterType.Query);
                var comAdobeCqComAdobeCqWcmStyle = Parameters.ValueOf<string>(parameters, Context.Request, "comAdobeCqComAdobeCqWcmStyle", ParameterType.Query);
                var comAdobeCqCqActivitymapIntegration = Parameters.ValueOf<string>(parameters, Context.Request, "comAdobeCqCqActivitymapIntegration", ParameterType.Query);
                var comAdobeCqCqContexthubCommons = Parameters.ValueOf<string>(parameters, Context.Request, "comAdobeCqCqContexthubCommons", ParameterType.Query);
                var comAdobeCqCqDtm = Parameters.ValueOf<string>(parameters, Context.Request, "comAdobeCqCqDtm", ParameterType.Query);
                var comAdobeCqCqHealthcheck = Parameters.ValueOf<string>(parameters, Context.Request, "comAdobeCqCqHealthcheck", ParameterType.Query);
                var comAdobeCqCqMultisiteTargeting = Parameters.ValueOf<string>(parameters, Context.Request, "comAdobeCqCqMultisiteTargeting", ParameterType.Query);
                var comAdobeCqCqPreUpgradeCleanup = Parameters.ValueOf<string>(parameters, Context.Request, "comAdobeCqCqPreUpgradeCleanup", ParameterType.Query);
                var comAdobeCqCqProductInfoProvider = Parameters.ValueOf<string>(parameters, Context.Request, "comAdobeCqCqProductInfoProvider", ParameterType.Query);
                var comAdobeCqCqRestSites = Parameters.ValueOf<string>(parameters, Context.Request, "comAdobeCqCqRestSites", ParameterType.Query);
                var comAdobeCqCqSecurityHc = Parameters.ValueOf<string>(parameters, Context.Request, "comAdobeCqCqSecurityHc", ParameterType.Query);
                var comAdobeCqDamCqDamSvgHandler = Parameters.ValueOf<string>(parameters, Context.Request, "comAdobeCqDamCqDamSvgHandler", ParameterType.Query);
                var comAdobeCqDamCqScene7Imaging = Parameters.ValueOf<string>(parameters, Context.Request, "comAdobeCqDamCqScene7Imaging", ParameterType.Query);
                var comAdobeCqDtmReactorCore = Parameters.ValueOf<string>(parameters, Context.Request, "comAdobeCqDtmReactorCore", ParameterType.Query);
                var comAdobeCqDtmReactorUi = Parameters.ValueOf<string>(parameters, Context.Request, "comAdobeCqDtmReactorUi", ParameterType.Query);
                var comAdobeCqExpJspelResolver = Parameters.ValueOf<string>(parameters, Context.Request, "comAdobeCqExpJspelResolver", ParameterType.Query);
                var comAdobeCqInboxCqInbox = Parameters.ValueOf<string>(parameters, Context.Request, "comAdobeCqInboxCqInbox", ParameterType.Query);
                var comAdobeCqJsonSchemaParser = Parameters.ValueOf<string>(parameters, Context.Request, "comAdobeCqJsonSchemaParser", ParameterType.Query);
                var comAdobeCqMediaCqMediaPublishingDpsFpCore = Parameters.ValueOf<string>(parameters, Context.Request, "comAdobeCqMediaCqMediaPublishingDpsFpCore", ParameterType.Query);
                var comAdobeCqMobileCqMobileCaas = Parameters.ValueOf<string>(parameters, Context.Request, "comAdobeCqMobileCqMobileCaas", ParameterType.Query);
                var comAdobeCqMobileCqMobileIndexBuilder = Parameters.ValueOf<string>(parameters, Context.Request, "comAdobeCqMobileCqMobileIndexBuilder", ParameterType.Query);
                var comAdobeCqMobileCqMobilePhonegapBuild = Parameters.ValueOf<string>(parameters, Context.Request, "comAdobeCqMobileCqMobilePhonegapBuild", ParameterType.Query);
                var comAdobeCqMyspell = Parameters.ValueOf<string>(parameters, Context.Request, "comAdobeCqMyspell", ParameterType.Query);
                var comAdobeCqSampleWeRetailCore = Parameters.ValueOf<string>(parameters, Context.Request, "comAdobeCqSampleWeRetailCore", ParameterType.Query);
                var comAdobeCqScreensComAdobeCqScreensDcc = Parameters.ValueOf<string>(parameters, Context.Request, "comAdobeCqScreensComAdobeCqScreensDcc", ParameterType.Query);
                var comAdobeCqScreensComAdobeCqScreensMqCore = Parameters.ValueOf<string>(parameters, Context.Request, "comAdobeCqScreensComAdobeCqScreensMqCore", ParameterType.Query);
                var comAdobeCqSocialCqSocialAsProvider = Parameters.ValueOf<string>(parameters, Context.Request, "comAdobeCqSocialCqSocialAsProvider", ParameterType.Query);
                var comAdobeCqSocialCqSocialBadgingBasicImpl = Parameters.ValueOf<string>(parameters, Context.Request, "comAdobeCqSocialCqSocialBadgingBasicImpl", ParameterType.Query);
                var comAdobeCqSocialCqSocialBadgingImpl = Parameters.ValueOf<string>(parameters, Context.Request, "comAdobeCqSocialCqSocialBadgingImpl", ParameterType.Query);
                var comAdobeCqSocialCqSocialCalendarImpl = Parameters.ValueOf<string>(parameters, Context.Request, "comAdobeCqSocialCqSocialCalendarImpl", ParameterType.Query);
                var comAdobeCqSocialCqSocialContentFragmentsImpl = Parameters.ValueOf<string>(parameters, Context.Request, "comAdobeCqSocialCqSocialContentFragmentsImpl", ParameterType.Query);
                var comAdobeCqSocialCqSocialEnablementImpl = Parameters.ValueOf<string>(parameters, Context.Request, "comAdobeCqSocialCqSocialEnablementImpl", ParameterType.Query);
                var comAdobeCqSocialCqSocialGraphImpl = Parameters.ValueOf<string>(parameters, Context.Request, "comAdobeCqSocialCqSocialGraphImpl", ParameterType.Query);
                var comAdobeCqSocialCqSocialIdeationImpl = Parameters.ValueOf<string>(parameters, Context.Request, "comAdobeCqSocialCqSocialIdeationImpl", ParameterType.Query);
                var comAdobeCqSocialCqSocialJcrProvider = Parameters.ValueOf<string>(parameters, Context.Request, "comAdobeCqSocialCqSocialJcrProvider", ParameterType.Query);
                var comAdobeCqSocialCqSocialMembersImpl = Parameters.ValueOf<string>(parameters, Context.Request, "comAdobeCqSocialCqSocialMembersImpl", ParameterType.Query);
                var comAdobeCqSocialCqSocialMsProvider = Parameters.ValueOf<string>(parameters, Context.Request, "comAdobeCqSocialCqSocialMsProvider", ParameterType.Query);
                var comAdobeCqSocialCqSocialNotificationsChannelsWeb = Parameters.ValueOf<string>(parameters, Context.Request, "comAdobeCqSocialCqSocialNotificationsChannelsWeb", ParameterType.Query);
                var comAdobeCqSocialCqSocialNotificationsImpl = Parameters.ValueOf<string>(parameters, Context.Request, "comAdobeCqSocialCqSocialNotificationsImpl", ParameterType.Query);
                var comAdobeCqSocialCqSocialRdbProvider = Parameters.ValueOf<string>(parameters, Context.Request, "comAdobeCqSocialCqSocialRdbProvider", ParameterType.Query);
                var comAdobeCqSocialCqSocialScfImpl = Parameters.ValueOf<string>(parameters, Context.Request, "comAdobeCqSocialCqSocialScfImpl", ParameterType.Query);
                var comAdobeCqSocialCqSocialScoringBasicImpl = Parameters.ValueOf<string>(parameters, Context.Request, "comAdobeCqSocialCqSocialScoringBasicImpl", ParameterType.Query);
                var comAdobeCqSocialCqSocialScoringImpl = Parameters.ValueOf<string>(parameters, Context.Request, "comAdobeCqSocialCqSocialScoringImpl", ParameterType.Query);
                var comAdobeCqSocialCqSocialServiceusersImpl = Parameters.ValueOf<string>(parameters, Context.Request, "comAdobeCqSocialCqSocialServiceusersImpl", ParameterType.Query);
                var comAdobeCqSocialCqSocialSrpImpl = Parameters.ValueOf<string>(parameters, Context.Request, "comAdobeCqSocialCqSocialSrpImpl", ParameterType.Query);
                var comAdobeCqSocialCqSocialUgcbaseImpl = Parameters.ValueOf<string>(parameters, Context.Request, "comAdobeCqSocialCqSocialUgcbaseImpl", ParameterType.Query);
                var comAdobeDamCqDamCfmImpl = Parameters.ValueOf<string>(parameters, Context.Request, "comAdobeDamCqDamCfmImpl", ParameterType.Query);
                var comAdobeFormsFoundationFormsFoundationBase = Parameters.ValueOf<string>(parameters, Context.Request, "comAdobeFormsFoundationFormsFoundationBase", ParameterType.Query);
                var comAdobeGraniteApicontroller = Parameters.ValueOf<string>(parameters, Context.Request, "comAdobeGraniteApicontroller", ParameterType.Query);
                var comAdobeGraniteAssetCore = Parameters.ValueOf<string>(parameters, Context.Request, "comAdobeGraniteAssetCore", ParameterType.Query);
                var comAdobeGraniteAuthSso = Parameters.ValueOf<string>(parameters, Context.Request, "comAdobeGraniteAuthSso", ParameterType.Query);
                var comAdobeGraniteBundlesHcImpl = Parameters.ValueOf<string>(parameters, Context.Request, "comAdobeGraniteBundlesHcImpl", ParameterType.Query);
                var comAdobeGraniteCompatRouter = Parameters.ValueOf<string>(parameters, Context.Request, "comAdobeGraniteCompatRouter", ParameterType.Query);
                var comAdobeGraniteConf = Parameters.ValueOf<string>(parameters, Context.Request, "comAdobeGraniteConf", ParameterType.Query);
                var comAdobeGraniteConfUiCore = Parameters.ValueOf<string>(parameters, Context.Request, "comAdobeGraniteConfUiCore", ParameterType.Query);
                var comAdobeGraniteCors = Parameters.ValueOf<string>(parameters, Context.Request, "comAdobeGraniteCors", ParameterType.Query);
                var comAdobeGraniteCrxExplorer = Parameters.ValueOf<string>(parameters, Context.Request, "comAdobeGraniteCrxExplorer", ParameterType.Query);
                var comAdobeGraniteCrxdeLite = Parameters.ValueOf<string>(parameters, Context.Request, "comAdobeGraniteCrxdeLite", ParameterType.Query);
                var comAdobeGraniteCryptoConfig = Parameters.ValueOf<string>(parameters, Context.Request, "comAdobeGraniteCryptoConfig", ParameterType.Query);
                var comAdobeGraniteCryptoExtension = Parameters.ValueOf<string>(parameters, Context.Request, "comAdobeGraniteCryptoExtension", ParameterType.Query);
                var comAdobeGraniteCryptoFile = Parameters.ValueOf<string>(parameters, Context.Request, "comAdobeGraniteCryptoFile", ParameterType.Query);
                var comAdobeGraniteCryptoJcr = Parameters.ValueOf<string>(parameters, Context.Request, "comAdobeGraniteCryptoJcr", ParameterType.Query);
                var comAdobeGraniteCsrf = Parameters.ValueOf<string>(parameters, Context.Request, "comAdobeGraniteCsrf", ParameterType.Query);
                var comAdobeGraniteDistributionCore = Parameters.ValueOf<string>(parameters, Context.Request, "comAdobeGraniteDistributionCore", ParameterType.Query);
                var comAdobeGraniteDropwizardMetrics = Parameters.ValueOf<string>(parameters, Context.Request, "comAdobeGraniteDropwizardMetrics", ParameterType.Query);
                var comAdobeGraniteFragsImpl = Parameters.ValueOf<string>(parameters, Context.Request, "comAdobeGraniteFragsImpl", ParameterType.Query);
                var comAdobeGraniteGibson = Parameters.ValueOf<string>(parameters, Context.Request, "comAdobeGraniteGibson", ParameterType.Query);
                var comAdobeGraniteInfocollector = Parameters.ValueOf<string>(parameters, Context.Request, "comAdobeGraniteInfocollector", ParameterType.Query);
                var comAdobeGraniteInstallerFactoryPackages = Parameters.ValueOf<string>(parameters, Context.Request, "comAdobeGraniteInstallerFactoryPackages", ParameterType.Query);
                var comAdobeGraniteJettySsl = Parameters.ValueOf<string>(parameters, Context.Request, "comAdobeGraniteJettySsl", ParameterType.Query);
                var comAdobeGraniteJobsAsync = Parameters.ValueOf<string>(parameters, Context.Request, "comAdobeGraniteJobsAsync", ParameterType.Query);
                var comAdobeGraniteMaintenanceOak = Parameters.ValueOf<string>(parameters, Context.Request, "comAdobeGraniteMaintenanceOak", ParameterType.Query);
                var comAdobeGraniteMonitoringCore = Parameters.ValueOf<string>(parameters, Context.Request, "comAdobeGraniteMonitoringCore", ParameterType.Query);
                var comAdobeGraniteQueries = Parameters.ValueOf<string>(parameters, Context.Request, "comAdobeGraniteQueries", ParameterType.Query);
                var comAdobeGraniteReplicationHcImpl = Parameters.ValueOf<string>(parameters, Context.Request, "comAdobeGraniteReplicationHcImpl", ParameterType.Query);
                var comAdobeGraniteRepositoryChecker = Parameters.ValueOf<string>(parameters, Context.Request, "comAdobeGraniteRepositoryChecker", ParameterType.Query);
                var comAdobeGraniteRepositoryHcImpl = Parameters.ValueOf<string>(parameters, Context.Request, "comAdobeGraniteRepositoryHcImpl", ParameterType.Query);
                var comAdobeGraniteRestAssets = Parameters.ValueOf<string>(parameters, Context.Request, "comAdobeGraniteRestAssets", ParameterType.Query);
                var comAdobeGraniteSecurityUi = Parameters.ValueOf<string>(parameters, Context.Request, "comAdobeGraniteSecurityUi", ParameterType.Query);
                var comAdobeGraniteStartup = Parameters.ValueOf<string>(parameters, Context.Request, "comAdobeGraniteStartup", ParameterType.Query);
                var comAdobeGraniteTagsoup = Parameters.ValueOf<string>(parameters, Context.Request, "comAdobeGraniteTagsoup", ParameterType.Query);
                var comAdobeGraniteTaskmanagementCore = Parameters.ValueOf<string>(parameters, Context.Request, "comAdobeGraniteTaskmanagementCore", ParameterType.Query);
                var comAdobeGraniteTaskmanagementWorkflow = Parameters.ValueOf<string>(parameters, Context.Request, "comAdobeGraniteTaskmanagementWorkflow", ParameterType.Query);
                var comAdobeGraniteUiClientlibsCompilerLess = Parameters.ValueOf<string>(parameters, Context.Request, "comAdobeGraniteUiClientlibsCompilerLess", ParameterType.Query);
                var comAdobeGraniteUiClientlibsProcessorGcc = Parameters.ValueOf<string>(parameters, Context.Request, "comAdobeGraniteUiClientlibsProcessorGcc", ParameterType.Query);
                var comAdobeGraniteWebconsolePlugins = Parameters.ValueOf<string>(parameters, Context.Request, "comAdobeGraniteWebconsolePlugins", ParameterType.Query);
                var comAdobeGraniteWorkflowConsole = Parameters.ValueOf<string>(parameters, Context.Request, "comAdobeGraniteWorkflowConsole", ParameterType.Query);
                var comAdobeXmpWorkerFilesNativeFragmentLinux = Parameters.ValueOf<string>(parameters, Context.Request, "comAdobeXmpWorkerFilesNativeFragmentLinux", ParameterType.Query);
                var comAdobeXmpWorkerFilesNativeFragmentMacosx = Parameters.ValueOf<string>(parameters, Context.Request, "comAdobeXmpWorkerFilesNativeFragmentMacosx", ParameterType.Query);
                var comAdobeXmpWorkerFilesNativeFragmentWin = Parameters.ValueOf<string>(parameters, Context.Request, "comAdobeXmpWorkerFilesNativeFragmentWin", ParameterType.Query);
                var comDayCommonsOsgiWrapperSimpleJndi = Parameters.ValueOf<string>(parameters, Context.Request, "comDayCommonsOsgiWrapperSimpleJndi", ParameterType.Query);
                var comDayCqCqAuthhandler = Parameters.ValueOf<string>(parameters, Context.Request, "comDayCqCqAuthhandler", ParameterType.Query);
                var comDayCqCqCompatConfigupdate = Parameters.ValueOf<string>(parameters, Context.Request, "comDayCqCqCompatConfigupdate", ParameterType.Query);
                var comDayCqCqLicensebranding = Parameters.ValueOf<string>(parameters, Context.Request, "comDayCqCqLicensebranding", ParameterType.Query);
                var comDayCqCqNotifcationImpl = Parameters.ValueOf<string>(parameters, Context.Request, "comDayCqCqNotifcationImpl", ParameterType.Query);
                var comDayCqCqReplicationAudit = Parameters.ValueOf<string>(parameters, Context.Request, "comDayCqCqReplicationAudit", ParameterType.Query);
                var comDayCqCqSearchExt = Parameters.ValueOf<string>(parameters, Context.Request, "comDayCqCqSearchExt", ParameterType.Query);
                var comDayCqDamCqDamAnnotationPrint = Parameters.ValueOf<string>(parameters, Context.Request, "comDayCqDamCqDamAnnotationPrint", ParameterType.Query);
                var comDayCqDamCqDamAssetUsage = Parameters.ValueOf<string>(parameters, Context.Request, "comDayCqDamCqDamAssetUsage", ParameterType.Query);
                var comDayCqDamCqDamS7dam = Parameters.ValueOf<string>(parameters, Context.Request, "comDayCqDamCqDamS7dam", ParameterType.Query);
                var comDayCqDamCqDamSimilaritysearch = Parameters.ValueOf<string>(parameters, Context.Request, "comDayCqDamCqDamSimilaritysearch", ParameterType.Query);
                var comDayCqDamDamWebdavSupport = Parameters.ValueOf<string>(parameters, Context.Request, "comDayCqDamDamWebdavSupport", ParameterType.Query);
                var comDayCqPreUpgradeTasks = Parameters.ValueOf<string>(parameters, Context.Request, "comDayCqPreUpgradeTasks", ParameterType.Query);
                var comDayCqReplicationExtensions = Parameters.ValueOf<string>(parameters, Context.Request, "comDayCqReplicationExtensions", ParameterType.Query);
                var comDayCqWcmCqMsmCore = Parameters.ValueOf<string>(parameters, Context.Request, "comDayCqWcmCqMsmCore", ParameterType.Query);
                var comDayCqWcmCqWcmTranslation = Parameters.ValueOf<string>(parameters, Context.Request, "comDayCqWcmCqWcmTranslation", ParameterType.Query);
                var dayCommonsJrawio = Parameters.ValueOf<string>(parameters, Context.Request, "dayCommonsJrawio", ParameterType.Query);
                var orgApacheAriesJmxWhiteboard = Parameters.ValueOf<string>(parameters, Context.Request, "orgApacheAriesJmxWhiteboard", ParameterType.Query);
                var orgApacheFelixHttpSslfilter = Parameters.ValueOf<string>(parameters, Context.Request, "orgApacheFelixHttpSslfilter", ParameterType.Query);
                var orgApacheFelixOrgApacheFelixThreaddump = Parameters.ValueOf<string>(parameters, Context.Request, "orgApacheFelixOrgApacheFelixThreaddump", ParameterType.Query);
                var orgApacheFelixWebconsolePluginsDs = Parameters.ValueOf<string>(parameters, Context.Request, "orgApacheFelixWebconsolePluginsDs", ParameterType.Query);
                var orgApacheFelixWebconsolePluginsEvent = Parameters.ValueOf<string>(parameters, Context.Request, "orgApacheFelixWebconsolePluginsEvent", ParameterType.Query);
                var orgApacheFelixWebconsolePluginsMemoryusage = Parameters.ValueOf<string>(parameters, Context.Request, "orgApacheFelixWebconsolePluginsMemoryusage", ParameterType.Query);
                var orgApacheFelixWebconsolePluginsPackageadmin = Parameters.ValueOf<string>(parameters, Context.Request, "orgApacheFelixWebconsolePluginsPackageadmin", ParameterType.Query);
                var orgApacheJackrabbitOakAuthLdap = Parameters.ValueOf<string>(parameters, Context.Request, "orgApacheJackrabbitOakAuthLdap", ParameterType.Query);
                var orgApacheJackrabbitOakSegmentTar = Parameters.ValueOf<string>(parameters, Context.Request, "orgApacheJackrabbitOakSegmentTar", ParameterType.Query);
                var orgApacheJackrabbitOakSolrOsgi = Parameters.ValueOf<string>(parameters, Context.Request, "orgApacheJackrabbitOakSolrOsgi", ParameterType.Query);
                var orgApacheSlingBundleresourceImpl = Parameters.ValueOf<string>(parameters, Context.Request, "orgApacheSlingBundleresourceImpl", ParameterType.Query);
                var orgApacheSlingCommonsFsclassloader = Parameters.ValueOf<string>(parameters, Context.Request, "orgApacheSlingCommonsFsclassloader", ParameterType.Query);
                var orgApacheSlingCommonsLogWebconsole = Parameters.ValueOf<string>(parameters, Context.Request, "orgApacheSlingCommonsLogWebconsole", ParameterType.Query);
                var orgApacheSlingDatasource = Parameters.ValueOf<string>(parameters, Context.Request, "orgApacheSlingDatasource", ParameterType.Query);
                var orgApacheSlingDiscoveryBase = Parameters.ValueOf<string>(parameters, Context.Request, "orgApacheSlingDiscoveryBase", ParameterType.Query);
                var orgApacheSlingDiscoveryOak = Parameters.ValueOf<string>(parameters, Context.Request, "orgApacheSlingDiscoveryOak", ParameterType.Query);
                var orgApacheSlingDiscoverySupport = Parameters.ValueOf<string>(parameters, Context.Request, "orgApacheSlingDiscoverySupport", ParameterType.Query);
                var orgApacheSlingDistributionApi = Parameters.ValueOf<string>(parameters, Context.Request, "orgApacheSlingDistributionApi", ParameterType.Query);
                var orgApacheSlingDistributionCore = Parameters.ValueOf<string>(parameters, Context.Request, "orgApacheSlingDistributionCore", ParameterType.Query);
                var orgApacheSlingExtensionsWebconsolesecurityprovider = Parameters.ValueOf<string>(parameters, Context.Request, "orgApacheSlingExtensionsWebconsolesecurityprovider", ParameterType.Query);
                var orgApacheSlingHcWebconsole = Parameters.ValueOf<string>(parameters, Context.Request, "orgApacheSlingHcWebconsole", ParameterType.Query);
                var orgApacheSlingInstallerConsole = Parameters.ValueOf<string>(parameters, Context.Request, "orgApacheSlingInstallerConsole", ParameterType.Query);
                var orgApacheSlingInstallerProviderFile = Parameters.ValueOf<string>(parameters, Context.Request, "orgApacheSlingInstallerProviderFile", ParameterType.Query);
                var orgApacheSlingInstallerProviderJcr = Parameters.ValueOf<string>(parameters, Context.Request, "orgApacheSlingInstallerProviderJcr", ParameterType.Query);
                var orgApacheSlingJcrDavex = Parameters.ValueOf<string>(parameters, Context.Request, "orgApacheSlingJcrDavex", ParameterType.Query);
                var orgApacheSlingJcrResourcesecurity = Parameters.ValueOf<string>(parameters, Context.Request, "orgApacheSlingJcrResourcesecurity", ParameterType.Query);
                var orgApacheSlingJmxProvider = Parameters.ValueOf<string>(parameters, Context.Request, "orgApacheSlingJmxProvider", ParameterType.Query);
                var orgApacheSlingLaunchpadInstaller = Parameters.ValueOf<string>(parameters, Context.Request, "orgApacheSlingLaunchpadInstaller", ParameterType.Query);
                var orgApacheSlingModelsImpl = Parameters.ValueOf<string>(parameters, Context.Request, "orgApacheSlingModelsImpl", ParameterType.Query);
                var orgApacheSlingRepoinitParser = Parameters.ValueOf<string>(parameters, Context.Request, "orgApacheSlingRepoinitParser", ParameterType.Query);
                var orgApacheSlingResourceInventory = Parameters.ValueOf<string>(parameters, Context.Request, "orgApacheSlingResourceInventory", ParameterType.Query);
                var orgApacheSlingResourceresolver = Parameters.ValueOf<string>(parameters, Context.Request, "orgApacheSlingResourceresolver", ParameterType.Query);
                var orgApacheSlingScriptingJavascript = Parameters.ValueOf<string>(parameters, Context.Request, "orgApacheSlingScriptingJavascript", ParameterType.Query);
                var orgApacheSlingScriptingJst = Parameters.ValueOf<string>(parameters, Context.Request, "orgApacheSlingScriptingJst", ParameterType.Query);
                var orgApacheSlingScriptingSightlyJsProvider = Parameters.ValueOf<string>(parameters, Context.Request, "orgApacheSlingScriptingSightlyJsProvider", ParameterType.Query);
                var orgApacheSlingScriptingSightlyModelsProvider = Parameters.ValueOf<string>(parameters, Context.Request, "orgApacheSlingScriptingSightlyModelsProvider", ParameterType.Query);
                var orgApacheSlingSecurity = Parameters.ValueOf<string>(parameters, Context.Request, "orgApacheSlingSecurity", ParameterType.Query);
                var orgApacheSlingServletsCompat = Parameters.ValueOf<string>(parameters, Context.Request, "orgApacheSlingServletsCompat", ParameterType.Query);
                var orgApacheSlingServletsGet = Parameters.ValueOf<string>(parameters, Context.Request, "orgApacheSlingServletsGet", ParameterType.Query);
                var orgApacheSlingStartupfilterDisabler = Parameters.ValueOf<string>(parameters, Context.Request, "orgApacheSlingStartupfilterDisabler", ParameterType.Query);
                var orgApacheSlingTracer = Parameters.ValueOf<string>(parameters, Context.Request, "orgApacheSlingTracer", ParameterType.Query);
                var weRetailClientAppCore = Parameters.ValueOf<string>(parameters, Context.Request, "weRetailClientAppCore", ParameterType.Query);
                return service.ComAdobeGraniteApicontrollerFilterResolverHookFactory(Context, post, apply, delete, action, location, propertylist, comAdobeCqCdnCdnRewriter, comAdobeCqCloudConfigComponents, comAdobeCqCloudConfigCore, comAdobeCqCloudConfigUi, comAdobeCqComAdobeCqEditor, comAdobeCqComAdobeCqProjectsCore, comAdobeCqComAdobeCqProjectsWcmCore, comAdobeCqComAdobeCqUiCommons, comAdobeCqComAdobeCqWcmStyle, comAdobeCqCqActivitymapIntegration, comAdobeCqCqContexthubCommons, comAdobeCqCqDtm, comAdobeCqCqHealthcheck, comAdobeCqCqMultisiteTargeting, comAdobeCqCqPreUpgradeCleanup, comAdobeCqCqProductInfoProvider, comAdobeCqCqRestSites, comAdobeCqCqSecurityHc, comAdobeCqDamCqDamSvgHandler, comAdobeCqDamCqScene7Imaging, comAdobeCqDtmReactorCore, comAdobeCqDtmReactorUi, comAdobeCqExpJspelResolver, comAdobeCqInboxCqInbox, comAdobeCqJsonSchemaParser, comAdobeCqMediaCqMediaPublishingDpsFpCore, comAdobeCqMobileCqMobileCaas, comAdobeCqMobileCqMobileIndexBuilder, comAdobeCqMobileCqMobilePhonegapBuild, comAdobeCqMyspell, comAdobeCqSampleWeRetailCore, comAdobeCqScreensComAdobeCqScreensDcc, comAdobeCqScreensComAdobeCqScreensMqCore, comAdobeCqSocialCqSocialAsProvider, comAdobeCqSocialCqSocialBadgingBasicImpl, comAdobeCqSocialCqSocialBadgingImpl, comAdobeCqSocialCqSocialCalendarImpl, comAdobeCqSocialCqSocialContentFragmentsImpl, comAdobeCqSocialCqSocialEnablementImpl, comAdobeCqSocialCqSocialGraphImpl, comAdobeCqSocialCqSocialIdeationImpl, comAdobeCqSocialCqSocialJcrProvider, comAdobeCqSocialCqSocialMembersImpl, comAdobeCqSocialCqSocialMsProvider, comAdobeCqSocialCqSocialNotificationsChannelsWeb, comAdobeCqSocialCqSocialNotificationsImpl, comAdobeCqSocialCqSocialRdbProvider, comAdobeCqSocialCqSocialScfImpl, comAdobeCqSocialCqSocialScoringBasicImpl, comAdobeCqSocialCqSocialScoringImpl, comAdobeCqSocialCqSocialServiceusersImpl, comAdobeCqSocialCqSocialSrpImpl, comAdobeCqSocialCqSocialUgcbaseImpl, comAdobeDamCqDamCfmImpl, comAdobeFormsFoundationFormsFoundationBase, comAdobeGraniteApicontroller, comAdobeGraniteAssetCore, comAdobeGraniteAuthSso, comAdobeGraniteBundlesHcImpl, comAdobeGraniteCompatRouter, comAdobeGraniteConf, comAdobeGraniteConfUiCore, comAdobeGraniteCors, comAdobeGraniteCrxExplorer, comAdobeGraniteCrxdeLite, comAdobeGraniteCryptoConfig, comAdobeGraniteCryptoExtension, comAdobeGraniteCryptoFile, comAdobeGraniteCryptoJcr, comAdobeGraniteCsrf, comAdobeGraniteDistributionCore, comAdobeGraniteDropwizardMetrics, comAdobeGraniteFragsImpl, comAdobeGraniteGibson, comAdobeGraniteInfocollector, comAdobeGraniteInstallerFactoryPackages, comAdobeGraniteJettySsl, comAdobeGraniteJobsAsync, comAdobeGraniteMaintenanceOak, comAdobeGraniteMonitoringCore, comAdobeGraniteQueries, comAdobeGraniteReplicationHcImpl, comAdobeGraniteRepositoryChecker, comAdobeGraniteRepositoryHcImpl, comAdobeGraniteRestAssets, comAdobeGraniteSecurityUi, comAdobeGraniteStartup, comAdobeGraniteTagsoup, comAdobeGraniteTaskmanagementCore, comAdobeGraniteTaskmanagementWorkflow, comAdobeGraniteUiClientlibsCompilerLess, comAdobeGraniteUiClientlibsProcessorGcc, comAdobeGraniteWebconsolePlugins, comAdobeGraniteWorkflowConsole, comAdobeXmpWorkerFilesNativeFragmentLinux, comAdobeXmpWorkerFilesNativeFragmentMacosx, comAdobeXmpWorkerFilesNativeFragmentWin, comDayCommonsOsgiWrapperSimpleJndi, comDayCqCqAuthhandler, comDayCqCqCompatConfigupdate, comDayCqCqLicensebranding, comDayCqCqNotifcationImpl, comDayCqCqReplicationAudit, comDayCqCqSearchExt, comDayCqDamCqDamAnnotationPrint, comDayCqDamCqDamAssetUsage, comDayCqDamCqDamS7dam, comDayCqDamCqDamSimilaritysearch, comDayCqDamDamWebdavSupport, comDayCqPreUpgradeTasks, comDayCqReplicationExtensions, comDayCqWcmCqMsmCore, comDayCqWcmCqWcmTranslation, dayCommonsJrawio, orgApacheAriesJmxWhiteboard, orgApacheFelixHttpSslfilter, orgApacheFelixOrgApacheFelixThreaddump, orgApacheFelixWebconsolePluginsDs, orgApacheFelixWebconsolePluginsEvent, orgApacheFelixWebconsolePluginsMemoryusage, orgApacheFelixWebconsolePluginsPackageadmin, orgApacheJackrabbitOakAuthLdap, orgApacheJackrabbitOakSegmentTar, orgApacheJackrabbitOakSolrOsgi, orgApacheSlingBundleresourceImpl, orgApacheSlingCommonsFsclassloader, orgApacheSlingCommonsLogWebconsole, orgApacheSlingDatasource, orgApacheSlingDiscoveryBase, orgApacheSlingDiscoveryOak, orgApacheSlingDiscoverySupport, orgApacheSlingDistributionApi, orgApacheSlingDistributionCore, orgApacheSlingExtensionsWebconsolesecurityprovider, orgApacheSlingHcWebconsole, orgApacheSlingInstallerConsole, orgApacheSlingInstallerProviderFile, orgApacheSlingInstallerProviderJcr, orgApacheSlingJcrDavex, orgApacheSlingJcrResourcesecurity, orgApacheSlingJmxProvider, orgApacheSlingLaunchpadInstaller, orgApacheSlingModelsImpl, orgApacheSlingRepoinitParser, orgApacheSlingResourceInventory, orgApacheSlingResourceresolver, orgApacheSlingScriptingJavascript, orgApacheSlingScriptingJst, orgApacheSlingScriptingSightlyJsProvider, orgApacheSlingScriptingSightlyModelsProvider, orgApacheSlingSecurity, orgApacheSlingServletsCompat, orgApacheSlingServletsGet, orgApacheSlingStartupfilterDisabler, orgApacheSlingTracer, weRetailClientAppCore);
            };

            Post["/system/console/configMgr/com.adobe.granite.auth.cert.impl.ClientCertAuthHandler"] = parameters =>
            {
                var post = Parameters.ValueOf<bool?>(parameters, Context.Request, "post", ParameterType.Query);
                var apply = Parameters.ValueOf<bool?>(parameters, Context.Request, "apply", ParameterType.Query);
                var delete = Parameters.ValueOf<bool?>(parameters, Context.Request, "delete", ParameterType.Query);
                var action = Parameters.ValueOf<string>(parameters, Context.Request, "action", ParameterType.Query);
                var location = Parameters.ValueOf<string>(parameters, Context.Request, "location", ParameterType.Query);
                var propertylist = Parameters.ValueOf<List<string>>(parameters, Context.Request, "propertylist", ParameterType.Query);
                var path = Parameters.ValueOf<string>(parameters, Context.Request, "path", ParameterType.Query);
                var serviceRanking = Parameters.ValueOf<int?>(parameters, Context.Request, "serviceRanking", ParameterType.Query);
                return service.ComAdobeGraniteAuthCertImplClientCertAuthHandler(Context, post, apply, delete, action, location, propertylist, path, serviceRanking);
            };

            Post["/system/console/configMgr/com.adobe.granite.auth.ims"] = parameters =>
            {
                var post = Parameters.ValueOf<bool?>(parameters, Context.Request, "post", ParameterType.Query);
                var apply = Parameters.ValueOf<bool?>(parameters, Context.Request, "apply", ParameterType.Query);
                var delete = Parameters.ValueOf<bool?>(parameters, Context.Request, "delete", ParameterType.Query);
                var action = Parameters.ValueOf<string>(parameters, Context.Request, "action", ParameterType.Query);
                var location = Parameters.ValueOf<string>(parameters, Context.Request, "location", ParameterType.Query);
                var propertylist = Parameters.ValueOf<List<string>>(parameters, Context.Request, "propertylist", ParameterType.Query);
                var configid = Parameters.ValueOf<string>(parameters, Context.Request, "configid", ParameterType.Query);
                var scope = Parameters.ValueOf<string>(parameters, Context.Request, "scope", ParameterType.Query);
                return service.ComAdobeGraniteAuthIms(Context, post, apply, delete, action, location, propertylist, configid, scope);
            };

            Post["/system/console/configMgr/com.adobe.granite.auth.ims.impl.ExternalUserIdMappingProviderExtension"] = parameters =>
            {
                var post = Parameters.ValueOf<bool?>(parameters, Context.Request, "post", ParameterType.Query);
                var apply = Parameters.ValueOf<bool?>(parameters, Context.Request, "apply", ParameterType.Query);
                var delete = Parameters.ValueOf<bool?>(parameters, Context.Request, "delete", ParameterType.Query);
                var action = Parameters.ValueOf<string>(parameters, Context.Request, "action", ParameterType.Query);
                var location = Parameters.ValueOf<string>(parameters, Context.Request, "location", ParameterType.Query);
                var propertylist = Parameters.ValueOf<List<string>>(parameters, Context.Request, "propertylist", ParameterType.Query);
                var oauthProviderId = Parameters.ValueOf<string>(parameters, Context.Request, "oauthProviderId", ParameterType.Query);
                return service.ComAdobeGraniteAuthImsImplExternalUserIdMappingProviderExtension(Context, post, apply, delete, action, location, propertylist, oauthProviderId);
            };

            Post["/system/console/configMgr/com.adobe.granite.auth.ims.impl.IMSAccessTokenRequestCustomizerImpl"] = parameters =>
            {
                var post = Parameters.ValueOf<bool?>(parameters, Context.Request, "post", ParameterType.Query);
                var apply = Parameters.ValueOf<bool?>(parameters, Context.Request, "apply", ParameterType.Query);
                var delete = Parameters.ValueOf<bool?>(parameters, Context.Request, "delete", ParameterType.Query);
                var action = Parameters.ValueOf<string>(parameters, Context.Request, "action", ParameterType.Query);
                var location = Parameters.ValueOf<string>(parameters, Context.Request, "location", ParameterType.Query);
                var propertylist = Parameters.ValueOf<List<string>>(parameters, Context.Request, "propertylist", ParameterType.Query);
                var authImsClientSecret = Parameters.ValueOf<string>(parameters, Context.Request, "authImsClientSecret", ParameterType.Query);
                var customizerType = Parameters.ValueOf<string>(parameters, Context.Request, "customizerType", ParameterType.Query);
                return service.ComAdobeGraniteAuthImsImplIMSAccessTokenRequestCustomizerImpl(Context, post, apply, delete, action, location, propertylist, authImsClientSecret, customizerType);
            };

            Post["/system/console/configMgr/com.adobe.granite.auth.ims.impl.IMSInstanceCredentialsValidator"] = parameters =>
            {
                var post = Parameters.ValueOf<bool?>(parameters, Context.Request, "post", ParameterType.Query);
                var apply = Parameters.ValueOf<bool?>(parameters, Context.Request, "apply", ParameterType.Query);
                var delete = Parameters.ValueOf<bool?>(parameters, Context.Request, "delete", ParameterType.Query);
                var action = Parameters.ValueOf<string>(parameters, Context.Request, "action", ParameterType.Query);
                var location = Parameters.ValueOf<string>(parameters, Context.Request, "location", ParameterType.Query);
                var propertylist = Parameters.ValueOf<List<string>>(parameters, Context.Request, "propertylist", ParameterType.Query);
                var oauthProviderId = Parameters.ValueOf<string>(parameters, Context.Request, "oauthProviderId", ParameterType.Query);
                return service.ComAdobeGraniteAuthImsImplIMSInstanceCredentialsValidator(Context, post, apply, delete, action, location, propertylist, oauthProviderId);
            };

            Post["/system/console/configMgr/com.adobe.granite.auth.ims.impl.IMSProviderImpl"] = parameters =>
            {
                var post = Parameters.ValueOf<bool?>(parameters, Context.Request, "post", ParameterType.Query);
                var apply = Parameters.ValueOf<bool?>(parameters, Context.Request, "apply", ParameterType.Query);
                var delete = Parameters.ValueOf<bool?>(parameters, Context.Request, "delete", ParameterType.Query);
                var action = Parameters.ValueOf<string>(parameters, Context.Request, "action", ParameterType.Query);
                var location = Parameters.ValueOf<string>(parameters, Context.Request, "location", ParameterType.Query);
                var propertylist = Parameters.ValueOf<List<string>>(parameters, Context.Request, "propertylist", ParameterType.Query);
                var oauthProviderId = Parameters.ValueOf<string>(parameters, Context.Request, "oauthProviderId", ParameterType.Query);
                var oauthProviderImsAuthorizationUrl = Parameters.ValueOf<string>(parameters, Context.Request, "oauthProviderImsAuthorizationUrl", ParameterType.Query);
                var oauthProviderImsTokenUrl = Parameters.ValueOf<string>(parameters, Context.Request, "oauthProviderImsTokenUrl", ParameterType.Query);
                var oauthProviderImsProfileUrl = Parameters.ValueOf<string>(parameters, Context.Request, "oauthProviderImsProfileUrl", ParameterType.Query);
                var oauthProviderImsExtendedDetailsUrls = Parameters.ValueOf<List<string>>(parameters, Context.Request, "oauthProviderImsExtendedDetailsUrls", ParameterType.Query);
                var oauthProviderImsValidateTokenUrl = Parameters.ValueOf<string>(parameters, Context.Request, "oauthProviderImsValidateTokenUrl", ParameterType.Query);
                var oauthProviderImsSessionProperty = Parameters.ValueOf<string>(parameters, Context.Request, "oauthProviderImsSessionProperty", ParameterType.Query);
                var oauthProviderImsServiceTokenClientId = Parameters.ValueOf<string>(parameters, Context.Request, "oauthProviderImsServiceTokenClientId", ParameterType.Query);
                var oauthProviderImsServiceTokenClientSecret = Parameters.ValueOf<string>(parameters, Context.Request, "oauthProviderImsServiceTokenClientSecret", ParameterType.Query);
                var oauthProviderImsServiceToken = Parameters.ValueOf<string>(parameters, Context.Request, "oauthProviderImsServiceToken", ParameterType.Query);
                var imsOrgRef = Parameters.ValueOf<string>(parameters, Context.Request, "imsOrgRef", ParameterType.Query);
                var imsGroupMapping = Parameters.ValueOf<List<string>>(parameters, Context.Request, "imsGroupMapping", ParameterType.Query);
                var oauthProviderImsOnlyLicenseGroup = Parameters.ValueOf<bool?>(parameters, Context.Request, "oauthProviderImsOnlyLicenseGroup", ParameterType.Query);
                return service.ComAdobeGraniteAuthImsImplIMSProviderImpl(Context, post, apply, delete, action, location, propertylist, oauthProviderId, oauthProviderImsAuthorizationUrl, oauthProviderImsTokenUrl, oauthProviderImsProfileUrl, oauthProviderImsExtendedDetailsUrls, oauthProviderImsValidateTokenUrl, oauthProviderImsSessionProperty, oauthProviderImsServiceTokenClientId, oauthProviderImsServiceTokenClientSecret, oauthProviderImsServiceToken, imsOrgRef, imsGroupMapping, oauthProviderImsOnlyLicenseGroup);
            };

            Post["/system/console/configMgr/com.adobe.granite.auth.ims.impl.ImsConfigProviderImpl"] = parameters =>
            {
                var post = Parameters.ValueOf<bool?>(parameters, Context.Request, "post", ParameterType.Query);
                var apply = Parameters.ValueOf<bool?>(parameters, Context.Request, "apply", ParameterType.Query);
                var delete = Parameters.ValueOf<bool?>(parameters, Context.Request, "delete", ParameterType.Query);
                var action = Parameters.ValueOf<string>(parameters, Context.Request, "action", ParameterType.Query);
                var location = Parameters.ValueOf<string>(parameters, Context.Request, "location", ParameterType.Query);
                var propertylist = Parameters.ValueOf<List<string>>(parameters, Context.Request, "propertylist", ParameterType.Query);
                var oauthConfigmanagerImsConfigid = Parameters.ValueOf<string>(parameters, Context.Request, "oauthConfigmanagerImsConfigid", ParameterType.Query);
                var imsOwningEntity = Parameters.ValueOf<string>(parameters, Context.Request, "imsOwningEntity", ParameterType.Query);
                var aemInstanceId = Parameters.ValueOf<string>(parameters, Context.Request, "aemInstanceId", ParameterType.Query);
                var imsServiceCode = Parameters.ValueOf<string>(parameters, Context.Request, "imsServiceCode", ParameterType.Query);
                return service.ComAdobeGraniteAuthImsImplImsConfigProviderImpl(Context, post, apply, delete, action, location, propertylist, oauthConfigmanagerImsConfigid, imsOwningEntity, aemInstanceId, imsServiceCode);
            };

            Post["/system/console/configMgr/com.adobe.granite.auth.oauth.accesstoken.provider"] = parameters =>
            {
                var post = Parameters.ValueOf<bool?>(parameters, Context.Request, "post", ParameterType.Query);
                var apply = Parameters.ValueOf<bool?>(parameters, Context.Request, "apply", ParameterType.Query);
                var delete = Parameters.ValueOf<bool?>(parameters, Context.Request, "delete", ParameterType.Query);
                var action = Parameters.ValueOf<string>(parameters, Context.Request, "action", ParameterType.Query);
                var location = Parameters.ValueOf<string>(parameters, Context.Request, "location", ParameterType.Query);
                var propertylist = Parameters.ValueOf<List<string>>(parameters, Context.Request, "propertylist", ParameterType.Query);
                var name = Parameters.ValueOf<string>(parameters, Context.Request, "name", ParameterType.Query);
                var authTokenProviderTitle = Parameters.ValueOf<string>(parameters, Context.Request, "authTokenProviderTitle", ParameterType.Query);
                var authTokenProviderDefaultClaims = Parameters.ValueOf<List<string>>(parameters, Context.Request, "authTokenProviderDefaultClaims", ParameterType.Query);
                var authTokenProviderEndpoint = Parameters.ValueOf<string>(parameters, Context.Request, "authTokenProviderEndpoint", ParameterType.Query);
                var authAccessTokenRequest = Parameters.ValueOf<string>(parameters, Context.Request, "authAccessTokenRequest", ParameterType.Query);
                var authTokenProviderKeypairAlias = Parameters.ValueOf<string>(parameters, Context.Request, "authTokenProviderKeypairAlias", ParameterType.Query);
                var authTokenProviderConnTimeout = Parameters.ValueOf<int?>(parameters, Context.Request, "authTokenProviderConnTimeout", ParameterType.Query);
                var authTokenProviderSoTimeout = Parameters.ValueOf<int?>(parameters, Context.Request, "authTokenProviderSoTimeout", ParameterType.Query);
                var authTokenProviderClientId = Parameters.ValueOf<string>(parameters, Context.Request, "authTokenProviderClientId", ParameterType.Query);
                var authTokenProviderScope = Parameters.ValueOf<string>(parameters, Context.Request, "authTokenProviderScope", ParameterType.Query);
                var authTokenProviderReuseAccessToken = Parameters.ValueOf<bool?>(parameters, Context.Request, "authTokenProviderReuseAccessToken", ParameterType.Query);
                var authTokenProviderRelaxedSsl = Parameters.ValueOf<bool?>(parameters, Context.Request, "authTokenProviderRelaxedSsl", ParameterType.Query);
                var tokenRequestCustomizerType = Parameters.ValueOf<string>(parameters, Context.Request, "tokenRequestCustomizerType", ParameterType.Query);
                var authTokenValidatorType = Parameters.ValueOf<string>(parameters, Context.Request, "authTokenValidatorType", ParameterType.Query);
                return service.ComAdobeGraniteAuthOauthAccesstokenProvider(Context, post, apply, delete, action, location, propertylist, name, authTokenProviderTitle, authTokenProviderDefaultClaims, authTokenProviderEndpoint, authAccessTokenRequest, authTokenProviderKeypairAlias, authTokenProviderConnTimeout, authTokenProviderSoTimeout, authTokenProviderClientId, authTokenProviderScope, authTokenProviderReuseAccessToken, authTokenProviderRelaxedSsl, tokenRequestCustomizerType, authTokenValidatorType);
            };

            Post["/system/console/configMgr/com.adobe.granite.auth.oauth.impl.BearerAuthenticationHandler"] = parameters =>
            {
                var post = Parameters.ValueOf<bool?>(parameters, Context.Request, "post", ParameterType.Query);
                var apply = Parameters.ValueOf<bool?>(parameters, Context.Request, "apply", ParameterType.Query);
                var delete = Parameters.ValueOf<bool?>(parameters, Context.Request, "delete", ParameterType.Query);
                var action = Parameters.ValueOf<string>(parameters, Context.Request, "action", ParameterType.Query);
                var location = Parameters.ValueOf<string>(parameters, Context.Request, "location", ParameterType.Query);
                var propertylist = Parameters.ValueOf<List<string>>(parameters, Context.Request, "propertylist", ParameterType.Query);
                var path = Parameters.ValueOf<string>(parameters, Context.Request, "path", ParameterType.Query);
                var oauthClientIdsAllowed = Parameters.ValueOf<List<string>>(parameters, Context.Request, "oauthClientIdsAllowed", ParameterType.Query);
                var authBearerSyncIms = Parameters.ValueOf<bool?>(parameters, Context.Request, "authBearerSyncIms", ParameterType.Query);
                var authTokenRequestParameter = Parameters.ValueOf<string>(parameters, Context.Request, "authTokenRequestParameter", ParameterType.Query);
                var oauthBearerConfigid = Parameters.ValueOf<string>(parameters, Context.Request, "oauthBearerConfigid", ParameterType.Query);
                var oauthJwtSupport = Parameters.ValueOf<bool?>(parameters, Context.Request, "oauthJwtSupport", ParameterType.Query);
                return service.ComAdobeGraniteAuthOauthImplBearerAuthenticationHandler(Context, post, apply, delete, action, location, propertylist, path, oauthClientIdsAllowed, authBearerSyncIms, authTokenRequestParameter, oauthBearerConfigid, oauthJwtSupport);
            };

            Post["/system/console/configMgr/com.adobe.granite.auth.oauth.impl.DefaultTokenValidatorImpl"] = parameters =>
            {
                var post = Parameters.ValueOf<bool?>(parameters, Context.Request, "post", ParameterType.Query);
                var apply = Parameters.ValueOf<bool?>(parameters, Context.Request, "apply", ParameterType.Query);
                var delete = Parameters.ValueOf<bool?>(parameters, Context.Request, "delete", ParameterType.Query);
                var action = Parameters.ValueOf<string>(parameters, Context.Request, "action", ParameterType.Query);
                var location = Parameters.ValueOf<string>(parameters, Context.Request, "location", ParameterType.Query);
                var propertylist = Parameters.ValueOf<List<string>>(parameters, Context.Request, "propertylist", ParameterType.Query);
                var authTokenValidatorType = Parameters.ValueOf<string>(parameters, Context.Request, "authTokenValidatorType", ParameterType.Query);
                return service.ComAdobeGraniteAuthOauthImplDefaultTokenValidatorImpl(Context, post, apply, delete, action, location, propertylist, authTokenValidatorType);
            };

            Post["/system/console/configMgr/com.adobe.granite.auth.oauth.impl.FacebookProviderImpl"] = parameters =>
            {
                var post = Parameters.ValueOf<bool?>(parameters, Context.Request, "post", ParameterType.Query);
                var apply = Parameters.ValueOf<bool?>(parameters, Context.Request, "apply", ParameterType.Query);
                var delete = Parameters.ValueOf<bool?>(parameters, Context.Request, "delete", ParameterType.Query);
                var action = Parameters.ValueOf<string>(parameters, Context.Request, "action", ParameterType.Query);
                var location = Parameters.ValueOf<string>(parameters, Context.Request, "location", ParameterType.Query);
                var propertylist = Parameters.ValueOf<List<string>>(parameters, Context.Request, "propertylist", ParameterType.Query);
                var oauthProviderId = Parameters.ValueOf<string>(parameters, Context.Request, "oauthProviderId", ParameterType.Query);
                return service.ComAdobeGraniteAuthOauthImplFacebookProviderImpl(Context, post, apply, delete, action, location, propertylist, oauthProviderId);
            };

            Post["/system/console/configMgr/com.adobe.granite.auth.oauth.impl.GithubProviderImpl"] = parameters =>
            {
                var post = Parameters.ValueOf<bool?>(parameters, Context.Request, "post", ParameterType.Query);
                var apply = Parameters.ValueOf<bool?>(parameters, Context.Request, "apply", ParameterType.Query);
                var delete = Parameters.ValueOf<bool?>(parameters, Context.Request, "delete", ParameterType.Query);
                var action = Parameters.ValueOf<string>(parameters, Context.Request, "action", ParameterType.Query);
                var location = Parameters.ValueOf<string>(parameters, Context.Request, "location", ParameterType.Query);
                var propertylist = Parameters.ValueOf<List<string>>(parameters, Context.Request, "propertylist", ParameterType.Query);
                var oauthProviderId = Parameters.ValueOf<string>(parameters, Context.Request, "oauthProviderId", ParameterType.Query);
                var oauthProviderGithubAuthorizationUrl = Parameters.ValueOf<string>(parameters, Context.Request, "oauthProviderGithubAuthorizationUrl", ParameterType.Query);
                var oauthProviderGithubTokenUrl = Parameters.ValueOf<string>(parameters, Context.Request, "oauthProviderGithubTokenUrl", ParameterType.Query);
                var oauthProviderGithubProfileUrl = Parameters.ValueOf<string>(parameters, Context.Request, "oauthProviderGithubProfileUrl", ParameterType.Query);
                return service.ComAdobeGraniteAuthOauthImplGithubProviderImpl(Context, post, apply, delete, action, location, propertylist, oauthProviderId, oauthProviderGithubAuthorizationUrl, oauthProviderGithubTokenUrl, oauthProviderGithubProfileUrl);
            };

            Post["/system/console/configMgr/com.adobe.granite.auth.oauth.impl.GraniteProvider"] = parameters =>
            {
                var post = Parameters.ValueOf<bool?>(parameters, Context.Request, "post", ParameterType.Query);
                var apply = Parameters.ValueOf<bool?>(parameters, Context.Request, "apply", ParameterType.Query);
                var delete = Parameters.ValueOf<bool?>(parameters, Context.Request, "delete", ParameterType.Query);
                var action = Parameters.ValueOf<string>(parameters, Context.Request, "action", ParameterType.Query);
                var location = Parameters.ValueOf<string>(parameters, Context.Request, "location", ParameterType.Query);
                var propertylist = Parameters.ValueOf<List<string>>(parameters, Context.Request, "propertylist", ParameterType.Query);
                var oauthProviderId = Parameters.ValueOf<string>(parameters, Context.Request, "oauthProviderId", ParameterType.Query);
                var oauthProviderGraniteAuthorizationUrl = Parameters.ValueOf<string>(parameters, Context.Request, "oauthProviderGraniteAuthorizationUrl", ParameterType.Query);
                var oauthProviderGraniteTokenUrl = Parameters.ValueOf<string>(parameters, Context.Request, "oauthProviderGraniteTokenUrl", ParameterType.Query);
                var oauthProviderGraniteProfileUrl = Parameters.ValueOf<string>(parameters, Context.Request, "oauthProviderGraniteProfileUrl", ParameterType.Query);
                var oauthProviderGraniteExtendedDetailsUrls = Parameters.ValueOf<string>(parameters, Context.Request, "oauthProviderGraniteExtendedDetailsUrls", ParameterType.Query);
                return service.ComAdobeGraniteAuthOauthImplGraniteProvider(Context, post, apply, delete, action, location, propertylist, oauthProviderId, oauthProviderGraniteAuthorizationUrl, oauthProviderGraniteTokenUrl, oauthProviderGraniteProfileUrl, oauthProviderGraniteExtendedDetailsUrls);
            };

            Post["/system/console/configMgr/com.adobe.granite.auth.oauth.impl.helper.ProviderConfigManager"] = parameters =>
            {
                var post = Parameters.ValueOf<bool?>(parameters, Context.Request, "post", ParameterType.Query);
                var apply = Parameters.ValueOf<bool?>(parameters, Context.Request, "apply", ParameterType.Query);
                var delete = Parameters.ValueOf<bool?>(parameters, Context.Request, "delete", ParameterType.Query);
                var action = Parameters.ValueOf<string>(parameters, Context.Request, "action", ParameterType.Query);
                var location = Parameters.ValueOf<string>(parameters, Context.Request, "location", ParameterType.Query);
                var propertylist = Parameters.ValueOf<List<string>>(parameters, Context.Request, "propertylist", ParameterType.Query);
                var oauthCookieLoginTimeout = Parameters.ValueOf<string>(parameters, Context.Request, "oauthCookieLoginTimeout", ParameterType.Query);
                var oauthCookieMaxAge = Parameters.ValueOf<string>(parameters, Context.Request, "oauthCookieMaxAge", ParameterType.Query);
                return service.ComAdobeGraniteAuthOauthImplHelperProviderConfigManager(Context, post, apply, delete, action, location, propertylist, oauthCookieLoginTimeout, oauthCookieMaxAge);
            };

            Post["/system/console/configMgr/com.adobe.granite.auth.oauth.impl.helper.ProviderConfigManagerInternal"] = parameters =>
            {
                var post = Parameters.ValueOf<bool?>(parameters, Context.Request, "post", ParameterType.Query);
                var apply = Parameters.ValueOf<bool?>(parameters, Context.Request, "apply", ParameterType.Query);
                var delete = Parameters.ValueOf<bool?>(parameters, Context.Request, "delete", ParameterType.Query);
                var action = Parameters.ValueOf<string>(parameters, Context.Request, "action", ParameterType.Query);
                var location = Parameters.ValueOf<string>(parameters, Context.Request, "location", ParameterType.Query);
                var propertylist = Parameters.ValueOf<List<string>>(parameters, Context.Request, "propertylist", ParameterType.Query);
                var oauthCookieLoginTimeout = Parameters.ValueOf<string>(parameters, Context.Request, "oauthCookieLoginTimeout", ParameterType.Query);
                var oauthCookieMaxAge = Parameters.ValueOf<string>(parameters, Context.Request, "oauthCookieMaxAge", ParameterType.Query);
                return service.ComAdobeGraniteAuthOauthImplHelperProviderConfigManagerInternal(Context, post, apply, delete, action, location, propertylist, oauthCookieLoginTimeout, oauthCookieMaxAge);
            };

            Post["/system/console/configMgr/com.adobe.granite.auth.oauth.impl.OAuthAuthenticationHandler"] = parameters =>
            {
                var post = Parameters.ValueOf<bool?>(parameters, Context.Request, "post", ParameterType.Query);
                var apply = Parameters.ValueOf<bool?>(parameters, Context.Request, "apply", ParameterType.Query);
                var delete = Parameters.ValueOf<bool?>(parameters, Context.Request, "delete", ParameterType.Query);
                var action = Parameters.ValueOf<string>(parameters, Context.Request, "action", ParameterType.Query);
                var location = Parameters.ValueOf<string>(parameters, Context.Request, "location", ParameterType.Query);
                var propertylist = Parameters.ValueOf<List<string>>(parameters, Context.Request, "propertylist", ParameterType.Query);
                var path = Parameters.ValueOf<string>(parameters, Context.Request, "path", ParameterType.Query);
                return service.ComAdobeGraniteAuthOauthImplOAuthAuthenticationHandler(Context, post, apply, delete, action, location, propertylist, path);
            };

            Post["/system/console/configMgr/com.adobe.granite.auth.oauth.impl.TwitterProviderImpl"] = parameters =>
            {
                var post = Parameters.ValueOf<bool?>(parameters, Context.Request, "post", ParameterType.Query);
                var apply = Parameters.ValueOf<bool?>(parameters, Context.Request, "apply", ParameterType.Query);
                var delete = Parameters.ValueOf<bool?>(parameters, Context.Request, "delete", ParameterType.Query);
                var action = Parameters.ValueOf<string>(parameters, Context.Request, "action", ParameterType.Query);
                var location = Parameters.ValueOf<string>(parameters, Context.Request, "location", ParameterType.Query);
                var propertylist = Parameters.ValueOf<List<string>>(parameters, Context.Request, "propertylist", ParameterType.Query);
                var oauthProviderId = Parameters.ValueOf<string>(parameters, Context.Request, "oauthProviderId", ParameterType.Query);
                return service.ComAdobeGraniteAuthOauthImplTwitterProviderImpl(Context, post, apply, delete, action, location, propertylist, oauthProviderId);
            };

            Post["/system/console/configMgr/com.adobe.granite.auth.oauth.provider"] = parameters =>
            {
                var post = Parameters.ValueOf<bool?>(parameters, Context.Request, "post", ParameterType.Query);
                var apply = Parameters.ValueOf<bool?>(parameters, Context.Request, "apply", ParameterType.Query);
                var delete = Parameters.ValueOf<bool?>(parameters, Context.Request, "delete", ParameterType.Query);
                var action = Parameters.ValueOf<string>(parameters, Context.Request, "action", ParameterType.Query);
                var location = Parameters.ValueOf<string>(parameters, Context.Request, "location", ParameterType.Query);
                var propertylist = Parameters.ValueOf<List<string>>(parameters, Context.Request, "propertylist", ParameterType.Query);
                var oauthConfigId = Parameters.ValueOf<string>(parameters, Context.Request, "oauthConfigId", ParameterType.Query);
                var oauthClientId = Parameters.ValueOf<string>(parameters, Context.Request, "oauthClientId", ParameterType.Query);
                var oauthClientSecret = Parameters.ValueOf<string>(parameters, Context.Request, "oauthClientSecret", ParameterType.Query);
                var oauthScope = Parameters.ValueOf<List<string>>(parameters, Context.Request, "oauthScope", ParameterType.Query);
                var oauthConfigProviderId = Parameters.ValueOf<string>(parameters, Context.Request, "oauthConfigProviderId", ParameterType.Query);
                var oauthCreateUsers = Parameters.ValueOf<bool?>(parameters, Context.Request, "oauthCreateUsers", ParameterType.Query);
                var oauthUseridProperty = Parameters.ValueOf<string>(parameters, Context.Request, "oauthUseridProperty", ParameterType.Query);
                var forceStrictUsernameMatching = Parameters.ValueOf<bool?>(parameters, Context.Request, "forceStrictUsernameMatching", ParameterType.Query);
                var oauthEncodeUserids = Parameters.ValueOf<bool?>(parameters, Context.Request, "oauthEncodeUserids", ParameterType.Query);
                var oauthHashUserids = Parameters.ValueOf<bool?>(parameters, Context.Request, "oauthHashUserids", ParameterType.Query);
                var oauthCallBackUrl = Parameters.ValueOf<string>(parameters, Context.Request, "oauthCallBackUrl", ParameterType.Query);
                var oauthAccessTokenPersist = Parameters.ValueOf<bool?>(parameters, Context.Request, "oauthAccessTokenPersist", ParameterType.Query);
                var oauthAccessTokenPersistCookie = Parameters.ValueOf<bool?>(parameters, Context.Request, "oauthAccessTokenPersistCookie", ParameterType.Query);
                var oauthCsrfStateProtection = Parameters.ValueOf<bool?>(parameters, Context.Request, "oauthCsrfStateProtection", ParameterType.Query);
                var oauthRedirectRequestParams = Parameters.ValueOf<bool?>(parameters, Context.Request, "oauthRedirectRequestParams", ParameterType.Query);
                var oauthConfigSiblingsAllow = Parameters.ValueOf<bool?>(parameters, Context.Request, "oauthConfigSiblingsAllow", ParameterType.Query);
                return service.ComAdobeGraniteAuthOauthProvider(Context, post, apply, delete, action, location, propertylist, oauthConfigId, oauthClientId, oauthClientSecret, oauthScope, oauthConfigProviderId, oauthCreateUsers, oauthUseridProperty, forceStrictUsernameMatching, oauthEncodeUserids, oauthHashUserids, oauthCallBackUrl, oauthAccessTokenPersist, oauthAccessTokenPersistCookie, oauthCsrfStateProtection, oauthRedirectRequestParams, oauthConfigSiblingsAllow);
            };

            Post["/system/console/configMgr/com.adobe.granite.auth.requirement.impl.DefaultRequirementHandler"] = parameters =>
            {
                var post = Parameters.ValueOf<bool?>(parameters, Context.Request, "post", ParameterType.Query);
                var apply = Parameters.ValueOf<bool?>(parameters, Context.Request, "apply", ParameterType.Query);
                var delete = Parameters.ValueOf<bool?>(parameters, Context.Request, "delete", ParameterType.Query);
                var action = Parameters.ValueOf<string>(parameters, Context.Request, "action", ParameterType.Query);
                var location = Parameters.ValueOf<string>(parameters, Context.Request, "location", ParameterType.Query);
                var propertylist = Parameters.ValueOf<List<string>>(parameters, Context.Request, "propertylist", ParameterType.Query);
                var supportedPaths = Parameters.ValueOf<List<string>>(parameters, Context.Request, "supportedPaths", ParameterType.Query);
                return service.ComAdobeGraniteAuthRequirementImplDefaultRequirementHandler(Context, post, apply, delete, action, location, propertylist, supportedPaths);
            };

            Post["/system/console/configMgr/com.adobe.granite.auth.saml.SamlAuthenticationHandler"] = parameters =>
            {
                var post = Parameters.ValueOf<bool?>(parameters, Context.Request, "post", ParameterType.Query);
                var apply = Parameters.ValueOf<bool?>(parameters, Context.Request, "apply", ParameterType.Query);
                var delete = Parameters.ValueOf<bool?>(parameters, Context.Request, "delete", ParameterType.Query);
                var action = Parameters.ValueOf<string>(parameters, Context.Request, "action", ParameterType.Query);
                var location = Parameters.ValueOf<string>(parameters, Context.Request, "location", ParameterType.Query);
                var propertylist = Parameters.ValueOf<List<string>>(parameters, Context.Request, "propertylist", ParameterType.Query);
                var path = Parameters.ValueOf<List<string>>(parameters, Context.Request, "path", ParameterType.Query);
                var serviceRanking = Parameters.ValueOf<int?>(parameters, Context.Request, "serviceRanking", ParameterType.Query);
                var idpUrl = Parameters.ValueOf<string>(parameters, Context.Request, "idpUrl", ParameterType.Query);
                var idpCertAlias = Parameters.ValueOf<string>(parameters, Context.Request, "idpCertAlias", ParameterType.Query);
                var idpHttpRedirect = Parameters.ValueOf<bool?>(parameters, Context.Request, "idpHttpRedirect", ParameterType.Query);
                var serviceProviderEntityId = Parameters.ValueOf<string>(parameters, Context.Request, "serviceProviderEntityId", ParameterType.Query);
                var assertionConsumerServiceURL = Parameters.ValueOf<string>(parameters, Context.Request, "assertionConsumerServiceURL", ParameterType.Query);
                var spPrivateKeyAlias = Parameters.ValueOf<string>(parameters, Context.Request, "spPrivateKeyAlias", ParameterType.Query);
                var keyStorePassword = Parameters.ValueOf<string>(parameters, Context.Request, "keyStorePassword", ParameterType.Query);
                var defaultRedirectUrl = Parameters.ValueOf<string>(parameters, Context.Request, "defaultRedirectUrl", ParameterType.Query);
                var userIDAttribute = Parameters.ValueOf<string>(parameters, Context.Request, "userIDAttribute", ParameterType.Query);
                var useEncryption = Parameters.ValueOf<bool?>(parameters, Context.Request, "useEncryption", ParameterType.Query);
                var createUser = Parameters.ValueOf<bool?>(parameters, Context.Request, "createUser", ParameterType.Query);
                var userIntermediatePath = Parameters.ValueOf<string>(parameters, Context.Request, "userIntermediatePath", ParameterType.Query);
                var addGroupMemberships = Parameters.ValueOf<bool?>(parameters, Context.Request, "addGroupMemberships", ParameterType.Query);
                var groupMembershipAttribute = Parameters.ValueOf<string>(parameters, Context.Request, "groupMembershipAttribute", ParameterType.Query);
                var defaultGroups = Parameters.ValueOf<List<string>>(parameters, Context.Request, "defaultGroups", ParameterType.Query);
                var nameIdFormat = Parameters.ValueOf<string>(parameters, Context.Request, "nameIdFormat", ParameterType.Query);
                var synchronizeAttributes = Parameters.ValueOf<List<string>>(parameters, Context.Request, "synchronizeAttributes", ParameterType.Query);
                var handleLogout = Parameters.ValueOf<bool?>(parameters, Context.Request, "handleLogout", ParameterType.Query);
                var logoutUrl = Parameters.ValueOf<string>(parameters, Context.Request, "logoutUrl", ParameterType.Query);
                var clockTolerance = Parameters.ValueOf<int?>(parameters, Context.Request, "clockTolerance", ParameterType.Query);
                var digestMethod = Parameters.ValueOf<string>(parameters, Context.Request, "digestMethod", ParameterType.Query);
                var signatureMethod = Parameters.ValueOf<string>(parameters, Context.Request, "signatureMethod", ParameterType.Query);
                var identitySyncType = Parameters.ValueOf<string>(parameters, Context.Request, "identitySyncType", ParameterType.Query);
                var idpIdentifier = Parameters.ValueOf<string>(parameters, Context.Request, "idpIdentifier", ParameterType.Query);
                return service.ComAdobeGraniteAuthSamlSamlAuthenticationHandler(Context, post, apply, delete, action, location, propertylist, path, serviceRanking, idpUrl, idpCertAlias, idpHttpRedirect, serviceProviderEntityId, assertionConsumerServiceURL, spPrivateKeyAlias, keyStorePassword, defaultRedirectUrl, userIDAttribute, useEncryption, createUser, userIntermediatePath, addGroupMemberships, groupMembershipAttribute, defaultGroups, nameIdFormat, synchronizeAttributes, handleLogout, logoutUrl, clockTolerance, digestMethod, signatureMethod, identitySyncType, idpIdentifier);
            };

            Post["/system/console/configMgr/com.adobe.granite.auth.sso.impl.SsoAuthenticationHandler"] = parameters =>
            {
                var post = Parameters.ValueOf<bool?>(parameters, Context.Request, "post", ParameterType.Query);
                var apply = Parameters.ValueOf<bool?>(parameters, Context.Request, "apply", ParameterType.Query);
                var delete = Parameters.ValueOf<bool?>(parameters, Context.Request, "delete", ParameterType.Query);
                var action = Parameters.ValueOf<string>(parameters, Context.Request, "action", ParameterType.Query);
                var location = Parameters.ValueOf<string>(parameters, Context.Request, "location", ParameterType.Query);
                var propertylist = Parameters.ValueOf<List<string>>(parameters, Context.Request, "propertylist", ParameterType.Query);
                var path = Parameters.ValueOf<string>(parameters, Context.Request, "path", ParameterType.Query);
                var serviceRanking = Parameters.ValueOf<int?>(parameters, Context.Request, "serviceRanking", ParameterType.Query);
                var jaasControlFlag = Parameters.ValueOf<string>(parameters, Context.Request, "jaasControlFlag", ParameterType.Query);
                var jaasRealmName = Parameters.ValueOf<string>(parameters, Context.Request, "jaasRealmName", ParameterType.Query);
                var jaasRanking = Parameters.ValueOf<int?>(parameters, Context.Request, "jaasRanking", ParameterType.Query);
                var headers = Parameters.ValueOf<List<string>>(parameters, Context.Request, "headers", ParameterType.Query);
                var cookies = Parameters.ValueOf<List<string>>(parameters, Context.Request, "cookies", ParameterType.Query);
                var parameters = Parameters.ValueOf<List<string>>(parameters, Context.Request, "parameters", ParameterType.Query);
                var usermap = Parameters.ValueOf<List<string>>(parameters, Context.Request, "usermap", ParameterType.Query);
                var format = Parameters.ValueOf<string>(parameters, Context.Request, "format", ParameterType.Query);
                var trustedCredentialsAttribute = Parameters.ValueOf<string>(parameters, Context.Request, "trustedCredentialsAttribute", ParameterType.Query);
                return service.ComAdobeGraniteAuthSsoImplSsoAuthenticationHandler(Context, post, apply, delete, action, location, propertylist, path, serviceRanking, jaasControlFlag, jaasRealmName, jaasRanking, headers, cookies, parameters, usermap, format, trustedCredentialsAttribute);
            };

            Post["/system/console/configMgr/com.adobe.granite.bundles.hc.impl.CodeCacheHealthCheck"] = parameters =>
            {
                var post = Parameters.ValueOf<bool?>(parameters, Context.Request, "post", ParameterType.Query);
                var apply = Parameters.ValueOf<bool?>(parameters, Context.Request, "apply", ParameterType.Query);
                var delete = Parameters.ValueOf<bool?>(parameters, Context.Request, "delete", ParameterType.Query);
                var action = Parameters.ValueOf<string>(parameters, Context.Request, "action", ParameterType.Query);
                var location = Parameters.ValueOf<string>(parameters, Context.Request, "location", ParameterType.Query);
                var propertylist = Parameters.ValueOf<List<string>>(parameters, Context.Request, "propertylist", ParameterType.Query);
                var hcTags = Parameters.ValueOf<List<string>>(parameters, Context.Request, "hcTags", ParameterType.Query);
                var minimumCodeCacheSize = Parameters.ValueOf<int?>(parameters, Context.Request, "minimumCodeCacheSize", ParameterType.Query);
                return service.ComAdobeGraniteBundlesHcImplCodeCacheHealthCheck(Context, post, apply, delete, action, location, propertylist, hcTags, minimumCodeCacheSize);
            };

            Post["/system/console/configMgr/com.adobe.granite.bundles.hc.impl.CrxdeSupportBundleHealthCheck"] = parameters =>
            {
                var post = Parameters.ValueOf<bool?>(parameters, Context.Request, "post", ParameterType.Query);
                var apply = Parameters.ValueOf<bool?>(parameters, Context.Request, "apply", ParameterType.Query);
                var delete = Parameters.ValueOf<bool?>(parameters, Context.Request, "delete", ParameterType.Query);
                var action = Parameters.ValueOf<string>(parameters, Context.Request, "action", ParameterType.Query);
                var location = Parameters.ValueOf<string>(parameters, Context.Request, "location", ParameterType.Query);
                var propertylist = Parameters.ValueOf<List<string>>(parameters, Context.Request, "propertylist", ParameterType.Query);
                var hcTags = Parameters.ValueOf<List<string>>(parameters, Context.Request, "hcTags", ParameterType.Query);
                return service.ComAdobeGraniteBundlesHcImplCrxdeSupportBundleHealthCheck(Context, post, apply, delete, action, location, propertylist, hcTags);
            };

            Post["/system/console/configMgr/com.adobe.granite.bundles.hc.impl.DavExBundleHealthCheck"] = parameters =>
            {
                var post = Parameters.ValueOf<bool?>(parameters, Context.Request, "post", ParameterType.Query);
                var apply = Parameters.ValueOf<bool?>(parameters, Context.Request, "apply", ParameterType.Query);
                var delete = Parameters.ValueOf<bool?>(parameters, Context.Request, "delete", ParameterType.Query);
                var action = Parameters.ValueOf<string>(parameters, Context.Request, "action", ParameterType.Query);
                var location = Parameters.ValueOf<string>(parameters, Context.Request, "location", ParameterType.Query);
                var propertylist = Parameters.ValueOf<List<string>>(parameters, Context.Request, "propertylist", ParameterType.Query);
                var hcTags = Parameters.ValueOf<List<string>>(parameters, Context.Request, "hcTags", ParameterType.Query);
                return service.ComAdobeGraniteBundlesHcImplDavExBundleHealthCheck(Context, post, apply, delete, action, location, propertylist, hcTags);
            };

            Post["/system/console/configMgr/com.adobe.granite.bundles.hc.impl.InactiveBundlesHealthCheck"] = parameters =>
            {
                var post = Parameters.ValueOf<bool?>(parameters, Context.Request, "post", ParameterType.Query);
                var apply = Parameters.ValueOf<bool?>(parameters, Context.Request, "apply", ParameterType.Query);
                var delete = Parameters.ValueOf<bool?>(parameters, Context.Request, "delete", ParameterType.Query);
                var action = Parameters.ValueOf<string>(parameters, Context.Request, "action", ParameterType.Query);
                var location = Parameters.ValueOf<string>(parameters, Context.Request, "location", ParameterType.Query);
                var propertylist = Parameters.ValueOf<List<string>>(parameters, Context.Request, "propertylist", ParameterType.Query);
                var hcTags = Parameters.ValueOf<List<string>>(parameters, Context.Request, "hcTags", ParameterType.Query);
                var ignoredBundles = Parameters.ValueOf<List<string>>(parameters, Context.Request, "ignoredBundles", ParameterType.Query);
                return service.ComAdobeGraniteBundlesHcImplInactiveBundlesHealthCheck(Context, post, apply, delete, action, location, propertylist, hcTags, ignoredBundles);
            };

            Post["/system/console/configMgr/com.adobe.granite.bundles.hc.impl.JobsHealthCheck"] = parameters =>
            {
                var post = Parameters.ValueOf<bool?>(parameters, Context.Request, "post", ParameterType.Query);
                var apply = Parameters.ValueOf<bool?>(parameters, Context.Request, "apply", ParameterType.Query);
                var delete = Parameters.ValueOf<bool?>(parameters, Context.Request, "delete", ParameterType.Query);
                var action = Parameters.ValueOf<string>(parameters, Context.Request, "action", ParameterType.Query);
                var location = Parameters.ValueOf<string>(parameters, Context.Request, "location", ParameterType.Query);
                var propertylist = Parameters.ValueOf<List<string>>(parameters, Context.Request, "propertylist", ParameterType.Query);
                var hcTags = Parameters.ValueOf<List<string>>(parameters, Context.Request, "hcTags", ParameterType.Query);
                var maxQueuedJobs = Parameters.ValueOf<int?>(parameters, Context.Request, "maxQueuedJobs", ParameterType.Query);
                return service.ComAdobeGraniteBundlesHcImplJobsHealthCheck(Context, post, apply, delete, action, location, propertylist, hcTags, maxQueuedJobs);
            };

            Post["/system/console/configMgr/com.adobe.granite.bundles.hc.impl.SlingGetServletHealthCheck"] = parameters =>
            {
                var post = Parameters.ValueOf<bool?>(parameters, Context.Request, "post", ParameterType.Query);
                var apply = Parameters.ValueOf<bool?>(parameters, Context.Request, "apply", ParameterType.Query);
                var delete = Parameters.ValueOf<bool?>(parameters, Context.Request, "delete", ParameterType.Query);
                var action = Parameters.ValueOf<string>(parameters, Context.Request, "action", ParameterType.Query);
                var location = Parameters.ValueOf<string>(parameters, Context.Request, "location", ParameterType.Query);
                var propertylist = Parameters.ValueOf<List<string>>(parameters, Context.Request, "propertylist", ParameterType.Query);
                var hcTags = Parameters.ValueOf<List<string>>(parameters, Context.Request, "hcTags", ParameterType.Query);
                return service.ComAdobeGraniteBundlesHcImplSlingGetServletHealthCheck(Context, post, apply, delete, action, location, propertylist, hcTags);
            };

            Post["/system/console/configMgr/com.adobe.granite.bundles.hc.impl.SlingJavaScriptHandlerHealthCheck"] = parameters =>
            {
                var post = Parameters.ValueOf<bool?>(parameters, Context.Request, "post", ParameterType.Query);
                var apply = Parameters.ValueOf<bool?>(parameters, Context.Request, "apply", ParameterType.Query);
                var delete = Parameters.ValueOf<bool?>(parameters, Context.Request, "delete", ParameterType.Query);
                var action = Parameters.ValueOf<string>(parameters, Context.Request, "action", ParameterType.Query);
                var location = Parameters.ValueOf<string>(parameters, Context.Request, "location", ParameterType.Query);
                var propertylist = Parameters.ValueOf<List<string>>(parameters, Context.Request, "propertylist", ParameterType.Query);
                var hcTags = Parameters.ValueOf<List<string>>(parameters, Context.Request, "hcTags", ParameterType.Query);
                return service.ComAdobeGraniteBundlesHcImplSlingJavaScriptHandlerHealthCheck(Context, post, apply, delete, action, location, propertylist, hcTags);
            };

            Post["/system/console/configMgr/com.adobe.granite.bundles.hc.impl.SlingJspScriptHandlerHealthCheck"] = parameters =>
            {
                var post = Parameters.ValueOf<bool?>(parameters, Context.Request, "post", ParameterType.Query);
                var apply = Parameters.ValueOf<bool?>(parameters, Context.Request, "apply", ParameterType.Query);
                var delete = Parameters.ValueOf<bool?>(parameters, Context.Request, "delete", ParameterType.Query);
                var action = Parameters.ValueOf<string>(parameters, Context.Request, "action", ParameterType.Query);
                var location = Parameters.ValueOf<string>(parameters, Context.Request, "location", ParameterType.Query);
                var propertylist = Parameters.ValueOf<List<string>>(parameters, Context.Request, "propertylist", ParameterType.Query);
                var hcTags = Parameters.ValueOf<List<string>>(parameters, Context.Request, "hcTags", ParameterType.Query);
                return service.ComAdobeGraniteBundlesHcImplSlingJspScriptHandlerHealthCheck(Context, post, apply, delete, action, location, propertylist, hcTags);
            };

            Post["/system/console/configMgr/com.adobe.granite.bundles.hc.impl.SlingReferrerFilterHealthCheck"] = parameters =>
            {
                var post = Parameters.ValueOf<bool?>(parameters, Context.Request, "post", ParameterType.Query);
                var apply = Parameters.ValueOf<bool?>(parameters, Context.Request, "apply", ParameterType.Query);
                var delete = Parameters.ValueOf<bool?>(parameters, Context.Request, "delete", ParameterType.Query);
                var action = Parameters.ValueOf<string>(parameters, Context.Request, "action", ParameterType.Query);
                var location = Parameters.ValueOf<string>(parameters, Context.Request, "location", ParameterType.Query);
                var propertylist = Parameters.ValueOf<List<string>>(parameters, Context.Request, "propertylist", ParameterType.Query);
                var hcTags = Parameters.ValueOf<List<string>>(parameters, Context.Request, "hcTags", ParameterType.Query);
                return service.ComAdobeGraniteBundlesHcImplSlingReferrerFilterHealthCheck(Context, post, apply, delete, action, location, propertylist, hcTags);
            };

            Post["/system/console/configMgr/com.adobe.granite.bundles.hc.impl.WebDavBundleHealthCheck"] = parameters =>
            {
                var post = Parameters.ValueOf<bool?>(parameters, Context.Request, "post", ParameterType.Query);
                var apply = Parameters.ValueOf<bool?>(parameters, Context.Request, "apply", ParameterType.Query);
                var delete = Parameters.ValueOf<bool?>(parameters, Context.Request, "delete", ParameterType.Query);
                var action = Parameters.ValueOf<string>(parameters, Context.Request, "action", ParameterType.Query);
                var location = Parameters.ValueOf<string>(parameters, Context.Request, "location", ParameterType.Query);
                var propertylist = Parameters.ValueOf<List<string>>(parameters, Context.Request, "propertylist", ParameterType.Query);
                var hcTags = Parameters.ValueOf<List<string>>(parameters, Context.Request, "hcTags", ParameterType.Query);
                return service.ComAdobeGraniteBundlesHcImplWebDavBundleHealthCheck(Context, post, apply, delete, action, location, propertylist, hcTags);
            };

            Post["/system/console/configMgr/com.adobe.granite.comments.internal.CommentReplicationContentFilterFactory"] = parameters =>
            {
                var post = Parameters.ValueOf<bool?>(parameters, Context.Request, "post", ParameterType.Query);
                var apply = Parameters.ValueOf<bool?>(parameters, Context.Request, "apply", ParameterType.Query);
                var delete = Parameters.ValueOf<bool?>(parameters, Context.Request, "delete", ParameterType.Query);
                var action = Parameters.ValueOf<string>(parameters, Context.Request, "action", ParameterType.Query);
                var location = Parameters.ValueOf<string>(parameters, Context.Request, "location", ParameterType.Query);
                var propertylist = Parameters.ValueOf<List<string>>(parameters, Context.Request, "propertylist", ParameterType.Query);
                var replicateCommentResourceTypes = Parameters.ValueOf<List<string>>(parameters, Context.Request, "replicateCommentResourceTypes", ParameterType.Query);
                return service.ComAdobeGraniteCommentsInternalCommentReplicationContentFilterFac(Context, post, apply, delete, action, location, propertylist, replicateCommentResourceTypes);
            };

            Post["/system/console/configMgr/com.adobe.granite.compatrouter.impl.CompatSwitchingServiceImpl"] = parameters =>
            {
                var post = Parameters.ValueOf<bool?>(parameters, Context.Request, "post", ParameterType.Query);
                var apply = Parameters.ValueOf<bool?>(parameters, Context.Request, "apply", ParameterType.Query);
                var delete = Parameters.ValueOf<bool?>(parameters, Context.Request, "delete", ParameterType.Query);
                var action = Parameters.ValueOf<string>(parameters, Context.Request, "action", ParameterType.Query);
                var location = Parameters.ValueOf<string>(parameters, Context.Request, "location", ParameterType.Query);
                var propertylist = Parameters.ValueOf<List<string>>(parameters, Context.Request, "propertylist", ParameterType.Query);
                var compatgroups = Parameters.ValueOf<List<string>>(parameters, Context.Request, "compatgroups", ParameterType.Query);
                var enabled = Parameters.ValueOf<bool?>(parameters, Context.Request, "enabled", ParameterType.Query);
                return service.ComAdobeGraniteCompatrouterImplCompatSwitchingServiceImpl(Context, post, apply, delete, action, location, propertylist, compatgroups, enabled);
            };

            Post["/system/console/configMgr/com.adobe.granite.compatrouter.impl.RoutingConfig"] = parameters =>
            {
                var post = Parameters.ValueOf<bool?>(parameters, Context.Request, "post", ParameterType.Query);
                var apply = Parameters.ValueOf<bool?>(parameters, Context.Request, "apply", ParameterType.Query);
                var delete = Parameters.ValueOf<bool?>(parameters, Context.Request, "delete", ParameterType.Query);
                var action = Parameters.ValueOf<string>(parameters, Context.Request, "action", ParameterType.Query);
                var location = Parameters.ValueOf<string>(parameters, Context.Request, "location", ParameterType.Query);
                var propertylist = Parameters.ValueOf<List<string>>(parameters, Context.Request, "propertylist", ParameterType.Query);
                var id = Parameters.ValueOf<string>(parameters, Context.Request, "id", ParameterType.Query);
                var compatPath = Parameters.ValueOf<string>(parameters, Context.Request, "compatPath", ParameterType.Query);
                var newPath = Parameters.ValueOf<string>(parameters, Context.Request, "newPath", ParameterType.Query);
                return service.ComAdobeGraniteCompatrouterImplRoutingConfig(Context, post, apply, delete, action, location, propertylist, id, compatPath, newPath);
            };

            Post["/system/console/configMgr/com.adobe.granite.compatrouter.impl.SwitchMappingConfig"] = parameters =>
            {
                var post = Parameters.ValueOf<bool?>(parameters, Context.Request, "post", ParameterType.Query);
                var apply = Parameters.ValueOf<bool?>(parameters, Context.Request, "apply", ParameterType.Query);
                var delete = Parameters.ValueOf<bool?>(parameters, Context.Request, "delete", ParameterType.Query);
                var action = Parameters.ValueOf<string>(parameters, Context.Request, "action", ParameterType.Query);
                var location = Parameters.ValueOf<string>(parameters, Context.Request, "location", ParameterType.Query);
                var propertylist = Parameters.ValueOf<List<string>>(parameters, Context.Request, "propertylist", ParameterType.Query);
                var group = Parameters.ValueOf<string>(parameters, Context.Request, "group", ParameterType.Query);
                var ids = Parameters.ValueOf<List<string>>(parameters, Context.Request, "ids", ParameterType.Query);
                return service.ComAdobeGraniteCompatrouterImplSwitchMappingConfig(Context, post, apply, delete, action, location, propertylist, group, ids);
            };

            Post["/system/console/configMgr/com.adobe.granite.conf.impl.RuntimeAwareConfigurationResourceResolvingStrategy"] = parameters =>
            {
                var post = Parameters.ValueOf<bool?>(parameters, Context.Request, "post", ParameterType.Query);
                var apply = Parameters.ValueOf<bool?>(parameters, Context.Request, "apply", ParameterType.Query);
                var delete = Parameters.ValueOf<bool?>(parameters, Context.Request, "delete", ParameterType.Query);
                var action = Parameters.ValueOf<string>(parameters, Context.Request, "action", ParameterType.Query);
                var location = Parameters.ValueOf<string>(parameters, Context.Request, "location", ParameterType.Query);
                var propertylist = Parameters.ValueOf<List<string>>(parameters, Context.Request, "propertylist", ParameterType.Query);
                var enabled = Parameters.ValueOf<bool?>(parameters, Context.Request, "enabled", ParameterType.Query);
                var fallbackPaths = Parameters.ValueOf<List<string>>(parameters, Context.Request, "fallbackPaths", ParameterType.Query);
                return service.ComAdobeGraniteConfImplRuntimeAwareConfigurationResourceResolving(Context, post, apply, delete, action, location, propertylist, enabled, fallbackPaths);
            };

            Post["/system/console/configMgr/com.adobe.granite.contexthub.impl.ContextHubImpl"] = parameters =>
            {
                var post = Parameters.ValueOf<bool?>(parameters, Context.Request, "post", ParameterType.Query);
                var apply = Parameters.ValueOf<bool?>(parameters, Context.Request, "apply", ParameterType.Query);
                var delete = Parameters.ValueOf<bool?>(parameters, Context.Request, "delete", ParameterType.Query);
                var action = Parameters.ValueOf<string>(parameters, Context.Request, "action", ParameterType.Query);
                var location = Parameters.ValueOf<string>(parameters, Context.Request, "location", ParameterType.Query);
                var propertylist = Parameters.ValueOf<List<string>>(parameters, Context.Request, "propertylist", ParameterType.Query);
                var comAdobeGraniteContexthubSilentMode = Parameters.ValueOf<bool?>(parameters, Context.Request, "comAdobeGraniteContexthubSilentMode", ParameterType.Query);
                var comAdobeGraniteContexthubShowUi = Parameters.ValueOf<bool?>(parameters, Context.Request, "comAdobeGraniteContexthubShowUi", ParameterType.Query);
                return service.ComAdobeGraniteContexthubImplContextHubImpl(Context, post, apply, delete, action, location, propertylist, comAdobeGraniteContexthubSilentMode, comAdobeGraniteContexthubShowUi);
            };

            Post["/system/console/configMgr/com.adobe.granite.cors.impl.CORSPolicyImpl"] = parameters =>
            {
                var post = Parameters.ValueOf<bool?>(parameters, Context.Request, "post", ParameterType.Query);
                var apply = Parameters.ValueOf<bool?>(parameters, Context.Request, "apply", ParameterType.Query);
                var delete = Parameters.ValueOf<bool?>(parameters, Context.Request, "delete", ParameterType.Query);
                var action = Parameters.ValueOf<string>(parameters, Context.Request, "action", ParameterType.Query);
                var location = Parameters.ValueOf<string>(parameters, Context.Request, "location", ParameterType.Query);
                var propertylist = Parameters.ValueOf<List<string>>(parameters, Context.Request, "propertylist", ParameterType.Query);
                var alloworigin = Parameters.ValueOf<List<string>>(parameters, Context.Request, "alloworigin", ParameterType.Query);
                var alloworiginregexp = Parameters.ValueOf<List<string>>(parameters, Context.Request, "alloworiginregexp", ParameterType.Query);
                var allowedpaths = Parameters.ValueOf<List<string>>(parameters, Context.Request, "allowedpaths", ParameterType.Query);
                var exposedheaders = Parameters.ValueOf<List<string>>(parameters, Context.Request, "exposedheaders", ParameterType.Query);
                var maxage = Parameters.ValueOf<int?>(parameters, Context.Request, "maxage", ParameterType.Query);
                var supportedheaders = Parameters.ValueOf<List<string>>(parameters, Context.Request, "supportedheaders", ParameterType.Query);
                var supportedmethods = Parameters.ValueOf<List<string>>(parameters, Context.Request, "supportedmethods", ParameterType.Query);
                var supportscredentials = Parameters.ValueOf<bool?>(parameters, Context.Request, "supportscredentials", ParameterType.Query);
                return service.ComAdobeGraniteCorsImplCORSPolicyImpl(Context, post, apply, delete, action, location, propertylist, alloworigin, alloworiginregexp, allowedpaths, exposedheaders, maxage, supportedheaders, supportedmethods, supportscredentials);
            };

            Post["/system/console/configMgr/com.adobe.granite.csrf.impl.CSRFFilter"] = parameters =>
            {
                var post = Parameters.ValueOf<bool?>(parameters, Context.Request, "post", ParameterType.Query);
                var apply = Parameters.ValueOf<bool?>(parameters, Context.Request, "apply", ParameterType.Query);
                var delete = Parameters.ValueOf<bool?>(parameters, Context.Request, "delete", ParameterType.Query);
                var action = Parameters.ValueOf<string>(parameters, Context.Request, "action", ParameterType.Query);
                var location = Parameters.ValueOf<string>(parameters, Context.Request, "location", ParameterType.Query);
                var propertylist = Parameters.ValueOf<List<string>>(parameters, Context.Request, "propertylist", ParameterType.Query);
                var filterMethods = Parameters.ValueOf<List<string>>(parameters, Context.Request, "filterMethods", ParameterType.Query);
                var filterEnableSafeUserAgents = Parameters.ValueOf<bool?>(parameters, Context.Request, "filterEnableSafeUserAgents", ParameterType.Query);
                var filterSafeUserAgents = Parameters.ValueOf<List<string>>(parameters, Context.Request, "filterSafeUserAgents", ParameterType.Query);
                var filterExcludedPaths = Parameters.ValueOf<List<string>>(parameters, Context.Request, "filterExcludedPaths", ParameterType.Query);
                return service.ComAdobeGraniteCsrfImplCSRFFilter(Context, post, apply, delete, action, location, propertylist, filterMethods, filterEnableSafeUserAgents, filterSafeUserAgents, filterExcludedPaths);
            };

            Post["/system/console/configMgr/com.adobe.granite.csrf.impl.CSRFServlet"] = parameters =>
            {
                var post = Parameters.ValueOf<bool?>(parameters, Context.Request, "post", ParameterType.Query);
                var apply = Parameters.ValueOf<bool?>(parameters, Context.Request, "apply", ParameterType.Query);
                var delete = Parameters.ValueOf<bool?>(parameters, Context.Request, "delete", ParameterType.Query);
                var action = Parameters.ValueOf<string>(parameters, Context.Request, "action", ParameterType.Query);
                var location = Parameters.ValueOf<string>(parameters, Context.Request, "location", ParameterType.Query);
                var propertylist = Parameters.ValueOf<List<string>>(parameters, Context.Request, "propertylist", ParameterType.Query);
                var csrfTokenExpiresIn = Parameters.ValueOf<int?>(parameters, Context.Request, "csrfTokenExpiresIn", ParameterType.Query);
                var slingAuthRequirements = Parameters.ValueOf<string>(parameters, Context.Request, "slingAuthRequirements", ParameterType.Query);
                return service.ComAdobeGraniteCsrfImplCSRFServlet(Context, post, apply, delete, action, location, propertylist, csrfTokenExpiresIn, slingAuthRequirements);
            };

            Post["/system/console/configMgr/com.adobe.granite.distribution.core.impl.CryptoDistributionTransportSecretProvider"] = parameters =>
            {
                var post = Parameters.ValueOf<bool?>(parameters, Context.Request, "post", ParameterType.Query);
                var apply = Parameters.ValueOf<bool?>(parameters, Context.Request, "apply", ParameterType.Query);
                var delete = Parameters.ValueOf<bool?>(parameters, Context.Request, "delete", ParameterType.Query);
                var action = Parameters.ValueOf<string>(parameters, Context.Request, "action", ParameterType.Query);
                var location = Parameters.ValueOf<string>(parameters, Context.Request, "location", ParameterType.Query);
                var propertylist = Parameters.ValueOf<List<string>>(parameters, Context.Request, "propertylist", ParameterType.Query);
                var name = Parameters.ValueOf<string>(parameters, Context.Request, "name", ParameterType.Query);
                var username = Parameters.ValueOf<string>(parameters, Context.Request, "username", ParameterType.Query);
                var encryptedPassword = Parameters.ValueOf<string>(parameters, Context.Request, "encryptedPassword", ParameterType.Query);
                return service.ComAdobeGraniteDistributionCoreImplCryptoDistributionTransportSe(Context, post, apply, delete, action, location, propertylist, name, username, encryptedPassword);
            };

            Post["/system/console/configMgr/com.adobe.granite.distribution.core.impl.diff.DiffChangesObserver"] = parameters =>
            {
                var post = Parameters.ValueOf<bool?>(parameters, Context.Request, "post", ParameterType.Query);
                var apply = Parameters.ValueOf<bool?>(parameters, Context.Request, "apply", ParameterType.Query);
                var delete = Parameters.ValueOf<bool?>(parameters, Context.Request, "delete", ParameterType.Query);
                var action = Parameters.ValueOf<string>(parameters, Context.Request, "action", ParameterType.Query);
                var location = Parameters.ValueOf<string>(parameters, Context.Request, "location", ParameterType.Query);
                var propertylist = Parameters.ValueOf<List<string>>(parameters, Context.Request, "propertylist", ParameterType.Query);
                var enabled = Parameters.ValueOf<bool?>(parameters, Context.Request, "enabled", ParameterType.Query);
                var agentName = Parameters.ValueOf<string>(parameters, Context.Request, "agentName", ParameterType.Query);
                var diffPath = Parameters.ValueOf<string>(parameters, Context.Request, "diffPath", ParameterType.Query);
                var observedPath = Parameters.ValueOf<string>(parameters, Context.Request, "observedPath", ParameterType.Query);
                var serviceName = Parameters.ValueOf<string>(parameters, Context.Request, "serviceName", ParameterType.Query);
                var propertyNames = Parameters.ValueOf<string>(parameters, Context.Request, "propertyNames", ParameterType.Query);
                var distributionDelay = Parameters.ValueOf<int?>(parameters, Context.Request, "distributionDelay", ParameterType.Query);
                var serviceUserTarget = Parameters.ValueOf<string>(parameters, Context.Request, "serviceUserTarget", ParameterType.Query);
                return service.ComAdobeGraniteDistributionCoreImplDiffDiffChangesObserver(Context, post, apply, delete, action, location, propertylist, enabled, agentName, diffPath, observedPath, serviceName, propertyNames, distributionDelay, serviceUserTarget);
            };

            Post["/system/console/configMgr/com.adobe.granite.distribution.core.impl.diff.DiffEventListener"] = parameters =>
            {
                var post = Parameters.ValueOf<bool?>(parameters, Context.Request, "post", ParameterType.Query);
                var apply = Parameters.ValueOf<bool?>(parameters, Context.Request, "apply", ParameterType.Query);
                var delete = Parameters.ValueOf<bool?>(parameters, Context.Request, "delete", ParameterType.Query);
                var action = Parameters.ValueOf<string>(parameters, Context.Request, "action", ParameterType.Query);
                var location = Parameters.ValueOf<string>(parameters, Context.Request, "location", ParameterType.Query);
                var propertylist = Parameters.ValueOf<List<string>>(parameters, Context.Request, "propertylist", ParameterType.Query);
                var diffPath = Parameters.ValueOf<string>(parameters, Context.Request, "diffPath", ParameterType.Query);
                var serviceName = Parameters.ValueOf<string>(parameters, Context.Request, "serviceName", ParameterType.Query);
                var serviceUserTarget = Parameters.ValueOf<string>(parameters, Context.Request, "serviceUserTarget", ParameterType.Query);
                return service.ComAdobeGraniteDistributionCoreImplDiffDiffEventListener(Context, post, apply, delete, action, location, propertylist, diffPath, serviceName, serviceUserTarget);
            };

            Post["/system/console/configMgr/com.adobe.granite.distribution.core.impl.DistributionToReplicationEventTransformer"] = parameters =>
            {
                var post = Parameters.ValueOf<bool?>(parameters, Context.Request, "post", ParameterType.Query);
                var apply = Parameters.ValueOf<bool?>(parameters, Context.Request, "apply", ParameterType.Query);
                var delete = Parameters.ValueOf<bool?>(parameters, Context.Request, "delete", ParameterType.Query);
                var action = Parameters.ValueOf<string>(parameters, Context.Request, "action", ParameterType.Query);
                var location = Parameters.ValueOf<string>(parameters, Context.Request, "location", ParameterType.Query);
                var propertylist = Parameters.ValueOf<List<string>>(parameters, Context.Request, "propertylist", ParameterType.Query);
                var importerName = Parameters.ValueOf<List<string>>(parameters, Context.Request, "importerName", ParameterType.Query);
                return service.ComAdobeGraniteDistributionCoreImplDistributionToReplicationEven(Context, post, apply, delete, action, location, propertylist, importerName);
            };

            Post["/system/console/configMgr/com.adobe.granite.distribution.core.impl.replication.adapters.ReplicationAgentProvider"] = parameters =>
            {
                var post = Parameters.ValueOf<bool?>(parameters, Context.Request, "post", ParameterType.Query);
                var apply = Parameters.ValueOf<bool?>(parameters, Context.Request, "apply", ParameterType.Query);
                var delete = Parameters.ValueOf<bool?>(parameters, Context.Request, "delete", ParameterType.Query);
                var action = Parameters.ValueOf<string>(parameters, Context.Request, "action", ParameterType.Query);
                var location = Parameters.ValueOf<string>(parameters, Context.Request, "location", ParameterType.Query);
                var propertylist = Parameters.ValueOf<List<string>>(parameters, Context.Request, "propertylist", ParameterType.Query);
                var providerName = Parameters.ValueOf<string>(parameters, Context.Request, "providerName", ParameterType.Query);
                var forwardRequests = Parameters.ValueOf<bool?>(parameters, Context.Request, "forwardRequests", ParameterType.Query);
                return service.ComAdobeGraniteDistributionCoreImplReplicationAdaptersReplicat(Context, post, apply, delete, action, location, propertylist, providerName, forwardRequests);
            };

            Post["/system/console/configMgr/com.adobe.granite.distribution.core.impl.replication.DistributionTransportHandler"] = parameters =>
            {
                var post = Parameters.ValueOf<bool?>(parameters, Context.Request, "post", ParameterType.Query);
                var apply = Parameters.ValueOf<bool?>(parameters, Context.Request, "apply", ParameterType.Query);
                var delete = Parameters.ValueOf<bool?>(parameters, Context.Request, "delete", ParameterType.Query);
                var action = Parameters.ValueOf<string>(parameters, Context.Request, "action", ParameterType.Query);
                var location = Parameters.ValueOf<string>(parameters, Context.Request, "location", ParameterType.Query);
                var propertylist = Parameters.ValueOf<List<string>>(parameters, Context.Request, "propertylist", ParameterType.Query);
                var forwardRequests = Parameters.ValueOf<bool?>(parameters, Context.Request, "forwardRequests", ParameterType.Query);
                return service.ComAdobeGraniteDistributionCoreImplReplicationDistributionTrans(Context, post, apply, delete, action, location, propertylist, forwardRequests);
            };

            Post["/system/console/configMgr/com.adobe.granite.distribution.core.impl.transport.AccessTokenDistributionTransportSecretProvider"] = parameters =>
            {
                var post = Parameters.ValueOf<bool?>(parameters, Context.Request, "post", ParameterType.Query);
                var apply = Parameters.ValueOf<bool?>(parameters, Context.Request, "apply", ParameterType.Query);
                var delete = Parameters.ValueOf<bool?>(parameters, Context.Request, "delete", ParameterType.Query);
                var action = Parameters.ValueOf<string>(parameters, Context.Request, "action", ParameterType.Query);
                var location = Parameters.ValueOf<string>(parameters, Context.Request, "location", ParameterType.Query);
                var propertylist = Parameters.ValueOf<List<string>>(parameters, Context.Request, "propertylist", ParameterType.Query);
                var name = Parameters.ValueOf<string>(parameters, Context.Request, "name", ParameterType.Query);
                var serviceName = Parameters.ValueOf<string>(parameters, Context.Request, "serviceName", ParameterType.Query);
                var userId = Parameters.ValueOf<string>(parameters, Context.Request, "userId", ParameterType.Query);
                var accessTokenProviderTarget = Parameters.ValueOf<string>(parameters, Context.Request, "accessTokenProviderTarget", ParameterType.Query);
                return service.ComAdobeGraniteDistributionCoreImplTransportAccessTokenDistribu(Context, post, apply, delete, action, location, propertylist, name, serviceName, userId, accessTokenProviderTarget);
            };

            Post["/system/console/configMgr/com.adobe.granite.frags.impl.CheckHttpHeaderFlag"] = parameters =>
            {
                var post = Parameters.ValueOf<bool?>(parameters, Context.Request, "post", ParameterType.Query);
                var apply = Parameters.ValueOf<bool?>(parameters, Context.Request, "apply", ParameterType.Query);
                var delete = Parameters.ValueOf<bool?>(parameters, Context.Request, "delete", ParameterType.Query);
                var action = Parameters.ValueOf<string>(parameters, Context.Request, "action", ParameterType.Query);
                var location = Parameters.ValueOf<string>(parameters, Context.Request, "location", ParameterType.Query);
                var propertylist = Parameters.ValueOf<List<string>>(parameters, Context.Request, "propertylist", ParameterType.Query);
                var featureName = Parameters.ValueOf<string>(parameters, Context.Request, "featureName", ParameterType.Query);
                var featureDescription = Parameters.ValueOf<string>(parameters, Context.Request, "featureDescription", ParameterType.Query);
                var httpHeaderName = Parameters.ValueOf<string>(parameters, Context.Request, "httpHeaderName", ParameterType.Query);
                var httpHeaderValuepattern = Parameters.ValueOf<string>(parameters, Context.Request, "httpHeaderValuepattern", ParameterType.Query);
                return service.ComAdobeGraniteFragsImplCheckHttpHeaderFlag(Context, post, apply, delete, action, location, propertylist, featureName, featureDescription, httpHeaderName, httpHeaderValuepattern);
            };

            Post["/system/console/configMgr/com.adobe.granite.frags.impl.RandomFeature"] = parameters =>
            {
                var post = Parameters.ValueOf<bool?>(parameters, Context.Request, "post", ParameterType.Query);
                var apply = Parameters.ValueOf<bool?>(parameters, Context.Request, "apply", ParameterType.Query);
                var delete = Parameters.ValueOf<bool?>(parameters, Context.Request, "delete", ParameterType.Query);
                var action = Parameters.ValueOf<string>(parameters, Context.Request, "action", ParameterType.Query);
                var location = Parameters.ValueOf<string>(parameters, Context.Request, "location", ParameterType.Query);
                var propertylist = Parameters.ValueOf<List<string>>(parameters, Context.Request, "propertylist", ParameterType.Query);
                var featureName = Parameters.ValueOf<string>(parameters, Context.Request, "featureName", ParameterType.Query);
                var featureDescription = Parameters.ValueOf<string>(parameters, Context.Request, "featureDescription", ParameterType.Query);
                var activePercentage = Parameters.ValueOf<string>(parameters, Context.Request, "activePercentage", ParameterType.Query);
                var cookieName = Parameters.ValueOf<string>(parameters, Context.Request, "cookieName", ParameterType.Query);
                var cookieMaxAge = Parameters.ValueOf<int?>(parameters, Context.Request, "cookieMaxAge", ParameterType.Query);
                return service.ComAdobeGraniteFragsImplRandomFeature(Context, post, apply, delete, action, location, propertylist, featureName, featureDescription, activePercentage, cookieName, cookieMaxAge);
            };

            Post["/system/console/configMgr/com.adobe.granite.httpcache.file.FileCacheStore"] = parameters =>
            {
                var post = Parameters.ValueOf<bool?>(parameters, Context.Request, "post", ParameterType.Query);
                var apply = Parameters.ValueOf<bool?>(parameters, Context.Request, "apply", ParameterType.Query);
                var delete = Parameters.ValueOf<bool?>(parameters, Context.Request, "delete", ParameterType.Query);
                var action = Parameters.ValueOf<string>(parameters, Context.Request, "action", ParameterType.Query);
                var location = Parameters.ValueOf<string>(parameters, Context.Request, "location", ParameterType.Query);
                var propertylist = Parameters.ValueOf<List<string>>(parameters, Context.Request, "propertylist", ParameterType.Query);
                var comAdobeGraniteHttpcacheFileDocumentRoot = Parameters.ValueOf<string>(parameters, Context.Request, "comAdobeGraniteHttpcacheFileDocumentRoot", ParameterType.Query);
                var comAdobeGraniteHttpcacheFileIncludeHost = Parameters.ValueOf<string>(parameters, Context.Request, "comAdobeGraniteHttpcacheFileIncludeHost", ParameterType.Query);
                return service.ComAdobeGraniteHttpcacheFileFileCacheStore(Context, post, apply, delete, action, location, propertylist, comAdobeGraniteHttpcacheFileDocumentRoot, comAdobeGraniteHttpcacheFileIncludeHost);
            };

            Post["/system/console/configMgr/com.adobe.granite.httpcache.impl.OuterCacheFilter"] = parameters =>
            {
                var post = Parameters.ValueOf<bool?>(parameters, Context.Request, "post", ParameterType.Query);
                var apply = Parameters.ValueOf<bool?>(parameters, Context.Request, "apply", ParameterType.Query);
                var delete = Parameters.ValueOf<bool?>(parameters, Context.Request, "delete", ParameterType.Query);
                var action = Parameters.ValueOf<string>(parameters, Context.Request, "action", ParameterType.Query);
                var location = Parameters.ValueOf<string>(parameters, Context.Request, "location", ParameterType.Query);
                var propertylist = Parameters.ValueOf<List<string>>(parameters, Context.Request, "propertylist", ParameterType.Query);
                var comAdobeGraniteHttpcacheUrlPaths = Parameters.ValueOf<List<string>>(parameters, Context.Request, "comAdobeGraniteHttpcacheUrlPaths", ParameterType.Query);
                return service.ComAdobeGraniteHttpcacheImplOuterCacheFilter(Context, post, apply, delete, action, location, propertylist, comAdobeGraniteHttpcacheUrlPaths);
            };

            Post["/system/console/configMgr/com.adobe.granite.i18n.impl.bundle.PseudoTranslations"] = parameters =>
            {
                var post = Parameters.ValueOf<bool?>(parameters, Context.Request, "post", ParameterType.Query);
                var apply = Parameters.ValueOf<bool?>(parameters, Context.Request, "apply", ParameterType.Query);
                var delete = Parameters.ValueOf<bool?>(parameters, Context.Request, "delete", ParameterType.Query);
                var action = Parameters.ValueOf<string>(parameters, Context.Request, "action", ParameterType.Query);
                var location = Parameters.ValueOf<string>(parameters, Context.Request, "location", ParameterType.Query);
                var propertylist = Parameters.ValueOf<List<string>>(parameters, Context.Request, "propertylist", ParameterType.Query);
                var pseudoPatterns = Parameters.ValueOf<List<string>>(parameters, Context.Request, "pseudoPatterns", ParameterType.Query);
                return service.ComAdobeGraniteI18nImplBundlePseudoTranslations(Context, post, apply, delete, action, location, propertylist, pseudoPatterns);
            };

            Post["/system/console/configMgr/com.adobe.granite.i18n.impl.PreferencesLocaleResolverService"] = parameters =>
            {
                var post = Parameters.ValueOf<bool?>(parameters, Context.Request, "post", ParameterType.Query);
                var apply = Parameters.ValueOf<bool?>(parameters, Context.Request, "apply", ParameterType.Query);
                var delete = Parameters.ValueOf<bool?>(parameters, Context.Request, "delete", ParameterType.Query);
                var action = Parameters.ValueOf<string>(parameters, Context.Request, "action", ParameterType.Query);
                var location = Parameters.ValueOf<string>(parameters, Context.Request, "location", ParameterType.Query);
                var propertylist = Parameters.ValueOf<List<string>>(parameters, Context.Request, "propertylist", ParameterType.Query);
                var securityPreferencesName = Parameters.ValueOf<string>(parameters, Context.Request, "securityPreferencesName", ParameterType.Query);
                return service.ComAdobeGraniteI18nImplPreferencesLocaleResolverService(Context, post, apply, delete, action, location, propertylist, securityPreferencesName);
            };

            Post["/system/console/configMgr/com.adobe.granite.infocollector.InfoCollector"] = parameters =>
            {
                var post = Parameters.ValueOf<bool?>(parameters, Context.Request, "post", ParameterType.Query);
                var apply = Parameters.ValueOf<bool?>(parameters, Context.Request, "apply", ParameterType.Query);
                var delete = Parameters.ValueOf<bool?>(parameters, Context.Request, "delete", ParameterType.Query);
                var action = Parameters.ValueOf<string>(parameters, Context.Request, "action", ParameterType.Query);
                var location = Parameters.ValueOf<string>(parameters, Context.Request, "location", ParameterType.Query);
                var propertylist = Parameters.ValueOf<List<string>>(parameters, Context.Request, "propertylist", ParameterType.Query);
                var graniteInfocollectorIncludeThreadDumps = Parameters.ValueOf<bool?>(parameters, Context.Request, "graniteInfocollectorIncludeThreadDumps", ParameterType.Query);
                var graniteInfocollectorIncludeHeapDump = Parameters.ValueOf<bool?>(parameters, Context.Request, "graniteInfocollectorIncludeHeapDump", ParameterType.Query);
                return service.ComAdobeGraniteInfocollectorInfoCollector(Context, post, apply, delete, action, location, propertylist, graniteInfocollectorIncludeThreadDumps, graniteInfocollectorIncludeHeapDump);
            };

            Post["/system/console/configMgr/com.adobe.granite.jetty.ssl.internal.GraniteSslConnectorFactory"] = parameters =>
            {
                var post = Parameters.ValueOf<bool?>(parameters, Context.Request, "post", ParameterType.Query);
                var apply = Parameters.ValueOf<bool?>(parameters, Context.Request, "apply", ParameterType.Query);
                var delete = Parameters.ValueOf<bool?>(parameters, Context.Request, "delete", ParameterType.Query);
                var action = Parameters.ValueOf<string>(parameters, Context.Request, "action", ParameterType.Query);
                var location = Parameters.ValueOf<string>(parameters, Context.Request, "location", ParameterType.Query);
                var propertylist = Parameters.ValueOf<List<string>>(parameters, Context.Request, "propertylist", ParameterType.Query);
                var comAdobeGraniteJettySslPort = Parameters.ValueOf<int?>(parameters, Context.Request, "comAdobeGraniteJettySslPort", ParameterType.Query);
                var comAdobeGraniteJettySslKeystoreUser = Parameters.ValueOf<string>(parameters, Context.Request, "comAdobeGraniteJettySslKeystoreUser", ParameterType.Query);
                var comAdobeGraniteJettySslKeystorePassword = Parameters.ValueOf<string>(parameters, Context.Request, "comAdobeGraniteJettySslKeystorePassword", ParameterType.Query);
                var comAdobeGraniteJettySslCiphersuitesExcluded = Parameters.ValueOf<List<string>>(parameters, Context.Request, "comAdobeGraniteJettySslCiphersuitesExcluded", ParameterType.Query);
                var comAdobeGraniteJettySslCiphersuitesIncluded = Parameters.ValueOf<List<string>>(parameters, Context.Request, "comAdobeGraniteJettySslCiphersuitesIncluded", ParameterType.Query);
                var comAdobeGraniteJettySslClientCertificate = Parameters.ValueOf<string>(parameters, Context.Request, "comAdobeGraniteJettySslClientCertificate", ParameterType.Query);
                return service.ComAdobeGraniteJettySslInternalGraniteSslConnectorFactory(Context, post, apply, delete, action, location, propertylist, comAdobeGraniteJettySslPort, comAdobeGraniteJettySslKeystoreUser, comAdobeGraniteJettySslKeystorePassword, comAdobeGraniteJettySslCiphersuitesExcluded, comAdobeGraniteJettySslCiphersuitesIncluded, comAdobeGraniteJettySslClientCertificate);
            };

            Post["/system/console/configMgr/com.adobe.granite.license.impl.LicenseCheckFilter"] = parameters =>
            {
                var post = Parameters.ValueOf<bool?>(parameters, Context.Request, "post", ParameterType.Query);
                var apply = Parameters.ValueOf<bool?>(parameters, Context.Request, "apply", ParameterType.Query);
                var delete = Parameters.ValueOf<bool?>(parameters, Context.Request, "delete", ParameterType.Query);
                var action = Parameters.ValueOf<string>(parameters, Context.Request, "action", ParameterType.Query);
                var location = Parameters.ValueOf<string>(parameters, Context.Request, "location", ParameterType.Query);
                var propertylist = Parameters.ValueOf<List<string>>(parameters, Context.Request, "propertylist", ParameterType.Query);
                var checkInternval = Parameters.ValueOf<int?>(parameters, Context.Request, "checkInternval", ParameterType.Query);
                var excludeIds = Parameters.ValueOf<List<string>>(parameters, Context.Request, "excludeIds", ParameterType.Query);
                var encryptPing = Parameters.ValueOf<bool?>(parameters, Context.Request, "encryptPing", ParameterType.Query);
                return service.ComAdobeGraniteLicenseImplLicenseCheckFilter(Context, post, apply, delete, action, location, propertylist, checkInternval, excludeIds, encryptPing);
            };

            Post["/system/console/configMgr/com.adobe.granite.logging.impl.LogAnalyserImpl"] = parameters =>
            {
                var post = Parameters.ValueOf<bool?>(parameters, Context.Request, "post", ParameterType.Query);
                var apply = Parameters.ValueOf<bool?>(parameters, Context.Request, "apply", ParameterType.Query);
                var delete = Parameters.ValueOf<bool?>(parameters, Context.Request, "delete", ParameterType.Query);
                var action = Parameters.ValueOf<string>(parameters, Context.Request, "action", ParameterType.Query);
                var location = Parameters.ValueOf<string>(parameters, Context.Request, "location", ParameterType.Query);
                var propertylist = Parameters.ValueOf<List<string>>(parameters, Context.Request, "propertylist", ParameterType.Query);
                var messagesQueueSize = Parameters.ValueOf<int?>(parameters, Context.Request, "messagesQueueSize", ParameterType.Query);
                var loggerConfig = Parameters.ValueOf<List<string>>(parameters, Context.Request, "loggerConfig", ParameterType.Query);
                var messagesSize = Parameters.ValueOf<int?>(parameters, Context.Request, "messagesSize", ParameterType.Query);
                return service.ComAdobeGraniteLoggingImplLogAnalyserImpl(Context, post, apply, delete, action, location, propertylist, messagesQueueSize, loggerConfig, messagesSize);
            };

            Post["/system/console/configMgr/com.adobe.granite.logging.impl.LogErrorHealthCheck"] = parameters =>
            {
                var post = Parameters.ValueOf<bool?>(parameters, Context.Request, "post", ParameterType.Query);
                var apply = Parameters.ValueOf<bool?>(parameters, Context.Request, "apply", ParameterType.Query);
                var delete = Parameters.ValueOf<bool?>(parameters, Context.Request, "delete", ParameterType.Query);
                var action = Parameters.ValueOf<string>(parameters, Context.Request, "action", ParameterType.Query);
                var location = Parameters.ValueOf<string>(parameters, Context.Request, "location", ParameterType.Query);
                var propertylist = Parameters.ValueOf<List<string>>(parameters, Context.Request, "propertylist", ParameterType.Query);
                var hcTags = Parameters.ValueOf<List<string>>(parameters, Context.Request, "hcTags", ParameterType.Query);
                return service.ComAdobeGraniteLoggingImplLogErrorHealthCheck(Context, post, apply, delete, action, location, propertylist, hcTags);
            };

            Post["/system/console/configMgr/com.adobe.granite.maintenance.crx.impl.DataStoreGarbageCollectionTask"] = parameters =>
            {
                var post = Parameters.ValueOf<bool?>(parameters, Context.Request, "post", ParameterType.Query);
                var apply = Parameters.ValueOf<bool?>(parameters, Context.Request, "apply", ParameterType.Query);
                var delete = Parameters.ValueOf<bool?>(parameters, Context.Request, "delete", ParameterType.Query);
                var action = Parameters.ValueOf<string>(parameters, Context.Request, "action", ParameterType.Query);
                var location = Parameters.ValueOf<string>(parameters, Context.Request, "location", ParameterType.Query);
                var propertylist = Parameters.ValueOf<List<string>>(parameters, Context.Request, "propertylist", ParameterType.Query);
                var graniteMaintenanceMandatory = Parameters.ValueOf<bool?>(parameters, Context.Request, "graniteMaintenanceMandatory", ParameterType.Query);
                var jobTopics = Parameters.ValueOf<string>(parameters, Context.Request, "jobTopics", ParameterType.Query);
                return service.ComAdobeGraniteMaintenanceCrxImplDataStoreGarbageCollectionTask(Context, post, apply, delete, action, location, propertylist, graniteMaintenanceMandatory, jobTopics);
            };

            Post["/system/console/configMgr/com.adobe.granite.maintenance.crx.impl.LuceneBinariesCleanupTask"] = parameters =>
            {
                var post = Parameters.ValueOf<bool?>(parameters, Context.Request, "post", ParameterType.Query);
                var apply = Parameters.ValueOf<bool?>(parameters, Context.Request, "apply", ParameterType.Query);
                var delete = Parameters.ValueOf<bool?>(parameters, Context.Request, "delete", ParameterType.Query);
                var action = Parameters.ValueOf<string>(parameters, Context.Request, "action", ParameterType.Query);
                var location = Parameters.ValueOf<string>(parameters, Context.Request, "location", ParameterType.Query);
                var propertylist = Parameters.ValueOf<List<string>>(parameters, Context.Request, "propertylist", ParameterType.Query);
                var jobTopics = Parameters.ValueOf<string>(parameters, Context.Request, "jobTopics", ParameterType.Query);
                return service.ComAdobeGraniteMaintenanceCrxImplLuceneBinariesCleanupTask(Context, post, apply, delete, action, location, propertylist, jobTopics);
            };

            Post["/system/console/configMgr/com.adobe.granite.maintenance.crx.impl.RevisionCleanupTask"] = parameters =>
            {
                var post = Parameters.ValueOf<bool?>(parameters, Context.Request, "post", ParameterType.Query);
                var apply = Parameters.ValueOf<bool?>(parameters, Context.Request, "apply", ParameterType.Query);
                var delete = Parameters.ValueOf<bool?>(parameters, Context.Request, "delete", ParameterType.Query);
                var action = Parameters.ValueOf<string>(parameters, Context.Request, "action", ParameterType.Query);
                var location = Parameters.ValueOf<string>(parameters, Context.Request, "location", ParameterType.Query);
                var propertylist = Parameters.ValueOf<List<string>>(parameters, Context.Request, "propertylist", ParameterType.Query);
                var fullGcDays = Parameters.ValueOf<List<string>>(parameters, Context.Request, "fullGcDays", ParameterType.Query);
                return service.ComAdobeGraniteMaintenanceCrxImplRevisionCleanupTask(Context, post, apply, delete, action, location, propertylist, fullGcDays);
            };

            Post["/system/console/configMgr/com.adobe.granite.monitoring.impl.ScriptConfigImpl"] = parameters =>
            {
                var post = Parameters.ValueOf<bool?>(parameters, Context.Request, "post", ParameterType.Query);
                var apply = Parameters.ValueOf<bool?>(parameters, Context.Request, "apply", ParameterType.Query);
                var delete = Parameters.ValueOf<bool?>(parameters, Context.Request, "delete", ParameterType.Query);
                var action = Parameters.ValueOf<string>(parameters, Context.Request, "action", ParameterType.Query);
                var location = Parameters.ValueOf<string>(parameters, Context.Request, "location", ParameterType.Query);
                var propertylist = Parameters.ValueOf<List<string>>(parameters, Context.Request, "propertylist", ParameterType.Query);
                var scriptFilename = Parameters.ValueOf<string>(parameters, Context.Request, "scriptFilename", ParameterType.Query);
                var scriptDisplay = Parameters.ValueOf<string>(parameters, Context.Request, "scriptDisplay", ParameterType.Query);
                var scriptPath = Parameters.ValueOf<string>(parameters, Context.Request, "scriptPath", ParameterType.Query);
                var scriptPlatform = Parameters.ValueOf<List<string>>(parameters, Context.Request, "scriptPlatform", ParameterType.Query);
                var interval = Parameters.ValueOf<int?>(parameters, Context.Request, "interval", ParameterType.Query);
                var jmxdomain = Parameters.ValueOf<string>(parameters, Context.Request, "jmxdomain", ParameterType.Query);
                return service.ComAdobeGraniteMonitoringImplScriptConfigImpl(Context, post, apply, delete, action, location, propertylist, scriptFilename, scriptDisplay, scriptPath, scriptPlatform, interval, jmxdomain);
            };

            Post["/system/console/configMgr/com.adobe.granite.oauth.server.auth.impl.OAuth2ServerAuthenticationHandler"] = parameters =>
            {
                var post = Parameters.ValueOf<bool?>(parameters, Context.Request, "post", ParameterType.Query);
                var apply = Parameters.ValueOf<bool?>(parameters, Context.Request, "apply", ParameterType.Query);
                var delete = Parameters.ValueOf<bool?>(parameters, Context.Request, "delete", ParameterType.Query);
                var action = Parameters.ValueOf<string>(parameters, Context.Request, "action", ParameterType.Query);
                var location = Parameters.ValueOf<string>(parameters, Context.Request, "location", ParameterType.Query);
                var propertylist = Parameters.ValueOf<List<string>>(parameters, Context.Request, "propertylist", ParameterType.Query);
                var path = Parameters.ValueOf<string>(parameters, Context.Request, "path", ParameterType.Query);
                var jaasControlFlag = Parameters.ValueOf<string>(parameters, Context.Request, "jaasControlFlag", ParameterType.Query);
                var jaasRealmName = Parameters.ValueOf<string>(parameters, Context.Request, "jaasRealmName", ParameterType.Query);
                var jaasRanking = Parameters.ValueOf<int?>(parameters, Context.Request, "jaasRanking", ParameterType.Query);
                var oauthOfflineValidation = Parameters.ValueOf<bool?>(parameters, Context.Request, "oauthOfflineValidation", ParameterType.Query);
                return service.ComAdobeGraniteOauthServerAuthImplOAuth2ServerAuthenticationHan(Context, post, apply, delete, action, location, propertylist, path, jaasControlFlag, jaasRealmName, jaasRanking, oauthOfflineValidation);
            };

            Post["/system/console/configMgr/com.adobe.granite.oauth.server.impl.AccessTokenCleanupTask"] = parameters =>
            {
                var post = Parameters.ValueOf<bool?>(parameters, Context.Request, "post", ParameterType.Query);
                var apply = Parameters.ValueOf<bool?>(parameters, Context.Request, "apply", ParameterType.Query);
                var delete = Parameters.ValueOf<bool?>(parameters, Context.Request, "delete", ParameterType.Query);
                var action = Parameters.ValueOf<string>(parameters, Context.Request, "action", ParameterType.Query);
                var location = Parameters.ValueOf<string>(parameters, Context.Request, "location", ParameterType.Query);
                var propertylist = Parameters.ValueOf<List<string>>(parameters, Context.Request, "propertylist", ParameterType.Query);
                var schedulerExpression = Parameters.ValueOf<string>(parameters, Context.Request, "schedulerExpression", ParameterType.Query);
                return service.ComAdobeGraniteOauthServerImplAccessTokenCleanupTask(Context, post, apply, delete, action, location, propertylist, schedulerExpression);
            };

            Post["/system/console/configMgr/com.adobe.granite.oauth.server.impl.OAuth2ClientRevocationServlet"] = parameters =>
            {
                var post = Parameters.ValueOf<bool?>(parameters, Context.Request, "post", ParameterType.Query);
                var apply = Parameters.ValueOf<bool?>(parameters, Context.Request, "apply", ParameterType.Query);
                var delete = Parameters.ValueOf<bool?>(parameters, Context.Request, "delete", ParameterType.Query);
                var action = Parameters.ValueOf<string>(parameters, Context.Request, "action", ParameterType.Query);
                var location = Parameters.ValueOf<string>(parameters, Context.Request, "location", ParameterType.Query);
                var propertylist = Parameters.ValueOf<List<string>>(parameters, Context.Request, "propertylist", ParameterType.Query);
                var oauthClientRevocationActive = Parameters.ValueOf<bool?>(parameters, Context.Request, "oauthClientRevocationActive", ParameterType.Query);
                return service.ComAdobeGraniteOauthServerImplOAuth2ClientRevocationServlet(Context, post, apply, delete, action, location, propertylist, oauthClientRevocationActive);
            };

            Post["/system/console/configMgr/com.adobe.granite.oauth.server.impl.OAuth2RevocationEndpointServlet"] = parameters =>
            {
                var post = Parameters.ValueOf<bool?>(parameters, Context.Request, "post", ParameterType.Query);
                var apply = Parameters.ValueOf<bool?>(parameters, Context.Request, "apply", ParameterType.Query);
                var delete = Parameters.ValueOf<bool?>(parameters, Context.Request, "delete", ParameterType.Query);
                var action = Parameters.ValueOf<string>(parameters, Context.Request, "action", ParameterType.Query);
                var location = Parameters.ValueOf<string>(parameters, Context.Request, "location", ParameterType.Query);
                var propertylist = Parameters.ValueOf<List<string>>(parameters, Context.Request, "propertylist", ParameterType.Query);
                var slingServletPaths = Parameters.ValueOf<string>(parameters, Context.Request, "slingServletPaths", ParameterType.Query);
                var oauthRevocationActive = Parameters.ValueOf<bool?>(parameters, Context.Request, "oauthRevocationActive", ParameterType.Query);
                return service.ComAdobeGraniteOauthServerImplOAuth2RevocationEndpointServlet(Context, post, apply, delete, action, location, propertylist, slingServletPaths, oauthRevocationActive);
            };

            Post["/system/console/configMgr/com.adobe.granite.oauth.server.impl.OAuth2TokenEndpointServlet"] = parameters =>
            {
                var post = Parameters.ValueOf<bool?>(parameters, Context.Request, "post", ParameterType.Query);
                var apply = Parameters.ValueOf<bool?>(parameters, Context.Request, "apply", ParameterType.Query);
                var delete = Parameters.ValueOf<bool?>(parameters, Context.Request, "delete", ParameterType.Query);
                var action = Parameters.ValueOf<string>(parameters, Context.Request, "action", ParameterType.Query);
                var location = Parameters.ValueOf<string>(parameters, Context.Request, "location", ParameterType.Query);
                var propertylist = Parameters.ValueOf<List<string>>(parameters, Context.Request, "propertylist", ParameterType.Query);
                var oauthIssuer = Parameters.ValueOf<string>(parameters, Context.Request, "oauthIssuer", ParameterType.Query);
                var oauthAccessTokenExpiresIn = Parameters.ValueOf<string>(parameters, Context.Request, "oauthAccessTokenExpiresIn", ParameterType.Query);
                var osgiHttpWhiteboardServletPattern = Parameters.ValueOf<string>(parameters, Context.Request, "osgiHttpWhiteboardServletPattern", ParameterType.Query);
                var osgiHttpWhiteboardContextSelect = Parameters.ValueOf<string>(parameters, Context.Request, "osgiHttpWhiteboardContextSelect", ParameterType.Query);
                return service.ComAdobeGraniteOauthServerImplOAuth2TokenEndpointServlet(Context, post, apply, delete, action, location, propertylist, oauthIssuer, oauthAccessTokenExpiresIn, osgiHttpWhiteboardServletPattern, osgiHttpWhiteboardContextSelect);
            };

            Post["/system/console/configMgr/com.adobe.granite.oauth.server.impl.OAuth2TokenRevocationServlet"] = parameters =>
            {
                var post = Parameters.ValueOf<bool?>(parameters, Context.Request, "post", ParameterType.Query);
                var apply = Parameters.ValueOf<bool?>(parameters, Context.Request, "apply", ParameterType.Query);
                var delete = Parameters.ValueOf<bool?>(parameters, Context.Request, "delete", ParameterType.Query);
                var action = Parameters.ValueOf<string>(parameters, Context.Request, "action", ParameterType.Query);
                var location = Parameters.ValueOf<string>(parameters, Context.Request, "location", ParameterType.Query);
                var propertylist = Parameters.ValueOf<List<string>>(parameters, Context.Request, "propertylist", ParameterType.Query);
                var oauthTokenRevocationActive = Parameters.ValueOf<bool?>(parameters, Context.Request, "oauthTokenRevocationActive", ParameterType.Query);
                return service.ComAdobeGraniteOauthServerImplOAuth2TokenRevocationServlet(Context, post, apply, delete, action, location, propertylist, oauthTokenRevocationActive);
            };

            Post["/system/console/configMgr/com.adobe.granite.offloading.impl.OffloadingConfigurator"] = parameters =>
            {
                var post = Parameters.ValueOf<bool?>(parameters, Context.Request, "post", ParameterType.Query);
                var apply = Parameters.ValueOf<bool?>(parameters, Context.Request, "apply", ParameterType.Query);
                var delete = Parameters.ValueOf<bool?>(parameters, Context.Request, "delete", ParameterType.Query);
                var action = Parameters.ValueOf<string>(parameters, Context.Request, "action", ParameterType.Query);
                var location = Parameters.ValueOf<string>(parameters, Context.Request, "location", ParameterType.Query);
                var propertylist = Parameters.ValueOf<List<string>>(parameters, Context.Request, "propertylist", ParameterType.Query);
                var offloadingTransporter = Parameters.ValueOf<string>(parameters, Context.Request, "offloadingTransporter", ParameterType.Query);
                var offloadingCleanupPayload = Parameters.ValueOf<bool?>(parameters, Context.Request, "offloadingCleanupPayload", ParameterType.Query);
                return service.ComAdobeGraniteOffloadingImplOffloadingConfigurator(Context, post, apply, delete, action, location, propertylist, offloadingTransporter, offloadingCleanupPayload);
            };

            Post["/system/console/configMgr/com.adobe.granite.offloading.impl.OffloadingJobCloner"] = parameters =>
            {
                var post = Parameters.ValueOf<bool?>(parameters, Context.Request, "post", ParameterType.Query);
                var apply = Parameters.ValueOf<bool?>(parameters, Context.Request, "apply", ParameterType.Query);
                var delete = Parameters.ValueOf<bool?>(parameters, Context.Request, "delete", ParameterType.Query);
                var action = Parameters.ValueOf<string>(parameters, Context.Request, "action", ParameterType.Query);
                var location = Parameters.ValueOf<string>(parameters, Context.Request, "location", ParameterType.Query);
                var propertylist = Parameters.ValueOf<List<string>>(parameters, Context.Request, "propertylist", ParameterType.Query);
                var offloadingJobclonerEnabled = Parameters.ValueOf<bool?>(parameters, Context.Request, "offloadingJobclonerEnabled", ParameterType.Query);
                return service.ComAdobeGraniteOffloadingImplOffloadingJobCloner(Context, post, apply, delete, action, location, propertylist, offloadingJobclonerEnabled);
            };

            Post["/system/console/configMgr/com.adobe.granite.offloading.impl.OffloadingJobOffloader"] = parameters =>
            {
                var post = Parameters.ValueOf<bool?>(parameters, Context.Request, "post", ParameterType.Query);
                var apply = Parameters.ValueOf<bool?>(parameters, Context.Request, "apply", ParameterType.Query);
                var delete = Parameters.ValueOf<bool?>(parameters, Context.Request, "delete", ParameterType.Query);
                var action = Parameters.ValueOf<string>(parameters, Context.Request, "action", ParameterType.Query);
                var location = Parameters.ValueOf<string>(parameters, Context.Request, "location", ParameterType.Query);
                var propertylist = Parameters.ValueOf<List<string>>(parameters, Context.Request, "propertylist", ParameterType.Query);
                var offloadingOffloaderEnabled = Parameters.ValueOf<bool?>(parameters, Context.Request, "offloadingOffloaderEnabled", ParameterType.Query);
                return service.ComAdobeGraniteOffloadingImplOffloadingJobOffloader(Context, post, apply, delete, action, location, propertylist, offloadingOffloaderEnabled);
            };

            Post["/system/console/configMgr/com.adobe.granite.offloading.impl.transporter.OffloadingAgentManager"] = parameters =>
            {
                var post = Parameters.ValueOf<bool?>(parameters, Context.Request, "post", ParameterType.Query);
                var apply = Parameters.ValueOf<bool?>(parameters, Context.Request, "apply", ParameterType.Query);
                var delete = Parameters.ValueOf<bool?>(parameters, Context.Request, "delete", ParameterType.Query);
                var action = Parameters.ValueOf<string>(parameters, Context.Request, "action", ParameterType.Query);
                var location = Parameters.ValueOf<string>(parameters, Context.Request, "location", ParameterType.Query);
                var propertylist = Parameters.ValueOf<List<string>>(parameters, Context.Request, "propertylist", ParameterType.Query);
                var offloadingAgentmanagerEnabled = Parameters.ValueOf<bool?>(parameters, Context.Request, "offloadingAgentmanagerEnabled", ParameterType.Query);
                return service.ComAdobeGraniteOffloadingImplTransporterOffloadingAgentManager(Context, post, apply, delete, action, location, propertylist, offloadingAgentmanagerEnabled);
            };

            Post["/system/console/configMgr/com.adobe.granite.offloading.impl.transporter.OffloadingDefaultTransporter"] = parameters =>
            {
                var post = Parameters.ValueOf<bool?>(parameters, Context.Request, "post", ParameterType.Query);
                var apply = Parameters.ValueOf<bool?>(parameters, Context.Request, "apply", ParameterType.Query);
                var delete = Parameters.ValueOf<bool?>(parameters, Context.Request, "delete", ParameterType.Query);
                var action = Parameters.ValueOf<string>(parameters, Context.Request, "action", ParameterType.Query);
                var location = Parameters.ValueOf<string>(parameters, Context.Request, "location", ParameterType.Query);
                var propertylist = Parameters.ValueOf<List<string>>(parameters, Context.Request, "propertylist", ParameterType.Query);
                var defaultTransportAgentToWorkerPrefix = Parameters.ValueOf<string>(parameters, Context.Request, "defaultTransportAgentToWorkerPrefix", ParameterType.Query);
                var defaultTransportAgentToMasterPrefix = Parameters.ValueOf<string>(parameters, Context.Request, "defaultTransportAgentToMasterPrefix", ParameterType.Query);
                var defaultTransportInputPackage = Parameters.ValueOf<string>(parameters, Context.Request, "defaultTransportInputPackage", ParameterType.Query);
                var defaultTransportOutputPackage = Parameters.ValueOf<string>(parameters, Context.Request, "defaultTransportOutputPackage", ParameterType.Query);
                var defaultTransportReplicationSynchronous = Parameters.ValueOf<bool?>(parameters, Context.Request, "defaultTransportReplicationSynchronous", ParameterType.Query);
                var defaultTransportContentpackage = Parameters.ValueOf<bool?>(parameters, Context.Request, "defaultTransportContentpackage", ParameterType.Query);
                var offloadingTransporterDefaultEnabled = Parameters.ValueOf<bool?>(parameters, Context.Request, "offloadingTransporterDefaultEnabled", ParameterType.Query);
                return service.ComAdobeGraniteOffloadingImplTransporterOffloadingDefaultTranspo(Context, post, apply, delete, action, location, propertylist, defaultTransportAgentToWorkerPrefix, defaultTransportAgentToMasterPrefix, defaultTransportInputPackage, defaultTransportOutputPackage, defaultTransportReplicationSynchronous, defaultTransportContentpackage, offloadingTransporterDefaultEnabled);
            };

            Post["/system/console/configMgr/com.adobe.granite.omnisearch.impl.core.OmniSearchServiceImpl"] = parameters =>
            {
                var post = Parameters.ValueOf<bool?>(parameters, Context.Request, "post", ParameterType.Query);
                var apply = Parameters.ValueOf<bool?>(parameters, Context.Request, "apply", ParameterType.Query);
                var delete = Parameters.ValueOf<bool?>(parameters, Context.Request, "delete", ParameterType.Query);
                var action = Parameters.ValueOf<string>(parameters, Context.Request, "action", ParameterType.Query);
                var location = Parameters.ValueOf<string>(parameters, Context.Request, "location", ParameterType.Query);
                var propertylist = Parameters.ValueOf<List<string>>(parameters, Context.Request, "propertylist", ParameterType.Query);
                var omnisearchSuggestionRequiretextMin = Parameters.ValueOf<int?>(parameters, Context.Request, "omnisearchSuggestionRequiretextMin", ParameterType.Query);
                var omnisearchSuggestionSpellcheckRequire = Parameters.ValueOf<bool?>(parameters, Context.Request, "omnisearchSuggestionSpellcheckRequire", ParameterType.Query);
                return service.ComAdobeGraniteOmnisearchImplCoreOmniSearchServiceImpl(Context, post, apply, delete, action, location, propertylist, omnisearchSuggestionRequiretextMin, omnisearchSuggestionSpellcheckRequire);
            };

            Post["/system/console/configMgr/com.adobe.granite.optout.impl.OptOutServiceImpl"] = parameters =>
            {
                var post = Parameters.ValueOf<bool?>(parameters, Context.Request, "post", ParameterType.Query);
                var apply = Parameters.ValueOf<bool?>(parameters, Context.Request, "apply", ParameterType.Query);
                var delete = Parameters.ValueOf<bool?>(parameters, Context.Request, "delete", ParameterType.Query);
                var action = Parameters.ValueOf<string>(parameters, Context.Request, "action", ParameterType.Query);
                var location = Parameters.ValueOf<string>(parameters, Context.Request, "location", ParameterType.Query);
                var propertylist = Parameters.ValueOf<List<string>>(parameters, Context.Request, "propertylist", ParameterType.Query);
                var optoutCookies = Parameters.ValueOf<List<string>>(parameters, Context.Request, "optoutCookies", ParameterType.Query);
                var optoutHeaders = Parameters.ValueOf<List<string>>(parameters, Context.Request, "optoutHeaders", ParameterType.Query);
                var optoutWhitelistCookies = Parameters.ValueOf<List<string>>(parameters, Context.Request, "optoutWhitelistCookies", ParameterType.Query);
                return service.ComAdobeGraniteOptoutImplOptOutServiceImpl(Context, post, apply, delete, action, location, propertylist, optoutCookies, optoutHeaders, optoutWhitelistCookies);
            };

            Post["/system/console/configMgr/com.adobe.granite.queries.impl.hc.AsyncIndexHealthCheck"] = parameters =>
            {
                var post = Parameters.ValueOf<bool?>(parameters, Context.Request, "post", ParameterType.Query);
                var apply = Parameters.ValueOf<bool?>(parameters, Context.Request, "apply", ParameterType.Query);
                var delete = Parameters.ValueOf<bool?>(parameters, Context.Request, "delete", ParameterType.Query);
                var action = Parameters.ValueOf<string>(parameters, Context.Request, "action", ParameterType.Query);
                var location = Parameters.ValueOf<string>(parameters, Context.Request, "location", ParameterType.Query);
                var propertylist = Parameters.ValueOf<List<string>>(parameters, Context.Request, "propertylist", ParameterType.Query);
                var indexingCriticalThreshold = Parameters.ValueOf<int?>(parameters, Context.Request, "indexingCriticalThreshold", ParameterType.Query);
                var indexingWarnThreshold = Parameters.ValueOf<int?>(parameters, Context.Request, "indexingWarnThreshold", ParameterType.Query);
                var hcTags = Parameters.ValueOf<List<string>>(parameters, Context.Request, "hcTags", ParameterType.Query);
                return service.ComAdobeGraniteQueriesImplHcAsyncIndexHealthCheck(Context, post, apply, delete, action, location, propertylist, indexingCriticalThreshold, indexingWarnThreshold, hcTags);
            };

            Post["/system/console/configMgr/com.adobe.granite.queries.impl.hc.LargeIndexHealthCheck"] = parameters =>
            {
                var post = Parameters.ValueOf<bool?>(parameters, Context.Request, "post", ParameterType.Query);
                var apply = Parameters.ValueOf<bool?>(parameters, Context.Request, "apply", ParameterType.Query);
                var delete = Parameters.ValueOf<bool?>(parameters, Context.Request, "delete", ParameterType.Query);
                var action = Parameters.ValueOf<string>(parameters, Context.Request, "action", ParameterType.Query);
                var location = Parameters.ValueOf<string>(parameters, Context.Request, "location", ParameterType.Query);
                var propertylist = Parameters.ValueOf<List<string>>(parameters, Context.Request, "propertylist", ParameterType.Query);
                var largeIndexCriticalThreshold = Parameters.ValueOf<int?>(parameters, Context.Request, "largeIndexCriticalThreshold", ParameterType.Query);
                var largeIndexWarnThreshold = Parameters.ValueOf<int?>(parameters, Context.Request, "largeIndexWarnThreshold", ParameterType.Query);
                var hcTags = Parameters.ValueOf<List<string>>(parameters, Context.Request, "hcTags", ParameterType.Query);
                return service.ComAdobeGraniteQueriesImplHcLargeIndexHealthCheck(Context, post, apply, delete, action, location, propertylist, largeIndexCriticalThreshold, largeIndexWarnThreshold, hcTags);
            };

            Post["/system/console/configMgr/com.adobe.granite.queries.impl.hc.QueriesStatusHealthCheck"] = parameters =>
            {
                var post = Parameters.ValueOf<bool?>(parameters, Context.Request, "post", ParameterType.Query);
                var apply = Parameters.ValueOf<bool?>(parameters, Context.Request, "apply", ParameterType.Query);
                var delete = Parameters.ValueOf<bool?>(parameters, Context.Request, "delete", ParameterType.Query);
                var action = Parameters.ValueOf<string>(parameters, Context.Request, "action", ParameterType.Query);
                var location = Parameters.ValueOf<string>(parameters, Context.Request, "location", ParameterType.Query);
                var propertylist = Parameters.ValueOf<List<string>>(parameters, Context.Request, "propertylist", ParameterType.Query);
                var hcTags = Parameters.ValueOf<List<string>>(parameters, Context.Request, "hcTags", ParameterType.Query);
                return service.ComAdobeGraniteQueriesImplHcQueriesStatusHealthCheck(Context, post, apply, delete, action, location, propertylist, hcTags);
            };

            Post["/system/console/configMgr/com.adobe.granite.queries.impl.hc.QueryHealthCheckMetrics"] = parameters =>
            {
                var post = Parameters.ValueOf<bool?>(parameters, Context.Request, "post", ParameterType.Query);
                var apply = Parameters.ValueOf<bool?>(parameters, Context.Request, "apply", ParameterType.Query);
                var delete = Parameters.ValueOf<bool?>(parameters, Context.Request, "delete", ParameterType.Query);
                var action = Parameters.ValueOf<string>(parameters, Context.Request, "action", ParameterType.Query);
                var location = Parameters.ValueOf<string>(parameters, Context.Request, "location", ParameterType.Query);
                var propertylist = Parameters.ValueOf<List<string>>(parameters, Context.Request, "propertylist", ParameterType.Query);
                var getPeriod = Parameters.ValueOf<int?>(parameters, Context.Request, "getPeriod", ParameterType.Query);
                return service.ComAdobeGraniteQueriesImplHcQueryHealthCheckMetrics(Context, post, apply, delete, action, location, propertylist, getPeriod);
            };

            Post["/system/console/configMgr/com.adobe.granite.queries.impl.hc.QueryLimitsHealthCheck"] = parameters =>
            {
                var post = Parameters.ValueOf<bool?>(parameters, Context.Request, "post", ParameterType.Query);
                var apply = Parameters.ValueOf<bool?>(parameters, Context.Request, "apply", ParameterType.Query);
                var delete = Parameters.ValueOf<bool?>(parameters, Context.Request, "delete", ParameterType.Query);
                var action = Parameters.ValueOf<string>(parameters, Context.Request, "action", ParameterType.Query);
                var location = Parameters.ValueOf<string>(parameters, Context.Request, "location", ParameterType.Query);
                var propertylist = Parameters.ValueOf<List<string>>(parameters, Context.Request, "propertylist", ParameterType.Query);
                var hcTags = Parameters.ValueOf<List<string>>(parameters, Context.Request, "hcTags", ParameterType.Query);
                return service.ComAdobeGraniteQueriesImplHcQueryLimitsHealthCheck(Context, post, apply, delete, action, location, propertylist, hcTags);
            };

            Post["/system/console/configMgr/com.adobe.granite.replication.hc.impl.ReplicationQueueHealthCheck"] = parameters =>
            {
                var post = Parameters.ValueOf<bool?>(parameters, Context.Request, "post", ParameterType.Query);
                var apply = Parameters.ValueOf<bool?>(parameters, Context.Request, "apply", ParameterType.Query);
                var delete = Parameters.ValueOf<bool?>(parameters, Context.Request, "delete", ParameterType.Query);
                var action = Parameters.ValueOf<string>(parameters, Context.Request, "action", ParameterType.Query);
                var location = Parameters.ValueOf<string>(parameters, Context.Request, "location", ParameterType.Query);
                var propertylist = Parameters.ValueOf<List<string>>(parameters, Context.Request, "propertylist", ParameterType.Query);
                var numberOfRetriesAllowed = Parameters.ValueOf<int?>(parameters, Context.Request, "numberOfRetriesAllowed", ParameterType.Query);
                var hcTags = Parameters.ValueOf<List<string>>(parameters, Context.Request, "hcTags", ParameterType.Query);
                return service.ComAdobeGraniteReplicationHcImplReplicationQueueHealthCheck(Context, post, apply, delete, action, location, propertylist, numberOfRetriesAllowed, hcTags);
            };

            Post["/system/console/configMgr/com.adobe.granite.replication.hc.impl.ReplicationTransportUsersHealthCheck"] = parameters =>
            {
                var post = Parameters.ValueOf<bool?>(parameters, Context.Request, "post", ParameterType.Query);
                var apply = Parameters.ValueOf<bool?>(parameters, Context.Request, "apply", ParameterType.Query);
                var delete = Parameters.ValueOf<bool?>(parameters, Context.Request, "delete", ParameterType.Query);
                var action = Parameters.ValueOf<string>(parameters, Context.Request, "action", ParameterType.Query);
                var location = Parameters.ValueOf<string>(parameters, Context.Request, "location", ParameterType.Query);
                var propertylist = Parameters.ValueOf<List<string>>(parameters, Context.Request, "propertylist", ParameterType.Query);
                var hcTags = Parameters.ValueOf<List<string>>(parameters, Context.Request, "hcTags", ParameterType.Query);
                return service.ComAdobeGraniteReplicationHcImplReplicationTransportUsersHealthC(Context, post, apply, delete, action, location, propertylist, hcTags);
            };

            Post["/system/console/configMgr/com.adobe.granite.repository.hc.impl.AuthorizableNodeNameHealthCheck"] = parameters =>
            {
                var post = Parameters.ValueOf<bool?>(parameters, Context.Request, "post", ParameterType.Query);
                var apply = Parameters.ValueOf<bool?>(parameters, Context.Request, "apply", ParameterType.Query);
                var delete = Parameters.ValueOf<bool?>(parameters, Context.Request, "delete", ParameterType.Query);
                var action = Parameters.ValueOf<string>(parameters, Context.Request, "action", ParameterType.Query);
                var location = Parameters.ValueOf<string>(parameters, Context.Request, "location", ParameterType.Query);
                var propertylist = Parameters.ValueOf<List<string>>(parameters, Context.Request, "propertylist", ParameterType.Query);
                var hcTags = Parameters.ValueOf<List<string>>(parameters, Context.Request, "hcTags", ParameterType.Query);
                return service.ComAdobeGraniteRepositoryHcImplAuthorizableNodeNameHealthCheck(Context, post, apply, delete, action, location, propertylist, hcTags);
            };

            Post["/system/console/configMgr/com.adobe.granite.repository.hc.impl.content.sling.SlingContentHealthCheck"] = parameters =>
            {
                var post = Parameters.ValueOf<bool?>(parameters, Context.Request, "post", ParameterType.Query);
                var apply = Parameters.ValueOf<bool?>(parameters, Context.Request, "apply", ParameterType.Query);
                var delete = Parameters.ValueOf<bool?>(parameters, Context.Request, "delete", ParameterType.Query);
                var action = Parameters.ValueOf<string>(parameters, Context.Request, "action", ParameterType.Query);
                var location = Parameters.ValueOf<string>(parameters, Context.Request, "location", ParameterType.Query);
                var propertylist = Parameters.ValueOf<List<string>>(parameters, Context.Request, "propertylist", ParameterType.Query);
                var hcTags = Parameters.ValueOf<List<string>>(parameters, Context.Request, "hcTags", ParameterType.Query);
                var excludeSearchPath = Parameters.ValueOf<List<string>>(parameters, Context.Request, "excludeSearchPath", ParameterType.Query);
                return service.ComAdobeGraniteRepositoryHcImplContentSlingSlingContentHealthC(Context, post, apply, delete, action, location, propertylist, hcTags, excludeSearchPath);
            };

            Post["/system/console/configMgr/com.adobe.granite.repository.hc.impl.ContinuousRGCHealthCheck"] = parameters =>
            {
                var post = Parameters.ValueOf<bool?>(parameters, Context.Request, "post", ParameterType.Query);
                var apply = Parameters.ValueOf<bool?>(parameters, Context.Request, "apply", ParameterType.Query);
                var delete = Parameters.ValueOf<bool?>(parameters, Context.Request, "delete", ParameterType.Query);
                var action = Parameters.ValueOf<string>(parameters, Context.Request, "action", ParameterType.Query);
                var location = Parameters.ValueOf<string>(parameters, Context.Request, "location", ParameterType.Query);
                var propertylist = Parameters.ValueOf<List<string>>(parameters, Context.Request, "propertylist", ParameterType.Query);
                var hcTags = Parameters.ValueOf<List<string>>(parameters, Context.Request, "hcTags", ParameterType.Query);
                return service.ComAdobeGraniteRepositoryHcImplContinuousRGCHealthCheck(Context, post, apply, delete, action, location, propertylist, hcTags);
            };

            Post["/system/console/configMgr/com.adobe.granite.repository.hc.impl.DefaultAccessUserProfileHealthCheck"] = parameters =>
            {
                var post = Parameters.ValueOf<bool?>(parameters, Context.Request, "post", ParameterType.Query);
                var apply = Parameters.ValueOf<bool?>(parameters, Context.Request, "apply", ParameterType.Query);
                var delete = Parameters.ValueOf<bool?>(parameters, Context.Request, "delete", ParameterType.Query);
                var action = Parameters.ValueOf<string>(parameters, Context.Request, "action", ParameterType.Query);
                var location = Parameters.ValueOf<string>(parameters, Context.Request, "location", ParameterType.Query);
                var propertylist = Parameters.ValueOf<List<string>>(parameters, Context.Request, "propertylist", ParameterType.Query);
                var hcTags = Parameters.ValueOf<List<string>>(parameters, Context.Request, "hcTags", ParameterType.Query);
                return service.ComAdobeGraniteRepositoryHcImplDefaultAccessUserProfileHealthChe(Context, post, apply, delete, action, location, propertylist, hcTags);
            };

            Post["/system/console/configMgr/com.adobe.granite.repository.hc.impl.DefaultLoginsHealthCheck"] = parameters =>
            {
                var post = Parameters.ValueOf<bool?>(parameters, Context.Request, "post", ParameterType.Query);
                var apply = Parameters.ValueOf<bool?>(parameters, Context.Request, "apply", ParameterType.Query);
                var delete = Parameters.ValueOf<bool?>(parameters, Context.Request, "delete", ParameterType.Query);
                var action = Parameters.ValueOf<string>(parameters, Context.Request, "action", ParameterType.Query);
                var location = Parameters.ValueOf<string>(parameters, Context.Request, "location", ParameterType.Query);
                var propertylist = Parameters.ValueOf<List<string>>(parameters, Context.Request, "propertylist", ParameterType.Query);
                var hcTags = Parameters.ValueOf<List<string>>(parameters, Context.Request, "hcTags", ParameterType.Query);
                var accountLogins = Parameters.ValueOf<List<string>>(parameters, Context.Request, "accountLogins", ParameterType.Query);
                var consoleLogins = Parameters.ValueOf<List<string>>(parameters, Context.Request, "consoleLogins", ParameterType.Query);
                return service.ComAdobeGraniteRepositoryHcImplDefaultLoginsHealthCheck(Context, post, apply, delete, action, location, propertylist, hcTags, accountLogins, consoleLogins);
            };

            Post["/system/console/configMgr/com.adobe.granite.repository.hc.impl.DiskSpaceHealthCheck"] = parameters =>
            {
                var post = Parameters.ValueOf<bool?>(parameters, Context.Request, "post", ParameterType.Query);
                var apply = Parameters.ValueOf<bool?>(parameters, Context.Request, "apply", ParameterType.Query);
                var delete = Parameters.ValueOf<bool?>(parameters, Context.Request, "delete", ParameterType.Query);
                var action = Parameters.ValueOf<string>(parameters, Context.Request, "action", ParameterType.Query);
                var location = Parameters.ValueOf<string>(parameters, Context.Request, "location", ParameterType.Query);
                var propertylist = Parameters.ValueOf<List<string>>(parameters, Context.Request, "propertylist", ParameterType.Query);
                var hcTags = Parameters.ValueOf<List<string>>(parameters, Context.Request, "hcTags", ParameterType.Query);
                var diskSpaceWarnThreshold = Parameters.ValueOf<int?>(parameters, Context.Request, "diskSpaceWarnThreshold", ParameterType.Query);
                var diskSpaceErrorThreshold = Parameters.ValueOf<int?>(parameters, Context.Request, "diskSpaceErrorThreshold", ParameterType.Query);
                return service.ComAdobeGraniteRepositoryHcImplDiskSpaceHealthCheck(Context, post, apply, delete, action, location, propertylist, hcTags, diskSpaceWarnThreshold, diskSpaceErrorThreshold);
            };

            Post["/system/console/configMgr/com.adobe.granite.repository.hc.impl.ObservationQueueLengthHealthCheck"] = parameters =>
            {
                var post = Parameters.ValueOf<bool?>(parameters, Context.Request, "post", ParameterType.Query);
                var apply = Parameters.ValueOf<bool?>(parameters, Context.Request, "apply", ParameterType.Query);
                var delete = Parameters.ValueOf<bool?>(parameters, Context.Request, "delete", ParameterType.Query);
                var action = Parameters.ValueOf<string>(parameters, Context.Request, "action", ParameterType.Query);
                var location = Parameters.ValueOf<string>(parameters, Context.Request, "location", ParameterType.Query);
                var propertylist = Parameters.ValueOf<List<string>>(parameters, Context.Request, "propertylist", ParameterType.Query);
                var hcTags = Parameters.ValueOf<List<string>>(parameters, Context.Request, "hcTags", ParameterType.Query);
                return service.ComAdobeGraniteRepositoryHcImplObservationQueueLengthHealthCheck(Context, post, apply, delete, action, location, propertylist, hcTags);
            };

            Post["/system/console/configMgr/com.adobe.granite.repository.impl.CommitStatsConfig"] = parameters =>
            {
                var post = Parameters.ValueOf<bool?>(parameters, Context.Request, "post", ParameterType.Query);
                var apply = Parameters.ValueOf<bool?>(parameters, Context.Request, "apply", ParameterType.Query);
                var delete = Parameters.ValueOf<bool?>(parameters, Context.Request, "delete", ParameterType.Query);
                var action = Parameters.ValueOf<string>(parameters, Context.Request, "action", ParameterType.Query);
                var location = Parameters.ValueOf<string>(parameters, Context.Request, "location", ParameterType.Query);
                var propertylist = Parameters.ValueOf<List<string>>(parameters, Context.Request, "propertylist", ParameterType.Query);
                var enabled = Parameters.ValueOf<bool?>(parameters, Context.Request, "enabled", ParameterType.Query);
                var intervalSeconds = Parameters.ValueOf<int?>(parameters, Context.Request, "intervalSeconds", ParameterType.Query);
                var commitsPerIntervalThreshold = Parameters.ValueOf<int?>(parameters, Context.Request, "commitsPerIntervalThreshold", ParameterType.Query);
                var maxLocationLength = Parameters.ValueOf<int?>(parameters, Context.Request, "maxLocationLength", ParameterType.Query);
                var maxDetailsShown = Parameters.ValueOf<int?>(parameters, Context.Request, "maxDetailsShown", ParameterType.Query);
                var minDetailsPercentage = Parameters.ValueOf<int?>(parameters, Context.Request, "minDetailsPercentage", ParameterType.Query);
                var threadMatchers = Parameters.ValueOf<List<string>>(parameters, Context.Request, "threadMatchers", ParameterType.Query);
                var maxGreedyDepth = Parameters.ValueOf<int?>(parameters, Context.Request, "maxGreedyDepth", ParameterType.Query);
                var greedyStackMatchers = Parameters.ValueOf<string>(parameters, Context.Request, "greedyStackMatchers", ParameterType.Query);
                var stackFilters = Parameters.ValueOf<List<string>>(parameters, Context.Request, "stackFilters", ParameterType.Query);
                var stackMatchers = Parameters.ValueOf<List<string>>(parameters, Context.Request, "stackMatchers", ParameterType.Query);
                var stackCategorizers = Parameters.ValueOf<List<string>>(parameters, Context.Request, "stackCategorizers", ParameterType.Query);
                var stackShorteners = Parameters.ValueOf<List<string>>(parameters, Context.Request, "stackShorteners", ParameterType.Query);
                return service.ComAdobeGraniteRepositoryImplCommitStatsConfig(Context, post, apply, delete, action, location, propertylist, enabled, intervalSeconds, commitsPerIntervalThreshold, maxLocationLength, maxDetailsShown, minDetailsPercentage, threadMatchers, maxGreedyDepth, greedyStackMatchers, stackFilters, stackMatchers, stackCategorizers, stackShorteners);
            };

            Post["/system/console/configMgr/com.adobe.granite.repository.ServiceUserConfiguration"] = parameters =>
            {
                var post = Parameters.ValueOf<bool?>(parameters, Context.Request, "post", ParameterType.Query);
                var apply = Parameters.ValueOf<bool?>(parameters, Context.Request, "apply", ParameterType.Query);
                var delete = Parameters.ValueOf<bool?>(parameters, Context.Request, "delete", ParameterType.Query);
                var action = Parameters.ValueOf<string>(parameters, Context.Request, "action", ParameterType.Query);
                var location = Parameters.ValueOf<string>(parameters, Context.Request, "location", ParameterType.Query);
                var propertylist = Parameters.ValueOf<List<string>>(parameters, Context.Request, "propertylist", ParameterType.Query);
                var serviceRanking = Parameters.ValueOf<int?>(parameters, Context.Request, "serviceRanking", ParameterType.Query);
                var serviceusersSimpleSubjectPopulation = Parameters.ValueOf<bool?>(parameters, Context.Request, "serviceusersSimpleSubjectPopulation", ParameterType.Query);
                var serviceusersList = Parameters.ValueOf<List<string>>(parameters, Context.Request, "serviceusersList", ParameterType.Query);
                return service.ComAdobeGraniteRepositoryServiceUserConfiguration(Context, post, apply, delete, action, location, propertylist, serviceRanking, serviceusersSimpleSubjectPopulation, serviceusersList);
            };

            Post["/system/console/configMgr/com.adobe.granite.requests.logging.impl.hc.RequestsStatusHealthCheckImpl"] = parameters =>
            {
                var post = Parameters.ValueOf<bool?>(parameters, Context.Request, "post", ParameterType.Query);
                var apply = Parameters.ValueOf<bool?>(parameters, Context.Request, "apply", ParameterType.Query);
                var delete = Parameters.ValueOf<bool?>(parameters, Context.Request, "delete", ParameterType.Query);
                var action = Parameters.ValueOf<string>(parameters, Context.Request, "action", ParameterType.Query);
                var location = Parameters.ValueOf<string>(parameters, Context.Request, "location", ParameterType.Query);
                var propertylist = Parameters.ValueOf<List<string>>(parameters, Context.Request, "propertylist", ParameterType.Query);
                var hcTags = Parameters.ValueOf<List<string>>(parameters, Context.Request, "hcTags", ParameterType.Query);
                return service.ComAdobeGraniteRequestsLoggingImplHcRequestsStatusHealthCheckIm(Context, post, apply, delete, action, location, propertylist, hcTags);
            };

            Post["/system/console/configMgr/com.adobe.granite.resourcestatus.impl.CompositeStatusType"] = parameters =>
            {
                var post = Parameters.ValueOf<bool?>(parameters, Context.Request, "post", ParameterType.Query);
                var apply = Parameters.ValueOf<bool?>(parameters, Context.Request, "apply", ParameterType.Query);
                var delete = Parameters.ValueOf<bool?>(parameters, Context.Request, "delete", ParameterType.Query);
                var action = Parameters.ValueOf<string>(parameters, Context.Request, "action", ParameterType.Query);
                var location = Parameters.ValueOf<string>(parameters, Context.Request, "location", ParameterType.Query);
                var propertylist = Parameters.ValueOf<List<string>>(parameters, Context.Request, "propertylist", ParameterType.Query);
                var name = Parameters.ValueOf<string>(parameters, Context.Request, "name", ParameterType.Query);
                var types = Parameters.ValueOf<List<string>>(parameters, Context.Request, "types", ParameterType.Query);
                return service.ComAdobeGraniteResourcestatusImplCompositeStatusType(Context, post, apply, delete, action, location, propertylist, name, types);
            };

            Post["/system/console/configMgr/com.adobe.granite.resourcestatus.impl.StatusResourceProviderImpl"] = parameters =>
            {
                var post = Parameters.ValueOf<bool?>(parameters, Context.Request, "post", ParameterType.Query);
                var apply = Parameters.ValueOf<bool?>(parameters, Context.Request, "apply", ParameterType.Query);
                var delete = Parameters.ValueOf<bool?>(parameters, Context.Request, "delete", ParameterType.Query);
                var action = Parameters.ValueOf<string>(parameters, Context.Request, "action", ParameterType.Query);
                var location = Parameters.ValueOf<string>(parameters, Context.Request, "location", ParameterType.Query);
                var propertylist = Parameters.ValueOf<List<string>>(parameters, Context.Request, "propertylist", ParameterType.Query);
                var providerRoot = Parameters.ValueOf<string>(parameters, Context.Request, "providerRoot", ParameterType.Query);
                return service.ComAdobeGraniteResourcestatusImplStatusResourceProviderImpl(Context, post, apply, delete, action, location, propertylist, providerRoot);
            };

            Post["/system/console/configMgr/com.adobe.granite.rest.assets.impl.AssetContentDispositionFilter"] = parameters =>
            {
                var post = Parameters.ValueOf<bool?>(parameters, Context.Request, "post", ParameterType.Query);
                var apply = Parameters.ValueOf<bool?>(parameters, Context.Request, "apply", ParameterType.Query);
                var delete = Parameters.ValueOf<bool?>(parameters, Context.Request, "delete", ParameterType.Query);
                var action = Parameters.ValueOf<string>(parameters, Context.Request, "action", ParameterType.Query);
                var location = Parameters.ValueOf<string>(parameters, Context.Request, "location", ParameterType.Query);
                var propertylist = Parameters.ValueOf<List<string>>(parameters, Context.Request, "propertylist", ParameterType.Query);
                var mimeAllowEmpty = Parameters.ValueOf<bool?>(parameters, Context.Request, "mimeAllowEmpty", ParameterType.Query);
                var mimeAllowed = Parameters.ValueOf<List<string>>(parameters, Context.Request, "mimeAllowed", ParameterType.Query);
                return service.ComAdobeGraniteRestAssetsImplAssetContentDispositionFilter(Context, post, apply, delete, action, location, propertylist, mimeAllowEmpty, mimeAllowed);
            };

            Post["/system/console/configMgr/com.adobe.granite.rest.impl.ApiEndpointResourceProviderFactoryImpl"] = parameters =>
            {
                var post = Parameters.ValueOf<bool?>(parameters, Context.Request, "post", ParameterType.Query);
                var apply = Parameters.ValueOf<bool?>(parameters, Context.Request, "apply", ParameterType.Query);
                var delete = Parameters.ValueOf<bool?>(parameters, Context.Request, "delete", ParameterType.Query);
                var action = Parameters.ValueOf<string>(parameters, Context.Request, "action", ParameterType.Query);
                var location = Parameters.ValueOf<string>(parameters, Context.Request, "location", ParameterType.Query);
                var propertylist = Parameters.ValueOf<List<string>>(parameters, Context.Request, "propertylist", ParameterType.Query);
                var providerRoots = Parameters.ValueOf<string>(parameters, Context.Request, "providerRoots", ParameterType.Query);
                return service.ComAdobeGraniteRestImplApiEndpointResourceProviderFactoryImpl(Context, post, apply, delete, action, location, propertylist, providerRoots);
            };

            Post["/system/console/configMgr/com.adobe.granite.rest.impl.servlet.DefaultGETServlet"] = parameters =>
            {
                var post = Parameters.ValueOf<bool?>(parameters, Context.Request, "post", ParameterType.Query);
                var apply = Parameters.ValueOf<bool?>(parameters, Context.Request, "apply", ParameterType.Query);
                var delete = Parameters.ValueOf<bool?>(parameters, Context.Request, "delete", ParameterType.Query);
                var action = Parameters.ValueOf<string>(parameters, Context.Request, "action", ParameterType.Query);
                var location = Parameters.ValueOf<string>(parameters, Context.Request, "location", ParameterType.Query);
                var propertylist = Parameters.ValueOf<List<string>>(parameters, Context.Request, "propertylist", ParameterType.Query);
                var defaultLimit = Parameters.ValueOf<int?>(parameters, Context.Request, "defaultLimit", ParameterType.Query);
                var useAbsoluteUri = Parameters.ValueOf<bool?>(parameters, Context.Request, "useAbsoluteUri", ParameterType.Query);
                return service.ComAdobeGraniteRestImplServletDefaultGETServlet(Context, post, apply, delete, action, location, propertylist, defaultLimit, useAbsoluteUri);
            };

            Post["/system/console/configMgr/com.adobe.granite.security.user.ui.internal.servlets.SSLConfigurationServlet"] = parameters =>
            {
                var post = Parameters.ValueOf<bool?>(parameters, Context.Request, "post", ParameterType.Query);
                var apply = Parameters.ValueOf<bool?>(parameters, Context.Request, "apply", ParameterType.Query);
                var delete = Parameters.ValueOf<bool?>(parameters, Context.Request, "delete", ParameterType.Query);
                var action = Parameters.ValueOf<string>(parameters, Context.Request, "action", ParameterType.Query);
                var location = Parameters.ValueOf<string>(parameters, Context.Request, "location", ParameterType.Query);
                var propertylist = Parameters.ValueOf<List<string>>(parameters, Context.Request, "propertylist", ParameterType.Query);
                var hcTags = Parameters.ValueOf<List<string>>(parameters, Context.Request, "hcTags", ParameterType.Query);
                return service.ComAdobeGraniteSecurityUserUiInternalServletsSSLConfigurationS(Context, post, apply, delete, action, location, propertylist, hcTags);
            };

            Post["/system/console/configMgr/com.adobe.granite.security.user.UserPropertiesService"] = parameters =>
            {
                var post = Parameters.ValueOf<bool?>(parameters, Context.Request, "post", ParameterType.Query);
                var apply = Parameters.ValueOf<bool?>(parameters, Context.Request, "apply", ParameterType.Query);
                var delete = Parameters.ValueOf<bool?>(parameters, Context.Request, "delete", ParameterType.Query);
                var action = Parameters.ValueOf<string>(parameters, Context.Request, "action", ParameterType.Query);
                var location = Parameters.ValueOf<string>(parameters, Context.Request, "location", ParameterType.Query);
                var propertylist = Parameters.ValueOf<List<string>>(parameters, Context.Request, "propertylist", ParameterType.Query);
                var adapterCondition = Parameters.ValueOf<string>(parameters, Context.Request, "adapterCondition", ParameterType.Query);
                var graniteUserpropertiesNodetypes = Parameters.ValueOf<List<string>>(parameters, Context.Request, "graniteUserpropertiesNodetypes", ParameterType.Query);
                var graniteUserpropertiesResourcetypes = Parameters.ValueOf<List<string>>(parameters, Context.Request, "graniteUserpropertiesResourcetypes", ParameterType.Query);
                return service.ComAdobeGraniteSecurityUserUserPropertiesService(Context, post, apply, delete, action, location, propertylist, adapterCondition, graniteUserpropertiesNodetypes, graniteUserpropertiesResourcetypes);
            };

            Post["/system/console/configMgr/com.adobe.granite.socialgraph.impl.SocialGraphFactoryImpl"] = parameters =>
            {
                var post = Parameters.ValueOf<bool?>(parameters, Context.Request, "post", ParameterType.Query);
                var apply = Parameters.ValueOf<bool?>(parameters, Context.Request, "apply", ParameterType.Query);
                var delete = Parameters.ValueOf<bool?>(parameters, Context.Request, "delete", ParameterType.Query);
                var action = Parameters.ValueOf<string>(parameters, Context.Request, "action", ParameterType.Query);
                var location = Parameters.ValueOf<string>(parameters, Context.Request, "location", ParameterType.Query);
                var propertylist = Parameters.ValueOf<List<string>>(parameters, Context.Request, "propertylist", ParameterType.Query);
                var group2memberRelationshipOutgoing = Parameters.ValueOf<string>(parameters, Context.Request, "group2memberRelationshipOutgoing", ParameterType.Query);
                var group2memberExcludedOutgoing = Parameters.ValueOf<List<string>>(parameters, Context.Request, "group2memberExcludedOutgoing", ParameterType.Query);
                var group2memberRelationshipIncoming = Parameters.ValueOf<string>(parameters, Context.Request, "group2memberRelationshipIncoming", ParameterType.Query);
                var group2memberExcludedIncoming = Parameters.ValueOf<List<string>>(parameters, Context.Request, "group2memberExcludedIncoming", ParameterType.Query);
                return service.ComAdobeGraniteSocialgraphImplSocialGraphFactoryImpl(Context, post, apply, delete, action, location, propertylist, group2memberRelationshipOutgoing, group2memberExcludedOutgoing, group2memberRelationshipIncoming, group2memberExcludedIncoming);
            };

            Post["/system/console/configMgr/com.adobe.granite.system.monitoring.impl.SystemStatsMBeanImpl"] = parameters =>
            {
                var post = Parameters.ValueOf<bool?>(parameters, Context.Request, "post", ParameterType.Query);
                var apply = Parameters.ValueOf<bool?>(parameters, Context.Request, "apply", ParameterType.Query);
                var delete = Parameters.ValueOf<bool?>(parameters, Context.Request, "delete", ParameterType.Query);
                var action = Parameters.ValueOf<string>(parameters, Context.Request, "action", ParameterType.Query);
                var location = Parameters.ValueOf<string>(parameters, Context.Request, "location", ParameterType.Query);
                var propertylist = Parameters.ValueOf<List<string>>(parameters, Context.Request, "propertylist", ParameterType.Query);
                var schedulerExpression = Parameters.ValueOf<string>(parameters, Context.Request, "schedulerExpression", ParameterType.Query);
                var jmxObjectname = Parameters.ValueOf<string>(parameters, Context.Request, "jmxObjectname", ParameterType.Query);
                return service.ComAdobeGraniteSystemMonitoringImplSystemStatsMBeanImpl(Context, post, apply, delete, action, location, propertylist, schedulerExpression, jmxObjectname);
            };

            Post["/system/console/configMgr/com.adobe.granite.taskmanagement.impl.jcr.TaskAdapterFactory"] = parameters =>
            {
                var post = Parameters.ValueOf<bool?>(parameters, Context.Request, "post", ParameterType.Query);
                var apply = Parameters.ValueOf<bool?>(parameters, Context.Request, "apply", ParameterType.Query);
                var delete = Parameters.ValueOf<bool?>(parameters, Context.Request, "delete", ParameterType.Query);
                var action = Parameters.ValueOf<string>(parameters, Context.Request, "action", ParameterType.Query);
                var location = Parameters.ValueOf<string>(parameters, Context.Request, "location", ParameterType.Query);
                var propertylist = Parameters.ValueOf<List<string>>(parameters, Context.Request, "propertylist", ParameterType.Query);
                var adapterCondition = Parameters.ValueOf<string>(parameters, Context.Request, "adapterCondition", ParameterType.Query);
                return service.ComAdobeGraniteTaskmanagementImplJcrTaskAdapterFactory(Context, post, apply, delete, action, location, propertylist, adapterCondition);
            };

            Post["/system/console/configMgr/com.adobe.granite.taskmanagement.impl.jcr.TaskArchiveService"] = parameters =>
            {
                var post = Parameters.ValueOf<bool?>(parameters, Context.Request, "post", ParameterType.Query);
                var apply = Parameters.ValueOf<bool?>(parameters, Context.Request, "apply", ParameterType.Query);
                var delete = Parameters.ValueOf<bool?>(parameters, Context.Request, "delete", ParameterType.Query);
                var action = Parameters.ValueOf<string>(parameters, Context.Request, "action", ParameterType.Query);
                var location = Parameters.ValueOf<string>(parameters, Context.Request, "location", ParameterType.Query);
                var propertylist = Parameters.ValueOf<List<string>>(parameters, Context.Request, "propertylist", ParameterType.Query);
                var archivingEnabled = Parameters.ValueOf<bool?>(parameters, Context.Request, "archivingEnabled", ParameterType.Query);
                var schedulerExpression = Parameters.ValueOf<string>(parameters, Context.Request, "schedulerExpression", ParameterType.Query);
                var archiveSinceDaysCompleted = Parameters.ValueOf<int?>(parameters, Context.Request, "archiveSinceDaysCompleted", ParameterType.Query);
                return service.ComAdobeGraniteTaskmanagementImplJcrTaskArchiveService(Context, post, apply, delete, action, location, propertylist, archivingEnabled, schedulerExpression, archiveSinceDaysCompleted);
            };

            Post["/system/console/configMgr/com.adobe.granite.taskmanagement.impl.purge.TaskPurgeMaintenanceTask"] = parameters =>
            {
                var post = Parameters.ValueOf<bool?>(parameters, Context.Request, "post", ParameterType.Query);
                var apply = Parameters.ValueOf<bool?>(parameters, Context.Request, "apply", ParameterType.Query);
                var delete = Parameters.ValueOf<bool?>(parameters, Context.Request, "delete", ParameterType.Query);
                var action = Parameters.ValueOf<string>(parameters, Context.Request, "action", ParameterType.Query);
                var location = Parameters.ValueOf<string>(parameters, Context.Request, "location", ParameterType.Query);
                var propertylist = Parameters.ValueOf<List<string>>(parameters, Context.Request, "propertylist", ParameterType.Query);
                var purgeCompleted = Parameters.ValueOf<bool?>(parameters, Context.Request, "purgeCompleted", ParameterType.Query);
                var completedAge = Parameters.ValueOf<int?>(parameters, Context.Request, "completedAge", ParameterType.Query);
                var purgeActive = Parameters.ValueOf<bool?>(parameters, Context.Request, "purgeActive", ParameterType.Query);
                var activeAge = Parameters.ValueOf<int?>(parameters, Context.Request, "activeAge", ParameterType.Query);
                var saveThreshold = Parameters.ValueOf<int?>(parameters, Context.Request, "saveThreshold", ParameterType.Query);
                return service.ComAdobeGraniteTaskmanagementImplPurgeTaskPurgeMaintenanceTask(Context, post, apply, delete, action, location, propertylist, purgeCompleted, completedAge, purgeActive, activeAge, saveThreshold);
            };

            Post["/system/console/configMgr/com.adobe.granite.taskmanagement.impl.service.TaskManagerAdapterFactory"] = parameters =>
            {
                var post = Parameters.ValueOf<bool?>(parameters, Context.Request, "post", ParameterType.Query);
                var apply = Parameters.ValueOf<bool?>(parameters, Context.Request, "apply", ParameterType.Query);
                var delete = Parameters.ValueOf<bool?>(parameters, Context.Request, "delete", ParameterType.Query);
                var action = Parameters.ValueOf<string>(parameters, Context.Request, "action", ParameterType.Query);
                var location = Parameters.ValueOf<string>(parameters, Context.Request, "location", ParameterType.Query);
                var propertylist = Parameters.ValueOf<List<string>>(parameters, Context.Request, "propertylist", ParameterType.Query);
                var adapterCondition = Parameters.ValueOf<string>(parameters, Context.Request, "adapterCondition", ParameterType.Query);
                var taskmanagerAdmingroups = Parameters.ValueOf<List<string>>(parameters, Context.Request, "taskmanagerAdmingroups", ParameterType.Query);
                return service.ComAdobeGraniteTaskmanagementImplServiceTaskManagerAdapterFactor(Context, post, apply, delete, action, location, propertylist, adapterCondition, taskmanagerAdmingroups);
            };

            Post["/system/console/configMgr/com.adobe.granite.threaddump.ThreadDumpCollector"] = parameters =>
            {
                var post = Parameters.ValueOf<bool?>(parameters, Context.Request, "post", ParameterType.Query);
                var apply = Parameters.ValueOf<bool?>(parameters, Context.Request, "apply", ParameterType.Query);
                var delete = Parameters.ValueOf<bool?>(parameters, Context.Request, "delete", ParameterType.Query);
                var action = Parameters.ValueOf<string>(parameters, Context.Request, "action", ParameterType.Query);
                var location = Parameters.ValueOf<string>(parameters, Context.Request, "location", ParameterType.Query);
                var propertylist = Parameters.ValueOf<List<string>>(parameters, Context.Request, "propertylist", ParameterType.Query);
                var schedulerPeriod = Parameters.ValueOf<int?>(parameters, Context.Request, "schedulerPeriod", ParameterType.Query);
                var schedulerRunOn = Parameters.ValueOf<string>(parameters, Context.Request, "schedulerRunOn", ParameterType.Query);
                var graniteThreaddumpEnabled = Parameters.ValueOf<bool?>(parameters, Context.Request, "graniteThreaddumpEnabled", ParameterType.Query);
                var graniteThreaddumpDumpsPerFile = Parameters.ValueOf<int?>(parameters, Context.Request, "graniteThreaddumpDumpsPerFile", ParameterType.Query);
                var graniteThreaddumpEnableGzipCompression = Parameters.ValueOf<bool?>(parameters, Context.Request, "graniteThreaddumpEnableGzipCompression", ParameterType.Query);
                var graniteThreaddumpEnableDirectoriesCompression = Parameters.ValueOf<bool?>(parameters, Context.Request, "graniteThreaddumpEnableDirectoriesCompression", ParameterType.Query);
                var graniteThreaddumpEnableJStack = Parameters.ValueOf<bool?>(parameters, Context.Request, "graniteThreaddumpEnableJStack", ParameterType.Query);
                var graniteThreaddumpMaxBackupDays = Parameters.ValueOf<int?>(parameters, Context.Request, "graniteThreaddumpMaxBackupDays", ParameterType.Query);
                var graniteThreaddumpBackupCleanTrigger = Parameters.ValueOf<string>(parameters, Context.Request, "graniteThreaddumpBackupCleanTrigger", ParameterType.Query);
                return service.ComAdobeGraniteThreaddumpThreadDumpCollector(Context, post, apply, delete, action, location, propertylist, schedulerPeriod, schedulerRunOn, graniteThreaddumpEnabled, graniteThreaddumpDumpsPerFile, graniteThreaddumpEnableGzipCompression, graniteThreaddumpEnableDirectoriesCompression, graniteThreaddumpEnableJStack, graniteThreaddumpMaxBackupDays, graniteThreaddumpBackupCleanTrigger);
            };

            Post["/system/console/configMgr/com.adobe.granite.translation.connector.msft.core.impl.MicrosoftTranslationServiceFactoryImpl"] = parameters =>
            {
                var post = Parameters.ValueOf<bool?>(parameters, Context.Request, "post", ParameterType.Query);
                var apply = Parameters.ValueOf<bool?>(parameters, Context.Request, "apply", ParameterType.Query);
                var delete = Parameters.ValueOf<bool?>(parameters, Context.Request, "delete", ParameterType.Query);
                var action = Parameters.ValueOf<string>(parameters, Context.Request, "action", ParameterType.Query);
                var location = Parameters.ValueOf<string>(parameters, Context.Request, "location", ParameterType.Query);
                var propertylist = Parameters.ValueOf<List<string>>(parameters, Context.Request, "propertylist", ParameterType.Query);
                var translationFactory = Parameters.ValueOf<string>(parameters, Context.Request, "translationFactory", ParameterType.Query);
                var defaultConnectorLabel = Parameters.ValueOf<string>(parameters, Context.Request, "defaultConnectorLabel", ParameterType.Query);
                var defaultConnectorAttribution = Parameters.ValueOf<string>(parameters, Context.Request, "defaultConnectorAttribution", ParameterType.Query);
                var defaultConnectorWorkspaceId = Parameters.ValueOf<string>(parameters, Context.Request, "defaultConnectorWorkspaceId", ParameterType.Query);
                var defaultConnectorSubscriptionKey = Parameters.ValueOf<string>(parameters, Context.Request, "defaultConnectorSubscriptionKey", ParameterType.Query);
                var languageMapLocation = Parameters.ValueOf<string>(parameters, Context.Request, "languageMapLocation", ParameterType.Query);
                var categoryMapLocation = Parameters.ValueOf<string>(parameters, Context.Request, "categoryMapLocation", ParameterType.Query);
                var retryAttempts = Parameters.ValueOf<int?>(parameters, Context.Request, "retryAttempts", ParameterType.Query);
                var timeoutCount = Parameters.ValueOf<int?>(parameters, Context.Request, "timeoutCount", ParameterType.Query);
                return service.ComAdobeGraniteTranslationConnectorMsftCoreImplMicrosoftTransl(Context, post, apply, delete, action, location, propertylist, translationFactory, defaultConnectorLabel, defaultConnectorAttribution, defaultConnectorWorkspaceId, defaultConnectorSubscriptionKey, languageMapLocation, categoryMapLocation, retryAttempts, timeoutCount);
            };

            Post["/system/console/configMgr/com.adobe.granite.translation.core.impl.TranslationManagerImpl"] = parameters =>
            {
                var post = Parameters.ValueOf<bool?>(parameters, Context.Request, "post", ParameterType.Query);
                var apply = Parameters.ValueOf<bool?>(parameters, Context.Request, "apply", ParameterType.Query);
                var delete = Parameters.ValueOf<bool?>(parameters, Context.Request, "delete", ParameterType.Query);
                var action = Parameters.ValueOf<string>(parameters, Context.Request, "action", ParameterType.Query);
                var location = Parameters.ValueOf<string>(parameters, Context.Request, "location", ParameterType.Query);
                var propertylist = Parameters.ValueOf<List<string>>(parameters, Context.Request, "propertylist", ParameterType.Query);
                var defaultConnectorName = Parameters.ValueOf<string>(parameters, Context.Request, "defaultConnectorName", ParameterType.Query);
                var defaultCategory = Parameters.ValueOf<string>(parameters, Context.Request, "defaultCategory", ParameterType.Query);
                return service.ComAdobeGraniteTranslationCoreImplTranslationManagerImpl(Context, post, apply, delete, action, location, propertylist, defaultConnectorName, defaultCategory);
            };

            Post["/system/console/configMgr/com.adobe.granite.ui.clientlibs.impl.HtmlLibraryManagerImpl"] = parameters =>
            {
                var post = Parameters.ValueOf<bool?>(parameters, Context.Request, "post", ParameterType.Query);
                var apply = Parameters.ValueOf<bool?>(parameters, Context.Request, "apply", ParameterType.Query);
                var delete = Parameters.ValueOf<bool?>(parameters, Context.Request, "delete", ParameterType.Query);
                var action = Parameters.ValueOf<string>(parameters, Context.Request, "action", ParameterType.Query);
                var location = Parameters.ValueOf<string>(parameters, Context.Request, "location", ParameterType.Query);
                var propertylist = Parameters.ValueOf<List<string>>(parameters, Context.Request, "propertylist", ParameterType.Query);
                var htmllibmanagerTiming = Parameters.ValueOf<bool?>(parameters, Context.Request, "htmllibmanagerTiming", ParameterType.Query);
                var htmllibmanagerDebugInitJs = Parameters.ValueOf<string>(parameters, Context.Request, "htmllibmanagerDebugInitJs", ParameterType.Query);
                var htmllibmanagerMinify = Parameters.ValueOf<bool?>(parameters, Context.Request, "htmllibmanagerMinify", ParameterType.Query);
                var htmllibmanagerDebug = Parameters.ValueOf<bool?>(parameters, Context.Request, "htmllibmanagerDebug", ParameterType.Query);
                var htmllibmanagerGzip = Parameters.ValueOf<bool?>(parameters, Context.Request, "htmllibmanagerGzip", ParameterType.Query);
                var htmllibmanagerMaxDataUriSize = Parameters.ValueOf<int?>(parameters, Context.Request, "htmllibmanagerMaxDataUriSize", ParameterType.Query);
                var htmllibmanagerMaxage = Parameters.ValueOf<int?>(parameters, Context.Request, "htmllibmanagerMaxage", ParameterType.Query);
                var htmllibmanagerForceCQUrlInfo = Parameters.ValueOf<bool?>(parameters, Context.Request, "htmllibmanagerForceCQUrlInfo", ParameterType.Query);
                var htmllibmanagerDefaultthemename = Parameters.ValueOf<string>(parameters, Context.Request, "htmllibmanagerDefaultthemename", ParameterType.Query);
                var htmllibmanagerDefaultuserthemename = Parameters.ValueOf<string>(parameters, Context.Request, "htmllibmanagerDefaultuserthemename", ParameterType.Query);
                var htmllibmanagerClientmanager = Parameters.ValueOf<string>(parameters, Context.Request, "htmllibmanagerClientmanager", ParameterType.Query);
                var htmllibmanagerPathList = Parameters.ValueOf<List<string>>(parameters, Context.Request, "htmllibmanagerPathList", ParameterType.Query);
                var htmllibmanagerExcludedPathList = Parameters.ValueOf<List<string>>(parameters, Context.Request, "htmllibmanagerExcludedPathList", ParameterType.Query);
                var htmllibmanagerProcessorJs = Parameters.ValueOf<List<string>>(parameters, Context.Request, "htmllibmanagerProcessorJs", ParameterType.Query);
                var htmllibmanagerProcessorCss = Parameters.ValueOf<List<string>>(parameters, Context.Request, "htmllibmanagerProcessorCss", ParameterType.Query);
                var htmllibmanagerLongcachePatterns = Parameters.ValueOf<List<string>>(parameters, Context.Request, "htmllibmanagerLongcachePatterns", ParameterType.Query);
                var htmllibmanagerLongcacheFormat = Parameters.ValueOf<string>(parameters, Context.Request, "htmllibmanagerLongcacheFormat", ParameterType.Query);
                var htmllibmanagerUseFileSystemOutputCache = Parameters.ValueOf<bool?>(parameters, Context.Request, "htmllibmanagerUseFileSystemOutputCache", ParameterType.Query);
                var htmllibmanagerFileSystemOutputCacheLocation = Parameters.ValueOf<string>(parameters, Context.Request, "htmllibmanagerFileSystemOutputCacheLocation", ParameterType.Query);
                var htmllibmanagerDisableReplacement = Parameters.ValueOf<List<string>>(parameters, Context.Request, "htmllibmanagerDisableReplacement", ParameterType.Query);
                return service.ComAdobeGraniteUiClientlibsImplHtmlLibraryManagerImpl(Context, post, apply, delete, action, location, propertylist, htmllibmanagerTiming, htmllibmanagerDebugInitJs, htmllibmanagerMinify, htmllibmanagerDebug, htmllibmanagerGzip, htmllibmanagerMaxDataUriSize, htmllibmanagerMaxage, htmllibmanagerForceCQUrlInfo, htmllibmanagerDefaultthemename, htmllibmanagerDefaultuserthemename, htmllibmanagerClientmanager, htmllibmanagerPathList, htmllibmanagerExcludedPathList, htmllibmanagerProcessorJs, htmllibmanagerProcessorCss, htmllibmanagerLongcachePatterns, htmllibmanagerLongcacheFormat, htmllibmanagerUseFileSystemOutputCache, htmllibmanagerFileSystemOutputCacheLocation, htmllibmanagerDisableReplacement);
            };

            Post["/system/console/configMgr/com.adobe.granite.workflow.console.frags.WorkflowWithdrawFeature"] = parameters =>
            {
                var post = Parameters.ValueOf<bool?>(parameters, Context.Request, "post", ParameterType.Query);
                var apply = Parameters.ValueOf<bool?>(parameters, Context.Request, "apply", ParameterType.Query);
                var delete = Parameters.ValueOf<bool?>(parameters, Context.Request, "delete", ParameterType.Query);
                var action = Parameters.ValueOf<string>(parameters, Context.Request, "action", ParameterType.Query);
                var location = Parameters.ValueOf<string>(parameters, Context.Request, "location", ParameterType.Query);
                var propertylist = Parameters.ValueOf<List<string>>(parameters, Context.Request, "propertylist", ParameterType.Query);
                var enabled = Parameters.ValueOf<bool?>(parameters, Context.Request, "enabled", ParameterType.Query);
                return service.ComAdobeGraniteWorkflowConsoleFragsWorkflowWithdrawFeature(Context, post, apply, delete, action, location, propertylist, enabled);
            };

            Post["/system/console/configMgr/com.adobe.granite.workflow.console.publish.WorkflowPublishEventService"] = parameters =>
            {
                var post = Parameters.ValueOf<bool?>(parameters, Context.Request, "post", ParameterType.Query);
                var apply = Parameters.ValueOf<bool?>(parameters, Context.Request, "apply", ParameterType.Query);
                var delete = Parameters.ValueOf<bool?>(parameters, Context.Request, "delete", ParameterType.Query);
                var action = Parameters.ValueOf<string>(parameters, Context.Request, "action", ParameterType.Query);
                var location = Parameters.ValueOf<string>(parameters, Context.Request, "location", ParameterType.Query);
                var propertylist = Parameters.ValueOf<List<string>>(parameters, Context.Request, "propertylist", ParameterType.Query);
                var graniteWorkflowWorkflowPublishEventServiceEnabled = Parameters.ValueOf<bool?>(parameters, Context.Request, "graniteWorkflowWorkflowPublishEventServiceEnabled", ParameterType.Query);
                return service.ComAdobeGraniteWorkflowConsolePublishWorkflowPublishEventService(Context, post, apply, delete, action, location, propertylist, graniteWorkflowWorkflowPublishEventServiceEnabled);
            };

            Post["/system/console/configMgr/com.adobe.granite.workflow.core.jcr.WorkflowBucketManager"] = parameters =>
            {
                var post = Parameters.ValueOf<bool?>(parameters, Context.Request, "post", ParameterType.Query);
                var apply = Parameters.ValueOf<bool?>(parameters, Context.Request, "apply", ParameterType.Query);
                var delete = Parameters.ValueOf<bool?>(parameters, Context.Request, "delete", ParameterType.Query);
                var action = Parameters.ValueOf<string>(parameters, Context.Request, "action", ParameterType.Query);
                var location = Parameters.ValueOf<string>(parameters, Context.Request, "location", ParameterType.Query);
                var propertylist = Parameters.ValueOf<List<string>>(parameters, Context.Request, "propertylist", ParameterType.Query);
                var bucketSize = Parameters.ValueOf<int?>(parameters, Context.Request, "bucketSize", ParameterType.Query);
                return service.ComAdobeGraniteWorkflowCoreJcrWorkflowBucketManager(Context, post, apply, delete, action, location, propertylist, bucketSize);
            };

            Post["/system/console/configMgr/com.adobe.granite.workflow.core.job.ExternalProcessJobHandler"] = parameters =>
            {
                var post = Parameters.ValueOf<bool?>(parameters, Context.Request, "post", ParameterType.Query);
                var apply = Parameters.ValueOf<bool?>(parameters, Context.Request, "apply", ParameterType.Query);
                var delete = Parameters.ValueOf<bool?>(parameters, Context.Request, "delete", ParameterType.Query);
                var action = Parameters.ValueOf<string>(parameters, Context.Request, "action", ParameterType.Query);
                var location = Parameters.ValueOf<string>(parameters, Context.Request, "location", ParameterType.Query);
                var propertylist = Parameters.ValueOf<List<string>>(parameters, Context.Request, "propertylist", ParameterType.Query);
                var defaultTimeout = Parameters.ValueOf<int?>(parameters, Context.Request, "defaultTimeout", ParameterType.Query);
                var maxTimeout = Parameters.ValueOf<int?>(parameters, Context.Request, "maxTimeout", ParameterType.Query);
                var defaultPeriod = Parameters.ValueOf<int?>(parameters, Context.Request, "defaultPeriod", ParameterType.Query);
                return service.ComAdobeGraniteWorkflowCoreJobExternalProcessJobHandler(Context, post, apply, delete, action, location, propertylist, defaultTimeout, maxTimeout, defaultPeriod);
            };

            Post["/system/console/configMgr/com.adobe.granite.workflow.core.job.JobHandler"] = parameters =>
            {
                var post = Parameters.ValueOf<bool?>(parameters, Context.Request, "post", ParameterType.Query);
                var apply = Parameters.ValueOf<bool?>(parameters, Context.Request, "apply", ParameterType.Query);
                var delete = Parameters.ValueOf<bool?>(parameters, Context.Request, "delete", ParameterType.Query);
                var action = Parameters.ValueOf<string>(parameters, Context.Request, "action", ParameterType.Query);
                var location = Parameters.ValueOf<string>(parameters, Context.Request, "location", ParameterType.Query);
                var propertylist = Parameters.ValueOf<List<string>>(parameters, Context.Request, "propertylist", ParameterType.Query);
                var jobTopics = Parameters.ValueOf<List<string>>(parameters, Context.Request, "jobTopics", ParameterType.Query);
                var allowSelfProcessTermination = Parameters.ValueOf<bool?>(parameters, Context.Request, "allowSelfProcessTermination", ParameterType.Query);
                return service.ComAdobeGraniteWorkflowCoreJobJobHandler(Context, post, apply, delete, action, location, propertylist, jobTopics, allowSelfProcessTermination);
            };

            Post["/system/console/configMgr/com.adobe.granite.workflow.core.offloading.WorkflowOffloadingJobConsumer"] = parameters =>
            {
                var post = Parameters.ValueOf<bool?>(parameters, Context.Request, "post", ParameterType.Query);
                var apply = Parameters.ValueOf<bool?>(parameters, Context.Request, "apply", ParameterType.Query);
                var delete = Parameters.ValueOf<bool?>(parameters, Context.Request, "delete", ParameterType.Query);
                var action = Parameters.ValueOf<string>(parameters, Context.Request, "action", ParameterType.Query);
                var location = Parameters.ValueOf<string>(parameters, Context.Request, "location", ParameterType.Query);
                var propertylist = Parameters.ValueOf<List<string>>(parameters, Context.Request, "propertylist", ParameterType.Query);
                var jobTopics = Parameters.ValueOf<string>(parameters, Context.Request, "jobTopics", ParameterType.Query);
                return service.ComAdobeGraniteWorkflowCoreOffloadingWorkflowOffloadingJobConsum(Context, post, apply, delete, action, location, propertylist, jobTopics);
            };

            Post["/system/console/configMgr/com.adobe.granite.workflow.core.PayloadMapCache"] = parameters =>
            {
                var post = Parameters.ValueOf<bool?>(parameters, Context.Request, "post", ParameterType.Query);
                var apply = Parameters.ValueOf<bool?>(parameters, Context.Request, "apply", ParameterType.Query);
                var delete = Parameters.ValueOf<bool?>(parameters, Context.Request, "delete", ParameterType.Query);
                var action = Parameters.ValueOf<string>(parameters, Context.Request, "action", ParameterType.Query);
                var location = Parameters.ValueOf<string>(parameters, Context.Request, "location", ParameterType.Query);
                var propertylist = Parameters.ValueOf<List<string>>(parameters, Context.Request, "propertylist", ParameterType.Query);
                var getSystemWorkflowModels = Parameters.ValueOf<List<string>>(parameters, Context.Request, "getSystemWorkflowModels", ParameterType.Query);
                var getPackageRootPath = Parameters.ValueOf<string>(parameters, Context.Request, "getPackageRootPath", ParameterType.Query);
                return service.ComAdobeGraniteWorkflowCorePayloadMapCache(Context, post, apply, delete, action, location, propertylist, getSystemWorkflowModels, getPackageRootPath);
            };

            Post["/system/console/configMgr/com.adobe.granite.workflow.core.payloadmap.PayloadMoveListener"] = parameters =>
            {
                var post = Parameters.ValueOf<bool?>(parameters, Context.Request, "post", ParameterType.Query);
                var apply = Parameters.ValueOf<bool?>(parameters, Context.Request, "apply", ParameterType.Query);
                var delete = Parameters.ValueOf<bool?>(parameters, Context.Request, "delete", ParameterType.Query);
                var action = Parameters.ValueOf<string>(parameters, Context.Request, "action", ParameterType.Query);
                var location = Parameters.ValueOf<string>(parameters, Context.Request, "location", ParameterType.Query);
                var propertylist = Parameters.ValueOf<List<string>>(parameters, Context.Request, "propertylist", ParameterType.Query);
                var payloadMoveWhiteList = Parameters.ValueOf<List<string>>(parameters, Context.Request, "payloadMoveWhiteList", ParameterType.Query);
                var payloadMoveHandleFromWorkflowProcess = Parameters.ValueOf<bool?>(parameters, Context.Request, "payloadMoveHandleFromWorkflowProcess", ParameterType.Query);
                return service.ComAdobeGraniteWorkflowCorePayloadmapPayloadMoveListener(Context, post, apply, delete, action, location, propertylist, payloadMoveWhiteList, payloadMoveHandleFromWorkflowProcess);
            };

            Post["/system/console/configMgr/com.adobe.granite.workflow.core.WorkflowConfig"] = parameters =>
            {
                var post = Parameters.ValueOf<bool?>(parameters, Context.Request, "post", ParameterType.Query);
                var apply = Parameters.ValueOf<bool?>(parameters, Context.Request, "apply", ParameterType.Query);
                var delete = Parameters.ValueOf<bool?>(parameters, Context.Request, "delete", ParameterType.Query);
                var action = Parameters.ValueOf<string>(parameters, Context.Request, "action", ParameterType.Query);
                var location = Parameters.ValueOf<string>(parameters, Context.Request, "location", ParameterType.Query);
                var propertylist = Parameters.ValueOf<List<string>>(parameters, Context.Request, "propertylist", ParameterType.Query);
                var cqWorkflowConfigWorkflowPackagesRootPath = Parameters.ValueOf<List<string>>(parameters, Context.Request, "cqWorkflowConfigWorkflowPackagesRootPath", ParameterType.Query);
                var cqWorkflowConfigWorkflowProcessLegacyMode = Parameters.ValueOf<bool?>(parameters, Context.Request, "cqWorkflowConfigWorkflowProcessLegacyMode", ParameterType.Query);
                var cqWorkflowConfigAllowLocking = Parameters.ValueOf<bool?>(parameters, Context.Request, "cqWorkflowConfigAllowLocking", ParameterType.Query);
                return service.ComAdobeGraniteWorkflowCoreWorkflowConfig(Context, post, apply, delete, action, location, propertylist, cqWorkflowConfigWorkflowPackagesRootPath, cqWorkflowConfigWorkflowProcessLegacyMode, cqWorkflowConfigAllowLocking);
            };

            Post["/system/console/configMgr/com.adobe.granite.workflow.core.WorkflowSessionFactory"] = parameters =>
            {
                var post = Parameters.ValueOf<bool?>(parameters, Context.Request, "post", ParameterType.Query);
                var apply = Parameters.ValueOf<bool?>(parameters, Context.Request, "apply", ParameterType.Query);
                var delete = Parameters.ValueOf<bool?>(parameters, Context.Request, "delete", ParameterType.Query);
                var action = Parameters.ValueOf<string>(parameters, Context.Request, "action", ParameterType.Query);
                var location = Parameters.ValueOf<string>(parameters, Context.Request, "location", ParameterType.Query);
                var propertylist = Parameters.ValueOf<List<string>>(parameters, Context.Request, "propertylist", ParameterType.Query);
                var graniteWorkflowinboxSortPropertyName = Parameters.ValueOf<string>(parameters, Context.Request, "graniteWorkflowinboxSortPropertyName", ParameterType.Query);
                var graniteWorkflowinboxSortOrder = Parameters.ValueOf<string>(parameters, Context.Request, "graniteWorkflowinboxSortOrder", ParameterType.Query);
                var cqWorkflowJobRetry = Parameters.ValueOf<int?>(parameters, Context.Request, "cqWorkflowJobRetry", ParameterType.Query);
                var cqWorkflowSuperuser = Parameters.ValueOf<List<string>>(parameters, Context.Request, "cqWorkflowSuperuser", ParameterType.Query);
                var graniteWorkflowInboxQuerySize = Parameters.ValueOf<int?>(parameters, Context.Request, "graniteWorkflowInboxQuerySize", ParameterType.Query);
                var graniteWorkflowAdminUserGroupFilter = Parameters.ValueOf<bool?>(parameters, Context.Request, "graniteWorkflowAdminUserGroupFilter", ParameterType.Query);
                var graniteWorkflowEnforceWorkitemAssigneePermissions = Parameters.ValueOf<bool?>(parameters, Context.Request, "graniteWorkflowEnforceWorkitemAssigneePermissions", ParameterType.Query);
                var graniteWorkflowEnforceWorkflowInitiatorPermissions = Parameters.ValueOf<bool?>(parameters, Context.Request, "graniteWorkflowEnforceWorkflowInitiatorPermissions", ParameterType.Query);
                var graniteWorkflowInjectTenantIdInJobTopics = Parameters.ValueOf<bool?>(parameters, Context.Request, "graniteWorkflowInjectTenantIdInJobTopics", ParameterType.Query);
                var graniteWorkflowMaxPurgeSaveThreshold = Parameters.ValueOf<int?>(parameters, Context.Request, "graniteWorkflowMaxPurgeSaveThreshold", ParameterType.Query);
                var graniteWorkflowMaxPurgeQueryCount = Parameters.ValueOf<int?>(parameters, Context.Request, "graniteWorkflowMaxPurgeQueryCount", ParameterType.Query);
                return service.ComAdobeGraniteWorkflowCoreWorkflowSessionFactory(Context, post, apply, delete, action, location, propertylist, graniteWorkflowinboxSortPropertyName, graniteWorkflowinboxSortOrder, cqWorkflowJobRetry, cqWorkflowSuperuser, graniteWorkflowInboxQuerySize, graniteWorkflowAdminUserGroupFilter, graniteWorkflowEnforceWorkitemAssigneePermissions, graniteWorkflowEnforceWorkflowInitiatorPermissions, graniteWorkflowInjectTenantIdInJobTopics, graniteWorkflowMaxPurgeSaveThreshold, graniteWorkflowMaxPurgeQueryCount);
            };

            Post["/system/console/configMgr/com.adobe.granite.workflow.purge.Scheduler"] = parameters =>
            {
                var post = Parameters.ValueOf<bool?>(parameters, Context.Request, "post", ParameterType.Query);
                var apply = Parameters.ValueOf<bool?>(parameters, Context.Request, "apply", ParameterType.Query);
                var delete = Parameters.ValueOf<bool?>(parameters, Context.Request, "delete", ParameterType.Query);
                var action = Parameters.ValueOf<string>(parameters, Context.Request, "action", ParameterType.Query);
                var location = Parameters.ValueOf<string>(parameters, Context.Request, "location", ParameterType.Query);
                var propertylist = Parameters.ValueOf<List<string>>(parameters, Context.Request, "propertylist", ParameterType.Query);
                var scheduledpurgeName = Parameters.ValueOf<string>(parameters, Context.Request, "scheduledpurgeName", ParameterType.Query);
                var scheduledpurgeWorkflowStatus = Parameters.ValueOf<string>(parameters, Context.Request, "scheduledpurgeWorkflowStatus", ParameterType.Query);
                var scheduledpurgeModelIds = Parameters.ValueOf<List<string>>(parameters, Context.Request, "scheduledpurgeModelIds", ParameterType.Query);
                var scheduledpurgeDaysold = Parameters.ValueOf<int?>(parameters, Context.Request, "scheduledpurgeDaysold", ParameterType.Query);
                return service.ComAdobeGraniteWorkflowPurgeScheduler(Context, post, apply, delete, action, location, propertylist, scheduledpurgeName, scheduledpurgeWorkflowStatus, scheduledpurgeModelIds, scheduledpurgeDaysold);
            };

            Post["/system/console/configMgr/com.adobe.octopus.ncomm.bootstrap"] = parameters =>
            {
                var post = Parameters.ValueOf<bool?>(parameters, Context.Request, "post", ParameterType.Query);
                var apply = Parameters.ValueOf<bool?>(parameters, Context.Request, "apply", ParameterType.Query);
                var delete = Parameters.ValueOf<bool?>(parameters, Context.Request, "delete", ParameterType.Query);
                var action = Parameters.ValueOf<string>(parameters, Context.Request, "action", ParameterType.Query);
                var location = Parameters.ValueOf<string>(parameters, Context.Request, "location", ParameterType.Query);
                var propertylist = Parameters.ValueOf<List<string>>(parameters, Context.Request, "propertylist", ParameterType.Query);
                var maxConnections = Parameters.ValueOf<int?>(parameters, Context.Request, "maxConnections", ParameterType.Query);
                var maxRequests = Parameters.ValueOf<int?>(parameters, Context.Request, "maxRequests", ParameterType.Query);
                var requestTimeout = Parameters.ValueOf<int?>(parameters, Context.Request, "requestTimeout", ParameterType.Query);
                var requestRetries = Parameters.ValueOf<int?>(parameters, Context.Request, "requestRetries", ParameterType.Query);
                var launchTimeout = Parameters.ValueOf<int?>(parameters, Context.Request, "launchTimeout", ParameterType.Query);
                return service.ComAdobeOctopusNcommBootstrap(Context, post, apply, delete, action, location, propertylist, maxConnections, maxRequests, requestTimeout, requestRetries, launchTimeout);
            };

            Post["/system/console/configMgr/com.adobe.social.integrations.livefyre.user.pingforpull.impl.PingPullServlet"] = parameters =>
            {
                var post = Parameters.ValueOf<bool?>(parameters, Context.Request, "post", ParameterType.Query);
                var apply = Parameters.ValueOf<bool?>(parameters, Context.Request, "apply", ParameterType.Query);
                var delete = Parameters.ValueOf<bool?>(parameters, Context.Request, "delete", ParameterType.Query);
                var action = Parameters.ValueOf<string>(parameters, Context.Request, "action", ParameterType.Query);
                var location = Parameters.ValueOf<string>(parameters, Context.Request, "location", ParameterType.Query);
                var propertylist = Parameters.ValueOf<List<string>>(parameters, Context.Request, "propertylist", ParameterType.Query);
                var communitiesIntegrationLivefyreSlingEventFilter = Parameters.ValueOf<string>(parameters, Context.Request, "communitiesIntegrationLivefyreSlingEventFilter", ParameterType.Query);
                return service.ComAdobeSocialIntegrationsLivefyreUserPingforpullImplPingPullS(Context, post, apply, delete, action, location, propertylist, communitiesIntegrationLivefyreSlingEventFilter);
            };

            Post["/system/console/configMgr/com.adobe.xmp.worker.files.ncomm.XMPFilesNComm"] = parameters =>
            {
                var post = Parameters.ValueOf<bool?>(parameters, Context.Request, "post", ParameterType.Query);
                var apply = Parameters.ValueOf<bool?>(parameters, Context.Request, "apply", ParameterType.Query);
                var delete = Parameters.ValueOf<bool?>(parameters, Context.Request, "delete", ParameterType.Query);
                var action = Parameters.ValueOf<string>(parameters, Context.Request, "action", ParameterType.Query);
                var location = Parameters.ValueOf<string>(parameters, Context.Request, "location", ParameterType.Query);
                var propertylist = Parameters.ValueOf<List<string>>(parameters, Context.Request, "propertylist", ParameterType.Query);
                var maxConnections = Parameters.ValueOf<string>(parameters, Context.Request, "maxConnections", ParameterType.Query);
                var maxRequests = Parameters.ValueOf<string>(parameters, Context.Request, "maxRequests", ParameterType.Query);
                var requestTimeout = Parameters.ValueOf<string>(parameters, Context.Request, "requestTimeout", ParameterType.Query);
                var logDir = Parameters.ValueOf<string>(parameters, Context.Request, "logDir", ParameterType.Query);
                return service.ComAdobeXmpWorkerFilesNcommXMPFilesNComm(Context, post, apply, delete, action, location, propertylist, maxConnections, maxRequests, requestTimeout, logDir);
            };

            Post["/system/console/configMgr/com.day.commons.datasource.jdbcpool.JdbcPoolService"] = parameters =>
            {
                var post = Parameters.ValueOf<bool?>(parameters, Context.Request, "post", ParameterType.Query);
                var apply = Parameters.ValueOf<bool?>(parameters, Context.Request, "apply", ParameterType.Query);
                var delete = Parameters.ValueOf<bool?>(parameters, Context.Request, "delete", ParameterType.Query);
                var action = Parameters.ValueOf<string>(parameters, Context.Request, "action", ParameterType.Query);
                var location = Parameters.ValueOf<string>(parameters, Context.Request, "location", ParameterType.Query);
                var propertylist = Parameters.ValueOf<List<string>>(parameters, Context.Request, "propertylist", ParameterType.Query);
                var jdbcDriverClass = Parameters.ValueOf<string>(parameters, Context.Request, "jdbcDriverClass", ParameterType.Query);
                var jdbcConnectionUri = Parameters.ValueOf<string>(parameters, Context.Request, "jdbcConnectionUri", ParameterType.Query);
                var jdbcUsername = Parameters.ValueOf<string>(parameters, Context.Request, "jdbcUsername", ParameterType.Query);
                var jdbcPassword = Parameters.ValueOf<string>(parameters, Context.Request, "jdbcPassword", ParameterType.Query);
                var jdbcValidationQuery = Parameters.ValueOf<string>(parameters, Context.Request, "jdbcValidationQuery", ParameterType.Query);
                var defaultReadonly = Parameters.ValueOf<bool?>(parameters, Context.Request, "defaultReadonly", ParameterType.Query);
                var defaultAutocommit = Parameters.ValueOf<bool?>(parameters, Context.Request, "defaultAutocommit", ParameterType.Query);
                var poolSize = Parameters.ValueOf<int?>(parameters, Context.Request, "poolSize", ParameterType.Query);
                var poolMaxWaitMsec = Parameters.ValueOf<int?>(parameters, Context.Request, "poolMaxWaitMsec", ParameterType.Query);
                var datasourceName = Parameters.ValueOf<string>(parameters, Context.Request, "datasourceName", ParameterType.Query);
                var datasourceSvcProperties = Parameters.ValueOf<List<string>>(parameters, Context.Request, "datasourceSvcProperties", ParameterType.Query);
                return service.ComDayCommonsDatasourceJdbcpoolJdbcPoolService(Context, post, apply, delete, action, location, propertylist, jdbcDriverClass, jdbcConnectionUri, jdbcUsername, jdbcPassword, jdbcValidationQuery, defaultReadonly, defaultAutocommit, poolSize, poolMaxWaitMsec, datasourceName, datasourceSvcProperties);
            };

            Post["/system/console/configMgr/com.day.commons.httpclient"] = parameters =>
            {
                var post = Parameters.ValueOf<bool?>(parameters, Context.Request, "post", ParameterType.Query);
                var apply = Parameters.ValueOf<bool?>(parameters, Context.Request, "apply", ParameterType.Query);
                var delete = Parameters.ValueOf<bool?>(parameters, Context.Request, "delete", ParameterType.Query);
                var action = Parameters.ValueOf<string>(parameters, Context.Request, "action", ParameterType.Query);
                var location = Parameters.ValueOf<string>(parameters, Context.Request, "location", ParameterType.Query);
                var propertylist = Parameters.ValueOf<List<string>>(parameters, Context.Request, "propertylist", ParameterType.Query);
                var proxyEnabled = Parameters.ValueOf<bool?>(parameters, Context.Request, "proxyEnabled", ParameterType.Query);
                var proxyHost = Parameters.ValueOf<string>(parameters, Context.Request, "proxyHost", ParameterType.Query);
                var proxyUser = Parameters.ValueOf<string>(parameters, Context.Request, "proxyUser", ParameterType.Query);
                var proxyPassword = Parameters.ValueOf<string>(parameters, Context.Request, "proxyPassword", ParameterType.Query);
                var proxyNtlmHost = Parameters.ValueOf<string>(parameters, Context.Request, "proxyNtlmHost", ParameterType.Query);
                var proxyNtlmDomain = Parameters.ValueOf<string>(parameters, Context.Request, "proxyNtlmDomain", ParameterType.Query);
                var proxyExceptions = Parameters.ValueOf<List<string>>(parameters, Context.Request, "proxyExceptions", ParameterType.Query);
                return service.ComDayCommonsHttpclient(Context, post, apply, delete, action, location, propertylist, proxyEnabled, proxyHost, proxyUser, proxyPassword, proxyNtlmHost, proxyNtlmDomain, proxyExceptions);
            };

            Post["/system/console/configMgr/com.day.cq.analytics.impl.StorePropertiesChangeListener"] = parameters =>
            {
                var post = Parameters.ValueOf<bool?>(parameters, Context.Request, "post", ParameterType.Query);
                var apply = Parameters.ValueOf<bool?>(parameters, Context.Request, "apply", ParameterType.Query);
                var delete = Parameters.ValueOf<bool?>(parameters, Context.Request, "delete", ParameterType.Query);
                var action = Parameters.ValueOf<string>(parameters, Context.Request, "action", ParameterType.Query);
                var location = Parameters.ValueOf<string>(parameters, Context.Request, "location", ParameterType.Query);
                var propertylist = Parameters.ValueOf<List<string>>(parameters, Context.Request, "propertylist", ParameterType.Query);
                var cqStoreListenerAdditionalStorePaths = Parameters.ValueOf<List<string>>(parameters, Context.Request, "cqStoreListenerAdditionalStorePaths", ParameterType.Query);
                return service.ComDayCqAnalyticsImplStorePropertiesChangeListener(Context, post, apply, delete, action, location, propertylist, cqStoreListenerAdditionalStorePaths);
            };

            Post["/system/console/configMgr/com.day.cq.analytics.sitecatalyst.impl.exporter.ClassificationsExporter"] = parameters =>
            {
                var post = Parameters.ValueOf<bool?>(parameters, Context.Request, "post", ParameterType.Query);
                var apply = Parameters.ValueOf<bool?>(parameters, Context.Request, "apply", ParameterType.Query);
                var delete = Parameters.ValueOf<bool?>(parameters, Context.Request, "delete", ParameterType.Query);
                var action = Parameters.ValueOf<string>(parameters, Context.Request, "action", ParameterType.Query);
                var location = Parameters.ValueOf<string>(parameters, Context.Request, "location", ParameterType.Query);
                var propertylist = Parameters.ValueOf<List<string>>(parameters, Context.Request, "propertylist", ParameterType.Query);
                var allowedPaths = Parameters.ValueOf<List<string>>(parameters, Context.Request, "allowedPaths", ParameterType.Query);
                var cqAnalyticsSaintExporterPagesize = Parameters.ValueOf<int?>(parameters, Context.Request, "cqAnalyticsSaintExporterPagesize", ParameterType.Query);
                return service.ComDayCqAnalyticsSitecatalystImplExporterClassificationsExporte(Context, post, apply, delete, action, location, propertylist, allowedPaths, cqAnalyticsSaintExporterPagesize);
            };

            Post["/system/console/configMgr/com.day.cq.analytics.sitecatalyst.impl.importer.ReportImporter"] = parameters =>
            {
                var post = Parameters.ValueOf<bool?>(parameters, Context.Request, "post", ParameterType.Query);
                var apply = Parameters.ValueOf<bool?>(parameters, Context.Request, "apply", ParameterType.Query);
                var delete = Parameters.ValueOf<bool?>(parameters, Context.Request, "delete", ParameterType.Query);
                var action = Parameters.ValueOf<string>(parameters, Context.Request, "action", ParameterType.Query);
                var location = Parameters.ValueOf<string>(parameters, Context.Request, "location", ParameterType.Query);
                var propertylist = Parameters.ValueOf<List<string>>(parameters, Context.Request, "propertylist", ParameterType.Query);
                var reportFetchAttempts = Parameters.ValueOf<int?>(parameters, Context.Request, "reportFetchAttempts", ParameterType.Query);
                var reportFetchDelay = Parameters.ValueOf<int?>(parameters, Context.Request, "reportFetchDelay", ParameterType.Query);
                return service.ComDayCqAnalyticsSitecatalystImplImporterReportImporter(Context, post, apply, delete, action, location, propertylist, reportFetchAttempts, reportFetchDelay);
            };

            Post["/system/console/configMgr/com.day.cq.analytics.sitecatalyst.impl.SitecatalystAdapterFactory"] = parameters =>
            {
                var post = Parameters.ValueOf<bool?>(parameters, Context.Request, "post", ParameterType.Query);
                var apply = Parameters.ValueOf<bool?>(parameters, Context.Request, "apply", ParameterType.Query);
                var delete = Parameters.ValueOf<bool?>(parameters, Context.Request, "delete", ParameterType.Query);
                var action = Parameters.ValueOf<string>(parameters, Context.Request, "action", ParameterType.Query);
                var location = Parameters.ValueOf<string>(parameters, Context.Request, "location", ParameterType.Query);
                var propertylist = Parameters.ValueOf<List<string>>(parameters, Context.Request, "propertylist", ParameterType.Query);
                var cqAnalyticsAdapterfactoryContextstores = Parameters.ValueOf<List<string>>(parameters, Context.Request, "cqAnalyticsAdapterfactoryContextstores", ParameterType.Query);
                return service.ComDayCqAnalyticsSitecatalystImplSitecatalystAdapterFactory(Context, post, apply, delete, action, location, propertylist, cqAnalyticsAdapterfactoryContextstores);
            };

            Post["/system/console/configMgr/com.day.cq.analytics.sitecatalyst.impl.SitecatalystHttpClientImpl"] = parameters =>
            {
                var post = Parameters.ValueOf<bool?>(parameters, Context.Request, "post", ParameterType.Query);
                var apply = Parameters.ValueOf<bool?>(parameters, Context.Request, "apply", ParameterType.Query);
                var delete = Parameters.ValueOf<bool?>(parameters, Context.Request, "delete", ParameterType.Query);
                var action = Parameters.ValueOf<string>(parameters, Context.Request, "action", ParameterType.Query);
                var location = Parameters.ValueOf<string>(parameters, Context.Request, "location", ParameterType.Query);
                var propertylist = Parameters.ValueOf<List<string>>(parameters, Context.Request, "propertylist", ParameterType.Query);
                var cqAnalyticsSitecatalystServiceDatacenterUrl = Parameters.ValueOf<List<string>>(parameters, Context.Request, "cqAnalyticsSitecatalystServiceDatacenterUrl", ParameterType.Query);
                var devhostnamepatterns = Parameters.ValueOf<List<string>>(parameters, Context.Request, "devhostnamepatterns", ParameterType.Query);
                var connectionTimeout = Parameters.ValueOf<int?>(parameters, Context.Request, "connectionTimeout", ParameterType.Query);
                var socketTimeout = Parameters.ValueOf<int?>(parameters, Context.Request, "socketTimeout", ParameterType.Query);
                return service.ComDayCqAnalyticsSitecatalystImplSitecatalystHttpClientImpl(Context, post, apply, delete, action, location, propertylist, cqAnalyticsSitecatalystServiceDatacenterUrl, devhostnamepatterns, connectionTimeout, socketTimeout);
            };

            Post["/system/console/configMgr/com.day.cq.analytics.testandtarget.impl.AccountOptionsUpdater"] = parameters =>
            {
                var post = Parameters.ValueOf<bool?>(parameters, Context.Request, "post", ParameterType.Query);
                var apply = Parameters.ValueOf<bool?>(parameters, Context.Request, "apply", ParameterType.Query);
                var delete = Parameters.ValueOf<bool?>(parameters, Context.Request, "delete", ParameterType.Query);
                var action = Parameters.ValueOf<string>(parameters, Context.Request, "action", ParameterType.Query);
                var location = Parameters.ValueOf<string>(parameters, Context.Request, "location", ParameterType.Query);
                var propertylist = Parameters.ValueOf<List<string>>(parameters, Context.Request, "propertylist", ParameterType.Query);
                var cqAnalyticsTestandtargetAccountoptionsupdaterEnabled = Parameters.ValueOf<bool?>(parameters, Context.Request, "cqAnalyticsTestandtargetAccountoptionsupdaterEnabled", ParameterType.Query);
                return service.ComDayCqAnalyticsTestandtargetImplAccountOptionsUpdater(Context, post, apply, delete, action, location, propertylist, cqAnalyticsTestandtargetAccountoptionsupdaterEnabled);
            };

            Post["/system/console/configMgr/com.day.cq.analytics.testandtarget.impl.DeleteAuthorActivityListener"] = parameters =>
            {
                var post = Parameters.ValueOf<bool?>(parameters, Context.Request, "post", ParameterType.Query);
                var apply = Parameters.ValueOf<bool?>(parameters, Context.Request, "apply", ParameterType.Query);
                var delete = Parameters.ValueOf<bool?>(parameters, Context.Request, "delete", ParameterType.Query);
                var action = Parameters.ValueOf<string>(parameters, Context.Request, "action", ParameterType.Query);
                var location = Parameters.ValueOf<string>(parameters, Context.Request, "location", ParameterType.Query);
                var propertylist = Parameters.ValueOf<List<string>>(parameters, Context.Request, "propertylist", ParameterType.Query);
                var cqAnalyticsTestandtargetDeleteauthoractivitylistenerEnabled = Parameters.ValueOf<bool?>(parameters, Context.Request, "cqAnalyticsTestandtargetDeleteauthoractivitylistenerEnabled", ParameterType.Query);
                return service.ComDayCqAnalyticsTestandtargetImplDeleteAuthorActivityListener(Context, post, apply, delete, action, location, propertylist, cqAnalyticsTestandtargetDeleteauthoractivitylistenerEnabled);
            };

            Post["/system/console/configMgr/com.day.cq.analytics.testandtarget.impl.PushAuthorCampaignPageListener"] = parameters =>
            {
                var post = Parameters.ValueOf<bool?>(parameters, Context.Request, "post", ParameterType.Query);
                var apply = Parameters.ValueOf<bool?>(parameters, Context.Request, "apply", ParameterType.Query);
                var delete = Parameters.ValueOf<bool?>(parameters, Context.Request, "delete", ParameterType.Query);
                var action = Parameters.ValueOf<string>(parameters, Context.Request, "action", ParameterType.Query);
                var location = Parameters.ValueOf<string>(parameters, Context.Request, "location", ParameterType.Query);
                var propertylist = Parameters.ValueOf<List<string>>(parameters, Context.Request, "propertylist", ParameterType.Query);
                var cqAnalyticsTestandtargetPushauthorcampaignpagelistenerEnabled = Parameters.ValueOf<bool?>(parameters, Context.Request, "cqAnalyticsTestandtargetPushauthorcampaignpagelistenerEnabled", ParameterType.Query);
                return service.ComDayCqAnalyticsTestandtargetImplPushAuthorCampaignPageListener(Context, post, apply, delete, action, location, propertylist, cqAnalyticsTestandtargetPushauthorcampaignpagelistenerEnabled);
            };

            Post["/system/console/configMgr/com.day.cq.analytics.testandtarget.impl.SegmentImporter"] = parameters =>
            {
                var post = Parameters.ValueOf<bool?>(parameters, Context.Request, "post", ParameterType.Query);
                var apply = Parameters.ValueOf<bool?>(parameters, Context.Request, "apply", ParameterType.Query);
                var delete = Parameters.ValueOf<bool?>(parameters, Context.Request, "delete", ParameterType.Query);
                var action = Parameters.ValueOf<string>(parameters, Context.Request, "action", ParameterType.Query);
                var location = Parameters.ValueOf<string>(parameters, Context.Request, "location", ParameterType.Query);
                var propertylist = Parameters.ValueOf<List<string>>(parameters, Context.Request, "propertylist", ParameterType.Query);
                var cqAnalyticsTestandtargetSegmentimporterEnabled = Parameters.ValueOf<bool?>(parameters, Context.Request, "cqAnalyticsTestandtargetSegmentimporterEnabled", ParameterType.Query);
                return service.ComDayCqAnalyticsTestandtargetImplSegmentImporter(Context, post, apply, delete, action, location, propertylist, cqAnalyticsTestandtargetSegmentimporterEnabled);
            };

            Post["/system/console/configMgr/com.day.cq.analytics.testandtarget.impl.service.WebServiceImpl"] = parameters =>
            {
                var post = Parameters.ValueOf<bool?>(parameters, Context.Request, "post", ParameterType.Query);
                var apply = Parameters.ValueOf<bool?>(parameters, Context.Request, "apply", ParameterType.Query);
                var delete = Parameters.ValueOf<bool?>(parameters, Context.Request, "delete", ParameterType.Query);
                var action = Parameters.ValueOf<string>(parameters, Context.Request, "action", ParameterType.Query);
                var location = Parameters.ValueOf<string>(parameters, Context.Request, "location", ParameterType.Query);
                var propertylist = Parameters.ValueOf<List<string>>(parameters, Context.Request, "propertylist", ParameterType.Query);
                var endpointUri = Parameters.ValueOf<string>(parameters, Context.Request, "endpointUri", ParameterType.Query);
                var connectionTimeout = Parameters.ValueOf<int?>(parameters, Context.Request, "connectionTimeout", ParameterType.Query);
                var socketTimeout = Parameters.ValueOf<int?>(parameters, Context.Request, "socketTimeout", ParameterType.Query);
                return service.ComDayCqAnalyticsTestandtargetImplServiceWebServiceImpl(Context, post, apply, delete, action, location, propertylist, endpointUri, connectionTimeout, socketTimeout);
            };

            Post["/system/console/configMgr/com.day.cq.analytics.testandtarget.impl.servlets.AdminServerServlet"] = parameters =>
            {
                var post = Parameters.ValueOf<bool?>(parameters, Context.Request, "post", ParameterType.Query);
                var apply = Parameters.ValueOf<bool?>(parameters, Context.Request, "apply", ParameterType.Query);
                var delete = Parameters.ValueOf<bool?>(parameters, Context.Request, "delete", ParameterType.Query);
                var action = Parameters.ValueOf<string>(parameters, Context.Request, "action", ParameterType.Query);
                var location = Parameters.ValueOf<string>(parameters, Context.Request, "location", ParameterType.Query);
                var propertylist = Parameters.ValueOf<List<string>>(parameters, Context.Request, "propertylist", ParameterType.Query);
                var testandtargetEndpointUrl = Parameters.ValueOf<string>(parameters, Context.Request, "testandtargetEndpointUrl", ParameterType.Query);
                return service.ComDayCqAnalyticsTestandtargetImplServletsAdminServerServlet(Context, post, apply, delete, action, location, propertylist, testandtargetEndpointUrl);
            };

            Post["/system/console/configMgr/com.day.cq.analytics.testandtarget.impl.TestandtargetHttpClientImpl"] = parameters =>
            {
                var post = Parameters.ValueOf<bool?>(parameters, Context.Request, "post", ParameterType.Query);
                var apply = Parameters.ValueOf<bool?>(parameters, Context.Request, "apply", ParameterType.Query);
                var delete = Parameters.ValueOf<bool?>(parameters, Context.Request, "delete", ParameterType.Query);
                var action = Parameters.ValueOf<string>(parameters, Context.Request, "action", ParameterType.Query);
                var location = Parameters.ValueOf<string>(parameters, Context.Request, "location", ParameterType.Query);
                var propertylist = Parameters.ValueOf<List<string>>(parameters, Context.Request, "propertylist", ParameterType.Query);
                var cqAnalyticsTestandtargetApiUrl = Parameters.ValueOf<string>(parameters, Context.Request, "cqAnalyticsTestandtargetApiUrl", ParameterType.Query);
                var cqAnalyticsTestandtargetTimeout = Parameters.ValueOf<int?>(parameters, Context.Request, "cqAnalyticsTestandtargetTimeout", ParameterType.Query);
                var cqAnalyticsTestandtargetSockettimeout = Parameters.ValueOf<int?>(parameters, Context.Request, "cqAnalyticsTestandtargetSockettimeout", ParameterType.Query);
                var cqAnalyticsTestandtargetRecommendationsUrlReplace = Parameters.ValueOf<string>(parameters, Context.Request, "cqAnalyticsTestandtargetRecommendationsUrlReplace", ParameterType.Query);
                var cqAnalyticsTestandtargetRecommendationsUrlReplacewith = Parameters.ValueOf<string>(parameters, Context.Request, "cqAnalyticsTestandtargetRecommendationsUrlReplacewith", ParameterType.Query);
                return service.ComDayCqAnalyticsTestandtargetImplTestandtargetHttpClientImpl(Context, post, apply, delete, action, location, propertylist, cqAnalyticsTestandtargetApiUrl, cqAnalyticsTestandtargetTimeout, cqAnalyticsTestandtargetSockettimeout, cqAnalyticsTestandtargetRecommendationsUrlReplace, cqAnalyticsTestandtargetRecommendationsUrlReplacewith);
            };

            Post["/system/console/configMgr/com.day.cq.auth.impl.cug.CugSupportImpl"] = parameters =>
            {
                var post = Parameters.ValueOf<bool?>(parameters, Context.Request, "post", ParameterType.Query);
                var apply = Parameters.ValueOf<bool?>(parameters, Context.Request, "apply", ParameterType.Query);
                var delete = Parameters.ValueOf<bool?>(parameters, Context.Request, "delete", ParameterType.Query);
                var action = Parameters.ValueOf<string>(parameters, Context.Request, "action", ParameterType.Query);
                var location = Parameters.ValueOf<string>(parameters, Context.Request, "location", ParameterType.Query);
                var propertylist = Parameters.ValueOf<List<string>>(parameters, Context.Request, "propertylist", ParameterType.Query);
                var cugExemptedPrincipals = Parameters.ValueOf<List<string>>(parameters, Context.Request, "cugExemptedPrincipals", ParameterType.Query);
                var cugEnabled = Parameters.ValueOf<bool?>(parameters, Context.Request, "cugEnabled", ParameterType.Query);
                var cugPrincipalsRegex = Parameters.ValueOf<string>(parameters, Context.Request, "cugPrincipalsRegex", ParameterType.Query);
                var cugPrincipalsReplacement = Parameters.ValueOf<string>(parameters, Context.Request, "cugPrincipalsReplacement", ParameterType.Query);
                return service.ComDayCqAuthImplCugCugSupportImpl(Context, post, apply, delete, action, location, propertylist, cugExemptedPrincipals, cugEnabled, cugPrincipalsRegex, cugPrincipalsReplacement);
            };

            Post["/system/console/configMgr/com.day.cq.auth.impl.LoginSelectorHandler"] = parameters =>
            {
                var post = Parameters.ValueOf<bool?>(parameters, Context.Request, "post", ParameterType.Query);
                var apply = Parameters.ValueOf<bool?>(parameters, Context.Request, "apply", ParameterType.Query);
                var delete = Parameters.ValueOf<bool?>(parameters, Context.Request, "delete", ParameterType.Query);
                var action = Parameters.ValueOf<string>(parameters, Context.Request, "action", ParameterType.Query);
                var location = Parameters.ValueOf<string>(parameters, Context.Request, "location", ParameterType.Query);
                var propertylist = Parameters.ValueOf<List<string>>(parameters, Context.Request, "propertylist", ParameterType.Query);
                var path = Parameters.ValueOf<string>(parameters, Context.Request, "path", ParameterType.Query);
                var serviceRanking = Parameters.ValueOf<int?>(parameters, Context.Request, "serviceRanking", ParameterType.Query);
                var authLoginselectorMappings = Parameters.ValueOf<List<string>>(parameters, Context.Request, "authLoginselectorMappings", ParameterType.Query);
                var authLoginselectorChangepwMappings = Parameters.ValueOf<List<string>>(parameters, Context.Request, "authLoginselectorChangepwMappings", ParameterType.Query);
                var authLoginselectorDefaultloginpage = Parameters.ValueOf<string>(parameters, Context.Request, "authLoginselectorDefaultloginpage", ParameterType.Query);
                var authLoginselectorDefaultchangepwpage = Parameters.ValueOf<string>(parameters, Context.Request, "authLoginselectorDefaultchangepwpage", ParameterType.Query);
                var authLoginselectorHandle = Parameters.ValueOf<List<string>>(parameters, Context.Request, "authLoginselectorHandle", ParameterType.Query);
                var authLoginselectorHandleAllExtensions = Parameters.ValueOf<bool?>(parameters, Context.Request, "authLoginselectorHandleAllExtensions", ParameterType.Query);
                return service.ComDayCqAuthImplLoginSelectorHandler(Context, post, apply, delete, action, location, propertylist, path, serviceRanking, authLoginselectorMappings, authLoginselectorChangepwMappings, authLoginselectorDefaultloginpage, authLoginselectorDefaultchangepwpage, authLoginselectorHandle, authLoginselectorHandleAllExtensions);
            };

            Post["/system/console/configMgr/com.day.cq.commons.impl.ExternalizerImpl"] = parameters =>
            {
                var post = Parameters.ValueOf<bool?>(parameters, Context.Request, "post", ParameterType.Query);
                var apply = Parameters.ValueOf<bool?>(parameters, Context.Request, "apply", ParameterType.Query);
                var delete = Parameters.ValueOf<bool?>(parameters, Context.Request, "delete", ParameterType.Query);
                var action = Parameters.ValueOf<string>(parameters, Context.Request, "action", ParameterType.Query);
                var location = Parameters.ValueOf<string>(parameters, Context.Request, "location", ParameterType.Query);
                var propertylist = Parameters.ValueOf<List<string>>(parameters, Context.Request, "propertylist", ParameterType.Query);
                var externalizerDomains = Parameters.ValueOf<List<string>>(parameters, Context.Request, "externalizerDomains", ParameterType.Query);
                var externalizerHost = Parameters.ValueOf<string>(parameters, Context.Request, "externalizerHost", ParameterType.Query);
                var externalizerContextpath = Parameters.ValueOf<string>(parameters, Context.Request, "externalizerContextpath", ParameterType.Query);
                var externalizerEncodedpath = Parameters.ValueOf<bool?>(parameters, Context.Request, "externalizerEncodedpath", ParameterType.Query);
                return service.ComDayCqCommonsImplExternalizerImpl(Context, post, apply, delete, action, location, propertylist, externalizerDomains, externalizerHost, externalizerContextpath, externalizerEncodedpath);
            };

            Post["/system/console/configMgr/com.day.cq.commons.servlets.RootMappingServlet"] = parameters =>
            {
                var post = Parameters.ValueOf<bool?>(parameters, Context.Request, "post", ParameterType.Query);
                var apply = Parameters.ValueOf<bool?>(parameters, Context.Request, "apply", ParameterType.Query);
                var delete = Parameters.ValueOf<bool?>(parameters, Context.Request, "delete", ParameterType.Query);
                var action = Parameters.ValueOf<string>(parameters, Context.Request, "action", ParameterType.Query);
                var location = Parameters.ValueOf<string>(parameters, Context.Request, "location", ParameterType.Query);
                var propertylist = Parameters.ValueOf<List<string>>(parameters, Context.Request, "propertylist", ParameterType.Query);
                var rootmappingTarget = Parameters.ValueOf<string>(parameters, Context.Request, "rootmappingTarget", ParameterType.Query);
                return service.ComDayCqCommonsServletsRootMappingServlet(Context, post, apply, delete, action, location, propertylist, rootmappingTarget);
            };

            Post["/system/console/configMgr/com.day.cq.compat.codeupgrade.impl.CodeUpgradeExecutionConditionChecker"] = parameters =>
            {
                var post = Parameters.ValueOf<bool?>(parameters, Context.Request, "post", ParameterType.Query);
                var apply = Parameters.ValueOf<bool?>(parameters, Context.Request, "apply", ParameterType.Query);
                var delete = Parameters.ValueOf<bool?>(parameters, Context.Request, "delete", ParameterType.Query);
                var action = Parameters.ValueOf<string>(parameters, Context.Request, "action", ParameterType.Query);
                var location = Parameters.ValueOf<string>(parameters, Context.Request, "location", ParameterType.Query);
                var propertylist = Parameters.ValueOf<List<string>>(parameters, Context.Request, "propertylist", ParameterType.Query);
                var codeupgradetasks = Parameters.ValueOf<List<string>>(parameters, Context.Request, "codeupgradetasks", ParameterType.Query);
                var codeupgradetaskfilters = Parameters.ValueOf<List<string>>(parameters, Context.Request, "codeupgradetaskfilters", ParameterType.Query);
                return service.ComDayCqCompatCodeupgradeImplCodeUpgradeExecutionConditionChecke(Context, post, apply, delete, action, location, propertylist, codeupgradetasks, codeupgradetaskfilters);
            };

            Post["/system/console/configMgr/com.day.cq.compat.codeupgrade.impl.UpgradeTaskIgnoreList"] = parameters =>
            {
                var post = Parameters.ValueOf<bool?>(parameters, Context.Request, "post", ParameterType.Query);
                var apply = Parameters.ValueOf<bool?>(parameters, Context.Request, "apply", ParameterType.Query);
                var delete = Parameters.ValueOf<bool?>(parameters, Context.Request, "delete", ParameterType.Query);
                var action = Parameters.ValueOf<string>(parameters, Context.Request, "action", ParameterType.Query);
                var location = Parameters.ValueOf<string>(parameters, Context.Request, "location", ParameterType.Query);
                var propertylist = Parameters.ValueOf<List<string>>(parameters, Context.Request, "propertylist", ParameterType.Query);
                var upgradeTaskIgnoreList = Parameters.ValueOf<List<string>>(parameters, Context.Request, "upgradeTaskIgnoreList", ParameterType.Query);
                return service.ComDayCqCompatCodeupgradeImplUpgradeTaskIgnoreList(Context, post, apply, delete, action, location, propertylist, upgradeTaskIgnoreList);
            };

            Post["/system/console/configMgr/com.day.cq.compat.codeupgrade.impl.VersionRangeTaskIgnorelist"] = parameters =>
            {
                var post = Parameters.ValueOf<bool?>(parameters, Context.Request, "post", ParameterType.Query);
                var apply = Parameters.ValueOf<bool?>(parameters, Context.Request, "apply", ParameterType.Query);
                var delete = Parameters.ValueOf<bool?>(parameters, Context.Request, "delete", ParameterType.Query);
                var action = Parameters.ValueOf<string>(parameters, Context.Request, "action", ParameterType.Query);
                var location = Parameters.ValueOf<string>(parameters, Context.Request, "location", ParameterType.Query);
                var propertylist = Parameters.ValueOf<List<string>>(parameters, Context.Request, "propertylist", ParameterType.Query);
                var effectiveBundleListPath = Parameters.ValueOf<string>(parameters, Context.Request, "effectiveBundleListPath", ParameterType.Query);
                return service.ComDayCqCompatCodeupgradeImplVersionRangeTaskIgnorelist(Context, post, apply, delete, action, location, propertylist, effectiveBundleListPath);
            };

            Post["/system/console/configMgr/com.day.cq.contentsync.impl.ContentSyncManagerImpl"] = parameters =>
            {
                var post = Parameters.ValueOf<bool?>(parameters, Context.Request, "post", ParameterType.Query);
                var apply = Parameters.ValueOf<bool?>(parameters, Context.Request, "apply", ParameterType.Query);
                var delete = Parameters.ValueOf<bool?>(parameters, Context.Request, "delete", ParameterType.Query);
                var action = Parameters.ValueOf<string>(parameters, Context.Request, "action", ParameterType.Query);
                var location = Parameters.ValueOf<string>(parameters, Context.Request, "location", ParameterType.Query);
                var propertylist = Parameters.ValueOf<List<string>>(parameters, Context.Request, "propertylist", ParameterType.Query);
                var contentsyncFallbackAuthorizable = Parameters.ValueOf<string>(parameters, Context.Request, "contentsyncFallbackAuthorizable", ParameterType.Query);
                var contentsyncFallbackUpdateuser = Parameters.ValueOf<string>(parameters, Context.Request, "contentsyncFallbackUpdateuser", ParameterType.Query);
                return service.ComDayCqContentsyncImplContentSyncManagerImpl(Context, post, apply, delete, action, location, propertylist, contentsyncFallbackAuthorizable, contentsyncFallbackUpdateuser);
            };

            Post["/system/console/configMgr/com.day.cq.dam.commons.handler.StandardImageHandler"] = parameters =>
            {
                var post = Parameters.ValueOf<bool?>(parameters, Context.Request, "post", ParameterType.Query);
                var apply = Parameters.ValueOf<bool?>(parameters, Context.Request, "apply", ParameterType.Query);
                var delete = Parameters.ValueOf<bool?>(parameters, Context.Request, "delete", ParameterType.Query);
                var action = Parameters.ValueOf<string>(parameters, Context.Request, "action", ParameterType.Query);
                var location = Parameters.ValueOf<string>(parameters, Context.Request, "location", ParameterType.Query);
                var propertylist = Parameters.ValueOf<List<string>>(parameters, Context.Request, "propertylist", ParameterType.Query);
                var largeFileThreshold = Parameters.ValueOf<int?>(parameters, Context.Request, "largeFileThreshold", ParameterType.Query);
                var largeCommentThreshold = Parameters.ValueOf<int?>(parameters, Context.Request, "largeCommentThreshold", ParameterType.Query);
                var cqDamEnableExtMetaExtraction = Parameters.ValueOf<bool?>(parameters, Context.Request, "cqDamEnableExtMetaExtraction", ParameterType.Query);
                return service.ComDayCqDamCommonsHandlerStandardImageHandler(Context, post, apply, delete, action, location, propertylist, largeFileThreshold, largeCommentThreshold, cqDamEnableExtMetaExtraction);
            };

            Post["/system/console/configMgr/com.day.cq.dam.commons.metadata.XmpFilterBlackWhite"] = parameters =>
            {
                var post = Parameters.ValueOf<bool?>(parameters, Context.Request, "post", ParameterType.Query);
                var apply = Parameters.ValueOf<bool?>(parameters, Context.Request, "apply", ParameterType.Query);
                var delete = Parameters.ValueOf<bool?>(parameters, Context.Request, "delete", ParameterType.Query);
                var action = Parameters.ValueOf<string>(parameters, Context.Request, "action", ParameterType.Query);
                var location = Parameters.ValueOf<string>(parameters, Context.Request, "location", ParameterType.Query);
                var propertylist = Parameters.ValueOf<List<string>>(parameters, Context.Request, "propertylist", ParameterType.Query);
                var xmpFilterApplyWhitelist = Parameters.ValueOf<bool?>(parameters, Context.Request, "xmpFilterApplyWhitelist", ParameterType.Query);
                var xmpFilterWhitelist = Parameters.ValueOf<List<string>>(parameters, Context.Request, "xmpFilterWhitelist", ParameterType.Query);
                var xmpFilterApplyBlacklist = Parameters.ValueOf<bool?>(parameters, Context.Request, "xmpFilterApplyBlacklist", ParameterType.Query);
                var xmpFilterBlacklist = Parameters.ValueOf<List<string>>(parameters, Context.Request, "xmpFilterBlacklist", ParameterType.Query);
                return service.ComDayCqDamCommonsMetadataXmpFilterBlackWhite(Context, post, apply, delete, action, location, propertylist, xmpFilterApplyWhitelist, xmpFilterWhitelist, xmpFilterApplyBlacklist, xmpFilterBlacklist);
            };

            Post["/system/console/configMgr/com.day.cq.dam.commons.util.impl.AssetCacheImpl"] = parameters =>
            {
                var post = Parameters.ValueOf<bool?>(parameters, Context.Request, "post", ParameterType.Query);
                var apply = Parameters.ValueOf<bool?>(parameters, Context.Request, "apply", ParameterType.Query);
                var delete = Parameters.ValueOf<bool?>(parameters, Context.Request, "delete", ParameterType.Query);
                var action = Parameters.ValueOf<string>(parameters, Context.Request, "action", ParameterType.Query);
                var location = Parameters.ValueOf<string>(parameters, Context.Request, "location", ParameterType.Query);
                var propertylist = Parameters.ValueOf<List<string>>(parameters, Context.Request, "propertylist", ParameterType.Query);
                var largeFileMin = Parameters.ValueOf<int?>(parameters, Context.Request, "largeFileMin", ParameterType.Query);
                var cacheApply = Parameters.ValueOf<bool?>(parameters, Context.Request, "cacheApply", ParameterType.Query);
                var mimeTypes = Parameters.ValueOf<List<string>>(parameters, Context.Request, "mimeTypes", ParameterType.Query);
                return service.ComDayCqDamCommonsUtilImplAssetCacheImpl(Context, post, apply, delete, action, location, propertylist, largeFileMin, cacheApply, mimeTypes);
            };

            Post["/system/console/configMgr/com.day.cq.dam.core.impl.annotation.pdf.AnnotationPdfConfig"] = parameters =>
            {
                var post = Parameters.ValueOf<bool?>(parameters, Context.Request, "post", ParameterType.Query);
                var apply = Parameters.ValueOf<bool?>(parameters, Context.Request, "apply", ParameterType.Query);
                var delete = Parameters.ValueOf<bool?>(parameters, Context.Request, "delete", ParameterType.Query);
                var action = Parameters.ValueOf<string>(parameters, Context.Request, "action", ParameterType.Query);
                var location = Parameters.ValueOf<string>(parameters, Context.Request, "location", ParameterType.Query);
                var propertylist = Parameters.ValueOf<List<string>>(parameters, Context.Request, "propertylist", ParameterType.Query);
                var cqDamConfigAnnotationPdfDocumentWidth = Parameters.ValueOf<int?>(parameters, Context.Request, "cqDamConfigAnnotationPdfDocumentWidth", ParameterType.Query);
                var cqDamConfigAnnotationPdfDocumentHeight = Parameters.ValueOf<int?>(parameters, Context.Request, "cqDamConfigAnnotationPdfDocumentHeight", ParameterType.Query);
                var cqDamConfigAnnotationPdfDocumentPaddingHorizontal = Parameters.ValueOf<int?>(parameters, Context.Request, "cqDamConfigAnnotationPdfDocumentPaddingHorizontal", ParameterType.Query);
                var cqDamConfigAnnotationPdfDocumentPaddingVertical = Parameters.ValueOf<int?>(parameters, Context.Request, "cqDamConfigAnnotationPdfDocumentPaddingVertical", ParameterType.Query);
                var cqDamConfigAnnotationPdfFontSize = Parameters.ValueOf<int?>(parameters, Context.Request, "cqDamConfigAnnotationPdfFontSize", ParameterType.Query);
                var cqDamConfigAnnotationPdfFontColor = Parameters.ValueOf<string>(parameters, Context.Request, "cqDamConfigAnnotationPdfFontColor", ParameterType.Query);
                var cqDamConfigAnnotationPdfFontFamily = Parameters.ValueOf<string>(parameters, Context.Request, "cqDamConfigAnnotationPdfFontFamily", ParameterType.Query);
                var cqDamConfigAnnotationPdfFontLight = Parameters.ValueOf<string>(parameters, Context.Request, "cqDamConfigAnnotationPdfFontLight", ParameterType.Query);
                var cqDamConfigAnnotationPdfMarginTextImage = Parameters.ValueOf<int?>(parameters, Context.Request, "cqDamConfigAnnotationPdfMarginTextImage", ParameterType.Query);
                var cqDamConfigAnnotationPdfMinImageHeight = Parameters.ValueOf<int?>(parameters, Context.Request, "cqDamConfigAnnotationPdfMinImageHeight", ParameterType.Query);
                var cqDamConfigAnnotationPdfReviewStatusWidth = Parameters.ValueOf<int?>(parameters, Context.Request, "cqDamConfigAnnotationPdfReviewStatusWidth", ParameterType.Query);
                var cqDamConfigAnnotationPdfReviewStatusColorApproved = Parameters.ValueOf<string>(parameters, Context.Request, "cqDamConfigAnnotationPdfReviewStatusColorApproved", ParameterType.Query);
                var cqDamConfigAnnotationPdfReviewStatusColorRejected = Parameters.ValueOf<string>(parameters, Context.Request, "cqDamConfigAnnotationPdfReviewStatusColorRejected", ParameterType.Query);
                var cqDamConfigAnnotationPdfReviewStatusColorChangesRequested = Parameters.ValueOf<string>(parameters, Context.Request, "cqDamConfigAnnotationPdfReviewStatusColorChangesRequested", ParameterType.Query);
                var cqDamConfigAnnotationPdfAnnotationMarkerWidth = Parameters.ValueOf<int?>(parameters, Context.Request, "cqDamConfigAnnotationPdfAnnotationMarkerWidth", ParameterType.Query);
                var cqDamConfigAnnotationPdfAssetMinheight = Parameters.ValueOf<int?>(parameters, Context.Request, "cqDamConfigAnnotationPdfAssetMinheight", ParameterType.Query);
                return service.ComDayCqDamCoreImplAnnotationPdfAnnotationPdfConfig(Context, post, apply, delete, action, location, propertylist, cqDamConfigAnnotationPdfDocumentWidth, cqDamConfigAnnotationPdfDocumentHeight, cqDamConfigAnnotationPdfDocumentPaddingHorizontal, cqDamConfigAnnotationPdfDocumentPaddingVertical, cqDamConfigAnnotationPdfFontSize, cqDamConfigAnnotationPdfFontColor, cqDamConfigAnnotationPdfFontFamily, cqDamConfigAnnotationPdfFontLight, cqDamConfigAnnotationPdfMarginTextImage, cqDamConfigAnnotationPdfMinImageHeight, cqDamConfigAnnotationPdfReviewStatusWidth, cqDamConfigAnnotationPdfReviewStatusColorApproved, cqDamConfigAnnotationPdfReviewStatusColorRejected, cqDamConfigAnnotationPdfReviewStatusColorChangesRequested, cqDamConfigAnnotationPdfAnnotationMarkerWidth, cqDamConfigAnnotationPdfAssetMinheight);
            };

            Post["/system/console/configMgr/com.day.cq.dam.core.impl.AssetMoveListener"] = parameters =>
            {
                var post = Parameters.ValueOf<bool?>(parameters, Context.Request, "post", ParameterType.Query);
                var apply = Parameters.ValueOf<bool?>(parameters, Context.Request, "apply", ParameterType.Query);
                var delete = Parameters.ValueOf<bool?>(parameters, Context.Request, "delete", ParameterType.Query);
                var action = Parameters.ValueOf<string>(parameters, Context.Request, "action", ParameterType.Query);
                var location = Parameters.ValueOf<string>(parameters, Context.Request, "location", ParameterType.Query);
                var propertylist = Parameters.ValueOf<List<string>>(parameters, Context.Request, "propertylist", ParameterType.Query);
                var enabled = Parameters.ValueOf<bool?>(parameters, Context.Request, "enabled", ParameterType.Query);
                return service.ComDayCqDamCoreImplAssetMoveListener(Context, post, apply, delete, action, location, propertylist, enabled);
            };

            Post["/system/console/configMgr/com.day.cq.dam.core.impl.assethome.AssetHomePageConfiguration"] = parameters =>
            {
                var post = Parameters.ValueOf<bool?>(parameters, Context.Request, "post", ParameterType.Query);
                var apply = Parameters.ValueOf<bool?>(parameters, Context.Request, "apply", ParameterType.Query);
                var delete = Parameters.ValueOf<bool?>(parameters, Context.Request, "delete", ParameterType.Query);
                var action = Parameters.ValueOf<string>(parameters, Context.Request, "action", ParameterType.Query);
                var location = Parameters.ValueOf<string>(parameters, Context.Request, "location", ParameterType.Query);
                var propertylist = Parameters.ValueOf<List<string>>(parameters, Context.Request, "propertylist", ParameterType.Query);
                var isEnabled = Parameters.ValueOf<bool?>(parameters, Context.Request, "isEnabled", ParameterType.Query);
                return service.ComDayCqDamCoreImplAssethomeAssetHomePageConfiguration(Context, post, apply, delete, action, location, propertylist, isEnabled);
            };

            Post["/system/console/configMgr/com.day.cq.dam.core.impl.assetlinkshare.AdhocAssetShareProxyServlet"] = parameters =>
            {
                var post = Parameters.ValueOf<bool?>(parameters, Context.Request, "post", ParameterType.Query);
                var apply = Parameters.ValueOf<bool?>(parameters, Context.Request, "apply", ParameterType.Query);
                var delete = Parameters.ValueOf<bool?>(parameters, Context.Request, "delete", ParameterType.Query);
                var action = Parameters.ValueOf<string>(parameters, Context.Request, "action", ParameterType.Query);
                var location = Parameters.ValueOf<string>(parameters, Context.Request, "location", ParameterType.Query);
                var propertylist = Parameters.ValueOf<List<string>>(parameters, Context.Request, "propertylist", ParameterType.Query);
                var cqDamAdhocAssetSharePrezipMaxcontentsize = Parameters.ValueOf<int?>(parameters, Context.Request, "cqDamAdhocAssetSharePrezipMaxcontentsize", ParameterType.Query);
                return service.ComDayCqDamCoreImplAssetlinkshareAdhocAssetShareProxyServlet(Context, post, apply, delete, action, location, propertylist, cqDamAdhocAssetSharePrezipMaxcontentsize);
            };

            Post["/system/console/configMgr/com.day.cq.dam.core.impl.cache.CQBufferedImageCache"] = parameters =>
            {
                var post = Parameters.ValueOf<bool?>(parameters, Context.Request, "post", ParameterType.Query);
                var apply = Parameters.ValueOf<bool?>(parameters, Context.Request, "apply", ParameterType.Query);
                var delete = Parameters.ValueOf<bool?>(parameters, Context.Request, "delete", ParameterType.Query);
                var action = Parameters.ValueOf<string>(parameters, Context.Request, "action", ParameterType.Query);
                var location = Parameters.ValueOf<string>(parameters, Context.Request, "location", ParameterType.Query);
                var propertylist = Parameters.ValueOf<List<string>>(parameters, Context.Request, "propertylist", ParameterType.Query);
                var cqDamImageCacheMaxMemory = Parameters.ValueOf<int?>(parameters, Context.Request, "cqDamImageCacheMaxMemory", ParameterType.Query);
                var cqDamImageCacheMaxAge = Parameters.ValueOf<int?>(parameters, Context.Request, "cqDamImageCacheMaxAge", ParameterType.Query);
                var cqDamImageCacheMaxDimension = Parameters.ValueOf<string>(parameters, Context.Request, "cqDamImageCacheMaxDimension", ParameterType.Query);
                return service.ComDayCqDamCoreImplCacheCQBufferedImageCache(Context, post, apply, delete, action, location, propertylist, cqDamImageCacheMaxMemory, cqDamImageCacheMaxAge, cqDamImageCacheMaxDimension);
            };

            Post["/system/console/configMgr/com.day.cq.dam.core.impl.DamChangeEventListener"] = parameters =>
            {
                var post = Parameters.ValueOf<bool?>(parameters, Context.Request, "post", ParameterType.Query);
                var apply = Parameters.ValueOf<bool?>(parameters, Context.Request, "apply", ParameterType.Query);
                var delete = Parameters.ValueOf<bool?>(parameters, Context.Request, "delete", ParameterType.Query);
                var action = Parameters.ValueOf<string>(parameters, Context.Request, "action", ParameterType.Query);
                var location = Parameters.ValueOf<string>(parameters, Context.Request, "location", ParameterType.Query);
                var propertylist = Parameters.ValueOf<List<string>>(parameters, Context.Request, "propertylist", ParameterType.Query);
                var changeeventlistenerObservedPaths = Parameters.ValueOf<List<string>>(parameters, Context.Request, "changeeventlistenerObservedPaths", ParameterType.Query);
                return service.ComDayCqDamCoreImplDamChangeEventListener(Context, post, apply, delete, action, location, propertylist, changeeventlistenerObservedPaths);
            };

            Post["/system/console/configMgr/com.day.cq.dam.core.impl.DamEventPurgeService"] = parameters =>
            {
                var post = Parameters.ValueOf<bool?>(parameters, Context.Request, "post", ParameterType.Query);
                var apply = Parameters.ValueOf<bool?>(parameters, Context.Request, "apply", ParameterType.Query);
                var delete = Parameters.ValueOf<bool?>(parameters, Context.Request, "delete", ParameterType.Query);
                var action = Parameters.ValueOf<string>(parameters, Context.Request, "action", ParameterType.Query);
                var location = Parameters.ValueOf<string>(parameters, Context.Request, "location", ParameterType.Query);
                var propertylist = Parameters.ValueOf<List<string>>(parameters, Context.Request, "propertylist", ParameterType.Query);
                var schedulerExpression = Parameters.ValueOf<string>(parameters, Context.Request, "schedulerExpression", ParameterType.Query);
                var maxSavedActivities = Parameters.ValueOf<int?>(parameters, Context.Request, "maxSavedActivities", ParameterType.Query);
                var saveInterval = Parameters.ValueOf<int?>(parameters, Context.Request, "saveInterval", ParameterType.Query);
                var enableActivityPurge = Parameters.ValueOf<bool?>(parameters, Context.Request, "enableActivityPurge", ParameterType.Query);
                var eventTypes = Parameters.ValueOf<string>(parameters, Context.Request, "eventTypes", ParameterType.Query);
                return service.ComDayCqDamCoreImplDamEventPurgeService(Context, post, apply, delete, action, location, propertylist, schedulerExpression, maxSavedActivities, saveInterval, enableActivityPurge, eventTypes);
            };

            Post["/system/console/configMgr/com.day.cq.dam.core.impl.DamEventRecorderImpl"] = parameters =>
            {
                var post = Parameters.ValueOf<bool?>(parameters, Context.Request, "post", ParameterType.Query);
                var apply = Parameters.ValueOf<bool?>(parameters, Context.Request, "apply", ParameterType.Query);
                var delete = Parameters.ValueOf<bool?>(parameters, Context.Request, "delete", ParameterType.Query);
                var action = Parameters.ValueOf<string>(parameters, Context.Request, "action", ParameterType.Query);
                var location = Parameters.ValueOf<string>(parameters, Context.Request, "location", ParameterType.Query);
                var propertylist = Parameters.ValueOf<List<string>>(parameters, Context.Request, "propertylist", ParameterType.Query);
                var eventFilter = Parameters.ValueOf<string>(parameters, Context.Request, "eventFilter", ParameterType.Query);
                var eventQueueLength = Parameters.ValueOf<int?>(parameters, Context.Request, "eventQueueLength", ParameterType.Query);
                var eventrecorderEnabled = Parameters.ValueOf<bool?>(parameters, Context.Request, "eventrecorderEnabled", ParameterType.Query);
                var eventrecorderBlacklist = Parameters.ValueOf<List<string>>(parameters, Context.Request, "eventrecorderBlacklist", ParameterType.Query);
                var eventrecorderEventtypes = Parameters.ValueOf<string>(parameters, Context.Request, "eventrecorderEventtypes", ParameterType.Query);
                return service.ComDayCqDamCoreImplDamEventRecorderImpl(Context, post, apply, delete, action, location, propertylist, eventFilter, eventQueueLength, eventrecorderEnabled, eventrecorderBlacklist, eventrecorderEventtypes);
            };

            Post["/system/console/configMgr/com.day.cq.dam.core.impl.event.DamEventAuditListener"] = parameters =>
            {
                var post = Parameters.ValueOf<bool?>(parameters, Context.Request, "post", ParameterType.Query);
                var apply = Parameters.ValueOf<bool?>(parameters, Context.Request, "apply", ParameterType.Query);
                var delete = Parameters.ValueOf<bool?>(parameters, Context.Request, "delete", ParameterType.Query);
                var action = Parameters.ValueOf<string>(parameters, Context.Request, "action", ParameterType.Query);
                var location = Parameters.ValueOf<string>(parameters, Context.Request, "location", ParameterType.Query);
                var propertylist = Parameters.ValueOf<List<string>>(parameters, Context.Request, "propertylist", ParameterType.Query);
                var eventFilter = Parameters.ValueOf<string>(parameters, Context.Request, "eventFilter", ParameterType.Query);
                var enabled = Parameters.ValueOf<bool?>(parameters, Context.Request, "enabled", ParameterType.Query);
                return service.ComDayCqDamCoreImplEventDamEventAuditListener(Context, post, apply, delete, action, location, propertylist, eventFilter, enabled);
            };

            Post["/system/console/configMgr/com.day.cq.dam.core.impl.ExpiryNotificationJobImpl"] = parameters =>
            {
                var post = Parameters.ValueOf<bool?>(parameters, Context.Request, "post", ParameterType.Query);
                var apply = Parameters.ValueOf<bool?>(parameters, Context.Request, "apply", ParameterType.Query);
                var delete = Parameters.ValueOf<bool?>(parameters, Context.Request, "delete", ParameterType.Query);
                var action = Parameters.ValueOf<string>(parameters, Context.Request, "action", ParameterType.Query);
                var location = Parameters.ValueOf<string>(parameters, Context.Request, "location", ParameterType.Query);
                var propertylist = Parameters.ValueOf<List<string>>(parameters, Context.Request, "propertylist", ParameterType.Query);
                var cqDamExpiryNotificationSchedulerIstimebased = Parameters.ValueOf<bool?>(parameters, Context.Request, "cqDamExpiryNotificationSchedulerIstimebased", ParameterType.Query);
                var cqDamExpiryNotificationSchedulerTimebasedRule = Parameters.ValueOf<string>(parameters, Context.Request, "cqDamExpiryNotificationSchedulerTimebasedRule", ParameterType.Query);
                var cqDamExpiryNotificationSchedulerPeriodRule = Parameters.ValueOf<int?>(parameters, Context.Request, "cqDamExpiryNotificationSchedulerPeriodRule", ParameterType.Query);
                var sendEmail = Parameters.ValueOf<bool?>(parameters, Context.Request, "sendEmail", ParameterType.Query);
                var assetExpiredLimit = Parameters.ValueOf<int?>(parameters, Context.Request, "assetExpiredLimit", ParameterType.Query);
                var priorNotificationSeconds = Parameters.ValueOf<int?>(parameters, Context.Request, "priorNotificationSeconds", ParameterType.Query);
                var cqDamExpiryNotificationUrlProtocol = Parameters.ValueOf<string>(parameters, Context.Request, "cqDamExpiryNotificationUrlProtocol", ParameterType.Query);
                return service.ComDayCqDamCoreImplExpiryNotificationJobImpl(Context, post, apply, delete, action, location, propertylist, cqDamExpiryNotificationSchedulerIstimebased, cqDamExpiryNotificationSchedulerTimebasedRule, cqDamExpiryNotificationSchedulerPeriodRule, sendEmail, assetExpiredLimit, priorNotificationSeconds, cqDamExpiryNotificationUrlProtocol);
            };

            Post["/system/console/configMgr/com.day.cq.dam.core.impl.foldermetadataschema.FolderMetadataSchemaFeatureFlag"] = parameters =>
            {
                var post = Parameters.ValueOf<bool?>(parameters, Context.Request, "post", ParameterType.Query);
                var apply = Parameters.ValueOf<bool?>(parameters, Context.Request, "apply", ParameterType.Query);
                var delete = Parameters.ValueOf<bool?>(parameters, Context.Request, "delete", ParameterType.Query);
                var action = Parameters.ValueOf<string>(parameters, Context.Request, "action", ParameterType.Query);
                var location = Parameters.ValueOf<string>(parameters, Context.Request, "location", ParameterType.Query);
                var propertylist = Parameters.ValueOf<List<string>>(parameters, Context.Request, "propertylist", ParameterType.Query);
                var isEnabled = Parameters.ValueOf<bool?>(parameters, Context.Request, "isEnabled", ParameterType.Query);
                return service.ComDayCqDamCoreImplFoldermetadataschemaFolderMetadataSchemaFeat(Context, post, apply, delete, action, location, propertylist, isEnabled);
            };

            Post["/system/console/configMgr/com.day.cq.dam.core.impl.gfx.CommonsGfxRenderer"] = parameters =>
            {
                var post = Parameters.ValueOf<bool?>(parameters, Context.Request, "post", ParameterType.Query);
                var apply = Parameters.ValueOf<bool?>(parameters, Context.Request, "apply", ParameterType.Query);
                var delete = Parameters.ValueOf<bool?>(parameters, Context.Request, "delete", ParameterType.Query);
                var action = Parameters.ValueOf<string>(parameters, Context.Request, "action", ParameterType.Query);
                var location = Parameters.ValueOf<string>(parameters, Context.Request, "location", ParameterType.Query);
                var propertylist = Parameters.ValueOf<List<string>>(parameters, Context.Request, "propertylist", ParameterType.Query);
                var skipBufferedcache = Parameters.ValueOf<bool?>(parameters, Context.Request, "skipBufferedcache", ParameterType.Query);
                return service.ComDayCqDamCoreImplGfxCommonsGfxRenderer(Context, post, apply, delete, action, location, propertylist, skipBufferedcache);
            };

            Post["/system/console/configMgr/com.day.cq.dam.core.impl.handler.EPSFormatHandler"] = parameters =>
            {
                var post = Parameters.ValueOf<bool?>(parameters, Context.Request, "post", ParameterType.Query);
                var apply = Parameters.ValueOf<bool?>(parameters, Context.Request, "apply", ParameterType.Query);
                var delete = Parameters.ValueOf<bool?>(parameters, Context.Request, "delete", ParameterType.Query);
                var action = Parameters.ValueOf<string>(parameters, Context.Request, "action", ParameterType.Query);
                var location = Parameters.ValueOf<string>(parameters, Context.Request, "location", ParameterType.Query);
                var propertylist = Parameters.ValueOf<List<string>>(parameters, Context.Request, "propertylist", ParameterType.Query);
                var mimetype = Parameters.ValueOf<string>(parameters, Context.Request, "mimetype", ParameterType.Query);
                return service.ComDayCqDamCoreImplHandlerEPSFormatHandler(Context, post, apply, delete, action, location, propertylist, mimetype);
            };

            Post["/system/console/configMgr/com.day.cq.dam.core.impl.handler.IndesignFormatHandler"] = parameters =>
            {
                var post = Parameters.ValueOf<bool?>(parameters, Context.Request, "post", ParameterType.Query);
                var apply = Parameters.ValueOf<bool?>(parameters, Context.Request, "apply", ParameterType.Query);
                var delete = Parameters.ValueOf<bool?>(parameters, Context.Request, "delete", ParameterType.Query);
                var action = Parameters.ValueOf<string>(parameters, Context.Request, "action", ParameterType.Query);
                var location = Parameters.ValueOf<string>(parameters, Context.Request, "location", ParameterType.Query);
                var propertylist = Parameters.ValueOf<List<string>>(parameters, Context.Request, "propertylist", ParameterType.Query);
                var mimetype = Parameters.ValueOf<List<string>>(parameters, Context.Request, "mimetype", ParameterType.Query);
                return service.ComDayCqDamCoreImplHandlerIndesignFormatHandler(Context, post, apply, delete, action, location, propertylist, mimetype);
            };

            Post["/system/console/configMgr/com.day.cq.dam.core.impl.handler.JpegHandler"] = parameters =>
            {
                var post = Parameters.ValueOf<bool?>(parameters, Context.Request, "post", ParameterType.Query);
                var apply = Parameters.ValueOf<bool?>(parameters, Context.Request, "apply", ParameterType.Query);
                var delete = Parameters.ValueOf<bool?>(parameters, Context.Request, "delete", ParameterType.Query);
                var action = Parameters.ValueOf<string>(parameters, Context.Request, "action", ParameterType.Query);
                var location = Parameters.ValueOf<string>(parameters, Context.Request, "location", ParameterType.Query);
                var propertylist = Parameters.ValueOf<List<string>>(parameters, Context.Request, "propertylist", ParameterType.Query);
                var cqDamEnableExtMetaExtraction = Parameters.ValueOf<bool?>(parameters, Context.Request, "cqDamEnableExtMetaExtraction", ParameterType.Query);
                var largeFileThreshold = Parameters.ValueOf<int?>(parameters, Context.Request, "largeFileThreshold", ParameterType.Query);
                var largeCommentThreshold = Parameters.ValueOf<int?>(parameters, Context.Request, "largeCommentThreshold", ParameterType.Query);
                return service.ComDayCqDamCoreImplHandlerJpegHandler(Context, post, apply, delete, action, location, propertylist, cqDamEnableExtMetaExtraction, largeFileThreshold, largeCommentThreshold);
            };

            Post["/system/console/configMgr/com.day.cq.dam.core.impl.handler.xmp.NCommXMPHandler"] = parameters =>
            {
                var post = Parameters.ValueOf<bool?>(parameters, Context.Request, "post", ParameterType.Query);
                var apply = Parameters.ValueOf<bool?>(parameters, Context.Request, "apply", ParameterType.Query);
                var delete = Parameters.ValueOf<bool?>(parameters, Context.Request, "delete", ParameterType.Query);
                var action = Parameters.ValueOf<string>(parameters, Context.Request, "action", ParameterType.Query);
                var location = Parameters.ValueOf<string>(parameters, Context.Request, "location", ParameterType.Query);
                var propertylist = Parameters.ValueOf<List<string>>(parameters, Context.Request, "propertylist", ParameterType.Query);
                var xmphandlerCqFormats = Parameters.ValueOf<List<string>>(parameters, Context.Request, "xmphandlerCqFormats", ParameterType.Query);
                return service.ComDayCqDamCoreImplHandlerXmpNCommXMPHandler(Context, post, apply, delete, action, location, propertylist, xmphandlerCqFormats);
            };

            Post["/system/console/configMgr/com.day.cq.dam.core.impl.jmx.AssetIndexUpdateMonitor"] = parameters =>
            {
                var post = Parameters.ValueOf<bool?>(parameters, Context.Request, "post", ParameterType.Query);
                var apply = Parameters.ValueOf<bool?>(parameters, Context.Request, "apply", ParameterType.Query);
                var delete = Parameters.ValueOf<bool?>(parameters, Context.Request, "delete", ParameterType.Query);
                var action = Parameters.ValueOf<string>(parameters, Context.Request, "action", ParameterType.Query);
                var location = Parameters.ValueOf<string>(parameters, Context.Request, "location", ParameterType.Query);
                var propertylist = Parameters.ValueOf<List<string>>(parameters, Context.Request, "propertylist", ParameterType.Query);
                var jmxObjectname = Parameters.ValueOf<string>(parameters, Context.Request, "jmxObjectname", ParameterType.Query);
                var propertyMeasureEnabled = Parameters.ValueOf<bool?>(parameters, Context.Request, "propertyMeasureEnabled", ParameterType.Query);
                var propertyName = Parameters.ValueOf<string>(parameters, Context.Request, "propertyName", ParameterType.Query);
                var propertyMaxWaitMs = Parameters.ValueOf<int?>(parameters, Context.Request, "propertyMaxWaitMs", ParameterType.Query);
                var propertyMaxRate = Parameters.ValueOf<decimal?>(parameters, Context.Request, "propertyMaxRate", ParameterType.Query);
                var fulltextMeasureEnabled = Parameters.ValueOf<bool?>(parameters, Context.Request, "fulltextMeasureEnabled", ParameterType.Query);
                var fulltextName = Parameters.ValueOf<string>(parameters, Context.Request, "fulltextName", ParameterType.Query);
                var fulltextMaxWaitMs = Parameters.ValueOf<int?>(parameters, Context.Request, "fulltextMaxWaitMs", ParameterType.Query);
                var fulltextMaxRate = Parameters.ValueOf<decimal?>(parameters, Context.Request, "fulltextMaxRate", ParameterType.Query);
                return service.ComDayCqDamCoreImplJmxAssetIndexUpdateMonitor(Context, post, apply, delete, action, location, propertylist, jmxObjectname, propertyMeasureEnabled, propertyName, propertyMaxWaitMs, propertyMaxRate, fulltextMeasureEnabled, fulltextName, fulltextMaxWaitMs, fulltextMaxRate);
            };

            Post["/system/console/configMgr/com.day.cq.dam.core.impl.jmx.AssetMigrationMBeanImpl"] = parameters =>
            {
                var post = Parameters.ValueOf<bool?>(parameters, Context.Request, "post", ParameterType.Query);
                var apply = Parameters.ValueOf<bool?>(parameters, Context.Request, "apply", ParameterType.Query);
                var delete = Parameters.ValueOf<bool?>(parameters, Context.Request, "delete", ParameterType.Query);
                var action = Parameters.ValueOf<string>(parameters, Context.Request, "action", ParameterType.Query);
                var location = Parameters.ValueOf<string>(parameters, Context.Request, "location", ParameterType.Query);
                var propertylist = Parameters.ValueOf<List<string>>(parameters, Context.Request, "propertylist", ParameterType.Query);
                var jmxObjectname = Parameters.ValueOf<string>(parameters, Context.Request, "jmxObjectname", ParameterType.Query);
                return service.ComDayCqDamCoreImplJmxAssetMigrationMBeanImpl(Context, post, apply, delete, action, location, propertylist, jmxObjectname);
            };

            Post["/system/console/configMgr/com.day.cq.dam.core.impl.jmx.AssetUpdateMonitorImpl"] = parameters =>
            {
                var post = Parameters.ValueOf<bool?>(parameters, Context.Request, "post", ParameterType.Query);
                var apply = Parameters.ValueOf<bool?>(parameters, Context.Request, "apply", ParameterType.Query);
                var delete = Parameters.ValueOf<bool?>(parameters, Context.Request, "delete", ParameterType.Query);
                var action = Parameters.ValueOf<string>(parameters, Context.Request, "action", ParameterType.Query);
                var location = Parameters.ValueOf<string>(parameters, Context.Request, "location", ParameterType.Query);
                var propertylist = Parameters.ValueOf<List<string>>(parameters, Context.Request, "propertylist", ParameterType.Query);
                var jmxObjectname = Parameters.ValueOf<string>(parameters, Context.Request, "jmxObjectname", ParameterType.Query);
                var active = Parameters.ValueOf<bool?>(parameters, Context.Request, "active", ParameterType.Query);
                return service.ComDayCqDamCoreImplJmxAssetUpdateMonitorImpl(Context, post, apply, delete, action, location, propertylist, jmxObjectname, active);
            };

            Post["/system/console/configMgr/com.day.cq.dam.core.impl.jobs.metadataexport.AsyncMetadataExportConfigProviderService"] = parameters =>
            {
                var post = Parameters.ValueOf<bool?>(parameters, Context.Request, "post", ParameterType.Query);
                var apply = Parameters.ValueOf<bool?>(parameters, Context.Request, "apply", ParameterType.Query);
                var delete = Parameters.ValueOf<bool?>(parameters, Context.Request, "delete", ParameterType.Query);
                var action = Parameters.ValueOf<string>(parameters, Context.Request, "action", ParameterType.Query);
                var location = Parameters.ValueOf<string>(parameters, Context.Request, "location", ParameterType.Query);
                var propertylist = Parameters.ValueOf<List<string>>(parameters, Context.Request, "propertylist", ParameterType.Query);
                var operation = Parameters.ValueOf<string>(parameters, Context.Request, "operation", ParameterType.Query);
                var emailEnabled = Parameters.ValueOf<bool?>(parameters, Context.Request, "emailEnabled", ParameterType.Query);
                return service.ComDayCqDamCoreImplJobsMetadataexportAsyncMetadataExportConfig(Context, post, apply, delete, action, location, propertylist, operation, emailEnabled);
            };

            Post["/system/console/configMgr/com.day.cq.dam.core.impl.jobs.metadataimport.AsyncMetadataImportConfigProviderService"] = parameters =>
            {
                var post = Parameters.ValueOf<bool?>(parameters, Context.Request, "post", ParameterType.Query);
                var apply = Parameters.ValueOf<bool?>(parameters, Context.Request, "apply", ParameterType.Query);
                var delete = Parameters.ValueOf<bool?>(parameters, Context.Request, "delete", ParameterType.Query);
                var action = Parameters.ValueOf<string>(parameters, Context.Request, "action", ParameterType.Query);
                var location = Parameters.ValueOf<string>(parameters, Context.Request, "location", ParameterType.Query);
                var propertylist = Parameters.ValueOf<List<string>>(parameters, Context.Request, "propertylist", ParameterType.Query);
                var operation = Parameters.ValueOf<string>(parameters, Context.Request, "operation", ParameterType.Query);
                var operationIcon = Parameters.ValueOf<string>(parameters, Context.Request, "operationIcon", ParameterType.Query);
                var topicName = Parameters.ValueOf<string>(parameters, Context.Request, "topicName", ParameterType.Query);
                var emailEnabled = Parameters.ValueOf<bool?>(parameters, Context.Request, "emailEnabled", ParameterType.Query);
                return service.ComDayCqDamCoreImplJobsMetadataimportAsyncMetadataImportConfig(Context, post, apply, delete, action, location, propertylist, operation, operationIcon, topicName, emailEnabled);
            };

            Post["/system/console/configMgr/com.day.cq.dam.core.impl.lightbox.LightboxServlet"] = parameters =>
            {
                var post = Parameters.ValueOf<bool?>(parameters, Context.Request, "post", ParameterType.Query);
                var apply = Parameters.ValueOf<bool?>(parameters, Context.Request, "apply", ParameterType.Query);
                var delete = Parameters.ValueOf<bool?>(parameters, Context.Request, "delete", ParameterType.Query);
                var action = Parameters.ValueOf<string>(parameters, Context.Request, "action", ParameterType.Query);
                var location = Parameters.ValueOf<string>(parameters, Context.Request, "location", ParameterType.Query);
                var propertylist = Parameters.ValueOf<List<string>>(parameters, Context.Request, "propertylist", ParameterType.Query);
                var slingServletPaths = Parameters.ValueOf<string>(parameters, Context.Request, "slingServletPaths", ParameterType.Query);
                var slingServletMethods = Parameters.ValueOf<List<string>>(parameters, Context.Request, "slingServletMethods", ParameterType.Query);
                var cqDamEnableAnonymous = Parameters.ValueOf<bool?>(parameters, Context.Request, "cqDamEnableAnonymous", ParameterType.Query);
                return service.ComDayCqDamCoreImplLightboxLightboxServlet(Context, post, apply, delete, action, location, propertylist, slingServletPaths, slingServletMethods, cqDamEnableAnonymous);
            };

            Post["/system/console/configMgr/com.day.cq.dam.core.impl.metadata.editor.SelectComponentHandler"] = parameters =>
            {
                var post = Parameters.ValueOf<bool?>(parameters, Context.Request, "post", ParameterType.Query);
                var apply = Parameters.ValueOf<bool?>(parameters, Context.Request, "apply", ParameterType.Query);
                var delete = Parameters.ValueOf<bool?>(parameters, Context.Request, "delete", ParameterType.Query);
                var action = Parameters.ValueOf<string>(parameters, Context.Request, "action", ParameterType.Query);
                var location = Parameters.ValueOf<string>(parameters, Context.Request, "location", ParameterType.Query);
                var propertylist = Parameters.ValueOf<List<string>>(parameters, Context.Request, "propertylist", ParameterType.Query);
                var granitedata = Parameters.ValueOf<List<string>>(parameters, Context.Request, "granitedata", ParameterType.Query);
                return service.ComDayCqDamCoreImplMetadataEditorSelectComponentHandler(Context, post, apply, delete, action, location, propertylist, granitedata);
            };

            Post["/system/console/configMgr/com.day.cq.dam.core.impl.mimeType.AssetUploadRestrictionHelper"] = parameters =>
            {
                var post = Parameters.ValueOf<bool?>(parameters, Context.Request, "post", ParameterType.Query);
                var apply = Parameters.ValueOf<bool?>(parameters, Context.Request, "apply", ParameterType.Query);
                var delete = Parameters.ValueOf<bool?>(parameters, Context.Request, "delete", ParameterType.Query);
                var action = Parameters.ValueOf<string>(parameters, Context.Request, "action", ParameterType.Query);
                var location = Parameters.ValueOf<string>(parameters, Context.Request, "location", ParameterType.Query);
                var propertylist = Parameters.ValueOf<List<string>>(parameters, Context.Request, "propertylist", ParameterType.Query);
                var cqDamAllowAllMime = Parameters.ValueOf<bool?>(parameters, Context.Request, "cqDamAllowAllMime", ParameterType.Query);
                var cqDamAllowedAssetMimes = Parameters.ValueOf<List<string>>(parameters, Context.Request, "cqDamAllowedAssetMimes", ParameterType.Query);
                return service.ComDayCqDamCoreImplMimeTypeAssetUploadRestrictionHelper(Context, post, apply, delete, action, location, propertylist, cqDamAllowAllMime, cqDamAllowedAssetMimes);
            };

            Post["/system/console/configMgr/com.day.cq.dam.core.impl.mimeType.DamMimeTypeServiceImpl"] = parameters =>
            {
                var post = Parameters.ValueOf<bool?>(parameters, Context.Request, "post", ParameterType.Query);
                var apply = Parameters.ValueOf<bool?>(parameters, Context.Request, "apply", ParameterType.Query);
                var delete = Parameters.ValueOf<bool?>(parameters, Context.Request, "delete", ParameterType.Query);
                var action = Parameters.ValueOf<string>(parameters, Context.Request, "action", ParameterType.Query);
                var location = Parameters.ValueOf<string>(parameters, Context.Request, "location", ParameterType.Query);
                var propertylist = Parameters.ValueOf<List<string>>(parameters, Context.Request, "propertylist", ParameterType.Query);
                var cqDamDetectAssetMimeFromContent = Parameters.ValueOf<bool?>(parameters, Context.Request, "cqDamDetectAssetMimeFromContent", ParameterType.Query);
                return service.ComDayCqDamCoreImplMimeTypeDamMimeTypeServiceImpl(Context, post, apply, delete, action, location, propertylist, cqDamDetectAssetMimeFromContent);
            };

            Post["/system/console/configMgr/com.day.cq.dam.core.impl.MissingMetadataNotificationJob"] = parameters =>
            {
                var post = Parameters.ValueOf<bool?>(parameters, Context.Request, "post", ParameterType.Query);
                var apply = Parameters.ValueOf<bool?>(parameters, Context.Request, "apply", ParameterType.Query);
                var delete = Parameters.ValueOf<bool?>(parameters, Context.Request, "delete", ParameterType.Query);
                var action = Parameters.ValueOf<string>(parameters, Context.Request, "action", ParameterType.Query);
                var location = Parameters.ValueOf<string>(parameters, Context.Request, "location", ParameterType.Query);
                var propertylist = Parameters.ValueOf<List<string>>(parameters, Context.Request, "propertylist", ParameterType.Query);
                var cqDamMissingmetadataNotificationSchedulerIstimebased = Parameters.ValueOf<bool?>(parameters, Context.Request, "cqDamMissingmetadataNotificationSchedulerIstimebased", ParameterType.Query);
                var cqDamMissingmetadataNotificationSchedulerTimebasedRule = Parameters.ValueOf<string>(parameters, Context.Request, "cqDamMissingmetadataNotificationSchedulerTimebasedRule", ParameterType.Query);
                var cqDamMissingmetadataNotificationSchedulerPeriodRule = Parameters.ValueOf<int?>(parameters, Context.Request, "cqDamMissingmetadataNotificationSchedulerPeriodRule", ParameterType.Query);
                var cqDamMissingmetadataNotificationRecipient = Parameters.ValueOf<string>(parameters, Context.Request, "cqDamMissingmetadataNotificationRecipient", ParameterType.Query);
                return service.ComDayCqDamCoreImplMissingMetadataNotificationJob(Context, post, apply, delete, action, location, propertylist, cqDamMissingmetadataNotificationSchedulerIstimebased, cqDamMissingmetadataNotificationSchedulerTimebasedRule, cqDamMissingmetadataNotificationSchedulerPeriodRule, cqDamMissingmetadataNotificationRecipient);
            };

            Post["/system/console/configMgr/com.day.cq.dam.core.impl.process.SendTransientWorkflowCompletedEmailProcess"] = parameters =>
            {
                var post = Parameters.ValueOf<bool?>(parameters, Context.Request, "post", ParameterType.Query);
                var apply = Parameters.ValueOf<bool?>(parameters, Context.Request, "apply", ParameterType.Query);
                var delete = Parameters.ValueOf<bool?>(parameters, Context.Request, "delete", ParameterType.Query);
                var action = Parameters.ValueOf<string>(parameters, Context.Request, "action", ParameterType.Query);
                var location = Parameters.ValueOf<string>(parameters, Context.Request, "location", ParameterType.Query);
                var propertylist = Parameters.ValueOf<List<string>>(parameters, Context.Request, "propertylist", ParameterType.Query);
                var processLabel = Parameters.ValueOf<string>(parameters, Context.Request, "processLabel", ParameterType.Query);
                var notifyOnComplete = Parameters.ValueOf<bool?>(parameters, Context.Request, "notifyOnComplete", ParameterType.Query);
                return service.ComDayCqDamCoreImplProcessSendTransientWorkflowCompletedEmailPr(Context, post, apply, delete, action, location, propertylist, processLabel, notifyOnComplete);
            };

            Post["/system/console/configMgr/com.day.cq.dam.core.impl.process.TextExtractionProcess"] = parameters =>
            {
                var post = Parameters.ValueOf<bool?>(parameters, Context.Request, "post", ParameterType.Query);
                var apply = Parameters.ValueOf<bool?>(parameters, Context.Request, "apply", ParameterType.Query);
                var delete = Parameters.ValueOf<bool?>(parameters, Context.Request, "delete", ParameterType.Query);
                var action = Parameters.ValueOf<string>(parameters, Context.Request, "action", ParameterType.Query);
                var location = Parameters.ValueOf<string>(parameters, Context.Request, "location", ParameterType.Query);
                var propertylist = Parameters.ValueOf<List<string>>(parameters, Context.Request, "propertylist", ParameterType.Query);
                var mimeTypes = Parameters.ValueOf<List<string>>(parameters, Context.Request, "mimeTypes", ParameterType.Query);
                var maxExtract = Parameters.ValueOf<int?>(parameters, Context.Request, "maxExtract", ParameterType.Query);
                return service.ComDayCqDamCoreImplProcessTextExtractionProcess(Context, post, apply, delete, action, location, propertylist, mimeTypes, maxExtract);
            };

            Post["/system/console/configMgr/com.day.cq.dam.core.impl.RenditionMakerImpl"] = parameters =>
            {
                var post = Parameters.ValueOf<bool?>(parameters, Context.Request, "post", ParameterType.Query);
                var apply = Parameters.ValueOf<bool?>(parameters, Context.Request, "apply", ParameterType.Query);
                var delete = Parameters.ValueOf<bool?>(parameters, Context.Request, "delete", ParameterType.Query);
                var action = Parameters.ValueOf<string>(parameters, Context.Request, "action", ParameterType.Query);
                var location = Parameters.ValueOf<string>(parameters, Context.Request, "location", ParameterType.Query);
                var propertylist = Parameters.ValueOf<List<string>>(parameters, Context.Request, "propertylist", ParameterType.Query);
                var xmpPropagate = Parameters.ValueOf<bool?>(parameters, Context.Request, "xmpPropagate", ParameterType.Query);
                var xmpExcludes = Parameters.ValueOf<List<string>>(parameters, Context.Request, "xmpExcludes", ParameterType.Query);
                return service.ComDayCqDamCoreImplRenditionMakerImpl(Context, post, apply, delete, action, location, propertylist, xmpPropagate, xmpExcludes);
            };

            Post["/system/console/configMgr/com.day.cq.dam.core.impl.reports.ReportExportService"] = parameters =>
            {
                var post = Parameters.ValueOf<bool?>(parameters, Context.Request, "post", ParameterType.Query);
                var apply = Parameters.ValueOf<bool?>(parameters, Context.Request, "apply", ParameterType.Query);
                var delete = Parameters.ValueOf<bool?>(parameters, Context.Request, "delete", ParameterType.Query);
                var action = Parameters.ValueOf<string>(parameters, Context.Request, "action", ParameterType.Query);
                var location = Parameters.ValueOf<string>(parameters, Context.Request, "location", ParameterType.Query);
                var propertylist = Parameters.ValueOf<List<string>>(parameters, Context.Request, "propertylist", ParameterType.Query);
                var queryBatchSize = Parameters.ValueOf<int?>(parameters, Context.Request, "queryBatchSize", ParameterType.Query);
                return service.ComDayCqDamCoreImplReportsReportExportService(Context, post, apply, delete, action, location, propertylist, queryBatchSize);
            };

            Post["/system/console/configMgr/com.day.cq.dam.core.impl.reports.ReportPurgeService"] = parameters =>
            {
                var post = Parameters.ValueOf<bool?>(parameters, Context.Request, "post", ParameterType.Query);
                var apply = Parameters.ValueOf<bool?>(parameters, Context.Request, "apply", ParameterType.Query);
                var delete = Parameters.ValueOf<bool?>(parameters, Context.Request, "delete", ParameterType.Query);
                var action = Parameters.ValueOf<string>(parameters, Context.Request, "action", ParameterType.Query);
                var location = Parameters.ValueOf<string>(parameters, Context.Request, "location", ParameterType.Query);
                var propertylist = Parameters.ValueOf<List<string>>(parameters, Context.Request, "propertylist", ParameterType.Query);
                var schedulerExpression = Parameters.ValueOf<string>(parameters, Context.Request, "schedulerExpression", ParameterType.Query);
                var maxSavedReports = Parameters.ValueOf<int?>(parameters, Context.Request, "maxSavedReports", ParameterType.Query);
                var timeDuration = Parameters.ValueOf<int?>(parameters, Context.Request, "timeDuration", ParameterType.Query);
                var enableReportPurge = Parameters.ValueOf<bool?>(parameters, Context.Request, "enableReportPurge", ParameterType.Query);
                return service.ComDayCqDamCoreImplReportsReportPurgeService(Context, post, apply, delete, action, location, propertylist, schedulerExpression, maxSavedReports, timeDuration, enableReportPurge);
            };

            Post["/system/console/configMgr/com.day.cq.dam.core.impl.servlet.AssetDownloadServlet"] = parameters =>
            {
                var post = Parameters.ValueOf<bool?>(parameters, Context.Request, "post", ParameterType.Query);
                var apply = Parameters.ValueOf<bool?>(parameters, Context.Request, "apply", ParameterType.Query);
                var delete = Parameters.ValueOf<bool?>(parameters, Context.Request, "delete", ParameterType.Query);
                var action = Parameters.ValueOf<string>(parameters, Context.Request, "action", ParameterType.Query);
                var location = Parameters.ValueOf<string>(parameters, Context.Request, "location", ParameterType.Query);
                var propertylist = Parameters.ValueOf<List<string>>(parameters, Context.Request, "propertylist", ParameterType.Query);
                var enabled = Parameters.ValueOf<bool?>(parameters, Context.Request, "enabled", ParameterType.Query);
                return service.ComDayCqDamCoreImplServletAssetDownloadServlet(Context, post, apply, delete, action, location, propertylist, enabled);
            };

            Post["/system/console/configMgr/com.day.cq.dam.core.impl.servlet.AssetStatusServlet"] = parameters =>
            {
                var post = Parameters.ValueOf<bool?>(parameters, Context.Request, "post", ParameterType.Query);
                var apply = Parameters.ValueOf<bool?>(parameters, Context.Request, "apply", ParameterType.Query);
                var delete = Parameters.ValueOf<bool?>(parameters, Context.Request, "delete", ParameterType.Query);
                var action = Parameters.ValueOf<string>(parameters, Context.Request, "action", ParameterType.Query);
                var location = Parameters.ValueOf<string>(parameters, Context.Request, "location", ParameterType.Query);
                var propertylist = Parameters.ValueOf<List<string>>(parameters, Context.Request, "propertylist", ParameterType.Query);
                var cqDamBatchStatusMaxassets = Parameters.ValueOf<int?>(parameters, Context.Request, "cqDamBatchStatusMaxassets", ParameterType.Query);
                return service.ComDayCqDamCoreImplServletAssetStatusServlet(Context, post, apply, delete, action, location, propertylist, cqDamBatchStatusMaxassets);
            };

            Post["/system/console/configMgr/com.day.cq.dam.core.impl.servlet.AssetXMPSearchServlet"] = parameters =>
            {
                var post = Parameters.ValueOf<bool?>(parameters, Context.Request, "post", ParameterType.Query);
                var apply = Parameters.ValueOf<bool?>(parameters, Context.Request, "apply", ParameterType.Query);
                var delete = Parameters.ValueOf<bool?>(parameters, Context.Request, "delete", ParameterType.Query);
                var action = Parameters.ValueOf<string>(parameters, Context.Request, "action", ParameterType.Query);
                var location = Parameters.ValueOf<string>(parameters, Context.Request, "location", ParameterType.Query);
                var propertylist = Parameters.ValueOf<List<string>>(parameters, Context.Request, "propertylist", ParameterType.Query);
                var cqDamBatchIndesignMaxassets = Parameters.ValueOf<int?>(parameters, Context.Request, "cqDamBatchIndesignMaxassets", ParameterType.Query);
                return service.ComDayCqDamCoreImplServletAssetXMPSearchServlet(Context, post, apply, delete, action, location, propertylist, cqDamBatchIndesignMaxassets);
            };

            Post["/system/console/configMgr/com.day.cq.dam.core.impl.servlet.BatchMetadataServlet"] = parameters =>
            {
                var post = Parameters.ValueOf<bool?>(parameters, Context.Request, "post", ParameterType.Query);
                var apply = Parameters.ValueOf<bool?>(parameters, Context.Request, "apply", ParameterType.Query);
                var delete = Parameters.ValueOf<bool?>(parameters, Context.Request, "delete", ParameterType.Query);
                var action = Parameters.ValueOf<string>(parameters, Context.Request, "action", ParameterType.Query);
                var location = Parameters.ValueOf<string>(parameters, Context.Request, "location", ParameterType.Query);
                var propertylist = Parameters.ValueOf<List<string>>(parameters, Context.Request, "propertylist", ParameterType.Query);
                var cqDamBatchMetadataAssetDefault = Parameters.ValueOf<List<string>>(parameters, Context.Request, "cqDamBatchMetadataAssetDefault", ParameterType.Query);
                var cqDamBatchMetadataCollectionDefault = Parameters.ValueOf<List<string>>(parameters, Context.Request, "cqDamBatchMetadataCollectionDefault", ParameterType.Query);
                var cqDamBatchMetadataMaxresources = Parameters.ValueOf<int?>(parameters, Context.Request, "cqDamBatchMetadataMaxresources", ParameterType.Query);
                return service.ComDayCqDamCoreImplServletBatchMetadataServlet(Context, post, apply, delete, action, location, propertylist, cqDamBatchMetadataAssetDefault, cqDamBatchMetadataCollectionDefault, cqDamBatchMetadataMaxresources);
            };

            Post["/system/console/configMgr/com.day.cq.dam.core.impl.servlet.BinaryProviderServlet"] = parameters =>
            {
                var post = Parameters.ValueOf<bool?>(parameters, Context.Request, "post", ParameterType.Query);
                var apply = Parameters.ValueOf<bool?>(parameters, Context.Request, "apply", ParameterType.Query);
                var delete = Parameters.ValueOf<bool?>(parameters, Context.Request, "delete", ParameterType.Query);
                var action = Parameters.ValueOf<string>(parameters, Context.Request, "action", ParameterType.Query);
                var location = Parameters.ValueOf<string>(parameters, Context.Request, "location", ParameterType.Query);
                var propertylist = Parameters.ValueOf<List<string>>(parameters, Context.Request, "propertylist", ParameterType.Query);
                var slingServletResourceTypes = Parameters.ValueOf<List<string>>(parameters, Context.Request, "slingServletResourceTypes", ParameterType.Query);
                var slingServletMethods = Parameters.ValueOf<List<string>>(parameters, Context.Request, "slingServletMethods", ParameterType.Query);
                var cqDamDrmEnable = Parameters.ValueOf<bool?>(parameters, Context.Request, "cqDamDrmEnable", ParameterType.Query);
                return service.ComDayCqDamCoreImplServletBinaryProviderServlet(Context, post, apply, delete, action, location, propertylist, slingServletResourceTypes, slingServletMethods, cqDamDrmEnable);
            };

            Post["/system/console/configMgr/com.day.cq.dam.core.impl.servlet.CollectionServlet"] = parameters =>
            {
                var post = Parameters.ValueOf<bool?>(parameters, Context.Request, "post", ParameterType.Query);
                var apply = Parameters.ValueOf<bool?>(parameters, Context.Request, "apply", ParameterType.Query);
                var delete = Parameters.ValueOf<bool?>(parameters, Context.Request, "delete", ParameterType.Query);
                var action = Parameters.ValueOf<string>(parameters, Context.Request, "action", ParameterType.Query);
                var location = Parameters.ValueOf<string>(parameters, Context.Request, "location", ParameterType.Query);
                var propertylist = Parameters.ValueOf<List<string>>(parameters, Context.Request, "propertylist", ParameterType.Query);
                var cqDamBatchCollectionProperties = Parameters.ValueOf<List<string>>(parameters, Context.Request, "cqDamBatchCollectionProperties", ParameterType.Query);
                var cqDamBatchCollectionMaxcollections = Parameters.ValueOf<int?>(parameters, Context.Request, "cqDamBatchCollectionMaxcollections", ParameterType.Query);
                return service.ComDayCqDamCoreImplServletCollectionServlet(Context, post, apply, delete, action, location, propertylist, cqDamBatchCollectionProperties, cqDamBatchCollectionMaxcollections);
            };

            Post["/system/console/configMgr/com.day.cq.dam.core.impl.servlet.CollectionsServlet"] = parameters =>
            {
                var post = Parameters.ValueOf<bool?>(parameters, Context.Request, "post", ParameterType.Query);
                var apply = Parameters.ValueOf<bool?>(parameters, Context.Request, "apply", ParameterType.Query);
                var delete = Parameters.ValueOf<bool?>(parameters, Context.Request, "delete", ParameterType.Query);
                var action = Parameters.ValueOf<string>(parameters, Context.Request, "action", ParameterType.Query);
                var location = Parameters.ValueOf<string>(parameters, Context.Request, "location", ParameterType.Query);
                var propertylist = Parameters.ValueOf<List<string>>(parameters, Context.Request, "propertylist", ParameterType.Query);
                var cqDamBatchCollectionsProperties = Parameters.ValueOf<List<string>>(parameters, Context.Request, "cqDamBatchCollectionsProperties", ParameterType.Query);
                var cqDamBatchCollectionsLimit = Parameters.ValueOf<int?>(parameters, Context.Request, "cqDamBatchCollectionsLimit", ParameterType.Query);
                return service.ComDayCqDamCoreImplServletCollectionsServlet(Context, post, apply, delete, action, location, propertylist, cqDamBatchCollectionsProperties, cqDamBatchCollectionsLimit);
            };

            Post["/system/console/configMgr/com.day.cq.dam.core.impl.servlet.CompanionServlet"] = parameters =>
            {
                var post = Parameters.ValueOf<bool?>(parameters, Context.Request, "post", ParameterType.Query);
                var apply = Parameters.ValueOf<bool?>(parameters, Context.Request, "apply", ParameterType.Query);
                var delete = Parameters.ValueOf<bool?>(parameters, Context.Request, "delete", ParameterType.Query);
                var action = Parameters.ValueOf<string>(parameters, Context.Request, "action", ParameterType.Query);
                var location = Parameters.ValueOf<string>(parameters, Context.Request, "location", ParameterType.Query);
                var propertylist = Parameters.ValueOf<List<string>>(parameters, Context.Request, "propertylist", ParameterType.Query);
                var moreInfo = Parameters.ValueOf<string>(parameters, Context.Request, "moreInfo", ParameterType.Query);
                var mntoverlaydamguicontentassetsmoreinfoHtmlpath = Parameters.ValueOf<string>(parameters, Context.Request, "mntoverlaydamguicontentassetsmoreinfoHtmlpath", ParameterType.Query);
                return service.ComDayCqDamCoreImplServletCompanionServlet(Context, post, apply, delete, action, location, propertylist, moreInfo, mntoverlaydamguicontentassetsmoreinfoHtmlpath);
            };

            Post["/system/console/configMgr/com.day.cq.dam.core.impl.servlet.CreateAssetServlet"] = parameters =>
            {
                var post = Parameters.ValueOf<bool?>(parameters, Context.Request, "post", ParameterType.Query);
                var apply = Parameters.ValueOf<bool?>(parameters, Context.Request, "apply", ParameterType.Query);
                var delete = Parameters.ValueOf<bool?>(parameters, Context.Request, "delete", ParameterType.Query);
                var action = Parameters.ValueOf<string>(parameters, Context.Request, "action", ParameterType.Query);
                var location = Parameters.ValueOf<string>(parameters, Context.Request, "location", ParameterType.Query);
                var propertylist = Parameters.ValueOf<List<string>>(parameters, Context.Request, "propertylist", ParameterType.Query);
                var detectDuplicate = Parameters.ValueOf<bool?>(parameters, Context.Request, "detectDuplicate", ParameterType.Query);
                return service.ComDayCqDamCoreImplServletCreateAssetServlet(Context, post, apply, delete, action, location, propertylist, detectDuplicate);
            };

            Post["/system/console/configMgr/com.day.cq.dam.core.impl.servlet.DamContentDispositionFilter"] = parameters =>
            {
                var post = Parameters.ValueOf<bool?>(parameters, Context.Request, "post", ParameterType.Query);
                var apply = Parameters.ValueOf<bool?>(parameters, Context.Request, "apply", ParameterType.Query);
                var delete = Parameters.ValueOf<bool?>(parameters, Context.Request, "delete", ParameterType.Query);
                var action = Parameters.ValueOf<string>(parameters, Context.Request, "action", ParameterType.Query);
                var location = Parameters.ValueOf<string>(parameters, Context.Request, "location", ParameterType.Query);
                var propertylist = Parameters.ValueOf<List<string>>(parameters, Context.Request, "propertylist", ParameterType.Query);
                var cqMimeTypeBlacklist = Parameters.ValueOf<List<string>>(parameters, Context.Request, "cqMimeTypeBlacklist", ParameterType.Query);
                var cqDamEmptyMime = Parameters.ValueOf<bool?>(parameters, Context.Request, "cqDamEmptyMime", ParameterType.Query);
                return service.ComDayCqDamCoreImplServletDamContentDispositionFilter(Context, post, apply, delete, action, location, propertylist, cqMimeTypeBlacklist, cqDamEmptyMime);
            };

            Post["/system/console/configMgr/com.day.cq.dam.core.impl.servlet.GuidLookupFilter"] = parameters =>
            {
                var post = Parameters.ValueOf<bool?>(parameters, Context.Request, "post", ParameterType.Query);
                var apply = Parameters.ValueOf<bool?>(parameters, Context.Request, "apply", ParameterType.Query);
                var delete = Parameters.ValueOf<bool?>(parameters, Context.Request, "delete", ParameterType.Query);
                var action = Parameters.ValueOf<string>(parameters, Context.Request, "action", ParameterType.Query);
                var location = Parameters.ValueOf<string>(parameters, Context.Request, "location", ParameterType.Query);
                var propertylist = Parameters.ValueOf<List<string>>(parameters, Context.Request, "propertylist", ParameterType.Query);
                var cqDamCoreGuidlookupfilterEnabled = Parameters.ValueOf<bool?>(parameters, Context.Request, "cqDamCoreGuidlookupfilterEnabled", ParameterType.Query);
                return service.ComDayCqDamCoreImplServletGuidLookupFilter(Context, post, apply, delete, action, location, propertylist, cqDamCoreGuidlookupfilterEnabled);
            };

            Post["/system/console/configMgr/com.day.cq.dam.core.impl.servlet.HealthCheckServlet"] = parameters =>
            {
                var post = Parameters.ValueOf<bool?>(parameters, Context.Request, "post", ParameterType.Query);
                var apply = Parameters.ValueOf<bool?>(parameters, Context.Request, "apply", ParameterType.Query);
                var delete = Parameters.ValueOf<bool?>(parameters, Context.Request, "delete", ParameterType.Query);
                var action = Parameters.ValueOf<string>(parameters, Context.Request, "action", ParameterType.Query);
                var location = Parameters.ValueOf<string>(parameters, Context.Request, "location", ParameterType.Query);
                var propertylist = Parameters.ValueOf<List<string>>(parameters, Context.Request, "propertylist", ParameterType.Query);
                var cqDamSyncWorkflowId = Parameters.ValueOf<string>(parameters, Context.Request, "cqDamSyncWorkflowId", ParameterType.Query);
                var cqDamSyncFolderTypes = Parameters.ValueOf<List<string>>(parameters, Context.Request, "cqDamSyncFolderTypes", ParameterType.Query);
                return service.ComDayCqDamCoreImplServletHealthCheckServlet(Context, post, apply, delete, action, location, propertylist, cqDamSyncWorkflowId, cqDamSyncFolderTypes);
            };

            Post["/system/console/configMgr/com.day.cq.dam.core.impl.servlet.MetadataGetServlet"] = parameters =>
            {
                var post = Parameters.ValueOf<bool?>(parameters, Context.Request, "post", ParameterType.Query);
                var apply = Parameters.ValueOf<bool?>(parameters, Context.Request, "apply", ParameterType.Query);
                var delete = Parameters.ValueOf<bool?>(parameters, Context.Request, "delete", ParameterType.Query);
                var action = Parameters.ValueOf<string>(parameters, Context.Request, "action", ParameterType.Query);
                var location = Parameters.ValueOf<string>(parameters, Context.Request, "location", ParameterType.Query);
                var propertylist = Parameters.ValueOf<List<string>>(parameters, Context.Request, "propertylist", ParameterType.Query);
                var slingServletResourceTypes = Parameters.ValueOf<string>(parameters, Context.Request, "slingServletResourceTypes", ParameterType.Query);
                var slingServletMethods = Parameters.ValueOf<string>(parameters, Context.Request, "slingServletMethods", ParameterType.Query);
                var slingServletExtensions = Parameters.ValueOf<string>(parameters, Context.Request, "slingServletExtensions", ParameterType.Query);
                var slingServletSelectors = Parameters.ValueOf<string>(parameters, Context.Request, "slingServletSelectors", ParameterType.Query);
                return service.ComDayCqDamCoreImplServletMetadataGetServlet(Context, post, apply, delete, action, location, propertylist, slingServletResourceTypes, slingServletMethods, slingServletExtensions, slingServletSelectors);
            };

            Post["/system/console/configMgr/com.day.cq.dam.core.impl.servlet.MultipleLicenseAcceptServlet"] = parameters =>
            {
                var post = Parameters.ValueOf<bool?>(parameters, Context.Request, "post", ParameterType.Query);
                var apply = Parameters.ValueOf<bool?>(parameters, Context.Request, "apply", ParameterType.Query);
                var delete = Parameters.ValueOf<bool?>(parameters, Context.Request, "delete", ParameterType.Query);
                var action = Parameters.ValueOf<string>(parameters, Context.Request, "action", ParameterType.Query);
                var location = Parameters.ValueOf<string>(parameters, Context.Request, "location", ParameterType.Query);
                var propertylist = Parameters.ValueOf<List<string>>(parameters, Context.Request, "propertylist", ParameterType.Query);
                var cqDamDrmEnable = Parameters.ValueOf<bool?>(parameters, Context.Request, "cqDamDrmEnable", ParameterType.Query);
                return service.ComDayCqDamCoreImplServletMultipleLicenseAcceptServlet(Context, post, apply, delete, action, location, propertylist, cqDamDrmEnable);
            };

            Post["/system/console/configMgr/com.day.cq.dam.core.impl.servlet.ResourceCollectionServlet"] = parameters =>
            {
                var post = Parameters.ValueOf<bool?>(parameters, Context.Request, "post", ParameterType.Query);
                var apply = Parameters.ValueOf<bool?>(parameters, Context.Request, "apply", ParameterType.Query);
                var delete = Parameters.ValueOf<bool?>(parameters, Context.Request, "delete", ParameterType.Query);
                var action = Parameters.ValueOf<string>(parameters, Context.Request, "action", ParameterType.Query);
                var location = Parameters.ValueOf<string>(parameters, Context.Request, "location", ParameterType.Query);
                var propertylist = Parameters.ValueOf<List<string>>(parameters, Context.Request, "propertylist", ParameterType.Query);
                var slingServletResourceTypes = Parameters.ValueOf<List<string>>(parameters, Context.Request, "slingServletResourceTypes", ParameterType.Query);
                var slingServletMethods = Parameters.ValueOf<string>(parameters, Context.Request, "slingServletMethods", ParameterType.Query);
                var slingServletSelectors = Parameters.ValueOf<string>(parameters, Context.Request, "slingServletSelectors", ParameterType.Query);
                var downloadConfig = Parameters.ValueOf<string>(parameters, Context.Request, "downloadConfig", ParameterType.Query);
                var viewSelector = Parameters.ValueOf<string>(parameters, Context.Request, "viewSelector", ParameterType.Query);
                var sendEmail = Parameters.ValueOf<bool?>(parameters, Context.Request, "sendEmail", ParameterType.Query);
                return service.ComDayCqDamCoreImplServletResourceCollectionServlet(Context, post, apply, delete, action, location, propertylist, slingServletResourceTypes, slingServletMethods, slingServletSelectors, downloadConfig, viewSelector, sendEmail);
            };

            Post["/system/console/configMgr/com.day.cq.dam.core.impl.ui.preview.FolderPreviewUpdaterImpl"] = parameters =>
            {
                var post = Parameters.ValueOf<bool?>(parameters, Context.Request, "post", ParameterType.Query);
                var apply = Parameters.ValueOf<bool?>(parameters, Context.Request, "apply", ParameterType.Query);
                var delete = Parameters.ValueOf<bool?>(parameters, Context.Request, "delete", ParameterType.Query);
                var action = Parameters.ValueOf<string>(parameters, Context.Request, "action", ParameterType.Query);
                var location = Parameters.ValueOf<string>(parameters, Context.Request, "location", ParameterType.Query);
                var propertylist = Parameters.ValueOf<List<string>>(parameters, Context.Request, "propertylist", ParameterType.Query);
                var createPreviewEnabled = Parameters.ValueOf<bool?>(parameters, Context.Request, "createPreviewEnabled", ParameterType.Query);
                var updatePreviewEnabled = Parameters.ValueOf<bool?>(parameters, Context.Request, "updatePreviewEnabled", ParameterType.Query);
                var queueSize = Parameters.ValueOf<int?>(parameters, Context.Request, "queueSize", ParameterType.Query);
                var folderPreviewRenditionRegex = Parameters.ValueOf<string>(parameters, Context.Request, "folderPreviewRenditionRegex", ParameterType.Query);
                return service.ComDayCqDamCoreImplUiPreviewFolderPreviewUpdaterImpl(Context, post, apply, delete, action, location, propertylist, createPreviewEnabled, updatePreviewEnabled, queueSize, folderPreviewRenditionRegex);
            };

            Post["/system/console/configMgr/com.day.cq.dam.core.impl.unzip.UnzipConfig"] = parameters =>
            {
                var post = Parameters.ValueOf<bool?>(parameters, Context.Request, "post", ParameterType.Query);
                var apply = Parameters.ValueOf<bool?>(parameters, Context.Request, "apply", ParameterType.Query);
                var delete = Parameters.ValueOf<bool?>(parameters, Context.Request, "delete", ParameterType.Query);
                var action = Parameters.ValueOf<string>(parameters, Context.Request, "action", ParameterType.Query);
                var location = Parameters.ValueOf<string>(parameters, Context.Request, "location", ParameterType.Query);
                var propertylist = Parameters.ValueOf<List<string>>(parameters, Context.Request, "propertylist", ParameterType.Query);
                var cqDamConfigUnzipMaxuncompressedsize = Parameters.ValueOf<int?>(parameters, Context.Request, "cqDamConfigUnzipMaxuncompressedsize", ParameterType.Query);
                var cqDamConfigUnzipEncoding = Parameters.ValueOf<string>(parameters, Context.Request, "cqDamConfigUnzipEncoding", ParameterType.Query);
                return service.ComDayCqDamCoreImplUnzipUnzipConfig(Context, post, apply, delete, action, location, propertylist, cqDamConfigUnzipMaxuncompressedsize, cqDamConfigUnzipEncoding);
            };

            Post["/system/console/configMgr/com.day.cq.dam.core.process.ExifToolExtractMetadataProcess"] = parameters =>
            {
                var post = Parameters.ValueOf<bool?>(parameters, Context.Request, "post", ParameterType.Query);
                var apply = Parameters.ValueOf<bool?>(parameters, Context.Request, "apply", ParameterType.Query);
                var delete = Parameters.ValueOf<bool?>(parameters, Context.Request, "delete", ParameterType.Query);
                var action = Parameters.ValueOf<string>(parameters, Context.Request, "action", ParameterType.Query);
                var location = Parameters.ValueOf<string>(parameters, Context.Request, "location", ParameterType.Query);
                var propertylist = Parameters.ValueOf<List<string>>(parameters, Context.Request, "propertylist", ParameterType.Query);
                var processLabel = Parameters.ValueOf<string>(parameters, Context.Request, "processLabel", ParameterType.Query);
                var cqDamEnableSha1 = Parameters.ValueOf<bool?>(parameters, Context.Request, "cqDamEnableSha1", ParameterType.Query);
                return service.ComDayCqDamCoreProcessExifToolExtractMetadataProcess(Context, post, apply, delete, action, location, propertylist, processLabel, cqDamEnableSha1);
            };

            Post["/system/console/configMgr/com.day.cq.dam.core.process.ExtractMetadataProcess"] = parameters =>
            {
                var post = Parameters.ValueOf<bool?>(parameters, Context.Request, "post", ParameterType.Query);
                var apply = Parameters.ValueOf<bool?>(parameters, Context.Request, "apply", ParameterType.Query);
                var delete = Parameters.ValueOf<bool?>(parameters, Context.Request, "delete", ParameterType.Query);
                var action = Parameters.ValueOf<string>(parameters, Context.Request, "action", ParameterType.Query);
                var location = Parameters.ValueOf<string>(parameters, Context.Request, "location", ParameterType.Query);
                var propertylist = Parameters.ValueOf<List<string>>(parameters, Context.Request, "propertylist", ParameterType.Query);
                var processLabel = Parameters.ValueOf<string>(parameters, Context.Request, "processLabel", ParameterType.Query);
                var cqDamEnableSha1 = Parameters.ValueOf<bool?>(parameters, Context.Request, "cqDamEnableSha1", ParameterType.Query);
                return service.ComDayCqDamCoreProcessExtractMetadataProcess(Context, post, apply, delete, action, location, propertylist, processLabel, cqDamEnableSha1);
            };

            Post["/system/console/configMgr/com.day.cq.dam.core.process.MetadataProcessorProcess"] = parameters =>
            {
                var post = Parameters.ValueOf<bool?>(parameters, Context.Request, "post", ParameterType.Query);
                var apply = Parameters.ValueOf<bool?>(parameters, Context.Request, "apply", ParameterType.Query);
                var delete = Parameters.ValueOf<bool?>(parameters, Context.Request, "delete", ParameterType.Query);
                var action = Parameters.ValueOf<string>(parameters, Context.Request, "action", ParameterType.Query);
                var location = Parameters.ValueOf<string>(parameters, Context.Request, "location", ParameterType.Query);
                var propertylist = Parameters.ValueOf<List<string>>(parameters, Context.Request, "propertylist", ParameterType.Query);
                var processLabel = Parameters.ValueOf<string>(parameters, Context.Request, "processLabel", ParameterType.Query);
                var cqDamEnableSha1 = Parameters.ValueOf<bool?>(parameters, Context.Request, "cqDamEnableSha1", ParameterType.Query);
                var cqDamMetadataXssprotectedProperties = Parameters.ValueOf<List<string>>(parameters, Context.Request, "cqDamMetadataXssprotectedProperties", ParameterType.Query);
                return service.ComDayCqDamCoreProcessMetadataProcessorProcess(Context, post, apply, delete, action, location, propertylist, processLabel, cqDamEnableSha1, cqDamMetadataXssprotectedProperties);
            };

            Post["/system/console/configMgr/com.day.cq.dam.handler.ffmpeg.LocatorImpl"] = parameters =>
            {
                var post = Parameters.ValueOf<bool?>(parameters, Context.Request, "post", ParameterType.Query);
                var apply = Parameters.ValueOf<bool?>(parameters, Context.Request, "apply", ParameterType.Query);
                var delete = Parameters.ValueOf<bool?>(parameters, Context.Request, "delete", ParameterType.Query);
                var action = Parameters.ValueOf<string>(parameters, Context.Request, "action", ParameterType.Query);
                var location = Parameters.ValueOf<string>(parameters, Context.Request, "location", ParameterType.Query);
                var propertylist = Parameters.ValueOf<List<string>>(parameters, Context.Request, "propertylist", ParameterType.Query);
                var executableSearchpath = Parameters.ValueOf<List<string>>(parameters, Context.Request, "executableSearchpath", ParameterType.Query);
                return service.ComDayCqDamHandlerFfmpegLocatorImpl(Context, post, apply, delete, action, location, propertylist, executableSearchpath);
            };

            Post["/system/console/configMgr/com.day.cq.dam.handler.gibson.fontmanager.impl.FontManagerServiceImpl"] = parameters =>
            {
                var post = Parameters.ValueOf<bool?>(parameters, Context.Request, "post", ParameterType.Query);
                var apply = Parameters.ValueOf<bool?>(parameters, Context.Request, "apply", ParameterType.Query);
                var delete = Parameters.ValueOf<bool?>(parameters, Context.Request, "delete", ParameterType.Query);
                var action = Parameters.ValueOf<string>(parameters, Context.Request, "action", ParameterType.Query);
                var location = Parameters.ValueOf<string>(parameters, Context.Request, "location", ParameterType.Query);
                var propertylist = Parameters.ValueOf<List<string>>(parameters, Context.Request, "propertylist", ParameterType.Query);
                var eventFilter = Parameters.ValueOf<string>(parameters, Context.Request, "eventFilter", ParameterType.Query);
                var fontmgrSystemFontDir = Parameters.ValueOf<List<string>>(parameters, Context.Request, "fontmgrSystemFontDir", ParameterType.Query);
                var fontmgrAdobeFontDir = Parameters.ValueOf<string>(parameters, Context.Request, "fontmgrAdobeFontDir", ParameterType.Query);
                var fontmgrCustomerFontDir = Parameters.ValueOf<string>(parameters, Context.Request, "fontmgrCustomerFontDir", ParameterType.Query);
                return service.ComDayCqDamHandlerGibsonFontmanagerImplFontManagerServiceImpl(Context, post, apply, delete, action, location, propertylist, eventFilter, fontmgrSystemFontDir, fontmgrAdobeFontDir, fontmgrCustomerFontDir);
            };

            Post["/system/console/configMgr/com.day.cq.dam.handler.standard.pdf.PdfHandler"] = parameters =>
            {
                var post = Parameters.ValueOf<bool?>(parameters, Context.Request, "post", ParameterType.Query);
                var apply = Parameters.ValueOf<bool?>(parameters, Context.Request, "apply", ParameterType.Query);
                var delete = Parameters.ValueOf<bool?>(parameters, Context.Request, "delete", ParameterType.Query);
                var action = Parameters.ValueOf<string>(parameters, Context.Request, "action", ParameterType.Query);
                var location = Parameters.ValueOf<string>(parameters, Context.Request, "location", ParameterType.Query);
                var propertylist = Parameters.ValueOf<List<string>>(parameters, Context.Request, "propertylist", ParameterType.Query);
                var rasterAnnotation = Parameters.ValueOf<bool?>(parameters, Context.Request, "rasterAnnotation", ParameterType.Query);
                return service.ComDayCqDamHandlerStandardPdfPdfHandler(Context, post, apply, delete, action, location, propertylist, rasterAnnotation);
            };

            Post["/system/console/configMgr/com.day.cq.dam.handler.standard.ps.PostScriptHandler"] = parameters =>
            {
                var post = Parameters.ValueOf<bool?>(parameters, Context.Request, "post", ParameterType.Query);
                var apply = Parameters.ValueOf<bool?>(parameters, Context.Request, "apply", ParameterType.Query);
                var delete = Parameters.ValueOf<bool?>(parameters, Context.Request, "delete", ParameterType.Query);
                var action = Parameters.ValueOf<string>(parameters, Context.Request, "action", ParameterType.Query);
                var location = Parameters.ValueOf<string>(parameters, Context.Request, "location", ParameterType.Query);
                var propertylist = Parameters.ValueOf<List<string>>(parameters, Context.Request, "propertylist", ParameterType.Query);
                var rasterAnnotation = Parameters.ValueOf<bool?>(parameters, Context.Request, "rasterAnnotation", ParameterType.Query);
                return service.ComDayCqDamHandlerStandardPsPostScriptHandler(Context, post, apply, delete, action, location, propertylist, rasterAnnotation);
            };

            Post["/system/console/configMgr/com.day.cq.dam.handler.standard.psd.PsdHandler"] = parameters =>
            {
                var post = Parameters.ValueOf<bool?>(parameters, Context.Request, "post", ParameterType.Query);
                var apply = Parameters.ValueOf<bool?>(parameters, Context.Request, "apply", ParameterType.Query);
                var delete = Parameters.ValueOf<bool?>(parameters, Context.Request, "delete", ParameterType.Query);
                var action = Parameters.ValueOf<string>(parameters, Context.Request, "action", ParameterType.Query);
                var location = Parameters.ValueOf<string>(parameters, Context.Request, "location", ParameterType.Query);
                var propertylist = Parameters.ValueOf<List<string>>(parameters, Context.Request, "propertylist", ParameterType.Query);
                var largeFileThreshold = Parameters.ValueOf<int?>(parameters, Context.Request, "largeFileThreshold", ParameterType.Query);
                return service.ComDayCqDamHandlerStandardPsdPsdHandler(Context, post, apply, delete, action, location, propertylist, largeFileThreshold);
            };

            Post["/system/console/configMgr/com.day.cq.dam.ids.impl.IDSJobProcessor"] = parameters =>
            {
                var post = Parameters.ValueOf<bool?>(parameters, Context.Request, "post", ParameterType.Query);
                var apply = Parameters.ValueOf<bool?>(parameters, Context.Request, "apply", ParameterType.Query);
                var delete = Parameters.ValueOf<bool?>(parameters, Context.Request, "delete", ParameterType.Query);
                var action = Parameters.ValueOf<string>(parameters, Context.Request, "action", ParameterType.Query);
                var location = Parameters.ValueOf<string>(parameters, Context.Request, "location", ParameterType.Query);
                var propertylist = Parameters.ValueOf<List<string>>(parameters, Context.Request, "propertylist", ParameterType.Query);
                var enableMultisession = Parameters.ValueOf<bool?>(parameters, Context.Request, "enableMultisession", ParameterType.Query);
                var idsCcEnable = Parameters.ValueOf<bool?>(parameters, Context.Request, "idsCcEnable", ParameterType.Query);
                var enableRetry = Parameters.ValueOf<bool?>(parameters, Context.Request, "enableRetry", ParameterType.Query);
                var enableRetryScripterror = Parameters.ValueOf<bool?>(parameters, Context.Request, "enableRetryScripterror", ParameterType.Query);
                var externalizerDomainCqhost = Parameters.ValueOf<string>(parameters, Context.Request, "externalizerDomainCqhost", ParameterType.Query);
                var externalizerDomainHttp = Parameters.ValueOf<string>(parameters, Context.Request, "externalizerDomainHttp", ParameterType.Query);
                return service.ComDayCqDamIdsImplIDSJobProcessor(Context, post, apply, delete, action, location, propertylist, enableMultisession, idsCcEnable, enableRetry, enableRetryScripterror, externalizerDomainCqhost, externalizerDomainHttp);
            };

            Post["/system/console/configMgr/com.day.cq.dam.ids.impl.IDSPoolManagerImpl"] = parameters =>
            {
                var post = Parameters.ValueOf<bool?>(parameters, Context.Request, "post", ParameterType.Query);
                var apply = Parameters.ValueOf<bool?>(parameters, Context.Request, "apply", ParameterType.Query);
                var delete = Parameters.ValueOf<bool?>(parameters, Context.Request, "delete", ParameterType.Query);
                var action = Parameters.ValueOf<string>(parameters, Context.Request, "action", ParameterType.Query);
                var location = Parameters.ValueOf<string>(parameters, Context.Request, "location", ParameterType.Query);
                var propertylist = Parameters.ValueOf<List<string>>(parameters, Context.Request, "propertylist", ParameterType.Query);
                var maxErrorsToBlacklist = Parameters.ValueOf<int?>(parameters, Context.Request, "maxErrorsToBlacklist", ParameterType.Query);
                var retryIntervalToWhitelist = Parameters.ValueOf<int?>(parameters, Context.Request, "retryIntervalToWhitelist", ParameterType.Query);
                var connectTimeout = Parameters.ValueOf<int?>(parameters, Context.Request, "connectTimeout", ParameterType.Query);
                var socketTimeout = Parameters.ValueOf<int?>(parameters, Context.Request, "socketTimeout", ParameterType.Query);
                var processLabel = Parameters.ValueOf<string>(parameters, Context.Request, "processLabel", ParameterType.Query);
                var connectionUseMax = Parameters.ValueOf<int?>(parameters, Context.Request, "connectionUseMax", ParameterType.Query);
                return service.ComDayCqDamIdsImplIDSPoolManagerImpl(Context, post, apply, delete, action, location, propertylist, maxErrorsToBlacklist, retryIntervalToWhitelist, connectTimeout, socketTimeout, processLabel, connectionUseMax);
            };

            Post["/system/console/configMgr/com.day.cq.dam.indd.impl.handler.IndesignXMPHandler"] = parameters =>
            {
                var post = Parameters.ValueOf<bool?>(parameters, Context.Request, "post", ParameterType.Query);
                var apply = Parameters.ValueOf<bool?>(parameters, Context.Request, "apply", ParameterType.Query);
                var delete = Parameters.ValueOf<bool?>(parameters, Context.Request, "delete", ParameterType.Query);
                var action = Parameters.ValueOf<string>(parameters, Context.Request, "action", ParameterType.Query);
                var location = Parameters.ValueOf<string>(parameters, Context.Request, "location", ParameterType.Query);
                var propertylist = Parameters.ValueOf<List<string>>(parameters, Context.Request, "propertylist", ParameterType.Query);
                var processLabel = Parameters.ValueOf<string>(parameters, Context.Request, "processLabel", ParameterType.Query);
                var extractPages = Parameters.ValueOf<bool?>(parameters, Context.Request, "extractPages", ParameterType.Query);
                return service.ComDayCqDamInddImplHandlerIndesignXMPHandler(Context, post, apply, delete, action, location, propertylist, processLabel, extractPages);
            };

            Post["/system/console/configMgr/com.day.cq.dam.indd.impl.servlet.SnippetCreationServlet"] = parameters =>
            {
                var post = Parameters.ValueOf<bool?>(parameters, Context.Request, "post", ParameterType.Query);
                var apply = Parameters.ValueOf<bool?>(parameters, Context.Request, "apply", ParameterType.Query);
                var delete = Parameters.ValueOf<bool?>(parameters, Context.Request, "delete", ParameterType.Query);
                var action = Parameters.ValueOf<string>(parameters, Context.Request, "action", ParameterType.Query);
                var location = Parameters.ValueOf<string>(parameters, Context.Request, "location", ParameterType.Query);
                var propertylist = Parameters.ValueOf<List<string>>(parameters, Context.Request, "propertylist", ParameterType.Query);
                var snippetcreationMaxcollections = Parameters.ValueOf<int?>(parameters, Context.Request, "snippetcreationMaxcollections", ParameterType.Query);
                return service.ComDayCqDamInddImplServletSnippetCreationServlet(Context, post, apply, delete, action, location, propertylist, snippetcreationMaxcollections);
            };

            Post["/system/console/configMgr/com.day.cq.dam.indd.process.INDDMediaExtractProcess"] = parameters =>
            {
                var post = Parameters.ValueOf<bool?>(parameters, Context.Request, "post", ParameterType.Query);
                var apply = Parameters.ValueOf<bool?>(parameters, Context.Request, "apply", ParameterType.Query);
                var delete = Parameters.ValueOf<bool?>(parameters, Context.Request, "delete", ParameterType.Query);
                var action = Parameters.ValueOf<string>(parameters, Context.Request, "action", ParameterType.Query);
                var location = Parameters.ValueOf<string>(parameters, Context.Request, "location", ParameterType.Query);
                var propertylist = Parameters.ValueOf<List<string>>(parameters, Context.Request, "propertylist", ParameterType.Query);
                var processLabel = Parameters.ValueOf<string>(parameters, Context.Request, "processLabel", ParameterType.Query);
                var cqDamInddPagesRegex = Parameters.ValueOf<string>(parameters, Context.Request, "cqDamInddPagesRegex", ParameterType.Query);
                var idsJobDecoupled = Parameters.ValueOf<bool?>(parameters, Context.Request, "idsJobDecoupled", ParameterType.Query);
                var idsJobWorkflowModel = Parameters.ValueOf<string>(parameters, Context.Request, "idsJobWorkflowModel", ParameterType.Query);
                return service.ComDayCqDamInddProcessINDDMediaExtractProcess(Context, post, apply, delete, action, location, propertylist, processLabel, cqDamInddPagesRegex, idsJobDecoupled, idsJobWorkflowModel);
            };

            Post["/system/console/configMgr/com.day.cq.dam.performance.internal.AssetPerformanceDataHandlerImpl"] = parameters =>
            {
                var post = Parameters.ValueOf<bool?>(parameters, Context.Request, "post", ParameterType.Query);
                var apply = Parameters.ValueOf<bool?>(parameters, Context.Request, "apply", ParameterType.Query);
                var delete = Parameters.ValueOf<bool?>(parameters, Context.Request, "delete", ParameterType.Query);
                var action = Parameters.ValueOf<string>(parameters, Context.Request, "action", ParameterType.Query);
                var location = Parameters.ValueOf<string>(parameters, Context.Request, "location", ParameterType.Query);
                var propertylist = Parameters.ValueOf<List<string>>(parameters, Context.Request, "propertylist", ParameterType.Query);
                var batchCommitSize = Parameters.ValueOf<int?>(parameters, Context.Request, "batchCommitSize", ParameterType.Query);
                return service.ComDayCqDamPerformanceInternalAssetPerformanceDataHandlerImpl(Context, post, apply, delete, action, location, propertylist, batchCommitSize);
            };

            Post["/system/console/configMgr/com.day.cq.dam.performance.internal.AssetPerformanceReportSyncJob"] = parameters =>
            {
                var post = Parameters.ValueOf<bool?>(parameters, Context.Request, "post", ParameterType.Query);
                var apply = Parameters.ValueOf<bool?>(parameters, Context.Request, "apply", ParameterType.Query);
                var delete = Parameters.ValueOf<bool?>(parameters, Context.Request, "delete", ParameterType.Query);
                var action = Parameters.ValueOf<string>(parameters, Context.Request, "action", ParameterType.Query);
                var location = Parameters.ValueOf<string>(parameters, Context.Request, "location", ParameterType.Query);
                var propertylist = Parameters.ValueOf<List<string>>(parameters, Context.Request, "propertylist", ParameterType.Query);
                var schedulerExpression = Parameters.ValueOf<string>(parameters, Context.Request, "schedulerExpression", ParameterType.Query);
                return service.ComDayCqDamPerformanceInternalAssetPerformanceReportSyncJob(Context, post, apply, delete, action, location, propertylist, schedulerExpression);
            };

            Post["/system/console/configMgr/com.day.cq.dam.pim.impl.sourcing.upload.process.ProductAssetsUploadProcess"] = parameters =>
            {
                var post = Parameters.ValueOf<bool?>(parameters, Context.Request, "post", ParameterType.Query);
                var apply = Parameters.ValueOf<bool?>(parameters, Context.Request, "apply", ParameterType.Query);
                var delete = Parameters.ValueOf<bool?>(parameters, Context.Request, "delete", ParameterType.Query);
                var action = Parameters.ValueOf<string>(parameters, Context.Request, "action", ParameterType.Query);
                var location = Parameters.ValueOf<string>(parameters, Context.Request, "location", ParameterType.Query);
                var propertylist = Parameters.ValueOf<List<string>>(parameters, Context.Request, "propertylist", ParameterType.Query);
                var deleteZipFile = Parameters.ValueOf<bool?>(parameters, Context.Request, "deleteZipFile", ParameterType.Query);
                return service.ComDayCqDamPimImplSourcingUploadProcessProductAssetsUploadPro(Context, post, apply, delete, action, location, propertylist, deleteZipFile);
            };

            Post["/system/console/configMgr/com.day.cq.dam.s7dam.common.analytics.impl.S7damDynamicMediaConfigEventListener"] = parameters =>
            {
                var post = Parameters.ValueOf<bool?>(parameters, Context.Request, "post", ParameterType.Query);
                var apply = Parameters.ValueOf<bool?>(parameters, Context.Request, "apply", ParameterType.Query);
                var delete = Parameters.ValueOf<bool?>(parameters, Context.Request, "delete", ParameterType.Query);
                var action = Parameters.ValueOf<string>(parameters, Context.Request, "action", ParameterType.Query);
                var location = Parameters.ValueOf<string>(parameters, Context.Request, "location", ParameterType.Query);
                var propertylist = Parameters.ValueOf<List<string>>(parameters, Context.Request, "propertylist", ParameterType.Query);
                var cqDamS7damDynamicmediaconfigeventlistenerEnabled = Parameters.ValueOf<bool?>(parameters, Context.Request, "cqDamS7damDynamicmediaconfigeventlistenerEnabled", ParameterType.Query);
                return service.ComDayCqDamS7damCommonAnalyticsImplS7damDynamicMediaConfigEven(Context, post, apply, delete, action, location, propertylist, cqDamS7damDynamicmediaconfigeventlistenerEnabled);
            };

            Post["/system/console/configMgr/com.day.cq.dam.s7dam.common.analytics.impl.SiteCatalystReportRunner"] = parameters =>
            {
                var post = Parameters.ValueOf<bool?>(parameters, Context.Request, "post", ParameterType.Query);
                var apply = Parameters.ValueOf<bool?>(parameters, Context.Request, "apply", ParameterType.Query);
                var delete = Parameters.ValueOf<bool?>(parameters, Context.Request, "delete", ParameterType.Query);
                var action = Parameters.ValueOf<string>(parameters, Context.Request, "action", ParameterType.Query);
                var location = Parameters.ValueOf<string>(parameters, Context.Request, "location", ParameterType.Query);
                var propertylist = Parameters.ValueOf<List<string>>(parameters, Context.Request, "propertylist", ParameterType.Query);
                var schedulerExpression = Parameters.ValueOf<string>(parameters, Context.Request, "schedulerExpression", ParameterType.Query);
                var schedulerConcurrent = Parameters.ValueOf<bool?>(parameters, Context.Request, "schedulerConcurrent", ParameterType.Query);
                return service.ComDayCqDamS7damCommonAnalyticsImplSiteCatalystReportRunner(Context, post, apply, delete, action, location, propertylist, schedulerExpression, schedulerConcurrent);
            };

            Post["/system/console/configMgr/com.day.cq.dam.s7dam.common.post.servlets.SetCreateHandler"] = parameters =>
            {
                var post = Parameters.ValueOf<bool?>(parameters, Context.Request, "post", ParameterType.Query);
                var apply = Parameters.ValueOf<bool?>(parameters, Context.Request, "apply", ParameterType.Query);
                var delete = Parameters.ValueOf<bool?>(parameters, Context.Request, "delete", ParameterType.Query);
                var action = Parameters.ValueOf<string>(parameters, Context.Request, "action", ParameterType.Query);
                var location = Parameters.ValueOf<string>(parameters, Context.Request, "location", ParameterType.Query);
                var propertylist = Parameters.ValueOf<List<string>>(parameters, Context.Request, "propertylist", ParameterType.Query);
                var slingPostOperation = Parameters.ValueOf<string>(parameters, Context.Request, "slingPostOperation", ParameterType.Query);
                var slingServletMethods = Parameters.ValueOf<string>(parameters, Context.Request, "slingServletMethods", ParameterType.Query);
                return service.ComDayCqDamS7damCommonPostServletsSetCreateHandler(Context, post, apply, delete, action, location, propertylist, slingPostOperation, slingServletMethods);
            };

            Post["/system/console/configMgr/com.day.cq.dam.s7dam.common.post.servlets.SetModifyHandler"] = parameters =>
            {
                var post = Parameters.ValueOf<bool?>(parameters, Context.Request, "post", ParameterType.Query);
                var apply = Parameters.ValueOf<bool?>(parameters, Context.Request, "apply", ParameterType.Query);
                var delete = Parameters.ValueOf<bool?>(parameters, Context.Request, "delete", ParameterType.Query);
                var action = Parameters.ValueOf<string>(parameters, Context.Request, "action", ParameterType.Query);
                var location = Parameters.ValueOf<string>(parameters, Context.Request, "location", ParameterType.Query);
                var propertylist = Parameters.ValueOf<List<string>>(parameters, Context.Request, "propertylist", ParameterType.Query);
                var slingPostOperation = Parameters.ValueOf<string>(parameters, Context.Request, "slingPostOperation", ParameterType.Query);
                var slingServletMethods = Parameters.ValueOf<string>(parameters, Context.Request, "slingServletMethods", ParameterType.Query);
                return service.ComDayCqDamS7damCommonPostServletsSetModifyHandler(Context, post, apply, delete, action, location, propertylist, slingPostOperation, slingServletMethods);
            };

            Post["/system/console/configMgr/com.day.cq.dam.s7dam.common.process.VideoThumbnailDownloadProcess"] = parameters =>
            {
                var post = Parameters.ValueOf<bool?>(parameters, Context.Request, "post", ParameterType.Query);
                var apply = Parameters.ValueOf<bool?>(parameters, Context.Request, "apply", ParameterType.Query);
                var delete = Parameters.ValueOf<bool?>(parameters, Context.Request, "delete", ParameterType.Query);
                var action = Parameters.ValueOf<string>(parameters, Context.Request, "action", ParameterType.Query);
                var location = Parameters.ValueOf<string>(parameters, Context.Request, "location", ParameterType.Query);
                var propertylist = Parameters.ValueOf<List<string>>(parameters, Context.Request, "propertylist", ParameterType.Query);
                var processLabel = Parameters.ValueOf<string>(parameters, Context.Request, "processLabel", ParameterType.Query);
                return service.ComDayCqDamS7damCommonProcessVideoThumbnailDownloadProcess(Context, post, apply, delete, action, location, propertylist, processLabel);
            };

            Post["/system/console/configMgr/com.day.cq.dam.s7dam.common.S7damDamChangeEventListener"] = parameters =>
            {
                var post = Parameters.ValueOf<bool?>(parameters, Context.Request, "post", ParameterType.Query);
                var apply = Parameters.ValueOf<bool?>(parameters, Context.Request, "apply", ParameterType.Query);
                var delete = Parameters.ValueOf<bool?>(parameters, Context.Request, "delete", ParameterType.Query);
                var action = Parameters.ValueOf<string>(parameters, Context.Request, "action", ParameterType.Query);
                var location = Parameters.ValueOf<string>(parameters, Context.Request, "location", ParameterType.Query);
                var propertylist = Parameters.ValueOf<List<string>>(parameters, Context.Request, "propertylist", ParameterType.Query);
                var cqDamS7damDamchangeeventlistenerEnabled = Parameters.ValueOf<bool?>(parameters, Context.Request, "cqDamS7damDamchangeeventlistenerEnabled", ParameterType.Query);
                return service.ComDayCqDamS7damCommonS7damDamChangeEventListener(Context, post, apply, delete, action, location, propertylist, cqDamS7damDamchangeeventlistenerEnabled);
            };

            Post["/system/console/configMgr/com.day.cq.dam.s7dam.common.servlets.S7damProductInfoServlet"] = parameters =>
            {
                var post = Parameters.ValueOf<bool?>(parameters, Context.Request, "post", ParameterType.Query);
                var apply = Parameters.ValueOf<bool?>(parameters, Context.Request, "apply", ParameterType.Query);
                var delete = Parameters.ValueOf<bool?>(parameters, Context.Request, "delete", ParameterType.Query);
                var action = Parameters.ValueOf<string>(parameters, Context.Request, "action", ParameterType.Query);
                var location = Parameters.ValueOf<string>(parameters, Context.Request, "location", ParameterType.Query);
                var propertylist = Parameters.ValueOf<List<string>>(parameters, Context.Request, "propertylist", ParameterType.Query);
                var slingServletPaths = Parameters.ValueOf<string>(parameters, Context.Request, "slingServletPaths", ParameterType.Query);
                var slingServletMethods = Parameters.ValueOf<string>(parameters, Context.Request, "slingServletMethods", ParameterType.Query);
                return service.ComDayCqDamS7damCommonServletsS7damProductInfoServlet(Context, post, apply, delete, action, location, propertylist, slingServletPaths, slingServletMethods);
            };

            Post["/system/console/configMgr/com.day.cq.dam.s7dam.common.video.impl.VideoProxyClientServiceImpl"] = parameters =>
            {
                var post = Parameters.ValueOf<bool?>(parameters, Context.Request, "post", ParameterType.Query);
                var apply = Parameters.ValueOf<bool?>(parameters, Context.Request, "apply", ParameterType.Query);
                var delete = Parameters.ValueOf<bool?>(parameters, Context.Request, "delete", ParameterType.Query);
                var action = Parameters.ValueOf<string>(parameters, Context.Request, "action", ParameterType.Query);
                var location = Parameters.ValueOf<string>(parameters, Context.Request, "location", ParameterType.Query);
                var propertylist = Parameters.ValueOf<List<string>>(parameters, Context.Request, "propertylist", ParameterType.Query);
                var cqDamS7damVideoproxyclientserviceMultipartuploadMinsizeName = Parameters.ValueOf<int?>(parameters, Context.Request, "cqDamS7damVideoproxyclientserviceMultipartuploadMinsizeName", ParameterType.Query);
                var cqDamS7damVideoproxyclientserviceMultipartuploadPartsizeName = Parameters.ValueOf<int?>(parameters, Context.Request, "cqDamS7damVideoproxyclientserviceMultipartuploadPartsizeName", ParameterType.Query);
                var cqDamS7damVideoproxyclientserviceMultipartuploadNumthreadName = Parameters.ValueOf<int?>(parameters, Context.Request, "cqDamS7damVideoproxyclientserviceMultipartuploadNumthreadName", ParameterType.Query);
                var cqDamS7damVideoproxyclientserviceHttpReadtimeoutName = Parameters.ValueOf<int?>(parameters, Context.Request, "cqDamS7damVideoproxyclientserviceHttpReadtimeoutName", ParameterType.Query);
                var cqDamS7damVideoproxyclientserviceHttpConnectiontimeoutName = Parameters.ValueOf<int?>(parameters, Context.Request, "cqDamS7damVideoproxyclientserviceHttpConnectiontimeoutName", ParameterType.Query);
                var cqDamS7damVideoproxyclientserviceHttpMaxretrycountName = Parameters.ValueOf<int?>(parameters, Context.Request, "cqDamS7damVideoproxyclientserviceHttpMaxretrycountName", ParameterType.Query);
                var cqDamS7damVideoproxyclientserviceUploadprogressIntervalName = Parameters.ValueOf<int?>(parameters, Context.Request, "cqDamS7damVideoproxyclientserviceUploadprogressIntervalName", ParameterType.Query);
                return service.ComDayCqDamS7damCommonVideoImplVideoProxyClientServiceImpl(Context, post, apply, delete, action, location, propertylist, cqDamS7damVideoproxyclientserviceMultipartuploadMinsizeName, cqDamS7damVideoproxyclientserviceMultipartuploadPartsizeName, cqDamS7damVideoproxyclientserviceMultipartuploadNumthreadName, cqDamS7damVideoproxyclientserviceHttpReadtimeoutName, cqDamS7damVideoproxyclientserviceHttpConnectiontimeoutName, cqDamS7damVideoproxyclientserviceHttpMaxretrycountName, cqDamS7damVideoproxyclientserviceUploadprogressIntervalName);
            };

            Post["/system/console/configMgr/com.day.cq.dam.scene7.impl.Scene7APIClientImpl"] = parameters =>
            {
                var post = Parameters.ValueOf<bool?>(parameters, Context.Request, "post", ParameterType.Query);
                var apply = Parameters.ValueOf<bool?>(parameters, Context.Request, "apply", ParameterType.Query);
                var delete = Parameters.ValueOf<bool?>(parameters, Context.Request, "delete", ParameterType.Query);
                var action = Parameters.ValueOf<string>(parameters, Context.Request, "action", ParameterType.Query);
                var location = Parameters.ValueOf<string>(parameters, Context.Request, "location", ParameterType.Query);
                var propertylist = Parameters.ValueOf<List<string>>(parameters, Context.Request, "propertylist", ParameterType.Query);
                var cqDamScene7ApiclientRecordsperpageNofilterName = Parameters.ValueOf<int?>(parameters, Context.Request, "cqDamScene7ApiclientRecordsperpageNofilterName", ParameterType.Query);
                var cqDamScene7ApiclientRecordsperpageWithfilterName = Parameters.ValueOf<int?>(parameters, Context.Request, "cqDamScene7ApiclientRecordsperpageWithfilterName", ParameterType.Query);
                return service.ComDayCqDamScene7ImplScene7APIClientImpl(Context, post, apply, delete, action, location, propertylist, cqDamScene7ApiclientRecordsperpageNofilterName, cqDamScene7ApiclientRecordsperpageWithfilterName);
            };

            Post["/system/console/configMgr/com.day.cq.dam.scene7.impl.Scene7AssetMimeTypeServiceImpl"] = parameters =>
            {
                var post = Parameters.ValueOf<bool?>(parameters, Context.Request, "post", ParameterType.Query);
                var apply = Parameters.ValueOf<bool?>(parameters, Context.Request, "apply", ParameterType.Query);
                var delete = Parameters.ValueOf<bool?>(parameters, Context.Request, "delete", ParameterType.Query);
                var action = Parameters.ValueOf<string>(parameters, Context.Request, "action", ParameterType.Query);
                var location = Parameters.ValueOf<string>(parameters, Context.Request, "location", ParameterType.Query);
                var propertylist = Parameters.ValueOf<List<string>>(parameters, Context.Request, "propertylist", ParameterType.Query);
                var cqDamScene7AssetmimetypeserviceMapping = Parameters.ValueOf<List<string>>(parameters, Context.Request, "cqDamScene7AssetmimetypeserviceMapping", ParameterType.Query);
                return service.ComDayCqDamScene7ImplScene7AssetMimeTypeServiceImpl(Context, post, apply, delete, action, location, propertylist, cqDamScene7AssetmimetypeserviceMapping);
            };

            Post["/system/console/configMgr/com.day.cq.dam.scene7.impl.Scene7ConfigurationEventListener"] = parameters =>
            {
                var post = Parameters.ValueOf<bool?>(parameters, Context.Request, "post", ParameterType.Query);
                var apply = Parameters.ValueOf<bool?>(parameters, Context.Request, "apply", ParameterType.Query);
                var delete = Parameters.ValueOf<bool?>(parameters, Context.Request, "delete", ParameterType.Query);
                var action = Parameters.ValueOf<string>(parameters, Context.Request, "action", ParameterType.Query);
                var location = Parameters.ValueOf<string>(parameters, Context.Request, "location", ParameterType.Query);
                var propertylist = Parameters.ValueOf<List<string>>(parameters, Context.Request, "propertylist", ParameterType.Query);
                var cqDamScene7ConfigurationeventlistenerEnabled = Parameters.ValueOf<bool?>(parameters, Context.Request, "cqDamScene7ConfigurationeventlistenerEnabled", ParameterType.Query);
                return service.ComDayCqDamScene7ImplScene7ConfigurationEventListener(Context, post, apply, delete, action, location, propertylist, cqDamScene7ConfigurationeventlistenerEnabled);
            };

            Post["/system/console/configMgr/com.day.cq.dam.scene7.impl.Scene7DamChangeEventListener"] = parameters =>
            {
                var post = Parameters.ValueOf<bool?>(parameters, Context.Request, "post", ParameterType.Query);
                var apply = Parameters.ValueOf<bool?>(parameters, Context.Request, "apply", ParameterType.Query);
                var delete = Parameters.ValueOf<bool?>(parameters, Context.Request, "delete", ParameterType.Query);
                var action = Parameters.ValueOf<string>(parameters, Context.Request, "action", ParameterType.Query);
                var location = Parameters.ValueOf<string>(parameters, Context.Request, "location", ParameterType.Query);
                var propertylist = Parameters.ValueOf<List<string>>(parameters, Context.Request, "propertylist", ParameterType.Query);
                var cqDamScene7DamchangeeventlistenerEnabled = Parameters.ValueOf<bool?>(parameters, Context.Request, "cqDamScene7DamchangeeventlistenerEnabled", ParameterType.Query);
                var cqDamScene7DamchangeeventlistenerObservedPaths = Parameters.ValueOf<List<string>>(parameters, Context.Request, "cqDamScene7DamchangeeventlistenerObservedPaths", ParameterType.Query);
                return service.ComDayCqDamScene7ImplScene7DamChangeEventListener(Context, post, apply, delete, action, location, propertylist, cqDamScene7DamchangeeventlistenerEnabled, cqDamScene7DamchangeeventlistenerObservedPaths);
            };

            Post["/system/console/configMgr/com.day.cq.dam.scene7.impl.Scene7FlashTemplatesServiceImpl"] = parameters =>
            {
                var post = Parameters.ValueOf<bool?>(parameters, Context.Request, "post", ParameterType.Query);
                var apply = Parameters.ValueOf<bool?>(parameters, Context.Request, "apply", ParameterType.Query);
                var delete = Parameters.ValueOf<bool?>(parameters, Context.Request, "delete", ParameterType.Query);
                var action = Parameters.ValueOf<string>(parameters, Context.Request, "action", ParameterType.Query);
                var location = Parameters.ValueOf<string>(parameters, Context.Request, "location", ParameterType.Query);
                var propertylist = Parameters.ValueOf<List<string>>(parameters, Context.Request, "propertylist", ParameterType.Query);
                var scene7FlashTemplatesRti = Parameters.ValueOf<string>(parameters, Context.Request, "scene7FlashTemplatesRti", ParameterType.Query);
                var scene7FlashTemplatesRsi = Parameters.ValueOf<string>(parameters, Context.Request, "scene7FlashTemplatesRsi", ParameterType.Query);
                var scene7FlashTemplatesRb = Parameters.ValueOf<string>(parameters, Context.Request, "scene7FlashTemplatesRb", ParameterType.Query);
                var scene7FlashTemplatesRurl = Parameters.ValueOf<string>(parameters, Context.Request, "scene7FlashTemplatesRurl", ParameterType.Query);
                var scene7FlashTemplateUrlFormatParameter = Parameters.ValueOf<string>(parameters, Context.Request, "scene7FlashTemplateUrlFormatParameter", ParameterType.Query);
                return service.ComDayCqDamScene7ImplScene7FlashTemplatesServiceImpl(Context, post, apply, delete, action, location, propertylist, scene7FlashTemplatesRti, scene7FlashTemplatesRsi, scene7FlashTemplatesRb, scene7FlashTemplatesRurl, scene7FlashTemplateUrlFormatParameter);
            };

            Post["/system/console/configMgr/com.day.cq.dam.scene7.impl.Scene7UploadServiceImpl"] = parameters =>
            {
                var post = Parameters.ValueOf<bool?>(parameters, Context.Request, "post", ParameterType.Query);
                var apply = Parameters.ValueOf<bool?>(parameters, Context.Request, "apply", ParameterType.Query);
                var delete = Parameters.ValueOf<bool?>(parameters, Context.Request, "delete", ParameterType.Query);
                var action = Parameters.ValueOf<string>(parameters, Context.Request, "action", ParameterType.Query);
                var location = Parameters.ValueOf<string>(parameters, Context.Request, "location", ParameterType.Query);
                var propertylist = Parameters.ValueOf<List<string>>(parameters, Context.Request, "propertylist", ParameterType.Query);
                var cqDamScene7UploadserviceActivejobtimeoutLabel = Parameters.ValueOf<int?>(parameters, Context.Request, "cqDamScene7UploadserviceActivejobtimeoutLabel", ParameterType.Query);
                var cqDamScene7UploadserviceConnectionmaxperrouteLabel = Parameters.ValueOf<int?>(parameters, Context.Request, "cqDamScene7UploadserviceConnectionmaxperrouteLabel", ParameterType.Query);
                return service.ComDayCqDamScene7ImplScene7UploadServiceImpl(Context, post, apply, delete, action, location, propertylist, cqDamScene7UploadserviceActivejobtimeoutLabel, cqDamScene7UploadserviceConnectionmaxperrouteLabel);
            };

            Post["/system/console/configMgr/com.day.cq.dam.stock.integration.impl.cache.StockCacheConfigurationServiceImpl"] = parameters =>
            {
                var post = Parameters.ValueOf<bool?>(parameters, Context.Request, "post", ParameterType.Query);
                var apply = Parameters.ValueOf<bool?>(parameters, Context.Request, "apply", ParameterType.Query);
                var delete = Parameters.ValueOf<bool?>(parameters, Context.Request, "delete", ParameterType.Query);
                var action = Parameters.ValueOf<string>(parameters, Context.Request, "action", ParameterType.Query);
                var location = Parameters.ValueOf<string>(parameters, Context.Request, "location", ParameterType.Query);
                var propertylist = Parameters.ValueOf<List<string>>(parameters, Context.Request, "propertylist", ParameterType.Query);
                var getCacheExpirationUnit = Parameters.ValueOf<string>(parameters, Context.Request, "getCacheExpirationUnit", ParameterType.Query);
                var getCacheExpirationValue = Parameters.ValueOf<int?>(parameters, Context.Request, "getCacheExpirationValue", ParameterType.Query);
                return service.ComDayCqDamStockIntegrationImplCacheStockCacheConfigurationSer(Context, post, apply, delete, action, location, propertylist, getCacheExpirationUnit, getCacheExpirationValue);
            };

            Post["/system/console/configMgr/com.day.cq.dam.stock.integration.impl.configuration.StockConfigurationImpl"] = parameters =>
            {
                var post = Parameters.ValueOf<bool?>(parameters, Context.Request, "post", ParameterType.Query);
                var apply = Parameters.ValueOf<bool?>(parameters, Context.Request, "apply", ParameterType.Query);
                var delete = Parameters.ValueOf<bool?>(parameters, Context.Request, "delete", ParameterType.Query);
                var action = Parameters.ValueOf<string>(parameters, Context.Request, "action", ParameterType.Query);
                var location = Parameters.ValueOf<string>(parameters, Context.Request, "location", ParameterType.Query);
                var propertylist = Parameters.ValueOf<List<string>>(parameters, Context.Request, "propertylist", ParameterType.Query);
                var name = Parameters.ValueOf<string>(parameters, Context.Request, "name", ParameterType.Query);
                var locale = Parameters.ValueOf<string>(parameters, Context.Request, "locale", ParameterType.Query);
                var imsConfig = Parameters.ValueOf<string>(parameters, Context.Request, "imsConfig", ParameterType.Query);
                return service.ComDayCqDamStockIntegrationImplConfigurationStockConfiguration(Context, post, apply, delete, action, location, propertylist, name, locale, imsConfig);
            };

            Post["/system/console/configMgr/com.day.cq.dam.video.impl.servlet.VideoTestServlet"] = parameters =>
            {
                var post = Parameters.ValueOf<bool?>(parameters, Context.Request, "post", ParameterType.Query);
                var apply = Parameters.ValueOf<bool?>(parameters, Context.Request, "apply", ParameterType.Query);
                var delete = Parameters.ValueOf<bool?>(parameters, Context.Request, "delete", ParameterType.Query);
                var action = Parameters.ValueOf<string>(parameters, Context.Request, "action", ParameterType.Query);
                var location = Parameters.ValueOf<string>(parameters, Context.Request, "location", ParameterType.Query);
                var propertylist = Parameters.ValueOf<List<string>>(parameters, Context.Request, "propertylist", ParameterType.Query);
                var enabled = Parameters.ValueOf<bool?>(parameters, Context.Request, "enabled", ParameterType.Query);
                return service.ComDayCqDamVideoImplServletVideoTestServlet(Context, post, apply, delete, action, location, propertylist, enabled);
            };

            Post["/system/console/configMgr/com.day.cq.extwidget.servlets.ImageSpriteServlet"] = parameters =>
            {
                var post = Parameters.ValueOf<bool?>(parameters, Context.Request, "post", ParameterType.Query);
                var apply = Parameters.ValueOf<bool?>(parameters, Context.Request, "apply", ParameterType.Query);
                var delete = Parameters.ValueOf<bool?>(parameters, Context.Request, "delete", ParameterType.Query);
                var action = Parameters.ValueOf<string>(parameters, Context.Request, "action", ParameterType.Query);
                var location = Parameters.ValueOf<string>(parameters, Context.Request, "location", ParameterType.Query);
                var propertylist = Parameters.ValueOf<List<string>>(parameters, Context.Request, "propertylist", ParameterType.Query);
                var maxWidth = Parameters.ValueOf<int?>(parameters, Context.Request, "maxWidth", ParameterType.Query);
                var maxHeight = Parameters.ValueOf<int?>(parameters, Context.Request, "maxHeight", ParameterType.Query);
                return service.ComDayCqExtwidgetServletsImageSpriteServlet(Context, post, apply, delete, action, location, propertylist, maxWidth, maxHeight);
            };

            Post["/system/console/configMgr/com.day.cq.image.internal.font.FontHelper"] = parameters =>
            {
                var post = Parameters.ValueOf<bool?>(parameters, Context.Request, "post", ParameterType.Query);
                var apply = Parameters.ValueOf<bool?>(parameters, Context.Request, "apply", ParameterType.Query);
                var delete = Parameters.ValueOf<bool?>(parameters, Context.Request, "delete", ParameterType.Query);
                var action = Parameters.ValueOf<string>(parameters, Context.Request, "action", ParameterType.Query);
                var location = Parameters.ValueOf<string>(parameters, Context.Request, "location", ParameterType.Query);
                var propertylist = Parameters.ValueOf<List<string>>(parameters, Context.Request, "propertylist", ParameterType.Query);
                var fontpath = Parameters.ValueOf<List<string>>(parameters, Context.Request, "fontpath", ParameterType.Query);
                var oversamplingFactor = Parameters.ValueOf<int?>(parameters, Context.Request, "oversamplingFactor", ParameterType.Query);
                return service.ComDayCqImageInternalFontFontHelper(Context, post, apply, delete, action, location, propertylist, fontpath, oversamplingFactor);
            };

            Post["/system/console/configMgr/com.day.cq.jcrclustersupport.ClusterStartLevelController"] = parameters =>
            {
                var post = Parameters.ValueOf<bool?>(parameters, Context.Request, "post", ParameterType.Query);
                var apply = Parameters.ValueOf<bool?>(parameters, Context.Request, "apply", ParameterType.Query);
                var delete = Parameters.ValueOf<bool?>(parameters, Context.Request, "delete", ParameterType.Query);
                var action = Parameters.ValueOf<string>(parameters, Context.Request, "action", ParameterType.Query);
                var location = Parameters.ValueOf<string>(parameters, Context.Request, "location", ParameterType.Query);
                var propertylist = Parameters.ValueOf<List<string>>(parameters, Context.Request, "propertylist", ParameterType.Query);
                var clusterLevelEnable = Parameters.ValueOf<bool?>(parameters, Context.Request, "clusterLevelEnable", ParameterType.Query);
                var clusterMasterLevel = Parameters.ValueOf<int?>(parameters, Context.Request, "clusterMasterLevel", ParameterType.Query);
                var clusterSlaveLevel = Parameters.ValueOf<int?>(parameters, Context.Request, "clusterSlaveLevel", ParameterType.Query);
                return service.ComDayCqJcrclustersupportClusterStartLevelController(Context, post, apply, delete, action, location, propertylist, clusterLevelEnable, clusterMasterLevel, clusterSlaveLevel);
            };

            Post["/system/console/configMgr/com.day.cq.mailer.DefaultMailService"] = parameters =>
            {
                var post = Parameters.ValueOf<bool?>(parameters, Context.Request, "post", ParameterType.Query);
                var apply = Parameters.ValueOf<bool?>(parameters, Context.Request, "apply", ParameterType.Query);
                var delete = Parameters.ValueOf<bool?>(parameters, Context.Request, "delete", ParameterType.Query);
                var action = Parameters.ValueOf<string>(parameters, Context.Request, "action", ParameterType.Query);
                var location = Parameters.ValueOf<string>(parameters, Context.Request, "location", ParameterType.Query);
                var propertylist = Parameters.ValueOf<List<string>>(parameters, Context.Request, "propertylist", ParameterType.Query);
                var smtpHost = Parameters.ValueOf<string>(parameters, Context.Request, "smtpHost", ParameterType.Query);
                var smtpPort = Parameters.ValueOf<int?>(parameters, Context.Request, "smtpPort", ParameterType.Query);
                var smtpUser = Parameters.ValueOf<string>(parameters, Context.Request, "smtpUser", ParameterType.Query);
                var smtpPassword = Parameters.ValueOf<string>(parameters, Context.Request, "smtpPassword", ParameterType.Query);
                var fromAddress = Parameters.ValueOf<string>(parameters, Context.Request, "fromAddress", ParameterType.Query);
                var smtpSsl = Parameters.ValueOf<bool?>(parameters, Context.Request, "smtpSsl", ParameterType.Query);
                var smtpStarttls = Parameters.ValueOf<bool?>(parameters, Context.Request, "smtpStarttls", ParameterType.Query);
                var debugEmail = Parameters.ValueOf<bool?>(parameters, Context.Request, "debugEmail", ParameterType.Query);
                return service.ComDayCqMailerDefaultMailService(Context, post, apply, delete, action, location, propertylist, smtpHost, smtpPort, smtpUser, smtpPassword, fromAddress, smtpSsl, smtpStarttls, debugEmail);
            };

            Post["/system/console/configMgr/com.day.cq.mailer.impl.CqMailingService"] = parameters =>
            {
                var post = Parameters.ValueOf<bool?>(parameters, Context.Request, "post", ParameterType.Query);
                var apply = Parameters.ValueOf<bool?>(parameters, Context.Request, "apply", ParameterType.Query);
                var delete = Parameters.ValueOf<bool?>(parameters, Context.Request, "delete", ParameterType.Query);
                var action = Parameters.ValueOf<string>(parameters, Context.Request, "action", ParameterType.Query);
                var location = Parameters.ValueOf<string>(parameters, Context.Request, "location", ParameterType.Query);
                var propertylist = Parameters.ValueOf<List<string>>(parameters, Context.Request, "propertylist", ParameterType.Query);
                var maxRecipientCount = Parameters.ValueOf<string>(parameters, Context.Request, "maxRecipientCount", ParameterType.Query);
                return service.ComDayCqMailerImplCqMailingService(Context, post, apply, delete, action, location, propertylist, maxRecipientCount);
            };

            Post["/system/console/configMgr/com.day.cq.mailer.impl.email.CqEmailTemplateFactory"] = parameters =>
            {
                var post = Parameters.ValueOf<bool?>(parameters, Context.Request, "post", ParameterType.Query);
                var apply = Parameters.ValueOf<bool?>(parameters, Context.Request, "apply", ParameterType.Query);
                var delete = Parameters.ValueOf<bool?>(parameters, Context.Request, "delete", ParameterType.Query);
                var action = Parameters.ValueOf<string>(parameters, Context.Request, "action", ParameterType.Query);
                var location = Parameters.ValueOf<string>(parameters, Context.Request, "location", ParameterType.Query);
                var propertylist = Parameters.ValueOf<List<string>>(parameters, Context.Request, "propertylist", ParameterType.Query);
                var mailerEmailCharset = Parameters.ValueOf<string>(parameters, Context.Request, "mailerEmailCharset", ParameterType.Query);
                return service.ComDayCqMailerImplEmailCqEmailTemplateFactory(Context, post, apply, delete, action, location, propertylist, mailerEmailCharset);
            };

            Post["/system/console/configMgr/com.day.cq.mailer.impl.email.CqRetrieverTemplateFactory"] = parameters =>
            {
                var post = Parameters.ValueOf<bool?>(parameters, Context.Request, "post", ParameterType.Query);
                var apply = Parameters.ValueOf<bool?>(parameters, Context.Request, "apply", ParameterType.Query);
                var delete = Parameters.ValueOf<bool?>(parameters, Context.Request, "delete", ParameterType.Query);
                var action = Parameters.ValueOf<string>(parameters, Context.Request, "action", ParameterType.Query);
                var location = Parameters.ValueOf<string>(parameters, Context.Request, "location", ParameterType.Query);
                var propertylist = Parameters.ValueOf<List<string>>(parameters, Context.Request, "propertylist", ParameterType.Query);
                var mailerEmailEmbed = Parameters.ValueOf<bool?>(parameters, Context.Request, "mailerEmailEmbed", ParameterType.Query);
                var mailerEmailCharset = Parameters.ValueOf<string>(parameters, Context.Request, "mailerEmailCharset", ParameterType.Query);
                var mailerEmailRetrieverUserID = Parameters.ValueOf<string>(parameters, Context.Request, "mailerEmailRetrieverUserID", ParameterType.Query);
                var mailerEmailRetrieverUserPWD = Parameters.ValueOf<string>(parameters, Context.Request, "mailerEmailRetrieverUserPWD", ParameterType.Query);
                return service.ComDayCqMailerImplEmailCqRetrieverTemplateFactory(Context, post, apply, delete, action, location, propertylist, mailerEmailEmbed, mailerEmailCharset, mailerEmailRetrieverUserID, mailerEmailRetrieverUserPWD);
            };

            Post["/system/console/configMgr/com.day.cq.mcm.campaign.impl.IntegrationConfigImpl"] = parameters =>
            {
                var post = Parameters.ValueOf<bool?>(parameters, Context.Request, "post", ParameterType.Query);
                var apply = Parameters.ValueOf<bool?>(parameters, Context.Request, "apply", ParameterType.Query);
                var delete = Parameters.ValueOf<bool?>(parameters, Context.Request, "delete", ParameterType.Query);
                var action = Parameters.ValueOf<string>(parameters, Context.Request, "action", ParameterType.Query);
                var location = Parameters.ValueOf<string>(parameters, Context.Request, "location", ParameterType.Query);
                var propertylist = Parameters.ValueOf<List<string>>(parameters, Context.Request, "propertylist", ParameterType.Query);
                var aemMcmCampaignFormConstraints = Parameters.ValueOf<List<string>>(parameters, Context.Request, "aemMcmCampaignFormConstraints", ParameterType.Query);
                var aemMcmCampaignPublicUrl = Parameters.ValueOf<string>(parameters, Context.Request, "aemMcmCampaignPublicUrl", ParameterType.Query);
                var aemMcmCampaignRelaxedSSL = Parameters.ValueOf<bool?>(parameters, Context.Request, "aemMcmCampaignRelaxedSSL", ParameterType.Query);
                return service.ComDayCqMcmCampaignImplIntegrationConfigImpl(Context, post, apply, delete, action, location, propertylist, aemMcmCampaignFormConstraints, aemMcmCampaignPublicUrl, aemMcmCampaignRelaxedSSL);
            };

            Post["/system/console/configMgr/com.day.cq.mcm.campaign.importer.PersonalizedTextHandlerFactory"] = parameters =>
            {
                var post = Parameters.ValueOf<bool?>(parameters, Context.Request, "post", ParameterType.Query);
                var apply = Parameters.ValueOf<bool?>(parameters, Context.Request, "apply", ParameterType.Query);
                var delete = Parameters.ValueOf<bool?>(parameters, Context.Request, "delete", ParameterType.Query);
                var action = Parameters.ValueOf<string>(parameters, Context.Request, "action", ParameterType.Query);
                var location = Parameters.ValueOf<string>(parameters, Context.Request, "location", ParameterType.Query);
                var propertylist = Parameters.ValueOf<List<string>>(parameters, Context.Request, "propertylist", ParameterType.Query);
                var serviceRanking = Parameters.ValueOf<int?>(parameters, Context.Request, "serviceRanking", ParameterType.Query);
                var tagpattern = Parameters.ValueOf<string>(parameters, Context.Request, "tagpattern", ParameterType.Query);
                return service.ComDayCqMcmCampaignImporterPersonalizedTextHandlerFactory(Context, post, apply, delete, action, location, propertylist, serviceRanking, tagpattern);
            };

            Post["/system/console/configMgr/com.day.cq.mcm.core.newsletter.NewsletterEmailServiceImpl"] = parameters =>
            {
                var post = Parameters.ValueOf<bool?>(parameters, Context.Request, "post", ParameterType.Query);
                var apply = Parameters.ValueOf<bool?>(parameters, Context.Request, "apply", ParameterType.Query);
                var delete = Parameters.ValueOf<bool?>(parameters, Context.Request, "delete", ParameterType.Query);
                var action = Parameters.ValueOf<string>(parameters, Context.Request, "action", ParameterType.Query);
                var location = Parameters.ValueOf<string>(parameters, Context.Request, "location", ParameterType.Query);
                var propertylist = Parameters.ValueOf<List<string>>(parameters, Context.Request, "propertylist", ParameterType.Query);
                var fromAddress = Parameters.ValueOf<string>(parameters, Context.Request, "fromAddress", ParameterType.Query);
                var senderHost = Parameters.ValueOf<string>(parameters, Context.Request, "senderHost", ParameterType.Query);
                var maxBounceCount = Parameters.ValueOf<string>(parameters, Context.Request, "maxBounceCount", ParameterType.Query);
                return service.ComDayCqMcmCoreNewsletterNewsletterEmailServiceImpl(Context, post, apply, delete, action, location, propertylist, fromAddress, senderHost, maxBounceCount);
            };

            Post["/system/console/configMgr/com.day.cq.mcm.impl.MCMConfiguration"] = parameters =>
            {
                var post = Parameters.ValueOf<bool?>(parameters, Context.Request, "post", ParameterType.Query);
                var apply = Parameters.ValueOf<bool?>(parameters, Context.Request, "apply", ParameterType.Query);
                var delete = Parameters.ValueOf<bool?>(parameters, Context.Request, "delete", ParameterType.Query);
                var action = Parameters.ValueOf<string>(parameters, Context.Request, "action", ParameterType.Query);
                var location = Parameters.ValueOf<string>(parameters, Context.Request, "location", ParameterType.Query);
                var propertylist = Parameters.ValueOf<List<string>>(parameters, Context.Request, "propertylist", ParameterType.Query);
                var experienceIndirection = Parameters.ValueOf<List<string>>(parameters, Context.Request, "experienceIndirection", ParameterType.Query);
                var touchpointIndirection = Parameters.ValueOf<List<string>>(parameters, Context.Request, "touchpointIndirection", ParameterType.Query);
                return service.ComDayCqMcmImplMCMConfiguration(Context, post, apply, delete, action, location, propertylist, experienceIndirection, touchpointIndirection);
            };

            Post["/system/console/configMgr/com.day.cq.mcm.landingpage.parser.taghandlers.cta.ClickThroughComponentTagHandlerFactory"] = parameters =>
            {
                var post = Parameters.ValueOf<bool?>(parameters, Context.Request, "post", ParameterType.Query);
                var apply = Parameters.ValueOf<bool?>(parameters, Context.Request, "apply", ParameterType.Query);
                var delete = Parameters.ValueOf<bool?>(parameters, Context.Request, "delete", ParameterType.Query);
                var action = Parameters.ValueOf<string>(parameters, Context.Request, "action", ParameterType.Query);
                var location = Parameters.ValueOf<string>(parameters, Context.Request, "location", ParameterType.Query);
                var propertylist = Parameters.ValueOf<List<string>>(parameters, Context.Request, "propertylist", ParameterType.Query);
                var serviceRanking = Parameters.ValueOf<int?>(parameters, Context.Request, "serviceRanking", ParameterType.Query);
                var tagpattern = Parameters.ValueOf<string>(parameters, Context.Request, "tagpattern", ParameterType.Query);
                var componentResourceType = Parameters.ValueOf<string>(parameters, Context.Request, "componentResourceType", ParameterType.Query);
                return service.ComDayCqMcmLandingpageParserTaghandlersCtaClickThroughComponen(Context, post, apply, delete, action, location, propertylist, serviceRanking, tagpattern, componentResourceType);
            };

            Post["/system/console/configMgr/com.day.cq.mcm.landingpage.parser.taghandlers.cta.GraphicalClickThroughComponentTagHandlerFactory"] = parameters =>
            {
                var post = Parameters.ValueOf<bool?>(parameters, Context.Request, "post", ParameterType.Query);
                var apply = Parameters.ValueOf<bool?>(parameters, Context.Request, "apply", ParameterType.Query);
                var delete = Parameters.ValueOf<bool?>(parameters, Context.Request, "delete", ParameterType.Query);
                var action = Parameters.ValueOf<string>(parameters, Context.Request, "action", ParameterType.Query);
                var location = Parameters.ValueOf<string>(parameters, Context.Request, "location", ParameterType.Query);
                var propertylist = Parameters.ValueOf<List<string>>(parameters, Context.Request, "propertylist", ParameterType.Query);
                var serviceRanking = Parameters.ValueOf<int?>(parameters, Context.Request, "serviceRanking", ParameterType.Query);
                var tagpattern = Parameters.ValueOf<string>(parameters, Context.Request, "tagpattern", ParameterType.Query);
                var componentResourceType = Parameters.ValueOf<string>(parameters, Context.Request, "componentResourceType", ParameterType.Query);
                return service.ComDayCqMcmLandingpageParserTaghandlersCtaGraphicalClickThroug(Context, post, apply, delete, action, location, propertylist, serviceRanking, tagpattern, componentResourceType);
            };

            Post["/system/console/configMgr/com.day.cq.mcm.landingpage.parser.taghandlers.cta.LeadFormCTAComponentTagHandlerFactory"] = parameters =>
            {
                var post = Parameters.ValueOf<bool?>(parameters, Context.Request, "post", ParameterType.Query);
                var apply = Parameters.ValueOf<bool?>(parameters, Context.Request, "apply", ParameterType.Query);
                var delete = Parameters.ValueOf<bool?>(parameters, Context.Request, "delete", ParameterType.Query);
                var action = Parameters.ValueOf<string>(parameters, Context.Request, "action", ParameterType.Query);
                var location = Parameters.ValueOf<string>(parameters, Context.Request, "location", ParameterType.Query);
                var propertylist = Parameters.ValueOf<List<string>>(parameters, Context.Request, "propertylist", ParameterType.Query);
                var serviceRanking = Parameters.ValueOf<int?>(parameters, Context.Request, "serviceRanking", ParameterType.Query);
                var tagpattern = Parameters.ValueOf<string>(parameters, Context.Request, "tagpattern", ParameterType.Query);
                return service.ComDayCqMcmLandingpageParserTaghandlersCtaLeadFormCTAComponent(Context, post, apply, delete, action, location, propertylist, serviceRanking, tagpattern);
            };

            Post["/system/console/configMgr/com.day.cq.mcm.landingpage.parser.taghandlers.mbox.MBoxExperienceTagHandlerFactory"] = parameters =>
            {
                var post = Parameters.ValueOf<bool?>(parameters, Context.Request, "post", ParameterType.Query);
                var apply = Parameters.ValueOf<bool?>(parameters, Context.Request, "apply", ParameterType.Query);
                var delete = Parameters.ValueOf<bool?>(parameters, Context.Request, "delete", ParameterType.Query);
                var action = Parameters.ValueOf<string>(parameters, Context.Request, "action", ParameterType.Query);
                var location = Parameters.ValueOf<string>(parameters, Context.Request, "location", ParameterType.Query);
                var propertylist = Parameters.ValueOf<List<string>>(parameters, Context.Request, "propertylist", ParameterType.Query);
                var serviceRanking = Parameters.ValueOf<int?>(parameters, Context.Request, "serviceRanking", ParameterType.Query);
                var tagpattern = Parameters.ValueOf<string>(parameters, Context.Request, "tagpattern", ParameterType.Query);
                return service.ComDayCqMcmLandingpageParserTaghandlersMboxMBoxExperienceTagHa(Context, post, apply, delete, action, location, propertylist, serviceRanking, tagpattern);
            };

            Post["/system/console/configMgr/com.day.cq.mcm.landingpage.parser.taghandlers.mbox.TargetComponentTagHandlerFactory"] = parameters =>
            {
                var post = Parameters.ValueOf<bool?>(parameters, Context.Request, "post", ParameterType.Query);
                var apply = Parameters.ValueOf<bool?>(parameters, Context.Request, "apply", ParameterType.Query);
                var delete = Parameters.ValueOf<bool?>(parameters, Context.Request, "delete", ParameterType.Query);
                var action = Parameters.ValueOf<string>(parameters, Context.Request, "action", ParameterType.Query);
                var location = Parameters.ValueOf<string>(parameters, Context.Request, "location", ParameterType.Query);
                var propertylist = Parameters.ValueOf<List<string>>(parameters, Context.Request, "propertylist", ParameterType.Query);
                var serviceRanking = Parameters.ValueOf<int?>(parameters, Context.Request, "serviceRanking", ParameterType.Query);
                var tagpattern = Parameters.ValueOf<string>(parameters, Context.Request, "tagpattern", ParameterType.Query);
                var componentResourceType = Parameters.ValueOf<string>(parameters, Context.Request, "componentResourceType", ParameterType.Query);
                return service.ComDayCqMcmLandingpageParserTaghandlersMboxTargetComponentTagH(Context, post, apply, delete, action, location, propertylist, serviceRanking, tagpattern, componentResourceType);
            };

            Post["/system/console/configMgr/com.day.cq.notification.impl.NotificationServiceImpl"] = parameters =>
            {
                var post = Parameters.ValueOf<bool?>(parameters, Context.Request, "post", ParameterType.Query);
                var apply = Parameters.ValueOf<bool?>(parameters, Context.Request, "apply", ParameterType.Query);
                var delete = Parameters.ValueOf<bool?>(parameters, Context.Request, "delete", ParameterType.Query);
                var action = Parameters.ValueOf<string>(parameters, Context.Request, "action", ParameterType.Query);
                var location = Parameters.ValueOf<string>(parameters, Context.Request, "location", ParameterType.Query);
                var propertylist = Parameters.ValueOf<List<string>>(parameters, Context.Request, "propertylist", ParameterType.Query);
                var eventFilter = Parameters.ValueOf<string>(parameters, Context.Request, "eventFilter", ParameterType.Query);
                return service.ComDayCqNotificationImplNotificationServiceImpl(Context, post, apply, delete, action, location, propertylist, eventFilter);
            };

            Post["/system/console/configMgr/com.day.cq.personalization.impl.servlets.TargetingConfigurationServlet"] = parameters =>
            {
                var post = Parameters.ValueOf<bool?>(parameters, Context.Request, "post", ParameterType.Query);
                var apply = Parameters.ValueOf<bool?>(parameters, Context.Request, "apply", ParameterType.Query);
                var delete = Parameters.ValueOf<bool?>(parameters, Context.Request, "delete", ParameterType.Query);
                var action = Parameters.ValueOf<string>(parameters, Context.Request, "action", ParameterType.Query);
                var location = Parameters.ValueOf<string>(parameters, Context.Request, "location", ParameterType.Query);
                var propertylist = Parameters.ValueOf<List<string>>(parameters, Context.Request, "propertylist", ParameterType.Query);
                var forcelocation = Parameters.ValueOf<bool?>(parameters, Context.Request, "forcelocation", ParameterType.Query);
                return service.ComDayCqPersonalizationImplServletsTargetingConfigurationServlet(Context, post, apply, delete, action, location, propertylist, forcelocation);
            };

            Post["/system/console/configMgr/com.day.cq.polling.importer.impl.ManagedPollConfigImpl"] = parameters =>
            {
                var post = Parameters.ValueOf<bool?>(parameters, Context.Request, "post", ParameterType.Query);
                var apply = Parameters.ValueOf<bool?>(parameters, Context.Request, "apply", ParameterType.Query);
                var delete = Parameters.ValueOf<bool?>(parameters, Context.Request, "delete", ParameterType.Query);
                var action = Parameters.ValueOf<string>(parameters, Context.Request, "action", ParameterType.Query);
                var location = Parameters.ValueOf<string>(parameters, Context.Request, "location", ParameterType.Query);
                var propertylist = Parameters.ValueOf<List<string>>(parameters, Context.Request, "propertylist", ParameterType.Query);
                var id = Parameters.ValueOf<string>(parameters, Context.Request, "id", ParameterType.Query);
                var enabled = Parameters.ValueOf<bool?>(parameters, Context.Request, "enabled", ParameterType.Query);
                var reference = Parameters.ValueOf<bool?>(parameters, Context.Request, "reference", ParameterType.Query);
                var interval = Parameters.ValueOf<int?>(parameters, Context.Request, "interval", ParameterType.Query);
                var expression = Parameters.ValueOf<string>(parameters, Context.Request, "expression", ParameterType.Query);
                var source = Parameters.ValueOf<string>(parameters, Context.Request, "source", ParameterType.Query);
                var target = Parameters.ValueOf<string>(parameters, Context.Request, "target", ParameterType.Query);
                var login = Parameters.ValueOf<string>(parameters, Context.Request, "login", ParameterType.Query);
                var password = Parameters.ValueOf<string>(parameters, Context.Request, "password", ParameterType.Query);
                return service.ComDayCqPollingImporterImplManagedPollConfigImpl(Context, post, apply, delete, action, location, propertylist, id, enabled, reference, interval, expression, source, target, login, password);
            };

            Post["/system/console/configMgr/com.day.cq.polling.importer.impl.ManagedPollingImporterImpl"] = parameters =>
            {
                var post = Parameters.ValueOf<bool?>(parameters, Context.Request, "post", ParameterType.Query);
                var apply = Parameters.ValueOf<bool?>(parameters, Context.Request, "apply", ParameterType.Query);
                var delete = Parameters.ValueOf<bool?>(parameters, Context.Request, "delete", ParameterType.Query);
                var action = Parameters.ValueOf<string>(parameters, Context.Request, "action", ParameterType.Query);
                var location = Parameters.ValueOf<string>(parameters, Context.Request, "location", ParameterType.Query);
                var propertylist = Parameters.ValueOf<List<string>>(parameters, Context.Request, "propertylist", ParameterType.Query);
                var importerUser = Parameters.ValueOf<string>(parameters, Context.Request, "importerUser", ParameterType.Query);
                return service.ComDayCqPollingImporterImplManagedPollingImporterImpl(Context, post, apply, delete, action, location, propertylist, importerUser);
            };

            Post["/system/console/configMgr/com.day.cq.polling.importer.impl.PollingImporterImpl"] = parameters =>
            {
                var post = Parameters.ValueOf<bool?>(parameters, Context.Request, "post", ParameterType.Query);
                var apply = Parameters.ValueOf<bool?>(parameters, Context.Request, "apply", ParameterType.Query);
                var delete = Parameters.ValueOf<bool?>(parameters, Context.Request, "delete", ParameterType.Query);
                var action = Parameters.ValueOf<string>(parameters, Context.Request, "action", ParameterType.Query);
                var location = Parameters.ValueOf<string>(parameters, Context.Request, "location", ParameterType.Query);
                var propertylist = Parameters.ValueOf<List<string>>(parameters, Context.Request, "propertylist", ParameterType.Query);
                var importerMinInterval = Parameters.ValueOf<int?>(parameters, Context.Request, "importerMinInterval", ParameterType.Query);
                var importerUser = Parameters.ValueOf<string>(parameters, Context.Request, "importerUser", ParameterType.Query);
                var excludePaths = Parameters.ValueOf<List<string>>(parameters, Context.Request, "excludePaths", ParameterType.Query);
                var includePaths = Parameters.ValueOf<List<string>>(parameters, Context.Request, "includePaths", ParameterType.Query);
                return service.ComDayCqPollingImporterImplPollingImporterImpl(Context, post, apply, delete, action, location, propertylist, importerMinInterval, importerUser, excludePaths, includePaths);
            };

            Post["/system/console/configMgr/com.day.cq.replication.audit.ReplicationEventListener"] = parameters =>
            {
                var post = Parameters.ValueOf<bool?>(parameters, Context.Request, "post", ParameterType.Query);
                var apply = Parameters.ValueOf<bool?>(parameters, Context.Request, "apply", ParameterType.Query);
                var delete = Parameters.ValueOf<bool?>(parameters, Context.Request, "delete", ParameterType.Query);
                var action = Parameters.ValueOf<string>(parameters, Context.Request, "action", ParameterType.Query);
                var location = Parameters.ValueOf<string>(parameters, Context.Request, "location", ParameterType.Query);
                var propertylist = Parameters.ValueOf<List<string>>(parameters, Context.Request, "propertylist", ParameterType.Query);
                var serviceRanking = Parameters.ValueOf<int?>(parameters, Context.Request, "serviceRanking", ParameterType.Query);
                return service.ComDayCqReplicationAuditReplicationEventListener(Context, post, apply, delete, action, location, propertylist, serviceRanking);
            };

            Post["/system/console/configMgr/com.day.cq.replication.content.StaticContentBuilder"] = parameters =>
            {
                var post = Parameters.ValueOf<bool?>(parameters, Context.Request, "post", ParameterType.Query);
                var apply = Parameters.ValueOf<bool?>(parameters, Context.Request, "apply", ParameterType.Query);
                var delete = Parameters.ValueOf<bool?>(parameters, Context.Request, "delete", ParameterType.Query);
                var action = Parameters.ValueOf<string>(parameters, Context.Request, "action", ParameterType.Query);
                var location = Parameters.ValueOf<string>(parameters, Context.Request, "location", ParameterType.Query);
                var propertylist = Parameters.ValueOf<List<string>>(parameters, Context.Request, "propertylist", ParameterType.Query);
                var host = Parameters.ValueOf<string>(parameters, Context.Request, "host", ParameterType.Query);
                var port = Parameters.ValueOf<int?>(parameters, Context.Request, "port", ParameterType.Query);
                return service.ComDayCqReplicationContentStaticContentBuilder(Context, post, apply, delete, action, location, propertylist, host, port);
            };

            Post["/system/console/configMgr/com.day.cq.replication.impl.AgentManagerImpl"] = parameters =>
            {
                var post = Parameters.ValueOf<bool?>(parameters, Context.Request, "post", ParameterType.Query);
                var apply = Parameters.ValueOf<bool?>(parameters, Context.Request, "apply", ParameterType.Query);
                var delete = Parameters.ValueOf<bool?>(parameters, Context.Request, "delete", ParameterType.Query);
                var action = Parameters.ValueOf<string>(parameters, Context.Request, "action", ParameterType.Query);
                var location = Parameters.ValueOf<string>(parameters, Context.Request, "location", ParameterType.Query);
                var propertylist = Parameters.ValueOf<List<string>>(parameters, Context.Request, "propertylist", ParameterType.Query);
                var jobTopics = Parameters.ValueOf<string>(parameters, Context.Request, "jobTopics", ParameterType.Query);
                var serviceUserTarget = Parameters.ValueOf<string>(parameters, Context.Request, "serviceUserTarget", ParameterType.Query);
                var agentProviderTarget = Parameters.ValueOf<string>(parameters, Context.Request, "agentProviderTarget", ParameterType.Query);
                return service.ComDayCqReplicationImplAgentManagerImpl(Context, post, apply, delete, action, location, propertylist, jobTopics, serviceUserTarget, agentProviderTarget);
            };

            Post["/system/console/configMgr/com.day.cq.replication.impl.content.durbo.BinaryLessContentBuilder"] = parameters =>
            {
                var post = Parameters.ValueOf<bool?>(parameters, Context.Request, "post", ParameterType.Query);
                var apply = Parameters.ValueOf<bool?>(parameters, Context.Request, "apply", ParameterType.Query);
                var delete = Parameters.ValueOf<bool?>(parameters, Context.Request, "delete", ParameterType.Query);
                var action = Parameters.ValueOf<string>(parameters, Context.Request, "action", ParameterType.Query);
                var location = Parameters.ValueOf<string>(parameters, Context.Request, "location", ParameterType.Query);
                var propertylist = Parameters.ValueOf<List<string>>(parameters, Context.Request, "propertylist", ParameterType.Query);
                var binaryThreshold = Parameters.ValueOf<int?>(parameters, Context.Request, "binaryThreshold", ParameterType.Query);
                return service.ComDayCqReplicationImplContentDurboBinaryLessContentBuilder(Context, post, apply, delete, action, location, propertylist, binaryThreshold);
            };

            Post["/system/console/configMgr/com.day.cq.replication.impl.content.durbo.DurboImportConfigurationProviderService"] = parameters =>
            {
                var post = Parameters.ValueOf<bool?>(parameters, Context.Request, "post", ParameterType.Query);
                var apply = Parameters.ValueOf<bool?>(parameters, Context.Request, "apply", ParameterType.Query);
                var delete = Parameters.ValueOf<bool?>(parameters, Context.Request, "delete", ParameterType.Query);
                var action = Parameters.ValueOf<string>(parameters, Context.Request, "action", ParameterType.Query);
                var location = Parameters.ValueOf<string>(parameters, Context.Request, "location", ParameterType.Query);
                var propertylist = Parameters.ValueOf<List<string>>(parameters, Context.Request, "propertylist", ParameterType.Query);
                var preserveHierarchyNodes = Parameters.ValueOf<bool?>(parameters, Context.Request, "preserveHierarchyNodes", ParameterType.Query);
                var ignoreVersioning = Parameters.ValueOf<bool?>(parameters, Context.Request, "ignoreVersioning", ParameterType.Query);
                var importAcl = Parameters.ValueOf<bool?>(parameters, Context.Request, "importAcl", ParameterType.Query);
                var saveThreshold = Parameters.ValueOf<int?>(parameters, Context.Request, "saveThreshold", ParameterType.Query);
                var preserveUserPaths = Parameters.ValueOf<bool?>(parameters, Context.Request, "preserveUserPaths", ParameterType.Query);
                var preserveUuid = Parameters.ValueOf<bool?>(parameters, Context.Request, "preserveUuid", ParameterType.Query);
                var preserveUuidNodetypes = Parameters.ValueOf<List<string>>(parameters, Context.Request, "preserveUuidNodetypes", ParameterType.Query);
                var preserveUuidSubtrees = Parameters.ValueOf<List<string>>(parameters, Context.Request, "preserveUuidSubtrees", ParameterType.Query);
                var autoCommit = Parameters.ValueOf<bool?>(parameters, Context.Request, "autoCommit", ParameterType.Query);
                return service.ComDayCqReplicationImplContentDurboDurboImportConfigurationProv(Context, post, apply, delete, action, location, propertylist, preserveHierarchyNodes, ignoreVersioning, importAcl, saveThreshold, preserveUserPaths, preserveUuid, preserveUuidNodetypes, preserveUuidSubtrees, autoCommit);
            };

            Post["/system/console/configMgr/com.day.cq.replication.impl.ReplicationContentFactoryProviderImpl"] = parameters =>
            {
                var post = Parameters.ValueOf<bool?>(parameters, Context.Request, "post", ParameterType.Query);
                var apply = Parameters.ValueOf<bool?>(parameters, Context.Request, "apply", ParameterType.Query);
                var delete = Parameters.ValueOf<bool?>(parameters, Context.Request, "delete", ParameterType.Query);
                var action = Parameters.ValueOf<string>(parameters, Context.Request, "action", ParameterType.Query);
                var location = Parameters.ValueOf<string>(parameters, Context.Request, "location", ParameterType.Query);
                var propertylist = Parameters.ValueOf<List<string>>(parameters, Context.Request, "propertylist", ParameterType.Query);
                var replicationContentUseFileStorage = Parameters.ValueOf<bool?>(parameters, Context.Request, "replicationContentUseFileStorage", ParameterType.Query);
                var replicationContentMaxCommitAttempts = Parameters.ValueOf<int?>(parameters, Context.Request, "replicationContentMaxCommitAttempts", ParameterType.Query);
                return service.ComDayCqReplicationImplReplicationContentFactoryProviderImpl(Context, post, apply, delete, action, location, propertylist, replicationContentUseFileStorage, replicationContentMaxCommitAttempts);
            };

            Post["/system/console/configMgr/com.day.cq.replication.impl.ReplicationReceiverImpl"] = parameters =>
            {
                var post = Parameters.ValueOf<bool?>(parameters, Context.Request, "post", ParameterType.Query);
                var apply = Parameters.ValueOf<bool?>(parameters, Context.Request, "apply", ParameterType.Query);
                var delete = Parameters.ValueOf<bool?>(parameters, Context.Request, "delete", ParameterType.Query);
                var action = Parameters.ValueOf<string>(parameters, Context.Request, "action", ParameterType.Query);
                var location = Parameters.ValueOf<string>(parameters, Context.Request, "location", ParameterType.Query);
                var propertylist = Parameters.ValueOf<List<string>>(parameters, Context.Request, "propertylist", ParameterType.Query);
                var receiverTmpfileThreshold = Parameters.ValueOf<int?>(parameters, Context.Request, "receiverTmpfileThreshold", ParameterType.Query);
                var receiverPackagesUseInstall = Parameters.ValueOf<bool?>(parameters, Context.Request, "receiverPackagesUseInstall", ParameterType.Query);
                return service.ComDayCqReplicationImplReplicationReceiverImpl(Context, post, apply, delete, action, location, propertylist, receiverTmpfileThreshold, receiverPackagesUseInstall);
            };

            Post["/system/console/configMgr/com.day.cq.replication.impl.ReplicatorImpl"] = parameters =>
            {
                var post = Parameters.ValueOf<bool?>(parameters, Context.Request, "post", ParameterType.Query);
                var apply = Parameters.ValueOf<bool?>(parameters, Context.Request, "apply", ParameterType.Query);
                var delete = Parameters.ValueOf<bool?>(parameters, Context.Request, "delete", ParameterType.Query);
                var action = Parameters.ValueOf<string>(parameters, Context.Request, "action", ParameterType.Query);
                var location = Parameters.ValueOf<string>(parameters, Context.Request, "location", ParameterType.Query);
                var propertylist = Parameters.ValueOf<List<string>>(parameters, Context.Request, "propertylist", ParameterType.Query);
                var distributeEvents = Parameters.ValueOf<bool?>(parameters, Context.Request, "distributeEvents", ParameterType.Query);
                return service.ComDayCqReplicationImplReplicatorImpl(Context, post, apply, delete, action, location, propertylist, distributeEvents);
            };

            Post["/system/console/configMgr/com.day.cq.replication.impl.ReverseReplicator"] = parameters =>
            {
                var post = Parameters.ValueOf<bool?>(parameters, Context.Request, "post", ParameterType.Query);
                var apply = Parameters.ValueOf<bool?>(parameters, Context.Request, "apply", ParameterType.Query);
                var delete = Parameters.ValueOf<bool?>(parameters, Context.Request, "delete", ParameterType.Query);
                var action = Parameters.ValueOf<string>(parameters, Context.Request, "action", ParameterType.Query);
                var location = Parameters.ValueOf<string>(parameters, Context.Request, "location", ParameterType.Query);
                var propertylist = Parameters.ValueOf<List<string>>(parameters, Context.Request, "propertylist", ParameterType.Query);
                var schedulerPeriod = Parameters.ValueOf<int?>(parameters, Context.Request, "schedulerPeriod", ParameterType.Query);
                return service.ComDayCqReplicationImplReverseReplicator(Context, post, apply, delete, action, location, propertylist, schedulerPeriod);
            };

            Post["/system/console/configMgr/com.day.cq.replication.impl.transport.BinaryLessTransportHandler"] = parameters =>
            {
                var post = Parameters.ValueOf<bool?>(parameters, Context.Request, "post", ParameterType.Query);
                var apply = Parameters.ValueOf<bool?>(parameters, Context.Request, "apply", ParameterType.Query);
                var delete = Parameters.ValueOf<bool?>(parameters, Context.Request, "delete", ParameterType.Query);
                var action = Parameters.ValueOf<string>(parameters, Context.Request, "action", ParameterType.Query);
                var location = Parameters.ValueOf<string>(parameters, Context.Request, "location", ParameterType.Query);
                var propertylist = Parameters.ValueOf<List<string>>(parameters, Context.Request, "propertylist", ParameterType.Query);
                var disabledCipherSuites = Parameters.ValueOf<List<string>>(parameters, Context.Request, "disabledCipherSuites", ParameterType.Query);
                var enabledCipherSuites = Parameters.ValueOf<List<string>>(parameters, Context.Request, "enabledCipherSuites", ParameterType.Query);
                return service.ComDayCqReplicationImplTransportBinaryLessTransportHandler(Context, post, apply, delete, action, location, propertylist, disabledCipherSuites, enabledCipherSuites);
            };

            Post["/system/console/configMgr/com.day.cq.replication.impl.transport.Http"] = parameters =>
            {
                var post = Parameters.ValueOf<bool?>(parameters, Context.Request, "post", ParameterType.Query);
                var apply = Parameters.ValueOf<bool?>(parameters, Context.Request, "apply", ParameterType.Query);
                var delete = Parameters.ValueOf<bool?>(parameters, Context.Request, "delete", ParameterType.Query);
                var action = Parameters.ValueOf<string>(parameters, Context.Request, "action", ParameterType.Query);
                var location = Parameters.ValueOf<string>(parameters, Context.Request, "location", ParameterType.Query);
                var propertylist = Parameters.ValueOf<List<string>>(parameters, Context.Request, "propertylist", ParameterType.Query);
                var disabledCipherSuites = Parameters.ValueOf<List<string>>(parameters, Context.Request, "disabledCipherSuites", ParameterType.Query);
                var enabledCipherSuites = Parameters.ValueOf<List<string>>(parameters, Context.Request, "enabledCipherSuites", ParameterType.Query);
                return service.ComDayCqReplicationImplTransportHttp(Context, post, apply, delete, action, location, propertylist, disabledCipherSuites, enabledCipherSuites);
            };

            Post["/system/console/configMgr/com.day.cq.reporting.impl.cache.CacheImpl"] = parameters =>
            {
                var post = Parameters.ValueOf<bool?>(parameters, Context.Request, "post", ParameterType.Query);
                var apply = Parameters.ValueOf<bool?>(parameters, Context.Request, "apply", ParameterType.Query);
                var delete = Parameters.ValueOf<bool?>(parameters, Context.Request, "delete", ParameterType.Query);
                var action = Parameters.ValueOf<string>(parameters, Context.Request, "action", ParameterType.Query);
                var location = Parameters.ValueOf<string>(parameters, Context.Request, "location", ParameterType.Query);
                var propertylist = Parameters.ValueOf<List<string>>(parameters, Context.Request, "propertylist", ParameterType.Query);
                var repcacheEnable = Parameters.ValueOf<bool?>(parameters, Context.Request, "repcacheEnable", ParameterType.Query);
                var repcacheTtl = Parameters.ValueOf<int?>(parameters, Context.Request, "repcacheTtl", ParameterType.Query);
                var repcacheMax = Parameters.ValueOf<int?>(parameters, Context.Request, "repcacheMax", ParameterType.Query);
                return service.ComDayCqReportingImplCacheCacheImpl(Context, post, apply, delete, action, location, propertylist, repcacheEnable, repcacheTtl, repcacheMax);
            };

            Post["/system/console/configMgr/com.day.cq.reporting.impl.ConfigServiceImpl"] = parameters =>
            {
                var post = Parameters.ValueOf<bool?>(parameters, Context.Request, "post", ParameterType.Query);
                var apply = Parameters.ValueOf<bool?>(parameters, Context.Request, "apply", ParameterType.Query);
                var delete = Parameters.ValueOf<bool?>(parameters, Context.Request, "delete", ParameterType.Query);
                var action = Parameters.ValueOf<string>(parameters, Context.Request, "action", ParameterType.Query);
                var location = Parameters.ValueOf<string>(parameters, Context.Request, "location", ParameterType.Query);
                var propertylist = Parameters.ValueOf<List<string>>(parameters, Context.Request, "propertylist", ParameterType.Query);
                var repconfTimezone = Parameters.ValueOf<string>(parameters, Context.Request, "repconfTimezone", ParameterType.Query);
                var repconfLocale = Parameters.ValueOf<string>(parameters, Context.Request, "repconfLocale", ParameterType.Query);
                var repconfSnapshots = Parameters.ValueOf<string>(parameters, Context.Request, "repconfSnapshots", ParameterType.Query);
                var repconfRepdir = Parameters.ValueOf<string>(parameters, Context.Request, "repconfRepdir", ParameterType.Query);
                var repconfHourofday = Parameters.ValueOf<int?>(parameters, Context.Request, "repconfHourofday", ParameterType.Query);
                var repconfMinofhour = Parameters.ValueOf<int?>(parameters, Context.Request, "repconfMinofhour", ParameterType.Query);
                var repconfMaxrows = Parameters.ValueOf<int?>(parameters, Context.Request, "repconfMaxrows", ParameterType.Query);
                var repconfFakedata = Parameters.ValueOf<bool?>(parameters, Context.Request, "repconfFakedata", ParameterType.Query);
                var repconfSnapshotuser = Parameters.ValueOf<string>(parameters, Context.Request, "repconfSnapshotuser", ParameterType.Query);
                var repconfEnforcesnapshotuser = Parameters.ValueOf<bool?>(parameters, Context.Request, "repconfEnforcesnapshotuser", ParameterType.Query);
                return service.ComDayCqReportingImplConfigServiceImpl(Context, post, apply, delete, action, location, propertylist, repconfTimezone, repconfLocale, repconfSnapshots, repconfRepdir, repconfHourofday, repconfMinofhour, repconfMaxrows, repconfFakedata, repconfSnapshotuser, repconfEnforcesnapshotuser);
            };

            Post["/system/console/configMgr/com.day.cq.reporting.impl.RLogAnalyzer"] = parameters =>
            {
                var post = Parameters.ValueOf<bool?>(parameters, Context.Request, "post", ParameterType.Query);
                var apply = Parameters.ValueOf<bool?>(parameters, Context.Request, "apply", ParameterType.Query);
                var delete = Parameters.ValueOf<bool?>(parameters, Context.Request, "delete", ParameterType.Query);
                var action = Parameters.ValueOf<string>(parameters, Context.Request, "action", ParameterType.Query);
                var location = Parameters.ValueOf<string>(parameters, Context.Request, "location", ParameterType.Query);
                var propertylist = Parameters.ValueOf<List<string>>(parameters, Context.Request, "propertylist", ParameterType.Query);
                var requestLogOutput = Parameters.ValueOf<string>(parameters, Context.Request, "requestLogOutput", ParameterType.Query);
                return service.ComDayCqReportingImplRLogAnalyzer(Context, post, apply, delete, action, location, propertylist, requestLogOutput);
            };

            Post["/system/console/configMgr/com.day.cq.rewriter.linkchecker.impl.LinkCheckerImpl"] = parameters =>
            {
                var post = Parameters.ValueOf<bool?>(parameters, Context.Request, "post", ParameterType.Query);
                var apply = Parameters.ValueOf<bool?>(parameters, Context.Request, "apply", ParameterType.Query);
                var delete = Parameters.ValueOf<bool?>(parameters, Context.Request, "delete", ParameterType.Query);
                var action = Parameters.ValueOf<string>(parameters, Context.Request, "action", ParameterType.Query);
                var location = Parameters.ValueOf<string>(parameters, Context.Request, "location", ParameterType.Query);
                var propertylist = Parameters.ValueOf<List<string>>(parameters, Context.Request, "propertylist", ParameterType.Query);
                var schedulerPeriod = Parameters.ValueOf<int?>(parameters, Context.Request, "schedulerPeriod", ParameterType.Query);
                var schedulerConcurrent = Parameters.ValueOf<bool?>(parameters, Context.Request, "schedulerConcurrent", ParameterType.Query);
                var serviceBadLinkToleranceInterval = Parameters.ValueOf<int?>(parameters, Context.Request, "serviceBadLinkToleranceInterval", ParameterType.Query);
                var serviceCheckOverridePatterns = Parameters.ValueOf<List<string>>(parameters, Context.Request, "serviceCheckOverridePatterns", ParameterType.Query);
                var serviceCacheBrokenInternalLinks = Parameters.ValueOf<bool?>(parameters, Context.Request, "serviceCacheBrokenInternalLinks", ParameterType.Query);
                var serviceSpecialLinkPrefix = Parameters.ValueOf<List<string>>(parameters, Context.Request, "serviceSpecialLinkPrefix", ParameterType.Query);
                var serviceSpecialLinkPatterns = Parameters.ValueOf<List<string>>(parameters, Context.Request, "serviceSpecialLinkPatterns", ParameterType.Query);
                return service.ComDayCqRewriterLinkcheckerImplLinkCheckerImpl(Context, post, apply, delete, action, location, propertylist, schedulerPeriod, schedulerConcurrent, serviceBadLinkToleranceInterval, serviceCheckOverridePatterns, serviceCacheBrokenInternalLinks, serviceSpecialLinkPrefix, serviceSpecialLinkPatterns);
            };

            Post["/system/console/configMgr/com.day.cq.rewriter.linkchecker.impl.LinkCheckerTask"] = parameters =>
            {
                var post = Parameters.ValueOf<bool?>(parameters, Context.Request, "post", ParameterType.Query);
                var apply = Parameters.ValueOf<bool?>(parameters, Context.Request, "apply", ParameterType.Query);
                var delete = Parameters.ValueOf<bool?>(parameters, Context.Request, "delete", ParameterType.Query);
                var action = Parameters.ValueOf<string>(parameters, Context.Request, "action", ParameterType.Query);
                var location = Parameters.ValueOf<string>(parameters, Context.Request, "location", ParameterType.Query);
                var propertylist = Parameters.ValueOf<List<string>>(parameters, Context.Request, "propertylist", ParameterType.Query);
                var schedulerPeriod = Parameters.ValueOf<int?>(parameters, Context.Request, "schedulerPeriod", ParameterType.Query);
                var schedulerConcurrent = Parameters.ValueOf<bool?>(parameters, Context.Request, "schedulerConcurrent", ParameterType.Query);
                var goodLinkTestInterval = Parameters.ValueOf<int?>(parameters, Context.Request, "goodLinkTestInterval", ParameterType.Query);
                var badLinkTestInterval = Parameters.ValueOf<int?>(parameters, Context.Request, "badLinkTestInterval", ParameterType.Query);
                var linkUnusedInterval = Parameters.ValueOf<int?>(parameters, Context.Request, "linkUnusedInterval", ParameterType.Query);
                var connectionTimeout = Parameters.ValueOf<int?>(parameters, Context.Request, "connectionTimeout", ParameterType.Query);
                return service.ComDayCqRewriterLinkcheckerImplLinkCheckerTask(Context, post, apply, delete, action, location, propertylist, schedulerPeriod, schedulerConcurrent, goodLinkTestInterval, badLinkTestInterval, linkUnusedInterval, connectionTimeout);
            };

            Post["/system/console/configMgr/com.day.cq.rewriter.linkchecker.impl.LinkCheckerTransformerFactory"] = parameters =>
            {
                var post = Parameters.ValueOf<bool?>(parameters, Context.Request, "post", ParameterType.Query);
                var apply = Parameters.ValueOf<bool?>(parameters, Context.Request, "apply", ParameterType.Query);
                var delete = Parameters.ValueOf<bool?>(parameters, Context.Request, "delete", ParameterType.Query);
                var action = Parameters.ValueOf<string>(parameters, Context.Request, "action", ParameterType.Query);
                var location = Parameters.ValueOf<string>(parameters, Context.Request, "location", ParameterType.Query);
                var propertylist = Parameters.ValueOf<List<string>>(parameters, Context.Request, "propertylist", ParameterType.Query);
                var linkcheckertransformerDisableRewriting = Parameters.ValueOf<bool?>(parameters, Context.Request, "linkcheckertransformerDisableRewriting", ParameterType.Query);
                var linkcheckertransformerDisableChecking = Parameters.ValueOf<bool?>(parameters, Context.Request, "linkcheckertransformerDisableChecking", ParameterType.Query);
                var linkcheckertransformerMapCacheSize = Parameters.ValueOf<int?>(parameters, Context.Request, "linkcheckertransformerMapCacheSize", ParameterType.Query);
                var linkcheckertransformerStrictExtensionCheck = Parameters.ValueOf<bool?>(parameters, Context.Request, "linkcheckertransformerStrictExtensionCheck", ParameterType.Query);
                var linkcheckertransformerStripHtmltExtension = Parameters.ValueOf<bool?>(parameters, Context.Request, "linkcheckertransformerStripHtmltExtension", ParameterType.Query);
                var linkcheckertransformerRewriteElements = Parameters.ValueOf<List<string>>(parameters, Context.Request, "linkcheckertransformerRewriteElements", ParameterType.Query);
                var linkcheckertransformerStripExtensionPathBlacklist = Parameters.ValueOf<List<string>>(parameters, Context.Request, "linkcheckertransformerStripExtensionPathBlacklist", ParameterType.Query);
                return service.ComDayCqRewriterLinkcheckerImplLinkCheckerTransformerFactory(Context, post, apply, delete, action, location, propertylist, linkcheckertransformerDisableRewriting, linkcheckertransformerDisableChecking, linkcheckertransformerMapCacheSize, linkcheckertransformerStrictExtensionCheck, linkcheckertransformerStripHtmltExtension, linkcheckertransformerRewriteElements, linkcheckertransformerStripExtensionPathBlacklist);
            };

            Post["/system/console/configMgr/com.day.cq.rewriter.linkchecker.impl.LinkInfoStorageImpl"] = parameters =>
            {
                var post = Parameters.ValueOf<bool?>(parameters, Context.Request, "post", ParameterType.Query);
                var apply = Parameters.ValueOf<bool?>(parameters, Context.Request, "apply", ParameterType.Query);
                var delete = Parameters.ValueOf<bool?>(parameters, Context.Request, "delete", ParameterType.Query);
                var action = Parameters.ValueOf<string>(parameters, Context.Request, "action", ParameterType.Query);
                var location = Parameters.ValueOf<string>(parameters, Context.Request, "location", ParameterType.Query);
                var propertylist = Parameters.ValueOf<List<string>>(parameters, Context.Request, "propertylist", ParameterType.Query);
                var serviceMaxLinksPerHost = Parameters.ValueOf<int?>(parameters, Context.Request, "serviceMaxLinksPerHost", ParameterType.Query);
                var serviceSaveExternalLinkReferences = Parameters.ValueOf<bool?>(parameters, Context.Request, "serviceSaveExternalLinkReferences", ParameterType.Query);
                return service.ComDayCqRewriterLinkcheckerImplLinkInfoStorageImpl(Context, post, apply, delete, action, location, propertylist, serviceMaxLinksPerHost, serviceSaveExternalLinkReferences);
            };

            Post["/system/console/configMgr/com.day.cq.rewriter.processor.impl.HtmlParserFactory"] = parameters =>
            {
                var post = Parameters.ValueOf<bool?>(parameters, Context.Request, "post", ParameterType.Query);
                var apply = Parameters.ValueOf<bool?>(parameters, Context.Request, "apply", ParameterType.Query);
                var delete = Parameters.ValueOf<bool?>(parameters, Context.Request, "delete", ParameterType.Query);
                var action = Parameters.ValueOf<string>(parameters, Context.Request, "action", ParameterType.Query);
                var location = Parameters.ValueOf<string>(parameters, Context.Request, "location", ParameterType.Query);
                var propertylist = Parameters.ValueOf<List<string>>(parameters, Context.Request, "propertylist", ParameterType.Query);
                var htmlparserProcessTags = Parameters.ValueOf<List<string>>(parameters, Context.Request, "htmlparserProcessTags", ParameterType.Query);
                var htmlparserPreserveCamelCase = Parameters.ValueOf<bool?>(parameters, Context.Request, "htmlparserPreserveCamelCase", ParameterType.Query);
                return service.ComDayCqRewriterProcessorImplHtmlParserFactory(Context, post, apply, delete, action, location, propertylist, htmlparserProcessTags, htmlparserPreserveCamelCase);
            };

            Post["/system/console/configMgr/com.day.cq.search.impl.builder.QueryBuilderImpl"] = parameters =>
            {
                var post = Parameters.ValueOf<bool?>(parameters, Context.Request, "post", ParameterType.Query);
                var apply = Parameters.ValueOf<bool?>(parameters, Context.Request, "apply", ParameterType.Query);
                var delete = Parameters.ValueOf<bool?>(parameters, Context.Request, "delete", ParameterType.Query);
                var action = Parameters.ValueOf<string>(parameters, Context.Request, "action", ParameterType.Query);
                var location = Parameters.ValueOf<string>(parameters, Context.Request, "location", ParameterType.Query);
                var propertylist = Parameters.ValueOf<List<string>>(parameters, Context.Request, "propertylist", ParameterType.Query);
                var excerptProperties = Parameters.ValueOf<List<string>>(parameters, Context.Request, "excerptProperties", ParameterType.Query);
                var cacheMaxEntries = Parameters.ValueOf<int?>(parameters, Context.Request, "cacheMaxEntries", ParameterType.Query);
                var cacheEntryLifetime = Parameters.ValueOf<int?>(parameters, Context.Request, "cacheEntryLifetime", ParameterType.Query);
                var xpathUnion = Parameters.ValueOf<bool?>(parameters, Context.Request, "xpathUnion", ParameterType.Query);
                return service.ComDayCqSearchImplBuilderQueryBuilderImpl(Context, post, apply, delete, action, location, propertylist, excerptProperties, cacheMaxEntries, cacheEntryLifetime, xpathUnion);
            };

            Post["/system/console/configMgr/com.day.cq.search.suggest.impl.SuggestionIndexManagerImpl"] = parameters =>
            {
                var post = Parameters.ValueOf<bool?>(parameters, Context.Request, "post", ParameterType.Query);
                var apply = Parameters.ValueOf<bool?>(parameters, Context.Request, "apply", ParameterType.Query);
                var delete = Parameters.ValueOf<bool?>(parameters, Context.Request, "delete", ParameterType.Query);
                var action = Parameters.ValueOf<string>(parameters, Context.Request, "action", ParameterType.Query);
                var location = Parameters.ValueOf<string>(parameters, Context.Request, "location", ParameterType.Query);
                var propertylist = Parameters.ValueOf<List<string>>(parameters, Context.Request, "propertylist", ParameterType.Query);
                var pathBuilderTarget = Parameters.ValueOf<string>(parameters, Context.Request, "pathBuilderTarget", ParameterType.Query);
                var suggestBasepath = Parameters.ValueOf<string>(parameters, Context.Request, "suggestBasepath", ParameterType.Query);
                return service.ComDayCqSearchSuggestImplSuggestionIndexManagerImpl(Context, post, apply, delete, action, location, propertylist, pathBuilderTarget, suggestBasepath);
            };

            Post["/system/console/configMgr/com.day.cq.searchpromote.impl.PublishSearchPromoteConfigHandler"] = parameters =>
            {
                var post = Parameters.ValueOf<bool?>(parameters, Context.Request, "post", ParameterType.Query);
                var apply = Parameters.ValueOf<bool?>(parameters, Context.Request, "apply", ParameterType.Query);
                var delete = Parameters.ValueOf<bool?>(parameters, Context.Request, "delete", ParameterType.Query);
                var action = Parameters.ValueOf<string>(parameters, Context.Request, "action", ParameterType.Query);
                var location = Parameters.ValueOf<string>(parameters, Context.Request, "location", ParameterType.Query);
                var propertylist = Parameters.ValueOf<List<string>>(parameters, Context.Request, "propertylist", ParameterType.Query);
                var cqSearchpromoteConfighandlerEnabled = Parameters.ValueOf<bool?>(parameters, Context.Request, "cqSearchpromoteConfighandlerEnabled", ParameterType.Query);
                return service.ComDayCqSearchpromoteImplPublishSearchPromoteConfigHandler(Context, post, apply, delete, action, location, propertylist, cqSearchpromoteConfighandlerEnabled);
            };

            Post["/system/console/configMgr/com.day.cq.searchpromote.impl.SearchPromoteServiceImpl"] = parameters =>
            {
                var post = Parameters.ValueOf<bool?>(parameters, Context.Request, "post", ParameterType.Query);
                var apply = Parameters.ValueOf<bool?>(parameters, Context.Request, "apply", ParameterType.Query);
                var delete = Parameters.ValueOf<bool?>(parameters, Context.Request, "delete", ParameterType.Query);
                var action = Parameters.ValueOf<string>(parameters, Context.Request, "action", ParameterType.Query);
                var location = Parameters.ValueOf<string>(parameters, Context.Request, "location", ParameterType.Query);
                var propertylist = Parameters.ValueOf<List<string>>(parameters, Context.Request, "propertylist", ParameterType.Query);
                var cqSearchpromoteConfigurationServerUri = Parameters.ValueOf<string>(parameters, Context.Request, "cqSearchpromoteConfigurationServerUri", ParameterType.Query);
                var cqSearchpromoteConfigurationEnvironment = Parameters.ValueOf<string>(parameters, Context.Request, "cqSearchpromoteConfigurationEnvironment", ParameterType.Query);
                var connectionTimeout = Parameters.ValueOf<int?>(parameters, Context.Request, "connectionTimeout", ParameterType.Query);
                var socketTimeout = Parameters.ValueOf<int?>(parameters, Context.Request, "socketTimeout", ParameterType.Query);
                return service.ComDayCqSearchpromoteImplSearchPromoteServiceImpl(Context, post, apply, delete, action, location, propertylist, cqSearchpromoteConfigurationServerUri, cqSearchpromoteConfigurationEnvironment, connectionTimeout, socketTimeout);
            };

            Post["/system/console/configMgr/com.day.cq.security.ACLSetup"] = parameters =>
            {
                var post = Parameters.ValueOf<bool?>(parameters, Context.Request, "post", ParameterType.Query);
                var apply = Parameters.ValueOf<bool?>(parameters, Context.Request, "apply", ParameterType.Query);
                var delete = Parameters.ValueOf<bool?>(parameters, Context.Request, "delete", ParameterType.Query);
                var action = Parameters.ValueOf<string>(parameters, Context.Request, "action", ParameterType.Query);
                var location = Parameters.ValueOf<string>(parameters, Context.Request, "location", ParameterType.Query);
                var propertylist = Parameters.ValueOf<List<string>>(parameters, Context.Request, "propertylist", ParameterType.Query);
                var cqAclsetupRules = Parameters.ValueOf<List<string>>(parameters, Context.Request, "cqAclsetupRules", ParameterType.Query);
                return service.ComDayCqSecurityACLSetup(Context, post, apply, delete, action, location, propertylist, cqAclsetupRules);
            };

            Post["/system/console/configMgr/com.day.cq.statistics.impl.StatisticsServiceImpl"] = parameters =>
            {
                var post = Parameters.ValueOf<bool?>(parameters, Context.Request, "post", ParameterType.Query);
                var apply = Parameters.ValueOf<bool?>(parameters, Context.Request, "apply", ParameterType.Query);
                var delete = Parameters.ValueOf<bool?>(parameters, Context.Request, "delete", ParameterType.Query);
                var action = Parameters.ValueOf<string>(parameters, Context.Request, "action", ParameterType.Query);
                var location = Parameters.ValueOf<string>(parameters, Context.Request, "location", ParameterType.Query);
                var propertylist = Parameters.ValueOf<List<string>>(parameters, Context.Request, "propertylist", ParameterType.Query);
                var schedulerPeriod = Parameters.ValueOf<int?>(parameters, Context.Request, "schedulerPeriod", ParameterType.Query);
                var schedulerConcurrent = Parameters.ValueOf<bool?>(parameters, Context.Request, "schedulerConcurrent", ParameterType.Query);
                var path = Parameters.ValueOf<string>(parameters, Context.Request, "path", ParameterType.Query);
                var workspace = Parameters.ValueOf<string>(parameters, Context.Request, "workspace", ParameterType.Query);
                var keywordsPath = Parameters.ValueOf<string>(parameters, Context.Request, "keywordsPath", ParameterType.Query);
                var asyncEntries = Parameters.ValueOf<bool?>(parameters, Context.Request, "asyncEntries", ParameterType.Query);
                return service.ComDayCqStatisticsImplStatisticsServiceImpl(Context, post, apply, delete, action, location, propertylist, schedulerPeriod, schedulerConcurrent, path, workspace, keywordsPath, asyncEntries);
            };

            Post["/system/console/configMgr/com.day.cq.tagging.impl.JcrTagManagerFactoryImpl"] = parameters =>
            {
                var post = Parameters.ValueOf<bool?>(parameters, Context.Request, "post", ParameterType.Query);
                var apply = Parameters.ValueOf<bool?>(parameters, Context.Request, "apply", ParameterType.Query);
                var delete = Parameters.ValueOf<bool?>(parameters, Context.Request, "delete", ParameterType.Query);
                var action = Parameters.ValueOf<string>(parameters, Context.Request, "action", ParameterType.Query);
                var location = Parameters.ValueOf<string>(parameters, Context.Request, "location", ParameterType.Query);
                var propertylist = Parameters.ValueOf<List<string>>(parameters, Context.Request, "propertylist", ParameterType.Query);
                var validationEnabled = Parameters.ValueOf<bool?>(parameters, Context.Request, "validationEnabled", ParameterType.Query);
                return service.ComDayCqTaggingImplJcrTagManagerFactoryImpl(Context, post, apply, delete, action, location, propertylist, validationEnabled);
            };

            Post["/system/console/configMgr/com.day.cq.tagging.impl.search.TagPredicateEvaluator"] = parameters =>
            {
                var post = Parameters.ValueOf<bool?>(parameters, Context.Request, "post", ParameterType.Query);
                var apply = Parameters.ValueOf<bool?>(parameters, Context.Request, "apply", ParameterType.Query);
                var delete = Parameters.ValueOf<bool?>(parameters, Context.Request, "delete", ParameterType.Query);
                var action = Parameters.ValueOf<string>(parameters, Context.Request, "action", ParameterType.Query);
                var location = Parameters.ValueOf<string>(parameters, Context.Request, "location", ParameterType.Query);
                var propertylist = Parameters.ValueOf<List<string>>(parameters, Context.Request, "propertylist", ParameterType.Query);
                var ignorePath = Parameters.ValueOf<bool?>(parameters, Context.Request, "ignorePath", ParameterType.Query);
                return service.ComDayCqTaggingImplSearchTagPredicateEvaluator(Context, post, apply, delete, action, location, propertylist, ignorePath);
            };

            Post["/system/console/configMgr/com.day.cq.tagging.impl.TagGarbageCollector"] = parameters =>
            {
                var post = Parameters.ValueOf<bool?>(parameters, Context.Request, "post", ParameterType.Query);
                var apply = Parameters.ValueOf<bool?>(parameters, Context.Request, "apply", ParameterType.Query);
                var delete = Parameters.ValueOf<bool?>(parameters, Context.Request, "delete", ParameterType.Query);
                var action = Parameters.ValueOf<string>(parameters, Context.Request, "action", ParameterType.Query);
                var location = Parameters.ValueOf<string>(parameters, Context.Request, "location", ParameterType.Query);
                var propertylist = Parameters.ValueOf<List<string>>(parameters, Context.Request, "propertylist", ParameterType.Query);
                var schedulerExpression = Parameters.ValueOf<string>(parameters, Context.Request, "schedulerExpression", ParameterType.Query);
                return service.ComDayCqTaggingImplTagGarbageCollector(Context, post, apply, delete, action, location, propertylist, schedulerExpression);
            };

            Post["/system/console/configMgr/com.day.cq.wcm.contentsync.impl.handler.PagesUpdateHandler"] = parameters =>
            {
                var post = Parameters.ValueOf<bool?>(parameters, Context.Request, "post", ParameterType.Query);
                var apply = Parameters.ValueOf<bool?>(parameters, Context.Request, "apply", ParameterType.Query);
                var delete = Parameters.ValueOf<bool?>(parameters, Context.Request, "delete", ParameterType.Query);
                var action = Parameters.ValueOf<string>(parameters, Context.Request, "action", ParameterType.Query);
                var location = Parameters.ValueOf<string>(parameters, Context.Request, "location", ParameterType.Query);
                var propertylist = Parameters.ValueOf<List<string>>(parameters, Context.Request, "propertylist", ParameterType.Query);
                var cqPagesupdatehandlerImageresourcetypes = Parameters.ValueOf<List<string>>(parameters, Context.Request, "cqPagesupdatehandlerImageresourcetypes", ParameterType.Query);
                return service.ComDayCqWcmContentsyncImplHandlerPagesUpdateHandler(Context, post, apply, delete, action, location, propertylist, cqPagesupdatehandlerImageresourcetypes);
            };

            Post["/system/console/configMgr/com.day.cq.wcm.contentsync.impl.rewriter.PathRewriterTransformerFactory"] = parameters =>
            {
                var post = Parameters.ValueOf<bool?>(parameters, Context.Request, "post", ParameterType.Query);
                var apply = Parameters.ValueOf<bool?>(parameters, Context.Request, "apply", ParameterType.Query);
                var delete = Parameters.ValueOf<bool?>(parameters, Context.Request, "delete", ParameterType.Query);
                var action = Parameters.ValueOf<string>(parameters, Context.Request, "action", ParameterType.Query);
                var location = Parameters.ValueOf<string>(parameters, Context.Request, "location", ParameterType.Query);
                var propertylist = Parameters.ValueOf<List<string>>(parameters, Context.Request, "propertylist", ParameterType.Query);
                var cqContentsyncPathrewritertransformerMappingLinks = Parameters.ValueOf<List<string>>(parameters, Context.Request, "cqContentsyncPathrewritertransformerMappingLinks", ParameterType.Query);
                var cqContentsyncPathrewritertransformerMappingClientlibs = Parameters.ValueOf<List<string>>(parameters, Context.Request, "cqContentsyncPathrewritertransformerMappingClientlibs", ParameterType.Query);
                var cqContentsyncPathrewritertransformerMappingImages = Parameters.ValueOf<List<string>>(parameters, Context.Request, "cqContentsyncPathrewritertransformerMappingImages", ParameterType.Query);
                var cqContentsyncPathrewritertransformerAttributePattern = Parameters.ValueOf<string>(parameters, Context.Request, "cqContentsyncPathrewritertransformerAttributePattern", ParameterType.Query);
                var cqContentsyncPathrewritertransformerClientlibraryPattern = Parameters.ValueOf<string>(parameters, Context.Request, "cqContentsyncPathrewritertransformerClientlibraryPattern", ParameterType.Query);
                var cqContentsyncPathrewritertransformerClientlibraryReplace = Parameters.ValueOf<string>(parameters, Context.Request, "cqContentsyncPathrewritertransformerClientlibraryReplace", ParameterType.Query);
                return service.ComDayCqWcmContentsyncImplRewriterPathRewriterTransformerFactor(Context, post, apply, delete, action, location, propertylist, cqContentsyncPathrewritertransformerMappingLinks, cqContentsyncPathrewritertransformerMappingClientlibs, cqContentsyncPathrewritertransformerMappingImages, cqContentsyncPathrewritertransformerAttributePattern, cqContentsyncPathrewritertransformerClientlibraryPattern, cqContentsyncPathrewritertransformerClientlibraryReplace);
            };

            Post["/system/console/configMgr/com.day.cq.wcm.core.impl.AuthoringUIModeServiceImpl"] = parameters =>
            {
                var post = Parameters.ValueOf<bool?>(parameters, Context.Request, "post", ParameterType.Query);
                var apply = Parameters.ValueOf<bool?>(parameters, Context.Request, "apply", ParameterType.Query);
                var delete = Parameters.ValueOf<bool?>(parameters, Context.Request, "delete", ParameterType.Query);
                var action = Parameters.ValueOf<string>(parameters, Context.Request, "action", ParameterType.Query);
                var location = Parameters.ValueOf<string>(parameters, Context.Request, "location", ParameterType.Query);
                var propertylist = Parameters.ValueOf<List<string>>(parameters, Context.Request, "propertylist", ParameterType.Query);
                var authoringUIModeServiceDefault = Parameters.ValueOf<string>(parameters, Context.Request, "authoringUIModeServiceDefault", ParameterType.Query);
                return service.ComDayCqWcmCoreImplAuthoringUIModeServiceImpl(Context, post, apply, delete, action, location, propertylist, authoringUIModeServiceDefault);
            };

            Post["/system/console/configMgr/com.day.cq.wcm.core.impl.commands.WCMCommandServlet"] = parameters =>
            {
                var post = Parameters.ValueOf<bool?>(parameters, Context.Request, "post", ParameterType.Query);
                var apply = Parameters.ValueOf<bool?>(parameters, Context.Request, "apply", ParameterType.Query);
                var delete = Parameters.ValueOf<bool?>(parameters, Context.Request, "delete", ParameterType.Query);
                var action = Parameters.ValueOf<string>(parameters, Context.Request, "action", ParameterType.Query);
                var location = Parameters.ValueOf<string>(parameters, Context.Request, "location", ParameterType.Query);
                var propertylist = Parameters.ValueOf<List<string>>(parameters, Context.Request, "propertylist", ParameterType.Query);
                var wcmcommandservletDeleteWhitelist = Parameters.ValueOf<List<string>>(parameters, Context.Request, "wcmcommandservletDeleteWhitelist", ParameterType.Query);
                return service.ComDayCqWcmCoreImplCommandsWCMCommandServlet(Context, post, apply, delete, action, location, propertylist, wcmcommandservletDeleteWhitelist);
            };

            Post["/system/console/configMgr/com.day.cq.wcm.core.impl.devicedetection.DeviceIdentificationModeImpl"] = parameters =>
            {
                var post = Parameters.ValueOf<bool?>(parameters, Context.Request, "post", ParameterType.Query);
                var apply = Parameters.ValueOf<bool?>(parameters, Context.Request, "apply", ParameterType.Query);
                var delete = Parameters.ValueOf<bool?>(parameters, Context.Request, "delete", ParameterType.Query);
                var action = Parameters.ValueOf<string>(parameters, Context.Request, "action", ParameterType.Query);
                var location = Parameters.ValueOf<string>(parameters, Context.Request, "location", ParameterType.Query);
                var propertylist = Parameters.ValueOf<List<string>>(parameters, Context.Request, "propertylist", ParameterType.Query);
                var dimDefaultMode = Parameters.ValueOf<string>(parameters, Context.Request, "dimDefaultMode", ParameterType.Query);
                var dimAppcacheEnabled = Parameters.ValueOf<bool?>(parameters, Context.Request, "dimAppcacheEnabled", ParameterType.Query);
                return service.ComDayCqWcmCoreImplDevicedetectionDeviceIdentificationModeImpl(Context, post, apply, delete, action, location, propertylist, dimDefaultMode, dimAppcacheEnabled);
            };

            Post["/system/console/configMgr/com.day.cq.wcm.core.impl.event.PageEventAuditListener"] = parameters =>
            {
                var post = Parameters.ValueOf<bool?>(parameters, Context.Request, "post", ParameterType.Query);
                var apply = Parameters.ValueOf<bool?>(parameters, Context.Request, "apply", ParameterType.Query);
                var delete = Parameters.ValueOf<bool?>(parameters, Context.Request, "delete", ParameterType.Query);
                var action = Parameters.ValueOf<string>(parameters, Context.Request, "action", ParameterType.Query);
                var location = Parameters.ValueOf<string>(parameters, Context.Request, "location", ParameterType.Query);
                var propertylist = Parameters.ValueOf<List<string>>(parameters, Context.Request, "propertylist", ParameterType.Query);
                var configured = Parameters.ValueOf<string>(parameters, Context.Request, "configured", ParameterType.Query);
                return service.ComDayCqWcmCoreImplEventPageEventAuditListener(Context, post, apply, delete, action, location, propertylist, configured);
            };

            Post["/system/console/configMgr/com.day.cq.wcm.core.impl.event.PagePostProcessor"] = parameters =>
            {
                var post = Parameters.ValueOf<bool?>(parameters, Context.Request, "post", ParameterType.Query);
                var apply = Parameters.ValueOf<bool?>(parameters, Context.Request, "apply", ParameterType.Query);
                var delete = Parameters.ValueOf<bool?>(parameters, Context.Request, "delete", ParameterType.Query);
                var action = Parameters.ValueOf<string>(parameters, Context.Request, "action", ParameterType.Query);
                var location = Parameters.ValueOf<string>(parameters, Context.Request, "location", ParameterType.Query);
                var propertylist = Parameters.ValueOf<List<string>>(parameters, Context.Request, "propertylist", ParameterType.Query);
                var paths = Parameters.ValueOf<List<string>>(parameters, Context.Request, "paths", ParameterType.Query);
                return service.ComDayCqWcmCoreImplEventPagePostProcessor(Context, post, apply, delete, action, location, propertylist, paths);
            };

            Post["/system/console/configMgr/com.day.cq.wcm.core.impl.event.RepositoryChangeEventListener"] = parameters =>
            {
                var post = Parameters.ValueOf<bool?>(parameters, Context.Request, "post", ParameterType.Query);
                var apply = Parameters.ValueOf<bool?>(parameters, Context.Request, "apply", ParameterType.Query);
                var delete = Parameters.ValueOf<bool?>(parameters, Context.Request, "delete", ParameterType.Query);
                var action = Parameters.ValueOf<string>(parameters, Context.Request, "action", ParameterType.Query);
                var location = Parameters.ValueOf<string>(parameters, Context.Request, "location", ParameterType.Query);
                var propertylist = Parameters.ValueOf<List<string>>(parameters, Context.Request, "propertylist", ParameterType.Query);
                var paths = Parameters.ValueOf<List<string>>(parameters, Context.Request, "paths", ParameterType.Query);
                var excludedPaths = Parameters.ValueOf<List<string>>(parameters, Context.Request, "excludedPaths", ParameterType.Query);
                return service.ComDayCqWcmCoreImplEventRepositoryChangeEventListener(Context, post, apply, delete, action, location, propertylist, paths, excludedPaths);
            };

            Post["/system/console/configMgr/com.day.cq.wcm.core.impl.event.TemplatePostProcessor"] = parameters =>
            {
                var post = Parameters.ValueOf<bool?>(parameters, Context.Request, "post", ParameterType.Query);
                var apply = Parameters.ValueOf<bool?>(parameters, Context.Request, "apply", ParameterType.Query);
                var delete = Parameters.ValueOf<bool?>(parameters, Context.Request, "delete", ParameterType.Query);
                var action = Parameters.ValueOf<string>(parameters, Context.Request, "action", ParameterType.Query);
                var location = Parameters.ValueOf<string>(parameters, Context.Request, "location", ParameterType.Query);
                var propertylist = Parameters.ValueOf<List<string>>(parameters, Context.Request, "propertylist", ParameterType.Query);
                var paths = Parameters.ValueOf<string>(parameters, Context.Request, "paths", ParameterType.Query);
                return service.ComDayCqWcmCoreImplEventTemplatePostProcessor(Context, post, apply, delete, action, location, propertylist, paths);
            };

            Post["/system/console/configMgr/com.day.cq.wcm.core.impl.LanguageManagerImpl"] = parameters =>
            {
                var post = Parameters.ValueOf<bool?>(parameters, Context.Request, "post", ParameterType.Query);
                var apply = Parameters.ValueOf<bool?>(parameters, Context.Request, "apply", ParameterType.Query);
                var delete = Parameters.ValueOf<bool?>(parameters, Context.Request, "delete", ParameterType.Query);
                var action = Parameters.ValueOf<string>(parameters, Context.Request, "action", ParameterType.Query);
                var location = Parameters.ValueOf<string>(parameters, Context.Request, "location", ParameterType.Query);
                var propertylist = Parameters.ValueOf<List<string>>(parameters, Context.Request, "propertylist", ParameterType.Query);
                var langmgrListPath = Parameters.ValueOf<string>(parameters, Context.Request, "langmgrListPath", ParameterType.Query);
                var langmgrCountryDefault = Parameters.ValueOf<List<string>>(parameters, Context.Request, "langmgrCountryDefault", ParameterType.Query);
                return service.ComDayCqWcmCoreImplLanguageManagerImpl(Context, post, apply, delete, action, location, propertylist, langmgrListPath, langmgrCountryDefault);
            };

            Post["/system/console/configMgr/com.day.cq.wcm.core.impl.LinkCheckerConfigurationFactoryImpl"] = parameters =>
            {
                var post = Parameters.ValueOf<bool?>(parameters, Context.Request, "post", ParameterType.Query);
                var apply = Parameters.ValueOf<bool?>(parameters, Context.Request, "apply", ParameterType.Query);
                var delete = Parameters.ValueOf<bool?>(parameters, Context.Request, "delete", ParameterType.Query);
                var action = Parameters.ValueOf<string>(parameters, Context.Request, "action", ParameterType.Query);
                var location = Parameters.ValueOf<string>(parameters, Context.Request, "location", ParameterType.Query);
                var propertylist = Parameters.ValueOf<List<string>>(parameters, Context.Request, "propertylist", ParameterType.Query);
                var linkExpiredPrefix = Parameters.ValueOf<string>(parameters, Context.Request, "linkExpiredPrefix", ParameterType.Query);
                var linkExpiredRemove = Parameters.ValueOf<bool?>(parameters, Context.Request, "linkExpiredRemove", ParameterType.Query);
                var linkExpiredSuffix = Parameters.ValueOf<string>(parameters, Context.Request, "linkExpiredSuffix", ParameterType.Query);
                var linkInvalidPrefix = Parameters.ValueOf<string>(parameters, Context.Request, "linkInvalidPrefix", ParameterType.Query);
                var linkInvalidRemove = Parameters.ValueOf<bool?>(parameters, Context.Request, "linkInvalidRemove", ParameterType.Query);
                var linkInvalidSuffix = Parameters.ValueOf<string>(parameters, Context.Request, "linkInvalidSuffix", ParameterType.Query);
                var linkPredatedPrefix = Parameters.ValueOf<string>(parameters, Context.Request, "linkPredatedPrefix", ParameterType.Query);
                var linkPredatedRemove = Parameters.ValueOf<bool?>(parameters, Context.Request, "linkPredatedRemove", ParameterType.Query);
                var linkPredatedSuffix = Parameters.ValueOf<string>(parameters, Context.Request, "linkPredatedSuffix", ParameterType.Query);
                var linkWcmmodes = Parameters.ValueOf<List<string>>(parameters, Context.Request, "linkWcmmodes", ParameterType.Query);
                return service.ComDayCqWcmCoreImplLinkCheckerConfigurationFactoryImpl(Context, post, apply, delete, action, location, propertylist, linkExpiredPrefix, linkExpiredRemove, linkExpiredSuffix, linkInvalidPrefix, linkInvalidRemove, linkInvalidSuffix, linkPredatedPrefix, linkPredatedRemove, linkPredatedSuffix, linkWcmmodes);
            };

            Post["/system/console/configMgr/com.day.cq.wcm.core.impl.page.PageInfoAggregatorImpl"] = parameters =>
            {
                var post = Parameters.ValueOf<bool?>(parameters, Context.Request, "post", ParameterType.Query);
                var apply = Parameters.ValueOf<bool?>(parameters, Context.Request, "apply", ParameterType.Query);
                var delete = Parameters.ValueOf<bool?>(parameters, Context.Request, "delete", ParameterType.Query);
                var action = Parameters.ValueOf<string>(parameters, Context.Request, "action", ParameterType.Query);
                var location = Parameters.ValueOf<string>(parameters, Context.Request, "location", ParameterType.Query);
                var propertylist = Parameters.ValueOf<List<string>>(parameters, Context.Request, "propertylist", ParameterType.Query);
                var pageInfoProviderPropertyRegexDefault = Parameters.ValueOf<string>(parameters, Context.Request, "pageInfoProviderPropertyRegexDefault", ParameterType.Query);
                var pageInfoProviderPropertyName = Parameters.ValueOf<string>(parameters, Context.Request, "pageInfoProviderPropertyName", ParameterType.Query);
                return service.ComDayCqWcmCoreImplPagePageInfoAggregatorImpl(Context, post, apply, delete, action, location, propertylist, pageInfoProviderPropertyRegexDefault, pageInfoProviderPropertyName);
            };

            Post["/system/console/configMgr/com.day.cq.wcm.core.impl.page.PageManagerFactoryImpl"] = parameters =>
            {
                var post = Parameters.ValueOf<bool?>(parameters, Context.Request, "post", ParameterType.Query);
                var apply = Parameters.ValueOf<bool?>(parameters, Context.Request, "apply", ParameterType.Query);
                var delete = Parameters.ValueOf<bool?>(parameters, Context.Request, "delete", ParameterType.Query);
                var action = Parameters.ValueOf<string>(parameters, Context.Request, "action", ParameterType.Query);
                var location = Parameters.ValueOf<string>(parameters, Context.Request, "location", ParameterType.Query);
                var propertylist = Parameters.ValueOf<List<string>>(parameters, Context.Request, "propertylist", ParameterType.Query);
                var illegalCharMapping = Parameters.ValueOf<string>(parameters, Context.Request, "illegalCharMapping", ParameterType.Query);
                var pageSubTreeActivationCheck = Parameters.ValueOf<bool?>(parameters, Context.Request, "pageSubTreeActivationCheck", ParameterType.Query);
                return service.ComDayCqWcmCoreImplPagePageManagerFactoryImpl(Context, post, apply, delete, action, location, propertylist, illegalCharMapping, pageSubTreeActivationCheck);
            };

            Post["/system/console/configMgr/com.day.cq.wcm.core.impl.references.content.ContentReferenceConfig"] = parameters =>
            {
                var post = Parameters.ValueOf<bool?>(parameters, Context.Request, "post", ParameterType.Query);
                var apply = Parameters.ValueOf<bool?>(parameters, Context.Request, "apply", ParameterType.Query);
                var delete = Parameters.ValueOf<bool?>(parameters, Context.Request, "delete", ParameterType.Query);
                var action = Parameters.ValueOf<string>(parameters, Context.Request, "action", ParameterType.Query);
                var location = Parameters.ValueOf<string>(parameters, Context.Request, "location", ParameterType.Query);
                var propertylist = Parameters.ValueOf<List<string>>(parameters, Context.Request, "propertylist", ParameterType.Query);
                var contentReferenceConfigResourceTypes = Parameters.ValueOf<List<string>>(parameters, Context.Request, "contentReferenceConfigResourceTypes", ParameterType.Query);
                return service.ComDayCqWcmCoreImplReferencesContentContentReferenceConfig(Context, post, apply, delete, action, location, propertylist, contentReferenceConfigResourceTypes);
            };

            Post["/system/console/configMgr/com.day.cq.wcm.core.impl.servlets.contentfinder.AssetViewHandler"] = parameters =>
            {
                var post = Parameters.ValueOf<bool?>(parameters, Context.Request, "post", ParameterType.Query);
                var apply = Parameters.ValueOf<bool?>(parameters, Context.Request, "apply", ParameterType.Query);
                var delete = Parameters.ValueOf<bool?>(parameters, Context.Request, "delete", ParameterType.Query);
                var action = Parameters.ValueOf<string>(parameters, Context.Request, "action", ParameterType.Query);
                var location = Parameters.ValueOf<string>(parameters, Context.Request, "location", ParameterType.Query);
                var propertylist = Parameters.ValueOf<List<string>>(parameters, Context.Request, "propertylist", ParameterType.Query);
                var damShowexpired = Parameters.ValueOf<bool?>(parameters, Context.Request, "damShowexpired", ParameterType.Query);
                var damShowhidden = Parameters.ValueOf<bool?>(parameters, Context.Request, "damShowhidden", ParameterType.Query);
                var tagTitleSearch = Parameters.ValueOf<bool?>(parameters, Context.Request, "tagTitleSearch", ParameterType.Query);
                var guessTotal = Parameters.ValueOf<string>(parameters, Context.Request, "guessTotal", ParameterType.Query);
                var damExpiryProperty = Parameters.ValueOf<string>(parameters, Context.Request, "damExpiryProperty", ParameterType.Query);
                return service.ComDayCqWcmCoreImplServletsContentfinderAssetViewHandler(Context, post, apply, delete, action, location, propertylist, damShowexpired, damShowhidden, tagTitleSearch, guessTotal, damExpiryProperty);
            };

            Post["/system/console/configMgr/com.day.cq.wcm.core.impl.servlets.contentfinder.connector.ConnectorViewHandler"] = parameters =>
            {
                var post = Parameters.ValueOf<bool?>(parameters, Context.Request, "post", ParameterType.Query);
                var apply = Parameters.ValueOf<bool?>(parameters, Context.Request, "apply", ParameterType.Query);
                var delete = Parameters.ValueOf<bool?>(parameters, Context.Request, "delete", ParameterType.Query);
                var action = Parameters.ValueOf<string>(parameters, Context.Request, "action", ParameterType.Query);
                var location = Parameters.ValueOf<string>(parameters, Context.Request, "location", ParameterType.Query);
                var propertylist = Parameters.ValueOf<List<string>>(parameters, Context.Request, "propertylist", ParameterType.Query);
                var itemResourceTypes = Parameters.ValueOf<List<string>>(parameters, Context.Request, "itemResourceTypes", ParameterType.Query);
                return service.ComDayCqWcmCoreImplServletsContentfinderConnectorConnectorVie(Context, post, apply, delete, action, location, propertylist, itemResourceTypes);
            };

            Post["/system/console/configMgr/com.day.cq.wcm.core.impl.servlets.contentfinder.PageViewHandler"] = parameters =>
            {
                var post = Parameters.ValueOf<bool?>(parameters, Context.Request, "post", ParameterType.Query);
                var apply = Parameters.ValueOf<bool?>(parameters, Context.Request, "apply", ParameterType.Query);
                var delete = Parameters.ValueOf<bool?>(parameters, Context.Request, "delete", ParameterType.Query);
                var action = Parameters.ValueOf<string>(parameters, Context.Request, "action", ParameterType.Query);
                var location = Parameters.ValueOf<string>(parameters, Context.Request, "location", ParameterType.Query);
                var propertylist = Parameters.ValueOf<List<string>>(parameters, Context.Request, "propertylist", ParameterType.Query);
                var guessTotal = Parameters.ValueOf<string>(parameters, Context.Request, "guessTotal", ParameterType.Query);
                var tagTitleSearch = Parameters.ValueOf<bool?>(parameters, Context.Request, "tagTitleSearch", ParameterType.Query);
                return service.ComDayCqWcmCoreImplServletsContentfinderPageViewHandler(Context, post, apply, delete, action, location, propertylist, guessTotal, tagTitleSearch);
            };

            Post["/system/console/configMgr/com.day.cq.wcm.core.impl.servlets.FindReplaceServlet"] = parameters =>
            {
                var post = Parameters.ValueOf<bool?>(parameters, Context.Request, "post", ParameterType.Query);
                var apply = Parameters.ValueOf<bool?>(parameters, Context.Request, "apply", ParameterType.Query);
                var delete = Parameters.ValueOf<bool?>(parameters, Context.Request, "delete", ParameterType.Query);
                var action = Parameters.ValueOf<string>(parameters, Context.Request, "action", ParameterType.Query);
                var location = Parameters.ValueOf<string>(parameters, Context.Request, "location", ParameterType.Query);
                var propertylist = Parameters.ValueOf<List<string>>(parameters, Context.Request, "propertylist", ParameterType.Query);
                var scope = Parameters.ValueOf<List<string>>(parameters, Context.Request, "scope", ParameterType.Query);
                return service.ComDayCqWcmCoreImplServletsFindReplaceServlet(Context, post, apply, delete, action, location, propertylist, scope);
            };

            Post["/system/console/configMgr/com.day.cq.wcm.core.impl.servlets.ReferenceSearchServlet"] = parameters =>
            {
                var post = Parameters.ValueOf<bool?>(parameters, Context.Request, "post", ParameterType.Query);
                var apply = Parameters.ValueOf<bool?>(parameters, Context.Request, "apply", ParameterType.Query);
                var delete = Parameters.ValueOf<bool?>(parameters, Context.Request, "delete", ParameterType.Query);
                var action = Parameters.ValueOf<string>(parameters, Context.Request, "action", ParameterType.Query);
                var location = Parameters.ValueOf<string>(parameters, Context.Request, "location", ParameterType.Query);
                var propertylist = Parameters.ValueOf<List<string>>(parameters, Context.Request, "propertylist", ParameterType.Query);
                var referencesearchservletMaxReferencesPerPage = Parameters.ValueOf<int?>(parameters, Context.Request, "referencesearchservletMaxReferencesPerPage", ParameterType.Query);
                var referencesearchservletMaxPages = Parameters.ValueOf<int?>(parameters, Context.Request, "referencesearchservletMaxPages", ParameterType.Query);
                return service.ComDayCqWcmCoreImplServletsReferenceSearchServlet(Context, post, apply, delete, action, location, propertylist, referencesearchservletMaxReferencesPerPage, referencesearchservletMaxPages);
            };

            Post["/system/console/configMgr/com.day.cq.wcm.core.impl.servlets.ThumbnailServlet"] = parameters =>
            {
                var post = Parameters.ValueOf<bool?>(parameters, Context.Request, "post", ParameterType.Query);
                var apply = Parameters.ValueOf<bool?>(parameters, Context.Request, "apply", ParameterType.Query);
                var delete = Parameters.ValueOf<bool?>(parameters, Context.Request, "delete", ParameterType.Query);
                var action = Parameters.ValueOf<string>(parameters, Context.Request, "action", ParameterType.Query);
                var location = Parameters.ValueOf<string>(parameters, Context.Request, "location", ParameterType.Query);
                var propertylist = Parameters.ValueOf<List<string>>(parameters, Context.Request, "propertylist", ParameterType.Query);
                var workspace = Parameters.ValueOf<string>(parameters, Context.Request, "workspace", ParameterType.Query);
                var dimensions = Parameters.ValueOf<List<string>>(parameters, Context.Request, "dimensions", ParameterType.Query);
                return service.ComDayCqWcmCoreImplServletsThumbnailServlet(Context, post, apply, delete, action, location, propertylist, workspace, dimensions);
            };

            Post["/system/console/configMgr/com.day.cq.wcm.core.impl.utils.DefaultPageNameValidator"] = parameters =>
            {
                var post = Parameters.ValueOf<bool?>(parameters, Context.Request, "post", ParameterType.Query);
                var apply = Parameters.ValueOf<bool?>(parameters, Context.Request, "apply", ParameterType.Query);
                var delete = Parameters.ValueOf<bool?>(parameters, Context.Request, "delete", ParameterType.Query);
                var action = Parameters.ValueOf<string>(parameters, Context.Request, "action", ParameterType.Query);
                var location = Parameters.ValueOf<string>(parameters, Context.Request, "location", ParameterType.Query);
                var propertylist = Parameters.ValueOf<List<string>>(parameters, Context.Request, "propertylist", ParameterType.Query);
                var nonValidChars = Parameters.ValueOf<string>(parameters, Context.Request, "nonValidChars", ParameterType.Query);
                return service.ComDayCqWcmCoreImplUtilsDefaultPageNameValidator(Context, post, apply, delete, action, location, propertylist, nonValidChars);
            };

            Post["/system/console/configMgr/com.day.cq.wcm.core.impl.variants.PageVariantsProviderImpl"] = parameters =>
            {
                var post = Parameters.ValueOf<bool?>(parameters, Context.Request, "post", ParameterType.Query);
                var apply = Parameters.ValueOf<bool?>(parameters, Context.Request, "apply", ParameterType.Query);
                var delete = Parameters.ValueOf<bool?>(parameters, Context.Request, "delete", ParameterType.Query);
                var action = Parameters.ValueOf<string>(parameters, Context.Request, "action", ParameterType.Query);
                var location = Parameters.ValueOf<string>(parameters, Context.Request, "location", ParameterType.Query);
                var propertylist = Parameters.ValueOf<List<string>>(parameters, Context.Request, "propertylist", ParameterType.Query);
                var defaultExternalizerDomain = Parameters.ValueOf<string>(parameters, Context.Request, "defaultExternalizerDomain", ParameterType.Query);
                return service.ComDayCqWcmCoreImplVariantsPageVariantsProviderImpl(Context, post, apply, delete, action, location, propertylist, defaultExternalizerDomain);
            };

            Post["/system/console/configMgr/com.day.cq.wcm.core.impl.VersionManagerImpl"] = parameters =>
            {
                var post = Parameters.ValueOf<bool?>(parameters, Context.Request, "post", ParameterType.Query);
                var apply = Parameters.ValueOf<bool?>(parameters, Context.Request, "apply", ParameterType.Query);
                var delete = Parameters.ValueOf<bool?>(parameters, Context.Request, "delete", ParameterType.Query);
                var action = Parameters.ValueOf<string>(parameters, Context.Request, "action", ParameterType.Query);
                var location = Parameters.ValueOf<string>(parameters, Context.Request, "location", ParameterType.Query);
                var propertylist = Parameters.ValueOf<List<string>>(parameters, Context.Request, "propertylist", ParameterType.Query);
                var versionmanagerCreateVersionOnActivation = Parameters.ValueOf<bool?>(parameters, Context.Request, "versionmanagerCreateVersionOnActivation", ParameterType.Query);
                var versionmanagerPurgingEnabled = Parameters.ValueOf<bool?>(parameters, Context.Request, "versionmanagerPurgingEnabled", ParameterType.Query);
                var versionmanagerPurgePaths = Parameters.ValueOf<List<string>>(parameters, Context.Request, "versionmanagerPurgePaths", ParameterType.Query);
                var versionmanagerIvPaths = Parameters.ValueOf<List<string>>(parameters, Context.Request, "versionmanagerIvPaths", ParameterType.Query);
                var versionmanagerMaxAgeDays = Parameters.ValueOf<int?>(parameters, Context.Request, "versionmanagerMaxAgeDays", ParameterType.Query);
                var versionmanagerMaxNumberVersions = Parameters.ValueOf<int?>(parameters, Context.Request, "versionmanagerMaxNumberVersions", ParameterType.Query);
                var versionmanagerMinNumberVersions = Parameters.ValueOf<int?>(parameters, Context.Request, "versionmanagerMinNumberVersions", ParameterType.Query);
                return service.ComDayCqWcmCoreImplVersionManagerImpl(Context, post, apply, delete, action, location, propertylist, versionmanagerCreateVersionOnActivation, versionmanagerPurgingEnabled, versionmanagerPurgePaths, versionmanagerIvPaths, versionmanagerMaxAgeDays, versionmanagerMaxNumberVersions, versionmanagerMinNumberVersions);
            };

            Post["/system/console/configMgr/com.day.cq.wcm.core.impl.VersionPurgeTask"] = parameters =>
            {
                var post = Parameters.ValueOf<bool?>(parameters, Context.Request, "post", ParameterType.Query);
                var apply = Parameters.ValueOf<bool?>(parameters, Context.Request, "apply", ParameterType.Query);
                var delete = Parameters.ValueOf<bool?>(parameters, Context.Request, "delete", ParameterType.Query);
                var action = Parameters.ValueOf<string>(parameters, Context.Request, "action", ParameterType.Query);
                var location = Parameters.ValueOf<string>(parameters, Context.Request, "location", ParameterType.Query);
                var propertylist = Parameters.ValueOf<List<string>>(parameters, Context.Request, "propertylist", ParameterType.Query);
                var versionpurgePaths = Parameters.ValueOf<List<string>>(parameters, Context.Request, "versionpurgePaths", ParameterType.Query);
                var versionpurgeRecursive = Parameters.ValueOf<bool?>(parameters, Context.Request, "versionpurgeRecursive", ParameterType.Query);
                var versionpurgeMaxVersions = Parameters.ValueOf<int?>(parameters, Context.Request, "versionpurgeMaxVersions", ParameterType.Query);
                var versionpurgeMinVersions = Parameters.ValueOf<int?>(parameters, Context.Request, "versionpurgeMinVersions", ParameterType.Query);
                var versionpurgeMaxAgeDays = Parameters.ValueOf<int?>(parameters, Context.Request, "versionpurgeMaxAgeDays", ParameterType.Query);
                return service.ComDayCqWcmCoreImplVersionPurgeTask(Context, post, apply, delete, action, location, propertylist, versionpurgePaths, versionpurgeRecursive, versionpurgeMaxVersions, versionpurgeMinVersions, versionpurgeMaxAgeDays);
            };

            Post["/system/console/configMgr/com.day.cq.wcm.core.impl.WCMDebugFilter"] = parameters =>
            {
                var post = Parameters.ValueOf<bool?>(parameters, Context.Request, "post", ParameterType.Query);
                var apply = Parameters.ValueOf<bool?>(parameters, Context.Request, "apply", ParameterType.Query);
                var delete = Parameters.ValueOf<bool?>(parameters, Context.Request, "delete", ParameterType.Query);
                var action = Parameters.ValueOf<string>(parameters, Context.Request, "action", ParameterType.Query);
                var location = Parameters.ValueOf<string>(parameters, Context.Request, "location", ParameterType.Query);
                var propertylist = Parameters.ValueOf<List<string>>(parameters, Context.Request, "propertylist", ParameterType.Query);
                var wcmdbgfilterEnabled = Parameters.ValueOf<bool?>(parameters, Context.Request, "wcmdbgfilterEnabled", ParameterType.Query);
                var wcmdbgfilterJspDebug = Parameters.ValueOf<bool?>(parameters, Context.Request, "wcmdbgfilterJspDebug", ParameterType.Query);
                return service.ComDayCqWcmCoreImplWCMDebugFilter(Context, post, apply, delete, action, location, propertylist, wcmdbgfilterEnabled, wcmdbgfilterJspDebug);
            };

            Post["/system/console/configMgr/com.day.cq.wcm.core.impl.WCMDeveloperModeFilter"] = parameters =>
            {
                var post = Parameters.ValueOf<bool?>(parameters, Context.Request, "post", ParameterType.Query);
                var apply = Parameters.ValueOf<bool?>(parameters, Context.Request, "apply", ParameterType.Query);
                var delete = Parameters.ValueOf<bool?>(parameters, Context.Request, "delete", ParameterType.Query);
                var action = Parameters.ValueOf<string>(parameters, Context.Request, "action", ParameterType.Query);
                var location = Parameters.ValueOf<string>(parameters, Context.Request, "location", ParameterType.Query);
                var propertylist = Parameters.ValueOf<List<string>>(parameters, Context.Request, "propertylist", ParameterType.Query);
                var wcmdevmodefilterEnabled = Parameters.ValueOf<bool?>(parameters, Context.Request, "wcmdevmodefilterEnabled", ParameterType.Query);
                return service.ComDayCqWcmCoreImplWCMDeveloperModeFilter(Context, post, apply, delete, action, location, propertylist, wcmdevmodefilterEnabled);
            };

            Post["/system/console/configMgr/com.day.cq.wcm.core.impl.warp.TimeWarpFilter"] = parameters =>
            {
                var post = Parameters.ValueOf<bool?>(parameters, Context.Request, "post", ParameterType.Query);
                var apply = Parameters.ValueOf<bool?>(parameters, Context.Request, "apply", ParameterType.Query);
                var delete = Parameters.ValueOf<bool?>(parameters, Context.Request, "delete", ParameterType.Query);
                var action = Parameters.ValueOf<string>(parameters, Context.Request, "action", ParameterType.Query);
                var location = Parameters.ValueOf<string>(parameters, Context.Request, "location", ParameterType.Query);
                var propertylist = Parameters.ValueOf<List<string>>(parameters, Context.Request, "propertylist", ParameterType.Query);
                var filterOrder = Parameters.ValueOf<string>(parameters, Context.Request, "filterOrder", ParameterType.Query);
                var filterScope = Parameters.ValueOf<string>(parameters, Context.Request, "filterScope", ParameterType.Query);
                return service.ComDayCqWcmCoreImplWarpTimeWarpFilter(Context, post, apply, delete, action, location, propertylist, filterOrder, filterScope);
            };

            Post["/system/console/configMgr/com.day.cq.wcm.core.mvt.MVTStatisticsImpl"] = parameters =>
            {
                var post = Parameters.ValueOf<bool?>(parameters, Context.Request, "post", ParameterType.Query);
                var apply = Parameters.ValueOf<bool?>(parameters, Context.Request, "apply", ParameterType.Query);
                var delete = Parameters.ValueOf<bool?>(parameters, Context.Request, "delete", ParameterType.Query);
                var action = Parameters.ValueOf<string>(parameters, Context.Request, "action", ParameterType.Query);
                var location = Parameters.ValueOf<string>(parameters, Context.Request, "location", ParameterType.Query);
                var propertylist = Parameters.ValueOf<List<string>>(parameters, Context.Request, "propertylist", ParameterType.Query);
                var mvtstatisticsTrackingurl = Parameters.ValueOf<string>(parameters, Context.Request, "mvtstatisticsTrackingurl", ParameterType.Query);
                return service.ComDayCqWcmCoreMvtMVTStatisticsImpl(Context, post, apply, delete, action, location, propertylist, mvtstatisticsTrackingurl);
            };

            Post["/system/console/configMgr/com.day.cq.wcm.core.stats.PageViewStatisticsImpl"] = parameters =>
            {
                var post = Parameters.ValueOf<bool?>(parameters, Context.Request, "post", ParameterType.Query);
                var apply = Parameters.ValueOf<bool?>(parameters, Context.Request, "apply", ParameterType.Query);
                var delete = Parameters.ValueOf<bool?>(parameters, Context.Request, "delete", ParameterType.Query);
                var action = Parameters.ValueOf<string>(parameters, Context.Request, "action", ParameterType.Query);
                var location = Parameters.ValueOf<string>(parameters, Context.Request, "location", ParameterType.Query);
                var propertylist = Parameters.ValueOf<List<string>>(parameters, Context.Request, "propertylist", ParameterType.Query);
                var pageviewstatisticsTrackingurl = Parameters.ValueOf<string>(parameters, Context.Request, "pageviewstatisticsTrackingurl", ParameterType.Query);
                var pageviewstatisticsTrackingscriptEnabled = Parameters.ValueOf<string>(parameters, Context.Request, "pageviewstatisticsTrackingscriptEnabled", ParameterType.Query);
                return service.ComDayCqWcmCoreStatsPageViewStatisticsImpl(Context, post, apply, delete, action, location, propertylist, pageviewstatisticsTrackingurl, pageviewstatisticsTrackingscriptEnabled);
            };

            Post["/system/console/configMgr/com.day.cq.wcm.core.WCMRequestFilter"] = parameters =>
            {
                var post = Parameters.ValueOf<bool?>(parameters, Context.Request, "post", ParameterType.Query);
                var apply = Parameters.ValueOf<bool?>(parameters, Context.Request, "apply", ParameterType.Query);
                var delete = Parameters.ValueOf<bool?>(parameters, Context.Request, "delete", ParameterType.Query);
                var action = Parameters.ValueOf<string>(parameters, Context.Request, "action", ParameterType.Query);
                var location = Parameters.ValueOf<string>(parameters, Context.Request, "location", ParameterType.Query);
                var propertylist = Parameters.ValueOf<List<string>>(parameters, Context.Request, "propertylist", ParameterType.Query);
                var wcmfilterMode = Parameters.ValueOf<string>(parameters, Context.Request, "wcmfilterMode", ParameterType.Query);
                return service.ComDayCqWcmCoreWCMRequestFilter(Context, post, apply, delete, action, location, propertylist, wcmfilterMode);
            };

            Post["/system/console/configMgr/com.day.cq.wcm.designimporter.DesignPackageImporter"] = parameters =>
            {
                var post = Parameters.ValueOf<bool?>(parameters, Context.Request, "post", ParameterType.Query);
                var apply = Parameters.ValueOf<bool?>(parameters, Context.Request, "apply", ParameterType.Query);
                var delete = Parameters.ValueOf<bool?>(parameters, Context.Request, "delete", ParameterType.Query);
                var action = Parameters.ValueOf<string>(parameters, Context.Request, "action", ParameterType.Query);
                var location = Parameters.ValueOf<string>(parameters, Context.Request, "location", ParameterType.Query);
                var propertylist = Parameters.ValueOf<List<string>>(parameters, Context.Request, "propertylist", ParameterType.Query);
                var extractFilter = Parameters.ValueOf<List<string>>(parameters, Context.Request, "extractFilter", ParameterType.Query);
                return service.ComDayCqWcmDesignimporterDesignPackageImporter(Context, post, apply, delete, action, location, propertylist, extractFilter);
            };

            Post["/system/console/configMgr/com.day.cq.wcm.designimporter.impl.CanvasBuilderImpl"] = parameters =>
            {
                var post = Parameters.ValueOf<bool?>(parameters, Context.Request, "post", ParameterType.Query);
                var apply = Parameters.ValueOf<bool?>(parameters, Context.Request, "apply", ParameterType.Query);
                var delete = Parameters.ValueOf<bool?>(parameters, Context.Request, "delete", ParameterType.Query);
                var action = Parameters.ValueOf<string>(parameters, Context.Request, "action", ParameterType.Query);
                var location = Parameters.ValueOf<string>(parameters, Context.Request, "location", ParameterType.Query);
                var propertylist = Parameters.ValueOf<List<string>>(parameters, Context.Request, "propertylist", ParameterType.Query);
                var filepattern = Parameters.ValueOf<string>(parameters, Context.Request, "filepattern", ParameterType.Query);
                var buildPageNodes = Parameters.ValueOf<bool?>(parameters, Context.Request, "buildPageNodes", ParameterType.Query);
                var buildClientLibs = Parameters.ValueOf<bool?>(parameters, Context.Request, "buildClientLibs", ParameterType.Query);
                var buildCanvasComponent = Parameters.ValueOf<bool?>(parameters, Context.Request, "buildCanvasComponent", ParameterType.Query);
                return service.ComDayCqWcmDesignimporterImplCanvasBuilderImpl(Context, post, apply, delete, action, location, propertylist, filepattern, buildPageNodes, buildClientLibs, buildCanvasComponent);
            };

            Post["/system/console/configMgr/com.day.cq.wcm.designimporter.impl.CanvasPageDeleteHandler"] = parameters =>
            {
                var post = Parameters.ValueOf<bool?>(parameters, Context.Request, "post", ParameterType.Query);
                var apply = Parameters.ValueOf<bool?>(parameters, Context.Request, "apply", ParameterType.Query);
                var delete = Parameters.ValueOf<bool?>(parameters, Context.Request, "delete", ParameterType.Query);
                var action = Parameters.ValueOf<string>(parameters, Context.Request, "action", ParameterType.Query);
                var location = Parameters.ValueOf<string>(parameters, Context.Request, "location", ParameterType.Query);
                var propertylist = Parameters.ValueOf<List<string>>(parameters, Context.Request, "propertylist", ParameterType.Query);
                var minThreadPoolSize = Parameters.ValueOf<int?>(parameters, Context.Request, "minThreadPoolSize", ParameterType.Query);
                var maxThreadPoolSize = Parameters.ValueOf<int?>(parameters, Context.Request, "maxThreadPoolSize", ParameterType.Query);
                return service.ComDayCqWcmDesignimporterImplCanvasPageDeleteHandler(Context, post, apply, delete, action, location, propertylist, minThreadPoolSize, maxThreadPoolSize);
            };

            Post["/system/console/configMgr/com.day.cq.wcm.designimporter.impl.EntryPreprocessorImpl"] = parameters =>
            {
                var post = Parameters.ValueOf<bool?>(parameters, Context.Request, "post", ParameterType.Query);
                var apply = Parameters.ValueOf<bool?>(parameters, Context.Request, "apply", ParameterType.Query);
                var delete = Parameters.ValueOf<bool?>(parameters, Context.Request, "delete", ParameterType.Query);
                var action = Parameters.ValueOf<string>(parameters, Context.Request, "action", ParameterType.Query);
                var location = Parameters.ValueOf<string>(parameters, Context.Request, "location", ParameterType.Query);
                var propertylist = Parameters.ValueOf<List<string>>(parameters, Context.Request, "propertylist", ParameterType.Query);
                var searchPattern = Parameters.ValueOf<string>(parameters, Context.Request, "searchPattern", ParameterType.Query);
                var replacePattern = Parameters.ValueOf<string>(parameters, Context.Request, "replacePattern", ParameterType.Query);
                return service.ComDayCqWcmDesignimporterImplEntryPreprocessorImpl(Context, post, apply, delete, action, location, propertylist, searchPattern, replacePattern);
            };

            Post["/system/console/configMgr/com.day.cq.wcm.designimporter.impl.MobileCanvasBuilderImpl"] = parameters =>
            {
                var post = Parameters.ValueOf<bool?>(parameters, Context.Request, "post", ParameterType.Query);
                var apply = Parameters.ValueOf<bool?>(parameters, Context.Request, "apply", ParameterType.Query);
                var delete = Parameters.ValueOf<bool?>(parameters, Context.Request, "delete", ParameterType.Query);
                var action = Parameters.ValueOf<string>(parameters, Context.Request, "action", ParameterType.Query);
                var location = Parameters.ValueOf<string>(parameters, Context.Request, "location", ParameterType.Query);
                var propertylist = Parameters.ValueOf<List<string>>(parameters, Context.Request, "propertylist", ParameterType.Query);
                var filepattern = Parameters.ValueOf<string>(parameters, Context.Request, "filepattern", ParameterType.Query);
                var deviceGroups = Parameters.ValueOf<List<string>>(parameters, Context.Request, "deviceGroups", ParameterType.Query);
                var buildPageNodes = Parameters.ValueOf<bool?>(parameters, Context.Request, "buildPageNodes", ParameterType.Query);
                var buildClientLibs = Parameters.ValueOf<bool?>(parameters, Context.Request, "buildClientLibs", ParameterType.Query);
                var buildCanvasComponent = Parameters.ValueOf<bool?>(parameters, Context.Request, "buildCanvasComponent", ParameterType.Query);
                return service.ComDayCqWcmDesignimporterImplMobileCanvasBuilderImpl(Context, post, apply, delete, action, location, propertylist, filepattern, deviceGroups, buildPageNodes, buildClientLibs, buildCanvasComponent);
            };

            Post["/system/console/configMgr/com.day.cq.wcm.designimporter.parser.taghandlers.factory.CanvasComponentTagHandlerFactory"] = parameters =>
            {
                var post = Parameters.ValueOf<bool?>(parameters, Context.Request, "post", ParameterType.Query);
                var apply = Parameters.ValueOf<bool?>(parameters, Context.Request, "apply", ParameterType.Query);
                var delete = Parameters.ValueOf<bool?>(parameters, Context.Request, "delete", ParameterType.Query);
                var action = Parameters.ValueOf<string>(parameters, Context.Request, "action", ParameterType.Query);
                var location = Parameters.ValueOf<string>(parameters, Context.Request, "location", ParameterType.Query);
                var propertylist = Parameters.ValueOf<List<string>>(parameters, Context.Request, "propertylist", ParameterType.Query);
                var serviceRanking = Parameters.ValueOf<int?>(parameters, Context.Request, "serviceRanking", ParameterType.Query);
                var tagpattern = Parameters.ValueOf<string>(parameters, Context.Request, "tagpattern", ParameterType.Query);
                return service.ComDayCqWcmDesignimporterParserTaghandlersFactoryCanvasCompone(Context, post, apply, delete, action, location, propertylist, serviceRanking, tagpattern);
            };

            Post["/system/console/configMgr/com.day.cq.wcm.designimporter.parser.taghandlers.factory.DefaultComponentTagHandlerFactory"] = parameters =>
            {
                var post = Parameters.ValueOf<bool?>(parameters, Context.Request, "post", ParameterType.Query);
                var apply = Parameters.ValueOf<bool?>(parameters, Context.Request, "apply", ParameterType.Query);
                var delete = Parameters.ValueOf<bool?>(parameters, Context.Request, "delete", ParameterType.Query);
                var action = Parameters.ValueOf<string>(parameters, Context.Request, "action", ParameterType.Query);
                var location = Parameters.ValueOf<string>(parameters, Context.Request, "location", ParameterType.Query);
                var propertylist = Parameters.ValueOf<List<string>>(parameters, Context.Request, "propertylist", ParameterType.Query);
                var serviceRanking = Parameters.ValueOf<int?>(parameters, Context.Request, "serviceRanking", ParameterType.Query);
                var tagpattern = Parameters.ValueOf<string>(parameters, Context.Request, "tagpattern", ParameterType.Query);
                return service.ComDayCqWcmDesignimporterParserTaghandlersFactoryDefaultCompon(Context, post, apply, delete, action, location, propertylist, serviceRanking, tagpattern);
            };

            Post["/system/console/configMgr/com.day.cq.wcm.designimporter.parser.taghandlers.factory.DefaultTagHandlerFactory"] = parameters =>
            {
                var post = Parameters.ValueOf<bool?>(parameters, Context.Request, "post", ParameterType.Query);
                var apply = Parameters.ValueOf<bool?>(parameters, Context.Request, "apply", ParameterType.Query);
                var delete = Parameters.ValueOf<bool?>(parameters, Context.Request, "delete", ParameterType.Query);
                var action = Parameters.ValueOf<string>(parameters, Context.Request, "action", ParameterType.Query);
                var location = Parameters.ValueOf<string>(parameters, Context.Request, "location", ParameterType.Query);
                var propertylist = Parameters.ValueOf<List<string>>(parameters, Context.Request, "propertylist", ParameterType.Query);
                var serviceRanking = Parameters.ValueOf<int?>(parameters, Context.Request, "serviceRanking", ParameterType.Query);
                var tagpattern = Parameters.ValueOf<string>(parameters, Context.Request, "tagpattern", ParameterType.Query);
                return service.ComDayCqWcmDesignimporterParserTaghandlersFactoryDefaultTagHan(Context, post, apply, delete, action, location, propertylist, serviceRanking, tagpattern);
            };

            Post["/system/console/configMgr/com.day.cq.wcm.designimporter.parser.taghandlers.factory.HeadTagHandlerFactory"] = parameters =>
            {
                var post = Parameters.ValueOf<bool?>(parameters, Context.Request, "post", ParameterType.Query);
                var apply = Parameters.ValueOf<bool?>(parameters, Context.Request, "apply", ParameterType.Query);
                var delete = Parameters.ValueOf<bool?>(parameters, Context.Request, "delete", ParameterType.Query);
                var action = Parameters.ValueOf<string>(parameters, Context.Request, "action", ParameterType.Query);
                var location = Parameters.ValueOf<string>(parameters, Context.Request, "location", ParameterType.Query);
                var propertylist = Parameters.ValueOf<List<string>>(parameters, Context.Request, "propertylist", ParameterType.Query);
                var serviceRanking = Parameters.ValueOf<int?>(parameters, Context.Request, "serviceRanking", ParameterType.Query);
                var tagpattern = Parameters.ValueOf<string>(parameters, Context.Request, "tagpattern", ParameterType.Query);
                return service.ComDayCqWcmDesignimporterParserTaghandlersFactoryHeadTagHandle(Context, post, apply, delete, action, location, propertylist, serviceRanking, tagpattern);
            };

            Post["/system/console/configMgr/com.day.cq.wcm.designimporter.parser.taghandlers.factory.IFrameTagHandlerFactory"] = parameters =>
            {
                var post = Parameters.ValueOf<bool?>(parameters, Context.Request, "post", ParameterType.Query);
                var apply = Parameters.ValueOf<bool?>(parameters, Context.Request, "apply", ParameterType.Query);
                var delete = Parameters.ValueOf<bool?>(parameters, Context.Request, "delete", ParameterType.Query);
                var action = Parameters.ValueOf<string>(parameters, Context.Request, "action", ParameterType.Query);
                var location = Parameters.ValueOf<string>(parameters, Context.Request, "location", ParameterType.Query);
                var propertylist = Parameters.ValueOf<List<string>>(parameters, Context.Request, "propertylist", ParameterType.Query);
                var serviceRanking = Parameters.ValueOf<int?>(parameters, Context.Request, "serviceRanking", ParameterType.Query);
                var tagpattern = Parameters.ValueOf<string>(parameters, Context.Request, "tagpattern", ParameterType.Query);
                return service.ComDayCqWcmDesignimporterParserTaghandlersFactoryIFrameTagHand(Context, post, apply, delete, action, location, propertylist, serviceRanking, tagpattern);
            };

            Post["/system/console/configMgr/com.day.cq.wcm.designimporter.parser.taghandlers.factory.ImageComponentTagHandlerFactory"] = parameters =>
            {
                var post = Parameters.ValueOf<bool?>(parameters, Context.Request, "post", ParameterType.Query);
                var apply = Parameters.ValueOf<bool?>(parameters, Context.Request, "apply", ParameterType.Query);
                var delete = Parameters.ValueOf<bool?>(parameters, Context.Request, "delete", ParameterType.Query);
                var action = Parameters.ValueOf<string>(parameters, Context.Request, "action", ParameterType.Query);
                var location = Parameters.ValueOf<string>(parameters, Context.Request, "location", ParameterType.Query);
                var propertylist = Parameters.ValueOf<List<string>>(parameters, Context.Request, "propertylist", ParameterType.Query);
                var serviceRanking = Parameters.ValueOf<int?>(parameters, Context.Request, "serviceRanking", ParameterType.Query);
                var tagpattern = Parameters.ValueOf<string>(parameters, Context.Request, "tagpattern", ParameterType.Query);
                var componentResourceType = Parameters.ValueOf<string>(parameters, Context.Request, "componentResourceType", ParameterType.Query);
                return service.ComDayCqWcmDesignimporterParserTaghandlersFactoryImageComponen(Context, post, apply, delete, action, location, propertylist, serviceRanking, tagpattern, componentResourceType);
            };

            Post["/system/console/configMgr/com.day.cq.wcm.designimporter.parser.taghandlers.factory.ImgTagHandlerFactory"] = parameters =>
            {
                var post = Parameters.ValueOf<bool?>(parameters, Context.Request, "post", ParameterType.Query);
                var apply = Parameters.ValueOf<bool?>(parameters, Context.Request, "apply", ParameterType.Query);
                var delete = Parameters.ValueOf<bool?>(parameters, Context.Request, "delete", ParameterType.Query);
                var action = Parameters.ValueOf<string>(parameters, Context.Request, "action", ParameterType.Query);
                var location = Parameters.ValueOf<string>(parameters, Context.Request, "location", ParameterType.Query);
                var propertylist = Parameters.ValueOf<List<string>>(parameters, Context.Request, "propertylist", ParameterType.Query);
                var serviceRanking = Parameters.ValueOf<int?>(parameters, Context.Request, "serviceRanking", ParameterType.Query);
                var tagpattern = Parameters.ValueOf<string>(parameters, Context.Request, "tagpattern", ParameterType.Query);
                return service.ComDayCqWcmDesignimporterParserTaghandlersFactoryImgTagHandler(Context, post, apply, delete, action, location, propertylist, serviceRanking, tagpattern);
            };

            Post["/system/console/configMgr/com.day.cq.wcm.designimporter.parser.taghandlers.factory.InlineScriptTagHandlerFactory"] = parameters =>
            {
                var post = Parameters.ValueOf<bool?>(parameters, Context.Request, "post", ParameterType.Query);
                var apply = Parameters.ValueOf<bool?>(parameters, Context.Request, "apply", ParameterType.Query);
                var delete = Parameters.ValueOf<bool?>(parameters, Context.Request, "delete", ParameterType.Query);
                var action = Parameters.ValueOf<string>(parameters, Context.Request, "action", ParameterType.Query);
                var location = Parameters.ValueOf<string>(parameters, Context.Request, "location", ParameterType.Query);
                var propertylist = Parameters.ValueOf<List<string>>(parameters, Context.Request, "propertylist", ParameterType.Query);
                var serviceRanking = Parameters.ValueOf<int?>(parameters, Context.Request, "serviceRanking", ParameterType.Query);
                var tagpattern = Parameters.ValueOf<string>(parameters, Context.Request, "tagpattern", ParameterType.Query);
                return service.ComDayCqWcmDesignimporterParserTaghandlersFactoryInlineScriptT(Context, post, apply, delete, action, location, propertylist, serviceRanking, tagpattern);
            };

            Post["/system/console/configMgr/com.day.cq.wcm.designimporter.parser.taghandlers.factory.LinkTagHandlerFactory"] = parameters =>
            {
                var post = Parameters.ValueOf<bool?>(parameters, Context.Request, "post", ParameterType.Query);
                var apply = Parameters.ValueOf<bool?>(parameters, Context.Request, "apply", ParameterType.Query);
                var delete = Parameters.ValueOf<bool?>(parameters, Context.Request, "delete", ParameterType.Query);
                var action = Parameters.ValueOf<string>(parameters, Context.Request, "action", ParameterType.Query);
                var location = Parameters.ValueOf<string>(parameters, Context.Request, "location", ParameterType.Query);
                var propertylist = Parameters.ValueOf<List<string>>(parameters, Context.Request, "propertylist", ParameterType.Query);
                var serviceRanking = Parameters.ValueOf<int?>(parameters, Context.Request, "serviceRanking", ParameterType.Query);
                var tagpattern = Parameters.ValueOf<string>(parameters, Context.Request, "tagpattern", ParameterType.Query);
                return service.ComDayCqWcmDesignimporterParserTaghandlersFactoryLinkTagHandle(Context, post, apply, delete, action, location, propertylist, serviceRanking, tagpattern);
            };

            Post["/system/console/configMgr/com.day.cq.wcm.designimporter.parser.taghandlers.factory.MetaTagHandlerFactory"] = parameters =>
            {
                var post = Parameters.ValueOf<bool?>(parameters, Context.Request, "post", ParameterType.Query);
                var apply = Parameters.ValueOf<bool?>(parameters, Context.Request, "apply", ParameterType.Query);
                var delete = Parameters.ValueOf<bool?>(parameters, Context.Request, "delete", ParameterType.Query);
                var action = Parameters.ValueOf<string>(parameters, Context.Request, "action", ParameterType.Query);
                var location = Parameters.ValueOf<string>(parameters, Context.Request, "location", ParameterType.Query);
                var propertylist = Parameters.ValueOf<List<string>>(parameters, Context.Request, "propertylist", ParameterType.Query);
                var serviceRanking = Parameters.ValueOf<int?>(parameters, Context.Request, "serviceRanking", ParameterType.Query);
                var tagpattern = Parameters.ValueOf<string>(parameters, Context.Request, "tagpattern", ParameterType.Query);
                return service.ComDayCqWcmDesignimporterParserTaghandlersFactoryMetaTagHandle(Context, post, apply, delete, action, location, propertylist, serviceRanking, tagpattern);
            };

            Post["/system/console/configMgr/com.day.cq.wcm.designimporter.parser.taghandlers.factory.NonScriptTagHandlerFactory"] = parameters =>
            {
                var post = Parameters.ValueOf<bool?>(parameters, Context.Request, "post", ParameterType.Query);
                var apply = Parameters.ValueOf<bool?>(parameters, Context.Request, "apply", ParameterType.Query);
                var delete = Parameters.ValueOf<bool?>(parameters, Context.Request, "delete", ParameterType.Query);
                var action = Parameters.ValueOf<string>(parameters, Context.Request, "action", ParameterType.Query);
                var location = Parameters.ValueOf<string>(parameters, Context.Request, "location", ParameterType.Query);
                var propertylist = Parameters.ValueOf<List<string>>(parameters, Context.Request, "propertylist", ParameterType.Query);
                var serviceRanking = Parameters.ValueOf<int?>(parameters, Context.Request, "serviceRanking", ParameterType.Query);
                var tagpattern = Parameters.ValueOf<string>(parameters, Context.Request, "tagpattern", ParameterType.Query);
                return service.ComDayCqWcmDesignimporterParserTaghandlersFactoryNonScriptTagH(Context, post, apply, delete, action, location, propertylist, serviceRanking, tagpattern);
            };

            Post["/system/console/configMgr/com.day.cq.wcm.designimporter.parser.taghandlers.factory.ParsysComponentTagHandlerFactory"] = parameters =>
            {
                var post = Parameters.ValueOf<bool?>(parameters, Context.Request, "post", ParameterType.Query);
                var apply = Parameters.ValueOf<bool?>(parameters, Context.Request, "apply", ParameterType.Query);
                var delete = Parameters.ValueOf<bool?>(parameters, Context.Request, "delete", ParameterType.Query);
                var action = Parameters.ValueOf<string>(parameters, Context.Request, "action", ParameterType.Query);
                var location = Parameters.ValueOf<string>(parameters, Context.Request, "location", ParameterType.Query);
                var propertylist = Parameters.ValueOf<List<string>>(parameters, Context.Request, "propertylist", ParameterType.Query);
                var serviceRanking = Parameters.ValueOf<int?>(parameters, Context.Request, "serviceRanking", ParameterType.Query);
                var tagpattern = Parameters.ValueOf<string>(parameters, Context.Request, "tagpattern", ParameterType.Query);
                var componentResourceType = Parameters.ValueOf<string>(parameters, Context.Request, "componentResourceType", ParameterType.Query);
                return service.ComDayCqWcmDesignimporterParserTaghandlersFactoryParsysCompone(Context, post, apply, delete, action, location, propertylist, serviceRanking, tagpattern, componentResourceType);
            };

            Post["/system/console/configMgr/com.day.cq.wcm.designimporter.parser.taghandlers.factory.ScriptTagHandlerFactory"] = parameters =>
            {
                var post = Parameters.ValueOf<bool?>(parameters, Context.Request, "post", ParameterType.Query);
                var apply = Parameters.ValueOf<bool?>(parameters, Context.Request, "apply", ParameterType.Query);
                var delete = Parameters.ValueOf<bool?>(parameters, Context.Request, "delete", ParameterType.Query);
                var action = Parameters.ValueOf<string>(parameters, Context.Request, "action", ParameterType.Query);
                var location = Parameters.ValueOf<string>(parameters, Context.Request, "location", ParameterType.Query);
                var propertylist = Parameters.ValueOf<List<string>>(parameters, Context.Request, "propertylist", ParameterType.Query);
                var serviceRanking = Parameters.ValueOf<int?>(parameters, Context.Request, "serviceRanking", ParameterType.Query);
                var tagpattern = Parameters.ValueOf<string>(parameters, Context.Request, "tagpattern", ParameterType.Query);
                return service.ComDayCqWcmDesignimporterParserTaghandlersFactoryScriptTagHand(Context, post, apply, delete, action, location, propertylist, serviceRanking, tagpattern);
            };

            Post["/system/console/configMgr/com.day.cq.wcm.designimporter.parser.taghandlers.factory.StyleTagHandlerFactory"] = parameters =>
            {
                var post = Parameters.ValueOf<bool?>(parameters, Context.Request, "post", ParameterType.Query);
                var apply = Parameters.ValueOf<bool?>(parameters, Context.Request, "apply", ParameterType.Query);
                var delete = Parameters.ValueOf<bool?>(parameters, Context.Request, "delete", ParameterType.Query);
                var action = Parameters.ValueOf<string>(parameters, Context.Request, "action", ParameterType.Query);
                var location = Parameters.ValueOf<string>(parameters, Context.Request, "location", ParameterType.Query);
                var propertylist = Parameters.ValueOf<List<string>>(parameters, Context.Request, "propertylist", ParameterType.Query);
                var serviceRanking = Parameters.ValueOf<int?>(parameters, Context.Request, "serviceRanking", ParameterType.Query);
                var tagpattern = Parameters.ValueOf<string>(parameters, Context.Request, "tagpattern", ParameterType.Query);
                return service.ComDayCqWcmDesignimporterParserTaghandlersFactoryStyleTagHandl(Context, post, apply, delete, action, location, propertylist, serviceRanking, tagpattern);
            };

            Post["/system/console/configMgr/com.day.cq.wcm.designimporter.parser.taghandlers.factory.TextComponentTagHandlerFactory"] = parameters =>
            {
                var post = Parameters.ValueOf<bool?>(parameters, Context.Request, "post", ParameterType.Query);
                var apply = Parameters.ValueOf<bool?>(parameters, Context.Request, "apply", ParameterType.Query);
                var delete = Parameters.ValueOf<bool?>(parameters, Context.Request, "delete", ParameterType.Query);
                var action = Parameters.ValueOf<string>(parameters, Context.Request, "action", ParameterType.Query);
                var location = Parameters.ValueOf<string>(parameters, Context.Request, "location", ParameterType.Query);
                var propertylist = Parameters.ValueOf<List<string>>(parameters, Context.Request, "propertylist", ParameterType.Query);
                var serviceRanking = Parameters.ValueOf<int?>(parameters, Context.Request, "serviceRanking", ParameterType.Query);
                var tagpattern = Parameters.ValueOf<string>(parameters, Context.Request, "tagpattern", ParameterType.Query);
                var componentResourceType = Parameters.ValueOf<string>(parameters, Context.Request, "componentResourceType", ParameterType.Query);
                return service.ComDayCqWcmDesignimporterParserTaghandlersFactoryTextComponent(Context, post, apply, delete, action, location, propertylist, serviceRanking, tagpattern, componentResourceType);
            };

            Post["/system/console/configMgr/com.day.cq.wcm.designimporter.parser.taghandlers.factory.TitleComponentTagHandlerFactory"] = parameters =>
            {
                var post = Parameters.ValueOf<bool?>(parameters, Context.Request, "post", ParameterType.Query);
                var apply = Parameters.ValueOf<bool?>(parameters, Context.Request, "apply", ParameterType.Query);
                var delete = Parameters.ValueOf<bool?>(parameters, Context.Request, "delete", ParameterType.Query);
                var action = Parameters.ValueOf<string>(parameters, Context.Request, "action", ParameterType.Query);
                var location = Parameters.ValueOf<string>(parameters, Context.Request, "location", ParameterType.Query);
                var propertylist = Parameters.ValueOf<List<string>>(parameters, Context.Request, "propertylist", ParameterType.Query);
                var serviceRanking = Parameters.ValueOf<int?>(parameters, Context.Request, "serviceRanking", ParameterType.Query);
                var tagpattern = Parameters.ValueOf<string>(parameters, Context.Request, "tagpattern", ParameterType.Query);
                var componentResourceType = Parameters.ValueOf<string>(parameters, Context.Request, "componentResourceType", ParameterType.Query);
                return service.ComDayCqWcmDesignimporterParserTaghandlersFactoryTitleComponen(Context, post, apply, delete, action, location, propertylist, serviceRanking, tagpattern, componentResourceType);
            };

            Post["/system/console/configMgr/com.day.cq.wcm.designimporter.parser.taghandlers.factory.TitleTagHandlerFactory"] = parameters =>
            {
                var post = Parameters.ValueOf<bool?>(parameters, Context.Request, "post", ParameterType.Query);
                var apply = Parameters.ValueOf<bool?>(parameters, Context.Request, "apply", ParameterType.Query);
                var delete = Parameters.ValueOf<bool?>(parameters, Context.Request, "delete", ParameterType.Query);
                var action = Parameters.ValueOf<string>(parameters, Context.Request, "action", ParameterType.Query);
                var location = Parameters.ValueOf<string>(parameters, Context.Request, "location", ParameterType.Query);
                var propertylist = Parameters.ValueOf<List<string>>(parameters, Context.Request, "propertylist", ParameterType.Query);
                var serviceRanking = Parameters.ValueOf<int?>(parameters, Context.Request, "serviceRanking", ParameterType.Query);
                var tagpattern = Parameters.ValueOf<string>(parameters, Context.Request, "tagpattern", ParameterType.Query);
                return service.ComDayCqWcmDesignimporterParserTaghandlersFactoryTitleTagHandl(Context, post, apply, delete, action, location, propertylist, serviceRanking, tagpattern);
            };

            Post["/system/console/configMgr/com.day.cq.wcm.foundation.forms.impl.FormChooserServlet"] = parameters =>
            {
                var post = Parameters.ValueOf<bool?>(parameters, Context.Request, "post", ParameterType.Query);
                var apply = Parameters.ValueOf<bool?>(parameters, Context.Request, "apply", ParameterType.Query);
                var delete = Parameters.ValueOf<bool?>(parameters, Context.Request, "delete", ParameterType.Query);
                var action = Parameters.ValueOf<string>(parameters, Context.Request, "action", ParameterType.Query);
                var location = Parameters.ValueOf<string>(parameters, Context.Request, "location", ParameterType.Query);
                var propertylist = Parameters.ValueOf<List<string>>(parameters, Context.Request, "propertylist", ParameterType.Query);
                var serviceName = Parameters.ValueOf<string>(parameters, Context.Request, "serviceName", ParameterType.Query);
                var slingServletResourceTypes = Parameters.ValueOf<string>(parameters, Context.Request, "slingServletResourceTypes", ParameterType.Query);
                var slingServletSelectors = Parameters.ValueOf<string>(parameters, Context.Request, "slingServletSelectors", ParameterType.Query);
                var slingServletMethods = Parameters.ValueOf<List<string>>(parameters, Context.Request, "slingServletMethods", ParameterType.Query);
                var formsFormchooserservletAdvansesearchRequire = Parameters.ValueOf<bool?>(parameters, Context.Request, "formsFormchooserservletAdvansesearchRequire", ParameterType.Query);
                return service.ComDayCqWcmFoundationFormsImplFormChooserServlet(Context, post, apply, delete, action, location, propertylist, serviceName, slingServletResourceTypes, slingServletSelectors, slingServletMethods, formsFormchooserservletAdvansesearchRequire);
            };

            Post["/system/console/configMgr/com.day.cq.wcm.foundation.forms.impl.FormParagraphPostProcessor"] = parameters =>
            {
                var post = Parameters.ValueOf<bool?>(parameters, Context.Request, "post", ParameterType.Query);
                var apply = Parameters.ValueOf<bool?>(parameters, Context.Request, "apply", ParameterType.Query);
                var delete = Parameters.ValueOf<bool?>(parameters, Context.Request, "delete", ParameterType.Query);
                var action = Parameters.ValueOf<string>(parameters, Context.Request, "action", ParameterType.Query);
                var location = Parameters.ValueOf<string>(parameters, Context.Request, "location", ParameterType.Query);
                var propertylist = Parameters.ValueOf<List<string>>(parameters, Context.Request, "propertylist", ParameterType.Query);
                var formsFormparagraphpostprocessorEnabled = Parameters.ValueOf<bool?>(parameters, Context.Request, "formsFormparagraphpostprocessorEnabled", ParameterType.Query);
                var formsFormparagraphpostprocessorFormresourcetypes = Parameters.ValueOf<List<string>>(parameters, Context.Request, "formsFormparagraphpostprocessorFormresourcetypes", ParameterType.Query);
                return service.ComDayCqWcmFoundationFormsImplFormParagraphPostProcessor(Context, post, apply, delete, action, location, propertylist, formsFormparagraphpostprocessorEnabled, formsFormparagraphpostprocessorFormresourcetypes);
            };

            Post["/system/console/configMgr/com.day.cq.wcm.foundation.forms.impl.FormsHandlingServlet"] = parameters =>
            {
                var post = Parameters.ValueOf<bool?>(parameters, Context.Request, "post", ParameterType.Query);
                var apply = Parameters.ValueOf<bool?>(parameters, Context.Request, "apply", ParameterType.Query);
                var delete = Parameters.ValueOf<bool?>(parameters, Context.Request, "delete", ParameterType.Query);
                var action = Parameters.ValueOf<string>(parameters, Context.Request, "action", ParameterType.Query);
                var location = Parameters.ValueOf<string>(parameters, Context.Request, "location", ParameterType.Query);
                var propertylist = Parameters.ValueOf<List<string>>(parameters, Context.Request, "propertylist", ParameterType.Query);
                var nameWhitelist = Parameters.ValueOf<string>(parameters, Context.Request, "nameWhitelist", ParameterType.Query);
                var allowExpressions = Parameters.ValueOf<bool?>(parameters, Context.Request, "allowExpressions", ParameterType.Query);
                return service.ComDayCqWcmFoundationFormsImplFormsHandlingServlet(Context, post, apply, delete, action, location, propertylist, nameWhitelist, allowExpressions);
            };

            Post["/system/console/configMgr/com.day.cq.wcm.foundation.forms.impl.MailServlet"] = parameters =>
            {
                var post = Parameters.ValueOf<bool?>(parameters, Context.Request, "post", ParameterType.Query);
                var apply = Parameters.ValueOf<bool?>(parameters, Context.Request, "apply", ParameterType.Query);
                var delete = Parameters.ValueOf<bool?>(parameters, Context.Request, "delete", ParameterType.Query);
                var action = Parameters.ValueOf<string>(parameters, Context.Request, "action", ParameterType.Query);
                var location = Parameters.ValueOf<string>(parameters, Context.Request, "location", ParameterType.Query);
                var propertylist = Parameters.ValueOf<List<string>>(parameters, Context.Request, "propertylist", ParameterType.Query);
                var slingServletResourceTypes = Parameters.ValueOf<string>(parameters, Context.Request, "slingServletResourceTypes", ParameterType.Query);
                var slingServletSelectors = Parameters.ValueOf<string>(parameters, Context.Request, "slingServletSelectors", ParameterType.Query);
                var resourceWhitelist = Parameters.ValueOf<List<string>>(parameters, Context.Request, "resourceWhitelist", ParameterType.Query);
                var resourceBlacklist = Parameters.ValueOf<string>(parameters, Context.Request, "resourceBlacklist", ParameterType.Query);
                return service.ComDayCqWcmFoundationFormsImplMailServlet(Context, post, apply, delete, action, location, propertylist, slingServletResourceTypes, slingServletSelectors, resourceWhitelist, resourceBlacklist);
            };

            Post["/system/console/configMgr/com.day.cq.wcm.foundation.impl.AdaptiveImageComponentServlet"] = parameters =>
            {
                var post = Parameters.ValueOf<bool?>(parameters, Context.Request, "post", ParameterType.Query);
                var apply = Parameters.ValueOf<bool?>(parameters, Context.Request, "apply", ParameterType.Query);
                var delete = Parameters.ValueOf<bool?>(parameters, Context.Request, "delete", ParameterType.Query);
                var action = Parameters.ValueOf<string>(parameters, Context.Request, "action", ParameterType.Query);
                var location = Parameters.ValueOf<string>(parameters, Context.Request, "location", ParameterType.Query);
                var propertylist = Parameters.ValueOf<List<string>>(parameters, Context.Request, "propertylist", ParameterType.Query);
                var adaptSupportedWidths = Parameters.ValueOf<List<string>>(parameters, Context.Request, "adaptSupportedWidths", ParameterType.Query);
                return service.ComDayCqWcmFoundationImplAdaptiveImageComponentServlet(Context, post, apply, delete, action, location, propertylist, adaptSupportedWidths);
            };

            Post["/system/console/configMgr/com.day.cq.wcm.foundation.impl.HTTPAuthHandler"] = parameters =>
            {
                var post = Parameters.ValueOf<bool?>(parameters, Context.Request, "post", ParameterType.Query);
                var apply = Parameters.ValueOf<bool?>(parameters, Context.Request, "apply", ParameterType.Query);
                var delete = Parameters.ValueOf<bool?>(parameters, Context.Request, "delete", ParameterType.Query);
                var action = Parameters.ValueOf<string>(parameters, Context.Request, "action", ParameterType.Query);
                var location = Parameters.ValueOf<string>(parameters, Context.Request, "location", ParameterType.Query);
                var propertylist = Parameters.ValueOf<List<string>>(parameters, Context.Request, "propertylist", ParameterType.Query);
                var path = Parameters.ValueOf<string>(parameters, Context.Request, "path", ParameterType.Query);
                var authHttpNologin = Parameters.ValueOf<bool?>(parameters, Context.Request, "authHttpNologin", ParameterType.Query);
                var authHttpRealm = Parameters.ValueOf<string>(parameters, Context.Request, "authHttpRealm", ParameterType.Query);
                var authDefaultLoginpage = Parameters.ValueOf<string>(parameters, Context.Request, "authDefaultLoginpage", ParameterType.Query);
                var authCredForm = Parameters.ValueOf<List<string>>(parameters, Context.Request, "authCredForm", ParameterType.Query);
                var authCredUtf8 = Parameters.ValueOf<List<string>>(parameters, Context.Request, "authCredUtf8", ParameterType.Query);
                return service.ComDayCqWcmFoundationImplHTTPAuthHandler(Context, post, apply, delete, action, location, propertylist, path, authHttpNologin, authHttpRealm, authDefaultLoginpage, authCredForm, authCredUtf8);
            };

            Post["/system/console/configMgr/com.day.cq.wcm.foundation.impl.PageImpressionsTracker"] = parameters =>
            {
                var post = Parameters.ValueOf<bool?>(parameters, Context.Request, "post", ParameterType.Query);
                var apply = Parameters.ValueOf<bool?>(parameters, Context.Request, "apply", ParameterType.Query);
                var delete = Parameters.ValueOf<bool?>(parameters, Context.Request, "delete", ParameterType.Query);
                var action = Parameters.ValueOf<string>(parameters, Context.Request, "action", ParameterType.Query);
                var location = Parameters.ValueOf<string>(parameters, Context.Request, "location", ParameterType.Query);
                var propertylist = Parameters.ValueOf<List<string>>(parameters, Context.Request, "propertylist", ParameterType.Query);
                var slingAuthRequirements = Parameters.ValueOf<string>(parameters, Context.Request, "slingAuthRequirements", ParameterType.Query);
                return service.ComDayCqWcmFoundationImplPageImpressionsTracker(Context, post, apply, delete, action, location, propertylist, slingAuthRequirements);
            };

            Post["/system/console/configMgr/com.day.cq.wcm.foundation.impl.PageRedirectServlet"] = parameters =>
            {
                var post = Parameters.ValueOf<bool?>(parameters, Context.Request, "post", ParameterType.Query);
                var apply = Parameters.ValueOf<bool?>(parameters, Context.Request, "apply", ParameterType.Query);
                var delete = Parameters.ValueOf<bool?>(parameters, Context.Request, "delete", ParameterType.Query);
                var action = Parameters.ValueOf<string>(parameters, Context.Request, "action", ParameterType.Query);
                var location = Parameters.ValueOf<string>(parameters, Context.Request, "location", ParameterType.Query);
                var propertylist = Parameters.ValueOf<List<string>>(parameters, Context.Request, "propertylist", ParameterType.Query);
                var excludedResourceTypes = Parameters.ValueOf<List<string>>(parameters, Context.Request, "excludedResourceTypes", ParameterType.Query);
                return service.ComDayCqWcmFoundationImplPageRedirectServlet(Context, post, apply, delete, action, location, propertylist, excludedResourceTypes);
            };

            Post["/system/console/configMgr/com.day.cq.wcm.foundation.security.impl.DefaultAttachmentTypeBlacklistService"] = parameters =>
            {
                var post = Parameters.ValueOf<bool?>(parameters, Context.Request, "post", ParameterType.Query);
                var apply = Parameters.ValueOf<bool?>(parameters, Context.Request, "apply", ParameterType.Query);
                var delete = Parameters.ValueOf<bool?>(parameters, Context.Request, "delete", ParameterType.Query);
                var action = Parameters.ValueOf<string>(parameters, Context.Request, "action", ParameterType.Query);
                var location = Parameters.ValueOf<string>(parameters, Context.Request, "location", ParameterType.Query);
                var propertylist = Parameters.ValueOf<List<string>>(parameters, Context.Request, "propertylist", ParameterType.Query);
                var defaultAttachmentTypeBlacklist = Parameters.ValueOf<List<string>>(parameters, Context.Request, "defaultAttachmentTypeBlacklist", ParameterType.Query);
                var baselineAttachmentTypeBlacklist = Parameters.ValueOf<List<string>>(parameters, Context.Request, "baselineAttachmentTypeBlacklist", ParameterType.Query);
                return service.ComDayCqWcmFoundationSecurityImplDefaultAttachmentTypeBlacklist(Context, post, apply, delete, action, location, propertylist, defaultAttachmentTypeBlacklist, baselineAttachmentTypeBlacklist);
            };

            Post["/system/console/configMgr/com.day.cq.wcm.foundation.security.impl.SaferSlingPostValidatorImpl"] = parameters =>
            {
                var post = Parameters.ValueOf<bool?>(parameters, Context.Request, "post", ParameterType.Query);
                var apply = Parameters.ValueOf<bool?>(parameters, Context.Request, "apply", ParameterType.Query);
                var delete = Parameters.ValueOf<bool?>(parameters, Context.Request, "delete", ParameterType.Query);
                var action = Parameters.ValueOf<string>(parameters, Context.Request, "action", ParameterType.Query);
                var location = Parameters.ValueOf<string>(parameters, Context.Request, "location", ParameterType.Query);
                var propertylist = Parameters.ValueOf<List<string>>(parameters, Context.Request, "propertylist", ParameterType.Query);
                var parameterWhitelist = Parameters.ValueOf<List<string>>(parameters, Context.Request, "parameterWhitelist", ParameterType.Query);
                var parameterWhitelistPrefixes = Parameters.ValueOf<List<string>>(parameters, Context.Request, "parameterWhitelistPrefixes", ParameterType.Query);
                var binaryParameterWhitelist = Parameters.ValueOf<List<string>>(parameters, Context.Request, "binaryParameterWhitelist", ParameterType.Query);
                var modifierWhitelist = Parameters.ValueOf<List<string>>(parameters, Context.Request, "modifierWhitelist", ParameterType.Query);
                var operationWhitelist = Parameters.ValueOf<List<string>>(parameters, Context.Request, "operationWhitelist", ParameterType.Query);
                var operationWhitelistPrefixes = Parameters.ValueOf<List<string>>(parameters, Context.Request, "operationWhitelistPrefixes", ParameterType.Query);
                var typehintWhitelist = Parameters.ValueOf<List<string>>(parameters, Context.Request, "typehintWhitelist", ParameterType.Query);
                var resourcetypeWhitelist = Parameters.ValueOf<List<string>>(parameters, Context.Request, "resourcetypeWhitelist", ParameterType.Query);
                return service.ComDayCqWcmFoundationSecurityImplSaferSlingPostValidatorImpl(Context, post, apply, delete, action, location, propertylist, parameterWhitelist, parameterWhitelistPrefixes, binaryParameterWhitelist, modifierWhitelist, operationWhitelist, operationWhitelistPrefixes, typehintWhitelist, resourcetypeWhitelist);
            };

            Post["/system/console/configMgr/com.day.cq.wcm.mobile.core.impl.device.DeviceInfoTransformerFactory"] = parameters =>
            {
                var post = Parameters.ValueOf<bool?>(parameters, Context.Request, "post", ParameterType.Query);
                var apply = Parameters.ValueOf<bool?>(parameters, Context.Request, "apply", ParameterType.Query);
                var delete = Parameters.ValueOf<bool?>(parameters, Context.Request, "delete", ParameterType.Query);
                var action = Parameters.ValueOf<string>(parameters, Context.Request, "action", ParameterType.Query);
                var location = Parameters.ValueOf<string>(parameters, Context.Request, "location", ParameterType.Query);
                var propertylist = Parameters.ValueOf<List<string>>(parameters, Context.Request, "propertylist", ParameterType.Query);
                var deviceInfoTransformerEnabled = Parameters.ValueOf<bool?>(parameters, Context.Request, "deviceInfoTransformerEnabled", ParameterType.Query);
                var deviceInfoTransformerCssStyle = Parameters.ValueOf<string>(parameters, Context.Request, "deviceInfoTransformerCssStyle", ParameterType.Query);
                return service.ComDayCqWcmMobileCoreImplDeviceDeviceInfoTransformerFactory(Context, post, apply, delete, action, location, propertylist, deviceInfoTransformerEnabled, deviceInfoTransformerCssStyle);
            };

            Post["/system/console/configMgr/com.day.cq.wcm.mobile.core.impl.redirect.RedirectFilter"] = parameters =>
            {
                var post = Parameters.ValueOf<bool?>(parameters, Context.Request, "post", ParameterType.Query);
                var apply = Parameters.ValueOf<bool?>(parameters, Context.Request, "apply", ParameterType.Query);
                var delete = Parameters.ValueOf<bool?>(parameters, Context.Request, "delete", ParameterType.Query);
                var action = Parameters.ValueOf<string>(parameters, Context.Request, "action", ParameterType.Query);
                var location = Parameters.ValueOf<string>(parameters, Context.Request, "location", ParameterType.Query);
                var propertylist = Parameters.ValueOf<List<string>>(parameters, Context.Request, "propertylist", ParameterType.Query);
                var redirectEnabled = Parameters.ValueOf<bool?>(parameters, Context.Request, "redirectEnabled", ParameterType.Query);
                var redirectStatsEnabled = Parameters.ValueOf<bool?>(parameters, Context.Request, "redirectStatsEnabled", ParameterType.Query);
                var redirectExtensions = Parameters.ValueOf<List<string>>(parameters, Context.Request, "redirectExtensions", ParameterType.Query);
                var redirectPaths = Parameters.ValueOf<List<string>>(parameters, Context.Request, "redirectPaths", ParameterType.Query);
                return service.ComDayCqWcmMobileCoreImplRedirectRedirectFilter(Context, post, apply, delete, action, location, propertylist, redirectEnabled, redirectStatsEnabled, redirectExtensions, redirectPaths);
            };

            Post["/system/console/configMgr/com.day.cq.wcm.msm.impl.actions.ContentCopyActionFactory"] = parameters =>
            {
                var post = Parameters.ValueOf<bool?>(parameters, Context.Request, "post", ParameterType.Query);
                var apply = Parameters.ValueOf<bool?>(parameters, Context.Request, "apply", ParameterType.Query);
                var delete = Parameters.ValueOf<bool?>(parameters, Context.Request, "delete", ParameterType.Query);
                var action = Parameters.ValueOf<string>(parameters, Context.Request, "action", ParameterType.Query);
                var location = Parameters.ValueOf<string>(parameters, Context.Request, "location", ParameterType.Query);
                var propertylist = Parameters.ValueOf<List<string>>(parameters, Context.Request, "propertylist", ParameterType.Query);
                var cqWcmMsmActionExcludednodetypes = Parameters.ValueOf<List<string>>(parameters, Context.Request, "cqWcmMsmActionExcludednodetypes", ParameterType.Query);
                var cqWcmMsmActionExcludedparagraphitems = Parameters.ValueOf<List<string>>(parameters, Context.Request, "cqWcmMsmActionExcludedparagraphitems", ParameterType.Query);
                var cqWcmMsmActionExcludedprops = Parameters.ValueOf<List<string>>(parameters, Context.Request, "cqWcmMsmActionExcludedprops", ParameterType.Query);
                var contentcopyactionOrderStyle = Parameters.ValueOf<string>(parameters, Context.Request, "contentcopyactionOrderStyle", ParameterType.Query);
                return service.ComDayCqWcmMsmImplActionsContentCopyActionFactory(Context, post, apply, delete, action, location, propertylist, cqWcmMsmActionExcludednodetypes, cqWcmMsmActionExcludedparagraphitems, cqWcmMsmActionExcludedprops, contentcopyactionOrderStyle);
            };

            Post["/system/console/configMgr/com.day.cq.wcm.msm.impl.actions.ContentDeleteActionFactory"] = parameters =>
            {
                var post = Parameters.ValueOf<bool?>(parameters, Context.Request, "post", ParameterType.Query);
                var apply = Parameters.ValueOf<bool?>(parameters, Context.Request, "apply", ParameterType.Query);
                var delete = Parameters.ValueOf<bool?>(parameters, Context.Request, "delete", ParameterType.Query);
                var action = Parameters.ValueOf<string>(parameters, Context.Request, "action", ParameterType.Query);
                var location = Parameters.ValueOf<string>(parameters, Context.Request, "location", ParameterType.Query);
                var propertylist = Parameters.ValueOf<List<string>>(parameters, Context.Request, "propertylist", ParameterType.Query);
                var cqWcmMsmActionExcludednodetypes = Parameters.ValueOf<List<string>>(parameters, Context.Request, "cqWcmMsmActionExcludednodetypes", ParameterType.Query);
                var cqWcmMsmActionExcludedparagraphitems = Parameters.ValueOf<List<string>>(parameters, Context.Request, "cqWcmMsmActionExcludedparagraphitems", ParameterType.Query);
                var cqWcmMsmActionExcludedprops = Parameters.ValueOf<List<string>>(parameters, Context.Request, "cqWcmMsmActionExcludedprops", ParameterType.Query);
                return service.ComDayCqWcmMsmImplActionsContentDeleteActionFactory(Context, post, apply, delete, action, location, propertylist, cqWcmMsmActionExcludednodetypes, cqWcmMsmActionExcludedparagraphitems, cqWcmMsmActionExcludedprops);
            };

            Post["/system/console/configMgr/com.day.cq.wcm.msm.impl.actions.ContentUpdateActionFactory"] = parameters =>
            {
                var post = Parameters.ValueOf<bool?>(parameters, Context.Request, "post", ParameterType.Query);
                var apply = Parameters.ValueOf<bool?>(parameters, Context.Request, "apply", ParameterType.Query);
                var delete = Parameters.ValueOf<bool?>(parameters, Context.Request, "delete", ParameterType.Query);
                var action = Parameters.ValueOf<string>(parameters, Context.Request, "action", ParameterType.Query);
                var location = Parameters.ValueOf<string>(parameters, Context.Request, "location", ParameterType.Query);
                var propertylist = Parameters.ValueOf<List<string>>(parameters, Context.Request, "propertylist", ParameterType.Query);
                var cqWcmMsmActionExcludednodetypes = Parameters.ValueOf<List<string>>(parameters, Context.Request, "cqWcmMsmActionExcludednodetypes", ParameterType.Query);
                var cqWcmMsmActionExcludedparagraphitems = Parameters.ValueOf<List<string>>(parameters, Context.Request, "cqWcmMsmActionExcludedparagraphitems", ParameterType.Query);
                var cqWcmMsmActionExcludedprops = Parameters.ValueOf<List<string>>(parameters, Context.Request, "cqWcmMsmActionExcludedprops", ParameterType.Query);
                var cqWcmMsmActionIgnoredMixin = Parameters.ValueOf<List<string>>(parameters, Context.Request, "cqWcmMsmActionIgnoredMixin", ParameterType.Query);
                return service.ComDayCqWcmMsmImplActionsContentUpdateActionFactory(Context, post, apply, delete, action, location, propertylist, cqWcmMsmActionExcludednodetypes, cqWcmMsmActionExcludedparagraphitems, cqWcmMsmActionExcludedprops, cqWcmMsmActionIgnoredMixin);
            };

            Post["/system/console/configMgr/com.day.cq.wcm.msm.impl.actions.OrderChildrenActionFactory"] = parameters =>
            {
                var post = Parameters.ValueOf<bool?>(parameters, Context.Request, "post", ParameterType.Query);
                var apply = Parameters.ValueOf<bool?>(parameters, Context.Request, "apply", ParameterType.Query);
                var delete = Parameters.ValueOf<bool?>(parameters, Context.Request, "delete", ParameterType.Query);
                var action = Parameters.ValueOf<string>(parameters, Context.Request, "action", ParameterType.Query);
                var location = Parameters.ValueOf<string>(parameters, Context.Request, "location", ParameterType.Query);
                var propertylist = Parameters.ValueOf<List<string>>(parameters, Context.Request, "propertylist", ParameterType.Query);
                var cqWcmMsmActionExcludednodetypes = Parameters.ValueOf<List<string>>(parameters, Context.Request, "cqWcmMsmActionExcludednodetypes", ParameterType.Query);
                var cqWcmMsmActionExcludedparagraphitems = Parameters.ValueOf<List<string>>(parameters, Context.Request, "cqWcmMsmActionExcludedparagraphitems", ParameterType.Query);
                var cqWcmMsmActionExcludedprops = Parameters.ValueOf<List<string>>(parameters, Context.Request, "cqWcmMsmActionExcludedprops", ParameterType.Query);
                return service.ComDayCqWcmMsmImplActionsOrderChildrenActionFactory(Context, post, apply, delete, action, location, propertylist, cqWcmMsmActionExcludednodetypes, cqWcmMsmActionExcludedparagraphitems, cqWcmMsmActionExcludedprops);
            };

            Post["/system/console/configMgr/com.day.cq.wcm.msm.impl.actions.PageMoveActionFactory"] = parameters =>
            {
                var post = Parameters.ValueOf<bool?>(parameters, Context.Request, "post", ParameterType.Query);
                var apply = Parameters.ValueOf<bool?>(parameters, Context.Request, "apply", ParameterType.Query);
                var delete = Parameters.ValueOf<bool?>(parameters, Context.Request, "delete", ParameterType.Query);
                var action = Parameters.ValueOf<string>(parameters, Context.Request, "action", ParameterType.Query);
                var location = Parameters.ValueOf<string>(parameters, Context.Request, "location", ParameterType.Query);
                var propertylist = Parameters.ValueOf<List<string>>(parameters, Context.Request, "propertylist", ParameterType.Query);
                var cqWcmMsmActionExcludednodetypes = Parameters.ValueOf<List<string>>(parameters, Context.Request, "cqWcmMsmActionExcludednodetypes", ParameterType.Query);
                var cqWcmMsmActionExcludedparagraphitems = Parameters.ValueOf<List<string>>(parameters, Context.Request, "cqWcmMsmActionExcludedparagraphitems", ParameterType.Query);
                var cqWcmMsmActionExcludedprops = Parameters.ValueOf<List<string>>(parameters, Context.Request, "cqWcmMsmActionExcludedprops", ParameterType.Query);
                var cqWcmMsmImplActionsPagemovePropReferenceUpdate = Parameters.ValueOf<bool?>(parameters, Context.Request, "cqWcmMsmImplActionsPagemovePropReferenceUpdate", ParameterType.Query);
                return service.ComDayCqWcmMsmImplActionsPageMoveActionFactory(Context, post, apply, delete, action, location, propertylist, cqWcmMsmActionExcludednodetypes, cqWcmMsmActionExcludedparagraphitems, cqWcmMsmActionExcludedprops, cqWcmMsmImplActionsPagemovePropReferenceUpdate);
            };

            Post["/system/console/configMgr/com.day.cq.wcm.msm.impl.actions.ReferencesUpdateActionFactory"] = parameters =>
            {
                var post = Parameters.ValueOf<bool?>(parameters, Context.Request, "post", ParameterType.Query);
                var apply = Parameters.ValueOf<bool?>(parameters, Context.Request, "apply", ParameterType.Query);
                var delete = Parameters.ValueOf<bool?>(parameters, Context.Request, "delete", ParameterType.Query);
                var action = Parameters.ValueOf<string>(parameters, Context.Request, "action", ParameterType.Query);
                var location = Parameters.ValueOf<string>(parameters, Context.Request, "location", ParameterType.Query);
                var propertylist = Parameters.ValueOf<List<string>>(parameters, Context.Request, "propertylist", ParameterType.Query);
                var cqWcmMsmActionExcludednodetypes = Parameters.ValueOf<List<string>>(parameters, Context.Request, "cqWcmMsmActionExcludednodetypes", ParameterType.Query);
                var cqWcmMsmActionExcludedparagraphitems = Parameters.ValueOf<List<string>>(parameters, Context.Request, "cqWcmMsmActionExcludedparagraphitems", ParameterType.Query);
                var cqWcmMsmActionExcludedprops = Parameters.ValueOf<List<string>>(parameters, Context.Request, "cqWcmMsmActionExcludedprops", ParameterType.Query);
                var cqWcmMsmImplActionReferencesupdatePropUpdateNested = Parameters.ValueOf<bool?>(parameters, Context.Request, "cqWcmMsmImplActionReferencesupdatePropUpdateNested", ParameterType.Query);
                return service.ComDayCqWcmMsmImplActionsReferencesUpdateActionFactory(Context, post, apply, delete, action, location, propertylist, cqWcmMsmActionExcludednodetypes, cqWcmMsmActionExcludedparagraphitems, cqWcmMsmActionExcludedprops, cqWcmMsmImplActionReferencesupdatePropUpdateNested);
            };

            Post["/system/console/configMgr/com.day.cq.wcm.msm.impl.actions.VersionCopyActionFactory"] = parameters =>
            {
                var post = Parameters.ValueOf<bool?>(parameters, Context.Request, "post", ParameterType.Query);
                var apply = Parameters.ValueOf<bool?>(parameters, Context.Request, "apply", ParameterType.Query);
                var delete = Parameters.ValueOf<bool?>(parameters, Context.Request, "delete", ParameterType.Query);
                var action = Parameters.ValueOf<string>(parameters, Context.Request, "action", ParameterType.Query);
                var location = Parameters.ValueOf<string>(parameters, Context.Request, "location", ParameterType.Query);
                var propertylist = Parameters.ValueOf<List<string>>(parameters, Context.Request, "propertylist", ParameterType.Query);
                var cqWcmMsmActionExcludednodetypes = Parameters.ValueOf<List<string>>(parameters, Context.Request, "cqWcmMsmActionExcludednodetypes", ParameterType.Query);
                var cqWcmMsmActionExcludedparagraphitems = Parameters.ValueOf<List<string>>(parameters, Context.Request, "cqWcmMsmActionExcludedparagraphitems", ParameterType.Query);
                var cqWcmMsmActionExcludedprops = Parameters.ValueOf<List<string>>(parameters, Context.Request, "cqWcmMsmActionExcludedprops", ParameterType.Query);
                return service.ComDayCqWcmMsmImplActionsVersionCopyActionFactory(Context, post, apply, delete, action, location, propertylist, cqWcmMsmActionExcludednodetypes, cqWcmMsmActionExcludedparagraphitems, cqWcmMsmActionExcludedprops);
            };

            Post["/system/console/configMgr/com.day.cq.wcm.msm.impl.LiveRelationshipManagerImpl"] = parameters =>
            {
                var post = Parameters.ValueOf<bool?>(parameters, Context.Request, "post", ParameterType.Query);
                var apply = Parameters.ValueOf<bool?>(parameters, Context.Request, "apply", ParameterType.Query);
                var delete = Parameters.ValueOf<bool?>(parameters, Context.Request, "delete", ParameterType.Query);
                var action = Parameters.ValueOf<string>(parameters, Context.Request, "action", ParameterType.Query);
                var location = Parameters.ValueOf<string>(parameters, Context.Request, "location", ParameterType.Query);
                var propertylist = Parameters.ValueOf<List<string>>(parameters, Context.Request, "propertylist", ParameterType.Query);
                var liverelationshipmgrRelationsconfigDefault = Parameters.ValueOf<string>(parameters, Context.Request, "liverelationshipmgrRelationsconfigDefault", ParameterType.Query);
                return service.ComDayCqWcmMsmImplLiveRelationshipManagerImpl(Context, post, apply, delete, action, location, propertylist, liverelationshipmgrRelationsconfigDefault);
            };

            Post["/system/console/configMgr/com.day.cq.wcm.msm.impl.RolloutManagerImpl"] = parameters =>
            {
                var post = Parameters.ValueOf<bool?>(parameters, Context.Request, "post", ParameterType.Query);
                var apply = Parameters.ValueOf<bool?>(parameters, Context.Request, "apply", ParameterType.Query);
                var delete = Parameters.ValueOf<bool?>(parameters, Context.Request, "delete", ParameterType.Query);
                var action = Parameters.ValueOf<string>(parameters, Context.Request, "action", ParameterType.Query);
                var location = Parameters.ValueOf<string>(parameters, Context.Request, "location", ParameterType.Query);
                var propertylist = Parameters.ValueOf<List<string>>(parameters, Context.Request, "propertylist", ParameterType.Query);
                var eventFilter = Parameters.ValueOf<string>(parameters, Context.Request, "eventFilter", ParameterType.Query);
                var rolloutmgrExcludedpropsDefault = Parameters.ValueOf<List<string>>(parameters, Context.Request, "rolloutmgrExcludedpropsDefault", ParameterType.Query);
                var rolloutmgrExcludedparagraphpropsDefault = Parameters.ValueOf<List<string>>(parameters, Context.Request, "rolloutmgrExcludedparagraphpropsDefault", ParameterType.Query);
                var rolloutmgrExcludednodetypesDefault = Parameters.ValueOf<List<string>>(parameters, Context.Request, "rolloutmgrExcludednodetypesDefault", ParameterType.Query);
                var rolloutmgrThreadpoolMaxsize = Parameters.ValueOf<int?>(parameters, Context.Request, "rolloutmgrThreadpoolMaxsize", ParameterType.Query);
                var rolloutmgrThreadpoolMaxshutdowntime = Parameters.ValueOf<int?>(parameters, Context.Request, "rolloutmgrThreadpoolMaxshutdowntime", ParameterType.Query);
                var rolloutmgrThreadpoolPriority = Parameters.ValueOf<string>(parameters, Context.Request, "rolloutmgrThreadpoolPriority", ParameterType.Query);
                var rolloutmgrCommitSize = Parameters.ValueOf<int?>(parameters, Context.Request, "rolloutmgrCommitSize", ParameterType.Query);
                var rolloutmgrConflicthandlingEnabled = Parameters.ValueOf<bool?>(parameters, Context.Request, "rolloutmgrConflicthandlingEnabled", ParameterType.Query);
                return service.ComDayCqWcmMsmImplRolloutManagerImpl(Context, post, apply, delete, action, location, propertylist, eventFilter, rolloutmgrExcludedpropsDefault, rolloutmgrExcludedparagraphpropsDefault, rolloutmgrExcludednodetypesDefault, rolloutmgrThreadpoolMaxsize, rolloutmgrThreadpoolMaxshutdowntime, rolloutmgrThreadpoolPriority, rolloutmgrCommitSize, rolloutmgrConflicthandlingEnabled);
            };

            Post["/system/console/configMgr/com.day.cq.wcm.msm.impl.servlets.AuditLogServlet"] = parameters =>
            {
                var post = Parameters.ValueOf<bool?>(parameters, Context.Request, "post", ParameterType.Query);
                var apply = Parameters.ValueOf<bool?>(parameters, Context.Request, "apply", ParameterType.Query);
                var delete = Parameters.ValueOf<bool?>(parameters, Context.Request, "delete", ParameterType.Query);
                var action = Parameters.ValueOf<string>(parameters, Context.Request, "action", ParameterType.Query);
                var location = Parameters.ValueOf<string>(parameters, Context.Request, "location", ParameterType.Query);
                var propertylist = Parameters.ValueOf<List<string>>(parameters, Context.Request, "propertylist", ParameterType.Query);
                var auditlogservletDefaultEventsCount = Parameters.ValueOf<int?>(parameters, Context.Request, "auditlogservletDefaultEventsCount", ParameterType.Query);
                var auditlogservletDefaultPath = Parameters.ValueOf<string>(parameters, Context.Request, "auditlogservletDefaultPath", ParameterType.Query);
                return service.ComDayCqWcmMsmImplServletsAuditLogServlet(Context, post, apply, delete, action, location, propertylist, auditlogservletDefaultEventsCount, auditlogservletDefaultPath);
            };

            Post["/system/console/configMgr/com.day.cq.wcm.notification.email.impl.EmailChannel"] = parameters =>
            {
                var post = Parameters.ValueOf<bool?>(parameters, Context.Request, "post", ParameterType.Query);
                var apply = Parameters.ValueOf<bool?>(parameters, Context.Request, "apply", ParameterType.Query);
                var delete = Parameters.ValueOf<bool?>(parameters, Context.Request, "delete", ParameterType.Query);
                var action = Parameters.ValueOf<string>(parameters, Context.Request, "action", ParameterType.Query);
                var location = Parameters.ValueOf<string>(parameters, Context.Request, "location", ParameterType.Query);
                var propertylist = Parameters.ValueOf<List<string>>(parameters, Context.Request, "propertylist", ParameterType.Query);
                var emailFrom = Parameters.ValueOf<string>(parameters, Context.Request, "emailFrom", ParameterType.Query);
                return service.ComDayCqWcmNotificationEmailImplEmailChannel(Context, post, apply, delete, action, location, propertylist, emailFrom);
            };

            Post["/system/console/configMgr/com.day.cq.wcm.notification.impl.NotificationManagerImpl"] = parameters =>
            {
                var post = Parameters.ValueOf<bool?>(parameters, Context.Request, "post", ParameterType.Query);
                var apply = Parameters.ValueOf<bool?>(parameters, Context.Request, "apply", ParameterType.Query);
                var delete = Parameters.ValueOf<bool?>(parameters, Context.Request, "delete", ParameterType.Query);
                var action = Parameters.ValueOf<string>(parameters, Context.Request, "action", ParameterType.Query);
                var location = Parameters.ValueOf<string>(parameters, Context.Request, "location", ParameterType.Query);
                var propertylist = Parameters.ValueOf<List<string>>(parameters, Context.Request, "propertylist", ParameterType.Query);
                var eventTopics = Parameters.ValueOf<List<string>>(parameters, Context.Request, "eventTopics", ParameterType.Query);
                return service.ComDayCqWcmNotificationImplNotificationManagerImpl(Context, post, apply, delete, action, location, propertylist, eventTopics);
            };

            Post["/system/console/configMgr/com.day.cq.wcm.scripting.impl.BVPManager"] = parameters =>
            {
                var post = Parameters.ValueOf<bool?>(parameters, Context.Request, "post", ParameterType.Query);
                var apply = Parameters.ValueOf<bool?>(parameters, Context.Request, "apply", ParameterType.Query);
                var delete = Parameters.ValueOf<bool?>(parameters, Context.Request, "delete", ParameterType.Query);
                var action = Parameters.ValueOf<string>(parameters, Context.Request, "action", ParameterType.Query);
                var location = Parameters.ValueOf<string>(parameters, Context.Request, "location", ParameterType.Query);
                var propertylist = Parameters.ValueOf<List<string>>(parameters, Context.Request, "propertylist", ParameterType.Query);
                var comDayCqWcmScriptingBvpScriptEngines = Parameters.ValueOf<List<string>>(parameters, Context.Request, "comDayCqWcmScriptingBvpScriptEngines", ParameterType.Query);
                return service.ComDayCqWcmScriptingImplBVPManager(Context, post, apply, delete, action, location, propertylist, comDayCqWcmScriptingBvpScriptEngines);
            };

            Post["/system/console/configMgr/com.day.cq.wcm.undo.UndoConfig"] = parameters =>
            {
                var post = Parameters.ValueOf<bool?>(parameters, Context.Request, "post", ParameterType.Query);
                var apply = Parameters.ValueOf<bool?>(parameters, Context.Request, "apply", ParameterType.Query);
                var delete = Parameters.ValueOf<bool?>(parameters, Context.Request, "delete", ParameterType.Query);
                var action = Parameters.ValueOf<string>(parameters, Context.Request, "action", ParameterType.Query);
                var location = Parameters.ValueOf<string>(parameters, Context.Request, "location", ParameterType.Query);
                var propertylist = Parameters.ValueOf<List<string>>(parameters, Context.Request, "propertylist", ParameterType.Query);
                var cqWcmUndoEnabled = Parameters.ValueOf<bool?>(parameters, Context.Request, "cqWcmUndoEnabled", ParameterType.Query);
                var cqWcmUndoPath = Parameters.ValueOf<string>(parameters, Context.Request, "cqWcmUndoPath", ParameterType.Query);
                var cqWcmUndoValidity = Parameters.ValueOf<int?>(parameters, Context.Request, "cqWcmUndoValidity", ParameterType.Query);
                var cqWcmUndoSteps = Parameters.ValueOf<int?>(parameters, Context.Request, "cqWcmUndoSteps", ParameterType.Query);
                var cqWcmUndoPersistence = Parameters.ValueOf<string>(parameters, Context.Request, "cqWcmUndoPersistence", ParameterType.Query);
                var cqWcmUndoPersistenceMode = Parameters.ValueOf<bool?>(parameters, Context.Request, "cqWcmUndoPersistenceMode", ParameterType.Query);
                var cqWcmUndoMarkermode = Parameters.ValueOf<string>(parameters, Context.Request, "cqWcmUndoMarkermode", ParameterType.Query);
                var cqWcmUndoWhitelist = Parameters.ValueOf<List<string>>(parameters, Context.Request, "cqWcmUndoWhitelist", ParameterType.Query);
                var cqWcmUndoBlacklist = Parameters.ValueOf<List<string>>(parameters, Context.Request, "cqWcmUndoBlacklist", ParameterType.Query);
                return service.ComDayCqWcmUndoUndoConfig(Context, post, apply, delete, action, location, propertylist, cqWcmUndoEnabled, cqWcmUndoPath, cqWcmUndoValidity, cqWcmUndoSteps, cqWcmUndoPersistence, cqWcmUndoPersistenceMode, cqWcmUndoMarkermode, cqWcmUndoWhitelist, cqWcmUndoBlacklist);
            };

            Post["/system/console/configMgr/com.day.cq.wcm.webservicesupport.impl.ReplicationEventListener"] = parameters =>
            {
                var post = Parameters.ValueOf<bool?>(parameters, Context.Request, "post", ParameterType.Query);
                var apply = Parameters.ValueOf<bool?>(parameters, Context.Request, "apply", ParameterType.Query);
                var delete = Parameters.ValueOf<bool?>(parameters, Context.Request, "delete", ParameterType.Query);
                var action = Parameters.ValueOf<string>(parameters, Context.Request, "action", ParameterType.Query);
                var location = Parameters.ValueOf<string>(parameters, Context.Request, "location", ParameterType.Query);
                var propertylist = Parameters.ValueOf<List<string>>(parameters, Context.Request, "propertylist", ParameterType.Query);
                var flushAgents = Parameters.ValueOf<List<string>>(parameters, Context.Request, "flushAgents", ParameterType.Query);
                return service.ComDayCqWcmWebservicesupportImplReplicationEventListener(Context, post, apply, delete, action, location, propertylist, flushAgents);
            };

            Post["/system/console/configMgr/com.day.cq.wcm.workflow.impl.WcmWorkflowServiceImpl"] = parameters =>
            {
                var post = Parameters.ValueOf<bool?>(parameters, Context.Request, "post", ParameterType.Query);
                var apply = Parameters.ValueOf<bool?>(parameters, Context.Request, "apply", ParameterType.Query);
                var delete = Parameters.ValueOf<bool?>(parameters, Context.Request, "delete", ParameterType.Query);
                var action = Parameters.ValueOf<string>(parameters, Context.Request, "action", ParameterType.Query);
                var location = Parameters.ValueOf<string>(parameters, Context.Request, "location", ParameterType.Query);
                var propertylist = Parameters.ValueOf<List<string>>(parameters, Context.Request, "propertylist", ParameterType.Query);
                var eventFilter = Parameters.ValueOf<string>(parameters, Context.Request, "eventFilter", ParameterType.Query);
                var minThreadPoolSize = Parameters.ValueOf<int?>(parameters, Context.Request, "minThreadPoolSize", ParameterType.Query);
                var maxThreadPoolSize = Parameters.ValueOf<int?>(parameters, Context.Request, "maxThreadPoolSize", ParameterType.Query);
                var cqWcmWorkflowTerminateOnActivate = Parameters.ValueOf<bool?>(parameters, Context.Request, "cqWcmWorkflowTerminateOnActivate", ParameterType.Query);
                var cqWcmWorklfowTerminateExclusionList = Parameters.ValueOf<List<string>>(parameters, Context.Request, "cqWcmWorklfowTerminateExclusionList", ParameterType.Query);
                return service.ComDayCqWcmWorkflowImplWcmWorkflowServiceImpl(Context, post, apply, delete, action, location, propertylist, eventFilter, minThreadPoolSize, maxThreadPoolSize, cqWcmWorkflowTerminateOnActivate, cqWcmWorklfowTerminateExclusionList);
            };

            Post["/system/console/configMgr/com.day.cq.wcm.workflow.impl.WorkflowPackageInfoProvider"] = parameters =>
            {
                var post = Parameters.ValueOf<bool?>(parameters, Context.Request, "post", ParameterType.Query);
                var apply = Parameters.ValueOf<bool?>(parameters, Context.Request, "apply", ParameterType.Query);
                var delete = Parameters.ValueOf<bool?>(parameters, Context.Request, "delete", ParameterType.Query);
                var action = Parameters.ValueOf<string>(parameters, Context.Request, "action", ParameterType.Query);
                var location = Parameters.ValueOf<string>(parameters, Context.Request, "location", ParameterType.Query);
                var propertylist = Parameters.ValueOf<List<string>>(parameters, Context.Request, "propertylist", ParameterType.Query);
                var workflowpackageinfoproviderFilter = Parameters.ValueOf<List<string>>(parameters, Context.Request, "workflowpackageinfoproviderFilter", ParameterType.Query);
                var workflowpackageinfoproviderFilterRootpath = Parameters.ValueOf<string>(parameters, Context.Request, "workflowpackageinfoproviderFilterRootpath", ParameterType.Query);
                return service.ComDayCqWcmWorkflowImplWorkflowPackageInfoProvider(Context, post, apply, delete, action, location, propertylist, workflowpackageinfoproviderFilter, workflowpackageinfoproviderFilterRootpath);
            };

            Post["/system/console/configMgr/com.day.cq.widget.impl.HtmlLibraryManagerImpl"] = parameters =>
            {
                var post = Parameters.ValueOf<bool?>(parameters, Context.Request, "post", ParameterType.Query);
                var apply = Parameters.ValueOf<bool?>(parameters, Context.Request, "apply", ParameterType.Query);
                var delete = Parameters.ValueOf<bool?>(parameters, Context.Request, "delete", ParameterType.Query);
                var action = Parameters.ValueOf<string>(parameters, Context.Request, "action", ParameterType.Query);
                var location = Parameters.ValueOf<string>(parameters, Context.Request, "location", ParameterType.Query);
                var propertylist = Parameters.ValueOf<List<string>>(parameters, Context.Request, "propertylist", ParameterType.Query);
                var htmllibmanagerClientmanager = Parameters.ValueOf<string>(parameters, Context.Request, "htmllibmanagerClientmanager", ParameterType.Query);
                var htmllibmanagerDebug = Parameters.ValueOf<bool?>(parameters, Context.Request, "htmllibmanagerDebug", ParameterType.Query);
                var htmllibmanagerDebugConsole = Parameters.ValueOf<bool?>(parameters, Context.Request, "htmllibmanagerDebugConsole", ParameterType.Query);
                var htmllibmanagerDebugInitJs = Parameters.ValueOf<string>(parameters, Context.Request, "htmllibmanagerDebugInitJs", ParameterType.Query);
                var htmllibmanagerDefaultthemename = Parameters.ValueOf<string>(parameters, Context.Request, "htmllibmanagerDefaultthemename", ParameterType.Query);
                var htmllibmanagerDefaultuserthemename = Parameters.ValueOf<string>(parameters, Context.Request, "htmllibmanagerDefaultuserthemename", ParameterType.Query);
                var htmllibmanagerFirebuglitePath = Parameters.ValueOf<string>(parameters, Context.Request, "htmllibmanagerFirebuglitePath", ParameterType.Query);
                var htmllibmanagerForceCQUrlInfo = Parameters.ValueOf<bool?>(parameters, Context.Request, "htmllibmanagerForceCQUrlInfo", ParameterType.Query);
                var htmllibmanagerGzip = Parameters.ValueOf<bool?>(parameters, Context.Request, "htmllibmanagerGzip", ParameterType.Query);
                var htmllibmanagerMaxage = Parameters.ValueOf<int?>(parameters, Context.Request, "htmllibmanagerMaxage", ParameterType.Query);
                var htmllibmanagerMaxDataUriSize = Parameters.ValueOf<int?>(parameters, Context.Request, "htmllibmanagerMaxDataUriSize", ParameterType.Query);
                var htmllibmanagerMinify = Parameters.ValueOf<bool?>(parameters, Context.Request, "htmllibmanagerMinify", ParameterType.Query);
                var htmllibmanagerPathList = Parameters.ValueOf<List<string>>(parameters, Context.Request, "htmllibmanagerPathList", ParameterType.Query);
                var htmllibmanagerTiming = Parameters.ValueOf<bool?>(parameters, Context.Request, "htmllibmanagerTiming", ParameterType.Query);
                return service.ComDayCqWidgetImplHtmlLibraryManagerImpl(Context, post, apply, delete, action, location, propertylist, htmllibmanagerClientmanager, htmllibmanagerDebug, htmllibmanagerDebugConsole, htmllibmanagerDebugInitJs, htmllibmanagerDefaultthemename, htmllibmanagerDefaultuserthemename, htmllibmanagerFirebuglitePath, htmllibmanagerForceCQUrlInfo, htmllibmanagerGzip, htmllibmanagerMaxage, htmllibmanagerMaxDataUriSize, htmllibmanagerMinify, htmllibmanagerPathList, htmllibmanagerTiming);
            };

            Post["/system/console/configMgr/com.day.cq.widget.impl.WidgetExtensionProviderImpl"] = parameters =>
            {
                var post = Parameters.ValueOf<bool?>(parameters, Context.Request, "post", ParameterType.Query);
                var apply = Parameters.ValueOf<bool?>(parameters, Context.Request, "apply", ParameterType.Query);
                var delete = Parameters.ValueOf<bool?>(parameters, Context.Request, "delete", ParameterType.Query);
                var action = Parameters.ValueOf<string>(parameters, Context.Request, "action", ParameterType.Query);
                var location = Parameters.ValueOf<string>(parameters, Context.Request, "location", ParameterType.Query);
                var propertylist = Parameters.ValueOf<List<string>>(parameters, Context.Request, "propertylist", ParameterType.Query);
                var extendableWidgets = Parameters.ValueOf<List<string>>(parameters, Context.Request, "extendableWidgets", ParameterType.Query);
                var widgetextensionproviderDebug = Parameters.ValueOf<bool?>(parameters, Context.Request, "widgetextensionproviderDebug", ParameterType.Query);
                return service.ComDayCqWidgetImplWidgetExtensionProviderImpl(Context, post, apply, delete, action, location, propertylist, extendableWidgets, widgetextensionproviderDebug);
            };

            Post["/system/console/configMgr/com.day.cq.workflow.impl.email.EMailNotificationService"] = parameters =>
            {
                var post = Parameters.ValueOf<bool?>(parameters, Context.Request, "post", ParameterType.Query);
                var apply = Parameters.ValueOf<bool?>(parameters, Context.Request, "apply", ParameterType.Query);
                var delete = Parameters.ValueOf<bool?>(parameters, Context.Request, "delete", ParameterType.Query);
                var action = Parameters.ValueOf<string>(parameters, Context.Request, "action", ParameterType.Query);
                var location = Parameters.ValueOf<string>(parameters, Context.Request, "location", ParameterType.Query);
                var propertylist = Parameters.ValueOf<List<string>>(parameters, Context.Request, "propertylist", ParameterType.Query);
                var fromAddress = Parameters.ValueOf<string>(parameters, Context.Request, "fromAddress", ParameterType.Query);
                var hostPrefix = Parameters.ValueOf<string>(parameters, Context.Request, "hostPrefix", ParameterType.Query);
                var notifyOnabort = Parameters.ValueOf<bool?>(parameters, Context.Request, "notifyOnabort", ParameterType.Query);
                var notifyOncomplete = Parameters.ValueOf<bool?>(parameters, Context.Request, "notifyOncomplete", ParameterType.Query);
                var notifyOncontainercomplete = Parameters.ValueOf<bool?>(parameters, Context.Request, "notifyOncontainercomplete", ParameterType.Query);
                var notifyUseronly = Parameters.ValueOf<bool?>(parameters, Context.Request, "notifyUseronly", ParameterType.Query);
                return service.ComDayCqWorkflowImplEmailEMailNotificationService(Context, post, apply, delete, action, location, propertylist, fromAddress, hostPrefix, notifyOnabort, notifyOncomplete, notifyOncontainercomplete, notifyUseronly);
            };

            Post["/system/console/configMgr/com.day.cq.workflow.impl.email.TaskEMailNotificationService"] = parameters =>
            {
                var post = Parameters.ValueOf<bool?>(parameters, Context.Request, "post", ParameterType.Query);
                var apply = Parameters.ValueOf<bool?>(parameters, Context.Request, "apply", ParameterType.Query);
                var delete = Parameters.ValueOf<bool?>(parameters, Context.Request, "delete", ParameterType.Query);
                var action = Parameters.ValueOf<string>(parameters, Context.Request, "action", ParameterType.Query);
                var location = Parameters.ValueOf<string>(parameters, Context.Request, "location", ParameterType.Query);
                var propertylist = Parameters.ValueOf<List<string>>(parameters, Context.Request, "propertylist", ParameterType.Query);
                var notifyOnupdate = Parameters.ValueOf<bool?>(parameters, Context.Request, "notifyOnupdate", ParameterType.Query);
                var notifyOncomplete = Parameters.ValueOf<bool?>(parameters, Context.Request, "notifyOncomplete", ParameterType.Query);
                return service.ComDayCqWorkflowImplEmailTaskEMailNotificationService(Context, post, apply, delete, action, location, propertylist, notifyOnupdate, notifyOncomplete);
            };

            Post["/system/console/configMgr/com.day.crx.security.token.impl.impl.TokenAuthenticationHandler"] = parameters =>
            {
                var post = Parameters.ValueOf<bool?>(parameters, Context.Request, "post", ParameterType.Query);
                var apply = Parameters.ValueOf<bool?>(parameters, Context.Request, "apply", ParameterType.Query);
                var delete = Parameters.ValueOf<bool?>(parameters, Context.Request, "delete", ParameterType.Query);
                var action = Parameters.ValueOf<string>(parameters, Context.Request, "action", ParameterType.Query);
                var location = Parameters.ValueOf<string>(parameters, Context.Request, "location", ParameterType.Query);
                var propertylist = Parameters.ValueOf<List<string>>(parameters, Context.Request, "propertylist", ParameterType.Query);
                var path = Parameters.ValueOf<string>(parameters, Context.Request, "path", ParameterType.Query);
                var tokenRequiredAttr = Parameters.ValueOf<string>(parameters, Context.Request, "tokenRequiredAttr", ParameterType.Query);
                var tokenAlternateUrl = Parameters.ValueOf<string>(parameters, Context.Request, "tokenAlternateUrl", ParameterType.Query);
                var tokenEncapsulated = Parameters.ValueOf<bool?>(parameters, Context.Request, "tokenEncapsulated", ParameterType.Query);
                var skipTokenRefresh = Parameters.ValueOf<List<string>>(parameters, Context.Request, "skipTokenRefresh", ParameterType.Query);
                return service.ComDayCrxSecurityTokenImplImplTokenAuthenticationHandler(Context, post, apply, delete, action, location, propertylist, path, tokenRequiredAttr, tokenAlternateUrl, tokenEncapsulated, skipTokenRefresh);
            };

            Post["/system/console/configMgr/com.day.crx.security.token.impl.TokenCleanupTask"] = parameters =>
            {
                var post = Parameters.ValueOf<bool?>(parameters, Context.Request, "post", ParameterType.Query);
                var apply = Parameters.ValueOf<bool?>(parameters, Context.Request, "apply", ParameterType.Query);
                var delete = Parameters.ValueOf<bool?>(parameters, Context.Request, "delete", ParameterType.Query);
                var action = Parameters.ValueOf<string>(parameters, Context.Request, "action", ParameterType.Query);
                var location = Parameters.ValueOf<string>(parameters, Context.Request, "location", ParameterType.Query);
                var propertylist = Parameters.ValueOf<List<string>>(parameters, Context.Request, "propertylist", ParameterType.Query);
                var enableTokenCleanupTask = Parameters.ValueOf<bool?>(parameters, Context.Request, "enableTokenCleanupTask", ParameterType.Query);
                var schedulerExpression = Parameters.ValueOf<string>(parameters, Context.Request, "schedulerExpression", ParameterType.Query);
                var batchSize = Parameters.ValueOf<int?>(parameters, Context.Request, "batchSize", ParameterType.Query);
                return service.ComDayCrxSecurityTokenImplTokenCleanupTask(Context, post, apply, delete, action, location, propertylist, enableTokenCleanupTask, schedulerExpression, batchSize);
            };

            Post["/system/console/configMgr/Guide Localization Service"] = parameters =>
            {
                var post = Parameters.ValueOf<bool?>(parameters, Context.Request, "post", ParameterType.Query);
                var apply = Parameters.ValueOf<bool?>(parameters, Context.Request, "apply", ParameterType.Query);
                var delete = Parameters.ValueOf<bool?>(parameters, Context.Request, "delete", ParameterType.Query);
                var action = Parameters.ValueOf<string>(parameters, Context.Request, "action", ParameterType.Query);
                var location = Parameters.ValueOf<string>(parameters, Context.Request, "location", ParameterType.Query);
                var propertylist = Parameters.ValueOf<List<string>>(parameters, Context.Request, "propertylist", ParameterType.Query);
                var supportedLocales = Parameters.ValueOf<List<string>>(parameters, Context.Request, "supportedLocales", ParameterType.Query);
                var localizableProperties = Parameters.ValueOf<List<string>>(parameters, Context.Request, "localizableProperties", ParameterType.Query);
                return service.GuideLocalizationService(Context, post, apply, delete, action, location, propertylist, supportedLocales, localizableProperties);
            };

            Post["/system/console/configMgr/MessagingUserComponentFactory"] = parameters =>
            {
                var post = Parameters.ValueOf<bool?>(parameters, Context.Request, "post", ParameterType.Query);
                var apply = Parameters.ValueOf<bool?>(parameters, Context.Request, "apply", ParameterType.Query);
                var delete = Parameters.ValueOf<bool?>(parameters, Context.Request, "delete", ParameterType.Query);
                var action = Parameters.ValueOf<string>(parameters, Context.Request, "action", ParameterType.Query);
                var location = Parameters.ValueOf<string>(parameters, Context.Request, "location", ParameterType.Query);
                var propertylist = Parameters.ValueOf<List<string>>(parameters, Context.Request, "propertylist", ParameterType.Query);
                var priority = Parameters.ValueOf<int?>(parameters, Context.Request, "priority", ParameterType.Query);
                return service.MessagingUserComponentFactory(Context, post, apply, delete, action, location, propertylist, priority);
            };

            Post["/system/console/configMgr/org.apache.aries.jmx.framework.StateConfig"] = parameters =>
            {
                var post = Parameters.ValueOf<bool?>(parameters, Context.Request, "post", ParameterType.Query);
                var apply = Parameters.ValueOf<bool?>(parameters, Context.Request, "apply", ParameterType.Query);
                var delete = Parameters.ValueOf<bool?>(parameters, Context.Request, "delete", ParameterType.Query);
                var action = Parameters.ValueOf<string>(parameters, Context.Request, "action", ParameterType.Query);
                var location = Parameters.ValueOf<string>(parameters, Context.Request, "location", ParameterType.Query);
                var propertylist = Parameters.ValueOf<List<string>>(parameters, Context.Request, "propertylist", ParameterType.Query);
                var attributeChangeNotificationEnabled = Parameters.ValueOf<bool?>(parameters, Context.Request, "attributeChangeNotificationEnabled", ParameterType.Query);
                return service.OrgApacheAriesJmxFrameworkStateConfig(Context, post, apply, delete, action, location, propertylist, attributeChangeNotificationEnabled);
            };

            Post["/system/console/configMgr/org.apache.felix.eventadmin.impl.EventAdmin"] = parameters =>
            {
                var post = Parameters.ValueOf<bool?>(parameters, Context.Request, "post", ParameterType.Query);
                var apply = Parameters.ValueOf<bool?>(parameters, Context.Request, "apply", ParameterType.Query);
                var delete = Parameters.ValueOf<bool?>(parameters, Context.Request, "delete", ParameterType.Query);
                var action = Parameters.ValueOf<string>(parameters, Context.Request, "action", ParameterType.Query);
                var location = Parameters.ValueOf<string>(parameters, Context.Request, "location", ParameterType.Query);
                var propertylist = Parameters.ValueOf<List<string>>(parameters, Context.Request, "propertylist", ParameterType.Query);
                var orgApacheFelixEventadminThreadPoolSize = Parameters.ValueOf<int?>(parameters, Context.Request, "orgApacheFelixEventadminThreadPoolSize", ParameterType.Query);
                var orgApacheFelixEventadminAsyncToSyncThreadRatio = Parameters.ValueOf<decimal?>(parameters, Context.Request, "orgApacheFelixEventadminAsyncToSyncThreadRatio", ParameterType.Query);
                var orgApacheFelixEventadminTimeout = Parameters.ValueOf<int?>(parameters, Context.Request, "orgApacheFelixEventadminTimeout", ParameterType.Query);
                var orgApacheFelixEventadminRequireTopic = Parameters.ValueOf<bool?>(parameters, Context.Request, "orgApacheFelixEventadminRequireTopic", ParameterType.Query);
                var orgApacheFelixEventadminIgnoreTimeout = Parameters.ValueOf<List<string>>(parameters, Context.Request, "orgApacheFelixEventadminIgnoreTimeout", ParameterType.Query);
                var orgApacheFelixEventadminIgnoreTopic = Parameters.ValueOf<List<string>>(parameters, Context.Request, "orgApacheFelixEventadminIgnoreTopic", ParameterType.Query);
                return service.OrgApacheFelixEventadminImplEventAdmin(Context, post, apply, delete, action, location, propertylist, orgApacheFelixEventadminThreadPoolSize, orgApacheFelixEventadminAsyncToSyncThreadRatio, orgApacheFelixEventadminTimeout, orgApacheFelixEventadminRequireTopic, orgApacheFelixEventadminIgnoreTimeout, orgApacheFelixEventadminIgnoreTopic);
            };

            Post["/system/console/configMgr/org.apache.felix.http"] = parameters =>
            {
                var post = Parameters.ValueOf<bool?>(parameters, Context.Request, "post", ParameterType.Query);
                var apply = Parameters.ValueOf<bool?>(parameters, Context.Request, "apply", ParameterType.Query);
                var delete = Parameters.ValueOf<bool?>(parameters, Context.Request, "delete", ParameterType.Query);
                var action = Parameters.ValueOf<string>(parameters, Context.Request, "action", ParameterType.Query);
                var location = Parameters.ValueOf<string>(parameters, Context.Request, "location", ParameterType.Query);
                var propertylist = Parameters.ValueOf<List<string>>(parameters, Context.Request, "propertylist", ParameterType.Query);
                var orgApacheFelixHttpHost = Parameters.ValueOf<string>(parameters, Context.Request, "orgApacheFelixHttpHost", ParameterType.Query);
                var orgApacheFelixHttpEnable = Parameters.ValueOf<bool?>(parameters, Context.Request, "orgApacheFelixHttpEnable", ParameterType.Query);
                var orgOsgiServiceHttpPort = Parameters.ValueOf<int?>(parameters, Context.Request, "orgOsgiServiceHttpPort", ParameterType.Query);
                var orgApacheFelixHttpTimeout = Parameters.ValueOf<int?>(parameters, Context.Request, "orgApacheFelixHttpTimeout", ParameterType.Query);
                var orgApacheFelixHttpsEnable = Parameters.ValueOf<bool?>(parameters, Context.Request, "orgApacheFelixHttpsEnable", ParameterType.Query);
                var orgOsgiServiceHttpPortSecure = Parameters.ValueOf<int?>(parameters, Context.Request, "orgOsgiServiceHttpPortSecure", ParameterType.Query);
                var orgApacheFelixHttpsKeystore = Parameters.ValueOf<string>(parameters, Context.Request, "orgApacheFelixHttpsKeystore", ParameterType.Query);
                var orgApacheFelixHttpsKeystorePassword = Parameters.ValueOf<string>(parameters, Context.Request, "orgApacheFelixHttpsKeystorePassword", ParameterType.Query);
                var orgApacheFelixHttpsKeystoreKeyPassword = Parameters.ValueOf<string>(parameters, Context.Request, "orgApacheFelixHttpsKeystoreKeyPassword", ParameterType.Query);
                var orgApacheFelixHttpsTruststore = Parameters.ValueOf<string>(parameters, Context.Request, "orgApacheFelixHttpsTruststore", ParameterType.Query);
                var orgApacheFelixHttpsTruststorePassword = Parameters.ValueOf<string>(parameters, Context.Request, "orgApacheFelixHttpsTruststorePassword", ParameterType.Query);
                var orgApacheFelixHttpsClientcertificate = Parameters.ValueOf<string>(parameters, Context.Request, "orgApacheFelixHttpsClientcertificate", ParameterType.Query);
                var orgApacheFelixHttpContextPath = Parameters.ValueOf<string>(parameters, Context.Request, "orgApacheFelixHttpContextPath", ParameterType.Query);
                var orgApacheFelixHttpMbeans = Parameters.ValueOf<bool?>(parameters, Context.Request, "orgApacheFelixHttpMbeans", ParameterType.Query);
                var orgApacheFelixHttpSessionTimeout = Parameters.ValueOf<int?>(parameters, Context.Request, "orgApacheFelixHttpSessionTimeout", ParameterType.Query);
                var orgApacheFelixHttpJettyThreadpoolMax = Parameters.ValueOf<int?>(parameters, Context.Request, "orgApacheFelixHttpJettyThreadpoolMax", ParameterType.Query);
                var orgApacheFelixHttpJettyAcceptors = Parameters.ValueOf<int?>(parameters, Context.Request, "orgApacheFelixHttpJettyAcceptors", ParameterType.Query);
                var orgApacheFelixHttpJettySelectors = Parameters.ValueOf<int?>(parameters, Context.Request, "orgApacheFelixHttpJettySelectors", ParameterType.Query);
                var orgApacheFelixHttpJettyHeaderBufferSize = Parameters.ValueOf<int?>(parameters, Context.Request, "orgApacheFelixHttpJettyHeaderBufferSize", ParameterType.Query);
                var orgApacheFelixHttpJettyRequestBufferSize = Parameters.ValueOf<int?>(parameters, Context.Request, "orgApacheFelixHttpJettyRequestBufferSize", ParameterType.Query);
                var orgApacheFelixHttpJettyResponseBufferSize = Parameters.ValueOf<int?>(parameters, Context.Request, "orgApacheFelixHttpJettyResponseBufferSize", ParameterType.Query);
                var orgApacheFelixHttpJettyMaxFormSize = Parameters.ValueOf<int?>(parameters, Context.Request, "orgApacheFelixHttpJettyMaxFormSize", ParameterType.Query);
                var orgApacheFelixHttpPathExclusions = Parameters.ValueOf<List<string>>(parameters, Context.Request, "orgApacheFelixHttpPathExclusions", ParameterType.Query);
                var orgApacheFelixHttpsJettyCiphersuitesExcluded = Parameters.ValueOf<List<string>>(parameters, Context.Request, "orgApacheFelixHttpsJettyCiphersuitesExcluded", ParameterType.Query);
                var orgApacheFelixHttpsJettyCiphersuitesIncluded = Parameters.ValueOf<List<string>>(parameters, Context.Request, "orgApacheFelixHttpsJettyCiphersuitesIncluded", ParameterType.Query);
                var orgApacheFelixHttpJettySendServerHeader = Parameters.ValueOf<bool?>(parameters, Context.Request, "orgApacheFelixHttpJettySendServerHeader", ParameterType.Query);
                var orgApacheFelixHttpsJettyProtocolsIncluded = Parameters.ValueOf<List<string>>(parameters, Context.Request, "orgApacheFelixHttpsJettyProtocolsIncluded", ParameterType.Query);
                var orgApacheFelixHttpsJettyProtocolsExcluded = Parameters.ValueOf<List<string>>(parameters, Context.Request, "orgApacheFelixHttpsJettyProtocolsExcluded", ParameterType.Query);
                var orgApacheFelixProxyLoadBalancerConnectionEnable = Parameters.ValueOf<bool?>(parameters, Context.Request, "orgApacheFelixProxyLoadBalancerConnectionEnable", ParameterType.Query);
                var orgApacheFelixHttpsJettyRenegotiateAllowed = Parameters.ValueOf<bool?>(parameters, Context.Request, "orgApacheFelixHttpsJettyRenegotiateAllowed", ParameterType.Query);
                var orgApacheFelixHttpsJettySessionCookieHttpOnly = Parameters.ValueOf<bool?>(parameters, Context.Request, "orgApacheFelixHttpsJettySessionCookieHttpOnly", ParameterType.Query);
                var orgApacheFelixHttpsJettySessionCookieSecure = Parameters.ValueOf<bool?>(parameters, Context.Request, "orgApacheFelixHttpsJettySessionCookieSecure", ParameterType.Query);
                var orgEclipseJettyServletSessionIdPathParameterName = Parameters.ValueOf<string>(parameters, Context.Request, "orgEclipseJettyServletSessionIdPathParameterName", ParameterType.Query);
                var orgEclipseJettyServletCheckingRemoteSessionIdEncoding = Parameters.ValueOf<bool?>(parameters, Context.Request, "orgEclipseJettyServletCheckingRemoteSessionIdEncoding", ParameterType.Query);
                var orgEclipseJettyServletSessionCookie = Parameters.ValueOf<string>(parameters, Context.Request, "orgEclipseJettyServletSessionCookie", ParameterType.Query);
                var orgEclipseJettyServletSessionDomain = Parameters.ValueOf<string>(parameters, Context.Request, "orgEclipseJettyServletSessionDomain", ParameterType.Query);
                var orgEclipseJettyServletSessionPath = Parameters.ValueOf<string>(parameters, Context.Request, "orgEclipseJettyServletSessionPath", ParameterType.Query);
                var orgEclipseJettyServletMaxAge = Parameters.ValueOf<int?>(parameters, Context.Request, "orgEclipseJettyServletMaxAge", ParameterType.Query);
                var orgApacheFelixHttpName = Parameters.ValueOf<string>(parameters, Context.Request, "orgApacheFelixHttpName", ParameterType.Query);
                var orgApacheFelixJettyGziphandlerEnable = Parameters.ValueOf<bool?>(parameters, Context.Request, "orgApacheFelixJettyGziphandlerEnable", ParameterType.Query);
                var orgApacheFelixJettyGzipMinGzipSize = Parameters.ValueOf<int?>(parameters, Context.Request, "orgApacheFelixJettyGzipMinGzipSize", ParameterType.Query);
                var orgApacheFelixJettyGzipCompressionLevel = Parameters.ValueOf<int?>(parameters, Context.Request, "orgApacheFelixJettyGzipCompressionLevel", ParameterType.Query);
                var orgApacheFelixJettyGzipInflateBufferSize = Parameters.ValueOf<int?>(parameters, Context.Request, "orgApacheFelixJettyGzipInflateBufferSize", ParameterType.Query);
                var orgApacheFelixJettyGzipSyncFlush = Parameters.ValueOf<bool?>(parameters, Context.Request, "orgApacheFelixJettyGzipSyncFlush", ParameterType.Query);
                var orgApacheFelixJettyGzipExcludedUserAgents = Parameters.ValueOf<List<string>>(parameters, Context.Request, "orgApacheFelixJettyGzipExcludedUserAgents", ParameterType.Query);
                var orgApacheFelixJettyGzipIncludedMethods = Parameters.ValueOf<List<string>>(parameters, Context.Request, "orgApacheFelixJettyGzipIncludedMethods", ParameterType.Query);
                var orgApacheFelixJettyGzipExcludedMethods = Parameters.ValueOf<List<string>>(parameters, Context.Request, "orgApacheFelixJettyGzipExcludedMethods", ParameterType.Query);
                var orgApacheFelixJettyGzipIncludedPaths = Parameters.ValueOf<List<string>>(parameters, Context.Request, "orgApacheFelixJettyGzipIncludedPaths", ParameterType.Query);
                var orgApacheFelixJettyGzipExcludedPaths = Parameters.ValueOf<List<string>>(parameters, Context.Request, "orgApacheFelixJettyGzipExcludedPaths", ParameterType.Query);
                var orgApacheFelixJettyGzipIncludedMimeTypes = Parameters.ValueOf<List<string>>(parameters, Context.Request, "orgApacheFelixJettyGzipIncludedMimeTypes", ParameterType.Query);
                var orgApacheFelixJettyGzipExcludedMimeTypes = Parameters.ValueOf<List<string>>(parameters, Context.Request, "orgApacheFelixJettyGzipExcludedMimeTypes", ParameterType.Query);
                var orgApacheFelixHttpSessionInvalidate = Parameters.ValueOf<bool?>(parameters, Context.Request, "orgApacheFelixHttpSessionInvalidate", ParameterType.Query);
                var orgApacheFelixHttpSessionUniqueid = Parameters.ValueOf<bool?>(parameters, Context.Request, "orgApacheFelixHttpSessionUniqueid", ParameterType.Query);
                return service.OrgApacheFelixHttp(Context, post, apply, delete, action, location, propertylist, orgApacheFelixHttpHost, orgApacheFelixHttpEnable, orgOsgiServiceHttpPort, orgApacheFelixHttpTimeout, orgApacheFelixHttpsEnable, orgOsgiServiceHttpPortSecure, orgApacheFelixHttpsKeystore, orgApacheFelixHttpsKeystorePassword, orgApacheFelixHttpsKeystoreKeyPassword, orgApacheFelixHttpsTruststore, orgApacheFelixHttpsTruststorePassword, orgApacheFelixHttpsClientcertificate, orgApacheFelixHttpContextPath, orgApacheFelixHttpMbeans, orgApacheFelixHttpSessionTimeout, orgApacheFelixHttpJettyThreadpoolMax, orgApacheFelixHttpJettyAcceptors, orgApacheFelixHttpJettySelectors, orgApacheFelixHttpJettyHeaderBufferSize, orgApacheFelixHttpJettyRequestBufferSize, orgApacheFelixHttpJettyResponseBufferSize, orgApacheFelixHttpJettyMaxFormSize, orgApacheFelixHttpPathExclusions, orgApacheFelixHttpsJettyCiphersuitesExcluded, orgApacheFelixHttpsJettyCiphersuitesIncluded, orgApacheFelixHttpJettySendServerHeader, orgApacheFelixHttpsJettyProtocolsIncluded, orgApacheFelixHttpsJettyProtocolsExcluded, orgApacheFelixProxyLoadBalancerConnectionEnable, orgApacheFelixHttpsJettyRenegotiateAllowed, orgApacheFelixHttpsJettySessionCookieHttpOnly, orgApacheFelixHttpsJettySessionCookieSecure, orgEclipseJettyServletSessionIdPathParameterName, orgEclipseJettyServletCheckingRemoteSessionIdEncoding, orgEclipseJettyServletSessionCookie, orgEclipseJettyServletSessionDomain, orgEclipseJettyServletSessionPath, orgEclipseJettyServletMaxAge, orgApacheFelixHttpName, orgApacheFelixJettyGziphandlerEnable, orgApacheFelixJettyGzipMinGzipSize, orgApacheFelixJettyGzipCompressionLevel, orgApacheFelixJettyGzipInflateBufferSize, orgApacheFelixJettyGzipSyncFlush, orgApacheFelixJettyGzipExcludedUserAgents, orgApacheFelixJettyGzipIncludedMethods, orgApacheFelixJettyGzipExcludedMethods, orgApacheFelixJettyGzipIncludedPaths, orgApacheFelixJettyGzipExcludedPaths, orgApacheFelixJettyGzipIncludedMimeTypes, orgApacheFelixJettyGzipExcludedMimeTypes, orgApacheFelixHttpSessionInvalidate, orgApacheFelixHttpSessionUniqueid);
            };

            Post["/system/console/configMgr/org.apache.felix.http.sslfilter.SslFilter"] = parameters =>
            {
                var post = Parameters.ValueOf<bool?>(parameters, Context.Request, "post", ParameterType.Query);
                var apply = Parameters.ValueOf<bool?>(parameters, Context.Request, "apply", ParameterType.Query);
                var delete = Parameters.ValueOf<bool?>(parameters, Context.Request, "delete", ParameterType.Query);
                var action = Parameters.ValueOf<string>(parameters, Context.Request, "action", ParameterType.Query);
                var location = Parameters.ValueOf<string>(parameters, Context.Request, "location", ParameterType.Query);
                var propertylist = Parameters.ValueOf<List<string>>(parameters, Context.Request, "propertylist", ParameterType.Query);
                var sslForwardHeader = Parameters.ValueOf<string>(parameters, Context.Request, "sslForwardHeader", ParameterType.Query);
                var sslForwardValue = Parameters.ValueOf<string>(parameters, Context.Request, "sslForwardValue", ParameterType.Query);
                var sslForwardCertHeader = Parameters.ValueOf<string>(parameters, Context.Request, "sslForwardCertHeader", ParameterType.Query);
                var rewriteAbsoluteUrls = Parameters.ValueOf<bool?>(parameters, Context.Request, "rewriteAbsoluteUrls", ParameterType.Query);
                return service.OrgApacheFelixHttpSslfilterSslFilter(Context, post, apply, delete, action, location, propertylist, sslForwardHeader, sslForwardValue, sslForwardCertHeader, rewriteAbsoluteUrls);
            };

            Post["/system/console/configMgr/org.apache.felix.jaas.Configuration.factory"] = parameters =>
            {
                var post = Parameters.ValueOf<bool?>(parameters, Context.Request, "post", ParameterType.Query);
                var apply = Parameters.ValueOf<bool?>(parameters, Context.Request, "apply", ParameterType.Query);
                var delete = Parameters.ValueOf<bool?>(parameters, Context.Request, "delete", ParameterType.Query);
                var action = Parameters.ValueOf<string>(parameters, Context.Request, "action", ParameterType.Query);
                var location = Parameters.ValueOf<string>(parameters, Context.Request, "location", ParameterType.Query);
                var propertylist = Parameters.ValueOf<List<string>>(parameters, Context.Request, "propertylist", ParameterType.Query);
                var jaasControlFlag = Parameters.ValueOf<string>(parameters, Context.Request, "jaasControlFlag", ParameterType.Query);
                var jaasRanking = Parameters.ValueOf<int?>(parameters, Context.Request, "jaasRanking", ParameterType.Query);
                var jaasRealmName = Parameters.ValueOf<string>(parameters, Context.Request, "jaasRealmName", ParameterType.Query);
                var jaasClassname = Parameters.ValueOf<string>(parameters, Context.Request, "jaasClassname", ParameterType.Query);
                var jaasOptions = Parameters.ValueOf<List<string>>(parameters, Context.Request, "jaasOptions", ParameterType.Query);
                return service.OrgApacheFelixJaasConfigurationFactory(Context, post, apply, delete, action, location, propertylist, jaasControlFlag, jaasRanking, jaasRealmName, jaasClassname, jaasOptions);
            };

            Post["/system/console/configMgr/org.apache.felix.jaas.ConfigurationSpi"] = parameters =>
            {
                var post = Parameters.ValueOf<bool?>(parameters, Context.Request, "post", ParameterType.Query);
                var apply = Parameters.ValueOf<bool?>(parameters, Context.Request, "apply", ParameterType.Query);
                var delete = Parameters.ValueOf<bool?>(parameters, Context.Request, "delete", ParameterType.Query);
                var action = Parameters.ValueOf<string>(parameters, Context.Request, "action", ParameterType.Query);
                var location = Parameters.ValueOf<string>(parameters, Context.Request, "location", ParameterType.Query);
                var propertylist = Parameters.ValueOf<List<string>>(parameters, Context.Request, "propertylist", ParameterType.Query);
                var jaasDefaultRealmName = Parameters.ValueOf<string>(parameters, Context.Request, "jaasDefaultRealmName", ParameterType.Query);
                var jaasConfigProviderName = Parameters.ValueOf<string>(parameters, Context.Request, "jaasConfigProviderName", ParameterType.Query);
                var jaasGlobalConfigPolicy = Parameters.ValueOf<string>(parameters, Context.Request, "jaasGlobalConfigPolicy", ParameterType.Query);
                return service.OrgApacheFelixJaasConfigurationSpi(Context, post, apply, delete, action, location, propertylist, jaasDefaultRealmName, jaasConfigProviderName, jaasGlobalConfigPolicy);
            };

            Post["/system/console/configMgr/org.apache.felix.scr.ScrService"] = parameters =>
            {
                var post = Parameters.ValueOf<bool?>(parameters, Context.Request, "post", ParameterType.Query);
                var apply = Parameters.ValueOf<bool?>(parameters, Context.Request, "apply", ParameterType.Query);
                var delete = Parameters.ValueOf<bool?>(parameters, Context.Request, "delete", ParameterType.Query);
                var action = Parameters.ValueOf<string>(parameters, Context.Request, "action", ParameterType.Query);
                var location = Parameters.ValueOf<string>(parameters, Context.Request, "location", ParameterType.Query);
                var propertylist = Parameters.ValueOf<List<string>>(parameters, Context.Request, "propertylist", ParameterType.Query);
                var dsLoglevel = Parameters.ValueOf<int?>(parameters, Context.Request, "dsLoglevel", ParameterType.Query);
                var dsFactoryEnabled = Parameters.ValueOf<bool?>(parameters, Context.Request, "dsFactoryEnabled", ParameterType.Query);
                var dsDelayedKeepInstances = Parameters.ValueOf<bool?>(parameters, Context.Request, "dsDelayedKeepInstances", ParameterType.Query);
                var dsLockTimeoutMilliseconds = Parameters.ValueOf<int?>(parameters, Context.Request, "dsLockTimeoutMilliseconds", ParameterType.Query);
                var dsStopTimeoutMilliseconds = Parameters.ValueOf<int?>(parameters, Context.Request, "dsStopTimeoutMilliseconds", ParameterType.Query);
                var dsGlobalExtender = Parameters.ValueOf<bool?>(parameters, Context.Request, "dsGlobalExtender", ParameterType.Query);
                return service.OrgApacheFelixScrScrService(Context, post, apply, delete, action, location, propertylist, dsLoglevel, dsFactoryEnabled, dsDelayedKeepInstances, dsLockTimeoutMilliseconds, dsStopTimeoutMilliseconds, dsGlobalExtender);
            };

            Post["/system/console/configMgr/org.apache.felix.systemready.impl.ComponentsCheck"] = parameters =>
            {
                var post = Parameters.ValueOf<bool?>(parameters, Context.Request, "post", ParameterType.Query);
                var apply = Parameters.ValueOf<bool?>(parameters, Context.Request, "apply", ParameterType.Query);
                var delete = Parameters.ValueOf<bool?>(parameters, Context.Request, "delete", ParameterType.Query);
                var action = Parameters.ValueOf<string>(parameters, Context.Request, "action", ParameterType.Query);
                var location = Parameters.ValueOf<string>(parameters, Context.Request, "location", ParameterType.Query);
                var propertylist = Parameters.ValueOf<List<string>>(parameters, Context.Request, "propertylist", ParameterType.Query);
                var componentsList = Parameters.ValueOf<List<string>>(parameters, Context.Request, "componentsList", ParameterType.Query);
                var type = Parameters.ValueOf<string>(parameters, Context.Request, "type", ParameterType.Query);
                return service.OrgApacheFelixSystemreadyImplComponentsCheck(Context, post, apply, delete, action, location, propertylist, componentsList, type);
            };

            Post["/system/console/configMgr/org.apache.felix.systemready.impl.FrameworkStartCheck"] = parameters =>
            {
                var post = Parameters.ValueOf<bool?>(parameters, Context.Request, "post", ParameterType.Query);
                var apply = Parameters.ValueOf<bool?>(parameters, Context.Request, "apply", ParameterType.Query);
                var delete = Parameters.ValueOf<bool?>(parameters, Context.Request, "delete", ParameterType.Query);
                var action = Parameters.ValueOf<string>(parameters, Context.Request, "action", ParameterType.Query);
                var location = Parameters.ValueOf<string>(parameters, Context.Request, "location", ParameterType.Query);
                var propertylist = Parameters.ValueOf<List<string>>(parameters, Context.Request, "propertylist", ParameterType.Query);
                var timeout = Parameters.ValueOf<int?>(parameters, Context.Request, "timeout", ParameterType.Query);
                var targetStartLevel = Parameters.ValueOf<int?>(parameters, Context.Request, "targetStartLevel", ParameterType.Query);
                var targetStartLevelPropName = Parameters.ValueOf<string>(parameters, Context.Request, "targetStartLevelPropName", ParameterType.Query);
                var type = Parameters.ValueOf<string>(parameters, Context.Request, "type", ParameterType.Query);
                return service.OrgApacheFelixSystemreadyImplFrameworkStartCheck(Context, post, apply, delete, action, location, propertylist, timeout, targetStartLevel, targetStartLevelPropName, type);
            };

            Post["/system/console/configMgr/org.apache.felix.systemready.impl.ServicesCheck"] = parameters =>
            {
                var post = Parameters.ValueOf<bool?>(parameters, Context.Request, "post", ParameterType.Query);
                var apply = Parameters.ValueOf<bool?>(parameters, Context.Request, "apply", ParameterType.Query);
                var delete = Parameters.ValueOf<bool?>(parameters, Context.Request, "delete", ParameterType.Query);
                var action = Parameters.ValueOf<string>(parameters, Context.Request, "action", ParameterType.Query);
                var location = Parameters.ValueOf<string>(parameters, Context.Request, "location", ParameterType.Query);
                var propertylist = Parameters.ValueOf<List<string>>(parameters, Context.Request, "propertylist", ParameterType.Query);
                var servicesList = Parameters.ValueOf<List<string>>(parameters, Context.Request, "servicesList", ParameterType.Query);
                var type = Parameters.ValueOf<string>(parameters, Context.Request, "type", ParameterType.Query);
                return service.OrgApacheFelixSystemreadyImplServicesCheck(Context, post, apply, delete, action, location, propertylist, servicesList, type);
            };

            Post["/system/console/configMgr/org.apache.felix.systemready.impl.servlet.SystemAliveServlet"] = parameters =>
            {
                var post = Parameters.ValueOf<bool?>(parameters, Context.Request, "post", ParameterType.Query);
                var apply = Parameters.ValueOf<bool?>(parameters, Context.Request, "apply", ParameterType.Query);
                var delete = Parameters.ValueOf<bool?>(parameters, Context.Request, "delete", ParameterType.Query);
                var action = Parameters.ValueOf<string>(parameters, Context.Request, "action", ParameterType.Query);
                var location = Parameters.ValueOf<string>(parameters, Context.Request, "location", ParameterType.Query);
                var propertylist = Parameters.ValueOf<List<string>>(parameters, Context.Request, "propertylist", ParameterType.Query);
                var osgiHttpWhiteboardServletPattern = Parameters.ValueOf<string>(parameters, Context.Request, "osgiHttpWhiteboardServletPattern", ParameterType.Query);
                var osgiHttpWhiteboardContextSelect = Parameters.ValueOf<string>(parameters, Context.Request, "osgiHttpWhiteboardContextSelect", ParameterType.Query);
                return service.OrgApacheFelixSystemreadyImplServletSystemAliveServlet(Context, post, apply, delete, action, location, propertylist, osgiHttpWhiteboardServletPattern, osgiHttpWhiteboardContextSelect);
            };

            Post["/system/console/configMgr/org.apache.felix.systemready.impl.servlet.SystemReadyServlet"] = parameters =>
            {
                var post = Parameters.ValueOf<bool?>(parameters, Context.Request, "post", ParameterType.Query);
                var apply = Parameters.ValueOf<bool?>(parameters, Context.Request, "apply", ParameterType.Query);
                var delete = Parameters.ValueOf<bool?>(parameters, Context.Request, "delete", ParameterType.Query);
                var action = Parameters.ValueOf<string>(parameters, Context.Request, "action", ParameterType.Query);
                var location = Parameters.ValueOf<string>(parameters, Context.Request, "location", ParameterType.Query);
                var propertylist = Parameters.ValueOf<List<string>>(parameters, Context.Request, "propertylist", ParameterType.Query);
                var osgiHttpWhiteboardServletPattern = Parameters.ValueOf<string>(parameters, Context.Request, "osgiHttpWhiteboardServletPattern", ParameterType.Query);
                var osgiHttpWhiteboardContextSelect = Parameters.ValueOf<string>(parameters, Context.Request, "osgiHttpWhiteboardContextSelect", ParameterType.Query);
                return service.OrgApacheFelixSystemreadyImplServletSystemReadyServlet(Context, post, apply, delete, action, location, propertylist, osgiHttpWhiteboardServletPattern, osgiHttpWhiteboardContextSelect);
            };

            Post["/system/console/configMgr/org.apache.felix.systemready.SystemReadyMonitor"] = parameters =>
            {
                var post = Parameters.ValueOf<bool?>(parameters, Context.Request, "post", ParameterType.Query);
                var apply = Parameters.ValueOf<bool?>(parameters, Context.Request, "apply", ParameterType.Query);
                var delete = Parameters.ValueOf<bool?>(parameters, Context.Request, "delete", ParameterType.Query);
                var action = Parameters.ValueOf<string>(parameters, Context.Request, "action", ParameterType.Query);
                var location = Parameters.ValueOf<string>(parameters, Context.Request, "location", ParameterType.Query);
                var propertylist = Parameters.ValueOf<List<string>>(parameters, Context.Request, "propertylist", ParameterType.Query);
                var pollInterval = Parameters.ValueOf<int?>(parameters, Context.Request, "pollInterval", ParameterType.Query);
                return service.OrgApacheFelixSystemreadySystemReadyMonitor(Context, post, apply, delete, action, location, propertylist, pollInterval);
            };

            Post["/system/console/configMgr/org.apache.felix.webconsole.internal.servlet.OsgiManager"] = parameters =>
            {
                var post = Parameters.ValueOf<bool?>(parameters, Context.Request, "post", ParameterType.Query);
                var apply = Parameters.ValueOf<bool?>(parameters, Context.Request, "apply", ParameterType.Query);
                var delete = Parameters.ValueOf<bool?>(parameters, Context.Request, "delete", ParameterType.Query);
                var action = Parameters.ValueOf<string>(parameters, Context.Request, "action", ParameterType.Query);
                var location = Parameters.ValueOf<string>(parameters, Context.Request, "location", ParameterType.Query);
                var propertylist = Parameters.ValueOf<List<string>>(parameters, Context.Request, "propertylist", ParameterType.Query);
                var managerRoot = Parameters.ValueOf<string>(parameters, Context.Request, "managerRoot", ParameterType.Query);
                var httpServiceFilter = Parameters.ValueOf<string>(parameters, Context.Request, "httpServiceFilter", ParameterType.Query);
                var defaultRender = Parameters.ValueOf<string>(parameters, Context.Request, "defaultRender", ParameterType.Query);
                var realm = Parameters.ValueOf<string>(parameters, Context.Request, "realm", ParameterType.Query);
                var username = Parameters.ValueOf<string>(parameters, Context.Request, "username", ParameterType.Query);
                var password = Parameters.ValueOf<string>(parameters, Context.Request, "password", ParameterType.Query);
                var category = Parameters.ValueOf<string>(parameters, Context.Request, "category", ParameterType.Query);
                var locale = Parameters.ValueOf<string>(parameters, Context.Request, "locale", ParameterType.Query);
                var loglevel = Parameters.ValueOf<int?>(parameters, Context.Request, "loglevel", ParameterType.Query);
                var plugins = Parameters.ValueOf<string>(parameters, Context.Request, "plugins", ParameterType.Query);
                return service.OrgApacheFelixWebconsoleInternalServletOsgiManager(Context, post, apply, delete, action, location, propertylist, managerRoot, httpServiceFilter, defaultRender, realm, username, password, category, locale, loglevel, plugins);
            };

            Post["/system/console/configMgr/org.apache.felix.webconsole.plugins.event.internal.PluginServlet"] = parameters =>
            {
                var post = Parameters.ValueOf<bool?>(parameters, Context.Request, "post", ParameterType.Query);
                var apply = Parameters.ValueOf<bool?>(parameters, Context.Request, "apply", ParameterType.Query);
                var delete = Parameters.ValueOf<bool?>(parameters, Context.Request, "delete", ParameterType.Query);
                var action = Parameters.ValueOf<string>(parameters, Context.Request, "action", ParameterType.Query);
                var location = Parameters.ValueOf<string>(parameters, Context.Request, "location", ParameterType.Query);
                var propertylist = Parameters.ValueOf<List<string>>(parameters, Context.Request, "propertylist", ParameterType.Query);
                var maxSize = Parameters.ValueOf<int?>(parameters, Context.Request, "maxSize", ParameterType.Query);
                return service.OrgApacheFelixWebconsolePluginsEventInternalPluginServlet(Context, post, apply, delete, action, location, propertylist, maxSize);
            };

            Post["/system/console/configMgr/org.apache.felix.webconsole.plugins.memoryusage.internal.MemoryUsageConfigurator"] = parameters =>
            {
                var post = Parameters.ValueOf<bool?>(parameters, Context.Request, "post", ParameterType.Query);
                var apply = Parameters.ValueOf<bool?>(parameters, Context.Request, "apply", ParameterType.Query);
                var delete = Parameters.ValueOf<bool?>(parameters, Context.Request, "delete", ParameterType.Query);
                var action = Parameters.ValueOf<string>(parameters, Context.Request, "action", ParameterType.Query);
                var location = Parameters.ValueOf<string>(parameters, Context.Request, "location", ParameterType.Query);
                var propertylist = Parameters.ValueOf<List<string>>(parameters, Context.Request, "propertylist", ParameterType.Query);
                var felixMemoryusageDumpThreshold = Parameters.ValueOf<int?>(parameters, Context.Request, "felixMemoryusageDumpThreshold", ParameterType.Query);
                var felixMemoryusageDumpInterval = Parameters.ValueOf<int?>(parameters, Context.Request, "felixMemoryusageDumpInterval", ParameterType.Query);
                var felixMemoryusageDumpLocation = Parameters.ValueOf<string>(parameters, Context.Request, "felixMemoryusageDumpLocation", ParameterType.Query);
                return service.OrgApacheFelixWebconsolePluginsMemoryusageInternalMemoryUsageCo(Context, post, apply, delete, action, location, propertylist, felixMemoryusageDumpThreshold, felixMemoryusageDumpInterval, felixMemoryusageDumpLocation);
            };

            Post["/system/console/configMgr/org.apache.http.proxyconfigurator"] = parameters =>
            {
                var post = Parameters.ValueOf<bool?>(parameters, Context.Request, "post", ParameterType.Query);
                var apply = Parameters.ValueOf<bool?>(parameters, Context.Request, "apply", ParameterType.Query);
                var delete = Parameters.ValueOf<bool?>(parameters, Context.Request, "delete", ParameterType.Query);
                var action = Parameters.ValueOf<string>(parameters, Context.Request, "action", ParameterType.Query);
                var location = Parameters.ValueOf<string>(parameters, Context.Request, "location", ParameterType.Query);
                var propertylist = Parameters.ValueOf<List<string>>(parameters, Context.Request, "propertylist", ParameterType.Query);
                var proxyEnabled = Parameters.ValueOf<bool?>(parameters, Context.Request, "proxyEnabled", ParameterType.Query);
                var proxyHost = Parameters.ValueOf<string>(parameters, Context.Request, "proxyHost", ParameterType.Query);
                var proxyPort = Parameters.ValueOf<int?>(parameters, Context.Request, "proxyPort", ParameterType.Query);
                var proxyUser = Parameters.ValueOf<string>(parameters, Context.Request, "proxyUser", ParameterType.Query);
                var proxyPassword = Parameters.ValueOf<string>(parameters, Context.Request, "proxyPassword", ParameterType.Query);
                var proxyExceptions = Parameters.ValueOf<List<string>>(parameters, Context.Request, "proxyExceptions", ParameterType.Query);
                return service.OrgApacheHttpProxyconfigurator(Context, post, apply, delete, action, location, propertylist, proxyEnabled, proxyHost, proxyPort, proxyUser, proxyPassword, proxyExceptions);
            };

            Post["/system/console/configMgr/org.apache.jackrabbit.oak.plugins.blob.datastore.DataStoreTextProviderService"] = parameters =>
            {
                var post = Parameters.ValueOf<bool?>(parameters, Context.Request, "post", ParameterType.Query);
                var apply = Parameters.ValueOf<bool?>(parameters, Context.Request, "apply", ParameterType.Query);
                var delete = Parameters.ValueOf<bool?>(parameters, Context.Request, "delete", ParameterType.Query);
                var action = Parameters.ValueOf<string>(parameters, Context.Request, "action", ParameterType.Query);
                var location = Parameters.ValueOf<string>(parameters, Context.Request, "location", ParameterType.Query);
                var propertylist = Parameters.ValueOf<List<string>>(parameters, Context.Request, "propertylist", ParameterType.Query);
                var dir = Parameters.ValueOf<string>(parameters, Context.Request, "dir", ParameterType.Query);
                return service.OrgApacheJackrabbitOakPluginsBlobDatastoreDataStoreTextProvider(Context, post, apply, delete, action, location, propertylist, dir);
            };

            Post["/system/console/configMgr/org.apache.jackrabbit.oak.plugins.blob.datastore.FileDataStore"] = parameters =>
            {
                var post = Parameters.ValueOf<bool?>(parameters, Context.Request, "post", ParameterType.Query);
                var apply = Parameters.ValueOf<bool?>(parameters, Context.Request, "apply", ParameterType.Query);
                var delete = Parameters.ValueOf<bool?>(parameters, Context.Request, "delete", ParameterType.Query);
                var action = Parameters.ValueOf<string>(parameters, Context.Request, "action", ParameterType.Query);
                var location = Parameters.ValueOf<string>(parameters, Context.Request, "location", ParameterType.Query);
                var propertylist = Parameters.ValueOf<List<string>>(parameters, Context.Request, "propertylist", ParameterType.Query);
                var path = Parameters.ValueOf<string>(parameters, Context.Request, "path", ParameterType.Query);
                return service.OrgApacheJackrabbitOakPluginsBlobDatastoreFileDataStore(Context, post, apply, delete, action, location, propertylist, path);
            };

            Post["/system/console/configMgr/org.apache.jackrabbit.oak.plugins.document.DocumentNodeStoreService"] = parameters =>
            {
                var post = Parameters.ValueOf<bool?>(parameters, Context.Request, "post", ParameterType.Query);
                var apply = Parameters.ValueOf<bool?>(parameters, Context.Request, "apply", ParameterType.Query);
                var delete = Parameters.ValueOf<bool?>(parameters, Context.Request, "delete", ParameterType.Query);
                var action = Parameters.ValueOf<string>(parameters, Context.Request, "action", ParameterType.Query);
                var location = Parameters.ValueOf<string>(parameters, Context.Request, "location", ParameterType.Query);
                var propertylist = Parameters.ValueOf<List<string>>(parameters, Context.Request, "propertylist", ParameterType.Query);
                var mongouri = Parameters.ValueOf<string>(parameters, Context.Request, "mongouri", ParameterType.Query);
                var db = Parameters.ValueOf<string>(parameters, Context.Request, "db", ParameterType.Query);
                var socketKeepAlive = Parameters.ValueOf<bool?>(parameters, Context.Request, "socketKeepAlive", ParameterType.Query);
                var cache = Parameters.ValueOf<int?>(parameters, Context.Request, "cache", ParameterType.Query);
                var nodeCachePercentage = Parameters.ValueOf<int?>(parameters, Context.Request, "nodeCachePercentage", ParameterType.Query);
                var prevDocCachePercentage = Parameters.ValueOf<int?>(parameters, Context.Request, "prevDocCachePercentage", ParameterType.Query);
                var childrenCachePercentage = Parameters.ValueOf<int?>(parameters, Context.Request, "childrenCachePercentage", ParameterType.Query);
                var diffCachePercentage = Parameters.ValueOf<int?>(parameters, Context.Request, "diffCachePercentage", ParameterType.Query);
                var cacheSegmentCount = Parameters.ValueOf<int?>(parameters, Context.Request, "cacheSegmentCount", ParameterType.Query);
                var cacheStackMoveDistance = Parameters.ValueOf<int?>(parameters, Context.Request, "cacheStackMoveDistance", ParameterType.Query);
                var blobCacheSize = Parameters.ValueOf<int?>(parameters, Context.Request, "blobCacheSize", ParameterType.Query);
                var persistentCache = Parameters.ValueOf<string>(parameters, Context.Request, "persistentCache", ParameterType.Query);
                var journalCache = Parameters.ValueOf<string>(parameters, Context.Request, "journalCache", ParameterType.Query);
                var customBlobStore = Parameters.ValueOf<bool?>(parameters, Context.Request, "customBlobStore", ParameterType.Query);
                var journalGCInterval = Parameters.ValueOf<int?>(parameters, Context.Request, "journalGCInterval", ParameterType.Query);
                var journalGCMaxAge = Parameters.ValueOf<int?>(parameters, Context.Request, "journalGCMaxAge", ParameterType.Query);
                var prefetchExternalChanges = Parameters.ValueOf<bool?>(parameters, Context.Request, "prefetchExternalChanges", ParameterType.Query);
                var role = Parameters.ValueOf<string>(parameters, Context.Request, "role", ParameterType.Query);
                var versionGcMaxAgeInSecs = Parameters.ValueOf<int?>(parameters, Context.Request, "versionGcMaxAgeInSecs", ParameterType.Query);
                var versionGCExpression = Parameters.ValueOf<string>(parameters, Context.Request, "versionGCExpression", ParameterType.Query);
                var versionGCTimeLimitInSecs = Parameters.ValueOf<int?>(parameters, Context.Request, "versionGCTimeLimitInSecs", ParameterType.Query);
                var blobGcMaxAgeInSecs = Parameters.ValueOf<int?>(parameters, Context.Request, "blobGcMaxAgeInSecs", ParameterType.Query);
                var blobTrackSnapshotIntervalInSecs = Parameters.ValueOf<int?>(parameters, Context.Request, "blobTrackSnapshotIntervalInSecs", ParameterType.Query);
                var repositoryHome = Parameters.ValueOf<string>(parameters, Context.Request, "repositoryHome", ParameterType.Query);
                var maxReplicationLagInSecs = Parameters.ValueOf<int?>(parameters, Context.Request, "maxReplicationLagInSecs", ParameterType.Query);
                var documentStoreType = Parameters.ValueOf<string>(parameters, Context.Request, "documentStoreType", ParameterType.Query);
                var bundlingDisabled = Parameters.ValueOf<bool?>(parameters, Context.Request, "bundlingDisabled", ParameterType.Query);
                var updateLimit = Parameters.ValueOf<int?>(parameters, Context.Request, "updateLimit", ParameterType.Query);
                var persistentCacheIncludes = Parameters.ValueOf<List<string>>(parameters, Context.Request, "persistentCacheIncludes", ParameterType.Query);
                var leaseCheckMode = Parameters.ValueOf<string>(parameters, Context.Request, "leaseCheckMode", ParameterType.Query);
                return service.OrgApacheJackrabbitOakPluginsDocumentDocumentNodeStoreService(Context, post, apply, delete, action, location, propertylist, mongouri, db, socketKeepAlive, cache, nodeCachePercentage, prevDocCachePercentage, childrenCachePercentage, diffCachePercentage, cacheSegmentCount, cacheStackMoveDistance, blobCacheSize, persistentCache, journalCache, customBlobStore, journalGCInterval, journalGCMaxAge, prefetchExternalChanges, role, versionGcMaxAgeInSecs, versionGCExpression, versionGCTimeLimitInSecs, blobGcMaxAgeInSecs, blobTrackSnapshotIntervalInSecs, repositoryHome, maxReplicationLagInSecs, documentStoreType, bundlingDisabled, updateLimit, persistentCacheIncludes, leaseCheckMode);
            };

            Post["/system/console/configMgr/org.apache.jackrabbit.oak.plugins.document.DocumentNodeStoreServicePreset"] = parameters =>
            {
                var post = Parameters.ValueOf<bool?>(parameters, Context.Request, "post", ParameterType.Query);
                var apply = Parameters.ValueOf<bool?>(parameters, Context.Request, "apply", ParameterType.Query);
                var delete = Parameters.ValueOf<bool?>(parameters, Context.Request, "delete", ParameterType.Query);
                var action = Parameters.ValueOf<string>(parameters, Context.Request, "action", ParameterType.Query);
                var location = Parameters.ValueOf<string>(parameters, Context.Request, "location", ParameterType.Query);
                var propertylist = Parameters.ValueOf<List<string>>(parameters, Context.Request, "propertylist", ParameterType.Query);
                var persistentCacheIncludes = Parameters.ValueOf<List<string>>(parameters, Context.Request, "persistentCacheIncludes", ParameterType.Query);
                return service.OrgApacheJackrabbitOakPluginsDocumentDocumentNodeStoreServicePre(Context, post, apply, delete, action, location, propertylist, persistentCacheIncludes);
            };

            Post["/system/console/configMgr/org.apache.jackrabbit.oak.plugins.document.secondary.SecondaryStoreCacheService"] = parameters =>
            {
                var post = Parameters.ValueOf<bool?>(parameters, Context.Request, "post", ParameterType.Query);
                var apply = Parameters.ValueOf<bool?>(parameters, Context.Request, "apply", ParameterType.Query);
                var delete = Parameters.ValueOf<bool?>(parameters, Context.Request, "delete", ParameterType.Query);
                var action = Parameters.ValueOf<string>(parameters, Context.Request, "action", ParameterType.Query);
                var location = Parameters.ValueOf<string>(parameters, Context.Request, "location", ParameterType.Query);
                var propertylist = Parameters.ValueOf<List<string>>(parameters, Context.Request, "propertylist", ParameterType.Query);
                var includedPaths = Parameters.ValueOf<List<string>>(parameters, Context.Request, "includedPaths", ParameterType.Query);
                var enableAsyncObserver = Parameters.ValueOf<bool?>(parameters, Context.Request, "enableAsyncObserver", ParameterType.Query);
                var observerQueueSize = Parameters.ValueOf<int?>(parameters, Context.Request, "observerQueueSize", ParameterType.Query);
                return service.OrgApacheJackrabbitOakPluginsDocumentSecondarySecondaryStoreCac(Context, post, apply, delete, action, location, propertylist, includedPaths, enableAsyncObserver, observerQueueSize);
            };

            Post["/system/console/configMgr/org.apache.jackrabbit.oak.plugins.index.AsyncIndexerService"] = parameters =>
            {
                var post = Parameters.ValueOf<bool?>(parameters, Context.Request, "post", ParameterType.Query);
                var apply = Parameters.ValueOf<bool?>(parameters, Context.Request, "apply", ParameterType.Query);
                var delete = Parameters.ValueOf<bool?>(parameters, Context.Request, "delete", ParameterType.Query);
                var action = Parameters.ValueOf<string>(parameters, Context.Request, "action", ParameterType.Query);
                var location = Parameters.ValueOf<string>(parameters, Context.Request, "location", ParameterType.Query);
                var propertylist = Parameters.ValueOf<List<string>>(parameters, Context.Request, "propertylist", ParameterType.Query);
                var asyncConfigs = Parameters.ValueOf<List<string>>(parameters, Context.Request, "asyncConfigs", ParameterType.Query);
                var leaseTimeOutMinutes = Parameters.ValueOf<int?>(parameters, Context.Request, "leaseTimeOutMinutes", ParameterType.Query);
                var failingIndexTimeoutSeconds = Parameters.ValueOf<int?>(parameters, Context.Request, "failingIndexTimeoutSeconds", ParameterType.Query);
                var errorWarnIntervalSeconds = Parameters.ValueOf<int?>(parameters, Context.Request, "errorWarnIntervalSeconds", ParameterType.Query);
                return service.OrgApacheJackrabbitOakPluginsIndexAsyncIndexerService(Context, post, apply, delete, action, location, propertylist, asyncConfigs, leaseTimeOutMinutes, failingIndexTimeoutSeconds, errorWarnIntervalSeconds);
            };

            Post["/system/console/configMgr/org.apache.jackrabbit.oak.plugins.index.lucene.LuceneIndexProviderService"] = parameters =>
            {
                var post = Parameters.ValueOf<bool?>(parameters, Context.Request, "post", ParameterType.Query);
                var apply = Parameters.ValueOf<bool?>(parameters, Context.Request, "apply", ParameterType.Query);
                var delete = Parameters.ValueOf<bool?>(parameters, Context.Request, "delete", ParameterType.Query);
                var action = Parameters.ValueOf<string>(parameters, Context.Request, "action", ParameterType.Query);
                var location = Parameters.ValueOf<string>(parameters, Context.Request, "location", ParameterType.Query);
                var propertylist = Parameters.ValueOf<List<string>>(parameters, Context.Request, "propertylist", ParameterType.Query);
                var disabled = Parameters.ValueOf<bool?>(parameters, Context.Request, "disabled", ParameterType.Query);
                var debug = Parameters.ValueOf<bool?>(parameters, Context.Request, "debug", ParameterType.Query);
                var localIndexDir = Parameters.ValueOf<string>(parameters, Context.Request, "localIndexDir", ParameterType.Query);
                var enableOpenIndexAsync = Parameters.ValueOf<bool?>(parameters, Context.Request, "enableOpenIndexAsync", ParameterType.Query);
                var threadPoolSize = Parameters.ValueOf<int?>(parameters, Context.Request, "threadPoolSize", ParameterType.Query);
                var prefetchIndexFiles = Parameters.ValueOf<bool?>(parameters, Context.Request, "prefetchIndexFiles", ParameterType.Query);
                var extractedTextCacheSizeInMB = Parameters.ValueOf<int?>(parameters, Context.Request, "extractedTextCacheSizeInMB", ParameterType.Query);
                var extractedTextCacheExpiryInSecs = Parameters.ValueOf<int?>(parameters, Context.Request, "extractedTextCacheExpiryInSecs", ParameterType.Query);
                var alwaysUsePreExtractedCache = Parameters.ValueOf<bool?>(parameters, Context.Request, "alwaysUsePreExtractedCache", ParameterType.Query);
                var booleanClauseLimit = Parameters.ValueOf<int?>(parameters, Context.Request, "booleanClauseLimit", ParameterType.Query);
                var enableHybridIndexing = Parameters.ValueOf<bool?>(parameters, Context.Request, "enableHybridIndexing", ParameterType.Query);
                var hybridQueueSize = Parameters.ValueOf<int?>(parameters, Context.Request, "hybridQueueSize", ParameterType.Query);
                var disableStoredIndexDefinition = Parameters.ValueOf<bool?>(parameters, Context.Request, "disableStoredIndexDefinition", ParameterType.Query);
                var deletedBlobsCollectionEnabled = Parameters.ValueOf<bool?>(parameters, Context.Request, "deletedBlobsCollectionEnabled", ParameterType.Query);
                var propIndexCleanerIntervalInSecs = Parameters.ValueOf<int?>(parameters, Context.Request, "propIndexCleanerIntervalInSecs", ParameterType.Query);
                var enableSingleBlobIndexFiles = Parameters.ValueOf<bool?>(parameters, Context.Request, "enableSingleBlobIndexFiles", ParameterType.Query);
                return service.OrgApacheJackrabbitOakPluginsIndexLuceneLuceneIndexProviderServ(Context, post, apply, delete, action, location, propertylist, disabled, debug, localIndexDir, enableOpenIndexAsync, threadPoolSize, prefetchIndexFiles, extractedTextCacheSizeInMB, extractedTextCacheExpiryInSecs, alwaysUsePreExtractedCache, booleanClauseLimit, enableHybridIndexing, hybridQueueSize, disableStoredIndexDefinition, deletedBlobsCollectionEnabled, propIndexCleanerIntervalInSecs, enableSingleBlobIndexFiles);
            };

            Post["/system/console/configMgr/org.apache.jackrabbit.oak.plugins.index.solr.osgi.EmbeddedSolrServerConfigurationProvider"] = parameters =>
            {
                var post = Parameters.ValueOf<bool?>(parameters, Context.Request, "post", ParameterType.Query);
                var apply = Parameters.ValueOf<bool?>(parameters, Context.Request, "apply", ParameterType.Query);
                var delete = Parameters.ValueOf<bool?>(parameters, Context.Request, "delete", ParameterType.Query);
                var action = Parameters.ValueOf<string>(parameters, Context.Request, "action", ParameterType.Query);
                var location = Parameters.ValueOf<string>(parameters, Context.Request, "location", ParameterType.Query);
                var propertylist = Parameters.ValueOf<List<string>>(parameters, Context.Request, "propertylist", ParameterType.Query);
                var solrHomePath = Parameters.ValueOf<string>(parameters, Context.Request, "solrHomePath", ParameterType.Query);
                var solrCoreName = Parameters.ValueOf<string>(parameters, Context.Request, "solrCoreName", ParameterType.Query);
                return service.OrgApacheJackrabbitOakPluginsIndexSolrOsgiEmbeddedSolrServerCo(Context, post, apply, delete, action, location, propertylist, solrHomePath, solrCoreName);
            };

            Post["/system/console/configMgr/org.apache.jackrabbit.oak.plugins.index.solr.osgi.NodeStateSolrServersObserverService"] = parameters =>
            {
                var post = Parameters.ValueOf<bool?>(parameters, Context.Request, "post", ParameterType.Query);
                var apply = Parameters.ValueOf<bool?>(parameters, Context.Request, "apply", ParameterType.Query);
                var delete = Parameters.ValueOf<bool?>(parameters, Context.Request, "delete", ParameterType.Query);
                var action = Parameters.ValueOf<string>(parameters, Context.Request, "action", ParameterType.Query);
                var location = Parameters.ValueOf<string>(parameters, Context.Request, "location", ParameterType.Query);
                var propertylist = Parameters.ValueOf<List<string>>(parameters, Context.Request, "propertylist", ParameterType.Query);
                var enabled = Parameters.ValueOf<bool?>(parameters, Context.Request, "enabled", ParameterType.Query);
                return service.OrgApacheJackrabbitOakPluginsIndexSolrOsgiNodeStateSolrServers(Context, post, apply, delete, action, location, propertylist, enabled);
            };

            Post["/system/console/configMgr/org.apache.jackrabbit.oak.plugins.index.solr.osgi.OakSolrConfigurationProviderService"] = parameters =>
            {
                var post = Parameters.ValueOf<bool?>(parameters, Context.Request, "post", ParameterType.Query);
                var apply = Parameters.ValueOf<bool?>(parameters, Context.Request, "apply", ParameterType.Query);
                var delete = Parameters.ValueOf<bool?>(parameters, Context.Request, "delete", ParameterType.Query);
                var action = Parameters.ValueOf<string>(parameters, Context.Request, "action", ParameterType.Query);
                var location = Parameters.ValueOf<string>(parameters, Context.Request, "location", ParameterType.Query);
                var propertylist = Parameters.ValueOf<List<string>>(parameters, Context.Request, "propertylist", ParameterType.Query);
                var pathDescField = Parameters.ValueOf<string>(parameters, Context.Request, "pathDescField", ParameterType.Query);
                var pathChildField = Parameters.ValueOf<string>(parameters, Context.Request, "pathChildField", ParameterType.Query);
                var pathParentField = Parameters.ValueOf<string>(parameters, Context.Request, "pathParentField", ParameterType.Query);
                var pathExactField = Parameters.ValueOf<string>(parameters, Context.Request, "pathExactField", ParameterType.Query);
                var catchAllField = Parameters.ValueOf<string>(parameters, Context.Request, "catchAllField", ParameterType.Query);
                var collapsedPathField = Parameters.ValueOf<string>(parameters, Context.Request, "collapsedPathField", ParameterType.Query);
                var pathDepthField = Parameters.ValueOf<string>(parameters, Context.Request, "pathDepthField", ParameterType.Query);
                var commitPolicy = Parameters.ValueOf<string>(parameters, Context.Request, "commitPolicy", ParameterType.Query);
                var rows = Parameters.ValueOf<int?>(parameters, Context.Request, "rows", ParameterType.Query);
                var pathRestrictions = Parameters.ValueOf<bool?>(parameters, Context.Request, "pathRestrictions", ParameterType.Query);
                var propertyRestrictions = Parameters.ValueOf<bool?>(parameters, Context.Request, "propertyRestrictions", ParameterType.Query);
                var primarytypesRestrictions = Parameters.ValueOf<bool?>(parameters, Context.Request, "primarytypesRestrictions", ParameterType.Query);
                var ignoredProperties = Parameters.ValueOf<List<string>>(parameters, Context.Request, "ignoredProperties", ParameterType.Query);
                var usedProperties = Parameters.ValueOf<List<string>>(parameters, Context.Request, "usedProperties", ParameterType.Query);
                var typeMappings = Parameters.ValueOf<List<string>>(parameters, Context.Request, "typeMappings", ParameterType.Query);
                var propertyMappings = Parameters.ValueOf<List<string>>(parameters, Context.Request, "propertyMappings", ParameterType.Query);
                var collapseJcrcontentNodes = Parameters.ValueOf<bool?>(parameters, Context.Request, "collapseJcrcontentNodes", ParameterType.Query);
                return service.OrgApacheJackrabbitOakPluginsIndexSolrOsgiOakSolrConfiguration(Context, post, apply, delete, action, location, propertylist, pathDescField, pathChildField, pathParentField, pathExactField, catchAllField, collapsedPathField, pathDepthField, commitPolicy, rows, pathRestrictions, propertyRestrictions, primarytypesRestrictions, ignoredProperties, usedProperties, typeMappings, propertyMappings, collapseJcrcontentNodes);
            };

            Post["/system/console/configMgr/org.apache.jackrabbit.oak.plugins.index.solr.osgi.RemoteSolrServerConfigurationProvider"] = parameters =>
            {
                var post = Parameters.ValueOf<bool?>(parameters, Context.Request, "post", ParameterType.Query);
                var apply = Parameters.ValueOf<bool?>(parameters, Context.Request, "apply", ParameterType.Query);
                var delete = Parameters.ValueOf<bool?>(parameters, Context.Request, "delete", ParameterType.Query);
                var action = Parameters.ValueOf<string>(parameters, Context.Request, "action", ParameterType.Query);
                var location = Parameters.ValueOf<string>(parameters, Context.Request, "location", ParameterType.Query);
                var propertylist = Parameters.ValueOf<List<string>>(parameters, Context.Request, "propertylist", ParameterType.Query);
                var solrHttpUrl = Parameters.ValueOf<string>(parameters, Context.Request, "solrHttpUrl", ParameterType.Query);
                var solrZkHost = Parameters.ValueOf<string>(parameters, Context.Request, "solrZkHost", ParameterType.Query);
                var solrCollection = Parameters.ValueOf<string>(parameters, Context.Request, "solrCollection", ParameterType.Query);
                var solrSocketTimeout = Parameters.ValueOf<int?>(parameters, Context.Request, "solrSocketTimeout", ParameterType.Query);
                var solrConnectionTimeout = Parameters.ValueOf<int?>(parameters, Context.Request, "solrConnectionTimeout", ParameterType.Query);
                var solrShardsNo = Parameters.ValueOf<int?>(parameters, Context.Request, "solrShardsNo", ParameterType.Query);
                var solrReplicationFactor = Parameters.ValueOf<int?>(parameters, Context.Request, "solrReplicationFactor", ParameterType.Query);
                var solrConfDir = Parameters.ValueOf<string>(parameters, Context.Request, "solrConfDir", ParameterType.Query);
                return service.OrgApacheJackrabbitOakPluginsIndexSolrOsgiRemoteSolrServerConf(Context, post, apply, delete, action, location, propertylist, solrHttpUrl, solrZkHost, solrCollection, solrSocketTimeout, solrConnectionTimeout, solrShardsNo, solrReplicationFactor, solrConfDir);
            };

            Post["/system/console/configMgr/org.apache.jackrabbit.oak.plugins.index.solr.osgi.SolrQueryIndexProviderService"] = parameters =>
            {
                var post = Parameters.ValueOf<bool?>(parameters, Context.Request, "post", ParameterType.Query);
                var apply = Parameters.ValueOf<bool?>(parameters, Context.Request, "apply", ParameterType.Query);
                var delete = Parameters.ValueOf<bool?>(parameters, Context.Request, "delete", ParameterType.Query);
                var action = Parameters.ValueOf<string>(parameters, Context.Request, "action", ParameterType.Query);
                var location = Parameters.ValueOf<string>(parameters, Context.Request, "location", ParameterType.Query);
                var propertylist = Parameters.ValueOf<List<string>>(parameters, Context.Request, "propertylist", ParameterType.Query);
                var queryAggregation = Parameters.ValueOf<bool?>(parameters, Context.Request, "queryAggregation", ParameterType.Query);
                return service.OrgApacheJackrabbitOakPluginsIndexSolrOsgiSolrQueryIndexProvid(Context, post, apply, delete, action, location, propertylist, queryAggregation);
            };

            Post["/system/console/configMgr/org.apache.jackrabbit.oak.plugins.index.solr.osgi.SolrServerProviderService"] = parameters =>
            {
                var post = Parameters.ValueOf<bool?>(parameters, Context.Request, "post", ParameterType.Query);
                var apply = Parameters.ValueOf<bool?>(parameters, Context.Request, "apply", ParameterType.Query);
                var delete = Parameters.ValueOf<bool?>(parameters, Context.Request, "delete", ParameterType.Query);
                var action = Parameters.ValueOf<string>(parameters, Context.Request, "action", ParameterType.Query);
                var location = Parameters.ValueOf<string>(parameters, Context.Request, "location", ParameterType.Query);
                var propertylist = Parameters.ValueOf<List<string>>(parameters, Context.Request, "propertylist", ParameterType.Query);
                var serverType = Parameters.ValueOf<string>(parameters, Context.Request, "serverType", ParameterType.Query);
                return service.OrgApacheJackrabbitOakPluginsIndexSolrOsgiSolrServerProviderSe(Context, post, apply, delete, action, location, propertylist, serverType);
            };

            Post["/system/console/configMgr/org.apache.jackrabbit.oak.plugins.metric.StatisticsProviderFactory"] = parameters =>
            {
                var post = Parameters.ValueOf<bool?>(parameters, Context.Request, "post", ParameterType.Query);
                var apply = Parameters.ValueOf<bool?>(parameters, Context.Request, "apply", ParameterType.Query);
                var delete = Parameters.ValueOf<bool?>(parameters, Context.Request, "delete", ParameterType.Query);
                var action = Parameters.ValueOf<string>(parameters, Context.Request, "action", ParameterType.Query);
                var location = Parameters.ValueOf<string>(parameters, Context.Request, "location", ParameterType.Query);
                var propertylist = Parameters.ValueOf<List<string>>(parameters, Context.Request, "propertylist", ParameterType.Query);
                var providerType = Parameters.ValueOf<string>(parameters, Context.Request, "providerType", ParameterType.Query);
                return service.OrgApacheJackrabbitOakPluginsMetricStatisticsProviderFactory(Context, post, apply, delete, action, location, propertylist, providerType);
            };

            Post["/system/console/configMgr/org.apache.jackrabbit.oak.plugins.observation.ChangeCollectorProvider"] = parameters =>
            {
                var post = Parameters.ValueOf<bool?>(parameters, Context.Request, "post", ParameterType.Query);
                var apply = Parameters.ValueOf<bool?>(parameters, Context.Request, "apply", ParameterType.Query);
                var delete = Parameters.ValueOf<bool?>(parameters, Context.Request, "delete", ParameterType.Query);
                var action = Parameters.ValueOf<string>(parameters, Context.Request, "action", ParameterType.Query);
                var location = Parameters.ValueOf<string>(parameters, Context.Request, "location", ParameterType.Query);
                var propertylist = Parameters.ValueOf<List<string>>(parameters, Context.Request, "propertylist", ParameterType.Query);
                var maxItems = Parameters.ValueOf<int?>(parameters, Context.Request, "maxItems", ParameterType.Query);
                var maxPathDepth = Parameters.ValueOf<int?>(parameters, Context.Request, "maxPathDepth", ParameterType.Query);
                var enabled = Parameters.ValueOf<bool?>(parameters, Context.Request, "enabled", ParameterType.Query);
                return service.OrgApacheJackrabbitOakPluginsObservationChangeCollectorProvider(Context, post, apply, delete, action, location, propertylist, maxItems, maxPathDepth, enabled);
            };

            Post["/system/console/configMgr/org.apache.jackrabbit.oak.query.QueryEngineSettingsService"] = parameters =>
            {
                var post = Parameters.ValueOf<bool?>(parameters, Context.Request, "post", ParameterType.Query);
                var apply = Parameters.ValueOf<bool?>(parameters, Context.Request, "apply", ParameterType.Query);
                var delete = Parameters.ValueOf<bool?>(parameters, Context.Request, "delete", ParameterType.Query);
                var action = Parameters.ValueOf<string>(parameters, Context.Request, "action", ParameterType.Query);
                var location = Parameters.ValueOf<string>(parameters, Context.Request, "location", ParameterType.Query);
                var propertylist = Parameters.ValueOf<List<string>>(parameters, Context.Request, "propertylist", ParameterType.Query);
                var queryLimitInMemory = Parameters.ValueOf<int?>(parameters, Context.Request, "queryLimitInMemory", ParameterType.Query);
                var queryLimitReads = Parameters.ValueOf<int?>(parameters, Context.Request, "queryLimitReads", ParameterType.Query);
                var queryFailTraversal = Parameters.ValueOf<bool?>(parameters, Context.Request, "queryFailTraversal", ParameterType.Query);
                var fastQuerySize = Parameters.ValueOf<bool?>(parameters, Context.Request, "fastQuerySize", ParameterType.Query);
                return service.OrgApacheJackrabbitOakQueryQueryEngineSettingsService(Context, post, apply, delete, action, location, propertylist, queryLimitInMemory, queryLimitReads, queryFailTraversal, fastQuerySize);
            };

            Post["/system/console/configMgr/org.apache.jackrabbit.oak.security.authentication.AuthenticationConfigurationImpl"] = parameters =>
            {
                var post = Parameters.ValueOf<bool?>(parameters, Context.Request, "post", ParameterType.Query);
                var apply = Parameters.ValueOf<bool?>(parameters, Context.Request, "apply", ParameterType.Query);
                var delete = Parameters.ValueOf<bool?>(parameters, Context.Request, "delete", ParameterType.Query);
                var action = Parameters.ValueOf<string>(parameters, Context.Request, "action", ParameterType.Query);
                var location = Parameters.ValueOf<string>(parameters, Context.Request, "location", ParameterType.Query);
                var propertylist = Parameters.ValueOf<List<string>>(parameters, Context.Request, "propertylist", ParameterType.Query);
                var orgApacheJackrabbitOakAuthenticationAppName = Parameters.ValueOf<string>(parameters, Context.Request, "orgApacheJackrabbitOakAuthenticationAppName", ParameterType.Query);
                var orgApacheJackrabbitOakAuthenticationConfigSpiName = Parameters.ValueOf<string>(parameters, Context.Request, "orgApacheJackrabbitOakAuthenticationConfigSpiName", ParameterType.Query);
                return service.OrgApacheJackrabbitOakSecurityAuthenticationAuthenticationConfig(Context, post, apply, delete, action, location, propertylist, orgApacheJackrabbitOakAuthenticationAppName, orgApacheJackrabbitOakAuthenticationConfigSpiName);
            };

            Post["/system/console/configMgr/org.apache.jackrabbit.oak.security.authentication.ldap.impl.LdapIdentityProvider"] = parameters =>
            {
                var post = Parameters.ValueOf<bool?>(parameters, Context.Request, "post", ParameterType.Query);
                var apply = Parameters.ValueOf<bool?>(parameters, Context.Request, "apply", ParameterType.Query);
                var delete = Parameters.ValueOf<bool?>(parameters, Context.Request, "delete", ParameterType.Query);
                var action = Parameters.ValueOf<string>(parameters, Context.Request, "action", ParameterType.Query);
                var location = Parameters.ValueOf<string>(parameters, Context.Request, "location", ParameterType.Query);
                var propertylist = Parameters.ValueOf<List<string>>(parameters, Context.Request, "propertylist", ParameterType.Query);
                var providerName = Parameters.ValueOf<string>(parameters, Context.Request, "providerName", ParameterType.Query);
                var hostName = Parameters.ValueOf<string>(parameters, Context.Request, "hostName", ParameterType.Query);
                var hostPort = Parameters.ValueOf<int?>(parameters, Context.Request, "hostPort", ParameterType.Query);
                var hostSsl = Parameters.ValueOf<bool?>(parameters, Context.Request, "hostSsl", ParameterType.Query);
                var hostTls = Parameters.ValueOf<bool?>(parameters, Context.Request, "hostTls", ParameterType.Query);
                var hostNoCertCheck = Parameters.ValueOf<bool?>(parameters, Context.Request, "hostNoCertCheck", ParameterType.Query);
                var bindDn = Parameters.ValueOf<string>(parameters, Context.Request, "bindDn", ParameterType.Query);
                var bindPassword = Parameters.ValueOf<string>(parameters, Context.Request, "bindPassword", ParameterType.Query);
                var searchTimeout = Parameters.ValueOf<string>(parameters, Context.Request, "searchTimeout", ParameterType.Query);
                var adminPoolMaxActive = Parameters.ValueOf<int?>(parameters, Context.Request, "adminPoolMaxActive", ParameterType.Query);
                var adminPoolLookupOnValidate = Parameters.ValueOf<bool?>(parameters, Context.Request, "adminPoolLookupOnValidate", ParameterType.Query);
                var userPoolMaxActive = Parameters.ValueOf<int?>(parameters, Context.Request, "userPoolMaxActive", ParameterType.Query);
                var userPoolLookupOnValidate = Parameters.ValueOf<bool?>(parameters, Context.Request, "userPoolLookupOnValidate", ParameterType.Query);
                var userBaseDN = Parameters.ValueOf<string>(parameters, Context.Request, "userBaseDN", ParameterType.Query);
                var userObjectclass = Parameters.ValueOf<List<string>>(parameters, Context.Request, "userObjectclass", ParameterType.Query);
                var userIdAttribute = Parameters.ValueOf<string>(parameters, Context.Request, "userIdAttribute", ParameterType.Query);
                var userExtraFilter = Parameters.ValueOf<string>(parameters, Context.Request, "userExtraFilter", ParameterType.Query);
                var userMakeDnPath = Parameters.ValueOf<bool?>(parameters, Context.Request, "userMakeDnPath", ParameterType.Query);
                var groupBaseDN = Parameters.ValueOf<string>(parameters, Context.Request, "groupBaseDN", ParameterType.Query);
                var groupObjectclass = Parameters.ValueOf<List<string>>(parameters, Context.Request, "groupObjectclass", ParameterType.Query);
                var groupNameAttribute = Parameters.ValueOf<string>(parameters, Context.Request, "groupNameAttribute", ParameterType.Query);
                var groupExtraFilter = Parameters.ValueOf<string>(parameters, Context.Request, "groupExtraFilter", ParameterType.Query);
                var groupMakeDnPath = Parameters.ValueOf<bool?>(parameters, Context.Request, "groupMakeDnPath", ParameterType.Query);
                var groupMemberAttribute = Parameters.ValueOf<string>(parameters, Context.Request, "groupMemberAttribute", ParameterType.Query);
                var useUidForExtId = Parameters.ValueOf<bool?>(parameters, Context.Request, "useUidForExtId", ParameterType.Query);
                var customattributes = Parameters.ValueOf<List<string>>(parameters, Context.Request, "customattributes", ParameterType.Query);
                return service.OrgApacheJackrabbitOakSecurityAuthenticationLdapImplLdapIdenti(Context, post, apply, delete, action, location, propertylist, providerName, hostName, hostPort, hostSsl, hostTls, hostNoCertCheck, bindDn, bindPassword, searchTimeout, adminPoolMaxActive, adminPoolLookupOnValidate, userPoolMaxActive, userPoolLookupOnValidate, userBaseDN, userObjectclass, userIdAttribute, userExtraFilter, userMakeDnPath, groupBaseDN, groupObjectclass, groupNameAttribute, groupExtraFilter, groupMakeDnPath, groupMemberAttribute, useUidForExtId, customattributes);
            };

            Post["/system/console/configMgr/org.apache.jackrabbit.oak.security.authentication.token.TokenConfigurationImpl"] = parameters =>
            {
                var post = Parameters.ValueOf<bool?>(parameters, Context.Request, "post", ParameterType.Query);
                var apply = Parameters.ValueOf<bool?>(parameters, Context.Request, "apply", ParameterType.Query);
                var delete = Parameters.ValueOf<bool?>(parameters, Context.Request, "delete", ParameterType.Query);
                var action = Parameters.ValueOf<string>(parameters, Context.Request, "action", ParameterType.Query);
                var location = Parameters.ValueOf<string>(parameters, Context.Request, "location", ParameterType.Query);
                var propertylist = Parameters.ValueOf<List<string>>(parameters, Context.Request, "propertylist", ParameterType.Query);
                var tokenExpiration = Parameters.ValueOf<string>(parameters, Context.Request, "tokenExpiration", ParameterType.Query);
                var tokenLength = Parameters.ValueOf<string>(parameters, Context.Request, "tokenLength", ParameterType.Query);
                var tokenRefresh = Parameters.ValueOf<bool?>(parameters, Context.Request, "tokenRefresh", ParameterType.Query);
                var tokenCleanupThreshold = Parameters.ValueOf<int?>(parameters, Context.Request, "tokenCleanupThreshold", ParameterType.Query);
                var passwordHashAlgorithm = Parameters.ValueOf<string>(parameters, Context.Request, "passwordHashAlgorithm", ParameterType.Query);
                var passwordHashIterations = Parameters.ValueOf<int?>(parameters, Context.Request, "passwordHashIterations", ParameterType.Query);
                var passwordSaltSize = Parameters.ValueOf<int?>(parameters, Context.Request, "passwordSaltSize", ParameterType.Query);
                return service.OrgApacheJackrabbitOakSecurityAuthenticationTokenTokenConfigura(Context, post, apply, delete, action, location, propertylist, tokenExpiration, tokenLength, tokenRefresh, tokenCleanupThreshold, passwordHashAlgorithm, passwordHashIterations, passwordSaltSize);
            };

            Post["/system/console/configMgr/org.apache.jackrabbit.oak.security.authorization.AuthorizationConfigurationImpl"] = parameters =>
            {
                var post = Parameters.ValueOf<bool?>(parameters, Context.Request, "post", ParameterType.Query);
                var apply = Parameters.ValueOf<bool?>(parameters, Context.Request, "apply", ParameterType.Query);
                var delete = Parameters.ValueOf<bool?>(parameters, Context.Request, "delete", ParameterType.Query);
                var action = Parameters.ValueOf<string>(parameters, Context.Request, "action", ParameterType.Query);
                var location = Parameters.ValueOf<string>(parameters, Context.Request, "location", ParameterType.Query);
                var propertylist = Parameters.ValueOf<List<string>>(parameters, Context.Request, "propertylist", ParameterType.Query);
                var permissionsJr2 = Parameters.ValueOf<string>(parameters, Context.Request, "permissionsJr2", ParameterType.Query);
                var importBehavior = Parameters.ValueOf<string>(parameters, Context.Request, "importBehavior", ParameterType.Query);
                var readPaths = Parameters.ValueOf<List<string>>(parameters, Context.Request, "readPaths", ParameterType.Query);
                var administrativePrincipals = Parameters.ValueOf<List<string>>(parameters, Context.Request, "administrativePrincipals", ParameterType.Query);
                var configurationRanking = Parameters.ValueOf<int?>(parameters, Context.Request, "configurationRanking", ParameterType.Query);
                return service.OrgApacheJackrabbitOakSecurityAuthorizationAuthorizationConfigur(Context, post, apply, delete, action, location, propertylist, permissionsJr2, importBehavior, readPaths, administrativePrincipals, configurationRanking);
            };

            Post["/system/console/configMgr/org.apache.jackrabbit.oak.security.internal.SecurityProviderRegistration"] = parameters =>
            {
                var post = Parameters.ValueOf<bool?>(parameters, Context.Request, "post", ParameterType.Query);
                var apply = Parameters.ValueOf<bool?>(parameters, Context.Request, "apply", ParameterType.Query);
                var delete = Parameters.ValueOf<bool?>(parameters, Context.Request, "delete", ParameterType.Query);
                var action = Parameters.ValueOf<string>(parameters, Context.Request, "action", ParameterType.Query);
                var location = Parameters.ValueOf<string>(parameters, Context.Request, "location", ParameterType.Query);
                var propertylist = Parameters.ValueOf<List<string>>(parameters, Context.Request, "propertylist", ParameterType.Query);
                var requiredServicePids = Parameters.ValueOf<List<string>>(parameters, Context.Request, "requiredServicePids", ParameterType.Query);
                var authorizationCompositionType = Parameters.ValueOf<string>(parameters, Context.Request, "authorizationCompositionType", ParameterType.Query);
                return service.OrgApacheJackrabbitOakSecurityInternalSecurityProviderRegistrati(Context, post, apply, delete, action, location, propertylist, requiredServicePids, authorizationCompositionType);
            };

            Post["/system/console/configMgr/org.apache.jackrabbit.oak.security.user.RandomAuthorizableNodeName"] = parameters =>
            {
                var post = Parameters.ValueOf<bool?>(parameters, Context.Request, "post", ParameterType.Query);
                var apply = Parameters.ValueOf<bool?>(parameters, Context.Request, "apply", ParameterType.Query);
                var delete = Parameters.ValueOf<bool?>(parameters, Context.Request, "delete", ParameterType.Query);
                var action = Parameters.ValueOf<string>(parameters, Context.Request, "action", ParameterType.Query);
                var location = Parameters.ValueOf<string>(parameters, Context.Request, "location", ParameterType.Query);
                var propertylist = Parameters.ValueOf<List<string>>(parameters, Context.Request, "propertylist", ParameterType.Query);
                var length = Parameters.ValueOf<int?>(parameters, Context.Request, "length", ParameterType.Query);
                return service.OrgApacheJackrabbitOakSecurityUserRandomAuthorizableNodeName(Context, post, apply, delete, action, location, propertylist, length);
            };

            Post["/system/console/configMgr/org.apache.jackrabbit.oak.security.user.UserConfigurationImpl"] = parameters =>
            {
                var post = Parameters.ValueOf<bool?>(parameters, Context.Request, "post", ParameterType.Query);
                var apply = Parameters.ValueOf<bool?>(parameters, Context.Request, "apply", ParameterType.Query);
                var delete = Parameters.ValueOf<bool?>(parameters, Context.Request, "delete", ParameterType.Query);
                var action = Parameters.ValueOf<string>(parameters, Context.Request, "action", ParameterType.Query);
                var location = Parameters.ValueOf<string>(parameters, Context.Request, "location", ParameterType.Query);
                var propertylist = Parameters.ValueOf<List<string>>(parameters, Context.Request, "propertylist", ParameterType.Query);
                var usersPath = Parameters.ValueOf<string>(parameters, Context.Request, "usersPath", ParameterType.Query);
                var groupsPath = Parameters.ValueOf<string>(parameters, Context.Request, "groupsPath", ParameterType.Query);
                var systemRelativePath = Parameters.ValueOf<string>(parameters, Context.Request, "systemRelativePath", ParameterType.Query);
                var defaultDepth = Parameters.ValueOf<int?>(parameters, Context.Request, "defaultDepth", ParameterType.Query);
                var importBehavior = Parameters.ValueOf<string>(parameters, Context.Request, "importBehavior", ParameterType.Query);
                var passwordHashAlgorithm = Parameters.ValueOf<string>(parameters, Context.Request, "passwordHashAlgorithm", ParameterType.Query);
                var passwordHashIterations = Parameters.ValueOf<int?>(parameters, Context.Request, "passwordHashIterations", ParameterType.Query);
                var passwordSaltSize = Parameters.ValueOf<int?>(parameters, Context.Request, "passwordSaltSize", ParameterType.Query);
                var omitAdminPw = Parameters.ValueOf<bool?>(parameters, Context.Request, "omitAdminPw", ParameterType.Query);
                var supportAutoSave = Parameters.ValueOf<bool?>(parameters, Context.Request, "supportAutoSave", ParameterType.Query);
                var passwordMaxAge = Parameters.ValueOf<int?>(parameters, Context.Request, "passwordMaxAge", ParameterType.Query);
                var initialPasswordChange = Parameters.ValueOf<bool?>(parameters, Context.Request, "initialPasswordChange", ParameterType.Query);
                var passwordHistorySize = Parameters.ValueOf<int?>(parameters, Context.Request, "passwordHistorySize", ParameterType.Query);
                var passwordExpiryForAdmin = Parameters.ValueOf<bool?>(parameters, Context.Request, "passwordExpiryForAdmin", ParameterType.Query);
                var cacheExpiration = Parameters.ValueOf<int?>(parameters, Context.Request, "cacheExpiration", ParameterType.Query);
                var enableRFC7613UsercaseMappedProfile = Parameters.ValueOf<bool?>(parameters, Context.Request, "enableRFC7613UsercaseMappedProfile", ParameterType.Query);
                return service.OrgApacheJackrabbitOakSecurityUserUserConfigurationImpl(Context, post, apply, delete, action, location, propertylist, usersPath, groupsPath, systemRelativePath, defaultDepth, importBehavior, passwordHashAlgorithm, passwordHashIterations, passwordSaltSize, omitAdminPw, supportAutoSave, passwordMaxAge, initialPasswordChange, passwordHistorySize, passwordExpiryForAdmin, cacheExpiration, enableRFC7613UsercaseMappedProfile);
            };

            Post["/system/console/configMgr/org.apache.jackrabbit.oak.segment.azure.AzureSegmentStoreService"] = parameters =>
            {
                var post = Parameters.ValueOf<bool?>(parameters, Context.Request, "post", ParameterType.Query);
                var apply = Parameters.ValueOf<bool?>(parameters, Context.Request, "apply", ParameterType.Query);
                var delete = Parameters.ValueOf<bool?>(parameters, Context.Request, "delete", ParameterType.Query);
                var action = Parameters.ValueOf<string>(parameters, Context.Request, "action", ParameterType.Query);
                var location = Parameters.ValueOf<string>(parameters, Context.Request, "location", ParameterType.Query);
                var propertylist = Parameters.ValueOf<List<string>>(parameters, Context.Request, "propertylist", ParameterType.Query);
                var accountName = Parameters.ValueOf<string>(parameters, Context.Request, "accountName", ParameterType.Query);
                var containerName = Parameters.ValueOf<string>(parameters, Context.Request, "containerName", ParameterType.Query);
                var accessKey = Parameters.ValueOf<string>(parameters, Context.Request, "accessKey", ParameterType.Query);
                var rootPath = Parameters.ValueOf<string>(parameters, Context.Request, "rootPath", ParameterType.Query);
                var connectionURL = Parameters.ValueOf<string>(parameters, Context.Request, "connectionURL", ParameterType.Query);
                return service.OrgApacheJackrabbitOakSegmentAzureAzureSegmentStoreService(Context, post, apply, delete, action, location, propertylist, accountName, containerName, accessKey, rootPath, connectionURL);
            };

            Post["/system/console/configMgr/org.apache.jackrabbit.oak.segment.SegmentNodeStoreFactory"] = parameters =>
            {
                var post = Parameters.ValueOf<bool?>(parameters, Context.Request, "post", ParameterType.Query);
                var apply = Parameters.ValueOf<bool?>(parameters, Context.Request, "apply", ParameterType.Query);
                var delete = Parameters.ValueOf<bool?>(parameters, Context.Request, "delete", ParameterType.Query);
                var action = Parameters.ValueOf<string>(parameters, Context.Request, "action", ParameterType.Query);
                var location = Parameters.ValueOf<string>(parameters, Context.Request, "location", ParameterType.Query);
                var propertylist = Parameters.ValueOf<List<string>>(parameters, Context.Request, "propertylist", ParameterType.Query);
                var repositoryHome = Parameters.ValueOf<string>(parameters, Context.Request, "repositoryHome", ParameterType.Query);
                var tarmkMode = Parameters.ValueOf<string>(parameters, Context.Request, "tarmkMode", ParameterType.Query);
                var tarmkSize = Parameters.ValueOf<int?>(parameters, Context.Request, "tarmkSize", ParameterType.Query);
                var segmentCacheSize = Parameters.ValueOf<int?>(parameters, Context.Request, "segmentCacheSize", ParameterType.Query);
                var stringCacheSize = Parameters.ValueOf<int?>(parameters, Context.Request, "stringCacheSize", ParameterType.Query);
                var templateCacheSize = Parameters.ValueOf<int?>(parameters, Context.Request, "templateCacheSize", ParameterType.Query);
                var stringDeduplicationCacheSize = Parameters.ValueOf<int?>(parameters, Context.Request, "stringDeduplicationCacheSize", ParameterType.Query);
                var templateDeduplicationCacheSize = Parameters.ValueOf<int?>(parameters, Context.Request, "templateDeduplicationCacheSize", ParameterType.Query);
                var nodeDeduplicationCacheSize = Parameters.ValueOf<int?>(parameters, Context.Request, "nodeDeduplicationCacheSize", ParameterType.Query);
                var pauseCompaction = Parameters.ValueOf<bool?>(parameters, Context.Request, "pauseCompaction", ParameterType.Query);
                var compactionRetryCount = Parameters.ValueOf<int?>(parameters, Context.Request, "compactionRetryCount", ParameterType.Query);
                var compactionForceTimeout = Parameters.ValueOf<int?>(parameters, Context.Request, "compactionForceTimeout", ParameterType.Query);
                var compactionSizeDeltaEstimation = Parameters.ValueOf<int?>(parameters, Context.Request, "compactionSizeDeltaEstimation", ParameterType.Query);
                var compactionDisableEstimation = Parameters.ValueOf<bool?>(parameters, Context.Request, "compactionDisableEstimation", ParameterType.Query);
                var compactionRetainedGenerations = Parameters.ValueOf<int?>(parameters, Context.Request, "compactionRetainedGenerations", ParameterType.Query);
                var compactionMemoryThreshold = Parameters.ValueOf<int?>(parameters, Context.Request, "compactionMemoryThreshold", ParameterType.Query);
                var compactionProgressLog = Parameters.ValueOf<int?>(parameters, Context.Request, "compactionProgressLog", ParameterType.Query);
                var standby = Parameters.ValueOf<bool?>(parameters, Context.Request, "standby", ParameterType.Query);
                var customBlobStore = Parameters.ValueOf<bool?>(parameters, Context.Request, "customBlobStore", ParameterType.Query);
                var customSegmentStore = Parameters.ValueOf<bool?>(parameters, Context.Request, "customSegmentStore", ParameterType.Query);
                var splitPersistence = Parameters.ValueOf<bool?>(parameters, Context.Request, "splitPersistence", ParameterType.Query);
                var repositoryBackupDir = Parameters.ValueOf<string>(parameters, Context.Request, "repositoryBackupDir", ParameterType.Query);
                var blobGcMaxAgeInSecs = Parameters.ValueOf<int?>(parameters, Context.Request, "blobGcMaxAgeInSecs", ParameterType.Query);
                var blobTrackSnapshotIntervalInSecs = Parameters.ValueOf<int?>(parameters, Context.Request, "blobTrackSnapshotIntervalInSecs", ParameterType.Query);
                var role = Parameters.ValueOf<string>(parameters, Context.Request, "role", ParameterType.Query);
                var registerDescriptors = Parameters.ValueOf<bool?>(parameters, Context.Request, "registerDescriptors", ParameterType.Query);
                var dispatchChanges = Parameters.ValueOf<bool?>(parameters, Context.Request, "dispatchChanges", ParameterType.Query);
                return service.OrgApacheJackrabbitOakSegmentSegmentNodeStoreFactory(Context, post, apply, delete, action, location, propertylist, repositoryHome, tarmkMode, tarmkSize, segmentCacheSize, stringCacheSize, templateCacheSize, stringDeduplicationCacheSize, templateDeduplicationCacheSize, nodeDeduplicationCacheSize, pauseCompaction, compactionRetryCount, compactionForceTimeout, compactionSizeDeltaEstimation, compactionDisableEstimation, compactionRetainedGenerations, compactionMemoryThreshold, compactionProgressLog, standby, customBlobStore, customSegmentStore, splitPersistence, repositoryBackupDir, blobGcMaxAgeInSecs, blobTrackSnapshotIntervalInSecs, role, registerDescriptors, dispatchChanges);
            };

            Post["/system/console/configMgr/org.apache.jackrabbit.oak.segment.SegmentNodeStoreMonitorService"] = parameters =>
            {
                var post = Parameters.ValueOf<bool?>(parameters, Context.Request, "post", ParameterType.Query);
                var apply = Parameters.ValueOf<bool?>(parameters, Context.Request, "apply", ParameterType.Query);
                var delete = Parameters.ValueOf<bool?>(parameters, Context.Request, "delete", ParameterType.Query);
                var action = Parameters.ValueOf<string>(parameters, Context.Request, "action", ParameterType.Query);
                var location = Parameters.ValueOf<string>(parameters, Context.Request, "location", ParameterType.Query);
                var propertylist = Parameters.ValueOf<List<string>>(parameters, Context.Request, "propertylist", ParameterType.Query);
                var commitsTrackerWriterGroups = Parameters.ValueOf<List<string>>(parameters, Context.Request, "commitsTrackerWriterGroups", ParameterType.Query);
                return service.OrgApacheJackrabbitOakSegmentSegmentNodeStoreMonitorService(Context, post, apply, delete, action, location, propertylist, commitsTrackerWriterGroups);
            };

            Post["/system/console/configMgr/org.apache.jackrabbit.oak.segment.SegmentNodeStoreService"] = parameters =>
            {
                var post = Parameters.ValueOf<bool?>(parameters, Context.Request, "post", ParameterType.Query);
                var apply = Parameters.ValueOf<bool?>(parameters, Context.Request, "apply", ParameterType.Query);
                var delete = Parameters.ValueOf<bool?>(parameters, Context.Request, "delete", ParameterType.Query);
                var action = Parameters.ValueOf<string>(parameters, Context.Request, "action", ParameterType.Query);
                var location = Parameters.ValueOf<string>(parameters, Context.Request, "location", ParameterType.Query);
                var propertylist = Parameters.ValueOf<List<string>>(parameters, Context.Request, "propertylist", ParameterType.Query);
                var repositoryHome = Parameters.ValueOf<string>(parameters, Context.Request, "repositoryHome", ParameterType.Query);
                var tarmkMode = Parameters.ValueOf<string>(parameters, Context.Request, "tarmkMode", ParameterType.Query);
                var tarmkSize = Parameters.ValueOf<int?>(parameters, Context.Request, "tarmkSize", ParameterType.Query);
                var segmentCacheSize = Parameters.ValueOf<int?>(parameters, Context.Request, "segmentCacheSize", ParameterType.Query);
                var stringCacheSize = Parameters.ValueOf<int?>(parameters, Context.Request, "stringCacheSize", ParameterType.Query);
                var templateCacheSize = Parameters.ValueOf<int?>(parameters, Context.Request, "templateCacheSize", ParameterType.Query);
                var stringDeduplicationCacheSize = Parameters.ValueOf<int?>(parameters, Context.Request, "stringDeduplicationCacheSize", ParameterType.Query);
                var templateDeduplicationCacheSize = Parameters.ValueOf<int?>(parameters, Context.Request, "templateDeduplicationCacheSize", ParameterType.Query);
                var nodeDeduplicationCacheSize = Parameters.ValueOf<int?>(parameters, Context.Request, "nodeDeduplicationCacheSize", ParameterType.Query);
                var pauseCompaction = Parameters.ValueOf<bool?>(parameters, Context.Request, "pauseCompaction", ParameterType.Query);
                var compactionRetryCount = Parameters.ValueOf<int?>(parameters, Context.Request, "compactionRetryCount", ParameterType.Query);
                var compactionForceTimeout = Parameters.ValueOf<int?>(parameters, Context.Request, "compactionForceTimeout", ParameterType.Query);
                var compactionSizeDeltaEstimation = Parameters.ValueOf<int?>(parameters, Context.Request, "compactionSizeDeltaEstimation", ParameterType.Query);
                var compactionDisableEstimation = Parameters.ValueOf<bool?>(parameters, Context.Request, "compactionDisableEstimation", ParameterType.Query);
                var compactionRetainedGenerations = Parameters.ValueOf<int?>(parameters, Context.Request, "compactionRetainedGenerations", ParameterType.Query);
                var compactionMemoryThreshold = Parameters.ValueOf<int?>(parameters, Context.Request, "compactionMemoryThreshold", ParameterType.Query);
                var compactionProgressLog = Parameters.ValueOf<int?>(parameters, Context.Request, "compactionProgressLog", ParameterType.Query);
                var standby = Parameters.ValueOf<bool?>(parameters, Context.Request, "standby", ParameterType.Query);
                var customBlobStore = Parameters.ValueOf<bool?>(parameters, Context.Request, "customBlobStore", ParameterType.Query);
                var customSegmentStore = Parameters.ValueOf<bool?>(parameters, Context.Request, "customSegmentStore", ParameterType.Query);
                var splitPersistence = Parameters.ValueOf<bool?>(parameters, Context.Request, "splitPersistence", ParameterType.Query);
                var repositoryBackupDir = Parameters.ValueOf<string>(parameters, Context.Request, "repositoryBackupDir", ParameterType.Query);
                var blobGcMaxAgeInSecs = Parameters.ValueOf<int?>(parameters, Context.Request, "blobGcMaxAgeInSecs", ParameterType.Query);
                var blobTrackSnapshotIntervalInSecs = Parameters.ValueOf<int?>(parameters, Context.Request, "blobTrackSnapshotIntervalInSecs", ParameterType.Query);
                return service.OrgApacheJackrabbitOakSegmentSegmentNodeStoreService(Context, post, apply, delete, action, location, propertylist, repositoryHome, tarmkMode, tarmkSize, segmentCacheSize, stringCacheSize, templateCacheSize, stringDeduplicationCacheSize, templateDeduplicationCacheSize, nodeDeduplicationCacheSize, pauseCompaction, compactionRetryCount, compactionForceTimeout, compactionSizeDeltaEstimation, compactionDisableEstimation, compactionRetainedGenerations, compactionMemoryThreshold, compactionProgressLog, standby, customBlobStore, customSegmentStore, splitPersistence, repositoryBackupDir, blobGcMaxAgeInSecs, blobTrackSnapshotIntervalInSecs);
            };

            Post["/system/console/configMgr/org.apache.jackrabbit.oak.segment.standby.store.StandbyStoreService"] = parameters =>
            {
                var post = Parameters.ValueOf<bool?>(parameters, Context.Request, "post", ParameterType.Query);
                var apply = Parameters.ValueOf<bool?>(parameters, Context.Request, "apply", ParameterType.Query);
                var delete = Parameters.ValueOf<bool?>(parameters, Context.Request, "delete", ParameterType.Query);
                var action = Parameters.ValueOf<string>(parameters, Context.Request, "action", ParameterType.Query);
                var location = Parameters.ValueOf<string>(parameters, Context.Request, "location", ParameterType.Query);
                var propertylist = Parameters.ValueOf<List<string>>(parameters, Context.Request, "propertylist", ParameterType.Query);
                var orgApacheSlingInstallerConfigurationPersist = Parameters.ValueOf<bool?>(parameters, Context.Request, "orgApacheSlingInstallerConfigurationPersist", ParameterType.Query);
                var mode = Parameters.ValueOf<string>(parameters, Context.Request, "mode", ParameterType.Query);
                var port = Parameters.ValueOf<int?>(parameters, Context.Request, "port", ParameterType.Query);
                var primaryHost = Parameters.ValueOf<string>(parameters, Context.Request, "primaryHost", ParameterType.Query);
                var interval = Parameters.ValueOf<int?>(parameters, Context.Request, "interval", ParameterType.Query);
                var primaryAllowedClientIpRanges = Parameters.ValueOf<List<string>>(parameters, Context.Request, "primaryAllowedClientIpRanges", ParameterType.Query);
                var secure = Parameters.ValueOf<bool?>(parameters, Context.Request, "secure", ParameterType.Query);
                var standbyReadtimeout = Parameters.ValueOf<int?>(parameters, Context.Request, "standbyReadtimeout", ParameterType.Query);
                var standbyAutoclean = Parameters.ValueOf<bool?>(parameters, Context.Request, "standbyAutoclean", ParameterType.Query);
                return service.OrgApacheJackrabbitOakSegmentStandbyStoreStandbyStoreService(Context, post, apply, delete, action, location, propertylist, orgApacheSlingInstallerConfigurationPersist, mode, port, primaryHost, interval, primaryAllowedClientIpRanges, secure, standbyReadtimeout, standbyAutoclean);
            };

            Post["/system/console/configMgr/org.apache.jackrabbit.oak.spi.security.authentication.external.impl.DefaultSyncHandler"] = parameters =>
            {
                var post = Parameters.ValueOf<bool?>(parameters, Context.Request, "post", ParameterType.Query);
                var apply = Parameters.ValueOf<bool?>(parameters, Context.Request, "apply", ParameterType.Query);
                var delete = Parameters.ValueOf<bool?>(parameters, Context.Request, "delete", ParameterType.Query);
                var action = Parameters.ValueOf<string>(parameters, Context.Request, "action", ParameterType.Query);
                var location = Parameters.ValueOf<string>(parameters, Context.Request, "location", ParameterType.Query);
                var propertylist = Parameters.ValueOf<List<string>>(parameters, Context.Request, "propertylist", ParameterType.Query);
                var handlerName = Parameters.ValueOf<string>(parameters, Context.Request, "handlerName", ParameterType.Query);
                var userExpirationTime = Parameters.ValueOf<string>(parameters, Context.Request, "userExpirationTime", ParameterType.Query);
                var userAutoMembership = Parameters.ValueOf<List<string>>(parameters, Context.Request, "userAutoMembership", ParameterType.Query);
                var userPropertyMapping = Parameters.ValueOf<List<string>>(parameters, Context.Request, "userPropertyMapping", ParameterType.Query);
                var userPathPrefix = Parameters.ValueOf<string>(parameters, Context.Request, "userPathPrefix", ParameterType.Query);
                var userMembershipExpTime = Parameters.ValueOf<string>(parameters, Context.Request, "userMembershipExpTime", ParameterType.Query);
                var userMembershipNestingDepth = Parameters.ValueOf<int?>(parameters, Context.Request, "userMembershipNestingDepth", ParameterType.Query);
                var userDynamicMembership = Parameters.ValueOf<bool?>(parameters, Context.Request, "userDynamicMembership", ParameterType.Query);
                var userDisableMissing = Parameters.ValueOf<bool?>(parameters, Context.Request, "userDisableMissing", ParameterType.Query);
                var groupExpirationTime = Parameters.ValueOf<string>(parameters, Context.Request, "groupExpirationTime", ParameterType.Query);
                var groupAutoMembership = Parameters.ValueOf<List<string>>(parameters, Context.Request, "groupAutoMembership", ParameterType.Query);
                var groupPropertyMapping = Parameters.ValueOf<List<string>>(parameters, Context.Request, "groupPropertyMapping", ParameterType.Query);
                var groupPathPrefix = Parameters.ValueOf<string>(parameters, Context.Request, "groupPathPrefix", ParameterType.Query);
                var enableRFC7613UsercaseMappedProfile = Parameters.ValueOf<bool?>(parameters, Context.Request, "enableRFC7613UsercaseMappedProfile", ParameterType.Query);
                return service.OrgApacheJackrabbitOakSpiSecurityAuthenticationExternalImplDe(Context, post, apply, delete, action, location, propertylist, handlerName, userExpirationTime, userAutoMembership, userPropertyMapping, userPathPrefix, userMembershipExpTime, userMembershipNestingDepth, userDynamicMembership, userDisableMissing, groupExpirationTime, groupAutoMembership, groupPropertyMapping, groupPathPrefix, enableRFC7613UsercaseMappedProfile);
            };

            Post["/system/console/configMgr/org.apache.jackrabbit.oak.spi.security.authentication.external.impl.ExternalLoginModuleFactory"] = parameters =>
            {
                var post = Parameters.ValueOf<bool?>(parameters, Context.Request, "post", ParameterType.Query);
                var apply = Parameters.ValueOf<bool?>(parameters, Context.Request, "apply", ParameterType.Query);
                var delete = Parameters.ValueOf<bool?>(parameters, Context.Request, "delete", ParameterType.Query);
                var action = Parameters.ValueOf<string>(parameters, Context.Request, "action", ParameterType.Query);
                var location = Parameters.ValueOf<string>(parameters, Context.Request, "location", ParameterType.Query);
                var propertylist = Parameters.ValueOf<List<string>>(parameters, Context.Request, "propertylist", ParameterType.Query);
                var jaasRanking = Parameters.ValueOf<int?>(parameters, Context.Request, "jaasRanking", ParameterType.Query);
                var jaasControlFlag = Parameters.ValueOf<string>(parameters, Context.Request, "jaasControlFlag", ParameterType.Query);
                var jaasRealmName = Parameters.ValueOf<string>(parameters, Context.Request, "jaasRealmName", ParameterType.Query);
                var idpName = Parameters.ValueOf<string>(parameters, Context.Request, "idpName", ParameterType.Query);
                var syncHandlerName = Parameters.ValueOf<string>(parameters, Context.Request, "syncHandlerName", ParameterType.Query);
                return service.OrgApacheJackrabbitOakSpiSecurityAuthenticationExternalImplEx(Context, post, apply, delete, action, location, propertylist, jaasRanking, jaasControlFlag, jaasRealmName, idpName, syncHandlerName);
            };

            Post["/system/console/configMgr/org.apache.jackrabbit.oak.spi.security.authentication.external.impl.principal.ExternalPrincipalConfiguration"] = parameters =>
            {
                var post = Parameters.ValueOf<bool?>(parameters, Context.Request, "post", ParameterType.Query);
                var apply = Parameters.ValueOf<bool?>(parameters, Context.Request, "apply", ParameterType.Query);
                var delete = Parameters.ValueOf<bool?>(parameters, Context.Request, "delete", ParameterType.Query);
                var action = Parameters.ValueOf<string>(parameters, Context.Request, "action", ParameterType.Query);
                var location = Parameters.ValueOf<string>(parameters, Context.Request, "location", ParameterType.Query);
                var propertylist = Parameters.ValueOf<List<string>>(parameters, Context.Request, "propertylist", ParameterType.Query);
                var protectExternalId = Parameters.ValueOf<bool?>(parameters, Context.Request, "protectExternalId", ParameterType.Query);
                return service.OrgApacheJackrabbitOakSpiSecurityAuthenticationExternalImplPr(Context, post, apply, delete, action, location, propertylist, protectExternalId);
            };

            Post["/system/console/configMgr/org.apache.jackrabbit.oak.spi.security.authorization.cug.impl.CugConfiguration"] = parameters =>
            {
                var post = Parameters.ValueOf<bool?>(parameters, Context.Request, "post", ParameterType.Query);
                var apply = Parameters.ValueOf<bool?>(parameters, Context.Request, "apply", ParameterType.Query);
                var delete = Parameters.ValueOf<bool?>(parameters, Context.Request, "delete", ParameterType.Query);
                var action = Parameters.ValueOf<string>(parameters, Context.Request, "action", ParameterType.Query);
                var location = Parameters.ValueOf<string>(parameters, Context.Request, "location", ParameterType.Query);
                var propertylist = Parameters.ValueOf<List<string>>(parameters, Context.Request, "propertylist", ParameterType.Query);
                var cugSupportedPaths = Parameters.ValueOf<List<string>>(parameters, Context.Request, "cugSupportedPaths", ParameterType.Query);
                var cugEnabled = Parameters.ValueOf<bool?>(parameters, Context.Request, "cugEnabled", ParameterType.Query);
                var configurationRanking = Parameters.ValueOf<int?>(parameters, Context.Request, "configurationRanking", ParameterType.Query);
                return service.OrgApacheJackrabbitOakSpiSecurityAuthorizationCugImplCugConfi(Context, post, apply, delete, action, location, propertylist, cugSupportedPaths, cugEnabled, configurationRanking);
            };

            Post["/system/console/configMgr/org.apache.jackrabbit.oak.spi.security.authorization.cug.impl.CugExcludeImpl"] = parameters =>
            {
                var post = Parameters.ValueOf<bool?>(parameters, Context.Request, "post", ParameterType.Query);
                var apply = Parameters.ValueOf<bool?>(parameters, Context.Request, "apply", ParameterType.Query);
                var delete = Parameters.ValueOf<bool?>(parameters, Context.Request, "delete", ParameterType.Query);
                var action = Parameters.ValueOf<string>(parameters, Context.Request, "action", ParameterType.Query);
                var location = Parameters.ValueOf<string>(parameters, Context.Request, "location", ParameterType.Query);
                var propertylist = Parameters.ValueOf<List<string>>(parameters, Context.Request, "propertylist", ParameterType.Query);
                var principalNames = Parameters.ValueOf<List<string>>(parameters, Context.Request, "principalNames", ParameterType.Query);
                return service.OrgApacheJackrabbitOakSpiSecurityAuthorizationCugImplCugExclu(Context, post, apply, delete, action, location, propertylist, principalNames);
            };

            Post["/system/console/configMgr/org.apache.jackrabbit.oak.spi.security.user.action.DefaultAuthorizableActionProvider"] = parameters =>
            {
                var post = Parameters.ValueOf<bool?>(parameters, Context.Request, "post", ParameterType.Query);
                var apply = Parameters.ValueOf<bool?>(parameters, Context.Request, "apply", ParameterType.Query);
                var delete = Parameters.ValueOf<bool?>(parameters, Context.Request, "delete", ParameterType.Query);
                var action = Parameters.ValueOf<string>(parameters, Context.Request, "action", ParameterType.Query);
                var location = Parameters.ValueOf<string>(parameters, Context.Request, "location", ParameterType.Query);
                var propertylist = Parameters.ValueOf<List<string>>(parameters, Context.Request, "propertylist", ParameterType.Query);
                var enabledActions = Parameters.ValueOf<string>(parameters, Context.Request, "enabledActions", ParameterType.Query);
                var userPrivilegeNames = Parameters.ValueOf<List<string>>(parameters, Context.Request, "userPrivilegeNames", ParameterType.Query);
                var groupPrivilegeNames = Parameters.ValueOf<List<string>>(parameters, Context.Request, "groupPrivilegeNames", ParameterType.Query);
                var constraint = Parameters.ValueOf<string>(parameters, Context.Request, "constraint", ParameterType.Query);
                return service.OrgApacheJackrabbitOakSpiSecurityUserActionDefaultAuthorizable(Context, post, apply, delete, action, location, propertylist, enabledActions, userPrivilegeNames, groupPrivilegeNames, constraint);
            };

            Post["/system/console/configMgr/org.apache.jackrabbit.vault.packaging.impl.PackagingImpl"] = parameters =>
            {
                var post = Parameters.ValueOf<bool?>(parameters, Context.Request, "post", ParameterType.Query);
                var apply = Parameters.ValueOf<bool?>(parameters, Context.Request, "apply", ParameterType.Query);
                var delete = Parameters.ValueOf<bool?>(parameters, Context.Request, "delete", ParameterType.Query);
                var action = Parameters.ValueOf<string>(parameters, Context.Request, "action", ParameterType.Query);
                var location = Parameters.ValueOf<string>(parameters, Context.Request, "location", ParameterType.Query);
                var propertylist = Parameters.ValueOf<List<string>>(parameters, Context.Request, "propertylist", ParameterType.Query);
                var packageRoots = Parameters.ValueOf<List<string>>(parameters, Context.Request, "packageRoots", ParameterType.Query);
                return service.OrgApacheJackrabbitVaultPackagingImplPackagingImpl(Context, post, apply, delete, action, location, propertylist, packageRoots);
            };

            Post["/system/console/configMgr/org.apache.jackrabbit.vault.packaging.registry.impl.FSPackageRegistry"] = parameters =>
            {
                var post = Parameters.ValueOf<bool?>(parameters, Context.Request, "post", ParameterType.Query);
                var apply = Parameters.ValueOf<bool?>(parameters, Context.Request, "apply", ParameterType.Query);
                var delete = Parameters.ValueOf<bool?>(parameters, Context.Request, "delete", ParameterType.Query);
                var action = Parameters.ValueOf<string>(parameters, Context.Request, "action", ParameterType.Query);
                var location = Parameters.ValueOf<string>(parameters, Context.Request, "location", ParameterType.Query);
                var propertylist = Parameters.ValueOf<List<string>>(parameters, Context.Request, "propertylist", ParameterType.Query);
                var homePath = Parameters.ValueOf<string>(parameters, Context.Request, "homePath", ParameterType.Query);
                return service.OrgApacheJackrabbitVaultPackagingRegistryImplFSPackageRegistry(Context, post, apply, delete, action, location, propertylist, homePath);
            };

            Post["/system/console/configMgr/org.apache.sling.auth.core.impl.LogoutServlet"] = parameters =>
            {
                var post = Parameters.ValueOf<bool?>(parameters, Context.Request, "post", ParameterType.Query);
                var apply = Parameters.ValueOf<bool?>(parameters, Context.Request, "apply", ParameterType.Query);
                var delete = Parameters.ValueOf<bool?>(parameters, Context.Request, "delete", ParameterType.Query);
                var action = Parameters.ValueOf<string>(parameters, Context.Request, "action", ParameterType.Query);
                var location = Parameters.ValueOf<string>(parameters, Context.Request, "location", ParameterType.Query);
                var propertylist = Parameters.ValueOf<List<string>>(parameters, Context.Request, "propertylist", ParameterType.Query);
                var slingServletMethods = Parameters.ValueOf<List<string>>(parameters, Context.Request, "slingServletMethods", ParameterType.Query);
                var slingServletPaths = Parameters.ValueOf<string>(parameters, Context.Request, "slingServletPaths", ParameterType.Query);
                return service.OrgApacheSlingAuthCoreImplLogoutServlet(Context, post, apply, delete, action, location, propertylist, slingServletMethods, slingServletPaths);
            };

            Post["/system/console/configMgr/org.apache.sling.caconfig.impl.ConfigurationBindingsValueProvider"] = parameters =>
            {
                var post = Parameters.ValueOf<bool?>(parameters, Context.Request, "post", ParameterType.Query);
                var apply = Parameters.ValueOf<bool?>(parameters, Context.Request, "apply", ParameterType.Query);
                var delete = Parameters.ValueOf<bool?>(parameters, Context.Request, "delete", ParameterType.Query);
                var action = Parameters.ValueOf<string>(parameters, Context.Request, "action", ParameterType.Query);
                var location = Parameters.ValueOf<string>(parameters, Context.Request, "location", ParameterType.Query);
                var propertylist = Parameters.ValueOf<List<string>>(parameters, Context.Request, "propertylist", ParameterType.Query);
                var enabled = Parameters.ValueOf<bool?>(parameters, Context.Request, "enabled", ParameterType.Query);
                return service.OrgApacheSlingCaconfigImplConfigurationBindingsValueProvider(Context, post, apply, delete, action, location, propertylist, enabled);
            };

            Post["/system/console/configMgr/org.apache.sling.caconfig.impl.ConfigurationResolverImpl"] = parameters =>
            {
                var post = Parameters.ValueOf<bool?>(parameters, Context.Request, "post", ParameterType.Query);
                var apply = Parameters.ValueOf<bool?>(parameters, Context.Request, "apply", ParameterType.Query);
                var delete = Parameters.ValueOf<bool?>(parameters, Context.Request, "delete", ParameterType.Query);
                var action = Parameters.ValueOf<string>(parameters, Context.Request, "action", ParameterType.Query);
                var location = Parameters.ValueOf<string>(parameters, Context.Request, "location", ParameterType.Query);
                var propertylist = Parameters.ValueOf<List<string>>(parameters, Context.Request, "propertylist", ParameterType.Query);
                var configBucketNames = Parameters.ValueOf<List<string>>(parameters, Context.Request, "configBucketNames", ParameterType.Query);
                return service.OrgApacheSlingCaconfigImplConfigurationResolverImpl(Context, post, apply, delete, action, location, propertylist, configBucketNames);
            };

            Post["/system/console/configMgr/org.apache.sling.caconfig.impl.def.DefaultConfigurationInheritanceStrategy"] = parameters =>
            {
                var post = Parameters.ValueOf<bool?>(parameters, Context.Request, "post", ParameterType.Query);
                var apply = Parameters.ValueOf<bool?>(parameters, Context.Request, "apply", ParameterType.Query);
                var delete = Parameters.ValueOf<bool?>(parameters, Context.Request, "delete", ParameterType.Query);
                var action = Parameters.ValueOf<string>(parameters, Context.Request, "action", ParameterType.Query);
                var location = Parameters.ValueOf<string>(parameters, Context.Request, "location", ParameterType.Query);
                var propertylist = Parameters.ValueOf<List<string>>(parameters, Context.Request, "propertylist", ParameterType.Query);
                var enabled = Parameters.ValueOf<bool?>(parameters, Context.Request, "enabled", ParameterType.Query);
                var configPropertyInheritancePropertyNames = Parameters.ValueOf<List<string>>(parameters, Context.Request, "configPropertyInheritancePropertyNames", ParameterType.Query);
                return service.OrgApacheSlingCaconfigImplDefDefaultConfigurationInheritanceStra(Context, post, apply, delete, action, location, propertylist, enabled, configPropertyInheritancePropertyNames);
            };

            Post["/system/console/configMgr/org.apache.sling.caconfig.impl.def.DefaultConfigurationPersistenceStrategy"] = parameters =>
            {
                var post = Parameters.ValueOf<bool?>(parameters, Context.Request, "post", ParameterType.Query);
                var apply = Parameters.ValueOf<bool?>(parameters, Context.Request, "apply", ParameterType.Query);
                var delete = Parameters.ValueOf<bool?>(parameters, Context.Request, "delete", ParameterType.Query);
                var action = Parameters.ValueOf<string>(parameters, Context.Request, "action", ParameterType.Query);
                var location = Parameters.ValueOf<string>(parameters, Context.Request, "location", ParameterType.Query);
                var propertylist = Parameters.ValueOf<List<string>>(parameters, Context.Request, "propertylist", ParameterType.Query);
                var enabled = Parameters.ValueOf<bool?>(parameters, Context.Request, "enabled", ParameterType.Query);
                return service.OrgApacheSlingCaconfigImplDefDefaultConfigurationPersistenceStra(Context, post, apply, delete, action, location, propertylist, enabled);
            };

            Post["/system/console/configMgr/org.apache.sling.caconfig.impl.override.OsgiConfigurationOverrideProvider"] = parameters =>
            {
                var post = Parameters.ValueOf<bool?>(parameters, Context.Request, "post", ParameterType.Query);
                var apply = Parameters.ValueOf<bool?>(parameters, Context.Request, "apply", ParameterType.Query);
                var delete = Parameters.ValueOf<bool?>(parameters, Context.Request, "delete", ParameterType.Query);
                var action = Parameters.ValueOf<string>(parameters, Context.Request, "action", ParameterType.Query);
                var location = Parameters.ValueOf<string>(parameters, Context.Request, "location", ParameterType.Query);
                var propertylist = Parameters.ValueOf<List<string>>(parameters, Context.Request, "propertylist", ParameterType.Query);
                var description = Parameters.ValueOf<string>(parameters, Context.Request, "description", ParameterType.Query);
                var overrides = Parameters.ValueOf<List<string>>(parameters, Context.Request, "overrides", ParameterType.Query);
                var enabled = Parameters.ValueOf<bool?>(parameters, Context.Request, "enabled", ParameterType.Query);
                var serviceRanking = Parameters.ValueOf<int?>(parameters, Context.Request, "serviceRanking", ParameterType.Query);
                return service.OrgApacheSlingCaconfigImplOverrideOsgiConfigurationOverrideProvi(Context, post, apply, delete, action, location, propertylist, description, overrides, enabled, serviceRanking);
            };

            Post["/system/console/configMgr/org.apache.sling.caconfig.impl.override.SystemPropertyConfigurationOverrideProvider"] = parameters =>
            {
                var post = Parameters.ValueOf<bool?>(parameters, Context.Request, "post", ParameterType.Query);
                var apply = Parameters.ValueOf<bool?>(parameters, Context.Request, "apply", ParameterType.Query);
                var delete = Parameters.ValueOf<bool?>(parameters, Context.Request, "delete", ParameterType.Query);
                var action = Parameters.ValueOf<string>(parameters, Context.Request, "action", ParameterType.Query);
                var location = Parameters.ValueOf<string>(parameters, Context.Request, "location", ParameterType.Query);
                var propertylist = Parameters.ValueOf<List<string>>(parameters, Context.Request, "propertylist", ParameterType.Query);
                var enabled = Parameters.ValueOf<bool?>(parameters, Context.Request, "enabled", ParameterType.Query);
                var serviceRanking = Parameters.ValueOf<int?>(parameters, Context.Request, "serviceRanking", ParameterType.Query);
                return service.OrgApacheSlingCaconfigImplOverrideSystemPropertyConfigurationOve(Context, post, apply, delete, action, location, propertylist, enabled, serviceRanking);
            };

            Post["/system/console/configMgr/org.apache.sling.caconfig.management.impl.ConfigurationManagementSettingsImpl"] = parameters =>
            {
                var post = Parameters.ValueOf<bool?>(parameters, Context.Request, "post", ParameterType.Query);
                var apply = Parameters.ValueOf<bool?>(parameters, Context.Request, "apply", ParameterType.Query);
                var delete = Parameters.ValueOf<bool?>(parameters, Context.Request, "delete", ParameterType.Query);
                var action = Parameters.ValueOf<string>(parameters, Context.Request, "action", ParameterType.Query);
                var location = Parameters.ValueOf<string>(parameters, Context.Request, "location", ParameterType.Query);
                var propertylist = Parameters.ValueOf<List<string>>(parameters, Context.Request, "propertylist", ParameterType.Query);
                var ignorePropertyNameRegex = Parameters.ValueOf<List<string>>(parameters, Context.Request, "ignorePropertyNameRegex", ParameterType.Query);
                var configCollectionPropertiesResourceNames = Parameters.ValueOf<List<string>>(parameters, Context.Request, "configCollectionPropertiesResourceNames", ParameterType.Query);
                return service.OrgApacheSlingCaconfigManagementImplConfigurationManagementSetti(Context, post, apply, delete, action, location, propertylist, ignorePropertyNameRegex, configCollectionPropertiesResourceNames);
            };

            Post["/system/console/configMgr/org.apache.sling.caconfig.resource.impl.def.DefaultConfigurationResourceResolvingStrategy"] = parameters =>
            {
                var post = Parameters.ValueOf<bool?>(parameters, Context.Request, "post", ParameterType.Query);
                var apply = Parameters.ValueOf<bool?>(parameters, Context.Request, "apply", ParameterType.Query);
                var delete = Parameters.ValueOf<bool?>(parameters, Context.Request, "delete", ParameterType.Query);
                var action = Parameters.ValueOf<string>(parameters, Context.Request, "action", ParameterType.Query);
                var location = Parameters.ValueOf<string>(parameters, Context.Request, "location", ParameterType.Query);
                var propertylist = Parameters.ValueOf<List<string>>(parameters, Context.Request, "propertylist", ParameterType.Query);
                var enabled = Parameters.ValueOf<bool?>(parameters, Context.Request, "enabled", ParameterType.Query);
                var configPath = Parameters.ValueOf<string>(parameters, Context.Request, "configPath", ParameterType.Query);
                var fallbackPaths = Parameters.ValueOf<List<string>>(parameters, Context.Request, "fallbackPaths", ParameterType.Query);
                var configCollectionInheritancePropertyNames = Parameters.ValueOf<List<string>>(parameters, Context.Request, "configCollectionInheritancePropertyNames", ParameterType.Query);
                return service.OrgApacheSlingCaconfigResourceImplDefDefaultConfigurationResour(Context, post, apply, delete, action, location, propertylist, enabled, configPath, fallbackPaths, configCollectionInheritancePropertyNames);
            };

            Post["/system/console/configMgr/org.apache.sling.caconfig.resource.impl.def.DefaultContextPathStrategy"] = parameters =>
            {
                var post = Parameters.ValueOf<bool?>(parameters, Context.Request, "post", ParameterType.Query);
                var apply = Parameters.ValueOf<bool?>(parameters, Context.Request, "apply", ParameterType.Query);
                var delete = Parameters.ValueOf<bool?>(parameters, Context.Request, "delete", ParameterType.Query);
                var action = Parameters.ValueOf<string>(parameters, Context.Request, "action", ParameterType.Query);
                var location = Parameters.ValueOf<string>(parameters, Context.Request, "location", ParameterType.Query);
                var propertylist = Parameters.ValueOf<List<string>>(parameters, Context.Request, "propertylist", ParameterType.Query);
                var enabled = Parameters.ValueOf<bool?>(parameters, Context.Request, "enabled", ParameterType.Query);
                var configRefResourceNames = Parameters.ValueOf<List<string>>(parameters, Context.Request, "configRefResourceNames", ParameterType.Query);
                var configRefPropertyNames = Parameters.ValueOf<List<string>>(parameters, Context.Request, "configRefPropertyNames", ParameterType.Query);
                var serviceRanking = Parameters.ValueOf<int?>(parameters, Context.Request, "serviceRanking", ParameterType.Query);
                return service.OrgApacheSlingCaconfigResourceImplDefDefaultContextPathStrategy(Context, post, apply, delete, action, location, propertylist, enabled, configRefResourceNames, configRefPropertyNames, serviceRanking);
            };

            Post["/system/console/configMgr/org.apache.sling.commons.html.internal.TagsoupHtmlParser"] = parameters =>
            {
                var post = Parameters.ValueOf<bool?>(parameters, Context.Request, "post", ParameterType.Query);
                var apply = Parameters.ValueOf<bool?>(parameters, Context.Request, "apply", ParameterType.Query);
                var delete = Parameters.ValueOf<bool?>(parameters, Context.Request, "delete", ParameterType.Query);
                var action = Parameters.ValueOf<string>(parameters, Context.Request, "action", ParameterType.Query);
                var location = Parameters.ValueOf<string>(parameters, Context.Request, "location", ParameterType.Query);
                var propertylist = Parameters.ValueOf<List<string>>(parameters, Context.Request, "propertylist", ParameterType.Query);
                var parserFeatures = Parameters.ValueOf<List<string>>(parameters, Context.Request, "parserFeatures", ParameterType.Query);
                return service.OrgApacheSlingCommonsHtmlInternalTagsoupHtmlParser(Context, post, apply, delete, action, location, propertylist, parserFeatures);
            };

            Post["/system/console/configMgr/org.apache.sling.commons.log.LogManager"] = parameters =>
            {
                var post = Parameters.ValueOf<bool?>(parameters, Context.Request, "post", ParameterType.Query);
                var apply = Parameters.ValueOf<bool?>(parameters, Context.Request, "apply", ParameterType.Query);
                var delete = Parameters.ValueOf<bool?>(parameters, Context.Request, "delete", ParameterType.Query);
                var action = Parameters.ValueOf<string>(parameters, Context.Request, "action", ParameterType.Query);
                var location = Parameters.ValueOf<string>(parameters, Context.Request, "location", ParameterType.Query);
                var propertylist = Parameters.ValueOf<List<string>>(parameters, Context.Request, "propertylist", ParameterType.Query);
                var orgApacheSlingCommonsLogLevel = Parameters.ValueOf<string>(parameters, Context.Request, "orgApacheSlingCommonsLogLevel", ParameterType.Query);
                var orgApacheSlingCommonsLogFile = Parameters.ValueOf<string>(parameters, Context.Request, "orgApacheSlingCommonsLogFile", ParameterType.Query);
                var orgApacheSlingCommonsLogFileNumber = Parameters.ValueOf<int?>(parameters, Context.Request, "orgApacheSlingCommonsLogFileNumber", ParameterType.Query);
                var orgApacheSlingCommonsLogFileSize = Parameters.ValueOf<string>(parameters, Context.Request, "orgApacheSlingCommonsLogFileSize", ParameterType.Query);
                var orgApacheSlingCommonsLogPattern = Parameters.ValueOf<string>(parameters, Context.Request, "orgApacheSlingCommonsLogPattern", ParameterType.Query);
                var orgApacheSlingCommonsLogConfigurationFile = Parameters.ValueOf<string>(parameters, Context.Request, "orgApacheSlingCommonsLogConfigurationFile", ParameterType.Query);
                var orgApacheSlingCommonsLogPackagingDataEnabled = Parameters.ValueOf<bool?>(parameters, Context.Request, "orgApacheSlingCommonsLogPackagingDataEnabled", ParameterType.Query);
                var orgApacheSlingCommonsLogMaxCallerDataDepth = Parameters.ValueOf<int?>(parameters, Context.Request, "orgApacheSlingCommonsLogMaxCallerDataDepth", ParameterType.Query);
                var orgApacheSlingCommonsLogMaxOldFileCountInDump = Parameters.ValueOf<int?>(parameters, Context.Request, "orgApacheSlingCommonsLogMaxOldFileCountInDump", ParameterType.Query);
                var orgApacheSlingCommonsLogNumOfLines = Parameters.ValueOf<int?>(parameters, Context.Request, "orgApacheSlingCommonsLogNumOfLines", ParameterType.Query);
                return service.OrgApacheSlingCommonsLogLogManager(Context, post, apply, delete, action, location, propertylist, orgApacheSlingCommonsLogLevel, orgApacheSlingCommonsLogFile, orgApacheSlingCommonsLogFileNumber, orgApacheSlingCommonsLogFileSize, orgApacheSlingCommonsLogPattern, orgApacheSlingCommonsLogConfigurationFile, orgApacheSlingCommonsLogPackagingDataEnabled, orgApacheSlingCommonsLogMaxCallerDataDepth, orgApacheSlingCommonsLogMaxOldFileCountInDump, orgApacheSlingCommonsLogNumOfLines);
            };

            Post["/system/console/configMgr/org.apache.sling.commons.log.LogManager.factory.config"] = parameters =>
            {
                var post = Parameters.ValueOf<bool?>(parameters, Context.Request, "post", ParameterType.Query);
                var apply = Parameters.ValueOf<bool?>(parameters, Context.Request, "apply", ParameterType.Query);
                var delete = Parameters.ValueOf<bool?>(parameters, Context.Request, "delete", ParameterType.Query);
                var action = Parameters.ValueOf<string>(parameters, Context.Request, "action", ParameterType.Query);
                var location = Parameters.ValueOf<string>(parameters, Context.Request, "location", ParameterType.Query);
                var propertylist = Parameters.ValueOf<List<string>>(parameters, Context.Request, "propertylist", ParameterType.Query);
                var orgApacheSlingCommonsLogLevel = Parameters.ValueOf<string>(parameters, Context.Request, "orgApacheSlingCommonsLogLevel", ParameterType.Query);
                var orgApacheSlingCommonsLogFile = Parameters.ValueOf<string>(parameters, Context.Request, "orgApacheSlingCommonsLogFile", ParameterType.Query);
                var orgApacheSlingCommonsLogPattern = Parameters.ValueOf<string>(parameters, Context.Request, "orgApacheSlingCommonsLogPattern", ParameterType.Query);
                var orgApacheSlingCommonsLogNames = Parameters.ValueOf<List<string>>(parameters, Context.Request, "orgApacheSlingCommonsLogNames", ParameterType.Query);
                var orgApacheSlingCommonsLogAdditiv = Parameters.ValueOf<bool?>(parameters, Context.Request, "orgApacheSlingCommonsLogAdditiv", ParameterType.Query);
                return service.OrgApacheSlingCommonsLogLogManagerFactoryConfig(Context, post, apply, delete, action, location, propertylist, orgApacheSlingCommonsLogLevel, orgApacheSlingCommonsLogFile, orgApacheSlingCommonsLogPattern, orgApacheSlingCommonsLogNames, orgApacheSlingCommonsLogAdditiv);
            };

            Post["/system/console/configMgr/org.apache.sling.commons.log.LogManager.factory.writer"] = parameters =>
            {
                var post = Parameters.ValueOf<bool?>(parameters, Context.Request, "post", ParameterType.Query);
                var apply = Parameters.ValueOf<bool?>(parameters, Context.Request, "apply", ParameterType.Query);
                var delete = Parameters.ValueOf<bool?>(parameters, Context.Request, "delete", ParameterType.Query);
                var action = Parameters.ValueOf<string>(parameters, Context.Request, "action", ParameterType.Query);
                var location = Parameters.ValueOf<string>(parameters, Context.Request, "location", ParameterType.Query);
                var propertylist = Parameters.ValueOf<List<string>>(parameters, Context.Request, "propertylist", ParameterType.Query);
                var orgApacheSlingCommonsLogFile = Parameters.ValueOf<string>(parameters, Context.Request, "orgApacheSlingCommonsLogFile", ParameterType.Query);
                var orgApacheSlingCommonsLogFileNumber = Parameters.ValueOf<int?>(parameters, Context.Request, "orgApacheSlingCommonsLogFileNumber", ParameterType.Query);
                var orgApacheSlingCommonsLogFileSize = Parameters.ValueOf<string>(parameters, Context.Request, "orgApacheSlingCommonsLogFileSize", ParameterType.Query);
                var orgApacheSlingCommonsLogFileBuffered = Parameters.ValueOf<bool?>(parameters, Context.Request, "orgApacheSlingCommonsLogFileBuffered", ParameterType.Query);
                return service.OrgApacheSlingCommonsLogLogManagerFactoryWriter(Context, post, apply, delete, action, location, propertylist, orgApacheSlingCommonsLogFile, orgApacheSlingCommonsLogFileNumber, orgApacheSlingCommonsLogFileSize, orgApacheSlingCommonsLogFileBuffered);
            };

            Post["/system/console/configMgr/org.apache.sling.commons.metrics.internal.LogReporter"] = parameters =>
            {
                var post = Parameters.ValueOf<bool?>(parameters, Context.Request, "post", ParameterType.Query);
                var apply = Parameters.ValueOf<bool?>(parameters, Context.Request, "apply", ParameterType.Query);
                var delete = Parameters.ValueOf<bool?>(parameters, Context.Request, "delete", ParameterType.Query);
                var action = Parameters.ValueOf<string>(parameters, Context.Request, "action", ParameterType.Query);
                var location = Parameters.ValueOf<string>(parameters, Context.Request, "location", ParameterType.Query);
                var propertylist = Parameters.ValueOf<List<string>>(parameters, Context.Request, "propertylist", ParameterType.Query);
                var period = Parameters.ValueOf<int?>(parameters, Context.Request, "period", ParameterType.Query);
                var timeUnit = Parameters.ValueOf<string>(parameters, Context.Request, "timeUnit", ParameterType.Query);
                var level = Parameters.ValueOf<string>(parameters, Context.Request, "level", ParameterType.Query);
                var loggerName = Parameters.ValueOf<string>(parameters, Context.Request, "loggerName", ParameterType.Query);
                var prefix = Parameters.ValueOf<string>(parameters, Context.Request, "prefix", ParameterType.Query);
                var pattern = Parameters.ValueOf<string>(parameters, Context.Request, "pattern", ParameterType.Query);
                var registryName = Parameters.ValueOf<string>(parameters, Context.Request, "registryName", ParameterType.Query);
                return service.OrgApacheSlingCommonsMetricsInternalLogReporter(Context, post, apply, delete, action, location, propertylist, period, timeUnit, level, loggerName, prefix, pattern, registryName);
            };

            Post["/system/console/configMgr/org.apache.sling.commons.metrics.rrd4j.impl.CodahaleMetricsReporter"] = parameters =>
            {
                var post = Parameters.ValueOf<bool?>(parameters, Context.Request, "post", ParameterType.Query);
                var apply = Parameters.ValueOf<bool?>(parameters, Context.Request, "apply", ParameterType.Query);
                var delete = Parameters.ValueOf<bool?>(parameters, Context.Request, "delete", ParameterType.Query);
                var action = Parameters.ValueOf<string>(parameters, Context.Request, "action", ParameterType.Query);
                var location = Parameters.ValueOf<string>(parameters, Context.Request, "location", ParameterType.Query);
                var propertylist = Parameters.ValueOf<List<string>>(parameters, Context.Request, "propertylist", ParameterType.Query);
                var datasources = Parameters.ValueOf<List<string>>(parameters, Context.Request, "datasources", ParameterType.Query);
                var step = Parameters.ValueOf<int?>(parameters, Context.Request, "step", ParameterType.Query);
                var archives = Parameters.ValueOf<List<string>>(parameters, Context.Request, "archives", ParameterType.Query);
                var path = Parameters.ValueOf<string>(parameters, Context.Request, "path", ParameterType.Query);
                return service.OrgApacheSlingCommonsMetricsRrd4jImplCodahaleMetricsReporter(Context, post, apply, delete, action, location, propertylist, datasources, step, archives, path);
            };

            Post["/system/console/configMgr/org.apache.sling.commons.mime.internal.MimeTypeServiceImpl"] = parameters =>
            {
                var post = Parameters.ValueOf<bool?>(parameters, Context.Request, "post", ParameterType.Query);
                var apply = Parameters.ValueOf<bool?>(parameters, Context.Request, "apply", ParameterType.Query);
                var delete = Parameters.ValueOf<bool?>(parameters, Context.Request, "delete", ParameterType.Query);
                var action = Parameters.ValueOf<string>(parameters, Context.Request, "action", ParameterType.Query);
                var location = Parameters.ValueOf<string>(parameters, Context.Request, "location", ParameterType.Query);
                var propertylist = Parameters.ValueOf<List<string>>(parameters, Context.Request, "propertylist", ParameterType.Query);
                var mimeTypes = Parameters.ValueOf<List<string>>(parameters, Context.Request, "mimeTypes", ParameterType.Query);
                return service.OrgApacheSlingCommonsMimeInternalMimeTypeServiceImpl(Context, post, apply, delete, action, location, propertylist, mimeTypes);
            };

            Post["/system/console/configMgr/org.apache.sling.commons.scheduler.impl.QuartzScheduler"] = parameters =>
            {
                var post = Parameters.ValueOf<bool?>(parameters, Context.Request, "post", ParameterType.Query);
                var apply = Parameters.ValueOf<bool?>(parameters, Context.Request, "apply", ParameterType.Query);
                var delete = Parameters.ValueOf<bool?>(parameters, Context.Request, "delete", ParameterType.Query);
                var action = Parameters.ValueOf<string>(parameters, Context.Request, "action", ParameterType.Query);
                var location = Parameters.ValueOf<string>(parameters, Context.Request, "location", ParameterType.Query);
                var propertylist = Parameters.ValueOf<List<string>>(parameters, Context.Request, "propertylist", ParameterType.Query);
                var poolName = Parameters.ValueOf<string>(parameters, Context.Request, "poolName", ParameterType.Query);
                var allowedPoolNames = Parameters.ValueOf<List<string>>(parameters, Context.Request, "allowedPoolNames", ParameterType.Query);
                var schedulerUseleaderforsingle = Parameters.ValueOf<bool?>(parameters, Context.Request, "schedulerUseleaderforsingle", ParameterType.Query);
                var metricsFilters = Parameters.ValueOf<List<string>>(parameters, Context.Request, "metricsFilters", ParameterType.Query);
                var slowThresholdMillis = Parameters.ValueOf<int?>(parameters, Context.Request, "slowThresholdMillis", ParameterType.Query);
                return service.OrgApacheSlingCommonsSchedulerImplQuartzScheduler(Context, post, apply, delete, action, location, propertylist, poolName, allowedPoolNames, schedulerUseleaderforsingle, metricsFilters, slowThresholdMillis);
            };

            Post["/system/console/configMgr/org.apache.sling.commons.scheduler.impl.SchedulerHealthCheck"] = parameters =>
            {
                var post = Parameters.ValueOf<bool?>(parameters, Context.Request, "post", ParameterType.Query);
                var apply = Parameters.ValueOf<bool?>(parameters, Context.Request, "apply", ParameterType.Query);
                var delete = Parameters.ValueOf<bool?>(parameters, Context.Request, "delete", ParameterType.Query);
                var action = Parameters.ValueOf<string>(parameters, Context.Request, "action", ParameterType.Query);
                var location = Parameters.ValueOf<string>(parameters, Context.Request, "location", ParameterType.Query);
                var propertylist = Parameters.ValueOf<List<string>>(parameters, Context.Request, "propertylist", ParameterType.Query);
                var maxQuartzJobDurationAcceptable = Parameters.ValueOf<int?>(parameters, Context.Request, "maxQuartzJobDurationAcceptable", ParameterType.Query);
                return service.OrgApacheSlingCommonsSchedulerImplSchedulerHealthCheck(Context, post, apply, delete, action, location, propertylist, maxQuartzJobDurationAcceptable);
            };

            Post["/system/console/configMgr/org.apache.sling.commons.threads.impl.DefaultThreadPool.factory"] = parameters =>
            {
                var post = Parameters.ValueOf<bool?>(parameters, Context.Request, "post", ParameterType.Query);
                var apply = Parameters.ValueOf<bool?>(parameters, Context.Request, "apply", ParameterType.Query);
                var delete = Parameters.ValueOf<bool?>(parameters, Context.Request, "delete", ParameterType.Query);
                var action = Parameters.ValueOf<string>(parameters, Context.Request, "action", ParameterType.Query);
                var location = Parameters.ValueOf<string>(parameters, Context.Request, "location", ParameterType.Query);
                var propertylist = Parameters.ValueOf<List<string>>(parameters, Context.Request, "propertylist", ParameterType.Query);
                var name = Parameters.ValueOf<string>(parameters, Context.Request, "name", ParameterType.Query);
                var minPoolSize = Parameters.ValueOf<int?>(parameters, Context.Request, "minPoolSize", ParameterType.Query);
                var maxPoolSize = Parameters.ValueOf<int?>(parameters, Context.Request, "maxPoolSize", ParameterType.Query);
                var queueSize = Parameters.ValueOf<int?>(parameters, Context.Request, "queueSize", ParameterType.Query);
                var maxThreadAge = Parameters.ValueOf<int?>(parameters, Context.Request, "maxThreadAge", ParameterType.Query);
                var keepAliveTime = Parameters.ValueOf<int?>(parameters, Context.Request, "keepAliveTime", ParameterType.Query);
                var blockPolicy = Parameters.ValueOf<string>(parameters, Context.Request, "blockPolicy", ParameterType.Query);
                var shutdownGraceful = Parameters.ValueOf<bool?>(parameters, Context.Request, "shutdownGraceful", ParameterType.Query);
                var daemon = Parameters.ValueOf<bool?>(parameters, Context.Request, "daemon", ParameterType.Query);
                var shutdownWaitTime = Parameters.ValueOf<int?>(parameters, Context.Request, "shutdownWaitTime", ParameterType.Query);
                var priority = Parameters.ValueOf<string>(parameters, Context.Request, "priority", ParameterType.Query);
                return service.OrgApacheSlingCommonsThreadsImplDefaultThreadPoolFactory(Context, post, apply, delete, action, location, propertylist, name, minPoolSize, maxPoolSize, queueSize, maxThreadAge, keepAliveTime, blockPolicy, shutdownGraceful, daemon, shutdownWaitTime, priority);
            };

            Post["/system/console/configMgr/org.apache.sling.datasource.DataSourceFactory"] = parameters =>
            {
                var post = Parameters.ValueOf<bool?>(parameters, Context.Request, "post", ParameterType.Query);
                var apply = Parameters.ValueOf<bool?>(parameters, Context.Request, "apply", ParameterType.Query);
                var delete = Parameters.ValueOf<bool?>(parameters, Context.Request, "delete", ParameterType.Query);
                var action = Parameters.ValueOf<string>(parameters, Context.Request, "action", ParameterType.Query);
                var location = Parameters.ValueOf<string>(parameters, Context.Request, "location", ParameterType.Query);
                var propertylist = Parameters.ValueOf<List<string>>(parameters, Context.Request, "propertylist", ParameterType.Query);
                var datasourceName = Parameters.ValueOf<string>(parameters, Context.Request, "datasourceName", ParameterType.Query);
                var datasourceSvcPropName = Parameters.ValueOf<string>(parameters, Context.Request, "datasourceSvcPropName", ParameterType.Query);
                var driverClassName = Parameters.ValueOf<string>(parameters, Context.Request, "driverClassName", ParameterType.Query);
                var url = Parameters.ValueOf<string>(parameters, Context.Request, "url", ParameterType.Query);
                var username = Parameters.ValueOf<string>(parameters, Context.Request, "username", ParameterType.Query);
                var password = Parameters.ValueOf<string>(parameters, Context.Request, "password", ParameterType.Query);
                var defaultAutoCommit = Parameters.ValueOf<string>(parameters, Context.Request, "defaultAutoCommit", ParameterType.Query);
                var defaultReadOnly = Parameters.ValueOf<string>(parameters, Context.Request, "defaultReadOnly", ParameterType.Query);
                var defaultTransactionIsolation = Parameters.ValueOf<string>(parameters, Context.Request, "defaultTransactionIsolation", ParameterType.Query);
                var defaultCatalog = Parameters.ValueOf<string>(parameters, Context.Request, "defaultCatalog", ParameterType.Query);
                var maxActive = Parameters.ValueOf<int?>(parameters, Context.Request, "maxActive", ParameterType.Query);
                var maxIdle = Parameters.ValueOf<int?>(parameters, Context.Request, "maxIdle", ParameterType.Query);
                var minIdle = Parameters.ValueOf<int?>(parameters, Context.Request, "minIdle", ParameterType.Query);
                var initialSize = Parameters.ValueOf<int?>(parameters, Context.Request, "initialSize", ParameterType.Query);
                var maxWait = Parameters.ValueOf<int?>(parameters, Context.Request, "maxWait", ParameterType.Query);
                var maxAge = Parameters.ValueOf<int?>(parameters, Context.Request, "maxAge", ParameterType.Query);
                var testOnBorrow = Parameters.ValueOf<bool?>(parameters, Context.Request, "testOnBorrow", ParameterType.Query);
                var testOnReturn = Parameters.ValueOf<bool?>(parameters, Context.Request, "testOnReturn", ParameterType.Query);
                var testWhileIdle = Parameters.ValueOf<bool?>(parameters, Context.Request, "testWhileIdle", ParameterType.Query);
                var validationQuery = Parameters.ValueOf<string>(parameters, Context.Request, "validationQuery", ParameterType.Query);
                var validationQueryTimeout = Parameters.ValueOf<int?>(parameters, Context.Request, "validationQueryTimeout", ParameterType.Query);
                var timeBetweenEvictionRunsMillis = Parameters.ValueOf<int?>(parameters, Context.Request, "timeBetweenEvictionRunsMillis", ParameterType.Query);
                var minEvictableIdleTimeMillis = Parameters.ValueOf<int?>(parameters, Context.Request, "minEvictableIdleTimeMillis", ParameterType.Query);
                var connectionProperties = Parameters.ValueOf<string>(parameters, Context.Request, "connectionProperties", ParameterType.Query);
                var initSQL = Parameters.ValueOf<string>(parameters, Context.Request, "initSQL", ParameterType.Query);
                var jdbcInterceptors = Parameters.ValueOf<string>(parameters, Context.Request, "jdbcInterceptors", ParameterType.Query);
                var validationInterval = Parameters.ValueOf<int?>(parameters, Context.Request, "validationInterval", ParameterType.Query);
                var logValidationErrors = Parameters.ValueOf<bool?>(parameters, Context.Request, "logValidationErrors", ParameterType.Query);
                var datasourceSvcProperties = Parameters.ValueOf<List<string>>(parameters, Context.Request, "datasourceSvcProperties", ParameterType.Query);
                return service.OrgApacheSlingDatasourceDataSourceFactory(Context, post, apply, delete, action, location, propertylist, datasourceName, datasourceSvcPropName, driverClassName, url, username, password, defaultAutoCommit, defaultReadOnly, defaultTransactionIsolation, defaultCatalog, maxActive, maxIdle, minIdle, initialSize, maxWait, maxAge, testOnBorrow, testOnReturn, testWhileIdle, validationQuery, validationQueryTimeout, timeBetweenEvictionRunsMillis, minEvictableIdleTimeMillis, connectionProperties, initSQL, jdbcInterceptors, validationInterval, logValidationErrors, datasourceSvcProperties);
            };

            Post["/system/console/configMgr/org.apache.sling.datasource.JNDIDataSourceFactory"] = parameters =>
            {
                var post = Parameters.ValueOf<bool?>(parameters, Context.Request, "post", ParameterType.Query);
                var apply = Parameters.ValueOf<bool?>(parameters, Context.Request, "apply", ParameterType.Query);
                var delete = Parameters.ValueOf<bool?>(parameters, Context.Request, "delete", ParameterType.Query);
                var action = Parameters.ValueOf<string>(parameters, Context.Request, "action", ParameterType.Query);
                var location = Parameters.ValueOf<string>(parameters, Context.Request, "location", ParameterType.Query);
                var propertylist = Parameters.ValueOf<List<string>>(parameters, Context.Request, "propertylist", ParameterType.Query);
                var datasourceName = Parameters.ValueOf<string>(parameters, Context.Request, "datasourceName", ParameterType.Query);
                var datasourceSvcPropName = Parameters.ValueOf<string>(parameters, Context.Request, "datasourceSvcPropName", ParameterType.Query);
                var datasourceJndiName = Parameters.ValueOf<string>(parameters, Context.Request, "datasourceJndiName", ParameterType.Query);
                var jndiProperties = Parameters.ValueOf<List<string>>(parameters, Context.Request, "jndiProperties", ParameterType.Query);
                return service.OrgApacheSlingDatasourceJNDIDataSourceFactory(Context, post, apply, delete, action, location, propertylist, datasourceName, datasourceSvcPropName, datasourceJndiName, jndiProperties);
            };

            Post["/system/console/configMgr/org.apache.sling.discovery.oak.Config"] = parameters =>
            {
                var post = Parameters.ValueOf<bool?>(parameters, Context.Request, "post", ParameterType.Query);
                var apply = Parameters.ValueOf<bool?>(parameters, Context.Request, "apply", ParameterType.Query);
                var delete = Parameters.ValueOf<bool?>(parameters, Context.Request, "delete", ParameterType.Query);
                var action = Parameters.ValueOf<string>(parameters, Context.Request, "action", ParameterType.Query);
                var location = Parameters.ValueOf<string>(parameters, Context.Request, "location", ParameterType.Query);
                var propertylist = Parameters.ValueOf<List<string>>(parameters, Context.Request, "propertylist", ParameterType.Query);
                var connectorPingTimeout = Parameters.ValueOf<int?>(parameters, Context.Request, "connectorPingTimeout", ParameterType.Query);
                var connectorPingInterval = Parameters.ValueOf<int?>(parameters, Context.Request, "connectorPingInterval", ParameterType.Query);
                var discoveryLiteCheckInterval = Parameters.ValueOf<int?>(parameters, Context.Request, "discoveryLiteCheckInterval", ParameterType.Query);
                var clusterSyncServiceTimeout = Parameters.ValueOf<int?>(parameters, Context.Request, "clusterSyncServiceTimeout", ParameterType.Query);
                var clusterSyncServiceInterval = Parameters.ValueOf<int?>(parameters, Context.Request, "clusterSyncServiceInterval", ParameterType.Query);
                var enableSyncToken = Parameters.ValueOf<bool?>(parameters, Context.Request, "enableSyncToken", ParameterType.Query);
                var minEventDelay = Parameters.ValueOf<int?>(parameters, Context.Request, "minEventDelay", ParameterType.Query);
                var socketConnectTimeout = Parameters.ValueOf<int?>(parameters, Context.Request, "socketConnectTimeout", ParameterType.Query);
                var soTimeout = Parameters.ValueOf<int?>(parameters, Context.Request, "soTimeout", ParameterType.Query);
                var topologyConnectorUrls = Parameters.ValueOf<List<string>>(parameters, Context.Request, "topologyConnectorUrls", ParameterType.Query);
                var topologyConnectorWhitelist = Parameters.ValueOf<List<string>>(parameters, Context.Request, "topologyConnectorWhitelist", ParameterType.Query);
                var autoStopLocalLoopEnabled = Parameters.ValueOf<bool?>(parameters, Context.Request, "autoStopLocalLoopEnabled", ParameterType.Query);
                var gzipConnectorRequestsEnabled = Parameters.ValueOf<bool?>(parameters, Context.Request, "gzipConnectorRequestsEnabled", ParameterType.Query);
                var hmacEnabled = Parameters.ValueOf<bool?>(parameters, Context.Request, "hmacEnabled", ParameterType.Query);
                var enableEncryption = Parameters.ValueOf<bool?>(parameters, Context.Request, "enableEncryption", ParameterType.Query);
                var sharedKey = Parameters.ValueOf<string>(parameters, Context.Request, "sharedKey", ParameterType.Query);
                var hmacSharedKeyTTL = Parameters.ValueOf<int?>(parameters, Context.Request, "hmacSharedKeyTTL", ParameterType.Query);
                var backoffStandbyFactor = Parameters.ValueOf<string>(parameters, Context.Request, "backoffStandbyFactor", ParameterType.Query);
                var backoffStableFactor = Parameters.ValueOf<string>(parameters, Context.Request, "backoffStableFactor", ParameterType.Query);
                return service.OrgApacheSlingDiscoveryOakConfig(Context, post, apply, delete, action, location, propertylist, connectorPingTimeout, connectorPingInterval, discoveryLiteCheckInterval, clusterSyncServiceTimeout, clusterSyncServiceInterval, enableSyncToken, minEventDelay, socketConnectTimeout, soTimeout, topologyConnectorUrls, topologyConnectorWhitelist, autoStopLocalLoopEnabled, gzipConnectorRequestsEnabled, hmacEnabled, enableEncryption, sharedKey, hmacSharedKeyTTL, backoffStandbyFactor, backoffStableFactor);
            };

            Post["/system/console/configMgr/org.apache.sling.discovery.oak.SynchronizedClocksHealthCheck"] = parameters =>
            {
                var post = Parameters.ValueOf<bool?>(parameters, Context.Request, "post", ParameterType.Query);
                var apply = Parameters.ValueOf<bool?>(parameters, Context.Request, "apply", ParameterType.Query);
                var delete = Parameters.ValueOf<bool?>(parameters, Context.Request, "delete", ParameterType.Query);
                var action = Parameters.ValueOf<string>(parameters, Context.Request, "action", ParameterType.Query);
                var location = Parameters.ValueOf<string>(parameters, Context.Request, "location", ParameterType.Query);
                var propertylist = Parameters.ValueOf<List<string>>(parameters, Context.Request, "propertylist", ParameterType.Query);
                var hcName = Parameters.ValueOf<string>(parameters, Context.Request, "hcName", ParameterType.Query);
                var hcTags = Parameters.ValueOf<List<string>>(parameters, Context.Request, "hcTags", ParameterType.Query);
                var hcMbeanName = Parameters.ValueOf<string>(parameters, Context.Request, "hcMbeanName", ParameterType.Query);
                return service.OrgApacheSlingDiscoveryOakSynchronizedClocksHealthCheck(Context, post, apply, delete, action, location, propertylist, hcName, hcTags, hcMbeanName);
            };

            Post["/system/console/configMgr/org.apache.sling.distribution.agent.impl.ForwardDistributionAgentFactory"] = parameters =>
            {
                var post = Parameters.ValueOf<bool?>(parameters, Context.Request, "post", ParameterType.Query);
                var apply = Parameters.ValueOf<bool?>(parameters, Context.Request, "apply", ParameterType.Query);
                var delete = Parameters.ValueOf<bool?>(parameters, Context.Request, "delete", ParameterType.Query);
                var action = Parameters.ValueOf<string>(parameters, Context.Request, "action", ParameterType.Query);
                var location = Parameters.ValueOf<string>(parameters, Context.Request, "location", ParameterType.Query);
                var propertylist = Parameters.ValueOf<List<string>>(parameters, Context.Request, "propertylist", ParameterType.Query);
                var name = Parameters.ValueOf<string>(parameters, Context.Request, "name", ParameterType.Query);
                var title = Parameters.ValueOf<string>(parameters, Context.Request, "title", ParameterType.Query);
                var details = Parameters.ValueOf<string>(parameters, Context.Request, "details", ParameterType.Query);
                var enabled = Parameters.ValueOf<bool?>(parameters, Context.Request, "enabled", ParameterType.Query);
                var serviceName = Parameters.ValueOf<string>(parameters, Context.Request, "serviceName", ParameterType.Query);
                var logLevel = Parameters.ValueOf<string>(parameters, Context.Request, "logLevel", ParameterType.Query);
                var allowedRoots = Parameters.ValueOf<List<string>>(parameters, Context.Request, "allowedRoots", ParameterType.Query);
                var queueProcessingEnabled = Parameters.ValueOf<bool?>(parameters, Context.Request, "queueProcessingEnabled", ParameterType.Query);
                var packageImporterEndpoints = Parameters.ValueOf<List<string>>(parameters, Context.Request, "packageImporterEndpoints", ParameterType.Query);
                var passiveQueues = Parameters.ValueOf<List<string>>(parameters, Context.Request, "passiveQueues", ParameterType.Query);
                var priorityQueues = Parameters.ValueOf<List<string>>(parameters, Context.Request, "priorityQueues", ParameterType.Query);
                var retryStrategy = Parameters.ValueOf<string>(parameters, Context.Request, "retryStrategy", ParameterType.Query);
                var retryAttempts = Parameters.ValueOf<int?>(parameters, Context.Request, "retryAttempts", ParameterType.Query);
                var requestAuthorizationStrategyTarget = Parameters.ValueOf<string>(parameters, Context.Request, "requestAuthorizationStrategyTarget", ParameterType.Query);
                var transportSecretProviderTarget = Parameters.ValueOf<string>(parameters, Context.Request, "transportSecretProviderTarget", ParameterType.Query);
                var packageBuilderTarget = Parameters.ValueOf<string>(parameters, Context.Request, "packageBuilderTarget", ParameterType.Query);
                var triggersTarget = Parameters.ValueOf<string>(parameters, Context.Request, "triggersTarget", ParameterType.Query);
                var queueProvider = Parameters.ValueOf<string>(parameters, Context.Request, "queueProvider", ParameterType.Query);
                var asyncDelivery = Parameters.ValueOf<bool?>(parameters, Context.Request, "asyncDelivery", ParameterType.Query);
                var httpConnTimeout = Parameters.ValueOf<int?>(parameters, Context.Request, "httpConnTimeout", ParameterType.Query);
                return service.OrgApacheSlingDistributionAgentImplForwardDistributionAgentFacto(Context, post, apply, delete, action, location, propertylist, name, title, details, enabled, serviceName, logLevel, allowedRoots, queueProcessingEnabled, packageImporterEndpoints, passiveQueues, priorityQueues, retryStrategy, retryAttempts, requestAuthorizationStrategyTarget, transportSecretProviderTarget, packageBuilderTarget, triggersTarget, queueProvider, asyncDelivery, httpConnTimeout);
            };

            Post["/system/console/configMgr/org.apache.sling.distribution.agent.impl.PrivilegeDistributionRequestAuthorizationStrategyFactory"] = parameters =>
            {
                var post = Parameters.ValueOf<bool?>(parameters, Context.Request, "post", ParameterType.Query);
                var apply = Parameters.ValueOf<bool?>(parameters, Context.Request, "apply", ParameterType.Query);
                var delete = Parameters.ValueOf<bool?>(parameters, Context.Request, "delete", ParameterType.Query);
                var action = Parameters.ValueOf<string>(parameters, Context.Request, "action", ParameterType.Query);
                var location = Parameters.ValueOf<string>(parameters, Context.Request, "location", ParameterType.Query);
                var propertylist = Parameters.ValueOf<List<string>>(parameters, Context.Request, "propertylist", ParameterType.Query);
                var name = Parameters.ValueOf<string>(parameters, Context.Request, "name", ParameterType.Query);
                var jcrPrivilege = Parameters.ValueOf<string>(parameters, Context.Request, "jcrPrivilege", ParameterType.Query);
                return service.OrgApacheSlingDistributionAgentImplPrivilegeDistributionRequestA(Context, post, apply, delete, action, location, propertylist, name, jcrPrivilege);
            };

            Post["/system/console/configMgr/org.apache.sling.distribution.agent.impl.QueueDistributionAgentFactory"] = parameters =>
            {
                var post = Parameters.ValueOf<bool?>(parameters, Context.Request, "post", ParameterType.Query);
                var apply = Parameters.ValueOf<bool?>(parameters, Context.Request, "apply", ParameterType.Query);
                var delete = Parameters.ValueOf<bool?>(parameters, Context.Request, "delete", ParameterType.Query);
                var action = Parameters.ValueOf<string>(parameters, Context.Request, "action", ParameterType.Query);
                var location = Parameters.ValueOf<string>(parameters, Context.Request, "location", ParameterType.Query);
                var propertylist = Parameters.ValueOf<List<string>>(parameters, Context.Request, "propertylist", ParameterType.Query);
                var name = Parameters.ValueOf<string>(parameters, Context.Request, "name", ParameterType.Query);
                var title = Parameters.ValueOf<string>(parameters, Context.Request, "title", ParameterType.Query);
                var details = Parameters.ValueOf<string>(parameters, Context.Request, "details", ParameterType.Query);
                var enabled = Parameters.ValueOf<bool?>(parameters, Context.Request, "enabled", ParameterType.Query);
                var serviceName = Parameters.ValueOf<string>(parameters, Context.Request, "serviceName", ParameterType.Query);
                var logLevel = Parameters.ValueOf<string>(parameters, Context.Request, "logLevel", ParameterType.Query);
                var allowedRoots = Parameters.ValueOf<List<string>>(parameters, Context.Request, "allowedRoots", ParameterType.Query);
                var requestAuthorizationStrategyTarget = Parameters.ValueOf<string>(parameters, Context.Request, "requestAuthorizationStrategyTarget", ParameterType.Query);
                var queueProviderFactoryTarget = Parameters.ValueOf<string>(parameters, Context.Request, "queueProviderFactoryTarget", ParameterType.Query);
                var packageBuilderTarget = Parameters.ValueOf<string>(parameters, Context.Request, "packageBuilderTarget", ParameterType.Query);
                var triggersTarget = Parameters.ValueOf<string>(parameters, Context.Request, "triggersTarget", ParameterType.Query);
                var priorityQueues = Parameters.ValueOf<List<string>>(parameters, Context.Request, "priorityQueues", ParameterType.Query);
                return service.OrgApacheSlingDistributionAgentImplQueueDistributionAgentFactory(Context, post, apply, delete, action, location, propertylist, name, title, details, enabled, serviceName, logLevel, allowedRoots, requestAuthorizationStrategyTarget, queueProviderFactoryTarget, packageBuilderTarget, triggersTarget, priorityQueues);
            };

            Post["/system/console/configMgr/org.apache.sling.distribution.agent.impl.ReverseDistributionAgentFactory"] = parameters =>
            {
                var post = Parameters.ValueOf<bool?>(parameters, Context.Request, "post", ParameterType.Query);
                var apply = Parameters.ValueOf<bool?>(parameters, Context.Request, "apply", ParameterType.Query);
                var delete = Parameters.ValueOf<bool?>(parameters, Context.Request, "delete", ParameterType.Query);
                var action = Parameters.ValueOf<string>(parameters, Context.Request, "action", ParameterType.Query);
                var location = Parameters.ValueOf<string>(parameters, Context.Request, "location", ParameterType.Query);
                var propertylist = Parameters.ValueOf<List<string>>(parameters, Context.Request, "propertylist", ParameterType.Query);
                var name = Parameters.ValueOf<string>(parameters, Context.Request, "name", ParameterType.Query);
                var title = Parameters.ValueOf<string>(parameters, Context.Request, "title", ParameterType.Query);
                var details = Parameters.ValueOf<string>(parameters, Context.Request, "details", ParameterType.Query);
                var enabled = Parameters.ValueOf<bool?>(parameters, Context.Request, "enabled", ParameterType.Query);
                var serviceName = Parameters.ValueOf<string>(parameters, Context.Request, "serviceName", ParameterType.Query);
                var logLevel = Parameters.ValueOf<string>(parameters, Context.Request, "logLevel", ParameterType.Query);
                var queueProcessingEnabled = Parameters.ValueOf<bool?>(parameters, Context.Request, "queueProcessingEnabled", ParameterType.Query);
                var packageExporterEndpoints = Parameters.ValueOf<List<string>>(parameters, Context.Request, "packageExporterEndpoints", ParameterType.Query);
                var pullItems = Parameters.ValueOf<int?>(parameters, Context.Request, "pullItems", ParameterType.Query);
                var httpConnTimeout = Parameters.ValueOf<int?>(parameters, Context.Request, "httpConnTimeout", ParameterType.Query);
                var requestAuthorizationStrategyTarget = Parameters.ValueOf<string>(parameters, Context.Request, "requestAuthorizationStrategyTarget", ParameterType.Query);
                var transportSecretProviderTarget = Parameters.ValueOf<string>(parameters, Context.Request, "transportSecretProviderTarget", ParameterType.Query);
                var packageBuilderTarget = Parameters.ValueOf<string>(parameters, Context.Request, "packageBuilderTarget", ParameterType.Query);
                var triggersTarget = Parameters.ValueOf<string>(parameters, Context.Request, "triggersTarget", ParameterType.Query);
                return service.OrgApacheSlingDistributionAgentImplReverseDistributionAgentFacto(Context, post, apply, delete, action, location, propertylist, name, title, details, enabled, serviceName, logLevel, queueProcessingEnabled, packageExporterEndpoints, pullItems, httpConnTimeout, requestAuthorizationStrategyTarget, transportSecretProviderTarget, packageBuilderTarget, triggersTarget);
            };

            Post["/system/console/configMgr/org.apache.sling.distribution.agent.impl.SimpleDistributionAgentFactory"] = parameters =>
            {
                var post = Parameters.ValueOf<bool?>(parameters, Context.Request, "post", ParameterType.Query);
                var apply = Parameters.ValueOf<bool?>(parameters, Context.Request, "apply", ParameterType.Query);
                var delete = Parameters.ValueOf<bool?>(parameters, Context.Request, "delete", ParameterType.Query);
                var action = Parameters.ValueOf<string>(parameters, Context.Request, "action", ParameterType.Query);
                var location = Parameters.ValueOf<string>(parameters, Context.Request, "location", ParameterType.Query);
                var propertylist = Parameters.ValueOf<List<string>>(parameters, Context.Request, "propertylist", ParameterType.Query);
                var name = Parameters.ValueOf<string>(parameters, Context.Request, "name", ParameterType.Query);
                var title = Parameters.ValueOf<string>(parameters, Context.Request, "title", ParameterType.Query);
                var details = Parameters.ValueOf<string>(parameters, Context.Request, "details", ParameterType.Query);
                var enabled = Parameters.ValueOf<bool?>(parameters, Context.Request, "enabled", ParameterType.Query);
                var serviceName = Parameters.ValueOf<string>(parameters, Context.Request, "serviceName", ParameterType.Query);
                var logLevel = Parameters.ValueOf<string>(parameters, Context.Request, "logLevel", ParameterType.Query);
                var queueProcessingEnabled = Parameters.ValueOf<bool?>(parameters, Context.Request, "queueProcessingEnabled", ParameterType.Query);
                var packageExporterTarget = Parameters.ValueOf<string>(parameters, Context.Request, "packageExporterTarget", ParameterType.Query);
                var packageImporterTarget = Parameters.ValueOf<string>(parameters, Context.Request, "packageImporterTarget", ParameterType.Query);
                var requestAuthorizationStrategyTarget = Parameters.ValueOf<string>(parameters, Context.Request, "requestAuthorizationStrategyTarget", ParameterType.Query);
                var triggersTarget = Parameters.ValueOf<string>(parameters, Context.Request, "triggersTarget", ParameterType.Query);
                return service.OrgApacheSlingDistributionAgentImplSimpleDistributionAgentFactor(Context, post, apply, delete, action, location, propertylist, name, title, details, enabled, serviceName, logLevel, queueProcessingEnabled, packageExporterTarget, packageImporterTarget, requestAuthorizationStrategyTarget, triggersTarget);
            };

            Post["/system/console/configMgr/org.apache.sling.distribution.agent.impl.SyncDistributionAgentFactory"] = parameters =>
            {
                var post = Parameters.ValueOf<bool?>(parameters, Context.Request, "post", ParameterType.Query);
                var apply = Parameters.ValueOf<bool?>(parameters, Context.Request, "apply", ParameterType.Query);
                var delete = Parameters.ValueOf<bool?>(parameters, Context.Request, "delete", ParameterType.Query);
                var action = Parameters.ValueOf<string>(parameters, Context.Request, "action", ParameterType.Query);
                var location = Parameters.ValueOf<string>(parameters, Context.Request, "location", ParameterType.Query);
                var propertylist = Parameters.ValueOf<List<string>>(parameters, Context.Request, "propertylist", ParameterType.Query);
                var name = Parameters.ValueOf<string>(parameters, Context.Request, "name", ParameterType.Query);
                var title = Parameters.ValueOf<string>(parameters, Context.Request, "title", ParameterType.Query);
                var details = Parameters.ValueOf<string>(parameters, Context.Request, "details", ParameterType.Query);
                var enabled = Parameters.ValueOf<bool?>(parameters, Context.Request, "enabled", ParameterType.Query);
                var serviceName = Parameters.ValueOf<string>(parameters, Context.Request, "serviceName", ParameterType.Query);
                var logLevel = Parameters.ValueOf<string>(parameters, Context.Request, "logLevel", ParameterType.Query);
                var queueProcessingEnabled = Parameters.ValueOf<bool?>(parameters, Context.Request, "queueProcessingEnabled", ParameterType.Query);
                var passiveQueues = Parameters.ValueOf<List<string>>(parameters, Context.Request, "passiveQueues", ParameterType.Query);
                var packageExporterEndpoints = Parameters.ValueOf<List<string>>(parameters, Context.Request, "packageExporterEndpoints", ParameterType.Query);
                var packageImporterEndpoints = Parameters.ValueOf<List<string>>(parameters, Context.Request, "packageImporterEndpoints", ParameterType.Query);
                var retryStrategy = Parameters.ValueOf<string>(parameters, Context.Request, "retryStrategy", ParameterType.Query);
                var retryAttempts = Parameters.ValueOf<int?>(parameters, Context.Request, "retryAttempts", ParameterType.Query);
                var pullItems = Parameters.ValueOf<int?>(parameters, Context.Request, "pullItems", ParameterType.Query);
                var httpConnTimeout = Parameters.ValueOf<int?>(parameters, Context.Request, "httpConnTimeout", ParameterType.Query);
                var requestAuthorizationStrategyTarget = Parameters.ValueOf<string>(parameters, Context.Request, "requestAuthorizationStrategyTarget", ParameterType.Query);
                var transportSecretProviderTarget = Parameters.ValueOf<string>(parameters, Context.Request, "transportSecretProviderTarget", ParameterType.Query);
                var packageBuilderTarget = Parameters.ValueOf<string>(parameters, Context.Request, "packageBuilderTarget", ParameterType.Query);
                var triggersTarget = Parameters.ValueOf<string>(parameters, Context.Request, "triggersTarget", ParameterType.Query);
                return service.OrgApacheSlingDistributionAgentImplSyncDistributionAgentFactory(Context, post, apply, delete, action, location, propertylist, name, title, details, enabled, serviceName, logLevel, queueProcessingEnabled, passiveQueues, packageExporterEndpoints, packageImporterEndpoints, retryStrategy, retryAttempts, pullItems, httpConnTimeout, requestAuthorizationStrategyTarget, transportSecretProviderTarget, packageBuilderTarget, triggersTarget);
            };

            Post["/system/console/configMgr/org.apache.sling.distribution.monitor.DistributionQueueHealthCheck"] = parameters =>
            {
                var post = Parameters.ValueOf<bool?>(parameters, Context.Request, "post", ParameterType.Query);
                var apply = Parameters.ValueOf<bool?>(parameters, Context.Request, "apply", ParameterType.Query);
                var delete = Parameters.ValueOf<bool?>(parameters, Context.Request, "delete", ParameterType.Query);
                var action = Parameters.ValueOf<string>(parameters, Context.Request, "action", ParameterType.Query);
                var location = Parameters.ValueOf<string>(parameters, Context.Request, "location", ParameterType.Query);
                var propertylist = Parameters.ValueOf<List<string>>(parameters, Context.Request, "propertylist", ParameterType.Query);
                var hcName = Parameters.ValueOf<string>(parameters, Context.Request, "hcName", ParameterType.Query);
                var hcTags = Parameters.ValueOf<List<string>>(parameters, Context.Request, "hcTags", ParameterType.Query);
                var hcMbeanName = Parameters.ValueOf<string>(parameters, Context.Request, "hcMbeanName", ParameterType.Query);
                var numberOfRetriesAllowed = Parameters.ValueOf<int?>(parameters, Context.Request, "numberOfRetriesAllowed", ParameterType.Query);
                return service.OrgApacheSlingDistributionMonitorDistributionQueueHealthCheck(Context, post, apply, delete, action, location, propertylist, hcName, hcTags, hcMbeanName, numberOfRetriesAllowed);
            };

            Post["/system/console/configMgr/org.apache.sling.distribution.packaging.impl.exporter.AgentDistributionPackageExporterFactory"] = parameters =>
            {
                var post = Parameters.ValueOf<bool?>(parameters, Context.Request, "post", ParameterType.Query);
                var apply = Parameters.ValueOf<bool?>(parameters, Context.Request, "apply", ParameterType.Query);
                var delete = Parameters.ValueOf<bool?>(parameters, Context.Request, "delete", ParameterType.Query);
                var action = Parameters.ValueOf<string>(parameters, Context.Request, "action", ParameterType.Query);
                var location = Parameters.ValueOf<string>(parameters, Context.Request, "location", ParameterType.Query);
                var propertylist = Parameters.ValueOf<List<string>>(parameters, Context.Request, "propertylist", ParameterType.Query);
                var name = Parameters.ValueOf<string>(parameters, Context.Request, "name", ParameterType.Query);
                var queue = Parameters.ValueOf<string>(parameters, Context.Request, "queue", ParameterType.Query);
                var dropInvalidItems = Parameters.ValueOf<bool?>(parameters, Context.Request, "dropInvalidItems", ParameterType.Query);
                var agentTarget = Parameters.ValueOf<string>(parameters, Context.Request, "agentTarget", ParameterType.Query);
                return service.OrgApacheSlingDistributionPackagingImplExporterAgentDistributio(Context, post, apply, delete, action, location, propertylist, name, queue, dropInvalidItems, agentTarget);
            };

            Post["/system/console/configMgr/org.apache.sling.distribution.packaging.impl.exporter.LocalDistributionPackageExporterFactory"] = parameters =>
            {
                var post = Parameters.ValueOf<bool?>(parameters, Context.Request, "post", ParameterType.Query);
                var apply = Parameters.ValueOf<bool?>(parameters, Context.Request, "apply", ParameterType.Query);
                var delete = Parameters.ValueOf<bool?>(parameters, Context.Request, "delete", ParameterType.Query);
                var action = Parameters.ValueOf<string>(parameters, Context.Request, "action", ParameterType.Query);
                var location = Parameters.ValueOf<string>(parameters, Context.Request, "location", ParameterType.Query);
                var propertylist = Parameters.ValueOf<List<string>>(parameters, Context.Request, "propertylist", ParameterType.Query);
                var name = Parameters.ValueOf<string>(parameters, Context.Request, "name", ParameterType.Query);
                var packageBuilderTarget = Parameters.ValueOf<string>(parameters, Context.Request, "packageBuilderTarget", ParameterType.Query);
                return service.OrgApacheSlingDistributionPackagingImplExporterLocalDistributio(Context, post, apply, delete, action, location, propertylist, name, packageBuilderTarget);
            };

            Post["/system/console/configMgr/org.apache.sling.distribution.packaging.impl.exporter.RemoteDistributionPackageExporterFactory"] = parameters =>
            {
                var post = Parameters.ValueOf<bool?>(parameters, Context.Request, "post", ParameterType.Query);
                var apply = Parameters.ValueOf<bool?>(parameters, Context.Request, "apply", ParameterType.Query);
                var delete = Parameters.ValueOf<bool?>(parameters, Context.Request, "delete", ParameterType.Query);
                var action = Parameters.ValueOf<string>(parameters, Context.Request, "action", ParameterType.Query);
                var location = Parameters.ValueOf<string>(parameters, Context.Request, "location", ParameterType.Query);
                var propertylist = Parameters.ValueOf<List<string>>(parameters, Context.Request, "propertylist", ParameterType.Query);
                var name = Parameters.ValueOf<string>(parameters, Context.Request, "name", ParameterType.Query);
                var endpoints = Parameters.ValueOf<List<string>>(parameters, Context.Request, "endpoints", ParameterType.Query);
                var pullItems = Parameters.ValueOf<int?>(parameters, Context.Request, "pullItems", ParameterType.Query);
                var packageBuilderTarget = Parameters.ValueOf<string>(parameters, Context.Request, "packageBuilderTarget", ParameterType.Query);
                var transportSecretProviderTarget = Parameters.ValueOf<string>(parameters, Context.Request, "transportSecretProviderTarget", ParameterType.Query);
                return service.OrgApacheSlingDistributionPackagingImplExporterRemoteDistributi(Context, post, apply, delete, action, location, propertylist, name, endpoints, pullItems, packageBuilderTarget, transportSecretProviderTarget);
            };

            Post["/system/console/configMgr/org.apache.sling.distribution.packaging.impl.importer.LocalDistributionPackageImporterFactory"] = parameters =>
            {
                var post = Parameters.ValueOf<bool?>(parameters, Context.Request, "post", ParameterType.Query);
                var apply = Parameters.ValueOf<bool?>(parameters, Context.Request, "apply", ParameterType.Query);
                var delete = Parameters.ValueOf<bool?>(parameters, Context.Request, "delete", ParameterType.Query);
                var action = Parameters.ValueOf<string>(parameters, Context.Request, "action", ParameterType.Query);
                var location = Parameters.ValueOf<string>(parameters, Context.Request, "location", ParameterType.Query);
                var propertylist = Parameters.ValueOf<List<string>>(parameters, Context.Request, "propertylist", ParameterType.Query);
                var name = Parameters.ValueOf<string>(parameters, Context.Request, "name", ParameterType.Query);
                var packageBuilderTarget = Parameters.ValueOf<string>(parameters, Context.Request, "packageBuilderTarget", ParameterType.Query);
                return service.OrgApacheSlingDistributionPackagingImplImporterLocalDistributio(Context, post, apply, delete, action, location, propertylist, name, packageBuilderTarget);
            };

            Post["/system/console/configMgr/org.apache.sling.distribution.packaging.impl.importer.RemoteDistributionPackageImporterFactory"] = parameters =>
            {
                var post = Parameters.ValueOf<bool?>(parameters, Context.Request, "post", ParameterType.Query);
                var apply = Parameters.ValueOf<bool?>(parameters, Context.Request, "apply", ParameterType.Query);
                var delete = Parameters.ValueOf<bool?>(parameters, Context.Request, "delete", ParameterType.Query);
                var action = Parameters.ValueOf<string>(parameters, Context.Request, "action", ParameterType.Query);
                var location = Parameters.ValueOf<string>(parameters, Context.Request, "location", ParameterType.Query);
                var propertylist = Parameters.ValueOf<List<string>>(parameters, Context.Request, "propertylist", ParameterType.Query);
                var name = Parameters.ValueOf<string>(parameters, Context.Request, "name", ParameterType.Query);
                var endpoints = Parameters.ValueOf<List<string>>(parameters, Context.Request, "endpoints", ParameterType.Query);
                var transportSecretProviderTarget = Parameters.ValueOf<string>(parameters, Context.Request, "transportSecretProviderTarget", ParameterType.Query);
                return service.OrgApacheSlingDistributionPackagingImplImporterRemoteDistributi(Context, post, apply, delete, action, location, propertylist, name, endpoints, transportSecretProviderTarget);
            };

            Post["/system/console/configMgr/org.apache.sling.distribution.packaging.impl.importer.RepositoryDistributionPackageImporterFactory"] = parameters =>
            {
                var post = Parameters.ValueOf<bool?>(parameters, Context.Request, "post", ParameterType.Query);
                var apply = Parameters.ValueOf<bool?>(parameters, Context.Request, "apply", ParameterType.Query);
                var delete = Parameters.ValueOf<bool?>(parameters, Context.Request, "delete", ParameterType.Query);
                var action = Parameters.ValueOf<string>(parameters, Context.Request, "action", ParameterType.Query);
                var location = Parameters.ValueOf<string>(parameters, Context.Request, "location", ParameterType.Query);
                var propertylist = Parameters.ValueOf<List<string>>(parameters, Context.Request, "propertylist", ParameterType.Query);
                var name = Parameters.ValueOf<string>(parameters, Context.Request, "name", ParameterType.Query);
                var serviceName = Parameters.ValueOf<string>(parameters, Context.Request, "serviceName", ParameterType.Query);
                var path = Parameters.ValueOf<string>(parameters, Context.Request, "path", ParameterType.Query);
                var privilegeName = Parameters.ValueOf<string>(parameters, Context.Request, "privilegeName", ParameterType.Query);
                return service.OrgApacheSlingDistributionPackagingImplImporterRepositoryDistri(Context, post, apply, delete, action, location, propertylist, name, serviceName, path, privilegeName);
            };

            Post["/system/console/configMgr/org.apache.sling.distribution.resources.impl.DistributionConfigurationResourceProviderFactory"] = parameters =>
            {
                var post = Parameters.ValueOf<bool?>(parameters, Context.Request, "post", ParameterType.Query);
                var apply = Parameters.ValueOf<bool?>(parameters, Context.Request, "apply", ParameterType.Query);
                var delete = Parameters.ValueOf<bool?>(parameters, Context.Request, "delete", ParameterType.Query);
                var action = Parameters.ValueOf<string>(parameters, Context.Request, "action", ParameterType.Query);
                var location = Parameters.ValueOf<string>(parameters, Context.Request, "location", ParameterType.Query);
                var propertylist = Parameters.ValueOf<List<string>>(parameters, Context.Request, "propertylist", ParameterType.Query);
                var providerRoots = Parameters.ValueOf<string>(parameters, Context.Request, "providerRoots", ParameterType.Query);
                var kind = Parameters.ValueOf<string>(parameters, Context.Request, "kind", ParameterType.Query);
                return service.OrgApacheSlingDistributionResourcesImplDistributionConfiguration(Context, post, apply, delete, action, location, propertylist, providerRoots, kind);
            };

            Post["/system/console/configMgr/org.apache.sling.distribution.resources.impl.DistributionServiceResourceProviderFactory"] = parameters =>
            {
                var post = Parameters.ValueOf<bool?>(parameters, Context.Request, "post", ParameterType.Query);
                var apply = Parameters.ValueOf<bool?>(parameters, Context.Request, "apply", ParameterType.Query);
                var delete = Parameters.ValueOf<bool?>(parameters, Context.Request, "delete", ParameterType.Query);
                var action = Parameters.ValueOf<string>(parameters, Context.Request, "action", ParameterType.Query);
                var location = Parameters.ValueOf<string>(parameters, Context.Request, "location", ParameterType.Query);
                var propertylist = Parameters.ValueOf<List<string>>(parameters, Context.Request, "propertylist", ParameterType.Query);
                var providerRoots = Parameters.ValueOf<string>(parameters, Context.Request, "providerRoots", ParameterType.Query);
                var kind = Parameters.ValueOf<string>(parameters, Context.Request, "kind", ParameterType.Query);
                return service.OrgApacheSlingDistributionResourcesImplDistributionServiceResour(Context, post, apply, delete, action, location, propertylist, providerRoots, kind);
            };

            Post["/system/console/configMgr/org.apache.sling.distribution.serialization.impl.DistributionPackageBuilderFactory"] = parameters =>
            {
                var post = Parameters.ValueOf<bool?>(parameters, Context.Request, "post", ParameterType.Query);
                var apply = Parameters.ValueOf<bool?>(parameters, Context.Request, "apply", ParameterType.Query);
                var delete = Parameters.ValueOf<bool?>(parameters, Context.Request, "delete", ParameterType.Query);
                var action = Parameters.ValueOf<string>(parameters, Context.Request, "action", ParameterType.Query);
                var location = Parameters.ValueOf<string>(parameters, Context.Request, "location", ParameterType.Query);
                var propertylist = Parameters.ValueOf<List<string>>(parameters, Context.Request, "propertylist", ParameterType.Query);
                var name = Parameters.ValueOf<string>(parameters, Context.Request, "name", ParameterType.Query);
                var type = Parameters.ValueOf<string>(parameters, Context.Request, "type", ParameterType.Query);
                var formatTarget = Parameters.ValueOf<string>(parameters, Context.Request, "formatTarget", ParameterType.Query);
                var tempFsFolder = Parameters.ValueOf<string>(parameters, Context.Request, "tempFsFolder", ParameterType.Query);
                var fileThreshold = Parameters.ValueOf<int?>(parameters, Context.Request, "fileThreshold", ParameterType.Query);
                var memoryUnit = Parameters.ValueOf<string>(parameters, Context.Request, "memoryUnit", ParameterType.Query);
                var useOffHeapMemory = Parameters.ValueOf<bool?>(parameters, Context.Request, "useOffHeapMemory", ParameterType.Query);
                var digestAlgorithm = Parameters.ValueOf<string>(parameters, Context.Request, "digestAlgorithm", ParameterType.Query);
                var monitoringQueueSize = Parameters.ValueOf<int?>(parameters, Context.Request, "monitoringQueueSize", ParameterType.Query);
                var cleanupDelay = Parameters.ValueOf<int?>(parameters, Context.Request, "cleanupDelay", ParameterType.Query);
                var packageFilters = Parameters.ValueOf<List<string>>(parameters, Context.Request, "packageFilters", ParameterType.Query);
                var propertyFilters = Parameters.ValueOf<List<string>>(parameters, Context.Request, "propertyFilters", ParameterType.Query);
                return service.OrgApacheSlingDistributionSerializationImplDistributionPackageBu(Context, post, apply, delete, action, location, propertylist, name, type, formatTarget, tempFsFolder, fileThreshold, memoryUnit, useOffHeapMemory, digestAlgorithm, monitoringQueueSize, cleanupDelay, packageFilters, propertyFilters);
            };

            Post["/system/console/configMgr/org.apache.sling.distribution.serialization.impl.vlt.VaultDistributionPackageBuilderFactory"] = parameters =>
            {
                var post = Parameters.ValueOf<bool?>(parameters, Context.Request, "post", ParameterType.Query);
                var apply = Parameters.ValueOf<bool?>(parameters, Context.Request, "apply", ParameterType.Query);
                var delete = Parameters.ValueOf<bool?>(parameters, Context.Request, "delete", ParameterType.Query);
                var action = Parameters.ValueOf<string>(parameters, Context.Request, "action", ParameterType.Query);
                var location = Parameters.ValueOf<string>(parameters, Context.Request, "location", ParameterType.Query);
                var propertylist = Parameters.ValueOf<List<string>>(parameters, Context.Request, "propertylist", ParameterType.Query);
                var name = Parameters.ValueOf<string>(parameters, Context.Request, "name", ParameterType.Query);
                var type = Parameters.ValueOf<string>(parameters, Context.Request, "type", ParameterType.Query);
                var importMode = Parameters.ValueOf<string>(parameters, Context.Request, "importMode", ParameterType.Query);
                var aclHandling = Parameters.ValueOf<string>(parameters, Context.Request, "aclHandling", ParameterType.Query);
                var packageRoots = Parameters.ValueOf<string>(parameters, Context.Request, "packageRoots", ParameterType.Query);
                var packageFilters = Parameters.ValueOf<List<string>>(parameters, Context.Request, "packageFilters", ParameterType.Query);
                var propertyFilters = Parameters.ValueOf<List<string>>(parameters, Context.Request, "propertyFilters", ParameterType.Query);
                var tempFsFolder = Parameters.ValueOf<string>(parameters, Context.Request, "tempFsFolder", ParameterType.Query);
                var useBinaryReferences = Parameters.ValueOf<bool?>(parameters, Context.Request, "useBinaryReferences", ParameterType.Query);
                var autoSaveThreshold = Parameters.ValueOf<int?>(parameters, Context.Request, "autoSaveThreshold", ParameterType.Query);
                var cleanupDelay = Parameters.ValueOf<int?>(parameters, Context.Request, "cleanupDelay", ParameterType.Query);
                var fileThreshold = Parameters.ValueOf<int?>(parameters, Context.Request, "fileThreshold", ParameterType.Query);
                var MEGA_BYTES = Parameters.ValueOf<string>(parameters, Context.Request, "MEGA_BYTES", ParameterType.Query);
                var useOffHeapMemory = Parameters.ValueOf<bool?>(parameters, Context.Request, "useOffHeapMemory", ParameterType.Query);
                var digestAlgorithm = Parameters.ValueOf<string>(parameters, Context.Request, "digestAlgorithm", ParameterType.Query);
                var monitoringQueueSize = Parameters.ValueOf<int?>(parameters, Context.Request, "monitoringQueueSize", ParameterType.Query);
                var pathsMapping = Parameters.ValueOf<List<string>>(parameters, Context.Request, "pathsMapping", ParameterType.Query);
                var strictImport = Parameters.ValueOf<bool?>(parameters, Context.Request, "strictImport", ParameterType.Query);
                return service.OrgApacheSlingDistributionSerializationImplVltVaultDistribution(Context, post, apply, delete, action, location, propertylist, name, type, importMode, aclHandling, packageRoots, packageFilters, propertyFilters, tempFsFolder, useBinaryReferences, autoSaveThreshold, cleanupDelay, fileThreshold, MEGA_BYTES, useOffHeapMemory, digestAlgorithm, monitoringQueueSize, pathsMapping, strictImport);
            };

            Post["/system/console/configMgr/org.apache.sling.distribution.transport.impl.UserCredentialsDistributionTransportSecretProvider"] = parameters =>
            {
                var post = Parameters.ValueOf<bool?>(parameters, Context.Request, "post", ParameterType.Query);
                var apply = Parameters.ValueOf<bool?>(parameters, Context.Request, "apply", ParameterType.Query);
                var delete = Parameters.ValueOf<bool?>(parameters, Context.Request, "delete", ParameterType.Query);
                var action = Parameters.ValueOf<string>(parameters, Context.Request, "action", ParameterType.Query);
                var location = Parameters.ValueOf<string>(parameters, Context.Request, "location", ParameterType.Query);
                var propertylist = Parameters.ValueOf<List<string>>(parameters, Context.Request, "propertylist", ParameterType.Query);
                var name = Parameters.ValueOf<string>(parameters, Context.Request, "name", ParameterType.Query);
                var username = Parameters.ValueOf<string>(parameters, Context.Request, "username", ParameterType.Query);
                var password = Parameters.ValueOf<string>(parameters, Context.Request, "password", ParameterType.Query);
                return service.OrgApacheSlingDistributionTransportImplUserCredentialsDistributi(Context, post, apply, delete, action, location, propertylist, name, username, password);
            };

            Post["/system/console/configMgr/org.apache.sling.distribution.trigger.impl.DistributionEventDistributeDistributionTriggerFactory"] = parameters =>
            {
                var post = Parameters.ValueOf<bool?>(parameters, Context.Request, "post", ParameterType.Query);
                var apply = Parameters.ValueOf<bool?>(parameters, Context.Request, "apply", ParameterType.Query);
                var delete = Parameters.ValueOf<bool?>(parameters, Context.Request, "delete", ParameterType.Query);
                var action = Parameters.ValueOf<string>(parameters, Context.Request, "action", ParameterType.Query);
                var location = Parameters.ValueOf<string>(parameters, Context.Request, "location", ParameterType.Query);
                var propertylist = Parameters.ValueOf<List<string>>(parameters, Context.Request, "propertylist", ParameterType.Query);
                var name = Parameters.ValueOf<string>(parameters, Context.Request, "name", ParameterType.Query);
                var path = Parameters.ValueOf<string>(parameters, Context.Request, "path", ParameterType.Query);
                return service.OrgApacheSlingDistributionTriggerImplDistributionEventDistribute(Context, post, apply, delete, action, location, propertylist, name, path);
            };

            Post["/system/console/configMgr/org.apache.sling.distribution.trigger.impl.JcrEventDistributionTriggerFactory"] = parameters =>
            {
                var post = Parameters.ValueOf<bool?>(parameters, Context.Request, "post", ParameterType.Query);
                var apply = Parameters.ValueOf<bool?>(parameters, Context.Request, "apply", ParameterType.Query);
                var delete = Parameters.ValueOf<bool?>(parameters, Context.Request, "delete", ParameterType.Query);
                var action = Parameters.ValueOf<string>(parameters, Context.Request, "action", ParameterType.Query);
                var location = Parameters.ValueOf<string>(parameters, Context.Request, "location", ParameterType.Query);
                var propertylist = Parameters.ValueOf<List<string>>(parameters, Context.Request, "propertylist", ParameterType.Query);
                var name = Parameters.ValueOf<string>(parameters, Context.Request, "name", ParameterType.Query);
                var path = Parameters.ValueOf<string>(parameters, Context.Request, "path", ParameterType.Query);
                var ignoredPathsPatterns = Parameters.ValueOf<List<string>>(parameters, Context.Request, "ignoredPathsPatterns", ParameterType.Query);
                var serviceName = Parameters.ValueOf<string>(parameters, Context.Request, "serviceName", ParameterType.Query);
                var deep = Parameters.ValueOf<bool?>(parameters, Context.Request, "deep", ParameterType.Query);
                return service.OrgApacheSlingDistributionTriggerImplJcrEventDistributionTrigger(Context, post, apply, delete, action, location, propertylist, name, path, ignoredPathsPatterns, serviceName, deep);
            };

            Post["/system/console/configMgr/org.apache.sling.distribution.trigger.impl.PersistedJcrEventDistributionTriggerFactory"] = parameters =>
            {
                var post = Parameters.ValueOf<bool?>(parameters, Context.Request, "post", ParameterType.Query);
                var apply = Parameters.ValueOf<bool?>(parameters, Context.Request, "apply", ParameterType.Query);
                var delete = Parameters.ValueOf<bool?>(parameters, Context.Request, "delete", ParameterType.Query);
                var action = Parameters.ValueOf<string>(parameters, Context.Request, "action", ParameterType.Query);
                var location = Parameters.ValueOf<string>(parameters, Context.Request, "location", ParameterType.Query);
                var propertylist = Parameters.ValueOf<List<string>>(parameters, Context.Request, "propertylist", ParameterType.Query);
                var name = Parameters.ValueOf<string>(parameters, Context.Request, "name", ParameterType.Query);
                var path = Parameters.ValueOf<string>(parameters, Context.Request, "path", ParameterType.Query);
                var serviceName = Parameters.ValueOf<string>(parameters, Context.Request, "serviceName", ParameterType.Query);
                var nuggetsPath = Parameters.ValueOf<string>(parameters, Context.Request, "nuggetsPath", ParameterType.Query);
                return service.OrgApacheSlingDistributionTriggerImplPersistedJcrEventDistributi(Context, post, apply, delete, action, location, propertylist, name, path, serviceName, nuggetsPath);
            };

            Post["/system/console/configMgr/org.apache.sling.distribution.trigger.impl.RemoteEventDistributionTriggerFactory"] = parameters =>
            {
                var post = Parameters.ValueOf<bool?>(parameters, Context.Request, "post", ParameterType.Query);
                var apply = Parameters.ValueOf<bool?>(parameters, Context.Request, "apply", ParameterType.Query);
                var delete = Parameters.ValueOf<bool?>(parameters, Context.Request, "delete", ParameterType.Query);
                var action = Parameters.ValueOf<string>(parameters, Context.Request, "action", ParameterType.Query);
                var location = Parameters.ValueOf<string>(parameters, Context.Request, "location", ParameterType.Query);
                var propertylist = Parameters.ValueOf<List<string>>(parameters, Context.Request, "propertylist", ParameterType.Query);
                var name = Parameters.ValueOf<string>(parameters, Context.Request, "name", ParameterType.Query);
                var endpoint = Parameters.ValueOf<string>(parameters, Context.Request, "endpoint", ParameterType.Query);
                var transportSecretProviderTarget = Parameters.ValueOf<string>(parameters, Context.Request, "transportSecretProviderTarget", ParameterType.Query);
                return service.OrgApacheSlingDistributionTriggerImplRemoteEventDistributionTrig(Context, post, apply, delete, action, location, propertylist, name, endpoint, transportSecretProviderTarget);
            };

            Post["/system/console/configMgr/org.apache.sling.distribution.trigger.impl.ResourceEventDistributionTriggerFactory"] = parameters =>
            {
                var post = Parameters.ValueOf<bool?>(parameters, Context.Request, "post", ParameterType.Query);
                var apply = Parameters.ValueOf<bool?>(parameters, Context.Request, "apply", ParameterType.Query);
                var delete = Parameters.ValueOf<bool?>(parameters, Context.Request, "delete", ParameterType.Query);
                var action = Parameters.ValueOf<string>(parameters, Context.Request, "action", ParameterType.Query);
                var location = Parameters.ValueOf<string>(parameters, Context.Request, "location", ParameterType.Query);
                var propertylist = Parameters.ValueOf<List<string>>(parameters, Context.Request, "propertylist", ParameterType.Query);
                var name = Parameters.ValueOf<string>(parameters, Context.Request, "name", ParameterType.Query);
                var path = Parameters.ValueOf<string>(parameters, Context.Request, "path", ParameterType.Query);
                return service.OrgApacheSlingDistributionTriggerImplResourceEventDistributionTr(Context, post, apply, delete, action, location, propertylist, name, path);
            };

            Post["/system/console/configMgr/org.apache.sling.distribution.trigger.impl.ScheduledDistributionTriggerFactory"] = parameters =>
            {
                var post = Parameters.ValueOf<bool?>(parameters, Context.Request, "post", ParameterType.Query);
                var apply = Parameters.ValueOf<bool?>(parameters, Context.Request, "apply", ParameterType.Query);
                var delete = Parameters.ValueOf<bool?>(parameters, Context.Request, "delete", ParameterType.Query);
                var action = Parameters.ValueOf<string>(parameters, Context.Request, "action", ParameterType.Query);
                var location = Parameters.ValueOf<string>(parameters, Context.Request, "location", ParameterType.Query);
                var propertylist = Parameters.ValueOf<List<string>>(parameters, Context.Request, "propertylist", ParameterType.Query);
                var name = Parameters.ValueOf<string>(parameters, Context.Request, "name", ParameterType.Query);
                var path = Parameters.ValueOf<string>(parameters, Context.Request, "path", ParameterType.Query);
                var seconds = Parameters.ValueOf<string>(parameters, Context.Request, "seconds", ParameterType.Query);
                var serviceName = Parameters.ValueOf<string>(parameters, Context.Request, "serviceName", ParameterType.Query);
                return service.OrgApacheSlingDistributionTriggerImplScheduledDistributionTrigge(Context, post, apply, delete, action, location, propertylist, name, path, seconds, serviceName);
            };

            Post["/system/console/configMgr/org.apache.sling.engine.impl.auth.SlingAuthenticator"] = parameters =>
            {
                var post = Parameters.ValueOf<bool?>(parameters, Context.Request, "post", ParameterType.Query);
                var apply = Parameters.ValueOf<bool?>(parameters, Context.Request, "apply", ParameterType.Query);
                var delete = Parameters.ValueOf<bool?>(parameters, Context.Request, "delete", ParameterType.Query);
                var action = Parameters.ValueOf<string>(parameters, Context.Request, "action", ParameterType.Query);
                var location = Parameters.ValueOf<string>(parameters, Context.Request, "location", ParameterType.Query);
                var propertylist = Parameters.ValueOf<List<string>>(parameters, Context.Request, "propertylist", ParameterType.Query);
                var osgiHttpWhiteboardContextSelect = Parameters.ValueOf<string>(parameters, Context.Request, "osgiHttpWhiteboardContextSelect", ParameterType.Query);
                var osgiHttpWhiteboardListener = Parameters.ValueOf<string>(parameters, Context.Request, "osgiHttpWhiteboardListener", ParameterType.Query);
                var authSudoCookie = Parameters.ValueOf<string>(parameters, Context.Request, "authSudoCookie", ParameterType.Query);
                var authSudoParameter = Parameters.ValueOf<string>(parameters, Context.Request, "authSudoParameter", ParameterType.Query);
                var authAnnonymous = Parameters.ValueOf<bool?>(parameters, Context.Request, "authAnnonymous", ParameterType.Query);
                var slingAuthRequirements = Parameters.ValueOf<List<string>>(parameters, Context.Request, "slingAuthRequirements", ParameterType.Query);
                var slingAuthAnonymousUser = Parameters.ValueOf<string>(parameters, Context.Request, "slingAuthAnonymousUser", ParameterType.Query);
                var slingAuthAnonymousPassword = Parameters.ValueOf<string>(parameters, Context.Request, "slingAuthAnonymousPassword", ParameterType.Query);
                var authHttp = Parameters.ValueOf<string>(parameters, Context.Request, "authHttp", ParameterType.Query);
                var authHttpRealm = Parameters.ValueOf<string>(parameters, Context.Request, "authHttpRealm", ParameterType.Query);
                var authUriSuffix = Parameters.ValueOf<List<string>>(parameters, Context.Request, "authUriSuffix", ParameterType.Query);
                return service.OrgApacheSlingEngineImplAuthSlingAuthenticator(Context, post, apply, delete, action, location, propertylist, osgiHttpWhiteboardContextSelect, osgiHttpWhiteboardListener, authSudoCookie, authSudoParameter, authAnnonymous, slingAuthRequirements, slingAuthAnonymousUser, slingAuthAnonymousPassword, authHttp, authHttpRealm, authUriSuffix);
            };

            Post["/system/console/configMgr/org.apache.sling.engine.impl.debug.RequestProgressTrackerLogFilter"] = parameters =>
            {
                var post = Parameters.ValueOf<bool?>(parameters, Context.Request, "post", ParameterType.Query);
                var apply = Parameters.ValueOf<bool?>(parameters, Context.Request, "apply", ParameterType.Query);
                var delete = Parameters.ValueOf<bool?>(parameters, Context.Request, "delete", ParameterType.Query);
                var action = Parameters.ValueOf<string>(parameters, Context.Request, "action", ParameterType.Query);
                var location = Parameters.ValueOf<string>(parameters, Context.Request, "location", ParameterType.Query);
                var propertylist = Parameters.ValueOf<List<string>>(parameters, Context.Request, "propertylist", ParameterType.Query);
                var extensions = Parameters.ValueOf<List<string>>(parameters, Context.Request, "extensions", ParameterType.Query);
                var minDurationMs = Parameters.ValueOf<int?>(parameters, Context.Request, "minDurationMs", ParameterType.Query);
                var maxDurationMs = Parameters.ValueOf<int?>(parameters, Context.Request, "maxDurationMs", ParameterType.Query);
                var compactLogFormat = Parameters.ValueOf<bool?>(parameters, Context.Request, "compactLogFormat", ParameterType.Query);
                return service.OrgApacheSlingEngineImplDebugRequestProgressTrackerLogFilter(Context, post, apply, delete, action, location, propertylist, extensions, minDurationMs, maxDurationMs, compactLogFormat);
            };

            Post["/system/console/configMgr/org.apache.sling.engine.impl.log.RequestLogger"] = parameters =>
            {
                var post = Parameters.ValueOf<bool?>(parameters, Context.Request, "post", ParameterType.Query);
                var apply = Parameters.ValueOf<bool?>(parameters, Context.Request, "apply", ParameterType.Query);
                var delete = Parameters.ValueOf<bool?>(parameters, Context.Request, "delete", ParameterType.Query);
                var action = Parameters.ValueOf<string>(parameters, Context.Request, "action", ParameterType.Query);
                var location = Parameters.ValueOf<string>(parameters, Context.Request, "location", ParameterType.Query);
                var propertylist = Parameters.ValueOf<List<string>>(parameters, Context.Request, "propertylist", ParameterType.Query);
                var requestLogOutput = Parameters.ValueOf<string>(parameters, Context.Request, "requestLogOutput", ParameterType.Query);
                var requestLogOutputtype = Parameters.ValueOf<int?>(parameters, Context.Request, "requestLogOutputtype", ParameterType.Query);
                var requestLogEnabled = Parameters.ValueOf<bool?>(parameters, Context.Request, "requestLogEnabled", ParameterType.Query);
                var accessLogOutput = Parameters.ValueOf<string>(parameters, Context.Request, "accessLogOutput", ParameterType.Query);
                var accessLogOutputtype = Parameters.ValueOf<int?>(parameters, Context.Request, "accessLogOutputtype", ParameterType.Query);
                var accessLogEnabled = Parameters.ValueOf<bool?>(parameters, Context.Request, "accessLogEnabled", ParameterType.Query);
                return service.OrgApacheSlingEngineImplLogRequestLogger(Context, post, apply, delete, action, location, propertylist, requestLogOutput, requestLogOutputtype, requestLogEnabled, accessLogOutput, accessLogOutputtype, accessLogEnabled);
            };

            Post["/system/console/configMgr/org.apache.sling.engine.impl.log.RequestLoggerService"] = parameters =>
            {
                var post = Parameters.ValueOf<bool?>(parameters, Context.Request, "post", ParameterType.Query);
                var apply = Parameters.ValueOf<bool?>(parameters, Context.Request, "apply", ParameterType.Query);
                var delete = Parameters.ValueOf<bool?>(parameters, Context.Request, "delete", ParameterType.Query);
                var action = Parameters.ValueOf<string>(parameters, Context.Request, "action", ParameterType.Query);
                var location = Parameters.ValueOf<string>(parameters, Context.Request, "location", ParameterType.Query);
                var propertylist = Parameters.ValueOf<List<string>>(parameters, Context.Request, "propertylist", ParameterType.Query);
                var requestLogServiceFormat = Parameters.ValueOf<string>(parameters, Context.Request, "requestLogServiceFormat", ParameterType.Query);
                var requestLogServiceOutput = Parameters.ValueOf<string>(parameters, Context.Request, "requestLogServiceOutput", ParameterType.Query);
                var requestLogServiceOutputtype = Parameters.ValueOf<int?>(parameters, Context.Request, "requestLogServiceOutputtype", ParameterType.Query);
                var requestLogServiceOnentry = Parameters.ValueOf<bool?>(parameters, Context.Request, "requestLogServiceOnentry", ParameterType.Query);
                return service.OrgApacheSlingEngineImplLogRequestLoggerService(Context, post, apply, delete, action, location, propertylist, requestLogServiceFormat, requestLogServiceOutput, requestLogServiceOutputtype, requestLogServiceOnentry);
            };

            Post["/system/console/configMgr/org.apache.sling.engine.impl.SlingMainServlet"] = parameters =>
            {
                var post = Parameters.ValueOf<bool?>(parameters, Context.Request, "post", ParameterType.Query);
                var apply = Parameters.ValueOf<bool?>(parameters, Context.Request, "apply", ParameterType.Query);
                var delete = Parameters.ValueOf<bool?>(parameters, Context.Request, "delete", ParameterType.Query);
                var action = Parameters.ValueOf<string>(parameters, Context.Request, "action", ParameterType.Query);
                var location = Parameters.ValueOf<string>(parameters, Context.Request, "location", ParameterType.Query);
                var propertylist = Parameters.ValueOf<List<string>>(parameters, Context.Request, "propertylist", ParameterType.Query);
                var slingMaxCalls = Parameters.ValueOf<int?>(parameters, Context.Request, "slingMaxCalls", ParameterType.Query);
                var slingMaxInclusions = Parameters.ValueOf<int?>(parameters, Context.Request, "slingMaxInclusions", ParameterType.Query);
                var slingTraceAllow = Parameters.ValueOf<bool?>(parameters, Context.Request, "slingTraceAllow", ParameterType.Query);
                var slingMaxRecordRequests = Parameters.ValueOf<int?>(parameters, Context.Request, "slingMaxRecordRequests", ParameterType.Query);
                var slingStorePatternRequests = Parameters.ValueOf<List<string>>(parameters, Context.Request, "slingStorePatternRequests", ParameterType.Query);
                var slingServerinfo = Parameters.ValueOf<string>(parameters, Context.Request, "slingServerinfo", ParameterType.Query);
                var slingAdditionalResponseHeaders = Parameters.ValueOf<List<string>>(parameters, Context.Request, "slingAdditionalResponseHeaders", ParameterType.Query);
                return service.OrgApacheSlingEngineImplSlingMainServlet(Context, post, apply, delete, action, location, propertylist, slingMaxCalls, slingMaxInclusions, slingTraceAllow, slingMaxRecordRequests, slingStorePatternRequests, slingServerinfo, slingAdditionalResponseHeaders);
            };

            Post["/system/console/configMgr/org.apache.sling.engine.parameters"] = parameters =>
            {
                var post = Parameters.ValueOf<bool?>(parameters, Context.Request, "post", ParameterType.Query);
                var apply = Parameters.ValueOf<bool?>(parameters, Context.Request, "apply", ParameterType.Query);
                var delete = Parameters.ValueOf<bool?>(parameters, Context.Request, "delete", ParameterType.Query);
                var action = Parameters.ValueOf<string>(parameters, Context.Request, "action", ParameterType.Query);
                var location = Parameters.ValueOf<string>(parameters, Context.Request, "location", ParameterType.Query);
                var propertylist = Parameters.ValueOf<List<string>>(parameters, Context.Request, "propertylist", ParameterType.Query);
                var slingDefaultParameterEncoding = Parameters.ValueOf<string>(parameters, Context.Request, "slingDefaultParameterEncoding", ParameterType.Query);
                var slingDefaultMaxParameters = Parameters.ValueOf<int?>(parameters, Context.Request, "slingDefaultMaxParameters", ParameterType.Query);
                var fileLocation = Parameters.ValueOf<string>(parameters, Context.Request, "fileLocation", ParameterType.Query);
                var fileThreshold = Parameters.ValueOf<int?>(parameters, Context.Request, "fileThreshold", ParameterType.Query);
                var fileMax = Parameters.ValueOf<int?>(parameters, Context.Request, "fileMax", ParameterType.Query);
                var requestMax = Parameters.ValueOf<int?>(parameters, Context.Request, "requestMax", ParameterType.Query);
                var slingDefaultParameterCheckForAdditionalContainerParameters = Parameters.ValueOf<bool?>(parameters, Context.Request, "slingDefaultParameterCheckForAdditionalContainerParameters", ParameterType.Query);
                return service.OrgApacheSlingEngineParameters(Context, post, apply, delete, action, location, propertylist, slingDefaultParameterEncoding, slingDefaultMaxParameters, fileLocation, fileThreshold, fileMax, requestMax, slingDefaultParameterCheckForAdditionalContainerParameters);
            };

            Post["/system/console/configMgr/org.apache.sling.event.impl.EventingThreadPool"] = parameters =>
            {
                var post = Parameters.ValueOf<bool?>(parameters, Context.Request, "post", ParameterType.Query);
                var apply = Parameters.ValueOf<bool?>(parameters, Context.Request, "apply", ParameterType.Query);
                var delete = Parameters.ValueOf<bool?>(parameters, Context.Request, "delete", ParameterType.Query);
                var action = Parameters.ValueOf<string>(parameters, Context.Request, "action", ParameterType.Query);
                var location = Parameters.ValueOf<string>(parameters, Context.Request, "location", ParameterType.Query);
                var propertylist = Parameters.ValueOf<List<string>>(parameters, Context.Request, "propertylist", ParameterType.Query);
                var minPoolSize = Parameters.ValueOf<int?>(parameters, Context.Request, "minPoolSize", ParameterType.Query);
                return service.OrgApacheSlingEventImplEventingThreadPool(Context, post, apply, delete, action, location, propertylist, minPoolSize);
            };

            Post["/system/console/configMgr/org.apache.sling.event.impl.jobs.DefaultJobManager"] = parameters =>
            {
                var post = Parameters.ValueOf<bool?>(parameters, Context.Request, "post", ParameterType.Query);
                var apply = Parameters.ValueOf<bool?>(parameters, Context.Request, "apply", ParameterType.Query);
                var delete = Parameters.ValueOf<bool?>(parameters, Context.Request, "delete", ParameterType.Query);
                var action = Parameters.ValueOf<string>(parameters, Context.Request, "action", ParameterType.Query);
                var location = Parameters.ValueOf<string>(parameters, Context.Request, "location", ParameterType.Query);
                var propertylist = Parameters.ValueOf<List<string>>(parameters, Context.Request, "propertylist", ParameterType.Query);
                var queuePriority = Parameters.ValueOf<string>(parameters, Context.Request, "queuePriority", ParameterType.Query);
                var queueRetries = Parameters.ValueOf<int?>(parameters, Context.Request, "queueRetries", ParameterType.Query);
                var queueRetrydelay = Parameters.ValueOf<int?>(parameters, Context.Request, "queueRetrydelay", ParameterType.Query);
                var queueMaxparallel = Parameters.ValueOf<int?>(parameters, Context.Request, "queueMaxparallel", ParameterType.Query);
                return service.OrgApacheSlingEventImplJobsDefaultJobManager(Context, post, apply, delete, action, location, propertylist, queuePriority, queueRetries, queueRetrydelay, queueMaxparallel);
            };

            Post["/system/console/configMgr/org.apache.sling.event.impl.jobs.jcr.PersistenceHandler"] = parameters =>
            {
                var post = Parameters.ValueOf<bool?>(parameters, Context.Request, "post", ParameterType.Query);
                var apply = Parameters.ValueOf<bool?>(parameters, Context.Request, "apply", ParameterType.Query);
                var delete = Parameters.ValueOf<bool?>(parameters, Context.Request, "delete", ParameterType.Query);
                var action = Parameters.ValueOf<string>(parameters, Context.Request, "action", ParameterType.Query);
                var location = Parameters.ValueOf<string>(parameters, Context.Request, "location", ParameterType.Query);
                var propertylist = Parameters.ValueOf<List<string>>(parameters, Context.Request, "propertylist", ParameterType.Query);
                var jobConsumermanagerDisableDistribution = Parameters.ValueOf<bool?>(parameters, Context.Request, "jobConsumermanagerDisableDistribution", ParameterType.Query);
                var startupDelay = Parameters.ValueOf<int?>(parameters, Context.Request, "startupDelay", ParameterType.Query);
                var cleanupPeriod = Parameters.ValueOf<int?>(parameters, Context.Request, "cleanupPeriod", ParameterType.Query);
                return service.OrgApacheSlingEventImplJobsJcrPersistenceHandler(Context, post, apply, delete, action, location, propertylist, jobConsumermanagerDisableDistribution, startupDelay, cleanupPeriod);
            };

            Post["/system/console/configMgr/org.apache.sling.event.impl.jobs.JobConsumerManager"] = parameters =>
            {
                var post = Parameters.ValueOf<bool?>(parameters, Context.Request, "post", ParameterType.Query);
                var apply = Parameters.ValueOf<bool?>(parameters, Context.Request, "apply", ParameterType.Query);
                var delete = Parameters.ValueOf<bool?>(parameters, Context.Request, "delete", ParameterType.Query);
                var action = Parameters.ValueOf<string>(parameters, Context.Request, "action", ParameterType.Query);
                var location = Parameters.ValueOf<string>(parameters, Context.Request, "location", ParameterType.Query);
                var propertylist = Parameters.ValueOf<List<string>>(parameters, Context.Request, "propertylist", ParameterType.Query);
                var orgApacheSlingInstallerConfigurationPersist = Parameters.ValueOf<bool?>(parameters, Context.Request, "orgApacheSlingInstallerConfigurationPersist", ParameterType.Query);
                var jobConsumermanagerWhitelist = Parameters.ValueOf<List<string>>(parameters, Context.Request, "jobConsumermanagerWhitelist", ParameterType.Query);
                var jobConsumermanagerBlacklist = Parameters.ValueOf<List<string>>(parameters, Context.Request, "jobConsumermanagerBlacklist", ParameterType.Query);
                return service.OrgApacheSlingEventImplJobsJobConsumerManager(Context, post, apply, delete, action, location, propertylist, orgApacheSlingInstallerConfigurationPersist, jobConsumermanagerWhitelist, jobConsumermanagerBlacklist);
            };

            Post["/system/console/configMgr/org.apache.sling.event.jobs.QueueConfiguration"] = parameters =>
            {
                var post = Parameters.ValueOf<bool?>(parameters, Context.Request, "post", ParameterType.Query);
                var apply = Parameters.ValueOf<bool?>(parameters, Context.Request, "apply", ParameterType.Query);
                var delete = Parameters.ValueOf<bool?>(parameters, Context.Request, "delete", ParameterType.Query);
                var action = Parameters.ValueOf<string>(parameters, Context.Request, "action", ParameterType.Query);
                var location = Parameters.ValueOf<string>(parameters, Context.Request, "location", ParameterType.Query);
                var propertylist = Parameters.ValueOf<List<string>>(parameters, Context.Request, "propertylist", ParameterType.Query);
                var queueName = Parameters.ValueOf<string>(parameters, Context.Request, "queueName", ParameterType.Query);
                var queueTopics = Parameters.ValueOf<List<string>>(parameters, Context.Request, "queueTopics", ParameterType.Query);
                var queueType = Parameters.ValueOf<string>(parameters, Context.Request, "queueType", ParameterType.Query);
                var queuePriority = Parameters.ValueOf<string>(parameters, Context.Request, "queuePriority", ParameterType.Query);
                var queueRetries = Parameters.ValueOf<int?>(parameters, Context.Request, "queueRetries", ParameterType.Query);
                var queueRetrydelay = Parameters.ValueOf<int?>(parameters, Context.Request, "queueRetrydelay", ParameterType.Query);
                var queueMaxparallel = Parameters.ValueOf<decimal?>(parameters, Context.Request, "queueMaxparallel", ParameterType.Query);
                var queueKeepJobs = Parameters.ValueOf<bool?>(parameters, Context.Request, "queueKeepJobs", ParameterType.Query);
                var queuePreferRunOnCreationInstance = Parameters.ValueOf<bool?>(parameters, Context.Request, "queuePreferRunOnCreationInstance", ParameterType.Query);
                var queueThreadPoolSize = Parameters.ValueOf<int?>(parameters, Context.Request, "queueThreadPoolSize", ParameterType.Query);
                var serviceRanking = Parameters.ValueOf<int?>(parameters, Context.Request, "serviceRanking", ParameterType.Query);
                return service.OrgApacheSlingEventJobsQueueConfiguration(Context, post, apply, delete, action, location, propertylist, queueName, queueTopics, queueType, queuePriority, queueRetries, queueRetrydelay, queueMaxparallel, queueKeepJobs, queuePreferRunOnCreationInstance, queueThreadPoolSize, serviceRanking);
            };

            Post["/system/console/configMgr/org.apache.sling.extensions.webconsolesecurityprovider.internal.SlingWebConsoleSecurityProvider"] = parameters =>
            {
                var post = Parameters.ValueOf<bool?>(parameters, Context.Request, "post", ParameterType.Query);
                var apply = Parameters.ValueOf<bool?>(parameters, Context.Request, "apply", ParameterType.Query);
                var delete = Parameters.ValueOf<bool?>(parameters, Context.Request, "delete", ParameterType.Query);
                var action = Parameters.ValueOf<string>(parameters, Context.Request, "action", ParameterType.Query);
                var location = Parameters.ValueOf<string>(parameters, Context.Request, "location", ParameterType.Query);
                var propertylist = Parameters.ValueOf<List<string>>(parameters, Context.Request, "propertylist", ParameterType.Query);
                var users = Parameters.ValueOf<List<string>>(parameters, Context.Request, "users", ParameterType.Query);
                var groups = Parameters.ValueOf<List<string>>(parameters, Context.Request, "groups", ParameterType.Query);
                return service.OrgApacheSlingExtensionsWebconsolesecurityproviderInternalSlingW(Context, post, apply, delete, action, location, propertylist, users, groups);
            };

            Post["/system/console/configMgr/org.apache.sling.featureflags.Feature"] = parameters =>
            {
                var post = Parameters.ValueOf<bool?>(parameters, Context.Request, "post", ParameterType.Query);
                var apply = Parameters.ValueOf<bool?>(parameters, Context.Request, "apply", ParameterType.Query);
                var delete = Parameters.ValueOf<bool?>(parameters, Context.Request, "delete", ParameterType.Query);
                var action = Parameters.ValueOf<string>(parameters, Context.Request, "action", ParameterType.Query);
                var location = Parameters.ValueOf<string>(parameters, Context.Request, "location", ParameterType.Query);
                var propertylist = Parameters.ValueOf<List<string>>(parameters, Context.Request, "propertylist", ParameterType.Query);
                var name = Parameters.ValueOf<string>(parameters, Context.Request, "name", ParameterType.Query);
                var description = Parameters.ValueOf<string>(parameters, Context.Request, "description", ParameterType.Query);
                var enabled = Parameters.ValueOf<bool?>(parameters, Context.Request, "enabled", ParameterType.Query);
                return service.OrgApacheSlingFeatureflagsFeature(Context, post, apply, delete, action, location, propertylist, name, description, enabled);
            };

            Post["/system/console/configMgr/org.apache.sling.featureflags.impl.ConfiguredFeature"] = parameters =>
            {
                var post = Parameters.ValueOf<bool?>(parameters, Context.Request, "post", ParameterType.Query);
                var apply = Parameters.ValueOf<bool?>(parameters, Context.Request, "apply", ParameterType.Query);
                var delete = Parameters.ValueOf<bool?>(parameters, Context.Request, "delete", ParameterType.Query);
                var action = Parameters.ValueOf<string>(parameters, Context.Request, "action", ParameterType.Query);
                var location = Parameters.ValueOf<string>(parameters, Context.Request, "location", ParameterType.Query);
                var propertylist = Parameters.ValueOf<List<string>>(parameters, Context.Request, "propertylist", ParameterType.Query);
                var name = Parameters.ValueOf<string>(parameters, Context.Request, "name", ParameterType.Query);
                var description = Parameters.ValueOf<string>(parameters, Context.Request, "description", ParameterType.Query);
                var enabled = Parameters.ValueOf<bool?>(parameters, Context.Request, "enabled", ParameterType.Query);
                return service.OrgApacheSlingFeatureflagsImplConfiguredFeature(Context, post, apply, delete, action, location, propertylist, name, description, enabled);
            };

            Post["/system/console/configMgr/org.apache.sling.hapi.impl.HApiUtilImpl"] = parameters =>
            {
                var post = Parameters.ValueOf<bool?>(parameters, Context.Request, "post", ParameterType.Query);
                var apply = Parameters.ValueOf<bool?>(parameters, Context.Request, "apply", ParameterType.Query);
                var delete = Parameters.ValueOf<bool?>(parameters, Context.Request, "delete", ParameterType.Query);
                var action = Parameters.ValueOf<string>(parameters, Context.Request, "action", ParameterType.Query);
                var location = Parameters.ValueOf<string>(parameters, Context.Request, "location", ParameterType.Query);
                var propertylist = Parameters.ValueOf<List<string>>(parameters, Context.Request, "propertylist", ParameterType.Query);
                var orgApacheSlingHapiToolsResourcetype = Parameters.ValueOf<string>(parameters, Context.Request, "orgApacheSlingHapiToolsResourcetype", ParameterType.Query);
                var orgApacheSlingHapiToolsCollectionresourcetype = Parameters.ValueOf<string>(parameters, Context.Request, "orgApacheSlingHapiToolsCollectionresourcetype", ParameterType.Query);
                var orgApacheSlingHapiToolsSearchpaths = Parameters.ValueOf<List<string>>(parameters, Context.Request, "orgApacheSlingHapiToolsSearchpaths", ParameterType.Query);
                var orgApacheSlingHapiToolsExternalurl = Parameters.ValueOf<string>(parameters, Context.Request, "orgApacheSlingHapiToolsExternalurl", ParameterType.Query);
                var orgApacheSlingHapiToolsEnabled = Parameters.ValueOf<bool?>(parameters, Context.Request, "orgApacheSlingHapiToolsEnabled", ParameterType.Query);
                return service.OrgApacheSlingHapiImplHApiUtilImpl(Context, post, apply, delete, action, location, propertylist, orgApacheSlingHapiToolsResourcetype, orgApacheSlingHapiToolsCollectionresourcetype, orgApacheSlingHapiToolsSearchpaths, orgApacheSlingHapiToolsExternalurl, orgApacheSlingHapiToolsEnabled);
            };

            Post["/system/console/configMgr/org.apache.sling.hc.core.impl.CompositeHealthCheck"] = parameters =>
            {
                var post = Parameters.ValueOf<bool?>(parameters, Context.Request, "post", ParameterType.Query);
                var apply = Parameters.ValueOf<bool?>(parameters, Context.Request, "apply", ParameterType.Query);
                var delete = Parameters.ValueOf<bool?>(parameters, Context.Request, "delete", ParameterType.Query);
                var action = Parameters.ValueOf<string>(parameters, Context.Request, "action", ParameterType.Query);
                var location = Parameters.ValueOf<string>(parameters, Context.Request, "location", ParameterType.Query);
                var propertylist = Parameters.ValueOf<List<string>>(parameters, Context.Request, "propertylist", ParameterType.Query);
                var hcName = Parameters.ValueOf<string>(parameters, Context.Request, "hcName", ParameterType.Query);
                var hcTags = Parameters.ValueOf<List<string>>(parameters, Context.Request, "hcTags", ParameterType.Query);
                var hcMbeanName = Parameters.ValueOf<string>(parameters, Context.Request, "hcMbeanName", ParameterType.Query);
                var filterTags = Parameters.ValueOf<List<string>>(parameters, Context.Request, "filterTags", ParameterType.Query);
                var filterCombineTagsWithOr = Parameters.ValueOf<bool?>(parameters, Context.Request, "filterCombineTagsWithOr", ParameterType.Query);
                return service.OrgApacheSlingHcCoreImplCompositeHealthCheck(Context, post, apply, delete, action, location, propertylist, hcName, hcTags, hcMbeanName, filterTags, filterCombineTagsWithOr);
            };

            Post["/system/console/configMgr/org.apache.sling.hc.core.impl.executor.HealthCheckExecutorImpl"] = parameters =>
            {
                var post = Parameters.ValueOf<bool?>(parameters, Context.Request, "post", ParameterType.Query);
                var apply = Parameters.ValueOf<bool?>(parameters, Context.Request, "apply", ParameterType.Query);
                var delete = Parameters.ValueOf<bool?>(parameters, Context.Request, "delete", ParameterType.Query);
                var action = Parameters.ValueOf<string>(parameters, Context.Request, "action", ParameterType.Query);
                var location = Parameters.ValueOf<string>(parameters, Context.Request, "location", ParameterType.Query);
                var propertylist = Parameters.ValueOf<List<string>>(parameters, Context.Request, "propertylist", ParameterType.Query);
                var timeoutInMs = Parameters.ValueOf<int?>(parameters, Context.Request, "timeoutInMs", ParameterType.Query);
                var longRunningFutureThresholdForCriticalMs = Parameters.ValueOf<int?>(parameters, Context.Request, "longRunningFutureThresholdForCriticalMs", ParameterType.Query);
                var resultCacheTtlInMs = Parameters.ValueOf<int?>(parameters, Context.Request, "resultCacheTtlInMs", ParameterType.Query);
                return service.OrgApacheSlingHcCoreImplExecutorHealthCheckExecutorImpl(Context, post, apply, delete, action, location, propertylist, timeoutInMs, longRunningFutureThresholdForCriticalMs, resultCacheTtlInMs);
            };

            Post["/system/console/configMgr/org.apache.sling.hc.core.impl.JmxAttributeHealthCheck"] = parameters =>
            {
                var post = Parameters.ValueOf<bool?>(parameters, Context.Request, "post", ParameterType.Query);
                var apply = Parameters.ValueOf<bool?>(parameters, Context.Request, "apply", ParameterType.Query);
                var delete = Parameters.ValueOf<bool?>(parameters, Context.Request, "delete", ParameterType.Query);
                var action = Parameters.ValueOf<string>(parameters, Context.Request, "action", ParameterType.Query);
                var location = Parameters.ValueOf<string>(parameters, Context.Request, "location", ParameterType.Query);
                var propertylist = Parameters.ValueOf<List<string>>(parameters, Context.Request, "propertylist", ParameterType.Query);
                var hcName = Parameters.ValueOf<string>(parameters, Context.Request, "hcName", ParameterType.Query);
                var hcTags = Parameters.ValueOf<List<string>>(parameters, Context.Request, "hcTags", ParameterType.Query);
                var hcMbeanName = Parameters.ValueOf<string>(parameters, Context.Request, "hcMbeanName", ParameterType.Query);
                var mbeanName = Parameters.ValueOf<string>(parameters, Context.Request, "mbeanName", ParameterType.Query);
                var attributeName = Parameters.ValueOf<string>(parameters, Context.Request, "attributeName", ParameterType.Query);
                var attributeValueConstraint = Parameters.ValueOf<string>(parameters, Context.Request, "attributeValueConstraint", ParameterType.Query);
                return service.OrgApacheSlingHcCoreImplJmxAttributeHealthCheck(Context, post, apply, delete, action, location, propertylist, hcName, hcTags, hcMbeanName, mbeanName, attributeName, attributeValueConstraint);
            };

            Post["/system/console/configMgr/org.apache.sling.hc.core.impl.ScriptableHealthCheck"] = parameters =>
            {
                var post = Parameters.ValueOf<bool?>(parameters, Context.Request, "post", ParameterType.Query);
                var apply = Parameters.ValueOf<bool?>(parameters, Context.Request, "apply", ParameterType.Query);
                var delete = Parameters.ValueOf<bool?>(parameters, Context.Request, "delete", ParameterType.Query);
                var action = Parameters.ValueOf<string>(parameters, Context.Request, "action", ParameterType.Query);
                var location = Parameters.ValueOf<string>(parameters, Context.Request, "location", ParameterType.Query);
                var propertylist = Parameters.ValueOf<List<string>>(parameters, Context.Request, "propertylist", ParameterType.Query);
                var hcName = Parameters.ValueOf<string>(parameters, Context.Request, "hcName", ParameterType.Query);
                var hcTags = Parameters.ValueOf<List<string>>(parameters, Context.Request, "hcTags", ParameterType.Query);
                var hcMbeanName = Parameters.ValueOf<string>(parameters, Context.Request, "hcMbeanName", ParameterType.Query);
                var expression = Parameters.ValueOf<string>(parameters, Context.Request, "expression", ParameterType.Query);
                var languageExtension = Parameters.ValueOf<string>(parameters, Context.Request, "languageExtension", ParameterType.Query);
                return service.OrgApacheSlingHcCoreImplScriptableHealthCheck(Context, post, apply, delete, action, location, propertylist, hcName, hcTags, hcMbeanName, expression, languageExtension);
            };

            Post["/system/console/configMgr/org.apache.sling.hc.core.impl.servlet.HealthCheckExecutorServlet"] = parameters =>
            {
                var post = Parameters.ValueOf<bool?>(parameters, Context.Request, "post", ParameterType.Query);
                var apply = Parameters.ValueOf<bool?>(parameters, Context.Request, "apply", ParameterType.Query);
                var delete = Parameters.ValueOf<bool?>(parameters, Context.Request, "delete", ParameterType.Query);
                var action = Parameters.ValueOf<string>(parameters, Context.Request, "action", ParameterType.Query);
                var location = Parameters.ValueOf<string>(parameters, Context.Request, "location", ParameterType.Query);
                var propertylist = Parameters.ValueOf<List<string>>(parameters, Context.Request, "propertylist", ParameterType.Query);
                var servletPath = Parameters.ValueOf<string>(parameters, Context.Request, "servletPath", ParameterType.Query);
                var disabled = Parameters.ValueOf<bool?>(parameters, Context.Request, "disabled", ParameterType.Query);
                var corsAccessControlAllowOrigin = Parameters.ValueOf<string>(parameters, Context.Request, "corsAccessControlAllowOrigin", ParameterType.Query);
                return service.OrgApacheSlingHcCoreImplServletHealthCheckExecutorServlet(Context, post, apply, delete, action, location, propertylist, servletPath, disabled, corsAccessControlAllowOrigin);
            };

            Post["/system/console/configMgr/org.apache.sling.hc.core.impl.servlet.ResultTxtVerboseSerializer"] = parameters =>
            {
                var post = Parameters.ValueOf<bool?>(parameters, Context.Request, "post", ParameterType.Query);
                var apply = Parameters.ValueOf<bool?>(parameters, Context.Request, "apply", ParameterType.Query);
                var delete = Parameters.ValueOf<bool?>(parameters, Context.Request, "delete", ParameterType.Query);
                var action = Parameters.ValueOf<string>(parameters, Context.Request, "action", ParameterType.Query);
                var location = Parameters.ValueOf<string>(parameters, Context.Request, "location", ParameterType.Query);
                var propertylist = Parameters.ValueOf<List<string>>(parameters, Context.Request, "propertylist", ParameterType.Query);
                var totalWidth = Parameters.ValueOf<int?>(parameters, Context.Request, "totalWidth", ParameterType.Query);
                var colWidthName = Parameters.ValueOf<int?>(parameters, Context.Request, "colWidthName", ParameterType.Query);
                var colWidthResult = Parameters.ValueOf<int?>(parameters, Context.Request, "colWidthResult", ParameterType.Query);
                var colWidthTiming = Parameters.ValueOf<int?>(parameters, Context.Request, "colWidthTiming", ParameterType.Query);
                return service.OrgApacheSlingHcCoreImplServletResultTxtVerboseSerializer(Context, post, apply, delete, action, location, propertylist, totalWidth, colWidthName, colWidthResult, colWidthTiming);
            };

            Post["/system/console/configMgr/org.apache.sling.i18n.impl.I18NFilter"] = parameters =>
            {
                var post = Parameters.ValueOf<bool?>(parameters, Context.Request, "post", ParameterType.Query);
                var apply = Parameters.ValueOf<bool?>(parameters, Context.Request, "apply", ParameterType.Query);
                var delete = Parameters.ValueOf<bool?>(parameters, Context.Request, "delete", ParameterType.Query);
                var action = Parameters.ValueOf<string>(parameters, Context.Request, "action", ParameterType.Query);
                var location = Parameters.ValueOf<string>(parameters, Context.Request, "location", ParameterType.Query);
                var propertylist = Parameters.ValueOf<List<string>>(parameters, Context.Request, "propertylist", ParameterType.Query);
                var serviceRanking = Parameters.ValueOf<int?>(parameters, Context.Request, "serviceRanking", ParameterType.Query);
                var slingFilterScope = Parameters.ValueOf<List<string>>(parameters, Context.Request, "slingFilterScope", ParameterType.Query);
                return service.OrgApacheSlingI18nImplI18NFilter(Context, post, apply, delete, action, location, propertylist, serviceRanking, slingFilterScope);
            };

            Post["/system/console/configMgr/org.apache.sling.i18n.impl.JcrResourceBundleProvider"] = parameters =>
            {
                var post = Parameters.ValueOf<bool?>(parameters, Context.Request, "post", ParameterType.Query);
                var apply = Parameters.ValueOf<bool?>(parameters, Context.Request, "apply", ParameterType.Query);
                var delete = Parameters.ValueOf<bool?>(parameters, Context.Request, "delete", ParameterType.Query);
                var action = Parameters.ValueOf<string>(parameters, Context.Request, "action", ParameterType.Query);
                var location = Parameters.ValueOf<string>(parameters, Context.Request, "location", ParameterType.Query);
                var propertylist = Parameters.ValueOf<List<string>>(parameters, Context.Request, "propertylist", ParameterType.Query);
                var localeDefault = Parameters.ValueOf<string>(parameters, Context.Request, "localeDefault", ParameterType.Query);
                var preloadBundles = Parameters.ValueOf<bool?>(parameters, Context.Request, "preloadBundles", ParameterType.Query);
                var invalidationDelay = Parameters.ValueOf<int?>(parameters, Context.Request, "invalidationDelay", ParameterType.Query);
                return service.OrgApacheSlingI18nImplJcrResourceBundleProvider(Context, post, apply, delete, action, location, propertylist, localeDefault, preloadBundles, invalidationDelay);
            };

            Post["/system/console/configMgr/org.apache.sling.installer.provider.jcr.impl.JcrInstaller"] = parameters =>
            {
                var post = Parameters.ValueOf<bool?>(parameters, Context.Request, "post", ParameterType.Query);
                var apply = Parameters.ValueOf<bool?>(parameters, Context.Request, "apply", ParameterType.Query);
                var delete = Parameters.ValueOf<bool?>(parameters, Context.Request, "delete", ParameterType.Query);
                var action = Parameters.ValueOf<string>(parameters, Context.Request, "action", ParameterType.Query);
                var location = Parameters.ValueOf<string>(parameters, Context.Request, "location", ParameterType.Query);
                var propertylist = Parameters.ValueOf<List<string>>(parameters, Context.Request, "propertylist", ParameterType.Query);
                var handlerSchemes = Parameters.ValueOf<List<string>>(parameters, Context.Request, "handlerSchemes", ParameterType.Query);
                var slingJcrinstallFolderNameRegexp = Parameters.ValueOf<string>(parameters, Context.Request, "slingJcrinstallFolderNameRegexp", ParameterType.Query);
                var slingJcrinstallFolderMaxDepth = Parameters.ValueOf<int?>(parameters, Context.Request, "slingJcrinstallFolderMaxDepth", ParameterType.Query);
                var slingJcrinstallSearchPath = Parameters.ValueOf<List<string>>(parameters, Context.Request, "slingJcrinstallSearchPath", ParameterType.Query);
                var slingJcrinstallNewConfigPath = Parameters.ValueOf<string>(parameters, Context.Request, "slingJcrinstallNewConfigPath", ParameterType.Query);
                var slingJcrinstallSignalPath = Parameters.ValueOf<string>(parameters, Context.Request, "slingJcrinstallSignalPath", ParameterType.Query);
                var slingJcrinstallEnableWriteback = Parameters.ValueOf<bool?>(parameters, Context.Request, "slingJcrinstallEnableWriteback", ParameterType.Query);
                return service.OrgApacheSlingInstallerProviderJcrImplJcrInstaller(Context, post, apply, delete, action, location, propertylist, handlerSchemes, slingJcrinstallFolderNameRegexp, slingJcrinstallFolderMaxDepth, slingJcrinstallSearchPath, slingJcrinstallNewConfigPath, slingJcrinstallSignalPath, slingJcrinstallEnableWriteback);
            };

            Post["/system/console/configMgr/org.apache.sling.jcr.base.internal.LoginAdminWhitelist"] = parameters =>
            {
                var post = Parameters.ValueOf<bool?>(parameters, Context.Request, "post", ParameterType.Query);
                var apply = Parameters.ValueOf<bool?>(parameters, Context.Request, "apply", ParameterType.Query);
                var delete = Parameters.ValueOf<bool?>(parameters, Context.Request, "delete", ParameterType.Query);
                var action = Parameters.ValueOf<string>(parameters, Context.Request, "action", ParameterType.Query);
                var location = Parameters.ValueOf<string>(parameters, Context.Request, "location", ParameterType.Query);
                var propertylist = Parameters.ValueOf<List<string>>(parameters, Context.Request, "propertylist", ParameterType.Query);
                var whitelistBypass = Parameters.ValueOf<bool?>(parameters, Context.Request, "whitelistBypass", ParameterType.Query);
                var whitelistBundlesRegexp = Parameters.ValueOf<string>(parameters, Context.Request, "whitelistBundlesRegexp", ParameterType.Query);
                return service.OrgApacheSlingJcrBaseInternalLoginAdminWhitelist(Context, post, apply, delete, action, location, propertylist, whitelistBypass, whitelistBundlesRegexp);
            };

            Post["/system/console/configMgr/org.apache.sling.jcr.base.internal.LoginAdminWhitelist.fragment"] = parameters =>
            {
                var post = Parameters.ValueOf<bool?>(parameters, Context.Request, "post", ParameterType.Query);
                var apply = Parameters.ValueOf<bool?>(parameters, Context.Request, "apply", ParameterType.Query);
                var delete = Parameters.ValueOf<bool?>(parameters, Context.Request, "delete", ParameterType.Query);
                var action = Parameters.ValueOf<string>(parameters, Context.Request, "action", ParameterType.Query);
                var location = Parameters.ValueOf<string>(parameters, Context.Request, "location", ParameterType.Query);
                var propertylist = Parameters.ValueOf<List<string>>(parameters, Context.Request, "propertylist", ParameterType.Query);
                var whitelistName = Parameters.ValueOf<string>(parameters, Context.Request, "whitelistName", ParameterType.Query);
                var whitelistBundles = Parameters.ValueOf<List<string>>(parameters, Context.Request, "whitelistBundles", ParameterType.Query);
                return service.OrgApacheSlingJcrBaseInternalLoginAdminWhitelistFragment(Context, post, apply, delete, action, location, propertylist, whitelistName, whitelistBundles);
            };

            Post["/system/console/configMgr/org.apache.sling.jcr.davex.impl.servlets.SlingDavExServlet"] = parameters =>
            {
                var post = Parameters.ValueOf<bool?>(parameters, Context.Request, "post", ParameterType.Query);
                var apply = Parameters.ValueOf<bool?>(parameters, Context.Request, "apply", ParameterType.Query);
                var delete = Parameters.ValueOf<bool?>(parameters, Context.Request, "delete", ParameterType.Query);
                var action = Parameters.ValueOf<string>(parameters, Context.Request, "action", ParameterType.Query);
                var location = Parameters.ValueOf<string>(parameters, Context.Request, "location", ParameterType.Query);
                var propertylist = Parameters.ValueOf<List<string>>(parameters, Context.Request, "propertylist", ParameterType.Query);
                var alias = Parameters.ValueOf<string>(parameters, Context.Request, "alias", ParameterType.Query);
                var davCreateAbsoluteUri = Parameters.ValueOf<bool?>(parameters, Context.Request, "davCreateAbsoluteUri", ParameterType.Query);
                var davProtectedhandlers = Parameters.ValueOf<string>(parameters, Context.Request, "davProtectedhandlers", ParameterType.Query);
                return service.OrgApacheSlingJcrDavexImplServletsSlingDavExServlet(Context, post, apply, delete, action, location, propertylist, alias, davCreateAbsoluteUri, davProtectedhandlers);
            };

            Post["/system/console/configMgr/org.apache.sling.jcr.jackrabbit.server.JndiRegistrationSupport"] = parameters =>
            {
                var post = Parameters.ValueOf<bool?>(parameters, Context.Request, "post", ParameterType.Query);
                var apply = Parameters.ValueOf<bool?>(parameters, Context.Request, "apply", ParameterType.Query);
                var delete = Parameters.ValueOf<bool?>(parameters, Context.Request, "delete", ParameterType.Query);
                var action = Parameters.ValueOf<string>(parameters, Context.Request, "action", ParameterType.Query);
                var location = Parameters.ValueOf<string>(parameters, Context.Request, "location", ParameterType.Query);
                var propertylist = Parameters.ValueOf<List<string>>(parameters, Context.Request, "propertylist", ParameterType.Query);
                var javaNamingFactoryInitial = Parameters.ValueOf<string>(parameters, Context.Request, "javaNamingFactoryInitial", ParameterType.Query);
                var javaNamingProviderUrl = Parameters.ValueOf<string>(parameters, Context.Request, "javaNamingProviderUrl", ParameterType.Query);
                return service.OrgApacheSlingJcrJackrabbitServerJndiRegistrationSupport(Context, post, apply, delete, action, location, propertylist, javaNamingFactoryInitial, javaNamingProviderUrl);
            };

            Post["/system/console/configMgr/org.apache.sling.jcr.jackrabbit.server.RmiRegistrationSupport"] = parameters =>
            {
                var post = Parameters.ValueOf<bool?>(parameters, Context.Request, "post", ParameterType.Query);
                var apply = Parameters.ValueOf<bool?>(parameters, Context.Request, "apply", ParameterType.Query);
                var delete = Parameters.ValueOf<bool?>(parameters, Context.Request, "delete", ParameterType.Query);
                var action = Parameters.ValueOf<string>(parameters, Context.Request, "action", ParameterType.Query);
                var location = Parameters.ValueOf<string>(parameters, Context.Request, "location", ParameterType.Query);
                var propertylist = Parameters.ValueOf<List<string>>(parameters, Context.Request, "propertylist", ParameterType.Query);
                var port = Parameters.ValueOf<int?>(parameters, Context.Request, "port", ParameterType.Query);
                return service.OrgApacheSlingJcrJackrabbitServerRmiRegistrationSupport(Context, post, apply, delete, action, location, propertylist, port);
            };

            Post["/system/console/configMgr/org.apache.sling.jcr.repoinit.impl.RepositoryInitializer"] = parameters =>
            {
                var post = Parameters.ValueOf<bool?>(parameters, Context.Request, "post", ParameterType.Query);
                var apply = Parameters.ValueOf<bool?>(parameters, Context.Request, "apply", ParameterType.Query);
                var delete = Parameters.ValueOf<bool?>(parameters, Context.Request, "delete", ParameterType.Query);
                var action = Parameters.ValueOf<string>(parameters, Context.Request, "action", ParameterType.Query);
                var location = Parameters.ValueOf<string>(parameters, Context.Request, "location", ParameterType.Query);
                var propertylist = Parameters.ValueOf<List<string>>(parameters, Context.Request, "propertylist", ParameterType.Query);
                var references = Parameters.ValueOf<List<string>>(parameters, Context.Request, "references", ParameterType.Query);
                return service.OrgApacheSlingJcrRepoinitImplRepositoryInitializer(Context, post, apply, delete, action, location, propertylist, references);
            };

            Post["/system/console/configMgr/org.apache.sling.jcr.repoinit.RepositoryInitializer"] = parameters =>
            {
                var post = Parameters.ValueOf<bool?>(parameters, Context.Request, "post", ParameterType.Query);
                var apply = Parameters.ValueOf<bool?>(parameters, Context.Request, "apply", ParameterType.Query);
                var delete = Parameters.ValueOf<bool?>(parameters, Context.Request, "delete", ParameterType.Query);
                var action = Parameters.ValueOf<string>(parameters, Context.Request, "action", ParameterType.Query);
                var location = Parameters.ValueOf<string>(parameters, Context.Request, "location", ParameterType.Query);
                var propertylist = Parameters.ValueOf<List<string>>(parameters, Context.Request, "propertylist", ParameterType.Query);
                var references = Parameters.ValueOf<List<string>>(parameters, Context.Request, "references", ParameterType.Query);
                var scripts = Parameters.ValueOf<List<string>>(parameters, Context.Request, "scripts", ParameterType.Query);
                return service.OrgApacheSlingJcrRepoinitRepositoryInitializer(Context, post, apply, delete, action, location, propertylist, references, scripts);
            };

            Post["/system/console/configMgr/org.apache.sling.jcr.resource.internal.JcrResourceResolverFactoryImpl"] = parameters =>
            {
                var post = Parameters.ValueOf<bool?>(parameters, Context.Request, "post", ParameterType.Query);
                var apply = Parameters.ValueOf<bool?>(parameters, Context.Request, "apply", ParameterType.Query);
                var delete = Parameters.ValueOf<bool?>(parameters, Context.Request, "delete", ParameterType.Query);
                var action = Parameters.ValueOf<string>(parameters, Context.Request, "action", ParameterType.Query);
                var location = Parameters.ValueOf<string>(parameters, Context.Request, "location", ParameterType.Query);
                var propertylist = Parameters.ValueOf<List<string>>(parameters, Context.Request, "propertylist", ParameterType.Query);
                var resourceResolverSearchpath = Parameters.ValueOf<List<string>>(parameters, Context.Request, "resourceResolverSearchpath", ParameterType.Query);
                var resourceResolverManglenamespaces = Parameters.ValueOf<bool?>(parameters, Context.Request, "resourceResolverManglenamespaces", ParameterType.Query);
                var resourceResolverAllowDirect = Parameters.ValueOf<bool?>(parameters, Context.Request, "resourceResolverAllowDirect", ParameterType.Query);
                var resourceResolverRequiredProviders = Parameters.ValueOf<List<string>>(parameters, Context.Request, "resourceResolverRequiredProviders", ParameterType.Query);
                var resourceResolverRequiredProvidernames = Parameters.ValueOf<List<string>>(parameters, Context.Request, "resourceResolverRequiredProvidernames", ParameterType.Query);
                var resourceResolverVirtual = Parameters.ValueOf<List<string>>(parameters, Context.Request, "resourceResolverVirtual", ParameterType.Query);
                var resourceResolverMapping = Parameters.ValueOf<List<string>>(parameters, Context.Request, "resourceResolverMapping", ParameterType.Query);
                var resourceResolverMapLocation = Parameters.ValueOf<string>(parameters, Context.Request, "resourceResolverMapLocation", ParameterType.Query);
                var resourceResolverMapObservation = Parameters.ValueOf<List<string>>(parameters, Context.Request, "resourceResolverMapObservation", ParameterType.Query);
                var resourceResolverDefaultVanityRedirectStatus = Parameters.ValueOf<int?>(parameters, Context.Request, "resourceResolverDefaultVanityRedirectStatus", ParameterType.Query);
                var resourceResolverEnableVanitypath = Parameters.ValueOf<bool?>(parameters, Context.Request, "resourceResolverEnableVanitypath", ParameterType.Query);
                var resourceResolverVanitypathMaxEntries = Parameters.ValueOf<int?>(parameters, Context.Request, "resourceResolverVanitypathMaxEntries", ParameterType.Query);
                var resourceResolverVanitypathMaxEntriesStartup = Parameters.ValueOf<bool?>(parameters, Context.Request, "resourceResolverVanitypathMaxEntriesStartup", ParameterType.Query);
                var resourceResolverVanitypathBloomfilterMaxBytes = Parameters.ValueOf<int?>(parameters, Context.Request, "resourceResolverVanitypathBloomfilterMaxBytes", ParameterType.Query);
                var resourceResolverOptimizeAliasResolution = Parameters.ValueOf<bool?>(parameters, Context.Request, "resourceResolverOptimizeAliasResolution", ParameterType.Query);
                var resourceResolverVanitypathWhitelist = Parameters.ValueOf<List<string>>(parameters, Context.Request, "resourceResolverVanitypathWhitelist", ParameterType.Query);
                var resourceResolverVanitypathBlacklist = Parameters.ValueOf<List<string>>(parameters, Context.Request, "resourceResolverVanitypathBlacklist", ParameterType.Query);
                var resourceResolverVanityPrecedence = Parameters.ValueOf<bool?>(parameters, Context.Request, "resourceResolverVanityPrecedence", ParameterType.Query);
                var resourceResolverProviderhandlingParanoid = Parameters.ValueOf<bool?>(parameters, Context.Request, "resourceResolverProviderhandlingParanoid", ParameterType.Query);
                var resourceResolverLogClosing = Parameters.ValueOf<bool?>(parameters, Context.Request, "resourceResolverLogClosing", ParameterType.Query);
                var resourceResolverLogUnclosed = Parameters.ValueOf<bool?>(parameters, Context.Request, "resourceResolverLogUnclosed", ParameterType.Query);
                return service.OrgApacheSlingJcrResourceInternalJcrResourceResolverFactoryImpl(Context, post, apply, delete, action, location, propertylist, resourceResolverSearchpath, resourceResolverManglenamespaces, resourceResolverAllowDirect, resourceResolverRequiredProviders, resourceResolverRequiredProvidernames, resourceResolverVirtual, resourceResolverMapping, resourceResolverMapLocation, resourceResolverMapObservation, resourceResolverDefaultVanityRedirectStatus, resourceResolverEnableVanitypath, resourceResolverVanitypathMaxEntries, resourceResolverVanitypathMaxEntriesStartup, resourceResolverVanitypathBloomfilterMaxBytes, resourceResolverOptimizeAliasResolution, resourceResolverVanitypathWhitelist, resourceResolverVanitypathBlacklist, resourceResolverVanityPrecedence, resourceResolverProviderhandlingParanoid, resourceResolverLogClosing, resourceResolverLogUnclosed);
            };

            Post["/system/console/configMgr/org.apache.sling.jcr.resource.internal.JcrSystemUserValidator"] = parameters =>
            {
                var post = Parameters.ValueOf<bool?>(parameters, Context.Request, "post", ParameterType.Query);
                var apply = Parameters.ValueOf<bool?>(parameters, Context.Request, "apply", ParameterType.Query);
                var delete = Parameters.ValueOf<bool?>(parameters, Context.Request, "delete", ParameterType.Query);
                var action = Parameters.ValueOf<string>(parameters, Context.Request, "action", ParameterType.Query);
                var location = Parameters.ValueOf<string>(parameters, Context.Request, "location", ParameterType.Query);
                var propertylist = Parameters.ValueOf<List<string>>(parameters, Context.Request, "propertylist", ParameterType.Query);
                var allowOnlySystemUser = Parameters.ValueOf<bool?>(parameters, Context.Request, "allowOnlySystemUser", ParameterType.Query);
                return service.OrgApacheSlingJcrResourceInternalJcrSystemUserValidator(Context, post, apply, delete, action, location, propertylist, allowOnlySystemUser);
            };

            Post["/system/console/configMgr/org.apache.sling.jcr.resourcesecurity.impl.ResourceAccessGateFactory"] = parameters =>
            {
                var post = Parameters.ValueOf<bool?>(parameters, Context.Request, "post", ParameterType.Query);
                var apply = Parameters.ValueOf<bool?>(parameters, Context.Request, "apply", ParameterType.Query);
                var delete = Parameters.ValueOf<bool?>(parameters, Context.Request, "delete", ParameterType.Query);
                var action = Parameters.ValueOf<string>(parameters, Context.Request, "action", ParameterType.Query);
                var location = Parameters.ValueOf<string>(parameters, Context.Request, "location", ParameterType.Query);
                var propertylist = Parameters.ValueOf<List<string>>(parameters, Context.Request, "propertylist", ParameterType.Query);
                var path = Parameters.ValueOf<string>(parameters, Context.Request, "path", ParameterType.Query);
                var checkpathPrefix = Parameters.ValueOf<string>(parameters, Context.Request, "checkpathPrefix", ParameterType.Query);
                var jcrPath = Parameters.ValueOf<string>(parameters, Context.Request, "jcrPath", ParameterType.Query);
                return service.OrgApacheSlingJcrResourcesecurityImplResourceAccessGateFactory(Context, post, apply, delete, action, location, propertylist, path, checkpathPrefix, jcrPath);
            };

            Post["/system/console/configMgr/org.apache.sling.jcr.webdav.impl.handler.DefaultHandlerService"] = parameters =>
            {
                var post = Parameters.ValueOf<bool?>(parameters, Context.Request, "post", ParameterType.Query);
                var apply = Parameters.ValueOf<bool?>(parameters, Context.Request, "apply", ParameterType.Query);
                var delete = Parameters.ValueOf<bool?>(parameters, Context.Request, "delete", ParameterType.Query);
                var action = Parameters.ValueOf<string>(parameters, Context.Request, "action", ParameterType.Query);
                var location = Parameters.ValueOf<string>(parameters, Context.Request, "location", ParameterType.Query);
                var propertylist = Parameters.ValueOf<List<string>>(parameters, Context.Request, "propertylist", ParameterType.Query);
                var serviceRanking = Parameters.ValueOf<int?>(parameters, Context.Request, "serviceRanking", ParameterType.Query);
                var typeCollections = Parameters.ValueOf<string>(parameters, Context.Request, "typeCollections", ParameterType.Query);
                var typeNoncollections = Parameters.ValueOf<string>(parameters, Context.Request, "typeNoncollections", ParameterType.Query);
                var typeContent = Parameters.ValueOf<string>(parameters, Context.Request, "typeContent", ParameterType.Query);
                return service.OrgApacheSlingJcrWebdavImplHandlerDefaultHandlerService(Context, post, apply, delete, action, location, propertylist, serviceRanking, typeCollections, typeNoncollections, typeContent);
            };

            Post["/system/console/configMgr/org.apache.sling.jcr.webdav.impl.handler.DirListingExportHandlerService"] = parameters =>
            {
                var post = Parameters.ValueOf<bool?>(parameters, Context.Request, "post", ParameterType.Query);
                var apply = Parameters.ValueOf<bool?>(parameters, Context.Request, "apply", ParameterType.Query);
                var delete = Parameters.ValueOf<bool?>(parameters, Context.Request, "delete", ParameterType.Query);
                var action = Parameters.ValueOf<string>(parameters, Context.Request, "action", ParameterType.Query);
                var location = Parameters.ValueOf<string>(parameters, Context.Request, "location", ParameterType.Query);
                var propertylist = Parameters.ValueOf<List<string>>(parameters, Context.Request, "propertylist", ParameterType.Query);
                var serviceRanking = Parameters.ValueOf<int?>(parameters, Context.Request, "serviceRanking", ParameterType.Query);
                return service.OrgApacheSlingJcrWebdavImplHandlerDirListingExportHandlerServic(Context, post, apply, delete, action, location, propertylist, serviceRanking);
            };

            Post["/system/console/configMgr/org.apache.sling.jcr.webdav.impl.servlets.SimpleWebDavServlet"] = parameters =>
            {
                var post = Parameters.ValueOf<bool?>(parameters, Context.Request, "post", ParameterType.Query);
                var apply = Parameters.ValueOf<bool?>(parameters, Context.Request, "apply", ParameterType.Query);
                var delete = Parameters.ValueOf<bool?>(parameters, Context.Request, "delete", ParameterType.Query);
                var action = Parameters.ValueOf<string>(parameters, Context.Request, "action", ParameterType.Query);
                var location = Parameters.ValueOf<string>(parameters, Context.Request, "location", ParameterType.Query);
                var propertylist = Parameters.ValueOf<List<string>>(parameters, Context.Request, "propertylist", ParameterType.Query);
                var davRoot = Parameters.ValueOf<string>(parameters, Context.Request, "davRoot", ParameterType.Query);
                var davCreateAbsoluteUri = Parameters.ValueOf<bool?>(parameters, Context.Request, "davCreateAbsoluteUri", ParameterType.Query);
                var davRealm = Parameters.ValueOf<string>(parameters, Context.Request, "davRealm", ParameterType.Query);
                var collectionTypes = Parameters.ValueOf<List<string>>(parameters, Context.Request, "collectionTypes", ParameterType.Query);
                var filterPrefixes = Parameters.ValueOf<List<string>>(parameters, Context.Request, "filterPrefixes", ParameterType.Query);
                var filterTypes = Parameters.ValueOf<string>(parameters, Context.Request, "filterTypes", ParameterType.Query);
                var filterUris = Parameters.ValueOf<string>(parameters, Context.Request, "filterUris", ParameterType.Query);
                var typeCollections = Parameters.ValueOf<string>(parameters, Context.Request, "typeCollections", ParameterType.Query);
                var typeNoncollections = Parameters.ValueOf<string>(parameters, Context.Request, "typeNoncollections", ParameterType.Query);
                var typeContent = Parameters.ValueOf<string>(parameters, Context.Request, "typeContent", ParameterType.Query);
                return service.OrgApacheSlingJcrWebdavImplServletsSimpleWebDavServlet(Context, post, apply, delete, action, location, propertylist, davRoot, davCreateAbsoluteUri, davRealm, collectionTypes, filterPrefixes, filterTypes, filterUris, typeCollections, typeNoncollections, typeContent);
            };

            Post["/system/console/configMgr/org.apache.sling.jmx.provider.impl.JMXResourceProvider"] = parameters =>
            {
                var post = Parameters.ValueOf<bool?>(parameters, Context.Request, "post", ParameterType.Query);
                var apply = Parameters.ValueOf<bool?>(parameters, Context.Request, "apply", ParameterType.Query);
                var delete = Parameters.ValueOf<bool?>(parameters, Context.Request, "delete", ParameterType.Query);
                var action = Parameters.ValueOf<string>(parameters, Context.Request, "action", ParameterType.Query);
                var location = Parameters.ValueOf<string>(parameters, Context.Request, "location", ParameterType.Query);
                var propertylist = Parameters.ValueOf<List<string>>(parameters, Context.Request, "propertylist", ParameterType.Query);
                var providerRoots = Parameters.ValueOf<string>(parameters, Context.Request, "providerRoots", ParameterType.Query);
                return service.OrgApacheSlingJmxProviderImplJMXResourceProvider(Context, post, apply, delete, action, location, propertylist, providerRoots);
            };

            Post["/system/console/configMgr/org.apache.sling.models.impl.ModelAdapterFactory"] = parameters =>
            {
                var post = Parameters.ValueOf<bool?>(parameters, Context.Request, "post", ParameterType.Query);
                var apply = Parameters.ValueOf<bool?>(parameters, Context.Request, "apply", ParameterType.Query);
                var delete = Parameters.ValueOf<bool?>(parameters, Context.Request, "delete", ParameterType.Query);
                var action = Parameters.ValueOf<string>(parameters, Context.Request, "action", ParameterType.Query);
                var location = Parameters.ValueOf<string>(parameters, Context.Request, "location", ParameterType.Query);
                var propertylist = Parameters.ValueOf<List<string>>(parameters, Context.Request, "propertylist", ParameterType.Query);
                var osgiHttpWhiteboardListener = Parameters.ValueOf<string>(parameters, Context.Request, "osgiHttpWhiteboardListener", ParameterType.Query);
                var osgiHttpWhiteboardContextSelect = Parameters.ValueOf<string>(parameters, Context.Request, "osgiHttpWhiteboardContextSelect", ParameterType.Query);
                var maxRecursionDepth = Parameters.ValueOf<int?>(parameters, Context.Request, "maxRecursionDepth", ParameterType.Query);
                var cleanupJobPeriod = Parameters.ValueOf<int?>(parameters, Context.Request, "cleanupJobPeriod", ParameterType.Query);
                return service.OrgApacheSlingModelsImplModelAdapterFactory(Context, post, apply, delete, action, location, propertylist, osgiHttpWhiteboardListener, osgiHttpWhiteboardContextSelect, maxRecursionDepth, cleanupJobPeriod);
            };

            Post["/system/console/configMgr/org.apache.sling.models.jacksonexporter.impl.ResourceModuleProvider"] = parameters =>
            {
                var post = Parameters.ValueOf<bool?>(parameters, Context.Request, "post", ParameterType.Query);
                var apply = Parameters.ValueOf<bool?>(parameters, Context.Request, "apply", ParameterType.Query);
                var delete = Parameters.ValueOf<bool?>(parameters, Context.Request, "delete", ParameterType.Query);
                var action = Parameters.ValueOf<string>(parameters, Context.Request, "action", ParameterType.Query);
                var location = Parameters.ValueOf<string>(parameters, Context.Request, "location", ParameterType.Query);
                var propertylist = Parameters.ValueOf<List<string>>(parameters, Context.Request, "propertylist", ParameterType.Query);
                var maxRecursionLevels = Parameters.ValueOf<int?>(parameters, Context.Request, "maxRecursionLevels", ParameterType.Query);
                return service.OrgApacheSlingModelsJacksonexporterImplResourceModuleProvider(Context, post, apply, delete, action, location, propertylist, maxRecursionLevels);
            };

            Post["/system/console/configMgr/org.apache.sling.resource.inventory.impl.ResourceInventoryPrinterFactory"] = parameters =>
            {
                var post = Parameters.ValueOf<bool?>(parameters, Context.Request, "post", ParameterType.Query);
                var apply = Parameters.ValueOf<bool?>(parameters, Context.Request, "apply", ParameterType.Query);
                var delete = Parameters.ValueOf<bool?>(parameters, Context.Request, "delete", ParameterType.Query);
                var action = Parameters.ValueOf<string>(parameters, Context.Request, "action", ParameterType.Query);
                var location = Parameters.ValueOf<string>(parameters, Context.Request, "location", ParameterType.Query);
                var propertylist = Parameters.ValueOf<List<string>>(parameters, Context.Request, "propertylist", ParameterType.Query);
                var felixInventoryPrinterName = Parameters.ValueOf<string>(parameters, Context.Request, "felixInventoryPrinterName", ParameterType.Query);
                var felixInventoryPrinterTitle = Parameters.ValueOf<string>(parameters, Context.Request, "felixInventoryPrinterTitle", ParameterType.Query);
                var path = Parameters.ValueOf<string>(parameters, Context.Request, "path", ParameterType.Query);
                return service.OrgApacheSlingResourceInventoryImplResourceInventoryPrinterFacto(Context, post, apply, delete, action, location, propertylist, felixInventoryPrinterName, felixInventoryPrinterTitle, path);
            };

            Post["/system/console/configMgr/org.apache.sling.resourcemerger.impl.MergedResourceProviderFactory"] = parameters =>
            {
                var post = Parameters.ValueOf<bool?>(parameters, Context.Request, "post", ParameterType.Query);
                var apply = Parameters.ValueOf<bool?>(parameters, Context.Request, "apply", ParameterType.Query);
                var delete = Parameters.ValueOf<bool?>(parameters, Context.Request, "delete", ParameterType.Query);
                var action = Parameters.ValueOf<string>(parameters, Context.Request, "action", ParameterType.Query);
                var location = Parameters.ValueOf<string>(parameters, Context.Request, "location", ParameterType.Query);
                var propertylist = Parameters.ValueOf<List<string>>(parameters, Context.Request, "propertylist", ParameterType.Query);
                var mergeRoot = Parameters.ValueOf<string>(parameters, Context.Request, "mergeRoot", ParameterType.Query);
                var mergeReadOnly = Parameters.ValueOf<bool?>(parameters, Context.Request, "mergeReadOnly", ParameterType.Query);
                return service.OrgApacheSlingResourcemergerImplMergedResourceProviderFactory(Context, post, apply, delete, action, location, propertylist, mergeRoot, mergeReadOnly);
            };

            Post["/system/console/configMgr/org.apache.sling.resourcemerger.picker.overriding"] = parameters =>
            {
                var post = Parameters.ValueOf<bool?>(parameters, Context.Request, "post", ParameterType.Query);
                var apply = Parameters.ValueOf<bool?>(parameters, Context.Request, "apply", ParameterType.Query);
                var delete = Parameters.ValueOf<bool?>(parameters, Context.Request, "delete", ParameterType.Query);
                var action = Parameters.ValueOf<string>(parameters, Context.Request, "action", ParameterType.Query);
                var location = Parameters.ValueOf<string>(parameters, Context.Request, "location", ParameterType.Query);
                var propertylist = Parameters.ValueOf<List<string>>(parameters, Context.Request, "propertylist", ParameterType.Query);
                var mergeRoot = Parameters.ValueOf<string>(parameters, Context.Request, "mergeRoot", ParameterType.Query);
                var mergeReadOnly = Parameters.ValueOf<bool?>(parameters, Context.Request, "mergeReadOnly", ParameterType.Query);
                return service.OrgApacheSlingResourcemergerPickerOverriding(Context, post, apply, delete, action, location, propertylist, mergeRoot, mergeReadOnly);
            };

            Post["/system/console/configMgr/org.apache.sling.scripting.core.impl.ScriptCacheImpl"] = parameters =>
            {
                var post = Parameters.ValueOf<bool?>(parameters, Context.Request, "post", ParameterType.Query);
                var apply = Parameters.ValueOf<bool?>(parameters, Context.Request, "apply", ParameterType.Query);
                var delete = Parameters.ValueOf<bool?>(parameters, Context.Request, "delete", ParameterType.Query);
                var action = Parameters.ValueOf<string>(parameters, Context.Request, "action", ParameterType.Query);
                var location = Parameters.ValueOf<string>(parameters, Context.Request, "location", ParameterType.Query);
                var propertylist = Parameters.ValueOf<List<string>>(parameters, Context.Request, "propertylist", ParameterType.Query);
                var orgApacheSlingScriptingCacheSize = Parameters.ValueOf<int?>(parameters, Context.Request, "orgApacheSlingScriptingCacheSize", ParameterType.Query);
                var orgApacheSlingScriptingCacheAdditionalExtensions = Parameters.ValueOf<List<string>>(parameters, Context.Request, "orgApacheSlingScriptingCacheAdditionalExtensions", ParameterType.Query);
                return service.OrgApacheSlingScriptingCoreImplScriptCacheImpl(Context, post, apply, delete, action, location, propertylist, orgApacheSlingScriptingCacheSize, orgApacheSlingScriptingCacheAdditionalExtensions);
            };

            Post["/system/console/configMgr/org.apache.sling.scripting.core.impl.ScriptingResourceResolverProviderImpl"] = parameters =>
            {
                var post = Parameters.ValueOf<bool?>(parameters, Context.Request, "post", ParameterType.Query);
                var apply = Parameters.ValueOf<bool?>(parameters, Context.Request, "apply", ParameterType.Query);
                var delete = Parameters.ValueOf<bool?>(parameters, Context.Request, "delete", ParameterType.Query);
                var action = Parameters.ValueOf<string>(parameters, Context.Request, "action", ParameterType.Query);
                var location = Parameters.ValueOf<string>(parameters, Context.Request, "location", ParameterType.Query);
                var propertylist = Parameters.ValueOf<List<string>>(parameters, Context.Request, "propertylist", ParameterType.Query);
                var logStacktraceOnclose = Parameters.ValueOf<bool?>(parameters, Context.Request, "logStacktraceOnclose", ParameterType.Query);
                return service.OrgApacheSlingScriptingCoreImplScriptingResourceResolverProvider(Context, post, apply, delete, action, location, propertylist, logStacktraceOnclose);
            };

            Post["/system/console/configMgr/org.apache.sling.scripting.java.impl.JavaScriptEngineFactory"] = parameters =>
            {
                var post = Parameters.ValueOf<bool?>(parameters, Context.Request, "post", ParameterType.Query);
                var apply = Parameters.ValueOf<bool?>(parameters, Context.Request, "apply", ParameterType.Query);
                var delete = Parameters.ValueOf<bool?>(parameters, Context.Request, "delete", ParameterType.Query);
                var action = Parameters.ValueOf<string>(parameters, Context.Request, "action", ParameterType.Query);
                var location = Parameters.ValueOf<string>(parameters, Context.Request, "location", ParameterType.Query);
                var propertylist = Parameters.ValueOf<List<string>>(parameters, Context.Request, "propertylist", ParameterType.Query);
                var javaClassdebuginfo = Parameters.ValueOf<bool?>(parameters, Context.Request, "javaClassdebuginfo", ParameterType.Query);
                var javaJavaEncoding = Parameters.ValueOf<string>(parameters, Context.Request, "javaJavaEncoding", ParameterType.Query);
                var javaCompilerSourceVM = Parameters.ValueOf<string>(parameters, Context.Request, "javaCompilerSourceVM", ParameterType.Query);
                var javaCompilerTargetVM = Parameters.ValueOf<string>(parameters, Context.Request, "javaCompilerTargetVM", ParameterType.Query);
                return service.OrgApacheSlingScriptingJavaImplJavaScriptEngineFactory(Context, post, apply, delete, action, location, propertylist, javaClassdebuginfo, javaJavaEncoding, javaCompilerSourceVM, javaCompilerTargetVM);
            };

            Post["/system/console/configMgr/org.apache.sling.scripting.javascript.internal.RhinoJavaScriptEngineFactory"] = parameters =>
            {
                var post = Parameters.ValueOf<bool?>(parameters, Context.Request, "post", ParameterType.Query);
                var apply = Parameters.ValueOf<bool?>(parameters, Context.Request, "apply", ParameterType.Query);
                var delete = Parameters.ValueOf<bool?>(parameters, Context.Request, "delete", ParameterType.Query);
                var action = Parameters.ValueOf<string>(parameters, Context.Request, "action", ParameterType.Query);
                var location = Parameters.ValueOf<string>(parameters, Context.Request, "location", ParameterType.Query);
                var propertylist = Parameters.ValueOf<List<string>>(parameters, Context.Request, "propertylist", ParameterType.Query);
                var orgApacheSlingScriptingJavascriptRhinoOptLevel = Parameters.ValueOf<int?>(parameters, Context.Request, "orgApacheSlingScriptingJavascriptRhinoOptLevel", ParameterType.Query);
                return service.OrgApacheSlingScriptingJavascriptInternalRhinoJavaScriptEngineFa(Context, post, apply, delete, action, location, propertylist, orgApacheSlingScriptingJavascriptRhinoOptLevel);
            };

            Post["/system/console/configMgr/org.apache.sling.scripting.jsp.JspScriptEngineFactory"] = parameters =>
            {
                var post = Parameters.ValueOf<bool?>(parameters, Context.Request, "post", ParameterType.Query);
                var apply = Parameters.ValueOf<bool?>(parameters, Context.Request, "apply", ParameterType.Query);
                var delete = Parameters.ValueOf<bool?>(parameters, Context.Request, "delete", ParameterType.Query);
                var action = Parameters.ValueOf<string>(parameters, Context.Request, "action", ParameterType.Query);
                var location = Parameters.ValueOf<string>(parameters, Context.Request, "location", ParameterType.Query);
                var propertylist = Parameters.ValueOf<List<string>>(parameters, Context.Request, "propertylist", ParameterType.Query);
                var jasperCompilerTargetVM = Parameters.ValueOf<string>(parameters, Context.Request, "jasperCompilerTargetVM", ParameterType.Query);
                var jasperCompilerSourceVM = Parameters.ValueOf<string>(parameters, Context.Request, "jasperCompilerSourceVM", ParameterType.Query);
                var jasperClassdebuginfo = Parameters.ValueOf<bool?>(parameters, Context.Request, "jasperClassdebuginfo", ParameterType.Query);
                var jasperEnablePooling = Parameters.ValueOf<bool?>(parameters, Context.Request, "jasperEnablePooling", ParameterType.Query);
                var jasperIeClassId = Parameters.ValueOf<string>(parameters, Context.Request, "jasperIeClassId", ParameterType.Query);
                var jasperGenStringAsCharArray = Parameters.ValueOf<bool?>(parameters, Context.Request, "jasperGenStringAsCharArray", ParameterType.Query);
                var jasperKeepgenerated = Parameters.ValueOf<bool?>(parameters, Context.Request, "jasperKeepgenerated", ParameterType.Query);
                var jasperMappedfile = Parameters.ValueOf<bool?>(parameters, Context.Request, "jasperMappedfile", ParameterType.Query);
                var jasperTrimSpaces = Parameters.ValueOf<bool?>(parameters, Context.Request, "jasperTrimSpaces", ParameterType.Query);
                var jasperDisplaySourceFragments = Parameters.ValueOf<bool?>(parameters, Context.Request, "jasperDisplaySourceFragments", ParameterType.Query);
                var defaultIsSession = Parameters.ValueOf<bool?>(parameters, Context.Request, "defaultIsSession", ParameterType.Query);
                return service.OrgApacheSlingScriptingJspJspScriptEngineFactory(Context, post, apply, delete, action, location, propertylist, jasperCompilerTargetVM, jasperCompilerSourceVM, jasperClassdebuginfo, jasperEnablePooling, jasperIeClassId, jasperGenStringAsCharArray, jasperKeepgenerated, jasperMappedfile, jasperTrimSpaces, jasperDisplaySourceFragments, defaultIsSession);
            };

            Post["/system/console/configMgr/org.apache.sling.scripting.sightly.js.impl.jsapi.SlyBindingsValuesProvider"] = parameters =>
            {
                var post = Parameters.ValueOf<bool?>(parameters, Context.Request, "post", ParameterType.Query);
                var apply = Parameters.ValueOf<bool?>(parameters, Context.Request, "apply", ParameterType.Query);
                var delete = Parameters.ValueOf<bool?>(parameters, Context.Request, "delete", ParameterType.Query);
                var action = Parameters.ValueOf<string>(parameters, Context.Request, "action", ParameterType.Query);
                var location = Parameters.ValueOf<string>(parameters, Context.Request, "location", ParameterType.Query);
                var propertylist = Parameters.ValueOf<List<string>>(parameters, Context.Request, "propertylist", ParameterType.Query);
                var orgApacheSlingScriptingSightlyJsBindings = Parameters.ValueOf<List<string>>(parameters, Context.Request, "orgApacheSlingScriptingSightlyJsBindings", ParameterType.Query);
                return service.OrgApacheSlingScriptingSightlyJsImplJsapiSlyBindingsValuesProv(Context, post, apply, delete, action, location, propertylist, orgApacheSlingScriptingSightlyJsBindings);
            };

            Post["/system/console/configMgr/org.apache.sling.security.impl.ContentDispositionFilter"] = parameters =>
            {
                var post = Parameters.ValueOf<bool?>(parameters, Context.Request, "post", ParameterType.Query);
                var apply = Parameters.ValueOf<bool?>(parameters, Context.Request, "apply", ParameterType.Query);
                var delete = Parameters.ValueOf<bool?>(parameters, Context.Request, "delete", ParameterType.Query);
                var action = Parameters.ValueOf<string>(parameters, Context.Request, "action", ParameterType.Query);
                var location = Parameters.ValueOf<string>(parameters, Context.Request, "location", ParameterType.Query);
                var propertylist = Parameters.ValueOf<List<string>>(parameters, Context.Request, "propertylist", ParameterType.Query);
                var slingContentDispositionPaths = Parameters.ValueOf<List<string>>(parameters, Context.Request, "slingContentDispositionPaths", ParameterType.Query);
                var slingContentDispositionExcludedPaths = Parameters.ValueOf<List<string>>(parameters, Context.Request, "slingContentDispositionExcludedPaths", ParameterType.Query);
                var slingContentDispositionAllPaths = Parameters.ValueOf<bool?>(parameters, Context.Request, "slingContentDispositionAllPaths", ParameterType.Query);
                return service.OrgApacheSlingSecurityImplContentDispositionFilter(Context, post, apply, delete, action, location, propertylist, slingContentDispositionPaths, slingContentDispositionExcludedPaths, slingContentDispositionAllPaths);
            };

            Post["/system/console/configMgr/org.apache.sling.security.impl.ReferrerFilter"] = parameters =>
            {
                var post = Parameters.ValueOf<bool?>(parameters, Context.Request, "post", ParameterType.Query);
                var apply = Parameters.ValueOf<bool?>(parameters, Context.Request, "apply", ParameterType.Query);
                var delete = Parameters.ValueOf<bool?>(parameters, Context.Request, "delete", ParameterType.Query);
                var action = Parameters.ValueOf<string>(parameters, Context.Request, "action", ParameterType.Query);
                var location = Parameters.ValueOf<string>(parameters, Context.Request, "location", ParameterType.Query);
                var propertylist = Parameters.ValueOf<List<string>>(parameters, Context.Request, "propertylist", ParameterType.Query);
                var allowEmpty = Parameters.ValueOf<bool?>(parameters, Context.Request, "allowEmpty", ParameterType.Query);
                var allowHosts = Parameters.ValueOf<List<string>>(parameters, Context.Request, "allowHosts", ParameterType.Query);
                var allowHostsRegexp = Parameters.ValueOf<List<string>>(parameters, Context.Request, "allowHostsRegexp", ParameterType.Query);
                var filterMethods = Parameters.ValueOf<List<string>>(parameters, Context.Request, "filterMethods", ParameterType.Query);
                var excludeAgentsRegexp = Parameters.ValueOf<List<string>>(parameters, Context.Request, "excludeAgentsRegexp", ParameterType.Query);
                return service.OrgApacheSlingSecurityImplReferrerFilter(Context, post, apply, delete, action, location, propertylist, allowEmpty, allowHosts, allowHostsRegexp, filterMethods, excludeAgentsRegexp);
            };

            Post["/system/console/configMgr/org.apache.sling.serviceusermapping.impl.ServiceUserMapperImpl"] = parameters =>
            {
                var post = Parameters.ValueOf<bool?>(parameters, Context.Request, "post", ParameterType.Query);
                var apply = Parameters.ValueOf<bool?>(parameters, Context.Request, "apply", ParameterType.Query);
                var delete = Parameters.ValueOf<bool?>(parameters, Context.Request, "delete", ParameterType.Query);
                var action = Parameters.ValueOf<string>(parameters, Context.Request, "action", ParameterType.Query);
                var location = Parameters.ValueOf<string>(parameters, Context.Request, "location", ParameterType.Query);
                var propertylist = Parameters.ValueOf<List<string>>(parameters, Context.Request, "propertylist", ParameterType.Query);
                var userMapping = Parameters.ValueOf<List<string>>(parameters, Context.Request, "userMapping", ParameterType.Query);
                var userDefault = Parameters.ValueOf<string>(parameters, Context.Request, "userDefault", ParameterType.Query);
                var userEnableDefaultMapping = Parameters.ValueOf<bool?>(parameters, Context.Request, "userEnableDefaultMapping", ParameterType.Query);
                var requireValidation = Parameters.ValueOf<bool?>(parameters, Context.Request, "requireValidation", ParameterType.Query);
                return service.OrgApacheSlingServiceusermappingImplServiceUserMapperImpl(Context, post, apply, delete, action, location, propertylist, userMapping, userDefault, userEnableDefaultMapping, requireValidation);
            };

            Post["/system/console/configMgr/org.apache.sling.serviceusermapping.impl.ServiceUserMapperImpl.amended"] = parameters =>
            {
                var post = Parameters.ValueOf<bool?>(parameters, Context.Request, "post", ParameterType.Query);
                var apply = Parameters.ValueOf<bool?>(parameters, Context.Request, "apply", ParameterType.Query);
                var delete = Parameters.ValueOf<bool?>(parameters, Context.Request, "delete", ParameterType.Query);
                var action = Parameters.ValueOf<string>(parameters, Context.Request, "action", ParameterType.Query);
                var location = Parameters.ValueOf<string>(parameters, Context.Request, "location", ParameterType.Query);
                var propertylist = Parameters.ValueOf<List<string>>(parameters, Context.Request, "propertylist", ParameterType.Query);
                var serviceRanking = Parameters.ValueOf<int?>(parameters, Context.Request, "serviceRanking", ParameterType.Query);
                var userMapping = Parameters.ValueOf<List<string>>(parameters, Context.Request, "userMapping", ParameterType.Query);
                return service.OrgApacheSlingServiceusermappingImplServiceUserMapperImplAmended(Context, post, apply, delete, action, location, propertylist, serviceRanking, userMapping);
            };

            Post["/system/console/configMgr/org.apache.sling.servlets.get.DefaultGetServlet"] = parameters =>
            {
                var post = Parameters.ValueOf<bool?>(parameters, Context.Request, "post", ParameterType.Query);
                var apply = Parameters.ValueOf<bool?>(parameters, Context.Request, "apply", ParameterType.Query);
                var delete = Parameters.ValueOf<bool?>(parameters, Context.Request, "delete", ParameterType.Query);
                var action = Parameters.ValueOf<string>(parameters, Context.Request, "action", ParameterType.Query);
                var location = Parameters.ValueOf<string>(parameters, Context.Request, "location", ParameterType.Query);
                var propertylist = Parameters.ValueOf<List<string>>(parameters, Context.Request, "propertylist", ParameterType.Query);
                var aliases = Parameters.ValueOf<List<string>>(parameters, Context.Request, "aliases", ParameterType.Query);
                var index = Parameters.ValueOf<bool?>(parameters, Context.Request, "index", ParameterType.Query);
                var indexFiles = Parameters.ValueOf<List<string>>(parameters, Context.Request, "indexFiles", ParameterType.Query);
                var enableHtml = Parameters.ValueOf<bool?>(parameters, Context.Request, "enableHtml", ParameterType.Query);
                var enableJson = Parameters.ValueOf<bool?>(parameters, Context.Request, "enableJson", ParameterType.Query);
                var enableTxt = Parameters.ValueOf<bool?>(parameters, Context.Request, "enableTxt", ParameterType.Query);
                var enableXml = Parameters.ValueOf<bool?>(parameters, Context.Request, "enableXml", ParameterType.Query);
                var jsonMaximumresults = Parameters.ValueOf<int?>(parameters, Context.Request, "jsonMaximumresults", ParameterType.Query);
                var ecmaSuport = Parameters.ValueOf<bool?>(parameters, Context.Request, "ecmaSuport", ParameterType.Query);
                return service.OrgApacheSlingServletsGetDefaultGetServlet(Context, post, apply, delete, action, location, propertylist, aliases, index, indexFiles, enableHtml, enableJson, enableTxt, enableXml, jsonMaximumresults, ecmaSuport);
            };

            Post["/system/console/configMgr/org.apache.sling.servlets.get.impl.version.VersionInfoServlet"] = parameters =>
            {
                var post = Parameters.ValueOf<bool?>(parameters, Context.Request, "post", ParameterType.Query);
                var apply = Parameters.ValueOf<bool?>(parameters, Context.Request, "apply", ParameterType.Query);
                var delete = Parameters.ValueOf<bool?>(parameters, Context.Request, "delete", ParameterType.Query);
                var action = Parameters.ValueOf<string>(parameters, Context.Request, "action", ParameterType.Query);
                var location = Parameters.ValueOf<string>(parameters, Context.Request, "location", ParameterType.Query);
                var propertylist = Parameters.ValueOf<List<string>>(parameters, Context.Request, "propertylist", ParameterType.Query);
                var slingServletSelectors = Parameters.ValueOf<List<string>>(parameters, Context.Request, "slingServletSelectors", ParameterType.Query);
                var ecmaSuport = Parameters.ValueOf<bool?>(parameters, Context.Request, "ecmaSuport", ParameterType.Query);
                return service.OrgApacheSlingServletsGetImplVersionVersionInfoServlet(Context, post, apply, delete, action, location, propertylist, slingServletSelectors, ecmaSuport);
            };

            Post["/system/console/configMgr/org.apache.sling.servlets.post.impl.helper.ChunkCleanUpTask"] = parameters =>
            {
                var post = Parameters.ValueOf<bool?>(parameters, Context.Request, "post", ParameterType.Query);
                var apply = Parameters.ValueOf<bool?>(parameters, Context.Request, "apply", ParameterType.Query);
                var delete = Parameters.ValueOf<bool?>(parameters, Context.Request, "delete", ParameterType.Query);
                var action = Parameters.ValueOf<string>(parameters, Context.Request, "action", ParameterType.Query);
                var location = Parameters.ValueOf<string>(parameters, Context.Request, "location", ParameterType.Query);
                var propertylist = Parameters.ValueOf<List<string>>(parameters, Context.Request, "propertylist", ParameterType.Query);
                var schedulerExpression = Parameters.ValueOf<string>(parameters, Context.Request, "schedulerExpression", ParameterType.Query);
                var schedulerConcurrent = Parameters.ValueOf<bool?>(parameters, Context.Request, "schedulerConcurrent", ParameterType.Query);
                var chunkCleanupAge = Parameters.ValueOf<int?>(parameters, Context.Request, "chunkCleanupAge", ParameterType.Query);
                return service.OrgApacheSlingServletsPostImplHelperChunkCleanUpTask(Context, post, apply, delete, action, location, propertylist, schedulerExpression, schedulerConcurrent, chunkCleanupAge);
            };

            Post["/system/console/configMgr/org.apache.sling.servlets.post.impl.SlingPostServlet"] = parameters =>
            {
                var post = Parameters.ValueOf<bool?>(parameters, Context.Request, "post", ParameterType.Query);
                var apply = Parameters.ValueOf<bool?>(parameters, Context.Request, "apply", ParameterType.Query);
                var delete = Parameters.ValueOf<bool?>(parameters, Context.Request, "delete", ParameterType.Query);
                var action = Parameters.ValueOf<string>(parameters, Context.Request, "action", ParameterType.Query);
                var location = Parameters.ValueOf<string>(parameters, Context.Request, "location", ParameterType.Query);
                var propertylist = Parameters.ValueOf<List<string>>(parameters, Context.Request, "propertylist", ParameterType.Query);
                var servletPostDateFormats = Parameters.ValueOf<List<string>>(parameters, Context.Request, "servletPostDateFormats", ParameterType.Query);
                var servletPostNodeNameHints = Parameters.ValueOf<List<string>>(parameters, Context.Request, "servletPostNodeNameHints", ParameterType.Query);
                var servletPostNodeNameMaxLength = Parameters.ValueOf<int?>(parameters, Context.Request, "servletPostNodeNameMaxLength", ParameterType.Query);
                var servletPostCheckinNewVersionableNodes = Parameters.ValueOf<bool?>(parameters, Context.Request, "servletPostCheckinNewVersionableNodes", ParameterType.Query);
                var servletPostAutoCheckout = Parameters.ValueOf<bool?>(parameters, Context.Request, "servletPostAutoCheckout", ParameterType.Query);
                var servletPostAutoCheckin = Parameters.ValueOf<bool?>(parameters, Context.Request, "servletPostAutoCheckin", ParameterType.Query);
                var servletPostIgnorePattern = Parameters.ValueOf<string>(parameters, Context.Request, "servletPostIgnorePattern", ParameterType.Query);
                return service.OrgApacheSlingServletsPostImplSlingPostServlet(Context, post, apply, delete, action, location, propertylist, servletPostDateFormats, servletPostNodeNameHints, servletPostNodeNameMaxLength, servletPostCheckinNewVersionableNodes, servletPostAutoCheckout, servletPostAutoCheckin, servletPostIgnorePattern);
            };

            Post["/system/console/configMgr/org.apache.sling.servlets.resolver.SlingServletResolver"] = parameters =>
            {
                var post = Parameters.ValueOf<bool?>(parameters, Context.Request, "post", ParameterType.Query);
                var apply = Parameters.ValueOf<bool?>(parameters, Context.Request, "apply", ParameterType.Query);
                var delete = Parameters.ValueOf<bool?>(parameters, Context.Request, "delete", ParameterType.Query);
                var action = Parameters.ValueOf<string>(parameters, Context.Request, "action", ParameterType.Query);
                var location = Parameters.ValueOf<string>(parameters, Context.Request, "location", ParameterType.Query);
                var propertylist = Parameters.ValueOf<List<string>>(parameters, Context.Request, "propertylist", ParameterType.Query);
                var servletresolverServletRoot = Parameters.ValueOf<string>(parameters, Context.Request, "servletresolverServletRoot", ParameterType.Query);
                var servletresolverCacheSize = Parameters.ValueOf<int?>(parameters, Context.Request, "servletresolverCacheSize", ParameterType.Query);
                var servletresolverPaths = Parameters.ValueOf<List<string>>(parameters, Context.Request, "servletresolverPaths", ParameterType.Query);
                var servletresolverDefaultExtensions = Parameters.ValueOf<List<string>>(parameters, Context.Request, "servletresolverDefaultExtensions", ParameterType.Query);
                return service.OrgApacheSlingServletsResolverSlingServletResolver(Context, post, apply, delete, action, location, propertylist, servletresolverServletRoot, servletresolverCacheSize, servletresolverPaths, servletresolverDefaultExtensions);
            };

            Post["/system/console/configMgr/org.apache.sling.settings.impl.SlingSettingsServiceImpl"] = parameters =>
            {
                var post = Parameters.ValueOf<bool?>(parameters, Context.Request, "post", ParameterType.Query);
                var apply = Parameters.ValueOf<bool?>(parameters, Context.Request, "apply", ParameterType.Query);
                var delete = Parameters.ValueOf<bool?>(parameters, Context.Request, "delete", ParameterType.Query);
                var action = Parameters.ValueOf<string>(parameters, Context.Request, "action", ParameterType.Query);
                var location = Parameters.ValueOf<string>(parameters, Context.Request, "location", ParameterType.Query);
                var propertylist = Parameters.ValueOf<List<string>>(parameters, Context.Request, "propertylist", ParameterType.Query);
                var slingName = Parameters.ValueOf<string>(parameters, Context.Request, "slingName", ParameterType.Query);
                var slingDescription = Parameters.ValueOf<string>(parameters, Context.Request, "slingDescription", ParameterType.Query);
                return service.OrgApacheSlingSettingsImplSlingSettingsServiceImpl(Context, post, apply, delete, action, location, propertylist, slingName, slingDescription);
            };

            Post["/system/console/configMgr/org.apache.sling.startupfilter.impl.StartupFilterImpl"] = parameters =>
            {
                var post = Parameters.ValueOf<bool?>(parameters, Context.Request, "post", ParameterType.Query);
                var apply = Parameters.ValueOf<bool?>(parameters, Context.Request, "apply", ParameterType.Query);
                var delete = Parameters.ValueOf<bool?>(parameters, Context.Request, "delete", ParameterType.Query);
                var action = Parameters.ValueOf<string>(parameters, Context.Request, "action", ParameterType.Query);
                var location = Parameters.ValueOf<string>(parameters, Context.Request, "location", ParameterType.Query);
                var propertylist = Parameters.ValueOf<List<string>>(parameters, Context.Request, "propertylist", ParameterType.Query);
                var activeByDefault = Parameters.ValueOf<bool?>(parameters, Context.Request, "activeByDefault", ParameterType.Query);
                var defaultMessage = Parameters.ValueOf<string>(parameters, Context.Request, "defaultMessage", ParameterType.Query);
                return service.OrgApacheSlingStartupfilterImplStartupFilterImpl(Context, post, apply, delete, action, location, propertylist, activeByDefault, defaultMessage);
            };

            Post["/system/console/configMgr/org.apache.sling.tenant.internal.TenantProviderImpl"] = parameters =>
            {
                var post = Parameters.ValueOf<bool?>(parameters, Context.Request, "post", ParameterType.Query);
                var apply = Parameters.ValueOf<bool?>(parameters, Context.Request, "apply", ParameterType.Query);
                var delete = Parameters.ValueOf<bool?>(parameters, Context.Request, "delete", ParameterType.Query);
                var action = Parameters.ValueOf<string>(parameters, Context.Request, "action", ParameterType.Query);
                var location = Parameters.ValueOf<string>(parameters, Context.Request, "location", ParameterType.Query);
                var propertylist = Parameters.ValueOf<List<string>>(parameters, Context.Request, "propertylist", ParameterType.Query);
                var tenantRoot = Parameters.ValueOf<string>(parameters, Context.Request, "tenantRoot", ParameterType.Query);
                var tenantPathMatcher = Parameters.ValueOf<List<string>>(parameters, Context.Request, "tenantPathMatcher", ParameterType.Query);
                return service.OrgApacheSlingTenantInternalTenantProviderImpl(Context, post, apply, delete, action, location, propertylist, tenantRoot, tenantPathMatcher);
            };

            Post["/system/console/configMgr/org.apache.sling.tracer.internal.LogTracer"] = parameters =>
            {
                var post = Parameters.ValueOf<bool?>(parameters, Context.Request, "post", ParameterType.Query);
                var apply = Parameters.ValueOf<bool?>(parameters, Context.Request, "apply", ParameterType.Query);
                var delete = Parameters.ValueOf<bool?>(parameters, Context.Request, "delete", ParameterType.Query);
                var action = Parameters.ValueOf<string>(parameters, Context.Request, "action", ParameterType.Query);
                var location = Parameters.ValueOf<string>(parameters, Context.Request, "location", ParameterType.Query);
                var propertylist = Parameters.ValueOf<List<string>>(parameters, Context.Request, "propertylist", ParameterType.Query);
                var tracerSets = Parameters.ValueOf<List<string>>(parameters, Context.Request, "tracerSets", ParameterType.Query);
                var enabled = Parameters.ValueOf<bool?>(parameters, Context.Request, "enabled", ParameterType.Query);
                var servletEnabled = Parameters.ValueOf<bool?>(parameters, Context.Request, "servletEnabled", ParameterType.Query);
                var recordingCacheSizeInMB = Parameters.ValueOf<int?>(parameters, Context.Request, "recordingCacheSizeInMB", ParameterType.Query);
                var recordingCacheDurationInSecs = Parameters.ValueOf<int?>(parameters, Context.Request, "recordingCacheDurationInSecs", ParameterType.Query);
                var recordingCompressionEnabled = Parameters.ValueOf<bool?>(parameters, Context.Request, "recordingCompressionEnabled", ParameterType.Query);
                var gzipResponse = Parameters.ValueOf<bool?>(parameters, Context.Request, "gzipResponse", ParameterType.Query);
                return service.OrgApacheSlingTracerInternalLogTracer(Context, post, apply, delete, action, location, propertylist, tracerSets, enabled, servletEnabled, recordingCacheSizeInMB, recordingCacheDurationInSecs, recordingCompressionEnabled, gzipResponse);
            };

            Post["/system/console/configMgr/org.apache.sling.xss.impl.XSSFilterImpl"] = parameters =>
            {
                var post = Parameters.ValueOf<bool?>(parameters, Context.Request, "post", ParameterType.Query);
                var apply = Parameters.ValueOf<bool?>(parameters, Context.Request, "apply", ParameterType.Query);
                var delete = Parameters.ValueOf<bool?>(parameters, Context.Request, "delete", ParameterType.Query);
                var action = Parameters.ValueOf<string>(parameters, Context.Request, "action", ParameterType.Query);
                var location = Parameters.ValueOf<string>(parameters, Context.Request, "location", ParameterType.Query);
                var propertylist = Parameters.ValueOf<List<string>>(parameters, Context.Request, "propertylist", ParameterType.Query);
                var policyPath = Parameters.ValueOf<string>(parameters, Context.Request, "policyPath", ParameterType.Query);
                return service.OrgApacheSlingXssImplXSSFilterImpl(Context, post, apply, delete, action, location, propertylist, policyPath);
            };
        }
    }

    /// <summary>
    /// Service handling Configmgr requests.
    /// </summary>
    public interface ConfigmgrService
    {
        /// <summary>
        /// 
        /// </summary>
        /// <param name="context">Context of request</param>
        /// <param name="post"> (optional)</param>
        /// <param name="apply"> (optional)</param>
        /// <param name="delete"> (optional)</param>
        /// <param name="action"> (optional)</param>
        /// <param name="location"> (optional)</param>
        /// <param name="propertylist"> (optional)</param>
        /// <param name="showPlaceholder"> (optional)</param>
        /// <param name="maximumCacheEntries"> (optional)</param>
        /// <param name="afScriptingCompatversion"> (optional)</param>
        /// <param name="makeFileNameUnique"> (optional)</param>
        /// <param name="generatingCompliantData"> (optional)</param>
        /// <returns>AdaptiveFormAndInteractiveCommunicationWebChannelConfigurationInfo</returns>
        AdaptiveFormAndInteractiveCommunicationWebChannelConfigurationInfo AdaptiveFormAndInteractiveCommunicationWebChannelConfiguration(NancyContext context, bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, bool? showPlaceholder, int? maximumCacheEntries, string afScriptingCompatversion, bool? makeFileNameUnique, bool? generatingCompliantData);

        /// <summary>
        /// 
        /// </summary>
        /// <param name="context">Context of request</param>
        /// <param name="post"> (optional)</param>
        /// <param name="apply"> (optional)</param>
        /// <param name="delete"> (optional)</param>
        /// <param name="action"> (optional)</param>
        /// <param name="location"> (optional)</param>
        /// <param name="propertylist"> (optional)</param>
        /// <param name="fontList"> (optional)</param>
        /// <returns>AdaptiveFormAndInteractiveCommunicationWebChannelThemeConfigurInfo</returns>
        AdaptiveFormAndInteractiveCommunicationWebChannelThemeConfigurInfo AdaptiveFormAndInteractiveCommunicationWebChannelThemeConfigur(NancyContext context, bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, List<string> fontList);

        /// <summary>
        /// 
        /// </summary>
        /// <param name="context">Context of request</param>
        /// <param name="post"> (optional)</param>
        /// <param name="apply"> (optional)</param>
        /// <param name="delete"> (optional)</param>
        /// <param name="action"> (optional)</param>
        /// <param name="location"> (optional)</param>
        /// <param name="propertylist"> (optional)</param>
        /// <param name="cqAnalyticsComponentQueryCacheSize"> (optional)</param>
        /// <returns>AnalyticsComponentQueryCacheServiceInfo</returns>
        AnalyticsComponentQueryCacheServiceInfo AnalyticsComponentQueryCacheService(NancyContext context, bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, int? cqAnalyticsComponentQueryCacheSize);

        /// <summary>
        /// 
        /// </summary>
        /// <param name="context">Context of request</param>
        /// <param name="post"> (optional)</param>
        /// <param name="apply"> (optional)</param>
        /// <param name="delete"> (optional)</param>
        /// <param name="action"> (optional)</param>
        /// <param name="location"> (optional)</param>
        /// <param name="propertylist"> (optional)</param>
        /// <param name="styleString"> (optional)</param>
        /// <returns>ApacheSlingHealthCheckResultHTMLSerializerInfo</returns>
        ApacheSlingHealthCheckResultHTMLSerializerInfo ApacheSlingHealthCheckResultHTMLSerializer(NancyContext context, bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, string styleString);

        /// <summary>
        /// 
        /// </summary>
        /// <param name="context">Context of request</param>
        /// <param name="post"> (optional)</param>
        /// <param name="apply"> (optional)</param>
        /// <param name="delete"> (optional)</param>
        /// <param name="action"> (optional)</param>
        /// <param name="location"> (optional)</param>
        /// <param name="propertylist"> (optional)</param>
        /// <param name="formsManagerConfigIncludeOOTBTemplates"> (optional)</param>
        /// <param name="formsManagerConfigIncludeDeprecatedTemplates"> (optional)</param>
        /// <returns>ComAdobeAemFormsndocumentsConfigAEMFormsManagerConfigurationInfo</returns>
        ComAdobeAemFormsndocumentsConfigAEMFormsManagerConfigurationInfo ComAdobeAemFormsndocumentsConfigAEMFormsManagerConfiguration(NancyContext context, bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, bool? formsManagerConfigIncludeOOTBTemplates, bool? formsManagerConfigIncludeDeprecatedTemplates);

        /// <summary>
        /// 
        /// </summary>
        /// <param name="context">Context of request</param>
        /// <param name="post"> (optional)</param>
        /// <param name="apply"> (optional)</param>
        /// <param name="delete"> (optional)</param>
        /// <param name="action"> (optional)</param>
        /// <param name="location"> (optional)</param>
        /// <param name="propertylist"> (optional)</param>
        /// <param name="isTransactionRecordingEnabled"> (optional)</param>
        /// <returns>ComAdobeAemTransactionCoreImplTransactionRecorderInfo</returns>
        ComAdobeAemTransactionCoreImplTransactionRecorderInfo ComAdobeAemTransactionCoreImplTransactionRecorder(NancyContext context, bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, bool? isTransactionRecordingEnabled);

        /// <summary>
        /// 
        /// </summary>
        /// <param name="context">Context of request</param>
        /// <param name="post"> (optional)</param>
        /// <param name="apply"> (optional)</param>
        /// <param name="delete"> (optional)</param>
        /// <param name="action"> (optional)</param>
        /// <param name="location"> (optional)</param>
        /// <param name="propertylist"> (optional)</param>
        /// <param name="hcName"> (optional)</param>
        /// <param name="hcTags"> (optional)</param>
        /// <param name="hcMbeanName"> (optional)</param>
        /// <returns>ComAdobeAemUpgradePrechecksHcImplDeprecateIndexesHCInfo</returns>
        ComAdobeAemUpgradePrechecksHcImplDeprecateIndexesHCInfo ComAdobeAemUpgradePrechecksHcImplDeprecateIndexesHC(NancyContext context, bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, string hcName, List<string> hcTags, string hcMbeanName);

        /// <summary>
        /// 
        /// </summary>
        /// <param name="context">Context of request</param>
        /// <param name="post"> (optional)</param>
        /// <param name="apply"> (optional)</param>
        /// <param name="delete"> (optional)</param>
        /// <param name="action"> (optional)</param>
        /// <param name="location"> (optional)</param>
        /// <param name="propertylist"> (optional)</param>
        /// <param name="hcName"> (optional)</param>
        /// <param name="hcTags"> (optional)</param>
        /// <param name="hcMbeanName"> (optional)</param>
        /// <returns>ComAdobeAemUpgradePrechecksHcImplReplicationAgentsDisabledHCInfo</returns>
        ComAdobeAemUpgradePrechecksHcImplReplicationAgentsDisabledHCInfo ComAdobeAemUpgradePrechecksHcImplReplicationAgentsDisabledHC(NancyContext context, bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, string hcName, List<string> hcTags, string hcMbeanName);

        /// <summary>
        /// 
        /// </summary>
        /// <param name="context">Context of request</param>
        /// <param name="post"> (optional)</param>
        /// <param name="apply"> (optional)</param>
        /// <param name="delete"> (optional)</param>
        /// <param name="action"> (optional)</param>
        /// <param name="location"> (optional)</param>
        /// <param name="propertylist"> (optional)</param>
        /// <param name="preUpgradeMaintenanceTasks"> (optional)</param>
        /// <param name="preUpgradeHcTags"> (optional)</param>
        /// <returns>ComAdobeAemUpgradePrechecksMbeanImplPreUpgradeTasksMBeanImplInfo</returns>
        ComAdobeAemUpgradePrechecksMbeanImplPreUpgradeTasksMBeanImplInfo ComAdobeAemUpgradePrechecksMbeanImplPreUpgradeTasksMBeanImpl(NancyContext context, bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, List<string> preUpgradeMaintenanceTasks, List<string> preUpgradeHcTags);

        /// <summary>
        /// 
        /// </summary>
        /// <param name="context">Context of request</param>
        /// <param name="post"> (optional)</param>
        /// <param name="apply"> (optional)</param>
        /// <param name="delete"> (optional)</param>
        /// <param name="action"> (optional)</param>
        /// <param name="location"> (optional)</param>
        /// <param name="propertylist"> (optional)</param>
        /// <param name="rootPath"> (optional)</param>
        /// <param name="fixInconsistencies"> (optional)</param>
        /// <returns>ComAdobeAemUpgradePrechecksTasksImplConsistencyCheckTaskImplInfo</returns>
        ComAdobeAemUpgradePrechecksTasksImplConsistencyCheckTaskImplInfo ComAdobeAemUpgradePrechecksTasksImplConsistencyCheckTaskImpl(NancyContext context, bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, string rootPath, bool? fixInconsistencies);

        /// <summary>
        /// 
        /// </summary>
        /// <param name="context">Context of request</param>
        /// <param name="post"> (optional)</param>
        /// <param name="apply"> (optional)</param>
        /// <param name="delete"> (optional)</param>
        /// <param name="action"> (optional)</param>
        /// <param name="location"> (optional)</param>
        /// <param name="propertylist"> (optional)</param>
        /// <param name="cqAccountmanagerTokenValidityPeriod"> (optional)</param>
        /// <param name="cqAccountmanagerConfigRequestnewaccountMail"> (optional)</param>
        /// <param name="cqAccountmanagerConfigRequestnewpwdMail"> (optional)</param>
        /// <returns>ComAdobeCqAccountApiAccountManagementServiceInfo</returns>
        ComAdobeCqAccountApiAccountManagementServiceInfo ComAdobeCqAccountApiAccountManagementService(NancyContext context, bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, int? cqAccountmanagerTokenValidityPeriod, string cqAccountmanagerConfigRequestnewaccountMail, string cqAccountmanagerConfigRequestnewpwdMail);

        /// <summary>
        /// 
        /// </summary>
        /// <param name="context">Context of request</param>
        /// <param name="post"> (optional)</param>
        /// <param name="apply"> (optional)</param>
        /// <param name="delete"> (optional)</param>
        /// <param name="action"> (optional)</param>
        /// <param name="location"> (optional)</param>
        /// <param name="propertylist"> (optional)</param>
        /// <param name="cqAccountmanagerConfigInformnewaccountMail"> (optional)</param>
        /// <param name="cqAccountmanagerConfigInformnewpwdMail"> (optional)</param>
        /// <returns>ComAdobeCqAccountImplAccountManagementServletInfo</returns>
        ComAdobeCqAccountImplAccountManagementServletInfo ComAdobeCqAccountImplAccountManagementServlet(NancyContext context, bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, string cqAccountmanagerConfigInformnewaccountMail, string cqAccountmanagerConfigInformnewpwdMail);

        /// <summary>
        /// 
        /// </summary>
        /// <param name="context">Context of request</param>
        /// <param name="post"> (optional)</param>
        /// <param name="apply"> (optional)</param>
        /// <param name="delete"> (optional)</param>
        /// <param name="action"> (optional)</param>
        /// <param name="location"> (optional)</param>
        /// <param name="propertylist"> (optional)</param>
        /// <param name="cqAddressLocationDefaultMaxResults"> (optional)</param>
        /// <returns>ComAdobeCqAddressImplLocationLocationListServletInfo</returns>
        ComAdobeCqAddressImplLocationLocationListServletInfo ComAdobeCqAddressImplLocationLocationListServlet(NancyContext context, bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, int? cqAddressLocationDefaultMaxResults);

        /// <summary>
        /// 
        /// </summary>
        /// <param name="context">Context of request</param>
        /// <param name="post"> (optional)</param>
        /// <param name="apply"> (optional)</param>
        /// <param name="delete"> (optional)</param>
        /// <param name="action"> (optional)</param>
        /// <param name="location"> (optional)</param>
        /// <param name="propertylist"> (optional)</param>
        /// <param name="auditlogRuleName"> (optional)</param>
        /// <param name="auditlogRuleContentpath"> (optional)</param>
        /// <param name="auditlogRuleMinimumage"> (optional)</param>
        /// <param name="auditlogRuleTypes"> (optional)</param>
        /// <returns>ComAdobeCqAuditPurgeDamInfo</returns>
        ComAdobeCqAuditPurgeDamInfo ComAdobeCqAuditPurgeDam(NancyContext context, bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, string auditlogRuleName, string auditlogRuleContentpath, int? auditlogRuleMinimumage, string auditlogRuleTypes);

        /// <summary>
        /// 
        /// </summary>
        /// <param name="context">Context of request</param>
        /// <param name="post"> (optional)</param>
        /// <param name="apply"> (optional)</param>
        /// <param name="delete"> (optional)</param>
        /// <param name="action"> (optional)</param>
        /// <param name="location"> (optional)</param>
        /// <param name="propertylist"> (optional)</param>
        /// <param name="auditlogRuleName"> (optional)</param>
        /// <param name="auditlogRuleContentpath"> (optional)</param>
        /// <param name="auditlogRuleMinimumage"> (optional)</param>
        /// <param name="auditlogRuleTypes"> (optional)</param>
        /// <returns>ComAdobeCqAuditPurgePagesInfo</returns>
        ComAdobeCqAuditPurgePagesInfo ComAdobeCqAuditPurgePages(NancyContext context, bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, string auditlogRuleName, string auditlogRuleContentpath, int? auditlogRuleMinimumage, string auditlogRuleTypes);

        /// <summary>
        /// 
        /// </summary>
        /// <param name="context">Context of request</param>
        /// <param name="post"> (optional)</param>
        /// <param name="apply"> (optional)</param>
        /// <param name="delete"> (optional)</param>
        /// <param name="action"> (optional)</param>
        /// <param name="location"> (optional)</param>
        /// <param name="propertylist"> (optional)</param>
        /// <param name="auditlogRuleName"> (optional)</param>
        /// <param name="auditlogRuleContentpath"> (optional)</param>
        /// <param name="auditlogRuleMinimumage"> (optional)</param>
        /// <param name="auditlogRuleTypes"> (optional)</param>
        /// <returns>ComAdobeCqAuditPurgeReplicationInfo</returns>
        ComAdobeCqAuditPurgeReplicationInfo ComAdobeCqAuditPurgeReplication(NancyContext context, bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, string auditlogRuleName, string auditlogRuleContentpath, int? auditlogRuleMinimumage, string auditlogRuleTypes);

        /// <summary>
        /// 
        /// </summary>
        /// <param name="context">Context of request</param>
        /// <param name="post"> (optional)</param>
        /// <param name="apply"> (optional)</param>
        /// <param name="delete"> (optional)</param>
        /// <param name="action"> (optional)</param>
        /// <param name="location"> (optional)</param>
        /// <param name="propertylist"> (optional)</param>
        /// <param name="serviceRanking"> (optional)</param>
        /// <param name="keypairId"> (optional)</param>
        /// <param name="keypairAlias"> (optional)</param>
        /// <param name="cdnrewriterAttributes"> (optional)</param>
        /// <param name="cdnRewriterDistributionDomain"> (optional)</param>
        /// <returns>ComAdobeCqCdnRewriterImplAWSCloudFrontRewriterInfo</returns>
        ComAdobeCqCdnRewriterImplAWSCloudFrontRewriterInfo ComAdobeCqCdnRewriterImplAWSCloudFrontRewriter(NancyContext context, bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, int? serviceRanking, string keypairId, string keypairAlias, List<string> cdnrewriterAttributes, string cdnRewriterDistributionDomain);

        /// <summary>
        /// 
        /// </summary>
        /// <param name="context">Context of request</param>
        /// <param name="post"> (optional)</param>
        /// <param name="apply"> (optional)</param>
        /// <param name="delete"> (optional)</param>
        /// <param name="action"> (optional)</param>
        /// <param name="location"> (optional)</param>
        /// <param name="propertylist"> (optional)</param>
        /// <param name="cdnConfigDistributionDomain"> (optional)</param>
        /// <param name="cdnConfigEnableRewriting"> (optional)</param>
        /// <param name="cdnConfigPathPrefixes"> (optional)</param>
        /// <param name="cdnConfigCdnttl"> (optional)</param>
        /// <param name="cdnConfigApplicationProtocol"> (optional)</param>
        /// <returns>ComAdobeCqCdnRewriterImplCDNConfigServiceImplInfo</returns>
        ComAdobeCqCdnRewriterImplCDNConfigServiceImplInfo ComAdobeCqCdnRewriterImplCDNConfigServiceImpl(NancyContext context, bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, string cdnConfigDistributionDomain, bool? cdnConfigEnableRewriting, List<string> cdnConfigPathPrefixes, int? cdnConfigCdnttl, string cdnConfigApplicationProtocol);

        /// <summary>
        /// 
        /// </summary>
        /// <param name="context">Context of request</param>
        /// <param name="post"> (optional)</param>
        /// <param name="apply"> (optional)</param>
        /// <param name="delete"> (optional)</param>
        /// <param name="action"> (optional)</param>
        /// <param name="location"> (optional)</param>
        /// <param name="propertylist"> (optional)</param>
        /// <param name="serviceRanking"> (optional)</param>
        /// <param name="cdnrewriterAttributes"> (optional)</param>
        /// <param name="cdnRewriterDistributionDomain"> (optional)</param>
        /// <returns>ComAdobeCqCdnRewriterImplCDNRewriterInfo</returns>
        ComAdobeCqCdnRewriterImplCDNRewriterInfo ComAdobeCqCdnRewriterImplCDNRewriter(NancyContext context, bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, int? serviceRanking, List<string> cdnrewriterAttributes, string cdnRewriterDistributionDomain);

        /// <summary>
        /// 
        /// </summary>
        /// <param name="context">Context of request</param>
        /// <param name="post"> (optional)</param>
        /// <param name="apply"> (optional)</param>
        /// <param name="delete"> (optional)</param>
        /// <param name="action"> (optional)</param>
        /// <param name="location"> (optional)</param>
        /// <param name="propertylist"> (optional)</param>
        /// <param name="flushAgents"> (optional)</param>
        /// <returns>ComAdobeCqCloudconfigCoreImplConfigurationReplicationEventHandleInfo</returns>
        ComAdobeCqCloudconfigCoreImplConfigurationReplicationEventHandleInfo ComAdobeCqCloudconfigCoreImplConfigurationReplicationEventHandle(NancyContext context, bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, List<string> flushAgents);

        /// <summary>
        /// 
        /// </summary>
        /// <param name="context">Context of request</param>
        /// <param name="post"> (optional)</param>
        /// <param name="apply"> (optional)</param>
        /// <param name="delete"> (optional)</param>
        /// <param name="action"> (optional)</param>
        /// <param name="location"> (optional)</param>
        /// <param name="propertylist"> (optional)</param>
        /// <param name="cqCommerceAssetHandlerActive"> (optional)</param>
        /// <param name="cqCommerceAssetHandlerName"> (optional)</param>
        /// <returns>ComAdobeCqCommerceImplAssetDynamicImageHandlerInfo</returns>
        ComAdobeCqCommerceImplAssetDynamicImageHandlerInfo ComAdobeCqCommerceImplAssetDynamicImageHandler(NancyContext context, bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, bool? cqCommerceAssetHandlerActive, string cqCommerceAssetHandlerName);

        /// <summary>
        /// 
        /// </summary>
        /// <param name="context">Context of request</param>
        /// <param name="post"> (optional)</param>
        /// <param name="apply"> (optional)</param>
        /// <param name="delete"> (optional)</param>
        /// <param name="action"> (optional)</param>
        /// <param name="location"> (optional)</param>
        /// <param name="propertylist"> (optional)</param>
        /// <param name="cqCommerceAssetHandlerFallback"> (optional)</param>
        /// <returns>ComAdobeCqCommerceImplAssetProductAssetHandlerProviderImplInfo</returns>
        ComAdobeCqCommerceImplAssetProductAssetHandlerProviderImplInfo ComAdobeCqCommerceImplAssetProductAssetHandlerProviderImpl(NancyContext context, bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, string cqCommerceAssetHandlerFallback);

        /// <summary>
        /// 
        /// </summary>
        /// <param name="context">Context of request</param>
        /// <param name="post"> (optional)</param>
        /// <param name="apply"> (optional)</param>
        /// <param name="delete"> (optional)</param>
        /// <param name="action"> (optional)</param>
        /// <param name="location"> (optional)</param>
        /// <param name="propertylist"> (optional)</param>
        /// <param name="cqCommerceAssetHandlerActive"> (optional)</param>
        /// <param name="cqCommerceAssetHandlerName"> (optional)</param>
        /// <returns>ComAdobeCqCommerceImplAssetStaticImageHandlerInfo</returns>
        ComAdobeCqCommerceImplAssetStaticImageHandlerInfo ComAdobeCqCommerceImplAssetStaticImageHandler(NancyContext context, bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, bool? cqCommerceAssetHandlerActive, string cqCommerceAssetHandlerName);

        /// <summary>
        /// 
        /// </summary>
        /// <param name="context">Context of request</param>
        /// <param name="post"> (optional)</param>
        /// <param name="apply"> (optional)</param>
        /// <param name="delete"> (optional)</param>
        /// <param name="action"> (optional)</param>
        /// <param name="location"> (optional)</param>
        /// <param name="propertylist"> (optional)</param>
        /// <param name="cqCommerceAssetHandlerActive"> (optional)</param>
        /// <param name="cqCommerceAssetHandlerName"> (optional)</param>
        /// <returns>ComAdobeCqCommerceImplAssetVideoHandlerInfo</returns>
        ComAdobeCqCommerceImplAssetVideoHandlerInfo ComAdobeCqCommerceImplAssetVideoHandler(NancyContext context, bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, bool? cqCommerceAssetHandlerActive, string cqCommerceAssetHandlerName);

        /// <summary>
        /// 
        /// </summary>
        /// <param name="context">Context of request</param>
        /// <param name="post"> (optional)</param>
        /// <param name="apply"> (optional)</param>
        /// <param name="delete"> (optional)</param>
        /// <param name="action"> (optional)</param>
        /// <param name="location"> (optional)</param>
        /// <param name="propertylist"> (optional)</param>
        /// <param name="cqCommercePromotionRoot"> (optional)</param>
        /// <returns>ComAdobeCqCommerceImplPromotionPromotionManagerImplInfo</returns>
        ComAdobeCqCommerceImplPromotionPromotionManagerImplInfo ComAdobeCqCommerceImplPromotionPromotionManagerImpl(NancyContext context, bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, string cqCommercePromotionRoot);

        /// <summary>
        /// 
        /// </summary>
        /// <param name="context">Context of request</param>
        /// <param name="post"> (optional)</param>
        /// <param name="apply"> (optional)</param>
        /// <param name="delete"> (optional)</param>
        /// <param name="action"> (optional)</param>
        /// <param name="location"> (optional)</param>
        /// <param name="propertylist"> (optional)</param>
        /// <param name="cqCommerceCataloggeneratorBucketsize"> (optional)</param>
        /// <param name="cqCommerceCataloggeneratorBucketname"> (optional)</param>
        /// <param name="cqCommerceCataloggeneratorExcludedtemplateproperties"> (optional)</param>
        /// <returns>ComAdobeCqCommercePimImplCataloggeneratorCatalogGeneratorImplInfo</returns>
        ComAdobeCqCommercePimImplCataloggeneratorCatalogGeneratorImplInfo ComAdobeCqCommercePimImplCataloggeneratorCatalogGeneratorImpl(NancyContext context, bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, int? cqCommerceCataloggeneratorBucketsize, string cqCommerceCataloggeneratorBucketname, List<string> cqCommerceCataloggeneratorExcludedtemplateproperties);

        /// <summary>
        /// 
        /// </summary>
        /// <param name="context">Context of request</param>
        /// <param name="post"> (optional)</param>
        /// <param name="apply"> (optional)</param>
        /// <param name="delete"> (optional)</param>
        /// <param name="action"> (optional)</param>
        /// <param name="location"> (optional)</param>
        /// <param name="propertylist"> (optional)</param>
        /// <param name="cqCommercePageeventlistenerEnabled"> (optional)</param>
        /// <returns>ComAdobeCqCommercePimImplPageEventListenerInfo</returns>
        ComAdobeCqCommercePimImplPageEventListenerInfo ComAdobeCqCommercePimImplPageEventListener(NancyContext context, bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, bool? cqCommercePageeventlistenerEnabled);

        /// <summary>
        /// 
        /// </summary>
        /// <param name="context">Context of request</param>
        /// <param name="post"> (optional)</param>
        /// <param name="apply"> (optional)</param>
        /// <param name="delete"> (optional)</param>
        /// <param name="action"> (optional)</param>
        /// <param name="location"> (optional)</param>
        /// <param name="propertylist"> (optional)</param>
        /// <param name="feedGeneratorAlgorithm"> (optional)</param>
        /// <returns>ComAdobeCqCommercePimImplProductfeedProductFeedServiceImplInfo</returns>
        ComAdobeCqCommercePimImplProductfeedProductFeedServiceImplInfo ComAdobeCqCommercePimImplProductfeedProductFeedServiceImpl(NancyContext context, bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, string feedGeneratorAlgorithm);

        /// <summary>
        /// 
        /// </summary>
        /// <param name="context">Context of request</param>
        /// <param name="post"> (optional)</param>
        /// <param name="apply"> (optional)</param>
        /// <param name="delete"> (optional)</param>
        /// <param name="action"> (optional)</param>
        /// <param name="location"> (optional)</param>
        /// <param name="propertylist"> (optional)</param>
        /// <param name="reportingservicesUrl"> (optional)</param>
        /// <returns>ComAdobeCqContentinsightImplReportingServicesSettingsProviderInfo</returns>
        ComAdobeCqContentinsightImplReportingServicesSettingsProviderInfo ComAdobeCqContentinsightImplReportingServicesSettingsProvider(NancyContext context, bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, string reportingservicesUrl);

        /// <summary>
        /// 
        /// </summary>
        /// <param name="context">Context of request</param>
        /// <param name="post"> (optional)</param>
        /// <param name="apply"> (optional)</param>
        /// <param name="delete"> (optional)</param>
        /// <param name="action"> (optional)</param>
        /// <param name="location"> (optional)</param>
        /// <param name="propertylist"> (optional)</param>
        /// <param name="brightedgeUrl"> (optional)</param>
        /// <returns>ComAdobeCqContentinsightImplServletsBrightEdgeProxyServletInfo</returns>
        ComAdobeCqContentinsightImplServletsBrightEdgeProxyServletInfo ComAdobeCqContentinsightImplServletsBrightEdgeProxyServlet(NancyContext context, bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, string brightedgeUrl);

        /// <summary>
        /// 
        /// </summary>
        /// <param name="context">Context of request</param>
        /// <param name="post"> (optional)</param>
        /// <param name="apply"> (optional)</param>
        /// <param name="delete"> (optional)</param>
        /// <param name="action"> (optional)</param>
        /// <param name="location"> (optional)</param>
        /// <param name="propertylist"> (optional)</param>
        /// <param name="reportingservicesProxyWhitelist"> (optional)</param>
        /// <returns>ComAdobeCqContentinsightImplServletsReportingServicesProxyServleInfo</returns>
        ComAdobeCqContentinsightImplServletsReportingServicesProxyServleInfo ComAdobeCqContentinsightImplServletsReportingServicesProxyServle(NancyContext context, bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, List<string> reportingservicesProxyWhitelist);

        /// <summary>
        /// 
        /// </summary>
        /// <param name="context">Context of request</param>
        /// <param name="post"> (optional)</param>
        /// <param name="apply"> (optional)</param>
        /// <param name="delete"> (optional)</param>
        /// <param name="action"> (optional)</param>
        /// <param name="location"> (optional)</param>
        /// <param name="propertylist"> (optional)</param>
        /// <param name="damCfmComponentResourceType"> (optional)</param>
        /// <param name="damCfmComponentFileReferenceProp"> (optional)</param>
        /// <param name="damCfmComponentElementsProp"> (optional)</param>
        /// <param name="damCfmComponentVariationProp"> (optional)</param>
        /// <returns>ComAdobeCqDamCfmImplComponentComponentConfigImplInfo</returns>
        ComAdobeCqDamCfmImplComponentComponentConfigImplInfo ComAdobeCqDamCfmImplComponentComponentConfigImpl(NancyContext context, bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, string damCfmComponentResourceType, string damCfmComponentFileReferenceProp, string damCfmComponentElementsProp, string damCfmComponentVariationProp);

        /// <summary>
        /// 
        /// </summary>
        /// <param name="context">Context of request</param>
        /// <param name="post"> (optional)</param>
        /// <param name="apply"> (optional)</param>
        /// <param name="delete"> (optional)</param>
        /// <param name="action"> (optional)</param>
        /// <param name="location"> (optional)</param>
        /// <param name="propertylist"> (optional)</param>
        /// <param name="damCfmResourceTypes"> (optional)</param>
        /// <param name="damCfmReferenceProperties"> (optional)</param>
        /// <returns>ComAdobeCqDamCfmImplConfFeatureConfigImplInfo</returns>
        ComAdobeCqDamCfmImplConfFeatureConfigImplInfo ComAdobeCqDamCfmImplConfFeatureConfigImpl(NancyContext context, bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, List<string> damCfmResourceTypes, List<string> damCfmReferenceProperties);

        /// <summary>
        /// 
        /// </summary>
        /// <param name="context">Context of request</param>
        /// <param name="post"> (optional)</param>
        /// <param name="apply"> (optional)</param>
        /// <param name="delete"> (optional)</param>
        /// <param name="action"> (optional)</param>
        /// <param name="location"> (optional)</param>
        /// <param name="propertylist"> (optional)</param>
        /// <param name="pipelineType"> (optional)</param>
        /// <returns>ComAdobeCqDamCfmImplContentRewriterAssetProcessorInfo</returns>
        ComAdobeCqDamCfmImplContentRewriterAssetProcessorInfo ComAdobeCqDamCfmImplContentRewriterAssetProcessor(NancyContext context, bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, string pipelineType);

        /// <summary>
        /// 
        /// </summary>
        /// <param name="context">Context of request</param>
        /// <param name="post"> (optional)</param>
        /// <param name="apply"> (optional)</param>
        /// <param name="delete"> (optional)</param>
        /// <param name="action"> (optional)</param>
        /// <param name="location"> (optional)</param>
        /// <param name="propertylist"> (optional)</param>
        /// <param name="pipelineType"> (optional)</param>
        /// <returns>ComAdobeCqDamCfmImplContentRewriterParRangeFilterInfo</returns>
        ComAdobeCqDamCfmImplContentRewriterParRangeFilterInfo ComAdobeCqDamCfmImplContentRewriterParRangeFilter(NancyContext context, bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, string pipelineType);

        /// <summary>
        /// 
        /// </summary>
        /// <param name="context">Context of request</param>
        /// <param name="post"> (optional)</param>
        /// <param name="apply"> (optional)</param>
        /// <param name="delete"> (optional)</param>
        /// <param name="action"> (optional)</param>
        /// <param name="location"> (optional)</param>
        /// <param name="propertylist"> (optional)</param>
        /// <param name="pipelineType"> (optional)</param>
        /// <returns>ComAdobeCqDamCfmImplContentRewriterPayloadFilterInfo</returns>
        ComAdobeCqDamCfmImplContentRewriterPayloadFilterInfo ComAdobeCqDamCfmImplContentRewriterPayloadFilter(NancyContext context, bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, string pipelineType);

        /// <summary>
        /// 
        /// </summary>
        /// <param name="context">Context of request</param>
        /// <param name="post"> (optional)</param>
        /// <param name="apply"> (optional)</param>
        /// <param name="delete"> (optional)</param>
        /// <param name="action"> (optional)</param>
        /// <param name="location"> (optional)</param>
        /// <param name="propertylist"> (optional)</param>
        /// <param name="maxMemory"> (optional)</param>
        /// <returns>ComAdobeCqDamDmProcessImagePTiffManagerImplInfo</returns>
        ComAdobeCqDamDmProcessImagePTiffManagerImplInfo ComAdobeCqDamDmProcessImagePTiffManagerImpl(NancyContext context, bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, int? maxMemory);

        /// <summary>
        /// 
        /// </summary>
        /// <param name="context">Context of request</param>
        /// <param name="post"> (optional)</param>
        /// <param name="apply"> (optional)</param>
        /// <param name="delete"> (optional)</param>
        /// <param name="action"> (optional)</param>
        /// <param name="location"> (optional)</param>
        /// <param name="propertylist"> (optional)</param>
        /// <param name="dmreplicateonmodifyEnabled"> (optional)</param>
        /// <param name="dmreplicateonmodifyForcesyncdeletes"> (optional)</param>
        /// <returns>ComAdobeCqDamIpsImplReplicationTriggerReplicateOnModifyWorkerInfo</returns>
        ComAdobeCqDamIpsImplReplicationTriggerReplicateOnModifyWorkerInfo ComAdobeCqDamIpsImplReplicationTriggerReplicateOnModifyWorker(NancyContext context, bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, bool? dmreplicateonmodifyEnabled, bool? dmreplicateonmodifyForcesyncdeletes);

        /// <summary>
        /// 
        /// </summary>
        /// <param name="context">Context of request</param>
        /// <param name="post"> (optional)</param>
        /// <param name="apply"> (optional)</param>
        /// <param name="delete"> (optional)</param>
        /// <param name="action"> (optional)</param>
        /// <param name="location"> (optional)</param>
        /// <param name="propertylist"> (optional)</param>
        /// <param name="comAdobeDamMacSyncClientSoTimeout"> (optional)</param>
        /// <returns>ComAdobeCqDamMacSyncHelperImplMACSyncClientImplInfo</returns>
        ComAdobeCqDamMacSyncHelperImplMACSyncClientImplInfo ComAdobeCqDamMacSyncHelperImplMACSyncClientImpl(NancyContext context, bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, int? comAdobeDamMacSyncClientSoTimeout);

        /// <summary>
        /// 
        /// </summary>
        /// <param name="context">Context of request</param>
        /// <param name="post"> (optional)</param>
        /// <param name="apply"> (optional)</param>
        /// <param name="delete"> (optional)</param>
        /// <param name="action"> (optional)</param>
        /// <param name="location"> (optional)</param>
        /// <param name="propertylist"> (optional)</param>
        /// <param name="comAdobeCqDamMacSyncDamsyncserviceRegisteredPaths"> (optional)</param>
        /// <param name="comAdobeCqDamMacSyncDamsyncserviceSyncRenditions"> (optional)</param>
        /// <param name="comAdobeCqDamMacSyncDamsyncserviceReplicateThreadWaitMs"> (optional)</param>
        /// <param name="comAdobeCqDamMacSyncDamsyncservicePlatform"> (optional)</param>
        /// <returns>ComAdobeCqDamMacSyncImplDAMSyncServiceImplInfo</returns>
        ComAdobeCqDamMacSyncImplDAMSyncServiceImplInfo ComAdobeCqDamMacSyncImplDAMSyncServiceImpl(NancyContext context, bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, List<string> comAdobeCqDamMacSyncDamsyncserviceRegisteredPaths, bool? comAdobeCqDamMacSyncDamsyncserviceSyncRenditions, int? comAdobeCqDamMacSyncDamsyncserviceReplicateThreadWaitMs, string comAdobeCqDamMacSyncDamsyncservicePlatform);

        /// <summary>
        /// 
        /// </summary>
        /// <param name="context">Context of request</param>
        /// <param name="post"> (optional)</param>
        /// <param name="apply"> (optional)</param>
        /// <param name="delete"> (optional)</param>
        /// <param name="action"> (optional)</param>
        /// <param name="location"> (optional)</param>
        /// <param name="propertylist"> (optional)</param>
        /// <param name="nuiEnabled"> (optional)</param>
        /// <param name="nuiServiceUrl"> (optional)</param>
        /// <param name="nuiApiKey"> (optional)</param>
        /// <returns>ComAdobeCqDamProcessorNuiImplNuiAssetProcessorInfo</returns>
        ComAdobeCqDamProcessorNuiImplNuiAssetProcessorInfo ComAdobeCqDamProcessorNuiImplNuiAssetProcessor(NancyContext context, bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, bool? nuiEnabled, string nuiServiceUrl, string nuiApiKey);

        /// <summary>
        /// 
        /// </summary>
        /// <param name="context">Context of request</param>
        /// <param name="post"> (optional)</param>
        /// <param name="apply"> (optional)</param>
        /// <param name="delete"> (optional)</param>
        /// <param name="action"> (optional)</param>
        /// <param name="location"> (optional)</param>
        /// <param name="propertylist"> (optional)</param>
        /// <param name="tcpPort"> (optional)</param>
        /// <param name="allowRemoteAccess"> (optional)</param>
        /// <param name="maxRenderRgnPixels"> (optional)</param>
        /// <param name="maxMessageSize"> (optional)</param>
        /// <param name="randomAccessUrlTimeout"> (optional)</param>
        /// <param name="workerThreads"> (optional)</param>
        /// <returns>ComAdobeCqDamS7imagingImplIsImageServerComponentInfo</returns>
        ComAdobeCqDamS7imagingImplIsImageServerComponentInfo ComAdobeCqDamS7imagingImplIsImageServerComponent(NancyContext context, bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, string tcpPort, bool? allowRemoteAccess, string maxRenderRgnPixels, string maxMessageSize, int? randomAccessUrlTimeout, int? workerThreads);

        /// <summary>
        /// 
        /// </summary>
        /// <param name="context">Context of request</param>
        /// <param name="post"> (optional)</param>
        /// <param name="apply"> (optional)</param>
        /// <param name="delete"> (optional)</param>
        /// <param name="action"> (optional)</param>
        /// <param name="location"> (optional)</param>
        /// <param name="propertylist"> (optional)</param>
        /// <param name="cacheEnable"> (optional)</param>
        /// <param name="cacheRootPaths"> (optional)</param>
        /// <param name="cacheMaxSize"> (optional)</param>
        /// <param name="cacheMaxEntries"> (optional)</param>
        /// <returns>ComAdobeCqDamS7imagingImplPsPlatformServerServletInfo</returns>
        ComAdobeCqDamS7imagingImplPsPlatformServerServletInfo ComAdobeCqDamS7imagingImplPsPlatformServerServlet(NancyContext context, bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, bool? cacheEnable, List<string> cacheRootPaths, int? cacheMaxSize, int? cacheMaxEntries);

        /// <summary>
        /// 
        /// </summary>
        /// <param name="context">Context of request</param>
        /// <param name="post"> (optional)</param>
        /// <param name="apply"> (optional)</param>
        /// <param name="delete"> (optional)</param>
        /// <param name="action"> (optional)</param>
        /// <param name="location"> (optional)</param>
        /// <param name="propertylist"> (optional)</param>
        /// <param name="serviceRanking"> (optional)</param>
        /// <param name="pathPrefix"> (optional)</param>
        /// <param name="createVersion"> (optional)</param>
        /// <returns>ComAdobeCqDamWebdavImplIoAssetIOHandlerInfo</returns>
        ComAdobeCqDamWebdavImplIoAssetIOHandlerInfo ComAdobeCqDamWebdavImplIoAssetIOHandler(NancyContext context, bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, int? serviceRanking, string pathPrefix, bool? createVersion);

        /// <summary>
        /// 
        /// </summary>
        /// <param name="context">Context of request</param>
        /// <param name="post"> (optional)</param>
        /// <param name="apply"> (optional)</param>
        /// <param name="delete"> (optional)</param>
        /// <param name="action"> (optional)</param>
        /// <param name="location"> (optional)</param>
        /// <param name="propertylist"> (optional)</param>
        /// <param name="cqDamWebdavVersionLinkingEnable"> (optional)</param>
        /// <param name="cqDamWebdavVersionLinkingSchedulerPeriod"> (optional)</param>
        /// <param name="cqDamWebdavVersionLinkingStagingTimeout"> (optional)</param>
        /// <returns>ComAdobeCqDamWebdavImplIoDamWebdavVersionLinkingJobInfo</returns>
        ComAdobeCqDamWebdavImplIoDamWebdavVersionLinkingJobInfo ComAdobeCqDamWebdavImplIoDamWebdavVersionLinkingJob(NancyContext context, bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, bool? cqDamWebdavVersionLinkingEnable, int? cqDamWebdavVersionLinkingSchedulerPeriod, int? cqDamWebdavVersionLinkingStagingTimeout);

        /// <summary>
        /// 
        /// </summary>
        /// <param name="context">Context of request</param>
        /// <param name="post"> (optional)</param>
        /// <param name="apply"> (optional)</param>
        /// <param name="delete"> (optional)</param>
        /// <param name="action"> (optional)</param>
        /// <param name="location"> (optional)</param>
        /// <param name="propertylist"> (optional)</param>
        /// <param name="comDayCqDamCoreImplIoSpecialFilesHandlerFilepatters"> (optional)</param>
        /// <returns>ComAdobeCqDamWebdavImplIoSpecialFilesHandlerInfo</returns>
        ComAdobeCqDamWebdavImplIoSpecialFilesHandlerInfo ComAdobeCqDamWebdavImplIoSpecialFilesHandler(NancyContext context, bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, List<string> comDayCqDamCoreImplIoSpecialFilesHandlerFilepatters);

        /// <summary>
        /// 
        /// </summary>
        /// <param name="context">Context of request</param>
        /// <param name="post"> (optional)</param>
        /// <param name="apply"> (optional)</param>
        /// <param name="delete"> (optional)</param>
        /// <param name="action"> (optional)</param>
        /// <param name="location"> (optional)</param>
        /// <param name="propertylist"> (optional)</param>
        /// <param name="firewallDeserializationWhitelist"> (optional)</param>
        /// <param name="firewallDeserializationBlacklist"> (optional)</param>
        /// <param name="firewallDeserializationDiagnostics"> (optional)</param>
        /// <returns>ComAdobeCqDeserfwImplDeserializationFirewallImplInfo</returns>
        ComAdobeCqDeserfwImplDeserializationFirewallImplInfo ComAdobeCqDeserfwImplDeserializationFirewallImpl(NancyContext context, bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, List<string> firewallDeserializationWhitelist, List<string> firewallDeserializationBlacklist, string firewallDeserializationDiagnostics);

        /// <summary>
        /// 
        /// </summary>
        /// <param name="context">Context of request</param>
        /// <param name="post"> (optional)</param>
        /// <param name="apply"> (optional)</param>
        /// <param name="delete"> (optional)</param>
        /// <param name="action"> (optional)</param>
        /// <param name="location"> (optional)</param>
        /// <param name="propertylist"> (optional)</param>
        /// <param name="connectionTimeout"> (optional)</param>
        /// <param name="socketTimeout"> (optional)</param>
        /// <returns>ComAdobeCqDtmImplServiceDTMWebServiceImplInfo</returns>
        ComAdobeCqDtmImplServiceDTMWebServiceImplInfo ComAdobeCqDtmImplServiceDTMWebServiceImpl(NancyContext context, bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, int? connectionTimeout, int? socketTimeout);

        /// <summary>
        /// 
        /// </summary>
        /// <param name="context">Context of request</param>
        /// <param name="post"> (optional)</param>
        /// <param name="apply"> (optional)</param>
        /// <param name="delete"> (optional)</param>
        /// <param name="action"> (optional)</param>
        /// <param name="location"> (optional)</param>
        /// <param name="propertylist"> (optional)</param>
        /// <param name="dtmStagingIpWhitelist"> (optional)</param>
        /// <param name="dtmProductionIpWhitelist"> (optional)</param>
        /// <returns>ComAdobeCqDtmImplServletsDTMDeployHookServletInfo</returns>
        ComAdobeCqDtmImplServletsDTMDeployHookServletInfo ComAdobeCqDtmImplServletsDTMDeployHookServlet(NancyContext context, bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, List<string> dtmStagingIpWhitelist, List<string> dtmProductionIpWhitelist);

        /// <summary>
        /// 
        /// </summary>
        /// <param name="context">Context of request</param>
        /// <param name="post"> (optional)</param>
        /// <param name="apply"> (optional)</param>
        /// <param name="delete"> (optional)</param>
        /// <param name="action"> (optional)</param>
        /// <param name="location"> (optional)</param>
        /// <param name="propertylist"> (optional)</param>
        /// <param name="endpointUri"> (optional)</param>
        /// <param name="connectionTimeout"> (optional)</param>
        /// <param name="socketTimeout"> (optional)</param>
        /// <returns>ComAdobeCqDtmReactorImplServiceWebServiceImplInfo</returns>
        ComAdobeCqDtmReactorImplServiceWebServiceImplInfo ComAdobeCqDtmReactorImplServiceWebServiceImpl(NancyContext context, bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, string endpointUri, int? connectionTimeout, int? socketTimeout);

        /// <summary>
        /// 
        /// </summary>
        /// <param name="context">Context of request</param>
        /// <param name="post"> (optional)</param>
        /// <param name="apply"> (optional)</param>
        /// <param name="delete"> (optional)</param>
        /// <param name="action"> (optional)</param>
        /// <param name="location"> (optional)</param>
        /// <param name="propertylist"> (optional)</param>
        /// <param name="enabled"> (optional)</param>
        /// <param name="disabledForGroups"> (optional)</param>
        /// <returns>ComAdobeCqExperiencelogImplExperienceLogConfigServletInfo</returns>
        ComAdobeCqExperiencelogImplExperienceLogConfigServletInfo ComAdobeCqExperiencelogImplExperienceLogConfigServlet(NancyContext context, bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, bool? enabled, List<string> disabledForGroups);

        /// <summary>
        /// 
        /// </summary>
        /// <param name="context">Context of request</param>
        /// <param name="post"> (optional)</param>
        /// <param name="apply"> (optional)</param>
        /// <param name="delete"> (optional)</param>
        /// <param name="action"> (optional)</param>
        /// <param name="location"> (optional)</param>
        /// <param name="propertylist"> (optional)</param>
        /// <param name="hcName"> (optional)</param>
        /// <param name="hcTags"> (optional)</param>
        /// <param name="hcMbeanName"> (optional)</param>
        /// <param name="packageNames"> (optional)</param>
        /// <returns>ComAdobeCqHcContentPackagesHealthCheckInfo</returns>
        ComAdobeCqHcContentPackagesHealthCheckInfo ComAdobeCqHcContentPackagesHealthCheck(NancyContext context, bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, string hcName, List<string> hcTags, string hcMbeanName, List<string> packageNames);

        /// <summary>
        /// 
        /// </summary>
        /// <param name="context">Context of request</param>
        /// <param name="post"> (optional)</param>
        /// <param name="apply"> (optional)</param>
        /// <param name="delete"> (optional)</param>
        /// <param name="action"> (optional)</param>
        /// <param name="location"> (optional)</param>
        /// <param name="propertylist"> (optional)</param>
        /// <param name="historyRequestFilterExcludedSelectors"> (optional)</param>
        /// <param name="historyRequestFilterExcludedExtensions"> (optional)</param>
        /// <returns>ComAdobeCqHistoryImplHistoryRequestFilterInfo</returns>
        ComAdobeCqHistoryImplHistoryRequestFilterInfo ComAdobeCqHistoryImplHistoryRequestFilter(NancyContext context, bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, List<string> historyRequestFilterExcludedSelectors, List<string> historyRequestFilterExcludedExtensions);

        /// <summary>
        /// 
        /// </summary>
        /// <param name="context">Context of request</param>
        /// <param name="post"> (optional)</param>
        /// <param name="apply"> (optional)</param>
        /// <param name="delete"> (optional)</param>
        /// <param name="action"> (optional)</param>
        /// <param name="location"> (optional)</param>
        /// <param name="propertylist"> (optional)</param>
        /// <param name="historyServiceResourceTypes"> (optional)</param>
        /// <param name="historyServicePathFilter"> (optional)</param>
        /// <returns>ComAdobeCqHistoryImplHistoryServiceImplInfo</returns>
        ComAdobeCqHistoryImplHistoryServiceImplInfo ComAdobeCqHistoryImplHistoryServiceImpl(NancyContext context, bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, List<string> historyServiceResourceTypes, List<string> historyServicePathFilter);

        /// <summary>
        /// 
        /// </summary>
        /// <param name="context">Context of request</param>
        /// <param name="post"> (optional)</param>
        /// <param name="apply"> (optional)</param>
        /// <param name="delete"> (optional)</param>
        /// <param name="action"> (optional)</param>
        /// <param name="location"> (optional)</param>
        /// <param name="propertylist"> (optional)</param>
        /// <param name="inboxImplTypeproviderRegistrypaths"> (optional)</param>
        /// <param name="inboxImplTypeproviderLegacypaths"> (optional)</param>
        /// <param name="inboxImplTypeproviderDefaulturlFailureitem"> (optional)</param>
        /// <param name="inboxImplTypeproviderDefaulturlWorkitem"> (optional)</param>
        /// <param name="inboxImplTypeproviderDefaulturlTask"> (optional)</param>
        /// <returns>ComAdobeCqInboxImplTypeproviderItemTypeProviderInfo</returns>
        ComAdobeCqInboxImplTypeproviderItemTypeProviderInfo ComAdobeCqInboxImplTypeproviderItemTypeProvider(NancyContext context, bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, List<string> inboxImplTypeproviderRegistrypaths, List<string> inboxImplTypeproviderLegacypaths, string inboxImplTypeproviderDefaulturlFailureitem, string inboxImplTypeproviderDefaulturlWorkitem, string inboxImplTypeproviderDefaulturlTask);

        /// <summary>
        /// 
        /// </summary>
        /// <param name="context">Context of request</param>
        /// <param name="post"> (optional)</param>
        /// <param name="apply"> (optional)</param>
        /// <param name="delete"> (optional)</param>
        /// <param name="action"> (optional)</param>
        /// <param name="location"> (optional)</param>
        /// <param name="propertylist"> (optional)</param>
        /// <param name="imageQuality"> (optional)</param>
        /// <param name="imageSupportedResolutions"> (optional)</param>
        /// <returns>ComAdobeCqProjectsImplServletProjectImageServletInfo</returns>
        ComAdobeCqProjectsImplServletProjectImageServletInfo ComAdobeCqProjectsImplServletProjectImageServlet(NancyContext context, bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, string imageQuality, string imageSupportedResolutions);

        /// <summary>
        /// 
        /// </summary>
        /// <param name="context">Context of request</param>
        /// <param name="post"> (optional)</param>
        /// <param name="apply"> (optional)</param>
        /// <param name="delete"> (optional)</param>
        /// <param name="action"> (optional)</param>
        /// <param name="location"> (optional)</param>
        /// <param name="propertylist"> (optional)</param>
        /// <param name="scheduledpurgeName"> (optional)</param>
        /// <param name="scheduledpurgePurgeActive"> (optional)</param>
        /// <param name="scheduledpurgeTemplates"> (optional)</param>
        /// <param name="scheduledpurgePurgeGroups"> (optional)</param>
        /// <param name="scheduledpurgePurgeAssets"> (optional)</param>
        /// <param name="scheduledpurgeTerminateRunningWorkflows"> (optional)</param>
        /// <param name="scheduledpurgeDaysold"> (optional)</param>
        /// <param name="scheduledpurgeSaveThreshold"> (optional)</param>
        /// <returns>ComAdobeCqProjectsPurgeSchedulerInfo</returns>
        ComAdobeCqProjectsPurgeSchedulerInfo ComAdobeCqProjectsPurgeScheduler(NancyContext context, bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, string scheduledpurgeName, bool? scheduledpurgePurgeActive, List<string> scheduledpurgeTemplates, bool? scheduledpurgePurgeGroups, bool? scheduledpurgePurgeAssets, bool? scheduledpurgeTerminateRunningWorkflows, int? scheduledpurgeDaysold, int? scheduledpurgeSaveThreshold);

        /// <summary>
        /// 
        /// </summary>
        /// <param name="context">Context of request</param>
        /// <param name="post"> (optional)</param>
        /// <param name="apply"> (optional)</param>
        /// <param name="delete"> (optional)</param>
        /// <param name="action"> (optional)</param>
        /// <param name="location"> (optional)</param>
        /// <param name="propertylist"> (optional)</param>
        /// <param name="includePaths"> (optional)</param>
        /// <param name="exporterUser"> (optional)</param>
        /// <returns>ComAdobeCqScheduledExporterImplScheduledExporterImplInfo</returns>
        ComAdobeCqScheduledExporterImplScheduledExporterImplInfo ComAdobeCqScheduledExporterImplScheduledExporterImpl(NancyContext context, bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, List<string> includePaths, string exporterUser);

        /// <summary>
        /// 
        /// </summary>
        /// <param name="context">Context of request</param>
        /// <param name="post"> (optional)</param>
        /// <param name="apply"> (optional)</param>
        /// <param name="delete"> (optional)</param>
        /// <param name="action"> (optional)</param>
        /// <param name="location"> (optional)</param>
        /// <param name="propertylist"> (optional)</param>
        /// <param name="comAdobeCqScreensAnalyticsImplUrl"> (optional)</param>
        /// <param name="comAdobeCqScreensAnalyticsImplApikey"> (optional)</param>
        /// <param name="comAdobeCqScreensAnalyticsImplProject"> (optional)</param>
        /// <param name="comAdobeCqScreensAnalyticsImplEnvironment"> (optional)</param>
        /// <param name="comAdobeCqScreensAnalyticsImplSendFrequency"> (optional)</param>
        /// <returns>ComAdobeCqScreensAnalyticsImplScreensAnalyticsServiceImplInfo</returns>
        ComAdobeCqScreensAnalyticsImplScreensAnalyticsServiceImplInfo ComAdobeCqScreensAnalyticsImplScreensAnalyticsServiceImpl(NancyContext context, bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, string comAdobeCqScreensAnalyticsImplUrl, string comAdobeCqScreensAnalyticsImplApikey, string comAdobeCqScreensAnalyticsImplProject, string comAdobeCqScreensAnalyticsImplEnvironment, int? comAdobeCqScreensAnalyticsImplSendFrequency);

        /// <summary>
        /// 
        /// </summary>
        /// <param name="context">Context of request</param>
        /// <param name="post"> (optional)</param>
        /// <param name="apply"> (optional)</param>
        /// <param name="delete"> (optional)</param>
        /// <param name="action"> (optional)</param>
        /// <param name="location"> (optional)</param>
        /// <param name="propertylist"> (optional)</param>
        /// <param name="comAdobeAemScreensPlayerPingfrequency"> (optional)</param>
        /// <param name="comAdobeAemScreensDevicePaswordSpecialchars"> (optional)</param>
        /// <param name="comAdobeAemScreensDevicePaswordMinlowercasechars"> (optional)</param>
        /// <param name="comAdobeAemScreensDevicePaswordMinuppercasechars"> (optional)</param>
        /// <param name="comAdobeAemScreensDevicePaswordMinnumberchars"> (optional)</param>
        /// <param name="comAdobeAemScreensDevicePaswordMinspecialchars"> (optional)</param>
        /// <param name="comAdobeAemScreensDevicePaswordMinlength"> (optional)</param>
        /// <returns>ComAdobeCqScreensDeviceImplDeviceServiceInfo</returns>
        ComAdobeCqScreensDeviceImplDeviceServiceInfo ComAdobeCqScreensDeviceImplDeviceService(NancyContext context, bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, int? comAdobeAemScreensPlayerPingfrequency, string comAdobeAemScreensDevicePaswordSpecialchars, int? comAdobeAemScreensDevicePaswordMinlowercasechars, int? comAdobeAemScreensDevicePaswordMinuppercasechars, int? comAdobeAemScreensDevicePaswordMinnumberchars, int? comAdobeAemScreensDevicePaswordMinspecialchars, int? comAdobeAemScreensDevicePaswordMinlength);

        /// <summary>
        /// 
        /// </summary>
        /// <param name="context">Context of request</param>
        /// <param name="post"> (optional)</param>
        /// <param name="apply"> (optional)</param>
        /// <param name="delete"> (optional)</param>
        /// <param name="action"> (optional)</param>
        /// <param name="location"> (optional)</param>
        /// <param name="propertylist"> (optional)</param>
        /// <param name="deviceRegistrationTimeout"> (optional)</param>
        /// <returns>ComAdobeCqScreensDeviceRegistrationImplRegistrationServiceImplInfo</returns>
        ComAdobeCqScreensDeviceRegistrationImplRegistrationServiceImplInfo ComAdobeCqScreensDeviceRegistrationImplRegistrationServiceImpl(NancyContext context, bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, int? deviceRegistrationTimeout);

        /// <summary>
        /// 
        /// </summary>
        /// <param name="context">Context of request</param>
        /// <param name="post"> (optional)</param>
        /// <param name="apply"> (optional)</param>
        /// <param name="delete"> (optional)</param>
        /// <param name="action"> (optional)</param>
        /// <param name="location"> (optional)</param>
        /// <param name="propertylist"> (optional)</param>
        /// <param name="cqPagesupdatehandlerImageresourcetypes"> (optional)</param>
        /// <param name="cqPagesupdatehandlerProductresourcetypes"> (optional)</param>
        /// <param name="cqPagesupdatehandlerVideoresourcetypes"> (optional)</param>
        /// <param name="cqPagesupdatehandlerDynamicsequenceresourcetypes"> (optional)</param>
        /// <param name="cqPagesupdatehandlerPreviewmodepaths"> (optional)</param>
        /// <returns>ComAdobeCqScreensImplHandlerChannelsUpdateHandlerInfo</returns>
        ComAdobeCqScreensImplHandlerChannelsUpdateHandlerInfo ComAdobeCqScreensImplHandlerChannelsUpdateHandler(NancyContext context, bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, List<string> cqPagesupdatehandlerImageresourcetypes, List<string> cqPagesupdatehandlerProductresourcetypes, List<string> cqPagesupdatehandlerVideoresourcetypes, List<string> cqPagesupdatehandlerDynamicsequenceresourcetypes, List<string> cqPagesupdatehandlerPreviewmodepaths);

        /// <summary>
        /// 
        /// </summary>
        /// <param name="context">Context of request</param>
        /// <param name="post"> (optional)</param>
        /// <param name="apply"> (optional)</param>
        /// <param name="delete"> (optional)</param>
        /// <param name="action"> (optional)</param>
        /// <param name="location"> (optional)</param>
        /// <param name="propertylist"> (optional)</param>
        /// <param name="schedulerExpression"> (optional)</param>
        /// <returns>ComAdobeCqScreensImplJobsDistributedDevicesStatiUpdateJobInfo</returns>
        ComAdobeCqScreensImplJobsDistributedDevicesStatiUpdateJobInfo ComAdobeCqScreensImplJobsDistributedDevicesStatiUpdateJob(NancyContext context, bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, string schedulerExpression);

        /// <summary>
        /// 
        /// </summary>
        /// <param name="context">Context of request</param>
        /// <param name="post"> (optional)</param>
        /// <param name="apply"> (optional)</param>
        /// <param name="delete"> (optional)</param>
        /// <param name="action"> (optional)</param>
        /// <param name="location"> (optional)</param>
        /// <param name="propertylist"> (optional)</param>
        /// <param name="comAdobeAemScreensImplRemoteRequestTimeout"> (optional)</param>
        /// <returns>ComAdobeCqScreensImplRemoteImplDistributedHttpClientImplInfo</returns>
        ComAdobeCqScreensImplRemoteImplDistributedHttpClientImplInfo ComAdobeCqScreensImplRemoteImplDistributedHttpClientImpl(NancyContext context, bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, int? comAdobeAemScreensImplRemoteRequestTimeout);

        /// <summary>
        /// 
        /// </summary>
        /// <param name="context">Context of request</param>
        /// <param name="post"> (optional)</param>
        /// <param name="apply"> (optional)</param>
        /// <param name="delete"> (optional)</param>
        /// <param name="action"> (optional)</param>
        /// <param name="location"> (optional)</param>
        /// <param name="propertylist"> (optional)</param>
        /// <param name="screensChannelsPropertiesToRemove"> (optional)</param>
        /// <returns>ComAdobeCqScreensImplScreensChannelPostProcessorInfo</returns>
        ComAdobeCqScreensImplScreensChannelPostProcessorInfo ComAdobeCqScreensImplScreensChannelPostProcessor(NancyContext context, bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, List<string> screensChannelsPropertiesToRemove);

        /// <summary>
        /// 
        /// </summary>
        /// <param name="context">Context of request</param>
        /// <param name="post"> (optional)</param>
        /// <param name="apply"> (optional)</param>
        /// <param name="delete"> (optional)</param>
        /// <param name="action"> (optional)</param>
        /// <param name="location"> (optional)</param>
        /// <param name="propertylist"> (optional)</param>
        /// <param name="comAdobeCqScreensMonitoringImplScreensMonitoringServiceImplProjectPath"> (optional)</param>
        /// <param name="comAdobeCqScreensMonitoringImplScreensMonitoringServiceImplScheduleFrequency"> (optional)</param>
        /// <param name="comAdobeCqScreensMonitoringImplScreensMonitoringServiceImplPingTimeout"> (optional)</param>
        /// <param name="comAdobeCqScreensMonitoringImplScreensMonitoringServiceImplRecipients"> (optional)</param>
        /// <param name="comAdobeCqScreensMonitoringImplScreensMonitoringServiceImplSmtpserver"> (optional)</param>
        /// <param name="comAdobeCqScreensMonitoringImplScreensMonitoringServiceImplSmtpport"> (optional)</param>
        /// <param name="comAdobeCqScreensMonitoringImplScreensMonitoringServiceImplUsetls"> (optional)</param>
        /// <param name="comAdobeCqScreensMonitoringImplScreensMonitoringServiceImplUsername"> (optional)</param>
        /// <param name="comAdobeCqScreensMonitoringImplScreensMonitoringServiceImplPassword"> (optional)</param>
        /// <returns>ComAdobeCqScreensMonitoringImplScreensMonitoringServiceImplInfo</returns>
        ComAdobeCqScreensMonitoringImplScreensMonitoringServiceImplInfo ComAdobeCqScreensMonitoringImplScreensMonitoringServiceImpl(NancyContext context, bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, List<string> comAdobeCqScreensMonitoringImplScreensMonitoringServiceImplProjectPath, string comAdobeCqScreensMonitoringImplScreensMonitoringServiceImplScheduleFrequency, int? comAdobeCqScreensMonitoringImplScreensMonitoringServiceImplPingTimeout, string comAdobeCqScreensMonitoringImplScreensMonitoringServiceImplRecipients, string comAdobeCqScreensMonitoringImplScreensMonitoringServiceImplSmtpserver, int? comAdobeCqScreensMonitoringImplScreensMonitoringServiceImplSmtpport, bool? comAdobeCqScreensMonitoringImplScreensMonitoringServiceImplUsetls, string comAdobeCqScreensMonitoringImplScreensMonitoringServiceImplUsername, string comAdobeCqScreensMonitoringImplScreensMonitoringServiceImplPassword);

        /// <summary>
        /// 
        /// </summary>
        /// <param name="context">Context of request</param>
        /// <param name="post"> (optional)</param>
        /// <param name="apply"> (optional)</param>
        /// <param name="delete"> (optional)</param>
        /// <param name="action"> (optional)</param>
        /// <param name="location"> (optional)</param>
        /// <param name="propertylist"> (optional)</param>
        /// <param name="serviceRanking"> (optional)</param>
        /// <param name="globalSize"> (optional)</param>
        /// <param name="maxDiskUsage"> (optional)</param>
        /// <param name="persistenceEnabled"> (optional)</param>
        /// <param name="threadPoolMaxSize"> (optional)</param>
        /// <param name="scheduledThreadPoolMaxSize"> (optional)</param>
        /// <param name="gracefulShutdownTimeout"> (optional)</param>
        /// <param name="queues"> (optional)</param>
        /// <param name="topics"> (optional)</param>
        /// <param name="addressesMaxDeliveryAttempts"> (optional)</param>
        /// <param name="addressesExpiryDelay"> (optional)</param>
        /// <param name="addressesAddressFullMessagePolicy"> (optional)</param>
        /// <param name="addressesMaxSizeBytes"> (optional)</param>
        /// <param name="addressesPageSizeBytes"> (optional)</param>
        /// <param name="addressesPageCacheMaxSize"> (optional)</param>
        /// <param name="clusterUser"> (optional)</param>
        /// <param name="clusterPassword"> (optional)</param>
        /// <param name="clusterCallTimeout"> (optional)</param>
        /// <param name="clusterCallFailoverTimeout"> (optional)</param>
        /// <param name="clusterClientFailureCheckPeriod"> (optional)</param>
        /// <param name="clusterNotificationAttempts"> (optional)</param>
        /// <param name="clusterNotificationInterval"> (optional)</param>
        /// <param name="idCacheSize"> (optional)</param>
        /// <param name="clusterConfirmationWindowSize"> (optional)</param>
        /// <param name="clusterConnectionTtl"> (optional)</param>
        /// <param name="clusterDuplicateDetection"> (optional)</param>
        /// <param name="clusterInitialConnectAttempts"> (optional)</param>
        /// <param name="clusterMaxRetryInterval"> (optional)</param>
        /// <param name="clusterMinLargeMessageSize"> (optional)</param>
        /// <param name="clusterProducerWindowSize"> (optional)</param>
        /// <param name="clusterReconnectAttempts"> (optional)</param>
        /// <param name="clusterRetryInterval"> (optional)</param>
        /// <param name="clusterRetryIntervalMultiplier"> (optional)</param>
        /// <returns>ComAdobeCqScreensMqActivemqImplArtemisJMSProviderInfo</returns>
        ComAdobeCqScreensMqActivemqImplArtemisJMSProviderInfo ComAdobeCqScreensMqActivemqImplArtemisJMSProvider(NancyContext context, bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, int? serviceRanking, int? globalSize, int? maxDiskUsage, bool? persistenceEnabled, int? threadPoolMaxSize, int? scheduledThreadPoolMaxSize, int? gracefulShutdownTimeout, List<string> queues, List<string> topics, int? addressesMaxDeliveryAttempts, int? addressesExpiryDelay, string addressesAddressFullMessagePolicy, int? addressesMaxSizeBytes, int? addressesPageSizeBytes, int? addressesPageCacheMaxSize, string clusterUser, string clusterPassword, int? clusterCallTimeout, int? clusterCallFailoverTimeout, int? clusterClientFailureCheckPeriod, int? clusterNotificationAttempts, int? clusterNotificationInterval, int? idCacheSize, int? clusterConfirmationWindowSize, int? clusterConnectionTtl, bool? clusterDuplicateDetection, int? clusterInitialConnectAttempts, int? clusterMaxRetryInterval, int? clusterMinLargeMessageSize, int? clusterProducerWindowSize, int? clusterReconnectAttempts, int? clusterRetryInterval, decimal? clusterRetryIntervalMultiplier);

        /// <summary>
        /// 
        /// </summary>
        /// <param name="context">Context of request</param>
        /// <param name="post"> (optional)</param>
        /// <param name="apply"> (optional)</param>
        /// <param name="delete"> (optional)</param>
        /// <param name="action"> (optional)</param>
        /// <param name="location"> (optional)</param>
        /// <param name="propertylist"> (optional)</param>
        /// <param name="comAdobeCqScreensOfflinecontentImplBulkOfflineUpdateServiceImplProjectPath"> (optional)</param>
        /// <param name="comAdobeCqScreensOfflinecontentImplBulkOfflineUpdateServiceImplScheduleFrequency"> (optional)</param>
        /// <returns>ComAdobeCqScreensOfflinecontentImplBulkOfflineUpdateServiceImplInfo</returns>
        ComAdobeCqScreensOfflinecontentImplBulkOfflineUpdateServiceImplInfo ComAdobeCqScreensOfflinecontentImplBulkOfflineUpdateServiceImpl(NancyContext context, bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, List<string> comAdobeCqScreensOfflinecontentImplBulkOfflineUpdateServiceImplProjectPath, string comAdobeCqScreensOfflinecontentImplBulkOfflineUpdateServiceImplScheduleFrequency);

        /// <summary>
        /// 
        /// </summary>
        /// <param name="context">Context of request</param>
        /// <param name="post"> (optional)</param>
        /// <param name="apply"> (optional)</param>
        /// <param name="delete"> (optional)</param>
        /// <param name="action"> (optional)</param>
        /// <param name="location"> (optional)</param>
        /// <param name="propertylist"> (optional)</param>
        /// <param name="disableSmartSync"> (optional)</param>
        /// <returns>ComAdobeCqScreensOfflinecontentImplOfflineContentServiceImplInfo</returns>
        ComAdobeCqScreensOfflinecontentImplOfflineContentServiceImplInfo ComAdobeCqScreensOfflinecontentImplOfflineContentServiceImpl(NancyContext context, bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, bool? disableSmartSync);

        /// <summary>
        /// 
        /// </summary>
        /// <param name="context">Context of request</param>
        /// <param name="post"> (optional)</param>
        /// <param name="apply"> (optional)</param>
        /// <param name="delete"> (optional)</param>
        /// <param name="action"> (optional)</param>
        /// <param name="location"> (optional)</param>
        /// <param name="propertylist"> (optional)</param>
        /// <param name="enableDataTriggeredContent"> (optional)</param>
        /// <returns>ComAdobeCqScreensSegmentationImplSegmentationFeatureFlagInfo</returns>
        ComAdobeCqScreensSegmentationImplSegmentationFeatureFlagInfo ComAdobeCqScreensSegmentationImplSegmentationFeatureFlag(NancyContext context, bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, bool? enableDataTriggeredContent);

        /// <summary>
        /// 
        /// </summary>
        /// <param name="context">Context of request</param>
        /// <param name="post"> (optional)</param>
        /// <param name="apply"> (optional)</param>
        /// <param name="delete"> (optional)</param>
        /// <param name="action"> (optional)</param>
        /// <param name="location"> (optional)</param>
        /// <param name="propertylist"> (optional)</param>
        /// <param name="hcTags"> (optional)</param>
        /// <returns>ComAdobeCqSecurityHcBundlesImplHtmlLibraryManagerConfigHealthChInfo</returns>
        ComAdobeCqSecurityHcBundlesImplHtmlLibraryManagerConfigHealthChInfo ComAdobeCqSecurityHcBundlesImplHtmlLibraryManagerConfigHealthCh(NancyContext context, bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, List<string> hcTags);

        /// <summary>
        /// 
        /// </summary>
        /// <param name="context">Context of request</param>
        /// <param name="post"> (optional)</param>
        /// <param name="apply"> (optional)</param>
        /// <param name="delete"> (optional)</param>
        /// <param name="action"> (optional)</param>
        /// <param name="location"> (optional)</param>
        /// <param name="propertylist"> (optional)</param>
        /// <param name="hcTags"> (optional)</param>
        /// <returns>ComAdobeCqSecurityHcBundlesImplWcmFilterHealthCheckInfo</returns>
        ComAdobeCqSecurityHcBundlesImplWcmFilterHealthCheckInfo ComAdobeCqSecurityHcBundlesImplWcmFilterHealthCheck(NancyContext context, bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, List<string> hcTags);

        /// <summary>
        /// 
        /// </summary>
        /// <param name="context">Context of request</param>
        /// <param name="post"> (optional)</param>
        /// <param name="apply"> (optional)</param>
        /// <param name="delete"> (optional)</param>
        /// <param name="action"> (optional)</param>
        /// <param name="location"> (optional)</param>
        /// <param name="propertylist"> (optional)</param>
        /// <param name="hcTags"> (optional)</param>
        /// <param name="dispatcherAddress"> (optional)</param>
        /// <param name="dispatcherFilterAllowed"> (optional)</param>
        /// <param name="dispatcherFilterBlocked"> (optional)</param>
        /// <returns>ComAdobeCqSecurityHcDispatcherImplDispatcherAccessHealthCheckInfo</returns>
        ComAdobeCqSecurityHcDispatcherImplDispatcherAccessHealthCheckInfo ComAdobeCqSecurityHcDispatcherImplDispatcherAccessHealthCheck(NancyContext context, bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, List<string> hcTags, string dispatcherAddress, List<string> dispatcherFilterAllowed, List<string> dispatcherFilterBlocked);

        /// <summary>
        /// 
        /// </summary>
        /// <param name="context">Context of request</param>
        /// <param name="post"> (optional)</param>
        /// <param name="apply"> (optional)</param>
        /// <param name="delete"> (optional)</param>
        /// <param name="action"> (optional)</param>
        /// <param name="location"> (optional)</param>
        /// <param name="propertylist"> (optional)</param>
        /// <param name="hcTags"> (optional)</param>
        /// <returns>ComAdobeCqSecurityHcPackagesImplExampleContentHealthCheckInfo</returns>
        ComAdobeCqSecurityHcPackagesImplExampleContentHealthCheckInfo ComAdobeCqSecurityHcPackagesImplExampleContentHealthCheck(NancyContext context, bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, List<string> hcTags);

        /// <summary>
        /// 
        /// </summary>
        /// <param name="context">Context of request</param>
        /// <param name="post"> (optional)</param>
        /// <param name="apply"> (optional)</param>
        /// <param name="delete"> (optional)</param>
        /// <param name="action"> (optional)</param>
        /// <param name="location"> (optional)</param>
        /// <param name="propertylist"> (optional)</param>
        /// <param name="hcTags"> (optional)</param>
        /// <param name="webserverAddress"> (optional)</param>
        /// <returns>ComAdobeCqSecurityHcWebserverImplClickjackingHealthCheckInfo</returns>
        ComAdobeCqSecurityHcWebserverImplClickjackingHealthCheckInfo ComAdobeCqSecurityHcWebserverImplClickjackingHealthCheck(NancyContext context, bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, List<string> hcTags, string webserverAddress);

        /// <summary>
        /// 
        /// </summary>
        /// <param name="context">Context of request</param>
        /// <param name="post"> (optional)</param>
        /// <param name="apply"> (optional)</param>
        /// <param name="delete"> (optional)</param>
        /// <param name="action"> (optional)</param>
        /// <param name="location"> (optional)</param>
        /// <param name="propertylist"> (optional)</param>
        /// <param name="enable"> (optional)</param>
        /// <param name="ttl1"> (optional)</param>
        /// <param name="ttl2"> (optional)</param>
        /// <returns>ComAdobeCqSocialAccountverificationImplAccountManagementConfigImInfo</returns>
        ComAdobeCqSocialAccountverificationImplAccountManagementConfigImInfo ComAdobeCqSocialAccountverificationImplAccountManagementConfigIm(NancyContext context, bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, bool? enable, int? ttl1, int? ttl2);

        /// <summary>
        /// 
        /// </summary>
        /// <param name="context">Context of request</param>
        /// <param name="post"> (optional)</param>
        /// <param name="apply"> (optional)</param>
        /// <param name="delete"> (optional)</param>
        /// <param name="action"> (optional)</param>
        /// <param name="location"> (optional)</param>
        /// <param name="propertylist"> (optional)</param>
        /// <param name="priority"> (optional)</param>
        /// <returns>ComAdobeCqSocialActivitystreamsClientImplSocialActivityComponenInfo</returns>
        ComAdobeCqSocialActivitystreamsClientImplSocialActivityComponenInfo ComAdobeCqSocialActivitystreamsClientImplSocialActivityComponen(NancyContext context, bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, int? priority);

        /// <summary>
        /// 
        /// </summary>
        /// <param name="context">Context of request</param>
        /// <param name="post"> (optional)</param>
        /// <param name="apply"> (optional)</param>
        /// <param name="delete"> (optional)</param>
        /// <param name="action"> (optional)</param>
        /// <param name="location"> (optional)</param>
        /// <param name="propertylist"> (optional)</param>
        /// <param name="priority"> (optional)</param>
        /// <returns>ComAdobeCqSocialActivitystreamsClientImplSocialActivityStreamCoInfo</returns>
        ComAdobeCqSocialActivitystreamsClientImplSocialActivityStreamCoInfo ComAdobeCqSocialActivitystreamsClientImplSocialActivityStreamCo(NancyContext context, bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, int? priority);

        /// <summary>
        /// 
        /// </summary>
        /// <param name="context">Context of request</param>
        /// <param name="post"> (optional)</param>
        /// <param name="apply"> (optional)</param>
        /// <param name="delete"> (optional)</param>
        /// <param name="action"> (optional)</param>
        /// <param name="location"> (optional)</param>
        /// <param name="propertylist"> (optional)</param>
        /// <param name="eventTopics"> (optional)</param>
        /// <param name="eventFilter"> (optional)</param>
        /// <returns>ComAdobeCqSocialActivitystreamsListenerImplEventListenerHandlerInfo</returns>
        ComAdobeCqSocialActivitystreamsListenerImplEventListenerHandlerInfo ComAdobeCqSocialActivitystreamsListenerImplEventListenerHandler(NancyContext context, bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, string eventTopics, string eventFilter);

        /// <summary>
        /// 
        /// </summary>
        /// <param name="context">Context of request</param>
        /// <param name="post"> (optional)</param>
        /// <param name="apply"> (optional)</param>
        /// <param name="delete"> (optional)</param>
        /// <param name="action"> (optional)</param>
        /// <param name="location"> (optional)</param>
        /// <param name="propertylist"> (optional)</param>
        /// <param name="accepted"> (optional)</param>
        /// <param name="ranked"> (optional)</param>
        /// <returns>ComAdobeCqSocialActivitystreamsListenerImplModerationEventExtenInfo</returns>
        ComAdobeCqSocialActivitystreamsListenerImplModerationEventExtenInfo ComAdobeCqSocialActivitystreamsListenerImplModerationEventExten(NancyContext context, bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, bool? accepted, int? ranked);

        /// <summary>
        /// 
        /// </summary>
        /// <param name="context">Context of request</param>
        /// <param name="post"> (optional)</param>
        /// <param name="apply"> (optional)</param>
        /// <param name="delete"> (optional)</param>
        /// <param name="action"> (optional)</param>
        /// <param name="location"> (optional)</param>
        /// <param name="propertylist"> (optional)</param>
        /// <param name="ranking"> (optional)</param>
        /// <param name="enable"> (optional)</param>
        /// <returns>ComAdobeCqSocialActivitystreamsListenerImplRatingEventActivitySInfo</returns>
        ComAdobeCqSocialActivitystreamsListenerImplRatingEventActivitySInfo ComAdobeCqSocialActivitystreamsListenerImplRatingEventActivityS(NancyContext context, bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, int? ranking, bool? enable);

        /// <summary>
        /// 
        /// </summary>
        /// <param name="context">Context of request</param>
        /// <param name="post"> (optional)</param>
        /// <param name="apply"> (optional)</param>
        /// <param name="delete"> (optional)</param>
        /// <param name="action"> (optional)</param>
        /// <param name="location"> (optional)</param>
        /// <param name="propertylist"> (optional)</param>
        /// <param name="streamPath"> (optional)</param>
        /// <param name="streamName"> (optional)</param>
        /// <returns>ComAdobeCqSocialActivitystreamsListenerImplResourceActivityStreInfo</returns>
        ComAdobeCqSocialActivitystreamsListenerImplResourceActivityStreInfo ComAdobeCqSocialActivitystreamsListenerImplResourceActivityStre(NancyContext context, bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, string streamPath, string streamName);

        /// <summary>
        /// 
        /// </summary>
        /// <param name="context">Context of request</param>
        /// <param name="post"> (optional)</param>
        /// <param name="apply"> (optional)</param>
        /// <param name="delete"> (optional)</param>
        /// <param name="action"> (optional)</param>
        /// <param name="location"> (optional)</param>
        /// <param name="propertylist"> (optional)</param>
        /// <param name="maxRetry"> (optional)</param>
        /// <param name="fieldWhitelist"> (optional)</param>
        /// <param name="attachmentTypeBlacklist"> (optional)</param>
        /// <returns>ComAdobeCqSocialCalendarClientEndpointsImplCalendarOperationsIInfo</returns>
        ComAdobeCqSocialCalendarClientEndpointsImplCalendarOperationsIInfo ComAdobeCqSocialCalendarClientEndpointsImplCalendarOperationsI(NancyContext context, bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, int? maxRetry, List<string> fieldWhitelist, List<string> attachmentTypeBlacklist);

        /// <summary>
        /// 
        /// </summary>
        /// <param name="context">Context of request</param>
        /// <param name="post"> (optional)</param>
        /// <param name="apply"> (optional)</param>
        /// <param name="delete"> (optional)</param>
        /// <param name="action"> (optional)</param>
        /// <param name="location"> (optional)</param>
        /// <param name="propertylist"> (optional)</param>
        /// <param name="attachmentTypeBlacklist"> (optional)</param>
        /// <param name="extensionOrder"> (optional)</param>
        /// <returns>ComAdobeCqSocialCalendarClientOperationextensionsEventAttachmenInfo</returns>
        ComAdobeCqSocialCalendarClientOperationextensionsEventAttachmenInfo ComAdobeCqSocialCalendarClientOperationextensionsEventAttachmen(NancyContext context, bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, string attachmentTypeBlacklist, int? extensionOrder);

        /// <summary>
        /// 
        /// </summary>
        /// <param name="context">Context of request</param>
        /// <param name="post"> (optional)</param>
        /// <param name="apply"> (optional)</param>
        /// <param name="delete"> (optional)</param>
        /// <param name="action"> (optional)</param>
        /// <param name="location"> (optional)</param>
        /// <param name="propertylist"> (optional)</param>
        /// <param name="timezonesExpirytime"> (optional)</param>
        /// <returns>ComAdobeCqSocialCalendarServletsTimeZoneServletInfo</returns>
        ComAdobeCqSocialCalendarServletsTimeZoneServletInfo ComAdobeCqSocialCalendarServletsTimeZoneServlet(NancyContext context, bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, int? timezonesExpirytime);

        /// <summary>
        /// 
        /// </summary>
        /// <param name="context">Context of request</param>
        /// <param name="post"> (optional)</param>
        /// <param name="apply"> (optional)</param>
        /// <param name="delete"> (optional)</param>
        /// <param name="action"> (optional)</param>
        /// <param name="location"> (optional)</param>
        /// <param name="propertylist"> (optional)</param>
        /// <param name="ranking"> (optional)</param>
        /// <returns>ComAdobeCqSocialCommonsCommentsEndpointsImplCommentDeleteEventInfo</returns>
        ComAdobeCqSocialCommonsCommentsEndpointsImplCommentDeleteEventInfo ComAdobeCqSocialCommonsCommentsEndpointsImplCommentDeleteEvent(NancyContext context, bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, int? ranking);

        /// <summary>
        /// 
        /// </summary>
        /// <param name="context">Context of request</param>
        /// <param name="post"> (optional)</param>
        /// <param name="apply"> (optional)</param>
        /// <param name="delete"> (optional)</param>
        /// <param name="action"> (optional)</param>
        /// <param name="location"> (optional)</param>
        /// <param name="propertylist"> (optional)</param>
        /// <param name="fieldWhitelist"> (optional)</param>
        /// <param name="attachmentTypeBlacklist"> (optional)</param>
        /// <returns>ComAdobeCqSocialCommonsCommentsEndpointsImplCommentOperationSeInfo</returns>
        ComAdobeCqSocialCommonsCommentsEndpointsImplCommentOperationSeInfo ComAdobeCqSocialCommonsCommentsEndpointsImplCommentOperationSe(NancyContext context, bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, List<string> fieldWhitelist, List<string> attachmentTypeBlacklist);

        /// <summary>
        /// 
        /// </summary>
        /// <param name="context">Context of request</param>
        /// <param name="post"> (optional)</param>
        /// <param name="apply"> (optional)</param>
        /// <param name="delete"> (optional)</param>
        /// <param name="action"> (optional)</param>
        /// <param name="location"> (optional)</param>
        /// <param name="propertylist"> (optional)</param>
        /// <param name="fieldWhitelist"> (optional)</param>
        /// <param name="attachmentTypeBlacklist"> (optional)</param>
        /// <returns>ComAdobeCqSocialCommonsCommentsEndpointsImplTranslationOperatiInfo</returns>
        ComAdobeCqSocialCommonsCommentsEndpointsImplTranslationOperatiInfo ComAdobeCqSocialCommonsCommentsEndpointsImplTranslationOperati(NancyContext context, bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, List<string> fieldWhitelist, List<string> attachmentTypeBlacklist);

        /// <summary>
        /// 
        /// </summary>
        /// <param name="context">Context of request</param>
        /// <param name="post"> (optional)</param>
        /// <param name="apply"> (optional)</param>
        /// <param name="delete"> (optional)</param>
        /// <param name="action"> (optional)</param>
        /// <param name="location"> (optional)</param>
        /// <param name="propertylist"> (optional)</param>
        /// <param name="numUserLimit"> (optional)</param>
        /// <returns>ComAdobeCqSocialCommonsCommentsListingImplSearchCommentSocialCInfo</returns>
        ComAdobeCqSocialCommonsCommentsListingImplSearchCommentSocialCInfo ComAdobeCqSocialCommonsCommentsListingImplSearchCommentSocialC(NancyContext context, bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, int? numUserLimit);

        /// <summary>
        /// 
        /// </summary>
        /// <param name="context">Context of request</param>
        /// <param name="post"> (optional)</param>
        /// <param name="apply"> (optional)</param>
        /// <param name="delete"> (optional)</param>
        /// <param name="action"> (optional)</param>
        /// <param name="location"> (optional)</param>
        /// <param name="propertylist"> (optional)</param>
        /// <param name="enableScheduledPostsSearch"> (optional)</param>
        /// <param name="numberOfMinutes"> (optional)</param>
        /// <param name="maxSearchLimit"> (optional)</param>
        /// <returns>ComAdobeCqSocialCommonsCommentsSchedulerImplSearchScheduledPosInfo</returns>
        ComAdobeCqSocialCommonsCommentsSchedulerImplSearchScheduledPosInfo ComAdobeCqSocialCommonsCommentsSchedulerImplSearchScheduledPos(NancyContext context, bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, bool? enableScheduledPostsSearch, int? numberOfMinutes, int? maxSearchLimit);

        /// <summary>
        /// 
        /// </summary>
        /// <param name="context">Context of request</param>
        /// <param name="post"> (optional)</param>
        /// <param name="apply"> (optional)</param>
        /// <param name="delete"> (optional)</param>
        /// <param name="action"> (optional)</param>
        /// <param name="location"> (optional)</param>
        /// <param name="propertylist"> (optional)</param>
        /// <param name="corsEnabling"> (optional)</param>
        /// <returns>ComAdobeCqSocialCommonsCorsCORSAuthenticationFilterInfo</returns>
        ComAdobeCqSocialCommonsCorsCORSAuthenticationFilterInfo ComAdobeCqSocialCommonsCorsCORSAuthenticationFilter(NancyContext context, bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, bool? corsEnabling);

        /// <summary>
        /// 
        /// </summary>
        /// <param name="context">Context of request</param>
        /// <param name="post"> (optional)</param>
        /// <param name="apply"> (optional)</param>
        /// <param name="delete"> (optional)</param>
        /// <param name="action"> (optional)</param>
        /// <param name="location"> (optional)</param>
        /// <param name="propertylist"> (optional)</param>
        /// <param name="priorityOrder"> (optional)</param>
        /// <param name="replyEmailPatterns"> (optional)</param>
        /// <returns>ComAdobeCqSocialCommonsEmailreplyImplAndroidEmailClientProviderInfo</returns>
        ComAdobeCqSocialCommonsEmailreplyImplAndroidEmailClientProviderInfo ComAdobeCqSocialCommonsEmailreplyImplAndroidEmailClientProvider(NancyContext context, bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, int? priorityOrder, List<string> replyEmailPatterns);

        /// <summary>
        /// 
        /// </summary>
        /// <param name="context">Context of request</param>
        /// <param name="post"> (optional)</param>
        /// <param name="apply"> (optional)</param>
        /// <param name="delete"> (optional)</param>
        /// <param name="action"> (optional)</param>
        /// <param name="location"> (optional)</param>
        /// <param name="propertylist"> (optional)</param>
        /// <param name="contextPath"> (optional)</param>
        /// <returns>ComAdobeCqSocialCommonsEmailreplyImplCommentEmailBuilderImplInfo</returns>
        ComAdobeCqSocialCommonsEmailreplyImplCommentEmailBuilderImplInfo ComAdobeCqSocialCommonsEmailreplyImplCommentEmailBuilderImpl(NancyContext context, bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, string contextPath);

        /// <summary>
        /// 
        /// </summary>
        /// <param name="context">Context of request</param>
        /// <param name="post"> (optional)</param>
        /// <param name="apply"> (optional)</param>
        /// <param name="delete"> (optional)</param>
        /// <param name="action"> (optional)</param>
        /// <param name="location"> (optional)</param>
        /// <param name="propertylist"> (optional)</param>
        /// <param name="eventTopics"> (optional)</param>
        /// <returns>ComAdobeCqSocialCommonsEmailreplyImplCommentEmailEventListenerInfo</returns>
        ComAdobeCqSocialCommonsEmailreplyImplCommentEmailEventListenerInfo ComAdobeCqSocialCommonsEmailreplyImplCommentEmailEventListener(NancyContext context, bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, string eventTopics);

        /// <summary>
        /// 
        /// </summary>
        /// <param name="context">Context of request</param>
        /// <param name="post"> (optional)</param>
        /// <param name="apply"> (optional)</param>
        /// <param name="delete"> (optional)</param>
        /// <param name="action"> (optional)</param>
        /// <param name="location"> (optional)</param>
        /// <param name="propertylist"> (optional)</param>
        /// <param name="priorityOrder"> (optional)</param>
        /// <param name="replyEmailPatterns"> (optional)</param>
        /// <returns>ComAdobeCqSocialCommonsEmailreplyImplCustomEmailClientProviderInfo</returns>
        ComAdobeCqSocialCommonsEmailreplyImplCustomEmailClientProviderInfo ComAdobeCqSocialCommonsEmailreplyImplCustomEmailClientProvider(NancyContext context, bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, int? priorityOrder, List<string> replyEmailPatterns);

        /// <summary>
        /// 
        /// </summary>
        /// <param name="context">Context of request</param>
        /// <param name="post"> (optional)</param>
        /// <param name="apply"> (optional)</param>
        /// <param name="delete"> (optional)</param>
        /// <param name="action"> (optional)</param>
        /// <param name="location"> (optional)</param>
        /// <param name="propertylist"> (optional)</param>
        /// <param name="patternTime"> (optional)</param>
        /// <param name="patternNewline"> (optional)</param>
        /// <param name="patternDayOfMonth"> (optional)</param>
        /// <param name="patternMonth"> (optional)</param>
        /// <param name="patternYear"> (optional)</param>
        /// <param name="patternDate"> (optional)</param>
        /// <param name="patternDateTime"> (optional)</param>
        /// <param name="patternEmail"> (optional)</param>
        /// <returns>ComAdobeCqSocialCommonsEmailreplyImplEmailQuotedTextPatternsImpInfo</returns>
        ComAdobeCqSocialCommonsEmailreplyImplEmailQuotedTextPatternsImpInfo ComAdobeCqSocialCommonsEmailreplyImplEmailQuotedTextPatternsImp(NancyContext context, bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, string patternTime, string patternNewline, string patternDayOfMonth, string patternMonth, string patternYear, string patternDate, string patternDateTime, string patternEmail);

        /// <summary>
        /// 
        /// </summary>
        /// <param name="context">Context of request</param>
        /// <param name="post"> (optional)</param>
        /// <param name="apply"> (optional)</param>
        /// <param name="delete"> (optional)</param>
        /// <param name="action"> (optional)</param>
        /// <param name="location"> (optional)</param>
        /// <param name="propertylist"> (optional)</param>
        /// <param name="emailName"> (optional)</param>
        /// <param name="emailCreatePostFromReply"> (optional)</param>
        /// <param name="emailAddCommentIdTo"> (optional)</param>
        /// <param name="emailSubjectMaximumLength"> (optional)</param>
        /// <param name="emailReplyToAddress"> (optional)</param>
        /// <param name="emailReplyToDelimiter"> (optional)</param>
        /// <param name="emailTrackerIdPrefixInSubject"> (optional)</param>
        /// <param name="emailTrackerIdPrefixInBody"> (optional)</param>
        /// <param name="emailAsHTML"> (optional)</param>
        /// <param name="emailDefaultUserName"> (optional)</param>
        /// <param name="emailTemplatesRootPath"> (optional)</param>
        /// <returns>ComAdobeCqSocialCommonsEmailreplyImplEmailReplyConfigurationImpInfo</returns>
        ComAdobeCqSocialCommonsEmailreplyImplEmailReplyConfigurationImpInfo ComAdobeCqSocialCommonsEmailreplyImplEmailReplyConfigurationImp(NancyContext context, bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, string emailName, bool? emailCreatePostFromReply, string emailAddCommentIdTo, int? emailSubjectMaximumLength, string emailReplyToAddress, string emailReplyToDelimiter, string emailTrackerIdPrefixInSubject, string emailTrackerIdPrefixInBody, bool? emailAsHTML, string emailDefaultUserName, string emailTemplatesRootPath);

        /// <summary>
        /// 
        /// </summary>
        /// <param name="context">Context of request</param>
        /// <param name="post"> (optional)</param>
        /// <param name="apply"> (optional)</param>
        /// <param name="delete"> (optional)</param>
        /// <param name="action"> (optional)</param>
        /// <param name="location"> (optional)</param>
        /// <param name="propertylist"> (optional)</param>
        /// <param name="connectProtocol"> (optional)</param>
        /// <returns>ComAdobeCqSocialCommonsEmailreplyImplEmailReplyImporterInfo</returns>
        ComAdobeCqSocialCommonsEmailreplyImplEmailReplyImporterInfo ComAdobeCqSocialCommonsEmailreplyImplEmailReplyImporter(NancyContext context, bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, string connectProtocol);

        /// <summary>
        /// 
        /// </summary>
        /// <param name="context">Context of request</param>
        /// <param name="post"> (optional)</param>
        /// <param name="apply"> (optional)</param>
        /// <param name="delete"> (optional)</param>
        /// <param name="action"> (optional)</param>
        /// <param name="location"> (optional)</param>
        /// <param name="propertylist"> (optional)</param>
        /// <param name="priorityOrder"> (optional)</param>
        /// <param name="replyEmailPatterns"> (optional)</param>
        /// <returns>ComAdobeCqSocialCommonsEmailreplyImplGmailEmailClientProviderInfo</returns>
        ComAdobeCqSocialCommonsEmailreplyImplGmailEmailClientProviderInfo ComAdobeCqSocialCommonsEmailreplyImplGmailEmailClientProvider(NancyContext context, bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, int? priorityOrder, List<string> replyEmailPatterns);

        /// <summary>
        /// 
        /// </summary>
        /// <param name="context">Context of request</param>
        /// <param name="post"> (optional)</param>
        /// <param name="apply"> (optional)</param>
        /// <param name="delete"> (optional)</param>
        /// <param name="action"> (optional)</param>
        /// <param name="location"> (optional)</param>
        /// <param name="propertylist"> (optional)</param>
        /// <param name="priorityOrder"> (optional)</param>
        /// <param name="replyEmailPatterns"> (optional)</param>
        /// <returns>ComAdobeCqSocialCommonsEmailreplyImplIOSEmailClientProviderInfo</returns>
        ComAdobeCqSocialCommonsEmailreplyImplIOSEmailClientProviderInfo ComAdobeCqSocialCommonsEmailreplyImplIOSEmailClientProvider(NancyContext context, bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, int? priorityOrder, List<string> replyEmailPatterns);

        /// <summary>
        /// 
        /// </summary>
        /// <param name="context">Context of request</param>
        /// <param name="post"> (optional)</param>
        /// <param name="apply"> (optional)</param>
        /// <param name="delete"> (optional)</param>
        /// <param name="action"> (optional)</param>
        /// <param name="location"> (optional)</param>
        /// <param name="propertylist"> (optional)</param>
        /// <param name="priorityOrder"> (optional)</param>
        /// <param name="replyEmailPatterns"> (optional)</param>
        /// <returns>ComAdobeCqSocialCommonsEmailreplyImplMacmailEmailClientProviderInfo</returns>
        ComAdobeCqSocialCommonsEmailreplyImplMacmailEmailClientProviderInfo ComAdobeCqSocialCommonsEmailreplyImplMacmailEmailClientProvider(NancyContext context, bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, int? priorityOrder, List<string> replyEmailPatterns);

        /// <summary>
        /// 
        /// </summary>
        /// <param name="context">Context of request</param>
        /// <param name="post"> (optional)</param>
        /// <param name="apply"> (optional)</param>
        /// <param name="delete"> (optional)</param>
        /// <param name="action"> (optional)</param>
        /// <param name="location"> (optional)</param>
        /// <param name="propertylist"> (optional)</param>
        /// <param name="priorityOrder"> (optional)</param>
        /// <param name="replyEmailPatterns"> (optional)</param>
        /// <returns>ComAdobeCqSocialCommonsEmailreplyImplOutLookEmailClientProviderInfo</returns>
        ComAdobeCqSocialCommonsEmailreplyImplOutLookEmailClientProviderInfo ComAdobeCqSocialCommonsEmailreplyImplOutLookEmailClientProvider(NancyContext context, bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, int? priorityOrder, List<string> replyEmailPatterns);

        /// <summary>
        /// 
        /// </summary>
        /// <param name="context">Context of request</param>
        /// <param name="post"> (optional)</param>
        /// <param name="apply"> (optional)</param>
        /// <param name="delete"> (optional)</param>
        /// <param name="action"> (optional)</param>
        /// <param name="location"> (optional)</param>
        /// <param name="propertylist"> (optional)</param>
        /// <param name="replyEmailPatterns"> (optional)</param>
        /// <param name="priorityOrder"> (optional)</param>
        /// <returns>ComAdobeCqSocialCommonsEmailreplyImplUnknownEmailClientProviderInfo</returns>
        ComAdobeCqSocialCommonsEmailreplyImplUnknownEmailClientProviderInfo ComAdobeCqSocialCommonsEmailreplyImplUnknownEmailClientProvider(NancyContext context, bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, List<string> replyEmailPatterns, int? priorityOrder);

        /// <summary>
        /// 
        /// </summary>
        /// <param name="context">Context of request</param>
        /// <param name="post"> (optional)</param>
        /// <param name="apply"> (optional)</param>
        /// <param name="delete"> (optional)</param>
        /// <param name="action"> (optional)</param>
        /// <param name="location"> (optional)</param>
        /// <param name="propertylist"> (optional)</param>
        /// <param name="priorityOrder"> (optional)</param>
        /// <param name="replyEmailPatterns"> (optional)</param>
        /// <returns>ComAdobeCqSocialCommonsEmailreplyImplYahooEmailClientProviderInfo</returns>
        ComAdobeCqSocialCommonsEmailreplyImplYahooEmailClientProviderInfo ComAdobeCqSocialCommonsEmailreplyImplYahooEmailClientProvider(NancyContext context, bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, int? priorityOrder, List<string> replyEmailPatterns);

        /// <summary>
        /// 
        /// </summary>
        /// <param name="context">Context of request</param>
        /// <param name="post"> (optional)</param>
        /// <param name="apply"> (optional)</param>
        /// <param name="delete"> (optional)</param>
        /// <param name="action"> (optional)</param>
        /// <param name="location"> (optional)</param>
        /// <param name="propertylist"> (optional)</param>
        /// <param name="numberOfDays"> (optional)</param>
        /// <param name="ageOfFile"> (optional)</param>
        /// <returns>ComAdobeCqSocialCommonsMaintainanceImplDeleteTempUGCImageUploadInfo</returns>
        ComAdobeCqSocialCommonsMaintainanceImplDeleteTempUGCImageUploadInfo ComAdobeCqSocialCommonsMaintainanceImplDeleteTempUGCImageUpload(NancyContext context, bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, int? numberOfDays, int? ageOfFile);

        /// <summary>
        /// 
        /// </summary>
        /// <param name="context">Context of request</param>
        /// <param name="post"> (optional)</param>
        /// <param name="apply"> (optional)</param>
        /// <param name="delete"> (optional)</param>
        /// <param name="action"> (optional)</param>
        /// <param name="location"> (optional)</param>
        /// <param name="propertylist"> (optional)</param>
        /// <param name="eventTopics"> (optional)</param>
        /// <param name="eventFilter"> (optional)</param>
        /// <param name="verbs"> (optional)</param>
        /// <returns>ComAdobeCqSocialCommonsUgclimiterImplUGCLimiterServiceImplInfo</returns>
        ComAdobeCqSocialCommonsUgclimiterImplUGCLimiterServiceImplInfo ComAdobeCqSocialCommonsUgclimiterImplUGCLimiterServiceImpl(NancyContext context, bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, string eventTopics, string eventFilter, List<string> verbs);

        /// <summary>
        /// 
        /// </summary>
        /// <param name="context">Context of request</param>
        /// <param name="post"> (optional)</param>
        /// <param name="apply"> (optional)</param>
        /// <param name="delete"> (optional)</param>
        /// <param name="action"> (optional)</param>
        /// <param name="location"> (optional)</param>
        /// <param name="propertylist"> (optional)</param>
        /// <param name="enable"> (optional)</param>
        /// <param name="uGCLimit"> (optional)</param>
        /// <param name="ugcLimitDuration"> (optional)</param>
        /// <param name="domains"> (optional)</param>
        /// <param name="toList"> (optional)</param>
        /// <returns>ComAdobeCqSocialCommonsUgclimitsconfigImplCommunityUserUGCLimitInfo</returns>
        ComAdobeCqSocialCommonsUgclimitsconfigImplCommunityUserUGCLimitInfo ComAdobeCqSocialCommonsUgclimitsconfigImplCommunityUserUGCLimit(NancyContext context, bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, bool? enable, int? uGCLimit, int? ugcLimitDuration, List<string> domains, List<string> toList);

        /// <summary>
        /// 
        /// </summary>
        /// <param name="context">Context of request</param>
        /// <param name="post"> (optional)</param>
        /// <param name="apply"> (optional)</param>
        /// <param name="delete"> (optional)</param>
        /// <param name="action"> (optional)</param>
        /// <param name="location"> (optional)</param>
        /// <param name="propertylist"> (optional)</param>
        /// <param name="oauthProviderId"> (optional)</param>
        /// <param name="oauthCloudConfigRoot"> (optional)</param>
        /// <param name="providerConfigRoot"> (optional)</param>
        /// <param name="providerConfigCreateTagsEnabled"> (optional)</param>
        /// <param name="providerConfigUserFolder"> (optional)</param>
        /// <param name="providerConfigFacebookFetchFields"> (optional)</param>
        /// <param name="providerConfigFacebookFields"> (optional)</param>
        /// <param name="providerConfigRefreshUserdataEnabled"> (optional)</param>
        /// <returns>ComAdobeCqSocialConnectOauthImplFacebookProviderImplInfo</returns>
        ComAdobeCqSocialConnectOauthImplFacebookProviderImplInfo ComAdobeCqSocialConnectOauthImplFacebookProviderImpl(NancyContext context, bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, string oauthProviderId, string oauthCloudConfigRoot, string providerConfigRoot, bool? providerConfigCreateTagsEnabled, string providerConfigUserFolder, bool? providerConfigFacebookFetchFields, List<string> providerConfigFacebookFields, bool? providerConfigRefreshUserdataEnabled);

        /// <summary>
        /// 
        /// </summary>
        /// <param name="context">Context of request</param>
        /// <param name="post"> (optional)</param>
        /// <param name="apply"> (optional)</param>
        /// <param name="delete"> (optional)</param>
        /// <param name="action"> (optional)</param>
        /// <param name="location"> (optional)</param>
        /// <param name="propertylist"> (optional)</param>
        /// <param name="path"> (optional)</param>
        /// <param name="serviceRanking"> (optional)</param>
        /// <returns>ComAdobeCqSocialConnectOauthImplSocialOAuthAuthenticationHandleInfo</returns>
        ComAdobeCqSocialConnectOauthImplSocialOAuthAuthenticationHandleInfo ComAdobeCqSocialConnectOauthImplSocialOAuthAuthenticationHandle(NancyContext context, bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, List<string> path, int? serviceRanking);

        /// <summary>
        /// 
        /// </summary>
        /// <param name="context">Context of request</param>
        /// <param name="post"> (optional)</param>
        /// <param name="apply"> (optional)</param>
        /// <param name="delete"> (optional)</param>
        /// <param name="action"> (optional)</param>
        /// <param name="location"> (optional)</param>
        /// <param name="propertylist"> (optional)</param>
        /// <param name="facebook"> (optional)</param>
        /// <param name="twitter"> (optional)</param>
        /// <param name="providerConfigUserFolder"> (optional)</param>
        /// <returns>ComAdobeCqSocialConnectOauthImplSocialOAuthUserProfileMapperInfo</returns>
        ComAdobeCqSocialConnectOauthImplSocialOAuthUserProfileMapperInfo ComAdobeCqSocialConnectOauthImplSocialOAuthUserProfileMapper(NancyContext context, bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, List<string> facebook, List<string> twitter, string providerConfigUserFolder);

        /// <summary>
        /// 
        /// </summary>
        /// <param name="context">Context of request</param>
        /// <param name="post"> (optional)</param>
        /// <param name="apply"> (optional)</param>
        /// <param name="delete"> (optional)</param>
        /// <param name="action"> (optional)</param>
        /// <param name="location"> (optional)</param>
        /// <param name="propertylist"> (optional)</param>
        /// <param name="oauthProviderId"> (optional)</param>
        /// <param name="oauthCloudConfigRoot"> (optional)</param>
        /// <param name="providerConfigRoot"> (optional)</param>
        /// <param name="providerConfigUserFolder"> (optional)</param>
        /// <param name="providerConfigTwitterEnableParams"> (optional)</param>
        /// <param name="providerConfigTwitterParams"> (optional)</param>
        /// <param name="providerConfigRefreshUserdataEnabled"> (optional)</param>
        /// <returns>ComAdobeCqSocialConnectOauthImplTwitterProviderImplInfo</returns>
        ComAdobeCqSocialConnectOauthImplTwitterProviderImplInfo ComAdobeCqSocialConnectOauthImplTwitterProviderImpl(NancyContext context, bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, string oauthProviderId, string oauthCloudConfigRoot, string providerConfigRoot, string providerConfigUserFolder, bool? providerConfigTwitterEnableParams, List<string> providerConfigTwitterParams, bool? providerConfigRefreshUserdataEnabled);

        /// <summary>
        /// 
        /// </summary>
        /// <param name="context">Context of request</param>
        /// <param name="post"> (optional)</param>
        /// <param name="apply"> (optional)</param>
        /// <param name="delete"> (optional)</param>
        /// <param name="action"> (optional)</param>
        /// <param name="location"> (optional)</param>
        /// <param name="propertylist"> (optional)</param>
        /// <param name="cqSocialContentFragmentsServicesEnabled"> (optional)</param>
        /// <param name="cqSocialContentFragmentsServicesWaitTimeSeconds"> (optional)</param>
        /// <returns>ComAdobeCqSocialContentFragmentsServicesImplCommunitiesFragmenInfo</returns>
        ComAdobeCqSocialContentFragmentsServicesImplCommunitiesFragmenInfo ComAdobeCqSocialContentFragmentsServicesImplCommunitiesFragmen(NancyContext context, bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, bool? cqSocialContentFragmentsServicesEnabled, int? cqSocialContentFragmentsServicesWaitTimeSeconds);

        /// <summary>
        /// 
        /// </summary>
        /// <param name="context">Context of request</param>
        /// <param name="post"> (optional)</param>
        /// <param name="apply"> (optional)</param>
        /// <param name="delete"> (optional)</param>
        /// <param name="action"> (optional)</param>
        /// <param name="location"> (optional)</param>
        /// <param name="propertylist"> (optional)</param>
        /// <param name="versionId"> (optional)</param>
        /// <param name="cacheOn"> (optional)</param>
        /// <param name="concurrencyLevel"> (optional)</param>
        /// <param name="cacheStartSize"> (optional)</param>
        /// <param name="cacheTtl"> (optional)</param>
        /// <param name="cacheSize"> (optional)</param>
        /// <param name="timeLimit"> (optional)</param>
        /// <returns>ComAdobeCqSocialDatastoreAsImplASResourceProviderFactoryInfo</returns>
        ComAdobeCqSocialDatastoreAsImplASResourceProviderFactoryInfo ComAdobeCqSocialDatastoreAsImplASResourceProviderFactory(NancyContext context, bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, string versionId, bool? cacheOn, int? concurrencyLevel, int? cacheStartSize, int? cacheTtl, int? cacheSize, int? timeLimit);

        /// <summary>
        /// 
        /// </summary>
        /// <param name="context">Context of request</param>
        /// <param name="post"> (optional)</param>
        /// <param name="apply"> (optional)</param>
        /// <param name="delete"> (optional)</param>
        /// <param name="action"> (optional)</param>
        /// <param name="location"> (optional)</param>
        /// <param name="propertylist"> (optional)</param>
        /// <param name="solrZkTimeout"> (optional)</param>
        /// <param name="solrCommit"> (optional)</param>
        /// <param name="cacheOn"> (optional)</param>
        /// <param name="concurrencyLevel"> (optional)</param>
        /// <param name="cacheStartSize"> (optional)</param>
        /// <param name="cacheTtl"> (optional)</param>
        /// <param name="cacheSize"> (optional)</param>
        /// <returns>ComAdobeCqSocialDatastoreOpImplSocialMSResourceProviderFactoryInfo</returns>
        ComAdobeCqSocialDatastoreOpImplSocialMSResourceProviderFactoryInfo ComAdobeCqSocialDatastoreOpImplSocialMSResourceProviderFactory(NancyContext context, bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, string solrZkTimeout, string solrCommit, bool? cacheOn, int? concurrencyLevel, int? cacheStartSize, int? cacheTtl, int? cacheSize);

        /// <summary>
        /// 
        /// </summary>
        /// <param name="context">Context of request</param>
        /// <param name="post"> (optional)</param>
        /// <param name="apply"> (optional)</param>
        /// <param name="delete"> (optional)</param>
        /// <param name="action"> (optional)</param>
        /// <param name="location"> (optional)</param>
        /// <param name="propertylist"> (optional)</param>
        /// <param name="solrZkTimeout"> (optional)</param>
        /// <param name="solrCommit"> (optional)</param>
        /// <param name="cacheOn"> (optional)</param>
        /// <param name="concurrencyLevel"> (optional)</param>
        /// <param name="cacheStartSize"> (optional)</param>
        /// <param name="cacheTtl"> (optional)</param>
        /// <param name="cacheSize"> (optional)</param>
        /// <returns>ComAdobeCqSocialDatastoreRdbImplSocialRDBResourceProviderFactorInfo</returns>
        ComAdobeCqSocialDatastoreRdbImplSocialRDBResourceProviderFactorInfo ComAdobeCqSocialDatastoreRdbImplSocialRDBResourceProviderFactor(NancyContext context, bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, string solrZkTimeout, string solrCommit, bool? cacheOn, int? concurrencyLevel, int? cacheStartSize, int? cacheTtl, int? cacheSize);

        /// <summary>
        /// 
        /// </summary>
        /// <param name="context">Context of request</param>
        /// <param name="post"> (optional)</param>
        /// <param name="apply"> (optional)</param>
        /// <param name="delete"> (optional)</param>
        /// <param name="action"> (optional)</param>
        /// <param name="location"> (optional)</param>
        /// <param name="propertylist"> (optional)</param>
        /// <param name="isMemberCheck"> (optional)</param>
        /// <returns>ComAdobeCqSocialEnablementAdaptorsEnablementLearningPathAdaptorFInfo</returns>
        ComAdobeCqSocialEnablementAdaptorsEnablementLearningPathAdaptorFInfo ComAdobeCqSocialEnablementAdaptorsEnablementLearningPathAdaptorF(NancyContext context, bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, bool? isMemberCheck);

        /// <summary>
        /// 
        /// </summary>
        /// <param name="context">Context of request</param>
        /// <param name="post"> (optional)</param>
        /// <param name="apply"> (optional)</param>
        /// <param name="delete"> (optional)</param>
        /// <param name="action"> (optional)</param>
        /// <param name="location"> (optional)</param>
        /// <param name="propertylist"> (optional)</param>
        /// <param name="isMemberCheck"> (optional)</param>
        /// <returns>ComAdobeCqSocialEnablementAdaptorsEnablementResourceAdaptorFactoInfo</returns>
        ComAdobeCqSocialEnablementAdaptorsEnablementResourceAdaptorFactoInfo ComAdobeCqSocialEnablementAdaptorsEnablementResourceAdaptorFacto(NancyContext context, bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, bool? isMemberCheck);

        /// <summary>
        /// 
        /// </summary>
        /// <param name="context">Context of request</param>
        /// <param name="post"> (optional)</param>
        /// <param name="apply"> (optional)</param>
        /// <param name="delete"> (optional)</param>
        /// <param name="action"> (optional)</param>
        /// <param name="location"> (optional)</param>
        /// <param name="propertylist"> (optional)</param>
        /// <param name="fieldWhitelist"> (optional)</param>
        /// <returns>ComAdobeCqSocialEnablementLearningpathEndpointsImplEnablementLInfo</returns>
        ComAdobeCqSocialEnablementLearningpathEndpointsImplEnablementLInfo ComAdobeCqSocialEnablementLearningpathEndpointsImplEnablementL(NancyContext context, bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, List<string> fieldWhitelist);

        /// <summary>
        /// 
        /// </summary>
        /// <param name="context">Context of request</param>
        /// <param name="post"> (optional)</param>
        /// <param name="apply"> (optional)</param>
        /// <param name="delete"> (optional)</param>
        /// <param name="action"> (optional)</param>
        /// <param name="location"> (optional)</param>
        /// <param name="propertylist"> (optional)</param>
        /// <param name="fieldWhitelist"> (optional)</param>
        /// <returns>ComAdobeCqSocialEnablementResourceEndpointsImplEnablementResouInfo</returns>
        ComAdobeCqSocialEnablementResourceEndpointsImplEnablementResouInfo ComAdobeCqSocialEnablementResourceEndpointsImplEnablementResou(NancyContext context, bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, List<string> fieldWhitelist);

        /// <summary>
        /// 
        /// </summary>
        /// <param name="context">Context of request</param>
        /// <param name="post"> (optional)</param>
        /// <param name="apply"> (optional)</param>
        /// <param name="delete"> (optional)</param>
        /// <param name="action"> (optional)</param>
        /// <param name="location"> (optional)</param>
        /// <param name="propertylist"> (optional)</param>
        /// <param name="serviceRanking"> (optional)</param>
        /// <returns>ComAdobeCqSocialEnablementServicesImplAuthorMarkerImplInfo</returns>
        ComAdobeCqSocialEnablementServicesImplAuthorMarkerImplInfo ComAdobeCqSocialEnablementServicesImplAuthorMarkerImpl(NancyContext context, bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, int? serviceRanking);

        /// <summary>
        /// 
        /// </summary>
        /// <param name="context">Context of request</param>
        /// <param name="post"> (optional)</param>
        /// <param name="apply"> (optional)</param>
        /// <param name="delete"> (optional)</param>
        /// <param name="action"> (optional)</param>
        /// <param name="location"> (optional)</param>
        /// <param name="propertylist"> (optional)</param>
        /// <param name="slingServletSelectors"> (optional)</param>
        /// <param name="slingServletExtensions"> (optional)</param>
        /// <returns>ComAdobeCqSocialFilelibraryClientEndpointsFilelibraryDownloadGeInfo</returns>
        ComAdobeCqSocialFilelibraryClientEndpointsFilelibraryDownloadGeInfo ComAdobeCqSocialFilelibraryClientEndpointsFilelibraryDownloadGe(NancyContext context, bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, string slingServletSelectors, string slingServletExtensions);

        /// <summary>
        /// 
        /// </summary>
        /// <param name="context">Context of request</param>
        /// <param name="post"> (optional)</param>
        /// <param name="apply"> (optional)</param>
        /// <param name="delete"> (optional)</param>
        /// <param name="action"> (optional)</param>
        /// <param name="location"> (optional)</param>
        /// <param name="propertylist"> (optional)</param>
        /// <param name="fieldWhitelist"> (optional)</param>
        /// <param name="attachmentTypeBlacklist"> (optional)</param>
        /// <returns>ComAdobeCqSocialFilelibraryClientEndpointsImplFileLibraryOperaInfo</returns>
        ComAdobeCqSocialFilelibraryClientEndpointsImplFileLibraryOperaInfo ComAdobeCqSocialFilelibraryClientEndpointsImplFileLibraryOpera(NancyContext context, bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, List<string> fieldWhitelist, List<string> attachmentTypeBlacklist);

        /// <summary>
        /// 
        /// </summary>
        /// <param name="context">Context of request</param>
        /// <param name="post"> (optional)</param>
        /// <param name="apply"> (optional)</param>
        /// <param name="delete"> (optional)</param>
        /// <param name="action"> (optional)</param>
        /// <param name="location"> (optional)</param>
        /// <param name="propertylist"> (optional)</param>
        /// <param name="fieldWhitelist"> (optional)</param>
        /// <param name="attachmentTypeBlacklist"> (optional)</param>
        /// <returns>ComAdobeCqSocialForumClientEndpointsImplForumOperationsServiceInfo</returns>
        ComAdobeCqSocialForumClientEndpointsImplForumOperationsServiceInfo ComAdobeCqSocialForumClientEndpointsImplForumOperationsService(NancyContext context, bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, List<string> fieldWhitelist, List<string> attachmentTypeBlacklist);

        /// <summary>
        /// 
        /// </summary>
        /// <param name="context">Context of request</param>
        /// <param name="post"> (optional)</param>
        /// <param name="apply"> (optional)</param>
        /// <param name="delete"> (optional)</param>
        /// <param name="action"> (optional)</param>
        /// <param name="location"> (optional)</param>
        /// <param name="propertylist"> (optional)</param>
        /// <param name="extensionOrder"> (optional)</param>
        /// <param name="flushForumontopic"> (optional)</param>
        /// <returns>ComAdobeCqSocialForumDispatcherImplFlushOperationsInfo</returns>
        ComAdobeCqSocialForumDispatcherImplFlushOperationsInfo ComAdobeCqSocialForumDispatcherImplFlushOperations(NancyContext context, bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, int? extensionOrder, bool? flushForumontopic);

        /// <summary>
        /// 
        /// </summary>
        /// <param name="context">Context of request</param>
        /// <param name="post"> (optional)</param>
        /// <param name="apply"> (optional)</param>
        /// <param name="delete"> (optional)</param>
        /// <param name="action"> (optional)</param>
        /// <param name="location"> (optional)</param>
        /// <param name="propertylist"> (optional)</param>
        /// <param name="groupListingPaginationEnable"> (optional)</param>
        /// <param name="groupListingLazyloadingEnable"> (optional)</param>
        /// <param name="pageSize"> (optional)</param>
        /// <param name="priority"> (optional)</param>
        /// <returns>ComAdobeCqSocialGroupClientImplCommunityGroupCollectionComponenInfo</returns>
        ComAdobeCqSocialGroupClientImplCommunityGroupCollectionComponenInfo ComAdobeCqSocialGroupClientImplCommunityGroupCollectionComponen(NancyContext context, bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, bool? groupListingPaginationEnable, bool? groupListingLazyloadingEnable, int? pageSize, int? priority);

        /// <summary>
        /// 
        /// </summary>
        /// <param name="context">Context of request</param>
        /// <param name="post"> (optional)</param>
        /// <param name="apply"> (optional)</param>
        /// <param name="delete"> (optional)</param>
        /// <param name="action"> (optional)</param>
        /// <param name="location"> (optional)</param>
        /// <param name="propertylist"> (optional)</param>
        /// <param name="maxWaitTime"> (optional)</param>
        /// <param name="minWaitBetweenRetries"> (optional)</param>
        /// <returns>ComAdobeCqSocialGroupImplGroupServiceImplInfo</returns>
        ComAdobeCqSocialGroupImplGroupServiceImplInfo ComAdobeCqSocialGroupImplGroupServiceImpl(NancyContext context, bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, int? maxWaitTime, int? minWaitBetweenRetries);

        /// <summary>
        /// 
        /// </summary>
        /// <param name="context">Context of request</param>
        /// <param name="post"> (optional)</param>
        /// <param name="apply"> (optional)</param>
        /// <param name="delete"> (optional)</param>
        /// <param name="action"> (optional)</param>
        /// <param name="location"> (optional)</param>
        /// <param name="propertylist"> (optional)</param>
        /// <param name="parameterGuavaCacheEnabled"> (optional)</param>
        /// <param name="parameterGuavaCacheParams"> (optional)</param>
        /// <param name="parameterGuavaCacheReload"> (optional)</param>
        /// <param name="serviceRanking"> (optional)</param>
        /// <returns>ComAdobeCqSocialHandlebarsGuavaTemplateCacheImplInfo</returns>
        ComAdobeCqSocialHandlebarsGuavaTemplateCacheImplInfo ComAdobeCqSocialHandlebarsGuavaTemplateCacheImpl(NancyContext context, bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, bool? parameterGuavaCacheEnabled, string parameterGuavaCacheParams, bool? parameterGuavaCacheReload, int? serviceRanking);

        /// <summary>
        /// 
        /// </summary>
        /// <param name="context">Context of request</param>
        /// <param name="post"> (optional)</param>
        /// <param name="apply"> (optional)</param>
        /// <param name="delete"> (optional)</param>
        /// <param name="action"> (optional)</param>
        /// <param name="location"> (optional)</param>
        /// <param name="propertylist"> (optional)</param>
        /// <param name="fieldWhitelist"> (optional)</param>
        /// <param name="attachmentTypeBlacklist"> (optional)</param>
        /// <returns>ComAdobeCqSocialIdeationClientEndpointsImplIdeationOperationsSInfo</returns>
        ComAdobeCqSocialIdeationClientEndpointsImplIdeationOperationsSInfo ComAdobeCqSocialIdeationClientEndpointsImplIdeationOperationsS(NancyContext context, bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, List<string> fieldWhitelist, List<string> attachmentTypeBlacklist);

        /// <summary>
        /// 
        /// </summary>
        /// <param name="context">Context of request</param>
        /// <param name="post"> (optional)</param>
        /// <param name="apply"> (optional)</param>
        /// <param name="delete"> (optional)</param>
        /// <param name="action"> (optional)</param>
        /// <param name="location"> (optional)</param>
        /// <param name="propertylist"> (optional)</param>
        /// <param name="fieldWhitelist"> (optional)</param>
        /// <param name="attachmentTypeBlacklist"> (optional)</param>
        /// <returns>ComAdobeCqSocialJournalClientEndpointsImplJournalOperationsSerInfo</returns>
        ComAdobeCqSocialJournalClientEndpointsImplJournalOperationsSerInfo ComAdobeCqSocialJournalClientEndpointsImplJournalOperationsSer(NancyContext context, bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, List<string> fieldWhitelist, List<string> attachmentTypeBlacklist);

        /// <summary>
        /// 
        /// </summary>
        /// <param name="context">Context of request</param>
        /// <param name="post"> (optional)</param>
        /// <param name="apply"> (optional)</param>
        /// <param name="delete"> (optional)</param>
        /// <param name="action"> (optional)</param>
        /// <param name="location"> (optional)</param>
        /// <param name="propertylist"> (optional)</param>
        /// <param name="fieldWhitelist"> (optional)</param>
        /// <returns>ComAdobeCqSocialMembersEndpointsImplCommunityMemberGroupProfileInfo</returns>
        ComAdobeCqSocialMembersEndpointsImplCommunityMemberGroupProfileInfo ComAdobeCqSocialMembersEndpointsImplCommunityMemberGroupProfile(NancyContext context, bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, List<string> fieldWhitelist);

        /// <summary>
        /// 
        /// </summary>
        /// <param name="context">Context of request</param>
        /// <param name="post"> (optional)</param>
        /// <param name="apply"> (optional)</param>
        /// <param name="delete"> (optional)</param>
        /// <param name="action"> (optional)</param>
        /// <param name="location"> (optional)</param>
        /// <param name="propertylist"> (optional)</param>
        /// <param name="fieldWhitelist"> (optional)</param>
        /// <returns>ComAdobeCqSocialMembersEndpointsImplCommunityMemberUserProfileOInfo</returns>
        ComAdobeCqSocialMembersEndpointsImplCommunityMemberUserProfileOInfo ComAdobeCqSocialMembersEndpointsImplCommunityMemberUserProfileO(NancyContext context, bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, List<string> fieldWhitelist);

        /// <summary>
        /// 
        /// </summary>
        /// <param name="context">Context of request</param>
        /// <param name="post"> (optional)</param>
        /// <param name="apply"> (optional)</param>
        /// <param name="delete"> (optional)</param>
        /// <param name="action"> (optional)</param>
        /// <param name="location"> (optional)</param>
        /// <param name="propertylist"> (optional)</param>
        /// <param name="everyoneLimit"> (optional)</param>
        /// <param name="priority"> (optional)</param>
        /// <returns>ComAdobeCqSocialMembersImplCommunityMemberGroupProfileComponentFInfo</returns>
        ComAdobeCqSocialMembersImplCommunityMemberGroupProfileComponentFInfo ComAdobeCqSocialMembersImplCommunityMemberGroupProfileComponentF(NancyContext context, bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, int? everyoneLimit, int? priority);

        /// <summary>
        /// 
        /// </summary>
        /// <param name="context">Context of request</param>
        /// <param name="post"> (optional)</param>
        /// <param name="apply"> (optional)</param>
        /// <param name="delete"> (optional)</param>
        /// <param name="action"> (optional)</param>
        /// <param name="location"> (optional)</param>
        /// <param name="propertylist"> (optional)</param>
        /// <param name="messageProperties"> (optional)</param>
        /// <param name="messageBoxSizeLimit"> (optional)</param>
        /// <param name="messageCountLimit"> (optional)</param>
        /// <param name="notifyFailure"> (optional)</param>
        /// <param name="failureMessageFrom"> (optional)</param>
        /// <param name="failureTemplatePath"> (optional)</param>
        /// <param name="maxRetries"> (optional)</param>
        /// <param name="minWaitBetweenRetries"> (optional)</param>
        /// <param name="countUpdatePoolSize"> (optional)</param>
        /// <param name="inboxPath"> (optional)</param>
        /// <param name="sentitemsPath"> (optional)</param>
        /// <param name="supportAttachments"> (optional)</param>
        /// <param name="supportGroupMessaging"> (optional)</param>
        /// <param name="maxTotalRecipients"> (optional)</param>
        /// <param name="batchSize"> (optional)</param>
        /// <param name="maxTotalAttachmentSize"> (optional)</param>
        /// <param name="attachmentTypeBlacklist"> (optional)</param>
        /// <param name="allowedAttachmentTypes"> (optional)</param>
        /// <param name="serviceSelector"> (optional)</param>
        /// <param name="fieldWhitelist"> (optional)</param>
        /// <returns>ComAdobeCqSocialMessagingClientEndpointsImplMessagingOperationInfo</returns>
        ComAdobeCqSocialMessagingClientEndpointsImplMessagingOperationInfo ComAdobeCqSocialMessagingClientEndpointsImplMessagingOperation(NancyContext context, bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, List<string> messageProperties, int? messageBoxSizeLimit, int? messageCountLimit, bool? notifyFailure, string failureMessageFrom, string failureTemplatePath, int? maxRetries, int? minWaitBetweenRetries, int? countUpdatePoolSize, string inboxPath, string sentitemsPath, bool? supportAttachments, bool? supportGroupMessaging, int? maxTotalRecipients, int? batchSize, int? maxTotalAttachmentSize, List<string> attachmentTypeBlacklist, List<string> allowedAttachmentTypes, string serviceSelector, List<string> fieldWhitelist);

        /// <summary>
        /// 
        /// </summary>
        /// <param name="context">Context of request</param>
        /// <param name="post"> (optional)</param>
        /// <param name="apply"> (optional)</param>
        /// <param name="delete"> (optional)</param>
        /// <param name="action"> (optional)</param>
        /// <param name="location"> (optional)</param>
        /// <param name="propertylist"> (optional)</param>
        /// <param name="resourceTypeFilters"> (optional)</param>
        /// <param name="priority"> (optional)</param>
        /// <returns>ComAdobeCqSocialModerationDashboardApiFilterGroupSocialComponenInfo</returns>
        ComAdobeCqSocialModerationDashboardApiFilterGroupSocialComponenInfo ComAdobeCqSocialModerationDashboardApiFilterGroupSocialComponen(NancyContext context, bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, List<string> resourceTypeFilters, int? priority);

        /// <summary>
        /// 
        /// </summary>
        /// <param name="context">Context of request</param>
        /// <param name="post"> (optional)</param>
        /// <param name="apply"> (optional)</param>
        /// <param name="delete"> (optional)</param>
        /// <param name="action"> (optional)</param>
        /// <param name="location"> (optional)</param>
        /// <param name="propertylist"> (optional)</param>
        /// <param name="priority"> (optional)</param>
        /// <returns>ComAdobeCqSocialModerationDashboardApiModerationDashboardSocialInfo</returns>
        ComAdobeCqSocialModerationDashboardApiModerationDashboardSocialInfo ComAdobeCqSocialModerationDashboardApiModerationDashboardSocial(NancyContext context, bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, int? priority);

        /// <summary>
        /// 
        /// </summary>
        /// <param name="context">Context of request</param>
        /// <param name="post"> (optional)</param>
        /// <param name="apply"> (optional)</param>
        /// <param name="delete"> (optional)</param>
        /// <param name="action"> (optional)</param>
        /// <param name="location"> (optional)</param>
        /// <param name="propertylist"> (optional)</param>
        /// <param name="priority"> (optional)</param>
        /// <returns>ComAdobeCqSocialModerationDashboardApiUserDetailsSocialComponenInfo</returns>
        ComAdobeCqSocialModerationDashboardApiUserDetailsSocialComponenInfo ComAdobeCqSocialModerationDashboardApiUserDetailsSocialComponen(NancyContext context, bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, int? priority);

        /// <summary>
        /// 
        /// </summary>
        /// <param name="context">Context of request</param>
        /// <param name="post"> (optional)</param>
        /// <param name="apply"> (optional)</param>
        /// <param name="delete"> (optional)</param>
        /// <param name="action"> (optional)</param>
        /// <param name="location"> (optional)</param>
        /// <param name="propertylist"> (optional)</param>
        /// <param name="resourceTypeFilters"> (optional)</param>
        /// <param name="priority"> (optional)</param>
        /// <returns>ComAdobeCqSocialModerationDashboardInternalImplFilterGroupSociInfo</returns>
        ComAdobeCqSocialModerationDashboardInternalImplFilterGroupSociInfo ComAdobeCqSocialModerationDashboardInternalImplFilterGroupSoci(NancyContext context, bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, List<string> resourceTypeFilters, int? priority);

        /// <summary>
        /// 
        /// </summary>
        /// <param name="context">Context of request</param>
        /// <param name="post"> (optional)</param>
        /// <param name="apply"> (optional)</param>
        /// <param name="delete"> (optional)</param>
        /// <param name="action"> (optional)</param>
        /// <param name="location"> (optional)</param>
        /// <param name="propertylist"> (optional)</param>
        /// <param name="eventTopics"> (optional)</param>
        /// <param name="eventFilter"> (optional)</param>
        /// <returns>ComAdobeCqSocialNotificationsImplMentionsRouterInfo</returns>
        ComAdobeCqSocialNotificationsImplMentionsRouterInfo ComAdobeCqSocialNotificationsImplMentionsRouter(NancyContext context, bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, string eventTopics, string eventFilter);

        /// <summary>
        /// 
        /// </summary>
        /// <param name="context">Context of request</param>
        /// <param name="post"> (optional)</param>
        /// <param name="apply"> (optional)</param>
        /// <param name="delete"> (optional)</param>
        /// <param name="action"> (optional)</param>
        /// <param name="location"> (optional)</param>
        /// <param name="propertylist"> (optional)</param>
        /// <param name="maxUnreadNotificationCount"> (optional)</param>
        /// <returns>ComAdobeCqSocialNotificationsImplNotificationManagerImplInfo</returns>
        ComAdobeCqSocialNotificationsImplNotificationManagerImplInfo ComAdobeCqSocialNotificationsImplNotificationManagerImpl(NancyContext context, bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, int? maxUnreadNotificationCount);

        /// <summary>
        /// 
        /// </summary>
        /// <param name="context">Context of request</param>
        /// <param name="post"> (optional)</param>
        /// <param name="apply"> (optional)</param>
        /// <param name="delete"> (optional)</param>
        /// <param name="action"> (optional)</param>
        /// <param name="location"> (optional)</param>
        /// <param name="propertylist"> (optional)</param>
        /// <param name="eventTopics"> (optional)</param>
        /// <param name="eventFilter"> (optional)</param>
        /// <returns>ComAdobeCqSocialNotificationsImplNotificationsRouterInfo</returns>
        ComAdobeCqSocialNotificationsImplNotificationsRouterInfo ComAdobeCqSocialNotificationsImplNotificationsRouter(NancyContext context, bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, string eventTopics, string eventFilter);

        /// <summary>
        /// 
        /// </summary>
        /// <param name="context">Context of request</param>
        /// <param name="post"> (optional)</param>
        /// <param name="apply"> (optional)</param>
        /// <param name="delete"> (optional)</param>
        /// <param name="action"> (optional)</param>
        /// <param name="location"> (optional)</param>
        /// <param name="propertylist"> (optional)</param>
        /// <param name="fieldWhitelist"> (optional)</param>
        /// <param name="attachmentTypeBlacklist"> (optional)</param>
        /// <returns>ComAdobeCqSocialQnaClientEndpointsImplQnaForumOperationsServicInfo</returns>
        ComAdobeCqSocialQnaClientEndpointsImplQnaForumOperationsServicInfo ComAdobeCqSocialQnaClientEndpointsImplQnaForumOperationsServic(NancyContext context, bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, List<string> fieldWhitelist, List<string> attachmentTypeBlacklist);

        /// <summary>
        /// 
        /// </summary>
        /// <param name="context">Context of request</param>
        /// <param name="post"> (optional)</param>
        /// <param name="apply"> (optional)</param>
        /// <param name="delete"> (optional)</param>
        /// <param name="action"> (optional)</param>
        /// <param name="location"> (optional)</param>
        /// <param name="propertylist"> (optional)</param>
        /// <param name="cqSocialReportingAnalyticsPollingImporterInterval"> (optional)</param>
        /// <param name="cqSocialReportingAnalyticsPollingImporterPageSize"> (optional)</param>
        /// <returns>ComAdobeCqSocialReportingAnalyticsServicesImplAnalyticsReportIInfo</returns>
        ComAdobeCqSocialReportingAnalyticsServicesImplAnalyticsReportIInfo ComAdobeCqSocialReportingAnalyticsServicesImplAnalyticsReportI(NancyContext context, bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, int? cqSocialReportingAnalyticsPollingImporterInterval, int? cqSocialReportingAnalyticsPollingImporterPageSize);

        /// <summary>
        /// 
        /// </summary>
        /// <param name="context">Context of request</param>
        /// <param name="post"> (optional)</param>
        /// <param name="apply"> (optional)</param>
        /// <param name="delete"> (optional)</param>
        /// <param name="action"> (optional)</param>
        /// <param name="location"> (optional)</param>
        /// <param name="propertylist"> (optional)</param>
        /// <param name="reportFetchDelay"> (optional)</param>
        /// <returns>ComAdobeCqSocialReportingAnalyticsServicesImplAnalyticsReportMInfo</returns>
        ComAdobeCqSocialReportingAnalyticsServicesImplAnalyticsReportMInfo ComAdobeCqSocialReportingAnalyticsServicesImplAnalyticsReportM(NancyContext context, bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, int? reportFetchDelay);

        /// <summary>
        /// 
        /// </summary>
        /// <param name="context">Context of request</param>
        /// <param name="post"> (optional)</param>
        /// <param name="apply"> (optional)</param>
        /// <param name="delete"> (optional)</param>
        /// <param name="action"> (optional)</param>
        /// <param name="location"> (optional)</param>
        /// <param name="propertylist"> (optional)</param>
        /// <param name="cqSocialConsoleAnalyticsSitesMapping"> (optional)</param>
        /// <param name="priority"> (optional)</param>
        /// <returns>ComAdobeCqSocialReportingAnalyticsServicesImplSiteTrendReportSInfo</returns>
        ComAdobeCqSocialReportingAnalyticsServicesImplSiteTrendReportSInfo ComAdobeCqSocialReportingAnalyticsServicesImplSiteTrendReportS(NancyContext context, bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, List<string> cqSocialConsoleAnalyticsSitesMapping, int? priority);

        /// <summary>
        /// 
        /// </summary>
        /// <param name="context">Context of request</param>
        /// <param name="post"> (optional)</param>
        /// <param name="apply"> (optional)</param>
        /// <param name="delete"> (optional)</param>
        /// <param name="action"> (optional)</param>
        /// <param name="location"> (optional)</param>
        /// <param name="propertylist"> (optional)</param>
        /// <param name="fieldWhitelist"> (optional)</param>
        /// <param name="attachmentTypeBlacklist"> (optional)</param>
        /// <returns>ComAdobeCqSocialReviewClientEndpointsImplReviewOperationsServiInfo</returns>
        ComAdobeCqSocialReviewClientEndpointsImplReviewOperationsServiInfo ComAdobeCqSocialReviewClientEndpointsImplReviewOperationsServi(NancyContext context, bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, List<string> fieldWhitelist, List<string> attachmentTypeBlacklist);

        /// <summary>
        /// 
        /// </summary>
        /// <param name="context">Context of request</param>
        /// <param name="post"> (optional)</param>
        /// <param name="apply"> (optional)</param>
        /// <param name="delete"> (optional)</param>
        /// <param name="action"> (optional)</param>
        /// <param name="location"> (optional)</param>
        /// <param name="propertylist"> (optional)</param>
        /// <param name="slingServletSelectors"> (optional)</param>
        /// <param name="slingServletExtensions"> (optional)</param>
        /// <returns>ComAdobeCqSocialScfCoreOperationsImplSocialOperationsServletInfo</returns>
        ComAdobeCqSocialScfCoreOperationsImplSocialOperationsServletInfo ComAdobeCqSocialScfCoreOperationsImplSocialOperationsServlet(NancyContext context, bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, string slingServletSelectors, string slingServletExtensions);

        /// <summary>
        /// 
        /// </summary>
        /// <param name="context">Context of request</param>
        /// <param name="post"> (optional)</param>
        /// <param name="apply"> (optional)</param>
        /// <param name="delete"> (optional)</param>
        /// <param name="action"> (optional)</param>
        /// <param name="location"> (optional)</param>
        /// <param name="propertylist"> (optional)</param>
        /// <param name="slingServletSelectors"> (optional)</param>
        /// <param name="slingServletExtensions"> (optional)</param>
        /// <returns>ComAdobeCqSocialScfEndpointsImplDefaultSocialGetServletInfo</returns>
        ComAdobeCqSocialScfEndpointsImplDefaultSocialGetServletInfo ComAdobeCqSocialScfEndpointsImplDefaultSocialGetServlet(NancyContext context, bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, List<string> slingServletSelectors, string slingServletExtensions);

        /// <summary>
        /// 
        /// </summary>
        /// <param name="context">Context of request</param>
        /// <param name="post"> (optional)</param>
        /// <param name="apply"> (optional)</param>
        /// <param name="delete"> (optional)</param>
        /// <param name="action"> (optional)</param>
        /// <param name="location"> (optional)</param>
        /// <param name="propertylist"> (optional)</param>
        /// <param name="eventTopics"> (optional)</param>
        /// <param name="eventFilter"> (optional)</param>
        /// <returns>ComAdobeCqSocialScoringImplScoringEventListenerInfo</returns>
        ComAdobeCqSocialScoringImplScoringEventListenerInfo ComAdobeCqSocialScoringImplScoringEventListener(NancyContext context, bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, string eventTopics, string eventFilter);

        /// <summary>
        /// 
        /// </summary>
        /// <param name="context">Context of request</param>
        /// <param name="post"> (optional)</param>
        /// <param name="apply"> (optional)</param>
        /// <param name="delete"> (optional)</param>
        /// <param name="action"> (optional)</param>
        /// <param name="location"> (optional)</param>
        /// <param name="propertylist"> (optional)</param>
        /// <param name="enableFallback"> (optional)</param>
        /// <returns>ComAdobeCqSocialServiceusersInternalImplServiceUserWrapperImplInfo</returns>
        ComAdobeCqSocialServiceusersInternalImplServiceUserWrapperImplInfo ComAdobeCqSocialServiceusersInternalImplServiceUserWrapperImpl(NancyContext context, bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, bool? enableFallback);

        /// <summary>
        /// 
        /// </summary>
        /// <param name="context">Context of request</param>
        /// <param name="post"> (optional)</param>
        /// <param name="apply"> (optional)</param>
        /// <param name="delete"> (optional)</param>
        /// <param name="action"> (optional)</param>
        /// <param name="location"> (optional)</param>
        /// <param name="propertylist"> (optional)</param>
        /// <param name="fieldWhitelist"> (optional)</param>
        /// <param name="sitePathFilters"> (optional)</param>
        /// <param name="sitePackageGroup"> (optional)</param>
        /// <returns>ComAdobeCqSocialSiteEndpointsImplSiteOperationServiceInfo</returns>
        ComAdobeCqSocialSiteEndpointsImplSiteOperationServiceInfo ComAdobeCqSocialSiteEndpointsImplSiteOperationService(NancyContext context, bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, List<string> fieldWhitelist, List<string> sitePathFilters, string sitePackageGroup);

        /// <summary>
        /// 
        /// </summary>
        /// <param name="context">Context of request</param>
        /// <param name="post"> (optional)</param>
        /// <param name="apply"> (optional)</param>
        /// <param name="delete"> (optional)</param>
        /// <param name="action"> (optional)</param>
        /// <param name="location"> (optional)</param>
        /// <param name="propertylist"> (optional)</param>
        /// <param name="cqSocialConsoleAnalyticsComponents"> (optional)</param>
        /// <returns>ComAdobeCqSocialSiteImplAnalyticsComponentConfigurationServiceImInfo</returns>
        ComAdobeCqSocialSiteImplAnalyticsComponentConfigurationServiceImInfo ComAdobeCqSocialSiteImplAnalyticsComponentConfigurationServiceIm(NancyContext context, bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, List<string> cqSocialConsoleAnalyticsComponents);

        /// <summary>
        /// 
        /// </summary>
        /// <param name="context">Context of request</param>
        /// <param name="post"> (optional)</param>
        /// <param name="apply"> (optional)</param>
        /// <param name="delete"> (optional)</param>
        /// <param name="action"> (optional)</param>
        /// <param name="location"> (optional)</param>
        /// <param name="propertylist"> (optional)</param>
        /// <param name="componentsUsingTags"> (optional)</param>
        /// <returns>ComAdobeCqSocialSiteImplSiteConfiguratorImplInfo</returns>
        ComAdobeCqSocialSiteImplSiteConfiguratorImplInfo ComAdobeCqSocialSiteImplSiteConfiguratorImpl(NancyContext context, bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, List<string> componentsUsingTags);

        /// <summary>
        /// 
        /// </summary>
        /// <param name="context">Context of request</param>
        /// <param name="post"> (optional)</param>
        /// <param name="apply"> (optional)</param>
        /// <param name="delete"> (optional)</param>
        /// <param name="action"> (optional)</param>
        /// <param name="location"> (optional)</param>
        /// <param name="propertylist"> (optional)</param>
        /// <param name="srpType"> (optional)</param>
        /// <returns>ComAdobeCqSocialSrpImplSocialSolrConnectorInfo</returns>
        ComAdobeCqSocialSrpImplSocialSolrConnectorInfo ComAdobeCqSocialSrpImplSocialSolrConnector(NancyContext context, bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, string srpType);

        /// <summary>
        /// 
        /// </summary>
        /// <param name="context">Context of request</param>
        /// <param name="post"> (optional)</param>
        /// <param name="apply"> (optional)</param>
        /// <param name="delete"> (optional)</param>
        /// <param name="action"> (optional)</param>
        /// <param name="location"> (optional)</param>
        /// <param name="propertylist"> (optional)</param>
        /// <param name="enabled"> (optional)</param>
        /// <param name="agentName"> (optional)</param>
        /// <param name="diffPath"> (optional)</param>
        /// <param name="propertyNames"> (optional)</param>
        /// <returns>ComAdobeCqSocialSyncImplDiffChangesObserverInfo</returns>
        ComAdobeCqSocialSyncImplDiffChangesObserverInfo ComAdobeCqSocialSyncImplDiffChangesObserver(NancyContext context, bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, bool? enabled, string agentName, string diffPath, string propertyNames);

        /// <summary>
        /// 
        /// </summary>
        /// <param name="context">Context of request</param>
        /// <param name="post"> (optional)</param>
        /// <param name="apply"> (optional)</param>
        /// <param name="delete"> (optional)</param>
        /// <param name="action"> (optional)</param>
        /// <param name="location"> (optional)</param>
        /// <param name="propertylist"> (optional)</param>
        /// <param name="nodetypes"> (optional)</param>
        /// <param name="ignorableprops"> (optional)</param>
        /// <param name="ignorablenodes"> (optional)</param>
        /// <param name="enabled"> (optional)</param>
        /// <param name="distfolders"> (optional)</param>
        /// <returns>ComAdobeCqSocialSyncImplGroupSyncListenerImplInfo</returns>
        ComAdobeCqSocialSyncImplGroupSyncListenerImplInfo ComAdobeCqSocialSyncImplGroupSyncListenerImpl(NancyContext context, bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, List<string> nodetypes, List<string> ignorableprops, string ignorablenodes, bool? enabled, string distfolders);

        /// <summary>
        /// 
        /// </summary>
        /// <param name="context">Context of request</param>
        /// <param name="post"> (optional)</param>
        /// <param name="apply"> (optional)</param>
        /// <param name="delete"> (optional)</param>
        /// <param name="action"> (optional)</param>
        /// <param name="location"> (optional)</param>
        /// <param name="propertylist"> (optional)</param>
        /// <param name="activeRunModes"> (optional)</param>
        /// <returns>ComAdobeCqSocialSyncImplPublisherSyncServiceImplInfo</returns>
        ComAdobeCqSocialSyncImplPublisherSyncServiceImplInfo ComAdobeCqSocialSyncImplPublisherSyncServiceImpl(NancyContext context, bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, List<string> activeRunModes);

        /// <summary>
        /// 
        /// </summary>
        /// <param name="context">Context of request</param>
        /// <param name="post"> (optional)</param>
        /// <param name="apply"> (optional)</param>
        /// <param name="delete"> (optional)</param>
        /// <param name="action"> (optional)</param>
        /// <param name="location"> (optional)</param>
        /// <param name="propertylist"> (optional)</param>
        /// <param name="nodetypes"> (optional)</param>
        /// <param name="ignorableprops"> (optional)</param>
        /// <param name="ignorablenodes"> (optional)</param>
        /// <param name="enabled"> (optional)</param>
        /// <param name="distfolders"> (optional)</param>
        /// <returns>ComAdobeCqSocialSyncImplUserSyncListenerImplInfo</returns>
        ComAdobeCqSocialSyncImplUserSyncListenerImplInfo ComAdobeCqSocialSyncImplUserSyncListenerImpl(NancyContext context, bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, List<string> nodetypes, List<string> ignorableprops, List<string> ignorablenodes, bool? enabled, List<string> distfolders);

        /// <summary>
        /// 
        /// </summary>
        /// <param name="context">Context of request</param>
        /// <param name="post"> (optional)</param>
        /// <param name="apply"> (optional)</param>
        /// <param name="delete"> (optional)</param>
        /// <param name="action"> (optional)</param>
        /// <param name="location"> (optional)</param>
        /// <param name="propertylist"> (optional)</param>
        /// <param name="translateLanguage"> (optional)</param>
        /// <param name="translateDisplay"> (optional)</param>
        /// <param name="translateAttribution"> (optional)</param>
        /// <param name="translateCaching"> (optional)</param>
        /// <param name="translateSmartRendering"> (optional)</param>
        /// <param name="translateCachingDuration"> (optional)</param>
        /// <param name="translateSessionSaveInterval"> (optional)</param>
        /// <param name="translateSessionSaveBatchLimit"> (optional)</param>
        /// <returns>ComAdobeCqSocialTranslationImplTranslationServiceConfigManagerInfo</returns>
        ComAdobeCqSocialTranslationImplTranslationServiceConfigManagerInfo ComAdobeCqSocialTranslationImplTranslationServiceConfigManager(NancyContext context, bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, string translateLanguage, string translateDisplay, bool? translateAttribution, string translateCaching, string translateSmartRendering, string translateCachingDuration, string translateSessionSaveInterval, string translateSessionSaveBatchLimit);

        /// <summary>
        /// 
        /// </summary>
        /// <param name="context">Context of request</param>
        /// <param name="post"> (optional)</param>
        /// <param name="apply"> (optional)</param>
        /// <param name="delete"> (optional)</param>
        /// <param name="action"> (optional)</param>
        /// <param name="location"> (optional)</param>
        /// <param name="propertylist"> (optional)</param>
        /// <param name="eventTopics"> (optional)</param>
        /// <param name="eventFilter"> (optional)</param>
        /// <param name="translateListenerType"> (optional)</param>
        /// <param name="translatePropertyList"> (optional)</param>
        /// <param name="poolSize"> (optional)</param>
        /// <param name="maxPoolSize"> (optional)</param>
        /// <param name="queueSize"> (optional)</param>
        /// <param name="keepAliveTime"> (optional)</param>
        /// <returns>ComAdobeCqSocialTranslationImplUGCLanguageDetectorInfo</returns>
        ComAdobeCqSocialTranslationImplUGCLanguageDetectorInfo ComAdobeCqSocialTranslationImplUGCLanguageDetector(NancyContext context, bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, string eventTopics, string eventFilter, List<string> translateListenerType, List<string> translatePropertyList, int? poolSize, int? maxPoolSize, int? queueSize, int? keepAliveTime);

        /// <summary>
        /// 
        /// </summary>
        /// <param name="context">Context of request</param>
        /// <param name="post"> (optional)</param>
        /// <param name="apply"> (optional)</param>
        /// <param name="delete"> (optional)</param>
        /// <param name="action"> (optional)</param>
        /// <param name="location"> (optional)</param>
        /// <param name="propertylist"> (optional)</param>
        /// <param name="threadPoolSize"> (optional)</param>
        /// <param name="delayTime"> (optional)</param>
        /// <param name="workerSleepTime"> (optional)</param>
        /// <returns>ComAdobeCqSocialUgcbaseDispatcherImplFlushServiceImplInfo</returns>
        ComAdobeCqSocialUgcbaseDispatcherImplFlushServiceImplInfo ComAdobeCqSocialUgcbaseDispatcherImplFlushServiceImpl(NancyContext context, bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, int? threadPoolSize, int? delayTime, int? workerSleepTime);

        /// <summary>
        /// 
        /// </summary>
        /// <param name="context">Context of request</param>
        /// <param name="post"> (optional)</param>
        /// <param name="apply"> (optional)</param>
        /// <param name="delete"> (optional)</param>
        /// <param name="action"> (optional)</param>
        /// <param name="location"> (optional)</param>
        /// <param name="propertylist"> (optional)</param>
        /// <param name="poolSize"> (optional)</param>
        /// <param name="maxPoolSize"> (optional)</param>
        /// <param name="queueSize"> (optional)</param>
        /// <param name="keepAliveTime"> (optional)</param>
        /// <returns>ComAdobeCqSocialUgcbaseImplAysncReverseReplicatorImplInfo</returns>
        ComAdobeCqSocialUgcbaseImplAysncReverseReplicatorImplInfo ComAdobeCqSocialUgcbaseImplAysncReverseReplicatorImpl(NancyContext context, bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, int? poolSize, int? maxPoolSize, int? queueSize, int? keepAliveTime);

        /// <summary>
        /// 
        /// </summary>
        /// <param name="context">Context of request</param>
        /// <param name="post"> (optional)</param>
        /// <param name="apply"> (optional)</param>
        /// <param name="delete"> (optional)</param>
        /// <param name="action"> (optional)</param>
        /// <param name="location"> (optional)</param>
        /// <param name="propertylist"> (optional)</param>
        /// <param name="isPrimaryPublisher"> (optional)</param>
        /// <returns>ComAdobeCqSocialUgcbaseImplPublisherConfigurationImplInfo</returns>
        ComAdobeCqSocialUgcbaseImplPublisherConfigurationImplInfo ComAdobeCqSocialUgcbaseImplPublisherConfigurationImpl(NancyContext context, bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, bool? isPrimaryPublisher);

        /// <summary>
        /// 
        /// </summary>
        /// <param name="context">Context of request</param>
        /// <param name="post"> (optional)</param>
        /// <param name="apply"> (optional)</param>
        /// <param name="delete"> (optional)</param>
        /// <param name="action"> (optional)</param>
        /// <param name="location"> (optional)</param>
        /// <param name="propertylist"> (optional)</param>
        /// <param name="legacyCloudUGCPathMapping"> (optional)</param>
        /// <returns>ComAdobeCqSocialUgcbaseImplSocialUtilsImplInfo</returns>
        ComAdobeCqSocialUgcbaseImplSocialUtilsImplInfo ComAdobeCqSocialUgcbaseImplSocialUtilsImpl(NancyContext context, bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, bool? legacyCloudUGCPathMapping);

        /// <summary>
        /// 
        /// </summary>
        /// <param name="context">Context of request</param>
        /// <param name="post"> (optional)</param>
        /// <param name="apply"> (optional)</param>
        /// <param name="delete"> (optional)</param>
        /// <param name="action"> (optional)</param>
        /// <param name="location"> (optional)</param>
        /// <param name="propertylist"> (optional)</param>
        /// <param name="automoderationSequence"> (optional)</param>
        /// <param name="automoderationOnfailurestop"> (optional)</param>
        /// <returns>ComAdobeCqSocialUgcbaseModerationImplAutoModerationImplInfo</returns>
        ComAdobeCqSocialUgcbaseModerationImplAutoModerationImplInfo ComAdobeCqSocialUgcbaseModerationImplAutoModerationImpl(NancyContext context, bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, List<string> automoderationSequence, bool? automoderationOnfailurestop);

        /// <summary>
        /// 
        /// </summary>
        /// <param name="context">Context of request</param>
        /// <param name="post"> (optional)</param>
        /// <param name="apply"> (optional)</param>
        /// <param name="delete"> (optional)</param>
        /// <param name="action"> (optional)</param>
        /// <param name="location"> (optional)</param>
        /// <param name="propertylist"> (optional)</param>
        /// <param name="watchwordsPositive"> (optional)</param>
        /// <param name="watchwordsNegative"> (optional)</param>
        /// <param name="watchwordsPath"> (optional)</param>
        /// <param name="sentimentPath"> (optional)</param>
        /// <returns>ComAdobeCqSocialUgcbaseModerationImplSentimentProcessInfo</returns>
        ComAdobeCqSocialUgcbaseModerationImplSentimentProcessInfo ComAdobeCqSocialUgcbaseModerationImplSentimentProcess(NancyContext context, bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, List<string> watchwordsPositive, List<string> watchwordsNegative, string watchwordsPath, string sentimentPath);

        /// <summary>
        /// 
        /// </summary>
        /// <param name="context">Context of request</param>
        /// <param name="post"> (optional)</param>
        /// <param name="apply"> (optional)</param>
        /// <param name="delete"> (optional)</param>
        /// <param name="action"> (optional)</param>
        /// <param name="location"> (optional)</param>
        /// <param name="propertylist"> (optional)</param>
        /// <param name="defaultAttachmentTypeBlacklist"> (optional)</param>
        /// <param name="baselineAttachmentTypeBlacklist"> (optional)</param>
        /// <returns>ComAdobeCqSocialUgcbaseSecurityImplDefaultAttachmentTypeBlackliInfo</returns>
        ComAdobeCqSocialUgcbaseSecurityImplDefaultAttachmentTypeBlackliInfo ComAdobeCqSocialUgcbaseSecurityImplDefaultAttachmentTypeBlackli(NancyContext context, bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, List<string> defaultAttachmentTypeBlacklist, List<string> baselineAttachmentTypeBlacklist);

        /// <summary>
        /// 
        /// </summary>
        /// <param name="context">Context of request</param>
        /// <param name="post"> (optional)</param>
        /// <param name="apply"> (optional)</param>
        /// <param name="delete"> (optional)</param>
        /// <param name="action"> (optional)</param>
        /// <param name="location"> (optional)</param>
        /// <param name="propertylist"> (optional)</param>
        /// <param name="parameterWhitelist"> (optional)</param>
        /// <param name="parameterWhitelistPrefixes"> (optional)</param>
        /// <param name="binaryParameterWhitelist"> (optional)</param>
        /// <param name="modifierWhitelist"> (optional)</param>
        /// <param name="operationWhitelist"> (optional)</param>
        /// <param name="operationWhitelistPrefixes"> (optional)</param>
        /// <param name="typehintWhitelist"> (optional)</param>
        /// <param name="resourcetypeWhitelist"> (optional)</param>
        /// <returns>ComAdobeCqSocialUgcbaseSecurityImplSaferSlingPostValidatorImplInfo</returns>
        ComAdobeCqSocialUgcbaseSecurityImplSaferSlingPostValidatorImplInfo ComAdobeCqSocialUgcbaseSecurityImplSaferSlingPostValidatorImpl(NancyContext context, bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, List<string> parameterWhitelist, List<string> parameterWhitelistPrefixes, List<string> binaryParameterWhitelist, List<string> modifierWhitelist, List<string> operationWhitelist, List<string> operationWhitelistPrefixes, List<string> typehintWhitelist, List<string> resourcetypeWhitelist);

        /// <summary>
        /// 
        /// </summary>
        /// <param name="context">Context of request</param>
        /// <param name="post"> (optional)</param>
        /// <param name="apply"> (optional)</param>
        /// <param name="delete"> (optional)</param>
        /// <param name="action"> (optional)</param>
        /// <param name="location"> (optional)</param>
        /// <param name="propertylist"> (optional)</param>
        /// <param name="slingServletExtensions"> (optional)</param>
        /// <param name="slingServletPaths"> (optional)</param>
        /// <param name="slingServletMethods"> (optional)</param>
        /// <returns>ComAdobeCqSocialUserEndpointsImplUsersGroupFromPublishServletInfo</returns>
        ComAdobeCqSocialUserEndpointsImplUsersGroupFromPublishServletInfo ComAdobeCqSocialUserEndpointsImplUsersGroupFromPublishServlet(NancyContext context, bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, string slingServletExtensions, string slingServletPaths, string slingServletMethods);

        /// <summary>
        /// 
        /// </summary>
        /// <param name="context">Context of request</param>
        /// <param name="post"> (optional)</param>
        /// <param name="apply"> (optional)</param>
        /// <param name="delete"> (optional)</param>
        /// <param name="action"> (optional)</param>
        /// <param name="location"> (optional)</param>
        /// <param name="propertylist"> (optional)</param>
        /// <param name="enable"> (optional)</param>
        /// <param name="agentConfiguration"> (optional)</param>
        /// <param name="contextPath"> (optional)</param>
        /// <param name="disabledCipherSuites"> (optional)</param>
        /// <param name="enabledCipherSuites"> (optional)</param>
        /// <returns>ComAdobeCqSocialUserImplTransportHttpToPublisherInfo</returns>
        ComAdobeCqSocialUserImplTransportHttpToPublisherInfo ComAdobeCqSocialUserImplTransportHttpToPublisher(NancyContext context, bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, bool? enable, List<string> agentConfiguration, string contextPath, List<string> disabledCipherSuites, List<string> enabledCipherSuites);

        /// <summary>
        /// 
        /// </summary>
        /// <param name="context">Context of request</param>
        /// <param name="post"> (optional)</param>
        /// <param name="apply"> (optional)</param>
        /// <param name="delete"> (optional)</param>
        /// <param name="action"> (optional)</param>
        /// <param name="location"> (optional)</param>
        /// <param name="propertylist"> (optional)</param>
        /// <param name="resourceTypes"> (optional)</param>
        /// <returns>ComAdobeCqUiWcmCommonsInternalServletsRteRTEFilterServletFactInfo</returns>
        ComAdobeCqUiWcmCommonsInternalServletsRteRTEFilterServletFactInfo ComAdobeCqUiWcmCommonsInternalServletsRteRTEFilterServletFact(NancyContext context, bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, List<string> resourceTypes);

        /// <summary>
        /// 
        /// </summary>
        /// <param name="context">Context of request</param>
        /// <param name="post"> (optional)</param>
        /// <param name="apply"> (optional)</param>
        /// <param name="delete"> (optional)</param>
        /// <param name="action"> (optional)</param>
        /// <param name="location"> (optional)</param>
        /// <param name="propertylist"> (optional)</param>
        /// <param name="deletePathRegexps"> (optional)</param>
        /// <param name="deleteSql2Query"> (optional)</param>
        /// <returns>ComAdobeCqUpgradesCleanupImplUpgradeContentCleanupInfo</returns>
        ComAdobeCqUpgradesCleanupImplUpgradeContentCleanupInfo ComAdobeCqUpgradesCleanupImplUpgradeContentCleanup(NancyContext context, bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, List<string> deletePathRegexps, string deleteSql2Query);

        /// <summary>
        /// 
        /// </summary>
        /// <param name="context">Context of request</param>
        /// <param name="post"> (optional)</param>
        /// <param name="apply"> (optional)</param>
        /// <param name="delete"> (optional)</param>
        /// <param name="action"> (optional)</param>
        /// <param name="location"> (optional)</param>
        /// <param name="propertylist"> (optional)</param>
        /// <param name="deleteNameRegexps"> (optional)</param>
        /// <returns>ComAdobeCqUpgradesCleanupImplUpgradeInstallFolderCleanupInfo</returns>
        ComAdobeCqUpgradesCleanupImplUpgradeInstallFolderCleanupInfo ComAdobeCqUpgradesCleanupImplUpgradeInstallFolderCleanup(NancyContext context, bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, List<string> deleteNameRegexps);

        /// <summary>
        /// 
        /// </summary>
        /// <param name="context">Context of request</param>
        /// <param name="post"> (optional)</param>
        /// <param name="apply"> (optional)</param>
        /// <param name="delete"> (optional)</param>
        /// <param name="action"> (optional)</param>
        /// <param name="location"> (optional)</param>
        /// <param name="propertylist"> (optional)</param>
        /// <param name="threshold"> (optional)</param>
        /// <param name="jobTopicName"> (optional)</param>
        /// <param name="emailEnabled"> (optional)</param>
        /// <returns>ComAdobeCqWcmJobsAsyncImplAsyncDeleteConfigProviderServiceInfo</returns>
        ComAdobeCqWcmJobsAsyncImplAsyncDeleteConfigProviderServiceInfo ComAdobeCqWcmJobsAsyncImplAsyncDeleteConfigProviderService(NancyContext context, bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, int? threshold, string jobTopicName, bool? emailEnabled);

        /// <summary>
        /// 
        /// </summary>
        /// <param name="context">Context of request</param>
        /// <param name="post"> (optional)</param>
        /// <param name="apply"> (optional)</param>
        /// <param name="delete"> (optional)</param>
        /// <param name="action"> (optional)</param>
        /// <param name="location"> (optional)</param>
        /// <param name="propertylist"> (optional)</param>
        /// <param name="schedulerExpression"> (optional)</param>
        /// <param name="jobPurgeThreshold"> (optional)</param>
        /// <param name="jobPurgeMaxJobs"> (optional)</param>
        /// <returns>ComAdobeCqWcmJobsAsyncImplAsyncJobCleanUpTaskInfo</returns>
        ComAdobeCqWcmJobsAsyncImplAsyncJobCleanUpTaskInfo ComAdobeCqWcmJobsAsyncImplAsyncJobCleanUpTask(NancyContext context, bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, string schedulerExpression, int? jobPurgeThreshold, int? jobPurgeMaxJobs);

        /// <summary>
        /// 
        /// </summary>
        /// <param name="context">Context of request</param>
        /// <param name="post"> (optional)</param>
        /// <param name="apply"> (optional)</param>
        /// <param name="delete"> (optional)</param>
        /// <param name="action"> (optional)</param>
        /// <param name="location"> (optional)</param>
        /// <param name="propertylist"> (optional)</param>
        /// <param name="threshold"> (optional)</param>
        /// <param name="jobTopicName"> (optional)</param>
        /// <param name="emailEnabled"> (optional)</param>
        /// <returns>ComAdobeCqWcmJobsAsyncImplAsyncMoveConfigProviderServiceInfo</returns>
        ComAdobeCqWcmJobsAsyncImplAsyncMoveConfigProviderServiceInfo ComAdobeCqWcmJobsAsyncImplAsyncMoveConfigProviderService(NancyContext context, bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, int? threshold, string jobTopicName, bool? emailEnabled);

        /// <summary>
        /// 
        /// </summary>
        /// <param name="context">Context of request</param>
        /// <param name="post"> (optional)</param>
        /// <param name="apply"> (optional)</param>
        /// <param name="delete"> (optional)</param>
        /// <param name="action"> (optional)</param>
        /// <param name="location"> (optional)</param>
        /// <param name="propertylist"> (optional)</param>
        /// <param name="threshold"> (optional)</param>
        /// <param name="jobTopicName"> (optional)</param>
        /// <param name="emailEnabled"> (optional)</param>
        /// <returns>ComAdobeCqWcmJobsAsyncImplAsyncPageMoveConfigProviderServiceInfo</returns>
        ComAdobeCqWcmJobsAsyncImplAsyncPageMoveConfigProviderServiceInfo ComAdobeCqWcmJobsAsyncImplAsyncPageMoveConfigProviderService(NancyContext context, bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, int? threshold, string jobTopicName, bool? emailEnabled);

        /// <summary>
        /// 
        /// </summary>
        /// <param name="context">Context of request</param>
        /// <param name="post"> (optional)</param>
        /// <param name="apply"> (optional)</param>
        /// <param name="delete"> (optional)</param>
        /// <param name="action"> (optional)</param>
        /// <param name="location"> (optional)</param>
        /// <param name="propertylist"> (optional)</param>
        /// <param name="eventFilter"> (optional)</param>
        /// <param name="launchesEventhandlerThreadpoolMaxsize"> (optional)</param>
        /// <param name="launchesEventhandlerThreadpoolPriority"> (optional)</param>
        /// <param name="launchesEventhandlerUpdatelastmodification"> (optional)</param>
        /// <returns>ComAdobeCqWcmLaunchesImplLaunchesEventHandlerInfo</returns>
        ComAdobeCqWcmLaunchesImplLaunchesEventHandlerInfo ComAdobeCqWcmLaunchesImplLaunchesEventHandler(NancyContext context, bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, string eventFilter, int? launchesEventhandlerThreadpoolMaxsize, string launchesEventhandlerThreadpoolPriority, bool? launchesEventhandlerUpdatelastmodification);

        /// <summary>
        /// 
        /// </summary>
        /// <param name="context">Context of request</param>
        /// <param name="post"> (optional)</param>
        /// <param name="apply"> (optional)</param>
        /// <param name="delete"> (optional)</param>
        /// <param name="action"> (optional)</param>
        /// <param name="location"> (optional)</param>
        /// <param name="propertylist"> (optional)</param>
        /// <param name="cqWcmQrcodeServletWhitelist"> (optional)</param>
        /// <returns>ComAdobeCqWcmMobileQrcodeServletQRCodeImageGeneratorInfo</returns>
        ComAdobeCqWcmMobileQrcodeServletQRCodeImageGeneratorInfo ComAdobeCqWcmMobileQrcodeServletQRCodeImageGenerator(NancyContext context, bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, List<string> cqWcmQrcodeServletWhitelist);

        /// <summary>
        /// 
        /// </summary>
        /// <param name="context">Context of request</param>
        /// <param name="post"> (optional)</param>
        /// <param name="apply"> (optional)</param>
        /// <param name="delete"> (optional)</param>
        /// <param name="action"> (optional)</param>
        /// <param name="location"> (optional)</param>
        /// <param name="propertylist"> (optional)</param>
        /// <param name="size"> (optional)</param>
        /// <returns>ComAdobeCqWcmStyleInternalComponentStyleInfoCacheImplInfo</returns>
        ComAdobeCqWcmStyleInternalComponentStyleInfoCacheImplInfo ComAdobeCqWcmStyleInternalComponentStyleInfoCacheImpl(NancyContext context, bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, int? size);

        /// <summary>
        /// 
        /// </summary>
        /// <param name="context">Context of request</param>
        /// <param name="post"> (optional)</param>
        /// <param name="apply"> (optional)</param>
        /// <param name="delete"> (optional)</param>
        /// <param name="action"> (optional)</param>
        /// <param name="location"> (optional)</param>
        /// <param name="propertylist"> (optional)</param>
        /// <param name="syncTranslationStateSchedulingFormat"> (optional)</param>
        /// <param name="schedulingRepeatTranslationSchedulingFormat"> (optional)</param>
        /// <param name="syncTranslationStateLockTimeoutInMinutes"> (optional)</param>
        /// <param name="exportFormat"> (optional)</param>
        /// <returns>ComAdobeCqWcmTranslationImplTranslationPlatformConfigurationImplInfo</returns>
        ComAdobeCqWcmTranslationImplTranslationPlatformConfigurationImplInfo ComAdobeCqWcmTranslationImplTranslationPlatformConfigurationImpl(NancyContext context, bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, string syncTranslationStateSchedulingFormat, string schedulingRepeatTranslationSchedulingFormat, string syncTranslationStateLockTimeoutInMinutes, string exportFormat);

        /// <summary>
        /// 
        /// </summary>
        /// <param name="context">Context of request</param>
        /// <param name="post"> (optional)</param>
        /// <param name="apply"> (optional)</param>
        /// <param name="delete"> (optional)</param>
        /// <param name="action"> (optional)</param>
        /// <param name="location"> (optional)</param>
        /// <param name="propertylist"> (optional)</param>
        /// <param name="portalOutboxes"> (optional)</param>
        /// <param name="draftDataService"> (optional)</param>
        /// <param name="draftMetadataService"> (optional)</param>
        /// <param name="submitDataService"> (optional)</param>
        /// <param name="submitMetadataService"> (optional)</param>
        /// <param name="pendingSignDataService"> (optional)</param>
        /// <param name="pendingSignMetadataService"> (optional)</param>
        /// <returns>ComAdobeFdFpConfigFormsPortalDraftsandSubmissionConfigServiceInfo</returns>
        ComAdobeFdFpConfigFormsPortalDraftsandSubmissionConfigServiceInfo ComAdobeFdFpConfigFormsPortalDraftsandSubmissionConfigService(NancyContext context, bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, List<string> portalOutboxes, string draftDataService, string draftMetadataService, string submitDataService, string submitMetadataService, string pendingSignDataService, string pendingSignMetadataService);

        /// <summary>
        /// 
        /// </summary>
        /// <param name="context">Context of request</param>
        /// <param name="post"> (optional)</param>
        /// <param name="apply"> (optional)</param>
        /// <param name="delete"> (optional)</param>
        /// <param name="action"> (optional)</param>
        /// <param name="location"> (optional)</param>
        /// <param name="propertylist"> (optional)</param>
        /// <param name="formportalInterval"> (optional)</param>
        /// <returns>ComAdobeFdFpConfigFormsPortalSchedulerServiceInfo</returns>
        ComAdobeFdFpConfigFormsPortalSchedulerServiceInfo ComAdobeFdFpConfigFormsPortalSchedulerService(NancyContext context, bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, string formportalInterval);

        /// <summary>
        /// 
        /// </summary>
        /// <param name="context">Context of request</param>
        /// <param name="post"> (optional)</param>
        /// <param name="apply"> (optional)</param>
        /// <param name="delete"> (optional)</param>
        /// <param name="action"> (optional)</param>
        /// <param name="location"> (optional)</param>
        /// <param name="propertylist"> (optional)</param>
        /// <param name="alloweddataFileLocations"> (optional)</param>
        /// <returns>ComAdobeFormsCommonServiceImplDefaultDataProviderInfo</returns>
        ComAdobeFormsCommonServiceImplDefaultDataProviderInfo ComAdobeFormsCommonServiceImplDefaultDataProvider(NancyContext context, bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, List<string> alloweddataFileLocations);

        /// <summary>
        /// 
        /// </summary>
        /// <param name="context">Context of request</param>
        /// <param name="post"> (optional)</param>
        /// <param name="apply"> (optional)</param>
        /// <param name="delete"> (optional)</param>
        /// <param name="action"> (optional)</param>
        /// <param name="location"> (optional)</param>
        /// <param name="propertylist"> (optional)</param>
        /// <param name="tempStorageConfig"> (optional)</param>
        /// <returns>ComAdobeFormsCommonServiceImplFormsCommonConfigurationServiceImpInfo</returns>
        ComAdobeFormsCommonServiceImplFormsCommonConfigurationServiceImpInfo ComAdobeFormsCommonServiceImplFormsCommonConfigurationServiceImp(NancyContext context, bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, string tempStorageConfig);

        /// <summary>
        /// 
        /// </summary>
        /// <param name="context">Context of request</param>
        /// <param name="post"> (optional)</param>
        /// <param name="apply"> (optional)</param>
        /// <param name="delete"> (optional)</param>
        /// <param name="action"> (optional)</param>
        /// <param name="location"> (optional)</param>
        /// <param name="propertylist"> (optional)</param>
        /// <param name="schedulerExpression"> (optional)</param>
        /// <param name="durationForTemporaryStorage"> (optional)</param>
        /// <param name="durationForAnonymousStorage"> (optional)</param>
        /// <returns>ComAdobeFormsCommonServletTempCleanUpTaskInfo</returns>
        ComAdobeFormsCommonServletTempCleanUpTaskInfo ComAdobeFormsCommonServletTempCleanUpTask(NancyContext context, bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, string schedulerExpression, string durationForTemporaryStorage, string durationForAnonymousStorage);

        /// <summary>
        /// 
        /// </summary>
        /// <param name="context">Context of request</param>
        /// <param name="post"> (optional)</param>
        /// <param name="apply"> (optional)</param>
        /// <param name="delete"> (optional)</param>
        /// <param name="action"> (optional)</param>
        /// <param name="location"> (optional)</param>
        /// <param name="propertylist"> (optional)</param>
        /// <param name="queryLimit"> (optional)</param>
        /// <param name="fileTypeExtensionMap"> (optional)</param>
        /// <returns>ComAdobeGraniteAcpPlatformPlatformServletInfo</returns>
        ComAdobeGraniteAcpPlatformPlatformServletInfo ComAdobeGraniteAcpPlatformPlatformServlet(NancyContext context, bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, int? queryLimit, List<string> fileTypeExtensionMap);

        /// <summary>
        /// 
        /// </summary>
        /// <param name="context">Context of request</param>
        /// <param name="post"> (optional)</param>
        /// <param name="apply"> (optional)</param>
        /// <param name="delete"> (optional)</param>
        /// <param name="action"> (optional)</param>
        /// <param name="location"> (optional)</param>
        /// <param name="propertylist"> (optional)</param>
        /// <param name="aggregateRelationships"> (optional)</param>
        /// <param name="aggregateDescendVirtual"> (optional)</param>
        /// <returns>ComAdobeGraniteActivitystreamsImplActivityManagerImplInfo</returns>
        ComAdobeGraniteActivitystreamsImplActivityManagerImplInfo ComAdobeGraniteActivitystreamsImplActivityManagerImpl(NancyContext context, bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, List<string> aggregateRelationships, bool? aggregateDescendVirtual);

        /// <summary>
        /// 
        /// </summary>
        /// <param name="context">Context of request</param>
        /// <param name="post"> (optional)</param>
        /// <param name="apply"> (optional)</param>
        /// <param name="delete"> (optional)</param>
        /// <param name="action"> (optional)</param>
        /// <param name="location"> (optional)</param>
        /// <param name="propertylist"> (optional)</param>
        /// <param name="disabled"> (optional)</param>
        /// <returns>ComAdobeGraniteAnalyzerBaseSystemStatusServletInfo</returns>
        ComAdobeGraniteAnalyzerBaseSystemStatusServletInfo ComAdobeGraniteAnalyzerBaseSystemStatusServlet(NancyContext context, bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, bool? disabled);

        /// <summary>
        /// 
        /// </summary>
        /// <param name="context">Context of request</param>
        /// <param name="post"> (optional)</param>
        /// <param name="apply"> (optional)</param>
        /// <param name="delete"> (optional)</param>
        /// <param name="action"> (optional)</param>
        /// <param name="location"> (optional)</param>
        /// <param name="propertylist"> (optional)</param>
        /// <param name="disabled"> (optional)</param>
        /// <returns>ComAdobeGraniteAnalyzerScriptsCompileAllScriptsCompilerServletInfo</returns>
        ComAdobeGraniteAnalyzerScriptsCompileAllScriptsCompilerServletInfo ComAdobeGraniteAnalyzerScriptsCompileAllScriptsCompilerServlet(NancyContext context, bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, bool? disabled);

        /// <summary>
        /// 
        /// </summary>
        /// <param name="context">Context of request</param>
        /// <param name="post"> (optional)</param>
        /// <param name="apply"> (optional)</param>
        /// <param name="delete"> (optional)</param>
        /// <param name="action"> (optional)</param>
        /// <param name="location"> (optional)</param>
        /// <param name="propertylist"> (optional)</param>
        /// <param name="comAdobeCqCdnCdnRewriter"> (optional)</param>
        /// <param name="comAdobeCqCloudConfigComponents"> (optional)</param>
        /// <param name="comAdobeCqCloudConfigCore"> (optional)</param>
        /// <param name="comAdobeCqCloudConfigUi"> (optional)</param>
        /// <param name="comAdobeCqComAdobeCqEditor"> (optional)</param>
        /// <param name="comAdobeCqComAdobeCqProjectsCore"> (optional)</param>
        /// <param name="comAdobeCqComAdobeCqProjectsWcmCore"> (optional)</param>
        /// <param name="comAdobeCqComAdobeCqUiCommons"> (optional)</param>
        /// <param name="comAdobeCqComAdobeCqWcmStyle"> (optional)</param>
        /// <param name="comAdobeCqCqActivitymapIntegration"> (optional)</param>
        /// <param name="comAdobeCqCqContexthubCommons"> (optional)</param>
        /// <param name="comAdobeCqCqDtm"> (optional)</param>
        /// <param name="comAdobeCqCqHealthcheck"> (optional)</param>
        /// <param name="comAdobeCqCqMultisiteTargeting"> (optional)</param>
        /// <param name="comAdobeCqCqPreUpgradeCleanup"> (optional)</param>
        /// <param name="comAdobeCqCqProductInfoProvider"> (optional)</param>
        /// <param name="comAdobeCqCqRestSites"> (optional)</param>
        /// <param name="comAdobeCqCqSecurityHc"> (optional)</param>
        /// <param name="comAdobeCqDamCqDamSvgHandler"> (optional)</param>
        /// <param name="comAdobeCqDamCqScene7Imaging"> (optional)</param>
        /// <param name="comAdobeCqDtmReactorCore"> (optional)</param>
        /// <param name="comAdobeCqDtmReactorUi"> (optional)</param>
        /// <param name="comAdobeCqExpJspelResolver"> (optional)</param>
        /// <param name="comAdobeCqInboxCqInbox"> (optional)</param>
        /// <param name="comAdobeCqJsonSchemaParser"> (optional)</param>
        /// <param name="comAdobeCqMediaCqMediaPublishingDpsFpCore"> (optional)</param>
        /// <param name="comAdobeCqMobileCqMobileCaas"> (optional)</param>
        /// <param name="comAdobeCqMobileCqMobileIndexBuilder"> (optional)</param>
        /// <param name="comAdobeCqMobileCqMobilePhonegapBuild"> (optional)</param>
        /// <param name="comAdobeCqMyspell"> (optional)</param>
        /// <param name="comAdobeCqSampleWeRetailCore"> (optional)</param>
        /// <param name="comAdobeCqScreensComAdobeCqScreensDcc"> (optional)</param>
        /// <param name="comAdobeCqScreensComAdobeCqScreensMqCore"> (optional)</param>
        /// <param name="comAdobeCqSocialCqSocialAsProvider"> (optional)</param>
        /// <param name="comAdobeCqSocialCqSocialBadgingBasicImpl"> (optional)</param>
        /// <param name="comAdobeCqSocialCqSocialBadgingImpl"> (optional)</param>
        /// <param name="comAdobeCqSocialCqSocialCalendarImpl"> (optional)</param>
        /// <param name="comAdobeCqSocialCqSocialContentFragmentsImpl"> (optional)</param>
        /// <param name="comAdobeCqSocialCqSocialEnablementImpl"> (optional)</param>
        /// <param name="comAdobeCqSocialCqSocialGraphImpl"> (optional)</param>
        /// <param name="comAdobeCqSocialCqSocialIdeationImpl"> (optional)</param>
        /// <param name="comAdobeCqSocialCqSocialJcrProvider"> (optional)</param>
        /// <param name="comAdobeCqSocialCqSocialMembersImpl"> (optional)</param>
        /// <param name="comAdobeCqSocialCqSocialMsProvider"> (optional)</param>
        /// <param name="comAdobeCqSocialCqSocialNotificationsChannelsWeb"> (optional)</param>
        /// <param name="comAdobeCqSocialCqSocialNotificationsImpl"> (optional)</param>
        /// <param name="comAdobeCqSocialCqSocialRdbProvider"> (optional)</param>
        /// <param name="comAdobeCqSocialCqSocialScfImpl"> (optional)</param>
        /// <param name="comAdobeCqSocialCqSocialScoringBasicImpl"> (optional)</param>
        /// <param name="comAdobeCqSocialCqSocialScoringImpl"> (optional)</param>
        /// <param name="comAdobeCqSocialCqSocialServiceusersImpl"> (optional)</param>
        /// <param name="comAdobeCqSocialCqSocialSrpImpl"> (optional)</param>
        /// <param name="comAdobeCqSocialCqSocialUgcbaseImpl"> (optional)</param>
        /// <param name="comAdobeDamCqDamCfmImpl"> (optional)</param>
        /// <param name="comAdobeFormsFoundationFormsFoundationBase"> (optional)</param>
        /// <param name="comAdobeGraniteApicontroller"> (optional)</param>
        /// <param name="comAdobeGraniteAssetCore"> (optional)</param>
        /// <param name="comAdobeGraniteAuthSso"> (optional)</param>
        /// <param name="comAdobeGraniteBundlesHcImpl"> (optional)</param>
        /// <param name="comAdobeGraniteCompatRouter"> (optional)</param>
        /// <param name="comAdobeGraniteConf"> (optional)</param>
        /// <param name="comAdobeGraniteConfUiCore"> (optional)</param>
        /// <param name="comAdobeGraniteCors"> (optional)</param>
        /// <param name="comAdobeGraniteCrxExplorer"> (optional)</param>
        /// <param name="comAdobeGraniteCrxdeLite"> (optional)</param>
        /// <param name="comAdobeGraniteCryptoConfig"> (optional)</param>
        /// <param name="comAdobeGraniteCryptoExtension"> (optional)</param>
        /// <param name="comAdobeGraniteCryptoFile"> (optional)</param>
        /// <param name="comAdobeGraniteCryptoJcr"> (optional)</param>
        /// <param name="comAdobeGraniteCsrf"> (optional)</param>
        /// <param name="comAdobeGraniteDistributionCore"> (optional)</param>
        /// <param name="comAdobeGraniteDropwizardMetrics"> (optional)</param>
        /// <param name="comAdobeGraniteFragsImpl"> (optional)</param>
        /// <param name="comAdobeGraniteGibson"> (optional)</param>
        /// <param name="comAdobeGraniteInfocollector"> (optional)</param>
        /// <param name="comAdobeGraniteInstallerFactoryPackages"> (optional)</param>
        /// <param name="comAdobeGraniteJettySsl"> (optional)</param>
        /// <param name="comAdobeGraniteJobsAsync"> (optional)</param>
        /// <param name="comAdobeGraniteMaintenanceOak"> (optional)</param>
        /// <param name="comAdobeGraniteMonitoringCore"> (optional)</param>
        /// <param name="comAdobeGraniteQueries"> (optional)</param>
        /// <param name="comAdobeGraniteReplicationHcImpl"> (optional)</param>
        /// <param name="comAdobeGraniteRepositoryChecker"> (optional)</param>
        /// <param name="comAdobeGraniteRepositoryHcImpl"> (optional)</param>
        /// <param name="comAdobeGraniteRestAssets"> (optional)</param>
        /// <param name="comAdobeGraniteSecurityUi"> (optional)</param>
        /// <param name="comAdobeGraniteStartup"> (optional)</param>
        /// <param name="comAdobeGraniteTagsoup"> (optional)</param>
        /// <param name="comAdobeGraniteTaskmanagementCore"> (optional)</param>
        /// <param name="comAdobeGraniteTaskmanagementWorkflow"> (optional)</param>
        /// <param name="comAdobeGraniteUiClientlibsCompilerLess"> (optional)</param>
        /// <param name="comAdobeGraniteUiClientlibsProcessorGcc"> (optional)</param>
        /// <param name="comAdobeGraniteWebconsolePlugins"> (optional)</param>
        /// <param name="comAdobeGraniteWorkflowConsole"> (optional)</param>
        /// <param name="comAdobeXmpWorkerFilesNativeFragmentLinux"> (optional)</param>
        /// <param name="comAdobeXmpWorkerFilesNativeFragmentMacosx"> (optional)</param>
        /// <param name="comAdobeXmpWorkerFilesNativeFragmentWin"> (optional)</param>
        /// <param name="comDayCommonsOsgiWrapperSimpleJndi"> (optional)</param>
        /// <param name="comDayCqCqAuthhandler"> (optional)</param>
        /// <param name="comDayCqCqCompatConfigupdate"> (optional)</param>
        /// <param name="comDayCqCqLicensebranding"> (optional)</param>
        /// <param name="comDayCqCqNotifcationImpl"> (optional)</param>
        /// <param name="comDayCqCqReplicationAudit"> (optional)</param>
        /// <param name="comDayCqCqSearchExt"> (optional)</param>
        /// <param name="comDayCqDamCqDamAnnotationPrint"> (optional)</param>
        /// <param name="comDayCqDamCqDamAssetUsage"> (optional)</param>
        /// <param name="comDayCqDamCqDamS7dam"> (optional)</param>
        /// <param name="comDayCqDamCqDamSimilaritysearch"> (optional)</param>
        /// <param name="comDayCqDamDamWebdavSupport"> (optional)</param>
        /// <param name="comDayCqPreUpgradeTasks"> (optional)</param>
        /// <param name="comDayCqReplicationExtensions"> (optional)</param>
        /// <param name="comDayCqWcmCqMsmCore"> (optional)</param>
        /// <param name="comDayCqWcmCqWcmTranslation"> (optional)</param>
        /// <param name="dayCommonsJrawio"> (optional)</param>
        /// <param name="orgApacheAriesJmxWhiteboard"> (optional)</param>
        /// <param name="orgApacheFelixHttpSslfilter"> (optional)</param>
        /// <param name="orgApacheFelixOrgApacheFelixThreaddump"> (optional)</param>
        /// <param name="orgApacheFelixWebconsolePluginsDs"> (optional)</param>
        /// <param name="orgApacheFelixWebconsolePluginsEvent"> (optional)</param>
        /// <param name="orgApacheFelixWebconsolePluginsMemoryusage"> (optional)</param>
        /// <param name="orgApacheFelixWebconsolePluginsPackageadmin"> (optional)</param>
        /// <param name="orgApacheJackrabbitOakAuthLdap"> (optional)</param>
        /// <param name="orgApacheJackrabbitOakSegmentTar"> (optional)</param>
        /// <param name="orgApacheJackrabbitOakSolrOsgi"> (optional)</param>
        /// <param name="orgApacheSlingBundleresourceImpl"> (optional)</param>
        /// <param name="orgApacheSlingCommonsFsclassloader"> (optional)</param>
        /// <param name="orgApacheSlingCommonsLogWebconsole"> (optional)</param>
        /// <param name="orgApacheSlingDatasource"> (optional)</param>
        /// <param name="orgApacheSlingDiscoveryBase"> (optional)</param>
        /// <param name="orgApacheSlingDiscoveryOak"> (optional)</param>
        /// <param name="orgApacheSlingDiscoverySupport"> (optional)</param>
        /// <param name="orgApacheSlingDistributionApi"> (optional)</param>
        /// <param name="orgApacheSlingDistributionCore"> (optional)</param>
        /// <param name="orgApacheSlingExtensionsWebconsolesecurityprovider"> (optional)</param>
        /// <param name="orgApacheSlingHcWebconsole"> (optional)</param>
        /// <param name="orgApacheSlingInstallerConsole"> (optional)</param>
        /// <param name="orgApacheSlingInstallerProviderFile"> (optional)</param>
        /// <param name="orgApacheSlingInstallerProviderJcr"> (optional)</param>
        /// <param name="orgApacheSlingJcrDavex"> (optional)</param>
        /// <param name="orgApacheSlingJcrResourcesecurity"> (optional)</param>
        /// <param name="orgApacheSlingJmxProvider"> (optional)</param>
        /// <param name="orgApacheSlingLaunchpadInstaller"> (optional)</param>
        /// <param name="orgApacheSlingModelsImpl"> (optional)</param>
        /// <param name="orgApacheSlingRepoinitParser"> (optional)</param>
        /// <param name="orgApacheSlingResourceInventory"> (optional)</param>
        /// <param name="orgApacheSlingResourceresolver"> (optional)</param>
        /// <param name="orgApacheSlingScriptingJavascript"> (optional)</param>
        /// <param name="orgApacheSlingScriptingJst"> (optional)</param>
        /// <param name="orgApacheSlingScriptingSightlyJsProvider"> (optional)</param>
        /// <param name="orgApacheSlingScriptingSightlyModelsProvider"> (optional)</param>
        /// <param name="orgApacheSlingSecurity"> (optional)</param>
        /// <param name="orgApacheSlingServletsCompat"> (optional)</param>
        /// <param name="orgApacheSlingServletsGet"> (optional)</param>
        /// <param name="orgApacheSlingStartupfilterDisabler"> (optional)</param>
        /// <param name="orgApacheSlingTracer"> (optional)</param>
        /// <param name="weRetailClientAppCore"> (optional)</param>
        /// <returns>ComAdobeGraniteApicontrollerFilterResolverHookFactoryInfo</returns>
        ComAdobeGraniteApicontrollerFilterResolverHookFactoryInfo ComAdobeGraniteApicontrollerFilterResolverHookFactory(NancyContext context, bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, string comAdobeCqCdnCdnRewriter, string comAdobeCqCloudConfigComponents, string comAdobeCqCloudConfigCore, string comAdobeCqCloudConfigUi, string comAdobeCqComAdobeCqEditor, string comAdobeCqComAdobeCqProjectsCore, string comAdobeCqComAdobeCqProjectsWcmCore, string comAdobeCqComAdobeCqUiCommons, string comAdobeCqComAdobeCqWcmStyle, string comAdobeCqCqActivitymapIntegration, string comAdobeCqCqContexthubCommons, string comAdobeCqCqDtm, string comAdobeCqCqHealthcheck, string comAdobeCqCqMultisiteTargeting, string comAdobeCqCqPreUpgradeCleanup, string comAdobeCqCqProductInfoProvider, string comAdobeCqCqRestSites, string comAdobeCqCqSecurityHc, string comAdobeCqDamCqDamSvgHandler, string comAdobeCqDamCqScene7Imaging, string comAdobeCqDtmReactorCore, string comAdobeCqDtmReactorUi, string comAdobeCqExpJspelResolver, string comAdobeCqInboxCqInbox, string comAdobeCqJsonSchemaParser, string comAdobeCqMediaCqMediaPublishingDpsFpCore, string comAdobeCqMobileCqMobileCaas, string comAdobeCqMobileCqMobileIndexBuilder, string comAdobeCqMobileCqMobilePhonegapBuild, string comAdobeCqMyspell, string comAdobeCqSampleWeRetailCore, string comAdobeCqScreensComAdobeCqScreensDcc, string comAdobeCqScreensComAdobeCqScreensMqCore, string comAdobeCqSocialCqSocialAsProvider, string comAdobeCqSocialCqSocialBadgingBasicImpl, string comAdobeCqSocialCqSocialBadgingImpl, string comAdobeCqSocialCqSocialCalendarImpl, string comAdobeCqSocialCqSocialContentFragmentsImpl, string comAdobeCqSocialCqSocialEnablementImpl, string comAdobeCqSocialCqSocialGraphImpl, string comAdobeCqSocialCqSocialIdeationImpl, string comAdobeCqSocialCqSocialJcrProvider, string comAdobeCqSocialCqSocialMembersImpl, string comAdobeCqSocialCqSocialMsProvider, string comAdobeCqSocialCqSocialNotificationsChannelsWeb, string comAdobeCqSocialCqSocialNotificationsImpl, string comAdobeCqSocialCqSocialRdbProvider, string comAdobeCqSocialCqSocialScfImpl, string comAdobeCqSocialCqSocialScoringBasicImpl, string comAdobeCqSocialCqSocialScoringImpl, string comAdobeCqSocialCqSocialServiceusersImpl, string comAdobeCqSocialCqSocialSrpImpl, string comAdobeCqSocialCqSocialUgcbaseImpl, string comAdobeDamCqDamCfmImpl, string comAdobeFormsFoundationFormsFoundationBase, string comAdobeGraniteApicontroller, string comAdobeGraniteAssetCore, string comAdobeGraniteAuthSso, string comAdobeGraniteBundlesHcImpl, string comAdobeGraniteCompatRouter, string comAdobeGraniteConf, string comAdobeGraniteConfUiCore, string comAdobeGraniteCors, string comAdobeGraniteCrxExplorer, string comAdobeGraniteCrxdeLite, string comAdobeGraniteCryptoConfig, string comAdobeGraniteCryptoExtension, string comAdobeGraniteCryptoFile, string comAdobeGraniteCryptoJcr, string comAdobeGraniteCsrf, string comAdobeGraniteDistributionCore, string comAdobeGraniteDropwizardMetrics, string comAdobeGraniteFragsImpl, string comAdobeGraniteGibson, string comAdobeGraniteInfocollector, string comAdobeGraniteInstallerFactoryPackages, string comAdobeGraniteJettySsl, string comAdobeGraniteJobsAsync, string comAdobeGraniteMaintenanceOak, string comAdobeGraniteMonitoringCore, string comAdobeGraniteQueries, string comAdobeGraniteReplicationHcImpl, string comAdobeGraniteRepositoryChecker, string comAdobeGraniteRepositoryHcImpl, string comAdobeGraniteRestAssets, string comAdobeGraniteSecurityUi, string comAdobeGraniteStartup, string comAdobeGraniteTagsoup, string comAdobeGraniteTaskmanagementCore, string comAdobeGraniteTaskmanagementWorkflow, string comAdobeGraniteUiClientlibsCompilerLess, string comAdobeGraniteUiClientlibsProcessorGcc, string comAdobeGraniteWebconsolePlugins, string comAdobeGraniteWorkflowConsole, string comAdobeXmpWorkerFilesNativeFragmentLinux, string comAdobeXmpWorkerFilesNativeFragmentMacosx, string comAdobeXmpWorkerFilesNativeFragmentWin, string comDayCommonsOsgiWrapperSimpleJndi, string comDayCqCqAuthhandler, string comDayCqCqCompatConfigupdate, string comDayCqCqLicensebranding, string comDayCqCqNotifcationImpl, string comDayCqCqReplicationAudit, string comDayCqCqSearchExt, string comDayCqDamCqDamAnnotationPrint, string comDayCqDamCqDamAssetUsage, string comDayCqDamCqDamS7dam, string comDayCqDamCqDamSimilaritysearch, string comDayCqDamDamWebdavSupport, string comDayCqPreUpgradeTasks, string comDayCqReplicationExtensions, string comDayCqWcmCqMsmCore, string comDayCqWcmCqWcmTranslation, string dayCommonsJrawio, string orgApacheAriesJmxWhiteboard, string orgApacheFelixHttpSslfilter, string orgApacheFelixOrgApacheFelixThreaddump, string orgApacheFelixWebconsolePluginsDs, string orgApacheFelixWebconsolePluginsEvent, string orgApacheFelixWebconsolePluginsMemoryusage, string orgApacheFelixWebconsolePluginsPackageadmin, string orgApacheJackrabbitOakAuthLdap, string orgApacheJackrabbitOakSegmentTar, string orgApacheJackrabbitOakSolrOsgi, string orgApacheSlingBundleresourceImpl, string orgApacheSlingCommonsFsclassloader, string orgApacheSlingCommonsLogWebconsole, string orgApacheSlingDatasource, string orgApacheSlingDiscoveryBase, string orgApacheSlingDiscoveryOak, string orgApacheSlingDiscoverySupport, string orgApacheSlingDistributionApi, string orgApacheSlingDistributionCore, string orgApacheSlingExtensionsWebconsolesecurityprovider, string orgApacheSlingHcWebconsole, string orgApacheSlingInstallerConsole, string orgApacheSlingInstallerProviderFile, string orgApacheSlingInstallerProviderJcr, string orgApacheSlingJcrDavex, string orgApacheSlingJcrResourcesecurity, string orgApacheSlingJmxProvider, string orgApacheSlingLaunchpadInstaller, string orgApacheSlingModelsImpl, string orgApacheSlingRepoinitParser, string orgApacheSlingResourceInventory, string orgApacheSlingResourceresolver, string orgApacheSlingScriptingJavascript, string orgApacheSlingScriptingJst, string orgApacheSlingScriptingSightlyJsProvider, string orgApacheSlingScriptingSightlyModelsProvider, string orgApacheSlingSecurity, string orgApacheSlingServletsCompat, string orgApacheSlingServletsGet, string orgApacheSlingStartupfilterDisabler, string orgApacheSlingTracer, string weRetailClientAppCore);

        /// <summary>
        /// 
        /// </summary>
        /// <param name="context">Context of request</param>
        /// <param name="post"> (optional)</param>
        /// <param name="apply"> (optional)</param>
        /// <param name="delete"> (optional)</param>
        /// <param name="action"> (optional)</param>
        /// <param name="location"> (optional)</param>
        /// <param name="propertylist"> (optional)</param>
        /// <param name="path"> (optional)</param>
        /// <param name="serviceRanking"> (optional)</param>
        /// <returns>ComAdobeGraniteAuthCertImplClientCertAuthHandlerInfo</returns>
        ComAdobeGraniteAuthCertImplClientCertAuthHandlerInfo ComAdobeGraniteAuthCertImplClientCertAuthHandler(NancyContext context, bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, string path, int? serviceRanking);

        /// <summary>
        /// 
        /// </summary>
        /// <param name="context">Context of request</param>
        /// <param name="post"> (optional)</param>
        /// <param name="apply"> (optional)</param>
        /// <param name="delete"> (optional)</param>
        /// <param name="action"> (optional)</param>
        /// <param name="location"> (optional)</param>
        /// <param name="propertylist"> (optional)</param>
        /// <param name="configid"> (optional)</param>
        /// <param name="scope"> (optional)</param>
        /// <returns>ComAdobeGraniteAuthImsInfo</returns>
        ComAdobeGraniteAuthImsInfo ComAdobeGraniteAuthIms(NancyContext context, bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, string configid, string scope);

        /// <summary>
        /// 
        /// </summary>
        /// <param name="context">Context of request</param>
        /// <param name="post"> (optional)</param>
        /// <param name="apply"> (optional)</param>
        /// <param name="delete"> (optional)</param>
        /// <param name="action"> (optional)</param>
        /// <param name="location"> (optional)</param>
        /// <param name="propertylist"> (optional)</param>
        /// <param name="oauthProviderId"> (optional)</param>
        /// <returns>ComAdobeGraniteAuthImsImplExternalUserIdMappingProviderExtensionInfo</returns>
        ComAdobeGraniteAuthImsImplExternalUserIdMappingProviderExtensionInfo ComAdobeGraniteAuthImsImplExternalUserIdMappingProviderExtension(NancyContext context, bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, string oauthProviderId);

        /// <summary>
        /// 
        /// </summary>
        /// <param name="context">Context of request</param>
        /// <param name="post"> (optional)</param>
        /// <param name="apply"> (optional)</param>
        /// <param name="delete"> (optional)</param>
        /// <param name="action"> (optional)</param>
        /// <param name="location"> (optional)</param>
        /// <param name="propertylist"> (optional)</param>
        /// <param name="authImsClientSecret"> (optional)</param>
        /// <param name="customizerType"> (optional)</param>
        /// <returns>ComAdobeGraniteAuthImsImplIMSAccessTokenRequestCustomizerImplInfo</returns>
        ComAdobeGraniteAuthImsImplIMSAccessTokenRequestCustomizerImplInfo ComAdobeGraniteAuthImsImplIMSAccessTokenRequestCustomizerImpl(NancyContext context, bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, string authImsClientSecret, string customizerType);

        /// <summary>
        /// 
        /// </summary>
        /// <param name="context">Context of request</param>
        /// <param name="post"> (optional)</param>
        /// <param name="apply"> (optional)</param>
        /// <param name="delete"> (optional)</param>
        /// <param name="action"> (optional)</param>
        /// <param name="location"> (optional)</param>
        /// <param name="propertylist"> (optional)</param>
        /// <param name="oauthProviderId"> (optional)</param>
        /// <returns>ComAdobeGraniteAuthImsImplIMSInstanceCredentialsValidatorInfo</returns>
        ComAdobeGraniteAuthImsImplIMSInstanceCredentialsValidatorInfo ComAdobeGraniteAuthImsImplIMSInstanceCredentialsValidator(NancyContext context, bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, string oauthProviderId);

        /// <summary>
        /// 
        /// </summary>
        /// <param name="context">Context of request</param>
        /// <param name="post"> (optional)</param>
        /// <param name="apply"> (optional)</param>
        /// <param name="delete"> (optional)</param>
        /// <param name="action"> (optional)</param>
        /// <param name="location"> (optional)</param>
        /// <param name="propertylist"> (optional)</param>
        /// <param name="oauthProviderId"> (optional)</param>
        /// <param name="oauthProviderImsAuthorizationUrl"> (optional)</param>
        /// <param name="oauthProviderImsTokenUrl"> (optional)</param>
        /// <param name="oauthProviderImsProfileUrl"> (optional)</param>
        /// <param name="oauthProviderImsExtendedDetailsUrls"> (optional)</param>
        /// <param name="oauthProviderImsValidateTokenUrl"> (optional)</param>
        /// <param name="oauthProviderImsSessionProperty"> (optional)</param>
        /// <param name="oauthProviderImsServiceTokenClientId"> (optional)</param>
        /// <param name="oauthProviderImsServiceTokenClientSecret"> (optional)</param>
        /// <param name="oauthProviderImsServiceToken"> (optional)</param>
        /// <param name="imsOrgRef"> (optional)</param>
        /// <param name="imsGroupMapping"> (optional)</param>
        /// <param name="oauthProviderImsOnlyLicenseGroup"> (optional)</param>
        /// <returns>ComAdobeGraniteAuthImsImplIMSProviderImplInfo</returns>
        ComAdobeGraniteAuthImsImplIMSProviderImplInfo ComAdobeGraniteAuthImsImplIMSProviderImpl(NancyContext context, bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, string oauthProviderId, string oauthProviderImsAuthorizationUrl, string oauthProviderImsTokenUrl, string oauthProviderImsProfileUrl, List<string> oauthProviderImsExtendedDetailsUrls, string oauthProviderImsValidateTokenUrl, string oauthProviderImsSessionProperty, string oauthProviderImsServiceTokenClientId, string oauthProviderImsServiceTokenClientSecret, string oauthProviderImsServiceToken, string imsOrgRef, List<string> imsGroupMapping, bool? oauthProviderImsOnlyLicenseGroup);

        /// <summary>
        /// 
        /// </summary>
        /// <param name="context">Context of request</param>
        /// <param name="post"> (optional)</param>
        /// <param name="apply"> (optional)</param>
        /// <param name="delete"> (optional)</param>
        /// <param name="action"> (optional)</param>
        /// <param name="location"> (optional)</param>
        /// <param name="propertylist"> (optional)</param>
        /// <param name="oauthConfigmanagerImsConfigid"> (optional)</param>
        /// <param name="imsOwningEntity"> (optional)</param>
        /// <param name="aemInstanceId"> (optional)</param>
        /// <param name="imsServiceCode"> (optional)</param>
        /// <returns>ComAdobeGraniteAuthImsImplImsConfigProviderImplInfo</returns>
        ComAdobeGraniteAuthImsImplImsConfigProviderImplInfo ComAdobeGraniteAuthImsImplImsConfigProviderImpl(NancyContext context, bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, string oauthConfigmanagerImsConfigid, string imsOwningEntity, string aemInstanceId, string imsServiceCode);

        /// <summary>
        /// 
        /// </summary>
        /// <param name="context">Context of request</param>
        /// <param name="post"> (optional)</param>
        /// <param name="apply"> (optional)</param>
        /// <param name="delete"> (optional)</param>
        /// <param name="action"> (optional)</param>
        /// <param name="location"> (optional)</param>
        /// <param name="propertylist"> (optional)</param>
        /// <param name="name"> (optional)</param>
        /// <param name="authTokenProviderTitle"> (optional)</param>
        /// <param name="authTokenProviderDefaultClaims"> (optional)</param>
        /// <param name="authTokenProviderEndpoint"> (optional)</param>
        /// <param name="authAccessTokenRequest"> (optional)</param>
        /// <param name="authTokenProviderKeypairAlias"> (optional)</param>
        /// <param name="authTokenProviderConnTimeout"> (optional)</param>
        /// <param name="authTokenProviderSoTimeout"> (optional)</param>
        /// <param name="authTokenProviderClientId"> (optional)</param>
        /// <param name="authTokenProviderScope"> (optional)</param>
        /// <param name="authTokenProviderReuseAccessToken"> (optional)</param>
        /// <param name="authTokenProviderRelaxedSsl"> (optional)</param>
        /// <param name="tokenRequestCustomizerType"> (optional)</param>
        /// <param name="authTokenValidatorType"> (optional)</param>
        /// <returns>ComAdobeGraniteAuthOauthAccesstokenProviderInfo</returns>
        ComAdobeGraniteAuthOauthAccesstokenProviderInfo ComAdobeGraniteAuthOauthAccesstokenProvider(NancyContext context, bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, string name, string authTokenProviderTitle, List<string> authTokenProviderDefaultClaims, string authTokenProviderEndpoint, string authAccessTokenRequest, string authTokenProviderKeypairAlias, int? authTokenProviderConnTimeout, int? authTokenProviderSoTimeout, string authTokenProviderClientId, string authTokenProviderScope, bool? authTokenProviderReuseAccessToken, bool? authTokenProviderRelaxedSsl, string tokenRequestCustomizerType, string authTokenValidatorType);

        /// <summary>
        /// 
        /// </summary>
        /// <param name="context">Context of request</param>
        /// <param name="post"> (optional)</param>
        /// <param name="apply"> (optional)</param>
        /// <param name="delete"> (optional)</param>
        /// <param name="action"> (optional)</param>
        /// <param name="location"> (optional)</param>
        /// <param name="propertylist"> (optional)</param>
        /// <param name="path"> (optional)</param>
        /// <param name="oauthClientIdsAllowed"> (optional)</param>
        /// <param name="authBearerSyncIms"> (optional)</param>
        /// <param name="authTokenRequestParameter"> (optional)</param>
        /// <param name="oauthBearerConfigid"> (optional)</param>
        /// <param name="oauthJwtSupport"> (optional)</param>
        /// <returns>ComAdobeGraniteAuthOauthImplBearerAuthenticationHandlerInfo</returns>
        ComAdobeGraniteAuthOauthImplBearerAuthenticationHandlerInfo ComAdobeGraniteAuthOauthImplBearerAuthenticationHandler(NancyContext context, bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, string path, List<string> oauthClientIdsAllowed, bool? authBearerSyncIms, string authTokenRequestParameter, string oauthBearerConfigid, bool? oauthJwtSupport);

        /// <summary>
        /// 
        /// </summary>
        /// <param name="context">Context of request</param>
        /// <param name="post"> (optional)</param>
        /// <param name="apply"> (optional)</param>
        /// <param name="delete"> (optional)</param>
        /// <param name="action"> (optional)</param>
        /// <param name="location"> (optional)</param>
        /// <param name="propertylist"> (optional)</param>
        /// <param name="authTokenValidatorType"> (optional)</param>
        /// <returns>ComAdobeGraniteAuthOauthImplDefaultTokenValidatorImplInfo</returns>
        ComAdobeGraniteAuthOauthImplDefaultTokenValidatorImplInfo ComAdobeGraniteAuthOauthImplDefaultTokenValidatorImpl(NancyContext context, bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, string authTokenValidatorType);

        /// <summary>
        /// 
        /// </summary>
        /// <param name="context">Context of request</param>
        /// <param name="post"> (optional)</param>
        /// <param name="apply"> (optional)</param>
        /// <param name="delete"> (optional)</param>
        /// <param name="action"> (optional)</param>
        /// <param name="location"> (optional)</param>
        /// <param name="propertylist"> (optional)</param>
        /// <param name="oauthProviderId"> (optional)</param>
        /// <returns>ComAdobeGraniteAuthOauthImplFacebookProviderImplInfo</returns>
        ComAdobeGraniteAuthOauthImplFacebookProviderImplInfo ComAdobeGraniteAuthOauthImplFacebookProviderImpl(NancyContext context, bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, string oauthProviderId);

        /// <summary>
        /// 
        /// </summary>
        /// <param name="context">Context of request</param>
        /// <param name="post"> (optional)</param>
        /// <param name="apply"> (optional)</param>
        /// <param name="delete"> (optional)</param>
        /// <param name="action"> (optional)</param>
        /// <param name="location"> (optional)</param>
        /// <param name="propertylist"> (optional)</param>
        /// <param name="oauthProviderId"> (optional)</param>
        /// <param name="oauthProviderGithubAuthorizationUrl"> (optional)</param>
        /// <param name="oauthProviderGithubTokenUrl"> (optional)</param>
        /// <param name="oauthProviderGithubProfileUrl"> (optional)</param>
        /// <returns>ComAdobeGraniteAuthOauthImplGithubProviderImplInfo</returns>
        ComAdobeGraniteAuthOauthImplGithubProviderImplInfo ComAdobeGraniteAuthOauthImplGithubProviderImpl(NancyContext context, bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, string oauthProviderId, string oauthProviderGithubAuthorizationUrl, string oauthProviderGithubTokenUrl, string oauthProviderGithubProfileUrl);

        /// <summary>
        /// 
        /// </summary>
        /// <param name="context">Context of request</param>
        /// <param name="post"> (optional)</param>
        /// <param name="apply"> (optional)</param>
        /// <param name="delete"> (optional)</param>
        /// <param name="action"> (optional)</param>
        /// <param name="location"> (optional)</param>
        /// <param name="propertylist"> (optional)</param>
        /// <param name="oauthProviderId"> (optional)</param>
        /// <param name="oauthProviderGraniteAuthorizationUrl"> (optional)</param>
        /// <param name="oauthProviderGraniteTokenUrl"> (optional)</param>
        /// <param name="oauthProviderGraniteProfileUrl"> (optional)</param>
        /// <param name="oauthProviderGraniteExtendedDetailsUrls"> (optional)</param>
        /// <returns>ComAdobeGraniteAuthOauthImplGraniteProviderInfo</returns>
        ComAdobeGraniteAuthOauthImplGraniteProviderInfo ComAdobeGraniteAuthOauthImplGraniteProvider(NancyContext context, bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, string oauthProviderId, string oauthProviderGraniteAuthorizationUrl, string oauthProviderGraniteTokenUrl, string oauthProviderGraniteProfileUrl, string oauthProviderGraniteExtendedDetailsUrls);

        /// <summary>
        /// 
        /// </summary>
        /// <param name="context">Context of request</param>
        /// <param name="post"> (optional)</param>
        /// <param name="apply"> (optional)</param>
        /// <param name="delete"> (optional)</param>
        /// <param name="action"> (optional)</param>
        /// <param name="location"> (optional)</param>
        /// <param name="propertylist"> (optional)</param>
        /// <param name="oauthCookieLoginTimeout"> (optional)</param>
        /// <param name="oauthCookieMaxAge"> (optional)</param>
        /// <returns>ComAdobeGraniteAuthOauthImplHelperProviderConfigManagerInfo</returns>
        ComAdobeGraniteAuthOauthImplHelperProviderConfigManagerInfo ComAdobeGraniteAuthOauthImplHelperProviderConfigManager(NancyContext context, bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, string oauthCookieLoginTimeout, string oauthCookieMaxAge);

        /// <summary>
        /// 
        /// </summary>
        /// <param name="context">Context of request</param>
        /// <param name="post"> (optional)</param>
        /// <param name="apply"> (optional)</param>
        /// <param name="delete"> (optional)</param>
        /// <param name="action"> (optional)</param>
        /// <param name="location"> (optional)</param>
        /// <param name="propertylist"> (optional)</param>
        /// <param name="oauthCookieLoginTimeout"> (optional)</param>
        /// <param name="oauthCookieMaxAge"> (optional)</param>
        /// <returns>ComAdobeGraniteAuthOauthImplHelperProviderConfigManagerInternalInfo</returns>
        ComAdobeGraniteAuthOauthImplHelperProviderConfigManagerInternalInfo ComAdobeGraniteAuthOauthImplHelperProviderConfigManagerInternal(NancyContext context, bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, string oauthCookieLoginTimeout, string oauthCookieMaxAge);

        /// <summary>
        /// 
        /// </summary>
        /// <param name="context">Context of request</param>
        /// <param name="post"> (optional)</param>
        /// <param name="apply"> (optional)</param>
        /// <param name="delete"> (optional)</param>
        /// <param name="action"> (optional)</param>
        /// <param name="location"> (optional)</param>
        /// <param name="propertylist"> (optional)</param>
        /// <param name="path"> (optional)</param>
        /// <returns>ComAdobeGraniteAuthOauthImplOAuthAuthenticationHandlerInfo</returns>
        ComAdobeGraniteAuthOauthImplOAuthAuthenticationHandlerInfo ComAdobeGraniteAuthOauthImplOAuthAuthenticationHandler(NancyContext context, bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, string path);

        /// <summary>
        /// 
        /// </summary>
        /// <param name="context">Context of request</param>
        /// <param name="post"> (optional)</param>
        /// <param name="apply"> (optional)</param>
        /// <param name="delete"> (optional)</param>
        /// <param name="action"> (optional)</param>
        /// <param name="location"> (optional)</param>
        /// <param name="propertylist"> (optional)</param>
        /// <param name="oauthProviderId"> (optional)</param>
        /// <returns>ComAdobeGraniteAuthOauthImplTwitterProviderImplInfo</returns>
        ComAdobeGraniteAuthOauthImplTwitterProviderImplInfo ComAdobeGraniteAuthOauthImplTwitterProviderImpl(NancyContext context, bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, string oauthProviderId);

        /// <summary>
        /// 
        /// </summary>
        /// <param name="context">Context of request</param>
        /// <param name="post"> (optional)</param>
        /// <param name="apply"> (optional)</param>
        /// <param name="delete"> (optional)</param>
        /// <param name="action"> (optional)</param>
        /// <param name="location"> (optional)</param>
        /// <param name="propertylist"> (optional)</param>
        /// <param name="oauthConfigId"> (optional)</param>
        /// <param name="oauthClientId"> (optional)</param>
        /// <param name="oauthClientSecret"> (optional)</param>
        /// <param name="oauthScope"> (optional)</param>
        /// <param name="oauthConfigProviderId"> (optional)</param>
        /// <param name="oauthCreateUsers"> (optional)</param>
        /// <param name="oauthUseridProperty"> (optional)</param>
        /// <param name="forceStrictUsernameMatching"> (optional)</param>
        /// <param name="oauthEncodeUserids"> (optional)</param>
        /// <param name="oauthHashUserids"> (optional)</param>
        /// <param name="oauthCallBackUrl"> (optional)</param>
        /// <param name="oauthAccessTokenPersist"> (optional)</param>
        /// <param name="oauthAccessTokenPersistCookie"> (optional)</param>
        /// <param name="oauthCsrfStateProtection"> (optional)</param>
        /// <param name="oauthRedirectRequestParams"> (optional)</param>
        /// <param name="oauthConfigSiblingsAllow"> (optional)</param>
        /// <returns>ComAdobeGraniteAuthOauthProviderInfo</returns>
        ComAdobeGraniteAuthOauthProviderInfo ComAdobeGraniteAuthOauthProvider(NancyContext context, bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, string oauthConfigId, string oauthClientId, string oauthClientSecret, List<string> oauthScope, string oauthConfigProviderId, bool? oauthCreateUsers, string oauthUseridProperty, bool? forceStrictUsernameMatching, bool? oauthEncodeUserids, bool? oauthHashUserids, string oauthCallBackUrl, bool? oauthAccessTokenPersist, bool? oauthAccessTokenPersistCookie, bool? oauthCsrfStateProtection, bool? oauthRedirectRequestParams, bool? oauthConfigSiblingsAllow);

        /// <summary>
        /// 
        /// </summary>
        /// <param name="context">Context of request</param>
        /// <param name="post"> (optional)</param>
        /// <param name="apply"> (optional)</param>
        /// <param name="delete"> (optional)</param>
        /// <param name="action"> (optional)</param>
        /// <param name="location"> (optional)</param>
        /// <param name="propertylist"> (optional)</param>
        /// <param name="supportedPaths"> (optional)</param>
        /// <returns>ComAdobeGraniteAuthRequirementImplDefaultRequirementHandlerInfo</returns>
        ComAdobeGraniteAuthRequirementImplDefaultRequirementHandlerInfo ComAdobeGraniteAuthRequirementImplDefaultRequirementHandler(NancyContext context, bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, List<string> supportedPaths);

        /// <summary>
        /// 
        /// </summary>
        /// <param name="context">Context of request</param>
        /// <param name="post"> (optional)</param>
        /// <param name="apply"> (optional)</param>
        /// <param name="delete"> (optional)</param>
        /// <param name="action"> (optional)</param>
        /// <param name="location"> (optional)</param>
        /// <param name="propertylist"> (optional)</param>
        /// <param name="path"> (optional)</param>
        /// <param name="serviceRanking"> (optional)</param>
        /// <param name="idpUrl"> (optional)</param>
        /// <param name="idpCertAlias"> (optional)</param>
        /// <param name="idpHttpRedirect"> (optional)</param>
        /// <param name="serviceProviderEntityId"> (optional)</param>
        /// <param name="assertionConsumerServiceURL"> (optional)</param>
        /// <param name="spPrivateKeyAlias"> (optional)</param>
        /// <param name="keyStorePassword"> (optional)</param>
        /// <param name="defaultRedirectUrl"> (optional)</param>
        /// <param name="userIDAttribute"> (optional)</param>
        /// <param name="useEncryption"> (optional)</param>
        /// <param name="createUser"> (optional)</param>
        /// <param name="userIntermediatePath"> (optional)</param>
        /// <param name="addGroupMemberships"> (optional)</param>
        /// <param name="groupMembershipAttribute"> (optional)</param>
        /// <param name="defaultGroups"> (optional)</param>
        /// <param name="nameIdFormat"> (optional)</param>
        /// <param name="synchronizeAttributes"> (optional)</param>
        /// <param name="handleLogout"> (optional)</param>
        /// <param name="logoutUrl"> (optional)</param>
        /// <param name="clockTolerance"> (optional)</param>
        /// <param name="digestMethod"> (optional)</param>
        /// <param name="signatureMethod"> (optional)</param>
        /// <param name="identitySyncType"> (optional)</param>
        /// <param name="idpIdentifier"> (optional)</param>
        /// <returns>ComAdobeGraniteAuthSamlSamlAuthenticationHandlerInfo</returns>
        ComAdobeGraniteAuthSamlSamlAuthenticationHandlerInfo ComAdobeGraniteAuthSamlSamlAuthenticationHandler(NancyContext context, bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, List<string> path, int? serviceRanking, string idpUrl, string idpCertAlias, bool? idpHttpRedirect, string serviceProviderEntityId, string assertionConsumerServiceURL, string spPrivateKeyAlias, string keyStorePassword, string defaultRedirectUrl, string userIDAttribute, bool? useEncryption, bool? createUser, string userIntermediatePath, bool? addGroupMemberships, string groupMembershipAttribute, List<string> defaultGroups, string nameIdFormat, List<string> synchronizeAttributes, bool? handleLogout, string logoutUrl, int? clockTolerance, string digestMethod, string signatureMethod, string identitySyncType, string idpIdentifier);

        /// <summary>
        /// 
        /// </summary>
        /// <param name="context">Context of request</param>
        /// <param name="post"> (optional)</param>
        /// <param name="apply"> (optional)</param>
        /// <param name="delete"> (optional)</param>
        /// <param name="action"> (optional)</param>
        /// <param name="location"> (optional)</param>
        /// <param name="propertylist"> (optional)</param>
        /// <param name="path"> (optional)</param>
        /// <param name="serviceRanking"> (optional)</param>
        /// <param name="jaasControlFlag"> (optional)</param>
        /// <param name="jaasRealmName"> (optional)</param>
        /// <param name="jaasRanking"> (optional)</param>
        /// <param name="headers"> (optional)</param>
        /// <param name="cookies"> (optional)</param>
        /// <param name="parameters"> (optional)</param>
        /// <param name="usermap"> (optional)</param>
        /// <param name="format"> (optional)</param>
        /// <param name="trustedCredentialsAttribute"> (optional)</param>
        /// <returns>ComAdobeGraniteAuthSsoImplSsoAuthenticationHandlerInfo</returns>
        ComAdobeGraniteAuthSsoImplSsoAuthenticationHandlerInfo ComAdobeGraniteAuthSsoImplSsoAuthenticationHandler(NancyContext context, bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, string path, int? serviceRanking, string jaasControlFlag, string jaasRealmName, int? jaasRanking, List<string> headers, List<string> cookies, List<string> parameters, List<string> usermap, string format, string trustedCredentialsAttribute);

        /// <summary>
        /// 
        /// </summary>
        /// <param name="context">Context of request</param>
        /// <param name="post"> (optional)</param>
        /// <param name="apply"> (optional)</param>
        /// <param name="delete"> (optional)</param>
        /// <param name="action"> (optional)</param>
        /// <param name="location"> (optional)</param>
        /// <param name="propertylist"> (optional)</param>
        /// <param name="hcTags"> (optional)</param>
        /// <param name="minimumCodeCacheSize"> (optional)</param>
        /// <returns>ComAdobeGraniteBundlesHcImplCodeCacheHealthCheckInfo</returns>
        ComAdobeGraniteBundlesHcImplCodeCacheHealthCheckInfo ComAdobeGraniteBundlesHcImplCodeCacheHealthCheck(NancyContext context, bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, List<string> hcTags, int? minimumCodeCacheSize);

        /// <summary>
        /// 
        /// </summary>
        /// <param name="context">Context of request</param>
        /// <param name="post"> (optional)</param>
        /// <param name="apply"> (optional)</param>
        /// <param name="delete"> (optional)</param>
        /// <param name="action"> (optional)</param>
        /// <param name="location"> (optional)</param>
        /// <param name="propertylist"> (optional)</param>
        /// <param name="hcTags"> (optional)</param>
        /// <returns>ComAdobeGraniteBundlesHcImplCrxdeSupportBundleHealthCheckInfo</returns>
        ComAdobeGraniteBundlesHcImplCrxdeSupportBundleHealthCheckInfo ComAdobeGraniteBundlesHcImplCrxdeSupportBundleHealthCheck(NancyContext context, bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, List<string> hcTags);

        /// <summary>
        /// 
        /// </summary>
        /// <param name="context">Context of request</param>
        /// <param name="post"> (optional)</param>
        /// <param name="apply"> (optional)</param>
        /// <param name="delete"> (optional)</param>
        /// <param name="action"> (optional)</param>
        /// <param name="location"> (optional)</param>
        /// <param name="propertylist"> (optional)</param>
        /// <param name="hcTags"> (optional)</param>
        /// <returns>ComAdobeGraniteBundlesHcImplDavExBundleHealthCheckInfo</returns>
        ComAdobeGraniteBundlesHcImplDavExBundleHealthCheckInfo ComAdobeGraniteBundlesHcImplDavExBundleHealthCheck(NancyContext context, bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, List<string> hcTags);

        /// <summary>
        /// 
        /// </summary>
        /// <param name="context">Context of request</param>
        /// <param name="post"> (optional)</param>
        /// <param name="apply"> (optional)</param>
        /// <param name="delete"> (optional)</param>
        /// <param name="action"> (optional)</param>
        /// <param name="location"> (optional)</param>
        /// <param name="propertylist"> (optional)</param>
        /// <param name="hcTags"> (optional)</param>
        /// <param name="ignoredBundles"> (optional)</param>
        /// <returns>ComAdobeGraniteBundlesHcImplInactiveBundlesHealthCheckInfo</returns>
        ComAdobeGraniteBundlesHcImplInactiveBundlesHealthCheckInfo ComAdobeGraniteBundlesHcImplInactiveBundlesHealthCheck(NancyContext context, bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, List<string> hcTags, List<string> ignoredBundles);

        /// <summary>
        /// 
        /// </summary>
        /// <param name="context">Context of request</param>
        /// <param name="post"> (optional)</param>
        /// <param name="apply"> (optional)</param>
        /// <param name="delete"> (optional)</param>
        /// <param name="action"> (optional)</param>
        /// <param name="location"> (optional)</param>
        /// <param name="propertylist"> (optional)</param>
        /// <param name="hcTags"> (optional)</param>
        /// <param name="maxQueuedJobs"> (optional)</param>
        /// <returns>ComAdobeGraniteBundlesHcImplJobsHealthCheckInfo</returns>
        ComAdobeGraniteBundlesHcImplJobsHealthCheckInfo ComAdobeGraniteBundlesHcImplJobsHealthCheck(NancyContext context, bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, List<string> hcTags, int? maxQueuedJobs);

        /// <summary>
        /// 
        /// </summary>
        /// <param name="context">Context of request</param>
        /// <param name="post"> (optional)</param>
        /// <param name="apply"> (optional)</param>
        /// <param name="delete"> (optional)</param>
        /// <param name="action"> (optional)</param>
        /// <param name="location"> (optional)</param>
        /// <param name="propertylist"> (optional)</param>
        /// <param name="hcTags"> (optional)</param>
        /// <returns>ComAdobeGraniteBundlesHcImplSlingGetServletHealthCheckInfo</returns>
        ComAdobeGraniteBundlesHcImplSlingGetServletHealthCheckInfo ComAdobeGraniteBundlesHcImplSlingGetServletHealthCheck(NancyContext context, bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, List<string> hcTags);

        /// <summary>
        /// 
        /// </summary>
        /// <param name="context">Context of request</param>
        /// <param name="post"> (optional)</param>
        /// <param name="apply"> (optional)</param>
        /// <param name="delete"> (optional)</param>
        /// <param name="action"> (optional)</param>
        /// <param name="location"> (optional)</param>
        /// <param name="propertylist"> (optional)</param>
        /// <param name="hcTags"> (optional)</param>
        /// <returns>ComAdobeGraniteBundlesHcImplSlingJavaScriptHandlerHealthCheckInfo</returns>
        ComAdobeGraniteBundlesHcImplSlingJavaScriptHandlerHealthCheckInfo ComAdobeGraniteBundlesHcImplSlingJavaScriptHandlerHealthCheck(NancyContext context, bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, List<string> hcTags);

        /// <summary>
        /// 
        /// </summary>
        /// <param name="context">Context of request</param>
        /// <param name="post"> (optional)</param>
        /// <param name="apply"> (optional)</param>
        /// <param name="delete"> (optional)</param>
        /// <param name="action"> (optional)</param>
        /// <param name="location"> (optional)</param>
        /// <param name="propertylist"> (optional)</param>
        /// <param name="hcTags"> (optional)</param>
        /// <returns>ComAdobeGraniteBundlesHcImplSlingJspScriptHandlerHealthCheckInfo</returns>
        ComAdobeGraniteBundlesHcImplSlingJspScriptHandlerHealthCheckInfo ComAdobeGraniteBundlesHcImplSlingJspScriptHandlerHealthCheck(NancyContext context, bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, List<string> hcTags);

        /// <summary>
        /// 
        /// </summary>
        /// <param name="context">Context of request</param>
        /// <param name="post"> (optional)</param>
        /// <param name="apply"> (optional)</param>
        /// <param name="delete"> (optional)</param>
        /// <param name="action"> (optional)</param>
        /// <param name="location"> (optional)</param>
        /// <param name="propertylist"> (optional)</param>
        /// <param name="hcTags"> (optional)</param>
        /// <returns>ComAdobeGraniteBundlesHcImplSlingReferrerFilterHealthCheckInfo</returns>
        ComAdobeGraniteBundlesHcImplSlingReferrerFilterHealthCheckInfo ComAdobeGraniteBundlesHcImplSlingReferrerFilterHealthCheck(NancyContext context, bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, List<string> hcTags);

        /// <summary>
        /// 
        /// </summary>
        /// <param name="context">Context of request</param>
        /// <param name="post"> (optional)</param>
        /// <param name="apply"> (optional)</param>
        /// <param name="delete"> (optional)</param>
        /// <param name="action"> (optional)</param>
        /// <param name="location"> (optional)</param>
        /// <param name="propertylist"> (optional)</param>
        /// <param name="hcTags"> (optional)</param>
        /// <returns>ComAdobeGraniteBundlesHcImplWebDavBundleHealthCheckInfo</returns>
        ComAdobeGraniteBundlesHcImplWebDavBundleHealthCheckInfo ComAdobeGraniteBundlesHcImplWebDavBundleHealthCheck(NancyContext context, bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, List<string> hcTags);

        /// <summary>
        /// 
        /// </summary>
        /// <param name="context">Context of request</param>
        /// <param name="post"> (optional)</param>
        /// <param name="apply"> (optional)</param>
        /// <param name="delete"> (optional)</param>
        /// <param name="action"> (optional)</param>
        /// <param name="location"> (optional)</param>
        /// <param name="propertylist"> (optional)</param>
        /// <param name="replicateCommentResourceTypes"> (optional)</param>
        /// <returns>ComAdobeGraniteCommentsInternalCommentReplicationContentFilterFacInfo</returns>
        ComAdobeGraniteCommentsInternalCommentReplicationContentFilterFacInfo ComAdobeGraniteCommentsInternalCommentReplicationContentFilterFac(NancyContext context, bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, List<string> replicateCommentResourceTypes);

        /// <summary>
        /// 
        /// </summary>
        /// <param name="context">Context of request</param>
        /// <param name="post"> (optional)</param>
        /// <param name="apply"> (optional)</param>
        /// <param name="delete"> (optional)</param>
        /// <param name="action"> (optional)</param>
        /// <param name="location"> (optional)</param>
        /// <param name="propertylist"> (optional)</param>
        /// <param name="compatgroups"> (optional)</param>
        /// <param name="enabled"> (optional)</param>
        /// <returns>ComAdobeGraniteCompatrouterImplCompatSwitchingServiceImplInfo</returns>
        ComAdobeGraniteCompatrouterImplCompatSwitchingServiceImplInfo ComAdobeGraniteCompatrouterImplCompatSwitchingServiceImpl(NancyContext context, bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, List<string> compatgroups, bool? enabled);

        /// <summary>
        /// 
        /// </summary>
        /// <param name="context">Context of request</param>
        /// <param name="post"> (optional)</param>
        /// <param name="apply"> (optional)</param>
        /// <param name="delete"> (optional)</param>
        /// <param name="action"> (optional)</param>
        /// <param name="location"> (optional)</param>
        /// <param name="propertylist"> (optional)</param>
        /// <param name="id"> (optional)</param>
        /// <param name="compatPath"> (optional)</param>
        /// <param name="newPath"> (optional)</param>
        /// <returns>ComAdobeGraniteCompatrouterImplRoutingConfigInfo</returns>
        ComAdobeGraniteCompatrouterImplRoutingConfigInfo ComAdobeGraniteCompatrouterImplRoutingConfig(NancyContext context, bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, string id, string compatPath, string newPath);

        /// <summary>
        /// 
        /// </summary>
        /// <param name="context">Context of request</param>
        /// <param name="post"> (optional)</param>
        /// <param name="apply"> (optional)</param>
        /// <param name="delete"> (optional)</param>
        /// <param name="action"> (optional)</param>
        /// <param name="location"> (optional)</param>
        /// <param name="propertylist"> (optional)</param>
        /// <param name="group"> (optional)</param>
        /// <param name="ids"> (optional)</param>
        /// <returns>ComAdobeGraniteCompatrouterImplSwitchMappingConfigInfo</returns>
        ComAdobeGraniteCompatrouterImplSwitchMappingConfigInfo ComAdobeGraniteCompatrouterImplSwitchMappingConfig(NancyContext context, bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, string group, List<string> ids);

        /// <summary>
        /// 
        /// </summary>
        /// <param name="context">Context of request</param>
        /// <param name="post"> (optional)</param>
        /// <param name="apply"> (optional)</param>
        /// <param name="delete"> (optional)</param>
        /// <param name="action"> (optional)</param>
        /// <param name="location"> (optional)</param>
        /// <param name="propertylist"> (optional)</param>
        /// <param name="enabled"> (optional)</param>
        /// <param name="fallbackPaths"> (optional)</param>
        /// <returns>ComAdobeGraniteConfImplRuntimeAwareConfigurationResourceResolvingInfo</returns>
        ComAdobeGraniteConfImplRuntimeAwareConfigurationResourceResolvingInfo ComAdobeGraniteConfImplRuntimeAwareConfigurationResourceResolving(NancyContext context, bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, bool? enabled, List<string> fallbackPaths);

        /// <summary>
        /// 
        /// </summary>
        /// <param name="context">Context of request</param>
        /// <param name="post"> (optional)</param>
        /// <param name="apply"> (optional)</param>
        /// <param name="delete"> (optional)</param>
        /// <param name="action"> (optional)</param>
        /// <param name="location"> (optional)</param>
        /// <param name="propertylist"> (optional)</param>
        /// <param name="comAdobeGraniteContexthubSilentMode"> (optional)</param>
        /// <param name="comAdobeGraniteContexthubShowUi"> (optional)</param>
        /// <returns>ComAdobeGraniteContexthubImplContextHubImplInfo</returns>
        ComAdobeGraniteContexthubImplContextHubImplInfo ComAdobeGraniteContexthubImplContextHubImpl(NancyContext context, bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, bool? comAdobeGraniteContexthubSilentMode, bool? comAdobeGraniteContexthubShowUi);

        /// <summary>
        /// 
        /// </summary>
        /// <param name="context">Context of request</param>
        /// <param name="post"> (optional)</param>
        /// <param name="apply"> (optional)</param>
        /// <param name="delete"> (optional)</param>
        /// <param name="action"> (optional)</param>
        /// <param name="location"> (optional)</param>
        /// <param name="propertylist"> (optional)</param>
        /// <param name="alloworigin"> (optional)</param>
        /// <param name="alloworiginregexp"> (optional)</param>
        /// <param name="allowedpaths"> (optional)</param>
        /// <param name="exposedheaders"> (optional)</param>
        /// <param name="maxage"> (optional)</param>
        /// <param name="supportedheaders"> (optional)</param>
        /// <param name="supportedmethods"> (optional)</param>
        /// <param name="supportscredentials"> (optional)</param>
        /// <returns>ComAdobeGraniteCorsImplCORSPolicyImplInfo</returns>
        ComAdobeGraniteCorsImplCORSPolicyImplInfo ComAdobeGraniteCorsImplCORSPolicyImpl(NancyContext context, bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, List<string> alloworigin, List<string> alloworiginregexp, List<string> allowedpaths, List<string> exposedheaders, int? maxage, List<string> supportedheaders, List<string> supportedmethods, bool? supportscredentials);

        /// <summary>
        /// 
        /// </summary>
        /// <param name="context">Context of request</param>
        /// <param name="post"> (optional)</param>
        /// <param name="apply"> (optional)</param>
        /// <param name="delete"> (optional)</param>
        /// <param name="action"> (optional)</param>
        /// <param name="location"> (optional)</param>
        /// <param name="propertylist"> (optional)</param>
        /// <param name="filterMethods"> (optional)</param>
        /// <param name="filterEnableSafeUserAgents"> (optional)</param>
        /// <param name="filterSafeUserAgents"> (optional)</param>
        /// <param name="filterExcludedPaths"> (optional)</param>
        /// <returns>ComAdobeGraniteCsrfImplCSRFFilterInfo</returns>
        ComAdobeGraniteCsrfImplCSRFFilterInfo ComAdobeGraniteCsrfImplCSRFFilter(NancyContext context, bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, List<string> filterMethods, bool? filterEnableSafeUserAgents, List<string> filterSafeUserAgents, List<string> filterExcludedPaths);

        /// <summary>
        /// 
        /// </summary>
        /// <param name="context">Context of request</param>
        /// <param name="post"> (optional)</param>
        /// <param name="apply"> (optional)</param>
        /// <param name="delete"> (optional)</param>
        /// <param name="action"> (optional)</param>
        /// <param name="location"> (optional)</param>
        /// <param name="propertylist"> (optional)</param>
        /// <param name="csrfTokenExpiresIn"> (optional)</param>
        /// <param name="slingAuthRequirements"> (optional)</param>
        /// <returns>ComAdobeGraniteCsrfImplCSRFServletInfo</returns>
        ComAdobeGraniteCsrfImplCSRFServletInfo ComAdobeGraniteCsrfImplCSRFServlet(NancyContext context, bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, int? csrfTokenExpiresIn, string slingAuthRequirements);

        /// <summary>
        /// 
        /// </summary>
        /// <param name="context">Context of request</param>
        /// <param name="post"> (optional)</param>
        /// <param name="apply"> (optional)</param>
        /// <param name="delete"> (optional)</param>
        /// <param name="action"> (optional)</param>
        /// <param name="location"> (optional)</param>
        /// <param name="propertylist"> (optional)</param>
        /// <param name="name"> (optional)</param>
        /// <param name="username"> (optional)</param>
        /// <param name="encryptedPassword"> (optional)</param>
        /// <returns>ComAdobeGraniteDistributionCoreImplCryptoDistributionTransportSeInfo</returns>
        ComAdobeGraniteDistributionCoreImplCryptoDistributionTransportSeInfo ComAdobeGraniteDistributionCoreImplCryptoDistributionTransportSe(NancyContext context, bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, string name, string username, string encryptedPassword);

        /// <summary>
        /// 
        /// </summary>
        /// <param name="context">Context of request</param>
        /// <param name="post"> (optional)</param>
        /// <param name="apply"> (optional)</param>
        /// <param name="delete"> (optional)</param>
        /// <param name="action"> (optional)</param>
        /// <param name="location"> (optional)</param>
        /// <param name="propertylist"> (optional)</param>
        /// <param name="enabled"> (optional)</param>
        /// <param name="agentName"> (optional)</param>
        /// <param name="diffPath"> (optional)</param>
        /// <param name="observedPath"> (optional)</param>
        /// <param name="serviceName"> (optional)</param>
        /// <param name="propertyNames"> (optional)</param>
        /// <param name="distributionDelay"> (optional)</param>
        /// <param name="serviceUserTarget"> (optional)</param>
        /// <returns>ComAdobeGraniteDistributionCoreImplDiffDiffChangesObserverInfo</returns>
        ComAdobeGraniteDistributionCoreImplDiffDiffChangesObserverInfo ComAdobeGraniteDistributionCoreImplDiffDiffChangesObserver(NancyContext context, bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, bool? enabled, string agentName, string diffPath, string observedPath, string serviceName, string propertyNames, int? distributionDelay, string serviceUserTarget);

        /// <summary>
        /// 
        /// </summary>
        /// <param name="context">Context of request</param>
        /// <param name="post"> (optional)</param>
        /// <param name="apply"> (optional)</param>
        /// <param name="delete"> (optional)</param>
        /// <param name="action"> (optional)</param>
        /// <param name="location"> (optional)</param>
        /// <param name="propertylist"> (optional)</param>
        /// <param name="diffPath"> (optional)</param>
        /// <param name="serviceName"> (optional)</param>
        /// <param name="serviceUserTarget"> (optional)</param>
        /// <returns>ComAdobeGraniteDistributionCoreImplDiffDiffEventListenerInfo</returns>
        ComAdobeGraniteDistributionCoreImplDiffDiffEventListenerInfo ComAdobeGraniteDistributionCoreImplDiffDiffEventListener(NancyContext context, bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, string diffPath, string serviceName, string serviceUserTarget);

        /// <summary>
        /// 
        /// </summary>
        /// <param name="context">Context of request</param>
        /// <param name="post"> (optional)</param>
        /// <param name="apply"> (optional)</param>
        /// <param name="delete"> (optional)</param>
        /// <param name="action"> (optional)</param>
        /// <param name="location"> (optional)</param>
        /// <param name="propertylist"> (optional)</param>
        /// <param name="importerName"> (optional)</param>
        /// <returns>ComAdobeGraniteDistributionCoreImplDistributionToReplicationEvenInfo</returns>
        ComAdobeGraniteDistributionCoreImplDistributionToReplicationEvenInfo ComAdobeGraniteDistributionCoreImplDistributionToReplicationEven(NancyContext context, bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, List<string> importerName);

        /// <summary>
        /// 
        /// </summary>
        /// <param name="context">Context of request</param>
        /// <param name="post"> (optional)</param>
        /// <param name="apply"> (optional)</param>
        /// <param name="delete"> (optional)</param>
        /// <param name="action"> (optional)</param>
        /// <param name="location"> (optional)</param>
        /// <param name="propertylist"> (optional)</param>
        /// <param name="providerName"> (optional)</param>
        /// <param name="forwardRequests"> (optional)</param>
        /// <returns>ComAdobeGraniteDistributionCoreImplReplicationAdaptersReplicatInfo</returns>
        ComAdobeGraniteDistributionCoreImplReplicationAdaptersReplicatInfo ComAdobeGraniteDistributionCoreImplReplicationAdaptersReplicat(NancyContext context, bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, string providerName, bool? forwardRequests);

        /// <summary>
        /// 
        /// </summary>
        /// <param name="context">Context of request</param>
        /// <param name="post"> (optional)</param>
        /// <param name="apply"> (optional)</param>
        /// <param name="delete"> (optional)</param>
        /// <param name="action"> (optional)</param>
        /// <param name="location"> (optional)</param>
        /// <param name="propertylist"> (optional)</param>
        /// <param name="forwardRequests"> (optional)</param>
        /// <returns>ComAdobeGraniteDistributionCoreImplReplicationDistributionTransInfo</returns>
        ComAdobeGraniteDistributionCoreImplReplicationDistributionTransInfo ComAdobeGraniteDistributionCoreImplReplicationDistributionTrans(NancyContext context, bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, bool? forwardRequests);

        /// <summary>
        /// 
        /// </summary>
        /// <param name="context">Context of request</param>
        /// <param name="post"> (optional)</param>
        /// <param name="apply"> (optional)</param>
        /// <param name="delete"> (optional)</param>
        /// <param name="action"> (optional)</param>
        /// <param name="location"> (optional)</param>
        /// <param name="propertylist"> (optional)</param>
        /// <param name="name"> (optional)</param>
        /// <param name="serviceName"> (optional)</param>
        /// <param name="userId"> (optional)</param>
        /// <param name="accessTokenProviderTarget"> (optional)</param>
        /// <returns>ComAdobeGraniteDistributionCoreImplTransportAccessTokenDistribuInfo</returns>
        ComAdobeGraniteDistributionCoreImplTransportAccessTokenDistribuInfo ComAdobeGraniteDistributionCoreImplTransportAccessTokenDistribu(NancyContext context, bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, string name, string serviceName, string userId, string accessTokenProviderTarget);

        /// <summary>
        /// 
        /// </summary>
        /// <param name="context">Context of request</param>
        /// <param name="post"> (optional)</param>
        /// <param name="apply"> (optional)</param>
        /// <param name="delete"> (optional)</param>
        /// <param name="action"> (optional)</param>
        /// <param name="location"> (optional)</param>
        /// <param name="propertylist"> (optional)</param>
        /// <param name="featureName"> (optional)</param>
        /// <param name="featureDescription"> (optional)</param>
        /// <param name="httpHeaderName"> (optional)</param>
        /// <param name="httpHeaderValuepattern"> (optional)</param>
        /// <returns>ComAdobeGraniteFragsImplCheckHttpHeaderFlagInfo</returns>
        ComAdobeGraniteFragsImplCheckHttpHeaderFlagInfo ComAdobeGraniteFragsImplCheckHttpHeaderFlag(NancyContext context, bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, string featureName, string featureDescription, string httpHeaderName, string httpHeaderValuepattern);

        /// <summary>
        /// 
        /// </summary>
        /// <param name="context">Context of request</param>
        /// <param name="post"> (optional)</param>
        /// <param name="apply"> (optional)</param>
        /// <param name="delete"> (optional)</param>
        /// <param name="action"> (optional)</param>
        /// <param name="location"> (optional)</param>
        /// <param name="propertylist"> (optional)</param>
        /// <param name="featureName"> (optional)</param>
        /// <param name="featureDescription"> (optional)</param>
        /// <param name="activePercentage"> (optional)</param>
        /// <param name="cookieName"> (optional)</param>
        /// <param name="cookieMaxAge"> (optional)</param>
        /// <returns>ComAdobeGraniteFragsImplRandomFeatureInfo</returns>
        ComAdobeGraniteFragsImplRandomFeatureInfo ComAdobeGraniteFragsImplRandomFeature(NancyContext context, bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, string featureName, string featureDescription, string activePercentage, string cookieName, int? cookieMaxAge);

        /// <summary>
        /// 
        /// </summary>
        /// <param name="context">Context of request</param>
        /// <param name="post"> (optional)</param>
        /// <param name="apply"> (optional)</param>
        /// <param name="delete"> (optional)</param>
        /// <param name="action"> (optional)</param>
        /// <param name="location"> (optional)</param>
        /// <param name="propertylist"> (optional)</param>
        /// <param name="comAdobeGraniteHttpcacheFileDocumentRoot"> (optional)</param>
        /// <param name="comAdobeGraniteHttpcacheFileIncludeHost"> (optional)</param>
        /// <returns>ComAdobeGraniteHttpcacheFileFileCacheStoreInfo</returns>
        ComAdobeGraniteHttpcacheFileFileCacheStoreInfo ComAdobeGraniteHttpcacheFileFileCacheStore(NancyContext context, bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, string comAdobeGraniteHttpcacheFileDocumentRoot, string comAdobeGraniteHttpcacheFileIncludeHost);

        /// <summary>
        /// 
        /// </summary>
        /// <param name="context">Context of request</param>
        /// <param name="post"> (optional)</param>
        /// <param name="apply"> (optional)</param>
        /// <param name="delete"> (optional)</param>
        /// <param name="action"> (optional)</param>
        /// <param name="location"> (optional)</param>
        /// <param name="propertylist"> (optional)</param>
        /// <param name="comAdobeGraniteHttpcacheUrlPaths"> (optional)</param>
        /// <returns>ComAdobeGraniteHttpcacheImplOuterCacheFilterInfo</returns>
        ComAdobeGraniteHttpcacheImplOuterCacheFilterInfo ComAdobeGraniteHttpcacheImplOuterCacheFilter(NancyContext context, bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, List<string> comAdobeGraniteHttpcacheUrlPaths);

        /// <summary>
        /// 
        /// </summary>
        /// <param name="context">Context of request</param>
        /// <param name="post"> (optional)</param>
        /// <param name="apply"> (optional)</param>
        /// <param name="delete"> (optional)</param>
        /// <param name="action"> (optional)</param>
        /// <param name="location"> (optional)</param>
        /// <param name="propertylist"> (optional)</param>
        /// <param name="pseudoPatterns"> (optional)</param>
        /// <returns>ComAdobeGraniteI18nImplBundlePseudoTranslationsInfo</returns>
        ComAdobeGraniteI18nImplBundlePseudoTranslationsInfo ComAdobeGraniteI18nImplBundlePseudoTranslations(NancyContext context, bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, List<string> pseudoPatterns);

        /// <summary>
        /// 
        /// </summary>
        /// <param name="context">Context of request</param>
        /// <param name="post"> (optional)</param>
        /// <param name="apply"> (optional)</param>
        /// <param name="delete"> (optional)</param>
        /// <param name="action"> (optional)</param>
        /// <param name="location"> (optional)</param>
        /// <param name="propertylist"> (optional)</param>
        /// <param name="securityPreferencesName"> (optional)</param>
        /// <returns>ComAdobeGraniteI18nImplPreferencesLocaleResolverServiceInfo</returns>
        ComAdobeGraniteI18nImplPreferencesLocaleResolverServiceInfo ComAdobeGraniteI18nImplPreferencesLocaleResolverService(NancyContext context, bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, string securityPreferencesName);

        /// <summary>
        /// 
        /// </summary>
        /// <param name="context">Context of request</param>
        /// <param name="post"> (optional)</param>
        /// <param name="apply"> (optional)</param>
        /// <param name="delete"> (optional)</param>
        /// <param name="action"> (optional)</param>
        /// <param name="location"> (optional)</param>
        /// <param name="propertylist"> (optional)</param>
        /// <param name="graniteInfocollectorIncludeThreadDumps"> (optional)</param>
        /// <param name="graniteInfocollectorIncludeHeapDump"> (optional)</param>
        /// <returns>ComAdobeGraniteInfocollectorInfoCollectorInfo</returns>
        ComAdobeGraniteInfocollectorInfoCollectorInfo ComAdobeGraniteInfocollectorInfoCollector(NancyContext context, bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, bool? graniteInfocollectorIncludeThreadDumps, bool? graniteInfocollectorIncludeHeapDump);

        /// <summary>
        /// 
        /// </summary>
        /// <param name="context">Context of request</param>
        /// <param name="post"> (optional)</param>
        /// <param name="apply"> (optional)</param>
        /// <param name="delete"> (optional)</param>
        /// <param name="action"> (optional)</param>
        /// <param name="location"> (optional)</param>
        /// <param name="propertylist"> (optional)</param>
        /// <param name="comAdobeGraniteJettySslPort"> (optional)</param>
        /// <param name="comAdobeGraniteJettySslKeystoreUser"> (optional)</param>
        /// <param name="comAdobeGraniteJettySslKeystorePassword"> (optional)</param>
        /// <param name="comAdobeGraniteJettySslCiphersuitesExcluded"> (optional)</param>
        /// <param name="comAdobeGraniteJettySslCiphersuitesIncluded"> (optional)</param>
        /// <param name="comAdobeGraniteJettySslClientCertificate"> (optional)</param>
        /// <returns>ComAdobeGraniteJettySslInternalGraniteSslConnectorFactoryInfo</returns>
        ComAdobeGraniteJettySslInternalGraniteSslConnectorFactoryInfo ComAdobeGraniteJettySslInternalGraniteSslConnectorFactory(NancyContext context, bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, int? comAdobeGraniteJettySslPort, string comAdobeGraniteJettySslKeystoreUser, string comAdobeGraniteJettySslKeystorePassword, List<string> comAdobeGraniteJettySslCiphersuitesExcluded, List<string> comAdobeGraniteJettySslCiphersuitesIncluded, string comAdobeGraniteJettySslClientCertificate);

        /// <summary>
        /// 
        /// </summary>
        /// <param name="context">Context of request</param>
        /// <param name="post"> (optional)</param>
        /// <param name="apply"> (optional)</param>
        /// <param name="delete"> (optional)</param>
        /// <param name="action"> (optional)</param>
        /// <param name="location"> (optional)</param>
        /// <param name="propertylist"> (optional)</param>
        /// <param name="checkInternval"> (optional)</param>
        /// <param name="excludeIds"> (optional)</param>
        /// <param name="encryptPing"> (optional)</param>
        /// <returns>ComAdobeGraniteLicenseImplLicenseCheckFilterInfo</returns>
        ComAdobeGraniteLicenseImplLicenseCheckFilterInfo ComAdobeGraniteLicenseImplLicenseCheckFilter(NancyContext context, bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, int? checkInternval, List<string> excludeIds, bool? encryptPing);

        /// <summary>
        /// 
        /// </summary>
        /// <param name="context">Context of request</param>
        /// <param name="post"> (optional)</param>
        /// <param name="apply"> (optional)</param>
        /// <param name="delete"> (optional)</param>
        /// <param name="action"> (optional)</param>
        /// <param name="location"> (optional)</param>
        /// <param name="propertylist"> (optional)</param>
        /// <param name="messagesQueueSize"> (optional)</param>
        /// <param name="loggerConfig"> (optional)</param>
        /// <param name="messagesSize"> (optional)</param>
        /// <returns>ComAdobeGraniteLoggingImplLogAnalyserImplInfo</returns>
        ComAdobeGraniteLoggingImplLogAnalyserImplInfo ComAdobeGraniteLoggingImplLogAnalyserImpl(NancyContext context, bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, int? messagesQueueSize, List<string> loggerConfig, int? messagesSize);

        /// <summary>
        /// 
        /// </summary>
        /// <param name="context">Context of request</param>
        /// <param name="post"> (optional)</param>
        /// <param name="apply"> (optional)</param>
        /// <param name="delete"> (optional)</param>
        /// <param name="action"> (optional)</param>
        /// <param name="location"> (optional)</param>
        /// <param name="propertylist"> (optional)</param>
        /// <param name="hcTags"> (optional)</param>
        /// <returns>ComAdobeGraniteLoggingImplLogErrorHealthCheckInfo</returns>
        ComAdobeGraniteLoggingImplLogErrorHealthCheckInfo ComAdobeGraniteLoggingImplLogErrorHealthCheck(NancyContext context, bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, List<string> hcTags);

        /// <summary>
        /// 
        /// </summary>
        /// <param name="context">Context of request</param>
        /// <param name="post"> (optional)</param>
        /// <param name="apply"> (optional)</param>
        /// <param name="delete"> (optional)</param>
        /// <param name="action"> (optional)</param>
        /// <param name="location"> (optional)</param>
        /// <param name="propertylist"> (optional)</param>
        /// <param name="graniteMaintenanceMandatory"> (optional)</param>
        /// <param name="jobTopics"> (optional)</param>
        /// <returns>ComAdobeGraniteMaintenanceCrxImplDataStoreGarbageCollectionTaskInfo</returns>
        ComAdobeGraniteMaintenanceCrxImplDataStoreGarbageCollectionTaskInfo ComAdobeGraniteMaintenanceCrxImplDataStoreGarbageCollectionTask(NancyContext context, bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, bool? graniteMaintenanceMandatory, string jobTopics);

        /// <summary>
        /// 
        /// </summary>
        /// <param name="context">Context of request</param>
        /// <param name="post"> (optional)</param>
        /// <param name="apply"> (optional)</param>
        /// <param name="delete"> (optional)</param>
        /// <param name="action"> (optional)</param>
        /// <param name="location"> (optional)</param>
        /// <param name="propertylist"> (optional)</param>
        /// <param name="jobTopics"> (optional)</param>
        /// <returns>ComAdobeGraniteMaintenanceCrxImplLuceneBinariesCleanupTaskInfo</returns>
        ComAdobeGraniteMaintenanceCrxImplLuceneBinariesCleanupTaskInfo ComAdobeGraniteMaintenanceCrxImplLuceneBinariesCleanupTask(NancyContext context, bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, string jobTopics);

        /// <summary>
        /// 
        /// </summary>
        /// <param name="context">Context of request</param>
        /// <param name="post"> (optional)</param>
        /// <param name="apply"> (optional)</param>
        /// <param name="delete"> (optional)</param>
        /// <param name="action"> (optional)</param>
        /// <param name="location"> (optional)</param>
        /// <param name="propertylist"> (optional)</param>
        /// <param name="fullGcDays"> (optional)</param>
        /// <returns>ComAdobeGraniteMaintenanceCrxImplRevisionCleanupTaskInfo</returns>
        ComAdobeGraniteMaintenanceCrxImplRevisionCleanupTaskInfo ComAdobeGraniteMaintenanceCrxImplRevisionCleanupTask(NancyContext context, bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, List<string> fullGcDays);

        /// <summary>
        /// 
        /// </summary>
        /// <param name="context">Context of request</param>
        /// <param name="post"> (optional)</param>
        /// <param name="apply"> (optional)</param>
        /// <param name="delete"> (optional)</param>
        /// <param name="action"> (optional)</param>
        /// <param name="location"> (optional)</param>
        /// <param name="propertylist"> (optional)</param>
        /// <param name="scriptFilename"> (optional)</param>
        /// <param name="scriptDisplay"> (optional)</param>
        /// <param name="scriptPath"> (optional)</param>
        /// <param name="scriptPlatform"> (optional)</param>
        /// <param name="interval"> (optional)</param>
        /// <param name="jmxdomain"> (optional)</param>
        /// <returns>ComAdobeGraniteMonitoringImplScriptConfigImplInfo</returns>
        ComAdobeGraniteMonitoringImplScriptConfigImplInfo ComAdobeGraniteMonitoringImplScriptConfigImpl(NancyContext context, bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, string scriptFilename, string scriptDisplay, string scriptPath, List<string> scriptPlatform, int? interval, string jmxdomain);

        /// <summary>
        /// 
        /// </summary>
        /// <param name="context">Context of request</param>
        /// <param name="post"> (optional)</param>
        /// <param name="apply"> (optional)</param>
        /// <param name="delete"> (optional)</param>
        /// <param name="action"> (optional)</param>
        /// <param name="location"> (optional)</param>
        /// <param name="propertylist"> (optional)</param>
        /// <param name="path"> (optional)</param>
        /// <param name="jaasControlFlag"> (optional)</param>
        /// <param name="jaasRealmName"> (optional)</param>
        /// <param name="jaasRanking"> (optional)</param>
        /// <param name="oauthOfflineValidation"> (optional)</param>
        /// <returns>ComAdobeGraniteOauthServerAuthImplOAuth2ServerAuthenticationHanInfo</returns>
        ComAdobeGraniteOauthServerAuthImplOAuth2ServerAuthenticationHanInfo ComAdobeGraniteOauthServerAuthImplOAuth2ServerAuthenticationHan(NancyContext context, bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, string path, string jaasControlFlag, string jaasRealmName, int? jaasRanking, bool? oauthOfflineValidation);

        /// <summary>
        /// 
        /// </summary>
        /// <param name="context">Context of request</param>
        /// <param name="post"> (optional)</param>
        /// <param name="apply"> (optional)</param>
        /// <param name="delete"> (optional)</param>
        /// <param name="action"> (optional)</param>
        /// <param name="location"> (optional)</param>
        /// <param name="propertylist"> (optional)</param>
        /// <param name="schedulerExpression"> (optional)</param>
        /// <returns>ComAdobeGraniteOauthServerImplAccessTokenCleanupTaskInfo</returns>
        ComAdobeGraniteOauthServerImplAccessTokenCleanupTaskInfo ComAdobeGraniteOauthServerImplAccessTokenCleanupTask(NancyContext context, bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, string schedulerExpression);

        /// <summary>
        /// 
        /// </summary>
        /// <param name="context">Context of request</param>
        /// <param name="post"> (optional)</param>
        /// <param name="apply"> (optional)</param>
        /// <param name="delete"> (optional)</param>
        /// <param name="action"> (optional)</param>
        /// <param name="location"> (optional)</param>
        /// <param name="propertylist"> (optional)</param>
        /// <param name="oauthClientRevocationActive"> (optional)</param>
        /// <returns>ComAdobeGraniteOauthServerImplOAuth2ClientRevocationServletInfo</returns>
        ComAdobeGraniteOauthServerImplOAuth2ClientRevocationServletInfo ComAdobeGraniteOauthServerImplOAuth2ClientRevocationServlet(NancyContext context, bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, bool? oauthClientRevocationActive);

        /// <summary>
        /// 
        /// </summary>
        /// <param name="context">Context of request</param>
        /// <param name="post"> (optional)</param>
        /// <param name="apply"> (optional)</param>
        /// <param name="delete"> (optional)</param>
        /// <param name="action"> (optional)</param>
        /// <param name="location"> (optional)</param>
        /// <param name="propertylist"> (optional)</param>
        /// <param name="slingServletPaths"> (optional)</param>
        /// <param name="oauthRevocationActive"> (optional)</param>
        /// <returns>ComAdobeGraniteOauthServerImplOAuth2RevocationEndpointServletInfo</returns>
        ComAdobeGraniteOauthServerImplOAuth2RevocationEndpointServletInfo ComAdobeGraniteOauthServerImplOAuth2RevocationEndpointServlet(NancyContext context, bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, string slingServletPaths, bool? oauthRevocationActive);

        /// <summary>
        /// 
        /// </summary>
        /// <param name="context">Context of request</param>
        /// <param name="post"> (optional)</param>
        /// <param name="apply"> (optional)</param>
        /// <param name="delete"> (optional)</param>
        /// <param name="action"> (optional)</param>
        /// <param name="location"> (optional)</param>
        /// <param name="propertylist"> (optional)</param>
        /// <param name="oauthIssuer"> (optional)</param>
        /// <param name="oauthAccessTokenExpiresIn"> (optional)</param>
        /// <param name="osgiHttpWhiteboardServletPattern"> (optional)</param>
        /// <param name="osgiHttpWhiteboardContextSelect"> (optional)</param>
        /// <returns>ComAdobeGraniteOauthServerImplOAuth2TokenEndpointServletInfo</returns>
        ComAdobeGraniteOauthServerImplOAuth2TokenEndpointServletInfo ComAdobeGraniteOauthServerImplOAuth2TokenEndpointServlet(NancyContext context, bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, string oauthIssuer, string oauthAccessTokenExpiresIn, string osgiHttpWhiteboardServletPattern, string osgiHttpWhiteboardContextSelect);

        /// <summary>
        /// 
        /// </summary>
        /// <param name="context">Context of request</param>
        /// <param name="post"> (optional)</param>
        /// <param name="apply"> (optional)</param>
        /// <param name="delete"> (optional)</param>
        /// <param name="action"> (optional)</param>
        /// <param name="location"> (optional)</param>
        /// <param name="propertylist"> (optional)</param>
        /// <param name="oauthTokenRevocationActive"> (optional)</param>
        /// <returns>ComAdobeGraniteOauthServerImplOAuth2TokenRevocationServletInfo</returns>
        ComAdobeGraniteOauthServerImplOAuth2TokenRevocationServletInfo ComAdobeGraniteOauthServerImplOAuth2TokenRevocationServlet(NancyContext context, bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, bool? oauthTokenRevocationActive);

        /// <summary>
        /// 
        /// </summary>
        /// <param name="context">Context of request</param>
        /// <param name="post"> (optional)</param>
        /// <param name="apply"> (optional)</param>
        /// <param name="delete"> (optional)</param>
        /// <param name="action"> (optional)</param>
        /// <param name="location"> (optional)</param>
        /// <param name="propertylist"> (optional)</param>
        /// <param name="offloadingTransporter"> (optional)</param>
        /// <param name="offloadingCleanupPayload"> (optional)</param>
        /// <returns>ComAdobeGraniteOffloadingImplOffloadingConfiguratorInfo</returns>
        ComAdobeGraniteOffloadingImplOffloadingConfiguratorInfo ComAdobeGraniteOffloadingImplOffloadingConfigurator(NancyContext context, bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, string offloadingTransporter, bool? offloadingCleanupPayload);

        /// <summary>
        /// 
        /// </summary>
        /// <param name="context">Context of request</param>
        /// <param name="post"> (optional)</param>
        /// <param name="apply"> (optional)</param>
        /// <param name="delete"> (optional)</param>
        /// <param name="action"> (optional)</param>
        /// <param name="location"> (optional)</param>
        /// <param name="propertylist"> (optional)</param>
        /// <param name="offloadingJobclonerEnabled"> (optional)</param>
        /// <returns>ComAdobeGraniteOffloadingImplOffloadingJobClonerInfo</returns>
        ComAdobeGraniteOffloadingImplOffloadingJobClonerInfo ComAdobeGraniteOffloadingImplOffloadingJobCloner(NancyContext context, bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, bool? offloadingJobclonerEnabled);

        /// <summary>
        /// 
        /// </summary>
        /// <param name="context">Context of request</param>
        /// <param name="post"> (optional)</param>
        /// <param name="apply"> (optional)</param>
        /// <param name="delete"> (optional)</param>
        /// <param name="action"> (optional)</param>
        /// <param name="location"> (optional)</param>
        /// <param name="propertylist"> (optional)</param>
        /// <param name="offloadingOffloaderEnabled"> (optional)</param>
        /// <returns>ComAdobeGraniteOffloadingImplOffloadingJobOffloaderInfo</returns>
        ComAdobeGraniteOffloadingImplOffloadingJobOffloaderInfo ComAdobeGraniteOffloadingImplOffloadingJobOffloader(NancyContext context, bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, bool? offloadingOffloaderEnabled);

        /// <summary>
        /// 
        /// </summary>
        /// <param name="context">Context of request</param>
        /// <param name="post"> (optional)</param>
        /// <param name="apply"> (optional)</param>
        /// <param name="delete"> (optional)</param>
        /// <param name="action"> (optional)</param>
        /// <param name="location"> (optional)</param>
        /// <param name="propertylist"> (optional)</param>
        /// <param name="offloadingAgentmanagerEnabled"> (optional)</param>
        /// <returns>ComAdobeGraniteOffloadingImplTransporterOffloadingAgentManagerInfo</returns>
        ComAdobeGraniteOffloadingImplTransporterOffloadingAgentManagerInfo ComAdobeGraniteOffloadingImplTransporterOffloadingAgentManager(NancyContext context, bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, bool? offloadingAgentmanagerEnabled);

        /// <summary>
        /// 
        /// </summary>
        /// <param name="context">Context of request</param>
        /// <param name="post"> (optional)</param>
        /// <param name="apply"> (optional)</param>
        /// <param name="delete"> (optional)</param>
        /// <param name="action"> (optional)</param>
        /// <param name="location"> (optional)</param>
        /// <param name="propertylist"> (optional)</param>
        /// <param name="defaultTransportAgentToWorkerPrefix"> (optional)</param>
        /// <param name="defaultTransportAgentToMasterPrefix"> (optional)</param>
        /// <param name="defaultTransportInputPackage"> (optional)</param>
        /// <param name="defaultTransportOutputPackage"> (optional)</param>
        /// <param name="defaultTransportReplicationSynchronous"> (optional)</param>
        /// <param name="defaultTransportContentpackage"> (optional)</param>
        /// <param name="offloadingTransporterDefaultEnabled"> (optional)</param>
        /// <returns>ComAdobeGraniteOffloadingImplTransporterOffloadingDefaultTranspoInfo</returns>
        ComAdobeGraniteOffloadingImplTransporterOffloadingDefaultTranspoInfo ComAdobeGraniteOffloadingImplTransporterOffloadingDefaultTranspo(NancyContext context, bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, string defaultTransportAgentToWorkerPrefix, string defaultTransportAgentToMasterPrefix, string defaultTransportInputPackage, string defaultTransportOutputPackage, bool? defaultTransportReplicationSynchronous, bool? defaultTransportContentpackage, bool? offloadingTransporterDefaultEnabled);

        /// <summary>
        /// 
        /// </summary>
        /// <param name="context">Context of request</param>
        /// <param name="post"> (optional)</param>
        /// <param name="apply"> (optional)</param>
        /// <param name="delete"> (optional)</param>
        /// <param name="action"> (optional)</param>
        /// <param name="location"> (optional)</param>
        /// <param name="propertylist"> (optional)</param>
        /// <param name="omnisearchSuggestionRequiretextMin"> (optional)</param>
        /// <param name="omnisearchSuggestionSpellcheckRequire"> (optional)</param>
        /// <returns>ComAdobeGraniteOmnisearchImplCoreOmniSearchServiceImplInfo</returns>
        ComAdobeGraniteOmnisearchImplCoreOmniSearchServiceImplInfo ComAdobeGraniteOmnisearchImplCoreOmniSearchServiceImpl(NancyContext context, bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, int? omnisearchSuggestionRequiretextMin, bool? omnisearchSuggestionSpellcheckRequire);

        /// <summary>
        /// 
        /// </summary>
        /// <param name="context">Context of request</param>
        /// <param name="post"> (optional)</param>
        /// <param name="apply"> (optional)</param>
        /// <param name="delete"> (optional)</param>
        /// <param name="action"> (optional)</param>
        /// <param name="location"> (optional)</param>
        /// <param name="propertylist"> (optional)</param>
        /// <param name="optoutCookies"> (optional)</param>
        /// <param name="optoutHeaders"> (optional)</param>
        /// <param name="optoutWhitelistCookies"> (optional)</param>
        /// <returns>ComAdobeGraniteOptoutImplOptOutServiceImplInfo</returns>
        ComAdobeGraniteOptoutImplOptOutServiceImplInfo ComAdobeGraniteOptoutImplOptOutServiceImpl(NancyContext context, bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, List<string> optoutCookies, List<string> optoutHeaders, List<string> optoutWhitelistCookies);

        /// <summary>
        /// 
        /// </summary>
        /// <param name="context">Context of request</param>
        /// <param name="post"> (optional)</param>
        /// <param name="apply"> (optional)</param>
        /// <param name="delete"> (optional)</param>
        /// <param name="action"> (optional)</param>
        /// <param name="location"> (optional)</param>
        /// <param name="propertylist"> (optional)</param>
        /// <param name="indexingCriticalThreshold"> (optional)</param>
        /// <param name="indexingWarnThreshold"> (optional)</param>
        /// <param name="hcTags"> (optional)</param>
        /// <returns>ComAdobeGraniteQueriesImplHcAsyncIndexHealthCheckInfo</returns>
        ComAdobeGraniteQueriesImplHcAsyncIndexHealthCheckInfo ComAdobeGraniteQueriesImplHcAsyncIndexHealthCheck(NancyContext context, bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, int? indexingCriticalThreshold, int? indexingWarnThreshold, List<string> hcTags);

        /// <summary>
        /// 
        /// </summary>
        /// <param name="context">Context of request</param>
        /// <param name="post"> (optional)</param>
        /// <param name="apply"> (optional)</param>
        /// <param name="delete"> (optional)</param>
        /// <param name="action"> (optional)</param>
        /// <param name="location"> (optional)</param>
        /// <param name="propertylist"> (optional)</param>
        /// <param name="largeIndexCriticalThreshold"> (optional)</param>
        /// <param name="largeIndexWarnThreshold"> (optional)</param>
        /// <param name="hcTags"> (optional)</param>
        /// <returns>ComAdobeGraniteQueriesImplHcLargeIndexHealthCheckInfo</returns>
        ComAdobeGraniteQueriesImplHcLargeIndexHealthCheckInfo ComAdobeGraniteQueriesImplHcLargeIndexHealthCheck(NancyContext context, bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, int? largeIndexCriticalThreshold, int? largeIndexWarnThreshold, List<string> hcTags);

        /// <summary>
        /// 
        /// </summary>
        /// <param name="context">Context of request</param>
        /// <param name="post"> (optional)</param>
        /// <param name="apply"> (optional)</param>
        /// <param name="delete"> (optional)</param>
        /// <param name="action"> (optional)</param>
        /// <param name="location"> (optional)</param>
        /// <param name="propertylist"> (optional)</param>
        /// <param name="hcTags"> (optional)</param>
        /// <returns>ComAdobeGraniteQueriesImplHcQueriesStatusHealthCheckInfo</returns>
        ComAdobeGraniteQueriesImplHcQueriesStatusHealthCheckInfo ComAdobeGraniteQueriesImplHcQueriesStatusHealthCheck(NancyContext context, bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, List<string> hcTags);

        /// <summary>
        /// 
        /// </summary>
        /// <param name="context">Context of request</param>
        /// <param name="post"> (optional)</param>
        /// <param name="apply"> (optional)</param>
        /// <param name="delete"> (optional)</param>
        /// <param name="action"> (optional)</param>
        /// <param name="location"> (optional)</param>
        /// <param name="propertylist"> (optional)</param>
        /// <param name="getPeriod"> (optional)</param>
        /// <returns>ComAdobeGraniteQueriesImplHcQueryHealthCheckMetricsInfo</returns>
        ComAdobeGraniteQueriesImplHcQueryHealthCheckMetricsInfo ComAdobeGraniteQueriesImplHcQueryHealthCheckMetrics(NancyContext context, bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, int? getPeriod);

        /// <summary>
        /// 
        /// </summary>
        /// <param name="context">Context of request</param>
        /// <param name="post"> (optional)</param>
        /// <param name="apply"> (optional)</param>
        /// <param name="delete"> (optional)</param>
        /// <param name="action"> (optional)</param>
        /// <param name="location"> (optional)</param>
        /// <param name="propertylist"> (optional)</param>
        /// <param name="hcTags"> (optional)</param>
        /// <returns>ComAdobeGraniteQueriesImplHcQueryLimitsHealthCheckInfo</returns>
        ComAdobeGraniteQueriesImplHcQueryLimitsHealthCheckInfo ComAdobeGraniteQueriesImplHcQueryLimitsHealthCheck(NancyContext context, bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, List<string> hcTags);

        /// <summary>
        /// 
        /// </summary>
        /// <param name="context">Context of request</param>
        /// <param name="post"> (optional)</param>
        /// <param name="apply"> (optional)</param>
        /// <param name="delete"> (optional)</param>
        /// <param name="action"> (optional)</param>
        /// <param name="location"> (optional)</param>
        /// <param name="propertylist"> (optional)</param>
        /// <param name="numberOfRetriesAllowed"> (optional)</param>
        /// <param name="hcTags"> (optional)</param>
        /// <returns>ComAdobeGraniteReplicationHcImplReplicationQueueHealthCheckInfo</returns>
        ComAdobeGraniteReplicationHcImplReplicationQueueHealthCheckInfo ComAdobeGraniteReplicationHcImplReplicationQueueHealthCheck(NancyContext context, bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, int? numberOfRetriesAllowed, List<string> hcTags);

        /// <summary>
        /// 
        /// </summary>
        /// <param name="context">Context of request</param>
        /// <param name="post"> (optional)</param>
        /// <param name="apply"> (optional)</param>
        /// <param name="delete"> (optional)</param>
        /// <param name="action"> (optional)</param>
        /// <param name="location"> (optional)</param>
        /// <param name="propertylist"> (optional)</param>
        /// <param name="hcTags"> (optional)</param>
        /// <returns>ComAdobeGraniteReplicationHcImplReplicationTransportUsersHealthCInfo</returns>
        ComAdobeGraniteReplicationHcImplReplicationTransportUsersHealthCInfo ComAdobeGraniteReplicationHcImplReplicationTransportUsersHealthC(NancyContext context, bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, List<string> hcTags);

        /// <summary>
        /// 
        /// </summary>
        /// <param name="context">Context of request</param>
        /// <param name="post"> (optional)</param>
        /// <param name="apply"> (optional)</param>
        /// <param name="delete"> (optional)</param>
        /// <param name="action"> (optional)</param>
        /// <param name="location"> (optional)</param>
        /// <param name="propertylist"> (optional)</param>
        /// <param name="hcTags"> (optional)</param>
        /// <returns>ComAdobeGraniteRepositoryHcImplAuthorizableNodeNameHealthCheckInfo</returns>
        ComAdobeGraniteRepositoryHcImplAuthorizableNodeNameHealthCheckInfo ComAdobeGraniteRepositoryHcImplAuthorizableNodeNameHealthCheck(NancyContext context, bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, List<string> hcTags);

        /// <summary>
        /// 
        /// </summary>
        /// <param name="context">Context of request</param>
        /// <param name="post"> (optional)</param>
        /// <param name="apply"> (optional)</param>
        /// <param name="delete"> (optional)</param>
        /// <param name="action"> (optional)</param>
        /// <param name="location"> (optional)</param>
        /// <param name="propertylist"> (optional)</param>
        /// <param name="hcTags"> (optional)</param>
        /// <param name="excludeSearchPath"> (optional)</param>
        /// <returns>ComAdobeGraniteRepositoryHcImplContentSlingSlingContentHealthCInfo</returns>
        ComAdobeGraniteRepositoryHcImplContentSlingSlingContentHealthCInfo ComAdobeGraniteRepositoryHcImplContentSlingSlingContentHealthC(NancyContext context, bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, List<string> hcTags, List<string> excludeSearchPath);

        /// <summary>
        /// 
        /// </summary>
        /// <param name="context">Context of request</param>
        /// <param name="post"> (optional)</param>
        /// <param name="apply"> (optional)</param>
        /// <param name="delete"> (optional)</param>
        /// <param name="action"> (optional)</param>
        /// <param name="location"> (optional)</param>
        /// <param name="propertylist"> (optional)</param>
        /// <param name="hcTags"> (optional)</param>
        /// <returns>ComAdobeGraniteRepositoryHcImplContinuousRGCHealthCheckInfo</returns>
        ComAdobeGraniteRepositoryHcImplContinuousRGCHealthCheckInfo ComAdobeGraniteRepositoryHcImplContinuousRGCHealthCheck(NancyContext context, bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, List<string> hcTags);

        /// <summary>
        /// 
        /// </summary>
        /// <param name="context">Context of request</param>
        /// <param name="post"> (optional)</param>
        /// <param name="apply"> (optional)</param>
        /// <param name="delete"> (optional)</param>
        /// <param name="action"> (optional)</param>
        /// <param name="location"> (optional)</param>
        /// <param name="propertylist"> (optional)</param>
        /// <param name="hcTags"> (optional)</param>
        /// <returns>ComAdobeGraniteRepositoryHcImplDefaultAccessUserProfileHealthCheInfo</returns>
        ComAdobeGraniteRepositoryHcImplDefaultAccessUserProfileHealthCheInfo ComAdobeGraniteRepositoryHcImplDefaultAccessUserProfileHealthChe(NancyContext context, bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, List<string> hcTags);

        /// <summary>
        /// 
        /// </summary>
        /// <param name="context">Context of request</param>
        /// <param name="post"> (optional)</param>
        /// <param name="apply"> (optional)</param>
        /// <param name="delete"> (optional)</param>
        /// <param name="action"> (optional)</param>
        /// <param name="location"> (optional)</param>
        /// <param name="propertylist"> (optional)</param>
        /// <param name="hcTags"> (optional)</param>
        /// <param name="accountLogins"> (optional)</param>
        /// <param name="consoleLogins"> (optional)</param>
        /// <returns>ComAdobeGraniteRepositoryHcImplDefaultLoginsHealthCheckInfo</returns>
        ComAdobeGraniteRepositoryHcImplDefaultLoginsHealthCheckInfo ComAdobeGraniteRepositoryHcImplDefaultLoginsHealthCheck(NancyContext context, bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, List<string> hcTags, List<string> accountLogins, List<string> consoleLogins);

        /// <summary>
        /// 
        /// </summary>
        /// <param name="context">Context of request</param>
        /// <param name="post"> (optional)</param>
        /// <param name="apply"> (optional)</param>
        /// <param name="delete"> (optional)</param>
        /// <param name="action"> (optional)</param>
        /// <param name="location"> (optional)</param>
        /// <param name="propertylist"> (optional)</param>
        /// <param name="hcTags"> (optional)</param>
        /// <param name="diskSpaceWarnThreshold"> (optional)</param>
        /// <param name="diskSpaceErrorThreshold"> (optional)</param>
        /// <returns>ComAdobeGraniteRepositoryHcImplDiskSpaceHealthCheckInfo</returns>
        ComAdobeGraniteRepositoryHcImplDiskSpaceHealthCheckInfo ComAdobeGraniteRepositoryHcImplDiskSpaceHealthCheck(NancyContext context, bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, List<string> hcTags, int? diskSpaceWarnThreshold, int? diskSpaceErrorThreshold);

        /// <summary>
        /// 
        /// </summary>
        /// <param name="context">Context of request</param>
        /// <param name="post"> (optional)</param>
        /// <param name="apply"> (optional)</param>
        /// <param name="delete"> (optional)</param>
        /// <param name="action"> (optional)</param>
        /// <param name="location"> (optional)</param>
        /// <param name="propertylist"> (optional)</param>
        /// <param name="hcTags"> (optional)</param>
        /// <returns>ComAdobeGraniteRepositoryHcImplObservationQueueLengthHealthCheckInfo</returns>
        ComAdobeGraniteRepositoryHcImplObservationQueueLengthHealthCheckInfo ComAdobeGraniteRepositoryHcImplObservationQueueLengthHealthCheck(NancyContext context, bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, List<string> hcTags);

        /// <summary>
        /// 
        /// </summary>
        /// <param name="context">Context of request</param>
        /// <param name="post"> (optional)</param>
        /// <param name="apply"> (optional)</param>
        /// <param name="delete"> (optional)</param>
        /// <param name="action"> (optional)</param>
        /// <param name="location"> (optional)</param>
        /// <param name="propertylist"> (optional)</param>
        /// <param name="enabled"> (optional)</param>
        /// <param name="intervalSeconds"> (optional)</param>
        /// <param name="commitsPerIntervalThreshold"> (optional)</param>
        /// <param name="maxLocationLength"> (optional)</param>
        /// <param name="maxDetailsShown"> (optional)</param>
        /// <param name="minDetailsPercentage"> (optional)</param>
        /// <param name="threadMatchers"> (optional)</param>
        /// <param name="maxGreedyDepth"> (optional)</param>
        /// <param name="greedyStackMatchers"> (optional)</param>
        /// <param name="stackFilters"> (optional)</param>
        /// <param name="stackMatchers"> (optional)</param>
        /// <param name="stackCategorizers"> (optional)</param>
        /// <param name="stackShorteners"> (optional)</param>
        /// <returns>ComAdobeGraniteRepositoryImplCommitStatsConfigInfo</returns>
        ComAdobeGraniteRepositoryImplCommitStatsConfigInfo ComAdobeGraniteRepositoryImplCommitStatsConfig(NancyContext context, bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, bool? enabled, int? intervalSeconds, int? commitsPerIntervalThreshold, int? maxLocationLength, int? maxDetailsShown, int? minDetailsPercentage, List<string> threadMatchers, int? maxGreedyDepth, string greedyStackMatchers, List<string> stackFilters, List<string> stackMatchers, List<string> stackCategorizers, List<string> stackShorteners);

        /// <summary>
        /// 
        /// </summary>
        /// <param name="context">Context of request</param>
        /// <param name="post"> (optional)</param>
        /// <param name="apply"> (optional)</param>
        /// <param name="delete"> (optional)</param>
        /// <param name="action"> (optional)</param>
        /// <param name="location"> (optional)</param>
        /// <param name="propertylist"> (optional)</param>
        /// <param name="serviceRanking"> (optional)</param>
        /// <param name="serviceusersSimpleSubjectPopulation"> (optional)</param>
        /// <param name="serviceusersList"> (optional)</param>
        /// <returns>ComAdobeGraniteRepositoryServiceUserConfigurationInfo</returns>
        ComAdobeGraniteRepositoryServiceUserConfigurationInfo ComAdobeGraniteRepositoryServiceUserConfiguration(NancyContext context, bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, int? serviceRanking, bool? serviceusersSimpleSubjectPopulation, List<string> serviceusersList);

        /// <summary>
        /// 
        /// </summary>
        /// <param name="context">Context of request</param>
        /// <param name="post"> (optional)</param>
        /// <param name="apply"> (optional)</param>
        /// <param name="delete"> (optional)</param>
        /// <param name="action"> (optional)</param>
        /// <param name="location"> (optional)</param>
        /// <param name="propertylist"> (optional)</param>
        /// <param name="hcTags"> (optional)</param>
        /// <returns>ComAdobeGraniteRequestsLoggingImplHcRequestsStatusHealthCheckImInfo</returns>
        ComAdobeGraniteRequestsLoggingImplHcRequestsStatusHealthCheckImInfo ComAdobeGraniteRequestsLoggingImplHcRequestsStatusHealthCheckIm(NancyContext context, bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, List<string> hcTags);

        /// <summary>
        /// 
        /// </summary>
        /// <param name="context">Context of request</param>
        /// <param name="post"> (optional)</param>
        /// <param name="apply"> (optional)</param>
        /// <param name="delete"> (optional)</param>
        /// <param name="action"> (optional)</param>
        /// <param name="location"> (optional)</param>
        /// <param name="propertylist"> (optional)</param>
        /// <param name="name"> (optional)</param>
        /// <param name="types"> (optional)</param>
        /// <returns>ComAdobeGraniteResourcestatusImplCompositeStatusTypeInfo</returns>
        ComAdobeGraniteResourcestatusImplCompositeStatusTypeInfo ComAdobeGraniteResourcestatusImplCompositeStatusType(NancyContext context, bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, string name, List<string> types);

        /// <summary>
        /// 
        /// </summary>
        /// <param name="context">Context of request</param>
        /// <param name="post"> (optional)</param>
        /// <param name="apply"> (optional)</param>
        /// <param name="delete"> (optional)</param>
        /// <param name="action"> (optional)</param>
        /// <param name="location"> (optional)</param>
        /// <param name="propertylist"> (optional)</param>
        /// <param name="providerRoot"> (optional)</param>
        /// <returns>ComAdobeGraniteResourcestatusImplStatusResourceProviderImplInfo</returns>
        ComAdobeGraniteResourcestatusImplStatusResourceProviderImplInfo ComAdobeGraniteResourcestatusImplStatusResourceProviderImpl(NancyContext context, bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, string providerRoot);

        /// <summary>
        /// 
        /// </summary>
        /// <param name="context">Context of request</param>
        /// <param name="post"> (optional)</param>
        /// <param name="apply"> (optional)</param>
        /// <param name="delete"> (optional)</param>
        /// <param name="action"> (optional)</param>
        /// <param name="location"> (optional)</param>
        /// <param name="propertylist"> (optional)</param>
        /// <param name="mimeAllowEmpty"> (optional)</param>
        /// <param name="mimeAllowed"> (optional)</param>
        /// <returns>ComAdobeGraniteRestAssetsImplAssetContentDispositionFilterInfo</returns>
        ComAdobeGraniteRestAssetsImplAssetContentDispositionFilterInfo ComAdobeGraniteRestAssetsImplAssetContentDispositionFilter(NancyContext context, bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, bool? mimeAllowEmpty, List<string> mimeAllowed);

        /// <summary>
        /// 
        /// </summary>
        /// <param name="context">Context of request</param>
        /// <param name="post"> (optional)</param>
        /// <param name="apply"> (optional)</param>
        /// <param name="delete"> (optional)</param>
        /// <param name="action"> (optional)</param>
        /// <param name="location"> (optional)</param>
        /// <param name="propertylist"> (optional)</param>
        /// <param name="providerRoots"> (optional)</param>
        /// <returns>ComAdobeGraniteRestImplApiEndpointResourceProviderFactoryImplInfo</returns>
        ComAdobeGraniteRestImplApiEndpointResourceProviderFactoryImplInfo ComAdobeGraniteRestImplApiEndpointResourceProviderFactoryImpl(NancyContext context, bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, string providerRoots);

        /// <summary>
        /// 
        /// </summary>
        /// <param name="context">Context of request</param>
        /// <param name="post"> (optional)</param>
        /// <param name="apply"> (optional)</param>
        /// <param name="delete"> (optional)</param>
        /// <param name="action"> (optional)</param>
        /// <param name="location"> (optional)</param>
        /// <param name="propertylist"> (optional)</param>
        /// <param name="defaultLimit"> (optional)</param>
        /// <param name="useAbsoluteUri"> (optional)</param>
        /// <returns>ComAdobeGraniteRestImplServletDefaultGETServletInfo</returns>
        ComAdobeGraniteRestImplServletDefaultGETServletInfo ComAdobeGraniteRestImplServletDefaultGETServlet(NancyContext context, bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, int? defaultLimit, bool? useAbsoluteUri);

        /// <summary>
        /// 
        /// </summary>
        /// <param name="context">Context of request</param>
        /// <param name="post"> (optional)</param>
        /// <param name="apply"> (optional)</param>
        /// <param name="delete"> (optional)</param>
        /// <param name="action"> (optional)</param>
        /// <param name="location"> (optional)</param>
        /// <param name="propertylist"> (optional)</param>
        /// <param name="hcTags"> (optional)</param>
        /// <returns>ComAdobeGraniteSecurityUserUiInternalServletsSSLConfigurationSInfo</returns>
        ComAdobeGraniteSecurityUserUiInternalServletsSSLConfigurationSInfo ComAdobeGraniteSecurityUserUiInternalServletsSSLConfigurationS(NancyContext context, bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, List<string> hcTags);

        /// <summary>
        /// 
        /// </summary>
        /// <param name="context">Context of request</param>
        /// <param name="post"> (optional)</param>
        /// <param name="apply"> (optional)</param>
        /// <param name="delete"> (optional)</param>
        /// <param name="action"> (optional)</param>
        /// <param name="location"> (optional)</param>
        /// <param name="propertylist"> (optional)</param>
        /// <param name="adapterCondition"> (optional)</param>
        /// <param name="graniteUserpropertiesNodetypes"> (optional)</param>
        /// <param name="graniteUserpropertiesResourcetypes"> (optional)</param>
        /// <returns>ComAdobeGraniteSecurityUserUserPropertiesServiceInfo</returns>
        ComAdobeGraniteSecurityUserUserPropertiesServiceInfo ComAdobeGraniteSecurityUserUserPropertiesService(NancyContext context, bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, string adapterCondition, List<string> graniteUserpropertiesNodetypes, List<string> graniteUserpropertiesResourcetypes);

        /// <summary>
        /// 
        /// </summary>
        /// <param name="context">Context of request</param>
        /// <param name="post"> (optional)</param>
        /// <param name="apply"> (optional)</param>
        /// <param name="delete"> (optional)</param>
        /// <param name="action"> (optional)</param>
        /// <param name="location"> (optional)</param>
        /// <param name="propertylist"> (optional)</param>
        /// <param name="group2memberRelationshipOutgoing"> (optional)</param>
        /// <param name="group2memberExcludedOutgoing"> (optional)</param>
        /// <param name="group2memberRelationshipIncoming"> (optional)</param>
        /// <param name="group2memberExcludedIncoming"> (optional)</param>
        /// <returns>ComAdobeGraniteSocialgraphImplSocialGraphFactoryImplInfo</returns>
        ComAdobeGraniteSocialgraphImplSocialGraphFactoryImplInfo ComAdobeGraniteSocialgraphImplSocialGraphFactoryImpl(NancyContext context, bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, string group2memberRelationshipOutgoing, List<string> group2memberExcludedOutgoing, string group2memberRelationshipIncoming, List<string> group2memberExcludedIncoming);

        /// <summary>
        /// 
        /// </summary>
        /// <param name="context">Context of request</param>
        /// <param name="post"> (optional)</param>
        /// <param name="apply"> (optional)</param>
        /// <param name="delete"> (optional)</param>
        /// <param name="action"> (optional)</param>
        /// <param name="location"> (optional)</param>
        /// <param name="propertylist"> (optional)</param>
        /// <param name="schedulerExpression"> (optional)</param>
        /// <param name="jmxObjectname"> (optional)</param>
        /// <returns>ComAdobeGraniteSystemMonitoringImplSystemStatsMBeanImplInfo</returns>
        ComAdobeGraniteSystemMonitoringImplSystemStatsMBeanImplInfo ComAdobeGraniteSystemMonitoringImplSystemStatsMBeanImpl(NancyContext context, bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, string schedulerExpression, string jmxObjectname);

        /// <summary>
        /// 
        /// </summary>
        /// <param name="context">Context of request</param>
        /// <param name="post"> (optional)</param>
        /// <param name="apply"> (optional)</param>
        /// <param name="delete"> (optional)</param>
        /// <param name="action"> (optional)</param>
        /// <param name="location"> (optional)</param>
        /// <param name="propertylist"> (optional)</param>
        /// <param name="adapterCondition"> (optional)</param>
        /// <returns>ComAdobeGraniteTaskmanagementImplJcrTaskAdapterFactoryInfo</returns>
        ComAdobeGraniteTaskmanagementImplJcrTaskAdapterFactoryInfo ComAdobeGraniteTaskmanagementImplJcrTaskAdapterFactory(NancyContext context, bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, string adapterCondition);

        /// <summary>
        /// 
        /// </summary>
        /// <param name="context">Context of request</param>
        /// <param name="post"> (optional)</param>
        /// <param name="apply"> (optional)</param>
        /// <param name="delete"> (optional)</param>
        /// <param name="action"> (optional)</param>
        /// <param name="location"> (optional)</param>
        /// <param name="propertylist"> (optional)</param>
        /// <param name="archivingEnabled"> (optional)</param>
        /// <param name="schedulerExpression"> (optional)</param>
        /// <param name="archiveSinceDaysCompleted"> (optional)</param>
        /// <returns>ComAdobeGraniteTaskmanagementImplJcrTaskArchiveServiceInfo</returns>
        ComAdobeGraniteTaskmanagementImplJcrTaskArchiveServiceInfo ComAdobeGraniteTaskmanagementImplJcrTaskArchiveService(NancyContext context, bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, bool? archivingEnabled, string schedulerExpression, int? archiveSinceDaysCompleted);

        /// <summary>
        /// 
        /// </summary>
        /// <param name="context">Context of request</param>
        /// <param name="post"> (optional)</param>
        /// <param name="apply"> (optional)</param>
        /// <param name="delete"> (optional)</param>
        /// <param name="action"> (optional)</param>
        /// <param name="location"> (optional)</param>
        /// <param name="propertylist"> (optional)</param>
        /// <param name="purgeCompleted"> (optional)</param>
        /// <param name="completedAge"> (optional)</param>
        /// <param name="purgeActive"> (optional)</param>
        /// <param name="activeAge"> (optional)</param>
        /// <param name="saveThreshold"> (optional)</param>
        /// <returns>ComAdobeGraniteTaskmanagementImplPurgeTaskPurgeMaintenanceTaskInfo</returns>
        ComAdobeGraniteTaskmanagementImplPurgeTaskPurgeMaintenanceTaskInfo ComAdobeGraniteTaskmanagementImplPurgeTaskPurgeMaintenanceTask(NancyContext context, bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, bool? purgeCompleted, int? completedAge, bool? purgeActive, int? activeAge, int? saveThreshold);

        /// <summary>
        /// 
        /// </summary>
        /// <param name="context">Context of request</param>
        /// <param name="post"> (optional)</param>
        /// <param name="apply"> (optional)</param>
        /// <param name="delete"> (optional)</param>
        /// <param name="action"> (optional)</param>
        /// <param name="location"> (optional)</param>
        /// <param name="propertylist"> (optional)</param>
        /// <param name="adapterCondition"> (optional)</param>
        /// <param name="taskmanagerAdmingroups"> (optional)</param>
        /// <returns>ComAdobeGraniteTaskmanagementImplServiceTaskManagerAdapterFactorInfo</returns>
        ComAdobeGraniteTaskmanagementImplServiceTaskManagerAdapterFactorInfo ComAdobeGraniteTaskmanagementImplServiceTaskManagerAdapterFactor(NancyContext context, bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, string adapterCondition, List<string> taskmanagerAdmingroups);

        /// <summary>
        /// 
        /// </summary>
        /// <param name="context">Context of request</param>
        /// <param name="post"> (optional)</param>
        /// <param name="apply"> (optional)</param>
        /// <param name="delete"> (optional)</param>
        /// <param name="action"> (optional)</param>
        /// <param name="location"> (optional)</param>
        /// <param name="propertylist"> (optional)</param>
        /// <param name="schedulerPeriod"> (optional)</param>
        /// <param name="schedulerRunOn"> (optional)</param>
        /// <param name="graniteThreaddumpEnabled"> (optional)</param>
        /// <param name="graniteThreaddumpDumpsPerFile"> (optional)</param>
        /// <param name="graniteThreaddumpEnableGzipCompression"> (optional)</param>
        /// <param name="graniteThreaddumpEnableDirectoriesCompression"> (optional)</param>
        /// <param name="graniteThreaddumpEnableJStack"> (optional)</param>
        /// <param name="graniteThreaddumpMaxBackupDays"> (optional)</param>
        /// <param name="graniteThreaddumpBackupCleanTrigger"> (optional)</param>
        /// <returns>ComAdobeGraniteThreaddumpThreadDumpCollectorInfo</returns>
        ComAdobeGraniteThreaddumpThreadDumpCollectorInfo ComAdobeGraniteThreaddumpThreadDumpCollector(NancyContext context, bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, int? schedulerPeriod, string schedulerRunOn, bool? graniteThreaddumpEnabled, int? graniteThreaddumpDumpsPerFile, bool? graniteThreaddumpEnableGzipCompression, bool? graniteThreaddumpEnableDirectoriesCompression, bool? graniteThreaddumpEnableJStack, int? graniteThreaddumpMaxBackupDays, string graniteThreaddumpBackupCleanTrigger);

        /// <summary>
        /// 
        /// </summary>
        /// <param name="context">Context of request</param>
        /// <param name="post"> (optional)</param>
        /// <param name="apply"> (optional)</param>
        /// <param name="delete"> (optional)</param>
        /// <param name="action"> (optional)</param>
        /// <param name="location"> (optional)</param>
        /// <param name="propertylist"> (optional)</param>
        /// <param name="translationFactory"> (optional)</param>
        /// <param name="defaultConnectorLabel"> (optional)</param>
        /// <param name="defaultConnectorAttribution"> (optional)</param>
        /// <param name="defaultConnectorWorkspaceId"> (optional)</param>
        /// <param name="defaultConnectorSubscriptionKey"> (optional)</param>
        /// <param name="languageMapLocation"> (optional)</param>
        /// <param name="categoryMapLocation"> (optional)</param>
        /// <param name="retryAttempts"> (optional)</param>
        /// <param name="timeoutCount"> (optional)</param>
        /// <returns>ComAdobeGraniteTranslationConnectorMsftCoreImplMicrosoftTranslInfo</returns>
        ComAdobeGraniteTranslationConnectorMsftCoreImplMicrosoftTranslInfo ComAdobeGraniteTranslationConnectorMsftCoreImplMicrosoftTransl(NancyContext context, bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, string translationFactory, string defaultConnectorLabel, string defaultConnectorAttribution, string defaultConnectorWorkspaceId, string defaultConnectorSubscriptionKey, string languageMapLocation, string categoryMapLocation, int? retryAttempts, int? timeoutCount);

        /// <summary>
        /// 
        /// </summary>
        /// <param name="context">Context of request</param>
        /// <param name="post"> (optional)</param>
        /// <param name="apply"> (optional)</param>
        /// <param name="delete"> (optional)</param>
        /// <param name="action"> (optional)</param>
        /// <param name="location"> (optional)</param>
        /// <param name="propertylist"> (optional)</param>
        /// <param name="defaultConnectorName"> (optional)</param>
        /// <param name="defaultCategory"> (optional)</param>
        /// <returns>ComAdobeGraniteTranslationCoreImplTranslationManagerImplInfo</returns>
        ComAdobeGraniteTranslationCoreImplTranslationManagerImplInfo ComAdobeGraniteTranslationCoreImplTranslationManagerImpl(NancyContext context, bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, string defaultConnectorName, string defaultCategory);

        /// <summary>
        /// 
        /// </summary>
        /// <param name="context">Context of request</param>
        /// <param name="post"> (optional)</param>
        /// <param name="apply"> (optional)</param>
        /// <param name="delete"> (optional)</param>
        /// <param name="action"> (optional)</param>
        /// <param name="location"> (optional)</param>
        /// <param name="propertylist"> (optional)</param>
        /// <param name="htmllibmanagerTiming"> (optional)</param>
        /// <param name="htmllibmanagerDebugInitJs"> (optional)</param>
        /// <param name="htmllibmanagerMinify"> (optional)</param>
        /// <param name="htmllibmanagerDebug"> (optional)</param>
        /// <param name="htmllibmanagerGzip"> (optional)</param>
        /// <param name="htmllibmanagerMaxDataUriSize"> (optional)</param>
        /// <param name="htmllibmanagerMaxage"> (optional)</param>
        /// <param name="htmllibmanagerForceCQUrlInfo"> (optional)</param>
        /// <param name="htmllibmanagerDefaultthemename"> (optional)</param>
        /// <param name="htmllibmanagerDefaultuserthemename"> (optional)</param>
        /// <param name="htmllibmanagerClientmanager"> (optional)</param>
        /// <param name="htmllibmanagerPathList"> (optional)</param>
        /// <param name="htmllibmanagerExcludedPathList"> (optional)</param>
        /// <param name="htmllibmanagerProcessorJs"> (optional)</param>
        /// <param name="htmllibmanagerProcessorCss"> (optional)</param>
        /// <param name="htmllibmanagerLongcachePatterns"> (optional)</param>
        /// <param name="htmllibmanagerLongcacheFormat"> (optional)</param>
        /// <param name="htmllibmanagerUseFileSystemOutputCache"> (optional)</param>
        /// <param name="htmllibmanagerFileSystemOutputCacheLocation"> (optional)</param>
        /// <param name="htmllibmanagerDisableReplacement"> (optional)</param>
        /// <returns>ComAdobeGraniteUiClientlibsImplHtmlLibraryManagerImplInfo</returns>
        ComAdobeGraniteUiClientlibsImplHtmlLibraryManagerImplInfo ComAdobeGraniteUiClientlibsImplHtmlLibraryManagerImpl(NancyContext context, bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, bool? htmllibmanagerTiming, string htmllibmanagerDebugInitJs, bool? htmllibmanagerMinify, bool? htmllibmanagerDebug, bool? htmllibmanagerGzip, int? htmllibmanagerMaxDataUriSize, int? htmllibmanagerMaxage, bool? htmllibmanagerForceCQUrlInfo, string htmllibmanagerDefaultthemename, string htmllibmanagerDefaultuserthemename, string htmllibmanagerClientmanager, List<string> htmllibmanagerPathList, List<string> htmllibmanagerExcludedPathList, List<string> htmllibmanagerProcessorJs, List<string> htmllibmanagerProcessorCss, List<string> htmllibmanagerLongcachePatterns, string htmllibmanagerLongcacheFormat, bool? htmllibmanagerUseFileSystemOutputCache, string htmllibmanagerFileSystemOutputCacheLocation, List<string> htmllibmanagerDisableReplacement);

        /// <summary>
        /// 
        /// </summary>
        /// <param name="context">Context of request</param>
        /// <param name="post"> (optional)</param>
        /// <param name="apply"> (optional)</param>
        /// <param name="delete"> (optional)</param>
        /// <param name="action"> (optional)</param>
        /// <param name="location"> (optional)</param>
        /// <param name="propertylist"> (optional)</param>
        /// <param name="enabled"> (optional)</param>
        /// <returns>ComAdobeGraniteWorkflowConsoleFragsWorkflowWithdrawFeatureInfo</returns>
        ComAdobeGraniteWorkflowConsoleFragsWorkflowWithdrawFeatureInfo ComAdobeGraniteWorkflowConsoleFragsWorkflowWithdrawFeature(NancyContext context, bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, bool? enabled);

        /// <summary>
        /// 
        /// </summary>
        /// <param name="context">Context of request</param>
        /// <param name="post"> (optional)</param>
        /// <param name="apply"> (optional)</param>
        /// <param name="delete"> (optional)</param>
        /// <param name="action"> (optional)</param>
        /// <param name="location"> (optional)</param>
        /// <param name="propertylist"> (optional)</param>
        /// <param name="graniteWorkflowWorkflowPublishEventServiceEnabled"> (optional)</param>
        /// <returns>ComAdobeGraniteWorkflowConsolePublishWorkflowPublishEventServiceInfo</returns>
        ComAdobeGraniteWorkflowConsolePublishWorkflowPublishEventServiceInfo ComAdobeGraniteWorkflowConsolePublishWorkflowPublishEventService(NancyContext context, bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, bool? graniteWorkflowWorkflowPublishEventServiceEnabled);

        /// <summary>
        /// 
        /// </summary>
        /// <param name="context">Context of request</param>
        /// <param name="post"> (optional)</param>
        /// <param name="apply"> (optional)</param>
        /// <param name="delete"> (optional)</param>
        /// <param name="action"> (optional)</param>
        /// <param name="location"> (optional)</param>
        /// <param name="propertylist"> (optional)</param>
        /// <param name="bucketSize"> (optional)</param>
        /// <returns>ComAdobeGraniteWorkflowCoreJcrWorkflowBucketManagerInfo</returns>
        ComAdobeGraniteWorkflowCoreJcrWorkflowBucketManagerInfo ComAdobeGraniteWorkflowCoreJcrWorkflowBucketManager(NancyContext context, bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, int? bucketSize);

        /// <summary>
        /// 
        /// </summary>
        /// <param name="context">Context of request</param>
        /// <param name="post"> (optional)</param>
        /// <param name="apply"> (optional)</param>
        /// <param name="delete"> (optional)</param>
        /// <param name="action"> (optional)</param>
        /// <param name="location"> (optional)</param>
        /// <param name="propertylist"> (optional)</param>
        /// <param name="defaultTimeout"> (optional)</param>
        /// <param name="maxTimeout"> (optional)</param>
        /// <param name="defaultPeriod"> (optional)</param>
        /// <returns>ComAdobeGraniteWorkflowCoreJobExternalProcessJobHandlerInfo</returns>
        ComAdobeGraniteWorkflowCoreJobExternalProcessJobHandlerInfo ComAdobeGraniteWorkflowCoreJobExternalProcessJobHandler(NancyContext context, bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, int? defaultTimeout, int? maxTimeout, int? defaultPeriod);

        /// <summary>
        /// 
        /// </summary>
        /// <param name="context">Context of request</param>
        /// <param name="post"> (optional)</param>
        /// <param name="apply"> (optional)</param>
        /// <param name="delete"> (optional)</param>
        /// <param name="action"> (optional)</param>
        /// <param name="location"> (optional)</param>
        /// <param name="propertylist"> (optional)</param>
        /// <param name="jobTopics"> (optional)</param>
        /// <param name="allowSelfProcessTermination"> (optional)</param>
        /// <returns>ComAdobeGraniteWorkflowCoreJobJobHandlerInfo</returns>
        ComAdobeGraniteWorkflowCoreJobJobHandlerInfo ComAdobeGraniteWorkflowCoreJobJobHandler(NancyContext context, bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, List<string> jobTopics, bool? allowSelfProcessTermination);

        /// <summary>
        /// 
        /// </summary>
        /// <param name="context">Context of request</param>
        /// <param name="post"> (optional)</param>
        /// <param name="apply"> (optional)</param>
        /// <param name="delete"> (optional)</param>
        /// <param name="action"> (optional)</param>
        /// <param name="location"> (optional)</param>
        /// <param name="propertylist"> (optional)</param>
        /// <param name="jobTopics"> (optional)</param>
        /// <returns>ComAdobeGraniteWorkflowCoreOffloadingWorkflowOffloadingJobConsumInfo</returns>
        ComAdobeGraniteWorkflowCoreOffloadingWorkflowOffloadingJobConsumInfo ComAdobeGraniteWorkflowCoreOffloadingWorkflowOffloadingJobConsum(NancyContext context, bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, string jobTopics);

        /// <summary>
        /// 
        /// </summary>
        /// <param name="context">Context of request</param>
        /// <param name="post"> (optional)</param>
        /// <param name="apply"> (optional)</param>
        /// <param name="delete"> (optional)</param>
        /// <param name="action"> (optional)</param>
        /// <param name="location"> (optional)</param>
        /// <param name="propertylist"> (optional)</param>
        /// <param name="getSystemWorkflowModels"> (optional)</param>
        /// <param name="getPackageRootPath"> (optional)</param>
        /// <returns>ComAdobeGraniteWorkflowCorePayloadMapCacheInfo</returns>
        ComAdobeGraniteWorkflowCorePayloadMapCacheInfo ComAdobeGraniteWorkflowCorePayloadMapCache(NancyContext context, bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, List<string> getSystemWorkflowModels, string getPackageRootPath);

        /// <summary>
        /// 
        /// </summary>
        /// <param name="context">Context of request</param>
        /// <param name="post"> (optional)</param>
        /// <param name="apply"> (optional)</param>
        /// <param name="delete"> (optional)</param>
        /// <param name="action"> (optional)</param>
        /// <param name="location"> (optional)</param>
        /// <param name="propertylist"> (optional)</param>
        /// <param name="payloadMoveWhiteList"> (optional)</param>
        /// <param name="payloadMoveHandleFromWorkflowProcess"> (optional)</param>
        /// <returns>ComAdobeGraniteWorkflowCorePayloadmapPayloadMoveListenerInfo</returns>
        ComAdobeGraniteWorkflowCorePayloadmapPayloadMoveListenerInfo ComAdobeGraniteWorkflowCorePayloadmapPayloadMoveListener(NancyContext context, bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, List<string> payloadMoveWhiteList, bool? payloadMoveHandleFromWorkflowProcess);

        /// <summary>
        /// 
        /// </summary>
        /// <param name="context">Context of request</param>
        /// <param name="post"> (optional)</param>
        /// <param name="apply"> (optional)</param>
        /// <param name="delete"> (optional)</param>
        /// <param name="action"> (optional)</param>
        /// <param name="location"> (optional)</param>
        /// <param name="propertylist"> (optional)</param>
        /// <param name="cqWorkflowConfigWorkflowPackagesRootPath"> (optional)</param>
        /// <param name="cqWorkflowConfigWorkflowProcessLegacyMode"> (optional)</param>
        /// <param name="cqWorkflowConfigAllowLocking"> (optional)</param>
        /// <returns>ComAdobeGraniteWorkflowCoreWorkflowConfigInfo</returns>
        ComAdobeGraniteWorkflowCoreWorkflowConfigInfo ComAdobeGraniteWorkflowCoreWorkflowConfig(NancyContext context, bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, List<string> cqWorkflowConfigWorkflowPackagesRootPath, bool? cqWorkflowConfigWorkflowProcessLegacyMode, bool? cqWorkflowConfigAllowLocking);

        /// <summary>
        /// 
        /// </summary>
        /// <param name="context">Context of request</param>
        /// <param name="post"> (optional)</param>
        /// <param name="apply"> (optional)</param>
        /// <param name="delete"> (optional)</param>
        /// <param name="action"> (optional)</param>
        /// <param name="location"> (optional)</param>
        /// <param name="propertylist"> (optional)</param>
        /// <param name="graniteWorkflowinboxSortPropertyName"> (optional)</param>
        /// <param name="graniteWorkflowinboxSortOrder"> (optional)</param>
        /// <param name="cqWorkflowJobRetry"> (optional)</param>
        /// <param name="cqWorkflowSuperuser"> (optional)</param>
        /// <param name="graniteWorkflowInboxQuerySize"> (optional)</param>
        /// <param name="graniteWorkflowAdminUserGroupFilter"> (optional)</param>
        /// <param name="graniteWorkflowEnforceWorkitemAssigneePermissions"> (optional)</param>
        /// <param name="graniteWorkflowEnforceWorkflowInitiatorPermissions"> (optional)</param>
        /// <param name="graniteWorkflowInjectTenantIdInJobTopics"> (optional)</param>
        /// <param name="graniteWorkflowMaxPurgeSaveThreshold"> (optional)</param>
        /// <param name="graniteWorkflowMaxPurgeQueryCount"> (optional)</param>
        /// <returns>ComAdobeGraniteWorkflowCoreWorkflowSessionFactoryInfo</returns>
        ComAdobeGraniteWorkflowCoreWorkflowSessionFactoryInfo ComAdobeGraniteWorkflowCoreWorkflowSessionFactory(NancyContext context, bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, string graniteWorkflowinboxSortPropertyName, string graniteWorkflowinboxSortOrder, int? cqWorkflowJobRetry, List<string> cqWorkflowSuperuser, int? graniteWorkflowInboxQuerySize, bool? graniteWorkflowAdminUserGroupFilter, bool? graniteWorkflowEnforceWorkitemAssigneePermissions, bool? graniteWorkflowEnforceWorkflowInitiatorPermissions, bool? graniteWorkflowInjectTenantIdInJobTopics, int? graniteWorkflowMaxPurgeSaveThreshold, int? graniteWorkflowMaxPurgeQueryCount);

        /// <summary>
        /// 
        /// </summary>
        /// <param name="context">Context of request</param>
        /// <param name="post"> (optional)</param>
        /// <param name="apply"> (optional)</param>
        /// <param name="delete"> (optional)</param>
        /// <param name="action"> (optional)</param>
        /// <param name="location"> (optional)</param>
        /// <param name="propertylist"> (optional)</param>
        /// <param name="scheduledpurgeName"> (optional)</param>
        /// <param name="scheduledpurgeWorkflowStatus"> (optional)</param>
        /// <param name="scheduledpurgeModelIds"> (optional)</param>
        /// <param name="scheduledpurgeDaysold"> (optional)</param>
        /// <returns>ComAdobeGraniteWorkflowPurgeSchedulerInfo</returns>
        ComAdobeGraniteWorkflowPurgeSchedulerInfo ComAdobeGraniteWorkflowPurgeScheduler(NancyContext context, bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, string scheduledpurgeName, string scheduledpurgeWorkflowStatus, List<string> scheduledpurgeModelIds, int? scheduledpurgeDaysold);

        /// <summary>
        /// 
        /// </summary>
        /// <param name="context">Context of request</param>
        /// <param name="post"> (optional)</param>
        /// <param name="apply"> (optional)</param>
        /// <param name="delete"> (optional)</param>
        /// <param name="action"> (optional)</param>
        /// <param name="location"> (optional)</param>
        /// <param name="propertylist"> (optional)</param>
        /// <param name="maxConnections"> (optional)</param>
        /// <param name="maxRequests"> (optional)</param>
        /// <param name="requestTimeout"> (optional)</param>
        /// <param name="requestRetries"> (optional)</param>
        /// <param name="launchTimeout"> (optional)</param>
        /// <returns>ComAdobeOctopusNcommBootstrapInfo</returns>
        ComAdobeOctopusNcommBootstrapInfo ComAdobeOctopusNcommBootstrap(NancyContext context, bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, int? maxConnections, int? maxRequests, int? requestTimeout, int? requestRetries, int? launchTimeout);

        /// <summary>
        /// 
        /// </summary>
        /// <param name="context">Context of request</param>
        /// <param name="post"> (optional)</param>
        /// <param name="apply"> (optional)</param>
        /// <param name="delete"> (optional)</param>
        /// <param name="action"> (optional)</param>
        /// <param name="location"> (optional)</param>
        /// <param name="propertylist"> (optional)</param>
        /// <param name="communitiesIntegrationLivefyreSlingEventFilter"> (optional)</param>
        /// <returns>ComAdobeSocialIntegrationsLivefyreUserPingforpullImplPingPullSInfo</returns>
        ComAdobeSocialIntegrationsLivefyreUserPingforpullImplPingPullSInfo ComAdobeSocialIntegrationsLivefyreUserPingforpullImplPingPullS(NancyContext context, bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, string communitiesIntegrationLivefyreSlingEventFilter);

        /// <summary>
        /// 
        /// </summary>
        /// <param name="context">Context of request</param>
        /// <param name="post"> (optional)</param>
        /// <param name="apply"> (optional)</param>
        /// <param name="delete"> (optional)</param>
        /// <param name="action"> (optional)</param>
        /// <param name="location"> (optional)</param>
        /// <param name="propertylist"> (optional)</param>
        /// <param name="maxConnections"> (optional)</param>
        /// <param name="maxRequests"> (optional)</param>
        /// <param name="requestTimeout"> (optional)</param>
        /// <param name="logDir"> (optional)</param>
        /// <returns>ComAdobeXmpWorkerFilesNcommXMPFilesNCommInfo</returns>
        ComAdobeXmpWorkerFilesNcommXMPFilesNCommInfo ComAdobeXmpWorkerFilesNcommXMPFilesNComm(NancyContext context, bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, string maxConnections, string maxRequests, string requestTimeout, string logDir);

        /// <summary>
        /// 
        /// </summary>
        /// <param name="context">Context of request</param>
        /// <param name="post"> (optional)</param>
        /// <param name="apply"> (optional)</param>
        /// <param name="delete"> (optional)</param>
        /// <param name="action"> (optional)</param>
        /// <param name="location"> (optional)</param>
        /// <param name="propertylist"> (optional)</param>
        /// <param name="jdbcDriverClass"> (optional)</param>
        /// <param name="jdbcConnectionUri"> (optional)</param>
        /// <param name="jdbcUsername"> (optional)</param>
        /// <param name="jdbcPassword"> (optional)</param>
        /// <param name="jdbcValidationQuery"> (optional)</param>
        /// <param name="defaultReadonly"> (optional)</param>
        /// <param name="defaultAutocommit"> (optional)</param>
        /// <param name="poolSize"> (optional)</param>
        /// <param name="poolMaxWaitMsec"> (optional)</param>
        /// <param name="datasourceName"> (optional)</param>
        /// <param name="datasourceSvcProperties"> (optional)</param>
        /// <returns>ComDayCommonsDatasourceJdbcpoolJdbcPoolServiceInfo</returns>
        ComDayCommonsDatasourceJdbcpoolJdbcPoolServiceInfo ComDayCommonsDatasourceJdbcpoolJdbcPoolService(NancyContext context, bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, string jdbcDriverClass, string jdbcConnectionUri, string jdbcUsername, string jdbcPassword, string jdbcValidationQuery, bool? defaultReadonly, bool? defaultAutocommit, int? poolSize, int? poolMaxWaitMsec, string datasourceName, List<string> datasourceSvcProperties);

        /// <summary>
        /// 
        /// </summary>
        /// <param name="context">Context of request</param>
        /// <param name="post"> (optional)</param>
        /// <param name="apply"> (optional)</param>
        /// <param name="delete"> (optional)</param>
        /// <param name="action"> (optional)</param>
        /// <param name="location"> (optional)</param>
        /// <param name="propertylist"> (optional)</param>
        /// <param name="proxyEnabled"> (optional)</param>
        /// <param name="proxyHost"> (optional)</param>
        /// <param name="proxyUser"> (optional)</param>
        /// <param name="proxyPassword"> (optional)</param>
        /// <param name="proxyNtlmHost"> (optional)</param>
        /// <param name="proxyNtlmDomain"> (optional)</param>
        /// <param name="proxyExceptions"> (optional)</param>
        /// <returns>ComDayCommonsHttpclientInfo</returns>
        ComDayCommonsHttpclientInfo ComDayCommonsHttpclient(NancyContext context, bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, bool? proxyEnabled, string proxyHost, string proxyUser, string proxyPassword, string proxyNtlmHost, string proxyNtlmDomain, List<string> proxyExceptions);

        /// <summary>
        /// 
        /// </summary>
        /// <param name="context">Context of request</param>
        /// <param name="post"> (optional)</param>
        /// <param name="apply"> (optional)</param>
        /// <param name="delete"> (optional)</param>
        /// <param name="action"> (optional)</param>
        /// <param name="location"> (optional)</param>
        /// <param name="propertylist"> (optional)</param>
        /// <param name="cqStoreListenerAdditionalStorePaths"> (optional)</param>
        /// <returns>ComDayCqAnalyticsImplStorePropertiesChangeListenerInfo</returns>
        ComDayCqAnalyticsImplStorePropertiesChangeListenerInfo ComDayCqAnalyticsImplStorePropertiesChangeListener(NancyContext context, bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, List<string> cqStoreListenerAdditionalStorePaths);

        /// <summary>
        /// 
        /// </summary>
        /// <param name="context">Context of request</param>
        /// <param name="post"> (optional)</param>
        /// <param name="apply"> (optional)</param>
        /// <param name="delete"> (optional)</param>
        /// <param name="action"> (optional)</param>
        /// <param name="location"> (optional)</param>
        /// <param name="propertylist"> (optional)</param>
        /// <param name="allowedPaths"> (optional)</param>
        /// <param name="cqAnalyticsSaintExporterPagesize"> (optional)</param>
        /// <returns>ComDayCqAnalyticsSitecatalystImplExporterClassificationsExporteInfo</returns>
        ComDayCqAnalyticsSitecatalystImplExporterClassificationsExporteInfo ComDayCqAnalyticsSitecatalystImplExporterClassificationsExporte(NancyContext context, bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, List<string> allowedPaths, int? cqAnalyticsSaintExporterPagesize);

        /// <summary>
        /// 
        /// </summary>
        /// <param name="context">Context of request</param>
        /// <param name="post"> (optional)</param>
        /// <param name="apply"> (optional)</param>
        /// <param name="delete"> (optional)</param>
        /// <param name="action"> (optional)</param>
        /// <param name="location"> (optional)</param>
        /// <param name="propertylist"> (optional)</param>
        /// <param name="reportFetchAttempts"> (optional)</param>
        /// <param name="reportFetchDelay"> (optional)</param>
        /// <returns>ComDayCqAnalyticsSitecatalystImplImporterReportImporterInfo</returns>
        ComDayCqAnalyticsSitecatalystImplImporterReportImporterInfo ComDayCqAnalyticsSitecatalystImplImporterReportImporter(NancyContext context, bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, int? reportFetchAttempts, int? reportFetchDelay);

        /// <summary>
        /// 
        /// </summary>
        /// <param name="context">Context of request</param>
        /// <param name="post"> (optional)</param>
        /// <param name="apply"> (optional)</param>
        /// <param name="delete"> (optional)</param>
        /// <param name="action"> (optional)</param>
        /// <param name="location"> (optional)</param>
        /// <param name="propertylist"> (optional)</param>
        /// <param name="cqAnalyticsAdapterfactoryContextstores"> (optional)</param>
        /// <returns>ComDayCqAnalyticsSitecatalystImplSitecatalystAdapterFactoryInfo</returns>
        ComDayCqAnalyticsSitecatalystImplSitecatalystAdapterFactoryInfo ComDayCqAnalyticsSitecatalystImplSitecatalystAdapterFactory(NancyContext context, bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, List<string> cqAnalyticsAdapterfactoryContextstores);

        /// <summary>
        /// 
        /// </summary>
        /// <param name="context">Context of request</param>
        /// <param name="post"> (optional)</param>
        /// <param name="apply"> (optional)</param>
        /// <param name="delete"> (optional)</param>
        /// <param name="action"> (optional)</param>
        /// <param name="location"> (optional)</param>
        /// <param name="propertylist"> (optional)</param>
        /// <param name="cqAnalyticsSitecatalystServiceDatacenterUrl"> (optional)</param>
        /// <param name="devhostnamepatterns"> (optional)</param>
        /// <param name="connectionTimeout"> (optional)</param>
        /// <param name="socketTimeout"> (optional)</param>
        /// <returns>ComDayCqAnalyticsSitecatalystImplSitecatalystHttpClientImplInfo</returns>
        ComDayCqAnalyticsSitecatalystImplSitecatalystHttpClientImplInfo ComDayCqAnalyticsSitecatalystImplSitecatalystHttpClientImpl(NancyContext context, bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, List<string> cqAnalyticsSitecatalystServiceDatacenterUrl, List<string> devhostnamepatterns, int? connectionTimeout, int? socketTimeout);

        /// <summary>
        /// 
        /// </summary>
        /// <param name="context">Context of request</param>
        /// <param name="post"> (optional)</param>
        /// <param name="apply"> (optional)</param>
        /// <param name="delete"> (optional)</param>
        /// <param name="action"> (optional)</param>
        /// <param name="location"> (optional)</param>
        /// <param name="propertylist"> (optional)</param>
        /// <param name="cqAnalyticsTestandtargetAccountoptionsupdaterEnabled"> (optional)</param>
        /// <returns>ComDayCqAnalyticsTestandtargetImplAccountOptionsUpdaterInfo</returns>
        ComDayCqAnalyticsTestandtargetImplAccountOptionsUpdaterInfo ComDayCqAnalyticsTestandtargetImplAccountOptionsUpdater(NancyContext context, bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, bool? cqAnalyticsTestandtargetAccountoptionsupdaterEnabled);

        /// <summary>
        /// 
        /// </summary>
        /// <param name="context">Context of request</param>
        /// <param name="post"> (optional)</param>
        /// <param name="apply"> (optional)</param>
        /// <param name="delete"> (optional)</param>
        /// <param name="action"> (optional)</param>
        /// <param name="location"> (optional)</param>
        /// <param name="propertylist"> (optional)</param>
        /// <param name="cqAnalyticsTestandtargetDeleteauthoractivitylistenerEnabled"> (optional)</param>
        /// <returns>ComDayCqAnalyticsTestandtargetImplDeleteAuthorActivityListenerInfo</returns>
        ComDayCqAnalyticsTestandtargetImplDeleteAuthorActivityListenerInfo ComDayCqAnalyticsTestandtargetImplDeleteAuthorActivityListener(NancyContext context, bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, bool? cqAnalyticsTestandtargetDeleteauthoractivitylistenerEnabled);

        /// <summary>
        /// 
        /// </summary>
        /// <param name="context">Context of request</param>
        /// <param name="post"> (optional)</param>
        /// <param name="apply"> (optional)</param>
        /// <param name="delete"> (optional)</param>
        /// <param name="action"> (optional)</param>
        /// <param name="location"> (optional)</param>
        /// <param name="propertylist"> (optional)</param>
        /// <param name="cqAnalyticsTestandtargetPushauthorcampaignpagelistenerEnabled"> (optional)</param>
        /// <returns>ComDayCqAnalyticsTestandtargetImplPushAuthorCampaignPageListenerInfo</returns>
        ComDayCqAnalyticsTestandtargetImplPushAuthorCampaignPageListenerInfo ComDayCqAnalyticsTestandtargetImplPushAuthorCampaignPageListener(NancyContext context, bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, bool? cqAnalyticsTestandtargetPushauthorcampaignpagelistenerEnabled);

        /// <summary>
        /// 
        /// </summary>
        /// <param name="context">Context of request</param>
        /// <param name="post"> (optional)</param>
        /// <param name="apply"> (optional)</param>
        /// <param name="delete"> (optional)</param>
        /// <param name="action"> (optional)</param>
        /// <param name="location"> (optional)</param>
        /// <param name="propertylist"> (optional)</param>
        /// <param name="cqAnalyticsTestandtargetSegmentimporterEnabled"> (optional)</param>
        /// <returns>ComDayCqAnalyticsTestandtargetImplSegmentImporterInfo</returns>
        ComDayCqAnalyticsTestandtargetImplSegmentImporterInfo ComDayCqAnalyticsTestandtargetImplSegmentImporter(NancyContext context, bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, bool? cqAnalyticsTestandtargetSegmentimporterEnabled);

        /// <summary>
        /// 
        /// </summary>
        /// <param name="context">Context of request</param>
        /// <param name="post"> (optional)</param>
        /// <param name="apply"> (optional)</param>
        /// <param name="delete"> (optional)</param>
        /// <param name="action"> (optional)</param>
        /// <param name="location"> (optional)</param>
        /// <param name="propertylist"> (optional)</param>
        /// <param name="endpointUri"> (optional)</param>
        /// <param name="connectionTimeout"> (optional)</param>
        /// <param name="socketTimeout"> (optional)</param>
        /// <returns>ComDayCqAnalyticsTestandtargetImplServiceWebServiceImplInfo</returns>
        ComDayCqAnalyticsTestandtargetImplServiceWebServiceImplInfo ComDayCqAnalyticsTestandtargetImplServiceWebServiceImpl(NancyContext context, bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, string endpointUri, int? connectionTimeout, int? socketTimeout);

        /// <summary>
        /// 
        /// </summary>
        /// <param name="context">Context of request</param>
        /// <param name="post"> (optional)</param>
        /// <param name="apply"> (optional)</param>
        /// <param name="delete"> (optional)</param>
        /// <param name="action"> (optional)</param>
        /// <param name="location"> (optional)</param>
        /// <param name="propertylist"> (optional)</param>
        /// <param name="testandtargetEndpointUrl"> (optional)</param>
        /// <returns>ComDayCqAnalyticsTestandtargetImplServletsAdminServerServletInfo</returns>
        ComDayCqAnalyticsTestandtargetImplServletsAdminServerServletInfo ComDayCqAnalyticsTestandtargetImplServletsAdminServerServlet(NancyContext context, bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, string testandtargetEndpointUrl);

        /// <summary>
        /// 
        /// </summary>
        /// <param name="context">Context of request</param>
        /// <param name="post"> (optional)</param>
        /// <param name="apply"> (optional)</param>
        /// <param name="delete"> (optional)</param>
        /// <param name="action"> (optional)</param>
        /// <param name="location"> (optional)</param>
        /// <param name="propertylist"> (optional)</param>
        /// <param name="cqAnalyticsTestandtargetApiUrl"> (optional)</param>
        /// <param name="cqAnalyticsTestandtargetTimeout"> (optional)</param>
        /// <param name="cqAnalyticsTestandtargetSockettimeout"> (optional)</param>
        /// <param name="cqAnalyticsTestandtargetRecommendationsUrlReplace"> (optional)</param>
        /// <param name="cqAnalyticsTestandtargetRecommendationsUrlReplacewith"> (optional)</param>
        /// <returns>ComDayCqAnalyticsTestandtargetImplTestandtargetHttpClientImplInfo</returns>
        ComDayCqAnalyticsTestandtargetImplTestandtargetHttpClientImplInfo ComDayCqAnalyticsTestandtargetImplTestandtargetHttpClientImpl(NancyContext context, bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, string cqAnalyticsTestandtargetApiUrl, int? cqAnalyticsTestandtargetTimeout, int? cqAnalyticsTestandtargetSockettimeout, string cqAnalyticsTestandtargetRecommendationsUrlReplace, string cqAnalyticsTestandtargetRecommendationsUrlReplacewith);

        /// <summary>
        /// 
        /// </summary>
        /// <param name="context">Context of request</param>
        /// <param name="post"> (optional)</param>
        /// <param name="apply"> (optional)</param>
        /// <param name="delete"> (optional)</param>
        /// <param name="action"> (optional)</param>
        /// <param name="location"> (optional)</param>
        /// <param name="propertylist"> (optional)</param>
        /// <param name="cugExemptedPrincipals"> (optional)</param>
        /// <param name="cugEnabled"> (optional)</param>
        /// <param name="cugPrincipalsRegex"> (optional)</param>
        /// <param name="cugPrincipalsReplacement"> (optional)</param>
        /// <returns>ComDayCqAuthImplCugCugSupportImplInfo</returns>
        ComDayCqAuthImplCugCugSupportImplInfo ComDayCqAuthImplCugCugSupportImpl(NancyContext context, bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, List<string> cugExemptedPrincipals, bool? cugEnabled, string cugPrincipalsRegex, string cugPrincipalsReplacement);

        /// <summary>
        /// 
        /// </summary>
        /// <param name="context">Context of request</param>
        /// <param name="post"> (optional)</param>
        /// <param name="apply"> (optional)</param>
        /// <param name="delete"> (optional)</param>
        /// <param name="action"> (optional)</param>
        /// <param name="location"> (optional)</param>
        /// <param name="propertylist"> (optional)</param>
        /// <param name="path"> (optional)</param>
        /// <param name="serviceRanking"> (optional)</param>
        /// <param name="authLoginselectorMappings"> (optional)</param>
        /// <param name="authLoginselectorChangepwMappings"> (optional)</param>
        /// <param name="authLoginselectorDefaultloginpage"> (optional)</param>
        /// <param name="authLoginselectorDefaultchangepwpage"> (optional)</param>
        /// <param name="authLoginselectorHandle"> (optional)</param>
        /// <param name="authLoginselectorHandleAllExtensions"> (optional)</param>
        /// <returns>ComDayCqAuthImplLoginSelectorHandlerInfo</returns>
        ComDayCqAuthImplLoginSelectorHandlerInfo ComDayCqAuthImplLoginSelectorHandler(NancyContext context, bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, string path, int? serviceRanking, List<string> authLoginselectorMappings, List<string> authLoginselectorChangepwMappings, string authLoginselectorDefaultloginpage, string authLoginselectorDefaultchangepwpage, List<string> authLoginselectorHandle, bool? authLoginselectorHandleAllExtensions);

        /// <summary>
        /// 
        /// </summary>
        /// <param name="context">Context of request</param>
        /// <param name="post"> (optional)</param>
        /// <param name="apply"> (optional)</param>
        /// <param name="delete"> (optional)</param>
        /// <param name="action"> (optional)</param>
        /// <param name="location"> (optional)</param>
        /// <param name="propertylist"> (optional)</param>
        /// <param name="externalizerDomains"> (optional)</param>
        /// <param name="externalizerHost"> (optional)</param>
        /// <param name="externalizerContextpath"> (optional)</param>
        /// <param name="externalizerEncodedpath"> (optional)</param>
        /// <returns>ComDayCqCommonsImplExternalizerImplInfo</returns>
        ComDayCqCommonsImplExternalizerImplInfo ComDayCqCommonsImplExternalizerImpl(NancyContext context, bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, List<string> externalizerDomains, string externalizerHost, string externalizerContextpath, bool? externalizerEncodedpath);

        /// <summary>
        /// 
        /// </summary>
        /// <param name="context">Context of request</param>
        /// <param name="post"> (optional)</param>
        /// <param name="apply"> (optional)</param>
        /// <param name="delete"> (optional)</param>
        /// <param name="action"> (optional)</param>
        /// <param name="location"> (optional)</param>
        /// <param name="propertylist"> (optional)</param>
        /// <param name="rootmappingTarget"> (optional)</param>
        /// <returns>ComDayCqCommonsServletsRootMappingServletInfo</returns>
        ComDayCqCommonsServletsRootMappingServletInfo ComDayCqCommonsServletsRootMappingServlet(NancyContext context, bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, string rootmappingTarget);

        /// <summary>
        /// 
        /// </summary>
        /// <param name="context">Context of request</param>
        /// <param name="post"> (optional)</param>
        /// <param name="apply"> (optional)</param>
        /// <param name="delete"> (optional)</param>
        /// <param name="action"> (optional)</param>
        /// <param name="location"> (optional)</param>
        /// <param name="propertylist"> (optional)</param>
        /// <param name="codeupgradetasks"> (optional)</param>
        /// <param name="codeupgradetaskfilters"> (optional)</param>
        /// <returns>ComDayCqCompatCodeupgradeImplCodeUpgradeExecutionConditionCheckeInfo</returns>
        ComDayCqCompatCodeupgradeImplCodeUpgradeExecutionConditionCheckeInfo ComDayCqCompatCodeupgradeImplCodeUpgradeExecutionConditionChecke(NancyContext context, bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, List<string> codeupgradetasks, List<string> codeupgradetaskfilters);

        /// <summary>
        /// 
        /// </summary>
        /// <param name="context">Context of request</param>
        /// <param name="post"> (optional)</param>
        /// <param name="apply"> (optional)</param>
        /// <param name="delete"> (optional)</param>
        /// <param name="action"> (optional)</param>
        /// <param name="location"> (optional)</param>
        /// <param name="propertylist"> (optional)</param>
        /// <param name="upgradeTaskIgnoreList"> (optional)</param>
        /// <returns>ComDayCqCompatCodeupgradeImplUpgradeTaskIgnoreListInfo</returns>
        ComDayCqCompatCodeupgradeImplUpgradeTaskIgnoreListInfo ComDayCqCompatCodeupgradeImplUpgradeTaskIgnoreList(NancyContext context, bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, List<string> upgradeTaskIgnoreList);

        /// <summary>
        /// 
        /// </summary>
        /// <param name="context">Context of request</param>
        /// <param name="post"> (optional)</param>
        /// <param name="apply"> (optional)</param>
        /// <param name="delete"> (optional)</param>
        /// <param name="action"> (optional)</param>
        /// <param name="location"> (optional)</param>
        /// <param name="propertylist"> (optional)</param>
        /// <param name="effectiveBundleListPath"> (optional)</param>
        /// <returns>ComDayCqCompatCodeupgradeImplVersionRangeTaskIgnorelistInfo</returns>
        ComDayCqCompatCodeupgradeImplVersionRangeTaskIgnorelistInfo ComDayCqCompatCodeupgradeImplVersionRangeTaskIgnorelist(NancyContext context, bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, string effectiveBundleListPath);

        /// <summary>
        /// 
        /// </summary>
        /// <param name="context">Context of request</param>
        /// <param name="post"> (optional)</param>
        /// <param name="apply"> (optional)</param>
        /// <param name="delete"> (optional)</param>
        /// <param name="action"> (optional)</param>
        /// <param name="location"> (optional)</param>
        /// <param name="propertylist"> (optional)</param>
        /// <param name="contentsyncFallbackAuthorizable"> (optional)</param>
        /// <param name="contentsyncFallbackUpdateuser"> (optional)</param>
        /// <returns>ComDayCqContentsyncImplContentSyncManagerImplInfo</returns>
        ComDayCqContentsyncImplContentSyncManagerImplInfo ComDayCqContentsyncImplContentSyncManagerImpl(NancyContext context, bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, string contentsyncFallbackAuthorizable, string contentsyncFallbackUpdateuser);

        /// <summary>
        /// 
        /// </summary>
        /// <param name="context">Context of request</param>
        /// <param name="post"> (optional)</param>
        /// <param name="apply"> (optional)</param>
        /// <param name="delete"> (optional)</param>
        /// <param name="action"> (optional)</param>
        /// <param name="location"> (optional)</param>
        /// <param name="propertylist"> (optional)</param>
        /// <param name="largeFileThreshold"> (optional)</param>
        /// <param name="largeCommentThreshold"> (optional)</param>
        /// <param name="cqDamEnableExtMetaExtraction"> (optional)</param>
        /// <returns>ComDayCqDamCommonsHandlerStandardImageHandlerInfo</returns>
        ComDayCqDamCommonsHandlerStandardImageHandlerInfo ComDayCqDamCommonsHandlerStandardImageHandler(NancyContext context, bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, int? largeFileThreshold, int? largeCommentThreshold, bool? cqDamEnableExtMetaExtraction);

        /// <summary>
        /// 
        /// </summary>
        /// <param name="context">Context of request</param>
        /// <param name="post"> (optional)</param>
        /// <param name="apply"> (optional)</param>
        /// <param name="delete"> (optional)</param>
        /// <param name="action"> (optional)</param>
        /// <param name="location"> (optional)</param>
        /// <param name="propertylist"> (optional)</param>
        /// <param name="xmpFilterApplyWhitelist"> (optional)</param>
        /// <param name="xmpFilterWhitelist"> (optional)</param>
        /// <param name="xmpFilterApplyBlacklist"> (optional)</param>
        /// <param name="xmpFilterBlacklist"> (optional)</param>
        /// <returns>ComDayCqDamCommonsMetadataXmpFilterBlackWhiteInfo</returns>
        ComDayCqDamCommonsMetadataXmpFilterBlackWhiteInfo ComDayCqDamCommonsMetadataXmpFilterBlackWhite(NancyContext context, bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, bool? xmpFilterApplyWhitelist, List<string> xmpFilterWhitelist, bool? xmpFilterApplyBlacklist, List<string> xmpFilterBlacklist);

        /// <summary>
        /// 
        /// </summary>
        /// <param name="context">Context of request</param>
        /// <param name="post"> (optional)</param>
        /// <param name="apply"> (optional)</param>
        /// <param name="delete"> (optional)</param>
        /// <param name="action"> (optional)</param>
        /// <param name="location"> (optional)</param>
        /// <param name="propertylist"> (optional)</param>
        /// <param name="largeFileMin"> (optional)</param>
        /// <param name="cacheApply"> (optional)</param>
        /// <param name="mimeTypes"> (optional)</param>
        /// <returns>ComDayCqDamCommonsUtilImplAssetCacheImplInfo</returns>
        ComDayCqDamCommonsUtilImplAssetCacheImplInfo ComDayCqDamCommonsUtilImplAssetCacheImpl(NancyContext context, bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, int? largeFileMin, bool? cacheApply, List<string> mimeTypes);

        /// <summary>
        /// 
        /// </summary>
        /// <param name="context">Context of request</param>
        /// <param name="post"> (optional)</param>
        /// <param name="apply"> (optional)</param>
        /// <param name="delete"> (optional)</param>
        /// <param name="action"> (optional)</param>
        /// <param name="location"> (optional)</param>
        /// <param name="propertylist"> (optional)</param>
        /// <param name="cqDamConfigAnnotationPdfDocumentWidth"> (optional)</param>
        /// <param name="cqDamConfigAnnotationPdfDocumentHeight"> (optional)</param>
        /// <param name="cqDamConfigAnnotationPdfDocumentPaddingHorizontal"> (optional)</param>
        /// <param name="cqDamConfigAnnotationPdfDocumentPaddingVertical"> (optional)</param>
        /// <param name="cqDamConfigAnnotationPdfFontSize"> (optional)</param>
        /// <param name="cqDamConfigAnnotationPdfFontColor"> (optional)</param>
        /// <param name="cqDamConfigAnnotationPdfFontFamily"> (optional)</param>
        /// <param name="cqDamConfigAnnotationPdfFontLight"> (optional)</param>
        /// <param name="cqDamConfigAnnotationPdfMarginTextImage"> (optional)</param>
        /// <param name="cqDamConfigAnnotationPdfMinImageHeight"> (optional)</param>
        /// <param name="cqDamConfigAnnotationPdfReviewStatusWidth"> (optional)</param>
        /// <param name="cqDamConfigAnnotationPdfReviewStatusColorApproved"> (optional)</param>
        /// <param name="cqDamConfigAnnotationPdfReviewStatusColorRejected"> (optional)</param>
        /// <param name="cqDamConfigAnnotationPdfReviewStatusColorChangesRequested"> (optional)</param>
        /// <param name="cqDamConfigAnnotationPdfAnnotationMarkerWidth"> (optional)</param>
        /// <param name="cqDamConfigAnnotationPdfAssetMinheight"> (optional)</param>
        /// <returns>ComDayCqDamCoreImplAnnotationPdfAnnotationPdfConfigInfo</returns>
        ComDayCqDamCoreImplAnnotationPdfAnnotationPdfConfigInfo ComDayCqDamCoreImplAnnotationPdfAnnotationPdfConfig(NancyContext context, bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, int? cqDamConfigAnnotationPdfDocumentWidth, int? cqDamConfigAnnotationPdfDocumentHeight, int? cqDamConfigAnnotationPdfDocumentPaddingHorizontal, int? cqDamConfigAnnotationPdfDocumentPaddingVertical, int? cqDamConfigAnnotationPdfFontSize, string cqDamConfigAnnotationPdfFontColor, string cqDamConfigAnnotationPdfFontFamily, string cqDamConfigAnnotationPdfFontLight, int? cqDamConfigAnnotationPdfMarginTextImage, int? cqDamConfigAnnotationPdfMinImageHeight, int? cqDamConfigAnnotationPdfReviewStatusWidth, string cqDamConfigAnnotationPdfReviewStatusColorApproved, string cqDamConfigAnnotationPdfReviewStatusColorRejected, string cqDamConfigAnnotationPdfReviewStatusColorChangesRequested, int? cqDamConfigAnnotationPdfAnnotationMarkerWidth, int? cqDamConfigAnnotationPdfAssetMinheight);

        /// <summary>
        /// 
        /// </summary>
        /// <param name="context">Context of request</param>
        /// <param name="post"> (optional)</param>
        /// <param name="apply"> (optional)</param>
        /// <param name="delete"> (optional)</param>
        /// <param name="action"> (optional)</param>
        /// <param name="location"> (optional)</param>
        /// <param name="propertylist"> (optional)</param>
        /// <param name="enabled"> (optional)</param>
        /// <returns>ComDayCqDamCoreImplAssetMoveListenerInfo</returns>
        ComDayCqDamCoreImplAssetMoveListenerInfo ComDayCqDamCoreImplAssetMoveListener(NancyContext context, bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, bool? enabled);

        /// <summary>
        /// 
        /// </summary>
        /// <param name="context">Context of request</param>
        /// <param name="post"> (optional)</param>
        /// <param name="apply"> (optional)</param>
        /// <param name="delete"> (optional)</param>
        /// <param name="action"> (optional)</param>
        /// <param name="location"> (optional)</param>
        /// <param name="propertylist"> (optional)</param>
        /// <param name="isEnabled"> (optional)</param>
        /// <returns>ComDayCqDamCoreImplAssethomeAssetHomePageConfigurationInfo</returns>
        ComDayCqDamCoreImplAssethomeAssetHomePageConfigurationInfo ComDayCqDamCoreImplAssethomeAssetHomePageConfiguration(NancyContext context, bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, bool? isEnabled);

        /// <summary>
        /// 
        /// </summary>
        /// <param name="context">Context of request</param>
        /// <param name="post"> (optional)</param>
        /// <param name="apply"> (optional)</param>
        /// <param name="delete"> (optional)</param>
        /// <param name="action"> (optional)</param>
        /// <param name="location"> (optional)</param>
        /// <param name="propertylist"> (optional)</param>
        /// <param name="cqDamAdhocAssetSharePrezipMaxcontentsize"> (optional)</param>
        /// <returns>ComDayCqDamCoreImplAssetlinkshareAdhocAssetShareProxyServletInfo</returns>
        ComDayCqDamCoreImplAssetlinkshareAdhocAssetShareProxyServletInfo ComDayCqDamCoreImplAssetlinkshareAdhocAssetShareProxyServlet(NancyContext context, bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, int? cqDamAdhocAssetSharePrezipMaxcontentsize);

        /// <summary>
        /// 
        /// </summary>
        /// <param name="context">Context of request</param>
        /// <param name="post"> (optional)</param>
        /// <param name="apply"> (optional)</param>
        /// <param name="delete"> (optional)</param>
        /// <param name="action"> (optional)</param>
        /// <param name="location"> (optional)</param>
        /// <param name="propertylist"> (optional)</param>
        /// <param name="cqDamImageCacheMaxMemory"> (optional)</param>
        /// <param name="cqDamImageCacheMaxAge"> (optional)</param>
        /// <param name="cqDamImageCacheMaxDimension"> (optional)</param>
        /// <returns>ComDayCqDamCoreImplCacheCQBufferedImageCacheInfo</returns>
        ComDayCqDamCoreImplCacheCQBufferedImageCacheInfo ComDayCqDamCoreImplCacheCQBufferedImageCache(NancyContext context, bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, int? cqDamImageCacheMaxMemory, int? cqDamImageCacheMaxAge, string cqDamImageCacheMaxDimension);

        /// <summary>
        /// 
        /// </summary>
        /// <param name="context">Context of request</param>
        /// <param name="post"> (optional)</param>
        /// <param name="apply"> (optional)</param>
        /// <param name="delete"> (optional)</param>
        /// <param name="action"> (optional)</param>
        /// <param name="location"> (optional)</param>
        /// <param name="propertylist"> (optional)</param>
        /// <param name="changeeventlistenerObservedPaths"> (optional)</param>
        /// <returns>ComDayCqDamCoreImplDamChangeEventListenerInfo</returns>
        ComDayCqDamCoreImplDamChangeEventListenerInfo ComDayCqDamCoreImplDamChangeEventListener(NancyContext context, bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, List<string> changeeventlistenerObservedPaths);

        /// <summary>
        /// 
        /// </summary>
        /// <param name="context">Context of request</param>
        /// <param name="post"> (optional)</param>
        /// <param name="apply"> (optional)</param>
        /// <param name="delete"> (optional)</param>
        /// <param name="action"> (optional)</param>
        /// <param name="location"> (optional)</param>
        /// <param name="propertylist"> (optional)</param>
        /// <param name="schedulerExpression"> (optional)</param>
        /// <param name="maxSavedActivities"> (optional)</param>
        /// <param name="saveInterval"> (optional)</param>
        /// <param name="enableActivityPurge"> (optional)</param>
        /// <param name="eventTypes"> (optional)</param>
        /// <returns>ComDayCqDamCoreImplDamEventPurgeServiceInfo</returns>
        ComDayCqDamCoreImplDamEventPurgeServiceInfo ComDayCqDamCoreImplDamEventPurgeService(NancyContext context, bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, string schedulerExpression, int? maxSavedActivities, int? saveInterval, bool? enableActivityPurge, string eventTypes);

        /// <summary>
        /// 
        /// </summary>
        /// <param name="context">Context of request</param>
        /// <param name="post"> (optional)</param>
        /// <param name="apply"> (optional)</param>
        /// <param name="delete"> (optional)</param>
        /// <param name="action"> (optional)</param>
        /// <param name="location"> (optional)</param>
        /// <param name="propertylist"> (optional)</param>
        /// <param name="eventFilter"> (optional)</param>
        /// <param name="eventQueueLength"> (optional)</param>
        /// <param name="eventrecorderEnabled"> (optional)</param>
        /// <param name="eventrecorderBlacklist"> (optional)</param>
        /// <param name="eventrecorderEventtypes"> (optional)</param>
        /// <returns>ComDayCqDamCoreImplDamEventRecorderImplInfo</returns>
        ComDayCqDamCoreImplDamEventRecorderImplInfo ComDayCqDamCoreImplDamEventRecorderImpl(NancyContext context, bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, string eventFilter, int? eventQueueLength, bool? eventrecorderEnabled, List<string> eventrecorderBlacklist, string eventrecorderEventtypes);

        /// <summary>
        /// 
        /// </summary>
        /// <param name="context">Context of request</param>
        /// <param name="post"> (optional)</param>
        /// <param name="apply"> (optional)</param>
        /// <param name="delete"> (optional)</param>
        /// <param name="action"> (optional)</param>
        /// <param name="location"> (optional)</param>
        /// <param name="propertylist"> (optional)</param>
        /// <param name="eventFilter"> (optional)</param>
        /// <param name="enabled"> (optional)</param>
        /// <returns>ComDayCqDamCoreImplEventDamEventAuditListenerInfo</returns>
        ComDayCqDamCoreImplEventDamEventAuditListenerInfo ComDayCqDamCoreImplEventDamEventAuditListener(NancyContext context, bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, string eventFilter, bool? enabled);

        /// <summary>
        /// 
        /// </summary>
        /// <param name="context">Context of request</param>
        /// <param name="post"> (optional)</param>
        /// <param name="apply"> (optional)</param>
        /// <param name="delete"> (optional)</param>
        /// <param name="action"> (optional)</param>
        /// <param name="location"> (optional)</param>
        /// <param name="propertylist"> (optional)</param>
        /// <param name="cqDamExpiryNotificationSchedulerIstimebased"> (optional)</param>
        /// <param name="cqDamExpiryNotificationSchedulerTimebasedRule"> (optional)</param>
        /// <param name="cqDamExpiryNotificationSchedulerPeriodRule"> (optional)</param>
        /// <param name="sendEmail"> (optional)</param>
        /// <param name="assetExpiredLimit"> (optional)</param>
        /// <param name="priorNotificationSeconds"> (optional)</param>
        /// <param name="cqDamExpiryNotificationUrlProtocol"> (optional)</param>
        /// <returns>ComDayCqDamCoreImplExpiryNotificationJobImplInfo</returns>
        ComDayCqDamCoreImplExpiryNotificationJobImplInfo ComDayCqDamCoreImplExpiryNotificationJobImpl(NancyContext context, bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, bool? cqDamExpiryNotificationSchedulerIstimebased, string cqDamExpiryNotificationSchedulerTimebasedRule, int? cqDamExpiryNotificationSchedulerPeriodRule, bool? sendEmail, int? assetExpiredLimit, int? priorNotificationSeconds, string cqDamExpiryNotificationUrlProtocol);

        /// <summary>
        /// 
        /// </summary>
        /// <param name="context">Context of request</param>
        /// <param name="post"> (optional)</param>
        /// <param name="apply"> (optional)</param>
        /// <param name="delete"> (optional)</param>
        /// <param name="action"> (optional)</param>
        /// <param name="location"> (optional)</param>
        /// <param name="propertylist"> (optional)</param>
        /// <param name="isEnabled"> (optional)</param>
        /// <returns>ComDayCqDamCoreImplFoldermetadataschemaFolderMetadataSchemaFeatInfo</returns>
        ComDayCqDamCoreImplFoldermetadataschemaFolderMetadataSchemaFeatInfo ComDayCqDamCoreImplFoldermetadataschemaFolderMetadataSchemaFeat(NancyContext context, bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, bool? isEnabled);

        /// <summary>
        /// 
        /// </summary>
        /// <param name="context">Context of request</param>
        /// <param name="post"> (optional)</param>
        /// <param name="apply"> (optional)</param>
        /// <param name="delete"> (optional)</param>
        /// <param name="action"> (optional)</param>
        /// <param name="location"> (optional)</param>
        /// <param name="propertylist"> (optional)</param>
        /// <param name="skipBufferedcache"> (optional)</param>
        /// <returns>ComDayCqDamCoreImplGfxCommonsGfxRendererInfo</returns>
        ComDayCqDamCoreImplGfxCommonsGfxRendererInfo ComDayCqDamCoreImplGfxCommonsGfxRenderer(NancyContext context, bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, bool? skipBufferedcache);

        /// <summary>
        /// 
        /// </summary>
        /// <param name="context">Context of request</param>
        /// <param name="post"> (optional)</param>
        /// <param name="apply"> (optional)</param>
        /// <param name="delete"> (optional)</param>
        /// <param name="action"> (optional)</param>
        /// <param name="location"> (optional)</param>
        /// <param name="propertylist"> (optional)</param>
        /// <param name="mimetype"> (optional)</param>
        /// <returns>ComDayCqDamCoreImplHandlerEPSFormatHandlerInfo</returns>
        ComDayCqDamCoreImplHandlerEPSFormatHandlerInfo ComDayCqDamCoreImplHandlerEPSFormatHandler(NancyContext context, bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, string mimetype);

        /// <summary>
        /// 
        /// </summary>
        /// <param name="context">Context of request</param>
        /// <param name="post"> (optional)</param>
        /// <param name="apply"> (optional)</param>
        /// <param name="delete"> (optional)</param>
        /// <param name="action"> (optional)</param>
        /// <param name="location"> (optional)</param>
        /// <param name="propertylist"> (optional)</param>
        /// <param name="mimetype"> (optional)</param>
        /// <returns>ComDayCqDamCoreImplHandlerIndesignFormatHandlerInfo</returns>
        ComDayCqDamCoreImplHandlerIndesignFormatHandlerInfo ComDayCqDamCoreImplHandlerIndesignFormatHandler(NancyContext context, bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, List<string> mimetype);

        /// <summary>
        /// 
        /// </summary>
        /// <param name="context">Context of request</param>
        /// <param name="post"> (optional)</param>
        /// <param name="apply"> (optional)</param>
        /// <param name="delete"> (optional)</param>
        /// <param name="action"> (optional)</param>
        /// <param name="location"> (optional)</param>
        /// <param name="propertylist"> (optional)</param>
        /// <param name="cqDamEnableExtMetaExtraction"> (optional)</param>
        /// <param name="largeFileThreshold"> (optional)</param>
        /// <param name="largeCommentThreshold"> (optional)</param>
        /// <returns>ComDayCqDamCoreImplHandlerJpegHandlerInfo</returns>
        ComDayCqDamCoreImplHandlerJpegHandlerInfo ComDayCqDamCoreImplHandlerJpegHandler(NancyContext context, bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, bool? cqDamEnableExtMetaExtraction, int? largeFileThreshold, int? largeCommentThreshold);

        /// <summary>
        /// 
        /// </summary>
        /// <param name="context">Context of request</param>
        /// <param name="post"> (optional)</param>
        /// <param name="apply"> (optional)</param>
        /// <param name="delete"> (optional)</param>
        /// <param name="action"> (optional)</param>
        /// <param name="location"> (optional)</param>
        /// <param name="propertylist"> (optional)</param>
        /// <param name="xmphandlerCqFormats"> (optional)</param>
        /// <returns>ComDayCqDamCoreImplHandlerXmpNCommXMPHandlerInfo</returns>
        ComDayCqDamCoreImplHandlerXmpNCommXMPHandlerInfo ComDayCqDamCoreImplHandlerXmpNCommXMPHandler(NancyContext context, bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, List<string> xmphandlerCqFormats);

        /// <summary>
        /// 
        /// </summary>
        /// <param name="context">Context of request</param>
        /// <param name="post"> (optional)</param>
        /// <param name="apply"> (optional)</param>
        /// <param name="delete"> (optional)</param>
        /// <param name="action"> (optional)</param>
        /// <param name="location"> (optional)</param>
        /// <param name="propertylist"> (optional)</param>
        /// <param name="jmxObjectname"> (optional)</param>
        /// <param name="propertyMeasureEnabled"> (optional)</param>
        /// <param name="propertyName"> (optional)</param>
        /// <param name="propertyMaxWaitMs"> (optional)</param>
        /// <param name="propertyMaxRate"> (optional)</param>
        /// <param name="fulltextMeasureEnabled"> (optional)</param>
        /// <param name="fulltextName"> (optional)</param>
        /// <param name="fulltextMaxWaitMs"> (optional)</param>
        /// <param name="fulltextMaxRate"> (optional)</param>
        /// <returns>ComDayCqDamCoreImplJmxAssetIndexUpdateMonitorInfo</returns>
        ComDayCqDamCoreImplJmxAssetIndexUpdateMonitorInfo ComDayCqDamCoreImplJmxAssetIndexUpdateMonitor(NancyContext context, bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, string jmxObjectname, bool? propertyMeasureEnabled, string propertyName, int? propertyMaxWaitMs, decimal? propertyMaxRate, bool? fulltextMeasureEnabled, string fulltextName, int? fulltextMaxWaitMs, decimal? fulltextMaxRate);

        /// <summary>
        /// 
        /// </summary>
        /// <param name="context">Context of request</param>
        /// <param name="post"> (optional)</param>
        /// <param name="apply"> (optional)</param>
        /// <param name="delete"> (optional)</param>
        /// <param name="action"> (optional)</param>
        /// <param name="location"> (optional)</param>
        /// <param name="propertylist"> (optional)</param>
        /// <param name="jmxObjectname"> (optional)</param>
        /// <returns>ComDayCqDamCoreImplJmxAssetMigrationMBeanImplInfo</returns>
        ComDayCqDamCoreImplJmxAssetMigrationMBeanImplInfo ComDayCqDamCoreImplJmxAssetMigrationMBeanImpl(NancyContext context, bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, string jmxObjectname);

        /// <summary>
        /// 
        /// </summary>
        /// <param name="context">Context of request</param>
        /// <param name="post"> (optional)</param>
        /// <param name="apply"> (optional)</param>
        /// <param name="delete"> (optional)</param>
        /// <param name="action"> (optional)</param>
        /// <param name="location"> (optional)</param>
        /// <param name="propertylist"> (optional)</param>
        /// <param name="jmxObjectname"> (optional)</param>
        /// <param name="active"> (optional)</param>
        /// <returns>ComDayCqDamCoreImplJmxAssetUpdateMonitorImplInfo</returns>
        ComDayCqDamCoreImplJmxAssetUpdateMonitorImplInfo ComDayCqDamCoreImplJmxAssetUpdateMonitorImpl(NancyContext context, bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, string jmxObjectname, bool? active);

        /// <summary>
        /// 
        /// </summary>
        /// <param name="context">Context of request</param>
        /// <param name="post"> (optional)</param>
        /// <param name="apply"> (optional)</param>
        /// <param name="delete"> (optional)</param>
        /// <param name="action"> (optional)</param>
        /// <param name="location"> (optional)</param>
        /// <param name="propertylist"> (optional)</param>
        /// <param name="operation"> (optional)</param>
        /// <param name="emailEnabled"> (optional)</param>
        /// <returns>ComDayCqDamCoreImplJobsMetadataexportAsyncMetadataExportConfigInfo</returns>
        ComDayCqDamCoreImplJobsMetadataexportAsyncMetadataExportConfigInfo ComDayCqDamCoreImplJobsMetadataexportAsyncMetadataExportConfig(NancyContext context, bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, string operation, bool? emailEnabled);

        /// <summary>
        /// 
        /// </summary>
        /// <param name="context">Context of request</param>
        /// <param name="post"> (optional)</param>
        /// <param name="apply"> (optional)</param>
        /// <param name="delete"> (optional)</param>
        /// <param name="action"> (optional)</param>
        /// <param name="location"> (optional)</param>
        /// <param name="propertylist"> (optional)</param>
        /// <param name="operation"> (optional)</param>
        /// <param name="operationIcon"> (optional)</param>
        /// <param name="topicName"> (optional)</param>
        /// <param name="emailEnabled"> (optional)</param>
        /// <returns>ComDayCqDamCoreImplJobsMetadataimportAsyncMetadataImportConfigInfo</returns>
        ComDayCqDamCoreImplJobsMetadataimportAsyncMetadataImportConfigInfo ComDayCqDamCoreImplJobsMetadataimportAsyncMetadataImportConfig(NancyContext context, bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, string operation, string operationIcon, string topicName, bool? emailEnabled);

        /// <summary>
        /// 
        /// </summary>
        /// <param name="context">Context of request</param>
        /// <param name="post"> (optional)</param>
        /// <param name="apply"> (optional)</param>
        /// <param name="delete"> (optional)</param>
        /// <param name="action"> (optional)</param>
        /// <param name="location"> (optional)</param>
        /// <param name="propertylist"> (optional)</param>
        /// <param name="slingServletPaths"> (optional)</param>
        /// <param name="slingServletMethods"> (optional)</param>
        /// <param name="cqDamEnableAnonymous"> (optional)</param>
        /// <returns>ComDayCqDamCoreImplLightboxLightboxServletInfo</returns>
        ComDayCqDamCoreImplLightboxLightboxServletInfo ComDayCqDamCoreImplLightboxLightboxServlet(NancyContext context, bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, string slingServletPaths, List<string> slingServletMethods, bool? cqDamEnableAnonymous);

        /// <summary>
        /// 
        /// </summary>
        /// <param name="context">Context of request</param>
        /// <param name="post"> (optional)</param>
        /// <param name="apply"> (optional)</param>
        /// <param name="delete"> (optional)</param>
        /// <param name="action"> (optional)</param>
        /// <param name="location"> (optional)</param>
        /// <param name="propertylist"> (optional)</param>
        /// <param name="granitedata"> (optional)</param>
        /// <returns>ComDayCqDamCoreImplMetadataEditorSelectComponentHandlerInfo</returns>
        ComDayCqDamCoreImplMetadataEditorSelectComponentHandlerInfo ComDayCqDamCoreImplMetadataEditorSelectComponentHandler(NancyContext context, bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, List<string> granitedata);

        /// <summary>
        /// 
        /// </summary>
        /// <param name="context">Context of request</param>
        /// <param name="post"> (optional)</param>
        /// <param name="apply"> (optional)</param>
        /// <param name="delete"> (optional)</param>
        /// <param name="action"> (optional)</param>
        /// <param name="location"> (optional)</param>
        /// <param name="propertylist"> (optional)</param>
        /// <param name="cqDamAllowAllMime"> (optional)</param>
        /// <param name="cqDamAllowedAssetMimes"> (optional)</param>
        /// <returns>ComDayCqDamCoreImplMimeTypeAssetUploadRestrictionHelperInfo</returns>
        ComDayCqDamCoreImplMimeTypeAssetUploadRestrictionHelperInfo ComDayCqDamCoreImplMimeTypeAssetUploadRestrictionHelper(NancyContext context, bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, bool? cqDamAllowAllMime, List<string> cqDamAllowedAssetMimes);

        /// <summary>
        /// 
        /// </summary>
        /// <param name="context">Context of request</param>
        /// <param name="post"> (optional)</param>
        /// <param name="apply"> (optional)</param>
        /// <param name="delete"> (optional)</param>
        /// <param name="action"> (optional)</param>
        /// <param name="location"> (optional)</param>
        /// <param name="propertylist"> (optional)</param>
        /// <param name="cqDamDetectAssetMimeFromContent"> (optional)</param>
        /// <returns>ComDayCqDamCoreImplMimeTypeDamMimeTypeServiceImplInfo</returns>
        ComDayCqDamCoreImplMimeTypeDamMimeTypeServiceImplInfo ComDayCqDamCoreImplMimeTypeDamMimeTypeServiceImpl(NancyContext context, bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, bool? cqDamDetectAssetMimeFromContent);

        /// <summary>
        /// 
        /// </summary>
        /// <param name="context">Context of request</param>
        /// <param name="post"> (optional)</param>
        /// <param name="apply"> (optional)</param>
        /// <param name="delete"> (optional)</param>
        /// <param name="action"> (optional)</param>
        /// <param name="location"> (optional)</param>
        /// <param name="propertylist"> (optional)</param>
        /// <param name="cqDamMissingmetadataNotificationSchedulerIstimebased"> (optional)</param>
        /// <param name="cqDamMissingmetadataNotificationSchedulerTimebasedRule"> (optional)</param>
        /// <param name="cqDamMissingmetadataNotificationSchedulerPeriodRule"> (optional)</param>
        /// <param name="cqDamMissingmetadataNotificationRecipient"> (optional)</param>
        /// <returns>ComDayCqDamCoreImplMissingMetadataNotificationJobInfo</returns>
        ComDayCqDamCoreImplMissingMetadataNotificationJobInfo ComDayCqDamCoreImplMissingMetadataNotificationJob(NancyContext context, bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, bool? cqDamMissingmetadataNotificationSchedulerIstimebased, string cqDamMissingmetadataNotificationSchedulerTimebasedRule, int? cqDamMissingmetadataNotificationSchedulerPeriodRule, string cqDamMissingmetadataNotificationRecipient);

        /// <summary>
        /// 
        /// </summary>
        /// <param name="context">Context of request</param>
        /// <param name="post"> (optional)</param>
        /// <param name="apply"> (optional)</param>
        /// <param name="delete"> (optional)</param>
        /// <param name="action"> (optional)</param>
        /// <param name="location"> (optional)</param>
        /// <param name="propertylist"> (optional)</param>
        /// <param name="processLabel"> (optional)</param>
        /// <param name="notifyOnComplete"> (optional)</param>
        /// <returns>ComDayCqDamCoreImplProcessSendTransientWorkflowCompletedEmailPrInfo</returns>
        ComDayCqDamCoreImplProcessSendTransientWorkflowCompletedEmailPrInfo ComDayCqDamCoreImplProcessSendTransientWorkflowCompletedEmailPr(NancyContext context, bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, string processLabel, bool? notifyOnComplete);

        /// <summary>
        /// 
        /// </summary>
        /// <param name="context">Context of request</param>
        /// <param name="post"> (optional)</param>
        /// <param name="apply"> (optional)</param>
        /// <param name="delete"> (optional)</param>
        /// <param name="action"> (optional)</param>
        /// <param name="location"> (optional)</param>
        /// <param name="propertylist"> (optional)</param>
        /// <param name="mimeTypes"> (optional)</param>
        /// <param name="maxExtract"> (optional)</param>
        /// <returns>ComDayCqDamCoreImplProcessTextExtractionProcessInfo</returns>
        ComDayCqDamCoreImplProcessTextExtractionProcessInfo ComDayCqDamCoreImplProcessTextExtractionProcess(NancyContext context, bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, List<string> mimeTypes, int? maxExtract);

        /// <summary>
        /// 
        /// </summary>
        /// <param name="context">Context of request</param>
        /// <param name="post"> (optional)</param>
        /// <param name="apply"> (optional)</param>
        /// <param name="delete"> (optional)</param>
        /// <param name="action"> (optional)</param>
        /// <param name="location"> (optional)</param>
        /// <param name="propertylist"> (optional)</param>
        /// <param name="xmpPropagate"> (optional)</param>
        /// <param name="xmpExcludes"> (optional)</param>
        /// <returns>ComDayCqDamCoreImplRenditionMakerImplInfo</returns>
        ComDayCqDamCoreImplRenditionMakerImplInfo ComDayCqDamCoreImplRenditionMakerImpl(NancyContext context, bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, bool? xmpPropagate, List<string> xmpExcludes);

        /// <summary>
        /// 
        /// </summary>
        /// <param name="context">Context of request</param>
        /// <param name="post"> (optional)</param>
        /// <param name="apply"> (optional)</param>
        /// <param name="delete"> (optional)</param>
        /// <param name="action"> (optional)</param>
        /// <param name="location"> (optional)</param>
        /// <param name="propertylist"> (optional)</param>
        /// <param name="queryBatchSize"> (optional)</param>
        /// <returns>ComDayCqDamCoreImplReportsReportExportServiceInfo</returns>
        ComDayCqDamCoreImplReportsReportExportServiceInfo ComDayCqDamCoreImplReportsReportExportService(NancyContext context, bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, int? queryBatchSize);

        /// <summary>
        /// 
        /// </summary>
        /// <param name="context">Context of request</param>
        /// <param name="post"> (optional)</param>
        /// <param name="apply"> (optional)</param>
        /// <param name="delete"> (optional)</param>
        /// <param name="action"> (optional)</param>
        /// <param name="location"> (optional)</param>
        /// <param name="propertylist"> (optional)</param>
        /// <param name="schedulerExpression"> (optional)</param>
        /// <param name="maxSavedReports"> (optional)</param>
        /// <param name="timeDuration"> (optional)</param>
        /// <param name="enableReportPurge"> (optional)</param>
        /// <returns>ComDayCqDamCoreImplReportsReportPurgeServiceInfo</returns>
        ComDayCqDamCoreImplReportsReportPurgeServiceInfo ComDayCqDamCoreImplReportsReportPurgeService(NancyContext context, bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, string schedulerExpression, int? maxSavedReports, int? timeDuration, bool? enableReportPurge);

        /// <summary>
        /// 
        /// </summary>
        /// <param name="context">Context of request</param>
        /// <param name="post"> (optional)</param>
        /// <param name="apply"> (optional)</param>
        /// <param name="delete"> (optional)</param>
        /// <param name="action"> (optional)</param>
        /// <param name="location"> (optional)</param>
        /// <param name="propertylist"> (optional)</param>
        /// <param name="enabled"> (optional)</param>
        /// <returns>ComDayCqDamCoreImplServletAssetDownloadServletInfo</returns>
        ComDayCqDamCoreImplServletAssetDownloadServletInfo ComDayCqDamCoreImplServletAssetDownloadServlet(NancyContext context, bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, bool? enabled);

        /// <summary>
        /// 
        /// </summary>
        /// <param name="context">Context of request</param>
        /// <param name="post"> (optional)</param>
        /// <param name="apply"> (optional)</param>
        /// <param name="delete"> (optional)</param>
        /// <param name="action"> (optional)</param>
        /// <param name="location"> (optional)</param>
        /// <param name="propertylist"> (optional)</param>
        /// <param name="cqDamBatchStatusMaxassets"> (optional)</param>
        /// <returns>ComDayCqDamCoreImplServletAssetStatusServletInfo</returns>
        ComDayCqDamCoreImplServletAssetStatusServletInfo ComDayCqDamCoreImplServletAssetStatusServlet(NancyContext context, bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, int? cqDamBatchStatusMaxassets);

        /// <summary>
        /// 
        /// </summary>
        /// <param name="context">Context of request</param>
        /// <param name="post"> (optional)</param>
        /// <param name="apply"> (optional)</param>
        /// <param name="delete"> (optional)</param>
        /// <param name="action"> (optional)</param>
        /// <param name="location"> (optional)</param>
        /// <param name="propertylist"> (optional)</param>
        /// <param name="cqDamBatchIndesignMaxassets"> (optional)</param>
        /// <returns>ComDayCqDamCoreImplServletAssetXMPSearchServletInfo</returns>
        ComDayCqDamCoreImplServletAssetXMPSearchServletInfo ComDayCqDamCoreImplServletAssetXMPSearchServlet(NancyContext context, bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, int? cqDamBatchIndesignMaxassets);

        /// <summary>
        /// 
        /// </summary>
        /// <param name="context">Context of request</param>
        /// <param name="post"> (optional)</param>
        /// <param name="apply"> (optional)</param>
        /// <param name="delete"> (optional)</param>
        /// <param name="action"> (optional)</param>
        /// <param name="location"> (optional)</param>
        /// <param name="propertylist"> (optional)</param>
        /// <param name="cqDamBatchMetadataAssetDefault"> (optional)</param>
        /// <param name="cqDamBatchMetadataCollectionDefault"> (optional)</param>
        /// <param name="cqDamBatchMetadataMaxresources"> (optional)</param>
        /// <returns>ComDayCqDamCoreImplServletBatchMetadataServletInfo</returns>
        ComDayCqDamCoreImplServletBatchMetadataServletInfo ComDayCqDamCoreImplServletBatchMetadataServlet(NancyContext context, bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, List<string> cqDamBatchMetadataAssetDefault, List<string> cqDamBatchMetadataCollectionDefault, int? cqDamBatchMetadataMaxresources);

        /// <summary>
        /// 
        /// </summary>
        /// <param name="context">Context of request</param>
        /// <param name="post"> (optional)</param>
        /// <param name="apply"> (optional)</param>
        /// <param name="delete"> (optional)</param>
        /// <param name="action"> (optional)</param>
        /// <param name="location"> (optional)</param>
        /// <param name="propertylist"> (optional)</param>
        /// <param name="slingServletResourceTypes"> (optional)</param>
        /// <param name="slingServletMethods"> (optional)</param>
        /// <param name="cqDamDrmEnable"> (optional)</param>
        /// <returns>ComDayCqDamCoreImplServletBinaryProviderServletInfo</returns>
        ComDayCqDamCoreImplServletBinaryProviderServletInfo ComDayCqDamCoreImplServletBinaryProviderServlet(NancyContext context, bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, List<string> slingServletResourceTypes, List<string> slingServletMethods, bool? cqDamDrmEnable);

        /// <summary>
        /// 
        /// </summary>
        /// <param name="context">Context of request</param>
        /// <param name="post"> (optional)</param>
        /// <param name="apply"> (optional)</param>
        /// <param name="delete"> (optional)</param>
        /// <param name="action"> (optional)</param>
        /// <param name="location"> (optional)</param>
        /// <param name="propertylist"> (optional)</param>
        /// <param name="cqDamBatchCollectionProperties"> (optional)</param>
        /// <param name="cqDamBatchCollectionMaxcollections"> (optional)</param>
        /// <returns>ComDayCqDamCoreImplServletCollectionServletInfo</returns>
        ComDayCqDamCoreImplServletCollectionServletInfo ComDayCqDamCoreImplServletCollectionServlet(NancyContext context, bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, List<string> cqDamBatchCollectionProperties, int? cqDamBatchCollectionMaxcollections);

        /// <summary>
        /// 
        /// </summary>
        /// <param name="context">Context of request</param>
        /// <param name="post"> (optional)</param>
        /// <param name="apply"> (optional)</param>
        /// <param name="delete"> (optional)</param>
        /// <param name="action"> (optional)</param>
        /// <param name="location"> (optional)</param>
        /// <param name="propertylist"> (optional)</param>
        /// <param name="cqDamBatchCollectionsProperties"> (optional)</param>
        /// <param name="cqDamBatchCollectionsLimit"> (optional)</param>
        /// <returns>ComDayCqDamCoreImplServletCollectionsServletInfo</returns>
        ComDayCqDamCoreImplServletCollectionsServletInfo ComDayCqDamCoreImplServletCollectionsServlet(NancyContext context, bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, List<string> cqDamBatchCollectionsProperties, int? cqDamBatchCollectionsLimit);

        /// <summary>
        /// 
        /// </summary>
        /// <param name="context">Context of request</param>
        /// <param name="post"> (optional)</param>
        /// <param name="apply"> (optional)</param>
        /// <param name="delete"> (optional)</param>
        /// <param name="action"> (optional)</param>
        /// <param name="location"> (optional)</param>
        /// <param name="propertylist"> (optional)</param>
        /// <param name="moreInfo"> (optional)</param>
        /// <param name="mntoverlaydamguicontentassetsmoreinfoHtmlpath"> (optional)</param>
        /// <returns>ComDayCqDamCoreImplServletCompanionServletInfo</returns>
        ComDayCqDamCoreImplServletCompanionServletInfo ComDayCqDamCoreImplServletCompanionServlet(NancyContext context, bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, string moreInfo, string mntoverlaydamguicontentassetsmoreinfoHtmlpath);

        /// <summary>
        /// 
        /// </summary>
        /// <param name="context">Context of request</param>
        /// <param name="post"> (optional)</param>
        /// <param name="apply"> (optional)</param>
        /// <param name="delete"> (optional)</param>
        /// <param name="action"> (optional)</param>
        /// <param name="location"> (optional)</param>
        /// <param name="propertylist"> (optional)</param>
        /// <param name="detectDuplicate"> (optional)</param>
        /// <returns>ComDayCqDamCoreImplServletCreateAssetServletInfo</returns>
        ComDayCqDamCoreImplServletCreateAssetServletInfo ComDayCqDamCoreImplServletCreateAssetServlet(NancyContext context, bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, bool? detectDuplicate);

        /// <summary>
        /// 
        /// </summary>
        /// <param name="context">Context of request</param>
        /// <param name="post"> (optional)</param>
        /// <param name="apply"> (optional)</param>
        /// <param name="delete"> (optional)</param>
        /// <param name="action"> (optional)</param>
        /// <param name="location"> (optional)</param>
        /// <param name="propertylist"> (optional)</param>
        /// <param name="cqMimeTypeBlacklist"> (optional)</param>
        /// <param name="cqDamEmptyMime"> (optional)</param>
        /// <returns>ComDayCqDamCoreImplServletDamContentDispositionFilterInfo</returns>
        ComDayCqDamCoreImplServletDamContentDispositionFilterInfo ComDayCqDamCoreImplServletDamContentDispositionFilter(NancyContext context, bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, List<string> cqMimeTypeBlacklist, bool? cqDamEmptyMime);

        /// <summary>
        /// 
        /// </summary>
        /// <param name="context">Context of request</param>
        /// <param name="post"> (optional)</param>
        /// <param name="apply"> (optional)</param>
        /// <param name="delete"> (optional)</param>
        /// <param name="action"> (optional)</param>
        /// <param name="location"> (optional)</param>
        /// <param name="propertylist"> (optional)</param>
        /// <param name="cqDamCoreGuidlookupfilterEnabled"> (optional)</param>
        /// <returns>ComDayCqDamCoreImplServletGuidLookupFilterInfo</returns>
        ComDayCqDamCoreImplServletGuidLookupFilterInfo ComDayCqDamCoreImplServletGuidLookupFilter(NancyContext context, bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, bool? cqDamCoreGuidlookupfilterEnabled);

        /// <summary>
        /// 
        /// </summary>
        /// <param name="context">Context of request</param>
        /// <param name="post"> (optional)</param>
        /// <param name="apply"> (optional)</param>
        /// <param name="delete"> (optional)</param>
        /// <param name="action"> (optional)</param>
        /// <param name="location"> (optional)</param>
        /// <param name="propertylist"> (optional)</param>
        /// <param name="cqDamSyncWorkflowId"> (optional)</param>
        /// <param name="cqDamSyncFolderTypes"> (optional)</param>
        /// <returns>ComDayCqDamCoreImplServletHealthCheckServletInfo</returns>
        ComDayCqDamCoreImplServletHealthCheckServletInfo ComDayCqDamCoreImplServletHealthCheckServlet(NancyContext context, bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, string cqDamSyncWorkflowId, List<string> cqDamSyncFolderTypes);

        /// <summary>
        /// 
        /// </summary>
        /// <param name="context">Context of request</param>
        /// <param name="post"> (optional)</param>
        /// <param name="apply"> (optional)</param>
        /// <param name="delete"> (optional)</param>
        /// <param name="action"> (optional)</param>
        /// <param name="location"> (optional)</param>
        /// <param name="propertylist"> (optional)</param>
        /// <param name="slingServletResourceTypes"> (optional)</param>
        /// <param name="slingServletMethods"> (optional)</param>
        /// <param name="slingServletExtensions"> (optional)</param>
        /// <param name="slingServletSelectors"> (optional)</param>
        /// <returns>ComDayCqDamCoreImplServletMetadataGetServletInfo</returns>
        ComDayCqDamCoreImplServletMetadataGetServletInfo ComDayCqDamCoreImplServletMetadataGetServlet(NancyContext context, bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, string slingServletResourceTypes, string slingServletMethods, string slingServletExtensions, string slingServletSelectors);

        /// <summary>
        /// 
        /// </summary>
        /// <param name="context">Context of request</param>
        /// <param name="post"> (optional)</param>
        /// <param name="apply"> (optional)</param>
        /// <param name="delete"> (optional)</param>
        /// <param name="action"> (optional)</param>
        /// <param name="location"> (optional)</param>
        /// <param name="propertylist"> (optional)</param>
        /// <param name="cqDamDrmEnable"> (optional)</param>
        /// <returns>ComDayCqDamCoreImplServletMultipleLicenseAcceptServletInfo</returns>
        ComDayCqDamCoreImplServletMultipleLicenseAcceptServletInfo ComDayCqDamCoreImplServletMultipleLicenseAcceptServlet(NancyContext context, bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, bool? cqDamDrmEnable);

        /// <summary>
        /// 
        /// </summary>
        /// <param name="context">Context of request</param>
        /// <param name="post"> (optional)</param>
        /// <param name="apply"> (optional)</param>
        /// <param name="delete"> (optional)</param>
        /// <param name="action"> (optional)</param>
        /// <param name="location"> (optional)</param>
        /// <param name="propertylist"> (optional)</param>
        /// <param name="slingServletResourceTypes"> (optional)</param>
        /// <param name="slingServletMethods"> (optional)</param>
        /// <param name="slingServletSelectors"> (optional)</param>
        /// <param name="downloadConfig"> (optional)</param>
        /// <param name="viewSelector"> (optional)</param>
        /// <param name="sendEmail"> (optional)</param>
        /// <returns>ComDayCqDamCoreImplServletResourceCollectionServletInfo</returns>
        ComDayCqDamCoreImplServletResourceCollectionServletInfo ComDayCqDamCoreImplServletResourceCollectionServlet(NancyContext context, bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, List<string> slingServletResourceTypes, string slingServletMethods, string slingServletSelectors, string downloadConfig, string viewSelector, bool? sendEmail);

        /// <summary>
        /// 
        /// </summary>
        /// <param name="context">Context of request</param>
        /// <param name="post"> (optional)</param>
        /// <param name="apply"> (optional)</param>
        /// <param name="delete"> (optional)</param>
        /// <param name="action"> (optional)</param>
        /// <param name="location"> (optional)</param>
        /// <param name="propertylist"> (optional)</param>
        /// <param name="createPreviewEnabled"> (optional)</param>
        /// <param name="updatePreviewEnabled"> (optional)</param>
        /// <param name="queueSize"> (optional)</param>
        /// <param name="folderPreviewRenditionRegex"> (optional)</param>
        /// <returns>ComDayCqDamCoreImplUiPreviewFolderPreviewUpdaterImplInfo</returns>
        ComDayCqDamCoreImplUiPreviewFolderPreviewUpdaterImplInfo ComDayCqDamCoreImplUiPreviewFolderPreviewUpdaterImpl(NancyContext context, bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, bool? createPreviewEnabled, bool? updatePreviewEnabled, int? queueSize, string folderPreviewRenditionRegex);

        /// <summary>
        /// 
        /// </summary>
        /// <param name="context">Context of request</param>
        /// <param name="post"> (optional)</param>
        /// <param name="apply"> (optional)</param>
        /// <param name="delete"> (optional)</param>
        /// <param name="action"> (optional)</param>
        /// <param name="location"> (optional)</param>
        /// <param name="propertylist"> (optional)</param>
        /// <param name="cqDamConfigUnzipMaxuncompressedsize"> (optional)</param>
        /// <param name="cqDamConfigUnzipEncoding"> (optional)</param>
        /// <returns>ComDayCqDamCoreImplUnzipUnzipConfigInfo</returns>
        ComDayCqDamCoreImplUnzipUnzipConfigInfo ComDayCqDamCoreImplUnzipUnzipConfig(NancyContext context, bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, int? cqDamConfigUnzipMaxuncompressedsize, string cqDamConfigUnzipEncoding);

        /// <summary>
        /// 
        /// </summary>
        /// <param name="context">Context of request</param>
        /// <param name="post"> (optional)</param>
        /// <param name="apply"> (optional)</param>
        /// <param name="delete"> (optional)</param>
        /// <param name="action"> (optional)</param>
        /// <param name="location"> (optional)</param>
        /// <param name="propertylist"> (optional)</param>
        /// <param name="processLabel"> (optional)</param>
        /// <param name="cqDamEnableSha1"> (optional)</param>
        /// <returns>ComDayCqDamCoreProcessExifToolExtractMetadataProcessInfo</returns>
        ComDayCqDamCoreProcessExifToolExtractMetadataProcessInfo ComDayCqDamCoreProcessExifToolExtractMetadataProcess(NancyContext context, bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, string processLabel, bool? cqDamEnableSha1);

        /// <summary>
        /// 
        /// </summary>
        /// <param name="context">Context of request</param>
        /// <param name="post"> (optional)</param>
        /// <param name="apply"> (optional)</param>
        /// <param name="delete"> (optional)</param>
        /// <param name="action"> (optional)</param>
        /// <param name="location"> (optional)</param>
        /// <param name="propertylist"> (optional)</param>
        /// <param name="processLabel"> (optional)</param>
        /// <param name="cqDamEnableSha1"> (optional)</param>
        /// <returns>ComDayCqDamCoreProcessExtractMetadataProcessInfo</returns>
        ComDayCqDamCoreProcessExtractMetadataProcessInfo ComDayCqDamCoreProcessExtractMetadataProcess(NancyContext context, bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, string processLabel, bool? cqDamEnableSha1);

        /// <summary>
        /// 
        /// </summary>
        /// <param name="context">Context of request</param>
        /// <param name="post"> (optional)</param>
        /// <param name="apply"> (optional)</param>
        /// <param name="delete"> (optional)</param>
        /// <param name="action"> (optional)</param>
        /// <param name="location"> (optional)</param>
        /// <param name="propertylist"> (optional)</param>
        /// <param name="processLabel"> (optional)</param>
        /// <param name="cqDamEnableSha1"> (optional)</param>
        /// <param name="cqDamMetadataXssprotectedProperties"> (optional)</param>
        /// <returns>ComDayCqDamCoreProcessMetadataProcessorProcessInfo</returns>
        ComDayCqDamCoreProcessMetadataProcessorProcessInfo ComDayCqDamCoreProcessMetadataProcessorProcess(NancyContext context, bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, string processLabel, bool? cqDamEnableSha1, List<string> cqDamMetadataXssprotectedProperties);

        /// <summary>
        /// 
        /// </summary>
        /// <param name="context">Context of request</param>
        /// <param name="post"> (optional)</param>
        /// <param name="apply"> (optional)</param>
        /// <param name="delete"> (optional)</param>
        /// <param name="action"> (optional)</param>
        /// <param name="location"> (optional)</param>
        /// <param name="propertylist"> (optional)</param>
        /// <param name="executableSearchpath"> (optional)</param>
        /// <returns>ComDayCqDamHandlerFfmpegLocatorImplInfo</returns>
        ComDayCqDamHandlerFfmpegLocatorImplInfo ComDayCqDamHandlerFfmpegLocatorImpl(NancyContext context, bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, List<string> executableSearchpath);

        /// <summary>
        /// 
        /// </summary>
        /// <param name="context">Context of request</param>
        /// <param name="post"> (optional)</param>
        /// <param name="apply"> (optional)</param>
        /// <param name="delete"> (optional)</param>
        /// <param name="action"> (optional)</param>
        /// <param name="location"> (optional)</param>
        /// <param name="propertylist"> (optional)</param>
        /// <param name="eventFilter"> (optional)</param>
        /// <param name="fontmgrSystemFontDir"> (optional)</param>
        /// <param name="fontmgrAdobeFontDir"> (optional)</param>
        /// <param name="fontmgrCustomerFontDir"> (optional)</param>
        /// <returns>ComDayCqDamHandlerGibsonFontmanagerImplFontManagerServiceImplInfo</returns>
        ComDayCqDamHandlerGibsonFontmanagerImplFontManagerServiceImplInfo ComDayCqDamHandlerGibsonFontmanagerImplFontManagerServiceImpl(NancyContext context, bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, string eventFilter, List<string> fontmgrSystemFontDir, string fontmgrAdobeFontDir, string fontmgrCustomerFontDir);

        /// <summary>
        /// 
        /// </summary>
        /// <param name="context">Context of request</param>
        /// <param name="post"> (optional)</param>
        /// <param name="apply"> (optional)</param>
        /// <param name="delete"> (optional)</param>
        /// <param name="action"> (optional)</param>
        /// <param name="location"> (optional)</param>
        /// <param name="propertylist"> (optional)</param>
        /// <param name="rasterAnnotation"> (optional)</param>
        /// <returns>ComDayCqDamHandlerStandardPdfPdfHandlerInfo</returns>
        ComDayCqDamHandlerStandardPdfPdfHandlerInfo ComDayCqDamHandlerStandardPdfPdfHandler(NancyContext context, bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, bool? rasterAnnotation);

        /// <summary>
        /// 
        /// </summary>
        /// <param name="context">Context of request</param>
        /// <param name="post"> (optional)</param>
        /// <param name="apply"> (optional)</param>
        /// <param name="delete"> (optional)</param>
        /// <param name="action"> (optional)</param>
        /// <param name="location"> (optional)</param>
        /// <param name="propertylist"> (optional)</param>
        /// <param name="rasterAnnotation"> (optional)</param>
        /// <returns>ComDayCqDamHandlerStandardPsPostScriptHandlerInfo</returns>
        ComDayCqDamHandlerStandardPsPostScriptHandlerInfo ComDayCqDamHandlerStandardPsPostScriptHandler(NancyContext context, bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, bool? rasterAnnotation);

        /// <summary>
        /// 
        /// </summary>
        /// <param name="context">Context of request</param>
        /// <param name="post"> (optional)</param>
        /// <param name="apply"> (optional)</param>
        /// <param name="delete"> (optional)</param>
        /// <param name="action"> (optional)</param>
        /// <param name="location"> (optional)</param>
        /// <param name="propertylist"> (optional)</param>
        /// <param name="largeFileThreshold"> (optional)</param>
        /// <returns>ComDayCqDamHandlerStandardPsdPsdHandlerInfo</returns>
        ComDayCqDamHandlerStandardPsdPsdHandlerInfo ComDayCqDamHandlerStandardPsdPsdHandler(NancyContext context, bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, int? largeFileThreshold);

        /// <summary>
        /// 
        /// </summary>
        /// <param name="context">Context of request</param>
        /// <param name="post"> (optional)</param>
        /// <param name="apply"> (optional)</param>
        /// <param name="delete"> (optional)</param>
        /// <param name="action"> (optional)</param>
        /// <param name="location"> (optional)</param>
        /// <param name="propertylist"> (optional)</param>
        /// <param name="enableMultisession"> (optional)</param>
        /// <param name="idsCcEnable"> (optional)</param>
        /// <param name="enableRetry"> (optional)</param>
        /// <param name="enableRetryScripterror"> (optional)</param>
        /// <param name="externalizerDomainCqhost"> (optional)</param>
        /// <param name="externalizerDomainHttp"> (optional)</param>
        /// <returns>ComDayCqDamIdsImplIDSJobProcessorInfo</returns>
        ComDayCqDamIdsImplIDSJobProcessorInfo ComDayCqDamIdsImplIDSJobProcessor(NancyContext context, bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, bool? enableMultisession, bool? idsCcEnable, bool? enableRetry, bool? enableRetryScripterror, string externalizerDomainCqhost, string externalizerDomainHttp);

        /// <summary>
        /// 
        /// </summary>
        /// <param name="context">Context of request</param>
        /// <param name="post"> (optional)</param>
        /// <param name="apply"> (optional)</param>
        /// <param name="delete"> (optional)</param>
        /// <param name="action"> (optional)</param>
        /// <param name="location"> (optional)</param>
        /// <param name="propertylist"> (optional)</param>
        /// <param name="maxErrorsToBlacklist"> (optional)</param>
        /// <param name="retryIntervalToWhitelist"> (optional)</param>
        /// <param name="connectTimeout"> (optional)</param>
        /// <param name="socketTimeout"> (optional)</param>
        /// <param name="processLabel"> (optional)</param>
        /// <param name="connectionUseMax"> (optional)</param>
        /// <returns>ComDayCqDamIdsImplIDSPoolManagerImplInfo</returns>
        ComDayCqDamIdsImplIDSPoolManagerImplInfo ComDayCqDamIdsImplIDSPoolManagerImpl(NancyContext context, bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, int? maxErrorsToBlacklist, int? retryIntervalToWhitelist, int? connectTimeout, int? socketTimeout, string processLabel, int? connectionUseMax);

        /// <summary>
        /// 
        /// </summary>
        /// <param name="context">Context of request</param>
        /// <param name="post"> (optional)</param>
        /// <param name="apply"> (optional)</param>
        /// <param name="delete"> (optional)</param>
        /// <param name="action"> (optional)</param>
        /// <param name="location"> (optional)</param>
        /// <param name="propertylist"> (optional)</param>
        /// <param name="processLabel"> (optional)</param>
        /// <param name="extractPages"> (optional)</param>
        /// <returns>ComDayCqDamInddImplHandlerIndesignXMPHandlerInfo</returns>
        ComDayCqDamInddImplHandlerIndesignXMPHandlerInfo ComDayCqDamInddImplHandlerIndesignXMPHandler(NancyContext context, bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, string processLabel, bool? extractPages);

        /// <summary>
        /// 
        /// </summary>
        /// <param name="context">Context of request</param>
        /// <param name="post"> (optional)</param>
        /// <param name="apply"> (optional)</param>
        /// <param name="delete"> (optional)</param>
        /// <param name="action"> (optional)</param>
        /// <param name="location"> (optional)</param>
        /// <param name="propertylist"> (optional)</param>
        /// <param name="snippetcreationMaxcollections"> (optional)</param>
        /// <returns>ComDayCqDamInddImplServletSnippetCreationServletInfo</returns>
        ComDayCqDamInddImplServletSnippetCreationServletInfo ComDayCqDamInddImplServletSnippetCreationServlet(NancyContext context, bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, int? snippetcreationMaxcollections);

        /// <summary>
        /// 
        /// </summary>
        /// <param name="context">Context of request</param>
        /// <param name="post"> (optional)</param>
        /// <param name="apply"> (optional)</param>
        /// <param name="delete"> (optional)</param>
        /// <param name="action"> (optional)</param>
        /// <param name="location"> (optional)</param>
        /// <param name="propertylist"> (optional)</param>
        /// <param name="processLabel"> (optional)</param>
        /// <param name="cqDamInddPagesRegex"> (optional)</param>
        /// <param name="idsJobDecoupled"> (optional)</param>
        /// <param name="idsJobWorkflowModel"> (optional)</param>
        /// <returns>ComDayCqDamInddProcessINDDMediaExtractProcessInfo</returns>
        ComDayCqDamInddProcessINDDMediaExtractProcessInfo ComDayCqDamInddProcessINDDMediaExtractProcess(NancyContext context, bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, string processLabel, string cqDamInddPagesRegex, bool? idsJobDecoupled, string idsJobWorkflowModel);

        /// <summary>
        /// 
        /// </summary>
        /// <param name="context">Context of request</param>
        /// <param name="post"> (optional)</param>
        /// <param name="apply"> (optional)</param>
        /// <param name="delete"> (optional)</param>
        /// <param name="action"> (optional)</param>
        /// <param name="location"> (optional)</param>
        /// <param name="propertylist"> (optional)</param>
        /// <param name="batchCommitSize"> (optional)</param>
        /// <returns>ComDayCqDamPerformanceInternalAssetPerformanceDataHandlerImplInfo</returns>
        ComDayCqDamPerformanceInternalAssetPerformanceDataHandlerImplInfo ComDayCqDamPerformanceInternalAssetPerformanceDataHandlerImpl(NancyContext context, bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, int? batchCommitSize);

        /// <summary>
        /// 
        /// </summary>
        /// <param name="context">Context of request</param>
        /// <param name="post"> (optional)</param>
        /// <param name="apply"> (optional)</param>
        /// <param name="delete"> (optional)</param>
        /// <param name="action"> (optional)</param>
        /// <param name="location"> (optional)</param>
        /// <param name="propertylist"> (optional)</param>
        /// <param name="schedulerExpression"> (optional)</param>
        /// <returns>ComDayCqDamPerformanceInternalAssetPerformanceReportSyncJobInfo</returns>
        ComDayCqDamPerformanceInternalAssetPerformanceReportSyncJobInfo ComDayCqDamPerformanceInternalAssetPerformanceReportSyncJob(NancyContext context, bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, string schedulerExpression);

        /// <summary>
        /// 
        /// </summary>
        /// <param name="context">Context of request</param>
        /// <param name="post"> (optional)</param>
        /// <param name="apply"> (optional)</param>
        /// <param name="delete"> (optional)</param>
        /// <param name="action"> (optional)</param>
        /// <param name="location"> (optional)</param>
        /// <param name="propertylist"> (optional)</param>
        /// <param name="deleteZipFile"> (optional)</param>
        /// <returns>ComDayCqDamPimImplSourcingUploadProcessProductAssetsUploadProInfo</returns>
        ComDayCqDamPimImplSourcingUploadProcessProductAssetsUploadProInfo ComDayCqDamPimImplSourcingUploadProcessProductAssetsUploadPro(NancyContext context, bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, bool? deleteZipFile);

        /// <summary>
        /// 
        /// </summary>
        /// <param name="context">Context of request</param>
        /// <param name="post"> (optional)</param>
        /// <param name="apply"> (optional)</param>
        /// <param name="delete"> (optional)</param>
        /// <param name="action"> (optional)</param>
        /// <param name="location"> (optional)</param>
        /// <param name="propertylist"> (optional)</param>
        /// <param name="cqDamS7damDynamicmediaconfigeventlistenerEnabled"> (optional)</param>
        /// <returns>ComDayCqDamS7damCommonAnalyticsImplS7damDynamicMediaConfigEvenInfo</returns>
        ComDayCqDamS7damCommonAnalyticsImplS7damDynamicMediaConfigEvenInfo ComDayCqDamS7damCommonAnalyticsImplS7damDynamicMediaConfigEven(NancyContext context, bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, bool? cqDamS7damDynamicmediaconfigeventlistenerEnabled);

        /// <summary>
        /// 
        /// </summary>
        /// <param name="context">Context of request</param>
        /// <param name="post"> (optional)</param>
        /// <param name="apply"> (optional)</param>
        /// <param name="delete"> (optional)</param>
        /// <param name="action"> (optional)</param>
        /// <param name="location"> (optional)</param>
        /// <param name="propertylist"> (optional)</param>
        /// <param name="schedulerExpression"> (optional)</param>
        /// <param name="schedulerConcurrent"> (optional)</param>
        /// <returns>ComDayCqDamS7damCommonAnalyticsImplSiteCatalystReportRunnerInfo</returns>
        ComDayCqDamS7damCommonAnalyticsImplSiteCatalystReportRunnerInfo ComDayCqDamS7damCommonAnalyticsImplSiteCatalystReportRunner(NancyContext context, bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, string schedulerExpression, bool? schedulerConcurrent);

        /// <summary>
        /// 
        /// </summary>
        /// <param name="context">Context of request</param>
        /// <param name="post"> (optional)</param>
        /// <param name="apply"> (optional)</param>
        /// <param name="delete"> (optional)</param>
        /// <param name="action"> (optional)</param>
        /// <param name="location"> (optional)</param>
        /// <param name="propertylist"> (optional)</param>
        /// <param name="slingPostOperation"> (optional)</param>
        /// <param name="slingServletMethods"> (optional)</param>
        /// <returns>ComDayCqDamS7damCommonPostServletsSetCreateHandlerInfo</returns>
        ComDayCqDamS7damCommonPostServletsSetCreateHandlerInfo ComDayCqDamS7damCommonPostServletsSetCreateHandler(NancyContext context, bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, string slingPostOperation, string slingServletMethods);

        /// <summary>
        /// 
        /// </summary>
        /// <param name="context">Context of request</param>
        /// <param name="post"> (optional)</param>
        /// <param name="apply"> (optional)</param>
        /// <param name="delete"> (optional)</param>
        /// <param name="action"> (optional)</param>
        /// <param name="location"> (optional)</param>
        /// <param name="propertylist"> (optional)</param>
        /// <param name="slingPostOperation"> (optional)</param>
        /// <param name="slingServletMethods"> (optional)</param>
        /// <returns>ComDayCqDamS7damCommonPostServletsSetModifyHandlerInfo</returns>
        ComDayCqDamS7damCommonPostServletsSetModifyHandlerInfo ComDayCqDamS7damCommonPostServletsSetModifyHandler(NancyContext context, bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, string slingPostOperation, string slingServletMethods);

        /// <summary>
        /// 
        /// </summary>
        /// <param name="context">Context of request</param>
        /// <param name="post"> (optional)</param>
        /// <param name="apply"> (optional)</param>
        /// <param name="delete"> (optional)</param>
        /// <param name="action"> (optional)</param>
        /// <param name="location"> (optional)</param>
        /// <param name="propertylist"> (optional)</param>
        /// <param name="processLabel"> (optional)</param>
        /// <returns>ComDayCqDamS7damCommonProcessVideoThumbnailDownloadProcessInfo</returns>
        ComDayCqDamS7damCommonProcessVideoThumbnailDownloadProcessInfo ComDayCqDamS7damCommonProcessVideoThumbnailDownloadProcess(NancyContext context, bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, string processLabel);

        /// <summary>
        /// 
        /// </summary>
        /// <param name="context">Context of request</param>
        /// <param name="post"> (optional)</param>
        /// <param name="apply"> (optional)</param>
        /// <param name="delete"> (optional)</param>
        /// <param name="action"> (optional)</param>
        /// <param name="location"> (optional)</param>
        /// <param name="propertylist"> (optional)</param>
        /// <param name="cqDamS7damDamchangeeventlistenerEnabled"> (optional)</param>
        /// <returns>ComDayCqDamS7damCommonS7damDamChangeEventListenerInfo</returns>
        ComDayCqDamS7damCommonS7damDamChangeEventListenerInfo ComDayCqDamS7damCommonS7damDamChangeEventListener(NancyContext context, bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, bool? cqDamS7damDamchangeeventlistenerEnabled);

        /// <summary>
        /// 
        /// </summary>
        /// <param name="context">Context of request</param>
        /// <param name="post"> (optional)</param>
        /// <param name="apply"> (optional)</param>
        /// <param name="delete"> (optional)</param>
        /// <param name="action"> (optional)</param>
        /// <param name="location"> (optional)</param>
        /// <param name="propertylist"> (optional)</param>
        /// <param name="slingServletPaths"> (optional)</param>
        /// <param name="slingServletMethods"> (optional)</param>
        /// <returns>ComDayCqDamS7damCommonServletsS7damProductInfoServletInfo</returns>
        ComDayCqDamS7damCommonServletsS7damProductInfoServletInfo ComDayCqDamS7damCommonServletsS7damProductInfoServlet(NancyContext context, bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, string slingServletPaths, string slingServletMethods);

        /// <summary>
        /// 
        /// </summary>
        /// <param name="context">Context of request</param>
        /// <param name="post"> (optional)</param>
        /// <param name="apply"> (optional)</param>
        /// <param name="delete"> (optional)</param>
        /// <param name="action"> (optional)</param>
        /// <param name="location"> (optional)</param>
        /// <param name="propertylist"> (optional)</param>
        /// <param name="cqDamS7damVideoproxyclientserviceMultipartuploadMinsizeName"> (optional)</param>
        /// <param name="cqDamS7damVideoproxyclientserviceMultipartuploadPartsizeName"> (optional)</param>
        /// <param name="cqDamS7damVideoproxyclientserviceMultipartuploadNumthreadName"> (optional)</param>
        /// <param name="cqDamS7damVideoproxyclientserviceHttpReadtimeoutName"> (optional)</param>
        /// <param name="cqDamS7damVideoproxyclientserviceHttpConnectiontimeoutName"> (optional)</param>
        /// <param name="cqDamS7damVideoproxyclientserviceHttpMaxretrycountName"> (optional)</param>
        /// <param name="cqDamS7damVideoproxyclientserviceUploadprogressIntervalName"> (optional)</param>
        /// <returns>ComDayCqDamS7damCommonVideoImplVideoProxyClientServiceImplInfo</returns>
        ComDayCqDamS7damCommonVideoImplVideoProxyClientServiceImplInfo ComDayCqDamS7damCommonVideoImplVideoProxyClientServiceImpl(NancyContext context, bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, int? cqDamS7damVideoproxyclientserviceMultipartuploadMinsizeName, int? cqDamS7damVideoproxyclientserviceMultipartuploadPartsizeName, int? cqDamS7damVideoproxyclientserviceMultipartuploadNumthreadName, int? cqDamS7damVideoproxyclientserviceHttpReadtimeoutName, int? cqDamS7damVideoproxyclientserviceHttpConnectiontimeoutName, int? cqDamS7damVideoproxyclientserviceHttpMaxretrycountName, int? cqDamS7damVideoproxyclientserviceUploadprogressIntervalName);

        /// <summary>
        /// 
        /// </summary>
        /// <param name="context">Context of request</param>
        /// <param name="post"> (optional)</param>
        /// <param name="apply"> (optional)</param>
        /// <param name="delete"> (optional)</param>
        /// <param name="action"> (optional)</param>
        /// <param name="location"> (optional)</param>
        /// <param name="propertylist"> (optional)</param>
        /// <param name="cqDamScene7ApiclientRecordsperpageNofilterName"> (optional)</param>
        /// <param name="cqDamScene7ApiclientRecordsperpageWithfilterName"> (optional)</param>
        /// <returns>ComDayCqDamScene7ImplScene7APIClientImplInfo</returns>
        ComDayCqDamScene7ImplScene7APIClientImplInfo ComDayCqDamScene7ImplScene7APIClientImpl(NancyContext context, bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, int? cqDamScene7ApiclientRecordsperpageNofilterName, int? cqDamScene7ApiclientRecordsperpageWithfilterName);

        /// <summary>
        /// 
        /// </summary>
        /// <param name="context">Context of request</param>
        /// <param name="post"> (optional)</param>
        /// <param name="apply"> (optional)</param>
        /// <param name="delete"> (optional)</param>
        /// <param name="action"> (optional)</param>
        /// <param name="location"> (optional)</param>
        /// <param name="propertylist"> (optional)</param>
        /// <param name="cqDamScene7AssetmimetypeserviceMapping"> (optional)</param>
        /// <returns>ComDayCqDamScene7ImplScene7AssetMimeTypeServiceImplInfo</returns>
        ComDayCqDamScene7ImplScene7AssetMimeTypeServiceImplInfo ComDayCqDamScene7ImplScene7AssetMimeTypeServiceImpl(NancyContext context, bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, List<string> cqDamScene7AssetmimetypeserviceMapping);

        /// <summary>
        /// 
        /// </summary>
        /// <param name="context">Context of request</param>
        /// <param name="post"> (optional)</param>
        /// <param name="apply"> (optional)</param>
        /// <param name="delete"> (optional)</param>
        /// <param name="action"> (optional)</param>
        /// <param name="location"> (optional)</param>
        /// <param name="propertylist"> (optional)</param>
        /// <param name="cqDamScene7ConfigurationeventlistenerEnabled"> (optional)</param>
        /// <returns>ComDayCqDamScene7ImplScene7ConfigurationEventListenerInfo</returns>
        ComDayCqDamScene7ImplScene7ConfigurationEventListenerInfo ComDayCqDamScene7ImplScene7ConfigurationEventListener(NancyContext context, bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, bool? cqDamScene7ConfigurationeventlistenerEnabled);

        /// <summary>
        /// 
        /// </summary>
        /// <param name="context">Context of request</param>
        /// <param name="post"> (optional)</param>
        /// <param name="apply"> (optional)</param>
        /// <param name="delete"> (optional)</param>
        /// <param name="action"> (optional)</param>
        /// <param name="location"> (optional)</param>
        /// <param name="propertylist"> (optional)</param>
        /// <param name="cqDamScene7DamchangeeventlistenerEnabled"> (optional)</param>
        /// <param name="cqDamScene7DamchangeeventlistenerObservedPaths"> (optional)</param>
        /// <returns>ComDayCqDamScene7ImplScene7DamChangeEventListenerInfo</returns>
        ComDayCqDamScene7ImplScene7DamChangeEventListenerInfo ComDayCqDamScene7ImplScene7DamChangeEventListener(NancyContext context, bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, bool? cqDamScene7DamchangeeventlistenerEnabled, List<string> cqDamScene7DamchangeeventlistenerObservedPaths);

        /// <summary>
        /// 
        /// </summary>
        /// <param name="context">Context of request</param>
        /// <param name="post"> (optional)</param>
        /// <param name="apply"> (optional)</param>
        /// <param name="delete"> (optional)</param>
        /// <param name="action"> (optional)</param>
        /// <param name="location"> (optional)</param>
        /// <param name="propertylist"> (optional)</param>
        /// <param name="scene7FlashTemplatesRti"> (optional)</param>
        /// <param name="scene7FlashTemplatesRsi"> (optional)</param>
        /// <param name="scene7FlashTemplatesRb"> (optional)</param>
        /// <param name="scene7FlashTemplatesRurl"> (optional)</param>
        /// <param name="scene7FlashTemplateUrlFormatParameter"> (optional)</param>
        /// <returns>ComDayCqDamScene7ImplScene7FlashTemplatesServiceImplInfo</returns>
        ComDayCqDamScene7ImplScene7FlashTemplatesServiceImplInfo ComDayCqDamScene7ImplScene7FlashTemplatesServiceImpl(NancyContext context, bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, string scene7FlashTemplatesRti, string scene7FlashTemplatesRsi, string scene7FlashTemplatesRb, string scene7FlashTemplatesRurl, string scene7FlashTemplateUrlFormatParameter);

        /// <summary>
        /// 
        /// </summary>
        /// <param name="context">Context of request</param>
        /// <param name="post"> (optional)</param>
        /// <param name="apply"> (optional)</param>
        /// <param name="delete"> (optional)</param>
        /// <param name="action"> (optional)</param>
        /// <param name="location"> (optional)</param>
        /// <param name="propertylist"> (optional)</param>
        /// <param name="cqDamScene7UploadserviceActivejobtimeoutLabel"> (optional)</param>
        /// <param name="cqDamScene7UploadserviceConnectionmaxperrouteLabel"> (optional)</param>
        /// <returns>ComDayCqDamScene7ImplScene7UploadServiceImplInfo</returns>
        ComDayCqDamScene7ImplScene7UploadServiceImplInfo ComDayCqDamScene7ImplScene7UploadServiceImpl(NancyContext context, bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, int? cqDamScene7UploadserviceActivejobtimeoutLabel, int? cqDamScene7UploadserviceConnectionmaxperrouteLabel);

        /// <summary>
        /// 
        /// </summary>
        /// <param name="context">Context of request</param>
        /// <param name="post"> (optional)</param>
        /// <param name="apply"> (optional)</param>
        /// <param name="delete"> (optional)</param>
        /// <param name="action"> (optional)</param>
        /// <param name="location"> (optional)</param>
        /// <param name="propertylist"> (optional)</param>
        /// <param name="getCacheExpirationUnit"> (optional)</param>
        /// <param name="getCacheExpirationValue"> (optional)</param>
        /// <returns>ComDayCqDamStockIntegrationImplCacheStockCacheConfigurationSerInfo</returns>
        ComDayCqDamStockIntegrationImplCacheStockCacheConfigurationSerInfo ComDayCqDamStockIntegrationImplCacheStockCacheConfigurationSer(NancyContext context, bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, string getCacheExpirationUnit, int? getCacheExpirationValue);

        /// <summary>
        /// 
        /// </summary>
        /// <param name="context">Context of request</param>
        /// <param name="post"> (optional)</param>
        /// <param name="apply"> (optional)</param>
        /// <param name="delete"> (optional)</param>
        /// <param name="action"> (optional)</param>
        /// <param name="location"> (optional)</param>
        /// <param name="propertylist"> (optional)</param>
        /// <param name="name"> (optional)</param>
        /// <param name="locale"> (optional)</param>
        /// <param name="imsConfig"> (optional)</param>
        /// <returns>ComDayCqDamStockIntegrationImplConfigurationStockConfigurationInfo</returns>
        ComDayCqDamStockIntegrationImplConfigurationStockConfigurationInfo ComDayCqDamStockIntegrationImplConfigurationStockConfiguration(NancyContext context, bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, string name, string locale, string imsConfig);

        /// <summary>
        /// 
        /// </summary>
        /// <param name="context">Context of request</param>
        /// <param name="post"> (optional)</param>
        /// <param name="apply"> (optional)</param>
        /// <param name="delete"> (optional)</param>
        /// <param name="action"> (optional)</param>
        /// <param name="location"> (optional)</param>
        /// <param name="propertylist"> (optional)</param>
        /// <param name="enabled"> (optional)</param>
        /// <returns>ComDayCqDamVideoImplServletVideoTestServletInfo</returns>
        ComDayCqDamVideoImplServletVideoTestServletInfo ComDayCqDamVideoImplServletVideoTestServlet(NancyContext context, bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, bool? enabled);

        /// <summary>
        /// 
        /// </summary>
        /// <param name="context">Context of request</param>
        /// <param name="post"> (optional)</param>
        /// <param name="apply"> (optional)</param>
        /// <param name="delete"> (optional)</param>
        /// <param name="action"> (optional)</param>
        /// <param name="location"> (optional)</param>
        /// <param name="propertylist"> (optional)</param>
        /// <param name="maxWidth"> (optional)</param>
        /// <param name="maxHeight"> (optional)</param>
        /// <returns>ComDayCqExtwidgetServletsImageSpriteServletInfo</returns>
        ComDayCqExtwidgetServletsImageSpriteServletInfo ComDayCqExtwidgetServletsImageSpriteServlet(NancyContext context, bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, int? maxWidth, int? maxHeight);

        /// <summary>
        /// 
        /// </summary>
        /// <param name="context">Context of request</param>
        /// <param name="post"> (optional)</param>
        /// <param name="apply"> (optional)</param>
        /// <param name="delete"> (optional)</param>
        /// <param name="action"> (optional)</param>
        /// <param name="location"> (optional)</param>
        /// <param name="propertylist"> (optional)</param>
        /// <param name="fontpath"> (optional)</param>
        /// <param name="oversamplingFactor"> (optional)</param>
        /// <returns>ComDayCqImageInternalFontFontHelperInfo</returns>
        ComDayCqImageInternalFontFontHelperInfo ComDayCqImageInternalFontFontHelper(NancyContext context, bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, List<string> fontpath, int? oversamplingFactor);

        /// <summary>
        /// 
        /// </summary>
        /// <param name="context">Context of request</param>
        /// <param name="post"> (optional)</param>
        /// <param name="apply"> (optional)</param>
        /// <param name="delete"> (optional)</param>
        /// <param name="action"> (optional)</param>
        /// <param name="location"> (optional)</param>
        /// <param name="propertylist"> (optional)</param>
        /// <param name="clusterLevelEnable"> (optional)</param>
        /// <param name="clusterMasterLevel"> (optional)</param>
        /// <param name="clusterSlaveLevel"> (optional)</param>
        /// <returns>ComDayCqJcrclustersupportClusterStartLevelControllerInfo</returns>
        ComDayCqJcrclustersupportClusterStartLevelControllerInfo ComDayCqJcrclustersupportClusterStartLevelController(NancyContext context, bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, bool? clusterLevelEnable, int? clusterMasterLevel, int? clusterSlaveLevel);

        /// <summary>
        /// 
        /// </summary>
        /// <param name="context">Context of request</param>
        /// <param name="post"> (optional)</param>
        /// <param name="apply"> (optional)</param>
        /// <param name="delete"> (optional)</param>
        /// <param name="action"> (optional)</param>
        /// <param name="location"> (optional)</param>
        /// <param name="propertylist"> (optional)</param>
        /// <param name="smtpHost"> (optional)</param>
        /// <param name="smtpPort"> (optional)</param>
        /// <param name="smtpUser"> (optional)</param>
        /// <param name="smtpPassword"> (optional)</param>
        /// <param name="fromAddress"> (optional)</param>
        /// <param name="smtpSsl"> (optional)</param>
        /// <param name="smtpStarttls"> (optional)</param>
        /// <param name="debugEmail"> (optional)</param>
        /// <returns>ComDayCqMailerDefaultMailServiceInfo</returns>
        ComDayCqMailerDefaultMailServiceInfo ComDayCqMailerDefaultMailService(NancyContext context, bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, string smtpHost, int? smtpPort, string smtpUser, string smtpPassword, string fromAddress, bool? smtpSsl, bool? smtpStarttls, bool? debugEmail);

        /// <summary>
        /// 
        /// </summary>
        /// <param name="context">Context of request</param>
        /// <param name="post"> (optional)</param>
        /// <param name="apply"> (optional)</param>
        /// <param name="delete"> (optional)</param>
        /// <param name="action"> (optional)</param>
        /// <param name="location"> (optional)</param>
        /// <param name="propertylist"> (optional)</param>
        /// <param name="maxRecipientCount"> (optional)</param>
        /// <returns>ComDayCqMailerImplCqMailingServiceInfo</returns>
        ComDayCqMailerImplCqMailingServiceInfo ComDayCqMailerImplCqMailingService(NancyContext context, bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, string maxRecipientCount);

        /// <summary>
        /// 
        /// </summary>
        /// <param name="context">Context of request</param>
        /// <param name="post"> (optional)</param>
        /// <param name="apply"> (optional)</param>
        /// <param name="delete"> (optional)</param>
        /// <param name="action"> (optional)</param>
        /// <param name="location"> (optional)</param>
        /// <param name="propertylist"> (optional)</param>
        /// <param name="mailerEmailCharset"> (optional)</param>
        /// <returns>ComDayCqMailerImplEmailCqEmailTemplateFactoryInfo</returns>
        ComDayCqMailerImplEmailCqEmailTemplateFactoryInfo ComDayCqMailerImplEmailCqEmailTemplateFactory(NancyContext context, bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, string mailerEmailCharset);

        /// <summary>
        /// 
        /// </summary>
        /// <param name="context">Context of request</param>
        /// <param name="post"> (optional)</param>
        /// <param name="apply"> (optional)</param>
        /// <param name="delete"> (optional)</param>
        /// <param name="action"> (optional)</param>
        /// <param name="location"> (optional)</param>
        /// <param name="propertylist"> (optional)</param>
        /// <param name="mailerEmailEmbed"> (optional)</param>
        /// <param name="mailerEmailCharset"> (optional)</param>
        /// <param name="mailerEmailRetrieverUserID"> (optional)</param>
        /// <param name="mailerEmailRetrieverUserPWD"> (optional)</param>
        /// <returns>ComDayCqMailerImplEmailCqRetrieverTemplateFactoryInfo</returns>
        ComDayCqMailerImplEmailCqRetrieverTemplateFactoryInfo ComDayCqMailerImplEmailCqRetrieverTemplateFactory(NancyContext context, bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, bool? mailerEmailEmbed, string mailerEmailCharset, string mailerEmailRetrieverUserID, string mailerEmailRetrieverUserPWD);

        /// <summary>
        /// 
        /// </summary>
        /// <param name="context">Context of request</param>
        /// <param name="post"> (optional)</param>
        /// <param name="apply"> (optional)</param>
        /// <param name="delete"> (optional)</param>
        /// <param name="action"> (optional)</param>
        /// <param name="location"> (optional)</param>
        /// <param name="propertylist"> (optional)</param>
        /// <param name="aemMcmCampaignFormConstraints"> (optional)</param>
        /// <param name="aemMcmCampaignPublicUrl"> (optional)</param>
        /// <param name="aemMcmCampaignRelaxedSSL"> (optional)</param>
        /// <returns>ComDayCqMcmCampaignImplIntegrationConfigImplInfo</returns>
        ComDayCqMcmCampaignImplIntegrationConfigImplInfo ComDayCqMcmCampaignImplIntegrationConfigImpl(NancyContext context, bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, List<string> aemMcmCampaignFormConstraints, string aemMcmCampaignPublicUrl, bool? aemMcmCampaignRelaxedSSL);

        /// <summary>
        /// 
        /// </summary>
        /// <param name="context">Context of request</param>
        /// <param name="post"> (optional)</param>
        /// <param name="apply"> (optional)</param>
        /// <param name="delete"> (optional)</param>
        /// <param name="action"> (optional)</param>
        /// <param name="location"> (optional)</param>
        /// <param name="propertylist"> (optional)</param>
        /// <param name="serviceRanking"> (optional)</param>
        /// <param name="tagpattern"> (optional)</param>
        /// <returns>ComDayCqMcmCampaignImporterPersonalizedTextHandlerFactoryInfo</returns>
        ComDayCqMcmCampaignImporterPersonalizedTextHandlerFactoryInfo ComDayCqMcmCampaignImporterPersonalizedTextHandlerFactory(NancyContext context, bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, int? serviceRanking, string tagpattern);

        /// <summary>
        /// 
        /// </summary>
        /// <param name="context">Context of request</param>
        /// <param name="post"> (optional)</param>
        /// <param name="apply"> (optional)</param>
        /// <param name="delete"> (optional)</param>
        /// <param name="action"> (optional)</param>
        /// <param name="location"> (optional)</param>
        /// <param name="propertylist"> (optional)</param>
        /// <param name="fromAddress"> (optional)</param>
        /// <param name="senderHost"> (optional)</param>
        /// <param name="maxBounceCount"> (optional)</param>
        /// <returns>ComDayCqMcmCoreNewsletterNewsletterEmailServiceImplInfo</returns>
        ComDayCqMcmCoreNewsletterNewsletterEmailServiceImplInfo ComDayCqMcmCoreNewsletterNewsletterEmailServiceImpl(NancyContext context, bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, string fromAddress, string senderHost, string maxBounceCount);

        /// <summary>
        /// 
        /// </summary>
        /// <param name="context">Context of request</param>
        /// <param name="post"> (optional)</param>
        /// <param name="apply"> (optional)</param>
        /// <param name="delete"> (optional)</param>
        /// <param name="action"> (optional)</param>
        /// <param name="location"> (optional)</param>
        /// <param name="propertylist"> (optional)</param>
        /// <param name="experienceIndirection"> (optional)</param>
        /// <param name="touchpointIndirection"> (optional)</param>
        /// <returns>ComDayCqMcmImplMCMConfigurationInfo</returns>
        ComDayCqMcmImplMCMConfigurationInfo ComDayCqMcmImplMCMConfiguration(NancyContext context, bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, List<string> experienceIndirection, List<string> touchpointIndirection);

        /// <summary>
        /// 
        /// </summary>
        /// <param name="context">Context of request</param>
        /// <param name="post"> (optional)</param>
        /// <param name="apply"> (optional)</param>
        /// <param name="delete"> (optional)</param>
        /// <param name="action"> (optional)</param>
        /// <param name="location"> (optional)</param>
        /// <param name="propertylist"> (optional)</param>
        /// <param name="serviceRanking"> (optional)</param>
        /// <param name="tagpattern"> (optional)</param>
        /// <param name="componentResourceType"> (optional)</param>
        /// <returns>ComDayCqMcmLandingpageParserTaghandlersCtaClickThroughComponenInfo</returns>
        ComDayCqMcmLandingpageParserTaghandlersCtaClickThroughComponenInfo ComDayCqMcmLandingpageParserTaghandlersCtaClickThroughComponen(NancyContext context, bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, int? serviceRanking, string tagpattern, string componentResourceType);

        /// <summary>
        /// 
        /// </summary>
        /// <param name="context">Context of request</param>
        /// <param name="post"> (optional)</param>
        /// <param name="apply"> (optional)</param>
        /// <param name="delete"> (optional)</param>
        /// <param name="action"> (optional)</param>
        /// <param name="location"> (optional)</param>
        /// <param name="propertylist"> (optional)</param>
        /// <param name="serviceRanking"> (optional)</param>
        /// <param name="tagpattern"> (optional)</param>
        /// <param name="componentResourceType"> (optional)</param>
        /// <returns>ComDayCqMcmLandingpageParserTaghandlersCtaGraphicalClickThrougInfo</returns>
        ComDayCqMcmLandingpageParserTaghandlersCtaGraphicalClickThrougInfo ComDayCqMcmLandingpageParserTaghandlersCtaGraphicalClickThroug(NancyContext context, bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, int? serviceRanking, string tagpattern, string componentResourceType);

        /// <summary>
        /// 
        /// </summary>
        /// <param name="context">Context of request</param>
        /// <param name="post"> (optional)</param>
        /// <param name="apply"> (optional)</param>
        /// <param name="delete"> (optional)</param>
        /// <param name="action"> (optional)</param>
        /// <param name="location"> (optional)</param>
        /// <param name="propertylist"> (optional)</param>
        /// <param name="serviceRanking"> (optional)</param>
        /// <param name="tagpattern"> (optional)</param>
        /// <returns>ComDayCqMcmLandingpageParserTaghandlersCtaLeadFormCTAComponentInfo</returns>
        ComDayCqMcmLandingpageParserTaghandlersCtaLeadFormCTAComponentInfo ComDayCqMcmLandingpageParserTaghandlersCtaLeadFormCTAComponent(NancyContext context, bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, int? serviceRanking, string tagpattern);

        /// <summary>
        /// 
        /// </summary>
        /// <param name="context">Context of request</param>
        /// <param name="post"> (optional)</param>
        /// <param name="apply"> (optional)</param>
        /// <param name="delete"> (optional)</param>
        /// <param name="action"> (optional)</param>
        /// <param name="location"> (optional)</param>
        /// <param name="propertylist"> (optional)</param>
        /// <param name="serviceRanking"> (optional)</param>
        /// <param name="tagpattern"> (optional)</param>
        /// <returns>ComDayCqMcmLandingpageParserTaghandlersMboxMBoxExperienceTagHaInfo</returns>
        ComDayCqMcmLandingpageParserTaghandlersMboxMBoxExperienceTagHaInfo ComDayCqMcmLandingpageParserTaghandlersMboxMBoxExperienceTagHa(NancyContext context, bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, int? serviceRanking, string tagpattern);

        /// <summary>
        /// 
        /// </summary>
        /// <param name="context">Context of request</param>
        /// <param name="post"> (optional)</param>
        /// <param name="apply"> (optional)</param>
        /// <param name="delete"> (optional)</param>
        /// <param name="action"> (optional)</param>
        /// <param name="location"> (optional)</param>
        /// <param name="propertylist"> (optional)</param>
        /// <param name="serviceRanking"> (optional)</param>
        /// <param name="tagpattern"> (optional)</param>
        /// <param name="componentResourceType"> (optional)</param>
        /// <returns>ComDayCqMcmLandingpageParserTaghandlersMboxTargetComponentTagHInfo</returns>
        ComDayCqMcmLandingpageParserTaghandlersMboxTargetComponentTagHInfo ComDayCqMcmLandingpageParserTaghandlersMboxTargetComponentTagH(NancyContext context, bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, int? serviceRanking, string tagpattern, string componentResourceType);

        /// <summary>
        /// 
        /// </summary>
        /// <param name="context">Context of request</param>
        /// <param name="post"> (optional)</param>
        /// <param name="apply"> (optional)</param>
        /// <param name="delete"> (optional)</param>
        /// <param name="action"> (optional)</param>
        /// <param name="location"> (optional)</param>
        /// <param name="propertylist"> (optional)</param>
        /// <param name="eventFilter"> (optional)</param>
        /// <returns>ComDayCqNotificationImplNotificationServiceImplInfo</returns>
        ComDayCqNotificationImplNotificationServiceImplInfo ComDayCqNotificationImplNotificationServiceImpl(NancyContext context, bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, string eventFilter);

        /// <summary>
        /// 
        /// </summary>
        /// <param name="context">Context of request</param>
        /// <param name="post"> (optional)</param>
        /// <param name="apply"> (optional)</param>
        /// <param name="delete"> (optional)</param>
        /// <param name="action"> (optional)</param>
        /// <param name="location"> (optional)</param>
        /// <param name="propertylist"> (optional)</param>
        /// <param name="forcelocation"> (optional)</param>
        /// <returns>ComDayCqPersonalizationImplServletsTargetingConfigurationServletInfo</returns>
        ComDayCqPersonalizationImplServletsTargetingConfigurationServletInfo ComDayCqPersonalizationImplServletsTargetingConfigurationServlet(NancyContext context, bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, bool? forcelocation);

        /// <summary>
        /// 
        /// </summary>
        /// <param name="context">Context of request</param>
        /// <param name="post"> (optional)</param>
        /// <param name="apply"> (optional)</param>
        /// <param name="delete"> (optional)</param>
        /// <param name="action"> (optional)</param>
        /// <param name="location"> (optional)</param>
        /// <param name="propertylist"> (optional)</param>
        /// <param name="id"> (optional)</param>
        /// <param name="enabled"> (optional)</param>
        /// <param name="reference"> (optional)</param>
        /// <param name="interval"> (optional)</param>
        /// <param name="expression"> (optional)</param>
        /// <param name="source"> (optional)</param>
        /// <param name="target"> (optional)</param>
        /// <param name="login"> (optional)</param>
        /// <param name="password"> (optional)</param>
        /// <returns>ComDayCqPollingImporterImplManagedPollConfigImplInfo</returns>
        ComDayCqPollingImporterImplManagedPollConfigImplInfo ComDayCqPollingImporterImplManagedPollConfigImpl(NancyContext context, bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, string id, bool? enabled, bool? reference, int? interval, string expression, string source, string target, string login, string password);

        /// <summary>
        /// 
        /// </summary>
        /// <param name="context">Context of request</param>
        /// <param name="post"> (optional)</param>
        /// <param name="apply"> (optional)</param>
        /// <param name="delete"> (optional)</param>
        /// <param name="action"> (optional)</param>
        /// <param name="location"> (optional)</param>
        /// <param name="propertylist"> (optional)</param>
        /// <param name="importerUser"> (optional)</param>
        /// <returns>ComDayCqPollingImporterImplManagedPollingImporterImplInfo</returns>
        ComDayCqPollingImporterImplManagedPollingImporterImplInfo ComDayCqPollingImporterImplManagedPollingImporterImpl(NancyContext context, bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, string importerUser);

        /// <summary>
        /// 
        /// </summary>
        /// <param name="context">Context of request</param>
        /// <param name="post"> (optional)</param>
        /// <param name="apply"> (optional)</param>
        /// <param name="delete"> (optional)</param>
        /// <param name="action"> (optional)</param>
        /// <param name="location"> (optional)</param>
        /// <param name="propertylist"> (optional)</param>
        /// <param name="importerMinInterval"> (optional)</param>
        /// <param name="importerUser"> (optional)</param>
        /// <param name="excludePaths"> (optional)</param>
        /// <param name="includePaths"> (optional)</param>
        /// <returns>ComDayCqPollingImporterImplPollingImporterImplInfo</returns>
        ComDayCqPollingImporterImplPollingImporterImplInfo ComDayCqPollingImporterImplPollingImporterImpl(NancyContext context, bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, int? importerMinInterval, string importerUser, List<string> excludePaths, List<string> includePaths);

        /// <summary>
        /// 
        /// </summary>
        /// <param name="context">Context of request</param>
        /// <param name="post"> (optional)</param>
        /// <param name="apply"> (optional)</param>
        /// <param name="delete"> (optional)</param>
        /// <param name="action"> (optional)</param>
        /// <param name="location"> (optional)</param>
        /// <param name="propertylist"> (optional)</param>
        /// <param name="serviceRanking"> (optional)</param>
        /// <returns>ComDayCqReplicationAuditReplicationEventListenerInfo</returns>
        ComDayCqReplicationAuditReplicationEventListenerInfo ComDayCqReplicationAuditReplicationEventListener(NancyContext context, bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, int? serviceRanking);

        /// <summary>
        /// 
        /// </summary>
        /// <param name="context">Context of request</param>
        /// <param name="post"> (optional)</param>
        /// <param name="apply"> (optional)</param>
        /// <param name="delete"> (optional)</param>
        /// <param name="action"> (optional)</param>
        /// <param name="location"> (optional)</param>
        /// <param name="propertylist"> (optional)</param>
        /// <param name="host"> (optional)</param>
        /// <param name="port"> (optional)</param>
        /// <returns>ComDayCqReplicationContentStaticContentBuilderInfo</returns>
        ComDayCqReplicationContentStaticContentBuilderInfo ComDayCqReplicationContentStaticContentBuilder(NancyContext context, bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, string host, int? port);

        /// <summary>
        /// 
        /// </summary>
        /// <param name="context">Context of request</param>
        /// <param name="post"> (optional)</param>
        /// <param name="apply"> (optional)</param>
        /// <param name="delete"> (optional)</param>
        /// <param name="action"> (optional)</param>
        /// <param name="location"> (optional)</param>
        /// <param name="propertylist"> (optional)</param>
        /// <param name="jobTopics"> (optional)</param>
        /// <param name="serviceUserTarget"> (optional)</param>
        /// <param name="agentProviderTarget"> (optional)</param>
        /// <returns>ComDayCqReplicationImplAgentManagerImplInfo</returns>
        ComDayCqReplicationImplAgentManagerImplInfo ComDayCqReplicationImplAgentManagerImpl(NancyContext context, bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, string jobTopics, string serviceUserTarget, string agentProviderTarget);

        /// <summary>
        /// 
        /// </summary>
        /// <param name="context">Context of request</param>
        /// <param name="post"> (optional)</param>
        /// <param name="apply"> (optional)</param>
        /// <param name="delete"> (optional)</param>
        /// <param name="action"> (optional)</param>
        /// <param name="location"> (optional)</param>
        /// <param name="propertylist"> (optional)</param>
        /// <param name="binaryThreshold"> (optional)</param>
        /// <returns>ComDayCqReplicationImplContentDurboBinaryLessContentBuilderInfo</returns>
        ComDayCqReplicationImplContentDurboBinaryLessContentBuilderInfo ComDayCqReplicationImplContentDurboBinaryLessContentBuilder(NancyContext context, bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, int? binaryThreshold);

        /// <summary>
        /// 
        /// </summary>
        /// <param name="context">Context of request</param>
        /// <param name="post"> (optional)</param>
        /// <param name="apply"> (optional)</param>
        /// <param name="delete"> (optional)</param>
        /// <param name="action"> (optional)</param>
        /// <param name="location"> (optional)</param>
        /// <param name="propertylist"> (optional)</param>
        /// <param name="preserveHierarchyNodes"> (optional)</param>
        /// <param name="ignoreVersioning"> (optional)</param>
        /// <param name="importAcl"> (optional)</param>
        /// <param name="saveThreshold"> (optional)</param>
        /// <param name="preserveUserPaths"> (optional)</param>
        /// <param name="preserveUuid"> (optional)</param>
        /// <param name="preserveUuidNodetypes"> (optional)</param>
        /// <param name="preserveUuidSubtrees"> (optional)</param>
        /// <param name="autoCommit"> (optional)</param>
        /// <returns>ComDayCqReplicationImplContentDurboDurboImportConfigurationProvInfo</returns>
        ComDayCqReplicationImplContentDurboDurboImportConfigurationProvInfo ComDayCqReplicationImplContentDurboDurboImportConfigurationProv(NancyContext context, bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, bool? preserveHierarchyNodes, bool? ignoreVersioning, bool? importAcl, int? saveThreshold, bool? preserveUserPaths, bool? preserveUuid, List<string> preserveUuidNodetypes, List<string> preserveUuidSubtrees, bool? autoCommit);

        /// <summary>
        /// 
        /// </summary>
        /// <param name="context">Context of request</param>
        /// <param name="post"> (optional)</param>
        /// <param name="apply"> (optional)</param>
        /// <param name="delete"> (optional)</param>
        /// <param name="action"> (optional)</param>
        /// <param name="location"> (optional)</param>
        /// <param name="propertylist"> (optional)</param>
        /// <param name="replicationContentUseFileStorage"> (optional)</param>
        /// <param name="replicationContentMaxCommitAttempts"> (optional)</param>
        /// <returns>ComDayCqReplicationImplReplicationContentFactoryProviderImplInfo</returns>
        ComDayCqReplicationImplReplicationContentFactoryProviderImplInfo ComDayCqReplicationImplReplicationContentFactoryProviderImpl(NancyContext context, bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, bool? replicationContentUseFileStorage, int? replicationContentMaxCommitAttempts);

        /// <summary>
        /// 
        /// </summary>
        /// <param name="context">Context of request</param>
        /// <param name="post"> (optional)</param>
        /// <param name="apply"> (optional)</param>
        /// <param name="delete"> (optional)</param>
        /// <param name="action"> (optional)</param>
        /// <param name="location"> (optional)</param>
        /// <param name="propertylist"> (optional)</param>
        /// <param name="receiverTmpfileThreshold"> (optional)</param>
        /// <param name="receiverPackagesUseInstall"> (optional)</param>
        /// <returns>ComDayCqReplicationImplReplicationReceiverImplInfo</returns>
        ComDayCqReplicationImplReplicationReceiverImplInfo ComDayCqReplicationImplReplicationReceiverImpl(NancyContext context, bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, int? receiverTmpfileThreshold, bool? receiverPackagesUseInstall);

        /// <summary>
        /// 
        /// </summary>
        /// <param name="context">Context of request</param>
        /// <param name="post"> (optional)</param>
        /// <param name="apply"> (optional)</param>
        /// <param name="delete"> (optional)</param>
        /// <param name="action"> (optional)</param>
        /// <param name="location"> (optional)</param>
        /// <param name="propertylist"> (optional)</param>
        /// <param name="distributeEvents"> (optional)</param>
        /// <returns>ComDayCqReplicationImplReplicatorImplInfo</returns>
        ComDayCqReplicationImplReplicatorImplInfo ComDayCqReplicationImplReplicatorImpl(NancyContext context, bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, bool? distributeEvents);

        /// <summary>
        /// 
        /// </summary>
        /// <param name="context">Context of request</param>
        /// <param name="post"> (optional)</param>
        /// <param name="apply"> (optional)</param>
        /// <param name="delete"> (optional)</param>
        /// <param name="action"> (optional)</param>
        /// <param name="location"> (optional)</param>
        /// <param name="propertylist"> (optional)</param>
        /// <param name="schedulerPeriod"> (optional)</param>
        /// <returns>ComDayCqReplicationImplReverseReplicatorInfo</returns>
        ComDayCqReplicationImplReverseReplicatorInfo ComDayCqReplicationImplReverseReplicator(NancyContext context, bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, int? schedulerPeriod);

        /// <summary>
        /// 
        /// </summary>
        /// <param name="context">Context of request</param>
        /// <param name="post"> (optional)</param>
        /// <param name="apply"> (optional)</param>
        /// <param name="delete"> (optional)</param>
        /// <param name="action"> (optional)</param>
        /// <param name="location"> (optional)</param>
        /// <param name="propertylist"> (optional)</param>
        /// <param name="disabledCipherSuites"> (optional)</param>
        /// <param name="enabledCipherSuites"> (optional)</param>
        /// <returns>ComDayCqReplicationImplTransportBinaryLessTransportHandlerInfo</returns>
        ComDayCqReplicationImplTransportBinaryLessTransportHandlerInfo ComDayCqReplicationImplTransportBinaryLessTransportHandler(NancyContext context, bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, List<string> disabledCipherSuites, List<string> enabledCipherSuites);

        /// <summary>
        /// 
        /// </summary>
        /// <param name="context">Context of request</param>
        /// <param name="post"> (optional)</param>
        /// <param name="apply"> (optional)</param>
        /// <param name="delete"> (optional)</param>
        /// <param name="action"> (optional)</param>
        /// <param name="location"> (optional)</param>
        /// <param name="propertylist"> (optional)</param>
        /// <param name="disabledCipherSuites"> (optional)</param>
        /// <param name="enabledCipherSuites"> (optional)</param>
        /// <returns>ComDayCqReplicationImplTransportHttpInfo</returns>
        ComDayCqReplicationImplTransportHttpInfo ComDayCqReplicationImplTransportHttp(NancyContext context, bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, List<string> disabledCipherSuites, List<string> enabledCipherSuites);

        /// <summary>
        /// 
        /// </summary>
        /// <param name="context">Context of request</param>
        /// <param name="post"> (optional)</param>
        /// <param name="apply"> (optional)</param>
        /// <param name="delete"> (optional)</param>
        /// <param name="action"> (optional)</param>
        /// <param name="location"> (optional)</param>
        /// <param name="propertylist"> (optional)</param>
        /// <param name="repcacheEnable"> (optional)</param>
        /// <param name="repcacheTtl"> (optional)</param>
        /// <param name="repcacheMax"> (optional)</param>
        /// <returns>ComDayCqReportingImplCacheCacheImplInfo</returns>
        ComDayCqReportingImplCacheCacheImplInfo ComDayCqReportingImplCacheCacheImpl(NancyContext context, bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, bool? repcacheEnable, int? repcacheTtl, int? repcacheMax);

        /// <summary>
        /// 
        /// </summary>
        /// <param name="context">Context of request</param>
        /// <param name="post"> (optional)</param>
        /// <param name="apply"> (optional)</param>
        /// <param name="delete"> (optional)</param>
        /// <param name="action"> (optional)</param>
        /// <param name="location"> (optional)</param>
        /// <param name="propertylist"> (optional)</param>
        /// <param name="repconfTimezone"> (optional)</param>
        /// <param name="repconfLocale"> (optional)</param>
        /// <param name="repconfSnapshots"> (optional)</param>
        /// <param name="repconfRepdir"> (optional)</param>
        /// <param name="repconfHourofday"> (optional)</param>
        /// <param name="repconfMinofhour"> (optional)</param>
        /// <param name="repconfMaxrows"> (optional)</param>
        /// <param name="repconfFakedata"> (optional)</param>
        /// <param name="repconfSnapshotuser"> (optional)</param>
        /// <param name="repconfEnforcesnapshotuser"> (optional)</param>
        /// <returns>ComDayCqReportingImplConfigServiceImplInfo</returns>
        ComDayCqReportingImplConfigServiceImplInfo ComDayCqReportingImplConfigServiceImpl(NancyContext context, bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, string repconfTimezone, string repconfLocale, string repconfSnapshots, string repconfRepdir, int? repconfHourofday, int? repconfMinofhour, int? repconfMaxrows, bool? repconfFakedata, string repconfSnapshotuser, bool? repconfEnforcesnapshotuser);

        /// <summary>
        /// 
        /// </summary>
        /// <param name="context">Context of request</param>
        /// <param name="post"> (optional)</param>
        /// <param name="apply"> (optional)</param>
        /// <param name="delete"> (optional)</param>
        /// <param name="action"> (optional)</param>
        /// <param name="location"> (optional)</param>
        /// <param name="propertylist"> (optional)</param>
        /// <param name="requestLogOutput"> (optional)</param>
        /// <returns>ComDayCqReportingImplRLogAnalyzerInfo</returns>
        ComDayCqReportingImplRLogAnalyzerInfo ComDayCqReportingImplRLogAnalyzer(NancyContext context, bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, string requestLogOutput);

        /// <summary>
        /// 
        /// </summary>
        /// <param name="context">Context of request</param>
        /// <param name="post"> (optional)</param>
        /// <param name="apply"> (optional)</param>
        /// <param name="delete"> (optional)</param>
        /// <param name="action"> (optional)</param>
        /// <param name="location"> (optional)</param>
        /// <param name="propertylist"> (optional)</param>
        /// <param name="schedulerPeriod"> (optional)</param>
        /// <param name="schedulerConcurrent"> (optional)</param>
        /// <param name="serviceBadLinkToleranceInterval"> (optional)</param>
        /// <param name="serviceCheckOverridePatterns"> (optional)</param>
        /// <param name="serviceCacheBrokenInternalLinks"> (optional)</param>
        /// <param name="serviceSpecialLinkPrefix"> (optional)</param>
        /// <param name="serviceSpecialLinkPatterns"> (optional)</param>
        /// <returns>ComDayCqRewriterLinkcheckerImplLinkCheckerImplInfo</returns>
        ComDayCqRewriterLinkcheckerImplLinkCheckerImplInfo ComDayCqRewriterLinkcheckerImplLinkCheckerImpl(NancyContext context, bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, int? schedulerPeriod, bool? schedulerConcurrent, int? serviceBadLinkToleranceInterval, List<string> serviceCheckOverridePatterns, bool? serviceCacheBrokenInternalLinks, List<string> serviceSpecialLinkPrefix, List<string> serviceSpecialLinkPatterns);

        /// <summary>
        /// 
        /// </summary>
        /// <param name="context">Context of request</param>
        /// <param name="post"> (optional)</param>
        /// <param name="apply"> (optional)</param>
        /// <param name="delete"> (optional)</param>
        /// <param name="action"> (optional)</param>
        /// <param name="location"> (optional)</param>
        /// <param name="propertylist"> (optional)</param>
        /// <param name="schedulerPeriod"> (optional)</param>
        /// <param name="schedulerConcurrent"> (optional)</param>
        /// <param name="goodLinkTestInterval"> (optional)</param>
        /// <param name="badLinkTestInterval"> (optional)</param>
        /// <param name="linkUnusedInterval"> (optional)</param>
        /// <param name="connectionTimeout"> (optional)</param>
        /// <returns>ComDayCqRewriterLinkcheckerImplLinkCheckerTaskInfo</returns>
        ComDayCqRewriterLinkcheckerImplLinkCheckerTaskInfo ComDayCqRewriterLinkcheckerImplLinkCheckerTask(NancyContext context, bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, int? schedulerPeriod, bool? schedulerConcurrent, int? goodLinkTestInterval, int? badLinkTestInterval, int? linkUnusedInterval, int? connectionTimeout);

        /// <summary>
        /// 
        /// </summary>
        /// <param name="context">Context of request</param>
        /// <param name="post"> (optional)</param>
        /// <param name="apply"> (optional)</param>
        /// <param name="delete"> (optional)</param>
        /// <param name="action"> (optional)</param>
        /// <param name="location"> (optional)</param>
        /// <param name="propertylist"> (optional)</param>
        /// <param name="linkcheckertransformerDisableRewriting"> (optional)</param>
        /// <param name="linkcheckertransformerDisableChecking"> (optional)</param>
        /// <param name="linkcheckertransformerMapCacheSize"> (optional)</param>
        /// <param name="linkcheckertransformerStrictExtensionCheck"> (optional)</param>
        /// <param name="linkcheckertransformerStripHtmltExtension"> (optional)</param>
        /// <param name="linkcheckertransformerRewriteElements"> (optional)</param>
        /// <param name="linkcheckertransformerStripExtensionPathBlacklist"> (optional)</param>
        /// <returns>ComDayCqRewriterLinkcheckerImplLinkCheckerTransformerFactoryInfo</returns>
        ComDayCqRewriterLinkcheckerImplLinkCheckerTransformerFactoryInfo ComDayCqRewriterLinkcheckerImplLinkCheckerTransformerFactory(NancyContext context, bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, bool? linkcheckertransformerDisableRewriting, bool? linkcheckertransformerDisableChecking, int? linkcheckertransformerMapCacheSize, bool? linkcheckertransformerStrictExtensionCheck, bool? linkcheckertransformerStripHtmltExtension, List<string> linkcheckertransformerRewriteElements, List<string> linkcheckertransformerStripExtensionPathBlacklist);

        /// <summary>
        /// 
        /// </summary>
        /// <param name="context">Context of request</param>
        /// <param name="post"> (optional)</param>
        /// <param name="apply"> (optional)</param>
        /// <param name="delete"> (optional)</param>
        /// <param name="action"> (optional)</param>
        /// <param name="location"> (optional)</param>
        /// <param name="propertylist"> (optional)</param>
        /// <param name="serviceMaxLinksPerHost"> (optional)</param>
        /// <param name="serviceSaveExternalLinkReferences"> (optional)</param>
        /// <returns>ComDayCqRewriterLinkcheckerImplLinkInfoStorageImplInfo</returns>
        ComDayCqRewriterLinkcheckerImplLinkInfoStorageImplInfo ComDayCqRewriterLinkcheckerImplLinkInfoStorageImpl(NancyContext context, bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, int? serviceMaxLinksPerHost, bool? serviceSaveExternalLinkReferences);

        /// <summary>
        /// 
        /// </summary>
        /// <param name="context">Context of request</param>
        /// <param name="post"> (optional)</param>
        /// <param name="apply"> (optional)</param>
        /// <param name="delete"> (optional)</param>
        /// <param name="action"> (optional)</param>
        /// <param name="location"> (optional)</param>
        /// <param name="propertylist"> (optional)</param>
        /// <param name="htmlparserProcessTags"> (optional)</param>
        /// <param name="htmlparserPreserveCamelCase"> (optional)</param>
        /// <returns>ComDayCqRewriterProcessorImplHtmlParserFactoryInfo</returns>
        ComDayCqRewriterProcessorImplHtmlParserFactoryInfo ComDayCqRewriterProcessorImplHtmlParserFactory(NancyContext context, bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, List<string> htmlparserProcessTags, bool? htmlparserPreserveCamelCase);

        /// <summary>
        /// 
        /// </summary>
        /// <param name="context">Context of request</param>
        /// <param name="post"> (optional)</param>
        /// <param name="apply"> (optional)</param>
        /// <param name="delete"> (optional)</param>
        /// <param name="action"> (optional)</param>
        /// <param name="location"> (optional)</param>
        /// <param name="propertylist"> (optional)</param>
        /// <param name="excerptProperties"> (optional)</param>
        /// <param name="cacheMaxEntries"> (optional)</param>
        /// <param name="cacheEntryLifetime"> (optional)</param>
        /// <param name="xpathUnion"> (optional)</param>
        /// <returns>ComDayCqSearchImplBuilderQueryBuilderImplInfo</returns>
        ComDayCqSearchImplBuilderQueryBuilderImplInfo ComDayCqSearchImplBuilderQueryBuilderImpl(NancyContext context, bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, List<string> excerptProperties, int? cacheMaxEntries, int? cacheEntryLifetime, bool? xpathUnion);

        /// <summary>
        /// 
        /// </summary>
        /// <param name="context">Context of request</param>
        /// <param name="post"> (optional)</param>
        /// <param name="apply"> (optional)</param>
        /// <param name="delete"> (optional)</param>
        /// <param name="action"> (optional)</param>
        /// <param name="location"> (optional)</param>
        /// <param name="propertylist"> (optional)</param>
        /// <param name="pathBuilderTarget"> (optional)</param>
        /// <param name="suggestBasepath"> (optional)</param>
        /// <returns>ComDayCqSearchSuggestImplSuggestionIndexManagerImplInfo</returns>
        ComDayCqSearchSuggestImplSuggestionIndexManagerImplInfo ComDayCqSearchSuggestImplSuggestionIndexManagerImpl(NancyContext context, bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, string pathBuilderTarget, string suggestBasepath);

        /// <summary>
        /// 
        /// </summary>
        /// <param name="context">Context of request</param>
        /// <param name="post"> (optional)</param>
        /// <param name="apply"> (optional)</param>
        /// <param name="delete"> (optional)</param>
        /// <param name="action"> (optional)</param>
        /// <param name="location"> (optional)</param>
        /// <param name="propertylist"> (optional)</param>
        /// <param name="cqSearchpromoteConfighandlerEnabled"> (optional)</param>
        /// <returns>ComDayCqSearchpromoteImplPublishSearchPromoteConfigHandlerInfo</returns>
        ComDayCqSearchpromoteImplPublishSearchPromoteConfigHandlerInfo ComDayCqSearchpromoteImplPublishSearchPromoteConfigHandler(NancyContext context, bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, bool? cqSearchpromoteConfighandlerEnabled);

        /// <summary>
        /// 
        /// </summary>
        /// <param name="context">Context of request</param>
        /// <param name="post"> (optional)</param>
        /// <param name="apply"> (optional)</param>
        /// <param name="delete"> (optional)</param>
        /// <param name="action"> (optional)</param>
        /// <param name="location"> (optional)</param>
        /// <param name="propertylist"> (optional)</param>
        /// <param name="cqSearchpromoteConfigurationServerUri"> (optional)</param>
        /// <param name="cqSearchpromoteConfigurationEnvironment"> (optional)</param>
        /// <param name="connectionTimeout"> (optional)</param>
        /// <param name="socketTimeout"> (optional)</param>
        /// <returns>ComDayCqSearchpromoteImplSearchPromoteServiceImplInfo</returns>
        ComDayCqSearchpromoteImplSearchPromoteServiceImplInfo ComDayCqSearchpromoteImplSearchPromoteServiceImpl(NancyContext context, bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, string cqSearchpromoteConfigurationServerUri, string cqSearchpromoteConfigurationEnvironment, int? connectionTimeout, int? socketTimeout);

        /// <summary>
        /// 
        /// </summary>
        /// <param name="context">Context of request</param>
        /// <param name="post"> (optional)</param>
        /// <param name="apply"> (optional)</param>
        /// <param name="delete"> (optional)</param>
        /// <param name="action"> (optional)</param>
        /// <param name="location"> (optional)</param>
        /// <param name="propertylist"> (optional)</param>
        /// <param name="cqAclsetupRules"> (optional)</param>
        /// <returns>ComDayCqSecurityACLSetupInfo</returns>
        ComDayCqSecurityACLSetupInfo ComDayCqSecurityACLSetup(NancyContext context, bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, List<string> cqAclsetupRules);

        /// <summary>
        /// 
        /// </summary>
        /// <param name="context">Context of request</param>
        /// <param name="post"> (optional)</param>
        /// <param name="apply"> (optional)</param>
        /// <param name="delete"> (optional)</param>
        /// <param name="action"> (optional)</param>
        /// <param name="location"> (optional)</param>
        /// <param name="propertylist"> (optional)</param>
        /// <param name="schedulerPeriod"> (optional)</param>
        /// <param name="schedulerConcurrent"> (optional)</param>
        /// <param name="path"> (optional)</param>
        /// <param name="workspace"> (optional)</param>
        /// <param name="keywordsPath"> (optional)</param>
        /// <param name="asyncEntries"> (optional)</param>
        /// <returns>ComDayCqStatisticsImplStatisticsServiceImplInfo</returns>
        ComDayCqStatisticsImplStatisticsServiceImplInfo ComDayCqStatisticsImplStatisticsServiceImpl(NancyContext context, bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, int? schedulerPeriod, bool? schedulerConcurrent, string path, string workspace, string keywordsPath, bool? asyncEntries);

        /// <summary>
        /// 
        /// </summary>
        /// <param name="context">Context of request</param>
        /// <param name="post"> (optional)</param>
        /// <param name="apply"> (optional)</param>
        /// <param name="delete"> (optional)</param>
        /// <param name="action"> (optional)</param>
        /// <param name="location"> (optional)</param>
        /// <param name="propertylist"> (optional)</param>
        /// <param name="validationEnabled"> (optional)</param>
        /// <returns>ComDayCqTaggingImplJcrTagManagerFactoryImplInfo</returns>
        ComDayCqTaggingImplJcrTagManagerFactoryImplInfo ComDayCqTaggingImplJcrTagManagerFactoryImpl(NancyContext context, bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, bool? validationEnabled);

        /// <summary>
        /// 
        /// </summary>
        /// <param name="context">Context of request</param>
        /// <param name="post"> (optional)</param>
        /// <param name="apply"> (optional)</param>
        /// <param name="delete"> (optional)</param>
        /// <param name="action"> (optional)</param>
        /// <param name="location"> (optional)</param>
        /// <param name="propertylist"> (optional)</param>
        /// <param name="ignorePath"> (optional)</param>
        /// <returns>ComDayCqTaggingImplSearchTagPredicateEvaluatorInfo</returns>
        ComDayCqTaggingImplSearchTagPredicateEvaluatorInfo ComDayCqTaggingImplSearchTagPredicateEvaluator(NancyContext context, bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, bool? ignorePath);

        /// <summary>
        /// 
        /// </summary>
        /// <param name="context">Context of request</param>
        /// <param name="post"> (optional)</param>
        /// <param name="apply"> (optional)</param>
        /// <param name="delete"> (optional)</param>
        /// <param name="action"> (optional)</param>
        /// <param name="location"> (optional)</param>
        /// <param name="propertylist"> (optional)</param>
        /// <param name="schedulerExpression"> (optional)</param>
        /// <returns>ComDayCqTaggingImplTagGarbageCollectorInfo</returns>
        ComDayCqTaggingImplTagGarbageCollectorInfo ComDayCqTaggingImplTagGarbageCollector(NancyContext context, bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, string schedulerExpression);

        /// <summary>
        /// 
        /// </summary>
        /// <param name="context">Context of request</param>
        /// <param name="post"> (optional)</param>
        /// <param name="apply"> (optional)</param>
        /// <param name="delete"> (optional)</param>
        /// <param name="action"> (optional)</param>
        /// <param name="location"> (optional)</param>
        /// <param name="propertylist"> (optional)</param>
        /// <param name="cqPagesupdatehandlerImageresourcetypes"> (optional)</param>
        /// <returns>ComDayCqWcmContentsyncImplHandlerPagesUpdateHandlerInfo</returns>
        ComDayCqWcmContentsyncImplHandlerPagesUpdateHandlerInfo ComDayCqWcmContentsyncImplHandlerPagesUpdateHandler(NancyContext context, bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, List<string> cqPagesupdatehandlerImageresourcetypes);

        /// <summary>
        /// 
        /// </summary>
        /// <param name="context">Context of request</param>
        /// <param name="post"> (optional)</param>
        /// <param name="apply"> (optional)</param>
        /// <param name="delete"> (optional)</param>
        /// <param name="action"> (optional)</param>
        /// <param name="location"> (optional)</param>
        /// <param name="propertylist"> (optional)</param>
        /// <param name="cqContentsyncPathrewritertransformerMappingLinks"> (optional)</param>
        /// <param name="cqContentsyncPathrewritertransformerMappingClientlibs"> (optional)</param>
        /// <param name="cqContentsyncPathrewritertransformerMappingImages"> (optional)</param>
        /// <param name="cqContentsyncPathrewritertransformerAttributePattern"> (optional)</param>
        /// <param name="cqContentsyncPathrewritertransformerClientlibraryPattern"> (optional)</param>
        /// <param name="cqContentsyncPathrewritertransformerClientlibraryReplace"> (optional)</param>
        /// <returns>ComDayCqWcmContentsyncImplRewriterPathRewriterTransformerFactorInfo</returns>
        ComDayCqWcmContentsyncImplRewriterPathRewriterTransformerFactorInfo ComDayCqWcmContentsyncImplRewriterPathRewriterTransformerFactor(NancyContext context, bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, List<string> cqContentsyncPathrewritertransformerMappingLinks, List<string> cqContentsyncPathrewritertransformerMappingClientlibs, List<string> cqContentsyncPathrewritertransformerMappingImages, string cqContentsyncPathrewritertransformerAttributePattern, string cqContentsyncPathrewritertransformerClientlibraryPattern, string cqContentsyncPathrewritertransformerClientlibraryReplace);

        /// <summary>
        /// 
        /// </summary>
        /// <param name="context">Context of request</param>
        /// <param name="post"> (optional)</param>
        /// <param name="apply"> (optional)</param>
        /// <param name="delete"> (optional)</param>
        /// <param name="action"> (optional)</param>
        /// <param name="location"> (optional)</param>
        /// <param name="propertylist"> (optional)</param>
        /// <param name="authoringUIModeServiceDefault"> (optional)</param>
        /// <returns>ComDayCqWcmCoreImplAuthoringUIModeServiceImplInfo</returns>
        ComDayCqWcmCoreImplAuthoringUIModeServiceImplInfo ComDayCqWcmCoreImplAuthoringUIModeServiceImpl(NancyContext context, bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, string authoringUIModeServiceDefault);

        /// <summary>
        /// 
        /// </summary>
        /// <param name="context">Context of request</param>
        /// <param name="post"> (optional)</param>
        /// <param name="apply"> (optional)</param>
        /// <param name="delete"> (optional)</param>
        /// <param name="action"> (optional)</param>
        /// <param name="location"> (optional)</param>
        /// <param name="propertylist"> (optional)</param>
        /// <param name="wcmcommandservletDeleteWhitelist"> (optional)</param>
        /// <returns>ComDayCqWcmCoreImplCommandsWCMCommandServletInfo</returns>
        ComDayCqWcmCoreImplCommandsWCMCommandServletInfo ComDayCqWcmCoreImplCommandsWCMCommandServlet(NancyContext context, bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, List<string> wcmcommandservletDeleteWhitelist);

        /// <summary>
        /// 
        /// </summary>
        /// <param name="context">Context of request</param>
        /// <param name="post"> (optional)</param>
        /// <param name="apply"> (optional)</param>
        /// <param name="delete"> (optional)</param>
        /// <param name="action"> (optional)</param>
        /// <param name="location"> (optional)</param>
        /// <param name="propertylist"> (optional)</param>
        /// <param name="dimDefaultMode"> (optional)</param>
        /// <param name="dimAppcacheEnabled"> (optional)</param>
        /// <returns>ComDayCqWcmCoreImplDevicedetectionDeviceIdentificationModeImplInfo</returns>
        ComDayCqWcmCoreImplDevicedetectionDeviceIdentificationModeImplInfo ComDayCqWcmCoreImplDevicedetectionDeviceIdentificationModeImpl(NancyContext context, bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, string dimDefaultMode, bool? dimAppcacheEnabled);

        /// <summary>
        /// 
        /// </summary>
        /// <param name="context">Context of request</param>
        /// <param name="post"> (optional)</param>
        /// <param name="apply"> (optional)</param>
        /// <param name="delete"> (optional)</param>
        /// <param name="action"> (optional)</param>
        /// <param name="location"> (optional)</param>
        /// <param name="propertylist"> (optional)</param>
        /// <param name="configured"> (optional)</param>
        /// <returns>ComDayCqWcmCoreImplEventPageEventAuditListenerInfo</returns>
        ComDayCqWcmCoreImplEventPageEventAuditListenerInfo ComDayCqWcmCoreImplEventPageEventAuditListener(NancyContext context, bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, string configured);

        /// <summary>
        /// 
        /// </summary>
        /// <param name="context">Context of request</param>
        /// <param name="post"> (optional)</param>
        /// <param name="apply"> (optional)</param>
        /// <param name="delete"> (optional)</param>
        /// <param name="action"> (optional)</param>
        /// <param name="location"> (optional)</param>
        /// <param name="propertylist"> (optional)</param>
        /// <param name="paths"> (optional)</param>
        /// <returns>ComDayCqWcmCoreImplEventPagePostProcessorInfo</returns>
        ComDayCqWcmCoreImplEventPagePostProcessorInfo ComDayCqWcmCoreImplEventPagePostProcessor(NancyContext context, bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, List<string> paths);

        /// <summary>
        /// 
        /// </summary>
        /// <param name="context">Context of request</param>
        /// <param name="post"> (optional)</param>
        /// <param name="apply"> (optional)</param>
        /// <param name="delete"> (optional)</param>
        /// <param name="action"> (optional)</param>
        /// <param name="location"> (optional)</param>
        /// <param name="propertylist"> (optional)</param>
        /// <param name="paths"> (optional)</param>
        /// <param name="excludedPaths"> (optional)</param>
        /// <returns>ComDayCqWcmCoreImplEventRepositoryChangeEventListenerInfo</returns>
        ComDayCqWcmCoreImplEventRepositoryChangeEventListenerInfo ComDayCqWcmCoreImplEventRepositoryChangeEventListener(NancyContext context, bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, List<string> paths, List<string> excludedPaths);

        /// <summary>
        /// 
        /// </summary>
        /// <param name="context">Context of request</param>
        /// <param name="post"> (optional)</param>
        /// <param name="apply"> (optional)</param>
        /// <param name="delete"> (optional)</param>
        /// <param name="action"> (optional)</param>
        /// <param name="location"> (optional)</param>
        /// <param name="propertylist"> (optional)</param>
        /// <param name="paths"> (optional)</param>
        /// <returns>ComDayCqWcmCoreImplEventTemplatePostProcessorInfo</returns>
        ComDayCqWcmCoreImplEventTemplatePostProcessorInfo ComDayCqWcmCoreImplEventTemplatePostProcessor(NancyContext context, bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, string paths);

        /// <summary>
        /// 
        /// </summary>
        /// <param name="context">Context of request</param>
        /// <param name="post"> (optional)</param>
        /// <param name="apply"> (optional)</param>
        /// <param name="delete"> (optional)</param>
        /// <param name="action"> (optional)</param>
        /// <param name="location"> (optional)</param>
        /// <param name="propertylist"> (optional)</param>
        /// <param name="langmgrListPath"> (optional)</param>
        /// <param name="langmgrCountryDefault"> (optional)</param>
        /// <returns>ComDayCqWcmCoreImplLanguageManagerImplInfo</returns>
        ComDayCqWcmCoreImplLanguageManagerImplInfo ComDayCqWcmCoreImplLanguageManagerImpl(NancyContext context, bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, string langmgrListPath, List<string> langmgrCountryDefault);

        /// <summary>
        /// 
        /// </summary>
        /// <param name="context">Context of request</param>
        /// <param name="post"> (optional)</param>
        /// <param name="apply"> (optional)</param>
        /// <param name="delete"> (optional)</param>
        /// <param name="action"> (optional)</param>
        /// <param name="location"> (optional)</param>
        /// <param name="propertylist"> (optional)</param>
        /// <param name="linkExpiredPrefix"> (optional)</param>
        /// <param name="linkExpiredRemove"> (optional)</param>
        /// <param name="linkExpiredSuffix"> (optional)</param>
        /// <param name="linkInvalidPrefix"> (optional)</param>
        /// <param name="linkInvalidRemove"> (optional)</param>
        /// <param name="linkInvalidSuffix"> (optional)</param>
        /// <param name="linkPredatedPrefix"> (optional)</param>
        /// <param name="linkPredatedRemove"> (optional)</param>
        /// <param name="linkPredatedSuffix"> (optional)</param>
        /// <param name="linkWcmmodes"> (optional)</param>
        /// <returns>ComDayCqWcmCoreImplLinkCheckerConfigurationFactoryImplInfo</returns>
        ComDayCqWcmCoreImplLinkCheckerConfigurationFactoryImplInfo ComDayCqWcmCoreImplLinkCheckerConfigurationFactoryImpl(NancyContext context, bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, string linkExpiredPrefix, bool? linkExpiredRemove, string linkExpiredSuffix, string linkInvalidPrefix, bool? linkInvalidRemove, string linkInvalidSuffix, string linkPredatedPrefix, bool? linkPredatedRemove, string linkPredatedSuffix, List<string> linkWcmmodes);

        /// <summary>
        /// 
        /// </summary>
        /// <param name="context">Context of request</param>
        /// <param name="post"> (optional)</param>
        /// <param name="apply"> (optional)</param>
        /// <param name="delete"> (optional)</param>
        /// <param name="action"> (optional)</param>
        /// <param name="location"> (optional)</param>
        /// <param name="propertylist"> (optional)</param>
        /// <param name="pageInfoProviderPropertyRegexDefault"> (optional)</param>
        /// <param name="pageInfoProviderPropertyName"> (optional)</param>
        /// <returns>ComDayCqWcmCoreImplPagePageInfoAggregatorImplInfo</returns>
        ComDayCqWcmCoreImplPagePageInfoAggregatorImplInfo ComDayCqWcmCoreImplPagePageInfoAggregatorImpl(NancyContext context, bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, string pageInfoProviderPropertyRegexDefault, string pageInfoProviderPropertyName);

        /// <summary>
        /// 
        /// </summary>
        /// <param name="context">Context of request</param>
        /// <param name="post"> (optional)</param>
        /// <param name="apply"> (optional)</param>
        /// <param name="delete"> (optional)</param>
        /// <param name="action"> (optional)</param>
        /// <param name="location"> (optional)</param>
        /// <param name="propertylist"> (optional)</param>
        /// <param name="illegalCharMapping"> (optional)</param>
        /// <param name="pageSubTreeActivationCheck"> (optional)</param>
        /// <returns>ComDayCqWcmCoreImplPagePageManagerFactoryImplInfo</returns>
        ComDayCqWcmCoreImplPagePageManagerFactoryImplInfo ComDayCqWcmCoreImplPagePageManagerFactoryImpl(NancyContext context, bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, string illegalCharMapping, bool? pageSubTreeActivationCheck);

        /// <summary>
        /// 
        /// </summary>
        /// <param name="context">Context of request</param>
        /// <param name="post"> (optional)</param>
        /// <param name="apply"> (optional)</param>
        /// <param name="delete"> (optional)</param>
        /// <param name="action"> (optional)</param>
        /// <param name="location"> (optional)</param>
        /// <param name="propertylist"> (optional)</param>
        /// <param name="contentReferenceConfigResourceTypes"> (optional)</param>
        /// <returns>ComDayCqWcmCoreImplReferencesContentContentReferenceConfigInfo</returns>
        ComDayCqWcmCoreImplReferencesContentContentReferenceConfigInfo ComDayCqWcmCoreImplReferencesContentContentReferenceConfig(NancyContext context, bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, List<string> contentReferenceConfigResourceTypes);

        /// <summary>
        /// 
        /// </summary>
        /// <param name="context">Context of request</param>
        /// <param name="post"> (optional)</param>
        /// <param name="apply"> (optional)</param>
        /// <param name="delete"> (optional)</param>
        /// <param name="action"> (optional)</param>
        /// <param name="location"> (optional)</param>
        /// <param name="propertylist"> (optional)</param>
        /// <param name="damShowexpired"> (optional)</param>
        /// <param name="damShowhidden"> (optional)</param>
        /// <param name="tagTitleSearch"> (optional)</param>
        /// <param name="guessTotal"> (optional)</param>
        /// <param name="damExpiryProperty"> (optional)</param>
        /// <returns>ComDayCqWcmCoreImplServletsContentfinderAssetViewHandlerInfo</returns>
        ComDayCqWcmCoreImplServletsContentfinderAssetViewHandlerInfo ComDayCqWcmCoreImplServletsContentfinderAssetViewHandler(NancyContext context, bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, bool? damShowexpired, bool? damShowhidden, bool? tagTitleSearch, string guessTotal, string damExpiryProperty);

        /// <summary>
        /// 
        /// </summary>
        /// <param name="context">Context of request</param>
        /// <param name="post"> (optional)</param>
        /// <param name="apply"> (optional)</param>
        /// <param name="delete"> (optional)</param>
        /// <param name="action"> (optional)</param>
        /// <param name="location"> (optional)</param>
        /// <param name="propertylist"> (optional)</param>
        /// <param name="itemResourceTypes"> (optional)</param>
        /// <returns>ComDayCqWcmCoreImplServletsContentfinderConnectorConnectorVieInfo</returns>
        ComDayCqWcmCoreImplServletsContentfinderConnectorConnectorVieInfo ComDayCqWcmCoreImplServletsContentfinderConnectorConnectorVie(NancyContext context, bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, List<string> itemResourceTypes);

        /// <summary>
        /// 
        /// </summary>
        /// <param name="context">Context of request</param>
        /// <param name="post"> (optional)</param>
        /// <param name="apply"> (optional)</param>
        /// <param name="delete"> (optional)</param>
        /// <param name="action"> (optional)</param>
        /// <param name="location"> (optional)</param>
        /// <param name="propertylist"> (optional)</param>
        /// <param name="guessTotal"> (optional)</param>
        /// <param name="tagTitleSearch"> (optional)</param>
        /// <returns>ComDayCqWcmCoreImplServletsContentfinderPageViewHandlerInfo</returns>
        ComDayCqWcmCoreImplServletsContentfinderPageViewHandlerInfo ComDayCqWcmCoreImplServletsContentfinderPageViewHandler(NancyContext context, bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, string guessTotal, bool? tagTitleSearch);

        /// <summary>
        /// 
        /// </summary>
        /// <param name="context">Context of request</param>
        /// <param name="post"> (optional)</param>
        /// <param name="apply"> (optional)</param>
        /// <param name="delete"> (optional)</param>
        /// <param name="action"> (optional)</param>
        /// <param name="location"> (optional)</param>
        /// <param name="propertylist"> (optional)</param>
        /// <param name="scope"> (optional)</param>
        /// <returns>ComDayCqWcmCoreImplServletsFindReplaceServletInfo</returns>
        ComDayCqWcmCoreImplServletsFindReplaceServletInfo ComDayCqWcmCoreImplServletsFindReplaceServlet(NancyContext context, bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, List<string> scope);

        /// <summary>
        /// 
        /// </summary>
        /// <param name="context">Context of request</param>
        /// <param name="post"> (optional)</param>
        /// <param name="apply"> (optional)</param>
        /// <param name="delete"> (optional)</param>
        /// <param name="action"> (optional)</param>
        /// <param name="location"> (optional)</param>
        /// <param name="propertylist"> (optional)</param>
        /// <param name="referencesearchservletMaxReferencesPerPage"> (optional)</param>
        /// <param name="referencesearchservletMaxPages"> (optional)</param>
        /// <returns>ComDayCqWcmCoreImplServletsReferenceSearchServletInfo</returns>
        ComDayCqWcmCoreImplServletsReferenceSearchServletInfo ComDayCqWcmCoreImplServletsReferenceSearchServlet(NancyContext context, bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, int? referencesearchservletMaxReferencesPerPage, int? referencesearchservletMaxPages);

        /// <summary>
        /// 
        /// </summary>
        /// <param name="context">Context of request</param>
        /// <param name="post"> (optional)</param>
        /// <param name="apply"> (optional)</param>
        /// <param name="delete"> (optional)</param>
        /// <param name="action"> (optional)</param>
        /// <param name="location"> (optional)</param>
        /// <param name="propertylist"> (optional)</param>
        /// <param name="workspace"> (optional)</param>
        /// <param name="dimensions"> (optional)</param>
        /// <returns>ComDayCqWcmCoreImplServletsThumbnailServletInfo</returns>
        ComDayCqWcmCoreImplServletsThumbnailServletInfo ComDayCqWcmCoreImplServletsThumbnailServlet(NancyContext context, bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, string workspace, List<string> dimensions);

        /// <summary>
        /// 
        /// </summary>
        /// <param name="context">Context of request</param>
        /// <param name="post"> (optional)</param>
        /// <param name="apply"> (optional)</param>
        /// <param name="delete"> (optional)</param>
        /// <param name="action"> (optional)</param>
        /// <param name="location"> (optional)</param>
        /// <param name="propertylist"> (optional)</param>
        /// <param name="nonValidChars"> (optional)</param>
        /// <returns>ComDayCqWcmCoreImplUtilsDefaultPageNameValidatorInfo</returns>
        ComDayCqWcmCoreImplUtilsDefaultPageNameValidatorInfo ComDayCqWcmCoreImplUtilsDefaultPageNameValidator(NancyContext context, bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, string nonValidChars);

        /// <summary>
        /// 
        /// </summary>
        /// <param name="context">Context of request</param>
        /// <param name="post"> (optional)</param>
        /// <param name="apply"> (optional)</param>
        /// <param name="delete"> (optional)</param>
        /// <param name="action"> (optional)</param>
        /// <param name="location"> (optional)</param>
        /// <param name="propertylist"> (optional)</param>
        /// <param name="defaultExternalizerDomain"> (optional)</param>
        /// <returns>ComDayCqWcmCoreImplVariantsPageVariantsProviderImplInfo</returns>
        ComDayCqWcmCoreImplVariantsPageVariantsProviderImplInfo ComDayCqWcmCoreImplVariantsPageVariantsProviderImpl(NancyContext context, bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, string defaultExternalizerDomain);

        /// <summary>
        /// 
        /// </summary>
        /// <param name="context">Context of request</param>
        /// <param name="post"> (optional)</param>
        /// <param name="apply"> (optional)</param>
        /// <param name="delete"> (optional)</param>
        /// <param name="action"> (optional)</param>
        /// <param name="location"> (optional)</param>
        /// <param name="propertylist"> (optional)</param>
        /// <param name="versionmanagerCreateVersionOnActivation"> (optional)</param>
        /// <param name="versionmanagerPurgingEnabled"> (optional)</param>
        /// <param name="versionmanagerPurgePaths"> (optional)</param>
        /// <param name="versionmanagerIvPaths"> (optional)</param>
        /// <param name="versionmanagerMaxAgeDays"> (optional)</param>
        /// <param name="versionmanagerMaxNumberVersions"> (optional)</param>
        /// <param name="versionmanagerMinNumberVersions"> (optional)</param>
        /// <returns>ComDayCqWcmCoreImplVersionManagerImplInfo</returns>
        ComDayCqWcmCoreImplVersionManagerImplInfo ComDayCqWcmCoreImplVersionManagerImpl(NancyContext context, bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, bool? versionmanagerCreateVersionOnActivation, bool? versionmanagerPurgingEnabled, List<string> versionmanagerPurgePaths, List<string> versionmanagerIvPaths, int? versionmanagerMaxAgeDays, int? versionmanagerMaxNumberVersions, int? versionmanagerMinNumberVersions);

        /// <summary>
        /// 
        /// </summary>
        /// <param name="context">Context of request</param>
        /// <param name="post"> (optional)</param>
        /// <param name="apply"> (optional)</param>
        /// <param name="delete"> (optional)</param>
        /// <param name="action"> (optional)</param>
        /// <param name="location"> (optional)</param>
        /// <param name="propertylist"> (optional)</param>
        /// <param name="versionpurgePaths"> (optional)</param>
        /// <param name="versionpurgeRecursive"> (optional)</param>
        /// <param name="versionpurgeMaxVersions"> (optional)</param>
        /// <param name="versionpurgeMinVersions"> (optional)</param>
        /// <param name="versionpurgeMaxAgeDays"> (optional)</param>
        /// <returns>ComDayCqWcmCoreImplVersionPurgeTaskInfo</returns>
        ComDayCqWcmCoreImplVersionPurgeTaskInfo ComDayCqWcmCoreImplVersionPurgeTask(NancyContext context, bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, List<string> versionpurgePaths, bool? versionpurgeRecursive, int? versionpurgeMaxVersions, int? versionpurgeMinVersions, int? versionpurgeMaxAgeDays);

        /// <summary>
        /// 
        /// </summary>
        /// <param name="context">Context of request</param>
        /// <param name="post"> (optional)</param>
        /// <param name="apply"> (optional)</param>
        /// <param name="delete"> (optional)</param>
        /// <param name="action"> (optional)</param>
        /// <param name="location"> (optional)</param>
        /// <param name="propertylist"> (optional)</param>
        /// <param name="wcmdbgfilterEnabled"> (optional)</param>
        /// <param name="wcmdbgfilterJspDebug"> (optional)</param>
        /// <returns>ComDayCqWcmCoreImplWCMDebugFilterInfo</returns>
        ComDayCqWcmCoreImplWCMDebugFilterInfo ComDayCqWcmCoreImplWCMDebugFilter(NancyContext context, bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, bool? wcmdbgfilterEnabled, bool? wcmdbgfilterJspDebug);

        /// <summary>
        /// 
        /// </summary>
        /// <param name="context">Context of request</param>
        /// <param name="post"> (optional)</param>
        /// <param name="apply"> (optional)</param>
        /// <param name="delete"> (optional)</param>
        /// <param name="action"> (optional)</param>
        /// <param name="location"> (optional)</param>
        /// <param name="propertylist"> (optional)</param>
        /// <param name="wcmdevmodefilterEnabled"> (optional)</param>
        /// <returns>ComDayCqWcmCoreImplWCMDeveloperModeFilterInfo</returns>
        ComDayCqWcmCoreImplWCMDeveloperModeFilterInfo ComDayCqWcmCoreImplWCMDeveloperModeFilter(NancyContext context, bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, bool? wcmdevmodefilterEnabled);

        /// <summary>
        /// 
        /// </summary>
        /// <param name="context">Context of request</param>
        /// <param name="post"> (optional)</param>
        /// <param name="apply"> (optional)</param>
        /// <param name="delete"> (optional)</param>
        /// <param name="action"> (optional)</param>
        /// <param name="location"> (optional)</param>
        /// <param name="propertylist"> (optional)</param>
        /// <param name="filterOrder"> (optional)</param>
        /// <param name="filterScope"> (optional)</param>
        /// <returns>ComDayCqWcmCoreImplWarpTimeWarpFilterInfo</returns>
        ComDayCqWcmCoreImplWarpTimeWarpFilterInfo ComDayCqWcmCoreImplWarpTimeWarpFilter(NancyContext context, bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, string filterOrder, string filterScope);

        /// <summary>
        /// 
        /// </summary>
        /// <param name="context">Context of request</param>
        /// <param name="post"> (optional)</param>
        /// <param name="apply"> (optional)</param>
        /// <param name="delete"> (optional)</param>
        /// <param name="action"> (optional)</param>
        /// <param name="location"> (optional)</param>
        /// <param name="propertylist"> (optional)</param>
        /// <param name="mvtstatisticsTrackingurl"> (optional)</param>
        /// <returns>ComDayCqWcmCoreMvtMVTStatisticsImplInfo</returns>
        ComDayCqWcmCoreMvtMVTStatisticsImplInfo ComDayCqWcmCoreMvtMVTStatisticsImpl(NancyContext context, bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, string mvtstatisticsTrackingurl);

        /// <summary>
        /// 
        /// </summary>
        /// <param name="context">Context of request</param>
        /// <param name="post"> (optional)</param>
        /// <param name="apply"> (optional)</param>
        /// <param name="delete"> (optional)</param>
        /// <param name="action"> (optional)</param>
        /// <param name="location"> (optional)</param>
        /// <param name="propertylist"> (optional)</param>
        /// <param name="pageviewstatisticsTrackingurl"> (optional)</param>
        /// <param name="pageviewstatisticsTrackingscriptEnabled"> (optional)</param>
        /// <returns>ComDayCqWcmCoreStatsPageViewStatisticsImplInfo</returns>
        ComDayCqWcmCoreStatsPageViewStatisticsImplInfo ComDayCqWcmCoreStatsPageViewStatisticsImpl(NancyContext context, bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, string pageviewstatisticsTrackingurl, string pageviewstatisticsTrackingscriptEnabled);

        /// <summary>
        /// 
        /// </summary>
        /// <param name="context">Context of request</param>
        /// <param name="post"> (optional)</param>
        /// <param name="apply"> (optional)</param>
        /// <param name="delete"> (optional)</param>
        /// <param name="action"> (optional)</param>
        /// <param name="location"> (optional)</param>
        /// <param name="propertylist"> (optional)</param>
        /// <param name="wcmfilterMode"> (optional)</param>
        /// <returns>ComDayCqWcmCoreWCMRequestFilterInfo</returns>
        ComDayCqWcmCoreWCMRequestFilterInfo ComDayCqWcmCoreWCMRequestFilter(NancyContext context, bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, string wcmfilterMode);

        /// <summary>
        /// 
        /// </summary>
        /// <param name="context">Context of request</param>
        /// <param name="post"> (optional)</param>
        /// <param name="apply"> (optional)</param>
        /// <param name="delete"> (optional)</param>
        /// <param name="action"> (optional)</param>
        /// <param name="location"> (optional)</param>
        /// <param name="propertylist"> (optional)</param>
        /// <param name="extractFilter"> (optional)</param>
        /// <returns>ComDayCqWcmDesignimporterDesignPackageImporterInfo</returns>
        ComDayCqWcmDesignimporterDesignPackageImporterInfo ComDayCqWcmDesignimporterDesignPackageImporter(NancyContext context, bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, List<string> extractFilter);

        /// <summary>
        /// 
        /// </summary>
        /// <param name="context">Context of request</param>
        /// <param name="post"> (optional)</param>
        /// <param name="apply"> (optional)</param>
        /// <param name="delete"> (optional)</param>
        /// <param name="action"> (optional)</param>
        /// <param name="location"> (optional)</param>
        /// <param name="propertylist"> (optional)</param>
        /// <param name="filepattern"> (optional)</param>
        /// <param name="buildPageNodes"> (optional)</param>
        /// <param name="buildClientLibs"> (optional)</param>
        /// <param name="buildCanvasComponent"> (optional)</param>
        /// <returns>ComDayCqWcmDesignimporterImplCanvasBuilderImplInfo</returns>
        ComDayCqWcmDesignimporterImplCanvasBuilderImplInfo ComDayCqWcmDesignimporterImplCanvasBuilderImpl(NancyContext context, bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, string filepattern, bool? buildPageNodes, bool? buildClientLibs, bool? buildCanvasComponent);

        /// <summary>
        /// 
        /// </summary>
        /// <param name="context">Context of request</param>
        /// <param name="post"> (optional)</param>
        /// <param name="apply"> (optional)</param>
        /// <param name="delete"> (optional)</param>
        /// <param name="action"> (optional)</param>
        /// <param name="location"> (optional)</param>
        /// <param name="propertylist"> (optional)</param>
        /// <param name="minThreadPoolSize"> (optional)</param>
        /// <param name="maxThreadPoolSize"> (optional)</param>
        /// <returns>ComDayCqWcmDesignimporterImplCanvasPageDeleteHandlerInfo</returns>
        ComDayCqWcmDesignimporterImplCanvasPageDeleteHandlerInfo ComDayCqWcmDesignimporterImplCanvasPageDeleteHandler(NancyContext context, bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, int? minThreadPoolSize, int? maxThreadPoolSize);

        /// <summary>
        /// 
        /// </summary>
        /// <param name="context">Context of request</param>
        /// <param name="post"> (optional)</param>
        /// <param name="apply"> (optional)</param>
        /// <param name="delete"> (optional)</param>
        /// <param name="action"> (optional)</param>
        /// <param name="location"> (optional)</param>
        /// <param name="propertylist"> (optional)</param>
        /// <param name="searchPattern"> (optional)</param>
        /// <param name="replacePattern"> (optional)</param>
        /// <returns>ComDayCqWcmDesignimporterImplEntryPreprocessorImplInfo</returns>
        ComDayCqWcmDesignimporterImplEntryPreprocessorImplInfo ComDayCqWcmDesignimporterImplEntryPreprocessorImpl(NancyContext context, bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, string searchPattern, string replacePattern);

        /// <summary>
        /// 
        /// </summary>
        /// <param name="context">Context of request</param>
        /// <param name="post"> (optional)</param>
        /// <param name="apply"> (optional)</param>
        /// <param name="delete"> (optional)</param>
        /// <param name="action"> (optional)</param>
        /// <param name="location"> (optional)</param>
        /// <param name="propertylist"> (optional)</param>
        /// <param name="filepattern"> (optional)</param>
        /// <param name="deviceGroups"> (optional)</param>
        /// <param name="buildPageNodes"> (optional)</param>
        /// <param name="buildClientLibs"> (optional)</param>
        /// <param name="buildCanvasComponent"> (optional)</param>
        /// <returns>ComDayCqWcmDesignimporterImplMobileCanvasBuilderImplInfo</returns>
        ComDayCqWcmDesignimporterImplMobileCanvasBuilderImplInfo ComDayCqWcmDesignimporterImplMobileCanvasBuilderImpl(NancyContext context, bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, string filepattern, List<string> deviceGroups, bool? buildPageNodes, bool? buildClientLibs, bool? buildCanvasComponent);

        /// <summary>
        /// 
        /// </summary>
        /// <param name="context">Context of request</param>
        /// <param name="post"> (optional)</param>
        /// <param name="apply"> (optional)</param>
        /// <param name="delete"> (optional)</param>
        /// <param name="action"> (optional)</param>
        /// <param name="location"> (optional)</param>
        /// <param name="propertylist"> (optional)</param>
        /// <param name="serviceRanking"> (optional)</param>
        /// <param name="tagpattern"> (optional)</param>
        /// <returns>ComDayCqWcmDesignimporterParserTaghandlersFactoryCanvasComponeInfo</returns>
        ComDayCqWcmDesignimporterParserTaghandlersFactoryCanvasComponeInfo ComDayCqWcmDesignimporterParserTaghandlersFactoryCanvasCompone(NancyContext context, bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, int? serviceRanking, string tagpattern);

        /// <summary>
        /// 
        /// </summary>
        /// <param name="context">Context of request</param>
        /// <param name="post"> (optional)</param>
        /// <param name="apply"> (optional)</param>
        /// <param name="delete"> (optional)</param>
        /// <param name="action"> (optional)</param>
        /// <param name="location"> (optional)</param>
        /// <param name="propertylist"> (optional)</param>
        /// <param name="serviceRanking"> (optional)</param>
        /// <param name="tagpattern"> (optional)</param>
        /// <returns>ComDayCqWcmDesignimporterParserTaghandlersFactoryDefaultComponInfo</returns>
        ComDayCqWcmDesignimporterParserTaghandlersFactoryDefaultComponInfo ComDayCqWcmDesignimporterParserTaghandlersFactoryDefaultCompon(NancyContext context, bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, int? serviceRanking, string tagpattern);

        /// <summary>
        /// 
        /// </summary>
        /// <param name="context">Context of request</param>
        /// <param name="post"> (optional)</param>
        /// <param name="apply"> (optional)</param>
        /// <param name="delete"> (optional)</param>
        /// <param name="action"> (optional)</param>
        /// <param name="location"> (optional)</param>
        /// <param name="propertylist"> (optional)</param>
        /// <param name="serviceRanking"> (optional)</param>
        /// <param name="tagpattern"> (optional)</param>
        /// <returns>ComDayCqWcmDesignimporterParserTaghandlersFactoryDefaultTagHanInfo</returns>
        ComDayCqWcmDesignimporterParserTaghandlersFactoryDefaultTagHanInfo ComDayCqWcmDesignimporterParserTaghandlersFactoryDefaultTagHan(NancyContext context, bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, int? serviceRanking, string tagpattern);

        /// <summary>
        /// 
        /// </summary>
        /// <param name="context">Context of request</param>
        /// <param name="post"> (optional)</param>
        /// <param name="apply"> (optional)</param>
        /// <param name="delete"> (optional)</param>
        /// <param name="action"> (optional)</param>
        /// <param name="location"> (optional)</param>
        /// <param name="propertylist"> (optional)</param>
        /// <param name="serviceRanking"> (optional)</param>
        /// <param name="tagpattern"> (optional)</param>
        /// <returns>ComDayCqWcmDesignimporterParserTaghandlersFactoryHeadTagHandleInfo</returns>
        ComDayCqWcmDesignimporterParserTaghandlersFactoryHeadTagHandleInfo ComDayCqWcmDesignimporterParserTaghandlersFactoryHeadTagHandle(NancyContext context, bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, int? serviceRanking, string tagpattern);

        /// <summary>
        /// 
        /// </summary>
        /// <param name="context">Context of request</param>
        /// <param name="post"> (optional)</param>
        /// <param name="apply"> (optional)</param>
        /// <param name="delete"> (optional)</param>
        /// <param name="action"> (optional)</param>
        /// <param name="location"> (optional)</param>
        /// <param name="propertylist"> (optional)</param>
        /// <param name="serviceRanking"> (optional)</param>
        /// <param name="tagpattern"> (optional)</param>
        /// <returns>ComDayCqWcmDesignimporterParserTaghandlersFactoryIFrameTagHandInfo</returns>
        ComDayCqWcmDesignimporterParserTaghandlersFactoryIFrameTagHandInfo ComDayCqWcmDesignimporterParserTaghandlersFactoryIFrameTagHand(NancyContext context, bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, int? serviceRanking, string tagpattern);

        /// <summary>
        /// 
        /// </summary>
        /// <param name="context">Context of request</param>
        /// <param name="post"> (optional)</param>
        /// <param name="apply"> (optional)</param>
        /// <param name="delete"> (optional)</param>
        /// <param name="action"> (optional)</param>
        /// <param name="location"> (optional)</param>
        /// <param name="propertylist"> (optional)</param>
        /// <param name="serviceRanking"> (optional)</param>
        /// <param name="tagpattern"> (optional)</param>
        /// <param name="componentResourceType"> (optional)</param>
        /// <returns>ComDayCqWcmDesignimporterParserTaghandlersFactoryImageComponenInfo</returns>
        ComDayCqWcmDesignimporterParserTaghandlersFactoryImageComponenInfo ComDayCqWcmDesignimporterParserTaghandlersFactoryImageComponen(NancyContext context, bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, int? serviceRanking, string tagpattern, string componentResourceType);

        /// <summary>
        /// 
        /// </summary>
        /// <param name="context">Context of request</param>
        /// <param name="post"> (optional)</param>
        /// <param name="apply"> (optional)</param>
        /// <param name="delete"> (optional)</param>
        /// <param name="action"> (optional)</param>
        /// <param name="location"> (optional)</param>
        /// <param name="propertylist"> (optional)</param>
        /// <param name="serviceRanking"> (optional)</param>
        /// <param name="tagpattern"> (optional)</param>
        /// <returns>ComDayCqWcmDesignimporterParserTaghandlersFactoryImgTagHandlerInfo</returns>
        ComDayCqWcmDesignimporterParserTaghandlersFactoryImgTagHandlerInfo ComDayCqWcmDesignimporterParserTaghandlersFactoryImgTagHandler(NancyContext context, bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, int? serviceRanking, string tagpattern);

        /// <summary>
        /// 
        /// </summary>
        /// <param name="context">Context of request</param>
        /// <param name="post"> (optional)</param>
        /// <param name="apply"> (optional)</param>
        /// <param name="delete"> (optional)</param>
        /// <param name="action"> (optional)</param>
        /// <param name="location"> (optional)</param>
        /// <param name="propertylist"> (optional)</param>
        /// <param name="serviceRanking"> (optional)</param>
        /// <param name="tagpattern"> (optional)</param>
        /// <returns>ComDayCqWcmDesignimporterParserTaghandlersFactoryInlineScriptTInfo</returns>
        ComDayCqWcmDesignimporterParserTaghandlersFactoryInlineScriptTInfo ComDayCqWcmDesignimporterParserTaghandlersFactoryInlineScriptT(NancyContext context, bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, int? serviceRanking, string tagpattern);

        /// <summary>
        /// 
        /// </summary>
        /// <param name="context">Context of request</param>
        /// <param name="post"> (optional)</param>
        /// <param name="apply"> (optional)</param>
        /// <param name="delete"> (optional)</param>
        /// <param name="action"> (optional)</param>
        /// <param name="location"> (optional)</param>
        /// <param name="propertylist"> (optional)</param>
        /// <param name="serviceRanking"> (optional)</param>
        /// <param name="tagpattern"> (optional)</param>
        /// <returns>ComDayCqWcmDesignimporterParserTaghandlersFactoryLinkTagHandleInfo</returns>
        ComDayCqWcmDesignimporterParserTaghandlersFactoryLinkTagHandleInfo ComDayCqWcmDesignimporterParserTaghandlersFactoryLinkTagHandle(NancyContext context, bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, int? serviceRanking, string tagpattern);

        /// <summary>
        /// 
        /// </summary>
        /// <param name="context">Context of request</param>
        /// <param name="post"> (optional)</param>
        /// <param name="apply"> (optional)</param>
        /// <param name="delete"> (optional)</param>
        /// <param name="action"> (optional)</param>
        /// <param name="location"> (optional)</param>
        /// <param name="propertylist"> (optional)</param>
        /// <param name="serviceRanking"> (optional)</param>
        /// <param name="tagpattern"> (optional)</param>
        /// <returns>ComDayCqWcmDesignimporterParserTaghandlersFactoryMetaTagHandleInfo</returns>
        ComDayCqWcmDesignimporterParserTaghandlersFactoryMetaTagHandleInfo ComDayCqWcmDesignimporterParserTaghandlersFactoryMetaTagHandle(NancyContext context, bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, int? serviceRanking, string tagpattern);

        /// <summary>
        /// 
        /// </summary>
        /// <param name="context">Context of request</param>
        /// <param name="post"> (optional)</param>
        /// <param name="apply"> (optional)</param>
        /// <param name="delete"> (optional)</param>
        /// <param name="action"> (optional)</param>
        /// <param name="location"> (optional)</param>
        /// <param name="propertylist"> (optional)</param>
        /// <param name="serviceRanking"> (optional)</param>
        /// <param name="tagpattern"> (optional)</param>
        /// <returns>ComDayCqWcmDesignimporterParserTaghandlersFactoryNonScriptTagHInfo</returns>
        ComDayCqWcmDesignimporterParserTaghandlersFactoryNonScriptTagHInfo ComDayCqWcmDesignimporterParserTaghandlersFactoryNonScriptTagH(NancyContext context, bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, int? serviceRanking, string tagpattern);

        /// <summary>
        /// 
        /// </summary>
        /// <param name="context">Context of request</param>
        /// <param name="post"> (optional)</param>
        /// <param name="apply"> (optional)</param>
        /// <param name="delete"> (optional)</param>
        /// <param name="action"> (optional)</param>
        /// <param name="location"> (optional)</param>
        /// <param name="propertylist"> (optional)</param>
        /// <param name="serviceRanking"> (optional)</param>
        /// <param name="tagpattern"> (optional)</param>
        /// <param name="componentResourceType"> (optional)</param>
        /// <returns>ComDayCqWcmDesignimporterParserTaghandlersFactoryParsysComponeInfo</returns>
        ComDayCqWcmDesignimporterParserTaghandlersFactoryParsysComponeInfo ComDayCqWcmDesignimporterParserTaghandlersFactoryParsysCompone(NancyContext context, bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, int? serviceRanking, string tagpattern, string componentResourceType);

        /// <summary>
        /// 
        /// </summary>
        /// <param name="context">Context of request</param>
        /// <param name="post"> (optional)</param>
        /// <param name="apply"> (optional)</param>
        /// <param name="delete"> (optional)</param>
        /// <param name="action"> (optional)</param>
        /// <param name="location"> (optional)</param>
        /// <param name="propertylist"> (optional)</param>
        /// <param name="serviceRanking"> (optional)</param>
        /// <param name="tagpattern"> (optional)</param>
        /// <returns>ComDayCqWcmDesignimporterParserTaghandlersFactoryScriptTagHandInfo</returns>
        ComDayCqWcmDesignimporterParserTaghandlersFactoryScriptTagHandInfo ComDayCqWcmDesignimporterParserTaghandlersFactoryScriptTagHand(NancyContext context, bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, int? serviceRanking, string tagpattern);

        /// <summary>
        /// 
        /// </summary>
        /// <param name="context">Context of request</param>
        /// <param name="post"> (optional)</param>
        /// <param name="apply"> (optional)</param>
        /// <param name="delete"> (optional)</param>
        /// <param name="action"> (optional)</param>
        /// <param name="location"> (optional)</param>
        /// <param name="propertylist"> (optional)</param>
        /// <param name="serviceRanking"> (optional)</param>
        /// <param name="tagpattern"> (optional)</param>
        /// <returns>ComDayCqWcmDesignimporterParserTaghandlersFactoryStyleTagHandlInfo</returns>
        ComDayCqWcmDesignimporterParserTaghandlersFactoryStyleTagHandlInfo ComDayCqWcmDesignimporterParserTaghandlersFactoryStyleTagHandl(NancyContext context, bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, int? serviceRanking, string tagpattern);

        /// <summary>
        /// 
        /// </summary>
        /// <param name="context">Context of request</param>
        /// <param name="post"> (optional)</param>
        /// <param name="apply"> (optional)</param>
        /// <param name="delete"> (optional)</param>
        /// <param name="action"> (optional)</param>
        /// <param name="location"> (optional)</param>
        /// <param name="propertylist"> (optional)</param>
        /// <param name="serviceRanking"> (optional)</param>
        /// <param name="tagpattern"> (optional)</param>
        /// <param name="componentResourceType"> (optional)</param>
        /// <returns>ComDayCqWcmDesignimporterParserTaghandlersFactoryTextComponentInfo</returns>
        ComDayCqWcmDesignimporterParserTaghandlersFactoryTextComponentInfo ComDayCqWcmDesignimporterParserTaghandlersFactoryTextComponent(NancyContext context, bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, int? serviceRanking, string tagpattern, string componentResourceType);

        /// <summary>
        /// 
        /// </summary>
        /// <param name="context">Context of request</param>
        /// <param name="post"> (optional)</param>
        /// <param name="apply"> (optional)</param>
        /// <param name="delete"> (optional)</param>
        /// <param name="action"> (optional)</param>
        /// <param name="location"> (optional)</param>
        /// <param name="propertylist"> (optional)</param>
        /// <param name="serviceRanking"> (optional)</param>
        /// <param name="tagpattern"> (optional)</param>
        /// <param name="componentResourceType"> (optional)</param>
        /// <returns>ComDayCqWcmDesignimporterParserTaghandlersFactoryTitleComponenInfo</returns>
        ComDayCqWcmDesignimporterParserTaghandlersFactoryTitleComponenInfo ComDayCqWcmDesignimporterParserTaghandlersFactoryTitleComponen(NancyContext context, bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, int? serviceRanking, string tagpattern, string componentResourceType);

        /// <summary>
        /// 
        /// </summary>
        /// <param name="context">Context of request</param>
        /// <param name="post"> (optional)</param>
        /// <param name="apply"> (optional)</param>
        /// <param name="delete"> (optional)</param>
        /// <param name="action"> (optional)</param>
        /// <param name="location"> (optional)</param>
        /// <param name="propertylist"> (optional)</param>
        /// <param name="serviceRanking"> (optional)</param>
        /// <param name="tagpattern"> (optional)</param>
        /// <returns>ComDayCqWcmDesignimporterParserTaghandlersFactoryTitleTagHandlInfo</returns>
        ComDayCqWcmDesignimporterParserTaghandlersFactoryTitleTagHandlInfo ComDayCqWcmDesignimporterParserTaghandlersFactoryTitleTagHandl(NancyContext context, bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, int? serviceRanking, string tagpattern);

        /// <summary>
        /// 
        /// </summary>
        /// <param name="context">Context of request</param>
        /// <param name="post"> (optional)</param>
        /// <param name="apply"> (optional)</param>
        /// <param name="delete"> (optional)</param>
        /// <param name="action"> (optional)</param>
        /// <param name="location"> (optional)</param>
        /// <param name="propertylist"> (optional)</param>
        /// <param name="serviceName"> (optional)</param>
        /// <param name="slingServletResourceTypes"> (optional)</param>
        /// <param name="slingServletSelectors"> (optional)</param>
        /// <param name="slingServletMethods"> (optional)</param>
        /// <param name="formsFormchooserservletAdvansesearchRequire"> (optional)</param>
        /// <returns>ComDayCqWcmFoundationFormsImplFormChooserServletInfo</returns>
        ComDayCqWcmFoundationFormsImplFormChooserServletInfo ComDayCqWcmFoundationFormsImplFormChooserServlet(NancyContext context, bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, string serviceName, string slingServletResourceTypes, string slingServletSelectors, List<string> slingServletMethods, bool? formsFormchooserservletAdvansesearchRequire);

        /// <summary>
        /// 
        /// </summary>
        /// <param name="context">Context of request</param>
        /// <param name="post"> (optional)</param>
        /// <param name="apply"> (optional)</param>
        /// <param name="delete"> (optional)</param>
        /// <param name="action"> (optional)</param>
        /// <param name="location"> (optional)</param>
        /// <param name="propertylist"> (optional)</param>
        /// <param name="formsFormparagraphpostprocessorEnabled"> (optional)</param>
        /// <param name="formsFormparagraphpostprocessorFormresourcetypes"> (optional)</param>
        /// <returns>ComDayCqWcmFoundationFormsImplFormParagraphPostProcessorInfo</returns>
        ComDayCqWcmFoundationFormsImplFormParagraphPostProcessorInfo ComDayCqWcmFoundationFormsImplFormParagraphPostProcessor(NancyContext context, bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, bool? formsFormparagraphpostprocessorEnabled, List<string> formsFormparagraphpostprocessorFormresourcetypes);

        /// <summary>
        /// 
        /// </summary>
        /// <param name="context">Context of request</param>
        /// <param name="post"> (optional)</param>
        /// <param name="apply"> (optional)</param>
        /// <param name="delete"> (optional)</param>
        /// <param name="action"> (optional)</param>
        /// <param name="location"> (optional)</param>
        /// <param name="propertylist"> (optional)</param>
        /// <param name="nameWhitelist"> (optional)</param>
        /// <param name="allowExpressions"> (optional)</param>
        /// <returns>ComDayCqWcmFoundationFormsImplFormsHandlingServletInfo</returns>
        ComDayCqWcmFoundationFormsImplFormsHandlingServletInfo ComDayCqWcmFoundationFormsImplFormsHandlingServlet(NancyContext context, bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, string nameWhitelist, bool? allowExpressions);

        /// <summary>
        /// 
        /// </summary>
        /// <param name="context">Context of request</param>
        /// <param name="post"> (optional)</param>
        /// <param name="apply"> (optional)</param>
        /// <param name="delete"> (optional)</param>
        /// <param name="action"> (optional)</param>
        /// <param name="location"> (optional)</param>
        /// <param name="propertylist"> (optional)</param>
        /// <param name="slingServletResourceTypes"> (optional)</param>
        /// <param name="slingServletSelectors"> (optional)</param>
        /// <param name="resourceWhitelist"> (optional)</param>
        /// <param name="resourceBlacklist"> (optional)</param>
        /// <returns>ComDayCqWcmFoundationFormsImplMailServletInfo</returns>
        ComDayCqWcmFoundationFormsImplMailServletInfo ComDayCqWcmFoundationFormsImplMailServlet(NancyContext context, bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, string slingServletResourceTypes, string slingServletSelectors, List<string> resourceWhitelist, string resourceBlacklist);

        /// <summary>
        /// 
        /// </summary>
        /// <param name="context">Context of request</param>
        /// <param name="post"> (optional)</param>
        /// <param name="apply"> (optional)</param>
        /// <param name="delete"> (optional)</param>
        /// <param name="action"> (optional)</param>
        /// <param name="location"> (optional)</param>
        /// <param name="propertylist"> (optional)</param>
        /// <param name="adaptSupportedWidths"> (optional)</param>
        /// <returns>ComDayCqWcmFoundationImplAdaptiveImageComponentServletInfo</returns>
        ComDayCqWcmFoundationImplAdaptiveImageComponentServletInfo ComDayCqWcmFoundationImplAdaptiveImageComponentServlet(NancyContext context, bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, List<string> adaptSupportedWidths);

        /// <summary>
        /// 
        /// </summary>
        /// <param name="context">Context of request</param>
        /// <param name="post"> (optional)</param>
        /// <param name="apply"> (optional)</param>
        /// <param name="delete"> (optional)</param>
        /// <param name="action"> (optional)</param>
        /// <param name="location"> (optional)</param>
        /// <param name="propertylist"> (optional)</param>
        /// <param name="path"> (optional)</param>
        /// <param name="authHttpNologin"> (optional)</param>
        /// <param name="authHttpRealm"> (optional)</param>
        /// <param name="authDefaultLoginpage"> (optional)</param>
        /// <param name="authCredForm"> (optional)</param>
        /// <param name="authCredUtf8"> (optional)</param>
        /// <returns>ComDayCqWcmFoundationImplHTTPAuthHandlerInfo</returns>
        ComDayCqWcmFoundationImplHTTPAuthHandlerInfo ComDayCqWcmFoundationImplHTTPAuthHandler(NancyContext context, bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, string path, bool? authHttpNologin, string authHttpRealm, string authDefaultLoginpage, List<string> authCredForm, List<string> authCredUtf8);

        /// <summary>
        /// 
        /// </summary>
        /// <param name="context">Context of request</param>
        /// <param name="post"> (optional)</param>
        /// <param name="apply"> (optional)</param>
        /// <param name="delete"> (optional)</param>
        /// <param name="action"> (optional)</param>
        /// <param name="location"> (optional)</param>
        /// <param name="propertylist"> (optional)</param>
        /// <param name="slingAuthRequirements"> (optional)</param>
        /// <returns>ComDayCqWcmFoundationImplPageImpressionsTrackerInfo</returns>
        ComDayCqWcmFoundationImplPageImpressionsTrackerInfo ComDayCqWcmFoundationImplPageImpressionsTracker(NancyContext context, bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, string slingAuthRequirements);

        /// <summary>
        /// 
        /// </summary>
        /// <param name="context">Context of request</param>
        /// <param name="post"> (optional)</param>
        /// <param name="apply"> (optional)</param>
        /// <param name="delete"> (optional)</param>
        /// <param name="action"> (optional)</param>
        /// <param name="location"> (optional)</param>
        /// <param name="propertylist"> (optional)</param>
        /// <param name="excludedResourceTypes"> (optional)</param>
        /// <returns>ComDayCqWcmFoundationImplPageRedirectServletInfo</returns>
        ComDayCqWcmFoundationImplPageRedirectServletInfo ComDayCqWcmFoundationImplPageRedirectServlet(NancyContext context, bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, List<string> excludedResourceTypes);

        /// <summary>
        /// 
        /// </summary>
        /// <param name="context">Context of request</param>
        /// <param name="post"> (optional)</param>
        /// <param name="apply"> (optional)</param>
        /// <param name="delete"> (optional)</param>
        /// <param name="action"> (optional)</param>
        /// <param name="location"> (optional)</param>
        /// <param name="propertylist"> (optional)</param>
        /// <param name="defaultAttachmentTypeBlacklist"> (optional)</param>
        /// <param name="baselineAttachmentTypeBlacklist"> (optional)</param>
        /// <returns>ComDayCqWcmFoundationSecurityImplDefaultAttachmentTypeBlacklistInfo</returns>
        ComDayCqWcmFoundationSecurityImplDefaultAttachmentTypeBlacklistInfo ComDayCqWcmFoundationSecurityImplDefaultAttachmentTypeBlacklist(NancyContext context, bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, List<string> defaultAttachmentTypeBlacklist, List<string> baselineAttachmentTypeBlacklist);

        /// <summary>
        /// 
        /// </summary>
        /// <param name="context">Context of request</param>
        /// <param name="post"> (optional)</param>
        /// <param name="apply"> (optional)</param>
        /// <param name="delete"> (optional)</param>
        /// <param name="action"> (optional)</param>
        /// <param name="location"> (optional)</param>
        /// <param name="propertylist"> (optional)</param>
        /// <param name="parameterWhitelist"> (optional)</param>
        /// <param name="parameterWhitelistPrefixes"> (optional)</param>
        /// <param name="binaryParameterWhitelist"> (optional)</param>
        /// <param name="modifierWhitelist"> (optional)</param>
        /// <param name="operationWhitelist"> (optional)</param>
        /// <param name="operationWhitelistPrefixes"> (optional)</param>
        /// <param name="typehintWhitelist"> (optional)</param>
        /// <param name="resourcetypeWhitelist"> (optional)</param>
        /// <returns>ComDayCqWcmFoundationSecurityImplSaferSlingPostValidatorImplInfo</returns>
        ComDayCqWcmFoundationSecurityImplSaferSlingPostValidatorImplInfo ComDayCqWcmFoundationSecurityImplSaferSlingPostValidatorImpl(NancyContext context, bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, List<string> parameterWhitelist, List<string> parameterWhitelistPrefixes, List<string> binaryParameterWhitelist, List<string> modifierWhitelist, List<string> operationWhitelist, List<string> operationWhitelistPrefixes, List<string> typehintWhitelist, List<string> resourcetypeWhitelist);

        /// <summary>
        /// 
        /// </summary>
        /// <param name="context">Context of request</param>
        /// <param name="post"> (optional)</param>
        /// <param name="apply"> (optional)</param>
        /// <param name="delete"> (optional)</param>
        /// <param name="action"> (optional)</param>
        /// <param name="location"> (optional)</param>
        /// <param name="propertylist"> (optional)</param>
        /// <param name="deviceInfoTransformerEnabled"> (optional)</param>
        /// <param name="deviceInfoTransformerCssStyle"> (optional)</param>
        /// <returns>ComDayCqWcmMobileCoreImplDeviceDeviceInfoTransformerFactoryInfo</returns>
        ComDayCqWcmMobileCoreImplDeviceDeviceInfoTransformerFactoryInfo ComDayCqWcmMobileCoreImplDeviceDeviceInfoTransformerFactory(NancyContext context, bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, bool? deviceInfoTransformerEnabled, string deviceInfoTransformerCssStyle);

        /// <summary>
        /// 
        /// </summary>
        /// <param name="context">Context of request</param>
        /// <param name="post"> (optional)</param>
        /// <param name="apply"> (optional)</param>
        /// <param name="delete"> (optional)</param>
        /// <param name="action"> (optional)</param>
        /// <param name="location"> (optional)</param>
        /// <param name="propertylist"> (optional)</param>
        /// <param name="redirectEnabled"> (optional)</param>
        /// <param name="redirectStatsEnabled"> (optional)</param>
        /// <param name="redirectExtensions"> (optional)</param>
        /// <param name="redirectPaths"> (optional)</param>
        /// <returns>ComDayCqWcmMobileCoreImplRedirectRedirectFilterInfo</returns>
        ComDayCqWcmMobileCoreImplRedirectRedirectFilterInfo ComDayCqWcmMobileCoreImplRedirectRedirectFilter(NancyContext context, bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, bool? redirectEnabled, bool? redirectStatsEnabled, List<string> redirectExtensions, List<string> redirectPaths);

        /// <summary>
        /// 
        /// </summary>
        /// <param name="context">Context of request</param>
        /// <param name="post"> (optional)</param>
        /// <param name="apply"> (optional)</param>
        /// <param name="delete"> (optional)</param>
        /// <param name="action"> (optional)</param>
        /// <param name="location"> (optional)</param>
        /// <param name="propertylist"> (optional)</param>
        /// <param name="cqWcmMsmActionExcludednodetypes"> (optional)</param>
        /// <param name="cqWcmMsmActionExcludedparagraphitems"> (optional)</param>
        /// <param name="cqWcmMsmActionExcludedprops"> (optional)</param>
        /// <param name="contentcopyactionOrderStyle"> (optional)</param>
        /// <returns>ComDayCqWcmMsmImplActionsContentCopyActionFactoryInfo</returns>
        ComDayCqWcmMsmImplActionsContentCopyActionFactoryInfo ComDayCqWcmMsmImplActionsContentCopyActionFactory(NancyContext context, bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, List<string> cqWcmMsmActionExcludednodetypes, List<string> cqWcmMsmActionExcludedparagraphitems, List<string> cqWcmMsmActionExcludedprops, string contentcopyactionOrderStyle);

        /// <summary>
        /// 
        /// </summary>
        /// <param name="context">Context of request</param>
        /// <param name="post"> (optional)</param>
        /// <param name="apply"> (optional)</param>
        /// <param name="delete"> (optional)</param>
        /// <param name="action"> (optional)</param>
        /// <param name="location"> (optional)</param>
        /// <param name="propertylist"> (optional)</param>
        /// <param name="cqWcmMsmActionExcludednodetypes"> (optional)</param>
        /// <param name="cqWcmMsmActionExcludedparagraphitems"> (optional)</param>
        /// <param name="cqWcmMsmActionExcludedprops"> (optional)</param>
        /// <returns>ComDayCqWcmMsmImplActionsContentDeleteActionFactoryInfo</returns>
        ComDayCqWcmMsmImplActionsContentDeleteActionFactoryInfo ComDayCqWcmMsmImplActionsContentDeleteActionFactory(NancyContext context, bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, List<string> cqWcmMsmActionExcludednodetypes, List<string> cqWcmMsmActionExcludedparagraphitems, List<string> cqWcmMsmActionExcludedprops);

        /// <summary>
        /// 
        /// </summary>
        /// <param name="context">Context of request</param>
        /// <param name="post"> (optional)</param>
        /// <param name="apply"> (optional)</param>
        /// <param name="delete"> (optional)</param>
        /// <param name="action"> (optional)</param>
        /// <param name="location"> (optional)</param>
        /// <param name="propertylist"> (optional)</param>
        /// <param name="cqWcmMsmActionExcludednodetypes"> (optional)</param>
        /// <param name="cqWcmMsmActionExcludedparagraphitems"> (optional)</param>
        /// <param name="cqWcmMsmActionExcludedprops"> (optional)</param>
        /// <param name="cqWcmMsmActionIgnoredMixin"> (optional)</param>
        /// <returns>ComDayCqWcmMsmImplActionsContentUpdateActionFactoryInfo</returns>
        ComDayCqWcmMsmImplActionsContentUpdateActionFactoryInfo ComDayCqWcmMsmImplActionsContentUpdateActionFactory(NancyContext context, bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, List<string> cqWcmMsmActionExcludednodetypes, List<string> cqWcmMsmActionExcludedparagraphitems, List<string> cqWcmMsmActionExcludedprops, List<string> cqWcmMsmActionIgnoredMixin);

        /// <summary>
        /// 
        /// </summary>
        /// <param name="context">Context of request</param>
        /// <param name="post"> (optional)</param>
        /// <param name="apply"> (optional)</param>
        /// <param name="delete"> (optional)</param>
        /// <param name="action"> (optional)</param>
        /// <param name="location"> (optional)</param>
        /// <param name="propertylist"> (optional)</param>
        /// <param name="cqWcmMsmActionExcludednodetypes"> (optional)</param>
        /// <param name="cqWcmMsmActionExcludedparagraphitems"> (optional)</param>
        /// <param name="cqWcmMsmActionExcludedprops"> (optional)</param>
        /// <returns>ComDayCqWcmMsmImplActionsOrderChildrenActionFactoryInfo</returns>
        ComDayCqWcmMsmImplActionsOrderChildrenActionFactoryInfo ComDayCqWcmMsmImplActionsOrderChildrenActionFactory(NancyContext context, bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, List<string> cqWcmMsmActionExcludednodetypes, List<string> cqWcmMsmActionExcludedparagraphitems, List<string> cqWcmMsmActionExcludedprops);

        /// <summary>
        /// 
        /// </summary>
        /// <param name="context">Context of request</param>
        /// <param name="post"> (optional)</param>
        /// <param name="apply"> (optional)</param>
        /// <param name="delete"> (optional)</param>
        /// <param name="action"> (optional)</param>
        /// <param name="location"> (optional)</param>
        /// <param name="propertylist"> (optional)</param>
        /// <param name="cqWcmMsmActionExcludednodetypes"> (optional)</param>
        /// <param name="cqWcmMsmActionExcludedparagraphitems"> (optional)</param>
        /// <param name="cqWcmMsmActionExcludedprops"> (optional)</param>
        /// <param name="cqWcmMsmImplActionsPagemovePropReferenceUpdate"> (optional)</param>
        /// <returns>ComDayCqWcmMsmImplActionsPageMoveActionFactoryInfo</returns>
        ComDayCqWcmMsmImplActionsPageMoveActionFactoryInfo ComDayCqWcmMsmImplActionsPageMoveActionFactory(NancyContext context, bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, List<string> cqWcmMsmActionExcludednodetypes, List<string> cqWcmMsmActionExcludedparagraphitems, List<string> cqWcmMsmActionExcludedprops, bool? cqWcmMsmImplActionsPagemovePropReferenceUpdate);

        /// <summary>
        /// 
        /// </summary>
        /// <param name="context">Context of request</param>
        /// <param name="post"> (optional)</param>
        /// <param name="apply"> (optional)</param>
        /// <param name="delete"> (optional)</param>
        /// <param name="action"> (optional)</param>
        /// <param name="location"> (optional)</param>
        /// <param name="propertylist"> (optional)</param>
        /// <param name="cqWcmMsmActionExcludednodetypes"> (optional)</param>
        /// <param name="cqWcmMsmActionExcludedparagraphitems"> (optional)</param>
        /// <param name="cqWcmMsmActionExcludedprops"> (optional)</param>
        /// <param name="cqWcmMsmImplActionReferencesupdatePropUpdateNested"> (optional)</param>
        /// <returns>ComDayCqWcmMsmImplActionsReferencesUpdateActionFactoryInfo</returns>
        ComDayCqWcmMsmImplActionsReferencesUpdateActionFactoryInfo ComDayCqWcmMsmImplActionsReferencesUpdateActionFactory(NancyContext context, bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, List<string> cqWcmMsmActionExcludednodetypes, List<string> cqWcmMsmActionExcludedparagraphitems, List<string> cqWcmMsmActionExcludedprops, bool? cqWcmMsmImplActionReferencesupdatePropUpdateNested);

        /// <summary>
        /// 
        /// </summary>
        /// <param name="context">Context of request</param>
        /// <param name="post"> (optional)</param>
        /// <param name="apply"> (optional)</param>
        /// <param name="delete"> (optional)</param>
        /// <param name="action"> (optional)</param>
        /// <param name="location"> (optional)</param>
        /// <param name="propertylist"> (optional)</param>
        /// <param name="cqWcmMsmActionExcludednodetypes"> (optional)</param>
        /// <param name="cqWcmMsmActionExcludedparagraphitems"> (optional)</param>
        /// <param name="cqWcmMsmActionExcludedprops"> (optional)</param>
        /// <returns>ComDayCqWcmMsmImplActionsVersionCopyActionFactoryInfo</returns>
        ComDayCqWcmMsmImplActionsVersionCopyActionFactoryInfo ComDayCqWcmMsmImplActionsVersionCopyActionFactory(NancyContext context, bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, List<string> cqWcmMsmActionExcludednodetypes, List<string> cqWcmMsmActionExcludedparagraphitems, List<string> cqWcmMsmActionExcludedprops);

        /// <summary>
        /// 
        /// </summary>
        /// <param name="context">Context of request</param>
        /// <param name="post"> (optional)</param>
        /// <param name="apply"> (optional)</param>
        /// <param name="delete"> (optional)</param>
        /// <param name="action"> (optional)</param>
        /// <param name="location"> (optional)</param>
        /// <param name="propertylist"> (optional)</param>
        /// <param name="liverelationshipmgrRelationsconfigDefault"> (optional)</param>
        /// <returns>ComDayCqWcmMsmImplLiveRelationshipManagerImplInfo</returns>
        ComDayCqWcmMsmImplLiveRelationshipManagerImplInfo ComDayCqWcmMsmImplLiveRelationshipManagerImpl(NancyContext context, bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, string liverelationshipmgrRelationsconfigDefault);

        /// <summary>
        /// 
        /// </summary>
        /// <param name="context">Context of request</param>
        /// <param name="post"> (optional)</param>
        /// <param name="apply"> (optional)</param>
        /// <param name="delete"> (optional)</param>
        /// <param name="action"> (optional)</param>
        /// <param name="location"> (optional)</param>
        /// <param name="propertylist"> (optional)</param>
        /// <param name="eventFilter"> (optional)</param>
        /// <param name="rolloutmgrExcludedpropsDefault"> (optional)</param>
        /// <param name="rolloutmgrExcludedparagraphpropsDefault"> (optional)</param>
        /// <param name="rolloutmgrExcludednodetypesDefault"> (optional)</param>
        /// <param name="rolloutmgrThreadpoolMaxsize"> (optional)</param>
        /// <param name="rolloutmgrThreadpoolMaxshutdowntime"> (optional)</param>
        /// <param name="rolloutmgrThreadpoolPriority"> (optional)</param>
        /// <param name="rolloutmgrCommitSize"> (optional)</param>
        /// <param name="rolloutmgrConflicthandlingEnabled"> (optional)</param>
        /// <returns>ComDayCqWcmMsmImplRolloutManagerImplInfo</returns>
        ComDayCqWcmMsmImplRolloutManagerImplInfo ComDayCqWcmMsmImplRolloutManagerImpl(NancyContext context, bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, string eventFilter, List<string> rolloutmgrExcludedpropsDefault, List<string> rolloutmgrExcludedparagraphpropsDefault, List<string> rolloutmgrExcludednodetypesDefault, int? rolloutmgrThreadpoolMaxsize, int? rolloutmgrThreadpoolMaxshutdowntime, string rolloutmgrThreadpoolPriority, int? rolloutmgrCommitSize, bool? rolloutmgrConflicthandlingEnabled);

        /// <summary>
        /// 
        /// </summary>
        /// <param name="context">Context of request</param>
        /// <param name="post"> (optional)</param>
        /// <param name="apply"> (optional)</param>
        /// <param name="delete"> (optional)</param>
        /// <param name="action"> (optional)</param>
        /// <param name="location"> (optional)</param>
        /// <param name="propertylist"> (optional)</param>
        /// <param name="auditlogservletDefaultEventsCount"> (optional)</param>
        /// <param name="auditlogservletDefaultPath"> (optional)</param>
        /// <returns>ComDayCqWcmMsmImplServletsAuditLogServletInfo</returns>
        ComDayCqWcmMsmImplServletsAuditLogServletInfo ComDayCqWcmMsmImplServletsAuditLogServlet(NancyContext context, bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, int? auditlogservletDefaultEventsCount, string auditlogservletDefaultPath);

        /// <summary>
        /// 
        /// </summary>
        /// <param name="context">Context of request</param>
        /// <param name="post"> (optional)</param>
        /// <param name="apply"> (optional)</param>
        /// <param name="delete"> (optional)</param>
        /// <param name="action"> (optional)</param>
        /// <param name="location"> (optional)</param>
        /// <param name="propertylist"> (optional)</param>
        /// <param name="emailFrom"> (optional)</param>
        /// <returns>ComDayCqWcmNotificationEmailImplEmailChannelInfo</returns>
        ComDayCqWcmNotificationEmailImplEmailChannelInfo ComDayCqWcmNotificationEmailImplEmailChannel(NancyContext context, bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, string emailFrom);

        /// <summary>
        /// 
        /// </summary>
        /// <param name="context">Context of request</param>
        /// <param name="post"> (optional)</param>
        /// <param name="apply"> (optional)</param>
        /// <param name="delete"> (optional)</param>
        /// <param name="action"> (optional)</param>
        /// <param name="location"> (optional)</param>
        /// <param name="propertylist"> (optional)</param>
        /// <param name="eventTopics"> (optional)</param>
        /// <returns>ComDayCqWcmNotificationImplNotificationManagerImplInfo</returns>
        ComDayCqWcmNotificationImplNotificationManagerImplInfo ComDayCqWcmNotificationImplNotificationManagerImpl(NancyContext context, bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, List<string> eventTopics);

        /// <summary>
        /// 
        /// </summary>
        /// <param name="context">Context of request</param>
        /// <param name="post"> (optional)</param>
        /// <param name="apply"> (optional)</param>
        /// <param name="delete"> (optional)</param>
        /// <param name="action"> (optional)</param>
        /// <param name="location"> (optional)</param>
        /// <param name="propertylist"> (optional)</param>
        /// <param name="comDayCqWcmScriptingBvpScriptEngines"> (optional)</param>
        /// <returns>ComDayCqWcmScriptingImplBVPManagerInfo</returns>
        ComDayCqWcmScriptingImplBVPManagerInfo ComDayCqWcmScriptingImplBVPManager(NancyContext context, bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, List<string> comDayCqWcmScriptingBvpScriptEngines);

        /// <summary>
        /// 
        /// </summary>
        /// <param name="context">Context of request</param>
        /// <param name="post"> (optional)</param>
        /// <param name="apply"> (optional)</param>
        /// <param name="delete"> (optional)</param>
        /// <param name="action"> (optional)</param>
        /// <param name="location"> (optional)</param>
        /// <param name="propertylist"> (optional)</param>
        /// <param name="cqWcmUndoEnabled"> (optional)</param>
        /// <param name="cqWcmUndoPath"> (optional)</param>
        /// <param name="cqWcmUndoValidity"> (optional)</param>
        /// <param name="cqWcmUndoSteps"> (optional)</param>
        /// <param name="cqWcmUndoPersistence"> (optional)</param>
        /// <param name="cqWcmUndoPersistenceMode"> (optional)</param>
        /// <param name="cqWcmUndoMarkermode"> (optional)</param>
        /// <param name="cqWcmUndoWhitelist"> (optional)</param>
        /// <param name="cqWcmUndoBlacklist"> (optional)</param>
        /// <returns>ComDayCqWcmUndoUndoConfigInfo</returns>
        ComDayCqWcmUndoUndoConfigInfo ComDayCqWcmUndoUndoConfig(NancyContext context, bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, bool? cqWcmUndoEnabled, string cqWcmUndoPath, int? cqWcmUndoValidity, int? cqWcmUndoSteps, string cqWcmUndoPersistence, bool? cqWcmUndoPersistenceMode, string cqWcmUndoMarkermode, List<string> cqWcmUndoWhitelist, List<string> cqWcmUndoBlacklist);

        /// <summary>
        /// 
        /// </summary>
        /// <param name="context">Context of request</param>
        /// <param name="post"> (optional)</param>
        /// <param name="apply"> (optional)</param>
        /// <param name="delete"> (optional)</param>
        /// <param name="action"> (optional)</param>
        /// <param name="location"> (optional)</param>
        /// <param name="propertylist"> (optional)</param>
        /// <param name="flushAgents"> (optional)</param>
        /// <returns>ComDayCqWcmWebservicesupportImplReplicationEventListenerInfo</returns>
        ComDayCqWcmWebservicesupportImplReplicationEventListenerInfo ComDayCqWcmWebservicesupportImplReplicationEventListener(NancyContext context, bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, List<string> flushAgents);

        /// <summary>
        /// 
        /// </summary>
        /// <param name="context">Context of request</param>
        /// <param name="post"> (optional)</param>
        /// <param name="apply"> (optional)</param>
        /// <param name="delete"> (optional)</param>
        /// <param name="action"> (optional)</param>
        /// <param name="location"> (optional)</param>
        /// <param name="propertylist"> (optional)</param>
        /// <param name="eventFilter"> (optional)</param>
        /// <param name="minThreadPoolSize"> (optional)</param>
        /// <param name="maxThreadPoolSize"> (optional)</param>
        /// <param name="cqWcmWorkflowTerminateOnActivate"> (optional)</param>
        /// <param name="cqWcmWorklfowTerminateExclusionList"> (optional)</param>
        /// <returns>ComDayCqWcmWorkflowImplWcmWorkflowServiceImplInfo</returns>
        ComDayCqWcmWorkflowImplWcmWorkflowServiceImplInfo ComDayCqWcmWorkflowImplWcmWorkflowServiceImpl(NancyContext context, bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, string eventFilter, int? minThreadPoolSize, int? maxThreadPoolSize, bool? cqWcmWorkflowTerminateOnActivate, List<string> cqWcmWorklfowTerminateExclusionList);

        /// <summary>
        /// 
        /// </summary>
        /// <param name="context">Context of request</param>
        /// <param name="post"> (optional)</param>
        /// <param name="apply"> (optional)</param>
        /// <param name="delete"> (optional)</param>
        /// <param name="action"> (optional)</param>
        /// <param name="location"> (optional)</param>
        /// <param name="propertylist"> (optional)</param>
        /// <param name="workflowpackageinfoproviderFilter"> (optional)</param>
        /// <param name="workflowpackageinfoproviderFilterRootpath"> (optional)</param>
        /// <returns>ComDayCqWcmWorkflowImplWorkflowPackageInfoProviderInfo</returns>
        ComDayCqWcmWorkflowImplWorkflowPackageInfoProviderInfo ComDayCqWcmWorkflowImplWorkflowPackageInfoProvider(NancyContext context, bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, List<string> workflowpackageinfoproviderFilter, string workflowpackageinfoproviderFilterRootpath);

        /// <summary>
        /// 
        /// </summary>
        /// <param name="context">Context of request</param>
        /// <param name="post"> (optional)</param>
        /// <param name="apply"> (optional)</param>
        /// <param name="delete"> (optional)</param>
        /// <param name="action"> (optional)</param>
        /// <param name="location"> (optional)</param>
        /// <param name="propertylist"> (optional)</param>
        /// <param name="htmllibmanagerClientmanager"> (optional)</param>
        /// <param name="htmllibmanagerDebug"> (optional)</param>
        /// <param name="htmllibmanagerDebugConsole"> (optional)</param>
        /// <param name="htmllibmanagerDebugInitJs"> (optional)</param>
        /// <param name="htmllibmanagerDefaultthemename"> (optional)</param>
        /// <param name="htmllibmanagerDefaultuserthemename"> (optional)</param>
        /// <param name="htmllibmanagerFirebuglitePath"> (optional)</param>
        /// <param name="htmllibmanagerForceCQUrlInfo"> (optional)</param>
        /// <param name="htmllibmanagerGzip"> (optional)</param>
        /// <param name="htmllibmanagerMaxage"> (optional)</param>
        /// <param name="htmllibmanagerMaxDataUriSize"> (optional)</param>
        /// <param name="htmllibmanagerMinify"> (optional)</param>
        /// <param name="htmllibmanagerPathList"> (optional)</param>
        /// <param name="htmllibmanagerTiming"> (optional)</param>
        /// <returns>ComDayCqWidgetImplHtmlLibraryManagerImplInfo</returns>
        ComDayCqWidgetImplHtmlLibraryManagerImplInfo ComDayCqWidgetImplHtmlLibraryManagerImpl(NancyContext context, bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, string htmllibmanagerClientmanager, bool? htmllibmanagerDebug, bool? htmllibmanagerDebugConsole, string htmllibmanagerDebugInitJs, string htmllibmanagerDefaultthemename, string htmllibmanagerDefaultuserthemename, string htmllibmanagerFirebuglitePath, bool? htmllibmanagerForceCQUrlInfo, bool? htmllibmanagerGzip, int? htmllibmanagerMaxage, int? htmllibmanagerMaxDataUriSize, bool? htmllibmanagerMinify, List<string> htmllibmanagerPathList, bool? htmllibmanagerTiming);

        /// <summary>
        /// 
        /// </summary>
        /// <param name="context">Context of request</param>
        /// <param name="post"> (optional)</param>
        /// <param name="apply"> (optional)</param>
        /// <param name="delete"> (optional)</param>
        /// <param name="action"> (optional)</param>
        /// <param name="location"> (optional)</param>
        /// <param name="propertylist"> (optional)</param>
        /// <param name="extendableWidgets"> (optional)</param>
        /// <param name="widgetextensionproviderDebug"> (optional)</param>
        /// <returns>ComDayCqWidgetImplWidgetExtensionProviderImplInfo</returns>
        ComDayCqWidgetImplWidgetExtensionProviderImplInfo ComDayCqWidgetImplWidgetExtensionProviderImpl(NancyContext context, bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, List<string> extendableWidgets, bool? widgetextensionproviderDebug);

        /// <summary>
        /// 
        /// </summary>
        /// <param name="context">Context of request</param>
        /// <param name="post"> (optional)</param>
        /// <param name="apply"> (optional)</param>
        /// <param name="delete"> (optional)</param>
        /// <param name="action"> (optional)</param>
        /// <param name="location"> (optional)</param>
        /// <param name="propertylist"> (optional)</param>
        /// <param name="fromAddress"> (optional)</param>
        /// <param name="hostPrefix"> (optional)</param>
        /// <param name="notifyOnabort"> (optional)</param>
        /// <param name="notifyOncomplete"> (optional)</param>
        /// <param name="notifyOncontainercomplete"> (optional)</param>
        /// <param name="notifyUseronly"> (optional)</param>
        /// <returns>ComDayCqWorkflowImplEmailEMailNotificationServiceInfo</returns>
        ComDayCqWorkflowImplEmailEMailNotificationServiceInfo ComDayCqWorkflowImplEmailEMailNotificationService(NancyContext context, bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, string fromAddress, string hostPrefix, bool? notifyOnabort, bool? notifyOncomplete, bool? notifyOncontainercomplete, bool? notifyUseronly);

        /// <summary>
        /// 
        /// </summary>
        /// <param name="context">Context of request</param>
        /// <param name="post"> (optional)</param>
        /// <param name="apply"> (optional)</param>
        /// <param name="delete"> (optional)</param>
        /// <param name="action"> (optional)</param>
        /// <param name="location"> (optional)</param>
        /// <param name="propertylist"> (optional)</param>
        /// <param name="notifyOnupdate"> (optional)</param>
        /// <param name="notifyOncomplete"> (optional)</param>
        /// <returns>ComDayCqWorkflowImplEmailTaskEMailNotificationServiceInfo</returns>
        ComDayCqWorkflowImplEmailTaskEMailNotificationServiceInfo ComDayCqWorkflowImplEmailTaskEMailNotificationService(NancyContext context, bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, bool? notifyOnupdate, bool? notifyOncomplete);

        /// <summary>
        /// 
        /// </summary>
        /// <param name="context">Context of request</param>
        /// <param name="post"> (optional)</param>
        /// <param name="apply"> (optional)</param>
        /// <param name="delete"> (optional)</param>
        /// <param name="action"> (optional)</param>
        /// <param name="location"> (optional)</param>
        /// <param name="propertylist"> (optional)</param>
        /// <param name="path"> (optional)</param>
        /// <param name="tokenRequiredAttr"> (optional)</param>
        /// <param name="tokenAlternateUrl"> (optional)</param>
        /// <param name="tokenEncapsulated"> (optional)</param>
        /// <param name="skipTokenRefresh"> (optional)</param>
        /// <returns>ComDayCrxSecurityTokenImplImplTokenAuthenticationHandlerInfo</returns>
        ComDayCrxSecurityTokenImplImplTokenAuthenticationHandlerInfo ComDayCrxSecurityTokenImplImplTokenAuthenticationHandler(NancyContext context, bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, string path, string tokenRequiredAttr, string tokenAlternateUrl, bool? tokenEncapsulated, List<string> skipTokenRefresh);

        /// <summary>
        /// 
        /// </summary>
        /// <param name="context">Context of request</param>
        /// <param name="post"> (optional)</param>
        /// <param name="apply"> (optional)</param>
        /// <param name="delete"> (optional)</param>
        /// <param name="action"> (optional)</param>
        /// <param name="location"> (optional)</param>
        /// <param name="propertylist"> (optional)</param>
        /// <param name="enableTokenCleanupTask"> (optional)</param>
        /// <param name="schedulerExpression"> (optional)</param>
        /// <param name="batchSize"> (optional)</param>
        /// <returns>ComDayCrxSecurityTokenImplTokenCleanupTaskInfo</returns>
        ComDayCrxSecurityTokenImplTokenCleanupTaskInfo ComDayCrxSecurityTokenImplTokenCleanupTask(NancyContext context, bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, bool? enableTokenCleanupTask, string schedulerExpression, int? batchSize);

        /// <summary>
        /// 
        /// </summary>
        /// <param name="context">Context of request</param>
        /// <param name="post"> (optional)</param>
        /// <param name="apply"> (optional)</param>
        /// <param name="delete"> (optional)</param>
        /// <param name="action"> (optional)</param>
        /// <param name="location"> (optional)</param>
        /// <param name="propertylist"> (optional)</param>
        /// <param name="supportedLocales"> (optional)</param>
        /// <param name="localizableProperties"> (optional)</param>
        /// <returns>GuideLocalizationServiceInfo</returns>
        GuideLocalizationServiceInfo GuideLocalizationService(NancyContext context, bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, List<string> supportedLocales, List<string> localizableProperties);

        /// <summary>
        /// 
        /// </summary>
        /// <param name="context">Context of request</param>
        /// <param name="post"> (optional)</param>
        /// <param name="apply"> (optional)</param>
        /// <param name="delete"> (optional)</param>
        /// <param name="action"> (optional)</param>
        /// <param name="location"> (optional)</param>
        /// <param name="propertylist"> (optional)</param>
        /// <param name="priority"> (optional)</param>
        /// <returns>MessagingUserComponentFactoryInfo</returns>
        MessagingUserComponentFactoryInfo MessagingUserComponentFactory(NancyContext context, bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, int? priority);

        /// <summary>
        /// 
        /// </summary>
        /// <param name="context">Context of request</param>
        /// <param name="post"> (optional)</param>
        /// <param name="apply"> (optional)</param>
        /// <param name="delete"> (optional)</param>
        /// <param name="action"> (optional)</param>
        /// <param name="location"> (optional)</param>
        /// <param name="propertylist"> (optional)</param>
        /// <param name="attributeChangeNotificationEnabled"> (optional)</param>
        /// <returns>OrgApacheAriesJmxFrameworkStateConfigInfo</returns>
        OrgApacheAriesJmxFrameworkStateConfigInfo OrgApacheAriesJmxFrameworkStateConfig(NancyContext context, bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, bool? attributeChangeNotificationEnabled);

        /// <summary>
        /// 
        /// </summary>
        /// <param name="context">Context of request</param>
        /// <param name="post"> (optional)</param>
        /// <param name="apply"> (optional)</param>
        /// <param name="delete"> (optional)</param>
        /// <param name="action"> (optional)</param>
        /// <param name="location"> (optional)</param>
        /// <param name="propertylist"> (optional)</param>
        /// <param name="orgApacheFelixEventadminThreadPoolSize"> (optional)</param>
        /// <param name="orgApacheFelixEventadminAsyncToSyncThreadRatio"> (optional)</param>
        /// <param name="orgApacheFelixEventadminTimeout"> (optional)</param>
        /// <param name="orgApacheFelixEventadminRequireTopic"> (optional)</param>
        /// <param name="orgApacheFelixEventadminIgnoreTimeout"> (optional)</param>
        /// <param name="orgApacheFelixEventadminIgnoreTopic"> (optional)</param>
        /// <returns>OrgApacheFelixEventadminImplEventAdminInfo</returns>
        OrgApacheFelixEventadminImplEventAdminInfo OrgApacheFelixEventadminImplEventAdmin(NancyContext context, bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, int? orgApacheFelixEventadminThreadPoolSize, decimal? orgApacheFelixEventadminAsyncToSyncThreadRatio, int? orgApacheFelixEventadminTimeout, bool? orgApacheFelixEventadminRequireTopic, List<string> orgApacheFelixEventadminIgnoreTimeout, List<string> orgApacheFelixEventadminIgnoreTopic);

        /// <summary>
        /// 
        /// </summary>
        /// <param name="context">Context of request</param>
        /// <param name="post"> (optional)</param>
        /// <param name="apply"> (optional)</param>
        /// <param name="delete"> (optional)</param>
        /// <param name="action"> (optional)</param>
        /// <param name="location"> (optional)</param>
        /// <param name="propertylist"> (optional)</param>
        /// <param name="orgApacheFelixHttpHost"> (optional)</param>
        /// <param name="orgApacheFelixHttpEnable"> (optional)</param>
        /// <param name="orgOsgiServiceHttpPort"> (optional)</param>
        /// <param name="orgApacheFelixHttpTimeout"> (optional)</param>
        /// <param name="orgApacheFelixHttpsEnable"> (optional)</param>
        /// <param name="orgOsgiServiceHttpPortSecure"> (optional)</param>
        /// <param name="orgApacheFelixHttpsKeystore"> (optional)</param>
        /// <param name="orgApacheFelixHttpsKeystorePassword"> (optional)</param>
        /// <param name="orgApacheFelixHttpsKeystoreKeyPassword"> (optional)</param>
        /// <param name="orgApacheFelixHttpsTruststore"> (optional)</param>
        /// <param name="orgApacheFelixHttpsTruststorePassword"> (optional)</param>
        /// <param name="orgApacheFelixHttpsClientcertificate"> (optional)</param>
        /// <param name="orgApacheFelixHttpContextPath"> (optional)</param>
        /// <param name="orgApacheFelixHttpMbeans"> (optional)</param>
        /// <param name="orgApacheFelixHttpSessionTimeout"> (optional)</param>
        /// <param name="orgApacheFelixHttpJettyThreadpoolMax"> (optional)</param>
        /// <param name="orgApacheFelixHttpJettyAcceptors"> (optional)</param>
        /// <param name="orgApacheFelixHttpJettySelectors"> (optional)</param>
        /// <param name="orgApacheFelixHttpJettyHeaderBufferSize"> (optional)</param>
        /// <param name="orgApacheFelixHttpJettyRequestBufferSize"> (optional)</param>
        /// <param name="orgApacheFelixHttpJettyResponseBufferSize"> (optional)</param>
        /// <param name="orgApacheFelixHttpJettyMaxFormSize"> (optional)</param>
        /// <param name="orgApacheFelixHttpPathExclusions"> (optional)</param>
        /// <param name="orgApacheFelixHttpsJettyCiphersuitesExcluded"> (optional)</param>
        /// <param name="orgApacheFelixHttpsJettyCiphersuitesIncluded"> (optional)</param>
        /// <param name="orgApacheFelixHttpJettySendServerHeader"> (optional)</param>
        /// <param name="orgApacheFelixHttpsJettyProtocolsIncluded"> (optional)</param>
        /// <param name="orgApacheFelixHttpsJettyProtocolsExcluded"> (optional)</param>
        /// <param name="orgApacheFelixProxyLoadBalancerConnectionEnable"> (optional)</param>
        /// <param name="orgApacheFelixHttpsJettyRenegotiateAllowed"> (optional)</param>
        /// <param name="orgApacheFelixHttpsJettySessionCookieHttpOnly"> (optional)</param>
        /// <param name="orgApacheFelixHttpsJettySessionCookieSecure"> (optional)</param>
        /// <param name="orgEclipseJettyServletSessionIdPathParameterName"> (optional)</param>
        /// <param name="orgEclipseJettyServletCheckingRemoteSessionIdEncoding"> (optional)</param>
        /// <param name="orgEclipseJettyServletSessionCookie"> (optional)</param>
        /// <param name="orgEclipseJettyServletSessionDomain"> (optional)</param>
        /// <param name="orgEclipseJettyServletSessionPath"> (optional)</param>
        /// <param name="orgEclipseJettyServletMaxAge"> (optional)</param>
        /// <param name="orgApacheFelixHttpName"> (optional)</param>
        /// <param name="orgApacheFelixJettyGziphandlerEnable"> (optional)</param>
        /// <param name="orgApacheFelixJettyGzipMinGzipSize"> (optional)</param>
        /// <param name="orgApacheFelixJettyGzipCompressionLevel"> (optional)</param>
        /// <param name="orgApacheFelixJettyGzipInflateBufferSize"> (optional)</param>
        /// <param name="orgApacheFelixJettyGzipSyncFlush"> (optional)</param>
        /// <param name="orgApacheFelixJettyGzipExcludedUserAgents"> (optional)</param>
        /// <param name="orgApacheFelixJettyGzipIncludedMethods"> (optional)</param>
        /// <param name="orgApacheFelixJettyGzipExcludedMethods"> (optional)</param>
        /// <param name="orgApacheFelixJettyGzipIncludedPaths"> (optional)</param>
        /// <param name="orgApacheFelixJettyGzipExcludedPaths"> (optional)</param>
        /// <param name="orgApacheFelixJettyGzipIncludedMimeTypes"> (optional)</param>
        /// <param name="orgApacheFelixJettyGzipExcludedMimeTypes"> (optional)</param>
        /// <param name="orgApacheFelixHttpSessionInvalidate"> (optional)</param>
        /// <param name="orgApacheFelixHttpSessionUniqueid"> (optional)</param>
        /// <returns>OrgApacheFelixHttpInfo</returns>
        OrgApacheFelixHttpInfo OrgApacheFelixHttp(NancyContext context, bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, string orgApacheFelixHttpHost, bool? orgApacheFelixHttpEnable, int? orgOsgiServiceHttpPort, int? orgApacheFelixHttpTimeout, bool? orgApacheFelixHttpsEnable, int? orgOsgiServiceHttpPortSecure, string orgApacheFelixHttpsKeystore, string orgApacheFelixHttpsKeystorePassword, string orgApacheFelixHttpsKeystoreKeyPassword, string orgApacheFelixHttpsTruststore, string orgApacheFelixHttpsTruststorePassword, string orgApacheFelixHttpsClientcertificate, string orgApacheFelixHttpContextPath, bool? orgApacheFelixHttpMbeans, int? orgApacheFelixHttpSessionTimeout, int? orgApacheFelixHttpJettyThreadpoolMax, int? orgApacheFelixHttpJettyAcceptors, int? orgApacheFelixHttpJettySelectors, int? orgApacheFelixHttpJettyHeaderBufferSize, int? orgApacheFelixHttpJettyRequestBufferSize, int? orgApacheFelixHttpJettyResponseBufferSize, int? orgApacheFelixHttpJettyMaxFormSize, List<string> orgApacheFelixHttpPathExclusions, List<string> orgApacheFelixHttpsJettyCiphersuitesExcluded, List<string> orgApacheFelixHttpsJettyCiphersuitesIncluded, bool? orgApacheFelixHttpJettySendServerHeader, List<string> orgApacheFelixHttpsJettyProtocolsIncluded, List<string> orgApacheFelixHttpsJettyProtocolsExcluded, bool? orgApacheFelixProxyLoadBalancerConnectionEnable, bool? orgApacheFelixHttpsJettyRenegotiateAllowed, bool? orgApacheFelixHttpsJettySessionCookieHttpOnly, bool? orgApacheFelixHttpsJettySessionCookieSecure, string orgEclipseJettyServletSessionIdPathParameterName, bool? orgEclipseJettyServletCheckingRemoteSessionIdEncoding, string orgEclipseJettyServletSessionCookie, string orgEclipseJettyServletSessionDomain, string orgEclipseJettyServletSessionPath, int? orgEclipseJettyServletMaxAge, string orgApacheFelixHttpName, bool? orgApacheFelixJettyGziphandlerEnable, int? orgApacheFelixJettyGzipMinGzipSize, int? orgApacheFelixJettyGzipCompressionLevel, int? orgApacheFelixJettyGzipInflateBufferSize, bool? orgApacheFelixJettyGzipSyncFlush, List<string> orgApacheFelixJettyGzipExcludedUserAgents, List<string> orgApacheFelixJettyGzipIncludedMethods, List<string> orgApacheFelixJettyGzipExcludedMethods, List<string> orgApacheFelixJettyGzipIncludedPaths, List<string> orgApacheFelixJettyGzipExcludedPaths, List<string> orgApacheFelixJettyGzipIncludedMimeTypes, List<string> orgApacheFelixJettyGzipExcludedMimeTypes, bool? orgApacheFelixHttpSessionInvalidate, bool? orgApacheFelixHttpSessionUniqueid);

        /// <summary>
        /// 
        /// </summary>
        /// <param name="context">Context of request</param>
        /// <param name="post"> (optional)</param>
        /// <param name="apply"> (optional)</param>
        /// <param name="delete"> (optional)</param>
        /// <param name="action"> (optional)</param>
        /// <param name="location"> (optional)</param>
        /// <param name="propertylist"> (optional)</param>
        /// <param name="sslForwardHeader"> (optional)</param>
        /// <param name="sslForwardValue"> (optional)</param>
        /// <param name="sslForwardCertHeader"> (optional)</param>
        /// <param name="rewriteAbsoluteUrls"> (optional)</param>
        /// <returns>OrgApacheFelixHttpSslfilterSslFilterInfo</returns>
        OrgApacheFelixHttpSslfilterSslFilterInfo OrgApacheFelixHttpSslfilterSslFilter(NancyContext context, bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, string sslForwardHeader, string sslForwardValue, string sslForwardCertHeader, bool? rewriteAbsoluteUrls);

        /// <summary>
        /// 
        /// </summary>
        /// <param name="context">Context of request</param>
        /// <param name="post"> (optional)</param>
        /// <param name="apply"> (optional)</param>
        /// <param name="delete"> (optional)</param>
        /// <param name="action"> (optional)</param>
        /// <param name="location"> (optional)</param>
        /// <param name="propertylist"> (optional)</param>
        /// <param name="jaasControlFlag"> (optional)</param>
        /// <param name="jaasRanking"> (optional)</param>
        /// <param name="jaasRealmName"> (optional)</param>
        /// <param name="jaasClassname"> (optional)</param>
        /// <param name="jaasOptions"> (optional)</param>
        /// <returns>OrgApacheFelixJaasConfigurationFactoryInfo</returns>
        OrgApacheFelixJaasConfigurationFactoryInfo OrgApacheFelixJaasConfigurationFactory(NancyContext context, bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, string jaasControlFlag, int? jaasRanking, string jaasRealmName, string jaasClassname, List<string> jaasOptions);

        /// <summary>
        /// 
        /// </summary>
        /// <param name="context">Context of request</param>
        /// <param name="post"> (optional)</param>
        /// <param name="apply"> (optional)</param>
        /// <param name="delete"> (optional)</param>
        /// <param name="action"> (optional)</param>
        /// <param name="location"> (optional)</param>
        /// <param name="propertylist"> (optional)</param>
        /// <param name="jaasDefaultRealmName"> (optional)</param>
        /// <param name="jaasConfigProviderName"> (optional)</param>
        /// <param name="jaasGlobalConfigPolicy"> (optional)</param>
        /// <returns>OrgApacheFelixJaasConfigurationSpiInfo</returns>
        OrgApacheFelixJaasConfigurationSpiInfo OrgApacheFelixJaasConfigurationSpi(NancyContext context, bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, string jaasDefaultRealmName, string jaasConfigProviderName, string jaasGlobalConfigPolicy);

        /// <summary>
        /// 
        /// </summary>
        /// <param name="context">Context of request</param>
        /// <param name="post"> (optional)</param>
        /// <param name="apply"> (optional)</param>
        /// <param name="delete"> (optional)</param>
        /// <param name="action"> (optional)</param>
        /// <param name="location"> (optional)</param>
        /// <param name="propertylist"> (optional)</param>
        /// <param name="dsLoglevel"> (optional)</param>
        /// <param name="dsFactoryEnabled"> (optional)</param>
        /// <param name="dsDelayedKeepInstances"> (optional)</param>
        /// <param name="dsLockTimeoutMilliseconds"> (optional)</param>
        /// <param name="dsStopTimeoutMilliseconds"> (optional)</param>
        /// <param name="dsGlobalExtender"> (optional)</param>
        /// <returns>OrgApacheFelixScrScrServiceInfo</returns>
        OrgApacheFelixScrScrServiceInfo OrgApacheFelixScrScrService(NancyContext context, bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, int? dsLoglevel, bool? dsFactoryEnabled, bool? dsDelayedKeepInstances, int? dsLockTimeoutMilliseconds, int? dsStopTimeoutMilliseconds, bool? dsGlobalExtender);

        /// <summary>
        /// 
        /// </summary>
        /// <param name="context">Context of request</param>
        /// <param name="post"> (optional)</param>
        /// <param name="apply"> (optional)</param>
        /// <param name="delete"> (optional)</param>
        /// <param name="action"> (optional)</param>
        /// <param name="location"> (optional)</param>
        /// <param name="propertylist"> (optional)</param>
        /// <param name="componentsList"> (optional)</param>
        /// <param name="type"> (optional)</param>
        /// <returns>OrgApacheFelixSystemreadyImplComponentsCheckInfo</returns>
        OrgApacheFelixSystemreadyImplComponentsCheckInfo OrgApacheFelixSystemreadyImplComponentsCheck(NancyContext context, bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, List<string> componentsList, string type);

        /// <summary>
        /// 
        /// </summary>
        /// <param name="context">Context of request</param>
        /// <param name="post"> (optional)</param>
        /// <param name="apply"> (optional)</param>
        /// <param name="delete"> (optional)</param>
        /// <param name="action"> (optional)</param>
        /// <param name="location"> (optional)</param>
        /// <param name="propertylist"> (optional)</param>
        /// <param name="timeout"> (optional)</param>
        /// <param name="targetStartLevel"> (optional)</param>
        /// <param name="targetStartLevelPropName"> (optional)</param>
        /// <param name="type"> (optional)</param>
        /// <returns>OrgApacheFelixSystemreadyImplFrameworkStartCheckInfo</returns>
        OrgApacheFelixSystemreadyImplFrameworkStartCheckInfo OrgApacheFelixSystemreadyImplFrameworkStartCheck(NancyContext context, bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, int? timeout, int? targetStartLevel, string targetStartLevelPropName, string type);

        /// <summary>
        /// 
        /// </summary>
        /// <param name="context">Context of request</param>
        /// <param name="post"> (optional)</param>
        /// <param name="apply"> (optional)</param>
        /// <param name="delete"> (optional)</param>
        /// <param name="action"> (optional)</param>
        /// <param name="location"> (optional)</param>
        /// <param name="propertylist"> (optional)</param>
        /// <param name="servicesList"> (optional)</param>
        /// <param name="type"> (optional)</param>
        /// <returns>OrgApacheFelixSystemreadyImplServicesCheckInfo</returns>
        OrgApacheFelixSystemreadyImplServicesCheckInfo OrgApacheFelixSystemreadyImplServicesCheck(NancyContext context, bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, List<string> servicesList, string type);

        /// <summary>
        /// 
        /// </summary>
        /// <param name="context">Context of request</param>
        /// <param name="post"> (optional)</param>
        /// <param name="apply"> (optional)</param>
        /// <param name="delete"> (optional)</param>
        /// <param name="action"> (optional)</param>
        /// <param name="location"> (optional)</param>
        /// <param name="propertylist"> (optional)</param>
        /// <param name="osgiHttpWhiteboardServletPattern"> (optional)</param>
        /// <param name="osgiHttpWhiteboardContextSelect"> (optional)</param>
        /// <returns>OrgApacheFelixSystemreadyImplServletSystemAliveServletInfo</returns>
        OrgApacheFelixSystemreadyImplServletSystemAliveServletInfo OrgApacheFelixSystemreadyImplServletSystemAliveServlet(NancyContext context, bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, string osgiHttpWhiteboardServletPattern, string osgiHttpWhiteboardContextSelect);

        /// <summary>
        /// 
        /// </summary>
        /// <param name="context">Context of request</param>
        /// <param name="post"> (optional)</param>
        /// <param name="apply"> (optional)</param>
        /// <param name="delete"> (optional)</param>
        /// <param name="action"> (optional)</param>
        /// <param name="location"> (optional)</param>
        /// <param name="propertylist"> (optional)</param>
        /// <param name="osgiHttpWhiteboardServletPattern"> (optional)</param>
        /// <param name="osgiHttpWhiteboardContextSelect"> (optional)</param>
        /// <returns>OrgApacheFelixSystemreadyImplServletSystemReadyServletInfo</returns>
        OrgApacheFelixSystemreadyImplServletSystemReadyServletInfo OrgApacheFelixSystemreadyImplServletSystemReadyServlet(NancyContext context, bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, string osgiHttpWhiteboardServletPattern, string osgiHttpWhiteboardContextSelect);

        /// <summary>
        /// 
        /// </summary>
        /// <param name="context">Context of request</param>
        /// <param name="post"> (optional)</param>
        /// <param name="apply"> (optional)</param>
        /// <param name="delete"> (optional)</param>
        /// <param name="action"> (optional)</param>
        /// <param name="location"> (optional)</param>
        /// <param name="propertylist"> (optional)</param>
        /// <param name="pollInterval"> (optional)</param>
        /// <returns>OrgApacheFelixSystemreadySystemReadyMonitorInfo</returns>
        OrgApacheFelixSystemreadySystemReadyMonitorInfo OrgApacheFelixSystemreadySystemReadyMonitor(NancyContext context, bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, int? pollInterval);

        /// <summary>
        /// 
        /// </summary>
        /// <param name="context">Context of request</param>
        /// <param name="post"> (optional)</param>
        /// <param name="apply"> (optional)</param>
        /// <param name="delete"> (optional)</param>
        /// <param name="action"> (optional)</param>
        /// <param name="location"> (optional)</param>
        /// <param name="propertylist"> (optional)</param>
        /// <param name="managerRoot"> (optional)</param>
        /// <param name="httpServiceFilter"> (optional)</param>
        /// <param name="defaultRender"> (optional)</param>
        /// <param name="realm"> (optional)</param>
        /// <param name="username"> (optional)</param>
        /// <param name="password"> (optional)</param>
        /// <param name="category"> (optional)</param>
        /// <param name="locale"> (optional)</param>
        /// <param name="loglevel"> (optional)</param>
        /// <param name="plugins"> (optional)</param>
        /// <returns>OrgApacheFelixWebconsoleInternalServletOsgiManagerInfo</returns>
        OrgApacheFelixWebconsoleInternalServletOsgiManagerInfo OrgApacheFelixWebconsoleInternalServletOsgiManager(NancyContext context, bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, string managerRoot, string httpServiceFilter, string defaultRender, string realm, string username, string password, string category, string locale, int? loglevel, string plugins);

        /// <summary>
        /// 
        /// </summary>
        /// <param name="context">Context of request</param>
        /// <param name="post"> (optional)</param>
        /// <param name="apply"> (optional)</param>
        /// <param name="delete"> (optional)</param>
        /// <param name="action"> (optional)</param>
        /// <param name="location"> (optional)</param>
        /// <param name="propertylist"> (optional)</param>
        /// <param name="maxSize"> (optional)</param>
        /// <returns>OrgApacheFelixWebconsolePluginsEventInternalPluginServletInfo</returns>
        OrgApacheFelixWebconsolePluginsEventInternalPluginServletInfo OrgApacheFelixWebconsolePluginsEventInternalPluginServlet(NancyContext context, bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, int? maxSize);

        /// <summary>
        /// 
        /// </summary>
        /// <param name="context">Context of request</param>
        /// <param name="post"> (optional)</param>
        /// <param name="apply"> (optional)</param>
        /// <param name="delete"> (optional)</param>
        /// <param name="action"> (optional)</param>
        /// <param name="location"> (optional)</param>
        /// <param name="propertylist"> (optional)</param>
        /// <param name="felixMemoryusageDumpThreshold"> (optional)</param>
        /// <param name="felixMemoryusageDumpInterval"> (optional)</param>
        /// <param name="felixMemoryusageDumpLocation"> (optional)</param>
        /// <returns>OrgApacheFelixWebconsolePluginsMemoryusageInternalMemoryUsageCoInfo</returns>
        OrgApacheFelixWebconsolePluginsMemoryusageInternalMemoryUsageCoInfo OrgApacheFelixWebconsolePluginsMemoryusageInternalMemoryUsageCo(NancyContext context, bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, int? felixMemoryusageDumpThreshold, int? felixMemoryusageDumpInterval, string felixMemoryusageDumpLocation);

        /// <summary>
        /// 
        /// </summary>
        /// <param name="context">Context of request</param>
        /// <param name="post"> (optional)</param>
        /// <param name="apply"> (optional)</param>
        /// <param name="delete"> (optional)</param>
        /// <param name="action"> (optional)</param>
        /// <param name="location"> (optional)</param>
        /// <param name="propertylist"> (optional)</param>
        /// <param name="proxyEnabled"> (optional)</param>
        /// <param name="proxyHost"> (optional)</param>
        /// <param name="proxyPort"> (optional)</param>
        /// <param name="proxyUser"> (optional)</param>
        /// <param name="proxyPassword"> (optional)</param>
        /// <param name="proxyExceptions"> (optional)</param>
        /// <returns>OrgApacheHttpProxyconfiguratorInfo</returns>
        OrgApacheHttpProxyconfiguratorInfo OrgApacheHttpProxyconfigurator(NancyContext context, bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, bool? proxyEnabled, string proxyHost, int? proxyPort, string proxyUser, string proxyPassword, List<string> proxyExceptions);

        /// <summary>
        /// 
        /// </summary>
        /// <param name="context">Context of request</param>
        /// <param name="post"> (optional)</param>
        /// <param name="apply"> (optional)</param>
        /// <param name="delete"> (optional)</param>
        /// <param name="action"> (optional)</param>
        /// <param name="location"> (optional)</param>
        /// <param name="propertylist"> (optional)</param>
        /// <param name="dir"> (optional)</param>
        /// <returns>OrgApacheJackrabbitOakPluginsBlobDatastoreDataStoreTextProviderInfo</returns>
        OrgApacheJackrabbitOakPluginsBlobDatastoreDataStoreTextProviderInfo OrgApacheJackrabbitOakPluginsBlobDatastoreDataStoreTextProvider(NancyContext context, bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, string dir);

        /// <summary>
        /// 
        /// </summary>
        /// <param name="context">Context of request</param>
        /// <param name="post"> (optional)</param>
        /// <param name="apply"> (optional)</param>
        /// <param name="delete"> (optional)</param>
        /// <param name="action"> (optional)</param>
        /// <param name="location"> (optional)</param>
        /// <param name="propertylist"> (optional)</param>
        /// <param name="path"> (optional)</param>
        /// <returns>OrgApacheJackrabbitOakPluginsBlobDatastoreFileDataStoreInfo</returns>
        OrgApacheJackrabbitOakPluginsBlobDatastoreFileDataStoreInfo OrgApacheJackrabbitOakPluginsBlobDatastoreFileDataStore(NancyContext context, bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, string path);

        /// <summary>
        /// 
        /// </summary>
        /// <param name="context">Context of request</param>
        /// <param name="post"> (optional)</param>
        /// <param name="apply"> (optional)</param>
        /// <param name="delete"> (optional)</param>
        /// <param name="action"> (optional)</param>
        /// <param name="location"> (optional)</param>
        /// <param name="propertylist"> (optional)</param>
        /// <param name="mongouri"> (optional)</param>
        /// <param name="db"> (optional)</param>
        /// <param name="socketKeepAlive"> (optional)</param>
        /// <param name="cache"> (optional)</param>
        /// <param name="nodeCachePercentage"> (optional)</param>
        /// <param name="prevDocCachePercentage"> (optional)</param>
        /// <param name="childrenCachePercentage"> (optional)</param>
        /// <param name="diffCachePercentage"> (optional)</param>
        /// <param name="cacheSegmentCount"> (optional)</param>
        /// <param name="cacheStackMoveDistance"> (optional)</param>
        /// <param name="blobCacheSize"> (optional)</param>
        /// <param name="persistentCache"> (optional)</param>
        /// <param name="journalCache"> (optional)</param>
        /// <param name="customBlobStore"> (optional)</param>
        /// <param name="journalGCInterval"> (optional)</param>
        /// <param name="journalGCMaxAge"> (optional)</param>
        /// <param name="prefetchExternalChanges"> (optional)</param>
        /// <param name="role"> (optional)</param>
        /// <param name="versionGcMaxAgeInSecs"> (optional)</param>
        /// <param name="versionGCExpression"> (optional)</param>
        /// <param name="versionGCTimeLimitInSecs"> (optional)</param>
        /// <param name="blobGcMaxAgeInSecs"> (optional)</param>
        /// <param name="blobTrackSnapshotIntervalInSecs"> (optional)</param>
        /// <param name="repositoryHome"> (optional)</param>
        /// <param name="maxReplicationLagInSecs"> (optional)</param>
        /// <param name="documentStoreType"> (optional)</param>
        /// <param name="bundlingDisabled"> (optional)</param>
        /// <param name="updateLimit"> (optional)</param>
        /// <param name="persistentCacheIncludes"> (optional)</param>
        /// <param name="leaseCheckMode"> (optional)</param>
        /// <returns>OrgApacheJackrabbitOakPluginsDocumentDocumentNodeStoreServiceInfo</returns>
        OrgApacheJackrabbitOakPluginsDocumentDocumentNodeStoreServiceInfo OrgApacheJackrabbitOakPluginsDocumentDocumentNodeStoreService(NancyContext context, bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, string mongouri, string db, bool? socketKeepAlive, int? cache, int? nodeCachePercentage, int? prevDocCachePercentage, int? childrenCachePercentage, int? diffCachePercentage, int? cacheSegmentCount, int? cacheStackMoveDistance, int? blobCacheSize, string persistentCache, string journalCache, bool? customBlobStore, int? journalGCInterval, int? journalGCMaxAge, bool? prefetchExternalChanges, string role, int? versionGcMaxAgeInSecs, string versionGCExpression, int? versionGCTimeLimitInSecs, int? blobGcMaxAgeInSecs, int? blobTrackSnapshotIntervalInSecs, string repositoryHome, int? maxReplicationLagInSecs, string documentStoreType, bool? bundlingDisabled, int? updateLimit, List<string> persistentCacheIncludes, string leaseCheckMode);

        /// <summary>
        /// 
        /// </summary>
        /// <param name="context">Context of request</param>
        /// <param name="post"> (optional)</param>
        /// <param name="apply"> (optional)</param>
        /// <param name="delete"> (optional)</param>
        /// <param name="action"> (optional)</param>
        /// <param name="location"> (optional)</param>
        /// <param name="propertylist"> (optional)</param>
        /// <param name="persistentCacheIncludes"> (optional)</param>
        /// <returns>OrgApacheJackrabbitOakPluginsDocumentDocumentNodeStoreServicePreInfo</returns>
        OrgApacheJackrabbitOakPluginsDocumentDocumentNodeStoreServicePreInfo OrgApacheJackrabbitOakPluginsDocumentDocumentNodeStoreServicePre(NancyContext context, bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, List<string> persistentCacheIncludes);

        /// <summary>
        /// 
        /// </summary>
        /// <param name="context">Context of request</param>
        /// <param name="post"> (optional)</param>
        /// <param name="apply"> (optional)</param>
        /// <param name="delete"> (optional)</param>
        /// <param name="action"> (optional)</param>
        /// <param name="location"> (optional)</param>
        /// <param name="propertylist"> (optional)</param>
        /// <param name="includedPaths"> (optional)</param>
        /// <param name="enableAsyncObserver"> (optional)</param>
        /// <param name="observerQueueSize"> (optional)</param>
        /// <returns>OrgApacheJackrabbitOakPluginsDocumentSecondarySecondaryStoreCacInfo</returns>
        OrgApacheJackrabbitOakPluginsDocumentSecondarySecondaryStoreCacInfo OrgApacheJackrabbitOakPluginsDocumentSecondarySecondaryStoreCac(NancyContext context, bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, List<string> includedPaths, bool? enableAsyncObserver, int? observerQueueSize);

        /// <summary>
        /// 
        /// </summary>
        /// <param name="context">Context of request</param>
        /// <param name="post"> (optional)</param>
        /// <param name="apply"> (optional)</param>
        /// <param name="delete"> (optional)</param>
        /// <param name="action"> (optional)</param>
        /// <param name="location"> (optional)</param>
        /// <param name="propertylist"> (optional)</param>
        /// <param name="asyncConfigs"> (optional)</param>
        /// <param name="leaseTimeOutMinutes"> (optional)</param>
        /// <param name="failingIndexTimeoutSeconds"> (optional)</param>
        /// <param name="errorWarnIntervalSeconds"> (optional)</param>
        /// <returns>OrgApacheJackrabbitOakPluginsIndexAsyncIndexerServiceInfo</returns>
        OrgApacheJackrabbitOakPluginsIndexAsyncIndexerServiceInfo OrgApacheJackrabbitOakPluginsIndexAsyncIndexerService(NancyContext context, bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, List<string> asyncConfigs, int? leaseTimeOutMinutes, int? failingIndexTimeoutSeconds, int? errorWarnIntervalSeconds);

        /// <summary>
        /// 
        /// </summary>
        /// <param name="context">Context of request</param>
        /// <param name="post"> (optional)</param>
        /// <param name="apply"> (optional)</param>
        /// <param name="delete"> (optional)</param>
        /// <param name="action"> (optional)</param>
        /// <param name="location"> (optional)</param>
        /// <param name="propertylist"> (optional)</param>
        /// <param name="disabled"> (optional)</param>
        /// <param name="debug"> (optional)</param>
        /// <param name="localIndexDir"> (optional)</param>
        /// <param name="enableOpenIndexAsync"> (optional)</param>
        /// <param name="threadPoolSize"> (optional)</param>
        /// <param name="prefetchIndexFiles"> (optional)</param>
        /// <param name="extractedTextCacheSizeInMB"> (optional)</param>
        /// <param name="extractedTextCacheExpiryInSecs"> (optional)</param>
        /// <param name="alwaysUsePreExtractedCache"> (optional)</param>
        /// <param name="booleanClauseLimit"> (optional)</param>
        /// <param name="enableHybridIndexing"> (optional)</param>
        /// <param name="hybridQueueSize"> (optional)</param>
        /// <param name="disableStoredIndexDefinition"> (optional)</param>
        /// <param name="deletedBlobsCollectionEnabled"> (optional)</param>
        /// <param name="propIndexCleanerIntervalInSecs"> (optional)</param>
        /// <param name="enableSingleBlobIndexFiles"> (optional)</param>
        /// <returns>OrgApacheJackrabbitOakPluginsIndexLuceneLuceneIndexProviderServInfo</returns>
        OrgApacheJackrabbitOakPluginsIndexLuceneLuceneIndexProviderServInfo OrgApacheJackrabbitOakPluginsIndexLuceneLuceneIndexProviderServ(NancyContext context, bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, bool? disabled, bool? debug, string localIndexDir, bool? enableOpenIndexAsync, int? threadPoolSize, bool? prefetchIndexFiles, int? extractedTextCacheSizeInMB, int? extractedTextCacheExpiryInSecs, bool? alwaysUsePreExtractedCache, int? booleanClauseLimit, bool? enableHybridIndexing, int? hybridQueueSize, bool? disableStoredIndexDefinition, bool? deletedBlobsCollectionEnabled, int? propIndexCleanerIntervalInSecs, bool? enableSingleBlobIndexFiles);

        /// <summary>
        /// 
        /// </summary>
        /// <param name="context">Context of request</param>
        /// <param name="post"> (optional)</param>
        /// <param name="apply"> (optional)</param>
        /// <param name="delete"> (optional)</param>
        /// <param name="action"> (optional)</param>
        /// <param name="location"> (optional)</param>
        /// <param name="propertylist"> (optional)</param>
        /// <param name="solrHomePath"> (optional)</param>
        /// <param name="solrCoreName"> (optional)</param>
        /// <returns>OrgApacheJackrabbitOakPluginsIndexSolrOsgiEmbeddedSolrServerCoInfo</returns>
        OrgApacheJackrabbitOakPluginsIndexSolrOsgiEmbeddedSolrServerCoInfo OrgApacheJackrabbitOakPluginsIndexSolrOsgiEmbeddedSolrServerCo(NancyContext context, bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, string solrHomePath, string solrCoreName);

        /// <summary>
        /// 
        /// </summary>
        /// <param name="context">Context of request</param>
        /// <param name="post"> (optional)</param>
        /// <param name="apply"> (optional)</param>
        /// <param name="delete"> (optional)</param>
        /// <param name="action"> (optional)</param>
        /// <param name="location"> (optional)</param>
        /// <param name="propertylist"> (optional)</param>
        /// <param name="enabled"> (optional)</param>
        /// <returns>OrgApacheJackrabbitOakPluginsIndexSolrOsgiNodeStateSolrServersInfo</returns>
        OrgApacheJackrabbitOakPluginsIndexSolrOsgiNodeStateSolrServersInfo OrgApacheJackrabbitOakPluginsIndexSolrOsgiNodeStateSolrServers(NancyContext context, bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, bool? enabled);

        /// <summary>
        /// 
        /// </summary>
        /// <param name="context">Context of request</param>
        /// <param name="post"> (optional)</param>
        /// <param name="apply"> (optional)</param>
        /// <param name="delete"> (optional)</param>
        /// <param name="action"> (optional)</param>
        /// <param name="location"> (optional)</param>
        /// <param name="propertylist"> (optional)</param>
        /// <param name="pathDescField"> (optional)</param>
        /// <param name="pathChildField"> (optional)</param>
        /// <param name="pathParentField"> (optional)</param>
        /// <param name="pathExactField"> (optional)</param>
        /// <param name="catchAllField"> (optional)</param>
        /// <param name="collapsedPathField"> (optional)</param>
        /// <param name="pathDepthField"> (optional)</param>
        /// <param name="commitPolicy"> (optional)</param>
        /// <param name="rows"> (optional)</param>
        /// <param name="pathRestrictions"> (optional)</param>
        /// <param name="propertyRestrictions"> (optional)</param>
        /// <param name="primarytypesRestrictions"> (optional)</param>
        /// <param name="ignoredProperties"> (optional)</param>
        /// <param name="usedProperties"> (optional)</param>
        /// <param name="typeMappings"> (optional)</param>
        /// <param name="propertyMappings"> (optional)</param>
        /// <param name="collapseJcrcontentNodes"> (optional)</param>
        /// <returns>OrgApacheJackrabbitOakPluginsIndexSolrOsgiOakSolrConfigurationInfo</returns>
        OrgApacheJackrabbitOakPluginsIndexSolrOsgiOakSolrConfigurationInfo OrgApacheJackrabbitOakPluginsIndexSolrOsgiOakSolrConfiguration(NancyContext context, bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, string pathDescField, string pathChildField, string pathParentField, string pathExactField, string catchAllField, string collapsedPathField, string pathDepthField, string commitPolicy, int? rows, bool? pathRestrictions, bool? propertyRestrictions, bool? primarytypesRestrictions, List<string> ignoredProperties, List<string> usedProperties, List<string> typeMappings, List<string> propertyMappings, bool? collapseJcrcontentNodes);

        /// <summary>
        /// 
        /// </summary>
        /// <param name="context">Context of request</param>
        /// <param name="post"> (optional)</param>
        /// <param name="apply"> (optional)</param>
        /// <param name="delete"> (optional)</param>
        /// <param name="action"> (optional)</param>
        /// <param name="location"> (optional)</param>
        /// <param name="propertylist"> (optional)</param>
        /// <param name="solrHttpUrl"> (optional)</param>
        /// <param name="solrZkHost"> (optional)</param>
        /// <param name="solrCollection"> (optional)</param>
        /// <param name="solrSocketTimeout"> (optional)</param>
        /// <param name="solrConnectionTimeout"> (optional)</param>
        /// <param name="solrShardsNo"> (optional)</param>
        /// <param name="solrReplicationFactor"> (optional)</param>
        /// <param name="solrConfDir"> (optional)</param>
        /// <returns>OrgApacheJackrabbitOakPluginsIndexSolrOsgiRemoteSolrServerConfInfo</returns>
        OrgApacheJackrabbitOakPluginsIndexSolrOsgiRemoteSolrServerConfInfo OrgApacheJackrabbitOakPluginsIndexSolrOsgiRemoteSolrServerConf(NancyContext context, bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, string solrHttpUrl, string solrZkHost, string solrCollection, int? solrSocketTimeout, int? solrConnectionTimeout, int? solrShardsNo, int? solrReplicationFactor, string solrConfDir);

        /// <summary>
        /// 
        /// </summary>
        /// <param name="context">Context of request</param>
        /// <param name="post"> (optional)</param>
        /// <param name="apply"> (optional)</param>
        /// <param name="delete"> (optional)</param>
        /// <param name="action"> (optional)</param>
        /// <param name="location"> (optional)</param>
        /// <param name="propertylist"> (optional)</param>
        /// <param name="queryAggregation"> (optional)</param>
        /// <returns>OrgApacheJackrabbitOakPluginsIndexSolrOsgiSolrQueryIndexProvidInfo</returns>
        OrgApacheJackrabbitOakPluginsIndexSolrOsgiSolrQueryIndexProvidInfo OrgApacheJackrabbitOakPluginsIndexSolrOsgiSolrQueryIndexProvid(NancyContext context, bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, bool? queryAggregation);

        /// <summary>
        /// 
        /// </summary>
        /// <param name="context">Context of request</param>
        /// <param name="post"> (optional)</param>
        /// <param name="apply"> (optional)</param>
        /// <param name="delete"> (optional)</param>
        /// <param name="action"> (optional)</param>
        /// <param name="location"> (optional)</param>
        /// <param name="propertylist"> (optional)</param>
        /// <param name="serverType"> (optional)</param>
        /// <returns>OrgApacheJackrabbitOakPluginsIndexSolrOsgiSolrServerProviderSeInfo</returns>
        OrgApacheJackrabbitOakPluginsIndexSolrOsgiSolrServerProviderSeInfo OrgApacheJackrabbitOakPluginsIndexSolrOsgiSolrServerProviderSe(NancyContext context, bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, string serverType);

        /// <summary>
        /// 
        /// </summary>
        /// <param name="context">Context of request</param>
        /// <param name="post"> (optional)</param>
        /// <param name="apply"> (optional)</param>
        /// <param name="delete"> (optional)</param>
        /// <param name="action"> (optional)</param>
        /// <param name="location"> (optional)</param>
        /// <param name="propertylist"> (optional)</param>
        /// <param name="providerType"> (optional)</param>
        /// <returns>OrgApacheJackrabbitOakPluginsMetricStatisticsProviderFactoryInfo</returns>
        OrgApacheJackrabbitOakPluginsMetricStatisticsProviderFactoryInfo OrgApacheJackrabbitOakPluginsMetricStatisticsProviderFactory(NancyContext context, bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, string providerType);

        /// <summary>
        /// 
        /// </summary>
        /// <param name="context">Context of request</param>
        /// <param name="post"> (optional)</param>
        /// <param name="apply"> (optional)</param>
        /// <param name="delete"> (optional)</param>
        /// <param name="action"> (optional)</param>
        /// <param name="location"> (optional)</param>
        /// <param name="propertylist"> (optional)</param>
        /// <param name="maxItems"> (optional)</param>
        /// <param name="maxPathDepth"> (optional)</param>
        /// <param name="enabled"> (optional)</param>
        /// <returns>OrgApacheJackrabbitOakPluginsObservationChangeCollectorProviderInfo</returns>
        OrgApacheJackrabbitOakPluginsObservationChangeCollectorProviderInfo OrgApacheJackrabbitOakPluginsObservationChangeCollectorProvider(NancyContext context, bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, int? maxItems, int? maxPathDepth, bool? enabled);

        /// <summary>
        /// 
        /// </summary>
        /// <param name="context">Context of request</param>
        /// <param name="post"> (optional)</param>
        /// <param name="apply"> (optional)</param>
        /// <param name="delete"> (optional)</param>
        /// <param name="action"> (optional)</param>
        /// <param name="location"> (optional)</param>
        /// <param name="propertylist"> (optional)</param>
        /// <param name="queryLimitInMemory"> (optional)</param>
        /// <param name="queryLimitReads"> (optional)</param>
        /// <param name="queryFailTraversal"> (optional)</param>
        /// <param name="fastQuerySize"> (optional)</param>
        /// <returns>OrgApacheJackrabbitOakQueryQueryEngineSettingsServiceInfo</returns>
        OrgApacheJackrabbitOakQueryQueryEngineSettingsServiceInfo OrgApacheJackrabbitOakQueryQueryEngineSettingsService(NancyContext context, bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, int? queryLimitInMemory, int? queryLimitReads, bool? queryFailTraversal, bool? fastQuerySize);

        /// <summary>
        /// 
        /// </summary>
        /// <param name="context">Context of request</param>
        /// <param name="post"> (optional)</param>
        /// <param name="apply"> (optional)</param>
        /// <param name="delete"> (optional)</param>
        /// <param name="action"> (optional)</param>
        /// <param name="location"> (optional)</param>
        /// <param name="propertylist"> (optional)</param>
        /// <param name="orgApacheJackrabbitOakAuthenticationAppName"> (optional)</param>
        /// <param name="orgApacheJackrabbitOakAuthenticationConfigSpiName"> (optional)</param>
        /// <returns>OrgApacheJackrabbitOakSecurityAuthenticationAuthenticationConfigInfo</returns>
        OrgApacheJackrabbitOakSecurityAuthenticationAuthenticationConfigInfo OrgApacheJackrabbitOakSecurityAuthenticationAuthenticationConfig(NancyContext context, bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, string orgApacheJackrabbitOakAuthenticationAppName, string orgApacheJackrabbitOakAuthenticationConfigSpiName);

        /// <summary>
        /// 
        /// </summary>
        /// <param name="context">Context of request</param>
        /// <param name="post"> (optional)</param>
        /// <param name="apply"> (optional)</param>
        /// <param name="delete"> (optional)</param>
        /// <param name="action"> (optional)</param>
        /// <param name="location"> (optional)</param>
        /// <param name="propertylist"> (optional)</param>
        /// <param name="providerName"> (optional)</param>
        /// <param name="hostName"> (optional)</param>
        /// <param name="hostPort"> (optional)</param>
        /// <param name="hostSsl"> (optional)</param>
        /// <param name="hostTls"> (optional)</param>
        /// <param name="hostNoCertCheck"> (optional)</param>
        /// <param name="bindDn"> (optional)</param>
        /// <param name="bindPassword"> (optional)</param>
        /// <param name="searchTimeout"> (optional)</param>
        /// <param name="adminPoolMaxActive"> (optional)</param>
        /// <param name="adminPoolLookupOnValidate"> (optional)</param>
        /// <param name="userPoolMaxActive"> (optional)</param>
        /// <param name="userPoolLookupOnValidate"> (optional)</param>
        /// <param name="userBaseDN"> (optional)</param>
        /// <param name="userObjectclass"> (optional)</param>
        /// <param name="userIdAttribute"> (optional)</param>
        /// <param name="userExtraFilter"> (optional)</param>
        /// <param name="userMakeDnPath"> (optional)</param>
        /// <param name="groupBaseDN"> (optional)</param>
        /// <param name="groupObjectclass"> (optional)</param>
        /// <param name="groupNameAttribute"> (optional)</param>
        /// <param name="groupExtraFilter"> (optional)</param>
        /// <param name="groupMakeDnPath"> (optional)</param>
        /// <param name="groupMemberAttribute"> (optional)</param>
        /// <param name="useUidForExtId"> (optional)</param>
        /// <param name="customattributes"> (optional)</param>
        /// <returns>OrgApacheJackrabbitOakSecurityAuthenticationLdapImplLdapIdentiInfo</returns>
        OrgApacheJackrabbitOakSecurityAuthenticationLdapImplLdapIdentiInfo OrgApacheJackrabbitOakSecurityAuthenticationLdapImplLdapIdenti(NancyContext context, bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, string providerName, string hostName, int? hostPort, bool? hostSsl, bool? hostTls, bool? hostNoCertCheck, string bindDn, string bindPassword, string searchTimeout, int? adminPoolMaxActive, bool? adminPoolLookupOnValidate, int? userPoolMaxActive, bool? userPoolLookupOnValidate, string userBaseDN, List<string> userObjectclass, string userIdAttribute, string userExtraFilter, bool? userMakeDnPath, string groupBaseDN, List<string> groupObjectclass, string groupNameAttribute, string groupExtraFilter, bool? groupMakeDnPath, string groupMemberAttribute, bool? useUidForExtId, List<string> customattributes);

        /// <summary>
        /// 
        /// </summary>
        /// <param name="context">Context of request</param>
        /// <param name="post"> (optional)</param>
        /// <param name="apply"> (optional)</param>
        /// <param name="delete"> (optional)</param>
        /// <param name="action"> (optional)</param>
        /// <param name="location"> (optional)</param>
        /// <param name="propertylist"> (optional)</param>
        /// <param name="tokenExpiration"> (optional)</param>
        /// <param name="tokenLength"> (optional)</param>
        /// <param name="tokenRefresh"> (optional)</param>
        /// <param name="tokenCleanupThreshold"> (optional)</param>
        /// <param name="passwordHashAlgorithm"> (optional)</param>
        /// <param name="passwordHashIterations"> (optional)</param>
        /// <param name="passwordSaltSize"> (optional)</param>
        /// <returns>OrgApacheJackrabbitOakSecurityAuthenticationTokenTokenConfiguraInfo</returns>
        OrgApacheJackrabbitOakSecurityAuthenticationTokenTokenConfiguraInfo OrgApacheJackrabbitOakSecurityAuthenticationTokenTokenConfigura(NancyContext context, bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, string tokenExpiration, string tokenLength, bool? tokenRefresh, int? tokenCleanupThreshold, string passwordHashAlgorithm, int? passwordHashIterations, int? passwordSaltSize);

        /// <summary>
        /// 
        /// </summary>
        /// <param name="context">Context of request</param>
        /// <param name="post"> (optional)</param>
        /// <param name="apply"> (optional)</param>
        /// <param name="delete"> (optional)</param>
        /// <param name="action"> (optional)</param>
        /// <param name="location"> (optional)</param>
        /// <param name="propertylist"> (optional)</param>
        /// <param name="permissionsJr2"> (optional)</param>
        /// <param name="importBehavior"> (optional)</param>
        /// <param name="readPaths"> (optional)</param>
        /// <param name="administrativePrincipals"> (optional)</param>
        /// <param name="configurationRanking"> (optional)</param>
        /// <returns>OrgApacheJackrabbitOakSecurityAuthorizationAuthorizationConfigurInfo</returns>
        OrgApacheJackrabbitOakSecurityAuthorizationAuthorizationConfigurInfo OrgApacheJackrabbitOakSecurityAuthorizationAuthorizationConfigur(NancyContext context, bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, string permissionsJr2, string importBehavior, List<string> readPaths, List<string> administrativePrincipals, int? configurationRanking);

        /// <summary>
        /// 
        /// </summary>
        /// <param name="context">Context of request</param>
        /// <param name="post"> (optional)</param>
        /// <param name="apply"> (optional)</param>
        /// <param name="delete"> (optional)</param>
        /// <param name="action"> (optional)</param>
        /// <param name="location"> (optional)</param>
        /// <param name="propertylist"> (optional)</param>
        /// <param name="requiredServicePids"> (optional)</param>
        /// <param name="authorizationCompositionType"> (optional)</param>
        /// <returns>OrgApacheJackrabbitOakSecurityInternalSecurityProviderRegistratiInfo</returns>
        OrgApacheJackrabbitOakSecurityInternalSecurityProviderRegistratiInfo OrgApacheJackrabbitOakSecurityInternalSecurityProviderRegistrati(NancyContext context, bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, List<string> requiredServicePids, string authorizationCompositionType);

        /// <summary>
        /// 
        /// </summary>
        /// <param name="context">Context of request</param>
        /// <param name="post"> (optional)</param>
        /// <param name="apply"> (optional)</param>
        /// <param name="delete"> (optional)</param>
        /// <param name="action"> (optional)</param>
        /// <param name="location"> (optional)</param>
        /// <param name="propertylist"> (optional)</param>
        /// <param name="length"> (optional)</param>
        /// <returns>OrgApacheJackrabbitOakSecurityUserRandomAuthorizableNodeNameInfo</returns>
        OrgApacheJackrabbitOakSecurityUserRandomAuthorizableNodeNameInfo OrgApacheJackrabbitOakSecurityUserRandomAuthorizableNodeName(NancyContext context, bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, int? length);

        /// <summary>
        /// 
        /// </summary>
        /// <param name="context">Context of request</param>
        /// <param name="post"> (optional)</param>
        /// <param name="apply"> (optional)</param>
        /// <param name="delete"> (optional)</param>
        /// <param name="action"> (optional)</param>
        /// <param name="location"> (optional)</param>
        /// <param name="propertylist"> (optional)</param>
        /// <param name="usersPath"> (optional)</param>
        /// <param name="groupsPath"> (optional)</param>
        /// <param name="systemRelativePath"> (optional)</param>
        /// <param name="defaultDepth"> (optional)</param>
        /// <param name="importBehavior"> (optional)</param>
        /// <param name="passwordHashAlgorithm"> (optional)</param>
        /// <param name="passwordHashIterations"> (optional)</param>
        /// <param name="passwordSaltSize"> (optional)</param>
        /// <param name="omitAdminPw"> (optional)</param>
        /// <param name="supportAutoSave"> (optional)</param>
        /// <param name="passwordMaxAge"> (optional)</param>
        /// <param name="initialPasswordChange"> (optional)</param>
        /// <param name="passwordHistorySize"> (optional)</param>
        /// <param name="passwordExpiryForAdmin"> (optional)</param>
        /// <param name="cacheExpiration"> (optional)</param>
        /// <param name="enableRFC7613UsercaseMappedProfile"> (optional)</param>
        /// <returns>OrgApacheJackrabbitOakSecurityUserUserConfigurationImplInfo</returns>
        OrgApacheJackrabbitOakSecurityUserUserConfigurationImplInfo OrgApacheJackrabbitOakSecurityUserUserConfigurationImpl(NancyContext context, bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, string usersPath, string groupsPath, string systemRelativePath, int? defaultDepth, string importBehavior, string passwordHashAlgorithm, int? passwordHashIterations, int? passwordSaltSize, bool? omitAdminPw, bool? supportAutoSave, int? passwordMaxAge, bool? initialPasswordChange, int? passwordHistorySize, bool? passwordExpiryForAdmin, int? cacheExpiration, bool? enableRFC7613UsercaseMappedProfile);

        /// <summary>
        /// 
        /// </summary>
        /// <param name="context">Context of request</param>
        /// <param name="post"> (optional)</param>
        /// <param name="apply"> (optional)</param>
        /// <param name="delete"> (optional)</param>
        /// <param name="action"> (optional)</param>
        /// <param name="location"> (optional)</param>
        /// <param name="propertylist"> (optional)</param>
        /// <param name="accountName"> (optional)</param>
        /// <param name="containerName"> (optional)</param>
        /// <param name="accessKey"> (optional)</param>
        /// <param name="rootPath"> (optional)</param>
        /// <param name="connectionURL"> (optional)</param>
        /// <returns>OrgApacheJackrabbitOakSegmentAzureAzureSegmentStoreServiceInfo</returns>
        OrgApacheJackrabbitOakSegmentAzureAzureSegmentStoreServiceInfo OrgApacheJackrabbitOakSegmentAzureAzureSegmentStoreService(NancyContext context, bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, string accountName, string containerName, string accessKey, string rootPath, string connectionURL);

        /// <summary>
        /// 
        /// </summary>
        /// <param name="context">Context of request</param>
        /// <param name="post"> (optional)</param>
        /// <param name="apply"> (optional)</param>
        /// <param name="delete"> (optional)</param>
        /// <param name="action"> (optional)</param>
        /// <param name="location"> (optional)</param>
        /// <param name="propertylist"> (optional)</param>
        /// <param name="repositoryHome"> (optional)</param>
        /// <param name="tarmkMode"> (optional)</param>
        /// <param name="tarmkSize"> (optional)</param>
        /// <param name="segmentCacheSize"> (optional)</param>
        /// <param name="stringCacheSize"> (optional)</param>
        /// <param name="templateCacheSize"> (optional)</param>
        /// <param name="stringDeduplicationCacheSize"> (optional)</param>
        /// <param name="templateDeduplicationCacheSize"> (optional)</param>
        /// <param name="nodeDeduplicationCacheSize"> (optional)</param>
        /// <param name="pauseCompaction"> (optional)</param>
        /// <param name="compactionRetryCount"> (optional)</param>
        /// <param name="compactionForceTimeout"> (optional)</param>
        /// <param name="compactionSizeDeltaEstimation"> (optional)</param>
        /// <param name="compactionDisableEstimation"> (optional)</param>
        /// <param name="compactionRetainedGenerations"> (optional)</param>
        /// <param name="compactionMemoryThreshold"> (optional)</param>
        /// <param name="compactionProgressLog"> (optional)</param>
        /// <param name="standby"> (optional)</param>
        /// <param name="customBlobStore"> (optional)</param>
        /// <param name="customSegmentStore"> (optional)</param>
        /// <param name="splitPersistence"> (optional)</param>
        /// <param name="repositoryBackupDir"> (optional)</param>
        /// <param name="blobGcMaxAgeInSecs"> (optional)</param>
        /// <param name="blobTrackSnapshotIntervalInSecs"> (optional)</param>
        /// <param name="role"> (optional)</param>
        /// <param name="registerDescriptors"> (optional)</param>
        /// <param name="dispatchChanges"> (optional)</param>
        /// <returns>OrgApacheJackrabbitOakSegmentSegmentNodeStoreFactoryInfo</returns>
        OrgApacheJackrabbitOakSegmentSegmentNodeStoreFactoryInfo OrgApacheJackrabbitOakSegmentSegmentNodeStoreFactory(NancyContext context, bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, string repositoryHome, string tarmkMode, int? tarmkSize, int? segmentCacheSize, int? stringCacheSize, int? templateCacheSize, int? stringDeduplicationCacheSize, int? templateDeduplicationCacheSize, int? nodeDeduplicationCacheSize, bool? pauseCompaction, int? compactionRetryCount, int? compactionForceTimeout, int? compactionSizeDeltaEstimation, bool? compactionDisableEstimation, int? compactionRetainedGenerations, int? compactionMemoryThreshold, int? compactionProgressLog, bool? standby, bool? customBlobStore, bool? customSegmentStore, bool? splitPersistence, string repositoryBackupDir, int? blobGcMaxAgeInSecs, int? blobTrackSnapshotIntervalInSecs, string role, bool? registerDescriptors, bool? dispatchChanges);

        /// <summary>
        /// 
        /// </summary>
        /// <param name="context">Context of request</param>
        /// <param name="post"> (optional)</param>
        /// <param name="apply"> (optional)</param>
        /// <param name="delete"> (optional)</param>
        /// <param name="action"> (optional)</param>
        /// <param name="location"> (optional)</param>
        /// <param name="propertylist"> (optional)</param>
        /// <param name="commitsTrackerWriterGroups"> (optional)</param>
        /// <returns>OrgApacheJackrabbitOakSegmentSegmentNodeStoreMonitorServiceInfo</returns>
        OrgApacheJackrabbitOakSegmentSegmentNodeStoreMonitorServiceInfo OrgApacheJackrabbitOakSegmentSegmentNodeStoreMonitorService(NancyContext context, bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, List<string> commitsTrackerWriterGroups);

        /// <summary>
        /// 
        /// </summary>
        /// <param name="context">Context of request</param>
        /// <param name="post"> (optional)</param>
        /// <param name="apply"> (optional)</param>
        /// <param name="delete"> (optional)</param>
        /// <param name="action"> (optional)</param>
        /// <param name="location"> (optional)</param>
        /// <param name="propertylist"> (optional)</param>
        /// <param name="repositoryHome"> (optional)</param>
        /// <param name="tarmkMode"> (optional)</param>
        /// <param name="tarmkSize"> (optional)</param>
        /// <param name="segmentCacheSize"> (optional)</param>
        /// <param name="stringCacheSize"> (optional)</param>
        /// <param name="templateCacheSize"> (optional)</param>
        /// <param name="stringDeduplicationCacheSize"> (optional)</param>
        /// <param name="templateDeduplicationCacheSize"> (optional)</param>
        /// <param name="nodeDeduplicationCacheSize"> (optional)</param>
        /// <param name="pauseCompaction"> (optional)</param>
        /// <param name="compactionRetryCount"> (optional)</param>
        /// <param name="compactionForceTimeout"> (optional)</param>
        /// <param name="compactionSizeDeltaEstimation"> (optional)</param>
        /// <param name="compactionDisableEstimation"> (optional)</param>
        /// <param name="compactionRetainedGenerations"> (optional)</param>
        /// <param name="compactionMemoryThreshold"> (optional)</param>
        /// <param name="compactionProgressLog"> (optional)</param>
        /// <param name="standby"> (optional)</param>
        /// <param name="customBlobStore"> (optional)</param>
        /// <param name="customSegmentStore"> (optional)</param>
        /// <param name="splitPersistence"> (optional)</param>
        /// <param name="repositoryBackupDir"> (optional)</param>
        /// <param name="blobGcMaxAgeInSecs"> (optional)</param>
        /// <param name="blobTrackSnapshotIntervalInSecs"> (optional)</param>
        /// <returns>OrgApacheJackrabbitOakSegmentSegmentNodeStoreServiceInfo</returns>
        OrgApacheJackrabbitOakSegmentSegmentNodeStoreServiceInfo OrgApacheJackrabbitOakSegmentSegmentNodeStoreService(NancyContext context, bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, string repositoryHome, string tarmkMode, int? tarmkSize, int? segmentCacheSize, int? stringCacheSize, int? templateCacheSize, int? stringDeduplicationCacheSize, int? templateDeduplicationCacheSize, int? nodeDeduplicationCacheSize, bool? pauseCompaction, int? compactionRetryCount, int? compactionForceTimeout, int? compactionSizeDeltaEstimation, bool? compactionDisableEstimation, int? compactionRetainedGenerations, int? compactionMemoryThreshold, int? compactionProgressLog, bool? standby, bool? customBlobStore, bool? customSegmentStore, bool? splitPersistence, string repositoryBackupDir, int? blobGcMaxAgeInSecs, int? blobTrackSnapshotIntervalInSecs);

        /// <summary>
        /// 
        /// </summary>
        /// <param name="context">Context of request</param>
        /// <param name="post"> (optional)</param>
        /// <param name="apply"> (optional)</param>
        /// <param name="delete"> (optional)</param>
        /// <param name="action"> (optional)</param>
        /// <param name="location"> (optional)</param>
        /// <param name="propertylist"> (optional)</param>
        /// <param name="orgApacheSlingInstallerConfigurationPersist"> (optional)</param>
        /// <param name="mode"> (optional)</param>
        /// <param name="port"> (optional)</param>
        /// <param name="primaryHost"> (optional)</param>
        /// <param name="interval"> (optional)</param>
        /// <param name="primaryAllowedClientIpRanges"> (optional)</param>
        /// <param name="secure"> (optional)</param>
        /// <param name="standbyReadtimeout"> (optional)</param>
        /// <param name="standbyAutoclean"> (optional)</param>
        /// <returns>OrgApacheJackrabbitOakSegmentStandbyStoreStandbyStoreServiceInfo</returns>
        OrgApacheJackrabbitOakSegmentStandbyStoreStandbyStoreServiceInfo OrgApacheJackrabbitOakSegmentStandbyStoreStandbyStoreService(NancyContext context, bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, bool? orgApacheSlingInstallerConfigurationPersist, string mode, int? port, string primaryHost, int? interval, List<string> primaryAllowedClientIpRanges, bool? secure, int? standbyReadtimeout, bool? standbyAutoclean);

        /// <summary>
        /// 
        /// </summary>
        /// <param name="context">Context of request</param>
        /// <param name="post"> (optional)</param>
        /// <param name="apply"> (optional)</param>
        /// <param name="delete"> (optional)</param>
        /// <param name="action"> (optional)</param>
        /// <param name="location"> (optional)</param>
        /// <param name="propertylist"> (optional)</param>
        /// <param name="handlerName"> (optional)</param>
        /// <param name="userExpirationTime"> (optional)</param>
        /// <param name="userAutoMembership"> (optional)</param>
        /// <param name="userPropertyMapping"> (optional)</param>
        /// <param name="userPathPrefix"> (optional)</param>
        /// <param name="userMembershipExpTime"> (optional)</param>
        /// <param name="userMembershipNestingDepth"> (optional)</param>
        /// <param name="userDynamicMembership"> (optional)</param>
        /// <param name="userDisableMissing"> (optional)</param>
        /// <param name="groupExpirationTime"> (optional)</param>
        /// <param name="groupAutoMembership"> (optional)</param>
        /// <param name="groupPropertyMapping"> (optional)</param>
        /// <param name="groupPathPrefix"> (optional)</param>
        /// <param name="enableRFC7613UsercaseMappedProfile"> (optional)</param>
        /// <returns>OrgApacheJackrabbitOakSpiSecurityAuthenticationExternalImplDeInfo</returns>
        OrgApacheJackrabbitOakSpiSecurityAuthenticationExternalImplDeInfo OrgApacheJackrabbitOakSpiSecurityAuthenticationExternalImplDe(NancyContext context, bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, string handlerName, string userExpirationTime, List<string> userAutoMembership, List<string> userPropertyMapping, string userPathPrefix, string userMembershipExpTime, int? userMembershipNestingDepth, bool? userDynamicMembership, bool? userDisableMissing, string groupExpirationTime, List<string> groupAutoMembership, List<string> groupPropertyMapping, string groupPathPrefix, bool? enableRFC7613UsercaseMappedProfile);

        /// <summary>
        /// 
        /// </summary>
        /// <param name="context">Context of request</param>
        /// <param name="post"> (optional)</param>
        /// <param name="apply"> (optional)</param>
        /// <param name="delete"> (optional)</param>
        /// <param name="action"> (optional)</param>
        /// <param name="location"> (optional)</param>
        /// <param name="propertylist"> (optional)</param>
        /// <param name="jaasRanking"> (optional)</param>
        /// <param name="jaasControlFlag"> (optional)</param>
        /// <param name="jaasRealmName"> (optional)</param>
        /// <param name="idpName"> (optional)</param>
        /// <param name="syncHandlerName"> (optional)</param>
        /// <returns>OrgApacheJackrabbitOakSpiSecurityAuthenticationExternalImplExInfo</returns>
        OrgApacheJackrabbitOakSpiSecurityAuthenticationExternalImplExInfo OrgApacheJackrabbitOakSpiSecurityAuthenticationExternalImplEx(NancyContext context, bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, int? jaasRanking, string jaasControlFlag, string jaasRealmName, string idpName, string syncHandlerName);

        /// <summary>
        /// 
        /// </summary>
        /// <param name="context">Context of request</param>
        /// <param name="post"> (optional)</param>
        /// <param name="apply"> (optional)</param>
        /// <param name="delete"> (optional)</param>
        /// <param name="action"> (optional)</param>
        /// <param name="location"> (optional)</param>
        /// <param name="propertylist"> (optional)</param>
        /// <param name="protectExternalId"> (optional)</param>
        /// <returns>OrgApacheJackrabbitOakSpiSecurityAuthenticationExternalImplPrInfo</returns>
        OrgApacheJackrabbitOakSpiSecurityAuthenticationExternalImplPrInfo OrgApacheJackrabbitOakSpiSecurityAuthenticationExternalImplPr(NancyContext context, bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, bool? protectExternalId);

        /// <summary>
        /// 
        /// </summary>
        /// <param name="context">Context of request</param>
        /// <param name="post"> (optional)</param>
        /// <param name="apply"> (optional)</param>
        /// <param name="delete"> (optional)</param>
        /// <param name="action"> (optional)</param>
        /// <param name="location"> (optional)</param>
        /// <param name="propertylist"> (optional)</param>
        /// <param name="cugSupportedPaths"> (optional)</param>
        /// <param name="cugEnabled"> (optional)</param>
        /// <param name="configurationRanking"> (optional)</param>
        /// <returns>OrgApacheJackrabbitOakSpiSecurityAuthorizationCugImplCugConfiInfo</returns>
        OrgApacheJackrabbitOakSpiSecurityAuthorizationCugImplCugConfiInfo OrgApacheJackrabbitOakSpiSecurityAuthorizationCugImplCugConfi(NancyContext context, bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, List<string> cugSupportedPaths, bool? cugEnabled, int? configurationRanking);

        /// <summary>
        /// 
        /// </summary>
        /// <param name="context">Context of request</param>
        /// <param name="post"> (optional)</param>
        /// <param name="apply"> (optional)</param>
        /// <param name="delete"> (optional)</param>
        /// <param name="action"> (optional)</param>
        /// <param name="location"> (optional)</param>
        /// <param name="propertylist"> (optional)</param>
        /// <param name="principalNames"> (optional)</param>
        /// <returns>OrgApacheJackrabbitOakSpiSecurityAuthorizationCugImplCugExcluInfo</returns>
        OrgApacheJackrabbitOakSpiSecurityAuthorizationCugImplCugExcluInfo OrgApacheJackrabbitOakSpiSecurityAuthorizationCugImplCugExclu(NancyContext context, bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, List<string> principalNames);

        /// <summary>
        /// 
        /// </summary>
        /// <param name="context">Context of request</param>
        /// <param name="post"> (optional)</param>
        /// <param name="apply"> (optional)</param>
        /// <param name="delete"> (optional)</param>
        /// <param name="action"> (optional)</param>
        /// <param name="location"> (optional)</param>
        /// <param name="propertylist"> (optional)</param>
        /// <param name="enabledActions"> (optional)</param>
        /// <param name="userPrivilegeNames"> (optional)</param>
        /// <param name="groupPrivilegeNames"> (optional)</param>
        /// <param name="constraint"> (optional)</param>
        /// <returns>OrgApacheJackrabbitOakSpiSecurityUserActionDefaultAuthorizableInfo</returns>
        OrgApacheJackrabbitOakSpiSecurityUserActionDefaultAuthorizableInfo OrgApacheJackrabbitOakSpiSecurityUserActionDefaultAuthorizable(NancyContext context, bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, string enabledActions, List<string> userPrivilegeNames, List<string> groupPrivilegeNames, string constraint);

        /// <summary>
        /// 
        /// </summary>
        /// <param name="context">Context of request</param>
        /// <param name="post"> (optional)</param>
        /// <param name="apply"> (optional)</param>
        /// <param name="delete"> (optional)</param>
        /// <param name="action"> (optional)</param>
        /// <param name="location"> (optional)</param>
        /// <param name="propertylist"> (optional)</param>
        /// <param name="packageRoots"> (optional)</param>
        /// <returns>OrgApacheJackrabbitVaultPackagingImplPackagingImplInfo</returns>
        OrgApacheJackrabbitVaultPackagingImplPackagingImplInfo OrgApacheJackrabbitVaultPackagingImplPackagingImpl(NancyContext context, bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, List<string> packageRoots);

        /// <summary>
        /// 
        /// </summary>
        /// <param name="context">Context of request</param>
        /// <param name="post"> (optional)</param>
        /// <param name="apply"> (optional)</param>
        /// <param name="delete"> (optional)</param>
        /// <param name="action"> (optional)</param>
        /// <param name="location"> (optional)</param>
        /// <param name="propertylist"> (optional)</param>
        /// <param name="homePath"> (optional)</param>
        /// <returns>OrgApacheJackrabbitVaultPackagingRegistryImplFSPackageRegistryInfo</returns>
        OrgApacheJackrabbitVaultPackagingRegistryImplFSPackageRegistryInfo OrgApacheJackrabbitVaultPackagingRegistryImplFSPackageRegistry(NancyContext context, bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, string homePath);

        /// <summary>
        /// 
        /// </summary>
        /// <param name="context">Context of request</param>
        /// <param name="post"> (optional)</param>
        /// <param name="apply"> (optional)</param>
        /// <param name="delete"> (optional)</param>
        /// <param name="action"> (optional)</param>
        /// <param name="location"> (optional)</param>
        /// <param name="propertylist"> (optional)</param>
        /// <param name="slingServletMethods"> (optional)</param>
        /// <param name="slingServletPaths"> (optional)</param>
        /// <returns>OrgApacheSlingAuthCoreImplLogoutServletInfo</returns>
        OrgApacheSlingAuthCoreImplLogoutServletInfo OrgApacheSlingAuthCoreImplLogoutServlet(NancyContext context, bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, List<string> slingServletMethods, string slingServletPaths);

        /// <summary>
        /// 
        /// </summary>
        /// <param name="context">Context of request</param>
        /// <param name="post"> (optional)</param>
        /// <param name="apply"> (optional)</param>
        /// <param name="delete"> (optional)</param>
        /// <param name="action"> (optional)</param>
        /// <param name="location"> (optional)</param>
        /// <param name="propertylist"> (optional)</param>
        /// <param name="enabled"> (optional)</param>
        /// <returns>OrgApacheSlingCaconfigImplConfigurationBindingsValueProviderInfo</returns>
        OrgApacheSlingCaconfigImplConfigurationBindingsValueProviderInfo OrgApacheSlingCaconfigImplConfigurationBindingsValueProvider(NancyContext context, bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, bool? enabled);

        /// <summary>
        /// 
        /// </summary>
        /// <param name="context">Context of request</param>
        /// <param name="post"> (optional)</param>
        /// <param name="apply"> (optional)</param>
        /// <param name="delete"> (optional)</param>
        /// <param name="action"> (optional)</param>
        /// <param name="location"> (optional)</param>
        /// <param name="propertylist"> (optional)</param>
        /// <param name="configBucketNames"> (optional)</param>
        /// <returns>OrgApacheSlingCaconfigImplConfigurationResolverImplInfo</returns>
        OrgApacheSlingCaconfigImplConfigurationResolverImplInfo OrgApacheSlingCaconfigImplConfigurationResolverImpl(NancyContext context, bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, List<string> configBucketNames);

        /// <summary>
        /// 
        /// </summary>
        /// <param name="context">Context of request</param>
        /// <param name="post"> (optional)</param>
        /// <param name="apply"> (optional)</param>
        /// <param name="delete"> (optional)</param>
        /// <param name="action"> (optional)</param>
        /// <param name="location"> (optional)</param>
        /// <param name="propertylist"> (optional)</param>
        /// <param name="enabled"> (optional)</param>
        /// <param name="configPropertyInheritancePropertyNames"> (optional)</param>
        /// <returns>OrgApacheSlingCaconfigImplDefDefaultConfigurationInheritanceStraInfo</returns>
        OrgApacheSlingCaconfigImplDefDefaultConfigurationInheritanceStraInfo OrgApacheSlingCaconfigImplDefDefaultConfigurationInheritanceStra(NancyContext context, bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, bool? enabled, List<string> configPropertyInheritancePropertyNames);

        /// <summary>
        /// 
        /// </summary>
        /// <param name="context">Context of request</param>
        /// <param name="post"> (optional)</param>
        /// <param name="apply"> (optional)</param>
        /// <param name="delete"> (optional)</param>
        /// <param name="action"> (optional)</param>
        /// <param name="location"> (optional)</param>
        /// <param name="propertylist"> (optional)</param>
        /// <param name="enabled"> (optional)</param>
        /// <returns>OrgApacheSlingCaconfigImplDefDefaultConfigurationPersistenceStraInfo</returns>
        OrgApacheSlingCaconfigImplDefDefaultConfigurationPersistenceStraInfo OrgApacheSlingCaconfigImplDefDefaultConfigurationPersistenceStra(NancyContext context, bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, bool? enabled);

        /// <summary>
        /// 
        /// </summary>
        /// <param name="context">Context of request</param>
        /// <param name="post"> (optional)</param>
        /// <param name="apply"> (optional)</param>
        /// <param name="delete"> (optional)</param>
        /// <param name="action"> (optional)</param>
        /// <param name="location"> (optional)</param>
        /// <param name="propertylist"> (optional)</param>
        /// <param name="description"> (optional)</param>
        /// <param name="overrides"> (optional)</param>
        /// <param name="enabled"> (optional)</param>
        /// <param name="serviceRanking"> (optional)</param>
        /// <returns>OrgApacheSlingCaconfigImplOverrideOsgiConfigurationOverrideProviInfo</returns>
        OrgApacheSlingCaconfigImplOverrideOsgiConfigurationOverrideProviInfo OrgApacheSlingCaconfigImplOverrideOsgiConfigurationOverrideProvi(NancyContext context, bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, string description, List<string> overrides, bool? enabled, int? serviceRanking);

        /// <summary>
        /// 
        /// </summary>
        /// <param name="context">Context of request</param>
        /// <param name="post"> (optional)</param>
        /// <param name="apply"> (optional)</param>
        /// <param name="delete"> (optional)</param>
        /// <param name="action"> (optional)</param>
        /// <param name="location"> (optional)</param>
        /// <param name="propertylist"> (optional)</param>
        /// <param name="enabled"> (optional)</param>
        /// <param name="serviceRanking"> (optional)</param>
        /// <returns>OrgApacheSlingCaconfigImplOverrideSystemPropertyConfigurationOveInfo</returns>
        OrgApacheSlingCaconfigImplOverrideSystemPropertyConfigurationOveInfo OrgApacheSlingCaconfigImplOverrideSystemPropertyConfigurationOve(NancyContext context, bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, bool? enabled, int? serviceRanking);

        /// <summary>
        /// 
        /// </summary>
        /// <param name="context">Context of request</param>
        /// <param name="post"> (optional)</param>
        /// <param name="apply"> (optional)</param>
        /// <param name="delete"> (optional)</param>
        /// <param name="action"> (optional)</param>
        /// <param name="location"> (optional)</param>
        /// <param name="propertylist"> (optional)</param>
        /// <param name="ignorePropertyNameRegex"> (optional)</param>
        /// <param name="configCollectionPropertiesResourceNames"> (optional)</param>
        /// <returns>OrgApacheSlingCaconfigManagementImplConfigurationManagementSettiInfo</returns>
        OrgApacheSlingCaconfigManagementImplConfigurationManagementSettiInfo OrgApacheSlingCaconfigManagementImplConfigurationManagementSetti(NancyContext context, bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, List<string> ignorePropertyNameRegex, List<string> configCollectionPropertiesResourceNames);

        /// <summary>
        /// 
        /// </summary>
        /// <param name="context">Context of request</param>
        /// <param name="post"> (optional)</param>
        /// <param name="apply"> (optional)</param>
        /// <param name="delete"> (optional)</param>
        /// <param name="action"> (optional)</param>
        /// <param name="location"> (optional)</param>
        /// <param name="propertylist"> (optional)</param>
        /// <param name="enabled"> (optional)</param>
        /// <param name="configPath"> (optional)</param>
        /// <param name="fallbackPaths"> (optional)</param>
        /// <param name="configCollectionInheritancePropertyNames"> (optional)</param>
        /// <returns>OrgApacheSlingCaconfigResourceImplDefDefaultConfigurationResourInfo</returns>
        OrgApacheSlingCaconfigResourceImplDefDefaultConfigurationResourInfo OrgApacheSlingCaconfigResourceImplDefDefaultConfigurationResour(NancyContext context, bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, bool? enabled, string configPath, List<string> fallbackPaths, List<string> configCollectionInheritancePropertyNames);

        /// <summary>
        /// 
        /// </summary>
        /// <param name="context">Context of request</param>
        /// <param name="post"> (optional)</param>
        /// <param name="apply"> (optional)</param>
        /// <param name="delete"> (optional)</param>
        /// <param name="action"> (optional)</param>
        /// <param name="location"> (optional)</param>
        /// <param name="propertylist"> (optional)</param>
        /// <param name="enabled"> (optional)</param>
        /// <param name="configRefResourceNames"> (optional)</param>
        /// <param name="configRefPropertyNames"> (optional)</param>
        /// <param name="serviceRanking"> (optional)</param>
        /// <returns>OrgApacheSlingCaconfigResourceImplDefDefaultContextPathStrategyInfo</returns>
        OrgApacheSlingCaconfigResourceImplDefDefaultContextPathStrategyInfo OrgApacheSlingCaconfigResourceImplDefDefaultContextPathStrategy(NancyContext context, bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, bool? enabled, List<string> configRefResourceNames, List<string> configRefPropertyNames, int? serviceRanking);

        /// <summary>
        /// 
        /// </summary>
        /// <param name="context">Context of request</param>
        /// <param name="post"> (optional)</param>
        /// <param name="apply"> (optional)</param>
        /// <param name="delete"> (optional)</param>
        /// <param name="action"> (optional)</param>
        /// <param name="location"> (optional)</param>
        /// <param name="propertylist"> (optional)</param>
        /// <param name="parserFeatures"> (optional)</param>
        /// <returns>OrgApacheSlingCommonsHtmlInternalTagsoupHtmlParserInfo</returns>
        OrgApacheSlingCommonsHtmlInternalTagsoupHtmlParserInfo OrgApacheSlingCommonsHtmlInternalTagsoupHtmlParser(NancyContext context, bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, List<string> parserFeatures);

        /// <summary>
        /// 
        /// </summary>
        /// <param name="context">Context of request</param>
        /// <param name="post"> (optional)</param>
        /// <param name="apply"> (optional)</param>
        /// <param name="delete"> (optional)</param>
        /// <param name="action"> (optional)</param>
        /// <param name="location"> (optional)</param>
        /// <param name="propertylist"> (optional)</param>
        /// <param name="orgApacheSlingCommonsLogLevel"> (optional)</param>
        /// <param name="orgApacheSlingCommonsLogFile"> (optional)</param>
        /// <param name="orgApacheSlingCommonsLogFileNumber"> (optional)</param>
        /// <param name="orgApacheSlingCommonsLogFileSize"> (optional)</param>
        /// <param name="orgApacheSlingCommonsLogPattern"> (optional)</param>
        /// <param name="orgApacheSlingCommonsLogConfigurationFile"> (optional)</param>
        /// <param name="orgApacheSlingCommonsLogPackagingDataEnabled"> (optional)</param>
        /// <param name="orgApacheSlingCommonsLogMaxCallerDataDepth"> (optional)</param>
        /// <param name="orgApacheSlingCommonsLogMaxOldFileCountInDump"> (optional)</param>
        /// <param name="orgApacheSlingCommonsLogNumOfLines"> (optional)</param>
        /// <returns>OrgApacheSlingCommonsLogLogManagerInfo</returns>
        OrgApacheSlingCommonsLogLogManagerInfo OrgApacheSlingCommonsLogLogManager(NancyContext context, bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, string orgApacheSlingCommonsLogLevel, string orgApacheSlingCommonsLogFile, int? orgApacheSlingCommonsLogFileNumber, string orgApacheSlingCommonsLogFileSize, string orgApacheSlingCommonsLogPattern, string orgApacheSlingCommonsLogConfigurationFile, bool? orgApacheSlingCommonsLogPackagingDataEnabled, int? orgApacheSlingCommonsLogMaxCallerDataDepth, int? orgApacheSlingCommonsLogMaxOldFileCountInDump, int? orgApacheSlingCommonsLogNumOfLines);

        /// <summary>
        /// 
        /// </summary>
        /// <param name="context">Context of request</param>
        /// <param name="post"> (optional)</param>
        /// <param name="apply"> (optional)</param>
        /// <param name="delete"> (optional)</param>
        /// <param name="action"> (optional)</param>
        /// <param name="location"> (optional)</param>
        /// <param name="propertylist"> (optional)</param>
        /// <param name="orgApacheSlingCommonsLogLevel"> (optional)</param>
        /// <param name="orgApacheSlingCommonsLogFile"> (optional)</param>
        /// <param name="orgApacheSlingCommonsLogPattern"> (optional)</param>
        /// <param name="orgApacheSlingCommonsLogNames"> (optional)</param>
        /// <param name="orgApacheSlingCommonsLogAdditiv"> (optional)</param>
        /// <returns>OrgApacheSlingCommonsLogLogManagerFactoryConfigInfo</returns>
        OrgApacheSlingCommonsLogLogManagerFactoryConfigInfo OrgApacheSlingCommonsLogLogManagerFactoryConfig(NancyContext context, bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, string orgApacheSlingCommonsLogLevel, string orgApacheSlingCommonsLogFile, string orgApacheSlingCommonsLogPattern, List<string> orgApacheSlingCommonsLogNames, bool? orgApacheSlingCommonsLogAdditiv);

        /// <summary>
        /// 
        /// </summary>
        /// <param name="context">Context of request</param>
        /// <param name="post"> (optional)</param>
        /// <param name="apply"> (optional)</param>
        /// <param name="delete"> (optional)</param>
        /// <param name="action"> (optional)</param>
        /// <param name="location"> (optional)</param>
        /// <param name="propertylist"> (optional)</param>
        /// <param name="orgApacheSlingCommonsLogFile"> (optional)</param>
        /// <param name="orgApacheSlingCommonsLogFileNumber"> (optional)</param>
        /// <param name="orgApacheSlingCommonsLogFileSize"> (optional)</param>
        /// <param name="orgApacheSlingCommonsLogFileBuffered"> (optional)</param>
        /// <returns>OrgApacheSlingCommonsLogLogManagerFactoryWriterInfo</returns>
        OrgApacheSlingCommonsLogLogManagerFactoryWriterInfo OrgApacheSlingCommonsLogLogManagerFactoryWriter(NancyContext context, bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, string orgApacheSlingCommonsLogFile, int? orgApacheSlingCommonsLogFileNumber, string orgApacheSlingCommonsLogFileSize, bool? orgApacheSlingCommonsLogFileBuffered);

        /// <summary>
        /// 
        /// </summary>
        /// <param name="context">Context of request</param>
        /// <param name="post"> (optional)</param>
        /// <param name="apply"> (optional)</param>
        /// <param name="delete"> (optional)</param>
        /// <param name="action"> (optional)</param>
        /// <param name="location"> (optional)</param>
        /// <param name="propertylist"> (optional)</param>
        /// <param name="period"> (optional)</param>
        /// <param name="timeUnit"> (optional)</param>
        /// <param name="level"> (optional)</param>
        /// <param name="loggerName"> (optional)</param>
        /// <param name="prefix"> (optional)</param>
        /// <param name="pattern"> (optional)</param>
        /// <param name="registryName"> (optional)</param>
        /// <returns>OrgApacheSlingCommonsMetricsInternalLogReporterInfo</returns>
        OrgApacheSlingCommonsMetricsInternalLogReporterInfo OrgApacheSlingCommonsMetricsInternalLogReporter(NancyContext context, bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, int? period, string timeUnit, string level, string loggerName, string prefix, string pattern, string registryName);

        /// <summary>
        /// 
        /// </summary>
        /// <param name="context">Context of request</param>
        /// <param name="post"> (optional)</param>
        /// <param name="apply"> (optional)</param>
        /// <param name="delete"> (optional)</param>
        /// <param name="action"> (optional)</param>
        /// <param name="location"> (optional)</param>
        /// <param name="propertylist"> (optional)</param>
        /// <param name="datasources"> (optional)</param>
        /// <param name="step"> (optional)</param>
        /// <param name="archives"> (optional)</param>
        /// <param name="path"> (optional)</param>
        /// <returns>OrgApacheSlingCommonsMetricsRrd4jImplCodahaleMetricsReporterInfo</returns>
        OrgApacheSlingCommonsMetricsRrd4jImplCodahaleMetricsReporterInfo OrgApacheSlingCommonsMetricsRrd4jImplCodahaleMetricsReporter(NancyContext context, bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, List<string> datasources, int? step, List<string> archives, string path);

        /// <summary>
        /// 
        /// </summary>
        /// <param name="context">Context of request</param>
        /// <param name="post"> (optional)</param>
        /// <param name="apply"> (optional)</param>
        /// <param name="delete"> (optional)</param>
        /// <param name="action"> (optional)</param>
        /// <param name="location"> (optional)</param>
        /// <param name="propertylist"> (optional)</param>
        /// <param name="mimeTypes"> (optional)</param>
        /// <returns>OrgApacheSlingCommonsMimeInternalMimeTypeServiceImplInfo</returns>
        OrgApacheSlingCommonsMimeInternalMimeTypeServiceImplInfo OrgApacheSlingCommonsMimeInternalMimeTypeServiceImpl(NancyContext context, bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, List<string> mimeTypes);

        /// <summary>
        /// 
        /// </summary>
        /// <param name="context">Context of request</param>
        /// <param name="post"> (optional)</param>
        /// <param name="apply"> (optional)</param>
        /// <param name="delete"> (optional)</param>
        /// <param name="action"> (optional)</param>
        /// <param name="location"> (optional)</param>
        /// <param name="propertylist"> (optional)</param>
        /// <param name="poolName"> (optional)</param>
        /// <param name="allowedPoolNames"> (optional)</param>
        /// <param name="schedulerUseleaderforsingle"> (optional)</param>
        /// <param name="metricsFilters"> (optional)</param>
        /// <param name="slowThresholdMillis"> (optional)</param>
        /// <returns>OrgApacheSlingCommonsSchedulerImplQuartzSchedulerInfo</returns>
        OrgApacheSlingCommonsSchedulerImplQuartzSchedulerInfo OrgApacheSlingCommonsSchedulerImplQuartzScheduler(NancyContext context, bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, string poolName, List<string> allowedPoolNames, bool? schedulerUseleaderforsingle, List<string> metricsFilters, int? slowThresholdMillis);

        /// <summary>
        /// 
        /// </summary>
        /// <param name="context">Context of request</param>
        /// <param name="post"> (optional)</param>
        /// <param name="apply"> (optional)</param>
        /// <param name="delete"> (optional)</param>
        /// <param name="action"> (optional)</param>
        /// <param name="location"> (optional)</param>
        /// <param name="propertylist"> (optional)</param>
        /// <param name="maxQuartzJobDurationAcceptable"> (optional)</param>
        /// <returns>OrgApacheSlingCommonsSchedulerImplSchedulerHealthCheckInfo</returns>
        OrgApacheSlingCommonsSchedulerImplSchedulerHealthCheckInfo OrgApacheSlingCommonsSchedulerImplSchedulerHealthCheck(NancyContext context, bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, int? maxQuartzJobDurationAcceptable);

        /// <summary>
        /// 
        /// </summary>
        /// <param name="context">Context of request</param>
        /// <param name="post"> (optional)</param>
        /// <param name="apply"> (optional)</param>
        /// <param name="delete"> (optional)</param>
        /// <param name="action"> (optional)</param>
        /// <param name="location"> (optional)</param>
        /// <param name="propertylist"> (optional)</param>
        /// <param name="name"> (optional)</param>
        /// <param name="minPoolSize"> (optional)</param>
        /// <param name="maxPoolSize"> (optional)</param>
        /// <param name="queueSize"> (optional)</param>
        /// <param name="maxThreadAge"> (optional)</param>
        /// <param name="keepAliveTime"> (optional)</param>
        /// <param name="blockPolicy"> (optional)</param>
        /// <param name="shutdownGraceful"> (optional)</param>
        /// <param name="daemon"> (optional)</param>
        /// <param name="shutdownWaitTime"> (optional)</param>
        /// <param name="priority"> (optional)</param>
        /// <returns>OrgApacheSlingCommonsThreadsImplDefaultThreadPoolFactoryInfo</returns>
        OrgApacheSlingCommonsThreadsImplDefaultThreadPoolFactoryInfo OrgApacheSlingCommonsThreadsImplDefaultThreadPoolFactory(NancyContext context, bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, string name, int? minPoolSize, int? maxPoolSize, int? queueSize, int? maxThreadAge, int? keepAliveTime, string blockPolicy, bool? shutdownGraceful, bool? daemon, int? shutdownWaitTime, string priority);

        /// <summary>
        /// 
        /// </summary>
        /// <param name="context">Context of request</param>
        /// <param name="post"> (optional)</param>
        /// <param name="apply"> (optional)</param>
        /// <param name="delete"> (optional)</param>
        /// <param name="action"> (optional)</param>
        /// <param name="location"> (optional)</param>
        /// <param name="propertylist"> (optional)</param>
        /// <param name="datasourceName"> (optional)</param>
        /// <param name="datasourceSvcPropName"> (optional)</param>
        /// <param name="driverClassName"> (optional)</param>
        /// <param name="url"> (optional)</param>
        /// <param name="username"> (optional)</param>
        /// <param name="password"> (optional)</param>
        /// <param name="defaultAutoCommit"> (optional)</param>
        /// <param name="defaultReadOnly"> (optional)</param>
        /// <param name="defaultTransactionIsolation"> (optional)</param>
        /// <param name="defaultCatalog"> (optional)</param>
        /// <param name="maxActive"> (optional)</param>
        /// <param name="maxIdle"> (optional)</param>
        /// <param name="minIdle"> (optional)</param>
        /// <param name="initialSize"> (optional)</param>
        /// <param name="maxWait"> (optional)</param>
        /// <param name="maxAge"> (optional)</param>
        /// <param name="testOnBorrow"> (optional)</param>
        /// <param name="testOnReturn"> (optional)</param>
        /// <param name="testWhileIdle"> (optional)</param>
        /// <param name="validationQuery"> (optional)</param>
        /// <param name="validationQueryTimeout"> (optional)</param>
        /// <param name="timeBetweenEvictionRunsMillis"> (optional)</param>
        /// <param name="minEvictableIdleTimeMillis"> (optional)</param>
        /// <param name="connectionProperties"> (optional)</param>
        /// <param name="initSQL"> (optional)</param>
        /// <param name="jdbcInterceptors"> (optional)</param>
        /// <param name="validationInterval"> (optional)</param>
        /// <param name="logValidationErrors"> (optional)</param>
        /// <param name="datasourceSvcProperties"> (optional)</param>
        /// <returns>OrgApacheSlingDatasourceDataSourceFactoryInfo</returns>
        OrgApacheSlingDatasourceDataSourceFactoryInfo OrgApacheSlingDatasourceDataSourceFactory(NancyContext context, bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, string datasourceName, string datasourceSvcPropName, string driverClassName, string url, string username, string password, string defaultAutoCommit, string defaultReadOnly, string defaultTransactionIsolation, string defaultCatalog, int? maxActive, int? maxIdle, int? minIdle, int? initialSize, int? maxWait, int? maxAge, bool? testOnBorrow, bool? testOnReturn, bool? testWhileIdle, string validationQuery, int? validationQueryTimeout, int? timeBetweenEvictionRunsMillis, int? minEvictableIdleTimeMillis, string connectionProperties, string initSQL, string jdbcInterceptors, int? validationInterval, bool? logValidationErrors, List<string> datasourceSvcProperties);

        /// <summary>
        /// 
        /// </summary>
        /// <param name="context">Context of request</param>
        /// <param name="post"> (optional)</param>
        /// <param name="apply"> (optional)</param>
        /// <param name="delete"> (optional)</param>
        /// <param name="action"> (optional)</param>
        /// <param name="location"> (optional)</param>
        /// <param name="propertylist"> (optional)</param>
        /// <param name="datasourceName"> (optional)</param>
        /// <param name="datasourceSvcPropName"> (optional)</param>
        /// <param name="datasourceJndiName"> (optional)</param>
        /// <param name="jndiProperties"> (optional)</param>
        /// <returns>OrgApacheSlingDatasourceJNDIDataSourceFactoryInfo</returns>
        OrgApacheSlingDatasourceJNDIDataSourceFactoryInfo OrgApacheSlingDatasourceJNDIDataSourceFactory(NancyContext context, bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, string datasourceName, string datasourceSvcPropName, string datasourceJndiName, List<string> jndiProperties);

        /// <summary>
        /// 
        /// </summary>
        /// <param name="context">Context of request</param>
        /// <param name="post"> (optional)</param>
        /// <param name="apply"> (optional)</param>
        /// <param name="delete"> (optional)</param>
        /// <param name="action"> (optional)</param>
        /// <param name="location"> (optional)</param>
        /// <param name="propertylist"> (optional)</param>
        /// <param name="connectorPingTimeout"> (optional)</param>
        /// <param name="connectorPingInterval"> (optional)</param>
        /// <param name="discoveryLiteCheckInterval"> (optional)</param>
        /// <param name="clusterSyncServiceTimeout"> (optional)</param>
        /// <param name="clusterSyncServiceInterval"> (optional)</param>
        /// <param name="enableSyncToken"> (optional)</param>
        /// <param name="minEventDelay"> (optional)</param>
        /// <param name="socketConnectTimeout"> (optional)</param>
        /// <param name="soTimeout"> (optional)</param>
        /// <param name="topologyConnectorUrls"> (optional)</param>
        /// <param name="topologyConnectorWhitelist"> (optional)</param>
        /// <param name="autoStopLocalLoopEnabled"> (optional)</param>
        /// <param name="gzipConnectorRequestsEnabled"> (optional)</param>
        /// <param name="hmacEnabled"> (optional)</param>
        /// <param name="enableEncryption"> (optional)</param>
        /// <param name="sharedKey"> (optional)</param>
        /// <param name="hmacSharedKeyTTL"> (optional)</param>
        /// <param name="backoffStandbyFactor"> (optional)</param>
        /// <param name="backoffStableFactor"> (optional)</param>
        /// <returns>OrgApacheSlingDiscoveryOakConfigInfo</returns>
        OrgApacheSlingDiscoveryOakConfigInfo OrgApacheSlingDiscoveryOakConfig(NancyContext context, bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, int? connectorPingTimeout, int? connectorPingInterval, int? discoveryLiteCheckInterval, int? clusterSyncServiceTimeout, int? clusterSyncServiceInterval, bool? enableSyncToken, int? minEventDelay, int? socketConnectTimeout, int? soTimeout, List<string> topologyConnectorUrls, List<string> topologyConnectorWhitelist, bool? autoStopLocalLoopEnabled, bool? gzipConnectorRequestsEnabled, bool? hmacEnabled, bool? enableEncryption, string sharedKey, int? hmacSharedKeyTTL, string backoffStandbyFactor, string backoffStableFactor);

        /// <summary>
        /// 
        /// </summary>
        /// <param name="context">Context of request</param>
        /// <param name="post"> (optional)</param>
        /// <param name="apply"> (optional)</param>
        /// <param name="delete"> (optional)</param>
        /// <param name="action"> (optional)</param>
        /// <param name="location"> (optional)</param>
        /// <param name="propertylist"> (optional)</param>
        /// <param name="hcName"> (optional)</param>
        /// <param name="hcTags"> (optional)</param>
        /// <param name="hcMbeanName"> (optional)</param>
        /// <returns>OrgApacheSlingDiscoveryOakSynchronizedClocksHealthCheckInfo</returns>
        OrgApacheSlingDiscoveryOakSynchronizedClocksHealthCheckInfo OrgApacheSlingDiscoveryOakSynchronizedClocksHealthCheck(NancyContext context, bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, string hcName, List<string> hcTags, string hcMbeanName);

        /// <summary>
        /// 
        /// </summary>
        /// <param name="context">Context of request</param>
        /// <param name="post"> (optional)</param>
        /// <param name="apply"> (optional)</param>
        /// <param name="delete"> (optional)</param>
        /// <param name="action"> (optional)</param>
        /// <param name="location"> (optional)</param>
        /// <param name="propertylist"> (optional)</param>
        /// <param name="name"> (optional)</param>
        /// <param name="title"> (optional)</param>
        /// <param name="details"> (optional)</param>
        /// <param name="enabled"> (optional)</param>
        /// <param name="serviceName"> (optional)</param>
        /// <param name="logLevel"> (optional)</param>
        /// <param name="allowedRoots"> (optional)</param>
        /// <param name="queueProcessingEnabled"> (optional)</param>
        /// <param name="packageImporterEndpoints"> (optional)</param>
        /// <param name="passiveQueues"> (optional)</param>
        /// <param name="priorityQueues"> (optional)</param>
        /// <param name="retryStrategy"> (optional)</param>
        /// <param name="retryAttempts"> (optional)</param>
        /// <param name="requestAuthorizationStrategyTarget"> (optional)</param>
        /// <param name="transportSecretProviderTarget"> (optional)</param>
        /// <param name="packageBuilderTarget"> (optional)</param>
        /// <param name="triggersTarget"> (optional)</param>
        /// <param name="queueProvider"> (optional)</param>
        /// <param name="asyncDelivery"> (optional)</param>
        /// <param name="httpConnTimeout"> (optional)</param>
        /// <returns>OrgApacheSlingDistributionAgentImplForwardDistributionAgentFactoInfo</returns>
        OrgApacheSlingDistributionAgentImplForwardDistributionAgentFactoInfo OrgApacheSlingDistributionAgentImplForwardDistributionAgentFacto(NancyContext context, bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, string name, string title, string details, bool? enabled, string serviceName, string logLevel, List<string> allowedRoots, bool? queueProcessingEnabled, List<string> packageImporterEndpoints, List<string> passiveQueues, List<string> priorityQueues, string retryStrategy, int? retryAttempts, string requestAuthorizationStrategyTarget, string transportSecretProviderTarget, string packageBuilderTarget, string triggersTarget, string queueProvider, bool? asyncDelivery, int? httpConnTimeout);

        /// <summary>
        /// 
        /// </summary>
        /// <param name="context">Context of request</param>
        /// <param name="post"> (optional)</param>
        /// <param name="apply"> (optional)</param>
        /// <param name="delete"> (optional)</param>
        /// <param name="action"> (optional)</param>
        /// <param name="location"> (optional)</param>
        /// <param name="propertylist"> (optional)</param>
        /// <param name="name"> (optional)</param>
        /// <param name="jcrPrivilege"> (optional)</param>
        /// <returns>OrgApacheSlingDistributionAgentImplPrivilegeDistributionRequestAInfo</returns>
        OrgApacheSlingDistributionAgentImplPrivilegeDistributionRequestAInfo OrgApacheSlingDistributionAgentImplPrivilegeDistributionRequestA(NancyContext context, bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, string name, string jcrPrivilege);

        /// <summary>
        /// 
        /// </summary>
        /// <param name="context">Context of request</param>
        /// <param name="post"> (optional)</param>
        /// <param name="apply"> (optional)</param>
        /// <param name="delete"> (optional)</param>
        /// <param name="action"> (optional)</param>
        /// <param name="location"> (optional)</param>
        /// <param name="propertylist"> (optional)</param>
        /// <param name="name"> (optional)</param>
        /// <param name="title"> (optional)</param>
        /// <param name="details"> (optional)</param>
        /// <param name="enabled"> (optional)</param>
        /// <param name="serviceName"> (optional)</param>
        /// <param name="logLevel"> (optional)</param>
        /// <param name="allowedRoots"> (optional)</param>
        /// <param name="requestAuthorizationStrategyTarget"> (optional)</param>
        /// <param name="queueProviderFactoryTarget"> (optional)</param>
        /// <param name="packageBuilderTarget"> (optional)</param>
        /// <param name="triggersTarget"> (optional)</param>
        /// <param name="priorityQueues"> (optional)</param>
        /// <returns>OrgApacheSlingDistributionAgentImplQueueDistributionAgentFactoryInfo</returns>
        OrgApacheSlingDistributionAgentImplQueueDistributionAgentFactoryInfo OrgApacheSlingDistributionAgentImplQueueDistributionAgentFactory(NancyContext context, bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, string name, string title, string details, bool? enabled, string serviceName, string logLevel, List<string> allowedRoots, string requestAuthorizationStrategyTarget, string queueProviderFactoryTarget, string packageBuilderTarget, string triggersTarget, List<string> priorityQueues);

        /// <summary>
        /// 
        /// </summary>
        /// <param name="context">Context of request</param>
        /// <param name="post"> (optional)</param>
        /// <param name="apply"> (optional)</param>
        /// <param name="delete"> (optional)</param>
        /// <param name="action"> (optional)</param>
        /// <param name="location"> (optional)</param>
        /// <param name="propertylist"> (optional)</param>
        /// <param name="name"> (optional)</param>
        /// <param name="title"> (optional)</param>
        /// <param name="details"> (optional)</param>
        /// <param name="enabled"> (optional)</param>
        /// <param name="serviceName"> (optional)</param>
        /// <param name="logLevel"> (optional)</param>
        /// <param name="queueProcessingEnabled"> (optional)</param>
        /// <param name="packageExporterEndpoints"> (optional)</param>
        /// <param name="pullItems"> (optional)</param>
        /// <param name="httpConnTimeout"> (optional)</param>
        /// <param name="requestAuthorizationStrategyTarget"> (optional)</param>
        /// <param name="transportSecretProviderTarget"> (optional)</param>
        /// <param name="packageBuilderTarget"> (optional)</param>
        /// <param name="triggersTarget"> (optional)</param>
        /// <returns>OrgApacheSlingDistributionAgentImplReverseDistributionAgentFactoInfo</returns>
        OrgApacheSlingDistributionAgentImplReverseDistributionAgentFactoInfo OrgApacheSlingDistributionAgentImplReverseDistributionAgentFacto(NancyContext context, bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, string name, string title, string details, bool? enabled, string serviceName, string logLevel, bool? queueProcessingEnabled, List<string> packageExporterEndpoints, int? pullItems, int? httpConnTimeout, string requestAuthorizationStrategyTarget, string transportSecretProviderTarget, string packageBuilderTarget, string triggersTarget);

        /// <summary>
        /// 
        /// </summary>
        /// <param name="context">Context of request</param>
        /// <param name="post"> (optional)</param>
        /// <param name="apply"> (optional)</param>
        /// <param name="delete"> (optional)</param>
        /// <param name="action"> (optional)</param>
        /// <param name="location"> (optional)</param>
        /// <param name="propertylist"> (optional)</param>
        /// <param name="name"> (optional)</param>
        /// <param name="title"> (optional)</param>
        /// <param name="details"> (optional)</param>
        /// <param name="enabled"> (optional)</param>
        /// <param name="serviceName"> (optional)</param>
        /// <param name="logLevel"> (optional)</param>
        /// <param name="queueProcessingEnabled"> (optional)</param>
        /// <param name="packageExporterTarget"> (optional)</param>
        /// <param name="packageImporterTarget"> (optional)</param>
        /// <param name="requestAuthorizationStrategyTarget"> (optional)</param>
        /// <param name="triggersTarget"> (optional)</param>
        /// <returns>OrgApacheSlingDistributionAgentImplSimpleDistributionAgentFactorInfo</returns>
        OrgApacheSlingDistributionAgentImplSimpleDistributionAgentFactorInfo OrgApacheSlingDistributionAgentImplSimpleDistributionAgentFactor(NancyContext context, bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, string name, string title, string details, bool? enabled, string serviceName, string logLevel, bool? queueProcessingEnabled, string packageExporterTarget, string packageImporterTarget, string requestAuthorizationStrategyTarget, string triggersTarget);

        /// <summary>
        /// 
        /// </summary>
        /// <param name="context">Context of request</param>
        /// <param name="post"> (optional)</param>
        /// <param name="apply"> (optional)</param>
        /// <param name="delete"> (optional)</param>
        /// <param name="action"> (optional)</param>
        /// <param name="location"> (optional)</param>
        /// <param name="propertylist"> (optional)</param>
        /// <param name="name"> (optional)</param>
        /// <param name="title"> (optional)</param>
        /// <param name="details"> (optional)</param>
        /// <param name="enabled"> (optional)</param>
        /// <param name="serviceName"> (optional)</param>
        /// <param name="logLevel"> (optional)</param>
        /// <param name="queueProcessingEnabled"> (optional)</param>
        /// <param name="passiveQueues"> (optional)</param>
        /// <param name="packageExporterEndpoints"> (optional)</param>
        /// <param name="packageImporterEndpoints"> (optional)</param>
        /// <param name="retryStrategy"> (optional)</param>
        /// <param name="retryAttempts"> (optional)</param>
        /// <param name="pullItems"> (optional)</param>
        /// <param name="httpConnTimeout"> (optional)</param>
        /// <param name="requestAuthorizationStrategyTarget"> (optional)</param>
        /// <param name="transportSecretProviderTarget"> (optional)</param>
        /// <param name="packageBuilderTarget"> (optional)</param>
        /// <param name="triggersTarget"> (optional)</param>
        /// <returns>OrgApacheSlingDistributionAgentImplSyncDistributionAgentFactoryInfo</returns>
        OrgApacheSlingDistributionAgentImplSyncDistributionAgentFactoryInfo OrgApacheSlingDistributionAgentImplSyncDistributionAgentFactory(NancyContext context, bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, string name, string title, string details, bool? enabled, string serviceName, string logLevel, bool? queueProcessingEnabled, List<string> passiveQueues, List<string> packageExporterEndpoints, List<string> packageImporterEndpoints, string retryStrategy, int? retryAttempts, int? pullItems, int? httpConnTimeout, string requestAuthorizationStrategyTarget, string transportSecretProviderTarget, string packageBuilderTarget, string triggersTarget);

        /// <summary>
        /// 
        /// </summary>
        /// <param name="context">Context of request</param>
        /// <param name="post"> (optional)</param>
        /// <param name="apply"> (optional)</param>
        /// <param name="delete"> (optional)</param>
        /// <param name="action"> (optional)</param>
        /// <param name="location"> (optional)</param>
        /// <param name="propertylist"> (optional)</param>
        /// <param name="hcName"> (optional)</param>
        /// <param name="hcTags"> (optional)</param>
        /// <param name="hcMbeanName"> (optional)</param>
        /// <param name="numberOfRetriesAllowed"> (optional)</param>
        /// <returns>OrgApacheSlingDistributionMonitorDistributionQueueHealthCheckInfo</returns>
        OrgApacheSlingDistributionMonitorDistributionQueueHealthCheckInfo OrgApacheSlingDistributionMonitorDistributionQueueHealthCheck(NancyContext context, bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, string hcName, List<string> hcTags, string hcMbeanName, int? numberOfRetriesAllowed);

        /// <summary>
        /// 
        /// </summary>
        /// <param name="context">Context of request</param>
        /// <param name="post"> (optional)</param>
        /// <param name="apply"> (optional)</param>
        /// <param name="delete"> (optional)</param>
        /// <param name="action"> (optional)</param>
        /// <param name="location"> (optional)</param>
        /// <param name="propertylist"> (optional)</param>
        /// <param name="name"> (optional)</param>
        /// <param name="queue"> (optional)</param>
        /// <param name="dropInvalidItems"> (optional)</param>
        /// <param name="agentTarget"> (optional)</param>
        /// <returns>OrgApacheSlingDistributionPackagingImplExporterAgentDistributioInfo</returns>
        OrgApacheSlingDistributionPackagingImplExporterAgentDistributioInfo OrgApacheSlingDistributionPackagingImplExporterAgentDistributio(NancyContext context, bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, string name, string queue, bool? dropInvalidItems, string agentTarget);

        /// <summary>
        /// 
        /// </summary>
        /// <param name="context">Context of request</param>
        /// <param name="post"> (optional)</param>
        /// <param name="apply"> (optional)</param>
        /// <param name="delete"> (optional)</param>
        /// <param name="action"> (optional)</param>
        /// <param name="location"> (optional)</param>
        /// <param name="propertylist"> (optional)</param>
        /// <param name="name"> (optional)</param>
        /// <param name="packageBuilderTarget"> (optional)</param>
        /// <returns>OrgApacheSlingDistributionPackagingImplExporterLocalDistributioInfo</returns>
        OrgApacheSlingDistributionPackagingImplExporterLocalDistributioInfo OrgApacheSlingDistributionPackagingImplExporterLocalDistributio(NancyContext context, bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, string name, string packageBuilderTarget);

        /// <summary>
        /// 
        /// </summary>
        /// <param name="context">Context of request</param>
        /// <param name="post"> (optional)</param>
        /// <param name="apply"> (optional)</param>
        /// <param name="delete"> (optional)</param>
        /// <param name="action"> (optional)</param>
        /// <param name="location"> (optional)</param>
        /// <param name="propertylist"> (optional)</param>
        /// <param name="name"> (optional)</param>
        /// <param name="endpoints"> (optional)</param>
        /// <param name="pullItems"> (optional)</param>
        /// <param name="packageBuilderTarget"> (optional)</param>
        /// <param name="transportSecretProviderTarget"> (optional)</param>
        /// <returns>OrgApacheSlingDistributionPackagingImplExporterRemoteDistributiInfo</returns>
        OrgApacheSlingDistributionPackagingImplExporterRemoteDistributiInfo OrgApacheSlingDistributionPackagingImplExporterRemoteDistributi(NancyContext context, bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, string name, List<string> endpoints, int? pullItems, string packageBuilderTarget, string transportSecretProviderTarget);

        /// <summary>
        /// 
        /// </summary>
        /// <param name="context">Context of request</param>
        /// <param name="post"> (optional)</param>
        /// <param name="apply"> (optional)</param>
        /// <param name="delete"> (optional)</param>
        /// <param name="action"> (optional)</param>
        /// <param name="location"> (optional)</param>
        /// <param name="propertylist"> (optional)</param>
        /// <param name="name"> (optional)</param>
        /// <param name="packageBuilderTarget"> (optional)</param>
        /// <returns>OrgApacheSlingDistributionPackagingImplImporterLocalDistributioInfo</returns>
        OrgApacheSlingDistributionPackagingImplImporterLocalDistributioInfo OrgApacheSlingDistributionPackagingImplImporterLocalDistributio(NancyContext context, bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, string name, string packageBuilderTarget);

        /// <summary>
        /// 
        /// </summary>
        /// <param name="context">Context of request</param>
        /// <param name="post"> (optional)</param>
        /// <param name="apply"> (optional)</param>
        /// <param name="delete"> (optional)</param>
        /// <param name="action"> (optional)</param>
        /// <param name="location"> (optional)</param>
        /// <param name="propertylist"> (optional)</param>
        /// <param name="name"> (optional)</param>
        /// <param name="endpoints"> (optional)</param>
        /// <param name="transportSecretProviderTarget"> (optional)</param>
        /// <returns>OrgApacheSlingDistributionPackagingImplImporterRemoteDistributiInfo</returns>
        OrgApacheSlingDistributionPackagingImplImporterRemoteDistributiInfo OrgApacheSlingDistributionPackagingImplImporterRemoteDistributi(NancyContext context, bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, string name, List<string> endpoints, string transportSecretProviderTarget);

        /// <summary>
        /// 
        /// </summary>
        /// <param name="context">Context of request</param>
        /// <param name="post"> (optional)</param>
        /// <param name="apply"> (optional)</param>
        /// <param name="delete"> (optional)</param>
        /// <param name="action"> (optional)</param>
        /// <param name="location"> (optional)</param>
        /// <param name="propertylist"> (optional)</param>
        /// <param name="name"> (optional)</param>
        /// <param name="serviceName"> (optional)</param>
        /// <param name="path"> (optional)</param>
        /// <param name="privilegeName"> (optional)</param>
        /// <returns>OrgApacheSlingDistributionPackagingImplImporterRepositoryDistriInfo</returns>
        OrgApacheSlingDistributionPackagingImplImporterRepositoryDistriInfo OrgApacheSlingDistributionPackagingImplImporterRepositoryDistri(NancyContext context, bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, string name, string serviceName, string path, string privilegeName);

        /// <summary>
        /// 
        /// </summary>
        /// <param name="context">Context of request</param>
        /// <param name="post"> (optional)</param>
        /// <param name="apply"> (optional)</param>
        /// <param name="delete"> (optional)</param>
        /// <param name="action"> (optional)</param>
        /// <param name="location"> (optional)</param>
        /// <param name="propertylist"> (optional)</param>
        /// <param name="providerRoots"> (optional)</param>
        /// <param name="kind"> (optional)</param>
        /// <returns>OrgApacheSlingDistributionResourcesImplDistributionConfigurationInfo</returns>
        OrgApacheSlingDistributionResourcesImplDistributionConfigurationInfo OrgApacheSlingDistributionResourcesImplDistributionConfiguration(NancyContext context, bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, string providerRoots, string kind);

        /// <summary>
        /// 
        /// </summary>
        /// <param name="context">Context of request</param>
        /// <param name="post"> (optional)</param>
        /// <param name="apply"> (optional)</param>
        /// <param name="delete"> (optional)</param>
        /// <param name="action"> (optional)</param>
        /// <param name="location"> (optional)</param>
        /// <param name="propertylist"> (optional)</param>
        /// <param name="providerRoots"> (optional)</param>
        /// <param name="kind"> (optional)</param>
        /// <returns>OrgApacheSlingDistributionResourcesImplDistributionServiceResourInfo</returns>
        OrgApacheSlingDistributionResourcesImplDistributionServiceResourInfo OrgApacheSlingDistributionResourcesImplDistributionServiceResour(NancyContext context, bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, string providerRoots, string kind);

        /// <summary>
        /// 
        /// </summary>
        /// <param name="context">Context of request</param>
        /// <param name="post"> (optional)</param>
        /// <param name="apply"> (optional)</param>
        /// <param name="delete"> (optional)</param>
        /// <param name="action"> (optional)</param>
        /// <param name="location"> (optional)</param>
        /// <param name="propertylist"> (optional)</param>
        /// <param name="name"> (optional)</param>
        /// <param name="type"> (optional)</param>
        /// <param name="formatTarget"> (optional)</param>
        /// <param name="tempFsFolder"> (optional)</param>
        /// <param name="fileThreshold"> (optional)</param>
        /// <param name="memoryUnit"> (optional)</param>
        /// <param name="useOffHeapMemory"> (optional)</param>
        /// <param name="digestAlgorithm"> (optional)</param>
        /// <param name="monitoringQueueSize"> (optional)</param>
        /// <param name="cleanupDelay"> (optional)</param>
        /// <param name="packageFilters"> (optional)</param>
        /// <param name="propertyFilters"> (optional)</param>
        /// <returns>OrgApacheSlingDistributionSerializationImplDistributionPackageBuInfo</returns>
        OrgApacheSlingDistributionSerializationImplDistributionPackageBuInfo OrgApacheSlingDistributionSerializationImplDistributionPackageBu(NancyContext context, bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, string name, string type, string formatTarget, string tempFsFolder, int? fileThreshold, string memoryUnit, bool? useOffHeapMemory, string digestAlgorithm, int? monitoringQueueSize, int? cleanupDelay, List<string> packageFilters, List<string> propertyFilters);

        /// <summary>
        /// 
        /// </summary>
        /// <param name="context">Context of request</param>
        /// <param name="post"> (optional)</param>
        /// <param name="apply"> (optional)</param>
        /// <param name="delete"> (optional)</param>
        /// <param name="action"> (optional)</param>
        /// <param name="location"> (optional)</param>
        /// <param name="propertylist"> (optional)</param>
        /// <param name="name"> (optional)</param>
        /// <param name="type"> (optional)</param>
        /// <param name="importMode"> (optional)</param>
        /// <param name="aclHandling"> (optional)</param>
        /// <param name="packageRoots"> (optional)</param>
        /// <param name="packageFilters"> (optional)</param>
        /// <param name="propertyFilters"> (optional)</param>
        /// <param name="tempFsFolder"> (optional)</param>
        /// <param name="useBinaryReferences"> (optional)</param>
        /// <param name="autoSaveThreshold"> (optional)</param>
        /// <param name="cleanupDelay"> (optional)</param>
        /// <param name="fileThreshold"> (optional)</param>
        /// <param name="MEGA_BYTES"> (optional)</param>
        /// <param name="useOffHeapMemory"> (optional)</param>
        /// <param name="digestAlgorithm"> (optional)</param>
        /// <param name="monitoringQueueSize"> (optional)</param>
        /// <param name="pathsMapping"> (optional)</param>
        /// <param name="strictImport"> (optional)</param>
        /// <returns>OrgApacheSlingDistributionSerializationImplVltVaultDistributionInfo</returns>
        OrgApacheSlingDistributionSerializationImplVltVaultDistributionInfo OrgApacheSlingDistributionSerializationImplVltVaultDistribution(NancyContext context, bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, string name, string type, string importMode, string aclHandling, string packageRoots, List<string> packageFilters, List<string> propertyFilters, string tempFsFolder, bool? useBinaryReferences, int? autoSaveThreshold, int? cleanupDelay, int? fileThreshold, string MEGA_BYTES, bool? useOffHeapMemory, string digestAlgorithm, int? monitoringQueueSize, List<string> pathsMapping, bool? strictImport);

        /// <summary>
        /// 
        /// </summary>
        /// <param name="context">Context of request</param>
        /// <param name="post"> (optional)</param>
        /// <param name="apply"> (optional)</param>
        /// <param name="delete"> (optional)</param>
        /// <param name="action"> (optional)</param>
        /// <param name="location"> (optional)</param>
        /// <param name="propertylist"> (optional)</param>
        /// <param name="name"> (optional)</param>
        /// <param name="username"> (optional)</param>
        /// <param name="password"> (optional)</param>
        /// <returns>OrgApacheSlingDistributionTransportImplUserCredentialsDistributiInfo</returns>
        OrgApacheSlingDistributionTransportImplUserCredentialsDistributiInfo OrgApacheSlingDistributionTransportImplUserCredentialsDistributi(NancyContext context, bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, string name, string username, string password);

        /// <summary>
        /// 
        /// </summary>
        /// <param name="context">Context of request</param>
        /// <param name="post"> (optional)</param>
        /// <param name="apply"> (optional)</param>
        /// <param name="delete"> (optional)</param>
        /// <param name="action"> (optional)</param>
        /// <param name="location"> (optional)</param>
        /// <param name="propertylist"> (optional)</param>
        /// <param name="name"> (optional)</param>
        /// <param name="path"> (optional)</param>
        /// <returns>OrgApacheSlingDistributionTriggerImplDistributionEventDistributeInfo</returns>
        OrgApacheSlingDistributionTriggerImplDistributionEventDistributeInfo OrgApacheSlingDistributionTriggerImplDistributionEventDistribute(NancyContext context, bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, string name, string path);

        /// <summary>
        /// 
        /// </summary>
        /// <param name="context">Context of request</param>
        /// <param name="post"> (optional)</param>
        /// <param name="apply"> (optional)</param>
        /// <param name="delete"> (optional)</param>
        /// <param name="action"> (optional)</param>
        /// <param name="location"> (optional)</param>
        /// <param name="propertylist"> (optional)</param>
        /// <param name="name"> (optional)</param>
        /// <param name="path"> (optional)</param>
        /// <param name="ignoredPathsPatterns"> (optional)</param>
        /// <param name="serviceName"> (optional)</param>
        /// <param name="deep"> (optional)</param>
        /// <returns>OrgApacheSlingDistributionTriggerImplJcrEventDistributionTriggerInfo</returns>
        OrgApacheSlingDistributionTriggerImplJcrEventDistributionTriggerInfo OrgApacheSlingDistributionTriggerImplJcrEventDistributionTrigger(NancyContext context, bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, string name, string path, List<string> ignoredPathsPatterns, string serviceName, bool? deep);

        /// <summary>
        /// 
        /// </summary>
        /// <param name="context">Context of request</param>
        /// <param name="post"> (optional)</param>
        /// <param name="apply"> (optional)</param>
        /// <param name="delete"> (optional)</param>
        /// <param name="action"> (optional)</param>
        /// <param name="location"> (optional)</param>
        /// <param name="propertylist"> (optional)</param>
        /// <param name="name"> (optional)</param>
        /// <param name="path"> (optional)</param>
        /// <param name="serviceName"> (optional)</param>
        /// <param name="nuggetsPath"> (optional)</param>
        /// <returns>OrgApacheSlingDistributionTriggerImplPersistedJcrEventDistributiInfo</returns>
        OrgApacheSlingDistributionTriggerImplPersistedJcrEventDistributiInfo OrgApacheSlingDistributionTriggerImplPersistedJcrEventDistributi(NancyContext context, bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, string name, string path, string serviceName, string nuggetsPath);

        /// <summary>
        /// 
        /// </summary>
        /// <param name="context">Context of request</param>
        /// <param name="post"> (optional)</param>
        /// <param name="apply"> (optional)</param>
        /// <param name="delete"> (optional)</param>
        /// <param name="action"> (optional)</param>
        /// <param name="location"> (optional)</param>
        /// <param name="propertylist"> (optional)</param>
        /// <param name="name"> (optional)</param>
        /// <param name="endpoint"> (optional)</param>
        /// <param name="transportSecretProviderTarget"> (optional)</param>
        /// <returns>OrgApacheSlingDistributionTriggerImplRemoteEventDistributionTrigInfo</returns>
        OrgApacheSlingDistributionTriggerImplRemoteEventDistributionTrigInfo OrgApacheSlingDistributionTriggerImplRemoteEventDistributionTrig(NancyContext context, bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, string name, string endpoint, string transportSecretProviderTarget);

        /// <summary>
        /// 
        /// </summary>
        /// <param name="context">Context of request</param>
        /// <param name="post"> (optional)</param>
        /// <param name="apply"> (optional)</param>
        /// <param name="delete"> (optional)</param>
        /// <param name="action"> (optional)</param>
        /// <param name="location"> (optional)</param>
        /// <param name="propertylist"> (optional)</param>
        /// <param name="name"> (optional)</param>
        /// <param name="path"> (optional)</param>
        /// <returns>OrgApacheSlingDistributionTriggerImplResourceEventDistributionTrInfo</returns>
        OrgApacheSlingDistributionTriggerImplResourceEventDistributionTrInfo OrgApacheSlingDistributionTriggerImplResourceEventDistributionTr(NancyContext context, bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, string name, string path);

        /// <summary>
        /// 
        /// </summary>
        /// <param name="context">Context of request</param>
        /// <param name="post"> (optional)</param>
        /// <param name="apply"> (optional)</param>
        /// <param name="delete"> (optional)</param>
        /// <param name="action"> (optional)</param>
        /// <param name="location"> (optional)</param>
        /// <param name="propertylist"> (optional)</param>
        /// <param name="name"> (optional)</param>
        /// <param name="path"> (optional)</param>
        /// <param name="seconds"> (optional)</param>
        /// <param name="serviceName"> (optional)</param>
        /// <returns>OrgApacheSlingDistributionTriggerImplScheduledDistributionTriggeInfo</returns>
        OrgApacheSlingDistributionTriggerImplScheduledDistributionTriggeInfo OrgApacheSlingDistributionTriggerImplScheduledDistributionTrigge(NancyContext context, bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, string name, string path, string seconds, string serviceName);

        /// <summary>
        /// 
        /// </summary>
        /// <param name="context">Context of request</param>
        /// <param name="post"> (optional)</param>
        /// <param name="apply"> (optional)</param>
        /// <param name="delete"> (optional)</param>
        /// <param name="action"> (optional)</param>
        /// <param name="location"> (optional)</param>
        /// <param name="propertylist"> (optional)</param>
        /// <param name="osgiHttpWhiteboardContextSelect"> (optional)</param>
        /// <param name="osgiHttpWhiteboardListener"> (optional)</param>
        /// <param name="authSudoCookie"> (optional)</param>
        /// <param name="authSudoParameter"> (optional)</param>
        /// <param name="authAnnonymous"> (optional)</param>
        /// <param name="slingAuthRequirements"> (optional)</param>
        /// <param name="slingAuthAnonymousUser"> (optional)</param>
        /// <param name="slingAuthAnonymousPassword"> (optional)</param>
        /// <param name="authHttp"> (optional)</param>
        /// <param name="authHttpRealm"> (optional)</param>
        /// <param name="authUriSuffix"> (optional)</param>
        /// <returns>OrgApacheSlingEngineImplAuthSlingAuthenticatorInfo</returns>
        OrgApacheSlingEngineImplAuthSlingAuthenticatorInfo OrgApacheSlingEngineImplAuthSlingAuthenticator(NancyContext context, bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, string osgiHttpWhiteboardContextSelect, string osgiHttpWhiteboardListener, string authSudoCookie, string authSudoParameter, bool? authAnnonymous, List<string> slingAuthRequirements, string slingAuthAnonymousUser, string slingAuthAnonymousPassword, string authHttp, string authHttpRealm, List<string> authUriSuffix);

        /// <summary>
        /// 
        /// </summary>
        /// <param name="context">Context of request</param>
        /// <param name="post"> (optional)</param>
        /// <param name="apply"> (optional)</param>
        /// <param name="delete"> (optional)</param>
        /// <param name="action"> (optional)</param>
        /// <param name="location"> (optional)</param>
        /// <param name="propertylist"> (optional)</param>
        /// <param name="extensions"> (optional)</param>
        /// <param name="minDurationMs"> (optional)</param>
        /// <param name="maxDurationMs"> (optional)</param>
        /// <param name="compactLogFormat"> (optional)</param>
        /// <returns>OrgApacheSlingEngineImplDebugRequestProgressTrackerLogFilterInfo</returns>
        OrgApacheSlingEngineImplDebugRequestProgressTrackerLogFilterInfo OrgApacheSlingEngineImplDebugRequestProgressTrackerLogFilter(NancyContext context, bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, List<string> extensions, int? minDurationMs, int? maxDurationMs, bool? compactLogFormat);

        /// <summary>
        /// 
        /// </summary>
        /// <param name="context">Context of request</param>
        /// <param name="post"> (optional)</param>
        /// <param name="apply"> (optional)</param>
        /// <param name="delete"> (optional)</param>
        /// <param name="action"> (optional)</param>
        /// <param name="location"> (optional)</param>
        /// <param name="propertylist"> (optional)</param>
        /// <param name="requestLogOutput"> (optional)</param>
        /// <param name="requestLogOutputtype"> (optional)</param>
        /// <param name="requestLogEnabled"> (optional)</param>
        /// <param name="accessLogOutput"> (optional)</param>
        /// <param name="accessLogOutputtype"> (optional)</param>
        /// <param name="accessLogEnabled"> (optional)</param>
        /// <returns>OrgApacheSlingEngineImplLogRequestLoggerInfo</returns>
        OrgApacheSlingEngineImplLogRequestLoggerInfo OrgApacheSlingEngineImplLogRequestLogger(NancyContext context, bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, string requestLogOutput, int? requestLogOutputtype, bool? requestLogEnabled, string accessLogOutput, int? accessLogOutputtype, bool? accessLogEnabled);

        /// <summary>
        /// 
        /// </summary>
        /// <param name="context">Context of request</param>
        /// <param name="post"> (optional)</param>
        /// <param name="apply"> (optional)</param>
        /// <param name="delete"> (optional)</param>
        /// <param name="action"> (optional)</param>
        /// <param name="location"> (optional)</param>
        /// <param name="propertylist"> (optional)</param>
        /// <param name="requestLogServiceFormat"> (optional)</param>
        /// <param name="requestLogServiceOutput"> (optional)</param>
        /// <param name="requestLogServiceOutputtype"> (optional)</param>
        /// <param name="requestLogServiceOnentry"> (optional)</param>
        /// <returns>OrgApacheSlingEngineImplLogRequestLoggerServiceInfo</returns>
        OrgApacheSlingEngineImplLogRequestLoggerServiceInfo OrgApacheSlingEngineImplLogRequestLoggerService(NancyContext context, bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, string requestLogServiceFormat, string requestLogServiceOutput, int? requestLogServiceOutputtype, bool? requestLogServiceOnentry);

        /// <summary>
        /// 
        /// </summary>
        /// <param name="context">Context of request</param>
        /// <param name="post"> (optional)</param>
        /// <param name="apply"> (optional)</param>
        /// <param name="delete"> (optional)</param>
        /// <param name="action"> (optional)</param>
        /// <param name="location"> (optional)</param>
        /// <param name="propertylist"> (optional)</param>
        /// <param name="slingMaxCalls"> (optional)</param>
        /// <param name="slingMaxInclusions"> (optional)</param>
        /// <param name="slingTraceAllow"> (optional)</param>
        /// <param name="slingMaxRecordRequests"> (optional)</param>
        /// <param name="slingStorePatternRequests"> (optional)</param>
        /// <param name="slingServerinfo"> (optional)</param>
        /// <param name="slingAdditionalResponseHeaders"> (optional)</param>
        /// <returns>OrgApacheSlingEngineImplSlingMainServletInfo</returns>
        OrgApacheSlingEngineImplSlingMainServletInfo OrgApacheSlingEngineImplSlingMainServlet(NancyContext context, bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, int? slingMaxCalls, int? slingMaxInclusions, bool? slingTraceAllow, int? slingMaxRecordRequests, List<string> slingStorePatternRequests, string slingServerinfo, List<string> slingAdditionalResponseHeaders);

        /// <summary>
        /// 
        /// </summary>
        /// <param name="context">Context of request</param>
        /// <param name="post"> (optional)</param>
        /// <param name="apply"> (optional)</param>
        /// <param name="delete"> (optional)</param>
        /// <param name="action"> (optional)</param>
        /// <param name="location"> (optional)</param>
        /// <param name="propertylist"> (optional)</param>
        /// <param name="slingDefaultParameterEncoding"> (optional)</param>
        /// <param name="slingDefaultMaxParameters"> (optional)</param>
        /// <param name="fileLocation"> (optional)</param>
        /// <param name="fileThreshold"> (optional)</param>
        /// <param name="fileMax"> (optional)</param>
        /// <param name="requestMax"> (optional)</param>
        /// <param name="slingDefaultParameterCheckForAdditionalContainerParameters"> (optional)</param>
        /// <returns>OrgApacheSlingEngineParametersInfo</returns>
        OrgApacheSlingEngineParametersInfo OrgApacheSlingEngineParameters(NancyContext context, bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, string slingDefaultParameterEncoding, int? slingDefaultMaxParameters, string fileLocation, int? fileThreshold, int? fileMax, int? requestMax, bool? slingDefaultParameterCheckForAdditionalContainerParameters);

        /// <summary>
        /// 
        /// </summary>
        /// <param name="context">Context of request</param>
        /// <param name="post"> (optional)</param>
        /// <param name="apply"> (optional)</param>
        /// <param name="delete"> (optional)</param>
        /// <param name="action"> (optional)</param>
        /// <param name="location"> (optional)</param>
        /// <param name="propertylist"> (optional)</param>
        /// <param name="minPoolSize"> (optional)</param>
        /// <returns>OrgApacheSlingEventImplEventingThreadPoolInfo</returns>
        OrgApacheSlingEventImplEventingThreadPoolInfo OrgApacheSlingEventImplEventingThreadPool(NancyContext context, bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, int? minPoolSize);

        /// <summary>
        /// 
        /// </summary>
        /// <param name="context">Context of request</param>
        /// <param name="post"> (optional)</param>
        /// <param name="apply"> (optional)</param>
        /// <param name="delete"> (optional)</param>
        /// <param name="action"> (optional)</param>
        /// <param name="location"> (optional)</param>
        /// <param name="propertylist"> (optional)</param>
        /// <param name="queuePriority"> (optional)</param>
        /// <param name="queueRetries"> (optional)</param>
        /// <param name="queueRetrydelay"> (optional)</param>
        /// <param name="queueMaxparallel"> (optional)</param>
        /// <returns>OrgApacheSlingEventImplJobsDefaultJobManagerInfo</returns>
        OrgApacheSlingEventImplJobsDefaultJobManagerInfo OrgApacheSlingEventImplJobsDefaultJobManager(NancyContext context, bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, string queuePriority, int? queueRetries, int? queueRetrydelay, int? queueMaxparallel);

        /// <summary>
        /// 
        /// </summary>
        /// <param name="context">Context of request</param>
        /// <param name="post"> (optional)</param>
        /// <param name="apply"> (optional)</param>
        /// <param name="delete"> (optional)</param>
        /// <param name="action"> (optional)</param>
        /// <param name="location"> (optional)</param>
        /// <param name="propertylist"> (optional)</param>
        /// <param name="jobConsumermanagerDisableDistribution"> (optional)</param>
        /// <param name="startupDelay"> (optional)</param>
        /// <param name="cleanupPeriod"> (optional)</param>
        /// <returns>OrgApacheSlingEventImplJobsJcrPersistenceHandlerInfo</returns>
        OrgApacheSlingEventImplJobsJcrPersistenceHandlerInfo OrgApacheSlingEventImplJobsJcrPersistenceHandler(NancyContext context, bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, bool? jobConsumermanagerDisableDistribution, int? startupDelay, int? cleanupPeriod);

        /// <summary>
        /// 
        /// </summary>
        /// <param name="context">Context of request</param>
        /// <param name="post"> (optional)</param>
        /// <param name="apply"> (optional)</param>
        /// <param name="delete"> (optional)</param>
        /// <param name="action"> (optional)</param>
        /// <param name="location"> (optional)</param>
        /// <param name="propertylist"> (optional)</param>
        /// <param name="orgApacheSlingInstallerConfigurationPersist"> (optional)</param>
        /// <param name="jobConsumermanagerWhitelist"> (optional)</param>
        /// <param name="jobConsumermanagerBlacklist"> (optional)</param>
        /// <returns>OrgApacheSlingEventImplJobsJobConsumerManagerInfo</returns>
        OrgApacheSlingEventImplJobsJobConsumerManagerInfo OrgApacheSlingEventImplJobsJobConsumerManager(NancyContext context, bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, bool? orgApacheSlingInstallerConfigurationPersist, List<string> jobConsumermanagerWhitelist, List<string> jobConsumermanagerBlacklist);

        /// <summary>
        /// 
        /// </summary>
        /// <param name="context">Context of request</param>
        /// <param name="post"> (optional)</param>
        /// <param name="apply"> (optional)</param>
        /// <param name="delete"> (optional)</param>
        /// <param name="action"> (optional)</param>
        /// <param name="location"> (optional)</param>
        /// <param name="propertylist"> (optional)</param>
        /// <param name="queueName"> (optional)</param>
        /// <param name="queueTopics"> (optional)</param>
        /// <param name="queueType"> (optional)</param>
        /// <param name="queuePriority"> (optional)</param>
        /// <param name="queueRetries"> (optional)</param>
        /// <param name="queueRetrydelay"> (optional)</param>
        /// <param name="queueMaxparallel"> (optional)</param>
        /// <param name="queueKeepJobs"> (optional)</param>
        /// <param name="queuePreferRunOnCreationInstance"> (optional)</param>
        /// <param name="queueThreadPoolSize"> (optional)</param>
        /// <param name="serviceRanking"> (optional)</param>
        /// <returns>OrgApacheSlingEventJobsQueueConfigurationInfo</returns>
        OrgApacheSlingEventJobsQueueConfigurationInfo OrgApacheSlingEventJobsQueueConfiguration(NancyContext context, bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, string queueName, List<string> queueTopics, string queueType, string queuePriority, int? queueRetries, int? queueRetrydelay, decimal? queueMaxparallel, bool? queueKeepJobs, bool? queuePreferRunOnCreationInstance, int? queueThreadPoolSize, int? serviceRanking);

        /// <summary>
        /// 
        /// </summary>
        /// <param name="context">Context of request</param>
        /// <param name="post"> (optional)</param>
        /// <param name="apply"> (optional)</param>
        /// <param name="delete"> (optional)</param>
        /// <param name="action"> (optional)</param>
        /// <param name="location"> (optional)</param>
        /// <param name="propertylist"> (optional)</param>
        /// <param name="users"> (optional)</param>
        /// <param name="groups"> (optional)</param>
        /// <returns>OrgApacheSlingExtensionsWebconsolesecurityproviderInternalSlingWInfo</returns>
        OrgApacheSlingExtensionsWebconsolesecurityproviderInternalSlingWInfo OrgApacheSlingExtensionsWebconsolesecurityproviderInternalSlingW(NancyContext context, bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, List<string> users, List<string> groups);

        /// <summary>
        /// 
        /// </summary>
        /// <param name="context">Context of request</param>
        /// <param name="post"> (optional)</param>
        /// <param name="apply"> (optional)</param>
        /// <param name="delete"> (optional)</param>
        /// <param name="action"> (optional)</param>
        /// <param name="location"> (optional)</param>
        /// <param name="propertylist"> (optional)</param>
        /// <param name="name"> (optional)</param>
        /// <param name="description"> (optional)</param>
        /// <param name="enabled"> (optional)</param>
        /// <returns>OrgApacheSlingFeatureflagsFeatureInfo</returns>
        OrgApacheSlingFeatureflagsFeatureInfo OrgApacheSlingFeatureflagsFeature(NancyContext context, bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, string name, string description, bool? enabled);

        /// <summary>
        /// 
        /// </summary>
        /// <param name="context">Context of request</param>
        /// <param name="post"> (optional)</param>
        /// <param name="apply"> (optional)</param>
        /// <param name="delete"> (optional)</param>
        /// <param name="action"> (optional)</param>
        /// <param name="location"> (optional)</param>
        /// <param name="propertylist"> (optional)</param>
        /// <param name="name"> (optional)</param>
        /// <param name="description"> (optional)</param>
        /// <param name="enabled"> (optional)</param>
        /// <returns>OrgApacheSlingFeatureflagsImplConfiguredFeatureInfo</returns>
        OrgApacheSlingFeatureflagsImplConfiguredFeatureInfo OrgApacheSlingFeatureflagsImplConfiguredFeature(NancyContext context, bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, string name, string description, bool? enabled);

        /// <summary>
        /// 
        /// </summary>
        /// <param name="context">Context of request</param>
        /// <param name="post"> (optional)</param>
        /// <param name="apply"> (optional)</param>
        /// <param name="delete"> (optional)</param>
        /// <param name="action"> (optional)</param>
        /// <param name="location"> (optional)</param>
        /// <param name="propertylist"> (optional)</param>
        /// <param name="orgApacheSlingHapiToolsResourcetype"> (optional)</param>
        /// <param name="orgApacheSlingHapiToolsCollectionresourcetype"> (optional)</param>
        /// <param name="orgApacheSlingHapiToolsSearchpaths"> (optional)</param>
        /// <param name="orgApacheSlingHapiToolsExternalurl"> (optional)</param>
        /// <param name="orgApacheSlingHapiToolsEnabled"> (optional)</param>
        /// <returns>OrgApacheSlingHapiImplHApiUtilImplInfo</returns>
        OrgApacheSlingHapiImplHApiUtilImplInfo OrgApacheSlingHapiImplHApiUtilImpl(NancyContext context, bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, string orgApacheSlingHapiToolsResourcetype, string orgApacheSlingHapiToolsCollectionresourcetype, List<string> orgApacheSlingHapiToolsSearchpaths, string orgApacheSlingHapiToolsExternalurl, bool? orgApacheSlingHapiToolsEnabled);

        /// <summary>
        /// 
        /// </summary>
        /// <param name="context">Context of request</param>
        /// <param name="post"> (optional)</param>
        /// <param name="apply"> (optional)</param>
        /// <param name="delete"> (optional)</param>
        /// <param name="action"> (optional)</param>
        /// <param name="location"> (optional)</param>
        /// <param name="propertylist"> (optional)</param>
        /// <param name="hcName"> (optional)</param>
        /// <param name="hcTags"> (optional)</param>
        /// <param name="hcMbeanName"> (optional)</param>
        /// <param name="filterTags"> (optional)</param>
        /// <param name="filterCombineTagsWithOr"> (optional)</param>
        /// <returns>OrgApacheSlingHcCoreImplCompositeHealthCheckInfo</returns>
        OrgApacheSlingHcCoreImplCompositeHealthCheckInfo OrgApacheSlingHcCoreImplCompositeHealthCheck(NancyContext context, bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, string hcName, List<string> hcTags, string hcMbeanName, List<string> filterTags, bool? filterCombineTagsWithOr);

        /// <summary>
        /// 
        /// </summary>
        /// <param name="context">Context of request</param>
        /// <param name="post"> (optional)</param>
        /// <param name="apply"> (optional)</param>
        /// <param name="delete"> (optional)</param>
        /// <param name="action"> (optional)</param>
        /// <param name="location"> (optional)</param>
        /// <param name="propertylist"> (optional)</param>
        /// <param name="timeoutInMs"> (optional)</param>
        /// <param name="longRunningFutureThresholdForCriticalMs"> (optional)</param>
        /// <param name="resultCacheTtlInMs"> (optional)</param>
        /// <returns>OrgApacheSlingHcCoreImplExecutorHealthCheckExecutorImplInfo</returns>
        OrgApacheSlingHcCoreImplExecutorHealthCheckExecutorImplInfo OrgApacheSlingHcCoreImplExecutorHealthCheckExecutorImpl(NancyContext context, bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, int? timeoutInMs, int? longRunningFutureThresholdForCriticalMs, int? resultCacheTtlInMs);

        /// <summary>
        /// 
        /// </summary>
        /// <param name="context">Context of request</param>
        /// <param name="post"> (optional)</param>
        /// <param name="apply"> (optional)</param>
        /// <param name="delete"> (optional)</param>
        /// <param name="action"> (optional)</param>
        /// <param name="location"> (optional)</param>
        /// <param name="propertylist"> (optional)</param>
        /// <param name="hcName"> (optional)</param>
        /// <param name="hcTags"> (optional)</param>
        /// <param name="hcMbeanName"> (optional)</param>
        /// <param name="mbeanName"> (optional)</param>
        /// <param name="attributeName"> (optional)</param>
        /// <param name="attributeValueConstraint"> (optional)</param>
        /// <returns>OrgApacheSlingHcCoreImplJmxAttributeHealthCheckInfo</returns>
        OrgApacheSlingHcCoreImplJmxAttributeHealthCheckInfo OrgApacheSlingHcCoreImplJmxAttributeHealthCheck(NancyContext context, bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, string hcName, List<string> hcTags, string hcMbeanName, string mbeanName, string attributeName, string attributeValueConstraint);

        /// <summary>
        /// 
        /// </summary>
        /// <param name="context">Context of request</param>
        /// <param name="post"> (optional)</param>
        /// <param name="apply"> (optional)</param>
        /// <param name="delete"> (optional)</param>
        /// <param name="action"> (optional)</param>
        /// <param name="location"> (optional)</param>
        /// <param name="propertylist"> (optional)</param>
        /// <param name="hcName"> (optional)</param>
        /// <param name="hcTags"> (optional)</param>
        /// <param name="hcMbeanName"> (optional)</param>
        /// <param name="expression"> (optional)</param>
        /// <param name="languageExtension"> (optional)</param>
        /// <returns>OrgApacheSlingHcCoreImplScriptableHealthCheckInfo</returns>
        OrgApacheSlingHcCoreImplScriptableHealthCheckInfo OrgApacheSlingHcCoreImplScriptableHealthCheck(NancyContext context, bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, string hcName, List<string> hcTags, string hcMbeanName, string expression, string languageExtension);

        /// <summary>
        /// 
        /// </summary>
        /// <param name="context">Context of request</param>
        /// <param name="post"> (optional)</param>
        /// <param name="apply"> (optional)</param>
        /// <param name="delete"> (optional)</param>
        /// <param name="action"> (optional)</param>
        /// <param name="location"> (optional)</param>
        /// <param name="propertylist"> (optional)</param>
        /// <param name="servletPath"> (optional)</param>
        /// <param name="disabled"> (optional)</param>
        /// <param name="corsAccessControlAllowOrigin"> (optional)</param>
        /// <returns>OrgApacheSlingHcCoreImplServletHealthCheckExecutorServletInfo</returns>
        OrgApacheSlingHcCoreImplServletHealthCheckExecutorServletInfo OrgApacheSlingHcCoreImplServletHealthCheckExecutorServlet(NancyContext context, bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, string servletPath, bool? disabled, string corsAccessControlAllowOrigin);

        /// <summary>
        /// 
        /// </summary>
        /// <param name="context">Context of request</param>
        /// <param name="post"> (optional)</param>
        /// <param name="apply"> (optional)</param>
        /// <param name="delete"> (optional)</param>
        /// <param name="action"> (optional)</param>
        /// <param name="location"> (optional)</param>
        /// <param name="propertylist"> (optional)</param>
        /// <param name="totalWidth"> (optional)</param>
        /// <param name="colWidthName"> (optional)</param>
        /// <param name="colWidthResult"> (optional)</param>
        /// <param name="colWidthTiming"> (optional)</param>
        /// <returns>OrgApacheSlingHcCoreImplServletResultTxtVerboseSerializerInfo</returns>
        OrgApacheSlingHcCoreImplServletResultTxtVerboseSerializerInfo OrgApacheSlingHcCoreImplServletResultTxtVerboseSerializer(NancyContext context, bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, int? totalWidth, int? colWidthName, int? colWidthResult, int? colWidthTiming);

        /// <summary>
        /// 
        /// </summary>
        /// <param name="context">Context of request</param>
        /// <param name="post"> (optional)</param>
        /// <param name="apply"> (optional)</param>
        /// <param name="delete"> (optional)</param>
        /// <param name="action"> (optional)</param>
        /// <param name="location"> (optional)</param>
        /// <param name="propertylist"> (optional)</param>
        /// <param name="serviceRanking"> (optional)</param>
        /// <param name="slingFilterScope"> (optional)</param>
        /// <returns>OrgApacheSlingI18nImplI18NFilterInfo</returns>
        OrgApacheSlingI18nImplI18NFilterInfo OrgApacheSlingI18nImplI18NFilter(NancyContext context, bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, int? serviceRanking, List<string> slingFilterScope);

        /// <summary>
        /// 
        /// </summary>
        /// <param name="context">Context of request</param>
        /// <param name="post"> (optional)</param>
        /// <param name="apply"> (optional)</param>
        /// <param name="delete"> (optional)</param>
        /// <param name="action"> (optional)</param>
        /// <param name="location"> (optional)</param>
        /// <param name="propertylist"> (optional)</param>
        /// <param name="localeDefault"> (optional)</param>
        /// <param name="preloadBundles"> (optional)</param>
        /// <param name="invalidationDelay"> (optional)</param>
        /// <returns>OrgApacheSlingI18nImplJcrResourceBundleProviderInfo</returns>
        OrgApacheSlingI18nImplJcrResourceBundleProviderInfo OrgApacheSlingI18nImplJcrResourceBundleProvider(NancyContext context, bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, string localeDefault, bool? preloadBundles, int? invalidationDelay);

        /// <summary>
        /// 
        /// </summary>
        /// <param name="context">Context of request</param>
        /// <param name="post"> (optional)</param>
        /// <param name="apply"> (optional)</param>
        /// <param name="delete"> (optional)</param>
        /// <param name="action"> (optional)</param>
        /// <param name="location"> (optional)</param>
        /// <param name="propertylist"> (optional)</param>
        /// <param name="handlerSchemes"> (optional)</param>
        /// <param name="slingJcrinstallFolderNameRegexp"> (optional)</param>
        /// <param name="slingJcrinstallFolderMaxDepth"> (optional)</param>
        /// <param name="slingJcrinstallSearchPath"> (optional)</param>
        /// <param name="slingJcrinstallNewConfigPath"> (optional)</param>
        /// <param name="slingJcrinstallSignalPath"> (optional)</param>
        /// <param name="slingJcrinstallEnableWriteback"> (optional)</param>
        /// <returns>OrgApacheSlingInstallerProviderJcrImplJcrInstallerInfo</returns>
        OrgApacheSlingInstallerProviderJcrImplJcrInstallerInfo OrgApacheSlingInstallerProviderJcrImplJcrInstaller(NancyContext context, bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, List<string> handlerSchemes, string slingJcrinstallFolderNameRegexp, int? slingJcrinstallFolderMaxDepth, List<string> slingJcrinstallSearchPath, string slingJcrinstallNewConfigPath, string slingJcrinstallSignalPath, bool? slingJcrinstallEnableWriteback);

        /// <summary>
        /// 
        /// </summary>
        /// <param name="context">Context of request</param>
        /// <param name="post"> (optional)</param>
        /// <param name="apply"> (optional)</param>
        /// <param name="delete"> (optional)</param>
        /// <param name="action"> (optional)</param>
        /// <param name="location"> (optional)</param>
        /// <param name="propertylist"> (optional)</param>
        /// <param name="whitelistBypass"> (optional)</param>
        /// <param name="whitelistBundlesRegexp"> (optional)</param>
        /// <returns>OrgApacheSlingJcrBaseInternalLoginAdminWhitelistInfo</returns>
        OrgApacheSlingJcrBaseInternalLoginAdminWhitelistInfo OrgApacheSlingJcrBaseInternalLoginAdminWhitelist(NancyContext context, bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, bool? whitelistBypass, string whitelistBundlesRegexp);

        /// <summary>
        /// 
        /// </summary>
        /// <param name="context">Context of request</param>
        /// <param name="post"> (optional)</param>
        /// <param name="apply"> (optional)</param>
        /// <param name="delete"> (optional)</param>
        /// <param name="action"> (optional)</param>
        /// <param name="location"> (optional)</param>
        /// <param name="propertylist"> (optional)</param>
        /// <param name="whitelistName"> (optional)</param>
        /// <param name="whitelistBundles"> (optional)</param>
        /// <returns>OrgApacheSlingJcrBaseInternalLoginAdminWhitelistFragmentInfo</returns>
        OrgApacheSlingJcrBaseInternalLoginAdminWhitelistFragmentInfo OrgApacheSlingJcrBaseInternalLoginAdminWhitelistFragment(NancyContext context, bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, string whitelistName, List<string> whitelistBundles);

        /// <summary>
        /// 
        /// </summary>
        /// <param name="context">Context of request</param>
        /// <param name="post"> (optional)</param>
        /// <param name="apply"> (optional)</param>
        /// <param name="delete"> (optional)</param>
        /// <param name="action"> (optional)</param>
        /// <param name="location"> (optional)</param>
        /// <param name="propertylist"> (optional)</param>
        /// <param name="alias"> (optional)</param>
        /// <param name="davCreateAbsoluteUri"> (optional)</param>
        /// <param name="davProtectedhandlers"> (optional)</param>
        /// <returns>OrgApacheSlingJcrDavexImplServletsSlingDavExServletInfo</returns>
        OrgApacheSlingJcrDavexImplServletsSlingDavExServletInfo OrgApacheSlingJcrDavexImplServletsSlingDavExServlet(NancyContext context, bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, string alias, bool? davCreateAbsoluteUri, string davProtectedhandlers);

        /// <summary>
        /// 
        /// </summary>
        /// <param name="context">Context of request</param>
        /// <param name="post"> (optional)</param>
        /// <param name="apply"> (optional)</param>
        /// <param name="delete"> (optional)</param>
        /// <param name="action"> (optional)</param>
        /// <param name="location"> (optional)</param>
        /// <param name="propertylist"> (optional)</param>
        /// <param name="javaNamingFactoryInitial"> (optional)</param>
        /// <param name="javaNamingProviderUrl"> (optional)</param>
        /// <returns>OrgApacheSlingJcrJackrabbitServerJndiRegistrationSupportInfo</returns>
        OrgApacheSlingJcrJackrabbitServerJndiRegistrationSupportInfo OrgApacheSlingJcrJackrabbitServerJndiRegistrationSupport(NancyContext context, bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, string javaNamingFactoryInitial, string javaNamingProviderUrl);

        /// <summary>
        /// 
        /// </summary>
        /// <param name="context">Context of request</param>
        /// <param name="post"> (optional)</param>
        /// <param name="apply"> (optional)</param>
        /// <param name="delete"> (optional)</param>
        /// <param name="action"> (optional)</param>
        /// <param name="location"> (optional)</param>
        /// <param name="propertylist"> (optional)</param>
        /// <param name="port"> (optional)</param>
        /// <returns>OrgApacheSlingJcrJackrabbitServerRmiRegistrationSupportInfo</returns>
        OrgApacheSlingJcrJackrabbitServerRmiRegistrationSupportInfo OrgApacheSlingJcrJackrabbitServerRmiRegistrationSupport(NancyContext context, bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, int? port);

        /// <summary>
        /// 
        /// </summary>
        /// <param name="context">Context of request</param>
        /// <param name="post"> (optional)</param>
        /// <param name="apply"> (optional)</param>
        /// <param name="delete"> (optional)</param>
        /// <param name="action"> (optional)</param>
        /// <param name="location"> (optional)</param>
        /// <param name="propertylist"> (optional)</param>
        /// <param name="references"> (optional)</param>
        /// <returns>OrgApacheSlingJcrRepoinitImplRepositoryInitializerInfo</returns>
        OrgApacheSlingJcrRepoinitImplRepositoryInitializerInfo OrgApacheSlingJcrRepoinitImplRepositoryInitializer(NancyContext context, bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, List<string> references);

        /// <summary>
        /// 
        /// </summary>
        /// <param name="context">Context of request</param>
        /// <param name="post"> (optional)</param>
        /// <param name="apply"> (optional)</param>
        /// <param name="delete"> (optional)</param>
        /// <param name="action"> (optional)</param>
        /// <param name="location"> (optional)</param>
        /// <param name="propertylist"> (optional)</param>
        /// <param name="references"> (optional)</param>
        /// <param name="scripts"> (optional)</param>
        /// <returns>OrgApacheSlingJcrRepoinitRepositoryInitializerInfo</returns>
        OrgApacheSlingJcrRepoinitRepositoryInitializerInfo OrgApacheSlingJcrRepoinitRepositoryInitializer(NancyContext context, bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, List<string> references, List<string> scripts);

        /// <summary>
        /// 
        /// </summary>
        /// <param name="context">Context of request</param>
        /// <param name="post"> (optional)</param>
        /// <param name="apply"> (optional)</param>
        /// <param name="delete"> (optional)</param>
        /// <param name="action"> (optional)</param>
        /// <param name="location"> (optional)</param>
        /// <param name="propertylist"> (optional)</param>
        /// <param name="resourceResolverSearchpath"> (optional)</param>
        /// <param name="resourceResolverManglenamespaces"> (optional)</param>
        /// <param name="resourceResolverAllowDirect"> (optional)</param>
        /// <param name="resourceResolverRequiredProviders"> (optional)</param>
        /// <param name="resourceResolverRequiredProvidernames"> (optional)</param>
        /// <param name="resourceResolverVirtual"> (optional)</param>
        /// <param name="resourceResolverMapping"> (optional)</param>
        /// <param name="resourceResolverMapLocation"> (optional)</param>
        /// <param name="resourceResolverMapObservation"> (optional)</param>
        /// <param name="resourceResolverDefaultVanityRedirectStatus"> (optional)</param>
        /// <param name="resourceResolverEnableVanitypath"> (optional)</param>
        /// <param name="resourceResolverVanitypathMaxEntries"> (optional)</param>
        /// <param name="resourceResolverVanitypathMaxEntriesStartup"> (optional)</param>
        /// <param name="resourceResolverVanitypathBloomfilterMaxBytes"> (optional)</param>
        /// <param name="resourceResolverOptimizeAliasResolution"> (optional)</param>
        /// <param name="resourceResolverVanitypathWhitelist"> (optional)</param>
        /// <param name="resourceResolverVanitypathBlacklist"> (optional)</param>
        /// <param name="resourceResolverVanityPrecedence"> (optional)</param>
        /// <param name="resourceResolverProviderhandlingParanoid"> (optional)</param>
        /// <param name="resourceResolverLogClosing"> (optional)</param>
        /// <param name="resourceResolverLogUnclosed"> (optional)</param>
        /// <returns>OrgApacheSlingJcrResourceInternalJcrResourceResolverFactoryImplInfo</returns>
        OrgApacheSlingJcrResourceInternalJcrResourceResolverFactoryImplInfo OrgApacheSlingJcrResourceInternalJcrResourceResolverFactoryImpl(NancyContext context, bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, List<string> resourceResolverSearchpath, bool? resourceResolverManglenamespaces, bool? resourceResolverAllowDirect, List<string> resourceResolverRequiredProviders, List<string> resourceResolverRequiredProvidernames, List<string> resourceResolverVirtual, List<string> resourceResolverMapping, string resourceResolverMapLocation, List<string> resourceResolverMapObservation, int? resourceResolverDefaultVanityRedirectStatus, bool? resourceResolverEnableVanitypath, int? resourceResolverVanitypathMaxEntries, bool? resourceResolverVanitypathMaxEntriesStartup, int? resourceResolverVanitypathBloomfilterMaxBytes, bool? resourceResolverOptimizeAliasResolution, List<string> resourceResolverVanitypathWhitelist, List<string> resourceResolverVanitypathBlacklist, bool? resourceResolverVanityPrecedence, bool? resourceResolverProviderhandlingParanoid, bool? resourceResolverLogClosing, bool? resourceResolverLogUnclosed);

        /// <summary>
        /// 
        /// </summary>
        /// <param name="context">Context of request</param>
        /// <param name="post"> (optional)</param>
        /// <param name="apply"> (optional)</param>
        /// <param name="delete"> (optional)</param>
        /// <param name="action"> (optional)</param>
        /// <param name="location"> (optional)</param>
        /// <param name="propertylist"> (optional)</param>
        /// <param name="allowOnlySystemUser"> (optional)</param>
        /// <returns>OrgApacheSlingJcrResourceInternalJcrSystemUserValidatorInfo</returns>
        OrgApacheSlingJcrResourceInternalJcrSystemUserValidatorInfo OrgApacheSlingJcrResourceInternalJcrSystemUserValidator(NancyContext context, bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, bool? allowOnlySystemUser);

        /// <summary>
        /// 
        /// </summary>
        /// <param name="context">Context of request</param>
        /// <param name="post"> (optional)</param>
        /// <param name="apply"> (optional)</param>
        /// <param name="delete"> (optional)</param>
        /// <param name="action"> (optional)</param>
        /// <param name="location"> (optional)</param>
        /// <param name="propertylist"> (optional)</param>
        /// <param name="path"> (optional)</param>
        /// <param name="checkpathPrefix"> (optional)</param>
        /// <param name="jcrPath"> (optional)</param>
        /// <returns>OrgApacheSlingJcrResourcesecurityImplResourceAccessGateFactoryInfo</returns>
        OrgApacheSlingJcrResourcesecurityImplResourceAccessGateFactoryInfo OrgApacheSlingJcrResourcesecurityImplResourceAccessGateFactory(NancyContext context, bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, string path, string checkpathPrefix, string jcrPath);

        /// <summary>
        /// 
        /// </summary>
        /// <param name="context">Context of request</param>
        /// <param name="post"> (optional)</param>
        /// <param name="apply"> (optional)</param>
        /// <param name="delete"> (optional)</param>
        /// <param name="action"> (optional)</param>
        /// <param name="location"> (optional)</param>
        /// <param name="propertylist"> (optional)</param>
        /// <param name="serviceRanking"> (optional)</param>
        /// <param name="typeCollections"> (optional)</param>
        /// <param name="typeNoncollections"> (optional)</param>
        /// <param name="typeContent"> (optional)</param>
        /// <returns>OrgApacheSlingJcrWebdavImplHandlerDefaultHandlerServiceInfo</returns>
        OrgApacheSlingJcrWebdavImplHandlerDefaultHandlerServiceInfo OrgApacheSlingJcrWebdavImplHandlerDefaultHandlerService(NancyContext context, bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, int? serviceRanking, string typeCollections, string typeNoncollections, string typeContent);

        /// <summary>
        /// 
        /// </summary>
        /// <param name="context">Context of request</param>
        /// <param name="post"> (optional)</param>
        /// <param name="apply"> (optional)</param>
        /// <param name="delete"> (optional)</param>
        /// <param name="action"> (optional)</param>
        /// <param name="location"> (optional)</param>
        /// <param name="propertylist"> (optional)</param>
        /// <param name="serviceRanking"> (optional)</param>
        /// <returns>OrgApacheSlingJcrWebdavImplHandlerDirListingExportHandlerServicInfo</returns>
        OrgApacheSlingJcrWebdavImplHandlerDirListingExportHandlerServicInfo OrgApacheSlingJcrWebdavImplHandlerDirListingExportHandlerServic(NancyContext context, bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, int? serviceRanking);

        /// <summary>
        /// 
        /// </summary>
        /// <param name="context">Context of request</param>
        /// <param name="post"> (optional)</param>
        /// <param name="apply"> (optional)</param>
        /// <param name="delete"> (optional)</param>
        /// <param name="action"> (optional)</param>
        /// <param name="location"> (optional)</param>
        /// <param name="propertylist"> (optional)</param>
        /// <param name="davRoot"> (optional)</param>
        /// <param name="davCreateAbsoluteUri"> (optional)</param>
        /// <param name="davRealm"> (optional)</param>
        /// <param name="collectionTypes"> (optional)</param>
        /// <param name="filterPrefixes"> (optional)</param>
        /// <param name="filterTypes"> (optional)</param>
        /// <param name="filterUris"> (optional)</param>
        /// <param name="typeCollections"> (optional)</param>
        /// <param name="typeNoncollections"> (optional)</param>
        /// <param name="typeContent"> (optional)</param>
        /// <returns>OrgApacheSlingJcrWebdavImplServletsSimpleWebDavServletInfo</returns>
        OrgApacheSlingJcrWebdavImplServletsSimpleWebDavServletInfo OrgApacheSlingJcrWebdavImplServletsSimpleWebDavServlet(NancyContext context, bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, string davRoot, bool? davCreateAbsoluteUri, string davRealm, List<string> collectionTypes, List<string> filterPrefixes, string filterTypes, string filterUris, string typeCollections, string typeNoncollections, string typeContent);

        /// <summary>
        /// 
        /// </summary>
        /// <param name="context">Context of request</param>
        /// <param name="post"> (optional)</param>
        /// <param name="apply"> (optional)</param>
        /// <param name="delete"> (optional)</param>
        /// <param name="action"> (optional)</param>
        /// <param name="location"> (optional)</param>
        /// <param name="propertylist"> (optional)</param>
        /// <param name="providerRoots"> (optional)</param>
        /// <returns>OrgApacheSlingJmxProviderImplJMXResourceProviderInfo</returns>
        OrgApacheSlingJmxProviderImplJMXResourceProviderInfo OrgApacheSlingJmxProviderImplJMXResourceProvider(NancyContext context, bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, string providerRoots);

        /// <summary>
        /// 
        /// </summary>
        /// <param name="context">Context of request</param>
        /// <param name="post"> (optional)</param>
        /// <param name="apply"> (optional)</param>
        /// <param name="delete"> (optional)</param>
        /// <param name="action"> (optional)</param>
        /// <param name="location"> (optional)</param>
        /// <param name="propertylist"> (optional)</param>
        /// <param name="osgiHttpWhiteboardListener"> (optional)</param>
        /// <param name="osgiHttpWhiteboardContextSelect"> (optional)</param>
        /// <param name="maxRecursionDepth"> (optional)</param>
        /// <param name="cleanupJobPeriod"> (optional)</param>
        /// <returns>OrgApacheSlingModelsImplModelAdapterFactoryInfo</returns>
        OrgApacheSlingModelsImplModelAdapterFactoryInfo OrgApacheSlingModelsImplModelAdapterFactory(NancyContext context, bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, string osgiHttpWhiteboardListener, string osgiHttpWhiteboardContextSelect, int? maxRecursionDepth, int? cleanupJobPeriod);

        /// <summary>
        /// 
        /// </summary>
        /// <param name="context">Context of request</param>
        /// <param name="post"> (optional)</param>
        /// <param name="apply"> (optional)</param>
        /// <param name="delete"> (optional)</param>
        /// <param name="action"> (optional)</param>
        /// <param name="location"> (optional)</param>
        /// <param name="propertylist"> (optional)</param>
        /// <param name="maxRecursionLevels"> (optional)</param>
        /// <returns>OrgApacheSlingModelsJacksonexporterImplResourceModuleProviderInfo</returns>
        OrgApacheSlingModelsJacksonexporterImplResourceModuleProviderInfo OrgApacheSlingModelsJacksonexporterImplResourceModuleProvider(NancyContext context, bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, int? maxRecursionLevels);

        /// <summary>
        /// 
        /// </summary>
        /// <param name="context">Context of request</param>
        /// <param name="post"> (optional)</param>
        /// <param name="apply"> (optional)</param>
        /// <param name="delete"> (optional)</param>
        /// <param name="action"> (optional)</param>
        /// <param name="location"> (optional)</param>
        /// <param name="propertylist"> (optional)</param>
        /// <param name="felixInventoryPrinterName"> (optional)</param>
        /// <param name="felixInventoryPrinterTitle"> (optional)</param>
        /// <param name="path"> (optional)</param>
        /// <returns>OrgApacheSlingResourceInventoryImplResourceInventoryPrinterFactoInfo</returns>
        OrgApacheSlingResourceInventoryImplResourceInventoryPrinterFactoInfo OrgApacheSlingResourceInventoryImplResourceInventoryPrinterFacto(NancyContext context, bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, string felixInventoryPrinterName, string felixInventoryPrinterTitle, string path);

        /// <summary>
        /// 
        /// </summary>
        /// <param name="context">Context of request</param>
        /// <param name="post"> (optional)</param>
        /// <param name="apply"> (optional)</param>
        /// <param name="delete"> (optional)</param>
        /// <param name="action"> (optional)</param>
        /// <param name="location"> (optional)</param>
        /// <param name="propertylist"> (optional)</param>
        /// <param name="mergeRoot"> (optional)</param>
        /// <param name="mergeReadOnly"> (optional)</param>
        /// <returns>OrgApacheSlingResourcemergerImplMergedResourceProviderFactoryInfo</returns>
        OrgApacheSlingResourcemergerImplMergedResourceProviderFactoryInfo OrgApacheSlingResourcemergerImplMergedResourceProviderFactory(NancyContext context, bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, string mergeRoot, bool? mergeReadOnly);

        /// <summary>
        /// 
        /// </summary>
        /// <param name="context">Context of request</param>
        /// <param name="post"> (optional)</param>
        /// <param name="apply"> (optional)</param>
        /// <param name="delete"> (optional)</param>
        /// <param name="action"> (optional)</param>
        /// <param name="location"> (optional)</param>
        /// <param name="propertylist"> (optional)</param>
        /// <param name="mergeRoot"> (optional)</param>
        /// <param name="mergeReadOnly"> (optional)</param>
        /// <returns>OrgApacheSlingResourcemergerPickerOverridingInfo</returns>
        OrgApacheSlingResourcemergerPickerOverridingInfo OrgApacheSlingResourcemergerPickerOverriding(NancyContext context, bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, string mergeRoot, bool? mergeReadOnly);

        /// <summary>
        /// 
        /// </summary>
        /// <param name="context">Context of request</param>
        /// <param name="post"> (optional)</param>
        /// <param name="apply"> (optional)</param>
        /// <param name="delete"> (optional)</param>
        /// <param name="action"> (optional)</param>
        /// <param name="location"> (optional)</param>
        /// <param name="propertylist"> (optional)</param>
        /// <param name="orgApacheSlingScriptingCacheSize"> (optional)</param>
        /// <param name="orgApacheSlingScriptingCacheAdditionalExtensions"> (optional)</param>
        /// <returns>OrgApacheSlingScriptingCoreImplScriptCacheImplInfo</returns>
        OrgApacheSlingScriptingCoreImplScriptCacheImplInfo OrgApacheSlingScriptingCoreImplScriptCacheImpl(NancyContext context, bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, int? orgApacheSlingScriptingCacheSize, List<string> orgApacheSlingScriptingCacheAdditionalExtensions);

        /// <summary>
        /// 
        /// </summary>
        /// <param name="context">Context of request</param>
        /// <param name="post"> (optional)</param>
        /// <param name="apply"> (optional)</param>
        /// <param name="delete"> (optional)</param>
        /// <param name="action"> (optional)</param>
        /// <param name="location"> (optional)</param>
        /// <param name="propertylist"> (optional)</param>
        /// <param name="logStacktraceOnclose"> (optional)</param>
        /// <returns>OrgApacheSlingScriptingCoreImplScriptingResourceResolverProviderInfo</returns>
        OrgApacheSlingScriptingCoreImplScriptingResourceResolverProviderInfo OrgApacheSlingScriptingCoreImplScriptingResourceResolverProvider(NancyContext context, bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, bool? logStacktraceOnclose);

        /// <summary>
        /// 
        /// </summary>
        /// <param name="context">Context of request</param>
        /// <param name="post"> (optional)</param>
        /// <param name="apply"> (optional)</param>
        /// <param name="delete"> (optional)</param>
        /// <param name="action"> (optional)</param>
        /// <param name="location"> (optional)</param>
        /// <param name="propertylist"> (optional)</param>
        /// <param name="javaClassdebuginfo"> (optional)</param>
        /// <param name="javaJavaEncoding"> (optional)</param>
        /// <param name="javaCompilerSourceVM"> (optional)</param>
        /// <param name="javaCompilerTargetVM"> (optional)</param>
        /// <returns>OrgApacheSlingScriptingJavaImplJavaScriptEngineFactoryInfo</returns>
        OrgApacheSlingScriptingJavaImplJavaScriptEngineFactoryInfo OrgApacheSlingScriptingJavaImplJavaScriptEngineFactory(NancyContext context, bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, bool? javaClassdebuginfo, string javaJavaEncoding, string javaCompilerSourceVM, string javaCompilerTargetVM);

        /// <summary>
        /// 
        /// </summary>
        /// <param name="context">Context of request</param>
        /// <param name="post"> (optional)</param>
        /// <param name="apply"> (optional)</param>
        /// <param name="delete"> (optional)</param>
        /// <param name="action"> (optional)</param>
        /// <param name="location"> (optional)</param>
        /// <param name="propertylist"> (optional)</param>
        /// <param name="orgApacheSlingScriptingJavascriptRhinoOptLevel"> (optional)</param>
        /// <returns>OrgApacheSlingScriptingJavascriptInternalRhinoJavaScriptEngineFaInfo</returns>
        OrgApacheSlingScriptingJavascriptInternalRhinoJavaScriptEngineFaInfo OrgApacheSlingScriptingJavascriptInternalRhinoJavaScriptEngineFa(NancyContext context, bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, int? orgApacheSlingScriptingJavascriptRhinoOptLevel);

        /// <summary>
        /// 
        /// </summary>
        /// <param name="context">Context of request</param>
        /// <param name="post"> (optional)</param>
        /// <param name="apply"> (optional)</param>
        /// <param name="delete"> (optional)</param>
        /// <param name="action"> (optional)</param>
        /// <param name="location"> (optional)</param>
        /// <param name="propertylist"> (optional)</param>
        /// <param name="jasperCompilerTargetVM"> (optional)</param>
        /// <param name="jasperCompilerSourceVM"> (optional)</param>
        /// <param name="jasperClassdebuginfo"> (optional)</param>
        /// <param name="jasperEnablePooling"> (optional)</param>
        /// <param name="jasperIeClassId"> (optional)</param>
        /// <param name="jasperGenStringAsCharArray"> (optional)</param>
        /// <param name="jasperKeepgenerated"> (optional)</param>
        /// <param name="jasperMappedfile"> (optional)</param>
        /// <param name="jasperTrimSpaces"> (optional)</param>
        /// <param name="jasperDisplaySourceFragments"> (optional)</param>
        /// <param name="defaultIsSession"> (optional)</param>
        /// <returns>OrgApacheSlingScriptingJspJspScriptEngineFactoryInfo</returns>
        OrgApacheSlingScriptingJspJspScriptEngineFactoryInfo OrgApacheSlingScriptingJspJspScriptEngineFactory(NancyContext context, bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, string jasperCompilerTargetVM, string jasperCompilerSourceVM, bool? jasperClassdebuginfo, bool? jasperEnablePooling, string jasperIeClassId, bool? jasperGenStringAsCharArray, bool? jasperKeepgenerated, bool? jasperMappedfile, bool? jasperTrimSpaces, bool? jasperDisplaySourceFragments, bool? defaultIsSession);

        /// <summary>
        /// 
        /// </summary>
        /// <param name="context">Context of request</param>
        /// <param name="post"> (optional)</param>
        /// <param name="apply"> (optional)</param>
        /// <param name="delete"> (optional)</param>
        /// <param name="action"> (optional)</param>
        /// <param name="location"> (optional)</param>
        /// <param name="propertylist"> (optional)</param>
        /// <param name="orgApacheSlingScriptingSightlyJsBindings"> (optional)</param>
        /// <returns>OrgApacheSlingScriptingSightlyJsImplJsapiSlyBindingsValuesProvInfo</returns>
        OrgApacheSlingScriptingSightlyJsImplJsapiSlyBindingsValuesProvInfo OrgApacheSlingScriptingSightlyJsImplJsapiSlyBindingsValuesProv(NancyContext context, bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, List<string> orgApacheSlingScriptingSightlyJsBindings);

        /// <summary>
        /// 
        /// </summary>
        /// <param name="context">Context of request</param>
        /// <param name="post"> (optional)</param>
        /// <param name="apply"> (optional)</param>
        /// <param name="delete"> (optional)</param>
        /// <param name="action"> (optional)</param>
        /// <param name="location"> (optional)</param>
        /// <param name="propertylist"> (optional)</param>
        /// <param name="slingContentDispositionPaths"> (optional)</param>
        /// <param name="slingContentDispositionExcludedPaths"> (optional)</param>
        /// <param name="slingContentDispositionAllPaths"> (optional)</param>
        /// <returns>OrgApacheSlingSecurityImplContentDispositionFilterInfo</returns>
        OrgApacheSlingSecurityImplContentDispositionFilterInfo OrgApacheSlingSecurityImplContentDispositionFilter(NancyContext context, bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, List<string> slingContentDispositionPaths, List<string> slingContentDispositionExcludedPaths, bool? slingContentDispositionAllPaths);

        /// <summary>
        /// 
        /// </summary>
        /// <param name="context">Context of request</param>
        /// <param name="post"> (optional)</param>
        /// <param name="apply"> (optional)</param>
        /// <param name="delete"> (optional)</param>
        /// <param name="action"> (optional)</param>
        /// <param name="location"> (optional)</param>
        /// <param name="propertylist"> (optional)</param>
        /// <param name="allowEmpty"> (optional)</param>
        /// <param name="allowHosts"> (optional)</param>
        /// <param name="allowHostsRegexp"> (optional)</param>
        /// <param name="filterMethods"> (optional)</param>
        /// <param name="excludeAgentsRegexp"> (optional)</param>
        /// <returns>OrgApacheSlingSecurityImplReferrerFilterInfo</returns>
        OrgApacheSlingSecurityImplReferrerFilterInfo OrgApacheSlingSecurityImplReferrerFilter(NancyContext context, bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, bool? allowEmpty, List<string> allowHosts, List<string> allowHostsRegexp, List<string> filterMethods, List<string> excludeAgentsRegexp);

        /// <summary>
        /// 
        /// </summary>
        /// <param name="context">Context of request</param>
        /// <param name="post"> (optional)</param>
        /// <param name="apply"> (optional)</param>
        /// <param name="delete"> (optional)</param>
        /// <param name="action"> (optional)</param>
        /// <param name="location"> (optional)</param>
        /// <param name="propertylist"> (optional)</param>
        /// <param name="userMapping"> (optional)</param>
        /// <param name="userDefault"> (optional)</param>
        /// <param name="userEnableDefaultMapping"> (optional)</param>
        /// <param name="requireValidation"> (optional)</param>
        /// <returns>OrgApacheSlingServiceusermappingImplServiceUserMapperImplInfo</returns>
        OrgApacheSlingServiceusermappingImplServiceUserMapperImplInfo OrgApacheSlingServiceusermappingImplServiceUserMapperImpl(NancyContext context, bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, List<string> userMapping, string userDefault, bool? userEnableDefaultMapping, bool? requireValidation);

        /// <summary>
        /// 
        /// </summary>
        /// <param name="context">Context of request</param>
        /// <param name="post"> (optional)</param>
        /// <param name="apply"> (optional)</param>
        /// <param name="delete"> (optional)</param>
        /// <param name="action"> (optional)</param>
        /// <param name="location"> (optional)</param>
        /// <param name="propertylist"> (optional)</param>
        /// <param name="serviceRanking"> (optional)</param>
        /// <param name="userMapping"> (optional)</param>
        /// <returns>OrgApacheSlingServiceusermappingImplServiceUserMapperImplAmendedInfo</returns>
        OrgApacheSlingServiceusermappingImplServiceUserMapperImplAmendedInfo OrgApacheSlingServiceusermappingImplServiceUserMapperImplAmended(NancyContext context, bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, int? serviceRanking, List<string> userMapping);

        /// <summary>
        /// 
        /// </summary>
        /// <param name="context">Context of request</param>
        /// <param name="post"> (optional)</param>
        /// <param name="apply"> (optional)</param>
        /// <param name="delete"> (optional)</param>
        /// <param name="action"> (optional)</param>
        /// <param name="location"> (optional)</param>
        /// <param name="propertylist"> (optional)</param>
        /// <param name="aliases"> (optional)</param>
        /// <param name="index"> (optional)</param>
        /// <param name="indexFiles"> (optional)</param>
        /// <param name="enableHtml"> (optional)</param>
        /// <param name="enableJson"> (optional)</param>
        /// <param name="enableTxt"> (optional)</param>
        /// <param name="enableXml"> (optional)</param>
        /// <param name="jsonMaximumresults"> (optional)</param>
        /// <param name="ecmaSuport"> (optional)</param>
        /// <returns>OrgApacheSlingServletsGetDefaultGetServletInfo</returns>
        OrgApacheSlingServletsGetDefaultGetServletInfo OrgApacheSlingServletsGetDefaultGetServlet(NancyContext context, bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, List<string> aliases, bool? index, List<string> indexFiles, bool? enableHtml, bool? enableJson, bool? enableTxt, bool? enableXml, int? jsonMaximumresults, bool? ecmaSuport);

        /// <summary>
        /// 
        /// </summary>
        /// <param name="context">Context of request</param>
        /// <param name="post"> (optional)</param>
        /// <param name="apply"> (optional)</param>
        /// <param name="delete"> (optional)</param>
        /// <param name="action"> (optional)</param>
        /// <param name="location"> (optional)</param>
        /// <param name="propertylist"> (optional)</param>
        /// <param name="slingServletSelectors"> (optional)</param>
        /// <param name="ecmaSuport"> (optional)</param>
        /// <returns>OrgApacheSlingServletsGetImplVersionVersionInfoServletInfo</returns>
        OrgApacheSlingServletsGetImplVersionVersionInfoServletInfo OrgApacheSlingServletsGetImplVersionVersionInfoServlet(NancyContext context, bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, List<string> slingServletSelectors, bool? ecmaSuport);

        /// <summary>
        /// 
        /// </summary>
        /// <param name="context">Context of request</param>
        /// <param name="post"> (optional)</param>
        /// <param name="apply"> (optional)</param>
        /// <param name="delete"> (optional)</param>
        /// <param name="action"> (optional)</param>
        /// <param name="location"> (optional)</param>
        /// <param name="propertylist"> (optional)</param>
        /// <param name="schedulerExpression"> (optional)</param>
        /// <param name="schedulerConcurrent"> (optional)</param>
        /// <param name="chunkCleanupAge"> (optional)</param>
        /// <returns>OrgApacheSlingServletsPostImplHelperChunkCleanUpTaskInfo</returns>
        OrgApacheSlingServletsPostImplHelperChunkCleanUpTaskInfo OrgApacheSlingServletsPostImplHelperChunkCleanUpTask(NancyContext context, bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, string schedulerExpression, bool? schedulerConcurrent, int? chunkCleanupAge);

        /// <summary>
        /// 
        /// </summary>
        /// <param name="context">Context of request</param>
        /// <param name="post"> (optional)</param>
        /// <param name="apply"> (optional)</param>
        /// <param name="delete"> (optional)</param>
        /// <param name="action"> (optional)</param>
        /// <param name="location"> (optional)</param>
        /// <param name="propertylist"> (optional)</param>
        /// <param name="servletPostDateFormats"> (optional)</param>
        /// <param name="servletPostNodeNameHints"> (optional)</param>
        /// <param name="servletPostNodeNameMaxLength"> (optional)</param>
        /// <param name="servletPostCheckinNewVersionableNodes"> (optional)</param>
        /// <param name="servletPostAutoCheckout"> (optional)</param>
        /// <param name="servletPostAutoCheckin"> (optional)</param>
        /// <param name="servletPostIgnorePattern"> (optional)</param>
        /// <returns>OrgApacheSlingServletsPostImplSlingPostServletInfo</returns>
        OrgApacheSlingServletsPostImplSlingPostServletInfo OrgApacheSlingServletsPostImplSlingPostServlet(NancyContext context, bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, List<string> servletPostDateFormats, List<string> servletPostNodeNameHints, int? servletPostNodeNameMaxLength, bool? servletPostCheckinNewVersionableNodes, bool? servletPostAutoCheckout, bool? servletPostAutoCheckin, string servletPostIgnorePattern);

        /// <summary>
        /// 
        /// </summary>
        /// <param name="context">Context of request</param>
        /// <param name="post"> (optional)</param>
        /// <param name="apply"> (optional)</param>
        /// <param name="delete"> (optional)</param>
        /// <param name="action"> (optional)</param>
        /// <param name="location"> (optional)</param>
        /// <param name="propertylist"> (optional)</param>
        /// <param name="servletresolverServletRoot"> (optional)</param>
        /// <param name="servletresolverCacheSize"> (optional)</param>
        /// <param name="servletresolverPaths"> (optional)</param>
        /// <param name="servletresolverDefaultExtensions"> (optional)</param>
        /// <returns>OrgApacheSlingServletsResolverSlingServletResolverInfo</returns>
        OrgApacheSlingServletsResolverSlingServletResolverInfo OrgApacheSlingServletsResolverSlingServletResolver(NancyContext context, bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, string servletresolverServletRoot, int? servletresolverCacheSize, List<string> servletresolverPaths, List<string> servletresolverDefaultExtensions);

        /// <summary>
        /// 
        /// </summary>
        /// <param name="context">Context of request</param>
        /// <param name="post"> (optional)</param>
        /// <param name="apply"> (optional)</param>
        /// <param name="delete"> (optional)</param>
        /// <param name="action"> (optional)</param>
        /// <param name="location"> (optional)</param>
        /// <param name="propertylist"> (optional)</param>
        /// <param name="slingName"> (optional)</param>
        /// <param name="slingDescription"> (optional)</param>
        /// <returns>OrgApacheSlingSettingsImplSlingSettingsServiceImplInfo</returns>
        OrgApacheSlingSettingsImplSlingSettingsServiceImplInfo OrgApacheSlingSettingsImplSlingSettingsServiceImpl(NancyContext context, bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, string slingName, string slingDescription);

        /// <summary>
        /// 
        /// </summary>
        /// <param name="context">Context of request</param>
        /// <param name="post"> (optional)</param>
        /// <param name="apply"> (optional)</param>
        /// <param name="delete"> (optional)</param>
        /// <param name="action"> (optional)</param>
        /// <param name="location"> (optional)</param>
        /// <param name="propertylist"> (optional)</param>
        /// <param name="activeByDefault"> (optional)</param>
        /// <param name="defaultMessage"> (optional)</param>
        /// <returns>OrgApacheSlingStartupfilterImplStartupFilterImplInfo</returns>
        OrgApacheSlingStartupfilterImplStartupFilterImplInfo OrgApacheSlingStartupfilterImplStartupFilterImpl(NancyContext context, bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, bool? activeByDefault, string defaultMessage);

        /// <summary>
        /// 
        /// </summary>
        /// <param name="context">Context of request</param>
        /// <param name="post"> (optional)</param>
        /// <param name="apply"> (optional)</param>
        /// <param name="delete"> (optional)</param>
        /// <param name="action"> (optional)</param>
        /// <param name="location"> (optional)</param>
        /// <param name="propertylist"> (optional)</param>
        /// <param name="tenantRoot"> (optional)</param>
        /// <param name="tenantPathMatcher"> (optional)</param>
        /// <returns>OrgApacheSlingTenantInternalTenantProviderImplInfo</returns>
        OrgApacheSlingTenantInternalTenantProviderImplInfo OrgApacheSlingTenantInternalTenantProviderImpl(NancyContext context, bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, string tenantRoot, List<string> tenantPathMatcher);

        /// <summary>
        /// 
        /// </summary>
        /// <param name="context">Context of request</param>
        /// <param name="post"> (optional)</param>
        /// <param name="apply"> (optional)</param>
        /// <param name="delete"> (optional)</param>
        /// <param name="action"> (optional)</param>
        /// <param name="location"> (optional)</param>
        /// <param name="propertylist"> (optional)</param>
        /// <param name="tracerSets"> (optional)</param>
        /// <param name="enabled"> (optional)</param>
        /// <param name="servletEnabled"> (optional)</param>
        /// <param name="recordingCacheSizeInMB"> (optional)</param>
        /// <param name="recordingCacheDurationInSecs"> (optional)</param>
        /// <param name="recordingCompressionEnabled"> (optional)</param>
        /// <param name="gzipResponse"> (optional)</param>
        /// <returns>OrgApacheSlingTracerInternalLogTracerInfo</returns>
        OrgApacheSlingTracerInternalLogTracerInfo OrgApacheSlingTracerInternalLogTracer(NancyContext context, bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, List<string> tracerSets, bool? enabled, bool? servletEnabled, int? recordingCacheSizeInMB, int? recordingCacheDurationInSecs, bool? recordingCompressionEnabled, bool? gzipResponse);

        /// <summary>
        /// 
        /// </summary>
        /// <param name="context">Context of request</param>
        /// <param name="post"> (optional)</param>
        /// <param name="apply"> (optional)</param>
        /// <param name="delete"> (optional)</param>
        /// <param name="action"> (optional)</param>
        /// <param name="location"> (optional)</param>
        /// <param name="propertylist"> (optional)</param>
        /// <param name="policyPath"> (optional)</param>
        /// <returns>OrgApacheSlingXssImplXSSFilterImplInfo</returns>
        OrgApacheSlingXssImplXSSFilterImplInfo OrgApacheSlingXssImplXSSFilterImpl(NancyContext context, bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, string policyPath);
    }

    /// <summary>
    /// Abstraction of ConfigmgrService.
    /// </summary>
    public abstract class AbstractConfigmgrService: ConfigmgrService
    {
        public virtual AdaptiveFormAndInteractiveCommunicationWebChannelConfigurationInfo AdaptiveFormAndInteractiveCommunicationWebChannelConfiguration(NancyContext context, bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, bool? showPlaceholder, int? maximumCacheEntries, string afScriptingCompatversion, bool? makeFileNameUnique, bool? generatingCompliantData)
        {
            return AdaptiveFormAndInteractiveCommunicationWebChannelConfiguration(post, apply, delete, action, location, propertylist, showPlaceholder, maximumCacheEntries, afScriptingCompatversion, makeFileNameUnique, generatingCompliantData);
        }

        public virtual AdaptiveFormAndInteractiveCommunicationWebChannelThemeConfigurInfo AdaptiveFormAndInteractiveCommunicationWebChannelThemeConfigur(NancyContext context, bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, List<string> fontList)
        {
            return AdaptiveFormAndInteractiveCommunicationWebChannelThemeConfigur(post, apply, delete, action, location, propertylist, fontList);
        }

        public virtual AnalyticsComponentQueryCacheServiceInfo AnalyticsComponentQueryCacheService(NancyContext context, bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, int? cqAnalyticsComponentQueryCacheSize)
        {
            return AnalyticsComponentQueryCacheService(post, apply, delete, action, location, propertylist, cqAnalyticsComponentQueryCacheSize);
        }

        public virtual ApacheSlingHealthCheckResultHTMLSerializerInfo ApacheSlingHealthCheckResultHTMLSerializer(NancyContext context, bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, string styleString)
        {
            return ApacheSlingHealthCheckResultHTMLSerializer(post, apply, delete, action, location, propertylist, styleString);
        }

        public virtual ComAdobeAemFormsndocumentsConfigAEMFormsManagerConfigurationInfo ComAdobeAemFormsndocumentsConfigAEMFormsManagerConfiguration(NancyContext context, bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, bool? formsManagerConfigIncludeOOTBTemplates, bool? formsManagerConfigIncludeDeprecatedTemplates)
        {
            return ComAdobeAemFormsndocumentsConfigAEMFormsManagerConfiguration(post, apply, delete, action, location, propertylist, formsManagerConfigIncludeOOTBTemplates, formsManagerConfigIncludeDeprecatedTemplates);
        }

        public virtual ComAdobeAemTransactionCoreImplTransactionRecorderInfo ComAdobeAemTransactionCoreImplTransactionRecorder(NancyContext context, bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, bool? isTransactionRecordingEnabled)
        {
            return ComAdobeAemTransactionCoreImplTransactionRecorder(post, apply, delete, action, location, propertylist, isTransactionRecordingEnabled);
        }

        public virtual ComAdobeAemUpgradePrechecksHcImplDeprecateIndexesHCInfo ComAdobeAemUpgradePrechecksHcImplDeprecateIndexesHC(NancyContext context, bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, string hcName, List<string> hcTags, string hcMbeanName)
        {
            return ComAdobeAemUpgradePrechecksHcImplDeprecateIndexesHC(post, apply, delete, action, location, propertylist, hcName, hcTags, hcMbeanName);
        }

        public virtual ComAdobeAemUpgradePrechecksHcImplReplicationAgentsDisabledHCInfo ComAdobeAemUpgradePrechecksHcImplReplicationAgentsDisabledHC(NancyContext context, bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, string hcName, List<string> hcTags, string hcMbeanName)
        {
            return ComAdobeAemUpgradePrechecksHcImplReplicationAgentsDisabledHC(post, apply, delete, action, location, propertylist, hcName, hcTags, hcMbeanName);
        }

        public virtual ComAdobeAemUpgradePrechecksMbeanImplPreUpgradeTasksMBeanImplInfo ComAdobeAemUpgradePrechecksMbeanImplPreUpgradeTasksMBeanImpl(NancyContext context, bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, List<string> preUpgradeMaintenanceTasks, List<string> preUpgradeHcTags)
        {
            return ComAdobeAemUpgradePrechecksMbeanImplPreUpgradeTasksMBeanImpl(post, apply, delete, action, location, propertylist, preUpgradeMaintenanceTasks, preUpgradeHcTags);
        }

        public virtual ComAdobeAemUpgradePrechecksTasksImplConsistencyCheckTaskImplInfo ComAdobeAemUpgradePrechecksTasksImplConsistencyCheckTaskImpl(NancyContext context, bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, string rootPath, bool? fixInconsistencies)
        {
            return ComAdobeAemUpgradePrechecksTasksImplConsistencyCheckTaskImpl(post, apply, delete, action, location, propertylist, rootPath, fixInconsistencies);
        }

        public virtual ComAdobeCqAccountApiAccountManagementServiceInfo ComAdobeCqAccountApiAccountManagementService(NancyContext context, bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, int? cqAccountmanagerTokenValidityPeriod, string cqAccountmanagerConfigRequestnewaccountMail, string cqAccountmanagerConfigRequestnewpwdMail)
        {
            return ComAdobeCqAccountApiAccountManagementService(post, apply, delete, action, location, propertylist, cqAccountmanagerTokenValidityPeriod, cqAccountmanagerConfigRequestnewaccountMail, cqAccountmanagerConfigRequestnewpwdMail);
        }

        public virtual ComAdobeCqAccountImplAccountManagementServletInfo ComAdobeCqAccountImplAccountManagementServlet(NancyContext context, bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, string cqAccountmanagerConfigInformnewaccountMail, string cqAccountmanagerConfigInformnewpwdMail)
        {
            return ComAdobeCqAccountImplAccountManagementServlet(post, apply, delete, action, location, propertylist, cqAccountmanagerConfigInformnewaccountMail, cqAccountmanagerConfigInformnewpwdMail);
        }

        public virtual ComAdobeCqAddressImplLocationLocationListServletInfo ComAdobeCqAddressImplLocationLocationListServlet(NancyContext context, bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, int? cqAddressLocationDefaultMaxResults)
        {
            return ComAdobeCqAddressImplLocationLocationListServlet(post, apply, delete, action, location, propertylist, cqAddressLocationDefaultMaxResults);
        }

        public virtual ComAdobeCqAuditPurgeDamInfo ComAdobeCqAuditPurgeDam(NancyContext context, bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, string auditlogRuleName, string auditlogRuleContentpath, int? auditlogRuleMinimumage, string auditlogRuleTypes)
        {
            return ComAdobeCqAuditPurgeDam(post, apply, delete, action, location, propertylist, auditlogRuleName, auditlogRuleContentpath, auditlogRuleMinimumage, auditlogRuleTypes);
        }

        public virtual ComAdobeCqAuditPurgePagesInfo ComAdobeCqAuditPurgePages(NancyContext context, bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, string auditlogRuleName, string auditlogRuleContentpath, int? auditlogRuleMinimumage, string auditlogRuleTypes)
        {
            return ComAdobeCqAuditPurgePages(post, apply, delete, action, location, propertylist, auditlogRuleName, auditlogRuleContentpath, auditlogRuleMinimumage, auditlogRuleTypes);
        }

        public virtual ComAdobeCqAuditPurgeReplicationInfo ComAdobeCqAuditPurgeReplication(NancyContext context, bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, string auditlogRuleName, string auditlogRuleContentpath, int? auditlogRuleMinimumage, string auditlogRuleTypes)
        {
            return ComAdobeCqAuditPurgeReplication(post, apply, delete, action, location, propertylist, auditlogRuleName, auditlogRuleContentpath, auditlogRuleMinimumage, auditlogRuleTypes);
        }

        public virtual ComAdobeCqCdnRewriterImplAWSCloudFrontRewriterInfo ComAdobeCqCdnRewriterImplAWSCloudFrontRewriter(NancyContext context, bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, int? serviceRanking, string keypairId, string keypairAlias, List<string> cdnrewriterAttributes, string cdnRewriterDistributionDomain)
        {
            return ComAdobeCqCdnRewriterImplAWSCloudFrontRewriter(post, apply, delete, action, location, propertylist, serviceRanking, keypairId, keypairAlias, cdnrewriterAttributes, cdnRewriterDistributionDomain);
        }

        public virtual ComAdobeCqCdnRewriterImplCDNConfigServiceImplInfo ComAdobeCqCdnRewriterImplCDNConfigServiceImpl(NancyContext context, bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, string cdnConfigDistributionDomain, bool? cdnConfigEnableRewriting, List<string> cdnConfigPathPrefixes, int? cdnConfigCdnttl, string cdnConfigApplicationProtocol)
        {
            return ComAdobeCqCdnRewriterImplCDNConfigServiceImpl(post, apply, delete, action, location, propertylist, cdnConfigDistributionDomain, cdnConfigEnableRewriting, cdnConfigPathPrefixes, cdnConfigCdnttl, cdnConfigApplicationProtocol);
        }

        public virtual ComAdobeCqCdnRewriterImplCDNRewriterInfo ComAdobeCqCdnRewriterImplCDNRewriter(NancyContext context, bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, int? serviceRanking, List<string> cdnrewriterAttributes, string cdnRewriterDistributionDomain)
        {
            return ComAdobeCqCdnRewriterImplCDNRewriter(post, apply, delete, action, location, propertylist, serviceRanking, cdnrewriterAttributes, cdnRewriterDistributionDomain);
        }

        public virtual ComAdobeCqCloudconfigCoreImplConfigurationReplicationEventHandleInfo ComAdobeCqCloudconfigCoreImplConfigurationReplicationEventHandle(NancyContext context, bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, List<string> flushAgents)
        {
            return ComAdobeCqCloudconfigCoreImplConfigurationReplicationEventHandle(post, apply, delete, action, location, propertylist, flushAgents);
        }

        public virtual ComAdobeCqCommerceImplAssetDynamicImageHandlerInfo ComAdobeCqCommerceImplAssetDynamicImageHandler(NancyContext context, bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, bool? cqCommerceAssetHandlerActive, string cqCommerceAssetHandlerName)
        {
            return ComAdobeCqCommerceImplAssetDynamicImageHandler(post, apply, delete, action, location, propertylist, cqCommerceAssetHandlerActive, cqCommerceAssetHandlerName);
        }

        public virtual ComAdobeCqCommerceImplAssetProductAssetHandlerProviderImplInfo ComAdobeCqCommerceImplAssetProductAssetHandlerProviderImpl(NancyContext context, bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, string cqCommerceAssetHandlerFallback)
        {
            return ComAdobeCqCommerceImplAssetProductAssetHandlerProviderImpl(post, apply, delete, action, location, propertylist, cqCommerceAssetHandlerFallback);
        }

        public virtual ComAdobeCqCommerceImplAssetStaticImageHandlerInfo ComAdobeCqCommerceImplAssetStaticImageHandler(NancyContext context, bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, bool? cqCommerceAssetHandlerActive, string cqCommerceAssetHandlerName)
        {
            return ComAdobeCqCommerceImplAssetStaticImageHandler(post, apply, delete, action, location, propertylist, cqCommerceAssetHandlerActive, cqCommerceAssetHandlerName);
        }

        public virtual ComAdobeCqCommerceImplAssetVideoHandlerInfo ComAdobeCqCommerceImplAssetVideoHandler(NancyContext context, bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, bool? cqCommerceAssetHandlerActive, string cqCommerceAssetHandlerName)
        {
            return ComAdobeCqCommerceImplAssetVideoHandler(post, apply, delete, action, location, propertylist, cqCommerceAssetHandlerActive, cqCommerceAssetHandlerName);
        }

        public virtual ComAdobeCqCommerceImplPromotionPromotionManagerImplInfo ComAdobeCqCommerceImplPromotionPromotionManagerImpl(NancyContext context, bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, string cqCommercePromotionRoot)
        {
            return ComAdobeCqCommerceImplPromotionPromotionManagerImpl(post, apply, delete, action, location, propertylist, cqCommercePromotionRoot);
        }

        public virtual ComAdobeCqCommercePimImplCataloggeneratorCatalogGeneratorImplInfo ComAdobeCqCommercePimImplCataloggeneratorCatalogGeneratorImpl(NancyContext context, bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, int? cqCommerceCataloggeneratorBucketsize, string cqCommerceCataloggeneratorBucketname, List<string> cqCommerceCataloggeneratorExcludedtemplateproperties)
        {
            return ComAdobeCqCommercePimImplCataloggeneratorCatalogGeneratorImpl(post, apply, delete, action, location, propertylist, cqCommerceCataloggeneratorBucketsize, cqCommerceCataloggeneratorBucketname, cqCommerceCataloggeneratorExcludedtemplateproperties);
        }

        public virtual ComAdobeCqCommercePimImplPageEventListenerInfo ComAdobeCqCommercePimImplPageEventListener(NancyContext context, bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, bool? cqCommercePageeventlistenerEnabled)
        {
            return ComAdobeCqCommercePimImplPageEventListener(post, apply, delete, action, location, propertylist, cqCommercePageeventlistenerEnabled);
        }

        public virtual ComAdobeCqCommercePimImplProductfeedProductFeedServiceImplInfo ComAdobeCqCommercePimImplProductfeedProductFeedServiceImpl(NancyContext context, bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, string feedGeneratorAlgorithm)
        {
            return ComAdobeCqCommercePimImplProductfeedProductFeedServiceImpl(post, apply, delete, action, location, propertylist, feedGeneratorAlgorithm);
        }

        public virtual ComAdobeCqContentinsightImplReportingServicesSettingsProviderInfo ComAdobeCqContentinsightImplReportingServicesSettingsProvider(NancyContext context, bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, string reportingservicesUrl)
        {
            return ComAdobeCqContentinsightImplReportingServicesSettingsProvider(post, apply, delete, action, location, propertylist, reportingservicesUrl);
        }

        public virtual ComAdobeCqContentinsightImplServletsBrightEdgeProxyServletInfo ComAdobeCqContentinsightImplServletsBrightEdgeProxyServlet(NancyContext context, bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, string brightedgeUrl)
        {
            return ComAdobeCqContentinsightImplServletsBrightEdgeProxyServlet(post, apply, delete, action, location, propertylist, brightedgeUrl);
        }

        public virtual ComAdobeCqContentinsightImplServletsReportingServicesProxyServleInfo ComAdobeCqContentinsightImplServletsReportingServicesProxyServle(NancyContext context, bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, List<string> reportingservicesProxyWhitelist)
        {
            return ComAdobeCqContentinsightImplServletsReportingServicesProxyServle(post, apply, delete, action, location, propertylist, reportingservicesProxyWhitelist);
        }

        public virtual ComAdobeCqDamCfmImplComponentComponentConfigImplInfo ComAdobeCqDamCfmImplComponentComponentConfigImpl(NancyContext context, bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, string damCfmComponentResourceType, string damCfmComponentFileReferenceProp, string damCfmComponentElementsProp, string damCfmComponentVariationProp)
        {
            return ComAdobeCqDamCfmImplComponentComponentConfigImpl(post, apply, delete, action, location, propertylist, damCfmComponentResourceType, damCfmComponentFileReferenceProp, damCfmComponentElementsProp, damCfmComponentVariationProp);
        }

        public virtual ComAdobeCqDamCfmImplConfFeatureConfigImplInfo ComAdobeCqDamCfmImplConfFeatureConfigImpl(NancyContext context, bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, List<string> damCfmResourceTypes, List<string> damCfmReferenceProperties)
        {
            return ComAdobeCqDamCfmImplConfFeatureConfigImpl(post, apply, delete, action, location, propertylist, damCfmResourceTypes, damCfmReferenceProperties);
        }

        public virtual ComAdobeCqDamCfmImplContentRewriterAssetProcessorInfo ComAdobeCqDamCfmImplContentRewriterAssetProcessor(NancyContext context, bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, string pipelineType)
        {
            return ComAdobeCqDamCfmImplContentRewriterAssetProcessor(post, apply, delete, action, location, propertylist, pipelineType);
        }

        public virtual ComAdobeCqDamCfmImplContentRewriterParRangeFilterInfo ComAdobeCqDamCfmImplContentRewriterParRangeFilter(NancyContext context, bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, string pipelineType)
        {
            return ComAdobeCqDamCfmImplContentRewriterParRangeFilter(post, apply, delete, action, location, propertylist, pipelineType);
        }

        public virtual ComAdobeCqDamCfmImplContentRewriterPayloadFilterInfo ComAdobeCqDamCfmImplContentRewriterPayloadFilter(NancyContext context, bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, string pipelineType)
        {
            return ComAdobeCqDamCfmImplContentRewriterPayloadFilter(post, apply, delete, action, location, propertylist, pipelineType);
        }

        public virtual ComAdobeCqDamDmProcessImagePTiffManagerImplInfo ComAdobeCqDamDmProcessImagePTiffManagerImpl(NancyContext context, bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, int? maxMemory)
        {
            return ComAdobeCqDamDmProcessImagePTiffManagerImpl(post, apply, delete, action, location, propertylist, maxMemory);
        }

        public virtual ComAdobeCqDamIpsImplReplicationTriggerReplicateOnModifyWorkerInfo ComAdobeCqDamIpsImplReplicationTriggerReplicateOnModifyWorker(NancyContext context, bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, bool? dmreplicateonmodifyEnabled, bool? dmreplicateonmodifyForcesyncdeletes)
        {
            return ComAdobeCqDamIpsImplReplicationTriggerReplicateOnModifyWorker(post, apply, delete, action, location, propertylist, dmreplicateonmodifyEnabled, dmreplicateonmodifyForcesyncdeletes);
        }

        public virtual ComAdobeCqDamMacSyncHelperImplMACSyncClientImplInfo ComAdobeCqDamMacSyncHelperImplMACSyncClientImpl(NancyContext context, bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, int? comAdobeDamMacSyncClientSoTimeout)
        {
            return ComAdobeCqDamMacSyncHelperImplMACSyncClientImpl(post, apply, delete, action, location, propertylist, comAdobeDamMacSyncClientSoTimeout);
        }

        public virtual ComAdobeCqDamMacSyncImplDAMSyncServiceImplInfo ComAdobeCqDamMacSyncImplDAMSyncServiceImpl(NancyContext context, bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, List<string> comAdobeCqDamMacSyncDamsyncserviceRegisteredPaths, bool? comAdobeCqDamMacSyncDamsyncserviceSyncRenditions, int? comAdobeCqDamMacSyncDamsyncserviceReplicateThreadWaitMs, string comAdobeCqDamMacSyncDamsyncservicePlatform)
        {
            return ComAdobeCqDamMacSyncImplDAMSyncServiceImpl(post, apply, delete, action, location, propertylist, comAdobeCqDamMacSyncDamsyncserviceRegisteredPaths, comAdobeCqDamMacSyncDamsyncserviceSyncRenditions, comAdobeCqDamMacSyncDamsyncserviceReplicateThreadWaitMs, comAdobeCqDamMacSyncDamsyncservicePlatform);
        }

        public virtual ComAdobeCqDamProcessorNuiImplNuiAssetProcessorInfo ComAdobeCqDamProcessorNuiImplNuiAssetProcessor(NancyContext context, bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, bool? nuiEnabled, string nuiServiceUrl, string nuiApiKey)
        {
            return ComAdobeCqDamProcessorNuiImplNuiAssetProcessor(post, apply, delete, action, location, propertylist, nuiEnabled, nuiServiceUrl, nuiApiKey);
        }

        public virtual ComAdobeCqDamS7imagingImplIsImageServerComponentInfo ComAdobeCqDamS7imagingImplIsImageServerComponent(NancyContext context, bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, string tcpPort, bool? allowRemoteAccess, string maxRenderRgnPixels, string maxMessageSize, int? randomAccessUrlTimeout, int? workerThreads)
        {
            return ComAdobeCqDamS7imagingImplIsImageServerComponent(post, apply, delete, action, location, propertylist, tcpPort, allowRemoteAccess, maxRenderRgnPixels, maxMessageSize, randomAccessUrlTimeout, workerThreads);
        }

        public virtual ComAdobeCqDamS7imagingImplPsPlatformServerServletInfo ComAdobeCqDamS7imagingImplPsPlatformServerServlet(NancyContext context, bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, bool? cacheEnable, List<string> cacheRootPaths, int? cacheMaxSize, int? cacheMaxEntries)
        {
            return ComAdobeCqDamS7imagingImplPsPlatformServerServlet(post, apply, delete, action, location, propertylist, cacheEnable, cacheRootPaths, cacheMaxSize, cacheMaxEntries);
        }

        public virtual ComAdobeCqDamWebdavImplIoAssetIOHandlerInfo ComAdobeCqDamWebdavImplIoAssetIOHandler(NancyContext context, bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, int? serviceRanking, string pathPrefix, bool? createVersion)
        {
            return ComAdobeCqDamWebdavImplIoAssetIOHandler(post, apply, delete, action, location, propertylist, serviceRanking, pathPrefix, createVersion);
        }

        public virtual ComAdobeCqDamWebdavImplIoDamWebdavVersionLinkingJobInfo ComAdobeCqDamWebdavImplIoDamWebdavVersionLinkingJob(NancyContext context, bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, bool? cqDamWebdavVersionLinkingEnable, int? cqDamWebdavVersionLinkingSchedulerPeriod, int? cqDamWebdavVersionLinkingStagingTimeout)
        {
            return ComAdobeCqDamWebdavImplIoDamWebdavVersionLinkingJob(post, apply, delete, action, location, propertylist, cqDamWebdavVersionLinkingEnable, cqDamWebdavVersionLinkingSchedulerPeriod, cqDamWebdavVersionLinkingStagingTimeout);
        }

        public virtual ComAdobeCqDamWebdavImplIoSpecialFilesHandlerInfo ComAdobeCqDamWebdavImplIoSpecialFilesHandler(NancyContext context, bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, List<string> comDayCqDamCoreImplIoSpecialFilesHandlerFilepatters)
        {
            return ComAdobeCqDamWebdavImplIoSpecialFilesHandler(post, apply, delete, action, location, propertylist, comDayCqDamCoreImplIoSpecialFilesHandlerFilepatters);
        }

        public virtual ComAdobeCqDeserfwImplDeserializationFirewallImplInfo ComAdobeCqDeserfwImplDeserializationFirewallImpl(NancyContext context, bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, List<string> firewallDeserializationWhitelist, List<string> firewallDeserializationBlacklist, string firewallDeserializationDiagnostics)
        {
            return ComAdobeCqDeserfwImplDeserializationFirewallImpl(post, apply, delete, action, location, propertylist, firewallDeserializationWhitelist, firewallDeserializationBlacklist, firewallDeserializationDiagnostics);
        }

        public virtual ComAdobeCqDtmImplServiceDTMWebServiceImplInfo ComAdobeCqDtmImplServiceDTMWebServiceImpl(NancyContext context, bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, int? connectionTimeout, int? socketTimeout)
        {
            return ComAdobeCqDtmImplServiceDTMWebServiceImpl(post, apply, delete, action, location, propertylist, connectionTimeout, socketTimeout);
        }

        public virtual ComAdobeCqDtmImplServletsDTMDeployHookServletInfo ComAdobeCqDtmImplServletsDTMDeployHookServlet(NancyContext context, bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, List<string> dtmStagingIpWhitelist, List<string> dtmProductionIpWhitelist)
        {
            return ComAdobeCqDtmImplServletsDTMDeployHookServlet(post, apply, delete, action, location, propertylist, dtmStagingIpWhitelist, dtmProductionIpWhitelist);
        }

        public virtual ComAdobeCqDtmReactorImplServiceWebServiceImplInfo ComAdobeCqDtmReactorImplServiceWebServiceImpl(NancyContext context, bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, string endpointUri, int? connectionTimeout, int? socketTimeout)
        {
            return ComAdobeCqDtmReactorImplServiceWebServiceImpl(post, apply, delete, action, location, propertylist, endpointUri, connectionTimeout, socketTimeout);
        }

        public virtual ComAdobeCqExperiencelogImplExperienceLogConfigServletInfo ComAdobeCqExperiencelogImplExperienceLogConfigServlet(NancyContext context, bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, bool? enabled, List<string> disabledForGroups)
        {
            return ComAdobeCqExperiencelogImplExperienceLogConfigServlet(post, apply, delete, action, location, propertylist, enabled, disabledForGroups);
        }

        public virtual ComAdobeCqHcContentPackagesHealthCheckInfo ComAdobeCqHcContentPackagesHealthCheck(NancyContext context, bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, string hcName, List<string> hcTags, string hcMbeanName, List<string> packageNames)
        {
            return ComAdobeCqHcContentPackagesHealthCheck(post, apply, delete, action, location, propertylist, hcName, hcTags, hcMbeanName, packageNames);
        }

        public virtual ComAdobeCqHistoryImplHistoryRequestFilterInfo ComAdobeCqHistoryImplHistoryRequestFilter(NancyContext context, bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, List<string> historyRequestFilterExcludedSelectors, List<string> historyRequestFilterExcludedExtensions)
        {
            return ComAdobeCqHistoryImplHistoryRequestFilter(post, apply, delete, action, location, propertylist, historyRequestFilterExcludedSelectors, historyRequestFilterExcludedExtensions);
        }

        public virtual ComAdobeCqHistoryImplHistoryServiceImplInfo ComAdobeCqHistoryImplHistoryServiceImpl(NancyContext context, bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, List<string> historyServiceResourceTypes, List<string> historyServicePathFilter)
        {
            return ComAdobeCqHistoryImplHistoryServiceImpl(post, apply, delete, action, location, propertylist, historyServiceResourceTypes, historyServicePathFilter);
        }

        public virtual ComAdobeCqInboxImplTypeproviderItemTypeProviderInfo ComAdobeCqInboxImplTypeproviderItemTypeProvider(NancyContext context, bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, List<string> inboxImplTypeproviderRegistrypaths, List<string> inboxImplTypeproviderLegacypaths, string inboxImplTypeproviderDefaulturlFailureitem, string inboxImplTypeproviderDefaulturlWorkitem, string inboxImplTypeproviderDefaulturlTask)
        {
            return ComAdobeCqInboxImplTypeproviderItemTypeProvider(post, apply, delete, action, location, propertylist, inboxImplTypeproviderRegistrypaths, inboxImplTypeproviderLegacypaths, inboxImplTypeproviderDefaulturlFailureitem, inboxImplTypeproviderDefaulturlWorkitem, inboxImplTypeproviderDefaulturlTask);
        }

        public virtual ComAdobeCqProjectsImplServletProjectImageServletInfo ComAdobeCqProjectsImplServletProjectImageServlet(NancyContext context, bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, string imageQuality, string imageSupportedResolutions)
        {
            return ComAdobeCqProjectsImplServletProjectImageServlet(post, apply, delete, action, location, propertylist, imageQuality, imageSupportedResolutions);
        }

        public virtual ComAdobeCqProjectsPurgeSchedulerInfo ComAdobeCqProjectsPurgeScheduler(NancyContext context, bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, string scheduledpurgeName, bool? scheduledpurgePurgeActive, List<string> scheduledpurgeTemplates, bool? scheduledpurgePurgeGroups, bool? scheduledpurgePurgeAssets, bool? scheduledpurgeTerminateRunningWorkflows, int? scheduledpurgeDaysold, int? scheduledpurgeSaveThreshold)
        {
            return ComAdobeCqProjectsPurgeScheduler(post, apply, delete, action, location, propertylist, scheduledpurgeName, scheduledpurgePurgeActive, scheduledpurgeTemplates, scheduledpurgePurgeGroups, scheduledpurgePurgeAssets, scheduledpurgeTerminateRunningWorkflows, scheduledpurgeDaysold, scheduledpurgeSaveThreshold);
        }

        public virtual ComAdobeCqScheduledExporterImplScheduledExporterImplInfo ComAdobeCqScheduledExporterImplScheduledExporterImpl(NancyContext context, bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, List<string> includePaths, string exporterUser)
        {
            return ComAdobeCqScheduledExporterImplScheduledExporterImpl(post, apply, delete, action, location, propertylist, includePaths, exporterUser);
        }

        public virtual ComAdobeCqScreensAnalyticsImplScreensAnalyticsServiceImplInfo ComAdobeCqScreensAnalyticsImplScreensAnalyticsServiceImpl(NancyContext context, bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, string comAdobeCqScreensAnalyticsImplUrl, string comAdobeCqScreensAnalyticsImplApikey, string comAdobeCqScreensAnalyticsImplProject, string comAdobeCqScreensAnalyticsImplEnvironment, int? comAdobeCqScreensAnalyticsImplSendFrequency)
        {
            return ComAdobeCqScreensAnalyticsImplScreensAnalyticsServiceImpl(post, apply, delete, action, location, propertylist, comAdobeCqScreensAnalyticsImplUrl, comAdobeCqScreensAnalyticsImplApikey, comAdobeCqScreensAnalyticsImplProject, comAdobeCqScreensAnalyticsImplEnvironment, comAdobeCqScreensAnalyticsImplSendFrequency);
        }

        public virtual ComAdobeCqScreensDeviceImplDeviceServiceInfo ComAdobeCqScreensDeviceImplDeviceService(NancyContext context, bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, int? comAdobeAemScreensPlayerPingfrequency, string comAdobeAemScreensDevicePaswordSpecialchars, int? comAdobeAemScreensDevicePaswordMinlowercasechars, int? comAdobeAemScreensDevicePaswordMinuppercasechars, int? comAdobeAemScreensDevicePaswordMinnumberchars, int? comAdobeAemScreensDevicePaswordMinspecialchars, int? comAdobeAemScreensDevicePaswordMinlength)
        {
            return ComAdobeCqScreensDeviceImplDeviceService(post, apply, delete, action, location, propertylist, comAdobeAemScreensPlayerPingfrequency, comAdobeAemScreensDevicePaswordSpecialchars, comAdobeAemScreensDevicePaswordMinlowercasechars, comAdobeAemScreensDevicePaswordMinuppercasechars, comAdobeAemScreensDevicePaswordMinnumberchars, comAdobeAemScreensDevicePaswordMinspecialchars, comAdobeAemScreensDevicePaswordMinlength);
        }

        public virtual ComAdobeCqScreensDeviceRegistrationImplRegistrationServiceImplInfo ComAdobeCqScreensDeviceRegistrationImplRegistrationServiceImpl(NancyContext context, bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, int? deviceRegistrationTimeout)
        {
            return ComAdobeCqScreensDeviceRegistrationImplRegistrationServiceImpl(post, apply, delete, action, location, propertylist, deviceRegistrationTimeout);
        }

        public virtual ComAdobeCqScreensImplHandlerChannelsUpdateHandlerInfo ComAdobeCqScreensImplHandlerChannelsUpdateHandler(NancyContext context, bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, List<string> cqPagesupdatehandlerImageresourcetypes, List<string> cqPagesupdatehandlerProductresourcetypes, List<string> cqPagesupdatehandlerVideoresourcetypes, List<string> cqPagesupdatehandlerDynamicsequenceresourcetypes, List<string> cqPagesupdatehandlerPreviewmodepaths)
        {
            return ComAdobeCqScreensImplHandlerChannelsUpdateHandler(post, apply, delete, action, location, propertylist, cqPagesupdatehandlerImageresourcetypes, cqPagesupdatehandlerProductresourcetypes, cqPagesupdatehandlerVideoresourcetypes, cqPagesupdatehandlerDynamicsequenceresourcetypes, cqPagesupdatehandlerPreviewmodepaths);
        }

        public virtual ComAdobeCqScreensImplJobsDistributedDevicesStatiUpdateJobInfo ComAdobeCqScreensImplJobsDistributedDevicesStatiUpdateJob(NancyContext context, bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, string schedulerExpression)
        {
            return ComAdobeCqScreensImplJobsDistributedDevicesStatiUpdateJob(post, apply, delete, action, location, propertylist, schedulerExpression);
        }

        public virtual ComAdobeCqScreensImplRemoteImplDistributedHttpClientImplInfo ComAdobeCqScreensImplRemoteImplDistributedHttpClientImpl(NancyContext context, bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, int? comAdobeAemScreensImplRemoteRequestTimeout)
        {
            return ComAdobeCqScreensImplRemoteImplDistributedHttpClientImpl(post, apply, delete, action, location, propertylist, comAdobeAemScreensImplRemoteRequestTimeout);
        }

        public virtual ComAdobeCqScreensImplScreensChannelPostProcessorInfo ComAdobeCqScreensImplScreensChannelPostProcessor(NancyContext context, bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, List<string> screensChannelsPropertiesToRemove)
        {
            return ComAdobeCqScreensImplScreensChannelPostProcessor(post, apply, delete, action, location, propertylist, screensChannelsPropertiesToRemove);
        }

        public virtual ComAdobeCqScreensMonitoringImplScreensMonitoringServiceImplInfo ComAdobeCqScreensMonitoringImplScreensMonitoringServiceImpl(NancyContext context, bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, List<string> comAdobeCqScreensMonitoringImplScreensMonitoringServiceImplProjectPath, string comAdobeCqScreensMonitoringImplScreensMonitoringServiceImplScheduleFrequency, int? comAdobeCqScreensMonitoringImplScreensMonitoringServiceImplPingTimeout, string comAdobeCqScreensMonitoringImplScreensMonitoringServiceImplRecipients, string comAdobeCqScreensMonitoringImplScreensMonitoringServiceImplSmtpserver, int? comAdobeCqScreensMonitoringImplScreensMonitoringServiceImplSmtpport, bool? comAdobeCqScreensMonitoringImplScreensMonitoringServiceImplUsetls, string comAdobeCqScreensMonitoringImplScreensMonitoringServiceImplUsername, string comAdobeCqScreensMonitoringImplScreensMonitoringServiceImplPassword)
        {
            return ComAdobeCqScreensMonitoringImplScreensMonitoringServiceImpl(post, apply, delete, action, location, propertylist, comAdobeCqScreensMonitoringImplScreensMonitoringServiceImplProjectPath, comAdobeCqScreensMonitoringImplScreensMonitoringServiceImplScheduleFrequency, comAdobeCqScreensMonitoringImplScreensMonitoringServiceImplPingTimeout, comAdobeCqScreensMonitoringImplScreensMonitoringServiceImplRecipients, comAdobeCqScreensMonitoringImplScreensMonitoringServiceImplSmtpserver, comAdobeCqScreensMonitoringImplScreensMonitoringServiceImplSmtpport, comAdobeCqScreensMonitoringImplScreensMonitoringServiceImplUsetls, comAdobeCqScreensMonitoringImplScreensMonitoringServiceImplUsername, comAdobeCqScreensMonitoringImplScreensMonitoringServiceImplPassword);
        }

        public virtual ComAdobeCqScreensMqActivemqImplArtemisJMSProviderInfo ComAdobeCqScreensMqActivemqImplArtemisJMSProvider(NancyContext context, bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, int? serviceRanking, int? globalSize, int? maxDiskUsage, bool? persistenceEnabled, int? threadPoolMaxSize, int? scheduledThreadPoolMaxSize, int? gracefulShutdownTimeout, List<string> queues, List<string> topics, int? addressesMaxDeliveryAttempts, int? addressesExpiryDelay, string addressesAddressFullMessagePolicy, int? addressesMaxSizeBytes, int? addressesPageSizeBytes, int? addressesPageCacheMaxSize, string clusterUser, string clusterPassword, int? clusterCallTimeout, int? clusterCallFailoverTimeout, int? clusterClientFailureCheckPeriod, int? clusterNotificationAttempts, int? clusterNotificationInterval, int? idCacheSize, int? clusterConfirmationWindowSize, int? clusterConnectionTtl, bool? clusterDuplicateDetection, int? clusterInitialConnectAttempts, int? clusterMaxRetryInterval, int? clusterMinLargeMessageSize, int? clusterProducerWindowSize, int? clusterReconnectAttempts, int? clusterRetryInterval, decimal? clusterRetryIntervalMultiplier)
        {
            return ComAdobeCqScreensMqActivemqImplArtemisJMSProvider(post, apply, delete, action, location, propertylist, serviceRanking, globalSize, maxDiskUsage, persistenceEnabled, threadPoolMaxSize, scheduledThreadPoolMaxSize, gracefulShutdownTimeout, queues, topics, addressesMaxDeliveryAttempts, addressesExpiryDelay, addressesAddressFullMessagePolicy, addressesMaxSizeBytes, addressesPageSizeBytes, addressesPageCacheMaxSize, clusterUser, clusterPassword, clusterCallTimeout, clusterCallFailoverTimeout, clusterClientFailureCheckPeriod, clusterNotificationAttempts, clusterNotificationInterval, idCacheSize, clusterConfirmationWindowSize, clusterConnectionTtl, clusterDuplicateDetection, clusterInitialConnectAttempts, clusterMaxRetryInterval, clusterMinLargeMessageSize, clusterProducerWindowSize, clusterReconnectAttempts, clusterRetryInterval, clusterRetryIntervalMultiplier);
        }

        public virtual ComAdobeCqScreensOfflinecontentImplBulkOfflineUpdateServiceImplInfo ComAdobeCqScreensOfflinecontentImplBulkOfflineUpdateServiceImpl(NancyContext context, bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, List<string> comAdobeCqScreensOfflinecontentImplBulkOfflineUpdateServiceImplProjectPath, string comAdobeCqScreensOfflinecontentImplBulkOfflineUpdateServiceImplScheduleFrequency)
        {
            return ComAdobeCqScreensOfflinecontentImplBulkOfflineUpdateServiceImpl(post, apply, delete, action, location, propertylist, comAdobeCqScreensOfflinecontentImplBulkOfflineUpdateServiceImplProjectPath, comAdobeCqScreensOfflinecontentImplBulkOfflineUpdateServiceImplScheduleFrequency);
        }

        public virtual ComAdobeCqScreensOfflinecontentImplOfflineContentServiceImplInfo ComAdobeCqScreensOfflinecontentImplOfflineContentServiceImpl(NancyContext context, bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, bool? disableSmartSync)
        {
            return ComAdobeCqScreensOfflinecontentImplOfflineContentServiceImpl(post, apply, delete, action, location, propertylist, disableSmartSync);
        }

        public virtual ComAdobeCqScreensSegmentationImplSegmentationFeatureFlagInfo ComAdobeCqScreensSegmentationImplSegmentationFeatureFlag(NancyContext context, bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, bool? enableDataTriggeredContent)
        {
            return ComAdobeCqScreensSegmentationImplSegmentationFeatureFlag(post, apply, delete, action, location, propertylist, enableDataTriggeredContent);
        }

        public virtual ComAdobeCqSecurityHcBundlesImplHtmlLibraryManagerConfigHealthChInfo ComAdobeCqSecurityHcBundlesImplHtmlLibraryManagerConfigHealthCh(NancyContext context, bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, List<string> hcTags)
        {
            return ComAdobeCqSecurityHcBundlesImplHtmlLibraryManagerConfigHealthCh(post, apply, delete, action, location, propertylist, hcTags);
        }

        public virtual ComAdobeCqSecurityHcBundlesImplWcmFilterHealthCheckInfo ComAdobeCqSecurityHcBundlesImplWcmFilterHealthCheck(NancyContext context, bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, List<string> hcTags)
        {
            return ComAdobeCqSecurityHcBundlesImplWcmFilterHealthCheck(post, apply, delete, action, location, propertylist, hcTags);
        }

        public virtual ComAdobeCqSecurityHcDispatcherImplDispatcherAccessHealthCheckInfo ComAdobeCqSecurityHcDispatcherImplDispatcherAccessHealthCheck(NancyContext context, bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, List<string> hcTags, string dispatcherAddress, List<string> dispatcherFilterAllowed, List<string> dispatcherFilterBlocked)
        {
            return ComAdobeCqSecurityHcDispatcherImplDispatcherAccessHealthCheck(post, apply, delete, action, location, propertylist, hcTags, dispatcherAddress, dispatcherFilterAllowed, dispatcherFilterBlocked);
        }

        public virtual ComAdobeCqSecurityHcPackagesImplExampleContentHealthCheckInfo ComAdobeCqSecurityHcPackagesImplExampleContentHealthCheck(NancyContext context, bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, List<string> hcTags)
        {
            return ComAdobeCqSecurityHcPackagesImplExampleContentHealthCheck(post, apply, delete, action, location, propertylist, hcTags);
        }

        public virtual ComAdobeCqSecurityHcWebserverImplClickjackingHealthCheckInfo ComAdobeCqSecurityHcWebserverImplClickjackingHealthCheck(NancyContext context, bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, List<string> hcTags, string webserverAddress)
        {
            return ComAdobeCqSecurityHcWebserverImplClickjackingHealthCheck(post, apply, delete, action, location, propertylist, hcTags, webserverAddress);
        }

        public virtual ComAdobeCqSocialAccountverificationImplAccountManagementConfigImInfo ComAdobeCqSocialAccountverificationImplAccountManagementConfigIm(NancyContext context, bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, bool? enable, int? ttl1, int? ttl2)
        {
            return ComAdobeCqSocialAccountverificationImplAccountManagementConfigIm(post, apply, delete, action, location, propertylist, enable, ttl1, ttl2);
        }

        public virtual ComAdobeCqSocialActivitystreamsClientImplSocialActivityComponenInfo ComAdobeCqSocialActivitystreamsClientImplSocialActivityComponen(NancyContext context, bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, int? priority)
        {
            return ComAdobeCqSocialActivitystreamsClientImplSocialActivityComponen(post, apply, delete, action, location, propertylist, priority);
        }

        public virtual ComAdobeCqSocialActivitystreamsClientImplSocialActivityStreamCoInfo ComAdobeCqSocialActivitystreamsClientImplSocialActivityStreamCo(NancyContext context, bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, int? priority)
        {
            return ComAdobeCqSocialActivitystreamsClientImplSocialActivityStreamCo(post, apply, delete, action, location, propertylist, priority);
        }

        public virtual ComAdobeCqSocialActivitystreamsListenerImplEventListenerHandlerInfo ComAdobeCqSocialActivitystreamsListenerImplEventListenerHandler(NancyContext context, bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, string eventTopics, string eventFilter)
        {
            return ComAdobeCqSocialActivitystreamsListenerImplEventListenerHandler(post, apply, delete, action, location, propertylist, eventTopics, eventFilter);
        }

        public virtual ComAdobeCqSocialActivitystreamsListenerImplModerationEventExtenInfo ComAdobeCqSocialActivitystreamsListenerImplModerationEventExten(NancyContext context, bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, bool? accepted, int? ranked)
        {
            return ComAdobeCqSocialActivitystreamsListenerImplModerationEventExten(post, apply, delete, action, location, propertylist, accepted, ranked);
        }

        public virtual ComAdobeCqSocialActivitystreamsListenerImplRatingEventActivitySInfo ComAdobeCqSocialActivitystreamsListenerImplRatingEventActivityS(NancyContext context, bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, int? ranking, bool? enable)
        {
            return ComAdobeCqSocialActivitystreamsListenerImplRatingEventActivityS(post, apply, delete, action, location, propertylist, ranking, enable);
        }

        public virtual ComAdobeCqSocialActivitystreamsListenerImplResourceActivityStreInfo ComAdobeCqSocialActivitystreamsListenerImplResourceActivityStre(NancyContext context, bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, string streamPath, string streamName)
        {
            return ComAdobeCqSocialActivitystreamsListenerImplResourceActivityStre(post, apply, delete, action, location, propertylist, streamPath, streamName);
        }

        public virtual ComAdobeCqSocialCalendarClientEndpointsImplCalendarOperationsIInfo ComAdobeCqSocialCalendarClientEndpointsImplCalendarOperationsI(NancyContext context, bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, int? maxRetry, List<string> fieldWhitelist, List<string> attachmentTypeBlacklist)
        {
            return ComAdobeCqSocialCalendarClientEndpointsImplCalendarOperationsI(post, apply, delete, action, location, propertylist, maxRetry, fieldWhitelist, attachmentTypeBlacklist);
        }

        public virtual ComAdobeCqSocialCalendarClientOperationextensionsEventAttachmenInfo ComAdobeCqSocialCalendarClientOperationextensionsEventAttachmen(NancyContext context, bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, string attachmentTypeBlacklist, int? extensionOrder)
        {
            return ComAdobeCqSocialCalendarClientOperationextensionsEventAttachmen(post, apply, delete, action, location, propertylist, attachmentTypeBlacklist, extensionOrder);
        }

        public virtual ComAdobeCqSocialCalendarServletsTimeZoneServletInfo ComAdobeCqSocialCalendarServletsTimeZoneServlet(NancyContext context, bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, int? timezonesExpirytime)
        {
            return ComAdobeCqSocialCalendarServletsTimeZoneServlet(post, apply, delete, action, location, propertylist, timezonesExpirytime);
        }

        public virtual ComAdobeCqSocialCommonsCommentsEndpointsImplCommentDeleteEventInfo ComAdobeCqSocialCommonsCommentsEndpointsImplCommentDeleteEvent(NancyContext context, bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, int? ranking)
        {
            return ComAdobeCqSocialCommonsCommentsEndpointsImplCommentDeleteEvent(post, apply, delete, action, location, propertylist, ranking);
        }

        public virtual ComAdobeCqSocialCommonsCommentsEndpointsImplCommentOperationSeInfo ComAdobeCqSocialCommonsCommentsEndpointsImplCommentOperationSe(NancyContext context, bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, List<string> fieldWhitelist, List<string> attachmentTypeBlacklist)
        {
            return ComAdobeCqSocialCommonsCommentsEndpointsImplCommentOperationSe(post, apply, delete, action, location, propertylist, fieldWhitelist, attachmentTypeBlacklist);
        }

        public virtual ComAdobeCqSocialCommonsCommentsEndpointsImplTranslationOperatiInfo ComAdobeCqSocialCommonsCommentsEndpointsImplTranslationOperati(NancyContext context, bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, List<string> fieldWhitelist, List<string> attachmentTypeBlacklist)
        {
            return ComAdobeCqSocialCommonsCommentsEndpointsImplTranslationOperati(post, apply, delete, action, location, propertylist, fieldWhitelist, attachmentTypeBlacklist);
        }

        public virtual ComAdobeCqSocialCommonsCommentsListingImplSearchCommentSocialCInfo ComAdobeCqSocialCommonsCommentsListingImplSearchCommentSocialC(NancyContext context, bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, int? numUserLimit)
        {
            return ComAdobeCqSocialCommonsCommentsListingImplSearchCommentSocialC(post, apply, delete, action, location, propertylist, numUserLimit);
        }

        public virtual ComAdobeCqSocialCommonsCommentsSchedulerImplSearchScheduledPosInfo ComAdobeCqSocialCommonsCommentsSchedulerImplSearchScheduledPos(NancyContext context, bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, bool? enableScheduledPostsSearch, int? numberOfMinutes, int? maxSearchLimit)
        {
            return ComAdobeCqSocialCommonsCommentsSchedulerImplSearchScheduledPos(post, apply, delete, action, location, propertylist, enableScheduledPostsSearch, numberOfMinutes, maxSearchLimit);
        }

        public virtual ComAdobeCqSocialCommonsCorsCORSAuthenticationFilterInfo ComAdobeCqSocialCommonsCorsCORSAuthenticationFilter(NancyContext context, bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, bool? corsEnabling)
        {
            return ComAdobeCqSocialCommonsCorsCORSAuthenticationFilter(post, apply, delete, action, location, propertylist, corsEnabling);
        }

        public virtual ComAdobeCqSocialCommonsEmailreplyImplAndroidEmailClientProviderInfo ComAdobeCqSocialCommonsEmailreplyImplAndroidEmailClientProvider(NancyContext context, bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, int? priorityOrder, List<string> replyEmailPatterns)
        {
            return ComAdobeCqSocialCommonsEmailreplyImplAndroidEmailClientProvider(post, apply, delete, action, location, propertylist, priorityOrder, replyEmailPatterns);
        }

        public virtual ComAdobeCqSocialCommonsEmailreplyImplCommentEmailBuilderImplInfo ComAdobeCqSocialCommonsEmailreplyImplCommentEmailBuilderImpl(NancyContext context, bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, string contextPath)
        {
            return ComAdobeCqSocialCommonsEmailreplyImplCommentEmailBuilderImpl(post, apply, delete, action, location, propertylist, contextPath);
        }

        public virtual ComAdobeCqSocialCommonsEmailreplyImplCommentEmailEventListenerInfo ComAdobeCqSocialCommonsEmailreplyImplCommentEmailEventListener(NancyContext context, bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, string eventTopics)
        {
            return ComAdobeCqSocialCommonsEmailreplyImplCommentEmailEventListener(post, apply, delete, action, location, propertylist, eventTopics);
        }

        public virtual ComAdobeCqSocialCommonsEmailreplyImplCustomEmailClientProviderInfo ComAdobeCqSocialCommonsEmailreplyImplCustomEmailClientProvider(NancyContext context, bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, int? priorityOrder, List<string> replyEmailPatterns)
        {
            return ComAdobeCqSocialCommonsEmailreplyImplCustomEmailClientProvider(post, apply, delete, action, location, propertylist, priorityOrder, replyEmailPatterns);
        }

        public virtual ComAdobeCqSocialCommonsEmailreplyImplEmailQuotedTextPatternsImpInfo ComAdobeCqSocialCommonsEmailreplyImplEmailQuotedTextPatternsImp(NancyContext context, bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, string patternTime, string patternNewline, string patternDayOfMonth, string patternMonth, string patternYear, string patternDate, string patternDateTime, string patternEmail)
        {
            return ComAdobeCqSocialCommonsEmailreplyImplEmailQuotedTextPatternsImp(post, apply, delete, action, location, propertylist, patternTime, patternNewline, patternDayOfMonth, patternMonth, patternYear, patternDate, patternDateTime, patternEmail);
        }

        public virtual ComAdobeCqSocialCommonsEmailreplyImplEmailReplyConfigurationImpInfo ComAdobeCqSocialCommonsEmailreplyImplEmailReplyConfigurationImp(NancyContext context, bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, string emailName, bool? emailCreatePostFromReply, string emailAddCommentIdTo, int? emailSubjectMaximumLength, string emailReplyToAddress, string emailReplyToDelimiter, string emailTrackerIdPrefixInSubject, string emailTrackerIdPrefixInBody, bool? emailAsHTML, string emailDefaultUserName, string emailTemplatesRootPath)
        {
            return ComAdobeCqSocialCommonsEmailreplyImplEmailReplyConfigurationImp(post, apply, delete, action, location, propertylist, emailName, emailCreatePostFromReply, emailAddCommentIdTo, emailSubjectMaximumLength, emailReplyToAddress, emailReplyToDelimiter, emailTrackerIdPrefixInSubject, emailTrackerIdPrefixInBody, emailAsHTML, emailDefaultUserName, emailTemplatesRootPath);
        }

        public virtual ComAdobeCqSocialCommonsEmailreplyImplEmailReplyImporterInfo ComAdobeCqSocialCommonsEmailreplyImplEmailReplyImporter(NancyContext context, bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, string connectProtocol)
        {
            return ComAdobeCqSocialCommonsEmailreplyImplEmailReplyImporter(post, apply, delete, action, location, propertylist, connectProtocol);
        }

        public virtual ComAdobeCqSocialCommonsEmailreplyImplGmailEmailClientProviderInfo ComAdobeCqSocialCommonsEmailreplyImplGmailEmailClientProvider(NancyContext context, bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, int? priorityOrder, List<string> replyEmailPatterns)
        {
            return ComAdobeCqSocialCommonsEmailreplyImplGmailEmailClientProvider(post, apply, delete, action, location, propertylist, priorityOrder, replyEmailPatterns);
        }

        public virtual ComAdobeCqSocialCommonsEmailreplyImplIOSEmailClientProviderInfo ComAdobeCqSocialCommonsEmailreplyImplIOSEmailClientProvider(NancyContext context, bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, int? priorityOrder, List<string> replyEmailPatterns)
        {
            return ComAdobeCqSocialCommonsEmailreplyImplIOSEmailClientProvider(post, apply, delete, action, location, propertylist, priorityOrder, replyEmailPatterns);
        }

        public virtual ComAdobeCqSocialCommonsEmailreplyImplMacmailEmailClientProviderInfo ComAdobeCqSocialCommonsEmailreplyImplMacmailEmailClientProvider(NancyContext context, bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, int? priorityOrder, List<string> replyEmailPatterns)
        {
            return ComAdobeCqSocialCommonsEmailreplyImplMacmailEmailClientProvider(post, apply, delete, action, location, propertylist, priorityOrder, replyEmailPatterns);
        }

        public virtual ComAdobeCqSocialCommonsEmailreplyImplOutLookEmailClientProviderInfo ComAdobeCqSocialCommonsEmailreplyImplOutLookEmailClientProvider(NancyContext context, bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, int? priorityOrder, List<string> replyEmailPatterns)
        {
            return ComAdobeCqSocialCommonsEmailreplyImplOutLookEmailClientProvider(post, apply, delete, action, location, propertylist, priorityOrder, replyEmailPatterns);
        }

        public virtual ComAdobeCqSocialCommonsEmailreplyImplUnknownEmailClientProviderInfo ComAdobeCqSocialCommonsEmailreplyImplUnknownEmailClientProvider(NancyContext context, bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, List<string> replyEmailPatterns, int? priorityOrder)
        {
            return ComAdobeCqSocialCommonsEmailreplyImplUnknownEmailClientProvider(post, apply, delete, action, location, propertylist, replyEmailPatterns, priorityOrder);
        }

        public virtual ComAdobeCqSocialCommonsEmailreplyImplYahooEmailClientProviderInfo ComAdobeCqSocialCommonsEmailreplyImplYahooEmailClientProvider(NancyContext context, bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, int? priorityOrder, List<string> replyEmailPatterns)
        {
            return ComAdobeCqSocialCommonsEmailreplyImplYahooEmailClientProvider(post, apply, delete, action, location, propertylist, priorityOrder, replyEmailPatterns);
        }

        public virtual ComAdobeCqSocialCommonsMaintainanceImplDeleteTempUGCImageUploadInfo ComAdobeCqSocialCommonsMaintainanceImplDeleteTempUGCImageUpload(NancyContext context, bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, int? numberOfDays, int? ageOfFile)
        {
            return ComAdobeCqSocialCommonsMaintainanceImplDeleteTempUGCImageUpload(post, apply, delete, action, location, propertylist, numberOfDays, ageOfFile);
        }

        public virtual ComAdobeCqSocialCommonsUgclimiterImplUGCLimiterServiceImplInfo ComAdobeCqSocialCommonsUgclimiterImplUGCLimiterServiceImpl(NancyContext context, bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, string eventTopics, string eventFilter, List<string> verbs)
        {
            return ComAdobeCqSocialCommonsUgclimiterImplUGCLimiterServiceImpl(post, apply, delete, action, location, propertylist, eventTopics, eventFilter, verbs);
        }

        public virtual ComAdobeCqSocialCommonsUgclimitsconfigImplCommunityUserUGCLimitInfo ComAdobeCqSocialCommonsUgclimitsconfigImplCommunityUserUGCLimit(NancyContext context, bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, bool? enable, int? uGCLimit, int? ugcLimitDuration, List<string> domains, List<string> toList)
        {
            return ComAdobeCqSocialCommonsUgclimitsconfigImplCommunityUserUGCLimit(post, apply, delete, action, location, propertylist, enable, uGCLimit, ugcLimitDuration, domains, toList);
        }

        public virtual ComAdobeCqSocialConnectOauthImplFacebookProviderImplInfo ComAdobeCqSocialConnectOauthImplFacebookProviderImpl(NancyContext context, bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, string oauthProviderId, string oauthCloudConfigRoot, string providerConfigRoot, bool? providerConfigCreateTagsEnabled, string providerConfigUserFolder, bool? providerConfigFacebookFetchFields, List<string> providerConfigFacebookFields, bool? providerConfigRefreshUserdataEnabled)
        {
            return ComAdobeCqSocialConnectOauthImplFacebookProviderImpl(post, apply, delete, action, location, propertylist, oauthProviderId, oauthCloudConfigRoot, providerConfigRoot, providerConfigCreateTagsEnabled, providerConfigUserFolder, providerConfigFacebookFetchFields, providerConfigFacebookFields, providerConfigRefreshUserdataEnabled);
        }

        public virtual ComAdobeCqSocialConnectOauthImplSocialOAuthAuthenticationHandleInfo ComAdobeCqSocialConnectOauthImplSocialOAuthAuthenticationHandle(NancyContext context, bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, List<string> path, int? serviceRanking)
        {
            return ComAdobeCqSocialConnectOauthImplSocialOAuthAuthenticationHandle(post, apply, delete, action, location, propertylist, path, serviceRanking);
        }

        public virtual ComAdobeCqSocialConnectOauthImplSocialOAuthUserProfileMapperInfo ComAdobeCqSocialConnectOauthImplSocialOAuthUserProfileMapper(NancyContext context, bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, List<string> facebook, List<string> twitter, string providerConfigUserFolder)
        {
            return ComAdobeCqSocialConnectOauthImplSocialOAuthUserProfileMapper(post, apply, delete, action, location, propertylist, facebook, twitter, providerConfigUserFolder);
        }

        public virtual ComAdobeCqSocialConnectOauthImplTwitterProviderImplInfo ComAdobeCqSocialConnectOauthImplTwitterProviderImpl(NancyContext context, bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, string oauthProviderId, string oauthCloudConfigRoot, string providerConfigRoot, string providerConfigUserFolder, bool? providerConfigTwitterEnableParams, List<string> providerConfigTwitterParams, bool? providerConfigRefreshUserdataEnabled)
        {
            return ComAdobeCqSocialConnectOauthImplTwitterProviderImpl(post, apply, delete, action, location, propertylist, oauthProviderId, oauthCloudConfigRoot, providerConfigRoot, providerConfigUserFolder, providerConfigTwitterEnableParams, providerConfigTwitterParams, providerConfigRefreshUserdataEnabled);
        }

        public virtual ComAdobeCqSocialContentFragmentsServicesImplCommunitiesFragmenInfo ComAdobeCqSocialContentFragmentsServicesImplCommunitiesFragmen(NancyContext context, bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, bool? cqSocialContentFragmentsServicesEnabled, int? cqSocialContentFragmentsServicesWaitTimeSeconds)
        {
            return ComAdobeCqSocialContentFragmentsServicesImplCommunitiesFragmen(post, apply, delete, action, location, propertylist, cqSocialContentFragmentsServicesEnabled, cqSocialContentFragmentsServicesWaitTimeSeconds);
        }

        public virtual ComAdobeCqSocialDatastoreAsImplASResourceProviderFactoryInfo ComAdobeCqSocialDatastoreAsImplASResourceProviderFactory(NancyContext context, bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, string versionId, bool? cacheOn, int? concurrencyLevel, int? cacheStartSize, int? cacheTtl, int? cacheSize, int? timeLimit)
        {
            return ComAdobeCqSocialDatastoreAsImplASResourceProviderFactory(post, apply, delete, action, location, propertylist, versionId, cacheOn, concurrencyLevel, cacheStartSize, cacheTtl, cacheSize, timeLimit);
        }

        public virtual ComAdobeCqSocialDatastoreOpImplSocialMSResourceProviderFactoryInfo ComAdobeCqSocialDatastoreOpImplSocialMSResourceProviderFactory(NancyContext context, bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, string solrZkTimeout, string solrCommit, bool? cacheOn, int? concurrencyLevel, int? cacheStartSize, int? cacheTtl, int? cacheSize)
        {
            return ComAdobeCqSocialDatastoreOpImplSocialMSResourceProviderFactory(post, apply, delete, action, location, propertylist, solrZkTimeout, solrCommit, cacheOn, concurrencyLevel, cacheStartSize, cacheTtl, cacheSize);
        }

        public virtual ComAdobeCqSocialDatastoreRdbImplSocialRDBResourceProviderFactorInfo ComAdobeCqSocialDatastoreRdbImplSocialRDBResourceProviderFactor(NancyContext context, bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, string solrZkTimeout, string solrCommit, bool? cacheOn, int? concurrencyLevel, int? cacheStartSize, int? cacheTtl, int? cacheSize)
        {
            return ComAdobeCqSocialDatastoreRdbImplSocialRDBResourceProviderFactor(post, apply, delete, action, location, propertylist, solrZkTimeout, solrCommit, cacheOn, concurrencyLevel, cacheStartSize, cacheTtl, cacheSize);
        }

        public virtual ComAdobeCqSocialEnablementAdaptorsEnablementLearningPathAdaptorFInfo ComAdobeCqSocialEnablementAdaptorsEnablementLearningPathAdaptorF(NancyContext context, bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, bool? isMemberCheck)
        {
            return ComAdobeCqSocialEnablementAdaptorsEnablementLearningPathAdaptorF(post, apply, delete, action, location, propertylist, isMemberCheck);
        }

        public virtual ComAdobeCqSocialEnablementAdaptorsEnablementResourceAdaptorFactoInfo ComAdobeCqSocialEnablementAdaptorsEnablementResourceAdaptorFacto(NancyContext context, bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, bool? isMemberCheck)
        {
            return ComAdobeCqSocialEnablementAdaptorsEnablementResourceAdaptorFacto(post, apply, delete, action, location, propertylist, isMemberCheck);
        }

        public virtual ComAdobeCqSocialEnablementLearningpathEndpointsImplEnablementLInfo ComAdobeCqSocialEnablementLearningpathEndpointsImplEnablementL(NancyContext context, bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, List<string> fieldWhitelist)
        {
            return ComAdobeCqSocialEnablementLearningpathEndpointsImplEnablementL(post, apply, delete, action, location, propertylist, fieldWhitelist);
        }

        public virtual ComAdobeCqSocialEnablementResourceEndpointsImplEnablementResouInfo ComAdobeCqSocialEnablementResourceEndpointsImplEnablementResou(NancyContext context, bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, List<string> fieldWhitelist)
        {
            return ComAdobeCqSocialEnablementResourceEndpointsImplEnablementResou(post, apply, delete, action, location, propertylist, fieldWhitelist);
        }

        public virtual ComAdobeCqSocialEnablementServicesImplAuthorMarkerImplInfo ComAdobeCqSocialEnablementServicesImplAuthorMarkerImpl(NancyContext context, bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, int? serviceRanking)
        {
            return ComAdobeCqSocialEnablementServicesImplAuthorMarkerImpl(post, apply, delete, action, location, propertylist, serviceRanking);
        }

        public virtual ComAdobeCqSocialFilelibraryClientEndpointsFilelibraryDownloadGeInfo ComAdobeCqSocialFilelibraryClientEndpointsFilelibraryDownloadGe(NancyContext context, bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, string slingServletSelectors, string slingServletExtensions)
        {
            return ComAdobeCqSocialFilelibraryClientEndpointsFilelibraryDownloadGe(post, apply, delete, action, location, propertylist, slingServletSelectors, slingServletExtensions);
        }

        public virtual ComAdobeCqSocialFilelibraryClientEndpointsImplFileLibraryOperaInfo ComAdobeCqSocialFilelibraryClientEndpointsImplFileLibraryOpera(NancyContext context, bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, List<string> fieldWhitelist, List<string> attachmentTypeBlacklist)
        {
            return ComAdobeCqSocialFilelibraryClientEndpointsImplFileLibraryOpera(post, apply, delete, action, location, propertylist, fieldWhitelist, attachmentTypeBlacklist);
        }

        public virtual ComAdobeCqSocialForumClientEndpointsImplForumOperationsServiceInfo ComAdobeCqSocialForumClientEndpointsImplForumOperationsService(NancyContext context, bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, List<string> fieldWhitelist, List<string> attachmentTypeBlacklist)
        {
            return ComAdobeCqSocialForumClientEndpointsImplForumOperationsService(post, apply, delete, action, location, propertylist, fieldWhitelist, attachmentTypeBlacklist);
        }

        public virtual ComAdobeCqSocialForumDispatcherImplFlushOperationsInfo ComAdobeCqSocialForumDispatcherImplFlushOperations(NancyContext context, bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, int? extensionOrder, bool? flushForumontopic)
        {
            return ComAdobeCqSocialForumDispatcherImplFlushOperations(post, apply, delete, action, location, propertylist, extensionOrder, flushForumontopic);
        }

        public virtual ComAdobeCqSocialGroupClientImplCommunityGroupCollectionComponenInfo ComAdobeCqSocialGroupClientImplCommunityGroupCollectionComponen(NancyContext context, bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, bool? groupListingPaginationEnable, bool? groupListingLazyloadingEnable, int? pageSize, int? priority)
        {
            return ComAdobeCqSocialGroupClientImplCommunityGroupCollectionComponen(post, apply, delete, action, location, propertylist, groupListingPaginationEnable, groupListingLazyloadingEnable, pageSize, priority);
        }

        public virtual ComAdobeCqSocialGroupImplGroupServiceImplInfo ComAdobeCqSocialGroupImplGroupServiceImpl(NancyContext context, bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, int? maxWaitTime, int? minWaitBetweenRetries)
        {
            return ComAdobeCqSocialGroupImplGroupServiceImpl(post, apply, delete, action, location, propertylist, maxWaitTime, minWaitBetweenRetries);
        }

        public virtual ComAdobeCqSocialHandlebarsGuavaTemplateCacheImplInfo ComAdobeCqSocialHandlebarsGuavaTemplateCacheImpl(NancyContext context, bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, bool? parameterGuavaCacheEnabled, string parameterGuavaCacheParams, bool? parameterGuavaCacheReload, int? serviceRanking)
        {
            return ComAdobeCqSocialHandlebarsGuavaTemplateCacheImpl(post, apply, delete, action, location, propertylist, parameterGuavaCacheEnabled, parameterGuavaCacheParams, parameterGuavaCacheReload, serviceRanking);
        }

        public virtual ComAdobeCqSocialIdeationClientEndpointsImplIdeationOperationsSInfo ComAdobeCqSocialIdeationClientEndpointsImplIdeationOperationsS(NancyContext context, bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, List<string> fieldWhitelist, List<string> attachmentTypeBlacklist)
        {
            return ComAdobeCqSocialIdeationClientEndpointsImplIdeationOperationsS(post, apply, delete, action, location, propertylist, fieldWhitelist, attachmentTypeBlacklist);
        }

        public virtual ComAdobeCqSocialJournalClientEndpointsImplJournalOperationsSerInfo ComAdobeCqSocialJournalClientEndpointsImplJournalOperationsSer(NancyContext context, bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, List<string> fieldWhitelist, List<string> attachmentTypeBlacklist)
        {
            return ComAdobeCqSocialJournalClientEndpointsImplJournalOperationsSer(post, apply, delete, action, location, propertylist, fieldWhitelist, attachmentTypeBlacklist);
        }

        public virtual ComAdobeCqSocialMembersEndpointsImplCommunityMemberGroupProfileInfo ComAdobeCqSocialMembersEndpointsImplCommunityMemberGroupProfile(NancyContext context, bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, List<string> fieldWhitelist)
        {
            return ComAdobeCqSocialMembersEndpointsImplCommunityMemberGroupProfile(post, apply, delete, action, location, propertylist, fieldWhitelist);
        }

        public virtual ComAdobeCqSocialMembersEndpointsImplCommunityMemberUserProfileOInfo ComAdobeCqSocialMembersEndpointsImplCommunityMemberUserProfileO(NancyContext context, bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, List<string> fieldWhitelist)
        {
            return ComAdobeCqSocialMembersEndpointsImplCommunityMemberUserProfileO(post, apply, delete, action, location, propertylist, fieldWhitelist);
        }

        public virtual ComAdobeCqSocialMembersImplCommunityMemberGroupProfileComponentFInfo ComAdobeCqSocialMembersImplCommunityMemberGroupProfileComponentF(NancyContext context, bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, int? everyoneLimit, int? priority)
        {
            return ComAdobeCqSocialMembersImplCommunityMemberGroupProfileComponentF(post, apply, delete, action, location, propertylist, everyoneLimit, priority);
        }

        public virtual ComAdobeCqSocialMessagingClientEndpointsImplMessagingOperationInfo ComAdobeCqSocialMessagingClientEndpointsImplMessagingOperation(NancyContext context, bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, List<string> messageProperties, int? messageBoxSizeLimit, int? messageCountLimit, bool? notifyFailure, string failureMessageFrom, string failureTemplatePath, int? maxRetries, int? minWaitBetweenRetries, int? countUpdatePoolSize, string inboxPath, string sentitemsPath, bool? supportAttachments, bool? supportGroupMessaging, int? maxTotalRecipients, int? batchSize, int? maxTotalAttachmentSize, List<string> attachmentTypeBlacklist, List<string> allowedAttachmentTypes, string serviceSelector, List<string> fieldWhitelist)
        {
            return ComAdobeCqSocialMessagingClientEndpointsImplMessagingOperation(post, apply, delete, action, location, propertylist, messageProperties, messageBoxSizeLimit, messageCountLimit, notifyFailure, failureMessageFrom, failureTemplatePath, maxRetries, minWaitBetweenRetries, countUpdatePoolSize, inboxPath, sentitemsPath, supportAttachments, supportGroupMessaging, maxTotalRecipients, batchSize, maxTotalAttachmentSize, attachmentTypeBlacklist, allowedAttachmentTypes, serviceSelector, fieldWhitelist);
        }

        public virtual ComAdobeCqSocialModerationDashboardApiFilterGroupSocialComponenInfo ComAdobeCqSocialModerationDashboardApiFilterGroupSocialComponen(NancyContext context, bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, List<string> resourceTypeFilters, int? priority)
        {
            return ComAdobeCqSocialModerationDashboardApiFilterGroupSocialComponen(post, apply, delete, action, location, propertylist, resourceTypeFilters, priority);
        }

        public virtual ComAdobeCqSocialModerationDashboardApiModerationDashboardSocialInfo ComAdobeCqSocialModerationDashboardApiModerationDashboardSocial(NancyContext context, bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, int? priority)
        {
            return ComAdobeCqSocialModerationDashboardApiModerationDashboardSocial(post, apply, delete, action, location, propertylist, priority);
        }

        public virtual ComAdobeCqSocialModerationDashboardApiUserDetailsSocialComponenInfo ComAdobeCqSocialModerationDashboardApiUserDetailsSocialComponen(NancyContext context, bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, int? priority)
        {
            return ComAdobeCqSocialModerationDashboardApiUserDetailsSocialComponen(post, apply, delete, action, location, propertylist, priority);
        }

        public virtual ComAdobeCqSocialModerationDashboardInternalImplFilterGroupSociInfo ComAdobeCqSocialModerationDashboardInternalImplFilterGroupSoci(NancyContext context, bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, List<string> resourceTypeFilters, int? priority)
        {
            return ComAdobeCqSocialModerationDashboardInternalImplFilterGroupSoci(post, apply, delete, action, location, propertylist, resourceTypeFilters, priority);
        }

        public virtual ComAdobeCqSocialNotificationsImplMentionsRouterInfo ComAdobeCqSocialNotificationsImplMentionsRouter(NancyContext context, bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, string eventTopics, string eventFilter)
        {
            return ComAdobeCqSocialNotificationsImplMentionsRouter(post, apply, delete, action, location, propertylist, eventTopics, eventFilter);
        }

        public virtual ComAdobeCqSocialNotificationsImplNotificationManagerImplInfo ComAdobeCqSocialNotificationsImplNotificationManagerImpl(NancyContext context, bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, int? maxUnreadNotificationCount)
        {
            return ComAdobeCqSocialNotificationsImplNotificationManagerImpl(post, apply, delete, action, location, propertylist, maxUnreadNotificationCount);
        }

        public virtual ComAdobeCqSocialNotificationsImplNotificationsRouterInfo ComAdobeCqSocialNotificationsImplNotificationsRouter(NancyContext context, bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, string eventTopics, string eventFilter)
        {
            return ComAdobeCqSocialNotificationsImplNotificationsRouter(post, apply, delete, action, location, propertylist, eventTopics, eventFilter);
        }

        public virtual ComAdobeCqSocialQnaClientEndpointsImplQnaForumOperationsServicInfo ComAdobeCqSocialQnaClientEndpointsImplQnaForumOperationsServic(NancyContext context, bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, List<string> fieldWhitelist, List<string> attachmentTypeBlacklist)
        {
            return ComAdobeCqSocialQnaClientEndpointsImplQnaForumOperationsServic(post, apply, delete, action, location, propertylist, fieldWhitelist, attachmentTypeBlacklist);
        }

        public virtual ComAdobeCqSocialReportingAnalyticsServicesImplAnalyticsReportIInfo ComAdobeCqSocialReportingAnalyticsServicesImplAnalyticsReportI(NancyContext context, bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, int? cqSocialReportingAnalyticsPollingImporterInterval, int? cqSocialReportingAnalyticsPollingImporterPageSize)
        {
            return ComAdobeCqSocialReportingAnalyticsServicesImplAnalyticsReportI(post, apply, delete, action, location, propertylist, cqSocialReportingAnalyticsPollingImporterInterval, cqSocialReportingAnalyticsPollingImporterPageSize);
        }

        public virtual ComAdobeCqSocialReportingAnalyticsServicesImplAnalyticsReportMInfo ComAdobeCqSocialReportingAnalyticsServicesImplAnalyticsReportM(NancyContext context, bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, int? reportFetchDelay)
        {
            return ComAdobeCqSocialReportingAnalyticsServicesImplAnalyticsReportM(post, apply, delete, action, location, propertylist, reportFetchDelay);
        }

        public virtual ComAdobeCqSocialReportingAnalyticsServicesImplSiteTrendReportSInfo ComAdobeCqSocialReportingAnalyticsServicesImplSiteTrendReportS(NancyContext context, bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, List<string> cqSocialConsoleAnalyticsSitesMapping, int? priority)
        {
            return ComAdobeCqSocialReportingAnalyticsServicesImplSiteTrendReportS(post, apply, delete, action, location, propertylist, cqSocialConsoleAnalyticsSitesMapping, priority);
        }

        public virtual ComAdobeCqSocialReviewClientEndpointsImplReviewOperationsServiInfo ComAdobeCqSocialReviewClientEndpointsImplReviewOperationsServi(NancyContext context, bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, List<string> fieldWhitelist, List<string> attachmentTypeBlacklist)
        {
            return ComAdobeCqSocialReviewClientEndpointsImplReviewOperationsServi(post, apply, delete, action, location, propertylist, fieldWhitelist, attachmentTypeBlacklist);
        }

        public virtual ComAdobeCqSocialScfCoreOperationsImplSocialOperationsServletInfo ComAdobeCqSocialScfCoreOperationsImplSocialOperationsServlet(NancyContext context, bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, string slingServletSelectors, string slingServletExtensions)
        {
            return ComAdobeCqSocialScfCoreOperationsImplSocialOperationsServlet(post, apply, delete, action, location, propertylist, slingServletSelectors, slingServletExtensions);
        }

        public virtual ComAdobeCqSocialScfEndpointsImplDefaultSocialGetServletInfo ComAdobeCqSocialScfEndpointsImplDefaultSocialGetServlet(NancyContext context, bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, List<string> slingServletSelectors, string slingServletExtensions)
        {
            return ComAdobeCqSocialScfEndpointsImplDefaultSocialGetServlet(post, apply, delete, action, location, propertylist, slingServletSelectors, slingServletExtensions);
        }

        public virtual ComAdobeCqSocialScoringImplScoringEventListenerInfo ComAdobeCqSocialScoringImplScoringEventListener(NancyContext context, bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, string eventTopics, string eventFilter)
        {
            return ComAdobeCqSocialScoringImplScoringEventListener(post, apply, delete, action, location, propertylist, eventTopics, eventFilter);
        }

        public virtual ComAdobeCqSocialServiceusersInternalImplServiceUserWrapperImplInfo ComAdobeCqSocialServiceusersInternalImplServiceUserWrapperImpl(NancyContext context, bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, bool? enableFallback)
        {
            return ComAdobeCqSocialServiceusersInternalImplServiceUserWrapperImpl(post, apply, delete, action, location, propertylist, enableFallback);
        }

        public virtual ComAdobeCqSocialSiteEndpointsImplSiteOperationServiceInfo ComAdobeCqSocialSiteEndpointsImplSiteOperationService(NancyContext context, bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, List<string> fieldWhitelist, List<string> sitePathFilters, string sitePackageGroup)
        {
            return ComAdobeCqSocialSiteEndpointsImplSiteOperationService(post, apply, delete, action, location, propertylist, fieldWhitelist, sitePathFilters, sitePackageGroup);
        }

        public virtual ComAdobeCqSocialSiteImplAnalyticsComponentConfigurationServiceImInfo ComAdobeCqSocialSiteImplAnalyticsComponentConfigurationServiceIm(NancyContext context, bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, List<string> cqSocialConsoleAnalyticsComponents)
        {
            return ComAdobeCqSocialSiteImplAnalyticsComponentConfigurationServiceIm(post, apply, delete, action, location, propertylist, cqSocialConsoleAnalyticsComponents);
        }

        public virtual ComAdobeCqSocialSiteImplSiteConfiguratorImplInfo ComAdobeCqSocialSiteImplSiteConfiguratorImpl(NancyContext context, bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, List<string> componentsUsingTags)
        {
            return ComAdobeCqSocialSiteImplSiteConfiguratorImpl(post, apply, delete, action, location, propertylist, componentsUsingTags);
        }

        public virtual ComAdobeCqSocialSrpImplSocialSolrConnectorInfo ComAdobeCqSocialSrpImplSocialSolrConnector(NancyContext context, bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, string srpType)
        {
            return ComAdobeCqSocialSrpImplSocialSolrConnector(post, apply, delete, action, location, propertylist, srpType);
        }

        public virtual ComAdobeCqSocialSyncImplDiffChangesObserverInfo ComAdobeCqSocialSyncImplDiffChangesObserver(NancyContext context, bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, bool? enabled, string agentName, string diffPath, string propertyNames)
        {
            return ComAdobeCqSocialSyncImplDiffChangesObserver(post, apply, delete, action, location, propertylist, enabled, agentName, diffPath, propertyNames);
        }

        public virtual ComAdobeCqSocialSyncImplGroupSyncListenerImplInfo ComAdobeCqSocialSyncImplGroupSyncListenerImpl(NancyContext context, bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, List<string> nodetypes, List<string> ignorableprops, string ignorablenodes, bool? enabled, string distfolders)
        {
            return ComAdobeCqSocialSyncImplGroupSyncListenerImpl(post, apply, delete, action, location, propertylist, nodetypes, ignorableprops, ignorablenodes, enabled, distfolders);
        }

        public virtual ComAdobeCqSocialSyncImplPublisherSyncServiceImplInfo ComAdobeCqSocialSyncImplPublisherSyncServiceImpl(NancyContext context, bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, List<string> activeRunModes)
        {
            return ComAdobeCqSocialSyncImplPublisherSyncServiceImpl(post, apply, delete, action, location, propertylist, activeRunModes);
        }

        public virtual ComAdobeCqSocialSyncImplUserSyncListenerImplInfo ComAdobeCqSocialSyncImplUserSyncListenerImpl(NancyContext context, bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, List<string> nodetypes, List<string> ignorableprops, List<string> ignorablenodes, bool? enabled, List<string> distfolders)
        {
            return ComAdobeCqSocialSyncImplUserSyncListenerImpl(post, apply, delete, action, location, propertylist, nodetypes, ignorableprops, ignorablenodes, enabled, distfolders);
        }

        public virtual ComAdobeCqSocialTranslationImplTranslationServiceConfigManagerInfo ComAdobeCqSocialTranslationImplTranslationServiceConfigManager(NancyContext context, bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, string translateLanguage, string translateDisplay, bool? translateAttribution, string translateCaching, string translateSmartRendering, string translateCachingDuration, string translateSessionSaveInterval, string translateSessionSaveBatchLimit)
        {
            return ComAdobeCqSocialTranslationImplTranslationServiceConfigManager(post, apply, delete, action, location, propertylist, translateLanguage, translateDisplay, translateAttribution, translateCaching, translateSmartRendering, translateCachingDuration, translateSessionSaveInterval, translateSessionSaveBatchLimit);
        }

        public virtual ComAdobeCqSocialTranslationImplUGCLanguageDetectorInfo ComAdobeCqSocialTranslationImplUGCLanguageDetector(NancyContext context, bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, string eventTopics, string eventFilter, List<string> translateListenerType, List<string> translatePropertyList, int? poolSize, int? maxPoolSize, int? queueSize, int? keepAliveTime)
        {
            return ComAdobeCqSocialTranslationImplUGCLanguageDetector(post, apply, delete, action, location, propertylist, eventTopics, eventFilter, translateListenerType, translatePropertyList, poolSize, maxPoolSize, queueSize, keepAliveTime);
        }

        public virtual ComAdobeCqSocialUgcbaseDispatcherImplFlushServiceImplInfo ComAdobeCqSocialUgcbaseDispatcherImplFlushServiceImpl(NancyContext context, bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, int? threadPoolSize, int? delayTime, int? workerSleepTime)
        {
            return ComAdobeCqSocialUgcbaseDispatcherImplFlushServiceImpl(post, apply, delete, action, location, propertylist, threadPoolSize, delayTime, workerSleepTime);
        }

        public virtual ComAdobeCqSocialUgcbaseImplAysncReverseReplicatorImplInfo ComAdobeCqSocialUgcbaseImplAysncReverseReplicatorImpl(NancyContext context, bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, int? poolSize, int? maxPoolSize, int? queueSize, int? keepAliveTime)
        {
            return ComAdobeCqSocialUgcbaseImplAysncReverseReplicatorImpl(post, apply, delete, action, location, propertylist, poolSize, maxPoolSize, queueSize, keepAliveTime);
        }

        public virtual ComAdobeCqSocialUgcbaseImplPublisherConfigurationImplInfo ComAdobeCqSocialUgcbaseImplPublisherConfigurationImpl(NancyContext context, bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, bool? isPrimaryPublisher)
        {
            return ComAdobeCqSocialUgcbaseImplPublisherConfigurationImpl(post, apply, delete, action, location, propertylist, isPrimaryPublisher);
        }

        public virtual ComAdobeCqSocialUgcbaseImplSocialUtilsImplInfo ComAdobeCqSocialUgcbaseImplSocialUtilsImpl(NancyContext context, bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, bool? legacyCloudUGCPathMapping)
        {
            return ComAdobeCqSocialUgcbaseImplSocialUtilsImpl(post, apply, delete, action, location, propertylist, legacyCloudUGCPathMapping);
        }

        public virtual ComAdobeCqSocialUgcbaseModerationImplAutoModerationImplInfo ComAdobeCqSocialUgcbaseModerationImplAutoModerationImpl(NancyContext context, bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, List<string> automoderationSequence, bool? automoderationOnfailurestop)
        {
            return ComAdobeCqSocialUgcbaseModerationImplAutoModerationImpl(post, apply, delete, action, location, propertylist, automoderationSequence, automoderationOnfailurestop);
        }

        public virtual ComAdobeCqSocialUgcbaseModerationImplSentimentProcessInfo ComAdobeCqSocialUgcbaseModerationImplSentimentProcess(NancyContext context, bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, List<string> watchwordsPositive, List<string> watchwordsNegative, string watchwordsPath, string sentimentPath)
        {
            return ComAdobeCqSocialUgcbaseModerationImplSentimentProcess(post, apply, delete, action, location, propertylist, watchwordsPositive, watchwordsNegative, watchwordsPath, sentimentPath);
        }

        public virtual ComAdobeCqSocialUgcbaseSecurityImplDefaultAttachmentTypeBlackliInfo ComAdobeCqSocialUgcbaseSecurityImplDefaultAttachmentTypeBlackli(NancyContext context, bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, List<string> defaultAttachmentTypeBlacklist, List<string> baselineAttachmentTypeBlacklist)
        {
            return ComAdobeCqSocialUgcbaseSecurityImplDefaultAttachmentTypeBlackli(post, apply, delete, action, location, propertylist, defaultAttachmentTypeBlacklist, baselineAttachmentTypeBlacklist);
        }

        public virtual ComAdobeCqSocialUgcbaseSecurityImplSaferSlingPostValidatorImplInfo ComAdobeCqSocialUgcbaseSecurityImplSaferSlingPostValidatorImpl(NancyContext context, bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, List<string> parameterWhitelist, List<string> parameterWhitelistPrefixes, List<string> binaryParameterWhitelist, List<string> modifierWhitelist, List<string> operationWhitelist, List<string> operationWhitelistPrefixes, List<string> typehintWhitelist, List<string> resourcetypeWhitelist)
        {
            return ComAdobeCqSocialUgcbaseSecurityImplSaferSlingPostValidatorImpl(post, apply, delete, action, location, propertylist, parameterWhitelist, parameterWhitelistPrefixes, binaryParameterWhitelist, modifierWhitelist, operationWhitelist, operationWhitelistPrefixes, typehintWhitelist, resourcetypeWhitelist);
        }

        public virtual ComAdobeCqSocialUserEndpointsImplUsersGroupFromPublishServletInfo ComAdobeCqSocialUserEndpointsImplUsersGroupFromPublishServlet(NancyContext context, bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, string slingServletExtensions, string slingServletPaths, string slingServletMethods)
        {
            return ComAdobeCqSocialUserEndpointsImplUsersGroupFromPublishServlet(post, apply, delete, action, location, propertylist, slingServletExtensions, slingServletPaths, slingServletMethods);
        }

        public virtual ComAdobeCqSocialUserImplTransportHttpToPublisherInfo ComAdobeCqSocialUserImplTransportHttpToPublisher(NancyContext context, bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, bool? enable, List<string> agentConfiguration, string contextPath, List<string> disabledCipherSuites, List<string> enabledCipherSuites)
        {
            return ComAdobeCqSocialUserImplTransportHttpToPublisher(post, apply, delete, action, location, propertylist, enable, agentConfiguration, contextPath, disabledCipherSuites, enabledCipherSuites);
        }

        public virtual ComAdobeCqUiWcmCommonsInternalServletsRteRTEFilterServletFactInfo ComAdobeCqUiWcmCommonsInternalServletsRteRTEFilterServletFact(NancyContext context, bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, List<string> resourceTypes)
        {
            return ComAdobeCqUiWcmCommonsInternalServletsRteRTEFilterServletFact(post, apply, delete, action, location, propertylist, resourceTypes);
        }

        public virtual ComAdobeCqUpgradesCleanupImplUpgradeContentCleanupInfo ComAdobeCqUpgradesCleanupImplUpgradeContentCleanup(NancyContext context, bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, List<string> deletePathRegexps, string deleteSql2Query)
        {
            return ComAdobeCqUpgradesCleanupImplUpgradeContentCleanup(post, apply, delete, action, location, propertylist, deletePathRegexps, deleteSql2Query);
        }

        public virtual ComAdobeCqUpgradesCleanupImplUpgradeInstallFolderCleanupInfo ComAdobeCqUpgradesCleanupImplUpgradeInstallFolderCleanup(NancyContext context, bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, List<string> deleteNameRegexps)
        {
            return ComAdobeCqUpgradesCleanupImplUpgradeInstallFolderCleanup(post, apply, delete, action, location, propertylist, deleteNameRegexps);
        }

        public virtual ComAdobeCqWcmJobsAsyncImplAsyncDeleteConfigProviderServiceInfo ComAdobeCqWcmJobsAsyncImplAsyncDeleteConfigProviderService(NancyContext context, bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, int? threshold, string jobTopicName, bool? emailEnabled)
        {
            return ComAdobeCqWcmJobsAsyncImplAsyncDeleteConfigProviderService(post, apply, delete, action, location, propertylist, threshold, jobTopicName, emailEnabled);
        }

        public virtual ComAdobeCqWcmJobsAsyncImplAsyncJobCleanUpTaskInfo ComAdobeCqWcmJobsAsyncImplAsyncJobCleanUpTask(NancyContext context, bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, string schedulerExpression, int? jobPurgeThreshold, int? jobPurgeMaxJobs)
        {
            return ComAdobeCqWcmJobsAsyncImplAsyncJobCleanUpTask(post, apply, delete, action, location, propertylist, schedulerExpression, jobPurgeThreshold, jobPurgeMaxJobs);
        }

        public virtual ComAdobeCqWcmJobsAsyncImplAsyncMoveConfigProviderServiceInfo ComAdobeCqWcmJobsAsyncImplAsyncMoveConfigProviderService(NancyContext context, bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, int? threshold, string jobTopicName, bool? emailEnabled)
        {
            return ComAdobeCqWcmJobsAsyncImplAsyncMoveConfigProviderService(post, apply, delete, action, location, propertylist, threshold, jobTopicName, emailEnabled);
        }

        public virtual ComAdobeCqWcmJobsAsyncImplAsyncPageMoveConfigProviderServiceInfo ComAdobeCqWcmJobsAsyncImplAsyncPageMoveConfigProviderService(NancyContext context, bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, int? threshold, string jobTopicName, bool? emailEnabled)
        {
            return ComAdobeCqWcmJobsAsyncImplAsyncPageMoveConfigProviderService(post, apply, delete, action, location, propertylist, threshold, jobTopicName, emailEnabled);
        }

        public virtual ComAdobeCqWcmLaunchesImplLaunchesEventHandlerInfo ComAdobeCqWcmLaunchesImplLaunchesEventHandler(NancyContext context, bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, string eventFilter, int? launchesEventhandlerThreadpoolMaxsize, string launchesEventhandlerThreadpoolPriority, bool? launchesEventhandlerUpdatelastmodification)
        {
            return ComAdobeCqWcmLaunchesImplLaunchesEventHandler(post, apply, delete, action, location, propertylist, eventFilter, launchesEventhandlerThreadpoolMaxsize, launchesEventhandlerThreadpoolPriority, launchesEventhandlerUpdatelastmodification);
        }

        public virtual ComAdobeCqWcmMobileQrcodeServletQRCodeImageGeneratorInfo ComAdobeCqWcmMobileQrcodeServletQRCodeImageGenerator(NancyContext context, bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, List<string> cqWcmQrcodeServletWhitelist)
        {
            return ComAdobeCqWcmMobileQrcodeServletQRCodeImageGenerator(post, apply, delete, action, location, propertylist, cqWcmQrcodeServletWhitelist);
        }

        public virtual ComAdobeCqWcmStyleInternalComponentStyleInfoCacheImplInfo ComAdobeCqWcmStyleInternalComponentStyleInfoCacheImpl(NancyContext context, bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, int? size)
        {
            return ComAdobeCqWcmStyleInternalComponentStyleInfoCacheImpl(post, apply, delete, action, location, propertylist, size);
        }

        public virtual ComAdobeCqWcmTranslationImplTranslationPlatformConfigurationImplInfo ComAdobeCqWcmTranslationImplTranslationPlatformConfigurationImpl(NancyContext context, bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, string syncTranslationStateSchedulingFormat, string schedulingRepeatTranslationSchedulingFormat, string syncTranslationStateLockTimeoutInMinutes, string exportFormat)
        {
            return ComAdobeCqWcmTranslationImplTranslationPlatformConfigurationImpl(post, apply, delete, action, location, propertylist, syncTranslationStateSchedulingFormat, schedulingRepeatTranslationSchedulingFormat, syncTranslationStateLockTimeoutInMinutes, exportFormat);
        }

        public virtual ComAdobeFdFpConfigFormsPortalDraftsandSubmissionConfigServiceInfo ComAdobeFdFpConfigFormsPortalDraftsandSubmissionConfigService(NancyContext context, bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, List<string> portalOutboxes, string draftDataService, string draftMetadataService, string submitDataService, string submitMetadataService, string pendingSignDataService, string pendingSignMetadataService)
        {
            return ComAdobeFdFpConfigFormsPortalDraftsandSubmissionConfigService(post, apply, delete, action, location, propertylist, portalOutboxes, draftDataService, draftMetadataService, submitDataService, submitMetadataService, pendingSignDataService, pendingSignMetadataService);
        }

        public virtual ComAdobeFdFpConfigFormsPortalSchedulerServiceInfo ComAdobeFdFpConfigFormsPortalSchedulerService(NancyContext context, bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, string formportalInterval)
        {
            return ComAdobeFdFpConfigFormsPortalSchedulerService(post, apply, delete, action, location, propertylist, formportalInterval);
        }

        public virtual ComAdobeFormsCommonServiceImplDefaultDataProviderInfo ComAdobeFormsCommonServiceImplDefaultDataProvider(NancyContext context, bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, List<string> alloweddataFileLocations)
        {
            return ComAdobeFormsCommonServiceImplDefaultDataProvider(post, apply, delete, action, location, propertylist, alloweddataFileLocations);
        }

        public virtual ComAdobeFormsCommonServiceImplFormsCommonConfigurationServiceImpInfo ComAdobeFormsCommonServiceImplFormsCommonConfigurationServiceImp(NancyContext context, bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, string tempStorageConfig)
        {
            return ComAdobeFormsCommonServiceImplFormsCommonConfigurationServiceImp(post, apply, delete, action, location, propertylist, tempStorageConfig);
        }

        public virtual ComAdobeFormsCommonServletTempCleanUpTaskInfo ComAdobeFormsCommonServletTempCleanUpTask(NancyContext context, bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, string schedulerExpression, string durationForTemporaryStorage, string durationForAnonymousStorage)
        {
            return ComAdobeFormsCommonServletTempCleanUpTask(post, apply, delete, action, location, propertylist, schedulerExpression, durationForTemporaryStorage, durationForAnonymousStorage);
        }

        public virtual ComAdobeGraniteAcpPlatformPlatformServletInfo ComAdobeGraniteAcpPlatformPlatformServlet(NancyContext context, bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, int? queryLimit, List<string> fileTypeExtensionMap)
        {
            return ComAdobeGraniteAcpPlatformPlatformServlet(post, apply, delete, action, location, propertylist, queryLimit, fileTypeExtensionMap);
        }

        public virtual ComAdobeGraniteActivitystreamsImplActivityManagerImplInfo ComAdobeGraniteActivitystreamsImplActivityManagerImpl(NancyContext context, bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, List<string> aggregateRelationships, bool? aggregateDescendVirtual)
        {
            return ComAdobeGraniteActivitystreamsImplActivityManagerImpl(post, apply, delete, action, location, propertylist, aggregateRelationships, aggregateDescendVirtual);
        }

        public virtual ComAdobeGraniteAnalyzerBaseSystemStatusServletInfo ComAdobeGraniteAnalyzerBaseSystemStatusServlet(NancyContext context, bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, bool? disabled)
        {
            return ComAdobeGraniteAnalyzerBaseSystemStatusServlet(post, apply, delete, action, location, propertylist, disabled);
        }

        public virtual ComAdobeGraniteAnalyzerScriptsCompileAllScriptsCompilerServletInfo ComAdobeGraniteAnalyzerScriptsCompileAllScriptsCompilerServlet(NancyContext context, bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, bool? disabled)
        {
            return ComAdobeGraniteAnalyzerScriptsCompileAllScriptsCompilerServlet(post, apply, delete, action, location, propertylist, disabled);
        }

        public virtual ComAdobeGraniteApicontrollerFilterResolverHookFactoryInfo ComAdobeGraniteApicontrollerFilterResolverHookFactory(NancyContext context, bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, string comAdobeCqCdnCdnRewriter, string comAdobeCqCloudConfigComponents, string comAdobeCqCloudConfigCore, string comAdobeCqCloudConfigUi, string comAdobeCqComAdobeCqEditor, string comAdobeCqComAdobeCqProjectsCore, string comAdobeCqComAdobeCqProjectsWcmCore, string comAdobeCqComAdobeCqUiCommons, string comAdobeCqComAdobeCqWcmStyle, string comAdobeCqCqActivitymapIntegration, string comAdobeCqCqContexthubCommons, string comAdobeCqCqDtm, string comAdobeCqCqHealthcheck, string comAdobeCqCqMultisiteTargeting, string comAdobeCqCqPreUpgradeCleanup, string comAdobeCqCqProductInfoProvider, string comAdobeCqCqRestSites, string comAdobeCqCqSecurityHc, string comAdobeCqDamCqDamSvgHandler, string comAdobeCqDamCqScene7Imaging, string comAdobeCqDtmReactorCore, string comAdobeCqDtmReactorUi, string comAdobeCqExpJspelResolver, string comAdobeCqInboxCqInbox, string comAdobeCqJsonSchemaParser, string comAdobeCqMediaCqMediaPublishingDpsFpCore, string comAdobeCqMobileCqMobileCaas, string comAdobeCqMobileCqMobileIndexBuilder, string comAdobeCqMobileCqMobilePhonegapBuild, string comAdobeCqMyspell, string comAdobeCqSampleWeRetailCore, string comAdobeCqScreensComAdobeCqScreensDcc, string comAdobeCqScreensComAdobeCqScreensMqCore, string comAdobeCqSocialCqSocialAsProvider, string comAdobeCqSocialCqSocialBadgingBasicImpl, string comAdobeCqSocialCqSocialBadgingImpl, string comAdobeCqSocialCqSocialCalendarImpl, string comAdobeCqSocialCqSocialContentFragmentsImpl, string comAdobeCqSocialCqSocialEnablementImpl, string comAdobeCqSocialCqSocialGraphImpl, string comAdobeCqSocialCqSocialIdeationImpl, string comAdobeCqSocialCqSocialJcrProvider, string comAdobeCqSocialCqSocialMembersImpl, string comAdobeCqSocialCqSocialMsProvider, string comAdobeCqSocialCqSocialNotificationsChannelsWeb, string comAdobeCqSocialCqSocialNotificationsImpl, string comAdobeCqSocialCqSocialRdbProvider, string comAdobeCqSocialCqSocialScfImpl, string comAdobeCqSocialCqSocialScoringBasicImpl, string comAdobeCqSocialCqSocialScoringImpl, string comAdobeCqSocialCqSocialServiceusersImpl, string comAdobeCqSocialCqSocialSrpImpl, string comAdobeCqSocialCqSocialUgcbaseImpl, string comAdobeDamCqDamCfmImpl, string comAdobeFormsFoundationFormsFoundationBase, string comAdobeGraniteApicontroller, string comAdobeGraniteAssetCore, string comAdobeGraniteAuthSso, string comAdobeGraniteBundlesHcImpl, string comAdobeGraniteCompatRouter, string comAdobeGraniteConf, string comAdobeGraniteConfUiCore, string comAdobeGraniteCors, string comAdobeGraniteCrxExplorer, string comAdobeGraniteCrxdeLite, string comAdobeGraniteCryptoConfig, string comAdobeGraniteCryptoExtension, string comAdobeGraniteCryptoFile, string comAdobeGraniteCryptoJcr, string comAdobeGraniteCsrf, string comAdobeGraniteDistributionCore, string comAdobeGraniteDropwizardMetrics, string comAdobeGraniteFragsImpl, string comAdobeGraniteGibson, string comAdobeGraniteInfocollector, string comAdobeGraniteInstallerFactoryPackages, string comAdobeGraniteJettySsl, string comAdobeGraniteJobsAsync, string comAdobeGraniteMaintenanceOak, string comAdobeGraniteMonitoringCore, string comAdobeGraniteQueries, string comAdobeGraniteReplicationHcImpl, string comAdobeGraniteRepositoryChecker, string comAdobeGraniteRepositoryHcImpl, string comAdobeGraniteRestAssets, string comAdobeGraniteSecurityUi, string comAdobeGraniteStartup, string comAdobeGraniteTagsoup, string comAdobeGraniteTaskmanagementCore, string comAdobeGraniteTaskmanagementWorkflow, string comAdobeGraniteUiClientlibsCompilerLess, string comAdobeGraniteUiClientlibsProcessorGcc, string comAdobeGraniteWebconsolePlugins, string comAdobeGraniteWorkflowConsole, string comAdobeXmpWorkerFilesNativeFragmentLinux, string comAdobeXmpWorkerFilesNativeFragmentMacosx, string comAdobeXmpWorkerFilesNativeFragmentWin, string comDayCommonsOsgiWrapperSimpleJndi, string comDayCqCqAuthhandler, string comDayCqCqCompatConfigupdate, string comDayCqCqLicensebranding, string comDayCqCqNotifcationImpl, string comDayCqCqReplicationAudit, string comDayCqCqSearchExt, string comDayCqDamCqDamAnnotationPrint, string comDayCqDamCqDamAssetUsage, string comDayCqDamCqDamS7dam, string comDayCqDamCqDamSimilaritysearch, string comDayCqDamDamWebdavSupport, string comDayCqPreUpgradeTasks, string comDayCqReplicationExtensions, string comDayCqWcmCqMsmCore, string comDayCqWcmCqWcmTranslation, string dayCommonsJrawio, string orgApacheAriesJmxWhiteboard, string orgApacheFelixHttpSslfilter, string orgApacheFelixOrgApacheFelixThreaddump, string orgApacheFelixWebconsolePluginsDs, string orgApacheFelixWebconsolePluginsEvent, string orgApacheFelixWebconsolePluginsMemoryusage, string orgApacheFelixWebconsolePluginsPackageadmin, string orgApacheJackrabbitOakAuthLdap, string orgApacheJackrabbitOakSegmentTar, string orgApacheJackrabbitOakSolrOsgi, string orgApacheSlingBundleresourceImpl, string orgApacheSlingCommonsFsclassloader, string orgApacheSlingCommonsLogWebconsole, string orgApacheSlingDatasource, string orgApacheSlingDiscoveryBase, string orgApacheSlingDiscoveryOak, string orgApacheSlingDiscoverySupport, string orgApacheSlingDistributionApi, string orgApacheSlingDistributionCore, string orgApacheSlingExtensionsWebconsolesecurityprovider, string orgApacheSlingHcWebconsole, string orgApacheSlingInstallerConsole, string orgApacheSlingInstallerProviderFile, string orgApacheSlingInstallerProviderJcr, string orgApacheSlingJcrDavex, string orgApacheSlingJcrResourcesecurity, string orgApacheSlingJmxProvider, string orgApacheSlingLaunchpadInstaller, string orgApacheSlingModelsImpl, string orgApacheSlingRepoinitParser, string orgApacheSlingResourceInventory, string orgApacheSlingResourceresolver, string orgApacheSlingScriptingJavascript, string orgApacheSlingScriptingJst, string orgApacheSlingScriptingSightlyJsProvider, string orgApacheSlingScriptingSightlyModelsProvider, string orgApacheSlingSecurity, string orgApacheSlingServletsCompat, string orgApacheSlingServletsGet, string orgApacheSlingStartupfilterDisabler, string orgApacheSlingTracer, string weRetailClientAppCore)
        {
            return ComAdobeGraniteApicontrollerFilterResolverHookFactory(post, apply, delete, action, location, propertylist, comAdobeCqCdnCdnRewriter, comAdobeCqCloudConfigComponents, comAdobeCqCloudConfigCore, comAdobeCqCloudConfigUi, comAdobeCqComAdobeCqEditor, comAdobeCqComAdobeCqProjectsCore, comAdobeCqComAdobeCqProjectsWcmCore, comAdobeCqComAdobeCqUiCommons, comAdobeCqComAdobeCqWcmStyle, comAdobeCqCqActivitymapIntegration, comAdobeCqCqContexthubCommons, comAdobeCqCqDtm, comAdobeCqCqHealthcheck, comAdobeCqCqMultisiteTargeting, comAdobeCqCqPreUpgradeCleanup, comAdobeCqCqProductInfoProvider, comAdobeCqCqRestSites, comAdobeCqCqSecurityHc, comAdobeCqDamCqDamSvgHandler, comAdobeCqDamCqScene7Imaging, comAdobeCqDtmReactorCore, comAdobeCqDtmReactorUi, comAdobeCqExpJspelResolver, comAdobeCqInboxCqInbox, comAdobeCqJsonSchemaParser, comAdobeCqMediaCqMediaPublishingDpsFpCore, comAdobeCqMobileCqMobileCaas, comAdobeCqMobileCqMobileIndexBuilder, comAdobeCqMobileCqMobilePhonegapBuild, comAdobeCqMyspell, comAdobeCqSampleWeRetailCore, comAdobeCqScreensComAdobeCqScreensDcc, comAdobeCqScreensComAdobeCqScreensMqCore, comAdobeCqSocialCqSocialAsProvider, comAdobeCqSocialCqSocialBadgingBasicImpl, comAdobeCqSocialCqSocialBadgingImpl, comAdobeCqSocialCqSocialCalendarImpl, comAdobeCqSocialCqSocialContentFragmentsImpl, comAdobeCqSocialCqSocialEnablementImpl, comAdobeCqSocialCqSocialGraphImpl, comAdobeCqSocialCqSocialIdeationImpl, comAdobeCqSocialCqSocialJcrProvider, comAdobeCqSocialCqSocialMembersImpl, comAdobeCqSocialCqSocialMsProvider, comAdobeCqSocialCqSocialNotificationsChannelsWeb, comAdobeCqSocialCqSocialNotificationsImpl, comAdobeCqSocialCqSocialRdbProvider, comAdobeCqSocialCqSocialScfImpl, comAdobeCqSocialCqSocialScoringBasicImpl, comAdobeCqSocialCqSocialScoringImpl, comAdobeCqSocialCqSocialServiceusersImpl, comAdobeCqSocialCqSocialSrpImpl, comAdobeCqSocialCqSocialUgcbaseImpl, comAdobeDamCqDamCfmImpl, comAdobeFormsFoundationFormsFoundationBase, comAdobeGraniteApicontroller, comAdobeGraniteAssetCore, comAdobeGraniteAuthSso, comAdobeGraniteBundlesHcImpl, comAdobeGraniteCompatRouter, comAdobeGraniteConf, comAdobeGraniteConfUiCore, comAdobeGraniteCors, comAdobeGraniteCrxExplorer, comAdobeGraniteCrxdeLite, comAdobeGraniteCryptoConfig, comAdobeGraniteCryptoExtension, comAdobeGraniteCryptoFile, comAdobeGraniteCryptoJcr, comAdobeGraniteCsrf, comAdobeGraniteDistributionCore, comAdobeGraniteDropwizardMetrics, comAdobeGraniteFragsImpl, comAdobeGraniteGibson, comAdobeGraniteInfocollector, comAdobeGraniteInstallerFactoryPackages, comAdobeGraniteJettySsl, comAdobeGraniteJobsAsync, comAdobeGraniteMaintenanceOak, comAdobeGraniteMonitoringCore, comAdobeGraniteQueries, comAdobeGraniteReplicationHcImpl, comAdobeGraniteRepositoryChecker, comAdobeGraniteRepositoryHcImpl, comAdobeGraniteRestAssets, comAdobeGraniteSecurityUi, comAdobeGraniteStartup, comAdobeGraniteTagsoup, comAdobeGraniteTaskmanagementCore, comAdobeGraniteTaskmanagementWorkflow, comAdobeGraniteUiClientlibsCompilerLess, comAdobeGraniteUiClientlibsProcessorGcc, comAdobeGraniteWebconsolePlugins, comAdobeGraniteWorkflowConsole, comAdobeXmpWorkerFilesNativeFragmentLinux, comAdobeXmpWorkerFilesNativeFragmentMacosx, comAdobeXmpWorkerFilesNativeFragmentWin, comDayCommonsOsgiWrapperSimpleJndi, comDayCqCqAuthhandler, comDayCqCqCompatConfigupdate, comDayCqCqLicensebranding, comDayCqCqNotifcationImpl, comDayCqCqReplicationAudit, comDayCqCqSearchExt, comDayCqDamCqDamAnnotationPrint, comDayCqDamCqDamAssetUsage, comDayCqDamCqDamS7dam, comDayCqDamCqDamSimilaritysearch, comDayCqDamDamWebdavSupport, comDayCqPreUpgradeTasks, comDayCqReplicationExtensions, comDayCqWcmCqMsmCore, comDayCqWcmCqWcmTranslation, dayCommonsJrawio, orgApacheAriesJmxWhiteboard, orgApacheFelixHttpSslfilter, orgApacheFelixOrgApacheFelixThreaddump, orgApacheFelixWebconsolePluginsDs, orgApacheFelixWebconsolePluginsEvent, orgApacheFelixWebconsolePluginsMemoryusage, orgApacheFelixWebconsolePluginsPackageadmin, orgApacheJackrabbitOakAuthLdap, orgApacheJackrabbitOakSegmentTar, orgApacheJackrabbitOakSolrOsgi, orgApacheSlingBundleresourceImpl, orgApacheSlingCommonsFsclassloader, orgApacheSlingCommonsLogWebconsole, orgApacheSlingDatasource, orgApacheSlingDiscoveryBase, orgApacheSlingDiscoveryOak, orgApacheSlingDiscoverySupport, orgApacheSlingDistributionApi, orgApacheSlingDistributionCore, orgApacheSlingExtensionsWebconsolesecurityprovider, orgApacheSlingHcWebconsole, orgApacheSlingInstallerConsole, orgApacheSlingInstallerProviderFile, orgApacheSlingInstallerProviderJcr, orgApacheSlingJcrDavex, orgApacheSlingJcrResourcesecurity, orgApacheSlingJmxProvider, orgApacheSlingLaunchpadInstaller, orgApacheSlingModelsImpl, orgApacheSlingRepoinitParser, orgApacheSlingResourceInventory, orgApacheSlingResourceresolver, orgApacheSlingScriptingJavascript, orgApacheSlingScriptingJst, orgApacheSlingScriptingSightlyJsProvider, orgApacheSlingScriptingSightlyModelsProvider, orgApacheSlingSecurity, orgApacheSlingServletsCompat, orgApacheSlingServletsGet, orgApacheSlingStartupfilterDisabler, orgApacheSlingTracer, weRetailClientAppCore);
        }

        public virtual ComAdobeGraniteAuthCertImplClientCertAuthHandlerInfo ComAdobeGraniteAuthCertImplClientCertAuthHandler(NancyContext context, bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, string path, int? serviceRanking)
        {
            return ComAdobeGraniteAuthCertImplClientCertAuthHandler(post, apply, delete, action, location, propertylist, path, serviceRanking);
        }

        public virtual ComAdobeGraniteAuthImsInfo ComAdobeGraniteAuthIms(NancyContext context, bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, string configid, string scope)
        {
            return ComAdobeGraniteAuthIms(post, apply, delete, action, location, propertylist, configid, scope);
        }

        public virtual ComAdobeGraniteAuthImsImplExternalUserIdMappingProviderExtensionInfo ComAdobeGraniteAuthImsImplExternalUserIdMappingProviderExtension(NancyContext context, bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, string oauthProviderId)
        {
            return ComAdobeGraniteAuthImsImplExternalUserIdMappingProviderExtension(post, apply, delete, action, location, propertylist, oauthProviderId);
        }

        public virtual ComAdobeGraniteAuthImsImplIMSAccessTokenRequestCustomizerImplInfo ComAdobeGraniteAuthImsImplIMSAccessTokenRequestCustomizerImpl(NancyContext context, bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, string authImsClientSecret, string customizerType)
        {
            return ComAdobeGraniteAuthImsImplIMSAccessTokenRequestCustomizerImpl(post, apply, delete, action, location, propertylist, authImsClientSecret, customizerType);
        }

        public virtual ComAdobeGraniteAuthImsImplIMSInstanceCredentialsValidatorInfo ComAdobeGraniteAuthImsImplIMSInstanceCredentialsValidator(NancyContext context, bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, string oauthProviderId)
        {
            return ComAdobeGraniteAuthImsImplIMSInstanceCredentialsValidator(post, apply, delete, action, location, propertylist, oauthProviderId);
        }

        public virtual ComAdobeGraniteAuthImsImplIMSProviderImplInfo ComAdobeGraniteAuthImsImplIMSProviderImpl(NancyContext context, bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, string oauthProviderId, string oauthProviderImsAuthorizationUrl, string oauthProviderImsTokenUrl, string oauthProviderImsProfileUrl, List<string> oauthProviderImsExtendedDetailsUrls, string oauthProviderImsValidateTokenUrl, string oauthProviderImsSessionProperty, string oauthProviderImsServiceTokenClientId, string oauthProviderImsServiceTokenClientSecret, string oauthProviderImsServiceToken, string imsOrgRef, List<string> imsGroupMapping, bool? oauthProviderImsOnlyLicenseGroup)
        {
            return ComAdobeGraniteAuthImsImplIMSProviderImpl(post, apply, delete, action, location, propertylist, oauthProviderId, oauthProviderImsAuthorizationUrl, oauthProviderImsTokenUrl, oauthProviderImsProfileUrl, oauthProviderImsExtendedDetailsUrls, oauthProviderImsValidateTokenUrl, oauthProviderImsSessionProperty, oauthProviderImsServiceTokenClientId, oauthProviderImsServiceTokenClientSecret, oauthProviderImsServiceToken, imsOrgRef, imsGroupMapping, oauthProviderImsOnlyLicenseGroup);
        }

        public virtual ComAdobeGraniteAuthImsImplImsConfigProviderImplInfo ComAdobeGraniteAuthImsImplImsConfigProviderImpl(NancyContext context, bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, string oauthConfigmanagerImsConfigid, string imsOwningEntity, string aemInstanceId, string imsServiceCode)
        {
            return ComAdobeGraniteAuthImsImplImsConfigProviderImpl(post, apply, delete, action, location, propertylist, oauthConfigmanagerImsConfigid, imsOwningEntity, aemInstanceId, imsServiceCode);
        }

        public virtual ComAdobeGraniteAuthOauthAccesstokenProviderInfo ComAdobeGraniteAuthOauthAccesstokenProvider(NancyContext context, bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, string name, string authTokenProviderTitle, List<string> authTokenProviderDefaultClaims, string authTokenProviderEndpoint, string authAccessTokenRequest, string authTokenProviderKeypairAlias, int? authTokenProviderConnTimeout, int? authTokenProviderSoTimeout, string authTokenProviderClientId, string authTokenProviderScope, bool? authTokenProviderReuseAccessToken, bool? authTokenProviderRelaxedSsl, string tokenRequestCustomizerType, string authTokenValidatorType)
        {
            return ComAdobeGraniteAuthOauthAccesstokenProvider(post, apply, delete, action, location, propertylist, name, authTokenProviderTitle, authTokenProviderDefaultClaims, authTokenProviderEndpoint, authAccessTokenRequest, authTokenProviderKeypairAlias, authTokenProviderConnTimeout, authTokenProviderSoTimeout, authTokenProviderClientId, authTokenProviderScope, authTokenProviderReuseAccessToken, authTokenProviderRelaxedSsl, tokenRequestCustomizerType, authTokenValidatorType);
        }

        public virtual ComAdobeGraniteAuthOauthImplBearerAuthenticationHandlerInfo ComAdobeGraniteAuthOauthImplBearerAuthenticationHandler(NancyContext context, bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, string path, List<string> oauthClientIdsAllowed, bool? authBearerSyncIms, string authTokenRequestParameter, string oauthBearerConfigid, bool? oauthJwtSupport)
        {
            return ComAdobeGraniteAuthOauthImplBearerAuthenticationHandler(post, apply, delete, action, location, propertylist, path, oauthClientIdsAllowed, authBearerSyncIms, authTokenRequestParameter, oauthBearerConfigid, oauthJwtSupport);
        }

        public virtual ComAdobeGraniteAuthOauthImplDefaultTokenValidatorImplInfo ComAdobeGraniteAuthOauthImplDefaultTokenValidatorImpl(NancyContext context, bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, string authTokenValidatorType)
        {
            return ComAdobeGraniteAuthOauthImplDefaultTokenValidatorImpl(post, apply, delete, action, location, propertylist, authTokenValidatorType);
        }

        public virtual ComAdobeGraniteAuthOauthImplFacebookProviderImplInfo ComAdobeGraniteAuthOauthImplFacebookProviderImpl(NancyContext context, bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, string oauthProviderId)
        {
            return ComAdobeGraniteAuthOauthImplFacebookProviderImpl(post, apply, delete, action, location, propertylist, oauthProviderId);
        }

        public virtual ComAdobeGraniteAuthOauthImplGithubProviderImplInfo ComAdobeGraniteAuthOauthImplGithubProviderImpl(NancyContext context, bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, string oauthProviderId, string oauthProviderGithubAuthorizationUrl, string oauthProviderGithubTokenUrl, string oauthProviderGithubProfileUrl)
        {
            return ComAdobeGraniteAuthOauthImplGithubProviderImpl(post, apply, delete, action, location, propertylist, oauthProviderId, oauthProviderGithubAuthorizationUrl, oauthProviderGithubTokenUrl, oauthProviderGithubProfileUrl);
        }

        public virtual ComAdobeGraniteAuthOauthImplGraniteProviderInfo ComAdobeGraniteAuthOauthImplGraniteProvider(NancyContext context, bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, string oauthProviderId, string oauthProviderGraniteAuthorizationUrl, string oauthProviderGraniteTokenUrl, string oauthProviderGraniteProfileUrl, string oauthProviderGraniteExtendedDetailsUrls)
        {
            return ComAdobeGraniteAuthOauthImplGraniteProvider(post, apply, delete, action, location, propertylist, oauthProviderId, oauthProviderGraniteAuthorizationUrl, oauthProviderGraniteTokenUrl, oauthProviderGraniteProfileUrl, oauthProviderGraniteExtendedDetailsUrls);
        }

        public virtual ComAdobeGraniteAuthOauthImplHelperProviderConfigManagerInfo ComAdobeGraniteAuthOauthImplHelperProviderConfigManager(NancyContext context, bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, string oauthCookieLoginTimeout, string oauthCookieMaxAge)
        {
            return ComAdobeGraniteAuthOauthImplHelperProviderConfigManager(post, apply, delete, action, location, propertylist, oauthCookieLoginTimeout, oauthCookieMaxAge);
        }

        public virtual ComAdobeGraniteAuthOauthImplHelperProviderConfigManagerInternalInfo ComAdobeGraniteAuthOauthImplHelperProviderConfigManagerInternal(NancyContext context, bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, string oauthCookieLoginTimeout, string oauthCookieMaxAge)
        {
            return ComAdobeGraniteAuthOauthImplHelperProviderConfigManagerInternal(post, apply, delete, action, location, propertylist, oauthCookieLoginTimeout, oauthCookieMaxAge);
        }

        public virtual ComAdobeGraniteAuthOauthImplOAuthAuthenticationHandlerInfo ComAdobeGraniteAuthOauthImplOAuthAuthenticationHandler(NancyContext context, bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, string path)
        {
            return ComAdobeGraniteAuthOauthImplOAuthAuthenticationHandler(post, apply, delete, action, location, propertylist, path);
        }

        public virtual ComAdobeGraniteAuthOauthImplTwitterProviderImplInfo ComAdobeGraniteAuthOauthImplTwitterProviderImpl(NancyContext context, bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, string oauthProviderId)
        {
            return ComAdobeGraniteAuthOauthImplTwitterProviderImpl(post, apply, delete, action, location, propertylist, oauthProviderId);
        }

        public virtual ComAdobeGraniteAuthOauthProviderInfo ComAdobeGraniteAuthOauthProvider(NancyContext context, bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, string oauthConfigId, string oauthClientId, string oauthClientSecret, List<string> oauthScope, string oauthConfigProviderId, bool? oauthCreateUsers, string oauthUseridProperty, bool? forceStrictUsernameMatching, bool? oauthEncodeUserids, bool? oauthHashUserids, string oauthCallBackUrl, bool? oauthAccessTokenPersist, bool? oauthAccessTokenPersistCookie, bool? oauthCsrfStateProtection, bool? oauthRedirectRequestParams, bool? oauthConfigSiblingsAllow)
        {
            return ComAdobeGraniteAuthOauthProvider(post, apply, delete, action, location, propertylist, oauthConfigId, oauthClientId, oauthClientSecret, oauthScope, oauthConfigProviderId, oauthCreateUsers, oauthUseridProperty, forceStrictUsernameMatching, oauthEncodeUserids, oauthHashUserids, oauthCallBackUrl, oauthAccessTokenPersist, oauthAccessTokenPersistCookie, oauthCsrfStateProtection, oauthRedirectRequestParams, oauthConfigSiblingsAllow);
        }

        public virtual ComAdobeGraniteAuthRequirementImplDefaultRequirementHandlerInfo ComAdobeGraniteAuthRequirementImplDefaultRequirementHandler(NancyContext context, bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, List<string> supportedPaths)
        {
            return ComAdobeGraniteAuthRequirementImplDefaultRequirementHandler(post, apply, delete, action, location, propertylist, supportedPaths);
        }

        public virtual ComAdobeGraniteAuthSamlSamlAuthenticationHandlerInfo ComAdobeGraniteAuthSamlSamlAuthenticationHandler(NancyContext context, bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, List<string> path, int? serviceRanking, string idpUrl, string idpCertAlias, bool? idpHttpRedirect, string serviceProviderEntityId, string assertionConsumerServiceURL, string spPrivateKeyAlias, string keyStorePassword, string defaultRedirectUrl, string userIDAttribute, bool? useEncryption, bool? createUser, string userIntermediatePath, bool? addGroupMemberships, string groupMembershipAttribute, List<string> defaultGroups, string nameIdFormat, List<string> synchronizeAttributes, bool? handleLogout, string logoutUrl, int? clockTolerance, string digestMethod, string signatureMethod, string identitySyncType, string idpIdentifier)
        {
            return ComAdobeGraniteAuthSamlSamlAuthenticationHandler(post, apply, delete, action, location, propertylist, path, serviceRanking, idpUrl, idpCertAlias, idpHttpRedirect, serviceProviderEntityId, assertionConsumerServiceURL, spPrivateKeyAlias, keyStorePassword, defaultRedirectUrl, userIDAttribute, useEncryption, createUser, userIntermediatePath, addGroupMemberships, groupMembershipAttribute, defaultGroups, nameIdFormat, synchronizeAttributes, handleLogout, logoutUrl, clockTolerance, digestMethod, signatureMethod, identitySyncType, idpIdentifier);
        }

        public virtual ComAdobeGraniteAuthSsoImplSsoAuthenticationHandlerInfo ComAdobeGraniteAuthSsoImplSsoAuthenticationHandler(NancyContext context, bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, string path, int? serviceRanking, string jaasControlFlag, string jaasRealmName, int? jaasRanking, List<string> headers, List<string> cookies, List<string> parameters, List<string> usermap, string format, string trustedCredentialsAttribute)
        {
            return ComAdobeGraniteAuthSsoImplSsoAuthenticationHandler(post, apply, delete, action, location, propertylist, path, serviceRanking, jaasControlFlag, jaasRealmName, jaasRanking, headers, cookies, parameters, usermap, format, trustedCredentialsAttribute);
        }

        public virtual ComAdobeGraniteBundlesHcImplCodeCacheHealthCheckInfo ComAdobeGraniteBundlesHcImplCodeCacheHealthCheck(NancyContext context, bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, List<string> hcTags, int? minimumCodeCacheSize)
        {
            return ComAdobeGraniteBundlesHcImplCodeCacheHealthCheck(post, apply, delete, action, location, propertylist, hcTags, minimumCodeCacheSize);
        }

        public virtual ComAdobeGraniteBundlesHcImplCrxdeSupportBundleHealthCheckInfo ComAdobeGraniteBundlesHcImplCrxdeSupportBundleHealthCheck(NancyContext context, bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, List<string> hcTags)
        {
            return ComAdobeGraniteBundlesHcImplCrxdeSupportBundleHealthCheck(post, apply, delete, action, location, propertylist, hcTags);
        }

        public virtual ComAdobeGraniteBundlesHcImplDavExBundleHealthCheckInfo ComAdobeGraniteBundlesHcImplDavExBundleHealthCheck(NancyContext context, bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, List<string> hcTags)
        {
            return ComAdobeGraniteBundlesHcImplDavExBundleHealthCheck(post, apply, delete, action, location, propertylist, hcTags);
        }

        public virtual ComAdobeGraniteBundlesHcImplInactiveBundlesHealthCheckInfo ComAdobeGraniteBundlesHcImplInactiveBundlesHealthCheck(NancyContext context, bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, List<string> hcTags, List<string> ignoredBundles)
        {
            return ComAdobeGraniteBundlesHcImplInactiveBundlesHealthCheck(post, apply, delete, action, location, propertylist, hcTags, ignoredBundles);
        }

        public virtual ComAdobeGraniteBundlesHcImplJobsHealthCheckInfo ComAdobeGraniteBundlesHcImplJobsHealthCheck(NancyContext context, bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, List<string> hcTags, int? maxQueuedJobs)
        {
            return ComAdobeGraniteBundlesHcImplJobsHealthCheck(post, apply, delete, action, location, propertylist, hcTags, maxQueuedJobs);
        }

        public virtual ComAdobeGraniteBundlesHcImplSlingGetServletHealthCheckInfo ComAdobeGraniteBundlesHcImplSlingGetServletHealthCheck(NancyContext context, bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, List<string> hcTags)
        {
            return ComAdobeGraniteBundlesHcImplSlingGetServletHealthCheck(post, apply, delete, action, location, propertylist, hcTags);
        }

        public virtual ComAdobeGraniteBundlesHcImplSlingJavaScriptHandlerHealthCheckInfo ComAdobeGraniteBundlesHcImplSlingJavaScriptHandlerHealthCheck(NancyContext context, bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, List<string> hcTags)
        {
            return ComAdobeGraniteBundlesHcImplSlingJavaScriptHandlerHealthCheck(post, apply, delete, action, location, propertylist, hcTags);
        }

        public virtual ComAdobeGraniteBundlesHcImplSlingJspScriptHandlerHealthCheckInfo ComAdobeGraniteBundlesHcImplSlingJspScriptHandlerHealthCheck(NancyContext context, bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, List<string> hcTags)
        {
            return ComAdobeGraniteBundlesHcImplSlingJspScriptHandlerHealthCheck(post, apply, delete, action, location, propertylist, hcTags);
        }

        public virtual ComAdobeGraniteBundlesHcImplSlingReferrerFilterHealthCheckInfo ComAdobeGraniteBundlesHcImplSlingReferrerFilterHealthCheck(NancyContext context, bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, List<string> hcTags)
        {
            return ComAdobeGraniteBundlesHcImplSlingReferrerFilterHealthCheck(post, apply, delete, action, location, propertylist, hcTags);
        }

        public virtual ComAdobeGraniteBundlesHcImplWebDavBundleHealthCheckInfo ComAdobeGraniteBundlesHcImplWebDavBundleHealthCheck(NancyContext context, bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, List<string> hcTags)
        {
            return ComAdobeGraniteBundlesHcImplWebDavBundleHealthCheck(post, apply, delete, action, location, propertylist, hcTags);
        }

        public virtual ComAdobeGraniteCommentsInternalCommentReplicationContentFilterFacInfo ComAdobeGraniteCommentsInternalCommentReplicationContentFilterFac(NancyContext context, bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, List<string> replicateCommentResourceTypes)
        {
            return ComAdobeGraniteCommentsInternalCommentReplicationContentFilterFac(post, apply, delete, action, location, propertylist, replicateCommentResourceTypes);
        }

        public virtual ComAdobeGraniteCompatrouterImplCompatSwitchingServiceImplInfo ComAdobeGraniteCompatrouterImplCompatSwitchingServiceImpl(NancyContext context, bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, List<string> compatgroups, bool? enabled)
        {
            return ComAdobeGraniteCompatrouterImplCompatSwitchingServiceImpl(post, apply, delete, action, location, propertylist, compatgroups, enabled);
        }

        public virtual ComAdobeGraniteCompatrouterImplRoutingConfigInfo ComAdobeGraniteCompatrouterImplRoutingConfig(NancyContext context, bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, string id, string compatPath, string newPath)
        {
            return ComAdobeGraniteCompatrouterImplRoutingConfig(post, apply, delete, action, location, propertylist, id, compatPath, newPath);
        }

        public virtual ComAdobeGraniteCompatrouterImplSwitchMappingConfigInfo ComAdobeGraniteCompatrouterImplSwitchMappingConfig(NancyContext context, bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, string group, List<string> ids)
        {
            return ComAdobeGraniteCompatrouterImplSwitchMappingConfig(post, apply, delete, action, location, propertylist, group, ids);
        }

        public virtual ComAdobeGraniteConfImplRuntimeAwareConfigurationResourceResolvingInfo ComAdobeGraniteConfImplRuntimeAwareConfigurationResourceResolving(NancyContext context, bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, bool? enabled, List<string> fallbackPaths)
        {
            return ComAdobeGraniteConfImplRuntimeAwareConfigurationResourceResolving(post, apply, delete, action, location, propertylist, enabled, fallbackPaths);
        }

        public virtual ComAdobeGraniteContexthubImplContextHubImplInfo ComAdobeGraniteContexthubImplContextHubImpl(NancyContext context, bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, bool? comAdobeGraniteContexthubSilentMode, bool? comAdobeGraniteContexthubShowUi)
        {
            return ComAdobeGraniteContexthubImplContextHubImpl(post, apply, delete, action, location, propertylist, comAdobeGraniteContexthubSilentMode, comAdobeGraniteContexthubShowUi);
        }

        public virtual ComAdobeGraniteCorsImplCORSPolicyImplInfo ComAdobeGraniteCorsImplCORSPolicyImpl(NancyContext context, bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, List<string> alloworigin, List<string> alloworiginregexp, List<string> allowedpaths, List<string> exposedheaders, int? maxage, List<string> supportedheaders, List<string> supportedmethods, bool? supportscredentials)
        {
            return ComAdobeGraniteCorsImplCORSPolicyImpl(post, apply, delete, action, location, propertylist, alloworigin, alloworiginregexp, allowedpaths, exposedheaders, maxage, supportedheaders, supportedmethods, supportscredentials);
        }

        public virtual ComAdobeGraniteCsrfImplCSRFFilterInfo ComAdobeGraniteCsrfImplCSRFFilter(NancyContext context, bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, List<string> filterMethods, bool? filterEnableSafeUserAgents, List<string> filterSafeUserAgents, List<string> filterExcludedPaths)
        {
            return ComAdobeGraniteCsrfImplCSRFFilter(post, apply, delete, action, location, propertylist, filterMethods, filterEnableSafeUserAgents, filterSafeUserAgents, filterExcludedPaths);
        }

        public virtual ComAdobeGraniteCsrfImplCSRFServletInfo ComAdobeGraniteCsrfImplCSRFServlet(NancyContext context, bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, int? csrfTokenExpiresIn, string slingAuthRequirements)
        {
            return ComAdobeGraniteCsrfImplCSRFServlet(post, apply, delete, action, location, propertylist, csrfTokenExpiresIn, slingAuthRequirements);
        }

        public virtual ComAdobeGraniteDistributionCoreImplCryptoDistributionTransportSeInfo ComAdobeGraniteDistributionCoreImplCryptoDistributionTransportSe(NancyContext context, bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, string name, string username, string encryptedPassword)
        {
            return ComAdobeGraniteDistributionCoreImplCryptoDistributionTransportSe(post, apply, delete, action, location, propertylist, name, username, encryptedPassword);
        }

        public virtual ComAdobeGraniteDistributionCoreImplDiffDiffChangesObserverInfo ComAdobeGraniteDistributionCoreImplDiffDiffChangesObserver(NancyContext context, bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, bool? enabled, string agentName, string diffPath, string observedPath, string serviceName, string propertyNames, int? distributionDelay, string serviceUserTarget)
        {
            return ComAdobeGraniteDistributionCoreImplDiffDiffChangesObserver(post, apply, delete, action, location, propertylist, enabled, agentName, diffPath, observedPath, serviceName, propertyNames, distributionDelay, serviceUserTarget);
        }

        public virtual ComAdobeGraniteDistributionCoreImplDiffDiffEventListenerInfo ComAdobeGraniteDistributionCoreImplDiffDiffEventListener(NancyContext context, bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, string diffPath, string serviceName, string serviceUserTarget)
        {
            return ComAdobeGraniteDistributionCoreImplDiffDiffEventListener(post, apply, delete, action, location, propertylist, diffPath, serviceName, serviceUserTarget);
        }

        public virtual ComAdobeGraniteDistributionCoreImplDistributionToReplicationEvenInfo ComAdobeGraniteDistributionCoreImplDistributionToReplicationEven(NancyContext context, bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, List<string> importerName)
        {
            return ComAdobeGraniteDistributionCoreImplDistributionToReplicationEven(post, apply, delete, action, location, propertylist, importerName);
        }

        public virtual ComAdobeGraniteDistributionCoreImplReplicationAdaptersReplicatInfo ComAdobeGraniteDistributionCoreImplReplicationAdaptersReplicat(NancyContext context, bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, string providerName, bool? forwardRequests)
        {
            return ComAdobeGraniteDistributionCoreImplReplicationAdaptersReplicat(post, apply, delete, action, location, propertylist, providerName, forwardRequests);
        }

        public virtual ComAdobeGraniteDistributionCoreImplReplicationDistributionTransInfo ComAdobeGraniteDistributionCoreImplReplicationDistributionTrans(NancyContext context, bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, bool? forwardRequests)
        {
            return ComAdobeGraniteDistributionCoreImplReplicationDistributionTrans(post, apply, delete, action, location, propertylist, forwardRequests);
        }

        public virtual ComAdobeGraniteDistributionCoreImplTransportAccessTokenDistribuInfo ComAdobeGraniteDistributionCoreImplTransportAccessTokenDistribu(NancyContext context, bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, string name, string serviceName, string userId, string accessTokenProviderTarget)
        {
            return ComAdobeGraniteDistributionCoreImplTransportAccessTokenDistribu(post, apply, delete, action, location, propertylist, name, serviceName, userId, accessTokenProviderTarget);
        }

        public virtual ComAdobeGraniteFragsImplCheckHttpHeaderFlagInfo ComAdobeGraniteFragsImplCheckHttpHeaderFlag(NancyContext context, bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, string featureName, string featureDescription, string httpHeaderName, string httpHeaderValuepattern)
        {
            return ComAdobeGraniteFragsImplCheckHttpHeaderFlag(post, apply, delete, action, location, propertylist, featureName, featureDescription, httpHeaderName, httpHeaderValuepattern);
        }

        public virtual ComAdobeGraniteFragsImplRandomFeatureInfo ComAdobeGraniteFragsImplRandomFeature(NancyContext context, bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, string featureName, string featureDescription, string activePercentage, string cookieName, int? cookieMaxAge)
        {
            return ComAdobeGraniteFragsImplRandomFeature(post, apply, delete, action, location, propertylist, featureName, featureDescription, activePercentage, cookieName, cookieMaxAge);
        }

        public virtual ComAdobeGraniteHttpcacheFileFileCacheStoreInfo ComAdobeGraniteHttpcacheFileFileCacheStore(NancyContext context, bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, string comAdobeGraniteHttpcacheFileDocumentRoot, string comAdobeGraniteHttpcacheFileIncludeHost)
        {
            return ComAdobeGraniteHttpcacheFileFileCacheStore(post, apply, delete, action, location, propertylist, comAdobeGraniteHttpcacheFileDocumentRoot, comAdobeGraniteHttpcacheFileIncludeHost);
        }

        public virtual ComAdobeGraniteHttpcacheImplOuterCacheFilterInfo ComAdobeGraniteHttpcacheImplOuterCacheFilter(NancyContext context, bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, List<string> comAdobeGraniteHttpcacheUrlPaths)
        {
            return ComAdobeGraniteHttpcacheImplOuterCacheFilter(post, apply, delete, action, location, propertylist, comAdobeGraniteHttpcacheUrlPaths);
        }

        public virtual ComAdobeGraniteI18nImplBundlePseudoTranslationsInfo ComAdobeGraniteI18nImplBundlePseudoTranslations(NancyContext context, bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, List<string> pseudoPatterns)
        {
            return ComAdobeGraniteI18nImplBundlePseudoTranslations(post, apply, delete, action, location, propertylist, pseudoPatterns);
        }

        public virtual ComAdobeGraniteI18nImplPreferencesLocaleResolverServiceInfo ComAdobeGraniteI18nImplPreferencesLocaleResolverService(NancyContext context, bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, string securityPreferencesName)
        {
            return ComAdobeGraniteI18nImplPreferencesLocaleResolverService(post, apply, delete, action, location, propertylist, securityPreferencesName);
        }

        public virtual ComAdobeGraniteInfocollectorInfoCollectorInfo ComAdobeGraniteInfocollectorInfoCollector(NancyContext context, bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, bool? graniteInfocollectorIncludeThreadDumps, bool? graniteInfocollectorIncludeHeapDump)
        {
            return ComAdobeGraniteInfocollectorInfoCollector(post, apply, delete, action, location, propertylist, graniteInfocollectorIncludeThreadDumps, graniteInfocollectorIncludeHeapDump);
        }

        public virtual ComAdobeGraniteJettySslInternalGraniteSslConnectorFactoryInfo ComAdobeGraniteJettySslInternalGraniteSslConnectorFactory(NancyContext context, bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, int? comAdobeGraniteJettySslPort, string comAdobeGraniteJettySslKeystoreUser, string comAdobeGraniteJettySslKeystorePassword, List<string> comAdobeGraniteJettySslCiphersuitesExcluded, List<string> comAdobeGraniteJettySslCiphersuitesIncluded, string comAdobeGraniteJettySslClientCertificate)
        {
            return ComAdobeGraniteJettySslInternalGraniteSslConnectorFactory(post, apply, delete, action, location, propertylist, comAdobeGraniteJettySslPort, comAdobeGraniteJettySslKeystoreUser, comAdobeGraniteJettySslKeystorePassword, comAdobeGraniteJettySslCiphersuitesExcluded, comAdobeGraniteJettySslCiphersuitesIncluded, comAdobeGraniteJettySslClientCertificate);
        }

        public virtual ComAdobeGraniteLicenseImplLicenseCheckFilterInfo ComAdobeGraniteLicenseImplLicenseCheckFilter(NancyContext context, bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, int? checkInternval, List<string> excludeIds, bool? encryptPing)
        {
            return ComAdobeGraniteLicenseImplLicenseCheckFilter(post, apply, delete, action, location, propertylist, checkInternval, excludeIds, encryptPing);
        }

        public virtual ComAdobeGraniteLoggingImplLogAnalyserImplInfo ComAdobeGraniteLoggingImplLogAnalyserImpl(NancyContext context, bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, int? messagesQueueSize, List<string> loggerConfig, int? messagesSize)
        {
            return ComAdobeGraniteLoggingImplLogAnalyserImpl(post, apply, delete, action, location, propertylist, messagesQueueSize, loggerConfig, messagesSize);
        }

        public virtual ComAdobeGraniteLoggingImplLogErrorHealthCheckInfo ComAdobeGraniteLoggingImplLogErrorHealthCheck(NancyContext context, bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, List<string> hcTags)
        {
            return ComAdobeGraniteLoggingImplLogErrorHealthCheck(post, apply, delete, action, location, propertylist, hcTags);
        }

        public virtual ComAdobeGraniteMaintenanceCrxImplDataStoreGarbageCollectionTaskInfo ComAdobeGraniteMaintenanceCrxImplDataStoreGarbageCollectionTask(NancyContext context, bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, bool? graniteMaintenanceMandatory, string jobTopics)
        {
            return ComAdobeGraniteMaintenanceCrxImplDataStoreGarbageCollectionTask(post, apply, delete, action, location, propertylist, graniteMaintenanceMandatory, jobTopics);
        }

        public virtual ComAdobeGraniteMaintenanceCrxImplLuceneBinariesCleanupTaskInfo ComAdobeGraniteMaintenanceCrxImplLuceneBinariesCleanupTask(NancyContext context, bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, string jobTopics)
        {
            return ComAdobeGraniteMaintenanceCrxImplLuceneBinariesCleanupTask(post, apply, delete, action, location, propertylist, jobTopics);
        }

        public virtual ComAdobeGraniteMaintenanceCrxImplRevisionCleanupTaskInfo ComAdobeGraniteMaintenanceCrxImplRevisionCleanupTask(NancyContext context, bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, List<string> fullGcDays)
        {
            return ComAdobeGraniteMaintenanceCrxImplRevisionCleanupTask(post, apply, delete, action, location, propertylist, fullGcDays);
        }

        public virtual ComAdobeGraniteMonitoringImplScriptConfigImplInfo ComAdobeGraniteMonitoringImplScriptConfigImpl(NancyContext context, bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, string scriptFilename, string scriptDisplay, string scriptPath, List<string> scriptPlatform, int? interval, string jmxdomain)
        {
            return ComAdobeGraniteMonitoringImplScriptConfigImpl(post, apply, delete, action, location, propertylist, scriptFilename, scriptDisplay, scriptPath, scriptPlatform, interval, jmxdomain);
        }

        public virtual ComAdobeGraniteOauthServerAuthImplOAuth2ServerAuthenticationHanInfo ComAdobeGraniteOauthServerAuthImplOAuth2ServerAuthenticationHan(NancyContext context, bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, string path, string jaasControlFlag, string jaasRealmName, int? jaasRanking, bool? oauthOfflineValidation)
        {
            return ComAdobeGraniteOauthServerAuthImplOAuth2ServerAuthenticationHan(post, apply, delete, action, location, propertylist, path, jaasControlFlag, jaasRealmName, jaasRanking, oauthOfflineValidation);
        }

        public virtual ComAdobeGraniteOauthServerImplAccessTokenCleanupTaskInfo ComAdobeGraniteOauthServerImplAccessTokenCleanupTask(NancyContext context, bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, string schedulerExpression)
        {
            return ComAdobeGraniteOauthServerImplAccessTokenCleanupTask(post, apply, delete, action, location, propertylist, schedulerExpression);
        }

        public virtual ComAdobeGraniteOauthServerImplOAuth2ClientRevocationServletInfo ComAdobeGraniteOauthServerImplOAuth2ClientRevocationServlet(NancyContext context, bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, bool? oauthClientRevocationActive)
        {
            return ComAdobeGraniteOauthServerImplOAuth2ClientRevocationServlet(post, apply, delete, action, location, propertylist, oauthClientRevocationActive);
        }

        public virtual ComAdobeGraniteOauthServerImplOAuth2RevocationEndpointServletInfo ComAdobeGraniteOauthServerImplOAuth2RevocationEndpointServlet(NancyContext context, bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, string slingServletPaths, bool? oauthRevocationActive)
        {
            return ComAdobeGraniteOauthServerImplOAuth2RevocationEndpointServlet(post, apply, delete, action, location, propertylist, slingServletPaths, oauthRevocationActive);
        }

        public virtual ComAdobeGraniteOauthServerImplOAuth2TokenEndpointServletInfo ComAdobeGraniteOauthServerImplOAuth2TokenEndpointServlet(NancyContext context, bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, string oauthIssuer, string oauthAccessTokenExpiresIn, string osgiHttpWhiteboardServletPattern, string osgiHttpWhiteboardContextSelect)
        {
            return ComAdobeGraniteOauthServerImplOAuth2TokenEndpointServlet(post, apply, delete, action, location, propertylist, oauthIssuer, oauthAccessTokenExpiresIn, osgiHttpWhiteboardServletPattern, osgiHttpWhiteboardContextSelect);
        }

        public virtual ComAdobeGraniteOauthServerImplOAuth2TokenRevocationServletInfo ComAdobeGraniteOauthServerImplOAuth2TokenRevocationServlet(NancyContext context, bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, bool? oauthTokenRevocationActive)
        {
            return ComAdobeGraniteOauthServerImplOAuth2TokenRevocationServlet(post, apply, delete, action, location, propertylist, oauthTokenRevocationActive);
        }

        public virtual ComAdobeGraniteOffloadingImplOffloadingConfiguratorInfo ComAdobeGraniteOffloadingImplOffloadingConfigurator(NancyContext context, bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, string offloadingTransporter, bool? offloadingCleanupPayload)
        {
            return ComAdobeGraniteOffloadingImplOffloadingConfigurator(post, apply, delete, action, location, propertylist, offloadingTransporter, offloadingCleanupPayload);
        }

        public virtual ComAdobeGraniteOffloadingImplOffloadingJobClonerInfo ComAdobeGraniteOffloadingImplOffloadingJobCloner(NancyContext context, bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, bool? offloadingJobclonerEnabled)
        {
            return ComAdobeGraniteOffloadingImplOffloadingJobCloner(post, apply, delete, action, location, propertylist, offloadingJobclonerEnabled);
        }

        public virtual ComAdobeGraniteOffloadingImplOffloadingJobOffloaderInfo ComAdobeGraniteOffloadingImplOffloadingJobOffloader(NancyContext context, bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, bool? offloadingOffloaderEnabled)
        {
            return ComAdobeGraniteOffloadingImplOffloadingJobOffloader(post, apply, delete, action, location, propertylist, offloadingOffloaderEnabled);
        }

        public virtual ComAdobeGraniteOffloadingImplTransporterOffloadingAgentManagerInfo ComAdobeGraniteOffloadingImplTransporterOffloadingAgentManager(NancyContext context, bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, bool? offloadingAgentmanagerEnabled)
        {
            return ComAdobeGraniteOffloadingImplTransporterOffloadingAgentManager(post, apply, delete, action, location, propertylist, offloadingAgentmanagerEnabled);
        }

        public virtual ComAdobeGraniteOffloadingImplTransporterOffloadingDefaultTranspoInfo ComAdobeGraniteOffloadingImplTransporterOffloadingDefaultTranspo(NancyContext context, bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, string defaultTransportAgentToWorkerPrefix, string defaultTransportAgentToMasterPrefix, string defaultTransportInputPackage, string defaultTransportOutputPackage, bool? defaultTransportReplicationSynchronous, bool? defaultTransportContentpackage, bool? offloadingTransporterDefaultEnabled)
        {
            return ComAdobeGraniteOffloadingImplTransporterOffloadingDefaultTranspo(post, apply, delete, action, location, propertylist, defaultTransportAgentToWorkerPrefix, defaultTransportAgentToMasterPrefix, defaultTransportInputPackage, defaultTransportOutputPackage, defaultTransportReplicationSynchronous, defaultTransportContentpackage, offloadingTransporterDefaultEnabled);
        }

        public virtual ComAdobeGraniteOmnisearchImplCoreOmniSearchServiceImplInfo ComAdobeGraniteOmnisearchImplCoreOmniSearchServiceImpl(NancyContext context, bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, int? omnisearchSuggestionRequiretextMin, bool? omnisearchSuggestionSpellcheckRequire)
        {
            return ComAdobeGraniteOmnisearchImplCoreOmniSearchServiceImpl(post, apply, delete, action, location, propertylist, omnisearchSuggestionRequiretextMin, omnisearchSuggestionSpellcheckRequire);
        }

        public virtual ComAdobeGraniteOptoutImplOptOutServiceImplInfo ComAdobeGraniteOptoutImplOptOutServiceImpl(NancyContext context, bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, List<string> optoutCookies, List<string> optoutHeaders, List<string> optoutWhitelistCookies)
        {
            return ComAdobeGraniteOptoutImplOptOutServiceImpl(post, apply, delete, action, location, propertylist, optoutCookies, optoutHeaders, optoutWhitelistCookies);
        }

        public virtual ComAdobeGraniteQueriesImplHcAsyncIndexHealthCheckInfo ComAdobeGraniteQueriesImplHcAsyncIndexHealthCheck(NancyContext context, bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, int? indexingCriticalThreshold, int? indexingWarnThreshold, List<string> hcTags)
        {
            return ComAdobeGraniteQueriesImplHcAsyncIndexHealthCheck(post, apply, delete, action, location, propertylist, indexingCriticalThreshold, indexingWarnThreshold, hcTags);
        }

        public virtual ComAdobeGraniteQueriesImplHcLargeIndexHealthCheckInfo ComAdobeGraniteQueriesImplHcLargeIndexHealthCheck(NancyContext context, bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, int? largeIndexCriticalThreshold, int? largeIndexWarnThreshold, List<string> hcTags)
        {
            return ComAdobeGraniteQueriesImplHcLargeIndexHealthCheck(post, apply, delete, action, location, propertylist, largeIndexCriticalThreshold, largeIndexWarnThreshold, hcTags);
        }

        public virtual ComAdobeGraniteQueriesImplHcQueriesStatusHealthCheckInfo ComAdobeGraniteQueriesImplHcQueriesStatusHealthCheck(NancyContext context, bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, List<string> hcTags)
        {
            return ComAdobeGraniteQueriesImplHcQueriesStatusHealthCheck(post, apply, delete, action, location, propertylist, hcTags);
        }

        public virtual ComAdobeGraniteQueriesImplHcQueryHealthCheckMetricsInfo ComAdobeGraniteQueriesImplHcQueryHealthCheckMetrics(NancyContext context, bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, int? getPeriod)
        {
            return ComAdobeGraniteQueriesImplHcQueryHealthCheckMetrics(post, apply, delete, action, location, propertylist, getPeriod);
        }

        public virtual ComAdobeGraniteQueriesImplHcQueryLimitsHealthCheckInfo ComAdobeGraniteQueriesImplHcQueryLimitsHealthCheck(NancyContext context, bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, List<string> hcTags)
        {
            return ComAdobeGraniteQueriesImplHcQueryLimitsHealthCheck(post, apply, delete, action, location, propertylist, hcTags);
        }

        public virtual ComAdobeGraniteReplicationHcImplReplicationQueueHealthCheckInfo ComAdobeGraniteReplicationHcImplReplicationQueueHealthCheck(NancyContext context, bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, int? numberOfRetriesAllowed, List<string> hcTags)
        {
            return ComAdobeGraniteReplicationHcImplReplicationQueueHealthCheck(post, apply, delete, action, location, propertylist, numberOfRetriesAllowed, hcTags);
        }

        public virtual ComAdobeGraniteReplicationHcImplReplicationTransportUsersHealthCInfo ComAdobeGraniteReplicationHcImplReplicationTransportUsersHealthC(NancyContext context, bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, List<string> hcTags)
        {
            return ComAdobeGraniteReplicationHcImplReplicationTransportUsersHealthC(post, apply, delete, action, location, propertylist, hcTags);
        }

        public virtual ComAdobeGraniteRepositoryHcImplAuthorizableNodeNameHealthCheckInfo ComAdobeGraniteRepositoryHcImplAuthorizableNodeNameHealthCheck(NancyContext context, bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, List<string> hcTags)
        {
            return ComAdobeGraniteRepositoryHcImplAuthorizableNodeNameHealthCheck(post, apply, delete, action, location, propertylist, hcTags);
        }

        public virtual ComAdobeGraniteRepositoryHcImplContentSlingSlingContentHealthCInfo ComAdobeGraniteRepositoryHcImplContentSlingSlingContentHealthC(NancyContext context, bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, List<string> hcTags, List<string> excludeSearchPath)
        {
            return ComAdobeGraniteRepositoryHcImplContentSlingSlingContentHealthC(post, apply, delete, action, location, propertylist, hcTags, excludeSearchPath);
        }

        public virtual ComAdobeGraniteRepositoryHcImplContinuousRGCHealthCheckInfo ComAdobeGraniteRepositoryHcImplContinuousRGCHealthCheck(NancyContext context, bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, List<string> hcTags)
        {
            return ComAdobeGraniteRepositoryHcImplContinuousRGCHealthCheck(post, apply, delete, action, location, propertylist, hcTags);
        }

        public virtual ComAdobeGraniteRepositoryHcImplDefaultAccessUserProfileHealthCheInfo ComAdobeGraniteRepositoryHcImplDefaultAccessUserProfileHealthChe(NancyContext context, bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, List<string> hcTags)
        {
            return ComAdobeGraniteRepositoryHcImplDefaultAccessUserProfileHealthChe(post, apply, delete, action, location, propertylist, hcTags);
        }

        public virtual ComAdobeGraniteRepositoryHcImplDefaultLoginsHealthCheckInfo ComAdobeGraniteRepositoryHcImplDefaultLoginsHealthCheck(NancyContext context, bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, List<string> hcTags, List<string> accountLogins, List<string> consoleLogins)
        {
            return ComAdobeGraniteRepositoryHcImplDefaultLoginsHealthCheck(post, apply, delete, action, location, propertylist, hcTags, accountLogins, consoleLogins);
        }

        public virtual ComAdobeGraniteRepositoryHcImplDiskSpaceHealthCheckInfo ComAdobeGraniteRepositoryHcImplDiskSpaceHealthCheck(NancyContext context, bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, List<string> hcTags, int? diskSpaceWarnThreshold, int? diskSpaceErrorThreshold)
        {
            return ComAdobeGraniteRepositoryHcImplDiskSpaceHealthCheck(post, apply, delete, action, location, propertylist, hcTags, diskSpaceWarnThreshold, diskSpaceErrorThreshold);
        }

        public virtual ComAdobeGraniteRepositoryHcImplObservationQueueLengthHealthCheckInfo ComAdobeGraniteRepositoryHcImplObservationQueueLengthHealthCheck(NancyContext context, bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, List<string> hcTags)
        {
            return ComAdobeGraniteRepositoryHcImplObservationQueueLengthHealthCheck(post, apply, delete, action, location, propertylist, hcTags);
        }

        public virtual ComAdobeGraniteRepositoryImplCommitStatsConfigInfo ComAdobeGraniteRepositoryImplCommitStatsConfig(NancyContext context, bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, bool? enabled, int? intervalSeconds, int? commitsPerIntervalThreshold, int? maxLocationLength, int? maxDetailsShown, int? minDetailsPercentage, List<string> threadMatchers, int? maxGreedyDepth, string greedyStackMatchers, List<string> stackFilters, List<string> stackMatchers, List<string> stackCategorizers, List<string> stackShorteners)
        {
            return ComAdobeGraniteRepositoryImplCommitStatsConfig(post, apply, delete, action, location, propertylist, enabled, intervalSeconds, commitsPerIntervalThreshold, maxLocationLength, maxDetailsShown, minDetailsPercentage, threadMatchers, maxGreedyDepth, greedyStackMatchers, stackFilters, stackMatchers, stackCategorizers, stackShorteners);
        }

        public virtual ComAdobeGraniteRepositoryServiceUserConfigurationInfo ComAdobeGraniteRepositoryServiceUserConfiguration(NancyContext context, bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, int? serviceRanking, bool? serviceusersSimpleSubjectPopulation, List<string> serviceusersList)
        {
            return ComAdobeGraniteRepositoryServiceUserConfiguration(post, apply, delete, action, location, propertylist, serviceRanking, serviceusersSimpleSubjectPopulation, serviceusersList);
        }

        public virtual ComAdobeGraniteRequestsLoggingImplHcRequestsStatusHealthCheckImInfo ComAdobeGraniteRequestsLoggingImplHcRequestsStatusHealthCheckIm(NancyContext context, bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, List<string> hcTags)
        {
            return ComAdobeGraniteRequestsLoggingImplHcRequestsStatusHealthCheckIm(post, apply, delete, action, location, propertylist, hcTags);
        }

        public virtual ComAdobeGraniteResourcestatusImplCompositeStatusTypeInfo ComAdobeGraniteResourcestatusImplCompositeStatusType(NancyContext context, bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, string name, List<string> types)
        {
            return ComAdobeGraniteResourcestatusImplCompositeStatusType(post, apply, delete, action, location, propertylist, name, types);
        }

        public virtual ComAdobeGraniteResourcestatusImplStatusResourceProviderImplInfo ComAdobeGraniteResourcestatusImplStatusResourceProviderImpl(NancyContext context, bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, string providerRoot)
        {
            return ComAdobeGraniteResourcestatusImplStatusResourceProviderImpl(post, apply, delete, action, location, propertylist, providerRoot);
        }

        public virtual ComAdobeGraniteRestAssetsImplAssetContentDispositionFilterInfo ComAdobeGraniteRestAssetsImplAssetContentDispositionFilter(NancyContext context, bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, bool? mimeAllowEmpty, List<string> mimeAllowed)
        {
            return ComAdobeGraniteRestAssetsImplAssetContentDispositionFilter(post, apply, delete, action, location, propertylist, mimeAllowEmpty, mimeAllowed);
        }

        public virtual ComAdobeGraniteRestImplApiEndpointResourceProviderFactoryImplInfo ComAdobeGraniteRestImplApiEndpointResourceProviderFactoryImpl(NancyContext context, bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, string providerRoots)
        {
            return ComAdobeGraniteRestImplApiEndpointResourceProviderFactoryImpl(post, apply, delete, action, location, propertylist, providerRoots);
        }

        public virtual ComAdobeGraniteRestImplServletDefaultGETServletInfo ComAdobeGraniteRestImplServletDefaultGETServlet(NancyContext context, bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, int? defaultLimit, bool? useAbsoluteUri)
        {
            return ComAdobeGraniteRestImplServletDefaultGETServlet(post, apply, delete, action, location, propertylist, defaultLimit, useAbsoluteUri);
        }

        public virtual ComAdobeGraniteSecurityUserUiInternalServletsSSLConfigurationSInfo ComAdobeGraniteSecurityUserUiInternalServletsSSLConfigurationS(NancyContext context, bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, List<string> hcTags)
        {
            return ComAdobeGraniteSecurityUserUiInternalServletsSSLConfigurationS(post, apply, delete, action, location, propertylist, hcTags);
        }

        public virtual ComAdobeGraniteSecurityUserUserPropertiesServiceInfo ComAdobeGraniteSecurityUserUserPropertiesService(NancyContext context, bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, string adapterCondition, List<string> graniteUserpropertiesNodetypes, List<string> graniteUserpropertiesResourcetypes)
        {
            return ComAdobeGraniteSecurityUserUserPropertiesService(post, apply, delete, action, location, propertylist, adapterCondition, graniteUserpropertiesNodetypes, graniteUserpropertiesResourcetypes);
        }

        public virtual ComAdobeGraniteSocialgraphImplSocialGraphFactoryImplInfo ComAdobeGraniteSocialgraphImplSocialGraphFactoryImpl(NancyContext context, bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, string group2memberRelationshipOutgoing, List<string> group2memberExcludedOutgoing, string group2memberRelationshipIncoming, List<string> group2memberExcludedIncoming)
        {
            return ComAdobeGraniteSocialgraphImplSocialGraphFactoryImpl(post, apply, delete, action, location, propertylist, group2memberRelationshipOutgoing, group2memberExcludedOutgoing, group2memberRelationshipIncoming, group2memberExcludedIncoming);
        }

        public virtual ComAdobeGraniteSystemMonitoringImplSystemStatsMBeanImplInfo ComAdobeGraniteSystemMonitoringImplSystemStatsMBeanImpl(NancyContext context, bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, string schedulerExpression, string jmxObjectname)
        {
            return ComAdobeGraniteSystemMonitoringImplSystemStatsMBeanImpl(post, apply, delete, action, location, propertylist, schedulerExpression, jmxObjectname);
        }

        public virtual ComAdobeGraniteTaskmanagementImplJcrTaskAdapterFactoryInfo ComAdobeGraniteTaskmanagementImplJcrTaskAdapterFactory(NancyContext context, bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, string adapterCondition)
        {
            return ComAdobeGraniteTaskmanagementImplJcrTaskAdapterFactory(post, apply, delete, action, location, propertylist, adapterCondition);
        }

        public virtual ComAdobeGraniteTaskmanagementImplJcrTaskArchiveServiceInfo ComAdobeGraniteTaskmanagementImplJcrTaskArchiveService(NancyContext context, bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, bool? archivingEnabled, string schedulerExpression, int? archiveSinceDaysCompleted)
        {
            return ComAdobeGraniteTaskmanagementImplJcrTaskArchiveService(post, apply, delete, action, location, propertylist, archivingEnabled, schedulerExpression, archiveSinceDaysCompleted);
        }

        public virtual ComAdobeGraniteTaskmanagementImplPurgeTaskPurgeMaintenanceTaskInfo ComAdobeGraniteTaskmanagementImplPurgeTaskPurgeMaintenanceTask(NancyContext context, bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, bool? purgeCompleted, int? completedAge, bool? purgeActive, int? activeAge, int? saveThreshold)
        {
            return ComAdobeGraniteTaskmanagementImplPurgeTaskPurgeMaintenanceTask(post, apply, delete, action, location, propertylist, purgeCompleted, completedAge, purgeActive, activeAge, saveThreshold);
        }

        public virtual ComAdobeGraniteTaskmanagementImplServiceTaskManagerAdapterFactorInfo ComAdobeGraniteTaskmanagementImplServiceTaskManagerAdapterFactor(NancyContext context, bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, string adapterCondition, List<string> taskmanagerAdmingroups)
        {
            return ComAdobeGraniteTaskmanagementImplServiceTaskManagerAdapterFactor(post, apply, delete, action, location, propertylist, adapterCondition, taskmanagerAdmingroups);
        }

        public virtual ComAdobeGraniteThreaddumpThreadDumpCollectorInfo ComAdobeGraniteThreaddumpThreadDumpCollector(NancyContext context, bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, int? schedulerPeriod, string schedulerRunOn, bool? graniteThreaddumpEnabled, int? graniteThreaddumpDumpsPerFile, bool? graniteThreaddumpEnableGzipCompression, bool? graniteThreaddumpEnableDirectoriesCompression, bool? graniteThreaddumpEnableJStack, int? graniteThreaddumpMaxBackupDays, string graniteThreaddumpBackupCleanTrigger)
        {
            return ComAdobeGraniteThreaddumpThreadDumpCollector(post, apply, delete, action, location, propertylist, schedulerPeriod, schedulerRunOn, graniteThreaddumpEnabled, graniteThreaddumpDumpsPerFile, graniteThreaddumpEnableGzipCompression, graniteThreaddumpEnableDirectoriesCompression, graniteThreaddumpEnableJStack, graniteThreaddumpMaxBackupDays, graniteThreaddumpBackupCleanTrigger);
        }

        public virtual ComAdobeGraniteTranslationConnectorMsftCoreImplMicrosoftTranslInfo ComAdobeGraniteTranslationConnectorMsftCoreImplMicrosoftTransl(NancyContext context, bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, string translationFactory, string defaultConnectorLabel, string defaultConnectorAttribution, string defaultConnectorWorkspaceId, string defaultConnectorSubscriptionKey, string languageMapLocation, string categoryMapLocation, int? retryAttempts, int? timeoutCount)
        {
            return ComAdobeGraniteTranslationConnectorMsftCoreImplMicrosoftTransl(post, apply, delete, action, location, propertylist, translationFactory, defaultConnectorLabel, defaultConnectorAttribution, defaultConnectorWorkspaceId, defaultConnectorSubscriptionKey, languageMapLocation, categoryMapLocation, retryAttempts, timeoutCount);
        }

        public virtual ComAdobeGraniteTranslationCoreImplTranslationManagerImplInfo ComAdobeGraniteTranslationCoreImplTranslationManagerImpl(NancyContext context, bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, string defaultConnectorName, string defaultCategory)
        {
            return ComAdobeGraniteTranslationCoreImplTranslationManagerImpl(post, apply, delete, action, location, propertylist, defaultConnectorName, defaultCategory);
        }

        public virtual ComAdobeGraniteUiClientlibsImplHtmlLibraryManagerImplInfo ComAdobeGraniteUiClientlibsImplHtmlLibraryManagerImpl(NancyContext context, bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, bool? htmllibmanagerTiming, string htmllibmanagerDebugInitJs, bool? htmllibmanagerMinify, bool? htmllibmanagerDebug, bool? htmllibmanagerGzip, int? htmllibmanagerMaxDataUriSize, int? htmllibmanagerMaxage, bool? htmllibmanagerForceCQUrlInfo, string htmllibmanagerDefaultthemename, string htmllibmanagerDefaultuserthemename, string htmllibmanagerClientmanager, List<string> htmllibmanagerPathList, List<string> htmllibmanagerExcludedPathList, List<string> htmllibmanagerProcessorJs, List<string> htmllibmanagerProcessorCss, List<string> htmllibmanagerLongcachePatterns, string htmllibmanagerLongcacheFormat, bool? htmllibmanagerUseFileSystemOutputCache, string htmllibmanagerFileSystemOutputCacheLocation, List<string> htmllibmanagerDisableReplacement)
        {
            return ComAdobeGraniteUiClientlibsImplHtmlLibraryManagerImpl(post, apply, delete, action, location, propertylist, htmllibmanagerTiming, htmllibmanagerDebugInitJs, htmllibmanagerMinify, htmllibmanagerDebug, htmllibmanagerGzip, htmllibmanagerMaxDataUriSize, htmllibmanagerMaxage, htmllibmanagerForceCQUrlInfo, htmllibmanagerDefaultthemename, htmllibmanagerDefaultuserthemename, htmllibmanagerClientmanager, htmllibmanagerPathList, htmllibmanagerExcludedPathList, htmllibmanagerProcessorJs, htmllibmanagerProcessorCss, htmllibmanagerLongcachePatterns, htmllibmanagerLongcacheFormat, htmllibmanagerUseFileSystemOutputCache, htmllibmanagerFileSystemOutputCacheLocation, htmllibmanagerDisableReplacement);
        }

        public virtual ComAdobeGraniteWorkflowConsoleFragsWorkflowWithdrawFeatureInfo ComAdobeGraniteWorkflowConsoleFragsWorkflowWithdrawFeature(NancyContext context, bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, bool? enabled)
        {
            return ComAdobeGraniteWorkflowConsoleFragsWorkflowWithdrawFeature(post, apply, delete, action, location, propertylist, enabled);
        }

        public virtual ComAdobeGraniteWorkflowConsolePublishWorkflowPublishEventServiceInfo ComAdobeGraniteWorkflowConsolePublishWorkflowPublishEventService(NancyContext context, bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, bool? graniteWorkflowWorkflowPublishEventServiceEnabled)
        {
            return ComAdobeGraniteWorkflowConsolePublishWorkflowPublishEventService(post, apply, delete, action, location, propertylist, graniteWorkflowWorkflowPublishEventServiceEnabled);
        }

        public virtual ComAdobeGraniteWorkflowCoreJcrWorkflowBucketManagerInfo ComAdobeGraniteWorkflowCoreJcrWorkflowBucketManager(NancyContext context, bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, int? bucketSize)
        {
            return ComAdobeGraniteWorkflowCoreJcrWorkflowBucketManager(post, apply, delete, action, location, propertylist, bucketSize);
        }

        public virtual ComAdobeGraniteWorkflowCoreJobExternalProcessJobHandlerInfo ComAdobeGraniteWorkflowCoreJobExternalProcessJobHandler(NancyContext context, bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, int? defaultTimeout, int? maxTimeout, int? defaultPeriod)
        {
            return ComAdobeGraniteWorkflowCoreJobExternalProcessJobHandler(post, apply, delete, action, location, propertylist, defaultTimeout, maxTimeout, defaultPeriod);
        }

        public virtual ComAdobeGraniteWorkflowCoreJobJobHandlerInfo ComAdobeGraniteWorkflowCoreJobJobHandler(NancyContext context, bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, List<string> jobTopics, bool? allowSelfProcessTermination)
        {
            return ComAdobeGraniteWorkflowCoreJobJobHandler(post, apply, delete, action, location, propertylist, jobTopics, allowSelfProcessTermination);
        }

        public virtual ComAdobeGraniteWorkflowCoreOffloadingWorkflowOffloadingJobConsumInfo ComAdobeGraniteWorkflowCoreOffloadingWorkflowOffloadingJobConsum(NancyContext context, bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, string jobTopics)
        {
            return ComAdobeGraniteWorkflowCoreOffloadingWorkflowOffloadingJobConsum(post, apply, delete, action, location, propertylist, jobTopics);
        }

        public virtual ComAdobeGraniteWorkflowCorePayloadMapCacheInfo ComAdobeGraniteWorkflowCorePayloadMapCache(NancyContext context, bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, List<string> getSystemWorkflowModels, string getPackageRootPath)
        {
            return ComAdobeGraniteWorkflowCorePayloadMapCache(post, apply, delete, action, location, propertylist, getSystemWorkflowModels, getPackageRootPath);
        }

        public virtual ComAdobeGraniteWorkflowCorePayloadmapPayloadMoveListenerInfo ComAdobeGraniteWorkflowCorePayloadmapPayloadMoveListener(NancyContext context, bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, List<string> payloadMoveWhiteList, bool? payloadMoveHandleFromWorkflowProcess)
        {
            return ComAdobeGraniteWorkflowCorePayloadmapPayloadMoveListener(post, apply, delete, action, location, propertylist, payloadMoveWhiteList, payloadMoveHandleFromWorkflowProcess);
        }

        public virtual ComAdobeGraniteWorkflowCoreWorkflowConfigInfo ComAdobeGraniteWorkflowCoreWorkflowConfig(NancyContext context, bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, List<string> cqWorkflowConfigWorkflowPackagesRootPath, bool? cqWorkflowConfigWorkflowProcessLegacyMode, bool? cqWorkflowConfigAllowLocking)
        {
            return ComAdobeGraniteWorkflowCoreWorkflowConfig(post, apply, delete, action, location, propertylist, cqWorkflowConfigWorkflowPackagesRootPath, cqWorkflowConfigWorkflowProcessLegacyMode, cqWorkflowConfigAllowLocking);
        }

        public virtual ComAdobeGraniteWorkflowCoreWorkflowSessionFactoryInfo ComAdobeGraniteWorkflowCoreWorkflowSessionFactory(NancyContext context, bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, string graniteWorkflowinboxSortPropertyName, string graniteWorkflowinboxSortOrder, int? cqWorkflowJobRetry, List<string> cqWorkflowSuperuser, int? graniteWorkflowInboxQuerySize, bool? graniteWorkflowAdminUserGroupFilter, bool? graniteWorkflowEnforceWorkitemAssigneePermissions, bool? graniteWorkflowEnforceWorkflowInitiatorPermissions, bool? graniteWorkflowInjectTenantIdInJobTopics, int? graniteWorkflowMaxPurgeSaveThreshold, int? graniteWorkflowMaxPurgeQueryCount)
        {
            return ComAdobeGraniteWorkflowCoreWorkflowSessionFactory(post, apply, delete, action, location, propertylist, graniteWorkflowinboxSortPropertyName, graniteWorkflowinboxSortOrder, cqWorkflowJobRetry, cqWorkflowSuperuser, graniteWorkflowInboxQuerySize, graniteWorkflowAdminUserGroupFilter, graniteWorkflowEnforceWorkitemAssigneePermissions, graniteWorkflowEnforceWorkflowInitiatorPermissions, graniteWorkflowInjectTenantIdInJobTopics, graniteWorkflowMaxPurgeSaveThreshold, graniteWorkflowMaxPurgeQueryCount);
        }

        public virtual ComAdobeGraniteWorkflowPurgeSchedulerInfo ComAdobeGraniteWorkflowPurgeScheduler(NancyContext context, bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, string scheduledpurgeName, string scheduledpurgeWorkflowStatus, List<string> scheduledpurgeModelIds, int? scheduledpurgeDaysold)
        {
            return ComAdobeGraniteWorkflowPurgeScheduler(post, apply, delete, action, location, propertylist, scheduledpurgeName, scheduledpurgeWorkflowStatus, scheduledpurgeModelIds, scheduledpurgeDaysold);
        }

        public virtual ComAdobeOctopusNcommBootstrapInfo ComAdobeOctopusNcommBootstrap(NancyContext context, bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, int? maxConnections, int? maxRequests, int? requestTimeout, int? requestRetries, int? launchTimeout)
        {
            return ComAdobeOctopusNcommBootstrap(post, apply, delete, action, location, propertylist, maxConnections, maxRequests, requestTimeout, requestRetries, launchTimeout);
        }

        public virtual ComAdobeSocialIntegrationsLivefyreUserPingforpullImplPingPullSInfo ComAdobeSocialIntegrationsLivefyreUserPingforpullImplPingPullS(NancyContext context, bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, string communitiesIntegrationLivefyreSlingEventFilter)
        {
            return ComAdobeSocialIntegrationsLivefyreUserPingforpullImplPingPullS(post, apply, delete, action, location, propertylist, communitiesIntegrationLivefyreSlingEventFilter);
        }

        public virtual ComAdobeXmpWorkerFilesNcommXMPFilesNCommInfo ComAdobeXmpWorkerFilesNcommXMPFilesNComm(NancyContext context, bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, string maxConnections, string maxRequests, string requestTimeout, string logDir)
        {
            return ComAdobeXmpWorkerFilesNcommXMPFilesNComm(post, apply, delete, action, location, propertylist, maxConnections, maxRequests, requestTimeout, logDir);
        }

        public virtual ComDayCommonsDatasourceJdbcpoolJdbcPoolServiceInfo ComDayCommonsDatasourceJdbcpoolJdbcPoolService(NancyContext context, bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, string jdbcDriverClass, string jdbcConnectionUri, string jdbcUsername, string jdbcPassword, string jdbcValidationQuery, bool? defaultReadonly, bool? defaultAutocommit, int? poolSize, int? poolMaxWaitMsec, string datasourceName, List<string> datasourceSvcProperties)
        {
            return ComDayCommonsDatasourceJdbcpoolJdbcPoolService(post, apply, delete, action, location, propertylist, jdbcDriverClass, jdbcConnectionUri, jdbcUsername, jdbcPassword, jdbcValidationQuery, defaultReadonly, defaultAutocommit, poolSize, poolMaxWaitMsec, datasourceName, datasourceSvcProperties);
        }

        public virtual ComDayCommonsHttpclientInfo ComDayCommonsHttpclient(NancyContext context, bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, bool? proxyEnabled, string proxyHost, string proxyUser, string proxyPassword, string proxyNtlmHost, string proxyNtlmDomain, List<string> proxyExceptions)
        {
            return ComDayCommonsHttpclient(post, apply, delete, action, location, propertylist, proxyEnabled, proxyHost, proxyUser, proxyPassword, proxyNtlmHost, proxyNtlmDomain, proxyExceptions);
        }

        public virtual ComDayCqAnalyticsImplStorePropertiesChangeListenerInfo ComDayCqAnalyticsImplStorePropertiesChangeListener(NancyContext context, bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, List<string> cqStoreListenerAdditionalStorePaths)
        {
            return ComDayCqAnalyticsImplStorePropertiesChangeListener(post, apply, delete, action, location, propertylist, cqStoreListenerAdditionalStorePaths);
        }

        public virtual ComDayCqAnalyticsSitecatalystImplExporterClassificationsExporteInfo ComDayCqAnalyticsSitecatalystImplExporterClassificationsExporte(NancyContext context, bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, List<string> allowedPaths, int? cqAnalyticsSaintExporterPagesize)
        {
            return ComDayCqAnalyticsSitecatalystImplExporterClassificationsExporte(post, apply, delete, action, location, propertylist, allowedPaths, cqAnalyticsSaintExporterPagesize);
        }

        public virtual ComDayCqAnalyticsSitecatalystImplImporterReportImporterInfo ComDayCqAnalyticsSitecatalystImplImporterReportImporter(NancyContext context, bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, int? reportFetchAttempts, int? reportFetchDelay)
        {
            return ComDayCqAnalyticsSitecatalystImplImporterReportImporter(post, apply, delete, action, location, propertylist, reportFetchAttempts, reportFetchDelay);
        }

        public virtual ComDayCqAnalyticsSitecatalystImplSitecatalystAdapterFactoryInfo ComDayCqAnalyticsSitecatalystImplSitecatalystAdapterFactory(NancyContext context, bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, List<string> cqAnalyticsAdapterfactoryContextstores)
        {
            return ComDayCqAnalyticsSitecatalystImplSitecatalystAdapterFactory(post, apply, delete, action, location, propertylist, cqAnalyticsAdapterfactoryContextstores);
        }

        public virtual ComDayCqAnalyticsSitecatalystImplSitecatalystHttpClientImplInfo ComDayCqAnalyticsSitecatalystImplSitecatalystHttpClientImpl(NancyContext context, bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, List<string> cqAnalyticsSitecatalystServiceDatacenterUrl, List<string> devhostnamepatterns, int? connectionTimeout, int? socketTimeout)
        {
            return ComDayCqAnalyticsSitecatalystImplSitecatalystHttpClientImpl(post, apply, delete, action, location, propertylist, cqAnalyticsSitecatalystServiceDatacenterUrl, devhostnamepatterns, connectionTimeout, socketTimeout);
        }

        public virtual ComDayCqAnalyticsTestandtargetImplAccountOptionsUpdaterInfo ComDayCqAnalyticsTestandtargetImplAccountOptionsUpdater(NancyContext context, bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, bool? cqAnalyticsTestandtargetAccountoptionsupdaterEnabled)
        {
            return ComDayCqAnalyticsTestandtargetImplAccountOptionsUpdater(post, apply, delete, action, location, propertylist, cqAnalyticsTestandtargetAccountoptionsupdaterEnabled);
        }

        public virtual ComDayCqAnalyticsTestandtargetImplDeleteAuthorActivityListenerInfo ComDayCqAnalyticsTestandtargetImplDeleteAuthorActivityListener(NancyContext context, bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, bool? cqAnalyticsTestandtargetDeleteauthoractivitylistenerEnabled)
        {
            return ComDayCqAnalyticsTestandtargetImplDeleteAuthorActivityListener(post, apply, delete, action, location, propertylist, cqAnalyticsTestandtargetDeleteauthoractivitylistenerEnabled);
        }

        public virtual ComDayCqAnalyticsTestandtargetImplPushAuthorCampaignPageListenerInfo ComDayCqAnalyticsTestandtargetImplPushAuthorCampaignPageListener(NancyContext context, bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, bool? cqAnalyticsTestandtargetPushauthorcampaignpagelistenerEnabled)
        {
            return ComDayCqAnalyticsTestandtargetImplPushAuthorCampaignPageListener(post, apply, delete, action, location, propertylist, cqAnalyticsTestandtargetPushauthorcampaignpagelistenerEnabled);
        }

        public virtual ComDayCqAnalyticsTestandtargetImplSegmentImporterInfo ComDayCqAnalyticsTestandtargetImplSegmentImporter(NancyContext context, bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, bool? cqAnalyticsTestandtargetSegmentimporterEnabled)
        {
            return ComDayCqAnalyticsTestandtargetImplSegmentImporter(post, apply, delete, action, location, propertylist, cqAnalyticsTestandtargetSegmentimporterEnabled);
        }

        public virtual ComDayCqAnalyticsTestandtargetImplServiceWebServiceImplInfo ComDayCqAnalyticsTestandtargetImplServiceWebServiceImpl(NancyContext context, bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, string endpointUri, int? connectionTimeout, int? socketTimeout)
        {
            return ComDayCqAnalyticsTestandtargetImplServiceWebServiceImpl(post, apply, delete, action, location, propertylist, endpointUri, connectionTimeout, socketTimeout);
        }

        public virtual ComDayCqAnalyticsTestandtargetImplServletsAdminServerServletInfo ComDayCqAnalyticsTestandtargetImplServletsAdminServerServlet(NancyContext context, bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, string testandtargetEndpointUrl)
        {
            return ComDayCqAnalyticsTestandtargetImplServletsAdminServerServlet(post, apply, delete, action, location, propertylist, testandtargetEndpointUrl);
        }

        public virtual ComDayCqAnalyticsTestandtargetImplTestandtargetHttpClientImplInfo ComDayCqAnalyticsTestandtargetImplTestandtargetHttpClientImpl(NancyContext context, bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, string cqAnalyticsTestandtargetApiUrl, int? cqAnalyticsTestandtargetTimeout, int? cqAnalyticsTestandtargetSockettimeout, string cqAnalyticsTestandtargetRecommendationsUrlReplace, string cqAnalyticsTestandtargetRecommendationsUrlReplacewith)
        {
            return ComDayCqAnalyticsTestandtargetImplTestandtargetHttpClientImpl(post, apply, delete, action, location, propertylist, cqAnalyticsTestandtargetApiUrl, cqAnalyticsTestandtargetTimeout, cqAnalyticsTestandtargetSockettimeout, cqAnalyticsTestandtargetRecommendationsUrlReplace, cqAnalyticsTestandtargetRecommendationsUrlReplacewith);
        }

        public virtual ComDayCqAuthImplCugCugSupportImplInfo ComDayCqAuthImplCugCugSupportImpl(NancyContext context, bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, List<string> cugExemptedPrincipals, bool? cugEnabled, string cugPrincipalsRegex, string cugPrincipalsReplacement)
        {
            return ComDayCqAuthImplCugCugSupportImpl(post, apply, delete, action, location, propertylist, cugExemptedPrincipals, cugEnabled, cugPrincipalsRegex, cugPrincipalsReplacement);
        }

        public virtual ComDayCqAuthImplLoginSelectorHandlerInfo ComDayCqAuthImplLoginSelectorHandler(NancyContext context, bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, string path, int? serviceRanking, List<string> authLoginselectorMappings, List<string> authLoginselectorChangepwMappings, string authLoginselectorDefaultloginpage, string authLoginselectorDefaultchangepwpage, List<string> authLoginselectorHandle, bool? authLoginselectorHandleAllExtensions)
        {
            return ComDayCqAuthImplLoginSelectorHandler(post, apply, delete, action, location, propertylist, path, serviceRanking, authLoginselectorMappings, authLoginselectorChangepwMappings, authLoginselectorDefaultloginpage, authLoginselectorDefaultchangepwpage, authLoginselectorHandle, authLoginselectorHandleAllExtensions);
        }

        public virtual ComDayCqCommonsImplExternalizerImplInfo ComDayCqCommonsImplExternalizerImpl(NancyContext context, bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, List<string> externalizerDomains, string externalizerHost, string externalizerContextpath, bool? externalizerEncodedpath)
        {
            return ComDayCqCommonsImplExternalizerImpl(post, apply, delete, action, location, propertylist, externalizerDomains, externalizerHost, externalizerContextpath, externalizerEncodedpath);
        }

        public virtual ComDayCqCommonsServletsRootMappingServletInfo ComDayCqCommonsServletsRootMappingServlet(NancyContext context, bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, string rootmappingTarget)
        {
            return ComDayCqCommonsServletsRootMappingServlet(post, apply, delete, action, location, propertylist, rootmappingTarget);
        }

        public virtual ComDayCqCompatCodeupgradeImplCodeUpgradeExecutionConditionCheckeInfo ComDayCqCompatCodeupgradeImplCodeUpgradeExecutionConditionChecke(NancyContext context, bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, List<string> codeupgradetasks, List<string> codeupgradetaskfilters)
        {
            return ComDayCqCompatCodeupgradeImplCodeUpgradeExecutionConditionChecke(post, apply, delete, action, location, propertylist, codeupgradetasks, codeupgradetaskfilters);
        }

        public virtual ComDayCqCompatCodeupgradeImplUpgradeTaskIgnoreListInfo ComDayCqCompatCodeupgradeImplUpgradeTaskIgnoreList(NancyContext context, bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, List<string> upgradeTaskIgnoreList)
        {
            return ComDayCqCompatCodeupgradeImplUpgradeTaskIgnoreList(post, apply, delete, action, location, propertylist, upgradeTaskIgnoreList);
        }

        public virtual ComDayCqCompatCodeupgradeImplVersionRangeTaskIgnorelistInfo ComDayCqCompatCodeupgradeImplVersionRangeTaskIgnorelist(NancyContext context, bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, string effectiveBundleListPath)
        {
            return ComDayCqCompatCodeupgradeImplVersionRangeTaskIgnorelist(post, apply, delete, action, location, propertylist, effectiveBundleListPath);
        }

        public virtual ComDayCqContentsyncImplContentSyncManagerImplInfo ComDayCqContentsyncImplContentSyncManagerImpl(NancyContext context, bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, string contentsyncFallbackAuthorizable, string contentsyncFallbackUpdateuser)
        {
            return ComDayCqContentsyncImplContentSyncManagerImpl(post, apply, delete, action, location, propertylist, contentsyncFallbackAuthorizable, contentsyncFallbackUpdateuser);
        }

        public virtual ComDayCqDamCommonsHandlerStandardImageHandlerInfo ComDayCqDamCommonsHandlerStandardImageHandler(NancyContext context, bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, int? largeFileThreshold, int? largeCommentThreshold, bool? cqDamEnableExtMetaExtraction)
        {
            return ComDayCqDamCommonsHandlerStandardImageHandler(post, apply, delete, action, location, propertylist, largeFileThreshold, largeCommentThreshold, cqDamEnableExtMetaExtraction);
        }

        public virtual ComDayCqDamCommonsMetadataXmpFilterBlackWhiteInfo ComDayCqDamCommonsMetadataXmpFilterBlackWhite(NancyContext context, bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, bool? xmpFilterApplyWhitelist, List<string> xmpFilterWhitelist, bool? xmpFilterApplyBlacklist, List<string> xmpFilterBlacklist)
        {
            return ComDayCqDamCommonsMetadataXmpFilterBlackWhite(post, apply, delete, action, location, propertylist, xmpFilterApplyWhitelist, xmpFilterWhitelist, xmpFilterApplyBlacklist, xmpFilterBlacklist);
        }

        public virtual ComDayCqDamCommonsUtilImplAssetCacheImplInfo ComDayCqDamCommonsUtilImplAssetCacheImpl(NancyContext context, bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, int? largeFileMin, bool? cacheApply, List<string> mimeTypes)
        {
            return ComDayCqDamCommonsUtilImplAssetCacheImpl(post, apply, delete, action, location, propertylist, largeFileMin, cacheApply, mimeTypes);
        }

        public virtual ComDayCqDamCoreImplAnnotationPdfAnnotationPdfConfigInfo ComDayCqDamCoreImplAnnotationPdfAnnotationPdfConfig(NancyContext context, bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, int? cqDamConfigAnnotationPdfDocumentWidth, int? cqDamConfigAnnotationPdfDocumentHeight, int? cqDamConfigAnnotationPdfDocumentPaddingHorizontal, int? cqDamConfigAnnotationPdfDocumentPaddingVertical, int? cqDamConfigAnnotationPdfFontSize, string cqDamConfigAnnotationPdfFontColor, string cqDamConfigAnnotationPdfFontFamily, string cqDamConfigAnnotationPdfFontLight, int? cqDamConfigAnnotationPdfMarginTextImage, int? cqDamConfigAnnotationPdfMinImageHeight, int? cqDamConfigAnnotationPdfReviewStatusWidth, string cqDamConfigAnnotationPdfReviewStatusColorApproved, string cqDamConfigAnnotationPdfReviewStatusColorRejected, string cqDamConfigAnnotationPdfReviewStatusColorChangesRequested, int? cqDamConfigAnnotationPdfAnnotationMarkerWidth, int? cqDamConfigAnnotationPdfAssetMinheight)
        {
            return ComDayCqDamCoreImplAnnotationPdfAnnotationPdfConfig(post, apply, delete, action, location, propertylist, cqDamConfigAnnotationPdfDocumentWidth, cqDamConfigAnnotationPdfDocumentHeight, cqDamConfigAnnotationPdfDocumentPaddingHorizontal, cqDamConfigAnnotationPdfDocumentPaddingVertical, cqDamConfigAnnotationPdfFontSize, cqDamConfigAnnotationPdfFontColor, cqDamConfigAnnotationPdfFontFamily, cqDamConfigAnnotationPdfFontLight, cqDamConfigAnnotationPdfMarginTextImage, cqDamConfigAnnotationPdfMinImageHeight, cqDamConfigAnnotationPdfReviewStatusWidth, cqDamConfigAnnotationPdfReviewStatusColorApproved, cqDamConfigAnnotationPdfReviewStatusColorRejected, cqDamConfigAnnotationPdfReviewStatusColorChangesRequested, cqDamConfigAnnotationPdfAnnotationMarkerWidth, cqDamConfigAnnotationPdfAssetMinheight);
        }

        public virtual ComDayCqDamCoreImplAssetMoveListenerInfo ComDayCqDamCoreImplAssetMoveListener(NancyContext context, bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, bool? enabled)
        {
            return ComDayCqDamCoreImplAssetMoveListener(post, apply, delete, action, location, propertylist, enabled);
        }

        public virtual ComDayCqDamCoreImplAssethomeAssetHomePageConfigurationInfo ComDayCqDamCoreImplAssethomeAssetHomePageConfiguration(NancyContext context, bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, bool? isEnabled)
        {
            return ComDayCqDamCoreImplAssethomeAssetHomePageConfiguration(post, apply, delete, action, location, propertylist, isEnabled);
        }

        public virtual ComDayCqDamCoreImplAssetlinkshareAdhocAssetShareProxyServletInfo ComDayCqDamCoreImplAssetlinkshareAdhocAssetShareProxyServlet(NancyContext context, bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, int? cqDamAdhocAssetSharePrezipMaxcontentsize)
        {
            return ComDayCqDamCoreImplAssetlinkshareAdhocAssetShareProxyServlet(post, apply, delete, action, location, propertylist, cqDamAdhocAssetSharePrezipMaxcontentsize);
        }

        public virtual ComDayCqDamCoreImplCacheCQBufferedImageCacheInfo ComDayCqDamCoreImplCacheCQBufferedImageCache(NancyContext context, bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, int? cqDamImageCacheMaxMemory, int? cqDamImageCacheMaxAge, string cqDamImageCacheMaxDimension)
        {
            return ComDayCqDamCoreImplCacheCQBufferedImageCache(post, apply, delete, action, location, propertylist, cqDamImageCacheMaxMemory, cqDamImageCacheMaxAge, cqDamImageCacheMaxDimension);
        }

        public virtual ComDayCqDamCoreImplDamChangeEventListenerInfo ComDayCqDamCoreImplDamChangeEventListener(NancyContext context, bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, List<string> changeeventlistenerObservedPaths)
        {
            return ComDayCqDamCoreImplDamChangeEventListener(post, apply, delete, action, location, propertylist, changeeventlistenerObservedPaths);
        }

        public virtual ComDayCqDamCoreImplDamEventPurgeServiceInfo ComDayCqDamCoreImplDamEventPurgeService(NancyContext context, bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, string schedulerExpression, int? maxSavedActivities, int? saveInterval, bool? enableActivityPurge, string eventTypes)
        {
            return ComDayCqDamCoreImplDamEventPurgeService(post, apply, delete, action, location, propertylist, schedulerExpression, maxSavedActivities, saveInterval, enableActivityPurge, eventTypes);
        }

        public virtual ComDayCqDamCoreImplDamEventRecorderImplInfo ComDayCqDamCoreImplDamEventRecorderImpl(NancyContext context, bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, string eventFilter, int? eventQueueLength, bool? eventrecorderEnabled, List<string> eventrecorderBlacklist, string eventrecorderEventtypes)
        {
            return ComDayCqDamCoreImplDamEventRecorderImpl(post, apply, delete, action, location, propertylist, eventFilter, eventQueueLength, eventrecorderEnabled, eventrecorderBlacklist, eventrecorderEventtypes);
        }

        public virtual ComDayCqDamCoreImplEventDamEventAuditListenerInfo ComDayCqDamCoreImplEventDamEventAuditListener(NancyContext context, bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, string eventFilter, bool? enabled)
        {
            return ComDayCqDamCoreImplEventDamEventAuditListener(post, apply, delete, action, location, propertylist, eventFilter, enabled);
        }

        public virtual ComDayCqDamCoreImplExpiryNotificationJobImplInfo ComDayCqDamCoreImplExpiryNotificationJobImpl(NancyContext context, bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, bool? cqDamExpiryNotificationSchedulerIstimebased, string cqDamExpiryNotificationSchedulerTimebasedRule, int? cqDamExpiryNotificationSchedulerPeriodRule, bool? sendEmail, int? assetExpiredLimit, int? priorNotificationSeconds, string cqDamExpiryNotificationUrlProtocol)
        {
            return ComDayCqDamCoreImplExpiryNotificationJobImpl(post, apply, delete, action, location, propertylist, cqDamExpiryNotificationSchedulerIstimebased, cqDamExpiryNotificationSchedulerTimebasedRule, cqDamExpiryNotificationSchedulerPeriodRule, sendEmail, assetExpiredLimit, priorNotificationSeconds, cqDamExpiryNotificationUrlProtocol);
        }

        public virtual ComDayCqDamCoreImplFoldermetadataschemaFolderMetadataSchemaFeatInfo ComDayCqDamCoreImplFoldermetadataschemaFolderMetadataSchemaFeat(NancyContext context, bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, bool? isEnabled)
        {
            return ComDayCqDamCoreImplFoldermetadataschemaFolderMetadataSchemaFeat(post, apply, delete, action, location, propertylist, isEnabled);
        }

        public virtual ComDayCqDamCoreImplGfxCommonsGfxRendererInfo ComDayCqDamCoreImplGfxCommonsGfxRenderer(NancyContext context, bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, bool? skipBufferedcache)
        {
            return ComDayCqDamCoreImplGfxCommonsGfxRenderer(post, apply, delete, action, location, propertylist, skipBufferedcache);
        }

        public virtual ComDayCqDamCoreImplHandlerEPSFormatHandlerInfo ComDayCqDamCoreImplHandlerEPSFormatHandler(NancyContext context, bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, string mimetype)
        {
            return ComDayCqDamCoreImplHandlerEPSFormatHandler(post, apply, delete, action, location, propertylist, mimetype);
        }

        public virtual ComDayCqDamCoreImplHandlerIndesignFormatHandlerInfo ComDayCqDamCoreImplHandlerIndesignFormatHandler(NancyContext context, bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, List<string> mimetype)
        {
            return ComDayCqDamCoreImplHandlerIndesignFormatHandler(post, apply, delete, action, location, propertylist, mimetype);
        }

        public virtual ComDayCqDamCoreImplHandlerJpegHandlerInfo ComDayCqDamCoreImplHandlerJpegHandler(NancyContext context, bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, bool? cqDamEnableExtMetaExtraction, int? largeFileThreshold, int? largeCommentThreshold)
        {
            return ComDayCqDamCoreImplHandlerJpegHandler(post, apply, delete, action, location, propertylist, cqDamEnableExtMetaExtraction, largeFileThreshold, largeCommentThreshold);
        }

        public virtual ComDayCqDamCoreImplHandlerXmpNCommXMPHandlerInfo ComDayCqDamCoreImplHandlerXmpNCommXMPHandler(NancyContext context, bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, List<string> xmphandlerCqFormats)
        {
            return ComDayCqDamCoreImplHandlerXmpNCommXMPHandler(post, apply, delete, action, location, propertylist, xmphandlerCqFormats);
        }

        public virtual ComDayCqDamCoreImplJmxAssetIndexUpdateMonitorInfo ComDayCqDamCoreImplJmxAssetIndexUpdateMonitor(NancyContext context, bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, string jmxObjectname, bool? propertyMeasureEnabled, string propertyName, int? propertyMaxWaitMs, decimal? propertyMaxRate, bool? fulltextMeasureEnabled, string fulltextName, int? fulltextMaxWaitMs, decimal? fulltextMaxRate)
        {
            return ComDayCqDamCoreImplJmxAssetIndexUpdateMonitor(post, apply, delete, action, location, propertylist, jmxObjectname, propertyMeasureEnabled, propertyName, propertyMaxWaitMs, propertyMaxRate, fulltextMeasureEnabled, fulltextName, fulltextMaxWaitMs, fulltextMaxRate);
        }

        public virtual ComDayCqDamCoreImplJmxAssetMigrationMBeanImplInfo ComDayCqDamCoreImplJmxAssetMigrationMBeanImpl(NancyContext context, bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, string jmxObjectname)
        {
            return ComDayCqDamCoreImplJmxAssetMigrationMBeanImpl(post, apply, delete, action, location, propertylist, jmxObjectname);
        }

        public virtual ComDayCqDamCoreImplJmxAssetUpdateMonitorImplInfo ComDayCqDamCoreImplJmxAssetUpdateMonitorImpl(NancyContext context, bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, string jmxObjectname, bool? active)
        {
            return ComDayCqDamCoreImplJmxAssetUpdateMonitorImpl(post, apply, delete, action, location, propertylist, jmxObjectname, active);
        }

        public virtual ComDayCqDamCoreImplJobsMetadataexportAsyncMetadataExportConfigInfo ComDayCqDamCoreImplJobsMetadataexportAsyncMetadataExportConfig(NancyContext context, bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, string operation, bool? emailEnabled)
        {
            return ComDayCqDamCoreImplJobsMetadataexportAsyncMetadataExportConfig(post, apply, delete, action, location, propertylist, operation, emailEnabled);
        }

        public virtual ComDayCqDamCoreImplJobsMetadataimportAsyncMetadataImportConfigInfo ComDayCqDamCoreImplJobsMetadataimportAsyncMetadataImportConfig(NancyContext context, bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, string operation, string operationIcon, string topicName, bool? emailEnabled)
        {
            return ComDayCqDamCoreImplJobsMetadataimportAsyncMetadataImportConfig(post, apply, delete, action, location, propertylist, operation, operationIcon, topicName, emailEnabled);
        }

        public virtual ComDayCqDamCoreImplLightboxLightboxServletInfo ComDayCqDamCoreImplLightboxLightboxServlet(NancyContext context, bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, string slingServletPaths, List<string> slingServletMethods, bool? cqDamEnableAnonymous)
        {
            return ComDayCqDamCoreImplLightboxLightboxServlet(post, apply, delete, action, location, propertylist, slingServletPaths, slingServletMethods, cqDamEnableAnonymous);
        }

        public virtual ComDayCqDamCoreImplMetadataEditorSelectComponentHandlerInfo ComDayCqDamCoreImplMetadataEditorSelectComponentHandler(NancyContext context, bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, List<string> granitedata)
        {
            return ComDayCqDamCoreImplMetadataEditorSelectComponentHandler(post, apply, delete, action, location, propertylist, granitedata);
        }

        public virtual ComDayCqDamCoreImplMimeTypeAssetUploadRestrictionHelperInfo ComDayCqDamCoreImplMimeTypeAssetUploadRestrictionHelper(NancyContext context, bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, bool? cqDamAllowAllMime, List<string> cqDamAllowedAssetMimes)
        {
            return ComDayCqDamCoreImplMimeTypeAssetUploadRestrictionHelper(post, apply, delete, action, location, propertylist, cqDamAllowAllMime, cqDamAllowedAssetMimes);
        }

        public virtual ComDayCqDamCoreImplMimeTypeDamMimeTypeServiceImplInfo ComDayCqDamCoreImplMimeTypeDamMimeTypeServiceImpl(NancyContext context, bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, bool? cqDamDetectAssetMimeFromContent)
        {
            return ComDayCqDamCoreImplMimeTypeDamMimeTypeServiceImpl(post, apply, delete, action, location, propertylist, cqDamDetectAssetMimeFromContent);
        }

        public virtual ComDayCqDamCoreImplMissingMetadataNotificationJobInfo ComDayCqDamCoreImplMissingMetadataNotificationJob(NancyContext context, bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, bool? cqDamMissingmetadataNotificationSchedulerIstimebased, string cqDamMissingmetadataNotificationSchedulerTimebasedRule, int? cqDamMissingmetadataNotificationSchedulerPeriodRule, string cqDamMissingmetadataNotificationRecipient)
        {
            return ComDayCqDamCoreImplMissingMetadataNotificationJob(post, apply, delete, action, location, propertylist, cqDamMissingmetadataNotificationSchedulerIstimebased, cqDamMissingmetadataNotificationSchedulerTimebasedRule, cqDamMissingmetadataNotificationSchedulerPeriodRule, cqDamMissingmetadataNotificationRecipient);
        }

        public virtual ComDayCqDamCoreImplProcessSendTransientWorkflowCompletedEmailPrInfo ComDayCqDamCoreImplProcessSendTransientWorkflowCompletedEmailPr(NancyContext context, bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, string processLabel, bool? notifyOnComplete)
        {
            return ComDayCqDamCoreImplProcessSendTransientWorkflowCompletedEmailPr(post, apply, delete, action, location, propertylist, processLabel, notifyOnComplete);
        }

        public virtual ComDayCqDamCoreImplProcessTextExtractionProcessInfo ComDayCqDamCoreImplProcessTextExtractionProcess(NancyContext context, bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, List<string> mimeTypes, int? maxExtract)
        {
            return ComDayCqDamCoreImplProcessTextExtractionProcess(post, apply, delete, action, location, propertylist, mimeTypes, maxExtract);
        }

        public virtual ComDayCqDamCoreImplRenditionMakerImplInfo ComDayCqDamCoreImplRenditionMakerImpl(NancyContext context, bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, bool? xmpPropagate, List<string> xmpExcludes)
        {
            return ComDayCqDamCoreImplRenditionMakerImpl(post, apply, delete, action, location, propertylist, xmpPropagate, xmpExcludes);
        }

        public virtual ComDayCqDamCoreImplReportsReportExportServiceInfo ComDayCqDamCoreImplReportsReportExportService(NancyContext context, bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, int? queryBatchSize)
        {
            return ComDayCqDamCoreImplReportsReportExportService(post, apply, delete, action, location, propertylist, queryBatchSize);
        }

        public virtual ComDayCqDamCoreImplReportsReportPurgeServiceInfo ComDayCqDamCoreImplReportsReportPurgeService(NancyContext context, bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, string schedulerExpression, int? maxSavedReports, int? timeDuration, bool? enableReportPurge)
        {
            return ComDayCqDamCoreImplReportsReportPurgeService(post, apply, delete, action, location, propertylist, schedulerExpression, maxSavedReports, timeDuration, enableReportPurge);
        }

        public virtual ComDayCqDamCoreImplServletAssetDownloadServletInfo ComDayCqDamCoreImplServletAssetDownloadServlet(NancyContext context, bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, bool? enabled)
        {
            return ComDayCqDamCoreImplServletAssetDownloadServlet(post, apply, delete, action, location, propertylist, enabled);
        }

        public virtual ComDayCqDamCoreImplServletAssetStatusServletInfo ComDayCqDamCoreImplServletAssetStatusServlet(NancyContext context, bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, int? cqDamBatchStatusMaxassets)
        {
            return ComDayCqDamCoreImplServletAssetStatusServlet(post, apply, delete, action, location, propertylist, cqDamBatchStatusMaxassets);
        }

        public virtual ComDayCqDamCoreImplServletAssetXMPSearchServletInfo ComDayCqDamCoreImplServletAssetXMPSearchServlet(NancyContext context, bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, int? cqDamBatchIndesignMaxassets)
        {
            return ComDayCqDamCoreImplServletAssetXMPSearchServlet(post, apply, delete, action, location, propertylist, cqDamBatchIndesignMaxassets);
        }

        public virtual ComDayCqDamCoreImplServletBatchMetadataServletInfo ComDayCqDamCoreImplServletBatchMetadataServlet(NancyContext context, bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, List<string> cqDamBatchMetadataAssetDefault, List<string> cqDamBatchMetadataCollectionDefault, int? cqDamBatchMetadataMaxresources)
        {
            return ComDayCqDamCoreImplServletBatchMetadataServlet(post, apply, delete, action, location, propertylist, cqDamBatchMetadataAssetDefault, cqDamBatchMetadataCollectionDefault, cqDamBatchMetadataMaxresources);
        }

        public virtual ComDayCqDamCoreImplServletBinaryProviderServletInfo ComDayCqDamCoreImplServletBinaryProviderServlet(NancyContext context, bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, List<string> slingServletResourceTypes, List<string> slingServletMethods, bool? cqDamDrmEnable)
        {
            return ComDayCqDamCoreImplServletBinaryProviderServlet(post, apply, delete, action, location, propertylist, slingServletResourceTypes, slingServletMethods, cqDamDrmEnable);
        }

        public virtual ComDayCqDamCoreImplServletCollectionServletInfo ComDayCqDamCoreImplServletCollectionServlet(NancyContext context, bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, List<string> cqDamBatchCollectionProperties, int? cqDamBatchCollectionMaxcollections)
        {
            return ComDayCqDamCoreImplServletCollectionServlet(post, apply, delete, action, location, propertylist, cqDamBatchCollectionProperties, cqDamBatchCollectionMaxcollections);
        }

        public virtual ComDayCqDamCoreImplServletCollectionsServletInfo ComDayCqDamCoreImplServletCollectionsServlet(NancyContext context, bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, List<string> cqDamBatchCollectionsProperties, int? cqDamBatchCollectionsLimit)
        {
            return ComDayCqDamCoreImplServletCollectionsServlet(post, apply, delete, action, location, propertylist, cqDamBatchCollectionsProperties, cqDamBatchCollectionsLimit);
        }

        public virtual ComDayCqDamCoreImplServletCompanionServletInfo ComDayCqDamCoreImplServletCompanionServlet(NancyContext context, bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, string moreInfo, string mntoverlaydamguicontentassetsmoreinfoHtmlpath)
        {
            return ComDayCqDamCoreImplServletCompanionServlet(post, apply, delete, action, location, propertylist, moreInfo, mntoverlaydamguicontentassetsmoreinfoHtmlpath);
        }

        public virtual ComDayCqDamCoreImplServletCreateAssetServletInfo ComDayCqDamCoreImplServletCreateAssetServlet(NancyContext context, bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, bool? detectDuplicate)
        {
            return ComDayCqDamCoreImplServletCreateAssetServlet(post, apply, delete, action, location, propertylist, detectDuplicate);
        }

        public virtual ComDayCqDamCoreImplServletDamContentDispositionFilterInfo ComDayCqDamCoreImplServletDamContentDispositionFilter(NancyContext context, bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, List<string> cqMimeTypeBlacklist, bool? cqDamEmptyMime)
        {
            return ComDayCqDamCoreImplServletDamContentDispositionFilter(post, apply, delete, action, location, propertylist, cqMimeTypeBlacklist, cqDamEmptyMime);
        }

        public virtual ComDayCqDamCoreImplServletGuidLookupFilterInfo ComDayCqDamCoreImplServletGuidLookupFilter(NancyContext context, bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, bool? cqDamCoreGuidlookupfilterEnabled)
        {
            return ComDayCqDamCoreImplServletGuidLookupFilter(post, apply, delete, action, location, propertylist, cqDamCoreGuidlookupfilterEnabled);
        }

        public virtual ComDayCqDamCoreImplServletHealthCheckServletInfo ComDayCqDamCoreImplServletHealthCheckServlet(NancyContext context, bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, string cqDamSyncWorkflowId, List<string> cqDamSyncFolderTypes)
        {
            return ComDayCqDamCoreImplServletHealthCheckServlet(post, apply, delete, action, location, propertylist, cqDamSyncWorkflowId, cqDamSyncFolderTypes);
        }

        public virtual ComDayCqDamCoreImplServletMetadataGetServletInfo ComDayCqDamCoreImplServletMetadataGetServlet(NancyContext context, bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, string slingServletResourceTypes, string slingServletMethods, string slingServletExtensions, string slingServletSelectors)
        {
            return ComDayCqDamCoreImplServletMetadataGetServlet(post, apply, delete, action, location, propertylist, slingServletResourceTypes, slingServletMethods, slingServletExtensions, slingServletSelectors);
        }

        public virtual ComDayCqDamCoreImplServletMultipleLicenseAcceptServletInfo ComDayCqDamCoreImplServletMultipleLicenseAcceptServlet(NancyContext context, bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, bool? cqDamDrmEnable)
        {
            return ComDayCqDamCoreImplServletMultipleLicenseAcceptServlet(post, apply, delete, action, location, propertylist, cqDamDrmEnable);
        }

        public virtual ComDayCqDamCoreImplServletResourceCollectionServletInfo ComDayCqDamCoreImplServletResourceCollectionServlet(NancyContext context, bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, List<string> slingServletResourceTypes, string slingServletMethods, string slingServletSelectors, string downloadConfig, string viewSelector, bool? sendEmail)
        {
            return ComDayCqDamCoreImplServletResourceCollectionServlet(post, apply, delete, action, location, propertylist, slingServletResourceTypes, slingServletMethods, slingServletSelectors, downloadConfig, viewSelector, sendEmail);
        }

        public virtual ComDayCqDamCoreImplUiPreviewFolderPreviewUpdaterImplInfo ComDayCqDamCoreImplUiPreviewFolderPreviewUpdaterImpl(NancyContext context, bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, bool? createPreviewEnabled, bool? updatePreviewEnabled, int? queueSize, string folderPreviewRenditionRegex)
        {
            return ComDayCqDamCoreImplUiPreviewFolderPreviewUpdaterImpl(post, apply, delete, action, location, propertylist, createPreviewEnabled, updatePreviewEnabled, queueSize, folderPreviewRenditionRegex);
        }

        public virtual ComDayCqDamCoreImplUnzipUnzipConfigInfo ComDayCqDamCoreImplUnzipUnzipConfig(NancyContext context, bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, int? cqDamConfigUnzipMaxuncompressedsize, string cqDamConfigUnzipEncoding)
        {
            return ComDayCqDamCoreImplUnzipUnzipConfig(post, apply, delete, action, location, propertylist, cqDamConfigUnzipMaxuncompressedsize, cqDamConfigUnzipEncoding);
        }

        public virtual ComDayCqDamCoreProcessExifToolExtractMetadataProcessInfo ComDayCqDamCoreProcessExifToolExtractMetadataProcess(NancyContext context, bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, string processLabel, bool? cqDamEnableSha1)
        {
            return ComDayCqDamCoreProcessExifToolExtractMetadataProcess(post, apply, delete, action, location, propertylist, processLabel, cqDamEnableSha1);
        }

        public virtual ComDayCqDamCoreProcessExtractMetadataProcessInfo ComDayCqDamCoreProcessExtractMetadataProcess(NancyContext context, bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, string processLabel, bool? cqDamEnableSha1)
        {
            return ComDayCqDamCoreProcessExtractMetadataProcess(post, apply, delete, action, location, propertylist, processLabel, cqDamEnableSha1);
        }

        public virtual ComDayCqDamCoreProcessMetadataProcessorProcessInfo ComDayCqDamCoreProcessMetadataProcessorProcess(NancyContext context, bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, string processLabel, bool? cqDamEnableSha1, List<string> cqDamMetadataXssprotectedProperties)
        {
            return ComDayCqDamCoreProcessMetadataProcessorProcess(post, apply, delete, action, location, propertylist, processLabel, cqDamEnableSha1, cqDamMetadataXssprotectedProperties);
        }

        public virtual ComDayCqDamHandlerFfmpegLocatorImplInfo ComDayCqDamHandlerFfmpegLocatorImpl(NancyContext context, bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, List<string> executableSearchpath)
        {
            return ComDayCqDamHandlerFfmpegLocatorImpl(post, apply, delete, action, location, propertylist, executableSearchpath);
        }

        public virtual ComDayCqDamHandlerGibsonFontmanagerImplFontManagerServiceImplInfo ComDayCqDamHandlerGibsonFontmanagerImplFontManagerServiceImpl(NancyContext context, bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, string eventFilter, List<string> fontmgrSystemFontDir, string fontmgrAdobeFontDir, string fontmgrCustomerFontDir)
        {
            return ComDayCqDamHandlerGibsonFontmanagerImplFontManagerServiceImpl(post, apply, delete, action, location, propertylist, eventFilter, fontmgrSystemFontDir, fontmgrAdobeFontDir, fontmgrCustomerFontDir);
        }

        public virtual ComDayCqDamHandlerStandardPdfPdfHandlerInfo ComDayCqDamHandlerStandardPdfPdfHandler(NancyContext context, bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, bool? rasterAnnotation)
        {
            return ComDayCqDamHandlerStandardPdfPdfHandler(post, apply, delete, action, location, propertylist, rasterAnnotation);
        }

        public virtual ComDayCqDamHandlerStandardPsPostScriptHandlerInfo ComDayCqDamHandlerStandardPsPostScriptHandler(NancyContext context, bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, bool? rasterAnnotation)
        {
            return ComDayCqDamHandlerStandardPsPostScriptHandler(post, apply, delete, action, location, propertylist, rasterAnnotation);
        }

        public virtual ComDayCqDamHandlerStandardPsdPsdHandlerInfo ComDayCqDamHandlerStandardPsdPsdHandler(NancyContext context, bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, int? largeFileThreshold)
        {
            return ComDayCqDamHandlerStandardPsdPsdHandler(post, apply, delete, action, location, propertylist, largeFileThreshold);
        }

        public virtual ComDayCqDamIdsImplIDSJobProcessorInfo ComDayCqDamIdsImplIDSJobProcessor(NancyContext context, bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, bool? enableMultisession, bool? idsCcEnable, bool? enableRetry, bool? enableRetryScripterror, string externalizerDomainCqhost, string externalizerDomainHttp)
        {
            return ComDayCqDamIdsImplIDSJobProcessor(post, apply, delete, action, location, propertylist, enableMultisession, idsCcEnable, enableRetry, enableRetryScripterror, externalizerDomainCqhost, externalizerDomainHttp);
        }

        public virtual ComDayCqDamIdsImplIDSPoolManagerImplInfo ComDayCqDamIdsImplIDSPoolManagerImpl(NancyContext context, bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, int? maxErrorsToBlacklist, int? retryIntervalToWhitelist, int? connectTimeout, int? socketTimeout, string processLabel, int? connectionUseMax)
        {
            return ComDayCqDamIdsImplIDSPoolManagerImpl(post, apply, delete, action, location, propertylist, maxErrorsToBlacklist, retryIntervalToWhitelist, connectTimeout, socketTimeout, processLabel, connectionUseMax);
        }

        public virtual ComDayCqDamInddImplHandlerIndesignXMPHandlerInfo ComDayCqDamInddImplHandlerIndesignXMPHandler(NancyContext context, bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, string processLabel, bool? extractPages)
        {
            return ComDayCqDamInddImplHandlerIndesignXMPHandler(post, apply, delete, action, location, propertylist, processLabel, extractPages);
        }

        public virtual ComDayCqDamInddImplServletSnippetCreationServletInfo ComDayCqDamInddImplServletSnippetCreationServlet(NancyContext context, bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, int? snippetcreationMaxcollections)
        {
            return ComDayCqDamInddImplServletSnippetCreationServlet(post, apply, delete, action, location, propertylist, snippetcreationMaxcollections);
        }

        public virtual ComDayCqDamInddProcessINDDMediaExtractProcessInfo ComDayCqDamInddProcessINDDMediaExtractProcess(NancyContext context, bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, string processLabel, string cqDamInddPagesRegex, bool? idsJobDecoupled, string idsJobWorkflowModel)
        {
            return ComDayCqDamInddProcessINDDMediaExtractProcess(post, apply, delete, action, location, propertylist, processLabel, cqDamInddPagesRegex, idsJobDecoupled, idsJobWorkflowModel);
        }

        public virtual ComDayCqDamPerformanceInternalAssetPerformanceDataHandlerImplInfo ComDayCqDamPerformanceInternalAssetPerformanceDataHandlerImpl(NancyContext context, bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, int? batchCommitSize)
        {
            return ComDayCqDamPerformanceInternalAssetPerformanceDataHandlerImpl(post, apply, delete, action, location, propertylist, batchCommitSize);
        }

        public virtual ComDayCqDamPerformanceInternalAssetPerformanceReportSyncJobInfo ComDayCqDamPerformanceInternalAssetPerformanceReportSyncJob(NancyContext context, bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, string schedulerExpression)
        {
            return ComDayCqDamPerformanceInternalAssetPerformanceReportSyncJob(post, apply, delete, action, location, propertylist, schedulerExpression);
        }

        public virtual ComDayCqDamPimImplSourcingUploadProcessProductAssetsUploadProInfo ComDayCqDamPimImplSourcingUploadProcessProductAssetsUploadPro(NancyContext context, bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, bool? deleteZipFile)
        {
            return ComDayCqDamPimImplSourcingUploadProcessProductAssetsUploadPro(post, apply, delete, action, location, propertylist, deleteZipFile);
        }

        public virtual ComDayCqDamS7damCommonAnalyticsImplS7damDynamicMediaConfigEvenInfo ComDayCqDamS7damCommonAnalyticsImplS7damDynamicMediaConfigEven(NancyContext context, bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, bool? cqDamS7damDynamicmediaconfigeventlistenerEnabled)
        {
            return ComDayCqDamS7damCommonAnalyticsImplS7damDynamicMediaConfigEven(post, apply, delete, action, location, propertylist, cqDamS7damDynamicmediaconfigeventlistenerEnabled);
        }

        public virtual ComDayCqDamS7damCommonAnalyticsImplSiteCatalystReportRunnerInfo ComDayCqDamS7damCommonAnalyticsImplSiteCatalystReportRunner(NancyContext context, bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, string schedulerExpression, bool? schedulerConcurrent)
        {
            return ComDayCqDamS7damCommonAnalyticsImplSiteCatalystReportRunner(post, apply, delete, action, location, propertylist, schedulerExpression, schedulerConcurrent);
        }

        public virtual ComDayCqDamS7damCommonPostServletsSetCreateHandlerInfo ComDayCqDamS7damCommonPostServletsSetCreateHandler(NancyContext context, bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, string slingPostOperation, string slingServletMethods)
        {
            return ComDayCqDamS7damCommonPostServletsSetCreateHandler(post, apply, delete, action, location, propertylist, slingPostOperation, slingServletMethods);
        }

        public virtual ComDayCqDamS7damCommonPostServletsSetModifyHandlerInfo ComDayCqDamS7damCommonPostServletsSetModifyHandler(NancyContext context, bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, string slingPostOperation, string slingServletMethods)
        {
            return ComDayCqDamS7damCommonPostServletsSetModifyHandler(post, apply, delete, action, location, propertylist, slingPostOperation, slingServletMethods);
        }

        public virtual ComDayCqDamS7damCommonProcessVideoThumbnailDownloadProcessInfo ComDayCqDamS7damCommonProcessVideoThumbnailDownloadProcess(NancyContext context, bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, string processLabel)
        {
            return ComDayCqDamS7damCommonProcessVideoThumbnailDownloadProcess(post, apply, delete, action, location, propertylist, processLabel);
        }

        public virtual ComDayCqDamS7damCommonS7damDamChangeEventListenerInfo ComDayCqDamS7damCommonS7damDamChangeEventListener(NancyContext context, bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, bool? cqDamS7damDamchangeeventlistenerEnabled)
        {
            return ComDayCqDamS7damCommonS7damDamChangeEventListener(post, apply, delete, action, location, propertylist, cqDamS7damDamchangeeventlistenerEnabled);
        }

        public virtual ComDayCqDamS7damCommonServletsS7damProductInfoServletInfo ComDayCqDamS7damCommonServletsS7damProductInfoServlet(NancyContext context, bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, string slingServletPaths, string slingServletMethods)
        {
            return ComDayCqDamS7damCommonServletsS7damProductInfoServlet(post, apply, delete, action, location, propertylist, slingServletPaths, slingServletMethods);
        }

        public virtual ComDayCqDamS7damCommonVideoImplVideoProxyClientServiceImplInfo ComDayCqDamS7damCommonVideoImplVideoProxyClientServiceImpl(NancyContext context, bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, int? cqDamS7damVideoproxyclientserviceMultipartuploadMinsizeName, int? cqDamS7damVideoproxyclientserviceMultipartuploadPartsizeName, int? cqDamS7damVideoproxyclientserviceMultipartuploadNumthreadName, int? cqDamS7damVideoproxyclientserviceHttpReadtimeoutName, int? cqDamS7damVideoproxyclientserviceHttpConnectiontimeoutName, int? cqDamS7damVideoproxyclientserviceHttpMaxretrycountName, int? cqDamS7damVideoproxyclientserviceUploadprogressIntervalName)
        {
            return ComDayCqDamS7damCommonVideoImplVideoProxyClientServiceImpl(post, apply, delete, action, location, propertylist, cqDamS7damVideoproxyclientserviceMultipartuploadMinsizeName, cqDamS7damVideoproxyclientserviceMultipartuploadPartsizeName, cqDamS7damVideoproxyclientserviceMultipartuploadNumthreadName, cqDamS7damVideoproxyclientserviceHttpReadtimeoutName, cqDamS7damVideoproxyclientserviceHttpConnectiontimeoutName, cqDamS7damVideoproxyclientserviceHttpMaxretrycountName, cqDamS7damVideoproxyclientserviceUploadprogressIntervalName);
        }

        public virtual ComDayCqDamScene7ImplScene7APIClientImplInfo ComDayCqDamScene7ImplScene7APIClientImpl(NancyContext context, bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, int? cqDamScene7ApiclientRecordsperpageNofilterName, int? cqDamScene7ApiclientRecordsperpageWithfilterName)
        {
            return ComDayCqDamScene7ImplScene7APIClientImpl(post, apply, delete, action, location, propertylist, cqDamScene7ApiclientRecordsperpageNofilterName, cqDamScene7ApiclientRecordsperpageWithfilterName);
        }

        public virtual ComDayCqDamScene7ImplScene7AssetMimeTypeServiceImplInfo ComDayCqDamScene7ImplScene7AssetMimeTypeServiceImpl(NancyContext context, bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, List<string> cqDamScene7AssetmimetypeserviceMapping)
        {
            return ComDayCqDamScene7ImplScene7AssetMimeTypeServiceImpl(post, apply, delete, action, location, propertylist, cqDamScene7AssetmimetypeserviceMapping);
        }

        public virtual ComDayCqDamScene7ImplScene7ConfigurationEventListenerInfo ComDayCqDamScene7ImplScene7ConfigurationEventListener(NancyContext context, bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, bool? cqDamScene7ConfigurationeventlistenerEnabled)
        {
            return ComDayCqDamScene7ImplScene7ConfigurationEventListener(post, apply, delete, action, location, propertylist, cqDamScene7ConfigurationeventlistenerEnabled);
        }

        public virtual ComDayCqDamScene7ImplScene7DamChangeEventListenerInfo ComDayCqDamScene7ImplScene7DamChangeEventListener(NancyContext context, bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, bool? cqDamScene7DamchangeeventlistenerEnabled, List<string> cqDamScene7DamchangeeventlistenerObservedPaths)
        {
            return ComDayCqDamScene7ImplScene7DamChangeEventListener(post, apply, delete, action, location, propertylist, cqDamScene7DamchangeeventlistenerEnabled, cqDamScene7DamchangeeventlistenerObservedPaths);
        }

        public virtual ComDayCqDamScene7ImplScene7FlashTemplatesServiceImplInfo ComDayCqDamScene7ImplScene7FlashTemplatesServiceImpl(NancyContext context, bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, string scene7FlashTemplatesRti, string scene7FlashTemplatesRsi, string scene7FlashTemplatesRb, string scene7FlashTemplatesRurl, string scene7FlashTemplateUrlFormatParameter)
        {
            return ComDayCqDamScene7ImplScene7FlashTemplatesServiceImpl(post, apply, delete, action, location, propertylist, scene7FlashTemplatesRti, scene7FlashTemplatesRsi, scene7FlashTemplatesRb, scene7FlashTemplatesRurl, scene7FlashTemplateUrlFormatParameter);
        }

        public virtual ComDayCqDamScene7ImplScene7UploadServiceImplInfo ComDayCqDamScene7ImplScene7UploadServiceImpl(NancyContext context, bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, int? cqDamScene7UploadserviceActivejobtimeoutLabel, int? cqDamScene7UploadserviceConnectionmaxperrouteLabel)
        {
            return ComDayCqDamScene7ImplScene7UploadServiceImpl(post, apply, delete, action, location, propertylist, cqDamScene7UploadserviceActivejobtimeoutLabel, cqDamScene7UploadserviceConnectionmaxperrouteLabel);
        }

        public virtual ComDayCqDamStockIntegrationImplCacheStockCacheConfigurationSerInfo ComDayCqDamStockIntegrationImplCacheStockCacheConfigurationSer(NancyContext context, bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, string getCacheExpirationUnit, int? getCacheExpirationValue)
        {
            return ComDayCqDamStockIntegrationImplCacheStockCacheConfigurationSer(post, apply, delete, action, location, propertylist, getCacheExpirationUnit, getCacheExpirationValue);
        }

        public virtual ComDayCqDamStockIntegrationImplConfigurationStockConfigurationInfo ComDayCqDamStockIntegrationImplConfigurationStockConfiguration(NancyContext context, bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, string name, string locale, string imsConfig)
        {
            return ComDayCqDamStockIntegrationImplConfigurationStockConfiguration(post, apply, delete, action, location, propertylist, name, locale, imsConfig);
        }

        public virtual ComDayCqDamVideoImplServletVideoTestServletInfo ComDayCqDamVideoImplServletVideoTestServlet(NancyContext context, bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, bool? enabled)
        {
            return ComDayCqDamVideoImplServletVideoTestServlet(post, apply, delete, action, location, propertylist, enabled);
        }

        public virtual ComDayCqExtwidgetServletsImageSpriteServletInfo ComDayCqExtwidgetServletsImageSpriteServlet(NancyContext context, bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, int? maxWidth, int? maxHeight)
        {
            return ComDayCqExtwidgetServletsImageSpriteServlet(post, apply, delete, action, location, propertylist, maxWidth, maxHeight);
        }

        public virtual ComDayCqImageInternalFontFontHelperInfo ComDayCqImageInternalFontFontHelper(NancyContext context, bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, List<string> fontpath, int? oversamplingFactor)
        {
            return ComDayCqImageInternalFontFontHelper(post, apply, delete, action, location, propertylist, fontpath, oversamplingFactor);
        }

        public virtual ComDayCqJcrclustersupportClusterStartLevelControllerInfo ComDayCqJcrclustersupportClusterStartLevelController(NancyContext context, bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, bool? clusterLevelEnable, int? clusterMasterLevel, int? clusterSlaveLevel)
        {
            return ComDayCqJcrclustersupportClusterStartLevelController(post, apply, delete, action, location, propertylist, clusterLevelEnable, clusterMasterLevel, clusterSlaveLevel);
        }

        public virtual ComDayCqMailerDefaultMailServiceInfo ComDayCqMailerDefaultMailService(NancyContext context, bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, string smtpHost, int? smtpPort, string smtpUser, string smtpPassword, string fromAddress, bool? smtpSsl, bool? smtpStarttls, bool? debugEmail)
        {
            return ComDayCqMailerDefaultMailService(post, apply, delete, action, location, propertylist, smtpHost, smtpPort, smtpUser, smtpPassword, fromAddress, smtpSsl, smtpStarttls, debugEmail);
        }

        public virtual ComDayCqMailerImplCqMailingServiceInfo ComDayCqMailerImplCqMailingService(NancyContext context, bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, string maxRecipientCount)
        {
            return ComDayCqMailerImplCqMailingService(post, apply, delete, action, location, propertylist, maxRecipientCount);
        }

        public virtual ComDayCqMailerImplEmailCqEmailTemplateFactoryInfo ComDayCqMailerImplEmailCqEmailTemplateFactory(NancyContext context, bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, string mailerEmailCharset)
        {
            return ComDayCqMailerImplEmailCqEmailTemplateFactory(post, apply, delete, action, location, propertylist, mailerEmailCharset);
        }

        public virtual ComDayCqMailerImplEmailCqRetrieverTemplateFactoryInfo ComDayCqMailerImplEmailCqRetrieverTemplateFactory(NancyContext context, bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, bool? mailerEmailEmbed, string mailerEmailCharset, string mailerEmailRetrieverUserID, string mailerEmailRetrieverUserPWD)
        {
            return ComDayCqMailerImplEmailCqRetrieverTemplateFactory(post, apply, delete, action, location, propertylist, mailerEmailEmbed, mailerEmailCharset, mailerEmailRetrieverUserID, mailerEmailRetrieverUserPWD);
        }

        public virtual ComDayCqMcmCampaignImplIntegrationConfigImplInfo ComDayCqMcmCampaignImplIntegrationConfigImpl(NancyContext context, bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, List<string> aemMcmCampaignFormConstraints, string aemMcmCampaignPublicUrl, bool? aemMcmCampaignRelaxedSSL)
        {
            return ComDayCqMcmCampaignImplIntegrationConfigImpl(post, apply, delete, action, location, propertylist, aemMcmCampaignFormConstraints, aemMcmCampaignPublicUrl, aemMcmCampaignRelaxedSSL);
        }

        public virtual ComDayCqMcmCampaignImporterPersonalizedTextHandlerFactoryInfo ComDayCqMcmCampaignImporterPersonalizedTextHandlerFactory(NancyContext context, bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, int? serviceRanking, string tagpattern)
        {
            return ComDayCqMcmCampaignImporterPersonalizedTextHandlerFactory(post, apply, delete, action, location, propertylist, serviceRanking, tagpattern);
        }

        public virtual ComDayCqMcmCoreNewsletterNewsletterEmailServiceImplInfo ComDayCqMcmCoreNewsletterNewsletterEmailServiceImpl(NancyContext context, bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, string fromAddress, string senderHost, string maxBounceCount)
        {
            return ComDayCqMcmCoreNewsletterNewsletterEmailServiceImpl(post, apply, delete, action, location, propertylist, fromAddress, senderHost, maxBounceCount);
        }

        public virtual ComDayCqMcmImplMCMConfigurationInfo ComDayCqMcmImplMCMConfiguration(NancyContext context, bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, List<string> experienceIndirection, List<string> touchpointIndirection)
        {
            return ComDayCqMcmImplMCMConfiguration(post, apply, delete, action, location, propertylist, experienceIndirection, touchpointIndirection);
        }

        public virtual ComDayCqMcmLandingpageParserTaghandlersCtaClickThroughComponenInfo ComDayCqMcmLandingpageParserTaghandlersCtaClickThroughComponen(NancyContext context, bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, int? serviceRanking, string tagpattern, string componentResourceType)
        {
            return ComDayCqMcmLandingpageParserTaghandlersCtaClickThroughComponen(post, apply, delete, action, location, propertylist, serviceRanking, tagpattern, componentResourceType);
        }

        public virtual ComDayCqMcmLandingpageParserTaghandlersCtaGraphicalClickThrougInfo ComDayCqMcmLandingpageParserTaghandlersCtaGraphicalClickThroug(NancyContext context, bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, int? serviceRanking, string tagpattern, string componentResourceType)
        {
            return ComDayCqMcmLandingpageParserTaghandlersCtaGraphicalClickThroug(post, apply, delete, action, location, propertylist, serviceRanking, tagpattern, componentResourceType);
        }

        public virtual ComDayCqMcmLandingpageParserTaghandlersCtaLeadFormCTAComponentInfo ComDayCqMcmLandingpageParserTaghandlersCtaLeadFormCTAComponent(NancyContext context, bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, int? serviceRanking, string tagpattern)
        {
            return ComDayCqMcmLandingpageParserTaghandlersCtaLeadFormCTAComponent(post, apply, delete, action, location, propertylist, serviceRanking, tagpattern);
        }

        public virtual ComDayCqMcmLandingpageParserTaghandlersMboxMBoxExperienceTagHaInfo ComDayCqMcmLandingpageParserTaghandlersMboxMBoxExperienceTagHa(NancyContext context, bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, int? serviceRanking, string tagpattern)
        {
            return ComDayCqMcmLandingpageParserTaghandlersMboxMBoxExperienceTagHa(post, apply, delete, action, location, propertylist, serviceRanking, tagpattern);
        }

        public virtual ComDayCqMcmLandingpageParserTaghandlersMboxTargetComponentTagHInfo ComDayCqMcmLandingpageParserTaghandlersMboxTargetComponentTagH(NancyContext context, bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, int? serviceRanking, string tagpattern, string componentResourceType)
        {
            return ComDayCqMcmLandingpageParserTaghandlersMboxTargetComponentTagH(post, apply, delete, action, location, propertylist, serviceRanking, tagpattern, componentResourceType);
        }

        public virtual ComDayCqNotificationImplNotificationServiceImplInfo ComDayCqNotificationImplNotificationServiceImpl(NancyContext context, bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, string eventFilter)
        {
            return ComDayCqNotificationImplNotificationServiceImpl(post, apply, delete, action, location, propertylist, eventFilter);
        }

        public virtual ComDayCqPersonalizationImplServletsTargetingConfigurationServletInfo ComDayCqPersonalizationImplServletsTargetingConfigurationServlet(NancyContext context, bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, bool? forcelocation)
        {
            return ComDayCqPersonalizationImplServletsTargetingConfigurationServlet(post, apply, delete, action, location, propertylist, forcelocation);
        }

        public virtual ComDayCqPollingImporterImplManagedPollConfigImplInfo ComDayCqPollingImporterImplManagedPollConfigImpl(NancyContext context, bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, string id, bool? enabled, bool? reference, int? interval, string expression, string source, string target, string login, string password)
        {
            return ComDayCqPollingImporterImplManagedPollConfigImpl(post, apply, delete, action, location, propertylist, id, enabled, reference, interval, expression, source, target, login, password);
        }

        public virtual ComDayCqPollingImporterImplManagedPollingImporterImplInfo ComDayCqPollingImporterImplManagedPollingImporterImpl(NancyContext context, bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, string importerUser)
        {
            return ComDayCqPollingImporterImplManagedPollingImporterImpl(post, apply, delete, action, location, propertylist, importerUser);
        }

        public virtual ComDayCqPollingImporterImplPollingImporterImplInfo ComDayCqPollingImporterImplPollingImporterImpl(NancyContext context, bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, int? importerMinInterval, string importerUser, List<string> excludePaths, List<string> includePaths)
        {
            return ComDayCqPollingImporterImplPollingImporterImpl(post, apply, delete, action, location, propertylist, importerMinInterval, importerUser, excludePaths, includePaths);
        }

        public virtual ComDayCqReplicationAuditReplicationEventListenerInfo ComDayCqReplicationAuditReplicationEventListener(NancyContext context, bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, int? serviceRanking)
        {
            return ComDayCqReplicationAuditReplicationEventListener(post, apply, delete, action, location, propertylist, serviceRanking);
        }

        public virtual ComDayCqReplicationContentStaticContentBuilderInfo ComDayCqReplicationContentStaticContentBuilder(NancyContext context, bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, string host, int? port)
        {
            return ComDayCqReplicationContentStaticContentBuilder(post, apply, delete, action, location, propertylist, host, port);
        }

        public virtual ComDayCqReplicationImplAgentManagerImplInfo ComDayCqReplicationImplAgentManagerImpl(NancyContext context, bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, string jobTopics, string serviceUserTarget, string agentProviderTarget)
        {
            return ComDayCqReplicationImplAgentManagerImpl(post, apply, delete, action, location, propertylist, jobTopics, serviceUserTarget, agentProviderTarget);
        }

        public virtual ComDayCqReplicationImplContentDurboBinaryLessContentBuilderInfo ComDayCqReplicationImplContentDurboBinaryLessContentBuilder(NancyContext context, bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, int? binaryThreshold)
        {
            return ComDayCqReplicationImplContentDurboBinaryLessContentBuilder(post, apply, delete, action, location, propertylist, binaryThreshold);
        }

        public virtual ComDayCqReplicationImplContentDurboDurboImportConfigurationProvInfo ComDayCqReplicationImplContentDurboDurboImportConfigurationProv(NancyContext context, bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, bool? preserveHierarchyNodes, bool? ignoreVersioning, bool? importAcl, int? saveThreshold, bool? preserveUserPaths, bool? preserveUuid, List<string> preserveUuidNodetypes, List<string> preserveUuidSubtrees, bool? autoCommit)
        {
            return ComDayCqReplicationImplContentDurboDurboImportConfigurationProv(post, apply, delete, action, location, propertylist, preserveHierarchyNodes, ignoreVersioning, importAcl, saveThreshold, preserveUserPaths, preserveUuid, preserveUuidNodetypes, preserveUuidSubtrees, autoCommit);
        }

        public virtual ComDayCqReplicationImplReplicationContentFactoryProviderImplInfo ComDayCqReplicationImplReplicationContentFactoryProviderImpl(NancyContext context, bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, bool? replicationContentUseFileStorage, int? replicationContentMaxCommitAttempts)
        {
            return ComDayCqReplicationImplReplicationContentFactoryProviderImpl(post, apply, delete, action, location, propertylist, replicationContentUseFileStorage, replicationContentMaxCommitAttempts);
        }

        public virtual ComDayCqReplicationImplReplicationReceiverImplInfo ComDayCqReplicationImplReplicationReceiverImpl(NancyContext context, bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, int? receiverTmpfileThreshold, bool? receiverPackagesUseInstall)
        {
            return ComDayCqReplicationImplReplicationReceiverImpl(post, apply, delete, action, location, propertylist, receiverTmpfileThreshold, receiverPackagesUseInstall);
        }

        public virtual ComDayCqReplicationImplReplicatorImplInfo ComDayCqReplicationImplReplicatorImpl(NancyContext context, bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, bool? distributeEvents)
        {
            return ComDayCqReplicationImplReplicatorImpl(post, apply, delete, action, location, propertylist, distributeEvents);
        }

        public virtual ComDayCqReplicationImplReverseReplicatorInfo ComDayCqReplicationImplReverseReplicator(NancyContext context, bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, int? schedulerPeriod)
        {
            return ComDayCqReplicationImplReverseReplicator(post, apply, delete, action, location, propertylist, schedulerPeriod);
        }

        public virtual ComDayCqReplicationImplTransportBinaryLessTransportHandlerInfo ComDayCqReplicationImplTransportBinaryLessTransportHandler(NancyContext context, bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, List<string> disabledCipherSuites, List<string> enabledCipherSuites)
        {
            return ComDayCqReplicationImplTransportBinaryLessTransportHandler(post, apply, delete, action, location, propertylist, disabledCipherSuites, enabledCipherSuites);
        }

        public virtual ComDayCqReplicationImplTransportHttpInfo ComDayCqReplicationImplTransportHttp(NancyContext context, bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, List<string> disabledCipherSuites, List<string> enabledCipherSuites)
        {
            return ComDayCqReplicationImplTransportHttp(post, apply, delete, action, location, propertylist, disabledCipherSuites, enabledCipherSuites);
        }

        public virtual ComDayCqReportingImplCacheCacheImplInfo ComDayCqReportingImplCacheCacheImpl(NancyContext context, bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, bool? repcacheEnable, int? repcacheTtl, int? repcacheMax)
        {
            return ComDayCqReportingImplCacheCacheImpl(post, apply, delete, action, location, propertylist, repcacheEnable, repcacheTtl, repcacheMax);
        }

        public virtual ComDayCqReportingImplConfigServiceImplInfo ComDayCqReportingImplConfigServiceImpl(NancyContext context, bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, string repconfTimezone, string repconfLocale, string repconfSnapshots, string repconfRepdir, int? repconfHourofday, int? repconfMinofhour, int? repconfMaxrows, bool? repconfFakedata, string repconfSnapshotuser, bool? repconfEnforcesnapshotuser)
        {
            return ComDayCqReportingImplConfigServiceImpl(post, apply, delete, action, location, propertylist, repconfTimezone, repconfLocale, repconfSnapshots, repconfRepdir, repconfHourofday, repconfMinofhour, repconfMaxrows, repconfFakedata, repconfSnapshotuser, repconfEnforcesnapshotuser);
        }

        public virtual ComDayCqReportingImplRLogAnalyzerInfo ComDayCqReportingImplRLogAnalyzer(NancyContext context, bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, string requestLogOutput)
        {
            return ComDayCqReportingImplRLogAnalyzer(post, apply, delete, action, location, propertylist, requestLogOutput);
        }

        public virtual ComDayCqRewriterLinkcheckerImplLinkCheckerImplInfo ComDayCqRewriterLinkcheckerImplLinkCheckerImpl(NancyContext context, bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, int? schedulerPeriod, bool? schedulerConcurrent, int? serviceBadLinkToleranceInterval, List<string> serviceCheckOverridePatterns, bool? serviceCacheBrokenInternalLinks, List<string> serviceSpecialLinkPrefix, List<string> serviceSpecialLinkPatterns)
        {
            return ComDayCqRewriterLinkcheckerImplLinkCheckerImpl(post, apply, delete, action, location, propertylist, schedulerPeriod, schedulerConcurrent, serviceBadLinkToleranceInterval, serviceCheckOverridePatterns, serviceCacheBrokenInternalLinks, serviceSpecialLinkPrefix, serviceSpecialLinkPatterns);
        }

        public virtual ComDayCqRewriterLinkcheckerImplLinkCheckerTaskInfo ComDayCqRewriterLinkcheckerImplLinkCheckerTask(NancyContext context, bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, int? schedulerPeriod, bool? schedulerConcurrent, int? goodLinkTestInterval, int? badLinkTestInterval, int? linkUnusedInterval, int? connectionTimeout)
        {
            return ComDayCqRewriterLinkcheckerImplLinkCheckerTask(post, apply, delete, action, location, propertylist, schedulerPeriod, schedulerConcurrent, goodLinkTestInterval, badLinkTestInterval, linkUnusedInterval, connectionTimeout);
        }

        public virtual ComDayCqRewriterLinkcheckerImplLinkCheckerTransformerFactoryInfo ComDayCqRewriterLinkcheckerImplLinkCheckerTransformerFactory(NancyContext context, bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, bool? linkcheckertransformerDisableRewriting, bool? linkcheckertransformerDisableChecking, int? linkcheckertransformerMapCacheSize, bool? linkcheckertransformerStrictExtensionCheck, bool? linkcheckertransformerStripHtmltExtension, List<string> linkcheckertransformerRewriteElements, List<string> linkcheckertransformerStripExtensionPathBlacklist)
        {
            return ComDayCqRewriterLinkcheckerImplLinkCheckerTransformerFactory(post, apply, delete, action, location, propertylist, linkcheckertransformerDisableRewriting, linkcheckertransformerDisableChecking, linkcheckertransformerMapCacheSize, linkcheckertransformerStrictExtensionCheck, linkcheckertransformerStripHtmltExtension, linkcheckertransformerRewriteElements, linkcheckertransformerStripExtensionPathBlacklist);
        }

        public virtual ComDayCqRewriterLinkcheckerImplLinkInfoStorageImplInfo ComDayCqRewriterLinkcheckerImplLinkInfoStorageImpl(NancyContext context, bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, int? serviceMaxLinksPerHost, bool? serviceSaveExternalLinkReferences)
        {
            return ComDayCqRewriterLinkcheckerImplLinkInfoStorageImpl(post, apply, delete, action, location, propertylist, serviceMaxLinksPerHost, serviceSaveExternalLinkReferences);
        }

        public virtual ComDayCqRewriterProcessorImplHtmlParserFactoryInfo ComDayCqRewriterProcessorImplHtmlParserFactory(NancyContext context, bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, List<string> htmlparserProcessTags, bool? htmlparserPreserveCamelCase)
        {
            return ComDayCqRewriterProcessorImplHtmlParserFactory(post, apply, delete, action, location, propertylist, htmlparserProcessTags, htmlparserPreserveCamelCase);
        }

        public virtual ComDayCqSearchImplBuilderQueryBuilderImplInfo ComDayCqSearchImplBuilderQueryBuilderImpl(NancyContext context, bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, List<string> excerptProperties, int? cacheMaxEntries, int? cacheEntryLifetime, bool? xpathUnion)
        {
            return ComDayCqSearchImplBuilderQueryBuilderImpl(post, apply, delete, action, location, propertylist, excerptProperties, cacheMaxEntries, cacheEntryLifetime, xpathUnion);
        }

        public virtual ComDayCqSearchSuggestImplSuggestionIndexManagerImplInfo ComDayCqSearchSuggestImplSuggestionIndexManagerImpl(NancyContext context, bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, string pathBuilderTarget, string suggestBasepath)
        {
            return ComDayCqSearchSuggestImplSuggestionIndexManagerImpl(post, apply, delete, action, location, propertylist, pathBuilderTarget, suggestBasepath);
        }

        public virtual ComDayCqSearchpromoteImplPublishSearchPromoteConfigHandlerInfo ComDayCqSearchpromoteImplPublishSearchPromoteConfigHandler(NancyContext context, bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, bool? cqSearchpromoteConfighandlerEnabled)
        {
            return ComDayCqSearchpromoteImplPublishSearchPromoteConfigHandler(post, apply, delete, action, location, propertylist, cqSearchpromoteConfighandlerEnabled);
        }

        public virtual ComDayCqSearchpromoteImplSearchPromoteServiceImplInfo ComDayCqSearchpromoteImplSearchPromoteServiceImpl(NancyContext context, bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, string cqSearchpromoteConfigurationServerUri, string cqSearchpromoteConfigurationEnvironment, int? connectionTimeout, int? socketTimeout)
        {
            return ComDayCqSearchpromoteImplSearchPromoteServiceImpl(post, apply, delete, action, location, propertylist, cqSearchpromoteConfigurationServerUri, cqSearchpromoteConfigurationEnvironment, connectionTimeout, socketTimeout);
        }

        public virtual ComDayCqSecurityACLSetupInfo ComDayCqSecurityACLSetup(NancyContext context, bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, List<string> cqAclsetupRules)
        {
            return ComDayCqSecurityACLSetup(post, apply, delete, action, location, propertylist, cqAclsetupRules);
        }

        public virtual ComDayCqStatisticsImplStatisticsServiceImplInfo ComDayCqStatisticsImplStatisticsServiceImpl(NancyContext context, bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, int? schedulerPeriod, bool? schedulerConcurrent, string path, string workspace, string keywordsPath, bool? asyncEntries)
        {
            return ComDayCqStatisticsImplStatisticsServiceImpl(post, apply, delete, action, location, propertylist, schedulerPeriod, schedulerConcurrent, path, workspace, keywordsPath, asyncEntries);
        }

        public virtual ComDayCqTaggingImplJcrTagManagerFactoryImplInfo ComDayCqTaggingImplJcrTagManagerFactoryImpl(NancyContext context, bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, bool? validationEnabled)
        {
            return ComDayCqTaggingImplJcrTagManagerFactoryImpl(post, apply, delete, action, location, propertylist, validationEnabled);
        }

        public virtual ComDayCqTaggingImplSearchTagPredicateEvaluatorInfo ComDayCqTaggingImplSearchTagPredicateEvaluator(NancyContext context, bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, bool? ignorePath)
        {
            return ComDayCqTaggingImplSearchTagPredicateEvaluator(post, apply, delete, action, location, propertylist, ignorePath);
        }

        public virtual ComDayCqTaggingImplTagGarbageCollectorInfo ComDayCqTaggingImplTagGarbageCollector(NancyContext context, bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, string schedulerExpression)
        {
            return ComDayCqTaggingImplTagGarbageCollector(post, apply, delete, action, location, propertylist, schedulerExpression);
        }

        public virtual ComDayCqWcmContentsyncImplHandlerPagesUpdateHandlerInfo ComDayCqWcmContentsyncImplHandlerPagesUpdateHandler(NancyContext context, bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, List<string> cqPagesupdatehandlerImageresourcetypes)
        {
            return ComDayCqWcmContentsyncImplHandlerPagesUpdateHandler(post, apply, delete, action, location, propertylist, cqPagesupdatehandlerImageresourcetypes);
        }

        public virtual ComDayCqWcmContentsyncImplRewriterPathRewriterTransformerFactorInfo ComDayCqWcmContentsyncImplRewriterPathRewriterTransformerFactor(NancyContext context, bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, List<string> cqContentsyncPathrewritertransformerMappingLinks, List<string> cqContentsyncPathrewritertransformerMappingClientlibs, List<string> cqContentsyncPathrewritertransformerMappingImages, string cqContentsyncPathrewritertransformerAttributePattern, string cqContentsyncPathrewritertransformerClientlibraryPattern, string cqContentsyncPathrewritertransformerClientlibraryReplace)
        {
            return ComDayCqWcmContentsyncImplRewriterPathRewriterTransformerFactor(post, apply, delete, action, location, propertylist, cqContentsyncPathrewritertransformerMappingLinks, cqContentsyncPathrewritertransformerMappingClientlibs, cqContentsyncPathrewritertransformerMappingImages, cqContentsyncPathrewritertransformerAttributePattern, cqContentsyncPathrewritertransformerClientlibraryPattern, cqContentsyncPathrewritertransformerClientlibraryReplace);
        }

        public virtual ComDayCqWcmCoreImplAuthoringUIModeServiceImplInfo ComDayCqWcmCoreImplAuthoringUIModeServiceImpl(NancyContext context, bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, string authoringUIModeServiceDefault)
        {
            return ComDayCqWcmCoreImplAuthoringUIModeServiceImpl(post, apply, delete, action, location, propertylist, authoringUIModeServiceDefault);
        }

        public virtual ComDayCqWcmCoreImplCommandsWCMCommandServletInfo ComDayCqWcmCoreImplCommandsWCMCommandServlet(NancyContext context, bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, List<string> wcmcommandservletDeleteWhitelist)
        {
            return ComDayCqWcmCoreImplCommandsWCMCommandServlet(post, apply, delete, action, location, propertylist, wcmcommandservletDeleteWhitelist);
        }

        public virtual ComDayCqWcmCoreImplDevicedetectionDeviceIdentificationModeImplInfo ComDayCqWcmCoreImplDevicedetectionDeviceIdentificationModeImpl(NancyContext context, bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, string dimDefaultMode, bool? dimAppcacheEnabled)
        {
            return ComDayCqWcmCoreImplDevicedetectionDeviceIdentificationModeImpl(post, apply, delete, action, location, propertylist, dimDefaultMode, dimAppcacheEnabled);
        }

        public virtual ComDayCqWcmCoreImplEventPageEventAuditListenerInfo ComDayCqWcmCoreImplEventPageEventAuditListener(NancyContext context, bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, string configured)
        {
            return ComDayCqWcmCoreImplEventPageEventAuditListener(post, apply, delete, action, location, propertylist, configured);
        }

        public virtual ComDayCqWcmCoreImplEventPagePostProcessorInfo ComDayCqWcmCoreImplEventPagePostProcessor(NancyContext context, bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, List<string> paths)
        {
            return ComDayCqWcmCoreImplEventPagePostProcessor(post, apply, delete, action, location, propertylist, paths);
        }

        public virtual ComDayCqWcmCoreImplEventRepositoryChangeEventListenerInfo ComDayCqWcmCoreImplEventRepositoryChangeEventListener(NancyContext context, bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, List<string> paths, List<string> excludedPaths)
        {
            return ComDayCqWcmCoreImplEventRepositoryChangeEventListener(post, apply, delete, action, location, propertylist, paths, excludedPaths);
        }

        public virtual ComDayCqWcmCoreImplEventTemplatePostProcessorInfo ComDayCqWcmCoreImplEventTemplatePostProcessor(NancyContext context, bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, string paths)
        {
            return ComDayCqWcmCoreImplEventTemplatePostProcessor(post, apply, delete, action, location, propertylist, paths);
        }

        public virtual ComDayCqWcmCoreImplLanguageManagerImplInfo ComDayCqWcmCoreImplLanguageManagerImpl(NancyContext context, bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, string langmgrListPath, List<string> langmgrCountryDefault)
        {
            return ComDayCqWcmCoreImplLanguageManagerImpl(post, apply, delete, action, location, propertylist, langmgrListPath, langmgrCountryDefault);
        }

        public virtual ComDayCqWcmCoreImplLinkCheckerConfigurationFactoryImplInfo ComDayCqWcmCoreImplLinkCheckerConfigurationFactoryImpl(NancyContext context, bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, string linkExpiredPrefix, bool? linkExpiredRemove, string linkExpiredSuffix, string linkInvalidPrefix, bool? linkInvalidRemove, string linkInvalidSuffix, string linkPredatedPrefix, bool? linkPredatedRemove, string linkPredatedSuffix, List<string> linkWcmmodes)
        {
            return ComDayCqWcmCoreImplLinkCheckerConfigurationFactoryImpl(post, apply, delete, action, location, propertylist, linkExpiredPrefix, linkExpiredRemove, linkExpiredSuffix, linkInvalidPrefix, linkInvalidRemove, linkInvalidSuffix, linkPredatedPrefix, linkPredatedRemove, linkPredatedSuffix, linkWcmmodes);
        }

        public virtual ComDayCqWcmCoreImplPagePageInfoAggregatorImplInfo ComDayCqWcmCoreImplPagePageInfoAggregatorImpl(NancyContext context, bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, string pageInfoProviderPropertyRegexDefault, string pageInfoProviderPropertyName)
        {
            return ComDayCqWcmCoreImplPagePageInfoAggregatorImpl(post, apply, delete, action, location, propertylist, pageInfoProviderPropertyRegexDefault, pageInfoProviderPropertyName);
        }

        public virtual ComDayCqWcmCoreImplPagePageManagerFactoryImplInfo ComDayCqWcmCoreImplPagePageManagerFactoryImpl(NancyContext context, bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, string illegalCharMapping, bool? pageSubTreeActivationCheck)
        {
            return ComDayCqWcmCoreImplPagePageManagerFactoryImpl(post, apply, delete, action, location, propertylist, illegalCharMapping, pageSubTreeActivationCheck);
        }

        public virtual ComDayCqWcmCoreImplReferencesContentContentReferenceConfigInfo ComDayCqWcmCoreImplReferencesContentContentReferenceConfig(NancyContext context, bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, List<string> contentReferenceConfigResourceTypes)
        {
            return ComDayCqWcmCoreImplReferencesContentContentReferenceConfig(post, apply, delete, action, location, propertylist, contentReferenceConfigResourceTypes);
        }

        public virtual ComDayCqWcmCoreImplServletsContentfinderAssetViewHandlerInfo ComDayCqWcmCoreImplServletsContentfinderAssetViewHandler(NancyContext context, bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, bool? damShowexpired, bool? damShowhidden, bool? tagTitleSearch, string guessTotal, string damExpiryProperty)
        {
            return ComDayCqWcmCoreImplServletsContentfinderAssetViewHandler(post, apply, delete, action, location, propertylist, damShowexpired, damShowhidden, tagTitleSearch, guessTotal, damExpiryProperty);
        }

        public virtual ComDayCqWcmCoreImplServletsContentfinderConnectorConnectorVieInfo ComDayCqWcmCoreImplServletsContentfinderConnectorConnectorVie(NancyContext context, bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, List<string> itemResourceTypes)
        {
            return ComDayCqWcmCoreImplServletsContentfinderConnectorConnectorVie(post, apply, delete, action, location, propertylist, itemResourceTypes);
        }

        public virtual ComDayCqWcmCoreImplServletsContentfinderPageViewHandlerInfo ComDayCqWcmCoreImplServletsContentfinderPageViewHandler(NancyContext context, bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, string guessTotal, bool? tagTitleSearch)
        {
            return ComDayCqWcmCoreImplServletsContentfinderPageViewHandler(post, apply, delete, action, location, propertylist, guessTotal, tagTitleSearch);
        }

        public virtual ComDayCqWcmCoreImplServletsFindReplaceServletInfo ComDayCqWcmCoreImplServletsFindReplaceServlet(NancyContext context, bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, List<string> scope)
        {
            return ComDayCqWcmCoreImplServletsFindReplaceServlet(post, apply, delete, action, location, propertylist, scope);
        }

        public virtual ComDayCqWcmCoreImplServletsReferenceSearchServletInfo ComDayCqWcmCoreImplServletsReferenceSearchServlet(NancyContext context, bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, int? referencesearchservletMaxReferencesPerPage, int? referencesearchservletMaxPages)
        {
            return ComDayCqWcmCoreImplServletsReferenceSearchServlet(post, apply, delete, action, location, propertylist, referencesearchservletMaxReferencesPerPage, referencesearchservletMaxPages);
        }

        public virtual ComDayCqWcmCoreImplServletsThumbnailServletInfo ComDayCqWcmCoreImplServletsThumbnailServlet(NancyContext context, bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, string workspace, List<string> dimensions)
        {
            return ComDayCqWcmCoreImplServletsThumbnailServlet(post, apply, delete, action, location, propertylist, workspace, dimensions);
        }

        public virtual ComDayCqWcmCoreImplUtilsDefaultPageNameValidatorInfo ComDayCqWcmCoreImplUtilsDefaultPageNameValidator(NancyContext context, bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, string nonValidChars)
        {
            return ComDayCqWcmCoreImplUtilsDefaultPageNameValidator(post, apply, delete, action, location, propertylist, nonValidChars);
        }

        public virtual ComDayCqWcmCoreImplVariantsPageVariantsProviderImplInfo ComDayCqWcmCoreImplVariantsPageVariantsProviderImpl(NancyContext context, bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, string defaultExternalizerDomain)
        {
            return ComDayCqWcmCoreImplVariantsPageVariantsProviderImpl(post, apply, delete, action, location, propertylist, defaultExternalizerDomain);
        }

        public virtual ComDayCqWcmCoreImplVersionManagerImplInfo ComDayCqWcmCoreImplVersionManagerImpl(NancyContext context, bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, bool? versionmanagerCreateVersionOnActivation, bool? versionmanagerPurgingEnabled, List<string> versionmanagerPurgePaths, List<string> versionmanagerIvPaths, int? versionmanagerMaxAgeDays, int? versionmanagerMaxNumberVersions, int? versionmanagerMinNumberVersions)
        {
            return ComDayCqWcmCoreImplVersionManagerImpl(post, apply, delete, action, location, propertylist, versionmanagerCreateVersionOnActivation, versionmanagerPurgingEnabled, versionmanagerPurgePaths, versionmanagerIvPaths, versionmanagerMaxAgeDays, versionmanagerMaxNumberVersions, versionmanagerMinNumberVersions);
        }

        public virtual ComDayCqWcmCoreImplVersionPurgeTaskInfo ComDayCqWcmCoreImplVersionPurgeTask(NancyContext context, bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, List<string> versionpurgePaths, bool? versionpurgeRecursive, int? versionpurgeMaxVersions, int? versionpurgeMinVersions, int? versionpurgeMaxAgeDays)
        {
            return ComDayCqWcmCoreImplVersionPurgeTask(post, apply, delete, action, location, propertylist, versionpurgePaths, versionpurgeRecursive, versionpurgeMaxVersions, versionpurgeMinVersions, versionpurgeMaxAgeDays);
        }

        public virtual ComDayCqWcmCoreImplWCMDebugFilterInfo ComDayCqWcmCoreImplWCMDebugFilter(NancyContext context, bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, bool? wcmdbgfilterEnabled, bool? wcmdbgfilterJspDebug)
        {
            return ComDayCqWcmCoreImplWCMDebugFilter(post, apply, delete, action, location, propertylist, wcmdbgfilterEnabled, wcmdbgfilterJspDebug);
        }

        public virtual ComDayCqWcmCoreImplWCMDeveloperModeFilterInfo ComDayCqWcmCoreImplWCMDeveloperModeFilter(NancyContext context, bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, bool? wcmdevmodefilterEnabled)
        {
            return ComDayCqWcmCoreImplWCMDeveloperModeFilter(post, apply, delete, action, location, propertylist, wcmdevmodefilterEnabled);
        }

        public virtual ComDayCqWcmCoreImplWarpTimeWarpFilterInfo ComDayCqWcmCoreImplWarpTimeWarpFilter(NancyContext context, bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, string filterOrder, string filterScope)
        {
            return ComDayCqWcmCoreImplWarpTimeWarpFilter(post, apply, delete, action, location, propertylist, filterOrder, filterScope);
        }

        public virtual ComDayCqWcmCoreMvtMVTStatisticsImplInfo ComDayCqWcmCoreMvtMVTStatisticsImpl(NancyContext context, bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, string mvtstatisticsTrackingurl)
        {
            return ComDayCqWcmCoreMvtMVTStatisticsImpl(post, apply, delete, action, location, propertylist, mvtstatisticsTrackingurl);
        }

        public virtual ComDayCqWcmCoreStatsPageViewStatisticsImplInfo ComDayCqWcmCoreStatsPageViewStatisticsImpl(NancyContext context, bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, string pageviewstatisticsTrackingurl, string pageviewstatisticsTrackingscriptEnabled)
        {
            return ComDayCqWcmCoreStatsPageViewStatisticsImpl(post, apply, delete, action, location, propertylist, pageviewstatisticsTrackingurl, pageviewstatisticsTrackingscriptEnabled);
        }

        public virtual ComDayCqWcmCoreWCMRequestFilterInfo ComDayCqWcmCoreWCMRequestFilter(NancyContext context, bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, string wcmfilterMode)
        {
            return ComDayCqWcmCoreWCMRequestFilter(post, apply, delete, action, location, propertylist, wcmfilterMode);
        }

        public virtual ComDayCqWcmDesignimporterDesignPackageImporterInfo ComDayCqWcmDesignimporterDesignPackageImporter(NancyContext context, bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, List<string> extractFilter)
        {
            return ComDayCqWcmDesignimporterDesignPackageImporter(post, apply, delete, action, location, propertylist, extractFilter);
        }

        public virtual ComDayCqWcmDesignimporterImplCanvasBuilderImplInfo ComDayCqWcmDesignimporterImplCanvasBuilderImpl(NancyContext context, bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, string filepattern, bool? buildPageNodes, bool? buildClientLibs, bool? buildCanvasComponent)
        {
            return ComDayCqWcmDesignimporterImplCanvasBuilderImpl(post, apply, delete, action, location, propertylist, filepattern, buildPageNodes, buildClientLibs, buildCanvasComponent);
        }

        public virtual ComDayCqWcmDesignimporterImplCanvasPageDeleteHandlerInfo ComDayCqWcmDesignimporterImplCanvasPageDeleteHandler(NancyContext context, bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, int? minThreadPoolSize, int? maxThreadPoolSize)
        {
            return ComDayCqWcmDesignimporterImplCanvasPageDeleteHandler(post, apply, delete, action, location, propertylist, minThreadPoolSize, maxThreadPoolSize);
        }

        public virtual ComDayCqWcmDesignimporterImplEntryPreprocessorImplInfo ComDayCqWcmDesignimporterImplEntryPreprocessorImpl(NancyContext context, bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, string searchPattern, string replacePattern)
        {
            return ComDayCqWcmDesignimporterImplEntryPreprocessorImpl(post, apply, delete, action, location, propertylist, searchPattern, replacePattern);
        }

        public virtual ComDayCqWcmDesignimporterImplMobileCanvasBuilderImplInfo ComDayCqWcmDesignimporterImplMobileCanvasBuilderImpl(NancyContext context, bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, string filepattern, List<string> deviceGroups, bool? buildPageNodes, bool? buildClientLibs, bool? buildCanvasComponent)
        {
            return ComDayCqWcmDesignimporterImplMobileCanvasBuilderImpl(post, apply, delete, action, location, propertylist, filepattern, deviceGroups, buildPageNodes, buildClientLibs, buildCanvasComponent);
        }

        public virtual ComDayCqWcmDesignimporterParserTaghandlersFactoryCanvasComponeInfo ComDayCqWcmDesignimporterParserTaghandlersFactoryCanvasCompone(NancyContext context, bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, int? serviceRanking, string tagpattern)
        {
            return ComDayCqWcmDesignimporterParserTaghandlersFactoryCanvasCompone(post, apply, delete, action, location, propertylist, serviceRanking, tagpattern);
        }

        public virtual ComDayCqWcmDesignimporterParserTaghandlersFactoryDefaultComponInfo ComDayCqWcmDesignimporterParserTaghandlersFactoryDefaultCompon(NancyContext context, bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, int? serviceRanking, string tagpattern)
        {
            return ComDayCqWcmDesignimporterParserTaghandlersFactoryDefaultCompon(post, apply, delete, action, location, propertylist, serviceRanking, tagpattern);
        }

        public virtual ComDayCqWcmDesignimporterParserTaghandlersFactoryDefaultTagHanInfo ComDayCqWcmDesignimporterParserTaghandlersFactoryDefaultTagHan(NancyContext context, bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, int? serviceRanking, string tagpattern)
        {
            return ComDayCqWcmDesignimporterParserTaghandlersFactoryDefaultTagHan(post, apply, delete, action, location, propertylist, serviceRanking, tagpattern);
        }

        public virtual ComDayCqWcmDesignimporterParserTaghandlersFactoryHeadTagHandleInfo ComDayCqWcmDesignimporterParserTaghandlersFactoryHeadTagHandle(NancyContext context, bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, int? serviceRanking, string tagpattern)
        {
            return ComDayCqWcmDesignimporterParserTaghandlersFactoryHeadTagHandle(post, apply, delete, action, location, propertylist, serviceRanking, tagpattern);
        }

        public virtual ComDayCqWcmDesignimporterParserTaghandlersFactoryIFrameTagHandInfo ComDayCqWcmDesignimporterParserTaghandlersFactoryIFrameTagHand(NancyContext context, bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, int? serviceRanking, string tagpattern)
        {
            return ComDayCqWcmDesignimporterParserTaghandlersFactoryIFrameTagHand(post, apply, delete, action, location, propertylist, serviceRanking, tagpattern);
        }

        public virtual ComDayCqWcmDesignimporterParserTaghandlersFactoryImageComponenInfo ComDayCqWcmDesignimporterParserTaghandlersFactoryImageComponen(NancyContext context, bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, int? serviceRanking, string tagpattern, string componentResourceType)
        {
            return ComDayCqWcmDesignimporterParserTaghandlersFactoryImageComponen(post, apply, delete, action, location, propertylist, serviceRanking, tagpattern, componentResourceType);
        }

        public virtual ComDayCqWcmDesignimporterParserTaghandlersFactoryImgTagHandlerInfo ComDayCqWcmDesignimporterParserTaghandlersFactoryImgTagHandler(NancyContext context, bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, int? serviceRanking, string tagpattern)
        {
            return ComDayCqWcmDesignimporterParserTaghandlersFactoryImgTagHandler(post, apply, delete, action, location, propertylist, serviceRanking, tagpattern);
        }

        public virtual ComDayCqWcmDesignimporterParserTaghandlersFactoryInlineScriptTInfo ComDayCqWcmDesignimporterParserTaghandlersFactoryInlineScriptT(NancyContext context, bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, int? serviceRanking, string tagpattern)
        {
            return ComDayCqWcmDesignimporterParserTaghandlersFactoryInlineScriptT(post, apply, delete, action, location, propertylist, serviceRanking, tagpattern);
        }

        public virtual ComDayCqWcmDesignimporterParserTaghandlersFactoryLinkTagHandleInfo ComDayCqWcmDesignimporterParserTaghandlersFactoryLinkTagHandle(NancyContext context, bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, int? serviceRanking, string tagpattern)
        {
            return ComDayCqWcmDesignimporterParserTaghandlersFactoryLinkTagHandle(post, apply, delete, action, location, propertylist, serviceRanking, tagpattern);
        }

        public virtual ComDayCqWcmDesignimporterParserTaghandlersFactoryMetaTagHandleInfo ComDayCqWcmDesignimporterParserTaghandlersFactoryMetaTagHandle(NancyContext context, bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, int? serviceRanking, string tagpattern)
        {
            return ComDayCqWcmDesignimporterParserTaghandlersFactoryMetaTagHandle(post, apply, delete, action, location, propertylist, serviceRanking, tagpattern);
        }

        public virtual ComDayCqWcmDesignimporterParserTaghandlersFactoryNonScriptTagHInfo ComDayCqWcmDesignimporterParserTaghandlersFactoryNonScriptTagH(NancyContext context, bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, int? serviceRanking, string tagpattern)
        {
            return ComDayCqWcmDesignimporterParserTaghandlersFactoryNonScriptTagH(post, apply, delete, action, location, propertylist, serviceRanking, tagpattern);
        }

        public virtual ComDayCqWcmDesignimporterParserTaghandlersFactoryParsysComponeInfo ComDayCqWcmDesignimporterParserTaghandlersFactoryParsysCompone(NancyContext context, bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, int? serviceRanking, string tagpattern, string componentResourceType)
        {
            return ComDayCqWcmDesignimporterParserTaghandlersFactoryParsysCompone(post, apply, delete, action, location, propertylist, serviceRanking, tagpattern, componentResourceType);
        }

        public virtual ComDayCqWcmDesignimporterParserTaghandlersFactoryScriptTagHandInfo ComDayCqWcmDesignimporterParserTaghandlersFactoryScriptTagHand(NancyContext context, bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, int? serviceRanking, string tagpattern)
        {
            return ComDayCqWcmDesignimporterParserTaghandlersFactoryScriptTagHand(post, apply, delete, action, location, propertylist, serviceRanking, tagpattern);
        }

        public virtual ComDayCqWcmDesignimporterParserTaghandlersFactoryStyleTagHandlInfo ComDayCqWcmDesignimporterParserTaghandlersFactoryStyleTagHandl(NancyContext context, bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, int? serviceRanking, string tagpattern)
        {
            return ComDayCqWcmDesignimporterParserTaghandlersFactoryStyleTagHandl(post, apply, delete, action, location, propertylist, serviceRanking, tagpattern);
        }

        public virtual ComDayCqWcmDesignimporterParserTaghandlersFactoryTextComponentInfo ComDayCqWcmDesignimporterParserTaghandlersFactoryTextComponent(NancyContext context, bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, int? serviceRanking, string tagpattern, string componentResourceType)
        {
            return ComDayCqWcmDesignimporterParserTaghandlersFactoryTextComponent(post, apply, delete, action, location, propertylist, serviceRanking, tagpattern, componentResourceType);
        }

        public virtual ComDayCqWcmDesignimporterParserTaghandlersFactoryTitleComponenInfo ComDayCqWcmDesignimporterParserTaghandlersFactoryTitleComponen(NancyContext context, bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, int? serviceRanking, string tagpattern, string componentResourceType)
        {
            return ComDayCqWcmDesignimporterParserTaghandlersFactoryTitleComponen(post, apply, delete, action, location, propertylist, serviceRanking, tagpattern, componentResourceType);
        }

        public virtual ComDayCqWcmDesignimporterParserTaghandlersFactoryTitleTagHandlInfo ComDayCqWcmDesignimporterParserTaghandlersFactoryTitleTagHandl(NancyContext context, bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, int? serviceRanking, string tagpattern)
        {
            return ComDayCqWcmDesignimporterParserTaghandlersFactoryTitleTagHandl(post, apply, delete, action, location, propertylist, serviceRanking, tagpattern);
        }

        public virtual ComDayCqWcmFoundationFormsImplFormChooserServletInfo ComDayCqWcmFoundationFormsImplFormChooserServlet(NancyContext context, bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, string serviceName, string slingServletResourceTypes, string slingServletSelectors, List<string> slingServletMethods, bool? formsFormchooserservletAdvansesearchRequire)
        {
            return ComDayCqWcmFoundationFormsImplFormChooserServlet(post, apply, delete, action, location, propertylist, serviceName, slingServletResourceTypes, slingServletSelectors, slingServletMethods, formsFormchooserservletAdvansesearchRequire);
        }

        public virtual ComDayCqWcmFoundationFormsImplFormParagraphPostProcessorInfo ComDayCqWcmFoundationFormsImplFormParagraphPostProcessor(NancyContext context, bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, bool? formsFormparagraphpostprocessorEnabled, List<string> formsFormparagraphpostprocessorFormresourcetypes)
        {
            return ComDayCqWcmFoundationFormsImplFormParagraphPostProcessor(post, apply, delete, action, location, propertylist, formsFormparagraphpostprocessorEnabled, formsFormparagraphpostprocessorFormresourcetypes);
        }

        public virtual ComDayCqWcmFoundationFormsImplFormsHandlingServletInfo ComDayCqWcmFoundationFormsImplFormsHandlingServlet(NancyContext context, bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, string nameWhitelist, bool? allowExpressions)
        {
            return ComDayCqWcmFoundationFormsImplFormsHandlingServlet(post, apply, delete, action, location, propertylist, nameWhitelist, allowExpressions);
        }

        public virtual ComDayCqWcmFoundationFormsImplMailServletInfo ComDayCqWcmFoundationFormsImplMailServlet(NancyContext context, bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, string slingServletResourceTypes, string slingServletSelectors, List<string> resourceWhitelist, string resourceBlacklist)
        {
            return ComDayCqWcmFoundationFormsImplMailServlet(post, apply, delete, action, location, propertylist, slingServletResourceTypes, slingServletSelectors, resourceWhitelist, resourceBlacklist);
        }

        public virtual ComDayCqWcmFoundationImplAdaptiveImageComponentServletInfo ComDayCqWcmFoundationImplAdaptiveImageComponentServlet(NancyContext context, bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, List<string> adaptSupportedWidths)
        {
            return ComDayCqWcmFoundationImplAdaptiveImageComponentServlet(post, apply, delete, action, location, propertylist, adaptSupportedWidths);
        }

        public virtual ComDayCqWcmFoundationImplHTTPAuthHandlerInfo ComDayCqWcmFoundationImplHTTPAuthHandler(NancyContext context, bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, string path, bool? authHttpNologin, string authHttpRealm, string authDefaultLoginpage, List<string> authCredForm, List<string> authCredUtf8)
        {
            return ComDayCqWcmFoundationImplHTTPAuthHandler(post, apply, delete, action, location, propertylist, path, authHttpNologin, authHttpRealm, authDefaultLoginpage, authCredForm, authCredUtf8);
        }

        public virtual ComDayCqWcmFoundationImplPageImpressionsTrackerInfo ComDayCqWcmFoundationImplPageImpressionsTracker(NancyContext context, bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, string slingAuthRequirements)
        {
            return ComDayCqWcmFoundationImplPageImpressionsTracker(post, apply, delete, action, location, propertylist, slingAuthRequirements);
        }

        public virtual ComDayCqWcmFoundationImplPageRedirectServletInfo ComDayCqWcmFoundationImplPageRedirectServlet(NancyContext context, bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, List<string> excludedResourceTypes)
        {
            return ComDayCqWcmFoundationImplPageRedirectServlet(post, apply, delete, action, location, propertylist, excludedResourceTypes);
        }

        public virtual ComDayCqWcmFoundationSecurityImplDefaultAttachmentTypeBlacklistInfo ComDayCqWcmFoundationSecurityImplDefaultAttachmentTypeBlacklist(NancyContext context, bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, List<string> defaultAttachmentTypeBlacklist, List<string> baselineAttachmentTypeBlacklist)
        {
            return ComDayCqWcmFoundationSecurityImplDefaultAttachmentTypeBlacklist(post, apply, delete, action, location, propertylist, defaultAttachmentTypeBlacklist, baselineAttachmentTypeBlacklist);
        }

        public virtual ComDayCqWcmFoundationSecurityImplSaferSlingPostValidatorImplInfo ComDayCqWcmFoundationSecurityImplSaferSlingPostValidatorImpl(NancyContext context, bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, List<string> parameterWhitelist, List<string> parameterWhitelistPrefixes, List<string> binaryParameterWhitelist, List<string> modifierWhitelist, List<string> operationWhitelist, List<string> operationWhitelistPrefixes, List<string> typehintWhitelist, List<string> resourcetypeWhitelist)
        {
            return ComDayCqWcmFoundationSecurityImplSaferSlingPostValidatorImpl(post, apply, delete, action, location, propertylist, parameterWhitelist, parameterWhitelistPrefixes, binaryParameterWhitelist, modifierWhitelist, operationWhitelist, operationWhitelistPrefixes, typehintWhitelist, resourcetypeWhitelist);
        }

        public virtual ComDayCqWcmMobileCoreImplDeviceDeviceInfoTransformerFactoryInfo ComDayCqWcmMobileCoreImplDeviceDeviceInfoTransformerFactory(NancyContext context, bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, bool? deviceInfoTransformerEnabled, string deviceInfoTransformerCssStyle)
        {
            return ComDayCqWcmMobileCoreImplDeviceDeviceInfoTransformerFactory(post, apply, delete, action, location, propertylist, deviceInfoTransformerEnabled, deviceInfoTransformerCssStyle);
        }

        public virtual ComDayCqWcmMobileCoreImplRedirectRedirectFilterInfo ComDayCqWcmMobileCoreImplRedirectRedirectFilter(NancyContext context, bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, bool? redirectEnabled, bool? redirectStatsEnabled, List<string> redirectExtensions, List<string> redirectPaths)
        {
            return ComDayCqWcmMobileCoreImplRedirectRedirectFilter(post, apply, delete, action, location, propertylist, redirectEnabled, redirectStatsEnabled, redirectExtensions, redirectPaths);
        }

        public virtual ComDayCqWcmMsmImplActionsContentCopyActionFactoryInfo ComDayCqWcmMsmImplActionsContentCopyActionFactory(NancyContext context, bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, List<string> cqWcmMsmActionExcludednodetypes, List<string> cqWcmMsmActionExcludedparagraphitems, List<string> cqWcmMsmActionExcludedprops, string contentcopyactionOrderStyle)
        {
            return ComDayCqWcmMsmImplActionsContentCopyActionFactory(post, apply, delete, action, location, propertylist, cqWcmMsmActionExcludednodetypes, cqWcmMsmActionExcludedparagraphitems, cqWcmMsmActionExcludedprops, contentcopyactionOrderStyle);
        }

        public virtual ComDayCqWcmMsmImplActionsContentDeleteActionFactoryInfo ComDayCqWcmMsmImplActionsContentDeleteActionFactory(NancyContext context, bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, List<string> cqWcmMsmActionExcludednodetypes, List<string> cqWcmMsmActionExcludedparagraphitems, List<string> cqWcmMsmActionExcludedprops)
        {
            return ComDayCqWcmMsmImplActionsContentDeleteActionFactory(post, apply, delete, action, location, propertylist, cqWcmMsmActionExcludednodetypes, cqWcmMsmActionExcludedparagraphitems, cqWcmMsmActionExcludedprops);
        }

        public virtual ComDayCqWcmMsmImplActionsContentUpdateActionFactoryInfo ComDayCqWcmMsmImplActionsContentUpdateActionFactory(NancyContext context, bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, List<string> cqWcmMsmActionExcludednodetypes, List<string> cqWcmMsmActionExcludedparagraphitems, List<string> cqWcmMsmActionExcludedprops, List<string> cqWcmMsmActionIgnoredMixin)
        {
            return ComDayCqWcmMsmImplActionsContentUpdateActionFactory(post, apply, delete, action, location, propertylist, cqWcmMsmActionExcludednodetypes, cqWcmMsmActionExcludedparagraphitems, cqWcmMsmActionExcludedprops, cqWcmMsmActionIgnoredMixin);
        }

        public virtual ComDayCqWcmMsmImplActionsOrderChildrenActionFactoryInfo ComDayCqWcmMsmImplActionsOrderChildrenActionFactory(NancyContext context, bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, List<string> cqWcmMsmActionExcludednodetypes, List<string> cqWcmMsmActionExcludedparagraphitems, List<string> cqWcmMsmActionExcludedprops)
        {
            return ComDayCqWcmMsmImplActionsOrderChildrenActionFactory(post, apply, delete, action, location, propertylist, cqWcmMsmActionExcludednodetypes, cqWcmMsmActionExcludedparagraphitems, cqWcmMsmActionExcludedprops);
        }

        public virtual ComDayCqWcmMsmImplActionsPageMoveActionFactoryInfo ComDayCqWcmMsmImplActionsPageMoveActionFactory(NancyContext context, bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, List<string> cqWcmMsmActionExcludednodetypes, List<string> cqWcmMsmActionExcludedparagraphitems, List<string> cqWcmMsmActionExcludedprops, bool? cqWcmMsmImplActionsPagemovePropReferenceUpdate)
        {
            return ComDayCqWcmMsmImplActionsPageMoveActionFactory(post, apply, delete, action, location, propertylist, cqWcmMsmActionExcludednodetypes, cqWcmMsmActionExcludedparagraphitems, cqWcmMsmActionExcludedprops, cqWcmMsmImplActionsPagemovePropReferenceUpdate);
        }

        public virtual ComDayCqWcmMsmImplActionsReferencesUpdateActionFactoryInfo ComDayCqWcmMsmImplActionsReferencesUpdateActionFactory(NancyContext context, bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, List<string> cqWcmMsmActionExcludednodetypes, List<string> cqWcmMsmActionExcludedparagraphitems, List<string> cqWcmMsmActionExcludedprops, bool? cqWcmMsmImplActionReferencesupdatePropUpdateNested)
        {
            return ComDayCqWcmMsmImplActionsReferencesUpdateActionFactory(post, apply, delete, action, location, propertylist, cqWcmMsmActionExcludednodetypes, cqWcmMsmActionExcludedparagraphitems, cqWcmMsmActionExcludedprops, cqWcmMsmImplActionReferencesupdatePropUpdateNested);
        }

        public virtual ComDayCqWcmMsmImplActionsVersionCopyActionFactoryInfo ComDayCqWcmMsmImplActionsVersionCopyActionFactory(NancyContext context, bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, List<string> cqWcmMsmActionExcludednodetypes, List<string> cqWcmMsmActionExcludedparagraphitems, List<string> cqWcmMsmActionExcludedprops)
        {
            return ComDayCqWcmMsmImplActionsVersionCopyActionFactory(post, apply, delete, action, location, propertylist, cqWcmMsmActionExcludednodetypes, cqWcmMsmActionExcludedparagraphitems, cqWcmMsmActionExcludedprops);
        }

        public virtual ComDayCqWcmMsmImplLiveRelationshipManagerImplInfo ComDayCqWcmMsmImplLiveRelationshipManagerImpl(NancyContext context, bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, string liverelationshipmgrRelationsconfigDefault)
        {
            return ComDayCqWcmMsmImplLiveRelationshipManagerImpl(post, apply, delete, action, location, propertylist, liverelationshipmgrRelationsconfigDefault);
        }

        public virtual ComDayCqWcmMsmImplRolloutManagerImplInfo ComDayCqWcmMsmImplRolloutManagerImpl(NancyContext context, bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, string eventFilter, List<string> rolloutmgrExcludedpropsDefault, List<string> rolloutmgrExcludedparagraphpropsDefault, List<string> rolloutmgrExcludednodetypesDefault, int? rolloutmgrThreadpoolMaxsize, int? rolloutmgrThreadpoolMaxshutdowntime, string rolloutmgrThreadpoolPriority, int? rolloutmgrCommitSize, bool? rolloutmgrConflicthandlingEnabled)
        {
            return ComDayCqWcmMsmImplRolloutManagerImpl(post, apply, delete, action, location, propertylist, eventFilter, rolloutmgrExcludedpropsDefault, rolloutmgrExcludedparagraphpropsDefault, rolloutmgrExcludednodetypesDefault, rolloutmgrThreadpoolMaxsize, rolloutmgrThreadpoolMaxshutdowntime, rolloutmgrThreadpoolPriority, rolloutmgrCommitSize, rolloutmgrConflicthandlingEnabled);
        }

        public virtual ComDayCqWcmMsmImplServletsAuditLogServletInfo ComDayCqWcmMsmImplServletsAuditLogServlet(NancyContext context, bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, int? auditlogservletDefaultEventsCount, string auditlogservletDefaultPath)
        {
            return ComDayCqWcmMsmImplServletsAuditLogServlet(post, apply, delete, action, location, propertylist, auditlogservletDefaultEventsCount, auditlogservletDefaultPath);
        }

        public virtual ComDayCqWcmNotificationEmailImplEmailChannelInfo ComDayCqWcmNotificationEmailImplEmailChannel(NancyContext context, bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, string emailFrom)
        {
            return ComDayCqWcmNotificationEmailImplEmailChannel(post, apply, delete, action, location, propertylist, emailFrom);
        }

        public virtual ComDayCqWcmNotificationImplNotificationManagerImplInfo ComDayCqWcmNotificationImplNotificationManagerImpl(NancyContext context, bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, List<string> eventTopics)
        {
            return ComDayCqWcmNotificationImplNotificationManagerImpl(post, apply, delete, action, location, propertylist, eventTopics);
        }

        public virtual ComDayCqWcmScriptingImplBVPManagerInfo ComDayCqWcmScriptingImplBVPManager(NancyContext context, bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, List<string> comDayCqWcmScriptingBvpScriptEngines)
        {
            return ComDayCqWcmScriptingImplBVPManager(post, apply, delete, action, location, propertylist, comDayCqWcmScriptingBvpScriptEngines);
        }

        public virtual ComDayCqWcmUndoUndoConfigInfo ComDayCqWcmUndoUndoConfig(NancyContext context, bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, bool? cqWcmUndoEnabled, string cqWcmUndoPath, int? cqWcmUndoValidity, int? cqWcmUndoSteps, string cqWcmUndoPersistence, bool? cqWcmUndoPersistenceMode, string cqWcmUndoMarkermode, List<string> cqWcmUndoWhitelist, List<string> cqWcmUndoBlacklist)
        {
            return ComDayCqWcmUndoUndoConfig(post, apply, delete, action, location, propertylist, cqWcmUndoEnabled, cqWcmUndoPath, cqWcmUndoValidity, cqWcmUndoSteps, cqWcmUndoPersistence, cqWcmUndoPersistenceMode, cqWcmUndoMarkermode, cqWcmUndoWhitelist, cqWcmUndoBlacklist);
        }

        public virtual ComDayCqWcmWebservicesupportImplReplicationEventListenerInfo ComDayCqWcmWebservicesupportImplReplicationEventListener(NancyContext context, bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, List<string> flushAgents)
        {
            return ComDayCqWcmWebservicesupportImplReplicationEventListener(post, apply, delete, action, location, propertylist, flushAgents);
        }

        public virtual ComDayCqWcmWorkflowImplWcmWorkflowServiceImplInfo ComDayCqWcmWorkflowImplWcmWorkflowServiceImpl(NancyContext context, bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, string eventFilter, int? minThreadPoolSize, int? maxThreadPoolSize, bool? cqWcmWorkflowTerminateOnActivate, List<string> cqWcmWorklfowTerminateExclusionList)
        {
            return ComDayCqWcmWorkflowImplWcmWorkflowServiceImpl(post, apply, delete, action, location, propertylist, eventFilter, minThreadPoolSize, maxThreadPoolSize, cqWcmWorkflowTerminateOnActivate, cqWcmWorklfowTerminateExclusionList);
        }

        public virtual ComDayCqWcmWorkflowImplWorkflowPackageInfoProviderInfo ComDayCqWcmWorkflowImplWorkflowPackageInfoProvider(NancyContext context, bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, List<string> workflowpackageinfoproviderFilter, string workflowpackageinfoproviderFilterRootpath)
        {
            return ComDayCqWcmWorkflowImplWorkflowPackageInfoProvider(post, apply, delete, action, location, propertylist, workflowpackageinfoproviderFilter, workflowpackageinfoproviderFilterRootpath);
        }

        public virtual ComDayCqWidgetImplHtmlLibraryManagerImplInfo ComDayCqWidgetImplHtmlLibraryManagerImpl(NancyContext context, bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, string htmllibmanagerClientmanager, bool? htmllibmanagerDebug, bool? htmllibmanagerDebugConsole, string htmllibmanagerDebugInitJs, string htmllibmanagerDefaultthemename, string htmllibmanagerDefaultuserthemename, string htmllibmanagerFirebuglitePath, bool? htmllibmanagerForceCQUrlInfo, bool? htmllibmanagerGzip, int? htmllibmanagerMaxage, int? htmllibmanagerMaxDataUriSize, bool? htmllibmanagerMinify, List<string> htmllibmanagerPathList, bool? htmllibmanagerTiming)
        {
            return ComDayCqWidgetImplHtmlLibraryManagerImpl(post, apply, delete, action, location, propertylist, htmllibmanagerClientmanager, htmllibmanagerDebug, htmllibmanagerDebugConsole, htmllibmanagerDebugInitJs, htmllibmanagerDefaultthemename, htmllibmanagerDefaultuserthemename, htmllibmanagerFirebuglitePath, htmllibmanagerForceCQUrlInfo, htmllibmanagerGzip, htmllibmanagerMaxage, htmllibmanagerMaxDataUriSize, htmllibmanagerMinify, htmllibmanagerPathList, htmllibmanagerTiming);
        }

        public virtual ComDayCqWidgetImplWidgetExtensionProviderImplInfo ComDayCqWidgetImplWidgetExtensionProviderImpl(NancyContext context, bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, List<string> extendableWidgets, bool? widgetextensionproviderDebug)
        {
            return ComDayCqWidgetImplWidgetExtensionProviderImpl(post, apply, delete, action, location, propertylist, extendableWidgets, widgetextensionproviderDebug);
        }

        public virtual ComDayCqWorkflowImplEmailEMailNotificationServiceInfo ComDayCqWorkflowImplEmailEMailNotificationService(NancyContext context, bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, string fromAddress, string hostPrefix, bool? notifyOnabort, bool? notifyOncomplete, bool? notifyOncontainercomplete, bool? notifyUseronly)
        {
            return ComDayCqWorkflowImplEmailEMailNotificationService(post, apply, delete, action, location, propertylist, fromAddress, hostPrefix, notifyOnabort, notifyOncomplete, notifyOncontainercomplete, notifyUseronly);
        }

        public virtual ComDayCqWorkflowImplEmailTaskEMailNotificationServiceInfo ComDayCqWorkflowImplEmailTaskEMailNotificationService(NancyContext context, bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, bool? notifyOnupdate, bool? notifyOncomplete)
        {
            return ComDayCqWorkflowImplEmailTaskEMailNotificationService(post, apply, delete, action, location, propertylist, notifyOnupdate, notifyOncomplete);
        }

        public virtual ComDayCrxSecurityTokenImplImplTokenAuthenticationHandlerInfo ComDayCrxSecurityTokenImplImplTokenAuthenticationHandler(NancyContext context, bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, string path, string tokenRequiredAttr, string tokenAlternateUrl, bool? tokenEncapsulated, List<string> skipTokenRefresh)
        {
            return ComDayCrxSecurityTokenImplImplTokenAuthenticationHandler(post, apply, delete, action, location, propertylist, path, tokenRequiredAttr, tokenAlternateUrl, tokenEncapsulated, skipTokenRefresh);
        }

        public virtual ComDayCrxSecurityTokenImplTokenCleanupTaskInfo ComDayCrxSecurityTokenImplTokenCleanupTask(NancyContext context, bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, bool? enableTokenCleanupTask, string schedulerExpression, int? batchSize)
        {
            return ComDayCrxSecurityTokenImplTokenCleanupTask(post, apply, delete, action, location, propertylist, enableTokenCleanupTask, schedulerExpression, batchSize);
        }

        public virtual GuideLocalizationServiceInfo GuideLocalizationService(NancyContext context, bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, List<string> supportedLocales, List<string> localizableProperties)
        {
            return GuideLocalizationService(post, apply, delete, action, location, propertylist, supportedLocales, localizableProperties);
        }

        public virtual MessagingUserComponentFactoryInfo MessagingUserComponentFactory(NancyContext context, bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, int? priority)
        {
            return MessagingUserComponentFactory(post, apply, delete, action, location, propertylist, priority);
        }

        public virtual OrgApacheAriesJmxFrameworkStateConfigInfo OrgApacheAriesJmxFrameworkStateConfig(NancyContext context, bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, bool? attributeChangeNotificationEnabled)
        {
            return OrgApacheAriesJmxFrameworkStateConfig(post, apply, delete, action, location, propertylist, attributeChangeNotificationEnabled);
        }

        public virtual OrgApacheFelixEventadminImplEventAdminInfo OrgApacheFelixEventadminImplEventAdmin(NancyContext context, bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, int? orgApacheFelixEventadminThreadPoolSize, decimal? orgApacheFelixEventadminAsyncToSyncThreadRatio, int? orgApacheFelixEventadminTimeout, bool? orgApacheFelixEventadminRequireTopic, List<string> orgApacheFelixEventadminIgnoreTimeout, List<string> orgApacheFelixEventadminIgnoreTopic)
        {
            return OrgApacheFelixEventadminImplEventAdmin(post, apply, delete, action, location, propertylist, orgApacheFelixEventadminThreadPoolSize, orgApacheFelixEventadminAsyncToSyncThreadRatio, orgApacheFelixEventadminTimeout, orgApacheFelixEventadminRequireTopic, orgApacheFelixEventadminIgnoreTimeout, orgApacheFelixEventadminIgnoreTopic);
        }

        public virtual OrgApacheFelixHttpInfo OrgApacheFelixHttp(NancyContext context, bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, string orgApacheFelixHttpHost, bool? orgApacheFelixHttpEnable, int? orgOsgiServiceHttpPort, int? orgApacheFelixHttpTimeout, bool? orgApacheFelixHttpsEnable, int? orgOsgiServiceHttpPortSecure, string orgApacheFelixHttpsKeystore, string orgApacheFelixHttpsKeystorePassword, string orgApacheFelixHttpsKeystoreKeyPassword, string orgApacheFelixHttpsTruststore, string orgApacheFelixHttpsTruststorePassword, string orgApacheFelixHttpsClientcertificate, string orgApacheFelixHttpContextPath, bool? orgApacheFelixHttpMbeans, int? orgApacheFelixHttpSessionTimeout, int? orgApacheFelixHttpJettyThreadpoolMax, int? orgApacheFelixHttpJettyAcceptors, int? orgApacheFelixHttpJettySelectors, int? orgApacheFelixHttpJettyHeaderBufferSize, int? orgApacheFelixHttpJettyRequestBufferSize, int? orgApacheFelixHttpJettyResponseBufferSize, int? orgApacheFelixHttpJettyMaxFormSize, List<string> orgApacheFelixHttpPathExclusions, List<string> orgApacheFelixHttpsJettyCiphersuitesExcluded, List<string> orgApacheFelixHttpsJettyCiphersuitesIncluded, bool? orgApacheFelixHttpJettySendServerHeader, List<string> orgApacheFelixHttpsJettyProtocolsIncluded, List<string> orgApacheFelixHttpsJettyProtocolsExcluded, bool? orgApacheFelixProxyLoadBalancerConnectionEnable, bool? orgApacheFelixHttpsJettyRenegotiateAllowed, bool? orgApacheFelixHttpsJettySessionCookieHttpOnly, bool? orgApacheFelixHttpsJettySessionCookieSecure, string orgEclipseJettyServletSessionIdPathParameterName, bool? orgEclipseJettyServletCheckingRemoteSessionIdEncoding, string orgEclipseJettyServletSessionCookie, string orgEclipseJettyServletSessionDomain, string orgEclipseJettyServletSessionPath, int? orgEclipseJettyServletMaxAge, string orgApacheFelixHttpName, bool? orgApacheFelixJettyGziphandlerEnable, int? orgApacheFelixJettyGzipMinGzipSize, int? orgApacheFelixJettyGzipCompressionLevel, int? orgApacheFelixJettyGzipInflateBufferSize, bool? orgApacheFelixJettyGzipSyncFlush, List<string> orgApacheFelixJettyGzipExcludedUserAgents, List<string> orgApacheFelixJettyGzipIncludedMethods, List<string> orgApacheFelixJettyGzipExcludedMethods, List<string> orgApacheFelixJettyGzipIncludedPaths, List<string> orgApacheFelixJettyGzipExcludedPaths, List<string> orgApacheFelixJettyGzipIncludedMimeTypes, List<string> orgApacheFelixJettyGzipExcludedMimeTypes, bool? orgApacheFelixHttpSessionInvalidate, bool? orgApacheFelixHttpSessionUniqueid)
        {
            return OrgApacheFelixHttp(post, apply, delete, action, location, propertylist, orgApacheFelixHttpHost, orgApacheFelixHttpEnable, orgOsgiServiceHttpPort, orgApacheFelixHttpTimeout, orgApacheFelixHttpsEnable, orgOsgiServiceHttpPortSecure, orgApacheFelixHttpsKeystore, orgApacheFelixHttpsKeystorePassword, orgApacheFelixHttpsKeystoreKeyPassword, orgApacheFelixHttpsTruststore, orgApacheFelixHttpsTruststorePassword, orgApacheFelixHttpsClientcertificate, orgApacheFelixHttpContextPath, orgApacheFelixHttpMbeans, orgApacheFelixHttpSessionTimeout, orgApacheFelixHttpJettyThreadpoolMax, orgApacheFelixHttpJettyAcceptors, orgApacheFelixHttpJettySelectors, orgApacheFelixHttpJettyHeaderBufferSize, orgApacheFelixHttpJettyRequestBufferSize, orgApacheFelixHttpJettyResponseBufferSize, orgApacheFelixHttpJettyMaxFormSize, orgApacheFelixHttpPathExclusions, orgApacheFelixHttpsJettyCiphersuitesExcluded, orgApacheFelixHttpsJettyCiphersuitesIncluded, orgApacheFelixHttpJettySendServerHeader, orgApacheFelixHttpsJettyProtocolsIncluded, orgApacheFelixHttpsJettyProtocolsExcluded, orgApacheFelixProxyLoadBalancerConnectionEnable, orgApacheFelixHttpsJettyRenegotiateAllowed, orgApacheFelixHttpsJettySessionCookieHttpOnly, orgApacheFelixHttpsJettySessionCookieSecure, orgEclipseJettyServletSessionIdPathParameterName, orgEclipseJettyServletCheckingRemoteSessionIdEncoding, orgEclipseJettyServletSessionCookie, orgEclipseJettyServletSessionDomain, orgEclipseJettyServletSessionPath, orgEclipseJettyServletMaxAge, orgApacheFelixHttpName, orgApacheFelixJettyGziphandlerEnable, orgApacheFelixJettyGzipMinGzipSize, orgApacheFelixJettyGzipCompressionLevel, orgApacheFelixJettyGzipInflateBufferSize, orgApacheFelixJettyGzipSyncFlush, orgApacheFelixJettyGzipExcludedUserAgents, orgApacheFelixJettyGzipIncludedMethods, orgApacheFelixJettyGzipExcludedMethods, orgApacheFelixJettyGzipIncludedPaths, orgApacheFelixJettyGzipExcludedPaths, orgApacheFelixJettyGzipIncludedMimeTypes, orgApacheFelixJettyGzipExcludedMimeTypes, orgApacheFelixHttpSessionInvalidate, orgApacheFelixHttpSessionUniqueid);
        }

        public virtual OrgApacheFelixHttpSslfilterSslFilterInfo OrgApacheFelixHttpSslfilterSslFilter(NancyContext context, bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, string sslForwardHeader, string sslForwardValue, string sslForwardCertHeader, bool? rewriteAbsoluteUrls)
        {
            return OrgApacheFelixHttpSslfilterSslFilter(post, apply, delete, action, location, propertylist, sslForwardHeader, sslForwardValue, sslForwardCertHeader, rewriteAbsoluteUrls);
        }

        public virtual OrgApacheFelixJaasConfigurationFactoryInfo OrgApacheFelixJaasConfigurationFactory(NancyContext context, bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, string jaasControlFlag, int? jaasRanking, string jaasRealmName, string jaasClassname, List<string> jaasOptions)
        {
            return OrgApacheFelixJaasConfigurationFactory(post, apply, delete, action, location, propertylist, jaasControlFlag, jaasRanking, jaasRealmName, jaasClassname, jaasOptions);
        }

        public virtual OrgApacheFelixJaasConfigurationSpiInfo OrgApacheFelixJaasConfigurationSpi(NancyContext context, bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, string jaasDefaultRealmName, string jaasConfigProviderName, string jaasGlobalConfigPolicy)
        {
            return OrgApacheFelixJaasConfigurationSpi(post, apply, delete, action, location, propertylist, jaasDefaultRealmName, jaasConfigProviderName, jaasGlobalConfigPolicy);
        }

        public virtual OrgApacheFelixScrScrServiceInfo OrgApacheFelixScrScrService(NancyContext context, bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, int? dsLoglevel, bool? dsFactoryEnabled, bool? dsDelayedKeepInstances, int? dsLockTimeoutMilliseconds, int? dsStopTimeoutMilliseconds, bool? dsGlobalExtender)
        {
            return OrgApacheFelixScrScrService(post, apply, delete, action, location, propertylist, dsLoglevel, dsFactoryEnabled, dsDelayedKeepInstances, dsLockTimeoutMilliseconds, dsStopTimeoutMilliseconds, dsGlobalExtender);
        }

        public virtual OrgApacheFelixSystemreadyImplComponentsCheckInfo OrgApacheFelixSystemreadyImplComponentsCheck(NancyContext context, bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, List<string> componentsList, string type)
        {
            return OrgApacheFelixSystemreadyImplComponentsCheck(post, apply, delete, action, location, propertylist, componentsList, type);
        }

        public virtual OrgApacheFelixSystemreadyImplFrameworkStartCheckInfo OrgApacheFelixSystemreadyImplFrameworkStartCheck(NancyContext context, bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, int? timeout, int? targetStartLevel, string targetStartLevelPropName, string type)
        {
            return OrgApacheFelixSystemreadyImplFrameworkStartCheck(post, apply, delete, action, location, propertylist, timeout, targetStartLevel, targetStartLevelPropName, type);
        }

        public virtual OrgApacheFelixSystemreadyImplServicesCheckInfo OrgApacheFelixSystemreadyImplServicesCheck(NancyContext context, bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, List<string> servicesList, string type)
        {
            return OrgApacheFelixSystemreadyImplServicesCheck(post, apply, delete, action, location, propertylist, servicesList, type);
        }

        public virtual OrgApacheFelixSystemreadyImplServletSystemAliveServletInfo OrgApacheFelixSystemreadyImplServletSystemAliveServlet(NancyContext context, bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, string osgiHttpWhiteboardServletPattern, string osgiHttpWhiteboardContextSelect)
        {
            return OrgApacheFelixSystemreadyImplServletSystemAliveServlet(post, apply, delete, action, location, propertylist, osgiHttpWhiteboardServletPattern, osgiHttpWhiteboardContextSelect);
        }

        public virtual OrgApacheFelixSystemreadyImplServletSystemReadyServletInfo OrgApacheFelixSystemreadyImplServletSystemReadyServlet(NancyContext context, bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, string osgiHttpWhiteboardServletPattern, string osgiHttpWhiteboardContextSelect)
        {
            return OrgApacheFelixSystemreadyImplServletSystemReadyServlet(post, apply, delete, action, location, propertylist, osgiHttpWhiteboardServletPattern, osgiHttpWhiteboardContextSelect);
        }

        public virtual OrgApacheFelixSystemreadySystemReadyMonitorInfo OrgApacheFelixSystemreadySystemReadyMonitor(NancyContext context, bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, int? pollInterval)
        {
            return OrgApacheFelixSystemreadySystemReadyMonitor(post, apply, delete, action, location, propertylist, pollInterval);
        }

        public virtual OrgApacheFelixWebconsoleInternalServletOsgiManagerInfo OrgApacheFelixWebconsoleInternalServletOsgiManager(NancyContext context, bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, string managerRoot, string httpServiceFilter, string defaultRender, string realm, string username, string password, string category, string locale, int? loglevel, string plugins)
        {
            return OrgApacheFelixWebconsoleInternalServletOsgiManager(post, apply, delete, action, location, propertylist, managerRoot, httpServiceFilter, defaultRender, realm, username, password, category, locale, loglevel, plugins);
        }

        public virtual OrgApacheFelixWebconsolePluginsEventInternalPluginServletInfo OrgApacheFelixWebconsolePluginsEventInternalPluginServlet(NancyContext context, bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, int? maxSize)
        {
            return OrgApacheFelixWebconsolePluginsEventInternalPluginServlet(post, apply, delete, action, location, propertylist, maxSize);
        }

        public virtual OrgApacheFelixWebconsolePluginsMemoryusageInternalMemoryUsageCoInfo OrgApacheFelixWebconsolePluginsMemoryusageInternalMemoryUsageCo(NancyContext context, bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, int? felixMemoryusageDumpThreshold, int? felixMemoryusageDumpInterval, string felixMemoryusageDumpLocation)
        {
            return OrgApacheFelixWebconsolePluginsMemoryusageInternalMemoryUsageCo(post, apply, delete, action, location, propertylist, felixMemoryusageDumpThreshold, felixMemoryusageDumpInterval, felixMemoryusageDumpLocation);
        }

        public virtual OrgApacheHttpProxyconfiguratorInfo OrgApacheHttpProxyconfigurator(NancyContext context, bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, bool? proxyEnabled, string proxyHost, int? proxyPort, string proxyUser, string proxyPassword, List<string> proxyExceptions)
        {
            return OrgApacheHttpProxyconfigurator(post, apply, delete, action, location, propertylist, proxyEnabled, proxyHost, proxyPort, proxyUser, proxyPassword, proxyExceptions);
        }

        public virtual OrgApacheJackrabbitOakPluginsBlobDatastoreDataStoreTextProviderInfo OrgApacheJackrabbitOakPluginsBlobDatastoreDataStoreTextProvider(NancyContext context, bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, string dir)
        {
            return OrgApacheJackrabbitOakPluginsBlobDatastoreDataStoreTextProvider(post, apply, delete, action, location, propertylist, dir);
        }

        public virtual OrgApacheJackrabbitOakPluginsBlobDatastoreFileDataStoreInfo OrgApacheJackrabbitOakPluginsBlobDatastoreFileDataStore(NancyContext context, bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, string path)
        {
            return OrgApacheJackrabbitOakPluginsBlobDatastoreFileDataStore(post, apply, delete, action, location, propertylist, path);
        }

        public virtual OrgApacheJackrabbitOakPluginsDocumentDocumentNodeStoreServiceInfo OrgApacheJackrabbitOakPluginsDocumentDocumentNodeStoreService(NancyContext context, bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, string mongouri, string db, bool? socketKeepAlive, int? cache, int? nodeCachePercentage, int? prevDocCachePercentage, int? childrenCachePercentage, int? diffCachePercentage, int? cacheSegmentCount, int? cacheStackMoveDistance, int? blobCacheSize, string persistentCache, string journalCache, bool? customBlobStore, int? journalGCInterval, int? journalGCMaxAge, bool? prefetchExternalChanges, string role, int? versionGcMaxAgeInSecs, string versionGCExpression, int? versionGCTimeLimitInSecs, int? blobGcMaxAgeInSecs, int? blobTrackSnapshotIntervalInSecs, string repositoryHome, int? maxReplicationLagInSecs, string documentStoreType, bool? bundlingDisabled, int? updateLimit, List<string> persistentCacheIncludes, string leaseCheckMode)
        {
            return OrgApacheJackrabbitOakPluginsDocumentDocumentNodeStoreService(post, apply, delete, action, location, propertylist, mongouri, db, socketKeepAlive, cache, nodeCachePercentage, prevDocCachePercentage, childrenCachePercentage, diffCachePercentage, cacheSegmentCount, cacheStackMoveDistance, blobCacheSize, persistentCache, journalCache, customBlobStore, journalGCInterval, journalGCMaxAge, prefetchExternalChanges, role, versionGcMaxAgeInSecs, versionGCExpression, versionGCTimeLimitInSecs, blobGcMaxAgeInSecs, blobTrackSnapshotIntervalInSecs, repositoryHome, maxReplicationLagInSecs, documentStoreType, bundlingDisabled, updateLimit, persistentCacheIncludes, leaseCheckMode);
        }

        public virtual OrgApacheJackrabbitOakPluginsDocumentDocumentNodeStoreServicePreInfo OrgApacheJackrabbitOakPluginsDocumentDocumentNodeStoreServicePre(NancyContext context, bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, List<string> persistentCacheIncludes)
        {
            return OrgApacheJackrabbitOakPluginsDocumentDocumentNodeStoreServicePre(post, apply, delete, action, location, propertylist, persistentCacheIncludes);
        }

        public virtual OrgApacheJackrabbitOakPluginsDocumentSecondarySecondaryStoreCacInfo OrgApacheJackrabbitOakPluginsDocumentSecondarySecondaryStoreCac(NancyContext context, bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, List<string> includedPaths, bool? enableAsyncObserver, int? observerQueueSize)
        {
            return OrgApacheJackrabbitOakPluginsDocumentSecondarySecondaryStoreCac(post, apply, delete, action, location, propertylist, includedPaths, enableAsyncObserver, observerQueueSize);
        }

        public virtual OrgApacheJackrabbitOakPluginsIndexAsyncIndexerServiceInfo OrgApacheJackrabbitOakPluginsIndexAsyncIndexerService(NancyContext context, bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, List<string> asyncConfigs, int? leaseTimeOutMinutes, int? failingIndexTimeoutSeconds, int? errorWarnIntervalSeconds)
        {
            return OrgApacheJackrabbitOakPluginsIndexAsyncIndexerService(post, apply, delete, action, location, propertylist, asyncConfigs, leaseTimeOutMinutes, failingIndexTimeoutSeconds, errorWarnIntervalSeconds);
        }

        public virtual OrgApacheJackrabbitOakPluginsIndexLuceneLuceneIndexProviderServInfo OrgApacheJackrabbitOakPluginsIndexLuceneLuceneIndexProviderServ(NancyContext context, bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, bool? disabled, bool? debug, string localIndexDir, bool? enableOpenIndexAsync, int? threadPoolSize, bool? prefetchIndexFiles, int? extractedTextCacheSizeInMB, int? extractedTextCacheExpiryInSecs, bool? alwaysUsePreExtractedCache, int? booleanClauseLimit, bool? enableHybridIndexing, int? hybridQueueSize, bool? disableStoredIndexDefinition, bool? deletedBlobsCollectionEnabled, int? propIndexCleanerIntervalInSecs, bool? enableSingleBlobIndexFiles)
        {
            return OrgApacheJackrabbitOakPluginsIndexLuceneLuceneIndexProviderServ(post, apply, delete, action, location, propertylist, disabled, debug, localIndexDir, enableOpenIndexAsync, threadPoolSize, prefetchIndexFiles, extractedTextCacheSizeInMB, extractedTextCacheExpiryInSecs, alwaysUsePreExtractedCache, booleanClauseLimit, enableHybridIndexing, hybridQueueSize, disableStoredIndexDefinition, deletedBlobsCollectionEnabled, propIndexCleanerIntervalInSecs, enableSingleBlobIndexFiles);
        }

        public virtual OrgApacheJackrabbitOakPluginsIndexSolrOsgiEmbeddedSolrServerCoInfo OrgApacheJackrabbitOakPluginsIndexSolrOsgiEmbeddedSolrServerCo(NancyContext context, bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, string solrHomePath, string solrCoreName)
        {
            return OrgApacheJackrabbitOakPluginsIndexSolrOsgiEmbeddedSolrServerCo(post, apply, delete, action, location, propertylist, solrHomePath, solrCoreName);
        }

        public virtual OrgApacheJackrabbitOakPluginsIndexSolrOsgiNodeStateSolrServersInfo OrgApacheJackrabbitOakPluginsIndexSolrOsgiNodeStateSolrServers(NancyContext context, bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, bool? enabled)
        {
            return OrgApacheJackrabbitOakPluginsIndexSolrOsgiNodeStateSolrServers(post, apply, delete, action, location, propertylist, enabled);
        }

        public virtual OrgApacheJackrabbitOakPluginsIndexSolrOsgiOakSolrConfigurationInfo OrgApacheJackrabbitOakPluginsIndexSolrOsgiOakSolrConfiguration(NancyContext context, bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, string pathDescField, string pathChildField, string pathParentField, string pathExactField, string catchAllField, string collapsedPathField, string pathDepthField, string commitPolicy, int? rows, bool? pathRestrictions, bool? propertyRestrictions, bool? primarytypesRestrictions, List<string> ignoredProperties, List<string> usedProperties, List<string> typeMappings, List<string> propertyMappings, bool? collapseJcrcontentNodes)
        {
            return OrgApacheJackrabbitOakPluginsIndexSolrOsgiOakSolrConfiguration(post, apply, delete, action, location, propertylist, pathDescField, pathChildField, pathParentField, pathExactField, catchAllField, collapsedPathField, pathDepthField, commitPolicy, rows, pathRestrictions, propertyRestrictions, primarytypesRestrictions, ignoredProperties, usedProperties, typeMappings, propertyMappings, collapseJcrcontentNodes);
        }

        public virtual OrgApacheJackrabbitOakPluginsIndexSolrOsgiRemoteSolrServerConfInfo OrgApacheJackrabbitOakPluginsIndexSolrOsgiRemoteSolrServerConf(NancyContext context, bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, string solrHttpUrl, string solrZkHost, string solrCollection, int? solrSocketTimeout, int? solrConnectionTimeout, int? solrShardsNo, int? solrReplicationFactor, string solrConfDir)
        {
            return OrgApacheJackrabbitOakPluginsIndexSolrOsgiRemoteSolrServerConf(post, apply, delete, action, location, propertylist, solrHttpUrl, solrZkHost, solrCollection, solrSocketTimeout, solrConnectionTimeout, solrShardsNo, solrReplicationFactor, solrConfDir);
        }

        public virtual OrgApacheJackrabbitOakPluginsIndexSolrOsgiSolrQueryIndexProvidInfo OrgApacheJackrabbitOakPluginsIndexSolrOsgiSolrQueryIndexProvid(NancyContext context, bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, bool? queryAggregation)
        {
            return OrgApacheJackrabbitOakPluginsIndexSolrOsgiSolrQueryIndexProvid(post, apply, delete, action, location, propertylist, queryAggregation);
        }

        public virtual OrgApacheJackrabbitOakPluginsIndexSolrOsgiSolrServerProviderSeInfo OrgApacheJackrabbitOakPluginsIndexSolrOsgiSolrServerProviderSe(NancyContext context, bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, string serverType)
        {
            return OrgApacheJackrabbitOakPluginsIndexSolrOsgiSolrServerProviderSe(post, apply, delete, action, location, propertylist, serverType);
        }

        public virtual OrgApacheJackrabbitOakPluginsMetricStatisticsProviderFactoryInfo OrgApacheJackrabbitOakPluginsMetricStatisticsProviderFactory(NancyContext context, bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, string providerType)
        {
            return OrgApacheJackrabbitOakPluginsMetricStatisticsProviderFactory(post, apply, delete, action, location, propertylist, providerType);
        }

        public virtual OrgApacheJackrabbitOakPluginsObservationChangeCollectorProviderInfo OrgApacheJackrabbitOakPluginsObservationChangeCollectorProvider(NancyContext context, bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, int? maxItems, int? maxPathDepth, bool? enabled)
        {
            return OrgApacheJackrabbitOakPluginsObservationChangeCollectorProvider(post, apply, delete, action, location, propertylist, maxItems, maxPathDepth, enabled);
        }

        public virtual OrgApacheJackrabbitOakQueryQueryEngineSettingsServiceInfo OrgApacheJackrabbitOakQueryQueryEngineSettingsService(NancyContext context, bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, int? queryLimitInMemory, int? queryLimitReads, bool? queryFailTraversal, bool? fastQuerySize)
        {
            return OrgApacheJackrabbitOakQueryQueryEngineSettingsService(post, apply, delete, action, location, propertylist, queryLimitInMemory, queryLimitReads, queryFailTraversal, fastQuerySize);
        }

        public virtual OrgApacheJackrabbitOakSecurityAuthenticationAuthenticationConfigInfo OrgApacheJackrabbitOakSecurityAuthenticationAuthenticationConfig(NancyContext context, bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, string orgApacheJackrabbitOakAuthenticationAppName, string orgApacheJackrabbitOakAuthenticationConfigSpiName)
        {
            return OrgApacheJackrabbitOakSecurityAuthenticationAuthenticationConfig(post, apply, delete, action, location, propertylist, orgApacheJackrabbitOakAuthenticationAppName, orgApacheJackrabbitOakAuthenticationConfigSpiName);
        }

        public virtual OrgApacheJackrabbitOakSecurityAuthenticationLdapImplLdapIdentiInfo OrgApacheJackrabbitOakSecurityAuthenticationLdapImplLdapIdenti(NancyContext context, bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, string providerName, string hostName, int? hostPort, bool? hostSsl, bool? hostTls, bool? hostNoCertCheck, string bindDn, string bindPassword, string searchTimeout, int? adminPoolMaxActive, bool? adminPoolLookupOnValidate, int? userPoolMaxActive, bool? userPoolLookupOnValidate, string userBaseDN, List<string> userObjectclass, string userIdAttribute, string userExtraFilter, bool? userMakeDnPath, string groupBaseDN, List<string> groupObjectclass, string groupNameAttribute, string groupExtraFilter, bool? groupMakeDnPath, string groupMemberAttribute, bool? useUidForExtId, List<string> customattributes)
        {
            return OrgApacheJackrabbitOakSecurityAuthenticationLdapImplLdapIdenti(post, apply, delete, action, location, propertylist, providerName, hostName, hostPort, hostSsl, hostTls, hostNoCertCheck, bindDn, bindPassword, searchTimeout, adminPoolMaxActive, adminPoolLookupOnValidate, userPoolMaxActive, userPoolLookupOnValidate, userBaseDN, userObjectclass, userIdAttribute, userExtraFilter, userMakeDnPath, groupBaseDN, groupObjectclass, groupNameAttribute, groupExtraFilter, groupMakeDnPath, groupMemberAttribute, useUidForExtId, customattributes);
        }

        public virtual OrgApacheJackrabbitOakSecurityAuthenticationTokenTokenConfiguraInfo OrgApacheJackrabbitOakSecurityAuthenticationTokenTokenConfigura(NancyContext context, bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, string tokenExpiration, string tokenLength, bool? tokenRefresh, int? tokenCleanupThreshold, string passwordHashAlgorithm, int? passwordHashIterations, int? passwordSaltSize)
        {
            return OrgApacheJackrabbitOakSecurityAuthenticationTokenTokenConfigura(post, apply, delete, action, location, propertylist, tokenExpiration, tokenLength, tokenRefresh, tokenCleanupThreshold, passwordHashAlgorithm, passwordHashIterations, passwordSaltSize);
        }

        public virtual OrgApacheJackrabbitOakSecurityAuthorizationAuthorizationConfigurInfo OrgApacheJackrabbitOakSecurityAuthorizationAuthorizationConfigur(NancyContext context, bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, string permissionsJr2, string importBehavior, List<string> readPaths, List<string> administrativePrincipals, int? configurationRanking)
        {
            return OrgApacheJackrabbitOakSecurityAuthorizationAuthorizationConfigur(post, apply, delete, action, location, propertylist, permissionsJr2, importBehavior, readPaths, administrativePrincipals, configurationRanking);
        }

        public virtual OrgApacheJackrabbitOakSecurityInternalSecurityProviderRegistratiInfo OrgApacheJackrabbitOakSecurityInternalSecurityProviderRegistrati(NancyContext context, bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, List<string> requiredServicePids, string authorizationCompositionType)
        {
            return OrgApacheJackrabbitOakSecurityInternalSecurityProviderRegistrati(post, apply, delete, action, location, propertylist, requiredServicePids, authorizationCompositionType);
        }

        public virtual OrgApacheJackrabbitOakSecurityUserRandomAuthorizableNodeNameInfo OrgApacheJackrabbitOakSecurityUserRandomAuthorizableNodeName(NancyContext context, bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, int? length)
        {
            return OrgApacheJackrabbitOakSecurityUserRandomAuthorizableNodeName(post, apply, delete, action, location, propertylist, length);
        }

        public virtual OrgApacheJackrabbitOakSecurityUserUserConfigurationImplInfo OrgApacheJackrabbitOakSecurityUserUserConfigurationImpl(NancyContext context, bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, string usersPath, string groupsPath, string systemRelativePath, int? defaultDepth, string importBehavior, string passwordHashAlgorithm, int? passwordHashIterations, int? passwordSaltSize, bool? omitAdminPw, bool? supportAutoSave, int? passwordMaxAge, bool? initialPasswordChange, int? passwordHistorySize, bool? passwordExpiryForAdmin, int? cacheExpiration, bool? enableRFC7613UsercaseMappedProfile)
        {
            return OrgApacheJackrabbitOakSecurityUserUserConfigurationImpl(post, apply, delete, action, location, propertylist, usersPath, groupsPath, systemRelativePath, defaultDepth, importBehavior, passwordHashAlgorithm, passwordHashIterations, passwordSaltSize, omitAdminPw, supportAutoSave, passwordMaxAge, initialPasswordChange, passwordHistorySize, passwordExpiryForAdmin, cacheExpiration, enableRFC7613UsercaseMappedProfile);
        }

        public virtual OrgApacheJackrabbitOakSegmentAzureAzureSegmentStoreServiceInfo OrgApacheJackrabbitOakSegmentAzureAzureSegmentStoreService(NancyContext context, bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, string accountName, string containerName, string accessKey, string rootPath, string connectionURL)
        {
            return OrgApacheJackrabbitOakSegmentAzureAzureSegmentStoreService(post, apply, delete, action, location, propertylist, accountName, containerName, accessKey, rootPath, connectionURL);
        }

        public virtual OrgApacheJackrabbitOakSegmentSegmentNodeStoreFactoryInfo OrgApacheJackrabbitOakSegmentSegmentNodeStoreFactory(NancyContext context, bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, string repositoryHome, string tarmkMode, int? tarmkSize, int? segmentCacheSize, int? stringCacheSize, int? templateCacheSize, int? stringDeduplicationCacheSize, int? templateDeduplicationCacheSize, int? nodeDeduplicationCacheSize, bool? pauseCompaction, int? compactionRetryCount, int? compactionForceTimeout, int? compactionSizeDeltaEstimation, bool? compactionDisableEstimation, int? compactionRetainedGenerations, int? compactionMemoryThreshold, int? compactionProgressLog, bool? standby, bool? customBlobStore, bool? customSegmentStore, bool? splitPersistence, string repositoryBackupDir, int? blobGcMaxAgeInSecs, int? blobTrackSnapshotIntervalInSecs, string role, bool? registerDescriptors, bool? dispatchChanges)
        {
            return OrgApacheJackrabbitOakSegmentSegmentNodeStoreFactory(post, apply, delete, action, location, propertylist, repositoryHome, tarmkMode, tarmkSize, segmentCacheSize, stringCacheSize, templateCacheSize, stringDeduplicationCacheSize, templateDeduplicationCacheSize, nodeDeduplicationCacheSize, pauseCompaction, compactionRetryCount, compactionForceTimeout, compactionSizeDeltaEstimation, compactionDisableEstimation, compactionRetainedGenerations, compactionMemoryThreshold, compactionProgressLog, standby, customBlobStore, customSegmentStore, splitPersistence, repositoryBackupDir, blobGcMaxAgeInSecs, blobTrackSnapshotIntervalInSecs, role, registerDescriptors, dispatchChanges);
        }

        public virtual OrgApacheJackrabbitOakSegmentSegmentNodeStoreMonitorServiceInfo OrgApacheJackrabbitOakSegmentSegmentNodeStoreMonitorService(NancyContext context, bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, List<string> commitsTrackerWriterGroups)
        {
            return OrgApacheJackrabbitOakSegmentSegmentNodeStoreMonitorService(post, apply, delete, action, location, propertylist, commitsTrackerWriterGroups);
        }

        public virtual OrgApacheJackrabbitOakSegmentSegmentNodeStoreServiceInfo OrgApacheJackrabbitOakSegmentSegmentNodeStoreService(NancyContext context, bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, string repositoryHome, string tarmkMode, int? tarmkSize, int? segmentCacheSize, int? stringCacheSize, int? templateCacheSize, int? stringDeduplicationCacheSize, int? templateDeduplicationCacheSize, int? nodeDeduplicationCacheSize, bool? pauseCompaction, int? compactionRetryCount, int? compactionForceTimeout, int? compactionSizeDeltaEstimation, bool? compactionDisableEstimation, int? compactionRetainedGenerations, int? compactionMemoryThreshold, int? compactionProgressLog, bool? standby, bool? customBlobStore, bool? customSegmentStore, bool? splitPersistence, string repositoryBackupDir, int? blobGcMaxAgeInSecs, int? blobTrackSnapshotIntervalInSecs)
        {
            return OrgApacheJackrabbitOakSegmentSegmentNodeStoreService(post, apply, delete, action, location, propertylist, repositoryHome, tarmkMode, tarmkSize, segmentCacheSize, stringCacheSize, templateCacheSize, stringDeduplicationCacheSize, templateDeduplicationCacheSize, nodeDeduplicationCacheSize, pauseCompaction, compactionRetryCount, compactionForceTimeout, compactionSizeDeltaEstimation, compactionDisableEstimation, compactionRetainedGenerations, compactionMemoryThreshold, compactionProgressLog, standby, customBlobStore, customSegmentStore, splitPersistence, repositoryBackupDir, blobGcMaxAgeInSecs, blobTrackSnapshotIntervalInSecs);
        }

        public virtual OrgApacheJackrabbitOakSegmentStandbyStoreStandbyStoreServiceInfo OrgApacheJackrabbitOakSegmentStandbyStoreStandbyStoreService(NancyContext context, bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, bool? orgApacheSlingInstallerConfigurationPersist, string mode, int? port, string primaryHost, int? interval, List<string> primaryAllowedClientIpRanges, bool? secure, int? standbyReadtimeout, bool? standbyAutoclean)
        {
            return OrgApacheJackrabbitOakSegmentStandbyStoreStandbyStoreService(post, apply, delete, action, location, propertylist, orgApacheSlingInstallerConfigurationPersist, mode, port, primaryHost, interval, primaryAllowedClientIpRanges, secure, standbyReadtimeout, standbyAutoclean);
        }

        public virtual OrgApacheJackrabbitOakSpiSecurityAuthenticationExternalImplDeInfo OrgApacheJackrabbitOakSpiSecurityAuthenticationExternalImplDe(NancyContext context, bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, string handlerName, string userExpirationTime, List<string> userAutoMembership, List<string> userPropertyMapping, string userPathPrefix, string userMembershipExpTime, int? userMembershipNestingDepth, bool? userDynamicMembership, bool? userDisableMissing, string groupExpirationTime, List<string> groupAutoMembership, List<string> groupPropertyMapping, string groupPathPrefix, bool? enableRFC7613UsercaseMappedProfile)
        {
            return OrgApacheJackrabbitOakSpiSecurityAuthenticationExternalImplDe(post, apply, delete, action, location, propertylist, handlerName, userExpirationTime, userAutoMembership, userPropertyMapping, userPathPrefix, userMembershipExpTime, userMembershipNestingDepth, userDynamicMembership, userDisableMissing, groupExpirationTime, groupAutoMembership, groupPropertyMapping, groupPathPrefix, enableRFC7613UsercaseMappedProfile);
        }

        public virtual OrgApacheJackrabbitOakSpiSecurityAuthenticationExternalImplExInfo OrgApacheJackrabbitOakSpiSecurityAuthenticationExternalImplEx(NancyContext context, bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, int? jaasRanking, string jaasControlFlag, string jaasRealmName, string idpName, string syncHandlerName)
        {
            return OrgApacheJackrabbitOakSpiSecurityAuthenticationExternalImplEx(post, apply, delete, action, location, propertylist, jaasRanking, jaasControlFlag, jaasRealmName, idpName, syncHandlerName);
        }

        public virtual OrgApacheJackrabbitOakSpiSecurityAuthenticationExternalImplPrInfo OrgApacheJackrabbitOakSpiSecurityAuthenticationExternalImplPr(NancyContext context, bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, bool? protectExternalId)
        {
            return OrgApacheJackrabbitOakSpiSecurityAuthenticationExternalImplPr(post, apply, delete, action, location, propertylist, protectExternalId);
        }

        public virtual OrgApacheJackrabbitOakSpiSecurityAuthorizationCugImplCugConfiInfo OrgApacheJackrabbitOakSpiSecurityAuthorizationCugImplCugConfi(NancyContext context, bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, List<string> cugSupportedPaths, bool? cugEnabled, int? configurationRanking)
        {
            return OrgApacheJackrabbitOakSpiSecurityAuthorizationCugImplCugConfi(post, apply, delete, action, location, propertylist, cugSupportedPaths, cugEnabled, configurationRanking);
        }

        public virtual OrgApacheJackrabbitOakSpiSecurityAuthorizationCugImplCugExcluInfo OrgApacheJackrabbitOakSpiSecurityAuthorizationCugImplCugExclu(NancyContext context, bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, List<string> principalNames)
        {
            return OrgApacheJackrabbitOakSpiSecurityAuthorizationCugImplCugExclu(post, apply, delete, action, location, propertylist, principalNames);
        }

        public virtual OrgApacheJackrabbitOakSpiSecurityUserActionDefaultAuthorizableInfo OrgApacheJackrabbitOakSpiSecurityUserActionDefaultAuthorizable(NancyContext context, bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, string enabledActions, List<string> userPrivilegeNames, List<string> groupPrivilegeNames, string constraint)
        {
            return OrgApacheJackrabbitOakSpiSecurityUserActionDefaultAuthorizable(post, apply, delete, action, location, propertylist, enabledActions, userPrivilegeNames, groupPrivilegeNames, constraint);
        }

        public virtual OrgApacheJackrabbitVaultPackagingImplPackagingImplInfo OrgApacheJackrabbitVaultPackagingImplPackagingImpl(NancyContext context, bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, List<string> packageRoots)
        {
            return OrgApacheJackrabbitVaultPackagingImplPackagingImpl(post, apply, delete, action, location, propertylist, packageRoots);
        }

        public virtual OrgApacheJackrabbitVaultPackagingRegistryImplFSPackageRegistryInfo OrgApacheJackrabbitVaultPackagingRegistryImplFSPackageRegistry(NancyContext context, bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, string homePath)
        {
            return OrgApacheJackrabbitVaultPackagingRegistryImplFSPackageRegistry(post, apply, delete, action, location, propertylist, homePath);
        }

        public virtual OrgApacheSlingAuthCoreImplLogoutServletInfo OrgApacheSlingAuthCoreImplLogoutServlet(NancyContext context, bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, List<string> slingServletMethods, string slingServletPaths)
        {
            return OrgApacheSlingAuthCoreImplLogoutServlet(post, apply, delete, action, location, propertylist, slingServletMethods, slingServletPaths);
        }

        public virtual OrgApacheSlingCaconfigImplConfigurationBindingsValueProviderInfo OrgApacheSlingCaconfigImplConfigurationBindingsValueProvider(NancyContext context, bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, bool? enabled)
        {
            return OrgApacheSlingCaconfigImplConfigurationBindingsValueProvider(post, apply, delete, action, location, propertylist, enabled);
        }

        public virtual OrgApacheSlingCaconfigImplConfigurationResolverImplInfo OrgApacheSlingCaconfigImplConfigurationResolverImpl(NancyContext context, bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, List<string> configBucketNames)
        {
            return OrgApacheSlingCaconfigImplConfigurationResolverImpl(post, apply, delete, action, location, propertylist, configBucketNames);
        }

        public virtual OrgApacheSlingCaconfigImplDefDefaultConfigurationInheritanceStraInfo OrgApacheSlingCaconfigImplDefDefaultConfigurationInheritanceStra(NancyContext context, bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, bool? enabled, List<string> configPropertyInheritancePropertyNames)
        {
            return OrgApacheSlingCaconfigImplDefDefaultConfigurationInheritanceStra(post, apply, delete, action, location, propertylist, enabled, configPropertyInheritancePropertyNames);
        }

        public virtual OrgApacheSlingCaconfigImplDefDefaultConfigurationPersistenceStraInfo OrgApacheSlingCaconfigImplDefDefaultConfigurationPersistenceStra(NancyContext context, bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, bool? enabled)
        {
            return OrgApacheSlingCaconfigImplDefDefaultConfigurationPersistenceStra(post, apply, delete, action, location, propertylist, enabled);
        }

        public virtual OrgApacheSlingCaconfigImplOverrideOsgiConfigurationOverrideProviInfo OrgApacheSlingCaconfigImplOverrideOsgiConfigurationOverrideProvi(NancyContext context, bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, string description, List<string> overrides, bool? enabled, int? serviceRanking)
        {
            return OrgApacheSlingCaconfigImplOverrideOsgiConfigurationOverrideProvi(post, apply, delete, action, location, propertylist, description, overrides, enabled, serviceRanking);
        }

        public virtual OrgApacheSlingCaconfigImplOverrideSystemPropertyConfigurationOveInfo OrgApacheSlingCaconfigImplOverrideSystemPropertyConfigurationOve(NancyContext context, bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, bool? enabled, int? serviceRanking)
        {
            return OrgApacheSlingCaconfigImplOverrideSystemPropertyConfigurationOve(post, apply, delete, action, location, propertylist, enabled, serviceRanking);
        }

        public virtual OrgApacheSlingCaconfigManagementImplConfigurationManagementSettiInfo OrgApacheSlingCaconfigManagementImplConfigurationManagementSetti(NancyContext context, bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, List<string> ignorePropertyNameRegex, List<string> configCollectionPropertiesResourceNames)
        {
            return OrgApacheSlingCaconfigManagementImplConfigurationManagementSetti(post, apply, delete, action, location, propertylist, ignorePropertyNameRegex, configCollectionPropertiesResourceNames);
        }

        public virtual OrgApacheSlingCaconfigResourceImplDefDefaultConfigurationResourInfo OrgApacheSlingCaconfigResourceImplDefDefaultConfigurationResour(NancyContext context, bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, bool? enabled, string configPath, List<string> fallbackPaths, List<string> configCollectionInheritancePropertyNames)
        {
            return OrgApacheSlingCaconfigResourceImplDefDefaultConfigurationResour(post, apply, delete, action, location, propertylist, enabled, configPath, fallbackPaths, configCollectionInheritancePropertyNames);
        }

        public virtual OrgApacheSlingCaconfigResourceImplDefDefaultContextPathStrategyInfo OrgApacheSlingCaconfigResourceImplDefDefaultContextPathStrategy(NancyContext context, bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, bool? enabled, List<string> configRefResourceNames, List<string> configRefPropertyNames, int? serviceRanking)
        {
            return OrgApacheSlingCaconfigResourceImplDefDefaultContextPathStrategy(post, apply, delete, action, location, propertylist, enabled, configRefResourceNames, configRefPropertyNames, serviceRanking);
        }

        public virtual OrgApacheSlingCommonsHtmlInternalTagsoupHtmlParserInfo OrgApacheSlingCommonsHtmlInternalTagsoupHtmlParser(NancyContext context, bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, List<string> parserFeatures)
        {
            return OrgApacheSlingCommonsHtmlInternalTagsoupHtmlParser(post, apply, delete, action, location, propertylist, parserFeatures);
        }

        public virtual OrgApacheSlingCommonsLogLogManagerInfo OrgApacheSlingCommonsLogLogManager(NancyContext context, bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, string orgApacheSlingCommonsLogLevel, string orgApacheSlingCommonsLogFile, int? orgApacheSlingCommonsLogFileNumber, string orgApacheSlingCommonsLogFileSize, string orgApacheSlingCommonsLogPattern, string orgApacheSlingCommonsLogConfigurationFile, bool? orgApacheSlingCommonsLogPackagingDataEnabled, int? orgApacheSlingCommonsLogMaxCallerDataDepth, int? orgApacheSlingCommonsLogMaxOldFileCountInDump, int? orgApacheSlingCommonsLogNumOfLines)
        {
            return OrgApacheSlingCommonsLogLogManager(post, apply, delete, action, location, propertylist, orgApacheSlingCommonsLogLevel, orgApacheSlingCommonsLogFile, orgApacheSlingCommonsLogFileNumber, orgApacheSlingCommonsLogFileSize, orgApacheSlingCommonsLogPattern, orgApacheSlingCommonsLogConfigurationFile, orgApacheSlingCommonsLogPackagingDataEnabled, orgApacheSlingCommonsLogMaxCallerDataDepth, orgApacheSlingCommonsLogMaxOldFileCountInDump, orgApacheSlingCommonsLogNumOfLines);
        }

        public virtual OrgApacheSlingCommonsLogLogManagerFactoryConfigInfo OrgApacheSlingCommonsLogLogManagerFactoryConfig(NancyContext context, bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, string orgApacheSlingCommonsLogLevel, string orgApacheSlingCommonsLogFile, string orgApacheSlingCommonsLogPattern, List<string> orgApacheSlingCommonsLogNames, bool? orgApacheSlingCommonsLogAdditiv)
        {
            return OrgApacheSlingCommonsLogLogManagerFactoryConfig(post, apply, delete, action, location, propertylist, orgApacheSlingCommonsLogLevel, orgApacheSlingCommonsLogFile, orgApacheSlingCommonsLogPattern, orgApacheSlingCommonsLogNames, orgApacheSlingCommonsLogAdditiv);
        }

        public virtual OrgApacheSlingCommonsLogLogManagerFactoryWriterInfo OrgApacheSlingCommonsLogLogManagerFactoryWriter(NancyContext context, bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, string orgApacheSlingCommonsLogFile, int? orgApacheSlingCommonsLogFileNumber, string orgApacheSlingCommonsLogFileSize, bool? orgApacheSlingCommonsLogFileBuffered)
        {
            return OrgApacheSlingCommonsLogLogManagerFactoryWriter(post, apply, delete, action, location, propertylist, orgApacheSlingCommonsLogFile, orgApacheSlingCommonsLogFileNumber, orgApacheSlingCommonsLogFileSize, orgApacheSlingCommonsLogFileBuffered);
        }

        public virtual OrgApacheSlingCommonsMetricsInternalLogReporterInfo OrgApacheSlingCommonsMetricsInternalLogReporter(NancyContext context, bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, int? period, string timeUnit, string level, string loggerName, string prefix, string pattern, string registryName)
        {
            return OrgApacheSlingCommonsMetricsInternalLogReporter(post, apply, delete, action, location, propertylist, period, timeUnit, level, loggerName, prefix, pattern, registryName);
        }

        public virtual OrgApacheSlingCommonsMetricsRrd4jImplCodahaleMetricsReporterInfo OrgApacheSlingCommonsMetricsRrd4jImplCodahaleMetricsReporter(NancyContext context, bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, List<string> datasources, int? step, List<string> archives, string path)
        {
            return OrgApacheSlingCommonsMetricsRrd4jImplCodahaleMetricsReporter(post, apply, delete, action, location, propertylist, datasources, step, archives, path);
        }

        public virtual OrgApacheSlingCommonsMimeInternalMimeTypeServiceImplInfo OrgApacheSlingCommonsMimeInternalMimeTypeServiceImpl(NancyContext context, bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, List<string> mimeTypes)
        {
            return OrgApacheSlingCommonsMimeInternalMimeTypeServiceImpl(post, apply, delete, action, location, propertylist, mimeTypes);
        }

        public virtual OrgApacheSlingCommonsSchedulerImplQuartzSchedulerInfo OrgApacheSlingCommonsSchedulerImplQuartzScheduler(NancyContext context, bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, string poolName, List<string> allowedPoolNames, bool? schedulerUseleaderforsingle, List<string> metricsFilters, int? slowThresholdMillis)
        {
            return OrgApacheSlingCommonsSchedulerImplQuartzScheduler(post, apply, delete, action, location, propertylist, poolName, allowedPoolNames, schedulerUseleaderforsingle, metricsFilters, slowThresholdMillis);
        }

        public virtual OrgApacheSlingCommonsSchedulerImplSchedulerHealthCheckInfo OrgApacheSlingCommonsSchedulerImplSchedulerHealthCheck(NancyContext context, bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, int? maxQuartzJobDurationAcceptable)
        {
            return OrgApacheSlingCommonsSchedulerImplSchedulerHealthCheck(post, apply, delete, action, location, propertylist, maxQuartzJobDurationAcceptable);
        }

        public virtual OrgApacheSlingCommonsThreadsImplDefaultThreadPoolFactoryInfo OrgApacheSlingCommonsThreadsImplDefaultThreadPoolFactory(NancyContext context, bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, string name, int? minPoolSize, int? maxPoolSize, int? queueSize, int? maxThreadAge, int? keepAliveTime, string blockPolicy, bool? shutdownGraceful, bool? daemon, int? shutdownWaitTime, string priority)
        {
            return OrgApacheSlingCommonsThreadsImplDefaultThreadPoolFactory(post, apply, delete, action, location, propertylist, name, minPoolSize, maxPoolSize, queueSize, maxThreadAge, keepAliveTime, blockPolicy, shutdownGraceful, daemon, shutdownWaitTime, priority);
        }

        public virtual OrgApacheSlingDatasourceDataSourceFactoryInfo OrgApacheSlingDatasourceDataSourceFactory(NancyContext context, bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, string datasourceName, string datasourceSvcPropName, string driverClassName, string url, string username, string password, string defaultAutoCommit, string defaultReadOnly, string defaultTransactionIsolation, string defaultCatalog, int? maxActive, int? maxIdle, int? minIdle, int? initialSize, int? maxWait, int? maxAge, bool? testOnBorrow, bool? testOnReturn, bool? testWhileIdle, string validationQuery, int? validationQueryTimeout, int? timeBetweenEvictionRunsMillis, int? minEvictableIdleTimeMillis, string connectionProperties, string initSQL, string jdbcInterceptors, int? validationInterval, bool? logValidationErrors, List<string> datasourceSvcProperties)
        {
            return OrgApacheSlingDatasourceDataSourceFactory(post, apply, delete, action, location, propertylist, datasourceName, datasourceSvcPropName, driverClassName, url, username, password, defaultAutoCommit, defaultReadOnly, defaultTransactionIsolation, defaultCatalog, maxActive, maxIdle, minIdle, initialSize, maxWait, maxAge, testOnBorrow, testOnReturn, testWhileIdle, validationQuery, validationQueryTimeout, timeBetweenEvictionRunsMillis, minEvictableIdleTimeMillis, connectionProperties, initSQL, jdbcInterceptors, validationInterval, logValidationErrors, datasourceSvcProperties);
        }

        public virtual OrgApacheSlingDatasourceJNDIDataSourceFactoryInfo OrgApacheSlingDatasourceJNDIDataSourceFactory(NancyContext context, bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, string datasourceName, string datasourceSvcPropName, string datasourceJndiName, List<string> jndiProperties)
        {
            return OrgApacheSlingDatasourceJNDIDataSourceFactory(post, apply, delete, action, location, propertylist, datasourceName, datasourceSvcPropName, datasourceJndiName, jndiProperties);
        }

        public virtual OrgApacheSlingDiscoveryOakConfigInfo OrgApacheSlingDiscoveryOakConfig(NancyContext context, bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, int? connectorPingTimeout, int? connectorPingInterval, int? discoveryLiteCheckInterval, int? clusterSyncServiceTimeout, int? clusterSyncServiceInterval, bool? enableSyncToken, int? minEventDelay, int? socketConnectTimeout, int? soTimeout, List<string> topologyConnectorUrls, List<string> topologyConnectorWhitelist, bool? autoStopLocalLoopEnabled, bool? gzipConnectorRequestsEnabled, bool? hmacEnabled, bool? enableEncryption, string sharedKey, int? hmacSharedKeyTTL, string backoffStandbyFactor, string backoffStableFactor)
        {
            return OrgApacheSlingDiscoveryOakConfig(post, apply, delete, action, location, propertylist, connectorPingTimeout, connectorPingInterval, discoveryLiteCheckInterval, clusterSyncServiceTimeout, clusterSyncServiceInterval, enableSyncToken, minEventDelay, socketConnectTimeout, soTimeout, topologyConnectorUrls, topologyConnectorWhitelist, autoStopLocalLoopEnabled, gzipConnectorRequestsEnabled, hmacEnabled, enableEncryption, sharedKey, hmacSharedKeyTTL, backoffStandbyFactor, backoffStableFactor);
        }

        public virtual OrgApacheSlingDiscoveryOakSynchronizedClocksHealthCheckInfo OrgApacheSlingDiscoveryOakSynchronizedClocksHealthCheck(NancyContext context, bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, string hcName, List<string> hcTags, string hcMbeanName)
        {
            return OrgApacheSlingDiscoveryOakSynchronizedClocksHealthCheck(post, apply, delete, action, location, propertylist, hcName, hcTags, hcMbeanName);
        }

        public virtual OrgApacheSlingDistributionAgentImplForwardDistributionAgentFactoInfo OrgApacheSlingDistributionAgentImplForwardDistributionAgentFacto(NancyContext context, bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, string name, string title, string details, bool? enabled, string serviceName, string logLevel, List<string> allowedRoots, bool? queueProcessingEnabled, List<string> packageImporterEndpoints, List<string> passiveQueues, List<string> priorityQueues, string retryStrategy, int? retryAttempts, string requestAuthorizationStrategyTarget, string transportSecretProviderTarget, string packageBuilderTarget, string triggersTarget, string queueProvider, bool? asyncDelivery, int? httpConnTimeout)
        {
            return OrgApacheSlingDistributionAgentImplForwardDistributionAgentFacto(post, apply, delete, action, location, propertylist, name, title, details, enabled, serviceName, logLevel, allowedRoots, queueProcessingEnabled, packageImporterEndpoints, passiveQueues, priorityQueues, retryStrategy, retryAttempts, requestAuthorizationStrategyTarget, transportSecretProviderTarget, packageBuilderTarget, triggersTarget, queueProvider, asyncDelivery, httpConnTimeout);
        }

        public virtual OrgApacheSlingDistributionAgentImplPrivilegeDistributionRequestAInfo OrgApacheSlingDistributionAgentImplPrivilegeDistributionRequestA(NancyContext context, bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, string name, string jcrPrivilege)
        {
            return OrgApacheSlingDistributionAgentImplPrivilegeDistributionRequestA(post, apply, delete, action, location, propertylist, name, jcrPrivilege);
        }

        public virtual OrgApacheSlingDistributionAgentImplQueueDistributionAgentFactoryInfo OrgApacheSlingDistributionAgentImplQueueDistributionAgentFactory(NancyContext context, bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, string name, string title, string details, bool? enabled, string serviceName, string logLevel, List<string> allowedRoots, string requestAuthorizationStrategyTarget, string queueProviderFactoryTarget, string packageBuilderTarget, string triggersTarget, List<string> priorityQueues)
        {
            return OrgApacheSlingDistributionAgentImplQueueDistributionAgentFactory(post, apply, delete, action, location, propertylist, name, title, details, enabled, serviceName, logLevel, allowedRoots, requestAuthorizationStrategyTarget, queueProviderFactoryTarget, packageBuilderTarget, triggersTarget, priorityQueues);
        }

        public virtual OrgApacheSlingDistributionAgentImplReverseDistributionAgentFactoInfo OrgApacheSlingDistributionAgentImplReverseDistributionAgentFacto(NancyContext context, bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, string name, string title, string details, bool? enabled, string serviceName, string logLevel, bool? queueProcessingEnabled, List<string> packageExporterEndpoints, int? pullItems, int? httpConnTimeout, string requestAuthorizationStrategyTarget, string transportSecretProviderTarget, string packageBuilderTarget, string triggersTarget)
        {
            return OrgApacheSlingDistributionAgentImplReverseDistributionAgentFacto(post, apply, delete, action, location, propertylist, name, title, details, enabled, serviceName, logLevel, queueProcessingEnabled, packageExporterEndpoints, pullItems, httpConnTimeout, requestAuthorizationStrategyTarget, transportSecretProviderTarget, packageBuilderTarget, triggersTarget);
        }

        public virtual OrgApacheSlingDistributionAgentImplSimpleDistributionAgentFactorInfo OrgApacheSlingDistributionAgentImplSimpleDistributionAgentFactor(NancyContext context, bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, string name, string title, string details, bool? enabled, string serviceName, string logLevel, bool? queueProcessingEnabled, string packageExporterTarget, string packageImporterTarget, string requestAuthorizationStrategyTarget, string triggersTarget)
        {
            return OrgApacheSlingDistributionAgentImplSimpleDistributionAgentFactor(post, apply, delete, action, location, propertylist, name, title, details, enabled, serviceName, logLevel, queueProcessingEnabled, packageExporterTarget, packageImporterTarget, requestAuthorizationStrategyTarget, triggersTarget);
        }

        public virtual OrgApacheSlingDistributionAgentImplSyncDistributionAgentFactoryInfo OrgApacheSlingDistributionAgentImplSyncDistributionAgentFactory(NancyContext context, bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, string name, string title, string details, bool? enabled, string serviceName, string logLevel, bool? queueProcessingEnabled, List<string> passiveQueues, List<string> packageExporterEndpoints, List<string> packageImporterEndpoints, string retryStrategy, int? retryAttempts, int? pullItems, int? httpConnTimeout, string requestAuthorizationStrategyTarget, string transportSecretProviderTarget, string packageBuilderTarget, string triggersTarget)
        {
            return OrgApacheSlingDistributionAgentImplSyncDistributionAgentFactory(post, apply, delete, action, location, propertylist, name, title, details, enabled, serviceName, logLevel, queueProcessingEnabled, passiveQueues, packageExporterEndpoints, packageImporterEndpoints, retryStrategy, retryAttempts, pullItems, httpConnTimeout, requestAuthorizationStrategyTarget, transportSecretProviderTarget, packageBuilderTarget, triggersTarget);
        }

        public virtual OrgApacheSlingDistributionMonitorDistributionQueueHealthCheckInfo OrgApacheSlingDistributionMonitorDistributionQueueHealthCheck(NancyContext context, bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, string hcName, List<string> hcTags, string hcMbeanName, int? numberOfRetriesAllowed)
        {
            return OrgApacheSlingDistributionMonitorDistributionQueueHealthCheck(post, apply, delete, action, location, propertylist, hcName, hcTags, hcMbeanName, numberOfRetriesAllowed);
        }

        public virtual OrgApacheSlingDistributionPackagingImplExporterAgentDistributioInfo OrgApacheSlingDistributionPackagingImplExporterAgentDistributio(NancyContext context, bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, string name, string queue, bool? dropInvalidItems, string agentTarget)
        {
            return OrgApacheSlingDistributionPackagingImplExporterAgentDistributio(post, apply, delete, action, location, propertylist, name, queue, dropInvalidItems, agentTarget);
        }

        public virtual OrgApacheSlingDistributionPackagingImplExporterLocalDistributioInfo OrgApacheSlingDistributionPackagingImplExporterLocalDistributio(NancyContext context, bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, string name, string packageBuilderTarget)
        {
            return OrgApacheSlingDistributionPackagingImplExporterLocalDistributio(post, apply, delete, action, location, propertylist, name, packageBuilderTarget);
        }

        public virtual OrgApacheSlingDistributionPackagingImplExporterRemoteDistributiInfo OrgApacheSlingDistributionPackagingImplExporterRemoteDistributi(NancyContext context, bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, string name, List<string> endpoints, int? pullItems, string packageBuilderTarget, string transportSecretProviderTarget)
        {
            return OrgApacheSlingDistributionPackagingImplExporterRemoteDistributi(post, apply, delete, action, location, propertylist, name, endpoints, pullItems, packageBuilderTarget, transportSecretProviderTarget);
        }

        public virtual OrgApacheSlingDistributionPackagingImplImporterLocalDistributioInfo OrgApacheSlingDistributionPackagingImplImporterLocalDistributio(NancyContext context, bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, string name, string packageBuilderTarget)
        {
            return OrgApacheSlingDistributionPackagingImplImporterLocalDistributio(post, apply, delete, action, location, propertylist, name, packageBuilderTarget);
        }

        public virtual OrgApacheSlingDistributionPackagingImplImporterRemoteDistributiInfo OrgApacheSlingDistributionPackagingImplImporterRemoteDistributi(NancyContext context, bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, string name, List<string> endpoints, string transportSecretProviderTarget)
        {
            return OrgApacheSlingDistributionPackagingImplImporterRemoteDistributi(post, apply, delete, action, location, propertylist, name, endpoints, transportSecretProviderTarget);
        }

        public virtual OrgApacheSlingDistributionPackagingImplImporterRepositoryDistriInfo OrgApacheSlingDistributionPackagingImplImporterRepositoryDistri(NancyContext context, bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, string name, string serviceName, string path, string privilegeName)
        {
            return OrgApacheSlingDistributionPackagingImplImporterRepositoryDistri(post, apply, delete, action, location, propertylist, name, serviceName, path, privilegeName);
        }

        public virtual OrgApacheSlingDistributionResourcesImplDistributionConfigurationInfo OrgApacheSlingDistributionResourcesImplDistributionConfiguration(NancyContext context, bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, string providerRoots, string kind)
        {
            return OrgApacheSlingDistributionResourcesImplDistributionConfiguration(post, apply, delete, action, location, propertylist, providerRoots, kind);
        }

        public virtual OrgApacheSlingDistributionResourcesImplDistributionServiceResourInfo OrgApacheSlingDistributionResourcesImplDistributionServiceResour(NancyContext context, bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, string providerRoots, string kind)
        {
            return OrgApacheSlingDistributionResourcesImplDistributionServiceResour(post, apply, delete, action, location, propertylist, providerRoots, kind);
        }

        public virtual OrgApacheSlingDistributionSerializationImplDistributionPackageBuInfo OrgApacheSlingDistributionSerializationImplDistributionPackageBu(NancyContext context, bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, string name, string type, string formatTarget, string tempFsFolder, int? fileThreshold, string memoryUnit, bool? useOffHeapMemory, string digestAlgorithm, int? monitoringQueueSize, int? cleanupDelay, List<string> packageFilters, List<string> propertyFilters)
        {
            return OrgApacheSlingDistributionSerializationImplDistributionPackageBu(post, apply, delete, action, location, propertylist, name, type, formatTarget, tempFsFolder, fileThreshold, memoryUnit, useOffHeapMemory, digestAlgorithm, monitoringQueueSize, cleanupDelay, packageFilters, propertyFilters);
        }

        public virtual OrgApacheSlingDistributionSerializationImplVltVaultDistributionInfo OrgApacheSlingDistributionSerializationImplVltVaultDistribution(NancyContext context, bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, string name, string type, string importMode, string aclHandling, string packageRoots, List<string> packageFilters, List<string> propertyFilters, string tempFsFolder, bool? useBinaryReferences, int? autoSaveThreshold, int? cleanupDelay, int? fileThreshold, string MEGA_BYTES, bool? useOffHeapMemory, string digestAlgorithm, int? monitoringQueueSize, List<string> pathsMapping, bool? strictImport)
        {
            return OrgApacheSlingDistributionSerializationImplVltVaultDistribution(post, apply, delete, action, location, propertylist, name, type, importMode, aclHandling, packageRoots, packageFilters, propertyFilters, tempFsFolder, useBinaryReferences, autoSaveThreshold, cleanupDelay, fileThreshold, MEGA_BYTES, useOffHeapMemory, digestAlgorithm, monitoringQueueSize, pathsMapping, strictImport);
        }

        public virtual OrgApacheSlingDistributionTransportImplUserCredentialsDistributiInfo OrgApacheSlingDistributionTransportImplUserCredentialsDistributi(NancyContext context, bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, string name, string username, string password)
        {
            return OrgApacheSlingDistributionTransportImplUserCredentialsDistributi(post, apply, delete, action, location, propertylist, name, username, password);
        }

        public virtual OrgApacheSlingDistributionTriggerImplDistributionEventDistributeInfo OrgApacheSlingDistributionTriggerImplDistributionEventDistribute(NancyContext context, bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, string name, string path)
        {
            return OrgApacheSlingDistributionTriggerImplDistributionEventDistribute(post, apply, delete, action, location, propertylist, name, path);
        }

        public virtual OrgApacheSlingDistributionTriggerImplJcrEventDistributionTriggerInfo OrgApacheSlingDistributionTriggerImplJcrEventDistributionTrigger(NancyContext context, bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, string name, string path, List<string> ignoredPathsPatterns, string serviceName, bool? deep)
        {
            return OrgApacheSlingDistributionTriggerImplJcrEventDistributionTrigger(post, apply, delete, action, location, propertylist, name, path, ignoredPathsPatterns, serviceName, deep);
        }

        public virtual OrgApacheSlingDistributionTriggerImplPersistedJcrEventDistributiInfo OrgApacheSlingDistributionTriggerImplPersistedJcrEventDistributi(NancyContext context, bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, string name, string path, string serviceName, string nuggetsPath)
        {
            return OrgApacheSlingDistributionTriggerImplPersistedJcrEventDistributi(post, apply, delete, action, location, propertylist, name, path, serviceName, nuggetsPath);
        }

        public virtual OrgApacheSlingDistributionTriggerImplRemoteEventDistributionTrigInfo OrgApacheSlingDistributionTriggerImplRemoteEventDistributionTrig(NancyContext context, bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, string name, string endpoint, string transportSecretProviderTarget)
        {
            return OrgApacheSlingDistributionTriggerImplRemoteEventDistributionTrig(post, apply, delete, action, location, propertylist, name, endpoint, transportSecretProviderTarget);
        }

        public virtual OrgApacheSlingDistributionTriggerImplResourceEventDistributionTrInfo OrgApacheSlingDistributionTriggerImplResourceEventDistributionTr(NancyContext context, bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, string name, string path)
        {
            return OrgApacheSlingDistributionTriggerImplResourceEventDistributionTr(post, apply, delete, action, location, propertylist, name, path);
        }

        public virtual OrgApacheSlingDistributionTriggerImplScheduledDistributionTriggeInfo OrgApacheSlingDistributionTriggerImplScheduledDistributionTrigge(NancyContext context, bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, string name, string path, string seconds, string serviceName)
        {
            return OrgApacheSlingDistributionTriggerImplScheduledDistributionTrigge(post, apply, delete, action, location, propertylist, name, path, seconds, serviceName);
        }

        public virtual OrgApacheSlingEngineImplAuthSlingAuthenticatorInfo OrgApacheSlingEngineImplAuthSlingAuthenticator(NancyContext context, bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, string osgiHttpWhiteboardContextSelect, string osgiHttpWhiteboardListener, string authSudoCookie, string authSudoParameter, bool? authAnnonymous, List<string> slingAuthRequirements, string slingAuthAnonymousUser, string slingAuthAnonymousPassword, string authHttp, string authHttpRealm, List<string> authUriSuffix)
        {
            return OrgApacheSlingEngineImplAuthSlingAuthenticator(post, apply, delete, action, location, propertylist, osgiHttpWhiteboardContextSelect, osgiHttpWhiteboardListener, authSudoCookie, authSudoParameter, authAnnonymous, slingAuthRequirements, slingAuthAnonymousUser, slingAuthAnonymousPassword, authHttp, authHttpRealm, authUriSuffix);
        }

        public virtual OrgApacheSlingEngineImplDebugRequestProgressTrackerLogFilterInfo OrgApacheSlingEngineImplDebugRequestProgressTrackerLogFilter(NancyContext context, bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, List<string> extensions, int? minDurationMs, int? maxDurationMs, bool? compactLogFormat)
        {
            return OrgApacheSlingEngineImplDebugRequestProgressTrackerLogFilter(post, apply, delete, action, location, propertylist, extensions, minDurationMs, maxDurationMs, compactLogFormat);
        }

        public virtual OrgApacheSlingEngineImplLogRequestLoggerInfo OrgApacheSlingEngineImplLogRequestLogger(NancyContext context, bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, string requestLogOutput, int? requestLogOutputtype, bool? requestLogEnabled, string accessLogOutput, int? accessLogOutputtype, bool? accessLogEnabled)
        {
            return OrgApacheSlingEngineImplLogRequestLogger(post, apply, delete, action, location, propertylist, requestLogOutput, requestLogOutputtype, requestLogEnabled, accessLogOutput, accessLogOutputtype, accessLogEnabled);
        }

        public virtual OrgApacheSlingEngineImplLogRequestLoggerServiceInfo OrgApacheSlingEngineImplLogRequestLoggerService(NancyContext context, bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, string requestLogServiceFormat, string requestLogServiceOutput, int? requestLogServiceOutputtype, bool? requestLogServiceOnentry)
        {
            return OrgApacheSlingEngineImplLogRequestLoggerService(post, apply, delete, action, location, propertylist, requestLogServiceFormat, requestLogServiceOutput, requestLogServiceOutputtype, requestLogServiceOnentry);
        }

        public virtual OrgApacheSlingEngineImplSlingMainServletInfo OrgApacheSlingEngineImplSlingMainServlet(NancyContext context, bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, int? slingMaxCalls, int? slingMaxInclusions, bool? slingTraceAllow, int? slingMaxRecordRequests, List<string> slingStorePatternRequests, string slingServerinfo, List<string> slingAdditionalResponseHeaders)
        {
            return OrgApacheSlingEngineImplSlingMainServlet(post, apply, delete, action, location, propertylist, slingMaxCalls, slingMaxInclusions, slingTraceAllow, slingMaxRecordRequests, slingStorePatternRequests, slingServerinfo, slingAdditionalResponseHeaders);
        }

        public virtual OrgApacheSlingEngineParametersInfo OrgApacheSlingEngineParameters(NancyContext context, bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, string slingDefaultParameterEncoding, int? slingDefaultMaxParameters, string fileLocation, int? fileThreshold, int? fileMax, int? requestMax, bool? slingDefaultParameterCheckForAdditionalContainerParameters)
        {
            return OrgApacheSlingEngineParameters(post, apply, delete, action, location, propertylist, slingDefaultParameterEncoding, slingDefaultMaxParameters, fileLocation, fileThreshold, fileMax, requestMax, slingDefaultParameterCheckForAdditionalContainerParameters);
        }

        public virtual OrgApacheSlingEventImplEventingThreadPoolInfo OrgApacheSlingEventImplEventingThreadPool(NancyContext context, bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, int? minPoolSize)
        {
            return OrgApacheSlingEventImplEventingThreadPool(post, apply, delete, action, location, propertylist, minPoolSize);
        }

        public virtual OrgApacheSlingEventImplJobsDefaultJobManagerInfo OrgApacheSlingEventImplJobsDefaultJobManager(NancyContext context, bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, string queuePriority, int? queueRetries, int? queueRetrydelay, int? queueMaxparallel)
        {
            return OrgApacheSlingEventImplJobsDefaultJobManager(post, apply, delete, action, location, propertylist, queuePriority, queueRetries, queueRetrydelay, queueMaxparallel);
        }

        public virtual OrgApacheSlingEventImplJobsJcrPersistenceHandlerInfo OrgApacheSlingEventImplJobsJcrPersistenceHandler(NancyContext context, bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, bool? jobConsumermanagerDisableDistribution, int? startupDelay, int? cleanupPeriod)
        {
            return OrgApacheSlingEventImplJobsJcrPersistenceHandler(post, apply, delete, action, location, propertylist, jobConsumermanagerDisableDistribution, startupDelay, cleanupPeriod);
        }

        public virtual OrgApacheSlingEventImplJobsJobConsumerManagerInfo OrgApacheSlingEventImplJobsJobConsumerManager(NancyContext context, bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, bool? orgApacheSlingInstallerConfigurationPersist, List<string> jobConsumermanagerWhitelist, List<string> jobConsumermanagerBlacklist)
        {
            return OrgApacheSlingEventImplJobsJobConsumerManager(post, apply, delete, action, location, propertylist, orgApacheSlingInstallerConfigurationPersist, jobConsumermanagerWhitelist, jobConsumermanagerBlacklist);
        }

        public virtual OrgApacheSlingEventJobsQueueConfigurationInfo OrgApacheSlingEventJobsQueueConfiguration(NancyContext context, bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, string queueName, List<string> queueTopics, string queueType, string queuePriority, int? queueRetries, int? queueRetrydelay, decimal? queueMaxparallel, bool? queueKeepJobs, bool? queuePreferRunOnCreationInstance, int? queueThreadPoolSize, int? serviceRanking)
        {
            return OrgApacheSlingEventJobsQueueConfiguration(post, apply, delete, action, location, propertylist, queueName, queueTopics, queueType, queuePriority, queueRetries, queueRetrydelay, queueMaxparallel, queueKeepJobs, queuePreferRunOnCreationInstance, queueThreadPoolSize, serviceRanking);
        }

        public virtual OrgApacheSlingExtensionsWebconsolesecurityproviderInternalSlingWInfo OrgApacheSlingExtensionsWebconsolesecurityproviderInternalSlingW(NancyContext context, bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, List<string> users, List<string> groups)
        {
            return OrgApacheSlingExtensionsWebconsolesecurityproviderInternalSlingW(post, apply, delete, action, location, propertylist, users, groups);
        }

        public virtual OrgApacheSlingFeatureflagsFeatureInfo OrgApacheSlingFeatureflagsFeature(NancyContext context, bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, string name, string description, bool? enabled)
        {
            return OrgApacheSlingFeatureflagsFeature(post, apply, delete, action, location, propertylist, name, description, enabled);
        }

        public virtual OrgApacheSlingFeatureflagsImplConfiguredFeatureInfo OrgApacheSlingFeatureflagsImplConfiguredFeature(NancyContext context, bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, string name, string description, bool? enabled)
        {
            return OrgApacheSlingFeatureflagsImplConfiguredFeature(post, apply, delete, action, location, propertylist, name, description, enabled);
        }

        public virtual OrgApacheSlingHapiImplHApiUtilImplInfo OrgApacheSlingHapiImplHApiUtilImpl(NancyContext context, bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, string orgApacheSlingHapiToolsResourcetype, string orgApacheSlingHapiToolsCollectionresourcetype, List<string> orgApacheSlingHapiToolsSearchpaths, string orgApacheSlingHapiToolsExternalurl, bool? orgApacheSlingHapiToolsEnabled)
        {
            return OrgApacheSlingHapiImplHApiUtilImpl(post, apply, delete, action, location, propertylist, orgApacheSlingHapiToolsResourcetype, orgApacheSlingHapiToolsCollectionresourcetype, orgApacheSlingHapiToolsSearchpaths, orgApacheSlingHapiToolsExternalurl, orgApacheSlingHapiToolsEnabled);
        }

        public virtual OrgApacheSlingHcCoreImplCompositeHealthCheckInfo OrgApacheSlingHcCoreImplCompositeHealthCheck(NancyContext context, bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, string hcName, List<string> hcTags, string hcMbeanName, List<string> filterTags, bool? filterCombineTagsWithOr)
        {
            return OrgApacheSlingHcCoreImplCompositeHealthCheck(post, apply, delete, action, location, propertylist, hcName, hcTags, hcMbeanName, filterTags, filterCombineTagsWithOr);
        }

        public virtual OrgApacheSlingHcCoreImplExecutorHealthCheckExecutorImplInfo OrgApacheSlingHcCoreImplExecutorHealthCheckExecutorImpl(NancyContext context, bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, int? timeoutInMs, int? longRunningFutureThresholdForCriticalMs, int? resultCacheTtlInMs)
        {
            return OrgApacheSlingHcCoreImplExecutorHealthCheckExecutorImpl(post, apply, delete, action, location, propertylist, timeoutInMs, longRunningFutureThresholdForCriticalMs, resultCacheTtlInMs);
        }

        public virtual OrgApacheSlingHcCoreImplJmxAttributeHealthCheckInfo OrgApacheSlingHcCoreImplJmxAttributeHealthCheck(NancyContext context, bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, string hcName, List<string> hcTags, string hcMbeanName, string mbeanName, string attributeName, string attributeValueConstraint)
        {
            return OrgApacheSlingHcCoreImplJmxAttributeHealthCheck(post, apply, delete, action, location, propertylist, hcName, hcTags, hcMbeanName, mbeanName, attributeName, attributeValueConstraint);
        }

        public virtual OrgApacheSlingHcCoreImplScriptableHealthCheckInfo OrgApacheSlingHcCoreImplScriptableHealthCheck(NancyContext context, bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, string hcName, List<string> hcTags, string hcMbeanName, string expression, string languageExtension)
        {
            return OrgApacheSlingHcCoreImplScriptableHealthCheck(post, apply, delete, action, location, propertylist, hcName, hcTags, hcMbeanName, expression, languageExtension);
        }

        public virtual OrgApacheSlingHcCoreImplServletHealthCheckExecutorServletInfo OrgApacheSlingHcCoreImplServletHealthCheckExecutorServlet(NancyContext context, bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, string servletPath, bool? disabled, string corsAccessControlAllowOrigin)
        {
            return OrgApacheSlingHcCoreImplServletHealthCheckExecutorServlet(post, apply, delete, action, location, propertylist, servletPath, disabled, corsAccessControlAllowOrigin);
        }

        public virtual OrgApacheSlingHcCoreImplServletResultTxtVerboseSerializerInfo OrgApacheSlingHcCoreImplServletResultTxtVerboseSerializer(NancyContext context, bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, int? totalWidth, int? colWidthName, int? colWidthResult, int? colWidthTiming)
        {
            return OrgApacheSlingHcCoreImplServletResultTxtVerboseSerializer(post, apply, delete, action, location, propertylist, totalWidth, colWidthName, colWidthResult, colWidthTiming);
        }

        public virtual OrgApacheSlingI18nImplI18NFilterInfo OrgApacheSlingI18nImplI18NFilter(NancyContext context, bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, int? serviceRanking, List<string> slingFilterScope)
        {
            return OrgApacheSlingI18nImplI18NFilter(post, apply, delete, action, location, propertylist, serviceRanking, slingFilterScope);
        }

        public virtual OrgApacheSlingI18nImplJcrResourceBundleProviderInfo OrgApacheSlingI18nImplJcrResourceBundleProvider(NancyContext context, bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, string localeDefault, bool? preloadBundles, int? invalidationDelay)
        {
            return OrgApacheSlingI18nImplJcrResourceBundleProvider(post, apply, delete, action, location, propertylist, localeDefault, preloadBundles, invalidationDelay);
        }

        public virtual OrgApacheSlingInstallerProviderJcrImplJcrInstallerInfo OrgApacheSlingInstallerProviderJcrImplJcrInstaller(NancyContext context, bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, List<string> handlerSchemes, string slingJcrinstallFolderNameRegexp, int? slingJcrinstallFolderMaxDepth, List<string> slingJcrinstallSearchPath, string slingJcrinstallNewConfigPath, string slingJcrinstallSignalPath, bool? slingJcrinstallEnableWriteback)
        {
            return OrgApacheSlingInstallerProviderJcrImplJcrInstaller(post, apply, delete, action, location, propertylist, handlerSchemes, slingJcrinstallFolderNameRegexp, slingJcrinstallFolderMaxDepth, slingJcrinstallSearchPath, slingJcrinstallNewConfigPath, slingJcrinstallSignalPath, slingJcrinstallEnableWriteback);
        }

        public virtual OrgApacheSlingJcrBaseInternalLoginAdminWhitelistInfo OrgApacheSlingJcrBaseInternalLoginAdminWhitelist(NancyContext context, bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, bool? whitelistBypass, string whitelistBundlesRegexp)
        {
            return OrgApacheSlingJcrBaseInternalLoginAdminWhitelist(post, apply, delete, action, location, propertylist, whitelistBypass, whitelistBundlesRegexp);
        }

        public virtual OrgApacheSlingJcrBaseInternalLoginAdminWhitelistFragmentInfo OrgApacheSlingJcrBaseInternalLoginAdminWhitelistFragment(NancyContext context, bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, string whitelistName, List<string> whitelistBundles)
        {
            return OrgApacheSlingJcrBaseInternalLoginAdminWhitelistFragment(post, apply, delete, action, location, propertylist, whitelistName, whitelistBundles);
        }

        public virtual OrgApacheSlingJcrDavexImplServletsSlingDavExServletInfo OrgApacheSlingJcrDavexImplServletsSlingDavExServlet(NancyContext context, bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, string alias, bool? davCreateAbsoluteUri, string davProtectedhandlers)
        {
            return OrgApacheSlingJcrDavexImplServletsSlingDavExServlet(post, apply, delete, action, location, propertylist, alias, davCreateAbsoluteUri, davProtectedhandlers);
        }

        public virtual OrgApacheSlingJcrJackrabbitServerJndiRegistrationSupportInfo OrgApacheSlingJcrJackrabbitServerJndiRegistrationSupport(NancyContext context, bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, string javaNamingFactoryInitial, string javaNamingProviderUrl)
        {
            return OrgApacheSlingJcrJackrabbitServerJndiRegistrationSupport(post, apply, delete, action, location, propertylist, javaNamingFactoryInitial, javaNamingProviderUrl);
        }

        public virtual OrgApacheSlingJcrJackrabbitServerRmiRegistrationSupportInfo OrgApacheSlingJcrJackrabbitServerRmiRegistrationSupport(NancyContext context, bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, int? port)
        {
            return OrgApacheSlingJcrJackrabbitServerRmiRegistrationSupport(post, apply, delete, action, location, propertylist, port);
        }

        public virtual OrgApacheSlingJcrRepoinitImplRepositoryInitializerInfo OrgApacheSlingJcrRepoinitImplRepositoryInitializer(NancyContext context, bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, List<string> references)
        {
            return OrgApacheSlingJcrRepoinitImplRepositoryInitializer(post, apply, delete, action, location, propertylist, references);
        }

        public virtual OrgApacheSlingJcrRepoinitRepositoryInitializerInfo OrgApacheSlingJcrRepoinitRepositoryInitializer(NancyContext context, bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, List<string> references, List<string> scripts)
        {
            return OrgApacheSlingJcrRepoinitRepositoryInitializer(post, apply, delete, action, location, propertylist, references, scripts);
        }

        public virtual OrgApacheSlingJcrResourceInternalJcrResourceResolverFactoryImplInfo OrgApacheSlingJcrResourceInternalJcrResourceResolverFactoryImpl(NancyContext context, bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, List<string> resourceResolverSearchpath, bool? resourceResolverManglenamespaces, bool? resourceResolverAllowDirect, List<string> resourceResolverRequiredProviders, List<string> resourceResolverRequiredProvidernames, List<string> resourceResolverVirtual, List<string> resourceResolverMapping, string resourceResolverMapLocation, List<string> resourceResolverMapObservation, int? resourceResolverDefaultVanityRedirectStatus, bool? resourceResolverEnableVanitypath, int? resourceResolverVanitypathMaxEntries, bool? resourceResolverVanitypathMaxEntriesStartup, int? resourceResolverVanitypathBloomfilterMaxBytes, bool? resourceResolverOptimizeAliasResolution, List<string> resourceResolverVanitypathWhitelist, List<string> resourceResolverVanitypathBlacklist, bool? resourceResolverVanityPrecedence, bool? resourceResolverProviderhandlingParanoid, bool? resourceResolverLogClosing, bool? resourceResolverLogUnclosed)
        {
            return OrgApacheSlingJcrResourceInternalJcrResourceResolverFactoryImpl(post, apply, delete, action, location, propertylist, resourceResolverSearchpath, resourceResolverManglenamespaces, resourceResolverAllowDirect, resourceResolverRequiredProviders, resourceResolverRequiredProvidernames, resourceResolverVirtual, resourceResolverMapping, resourceResolverMapLocation, resourceResolverMapObservation, resourceResolverDefaultVanityRedirectStatus, resourceResolverEnableVanitypath, resourceResolverVanitypathMaxEntries, resourceResolverVanitypathMaxEntriesStartup, resourceResolverVanitypathBloomfilterMaxBytes, resourceResolverOptimizeAliasResolution, resourceResolverVanitypathWhitelist, resourceResolverVanitypathBlacklist, resourceResolverVanityPrecedence, resourceResolverProviderhandlingParanoid, resourceResolverLogClosing, resourceResolverLogUnclosed);
        }

        public virtual OrgApacheSlingJcrResourceInternalJcrSystemUserValidatorInfo OrgApacheSlingJcrResourceInternalJcrSystemUserValidator(NancyContext context, bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, bool? allowOnlySystemUser)
        {
            return OrgApacheSlingJcrResourceInternalJcrSystemUserValidator(post, apply, delete, action, location, propertylist, allowOnlySystemUser);
        }

        public virtual OrgApacheSlingJcrResourcesecurityImplResourceAccessGateFactoryInfo OrgApacheSlingJcrResourcesecurityImplResourceAccessGateFactory(NancyContext context, bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, string path, string checkpathPrefix, string jcrPath)
        {
            return OrgApacheSlingJcrResourcesecurityImplResourceAccessGateFactory(post, apply, delete, action, location, propertylist, path, checkpathPrefix, jcrPath);
        }

        public virtual OrgApacheSlingJcrWebdavImplHandlerDefaultHandlerServiceInfo OrgApacheSlingJcrWebdavImplHandlerDefaultHandlerService(NancyContext context, bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, int? serviceRanking, string typeCollections, string typeNoncollections, string typeContent)
        {
            return OrgApacheSlingJcrWebdavImplHandlerDefaultHandlerService(post, apply, delete, action, location, propertylist, serviceRanking, typeCollections, typeNoncollections, typeContent);
        }

        public virtual OrgApacheSlingJcrWebdavImplHandlerDirListingExportHandlerServicInfo OrgApacheSlingJcrWebdavImplHandlerDirListingExportHandlerServic(NancyContext context, bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, int? serviceRanking)
        {
            return OrgApacheSlingJcrWebdavImplHandlerDirListingExportHandlerServic(post, apply, delete, action, location, propertylist, serviceRanking);
        }

        public virtual OrgApacheSlingJcrWebdavImplServletsSimpleWebDavServletInfo OrgApacheSlingJcrWebdavImplServletsSimpleWebDavServlet(NancyContext context, bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, string davRoot, bool? davCreateAbsoluteUri, string davRealm, List<string> collectionTypes, List<string> filterPrefixes, string filterTypes, string filterUris, string typeCollections, string typeNoncollections, string typeContent)
        {
            return OrgApacheSlingJcrWebdavImplServletsSimpleWebDavServlet(post, apply, delete, action, location, propertylist, davRoot, davCreateAbsoluteUri, davRealm, collectionTypes, filterPrefixes, filterTypes, filterUris, typeCollections, typeNoncollections, typeContent);
        }

        public virtual OrgApacheSlingJmxProviderImplJMXResourceProviderInfo OrgApacheSlingJmxProviderImplJMXResourceProvider(NancyContext context, bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, string providerRoots)
        {
            return OrgApacheSlingJmxProviderImplJMXResourceProvider(post, apply, delete, action, location, propertylist, providerRoots);
        }

        public virtual OrgApacheSlingModelsImplModelAdapterFactoryInfo OrgApacheSlingModelsImplModelAdapterFactory(NancyContext context, bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, string osgiHttpWhiteboardListener, string osgiHttpWhiteboardContextSelect, int? maxRecursionDepth, int? cleanupJobPeriod)
        {
            return OrgApacheSlingModelsImplModelAdapterFactory(post, apply, delete, action, location, propertylist, osgiHttpWhiteboardListener, osgiHttpWhiteboardContextSelect, maxRecursionDepth, cleanupJobPeriod);
        }

        public virtual OrgApacheSlingModelsJacksonexporterImplResourceModuleProviderInfo OrgApacheSlingModelsJacksonexporterImplResourceModuleProvider(NancyContext context, bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, int? maxRecursionLevels)
        {
            return OrgApacheSlingModelsJacksonexporterImplResourceModuleProvider(post, apply, delete, action, location, propertylist, maxRecursionLevels);
        }

        public virtual OrgApacheSlingResourceInventoryImplResourceInventoryPrinterFactoInfo OrgApacheSlingResourceInventoryImplResourceInventoryPrinterFacto(NancyContext context, bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, string felixInventoryPrinterName, string felixInventoryPrinterTitle, string path)
        {
            return OrgApacheSlingResourceInventoryImplResourceInventoryPrinterFacto(post, apply, delete, action, location, propertylist, felixInventoryPrinterName, felixInventoryPrinterTitle, path);
        }

        public virtual OrgApacheSlingResourcemergerImplMergedResourceProviderFactoryInfo OrgApacheSlingResourcemergerImplMergedResourceProviderFactory(NancyContext context, bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, string mergeRoot, bool? mergeReadOnly)
        {
            return OrgApacheSlingResourcemergerImplMergedResourceProviderFactory(post, apply, delete, action, location, propertylist, mergeRoot, mergeReadOnly);
        }

        public virtual OrgApacheSlingResourcemergerPickerOverridingInfo OrgApacheSlingResourcemergerPickerOverriding(NancyContext context, bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, string mergeRoot, bool? mergeReadOnly)
        {
            return OrgApacheSlingResourcemergerPickerOverriding(post, apply, delete, action, location, propertylist, mergeRoot, mergeReadOnly);
        }

        public virtual OrgApacheSlingScriptingCoreImplScriptCacheImplInfo OrgApacheSlingScriptingCoreImplScriptCacheImpl(NancyContext context, bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, int? orgApacheSlingScriptingCacheSize, List<string> orgApacheSlingScriptingCacheAdditionalExtensions)
        {
            return OrgApacheSlingScriptingCoreImplScriptCacheImpl(post, apply, delete, action, location, propertylist, orgApacheSlingScriptingCacheSize, orgApacheSlingScriptingCacheAdditionalExtensions);
        }

        public virtual OrgApacheSlingScriptingCoreImplScriptingResourceResolverProviderInfo OrgApacheSlingScriptingCoreImplScriptingResourceResolverProvider(NancyContext context, bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, bool? logStacktraceOnclose)
        {
            return OrgApacheSlingScriptingCoreImplScriptingResourceResolverProvider(post, apply, delete, action, location, propertylist, logStacktraceOnclose);
        }

        public virtual OrgApacheSlingScriptingJavaImplJavaScriptEngineFactoryInfo OrgApacheSlingScriptingJavaImplJavaScriptEngineFactory(NancyContext context, bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, bool? javaClassdebuginfo, string javaJavaEncoding, string javaCompilerSourceVM, string javaCompilerTargetVM)
        {
            return OrgApacheSlingScriptingJavaImplJavaScriptEngineFactory(post, apply, delete, action, location, propertylist, javaClassdebuginfo, javaJavaEncoding, javaCompilerSourceVM, javaCompilerTargetVM);
        }

        public virtual OrgApacheSlingScriptingJavascriptInternalRhinoJavaScriptEngineFaInfo OrgApacheSlingScriptingJavascriptInternalRhinoJavaScriptEngineFa(NancyContext context, bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, int? orgApacheSlingScriptingJavascriptRhinoOptLevel)
        {
            return OrgApacheSlingScriptingJavascriptInternalRhinoJavaScriptEngineFa(post, apply, delete, action, location, propertylist, orgApacheSlingScriptingJavascriptRhinoOptLevel);
        }

        public virtual OrgApacheSlingScriptingJspJspScriptEngineFactoryInfo OrgApacheSlingScriptingJspJspScriptEngineFactory(NancyContext context, bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, string jasperCompilerTargetVM, string jasperCompilerSourceVM, bool? jasperClassdebuginfo, bool? jasperEnablePooling, string jasperIeClassId, bool? jasperGenStringAsCharArray, bool? jasperKeepgenerated, bool? jasperMappedfile, bool? jasperTrimSpaces, bool? jasperDisplaySourceFragments, bool? defaultIsSession)
        {
            return OrgApacheSlingScriptingJspJspScriptEngineFactory(post, apply, delete, action, location, propertylist, jasperCompilerTargetVM, jasperCompilerSourceVM, jasperClassdebuginfo, jasperEnablePooling, jasperIeClassId, jasperGenStringAsCharArray, jasperKeepgenerated, jasperMappedfile, jasperTrimSpaces, jasperDisplaySourceFragments, defaultIsSession);
        }

        public virtual OrgApacheSlingScriptingSightlyJsImplJsapiSlyBindingsValuesProvInfo OrgApacheSlingScriptingSightlyJsImplJsapiSlyBindingsValuesProv(NancyContext context, bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, List<string> orgApacheSlingScriptingSightlyJsBindings)
        {
            return OrgApacheSlingScriptingSightlyJsImplJsapiSlyBindingsValuesProv(post, apply, delete, action, location, propertylist, orgApacheSlingScriptingSightlyJsBindings);
        }

        public virtual OrgApacheSlingSecurityImplContentDispositionFilterInfo OrgApacheSlingSecurityImplContentDispositionFilter(NancyContext context, bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, List<string> slingContentDispositionPaths, List<string> slingContentDispositionExcludedPaths, bool? slingContentDispositionAllPaths)
        {
            return OrgApacheSlingSecurityImplContentDispositionFilter(post, apply, delete, action, location, propertylist, slingContentDispositionPaths, slingContentDispositionExcludedPaths, slingContentDispositionAllPaths);
        }

        public virtual OrgApacheSlingSecurityImplReferrerFilterInfo OrgApacheSlingSecurityImplReferrerFilter(NancyContext context, bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, bool? allowEmpty, List<string> allowHosts, List<string> allowHostsRegexp, List<string> filterMethods, List<string> excludeAgentsRegexp)
        {
            return OrgApacheSlingSecurityImplReferrerFilter(post, apply, delete, action, location, propertylist, allowEmpty, allowHosts, allowHostsRegexp, filterMethods, excludeAgentsRegexp);
        }

        public virtual OrgApacheSlingServiceusermappingImplServiceUserMapperImplInfo OrgApacheSlingServiceusermappingImplServiceUserMapperImpl(NancyContext context, bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, List<string> userMapping, string userDefault, bool? userEnableDefaultMapping, bool? requireValidation)
        {
            return OrgApacheSlingServiceusermappingImplServiceUserMapperImpl(post, apply, delete, action, location, propertylist, userMapping, userDefault, userEnableDefaultMapping, requireValidation);
        }

        public virtual OrgApacheSlingServiceusermappingImplServiceUserMapperImplAmendedInfo OrgApacheSlingServiceusermappingImplServiceUserMapperImplAmended(NancyContext context, bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, int? serviceRanking, List<string> userMapping)
        {
            return OrgApacheSlingServiceusermappingImplServiceUserMapperImplAmended(post, apply, delete, action, location, propertylist, serviceRanking, userMapping);
        }

        public virtual OrgApacheSlingServletsGetDefaultGetServletInfo OrgApacheSlingServletsGetDefaultGetServlet(NancyContext context, bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, List<string> aliases, bool? index, List<string> indexFiles, bool? enableHtml, bool? enableJson, bool? enableTxt, bool? enableXml, int? jsonMaximumresults, bool? ecmaSuport)
        {
            return OrgApacheSlingServletsGetDefaultGetServlet(post, apply, delete, action, location, propertylist, aliases, index, indexFiles, enableHtml, enableJson, enableTxt, enableXml, jsonMaximumresults, ecmaSuport);
        }

        public virtual OrgApacheSlingServletsGetImplVersionVersionInfoServletInfo OrgApacheSlingServletsGetImplVersionVersionInfoServlet(NancyContext context, bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, List<string> slingServletSelectors, bool? ecmaSuport)
        {
            return OrgApacheSlingServletsGetImplVersionVersionInfoServlet(post, apply, delete, action, location, propertylist, slingServletSelectors, ecmaSuport);
        }

        public virtual OrgApacheSlingServletsPostImplHelperChunkCleanUpTaskInfo OrgApacheSlingServletsPostImplHelperChunkCleanUpTask(NancyContext context, bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, string schedulerExpression, bool? schedulerConcurrent, int? chunkCleanupAge)
        {
            return OrgApacheSlingServletsPostImplHelperChunkCleanUpTask(post, apply, delete, action, location, propertylist, schedulerExpression, schedulerConcurrent, chunkCleanupAge);
        }

        public virtual OrgApacheSlingServletsPostImplSlingPostServletInfo OrgApacheSlingServletsPostImplSlingPostServlet(NancyContext context, bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, List<string> servletPostDateFormats, List<string> servletPostNodeNameHints, int? servletPostNodeNameMaxLength, bool? servletPostCheckinNewVersionableNodes, bool? servletPostAutoCheckout, bool? servletPostAutoCheckin, string servletPostIgnorePattern)
        {
            return OrgApacheSlingServletsPostImplSlingPostServlet(post, apply, delete, action, location, propertylist, servletPostDateFormats, servletPostNodeNameHints, servletPostNodeNameMaxLength, servletPostCheckinNewVersionableNodes, servletPostAutoCheckout, servletPostAutoCheckin, servletPostIgnorePattern);
        }

        public virtual OrgApacheSlingServletsResolverSlingServletResolverInfo OrgApacheSlingServletsResolverSlingServletResolver(NancyContext context, bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, string servletresolverServletRoot, int? servletresolverCacheSize, List<string> servletresolverPaths, List<string> servletresolverDefaultExtensions)
        {
            return OrgApacheSlingServletsResolverSlingServletResolver(post, apply, delete, action, location, propertylist, servletresolverServletRoot, servletresolverCacheSize, servletresolverPaths, servletresolverDefaultExtensions);
        }

        public virtual OrgApacheSlingSettingsImplSlingSettingsServiceImplInfo OrgApacheSlingSettingsImplSlingSettingsServiceImpl(NancyContext context, bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, string slingName, string slingDescription)
        {
            return OrgApacheSlingSettingsImplSlingSettingsServiceImpl(post, apply, delete, action, location, propertylist, slingName, slingDescription);
        }

        public virtual OrgApacheSlingStartupfilterImplStartupFilterImplInfo OrgApacheSlingStartupfilterImplStartupFilterImpl(NancyContext context, bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, bool? activeByDefault, string defaultMessage)
        {
            return OrgApacheSlingStartupfilterImplStartupFilterImpl(post, apply, delete, action, location, propertylist, activeByDefault, defaultMessage);
        }

        public virtual OrgApacheSlingTenantInternalTenantProviderImplInfo OrgApacheSlingTenantInternalTenantProviderImpl(NancyContext context, bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, string tenantRoot, List<string> tenantPathMatcher)
        {
            return OrgApacheSlingTenantInternalTenantProviderImpl(post, apply, delete, action, location, propertylist, tenantRoot, tenantPathMatcher);
        }

        public virtual OrgApacheSlingTracerInternalLogTracerInfo OrgApacheSlingTracerInternalLogTracer(NancyContext context, bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, List<string> tracerSets, bool? enabled, bool? servletEnabled, int? recordingCacheSizeInMB, int? recordingCacheDurationInSecs, bool? recordingCompressionEnabled, bool? gzipResponse)
        {
            return OrgApacheSlingTracerInternalLogTracer(post, apply, delete, action, location, propertylist, tracerSets, enabled, servletEnabled, recordingCacheSizeInMB, recordingCacheDurationInSecs, recordingCompressionEnabled, gzipResponse);
        }

        public virtual OrgApacheSlingXssImplXSSFilterImplInfo OrgApacheSlingXssImplXSSFilterImpl(NancyContext context, bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, string policyPath)
        {
            return OrgApacheSlingXssImplXSSFilterImpl(post, apply, delete, action, location, propertylist, policyPath);
        }

        protected abstract AdaptiveFormAndInteractiveCommunicationWebChannelConfigurationInfo AdaptiveFormAndInteractiveCommunicationWebChannelConfiguration(bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, bool? showPlaceholder, int? maximumCacheEntries, string afScriptingCompatversion, bool? makeFileNameUnique, bool? generatingCompliantData);

        protected abstract AdaptiveFormAndInteractiveCommunicationWebChannelThemeConfigurInfo AdaptiveFormAndInteractiveCommunicationWebChannelThemeConfigur(bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, List<string> fontList);

        protected abstract AnalyticsComponentQueryCacheServiceInfo AnalyticsComponentQueryCacheService(bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, int? cqAnalyticsComponentQueryCacheSize);

        protected abstract ApacheSlingHealthCheckResultHTMLSerializerInfo ApacheSlingHealthCheckResultHTMLSerializer(bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, string styleString);

        protected abstract ComAdobeAemFormsndocumentsConfigAEMFormsManagerConfigurationInfo ComAdobeAemFormsndocumentsConfigAEMFormsManagerConfiguration(bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, bool? formsManagerConfigIncludeOOTBTemplates, bool? formsManagerConfigIncludeDeprecatedTemplates);

        protected abstract ComAdobeAemTransactionCoreImplTransactionRecorderInfo ComAdobeAemTransactionCoreImplTransactionRecorder(bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, bool? isTransactionRecordingEnabled);

        protected abstract ComAdobeAemUpgradePrechecksHcImplDeprecateIndexesHCInfo ComAdobeAemUpgradePrechecksHcImplDeprecateIndexesHC(bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, string hcName, List<string> hcTags, string hcMbeanName);

        protected abstract ComAdobeAemUpgradePrechecksHcImplReplicationAgentsDisabledHCInfo ComAdobeAemUpgradePrechecksHcImplReplicationAgentsDisabledHC(bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, string hcName, List<string> hcTags, string hcMbeanName);

        protected abstract ComAdobeAemUpgradePrechecksMbeanImplPreUpgradeTasksMBeanImplInfo ComAdobeAemUpgradePrechecksMbeanImplPreUpgradeTasksMBeanImpl(bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, List<string> preUpgradeMaintenanceTasks, List<string> preUpgradeHcTags);

        protected abstract ComAdobeAemUpgradePrechecksTasksImplConsistencyCheckTaskImplInfo ComAdobeAemUpgradePrechecksTasksImplConsistencyCheckTaskImpl(bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, string rootPath, bool? fixInconsistencies);

        protected abstract ComAdobeCqAccountApiAccountManagementServiceInfo ComAdobeCqAccountApiAccountManagementService(bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, int? cqAccountmanagerTokenValidityPeriod, string cqAccountmanagerConfigRequestnewaccountMail, string cqAccountmanagerConfigRequestnewpwdMail);

        protected abstract ComAdobeCqAccountImplAccountManagementServletInfo ComAdobeCqAccountImplAccountManagementServlet(bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, string cqAccountmanagerConfigInformnewaccountMail, string cqAccountmanagerConfigInformnewpwdMail);

        protected abstract ComAdobeCqAddressImplLocationLocationListServletInfo ComAdobeCqAddressImplLocationLocationListServlet(bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, int? cqAddressLocationDefaultMaxResults);

        protected abstract ComAdobeCqAuditPurgeDamInfo ComAdobeCqAuditPurgeDam(bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, string auditlogRuleName, string auditlogRuleContentpath, int? auditlogRuleMinimumage, string auditlogRuleTypes);

        protected abstract ComAdobeCqAuditPurgePagesInfo ComAdobeCqAuditPurgePages(bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, string auditlogRuleName, string auditlogRuleContentpath, int? auditlogRuleMinimumage, string auditlogRuleTypes);

        protected abstract ComAdobeCqAuditPurgeReplicationInfo ComAdobeCqAuditPurgeReplication(bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, string auditlogRuleName, string auditlogRuleContentpath, int? auditlogRuleMinimumage, string auditlogRuleTypes);

        protected abstract ComAdobeCqCdnRewriterImplAWSCloudFrontRewriterInfo ComAdobeCqCdnRewriterImplAWSCloudFrontRewriter(bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, int? serviceRanking, string keypairId, string keypairAlias, List<string> cdnrewriterAttributes, string cdnRewriterDistributionDomain);

        protected abstract ComAdobeCqCdnRewriterImplCDNConfigServiceImplInfo ComAdobeCqCdnRewriterImplCDNConfigServiceImpl(bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, string cdnConfigDistributionDomain, bool? cdnConfigEnableRewriting, List<string> cdnConfigPathPrefixes, int? cdnConfigCdnttl, string cdnConfigApplicationProtocol);

        protected abstract ComAdobeCqCdnRewriterImplCDNRewriterInfo ComAdobeCqCdnRewriterImplCDNRewriter(bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, int? serviceRanking, List<string> cdnrewriterAttributes, string cdnRewriterDistributionDomain);

        protected abstract ComAdobeCqCloudconfigCoreImplConfigurationReplicationEventHandleInfo ComAdobeCqCloudconfigCoreImplConfigurationReplicationEventHandle(bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, List<string> flushAgents);

        protected abstract ComAdobeCqCommerceImplAssetDynamicImageHandlerInfo ComAdobeCqCommerceImplAssetDynamicImageHandler(bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, bool? cqCommerceAssetHandlerActive, string cqCommerceAssetHandlerName);

        protected abstract ComAdobeCqCommerceImplAssetProductAssetHandlerProviderImplInfo ComAdobeCqCommerceImplAssetProductAssetHandlerProviderImpl(bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, string cqCommerceAssetHandlerFallback);

        protected abstract ComAdobeCqCommerceImplAssetStaticImageHandlerInfo ComAdobeCqCommerceImplAssetStaticImageHandler(bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, bool? cqCommerceAssetHandlerActive, string cqCommerceAssetHandlerName);

        protected abstract ComAdobeCqCommerceImplAssetVideoHandlerInfo ComAdobeCqCommerceImplAssetVideoHandler(bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, bool? cqCommerceAssetHandlerActive, string cqCommerceAssetHandlerName);

        protected abstract ComAdobeCqCommerceImplPromotionPromotionManagerImplInfo ComAdobeCqCommerceImplPromotionPromotionManagerImpl(bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, string cqCommercePromotionRoot);

        protected abstract ComAdobeCqCommercePimImplCataloggeneratorCatalogGeneratorImplInfo ComAdobeCqCommercePimImplCataloggeneratorCatalogGeneratorImpl(bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, int? cqCommerceCataloggeneratorBucketsize, string cqCommerceCataloggeneratorBucketname, List<string> cqCommerceCataloggeneratorExcludedtemplateproperties);

        protected abstract ComAdobeCqCommercePimImplPageEventListenerInfo ComAdobeCqCommercePimImplPageEventListener(bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, bool? cqCommercePageeventlistenerEnabled);

        protected abstract ComAdobeCqCommercePimImplProductfeedProductFeedServiceImplInfo ComAdobeCqCommercePimImplProductfeedProductFeedServiceImpl(bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, string feedGeneratorAlgorithm);

        protected abstract ComAdobeCqContentinsightImplReportingServicesSettingsProviderInfo ComAdobeCqContentinsightImplReportingServicesSettingsProvider(bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, string reportingservicesUrl);

        protected abstract ComAdobeCqContentinsightImplServletsBrightEdgeProxyServletInfo ComAdobeCqContentinsightImplServletsBrightEdgeProxyServlet(bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, string brightedgeUrl);

        protected abstract ComAdobeCqContentinsightImplServletsReportingServicesProxyServleInfo ComAdobeCqContentinsightImplServletsReportingServicesProxyServle(bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, List<string> reportingservicesProxyWhitelist);

        protected abstract ComAdobeCqDamCfmImplComponentComponentConfigImplInfo ComAdobeCqDamCfmImplComponentComponentConfigImpl(bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, string damCfmComponentResourceType, string damCfmComponentFileReferenceProp, string damCfmComponentElementsProp, string damCfmComponentVariationProp);

        protected abstract ComAdobeCqDamCfmImplConfFeatureConfigImplInfo ComAdobeCqDamCfmImplConfFeatureConfigImpl(bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, List<string> damCfmResourceTypes, List<string> damCfmReferenceProperties);

        protected abstract ComAdobeCqDamCfmImplContentRewriterAssetProcessorInfo ComAdobeCqDamCfmImplContentRewriterAssetProcessor(bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, string pipelineType);

        protected abstract ComAdobeCqDamCfmImplContentRewriterParRangeFilterInfo ComAdobeCqDamCfmImplContentRewriterParRangeFilter(bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, string pipelineType);

        protected abstract ComAdobeCqDamCfmImplContentRewriterPayloadFilterInfo ComAdobeCqDamCfmImplContentRewriterPayloadFilter(bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, string pipelineType);

        protected abstract ComAdobeCqDamDmProcessImagePTiffManagerImplInfo ComAdobeCqDamDmProcessImagePTiffManagerImpl(bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, int? maxMemory);

        protected abstract ComAdobeCqDamIpsImplReplicationTriggerReplicateOnModifyWorkerInfo ComAdobeCqDamIpsImplReplicationTriggerReplicateOnModifyWorker(bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, bool? dmreplicateonmodifyEnabled, bool? dmreplicateonmodifyForcesyncdeletes);

        protected abstract ComAdobeCqDamMacSyncHelperImplMACSyncClientImplInfo ComAdobeCqDamMacSyncHelperImplMACSyncClientImpl(bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, int? comAdobeDamMacSyncClientSoTimeout);

        protected abstract ComAdobeCqDamMacSyncImplDAMSyncServiceImplInfo ComAdobeCqDamMacSyncImplDAMSyncServiceImpl(bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, List<string> comAdobeCqDamMacSyncDamsyncserviceRegisteredPaths, bool? comAdobeCqDamMacSyncDamsyncserviceSyncRenditions, int? comAdobeCqDamMacSyncDamsyncserviceReplicateThreadWaitMs, string comAdobeCqDamMacSyncDamsyncservicePlatform);

        protected abstract ComAdobeCqDamProcessorNuiImplNuiAssetProcessorInfo ComAdobeCqDamProcessorNuiImplNuiAssetProcessor(bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, bool? nuiEnabled, string nuiServiceUrl, string nuiApiKey);

        protected abstract ComAdobeCqDamS7imagingImplIsImageServerComponentInfo ComAdobeCqDamS7imagingImplIsImageServerComponent(bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, string tcpPort, bool? allowRemoteAccess, string maxRenderRgnPixels, string maxMessageSize, int? randomAccessUrlTimeout, int? workerThreads);

        protected abstract ComAdobeCqDamS7imagingImplPsPlatformServerServletInfo ComAdobeCqDamS7imagingImplPsPlatformServerServlet(bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, bool? cacheEnable, List<string> cacheRootPaths, int? cacheMaxSize, int? cacheMaxEntries);

        protected abstract ComAdobeCqDamWebdavImplIoAssetIOHandlerInfo ComAdobeCqDamWebdavImplIoAssetIOHandler(bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, int? serviceRanking, string pathPrefix, bool? createVersion);

        protected abstract ComAdobeCqDamWebdavImplIoDamWebdavVersionLinkingJobInfo ComAdobeCqDamWebdavImplIoDamWebdavVersionLinkingJob(bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, bool? cqDamWebdavVersionLinkingEnable, int? cqDamWebdavVersionLinkingSchedulerPeriod, int? cqDamWebdavVersionLinkingStagingTimeout);

        protected abstract ComAdobeCqDamWebdavImplIoSpecialFilesHandlerInfo ComAdobeCqDamWebdavImplIoSpecialFilesHandler(bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, List<string> comDayCqDamCoreImplIoSpecialFilesHandlerFilepatters);

        protected abstract ComAdobeCqDeserfwImplDeserializationFirewallImplInfo ComAdobeCqDeserfwImplDeserializationFirewallImpl(bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, List<string> firewallDeserializationWhitelist, List<string> firewallDeserializationBlacklist, string firewallDeserializationDiagnostics);

        protected abstract ComAdobeCqDtmImplServiceDTMWebServiceImplInfo ComAdobeCqDtmImplServiceDTMWebServiceImpl(bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, int? connectionTimeout, int? socketTimeout);

        protected abstract ComAdobeCqDtmImplServletsDTMDeployHookServletInfo ComAdobeCqDtmImplServletsDTMDeployHookServlet(bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, List<string> dtmStagingIpWhitelist, List<string> dtmProductionIpWhitelist);

        protected abstract ComAdobeCqDtmReactorImplServiceWebServiceImplInfo ComAdobeCqDtmReactorImplServiceWebServiceImpl(bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, string endpointUri, int? connectionTimeout, int? socketTimeout);

        protected abstract ComAdobeCqExperiencelogImplExperienceLogConfigServletInfo ComAdobeCqExperiencelogImplExperienceLogConfigServlet(bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, bool? enabled, List<string> disabledForGroups);

        protected abstract ComAdobeCqHcContentPackagesHealthCheckInfo ComAdobeCqHcContentPackagesHealthCheck(bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, string hcName, List<string> hcTags, string hcMbeanName, List<string> packageNames);

        protected abstract ComAdobeCqHistoryImplHistoryRequestFilterInfo ComAdobeCqHistoryImplHistoryRequestFilter(bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, List<string> historyRequestFilterExcludedSelectors, List<string> historyRequestFilterExcludedExtensions);

        protected abstract ComAdobeCqHistoryImplHistoryServiceImplInfo ComAdobeCqHistoryImplHistoryServiceImpl(bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, List<string> historyServiceResourceTypes, List<string> historyServicePathFilter);

        protected abstract ComAdobeCqInboxImplTypeproviderItemTypeProviderInfo ComAdobeCqInboxImplTypeproviderItemTypeProvider(bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, List<string> inboxImplTypeproviderRegistrypaths, List<string> inboxImplTypeproviderLegacypaths, string inboxImplTypeproviderDefaulturlFailureitem, string inboxImplTypeproviderDefaulturlWorkitem, string inboxImplTypeproviderDefaulturlTask);

        protected abstract ComAdobeCqProjectsImplServletProjectImageServletInfo ComAdobeCqProjectsImplServletProjectImageServlet(bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, string imageQuality, string imageSupportedResolutions);

        protected abstract ComAdobeCqProjectsPurgeSchedulerInfo ComAdobeCqProjectsPurgeScheduler(bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, string scheduledpurgeName, bool? scheduledpurgePurgeActive, List<string> scheduledpurgeTemplates, bool? scheduledpurgePurgeGroups, bool? scheduledpurgePurgeAssets, bool? scheduledpurgeTerminateRunningWorkflows, int? scheduledpurgeDaysold, int? scheduledpurgeSaveThreshold);

        protected abstract ComAdobeCqScheduledExporterImplScheduledExporterImplInfo ComAdobeCqScheduledExporterImplScheduledExporterImpl(bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, List<string> includePaths, string exporterUser);

        protected abstract ComAdobeCqScreensAnalyticsImplScreensAnalyticsServiceImplInfo ComAdobeCqScreensAnalyticsImplScreensAnalyticsServiceImpl(bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, string comAdobeCqScreensAnalyticsImplUrl, string comAdobeCqScreensAnalyticsImplApikey, string comAdobeCqScreensAnalyticsImplProject, string comAdobeCqScreensAnalyticsImplEnvironment, int? comAdobeCqScreensAnalyticsImplSendFrequency);

        protected abstract ComAdobeCqScreensDeviceImplDeviceServiceInfo ComAdobeCqScreensDeviceImplDeviceService(bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, int? comAdobeAemScreensPlayerPingfrequency, string comAdobeAemScreensDevicePaswordSpecialchars, int? comAdobeAemScreensDevicePaswordMinlowercasechars, int? comAdobeAemScreensDevicePaswordMinuppercasechars, int? comAdobeAemScreensDevicePaswordMinnumberchars, int? comAdobeAemScreensDevicePaswordMinspecialchars, int? comAdobeAemScreensDevicePaswordMinlength);

        protected abstract ComAdobeCqScreensDeviceRegistrationImplRegistrationServiceImplInfo ComAdobeCqScreensDeviceRegistrationImplRegistrationServiceImpl(bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, int? deviceRegistrationTimeout);

        protected abstract ComAdobeCqScreensImplHandlerChannelsUpdateHandlerInfo ComAdobeCqScreensImplHandlerChannelsUpdateHandler(bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, List<string> cqPagesupdatehandlerImageresourcetypes, List<string> cqPagesupdatehandlerProductresourcetypes, List<string> cqPagesupdatehandlerVideoresourcetypes, List<string> cqPagesupdatehandlerDynamicsequenceresourcetypes, List<string> cqPagesupdatehandlerPreviewmodepaths);

        protected abstract ComAdobeCqScreensImplJobsDistributedDevicesStatiUpdateJobInfo ComAdobeCqScreensImplJobsDistributedDevicesStatiUpdateJob(bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, string schedulerExpression);

        protected abstract ComAdobeCqScreensImplRemoteImplDistributedHttpClientImplInfo ComAdobeCqScreensImplRemoteImplDistributedHttpClientImpl(bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, int? comAdobeAemScreensImplRemoteRequestTimeout);

        protected abstract ComAdobeCqScreensImplScreensChannelPostProcessorInfo ComAdobeCqScreensImplScreensChannelPostProcessor(bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, List<string> screensChannelsPropertiesToRemove);

        protected abstract ComAdobeCqScreensMonitoringImplScreensMonitoringServiceImplInfo ComAdobeCqScreensMonitoringImplScreensMonitoringServiceImpl(bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, List<string> comAdobeCqScreensMonitoringImplScreensMonitoringServiceImplProjectPath, string comAdobeCqScreensMonitoringImplScreensMonitoringServiceImplScheduleFrequency, int? comAdobeCqScreensMonitoringImplScreensMonitoringServiceImplPingTimeout, string comAdobeCqScreensMonitoringImplScreensMonitoringServiceImplRecipients, string comAdobeCqScreensMonitoringImplScreensMonitoringServiceImplSmtpserver, int? comAdobeCqScreensMonitoringImplScreensMonitoringServiceImplSmtpport, bool? comAdobeCqScreensMonitoringImplScreensMonitoringServiceImplUsetls, string comAdobeCqScreensMonitoringImplScreensMonitoringServiceImplUsername, string comAdobeCqScreensMonitoringImplScreensMonitoringServiceImplPassword);

        protected abstract ComAdobeCqScreensMqActivemqImplArtemisJMSProviderInfo ComAdobeCqScreensMqActivemqImplArtemisJMSProvider(bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, int? serviceRanking, int? globalSize, int? maxDiskUsage, bool? persistenceEnabled, int? threadPoolMaxSize, int? scheduledThreadPoolMaxSize, int? gracefulShutdownTimeout, List<string> queues, List<string> topics, int? addressesMaxDeliveryAttempts, int? addressesExpiryDelay, string addressesAddressFullMessagePolicy, int? addressesMaxSizeBytes, int? addressesPageSizeBytes, int? addressesPageCacheMaxSize, string clusterUser, string clusterPassword, int? clusterCallTimeout, int? clusterCallFailoverTimeout, int? clusterClientFailureCheckPeriod, int? clusterNotificationAttempts, int? clusterNotificationInterval, int? idCacheSize, int? clusterConfirmationWindowSize, int? clusterConnectionTtl, bool? clusterDuplicateDetection, int? clusterInitialConnectAttempts, int? clusterMaxRetryInterval, int? clusterMinLargeMessageSize, int? clusterProducerWindowSize, int? clusterReconnectAttempts, int? clusterRetryInterval, decimal? clusterRetryIntervalMultiplier);

        protected abstract ComAdobeCqScreensOfflinecontentImplBulkOfflineUpdateServiceImplInfo ComAdobeCqScreensOfflinecontentImplBulkOfflineUpdateServiceImpl(bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, List<string> comAdobeCqScreensOfflinecontentImplBulkOfflineUpdateServiceImplProjectPath, string comAdobeCqScreensOfflinecontentImplBulkOfflineUpdateServiceImplScheduleFrequency);

        protected abstract ComAdobeCqScreensOfflinecontentImplOfflineContentServiceImplInfo ComAdobeCqScreensOfflinecontentImplOfflineContentServiceImpl(bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, bool? disableSmartSync);

        protected abstract ComAdobeCqScreensSegmentationImplSegmentationFeatureFlagInfo ComAdobeCqScreensSegmentationImplSegmentationFeatureFlag(bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, bool? enableDataTriggeredContent);

        protected abstract ComAdobeCqSecurityHcBundlesImplHtmlLibraryManagerConfigHealthChInfo ComAdobeCqSecurityHcBundlesImplHtmlLibraryManagerConfigHealthCh(bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, List<string> hcTags);

        protected abstract ComAdobeCqSecurityHcBundlesImplWcmFilterHealthCheckInfo ComAdobeCqSecurityHcBundlesImplWcmFilterHealthCheck(bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, List<string> hcTags);

        protected abstract ComAdobeCqSecurityHcDispatcherImplDispatcherAccessHealthCheckInfo ComAdobeCqSecurityHcDispatcherImplDispatcherAccessHealthCheck(bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, List<string> hcTags, string dispatcherAddress, List<string> dispatcherFilterAllowed, List<string> dispatcherFilterBlocked);

        protected abstract ComAdobeCqSecurityHcPackagesImplExampleContentHealthCheckInfo ComAdobeCqSecurityHcPackagesImplExampleContentHealthCheck(bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, List<string> hcTags);

        protected abstract ComAdobeCqSecurityHcWebserverImplClickjackingHealthCheckInfo ComAdobeCqSecurityHcWebserverImplClickjackingHealthCheck(bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, List<string> hcTags, string webserverAddress);

        protected abstract ComAdobeCqSocialAccountverificationImplAccountManagementConfigImInfo ComAdobeCqSocialAccountverificationImplAccountManagementConfigIm(bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, bool? enable, int? ttl1, int? ttl2);

        protected abstract ComAdobeCqSocialActivitystreamsClientImplSocialActivityComponenInfo ComAdobeCqSocialActivitystreamsClientImplSocialActivityComponen(bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, int? priority);

        protected abstract ComAdobeCqSocialActivitystreamsClientImplSocialActivityStreamCoInfo ComAdobeCqSocialActivitystreamsClientImplSocialActivityStreamCo(bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, int? priority);

        protected abstract ComAdobeCqSocialActivitystreamsListenerImplEventListenerHandlerInfo ComAdobeCqSocialActivitystreamsListenerImplEventListenerHandler(bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, string eventTopics, string eventFilter);

        protected abstract ComAdobeCqSocialActivitystreamsListenerImplModerationEventExtenInfo ComAdobeCqSocialActivitystreamsListenerImplModerationEventExten(bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, bool? accepted, int? ranked);

        protected abstract ComAdobeCqSocialActivitystreamsListenerImplRatingEventActivitySInfo ComAdobeCqSocialActivitystreamsListenerImplRatingEventActivityS(bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, int? ranking, bool? enable);

        protected abstract ComAdobeCqSocialActivitystreamsListenerImplResourceActivityStreInfo ComAdobeCqSocialActivitystreamsListenerImplResourceActivityStre(bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, string streamPath, string streamName);

        protected abstract ComAdobeCqSocialCalendarClientEndpointsImplCalendarOperationsIInfo ComAdobeCqSocialCalendarClientEndpointsImplCalendarOperationsI(bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, int? maxRetry, List<string> fieldWhitelist, List<string> attachmentTypeBlacklist);

        protected abstract ComAdobeCqSocialCalendarClientOperationextensionsEventAttachmenInfo ComAdobeCqSocialCalendarClientOperationextensionsEventAttachmen(bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, string attachmentTypeBlacklist, int? extensionOrder);

        protected abstract ComAdobeCqSocialCalendarServletsTimeZoneServletInfo ComAdobeCqSocialCalendarServletsTimeZoneServlet(bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, int? timezonesExpirytime);

        protected abstract ComAdobeCqSocialCommonsCommentsEndpointsImplCommentDeleteEventInfo ComAdobeCqSocialCommonsCommentsEndpointsImplCommentDeleteEvent(bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, int? ranking);

        protected abstract ComAdobeCqSocialCommonsCommentsEndpointsImplCommentOperationSeInfo ComAdobeCqSocialCommonsCommentsEndpointsImplCommentOperationSe(bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, List<string> fieldWhitelist, List<string> attachmentTypeBlacklist);

        protected abstract ComAdobeCqSocialCommonsCommentsEndpointsImplTranslationOperatiInfo ComAdobeCqSocialCommonsCommentsEndpointsImplTranslationOperati(bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, List<string> fieldWhitelist, List<string> attachmentTypeBlacklist);

        protected abstract ComAdobeCqSocialCommonsCommentsListingImplSearchCommentSocialCInfo ComAdobeCqSocialCommonsCommentsListingImplSearchCommentSocialC(bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, int? numUserLimit);

        protected abstract ComAdobeCqSocialCommonsCommentsSchedulerImplSearchScheduledPosInfo ComAdobeCqSocialCommonsCommentsSchedulerImplSearchScheduledPos(bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, bool? enableScheduledPostsSearch, int? numberOfMinutes, int? maxSearchLimit);

        protected abstract ComAdobeCqSocialCommonsCorsCORSAuthenticationFilterInfo ComAdobeCqSocialCommonsCorsCORSAuthenticationFilter(bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, bool? corsEnabling);

        protected abstract ComAdobeCqSocialCommonsEmailreplyImplAndroidEmailClientProviderInfo ComAdobeCqSocialCommonsEmailreplyImplAndroidEmailClientProvider(bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, int? priorityOrder, List<string> replyEmailPatterns);

        protected abstract ComAdobeCqSocialCommonsEmailreplyImplCommentEmailBuilderImplInfo ComAdobeCqSocialCommonsEmailreplyImplCommentEmailBuilderImpl(bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, string contextPath);

        protected abstract ComAdobeCqSocialCommonsEmailreplyImplCommentEmailEventListenerInfo ComAdobeCqSocialCommonsEmailreplyImplCommentEmailEventListener(bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, string eventTopics);

        protected abstract ComAdobeCqSocialCommonsEmailreplyImplCustomEmailClientProviderInfo ComAdobeCqSocialCommonsEmailreplyImplCustomEmailClientProvider(bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, int? priorityOrder, List<string> replyEmailPatterns);

        protected abstract ComAdobeCqSocialCommonsEmailreplyImplEmailQuotedTextPatternsImpInfo ComAdobeCqSocialCommonsEmailreplyImplEmailQuotedTextPatternsImp(bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, string patternTime, string patternNewline, string patternDayOfMonth, string patternMonth, string patternYear, string patternDate, string patternDateTime, string patternEmail);

        protected abstract ComAdobeCqSocialCommonsEmailreplyImplEmailReplyConfigurationImpInfo ComAdobeCqSocialCommonsEmailreplyImplEmailReplyConfigurationImp(bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, string emailName, bool? emailCreatePostFromReply, string emailAddCommentIdTo, int? emailSubjectMaximumLength, string emailReplyToAddress, string emailReplyToDelimiter, string emailTrackerIdPrefixInSubject, string emailTrackerIdPrefixInBody, bool? emailAsHTML, string emailDefaultUserName, string emailTemplatesRootPath);

        protected abstract ComAdobeCqSocialCommonsEmailreplyImplEmailReplyImporterInfo ComAdobeCqSocialCommonsEmailreplyImplEmailReplyImporter(bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, string connectProtocol);

        protected abstract ComAdobeCqSocialCommonsEmailreplyImplGmailEmailClientProviderInfo ComAdobeCqSocialCommonsEmailreplyImplGmailEmailClientProvider(bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, int? priorityOrder, List<string> replyEmailPatterns);

        protected abstract ComAdobeCqSocialCommonsEmailreplyImplIOSEmailClientProviderInfo ComAdobeCqSocialCommonsEmailreplyImplIOSEmailClientProvider(bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, int? priorityOrder, List<string> replyEmailPatterns);

        protected abstract ComAdobeCqSocialCommonsEmailreplyImplMacmailEmailClientProviderInfo ComAdobeCqSocialCommonsEmailreplyImplMacmailEmailClientProvider(bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, int? priorityOrder, List<string> replyEmailPatterns);

        protected abstract ComAdobeCqSocialCommonsEmailreplyImplOutLookEmailClientProviderInfo ComAdobeCqSocialCommonsEmailreplyImplOutLookEmailClientProvider(bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, int? priorityOrder, List<string> replyEmailPatterns);

        protected abstract ComAdobeCqSocialCommonsEmailreplyImplUnknownEmailClientProviderInfo ComAdobeCqSocialCommonsEmailreplyImplUnknownEmailClientProvider(bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, List<string> replyEmailPatterns, int? priorityOrder);

        protected abstract ComAdobeCqSocialCommonsEmailreplyImplYahooEmailClientProviderInfo ComAdobeCqSocialCommonsEmailreplyImplYahooEmailClientProvider(bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, int? priorityOrder, List<string> replyEmailPatterns);

        protected abstract ComAdobeCqSocialCommonsMaintainanceImplDeleteTempUGCImageUploadInfo ComAdobeCqSocialCommonsMaintainanceImplDeleteTempUGCImageUpload(bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, int? numberOfDays, int? ageOfFile);

        protected abstract ComAdobeCqSocialCommonsUgclimiterImplUGCLimiterServiceImplInfo ComAdobeCqSocialCommonsUgclimiterImplUGCLimiterServiceImpl(bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, string eventTopics, string eventFilter, List<string> verbs);

        protected abstract ComAdobeCqSocialCommonsUgclimitsconfigImplCommunityUserUGCLimitInfo ComAdobeCqSocialCommonsUgclimitsconfigImplCommunityUserUGCLimit(bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, bool? enable, int? uGCLimit, int? ugcLimitDuration, List<string> domains, List<string> toList);

        protected abstract ComAdobeCqSocialConnectOauthImplFacebookProviderImplInfo ComAdobeCqSocialConnectOauthImplFacebookProviderImpl(bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, string oauthProviderId, string oauthCloudConfigRoot, string providerConfigRoot, bool? providerConfigCreateTagsEnabled, string providerConfigUserFolder, bool? providerConfigFacebookFetchFields, List<string> providerConfigFacebookFields, bool? providerConfigRefreshUserdataEnabled);

        protected abstract ComAdobeCqSocialConnectOauthImplSocialOAuthAuthenticationHandleInfo ComAdobeCqSocialConnectOauthImplSocialOAuthAuthenticationHandle(bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, List<string> path, int? serviceRanking);

        protected abstract ComAdobeCqSocialConnectOauthImplSocialOAuthUserProfileMapperInfo ComAdobeCqSocialConnectOauthImplSocialOAuthUserProfileMapper(bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, List<string> facebook, List<string> twitter, string providerConfigUserFolder);

        protected abstract ComAdobeCqSocialConnectOauthImplTwitterProviderImplInfo ComAdobeCqSocialConnectOauthImplTwitterProviderImpl(bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, string oauthProviderId, string oauthCloudConfigRoot, string providerConfigRoot, string providerConfigUserFolder, bool? providerConfigTwitterEnableParams, List<string> providerConfigTwitterParams, bool? providerConfigRefreshUserdataEnabled);

        protected abstract ComAdobeCqSocialContentFragmentsServicesImplCommunitiesFragmenInfo ComAdobeCqSocialContentFragmentsServicesImplCommunitiesFragmen(bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, bool? cqSocialContentFragmentsServicesEnabled, int? cqSocialContentFragmentsServicesWaitTimeSeconds);

        protected abstract ComAdobeCqSocialDatastoreAsImplASResourceProviderFactoryInfo ComAdobeCqSocialDatastoreAsImplASResourceProviderFactory(bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, string versionId, bool? cacheOn, int? concurrencyLevel, int? cacheStartSize, int? cacheTtl, int? cacheSize, int? timeLimit);

        protected abstract ComAdobeCqSocialDatastoreOpImplSocialMSResourceProviderFactoryInfo ComAdobeCqSocialDatastoreOpImplSocialMSResourceProviderFactory(bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, string solrZkTimeout, string solrCommit, bool? cacheOn, int? concurrencyLevel, int? cacheStartSize, int? cacheTtl, int? cacheSize);

        protected abstract ComAdobeCqSocialDatastoreRdbImplSocialRDBResourceProviderFactorInfo ComAdobeCqSocialDatastoreRdbImplSocialRDBResourceProviderFactor(bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, string solrZkTimeout, string solrCommit, bool? cacheOn, int? concurrencyLevel, int? cacheStartSize, int? cacheTtl, int? cacheSize);

        protected abstract ComAdobeCqSocialEnablementAdaptorsEnablementLearningPathAdaptorFInfo ComAdobeCqSocialEnablementAdaptorsEnablementLearningPathAdaptorF(bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, bool? isMemberCheck);

        protected abstract ComAdobeCqSocialEnablementAdaptorsEnablementResourceAdaptorFactoInfo ComAdobeCqSocialEnablementAdaptorsEnablementResourceAdaptorFacto(bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, bool? isMemberCheck);

        protected abstract ComAdobeCqSocialEnablementLearningpathEndpointsImplEnablementLInfo ComAdobeCqSocialEnablementLearningpathEndpointsImplEnablementL(bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, List<string> fieldWhitelist);

        protected abstract ComAdobeCqSocialEnablementResourceEndpointsImplEnablementResouInfo ComAdobeCqSocialEnablementResourceEndpointsImplEnablementResou(bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, List<string> fieldWhitelist);

        protected abstract ComAdobeCqSocialEnablementServicesImplAuthorMarkerImplInfo ComAdobeCqSocialEnablementServicesImplAuthorMarkerImpl(bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, int? serviceRanking);

        protected abstract ComAdobeCqSocialFilelibraryClientEndpointsFilelibraryDownloadGeInfo ComAdobeCqSocialFilelibraryClientEndpointsFilelibraryDownloadGe(bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, string slingServletSelectors, string slingServletExtensions);

        protected abstract ComAdobeCqSocialFilelibraryClientEndpointsImplFileLibraryOperaInfo ComAdobeCqSocialFilelibraryClientEndpointsImplFileLibraryOpera(bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, List<string> fieldWhitelist, List<string> attachmentTypeBlacklist);

        protected abstract ComAdobeCqSocialForumClientEndpointsImplForumOperationsServiceInfo ComAdobeCqSocialForumClientEndpointsImplForumOperationsService(bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, List<string> fieldWhitelist, List<string> attachmentTypeBlacklist);

        protected abstract ComAdobeCqSocialForumDispatcherImplFlushOperationsInfo ComAdobeCqSocialForumDispatcherImplFlushOperations(bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, int? extensionOrder, bool? flushForumontopic);

        protected abstract ComAdobeCqSocialGroupClientImplCommunityGroupCollectionComponenInfo ComAdobeCqSocialGroupClientImplCommunityGroupCollectionComponen(bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, bool? groupListingPaginationEnable, bool? groupListingLazyloadingEnable, int? pageSize, int? priority);

        protected abstract ComAdobeCqSocialGroupImplGroupServiceImplInfo ComAdobeCqSocialGroupImplGroupServiceImpl(bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, int? maxWaitTime, int? minWaitBetweenRetries);

        protected abstract ComAdobeCqSocialHandlebarsGuavaTemplateCacheImplInfo ComAdobeCqSocialHandlebarsGuavaTemplateCacheImpl(bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, bool? parameterGuavaCacheEnabled, string parameterGuavaCacheParams, bool? parameterGuavaCacheReload, int? serviceRanking);

        protected abstract ComAdobeCqSocialIdeationClientEndpointsImplIdeationOperationsSInfo ComAdobeCqSocialIdeationClientEndpointsImplIdeationOperationsS(bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, List<string> fieldWhitelist, List<string> attachmentTypeBlacklist);

        protected abstract ComAdobeCqSocialJournalClientEndpointsImplJournalOperationsSerInfo ComAdobeCqSocialJournalClientEndpointsImplJournalOperationsSer(bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, List<string> fieldWhitelist, List<string> attachmentTypeBlacklist);

        protected abstract ComAdobeCqSocialMembersEndpointsImplCommunityMemberGroupProfileInfo ComAdobeCqSocialMembersEndpointsImplCommunityMemberGroupProfile(bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, List<string> fieldWhitelist);

        protected abstract ComAdobeCqSocialMembersEndpointsImplCommunityMemberUserProfileOInfo ComAdobeCqSocialMembersEndpointsImplCommunityMemberUserProfileO(bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, List<string> fieldWhitelist);

        protected abstract ComAdobeCqSocialMembersImplCommunityMemberGroupProfileComponentFInfo ComAdobeCqSocialMembersImplCommunityMemberGroupProfileComponentF(bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, int? everyoneLimit, int? priority);

        protected abstract ComAdobeCqSocialMessagingClientEndpointsImplMessagingOperationInfo ComAdobeCqSocialMessagingClientEndpointsImplMessagingOperation(bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, List<string> messageProperties, int? messageBoxSizeLimit, int? messageCountLimit, bool? notifyFailure, string failureMessageFrom, string failureTemplatePath, int? maxRetries, int? minWaitBetweenRetries, int? countUpdatePoolSize, string inboxPath, string sentitemsPath, bool? supportAttachments, bool? supportGroupMessaging, int? maxTotalRecipients, int? batchSize, int? maxTotalAttachmentSize, List<string> attachmentTypeBlacklist, List<string> allowedAttachmentTypes, string serviceSelector, List<string> fieldWhitelist);

        protected abstract ComAdobeCqSocialModerationDashboardApiFilterGroupSocialComponenInfo ComAdobeCqSocialModerationDashboardApiFilterGroupSocialComponen(bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, List<string> resourceTypeFilters, int? priority);

        protected abstract ComAdobeCqSocialModerationDashboardApiModerationDashboardSocialInfo ComAdobeCqSocialModerationDashboardApiModerationDashboardSocial(bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, int? priority);

        protected abstract ComAdobeCqSocialModerationDashboardApiUserDetailsSocialComponenInfo ComAdobeCqSocialModerationDashboardApiUserDetailsSocialComponen(bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, int? priority);

        protected abstract ComAdobeCqSocialModerationDashboardInternalImplFilterGroupSociInfo ComAdobeCqSocialModerationDashboardInternalImplFilterGroupSoci(bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, List<string> resourceTypeFilters, int? priority);

        protected abstract ComAdobeCqSocialNotificationsImplMentionsRouterInfo ComAdobeCqSocialNotificationsImplMentionsRouter(bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, string eventTopics, string eventFilter);

        protected abstract ComAdobeCqSocialNotificationsImplNotificationManagerImplInfo ComAdobeCqSocialNotificationsImplNotificationManagerImpl(bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, int? maxUnreadNotificationCount);

        protected abstract ComAdobeCqSocialNotificationsImplNotificationsRouterInfo ComAdobeCqSocialNotificationsImplNotificationsRouter(bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, string eventTopics, string eventFilter);

        protected abstract ComAdobeCqSocialQnaClientEndpointsImplQnaForumOperationsServicInfo ComAdobeCqSocialQnaClientEndpointsImplQnaForumOperationsServic(bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, List<string> fieldWhitelist, List<string> attachmentTypeBlacklist);

        protected abstract ComAdobeCqSocialReportingAnalyticsServicesImplAnalyticsReportIInfo ComAdobeCqSocialReportingAnalyticsServicesImplAnalyticsReportI(bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, int? cqSocialReportingAnalyticsPollingImporterInterval, int? cqSocialReportingAnalyticsPollingImporterPageSize);

        protected abstract ComAdobeCqSocialReportingAnalyticsServicesImplAnalyticsReportMInfo ComAdobeCqSocialReportingAnalyticsServicesImplAnalyticsReportM(bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, int? reportFetchDelay);

        protected abstract ComAdobeCqSocialReportingAnalyticsServicesImplSiteTrendReportSInfo ComAdobeCqSocialReportingAnalyticsServicesImplSiteTrendReportS(bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, List<string> cqSocialConsoleAnalyticsSitesMapping, int? priority);

        protected abstract ComAdobeCqSocialReviewClientEndpointsImplReviewOperationsServiInfo ComAdobeCqSocialReviewClientEndpointsImplReviewOperationsServi(bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, List<string> fieldWhitelist, List<string> attachmentTypeBlacklist);

        protected abstract ComAdobeCqSocialScfCoreOperationsImplSocialOperationsServletInfo ComAdobeCqSocialScfCoreOperationsImplSocialOperationsServlet(bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, string slingServletSelectors, string slingServletExtensions);

        protected abstract ComAdobeCqSocialScfEndpointsImplDefaultSocialGetServletInfo ComAdobeCqSocialScfEndpointsImplDefaultSocialGetServlet(bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, List<string> slingServletSelectors, string slingServletExtensions);

        protected abstract ComAdobeCqSocialScoringImplScoringEventListenerInfo ComAdobeCqSocialScoringImplScoringEventListener(bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, string eventTopics, string eventFilter);

        protected abstract ComAdobeCqSocialServiceusersInternalImplServiceUserWrapperImplInfo ComAdobeCqSocialServiceusersInternalImplServiceUserWrapperImpl(bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, bool? enableFallback);

        protected abstract ComAdobeCqSocialSiteEndpointsImplSiteOperationServiceInfo ComAdobeCqSocialSiteEndpointsImplSiteOperationService(bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, List<string> fieldWhitelist, List<string> sitePathFilters, string sitePackageGroup);

        protected abstract ComAdobeCqSocialSiteImplAnalyticsComponentConfigurationServiceImInfo ComAdobeCqSocialSiteImplAnalyticsComponentConfigurationServiceIm(bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, List<string> cqSocialConsoleAnalyticsComponents);

        protected abstract ComAdobeCqSocialSiteImplSiteConfiguratorImplInfo ComAdobeCqSocialSiteImplSiteConfiguratorImpl(bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, List<string> componentsUsingTags);

        protected abstract ComAdobeCqSocialSrpImplSocialSolrConnectorInfo ComAdobeCqSocialSrpImplSocialSolrConnector(bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, string srpType);

        protected abstract ComAdobeCqSocialSyncImplDiffChangesObserverInfo ComAdobeCqSocialSyncImplDiffChangesObserver(bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, bool? enabled, string agentName, string diffPath, string propertyNames);

        protected abstract ComAdobeCqSocialSyncImplGroupSyncListenerImplInfo ComAdobeCqSocialSyncImplGroupSyncListenerImpl(bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, List<string> nodetypes, List<string> ignorableprops, string ignorablenodes, bool? enabled, string distfolders);

        protected abstract ComAdobeCqSocialSyncImplPublisherSyncServiceImplInfo ComAdobeCqSocialSyncImplPublisherSyncServiceImpl(bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, List<string> activeRunModes);

        protected abstract ComAdobeCqSocialSyncImplUserSyncListenerImplInfo ComAdobeCqSocialSyncImplUserSyncListenerImpl(bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, List<string> nodetypes, List<string> ignorableprops, List<string> ignorablenodes, bool? enabled, List<string> distfolders);

        protected abstract ComAdobeCqSocialTranslationImplTranslationServiceConfigManagerInfo ComAdobeCqSocialTranslationImplTranslationServiceConfigManager(bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, string translateLanguage, string translateDisplay, bool? translateAttribution, string translateCaching, string translateSmartRendering, string translateCachingDuration, string translateSessionSaveInterval, string translateSessionSaveBatchLimit);

        protected abstract ComAdobeCqSocialTranslationImplUGCLanguageDetectorInfo ComAdobeCqSocialTranslationImplUGCLanguageDetector(bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, string eventTopics, string eventFilter, List<string> translateListenerType, List<string> translatePropertyList, int? poolSize, int? maxPoolSize, int? queueSize, int? keepAliveTime);

        protected abstract ComAdobeCqSocialUgcbaseDispatcherImplFlushServiceImplInfo ComAdobeCqSocialUgcbaseDispatcherImplFlushServiceImpl(bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, int? threadPoolSize, int? delayTime, int? workerSleepTime);

        protected abstract ComAdobeCqSocialUgcbaseImplAysncReverseReplicatorImplInfo ComAdobeCqSocialUgcbaseImplAysncReverseReplicatorImpl(bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, int? poolSize, int? maxPoolSize, int? queueSize, int? keepAliveTime);

        protected abstract ComAdobeCqSocialUgcbaseImplPublisherConfigurationImplInfo ComAdobeCqSocialUgcbaseImplPublisherConfigurationImpl(bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, bool? isPrimaryPublisher);

        protected abstract ComAdobeCqSocialUgcbaseImplSocialUtilsImplInfo ComAdobeCqSocialUgcbaseImplSocialUtilsImpl(bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, bool? legacyCloudUGCPathMapping);

        protected abstract ComAdobeCqSocialUgcbaseModerationImplAutoModerationImplInfo ComAdobeCqSocialUgcbaseModerationImplAutoModerationImpl(bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, List<string> automoderationSequence, bool? automoderationOnfailurestop);

        protected abstract ComAdobeCqSocialUgcbaseModerationImplSentimentProcessInfo ComAdobeCqSocialUgcbaseModerationImplSentimentProcess(bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, List<string> watchwordsPositive, List<string> watchwordsNegative, string watchwordsPath, string sentimentPath);

        protected abstract ComAdobeCqSocialUgcbaseSecurityImplDefaultAttachmentTypeBlackliInfo ComAdobeCqSocialUgcbaseSecurityImplDefaultAttachmentTypeBlackli(bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, List<string> defaultAttachmentTypeBlacklist, List<string> baselineAttachmentTypeBlacklist);

        protected abstract ComAdobeCqSocialUgcbaseSecurityImplSaferSlingPostValidatorImplInfo ComAdobeCqSocialUgcbaseSecurityImplSaferSlingPostValidatorImpl(bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, List<string> parameterWhitelist, List<string> parameterWhitelistPrefixes, List<string> binaryParameterWhitelist, List<string> modifierWhitelist, List<string> operationWhitelist, List<string> operationWhitelistPrefixes, List<string> typehintWhitelist, List<string> resourcetypeWhitelist);

        protected abstract ComAdobeCqSocialUserEndpointsImplUsersGroupFromPublishServletInfo ComAdobeCqSocialUserEndpointsImplUsersGroupFromPublishServlet(bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, string slingServletExtensions, string slingServletPaths, string slingServletMethods);

        protected abstract ComAdobeCqSocialUserImplTransportHttpToPublisherInfo ComAdobeCqSocialUserImplTransportHttpToPublisher(bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, bool? enable, List<string> agentConfiguration, string contextPath, List<string> disabledCipherSuites, List<string> enabledCipherSuites);

        protected abstract ComAdobeCqUiWcmCommonsInternalServletsRteRTEFilterServletFactInfo ComAdobeCqUiWcmCommonsInternalServletsRteRTEFilterServletFact(bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, List<string> resourceTypes);

        protected abstract ComAdobeCqUpgradesCleanupImplUpgradeContentCleanupInfo ComAdobeCqUpgradesCleanupImplUpgradeContentCleanup(bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, List<string> deletePathRegexps, string deleteSql2Query);

        protected abstract ComAdobeCqUpgradesCleanupImplUpgradeInstallFolderCleanupInfo ComAdobeCqUpgradesCleanupImplUpgradeInstallFolderCleanup(bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, List<string> deleteNameRegexps);

        protected abstract ComAdobeCqWcmJobsAsyncImplAsyncDeleteConfigProviderServiceInfo ComAdobeCqWcmJobsAsyncImplAsyncDeleteConfigProviderService(bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, int? threshold, string jobTopicName, bool? emailEnabled);

        protected abstract ComAdobeCqWcmJobsAsyncImplAsyncJobCleanUpTaskInfo ComAdobeCqWcmJobsAsyncImplAsyncJobCleanUpTask(bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, string schedulerExpression, int? jobPurgeThreshold, int? jobPurgeMaxJobs);

        protected abstract ComAdobeCqWcmJobsAsyncImplAsyncMoveConfigProviderServiceInfo ComAdobeCqWcmJobsAsyncImplAsyncMoveConfigProviderService(bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, int? threshold, string jobTopicName, bool? emailEnabled);

        protected abstract ComAdobeCqWcmJobsAsyncImplAsyncPageMoveConfigProviderServiceInfo ComAdobeCqWcmJobsAsyncImplAsyncPageMoveConfigProviderService(bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, int? threshold, string jobTopicName, bool? emailEnabled);

        protected abstract ComAdobeCqWcmLaunchesImplLaunchesEventHandlerInfo ComAdobeCqWcmLaunchesImplLaunchesEventHandler(bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, string eventFilter, int? launchesEventhandlerThreadpoolMaxsize, string launchesEventhandlerThreadpoolPriority, bool? launchesEventhandlerUpdatelastmodification);

        protected abstract ComAdobeCqWcmMobileQrcodeServletQRCodeImageGeneratorInfo ComAdobeCqWcmMobileQrcodeServletQRCodeImageGenerator(bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, List<string> cqWcmQrcodeServletWhitelist);

        protected abstract ComAdobeCqWcmStyleInternalComponentStyleInfoCacheImplInfo ComAdobeCqWcmStyleInternalComponentStyleInfoCacheImpl(bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, int? size);

        protected abstract ComAdobeCqWcmTranslationImplTranslationPlatformConfigurationImplInfo ComAdobeCqWcmTranslationImplTranslationPlatformConfigurationImpl(bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, string syncTranslationStateSchedulingFormat, string schedulingRepeatTranslationSchedulingFormat, string syncTranslationStateLockTimeoutInMinutes, string exportFormat);

        protected abstract ComAdobeFdFpConfigFormsPortalDraftsandSubmissionConfigServiceInfo ComAdobeFdFpConfigFormsPortalDraftsandSubmissionConfigService(bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, List<string> portalOutboxes, string draftDataService, string draftMetadataService, string submitDataService, string submitMetadataService, string pendingSignDataService, string pendingSignMetadataService);

        protected abstract ComAdobeFdFpConfigFormsPortalSchedulerServiceInfo ComAdobeFdFpConfigFormsPortalSchedulerService(bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, string formportalInterval);

        protected abstract ComAdobeFormsCommonServiceImplDefaultDataProviderInfo ComAdobeFormsCommonServiceImplDefaultDataProvider(bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, List<string> alloweddataFileLocations);

        protected abstract ComAdobeFormsCommonServiceImplFormsCommonConfigurationServiceImpInfo ComAdobeFormsCommonServiceImplFormsCommonConfigurationServiceImp(bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, string tempStorageConfig);

        protected abstract ComAdobeFormsCommonServletTempCleanUpTaskInfo ComAdobeFormsCommonServletTempCleanUpTask(bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, string schedulerExpression, string durationForTemporaryStorage, string durationForAnonymousStorage);

        protected abstract ComAdobeGraniteAcpPlatformPlatformServletInfo ComAdobeGraniteAcpPlatformPlatformServlet(bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, int? queryLimit, List<string> fileTypeExtensionMap);

        protected abstract ComAdobeGraniteActivitystreamsImplActivityManagerImplInfo ComAdobeGraniteActivitystreamsImplActivityManagerImpl(bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, List<string> aggregateRelationships, bool? aggregateDescendVirtual);

        protected abstract ComAdobeGraniteAnalyzerBaseSystemStatusServletInfo ComAdobeGraniteAnalyzerBaseSystemStatusServlet(bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, bool? disabled);

        protected abstract ComAdobeGraniteAnalyzerScriptsCompileAllScriptsCompilerServletInfo ComAdobeGraniteAnalyzerScriptsCompileAllScriptsCompilerServlet(bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, bool? disabled);

        protected abstract ComAdobeGraniteApicontrollerFilterResolverHookFactoryInfo ComAdobeGraniteApicontrollerFilterResolverHookFactory(bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, string comAdobeCqCdnCdnRewriter, string comAdobeCqCloudConfigComponents, string comAdobeCqCloudConfigCore, string comAdobeCqCloudConfigUi, string comAdobeCqComAdobeCqEditor, string comAdobeCqComAdobeCqProjectsCore, string comAdobeCqComAdobeCqProjectsWcmCore, string comAdobeCqComAdobeCqUiCommons, string comAdobeCqComAdobeCqWcmStyle, string comAdobeCqCqActivitymapIntegration, string comAdobeCqCqContexthubCommons, string comAdobeCqCqDtm, string comAdobeCqCqHealthcheck, string comAdobeCqCqMultisiteTargeting, string comAdobeCqCqPreUpgradeCleanup, string comAdobeCqCqProductInfoProvider, string comAdobeCqCqRestSites, string comAdobeCqCqSecurityHc, string comAdobeCqDamCqDamSvgHandler, string comAdobeCqDamCqScene7Imaging, string comAdobeCqDtmReactorCore, string comAdobeCqDtmReactorUi, string comAdobeCqExpJspelResolver, string comAdobeCqInboxCqInbox, string comAdobeCqJsonSchemaParser, string comAdobeCqMediaCqMediaPublishingDpsFpCore, string comAdobeCqMobileCqMobileCaas, string comAdobeCqMobileCqMobileIndexBuilder, string comAdobeCqMobileCqMobilePhonegapBuild, string comAdobeCqMyspell, string comAdobeCqSampleWeRetailCore, string comAdobeCqScreensComAdobeCqScreensDcc, string comAdobeCqScreensComAdobeCqScreensMqCore, string comAdobeCqSocialCqSocialAsProvider, string comAdobeCqSocialCqSocialBadgingBasicImpl, string comAdobeCqSocialCqSocialBadgingImpl, string comAdobeCqSocialCqSocialCalendarImpl, string comAdobeCqSocialCqSocialContentFragmentsImpl, string comAdobeCqSocialCqSocialEnablementImpl, string comAdobeCqSocialCqSocialGraphImpl, string comAdobeCqSocialCqSocialIdeationImpl, string comAdobeCqSocialCqSocialJcrProvider, string comAdobeCqSocialCqSocialMembersImpl, string comAdobeCqSocialCqSocialMsProvider, string comAdobeCqSocialCqSocialNotificationsChannelsWeb, string comAdobeCqSocialCqSocialNotificationsImpl, string comAdobeCqSocialCqSocialRdbProvider, string comAdobeCqSocialCqSocialScfImpl, string comAdobeCqSocialCqSocialScoringBasicImpl, string comAdobeCqSocialCqSocialScoringImpl, string comAdobeCqSocialCqSocialServiceusersImpl, string comAdobeCqSocialCqSocialSrpImpl, string comAdobeCqSocialCqSocialUgcbaseImpl, string comAdobeDamCqDamCfmImpl, string comAdobeFormsFoundationFormsFoundationBase, string comAdobeGraniteApicontroller, string comAdobeGraniteAssetCore, string comAdobeGraniteAuthSso, string comAdobeGraniteBundlesHcImpl, string comAdobeGraniteCompatRouter, string comAdobeGraniteConf, string comAdobeGraniteConfUiCore, string comAdobeGraniteCors, string comAdobeGraniteCrxExplorer, string comAdobeGraniteCrxdeLite, string comAdobeGraniteCryptoConfig, string comAdobeGraniteCryptoExtension, string comAdobeGraniteCryptoFile, string comAdobeGraniteCryptoJcr, string comAdobeGraniteCsrf, string comAdobeGraniteDistributionCore, string comAdobeGraniteDropwizardMetrics, string comAdobeGraniteFragsImpl, string comAdobeGraniteGibson, string comAdobeGraniteInfocollector, string comAdobeGraniteInstallerFactoryPackages, string comAdobeGraniteJettySsl, string comAdobeGraniteJobsAsync, string comAdobeGraniteMaintenanceOak, string comAdobeGraniteMonitoringCore, string comAdobeGraniteQueries, string comAdobeGraniteReplicationHcImpl, string comAdobeGraniteRepositoryChecker, string comAdobeGraniteRepositoryHcImpl, string comAdobeGraniteRestAssets, string comAdobeGraniteSecurityUi, string comAdobeGraniteStartup, string comAdobeGraniteTagsoup, string comAdobeGraniteTaskmanagementCore, string comAdobeGraniteTaskmanagementWorkflow, string comAdobeGraniteUiClientlibsCompilerLess, string comAdobeGraniteUiClientlibsProcessorGcc, string comAdobeGraniteWebconsolePlugins, string comAdobeGraniteWorkflowConsole, string comAdobeXmpWorkerFilesNativeFragmentLinux, string comAdobeXmpWorkerFilesNativeFragmentMacosx, string comAdobeXmpWorkerFilesNativeFragmentWin, string comDayCommonsOsgiWrapperSimpleJndi, string comDayCqCqAuthhandler, string comDayCqCqCompatConfigupdate, string comDayCqCqLicensebranding, string comDayCqCqNotifcationImpl, string comDayCqCqReplicationAudit, string comDayCqCqSearchExt, string comDayCqDamCqDamAnnotationPrint, string comDayCqDamCqDamAssetUsage, string comDayCqDamCqDamS7dam, string comDayCqDamCqDamSimilaritysearch, string comDayCqDamDamWebdavSupport, string comDayCqPreUpgradeTasks, string comDayCqReplicationExtensions, string comDayCqWcmCqMsmCore, string comDayCqWcmCqWcmTranslation, string dayCommonsJrawio, string orgApacheAriesJmxWhiteboard, string orgApacheFelixHttpSslfilter, string orgApacheFelixOrgApacheFelixThreaddump, string orgApacheFelixWebconsolePluginsDs, string orgApacheFelixWebconsolePluginsEvent, string orgApacheFelixWebconsolePluginsMemoryusage, string orgApacheFelixWebconsolePluginsPackageadmin, string orgApacheJackrabbitOakAuthLdap, string orgApacheJackrabbitOakSegmentTar, string orgApacheJackrabbitOakSolrOsgi, string orgApacheSlingBundleresourceImpl, string orgApacheSlingCommonsFsclassloader, string orgApacheSlingCommonsLogWebconsole, string orgApacheSlingDatasource, string orgApacheSlingDiscoveryBase, string orgApacheSlingDiscoveryOak, string orgApacheSlingDiscoverySupport, string orgApacheSlingDistributionApi, string orgApacheSlingDistributionCore, string orgApacheSlingExtensionsWebconsolesecurityprovider, string orgApacheSlingHcWebconsole, string orgApacheSlingInstallerConsole, string orgApacheSlingInstallerProviderFile, string orgApacheSlingInstallerProviderJcr, string orgApacheSlingJcrDavex, string orgApacheSlingJcrResourcesecurity, string orgApacheSlingJmxProvider, string orgApacheSlingLaunchpadInstaller, string orgApacheSlingModelsImpl, string orgApacheSlingRepoinitParser, string orgApacheSlingResourceInventory, string orgApacheSlingResourceresolver, string orgApacheSlingScriptingJavascript, string orgApacheSlingScriptingJst, string orgApacheSlingScriptingSightlyJsProvider, string orgApacheSlingScriptingSightlyModelsProvider, string orgApacheSlingSecurity, string orgApacheSlingServletsCompat, string orgApacheSlingServletsGet, string orgApacheSlingStartupfilterDisabler, string orgApacheSlingTracer, string weRetailClientAppCore);

        protected abstract ComAdobeGraniteAuthCertImplClientCertAuthHandlerInfo ComAdobeGraniteAuthCertImplClientCertAuthHandler(bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, string path, int? serviceRanking);

        protected abstract ComAdobeGraniteAuthImsInfo ComAdobeGraniteAuthIms(bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, string configid, string scope);

        protected abstract ComAdobeGraniteAuthImsImplExternalUserIdMappingProviderExtensionInfo ComAdobeGraniteAuthImsImplExternalUserIdMappingProviderExtension(bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, string oauthProviderId);

        protected abstract ComAdobeGraniteAuthImsImplIMSAccessTokenRequestCustomizerImplInfo ComAdobeGraniteAuthImsImplIMSAccessTokenRequestCustomizerImpl(bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, string authImsClientSecret, string customizerType);

        protected abstract ComAdobeGraniteAuthImsImplIMSInstanceCredentialsValidatorInfo ComAdobeGraniteAuthImsImplIMSInstanceCredentialsValidator(bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, string oauthProviderId);

        protected abstract ComAdobeGraniteAuthImsImplIMSProviderImplInfo ComAdobeGraniteAuthImsImplIMSProviderImpl(bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, string oauthProviderId, string oauthProviderImsAuthorizationUrl, string oauthProviderImsTokenUrl, string oauthProviderImsProfileUrl, List<string> oauthProviderImsExtendedDetailsUrls, string oauthProviderImsValidateTokenUrl, string oauthProviderImsSessionProperty, string oauthProviderImsServiceTokenClientId, string oauthProviderImsServiceTokenClientSecret, string oauthProviderImsServiceToken, string imsOrgRef, List<string> imsGroupMapping, bool? oauthProviderImsOnlyLicenseGroup);

        protected abstract ComAdobeGraniteAuthImsImplImsConfigProviderImplInfo ComAdobeGraniteAuthImsImplImsConfigProviderImpl(bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, string oauthConfigmanagerImsConfigid, string imsOwningEntity, string aemInstanceId, string imsServiceCode);

        protected abstract ComAdobeGraniteAuthOauthAccesstokenProviderInfo ComAdobeGraniteAuthOauthAccesstokenProvider(bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, string name, string authTokenProviderTitle, List<string> authTokenProviderDefaultClaims, string authTokenProviderEndpoint, string authAccessTokenRequest, string authTokenProviderKeypairAlias, int? authTokenProviderConnTimeout, int? authTokenProviderSoTimeout, string authTokenProviderClientId, string authTokenProviderScope, bool? authTokenProviderReuseAccessToken, bool? authTokenProviderRelaxedSsl, string tokenRequestCustomizerType, string authTokenValidatorType);

        protected abstract ComAdobeGraniteAuthOauthImplBearerAuthenticationHandlerInfo ComAdobeGraniteAuthOauthImplBearerAuthenticationHandler(bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, string path, List<string> oauthClientIdsAllowed, bool? authBearerSyncIms, string authTokenRequestParameter, string oauthBearerConfigid, bool? oauthJwtSupport);

        protected abstract ComAdobeGraniteAuthOauthImplDefaultTokenValidatorImplInfo ComAdobeGraniteAuthOauthImplDefaultTokenValidatorImpl(bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, string authTokenValidatorType);

        protected abstract ComAdobeGraniteAuthOauthImplFacebookProviderImplInfo ComAdobeGraniteAuthOauthImplFacebookProviderImpl(bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, string oauthProviderId);

        protected abstract ComAdobeGraniteAuthOauthImplGithubProviderImplInfo ComAdobeGraniteAuthOauthImplGithubProviderImpl(bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, string oauthProviderId, string oauthProviderGithubAuthorizationUrl, string oauthProviderGithubTokenUrl, string oauthProviderGithubProfileUrl);

        protected abstract ComAdobeGraniteAuthOauthImplGraniteProviderInfo ComAdobeGraniteAuthOauthImplGraniteProvider(bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, string oauthProviderId, string oauthProviderGraniteAuthorizationUrl, string oauthProviderGraniteTokenUrl, string oauthProviderGraniteProfileUrl, string oauthProviderGraniteExtendedDetailsUrls);

        protected abstract ComAdobeGraniteAuthOauthImplHelperProviderConfigManagerInfo ComAdobeGraniteAuthOauthImplHelperProviderConfigManager(bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, string oauthCookieLoginTimeout, string oauthCookieMaxAge);

        protected abstract ComAdobeGraniteAuthOauthImplHelperProviderConfigManagerInternalInfo ComAdobeGraniteAuthOauthImplHelperProviderConfigManagerInternal(bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, string oauthCookieLoginTimeout, string oauthCookieMaxAge);

        protected abstract ComAdobeGraniteAuthOauthImplOAuthAuthenticationHandlerInfo ComAdobeGraniteAuthOauthImplOAuthAuthenticationHandler(bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, string path);

        protected abstract ComAdobeGraniteAuthOauthImplTwitterProviderImplInfo ComAdobeGraniteAuthOauthImplTwitterProviderImpl(bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, string oauthProviderId);

        protected abstract ComAdobeGraniteAuthOauthProviderInfo ComAdobeGraniteAuthOauthProvider(bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, string oauthConfigId, string oauthClientId, string oauthClientSecret, List<string> oauthScope, string oauthConfigProviderId, bool? oauthCreateUsers, string oauthUseridProperty, bool? forceStrictUsernameMatching, bool? oauthEncodeUserids, bool? oauthHashUserids, string oauthCallBackUrl, bool? oauthAccessTokenPersist, bool? oauthAccessTokenPersistCookie, bool? oauthCsrfStateProtection, bool? oauthRedirectRequestParams, bool? oauthConfigSiblingsAllow);

        protected abstract ComAdobeGraniteAuthRequirementImplDefaultRequirementHandlerInfo ComAdobeGraniteAuthRequirementImplDefaultRequirementHandler(bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, List<string> supportedPaths);

        protected abstract ComAdobeGraniteAuthSamlSamlAuthenticationHandlerInfo ComAdobeGraniteAuthSamlSamlAuthenticationHandler(bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, List<string> path, int? serviceRanking, string idpUrl, string idpCertAlias, bool? idpHttpRedirect, string serviceProviderEntityId, string assertionConsumerServiceURL, string spPrivateKeyAlias, string keyStorePassword, string defaultRedirectUrl, string userIDAttribute, bool? useEncryption, bool? createUser, string userIntermediatePath, bool? addGroupMemberships, string groupMembershipAttribute, List<string> defaultGroups, string nameIdFormat, List<string> synchronizeAttributes, bool? handleLogout, string logoutUrl, int? clockTolerance, string digestMethod, string signatureMethod, string identitySyncType, string idpIdentifier);

        protected abstract ComAdobeGraniteAuthSsoImplSsoAuthenticationHandlerInfo ComAdobeGraniteAuthSsoImplSsoAuthenticationHandler(bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, string path, int? serviceRanking, string jaasControlFlag, string jaasRealmName, int? jaasRanking, List<string> headers, List<string> cookies, List<string> parameters, List<string> usermap, string format, string trustedCredentialsAttribute);

        protected abstract ComAdobeGraniteBundlesHcImplCodeCacheHealthCheckInfo ComAdobeGraniteBundlesHcImplCodeCacheHealthCheck(bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, List<string> hcTags, int? minimumCodeCacheSize);

        protected abstract ComAdobeGraniteBundlesHcImplCrxdeSupportBundleHealthCheckInfo ComAdobeGraniteBundlesHcImplCrxdeSupportBundleHealthCheck(bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, List<string> hcTags);

        protected abstract ComAdobeGraniteBundlesHcImplDavExBundleHealthCheckInfo ComAdobeGraniteBundlesHcImplDavExBundleHealthCheck(bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, List<string> hcTags);

        protected abstract ComAdobeGraniteBundlesHcImplInactiveBundlesHealthCheckInfo ComAdobeGraniteBundlesHcImplInactiveBundlesHealthCheck(bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, List<string> hcTags, List<string> ignoredBundles);

        protected abstract ComAdobeGraniteBundlesHcImplJobsHealthCheckInfo ComAdobeGraniteBundlesHcImplJobsHealthCheck(bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, List<string> hcTags, int? maxQueuedJobs);

        protected abstract ComAdobeGraniteBundlesHcImplSlingGetServletHealthCheckInfo ComAdobeGraniteBundlesHcImplSlingGetServletHealthCheck(bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, List<string> hcTags);

        protected abstract ComAdobeGraniteBundlesHcImplSlingJavaScriptHandlerHealthCheckInfo ComAdobeGraniteBundlesHcImplSlingJavaScriptHandlerHealthCheck(bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, List<string> hcTags);

        protected abstract ComAdobeGraniteBundlesHcImplSlingJspScriptHandlerHealthCheckInfo ComAdobeGraniteBundlesHcImplSlingJspScriptHandlerHealthCheck(bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, List<string> hcTags);

        protected abstract ComAdobeGraniteBundlesHcImplSlingReferrerFilterHealthCheckInfo ComAdobeGraniteBundlesHcImplSlingReferrerFilterHealthCheck(bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, List<string> hcTags);

        protected abstract ComAdobeGraniteBundlesHcImplWebDavBundleHealthCheckInfo ComAdobeGraniteBundlesHcImplWebDavBundleHealthCheck(bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, List<string> hcTags);

        protected abstract ComAdobeGraniteCommentsInternalCommentReplicationContentFilterFacInfo ComAdobeGraniteCommentsInternalCommentReplicationContentFilterFac(bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, List<string> replicateCommentResourceTypes);

        protected abstract ComAdobeGraniteCompatrouterImplCompatSwitchingServiceImplInfo ComAdobeGraniteCompatrouterImplCompatSwitchingServiceImpl(bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, List<string> compatgroups, bool? enabled);

        protected abstract ComAdobeGraniteCompatrouterImplRoutingConfigInfo ComAdobeGraniteCompatrouterImplRoutingConfig(bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, string id, string compatPath, string newPath);

        protected abstract ComAdobeGraniteCompatrouterImplSwitchMappingConfigInfo ComAdobeGraniteCompatrouterImplSwitchMappingConfig(bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, string group, List<string> ids);

        protected abstract ComAdobeGraniteConfImplRuntimeAwareConfigurationResourceResolvingInfo ComAdobeGraniteConfImplRuntimeAwareConfigurationResourceResolving(bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, bool? enabled, List<string> fallbackPaths);

        protected abstract ComAdobeGraniteContexthubImplContextHubImplInfo ComAdobeGraniteContexthubImplContextHubImpl(bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, bool? comAdobeGraniteContexthubSilentMode, bool? comAdobeGraniteContexthubShowUi);

        protected abstract ComAdobeGraniteCorsImplCORSPolicyImplInfo ComAdobeGraniteCorsImplCORSPolicyImpl(bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, List<string> alloworigin, List<string> alloworiginregexp, List<string> allowedpaths, List<string> exposedheaders, int? maxage, List<string> supportedheaders, List<string> supportedmethods, bool? supportscredentials);

        protected abstract ComAdobeGraniteCsrfImplCSRFFilterInfo ComAdobeGraniteCsrfImplCSRFFilter(bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, List<string> filterMethods, bool? filterEnableSafeUserAgents, List<string> filterSafeUserAgents, List<string> filterExcludedPaths);

        protected abstract ComAdobeGraniteCsrfImplCSRFServletInfo ComAdobeGraniteCsrfImplCSRFServlet(bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, int? csrfTokenExpiresIn, string slingAuthRequirements);

        protected abstract ComAdobeGraniteDistributionCoreImplCryptoDistributionTransportSeInfo ComAdobeGraniteDistributionCoreImplCryptoDistributionTransportSe(bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, string name, string username, string encryptedPassword);

        protected abstract ComAdobeGraniteDistributionCoreImplDiffDiffChangesObserverInfo ComAdobeGraniteDistributionCoreImplDiffDiffChangesObserver(bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, bool? enabled, string agentName, string diffPath, string observedPath, string serviceName, string propertyNames, int? distributionDelay, string serviceUserTarget);

        protected abstract ComAdobeGraniteDistributionCoreImplDiffDiffEventListenerInfo ComAdobeGraniteDistributionCoreImplDiffDiffEventListener(bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, string diffPath, string serviceName, string serviceUserTarget);

        protected abstract ComAdobeGraniteDistributionCoreImplDistributionToReplicationEvenInfo ComAdobeGraniteDistributionCoreImplDistributionToReplicationEven(bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, List<string> importerName);

        protected abstract ComAdobeGraniteDistributionCoreImplReplicationAdaptersReplicatInfo ComAdobeGraniteDistributionCoreImplReplicationAdaptersReplicat(bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, string providerName, bool? forwardRequests);

        protected abstract ComAdobeGraniteDistributionCoreImplReplicationDistributionTransInfo ComAdobeGraniteDistributionCoreImplReplicationDistributionTrans(bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, bool? forwardRequests);

        protected abstract ComAdobeGraniteDistributionCoreImplTransportAccessTokenDistribuInfo ComAdobeGraniteDistributionCoreImplTransportAccessTokenDistribu(bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, string name, string serviceName, string userId, string accessTokenProviderTarget);

        protected abstract ComAdobeGraniteFragsImplCheckHttpHeaderFlagInfo ComAdobeGraniteFragsImplCheckHttpHeaderFlag(bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, string featureName, string featureDescription, string httpHeaderName, string httpHeaderValuepattern);

        protected abstract ComAdobeGraniteFragsImplRandomFeatureInfo ComAdobeGraniteFragsImplRandomFeature(bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, string featureName, string featureDescription, string activePercentage, string cookieName, int? cookieMaxAge);

        protected abstract ComAdobeGraniteHttpcacheFileFileCacheStoreInfo ComAdobeGraniteHttpcacheFileFileCacheStore(bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, string comAdobeGraniteHttpcacheFileDocumentRoot, string comAdobeGraniteHttpcacheFileIncludeHost);

        protected abstract ComAdobeGraniteHttpcacheImplOuterCacheFilterInfo ComAdobeGraniteHttpcacheImplOuterCacheFilter(bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, List<string> comAdobeGraniteHttpcacheUrlPaths);

        protected abstract ComAdobeGraniteI18nImplBundlePseudoTranslationsInfo ComAdobeGraniteI18nImplBundlePseudoTranslations(bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, List<string> pseudoPatterns);

        protected abstract ComAdobeGraniteI18nImplPreferencesLocaleResolverServiceInfo ComAdobeGraniteI18nImplPreferencesLocaleResolverService(bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, string securityPreferencesName);

        protected abstract ComAdobeGraniteInfocollectorInfoCollectorInfo ComAdobeGraniteInfocollectorInfoCollector(bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, bool? graniteInfocollectorIncludeThreadDumps, bool? graniteInfocollectorIncludeHeapDump);

        protected abstract ComAdobeGraniteJettySslInternalGraniteSslConnectorFactoryInfo ComAdobeGraniteJettySslInternalGraniteSslConnectorFactory(bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, int? comAdobeGraniteJettySslPort, string comAdobeGraniteJettySslKeystoreUser, string comAdobeGraniteJettySslKeystorePassword, List<string> comAdobeGraniteJettySslCiphersuitesExcluded, List<string> comAdobeGraniteJettySslCiphersuitesIncluded, string comAdobeGraniteJettySslClientCertificate);

        protected abstract ComAdobeGraniteLicenseImplLicenseCheckFilterInfo ComAdobeGraniteLicenseImplLicenseCheckFilter(bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, int? checkInternval, List<string> excludeIds, bool? encryptPing);

        protected abstract ComAdobeGraniteLoggingImplLogAnalyserImplInfo ComAdobeGraniteLoggingImplLogAnalyserImpl(bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, int? messagesQueueSize, List<string> loggerConfig, int? messagesSize);

        protected abstract ComAdobeGraniteLoggingImplLogErrorHealthCheckInfo ComAdobeGraniteLoggingImplLogErrorHealthCheck(bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, List<string> hcTags);

        protected abstract ComAdobeGraniteMaintenanceCrxImplDataStoreGarbageCollectionTaskInfo ComAdobeGraniteMaintenanceCrxImplDataStoreGarbageCollectionTask(bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, bool? graniteMaintenanceMandatory, string jobTopics);

        protected abstract ComAdobeGraniteMaintenanceCrxImplLuceneBinariesCleanupTaskInfo ComAdobeGraniteMaintenanceCrxImplLuceneBinariesCleanupTask(bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, string jobTopics);

        protected abstract ComAdobeGraniteMaintenanceCrxImplRevisionCleanupTaskInfo ComAdobeGraniteMaintenanceCrxImplRevisionCleanupTask(bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, List<string> fullGcDays);

        protected abstract ComAdobeGraniteMonitoringImplScriptConfigImplInfo ComAdobeGraniteMonitoringImplScriptConfigImpl(bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, string scriptFilename, string scriptDisplay, string scriptPath, List<string> scriptPlatform, int? interval, string jmxdomain);

        protected abstract ComAdobeGraniteOauthServerAuthImplOAuth2ServerAuthenticationHanInfo ComAdobeGraniteOauthServerAuthImplOAuth2ServerAuthenticationHan(bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, string path, string jaasControlFlag, string jaasRealmName, int? jaasRanking, bool? oauthOfflineValidation);

        protected abstract ComAdobeGraniteOauthServerImplAccessTokenCleanupTaskInfo ComAdobeGraniteOauthServerImplAccessTokenCleanupTask(bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, string schedulerExpression);

        protected abstract ComAdobeGraniteOauthServerImplOAuth2ClientRevocationServletInfo ComAdobeGraniteOauthServerImplOAuth2ClientRevocationServlet(bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, bool? oauthClientRevocationActive);

        protected abstract ComAdobeGraniteOauthServerImplOAuth2RevocationEndpointServletInfo ComAdobeGraniteOauthServerImplOAuth2RevocationEndpointServlet(bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, string slingServletPaths, bool? oauthRevocationActive);

        protected abstract ComAdobeGraniteOauthServerImplOAuth2TokenEndpointServletInfo ComAdobeGraniteOauthServerImplOAuth2TokenEndpointServlet(bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, string oauthIssuer, string oauthAccessTokenExpiresIn, string osgiHttpWhiteboardServletPattern, string osgiHttpWhiteboardContextSelect);

        protected abstract ComAdobeGraniteOauthServerImplOAuth2TokenRevocationServletInfo ComAdobeGraniteOauthServerImplOAuth2TokenRevocationServlet(bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, bool? oauthTokenRevocationActive);

        protected abstract ComAdobeGraniteOffloadingImplOffloadingConfiguratorInfo ComAdobeGraniteOffloadingImplOffloadingConfigurator(bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, string offloadingTransporter, bool? offloadingCleanupPayload);

        protected abstract ComAdobeGraniteOffloadingImplOffloadingJobClonerInfo ComAdobeGraniteOffloadingImplOffloadingJobCloner(bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, bool? offloadingJobclonerEnabled);

        protected abstract ComAdobeGraniteOffloadingImplOffloadingJobOffloaderInfo ComAdobeGraniteOffloadingImplOffloadingJobOffloader(bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, bool? offloadingOffloaderEnabled);

        protected abstract ComAdobeGraniteOffloadingImplTransporterOffloadingAgentManagerInfo ComAdobeGraniteOffloadingImplTransporterOffloadingAgentManager(bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, bool? offloadingAgentmanagerEnabled);

        protected abstract ComAdobeGraniteOffloadingImplTransporterOffloadingDefaultTranspoInfo ComAdobeGraniteOffloadingImplTransporterOffloadingDefaultTranspo(bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, string defaultTransportAgentToWorkerPrefix, string defaultTransportAgentToMasterPrefix, string defaultTransportInputPackage, string defaultTransportOutputPackage, bool? defaultTransportReplicationSynchronous, bool? defaultTransportContentpackage, bool? offloadingTransporterDefaultEnabled);

        protected abstract ComAdobeGraniteOmnisearchImplCoreOmniSearchServiceImplInfo ComAdobeGraniteOmnisearchImplCoreOmniSearchServiceImpl(bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, int? omnisearchSuggestionRequiretextMin, bool? omnisearchSuggestionSpellcheckRequire);

        protected abstract ComAdobeGraniteOptoutImplOptOutServiceImplInfo ComAdobeGraniteOptoutImplOptOutServiceImpl(bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, List<string> optoutCookies, List<string> optoutHeaders, List<string> optoutWhitelistCookies);

        protected abstract ComAdobeGraniteQueriesImplHcAsyncIndexHealthCheckInfo ComAdobeGraniteQueriesImplHcAsyncIndexHealthCheck(bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, int? indexingCriticalThreshold, int? indexingWarnThreshold, List<string> hcTags);

        protected abstract ComAdobeGraniteQueriesImplHcLargeIndexHealthCheckInfo ComAdobeGraniteQueriesImplHcLargeIndexHealthCheck(bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, int? largeIndexCriticalThreshold, int? largeIndexWarnThreshold, List<string> hcTags);

        protected abstract ComAdobeGraniteQueriesImplHcQueriesStatusHealthCheckInfo ComAdobeGraniteQueriesImplHcQueriesStatusHealthCheck(bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, List<string> hcTags);

        protected abstract ComAdobeGraniteQueriesImplHcQueryHealthCheckMetricsInfo ComAdobeGraniteQueriesImplHcQueryHealthCheckMetrics(bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, int? getPeriod);

        protected abstract ComAdobeGraniteQueriesImplHcQueryLimitsHealthCheckInfo ComAdobeGraniteQueriesImplHcQueryLimitsHealthCheck(bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, List<string> hcTags);

        protected abstract ComAdobeGraniteReplicationHcImplReplicationQueueHealthCheckInfo ComAdobeGraniteReplicationHcImplReplicationQueueHealthCheck(bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, int? numberOfRetriesAllowed, List<string> hcTags);

        protected abstract ComAdobeGraniteReplicationHcImplReplicationTransportUsersHealthCInfo ComAdobeGraniteReplicationHcImplReplicationTransportUsersHealthC(bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, List<string> hcTags);

        protected abstract ComAdobeGraniteRepositoryHcImplAuthorizableNodeNameHealthCheckInfo ComAdobeGraniteRepositoryHcImplAuthorizableNodeNameHealthCheck(bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, List<string> hcTags);

        protected abstract ComAdobeGraniteRepositoryHcImplContentSlingSlingContentHealthCInfo ComAdobeGraniteRepositoryHcImplContentSlingSlingContentHealthC(bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, List<string> hcTags, List<string> excludeSearchPath);

        protected abstract ComAdobeGraniteRepositoryHcImplContinuousRGCHealthCheckInfo ComAdobeGraniteRepositoryHcImplContinuousRGCHealthCheck(bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, List<string> hcTags);

        protected abstract ComAdobeGraniteRepositoryHcImplDefaultAccessUserProfileHealthCheInfo ComAdobeGraniteRepositoryHcImplDefaultAccessUserProfileHealthChe(bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, List<string> hcTags);

        protected abstract ComAdobeGraniteRepositoryHcImplDefaultLoginsHealthCheckInfo ComAdobeGraniteRepositoryHcImplDefaultLoginsHealthCheck(bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, List<string> hcTags, List<string> accountLogins, List<string> consoleLogins);

        protected abstract ComAdobeGraniteRepositoryHcImplDiskSpaceHealthCheckInfo ComAdobeGraniteRepositoryHcImplDiskSpaceHealthCheck(bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, List<string> hcTags, int? diskSpaceWarnThreshold, int? diskSpaceErrorThreshold);

        protected abstract ComAdobeGraniteRepositoryHcImplObservationQueueLengthHealthCheckInfo ComAdobeGraniteRepositoryHcImplObservationQueueLengthHealthCheck(bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, List<string> hcTags);

        protected abstract ComAdobeGraniteRepositoryImplCommitStatsConfigInfo ComAdobeGraniteRepositoryImplCommitStatsConfig(bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, bool? enabled, int? intervalSeconds, int? commitsPerIntervalThreshold, int? maxLocationLength, int? maxDetailsShown, int? minDetailsPercentage, List<string> threadMatchers, int? maxGreedyDepth, string greedyStackMatchers, List<string> stackFilters, List<string> stackMatchers, List<string> stackCategorizers, List<string> stackShorteners);

        protected abstract ComAdobeGraniteRepositoryServiceUserConfigurationInfo ComAdobeGraniteRepositoryServiceUserConfiguration(bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, int? serviceRanking, bool? serviceusersSimpleSubjectPopulation, List<string> serviceusersList);

        protected abstract ComAdobeGraniteRequestsLoggingImplHcRequestsStatusHealthCheckImInfo ComAdobeGraniteRequestsLoggingImplHcRequestsStatusHealthCheckIm(bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, List<string> hcTags);

        protected abstract ComAdobeGraniteResourcestatusImplCompositeStatusTypeInfo ComAdobeGraniteResourcestatusImplCompositeStatusType(bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, string name, List<string> types);

        protected abstract ComAdobeGraniteResourcestatusImplStatusResourceProviderImplInfo ComAdobeGraniteResourcestatusImplStatusResourceProviderImpl(bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, string providerRoot);

        protected abstract ComAdobeGraniteRestAssetsImplAssetContentDispositionFilterInfo ComAdobeGraniteRestAssetsImplAssetContentDispositionFilter(bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, bool? mimeAllowEmpty, List<string> mimeAllowed);

        protected abstract ComAdobeGraniteRestImplApiEndpointResourceProviderFactoryImplInfo ComAdobeGraniteRestImplApiEndpointResourceProviderFactoryImpl(bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, string providerRoots);

        protected abstract ComAdobeGraniteRestImplServletDefaultGETServletInfo ComAdobeGraniteRestImplServletDefaultGETServlet(bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, int? defaultLimit, bool? useAbsoluteUri);

        protected abstract ComAdobeGraniteSecurityUserUiInternalServletsSSLConfigurationSInfo ComAdobeGraniteSecurityUserUiInternalServletsSSLConfigurationS(bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, List<string> hcTags);

        protected abstract ComAdobeGraniteSecurityUserUserPropertiesServiceInfo ComAdobeGraniteSecurityUserUserPropertiesService(bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, string adapterCondition, List<string> graniteUserpropertiesNodetypes, List<string> graniteUserpropertiesResourcetypes);

        protected abstract ComAdobeGraniteSocialgraphImplSocialGraphFactoryImplInfo ComAdobeGraniteSocialgraphImplSocialGraphFactoryImpl(bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, string group2memberRelationshipOutgoing, List<string> group2memberExcludedOutgoing, string group2memberRelationshipIncoming, List<string> group2memberExcludedIncoming);

        protected abstract ComAdobeGraniteSystemMonitoringImplSystemStatsMBeanImplInfo ComAdobeGraniteSystemMonitoringImplSystemStatsMBeanImpl(bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, string schedulerExpression, string jmxObjectname);

        protected abstract ComAdobeGraniteTaskmanagementImplJcrTaskAdapterFactoryInfo ComAdobeGraniteTaskmanagementImplJcrTaskAdapterFactory(bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, string adapterCondition);

        protected abstract ComAdobeGraniteTaskmanagementImplJcrTaskArchiveServiceInfo ComAdobeGraniteTaskmanagementImplJcrTaskArchiveService(bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, bool? archivingEnabled, string schedulerExpression, int? archiveSinceDaysCompleted);

        protected abstract ComAdobeGraniteTaskmanagementImplPurgeTaskPurgeMaintenanceTaskInfo ComAdobeGraniteTaskmanagementImplPurgeTaskPurgeMaintenanceTask(bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, bool? purgeCompleted, int? completedAge, bool? purgeActive, int? activeAge, int? saveThreshold);

        protected abstract ComAdobeGraniteTaskmanagementImplServiceTaskManagerAdapterFactorInfo ComAdobeGraniteTaskmanagementImplServiceTaskManagerAdapterFactor(bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, string adapterCondition, List<string> taskmanagerAdmingroups);

        protected abstract ComAdobeGraniteThreaddumpThreadDumpCollectorInfo ComAdobeGraniteThreaddumpThreadDumpCollector(bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, int? schedulerPeriod, string schedulerRunOn, bool? graniteThreaddumpEnabled, int? graniteThreaddumpDumpsPerFile, bool? graniteThreaddumpEnableGzipCompression, bool? graniteThreaddumpEnableDirectoriesCompression, bool? graniteThreaddumpEnableJStack, int? graniteThreaddumpMaxBackupDays, string graniteThreaddumpBackupCleanTrigger);

        protected abstract ComAdobeGraniteTranslationConnectorMsftCoreImplMicrosoftTranslInfo ComAdobeGraniteTranslationConnectorMsftCoreImplMicrosoftTransl(bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, string translationFactory, string defaultConnectorLabel, string defaultConnectorAttribution, string defaultConnectorWorkspaceId, string defaultConnectorSubscriptionKey, string languageMapLocation, string categoryMapLocation, int? retryAttempts, int? timeoutCount);

        protected abstract ComAdobeGraniteTranslationCoreImplTranslationManagerImplInfo ComAdobeGraniteTranslationCoreImplTranslationManagerImpl(bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, string defaultConnectorName, string defaultCategory);

        protected abstract ComAdobeGraniteUiClientlibsImplHtmlLibraryManagerImplInfo ComAdobeGraniteUiClientlibsImplHtmlLibraryManagerImpl(bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, bool? htmllibmanagerTiming, string htmllibmanagerDebugInitJs, bool? htmllibmanagerMinify, bool? htmllibmanagerDebug, bool? htmllibmanagerGzip, int? htmllibmanagerMaxDataUriSize, int? htmllibmanagerMaxage, bool? htmllibmanagerForceCQUrlInfo, string htmllibmanagerDefaultthemename, string htmllibmanagerDefaultuserthemename, string htmllibmanagerClientmanager, List<string> htmllibmanagerPathList, List<string> htmllibmanagerExcludedPathList, List<string> htmllibmanagerProcessorJs, List<string> htmllibmanagerProcessorCss, List<string> htmllibmanagerLongcachePatterns, string htmllibmanagerLongcacheFormat, bool? htmllibmanagerUseFileSystemOutputCache, string htmllibmanagerFileSystemOutputCacheLocation, List<string> htmllibmanagerDisableReplacement);

        protected abstract ComAdobeGraniteWorkflowConsoleFragsWorkflowWithdrawFeatureInfo ComAdobeGraniteWorkflowConsoleFragsWorkflowWithdrawFeature(bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, bool? enabled);

        protected abstract ComAdobeGraniteWorkflowConsolePublishWorkflowPublishEventServiceInfo ComAdobeGraniteWorkflowConsolePublishWorkflowPublishEventService(bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, bool? graniteWorkflowWorkflowPublishEventServiceEnabled);

        protected abstract ComAdobeGraniteWorkflowCoreJcrWorkflowBucketManagerInfo ComAdobeGraniteWorkflowCoreJcrWorkflowBucketManager(bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, int? bucketSize);

        protected abstract ComAdobeGraniteWorkflowCoreJobExternalProcessJobHandlerInfo ComAdobeGraniteWorkflowCoreJobExternalProcessJobHandler(bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, int? defaultTimeout, int? maxTimeout, int? defaultPeriod);

        protected abstract ComAdobeGraniteWorkflowCoreJobJobHandlerInfo ComAdobeGraniteWorkflowCoreJobJobHandler(bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, List<string> jobTopics, bool? allowSelfProcessTermination);

        protected abstract ComAdobeGraniteWorkflowCoreOffloadingWorkflowOffloadingJobConsumInfo ComAdobeGraniteWorkflowCoreOffloadingWorkflowOffloadingJobConsum(bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, string jobTopics);

        protected abstract ComAdobeGraniteWorkflowCorePayloadMapCacheInfo ComAdobeGraniteWorkflowCorePayloadMapCache(bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, List<string> getSystemWorkflowModels, string getPackageRootPath);

        protected abstract ComAdobeGraniteWorkflowCorePayloadmapPayloadMoveListenerInfo ComAdobeGraniteWorkflowCorePayloadmapPayloadMoveListener(bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, List<string> payloadMoveWhiteList, bool? payloadMoveHandleFromWorkflowProcess);

        protected abstract ComAdobeGraniteWorkflowCoreWorkflowConfigInfo ComAdobeGraniteWorkflowCoreWorkflowConfig(bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, List<string> cqWorkflowConfigWorkflowPackagesRootPath, bool? cqWorkflowConfigWorkflowProcessLegacyMode, bool? cqWorkflowConfigAllowLocking);

        protected abstract ComAdobeGraniteWorkflowCoreWorkflowSessionFactoryInfo ComAdobeGraniteWorkflowCoreWorkflowSessionFactory(bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, string graniteWorkflowinboxSortPropertyName, string graniteWorkflowinboxSortOrder, int? cqWorkflowJobRetry, List<string> cqWorkflowSuperuser, int? graniteWorkflowInboxQuerySize, bool? graniteWorkflowAdminUserGroupFilter, bool? graniteWorkflowEnforceWorkitemAssigneePermissions, bool? graniteWorkflowEnforceWorkflowInitiatorPermissions, bool? graniteWorkflowInjectTenantIdInJobTopics, int? graniteWorkflowMaxPurgeSaveThreshold, int? graniteWorkflowMaxPurgeQueryCount);

        protected abstract ComAdobeGraniteWorkflowPurgeSchedulerInfo ComAdobeGraniteWorkflowPurgeScheduler(bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, string scheduledpurgeName, string scheduledpurgeWorkflowStatus, List<string> scheduledpurgeModelIds, int? scheduledpurgeDaysold);

        protected abstract ComAdobeOctopusNcommBootstrapInfo ComAdobeOctopusNcommBootstrap(bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, int? maxConnections, int? maxRequests, int? requestTimeout, int? requestRetries, int? launchTimeout);

        protected abstract ComAdobeSocialIntegrationsLivefyreUserPingforpullImplPingPullSInfo ComAdobeSocialIntegrationsLivefyreUserPingforpullImplPingPullS(bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, string communitiesIntegrationLivefyreSlingEventFilter);

        protected abstract ComAdobeXmpWorkerFilesNcommXMPFilesNCommInfo ComAdobeXmpWorkerFilesNcommXMPFilesNComm(bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, string maxConnections, string maxRequests, string requestTimeout, string logDir);

        protected abstract ComDayCommonsDatasourceJdbcpoolJdbcPoolServiceInfo ComDayCommonsDatasourceJdbcpoolJdbcPoolService(bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, string jdbcDriverClass, string jdbcConnectionUri, string jdbcUsername, string jdbcPassword, string jdbcValidationQuery, bool? defaultReadonly, bool? defaultAutocommit, int? poolSize, int? poolMaxWaitMsec, string datasourceName, List<string> datasourceSvcProperties);

        protected abstract ComDayCommonsHttpclientInfo ComDayCommonsHttpclient(bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, bool? proxyEnabled, string proxyHost, string proxyUser, string proxyPassword, string proxyNtlmHost, string proxyNtlmDomain, List<string> proxyExceptions);

        protected abstract ComDayCqAnalyticsImplStorePropertiesChangeListenerInfo ComDayCqAnalyticsImplStorePropertiesChangeListener(bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, List<string> cqStoreListenerAdditionalStorePaths);

        protected abstract ComDayCqAnalyticsSitecatalystImplExporterClassificationsExporteInfo ComDayCqAnalyticsSitecatalystImplExporterClassificationsExporte(bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, List<string> allowedPaths, int? cqAnalyticsSaintExporterPagesize);

        protected abstract ComDayCqAnalyticsSitecatalystImplImporterReportImporterInfo ComDayCqAnalyticsSitecatalystImplImporterReportImporter(bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, int? reportFetchAttempts, int? reportFetchDelay);

        protected abstract ComDayCqAnalyticsSitecatalystImplSitecatalystAdapterFactoryInfo ComDayCqAnalyticsSitecatalystImplSitecatalystAdapterFactory(bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, List<string> cqAnalyticsAdapterfactoryContextstores);

        protected abstract ComDayCqAnalyticsSitecatalystImplSitecatalystHttpClientImplInfo ComDayCqAnalyticsSitecatalystImplSitecatalystHttpClientImpl(bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, List<string> cqAnalyticsSitecatalystServiceDatacenterUrl, List<string> devhostnamepatterns, int? connectionTimeout, int? socketTimeout);

        protected abstract ComDayCqAnalyticsTestandtargetImplAccountOptionsUpdaterInfo ComDayCqAnalyticsTestandtargetImplAccountOptionsUpdater(bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, bool? cqAnalyticsTestandtargetAccountoptionsupdaterEnabled);

        protected abstract ComDayCqAnalyticsTestandtargetImplDeleteAuthorActivityListenerInfo ComDayCqAnalyticsTestandtargetImplDeleteAuthorActivityListener(bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, bool? cqAnalyticsTestandtargetDeleteauthoractivitylistenerEnabled);

        protected abstract ComDayCqAnalyticsTestandtargetImplPushAuthorCampaignPageListenerInfo ComDayCqAnalyticsTestandtargetImplPushAuthorCampaignPageListener(bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, bool? cqAnalyticsTestandtargetPushauthorcampaignpagelistenerEnabled);

        protected abstract ComDayCqAnalyticsTestandtargetImplSegmentImporterInfo ComDayCqAnalyticsTestandtargetImplSegmentImporter(bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, bool? cqAnalyticsTestandtargetSegmentimporterEnabled);

        protected abstract ComDayCqAnalyticsTestandtargetImplServiceWebServiceImplInfo ComDayCqAnalyticsTestandtargetImplServiceWebServiceImpl(bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, string endpointUri, int? connectionTimeout, int? socketTimeout);

        protected abstract ComDayCqAnalyticsTestandtargetImplServletsAdminServerServletInfo ComDayCqAnalyticsTestandtargetImplServletsAdminServerServlet(bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, string testandtargetEndpointUrl);

        protected abstract ComDayCqAnalyticsTestandtargetImplTestandtargetHttpClientImplInfo ComDayCqAnalyticsTestandtargetImplTestandtargetHttpClientImpl(bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, string cqAnalyticsTestandtargetApiUrl, int? cqAnalyticsTestandtargetTimeout, int? cqAnalyticsTestandtargetSockettimeout, string cqAnalyticsTestandtargetRecommendationsUrlReplace, string cqAnalyticsTestandtargetRecommendationsUrlReplacewith);

        protected abstract ComDayCqAuthImplCugCugSupportImplInfo ComDayCqAuthImplCugCugSupportImpl(bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, List<string> cugExemptedPrincipals, bool? cugEnabled, string cugPrincipalsRegex, string cugPrincipalsReplacement);

        protected abstract ComDayCqAuthImplLoginSelectorHandlerInfo ComDayCqAuthImplLoginSelectorHandler(bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, string path, int? serviceRanking, List<string> authLoginselectorMappings, List<string> authLoginselectorChangepwMappings, string authLoginselectorDefaultloginpage, string authLoginselectorDefaultchangepwpage, List<string> authLoginselectorHandle, bool? authLoginselectorHandleAllExtensions);

        protected abstract ComDayCqCommonsImplExternalizerImplInfo ComDayCqCommonsImplExternalizerImpl(bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, List<string> externalizerDomains, string externalizerHost, string externalizerContextpath, bool? externalizerEncodedpath);

        protected abstract ComDayCqCommonsServletsRootMappingServletInfo ComDayCqCommonsServletsRootMappingServlet(bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, string rootmappingTarget);

        protected abstract ComDayCqCompatCodeupgradeImplCodeUpgradeExecutionConditionCheckeInfo ComDayCqCompatCodeupgradeImplCodeUpgradeExecutionConditionChecke(bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, List<string> codeupgradetasks, List<string> codeupgradetaskfilters);

        protected abstract ComDayCqCompatCodeupgradeImplUpgradeTaskIgnoreListInfo ComDayCqCompatCodeupgradeImplUpgradeTaskIgnoreList(bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, List<string> upgradeTaskIgnoreList);

        protected abstract ComDayCqCompatCodeupgradeImplVersionRangeTaskIgnorelistInfo ComDayCqCompatCodeupgradeImplVersionRangeTaskIgnorelist(bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, string effectiveBundleListPath);

        protected abstract ComDayCqContentsyncImplContentSyncManagerImplInfo ComDayCqContentsyncImplContentSyncManagerImpl(bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, string contentsyncFallbackAuthorizable, string contentsyncFallbackUpdateuser);

        protected abstract ComDayCqDamCommonsHandlerStandardImageHandlerInfo ComDayCqDamCommonsHandlerStandardImageHandler(bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, int? largeFileThreshold, int? largeCommentThreshold, bool? cqDamEnableExtMetaExtraction);

        protected abstract ComDayCqDamCommonsMetadataXmpFilterBlackWhiteInfo ComDayCqDamCommonsMetadataXmpFilterBlackWhite(bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, bool? xmpFilterApplyWhitelist, List<string> xmpFilterWhitelist, bool? xmpFilterApplyBlacklist, List<string> xmpFilterBlacklist);

        protected abstract ComDayCqDamCommonsUtilImplAssetCacheImplInfo ComDayCqDamCommonsUtilImplAssetCacheImpl(bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, int? largeFileMin, bool? cacheApply, List<string> mimeTypes);

        protected abstract ComDayCqDamCoreImplAnnotationPdfAnnotationPdfConfigInfo ComDayCqDamCoreImplAnnotationPdfAnnotationPdfConfig(bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, int? cqDamConfigAnnotationPdfDocumentWidth, int? cqDamConfigAnnotationPdfDocumentHeight, int? cqDamConfigAnnotationPdfDocumentPaddingHorizontal, int? cqDamConfigAnnotationPdfDocumentPaddingVertical, int? cqDamConfigAnnotationPdfFontSize, string cqDamConfigAnnotationPdfFontColor, string cqDamConfigAnnotationPdfFontFamily, string cqDamConfigAnnotationPdfFontLight, int? cqDamConfigAnnotationPdfMarginTextImage, int? cqDamConfigAnnotationPdfMinImageHeight, int? cqDamConfigAnnotationPdfReviewStatusWidth, string cqDamConfigAnnotationPdfReviewStatusColorApproved, string cqDamConfigAnnotationPdfReviewStatusColorRejected, string cqDamConfigAnnotationPdfReviewStatusColorChangesRequested, int? cqDamConfigAnnotationPdfAnnotationMarkerWidth, int? cqDamConfigAnnotationPdfAssetMinheight);

        protected abstract ComDayCqDamCoreImplAssetMoveListenerInfo ComDayCqDamCoreImplAssetMoveListener(bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, bool? enabled);

        protected abstract ComDayCqDamCoreImplAssethomeAssetHomePageConfigurationInfo ComDayCqDamCoreImplAssethomeAssetHomePageConfiguration(bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, bool? isEnabled);

        protected abstract ComDayCqDamCoreImplAssetlinkshareAdhocAssetShareProxyServletInfo ComDayCqDamCoreImplAssetlinkshareAdhocAssetShareProxyServlet(bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, int? cqDamAdhocAssetSharePrezipMaxcontentsize);

        protected abstract ComDayCqDamCoreImplCacheCQBufferedImageCacheInfo ComDayCqDamCoreImplCacheCQBufferedImageCache(bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, int? cqDamImageCacheMaxMemory, int? cqDamImageCacheMaxAge, string cqDamImageCacheMaxDimension);

        protected abstract ComDayCqDamCoreImplDamChangeEventListenerInfo ComDayCqDamCoreImplDamChangeEventListener(bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, List<string> changeeventlistenerObservedPaths);

        protected abstract ComDayCqDamCoreImplDamEventPurgeServiceInfo ComDayCqDamCoreImplDamEventPurgeService(bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, string schedulerExpression, int? maxSavedActivities, int? saveInterval, bool? enableActivityPurge, string eventTypes);

        protected abstract ComDayCqDamCoreImplDamEventRecorderImplInfo ComDayCqDamCoreImplDamEventRecorderImpl(bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, string eventFilter, int? eventQueueLength, bool? eventrecorderEnabled, List<string> eventrecorderBlacklist, string eventrecorderEventtypes);

        protected abstract ComDayCqDamCoreImplEventDamEventAuditListenerInfo ComDayCqDamCoreImplEventDamEventAuditListener(bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, string eventFilter, bool? enabled);

        protected abstract ComDayCqDamCoreImplExpiryNotificationJobImplInfo ComDayCqDamCoreImplExpiryNotificationJobImpl(bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, bool? cqDamExpiryNotificationSchedulerIstimebased, string cqDamExpiryNotificationSchedulerTimebasedRule, int? cqDamExpiryNotificationSchedulerPeriodRule, bool? sendEmail, int? assetExpiredLimit, int? priorNotificationSeconds, string cqDamExpiryNotificationUrlProtocol);

        protected abstract ComDayCqDamCoreImplFoldermetadataschemaFolderMetadataSchemaFeatInfo ComDayCqDamCoreImplFoldermetadataschemaFolderMetadataSchemaFeat(bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, bool? isEnabled);

        protected abstract ComDayCqDamCoreImplGfxCommonsGfxRendererInfo ComDayCqDamCoreImplGfxCommonsGfxRenderer(bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, bool? skipBufferedcache);

        protected abstract ComDayCqDamCoreImplHandlerEPSFormatHandlerInfo ComDayCqDamCoreImplHandlerEPSFormatHandler(bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, string mimetype);

        protected abstract ComDayCqDamCoreImplHandlerIndesignFormatHandlerInfo ComDayCqDamCoreImplHandlerIndesignFormatHandler(bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, List<string> mimetype);

        protected abstract ComDayCqDamCoreImplHandlerJpegHandlerInfo ComDayCqDamCoreImplHandlerJpegHandler(bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, bool? cqDamEnableExtMetaExtraction, int? largeFileThreshold, int? largeCommentThreshold);

        protected abstract ComDayCqDamCoreImplHandlerXmpNCommXMPHandlerInfo ComDayCqDamCoreImplHandlerXmpNCommXMPHandler(bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, List<string> xmphandlerCqFormats);

        protected abstract ComDayCqDamCoreImplJmxAssetIndexUpdateMonitorInfo ComDayCqDamCoreImplJmxAssetIndexUpdateMonitor(bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, string jmxObjectname, bool? propertyMeasureEnabled, string propertyName, int? propertyMaxWaitMs, decimal? propertyMaxRate, bool? fulltextMeasureEnabled, string fulltextName, int? fulltextMaxWaitMs, decimal? fulltextMaxRate);

        protected abstract ComDayCqDamCoreImplJmxAssetMigrationMBeanImplInfo ComDayCqDamCoreImplJmxAssetMigrationMBeanImpl(bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, string jmxObjectname);

        protected abstract ComDayCqDamCoreImplJmxAssetUpdateMonitorImplInfo ComDayCqDamCoreImplJmxAssetUpdateMonitorImpl(bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, string jmxObjectname, bool? active);

        protected abstract ComDayCqDamCoreImplJobsMetadataexportAsyncMetadataExportConfigInfo ComDayCqDamCoreImplJobsMetadataexportAsyncMetadataExportConfig(bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, string operation, bool? emailEnabled);

        protected abstract ComDayCqDamCoreImplJobsMetadataimportAsyncMetadataImportConfigInfo ComDayCqDamCoreImplJobsMetadataimportAsyncMetadataImportConfig(bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, string operation, string operationIcon, string topicName, bool? emailEnabled);

        protected abstract ComDayCqDamCoreImplLightboxLightboxServletInfo ComDayCqDamCoreImplLightboxLightboxServlet(bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, string slingServletPaths, List<string> slingServletMethods, bool? cqDamEnableAnonymous);

        protected abstract ComDayCqDamCoreImplMetadataEditorSelectComponentHandlerInfo ComDayCqDamCoreImplMetadataEditorSelectComponentHandler(bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, List<string> granitedata);

        protected abstract ComDayCqDamCoreImplMimeTypeAssetUploadRestrictionHelperInfo ComDayCqDamCoreImplMimeTypeAssetUploadRestrictionHelper(bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, bool? cqDamAllowAllMime, List<string> cqDamAllowedAssetMimes);

        protected abstract ComDayCqDamCoreImplMimeTypeDamMimeTypeServiceImplInfo ComDayCqDamCoreImplMimeTypeDamMimeTypeServiceImpl(bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, bool? cqDamDetectAssetMimeFromContent);

        protected abstract ComDayCqDamCoreImplMissingMetadataNotificationJobInfo ComDayCqDamCoreImplMissingMetadataNotificationJob(bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, bool? cqDamMissingmetadataNotificationSchedulerIstimebased, string cqDamMissingmetadataNotificationSchedulerTimebasedRule, int? cqDamMissingmetadataNotificationSchedulerPeriodRule, string cqDamMissingmetadataNotificationRecipient);

        protected abstract ComDayCqDamCoreImplProcessSendTransientWorkflowCompletedEmailPrInfo ComDayCqDamCoreImplProcessSendTransientWorkflowCompletedEmailPr(bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, string processLabel, bool? notifyOnComplete);

        protected abstract ComDayCqDamCoreImplProcessTextExtractionProcessInfo ComDayCqDamCoreImplProcessTextExtractionProcess(bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, List<string> mimeTypes, int? maxExtract);

        protected abstract ComDayCqDamCoreImplRenditionMakerImplInfo ComDayCqDamCoreImplRenditionMakerImpl(bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, bool? xmpPropagate, List<string> xmpExcludes);

        protected abstract ComDayCqDamCoreImplReportsReportExportServiceInfo ComDayCqDamCoreImplReportsReportExportService(bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, int? queryBatchSize);

        protected abstract ComDayCqDamCoreImplReportsReportPurgeServiceInfo ComDayCqDamCoreImplReportsReportPurgeService(bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, string schedulerExpression, int? maxSavedReports, int? timeDuration, bool? enableReportPurge);

        protected abstract ComDayCqDamCoreImplServletAssetDownloadServletInfo ComDayCqDamCoreImplServletAssetDownloadServlet(bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, bool? enabled);

        protected abstract ComDayCqDamCoreImplServletAssetStatusServletInfo ComDayCqDamCoreImplServletAssetStatusServlet(bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, int? cqDamBatchStatusMaxassets);

        protected abstract ComDayCqDamCoreImplServletAssetXMPSearchServletInfo ComDayCqDamCoreImplServletAssetXMPSearchServlet(bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, int? cqDamBatchIndesignMaxassets);

        protected abstract ComDayCqDamCoreImplServletBatchMetadataServletInfo ComDayCqDamCoreImplServletBatchMetadataServlet(bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, List<string> cqDamBatchMetadataAssetDefault, List<string> cqDamBatchMetadataCollectionDefault, int? cqDamBatchMetadataMaxresources);

        protected abstract ComDayCqDamCoreImplServletBinaryProviderServletInfo ComDayCqDamCoreImplServletBinaryProviderServlet(bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, List<string> slingServletResourceTypes, List<string> slingServletMethods, bool? cqDamDrmEnable);

        protected abstract ComDayCqDamCoreImplServletCollectionServletInfo ComDayCqDamCoreImplServletCollectionServlet(bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, List<string> cqDamBatchCollectionProperties, int? cqDamBatchCollectionMaxcollections);

        protected abstract ComDayCqDamCoreImplServletCollectionsServletInfo ComDayCqDamCoreImplServletCollectionsServlet(bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, List<string> cqDamBatchCollectionsProperties, int? cqDamBatchCollectionsLimit);

        protected abstract ComDayCqDamCoreImplServletCompanionServletInfo ComDayCqDamCoreImplServletCompanionServlet(bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, string moreInfo, string mntoverlaydamguicontentassetsmoreinfoHtmlpath);

        protected abstract ComDayCqDamCoreImplServletCreateAssetServletInfo ComDayCqDamCoreImplServletCreateAssetServlet(bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, bool? detectDuplicate);

        protected abstract ComDayCqDamCoreImplServletDamContentDispositionFilterInfo ComDayCqDamCoreImplServletDamContentDispositionFilter(bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, List<string> cqMimeTypeBlacklist, bool? cqDamEmptyMime);

        protected abstract ComDayCqDamCoreImplServletGuidLookupFilterInfo ComDayCqDamCoreImplServletGuidLookupFilter(bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, bool? cqDamCoreGuidlookupfilterEnabled);

        protected abstract ComDayCqDamCoreImplServletHealthCheckServletInfo ComDayCqDamCoreImplServletHealthCheckServlet(bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, string cqDamSyncWorkflowId, List<string> cqDamSyncFolderTypes);

        protected abstract ComDayCqDamCoreImplServletMetadataGetServletInfo ComDayCqDamCoreImplServletMetadataGetServlet(bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, string slingServletResourceTypes, string slingServletMethods, string slingServletExtensions, string slingServletSelectors);

        protected abstract ComDayCqDamCoreImplServletMultipleLicenseAcceptServletInfo ComDayCqDamCoreImplServletMultipleLicenseAcceptServlet(bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, bool? cqDamDrmEnable);

        protected abstract ComDayCqDamCoreImplServletResourceCollectionServletInfo ComDayCqDamCoreImplServletResourceCollectionServlet(bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, List<string> slingServletResourceTypes, string slingServletMethods, string slingServletSelectors, string downloadConfig, string viewSelector, bool? sendEmail);

        protected abstract ComDayCqDamCoreImplUiPreviewFolderPreviewUpdaterImplInfo ComDayCqDamCoreImplUiPreviewFolderPreviewUpdaterImpl(bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, bool? createPreviewEnabled, bool? updatePreviewEnabled, int? queueSize, string folderPreviewRenditionRegex);

        protected abstract ComDayCqDamCoreImplUnzipUnzipConfigInfo ComDayCqDamCoreImplUnzipUnzipConfig(bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, int? cqDamConfigUnzipMaxuncompressedsize, string cqDamConfigUnzipEncoding);

        protected abstract ComDayCqDamCoreProcessExifToolExtractMetadataProcessInfo ComDayCqDamCoreProcessExifToolExtractMetadataProcess(bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, string processLabel, bool? cqDamEnableSha1);

        protected abstract ComDayCqDamCoreProcessExtractMetadataProcessInfo ComDayCqDamCoreProcessExtractMetadataProcess(bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, string processLabel, bool? cqDamEnableSha1);

        protected abstract ComDayCqDamCoreProcessMetadataProcessorProcessInfo ComDayCqDamCoreProcessMetadataProcessorProcess(bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, string processLabel, bool? cqDamEnableSha1, List<string> cqDamMetadataXssprotectedProperties);

        protected abstract ComDayCqDamHandlerFfmpegLocatorImplInfo ComDayCqDamHandlerFfmpegLocatorImpl(bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, List<string> executableSearchpath);

        protected abstract ComDayCqDamHandlerGibsonFontmanagerImplFontManagerServiceImplInfo ComDayCqDamHandlerGibsonFontmanagerImplFontManagerServiceImpl(bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, string eventFilter, List<string> fontmgrSystemFontDir, string fontmgrAdobeFontDir, string fontmgrCustomerFontDir);

        protected abstract ComDayCqDamHandlerStandardPdfPdfHandlerInfo ComDayCqDamHandlerStandardPdfPdfHandler(bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, bool? rasterAnnotation);

        protected abstract ComDayCqDamHandlerStandardPsPostScriptHandlerInfo ComDayCqDamHandlerStandardPsPostScriptHandler(bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, bool? rasterAnnotation);

        protected abstract ComDayCqDamHandlerStandardPsdPsdHandlerInfo ComDayCqDamHandlerStandardPsdPsdHandler(bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, int? largeFileThreshold);

        protected abstract ComDayCqDamIdsImplIDSJobProcessorInfo ComDayCqDamIdsImplIDSJobProcessor(bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, bool? enableMultisession, bool? idsCcEnable, bool? enableRetry, bool? enableRetryScripterror, string externalizerDomainCqhost, string externalizerDomainHttp);

        protected abstract ComDayCqDamIdsImplIDSPoolManagerImplInfo ComDayCqDamIdsImplIDSPoolManagerImpl(bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, int? maxErrorsToBlacklist, int? retryIntervalToWhitelist, int? connectTimeout, int? socketTimeout, string processLabel, int? connectionUseMax);

        protected abstract ComDayCqDamInddImplHandlerIndesignXMPHandlerInfo ComDayCqDamInddImplHandlerIndesignXMPHandler(bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, string processLabel, bool? extractPages);

        protected abstract ComDayCqDamInddImplServletSnippetCreationServletInfo ComDayCqDamInddImplServletSnippetCreationServlet(bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, int? snippetcreationMaxcollections);

        protected abstract ComDayCqDamInddProcessINDDMediaExtractProcessInfo ComDayCqDamInddProcessINDDMediaExtractProcess(bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, string processLabel, string cqDamInddPagesRegex, bool? idsJobDecoupled, string idsJobWorkflowModel);

        protected abstract ComDayCqDamPerformanceInternalAssetPerformanceDataHandlerImplInfo ComDayCqDamPerformanceInternalAssetPerformanceDataHandlerImpl(bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, int? batchCommitSize);

        protected abstract ComDayCqDamPerformanceInternalAssetPerformanceReportSyncJobInfo ComDayCqDamPerformanceInternalAssetPerformanceReportSyncJob(bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, string schedulerExpression);

        protected abstract ComDayCqDamPimImplSourcingUploadProcessProductAssetsUploadProInfo ComDayCqDamPimImplSourcingUploadProcessProductAssetsUploadPro(bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, bool? deleteZipFile);

        protected abstract ComDayCqDamS7damCommonAnalyticsImplS7damDynamicMediaConfigEvenInfo ComDayCqDamS7damCommonAnalyticsImplS7damDynamicMediaConfigEven(bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, bool? cqDamS7damDynamicmediaconfigeventlistenerEnabled);

        protected abstract ComDayCqDamS7damCommonAnalyticsImplSiteCatalystReportRunnerInfo ComDayCqDamS7damCommonAnalyticsImplSiteCatalystReportRunner(bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, string schedulerExpression, bool? schedulerConcurrent);

        protected abstract ComDayCqDamS7damCommonPostServletsSetCreateHandlerInfo ComDayCqDamS7damCommonPostServletsSetCreateHandler(bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, string slingPostOperation, string slingServletMethods);

        protected abstract ComDayCqDamS7damCommonPostServletsSetModifyHandlerInfo ComDayCqDamS7damCommonPostServletsSetModifyHandler(bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, string slingPostOperation, string slingServletMethods);

        protected abstract ComDayCqDamS7damCommonProcessVideoThumbnailDownloadProcessInfo ComDayCqDamS7damCommonProcessVideoThumbnailDownloadProcess(bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, string processLabel);

        protected abstract ComDayCqDamS7damCommonS7damDamChangeEventListenerInfo ComDayCqDamS7damCommonS7damDamChangeEventListener(bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, bool? cqDamS7damDamchangeeventlistenerEnabled);

        protected abstract ComDayCqDamS7damCommonServletsS7damProductInfoServletInfo ComDayCqDamS7damCommonServletsS7damProductInfoServlet(bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, string slingServletPaths, string slingServletMethods);

        protected abstract ComDayCqDamS7damCommonVideoImplVideoProxyClientServiceImplInfo ComDayCqDamS7damCommonVideoImplVideoProxyClientServiceImpl(bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, int? cqDamS7damVideoproxyclientserviceMultipartuploadMinsizeName, int? cqDamS7damVideoproxyclientserviceMultipartuploadPartsizeName, int? cqDamS7damVideoproxyclientserviceMultipartuploadNumthreadName, int? cqDamS7damVideoproxyclientserviceHttpReadtimeoutName, int? cqDamS7damVideoproxyclientserviceHttpConnectiontimeoutName, int? cqDamS7damVideoproxyclientserviceHttpMaxretrycountName, int? cqDamS7damVideoproxyclientserviceUploadprogressIntervalName);

        protected abstract ComDayCqDamScene7ImplScene7APIClientImplInfo ComDayCqDamScene7ImplScene7APIClientImpl(bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, int? cqDamScene7ApiclientRecordsperpageNofilterName, int? cqDamScene7ApiclientRecordsperpageWithfilterName);

        protected abstract ComDayCqDamScene7ImplScene7AssetMimeTypeServiceImplInfo ComDayCqDamScene7ImplScene7AssetMimeTypeServiceImpl(bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, List<string> cqDamScene7AssetmimetypeserviceMapping);

        protected abstract ComDayCqDamScene7ImplScene7ConfigurationEventListenerInfo ComDayCqDamScene7ImplScene7ConfigurationEventListener(bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, bool? cqDamScene7ConfigurationeventlistenerEnabled);

        protected abstract ComDayCqDamScene7ImplScene7DamChangeEventListenerInfo ComDayCqDamScene7ImplScene7DamChangeEventListener(bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, bool? cqDamScene7DamchangeeventlistenerEnabled, List<string> cqDamScene7DamchangeeventlistenerObservedPaths);

        protected abstract ComDayCqDamScene7ImplScene7FlashTemplatesServiceImplInfo ComDayCqDamScene7ImplScene7FlashTemplatesServiceImpl(bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, string scene7FlashTemplatesRti, string scene7FlashTemplatesRsi, string scene7FlashTemplatesRb, string scene7FlashTemplatesRurl, string scene7FlashTemplateUrlFormatParameter);

        protected abstract ComDayCqDamScene7ImplScene7UploadServiceImplInfo ComDayCqDamScene7ImplScene7UploadServiceImpl(bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, int? cqDamScene7UploadserviceActivejobtimeoutLabel, int? cqDamScene7UploadserviceConnectionmaxperrouteLabel);

        protected abstract ComDayCqDamStockIntegrationImplCacheStockCacheConfigurationSerInfo ComDayCqDamStockIntegrationImplCacheStockCacheConfigurationSer(bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, string getCacheExpirationUnit, int? getCacheExpirationValue);

        protected abstract ComDayCqDamStockIntegrationImplConfigurationStockConfigurationInfo ComDayCqDamStockIntegrationImplConfigurationStockConfiguration(bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, string name, string locale, string imsConfig);

        protected abstract ComDayCqDamVideoImplServletVideoTestServletInfo ComDayCqDamVideoImplServletVideoTestServlet(bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, bool? enabled);

        protected abstract ComDayCqExtwidgetServletsImageSpriteServletInfo ComDayCqExtwidgetServletsImageSpriteServlet(bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, int? maxWidth, int? maxHeight);

        protected abstract ComDayCqImageInternalFontFontHelperInfo ComDayCqImageInternalFontFontHelper(bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, List<string> fontpath, int? oversamplingFactor);

        protected abstract ComDayCqJcrclustersupportClusterStartLevelControllerInfo ComDayCqJcrclustersupportClusterStartLevelController(bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, bool? clusterLevelEnable, int? clusterMasterLevel, int? clusterSlaveLevel);

        protected abstract ComDayCqMailerDefaultMailServiceInfo ComDayCqMailerDefaultMailService(bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, string smtpHost, int? smtpPort, string smtpUser, string smtpPassword, string fromAddress, bool? smtpSsl, bool? smtpStarttls, bool? debugEmail);

        protected abstract ComDayCqMailerImplCqMailingServiceInfo ComDayCqMailerImplCqMailingService(bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, string maxRecipientCount);

        protected abstract ComDayCqMailerImplEmailCqEmailTemplateFactoryInfo ComDayCqMailerImplEmailCqEmailTemplateFactory(bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, string mailerEmailCharset);

        protected abstract ComDayCqMailerImplEmailCqRetrieverTemplateFactoryInfo ComDayCqMailerImplEmailCqRetrieverTemplateFactory(bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, bool? mailerEmailEmbed, string mailerEmailCharset, string mailerEmailRetrieverUserID, string mailerEmailRetrieverUserPWD);

        protected abstract ComDayCqMcmCampaignImplIntegrationConfigImplInfo ComDayCqMcmCampaignImplIntegrationConfigImpl(bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, List<string> aemMcmCampaignFormConstraints, string aemMcmCampaignPublicUrl, bool? aemMcmCampaignRelaxedSSL);

        protected abstract ComDayCqMcmCampaignImporterPersonalizedTextHandlerFactoryInfo ComDayCqMcmCampaignImporterPersonalizedTextHandlerFactory(bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, int? serviceRanking, string tagpattern);

        protected abstract ComDayCqMcmCoreNewsletterNewsletterEmailServiceImplInfo ComDayCqMcmCoreNewsletterNewsletterEmailServiceImpl(bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, string fromAddress, string senderHost, string maxBounceCount);

        protected abstract ComDayCqMcmImplMCMConfigurationInfo ComDayCqMcmImplMCMConfiguration(bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, List<string> experienceIndirection, List<string> touchpointIndirection);

        protected abstract ComDayCqMcmLandingpageParserTaghandlersCtaClickThroughComponenInfo ComDayCqMcmLandingpageParserTaghandlersCtaClickThroughComponen(bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, int? serviceRanking, string tagpattern, string componentResourceType);

        protected abstract ComDayCqMcmLandingpageParserTaghandlersCtaGraphicalClickThrougInfo ComDayCqMcmLandingpageParserTaghandlersCtaGraphicalClickThroug(bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, int? serviceRanking, string tagpattern, string componentResourceType);

        protected abstract ComDayCqMcmLandingpageParserTaghandlersCtaLeadFormCTAComponentInfo ComDayCqMcmLandingpageParserTaghandlersCtaLeadFormCTAComponent(bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, int? serviceRanking, string tagpattern);

        protected abstract ComDayCqMcmLandingpageParserTaghandlersMboxMBoxExperienceTagHaInfo ComDayCqMcmLandingpageParserTaghandlersMboxMBoxExperienceTagHa(bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, int? serviceRanking, string tagpattern);

        protected abstract ComDayCqMcmLandingpageParserTaghandlersMboxTargetComponentTagHInfo ComDayCqMcmLandingpageParserTaghandlersMboxTargetComponentTagH(bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, int? serviceRanking, string tagpattern, string componentResourceType);

        protected abstract ComDayCqNotificationImplNotificationServiceImplInfo ComDayCqNotificationImplNotificationServiceImpl(bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, string eventFilter);

        protected abstract ComDayCqPersonalizationImplServletsTargetingConfigurationServletInfo ComDayCqPersonalizationImplServletsTargetingConfigurationServlet(bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, bool? forcelocation);

        protected abstract ComDayCqPollingImporterImplManagedPollConfigImplInfo ComDayCqPollingImporterImplManagedPollConfigImpl(bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, string id, bool? enabled, bool? reference, int? interval, string expression, string source, string target, string login, string password);

        protected abstract ComDayCqPollingImporterImplManagedPollingImporterImplInfo ComDayCqPollingImporterImplManagedPollingImporterImpl(bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, string importerUser);

        protected abstract ComDayCqPollingImporterImplPollingImporterImplInfo ComDayCqPollingImporterImplPollingImporterImpl(bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, int? importerMinInterval, string importerUser, List<string> excludePaths, List<string> includePaths);

        protected abstract ComDayCqReplicationAuditReplicationEventListenerInfo ComDayCqReplicationAuditReplicationEventListener(bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, int? serviceRanking);

        protected abstract ComDayCqReplicationContentStaticContentBuilderInfo ComDayCqReplicationContentStaticContentBuilder(bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, string host, int? port);

        protected abstract ComDayCqReplicationImplAgentManagerImplInfo ComDayCqReplicationImplAgentManagerImpl(bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, string jobTopics, string serviceUserTarget, string agentProviderTarget);

        protected abstract ComDayCqReplicationImplContentDurboBinaryLessContentBuilderInfo ComDayCqReplicationImplContentDurboBinaryLessContentBuilder(bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, int? binaryThreshold);

        protected abstract ComDayCqReplicationImplContentDurboDurboImportConfigurationProvInfo ComDayCqReplicationImplContentDurboDurboImportConfigurationProv(bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, bool? preserveHierarchyNodes, bool? ignoreVersioning, bool? importAcl, int? saveThreshold, bool? preserveUserPaths, bool? preserveUuid, List<string> preserveUuidNodetypes, List<string> preserveUuidSubtrees, bool? autoCommit);

        protected abstract ComDayCqReplicationImplReplicationContentFactoryProviderImplInfo ComDayCqReplicationImplReplicationContentFactoryProviderImpl(bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, bool? replicationContentUseFileStorage, int? replicationContentMaxCommitAttempts);

        protected abstract ComDayCqReplicationImplReplicationReceiverImplInfo ComDayCqReplicationImplReplicationReceiverImpl(bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, int? receiverTmpfileThreshold, bool? receiverPackagesUseInstall);

        protected abstract ComDayCqReplicationImplReplicatorImplInfo ComDayCqReplicationImplReplicatorImpl(bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, bool? distributeEvents);

        protected abstract ComDayCqReplicationImplReverseReplicatorInfo ComDayCqReplicationImplReverseReplicator(bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, int? schedulerPeriod);

        protected abstract ComDayCqReplicationImplTransportBinaryLessTransportHandlerInfo ComDayCqReplicationImplTransportBinaryLessTransportHandler(bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, List<string> disabledCipherSuites, List<string> enabledCipherSuites);

        protected abstract ComDayCqReplicationImplTransportHttpInfo ComDayCqReplicationImplTransportHttp(bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, List<string> disabledCipherSuites, List<string> enabledCipherSuites);

        protected abstract ComDayCqReportingImplCacheCacheImplInfo ComDayCqReportingImplCacheCacheImpl(bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, bool? repcacheEnable, int? repcacheTtl, int? repcacheMax);

        protected abstract ComDayCqReportingImplConfigServiceImplInfo ComDayCqReportingImplConfigServiceImpl(bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, string repconfTimezone, string repconfLocale, string repconfSnapshots, string repconfRepdir, int? repconfHourofday, int? repconfMinofhour, int? repconfMaxrows, bool? repconfFakedata, string repconfSnapshotuser, bool? repconfEnforcesnapshotuser);

        protected abstract ComDayCqReportingImplRLogAnalyzerInfo ComDayCqReportingImplRLogAnalyzer(bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, string requestLogOutput);

        protected abstract ComDayCqRewriterLinkcheckerImplLinkCheckerImplInfo ComDayCqRewriterLinkcheckerImplLinkCheckerImpl(bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, int? schedulerPeriod, bool? schedulerConcurrent, int? serviceBadLinkToleranceInterval, List<string> serviceCheckOverridePatterns, bool? serviceCacheBrokenInternalLinks, List<string> serviceSpecialLinkPrefix, List<string> serviceSpecialLinkPatterns);

        protected abstract ComDayCqRewriterLinkcheckerImplLinkCheckerTaskInfo ComDayCqRewriterLinkcheckerImplLinkCheckerTask(bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, int? schedulerPeriod, bool? schedulerConcurrent, int? goodLinkTestInterval, int? badLinkTestInterval, int? linkUnusedInterval, int? connectionTimeout);

        protected abstract ComDayCqRewriterLinkcheckerImplLinkCheckerTransformerFactoryInfo ComDayCqRewriterLinkcheckerImplLinkCheckerTransformerFactory(bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, bool? linkcheckertransformerDisableRewriting, bool? linkcheckertransformerDisableChecking, int? linkcheckertransformerMapCacheSize, bool? linkcheckertransformerStrictExtensionCheck, bool? linkcheckertransformerStripHtmltExtension, List<string> linkcheckertransformerRewriteElements, List<string> linkcheckertransformerStripExtensionPathBlacklist);

        protected abstract ComDayCqRewriterLinkcheckerImplLinkInfoStorageImplInfo ComDayCqRewriterLinkcheckerImplLinkInfoStorageImpl(bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, int? serviceMaxLinksPerHost, bool? serviceSaveExternalLinkReferences);

        protected abstract ComDayCqRewriterProcessorImplHtmlParserFactoryInfo ComDayCqRewriterProcessorImplHtmlParserFactory(bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, List<string> htmlparserProcessTags, bool? htmlparserPreserveCamelCase);

        protected abstract ComDayCqSearchImplBuilderQueryBuilderImplInfo ComDayCqSearchImplBuilderQueryBuilderImpl(bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, List<string> excerptProperties, int? cacheMaxEntries, int? cacheEntryLifetime, bool? xpathUnion);

        protected abstract ComDayCqSearchSuggestImplSuggestionIndexManagerImplInfo ComDayCqSearchSuggestImplSuggestionIndexManagerImpl(bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, string pathBuilderTarget, string suggestBasepath);

        protected abstract ComDayCqSearchpromoteImplPublishSearchPromoteConfigHandlerInfo ComDayCqSearchpromoteImplPublishSearchPromoteConfigHandler(bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, bool? cqSearchpromoteConfighandlerEnabled);

        protected abstract ComDayCqSearchpromoteImplSearchPromoteServiceImplInfo ComDayCqSearchpromoteImplSearchPromoteServiceImpl(bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, string cqSearchpromoteConfigurationServerUri, string cqSearchpromoteConfigurationEnvironment, int? connectionTimeout, int? socketTimeout);

        protected abstract ComDayCqSecurityACLSetupInfo ComDayCqSecurityACLSetup(bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, List<string> cqAclsetupRules);

        protected abstract ComDayCqStatisticsImplStatisticsServiceImplInfo ComDayCqStatisticsImplStatisticsServiceImpl(bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, int? schedulerPeriod, bool? schedulerConcurrent, string path, string workspace, string keywordsPath, bool? asyncEntries);

        protected abstract ComDayCqTaggingImplJcrTagManagerFactoryImplInfo ComDayCqTaggingImplJcrTagManagerFactoryImpl(bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, bool? validationEnabled);

        protected abstract ComDayCqTaggingImplSearchTagPredicateEvaluatorInfo ComDayCqTaggingImplSearchTagPredicateEvaluator(bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, bool? ignorePath);

        protected abstract ComDayCqTaggingImplTagGarbageCollectorInfo ComDayCqTaggingImplTagGarbageCollector(bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, string schedulerExpression);

        protected abstract ComDayCqWcmContentsyncImplHandlerPagesUpdateHandlerInfo ComDayCqWcmContentsyncImplHandlerPagesUpdateHandler(bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, List<string> cqPagesupdatehandlerImageresourcetypes);

        protected abstract ComDayCqWcmContentsyncImplRewriterPathRewriterTransformerFactorInfo ComDayCqWcmContentsyncImplRewriterPathRewriterTransformerFactor(bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, List<string> cqContentsyncPathrewritertransformerMappingLinks, List<string> cqContentsyncPathrewritertransformerMappingClientlibs, List<string> cqContentsyncPathrewritertransformerMappingImages, string cqContentsyncPathrewritertransformerAttributePattern, string cqContentsyncPathrewritertransformerClientlibraryPattern, string cqContentsyncPathrewritertransformerClientlibraryReplace);

        protected abstract ComDayCqWcmCoreImplAuthoringUIModeServiceImplInfo ComDayCqWcmCoreImplAuthoringUIModeServiceImpl(bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, string authoringUIModeServiceDefault);

        protected abstract ComDayCqWcmCoreImplCommandsWCMCommandServletInfo ComDayCqWcmCoreImplCommandsWCMCommandServlet(bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, List<string> wcmcommandservletDeleteWhitelist);

        protected abstract ComDayCqWcmCoreImplDevicedetectionDeviceIdentificationModeImplInfo ComDayCqWcmCoreImplDevicedetectionDeviceIdentificationModeImpl(bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, string dimDefaultMode, bool? dimAppcacheEnabled);

        protected abstract ComDayCqWcmCoreImplEventPageEventAuditListenerInfo ComDayCqWcmCoreImplEventPageEventAuditListener(bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, string configured);

        protected abstract ComDayCqWcmCoreImplEventPagePostProcessorInfo ComDayCqWcmCoreImplEventPagePostProcessor(bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, List<string> paths);

        protected abstract ComDayCqWcmCoreImplEventRepositoryChangeEventListenerInfo ComDayCqWcmCoreImplEventRepositoryChangeEventListener(bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, List<string> paths, List<string> excludedPaths);

        protected abstract ComDayCqWcmCoreImplEventTemplatePostProcessorInfo ComDayCqWcmCoreImplEventTemplatePostProcessor(bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, string paths);

        protected abstract ComDayCqWcmCoreImplLanguageManagerImplInfo ComDayCqWcmCoreImplLanguageManagerImpl(bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, string langmgrListPath, List<string> langmgrCountryDefault);

        protected abstract ComDayCqWcmCoreImplLinkCheckerConfigurationFactoryImplInfo ComDayCqWcmCoreImplLinkCheckerConfigurationFactoryImpl(bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, string linkExpiredPrefix, bool? linkExpiredRemove, string linkExpiredSuffix, string linkInvalidPrefix, bool? linkInvalidRemove, string linkInvalidSuffix, string linkPredatedPrefix, bool? linkPredatedRemove, string linkPredatedSuffix, List<string> linkWcmmodes);

        protected abstract ComDayCqWcmCoreImplPagePageInfoAggregatorImplInfo ComDayCqWcmCoreImplPagePageInfoAggregatorImpl(bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, string pageInfoProviderPropertyRegexDefault, string pageInfoProviderPropertyName);

        protected abstract ComDayCqWcmCoreImplPagePageManagerFactoryImplInfo ComDayCqWcmCoreImplPagePageManagerFactoryImpl(bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, string illegalCharMapping, bool? pageSubTreeActivationCheck);

        protected abstract ComDayCqWcmCoreImplReferencesContentContentReferenceConfigInfo ComDayCqWcmCoreImplReferencesContentContentReferenceConfig(bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, List<string> contentReferenceConfigResourceTypes);

        protected abstract ComDayCqWcmCoreImplServletsContentfinderAssetViewHandlerInfo ComDayCqWcmCoreImplServletsContentfinderAssetViewHandler(bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, bool? damShowexpired, bool? damShowhidden, bool? tagTitleSearch, string guessTotal, string damExpiryProperty);

        protected abstract ComDayCqWcmCoreImplServletsContentfinderConnectorConnectorVieInfo ComDayCqWcmCoreImplServletsContentfinderConnectorConnectorVie(bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, List<string> itemResourceTypes);

        protected abstract ComDayCqWcmCoreImplServletsContentfinderPageViewHandlerInfo ComDayCqWcmCoreImplServletsContentfinderPageViewHandler(bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, string guessTotal, bool? tagTitleSearch);

        protected abstract ComDayCqWcmCoreImplServletsFindReplaceServletInfo ComDayCqWcmCoreImplServletsFindReplaceServlet(bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, List<string> scope);

        protected abstract ComDayCqWcmCoreImplServletsReferenceSearchServletInfo ComDayCqWcmCoreImplServletsReferenceSearchServlet(bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, int? referencesearchservletMaxReferencesPerPage, int? referencesearchservletMaxPages);

        protected abstract ComDayCqWcmCoreImplServletsThumbnailServletInfo ComDayCqWcmCoreImplServletsThumbnailServlet(bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, string workspace, List<string> dimensions);

        protected abstract ComDayCqWcmCoreImplUtilsDefaultPageNameValidatorInfo ComDayCqWcmCoreImplUtilsDefaultPageNameValidator(bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, string nonValidChars);

        protected abstract ComDayCqWcmCoreImplVariantsPageVariantsProviderImplInfo ComDayCqWcmCoreImplVariantsPageVariantsProviderImpl(bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, string defaultExternalizerDomain);

        protected abstract ComDayCqWcmCoreImplVersionManagerImplInfo ComDayCqWcmCoreImplVersionManagerImpl(bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, bool? versionmanagerCreateVersionOnActivation, bool? versionmanagerPurgingEnabled, List<string> versionmanagerPurgePaths, List<string> versionmanagerIvPaths, int? versionmanagerMaxAgeDays, int? versionmanagerMaxNumberVersions, int? versionmanagerMinNumberVersions);

        protected abstract ComDayCqWcmCoreImplVersionPurgeTaskInfo ComDayCqWcmCoreImplVersionPurgeTask(bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, List<string> versionpurgePaths, bool? versionpurgeRecursive, int? versionpurgeMaxVersions, int? versionpurgeMinVersions, int? versionpurgeMaxAgeDays);

        protected abstract ComDayCqWcmCoreImplWCMDebugFilterInfo ComDayCqWcmCoreImplWCMDebugFilter(bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, bool? wcmdbgfilterEnabled, bool? wcmdbgfilterJspDebug);

        protected abstract ComDayCqWcmCoreImplWCMDeveloperModeFilterInfo ComDayCqWcmCoreImplWCMDeveloperModeFilter(bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, bool? wcmdevmodefilterEnabled);

        protected abstract ComDayCqWcmCoreImplWarpTimeWarpFilterInfo ComDayCqWcmCoreImplWarpTimeWarpFilter(bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, string filterOrder, string filterScope);

        protected abstract ComDayCqWcmCoreMvtMVTStatisticsImplInfo ComDayCqWcmCoreMvtMVTStatisticsImpl(bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, string mvtstatisticsTrackingurl);

        protected abstract ComDayCqWcmCoreStatsPageViewStatisticsImplInfo ComDayCqWcmCoreStatsPageViewStatisticsImpl(bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, string pageviewstatisticsTrackingurl, string pageviewstatisticsTrackingscriptEnabled);

        protected abstract ComDayCqWcmCoreWCMRequestFilterInfo ComDayCqWcmCoreWCMRequestFilter(bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, string wcmfilterMode);

        protected abstract ComDayCqWcmDesignimporterDesignPackageImporterInfo ComDayCqWcmDesignimporterDesignPackageImporter(bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, List<string> extractFilter);

        protected abstract ComDayCqWcmDesignimporterImplCanvasBuilderImplInfo ComDayCqWcmDesignimporterImplCanvasBuilderImpl(bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, string filepattern, bool? buildPageNodes, bool? buildClientLibs, bool? buildCanvasComponent);

        protected abstract ComDayCqWcmDesignimporterImplCanvasPageDeleteHandlerInfo ComDayCqWcmDesignimporterImplCanvasPageDeleteHandler(bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, int? minThreadPoolSize, int? maxThreadPoolSize);

        protected abstract ComDayCqWcmDesignimporterImplEntryPreprocessorImplInfo ComDayCqWcmDesignimporterImplEntryPreprocessorImpl(bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, string searchPattern, string replacePattern);

        protected abstract ComDayCqWcmDesignimporterImplMobileCanvasBuilderImplInfo ComDayCqWcmDesignimporterImplMobileCanvasBuilderImpl(bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, string filepattern, List<string> deviceGroups, bool? buildPageNodes, bool? buildClientLibs, bool? buildCanvasComponent);

        protected abstract ComDayCqWcmDesignimporterParserTaghandlersFactoryCanvasComponeInfo ComDayCqWcmDesignimporterParserTaghandlersFactoryCanvasCompone(bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, int? serviceRanking, string tagpattern);

        protected abstract ComDayCqWcmDesignimporterParserTaghandlersFactoryDefaultComponInfo ComDayCqWcmDesignimporterParserTaghandlersFactoryDefaultCompon(bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, int? serviceRanking, string tagpattern);

        protected abstract ComDayCqWcmDesignimporterParserTaghandlersFactoryDefaultTagHanInfo ComDayCqWcmDesignimporterParserTaghandlersFactoryDefaultTagHan(bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, int? serviceRanking, string tagpattern);

        protected abstract ComDayCqWcmDesignimporterParserTaghandlersFactoryHeadTagHandleInfo ComDayCqWcmDesignimporterParserTaghandlersFactoryHeadTagHandle(bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, int? serviceRanking, string tagpattern);

        protected abstract ComDayCqWcmDesignimporterParserTaghandlersFactoryIFrameTagHandInfo ComDayCqWcmDesignimporterParserTaghandlersFactoryIFrameTagHand(bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, int? serviceRanking, string tagpattern);

        protected abstract ComDayCqWcmDesignimporterParserTaghandlersFactoryImageComponenInfo ComDayCqWcmDesignimporterParserTaghandlersFactoryImageComponen(bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, int? serviceRanking, string tagpattern, string componentResourceType);

        protected abstract ComDayCqWcmDesignimporterParserTaghandlersFactoryImgTagHandlerInfo ComDayCqWcmDesignimporterParserTaghandlersFactoryImgTagHandler(bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, int? serviceRanking, string tagpattern);

        protected abstract ComDayCqWcmDesignimporterParserTaghandlersFactoryInlineScriptTInfo ComDayCqWcmDesignimporterParserTaghandlersFactoryInlineScriptT(bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, int? serviceRanking, string tagpattern);

        protected abstract ComDayCqWcmDesignimporterParserTaghandlersFactoryLinkTagHandleInfo ComDayCqWcmDesignimporterParserTaghandlersFactoryLinkTagHandle(bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, int? serviceRanking, string tagpattern);

        protected abstract ComDayCqWcmDesignimporterParserTaghandlersFactoryMetaTagHandleInfo ComDayCqWcmDesignimporterParserTaghandlersFactoryMetaTagHandle(bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, int? serviceRanking, string tagpattern);

        protected abstract ComDayCqWcmDesignimporterParserTaghandlersFactoryNonScriptTagHInfo ComDayCqWcmDesignimporterParserTaghandlersFactoryNonScriptTagH(bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, int? serviceRanking, string tagpattern);

        protected abstract ComDayCqWcmDesignimporterParserTaghandlersFactoryParsysComponeInfo ComDayCqWcmDesignimporterParserTaghandlersFactoryParsysCompone(bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, int? serviceRanking, string tagpattern, string componentResourceType);

        protected abstract ComDayCqWcmDesignimporterParserTaghandlersFactoryScriptTagHandInfo ComDayCqWcmDesignimporterParserTaghandlersFactoryScriptTagHand(bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, int? serviceRanking, string tagpattern);

        protected abstract ComDayCqWcmDesignimporterParserTaghandlersFactoryStyleTagHandlInfo ComDayCqWcmDesignimporterParserTaghandlersFactoryStyleTagHandl(bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, int? serviceRanking, string tagpattern);

        protected abstract ComDayCqWcmDesignimporterParserTaghandlersFactoryTextComponentInfo ComDayCqWcmDesignimporterParserTaghandlersFactoryTextComponent(bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, int? serviceRanking, string tagpattern, string componentResourceType);

        protected abstract ComDayCqWcmDesignimporterParserTaghandlersFactoryTitleComponenInfo ComDayCqWcmDesignimporterParserTaghandlersFactoryTitleComponen(bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, int? serviceRanking, string tagpattern, string componentResourceType);

        protected abstract ComDayCqWcmDesignimporterParserTaghandlersFactoryTitleTagHandlInfo ComDayCqWcmDesignimporterParserTaghandlersFactoryTitleTagHandl(bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, int? serviceRanking, string tagpattern);

        protected abstract ComDayCqWcmFoundationFormsImplFormChooserServletInfo ComDayCqWcmFoundationFormsImplFormChooserServlet(bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, string serviceName, string slingServletResourceTypes, string slingServletSelectors, List<string> slingServletMethods, bool? formsFormchooserservletAdvansesearchRequire);

        protected abstract ComDayCqWcmFoundationFormsImplFormParagraphPostProcessorInfo ComDayCqWcmFoundationFormsImplFormParagraphPostProcessor(bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, bool? formsFormparagraphpostprocessorEnabled, List<string> formsFormparagraphpostprocessorFormresourcetypes);

        protected abstract ComDayCqWcmFoundationFormsImplFormsHandlingServletInfo ComDayCqWcmFoundationFormsImplFormsHandlingServlet(bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, string nameWhitelist, bool? allowExpressions);

        protected abstract ComDayCqWcmFoundationFormsImplMailServletInfo ComDayCqWcmFoundationFormsImplMailServlet(bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, string slingServletResourceTypes, string slingServletSelectors, List<string> resourceWhitelist, string resourceBlacklist);

        protected abstract ComDayCqWcmFoundationImplAdaptiveImageComponentServletInfo ComDayCqWcmFoundationImplAdaptiveImageComponentServlet(bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, List<string> adaptSupportedWidths);

        protected abstract ComDayCqWcmFoundationImplHTTPAuthHandlerInfo ComDayCqWcmFoundationImplHTTPAuthHandler(bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, string path, bool? authHttpNologin, string authHttpRealm, string authDefaultLoginpage, List<string> authCredForm, List<string> authCredUtf8);

        protected abstract ComDayCqWcmFoundationImplPageImpressionsTrackerInfo ComDayCqWcmFoundationImplPageImpressionsTracker(bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, string slingAuthRequirements);

        protected abstract ComDayCqWcmFoundationImplPageRedirectServletInfo ComDayCqWcmFoundationImplPageRedirectServlet(bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, List<string> excludedResourceTypes);

        protected abstract ComDayCqWcmFoundationSecurityImplDefaultAttachmentTypeBlacklistInfo ComDayCqWcmFoundationSecurityImplDefaultAttachmentTypeBlacklist(bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, List<string> defaultAttachmentTypeBlacklist, List<string> baselineAttachmentTypeBlacklist);

        protected abstract ComDayCqWcmFoundationSecurityImplSaferSlingPostValidatorImplInfo ComDayCqWcmFoundationSecurityImplSaferSlingPostValidatorImpl(bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, List<string> parameterWhitelist, List<string> parameterWhitelistPrefixes, List<string> binaryParameterWhitelist, List<string> modifierWhitelist, List<string> operationWhitelist, List<string> operationWhitelistPrefixes, List<string> typehintWhitelist, List<string> resourcetypeWhitelist);

        protected abstract ComDayCqWcmMobileCoreImplDeviceDeviceInfoTransformerFactoryInfo ComDayCqWcmMobileCoreImplDeviceDeviceInfoTransformerFactory(bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, bool? deviceInfoTransformerEnabled, string deviceInfoTransformerCssStyle);

        protected abstract ComDayCqWcmMobileCoreImplRedirectRedirectFilterInfo ComDayCqWcmMobileCoreImplRedirectRedirectFilter(bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, bool? redirectEnabled, bool? redirectStatsEnabled, List<string> redirectExtensions, List<string> redirectPaths);

        protected abstract ComDayCqWcmMsmImplActionsContentCopyActionFactoryInfo ComDayCqWcmMsmImplActionsContentCopyActionFactory(bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, List<string> cqWcmMsmActionExcludednodetypes, List<string> cqWcmMsmActionExcludedparagraphitems, List<string> cqWcmMsmActionExcludedprops, string contentcopyactionOrderStyle);

        protected abstract ComDayCqWcmMsmImplActionsContentDeleteActionFactoryInfo ComDayCqWcmMsmImplActionsContentDeleteActionFactory(bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, List<string> cqWcmMsmActionExcludednodetypes, List<string> cqWcmMsmActionExcludedparagraphitems, List<string> cqWcmMsmActionExcludedprops);

        protected abstract ComDayCqWcmMsmImplActionsContentUpdateActionFactoryInfo ComDayCqWcmMsmImplActionsContentUpdateActionFactory(bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, List<string> cqWcmMsmActionExcludednodetypes, List<string> cqWcmMsmActionExcludedparagraphitems, List<string> cqWcmMsmActionExcludedprops, List<string> cqWcmMsmActionIgnoredMixin);

        protected abstract ComDayCqWcmMsmImplActionsOrderChildrenActionFactoryInfo ComDayCqWcmMsmImplActionsOrderChildrenActionFactory(bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, List<string> cqWcmMsmActionExcludednodetypes, List<string> cqWcmMsmActionExcludedparagraphitems, List<string> cqWcmMsmActionExcludedprops);

        protected abstract ComDayCqWcmMsmImplActionsPageMoveActionFactoryInfo ComDayCqWcmMsmImplActionsPageMoveActionFactory(bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, List<string> cqWcmMsmActionExcludednodetypes, List<string> cqWcmMsmActionExcludedparagraphitems, List<string> cqWcmMsmActionExcludedprops, bool? cqWcmMsmImplActionsPagemovePropReferenceUpdate);

        protected abstract ComDayCqWcmMsmImplActionsReferencesUpdateActionFactoryInfo ComDayCqWcmMsmImplActionsReferencesUpdateActionFactory(bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, List<string> cqWcmMsmActionExcludednodetypes, List<string> cqWcmMsmActionExcludedparagraphitems, List<string> cqWcmMsmActionExcludedprops, bool? cqWcmMsmImplActionReferencesupdatePropUpdateNested);

        protected abstract ComDayCqWcmMsmImplActionsVersionCopyActionFactoryInfo ComDayCqWcmMsmImplActionsVersionCopyActionFactory(bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, List<string> cqWcmMsmActionExcludednodetypes, List<string> cqWcmMsmActionExcludedparagraphitems, List<string> cqWcmMsmActionExcludedprops);

        protected abstract ComDayCqWcmMsmImplLiveRelationshipManagerImplInfo ComDayCqWcmMsmImplLiveRelationshipManagerImpl(bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, string liverelationshipmgrRelationsconfigDefault);

        protected abstract ComDayCqWcmMsmImplRolloutManagerImplInfo ComDayCqWcmMsmImplRolloutManagerImpl(bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, string eventFilter, List<string> rolloutmgrExcludedpropsDefault, List<string> rolloutmgrExcludedparagraphpropsDefault, List<string> rolloutmgrExcludednodetypesDefault, int? rolloutmgrThreadpoolMaxsize, int? rolloutmgrThreadpoolMaxshutdowntime, string rolloutmgrThreadpoolPriority, int? rolloutmgrCommitSize, bool? rolloutmgrConflicthandlingEnabled);

        protected abstract ComDayCqWcmMsmImplServletsAuditLogServletInfo ComDayCqWcmMsmImplServletsAuditLogServlet(bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, int? auditlogservletDefaultEventsCount, string auditlogservletDefaultPath);

        protected abstract ComDayCqWcmNotificationEmailImplEmailChannelInfo ComDayCqWcmNotificationEmailImplEmailChannel(bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, string emailFrom);

        protected abstract ComDayCqWcmNotificationImplNotificationManagerImplInfo ComDayCqWcmNotificationImplNotificationManagerImpl(bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, List<string> eventTopics);

        protected abstract ComDayCqWcmScriptingImplBVPManagerInfo ComDayCqWcmScriptingImplBVPManager(bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, List<string> comDayCqWcmScriptingBvpScriptEngines);

        protected abstract ComDayCqWcmUndoUndoConfigInfo ComDayCqWcmUndoUndoConfig(bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, bool? cqWcmUndoEnabled, string cqWcmUndoPath, int? cqWcmUndoValidity, int? cqWcmUndoSteps, string cqWcmUndoPersistence, bool? cqWcmUndoPersistenceMode, string cqWcmUndoMarkermode, List<string> cqWcmUndoWhitelist, List<string> cqWcmUndoBlacklist);

        protected abstract ComDayCqWcmWebservicesupportImplReplicationEventListenerInfo ComDayCqWcmWebservicesupportImplReplicationEventListener(bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, List<string> flushAgents);

        protected abstract ComDayCqWcmWorkflowImplWcmWorkflowServiceImplInfo ComDayCqWcmWorkflowImplWcmWorkflowServiceImpl(bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, string eventFilter, int? minThreadPoolSize, int? maxThreadPoolSize, bool? cqWcmWorkflowTerminateOnActivate, List<string> cqWcmWorklfowTerminateExclusionList);

        protected abstract ComDayCqWcmWorkflowImplWorkflowPackageInfoProviderInfo ComDayCqWcmWorkflowImplWorkflowPackageInfoProvider(bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, List<string> workflowpackageinfoproviderFilter, string workflowpackageinfoproviderFilterRootpath);

        protected abstract ComDayCqWidgetImplHtmlLibraryManagerImplInfo ComDayCqWidgetImplHtmlLibraryManagerImpl(bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, string htmllibmanagerClientmanager, bool? htmllibmanagerDebug, bool? htmllibmanagerDebugConsole, string htmllibmanagerDebugInitJs, string htmllibmanagerDefaultthemename, string htmllibmanagerDefaultuserthemename, string htmllibmanagerFirebuglitePath, bool? htmllibmanagerForceCQUrlInfo, bool? htmllibmanagerGzip, int? htmllibmanagerMaxage, int? htmllibmanagerMaxDataUriSize, bool? htmllibmanagerMinify, List<string> htmllibmanagerPathList, bool? htmllibmanagerTiming);

        protected abstract ComDayCqWidgetImplWidgetExtensionProviderImplInfo ComDayCqWidgetImplWidgetExtensionProviderImpl(bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, List<string> extendableWidgets, bool? widgetextensionproviderDebug);

        protected abstract ComDayCqWorkflowImplEmailEMailNotificationServiceInfo ComDayCqWorkflowImplEmailEMailNotificationService(bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, string fromAddress, string hostPrefix, bool? notifyOnabort, bool? notifyOncomplete, bool? notifyOncontainercomplete, bool? notifyUseronly);

        protected abstract ComDayCqWorkflowImplEmailTaskEMailNotificationServiceInfo ComDayCqWorkflowImplEmailTaskEMailNotificationService(bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, bool? notifyOnupdate, bool? notifyOncomplete);

        protected abstract ComDayCrxSecurityTokenImplImplTokenAuthenticationHandlerInfo ComDayCrxSecurityTokenImplImplTokenAuthenticationHandler(bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, string path, string tokenRequiredAttr, string tokenAlternateUrl, bool? tokenEncapsulated, List<string> skipTokenRefresh);

        protected abstract ComDayCrxSecurityTokenImplTokenCleanupTaskInfo ComDayCrxSecurityTokenImplTokenCleanupTask(bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, bool? enableTokenCleanupTask, string schedulerExpression, int? batchSize);

        protected abstract GuideLocalizationServiceInfo GuideLocalizationService(bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, List<string> supportedLocales, List<string> localizableProperties);

        protected abstract MessagingUserComponentFactoryInfo MessagingUserComponentFactory(bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, int? priority);

        protected abstract OrgApacheAriesJmxFrameworkStateConfigInfo OrgApacheAriesJmxFrameworkStateConfig(bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, bool? attributeChangeNotificationEnabled);

        protected abstract OrgApacheFelixEventadminImplEventAdminInfo OrgApacheFelixEventadminImplEventAdmin(bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, int? orgApacheFelixEventadminThreadPoolSize, decimal? orgApacheFelixEventadminAsyncToSyncThreadRatio, int? orgApacheFelixEventadminTimeout, bool? orgApacheFelixEventadminRequireTopic, List<string> orgApacheFelixEventadminIgnoreTimeout, List<string> orgApacheFelixEventadminIgnoreTopic);

        protected abstract OrgApacheFelixHttpInfo OrgApacheFelixHttp(bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, string orgApacheFelixHttpHost, bool? orgApacheFelixHttpEnable, int? orgOsgiServiceHttpPort, int? orgApacheFelixHttpTimeout, bool? orgApacheFelixHttpsEnable, int? orgOsgiServiceHttpPortSecure, string orgApacheFelixHttpsKeystore, string orgApacheFelixHttpsKeystorePassword, string orgApacheFelixHttpsKeystoreKeyPassword, string orgApacheFelixHttpsTruststore, string orgApacheFelixHttpsTruststorePassword, string orgApacheFelixHttpsClientcertificate, string orgApacheFelixHttpContextPath, bool? orgApacheFelixHttpMbeans, int? orgApacheFelixHttpSessionTimeout, int? orgApacheFelixHttpJettyThreadpoolMax, int? orgApacheFelixHttpJettyAcceptors, int? orgApacheFelixHttpJettySelectors, int? orgApacheFelixHttpJettyHeaderBufferSize, int? orgApacheFelixHttpJettyRequestBufferSize, int? orgApacheFelixHttpJettyResponseBufferSize, int? orgApacheFelixHttpJettyMaxFormSize, List<string> orgApacheFelixHttpPathExclusions, List<string> orgApacheFelixHttpsJettyCiphersuitesExcluded, List<string> orgApacheFelixHttpsJettyCiphersuitesIncluded, bool? orgApacheFelixHttpJettySendServerHeader, List<string> orgApacheFelixHttpsJettyProtocolsIncluded, List<string> orgApacheFelixHttpsJettyProtocolsExcluded, bool? orgApacheFelixProxyLoadBalancerConnectionEnable, bool? orgApacheFelixHttpsJettyRenegotiateAllowed, bool? orgApacheFelixHttpsJettySessionCookieHttpOnly, bool? orgApacheFelixHttpsJettySessionCookieSecure, string orgEclipseJettyServletSessionIdPathParameterName, bool? orgEclipseJettyServletCheckingRemoteSessionIdEncoding, string orgEclipseJettyServletSessionCookie, string orgEclipseJettyServletSessionDomain, string orgEclipseJettyServletSessionPath, int? orgEclipseJettyServletMaxAge, string orgApacheFelixHttpName, bool? orgApacheFelixJettyGziphandlerEnable, int? orgApacheFelixJettyGzipMinGzipSize, int? orgApacheFelixJettyGzipCompressionLevel, int? orgApacheFelixJettyGzipInflateBufferSize, bool? orgApacheFelixJettyGzipSyncFlush, List<string> orgApacheFelixJettyGzipExcludedUserAgents, List<string> orgApacheFelixJettyGzipIncludedMethods, List<string> orgApacheFelixJettyGzipExcludedMethods, List<string> orgApacheFelixJettyGzipIncludedPaths, List<string> orgApacheFelixJettyGzipExcludedPaths, List<string> orgApacheFelixJettyGzipIncludedMimeTypes, List<string> orgApacheFelixJettyGzipExcludedMimeTypes, bool? orgApacheFelixHttpSessionInvalidate, bool? orgApacheFelixHttpSessionUniqueid);

        protected abstract OrgApacheFelixHttpSslfilterSslFilterInfo OrgApacheFelixHttpSslfilterSslFilter(bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, string sslForwardHeader, string sslForwardValue, string sslForwardCertHeader, bool? rewriteAbsoluteUrls);

        protected abstract OrgApacheFelixJaasConfigurationFactoryInfo OrgApacheFelixJaasConfigurationFactory(bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, string jaasControlFlag, int? jaasRanking, string jaasRealmName, string jaasClassname, List<string> jaasOptions);

        protected abstract OrgApacheFelixJaasConfigurationSpiInfo OrgApacheFelixJaasConfigurationSpi(bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, string jaasDefaultRealmName, string jaasConfigProviderName, string jaasGlobalConfigPolicy);

        protected abstract OrgApacheFelixScrScrServiceInfo OrgApacheFelixScrScrService(bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, int? dsLoglevel, bool? dsFactoryEnabled, bool? dsDelayedKeepInstances, int? dsLockTimeoutMilliseconds, int? dsStopTimeoutMilliseconds, bool? dsGlobalExtender);

        protected abstract OrgApacheFelixSystemreadyImplComponentsCheckInfo OrgApacheFelixSystemreadyImplComponentsCheck(bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, List<string> componentsList, string type);

        protected abstract OrgApacheFelixSystemreadyImplFrameworkStartCheckInfo OrgApacheFelixSystemreadyImplFrameworkStartCheck(bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, int? timeout, int? targetStartLevel, string targetStartLevelPropName, string type);

        protected abstract OrgApacheFelixSystemreadyImplServicesCheckInfo OrgApacheFelixSystemreadyImplServicesCheck(bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, List<string> servicesList, string type);

        protected abstract OrgApacheFelixSystemreadyImplServletSystemAliveServletInfo OrgApacheFelixSystemreadyImplServletSystemAliveServlet(bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, string osgiHttpWhiteboardServletPattern, string osgiHttpWhiteboardContextSelect);

        protected abstract OrgApacheFelixSystemreadyImplServletSystemReadyServletInfo OrgApacheFelixSystemreadyImplServletSystemReadyServlet(bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, string osgiHttpWhiteboardServletPattern, string osgiHttpWhiteboardContextSelect);

        protected abstract OrgApacheFelixSystemreadySystemReadyMonitorInfo OrgApacheFelixSystemreadySystemReadyMonitor(bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, int? pollInterval);

        protected abstract OrgApacheFelixWebconsoleInternalServletOsgiManagerInfo OrgApacheFelixWebconsoleInternalServletOsgiManager(bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, string managerRoot, string httpServiceFilter, string defaultRender, string realm, string username, string password, string category, string locale, int? loglevel, string plugins);

        protected abstract OrgApacheFelixWebconsolePluginsEventInternalPluginServletInfo OrgApacheFelixWebconsolePluginsEventInternalPluginServlet(bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, int? maxSize);

        protected abstract OrgApacheFelixWebconsolePluginsMemoryusageInternalMemoryUsageCoInfo OrgApacheFelixWebconsolePluginsMemoryusageInternalMemoryUsageCo(bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, int? felixMemoryusageDumpThreshold, int? felixMemoryusageDumpInterval, string felixMemoryusageDumpLocation);

        protected abstract OrgApacheHttpProxyconfiguratorInfo OrgApacheHttpProxyconfigurator(bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, bool? proxyEnabled, string proxyHost, int? proxyPort, string proxyUser, string proxyPassword, List<string> proxyExceptions);

        protected abstract OrgApacheJackrabbitOakPluginsBlobDatastoreDataStoreTextProviderInfo OrgApacheJackrabbitOakPluginsBlobDatastoreDataStoreTextProvider(bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, string dir);

        protected abstract OrgApacheJackrabbitOakPluginsBlobDatastoreFileDataStoreInfo OrgApacheJackrabbitOakPluginsBlobDatastoreFileDataStore(bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, string path);

        protected abstract OrgApacheJackrabbitOakPluginsDocumentDocumentNodeStoreServiceInfo OrgApacheJackrabbitOakPluginsDocumentDocumentNodeStoreService(bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, string mongouri, string db, bool? socketKeepAlive, int? cache, int? nodeCachePercentage, int? prevDocCachePercentage, int? childrenCachePercentage, int? diffCachePercentage, int? cacheSegmentCount, int? cacheStackMoveDistance, int? blobCacheSize, string persistentCache, string journalCache, bool? customBlobStore, int? journalGCInterval, int? journalGCMaxAge, bool? prefetchExternalChanges, string role, int? versionGcMaxAgeInSecs, string versionGCExpression, int? versionGCTimeLimitInSecs, int? blobGcMaxAgeInSecs, int? blobTrackSnapshotIntervalInSecs, string repositoryHome, int? maxReplicationLagInSecs, string documentStoreType, bool? bundlingDisabled, int? updateLimit, List<string> persistentCacheIncludes, string leaseCheckMode);

        protected abstract OrgApacheJackrabbitOakPluginsDocumentDocumentNodeStoreServicePreInfo OrgApacheJackrabbitOakPluginsDocumentDocumentNodeStoreServicePre(bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, List<string> persistentCacheIncludes);

        protected abstract OrgApacheJackrabbitOakPluginsDocumentSecondarySecondaryStoreCacInfo OrgApacheJackrabbitOakPluginsDocumentSecondarySecondaryStoreCac(bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, List<string> includedPaths, bool? enableAsyncObserver, int? observerQueueSize);

        protected abstract OrgApacheJackrabbitOakPluginsIndexAsyncIndexerServiceInfo OrgApacheJackrabbitOakPluginsIndexAsyncIndexerService(bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, List<string> asyncConfigs, int? leaseTimeOutMinutes, int? failingIndexTimeoutSeconds, int? errorWarnIntervalSeconds);

        protected abstract OrgApacheJackrabbitOakPluginsIndexLuceneLuceneIndexProviderServInfo OrgApacheJackrabbitOakPluginsIndexLuceneLuceneIndexProviderServ(bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, bool? disabled, bool? debug, string localIndexDir, bool? enableOpenIndexAsync, int? threadPoolSize, bool? prefetchIndexFiles, int? extractedTextCacheSizeInMB, int? extractedTextCacheExpiryInSecs, bool? alwaysUsePreExtractedCache, int? booleanClauseLimit, bool? enableHybridIndexing, int? hybridQueueSize, bool? disableStoredIndexDefinition, bool? deletedBlobsCollectionEnabled, int? propIndexCleanerIntervalInSecs, bool? enableSingleBlobIndexFiles);

        protected abstract OrgApacheJackrabbitOakPluginsIndexSolrOsgiEmbeddedSolrServerCoInfo OrgApacheJackrabbitOakPluginsIndexSolrOsgiEmbeddedSolrServerCo(bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, string solrHomePath, string solrCoreName);

        protected abstract OrgApacheJackrabbitOakPluginsIndexSolrOsgiNodeStateSolrServersInfo OrgApacheJackrabbitOakPluginsIndexSolrOsgiNodeStateSolrServers(bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, bool? enabled);

        protected abstract OrgApacheJackrabbitOakPluginsIndexSolrOsgiOakSolrConfigurationInfo OrgApacheJackrabbitOakPluginsIndexSolrOsgiOakSolrConfiguration(bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, string pathDescField, string pathChildField, string pathParentField, string pathExactField, string catchAllField, string collapsedPathField, string pathDepthField, string commitPolicy, int? rows, bool? pathRestrictions, bool? propertyRestrictions, bool? primarytypesRestrictions, List<string> ignoredProperties, List<string> usedProperties, List<string> typeMappings, List<string> propertyMappings, bool? collapseJcrcontentNodes);

        protected abstract OrgApacheJackrabbitOakPluginsIndexSolrOsgiRemoteSolrServerConfInfo OrgApacheJackrabbitOakPluginsIndexSolrOsgiRemoteSolrServerConf(bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, string solrHttpUrl, string solrZkHost, string solrCollection, int? solrSocketTimeout, int? solrConnectionTimeout, int? solrShardsNo, int? solrReplicationFactor, string solrConfDir);

        protected abstract OrgApacheJackrabbitOakPluginsIndexSolrOsgiSolrQueryIndexProvidInfo OrgApacheJackrabbitOakPluginsIndexSolrOsgiSolrQueryIndexProvid(bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, bool? queryAggregation);

        protected abstract OrgApacheJackrabbitOakPluginsIndexSolrOsgiSolrServerProviderSeInfo OrgApacheJackrabbitOakPluginsIndexSolrOsgiSolrServerProviderSe(bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, string serverType);

        protected abstract OrgApacheJackrabbitOakPluginsMetricStatisticsProviderFactoryInfo OrgApacheJackrabbitOakPluginsMetricStatisticsProviderFactory(bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, string providerType);

        protected abstract OrgApacheJackrabbitOakPluginsObservationChangeCollectorProviderInfo OrgApacheJackrabbitOakPluginsObservationChangeCollectorProvider(bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, int? maxItems, int? maxPathDepth, bool? enabled);

        protected abstract OrgApacheJackrabbitOakQueryQueryEngineSettingsServiceInfo OrgApacheJackrabbitOakQueryQueryEngineSettingsService(bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, int? queryLimitInMemory, int? queryLimitReads, bool? queryFailTraversal, bool? fastQuerySize);

        protected abstract OrgApacheJackrabbitOakSecurityAuthenticationAuthenticationConfigInfo OrgApacheJackrabbitOakSecurityAuthenticationAuthenticationConfig(bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, string orgApacheJackrabbitOakAuthenticationAppName, string orgApacheJackrabbitOakAuthenticationConfigSpiName);

        protected abstract OrgApacheJackrabbitOakSecurityAuthenticationLdapImplLdapIdentiInfo OrgApacheJackrabbitOakSecurityAuthenticationLdapImplLdapIdenti(bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, string providerName, string hostName, int? hostPort, bool? hostSsl, bool? hostTls, bool? hostNoCertCheck, string bindDn, string bindPassword, string searchTimeout, int? adminPoolMaxActive, bool? adminPoolLookupOnValidate, int? userPoolMaxActive, bool? userPoolLookupOnValidate, string userBaseDN, List<string> userObjectclass, string userIdAttribute, string userExtraFilter, bool? userMakeDnPath, string groupBaseDN, List<string> groupObjectclass, string groupNameAttribute, string groupExtraFilter, bool? groupMakeDnPath, string groupMemberAttribute, bool? useUidForExtId, List<string> customattributes);

        protected abstract OrgApacheJackrabbitOakSecurityAuthenticationTokenTokenConfiguraInfo OrgApacheJackrabbitOakSecurityAuthenticationTokenTokenConfigura(bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, string tokenExpiration, string tokenLength, bool? tokenRefresh, int? tokenCleanupThreshold, string passwordHashAlgorithm, int? passwordHashIterations, int? passwordSaltSize);

        protected abstract OrgApacheJackrabbitOakSecurityAuthorizationAuthorizationConfigurInfo OrgApacheJackrabbitOakSecurityAuthorizationAuthorizationConfigur(bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, string permissionsJr2, string importBehavior, List<string> readPaths, List<string> administrativePrincipals, int? configurationRanking);

        protected abstract OrgApacheJackrabbitOakSecurityInternalSecurityProviderRegistratiInfo OrgApacheJackrabbitOakSecurityInternalSecurityProviderRegistrati(bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, List<string> requiredServicePids, string authorizationCompositionType);

        protected abstract OrgApacheJackrabbitOakSecurityUserRandomAuthorizableNodeNameInfo OrgApacheJackrabbitOakSecurityUserRandomAuthorizableNodeName(bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, int? length);

        protected abstract OrgApacheJackrabbitOakSecurityUserUserConfigurationImplInfo OrgApacheJackrabbitOakSecurityUserUserConfigurationImpl(bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, string usersPath, string groupsPath, string systemRelativePath, int? defaultDepth, string importBehavior, string passwordHashAlgorithm, int? passwordHashIterations, int? passwordSaltSize, bool? omitAdminPw, bool? supportAutoSave, int? passwordMaxAge, bool? initialPasswordChange, int? passwordHistorySize, bool? passwordExpiryForAdmin, int? cacheExpiration, bool? enableRFC7613UsercaseMappedProfile);

        protected abstract OrgApacheJackrabbitOakSegmentAzureAzureSegmentStoreServiceInfo OrgApacheJackrabbitOakSegmentAzureAzureSegmentStoreService(bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, string accountName, string containerName, string accessKey, string rootPath, string connectionURL);

        protected abstract OrgApacheJackrabbitOakSegmentSegmentNodeStoreFactoryInfo OrgApacheJackrabbitOakSegmentSegmentNodeStoreFactory(bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, string repositoryHome, string tarmkMode, int? tarmkSize, int? segmentCacheSize, int? stringCacheSize, int? templateCacheSize, int? stringDeduplicationCacheSize, int? templateDeduplicationCacheSize, int? nodeDeduplicationCacheSize, bool? pauseCompaction, int? compactionRetryCount, int? compactionForceTimeout, int? compactionSizeDeltaEstimation, bool? compactionDisableEstimation, int? compactionRetainedGenerations, int? compactionMemoryThreshold, int? compactionProgressLog, bool? standby, bool? customBlobStore, bool? customSegmentStore, bool? splitPersistence, string repositoryBackupDir, int? blobGcMaxAgeInSecs, int? blobTrackSnapshotIntervalInSecs, string role, bool? registerDescriptors, bool? dispatchChanges);

        protected abstract OrgApacheJackrabbitOakSegmentSegmentNodeStoreMonitorServiceInfo OrgApacheJackrabbitOakSegmentSegmentNodeStoreMonitorService(bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, List<string> commitsTrackerWriterGroups);

        protected abstract OrgApacheJackrabbitOakSegmentSegmentNodeStoreServiceInfo OrgApacheJackrabbitOakSegmentSegmentNodeStoreService(bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, string repositoryHome, string tarmkMode, int? tarmkSize, int? segmentCacheSize, int? stringCacheSize, int? templateCacheSize, int? stringDeduplicationCacheSize, int? templateDeduplicationCacheSize, int? nodeDeduplicationCacheSize, bool? pauseCompaction, int? compactionRetryCount, int? compactionForceTimeout, int? compactionSizeDeltaEstimation, bool? compactionDisableEstimation, int? compactionRetainedGenerations, int? compactionMemoryThreshold, int? compactionProgressLog, bool? standby, bool? customBlobStore, bool? customSegmentStore, bool? splitPersistence, string repositoryBackupDir, int? blobGcMaxAgeInSecs, int? blobTrackSnapshotIntervalInSecs);

        protected abstract OrgApacheJackrabbitOakSegmentStandbyStoreStandbyStoreServiceInfo OrgApacheJackrabbitOakSegmentStandbyStoreStandbyStoreService(bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, bool? orgApacheSlingInstallerConfigurationPersist, string mode, int? port, string primaryHost, int? interval, List<string> primaryAllowedClientIpRanges, bool? secure, int? standbyReadtimeout, bool? standbyAutoclean);

        protected abstract OrgApacheJackrabbitOakSpiSecurityAuthenticationExternalImplDeInfo OrgApacheJackrabbitOakSpiSecurityAuthenticationExternalImplDe(bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, string handlerName, string userExpirationTime, List<string> userAutoMembership, List<string> userPropertyMapping, string userPathPrefix, string userMembershipExpTime, int? userMembershipNestingDepth, bool? userDynamicMembership, bool? userDisableMissing, string groupExpirationTime, List<string> groupAutoMembership, List<string> groupPropertyMapping, string groupPathPrefix, bool? enableRFC7613UsercaseMappedProfile);

        protected abstract OrgApacheJackrabbitOakSpiSecurityAuthenticationExternalImplExInfo OrgApacheJackrabbitOakSpiSecurityAuthenticationExternalImplEx(bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, int? jaasRanking, string jaasControlFlag, string jaasRealmName, string idpName, string syncHandlerName);

        protected abstract OrgApacheJackrabbitOakSpiSecurityAuthenticationExternalImplPrInfo OrgApacheJackrabbitOakSpiSecurityAuthenticationExternalImplPr(bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, bool? protectExternalId);

        protected abstract OrgApacheJackrabbitOakSpiSecurityAuthorizationCugImplCugConfiInfo OrgApacheJackrabbitOakSpiSecurityAuthorizationCugImplCugConfi(bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, List<string> cugSupportedPaths, bool? cugEnabled, int? configurationRanking);

        protected abstract OrgApacheJackrabbitOakSpiSecurityAuthorizationCugImplCugExcluInfo OrgApacheJackrabbitOakSpiSecurityAuthorizationCugImplCugExclu(bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, List<string> principalNames);

        protected abstract OrgApacheJackrabbitOakSpiSecurityUserActionDefaultAuthorizableInfo OrgApacheJackrabbitOakSpiSecurityUserActionDefaultAuthorizable(bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, string enabledActions, List<string> userPrivilegeNames, List<string> groupPrivilegeNames, string constraint);

        protected abstract OrgApacheJackrabbitVaultPackagingImplPackagingImplInfo OrgApacheJackrabbitVaultPackagingImplPackagingImpl(bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, List<string> packageRoots);

        protected abstract OrgApacheJackrabbitVaultPackagingRegistryImplFSPackageRegistryInfo OrgApacheJackrabbitVaultPackagingRegistryImplFSPackageRegistry(bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, string homePath);

        protected abstract OrgApacheSlingAuthCoreImplLogoutServletInfo OrgApacheSlingAuthCoreImplLogoutServlet(bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, List<string> slingServletMethods, string slingServletPaths);

        protected abstract OrgApacheSlingCaconfigImplConfigurationBindingsValueProviderInfo OrgApacheSlingCaconfigImplConfigurationBindingsValueProvider(bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, bool? enabled);

        protected abstract OrgApacheSlingCaconfigImplConfigurationResolverImplInfo OrgApacheSlingCaconfigImplConfigurationResolverImpl(bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, List<string> configBucketNames);

        protected abstract OrgApacheSlingCaconfigImplDefDefaultConfigurationInheritanceStraInfo OrgApacheSlingCaconfigImplDefDefaultConfigurationInheritanceStra(bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, bool? enabled, List<string> configPropertyInheritancePropertyNames);

        protected abstract OrgApacheSlingCaconfigImplDefDefaultConfigurationPersistenceStraInfo OrgApacheSlingCaconfigImplDefDefaultConfigurationPersistenceStra(bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, bool? enabled);

        protected abstract OrgApacheSlingCaconfigImplOverrideOsgiConfigurationOverrideProviInfo OrgApacheSlingCaconfigImplOverrideOsgiConfigurationOverrideProvi(bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, string description, List<string> overrides, bool? enabled, int? serviceRanking);

        protected abstract OrgApacheSlingCaconfigImplOverrideSystemPropertyConfigurationOveInfo OrgApacheSlingCaconfigImplOverrideSystemPropertyConfigurationOve(bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, bool? enabled, int? serviceRanking);

        protected abstract OrgApacheSlingCaconfigManagementImplConfigurationManagementSettiInfo OrgApacheSlingCaconfigManagementImplConfigurationManagementSetti(bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, List<string> ignorePropertyNameRegex, List<string> configCollectionPropertiesResourceNames);

        protected abstract OrgApacheSlingCaconfigResourceImplDefDefaultConfigurationResourInfo OrgApacheSlingCaconfigResourceImplDefDefaultConfigurationResour(bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, bool? enabled, string configPath, List<string> fallbackPaths, List<string> configCollectionInheritancePropertyNames);

        protected abstract OrgApacheSlingCaconfigResourceImplDefDefaultContextPathStrategyInfo OrgApacheSlingCaconfigResourceImplDefDefaultContextPathStrategy(bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, bool? enabled, List<string> configRefResourceNames, List<string> configRefPropertyNames, int? serviceRanking);

        protected abstract OrgApacheSlingCommonsHtmlInternalTagsoupHtmlParserInfo OrgApacheSlingCommonsHtmlInternalTagsoupHtmlParser(bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, List<string> parserFeatures);

        protected abstract OrgApacheSlingCommonsLogLogManagerInfo OrgApacheSlingCommonsLogLogManager(bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, string orgApacheSlingCommonsLogLevel, string orgApacheSlingCommonsLogFile, int? orgApacheSlingCommonsLogFileNumber, string orgApacheSlingCommonsLogFileSize, string orgApacheSlingCommonsLogPattern, string orgApacheSlingCommonsLogConfigurationFile, bool? orgApacheSlingCommonsLogPackagingDataEnabled, int? orgApacheSlingCommonsLogMaxCallerDataDepth, int? orgApacheSlingCommonsLogMaxOldFileCountInDump, int? orgApacheSlingCommonsLogNumOfLines);

        protected abstract OrgApacheSlingCommonsLogLogManagerFactoryConfigInfo OrgApacheSlingCommonsLogLogManagerFactoryConfig(bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, string orgApacheSlingCommonsLogLevel, string orgApacheSlingCommonsLogFile, string orgApacheSlingCommonsLogPattern, List<string> orgApacheSlingCommonsLogNames, bool? orgApacheSlingCommonsLogAdditiv);

        protected abstract OrgApacheSlingCommonsLogLogManagerFactoryWriterInfo OrgApacheSlingCommonsLogLogManagerFactoryWriter(bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, string orgApacheSlingCommonsLogFile, int? orgApacheSlingCommonsLogFileNumber, string orgApacheSlingCommonsLogFileSize, bool? orgApacheSlingCommonsLogFileBuffered);

        protected abstract OrgApacheSlingCommonsMetricsInternalLogReporterInfo OrgApacheSlingCommonsMetricsInternalLogReporter(bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, int? period, string timeUnit, string level, string loggerName, string prefix, string pattern, string registryName);

        protected abstract OrgApacheSlingCommonsMetricsRrd4jImplCodahaleMetricsReporterInfo OrgApacheSlingCommonsMetricsRrd4jImplCodahaleMetricsReporter(bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, List<string> datasources, int? step, List<string> archives, string path);

        protected abstract OrgApacheSlingCommonsMimeInternalMimeTypeServiceImplInfo OrgApacheSlingCommonsMimeInternalMimeTypeServiceImpl(bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, List<string> mimeTypes);

        protected abstract OrgApacheSlingCommonsSchedulerImplQuartzSchedulerInfo OrgApacheSlingCommonsSchedulerImplQuartzScheduler(bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, string poolName, List<string> allowedPoolNames, bool? schedulerUseleaderforsingle, List<string> metricsFilters, int? slowThresholdMillis);

        protected abstract OrgApacheSlingCommonsSchedulerImplSchedulerHealthCheckInfo OrgApacheSlingCommonsSchedulerImplSchedulerHealthCheck(bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, int? maxQuartzJobDurationAcceptable);

        protected abstract OrgApacheSlingCommonsThreadsImplDefaultThreadPoolFactoryInfo OrgApacheSlingCommonsThreadsImplDefaultThreadPoolFactory(bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, string name, int? minPoolSize, int? maxPoolSize, int? queueSize, int? maxThreadAge, int? keepAliveTime, string blockPolicy, bool? shutdownGraceful, bool? daemon, int? shutdownWaitTime, string priority);

        protected abstract OrgApacheSlingDatasourceDataSourceFactoryInfo OrgApacheSlingDatasourceDataSourceFactory(bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, string datasourceName, string datasourceSvcPropName, string driverClassName, string url, string username, string password, string defaultAutoCommit, string defaultReadOnly, string defaultTransactionIsolation, string defaultCatalog, int? maxActive, int? maxIdle, int? minIdle, int? initialSize, int? maxWait, int? maxAge, bool? testOnBorrow, bool? testOnReturn, bool? testWhileIdle, string validationQuery, int? validationQueryTimeout, int? timeBetweenEvictionRunsMillis, int? minEvictableIdleTimeMillis, string connectionProperties, string initSQL, string jdbcInterceptors, int? validationInterval, bool? logValidationErrors, List<string> datasourceSvcProperties);

        protected abstract OrgApacheSlingDatasourceJNDIDataSourceFactoryInfo OrgApacheSlingDatasourceJNDIDataSourceFactory(bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, string datasourceName, string datasourceSvcPropName, string datasourceJndiName, List<string> jndiProperties);

        protected abstract OrgApacheSlingDiscoveryOakConfigInfo OrgApacheSlingDiscoveryOakConfig(bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, int? connectorPingTimeout, int? connectorPingInterval, int? discoveryLiteCheckInterval, int? clusterSyncServiceTimeout, int? clusterSyncServiceInterval, bool? enableSyncToken, int? minEventDelay, int? socketConnectTimeout, int? soTimeout, List<string> topologyConnectorUrls, List<string> topologyConnectorWhitelist, bool? autoStopLocalLoopEnabled, bool? gzipConnectorRequestsEnabled, bool? hmacEnabled, bool? enableEncryption, string sharedKey, int? hmacSharedKeyTTL, string backoffStandbyFactor, string backoffStableFactor);

        protected abstract OrgApacheSlingDiscoveryOakSynchronizedClocksHealthCheckInfo OrgApacheSlingDiscoveryOakSynchronizedClocksHealthCheck(bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, string hcName, List<string> hcTags, string hcMbeanName);

        protected abstract OrgApacheSlingDistributionAgentImplForwardDistributionAgentFactoInfo OrgApacheSlingDistributionAgentImplForwardDistributionAgentFacto(bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, string name, string title, string details, bool? enabled, string serviceName, string logLevel, List<string> allowedRoots, bool? queueProcessingEnabled, List<string> packageImporterEndpoints, List<string> passiveQueues, List<string> priorityQueues, string retryStrategy, int? retryAttempts, string requestAuthorizationStrategyTarget, string transportSecretProviderTarget, string packageBuilderTarget, string triggersTarget, string queueProvider, bool? asyncDelivery, int? httpConnTimeout);

        protected abstract OrgApacheSlingDistributionAgentImplPrivilegeDistributionRequestAInfo OrgApacheSlingDistributionAgentImplPrivilegeDistributionRequestA(bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, string name, string jcrPrivilege);

        protected abstract OrgApacheSlingDistributionAgentImplQueueDistributionAgentFactoryInfo OrgApacheSlingDistributionAgentImplQueueDistributionAgentFactory(bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, string name, string title, string details, bool? enabled, string serviceName, string logLevel, List<string> allowedRoots, string requestAuthorizationStrategyTarget, string queueProviderFactoryTarget, string packageBuilderTarget, string triggersTarget, List<string> priorityQueues);

        protected abstract OrgApacheSlingDistributionAgentImplReverseDistributionAgentFactoInfo OrgApacheSlingDistributionAgentImplReverseDistributionAgentFacto(bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, string name, string title, string details, bool? enabled, string serviceName, string logLevel, bool? queueProcessingEnabled, List<string> packageExporterEndpoints, int? pullItems, int? httpConnTimeout, string requestAuthorizationStrategyTarget, string transportSecretProviderTarget, string packageBuilderTarget, string triggersTarget);

        protected abstract OrgApacheSlingDistributionAgentImplSimpleDistributionAgentFactorInfo OrgApacheSlingDistributionAgentImplSimpleDistributionAgentFactor(bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, string name, string title, string details, bool? enabled, string serviceName, string logLevel, bool? queueProcessingEnabled, string packageExporterTarget, string packageImporterTarget, string requestAuthorizationStrategyTarget, string triggersTarget);

        protected abstract OrgApacheSlingDistributionAgentImplSyncDistributionAgentFactoryInfo OrgApacheSlingDistributionAgentImplSyncDistributionAgentFactory(bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, string name, string title, string details, bool? enabled, string serviceName, string logLevel, bool? queueProcessingEnabled, List<string> passiveQueues, List<string> packageExporterEndpoints, List<string> packageImporterEndpoints, string retryStrategy, int? retryAttempts, int? pullItems, int? httpConnTimeout, string requestAuthorizationStrategyTarget, string transportSecretProviderTarget, string packageBuilderTarget, string triggersTarget);

        protected abstract OrgApacheSlingDistributionMonitorDistributionQueueHealthCheckInfo OrgApacheSlingDistributionMonitorDistributionQueueHealthCheck(bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, string hcName, List<string> hcTags, string hcMbeanName, int? numberOfRetriesAllowed);

        protected abstract OrgApacheSlingDistributionPackagingImplExporterAgentDistributioInfo OrgApacheSlingDistributionPackagingImplExporterAgentDistributio(bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, string name, string queue, bool? dropInvalidItems, string agentTarget);

        protected abstract OrgApacheSlingDistributionPackagingImplExporterLocalDistributioInfo OrgApacheSlingDistributionPackagingImplExporterLocalDistributio(bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, string name, string packageBuilderTarget);

        protected abstract OrgApacheSlingDistributionPackagingImplExporterRemoteDistributiInfo OrgApacheSlingDistributionPackagingImplExporterRemoteDistributi(bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, string name, List<string> endpoints, int? pullItems, string packageBuilderTarget, string transportSecretProviderTarget);

        protected abstract OrgApacheSlingDistributionPackagingImplImporterLocalDistributioInfo OrgApacheSlingDistributionPackagingImplImporterLocalDistributio(bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, string name, string packageBuilderTarget);

        protected abstract OrgApacheSlingDistributionPackagingImplImporterRemoteDistributiInfo OrgApacheSlingDistributionPackagingImplImporterRemoteDistributi(bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, string name, List<string> endpoints, string transportSecretProviderTarget);

        protected abstract OrgApacheSlingDistributionPackagingImplImporterRepositoryDistriInfo OrgApacheSlingDistributionPackagingImplImporterRepositoryDistri(bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, string name, string serviceName, string path, string privilegeName);

        protected abstract OrgApacheSlingDistributionResourcesImplDistributionConfigurationInfo OrgApacheSlingDistributionResourcesImplDistributionConfiguration(bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, string providerRoots, string kind);

        protected abstract OrgApacheSlingDistributionResourcesImplDistributionServiceResourInfo OrgApacheSlingDistributionResourcesImplDistributionServiceResour(bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, string providerRoots, string kind);

        protected abstract OrgApacheSlingDistributionSerializationImplDistributionPackageBuInfo OrgApacheSlingDistributionSerializationImplDistributionPackageBu(bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, string name, string type, string formatTarget, string tempFsFolder, int? fileThreshold, string memoryUnit, bool? useOffHeapMemory, string digestAlgorithm, int? monitoringQueueSize, int? cleanupDelay, List<string> packageFilters, List<string> propertyFilters);

        protected abstract OrgApacheSlingDistributionSerializationImplVltVaultDistributionInfo OrgApacheSlingDistributionSerializationImplVltVaultDistribution(bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, string name, string type, string importMode, string aclHandling, string packageRoots, List<string> packageFilters, List<string> propertyFilters, string tempFsFolder, bool? useBinaryReferences, int? autoSaveThreshold, int? cleanupDelay, int? fileThreshold, string MEGA_BYTES, bool? useOffHeapMemory, string digestAlgorithm, int? monitoringQueueSize, List<string> pathsMapping, bool? strictImport);

        protected abstract OrgApacheSlingDistributionTransportImplUserCredentialsDistributiInfo OrgApacheSlingDistributionTransportImplUserCredentialsDistributi(bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, string name, string username, string password);

        protected abstract OrgApacheSlingDistributionTriggerImplDistributionEventDistributeInfo OrgApacheSlingDistributionTriggerImplDistributionEventDistribute(bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, string name, string path);

        protected abstract OrgApacheSlingDistributionTriggerImplJcrEventDistributionTriggerInfo OrgApacheSlingDistributionTriggerImplJcrEventDistributionTrigger(bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, string name, string path, List<string> ignoredPathsPatterns, string serviceName, bool? deep);

        protected abstract OrgApacheSlingDistributionTriggerImplPersistedJcrEventDistributiInfo OrgApacheSlingDistributionTriggerImplPersistedJcrEventDistributi(bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, string name, string path, string serviceName, string nuggetsPath);

        protected abstract OrgApacheSlingDistributionTriggerImplRemoteEventDistributionTrigInfo OrgApacheSlingDistributionTriggerImplRemoteEventDistributionTrig(bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, string name, string endpoint, string transportSecretProviderTarget);

        protected abstract OrgApacheSlingDistributionTriggerImplResourceEventDistributionTrInfo OrgApacheSlingDistributionTriggerImplResourceEventDistributionTr(bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, string name, string path);

        protected abstract OrgApacheSlingDistributionTriggerImplScheduledDistributionTriggeInfo OrgApacheSlingDistributionTriggerImplScheduledDistributionTrigge(bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, string name, string path, string seconds, string serviceName);

        protected abstract OrgApacheSlingEngineImplAuthSlingAuthenticatorInfo OrgApacheSlingEngineImplAuthSlingAuthenticator(bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, string osgiHttpWhiteboardContextSelect, string osgiHttpWhiteboardListener, string authSudoCookie, string authSudoParameter, bool? authAnnonymous, List<string> slingAuthRequirements, string slingAuthAnonymousUser, string slingAuthAnonymousPassword, string authHttp, string authHttpRealm, List<string> authUriSuffix);

        protected abstract OrgApacheSlingEngineImplDebugRequestProgressTrackerLogFilterInfo OrgApacheSlingEngineImplDebugRequestProgressTrackerLogFilter(bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, List<string> extensions, int? minDurationMs, int? maxDurationMs, bool? compactLogFormat);

        protected abstract OrgApacheSlingEngineImplLogRequestLoggerInfo OrgApacheSlingEngineImplLogRequestLogger(bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, string requestLogOutput, int? requestLogOutputtype, bool? requestLogEnabled, string accessLogOutput, int? accessLogOutputtype, bool? accessLogEnabled);

        protected abstract OrgApacheSlingEngineImplLogRequestLoggerServiceInfo OrgApacheSlingEngineImplLogRequestLoggerService(bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, string requestLogServiceFormat, string requestLogServiceOutput, int? requestLogServiceOutputtype, bool? requestLogServiceOnentry);

        protected abstract OrgApacheSlingEngineImplSlingMainServletInfo OrgApacheSlingEngineImplSlingMainServlet(bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, int? slingMaxCalls, int? slingMaxInclusions, bool? slingTraceAllow, int? slingMaxRecordRequests, List<string> slingStorePatternRequests, string slingServerinfo, List<string> slingAdditionalResponseHeaders);

        protected abstract OrgApacheSlingEngineParametersInfo OrgApacheSlingEngineParameters(bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, string slingDefaultParameterEncoding, int? slingDefaultMaxParameters, string fileLocation, int? fileThreshold, int? fileMax, int? requestMax, bool? slingDefaultParameterCheckForAdditionalContainerParameters);

        protected abstract OrgApacheSlingEventImplEventingThreadPoolInfo OrgApacheSlingEventImplEventingThreadPool(bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, int? minPoolSize);

        protected abstract OrgApacheSlingEventImplJobsDefaultJobManagerInfo OrgApacheSlingEventImplJobsDefaultJobManager(bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, string queuePriority, int? queueRetries, int? queueRetrydelay, int? queueMaxparallel);

        protected abstract OrgApacheSlingEventImplJobsJcrPersistenceHandlerInfo OrgApacheSlingEventImplJobsJcrPersistenceHandler(bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, bool? jobConsumermanagerDisableDistribution, int? startupDelay, int? cleanupPeriod);

        protected abstract OrgApacheSlingEventImplJobsJobConsumerManagerInfo OrgApacheSlingEventImplJobsJobConsumerManager(bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, bool? orgApacheSlingInstallerConfigurationPersist, List<string> jobConsumermanagerWhitelist, List<string> jobConsumermanagerBlacklist);

        protected abstract OrgApacheSlingEventJobsQueueConfigurationInfo OrgApacheSlingEventJobsQueueConfiguration(bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, string queueName, List<string> queueTopics, string queueType, string queuePriority, int? queueRetries, int? queueRetrydelay, decimal? queueMaxparallel, bool? queueKeepJobs, bool? queuePreferRunOnCreationInstance, int? queueThreadPoolSize, int? serviceRanking);

        protected abstract OrgApacheSlingExtensionsWebconsolesecurityproviderInternalSlingWInfo OrgApacheSlingExtensionsWebconsolesecurityproviderInternalSlingW(bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, List<string> users, List<string> groups);

        protected abstract OrgApacheSlingFeatureflagsFeatureInfo OrgApacheSlingFeatureflagsFeature(bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, string name, string description, bool? enabled);

        protected abstract OrgApacheSlingFeatureflagsImplConfiguredFeatureInfo OrgApacheSlingFeatureflagsImplConfiguredFeature(bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, string name, string description, bool? enabled);

        protected abstract OrgApacheSlingHapiImplHApiUtilImplInfo OrgApacheSlingHapiImplHApiUtilImpl(bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, string orgApacheSlingHapiToolsResourcetype, string orgApacheSlingHapiToolsCollectionresourcetype, List<string> orgApacheSlingHapiToolsSearchpaths, string orgApacheSlingHapiToolsExternalurl, bool? orgApacheSlingHapiToolsEnabled);

        protected abstract OrgApacheSlingHcCoreImplCompositeHealthCheckInfo OrgApacheSlingHcCoreImplCompositeHealthCheck(bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, string hcName, List<string> hcTags, string hcMbeanName, List<string> filterTags, bool? filterCombineTagsWithOr);

        protected abstract OrgApacheSlingHcCoreImplExecutorHealthCheckExecutorImplInfo OrgApacheSlingHcCoreImplExecutorHealthCheckExecutorImpl(bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, int? timeoutInMs, int? longRunningFutureThresholdForCriticalMs, int? resultCacheTtlInMs);

        protected abstract OrgApacheSlingHcCoreImplJmxAttributeHealthCheckInfo OrgApacheSlingHcCoreImplJmxAttributeHealthCheck(bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, string hcName, List<string> hcTags, string hcMbeanName, string mbeanName, string attributeName, string attributeValueConstraint);

        protected abstract OrgApacheSlingHcCoreImplScriptableHealthCheckInfo OrgApacheSlingHcCoreImplScriptableHealthCheck(bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, string hcName, List<string> hcTags, string hcMbeanName, string expression, string languageExtension);

        protected abstract OrgApacheSlingHcCoreImplServletHealthCheckExecutorServletInfo OrgApacheSlingHcCoreImplServletHealthCheckExecutorServlet(bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, string servletPath, bool? disabled, string corsAccessControlAllowOrigin);

        protected abstract OrgApacheSlingHcCoreImplServletResultTxtVerboseSerializerInfo OrgApacheSlingHcCoreImplServletResultTxtVerboseSerializer(bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, int? totalWidth, int? colWidthName, int? colWidthResult, int? colWidthTiming);

        protected abstract OrgApacheSlingI18nImplI18NFilterInfo OrgApacheSlingI18nImplI18NFilter(bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, int? serviceRanking, List<string> slingFilterScope);

        protected abstract OrgApacheSlingI18nImplJcrResourceBundleProviderInfo OrgApacheSlingI18nImplJcrResourceBundleProvider(bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, string localeDefault, bool? preloadBundles, int? invalidationDelay);

        protected abstract OrgApacheSlingInstallerProviderJcrImplJcrInstallerInfo OrgApacheSlingInstallerProviderJcrImplJcrInstaller(bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, List<string> handlerSchemes, string slingJcrinstallFolderNameRegexp, int? slingJcrinstallFolderMaxDepth, List<string> slingJcrinstallSearchPath, string slingJcrinstallNewConfigPath, string slingJcrinstallSignalPath, bool? slingJcrinstallEnableWriteback);

        protected abstract OrgApacheSlingJcrBaseInternalLoginAdminWhitelistInfo OrgApacheSlingJcrBaseInternalLoginAdminWhitelist(bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, bool? whitelistBypass, string whitelistBundlesRegexp);

        protected abstract OrgApacheSlingJcrBaseInternalLoginAdminWhitelistFragmentInfo OrgApacheSlingJcrBaseInternalLoginAdminWhitelistFragment(bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, string whitelistName, List<string> whitelistBundles);

        protected abstract OrgApacheSlingJcrDavexImplServletsSlingDavExServletInfo OrgApacheSlingJcrDavexImplServletsSlingDavExServlet(bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, string alias, bool? davCreateAbsoluteUri, string davProtectedhandlers);

        protected abstract OrgApacheSlingJcrJackrabbitServerJndiRegistrationSupportInfo OrgApacheSlingJcrJackrabbitServerJndiRegistrationSupport(bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, string javaNamingFactoryInitial, string javaNamingProviderUrl);

        protected abstract OrgApacheSlingJcrJackrabbitServerRmiRegistrationSupportInfo OrgApacheSlingJcrJackrabbitServerRmiRegistrationSupport(bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, int? port);

        protected abstract OrgApacheSlingJcrRepoinitImplRepositoryInitializerInfo OrgApacheSlingJcrRepoinitImplRepositoryInitializer(bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, List<string> references);

        protected abstract OrgApacheSlingJcrRepoinitRepositoryInitializerInfo OrgApacheSlingJcrRepoinitRepositoryInitializer(bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, List<string> references, List<string> scripts);

        protected abstract OrgApacheSlingJcrResourceInternalJcrResourceResolverFactoryImplInfo OrgApacheSlingJcrResourceInternalJcrResourceResolverFactoryImpl(bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, List<string> resourceResolverSearchpath, bool? resourceResolverManglenamespaces, bool? resourceResolverAllowDirect, List<string> resourceResolverRequiredProviders, List<string> resourceResolverRequiredProvidernames, List<string> resourceResolverVirtual, List<string> resourceResolverMapping, string resourceResolverMapLocation, List<string> resourceResolverMapObservation, int? resourceResolverDefaultVanityRedirectStatus, bool? resourceResolverEnableVanitypath, int? resourceResolverVanitypathMaxEntries, bool? resourceResolverVanitypathMaxEntriesStartup, int? resourceResolverVanitypathBloomfilterMaxBytes, bool? resourceResolverOptimizeAliasResolution, List<string> resourceResolverVanitypathWhitelist, List<string> resourceResolverVanitypathBlacklist, bool? resourceResolverVanityPrecedence, bool? resourceResolverProviderhandlingParanoid, bool? resourceResolverLogClosing, bool? resourceResolverLogUnclosed);

        protected abstract OrgApacheSlingJcrResourceInternalJcrSystemUserValidatorInfo OrgApacheSlingJcrResourceInternalJcrSystemUserValidator(bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, bool? allowOnlySystemUser);

        protected abstract OrgApacheSlingJcrResourcesecurityImplResourceAccessGateFactoryInfo OrgApacheSlingJcrResourcesecurityImplResourceAccessGateFactory(bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, string path, string checkpathPrefix, string jcrPath);

        protected abstract OrgApacheSlingJcrWebdavImplHandlerDefaultHandlerServiceInfo OrgApacheSlingJcrWebdavImplHandlerDefaultHandlerService(bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, int? serviceRanking, string typeCollections, string typeNoncollections, string typeContent);

        protected abstract OrgApacheSlingJcrWebdavImplHandlerDirListingExportHandlerServicInfo OrgApacheSlingJcrWebdavImplHandlerDirListingExportHandlerServic(bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, int? serviceRanking);

        protected abstract OrgApacheSlingJcrWebdavImplServletsSimpleWebDavServletInfo OrgApacheSlingJcrWebdavImplServletsSimpleWebDavServlet(bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, string davRoot, bool? davCreateAbsoluteUri, string davRealm, List<string> collectionTypes, List<string> filterPrefixes, string filterTypes, string filterUris, string typeCollections, string typeNoncollections, string typeContent);

        protected abstract OrgApacheSlingJmxProviderImplJMXResourceProviderInfo OrgApacheSlingJmxProviderImplJMXResourceProvider(bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, string providerRoots);

        protected abstract OrgApacheSlingModelsImplModelAdapterFactoryInfo OrgApacheSlingModelsImplModelAdapterFactory(bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, string osgiHttpWhiteboardListener, string osgiHttpWhiteboardContextSelect, int? maxRecursionDepth, int? cleanupJobPeriod);

        protected abstract OrgApacheSlingModelsJacksonexporterImplResourceModuleProviderInfo OrgApacheSlingModelsJacksonexporterImplResourceModuleProvider(bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, int? maxRecursionLevels);

        protected abstract OrgApacheSlingResourceInventoryImplResourceInventoryPrinterFactoInfo OrgApacheSlingResourceInventoryImplResourceInventoryPrinterFacto(bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, string felixInventoryPrinterName, string felixInventoryPrinterTitle, string path);

        protected abstract OrgApacheSlingResourcemergerImplMergedResourceProviderFactoryInfo OrgApacheSlingResourcemergerImplMergedResourceProviderFactory(bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, string mergeRoot, bool? mergeReadOnly);

        protected abstract OrgApacheSlingResourcemergerPickerOverridingInfo OrgApacheSlingResourcemergerPickerOverriding(bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, string mergeRoot, bool? mergeReadOnly);

        protected abstract OrgApacheSlingScriptingCoreImplScriptCacheImplInfo OrgApacheSlingScriptingCoreImplScriptCacheImpl(bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, int? orgApacheSlingScriptingCacheSize, List<string> orgApacheSlingScriptingCacheAdditionalExtensions);

        protected abstract OrgApacheSlingScriptingCoreImplScriptingResourceResolverProviderInfo OrgApacheSlingScriptingCoreImplScriptingResourceResolverProvider(bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, bool? logStacktraceOnclose);

        protected abstract OrgApacheSlingScriptingJavaImplJavaScriptEngineFactoryInfo OrgApacheSlingScriptingJavaImplJavaScriptEngineFactory(bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, bool? javaClassdebuginfo, string javaJavaEncoding, string javaCompilerSourceVM, string javaCompilerTargetVM);

        protected abstract OrgApacheSlingScriptingJavascriptInternalRhinoJavaScriptEngineFaInfo OrgApacheSlingScriptingJavascriptInternalRhinoJavaScriptEngineFa(bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, int? orgApacheSlingScriptingJavascriptRhinoOptLevel);

        protected abstract OrgApacheSlingScriptingJspJspScriptEngineFactoryInfo OrgApacheSlingScriptingJspJspScriptEngineFactory(bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, string jasperCompilerTargetVM, string jasperCompilerSourceVM, bool? jasperClassdebuginfo, bool? jasperEnablePooling, string jasperIeClassId, bool? jasperGenStringAsCharArray, bool? jasperKeepgenerated, bool? jasperMappedfile, bool? jasperTrimSpaces, bool? jasperDisplaySourceFragments, bool? defaultIsSession);

        protected abstract OrgApacheSlingScriptingSightlyJsImplJsapiSlyBindingsValuesProvInfo OrgApacheSlingScriptingSightlyJsImplJsapiSlyBindingsValuesProv(bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, List<string> orgApacheSlingScriptingSightlyJsBindings);

        protected abstract OrgApacheSlingSecurityImplContentDispositionFilterInfo OrgApacheSlingSecurityImplContentDispositionFilter(bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, List<string> slingContentDispositionPaths, List<string> slingContentDispositionExcludedPaths, bool? slingContentDispositionAllPaths);

        protected abstract OrgApacheSlingSecurityImplReferrerFilterInfo OrgApacheSlingSecurityImplReferrerFilter(bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, bool? allowEmpty, List<string> allowHosts, List<string> allowHostsRegexp, List<string> filterMethods, List<string> excludeAgentsRegexp);

        protected abstract OrgApacheSlingServiceusermappingImplServiceUserMapperImplInfo OrgApacheSlingServiceusermappingImplServiceUserMapperImpl(bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, List<string> userMapping, string userDefault, bool? userEnableDefaultMapping, bool? requireValidation);

        protected abstract OrgApacheSlingServiceusermappingImplServiceUserMapperImplAmendedInfo OrgApacheSlingServiceusermappingImplServiceUserMapperImplAmended(bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, int? serviceRanking, List<string> userMapping);

        protected abstract OrgApacheSlingServletsGetDefaultGetServletInfo OrgApacheSlingServletsGetDefaultGetServlet(bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, List<string> aliases, bool? index, List<string> indexFiles, bool? enableHtml, bool? enableJson, bool? enableTxt, bool? enableXml, int? jsonMaximumresults, bool? ecmaSuport);

        protected abstract OrgApacheSlingServletsGetImplVersionVersionInfoServletInfo OrgApacheSlingServletsGetImplVersionVersionInfoServlet(bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, List<string> slingServletSelectors, bool? ecmaSuport);

        protected abstract OrgApacheSlingServletsPostImplHelperChunkCleanUpTaskInfo OrgApacheSlingServletsPostImplHelperChunkCleanUpTask(bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, string schedulerExpression, bool? schedulerConcurrent, int? chunkCleanupAge);

        protected abstract OrgApacheSlingServletsPostImplSlingPostServletInfo OrgApacheSlingServletsPostImplSlingPostServlet(bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, List<string> servletPostDateFormats, List<string> servletPostNodeNameHints, int? servletPostNodeNameMaxLength, bool? servletPostCheckinNewVersionableNodes, bool? servletPostAutoCheckout, bool? servletPostAutoCheckin, string servletPostIgnorePattern);

        protected abstract OrgApacheSlingServletsResolverSlingServletResolverInfo OrgApacheSlingServletsResolverSlingServletResolver(bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, string servletresolverServletRoot, int? servletresolverCacheSize, List<string> servletresolverPaths, List<string> servletresolverDefaultExtensions);

        protected abstract OrgApacheSlingSettingsImplSlingSettingsServiceImplInfo OrgApacheSlingSettingsImplSlingSettingsServiceImpl(bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, string slingName, string slingDescription);

        protected abstract OrgApacheSlingStartupfilterImplStartupFilterImplInfo OrgApacheSlingStartupfilterImplStartupFilterImpl(bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, bool? activeByDefault, string defaultMessage);

        protected abstract OrgApacheSlingTenantInternalTenantProviderImplInfo OrgApacheSlingTenantInternalTenantProviderImpl(bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, string tenantRoot, List<string> tenantPathMatcher);

        protected abstract OrgApacheSlingTracerInternalLogTracerInfo OrgApacheSlingTracerInternalLogTracer(bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, List<string> tracerSets, bool? enabled, bool? servletEnabled, int? recordingCacheSizeInMB, int? recordingCacheDurationInSecs, bool? recordingCompressionEnabled, bool? gzipResponse);

        protected abstract OrgApacheSlingXssImplXSSFilterImplInfo OrgApacheSlingXssImplXSSFilterImpl(bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, string policyPath);
    }

}
