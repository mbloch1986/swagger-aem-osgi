/**
 * Adobe Experience Manager OSGI config (AEM) API
 * Swagger AEM OSGI is an OpenAPI specification for Adobe Experience Manager (AEM) OSGI Configurations API
 *
 * OpenAPI spec version: 1.0.0-pre.0
 * Contact: opensource@shinesolutions.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


#include "OAIComAdobeCqSocialUgcbaseDispatcherImplFlushServiceImplProperties.h"

#include "OAIHelpers.h"

#include <QJsonDocument>
#include <QJsonArray>
#include <QObject>
#include <QDebug>

namespace OpenAPI {

OAIComAdobeCqSocialUgcbaseDispatcherImplFlushServiceImplProperties::OAIComAdobeCqSocialUgcbaseDispatcherImplFlushServiceImplProperties(QString json) {
    this->fromJson(json);
}

OAIComAdobeCqSocialUgcbaseDispatcherImplFlushServiceImplProperties::OAIComAdobeCqSocialUgcbaseDispatcherImplFlushServiceImplProperties() {
    this->init();
}

OAIComAdobeCqSocialUgcbaseDispatcherImplFlushServiceImplProperties::~OAIComAdobeCqSocialUgcbaseDispatcherImplFlushServiceImplProperties() {
    
}

void
OAIComAdobeCqSocialUgcbaseDispatcherImplFlushServiceImplProperties::init() {
    m_thread_pool_size_isSet = false;
    m_delay_time_isSet = false;
    m_worker_sleep_time_isSet = false;
}

void
OAIComAdobeCqSocialUgcbaseDispatcherImplFlushServiceImplProperties::fromJson(QString jsonString) {
    QByteArray array (jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void
OAIComAdobeCqSocialUgcbaseDispatcherImplFlushServiceImplProperties::fromJsonObject(QJsonObject json) {
    ::OpenAPI::fromJsonValue(thread_pool_size, json[QString("threadPoolSize")]);
    
    ::OpenAPI::fromJsonValue(delay_time, json[QString("delayTime")]);
    
    ::OpenAPI::fromJsonValue(worker_sleep_time, json[QString("workerSleepTime")]);
    
}

QString
OAIComAdobeCqSocialUgcbaseDispatcherImplFlushServiceImplProperties::asJson () const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject
OAIComAdobeCqSocialUgcbaseDispatcherImplFlushServiceImplProperties::asJsonObject() const {
    QJsonObject obj;
	if(thread_pool_size.isSet()){
        obj.insert(QString("threadPoolSize"), ::OpenAPI::toJsonValue(thread_pool_size));
    }
	if(delay_time.isSet()){
        obj.insert(QString("delayTime"), ::OpenAPI::toJsonValue(delay_time));
    }
	if(worker_sleep_time.isSet()){
        obj.insert(QString("workerSleepTime"), ::OpenAPI::toJsonValue(worker_sleep_time));
    }
    return obj;
}

OAIConfigNodePropertyInteger
OAIComAdobeCqSocialUgcbaseDispatcherImplFlushServiceImplProperties::getThreadPoolSize() const {
    return thread_pool_size;
}
void
OAIComAdobeCqSocialUgcbaseDispatcherImplFlushServiceImplProperties::setThreadPoolSize(const OAIConfigNodePropertyInteger &thread_pool_size) {
    this->thread_pool_size = thread_pool_size;
    this->m_thread_pool_size_isSet = true;
}

OAIConfigNodePropertyInteger
OAIComAdobeCqSocialUgcbaseDispatcherImplFlushServiceImplProperties::getDelayTime() const {
    return delay_time;
}
void
OAIComAdobeCqSocialUgcbaseDispatcherImplFlushServiceImplProperties::setDelayTime(const OAIConfigNodePropertyInteger &delay_time) {
    this->delay_time = delay_time;
    this->m_delay_time_isSet = true;
}

OAIConfigNodePropertyInteger
OAIComAdobeCqSocialUgcbaseDispatcherImplFlushServiceImplProperties::getWorkerSleepTime() const {
    return worker_sleep_time;
}
void
OAIComAdobeCqSocialUgcbaseDispatcherImplFlushServiceImplProperties::setWorkerSleepTime(const OAIConfigNodePropertyInteger &worker_sleep_time) {
    this->worker_sleep_time = worker_sleep_time;
    this->m_worker_sleep_time_isSet = true;
}


bool
OAIComAdobeCqSocialUgcbaseDispatcherImplFlushServiceImplProperties::isSet() const {
    bool isObjectUpdated = false;
    do{ 
        if(thread_pool_size.isSet()){ isObjectUpdated = true; break;}
    
        if(delay_time.isSet()){ isObjectUpdated = true; break;}
    
        if(worker_sleep_time.isSet()){ isObjectUpdated = true; break;}
    }while(false);
    return isObjectUpdated;
}

}

