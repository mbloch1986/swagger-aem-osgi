/**
 * Adobe Experience Manager OSGI config (AEM) API
 * Swagger AEM OSGI is an OpenAPI specification for Adobe Experience Manager (AEM) OSGI Configurations API
 *
 * OpenAPI spec version: 1.0.0-pre.0
 * Contact: opensource@shinesolutions.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 *
 * OpenAPI Generator version: 3.2.1-SNAPSHOT
 *
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD. Register as an anonymous module.
    define(['ApiClient', 'model/ConfigNodePropertyBoolean', 'model/ConfigNodePropertyString'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    module.exports = factory(require('../ApiClient'), require('./ConfigNodePropertyBoolean'), require('./ConfigNodePropertyString'));
  } else {
    // Browser globals (root is window)
    if (!root.NodeSwaggerAemOsgi) {
      root.NodeSwaggerAemOsgi = {};
    }
    root.NodeSwaggerAemOsgi.OrgApacheSlingScriptingJspJspScriptEngineFactoryProperties = factory(root.NodeSwaggerAemOsgi.ApiClient, root.NodeSwaggerAemOsgi.ConfigNodePropertyBoolean, root.NodeSwaggerAemOsgi.ConfigNodePropertyString);
  }
}(this, function(ApiClient, ConfigNodePropertyBoolean, ConfigNodePropertyString) {
  'use strict';




  /**
   * The OrgApacheSlingScriptingJspJspScriptEngineFactoryProperties model module.
   * @module model/OrgApacheSlingScriptingJspJspScriptEngineFactoryProperties
   * @version 1.0.0
   */

  /**
   * Constructs a new <code>OrgApacheSlingScriptingJspJspScriptEngineFactoryProperties</code>.
   * @alias module:model/OrgApacheSlingScriptingJspJspScriptEngineFactoryProperties
   * @class
   */
  var exports = function() {
    var _this = this;












  };

  /**
   * Constructs a <code>OrgApacheSlingScriptingJspJspScriptEngineFactoryProperties</code> from a plain JavaScript object, optionally creating a new instance.
   * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
   * @param {Object} data The plain JavaScript object bearing properties of interest.
   * @param {module:model/OrgApacheSlingScriptingJspJspScriptEngineFactoryProperties} obj Optional instance to populate.
   * @return {module:model/OrgApacheSlingScriptingJspJspScriptEngineFactoryProperties} The populated <code>OrgApacheSlingScriptingJspJspScriptEngineFactoryProperties</code> instance.
   */
  exports.constructFromObject = function(data, obj) {
    if (data) {
      obj = obj || new exports();

      if (data.hasOwnProperty('jasper.compilerTargetVM')) {
        obj['jasper.compilerTargetVM'] = ConfigNodePropertyString.constructFromObject(data['jasper.compilerTargetVM']);
      }
      if (data.hasOwnProperty('jasper.compilerSourceVM')) {
        obj['jasper.compilerSourceVM'] = ConfigNodePropertyString.constructFromObject(data['jasper.compilerSourceVM']);
      }
      if (data.hasOwnProperty('jasper.classdebuginfo')) {
        obj['jasper.classdebuginfo'] = ConfigNodePropertyBoolean.constructFromObject(data['jasper.classdebuginfo']);
      }
      if (data.hasOwnProperty('jasper.enablePooling')) {
        obj['jasper.enablePooling'] = ConfigNodePropertyBoolean.constructFromObject(data['jasper.enablePooling']);
      }
      if (data.hasOwnProperty('jasper.ieClassId')) {
        obj['jasper.ieClassId'] = ConfigNodePropertyString.constructFromObject(data['jasper.ieClassId']);
      }
      if (data.hasOwnProperty('jasper.genStringAsCharArray')) {
        obj['jasper.genStringAsCharArray'] = ConfigNodePropertyBoolean.constructFromObject(data['jasper.genStringAsCharArray']);
      }
      if (data.hasOwnProperty('jasper.keepgenerated')) {
        obj['jasper.keepgenerated'] = ConfigNodePropertyBoolean.constructFromObject(data['jasper.keepgenerated']);
      }
      if (data.hasOwnProperty('jasper.mappedfile')) {
        obj['jasper.mappedfile'] = ConfigNodePropertyBoolean.constructFromObject(data['jasper.mappedfile']);
      }
      if (data.hasOwnProperty('jasper.trimSpaces')) {
        obj['jasper.trimSpaces'] = ConfigNodePropertyBoolean.constructFromObject(data['jasper.trimSpaces']);
      }
      if (data.hasOwnProperty('jasper.displaySourceFragments')) {
        obj['jasper.displaySourceFragments'] = ConfigNodePropertyBoolean.constructFromObject(data['jasper.displaySourceFragments']);
      }
      if (data.hasOwnProperty('default.is.session')) {
        obj['default.is.session'] = ConfigNodePropertyBoolean.constructFromObject(data['default.is.session']);
      }
    }
    return obj;
  }

  /**
   * @member {module:model/ConfigNodePropertyString} jasper.compilerTargetVM
   */
  exports.prototype['jasper.compilerTargetVM'] = undefined;
  /**
   * @member {module:model/ConfigNodePropertyString} jasper.compilerSourceVM
   */
  exports.prototype['jasper.compilerSourceVM'] = undefined;
  /**
   * @member {module:model/ConfigNodePropertyBoolean} jasper.classdebuginfo
   */
  exports.prototype['jasper.classdebuginfo'] = undefined;
  /**
   * @member {module:model/ConfigNodePropertyBoolean} jasper.enablePooling
   */
  exports.prototype['jasper.enablePooling'] = undefined;
  /**
   * @member {module:model/ConfigNodePropertyString} jasper.ieClassId
   */
  exports.prototype['jasper.ieClassId'] = undefined;
  /**
   * @member {module:model/ConfigNodePropertyBoolean} jasper.genStringAsCharArray
   */
  exports.prototype['jasper.genStringAsCharArray'] = undefined;
  /**
   * @member {module:model/ConfigNodePropertyBoolean} jasper.keepgenerated
   */
  exports.prototype['jasper.keepgenerated'] = undefined;
  /**
   * @member {module:model/ConfigNodePropertyBoolean} jasper.mappedfile
   */
  exports.prototype['jasper.mappedfile'] = undefined;
  /**
   * @member {module:model/ConfigNodePropertyBoolean} jasper.trimSpaces
   */
  exports.prototype['jasper.trimSpaces'] = undefined;
  /**
   * @member {module:model/ConfigNodePropertyBoolean} jasper.displaySourceFragments
   */
  exports.prototype['jasper.displaySourceFragments'] = undefined;
  /**
   * @member {module:model/ConfigNodePropertyBoolean} default.is.session
   */
  exports.prototype['default.is.session'] = undefined;



  return exports;
}));


