/* 
 * Adobe Experience Manager OSGI config (AEM) API
 *
 * Swagger AEM OSGI is an OpenAPI specification for Adobe Experience Manager (AEM) OSGI Configurations API
 *
 * OpenAPI spec version: 1.0.0-pre.0
 * Contact: opensource@shinesolutions.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Org.OpenAPITools.Client.OpenAPIDateConverter;

namespace Org.OpenAPITools.Model
{
    /// <summary>
    /// ComDayCqWcmCoreImplLinkCheckerConfigurationFactoryImplProperties
    /// </summary>
    [DataContract]
    public partial class ComDayCqWcmCoreImplLinkCheckerConfigurationFactoryImplProperties :  IEquatable<ComDayCqWcmCoreImplLinkCheckerConfigurationFactoryImplProperties>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="ComDayCqWcmCoreImplLinkCheckerConfigurationFactoryImplProperties" /> class.
        /// </summary>
        /// <param name="linkExpiredPrefix">linkExpiredPrefix.</param>
        /// <param name="linkExpiredRemove">linkExpiredRemove.</param>
        /// <param name="linkExpiredSuffix">linkExpiredSuffix.</param>
        /// <param name="linkInvalidPrefix">linkInvalidPrefix.</param>
        /// <param name="linkInvalidRemove">linkInvalidRemove.</param>
        /// <param name="linkInvalidSuffix">linkInvalidSuffix.</param>
        /// <param name="linkPredatedPrefix">linkPredatedPrefix.</param>
        /// <param name="linkPredatedRemove">linkPredatedRemove.</param>
        /// <param name="linkPredatedSuffix">linkPredatedSuffix.</param>
        /// <param name="linkWcmmodes">linkWcmmodes.</param>
        public ComDayCqWcmCoreImplLinkCheckerConfigurationFactoryImplProperties(ConfigNodePropertyString linkExpiredPrefix = default(ConfigNodePropertyString), ConfigNodePropertyBoolean linkExpiredRemove = default(ConfigNodePropertyBoolean), ConfigNodePropertyString linkExpiredSuffix = default(ConfigNodePropertyString), ConfigNodePropertyString linkInvalidPrefix = default(ConfigNodePropertyString), ConfigNodePropertyBoolean linkInvalidRemove = default(ConfigNodePropertyBoolean), ConfigNodePropertyString linkInvalidSuffix = default(ConfigNodePropertyString), ConfigNodePropertyString linkPredatedPrefix = default(ConfigNodePropertyString), ConfigNodePropertyBoolean linkPredatedRemove = default(ConfigNodePropertyBoolean), ConfigNodePropertyString linkPredatedSuffix = default(ConfigNodePropertyString), ConfigNodePropertyArray linkWcmmodes = default(ConfigNodePropertyArray))
        {
            this.LinkExpiredPrefix = linkExpiredPrefix;
            this.LinkExpiredRemove = linkExpiredRemove;
            this.LinkExpiredSuffix = linkExpiredSuffix;
            this.LinkInvalidPrefix = linkInvalidPrefix;
            this.LinkInvalidRemove = linkInvalidRemove;
            this.LinkInvalidSuffix = linkInvalidSuffix;
            this.LinkPredatedPrefix = linkPredatedPrefix;
            this.LinkPredatedRemove = linkPredatedRemove;
            this.LinkPredatedSuffix = linkPredatedSuffix;
            this.LinkWcmmodes = linkWcmmodes;
        }
        
        /// <summary>
        /// Gets or Sets LinkExpiredPrefix
        /// </summary>
        [DataMember(Name="link.expired.prefix", EmitDefaultValue=false)]
        public ConfigNodePropertyString LinkExpiredPrefix { get; set; }

        /// <summary>
        /// Gets or Sets LinkExpiredRemove
        /// </summary>
        [DataMember(Name="link.expired.remove", EmitDefaultValue=false)]
        public ConfigNodePropertyBoolean LinkExpiredRemove { get; set; }

        /// <summary>
        /// Gets or Sets LinkExpiredSuffix
        /// </summary>
        [DataMember(Name="link.expired.suffix", EmitDefaultValue=false)]
        public ConfigNodePropertyString LinkExpiredSuffix { get; set; }

        /// <summary>
        /// Gets or Sets LinkInvalidPrefix
        /// </summary>
        [DataMember(Name="link.invalid.prefix", EmitDefaultValue=false)]
        public ConfigNodePropertyString LinkInvalidPrefix { get; set; }

        /// <summary>
        /// Gets or Sets LinkInvalidRemove
        /// </summary>
        [DataMember(Name="link.invalid.remove", EmitDefaultValue=false)]
        public ConfigNodePropertyBoolean LinkInvalidRemove { get; set; }

        /// <summary>
        /// Gets or Sets LinkInvalidSuffix
        /// </summary>
        [DataMember(Name="link.invalid.suffix", EmitDefaultValue=false)]
        public ConfigNodePropertyString LinkInvalidSuffix { get; set; }

        /// <summary>
        /// Gets or Sets LinkPredatedPrefix
        /// </summary>
        [DataMember(Name="link.predated.prefix", EmitDefaultValue=false)]
        public ConfigNodePropertyString LinkPredatedPrefix { get; set; }

        /// <summary>
        /// Gets or Sets LinkPredatedRemove
        /// </summary>
        [DataMember(Name="link.predated.remove", EmitDefaultValue=false)]
        public ConfigNodePropertyBoolean LinkPredatedRemove { get; set; }

        /// <summary>
        /// Gets or Sets LinkPredatedSuffix
        /// </summary>
        [DataMember(Name="link.predated.suffix", EmitDefaultValue=false)]
        public ConfigNodePropertyString LinkPredatedSuffix { get; set; }

        /// <summary>
        /// Gets or Sets LinkWcmmodes
        /// </summary>
        [DataMember(Name="link.wcmmodes", EmitDefaultValue=false)]
        public ConfigNodePropertyArray LinkWcmmodes { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class ComDayCqWcmCoreImplLinkCheckerConfigurationFactoryImplProperties {\n");
            sb.Append("  LinkExpiredPrefix: ").Append(LinkExpiredPrefix).Append("\n");
            sb.Append("  LinkExpiredRemove: ").Append(LinkExpiredRemove).Append("\n");
            sb.Append("  LinkExpiredSuffix: ").Append(LinkExpiredSuffix).Append("\n");
            sb.Append("  LinkInvalidPrefix: ").Append(LinkInvalidPrefix).Append("\n");
            sb.Append("  LinkInvalidRemove: ").Append(LinkInvalidRemove).Append("\n");
            sb.Append("  LinkInvalidSuffix: ").Append(LinkInvalidSuffix).Append("\n");
            sb.Append("  LinkPredatedPrefix: ").Append(LinkPredatedPrefix).Append("\n");
            sb.Append("  LinkPredatedRemove: ").Append(LinkPredatedRemove).Append("\n");
            sb.Append("  LinkPredatedSuffix: ").Append(LinkPredatedSuffix).Append("\n");
            sb.Append("  LinkWcmmodes: ").Append(LinkWcmmodes).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as ComDayCqWcmCoreImplLinkCheckerConfigurationFactoryImplProperties);
        }

        /// <summary>
        /// Returns true if ComDayCqWcmCoreImplLinkCheckerConfigurationFactoryImplProperties instances are equal
        /// </summary>
        /// <param name="input">Instance of ComDayCqWcmCoreImplLinkCheckerConfigurationFactoryImplProperties to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(ComDayCqWcmCoreImplLinkCheckerConfigurationFactoryImplProperties input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.LinkExpiredPrefix == input.LinkExpiredPrefix ||
                    (this.LinkExpiredPrefix != null &&
                    this.LinkExpiredPrefix.Equals(input.LinkExpiredPrefix))
                ) && 
                (
                    this.LinkExpiredRemove == input.LinkExpiredRemove ||
                    (this.LinkExpiredRemove != null &&
                    this.LinkExpiredRemove.Equals(input.LinkExpiredRemove))
                ) && 
                (
                    this.LinkExpiredSuffix == input.LinkExpiredSuffix ||
                    (this.LinkExpiredSuffix != null &&
                    this.LinkExpiredSuffix.Equals(input.LinkExpiredSuffix))
                ) && 
                (
                    this.LinkInvalidPrefix == input.LinkInvalidPrefix ||
                    (this.LinkInvalidPrefix != null &&
                    this.LinkInvalidPrefix.Equals(input.LinkInvalidPrefix))
                ) && 
                (
                    this.LinkInvalidRemove == input.LinkInvalidRemove ||
                    (this.LinkInvalidRemove != null &&
                    this.LinkInvalidRemove.Equals(input.LinkInvalidRemove))
                ) && 
                (
                    this.LinkInvalidSuffix == input.LinkInvalidSuffix ||
                    (this.LinkInvalidSuffix != null &&
                    this.LinkInvalidSuffix.Equals(input.LinkInvalidSuffix))
                ) && 
                (
                    this.LinkPredatedPrefix == input.LinkPredatedPrefix ||
                    (this.LinkPredatedPrefix != null &&
                    this.LinkPredatedPrefix.Equals(input.LinkPredatedPrefix))
                ) && 
                (
                    this.LinkPredatedRemove == input.LinkPredatedRemove ||
                    (this.LinkPredatedRemove != null &&
                    this.LinkPredatedRemove.Equals(input.LinkPredatedRemove))
                ) && 
                (
                    this.LinkPredatedSuffix == input.LinkPredatedSuffix ||
                    (this.LinkPredatedSuffix != null &&
                    this.LinkPredatedSuffix.Equals(input.LinkPredatedSuffix))
                ) && 
                (
                    this.LinkWcmmodes == input.LinkWcmmodes ||
                    (this.LinkWcmmodes != null &&
                    this.LinkWcmmodes.Equals(input.LinkWcmmodes))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.LinkExpiredPrefix != null)
                    hashCode = hashCode * 59 + this.LinkExpiredPrefix.GetHashCode();
                if (this.LinkExpiredRemove != null)
                    hashCode = hashCode * 59 + this.LinkExpiredRemove.GetHashCode();
                if (this.LinkExpiredSuffix != null)
                    hashCode = hashCode * 59 + this.LinkExpiredSuffix.GetHashCode();
                if (this.LinkInvalidPrefix != null)
                    hashCode = hashCode * 59 + this.LinkInvalidPrefix.GetHashCode();
                if (this.LinkInvalidRemove != null)
                    hashCode = hashCode * 59 + this.LinkInvalidRemove.GetHashCode();
                if (this.LinkInvalidSuffix != null)
                    hashCode = hashCode * 59 + this.LinkInvalidSuffix.GetHashCode();
                if (this.LinkPredatedPrefix != null)
                    hashCode = hashCode * 59 + this.LinkPredatedPrefix.GetHashCode();
                if (this.LinkPredatedRemove != null)
                    hashCode = hashCode * 59 + this.LinkPredatedRemove.GetHashCode();
                if (this.LinkPredatedSuffix != null)
                    hashCode = hashCode * 59 + this.LinkPredatedSuffix.GetHashCode();
                if (this.LinkWcmmodes != null)
                    hashCode = hashCode * 59 + this.LinkWcmmodes.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
