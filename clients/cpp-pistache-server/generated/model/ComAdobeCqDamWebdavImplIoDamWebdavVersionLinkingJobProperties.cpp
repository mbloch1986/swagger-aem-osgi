/**
* Adobe Experience Manager OSGI config (AEM) API
* Swagger AEM OSGI is an OpenAPI specification for Adobe Experience Manager (AEM) OSGI Configurations API
*
* OpenAPI spec version: 1.0.0-pre.0
* Contact: opensource@shinesolutions.com
*
* NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
* https://openapi-generator.tech
* Do not edit the class manually.
*/


#include "ComAdobeCqDamWebdavImplIoDamWebdavVersionLinkingJobProperties.h"

namespace org {
namespace openapitools {
namespace server {
namespace model {

ComAdobeCqDamWebdavImplIoDamWebdavVersionLinkingJobProperties::ComAdobeCqDamWebdavImplIoDamWebdavVersionLinkingJobProperties()
{
    m_Cq_dam_webdav_version_linking_enableIsSet = false;
    m_Cq_dam_webdav_version_linking_scheduler_periodIsSet = false;
    m_Cq_dam_webdav_version_linking_staging_timeoutIsSet = false;
    
}

ComAdobeCqDamWebdavImplIoDamWebdavVersionLinkingJobProperties::~ComAdobeCqDamWebdavImplIoDamWebdavVersionLinkingJobProperties()
{
}

void ComAdobeCqDamWebdavImplIoDamWebdavVersionLinkingJobProperties::validate()
{
    // TODO: implement validation
}

nlohmann::json ComAdobeCqDamWebdavImplIoDamWebdavVersionLinkingJobProperties::toJson() const
{
    nlohmann::json val = nlohmann::json::object();

    if(m_Cq_dam_webdav_version_linking_enableIsSet)
    {
        val["cq.dam.webdav.version.linking.enable"] = ModelBase::toJson(m_Cq_dam_webdav_version_linking_enable);
    }
    if(m_Cq_dam_webdav_version_linking_scheduler_periodIsSet)
    {
        val["cq.dam.webdav.version.linking.scheduler.period"] = ModelBase::toJson(m_Cq_dam_webdav_version_linking_scheduler_period);
    }
    if(m_Cq_dam_webdav_version_linking_staging_timeoutIsSet)
    {
        val["cq.dam.webdav.version.linking.staging.timeout"] = ModelBase::toJson(m_Cq_dam_webdav_version_linking_staging_timeout);
    }
    

    return val;
}

void ComAdobeCqDamWebdavImplIoDamWebdavVersionLinkingJobProperties::fromJson(nlohmann::json& val)
{
    if(val.find("cq.dam.webdav.version.linking.enable") != val.end())
    {
        if(!val["cq.dam.webdav.version.linking.enable"].is_null())
        {
            ConfigNodePropertyBoolean newItem;
            newItem.fromJson(val["cq.dam.webdav.version.linking.enable"]);
            setCqDamWebdavVersionLinkingEnable( newItem );
        }
        
    }
    if(val.find("cq.dam.webdav.version.linking.scheduler.period") != val.end())
    {
        if(!val["cq.dam.webdav.version.linking.scheduler.period"].is_null())
        {
            ConfigNodePropertyInteger newItem;
            newItem.fromJson(val["cq.dam.webdav.version.linking.scheduler.period"]);
            setCqDamWebdavVersionLinkingSchedulerPeriod( newItem );
        }
        
    }
    if(val.find("cq.dam.webdav.version.linking.staging.timeout") != val.end())
    {
        if(!val["cq.dam.webdav.version.linking.staging.timeout"].is_null())
        {
            ConfigNodePropertyInteger newItem;
            newItem.fromJson(val["cq.dam.webdav.version.linking.staging.timeout"]);
            setCqDamWebdavVersionLinkingStagingTimeout( newItem );
        }
        
    }
    
}


ConfigNodePropertyBoolean ComAdobeCqDamWebdavImplIoDamWebdavVersionLinkingJobProperties::getCqDamWebdavVersionLinkingEnable() const
{
    return m_Cq_dam_webdav_version_linking_enable;
}
void ComAdobeCqDamWebdavImplIoDamWebdavVersionLinkingJobProperties::setCqDamWebdavVersionLinkingEnable(ConfigNodePropertyBoolean const& value)
{
    m_Cq_dam_webdav_version_linking_enable = value;
    m_Cq_dam_webdav_version_linking_enableIsSet = true;
}
bool ComAdobeCqDamWebdavImplIoDamWebdavVersionLinkingJobProperties::cqDamWebdavVersionLinkingEnableIsSet() const
{
    return m_Cq_dam_webdav_version_linking_enableIsSet;
}
void ComAdobeCqDamWebdavImplIoDamWebdavVersionLinkingJobProperties::unsetCq_dam_webdav_version_linking_enable()
{
    m_Cq_dam_webdav_version_linking_enableIsSet = false;
}
ConfigNodePropertyInteger ComAdobeCqDamWebdavImplIoDamWebdavVersionLinkingJobProperties::getCqDamWebdavVersionLinkingSchedulerPeriod() const
{
    return m_Cq_dam_webdav_version_linking_scheduler_period;
}
void ComAdobeCqDamWebdavImplIoDamWebdavVersionLinkingJobProperties::setCqDamWebdavVersionLinkingSchedulerPeriod(ConfigNodePropertyInteger const& value)
{
    m_Cq_dam_webdav_version_linking_scheduler_period = value;
    m_Cq_dam_webdav_version_linking_scheduler_periodIsSet = true;
}
bool ComAdobeCqDamWebdavImplIoDamWebdavVersionLinkingJobProperties::cqDamWebdavVersionLinkingSchedulerPeriodIsSet() const
{
    return m_Cq_dam_webdav_version_linking_scheduler_periodIsSet;
}
void ComAdobeCqDamWebdavImplIoDamWebdavVersionLinkingJobProperties::unsetCq_dam_webdav_version_linking_scheduler_period()
{
    m_Cq_dam_webdav_version_linking_scheduler_periodIsSet = false;
}
ConfigNodePropertyInteger ComAdobeCqDamWebdavImplIoDamWebdavVersionLinkingJobProperties::getCqDamWebdavVersionLinkingStagingTimeout() const
{
    return m_Cq_dam_webdav_version_linking_staging_timeout;
}
void ComAdobeCqDamWebdavImplIoDamWebdavVersionLinkingJobProperties::setCqDamWebdavVersionLinkingStagingTimeout(ConfigNodePropertyInteger const& value)
{
    m_Cq_dam_webdav_version_linking_staging_timeout = value;
    m_Cq_dam_webdav_version_linking_staging_timeoutIsSet = true;
}
bool ComAdobeCqDamWebdavImplIoDamWebdavVersionLinkingJobProperties::cqDamWebdavVersionLinkingStagingTimeoutIsSet() const
{
    return m_Cq_dam_webdav_version_linking_staging_timeoutIsSet;
}
void ComAdobeCqDamWebdavImplIoDamWebdavVersionLinkingJobProperties::unsetCq_dam_webdav_version_linking_staging_timeout()
{
    m_Cq_dam_webdav_version_linking_staging_timeoutIsSet = false;
}

}
}
}
}

