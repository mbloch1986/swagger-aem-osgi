# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from openapi_server.models.base_model_ import Model
from openapi_server.models.config_node_property_string import ConfigNodePropertyString  # noqa: F401,E501
from openapi_server import util


class ComAdobeCqProjectsImplServletProjectImageServletProperties(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, image_quality: ConfigNodePropertyString=None, image_supported_resolutions: ConfigNodePropertyString=None):  # noqa: E501
        """ComAdobeCqProjectsImplServletProjectImageServletProperties - a model defined in OpenAPI

        :param image_quality: The image_quality of this ComAdobeCqProjectsImplServletProjectImageServletProperties.  # noqa: E501
        :type image_quality: ConfigNodePropertyString
        :param image_supported_resolutions: The image_supported_resolutions of this ComAdobeCqProjectsImplServletProjectImageServletProperties.  # noqa: E501
        :type image_supported_resolutions: ConfigNodePropertyString
        """
        self.openapi_types = {
            'image_quality': ConfigNodePropertyString,
            'image_supported_resolutions': ConfigNodePropertyString
        }

        self.attribute_map = {
            'image_quality': 'image.quality',
            'image_supported_resolutions': 'image.supported.resolutions'
        }

        self._image_quality = image_quality
        self._image_supported_resolutions = image_supported_resolutions

    @classmethod
    def from_dict(cls, dikt) -> 'ComAdobeCqProjectsImplServletProjectImageServletProperties':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The comAdobeCqProjectsImplServletProjectImageServletProperties of this ComAdobeCqProjectsImplServletProjectImageServletProperties.  # noqa: E501
        :rtype: ComAdobeCqProjectsImplServletProjectImageServletProperties
        """
        return util.deserialize_model(dikt, cls)

    @property
    def image_quality(self) -> ConfigNodePropertyString:
        """Gets the image_quality of this ComAdobeCqProjectsImplServletProjectImageServletProperties.


        :return: The image_quality of this ComAdobeCqProjectsImplServletProjectImageServletProperties.
        :rtype: ConfigNodePropertyString
        """
        return self._image_quality

    @image_quality.setter
    def image_quality(self, image_quality: ConfigNodePropertyString):
        """Sets the image_quality of this ComAdobeCqProjectsImplServletProjectImageServletProperties.


        :param image_quality: The image_quality of this ComAdobeCqProjectsImplServletProjectImageServletProperties.
        :type image_quality: ConfigNodePropertyString
        """

        self._image_quality = image_quality

    @property
    def image_supported_resolutions(self) -> ConfigNodePropertyString:
        """Gets the image_supported_resolutions of this ComAdobeCqProjectsImplServletProjectImageServletProperties.


        :return: The image_supported_resolutions of this ComAdobeCqProjectsImplServletProjectImageServletProperties.
        :rtype: ConfigNodePropertyString
        """
        return self._image_supported_resolutions

    @image_supported_resolutions.setter
    def image_supported_resolutions(self, image_supported_resolutions: ConfigNodePropertyString):
        """Sets the image_supported_resolutions of this ComAdobeCqProjectsImplServletProjectImageServletProperties.


        :param image_supported_resolutions: The image_supported_resolutions of this ComAdobeCqProjectsImplServletProjectImageServletProperties.
        :type image_supported_resolutions: ConfigNodePropertyString
        """

        self._image_supported_resolutions = image_supported_resolutions
