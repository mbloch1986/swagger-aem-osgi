/**
 * Adobe Experience Manager OSGI config (AEM) API
 * Swagger AEM OSGI is an OpenAPI specification for Adobe Experience Manager (AEM) OSGI Configurations API
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: opensource@shinesolutions.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD.
    define(['expect.js', process.cwd()+'/src/index'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    factory(require('expect.js'), require(process.cwd()+'/src/index'));
  } else {
    // Browser globals (root is window)
    factory(root.expect, root.NodeSwaggerAemOsgi);
  }
}(this, function(expect, NodeSwaggerAemOsgi) {
  'use strict';

  var instance;

  beforeEach(function() {
    instance = new NodeSwaggerAemOsgi.OrgApacheSlingDiscoveryOakConfigProperties();
  });

  var getProperty = function(object, getter, property) {
    // Use getter method if present; otherwise, get the property directly.
    if (typeof object[getter] === 'function')
      return object[getter]();
    else
      return object[property];
  }

  var setProperty = function(object, setter, property, value) {
    // Use setter method if present; otherwise, set the property directly.
    if (typeof object[setter] === 'function')
      object[setter](value);
    else
      object[property] = value;
  }

  describe('OrgApacheSlingDiscoveryOakConfigProperties', function() {
    it('should create an instance of OrgApacheSlingDiscoveryOakConfigProperties', function() {
      // uncomment below and update the code to test OrgApacheSlingDiscoveryOakConfigProperties
      //var instane = new NodeSwaggerAemOsgi.OrgApacheSlingDiscoveryOakConfigProperties();
      //expect(instance).to.be.a(NodeSwaggerAemOsgi.OrgApacheSlingDiscoveryOakConfigProperties);
    });

    it('should have the property connectorPingTimeout (base name: "connectorPingTimeout")', function() {
      // uncomment below and update the code to test the property connectorPingTimeout
      //var instane = new NodeSwaggerAemOsgi.OrgApacheSlingDiscoveryOakConfigProperties();
      //expect(instance).to.be();
    });

    it('should have the property connectorPingInterval (base name: "connectorPingInterval")', function() {
      // uncomment below and update the code to test the property connectorPingInterval
      //var instane = new NodeSwaggerAemOsgi.OrgApacheSlingDiscoveryOakConfigProperties();
      //expect(instance).to.be();
    });

    it('should have the property discoveryLiteCheckInterval (base name: "discoveryLiteCheckInterval")', function() {
      // uncomment below and update the code to test the property discoveryLiteCheckInterval
      //var instane = new NodeSwaggerAemOsgi.OrgApacheSlingDiscoveryOakConfigProperties();
      //expect(instance).to.be();
    });

    it('should have the property clusterSyncServiceTimeout (base name: "clusterSyncServiceTimeout")', function() {
      // uncomment below and update the code to test the property clusterSyncServiceTimeout
      //var instane = new NodeSwaggerAemOsgi.OrgApacheSlingDiscoveryOakConfigProperties();
      //expect(instance).to.be();
    });

    it('should have the property clusterSyncServiceInterval (base name: "clusterSyncServiceInterval")', function() {
      // uncomment below and update the code to test the property clusterSyncServiceInterval
      //var instane = new NodeSwaggerAemOsgi.OrgApacheSlingDiscoveryOakConfigProperties();
      //expect(instance).to.be();
    });

    it('should have the property enableSyncToken (base name: "enableSyncToken")', function() {
      // uncomment below and update the code to test the property enableSyncToken
      //var instane = new NodeSwaggerAemOsgi.OrgApacheSlingDiscoveryOakConfigProperties();
      //expect(instance).to.be();
    });

    it('should have the property minEventDelay (base name: "minEventDelay")', function() {
      // uncomment below and update the code to test the property minEventDelay
      //var instane = new NodeSwaggerAemOsgi.OrgApacheSlingDiscoveryOakConfigProperties();
      //expect(instance).to.be();
    });

    it('should have the property socketConnectTimeout (base name: "socketConnectTimeout")', function() {
      // uncomment below and update the code to test the property socketConnectTimeout
      //var instane = new NodeSwaggerAemOsgi.OrgApacheSlingDiscoveryOakConfigProperties();
      //expect(instance).to.be();
    });

    it('should have the property soTimeout (base name: "soTimeout")', function() {
      // uncomment below and update the code to test the property soTimeout
      //var instane = new NodeSwaggerAemOsgi.OrgApacheSlingDiscoveryOakConfigProperties();
      //expect(instance).to.be();
    });

    it('should have the property topologyConnectorUrls (base name: "topologyConnectorUrls")', function() {
      // uncomment below and update the code to test the property topologyConnectorUrls
      //var instane = new NodeSwaggerAemOsgi.OrgApacheSlingDiscoveryOakConfigProperties();
      //expect(instance).to.be();
    });

    it('should have the property topologyConnectorWhitelist (base name: "topologyConnectorWhitelist")', function() {
      // uncomment below and update the code to test the property topologyConnectorWhitelist
      //var instane = new NodeSwaggerAemOsgi.OrgApacheSlingDiscoveryOakConfigProperties();
      //expect(instance).to.be();
    });

    it('should have the property autoStopLocalLoopEnabled (base name: "autoStopLocalLoopEnabled")', function() {
      // uncomment below and update the code to test the property autoStopLocalLoopEnabled
      //var instane = new NodeSwaggerAemOsgi.OrgApacheSlingDiscoveryOakConfigProperties();
      //expect(instance).to.be();
    });

    it('should have the property gzipConnectorRequestsEnabled (base name: "gzipConnectorRequestsEnabled")', function() {
      // uncomment below and update the code to test the property gzipConnectorRequestsEnabled
      //var instane = new NodeSwaggerAemOsgi.OrgApacheSlingDiscoveryOakConfigProperties();
      //expect(instance).to.be();
    });

    it('should have the property hmacEnabled (base name: "hmacEnabled")', function() {
      // uncomment below and update the code to test the property hmacEnabled
      //var instane = new NodeSwaggerAemOsgi.OrgApacheSlingDiscoveryOakConfigProperties();
      //expect(instance).to.be();
    });

    it('should have the property enableEncryption (base name: "enableEncryption")', function() {
      // uncomment below and update the code to test the property enableEncryption
      //var instane = new NodeSwaggerAemOsgi.OrgApacheSlingDiscoveryOakConfigProperties();
      //expect(instance).to.be();
    });

    it('should have the property sharedKey (base name: "sharedKey")', function() {
      // uncomment below and update the code to test the property sharedKey
      //var instane = new NodeSwaggerAemOsgi.OrgApacheSlingDiscoveryOakConfigProperties();
      //expect(instance).to.be();
    });

    it('should have the property hmacSharedKeyTTL (base name: "hmacSharedKeyTTL")', function() {
      // uncomment below and update the code to test the property hmacSharedKeyTTL
      //var instane = new NodeSwaggerAemOsgi.OrgApacheSlingDiscoveryOakConfigProperties();
      //expect(instance).to.be();
    });

    it('should have the property backoffStandbyFactor (base name: "backoffStandbyFactor")', function() {
      // uncomment below and update the code to test the property backoffStandbyFactor
      //var instane = new NodeSwaggerAemOsgi.OrgApacheSlingDiscoveryOakConfigProperties();
      //expect(instance).to.be();
    });

    it('should have the property backoffStableFactor (base name: "backoffStableFactor")', function() {
      // uncomment below and update the code to test the property backoffStableFactor
      //var instane = new NodeSwaggerAemOsgi.OrgApacheSlingDiscoveryOakConfigProperties();
      //expect(instance).to.be();
    });

  });

}));
