/*
 * Adobe Experience Manager OSGI config (AEM) API
 * Swagger AEM OSGI is an OpenAPI specification for Adobe Experience Manager (AEM) OSGI Configurations API
 *
 * OpenAPI spec version: 1.0.0-pre.0
 * Contact: opensource@shinesolutions.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.prokarma.pkmst.controller;

import com.fasterxml.jackson.databind.ObjectMapper;
import com.prokarma.pkmst.model.AdaptiveFormAndInteractiveCommunicationWebChannelConfigurationInfo;
import com.prokarma.pkmst.model.AdaptiveFormAndInteractiveCommunicationWebChannelThemeConfigurInfo;
import com.prokarma.pkmst.model.AnalyticsComponentQueryCacheServiceInfo;
import com.prokarma.pkmst.model.ApacheSlingHealthCheckResultHTMLSerializerInfo;
import java.math.BigDecimal;
import com.prokarma.pkmst.model.ComAdobeAemFormsndocumentsConfigAEMFormsManagerConfigurationInfo;
import com.prokarma.pkmst.model.ComAdobeAemTransactionCoreImplTransactionRecorderInfo;
import com.prokarma.pkmst.model.ComAdobeAemUpgradePrechecksHcImplDeprecateIndexesHCInfo;
import com.prokarma.pkmst.model.ComAdobeAemUpgradePrechecksHcImplReplicationAgentsDisabledHCInfo;
import com.prokarma.pkmst.model.ComAdobeAemUpgradePrechecksMbeanImplPreUpgradeTasksMBeanImplInfo;
import com.prokarma.pkmst.model.ComAdobeAemUpgradePrechecksTasksImplConsistencyCheckTaskImplInfo;
import com.prokarma.pkmst.model.ComAdobeCqAccountApiAccountManagementServiceInfo;
import com.prokarma.pkmst.model.ComAdobeCqAccountImplAccountManagementServletInfo;
import com.prokarma.pkmst.model.ComAdobeCqAddressImplLocationLocationListServletInfo;
import com.prokarma.pkmst.model.ComAdobeCqAuditPurgeDamInfo;
import com.prokarma.pkmst.model.ComAdobeCqAuditPurgePagesInfo;
import com.prokarma.pkmst.model.ComAdobeCqAuditPurgeReplicationInfo;
import com.prokarma.pkmst.model.ComAdobeCqCdnRewriterImplAWSCloudFrontRewriterInfo;
import com.prokarma.pkmst.model.ComAdobeCqCdnRewriterImplCDNConfigServiceImplInfo;
import com.prokarma.pkmst.model.ComAdobeCqCdnRewriterImplCDNRewriterInfo;
import com.prokarma.pkmst.model.ComAdobeCqCloudconfigCoreImplConfigurationReplicationEventHandleInfo;
import com.prokarma.pkmst.model.ComAdobeCqCommerceImplAssetDynamicImageHandlerInfo;
import com.prokarma.pkmst.model.ComAdobeCqCommerceImplAssetProductAssetHandlerProviderImplInfo;
import com.prokarma.pkmst.model.ComAdobeCqCommerceImplAssetStaticImageHandlerInfo;
import com.prokarma.pkmst.model.ComAdobeCqCommerceImplAssetVideoHandlerInfo;
import com.prokarma.pkmst.model.ComAdobeCqCommerceImplPromotionPromotionManagerImplInfo;
import com.prokarma.pkmst.model.ComAdobeCqCommercePimImplCataloggeneratorCatalogGeneratorImplInfo;
import com.prokarma.pkmst.model.ComAdobeCqCommercePimImplPageEventListenerInfo;
import com.prokarma.pkmst.model.ComAdobeCqCommercePimImplProductfeedProductFeedServiceImplInfo;
import com.prokarma.pkmst.model.ComAdobeCqContentinsightImplReportingServicesSettingsProviderInfo;
import com.prokarma.pkmst.model.ComAdobeCqContentinsightImplServletsBrightEdgeProxyServletInfo;
import com.prokarma.pkmst.model.ComAdobeCqContentinsightImplServletsReportingServicesProxyServleInfo;
import com.prokarma.pkmst.model.ComAdobeCqDamCfmImplComponentComponentConfigImplInfo;
import com.prokarma.pkmst.model.ComAdobeCqDamCfmImplConfFeatureConfigImplInfo;
import com.prokarma.pkmst.model.ComAdobeCqDamCfmImplContentRewriterAssetProcessorInfo;
import com.prokarma.pkmst.model.ComAdobeCqDamCfmImplContentRewriterParRangeFilterInfo;
import com.prokarma.pkmst.model.ComAdobeCqDamCfmImplContentRewriterPayloadFilterInfo;
import com.prokarma.pkmst.model.ComAdobeCqDamDmProcessImagePTiffManagerImplInfo;
import com.prokarma.pkmst.model.ComAdobeCqDamIpsImplReplicationTriggerReplicateOnModifyWorkerInfo;
import com.prokarma.pkmst.model.ComAdobeCqDamMacSyncHelperImplMACSyncClientImplInfo;
import com.prokarma.pkmst.model.ComAdobeCqDamMacSyncImplDAMSyncServiceImplInfo;
import com.prokarma.pkmst.model.ComAdobeCqDamProcessorNuiImplNuiAssetProcessorInfo;
import com.prokarma.pkmst.model.ComAdobeCqDamS7imagingImplIsImageServerComponentInfo;
import com.prokarma.pkmst.model.ComAdobeCqDamS7imagingImplPsPlatformServerServletInfo;
import com.prokarma.pkmst.model.ComAdobeCqDamWebdavImplIoAssetIOHandlerInfo;
import com.prokarma.pkmst.model.ComAdobeCqDamWebdavImplIoDamWebdavVersionLinkingJobInfo;
import com.prokarma.pkmst.model.ComAdobeCqDamWebdavImplIoSpecialFilesHandlerInfo;
import com.prokarma.pkmst.model.ComAdobeCqDeserfwImplDeserializationFirewallImplInfo;
import com.prokarma.pkmst.model.ComAdobeCqDtmImplServiceDTMWebServiceImplInfo;
import com.prokarma.pkmst.model.ComAdobeCqDtmImplServletsDTMDeployHookServletInfo;
import com.prokarma.pkmst.model.ComAdobeCqDtmReactorImplServiceWebServiceImplInfo;
import com.prokarma.pkmst.model.ComAdobeCqExperiencelogImplExperienceLogConfigServletInfo;
import com.prokarma.pkmst.model.ComAdobeCqHcContentPackagesHealthCheckInfo;
import com.prokarma.pkmst.model.ComAdobeCqHistoryImplHistoryRequestFilterInfo;
import com.prokarma.pkmst.model.ComAdobeCqHistoryImplHistoryServiceImplInfo;
import com.prokarma.pkmst.model.ComAdobeCqInboxImplTypeproviderItemTypeProviderInfo;
import com.prokarma.pkmst.model.ComAdobeCqProjectsImplServletProjectImageServletInfo;
import com.prokarma.pkmst.model.ComAdobeCqProjectsPurgeSchedulerInfo;
import com.prokarma.pkmst.model.ComAdobeCqScheduledExporterImplScheduledExporterImplInfo;
import com.prokarma.pkmst.model.ComAdobeCqScreensAnalyticsImplScreensAnalyticsServiceImplInfo;
import com.prokarma.pkmst.model.ComAdobeCqScreensDeviceImplDeviceServiceInfo;
import com.prokarma.pkmst.model.ComAdobeCqScreensDeviceRegistrationImplRegistrationServiceImplInfo;
import com.prokarma.pkmst.model.ComAdobeCqScreensImplHandlerChannelsUpdateHandlerInfo;
import com.prokarma.pkmst.model.ComAdobeCqScreensImplJobsDistributedDevicesStatiUpdateJobInfo;
import com.prokarma.pkmst.model.ComAdobeCqScreensImplRemoteImplDistributedHttpClientImplInfo;
import com.prokarma.pkmst.model.ComAdobeCqScreensImplScreensChannelPostProcessorInfo;
import com.prokarma.pkmst.model.ComAdobeCqScreensMonitoringImplScreensMonitoringServiceImplInfo;
import com.prokarma.pkmst.model.ComAdobeCqScreensMqActivemqImplArtemisJMSProviderInfo;
import com.prokarma.pkmst.model.ComAdobeCqScreensOfflinecontentImplBulkOfflineUpdateServiceImplInfo;
import com.prokarma.pkmst.model.ComAdobeCqScreensOfflinecontentImplOfflineContentServiceImplInfo;
import com.prokarma.pkmst.model.ComAdobeCqScreensSegmentationImplSegmentationFeatureFlagInfo;
import com.prokarma.pkmst.model.ComAdobeCqSecurityHcBundlesImplHtmlLibraryManagerConfigHealthChInfo;
import com.prokarma.pkmst.model.ComAdobeCqSecurityHcBundlesImplWcmFilterHealthCheckInfo;
import com.prokarma.pkmst.model.ComAdobeCqSecurityHcDispatcherImplDispatcherAccessHealthCheckInfo;
import com.prokarma.pkmst.model.ComAdobeCqSecurityHcPackagesImplExampleContentHealthCheckInfo;
import com.prokarma.pkmst.model.ComAdobeCqSecurityHcWebserverImplClickjackingHealthCheckInfo;
import com.prokarma.pkmst.model.ComAdobeCqSocialAccountverificationImplAccountManagementConfigImInfo;
import com.prokarma.pkmst.model.ComAdobeCqSocialActivitystreamsClientImplSocialActivityComponenInfo;
import com.prokarma.pkmst.model.ComAdobeCqSocialActivitystreamsClientImplSocialActivityStreamCoInfo;
import com.prokarma.pkmst.model.ComAdobeCqSocialActivitystreamsListenerImplEventListenerHandlerInfo;
import com.prokarma.pkmst.model.ComAdobeCqSocialActivitystreamsListenerImplModerationEventExtenInfo;
import com.prokarma.pkmst.model.ComAdobeCqSocialActivitystreamsListenerImplRatingEventActivitySInfo;
import com.prokarma.pkmst.model.ComAdobeCqSocialActivitystreamsListenerImplResourceActivityStreInfo;
import com.prokarma.pkmst.model.ComAdobeCqSocialCalendarClientEndpointsImplCalendarOperationsIInfo;
import com.prokarma.pkmst.model.ComAdobeCqSocialCalendarClientOperationextensionsEventAttachmenInfo;
import com.prokarma.pkmst.model.ComAdobeCqSocialCalendarServletsTimeZoneServletInfo;
import com.prokarma.pkmst.model.ComAdobeCqSocialCommonsCommentsEndpointsImplCommentDeleteEventInfo;
import com.prokarma.pkmst.model.ComAdobeCqSocialCommonsCommentsEndpointsImplCommentOperationSeInfo;
import com.prokarma.pkmst.model.ComAdobeCqSocialCommonsCommentsEndpointsImplTranslationOperatiInfo;
import com.prokarma.pkmst.model.ComAdobeCqSocialCommonsCommentsListingImplSearchCommentSocialCInfo;
import com.prokarma.pkmst.model.ComAdobeCqSocialCommonsCommentsSchedulerImplSearchScheduledPosInfo;
import com.prokarma.pkmst.model.ComAdobeCqSocialCommonsCorsCORSAuthenticationFilterInfo;
import com.prokarma.pkmst.model.ComAdobeCqSocialCommonsEmailreplyImplAndroidEmailClientProviderInfo;
import com.prokarma.pkmst.model.ComAdobeCqSocialCommonsEmailreplyImplCommentEmailBuilderImplInfo;
import com.prokarma.pkmst.model.ComAdobeCqSocialCommonsEmailreplyImplCommentEmailEventListenerInfo;
import com.prokarma.pkmst.model.ComAdobeCqSocialCommonsEmailreplyImplCustomEmailClientProviderInfo;
import com.prokarma.pkmst.model.ComAdobeCqSocialCommonsEmailreplyImplEmailQuotedTextPatternsImpInfo;
import com.prokarma.pkmst.model.ComAdobeCqSocialCommonsEmailreplyImplEmailReplyConfigurationImpInfo;
import com.prokarma.pkmst.model.ComAdobeCqSocialCommonsEmailreplyImplEmailReplyImporterInfo;
import com.prokarma.pkmst.model.ComAdobeCqSocialCommonsEmailreplyImplGmailEmailClientProviderInfo;
import com.prokarma.pkmst.model.ComAdobeCqSocialCommonsEmailreplyImplIOSEmailClientProviderInfo;
import com.prokarma.pkmst.model.ComAdobeCqSocialCommonsEmailreplyImplMacmailEmailClientProviderInfo;
import com.prokarma.pkmst.model.ComAdobeCqSocialCommonsEmailreplyImplOutLookEmailClientProviderInfo;
import com.prokarma.pkmst.model.ComAdobeCqSocialCommonsEmailreplyImplUnknownEmailClientProviderInfo;
import com.prokarma.pkmst.model.ComAdobeCqSocialCommonsEmailreplyImplYahooEmailClientProviderInfo;
import com.prokarma.pkmst.model.ComAdobeCqSocialCommonsMaintainanceImplDeleteTempUGCImageUploadInfo;
import com.prokarma.pkmst.model.ComAdobeCqSocialCommonsUgclimiterImplUGCLimiterServiceImplInfo;
import com.prokarma.pkmst.model.ComAdobeCqSocialCommonsUgclimitsconfigImplCommunityUserUGCLimitInfo;
import com.prokarma.pkmst.model.ComAdobeCqSocialConnectOauthImplFacebookProviderImplInfo;
import com.prokarma.pkmst.model.ComAdobeCqSocialConnectOauthImplSocialOAuthAuthenticationHandleInfo;
import com.prokarma.pkmst.model.ComAdobeCqSocialConnectOauthImplSocialOAuthUserProfileMapperInfo;
import com.prokarma.pkmst.model.ComAdobeCqSocialConnectOauthImplTwitterProviderImplInfo;
import com.prokarma.pkmst.model.ComAdobeCqSocialContentFragmentsServicesImplCommunitiesFragmenInfo;
import com.prokarma.pkmst.model.ComAdobeCqSocialDatastoreAsImplASResourceProviderFactoryInfo;
import com.prokarma.pkmst.model.ComAdobeCqSocialDatastoreOpImplSocialMSResourceProviderFactoryInfo;
import com.prokarma.pkmst.model.ComAdobeCqSocialDatastoreRdbImplSocialRDBResourceProviderFactorInfo;
import com.prokarma.pkmst.model.ComAdobeCqSocialEnablementAdaptorsEnablementLearningPathAdaptorFInfo;
import com.prokarma.pkmst.model.ComAdobeCqSocialEnablementAdaptorsEnablementResourceAdaptorFactoInfo;
import com.prokarma.pkmst.model.ComAdobeCqSocialEnablementLearningpathEndpointsImplEnablementLInfo;
import com.prokarma.pkmst.model.ComAdobeCqSocialEnablementResourceEndpointsImplEnablementResouInfo;
import com.prokarma.pkmst.model.ComAdobeCqSocialEnablementServicesImplAuthorMarkerImplInfo;
import com.prokarma.pkmst.model.ComAdobeCqSocialFilelibraryClientEndpointsFilelibraryDownloadGeInfo;
import com.prokarma.pkmst.model.ComAdobeCqSocialFilelibraryClientEndpointsImplFileLibraryOperaInfo;
import com.prokarma.pkmst.model.ComAdobeCqSocialForumClientEndpointsImplForumOperationsServiceInfo;
import com.prokarma.pkmst.model.ComAdobeCqSocialForumDispatcherImplFlushOperationsInfo;
import com.prokarma.pkmst.model.ComAdobeCqSocialGroupClientImplCommunityGroupCollectionComponenInfo;
import com.prokarma.pkmst.model.ComAdobeCqSocialGroupImplGroupServiceImplInfo;
import com.prokarma.pkmst.model.ComAdobeCqSocialHandlebarsGuavaTemplateCacheImplInfo;
import com.prokarma.pkmst.model.ComAdobeCqSocialIdeationClientEndpointsImplIdeationOperationsSInfo;
import com.prokarma.pkmst.model.ComAdobeCqSocialJournalClientEndpointsImplJournalOperationsSerInfo;
import com.prokarma.pkmst.model.ComAdobeCqSocialMembersEndpointsImplCommunityMemberGroupProfileInfo;
import com.prokarma.pkmst.model.ComAdobeCqSocialMembersEndpointsImplCommunityMemberUserProfileOInfo;
import com.prokarma.pkmst.model.ComAdobeCqSocialMembersImplCommunityMemberGroupProfileComponentFInfo;
import com.prokarma.pkmst.model.ComAdobeCqSocialMessagingClientEndpointsImplMessagingOperationInfo;
import com.prokarma.pkmst.model.ComAdobeCqSocialModerationDashboardApiFilterGroupSocialComponenInfo;
import com.prokarma.pkmst.model.ComAdobeCqSocialModerationDashboardApiModerationDashboardSocialInfo;
import com.prokarma.pkmst.model.ComAdobeCqSocialModerationDashboardApiUserDetailsSocialComponenInfo;
import com.prokarma.pkmst.model.ComAdobeCqSocialModerationDashboardInternalImplFilterGroupSociInfo;
import com.prokarma.pkmst.model.ComAdobeCqSocialNotificationsImplMentionsRouterInfo;
import com.prokarma.pkmst.model.ComAdobeCqSocialNotificationsImplNotificationManagerImplInfo;
import com.prokarma.pkmst.model.ComAdobeCqSocialNotificationsImplNotificationsRouterInfo;
import com.prokarma.pkmst.model.ComAdobeCqSocialQnaClientEndpointsImplQnaForumOperationsServicInfo;
import com.prokarma.pkmst.model.ComAdobeCqSocialReportingAnalyticsServicesImplAnalyticsReportIInfo;
import com.prokarma.pkmst.model.ComAdobeCqSocialReportingAnalyticsServicesImplAnalyticsReportMInfo;
import com.prokarma.pkmst.model.ComAdobeCqSocialReportingAnalyticsServicesImplSiteTrendReportSInfo;
import com.prokarma.pkmst.model.ComAdobeCqSocialReviewClientEndpointsImplReviewOperationsServiInfo;
import com.prokarma.pkmst.model.ComAdobeCqSocialScfCoreOperationsImplSocialOperationsServletInfo;
import com.prokarma.pkmst.model.ComAdobeCqSocialScfEndpointsImplDefaultSocialGetServletInfo;
import com.prokarma.pkmst.model.ComAdobeCqSocialScoringImplScoringEventListenerInfo;
import com.prokarma.pkmst.model.ComAdobeCqSocialServiceusersInternalImplServiceUserWrapperImplInfo;
import com.prokarma.pkmst.model.ComAdobeCqSocialSiteEndpointsImplSiteOperationServiceInfo;
import com.prokarma.pkmst.model.ComAdobeCqSocialSiteImplAnalyticsComponentConfigurationServiceImInfo;
import com.prokarma.pkmst.model.ComAdobeCqSocialSiteImplSiteConfiguratorImplInfo;
import com.prokarma.pkmst.model.ComAdobeCqSocialSrpImplSocialSolrConnectorInfo;
import com.prokarma.pkmst.model.ComAdobeCqSocialSyncImplDiffChangesObserverInfo;
import com.prokarma.pkmst.model.ComAdobeCqSocialSyncImplGroupSyncListenerImplInfo;
import com.prokarma.pkmst.model.ComAdobeCqSocialSyncImplPublisherSyncServiceImplInfo;
import com.prokarma.pkmst.model.ComAdobeCqSocialSyncImplUserSyncListenerImplInfo;
import com.prokarma.pkmst.model.ComAdobeCqSocialTranslationImplTranslationServiceConfigManagerInfo;
import com.prokarma.pkmst.model.ComAdobeCqSocialTranslationImplUGCLanguageDetectorInfo;
import com.prokarma.pkmst.model.ComAdobeCqSocialUgcbaseDispatcherImplFlushServiceImplInfo;
import com.prokarma.pkmst.model.ComAdobeCqSocialUgcbaseImplAysncReverseReplicatorImplInfo;
import com.prokarma.pkmst.model.ComAdobeCqSocialUgcbaseImplPublisherConfigurationImplInfo;
import com.prokarma.pkmst.model.ComAdobeCqSocialUgcbaseImplSocialUtilsImplInfo;
import com.prokarma.pkmst.model.ComAdobeCqSocialUgcbaseModerationImplAutoModerationImplInfo;
import com.prokarma.pkmst.model.ComAdobeCqSocialUgcbaseModerationImplSentimentProcessInfo;
import com.prokarma.pkmst.model.ComAdobeCqSocialUgcbaseSecurityImplDefaultAttachmentTypeBlackliInfo;
import com.prokarma.pkmst.model.ComAdobeCqSocialUgcbaseSecurityImplSaferSlingPostValidatorImplInfo;
import com.prokarma.pkmst.model.ComAdobeCqSocialUserEndpointsImplUsersGroupFromPublishServletInfo;
import com.prokarma.pkmst.model.ComAdobeCqSocialUserImplTransportHttpToPublisherInfo;
import com.prokarma.pkmst.model.ComAdobeCqUiWcmCommonsInternalServletsRteRTEFilterServletFactInfo;
import com.prokarma.pkmst.model.ComAdobeCqUpgradesCleanupImplUpgradeContentCleanupInfo;
import com.prokarma.pkmst.model.ComAdobeCqUpgradesCleanupImplUpgradeInstallFolderCleanupInfo;
import com.prokarma.pkmst.model.ComAdobeCqWcmJobsAsyncImplAsyncDeleteConfigProviderServiceInfo;
import com.prokarma.pkmst.model.ComAdobeCqWcmJobsAsyncImplAsyncJobCleanUpTaskInfo;
import com.prokarma.pkmst.model.ComAdobeCqWcmJobsAsyncImplAsyncMoveConfigProviderServiceInfo;
import com.prokarma.pkmst.model.ComAdobeCqWcmJobsAsyncImplAsyncPageMoveConfigProviderServiceInfo;
import com.prokarma.pkmst.model.ComAdobeCqWcmLaunchesImplLaunchesEventHandlerInfo;
import com.prokarma.pkmst.model.ComAdobeCqWcmMobileQrcodeServletQRCodeImageGeneratorInfo;
import com.prokarma.pkmst.model.ComAdobeCqWcmStyleInternalComponentStyleInfoCacheImplInfo;
import com.prokarma.pkmst.model.ComAdobeCqWcmTranslationImplTranslationPlatformConfigurationImplInfo;
import com.prokarma.pkmst.model.ComAdobeFdFpConfigFormsPortalDraftsandSubmissionConfigServiceInfo;
import com.prokarma.pkmst.model.ComAdobeFdFpConfigFormsPortalSchedulerServiceInfo;
import com.prokarma.pkmst.model.ComAdobeFormsCommonServiceImplDefaultDataProviderInfo;
import com.prokarma.pkmst.model.ComAdobeFormsCommonServiceImplFormsCommonConfigurationServiceImpInfo;
import com.prokarma.pkmst.model.ComAdobeFormsCommonServletTempCleanUpTaskInfo;
import com.prokarma.pkmst.model.ComAdobeGraniteAcpPlatformPlatformServletInfo;
import com.prokarma.pkmst.model.ComAdobeGraniteActivitystreamsImplActivityManagerImplInfo;
import com.prokarma.pkmst.model.ComAdobeGraniteAnalyzerBaseSystemStatusServletInfo;
import com.prokarma.pkmst.model.ComAdobeGraniteAnalyzerScriptsCompileAllScriptsCompilerServletInfo;
import com.prokarma.pkmst.model.ComAdobeGraniteApicontrollerFilterResolverHookFactoryInfo;
import com.prokarma.pkmst.model.ComAdobeGraniteAuthCertImplClientCertAuthHandlerInfo;
import com.prokarma.pkmst.model.ComAdobeGraniteAuthImsImplExternalUserIdMappingProviderExtensionInfo;
import com.prokarma.pkmst.model.ComAdobeGraniteAuthImsImplIMSAccessTokenRequestCustomizerImplInfo;
import com.prokarma.pkmst.model.ComAdobeGraniteAuthImsImplIMSInstanceCredentialsValidatorInfo;
import com.prokarma.pkmst.model.ComAdobeGraniteAuthImsImplIMSProviderImplInfo;
import com.prokarma.pkmst.model.ComAdobeGraniteAuthImsImplImsConfigProviderImplInfo;
import com.prokarma.pkmst.model.ComAdobeGraniteAuthImsInfo;
import com.prokarma.pkmst.model.ComAdobeGraniteAuthOauthAccesstokenProviderInfo;
import com.prokarma.pkmst.model.ComAdobeGraniteAuthOauthImplBearerAuthenticationHandlerInfo;
import com.prokarma.pkmst.model.ComAdobeGraniteAuthOauthImplDefaultTokenValidatorImplInfo;
import com.prokarma.pkmst.model.ComAdobeGraniteAuthOauthImplFacebookProviderImplInfo;
import com.prokarma.pkmst.model.ComAdobeGraniteAuthOauthImplGithubProviderImplInfo;
import com.prokarma.pkmst.model.ComAdobeGraniteAuthOauthImplGraniteProviderInfo;
import com.prokarma.pkmst.model.ComAdobeGraniteAuthOauthImplHelperProviderConfigManagerInfo;
import com.prokarma.pkmst.model.ComAdobeGraniteAuthOauthImplHelperProviderConfigManagerInternalInfo;
import com.prokarma.pkmst.model.ComAdobeGraniteAuthOauthImplOAuthAuthenticationHandlerInfo;
import com.prokarma.pkmst.model.ComAdobeGraniteAuthOauthImplTwitterProviderImplInfo;
import com.prokarma.pkmst.model.ComAdobeGraniteAuthOauthProviderInfo;
import com.prokarma.pkmst.model.ComAdobeGraniteAuthRequirementImplDefaultRequirementHandlerInfo;
import com.prokarma.pkmst.model.ComAdobeGraniteAuthSamlSamlAuthenticationHandlerInfo;
import com.prokarma.pkmst.model.ComAdobeGraniteAuthSsoImplSsoAuthenticationHandlerInfo;
import com.prokarma.pkmst.model.ComAdobeGraniteBundlesHcImplCodeCacheHealthCheckInfo;
import com.prokarma.pkmst.model.ComAdobeGraniteBundlesHcImplCrxdeSupportBundleHealthCheckInfo;
import com.prokarma.pkmst.model.ComAdobeGraniteBundlesHcImplDavExBundleHealthCheckInfo;
import com.prokarma.pkmst.model.ComAdobeGraniteBundlesHcImplInactiveBundlesHealthCheckInfo;
import com.prokarma.pkmst.model.ComAdobeGraniteBundlesHcImplJobsHealthCheckInfo;
import com.prokarma.pkmst.model.ComAdobeGraniteBundlesHcImplSlingGetServletHealthCheckInfo;
import com.prokarma.pkmst.model.ComAdobeGraniteBundlesHcImplSlingJavaScriptHandlerHealthCheckInfo;
import com.prokarma.pkmst.model.ComAdobeGraniteBundlesHcImplSlingJspScriptHandlerHealthCheckInfo;
import com.prokarma.pkmst.model.ComAdobeGraniteBundlesHcImplSlingReferrerFilterHealthCheckInfo;
import com.prokarma.pkmst.model.ComAdobeGraniteBundlesHcImplWebDavBundleHealthCheckInfo;
import com.prokarma.pkmst.model.ComAdobeGraniteCommentsInternalCommentReplicationContentFilterFacInfo;
import com.prokarma.pkmst.model.ComAdobeGraniteCompatrouterImplCompatSwitchingServiceImplInfo;
import com.prokarma.pkmst.model.ComAdobeGraniteCompatrouterImplRoutingConfigInfo;
import com.prokarma.pkmst.model.ComAdobeGraniteCompatrouterImplSwitchMappingConfigInfo;
import com.prokarma.pkmst.model.ComAdobeGraniteConfImplRuntimeAwareConfigurationResourceResolvingInfo;
import com.prokarma.pkmst.model.ComAdobeGraniteContexthubImplContextHubImplInfo;
import com.prokarma.pkmst.model.ComAdobeGraniteCorsImplCORSPolicyImplInfo;
import com.prokarma.pkmst.model.ComAdobeGraniteCsrfImplCSRFFilterInfo;
import com.prokarma.pkmst.model.ComAdobeGraniteCsrfImplCSRFServletInfo;
import com.prokarma.pkmst.model.ComAdobeGraniteDistributionCoreImplCryptoDistributionTransportSeInfo;
import com.prokarma.pkmst.model.ComAdobeGraniteDistributionCoreImplDiffDiffChangesObserverInfo;
import com.prokarma.pkmst.model.ComAdobeGraniteDistributionCoreImplDiffDiffEventListenerInfo;
import com.prokarma.pkmst.model.ComAdobeGraniteDistributionCoreImplDistributionToReplicationEvenInfo;
import com.prokarma.pkmst.model.ComAdobeGraniteDistributionCoreImplReplicationAdaptersReplicatInfo;
import com.prokarma.pkmst.model.ComAdobeGraniteDistributionCoreImplReplicationDistributionTransInfo;
import com.prokarma.pkmst.model.ComAdobeGraniteDistributionCoreImplTransportAccessTokenDistribuInfo;
import com.prokarma.pkmst.model.ComAdobeGraniteFragsImplCheckHttpHeaderFlagInfo;
import com.prokarma.pkmst.model.ComAdobeGraniteFragsImplRandomFeatureInfo;
import com.prokarma.pkmst.model.ComAdobeGraniteHttpcacheFileFileCacheStoreInfo;
import com.prokarma.pkmst.model.ComAdobeGraniteHttpcacheImplOuterCacheFilterInfo;
import com.prokarma.pkmst.model.ComAdobeGraniteI18nImplBundlePseudoTranslationsInfo;
import com.prokarma.pkmst.model.ComAdobeGraniteI18nImplPreferencesLocaleResolverServiceInfo;
import com.prokarma.pkmst.model.ComAdobeGraniteInfocollectorInfoCollectorInfo;
import com.prokarma.pkmst.model.ComAdobeGraniteJettySslInternalGraniteSslConnectorFactoryInfo;
import com.prokarma.pkmst.model.ComAdobeGraniteLicenseImplLicenseCheckFilterInfo;
import com.prokarma.pkmst.model.ComAdobeGraniteLoggingImplLogAnalyserImplInfo;
import com.prokarma.pkmst.model.ComAdobeGraniteLoggingImplLogErrorHealthCheckInfo;
import com.prokarma.pkmst.model.ComAdobeGraniteMaintenanceCrxImplDataStoreGarbageCollectionTaskInfo;
import com.prokarma.pkmst.model.ComAdobeGraniteMaintenanceCrxImplLuceneBinariesCleanupTaskInfo;
import com.prokarma.pkmst.model.ComAdobeGraniteMaintenanceCrxImplRevisionCleanupTaskInfo;
import com.prokarma.pkmst.model.ComAdobeGraniteMonitoringImplScriptConfigImplInfo;
import com.prokarma.pkmst.model.ComAdobeGraniteOauthServerAuthImplOAuth2ServerAuthenticationHanInfo;
import com.prokarma.pkmst.model.ComAdobeGraniteOauthServerImplAccessTokenCleanupTaskInfo;
import com.prokarma.pkmst.model.ComAdobeGraniteOauthServerImplOAuth2ClientRevocationServletInfo;
import com.prokarma.pkmst.model.ComAdobeGraniteOauthServerImplOAuth2RevocationEndpointServletInfo;
import com.prokarma.pkmst.model.ComAdobeGraniteOauthServerImplOAuth2TokenEndpointServletInfo;
import com.prokarma.pkmst.model.ComAdobeGraniteOauthServerImplOAuth2TokenRevocationServletInfo;
import com.prokarma.pkmst.model.ComAdobeGraniteOffloadingImplOffloadingConfiguratorInfo;
import com.prokarma.pkmst.model.ComAdobeGraniteOffloadingImplOffloadingJobClonerInfo;
import com.prokarma.pkmst.model.ComAdobeGraniteOffloadingImplOffloadingJobOffloaderInfo;
import com.prokarma.pkmst.model.ComAdobeGraniteOffloadingImplTransporterOffloadingAgentManagerInfo;
import com.prokarma.pkmst.model.ComAdobeGraniteOffloadingImplTransporterOffloadingDefaultTranspoInfo;
import com.prokarma.pkmst.model.ComAdobeGraniteOmnisearchImplCoreOmniSearchServiceImplInfo;
import com.prokarma.pkmst.model.ComAdobeGraniteOptoutImplOptOutServiceImplInfo;
import com.prokarma.pkmst.model.ComAdobeGraniteQueriesImplHcAsyncIndexHealthCheckInfo;
import com.prokarma.pkmst.model.ComAdobeGraniteQueriesImplHcLargeIndexHealthCheckInfo;
import com.prokarma.pkmst.model.ComAdobeGraniteQueriesImplHcQueriesStatusHealthCheckInfo;
import com.prokarma.pkmst.model.ComAdobeGraniteQueriesImplHcQueryHealthCheckMetricsInfo;
import com.prokarma.pkmst.model.ComAdobeGraniteQueriesImplHcQueryLimitsHealthCheckInfo;
import com.prokarma.pkmst.model.ComAdobeGraniteReplicationHcImplReplicationQueueHealthCheckInfo;
import com.prokarma.pkmst.model.ComAdobeGraniteReplicationHcImplReplicationTransportUsersHealthCInfo;
import com.prokarma.pkmst.model.ComAdobeGraniteRepositoryHcImplAuthorizableNodeNameHealthCheckInfo;
import com.prokarma.pkmst.model.ComAdobeGraniteRepositoryHcImplContentSlingSlingContentHealthCInfo;
import com.prokarma.pkmst.model.ComAdobeGraniteRepositoryHcImplContinuousRGCHealthCheckInfo;
import com.prokarma.pkmst.model.ComAdobeGraniteRepositoryHcImplDefaultAccessUserProfileHealthCheInfo;
import com.prokarma.pkmst.model.ComAdobeGraniteRepositoryHcImplDefaultLoginsHealthCheckInfo;
import com.prokarma.pkmst.model.ComAdobeGraniteRepositoryHcImplDiskSpaceHealthCheckInfo;
import com.prokarma.pkmst.model.ComAdobeGraniteRepositoryHcImplObservationQueueLengthHealthCheckInfo;
import com.prokarma.pkmst.model.ComAdobeGraniteRepositoryImplCommitStatsConfigInfo;
import com.prokarma.pkmst.model.ComAdobeGraniteRepositoryServiceUserConfigurationInfo;
import com.prokarma.pkmst.model.ComAdobeGraniteRequestsLoggingImplHcRequestsStatusHealthCheckImInfo;
import com.prokarma.pkmst.model.ComAdobeGraniteResourcestatusImplCompositeStatusTypeInfo;
import com.prokarma.pkmst.model.ComAdobeGraniteResourcestatusImplStatusResourceProviderImplInfo;
import com.prokarma.pkmst.model.ComAdobeGraniteRestAssetsImplAssetContentDispositionFilterInfo;
import com.prokarma.pkmst.model.ComAdobeGraniteRestImplApiEndpointResourceProviderFactoryImplInfo;
import com.prokarma.pkmst.model.ComAdobeGraniteRestImplServletDefaultGETServletInfo;
import com.prokarma.pkmst.model.ComAdobeGraniteSecurityUserUiInternalServletsSSLConfigurationSInfo;
import com.prokarma.pkmst.model.ComAdobeGraniteSecurityUserUserPropertiesServiceInfo;
import com.prokarma.pkmst.model.ComAdobeGraniteSocialgraphImplSocialGraphFactoryImplInfo;
import com.prokarma.pkmst.model.ComAdobeGraniteSystemMonitoringImplSystemStatsMBeanImplInfo;
import com.prokarma.pkmst.model.ComAdobeGraniteTaskmanagementImplJcrTaskAdapterFactoryInfo;
import com.prokarma.pkmst.model.ComAdobeGraniteTaskmanagementImplJcrTaskArchiveServiceInfo;
import com.prokarma.pkmst.model.ComAdobeGraniteTaskmanagementImplPurgeTaskPurgeMaintenanceTaskInfo;
import com.prokarma.pkmst.model.ComAdobeGraniteTaskmanagementImplServiceTaskManagerAdapterFactorInfo;
import com.prokarma.pkmst.model.ComAdobeGraniteThreaddumpThreadDumpCollectorInfo;
import com.prokarma.pkmst.model.ComAdobeGraniteTranslationConnectorMsftCoreImplMicrosoftTranslInfo;
import com.prokarma.pkmst.model.ComAdobeGraniteTranslationCoreImplTranslationManagerImplInfo;
import com.prokarma.pkmst.model.ComAdobeGraniteUiClientlibsImplHtmlLibraryManagerImplInfo;
import com.prokarma.pkmst.model.ComAdobeGraniteWorkflowConsoleFragsWorkflowWithdrawFeatureInfo;
import com.prokarma.pkmst.model.ComAdobeGraniteWorkflowConsolePublishWorkflowPublishEventServiceInfo;
import com.prokarma.pkmst.model.ComAdobeGraniteWorkflowCoreJcrWorkflowBucketManagerInfo;
import com.prokarma.pkmst.model.ComAdobeGraniteWorkflowCoreJobExternalProcessJobHandlerInfo;
import com.prokarma.pkmst.model.ComAdobeGraniteWorkflowCoreJobJobHandlerInfo;
import com.prokarma.pkmst.model.ComAdobeGraniteWorkflowCoreOffloadingWorkflowOffloadingJobConsumInfo;
import com.prokarma.pkmst.model.ComAdobeGraniteWorkflowCorePayloadMapCacheInfo;
import com.prokarma.pkmst.model.ComAdobeGraniteWorkflowCorePayloadmapPayloadMoveListenerInfo;
import com.prokarma.pkmst.model.ComAdobeGraniteWorkflowCoreWorkflowConfigInfo;
import com.prokarma.pkmst.model.ComAdobeGraniteWorkflowCoreWorkflowSessionFactoryInfo;
import com.prokarma.pkmst.model.ComAdobeGraniteWorkflowPurgeSchedulerInfo;
import com.prokarma.pkmst.model.ComAdobeOctopusNcommBootstrapInfo;
import com.prokarma.pkmst.model.ComAdobeSocialIntegrationsLivefyreUserPingforpullImplPingPullSInfo;
import com.prokarma.pkmst.model.ComAdobeXmpWorkerFilesNcommXMPFilesNCommInfo;
import com.prokarma.pkmst.model.ComDayCommonsDatasourceJdbcpoolJdbcPoolServiceInfo;
import com.prokarma.pkmst.model.ComDayCommonsHttpclientInfo;
import com.prokarma.pkmst.model.ComDayCqAnalyticsImplStorePropertiesChangeListenerInfo;
import com.prokarma.pkmst.model.ComDayCqAnalyticsSitecatalystImplExporterClassificationsExporteInfo;
import com.prokarma.pkmst.model.ComDayCqAnalyticsSitecatalystImplImporterReportImporterInfo;
import com.prokarma.pkmst.model.ComDayCqAnalyticsSitecatalystImplSitecatalystAdapterFactoryInfo;
import com.prokarma.pkmst.model.ComDayCqAnalyticsSitecatalystImplSitecatalystHttpClientImplInfo;
import com.prokarma.pkmst.model.ComDayCqAnalyticsTestandtargetImplAccountOptionsUpdaterInfo;
import com.prokarma.pkmst.model.ComDayCqAnalyticsTestandtargetImplDeleteAuthorActivityListenerInfo;
import com.prokarma.pkmst.model.ComDayCqAnalyticsTestandtargetImplPushAuthorCampaignPageListenerInfo;
import com.prokarma.pkmst.model.ComDayCqAnalyticsTestandtargetImplSegmentImporterInfo;
import com.prokarma.pkmst.model.ComDayCqAnalyticsTestandtargetImplServiceWebServiceImplInfo;
import com.prokarma.pkmst.model.ComDayCqAnalyticsTestandtargetImplServletsAdminServerServletInfo;
import com.prokarma.pkmst.model.ComDayCqAnalyticsTestandtargetImplTestandtargetHttpClientImplInfo;
import com.prokarma.pkmst.model.ComDayCqAuthImplCugCugSupportImplInfo;
import com.prokarma.pkmst.model.ComDayCqAuthImplLoginSelectorHandlerInfo;
import com.prokarma.pkmst.model.ComDayCqCommonsImplExternalizerImplInfo;
import com.prokarma.pkmst.model.ComDayCqCommonsServletsRootMappingServletInfo;
import com.prokarma.pkmst.model.ComDayCqCompatCodeupgradeImplCodeUpgradeExecutionConditionCheckeInfo;
import com.prokarma.pkmst.model.ComDayCqCompatCodeupgradeImplUpgradeTaskIgnoreListInfo;
import com.prokarma.pkmst.model.ComDayCqCompatCodeupgradeImplVersionRangeTaskIgnorelistInfo;
import com.prokarma.pkmst.model.ComDayCqContentsyncImplContentSyncManagerImplInfo;
import com.prokarma.pkmst.model.ComDayCqDamCommonsHandlerStandardImageHandlerInfo;
import com.prokarma.pkmst.model.ComDayCqDamCommonsMetadataXmpFilterBlackWhiteInfo;
import com.prokarma.pkmst.model.ComDayCqDamCommonsUtilImplAssetCacheImplInfo;
import com.prokarma.pkmst.model.ComDayCqDamCoreImplAnnotationPdfAnnotationPdfConfigInfo;
import com.prokarma.pkmst.model.ComDayCqDamCoreImplAssetMoveListenerInfo;
import com.prokarma.pkmst.model.ComDayCqDamCoreImplAssethomeAssetHomePageConfigurationInfo;
import com.prokarma.pkmst.model.ComDayCqDamCoreImplAssetlinkshareAdhocAssetShareProxyServletInfo;
import com.prokarma.pkmst.model.ComDayCqDamCoreImplCacheCQBufferedImageCacheInfo;
import com.prokarma.pkmst.model.ComDayCqDamCoreImplDamChangeEventListenerInfo;
import com.prokarma.pkmst.model.ComDayCqDamCoreImplDamEventPurgeServiceInfo;
import com.prokarma.pkmst.model.ComDayCqDamCoreImplDamEventRecorderImplInfo;
import com.prokarma.pkmst.model.ComDayCqDamCoreImplEventDamEventAuditListenerInfo;
import com.prokarma.pkmst.model.ComDayCqDamCoreImplExpiryNotificationJobImplInfo;
import com.prokarma.pkmst.model.ComDayCqDamCoreImplFoldermetadataschemaFolderMetadataSchemaFeatInfo;
import com.prokarma.pkmst.model.ComDayCqDamCoreImplGfxCommonsGfxRendererInfo;
import com.prokarma.pkmst.model.ComDayCqDamCoreImplHandlerEPSFormatHandlerInfo;
import com.prokarma.pkmst.model.ComDayCqDamCoreImplHandlerIndesignFormatHandlerInfo;
import com.prokarma.pkmst.model.ComDayCqDamCoreImplHandlerJpegHandlerInfo;
import com.prokarma.pkmst.model.ComDayCqDamCoreImplHandlerXmpNCommXMPHandlerInfo;
import com.prokarma.pkmst.model.ComDayCqDamCoreImplJmxAssetIndexUpdateMonitorInfo;
import com.prokarma.pkmst.model.ComDayCqDamCoreImplJmxAssetMigrationMBeanImplInfo;
import com.prokarma.pkmst.model.ComDayCqDamCoreImplJmxAssetUpdateMonitorImplInfo;
import com.prokarma.pkmst.model.ComDayCqDamCoreImplJobsMetadataexportAsyncMetadataExportConfigInfo;
import com.prokarma.pkmst.model.ComDayCqDamCoreImplJobsMetadataimportAsyncMetadataImportConfigInfo;
import com.prokarma.pkmst.model.ComDayCqDamCoreImplLightboxLightboxServletInfo;
import com.prokarma.pkmst.model.ComDayCqDamCoreImplMetadataEditorSelectComponentHandlerInfo;
import com.prokarma.pkmst.model.ComDayCqDamCoreImplMimeTypeAssetUploadRestrictionHelperInfo;
import com.prokarma.pkmst.model.ComDayCqDamCoreImplMimeTypeDamMimeTypeServiceImplInfo;
import com.prokarma.pkmst.model.ComDayCqDamCoreImplMissingMetadataNotificationJobInfo;
import com.prokarma.pkmst.model.ComDayCqDamCoreImplProcessSendTransientWorkflowCompletedEmailPrInfo;
import com.prokarma.pkmst.model.ComDayCqDamCoreImplProcessTextExtractionProcessInfo;
import com.prokarma.pkmst.model.ComDayCqDamCoreImplRenditionMakerImplInfo;
import com.prokarma.pkmst.model.ComDayCqDamCoreImplReportsReportExportServiceInfo;
import com.prokarma.pkmst.model.ComDayCqDamCoreImplReportsReportPurgeServiceInfo;
import com.prokarma.pkmst.model.ComDayCqDamCoreImplServletAssetDownloadServletInfo;
import com.prokarma.pkmst.model.ComDayCqDamCoreImplServletAssetStatusServletInfo;
import com.prokarma.pkmst.model.ComDayCqDamCoreImplServletAssetXMPSearchServletInfo;
import com.prokarma.pkmst.model.ComDayCqDamCoreImplServletBatchMetadataServletInfo;
import com.prokarma.pkmst.model.ComDayCqDamCoreImplServletBinaryProviderServletInfo;
import com.prokarma.pkmst.model.ComDayCqDamCoreImplServletCollectionServletInfo;
import com.prokarma.pkmst.model.ComDayCqDamCoreImplServletCollectionsServletInfo;
import com.prokarma.pkmst.model.ComDayCqDamCoreImplServletCompanionServletInfo;
import com.prokarma.pkmst.model.ComDayCqDamCoreImplServletCreateAssetServletInfo;
import com.prokarma.pkmst.model.ComDayCqDamCoreImplServletDamContentDispositionFilterInfo;
import com.prokarma.pkmst.model.ComDayCqDamCoreImplServletGuidLookupFilterInfo;
import com.prokarma.pkmst.model.ComDayCqDamCoreImplServletHealthCheckServletInfo;
import com.prokarma.pkmst.model.ComDayCqDamCoreImplServletMetadataGetServletInfo;
import com.prokarma.pkmst.model.ComDayCqDamCoreImplServletMultipleLicenseAcceptServletInfo;
import com.prokarma.pkmst.model.ComDayCqDamCoreImplServletResourceCollectionServletInfo;
import com.prokarma.pkmst.model.ComDayCqDamCoreImplUiPreviewFolderPreviewUpdaterImplInfo;
import com.prokarma.pkmst.model.ComDayCqDamCoreImplUnzipUnzipConfigInfo;
import com.prokarma.pkmst.model.ComDayCqDamCoreProcessExifToolExtractMetadataProcessInfo;
import com.prokarma.pkmst.model.ComDayCqDamCoreProcessExtractMetadataProcessInfo;
import com.prokarma.pkmst.model.ComDayCqDamCoreProcessMetadataProcessorProcessInfo;
import com.prokarma.pkmst.model.ComDayCqDamHandlerFfmpegLocatorImplInfo;
import com.prokarma.pkmst.model.ComDayCqDamHandlerGibsonFontmanagerImplFontManagerServiceImplInfo;
import com.prokarma.pkmst.model.ComDayCqDamHandlerStandardPdfPdfHandlerInfo;
import com.prokarma.pkmst.model.ComDayCqDamHandlerStandardPsPostScriptHandlerInfo;
import com.prokarma.pkmst.model.ComDayCqDamHandlerStandardPsdPsdHandlerInfo;
import com.prokarma.pkmst.model.ComDayCqDamIdsImplIDSJobProcessorInfo;
import com.prokarma.pkmst.model.ComDayCqDamIdsImplIDSPoolManagerImplInfo;
import com.prokarma.pkmst.model.ComDayCqDamInddImplHandlerIndesignXMPHandlerInfo;
import com.prokarma.pkmst.model.ComDayCqDamInddImplServletSnippetCreationServletInfo;
import com.prokarma.pkmst.model.ComDayCqDamInddProcessINDDMediaExtractProcessInfo;
import com.prokarma.pkmst.model.ComDayCqDamPerformanceInternalAssetPerformanceDataHandlerImplInfo;
import com.prokarma.pkmst.model.ComDayCqDamPerformanceInternalAssetPerformanceReportSyncJobInfo;
import com.prokarma.pkmst.model.ComDayCqDamPimImplSourcingUploadProcessProductAssetsUploadProInfo;
import com.prokarma.pkmst.model.ComDayCqDamS7damCommonAnalyticsImplS7damDynamicMediaConfigEvenInfo;
import com.prokarma.pkmst.model.ComDayCqDamS7damCommonAnalyticsImplSiteCatalystReportRunnerInfo;
import com.prokarma.pkmst.model.ComDayCqDamS7damCommonPostServletsSetCreateHandlerInfo;
import com.prokarma.pkmst.model.ComDayCqDamS7damCommonPostServletsSetModifyHandlerInfo;
import com.prokarma.pkmst.model.ComDayCqDamS7damCommonProcessVideoThumbnailDownloadProcessInfo;
import com.prokarma.pkmst.model.ComDayCqDamS7damCommonS7damDamChangeEventListenerInfo;
import com.prokarma.pkmst.model.ComDayCqDamS7damCommonServletsS7damProductInfoServletInfo;
import com.prokarma.pkmst.model.ComDayCqDamS7damCommonVideoImplVideoProxyClientServiceImplInfo;
import com.prokarma.pkmst.model.ComDayCqDamScene7ImplScene7APIClientImplInfo;
import com.prokarma.pkmst.model.ComDayCqDamScene7ImplScene7AssetMimeTypeServiceImplInfo;
import com.prokarma.pkmst.model.ComDayCqDamScene7ImplScene7ConfigurationEventListenerInfo;
import com.prokarma.pkmst.model.ComDayCqDamScene7ImplScene7DamChangeEventListenerInfo;
import com.prokarma.pkmst.model.ComDayCqDamScene7ImplScene7FlashTemplatesServiceImplInfo;
import com.prokarma.pkmst.model.ComDayCqDamScene7ImplScene7UploadServiceImplInfo;
import com.prokarma.pkmst.model.ComDayCqDamStockIntegrationImplCacheStockCacheConfigurationSerInfo;
import com.prokarma.pkmst.model.ComDayCqDamStockIntegrationImplConfigurationStockConfigurationInfo;
import com.prokarma.pkmst.model.ComDayCqDamVideoImplServletVideoTestServletInfo;
import com.prokarma.pkmst.model.ComDayCqExtwidgetServletsImageSpriteServletInfo;
import com.prokarma.pkmst.model.ComDayCqImageInternalFontFontHelperInfo;
import com.prokarma.pkmst.model.ComDayCqJcrclustersupportClusterStartLevelControllerInfo;
import com.prokarma.pkmst.model.ComDayCqMailerDefaultMailServiceInfo;
import com.prokarma.pkmst.model.ComDayCqMailerImplCqMailingServiceInfo;
import com.prokarma.pkmst.model.ComDayCqMailerImplEmailCqEmailTemplateFactoryInfo;
import com.prokarma.pkmst.model.ComDayCqMailerImplEmailCqRetrieverTemplateFactoryInfo;
import com.prokarma.pkmst.model.ComDayCqMcmCampaignImplIntegrationConfigImplInfo;
import com.prokarma.pkmst.model.ComDayCqMcmCampaignImporterPersonalizedTextHandlerFactoryInfo;
import com.prokarma.pkmst.model.ComDayCqMcmCoreNewsletterNewsletterEmailServiceImplInfo;
import com.prokarma.pkmst.model.ComDayCqMcmImplMCMConfigurationInfo;
import com.prokarma.pkmst.model.ComDayCqMcmLandingpageParserTaghandlersCtaClickThroughComponenInfo;
import com.prokarma.pkmst.model.ComDayCqMcmLandingpageParserTaghandlersCtaGraphicalClickThrougInfo;
import com.prokarma.pkmst.model.ComDayCqMcmLandingpageParserTaghandlersCtaLeadFormCTAComponentInfo;
import com.prokarma.pkmst.model.ComDayCqMcmLandingpageParserTaghandlersMboxMBoxExperienceTagHaInfo;
import com.prokarma.pkmst.model.ComDayCqMcmLandingpageParserTaghandlersMboxTargetComponentTagHInfo;
import com.prokarma.pkmst.model.ComDayCqNotificationImplNotificationServiceImplInfo;
import com.prokarma.pkmst.model.ComDayCqPersonalizationImplServletsTargetingConfigurationServletInfo;
import com.prokarma.pkmst.model.ComDayCqPollingImporterImplManagedPollConfigImplInfo;
import com.prokarma.pkmst.model.ComDayCqPollingImporterImplManagedPollingImporterImplInfo;
import com.prokarma.pkmst.model.ComDayCqPollingImporterImplPollingImporterImplInfo;
import com.prokarma.pkmst.model.ComDayCqReplicationAuditReplicationEventListenerInfo;
import com.prokarma.pkmst.model.ComDayCqReplicationContentStaticContentBuilderInfo;
import com.prokarma.pkmst.model.ComDayCqReplicationImplAgentManagerImplInfo;
import com.prokarma.pkmst.model.ComDayCqReplicationImplContentDurboBinaryLessContentBuilderInfo;
import com.prokarma.pkmst.model.ComDayCqReplicationImplContentDurboDurboImportConfigurationProvInfo;
import com.prokarma.pkmst.model.ComDayCqReplicationImplReplicationContentFactoryProviderImplInfo;
import com.prokarma.pkmst.model.ComDayCqReplicationImplReplicationReceiverImplInfo;
import com.prokarma.pkmst.model.ComDayCqReplicationImplReplicatorImplInfo;
import com.prokarma.pkmst.model.ComDayCqReplicationImplReverseReplicatorInfo;
import com.prokarma.pkmst.model.ComDayCqReplicationImplTransportBinaryLessTransportHandlerInfo;
import com.prokarma.pkmst.model.ComDayCqReplicationImplTransportHttpInfo;
import com.prokarma.pkmst.model.ComDayCqReportingImplCacheCacheImplInfo;
import com.prokarma.pkmst.model.ComDayCqReportingImplConfigServiceImplInfo;
import com.prokarma.pkmst.model.ComDayCqReportingImplRLogAnalyzerInfo;
import com.prokarma.pkmst.model.ComDayCqRewriterLinkcheckerImplLinkCheckerImplInfo;
import com.prokarma.pkmst.model.ComDayCqRewriterLinkcheckerImplLinkCheckerTaskInfo;
import com.prokarma.pkmst.model.ComDayCqRewriterLinkcheckerImplLinkCheckerTransformerFactoryInfo;
import com.prokarma.pkmst.model.ComDayCqRewriterLinkcheckerImplLinkInfoStorageImplInfo;
import com.prokarma.pkmst.model.ComDayCqRewriterProcessorImplHtmlParserFactoryInfo;
import com.prokarma.pkmst.model.ComDayCqSearchImplBuilderQueryBuilderImplInfo;
import com.prokarma.pkmst.model.ComDayCqSearchSuggestImplSuggestionIndexManagerImplInfo;
import com.prokarma.pkmst.model.ComDayCqSearchpromoteImplPublishSearchPromoteConfigHandlerInfo;
import com.prokarma.pkmst.model.ComDayCqSearchpromoteImplSearchPromoteServiceImplInfo;
import com.prokarma.pkmst.model.ComDayCqSecurityACLSetupInfo;
import com.prokarma.pkmst.model.ComDayCqStatisticsImplStatisticsServiceImplInfo;
import com.prokarma.pkmst.model.ComDayCqTaggingImplJcrTagManagerFactoryImplInfo;
import com.prokarma.pkmst.model.ComDayCqTaggingImplSearchTagPredicateEvaluatorInfo;
import com.prokarma.pkmst.model.ComDayCqTaggingImplTagGarbageCollectorInfo;
import com.prokarma.pkmst.model.ComDayCqWcmContentsyncImplHandlerPagesUpdateHandlerInfo;
import com.prokarma.pkmst.model.ComDayCqWcmContentsyncImplRewriterPathRewriterTransformerFactorInfo;
import com.prokarma.pkmst.model.ComDayCqWcmCoreImplAuthoringUIModeServiceImplInfo;
import com.prokarma.pkmst.model.ComDayCqWcmCoreImplCommandsWCMCommandServletInfo;
import com.prokarma.pkmst.model.ComDayCqWcmCoreImplDevicedetectionDeviceIdentificationModeImplInfo;
import com.prokarma.pkmst.model.ComDayCqWcmCoreImplEventPageEventAuditListenerInfo;
import com.prokarma.pkmst.model.ComDayCqWcmCoreImplEventPagePostProcessorInfo;
import com.prokarma.pkmst.model.ComDayCqWcmCoreImplEventRepositoryChangeEventListenerInfo;
import com.prokarma.pkmst.model.ComDayCqWcmCoreImplEventTemplatePostProcessorInfo;
import com.prokarma.pkmst.model.ComDayCqWcmCoreImplLanguageManagerImplInfo;
import com.prokarma.pkmst.model.ComDayCqWcmCoreImplLinkCheckerConfigurationFactoryImplInfo;
import com.prokarma.pkmst.model.ComDayCqWcmCoreImplPagePageInfoAggregatorImplInfo;
import com.prokarma.pkmst.model.ComDayCqWcmCoreImplPagePageManagerFactoryImplInfo;
import com.prokarma.pkmst.model.ComDayCqWcmCoreImplReferencesContentContentReferenceConfigInfo;
import com.prokarma.pkmst.model.ComDayCqWcmCoreImplServletsContentfinderAssetViewHandlerInfo;
import com.prokarma.pkmst.model.ComDayCqWcmCoreImplServletsContentfinderConnectorConnectorVieInfo;
import com.prokarma.pkmst.model.ComDayCqWcmCoreImplServletsContentfinderPageViewHandlerInfo;
import com.prokarma.pkmst.model.ComDayCqWcmCoreImplServletsFindReplaceServletInfo;
import com.prokarma.pkmst.model.ComDayCqWcmCoreImplServletsReferenceSearchServletInfo;
import com.prokarma.pkmst.model.ComDayCqWcmCoreImplServletsThumbnailServletInfo;
import com.prokarma.pkmst.model.ComDayCqWcmCoreImplUtilsDefaultPageNameValidatorInfo;
import com.prokarma.pkmst.model.ComDayCqWcmCoreImplVariantsPageVariantsProviderImplInfo;
import com.prokarma.pkmst.model.ComDayCqWcmCoreImplVersionManagerImplInfo;
import com.prokarma.pkmst.model.ComDayCqWcmCoreImplVersionPurgeTaskInfo;
import com.prokarma.pkmst.model.ComDayCqWcmCoreImplWCMDebugFilterInfo;
import com.prokarma.pkmst.model.ComDayCqWcmCoreImplWCMDeveloperModeFilterInfo;
import com.prokarma.pkmst.model.ComDayCqWcmCoreImplWarpTimeWarpFilterInfo;
import com.prokarma.pkmst.model.ComDayCqWcmCoreMvtMVTStatisticsImplInfo;
import com.prokarma.pkmst.model.ComDayCqWcmCoreStatsPageViewStatisticsImplInfo;
import com.prokarma.pkmst.model.ComDayCqWcmCoreWCMRequestFilterInfo;
import com.prokarma.pkmst.model.ComDayCqWcmDesignimporterDesignPackageImporterInfo;
import com.prokarma.pkmst.model.ComDayCqWcmDesignimporterImplCanvasBuilderImplInfo;
import com.prokarma.pkmst.model.ComDayCqWcmDesignimporterImplCanvasPageDeleteHandlerInfo;
import com.prokarma.pkmst.model.ComDayCqWcmDesignimporterImplEntryPreprocessorImplInfo;
import com.prokarma.pkmst.model.ComDayCqWcmDesignimporterImplMobileCanvasBuilderImplInfo;
import com.prokarma.pkmst.model.ComDayCqWcmDesignimporterParserTaghandlersFactoryCanvasComponeInfo;
import com.prokarma.pkmst.model.ComDayCqWcmDesignimporterParserTaghandlersFactoryDefaultComponInfo;
import com.prokarma.pkmst.model.ComDayCqWcmDesignimporterParserTaghandlersFactoryDefaultTagHanInfo;
import com.prokarma.pkmst.model.ComDayCqWcmDesignimporterParserTaghandlersFactoryHeadTagHandleInfo;
import com.prokarma.pkmst.model.ComDayCqWcmDesignimporterParserTaghandlersFactoryIFrameTagHandInfo;
import com.prokarma.pkmst.model.ComDayCqWcmDesignimporterParserTaghandlersFactoryImageComponenInfo;
import com.prokarma.pkmst.model.ComDayCqWcmDesignimporterParserTaghandlersFactoryImgTagHandlerInfo;
import com.prokarma.pkmst.model.ComDayCqWcmDesignimporterParserTaghandlersFactoryInlineScriptTInfo;
import com.prokarma.pkmst.model.ComDayCqWcmDesignimporterParserTaghandlersFactoryLinkTagHandleInfo;
import com.prokarma.pkmst.model.ComDayCqWcmDesignimporterParserTaghandlersFactoryMetaTagHandleInfo;
import com.prokarma.pkmst.model.ComDayCqWcmDesignimporterParserTaghandlersFactoryNonScriptTagHInfo;
import com.prokarma.pkmst.model.ComDayCqWcmDesignimporterParserTaghandlersFactoryParsysComponeInfo;
import com.prokarma.pkmst.model.ComDayCqWcmDesignimporterParserTaghandlersFactoryScriptTagHandInfo;
import com.prokarma.pkmst.model.ComDayCqWcmDesignimporterParserTaghandlersFactoryStyleTagHandlInfo;
import com.prokarma.pkmst.model.ComDayCqWcmDesignimporterParserTaghandlersFactoryTextComponentInfo;
import com.prokarma.pkmst.model.ComDayCqWcmDesignimporterParserTaghandlersFactoryTitleComponenInfo;
import com.prokarma.pkmst.model.ComDayCqWcmDesignimporterParserTaghandlersFactoryTitleTagHandlInfo;
import com.prokarma.pkmst.model.ComDayCqWcmFoundationFormsImplFormChooserServletInfo;
import com.prokarma.pkmst.model.ComDayCqWcmFoundationFormsImplFormParagraphPostProcessorInfo;
import com.prokarma.pkmst.model.ComDayCqWcmFoundationFormsImplFormsHandlingServletInfo;
import com.prokarma.pkmst.model.ComDayCqWcmFoundationFormsImplMailServletInfo;
import com.prokarma.pkmst.model.ComDayCqWcmFoundationImplAdaptiveImageComponentServletInfo;
import com.prokarma.pkmst.model.ComDayCqWcmFoundationImplHTTPAuthHandlerInfo;
import com.prokarma.pkmst.model.ComDayCqWcmFoundationImplPageImpressionsTrackerInfo;
import com.prokarma.pkmst.model.ComDayCqWcmFoundationImplPageRedirectServletInfo;
import com.prokarma.pkmst.model.ComDayCqWcmFoundationSecurityImplDefaultAttachmentTypeBlacklistInfo;
import com.prokarma.pkmst.model.ComDayCqWcmFoundationSecurityImplSaferSlingPostValidatorImplInfo;
import com.prokarma.pkmst.model.ComDayCqWcmMobileCoreImplDeviceDeviceInfoTransformerFactoryInfo;
import com.prokarma.pkmst.model.ComDayCqWcmMobileCoreImplRedirectRedirectFilterInfo;
import com.prokarma.pkmst.model.ComDayCqWcmMsmImplActionsContentCopyActionFactoryInfo;
import com.prokarma.pkmst.model.ComDayCqWcmMsmImplActionsContentDeleteActionFactoryInfo;
import com.prokarma.pkmst.model.ComDayCqWcmMsmImplActionsContentUpdateActionFactoryInfo;
import com.prokarma.pkmst.model.ComDayCqWcmMsmImplActionsOrderChildrenActionFactoryInfo;
import com.prokarma.pkmst.model.ComDayCqWcmMsmImplActionsPageMoveActionFactoryInfo;
import com.prokarma.pkmst.model.ComDayCqWcmMsmImplActionsReferencesUpdateActionFactoryInfo;
import com.prokarma.pkmst.model.ComDayCqWcmMsmImplActionsVersionCopyActionFactoryInfo;
import com.prokarma.pkmst.model.ComDayCqWcmMsmImplLiveRelationshipManagerImplInfo;
import com.prokarma.pkmst.model.ComDayCqWcmMsmImplRolloutManagerImplInfo;
import com.prokarma.pkmst.model.ComDayCqWcmMsmImplServletsAuditLogServletInfo;
import com.prokarma.pkmst.model.ComDayCqWcmNotificationEmailImplEmailChannelInfo;
import com.prokarma.pkmst.model.ComDayCqWcmNotificationImplNotificationManagerImplInfo;
import com.prokarma.pkmst.model.ComDayCqWcmScriptingImplBVPManagerInfo;
import com.prokarma.pkmst.model.ComDayCqWcmUndoUndoConfigInfo;
import com.prokarma.pkmst.model.ComDayCqWcmWebservicesupportImplReplicationEventListenerInfo;
import com.prokarma.pkmst.model.ComDayCqWcmWorkflowImplWcmWorkflowServiceImplInfo;
import com.prokarma.pkmst.model.ComDayCqWcmWorkflowImplWorkflowPackageInfoProviderInfo;
import com.prokarma.pkmst.model.ComDayCqWidgetImplHtmlLibraryManagerImplInfo;
import com.prokarma.pkmst.model.ComDayCqWidgetImplWidgetExtensionProviderImplInfo;
import com.prokarma.pkmst.model.ComDayCqWorkflowImplEmailEMailNotificationServiceInfo;
import com.prokarma.pkmst.model.ComDayCqWorkflowImplEmailTaskEMailNotificationServiceInfo;
import com.prokarma.pkmst.model.ComDayCrxSecurityTokenImplImplTokenAuthenticationHandlerInfo;
import com.prokarma.pkmst.model.ComDayCrxSecurityTokenImplTokenCleanupTaskInfo;
import com.prokarma.pkmst.model.GuideLocalizationServiceInfo;
import com.prokarma.pkmst.model.MessagingUserComponentFactoryInfo;
import com.prokarma.pkmst.model.OrgApacheAriesJmxFrameworkStateConfigInfo;
import com.prokarma.pkmst.model.OrgApacheFelixEventadminImplEventAdminInfo;
import com.prokarma.pkmst.model.OrgApacheFelixHttpInfo;
import com.prokarma.pkmst.model.OrgApacheFelixHttpSslfilterSslFilterInfo;
import com.prokarma.pkmst.model.OrgApacheFelixJaasConfigurationFactoryInfo;
import com.prokarma.pkmst.model.OrgApacheFelixJaasConfigurationSpiInfo;
import com.prokarma.pkmst.model.OrgApacheFelixScrScrServiceInfo;
import com.prokarma.pkmst.model.OrgApacheFelixSystemreadyImplComponentsCheckInfo;
import com.prokarma.pkmst.model.OrgApacheFelixSystemreadyImplFrameworkStartCheckInfo;
import com.prokarma.pkmst.model.OrgApacheFelixSystemreadyImplServicesCheckInfo;
import com.prokarma.pkmst.model.OrgApacheFelixSystemreadyImplServletSystemAliveServletInfo;
import com.prokarma.pkmst.model.OrgApacheFelixSystemreadyImplServletSystemReadyServletInfo;
import com.prokarma.pkmst.model.OrgApacheFelixSystemreadySystemReadyMonitorInfo;
import com.prokarma.pkmst.model.OrgApacheFelixWebconsoleInternalServletOsgiManagerInfo;
import com.prokarma.pkmst.model.OrgApacheFelixWebconsolePluginsEventInternalPluginServletInfo;
import com.prokarma.pkmst.model.OrgApacheFelixWebconsolePluginsMemoryusageInternalMemoryUsageCoInfo;
import com.prokarma.pkmst.model.OrgApacheHttpProxyconfiguratorInfo;
import com.prokarma.pkmst.model.OrgApacheJackrabbitOakPluginsBlobDatastoreDataStoreTextProviderInfo;
import com.prokarma.pkmst.model.OrgApacheJackrabbitOakPluginsBlobDatastoreFileDataStoreInfo;
import com.prokarma.pkmst.model.OrgApacheJackrabbitOakPluginsDocumentDocumentNodeStoreServiceInfo;
import com.prokarma.pkmst.model.OrgApacheJackrabbitOakPluginsDocumentDocumentNodeStoreServicePreInfo;
import com.prokarma.pkmst.model.OrgApacheJackrabbitOakPluginsDocumentSecondarySecondaryStoreCacInfo;
import com.prokarma.pkmst.model.OrgApacheJackrabbitOakPluginsIndexAsyncIndexerServiceInfo;
import com.prokarma.pkmst.model.OrgApacheJackrabbitOakPluginsIndexLuceneLuceneIndexProviderServInfo;
import com.prokarma.pkmst.model.OrgApacheJackrabbitOakPluginsIndexSolrOsgiEmbeddedSolrServerCoInfo;
import com.prokarma.pkmst.model.OrgApacheJackrabbitOakPluginsIndexSolrOsgiNodeStateSolrServersInfo;
import com.prokarma.pkmst.model.OrgApacheJackrabbitOakPluginsIndexSolrOsgiOakSolrConfigurationInfo;
import com.prokarma.pkmst.model.OrgApacheJackrabbitOakPluginsIndexSolrOsgiRemoteSolrServerConfInfo;
import com.prokarma.pkmst.model.OrgApacheJackrabbitOakPluginsIndexSolrOsgiSolrQueryIndexProvidInfo;
import com.prokarma.pkmst.model.OrgApacheJackrabbitOakPluginsIndexSolrOsgiSolrServerProviderSeInfo;
import com.prokarma.pkmst.model.OrgApacheJackrabbitOakPluginsMetricStatisticsProviderFactoryInfo;
import com.prokarma.pkmst.model.OrgApacheJackrabbitOakPluginsObservationChangeCollectorProviderInfo;
import com.prokarma.pkmst.model.OrgApacheJackrabbitOakQueryQueryEngineSettingsServiceInfo;
import com.prokarma.pkmst.model.OrgApacheJackrabbitOakSecurityAuthenticationAuthenticationConfigInfo;
import com.prokarma.pkmst.model.OrgApacheJackrabbitOakSecurityAuthenticationLdapImplLdapIdentiInfo;
import com.prokarma.pkmst.model.OrgApacheJackrabbitOakSecurityAuthenticationTokenTokenConfiguraInfo;
import com.prokarma.pkmst.model.OrgApacheJackrabbitOakSecurityAuthorizationAuthorizationConfigurInfo;
import com.prokarma.pkmst.model.OrgApacheJackrabbitOakSecurityInternalSecurityProviderRegistratiInfo;
import com.prokarma.pkmst.model.OrgApacheJackrabbitOakSecurityUserRandomAuthorizableNodeNameInfo;
import com.prokarma.pkmst.model.OrgApacheJackrabbitOakSecurityUserUserConfigurationImplInfo;
import com.prokarma.pkmst.model.OrgApacheJackrabbitOakSegmentAzureAzureSegmentStoreServiceInfo;
import com.prokarma.pkmst.model.OrgApacheJackrabbitOakSegmentSegmentNodeStoreFactoryInfo;
import com.prokarma.pkmst.model.OrgApacheJackrabbitOakSegmentSegmentNodeStoreMonitorServiceInfo;
import com.prokarma.pkmst.model.OrgApacheJackrabbitOakSegmentSegmentNodeStoreServiceInfo;
import com.prokarma.pkmst.model.OrgApacheJackrabbitOakSegmentStandbyStoreStandbyStoreServiceInfo;
import com.prokarma.pkmst.model.OrgApacheJackrabbitOakSpiSecurityAuthenticationExternalImplDeInfo;
import com.prokarma.pkmst.model.OrgApacheJackrabbitOakSpiSecurityAuthenticationExternalImplExInfo;
import com.prokarma.pkmst.model.OrgApacheJackrabbitOakSpiSecurityAuthenticationExternalImplPrInfo;
import com.prokarma.pkmst.model.OrgApacheJackrabbitOakSpiSecurityAuthorizationCugImplCugConfiInfo;
import com.prokarma.pkmst.model.OrgApacheJackrabbitOakSpiSecurityAuthorizationCugImplCugExcluInfo;
import com.prokarma.pkmst.model.OrgApacheJackrabbitOakSpiSecurityUserActionDefaultAuthorizableInfo;
import com.prokarma.pkmst.model.OrgApacheJackrabbitVaultPackagingImplPackagingImplInfo;
import com.prokarma.pkmst.model.OrgApacheJackrabbitVaultPackagingRegistryImplFSPackageRegistryInfo;
import com.prokarma.pkmst.model.OrgApacheSlingAuthCoreImplLogoutServletInfo;
import com.prokarma.pkmst.model.OrgApacheSlingCaconfigImplConfigurationBindingsValueProviderInfo;
import com.prokarma.pkmst.model.OrgApacheSlingCaconfigImplConfigurationResolverImplInfo;
import com.prokarma.pkmst.model.OrgApacheSlingCaconfigImplDefDefaultConfigurationInheritanceStraInfo;
import com.prokarma.pkmst.model.OrgApacheSlingCaconfigImplDefDefaultConfigurationPersistenceStraInfo;
import com.prokarma.pkmst.model.OrgApacheSlingCaconfigImplOverrideOsgiConfigurationOverrideProviInfo;
import com.prokarma.pkmst.model.OrgApacheSlingCaconfigImplOverrideSystemPropertyConfigurationOveInfo;
import com.prokarma.pkmst.model.OrgApacheSlingCaconfigManagementImplConfigurationManagementSettiInfo;
import com.prokarma.pkmst.model.OrgApacheSlingCaconfigResourceImplDefDefaultConfigurationResourInfo;
import com.prokarma.pkmst.model.OrgApacheSlingCaconfigResourceImplDefDefaultContextPathStrategyInfo;
import com.prokarma.pkmst.model.OrgApacheSlingCommonsHtmlInternalTagsoupHtmlParserInfo;
import com.prokarma.pkmst.model.OrgApacheSlingCommonsLogLogManagerFactoryConfigInfo;
import com.prokarma.pkmst.model.OrgApacheSlingCommonsLogLogManagerFactoryWriterInfo;
import com.prokarma.pkmst.model.OrgApacheSlingCommonsLogLogManagerInfo;
import com.prokarma.pkmst.model.OrgApacheSlingCommonsMetricsInternalLogReporterInfo;
import com.prokarma.pkmst.model.OrgApacheSlingCommonsMetricsRrd4jImplCodahaleMetricsReporterInfo;
import com.prokarma.pkmst.model.OrgApacheSlingCommonsMimeInternalMimeTypeServiceImplInfo;
import com.prokarma.pkmst.model.OrgApacheSlingCommonsSchedulerImplQuartzSchedulerInfo;
import com.prokarma.pkmst.model.OrgApacheSlingCommonsSchedulerImplSchedulerHealthCheckInfo;
import com.prokarma.pkmst.model.OrgApacheSlingCommonsThreadsImplDefaultThreadPoolFactoryInfo;
import com.prokarma.pkmst.model.OrgApacheSlingDatasourceDataSourceFactoryInfo;
import com.prokarma.pkmst.model.OrgApacheSlingDatasourceJNDIDataSourceFactoryInfo;
import com.prokarma.pkmst.model.OrgApacheSlingDiscoveryOakConfigInfo;
import com.prokarma.pkmst.model.OrgApacheSlingDiscoveryOakSynchronizedClocksHealthCheckInfo;
import com.prokarma.pkmst.model.OrgApacheSlingDistributionAgentImplForwardDistributionAgentFactoInfo;
import com.prokarma.pkmst.model.OrgApacheSlingDistributionAgentImplPrivilegeDistributionRequestAInfo;
import com.prokarma.pkmst.model.OrgApacheSlingDistributionAgentImplQueueDistributionAgentFactoryInfo;
import com.prokarma.pkmst.model.OrgApacheSlingDistributionAgentImplReverseDistributionAgentFactoInfo;
import com.prokarma.pkmst.model.OrgApacheSlingDistributionAgentImplSimpleDistributionAgentFactorInfo;
import com.prokarma.pkmst.model.OrgApacheSlingDistributionAgentImplSyncDistributionAgentFactoryInfo;
import com.prokarma.pkmst.model.OrgApacheSlingDistributionMonitorDistributionQueueHealthCheckInfo;
import com.prokarma.pkmst.model.OrgApacheSlingDistributionPackagingImplExporterAgentDistributioInfo;
import com.prokarma.pkmst.model.OrgApacheSlingDistributionPackagingImplExporterLocalDistributioInfo;
import com.prokarma.pkmst.model.OrgApacheSlingDistributionPackagingImplExporterRemoteDistributiInfo;
import com.prokarma.pkmst.model.OrgApacheSlingDistributionPackagingImplImporterLocalDistributioInfo;
import com.prokarma.pkmst.model.OrgApacheSlingDistributionPackagingImplImporterRemoteDistributiInfo;
import com.prokarma.pkmst.model.OrgApacheSlingDistributionPackagingImplImporterRepositoryDistriInfo;
import com.prokarma.pkmst.model.OrgApacheSlingDistributionResourcesImplDistributionConfigurationInfo;
import com.prokarma.pkmst.model.OrgApacheSlingDistributionResourcesImplDistributionServiceResourInfo;
import com.prokarma.pkmst.model.OrgApacheSlingDistributionSerializationImplDistributionPackageBuInfo;
import com.prokarma.pkmst.model.OrgApacheSlingDistributionSerializationImplVltVaultDistributionInfo;
import com.prokarma.pkmst.model.OrgApacheSlingDistributionTransportImplUserCredentialsDistributiInfo;
import com.prokarma.pkmst.model.OrgApacheSlingDistributionTriggerImplDistributionEventDistributeInfo;
import com.prokarma.pkmst.model.OrgApacheSlingDistributionTriggerImplJcrEventDistributionTriggerInfo;
import com.prokarma.pkmst.model.OrgApacheSlingDistributionTriggerImplPersistedJcrEventDistributiInfo;
import com.prokarma.pkmst.model.OrgApacheSlingDistributionTriggerImplRemoteEventDistributionTrigInfo;
import com.prokarma.pkmst.model.OrgApacheSlingDistributionTriggerImplResourceEventDistributionTrInfo;
import com.prokarma.pkmst.model.OrgApacheSlingDistributionTriggerImplScheduledDistributionTriggeInfo;
import com.prokarma.pkmst.model.OrgApacheSlingEngineImplAuthSlingAuthenticatorInfo;
import com.prokarma.pkmst.model.OrgApacheSlingEngineImplDebugRequestProgressTrackerLogFilterInfo;
import com.prokarma.pkmst.model.OrgApacheSlingEngineImplLogRequestLoggerInfo;
import com.prokarma.pkmst.model.OrgApacheSlingEngineImplLogRequestLoggerServiceInfo;
import com.prokarma.pkmst.model.OrgApacheSlingEngineImplSlingMainServletInfo;
import com.prokarma.pkmst.model.OrgApacheSlingEngineParametersInfo;
import com.prokarma.pkmst.model.OrgApacheSlingEventImplEventingThreadPoolInfo;
import com.prokarma.pkmst.model.OrgApacheSlingEventImplJobsDefaultJobManagerInfo;
import com.prokarma.pkmst.model.OrgApacheSlingEventImplJobsJcrPersistenceHandlerInfo;
import com.prokarma.pkmst.model.OrgApacheSlingEventImplJobsJobConsumerManagerInfo;
import com.prokarma.pkmst.model.OrgApacheSlingEventJobsQueueConfigurationInfo;
import com.prokarma.pkmst.model.OrgApacheSlingExtensionsWebconsolesecurityproviderInternalSlingWInfo;
import com.prokarma.pkmst.model.OrgApacheSlingFeatureflagsFeatureInfo;
import com.prokarma.pkmst.model.OrgApacheSlingFeatureflagsImplConfiguredFeatureInfo;
import com.prokarma.pkmst.model.OrgApacheSlingHapiImplHApiUtilImplInfo;
import com.prokarma.pkmst.model.OrgApacheSlingHcCoreImplCompositeHealthCheckInfo;
import com.prokarma.pkmst.model.OrgApacheSlingHcCoreImplExecutorHealthCheckExecutorImplInfo;
import com.prokarma.pkmst.model.OrgApacheSlingHcCoreImplJmxAttributeHealthCheckInfo;
import com.prokarma.pkmst.model.OrgApacheSlingHcCoreImplScriptableHealthCheckInfo;
import com.prokarma.pkmst.model.OrgApacheSlingHcCoreImplServletHealthCheckExecutorServletInfo;
import com.prokarma.pkmst.model.OrgApacheSlingHcCoreImplServletResultTxtVerboseSerializerInfo;
import com.prokarma.pkmst.model.OrgApacheSlingI18nImplI18NFilterInfo;
import com.prokarma.pkmst.model.OrgApacheSlingI18nImplJcrResourceBundleProviderInfo;
import com.prokarma.pkmst.model.OrgApacheSlingInstallerProviderJcrImplJcrInstallerInfo;
import com.prokarma.pkmst.model.OrgApacheSlingJcrBaseInternalLoginAdminWhitelistFragmentInfo;
import com.prokarma.pkmst.model.OrgApacheSlingJcrBaseInternalLoginAdminWhitelistInfo;
import com.prokarma.pkmst.model.OrgApacheSlingJcrDavexImplServletsSlingDavExServletInfo;
import com.prokarma.pkmst.model.OrgApacheSlingJcrJackrabbitServerJndiRegistrationSupportInfo;
import com.prokarma.pkmst.model.OrgApacheSlingJcrJackrabbitServerRmiRegistrationSupportInfo;
import com.prokarma.pkmst.model.OrgApacheSlingJcrRepoinitImplRepositoryInitializerInfo;
import com.prokarma.pkmst.model.OrgApacheSlingJcrRepoinitRepositoryInitializerInfo;
import com.prokarma.pkmst.model.OrgApacheSlingJcrResourceInternalJcrResourceResolverFactoryImplInfo;
import com.prokarma.pkmst.model.OrgApacheSlingJcrResourceInternalJcrSystemUserValidatorInfo;
import com.prokarma.pkmst.model.OrgApacheSlingJcrResourcesecurityImplResourceAccessGateFactoryInfo;
import com.prokarma.pkmst.model.OrgApacheSlingJcrWebdavImplHandlerDefaultHandlerServiceInfo;
import com.prokarma.pkmst.model.OrgApacheSlingJcrWebdavImplHandlerDirListingExportHandlerServicInfo;
import com.prokarma.pkmst.model.OrgApacheSlingJcrWebdavImplServletsSimpleWebDavServletInfo;
import com.prokarma.pkmst.model.OrgApacheSlingJmxProviderImplJMXResourceProviderInfo;
import com.prokarma.pkmst.model.OrgApacheSlingModelsImplModelAdapterFactoryInfo;
import com.prokarma.pkmst.model.OrgApacheSlingModelsJacksonexporterImplResourceModuleProviderInfo;
import com.prokarma.pkmst.model.OrgApacheSlingResourceInventoryImplResourceInventoryPrinterFactoInfo;
import com.prokarma.pkmst.model.OrgApacheSlingResourcemergerImplMergedResourceProviderFactoryInfo;
import com.prokarma.pkmst.model.OrgApacheSlingResourcemergerPickerOverridingInfo;
import com.prokarma.pkmst.model.OrgApacheSlingScriptingCoreImplScriptCacheImplInfo;
import com.prokarma.pkmst.model.OrgApacheSlingScriptingCoreImplScriptingResourceResolverProviderInfo;
import com.prokarma.pkmst.model.OrgApacheSlingScriptingJavaImplJavaScriptEngineFactoryInfo;
import com.prokarma.pkmst.model.OrgApacheSlingScriptingJavascriptInternalRhinoJavaScriptEngineFaInfo;
import com.prokarma.pkmst.model.OrgApacheSlingScriptingJspJspScriptEngineFactoryInfo;
import com.prokarma.pkmst.model.OrgApacheSlingScriptingSightlyJsImplJsapiSlyBindingsValuesProvInfo;
import com.prokarma.pkmst.model.OrgApacheSlingSecurityImplContentDispositionFilterInfo;
import com.prokarma.pkmst.model.OrgApacheSlingSecurityImplReferrerFilterInfo;
import com.prokarma.pkmst.model.OrgApacheSlingServiceusermappingImplServiceUserMapperImplAmendedInfo;
import com.prokarma.pkmst.model.OrgApacheSlingServiceusermappingImplServiceUserMapperImplInfo;
import com.prokarma.pkmst.model.OrgApacheSlingServletsGetDefaultGetServletInfo;
import com.prokarma.pkmst.model.OrgApacheSlingServletsGetImplVersionVersionInfoServletInfo;
import com.prokarma.pkmst.model.OrgApacheSlingServletsPostImplHelperChunkCleanUpTaskInfo;
import com.prokarma.pkmst.model.OrgApacheSlingServletsPostImplSlingPostServletInfo;
import com.prokarma.pkmst.model.OrgApacheSlingServletsResolverSlingServletResolverInfo;
import com.prokarma.pkmst.model.OrgApacheSlingSettingsImplSlingSettingsServiceImplInfo;
import com.prokarma.pkmst.model.OrgApacheSlingStartupfilterImplStartupFilterImplInfo;
import com.prokarma.pkmst.model.OrgApacheSlingTenantInternalTenantProviderImplInfo;
import com.prokarma.pkmst.model.OrgApacheSlingTracerInternalLogTracerInfo;
import com.prokarma.pkmst.model.OrgApacheSlingXssImplXSSFilterImplInfo;
import org.junit.Test;
import org.junit.Ignore;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

import org.springframework.http.ResponseEntity;
import org.springframework.web.multipart.MultipartFile;

/**
 * API tests for ConfigmgrApi
 */
@Ignore
public class ConfigmgrApiTest {

    private final ObjectMapper objectMapper = new ObjectMapper();

    private final ConfigmgrApi api = new ConfigmgrApiController(objectMapper);

    private final String accept = "application/json";

    
    /**
     * 
     *
     * 
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void adaptiveFormAndInteractiveCommunicationWebChannelConfigurationTest() throws Exception {
        Boolean post = null;
        Boolean apply = null;
        Boolean delete = null;
        String action = null;
        String $location = null;
        List<String> propertylist = null;
        Boolean showPlaceholder = null;
        Integer maximumCacheEntries = null;
        String afScriptingCompatversion = null;
        Boolean makeFileNameUnique = null;
        Boolean generatingCompliantData = null;
    ResponseEntity<AdaptiveFormAndInteractiveCommunicationWebChannelConfigurationInfo> response = api.adaptiveFormAndInteractiveCommunicationWebChannelConfiguration(post, apply, delete, action, $location, propertylist, showPlaceholder, maximumCacheEntries, afScriptingCompatversion, makeFileNameUnique, generatingCompliantData , accept);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void adaptiveFormAndInteractiveCommunicationWebChannelThemeConfigurTest() throws Exception {
        Boolean post = null;
        Boolean apply = null;
        Boolean delete = null;
        String action = null;
        String $location = null;
        List<String> propertylist = null;
        List<String> fontList = null;
    ResponseEntity<AdaptiveFormAndInteractiveCommunicationWebChannelThemeConfigurInfo> response = api.adaptiveFormAndInteractiveCommunicationWebChannelThemeConfigur(post, apply, delete, action, $location, propertylist, fontList , accept);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void analyticsComponentQueryCacheServiceTest() throws Exception {
        Boolean post = null;
        Boolean apply = null;
        Boolean delete = null;
        String action = null;
        String $location = null;
        List<String> propertylist = null;
        Integer cqAnalyticsComponentQueryCacheSize = null;
    ResponseEntity<AnalyticsComponentQueryCacheServiceInfo> response = api.analyticsComponentQueryCacheService(post, apply, delete, action, $location, propertylist, cqAnalyticsComponentQueryCacheSize , accept);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void apacheSlingHealthCheckResultHTMLSerializerTest() throws Exception {
        Boolean post = null;
        Boolean apply = null;
        Boolean delete = null;
        String action = null;
        String $location = null;
        List<String> propertylist = null;
        String styleString = null;
    ResponseEntity<ApacheSlingHealthCheckResultHTMLSerializerInfo> response = api.apacheSlingHealthCheckResultHTMLSerializer(post, apply, delete, action, $location, propertylist, styleString , accept);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void comAdobeAemFormsndocumentsConfigAEMFormsManagerConfigurationTest() throws Exception {
        Boolean post = null;
        Boolean apply = null;
        Boolean delete = null;
        String action = null;
        String $location = null;
        List<String> propertylist = null;
        Boolean formsManagerConfigIncludeOOTBTemplates = null;
        Boolean formsManagerConfigIncludeDeprecatedTemplates = null;
    ResponseEntity<ComAdobeAemFormsndocumentsConfigAEMFormsManagerConfigurationInfo> response = api.comAdobeAemFormsndocumentsConfigAEMFormsManagerConfiguration(post, apply, delete, action, $location, propertylist, formsManagerConfigIncludeOOTBTemplates, formsManagerConfigIncludeDeprecatedTemplates , accept);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void comAdobeAemTransactionCoreImplTransactionRecorderTest() throws Exception {
        Boolean post = null;
        Boolean apply = null;
        Boolean delete = null;
        String action = null;
        String $location = null;
        List<String> propertylist = null;
        Boolean isTransactionRecordingEnabled = null;
    ResponseEntity<ComAdobeAemTransactionCoreImplTransactionRecorderInfo> response = api.comAdobeAemTransactionCoreImplTransactionRecorder(post, apply, delete, action, $location, propertylist, isTransactionRecordingEnabled , accept);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void comAdobeAemUpgradePrechecksHcImplDeprecateIndexesHCTest() throws Exception {
        Boolean post = null;
        Boolean apply = null;
        Boolean delete = null;
        String action = null;
        String $location = null;
        List<String> propertylist = null;
        String hcName = null;
        List<String> hcTags = null;
        String hcMbeanName = null;
    ResponseEntity<ComAdobeAemUpgradePrechecksHcImplDeprecateIndexesHCInfo> response = api.comAdobeAemUpgradePrechecksHcImplDeprecateIndexesHC(post, apply, delete, action, $location, propertylist, hcName, hcTags, hcMbeanName , accept);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void comAdobeAemUpgradePrechecksHcImplReplicationAgentsDisabledHCTest() throws Exception {
        Boolean post = null;
        Boolean apply = null;
        Boolean delete = null;
        String action = null;
        String $location = null;
        List<String> propertylist = null;
        String hcName = null;
        List<String> hcTags = null;
        String hcMbeanName = null;
    ResponseEntity<ComAdobeAemUpgradePrechecksHcImplReplicationAgentsDisabledHCInfo> response = api.comAdobeAemUpgradePrechecksHcImplReplicationAgentsDisabledHC(post, apply, delete, action, $location, propertylist, hcName, hcTags, hcMbeanName , accept);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void comAdobeAemUpgradePrechecksMbeanImplPreUpgradeTasksMBeanImplTest() throws Exception {
        Boolean post = null;
        Boolean apply = null;
        Boolean delete = null;
        String action = null;
        String $location = null;
        List<String> propertylist = null;
        List<String> preUpgradeMaintenanceTasks = null;
        List<String> preUpgradeHcTags = null;
    ResponseEntity<ComAdobeAemUpgradePrechecksMbeanImplPreUpgradeTasksMBeanImplInfo> response = api.comAdobeAemUpgradePrechecksMbeanImplPreUpgradeTasksMBeanImpl(post, apply, delete, action, $location, propertylist, preUpgradeMaintenanceTasks, preUpgradeHcTags , accept);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void comAdobeAemUpgradePrechecksTasksImplConsistencyCheckTaskImplTest() throws Exception {
        Boolean post = null;
        Boolean apply = null;
        Boolean delete = null;
        String action = null;
        String $location = null;
        List<String> propertylist = null;
        String rootPath = null;
        Boolean fixInconsistencies = null;
    ResponseEntity<ComAdobeAemUpgradePrechecksTasksImplConsistencyCheckTaskImplInfo> response = api.comAdobeAemUpgradePrechecksTasksImplConsistencyCheckTaskImpl(post, apply, delete, action, $location, propertylist, rootPath, fixInconsistencies , accept);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void comAdobeCqAccountApiAccountManagementServiceTest() throws Exception {
        Boolean post = null;
        Boolean apply = null;
        Boolean delete = null;
        String action = null;
        String $location = null;
        List<String> propertylist = null;
        Integer cqAccountmanagerTokenValidityPeriod = null;
        String cqAccountmanagerConfigRequestnewaccountMail = null;
        String cqAccountmanagerConfigRequestnewpwdMail = null;
    ResponseEntity<ComAdobeCqAccountApiAccountManagementServiceInfo> response = api.comAdobeCqAccountApiAccountManagementService(post, apply, delete, action, $location, propertylist, cqAccountmanagerTokenValidityPeriod, cqAccountmanagerConfigRequestnewaccountMail, cqAccountmanagerConfigRequestnewpwdMail , accept);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void comAdobeCqAccountImplAccountManagementServletTest() throws Exception {
        Boolean post = null;
        Boolean apply = null;
        Boolean delete = null;
        String action = null;
        String $location = null;
        List<String> propertylist = null;
        String cqAccountmanagerConfigInformnewaccountMail = null;
        String cqAccountmanagerConfigInformnewpwdMail = null;
    ResponseEntity<ComAdobeCqAccountImplAccountManagementServletInfo> response = api.comAdobeCqAccountImplAccountManagementServlet(post, apply, delete, action, $location, propertylist, cqAccountmanagerConfigInformnewaccountMail, cqAccountmanagerConfigInformnewpwdMail , accept);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void comAdobeCqAddressImplLocationLocationListServletTest() throws Exception {
        Boolean post = null;
        Boolean apply = null;
        Boolean delete = null;
        String action = null;
        String $location = null;
        List<String> propertylist = null;
        Integer cqAddressLocationDefaultMaxResults = null;
    ResponseEntity<ComAdobeCqAddressImplLocationLocationListServletInfo> response = api.comAdobeCqAddressImplLocationLocationListServlet(post, apply, delete, action, $location, propertylist, cqAddressLocationDefaultMaxResults , accept);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void comAdobeCqAuditPurgeDamTest() throws Exception {
        Boolean post = null;
        Boolean apply = null;
        Boolean delete = null;
        String action = null;
        String $location = null;
        List<String> propertylist = null;
        String auditlogRuleName = null;
        String auditlogRuleContentpath = null;
        Integer auditlogRuleMinimumage = null;
        String auditlogRuleTypes = null;
    ResponseEntity<ComAdobeCqAuditPurgeDamInfo> response = api.comAdobeCqAuditPurgeDam(post, apply, delete, action, $location, propertylist, auditlogRuleName, auditlogRuleContentpath, auditlogRuleMinimumage, auditlogRuleTypes , accept);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void comAdobeCqAuditPurgePagesTest() throws Exception {
        Boolean post = null;
        Boolean apply = null;
        Boolean delete = null;
        String action = null;
        String $location = null;
        List<String> propertylist = null;
        String auditlogRuleName = null;
        String auditlogRuleContentpath = null;
        Integer auditlogRuleMinimumage = null;
        String auditlogRuleTypes = null;
    ResponseEntity<ComAdobeCqAuditPurgePagesInfo> response = api.comAdobeCqAuditPurgePages(post, apply, delete, action, $location, propertylist, auditlogRuleName, auditlogRuleContentpath, auditlogRuleMinimumage, auditlogRuleTypes , accept);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void comAdobeCqAuditPurgeReplicationTest() throws Exception {
        Boolean post = null;
        Boolean apply = null;
        Boolean delete = null;
        String action = null;
        String $location = null;
        List<String> propertylist = null;
        String auditlogRuleName = null;
        String auditlogRuleContentpath = null;
        Integer auditlogRuleMinimumage = null;
        String auditlogRuleTypes = null;
    ResponseEntity<ComAdobeCqAuditPurgeReplicationInfo> response = api.comAdobeCqAuditPurgeReplication(post, apply, delete, action, $location, propertylist, auditlogRuleName, auditlogRuleContentpath, auditlogRuleMinimumage, auditlogRuleTypes , accept);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void comAdobeCqCdnRewriterImplAWSCloudFrontRewriterTest() throws Exception {
        Boolean post = null;
        Boolean apply = null;
        Boolean delete = null;
        String action = null;
        String $location = null;
        List<String> propertylist = null;
        Integer serviceRanking = null;
        String keypairId = null;
        String keypairAlias = null;
        List<String> cdnrewriterAttributes = null;
        String cdnRewriterDistributionDomain = null;
    ResponseEntity<ComAdobeCqCdnRewriterImplAWSCloudFrontRewriterInfo> response = api.comAdobeCqCdnRewriterImplAWSCloudFrontRewriter(post, apply, delete, action, $location, propertylist, serviceRanking, keypairId, keypairAlias, cdnrewriterAttributes, cdnRewriterDistributionDomain , accept);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void comAdobeCqCdnRewriterImplCDNConfigServiceImplTest() throws Exception {
        Boolean post = null;
        Boolean apply = null;
        Boolean delete = null;
        String action = null;
        String $location = null;
        List<String> propertylist = null;
        String cdnConfigDistributionDomain = null;
        Boolean cdnConfigEnableRewriting = null;
        List<String> cdnConfigPathPrefixes = null;
        Integer cdnConfigCdnttl = null;
        String cdnConfigApplicationProtocol = null;
    ResponseEntity<ComAdobeCqCdnRewriterImplCDNConfigServiceImplInfo> response = api.comAdobeCqCdnRewriterImplCDNConfigServiceImpl(post, apply, delete, action, $location, propertylist, cdnConfigDistributionDomain, cdnConfigEnableRewriting, cdnConfigPathPrefixes, cdnConfigCdnttl, cdnConfigApplicationProtocol , accept);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void comAdobeCqCdnRewriterImplCDNRewriterTest() throws Exception {
        Boolean post = null;
        Boolean apply = null;
        Boolean delete = null;
        String action = null;
        String $location = null;
        List<String> propertylist = null;
        Integer serviceRanking = null;
        List<String> cdnrewriterAttributes = null;
        String cdnRewriterDistributionDomain = null;
    ResponseEntity<ComAdobeCqCdnRewriterImplCDNRewriterInfo> response = api.comAdobeCqCdnRewriterImplCDNRewriter(post, apply, delete, action, $location, propertylist, serviceRanking, cdnrewriterAttributes, cdnRewriterDistributionDomain , accept);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void comAdobeCqCloudconfigCoreImplConfigurationReplicationEventHandleTest() throws Exception {
        Boolean post = null;
        Boolean apply = null;
        Boolean delete = null;
        String action = null;
        String $location = null;
        List<String> propertylist = null;
        List<String> flushAgents = null;
    ResponseEntity<ComAdobeCqCloudconfigCoreImplConfigurationReplicationEventHandleInfo> response = api.comAdobeCqCloudconfigCoreImplConfigurationReplicationEventHandle(post, apply, delete, action, $location, propertylist, flushAgents , accept);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void comAdobeCqCommerceImplAssetDynamicImageHandlerTest() throws Exception {
        Boolean post = null;
        Boolean apply = null;
        Boolean delete = null;
        String action = null;
        String $location = null;
        List<String> propertylist = null;
        Boolean cqCommerceAssetHandlerActive = null;
        String cqCommerceAssetHandlerName = null;
    ResponseEntity<ComAdobeCqCommerceImplAssetDynamicImageHandlerInfo> response = api.comAdobeCqCommerceImplAssetDynamicImageHandler(post, apply, delete, action, $location, propertylist, cqCommerceAssetHandlerActive, cqCommerceAssetHandlerName , accept);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void comAdobeCqCommerceImplAssetProductAssetHandlerProviderImplTest() throws Exception {
        Boolean post = null;
        Boolean apply = null;
        Boolean delete = null;
        String action = null;
        String $location = null;
        List<String> propertylist = null;
        String cqCommerceAssetHandlerFallback = null;
    ResponseEntity<ComAdobeCqCommerceImplAssetProductAssetHandlerProviderImplInfo> response = api.comAdobeCqCommerceImplAssetProductAssetHandlerProviderImpl(post, apply, delete, action, $location, propertylist, cqCommerceAssetHandlerFallback , accept);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void comAdobeCqCommerceImplAssetStaticImageHandlerTest() throws Exception {
        Boolean post = null;
        Boolean apply = null;
        Boolean delete = null;
        String action = null;
        String $location = null;
        List<String> propertylist = null;
        Boolean cqCommerceAssetHandlerActive = null;
        String cqCommerceAssetHandlerName = null;
    ResponseEntity<ComAdobeCqCommerceImplAssetStaticImageHandlerInfo> response = api.comAdobeCqCommerceImplAssetStaticImageHandler(post, apply, delete, action, $location, propertylist, cqCommerceAssetHandlerActive, cqCommerceAssetHandlerName , accept);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void comAdobeCqCommerceImplAssetVideoHandlerTest() throws Exception {
        Boolean post = null;
        Boolean apply = null;
        Boolean delete = null;
        String action = null;
        String $location = null;
        List<String> propertylist = null;
        Boolean cqCommerceAssetHandlerActive = null;
        String cqCommerceAssetHandlerName = null;
    ResponseEntity<ComAdobeCqCommerceImplAssetVideoHandlerInfo> response = api.comAdobeCqCommerceImplAssetVideoHandler(post, apply, delete, action, $location, propertylist, cqCommerceAssetHandlerActive, cqCommerceAssetHandlerName , accept);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void comAdobeCqCommerceImplPromotionPromotionManagerImplTest() throws Exception {
        Boolean post = null;
        Boolean apply = null;
        Boolean delete = null;
        String action = null;
        String $location = null;
        List<String> propertylist = null;
        String cqCommercePromotionRoot = null;
    ResponseEntity<ComAdobeCqCommerceImplPromotionPromotionManagerImplInfo> response = api.comAdobeCqCommerceImplPromotionPromotionManagerImpl(post, apply, delete, action, $location, propertylist, cqCommercePromotionRoot , accept);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void comAdobeCqCommercePimImplCataloggeneratorCatalogGeneratorImplTest() throws Exception {
        Boolean post = null;
        Boolean apply = null;
        Boolean delete = null;
        String action = null;
        String $location = null;
        List<String> propertylist = null;
        Integer cqCommerceCataloggeneratorBucketsize = null;
        String cqCommerceCataloggeneratorBucketname = null;
        List<String> cqCommerceCataloggeneratorExcludedtemplateproperties = null;
    ResponseEntity<ComAdobeCqCommercePimImplCataloggeneratorCatalogGeneratorImplInfo> response = api.comAdobeCqCommercePimImplCataloggeneratorCatalogGeneratorImpl(post, apply, delete, action, $location, propertylist, cqCommerceCataloggeneratorBucketsize, cqCommerceCataloggeneratorBucketname, cqCommerceCataloggeneratorExcludedtemplateproperties , accept);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void comAdobeCqCommercePimImplPageEventListenerTest() throws Exception {
        Boolean post = null;
        Boolean apply = null;
        Boolean delete = null;
        String action = null;
        String $location = null;
        List<String> propertylist = null;
        Boolean cqCommercePageeventlistenerEnabled = null;
    ResponseEntity<ComAdobeCqCommercePimImplPageEventListenerInfo> response = api.comAdobeCqCommercePimImplPageEventListener(post, apply, delete, action, $location, propertylist, cqCommercePageeventlistenerEnabled , accept);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void comAdobeCqCommercePimImplProductfeedProductFeedServiceImplTest() throws Exception {
        Boolean post = null;
        Boolean apply = null;
        Boolean delete = null;
        String action = null;
        String $location = null;
        List<String> propertylist = null;
        String feedGeneratorAlgorithm = null;
    ResponseEntity<ComAdobeCqCommercePimImplProductfeedProductFeedServiceImplInfo> response = api.comAdobeCqCommercePimImplProductfeedProductFeedServiceImpl(post, apply, delete, action, $location, propertylist, feedGeneratorAlgorithm , accept);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void comAdobeCqContentinsightImplReportingServicesSettingsProviderTest() throws Exception {
        Boolean post = null;
        Boolean apply = null;
        Boolean delete = null;
        String action = null;
        String $location = null;
        List<String> propertylist = null;
        String reportingservicesUrl = null;
    ResponseEntity<ComAdobeCqContentinsightImplReportingServicesSettingsProviderInfo> response = api.comAdobeCqContentinsightImplReportingServicesSettingsProvider(post, apply, delete, action, $location, propertylist, reportingservicesUrl , accept);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void comAdobeCqContentinsightImplServletsBrightEdgeProxyServletTest() throws Exception {
        Boolean post = null;
        Boolean apply = null;
        Boolean delete = null;
        String action = null;
        String $location = null;
        List<String> propertylist = null;
        String brightedgeUrl = null;
    ResponseEntity<ComAdobeCqContentinsightImplServletsBrightEdgeProxyServletInfo> response = api.comAdobeCqContentinsightImplServletsBrightEdgeProxyServlet(post, apply, delete, action, $location, propertylist, brightedgeUrl , accept);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void comAdobeCqContentinsightImplServletsReportingServicesProxyServleTest() throws Exception {
        Boolean post = null;
        Boolean apply = null;
        Boolean delete = null;
        String action = null;
        String $location = null;
        List<String> propertylist = null;
        List<String> reportingservicesProxyWhitelist = null;
    ResponseEntity<ComAdobeCqContentinsightImplServletsReportingServicesProxyServleInfo> response = api.comAdobeCqContentinsightImplServletsReportingServicesProxyServle(post, apply, delete, action, $location, propertylist, reportingservicesProxyWhitelist , accept);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void comAdobeCqDamCfmImplComponentComponentConfigImplTest() throws Exception {
        Boolean post = null;
        Boolean apply = null;
        Boolean delete = null;
        String action = null;
        String $location = null;
        List<String> propertylist = null;
        String damCfmComponentResourceType = null;
        String damCfmComponentFileReferenceProp = null;
        String damCfmComponentElementsProp = null;
        String damCfmComponentVariationProp = null;
    ResponseEntity<ComAdobeCqDamCfmImplComponentComponentConfigImplInfo> response = api.comAdobeCqDamCfmImplComponentComponentConfigImpl(post, apply, delete, action, $location, propertylist, damCfmComponentResourceType, damCfmComponentFileReferenceProp, damCfmComponentElementsProp, damCfmComponentVariationProp , accept);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void comAdobeCqDamCfmImplConfFeatureConfigImplTest() throws Exception {
        Boolean post = null;
        Boolean apply = null;
        Boolean delete = null;
        String action = null;
        String $location = null;
        List<String> propertylist = null;
        List<String> damCfmResourceTypes = null;
        List<String> damCfmReferenceProperties = null;
    ResponseEntity<ComAdobeCqDamCfmImplConfFeatureConfigImplInfo> response = api.comAdobeCqDamCfmImplConfFeatureConfigImpl(post, apply, delete, action, $location, propertylist, damCfmResourceTypes, damCfmReferenceProperties , accept);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void comAdobeCqDamCfmImplContentRewriterAssetProcessorTest() throws Exception {
        Boolean post = null;
        Boolean apply = null;
        Boolean delete = null;
        String action = null;
        String $location = null;
        List<String> propertylist = null;
        String pipelineType = null;
    ResponseEntity<ComAdobeCqDamCfmImplContentRewriterAssetProcessorInfo> response = api.comAdobeCqDamCfmImplContentRewriterAssetProcessor(post, apply, delete, action, $location, propertylist, pipelineType , accept);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void comAdobeCqDamCfmImplContentRewriterParRangeFilterTest() throws Exception {
        Boolean post = null;
        Boolean apply = null;
        Boolean delete = null;
        String action = null;
        String $location = null;
        List<String> propertylist = null;
        String pipelineType = null;
    ResponseEntity<ComAdobeCqDamCfmImplContentRewriterParRangeFilterInfo> response = api.comAdobeCqDamCfmImplContentRewriterParRangeFilter(post, apply, delete, action, $location, propertylist, pipelineType , accept);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void comAdobeCqDamCfmImplContentRewriterPayloadFilterTest() throws Exception {
        Boolean post = null;
        Boolean apply = null;
        Boolean delete = null;
        String action = null;
        String $location = null;
        List<String> propertylist = null;
        String pipelineType = null;
    ResponseEntity<ComAdobeCqDamCfmImplContentRewriterPayloadFilterInfo> response = api.comAdobeCqDamCfmImplContentRewriterPayloadFilter(post, apply, delete, action, $location, propertylist, pipelineType , accept);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void comAdobeCqDamDmProcessImagePTiffManagerImplTest() throws Exception {
        Boolean post = null;
        Boolean apply = null;
        Boolean delete = null;
        String action = null;
        String $location = null;
        List<String> propertylist = null;
        Integer maxMemory = null;
    ResponseEntity<ComAdobeCqDamDmProcessImagePTiffManagerImplInfo> response = api.comAdobeCqDamDmProcessImagePTiffManagerImpl(post, apply, delete, action, $location, propertylist, maxMemory , accept);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void comAdobeCqDamIpsImplReplicationTriggerReplicateOnModifyWorkerTest() throws Exception {
        Boolean post = null;
        Boolean apply = null;
        Boolean delete = null;
        String action = null;
        String $location = null;
        List<String> propertylist = null;
        Boolean dmreplicateonmodifyEnabled = null;
        Boolean dmreplicateonmodifyForcesyncdeletes = null;
    ResponseEntity<ComAdobeCqDamIpsImplReplicationTriggerReplicateOnModifyWorkerInfo> response = api.comAdobeCqDamIpsImplReplicationTriggerReplicateOnModifyWorker(post, apply, delete, action, $location, propertylist, dmreplicateonmodifyEnabled, dmreplicateonmodifyForcesyncdeletes , accept);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void comAdobeCqDamMacSyncHelperImplMACSyncClientImplTest() throws Exception {
        Boolean post = null;
        Boolean apply = null;
        Boolean delete = null;
        String action = null;
        String $location = null;
        List<String> propertylist = null;
        Integer comAdobeDamMacSyncClientSoTimeout = null;
    ResponseEntity<ComAdobeCqDamMacSyncHelperImplMACSyncClientImplInfo> response = api.comAdobeCqDamMacSyncHelperImplMACSyncClientImpl(post, apply, delete, action, $location, propertylist, comAdobeDamMacSyncClientSoTimeout , accept);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void comAdobeCqDamMacSyncImplDAMSyncServiceImplTest() throws Exception {
        Boolean post = null;
        Boolean apply = null;
        Boolean delete = null;
        String action = null;
        String $location = null;
        List<String> propertylist = null;
        List<String> comAdobeCqDamMacSyncDamsyncserviceRegisteredPaths = null;
        Boolean comAdobeCqDamMacSyncDamsyncserviceSyncRenditions = null;
        Integer comAdobeCqDamMacSyncDamsyncserviceReplicateThreadWaitMs = null;
        String comAdobeCqDamMacSyncDamsyncservicePlatform = null;
    ResponseEntity<ComAdobeCqDamMacSyncImplDAMSyncServiceImplInfo> response = api.comAdobeCqDamMacSyncImplDAMSyncServiceImpl(post, apply, delete, action, $location, propertylist, comAdobeCqDamMacSyncDamsyncserviceRegisteredPaths, comAdobeCqDamMacSyncDamsyncserviceSyncRenditions, comAdobeCqDamMacSyncDamsyncserviceReplicateThreadWaitMs, comAdobeCqDamMacSyncDamsyncservicePlatform , accept);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void comAdobeCqDamProcessorNuiImplNuiAssetProcessorTest() throws Exception {
        Boolean post = null;
        Boolean apply = null;
        Boolean delete = null;
        String action = null;
        String $location = null;
        List<String> propertylist = null;
        Boolean nuiEnabled = null;
        String nuiServiceUrl = null;
        String nuiApiKey = null;
    ResponseEntity<ComAdobeCqDamProcessorNuiImplNuiAssetProcessorInfo> response = api.comAdobeCqDamProcessorNuiImplNuiAssetProcessor(post, apply, delete, action, $location, propertylist, nuiEnabled, nuiServiceUrl, nuiApiKey , accept);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void comAdobeCqDamS7imagingImplIsImageServerComponentTest() throws Exception {
        Boolean post = null;
        Boolean apply = null;
        Boolean delete = null;
        String action = null;
        String $location = null;
        List<String> propertylist = null;
        String tcpPort = null;
        Boolean allowRemoteAccess = null;
        String maxRenderRgnPixels = null;
        String maxMessageSize = null;
        Integer randomAccessUrlTimeout = null;
        Integer workerThreads = null;
    ResponseEntity<ComAdobeCqDamS7imagingImplIsImageServerComponentInfo> response = api.comAdobeCqDamS7imagingImplIsImageServerComponent(post, apply, delete, action, $location, propertylist, tcpPort, allowRemoteAccess, maxRenderRgnPixels, maxMessageSize, randomAccessUrlTimeout, workerThreads , accept);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void comAdobeCqDamS7imagingImplPsPlatformServerServletTest() throws Exception {
        Boolean post = null;
        Boolean apply = null;
        Boolean delete = null;
        String action = null;
        String $location = null;
        List<String> propertylist = null;
        Boolean cacheEnable = null;
        List<String> cacheRootPaths = null;
        Integer cacheMaxSize = null;
        Integer cacheMaxEntries = null;
    ResponseEntity<ComAdobeCqDamS7imagingImplPsPlatformServerServletInfo> response = api.comAdobeCqDamS7imagingImplPsPlatformServerServlet(post, apply, delete, action, $location, propertylist, cacheEnable, cacheRootPaths, cacheMaxSize, cacheMaxEntries , accept);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void comAdobeCqDamWebdavImplIoAssetIOHandlerTest() throws Exception {
        Boolean post = null;
        Boolean apply = null;
        Boolean delete = null;
        String action = null;
        String $location = null;
        List<String> propertylist = null;
        Integer serviceRanking = null;
        String pathPrefix = null;
        Boolean createVersion = null;
    ResponseEntity<ComAdobeCqDamWebdavImplIoAssetIOHandlerInfo> response = api.comAdobeCqDamWebdavImplIoAssetIOHandler(post, apply, delete, action, $location, propertylist, serviceRanking, pathPrefix, createVersion , accept);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void comAdobeCqDamWebdavImplIoDamWebdavVersionLinkingJobTest() throws Exception {
        Boolean post = null;
        Boolean apply = null;
        Boolean delete = null;
        String action = null;
        String $location = null;
        List<String> propertylist = null;
        Boolean cqDamWebdavVersionLinkingEnable = null;
        Integer cqDamWebdavVersionLinkingSchedulerPeriod = null;
        Integer cqDamWebdavVersionLinkingStagingTimeout = null;
    ResponseEntity<ComAdobeCqDamWebdavImplIoDamWebdavVersionLinkingJobInfo> response = api.comAdobeCqDamWebdavImplIoDamWebdavVersionLinkingJob(post, apply, delete, action, $location, propertylist, cqDamWebdavVersionLinkingEnable, cqDamWebdavVersionLinkingSchedulerPeriod, cqDamWebdavVersionLinkingStagingTimeout , accept);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void comAdobeCqDamWebdavImplIoSpecialFilesHandlerTest() throws Exception {
        Boolean post = null;
        Boolean apply = null;
        Boolean delete = null;
        String action = null;
        String $location = null;
        List<String> propertylist = null;
        List<String> comDayCqDamCoreImplIoSpecialFilesHandlerFilepatters = null;
    ResponseEntity<ComAdobeCqDamWebdavImplIoSpecialFilesHandlerInfo> response = api.comAdobeCqDamWebdavImplIoSpecialFilesHandler(post, apply, delete, action, $location, propertylist, comDayCqDamCoreImplIoSpecialFilesHandlerFilepatters , accept);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void comAdobeCqDeserfwImplDeserializationFirewallImplTest() throws Exception {
        Boolean post = null;
        Boolean apply = null;
        Boolean delete = null;
        String action = null;
        String $location = null;
        List<String> propertylist = null;
        List<String> firewallDeserializationWhitelist = null;
        List<String> firewallDeserializationBlacklist = null;
        String firewallDeserializationDiagnostics = null;
    ResponseEntity<ComAdobeCqDeserfwImplDeserializationFirewallImplInfo> response = api.comAdobeCqDeserfwImplDeserializationFirewallImpl(post, apply, delete, action, $location, propertylist, firewallDeserializationWhitelist, firewallDeserializationBlacklist, firewallDeserializationDiagnostics , accept);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void comAdobeCqDtmImplServiceDTMWebServiceImplTest() throws Exception {
        Boolean post = null;
        Boolean apply = null;
        Boolean delete = null;
        String action = null;
        String $location = null;
        List<String> propertylist = null;
        Integer connectionTimeout = null;
        Integer socketTimeout = null;
    ResponseEntity<ComAdobeCqDtmImplServiceDTMWebServiceImplInfo> response = api.comAdobeCqDtmImplServiceDTMWebServiceImpl(post, apply, delete, action, $location, propertylist, connectionTimeout, socketTimeout , accept);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void comAdobeCqDtmImplServletsDTMDeployHookServletTest() throws Exception {
        Boolean post = null;
        Boolean apply = null;
        Boolean delete = null;
        String action = null;
        String $location = null;
        List<String> propertylist = null;
        List<String> dtmStagingIpWhitelist = null;
        List<String> dtmProductionIpWhitelist = null;
    ResponseEntity<ComAdobeCqDtmImplServletsDTMDeployHookServletInfo> response = api.comAdobeCqDtmImplServletsDTMDeployHookServlet(post, apply, delete, action, $location, propertylist, dtmStagingIpWhitelist, dtmProductionIpWhitelist , accept);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void comAdobeCqDtmReactorImplServiceWebServiceImplTest() throws Exception {
        Boolean post = null;
        Boolean apply = null;
        Boolean delete = null;
        String action = null;
        String $location = null;
        List<String> propertylist = null;
        String endpointUri = null;
        Integer connectionTimeout = null;
        Integer socketTimeout = null;
    ResponseEntity<ComAdobeCqDtmReactorImplServiceWebServiceImplInfo> response = api.comAdobeCqDtmReactorImplServiceWebServiceImpl(post, apply, delete, action, $location, propertylist, endpointUri, connectionTimeout, socketTimeout , accept);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void comAdobeCqExperiencelogImplExperienceLogConfigServletTest() throws Exception {
        Boolean post = null;
        Boolean apply = null;
        Boolean delete = null;
        String action = null;
        String $location = null;
        List<String> propertylist = null;
        Boolean enabled = null;
        List<String> disabledForGroups = null;
    ResponseEntity<ComAdobeCqExperiencelogImplExperienceLogConfigServletInfo> response = api.comAdobeCqExperiencelogImplExperienceLogConfigServlet(post, apply, delete, action, $location, propertylist, enabled, disabledForGroups , accept);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void comAdobeCqHcContentPackagesHealthCheckTest() throws Exception {
        Boolean post = null;
        Boolean apply = null;
        Boolean delete = null;
        String action = null;
        String $location = null;
        List<String> propertylist = null;
        String hcName = null;
        List<String> hcTags = null;
        String hcMbeanName = null;
        List<String> packageNames = null;
    ResponseEntity<ComAdobeCqHcContentPackagesHealthCheckInfo> response = api.comAdobeCqHcContentPackagesHealthCheck(post, apply, delete, action, $location, propertylist, hcName, hcTags, hcMbeanName, packageNames , accept);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void comAdobeCqHistoryImplHistoryRequestFilterTest() throws Exception {
        Boolean post = null;
        Boolean apply = null;
        Boolean delete = null;
        String action = null;
        String $location = null;
        List<String> propertylist = null;
        List<String> historyRequestFilterExcludedSelectors = null;
        List<String> historyRequestFilterExcludedExtensions = null;
    ResponseEntity<ComAdobeCqHistoryImplHistoryRequestFilterInfo> response = api.comAdobeCqHistoryImplHistoryRequestFilter(post, apply, delete, action, $location, propertylist, historyRequestFilterExcludedSelectors, historyRequestFilterExcludedExtensions , accept);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void comAdobeCqHistoryImplHistoryServiceImplTest() throws Exception {
        Boolean post = null;
        Boolean apply = null;
        Boolean delete = null;
        String action = null;
        String $location = null;
        List<String> propertylist = null;
        List<String> historyServiceResourceTypes = null;
        List<String> historyServicePathFilter = null;
    ResponseEntity<ComAdobeCqHistoryImplHistoryServiceImplInfo> response = api.comAdobeCqHistoryImplHistoryServiceImpl(post, apply, delete, action, $location, propertylist, historyServiceResourceTypes, historyServicePathFilter , accept);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void comAdobeCqInboxImplTypeproviderItemTypeProviderTest() throws Exception {
        Boolean post = null;
        Boolean apply = null;
        Boolean delete = null;
        String action = null;
        String $location = null;
        List<String> propertylist = null;
        List<String> inboxImplTypeproviderRegistrypaths = null;
        List<String> inboxImplTypeproviderLegacypaths = null;
        String inboxImplTypeproviderDefaulturlFailureitem = null;
        String inboxImplTypeproviderDefaulturlWorkitem = null;
        String inboxImplTypeproviderDefaulturlTask = null;
    ResponseEntity<ComAdobeCqInboxImplTypeproviderItemTypeProviderInfo> response = api.comAdobeCqInboxImplTypeproviderItemTypeProvider(post, apply, delete, action, $location, propertylist, inboxImplTypeproviderRegistrypaths, inboxImplTypeproviderLegacypaths, inboxImplTypeproviderDefaulturlFailureitem, inboxImplTypeproviderDefaulturlWorkitem, inboxImplTypeproviderDefaulturlTask , accept);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void comAdobeCqProjectsImplServletProjectImageServletTest() throws Exception {
        Boolean post = null;
        Boolean apply = null;
        Boolean delete = null;
        String action = null;
        String $location = null;
        List<String> propertylist = null;
        String imageQuality = null;
        String imageSupportedResolutions = null;
    ResponseEntity<ComAdobeCqProjectsImplServletProjectImageServletInfo> response = api.comAdobeCqProjectsImplServletProjectImageServlet(post, apply, delete, action, $location, propertylist, imageQuality, imageSupportedResolutions , accept);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void comAdobeCqProjectsPurgeSchedulerTest() throws Exception {
        Boolean post = null;
        Boolean apply = null;
        Boolean delete = null;
        String action = null;
        String $location = null;
        List<String> propertylist = null;
        String scheduledpurgeName = null;
        Boolean scheduledpurgePurgeActive = null;
        List<String> scheduledpurgeTemplates = null;
        Boolean scheduledpurgePurgeGroups = null;
        Boolean scheduledpurgePurgeAssets = null;
        Boolean scheduledpurgeTerminateRunningWorkflows = null;
        Integer scheduledpurgeDaysold = null;
        Integer scheduledpurgeSaveThreshold = null;
    ResponseEntity<ComAdobeCqProjectsPurgeSchedulerInfo> response = api.comAdobeCqProjectsPurgeScheduler(post, apply, delete, action, $location, propertylist, scheduledpurgeName, scheduledpurgePurgeActive, scheduledpurgeTemplates, scheduledpurgePurgeGroups, scheduledpurgePurgeAssets, scheduledpurgeTerminateRunningWorkflows, scheduledpurgeDaysold, scheduledpurgeSaveThreshold , accept);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void comAdobeCqScheduledExporterImplScheduledExporterImplTest() throws Exception {
        Boolean post = null;
        Boolean apply = null;
        Boolean delete = null;
        String action = null;
        String $location = null;
        List<String> propertylist = null;
        List<String> includePaths = null;
        String exporterUser = null;
    ResponseEntity<ComAdobeCqScheduledExporterImplScheduledExporterImplInfo> response = api.comAdobeCqScheduledExporterImplScheduledExporterImpl(post, apply, delete, action, $location, propertylist, includePaths, exporterUser , accept);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void comAdobeCqScreensAnalyticsImplScreensAnalyticsServiceImplTest() throws Exception {
        Boolean post = null;
        Boolean apply = null;
        Boolean delete = null;
        String action = null;
        String $location = null;
        List<String> propertylist = null;
        String comAdobeCqScreensAnalyticsImplUrl = null;
        String comAdobeCqScreensAnalyticsImplApikey = null;
        String comAdobeCqScreensAnalyticsImplProject = null;
        String comAdobeCqScreensAnalyticsImplEnvironment = null;
        Integer comAdobeCqScreensAnalyticsImplSendFrequency = null;
    ResponseEntity<ComAdobeCqScreensAnalyticsImplScreensAnalyticsServiceImplInfo> response = api.comAdobeCqScreensAnalyticsImplScreensAnalyticsServiceImpl(post, apply, delete, action, $location, propertylist, comAdobeCqScreensAnalyticsImplUrl, comAdobeCqScreensAnalyticsImplApikey, comAdobeCqScreensAnalyticsImplProject, comAdobeCqScreensAnalyticsImplEnvironment, comAdobeCqScreensAnalyticsImplSendFrequency , accept);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void comAdobeCqScreensDeviceImplDeviceServiceTest() throws Exception {
        Boolean post = null;
        Boolean apply = null;
        Boolean delete = null;
        String action = null;
        String $location = null;
        List<String> propertylist = null;
        Integer comAdobeAemScreensPlayerPingfrequency = null;
        String comAdobeAemScreensDevicePaswordSpecialchars = null;
        Integer comAdobeAemScreensDevicePaswordMinlowercasechars = null;
        Integer comAdobeAemScreensDevicePaswordMinuppercasechars = null;
        Integer comAdobeAemScreensDevicePaswordMinnumberchars = null;
        Integer comAdobeAemScreensDevicePaswordMinspecialchars = null;
        Integer comAdobeAemScreensDevicePaswordMinlength = null;
    ResponseEntity<ComAdobeCqScreensDeviceImplDeviceServiceInfo> response = api.comAdobeCqScreensDeviceImplDeviceService(post, apply, delete, action, $location, propertylist, comAdobeAemScreensPlayerPingfrequency, comAdobeAemScreensDevicePaswordSpecialchars, comAdobeAemScreensDevicePaswordMinlowercasechars, comAdobeAemScreensDevicePaswordMinuppercasechars, comAdobeAemScreensDevicePaswordMinnumberchars, comAdobeAemScreensDevicePaswordMinspecialchars, comAdobeAemScreensDevicePaswordMinlength , accept);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void comAdobeCqScreensDeviceRegistrationImplRegistrationServiceImplTest() throws Exception {
        Boolean post = null;
        Boolean apply = null;
        Boolean delete = null;
        String action = null;
        String $location = null;
        List<String> propertylist = null;
        Integer deviceRegistrationTimeout = null;
    ResponseEntity<ComAdobeCqScreensDeviceRegistrationImplRegistrationServiceImplInfo> response = api.comAdobeCqScreensDeviceRegistrationImplRegistrationServiceImpl(post, apply, delete, action, $location, propertylist, deviceRegistrationTimeout , accept);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void comAdobeCqScreensImplHandlerChannelsUpdateHandlerTest() throws Exception {
        Boolean post = null;
        Boolean apply = null;
        Boolean delete = null;
        String action = null;
        String $location = null;
        List<String> propertylist = null;
        List<String> cqPagesupdatehandlerImageresourcetypes = null;
        List<String> cqPagesupdatehandlerProductresourcetypes = null;
        List<String> cqPagesupdatehandlerVideoresourcetypes = null;
        List<String> cqPagesupdatehandlerDynamicsequenceresourcetypes = null;
        List<String> cqPagesupdatehandlerPreviewmodepaths = null;
    ResponseEntity<ComAdobeCqScreensImplHandlerChannelsUpdateHandlerInfo> response = api.comAdobeCqScreensImplHandlerChannelsUpdateHandler(post, apply, delete, action, $location, propertylist, cqPagesupdatehandlerImageresourcetypes, cqPagesupdatehandlerProductresourcetypes, cqPagesupdatehandlerVideoresourcetypes, cqPagesupdatehandlerDynamicsequenceresourcetypes, cqPagesupdatehandlerPreviewmodepaths , accept);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void comAdobeCqScreensImplJobsDistributedDevicesStatiUpdateJobTest() throws Exception {
        Boolean post = null;
        Boolean apply = null;
        Boolean delete = null;
        String action = null;
        String $location = null;
        List<String> propertylist = null;
        String schedulerExpression = null;
    ResponseEntity<ComAdobeCqScreensImplJobsDistributedDevicesStatiUpdateJobInfo> response = api.comAdobeCqScreensImplJobsDistributedDevicesStatiUpdateJob(post, apply, delete, action, $location, propertylist, schedulerExpression , accept);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void comAdobeCqScreensImplRemoteImplDistributedHttpClientImplTest() throws Exception {
        Boolean post = null;
        Boolean apply = null;
        Boolean delete = null;
        String action = null;
        String $location = null;
        List<String> propertylist = null;
        Integer comAdobeAemScreensImplRemoteRequestTimeout = null;
    ResponseEntity<ComAdobeCqScreensImplRemoteImplDistributedHttpClientImplInfo> response = api.comAdobeCqScreensImplRemoteImplDistributedHttpClientImpl(post, apply, delete, action, $location, propertylist, comAdobeAemScreensImplRemoteRequestTimeout , accept);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void comAdobeCqScreensImplScreensChannelPostProcessorTest() throws Exception {
        Boolean post = null;
        Boolean apply = null;
        Boolean delete = null;
        String action = null;
        String $location = null;
        List<String> propertylist = null;
        List<String> screensChannelsPropertiesToRemove = null;
    ResponseEntity<ComAdobeCqScreensImplScreensChannelPostProcessorInfo> response = api.comAdobeCqScreensImplScreensChannelPostProcessor(post, apply, delete, action, $location, propertylist, screensChannelsPropertiesToRemove , accept);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void comAdobeCqScreensMonitoringImplScreensMonitoringServiceImplTest() throws Exception {
        Boolean post = null;
        Boolean apply = null;
        Boolean delete = null;
        String action = null;
        String $location = null;
        List<String> propertylist = null;
        List<String> comAdobeCqScreensMonitoringImplScreensMonitoringServiceImplProjectPath = null;
        String comAdobeCqScreensMonitoringImplScreensMonitoringServiceImplScheduleFrequency = null;
        Integer comAdobeCqScreensMonitoringImplScreensMonitoringServiceImplPingTimeout = null;
        String comAdobeCqScreensMonitoringImplScreensMonitoringServiceImplRecipients = null;
        String comAdobeCqScreensMonitoringImplScreensMonitoringServiceImplSmtpserver = null;
        Integer comAdobeCqScreensMonitoringImplScreensMonitoringServiceImplSmtpport = null;
        Boolean comAdobeCqScreensMonitoringImplScreensMonitoringServiceImplUsetls = null;
        String comAdobeCqScreensMonitoringImplScreensMonitoringServiceImplUsername = null;
        String comAdobeCqScreensMonitoringImplScreensMonitoringServiceImplPassword = null;
    ResponseEntity<ComAdobeCqScreensMonitoringImplScreensMonitoringServiceImplInfo> response = api.comAdobeCqScreensMonitoringImplScreensMonitoringServiceImpl(post, apply, delete, action, $location, propertylist, comAdobeCqScreensMonitoringImplScreensMonitoringServiceImplProjectPath, comAdobeCqScreensMonitoringImplScreensMonitoringServiceImplScheduleFrequency, comAdobeCqScreensMonitoringImplScreensMonitoringServiceImplPingTimeout, comAdobeCqScreensMonitoringImplScreensMonitoringServiceImplRecipients, comAdobeCqScreensMonitoringImplScreensMonitoringServiceImplSmtpserver, comAdobeCqScreensMonitoringImplScreensMonitoringServiceImplSmtpport, comAdobeCqScreensMonitoringImplScreensMonitoringServiceImplUsetls, comAdobeCqScreensMonitoringImplScreensMonitoringServiceImplUsername, comAdobeCqScreensMonitoringImplScreensMonitoringServiceImplPassword , accept);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void comAdobeCqScreensMqActivemqImplArtemisJMSProviderTest() throws Exception {
        Boolean post = null;
        Boolean apply = null;
        Boolean delete = null;
        String action = null;
        String $location = null;
        List<String> propertylist = null;
        Integer serviceRanking = null;
        Integer globalSize = null;
        Integer maxDiskUsage = null;
        Boolean persistenceEnabled = null;
        Integer threadPoolMaxSize = null;
        Integer scheduledThreadPoolMaxSize = null;
        Integer gracefulShutdownTimeout = null;
        List<String> queues = null;
        List<String> topics = null;
        Integer addressesMaxDeliveryAttempts = null;
        Integer addressesExpiryDelay = null;
        String addressesAddressFullMessagePolicy = null;
        Integer addressesMaxSizeBytes = null;
        Integer addressesPageSizeBytes = null;
        Integer addressesPageCacheMaxSize = null;
        String clusterUser = null;
        String clusterPassword = null;
        Integer clusterCallTimeout = null;
        Integer clusterCallFailoverTimeout = null;
        Integer clusterClientFailureCheckPeriod = null;
        Integer clusterNotificationAttempts = null;
        Integer clusterNotificationInterval = null;
        Integer idCacheSize = null;
        Integer clusterConfirmationWindowSize = null;
        Integer clusterConnectionTtl = null;
        Boolean clusterDuplicateDetection = null;
        Integer clusterInitialConnectAttempts = null;
        Integer clusterMaxRetryInterval = null;
        Integer clusterMinLargeMessageSize = null;
        Integer clusterProducerWindowSize = null;
        Integer clusterReconnectAttempts = null;
        Integer clusterRetryInterval = null;
        BigDecimal clusterRetryIntervalMultiplier = null;
    ResponseEntity<ComAdobeCqScreensMqActivemqImplArtemisJMSProviderInfo> response = api.comAdobeCqScreensMqActivemqImplArtemisJMSProvider(post, apply, delete, action, $location, propertylist, serviceRanking, globalSize, maxDiskUsage, persistenceEnabled, threadPoolMaxSize, scheduledThreadPoolMaxSize, gracefulShutdownTimeout, queues, topics, addressesMaxDeliveryAttempts, addressesExpiryDelay, addressesAddressFullMessagePolicy, addressesMaxSizeBytes, addressesPageSizeBytes, addressesPageCacheMaxSize, clusterUser, clusterPassword, clusterCallTimeout, clusterCallFailoverTimeout, clusterClientFailureCheckPeriod, clusterNotificationAttempts, clusterNotificationInterval, idCacheSize, clusterConfirmationWindowSize, clusterConnectionTtl, clusterDuplicateDetection, clusterInitialConnectAttempts, clusterMaxRetryInterval, clusterMinLargeMessageSize, clusterProducerWindowSize, clusterReconnectAttempts, clusterRetryInterval, clusterRetryIntervalMultiplier , accept);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void comAdobeCqScreensOfflinecontentImplBulkOfflineUpdateServiceImplTest() throws Exception {
        Boolean post = null;
        Boolean apply = null;
        Boolean delete = null;
        String action = null;
        String $location = null;
        List<String> propertylist = null;
        List<String> comAdobeCqScreensOfflinecontentImplBulkOfflineUpdateServiceImplProjectPath = null;
        String comAdobeCqScreensOfflinecontentImplBulkOfflineUpdateServiceImplScheduleFrequency = null;
    ResponseEntity<ComAdobeCqScreensOfflinecontentImplBulkOfflineUpdateServiceImplInfo> response = api.comAdobeCqScreensOfflinecontentImplBulkOfflineUpdateServiceImpl(post, apply, delete, action, $location, propertylist, comAdobeCqScreensOfflinecontentImplBulkOfflineUpdateServiceImplProjectPath, comAdobeCqScreensOfflinecontentImplBulkOfflineUpdateServiceImplScheduleFrequency , accept);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void comAdobeCqScreensOfflinecontentImplOfflineContentServiceImplTest() throws Exception {
        Boolean post = null;
        Boolean apply = null;
        Boolean delete = null;
        String action = null;
        String $location = null;
        List<String> propertylist = null;
        Boolean disableSmartSync = null;
    ResponseEntity<ComAdobeCqScreensOfflinecontentImplOfflineContentServiceImplInfo> response = api.comAdobeCqScreensOfflinecontentImplOfflineContentServiceImpl(post, apply, delete, action, $location, propertylist, disableSmartSync , accept);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void comAdobeCqScreensSegmentationImplSegmentationFeatureFlagTest() throws Exception {
        Boolean post = null;
        Boolean apply = null;
        Boolean delete = null;
        String action = null;
        String $location = null;
        List<String> propertylist = null;
        Boolean enableDataTriggeredContent = null;
    ResponseEntity<ComAdobeCqScreensSegmentationImplSegmentationFeatureFlagInfo> response = api.comAdobeCqScreensSegmentationImplSegmentationFeatureFlag(post, apply, delete, action, $location, propertylist, enableDataTriggeredContent , accept);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void comAdobeCqSecurityHcBundlesImplHtmlLibraryManagerConfigHealthChTest() throws Exception {
        Boolean post = null;
        Boolean apply = null;
        Boolean delete = null;
        String action = null;
        String $location = null;
        List<String> propertylist = null;
        List<String> hcTags = null;
    ResponseEntity<ComAdobeCqSecurityHcBundlesImplHtmlLibraryManagerConfigHealthChInfo> response = api.comAdobeCqSecurityHcBundlesImplHtmlLibraryManagerConfigHealthCh(post, apply, delete, action, $location, propertylist, hcTags , accept);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void comAdobeCqSecurityHcBundlesImplWcmFilterHealthCheckTest() throws Exception {
        Boolean post = null;
        Boolean apply = null;
        Boolean delete = null;
        String action = null;
        String $location = null;
        List<String> propertylist = null;
        List<String> hcTags = null;
    ResponseEntity<ComAdobeCqSecurityHcBundlesImplWcmFilterHealthCheckInfo> response = api.comAdobeCqSecurityHcBundlesImplWcmFilterHealthCheck(post, apply, delete, action, $location, propertylist, hcTags , accept);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void comAdobeCqSecurityHcDispatcherImplDispatcherAccessHealthCheckTest() throws Exception {
        Boolean post = null;
        Boolean apply = null;
        Boolean delete = null;
        String action = null;
        String $location = null;
        List<String> propertylist = null;
        List<String> hcTags = null;
        String dispatcherAddress = null;
        List<String> dispatcherFilterAllowed = null;
        List<String> dispatcherFilterBlocked = null;
    ResponseEntity<ComAdobeCqSecurityHcDispatcherImplDispatcherAccessHealthCheckInfo> response = api.comAdobeCqSecurityHcDispatcherImplDispatcherAccessHealthCheck(post, apply, delete, action, $location, propertylist, hcTags, dispatcherAddress, dispatcherFilterAllowed, dispatcherFilterBlocked , accept);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void comAdobeCqSecurityHcPackagesImplExampleContentHealthCheckTest() throws Exception {
        Boolean post = null;
        Boolean apply = null;
        Boolean delete = null;
        String action = null;
        String $location = null;
        List<String> propertylist = null;
        List<String> hcTags = null;
    ResponseEntity<ComAdobeCqSecurityHcPackagesImplExampleContentHealthCheckInfo> response = api.comAdobeCqSecurityHcPackagesImplExampleContentHealthCheck(post, apply, delete, action, $location, propertylist, hcTags , accept);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void comAdobeCqSecurityHcWebserverImplClickjackingHealthCheckTest() throws Exception {
        Boolean post = null;
        Boolean apply = null;
        Boolean delete = null;
        String action = null;
        String $location = null;
        List<String> propertylist = null;
        List<String> hcTags = null;
        String webserverAddress = null;
    ResponseEntity<ComAdobeCqSecurityHcWebserverImplClickjackingHealthCheckInfo> response = api.comAdobeCqSecurityHcWebserverImplClickjackingHealthCheck(post, apply, delete, action, $location, propertylist, hcTags, webserverAddress , accept);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void comAdobeCqSocialAccountverificationImplAccountManagementConfigImTest() throws Exception {
        Boolean post = null;
        Boolean apply = null;
        Boolean delete = null;
        String action = null;
        String $location = null;
        List<String> propertylist = null;
        Boolean enable = null;
        Integer ttl1 = null;
        Integer ttl2 = null;
    ResponseEntity<ComAdobeCqSocialAccountverificationImplAccountManagementConfigImInfo> response = api.comAdobeCqSocialAccountverificationImplAccountManagementConfigIm(post, apply, delete, action, $location, propertylist, enable, ttl1, ttl2 , accept);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void comAdobeCqSocialActivitystreamsClientImplSocialActivityComponenTest() throws Exception {
        Boolean post = null;
        Boolean apply = null;
        Boolean delete = null;
        String action = null;
        String $location = null;
        List<String> propertylist = null;
        Integer priority = null;
    ResponseEntity<ComAdobeCqSocialActivitystreamsClientImplSocialActivityComponenInfo> response = api.comAdobeCqSocialActivitystreamsClientImplSocialActivityComponen(post, apply, delete, action, $location, propertylist, priority , accept);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void comAdobeCqSocialActivitystreamsClientImplSocialActivityStreamCoTest() throws Exception {
        Boolean post = null;
        Boolean apply = null;
        Boolean delete = null;
        String action = null;
        String $location = null;
        List<String> propertylist = null;
        Integer priority = null;
    ResponseEntity<ComAdobeCqSocialActivitystreamsClientImplSocialActivityStreamCoInfo> response = api.comAdobeCqSocialActivitystreamsClientImplSocialActivityStreamCo(post, apply, delete, action, $location, propertylist, priority , accept);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void comAdobeCqSocialActivitystreamsListenerImplEventListenerHandlerTest() throws Exception {
        Boolean post = null;
        Boolean apply = null;
        Boolean delete = null;
        String action = null;
        String $location = null;
        List<String> propertylist = null;
        String eventTopics = null;
        String eventFilter = null;
    ResponseEntity<ComAdobeCqSocialActivitystreamsListenerImplEventListenerHandlerInfo> response = api.comAdobeCqSocialActivitystreamsListenerImplEventListenerHandler(post, apply, delete, action, $location, propertylist, eventTopics, eventFilter , accept);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void comAdobeCqSocialActivitystreamsListenerImplModerationEventExtenTest() throws Exception {
        Boolean post = null;
        Boolean apply = null;
        Boolean delete = null;
        String action = null;
        String $location = null;
        List<String> propertylist = null;
        Boolean accepted = null;
        Integer ranked = null;
    ResponseEntity<ComAdobeCqSocialActivitystreamsListenerImplModerationEventExtenInfo> response = api.comAdobeCqSocialActivitystreamsListenerImplModerationEventExten(post, apply, delete, action, $location, propertylist, accepted, ranked , accept);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void comAdobeCqSocialActivitystreamsListenerImplRatingEventActivitySTest() throws Exception {
        Boolean post = null;
        Boolean apply = null;
        Boolean delete = null;
        String action = null;
        String $location = null;
        List<String> propertylist = null;
        Integer ranking = null;
        Boolean enable = null;
    ResponseEntity<ComAdobeCqSocialActivitystreamsListenerImplRatingEventActivitySInfo> response = api.comAdobeCqSocialActivitystreamsListenerImplRatingEventActivityS(post, apply, delete, action, $location, propertylist, ranking, enable , accept);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void comAdobeCqSocialActivitystreamsListenerImplResourceActivityStreTest() throws Exception {
        Boolean post = null;
        Boolean apply = null;
        Boolean delete = null;
        String action = null;
        String $location = null;
        List<String> propertylist = null;
        String streamPath = null;
        String streamName = null;
    ResponseEntity<ComAdobeCqSocialActivitystreamsListenerImplResourceActivityStreInfo> response = api.comAdobeCqSocialActivitystreamsListenerImplResourceActivityStre(post, apply, delete, action, $location, propertylist, streamPath, streamName , accept);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void comAdobeCqSocialCalendarClientEndpointsImplCalendarOperationsITest() throws Exception {
        Boolean post = null;
        Boolean apply = null;
        Boolean delete = null;
        String action = null;
        String $location = null;
        List<String> propertylist = null;
        Integer maxRetry = null;
        List<String> fieldWhitelist = null;
        List<String> attachmentTypeBlacklist = null;
    ResponseEntity<ComAdobeCqSocialCalendarClientEndpointsImplCalendarOperationsIInfo> response = api.comAdobeCqSocialCalendarClientEndpointsImplCalendarOperationsI(post, apply, delete, action, $location, propertylist, maxRetry, fieldWhitelist, attachmentTypeBlacklist , accept);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void comAdobeCqSocialCalendarClientOperationextensionsEventAttachmenTest() throws Exception {
        Boolean post = null;
        Boolean apply = null;
        Boolean delete = null;
        String action = null;
        String $location = null;
        List<String> propertylist = null;
        String attachmentTypeBlacklist = null;
        Integer extensionOrder = null;
    ResponseEntity<ComAdobeCqSocialCalendarClientOperationextensionsEventAttachmenInfo> response = api.comAdobeCqSocialCalendarClientOperationextensionsEventAttachmen(post, apply, delete, action, $location, propertylist, attachmentTypeBlacklist, extensionOrder , accept);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void comAdobeCqSocialCalendarServletsTimeZoneServletTest() throws Exception {
        Boolean post = null;
        Boolean apply = null;
        Boolean delete = null;
        String action = null;
        String $location = null;
        List<String> propertylist = null;
        Integer timezonesExpirytime = null;
    ResponseEntity<ComAdobeCqSocialCalendarServletsTimeZoneServletInfo> response = api.comAdobeCqSocialCalendarServletsTimeZoneServlet(post, apply, delete, action, $location, propertylist, timezonesExpirytime , accept);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void comAdobeCqSocialCommonsCommentsEndpointsImplCommentDeleteEventTest() throws Exception {
        Boolean post = null;
        Boolean apply = null;
        Boolean delete = null;
        String action = null;
        String $location = null;
        List<String> propertylist = null;
        Integer ranking = null;
    ResponseEntity<ComAdobeCqSocialCommonsCommentsEndpointsImplCommentDeleteEventInfo> response = api.comAdobeCqSocialCommonsCommentsEndpointsImplCommentDeleteEvent(post, apply, delete, action, $location, propertylist, ranking , accept);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void comAdobeCqSocialCommonsCommentsEndpointsImplCommentOperationSeTest() throws Exception {
        Boolean post = null;
        Boolean apply = null;
        Boolean delete = null;
        String action = null;
        String $location = null;
        List<String> propertylist = null;
        List<String> fieldWhitelist = null;
        List<String> attachmentTypeBlacklist = null;
    ResponseEntity<ComAdobeCqSocialCommonsCommentsEndpointsImplCommentOperationSeInfo> response = api.comAdobeCqSocialCommonsCommentsEndpointsImplCommentOperationSe(post, apply, delete, action, $location, propertylist, fieldWhitelist, attachmentTypeBlacklist , accept);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void comAdobeCqSocialCommonsCommentsEndpointsImplTranslationOperatiTest() throws Exception {
        Boolean post = null;
        Boolean apply = null;
        Boolean delete = null;
        String action = null;
        String $location = null;
        List<String> propertylist = null;
        List<String> fieldWhitelist = null;
        List<String> attachmentTypeBlacklist = null;
    ResponseEntity<ComAdobeCqSocialCommonsCommentsEndpointsImplTranslationOperatiInfo> response = api.comAdobeCqSocialCommonsCommentsEndpointsImplTranslationOperati(post, apply, delete, action, $location, propertylist, fieldWhitelist, attachmentTypeBlacklist , accept);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void comAdobeCqSocialCommonsCommentsListingImplSearchCommentSocialCTest() throws Exception {
        Boolean post = null;
        Boolean apply = null;
        Boolean delete = null;
        String action = null;
        String $location = null;
        List<String> propertylist = null;
        Integer numUserLimit = null;
    ResponseEntity<ComAdobeCqSocialCommonsCommentsListingImplSearchCommentSocialCInfo> response = api.comAdobeCqSocialCommonsCommentsListingImplSearchCommentSocialC(post, apply, delete, action, $location, propertylist, numUserLimit , accept);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void comAdobeCqSocialCommonsCommentsSchedulerImplSearchScheduledPosTest() throws Exception {
        Boolean post = null;
        Boolean apply = null;
        Boolean delete = null;
        String action = null;
        String $location = null;
        List<String> propertylist = null;
        Boolean enableScheduledPostsSearch = null;
        Integer numberOfMinutes = null;
        Integer maxSearchLimit = null;
    ResponseEntity<ComAdobeCqSocialCommonsCommentsSchedulerImplSearchScheduledPosInfo> response = api.comAdobeCqSocialCommonsCommentsSchedulerImplSearchScheduledPos(post, apply, delete, action, $location, propertylist, enableScheduledPostsSearch, numberOfMinutes, maxSearchLimit , accept);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void comAdobeCqSocialCommonsCorsCORSAuthenticationFilterTest() throws Exception {
        Boolean post = null;
        Boolean apply = null;
        Boolean delete = null;
        String action = null;
        String $location = null;
        List<String> propertylist = null;
        Boolean corsEnabling = null;
    ResponseEntity<ComAdobeCqSocialCommonsCorsCORSAuthenticationFilterInfo> response = api.comAdobeCqSocialCommonsCorsCORSAuthenticationFilter(post, apply, delete, action, $location, propertylist, corsEnabling , accept);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void comAdobeCqSocialCommonsEmailreplyImplAndroidEmailClientProviderTest() throws Exception {
        Boolean post = null;
        Boolean apply = null;
        Boolean delete = null;
        String action = null;
        String $location = null;
        List<String> propertylist = null;
        Integer priorityOrder = null;
        List<String> replyEmailPatterns = null;
    ResponseEntity<ComAdobeCqSocialCommonsEmailreplyImplAndroidEmailClientProviderInfo> response = api.comAdobeCqSocialCommonsEmailreplyImplAndroidEmailClientProvider(post, apply, delete, action, $location, propertylist, priorityOrder, replyEmailPatterns , accept);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void comAdobeCqSocialCommonsEmailreplyImplCommentEmailBuilderImplTest() throws Exception {
        Boolean post = null;
        Boolean apply = null;
        Boolean delete = null;
        String action = null;
        String $location = null;
        List<String> propertylist = null;
        String contextPath = null;
    ResponseEntity<ComAdobeCqSocialCommonsEmailreplyImplCommentEmailBuilderImplInfo> response = api.comAdobeCqSocialCommonsEmailreplyImplCommentEmailBuilderImpl(post, apply, delete, action, $location, propertylist, contextPath , accept);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void comAdobeCqSocialCommonsEmailreplyImplCommentEmailEventListenerTest() throws Exception {
        Boolean post = null;
        Boolean apply = null;
        Boolean delete = null;
        String action = null;
        String $location = null;
        List<String> propertylist = null;
        String eventTopics = null;
    ResponseEntity<ComAdobeCqSocialCommonsEmailreplyImplCommentEmailEventListenerInfo> response = api.comAdobeCqSocialCommonsEmailreplyImplCommentEmailEventListener(post, apply, delete, action, $location, propertylist, eventTopics , accept);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void comAdobeCqSocialCommonsEmailreplyImplCustomEmailClientProviderTest() throws Exception {
        Boolean post = null;
        Boolean apply = null;
        Boolean delete = null;
        String action = null;
        String $location = null;
        List<String> propertylist = null;
        Integer priorityOrder = null;
        List<String> replyEmailPatterns = null;
    ResponseEntity<ComAdobeCqSocialCommonsEmailreplyImplCustomEmailClientProviderInfo> response = api.comAdobeCqSocialCommonsEmailreplyImplCustomEmailClientProvider(post, apply, delete, action, $location, propertylist, priorityOrder, replyEmailPatterns , accept);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void comAdobeCqSocialCommonsEmailreplyImplEmailQuotedTextPatternsImpTest() throws Exception {
        Boolean post = null;
        Boolean apply = null;
        Boolean delete = null;
        String action = null;
        String $location = null;
        List<String> propertylist = null;
        String patternTime = null;
        String patternNewline = null;
        String patternDayOfMonth = null;
        String patternMonth = null;
        String patternYear = null;
        String patternDate = null;
        String patternDateTime = null;
        String patternEmail = null;
    ResponseEntity<ComAdobeCqSocialCommonsEmailreplyImplEmailQuotedTextPatternsImpInfo> response = api.comAdobeCqSocialCommonsEmailreplyImplEmailQuotedTextPatternsImp(post, apply, delete, action, $location, propertylist, patternTime, patternNewline, patternDayOfMonth, patternMonth, patternYear, patternDate, patternDateTime, patternEmail , accept);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void comAdobeCqSocialCommonsEmailreplyImplEmailReplyConfigurationImpTest() throws Exception {
        Boolean post = null;
        Boolean apply = null;
        Boolean delete = null;
        String action = null;
        String $location = null;
        List<String> propertylist = null;
        String emailName = null;
        Boolean emailCreatePostFromReply = null;
        String emailAddCommentIdTo = null;
        Integer emailSubjectMaximumLength = null;
        String emailReplyToAddress = null;
        String emailReplyToDelimiter = null;
        String emailTrackerIdPrefixInSubject = null;
        String emailTrackerIdPrefixInBody = null;
        Boolean emailAsHTML = null;
        String emailDefaultUserName = null;
        String emailTemplatesRootPath = null;
    ResponseEntity<ComAdobeCqSocialCommonsEmailreplyImplEmailReplyConfigurationImpInfo> response = api.comAdobeCqSocialCommonsEmailreplyImplEmailReplyConfigurationImp(post, apply, delete, action, $location, propertylist, emailName, emailCreatePostFromReply, emailAddCommentIdTo, emailSubjectMaximumLength, emailReplyToAddress, emailReplyToDelimiter, emailTrackerIdPrefixInSubject, emailTrackerIdPrefixInBody, emailAsHTML, emailDefaultUserName, emailTemplatesRootPath , accept);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void comAdobeCqSocialCommonsEmailreplyImplEmailReplyImporterTest() throws Exception {
        Boolean post = null;
        Boolean apply = null;
        Boolean delete = null;
        String action = null;
        String $location = null;
        List<String> propertylist = null;
        String connectProtocol = null;
    ResponseEntity<ComAdobeCqSocialCommonsEmailreplyImplEmailReplyImporterInfo> response = api.comAdobeCqSocialCommonsEmailreplyImplEmailReplyImporter(post, apply, delete, action, $location, propertylist, connectProtocol , accept);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void comAdobeCqSocialCommonsEmailreplyImplGmailEmailClientProviderTest() throws Exception {
        Boolean post = null;
        Boolean apply = null;
        Boolean delete = null;
        String action = null;
        String $location = null;
        List<String> propertylist = null;
        Integer priorityOrder = null;
        List<String> replyEmailPatterns = null;
    ResponseEntity<ComAdobeCqSocialCommonsEmailreplyImplGmailEmailClientProviderInfo> response = api.comAdobeCqSocialCommonsEmailreplyImplGmailEmailClientProvider(post, apply, delete, action, $location, propertylist, priorityOrder, replyEmailPatterns , accept);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void comAdobeCqSocialCommonsEmailreplyImplIOSEmailClientProviderTest() throws Exception {
        Boolean post = null;
        Boolean apply = null;
        Boolean delete = null;
        String action = null;
        String $location = null;
        List<String> propertylist = null;
        Integer priorityOrder = null;
        List<String> replyEmailPatterns = null;
    ResponseEntity<ComAdobeCqSocialCommonsEmailreplyImplIOSEmailClientProviderInfo> response = api.comAdobeCqSocialCommonsEmailreplyImplIOSEmailClientProvider(post, apply, delete, action, $location, propertylist, priorityOrder, replyEmailPatterns , accept);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void comAdobeCqSocialCommonsEmailreplyImplMacmailEmailClientProviderTest() throws Exception {
        Boolean post = null;
        Boolean apply = null;
        Boolean delete = null;
        String action = null;
        String $location = null;
        List<String> propertylist = null;
        Integer priorityOrder = null;
        List<String> replyEmailPatterns = null;
    ResponseEntity<ComAdobeCqSocialCommonsEmailreplyImplMacmailEmailClientProviderInfo> response = api.comAdobeCqSocialCommonsEmailreplyImplMacmailEmailClientProvider(post, apply, delete, action, $location, propertylist, priorityOrder, replyEmailPatterns , accept);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void comAdobeCqSocialCommonsEmailreplyImplOutLookEmailClientProviderTest() throws Exception {
        Boolean post = null;
        Boolean apply = null;
        Boolean delete = null;
        String action = null;
        String $location = null;
        List<String> propertylist = null;
        Integer priorityOrder = null;
        List<String> replyEmailPatterns = null;
    ResponseEntity<ComAdobeCqSocialCommonsEmailreplyImplOutLookEmailClientProviderInfo> response = api.comAdobeCqSocialCommonsEmailreplyImplOutLookEmailClientProvider(post, apply, delete, action, $location, propertylist, priorityOrder, replyEmailPatterns , accept);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void comAdobeCqSocialCommonsEmailreplyImplUnknownEmailClientProviderTest() throws Exception {
        Boolean post = null;
        Boolean apply = null;
        Boolean delete = null;
        String action = null;
        String $location = null;
        List<String> propertylist = null;
        List<String> replyEmailPatterns = null;
        Integer priorityOrder = null;
    ResponseEntity<ComAdobeCqSocialCommonsEmailreplyImplUnknownEmailClientProviderInfo> response = api.comAdobeCqSocialCommonsEmailreplyImplUnknownEmailClientProvider(post, apply, delete, action, $location, propertylist, replyEmailPatterns, priorityOrder , accept);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void comAdobeCqSocialCommonsEmailreplyImplYahooEmailClientProviderTest() throws Exception {
        Boolean post = null;
        Boolean apply = null;
        Boolean delete = null;
        String action = null;
        String $location = null;
        List<String> propertylist = null;
        Integer priorityOrder = null;
        List<String> replyEmailPatterns = null;
    ResponseEntity<ComAdobeCqSocialCommonsEmailreplyImplYahooEmailClientProviderInfo> response = api.comAdobeCqSocialCommonsEmailreplyImplYahooEmailClientProvider(post, apply, delete, action, $location, propertylist, priorityOrder, replyEmailPatterns , accept);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void comAdobeCqSocialCommonsMaintainanceImplDeleteTempUGCImageUploadTest() throws Exception {
        Boolean post = null;
        Boolean apply = null;
        Boolean delete = null;
        String action = null;
        String $location = null;
        List<String> propertylist = null;
        Integer numberOfDays = null;
        Integer ageOfFile = null;
    ResponseEntity<ComAdobeCqSocialCommonsMaintainanceImplDeleteTempUGCImageUploadInfo> response = api.comAdobeCqSocialCommonsMaintainanceImplDeleteTempUGCImageUpload(post, apply, delete, action, $location, propertylist, numberOfDays, ageOfFile , accept);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void comAdobeCqSocialCommonsUgclimiterImplUGCLimiterServiceImplTest() throws Exception {
        Boolean post = null;
        Boolean apply = null;
        Boolean delete = null;
        String action = null;
        String $location = null;
        List<String> propertylist = null;
        String eventTopics = null;
        String eventFilter = null;
        List<String> verbs = null;
    ResponseEntity<ComAdobeCqSocialCommonsUgclimiterImplUGCLimiterServiceImplInfo> response = api.comAdobeCqSocialCommonsUgclimiterImplUGCLimiterServiceImpl(post, apply, delete, action, $location, propertylist, eventTopics, eventFilter, verbs , accept);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void comAdobeCqSocialCommonsUgclimitsconfigImplCommunityUserUGCLimitTest() throws Exception {
        Boolean post = null;
        Boolean apply = null;
        Boolean delete = null;
        String action = null;
        String $location = null;
        List<String> propertylist = null;
        Boolean enable = null;
        Integer ugCLimit = null;
        Integer ugcLimitDuration = null;
        List<String> domains = null;
        List<String> toList = null;
    ResponseEntity<ComAdobeCqSocialCommonsUgclimitsconfigImplCommunityUserUGCLimitInfo> response = api.comAdobeCqSocialCommonsUgclimitsconfigImplCommunityUserUGCLimit(post, apply, delete, action, $location, propertylist, enable, ugCLimit, ugcLimitDuration, domains, toList , accept);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void comAdobeCqSocialConnectOauthImplFacebookProviderImplTest() throws Exception {
        Boolean post = null;
        Boolean apply = null;
        Boolean delete = null;
        String action = null;
        String $location = null;
        List<String> propertylist = null;
        String oauthProviderId = null;
        String oauthCloudConfigRoot = null;
        String providerConfigRoot = null;
        Boolean providerConfigCreateTagsEnabled = null;
        String providerConfigUserFolder = null;
        Boolean providerConfigFacebookFetchFields = null;
        List<String> providerConfigFacebookFields = null;
        Boolean providerConfigRefreshUserdataEnabled = null;
    ResponseEntity<ComAdobeCqSocialConnectOauthImplFacebookProviderImplInfo> response = api.comAdobeCqSocialConnectOauthImplFacebookProviderImpl(post, apply, delete, action, $location, propertylist, oauthProviderId, oauthCloudConfigRoot, providerConfigRoot, providerConfigCreateTagsEnabled, providerConfigUserFolder, providerConfigFacebookFetchFields, providerConfigFacebookFields, providerConfigRefreshUserdataEnabled , accept);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void comAdobeCqSocialConnectOauthImplSocialOAuthAuthenticationHandleTest() throws Exception {
        Boolean post = null;
        Boolean apply = null;
        Boolean delete = null;
        String action = null;
        String $location = null;
        List<String> propertylist = null;
        List<String> path = null;
        Integer serviceRanking = null;
    ResponseEntity<ComAdobeCqSocialConnectOauthImplSocialOAuthAuthenticationHandleInfo> response = api.comAdobeCqSocialConnectOauthImplSocialOAuthAuthenticationHandle(post, apply, delete, action, $location, propertylist, path, serviceRanking , accept);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void comAdobeCqSocialConnectOauthImplSocialOAuthUserProfileMapperTest() throws Exception {
        Boolean post = null;
        Boolean apply = null;
        Boolean delete = null;
        String action = null;
        String $location = null;
        List<String> propertylist = null;
        List<String> facebook = null;
        List<String> twitter = null;
        String providerConfigUserFolder = null;
    ResponseEntity<ComAdobeCqSocialConnectOauthImplSocialOAuthUserProfileMapperInfo> response = api.comAdobeCqSocialConnectOauthImplSocialOAuthUserProfileMapper(post, apply, delete, action, $location, propertylist, facebook, twitter, providerConfigUserFolder , accept);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void comAdobeCqSocialConnectOauthImplTwitterProviderImplTest() throws Exception {
        Boolean post = null;
        Boolean apply = null;
        Boolean delete = null;
        String action = null;
        String $location = null;
        List<String> propertylist = null;
        String oauthProviderId = null;
        String oauthCloudConfigRoot = null;
        String providerConfigRoot = null;
        String providerConfigUserFolder = null;
        Boolean providerConfigTwitterEnableParams = null;
        List<String> providerConfigTwitterParams = null;
        Boolean providerConfigRefreshUserdataEnabled = null;
    ResponseEntity<ComAdobeCqSocialConnectOauthImplTwitterProviderImplInfo> response = api.comAdobeCqSocialConnectOauthImplTwitterProviderImpl(post, apply, delete, action, $location, propertylist, oauthProviderId, oauthCloudConfigRoot, providerConfigRoot, providerConfigUserFolder, providerConfigTwitterEnableParams, providerConfigTwitterParams, providerConfigRefreshUserdataEnabled , accept);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void comAdobeCqSocialContentFragmentsServicesImplCommunitiesFragmenTest() throws Exception {
        Boolean post = null;
        Boolean apply = null;
        Boolean delete = null;
        String action = null;
        String $location = null;
        List<String> propertylist = null;
        Boolean cqSocialContentFragmentsServicesEnabled = null;
        Integer cqSocialContentFragmentsServicesWaitTimeSeconds = null;
    ResponseEntity<ComAdobeCqSocialContentFragmentsServicesImplCommunitiesFragmenInfo> response = api.comAdobeCqSocialContentFragmentsServicesImplCommunitiesFragmen(post, apply, delete, action, $location, propertylist, cqSocialContentFragmentsServicesEnabled, cqSocialContentFragmentsServicesWaitTimeSeconds , accept);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void comAdobeCqSocialDatastoreAsImplASResourceProviderFactoryTest() throws Exception {
        Boolean post = null;
        Boolean apply = null;
        Boolean delete = null;
        String action = null;
        String $location = null;
        List<String> propertylist = null;
        String versionId = null;
        Boolean cacheOn = null;
        Integer concurrencyLevel = null;
        Integer cacheStartSize = null;
        Integer cacheTtl = null;
        Integer cacheSize = null;
        Integer timeLimit = null;
    ResponseEntity<ComAdobeCqSocialDatastoreAsImplASResourceProviderFactoryInfo> response = api.comAdobeCqSocialDatastoreAsImplASResourceProviderFactory(post, apply, delete, action, $location, propertylist, versionId, cacheOn, concurrencyLevel, cacheStartSize, cacheTtl, cacheSize, timeLimit , accept);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void comAdobeCqSocialDatastoreOpImplSocialMSResourceProviderFactoryTest() throws Exception {
        Boolean post = null;
        Boolean apply = null;
        Boolean delete = null;
        String action = null;
        String $location = null;
        List<String> propertylist = null;
        String solrZkTimeout = null;
        String solrCommit = null;
        Boolean cacheOn = null;
        Integer concurrencyLevel = null;
        Integer cacheStartSize = null;
        Integer cacheTtl = null;
        Integer cacheSize = null;
    ResponseEntity<ComAdobeCqSocialDatastoreOpImplSocialMSResourceProviderFactoryInfo> response = api.comAdobeCqSocialDatastoreOpImplSocialMSResourceProviderFactory(post, apply, delete, action, $location, propertylist, solrZkTimeout, solrCommit, cacheOn, concurrencyLevel, cacheStartSize, cacheTtl, cacheSize , accept);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void comAdobeCqSocialDatastoreRdbImplSocialRDBResourceProviderFactorTest() throws Exception {
        Boolean post = null;
        Boolean apply = null;
        Boolean delete = null;
        String action = null;
        String $location = null;
        List<String> propertylist = null;
        String solrZkTimeout = null;
        String solrCommit = null;
        Boolean cacheOn = null;
        Integer concurrencyLevel = null;
        Integer cacheStartSize = null;
        Integer cacheTtl = null;
        Integer cacheSize = null;
    ResponseEntity<ComAdobeCqSocialDatastoreRdbImplSocialRDBResourceProviderFactorInfo> response = api.comAdobeCqSocialDatastoreRdbImplSocialRDBResourceProviderFactor(post, apply, delete, action, $location, propertylist, solrZkTimeout, solrCommit, cacheOn, concurrencyLevel, cacheStartSize, cacheTtl, cacheSize , accept);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void comAdobeCqSocialEnablementAdaptorsEnablementLearningPathAdaptorFTest() throws Exception {
        Boolean post = null;
        Boolean apply = null;
        Boolean delete = null;
        String action = null;
        String $location = null;
        List<String> propertylist = null;
        Boolean isMemberCheck = null;
    ResponseEntity<ComAdobeCqSocialEnablementAdaptorsEnablementLearningPathAdaptorFInfo> response = api.comAdobeCqSocialEnablementAdaptorsEnablementLearningPathAdaptorF(post, apply, delete, action, $location, propertylist, isMemberCheck , accept);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void comAdobeCqSocialEnablementAdaptorsEnablementResourceAdaptorFactoTest() throws Exception {
        Boolean post = null;
        Boolean apply = null;
        Boolean delete = null;
        String action = null;
        String $location = null;
        List<String> propertylist = null;
        Boolean isMemberCheck = null;
    ResponseEntity<ComAdobeCqSocialEnablementAdaptorsEnablementResourceAdaptorFactoInfo> response = api.comAdobeCqSocialEnablementAdaptorsEnablementResourceAdaptorFacto(post, apply, delete, action, $location, propertylist, isMemberCheck , accept);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void comAdobeCqSocialEnablementLearningpathEndpointsImplEnablementLTest() throws Exception {
        Boolean post = null;
        Boolean apply = null;
        Boolean delete = null;
        String action = null;
        String $location = null;
        List<String> propertylist = null;
        List<String> fieldWhitelist = null;
    ResponseEntity<ComAdobeCqSocialEnablementLearningpathEndpointsImplEnablementLInfo> response = api.comAdobeCqSocialEnablementLearningpathEndpointsImplEnablementL(post, apply, delete, action, $location, propertylist, fieldWhitelist , accept);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void comAdobeCqSocialEnablementResourceEndpointsImplEnablementResouTest() throws Exception {
        Boolean post = null;
        Boolean apply = null;
        Boolean delete = null;
        String action = null;
        String $location = null;
        List<String> propertylist = null;
        List<String> fieldWhitelist = null;
    ResponseEntity<ComAdobeCqSocialEnablementResourceEndpointsImplEnablementResouInfo> response = api.comAdobeCqSocialEnablementResourceEndpointsImplEnablementResou(post, apply, delete, action, $location, propertylist, fieldWhitelist , accept);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void comAdobeCqSocialEnablementServicesImplAuthorMarkerImplTest() throws Exception {
        Boolean post = null;
        Boolean apply = null;
        Boolean delete = null;
        String action = null;
        String $location = null;
        List<String> propertylist = null;
        Integer serviceRanking = null;
    ResponseEntity<ComAdobeCqSocialEnablementServicesImplAuthorMarkerImplInfo> response = api.comAdobeCqSocialEnablementServicesImplAuthorMarkerImpl(post, apply, delete, action, $location, propertylist, serviceRanking , accept);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void comAdobeCqSocialFilelibraryClientEndpointsFilelibraryDownloadGeTest() throws Exception {
        Boolean post = null;
        Boolean apply = null;
        Boolean delete = null;
        String action = null;
        String $location = null;
        List<String> propertylist = null;
        String slingServletSelectors = null;
        String slingServletExtensions = null;
    ResponseEntity<ComAdobeCqSocialFilelibraryClientEndpointsFilelibraryDownloadGeInfo> response = api.comAdobeCqSocialFilelibraryClientEndpointsFilelibraryDownloadGe(post, apply, delete, action, $location, propertylist, slingServletSelectors, slingServletExtensions , accept);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void comAdobeCqSocialFilelibraryClientEndpointsImplFileLibraryOperaTest() throws Exception {
        Boolean post = null;
        Boolean apply = null;
        Boolean delete = null;
        String action = null;
        String $location = null;
        List<String> propertylist = null;
        List<String> fieldWhitelist = null;
        List<String> attachmentTypeBlacklist = null;
    ResponseEntity<ComAdobeCqSocialFilelibraryClientEndpointsImplFileLibraryOperaInfo> response = api.comAdobeCqSocialFilelibraryClientEndpointsImplFileLibraryOpera(post, apply, delete, action, $location, propertylist, fieldWhitelist, attachmentTypeBlacklist , accept);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void comAdobeCqSocialForumClientEndpointsImplForumOperationsServiceTest() throws Exception {
        Boolean post = null;
        Boolean apply = null;
        Boolean delete = null;
        String action = null;
        String $location = null;
        List<String> propertylist = null;
        List<String> fieldWhitelist = null;
        List<String> attachmentTypeBlacklist = null;
    ResponseEntity<ComAdobeCqSocialForumClientEndpointsImplForumOperationsServiceInfo> response = api.comAdobeCqSocialForumClientEndpointsImplForumOperationsService(post, apply, delete, action, $location, propertylist, fieldWhitelist, attachmentTypeBlacklist , accept);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void comAdobeCqSocialForumDispatcherImplFlushOperationsTest() throws Exception {
        Boolean post = null;
        Boolean apply = null;
        Boolean delete = null;
        String action = null;
        String $location = null;
        List<String> propertylist = null;
        Integer extensionOrder = null;
        Boolean flushForumontopic = null;
    ResponseEntity<ComAdobeCqSocialForumDispatcherImplFlushOperationsInfo> response = api.comAdobeCqSocialForumDispatcherImplFlushOperations(post, apply, delete, action, $location, propertylist, extensionOrder, flushForumontopic , accept);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void comAdobeCqSocialGroupClientImplCommunityGroupCollectionComponenTest() throws Exception {
        Boolean post = null;
        Boolean apply = null;
        Boolean delete = null;
        String action = null;
        String $location = null;
        List<String> propertylist = null;
        Boolean groupListingPaginationEnable = null;
        Boolean groupListingLazyloadingEnable = null;
        Integer pageSize = null;
        Integer priority = null;
    ResponseEntity<ComAdobeCqSocialGroupClientImplCommunityGroupCollectionComponenInfo> response = api.comAdobeCqSocialGroupClientImplCommunityGroupCollectionComponen(post, apply, delete, action, $location, propertylist, groupListingPaginationEnable, groupListingLazyloadingEnable, pageSize, priority , accept);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void comAdobeCqSocialGroupImplGroupServiceImplTest() throws Exception {
        Boolean post = null;
        Boolean apply = null;
        Boolean delete = null;
        String action = null;
        String $location = null;
        List<String> propertylist = null;
        Integer maxWaitTime = null;
        Integer minWaitBetweenRetries = null;
    ResponseEntity<ComAdobeCqSocialGroupImplGroupServiceImplInfo> response = api.comAdobeCqSocialGroupImplGroupServiceImpl(post, apply, delete, action, $location, propertylist, maxWaitTime, minWaitBetweenRetries , accept);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void comAdobeCqSocialHandlebarsGuavaTemplateCacheImplTest() throws Exception {
        Boolean post = null;
        Boolean apply = null;
        Boolean delete = null;
        String action = null;
        String $location = null;
        List<String> propertylist = null;
        Boolean parameterGuavaCacheEnabled = null;
        String parameterGuavaCacheParams = null;
        Boolean parameterGuavaCacheReload = null;
        Integer serviceRanking = null;
    ResponseEntity<ComAdobeCqSocialHandlebarsGuavaTemplateCacheImplInfo> response = api.comAdobeCqSocialHandlebarsGuavaTemplateCacheImpl(post, apply, delete, action, $location, propertylist, parameterGuavaCacheEnabled, parameterGuavaCacheParams, parameterGuavaCacheReload, serviceRanking , accept);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void comAdobeCqSocialIdeationClientEndpointsImplIdeationOperationsSTest() throws Exception {
        Boolean post = null;
        Boolean apply = null;
        Boolean delete = null;
        String action = null;
        String $location = null;
        List<String> propertylist = null;
        List<String> fieldWhitelist = null;
        List<String> attachmentTypeBlacklist = null;
    ResponseEntity<ComAdobeCqSocialIdeationClientEndpointsImplIdeationOperationsSInfo> response = api.comAdobeCqSocialIdeationClientEndpointsImplIdeationOperationsS(post, apply, delete, action, $location, propertylist, fieldWhitelist, attachmentTypeBlacklist , accept);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void comAdobeCqSocialJournalClientEndpointsImplJournalOperationsSerTest() throws Exception {
        Boolean post = null;
        Boolean apply = null;
        Boolean delete = null;
        String action = null;
        String $location = null;
        List<String> propertylist = null;
        List<String> fieldWhitelist = null;
        List<String> attachmentTypeBlacklist = null;
    ResponseEntity<ComAdobeCqSocialJournalClientEndpointsImplJournalOperationsSerInfo> response = api.comAdobeCqSocialJournalClientEndpointsImplJournalOperationsSer(post, apply, delete, action, $location, propertylist, fieldWhitelist, attachmentTypeBlacklist , accept);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void comAdobeCqSocialMembersEndpointsImplCommunityMemberGroupProfileTest() throws Exception {
        Boolean post = null;
        Boolean apply = null;
        Boolean delete = null;
        String action = null;
        String $location = null;
        List<String> propertylist = null;
        List<String> fieldWhitelist = null;
    ResponseEntity<ComAdobeCqSocialMembersEndpointsImplCommunityMemberGroupProfileInfo> response = api.comAdobeCqSocialMembersEndpointsImplCommunityMemberGroupProfile(post, apply, delete, action, $location, propertylist, fieldWhitelist , accept);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void comAdobeCqSocialMembersEndpointsImplCommunityMemberUserProfileOTest() throws Exception {
        Boolean post = null;
        Boolean apply = null;
        Boolean delete = null;
        String action = null;
        String $location = null;
        List<String> propertylist = null;
        List<String> fieldWhitelist = null;
    ResponseEntity<ComAdobeCqSocialMembersEndpointsImplCommunityMemberUserProfileOInfo> response = api.comAdobeCqSocialMembersEndpointsImplCommunityMemberUserProfileO(post, apply, delete, action, $location, propertylist, fieldWhitelist , accept);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void comAdobeCqSocialMembersImplCommunityMemberGroupProfileComponentFTest() throws Exception {
        Boolean post = null;
        Boolean apply = null;
        Boolean delete = null;
        String action = null;
        String $location = null;
        List<String> propertylist = null;
        Integer everyoneLimit = null;
        Integer priority = null;
    ResponseEntity<ComAdobeCqSocialMembersImplCommunityMemberGroupProfileComponentFInfo> response = api.comAdobeCqSocialMembersImplCommunityMemberGroupProfileComponentF(post, apply, delete, action, $location, propertylist, everyoneLimit, priority , accept);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void comAdobeCqSocialMessagingClientEndpointsImplMessagingOperationTest() throws Exception {
        Boolean post = null;
        Boolean apply = null;
        Boolean delete = null;
        String action = null;
        String $location = null;
        List<String> propertylist = null;
        List<String> messageProperties = null;
        Integer messageBoxSizeLimit = null;
        Integer messageCountLimit = null;
        Boolean notifyFailure = null;
        String failureMessageFrom = null;
        String failureTemplatePath = null;
        Integer maxRetries = null;
        Integer minWaitBetweenRetries = null;
        Integer countUpdatePoolSize = null;
        String inboxPath = null;
        String sentitemsPath = null;
        Boolean supportAttachments = null;
        Boolean supportGroupMessaging = null;
        Integer maxTotalRecipients = null;
        Integer batchSize = null;
        Integer maxTotalAttachmentSize = null;
        List<String> attachmentTypeBlacklist = null;
        List<String> allowedAttachmentTypes = null;
        String serviceSelector = null;
        List<String> fieldWhitelist = null;
    ResponseEntity<ComAdobeCqSocialMessagingClientEndpointsImplMessagingOperationInfo> response = api.comAdobeCqSocialMessagingClientEndpointsImplMessagingOperation(post, apply, delete, action, $location, propertylist, messageProperties, messageBoxSizeLimit, messageCountLimit, notifyFailure, failureMessageFrom, failureTemplatePath, maxRetries, minWaitBetweenRetries, countUpdatePoolSize, inboxPath, sentitemsPath, supportAttachments, supportGroupMessaging, maxTotalRecipients, batchSize, maxTotalAttachmentSize, attachmentTypeBlacklist, allowedAttachmentTypes, serviceSelector, fieldWhitelist , accept);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void comAdobeCqSocialModerationDashboardApiFilterGroupSocialComponenTest() throws Exception {
        Boolean post = null;
        Boolean apply = null;
        Boolean delete = null;
        String action = null;
        String $location = null;
        List<String> propertylist = null;
        List<String> resourceTypeFilters = null;
        Integer priority = null;
    ResponseEntity<ComAdobeCqSocialModerationDashboardApiFilterGroupSocialComponenInfo> response = api.comAdobeCqSocialModerationDashboardApiFilterGroupSocialComponen(post, apply, delete, action, $location, propertylist, resourceTypeFilters, priority , accept);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void comAdobeCqSocialModerationDashboardApiModerationDashboardSocialTest() throws Exception {
        Boolean post = null;
        Boolean apply = null;
        Boolean delete = null;
        String action = null;
        String $location = null;
        List<String> propertylist = null;
        Integer priority = null;
    ResponseEntity<ComAdobeCqSocialModerationDashboardApiModerationDashboardSocialInfo> response = api.comAdobeCqSocialModerationDashboardApiModerationDashboardSocial(post, apply, delete, action, $location, propertylist, priority , accept);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void comAdobeCqSocialModerationDashboardApiUserDetailsSocialComponenTest() throws Exception {
        Boolean post = null;
        Boolean apply = null;
        Boolean delete = null;
        String action = null;
        String $location = null;
        List<String> propertylist = null;
        Integer priority = null;
    ResponseEntity<ComAdobeCqSocialModerationDashboardApiUserDetailsSocialComponenInfo> response = api.comAdobeCqSocialModerationDashboardApiUserDetailsSocialComponen(post, apply, delete, action, $location, propertylist, priority , accept);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void comAdobeCqSocialModerationDashboardInternalImplFilterGroupSociTest() throws Exception {
        Boolean post = null;
        Boolean apply = null;
        Boolean delete = null;
        String action = null;
        String $location = null;
        List<String> propertylist = null;
        List<String> resourceTypeFilters = null;
        Integer priority = null;
    ResponseEntity<ComAdobeCqSocialModerationDashboardInternalImplFilterGroupSociInfo> response = api.comAdobeCqSocialModerationDashboardInternalImplFilterGroupSoci(post, apply, delete, action, $location, propertylist, resourceTypeFilters, priority , accept);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void comAdobeCqSocialNotificationsImplMentionsRouterTest() throws Exception {
        Boolean post = null;
        Boolean apply = null;
        Boolean delete = null;
        String action = null;
        String $location = null;
        List<String> propertylist = null;
        String eventTopics = null;
        String eventFilter = null;
    ResponseEntity<ComAdobeCqSocialNotificationsImplMentionsRouterInfo> response = api.comAdobeCqSocialNotificationsImplMentionsRouter(post, apply, delete, action, $location, propertylist, eventTopics, eventFilter , accept);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void comAdobeCqSocialNotificationsImplNotificationManagerImplTest() throws Exception {
        Boolean post = null;
        Boolean apply = null;
        Boolean delete = null;
        String action = null;
        String $location = null;
        List<String> propertylist = null;
        Integer maxUnreadNotificationCount = null;
    ResponseEntity<ComAdobeCqSocialNotificationsImplNotificationManagerImplInfo> response = api.comAdobeCqSocialNotificationsImplNotificationManagerImpl(post, apply, delete, action, $location, propertylist, maxUnreadNotificationCount , accept);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void comAdobeCqSocialNotificationsImplNotificationsRouterTest() throws Exception {
        Boolean post = null;
        Boolean apply = null;
        Boolean delete = null;
        String action = null;
        String $location = null;
        List<String> propertylist = null;
        String eventTopics = null;
        String eventFilter = null;
    ResponseEntity<ComAdobeCqSocialNotificationsImplNotificationsRouterInfo> response = api.comAdobeCqSocialNotificationsImplNotificationsRouter(post, apply, delete, action, $location, propertylist, eventTopics, eventFilter , accept);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void comAdobeCqSocialQnaClientEndpointsImplQnaForumOperationsServicTest() throws Exception {
        Boolean post = null;
        Boolean apply = null;
        Boolean delete = null;
        String action = null;
        String $location = null;
        List<String> propertylist = null;
        List<String> fieldWhitelist = null;
        List<String> attachmentTypeBlacklist = null;
    ResponseEntity<ComAdobeCqSocialQnaClientEndpointsImplQnaForumOperationsServicInfo> response = api.comAdobeCqSocialQnaClientEndpointsImplQnaForumOperationsServic(post, apply, delete, action, $location, propertylist, fieldWhitelist, attachmentTypeBlacklist , accept);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void comAdobeCqSocialReportingAnalyticsServicesImplAnalyticsReportITest() throws Exception {
        Boolean post = null;
        Boolean apply = null;
        Boolean delete = null;
        String action = null;
        String $location = null;
        List<String> propertylist = null;
        Integer cqSocialReportingAnalyticsPollingImporterInterval = null;
        Integer cqSocialReportingAnalyticsPollingImporterPageSize = null;
    ResponseEntity<ComAdobeCqSocialReportingAnalyticsServicesImplAnalyticsReportIInfo> response = api.comAdobeCqSocialReportingAnalyticsServicesImplAnalyticsReportI(post, apply, delete, action, $location, propertylist, cqSocialReportingAnalyticsPollingImporterInterval, cqSocialReportingAnalyticsPollingImporterPageSize , accept);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void comAdobeCqSocialReportingAnalyticsServicesImplAnalyticsReportMTest() throws Exception {
        Boolean post = null;
        Boolean apply = null;
        Boolean delete = null;
        String action = null;
        String $location = null;
        List<String> propertylist = null;
        Integer reportFetchDelay = null;
    ResponseEntity<ComAdobeCqSocialReportingAnalyticsServicesImplAnalyticsReportMInfo> response = api.comAdobeCqSocialReportingAnalyticsServicesImplAnalyticsReportM(post, apply, delete, action, $location, propertylist, reportFetchDelay , accept);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void comAdobeCqSocialReportingAnalyticsServicesImplSiteTrendReportSTest() throws Exception {
        Boolean post = null;
        Boolean apply = null;
        Boolean delete = null;
        String action = null;
        String $location = null;
        List<String> propertylist = null;
        List<String> cqSocialConsoleAnalyticsSitesMapping = null;
        Integer priority = null;
    ResponseEntity<ComAdobeCqSocialReportingAnalyticsServicesImplSiteTrendReportSInfo> response = api.comAdobeCqSocialReportingAnalyticsServicesImplSiteTrendReportS(post, apply, delete, action, $location, propertylist, cqSocialConsoleAnalyticsSitesMapping, priority , accept);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void comAdobeCqSocialReviewClientEndpointsImplReviewOperationsServiTest() throws Exception {
        Boolean post = null;
        Boolean apply = null;
        Boolean delete = null;
        String action = null;
        String $location = null;
        List<String> propertylist = null;
        List<String> fieldWhitelist = null;
        List<String> attachmentTypeBlacklist = null;
    ResponseEntity<ComAdobeCqSocialReviewClientEndpointsImplReviewOperationsServiInfo> response = api.comAdobeCqSocialReviewClientEndpointsImplReviewOperationsServi(post, apply, delete, action, $location, propertylist, fieldWhitelist, attachmentTypeBlacklist , accept);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void comAdobeCqSocialScfCoreOperationsImplSocialOperationsServletTest() throws Exception {
        Boolean post = null;
        Boolean apply = null;
        Boolean delete = null;
        String action = null;
        String $location = null;
        List<String> propertylist = null;
        String slingServletSelectors = null;
        String slingServletExtensions = null;
    ResponseEntity<ComAdobeCqSocialScfCoreOperationsImplSocialOperationsServletInfo> response = api.comAdobeCqSocialScfCoreOperationsImplSocialOperationsServlet(post, apply, delete, action, $location, propertylist, slingServletSelectors, slingServletExtensions , accept);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void comAdobeCqSocialScfEndpointsImplDefaultSocialGetServletTest() throws Exception {
        Boolean post = null;
        Boolean apply = null;
        Boolean delete = null;
        String action = null;
        String $location = null;
        List<String> propertylist = null;
        List<String> slingServletSelectors = null;
        String slingServletExtensions = null;
    ResponseEntity<ComAdobeCqSocialScfEndpointsImplDefaultSocialGetServletInfo> response = api.comAdobeCqSocialScfEndpointsImplDefaultSocialGetServlet(post, apply, delete, action, $location, propertylist, slingServletSelectors, slingServletExtensions , accept);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void comAdobeCqSocialScoringImplScoringEventListenerTest() throws Exception {
        Boolean post = null;
        Boolean apply = null;
        Boolean delete = null;
        String action = null;
        String $location = null;
        List<String> propertylist = null;
        String eventTopics = null;
        String eventFilter = null;
    ResponseEntity<ComAdobeCqSocialScoringImplScoringEventListenerInfo> response = api.comAdobeCqSocialScoringImplScoringEventListener(post, apply, delete, action, $location, propertylist, eventTopics, eventFilter , accept);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void comAdobeCqSocialServiceusersInternalImplServiceUserWrapperImplTest() throws Exception {
        Boolean post = null;
        Boolean apply = null;
        Boolean delete = null;
        String action = null;
        String $location = null;
        List<String> propertylist = null;
        Boolean enableFallback = null;
    ResponseEntity<ComAdobeCqSocialServiceusersInternalImplServiceUserWrapperImplInfo> response = api.comAdobeCqSocialServiceusersInternalImplServiceUserWrapperImpl(post, apply, delete, action, $location, propertylist, enableFallback , accept);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void comAdobeCqSocialSiteEndpointsImplSiteOperationServiceTest() throws Exception {
        Boolean post = null;
        Boolean apply = null;
        Boolean delete = null;
        String action = null;
        String $location = null;
        List<String> propertylist = null;
        List<String> fieldWhitelist = null;
        List<String> sitePathFilters = null;
        String sitePackageGroup = null;
    ResponseEntity<ComAdobeCqSocialSiteEndpointsImplSiteOperationServiceInfo> response = api.comAdobeCqSocialSiteEndpointsImplSiteOperationService(post, apply, delete, action, $location, propertylist, fieldWhitelist, sitePathFilters, sitePackageGroup , accept);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void comAdobeCqSocialSiteImplAnalyticsComponentConfigurationServiceImTest() throws Exception {
        Boolean post = null;
        Boolean apply = null;
        Boolean delete = null;
        String action = null;
        String $location = null;
        List<String> propertylist = null;
        List<String> cqSocialConsoleAnalyticsComponents = null;
    ResponseEntity<ComAdobeCqSocialSiteImplAnalyticsComponentConfigurationServiceImInfo> response = api.comAdobeCqSocialSiteImplAnalyticsComponentConfigurationServiceIm(post, apply, delete, action, $location, propertylist, cqSocialConsoleAnalyticsComponents , accept);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void comAdobeCqSocialSiteImplSiteConfiguratorImplTest() throws Exception {
        Boolean post = null;
        Boolean apply = null;
        Boolean delete = null;
        String action = null;
        String $location = null;
        List<String> propertylist = null;
        List<String> componentsUsingTags = null;
    ResponseEntity<ComAdobeCqSocialSiteImplSiteConfiguratorImplInfo> response = api.comAdobeCqSocialSiteImplSiteConfiguratorImpl(post, apply, delete, action, $location, propertylist, componentsUsingTags , accept);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void comAdobeCqSocialSrpImplSocialSolrConnectorTest() throws Exception {
        Boolean post = null;
        Boolean apply = null;
        Boolean delete = null;
        String action = null;
        String $location = null;
        List<String> propertylist = null;
        String srpType = null;
    ResponseEntity<ComAdobeCqSocialSrpImplSocialSolrConnectorInfo> response = api.comAdobeCqSocialSrpImplSocialSolrConnector(post, apply, delete, action, $location, propertylist, srpType , accept);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void comAdobeCqSocialSyncImplDiffChangesObserverTest() throws Exception {
        Boolean post = null;
        Boolean apply = null;
        Boolean delete = null;
        String action = null;
        String $location = null;
        List<String> propertylist = null;
        Boolean enabled = null;
        String agentName = null;
        String diffPath = null;
        String propertyNames = null;
    ResponseEntity<ComAdobeCqSocialSyncImplDiffChangesObserverInfo> response = api.comAdobeCqSocialSyncImplDiffChangesObserver(post, apply, delete, action, $location, propertylist, enabled, agentName, diffPath, propertyNames , accept);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void comAdobeCqSocialSyncImplGroupSyncListenerImplTest() throws Exception {
        Boolean post = null;
        Boolean apply = null;
        Boolean delete = null;
        String action = null;
        String $location = null;
        List<String> propertylist = null;
        List<String> nodetypes = null;
        List<String> ignorableprops = null;
        String ignorablenodes = null;
        Boolean enabled = null;
        String distfolders = null;
    ResponseEntity<ComAdobeCqSocialSyncImplGroupSyncListenerImplInfo> response = api.comAdobeCqSocialSyncImplGroupSyncListenerImpl(post, apply, delete, action, $location, propertylist, nodetypes, ignorableprops, ignorablenodes, enabled, distfolders , accept);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void comAdobeCqSocialSyncImplPublisherSyncServiceImplTest() throws Exception {
        Boolean post = null;
        Boolean apply = null;
        Boolean delete = null;
        String action = null;
        String $location = null;
        List<String> propertylist = null;
        List<String> activeRunModes = null;
    ResponseEntity<ComAdobeCqSocialSyncImplPublisherSyncServiceImplInfo> response = api.comAdobeCqSocialSyncImplPublisherSyncServiceImpl(post, apply, delete, action, $location, propertylist, activeRunModes , accept);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void comAdobeCqSocialSyncImplUserSyncListenerImplTest() throws Exception {
        Boolean post = null;
        Boolean apply = null;
        Boolean delete = null;
        String action = null;
        String $location = null;
        List<String> propertylist = null;
        List<String> nodetypes = null;
        List<String> ignorableprops = null;
        List<String> ignorablenodes = null;
        Boolean enabled = null;
        List<String> distfolders = null;
    ResponseEntity<ComAdobeCqSocialSyncImplUserSyncListenerImplInfo> response = api.comAdobeCqSocialSyncImplUserSyncListenerImpl(post, apply, delete, action, $location, propertylist, nodetypes, ignorableprops, ignorablenodes, enabled, distfolders , accept);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void comAdobeCqSocialTranslationImplTranslationServiceConfigManagerTest() throws Exception {
        Boolean post = null;
        Boolean apply = null;
        Boolean delete = null;
        String action = null;
        String $location = null;
        List<String> propertylist = null;
        String translateLanguage = null;
        String translateDisplay = null;
        Boolean translateAttribution = null;
        String translateCaching = null;
        String translateSmartRendering = null;
        String translateCachingDuration = null;
        String translateSessionSaveInterval = null;
        String translateSessionSaveBatchLimit = null;
    ResponseEntity<ComAdobeCqSocialTranslationImplTranslationServiceConfigManagerInfo> response = api.comAdobeCqSocialTranslationImplTranslationServiceConfigManager(post, apply, delete, action, $location, propertylist, translateLanguage, translateDisplay, translateAttribution, translateCaching, translateSmartRendering, translateCachingDuration, translateSessionSaveInterval, translateSessionSaveBatchLimit , accept);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void comAdobeCqSocialTranslationImplUGCLanguageDetectorTest() throws Exception {
        Boolean post = null;
        Boolean apply = null;
        Boolean delete = null;
        String action = null;
        String $location = null;
        List<String> propertylist = null;
        String eventTopics = null;
        String eventFilter = null;
        List<String> translateListenerType = null;
        List<String> translatePropertyList = null;
        Integer poolSize = null;
        Integer maxPoolSize = null;
        Integer queueSize = null;
        Integer keepAliveTime = null;
    ResponseEntity<ComAdobeCqSocialTranslationImplUGCLanguageDetectorInfo> response = api.comAdobeCqSocialTranslationImplUGCLanguageDetector(post, apply, delete, action, $location, propertylist, eventTopics, eventFilter, translateListenerType, translatePropertyList, poolSize, maxPoolSize, queueSize, keepAliveTime , accept);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void comAdobeCqSocialUgcbaseDispatcherImplFlushServiceImplTest() throws Exception {
        Boolean post = null;
        Boolean apply = null;
        Boolean delete = null;
        String action = null;
        String $location = null;
        List<String> propertylist = null;
        Integer threadPoolSize = null;
        Integer delayTime = null;
        Integer workerSleepTime = null;
    ResponseEntity<ComAdobeCqSocialUgcbaseDispatcherImplFlushServiceImplInfo> response = api.comAdobeCqSocialUgcbaseDispatcherImplFlushServiceImpl(post, apply, delete, action, $location, propertylist, threadPoolSize, delayTime, workerSleepTime , accept);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void comAdobeCqSocialUgcbaseImplAysncReverseReplicatorImplTest() throws Exception {
        Boolean post = null;
        Boolean apply = null;
        Boolean delete = null;
        String action = null;
        String $location = null;
        List<String> propertylist = null;
        Integer poolSize = null;
        Integer maxPoolSize = null;
        Integer queueSize = null;
        Integer keepAliveTime = null;
    ResponseEntity<ComAdobeCqSocialUgcbaseImplAysncReverseReplicatorImplInfo> response = api.comAdobeCqSocialUgcbaseImplAysncReverseReplicatorImpl(post, apply, delete, action, $location, propertylist, poolSize, maxPoolSize, queueSize, keepAliveTime , accept);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void comAdobeCqSocialUgcbaseImplPublisherConfigurationImplTest() throws Exception {
        Boolean post = null;
        Boolean apply = null;
        Boolean delete = null;
        String action = null;
        String $location = null;
        List<String> propertylist = null;
        Boolean isPrimaryPublisher = null;
    ResponseEntity<ComAdobeCqSocialUgcbaseImplPublisherConfigurationImplInfo> response = api.comAdobeCqSocialUgcbaseImplPublisherConfigurationImpl(post, apply, delete, action, $location, propertylist, isPrimaryPublisher , accept);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void comAdobeCqSocialUgcbaseImplSocialUtilsImplTest() throws Exception {
        Boolean post = null;
        Boolean apply = null;
        Boolean delete = null;
        String action = null;
        String $location = null;
        List<String> propertylist = null;
        Boolean legacyCloudUGCPathMapping = null;
    ResponseEntity<ComAdobeCqSocialUgcbaseImplSocialUtilsImplInfo> response = api.comAdobeCqSocialUgcbaseImplSocialUtilsImpl(post, apply, delete, action, $location, propertylist, legacyCloudUGCPathMapping , accept);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void comAdobeCqSocialUgcbaseModerationImplAutoModerationImplTest() throws Exception {
        Boolean post = null;
        Boolean apply = null;
        Boolean delete = null;
        String action = null;
        String $location = null;
        List<String> propertylist = null;
        List<String> automoderationSequence = null;
        Boolean automoderationOnfailurestop = null;
    ResponseEntity<ComAdobeCqSocialUgcbaseModerationImplAutoModerationImplInfo> response = api.comAdobeCqSocialUgcbaseModerationImplAutoModerationImpl(post, apply, delete, action, $location, propertylist, automoderationSequence, automoderationOnfailurestop , accept);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void comAdobeCqSocialUgcbaseModerationImplSentimentProcessTest() throws Exception {
        Boolean post = null;
        Boolean apply = null;
        Boolean delete = null;
        String action = null;
        String $location = null;
        List<String> propertylist = null;
        List<String> watchwordsPositive = null;
        List<String> watchwordsNegative = null;
        String watchwordsPath = null;
        String sentimentPath = null;
    ResponseEntity<ComAdobeCqSocialUgcbaseModerationImplSentimentProcessInfo> response = api.comAdobeCqSocialUgcbaseModerationImplSentimentProcess(post, apply, delete, action, $location, propertylist, watchwordsPositive, watchwordsNegative, watchwordsPath, sentimentPath , accept);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void comAdobeCqSocialUgcbaseSecurityImplDefaultAttachmentTypeBlackliTest() throws Exception {
        Boolean post = null;
        Boolean apply = null;
        Boolean delete = null;
        String action = null;
        String $location = null;
        List<String> propertylist = null;
        List<String> defaultAttachmentTypeBlacklist = null;
        List<String> baselineAttachmentTypeBlacklist = null;
    ResponseEntity<ComAdobeCqSocialUgcbaseSecurityImplDefaultAttachmentTypeBlackliInfo> response = api.comAdobeCqSocialUgcbaseSecurityImplDefaultAttachmentTypeBlackli(post, apply, delete, action, $location, propertylist, defaultAttachmentTypeBlacklist, baselineAttachmentTypeBlacklist , accept);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void comAdobeCqSocialUgcbaseSecurityImplSaferSlingPostValidatorImplTest() throws Exception {
        Boolean post = null;
        Boolean apply = null;
        Boolean delete = null;
        String action = null;
        String $location = null;
        List<String> propertylist = null;
        List<String> parameterWhitelist = null;
        List<String> parameterWhitelistPrefixes = null;
        List<String> binaryParameterWhitelist = null;
        List<String> modifierWhitelist = null;
        List<String> operationWhitelist = null;
        List<String> operationWhitelistPrefixes = null;
        List<String> typehintWhitelist = null;
        List<String> resourcetypeWhitelist = null;
    ResponseEntity<ComAdobeCqSocialUgcbaseSecurityImplSaferSlingPostValidatorImplInfo> response = api.comAdobeCqSocialUgcbaseSecurityImplSaferSlingPostValidatorImpl(post, apply, delete, action, $location, propertylist, parameterWhitelist, parameterWhitelistPrefixes, binaryParameterWhitelist, modifierWhitelist, operationWhitelist, operationWhitelistPrefixes, typehintWhitelist, resourcetypeWhitelist , accept);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void comAdobeCqSocialUserEndpointsImplUsersGroupFromPublishServletTest() throws Exception {
        Boolean post = null;
        Boolean apply = null;
        Boolean delete = null;
        String action = null;
        String $location = null;
        List<String> propertylist = null;
        String slingServletExtensions = null;
        String slingServletPaths = null;
        String slingServletMethods = null;
    ResponseEntity<ComAdobeCqSocialUserEndpointsImplUsersGroupFromPublishServletInfo> response = api.comAdobeCqSocialUserEndpointsImplUsersGroupFromPublishServlet(post, apply, delete, action, $location, propertylist, slingServletExtensions, slingServletPaths, slingServletMethods , accept);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void comAdobeCqSocialUserImplTransportHttpToPublisherTest() throws Exception {
        Boolean post = null;
        Boolean apply = null;
        Boolean delete = null;
        String action = null;
        String $location = null;
        List<String> propertylist = null;
        Boolean enable = null;
        List<String> agentConfiguration = null;
        String contextPath = null;
        List<String> disabledCipherSuites = null;
        List<String> enabledCipherSuites = null;
    ResponseEntity<ComAdobeCqSocialUserImplTransportHttpToPublisherInfo> response = api.comAdobeCqSocialUserImplTransportHttpToPublisher(post, apply, delete, action, $location, propertylist, enable, agentConfiguration, contextPath, disabledCipherSuites, enabledCipherSuites , accept);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void comAdobeCqUiWcmCommonsInternalServletsRteRTEFilterServletFactTest() throws Exception {
        Boolean post = null;
        Boolean apply = null;
        Boolean delete = null;
        String action = null;
        String $location = null;
        List<String> propertylist = null;
        List<String> resourceTypes = null;
    ResponseEntity<ComAdobeCqUiWcmCommonsInternalServletsRteRTEFilterServletFactInfo> response = api.comAdobeCqUiWcmCommonsInternalServletsRteRTEFilterServletFact(post, apply, delete, action, $location, propertylist, resourceTypes , accept);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void comAdobeCqUpgradesCleanupImplUpgradeContentCleanupTest() throws Exception {
        Boolean post = null;
        Boolean apply = null;
        Boolean delete = null;
        String action = null;
        String $location = null;
        List<String> propertylist = null;
        List<String> deletePathRegexps = null;
        String deleteSql2Query = null;
    ResponseEntity<ComAdobeCqUpgradesCleanupImplUpgradeContentCleanupInfo> response = api.comAdobeCqUpgradesCleanupImplUpgradeContentCleanup(post, apply, delete, action, $location, propertylist, deletePathRegexps, deleteSql2Query , accept);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void comAdobeCqUpgradesCleanupImplUpgradeInstallFolderCleanupTest() throws Exception {
        Boolean post = null;
        Boolean apply = null;
        Boolean delete = null;
        String action = null;
        String $location = null;
        List<String> propertylist = null;
        List<String> deleteNameRegexps = null;
    ResponseEntity<ComAdobeCqUpgradesCleanupImplUpgradeInstallFolderCleanupInfo> response = api.comAdobeCqUpgradesCleanupImplUpgradeInstallFolderCleanup(post, apply, delete, action, $location, propertylist, deleteNameRegexps , accept);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void comAdobeCqWcmJobsAsyncImplAsyncDeleteConfigProviderServiceTest() throws Exception {
        Boolean post = null;
        Boolean apply = null;
        Boolean delete = null;
        String action = null;
        String $location = null;
        List<String> propertylist = null;
        Integer threshold = null;
        String jobTopicName = null;
        Boolean emailEnabled = null;
    ResponseEntity<ComAdobeCqWcmJobsAsyncImplAsyncDeleteConfigProviderServiceInfo> response = api.comAdobeCqWcmJobsAsyncImplAsyncDeleteConfigProviderService(post, apply, delete, action, $location, propertylist, threshold, jobTopicName, emailEnabled , accept);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void comAdobeCqWcmJobsAsyncImplAsyncJobCleanUpTaskTest() throws Exception {
        Boolean post = null;
        Boolean apply = null;
        Boolean delete = null;
        String action = null;
        String $location = null;
        List<String> propertylist = null;
        String schedulerExpression = null;
        Integer jobPurgeThreshold = null;
        Integer jobPurgeMaxJobs = null;
    ResponseEntity<ComAdobeCqWcmJobsAsyncImplAsyncJobCleanUpTaskInfo> response = api.comAdobeCqWcmJobsAsyncImplAsyncJobCleanUpTask(post, apply, delete, action, $location, propertylist, schedulerExpression, jobPurgeThreshold, jobPurgeMaxJobs , accept);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void comAdobeCqWcmJobsAsyncImplAsyncMoveConfigProviderServiceTest() throws Exception {
        Boolean post = null;
        Boolean apply = null;
        Boolean delete = null;
        String action = null;
        String $location = null;
        List<String> propertylist = null;
        Integer threshold = null;
        String jobTopicName = null;
        Boolean emailEnabled = null;
    ResponseEntity<ComAdobeCqWcmJobsAsyncImplAsyncMoveConfigProviderServiceInfo> response = api.comAdobeCqWcmJobsAsyncImplAsyncMoveConfigProviderService(post, apply, delete, action, $location, propertylist, threshold, jobTopicName, emailEnabled , accept);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void comAdobeCqWcmJobsAsyncImplAsyncPageMoveConfigProviderServiceTest() throws Exception {
        Boolean post = null;
        Boolean apply = null;
        Boolean delete = null;
        String action = null;
        String $location = null;
        List<String> propertylist = null;
        Integer threshold = null;
        String jobTopicName = null;
        Boolean emailEnabled = null;
    ResponseEntity<ComAdobeCqWcmJobsAsyncImplAsyncPageMoveConfigProviderServiceInfo> response = api.comAdobeCqWcmJobsAsyncImplAsyncPageMoveConfigProviderService(post, apply, delete, action, $location, propertylist, threshold, jobTopicName, emailEnabled , accept);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void comAdobeCqWcmLaunchesImplLaunchesEventHandlerTest() throws Exception {
        Boolean post = null;
        Boolean apply = null;
        Boolean delete = null;
        String action = null;
        String $location = null;
        List<String> propertylist = null;
        String eventFilter = null;
        Integer launchesEventhandlerThreadpoolMaxsize = null;
        String launchesEventhandlerThreadpoolPriority = null;
        Boolean launchesEventhandlerUpdatelastmodification = null;
    ResponseEntity<ComAdobeCqWcmLaunchesImplLaunchesEventHandlerInfo> response = api.comAdobeCqWcmLaunchesImplLaunchesEventHandler(post, apply, delete, action, $location, propertylist, eventFilter, launchesEventhandlerThreadpoolMaxsize, launchesEventhandlerThreadpoolPriority, launchesEventhandlerUpdatelastmodification , accept);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void comAdobeCqWcmMobileQrcodeServletQRCodeImageGeneratorTest() throws Exception {
        Boolean post = null;
        Boolean apply = null;
        Boolean delete = null;
        String action = null;
        String $location = null;
        List<String> propertylist = null;
        List<String> cqWcmQrcodeServletWhitelist = null;
    ResponseEntity<ComAdobeCqWcmMobileQrcodeServletQRCodeImageGeneratorInfo> response = api.comAdobeCqWcmMobileQrcodeServletQRCodeImageGenerator(post, apply, delete, action, $location, propertylist, cqWcmQrcodeServletWhitelist , accept);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void comAdobeCqWcmStyleInternalComponentStyleInfoCacheImplTest() throws Exception {
        Boolean post = null;
        Boolean apply = null;
        Boolean delete = null;
        String action = null;
        String $location = null;
        List<String> propertylist = null;
        Integer size = null;
    ResponseEntity<ComAdobeCqWcmStyleInternalComponentStyleInfoCacheImplInfo> response = api.comAdobeCqWcmStyleInternalComponentStyleInfoCacheImpl(post, apply, delete, action, $location, propertylist, size , accept);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void comAdobeCqWcmTranslationImplTranslationPlatformConfigurationImplTest() throws Exception {
        Boolean post = null;
        Boolean apply = null;
        Boolean delete = null;
        String action = null;
        String $location = null;
        List<String> propertylist = null;
        String syncTranslationStateSchedulingFormat = null;
        String schedulingRepeatTranslationSchedulingFormat = null;
        String syncTranslationStateLockTimeoutInMinutes = null;
        String exportFormat = null;
    ResponseEntity<ComAdobeCqWcmTranslationImplTranslationPlatformConfigurationImplInfo> response = api.comAdobeCqWcmTranslationImplTranslationPlatformConfigurationImpl(post, apply, delete, action, $location, propertylist, syncTranslationStateSchedulingFormat, schedulingRepeatTranslationSchedulingFormat, syncTranslationStateLockTimeoutInMinutes, exportFormat , accept);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void comAdobeFdFpConfigFormsPortalDraftsandSubmissionConfigServiceTest() throws Exception {
        Boolean post = null;
        Boolean apply = null;
        Boolean delete = null;
        String action = null;
        String $location = null;
        List<String> propertylist = null;
        List<String> portalOutboxes = null;
        String draftDataService = null;
        String draftMetadataService = null;
        String submitDataService = null;
        String submitMetadataService = null;
        String pendingSignDataService = null;
        String pendingSignMetadataService = null;
    ResponseEntity<ComAdobeFdFpConfigFormsPortalDraftsandSubmissionConfigServiceInfo> response = api.comAdobeFdFpConfigFormsPortalDraftsandSubmissionConfigService(post, apply, delete, action, $location, propertylist, portalOutboxes, draftDataService, draftMetadataService, submitDataService, submitMetadataService, pendingSignDataService, pendingSignMetadataService , accept);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void comAdobeFdFpConfigFormsPortalSchedulerServiceTest() throws Exception {
        Boolean post = null;
        Boolean apply = null;
        Boolean delete = null;
        String action = null;
        String $location = null;
        List<String> propertylist = null;
        String formportalInterval = null;
    ResponseEntity<ComAdobeFdFpConfigFormsPortalSchedulerServiceInfo> response = api.comAdobeFdFpConfigFormsPortalSchedulerService(post, apply, delete, action, $location, propertylist, formportalInterval , accept);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void comAdobeFormsCommonServiceImplDefaultDataProviderTest() throws Exception {
        Boolean post = null;
        Boolean apply = null;
        Boolean delete = null;
        String action = null;
        String $location = null;
        List<String> propertylist = null;
        List<String> alloweddataFileLocations = null;
    ResponseEntity<ComAdobeFormsCommonServiceImplDefaultDataProviderInfo> response = api.comAdobeFormsCommonServiceImplDefaultDataProvider(post, apply, delete, action, $location, propertylist, alloweddataFileLocations , accept);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void comAdobeFormsCommonServiceImplFormsCommonConfigurationServiceImpTest() throws Exception {
        Boolean post = null;
        Boolean apply = null;
        Boolean delete = null;
        String action = null;
        String $location = null;
        List<String> propertylist = null;
        String tempStorageConfig = null;
    ResponseEntity<ComAdobeFormsCommonServiceImplFormsCommonConfigurationServiceImpInfo> response = api.comAdobeFormsCommonServiceImplFormsCommonConfigurationServiceImp(post, apply, delete, action, $location, propertylist, tempStorageConfig , accept);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void comAdobeFormsCommonServletTempCleanUpTaskTest() throws Exception {
        Boolean post = null;
        Boolean apply = null;
        Boolean delete = null;
        String action = null;
        String $location = null;
        List<String> propertylist = null;
        String schedulerExpression = null;
        String durationForTemporaryStorage = null;
        String durationForAnonymousStorage = null;
    ResponseEntity<ComAdobeFormsCommonServletTempCleanUpTaskInfo> response = api.comAdobeFormsCommonServletTempCleanUpTask(post, apply, delete, action, $location, propertylist, schedulerExpression, durationForTemporaryStorage, durationForAnonymousStorage , accept);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void comAdobeGraniteAcpPlatformPlatformServletTest() throws Exception {
        Boolean post = null;
        Boolean apply = null;
        Boolean delete = null;
        String action = null;
        String $location = null;
        List<String> propertylist = null;
        Integer queryLimit = null;
        List<String> fileTypeExtensionMap = null;
    ResponseEntity<ComAdobeGraniteAcpPlatformPlatformServletInfo> response = api.comAdobeGraniteAcpPlatformPlatformServlet(post, apply, delete, action, $location, propertylist, queryLimit, fileTypeExtensionMap , accept);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void comAdobeGraniteActivitystreamsImplActivityManagerImplTest() throws Exception {
        Boolean post = null;
        Boolean apply = null;
        Boolean delete = null;
        String action = null;
        String $location = null;
        List<String> propertylist = null;
        List<String> aggregateRelationships = null;
        Boolean aggregateDescendVirtual = null;
    ResponseEntity<ComAdobeGraniteActivitystreamsImplActivityManagerImplInfo> response = api.comAdobeGraniteActivitystreamsImplActivityManagerImpl(post, apply, delete, action, $location, propertylist, aggregateRelationships, aggregateDescendVirtual , accept);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void comAdobeGraniteAnalyzerBaseSystemStatusServletTest() throws Exception {
        Boolean post = null;
        Boolean apply = null;
        Boolean delete = null;
        String action = null;
        String $location = null;
        List<String> propertylist = null;
        Boolean disabled = null;
    ResponseEntity<ComAdobeGraniteAnalyzerBaseSystemStatusServletInfo> response = api.comAdobeGraniteAnalyzerBaseSystemStatusServlet(post, apply, delete, action, $location, propertylist, disabled , accept);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void comAdobeGraniteAnalyzerScriptsCompileAllScriptsCompilerServletTest() throws Exception {
        Boolean post = null;
        Boolean apply = null;
        Boolean delete = null;
        String action = null;
        String $location = null;
        List<String> propertylist = null;
        Boolean disabled = null;
    ResponseEntity<ComAdobeGraniteAnalyzerScriptsCompileAllScriptsCompilerServletInfo> response = api.comAdobeGraniteAnalyzerScriptsCompileAllScriptsCompilerServlet(post, apply, delete, action, $location, propertylist, disabled , accept);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void comAdobeGraniteApicontrollerFilterResolverHookFactoryTest() throws Exception {
        Boolean post = null;
        Boolean apply = null;
        Boolean delete = null;
        String action = null;
        String $location = null;
        List<String> propertylist = null;
        String comAdobeCqCdnCdnRewriter = null;
        String comAdobeCqCloudConfigComponents = null;
        String comAdobeCqCloudConfigCore = null;
        String comAdobeCqCloudConfigUi = null;
        String comAdobeCqComAdobeCqEditor = null;
        String comAdobeCqComAdobeCqProjectsCore = null;
        String comAdobeCqComAdobeCqProjectsWcmCore = null;
        String comAdobeCqComAdobeCqUiCommons = null;
        String comAdobeCqComAdobeCqWcmStyle = null;
        String comAdobeCqCqActivitymapIntegration = null;
        String comAdobeCqCqContexthubCommons = null;
        String comAdobeCqCqDtm = null;
        String comAdobeCqCqHealthcheck = null;
        String comAdobeCqCqMultisiteTargeting = null;
        String comAdobeCqCqPreUpgradeCleanup = null;
        String comAdobeCqCqProductInfoProvider = null;
        String comAdobeCqCqRestSites = null;
        String comAdobeCqCqSecurityHc = null;
        String comAdobeCqDamCqDamSvgHandler = null;
        String comAdobeCqDamCqScene7Imaging = null;
        String comAdobeCqDtmReactorCore = null;
        String comAdobeCqDtmReactorUi = null;
        String comAdobeCqExpJspelResolver = null;
        String comAdobeCqInboxCqInbox = null;
        String comAdobeCqJsonSchemaParser = null;
        String comAdobeCqMediaCqMediaPublishingDpsFpCore = null;
        String comAdobeCqMobileCqMobileCaas = null;
        String comAdobeCqMobileCqMobileIndexBuilder = null;
        String comAdobeCqMobileCqMobilePhonegapBuild = null;
        String comAdobeCqMyspell = null;
        String comAdobeCqSampleWeRetailCore = null;
        String comAdobeCqScreensComAdobeCqScreensDcc = null;
        String comAdobeCqScreensComAdobeCqScreensMqCore = null;
        String comAdobeCqSocialCqSocialAsProvider = null;
        String comAdobeCqSocialCqSocialBadgingBasicImpl = null;
        String comAdobeCqSocialCqSocialBadgingImpl = null;
        String comAdobeCqSocialCqSocialCalendarImpl = null;
        String comAdobeCqSocialCqSocialContentFragmentsImpl = null;
        String comAdobeCqSocialCqSocialEnablementImpl = null;
        String comAdobeCqSocialCqSocialGraphImpl = null;
        String comAdobeCqSocialCqSocialIdeationImpl = null;
        String comAdobeCqSocialCqSocialJcrProvider = null;
        String comAdobeCqSocialCqSocialMembersImpl = null;
        String comAdobeCqSocialCqSocialMsProvider = null;
        String comAdobeCqSocialCqSocialNotificationsChannelsWeb = null;
        String comAdobeCqSocialCqSocialNotificationsImpl = null;
        String comAdobeCqSocialCqSocialRdbProvider = null;
        String comAdobeCqSocialCqSocialScfImpl = null;
        String comAdobeCqSocialCqSocialScoringBasicImpl = null;
        String comAdobeCqSocialCqSocialScoringImpl = null;
        String comAdobeCqSocialCqSocialServiceusersImpl = null;
        String comAdobeCqSocialCqSocialSrpImpl = null;
        String comAdobeCqSocialCqSocialUgcbaseImpl = null;
        String comAdobeDamCqDamCfmImpl = null;
        String comAdobeFormsFoundationFormsFoundationBase = null;
        String comAdobeGraniteApicontroller = null;
        String comAdobeGraniteAssetCore = null;
        String comAdobeGraniteAuthSso = null;
        String comAdobeGraniteBundlesHcImpl = null;
        String comAdobeGraniteCompatRouter = null;
        String comAdobeGraniteConf = null;
        String comAdobeGraniteConfUiCore = null;
        String comAdobeGraniteCors = null;
        String comAdobeGraniteCrxExplorer = null;
        String comAdobeGraniteCrxdeLite = null;
        String comAdobeGraniteCryptoConfig = null;
        String comAdobeGraniteCryptoExtension = null;
        String comAdobeGraniteCryptoFile = null;
        String comAdobeGraniteCryptoJcr = null;
        String comAdobeGraniteCsrf = null;
        String comAdobeGraniteDistributionCore = null;
        String comAdobeGraniteDropwizardMetrics = null;
        String comAdobeGraniteFragsImpl = null;
        String comAdobeGraniteGibson = null;
        String comAdobeGraniteInfocollector = null;
        String comAdobeGraniteInstallerFactoryPackages = null;
        String comAdobeGraniteJettySsl = null;
        String comAdobeGraniteJobsAsync = null;
        String comAdobeGraniteMaintenanceOak = null;
        String comAdobeGraniteMonitoringCore = null;
        String comAdobeGraniteQueries = null;
        String comAdobeGraniteReplicationHcImpl = null;
        String comAdobeGraniteRepositoryChecker = null;
        String comAdobeGraniteRepositoryHcImpl = null;
        String comAdobeGraniteRestAssets = null;
        String comAdobeGraniteSecurityUi = null;
        String comAdobeGraniteStartup = null;
        String comAdobeGraniteTagsoup = null;
        String comAdobeGraniteTaskmanagementCore = null;
        String comAdobeGraniteTaskmanagementWorkflow = null;
        String comAdobeGraniteUiClientlibsCompilerLess = null;
        String comAdobeGraniteUiClientlibsProcessorGcc = null;
        String comAdobeGraniteWebconsolePlugins = null;
        String comAdobeGraniteWorkflowConsole = null;
        String comAdobeXmpWorkerFilesNativeFragmentLinux = null;
        String comAdobeXmpWorkerFilesNativeFragmentMacosx = null;
        String comAdobeXmpWorkerFilesNativeFragmentWin = null;
        String comDayCommonsOsgiWrapperSimpleJndi = null;
        String comDayCqCqAuthhandler = null;
        String comDayCqCqCompatConfigupdate = null;
        String comDayCqCqLicensebranding = null;
        String comDayCqCqNotifcationImpl = null;
        String comDayCqCqReplicationAudit = null;
        String comDayCqCqSearchExt = null;
        String comDayCqDamCqDamAnnotationPrint = null;
        String comDayCqDamCqDamAssetUsage = null;
        String comDayCqDamCqDamS7dam = null;
        String comDayCqDamCqDamSimilaritysearch = null;
        String comDayCqDamDamWebdavSupport = null;
        String comDayCqPreUpgradeTasks = null;
        String comDayCqReplicationExtensions = null;
        String comDayCqWcmCqMsmCore = null;
        String comDayCqWcmCqWcmTranslation = null;
        String dayCommonsJrawio = null;
        String orgApacheAriesJmxWhiteboard = null;
        String orgApacheFelixHttpSslfilter = null;
        String orgApacheFelixOrgApacheFelixThreaddump = null;
        String orgApacheFelixWebconsolePluginsDs = null;
        String orgApacheFelixWebconsolePluginsEvent = null;
        String orgApacheFelixWebconsolePluginsMemoryusage = null;
        String orgApacheFelixWebconsolePluginsPackageadmin = null;
        String orgApacheJackrabbitOakAuthLdap = null;
        String orgApacheJackrabbitOakSegmentTar = null;
        String orgApacheJackrabbitOakSolrOsgi = null;
        String orgApacheSlingBundleresourceImpl = null;
        String orgApacheSlingCommonsFsclassloader = null;
        String orgApacheSlingCommonsLogWebconsole = null;
        String orgApacheSlingDatasource = null;
        String orgApacheSlingDiscoveryBase = null;
        String orgApacheSlingDiscoveryOak = null;
        String orgApacheSlingDiscoverySupport = null;
        String orgApacheSlingDistributionApi = null;
        String orgApacheSlingDistributionCore = null;
        String orgApacheSlingExtensionsWebconsolesecurityprovider = null;
        String orgApacheSlingHcWebconsole = null;
        String orgApacheSlingInstallerConsole = null;
        String orgApacheSlingInstallerProviderFile = null;
        String orgApacheSlingInstallerProviderJcr = null;
        String orgApacheSlingJcrDavex = null;
        String orgApacheSlingJcrResourcesecurity = null;
        String orgApacheSlingJmxProvider = null;
        String orgApacheSlingLaunchpadInstaller = null;
        String orgApacheSlingModelsImpl = null;
        String orgApacheSlingRepoinitParser = null;
        String orgApacheSlingResourceInventory = null;
        String orgApacheSlingResourceresolver = null;
        String orgApacheSlingScriptingJavascript = null;
        String orgApacheSlingScriptingJst = null;
        String orgApacheSlingScriptingSightlyJsProvider = null;
        String orgApacheSlingScriptingSightlyModelsProvider = null;
        String orgApacheSlingSecurity = null;
        String orgApacheSlingServletsCompat = null;
        String orgApacheSlingServletsGet = null;
        String orgApacheSlingStartupfilterDisabler = null;
        String orgApacheSlingTracer = null;
        String weRetailClientAppCore = null;
    ResponseEntity<ComAdobeGraniteApicontrollerFilterResolverHookFactoryInfo> response = api.comAdobeGraniteApicontrollerFilterResolverHookFactory(post, apply, delete, action, $location, propertylist, comAdobeCqCdnCdnRewriter, comAdobeCqCloudConfigComponents, comAdobeCqCloudConfigCore, comAdobeCqCloudConfigUi, comAdobeCqComAdobeCqEditor, comAdobeCqComAdobeCqProjectsCore, comAdobeCqComAdobeCqProjectsWcmCore, comAdobeCqComAdobeCqUiCommons, comAdobeCqComAdobeCqWcmStyle, comAdobeCqCqActivitymapIntegration, comAdobeCqCqContexthubCommons, comAdobeCqCqDtm, comAdobeCqCqHealthcheck, comAdobeCqCqMultisiteTargeting, comAdobeCqCqPreUpgradeCleanup, comAdobeCqCqProductInfoProvider, comAdobeCqCqRestSites, comAdobeCqCqSecurityHc, comAdobeCqDamCqDamSvgHandler, comAdobeCqDamCqScene7Imaging, comAdobeCqDtmReactorCore, comAdobeCqDtmReactorUi, comAdobeCqExpJspelResolver, comAdobeCqInboxCqInbox, comAdobeCqJsonSchemaParser, comAdobeCqMediaCqMediaPublishingDpsFpCore, comAdobeCqMobileCqMobileCaas, comAdobeCqMobileCqMobileIndexBuilder, comAdobeCqMobileCqMobilePhonegapBuild, comAdobeCqMyspell, comAdobeCqSampleWeRetailCore, comAdobeCqScreensComAdobeCqScreensDcc, comAdobeCqScreensComAdobeCqScreensMqCore, comAdobeCqSocialCqSocialAsProvider, comAdobeCqSocialCqSocialBadgingBasicImpl, comAdobeCqSocialCqSocialBadgingImpl, comAdobeCqSocialCqSocialCalendarImpl, comAdobeCqSocialCqSocialContentFragmentsImpl, comAdobeCqSocialCqSocialEnablementImpl, comAdobeCqSocialCqSocialGraphImpl, comAdobeCqSocialCqSocialIdeationImpl, comAdobeCqSocialCqSocialJcrProvider, comAdobeCqSocialCqSocialMembersImpl, comAdobeCqSocialCqSocialMsProvider, comAdobeCqSocialCqSocialNotificationsChannelsWeb, comAdobeCqSocialCqSocialNotificationsImpl, comAdobeCqSocialCqSocialRdbProvider, comAdobeCqSocialCqSocialScfImpl, comAdobeCqSocialCqSocialScoringBasicImpl, comAdobeCqSocialCqSocialScoringImpl, comAdobeCqSocialCqSocialServiceusersImpl, comAdobeCqSocialCqSocialSrpImpl, comAdobeCqSocialCqSocialUgcbaseImpl, comAdobeDamCqDamCfmImpl, comAdobeFormsFoundationFormsFoundationBase, comAdobeGraniteApicontroller, comAdobeGraniteAssetCore, comAdobeGraniteAuthSso, comAdobeGraniteBundlesHcImpl, comAdobeGraniteCompatRouter, comAdobeGraniteConf, comAdobeGraniteConfUiCore, comAdobeGraniteCors, comAdobeGraniteCrxExplorer, comAdobeGraniteCrxdeLite, comAdobeGraniteCryptoConfig, comAdobeGraniteCryptoExtension, comAdobeGraniteCryptoFile, comAdobeGraniteCryptoJcr, comAdobeGraniteCsrf, comAdobeGraniteDistributionCore, comAdobeGraniteDropwizardMetrics, comAdobeGraniteFragsImpl, comAdobeGraniteGibson, comAdobeGraniteInfocollector, comAdobeGraniteInstallerFactoryPackages, comAdobeGraniteJettySsl, comAdobeGraniteJobsAsync, comAdobeGraniteMaintenanceOak, comAdobeGraniteMonitoringCore, comAdobeGraniteQueries, comAdobeGraniteReplicationHcImpl, comAdobeGraniteRepositoryChecker, comAdobeGraniteRepositoryHcImpl, comAdobeGraniteRestAssets, comAdobeGraniteSecurityUi, comAdobeGraniteStartup, comAdobeGraniteTagsoup, comAdobeGraniteTaskmanagementCore, comAdobeGraniteTaskmanagementWorkflow, comAdobeGraniteUiClientlibsCompilerLess, comAdobeGraniteUiClientlibsProcessorGcc, comAdobeGraniteWebconsolePlugins, comAdobeGraniteWorkflowConsole, comAdobeXmpWorkerFilesNativeFragmentLinux, comAdobeXmpWorkerFilesNativeFragmentMacosx, comAdobeXmpWorkerFilesNativeFragmentWin, comDayCommonsOsgiWrapperSimpleJndi, comDayCqCqAuthhandler, comDayCqCqCompatConfigupdate, comDayCqCqLicensebranding, comDayCqCqNotifcationImpl, comDayCqCqReplicationAudit, comDayCqCqSearchExt, comDayCqDamCqDamAnnotationPrint, comDayCqDamCqDamAssetUsage, comDayCqDamCqDamS7dam, comDayCqDamCqDamSimilaritysearch, comDayCqDamDamWebdavSupport, comDayCqPreUpgradeTasks, comDayCqReplicationExtensions, comDayCqWcmCqMsmCore, comDayCqWcmCqWcmTranslation, dayCommonsJrawio, orgApacheAriesJmxWhiteboard, orgApacheFelixHttpSslfilter, orgApacheFelixOrgApacheFelixThreaddump, orgApacheFelixWebconsolePluginsDs, orgApacheFelixWebconsolePluginsEvent, orgApacheFelixWebconsolePluginsMemoryusage, orgApacheFelixWebconsolePluginsPackageadmin, orgApacheJackrabbitOakAuthLdap, orgApacheJackrabbitOakSegmentTar, orgApacheJackrabbitOakSolrOsgi, orgApacheSlingBundleresourceImpl, orgApacheSlingCommonsFsclassloader, orgApacheSlingCommonsLogWebconsole, orgApacheSlingDatasource, orgApacheSlingDiscoveryBase, orgApacheSlingDiscoveryOak, orgApacheSlingDiscoverySupport, orgApacheSlingDistributionApi, orgApacheSlingDistributionCore, orgApacheSlingExtensionsWebconsolesecurityprovider, orgApacheSlingHcWebconsole, orgApacheSlingInstallerConsole, orgApacheSlingInstallerProviderFile, orgApacheSlingInstallerProviderJcr, orgApacheSlingJcrDavex, orgApacheSlingJcrResourcesecurity, orgApacheSlingJmxProvider, orgApacheSlingLaunchpadInstaller, orgApacheSlingModelsImpl, orgApacheSlingRepoinitParser, orgApacheSlingResourceInventory, orgApacheSlingResourceresolver, orgApacheSlingScriptingJavascript, orgApacheSlingScriptingJst, orgApacheSlingScriptingSightlyJsProvider, orgApacheSlingScriptingSightlyModelsProvider, orgApacheSlingSecurity, orgApacheSlingServletsCompat, orgApacheSlingServletsGet, orgApacheSlingStartupfilterDisabler, orgApacheSlingTracer, weRetailClientAppCore , accept);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void comAdobeGraniteAuthCertImplClientCertAuthHandlerTest() throws Exception {
        Boolean post = null;
        Boolean apply = null;
        Boolean delete = null;
        String action = null;
        String $location = null;
        List<String> propertylist = null;
        String path = null;
        Integer serviceRanking = null;
    ResponseEntity<ComAdobeGraniteAuthCertImplClientCertAuthHandlerInfo> response = api.comAdobeGraniteAuthCertImplClientCertAuthHandler(post, apply, delete, action, $location, propertylist, path, serviceRanking , accept);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void comAdobeGraniteAuthImsTest() throws Exception {
        Boolean post = null;
        Boolean apply = null;
        Boolean delete = null;
        String action = null;
        String $location = null;
        List<String> propertylist = null;
        String configid = null;
        String scope = null;
    ResponseEntity<ComAdobeGraniteAuthImsInfo> response = api.comAdobeGraniteAuthIms(post, apply, delete, action, $location, propertylist, configid, scope , accept);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void comAdobeGraniteAuthImsImplExternalUserIdMappingProviderExtensionTest() throws Exception {
        Boolean post = null;
        Boolean apply = null;
        Boolean delete = null;
        String action = null;
        String $location = null;
        List<String> propertylist = null;
        String oauthProviderId = null;
    ResponseEntity<ComAdobeGraniteAuthImsImplExternalUserIdMappingProviderExtensionInfo> response = api.comAdobeGraniteAuthImsImplExternalUserIdMappingProviderExtension(post, apply, delete, action, $location, propertylist, oauthProviderId , accept);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void comAdobeGraniteAuthImsImplIMSAccessTokenRequestCustomizerImplTest() throws Exception {
        Boolean post = null;
        Boolean apply = null;
        Boolean delete = null;
        String action = null;
        String $location = null;
        List<String> propertylist = null;
        String authImsClientSecret = null;
        String customizerType = null;
    ResponseEntity<ComAdobeGraniteAuthImsImplIMSAccessTokenRequestCustomizerImplInfo> response = api.comAdobeGraniteAuthImsImplIMSAccessTokenRequestCustomizerImpl(post, apply, delete, action, $location, propertylist, authImsClientSecret, customizerType , accept);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void comAdobeGraniteAuthImsImplIMSInstanceCredentialsValidatorTest() throws Exception {
        Boolean post = null;
        Boolean apply = null;
        Boolean delete = null;
        String action = null;
        String $location = null;
        List<String> propertylist = null;
        String oauthProviderId = null;
    ResponseEntity<ComAdobeGraniteAuthImsImplIMSInstanceCredentialsValidatorInfo> response = api.comAdobeGraniteAuthImsImplIMSInstanceCredentialsValidator(post, apply, delete, action, $location, propertylist, oauthProviderId , accept);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void comAdobeGraniteAuthImsImplIMSProviderImplTest() throws Exception {
        Boolean post = null;
        Boolean apply = null;
        Boolean delete = null;
        String action = null;
        String $location = null;
        List<String> propertylist = null;
        String oauthProviderId = null;
        String oauthProviderImsAuthorizationUrl = null;
        String oauthProviderImsTokenUrl = null;
        String oauthProviderImsProfileUrl = null;
        List<String> oauthProviderImsExtendedDetailsUrls = null;
        String oauthProviderImsValidateTokenUrl = null;
        String oauthProviderImsSessionProperty = null;
        String oauthProviderImsServiceTokenClientId = null;
        String oauthProviderImsServiceTokenClientSecret = null;
        String oauthProviderImsServiceToken = null;
        String imsOrgRef = null;
        List<String> imsGroupMapping = null;
        Boolean oauthProviderImsOnlyLicenseGroup = null;
    ResponseEntity<ComAdobeGraniteAuthImsImplIMSProviderImplInfo> response = api.comAdobeGraniteAuthImsImplIMSProviderImpl(post, apply, delete, action, $location, propertylist, oauthProviderId, oauthProviderImsAuthorizationUrl, oauthProviderImsTokenUrl, oauthProviderImsProfileUrl, oauthProviderImsExtendedDetailsUrls, oauthProviderImsValidateTokenUrl, oauthProviderImsSessionProperty, oauthProviderImsServiceTokenClientId, oauthProviderImsServiceTokenClientSecret, oauthProviderImsServiceToken, imsOrgRef, imsGroupMapping, oauthProviderImsOnlyLicenseGroup , accept);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void comAdobeGraniteAuthImsImplImsConfigProviderImplTest() throws Exception {
        Boolean post = null;
        Boolean apply = null;
        Boolean delete = null;
        String action = null;
        String $location = null;
        List<String> propertylist = null;
        String oauthConfigmanagerImsConfigid = null;
        String imsOwningEntity = null;
        String aemInstanceId = null;
        String imsServiceCode = null;
    ResponseEntity<ComAdobeGraniteAuthImsImplImsConfigProviderImplInfo> response = api.comAdobeGraniteAuthImsImplImsConfigProviderImpl(post, apply, delete, action, $location, propertylist, oauthConfigmanagerImsConfigid, imsOwningEntity, aemInstanceId, imsServiceCode , accept);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void comAdobeGraniteAuthOauthAccesstokenProviderTest() throws Exception {
        Boolean post = null;
        Boolean apply = null;
        Boolean delete = null;
        String action = null;
        String $location = null;
        List<String> propertylist = null;
        String name = null;
        String authTokenProviderTitle = null;
        List<String> authTokenProviderDefaultClaims = null;
        String authTokenProviderEndpoint = null;
        String authAccessTokenRequest = null;
        String authTokenProviderKeypairAlias = null;
        Integer authTokenProviderConnTimeout = null;
        Integer authTokenProviderSoTimeout = null;
        String authTokenProviderClientId = null;
        String authTokenProviderScope = null;
        Boolean authTokenProviderReuseAccessToken = null;
        Boolean authTokenProviderRelaxedSsl = null;
        String tokenRequestCustomizerType = null;
        String authTokenValidatorType = null;
    ResponseEntity<ComAdobeGraniteAuthOauthAccesstokenProviderInfo> response = api.comAdobeGraniteAuthOauthAccesstokenProvider(post, apply, delete, action, $location, propertylist, name, authTokenProviderTitle, authTokenProviderDefaultClaims, authTokenProviderEndpoint, authAccessTokenRequest, authTokenProviderKeypairAlias, authTokenProviderConnTimeout, authTokenProviderSoTimeout, authTokenProviderClientId, authTokenProviderScope, authTokenProviderReuseAccessToken, authTokenProviderRelaxedSsl, tokenRequestCustomizerType, authTokenValidatorType , accept);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void comAdobeGraniteAuthOauthImplBearerAuthenticationHandlerTest() throws Exception {
        Boolean post = null;
        Boolean apply = null;
        Boolean delete = null;
        String action = null;
        String $location = null;
        List<String> propertylist = null;
        String path = null;
        List<String> oauthClientIdsAllowed = null;
        Boolean authBearerSyncIms = null;
        String authTokenRequestParameter = null;
        String oauthBearerConfigid = null;
        Boolean oauthJwtSupport = null;
    ResponseEntity<ComAdobeGraniteAuthOauthImplBearerAuthenticationHandlerInfo> response = api.comAdobeGraniteAuthOauthImplBearerAuthenticationHandler(post, apply, delete, action, $location, propertylist, path, oauthClientIdsAllowed, authBearerSyncIms, authTokenRequestParameter, oauthBearerConfigid, oauthJwtSupport , accept);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void comAdobeGraniteAuthOauthImplDefaultTokenValidatorImplTest() throws Exception {
        Boolean post = null;
        Boolean apply = null;
        Boolean delete = null;
        String action = null;
        String $location = null;
        List<String> propertylist = null;
        String authTokenValidatorType = null;
    ResponseEntity<ComAdobeGraniteAuthOauthImplDefaultTokenValidatorImplInfo> response = api.comAdobeGraniteAuthOauthImplDefaultTokenValidatorImpl(post, apply, delete, action, $location, propertylist, authTokenValidatorType , accept);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void comAdobeGraniteAuthOauthImplFacebookProviderImplTest() throws Exception {
        Boolean post = null;
        Boolean apply = null;
        Boolean delete = null;
        String action = null;
        String $location = null;
        List<String> propertylist = null;
        String oauthProviderId = null;
    ResponseEntity<ComAdobeGraniteAuthOauthImplFacebookProviderImplInfo> response = api.comAdobeGraniteAuthOauthImplFacebookProviderImpl(post, apply, delete, action, $location, propertylist, oauthProviderId , accept);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void comAdobeGraniteAuthOauthImplGithubProviderImplTest() throws Exception {
        Boolean post = null;
        Boolean apply = null;
        Boolean delete = null;
        String action = null;
        String $location = null;
        List<String> propertylist = null;
        String oauthProviderId = null;
        String oauthProviderGithubAuthorizationUrl = null;
        String oauthProviderGithubTokenUrl = null;
        String oauthProviderGithubProfileUrl = null;
    ResponseEntity<ComAdobeGraniteAuthOauthImplGithubProviderImplInfo> response = api.comAdobeGraniteAuthOauthImplGithubProviderImpl(post, apply, delete, action, $location, propertylist, oauthProviderId, oauthProviderGithubAuthorizationUrl, oauthProviderGithubTokenUrl, oauthProviderGithubProfileUrl , accept);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void comAdobeGraniteAuthOauthImplGraniteProviderTest() throws Exception {
        Boolean post = null;
        Boolean apply = null;
        Boolean delete = null;
        String action = null;
        String $location = null;
        List<String> propertylist = null;
        String oauthProviderId = null;
        String oauthProviderGraniteAuthorizationUrl = null;
        String oauthProviderGraniteTokenUrl = null;
        String oauthProviderGraniteProfileUrl = null;
        String oauthProviderGraniteExtendedDetailsUrls = null;
    ResponseEntity<ComAdobeGraniteAuthOauthImplGraniteProviderInfo> response = api.comAdobeGraniteAuthOauthImplGraniteProvider(post, apply, delete, action, $location, propertylist, oauthProviderId, oauthProviderGraniteAuthorizationUrl, oauthProviderGraniteTokenUrl, oauthProviderGraniteProfileUrl, oauthProviderGraniteExtendedDetailsUrls , accept);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void comAdobeGraniteAuthOauthImplHelperProviderConfigManagerTest() throws Exception {
        Boolean post = null;
        Boolean apply = null;
        Boolean delete = null;
        String action = null;
        String $location = null;
        List<String> propertylist = null;
        String oauthCookieLoginTimeout = null;
        String oauthCookieMaxAge = null;
    ResponseEntity<ComAdobeGraniteAuthOauthImplHelperProviderConfigManagerInfo> response = api.comAdobeGraniteAuthOauthImplHelperProviderConfigManager(post, apply, delete, action, $location, propertylist, oauthCookieLoginTimeout, oauthCookieMaxAge , accept);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void comAdobeGraniteAuthOauthImplHelperProviderConfigManagerInternalTest() throws Exception {
        Boolean post = null;
        Boolean apply = null;
        Boolean delete = null;
        String action = null;
        String $location = null;
        List<String> propertylist = null;
        String oauthCookieLoginTimeout = null;
        String oauthCookieMaxAge = null;
    ResponseEntity<ComAdobeGraniteAuthOauthImplHelperProviderConfigManagerInternalInfo> response = api.comAdobeGraniteAuthOauthImplHelperProviderConfigManagerInternal(post, apply, delete, action, $location, propertylist, oauthCookieLoginTimeout, oauthCookieMaxAge , accept);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void comAdobeGraniteAuthOauthImplOAuthAuthenticationHandlerTest() throws Exception {
        Boolean post = null;
        Boolean apply = null;
        Boolean delete = null;
        String action = null;
        String $location = null;
        List<String> propertylist = null;
        String path = null;
    ResponseEntity<ComAdobeGraniteAuthOauthImplOAuthAuthenticationHandlerInfo> response = api.comAdobeGraniteAuthOauthImplOAuthAuthenticationHandler(post, apply, delete, action, $location, propertylist, path , accept);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void comAdobeGraniteAuthOauthImplTwitterProviderImplTest() throws Exception {
        Boolean post = null;
        Boolean apply = null;
        Boolean delete = null;
        String action = null;
        String $location = null;
        List<String> propertylist = null;
        String oauthProviderId = null;
    ResponseEntity<ComAdobeGraniteAuthOauthImplTwitterProviderImplInfo> response = api.comAdobeGraniteAuthOauthImplTwitterProviderImpl(post, apply, delete, action, $location, propertylist, oauthProviderId , accept);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void comAdobeGraniteAuthOauthProviderTest() throws Exception {
        Boolean post = null;
        Boolean apply = null;
        Boolean delete = null;
        String action = null;
        String $location = null;
        List<String> propertylist = null;
        String oauthConfigId = null;
        String oauthClientId = null;
        String oauthClientSecret = null;
        List<String> oauthScope = null;
        String oauthConfigProviderId = null;
        Boolean oauthCreateUsers = null;
        String oauthUseridProperty = null;
        Boolean forceStrictUsernameMatching = null;
        Boolean oauthEncodeUserids = null;
        Boolean oauthHashUserids = null;
        String oauthCallBackUrl = null;
        Boolean oauthAccessTokenPersist = null;
        Boolean oauthAccessTokenPersistCookie = null;
        Boolean oauthCsrfStateProtection = null;
        Boolean oauthRedirectRequestParams = null;
        Boolean oauthConfigSiblingsAllow = null;
    ResponseEntity<ComAdobeGraniteAuthOauthProviderInfo> response = api.comAdobeGraniteAuthOauthProvider(post, apply, delete, action, $location, propertylist, oauthConfigId, oauthClientId, oauthClientSecret, oauthScope, oauthConfigProviderId, oauthCreateUsers, oauthUseridProperty, forceStrictUsernameMatching, oauthEncodeUserids, oauthHashUserids, oauthCallBackUrl, oauthAccessTokenPersist, oauthAccessTokenPersistCookie, oauthCsrfStateProtection, oauthRedirectRequestParams, oauthConfigSiblingsAllow , accept);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void comAdobeGraniteAuthRequirementImplDefaultRequirementHandlerTest() throws Exception {
        Boolean post = null;
        Boolean apply = null;
        Boolean delete = null;
        String action = null;
        String $location = null;
        List<String> propertylist = null;
        List<String> supportedPaths = null;
    ResponseEntity<ComAdobeGraniteAuthRequirementImplDefaultRequirementHandlerInfo> response = api.comAdobeGraniteAuthRequirementImplDefaultRequirementHandler(post, apply, delete, action, $location, propertylist, supportedPaths , accept);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void comAdobeGraniteAuthSamlSamlAuthenticationHandlerTest() throws Exception {
        Boolean post = null;
        Boolean apply = null;
        Boolean delete = null;
        String action = null;
        String $location = null;
        List<String> propertylist = null;
        List<String> path = null;
        Integer serviceRanking = null;
        String idpUrl = null;
        String idpCertAlias = null;
        Boolean idpHttpRedirect = null;
        String serviceProviderEntityId = null;
        String assertionConsumerServiceURL = null;
        String spPrivateKeyAlias = null;
        String keyStorePassword = null;
        String defaultRedirectUrl = null;
        String userIDAttribute = null;
        Boolean useEncryption = null;
        Boolean createUser = null;
        String userIntermediatePath = null;
        Boolean addGroupMemberships = null;
        String groupMembershipAttribute = null;
        List<String> defaultGroups = null;
        String nameIdFormat = null;
        List<String> synchronizeAttributes = null;
        Boolean handleLogout = null;
        String logoutUrl = null;
        Integer clockTolerance = null;
        String digestMethod = null;
        String signatureMethod = null;
        String identitySyncType = null;
        String idpIdentifier = null;
    ResponseEntity<ComAdobeGraniteAuthSamlSamlAuthenticationHandlerInfo> response = api.comAdobeGraniteAuthSamlSamlAuthenticationHandler(post, apply, delete, action, $location, propertylist, path, serviceRanking, idpUrl, idpCertAlias, idpHttpRedirect, serviceProviderEntityId, assertionConsumerServiceURL, spPrivateKeyAlias, keyStorePassword, defaultRedirectUrl, userIDAttribute, useEncryption, createUser, userIntermediatePath, addGroupMemberships, groupMembershipAttribute, defaultGroups, nameIdFormat, synchronizeAttributes, handleLogout, logoutUrl, clockTolerance, digestMethod, signatureMethod, identitySyncType, idpIdentifier , accept);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void comAdobeGraniteAuthSsoImplSsoAuthenticationHandlerTest() throws Exception {
        Boolean post = null;
        Boolean apply = null;
        Boolean delete = null;
        String action = null;
        String $location = null;
        List<String> propertylist = null;
        String path = null;
        Integer serviceRanking = null;
        String jaasControlFlag = null;
        String jaasRealmName = null;
        Integer jaasRanking = null;
        List<String> headers = null;
        List<String> cookies = null;
        List<String> parameters = null;
        List<String> usermap = null;
        String format = null;
        String trustedCredentialsAttribute = null;
    ResponseEntity<ComAdobeGraniteAuthSsoImplSsoAuthenticationHandlerInfo> response = api.comAdobeGraniteAuthSsoImplSsoAuthenticationHandler(post, apply, delete, action, $location, propertylist, path, serviceRanking, jaasControlFlag, jaasRealmName, jaasRanking, headers, cookies, parameters, usermap, format, trustedCredentialsAttribute , accept);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void comAdobeGraniteBundlesHcImplCodeCacheHealthCheckTest() throws Exception {
        Boolean post = null;
        Boolean apply = null;
        Boolean delete = null;
        String action = null;
        String $location = null;
        List<String> propertylist = null;
        List<String> hcTags = null;
        Integer minimumCodeCacheSize = null;
    ResponseEntity<ComAdobeGraniteBundlesHcImplCodeCacheHealthCheckInfo> response = api.comAdobeGraniteBundlesHcImplCodeCacheHealthCheck(post, apply, delete, action, $location, propertylist, hcTags, minimumCodeCacheSize , accept);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void comAdobeGraniteBundlesHcImplCrxdeSupportBundleHealthCheckTest() throws Exception {
        Boolean post = null;
        Boolean apply = null;
        Boolean delete = null;
        String action = null;
        String $location = null;
        List<String> propertylist = null;
        List<String> hcTags = null;
    ResponseEntity<ComAdobeGraniteBundlesHcImplCrxdeSupportBundleHealthCheckInfo> response = api.comAdobeGraniteBundlesHcImplCrxdeSupportBundleHealthCheck(post, apply, delete, action, $location, propertylist, hcTags , accept);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void comAdobeGraniteBundlesHcImplDavExBundleHealthCheckTest() throws Exception {
        Boolean post = null;
        Boolean apply = null;
        Boolean delete = null;
        String action = null;
        String $location = null;
        List<String> propertylist = null;
        List<String> hcTags = null;
    ResponseEntity<ComAdobeGraniteBundlesHcImplDavExBundleHealthCheckInfo> response = api.comAdobeGraniteBundlesHcImplDavExBundleHealthCheck(post, apply, delete, action, $location, propertylist, hcTags , accept);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void comAdobeGraniteBundlesHcImplInactiveBundlesHealthCheckTest() throws Exception {
        Boolean post = null;
        Boolean apply = null;
        Boolean delete = null;
        String action = null;
        String $location = null;
        List<String> propertylist = null;
        List<String> hcTags = null;
        List<String> ignoredBundles = null;
    ResponseEntity<ComAdobeGraniteBundlesHcImplInactiveBundlesHealthCheckInfo> response = api.comAdobeGraniteBundlesHcImplInactiveBundlesHealthCheck(post, apply, delete, action, $location, propertylist, hcTags, ignoredBundles , accept);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void comAdobeGraniteBundlesHcImplJobsHealthCheckTest() throws Exception {
        Boolean post = null;
        Boolean apply = null;
        Boolean delete = null;
        String action = null;
        String $location = null;
        List<String> propertylist = null;
        List<String> hcTags = null;
        Integer maxQueuedJobs = null;
    ResponseEntity<ComAdobeGraniteBundlesHcImplJobsHealthCheckInfo> response = api.comAdobeGraniteBundlesHcImplJobsHealthCheck(post, apply, delete, action, $location, propertylist, hcTags, maxQueuedJobs , accept);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void comAdobeGraniteBundlesHcImplSlingGetServletHealthCheckTest() throws Exception {
        Boolean post = null;
        Boolean apply = null;
        Boolean delete = null;
        String action = null;
        String $location = null;
        List<String> propertylist = null;
        List<String> hcTags = null;
    ResponseEntity<ComAdobeGraniteBundlesHcImplSlingGetServletHealthCheckInfo> response = api.comAdobeGraniteBundlesHcImplSlingGetServletHealthCheck(post, apply, delete, action, $location, propertylist, hcTags , accept);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void comAdobeGraniteBundlesHcImplSlingJavaScriptHandlerHealthCheckTest() throws Exception {
        Boolean post = null;
        Boolean apply = null;
        Boolean delete = null;
        String action = null;
        String $location = null;
        List<String> propertylist = null;
        List<String> hcTags = null;
    ResponseEntity<ComAdobeGraniteBundlesHcImplSlingJavaScriptHandlerHealthCheckInfo> response = api.comAdobeGraniteBundlesHcImplSlingJavaScriptHandlerHealthCheck(post, apply, delete, action, $location, propertylist, hcTags , accept);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void comAdobeGraniteBundlesHcImplSlingJspScriptHandlerHealthCheckTest() throws Exception {
        Boolean post = null;
        Boolean apply = null;
        Boolean delete = null;
        String action = null;
        String $location = null;
        List<String> propertylist = null;
        List<String> hcTags = null;
    ResponseEntity<ComAdobeGraniteBundlesHcImplSlingJspScriptHandlerHealthCheckInfo> response = api.comAdobeGraniteBundlesHcImplSlingJspScriptHandlerHealthCheck(post, apply, delete, action, $location, propertylist, hcTags , accept);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void comAdobeGraniteBundlesHcImplSlingReferrerFilterHealthCheckTest() throws Exception {
        Boolean post = null;
        Boolean apply = null;
        Boolean delete = null;
        String action = null;
        String $location = null;
        List<String> propertylist = null;
        List<String> hcTags = null;
    ResponseEntity<ComAdobeGraniteBundlesHcImplSlingReferrerFilterHealthCheckInfo> response = api.comAdobeGraniteBundlesHcImplSlingReferrerFilterHealthCheck(post, apply, delete, action, $location, propertylist, hcTags , accept);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void comAdobeGraniteBundlesHcImplWebDavBundleHealthCheckTest() throws Exception {
        Boolean post = null;
        Boolean apply = null;
        Boolean delete = null;
        String action = null;
        String $location = null;
        List<String> propertylist = null;
        List<String> hcTags = null;
    ResponseEntity<ComAdobeGraniteBundlesHcImplWebDavBundleHealthCheckInfo> response = api.comAdobeGraniteBundlesHcImplWebDavBundleHealthCheck(post, apply, delete, action, $location, propertylist, hcTags , accept);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void comAdobeGraniteCommentsInternalCommentReplicationContentFilterFacTest() throws Exception {
        Boolean post = null;
        Boolean apply = null;
        Boolean delete = null;
        String action = null;
        String $location = null;
        List<String> propertylist = null;
        List<String> replicateCommentResourceTypes = null;
    ResponseEntity<ComAdobeGraniteCommentsInternalCommentReplicationContentFilterFacInfo> response = api.comAdobeGraniteCommentsInternalCommentReplicationContentFilterFac(post, apply, delete, action, $location, propertylist, replicateCommentResourceTypes , accept);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void comAdobeGraniteCompatrouterImplCompatSwitchingServiceImplTest() throws Exception {
        Boolean post = null;
        Boolean apply = null;
        Boolean delete = null;
        String action = null;
        String $location = null;
        List<String> propertylist = null;
        List<String> compatgroups = null;
        Boolean enabled = null;
    ResponseEntity<ComAdobeGraniteCompatrouterImplCompatSwitchingServiceImplInfo> response = api.comAdobeGraniteCompatrouterImplCompatSwitchingServiceImpl(post, apply, delete, action, $location, propertylist, compatgroups, enabled , accept);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void comAdobeGraniteCompatrouterImplRoutingConfigTest() throws Exception {
        Boolean post = null;
        Boolean apply = null;
        Boolean delete = null;
        String action = null;
        String $location = null;
        List<String> propertylist = null;
        String id = null;
        String compatPath = null;
        String newPath = null;
    ResponseEntity<ComAdobeGraniteCompatrouterImplRoutingConfigInfo> response = api.comAdobeGraniteCompatrouterImplRoutingConfig(post, apply, delete, action, $location, propertylist, id, compatPath, newPath , accept);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void comAdobeGraniteCompatrouterImplSwitchMappingConfigTest() throws Exception {
        Boolean post = null;
        Boolean apply = null;
        Boolean delete = null;
        String action = null;
        String $location = null;
        List<String> propertylist = null;
        String group = null;
        List<String> ids = null;
    ResponseEntity<ComAdobeGraniteCompatrouterImplSwitchMappingConfigInfo> response = api.comAdobeGraniteCompatrouterImplSwitchMappingConfig(post, apply, delete, action, $location, propertylist, group, ids , accept);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void comAdobeGraniteConfImplRuntimeAwareConfigurationResourceResolvingTest() throws Exception {
        Boolean post = null;
        Boolean apply = null;
        Boolean delete = null;
        String action = null;
        String $location = null;
        List<String> propertylist = null;
        Boolean enabled = null;
        List<String> fallbackPaths = null;
    ResponseEntity<ComAdobeGraniteConfImplRuntimeAwareConfigurationResourceResolvingInfo> response = api.comAdobeGraniteConfImplRuntimeAwareConfigurationResourceResolving(post, apply, delete, action, $location, propertylist, enabled, fallbackPaths , accept);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void comAdobeGraniteContexthubImplContextHubImplTest() throws Exception {
        Boolean post = null;
        Boolean apply = null;
        Boolean delete = null;
        String action = null;
        String $location = null;
        List<String> propertylist = null;
        Boolean comAdobeGraniteContexthubSilentMode = null;
        Boolean comAdobeGraniteContexthubShowUi = null;
    ResponseEntity<ComAdobeGraniteContexthubImplContextHubImplInfo> response = api.comAdobeGraniteContexthubImplContextHubImpl(post, apply, delete, action, $location, propertylist, comAdobeGraniteContexthubSilentMode, comAdobeGraniteContexthubShowUi , accept);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void comAdobeGraniteCorsImplCORSPolicyImplTest() throws Exception {
        Boolean post = null;
        Boolean apply = null;
        Boolean delete = null;
        String action = null;
        String $location = null;
        List<String> propertylist = null;
        List<String> alloworigin = null;
        List<String> alloworiginregexp = null;
        List<String> allowedpaths = null;
        List<String> exposedheaders = null;
        Integer maxage = null;
        List<String> supportedheaders = null;
        List<String> supportedmethods = null;
        Boolean supportscredentials = null;
    ResponseEntity<ComAdobeGraniteCorsImplCORSPolicyImplInfo> response = api.comAdobeGraniteCorsImplCORSPolicyImpl(post, apply, delete, action, $location, propertylist, alloworigin, alloworiginregexp, allowedpaths, exposedheaders, maxage, supportedheaders, supportedmethods, supportscredentials , accept);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void comAdobeGraniteCsrfImplCSRFFilterTest() throws Exception {
        Boolean post = null;
        Boolean apply = null;
        Boolean delete = null;
        String action = null;
        String $location = null;
        List<String> propertylist = null;
        List<String> filterMethods = null;
        Boolean filterEnableSafeUserAgents = null;
        List<String> filterSafeUserAgents = null;
        List<String> filterExcludedPaths = null;
    ResponseEntity<ComAdobeGraniteCsrfImplCSRFFilterInfo> response = api.comAdobeGraniteCsrfImplCSRFFilter(post, apply, delete, action, $location, propertylist, filterMethods, filterEnableSafeUserAgents, filterSafeUserAgents, filterExcludedPaths , accept);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void comAdobeGraniteCsrfImplCSRFServletTest() throws Exception {
        Boolean post = null;
        Boolean apply = null;
        Boolean delete = null;
        String action = null;
        String $location = null;
        List<String> propertylist = null;
        Integer csrfTokenExpiresIn = null;
        String slingAuthRequirements = null;
    ResponseEntity<ComAdobeGraniteCsrfImplCSRFServletInfo> response = api.comAdobeGraniteCsrfImplCSRFServlet(post, apply, delete, action, $location, propertylist, csrfTokenExpiresIn, slingAuthRequirements , accept);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void comAdobeGraniteDistributionCoreImplCryptoDistributionTransportSeTest() throws Exception {
        Boolean post = null;
        Boolean apply = null;
        Boolean delete = null;
        String action = null;
        String $location = null;
        List<String> propertylist = null;
        String name = null;
        String username = null;
        String encryptedPassword = null;
    ResponseEntity<ComAdobeGraniteDistributionCoreImplCryptoDistributionTransportSeInfo> response = api.comAdobeGraniteDistributionCoreImplCryptoDistributionTransportSe(post, apply, delete, action, $location, propertylist, name, username, encryptedPassword , accept);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void comAdobeGraniteDistributionCoreImplDiffDiffChangesObserverTest() throws Exception {
        Boolean post = null;
        Boolean apply = null;
        Boolean delete = null;
        String action = null;
        String $location = null;
        List<String> propertylist = null;
        Boolean enabled = null;
        String agentName = null;
        String diffPath = null;
        String observedPath = null;
        String serviceName = null;
        String propertyNames = null;
        Integer distributionDelay = null;
        String serviceUserTarget = null;
    ResponseEntity<ComAdobeGraniteDistributionCoreImplDiffDiffChangesObserverInfo> response = api.comAdobeGraniteDistributionCoreImplDiffDiffChangesObserver(post, apply, delete, action, $location, propertylist, enabled, agentName, diffPath, observedPath, serviceName, propertyNames, distributionDelay, serviceUserTarget , accept);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void comAdobeGraniteDistributionCoreImplDiffDiffEventListenerTest() throws Exception {
        Boolean post = null;
        Boolean apply = null;
        Boolean delete = null;
        String action = null;
        String $location = null;
        List<String> propertylist = null;
        String diffPath = null;
        String serviceName = null;
        String serviceUserTarget = null;
    ResponseEntity<ComAdobeGraniteDistributionCoreImplDiffDiffEventListenerInfo> response = api.comAdobeGraniteDistributionCoreImplDiffDiffEventListener(post, apply, delete, action, $location, propertylist, diffPath, serviceName, serviceUserTarget , accept);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void comAdobeGraniteDistributionCoreImplDistributionToReplicationEvenTest() throws Exception {
        Boolean post = null;
        Boolean apply = null;
        Boolean delete = null;
        String action = null;
        String $location = null;
        List<String> propertylist = null;
        List<String> importerName = null;
    ResponseEntity<ComAdobeGraniteDistributionCoreImplDistributionToReplicationEvenInfo> response = api.comAdobeGraniteDistributionCoreImplDistributionToReplicationEven(post, apply, delete, action, $location, propertylist, importerName , accept);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void comAdobeGraniteDistributionCoreImplReplicationAdaptersReplicatTest() throws Exception {
        Boolean post = null;
        Boolean apply = null;
        Boolean delete = null;
        String action = null;
        String $location = null;
        List<String> propertylist = null;
        String providerName = null;
        Boolean forwardRequests = null;
    ResponseEntity<ComAdobeGraniteDistributionCoreImplReplicationAdaptersReplicatInfo> response = api.comAdobeGraniteDistributionCoreImplReplicationAdaptersReplicat(post, apply, delete, action, $location, propertylist, providerName, forwardRequests , accept);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void comAdobeGraniteDistributionCoreImplReplicationDistributionTransTest() throws Exception {
        Boolean post = null;
        Boolean apply = null;
        Boolean delete = null;
        String action = null;
        String $location = null;
        List<String> propertylist = null;
        Boolean forwardRequests = null;
    ResponseEntity<ComAdobeGraniteDistributionCoreImplReplicationDistributionTransInfo> response = api.comAdobeGraniteDistributionCoreImplReplicationDistributionTrans(post, apply, delete, action, $location, propertylist, forwardRequests , accept);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void comAdobeGraniteDistributionCoreImplTransportAccessTokenDistribuTest() throws Exception {
        Boolean post = null;
        Boolean apply = null;
        Boolean delete = null;
        String action = null;
        String $location = null;
        List<String> propertylist = null;
        String name = null;
        String serviceName = null;
        String userId = null;
        String accessTokenProviderTarget = null;
    ResponseEntity<ComAdobeGraniteDistributionCoreImplTransportAccessTokenDistribuInfo> response = api.comAdobeGraniteDistributionCoreImplTransportAccessTokenDistribu(post, apply, delete, action, $location, propertylist, name, serviceName, userId, accessTokenProviderTarget , accept);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void comAdobeGraniteFragsImplCheckHttpHeaderFlagTest() throws Exception {
        Boolean post = null;
        Boolean apply = null;
        Boolean delete = null;
        String action = null;
        String $location = null;
        List<String> propertylist = null;
        String featureName = null;
        String featureDescription = null;
        String httpHeaderName = null;
        String httpHeaderValuepattern = null;
    ResponseEntity<ComAdobeGraniteFragsImplCheckHttpHeaderFlagInfo> response = api.comAdobeGraniteFragsImplCheckHttpHeaderFlag(post, apply, delete, action, $location, propertylist, featureName, featureDescription, httpHeaderName, httpHeaderValuepattern , accept);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void comAdobeGraniteFragsImplRandomFeatureTest() throws Exception {
        Boolean post = null;
        Boolean apply = null;
        Boolean delete = null;
        String action = null;
        String $location = null;
        List<String> propertylist = null;
        String featureName = null;
        String featureDescription = null;
        String activePercentage = null;
        String cookieName = null;
        Integer cookieMaxAge = null;
    ResponseEntity<ComAdobeGraniteFragsImplRandomFeatureInfo> response = api.comAdobeGraniteFragsImplRandomFeature(post, apply, delete, action, $location, propertylist, featureName, featureDescription, activePercentage, cookieName, cookieMaxAge , accept);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void comAdobeGraniteHttpcacheFileFileCacheStoreTest() throws Exception {
        Boolean post = null;
        Boolean apply = null;
        Boolean delete = null;
        String action = null;
        String $location = null;
        List<String> propertylist = null;
        String comAdobeGraniteHttpcacheFileDocumentRoot = null;
        String comAdobeGraniteHttpcacheFileIncludeHost = null;
    ResponseEntity<ComAdobeGraniteHttpcacheFileFileCacheStoreInfo> response = api.comAdobeGraniteHttpcacheFileFileCacheStore(post, apply, delete, action, $location, propertylist, comAdobeGraniteHttpcacheFileDocumentRoot, comAdobeGraniteHttpcacheFileIncludeHost , accept);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void comAdobeGraniteHttpcacheImplOuterCacheFilterTest() throws Exception {
        Boolean post = null;
        Boolean apply = null;
        Boolean delete = null;
        String action = null;
        String $location = null;
        List<String> propertylist = null;
        List<String> comAdobeGraniteHttpcacheUrlPaths = null;
    ResponseEntity<ComAdobeGraniteHttpcacheImplOuterCacheFilterInfo> response = api.comAdobeGraniteHttpcacheImplOuterCacheFilter(post, apply, delete, action, $location, propertylist, comAdobeGraniteHttpcacheUrlPaths , accept);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void comAdobeGraniteI18nImplBundlePseudoTranslationsTest() throws Exception {
        Boolean post = null;
        Boolean apply = null;
        Boolean delete = null;
        String action = null;
        String $location = null;
        List<String> propertylist = null;
        List<String> pseudoPatterns = null;
    ResponseEntity<ComAdobeGraniteI18nImplBundlePseudoTranslationsInfo> response = api.comAdobeGraniteI18nImplBundlePseudoTranslations(post, apply, delete, action, $location, propertylist, pseudoPatterns , accept);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void comAdobeGraniteI18nImplPreferencesLocaleResolverServiceTest() throws Exception {
        Boolean post = null;
        Boolean apply = null;
        Boolean delete = null;
        String action = null;
        String $location = null;
        List<String> propertylist = null;
        String securityPreferencesName = null;
    ResponseEntity<ComAdobeGraniteI18nImplPreferencesLocaleResolverServiceInfo> response = api.comAdobeGraniteI18nImplPreferencesLocaleResolverService(post, apply, delete, action, $location, propertylist, securityPreferencesName , accept);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void comAdobeGraniteInfocollectorInfoCollectorTest() throws Exception {
        Boolean post = null;
        Boolean apply = null;
        Boolean delete = null;
        String action = null;
        String $location = null;
        List<String> propertylist = null;
        Boolean graniteInfocollectorIncludeThreadDumps = null;
        Boolean graniteInfocollectorIncludeHeapDump = null;
    ResponseEntity<ComAdobeGraniteInfocollectorInfoCollectorInfo> response = api.comAdobeGraniteInfocollectorInfoCollector(post, apply, delete, action, $location, propertylist, graniteInfocollectorIncludeThreadDumps, graniteInfocollectorIncludeHeapDump , accept);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void comAdobeGraniteJettySslInternalGraniteSslConnectorFactoryTest() throws Exception {
        Boolean post = null;
        Boolean apply = null;
        Boolean delete = null;
        String action = null;
        String $location = null;
        List<String> propertylist = null;
        Integer comAdobeGraniteJettySslPort = null;
        String comAdobeGraniteJettySslKeystoreUser = null;
        String comAdobeGraniteJettySslKeystorePassword = null;
        List<String> comAdobeGraniteJettySslCiphersuitesExcluded = null;
        List<String> comAdobeGraniteJettySslCiphersuitesIncluded = null;
        String comAdobeGraniteJettySslClientCertificate = null;
    ResponseEntity<ComAdobeGraniteJettySslInternalGraniteSslConnectorFactoryInfo> response = api.comAdobeGraniteJettySslInternalGraniteSslConnectorFactory(post, apply, delete, action, $location, propertylist, comAdobeGraniteJettySslPort, comAdobeGraniteJettySslKeystoreUser, comAdobeGraniteJettySslKeystorePassword, comAdobeGraniteJettySslCiphersuitesExcluded, comAdobeGraniteJettySslCiphersuitesIncluded, comAdobeGraniteJettySslClientCertificate , accept);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void comAdobeGraniteLicenseImplLicenseCheckFilterTest() throws Exception {
        Boolean post = null;
        Boolean apply = null;
        Boolean delete = null;
        String action = null;
        String $location = null;
        List<String> propertylist = null;
        Integer checkInternval = null;
        List<String> excludeIds = null;
        Boolean encryptPing = null;
    ResponseEntity<ComAdobeGraniteLicenseImplLicenseCheckFilterInfo> response = api.comAdobeGraniteLicenseImplLicenseCheckFilter(post, apply, delete, action, $location, propertylist, checkInternval, excludeIds, encryptPing , accept);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void comAdobeGraniteLoggingImplLogAnalyserImplTest() throws Exception {
        Boolean post = null;
        Boolean apply = null;
        Boolean delete = null;
        String action = null;
        String $location = null;
        List<String> propertylist = null;
        Integer messagesQueueSize = null;
        List<String> loggerConfig = null;
        Integer messagesSize = null;
    ResponseEntity<ComAdobeGraniteLoggingImplLogAnalyserImplInfo> response = api.comAdobeGraniteLoggingImplLogAnalyserImpl(post, apply, delete, action, $location, propertylist, messagesQueueSize, loggerConfig, messagesSize , accept);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void comAdobeGraniteLoggingImplLogErrorHealthCheckTest() throws Exception {
        Boolean post = null;
        Boolean apply = null;
        Boolean delete = null;
        String action = null;
        String $location = null;
        List<String> propertylist = null;
        List<String> hcTags = null;
    ResponseEntity<ComAdobeGraniteLoggingImplLogErrorHealthCheckInfo> response = api.comAdobeGraniteLoggingImplLogErrorHealthCheck(post, apply, delete, action, $location, propertylist, hcTags , accept);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void comAdobeGraniteMaintenanceCrxImplDataStoreGarbageCollectionTaskTest() throws Exception {
        Boolean post = null;
        Boolean apply = null;
        Boolean delete = null;
        String action = null;
        String $location = null;
        List<String> propertylist = null;
        Boolean graniteMaintenanceMandatory = null;
        String jobTopics = null;
    ResponseEntity<ComAdobeGraniteMaintenanceCrxImplDataStoreGarbageCollectionTaskInfo> response = api.comAdobeGraniteMaintenanceCrxImplDataStoreGarbageCollectionTask(post, apply, delete, action, $location, propertylist, graniteMaintenanceMandatory, jobTopics , accept);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void comAdobeGraniteMaintenanceCrxImplLuceneBinariesCleanupTaskTest() throws Exception {
        Boolean post = null;
        Boolean apply = null;
        Boolean delete = null;
        String action = null;
        String $location = null;
        List<String> propertylist = null;
        String jobTopics = null;
    ResponseEntity<ComAdobeGraniteMaintenanceCrxImplLuceneBinariesCleanupTaskInfo> response = api.comAdobeGraniteMaintenanceCrxImplLuceneBinariesCleanupTask(post, apply, delete, action, $location, propertylist, jobTopics , accept);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void comAdobeGraniteMaintenanceCrxImplRevisionCleanupTaskTest() throws Exception {
        Boolean post = null;
        Boolean apply = null;
        Boolean delete = null;
        String action = null;
        String $location = null;
        List<String> propertylist = null;
        List<String> fullGcDays = null;
    ResponseEntity<ComAdobeGraniteMaintenanceCrxImplRevisionCleanupTaskInfo> response = api.comAdobeGraniteMaintenanceCrxImplRevisionCleanupTask(post, apply, delete, action, $location, propertylist, fullGcDays , accept);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void comAdobeGraniteMonitoringImplScriptConfigImplTest() throws Exception {
        Boolean post = null;
        Boolean apply = null;
        Boolean delete = null;
        String action = null;
        String $location = null;
        List<String> propertylist = null;
        String scriptFilename = null;
        String scriptDisplay = null;
        String scriptPath = null;
        List<String> scriptPlatform = null;
        Integer interval = null;
        String jmxdomain = null;
    ResponseEntity<ComAdobeGraniteMonitoringImplScriptConfigImplInfo> response = api.comAdobeGraniteMonitoringImplScriptConfigImpl(post, apply, delete, action, $location, propertylist, scriptFilename, scriptDisplay, scriptPath, scriptPlatform, interval, jmxdomain , accept);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void comAdobeGraniteOauthServerAuthImplOAuth2ServerAuthenticationHanTest() throws Exception {
        Boolean post = null;
        Boolean apply = null;
        Boolean delete = null;
        String action = null;
        String $location = null;
        List<String> propertylist = null;
        String path = null;
        String jaasControlFlag = null;
        String jaasRealmName = null;
        Integer jaasRanking = null;
        Boolean oauthOfflineValidation = null;
    ResponseEntity<ComAdobeGraniteOauthServerAuthImplOAuth2ServerAuthenticationHanInfo> response = api.comAdobeGraniteOauthServerAuthImplOAuth2ServerAuthenticationHan(post, apply, delete, action, $location, propertylist, path, jaasControlFlag, jaasRealmName, jaasRanking, oauthOfflineValidation , accept);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void comAdobeGraniteOauthServerImplAccessTokenCleanupTaskTest() throws Exception {
        Boolean post = null;
        Boolean apply = null;
        Boolean delete = null;
        String action = null;
        String $location = null;
        List<String> propertylist = null;
        String schedulerExpression = null;
    ResponseEntity<ComAdobeGraniteOauthServerImplAccessTokenCleanupTaskInfo> response = api.comAdobeGraniteOauthServerImplAccessTokenCleanupTask(post, apply, delete, action, $location, propertylist, schedulerExpression , accept);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void comAdobeGraniteOauthServerImplOAuth2ClientRevocationServletTest() throws Exception {
        Boolean post = null;
        Boolean apply = null;
        Boolean delete = null;
        String action = null;
        String $location = null;
        List<String> propertylist = null;
        Boolean oauthClientRevocationActive = null;
    ResponseEntity<ComAdobeGraniteOauthServerImplOAuth2ClientRevocationServletInfo> response = api.comAdobeGraniteOauthServerImplOAuth2ClientRevocationServlet(post, apply, delete, action, $location, propertylist, oauthClientRevocationActive , accept);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void comAdobeGraniteOauthServerImplOAuth2RevocationEndpointServletTest() throws Exception {
        Boolean post = null;
        Boolean apply = null;
        Boolean delete = null;
        String action = null;
        String $location = null;
        List<String> propertylist = null;
        String slingServletPaths = null;
        Boolean oauthRevocationActive = null;
    ResponseEntity<ComAdobeGraniteOauthServerImplOAuth2RevocationEndpointServletInfo> response = api.comAdobeGraniteOauthServerImplOAuth2RevocationEndpointServlet(post, apply, delete, action, $location, propertylist, slingServletPaths, oauthRevocationActive , accept);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void comAdobeGraniteOauthServerImplOAuth2TokenEndpointServletTest() throws Exception {
        Boolean post = null;
        Boolean apply = null;
        Boolean delete = null;
        String action = null;
        String $location = null;
        List<String> propertylist = null;
        String oauthIssuer = null;
        String oauthAccessTokenExpiresIn = null;
        String osgiHttpWhiteboardServletPattern = null;
        String osgiHttpWhiteboardContextSelect = null;
    ResponseEntity<ComAdobeGraniteOauthServerImplOAuth2TokenEndpointServletInfo> response = api.comAdobeGraniteOauthServerImplOAuth2TokenEndpointServlet(post, apply, delete, action, $location, propertylist, oauthIssuer, oauthAccessTokenExpiresIn, osgiHttpWhiteboardServletPattern, osgiHttpWhiteboardContextSelect , accept);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void comAdobeGraniteOauthServerImplOAuth2TokenRevocationServletTest() throws Exception {
        Boolean post = null;
        Boolean apply = null;
        Boolean delete = null;
        String action = null;
        String $location = null;
        List<String> propertylist = null;
        Boolean oauthTokenRevocationActive = null;
    ResponseEntity<ComAdobeGraniteOauthServerImplOAuth2TokenRevocationServletInfo> response = api.comAdobeGraniteOauthServerImplOAuth2TokenRevocationServlet(post, apply, delete, action, $location, propertylist, oauthTokenRevocationActive , accept);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void comAdobeGraniteOffloadingImplOffloadingConfiguratorTest() throws Exception {
        Boolean post = null;
        Boolean apply = null;
        Boolean delete = null;
        String action = null;
        String $location = null;
        List<String> propertylist = null;
        String offloadingTransporter = null;
        Boolean offloadingCleanupPayload = null;
    ResponseEntity<ComAdobeGraniteOffloadingImplOffloadingConfiguratorInfo> response = api.comAdobeGraniteOffloadingImplOffloadingConfigurator(post, apply, delete, action, $location, propertylist, offloadingTransporter, offloadingCleanupPayload , accept);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void comAdobeGraniteOffloadingImplOffloadingJobClonerTest() throws Exception {
        Boolean post = null;
        Boolean apply = null;
        Boolean delete = null;
        String action = null;
        String $location = null;
        List<String> propertylist = null;
        Boolean offloadingJobclonerEnabled = null;
    ResponseEntity<ComAdobeGraniteOffloadingImplOffloadingJobClonerInfo> response = api.comAdobeGraniteOffloadingImplOffloadingJobCloner(post, apply, delete, action, $location, propertylist, offloadingJobclonerEnabled , accept);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void comAdobeGraniteOffloadingImplOffloadingJobOffloaderTest() throws Exception {
        Boolean post = null;
        Boolean apply = null;
        Boolean delete = null;
        String action = null;
        String $location = null;
        List<String> propertylist = null;
        Boolean offloadingOffloaderEnabled = null;
    ResponseEntity<ComAdobeGraniteOffloadingImplOffloadingJobOffloaderInfo> response = api.comAdobeGraniteOffloadingImplOffloadingJobOffloader(post, apply, delete, action, $location, propertylist, offloadingOffloaderEnabled , accept);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void comAdobeGraniteOffloadingImplTransporterOffloadingAgentManagerTest() throws Exception {
        Boolean post = null;
        Boolean apply = null;
        Boolean delete = null;
        String action = null;
        String $location = null;
        List<String> propertylist = null;
        Boolean offloadingAgentmanagerEnabled = null;
    ResponseEntity<ComAdobeGraniteOffloadingImplTransporterOffloadingAgentManagerInfo> response = api.comAdobeGraniteOffloadingImplTransporterOffloadingAgentManager(post, apply, delete, action, $location, propertylist, offloadingAgentmanagerEnabled , accept);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void comAdobeGraniteOffloadingImplTransporterOffloadingDefaultTranspoTest() throws Exception {
        Boolean post = null;
        Boolean apply = null;
        Boolean delete = null;
        String action = null;
        String $location = null;
        List<String> propertylist = null;
        String defaultTransportAgentToWorkerPrefix = null;
        String defaultTransportAgentToMasterPrefix = null;
        String defaultTransportInputPackage = null;
        String defaultTransportOutputPackage = null;
        Boolean defaultTransportReplicationSynchronous = null;
        Boolean defaultTransportContentpackage = null;
        Boolean offloadingTransporterDefaultEnabled = null;
    ResponseEntity<ComAdobeGraniteOffloadingImplTransporterOffloadingDefaultTranspoInfo> response = api.comAdobeGraniteOffloadingImplTransporterOffloadingDefaultTranspo(post, apply, delete, action, $location, propertylist, defaultTransportAgentToWorkerPrefix, defaultTransportAgentToMasterPrefix, defaultTransportInputPackage, defaultTransportOutputPackage, defaultTransportReplicationSynchronous, defaultTransportContentpackage, offloadingTransporterDefaultEnabled , accept);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void comAdobeGraniteOmnisearchImplCoreOmniSearchServiceImplTest() throws Exception {
        Boolean post = null;
        Boolean apply = null;
        Boolean delete = null;
        String action = null;
        String $location = null;
        List<String> propertylist = null;
        Integer omnisearchSuggestionRequiretextMin = null;
        Boolean omnisearchSuggestionSpellcheckRequire = null;
    ResponseEntity<ComAdobeGraniteOmnisearchImplCoreOmniSearchServiceImplInfo> response = api.comAdobeGraniteOmnisearchImplCoreOmniSearchServiceImpl(post, apply, delete, action, $location, propertylist, omnisearchSuggestionRequiretextMin, omnisearchSuggestionSpellcheckRequire , accept);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void comAdobeGraniteOptoutImplOptOutServiceImplTest() throws Exception {
        Boolean post = null;
        Boolean apply = null;
        Boolean delete = null;
        String action = null;
        String $location = null;
        List<String> propertylist = null;
        List<String> optoutCookies = null;
        List<String> optoutHeaders = null;
        List<String> optoutWhitelistCookies = null;
    ResponseEntity<ComAdobeGraniteOptoutImplOptOutServiceImplInfo> response = api.comAdobeGraniteOptoutImplOptOutServiceImpl(post, apply, delete, action, $location, propertylist, optoutCookies, optoutHeaders, optoutWhitelistCookies , accept);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void comAdobeGraniteQueriesImplHcAsyncIndexHealthCheckTest() throws Exception {
        Boolean post = null;
        Boolean apply = null;
        Boolean delete = null;
        String action = null;
        String $location = null;
        List<String> propertylist = null;
        Integer indexingCriticalThreshold = null;
        Integer indexingWarnThreshold = null;
        List<String> hcTags = null;
    ResponseEntity<ComAdobeGraniteQueriesImplHcAsyncIndexHealthCheckInfo> response = api.comAdobeGraniteQueriesImplHcAsyncIndexHealthCheck(post, apply, delete, action, $location, propertylist, indexingCriticalThreshold, indexingWarnThreshold, hcTags , accept);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void comAdobeGraniteQueriesImplHcLargeIndexHealthCheckTest() throws Exception {
        Boolean post = null;
        Boolean apply = null;
        Boolean delete = null;
        String action = null;
        String $location = null;
        List<String> propertylist = null;
        Integer largeIndexCriticalThreshold = null;
        Integer largeIndexWarnThreshold = null;
        List<String> hcTags = null;
    ResponseEntity<ComAdobeGraniteQueriesImplHcLargeIndexHealthCheckInfo> response = api.comAdobeGraniteQueriesImplHcLargeIndexHealthCheck(post, apply, delete, action, $location, propertylist, largeIndexCriticalThreshold, largeIndexWarnThreshold, hcTags , accept);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void comAdobeGraniteQueriesImplHcQueriesStatusHealthCheckTest() throws Exception {
        Boolean post = null;
        Boolean apply = null;
        Boolean delete = null;
        String action = null;
        String $location = null;
        List<String> propertylist = null;
        List<String> hcTags = null;
    ResponseEntity<ComAdobeGraniteQueriesImplHcQueriesStatusHealthCheckInfo> response = api.comAdobeGraniteQueriesImplHcQueriesStatusHealthCheck(post, apply, delete, action, $location, propertylist, hcTags , accept);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void comAdobeGraniteQueriesImplHcQueryHealthCheckMetricsTest() throws Exception {
        Boolean post = null;
        Boolean apply = null;
        Boolean delete = null;
        String action = null;
        String $location = null;
        List<String> propertylist = null;
        Integer getPeriod = null;
    ResponseEntity<ComAdobeGraniteQueriesImplHcQueryHealthCheckMetricsInfo> response = api.comAdobeGraniteQueriesImplHcQueryHealthCheckMetrics(post, apply, delete, action, $location, propertylist, getPeriod , accept);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void comAdobeGraniteQueriesImplHcQueryLimitsHealthCheckTest() throws Exception {
        Boolean post = null;
        Boolean apply = null;
        Boolean delete = null;
        String action = null;
        String $location = null;
        List<String> propertylist = null;
        List<String> hcTags = null;
    ResponseEntity<ComAdobeGraniteQueriesImplHcQueryLimitsHealthCheckInfo> response = api.comAdobeGraniteQueriesImplHcQueryLimitsHealthCheck(post, apply, delete, action, $location, propertylist, hcTags , accept);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void comAdobeGraniteReplicationHcImplReplicationQueueHealthCheckTest() throws Exception {
        Boolean post = null;
        Boolean apply = null;
        Boolean delete = null;
        String action = null;
        String $location = null;
        List<String> propertylist = null;
        Integer numberOfRetriesAllowed = null;
        List<String> hcTags = null;
    ResponseEntity<ComAdobeGraniteReplicationHcImplReplicationQueueHealthCheckInfo> response = api.comAdobeGraniteReplicationHcImplReplicationQueueHealthCheck(post, apply, delete, action, $location, propertylist, numberOfRetriesAllowed, hcTags , accept);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void comAdobeGraniteReplicationHcImplReplicationTransportUsersHealthCTest() throws Exception {
        Boolean post = null;
        Boolean apply = null;
        Boolean delete = null;
        String action = null;
        String $location = null;
        List<String> propertylist = null;
        List<String> hcTags = null;
    ResponseEntity<ComAdobeGraniteReplicationHcImplReplicationTransportUsersHealthCInfo> response = api.comAdobeGraniteReplicationHcImplReplicationTransportUsersHealthC(post, apply, delete, action, $location, propertylist, hcTags , accept);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void comAdobeGraniteRepositoryHcImplAuthorizableNodeNameHealthCheckTest() throws Exception {
        Boolean post = null;
        Boolean apply = null;
        Boolean delete = null;
        String action = null;
        String $location = null;
        List<String> propertylist = null;
        List<String> hcTags = null;
    ResponseEntity<ComAdobeGraniteRepositoryHcImplAuthorizableNodeNameHealthCheckInfo> response = api.comAdobeGraniteRepositoryHcImplAuthorizableNodeNameHealthCheck(post, apply, delete, action, $location, propertylist, hcTags , accept);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void comAdobeGraniteRepositoryHcImplContentSlingSlingContentHealthCTest() throws Exception {
        Boolean post = null;
        Boolean apply = null;
        Boolean delete = null;
        String action = null;
        String $location = null;
        List<String> propertylist = null;
        List<String> hcTags = null;
        List<String> excludeSearchPath = null;
    ResponseEntity<ComAdobeGraniteRepositoryHcImplContentSlingSlingContentHealthCInfo> response = api.comAdobeGraniteRepositoryHcImplContentSlingSlingContentHealthC(post, apply, delete, action, $location, propertylist, hcTags, excludeSearchPath , accept);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void comAdobeGraniteRepositoryHcImplContinuousRGCHealthCheckTest() throws Exception {
        Boolean post = null;
        Boolean apply = null;
        Boolean delete = null;
        String action = null;
        String $location = null;
        List<String> propertylist = null;
        List<String> hcTags = null;
    ResponseEntity<ComAdobeGraniteRepositoryHcImplContinuousRGCHealthCheckInfo> response = api.comAdobeGraniteRepositoryHcImplContinuousRGCHealthCheck(post, apply, delete, action, $location, propertylist, hcTags , accept);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void comAdobeGraniteRepositoryHcImplDefaultAccessUserProfileHealthCheTest() throws Exception {
        Boolean post = null;
        Boolean apply = null;
        Boolean delete = null;
        String action = null;
        String $location = null;
        List<String> propertylist = null;
        List<String> hcTags = null;
    ResponseEntity<ComAdobeGraniteRepositoryHcImplDefaultAccessUserProfileHealthCheInfo> response = api.comAdobeGraniteRepositoryHcImplDefaultAccessUserProfileHealthChe(post, apply, delete, action, $location, propertylist, hcTags , accept);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void comAdobeGraniteRepositoryHcImplDefaultLoginsHealthCheckTest() throws Exception {
        Boolean post = null;
        Boolean apply = null;
        Boolean delete = null;
        String action = null;
        String $location = null;
        List<String> propertylist = null;
        List<String> hcTags = null;
        List<String> accountLogins = null;
        List<String> consoleLogins = null;
    ResponseEntity<ComAdobeGraniteRepositoryHcImplDefaultLoginsHealthCheckInfo> response = api.comAdobeGraniteRepositoryHcImplDefaultLoginsHealthCheck(post, apply, delete, action, $location, propertylist, hcTags, accountLogins, consoleLogins , accept);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void comAdobeGraniteRepositoryHcImplDiskSpaceHealthCheckTest() throws Exception {
        Boolean post = null;
        Boolean apply = null;
        Boolean delete = null;
        String action = null;
        String $location = null;
        List<String> propertylist = null;
        List<String> hcTags = null;
        Integer diskSpaceWarnThreshold = null;
        Integer diskSpaceErrorThreshold = null;
    ResponseEntity<ComAdobeGraniteRepositoryHcImplDiskSpaceHealthCheckInfo> response = api.comAdobeGraniteRepositoryHcImplDiskSpaceHealthCheck(post, apply, delete, action, $location, propertylist, hcTags, diskSpaceWarnThreshold, diskSpaceErrorThreshold , accept);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void comAdobeGraniteRepositoryHcImplObservationQueueLengthHealthCheckTest() throws Exception {
        Boolean post = null;
        Boolean apply = null;
        Boolean delete = null;
        String action = null;
        String $location = null;
        List<String> propertylist = null;
        List<String> hcTags = null;
    ResponseEntity<ComAdobeGraniteRepositoryHcImplObservationQueueLengthHealthCheckInfo> response = api.comAdobeGraniteRepositoryHcImplObservationQueueLengthHealthCheck(post, apply, delete, action, $location, propertylist, hcTags , accept);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void comAdobeGraniteRepositoryImplCommitStatsConfigTest() throws Exception {
        Boolean post = null;
        Boolean apply = null;
        Boolean delete = null;
        String action = null;
        String $location = null;
        List<String> propertylist = null;
        Boolean enabled = null;
        Integer intervalSeconds = null;
        Integer commitsPerIntervalThreshold = null;
        Integer maxLocationLength = null;
        Integer maxDetailsShown = null;
        Integer minDetailsPercentage = null;
        List<String> threadMatchers = null;
        Integer maxGreedyDepth = null;
        String greedyStackMatchers = null;
        List<String> stackFilters = null;
        List<String> stackMatchers = null;
        List<String> stackCategorizers = null;
        List<String> stackShorteners = null;
    ResponseEntity<ComAdobeGraniteRepositoryImplCommitStatsConfigInfo> response = api.comAdobeGraniteRepositoryImplCommitStatsConfig(post, apply, delete, action, $location, propertylist, enabled, intervalSeconds, commitsPerIntervalThreshold, maxLocationLength, maxDetailsShown, minDetailsPercentage, threadMatchers, maxGreedyDepth, greedyStackMatchers, stackFilters, stackMatchers, stackCategorizers, stackShorteners , accept);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void comAdobeGraniteRepositoryServiceUserConfigurationTest() throws Exception {
        Boolean post = null;
        Boolean apply = null;
        Boolean delete = null;
        String action = null;
        String $location = null;
        List<String> propertylist = null;
        Integer serviceRanking = null;
        Boolean serviceusersSimpleSubjectPopulation = null;
        List<String> serviceusersList = null;
    ResponseEntity<ComAdobeGraniteRepositoryServiceUserConfigurationInfo> response = api.comAdobeGraniteRepositoryServiceUserConfiguration(post, apply, delete, action, $location, propertylist, serviceRanking, serviceusersSimpleSubjectPopulation, serviceusersList , accept);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void comAdobeGraniteRequestsLoggingImplHcRequestsStatusHealthCheckImTest() throws Exception {
        Boolean post = null;
        Boolean apply = null;
        Boolean delete = null;
        String action = null;
        String $location = null;
        List<String> propertylist = null;
        List<String> hcTags = null;
    ResponseEntity<ComAdobeGraniteRequestsLoggingImplHcRequestsStatusHealthCheckImInfo> response = api.comAdobeGraniteRequestsLoggingImplHcRequestsStatusHealthCheckIm(post, apply, delete, action, $location, propertylist, hcTags , accept);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void comAdobeGraniteResourcestatusImplCompositeStatusTypeTest() throws Exception {
        Boolean post = null;
        Boolean apply = null;
        Boolean delete = null;
        String action = null;
        String $location = null;
        List<String> propertylist = null;
        String name = null;
        List<String> types = null;
    ResponseEntity<ComAdobeGraniteResourcestatusImplCompositeStatusTypeInfo> response = api.comAdobeGraniteResourcestatusImplCompositeStatusType(post, apply, delete, action, $location, propertylist, name, types , accept);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void comAdobeGraniteResourcestatusImplStatusResourceProviderImplTest() throws Exception {
        Boolean post = null;
        Boolean apply = null;
        Boolean delete = null;
        String action = null;
        String $location = null;
        List<String> propertylist = null;
        String providerRoot = null;
    ResponseEntity<ComAdobeGraniteResourcestatusImplStatusResourceProviderImplInfo> response = api.comAdobeGraniteResourcestatusImplStatusResourceProviderImpl(post, apply, delete, action, $location, propertylist, providerRoot , accept);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void comAdobeGraniteRestAssetsImplAssetContentDispositionFilterTest() throws Exception {
        Boolean post = null;
        Boolean apply = null;
        Boolean delete = null;
        String action = null;
        String $location = null;
        List<String> propertylist = null;
        Boolean mimeAllowEmpty = null;
        List<String> mimeAllowed = null;
    ResponseEntity<ComAdobeGraniteRestAssetsImplAssetContentDispositionFilterInfo> response = api.comAdobeGraniteRestAssetsImplAssetContentDispositionFilter(post, apply, delete, action, $location, propertylist, mimeAllowEmpty, mimeAllowed , accept);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void comAdobeGraniteRestImplApiEndpointResourceProviderFactoryImplTest() throws Exception {
        Boolean post = null;
        Boolean apply = null;
        Boolean delete = null;
        String action = null;
        String $location = null;
        List<String> propertylist = null;
        String providerRoots = null;
    ResponseEntity<ComAdobeGraniteRestImplApiEndpointResourceProviderFactoryImplInfo> response = api.comAdobeGraniteRestImplApiEndpointResourceProviderFactoryImpl(post, apply, delete, action, $location, propertylist, providerRoots , accept);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void comAdobeGraniteRestImplServletDefaultGETServletTest() throws Exception {
        Boolean post = null;
        Boolean apply = null;
        Boolean delete = null;
        String action = null;
        String $location = null;
        List<String> propertylist = null;
        Integer defaultLimit = null;
        Boolean useAbsoluteUri = null;
    ResponseEntity<ComAdobeGraniteRestImplServletDefaultGETServletInfo> response = api.comAdobeGraniteRestImplServletDefaultGETServlet(post, apply, delete, action, $location, propertylist, defaultLimit, useAbsoluteUri , accept);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void comAdobeGraniteSecurityUserUiInternalServletsSSLConfigurationSTest() throws Exception {
        Boolean post = null;
        Boolean apply = null;
        Boolean delete = null;
        String action = null;
        String $location = null;
        List<String> propertylist = null;
        List<String> hcTags = null;
    ResponseEntity<ComAdobeGraniteSecurityUserUiInternalServletsSSLConfigurationSInfo> response = api.comAdobeGraniteSecurityUserUiInternalServletsSSLConfigurationS(post, apply, delete, action, $location, propertylist, hcTags , accept);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void comAdobeGraniteSecurityUserUserPropertiesServiceTest() throws Exception {
        Boolean post = null;
        Boolean apply = null;
        Boolean delete = null;
        String action = null;
        String $location = null;
        List<String> propertylist = null;
        String adapterCondition = null;
        List<String> graniteUserpropertiesNodetypes = null;
        List<String> graniteUserpropertiesResourcetypes = null;
    ResponseEntity<ComAdobeGraniteSecurityUserUserPropertiesServiceInfo> response = api.comAdobeGraniteSecurityUserUserPropertiesService(post, apply, delete, action, $location, propertylist, adapterCondition, graniteUserpropertiesNodetypes, graniteUserpropertiesResourcetypes , accept);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void comAdobeGraniteSocialgraphImplSocialGraphFactoryImplTest() throws Exception {
        Boolean post = null;
        Boolean apply = null;
        Boolean delete = null;
        String action = null;
        String $location = null;
        List<String> propertylist = null;
        String group2memberRelationshipOutgoing = null;
        List<String> group2memberExcludedOutgoing = null;
        String group2memberRelationshipIncoming = null;
        List<String> group2memberExcludedIncoming = null;
    ResponseEntity<ComAdobeGraniteSocialgraphImplSocialGraphFactoryImplInfo> response = api.comAdobeGraniteSocialgraphImplSocialGraphFactoryImpl(post, apply, delete, action, $location, propertylist, group2memberRelationshipOutgoing, group2memberExcludedOutgoing, group2memberRelationshipIncoming, group2memberExcludedIncoming , accept);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void comAdobeGraniteSystemMonitoringImplSystemStatsMBeanImplTest() throws Exception {
        Boolean post = null;
        Boolean apply = null;
        Boolean delete = null;
        String action = null;
        String $location = null;
        List<String> propertylist = null;
        String schedulerExpression = null;
        String jmxObjectname = null;
    ResponseEntity<ComAdobeGraniteSystemMonitoringImplSystemStatsMBeanImplInfo> response = api.comAdobeGraniteSystemMonitoringImplSystemStatsMBeanImpl(post, apply, delete, action, $location, propertylist, schedulerExpression, jmxObjectname , accept);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void comAdobeGraniteTaskmanagementImplJcrTaskAdapterFactoryTest() throws Exception {
        Boolean post = null;
        Boolean apply = null;
        Boolean delete = null;
        String action = null;
        String $location = null;
        List<String> propertylist = null;
        String adapterCondition = null;
    ResponseEntity<ComAdobeGraniteTaskmanagementImplJcrTaskAdapterFactoryInfo> response = api.comAdobeGraniteTaskmanagementImplJcrTaskAdapterFactory(post, apply, delete, action, $location, propertylist, adapterCondition , accept);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void comAdobeGraniteTaskmanagementImplJcrTaskArchiveServiceTest() throws Exception {
        Boolean post = null;
        Boolean apply = null;
        Boolean delete = null;
        String action = null;
        String $location = null;
        List<String> propertylist = null;
        Boolean archivingEnabled = null;
        String schedulerExpression = null;
        Integer archiveSinceDaysCompleted = null;
    ResponseEntity<ComAdobeGraniteTaskmanagementImplJcrTaskArchiveServiceInfo> response = api.comAdobeGraniteTaskmanagementImplJcrTaskArchiveService(post, apply, delete, action, $location, propertylist, archivingEnabled, schedulerExpression, archiveSinceDaysCompleted , accept);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void comAdobeGraniteTaskmanagementImplPurgeTaskPurgeMaintenanceTaskTest() throws Exception {
        Boolean post = null;
        Boolean apply = null;
        Boolean delete = null;
        String action = null;
        String $location = null;
        List<String> propertylist = null;
        Boolean purgeCompleted = null;
        Integer completedAge = null;
        Boolean purgeActive = null;
        Integer activeAge = null;
        Integer saveThreshold = null;
    ResponseEntity<ComAdobeGraniteTaskmanagementImplPurgeTaskPurgeMaintenanceTaskInfo> response = api.comAdobeGraniteTaskmanagementImplPurgeTaskPurgeMaintenanceTask(post, apply, delete, action, $location, propertylist, purgeCompleted, completedAge, purgeActive, activeAge, saveThreshold , accept);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void comAdobeGraniteTaskmanagementImplServiceTaskManagerAdapterFactorTest() throws Exception {
        Boolean post = null;
        Boolean apply = null;
        Boolean delete = null;
        String action = null;
        String $location = null;
        List<String> propertylist = null;
        String adapterCondition = null;
        List<String> taskmanagerAdmingroups = null;
    ResponseEntity<ComAdobeGraniteTaskmanagementImplServiceTaskManagerAdapterFactorInfo> response = api.comAdobeGraniteTaskmanagementImplServiceTaskManagerAdapterFactor(post, apply, delete, action, $location, propertylist, adapterCondition, taskmanagerAdmingroups , accept);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void comAdobeGraniteThreaddumpThreadDumpCollectorTest() throws Exception {
        Boolean post = null;
        Boolean apply = null;
        Boolean delete = null;
        String action = null;
        String $location = null;
        List<String> propertylist = null;
        Integer schedulerPeriod = null;
        String schedulerRunOn = null;
        Boolean graniteThreaddumpEnabled = null;
        Integer graniteThreaddumpDumpsPerFile = null;
        Boolean graniteThreaddumpEnableGzipCompression = null;
        Boolean graniteThreaddumpEnableDirectoriesCompression = null;
        Boolean graniteThreaddumpEnableJStack = null;
        Integer graniteThreaddumpMaxBackupDays = null;
        String graniteThreaddumpBackupCleanTrigger = null;
    ResponseEntity<ComAdobeGraniteThreaddumpThreadDumpCollectorInfo> response = api.comAdobeGraniteThreaddumpThreadDumpCollector(post, apply, delete, action, $location, propertylist, schedulerPeriod, schedulerRunOn, graniteThreaddumpEnabled, graniteThreaddumpDumpsPerFile, graniteThreaddumpEnableGzipCompression, graniteThreaddumpEnableDirectoriesCompression, graniteThreaddumpEnableJStack, graniteThreaddumpMaxBackupDays, graniteThreaddumpBackupCleanTrigger , accept);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void comAdobeGraniteTranslationConnectorMsftCoreImplMicrosoftTranslTest() throws Exception {
        Boolean post = null;
        Boolean apply = null;
        Boolean delete = null;
        String action = null;
        String $location = null;
        List<String> propertylist = null;
        String translationFactory = null;
        String defaultConnectorLabel = null;
        String defaultConnectorAttribution = null;
        String defaultConnectorWorkspaceId = null;
        String defaultConnectorSubscriptionKey = null;
        String languageMapLocation = null;
        String categoryMapLocation = null;
        Integer retryAttempts = null;
        Integer timeoutCount = null;
    ResponseEntity<ComAdobeGraniteTranslationConnectorMsftCoreImplMicrosoftTranslInfo> response = api.comAdobeGraniteTranslationConnectorMsftCoreImplMicrosoftTransl(post, apply, delete, action, $location, propertylist, translationFactory, defaultConnectorLabel, defaultConnectorAttribution, defaultConnectorWorkspaceId, defaultConnectorSubscriptionKey, languageMapLocation, categoryMapLocation, retryAttempts, timeoutCount , accept);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void comAdobeGraniteTranslationCoreImplTranslationManagerImplTest() throws Exception {
        Boolean post = null;
        Boolean apply = null;
        Boolean delete = null;
        String action = null;
        String $location = null;
        List<String> propertylist = null;
        String defaultConnectorName = null;
        String defaultCategory = null;
    ResponseEntity<ComAdobeGraniteTranslationCoreImplTranslationManagerImplInfo> response = api.comAdobeGraniteTranslationCoreImplTranslationManagerImpl(post, apply, delete, action, $location, propertylist, defaultConnectorName, defaultCategory , accept);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void comAdobeGraniteUiClientlibsImplHtmlLibraryManagerImplTest() throws Exception {
        Boolean post = null;
        Boolean apply = null;
        Boolean delete = null;
        String action = null;
        String $location = null;
        List<String> propertylist = null;
        Boolean htmllibmanagerTiming = null;
        String htmllibmanagerDebugInitJs = null;
        Boolean htmllibmanagerMinify = null;
        Boolean htmllibmanagerDebug = null;
        Boolean htmllibmanagerGzip = null;
        Integer htmllibmanagerMaxDataUriSize = null;
        Integer htmllibmanagerMaxage = null;
        Boolean htmllibmanagerForceCQUrlInfo = null;
        String htmllibmanagerDefaultthemename = null;
        String htmllibmanagerDefaultuserthemename = null;
        String htmllibmanagerClientmanager = null;
        List<String> htmllibmanagerPathList = null;
        List<String> htmllibmanagerExcludedPathList = null;
        List<String> htmllibmanagerProcessorJs = null;
        List<String> htmllibmanagerProcessorCss = null;
        List<String> htmllibmanagerLongcachePatterns = null;
        String htmllibmanagerLongcacheFormat = null;
        Boolean htmllibmanagerUseFileSystemOutputCache = null;
        String htmllibmanagerFileSystemOutputCacheLocation = null;
        List<String> htmllibmanagerDisableReplacement = null;
    ResponseEntity<ComAdobeGraniteUiClientlibsImplHtmlLibraryManagerImplInfo> response = api.comAdobeGraniteUiClientlibsImplHtmlLibraryManagerImpl(post, apply, delete, action, $location, propertylist, htmllibmanagerTiming, htmllibmanagerDebugInitJs, htmllibmanagerMinify, htmllibmanagerDebug, htmllibmanagerGzip, htmllibmanagerMaxDataUriSize, htmllibmanagerMaxage, htmllibmanagerForceCQUrlInfo, htmllibmanagerDefaultthemename, htmllibmanagerDefaultuserthemename, htmllibmanagerClientmanager, htmllibmanagerPathList, htmllibmanagerExcludedPathList, htmllibmanagerProcessorJs, htmllibmanagerProcessorCss, htmllibmanagerLongcachePatterns, htmllibmanagerLongcacheFormat, htmllibmanagerUseFileSystemOutputCache, htmllibmanagerFileSystemOutputCacheLocation, htmllibmanagerDisableReplacement , accept);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void comAdobeGraniteWorkflowConsoleFragsWorkflowWithdrawFeatureTest() throws Exception {
        Boolean post = null;
        Boolean apply = null;
        Boolean delete = null;
        String action = null;
        String $location = null;
        List<String> propertylist = null;
        Boolean enabled = null;
    ResponseEntity<ComAdobeGraniteWorkflowConsoleFragsWorkflowWithdrawFeatureInfo> response = api.comAdobeGraniteWorkflowConsoleFragsWorkflowWithdrawFeature(post, apply, delete, action, $location, propertylist, enabled , accept);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void comAdobeGraniteWorkflowConsolePublishWorkflowPublishEventServiceTest() throws Exception {
        Boolean post = null;
        Boolean apply = null;
        Boolean delete = null;
        String action = null;
        String $location = null;
        List<String> propertylist = null;
        Boolean graniteWorkflowWorkflowPublishEventServiceEnabled = null;
    ResponseEntity<ComAdobeGraniteWorkflowConsolePublishWorkflowPublishEventServiceInfo> response = api.comAdobeGraniteWorkflowConsolePublishWorkflowPublishEventService(post, apply, delete, action, $location, propertylist, graniteWorkflowWorkflowPublishEventServiceEnabled , accept);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void comAdobeGraniteWorkflowCoreJcrWorkflowBucketManagerTest() throws Exception {
        Boolean post = null;
        Boolean apply = null;
        Boolean delete = null;
        String action = null;
        String $location = null;
        List<String> propertylist = null;
        Integer bucketSize = null;
    ResponseEntity<ComAdobeGraniteWorkflowCoreJcrWorkflowBucketManagerInfo> response = api.comAdobeGraniteWorkflowCoreJcrWorkflowBucketManager(post, apply, delete, action, $location, propertylist, bucketSize , accept);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void comAdobeGraniteWorkflowCoreJobExternalProcessJobHandlerTest() throws Exception {
        Boolean post = null;
        Boolean apply = null;
        Boolean delete = null;
        String action = null;
        String $location = null;
        List<String> propertylist = null;
        Integer defaultTimeout = null;
        Integer maxTimeout = null;
        Integer defaultPeriod = null;
    ResponseEntity<ComAdobeGraniteWorkflowCoreJobExternalProcessJobHandlerInfo> response = api.comAdobeGraniteWorkflowCoreJobExternalProcessJobHandler(post, apply, delete, action, $location, propertylist, defaultTimeout, maxTimeout, defaultPeriod , accept);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void comAdobeGraniteWorkflowCoreJobJobHandlerTest() throws Exception {
        Boolean post = null;
        Boolean apply = null;
        Boolean delete = null;
        String action = null;
        String $location = null;
        List<String> propertylist = null;
        List<String> jobTopics = null;
        Boolean allowSelfProcessTermination = null;
    ResponseEntity<ComAdobeGraniteWorkflowCoreJobJobHandlerInfo> response = api.comAdobeGraniteWorkflowCoreJobJobHandler(post, apply, delete, action, $location, propertylist, jobTopics, allowSelfProcessTermination , accept);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void comAdobeGraniteWorkflowCoreOffloadingWorkflowOffloadingJobConsumTest() throws Exception {
        Boolean post = null;
        Boolean apply = null;
        Boolean delete = null;
        String action = null;
        String $location = null;
        List<String> propertylist = null;
        String jobTopics = null;
    ResponseEntity<ComAdobeGraniteWorkflowCoreOffloadingWorkflowOffloadingJobConsumInfo> response = api.comAdobeGraniteWorkflowCoreOffloadingWorkflowOffloadingJobConsum(post, apply, delete, action, $location, propertylist, jobTopics , accept);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void comAdobeGraniteWorkflowCorePayloadMapCacheTest() throws Exception {
        Boolean post = null;
        Boolean apply = null;
        Boolean delete = null;
        String action = null;
        String $location = null;
        List<String> propertylist = null;
        List<String> getSystemWorkflowModels = null;
        String getPackageRootPath = null;
    ResponseEntity<ComAdobeGraniteWorkflowCorePayloadMapCacheInfo> response = api.comAdobeGraniteWorkflowCorePayloadMapCache(post, apply, delete, action, $location, propertylist, getSystemWorkflowModels, getPackageRootPath , accept);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void comAdobeGraniteWorkflowCorePayloadmapPayloadMoveListenerTest() throws Exception {
        Boolean post = null;
        Boolean apply = null;
        Boolean delete = null;
        String action = null;
        String $location = null;
        List<String> propertylist = null;
        List<String> payloadMoveWhiteList = null;
        Boolean payloadMoveHandleFromWorkflowProcess = null;
    ResponseEntity<ComAdobeGraniteWorkflowCorePayloadmapPayloadMoveListenerInfo> response = api.comAdobeGraniteWorkflowCorePayloadmapPayloadMoveListener(post, apply, delete, action, $location, propertylist, payloadMoveWhiteList, payloadMoveHandleFromWorkflowProcess , accept);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void comAdobeGraniteWorkflowCoreWorkflowConfigTest() throws Exception {
        Boolean post = null;
        Boolean apply = null;
        Boolean delete = null;
        String action = null;
        String $location = null;
        List<String> propertylist = null;
        List<String> cqWorkflowConfigWorkflowPackagesRootPath = null;
        Boolean cqWorkflowConfigWorkflowProcessLegacyMode = null;
        Boolean cqWorkflowConfigAllowLocking = null;
    ResponseEntity<ComAdobeGraniteWorkflowCoreWorkflowConfigInfo> response = api.comAdobeGraniteWorkflowCoreWorkflowConfig(post, apply, delete, action, $location, propertylist, cqWorkflowConfigWorkflowPackagesRootPath, cqWorkflowConfigWorkflowProcessLegacyMode, cqWorkflowConfigAllowLocking , accept);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void comAdobeGraniteWorkflowCoreWorkflowSessionFactoryTest() throws Exception {
        Boolean post = null;
        Boolean apply = null;
        Boolean delete = null;
        String action = null;
        String $location = null;
        List<String> propertylist = null;
        String graniteWorkflowinboxSortPropertyName = null;
        String graniteWorkflowinboxSortOrder = null;
        Integer cqWorkflowJobRetry = null;
        List<String> cqWorkflowSuperuser = null;
        Integer graniteWorkflowInboxQuerySize = null;
        Boolean graniteWorkflowAdminUserGroupFilter = null;
        Boolean graniteWorkflowEnforceWorkitemAssigneePermissions = null;
        Boolean graniteWorkflowEnforceWorkflowInitiatorPermissions = null;
        Boolean graniteWorkflowInjectTenantIdInJobTopics = null;
        Integer graniteWorkflowMaxPurgeSaveThreshold = null;
        Integer graniteWorkflowMaxPurgeQueryCount = null;
    ResponseEntity<ComAdobeGraniteWorkflowCoreWorkflowSessionFactoryInfo> response = api.comAdobeGraniteWorkflowCoreWorkflowSessionFactory(post, apply, delete, action, $location, propertylist, graniteWorkflowinboxSortPropertyName, graniteWorkflowinboxSortOrder, cqWorkflowJobRetry, cqWorkflowSuperuser, graniteWorkflowInboxQuerySize, graniteWorkflowAdminUserGroupFilter, graniteWorkflowEnforceWorkitemAssigneePermissions, graniteWorkflowEnforceWorkflowInitiatorPermissions, graniteWorkflowInjectTenantIdInJobTopics, graniteWorkflowMaxPurgeSaveThreshold, graniteWorkflowMaxPurgeQueryCount , accept);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void comAdobeGraniteWorkflowPurgeSchedulerTest() throws Exception {
        Boolean post = null;
        Boolean apply = null;
        Boolean delete = null;
        String action = null;
        String $location = null;
        List<String> propertylist = null;
        String scheduledpurgeName = null;
        String scheduledpurgeWorkflowStatus = null;
        List<String> scheduledpurgeModelIds = null;
        Integer scheduledpurgeDaysold = null;
    ResponseEntity<ComAdobeGraniteWorkflowPurgeSchedulerInfo> response = api.comAdobeGraniteWorkflowPurgeScheduler(post, apply, delete, action, $location, propertylist, scheduledpurgeName, scheduledpurgeWorkflowStatus, scheduledpurgeModelIds, scheduledpurgeDaysold , accept);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void comAdobeOctopusNcommBootstrapTest() throws Exception {
        Boolean post = null;
        Boolean apply = null;
        Boolean delete = null;
        String action = null;
        String $location = null;
        List<String> propertylist = null;
        Integer maxConnections = null;
        Integer maxRequests = null;
        Integer requestTimeout = null;
        Integer requestRetries = null;
        Integer launchTimeout = null;
    ResponseEntity<ComAdobeOctopusNcommBootstrapInfo> response = api.comAdobeOctopusNcommBootstrap(post, apply, delete, action, $location, propertylist, maxConnections, maxRequests, requestTimeout, requestRetries, launchTimeout , accept);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void comAdobeSocialIntegrationsLivefyreUserPingforpullImplPingPullSTest() throws Exception {
        Boolean post = null;
        Boolean apply = null;
        Boolean delete = null;
        String action = null;
        String $location = null;
        List<String> propertylist = null;
        String communitiesIntegrationLivefyreSlingEventFilter = null;
    ResponseEntity<ComAdobeSocialIntegrationsLivefyreUserPingforpullImplPingPullSInfo> response = api.comAdobeSocialIntegrationsLivefyreUserPingforpullImplPingPullS(post, apply, delete, action, $location, propertylist, communitiesIntegrationLivefyreSlingEventFilter , accept);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void comAdobeXmpWorkerFilesNcommXMPFilesNCommTest() throws Exception {
        Boolean post = null;
        Boolean apply = null;
        Boolean delete = null;
        String action = null;
        String $location = null;
        List<String> propertylist = null;
        String maxConnections = null;
        String maxRequests = null;
        String requestTimeout = null;
        String logDir = null;
    ResponseEntity<ComAdobeXmpWorkerFilesNcommXMPFilesNCommInfo> response = api.comAdobeXmpWorkerFilesNcommXMPFilesNComm(post, apply, delete, action, $location, propertylist, maxConnections, maxRequests, requestTimeout, logDir , accept);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void comDayCommonsDatasourceJdbcpoolJdbcPoolServiceTest() throws Exception {
        Boolean post = null;
        Boolean apply = null;
        Boolean delete = null;
        String action = null;
        String $location = null;
        List<String> propertylist = null;
        String jdbcDriverClass = null;
        String jdbcConnectionUri = null;
        String jdbcUsername = null;
        String jdbcPassword = null;
        String jdbcValidationQuery = null;
        Boolean defaultReadonly = null;
        Boolean defaultAutocommit = null;
        Integer poolSize = null;
        Integer poolMaxWaitMsec = null;
        String datasourceName = null;
        List<String> datasourceSvcProperties = null;
    ResponseEntity<ComDayCommonsDatasourceJdbcpoolJdbcPoolServiceInfo> response = api.comDayCommonsDatasourceJdbcpoolJdbcPoolService(post, apply, delete, action, $location, propertylist, jdbcDriverClass, jdbcConnectionUri, jdbcUsername, jdbcPassword, jdbcValidationQuery, defaultReadonly, defaultAutocommit, poolSize, poolMaxWaitMsec, datasourceName, datasourceSvcProperties , accept);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void comDayCommonsHttpclientTest() throws Exception {
        Boolean post = null;
        Boolean apply = null;
        Boolean delete = null;
        String action = null;
        String $location = null;
        List<String> propertylist = null;
        Boolean proxyEnabled = null;
        String proxyHost = null;
        String proxyUser = null;
        String proxyPassword = null;
        String proxyNtlmHost = null;
        String proxyNtlmDomain = null;
        List<String> proxyExceptions = null;
    ResponseEntity<ComDayCommonsHttpclientInfo> response = api.comDayCommonsHttpclient(post, apply, delete, action, $location, propertylist, proxyEnabled, proxyHost, proxyUser, proxyPassword, proxyNtlmHost, proxyNtlmDomain, proxyExceptions , accept);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void comDayCqAnalyticsImplStorePropertiesChangeListenerTest() throws Exception {
        Boolean post = null;
        Boolean apply = null;
        Boolean delete = null;
        String action = null;
        String $location = null;
        List<String> propertylist = null;
        List<String> cqStoreListenerAdditionalStorePaths = null;
    ResponseEntity<ComDayCqAnalyticsImplStorePropertiesChangeListenerInfo> response = api.comDayCqAnalyticsImplStorePropertiesChangeListener(post, apply, delete, action, $location, propertylist, cqStoreListenerAdditionalStorePaths , accept);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void comDayCqAnalyticsSitecatalystImplExporterClassificationsExporteTest() throws Exception {
        Boolean post = null;
        Boolean apply = null;
        Boolean delete = null;
        String action = null;
        String $location = null;
        List<String> propertylist = null;
        List<String> allowedPaths = null;
        Integer cqAnalyticsSaintExporterPagesize = null;
    ResponseEntity<ComDayCqAnalyticsSitecatalystImplExporterClassificationsExporteInfo> response = api.comDayCqAnalyticsSitecatalystImplExporterClassificationsExporte(post, apply, delete, action, $location, propertylist, allowedPaths, cqAnalyticsSaintExporterPagesize , accept);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void comDayCqAnalyticsSitecatalystImplImporterReportImporterTest() throws Exception {
        Boolean post = null;
        Boolean apply = null;
        Boolean delete = null;
        String action = null;
        String $location = null;
        List<String> propertylist = null;
        Integer reportFetchAttempts = null;
        Integer reportFetchDelay = null;
    ResponseEntity<ComDayCqAnalyticsSitecatalystImplImporterReportImporterInfo> response = api.comDayCqAnalyticsSitecatalystImplImporterReportImporter(post, apply, delete, action, $location, propertylist, reportFetchAttempts, reportFetchDelay , accept);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void comDayCqAnalyticsSitecatalystImplSitecatalystAdapterFactoryTest() throws Exception {
        Boolean post = null;
        Boolean apply = null;
        Boolean delete = null;
        String action = null;
        String $location = null;
        List<String> propertylist = null;
        List<String> cqAnalyticsAdapterfactoryContextstores = null;
    ResponseEntity<ComDayCqAnalyticsSitecatalystImplSitecatalystAdapterFactoryInfo> response = api.comDayCqAnalyticsSitecatalystImplSitecatalystAdapterFactory(post, apply, delete, action, $location, propertylist, cqAnalyticsAdapterfactoryContextstores , accept);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void comDayCqAnalyticsSitecatalystImplSitecatalystHttpClientImplTest() throws Exception {
        Boolean post = null;
        Boolean apply = null;
        Boolean delete = null;
        String action = null;
        String $location = null;
        List<String> propertylist = null;
        List<String> cqAnalyticsSitecatalystServiceDatacenterUrl = null;
        List<String> devhostnamepatterns = null;
        Integer connectionTimeout = null;
        Integer socketTimeout = null;
    ResponseEntity<ComDayCqAnalyticsSitecatalystImplSitecatalystHttpClientImplInfo> response = api.comDayCqAnalyticsSitecatalystImplSitecatalystHttpClientImpl(post, apply, delete, action, $location, propertylist, cqAnalyticsSitecatalystServiceDatacenterUrl, devhostnamepatterns, connectionTimeout, socketTimeout , accept);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void comDayCqAnalyticsTestandtargetImplAccountOptionsUpdaterTest() throws Exception {
        Boolean post = null;
        Boolean apply = null;
        Boolean delete = null;
        String action = null;
        String $location = null;
        List<String> propertylist = null;
        Boolean cqAnalyticsTestandtargetAccountoptionsupdaterEnabled = null;
    ResponseEntity<ComDayCqAnalyticsTestandtargetImplAccountOptionsUpdaterInfo> response = api.comDayCqAnalyticsTestandtargetImplAccountOptionsUpdater(post, apply, delete, action, $location, propertylist, cqAnalyticsTestandtargetAccountoptionsupdaterEnabled , accept);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void comDayCqAnalyticsTestandtargetImplDeleteAuthorActivityListenerTest() throws Exception {
        Boolean post = null;
        Boolean apply = null;
        Boolean delete = null;
        String action = null;
        String $location = null;
        List<String> propertylist = null;
        Boolean cqAnalyticsTestandtargetDeleteauthoractivitylistenerEnabled = null;
    ResponseEntity<ComDayCqAnalyticsTestandtargetImplDeleteAuthorActivityListenerInfo> response = api.comDayCqAnalyticsTestandtargetImplDeleteAuthorActivityListener(post, apply, delete, action, $location, propertylist, cqAnalyticsTestandtargetDeleteauthoractivitylistenerEnabled , accept);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void comDayCqAnalyticsTestandtargetImplPushAuthorCampaignPageListenerTest() throws Exception {
        Boolean post = null;
        Boolean apply = null;
        Boolean delete = null;
        String action = null;
        String $location = null;
        List<String> propertylist = null;
        Boolean cqAnalyticsTestandtargetPushauthorcampaignpagelistenerEnabled = null;
    ResponseEntity<ComDayCqAnalyticsTestandtargetImplPushAuthorCampaignPageListenerInfo> response = api.comDayCqAnalyticsTestandtargetImplPushAuthorCampaignPageListener(post, apply, delete, action, $location, propertylist, cqAnalyticsTestandtargetPushauthorcampaignpagelistenerEnabled , accept);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void comDayCqAnalyticsTestandtargetImplSegmentImporterTest() throws Exception {
        Boolean post = null;
        Boolean apply = null;
        Boolean delete = null;
        String action = null;
        String $location = null;
        List<String> propertylist = null;
        Boolean cqAnalyticsTestandtargetSegmentimporterEnabled = null;
    ResponseEntity<ComDayCqAnalyticsTestandtargetImplSegmentImporterInfo> response = api.comDayCqAnalyticsTestandtargetImplSegmentImporter(post, apply, delete, action, $location, propertylist, cqAnalyticsTestandtargetSegmentimporterEnabled , accept);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void comDayCqAnalyticsTestandtargetImplServiceWebServiceImplTest() throws Exception {
        Boolean post = null;
        Boolean apply = null;
        Boolean delete = null;
        String action = null;
        String $location = null;
        List<String> propertylist = null;
        String endpointUri = null;
        Integer connectionTimeout = null;
        Integer socketTimeout = null;
    ResponseEntity<ComDayCqAnalyticsTestandtargetImplServiceWebServiceImplInfo> response = api.comDayCqAnalyticsTestandtargetImplServiceWebServiceImpl(post, apply, delete, action, $location, propertylist, endpointUri, connectionTimeout, socketTimeout , accept);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void comDayCqAnalyticsTestandtargetImplServletsAdminServerServletTest() throws Exception {
        Boolean post = null;
        Boolean apply = null;
        Boolean delete = null;
        String action = null;
        String $location = null;
        List<String> propertylist = null;
        String testandtargetEndpointUrl = null;
    ResponseEntity<ComDayCqAnalyticsTestandtargetImplServletsAdminServerServletInfo> response = api.comDayCqAnalyticsTestandtargetImplServletsAdminServerServlet(post, apply, delete, action, $location, propertylist, testandtargetEndpointUrl , accept);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void comDayCqAnalyticsTestandtargetImplTestandtargetHttpClientImplTest() throws Exception {
        Boolean post = null;
        Boolean apply = null;
        Boolean delete = null;
        String action = null;
        String $location = null;
        List<String> propertylist = null;
        String cqAnalyticsTestandtargetApiUrl = null;
        Integer cqAnalyticsTestandtargetTimeout = null;
        Integer cqAnalyticsTestandtargetSockettimeout = null;
        String cqAnalyticsTestandtargetRecommendationsUrlReplace = null;
        String cqAnalyticsTestandtargetRecommendationsUrlReplacewith = null;
    ResponseEntity<ComDayCqAnalyticsTestandtargetImplTestandtargetHttpClientImplInfo> response = api.comDayCqAnalyticsTestandtargetImplTestandtargetHttpClientImpl(post, apply, delete, action, $location, propertylist, cqAnalyticsTestandtargetApiUrl, cqAnalyticsTestandtargetTimeout, cqAnalyticsTestandtargetSockettimeout, cqAnalyticsTestandtargetRecommendationsUrlReplace, cqAnalyticsTestandtargetRecommendationsUrlReplacewith , accept);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void comDayCqAuthImplCugCugSupportImplTest() throws Exception {
        Boolean post = null;
        Boolean apply = null;
        Boolean delete = null;
        String action = null;
        String $location = null;
        List<String> propertylist = null;
        List<String> cugExemptedPrincipals = null;
        Boolean cugEnabled = null;
        String cugPrincipalsRegex = null;
        String cugPrincipalsReplacement = null;
    ResponseEntity<ComDayCqAuthImplCugCugSupportImplInfo> response = api.comDayCqAuthImplCugCugSupportImpl(post, apply, delete, action, $location, propertylist, cugExemptedPrincipals, cugEnabled, cugPrincipalsRegex, cugPrincipalsReplacement , accept);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void comDayCqAuthImplLoginSelectorHandlerTest() throws Exception {
        Boolean post = null;
        Boolean apply = null;
        Boolean delete = null;
        String action = null;
        String $location = null;
        List<String> propertylist = null;
        String path = null;
        Integer serviceRanking = null;
        List<String> authLoginselectorMappings = null;
        List<String> authLoginselectorChangepwMappings = null;
        String authLoginselectorDefaultloginpage = null;
        String authLoginselectorDefaultchangepwpage = null;
        List<String> authLoginselectorHandle = null;
        Boolean authLoginselectorHandleAllExtensions = null;
    ResponseEntity<ComDayCqAuthImplLoginSelectorHandlerInfo> response = api.comDayCqAuthImplLoginSelectorHandler(post, apply, delete, action, $location, propertylist, path, serviceRanking, authLoginselectorMappings, authLoginselectorChangepwMappings, authLoginselectorDefaultloginpage, authLoginselectorDefaultchangepwpage, authLoginselectorHandle, authLoginselectorHandleAllExtensions , accept);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void comDayCqCommonsImplExternalizerImplTest() throws Exception {
        Boolean post = null;
        Boolean apply = null;
        Boolean delete = null;
        String action = null;
        String $location = null;
        List<String> propertylist = null;
        List<String> externalizerDomains = null;
        String externalizerHost = null;
        String externalizerContextpath = null;
        Boolean externalizerEncodedpath = null;
    ResponseEntity<ComDayCqCommonsImplExternalizerImplInfo> response = api.comDayCqCommonsImplExternalizerImpl(post, apply, delete, action, $location, propertylist, externalizerDomains, externalizerHost, externalizerContextpath, externalizerEncodedpath , accept);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void comDayCqCommonsServletsRootMappingServletTest() throws Exception {
        Boolean post = null;
        Boolean apply = null;
        Boolean delete = null;
        String action = null;
        String $location = null;
        List<String> propertylist = null;
        String rootmappingTarget = null;
    ResponseEntity<ComDayCqCommonsServletsRootMappingServletInfo> response = api.comDayCqCommonsServletsRootMappingServlet(post, apply, delete, action, $location, propertylist, rootmappingTarget , accept);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void comDayCqCompatCodeupgradeImplCodeUpgradeExecutionConditionCheckeTest() throws Exception {
        Boolean post = null;
        Boolean apply = null;
        Boolean delete = null;
        String action = null;
        String $location = null;
        List<String> propertylist = null;
        List<String> codeupgradetasks = null;
        List<String> codeupgradetaskfilters = null;
    ResponseEntity<ComDayCqCompatCodeupgradeImplCodeUpgradeExecutionConditionCheckeInfo> response = api.comDayCqCompatCodeupgradeImplCodeUpgradeExecutionConditionChecke(post, apply, delete, action, $location, propertylist, codeupgradetasks, codeupgradetaskfilters , accept);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void comDayCqCompatCodeupgradeImplUpgradeTaskIgnoreListTest() throws Exception {
        Boolean post = null;
        Boolean apply = null;
        Boolean delete = null;
        String action = null;
        String $location = null;
        List<String> propertylist = null;
        List<String> upgradeTaskIgnoreList = null;
    ResponseEntity<ComDayCqCompatCodeupgradeImplUpgradeTaskIgnoreListInfo> response = api.comDayCqCompatCodeupgradeImplUpgradeTaskIgnoreList(post, apply, delete, action, $location, propertylist, upgradeTaskIgnoreList , accept);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void comDayCqCompatCodeupgradeImplVersionRangeTaskIgnorelistTest() throws Exception {
        Boolean post = null;
        Boolean apply = null;
        Boolean delete = null;
        String action = null;
        String $location = null;
        List<String> propertylist = null;
        String effectiveBundleListPath = null;
    ResponseEntity<ComDayCqCompatCodeupgradeImplVersionRangeTaskIgnorelistInfo> response = api.comDayCqCompatCodeupgradeImplVersionRangeTaskIgnorelist(post, apply, delete, action, $location, propertylist, effectiveBundleListPath , accept);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void comDayCqContentsyncImplContentSyncManagerImplTest() throws Exception {
        Boolean post = null;
        Boolean apply = null;
        Boolean delete = null;
        String action = null;
        String $location = null;
        List<String> propertylist = null;
        String contentsyncFallbackAuthorizable = null;
        String contentsyncFallbackUpdateuser = null;
    ResponseEntity<ComDayCqContentsyncImplContentSyncManagerImplInfo> response = api.comDayCqContentsyncImplContentSyncManagerImpl(post, apply, delete, action, $location, propertylist, contentsyncFallbackAuthorizable, contentsyncFallbackUpdateuser , accept);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void comDayCqDamCommonsHandlerStandardImageHandlerTest() throws Exception {
        Boolean post = null;
        Boolean apply = null;
        Boolean delete = null;
        String action = null;
        String $location = null;
        List<String> propertylist = null;
        Integer largeFileThreshold = null;
        Integer largeCommentThreshold = null;
        Boolean cqDamEnableExtMetaExtraction = null;
    ResponseEntity<ComDayCqDamCommonsHandlerStandardImageHandlerInfo> response = api.comDayCqDamCommonsHandlerStandardImageHandler(post, apply, delete, action, $location, propertylist, largeFileThreshold, largeCommentThreshold, cqDamEnableExtMetaExtraction , accept);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void comDayCqDamCommonsMetadataXmpFilterBlackWhiteTest() throws Exception {
        Boolean post = null;
        Boolean apply = null;
        Boolean delete = null;
        String action = null;
        String $location = null;
        List<String> propertylist = null;
        Boolean xmpFilterApplyWhitelist = null;
        List<String> xmpFilterWhitelist = null;
        Boolean xmpFilterApplyBlacklist = null;
        List<String> xmpFilterBlacklist = null;
    ResponseEntity<ComDayCqDamCommonsMetadataXmpFilterBlackWhiteInfo> response = api.comDayCqDamCommonsMetadataXmpFilterBlackWhite(post, apply, delete, action, $location, propertylist, xmpFilterApplyWhitelist, xmpFilterWhitelist, xmpFilterApplyBlacklist, xmpFilterBlacklist , accept);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void comDayCqDamCommonsUtilImplAssetCacheImplTest() throws Exception {
        Boolean post = null;
        Boolean apply = null;
        Boolean delete = null;
        String action = null;
        String $location = null;
        List<String> propertylist = null;
        Integer largeFileMin = null;
        Boolean cacheApply = null;
        List<String> mimeTypes = null;
    ResponseEntity<ComDayCqDamCommonsUtilImplAssetCacheImplInfo> response = api.comDayCqDamCommonsUtilImplAssetCacheImpl(post, apply, delete, action, $location, propertylist, largeFileMin, cacheApply, mimeTypes , accept);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void comDayCqDamCoreImplAnnotationPdfAnnotationPdfConfigTest() throws Exception {
        Boolean post = null;
        Boolean apply = null;
        Boolean delete = null;
        String action = null;
        String $location = null;
        List<String> propertylist = null;
        Integer cqDamConfigAnnotationPdfDocumentWidth = null;
        Integer cqDamConfigAnnotationPdfDocumentHeight = null;
        Integer cqDamConfigAnnotationPdfDocumentPaddingHorizontal = null;
        Integer cqDamConfigAnnotationPdfDocumentPaddingVertical = null;
        Integer cqDamConfigAnnotationPdfFontSize = null;
        String cqDamConfigAnnotationPdfFontColor = null;
        String cqDamConfigAnnotationPdfFontFamily = null;
        String cqDamConfigAnnotationPdfFontLight = null;
        Integer cqDamConfigAnnotationPdfMarginTextImage = null;
        Integer cqDamConfigAnnotationPdfMinImageHeight = null;
        Integer cqDamConfigAnnotationPdfReviewStatusWidth = null;
        String cqDamConfigAnnotationPdfReviewStatusColorApproved = null;
        String cqDamConfigAnnotationPdfReviewStatusColorRejected = null;
        String cqDamConfigAnnotationPdfReviewStatusColorChangesRequested = null;
        Integer cqDamConfigAnnotationPdfAnnotationMarkerWidth = null;
        Integer cqDamConfigAnnotationPdfAssetMinheight = null;
    ResponseEntity<ComDayCqDamCoreImplAnnotationPdfAnnotationPdfConfigInfo> response = api.comDayCqDamCoreImplAnnotationPdfAnnotationPdfConfig(post, apply, delete, action, $location, propertylist, cqDamConfigAnnotationPdfDocumentWidth, cqDamConfigAnnotationPdfDocumentHeight, cqDamConfigAnnotationPdfDocumentPaddingHorizontal, cqDamConfigAnnotationPdfDocumentPaddingVertical, cqDamConfigAnnotationPdfFontSize, cqDamConfigAnnotationPdfFontColor, cqDamConfigAnnotationPdfFontFamily, cqDamConfigAnnotationPdfFontLight, cqDamConfigAnnotationPdfMarginTextImage, cqDamConfigAnnotationPdfMinImageHeight, cqDamConfigAnnotationPdfReviewStatusWidth, cqDamConfigAnnotationPdfReviewStatusColorApproved, cqDamConfigAnnotationPdfReviewStatusColorRejected, cqDamConfigAnnotationPdfReviewStatusColorChangesRequested, cqDamConfigAnnotationPdfAnnotationMarkerWidth, cqDamConfigAnnotationPdfAssetMinheight , accept);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void comDayCqDamCoreImplAssetMoveListenerTest() throws Exception {
        Boolean post = null;
        Boolean apply = null;
        Boolean delete = null;
        String action = null;
        String $location = null;
        List<String> propertylist = null;
        Boolean enabled = null;
    ResponseEntity<ComDayCqDamCoreImplAssetMoveListenerInfo> response = api.comDayCqDamCoreImplAssetMoveListener(post, apply, delete, action, $location, propertylist, enabled , accept);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void comDayCqDamCoreImplAssethomeAssetHomePageConfigurationTest() throws Exception {
        Boolean post = null;
        Boolean apply = null;
        Boolean delete = null;
        String action = null;
        String $location = null;
        List<String> propertylist = null;
        Boolean isEnabled = null;
    ResponseEntity<ComDayCqDamCoreImplAssethomeAssetHomePageConfigurationInfo> response = api.comDayCqDamCoreImplAssethomeAssetHomePageConfiguration(post, apply, delete, action, $location, propertylist, isEnabled , accept);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void comDayCqDamCoreImplAssetlinkshareAdhocAssetShareProxyServletTest() throws Exception {
        Boolean post = null;
        Boolean apply = null;
        Boolean delete = null;
        String action = null;
        String $location = null;
        List<String> propertylist = null;
        Integer cqDamAdhocAssetSharePrezipMaxcontentsize = null;
    ResponseEntity<ComDayCqDamCoreImplAssetlinkshareAdhocAssetShareProxyServletInfo> response = api.comDayCqDamCoreImplAssetlinkshareAdhocAssetShareProxyServlet(post, apply, delete, action, $location, propertylist, cqDamAdhocAssetSharePrezipMaxcontentsize , accept);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void comDayCqDamCoreImplCacheCQBufferedImageCacheTest() throws Exception {
        Boolean post = null;
        Boolean apply = null;
        Boolean delete = null;
        String action = null;
        String $location = null;
        List<String> propertylist = null;
        Integer cqDamImageCacheMaxMemory = null;
        Integer cqDamImageCacheMaxAge = null;
        String cqDamImageCacheMaxDimension = null;
    ResponseEntity<ComDayCqDamCoreImplCacheCQBufferedImageCacheInfo> response = api.comDayCqDamCoreImplCacheCQBufferedImageCache(post, apply, delete, action, $location, propertylist, cqDamImageCacheMaxMemory, cqDamImageCacheMaxAge, cqDamImageCacheMaxDimension , accept);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void comDayCqDamCoreImplDamChangeEventListenerTest() throws Exception {
        Boolean post = null;
        Boolean apply = null;
        Boolean delete = null;
        String action = null;
        String $location = null;
        List<String> propertylist = null;
        List<String> changeeventlistenerObservedPaths = null;
    ResponseEntity<ComDayCqDamCoreImplDamChangeEventListenerInfo> response = api.comDayCqDamCoreImplDamChangeEventListener(post, apply, delete, action, $location, propertylist, changeeventlistenerObservedPaths , accept);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void comDayCqDamCoreImplDamEventPurgeServiceTest() throws Exception {
        Boolean post = null;
        Boolean apply = null;
        Boolean delete = null;
        String action = null;
        String $location = null;
        List<String> propertylist = null;
        String schedulerExpression = null;
        Integer maxSavedActivities = null;
        Integer saveInterval = null;
        Boolean enableActivityPurge = null;
        String eventTypes = null;
    ResponseEntity<ComDayCqDamCoreImplDamEventPurgeServiceInfo> response = api.comDayCqDamCoreImplDamEventPurgeService(post, apply, delete, action, $location, propertylist, schedulerExpression, maxSavedActivities, saveInterval, enableActivityPurge, eventTypes , accept);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void comDayCqDamCoreImplDamEventRecorderImplTest() throws Exception {
        Boolean post = null;
        Boolean apply = null;
        Boolean delete = null;
        String action = null;
        String $location = null;
        List<String> propertylist = null;
        String eventFilter = null;
        Integer eventQueueLength = null;
        Boolean eventrecorderEnabled = null;
        List<String> eventrecorderBlacklist = null;
        String eventrecorderEventtypes = null;
    ResponseEntity<ComDayCqDamCoreImplDamEventRecorderImplInfo> response = api.comDayCqDamCoreImplDamEventRecorderImpl(post, apply, delete, action, $location, propertylist, eventFilter, eventQueueLength, eventrecorderEnabled, eventrecorderBlacklist, eventrecorderEventtypes , accept);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void comDayCqDamCoreImplEventDamEventAuditListenerTest() throws Exception {
        Boolean post = null;
        Boolean apply = null;
        Boolean delete = null;
        String action = null;
        String $location = null;
        List<String> propertylist = null;
        String eventFilter = null;
        Boolean enabled = null;
    ResponseEntity<ComDayCqDamCoreImplEventDamEventAuditListenerInfo> response = api.comDayCqDamCoreImplEventDamEventAuditListener(post, apply, delete, action, $location, propertylist, eventFilter, enabled , accept);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void comDayCqDamCoreImplExpiryNotificationJobImplTest() throws Exception {
        Boolean post = null;
        Boolean apply = null;
        Boolean delete = null;
        String action = null;
        String $location = null;
        List<String> propertylist = null;
        Boolean cqDamExpiryNotificationSchedulerIstimebased = null;
        String cqDamExpiryNotificationSchedulerTimebasedRule = null;
        Integer cqDamExpiryNotificationSchedulerPeriodRule = null;
        Boolean sendEmail = null;
        Integer assetExpiredLimit = null;
        Integer priorNotificationSeconds = null;
        String cqDamExpiryNotificationUrlProtocol = null;
    ResponseEntity<ComDayCqDamCoreImplExpiryNotificationJobImplInfo> response = api.comDayCqDamCoreImplExpiryNotificationJobImpl(post, apply, delete, action, $location, propertylist, cqDamExpiryNotificationSchedulerIstimebased, cqDamExpiryNotificationSchedulerTimebasedRule, cqDamExpiryNotificationSchedulerPeriodRule, sendEmail, assetExpiredLimit, priorNotificationSeconds, cqDamExpiryNotificationUrlProtocol , accept);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void comDayCqDamCoreImplFoldermetadataschemaFolderMetadataSchemaFeatTest() throws Exception {
        Boolean post = null;
        Boolean apply = null;
        Boolean delete = null;
        String action = null;
        String $location = null;
        List<String> propertylist = null;
        Boolean isEnabled = null;
    ResponseEntity<ComDayCqDamCoreImplFoldermetadataschemaFolderMetadataSchemaFeatInfo> response = api.comDayCqDamCoreImplFoldermetadataschemaFolderMetadataSchemaFeat(post, apply, delete, action, $location, propertylist, isEnabled , accept);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void comDayCqDamCoreImplGfxCommonsGfxRendererTest() throws Exception {
        Boolean post = null;
        Boolean apply = null;
        Boolean delete = null;
        String action = null;
        String $location = null;
        List<String> propertylist = null;
        Boolean skipBufferedcache = null;
    ResponseEntity<ComDayCqDamCoreImplGfxCommonsGfxRendererInfo> response = api.comDayCqDamCoreImplGfxCommonsGfxRenderer(post, apply, delete, action, $location, propertylist, skipBufferedcache , accept);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void comDayCqDamCoreImplHandlerEPSFormatHandlerTest() throws Exception {
        Boolean post = null;
        Boolean apply = null;
        Boolean delete = null;
        String action = null;
        String $location = null;
        List<String> propertylist = null;
        String mimetype = null;
    ResponseEntity<ComDayCqDamCoreImplHandlerEPSFormatHandlerInfo> response = api.comDayCqDamCoreImplHandlerEPSFormatHandler(post, apply, delete, action, $location, propertylist, mimetype , accept);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void comDayCqDamCoreImplHandlerIndesignFormatHandlerTest() throws Exception {
        Boolean post = null;
        Boolean apply = null;
        Boolean delete = null;
        String action = null;
        String $location = null;
        List<String> propertylist = null;
        List<String> mimetype = null;
    ResponseEntity<ComDayCqDamCoreImplHandlerIndesignFormatHandlerInfo> response = api.comDayCqDamCoreImplHandlerIndesignFormatHandler(post, apply, delete, action, $location, propertylist, mimetype , accept);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void comDayCqDamCoreImplHandlerJpegHandlerTest() throws Exception {
        Boolean post = null;
        Boolean apply = null;
        Boolean delete = null;
        String action = null;
        String $location = null;
        List<String> propertylist = null;
        Boolean cqDamEnableExtMetaExtraction = null;
        Integer largeFileThreshold = null;
        Integer largeCommentThreshold = null;
    ResponseEntity<ComDayCqDamCoreImplHandlerJpegHandlerInfo> response = api.comDayCqDamCoreImplHandlerJpegHandler(post, apply, delete, action, $location, propertylist, cqDamEnableExtMetaExtraction, largeFileThreshold, largeCommentThreshold , accept);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void comDayCqDamCoreImplHandlerXmpNCommXMPHandlerTest() throws Exception {
        Boolean post = null;
        Boolean apply = null;
        Boolean delete = null;
        String action = null;
        String $location = null;
        List<String> propertylist = null;
        List<String> xmphandlerCqFormats = null;
    ResponseEntity<ComDayCqDamCoreImplHandlerXmpNCommXMPHandlerInfo> response = api.comDayCqDamCoreImplHandlerXmpNCommXMPHandler(post, apply, delete, action, $location, propertylist, xmphandlerCqFormats , accept);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void comDayCqDamCoreImplJmxAssetIndexUpdateMonitorTest() throws Exception {
        Boolean post = null;
        Boolean apply = null;
        Boolean delete = null;
        String action = null;
        String $location = null;
        List<String> propertylist = null;
        String jmxObjectname = null;
        Boolean propertyMeasureEnabled = null;
        String propertyName = null;
        Integer propertyMaxWaitMs = null;
        BigDecimal propertyMaxRate = null;
        Boolean fulltextMeasureEnabled = null;
        String fulltextName = null;
        Integer fulltextMaxWaitMs = null;
        BigDecimal fulltextMaxRate = null;
    ResponseEntity<ComDayCqDamCoreImplJmxAssetIndexUpdateMonitorInfo> response = api.comDayCqDamCoreImplJmxAssetIndexUpdateMonitor(post, apply, delete, action, $location, propertylist, jmxObjectname, propertyMeasureEnabled, propertyName, propertyMaxWaitMs, propertyMaxRate, fulltextMeasureEnabled, fulltextName, fulltextMaxWaitMs, fulltextMaxRate , accept);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void comDayCqDamCoreImplJmxAssetMigrationMBeanImplTest() throws Exception {
        Boolean post = null;
        Boolean apply = null;
        Boolean delete = null;
        String action = null;
        String $location = null;
        List<String> propertylist = null;
        String jmxObjectname = null;
    ResponseEntity<ComDayCqDamCoreImplJmxAssetMigrationMBeanImplInfo> response = api.comDayCqDamCoreImplJmxAssetMigrationMBeanImpl(post, apply, delete, action, $location, propertylist, jmxObjectname , accept);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void comDayCqDamCoreImplJmxAssetUpdateMonitorImplTest() throws Exception {
        Boolean post = null;
        Boolean apply = null;
        Boolean delete = null;
        String action = null;
        String $location = null;
        List<String> propertylist = null;
        String jmxObjectname = null;
        Boolean active = null;
    ResponseEntity<ComDayCqDamCoreImplJmxAssetUpdateMonitorImplInfo> response = api.comDayCqDamCoreImplJmxAssetUpdateMonitorImpl(post, apply, delete, action, $location, propertylist, jmxObjectname, active , accept);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void comDayCqDamCoreImplJobsMetadataexportAsyncMetadataExportConfigTest() throws Exception {
        Boolean post = null;
        Boolean apply = null;
        Boolean delete = null;
        String action = null;
        String $location = null;
        List<String> propertylist = null;
        String operation = null;
        Boolean emailEnabled = null;
    ResponseEntity<ComDayCqDamCoreImplJobsMetadataexportAsyncMetadataExportConfigInfo> response = api.comDayCqDamCoreImplJobsMetadataexportAsyncMetadataExportConfig(post, apply, delete, action, $location, propertylist, operation, emailEnabled , accept);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void comDayCqDamCoreImplJobsMetadataimportAsyncMetadataImportConfigTest() throws Exception {
        Boolean post = null;
        Boolean apply = null;
        Boolean delete = null;
        String action = null;
        String $location = null;
        List<String> propertylist = null;
        String operation = null;
        String operationIcon = null;
        String topicName = null;
        Boolean emailEnabled = null;
    ResponseEntity<ComDayCqDamCoreImplJobsMetadataimportAsyncMetadataImportConfigInfo> response = api.comDayCqDamCoreImplJobsMetadataimportAsyncMetadataImportConfig(post, apply, delete, action, $location, propertylist, operation, operationIcon, topicName, emailEnabled , accept);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void comDayCqDamCoreImplLightboxLightboxServletTest() throws Exception {
        Boolean post = null;
        Boolean apply = null;
        Boolean delete = null;
        String action = null;
        String $location = null;
        List<String> propertylist = null;
        String slingServletPaths = null;
        List<String> slingServletMethods = null;
        Boolean cqDamEnableAnonymous = null;
    ResponseEntity<ComDayCqDamCoreImplLightboxLightboxServletInfo> response = api.comDayCqDamCoreImplLightboxLightboxServlet(post, apply, delete, action, $location, propertylist, slingServletPaths, slingServletMethods, cqDamEnableAnonymous , accept);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void comDayCqDamCoreImplMetadataEditorSelectComponentHandlerTest() throws Exception {
        Boolean post = null;
        Boolean apply = null;
        Boolean delete = null;
        String action = null;
        String $location = null;
        List<String> propertylist = null;
        List<String> graniteColonData = null;
    ResponseEntity<ComDayCqDamCoreImplMetadataEditorSelectComponentHandlerInfo> response = api.comDayCqDamCoreImplMetadataEditorSelectComponentHandler(post, apply, delete, action, $location, propertylist, graniteColonData , accept);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void comDayCqDamCoreImplMimeTypeAssetUploadRestrictionHelperTest() throws Exception {
        Boolean post = null;
        Boolean apply = null;
        Boolean delete = null;
        String action = null;
        String $location = null;
        List<String> propertylist = null;
        Boolean cqDamAllowAllMime = null;
        List<String> cqDamAllowedAssetMimes = null;
    ResponseEntity<ComDayCqDamCoreImplMimeTypeAssetUploadRestrictionHelperInfo> response = api.comDayCqDamCoreImplMimeTypeAssetUploadRestrictionHelper(post, apply, delete, action, $location, propertylist, cqDamAllowAllMime, cqDamAllowedAssetMimes , accept);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void comDayCqDamCoreImplMimeTypeDamMimeTypeServiceImplTest() throws Exception {
        Boolean post = null;
        Boolean apply = null;
        Boolean delete = null;
        String action = null;
        String $location = null;
        List<String> propertylist = null;
        Boolean cqDamDetectAssetMimeFromContent = null;
    ResponseEntity<ComDayCqDamCoreImplMimeTypeDamMimeTypeServiceImplInfo> response = api.comDayCqDamCoreImplMimeTypeDamMimeTypeServiceImpl(post, apply, delete, action, $location, propertylist, cqDamDetectAssetMimeFromContent , accept);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void comDayCqDamCoreImplMissingMetadataNotificationJobTest() throws Exception {
        Boolean post = null;
        Boolean apply = null;
        Boolean delete = null;
        String action = null;
        String $location = null;
        List<String> propertylist = null;
        Boolean cqDamMissingmetadataNotificationSchedulerIstimebased = null;
        String cqDamMissingmetadataNotificationSchedulerTimebasedRule = null;
        Integer cqDamMissingmetadataNotificationSchedulerPeriodRule = null;
        String cqDamMissingmetadataNotificationRecipient = null;
    ResponseEntity<ComDayCqDamCoreImplMissingMetadataNotificationJobInfo> response = api.comDayCqDamCoreImplMissingMetadataNotificationJob(post, apply, delete, action, $location, propertylist, cqDamMissingmetadataNotificationSchedulerIstimebased, cqDamMissingmetadataNotificationSchedulerTimebasedRule, cqDamMissingmetadataNotificationSchedulerPeriodRule, cqDamMissingmetadataNotificationRecipient , accept);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void comDayCqDamCoreImplProcessSendTransientWorkflowCompletedEmailPrTest() throws Exception {
        Boolean post = null;
        Boolean apply = null;
        Boolean delete = null;
        String action = null;
        String $location = null;
        List<String> propertylist = null;
        String processLabel = null;
        Boolean notifyOnComplete = null;
    ResponseEntity<ComDayCqDamCoreImplProcessSendTransientWorkflowCompletedEmailPrInfo> response = api.comDayCqDamCoreImplProcessSendTransientWorkflowCompletedEmailPr(post, apply, delete, action, $location, propertylist, processLabel, notifyOnComplete , accept);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void comDayCqDamCoreImplProcessTextExtractionProcessTest() throws Exception {
        Boolean post = null;
        Boolean apply = null;
        Boolean delete = null;
        String action = null;
        String $location = null;
        List<String> propertylist = null;
        List<String> mimeTypes = null;
        Integer maxExtract = null;
    ResponseEntity<ComDayCqDamCoreImplProcessTextExtractionProcessInfo> response = api.comDayCqDamCoreImplProcessTextExtractionProcess(post, apply, delete, action, $location, propertylist, mimeTypes, maxExtract , accept);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void comDayCqDamCoreImplRenditionMakerImplTest() throws Exception {
        Boolean post = null;
        Boolean apply = null;
        Boolean delete = null;
        String action = null;
        String $location = null;
        List<String> propertylist = null;
        Boolean xmpPropagate = null;
        List<String> xmpExcludes = null;
    ResponseEntity<ComDayCqDamCoreImplRenditionMakerImplInfo> response = api.comDayCqDamCoreImplRenditionMakerImpl(post, apply, delete, action, $location, propertylist, xmpPropagate, xmpExcludes , accept);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void comDayCqDamCoreImplReportsReportExportServiceTest() throws Exception {
        Boolean post = null;
        Boolean apply = null;
        Boolean delete = null;
        String action = null;
        String $location = null;
        List<String> propertylist = null;
        Integer queryBatchSize = null;
    ResponseEntity<ComDayCqDamCoreImplReportsReportExportServiceInfo> response = api.comDayCqDamCoreImplReportsReportExportService(post, apply, delete, action, $location, propertylist, queryBatchSize , accept);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void comDayCqDamCoreImplReportsReportPurgeServiceTest() throws Exception {
        Boolean post = null;
        Boolean apply = null;
        Boolean delete = null;
        String action = null;
        String $location = null;
        List<String> propertylist = null;
        String schedulerExpression = null;
        Integer maxSavedReports = null;
        Integer timeDuration = null;
        Boolean enableReportPurge = null;
    ResponseEntity<ComDayCqDamCoreImplReportsReportPurgeServiceInfo> response = api.comDayCqDamCoreImplReportsReportPurgeService(post, apply, delete, action, $location, propertylist, schedulerExpression, maxSavedReports, timeDuration, enableReportPurge , accept);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void comDayCqDamCoreImplServletAssetDownloadServletTest() throws Exception {
        Boolean post = null;
        Boolean apply = null;
        Boolean delete = null;
        String action = null;
        String $location = null;
        List<String> propertylist = null;
        Boolean enabled = null;
    ResponseEntity<ComDayCqDamCoreImplServletAssetDownloadServletInfo> response = api.comDayCqDamCoreImplServletAssetDownloadServlet(post, apply, delete, action, $location, propertylist, enabled , accept);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void comDayCqDamCoreImplServletAssetStatusServletTest() throws Exception {
        Boolean post = null;
        Boolean apply = null;
        Boolean delete = null;
        String action = null;
        String $location = null;
        List<String> propertylist = null;
        Integer cqDamBatchStatusMaxassets = null;
    ResponseEntity<ComDayCqDamCoreImplServletAssetStatusServletInfo> response = api.comDayCqDamCoreImplServletAssetStatusServlet(post, apply, delete, action, $location, propertylist, cqDamBatchStatusMaxassets , accept);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void comDayCqDamCoreImplServletAssetXMPSearchServletTest() throws Exception {
        Boolean post = null;
        Boolean apply = null;
        Boolean delete = null;
        String action = null;
        String $location = null;
        List<String> propertylist = null;
        Integer cqDamBatchIndesignMaxassets = null;
    ResponseEntity<ComDayCqDamCoreImplServletAssetXMPSearchServletInfo> response = api.comDayCqDamCoreImplServletAssetXMPSearchServlet(post, apply, delete, action, $location, propertylist, cqDamBatchIndesignMaxassets , accept);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void comDayCqDamCoreImplServletBatchMetadataServletTest() throws Exception {
        Boolean post = null;
        Boolean apply = null;
        Boolean delete = null;
        String action = null;
        String $location = null;
        List<String> propertylist = null;
        List<String> cqDamBatchMetadataAssetDefault = null;
        List<String> cqDamBatchMetadataCollectionDefault = null;
        Integer cqDamBatchMetadataMaxresources = null;
    ResponseEntity<ComDayCqDamCoreImplServletBatchMetadataServletInfo> response = api.comDayCqDamCoreImplServletBatchMetadataServlet(post, apply, delete, action, $location, propertylist, cqDamBatchMetadataAssetDefault, cqDamBatchMetadataCollectionDefault, cqDamBatchMetadataMaxresources , accept);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void comDayCqDamCoreImplServletBinaryProviderServletTest() throws Exception {
        Boolean post = null;
        Boolean apply = null;
        Boolean delete = null;
        String action = null;
        String $location = null;
        List<String> propertylist = null;
        List<String> slingServletResourceTypes = null;
        List<String> slingServletMethods = null;
        Boolean cqDamDrmEnable = null;
    ResponseEntity<ComDayCqDamCoreImplServletBinaryProviderServletInfo> response = api.comDayCqDamCoreImplServletBinaryProviderServlet(post, apply, delete, action, $location, propertylist, slingServletResourceTypes, slingServletMethods, cqDamDrmEnable , accept);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void comDayCqDamCoreImplServletCollectionServletTest() throws Exception {
        Boolean post = null;
        Boolean apply = null;
        Boolean delete = null;
        String action = null;
        String $location = null;
        List<String> propertylist = null;
        List<String> cqDamBatchCollectionProperties = null;
        Integer cqDamBatchCollectionMaxcollections = null;
    ResponseEntity<ComDayCqDamCoreImplServletCollectionServletInfo> response = api.comDayCqDamCoreImplServletCollectionServlet(post, apply, delete, action, $location, propertylist, cqDamBatchCollectionProperties, cqDamBatchCollectionMaxcollections , accept);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void comDayCqDamCoreImplServletCollectionsServletTest() throws Exception {
        Boolean post = null;
        Boolean apply = null;
        Boolean delete = null;
        String action = null;
        String $location = null;
        List<String> propertylist = null;
        List<String> cqDamBatchCollectionsProperties = null;
        Integer cqDamBatchCollectionsLimit = null;
    ResponseEntity<ComDayCqDamCoreImplServletCollectionsServletInfo> response = api.comDayCqDamCoreImplServletCollectionsServlet(post, apply, delete, action, $location, propertylist, cqDamBatchCollectionsProperties, cqDamBatchCollectionsLimit , accept);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void comDayCqDamCoreImplServletCompanionServletTest() throws Exception {
        Boolean post = null;
        Boolean apply = null;
        Boolean delete = null;
        String action = null;
        String $location = null;
        List<String> propertylist = null;
        String moreInfo = null;
        String slashMntSlashOverlaySlashDamSlashGuiSlashContentSlashAssetsSlashMoreinfoHtmlSlash$LeftCurlyBracketPathRightCurlyBracket = null;
    ResponseEntity<ComDayCqDamCoreImplServletCompanionServletInfo> response = api.comDayCqDamCoreImplServletCompanionServlet(post, apply, delete, action, $location, propertylist, moreInfo, slashMntSlashOverlaySlashDamSlashGuiSlashContentSlashAssetsSlashMoreinfoHtmlSlash$LeftCurlyBracketPathRightCurlyBracket , accept);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void comDayCqDamCoreImplServletCreateAssetServletTest() throws Exception {
        Boolean post = null;
        Boolean apply = null;
        Boolean delete = null;
        String action = null;
        String $location = null;
        List<String> propertylist = null;
        Boolean detectDuplicate = null;
    ResponseEntity<ComDayCqDamCoreImplServletCreateAssetServletInfo> response = api.comDayCqDamCoreImplServletCreateAssetServlet(post, apply, delete, action, $location, propertylist, detectDuplicate , accept);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void comDayCqDamCoreImplServletDamContentDispositionFilterTest() throws Exception {
        Boolean post = null;
        Boolean apply = null;
        Boolean delete = null;
        String action = null;
        String $location = null;
        List<String> propertylist = null;
        List<String> cqMimeTypeBlacklist = null;
        Boolean cqDamEmptyMime = null;
    ResponseEntity<ComDayCqDamCoreImplServletDamContentDispositionFilterInfo> response = api.comDayCqDamCoreImplServletDamContentDispositionFilter(post, apply, delete, action, $location, propertylist, cqMimeTypeBlacklist, cqDamEmptyMime , accept);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void comDayCqDamCoreImplServletGuidLookupFilterTest() throws Exception {
        Boolean post = null;
        Boolean apply = null;
        Boolean delete = null;
        String action = null;
        String $location = null;
        List<String> propertylist = null;
        Boolean cqDamCoreGuidlookupfilterEnabled = null;
    ResponseEntity<ComDayCqDamCoreImplServletGuidLookupFilterInfo> response = api.comDayCqDamCoreImplServletGuidLookupFilter(post, apply, delete, action, $location, propertylist, cqDamCoreGuidlookupfilterEnabled , accept);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void comDayCqDamCoreImplServletHealthCheckServletTest() throws Exception {
        Boolean post = null;
        Boolean apply = null;
        Boolean delete = null;
        String action = null;
        String $location = null;
        List<String> propertylist = null;
        String cqDamSyncWorkflowId = null;
        List<String> cqDamSyncFolderTypes = null;
    ResponseEntity<ComDayCqDamCoreImplServletHealthCheckServletInfo> response = api.comDayCqDamCoreImplServletHealthCheckServlet(post, apply, delete, action, $location, propertylist, cqDamSyncWorkflowId, cqDamSyncFolderTypes , accept);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void comDayCqDamCoreImplServletMetadataGetServletTest() throws Exception {
        Boolean post = null;
        Boolean apply = null;
        Boolean delete = null;
        String action = null;
        String $location = null;
        List<String> propertylist = null;
        String slingServletResourceTypes = null;
        String slingServletMethods = null;
        String slingServletExtensions = null;
        String slingServletSelectors = null;
    ResponseEntity<ComDayCqDamCoreImplServletMetadataGetServletInfo> response = api.comDayCqDamCoreImplServletMetadataGetServlet(post, apply, delete, action, $location, propertylist, slingServletResourceTypes, slingServletMethods, slingServletExtensions, slingServletSelectors , accept);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void comDayCqDamCoreImplServletMultipleLicenseAcceptServletTest() throws Exception {
        Boolean post = null;
        Boolean apply = null;
        Boolean delete = null;
        String action = null;
        String $location = null;
        List<String> propertylist = null;
        Boolean cqDamDrmEnable = null;
    ResponseEntity<ComDayCqDamCoreImplServletMultipleLicenseAcceptServletInfo> response = api.comDayCqDamCoreImplServletMultipleLicenseAcceptServlet(post, apply, delete, action, $location, propertylist, cqDamDrmEnable , accept);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void comDayCqDamCoreImplServletResourceCollectionServletTest() throws Exception {
        Boolean post = null;
        Boolean apply = null;
        Boolean delete = null;
        String action = null;
        String $location = null;
        List<String> propertylist = null;
        List<String> slingServletResourceTypes = null;
        String slingServletMethods = null;
        String slingServletSelectors = null;
        String downloadConfig = null;
        String viewSelector = null;
        Boolean sendEmail = null;
    ResponseEntity<ComDayCqDamCoreImplServletResourceCollectionServletInfo> response = api.comDayCqDamCoreImplServletResourceCollectionServlet(post, apply, delete, action, $location, propertylist, slingServletResourceTypes, slingServletMethods, slingServletSelectors, downloadConfig, viewSelector, sendEmail , accept);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void comDayCqDamCoreImplUiPreviewFolderPreviewUpdaterImplTest() throws Exception {
        Boolean post = null;
        Boolean apply = null;
        Boolean delete = null;
        String action = null;
        String $location = null;
        List<String> propertylist = null;
        Boolean createPreviewEnabled = null;
        Boolean updatePreviewEnabled = null;
        Integer queueSize = null;
        String folderPreviewRenditionRegex = null;
    ResponseEntity<ComDayCqDamCoreImplUiPreviewFolderPreviewUpdaterImplInfo> response = api.comDayCqDamCoreImplUiPreviewFolderPreviewUpdaterImpl(post, apply, delete, action, $location, propertylist, createPreviewEnabled, updatePreviewEnabled, queueSize, folderPreviewRenditionRegex , accept);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void comDayCqDamCoreImplUnzipUnzipConfigTest() throws Exception {
        Boolean post = null;
        Boolean apply = null;
        Boolean delete = null;
        String action = null;
        String $location = null;
        List<String> propertylist = null;
        Integer cqDamConfigUnzipMaxuncompressedsize = null;
        String cqDamConfigUnzipEncoding = null;
    ResponseEntity<ComDayCqDamCoreImplUnzipUnzipConfigInfo> response = api.comDayCqDamCoreImplUnzipUnzipConfig(post, apply, delete, action, $location, propertylist, cqDamConfigUnzipMaxuncompressedsize, cqDamConfigUnzipEncoding , accept);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void comDayCqDamCoreProcessExifToolExtractMetadataProcessTest() throws Exception {
        Boolean post = null;
        Boolean apply = null;
        Boolean delete = null;
        String action = null;
        String $location = null;
        List<String> propertylist = null;
        String processLabel = null;
        Boolean cqDamEnableSha1 = null;
    ResponseEntity<ComDayCqDamCoreProcessExifToolExtractMetadataProcessInfo> response = api.comDayCqDamCoreProcessExifToolExtractMetadataProcess(post, apply, delete, action, $location, propertylist, processLabel, cqDamEnableSha1 , accept);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void comDayCqDamCoreProcessExtractMetadataProcessTest() throws Exception {
        Boolean post = null;
        Boolean apply = null;
        Boolean delete = null;
        String action = null;
        String $location = null;
        List<String> propertylist = null;
        String processLabel = null;
        Boolean cqDamEnableSha1 = null;
    ResponseEntity<ComDayCqDamCoreProcessExtractMetadataProcessInfo> response = api.comDayCqDamCoreProcessExtractMetadataProcess(post, apply, delete, action, $location, propertylist, processLabel, cqDamEnableSha1 , accept);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void comDayCqDamCoreProcessMetadataProcessorProcessTest() throws Exception {
        Boolean post = null;
        Boolean apply = null;
        Boolean delete = null;
        String action = null;
        String $location = null;
        List<String> propertylist = null;
        String processLabel = null;
        Boolean cqDamEnableSha1 = null;
        List<String> cqDamMetadataXssprotectedProperties = null;
    ResponseEntity<ComDayCqDamCoreProcessMetadataProcessorProcessInfo> response = api.comDayCqDamCoreProcessMetadataProcessorProcess(post, apply, delete, action, $location, propertylist, processLabel, cqDamEnableSha1, cqDamMetadataXssprotectedProperties , accept);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void comDayCqDamHandlerFfmpegLocatorImplTest() throws Exception {
        Boolean post = null;
        Boolean apply = null;
        Boolean delete = null;
        String action = null;
        String $location = null;
        List<String> propertylist = null;
        List<String> executableSearchpath = null;
    ResponseEntity<ComDayCqDamHandlerFfmpegLocatorImplInfo> response = api.comDayCqDamHandlerFfmpegLocatorImpl(post, apply, delete, action, $location, propertylist, executableSearchpath , accept);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void comDayCqDamHandlerGibsonFontmanagerImplFontManagerServiceImplTest() throws Exception {
        Boolean post = null;
        Boolean apply = null;
        Boolean delete = null;
        String action = null;
        String $location = null;
        List<String> propertylist = null;
        String eventFilter = null;
        List<String> fontmgrSystemFontDir = null;
        String fontmgrAdobeFontDir = null;
        String fontmgrCustomerFontDir = null;
    ResponseEntity<ComDayCqDamHandlerGibsonFontmanagerImplFontManagerServiceImplInfo> response = api.comDayCqDamHandlerGibsonFontmanagerImplFontManagerServiceImpl(post, apply, delete, action, $location, propertylist, eventFilter, fontmgrSystemFontDir, fontmgrAdobeFontDir, fontmgrCustomerFontDir , accept);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void comDayCqDamHandlerStandardPdfPdfHandlerTest() throws Exception {
        Boolean post = null;
        Boolean apply = null;
        Boolean delete = null;
        String action = null;
        String $location = null;
        List<String> propertylist = null;
        Boolean rasterAnnotation = null;
    ResponseEntity<ComDayCqDamHandlerStandardPdfPdfHandlerInfo> response = api.comDayCqDamHandlerStandardPdfPdfHandler(post, apply, delete, action, $location, propertylist, rasterAnnotation , accept);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void comDayCqDamHandlerStandardPsPostScriptHandlerTest() throws Exception {
        Boolean post = null;
        Boolean apply = null;
        Boolean delete = null;
        String action = null;
        String $location = null;
        List<String> propertylist = null;
        Boolean rasterAnnotation = null;
    ResponseEntity<ComDayCqDamHandlerStandardPsPostScriptHandlerInfo> response = api.comDayCqDamHandlerStandardPsPostScriptHandler(post, apply, delete, action, $location, propertylist, rasterAnnotation , accept);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void comDayCqDamHandlerStandardPsdPsdHandlerTest() throws Exception {
        Boolean post = null;
        Boolean apply = null;
        Boolean delete = null;
        String action = null;
        String $location = null;
        List<String> propertylist = null;
        Integer largeFileThreshold = null;
    ResponseEntity<ComDayCqDamHandlerStandardPsdPsdHandlerInfo> response = api.comDayCqDamHandlerStandardPsdPsdHandler(post, apply, delete, action, $location, propertylist, largeFileThreshold , accept);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void comDayCqDamIdsImplIDSJobProcessorTest() throws Exception {
        Boolean post = null;
        Boolean apply = null;
        Boolean delete = null;
        String action = null;
        String $location = null;
        List<String> propertylist = null;
        Boolean enableMultisession = null;
        Boolean idsCcEnable = null;
        Boolean enableRetry = null;
        Boolean enableRetryScripterror = null;
        String externalizerDomainCqhost = null;
        String externalizerDomainHttp = null;
    ResponseEntity<ComDayCqDamIdsImplIDSJobProcessorInfo> response = api.comDayCqDamIdsImplIDSJobProcessor(post, apply, delete, action, $location, propertylist, enableMultisession, idsCcEnable, enableRetry, enableRetryScripterror, externalizerDomainCqhost, externalizerDomainHttp , accept);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void comDayCqDamIdsImplIDSPoolManagerImplTest() throws Exception {
        Boolean post = null;
        Boolean apply = null;
        Boolean delete = null;
        String action = null;
        String $location = null;
        List<String> propertylist = null;
        Integer maxErrorsToBlacklist = null;
        Integer retryIntervalToWhitelist = null;
        Integer connectTimeout = null;
        Integer socketTimeout = null;
        String processLabel = null;
        Integer connectionUseMax = null;
    ResponseEntity<ComDayCqDamIdsImplIDSPoolManagerImplInfo> response = api.comDayCqDamIdsImplIDSPoolManagerImpl(post, apply, delete, action, $location, propertylist, maxErrorsToBlacklist, retryIntervalToWhitelist, connectTimeout, socketTimeout, processLabel, connectionUseMax , accept);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void comDayCqDamInddImplHandlerIndesignXMPHandlerTest() throws Exception {
        Boolean post = null;
        Boolean apply = null;
        Boolean delete = null;
        String action = null;
        String $location = null;
        List<String> propertylist = null;
        String processLabel = null;
        Boolean extractPages = null;
    ResponseEntity<ComDayCqDamInddImplHandlerIndesignXMPHandlerInfo> response = api.comDayCqDamInddImplHandlerIndesignXMPHandler(post, apply, delete, action, $location, propertylist, processLabel, extractPages , accept);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void comDayCqDamInddImplServletSnippetCreationServletTest() throws Exception {
        Boolean post = null;
        Boolean apply = null;
        Boolean delete = null;
        String action = null;
        String $location = null;
        List<String> propertylist = null;
        Integer snippetcreationMaxcollections = null;
    ResponseEntity<ComDayCqDamInddImplServletSnippetCreationServletInfo> response = api.comDayCqDamInddImplServletSnippetCreationServlet(post, apply, delete, action, $location, propertylist, snippetcreationMaxcollections , accept);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void comDayCqDamInddProcessINDDMediaExtractProcessTest() throws Exception {
        Boolean post = null;
        Boolean apply = null;
        Boolean delete = null;
        String action = null;
        String $location = null;
        List<String> propertylist = null;
        String processLabel = null;
        String cqDamInddPagesRegex = null;
        Boolean idsJobDecoupled = null;
        String idsJobWorkflowModel = null;
    ResponseEntity<ComDayCqDamInddProcessINDDMediaExtractProcessInfo> response = api.comDayCqDamInddProcessINDDMediaExtractProcess(post, apply, delete, action, $location, propertylist, processLabel, cqDamInddPagesRegex, idsJobDecoupled, idsJobWorkflowModel , accept);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void comDayCqDamPerformanceInternalAssetPerformanceDataHandlerImplTest() throws Exception {
        Boolean post = null;
        Boolean apply = null;
        Boolean delete = null;
        String action = null;
        String $location = null;
        List<String> propertylist = null;
        Integer batchCommitSize = null;
    ResponseEntity<ComDayCqDamPerformanceInternalAssetPerformanceDataHandlerImplInfo> response = api.comDayCqDamPerformanceInternalAssetPerformanceDataHandlerImpl(post, apply, delete, action, $location, propertylist, batchCommitSize , accept);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void comDayCqDamPerformanceInternalAssetPerformanceReportSyncJobTest() throws Exception {
        Boolean post = null;
        Boolean apply = null;
        Boolean delete = null;
        String action = null;
        String $location = null;
        List<String> propertylist = null;
        String schedulerExpression = null;
    ResponseEntity<ComDayCqDamPerformanceInternalAssetPerformanceReportSyncJobInfo> response = api.comDayCqDamPerformanceInternalAssetPerformanceReportSyncJob(post, apply, delete, action, $location, propertylist, schedulerExpression , accept);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void comDayCqDamPimImplSourcingUploadProcessProductAssetsUploadProTest() throws Exception {
        Boolean post = null;
        Boolean apply = null;
        Boolean delete = null;
        String action = null;
        String $location = null;
        List<String> propertylist = null;
        Boolean deleteZipFile = null;
    ResponseEntity<ComDayCqDamPimImplSourcingUploadProcessProductAssetsUploadProInfo> response = api.comDayCqDamPimImplSourcingUploadProcessProductAssetsUploadPro(post, apply, delete, action, $location, propertylist, deleteZipFile , accept);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void comDayCqDamS7damCommonAnalyticsImplS7damDynamicMediaConfigEvenTest() throws Exception {
        Boolean post = null;
        Boolean apply = null;
        Boolean delete = null;
        String action = null;
        String $location = null;
        List<String> propertylist = null;
        Boolean cqDamS7damDynamicmediaconfigeventlistenerEnabled = null;
    ResponseEntity<ComDayCqDamS7damCommonAnalyticsImplS7damDynamicMediaConfigEvenInfo> response = api.comDayCqDamS7damCommonAnalyticsImplS7damDynamicMediaConfigEven(post, apply, delete, action, $location, propertylist, cqDamS7damDynamicmediaconfigeventlistenerEnabled , accept);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void comDayCqDamS7damCommonAnalyticsImplSiteCatalystReportRunnerTest() throws Exception {
        Boolean post = null;
        Boolean apply = null;
        Boolean delete = null;
        String action = null;
        String $location = null;
        List<String> propertylist = null;
        String schedulerExpression = null;
        Boolean schedulerConcurrent = null;
    ResponseEntity<ComDayCqDamS7damCommonAnalyticsImplSiteCatalystReportRunnerInfo> response = api.comDayCqDamS7damCommonAnalyticsImplSiteCatalystReportRunner(post, apply, delete, action, $location, propertylist, schedulerExpression, schedulerConcurrent , accept);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void comDayCqDamS7damCommonPostServletsSetCreateHandlerTest() throws Exception {
        Boolean post = null;
        Boolean apply = null;
        Boolean delete = null;
        String action = null;
        String $location = null;
        List<String> propertylist = null;
        String slingPostOperation = null;
        String slingServletMethods = null;
    ResponseEntity<ComDayCqDamS7damCommonPostServletsSetCreateHandlerInfo> response = api.comDayCqDamS7damCommonPostServletsSetCreateHandler(post, apply, delete, action, $location, propertylist, slingPostOperation, slingServletMethods , accept);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void comDayCqDamS7damCommonPostServletsSetModifyHandlerTest() throws Exception {
        Boolean post = null;
        Boolean apply = null;
        Boolean delete = null;
        String action = null;
        String $location = null;
        List<String> propertylist = null;
        String slingPostOperation = null;
        String slingServletMethods = null;
    ResponseEntity<ComDayCqDamS7damCommonPostServletsSetModifyHandlerInfo> response = api.comDayCqDamS7damCommonPostServletsSetModifyHandler(post, apply, delete, action, $location, propertylist, slingPostOperation, slingServletMethods , accept);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void comDayCqDamS7damCommonProcessVideoThumbnailDownloadProcessTest() throws Exception {
        Boolean post = null;
        Boolean apply = null;
        Boolean delete = null;
        String action = null;
        String $location = null;
        List<String> propertylist = null;
        String processLabel = null;
    ResponseEntity<ComDayCqDamS7damCommonProcessVideoThumbnailDownloadProcessInfo> response = api.comDayCqDamS7damCommonProcessVideoThumbnailDownloadProcess(post, apply, delete, action, $location, propertylist, processLabel , accept);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void comDayCqDamS7damCommonS7damDamChangeEventListenerTest() throws Exception {
        Boolean post = null;
        Boolean apply = null;
        Boolean delete = null;
        String action = null;
        String $location = null;
        List<String> propertylist = null;
        Boolean cqDamS7damDamchangeeventlistenerEnabled = null;
    ResponseEntity<ComDayCqDamS7damCommonS7damDamChangeEventListenerInfo> response = api.comDayCqDamS7damCommonS7damDamChangeEventListener(post, apply, delete, action, $location, propertylist, cqDamS7damDamchangeeventlistenerEnabled , accept);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void comDayCqDamS7damCommonServletsS7damProductInfoServletTest() throws Exception {
        Boolean post = null;
        Boolean apply = null;
        Boolean delete = null;
        String action = null;
        String $location = null;
        List<String> propertylist = null;
        String slingServletPaths = null;
        String slingServletMethods = null;
    ResponseEntity<ComDayCqDamS7damCommonServletsS7damProductInfoServletInfo> response = api.comDayCqDamS7damCommonServletsS7damProductInfoServlet(post, apply, delete, action, $location, propertylist, slingServletPaths, slingServletMethods , accept);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void comDayCqDamS7damCommonVideoImplVideoProxyClientServiceImplTest() throws Exception {
        Boolean post = null;
        Boolean apply = null;
        Boolean delete = null;
        String action = null;
        String $location = null;
        List<String> propertylist = null;
        Integer cqDamS7damVideoproxyclientserviceMultipartuploadMinsizeName = null;
        Integer cqDamS7damVideoproxyclientserviceMultipartuploadPartsizeName = null;
        Integer cqDamS7damVideoproxyclientserviceMultipartuploadNumthreadName = null;
        Integer cqDamS7damVideoproxyclientserviceHttpReadtimeoutName = null;
        Integer cqDamS7damVideoproxyclientserviceHttpConnectiontimeoutName = null;
        Integer cqDamS7damVideoproxyclientserviceHttpMaxretrycountName = null;
        Integer cqDamS7damVideoproxyclientserviceUploadprogressIntervalName = null;
    ResponseEntity<ComDayCqDamS7damCommonVideoImplVideoProxyClientServiceImplInfo> response = api.comDayCqDamS7damCommonVideoImplVideoProxyClientServiceImpl(post, apply, delete, action, $location, propertylist, cqDamS7damVideoproxyclientserviceMultipartuploadMinsizeName, cqDamS7damVideoproxyclientserviceMultipartuploadPartsizeName, cqDamS7damVideoproxyclientserviceMultipartuploadNumthreadName, cqDamS7damVideoproxyclientserviceHttpReadtimeoutName, cqDamS7damVideoproxyclientserviceHttpConnectiontimeoutName, cqDamS7damVideoproxyclientserviceHttpMaxretrycountName, cqDamS7damVideoproxyclientserviceUploadprogressIntervalName , accept);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void comDayCqDamScene7ImplScene7APIClientImplTest() throws Exception {
        Boolean post = null;
        Boolean apply = null;
        Boolean delete = null;
        String action = null;
        String $location = null;
        List<String> propertylist = null;
        Integer cqDamScene7ApiclientRecordsperpageNofilterName = null;
        Integer cqDamScene7ApiclientRecordsperpageWithfilterName = null;
    ResponseEntity<ComDayCqDamScene7ImplScene7APIClientImplInfo> response = api.comDayCqDamScene7ImplScene7APIClientImpl(post, apply, delete, action, $location, propertylist, cqDamScene7ApiclientRecordsperpageNofilterName, cqDamScene7ApiclientRecordsperpageWithfilterName , accept);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void comDayCqDamScene7ImplScene7AssetMimeTypeServiceImplTest() throws Exception {
        Boolean post = null;
        Boolean apply = null;
        Boolean delete = null;
        String action = null;
        String $location = null;
        List<String> propertylist = null;
        List<String> cqDamScene7AssetmimetypeserviceMapping = null;
    ResponseEntity<ComDayCqDamScene7ImplScene7AssetMimeTypeServiceImplInfo> response = api.comDayCqDamScene7ImplScene7AssetMimeTypeServiceImpl(post, apply, delete, action, $location, propertylist, cqDamScene7AssetmimetypeserviceMapping , accept);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void comDayCqDamScene7ImplScene7ConfigurationEventListenerTest() throws Exception {
        Boolean post = null;
        Boolean apply = null;
        Boolean delete = null;
        String action = null;
        String $location = null;
        List<String> propertylist = null;
        Boolean cqDamScene7ConfigurationeventlistenerEnabled = null;
    ResponseEntity<ComDayCqDamScene7ImplScene7ConfigurationEventListenerInfo> response = api.comDayCqDamScene7ImplScene7ConfigurationEventListener(post, apply, delete, action, $location, propertylist, cqDamScene7ConfigurationeventlistenerEnabled , accept);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void comDayCqDamScene7ImplScene7DamChangeEventListenerTest() throws Exception {
        Boolean post = null;
        Boolean apply = null;
        Boolean delete = null;
        String action = null;
        String $location = null;
        List<String> propertylist = null;
        Boolean cqDamScene7DamchangeeventlistenerEnabled = null;
        List<String> cqDamScene7DamchangeeventlistenerObservedPaths = null;
    ResponseEntity<ComDayCqDamScene7ImplScene7DamChangeEventListenerInfo> response = api.comDayCqDamScene7ImplScene7DamChangeEventListener(post, apply, delete, action, $location, propertylist, cqDamScene7DamchangeeventlistenerEnabled, cqDamScene7DamchangeeventlistenerObservedPaths , accept);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void comDayCqDamScene7ImplScene7FlashTemplatesServiceImplTest() throws Exception {
        Boolean post = null;
        Boolean apply = null;
        Boolean delete = null;
        String action = null;
        String $location = null;
        List<String> propertylist = null;
        String scene7FlashTemplatesRti = null;
        String scene7FlashTemplatesRsi = null;
        String scene7FlashTemplatesRb = null;
        String scene7FlashTemplatesRurl = null;
        String scene7FlashTemplateUrlFormatParameter = null;
    ResponseEntity<ComDayCqDamScene7ImplScene7FlashTemplatesServiceImplInfo> response = api.comDayCqDamScene7ImplScene7FlashTemplatesServiceImpl(post, apply, delete, action, $location, propertylist, scene7FlashTemplatesRti, scene7FlashTemplatesRsi, scene7FlashTemplatesRb, scene7FlashTemplatesRurl, scene7FlashTemplateUrlFormatParameter , accept);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void comDayCqDamScene7ImplScene7UploadServiceImplTest() throws Exception {
        Boolean post = null;
        Boolean apply = null;
        Boolean delete = null;
        String action = null;
        String $location = null;
        List<String> propertylist = null;
        Integer cqDamScene7UploadserviceActivejobtimeoutLabel = null;
        Integer cqDamScene7UploadserviceConnectionmaxperrouteLabel = null;
    ResponseEntity<ComDayCqDamScene7ImplScene7UploadServiceImplInfo> response = api.comDayCqDamScene7ImplScene7UploadServiceImpl(post, apply, delete, action, $location, propertylist, cqDamScene7UploadserviceActivejobtimeoutLabel, cqDamScene7UploadserviceConnectionmaxperrouteLabel , accept);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void comDayCqDamStockIntegrationImplCacheStockCacheConfigurationSerTest() throws Exception {
        Boolean post = null;
        Boolean apply = null;
        Boolean delete = null;
        String action = null;
        String $location = null;
        List<String> propertylist = null;
        String getCacheExpirationUnit = null;
        Integer getCacheExpirationValue = null;
    ResponseEntity<ComDayCqDamStockIntegrationImplCacheStockCacheConfigurationSerInfo> response = api.comDayCqDamStockIntegrationImplCacheStockCacheConfigurationSer(post, apply, delete, action, $location, propertylist, getCacheExpirationUnit, getCacheExpirationValue , accept);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void comDayCqDamStockIntegrationImplConfigurationStockConfigurationTest() throws Exception {
        Boolean post = null;
        Boolean apply = null;
        Boolean delete = null;
        String action = null;
        String $location = null;
        List<String> propertylist = null;
        String name = null;
        String locale = null;
        String imsConfig = null;
    ResponseEntity<ComDayCqDamStockIntegrationImplConfigurationStockConfigurationInfo> response = api.comDayCqDamStockIntegrationImplConfigurationStockConfiguration(post, apply, delete, action, $location, propertylist, name, locale, imsConfig , accept);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void comDayCqDamVideoImplServletVideoTestServletTest() throws Exception {
        Boolean post = null;
        Boolean apply = null;
        Boolean delete = null;
        String action = null;
        String $location = null;
        List<String> propertylist = null;
        Boolean enabled = null;
    ResponseEntity<ComDayCqDamVideoImplServletVideoTestServletInfo> response = api.comDayCqDamVideoImplServletVideoTestServlet(post, apply, delete, action, $location, propertylist, enabled , accept);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void comDayCqExtwidgetServletsImageSpriteServletTest() throws Exception {
        Boolean post = null;
        Boolean apply = null;
        Boolean delete = null;
        String action = null;
        String $location = null;
        List<String> propertylist = null;
        Integer maxWidth = null;
        Integer maxHeight = null;
    ResponseEntity<ComDayCqExtwidgetServletsImageSpriteServletInfo> response = api.comDayCqExtwidgetServletsImageSpriteServlet(post, apply, delete, action, $location, propertylist, maxWidth, maxHeight , accept);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void comDayCqImageInternalFontFontHelperTest() throws Exception {
        Boolean post = null;
        Boolean apply = null;
        Boolean delete = null;
        String action = null;
        String $location = null;
        List<String> propertylist = null;
        List<String> fontpath = null;
        Integer oversamplingFactor = null;
    ResponseEntity<ComDayCqImageInternalFontFontHelperInfo> response = api.comDayCqImageInternalFontFontHelper(post, apply, delete, action, $location, propertylist, fontpath, oversamplingFactor , accept);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void comDayCqJcrclustersupportClusterStartLevelControllerTest() throws Exception {
        Boolean post = null;
        Boolean apply = null;
        Boolean delete = null;
        String action = null;
        String $location = null;
        List<String> propertylist = null;
        Boolean clusterLevelEnable = null;
        Integer clusterMasterLevel = null;
        Integer clusterSlaveLevel = null;
    ResponseEntity<ComDayCqJcrclustersupportClusterStartLevelControllerInfo> response = api.comDayCqJcrclustersupportClusterStartLevelController(post, apply, delete, action, $location, propertylist, clusterLevelEnable, clusterMasterLevel, clusterSlaveLevel , accept);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void comDayCqMailerDefaultMailServiceTest() throws Exception {
        Boolean post = null;
        Boolean apply = null;
        Boolean delete = null;
        String action = null;
        String $location = null;
        List<String> propertylist = null;
        String smtpHost = null;
        Integer smtpPort = null;
        String smtpUser = null;
        String smtpPassword = null;
        String fromAddress = null;
        Boolean smtpSsl = null;
        Boolean smtpStarttls = null;
        Boolean debugEmail = null;
    ResponseEntity<ComDayCqMailerDefaultMailServiceInfo> response = api.comDayCqMailerDefaultMailService(post, apply, delete, action, $location, propertylist, smtpHost, smtpPort, smtpUser, smtpPassword, fromAddress, smtpSsl, smtpStarttls, debugEmail , accept);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void comDayCqMailerImplCqMailingServiceTest() throws Exception {
        Boolean post = null;
        Boolean apply = null;
        Boolean delete = null;
        String action = null;
        String $location = null;
        List<String> propertylist = null;
        String maxRecipientCount = null;
    ResponseEntity<ComDayCqMailerImplCqMailingServiceInfo> response = api.comDayCqMailerImplCqMailingService(post, apply, delete, action, $location, propertylist, maxRecipientCount , accept);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void comDayCqMailerImplEmailCqEmailTemplateFactoryTest() throws Exception {
        Boolean post = null;
        Boolean apply = null;
        Boolean delete = null;
        String action = null;
        String $location = null;
        List<String> propertylist = null;
        String mailerEmailCharset = null;
    ResponseEntity<ComDayCqMailerImplEmailCqEmailTemplateFactoryInfo> response = api.comDayCqMailerImplEmailCqEmailTemplateFactory(post, apply, delete, action, $location, propertylist, mailerEmailCharset , accept);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void comDayCqMailerImplEmailCqRetrieverTemplateFactoryTest() throws Exception {
        Boolean post = null;
        Boolean apply = null;
        Boolean delete = null;
        String action = null;
        String $location = null;
        List<String> propertylist = null;
        Boolean mailerEmailEmbed = null;
        String mailerEmailCharset = null;
        String mailerEmailRetrieverUserID = null;
        String mailerEmailRetrieverUserPWD = null;
    ResponseEntity<ComDayCqMailerImplEmailCqRetrieverTemplateFactoryInfo> response = api.comDayCqMailerImplEmailCqRetrieverTemplateFactory(post, apply, delete, action, $location, propertylist, mailerEmailEmbed, mailerEmailCharset, mailerEmailRetrieverUserID, mailerEmailRetrieverUserPWD , accept);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void comDayCqMcmCampaignImplIntegrationConfigImplTest() throws Exception {
        Boolean post = null;
        Boolean apply = null;
        Boolean delete = null;
        String action = null;
        String $location = null;
        List<String> propertylist = null;
        List<String> aemMcmCampaignFormConstraints = null;
        String aemMcmCampaignPublicUrl = null;
        Boolean aemMcmCampaignRelaxedSSL = null;
    ResponseEntity<ComDayCqMcmCampaignImplIntegrationConfigImplInfo> response = api.comDayCqMcmCampaignImplIntegrationConfigImpl(post, apply, delete, action, $location, propertylist, aemMcmCampaignFormConstraints, aemMcmCampaignPublicUrl, aemMcmCampaignRelaxedSSL , accept);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void comDayCqMcmCampaignImporterPersonalizedTextHandlerFactoryTest() throws Exception {
        Boolean post = null;
        Boolean apply = null;
        Boolean delete = null;
        String action = null;
        String $location = null;
        List<String> propertylist = null;
        Integer serviceRanking = null;
        String tagpattern = null;
    ResponseEntity<ComDayCqMcmCampaignImporterPersonalizedTextHandlerFactoryInfo> response = api.comDayCqMcmCampaignImporterPersonalizedTextHandlerFactory(post, apply, delete, action, $location, propertylist, serviceRanking, tagpattern , accept);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void comDayCqMcmCoreNewsletterNewsletterEmailServiceImplTest() throws Exception {
        Boolean post = null;
        Boolean apply = null;
        Boolean delete = null;
        String action = null;
        String $location = null;
        List<String> propertylist = null;
        String fromAddress = null;
        String senderHost = null;
        String maxBounceCount = null;
    ResponseEntity<ComDayCqMcmCoreNewsletterNewsletterEmailServiceImplInfo> response = api.comDayCqMcmCoreNewsletterNewsletterEmailServiceImpl(post, apply, delete, action, $location, propertylist, fromAddress, senderHost, maxBounceCount , accept);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void comDayCqMcmImplMCMConfigurationTest() throws Exception {
        Boolean post = null;
        Boolean apply = null;
        Boolean delete = null;
        String action = null;
        String $location = null;
        List<String> propertylist = null;
        List<String> experienceIndirection = null;
        List<String> touchpointIndirection = null;
    ResponseEntity<ComDayCqMcmImplMCMConfigurationInfo> response = api.comDayCqMcmImplMCMConfiguration(post, apply, delete, action, $location, propertylist, experienceIndirection, touchpointIndirection , accept);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void comDayCqMcmLandingpageParserTaghandlersCtaClickThroughComponenTest() throws Exception {
        Boolean post = null;
        Boolean apply = null;
        Boolean delete = null;
        String action = null;
        String $location = null;
        List<String> propertylist = null;
        Integer serviceRanking = null;
        String tagpattern = null;
        String componentResourceType = null;
    ResponseEntity<ComDayCqMcmLandingpageParserTaghandlersCtaClickThroughComponenInfo> response = api.comDayCqMcmLandingpageParserTaghandlersCtaClickThroughComponen(post, apply, delete, action, $location, propertylist, serviceRanking, tagpattern, componentResourceType , accept);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void comDayCqMcmLandingpageParserTaghandlersCtaGraphicalClickThrougTest() throws Exception {
        Boolean post = null;
        Boolean apply = null;
        Boolean delete = null;
        String action = null;
        String $location = null;
        List<String> propertylist = null;
        Integer serviceRanking = null;
        String tagpattern = null;
        String componentResourceType = null;
    ResponseEntity<ComDayCqMcmLandingpageParserTaghandlersCtaGraphicalClickThrougInfo> response = api.comDayCqMcmLandingpageParserTaghandlersCtaGraphicalClickThroug(post, apply, delete, action, $location, propertylist, serviceRanking, tagpattern, componentResourceType , accept);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void comDayCqMcmLandingpageParserTaghandlersCtaLeadFormCTAComponentTest() throws Exception {
        Boolean post = null;
        Boolean apply = null;
        Boolean delete = null;
        String action = null;
        String $location = null;
        List<String> propertylist = null;
        Integer serviceRanking = null;
        String tagpattern = null;
    ResponseEntity<ComDayCqMcmLandingpageParserTaghandlersCtaLeadFormCTAComponentInfo> response = api.comDayCqMcmLandingpageParserTaghandlersCtaLeadFormCTAComponent(post, apply, delete, action, $location, propertylist, serviceRanking, tagpattern , accept);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void comDayCqMcmLandingpageParserTaghandlersMboxMBoxExperienceTagHaTest() throws Exception {
        Boolean post = null;
        Boolean apply = null;
        Boolean delete = null;
        String action = null;
        String $location = null;
        List<String> propertylist = null;
        Integer serviceRanking = null;
        String tagpattern = null;
    ResponseEntity<ComDayCqMcmLandingpageParserTaghandlersMboxMBoxExperienceTagHaInfo> response = api.comDayCqMcmLandingpageParserTaghandlersMboxMBoxExperienceTagHa(post, apply, delete, action, $location, propertylist, serviceRanking, tagpattern , accept);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void comDayCqMcmLandingpageParserTaghandlersMboxTargetComponentTagHTest() throws Exception {
        Boolean post = null;
        Boolean apply = null;
        Boolean delete = null;
        String action = null;
        String $location = null;
        List<String> propertylist = null;
        Integer serviceRanking = null;
        String tagpattern = null;
        String componentResourceType = null;
    ResponseEntity<ComDayCqMcmLandingpageParserTaghandlersMboxTargetComponentTagHInfo> response = api.comDayCqMcmLandingpageParserTaghandlersMboxTargetComponentTagH(post, apply, delete, action, $location, propertylist, serviceRanking, tagpattern, componentResourceType , accept);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void comDayCqNotificationImplNotificationServiceImplTest() throws Exception {
        Boolean post = null;
        Boolean apply = null;
        Boolean delete = null;
        String action = null;
        String $location = null;
        List<String> propertylist = null;
        String eventFilter = null;
    ResponseEntity<ComDayCqNotificationImplNotificationServiceImplInfo> response = api.comDayCqNotificationImplNotificationServiceImpl(post, apply, delete, action, $location, propertylist, eventFilter , accept);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void comDayCqPersonalizationImplServletsTargetingConfigurationServletTest() throws Exception {
        Boolean post = null;
        Boolean apply = null;
        Boolean delete = null;
        String action = null;
        String $location = null;
        List<String> propertylist = null;
        Boolean forcelocation = null;
    ResponseEntity<ComDayCqPersonalizationImplServletsTargetingConfigurationServletInfo> response = api.comDayCqPersonalizationImplServletsTargetingConfigurationServlet(post, apply, delete, action, $location, propertylist, forcelocation , accept);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void comDayCqPollingImporterImplManagedPollConfigImplTest() throws Exception {
        Boolean post = null;
        Boolean apply = null;
        Boolean delete = null;
        String action = null;
        String $location = null;
        List<String> propertylist = null;
        String id = null;
        Boolean enabled = null;
        Boolean reference = null;
        Integer interval = null;
        String expression = null;
        String source = null;
        String target = null;
        String login = null;
        String password = null;
    ResponseEntity<ComDayCqPollingImporterImplManagedPollConfigImplInfo> response = api.comDayCqPollingImporterImplManagedPollConfigImpl(post, apply, delete, action, $location, propertylist, id, enabled, reference, interval, expression, source, target, login, password , accept);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void comDayCqPollingImporterImplManagedPollingImporterImplTest() throws Exception {
        Boolean post = null;
        Boolean apply = null;
        Boolean delete = null;
        String action = null;
        String $location = null;
        List<String> propertylist = null;
        String importerUser = null;
    ResponseEntity<ComDayCqPollingImporterImplManagedPollingImporterImplInfo> response = api.comDayCqPollingImporterImplManagedPollingImporterImpl(post, apply, delete, action, $location, propertylist, importerUser , accept);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void comDayCqPollingImporterImplPollingImporterImplTest() throws Exception {
        Boolean post = null;
        Boolean apply = null;
        Boolean delete = null;
        String action = null;
        String $location = null;
        List<String> propertylist = null;
        Integer importerMinInterval = null;
        String importerUser = null;
        List<String> excludePaths = null;
        List<String> includePaths = null;
    ResponseEntity<ComDayCqPollingImporterImplPollingImporterImplInfo> response = api.comDayCqPollingImporterImplPollingImporterImpl(post, apply, delete, action, $location, propertylist, importerMinInterval, importerUser, excludePaths, includePaths , accept);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void comDayCqReplicationAuditReplicationEventListenerTest() throws Exception {
        Boolean post = null;
        Boolean apply = null;
        Boolean delete = null;
        String action = null;
        String $location = null;
        List<String> propertylist = null;
        Integer serviceRanking = null;
    ResponseEntity<ComDayCqReplicationAuditReplicationEventListenerInfo> response = api.comDayCqReplicationAuditReplicationEventListener(post, apply, delete, action, $location, propertylist, serviceRanking , accept);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void comDayCqReplicationContentStaticContentBuilderTest() throws Exception {
        Boolean post = null;
        Boolean apply = null;
        Boolean delete = null;
        String action = null;
        String $location = null;
        List<String> propertylist = null;
        String host = null;
        Integer port = null;
    ResponseEntity<ComDayCqReplicationContentStaticContentBuilderInfo> response = api.comDayCqReplicationContentStaticContentBuilder(post, apply, delete, action, $location, propertylist, host, port , accept);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void comDayCqReplicationImplAgentManagerImplTest() throws Exception {
        Boolean post = null;
        Boolean apply = null;
        Boolean delete = null;
        String action = null;
        String $location = null;
        List<String> propertylist = null;
        String jobTopics = null;
        String serviceUserTarget = null;
        String agentProviderTarget = null;
    ResponseEntity<ComDayCqReplicationImplAgentManagerImplInfo> response = api.comDayCqReplicationImplAgentManagerImpl(post, apply, delete, action, $location, propertylist, jobTopics, serviceUserTarget, agentProviderTarget , accept);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void comDayCqReplicationImplContentDurboBinaryLessContentBuilderTest() throws Exception {
        Boolean post = null;
        Boolean apply = null;
        Boolean delete = null;
        String action = null;
        String $location = null;
        List<String> propertylist = null;
        Integer binaryThreshold = null;
    ResponseEntity<ComDayCqReplicationImplContentDurboBinaryLessContentBuilderInfo> response = api.comDayCqReplicationImplContentDurboBinaryLessContentBuilder(post, apply, delete, action, $location, propertylist, binaryThreshold , accept);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void comDayCqReplicationImplContentDurboDurboImportConfigurationProvTest() throws Exception {
        Boolean post = null;
        Boolean apply = null;
        Boolean delete = null;
        String action = null;
        String $location = null;
        List<String> propertylist = null;
        Boolean preserveHierarchyNodes = null;
        Boolean ignoreVersioning = null;
        Boolean importAcl = null;
        Integer saveThreshold = null;
        Boolean preserveUserPaths = null;
        Boolean preserveUuid = null;
        List<String> preserveUuidNodetypes = null;
        List<String> preserveUuidSubtrees = null;
        Boolean autoCommit = null;
    ResponseEntity<ComDayCqReplicationImplContentDurboDurboImportConfigurationProvInfo> response = api.comDayCqReplicationImplContentDurboDurboImportConfigurationProv(post, apply, delete, action, $location, propertylist, preserveHierarchyNodes, ignoreVersioning, importAcl, saveThreshold, preserveUserPaths, preserveUuid, preserveUuidNodetypes, preserveUuidSubtrees, autoCommit , accept);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void comDayCqReplicationImplReplicationContentFactoryProviderImplTest() throws Exception {
        Boolean post = null;
        Boolean apply = null;
        Boolean delete = null;
        String action = null;
        String $location = null;
        List<String> propertylist = null;
        Boolean replicationContentUseFileStorage = null;
        Integer replicationContentMaxCommitAttempts = null;
    ResponseEntity<ComDayCqReplicationImplReplicationContentFactoryProviderImplInfo> response = api.comDayCqReplicationImplReplicationContentFactoryProviderImpl(post, apply, delete, action, $location, propertylist, replicationContentUseFileStorage, replicationContentMaxCommitAttempts , accept);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void comDayCqReplicationImplReplicationReceiverImplTest() throws Exception {
        Boolean post = null;
        Boolean apply = null;
        Boolean delete = null;
        String action = null;
        String $location = null;
        List<String> propertylist = null;
        Integer receiverTmpfileThreshold = null;
        Boolean receiverPackagesUseInstall = null;
    ResponseEntity<ComDayCqReplicationImplReplicationReceiverImplInfo> response = api.comDayCqReplicationImplReplicationReceiverImpl(post, apply, delete, action, $location, propertylist, receiverTmpfileThreshold, receiverPackagesUseInstall , accept);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void comDayCqReplicationImplReplicatorImplTest() throws Exception {
        Boolean post = null;
        Boolean apply = null;
        Boolean delete = null;
        String action = null;
        String $location = null;
        List<String> propertylist = null;
        Boolean distributeEvents = null;
    ResponseEntity<ComDayCqReplicationImplReplicatorImplInfo> response = api.comDayCqReplicationImplReplicatorImpl(post, apply, delete, action, $location, propertylist, distributeEvents , accept);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void comDayCqReplicationImplReverseReplicatorTest() throws Exception {
        Boolean post = null;
        Boolean apply = null;
        Boolean delete = null;
        String action = null;
        String $location = null;
        List<String> propertylist = null;
        Integer schedulerPeriod = null;
    ResponseEntity<ComDayCqReplicationImplReverseReplicatorInfo> response = api.comDayCqReplicationImplReverseReplicator(post, apply, delete, action, $location, propertylist, schedulerPeriod , accept);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void comDayCqReplicationImplTransportBinaryLessTransportHandlerTest() throws Exception {
        Boolean post = null;
        Boolean apply = null;
        Boolean delete = null;
        String action = null;
        String $location = null;
        List<String> propertylist = null;
        List<String> disabledCipherSuites = null;
        List<String> enabledCipherSuites = null;
    ResponseEntity<ComDayCqReplicationImplTransportBinaryLessTransportHandlerInfo> response = api.comDayCqReplicationImplTransportBinaryLessTransportHandler(post, apply, delete, action, $location, propertylist, disabledCipherSuites, enabledCipherSuites , accept);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void comDayCqReplicationImplTransportHttpTest() throws Exception {
        Boolean post = null;
        Boolean apply = null;
        Boolean delete = null;
        String action = null;
        String $location = null;
        List<String> propertylist = null;
        List<String> disabledCipherSuites = null;
        List<String> enabledCipherSuites = null;
    ResponseEntity<ComDayCqReplicationImplTransportHttpInfo> response = api.comDayCqReplicationImplTransportHttp(post, apply, delete, action, $location, propertylist, disabledCipherSuites, enabledCipherSuites , accept);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void comDayCqReportingImplCacheCacheImplTest() throws Exception {
        Boolean post = null;
        Boolean apply = null;
        Boolean delete = null;
        String action = null;
        String $location = null;
        List<String> propertylist = null;
        Boolean repcacheEnable = null;
        Integer repcacheTtl = null;
        Integer repcacheMax = null;
    ResponseEntity<ComDayCqReportingImplCacheCacheImplInfo> response = api.comDayCqReportingImplCacheCacheImpl(post, apply, delete, action, $location, propertylist, repcacheEnable, repcacheTtl, repcacheMax , accept);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void comDayCqReportingImplConfigServiceImplTest() throws Exception {
        Boolean post = null;
        Boolean apply = null;
        Boolean delete = null;
        String action = null;
        String $location = null;
        List<String> propertylist = null;
        String repconfTimezone = null;
        String repconfLocale = null;
        String repconfSnapshots = null;
        String repconfRepdir = null;
        Integer repconfHourofday = null;
        Integer repconfMinofhour = null;
        Integer repconfMaxrows = null;
        Boolean repconfFakedata = null;
        String repconfSnapshotuser = null;
        Boolean repconfEnforcesnapshotuser = null;
    ResponseEntity<ComDayCqReportingImplConfigServiceImplInfo> response = api.comDayCqReportingImplConfigServiceImpl(post, apply, delete, action, $location, propertylist, repconfTimezone, repconfLocale, repconfSnapshots, repconfRepdir, repconfHourofday, repconfMinofhour, repconfMaxrows, repconfFakedata, repconfSnapshotuser, repconfEnforcesnapshotuser , accept);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void comDayCqReportingImplRLogAnalyzerTest() throws Exception {
        Boolean post = null;
        Boolean apply = null;
        Boolean delete = null;
        String action = null;
        String $location = null;
        List<String> propertylist = null;
        String requestLogOutput = null;
    ResponseEntity<ComDayCqReportingImplRLogAnalyzerInfo> response = api.comDayCqReportingImplRLogAnalyzer(post, apply, delete, action, $location, propertylist, requestLogOutput , accept);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void comDayCqRewriterLinkcheckerImplLinkCheckerImplTest() throws Exception {
        Boolean post = null;
        Boolean apply = null;
        Boolean delete = null;
        String action = null;
        String $location = null;
        List<String> propertylist = null;
        Integer schedulerPeriod = null;
        Boolean schedulerConcurrent = null;
        Integer serviceBadLinkToleranceInterval = null;
        List<String> serviceCheckOverridePatterns = null;
        Boolean serviceCacheBrokenInternalLinks = null;
        List<String> serviceSpecialLinkPrefix = null;
        List<String> serviceSpecialLinkPatterns = null;
    ResponseEntity<ComDayCqRewriterLinkcheckerImplLinkCheckerImplInfo> response = api.comDayCqRewriterLinkcheckerImplLinkCheckerImpl(post, apply, delete, action, $location, propertylist, schedulerPeriod, schedulerConcurrent, serviceBadLinkToleranceInterval, serviceCheckOverridePatterns, serviceCacheBrokenInternalLinks, serviceSpecialLinkPrefix, serviceSpecialLinkPatterns , accept);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void comDayCqRewriterLinkcheckerImplLinkCheckerTaskTest() throws Exception {
        Boolean post = null;
        Boolean apply = null;
        Boolean delete = null;
        String action = null;
        String $location = null;
        List<String> propertylist = null;
        Integer schedulerPeriod = null;
        Boolean schedulerConcurrent = null;
        Integer goodLinkTestInterval = null;
        Integer badLinkTestInterval = null;
        Integer linkUnusedInterval = null;
        Integer connectionTimeout = null;
    ResponseEntity<ComDayCqRewriterLinkcheckerImplLinkCheckerTaskInfo> response = api.comDayCqRewriterLinkcheckerImplLinkCheckerTask(post, apply, delete, action, $location, propertylist, schedulerPeriod, schedulerConcurrent, goodLinkTestInterval, badLinkTestInterval, linkUnusedInterval, connectionTimeout , accept);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void comDayCqRewriterLinkcheckerImplLinkCheckerTransformerFactoryTest() throws Exception {
        Boolean post = null;
        Boolean apply = null;
        Boolean delete = null;
        String action = null;
        String $location = null;
        List<String> propertylist = null;
        Boolean linkcheckertransformerDisableRewriting = null;
        Boolean linkcheckertransformerDisableChecking = null;
        Integer linkcheckertransformerMapCacheSize = null;
        Boolean linkcheckertransformerStrictExtensionCheck = null;
        Boolean linkcheckertransformerStripHtmltExtension = null;
        List<String> linkcheckertransformerRewriteElements = null;
        List<String> linkcheckertransformerStripExtensionPathBlacklist = null;
    ResponseEntity<ComDayCqRewriterLinkcheckerImplLinkCheckerTransformerFactoryInfo> response = api.comDayCqRewriterLinkcheckerImplLinkCheckerTransformerFactory(post, apply, delete, action, $location, propertylist, linkcheckertransformerDisableRewriting, linkcheckertransformerDisableChecking, linkcheckertransformerMapCacheSize, linkcheckertransformerStrictExtensionCheck, linkcheckertransformerStripHtmltExtension, linkcheckertransformerRewriteElements, linkcheckertransformerStripExtensionPathBlacklist , accept);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void comDayCqRewriterLinkcheckerImplLinkInfoStorageImplTest() throws Exception {
        Boolean post = null;
        Boolean apply = null;
        Boolean delete = null;
        String action = null;
        String $location = null;
        List<String> propertylist = null;
        Integer serviceMaxLinksPerHost = null;
        Boolean serviceSaveExternalLinkReferences = null;
    ResponseEntity<ComDayCqRewriterLinkcheckerImplLinkInfoStorageImplInfo> response = api.comDayCqRewriterLinkcheckerImplLinkInfoStorageImpl(post, apply, delete, action, $location, propertylist, serviceMaxLinksPerHost, serviceSaveExternalLinkReferences , accept);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void comDayCqRewriterProcessorImplHtmlParserFactoryTest() throws Exception {
        Boolean post = null;
        Boolean apply = null;
        Boolean delete = null;
        String action = null;
        String $location = null;
        List<String> propertylist = null;
        List<String> htmlparserProcessTags = null;
        Boolean htmlparserPreserveCamelCase = null;
    ResponseEntity<ComDayCqRewriterProcessorImplHtmlParserFactoryInfo> response = api.comDayCqRewriterProcessorImplHtmlParserFactory(post, apply, delete, action, $location, propertylist, htmlparserProcessTags, htmlparserPreserveCamelCase , accept);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void comDayCqSearchImplBuilderQueryBuilderImplTest() throws Exception {
        Boolean post = null;
        Boolean apply = null;
        Boolean delete = null;
        String action = null;
        String $location = null;
        List<String> propertylist = null;
        List<String> excerptProperties = null;
        Integer cacheMaxEntries = null;
        Integer cacheEntryLifetime = null;
        Boolean xpathUnion = null;
    ResponseEntity<ComDayCqSearchImplBuilderQueryBuilderImplInfo> response = api.comDayCqSearchImplBuilderQueryBuilderImpl(post, apply, delete, action, $location, propertylist, excerptProperties, cacheMaxEntries, cacheEntryLifetime, xpathUnion , accept);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void comDayCqSearchSuggestImplSuggestionIndexManagerImplTest() throws Exception {
        Boolean post = null;
        Boolean apply = null;
        Boolean delete = null;
        String action = null;
        String $location = null;
        List<String> propertylist = null;
        String pathBuilderTarget = null;
        String suggestBasepath = null;
    ResponseEntity<ComDayCqSearchSuggestImplSuggestionIndexManagerImplInfo> response = api.comDayCqSearchSuggestImplSuggestionIndexManagerImpl(post, apply, delete, action, $location, propertylist, pathBuilderTarget, suggestBasepath , accept);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void comDayCqSearchpromoteImplPublishSearchPromoteConfigHandlerTest() throws Exception {
        Boolean post = null;
        Boolean apply = null;
        Boolean delete = null;
        String action = null;
        String $location = null;
        List<String> propertylist = null;
        Boolean cqSearchpromoteConfighandlerEnabled = null;
    ResponseEntity<ComDayCqSearchpromoteImplPublishSearchPromoteConfigHandlerInfo> response = api.comDayCqSearchpromoteImplPublishSearchPromoteConfigHandler(post, apply, delete, action, $location, propertylist, cqSearchpromoteConfighandlerEnabled , accept);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void comDayCqSearchpromoteImplSearchPromoteServiceImplTest() throws Exception {
        Boolean post = null;
        Boolean apply = null;
        Boolean delete = null;
        String action = null;
        String $location = null;
        List<String> propertylist = null;
        String cqSearchpromoteConfigurationServerUri = null;
        String cqSearchpromoteConfigurationEnvironment = null;
        Integer connectionTimeout = null;
        Integer socketTimeout = null;
    ResponseEntity<ComDayCqSearchpromoteImplSearchPromoteServiceImplInfo> response = api.comDayCqSearchpromoteImplSearchPromoteServiceImpl(post, apply, delete, action, $location, propertylist, cqSearchpromoteConfigurationServerUri, cqSearchpromoteConfigurationEnvironment, connectionTimeout, socketTimeout , accept);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void comDayCqSecurityACLSetupTest() throws Exception {
        Boolean post = null;
        Boolean apply = null;
        Boolean delete = null;
        String action = null;
        String $location = null;
        List<String> propertylist = null;
        List<String> cqAclsetupRules = null;
    ResponseEntity<ComDayCqSecurityACLSetupInfo> response = api.comDayCqSecurityACLSetup(post, apply, delete, action, $location, propertylist, cqAclsetupRules , accept);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void comDayCqStatisticsImplStatisticsServiceImplTest() throws Exception {
        Boolean post = null;
        Boolean apply = null;
        Boolean delete = null;
        String action = null;
        String $location = null;
        List<String> propertylist = null;
        Integer schedulerPeriod = null;
        Boolean schedulerConcurrent = null;
        String path = null;
        String workspace = null;
        String keywordsPath = null;
        Boolean asyncEntries = null;
    ResponseEntity<ComDayCqStatisticsImplStatisticsServiceImplInfo> response = api.comDayCqStatisticsImplStatisticsServiceImpl(post, apply, delete, action, $location, propertylist, schedulerPeriod, schedulerConcurrent, path, workspace, keywordsPath, asyncEntries , accept);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void comDayCqTaggingImplJcrTagManagerFactoryImplTest() throws Exception {
        Boolean post = null;
        Boolean apply = null;
        Boolean delete = null;
        String action = null;
        String $location = null;
        List<String> propertylist = null;
        Boolean validationEnabled = null;
    ResponseEntity<ComDayCqTaggingImplJcrTagManagerFactoryImplInfo> response = api.comDayCqTaggingImplJcrTagManagerFactoryImpl(post, apply, delete, action, $location, propertylist, validationEnabled , accept);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void comDayCqTaggingImplSearchTagPredicateEvaluatorTest() throws Exception {
        Boolean post = null;
        Boolean apply = null;
        Boolean delete = null;
        String action = null;
        String $location = null;
        List<String> propertylist = null;
        Boolean ignorePath = null;
    ResponseEntity<ComDayCqTaggingImplSearchTagPredicateEvaluatorInfo> response = api.comDayCqTaggingImplSearchTagPredicateEvaluator(post, apply, delete, action, $location, propertylist, ignorePath , accept);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void comDayCqTaggingImplTagGarbageCollectorTest() throws Exception {
        Boolean post = null;
        Boolean apply = null;
        Boolean delete = null;
        String action = null;
        String $location = null;
        List<String> propertylist = null;
        String schedulerExpression = null;
    ResponseEntity<ComDayCqTaggingImplTagGarbageCollectorInfo> response = api.comDayCqTaggingImplTagGarbageCollector(post, apply, delete, action, $location, propertylist, schedulerExpression , accept);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void comDayCqWcmContentsyncImplHandlerPagesUpdateHandlerTest() throws Exception {
        Boolean post = null;
        Boolean apply = null;
        Boolean delete = null;
        String action = null;
        String $location = null;
        List<String> propertylist = null;
        List<String> cqPagesupdatehandlerImageresourcetypes = null;
    ResponseEntity<ComDayCqWcmContentsyncImplHandlerPagesUpdateHandlerInfo> response = api.comDayCqWcmContentsyncImplHandlerPagesUpdateHandler(post, apply, delete, action, $location, propertylist, cqPagesupdatehandlerImageresourcetypes , accept);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void comDayCqWcmContentsyncImplRewriterPathRewriterTransformerFactorTest() throws Exception {
        Boolean post = null;
        Boolean apply = null;
        Boolean delete = null;
        String action = null;
        String $location = null;
        List<String> propertylist = null;
        List<String> cqContentsyncPathrewritertransformerMappingLinks = null;
        List<String> cqContentsyncPathrewritertransformerMappingClientlibs = null;
        List<String> cqContentsyncPathrewritertransformerMappingImages = null;
        String cqContentsyncPathrewritertransformerAttributePattern = null;
        String cqContentsyncPathrewritertransformerClientlibraryPattern = null;
        String cqContentsyncPathrewritertransformerClientlibraryReplace = null;
    ResponseEntity<ComDayCqWcmContentsyncImplRewriterPathRewriterTransformerFactorInfo> response = api.comDayCqWcmContentsyncImplRewriterPathRewriterTransformerFactor(post, apply, delete, action, $location, propertylist, cqContentsyncPathrewritertransformerMappingLinks, cqContentsyncPathrewritertransformerMappingClientlibs, cqContentsyncPathrewritertransformerMappingImages, cqContentsyncPathrewritertransformerAttributePattern, cqContentsyncPathrewritertransformerClientlibraryPattern, cqContentsyncPathrewritertransformerClientlibraryReplace , accept);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void comDayCqWcmCoreImplAuthoringUIModeServiceImplTest() throws Exception {
        Boolean post = null;
        Boolean apply = null;
        Boolean delete = null;
        String action = null;
        String $location = null;
        List<String> propertylist = null;
        String authoringUIModeServiceDefault = null;
    ResponseEntity<ComDayCqWcmCoreImplAuthoringUIModeServiceImplInfo> response = api.comDayCqWcmCoreImplAuthoringUIModeServiceImpl(post, apply, delete, action, $location, propertylist, authoringUIModeServiceDefault , accept);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void comDayCqWcmCoreImplCommandsWCMCommandServletTest() throws Exception {
        Boolean post = null;
        Boolean apply = null;
        Boolean delete = null;
        String action = null;
        String $location = null;
        List<String> propertylist = null;
        List<String> wcmcommandservletDeleteWhitelist = null;
    ResponseEntity<ComDayCqWcmCoreImplCommandsWCMCommandServletInfo> response = api.comDayCqWcmCoreImplCommandsWCMCommandServlet(post, apply, delete, action, $location, propertylist, wcmcommandservletDeleteWhitelist , accept);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void comDayCqWcmCoreImplDevicedetectionDeviceIdentificationModeImplTest() throws Exception {
        Boolean post = null;
        Boolean apply = null;
        Boolean delete = null;
        String action = null;
        String $location = null;
        List<String> propertylist = null;
        String dimDefaultMode = null;
        Boolean dimAppcacheEnabled = null;
    ResponseEntity<ComDayCqWcmCoreImplDevicedetectionDeviceIdentificationModeImplInfo> response = api.comDayCqWcmCoreImplDevicedetectionDeviceIdentificationModeImpl(post, apply, delete, action, $location, propertylist, dimDefaultMode, dimAppcacheEnabled , accept);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void comDayCqWcmCoreImplEventPageEventAuditListenerTest() throws Exception {
        Boolean post = null;
        Boolean apply = null;
        Boolean delete = null;
        String action = null;
        String $location = null;
        List<String> propertylist = null;
        String configured = null;
    ResponseEntity<ComDayCqWcmCoreImplEventPageEventAuditListenerInfo> response = api.comDayCqWcmCoreImplEventPageEventAuditListener(post, apply, delete, action, $location, propertylist, configured , accept);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void comDayCqWcmCoreImplEventPagePostProcessorTest() throws Exception {
        Boolean post = null;
        Boolean apply = null;
        Boolean delete = null;
        String action = null;
        String $location = null;
        List<String> propertylist = null;
        List<String> paths = null;
    ResponseEntity<ComDayCqWcmCoreImplEventPagePostProcessorInfo> response = api.comDayCqWcmCoreImplEventPagePostProcessor(post, apply, delete, action, $location, propertylist, paths , accept);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void comDayCqWcmCoreImplEventRepositoryChangeEventListenerTest() throws Exception {
        Boolean post = null;
        Boolean apply = null;
        Boolean delete = null;
        String action = null;
        String $location = null;
        List<String> propertylist = null;
        List<String> paths = null;
        List<String> excludedPaths = null;
    ResponseEntity<ComDayCqWcmCoreImplEventRepositoryChangeEventListenerInfo> response = api.comDayCqWcmCoreImplEventRepositoryChangeEventListener(post, apply, delete, action, $location, propertylist, paths, excludedPaths , accept);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void comDayCqWcmCoreImplEventTemplatePostProcessorTest() throws Exception {
        Boolean post = null;
        Boolean apply = null;
        Boolean delete = null;
        String action = null;
        String $location = null;
        List<String> propertylist = null;
        String paths = null;
    ResponseEntity<ComDayCqWcmCoreImplEventTemplatePostProcessorInfo> response = api.comDayCqWcmCoreImplEventTemplatePostProcessor(post, apply, delete, action, $location, propertylist, paths , accept);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void comDayCqWcmCoreImplLanguageManagerImplTest() throws Exception {
        Boolean post = null;
        Boolean apply = null;
        Boolean delete = null;
        String action = null;
        String $location = null;
        List<String> propertylist = null;
        String langmgrListPath = null;
        List<String> langmgrCountryDefault = null;
    ResponseEntity<ComDayCqWcmCoreImplLanguageManagerImplInfo> response = api.comDayCqWcmCoreImplLanguageManagerImpl(post, apply, delete, action, $location, propertylist, langmgrListPath, langmgrCountryDefault , accept);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void comDayCqWcmCoreImplLinkCheckerConfigurationFactoryImplTest() throws Exception {
        Boolean post = null;
        Boolean apply = null;
        Boolean delete = null;
        String action = null;
        String $location = null;
        List<String> propertylist = null;
        String linkExpiredPrefix = null;
        Boolean linkExpiredRemove = null;
        String linkExpiredSuffix = null;
        String linkInvalidPrefix = null;
        Boolean linkInvalidRemove = null;
        String linkInvalidSuffix = null;
        String linkPredatedPrefix = null;
        Boolean linkPredatedRemove = null;
        String linkPredatedSuffix = null;
        List<String> linkWcmmodes = null;
    ResponseEntity<ComDayCqWcmCoreImplLinkCheckerConfigurationFactoryImplInfo> response = api.comDayCqWcmCoreImplLinkCheckerConfigurationFactoryImpl(post, apply, delete, action, $location, propertylist, linkExpiredPrefix, linkExpiredRemove, linkExpiredSuffix, linkInvalidPrefix, linkInvalidRemove, linkInvalidSuffix, linkPredatedPrefix, linkPredatedRemove, linkPredatedSuffix, linkWcmmodes , accept);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void comDayCqWcmCoreImplPagePageInfoAggregatorImplTest() throws Exception {
        Boolean post = null;
        Boolean apply = null;
        Boolean delete = null;
        String action = null;
        String $location = null;
        List<String> propertylist = null;
        String pageInfoProviderPropertyRegexDefault = null;
        String pageInfoProviderPropertyName = null;
    ResponseEntity<ComDayCqWcmCoreImplPagePageInfoAggregatorImplInfo> response = api.comDayCqWcmCoreImplPagePageInfoAggregatorImpl(post, apply, delete, action, $location, propertylist, pageInfoProviderPropertyRegexDefault, pageInfoProviderPropertyName , accept);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void comDayCqWcmCoreImplPagePageManagerFactoryImplTest() throws Exception {
        Boolean post = null;
        Boolean apply = null;
        Boolean delete = null;
        String action = null;
        String $location = null;
        List<String> propertylist = null;
        String illegalCharMapping = null;
        Boolean pageSubTreeActivationCheck = null;
    ResponseEntity<ComDayCqWcmCoreImplPagePageManagerFactoryImplInfo> response = api.comDayCqWcmCoreImplPagePageManagerFactoryImpl(post, apply, delete, action, $location, propertylist, illegalCharMapping, pageSubTreeActivationCheck , accept);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void comDayCqWcmCoreImplReferencesContentContentReferenceConfigTest() throws Exception {
        Boolean post = null;
        Boolean apply = null;
        Boolean delete = null;
        String action = null;
        String $location = null;
        List<String> propertylist = null;
        List<String> contentReferenceConfigResourceTypes = null;
    ResponseEntity<ComDayCqWcmCoreImplReferencesContentContentReferenceConfigInfo> response = api.comDayCqWcmCoreImplReferencesContentContentReferenceConfig(post, apply, delete, action, $location, propertylist, contentReferenceConfigResourceTypes , accept);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void comDayCqWcmCoreImplServletsContentfinderAssetViewHandlerTest() throws Exception {
        Boolean post = null;
        Boolean apply = null;
        Boolean delete = null;
        String action = null;
        String $location = null;
        List<String> propertylist = null;
        Boolean damShowexpired = null;
        Boolean damShowhidden = null;
        Boolean tagTitleSearch = null;
        String guessTotal = null;
        String damExpiryProperty = null;
    ResponseEntity<ComDayCqWcmCoreImplServletsContentfinderAssetViewHandlerInfo> response = api.comDayCqWcmCoreImplServletsContentfinderAssetViewHandler(post, apply, delete, action, $location, propertylist, damShowexpired, damShowhidden, tagTitleSearch, guessTotal, damExpiryProperty , accept);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void comDayCqWcmCoreImplServletsContentfinderConnectorConnectorVieTest() throws Exception {
        Boolean post = null;
        Boolean apply = null;
        Boolean delete = null;
        String action = null;
        String $location = null;
        List<String> propertylist = null;
        List<String> itemResourceTypes = null;
    ResponseEntity<ComDayCqWcmCoreImplServletsContentfinderConnectorConnectorVieInfo> response = api.comDayCqWcmCoreImplServletsContentfinderConnectorConnectorVie(post, apply, delete, action, $location, propertylist, itemResourceTypes , accept);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void comDayCqWcmCoreImplServletsContentfinderPageViewHandlerTest() throws Exception {
        Boolean post = null;
        Boolean apply = null;
        Boolean delete = null;
        String action = null;
        String $location = null;
        List<String> propertylist = null;
        String guessTotal = null;
        Boolean tagTitleSearch = null;
    ResponseEntity<ComDayCqWcmCoreImplServletsContentfinderPageViewHandlerInfo> response = api.comDayCqWcmCoreImplServletsContentfinderPageViewHandler(post, apply, delete, action, $location, propertylist, guessTotal, tagTitleSearch , accept);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void comDayCqWcmCoreImplServletsFindReplaceServletTest() throws Exception {
        Boolean post = null;
        Boolean apply = null;
        Boolean delete = null;
        String action = null;
        String $location = null;
        List<String> propertylist = null;
        List<String> scope = null;
    ResponseEntity<ComDayCqWcmCoreImplServletsFindReplaceServletInfo> response = api.comDayCqWcmCoreImplServletsFindReplaceServlet(post, apply, delete, action, $location, propertylist, scope , accept);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void comDayCqWcmCoreImplServletsReferenceSearchServletTest() throws Exception {
        Boolean post = null;
        Boolean apply = null;
        Boolean delete = null;
        String action = null;
        String $location = null;
        List<String> propertylist = null;
        Integer referencesearchservletMaxReferencesPerPage = null;
        Integer referencesearchservletMaxPages = null;
    ResponseEntity<ComDayCqWcmCoreImplServletsReferenceSearchServletInfo> response = api.comDayCqWcmCoreImplServletsReferenceSearchServlet(post, apply, delete, action, $location, propertylist, referencesearchservletMaxReferencesPerPage, referencesearchservletMaxPages , accept);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void comDayCqWcmCoreImplServletsThumbnailServletTest() throws Exception {
        Boolean post = null;
        Boolean apply = null;
        Boolean delete = null;
        String action = null;
        String $location = null;
        List<String> propertylist = null;
        String workspace = null;
        List<String> dimensions = null;
    ResponseEntity<ComDayCqWcmCoreImplServletsThumbnailServletInfo> response = api.comDayCqWcmCoreImplServletsThumbnailServlet(post, apply, delete, action, $location, propertylist, workspace, dimensions , accept);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void comDayCqWcmCoreImplUtilsDefaultPageNameValidatorTest() throws Exception {
        Boolean post = null;
        Boolean apply = null;
        Boolean delete = null;
        String action = null;
        String $location = null;
        List<String> propertylist = null;
        String nonValidChars = null;
    ResponseEntity<ComDayCqWcmCoreImplUtilsDefaultPageNameValidatorInfo> response = api.comDayCqWcmCoreImplUtilsDefaultPageNameValidator(post, apply, delete, action, $location, propertylist, nonValidChars , accept);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void comDayCqWcmCoreImplVariantsPageVariantsProviderImplTest() throws Exception {
        Boolean post = null;
        Boolean apply = null;
        Boolean delete = null;
        String action = null;
        String $location = null;
        List<String> propertylist = null;
        String defaultExternalizerDomain = null;
    ResponseEntity<ComDayCqWcmCoreImplVariantsPageVariantsProviderImplInfo> response = api.comDayCqWcmCoreImplVariantsPageVariantsProviderImpl(post, apply, delete, action, $location, propertylist, defaultExternalizerDomain , accept);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void comDayCqWcmCoreImplVersionManagerImplTest() throws Exception {
        Boolean post = null;
        Boolean apply = null;
        Boolean delete = null;
        String action = null;
        String $location = null;
        List<String> propertylist = null;
        Boolean versionmanagerCreateVersionOnActivation = null;
        Boolean versionmanagerPurgingEnabled = null;
        List<String> versionmanagerPurgePaths = null;
        List<String> versionmanagerIvPaths = null;
        Integer versionmanagerMaxAgeDays = null;
        Integer versionmanagerMaxNumberVersions = null;
        Integer versionmanagerMinNumberVersions = null;
    ResponseEntity<ComDayCqWcmCoreImplVersionManagerImplInfo> response = api.comDayCqWcmCoreImplVersionManagerImpl(post, apply, delete, action, $location, propertylist, versionmanagerCreateVersionOnActivation, versionmanagerPurgingEnabled, versionmanagerPurgePaths, versionmanagerIvPaths, versionmanagerMaxAgeDays, versionmanagerMaxNumberVersions, versionmanagerMinNumberVersions , accept);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void comDayCqWcmCoreImplVersionPurgeTaskTest() throws Exception {
        Boolean post = null;
        Boolean apply = null;
        Boolean delete = null;
        String action = null;
        String $location = null;
        List<String> propertylist = null;
        List<String> versionpurgePaths = null;
        Boolean versionpurgeRecursive = null;
        Integer versionpurgeMaxVersions = null;
        Integer versionpurgeMinVersions = null;
        Integer versionpurgeMaxAgeDays = null;
    ResponseEntity<ComDayCqWcmCoreImplVersionPurgeTaskInfo> response = api.comDayCqWcmCoreImplVersionPurgeTask(post, apply, delete, action, $location, propertylist, versionpurgePaths, versionpurgeRecursive, versionpurgeMaxVersions, versionpurgeMinVersions, versionpurgeMaxAgeDays , accept);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void comDayCqWcmCoreImplWCMDebugFilterTest() throws Exception {
        Boolean post = null;
        Boolean apply = null;
        Boolean delete = null;
        String action = null;
        String $location = null;
        List<String> propertylist = null;
        Boolean wcmdbgfilterEnabled = null;
        Boolean wcmdbgfilterJspDebug = null;
    ResponseEntity<ComDayCqWcmCoreImplWCMDebugFilterInfo> response = api.comDayCqWcmCoreImplWCMDebugFilter(post, apply, delete, action, $location, propertylist, wcmdbgfilterEnabled, wcmdbgfilterJspDebug , accept);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void comDayCqWcmCoreImplWCMDeveloperModeFilterTest() throws Exception {
        Boolean post = null;
        Boolean apply = null;
        Boolean delete = null;
        String action = null;
        String $location = null;
        List<String> propertylist = null;
        Boolean wcmdevmodefilterEnabled = null;
    ResponseEntity<ComDayCqWcmCoreImplWCMDeveloperModeFilterInfo> response = api.comDayCqWcmCoreImplWCMDeveloperModeFilter(post, apply, delete, action, $location, propertylist, wcmdevmodefilterEnabled , accept);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void comDayCqWcmCoreImplWarpTimeWarpFilterTest() throws Exception {
        Boolean post = null;
        Boolean apply = null;
        Boolean delete = null;
        String action = null;
        String $location = null;
        List<String> propertylist = null;
        String filterOrder = null;
        String filterScope = null;
    ResponseEntity<ComDayCqWcmCoreImplWarpTimeWarpFilterInfo> response = api.comDayCqWcmCoreImplWarpTimeWarpFilter(post, apply, delete, action, $location, propertylist, filterOrder, filterScope , accept);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void comDayCqWcmCoreMvtMVTStatisticsImplTest() throws Exception {
        Boolean post = null;
        Boolean apply = null;
        Boolean delete = null;
        String action = null;
        String $location = null;
        List<String> propertylist = null;
        String mvtstatisticsTrackingurl = null;
    ResponseEntity<ComDayCqWcmCoreMvtMVTStatisticsImplInfo> response = api.comDayCqWcmCoreMvtMVTStatisticsImpl(post, apply, delete, action, $location, propertylist, mvtstatisticsTrackingurl , accept);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void comDayCqWcmCoreStatsPageViewStatisticsImplTest() throws Exception {
        Boolean post = null;
        Boolean apply = null;
        Boolean delete = null;
        String action = null;
        String $location = null;
        List<String> propertylist = null;
        String pageviewstatisticsTrackingurl = null;
        String pageviewstatisticsTrackingscriptEnabled = null;
    ResponseEntity<ComDayCqWcmCoreStatsPageViewStatisticsImplInfo> response = api.comDayCqWcmCoreStatsPageViewStatisticsImpl(post, apply, delete, action, $location, propertylist, pageviewstatisticsTrackingurl, pageviewstatisticsTrackingscriptEnabled , accept);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void comDayCqWcmCoreWCMRequestFilterTest() throws Exception {
        Boolean post = null;
        Boolean apply = null;
        Boolean delete = null;
        String action = null;
        String $location = null;
        List<String> propertylist = null;
        String wcmfilterMode = null;
    ResponseEntity<ComDayCqWcmCoreWCMRequestFilterInfo> response = api.comDayCqWcmCoreWCMRequestFilter(post, apply, delete, action, $location, propertylist, wcmfilterMode , accept);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void comDayCqWcmDesignimporterDesignPackageImporterTest() throws Exception {
        Boolean post = null;
        Boolean apply = null;
        Boolean delete = null;
        String action = null;
        String $location = null;
        List<String> propertylist = null;
        List<String> extractFilter = null;
    ResponseEntity<ComDayCqWcmDesignimporterDesignPackageImporterInfo> response = api.comDayCqWcmDesignimporterDesignPackageImporter(post, apply, delete, action, $location, propertylist, extractFilter , accept);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void comDayCqWcmDesignimporterImplCanvasBuilderImplTest() throws Exception {
        Boolean post = null;
        Boolean apply = null;
        Boolean delete = null;
        String action = null;
        String $location = null;
        List<String> propertylist = null;
        String filepattern = null;
        Boolean buildPageNodes = null;
        Boolean buildClientLibs = null;
        Boolean buildCanvasComponent = null;
    ResponseEntity<ComDayCqWcmDesignimporterImplCanvasBuilderImplInfo> response = api.comDayCqWcmDesignimporterImplCanvasBuilderImpl(post, apply, delete, action, $location, propertylist, filepattern, buildPageNodes, buildClientLibs, buildCanvasComponent , accept);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void comDayCqWcmDesignimporterImplCanvasPageDeleteHandlerTest() throws Exception {
        Boolean post = null;
        Boolean apply = null;
        Boolean delete = null;
        String action = null;
        String $location = null;
        List<String> propertylist = null;
        Integer minThreadPoolSize = null;
        Integer maxThreadPoolSize = null;
    ResponseEntity<ComDayCqWcmDesignimporterImplCanvasPageDeleteHandlerInfo> response = api.comDayCqWcmDesignimporterImplCanvasPageDeleteHandler(post, apply, delete, action, $location, propertylist, minThreadPoolSize, maxThreadPoolSize , accept);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void comDayCqWcmDesignimporterImplEntryPreprocessorImplTest() throws Exception {
        Boolean post = null;
        Boolean apply = null;
        Boolean delete = null;
        String action = null;
        String $location = null;
        List<String> propertylist = null;
        String searchPattern = null;
        String replacePattern = null;
    ResponseEntity<ComDayCqWcmDesignimporterImplEntryPreprocessorImplInfo> response = api.comDayCqWcmDesignimporterImplEntryPreprocessorImpl(post, apply, delete, action, $location, propertylist, searchPattern, replacePattern , accept);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void comDayCqWcmDesignimporterImplMobileCanvasBuilderImplTest() throws Exception {
        Boolean post = null;
        Boolean apply = null;
        Boolean delete = null;
        String action = null;
        String $location = null;
        List<String> propertylist = null;
        String filepattern = null;
        List<String> deviceGroups = null;
        Boolean buildPageNodes = null;
        Boolean buildClientLibs = null;
        Boolean buildCanvasComponent = null;
    ResponseEntity<ComDayCqWcmDesignimporterImplMobileCanvasBuilderImplInfo> response = api.comDayCqWcmDesignimporterImplMobileCanvasBuilderImpl(post, apply, delete, action, $location, propertylist, filepattern, deviceGroups, buildPageNodes, buildClientLibs, buildCanvasComponent , accept);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void comDayCqWcmDesignimporterParserTaghandlersFactoryCanvasComponeTest() throws Exception {
        Boolean post = null;
        Boolean apply = null;
        Boolean delete = null;
        String action = null;
        String $location = null;
        List<String> propertylist = null;
        Integer serviceRanking = null;
        String tagpattern = null;
    ResponseEntity<ComDayCqWcmDesignimporterParserTaghandlersFactoryCanvasComponeInfo> response = api.comDayCqWcmDesignimporterParserTaghandlersFactoryCanvasCompone(post, apply, delete, action, $location, propertylist, serviceRanking, tagpattern , accept);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void comDayCqWcmDesignimporterParserTaghandlersFactoryDefaultComponTest() throws Exception {
        Boolean post = null;
        Boolean apply = null;
        Boolean delete = null;
        String action = null;
        String $location = null;
        List<String> propertylist = null;
        Integer serviceRanking = null;
        String tagpattern = null;
    ResponseEntity<ComDayCqWcmDesignimporterParserTaghandlersFactoryDefaultComponInfo> response = api.comDayCqWcmDesignimporterParserTaghandlersFactoryDefaultCompon(post, apply, delete, action, $location, propertylist, serviceRanking, tagpattern , accept);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void comDayCqWcmDesignimporterParserTaghandlersFactoryDefaultTagHanTest() throws Exception {
        Boolean post = null;
        Boolean apply = null;
        Boolean delete = null;
        String action = null;
        String $location = null;
        List<String> propertylist = null;
        Integer serviceRanking = null;
        String tagpattern = null;
    ResponseEntity<ComDayCqWcmDesignimporterParserTaghandlersFactoryDefaultTagHanInfo> response = api.comDayCqWcmDesignimporterParserTaghandlersFactoryDefaultTagHan(post, apply, delete, action, $location, propertylist, serviceRanking, tagpattern , accept);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void comDayCqWcmDesignimporterParserTaghandlersFactoryHeadTagHandleTest() throws Exception {
        Boolean post = null;
        Boolean apply = null;
        Boolean delete = null;
        String action = null;
        String $location = null;
        List<String> propertylist = null;
        Integer serviceRanking = null;
        String tagpattern = null;
    ResponseEntity<ComDayCqWcmDesignimporterParserTaghandlersFactoryHeadTagHandleInfo> response = api.comDayCqWcmDesignimporterParserTaghandlersFactoryHeadTagHandle(post, apply, delete, action, $location, propertylist, serviceRanking, tagpattern , accept);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void comDayCqWcmDesignimporterParserTaghandlersFactoryIFrameTagHandTest() throws Exception {
        Boolean post = null;
        Boolean apply = null;
        Boolean delete = null;
        String action = null;
        String $location = null;
        List<String> propertylist = null;
        Integer serviceRanking = null;
        String tagpattern = null;
    ResponseEntity<ComDayCqWcmDesignimporterParserTaghandlersFactoryIFrameTagHandInfo> response = api.comDayCqWcmDesignimporterParserTaghandlersFactoryIFrameTagHand(post, apply, delete, action, $location, propertylist, serviceRanking, tagpattern , accept);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void comDayCqWcmDesignimporterParserTaghandlersFactoryImageComponenTest() throws Exception {
        Boolean post = null;
        Boolean apply = null;
        Boolean delete = null;
        String action = null;
        String $location = null;
        List<String> propertylist = null;
        Integer serviceRanking = null;
        String tagpattern = null;
        String componentResourceType = null;
    ResponseEntity<ComDayCqWcmDesignimporterParserTaghandlersFactoryImageComponenInfo> response = api.comDayCqWcmDesignimporterParserTaghandlersFactoryImageComponen(post, apply, delete, action, $location, propertylist, serviceRanking, tagpattern, componentResourceType , accept);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void comDayCqWcmDesignimporterParserTaghandlersFactoryImgTagHandlerTest() throws Exception {
        Boolean post = null;
        Boolean apply = null;
        Boolean delete = null;
        String action = null;
        String $location = null;
        List<String> propertylist = null;
        Integer serviceRanking = null;
        String tagpattern = null;
    ResponseEntity<ComDayCqWcmDesignimporterParserTaghandlersFactoryImgTagHandlerInfo> response = api.comDayCqWcmDesignimporterParserTaghandlersFactoryImgTagHandler(post, apply, delete, action, $location, propertylist, serviceRanking, tagpattern , accept);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void comDayCqWcmDesignimporterParserTaghandlersFactoryInlineScriptTTest() throws Exception {
        Boolean post = null;
        Boolean apply = null;
        Boolean delete = null;
        String action = null;
        String $location = null;
        List<String> propertylist = null;
        Integer serviceRanking = null;
        String tagpattern = null;
    ResponseEntity<ComDayCqWcmDesignimporterParserTaghandlersFactoryInlineScriptTInfo> response = api.comDayCqWcmDesignimporterParserTaghandlersFactoryInlineScriptT(post, apply, delete, action, $location, propertylist, serviceRanking, tagpattern , accept);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void comDayCqWcmDesignimporterParserTaghandlersFactoryLinkTagHandleTest() throws Exception {
        Boolean post = null;
        Boolean apply = null;
        Boolean delete = null;
        String action = null;
        String $location = null;
        List<String> propertylist = null;
        Integer serviceRanking = null;
        String tagpattern = null;
    ResponseEntity<ComDayCqWcmDesignimporterParserTaghandlersFactoryLinkTagHandleInfo> response = api.comDayCqWcmDesignimporterParserTaghandlersFactoryLinkTagHandle(post, apply, delete, action, $location, propertylist, serviceRanking, tagpattern , accept);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void comDayCqWcmDesignimporterParserTaghandlersFactoryMetaTagHandleTest() throws Exception {
        Boolean post = null;
        Boolean apply = null;
        Boolean delete = null;
        String action = null;
        String $location = null;
        List<String> propertylist = null;
        Integer serviceRanking = null;
        String tagpattern = null;
    ResponseEntity<ComDayCqWcmDesignimporterParserTaghandlersFactoryMetaTagHandleInfo> response = api.comDayCqWcmDesignimporterParserTaghandlersFactoryMetaTagHandle(post, apply, delete, action, $location, propertylist, serviceRanking, tagpattern , accept);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void comDayCqWcmDesignimporterParserTaghandlersFactoryNonScriptTagHTest() throws Exception {
        Boolean post = null;
        Boolean apply = null;
        Boolean delete = null;
        String action = null;
        String $location = null;
        List<String> propertylist = null;
        Integer serviceRanking = null;
        String tagpattern = null;
    ResponseEntity<ComDayCqWcmDesignimporterParserTaghandlersFactoryNonScriptTagHInfo> response = api.comDayCqWcmDesignimporterParserTaghandlersFactoryNonScriptTagH(post, apply, delete, action, $location, propertylist, serviceRanking, tagpattern , accept);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void comDayCqWcmDesignimporterParserTaghandlersFactoryParsysComponeTest() throws Exception {
        Boolean post = null;
        Boolean apply = null;
        Boolean delete = null;
        String action = null;
        String $location = null;
        List<String> propertylist = null;
        Integer serviceRanking = null;
        String tagpattern = null;
        String componentResourceType = null;
    ResponseEntity<ComDayCqWcmDesignimporterParserTaghandlersFactoryParsysComponeInfo> response = api.comDayCqWcmDesignimporterParserTaghandlersFactoryParsysCompone(post, apply, delete, action, $location, propertylist, serviceRanking, tagpattern, componentResourceType , accept);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void comDayCqWcmDesignimporterParserTaghandlersFactoryScriptTagHandTest() throws Exception {
        Boolean post = null;
        Boolean apply = null;
        Boolean delete = null;
        String action = null;
        String $location = null;
        List<String> propertylist = null;
        Integer serviceRanking = null;
        String tagpattern = null;
    ResponseEntity<ComDayCqWcmDesignimporterParserTaghandlersFactoryScriptTagHandInfo> response = api.comDayCqWcmDesignimporterParserTaghandlersFactoryScriptTagHand(post, apply, delete, action, $location, propertylist, serviceRanking, tagpattern , accept);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void comDayCqWcmDesignimporterParserTaghandlersFactoryStyleTagHandlTest() throws Exception {
        Boolean post = null;
        Boolean apply = null;
        Boolean delete = null;
        String action = null;
        String $location = null;
        List<String> propertylist = null;
        Integer serviceRanking = null;
        String tagpattern = null;
    ResponseEntity<ComDayCqWcmDesignimporterParserTaghandlersFactoryStyleTagHandlInfo> response = api.comDayCqWcmDesignimporterParserTaghandlersFactoryStyleTagHandl(post, apply, delete, action, $location, propertylist, serviceRanking, tagpattern , accept);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void comDayCqWcmDesignimporterParserTaghandlersFactoryTextComponentTest() throws Exception {
        Boolean post = null;
        Boolean apply = null;
        Boolean delete = null;
        String action = null;
        String $location = null;
        List<String> propertylist = null;
        Integer serviceRanking = null;
        String tagpattern = null;
        String componentResourceType = null;
    ResponseEntity<ComDayCqWcmDesignimporterParserTaghandlersFactoryTextComponentInfo> response = api.comDayCqWcmDesignimporterParserTaghandlersFactoryTextComponent(post, apply, delete, action, $location, propertylist, serviceRanking, tagpattern, componentResourceType , accept);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void comDayCqWcmDesignimporterParserTaghandlersFactoryTitleComponenTest() throws Exception {
        Boolean post = null;
        Boolean apply = null;
        Boolean delete = null;
        String action = null;
        String $location = null;
        List<String> propertylist = null;
        Integer serviceRanking = null;
        String tagpattern = null;
        String componentResourceType = null;
    ResponseEntity<ComDayCqWcmDesignimporterParserTaghandlersFactoryTitleComponenInfo> response = api.comDayCqWcmDesignimporterParserTaghandlersFactoryTitleComponen(post, apply, delete, action, $location, propertylist, serviceRanking, tagpattern, componentResourceType , accept);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void comDayCqWcmDesignimporterParserTaghandlersFactoryTitleTagHandlTest() throws Exception {
        Boolean post = null;
        Boolean apply = null;
        Boolean delete = null;
        String action = null;
        String $location = null;
        List<String> propertylist = null;
        Integer serviceRanking = null;
        String tagpattern = null;
    ResponseEntity<ComDayCqWcmDesignimporterParserTaghandlersFactoryTitleTagHandlInfo> response = api.comDayCqWcmDesignimporterParserTaghandlersFactoryTitleTagHandl(post, apply, delete, action, $location, propertylist, serviceRanking, tagpattern , accept);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void comDayCqWcmFoundationFormsImplFormChooserServletTest() throws Exception {
        Boolean post = null;
        Boolean apply = null;
        Boolean delete = null;
        String action = null;
        String $location = null;
        List<String> propertylist = null;
        String serviceName = null;
        String slingServletResourceTypes = null;
        String slingServletSelectors = null;
        List<String> slingServletMethods = null;
        Boolean formsFormchooserservletAdvansesearchRequire = null;
    ResponseEntity<ComDayCqWcmFoundationFormsImplFormChooserServletInfo> response = api.comDayCqWcmFoundationFormsImplFormChooserServlet(post, apply, delete, action, $location, propertylist, serviceName, slingServletResourceTypes, slingServletSelectors, slingServletMethods, formsFormchooserservletAdvansesearchRequire , accept);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void comDayCqWcmFoundationFormsImplFormParagraphPostProcessorTest() throws Exception {
        Boolean post = null;
        Boolean apply = null;
        Boolean delete = null;
        String action = null;
        String $location = null;
        List<String> propertylist = null;
        Boolean formsFormparagraphpostprocessorEnabled = null;
        List<String> formsFormparagraphpostprocessorFormresourcetypes = null;
    ResponseEntity<ComDayCqWcmFoundationFormsImplFormParagraphPostProcessorInfo> response = api.comDayCqWcmFoundationFormsImplFormParagraphPostProcessor(post, apply, delete, action, $location, propertylist, formsFormparagraphpostprocessorEnabled, formsFormparagraphpostprocessorFormresourcetypes , accept);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void comDayCqWcmFoundationFormsImplFormsHandlingServletTest() throws Exception {
        Boolean post = null;
        Boolean apply = null;
        Boolean delete = null;
        String action = null;
        String $location = null;
        List<String> propertylist = null;
        String nameWhitelist = null;
        Boolean allowExpressions = null;
    ResponseEntity<ComDayCqWcmFoundationFormsImplFormsHandlingServletInfo> response = api.comDayCqWcmFoundationFormsImplFormsHandlingServlet(post, apply, delete, action, $location, propertylist, nameWhitelist, allowExpressions , accept);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void comDayCqWcmFoundationFormsImplMailServletTest() throws Exception {
        Boolean post = null;
        Boolean apply = null;
        Boolean delete = null;
        String action = null;
        String $location = null;
        List<String> propertylist = null;
        String slingServletResourceTypes = null;
        String slingServletSelectors = null;
        List<String> resourceWhitelist = null;
        String resourceBlacklist = null;
    ResponseEntity<ComDayCqWcmFoundationFormsImplMailServletInfo> response = api.comDayCqWcmFoundationFormsImplMailServlet(post, apply, delete, action, $location, propertylist, slingServletResourceTypes, slingServletSelectors, resourceWhitelist, resourceBlacklist , accept);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void comDayCqWcmFoundationImplAdaptiveImageComponentServletTest() throws Exception {
        Boolean post = null;
        Boolean apply = null;
        Boolean delete = null;
        String action = null;
        String $location = null;
        List<String> propertylist = null;
        List<String> adaptSupportedWidths = null;
    ResponseEntity<ComDayCqWcmFoundationImplAdaptiveImageComponentServletInfo> response = api.comDayCqWcmFoundationImplAdaptiveImageComponentServlet(post, apply, delete, action, $location, propertylist, adaptSupportedWidths , accept);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void comDayCqWcmFoundationImplHTTPAuthHandlerTest() throws Exception {
        Boolean post = null;
        Boolean apply = null;
        Boolean delete = null;
        String action = null;
        String $location = null;
        List<String> propertylist = null;
        String path = null;
        Boolean authHttpNologin = null;
        String authHttpRealm = null;
        String authDefaultLoginpage = null;
        List<String> authCredForm = null;
        List<String> authCredUtf8 = null;
    ResponseEntity<ComDayCqWcmFoundationImplHTTPAuthHandlerInfo> response = api.comDayCqWcmFoundationImplHTTPAuthHandler(post, apply, delete, action, $location, propertylist, path, authHttpNologin, authHttpRealm, authDefaultLoginpage, authCredForm, authCredUtf8 , accept);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void comDayCqWcmFoundationImplPageImpressionsTrackerTest() throws Exception {
        Boolean post = null;
        Boolean apply = null;
        Boolean delete = null;
        String action = null;
        String $location = null;
        List<String> propertylist = null;
        String slingAuthRequirements = null;
    ResponseEntity<ComDayCqWcmFoundationImplPageImpressionsTrackerInfo> response = api.comDayCqWcmFoundationImplPageImpressionsTracker(post, apply, delete, action, $location, propertylist, slingAuthRequirements , accept);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void comDayCqWcmFoundationImplPageRedirectServletTest() throws Exception {
        Boolean post = null;
        Boolean apply = null;
        Boolean delete = null;
        String action = null;
        String $location = null;
        List<String> propertylist = null;
        List<String> excludedResourceTypes = null;
    ResponseEntity<ComDayCqWcmFoundationImplPageRedirectServletInfo> response = api.comDayCqWcmFoundationImplPageRedirectServlet(post, apply, delete, action, $location, propertylist, excludedResourceTypes , accept);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void comDayCqWcmFoundationSecurityImplDefaultAttachmentTypeBlacklistTest() throws Exception {
        Boolean post = null;
        Boolean apply = null;
        Boolean delete = null;
        String action = null;
        String $location = null;
        List<String> propertylist = null;
        List<String> defaultAttachmentTypeBlacklist = null;
        List<String> baselineAttachmentTypeBlacklist = null;
    ResponseEntity<ComDayCqWcmFoundationSecurityImplDefaultAttachmentTypeBlacklistInfo> response = api.comDayCqWcmFoundationSecurityImplDefaultAttachmentTypeBlacklist(post, apply, delete, action, $location, propertylist, defaultAttachmentTypeBlacklist, baselineAttachmentTypeBlacklist , accept);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void comDayCqWcmFoundationSecurityImplSaferSlingPostValidatorImplTest() throws Exception {
        Boolean post = null;
        Boolean apply = null;
        Boolean delete = null;
        String action = null;
        String $location = null;
        List<String> propertylist = null;
        List<String> parameterWhitelist = null;
        List<String> parameterWhitelistPrefixes = null;
        List<String> binaryParameterWhitelist = null;
        List<String> modifierWhitelist = null;
        List<String> operationWhitelist = null;
        List<String> operationWhitelistPrefixes = null;
        List<String> typehintWhitelist = null;
        List<String> resourcetypeWhitelist = null;
    ResponseEntity<ComDayCqWcmFoundationSecurityImplSaferSlingPostValidatorImplInfo> response = api.comDayCqWcmFoundationSecurityImplSaferSlingPostValidatorImpl(post, apply, delete, action, $location, propertylist, parameterWhitelist, parameterWhitelistPrefixes, binaryParameterWhitelist, modifierWhitelist, operationWhitelist, operationWhitelistPrefixes, typehintWhitelist, resourcetypeWhitelist , accept);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void comDayCqWcmMobileCoreImplDeviceDeviceInfoTransformerFactoryTest() throws Exception {
        Boolean post = null;
        Boolean apply = null;
        Boolean delete = null;
        String action = null;
        String $location = null;
        List<String> propertylist = null;
        Boolean deviceInfoTransformerEnabled = null;
        String deviceInfoTransformerCssStyle = null;
    ResponseEntity<ComDayCqWcmMobileCoreImplDeviceDeviceInfoTransformerFactoryInfo> response = api.comDayCqWcmMobileCoreImplDeviceDeviceInfoTransformerFactory(post, apply, delete, action, $location, propertylist, deviceInfoTransformerEnabled, deviceInfoTransformerCssStyle , accept);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void comDayCqWcmMobileCoreImplRedirectRedirectFilterTest() throws Exception {
        Boolean post = null;
        Boolean apply = null;
        Boolean delete = null;
        String action = null;
        String $location = null;
        List<String> propertylist = null;
        Boolean redirectEnabled = null;
        Boolean redirectStatsEnabled = null;
        List<String> redirectExtensions = null;
        List<String> redirectPaths = null;
    ResponseEntity<ComDayCqWcmMobileCoreImplRedirectRedirectFilterInfo> response = api.comDayCqWcmMobileCoreImplRedirectRedirectFilter(post, apply, delete, action, $location, propertylist, redirectEnabled, redirectStatsEnabled, redirectExtensions, redirectPaths , accept);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void comDayCqWcmMsmImplActionsContentCopyActionFactoryTest() throws Exception {
        Boolean post = null;
        Boolean apply = null;
        Boolean delete = null;
        String action = null;
        String $location = null;
        List<String> propertylist = null;
        List<String> cqWcmMsmActionExcludednodetypes = null;
        List<String> cqWcmMsmActionExcludedparagraphitems = null;
        List<String> cqWcmMsmActionExcludedprops = null;
        String contentcopyactionOrderStyle = null;
    ResponseEntity<ComDayCqWcmMsmImplActionsContentCopyActionFactoryInfo> response = api.comDayCqWcmMsmImplActionsContentCopyActionFactory(post, apply, delete, action, $location, propertylist, cqWcmMsmActionExcludednodetypes, cqWcmMsmActionExcludedparagraphitems, cqWcmMsmActionExcludedprops, contentcopyactionOrderStyle , accept);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void comDayCqWcmMsmImplActionsContentDeleteActionFactoryTest() throws Exception {
        Boolean post = null;
        Boolean apply = null;
        Boolean delete = null;
        String action = null;
        String $location = null;
        List<String> propertylist = null;
        List<String> cqWcmMsmActionExcludednodetypes = null;
        List<String> cqWcmMsmActionExcludedparagraphitems = null;
        List<String> cqWcmMsmActionExcludedprops = null;
    ResponseEntity<ComDayCqWcmMsmImplActionsContentDeleteActionFactoryInfo> response = api.comDayCqWcmMsmImplActionsContentDeleteActionFactory(post, apply, delete, action, $location, propertylist, cqWcmMsmActionExcludednodetypes, cqWcmMsmActionExcludedparagraphitems, cqWcmMsmActionExcludedprops , accept);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void comDayCqWcmMsmImplActionsContentUpdateActionFactoryTest() throws Exception {
        Boolean post = null;
        Boolean apply = null;
        Boolean delete = null;
        String action = null;
        String $location = null;
        List<String> propertylist = null;
        List<String> cqWcmMsmActionExcludednodetypes = null;
        List<String> cqWcmMsmActionExcludedparagraphitems = null;
        List<String> cqWcmMsmActionExcludedprops = null;
        List<String> cqWcmMsmActionIgnoredMixin = null;
    ResponseEntity<ComDayCqWcmMsmImplActionsContentUpdateActionFactoryInfo> response = api.comDayCqWcmMsmImplActionsContentUpdateActionFactory(post, apply, delete, action, $location, propertylist, cqWcmMsmActionExcludednodetypes, cqWcmMsmActionExcludedparagraphitems, cqWcmMsmActionExcludedprops, cqWcmMsmActionIgnoredMixin , accept);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void comDayCqWcmMsmImplActionsOrderChildrenActionFactoryTest() throws Exception {
        Boolean post = null;
        Boolean apply = null;
        Boolean delete = null;
        String action = null;
        String $location = null;
        List<String> propertylist = null;
        List<String> cqWcmMsmActionExcludednodetypes = null;
        List<String> cqWcmMsmActionExcludedparagraphitems = null;
        List<String> cqWcmMsmActionExcludedprops = null;
    ResponseEntity<ComDayCqWcmMsmImplActionsOrderChildrenActionFactoryInfo> response = api.comDayCqWcmMsmImplActionsOrderChildrenActionFactory(post, apply, delete, action, $location, propertylist, cqWcmMsmActionExcludednodetypes, cqWcmMsmActionExcludedparagraphitems, cqWcmMsmActionExcludedprops , accept);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void comDayCqWcmMsmImplActionsPageMoveActionFactoryTest() throws Exception {
        Boolean post = null;
        Boolean apply = null;
        Boolean delete = null;
        String action = null;
        String $location = null;
        List<String> propertylist = null;
        List<String> cqWcmMsmActionExcludednodetypes = null;
        List<String> cqWcmMsmActionExcludedparagraphitems = null;
        List<String> cqWcmMsmActionExcludedprops = null;
        Boolean cqWcmMsmImplActionsPagemovePropReferenceUpdate = null;
    ResponseEntity<ComDayCqWcmMsmImplActionsPageMoveActionFactoryInfo> response = api.comDayCqWcmMsmImplActionsPageMoveActionFactory(post, apply, delete, action, $location, propertylist, cqWcmMsmActionExcludednodetypes, cqWcmMsmActionExcludedparagraphitems, cqWcmMsmActionExcludedprops, cqWcmMsmImplActionsPagemovePropReferenceUpdate , accept);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void comDayCqWcmMsmImplActionsReferencesUpdateActionFactoryTest() throws Exception {
        Boolean post = null;
        Boolean apply = null;
        Boolean delete = null;
        String action = null;
        String $location = null;
        List<String> propertylist = null;
        List<String> cqWcmMsmActionExcludednodetypes = null;
        List<String> cqWcmMsmActionExcludedparagraphitems = null;
        List<String> cqWcmMsmActionExcludedprops = null;
        Boolean cqWcmMsmImplActionReferencesupdatePropUpdateNested = null;
    ResponseEntity<ComDayCqWcmMsmImplActionsReferencesUpdateActionFactoryInfo> response = api.comDayCqWcmMsmImplActionsReferencesUpdateActionFactory(post, apply, delete, action, $location, propertylist, cqWcmMsmActionExcludednodetypes, cqWcmMsmActionExcludedparagraphitems, cqWcmMsmActionExcludedprops, cqWcmMsmImplActionReferencesupdatePropUpdateNested , accept);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void comDayCqWcmMsmImplActionsVersionCopyActionFactoryTest() throws Exception {
        Boolean post = null;
        Boolean apply = null;
        Boolean delete = null;
        String action = null;
        String $location = null;
        List<String> propertylist = null;
        List<String> cqWcmMsmActionExcludednodetypes = null;
        List<String> cqWcmMsmActionExcludedparagraphitems = null;
        List<String> cqWcmMsmActionExcludedprops = null;
    ResponseEntity<ComDayCqWcmMsmImplActionsVersionCopyActionFactoryInfo> response = api.comDayCqWcmMsmImplActionsVersionCopyActionFactory(post, apply, delete, action, $location, propertylist, cqWcmMsmActionExcludednodetypes, cqWcmMsmActionExcludedparagraphitems, cqWcmMsmActionExcludedprops , accept);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void comDayCqWcmMsmImplLiveRelationshipManagerImplTest() throws Exception {
        Boolean post = null;
        Boolean apply = null;
        Boolean delete = null;
        String action = null;
        String $location = null;
        List<String> propertylist = null;
        String liverelationshipmgrRelationsconfigDefault = null;
    ResponseEntity<ComDayCqWcmMsmImplLiveRelationshipManagerImplInfo> response = api.comDayCqWcmMsmImplLiveRelationshipManagerImpl(post, apply, delete, action, $location, propertylist, liverelationshipmgrRelationsconfigDefault , accept);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void comDayCqWcmMsmImplRolloutManagerImplTest() throws Exception {
        Boolean post = null;
        Boolean apply = null;
        Boolean delete = null;
        String action = null;
        String $location = null;
        List<String> propertylist = null;
        String eventFilter = null;
        List<String> rolloutmgrExcludedpropsDefault = null;
        List<String> rolloutmgrExcludedparagraphpropsDefault = null;
        List<String> rolloutmgrExcludednodetypesDefault = null;
        Integer rolloutmgrThreadpoolMaxsize = null;
        Integer rolloutmgrThreadpoolMaxshutdowntime = null;
        String rolloutmgrThreadpoolPriority = null;
        Integer rolloutmgrCommitSize = null;
        Boolean rolloutmgrConflicthandlingEnabled = null;
    ResponseEntity<ComDayCqWcmMsmImplRolloutManagerImplInfo> response = api.comDayCqWcmMsmImplRolloutManagerImpl(post, apply, delete, action, $location, propertylist, eventFilter, rolloutmgrExcludedpropsDefault, rolloutmgrExcludedparagraphpropsDefault, rolloutmgrExcludednodetypesDefault, rolloutmgrThreadpoolMaxsize, rolloutmgrThreadpoolMaxshutdowntime, rolloutmgrThreadpoolPriority, rolloutmgrCommitSize, rolloutmgrConflicthandlingEnabled , accept);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void comDayCqWcmMsmImplServletsAuditLogServletTest() throws Exception {
        Boolean post = null;
        Boolean apply = null;
        Boolean delete = null;
        String action = null;
        String $location = null;
        List<String> propertylist = null;
        Integer auditlogservletDefaultEventsCount = null;
        String auditlogservletDefaultPath = null;
    ResponseEntity<ComDayCqWcmMsmImplServletsAuditLogServletInfo> response = api.comDayCqWcmMsmImplServletsAuditLogServlet(post, apply, delete, action, $location, propertylist, auditlogservletDefaultEventsCount, auditlogservletDefaultPath , accept);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void comDayCqWcmNotificationEmailImplEmailChannelTest() throws Exception {
        Boolean post = null;
        Boolean apply = null;
        Boolean delete = null;
        String action = null;
        String $location = null;
        List<String> propertylist = null;
        String emailFrom = null;
    ResponseEntity<ComDayCqWcmNotificationEmailImplEmailChannelInfo> response = api.comDayCqWcmNotificationEmailImplEmailChannel(post, apply, delete, action, $location, propertylist, emailFrom , accept);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void comDayCqWcmNotificationImplNotificationManagerImplTest() throws Exception {
        Boolean post = null;
        Boolean apply = null;
        Boolean delete = null;
        String action = null;
        String $location = null;
        List<String> propertylist = null;
        List<String> eventTopics = null;
    ResponseEntity<ComDayCqWcmNotificationImplNotificationManagerImplInfo> response = api.comDayCqWcmNotificationImplNotificationManagerImpl(post, apply, delete, action, $location, propertylist, eventTopics , accept);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void comDayCqWcmScriptingImplBVPManagerTest() throws Exception {
        Boolean post = null;
        Boolean apply = null;
        Boolean delete = null;
        String action = null;
        String $location = null;
        List<String> propertylist = null;
        List<String> comDayCqWcmScriptingBvpScriptEngines = null;
    ResponseEntity<ComDayCqWcmScriptingImplBVPManagerInfo> response = api.comDayCqWcmScriptingImplBVPManager(post, apply, delete, action, $location, propertylist, comDayCqWcmScriptingBvpScriptEngines , accept);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void comDayCqWcmUndoUndoConfigTest() throws Exception {
        Boolean post = null;
        Boolean apply = null;
        Boolean delete = null;
        String action = null;
        String $location = null;
        List<String> propertylist = null;
        Boolean cqWcmUndoEnabled = null;
        String cqWcmUndoPath = null;
        Integer cqWcmUndoValidity = null;
        Integer cqWcmUndoSteps = null;
        String cqWcmUndoPersistence = null;
        Boolean cqWcmUndoPersistenceMode = null;
        String cqWcmUndoMarkermode = null;
        List<String> cqWcmUndoWhitelist = null;
        List<String> cqWcmUndoBlacklist = null;
    ResponseEntity<ComDayCqWcmUndoUndoConfigInfo> response = api.comDayCqWcmUndoUndoConfig(post, apply, delete, action, $location, propertylist, cqWcmUndoEnabled, cqWcmUndoPath, cqWcmUndoValidity, cqWcmUndoSteps, cqWcmUndoPersistence, cqWcmUndoPersistenceMode, cqWcmUndoMarkermode, cqWcmUndoWhitelist, cqWcmUndoBlacklist , accept);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void comDayCqWcmWebservicesupportImplReplicationEventListenerTest() throws Exception {
        Boolean post = null;
        Boolean apply = null;
        Boolean delete = null;
        String action = null;
        String $location = null;
        List<String> propertylist = null;
        List<String> flushAgents = null;
    ResponseEntity<ComDayCqWcmWebservicesupportImplReplicationEventListenerInfo> response = api.comDayCqWcmWebservicesupportImplReplicationEventListener(post, apply, delete, action, $location, propertylist, flushAgents , accept);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void comDayCqWcmWorkflowImplWcmWorkflowServiceImplTest() throws Exception {
        Boolean post = null;
        Boolean apply = null;
        Boolean delete = null;
        String action = null;
        String $location = null;
        List<String> propertylist = null;
        String eventFilter = null;
        Integer minThreadPoolSize = null;
        Integer maxThreadPoolSize = null;
        Boolean cqWcmWorkflowTerminateOnActivate = null;
        List<String> cqWcmWorklfowTerminateExclusionList = null;
    ResponseEntity<ComDayCqWcmWorkflowImplWcmWorkflowServiceImplInfo> response = api.comDayCqWcmWorkflowImplWcmWorkflowServiceImpl(post, apply, delete, action, $location, propertylist, eventFilter, minThreadPoolSize, maxThreadPoolSize, cqWcmWorkflowTerminateOnActivate, cqWcmWorklfowTerminateExclusionList , accept);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void comDayCqWcmWorkflowImplWorkflowPackageInfoProviderTest() throws Exception {
        Boolean post = null;
        Boolean apply = null;
        Boolean delete = null;
        String action = null;
        String $location = null;
        List<String> propertylist = null;
        List<String> workflowpackageinfoproviderFilter = null;
        String workflowpackageinfoproviderFilterRootpath = null;
    ResponseEntity<ComDayCqWcmWorkflowImplWorkflowPackageInfoProviderInfo> response = api.comDayCqWcmWorkflowImplWorkflowPackageInfoProvider(post, apply, delete, action, $location, propertylist, workflowpackageinfoproviderFilter, workflowpackageinfoproviderFilterRootpath , accept);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void comDayCqWidgetImplHtmlLibraryManagerImplTest() throws Exception {
        Boolean post = null;
        Boolean apply = null;
        Boolean delete = null;
        String action = null;
        String $location = null;
        List<String> propertylist = null;
        String htmllibmanagerClientmanager = null;
        Boolean htmllibmanagerDebug = null;
        Boolean htmllibmanagerDebugConsole = null;
        String htmllibmanagerDebugInitJs = null;
        String htmllibmanagerDefaultthemename = null;
        String htmllibmanagerDefaultuserthemename = null;
        String htmllibmanagerFirebuglitePath = null;
        Boolean htmllibmanagerForceCQUrlInfo = null;
        Boolean htmllibmanagerGzip = null;
        Integer htmllibmanagerMaxage = null;
        Integer htmllibmanagerMaxDataUriSize = null;
        Boolean htmllibmanagerMinify = null;
        List<String> htmllibmanagerPathList = null;
        Boolean htmllibmanagerTiming = null;
    ResponseEntity<ComDayCqWidgetImplHtmlLibraryManagerImplInfo> response = api.comDayCqWidgetImplHtmlLibraryManagerImpl(post, apply, delete, action, $location, propertylist, htmllibmanagerClientmanager, htmllibmanagerDebug, htmllibmanagerDebugConsole, htmllibmanagerDebugInitJs, htmllibmanagerDefaultthemename, htmllibmanagerDefaultuserthemename, htmllibmanagerFirebuglitePath, htmllibmanagerForceCQUrlInfo, htmllibmanagerGzip, htmllibmanagerMaxage, htmllibmanagerMaxDataUriSize, htmllibmanagerMinify, htmllibmanagerPathList, htmllibmanagerTiming , accept);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void comDayCqWidgetImplWidgetExtensionProviderImplTest() throws Exception {
        Boolean post = null;
        Boolean apply = null;
        Boolean delete = null;
        String action = null;
        String $location = null;
        List<String> propertylist = null;
        List<String> extendableWidgets = null;
        Boolean widgetextensionproviderDebug = null;
    ResponseEntity<ComDayCqWidgetImplWidgetExtensionProviderImplInfo> response = api.comDayCqWidgetImplWidgetExtensionProviderImpl(post, apply, delete, action, $location, propertylist, extendableWidgets, widgetextensionproviderDebug , accept);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void comDayCqWorkflowImplEmailEMailNotificationServiceTest() throws Exception {
        Boolean post = null;
        Boolean apply = null;
        Boolean delete = null;
        String action = null;
        String $location = null;
        List<String> propertylist = null;
        String fromAddress = null;
        String hostPrefix = null;
        Boolean notifyOnabort = null;
        Boolean notifyOncomplete = null;
        Boolean notifyOncontainercomplete = null;
        Boolean notifyUseronly = null;
    ResponseEntity<ComDayCqWorkflowImplEmailEMailNotificationServiceInfo> response = api.comDayCqWorkflowImplEmailEMailNotificationService(post, apply, delete, action, $location, propertylist, fromAddress, hostPrefix, notifyOnabort, notifyOncomplete, notifyOncontainercomplete, notifyUseronly , accept);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void comDayCqWorkflowImplEmailTaskEMailNotificationServiceTest() throws Exception {
        Boolean post = null;
        Boolean apply = null;
        Boolean delete = null;
        String action = null;
        String $location = null;
        List<String> propertylist = null;
        Boolean notifyOnupdate = null;
        Boolean notifyOncomplete = null;
    ResponseEntity<ComDayCqWorkflowImplEmailTaskEMailNotificationServiceInfo> response = api.comDayCqWorkflowImplEmailTaskEMailNotificationService(post, apply, delete, action, $location, propertylist, notifyOnupdate, notifyOncomplete , accept);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void comDayCrxSecurityTokenImplImplTokenAuthenticationHandlerTest() throws Exception {
        Boolean post = null;
        Boolean apply = null;
        Boolean delete = null;
        String action = null;
        String $location = null;
        List<String> propertylist = null;
        String path = null;
        String tokenRequiredAttr = null;
        String tokenAlternateUrl = null;
        Boolean tokenEncapsulated = null;
        List<String> skipTokenRefresh = null;
    ResponseEntity<ComDayCrxSecurityTokenImplImplTokenAuthenticationHandlerInfo> response = api.comDayCrxSecurityTokenImplImplTokenAuthenticationHandler(post, apply, delete, action, $location, propertylist, path, tokenRequiredAttr, tokenAlternateUrl, tokenEncapsulated, skipTokenRefresh , accept);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void comDayCrxSecurityTokenImplTokenCleanupTaskTest() throws Exception {
        Boolean post = null;
        Boolean apply = null;
        Boolean delete = null;
        String action = null;
        String $location = null;
        List<String> propertylist = null;
        Boolean enableTokenCleanupTask = null;
        String schedulerExpression = null;
        Integer batchSize = null;
    ResponseEntity<ComDayCrxSecurityTokenImplTokenCleanupTaskInfo> response = api.comDayCrxSecurityTokenImplTokenCleanupTask(post, apply, delete, action, $location, propertylist, enableTokenCleanupTask, schedulerExpression, batchSize , accept);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void guideLocalizationServiceTest() throws Exception {
        Boolean post = null;
        Boolean apply = null;
        Boolean delete = null;
        String action = null;
        String $location = null;
        List<String> propertylist = null;
        List<String> supportedLocales = null;
        List<String> localizableProperties = null;
    ResponseEntity<GuideLocalizationServiceInfo> response = api.guideLocalizationService(post, apply, delete, action, $location, propertylist, supportedLocales, localizableProperties , accept);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void messagingUserComponentFactoryTest() throws Exception {
        Boolean post = null;
        Boolean apply = null;
        Boolean delete = null;
        String action = null;
        String $location = null;
        List<String> propertylist = null;
        Integer priority = null;
    ResponseEntity<MessagingUserComponentFactoryInfo> response = api.messagingUserComponentFactory(post, apply, delete, action, $location, propertylist, priority , accept);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void orgApacheAriesJmxFrameworkStateConfigTest() throws Exception {
        Boolean post = null;
        Boolean apply = null;
        Boolean delete = null;
        String action = null;
        String $location = null;
        List<String> propertylist = null;
        Boolean attributeChangeNotificationEnabled = null;
    ResponseEntity<OrgApacheAriesJmxFrameworkStateConfigInfo> response = api.orgApacheAriesJmxFrameworkStateConfig(post, apply, delete, action, $location, propertylist, attributeChangeNotificationEnabled , accept);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void orgApacheFelixEventadminImplEventAdminTest() throws Exception {
        Boolean post = null;
        Boolean apply = null;
        Boolean delete = null;
        String action = null;
        String $location = null;
        List<String> propertylist = null;
        Integer orgApacheFelixEventadminThreadPoolSize = null;
        BigDecimal orgApacheFelixEventadminAsyncToSyncThreadRatio = null;
        Integer orgApacheFelixEventadminTimeout = null;
        Boolean orgApacheFelixEventadminRequireTopic = null;
        List<String> orgApacheFelixEventadminIgnoreTimeout = null;
        List<String> orgApacheFelixEventadminIgnoreTopic = null;
    ResponseEntity<OrgApacheFelixEventadminImplEventAdminInfo> response = api.orgApacheFelixEventadminImplEventAdmin(post, apply, delete, action, $location, propertylist, orgApacheFelixEventadminThreadPoolSize, orgApacheFelixEventadminAsyncToSyncThreadRatio, orgApacheFelixEventadminTimeout, orgApacheFelixEventadminRequireTopic, orgApacheFelixEventadminIgnoreTimeout, orgApacheFelixEventadminIgnoreTopic , accept);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void orgApacheFelixHttpTest() throws Exception {
        Boolean post = null;
        Boolean apply = null;
        Boolean delete = null;
        String action = null;
        String $location = null;
        List<String> propertylist = null;
        String orgApacheFelixHttpHost = null;
        Boolean orgApacheFelixHttpEnable = null;
        Integer orgOsgiServiceHttpPort = null;
        Integer orgApacheFelixHttpTimeout = null;
        Boolean orgApacheFelixHttpsEnable = null;
        Integer orgOsgiServiceHttpPortSecure = null;
        String orgApacheFelixHttpsKeystore = null;
        String orgApacheFelixHttpsKeystorePassword = null;
        String orgApacheFelixHttpsKeystoreKeyPassword = null;
        String orgApacheFelixHttpsTruststore = null;
        String orgApacheFelixHttpsTruststorePassword = null;
        String orgApacheFelixHttpsClientcertificate = null;
        String orgApacheFelixHttpContextPath = null;
        Boolean orgApacheFelixHttpMbeans = null;
        Integer orgApacheFelixHttpSessionTimeout = null;
        Integer orgApacheFelixHttpJettyThreadpoolMax = null;
        Integer orgApacheFelixHttpJettyAcceptors = null;
        Integer orgApacheFelixHttpJettySelectors = null;
        Integer orgApacheFelixHttpJettyHeaderBufferSize = null;
        Integer orgApacheFelixHttpJettyRequestBufferSize = null;
        Integer orgApacheFelixHttpJettyResponseBufferSize = null;
        Integer orgApacheFelixHttpJettyMaxFormSize = null;
        List<String> orgApacheFelixHttpPathExclusions = null;
        List<String> orgApacheFelixHttpsJettyCiphersuitesExcluded = null;
        List<String> orgApacheFelixHttpsJettyCiphersuitesIncluded = null;
        Boolean orgApacheFelixHttpJettySendServerHeader = null;
        List<String> orgApacheFelixHttpsJettyProtocolsIncluded = null;
        List<String> orgApacheFelixHttpsJettyProtocolsExcluded = null;
        Boolean orgApacheFelixProxyLoadBalancerConnectionEnable = null;
        Boolean orgApacheFelixHttpsJettyRenegotiateAllowed = null;
        Boolean orgApacheFelixHttpsJettySessionCookieHttpOnly = null;
        Boolean orgApacheFelixHttpsJettySessionCookieSecure = null;
        String orgEclipseJettyServletSessionIdPathParameterName = null;
        Boolean orgEclipseJettyServletCheckingRemoteSessionIdEncoding = null;
        String orgEclipseJettyServletSessionCookie = null;
        String orgEclipseJettyServletSessionDomain = null;
        String orgEclipseJettyServletSessionPath = null;
        Integer orgEclipseJettyServletMaxAge = null;
        String orgApacheFelixHttpName = null;
        Boolean orgApacheFelixJettyGziphandlerEnable = null;
        Integer orgApacheFelixJettyGzipMinGzipSize = null;
        Integer orgApacheFelixJettyGzipCompressionLevel = null;
        Integer orgApacheFelixJettyGzipInflateBufferSize = null;
        Boolean orgApacheFelixJettyGzipSyncFlush = null;
        List<String> orgApacheFelixJettyGzipExcludedUserAgents = null;
        List<String> orgApacheFelixJettyGzipIncludedMethods = null;
        List<String> orgApacheFelixJettyGzipExcludedMethods = null;
        List<String> orgApacheFelixJettyGzipIncludedPaths = null;
        List<String> orgApacheFelixJettyGzipExcludedPaths = null;
        List<String> orgApacheFelixJettyGzipIncludedMimeTypes = null;
        List<String> orgApacheFelixJettyGzipExcludedMimeTypes = null;
        Boolean orgApacheFelixHttpSessionInvalidate = null;
        Boolean orgApacheFelixHttpSessionUniqueid = null;
    ResponseEntity<OrgApacheFelixHttpInfo> response = api.orgApacheFelixHttp(post, apply, delete, action, $location, propertylist, orgApacheFelixHttpHost, orgApacheFelixHttpEnable, orgOsgiServiceHttpPort, orgApacheFelixHttpTimeout, orgApacheFelixHttpsEnable, orgOsgiServiceHttpPortSecure, orgApacheFelixHttpsKeystore, orgApacheFelixHttpsKeystorePassword, orgApacheFelixHttpsKeystoreKeyPassword, orgApacheFelixHttpsTruststore, orgApacheFelixHttpsTruststorePassword, orgApacheFelixHttpsClientcertificate, orgApacheFelixHttpContextPath, orgApacheFelixHttpMbeans, orgApacheFelixHttpSessionTimeout, orgApacheFelixHttpJettyThreadpoolMax, orgApacheFelixHttpJettyAcceptors, orgApacheFelixHttpJettySelectors, orgApacheFelixHttpJettyHeaderBufferSize, orgApacheFelixHttpJettyRequestBufferSize, orgApacheFelixHttpJettyResponseBufferSize, orgApacheFelixHttpJettyMaxFormSize, orgApacheFelixHttpPathExclusions, orgApacheFelixHttpsJettyCiphersuitesExcluded, orgApacheFelixHttpsJettyCiphersuitesIncluded, orgApacheFelixHttpJettySendServerHeader, orgApacheFelixHttpsJettyProtocolsIncluded, orgApacheFelixHttpsJettyProtocolsExcluded, orgApacheFelixProxyLoadBalancerConnectionEnable, orgApacheFelixHttpsJettyRenegotiateAllowed, orgApacheFelixHttpsJettySessionCookieHttpOnly, orgApacheFelixHttpsJettySessionCookieSecure, orgEclipseJettyServletSessionIdPathParameterName, orgEclipseJettyServletCheckingRemoteSessionIdEncoding, orgEclipseJettyServletSessionCookie, orgEclipseJettyServletSessionDomain, orgEclipseJettyServletSessionPath, orgEclipseJettyServletMaxAge, orgApacheFelixHttpName, orgApacheFelixJettyGziphandlerEnable, orgApacheFelixJettyGzipMinGzipSize, orgApacheFelixJettyGzipCompressionLevel, orgApacheFelixJettyGzipInflateBufferSize, orgApacheFelixJettyGzipSyncFlush, orgApacheFelixJettyGzipExcludedUserAgents, orgApacheFelixJettyGzipIncludedMethods, orgApacheFelixJettyGzipExcludedMethods, orgApacheFelixJettyGzipIncludedPaths, orgApacheFelixJettyGzipExcludedPaths, orgApacheFelixJettyGzipIncludedMimeTypes, orgApacheFelixJettyGzipExcludedMimeTypes, orgApacheFelixHttpSessionInvalidate, orgApacheFelixHttpSessionUniqueid , accept);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void orgApacheFelixHttpSslfilterSslFilterTest() throws Exception {
        Boolean post = null;
        Boolean apply = null;
        Boolean delete = null;
        String action = null;
        String $location = null;
        List<String> propertylist = null;
        String sslForwardHeader = null;
        String sslForwardValue = null;
        String sslForwardCertHeader = null;
        Boolean rewriteAbsoluteUrls = null;
    ResponseEntity<OrgApacheFelixHttpSslfilterSslFilterInfo> response = api.orgApacheFelixHttpSslfilterSslFilter(post, apply, delete, action, $location, propertylist, sslForwardHeader, sslForwardValue, sslForwardCertHeader, rewriteAbsoluteUrls , accept);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void orgApacheFelixJaasConfigurationFactoryTest() throws Exception {
        Boolean post = null;
        Boolean apply = null;
        Boolean delete = null;
        String action = null;
        String $location = null;
        List<String> propertylist = null;
        String jaasControlFlag = null;
        Integer jaasRanking = null;
        String jaasRealmName = null;
        String jaasClassname = null;
        List<String> jaasOptions = null;
    ResponseEntity<OrgApacheFelixJaasConfigurationFactoryInfo> response = api.orgApacheFelixJaasConfigurationFactory(post, apply, delete, action, $location, propertylist, jaasControlFlag, jaasRanking, jaasRealmName, jaasClassname, jaasOptions , accept);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void orgApacheFelixJaasConfigurationSpiTest() throws Exception {
        Boolean post = null;
        Boolean apply = null;
        Boolean delete = null;
        String action = null;
        String $location = null;
        List<String> propertylist = null;
        String jaasDefaultRealmName = null;
        String jaasConfigProviderName = null;
        String jaasGlobalConfigPolicy = null;
    ResponseEntity<OrgApacheFelixJaasConfigurationSpiInfo> response = api.orgApacheFelixJaasConfigurationSpi(post, apply, delete, action, $location, propertylist, jaasDefaultRealmName, jaasConfigProviderName, jaasGlobalConfigPolicy , accept);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void orgApacheFelixScrScrServiceTest() throws Exception {
        Boolean post = null;
        Boolean apply = null;
        Boolean delete = null;
        String action = null;
        String $location = null;
        List<String> propertylist = null;
        Integer dsLoglevel = null;
        Boolean dsFactoryEnabled = null;
        Boolean dsDelayedKeepInstances = null;
        Integer dsLockTimeoutMilliseconds = null;
        Integer dsStopTimeoutMilliseconds = null;
        Boolean dsGlobalExtender = null;
    ResponseEntity<OrgApacheFelixScrScrServiceInfo> response = api.orgApacheFelixScrScrService(post, apply, delete, action, $location, propertylist, dsLoglevel, dsFactoryEnabled, dsDelayedKeepInstances, dsLockTimeoutMilliseconds, dsStopTimeoutMilliseconds, dsGlobalExtender , accept);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void orgApacheFelixSystemreadyImplComponentsCheckTest() throws Exception {
        Boolean post = null;
        Boolean apply = null;
        Boolean delete = null;
        String action = null;
        String $location = null;
        List<String> propertylist = null;
        List<String> componentsList = null;
        String type = null;
    ResponseEntity<OrgApacheFelixSystemreadyImplComponentsCheckInfo> response = api.orgApacheFelixSystemreadyImplComponentsCheck(post, apply, delete, action, $location, propertylist, componentsList, type , accept);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void orgApacheFelixSystemreadyImplFrameworkStartCheckTest() throws Exception {
        Boolean post = null;
        Boolean apply = null;
        Boolean delete = null;
        String action = null;
        String $location = null;
        List<String> propertylist = null;
        Integer timeout = null;
        Integer targetStartLevel = null;
        String targetStartLevelPropName = null;
        String type = null;
    ResponseEntity<OrgApacheFelixSystemreadyImplFrameworkStartCheckInfo> response = api.orgApacheFelixSystemreadyImplFrameworkStartCheck(post, apply, delete, action, $location, propertylist, timeout, targetStartLevel, targetStartLevelPropName, type , accept);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void orgApacheFelixSystemreadyImplServicesCheckTest() throws Exception {
        Boolean post = null;
        Boolean apply = null;
        Boolean delete = null;
        String action = null;
        String $location = null;
        List<String> propertylist = null;
        List<String> servicesList = null;
        String type = null;
    ResponseEntity<OrgApacheFelixSystemreadyImplServicesCheckInfo> response = api.orgApacheFelixSystemreadyImplServicesCheck(post, apply, delete, action, $location, propertylist, servicesList, type , accept);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void orgApacheFelixSystemreadyImplServletSystemAliveServletTest() throws Exception {
        Boolean post = null;
        Boolean apply = null;
        Boolean delete = null;
        String action = null;
        String $location = null;
        List<String> propertylist = null;
        String osgiHttpWhiteboardServletPattern = null;
        String osgiHttpWhiteboardContextSelect = null;
    ResponseEntity<OrgApacheFelixSystemreadyImplServletSystemAliveServletInfo> response = api.orgApacheFelixSystemreadyImplServletSystemAliveServlet(post, apply, delete, action, $location, propertylist, osgiHttpWhiteboardServletPattern, osgiHttpWhiteboardContextSelect , accept);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void orgApacheFelixSystemreadyImplServletSystemReadyServletTest() throws Exception {
        Boolean post = null;
        Boolean apply = null;
        Boolean delete = null;
        String action = null;
        String $location = null;
        List<String> propertylist = null;
        String osgiHttpWhiteboardServletPattern = null;
        String osgiHttpWhiteboardContextSelect = null;
    ResponseEntity<OrgApacheFelixSystemreadyImplServletSystemReadyServletInfo> response = api.orgApacheFelixSystemreadyImplServletSystemReadyServlet(post, apply, delete, action, $location, propertylist, osgiHttpWhiteboardServletPattern, osgiHttpWhiteboardContextSelect , accept);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void orgApacheFelixSystemreadySystemReadyMonitorTest() throws Exception {
        Boolean post = null;
        Boolean apply = null;
        Boolean delete = null;
        String action = null;
        String $location = null;
        List<String> propertylist = null;
        Integer pollInterval = null;
    ResponseEntity<OrgApacheFelixSystemreadySystemReadyMonitorInfo> response = api.orgApacheFelixSystemreadySystemReadyMonitor(post, apply, delete, action, $location, propertylist, pollInterval , accept);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void orgApacheFelixWebconsoleInternalServletOsgiManagerTest() throws Exception {
        Boolean post = null;
        Boolean apply = null;
        Boolean delete = null;
        String action = null;
        String $location = null;
        List<String> propertylist = null;
        String managerRoot = null;
        String httpServiceFilter = null;
        String defaultRender = null;
        String realm = null;
        String username = null;
        String password = null;
        String category = null;
        String locale = null;
        Integer loglevel = null;
        String plugins = null;
    ResponseEntity<OrgApacheFelixWebconsoleInternalServletOsgiManagerInfo> response = api.orgApacheFelixWebconsoleInternalServletOsgiManager(post, apply, delete, action, $location, propertylist, managerRoot, httpServiceFilter, defaultRender, realm, username, password, category, locale, loglevel, plugins , accept);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void orgApacheFelixWebconsolePluginsEventInternalPluginServletTest() throws Exception {
        Boolean post = null;
        Boolean apply = null;
        Boolean delete = null;
        String action = null;
        String $location = null;
        List<String> propertylist = null;
        Integer maxSize = null;
    ResponseEntity<OrgApacheFelixWebconsolePluginsEventInternalPluginServletInfo> response = api.orgApacheFelixWebconsolePluginsEventInternalPluginServlet(post, apply, delete, action, $location, propertylist, maxSize , accept);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void orgApacheFelixWebconsolePluginsMemoryusageInternalMemoryUsageCoTest() throws Exception {
        Boolean post = null;
        Boolean apply = null;
        Boolean delete = null;
        String action = null;
        String $location = null;
        List<String> propertylist = null;
        Integer felixMemoryusageDumpThreshold = null;
        Integer felixMemoryusageDumpInterval = null;
        String felixMemoryusageDumpLocation = null;
    ResponseEntity<OrgApacheFelixWebconsolePluginsMemoryusageInternalMemoryUsageCoInfo> response = api.orgApacheFelixWebconsolePluginsMemoryusageInternalMemoryUsageCo(post, apply, delete, action, $location, propertylist, felixMemoryusageDumpThreshold, felixMemoryusageDumpInterval, felixMemoryusageDumpLocation , accept);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void orgApacheHttpProxyconfiguratorTest() throws Exception {
        Boolean post = null;
        Boolean apply = null;
        Boolean delete = null;
        String action = null;
        String $location = null;
        List<String> propertylist = null;
        Boolean proxyEnabled = null;
        String proxyHost = null;
        Integer proxyPort = null;
        String proxyUser = null;
        String proxyPassword = null;
        List<String> proxyExceptions = null;
    ResponseEntity<OrgApacheHttpProxyconfiguratorInfo> response = api.orgApacheHttpProxyconfigurator(post, apply, delete, action, $location, propertylist, proxyEnabled, proxyHost, proxyPort, proxyUser, proxyPassword, proxyExceptions , accept);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void orgApacheJackrabbitOakPluginsBlobDatastoreDataStoreTextProviderTest() throws Exception {
        Boolean post = null;
        Boolean apply = null;
        Boolean delete = null;
        String action = null;
        String $location = null;
        List<String> propertylist = null;
        String dir = null;
    ResponseEntity<OrgApacheJackrabbitOakPluginsBlobDatastoreDataStoreTextProviderInfo> response = api.orgApacheJackrabbitOakPluginsBlobDatastoreDataStoreTextProvider(post, apply, delete, action, $location, propertylist, dir , accept);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void orgApacheJackrabbitOakPluginsBlobDatastoreFileDataStoreTest() throws Exception {
        Boolean post = null;
        Boolean apply = null;
        Boolean delete = null;
        String action = null;
        String $location = null;
        List<String> propertylist = null;
        String path = null;
    ResponseEntity<OrgApacheJackrabbitOakPluginsBlobDatastoreFileDataStoreInfo> response = api.orgApacheJackrabbitOakPluginsBlobDatastoreFileDataStore(post, apply, delete, action, $location, propertylist, path , accept);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void orgApacheJackrabbitOakPluginsDocumentDocumentNodeStoreServiceTest() throws Exception {
        Boolean post = null;
        Boolean apply = null;
        Boolean delete = null;
        String action = null;
        String $location = null;
        List<String> propertylist = null;
        String mongouri = null;
        String db = null;
        Boolean socketKeepAlive = null;
        Integer cache = null;
        Integer nodeCachePercentage = null;
        Integer prevDocCachePercentage = null;
        Integer childrenCachePercentage = null;
        Integer diffCachePercentage = null;
        Integer cacheSegmentCount = null;
        Integer cacheStackMoveDistance = null;
        Integer blobCacheSize = null;
        String persistentCache = null;
        String journalCache = null;
        Boolean customBlobStore = null;
        Integer journalGCInterval = null;
        Integer journalGCMaxAge = null;
        Boolean prefetchExternalChanges = null;
        String role = null;
        Integer versionGcMaxAgeInSecs = null;
        String versionGCExpression = null;
        Integer versionGCTimeLimitInSecs = null;
        Integer blobGcMaxAgeInSecs = null;
        Integer blobTrackSnapshotIntervalInSecs = null;
        String repositoryHome = null;
        Integer maxReplicationLagInSecs = null;
        String documentStoreType = null;
        Boolean bundlingDisabled = null;
        Integer updateLimit = null;
        List<String> persistentCacheIncludes = null;
        String leaseCheckMode = null;
    ResponseEntity<OrgApacheJackrabbitOakPluginsDocumentDocumentNodeStoreServiceInfo> response = api.orgApacheJackrabbitOakPluginsDocumentDocumentNodeStoreService(post, apply, delete, action, $location, propertylist, mongouri, db, socketKeepAlive, cache, nodeCachePercentage, prevDocCachePercentage, childrenCachePercentage, diffCachePercentage, cacheSegmentCount, cacheStackMoveDistance, blobCacheSize, persistentCache, journalCache, customBlobStore, journalGCInterval, journalGCMaxAge, prefetchExternalChanges, role, versionGcMaxAgeInSecs, versionGCExpression, versionGCTimeLimitInSecs, blobGcMaxAgeInSecs, blobTrackSnapshotIntervalInSecs, repositoryHome, maxReplicationLagInSecs, documentStoreType, bundlingDisabled, updateLimit, persistentCacheIncludes, leaseCheckMode , accept);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void orgApacheJackrabbitOakPluginsDocumentDocumentNodeStoreServicePreTest() throws Exception {
        Boolean post = null;
        Boolean apply = null;
        Boolean delete = null;
        String action = null;
        String $location = null;
        List<String> propertylist = null;
        List<String> persistentCacheIncludes = null;
    ResponseEntity<OrgApacheJackrabbitOakPluginsDocumentDocumentNodeStoreServicePreInfo> response = api.orgApacheJackrabbitOakPluginsDocumentDocumentNodeStoreServicePre(post, apply, delete, action, $location, propertylist, persistentCacheIncludes , accept);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void orgApacheJackrabbitOakPluginsDocumentSecondarySecondaryStoreCacTest() throws Exception {
        Boolean post = null;
        Boolean apply = null;
        Boolean delete = null;
        String action = null;
        String $location = null;
        List<String> propertylist = null;
        List<String> includedPaths = null;
        Boolean enableAsyncObserver = null;
        Integer observerQueueSize = null;
    ResponseEntity<OrgApacheJackrabbitOakPluginsDocumentSecondarySecondaryStoreCacInfo> response = api.orgApacheJackrabbitOakPluginsDocumentSecondarySecondaryStoreCac(post, apply, delete, action, $location, propertylist, includedPaths, enableAsyncObserver, observerQueueSize , accept);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void orgApacheJackrabbitOakPluginsIndexAsyncIndexerServiceTest() throws Exception {
        Boolean post = null;
        Boolean apply = null;
        Boolean delete = null;
        String action = null;
        String $location = null;
        List<String> propertylist = null;
        List<String> asyncConfigs = null;
        Integer leaseTimeOutMinutes = null;
        Integer failingIndexTimeoutSeconds = null;
        Integer errorWarnIntervalSeconds = null;
    ResponseEntity<OrgApacheJackrabbitOakPluginsIndexAsyncIndexerServiceInfo> response = api.orgApacheJackrabbitOakPluginsIndexAsyncIndexerService(post, apply, delete, action, $location, propertylist, asyncConfigs, leaseTimeOutMinutes, failingIndexTimeoutSeconds, errorWarnIntervalSeconds , accept);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void orgApacheJackrabbitOakPluginsIndexLuceneLuceneIndexProviderServTest() throws Exception {
        Boolean post = null;
        Boolean apply = null;
        Boolean delete = null;
        String action = null;
        String $location = null;
        List<String> propertylist = null;
        Boolean disabled = null;
        Boolean debug = null;
        String localIndexDir = null;
        Boolean enableOpenIndexAsync = null;
        Integer threadPoolSize = null;
        Boolean prefetchIndexFiles = null;
        Integer extractedTextCacheSizeInMB = null;
        Integer extractedTextCacheExpiryInSecs = null;
        Boolean alwaysUsePreExtractedCache = null;
        Integer booleanClauseLimit = null;
        Boolean enableHybridIndexing = null;
        Integer hybridQueueSize = null;
        Boolean disableStoredIndexDefinition = null;
        Boolean deletedBlobsCollectionEnabled = null;
        Integer propIndexCleanerIntervalInSecs = null;
        Boolean enableSingleBlobIndexFiles = null;
    ResponseEntity<OrgApacheJackrabbitOakPluginsIndexLuceneLuceneIndexProviderServInfo> response = api.orgApacheJackrabbitOakPluginsIndexLuceneLuceneIndexProviderServ(post, apply, delete, action, $location, propertylist, disabled, debug, localIndexDir, enableOpenIndexAsync, threadPoolSize, prefetchIndexFiles, extractedTextCacheSizeInMB, extractedTextCacheExpiryInSecs, alwaysUsePreExtractedCache, booleanClauseLimit, enableHybridIndexing, hybridQueueSize, disableStoredIndexDefinition, deletedBlobsCollectionEnabled, propIndexCleanerIntervalInSecs, enableSingleBlobIndexFiles , accept);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void orgApacheJackrabbitOakPluginsIndexSolrOsgiEmbeddedSolrServerCoTest() throws Exception {
        Boolean post = null;
        Boolean apply = null;
        Boolean delete = null;
        String action = null;
        String $location = null;
        List<String> propertylist = null;
        String solrHomePath = null;
        String solrCoreName = null;
    ResponseEntity<OrgApacheJackrabbitOakPluginsIndexSolrOsgiEmbeddedSolrServerCoInfo> response = api.orgApacheJackrabbitOakPluginsIndexSolrOsgiEmbeddedSolrServerCo(post, apply, delete, action, $location, propertylist, solrHomePath, solrCoreName , accept);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void orgApacheJackrabbitOakPluginsIndexSolrOsgiNodeStateSolrServersTest() throws Exception {
        Boolean post = null;
        Boolean apply = null;
        Boolean delete = null;
        String action = null;
        String $location = null;
        List<String> propertylist = null;
        Boolean enabled = null;
    ResponseEntity<OrgApacheJackrabbitOakPluginsIndexSolrOsgiNodeStateSolrServersInfo> response = api.orgApacheJackrabbitOakPluginsIndexSolrOsgiNodeStateSolrServers(post, apply, delete, action, $location, propertylist, enabled , accept);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void orgApacheJackrabbitOakPluginsIndexSolrOsgiOakSolrConfigurationTest() throws Exception {
        Boolean post = null;
        Boolean apply = null;
        Boolean delete = null;
        String action = null;
        String $location = null;
        List<String> propertylist = null;
        String pathDescField = null;
        String pathChildField = null;
        String pathParentField = null;
        String pathExactField = null;
        String catchAllField = null;
        String collapsedPathField = null;
        String pathDepthField = null;
        String commitPolicy = null;
        Integer rows = null;
        Boolean pathRestrictions = null;
        Boolean propertyRestrictions = null;
        Boolean primarytypesRestrictions = null;
        List<String> ignoredProperties = null;
        List<String> usedProperties = null;
        List<String> typeMappings = null;
        List<String> propertyMappings = null;
        Boolean collapseJcrcontentNodes = null;
    ResponseEntity<OrgApacheJackrabbitOakPluginsIndexSolrOsgiOakSolrConfigurationInfo> response = api.orgApacheJackrabbitOakPluginsIndexSolrOsgiOakSolrConfiguration(post, apply, delete, action, $location, propertylist, pathDescField, pathChildField, pathParentField, pathExactField, catchAllField, collapsedPathField, pathDepthField, commitPolicy, rows, pathRestrictions, propertyRestrictions, primarytypesRestrictions, ignoredProperties, usedProperties, typeMappings, propertyMappings, collapseJcrcontentNodes , accept);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void orgApacheJackrabbitOakPluginsIndexSolrOsgiRemoteSolrServerConfTest() throws Exception {
        Boolean post = null;
        Boolean apply = null;
        Boolean delete = null;
        String action = null;
        String $location = null;
        List<String> propertylist = null;
        String solrHttpUrl = null;
        String solrZkHost = null;
        String solrCollection = null;
        Integer solrSocketTimeout = null;
        Integer solrConnectionTimeout = null;
        Integer solrShardsNo = null;
        Integer solrReplicationFactor = null;
        String solrConfDir = null;
    ResponseEntity<OrgApacheJackrabbitOakPluginsIndexSolrOsgiRemoteSolrServerConfInfo> response = api.orgApacheJackrabbitOakPluginsIndexSolrOsgiRemoteSolrServerConf(post, apply, delete, action, $location, propertylist, solrHttpUrl, solrZkHost, solrCollection, solrSocketTimeout, solrConnectionTimeout, solrShardsNo, solrReplicationFactor, solrConfDir , accept);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void orgApacheJackrabbitOakPluginsIndexSolrOsgiSolrQueryIndexProvidTest() throws Exception {
        Boolean post = null;
        Boolean apply = null;
        Boolean delete = null;
        String action = null;
        String $location = null;
        List<String> propertylist = null;
        Boolean queryAggregation = null;
    ResponseEntity<OrgApacheJackrabbitOakPluginsIndexSolrOsgiSolrQueryIndexProvidInfo> response = api.orgApacheJackrabbitOakPluginsIndexSolrOsgiSolrQueryIndexProvid(post, apply, delete, action, $location, propertylist, queryAggregation , accept);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void orgApacheJackrabbitOakPluginsIndexSolrOsgiSolrServerProviderSeTest() throws Exception {
        Boolean post = null;
        Boolean apply = null;
        Boolean delete = null;
        String action = null;
        String $location = null;
        List<String> propertylist = null;
        String serverType = null;
    ResponseEntity<OrgApacheJackrabbitOakPluginsIndexSolrOsgiSolrServerProviderSeInfo> response = api.orgApacheJackrabbitOakPluginsIndexSolrOsgiSolrServerProviderSe(post, apply, delete, action, $location, propertylist, serverType , accept);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void orgApacheJackrabbitOakPluginsMetricStatisticsProviderFactoryTest() throws Exception {
        Boolean post = null;
        Boolean apply = null;
        Boolean delete = null;
        String action = null;
        String $location = null;
        List<String> propertylist = null;
        String providerType = null;
    ResponseEntity<OrgApacheJackrabbitOakPluginsMetricStatisticsProviderFactoryInfo> response = api.orgApacheJackrabbitOakPluginsMetricStatisticsProviderFactory(post, apply, delete, action, $location, propertylist, providerType , accept);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void orgApacheJackrabbitOakPluginsObservationChangeCollectorProviderTest() throws Exception {
        Boolean post = null;
        Boolean apply = null;
        Boolean delete = null;
        String action = null;
        String $location = null;
        List<String> propertylist = null;
        Integer maxItems = null;
        Integer maxPathDepth = null;
        Boolean enabled = null;
    ResponseEntity<OrgApacheJackrabbitOakPluginsObservationChangeCollectorProviderInfo> response = api.orgApacheJackrabbitOakPluginsObservationChangeCollectorProvider(post, apply, delete, action, $location, propertylist, maxItems, maxPathDepth, enabled , accept);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void orgApacheJackrabbitOakQueryQueryEngineSettingsServiceTest() throws Exception {
        Boolean post = null;
        Boolean apply = null;
        Boolean delete = null;
        String action = null;
        String $location = null;
        List<String> propertylist = null;
        Integer queryLimitInMemory = null;
        Integer queryLimitReads = null;
        Boolean queryFailTraversal = null;
        Boolean fastQuerySize = null;
    ResponseEntity<OrgApacheJackrabbitOakQueryQueryEngineSettingsServiceInfo> response = api.orgApacheJackrabbitOakQueryQueryEngineSettingsService(post, apply, delete, action, $location, propertylist, queryLimitInMemory, queryLimitReads, queryFailTraversal, fastQuerySize , accept);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void orgApacheJackrabbitOakSecurityAuthenticationAuthenticationConfigTest() throws Exception {
        Boolean post = null;
        Boolean apply = null;
        Boolean delete = null;
        String action = null;
        String $location = null;
        List<String> propertylist = null;
        String orgApacheJackrabbitOakAuthenticationAppName = null;
        String orgApacheJackrabbitOakAuthenticationConfigSpiName = null;
    ResponseEntity<OrgApacheJackrabbitOakSecurityAuthenticationAuthenticationConfigInfo> response = api.orgApacheJackrabbitOakSecurityAuthenticationAuthenticationConfig(post, apply, delete, action, $location, propertylist, orgApacheJackrabbitOakAuthenticationAppName, orgApacheJackrabbitOakAuthenticationConfigSpiName , accept);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void orgApacheJackrabbitOakSecurityAuthenticationLdapImplLdapIdentiTest() throws Exception {
        Boolean post = null;
        Boolean apply = null;
        Boolean delete = null;
        String action = null;
        String $location = null;
        List<String> propertylist = null;
        String providerName = null;
        String hostName = null;
        Integer hostPort = null;
        Boolean hostSsl = null;
        Boolean hostTls = null;
        Boolean hostNoCertCheck = null;
        String bindDn = null;
        String bindPassword = null;
        String searchTimeout = null;
        Integer adminPoolMaxActive = null;
        Boolean adminPoolLookupOnValidate = null;
        Integer userPoolMaxActive = null;
        Boolean userPoolLookupOnValidate = null;
        String userBaseDN = null;
        List<String> userObjectclass = null;
        String userIdAttribute = null;
        String userExtraFilter = null;
        Boolean userMakeDnPath = null;
        String groupBaseDN = null;
        List<String> groupObjectclass = null;
        String groupNameAttribute = null;
        String groupExtraFilter = null;
        Boolean groupMakeDnPath = null;
        String groupMemberAttribute = null;
        Boolean useUidForExtId = null;
        List<String> customattributes = null;
    ResponseEntity<OrgApacheJackrabbitOakSecurityAuthenticationLdapImplLdapIdentiInfo> response = api.orgApacheJackrabbitOakSecurityAuthenticationLdapImplLdapIdenti(post, apply, delete, action, $location, propertylist, providerName, hostName, hostPort, hostSsl, hostTls, hostNoCertCheck, bindDn, bindPassword, searchTimeout, adminPoolMaxActive, adminPoolLookupOnValidate, userPoolMaxActive, userPoolLookupOnValidate, userBaseDN, userObjectclass, userIdAttribute, userExtraFilter, userMakeDnPath, groupBaseDN, groupObjectclass, groupNameAttribute, groupExtraFilter, groupMakeDnPath, groupMemberAttribute, useUidForExtId, customattributes , accept);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void orgApacheJackrabbitOakSecurityAuthenticationTokenTokenConfiguraTest() throws Exception {
        Boolean post = null;
        Boolean apply = null;
        Boolean delete = null;
        String action = null;
        String $location = null;
        List<String> propertylist = null;
        String tokenExpiration = null;
        String tokenLength = null;
        Boolean tokenRefresh = null;
        Integer tokenCleanupThreshold = null;
        String passwordHashAlgorithm = null;
        Integer passwordHashIterations = null;
        Integer passwordSaltSize = null;
    ResponseEntity<OrgApacheJackrabbitOakSecurityAuthenticationTokenTokenConfiguraInfo> response = api.orgApacheJackrabbitOakSecurityAuthenticationTokenTokenConfigura(post, apply, delete, action, $location, propertylist, tokenExpiration, tokenLength, tokenRefresh, tokenCleanupThreshold, passwordHashAlgorithm, passwordHashIterations, passwordSaltSize , accept);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void orgApacheJackrabbitOakSecurityAuthorizationAuthorizationConfigurTest() throws Exception {
        Boolean post = null;
        Boolean apply = null;
        Boolean delete = null;
        String action = null;
        String $location = null;
        List<String> propertylist = null;
        String permissionsJr2 = null;
        String importBehavior = null;
        List<String> readPaths = null;
        List<String> administrativePrincipals = null;
        Integer configurationRanking = null;
    ResponseEntity<OrgApacheJackrabbitOakSecurityAuthorizationAuthorizationConfigurInfo> response = api.orgApacheJackrabbitOakSecurityAuthorizationAuthorizationConfigur(post, apply, delete, action, $location, propertylist, permissionsJr2, importBehavior, readPaths, administrativePrincipals, configurationRanking , accept);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void orgApacheJackrabbitOakSecurityInternalSecurityProviderRegistratiTest() throws Exception {
        Boolean post = null;
        Boolean apply = null;
        Boolean delete = null;
        String action = null;
        String $location = null;
        List<String> propertylist = null;
        List<String> requiredServicePids = null;
        String authorizationCompositionType = null;
    ResponseEntity<OrgApacheJackrabbitOakSecurityInternalSecurityProviderRegistratiInfo> response = api.orgApacheJackrabbitOakSecurityInternalSecurityProviderRegistrati(post, apply, delete, action, $location, propertylist, requiredServicePids, authorizationCompositionType , accept);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void orgApacheJackrabbitOakSecurityUserRandomAuthorizableNodeNameTest() throws Exception {
        Boolean post = null;
        Boolean apply = null;
        Boolean delete = null;
        String action = null;
        String $location = null;
        List<String> propertylist = null;
        Integer length = null;
    ResponseEntity<OrgApacheJackrabbitOakSecurityUserRandomAuthorizableNodeNameInfo> response = api.orgApacheJackrabbitOakSecurityUserRandomAuthorizableNodeName(post, apply, delete, action, $location, propertylist, length , accept);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void orgApacheJackrabbitOakSecurityUserUserConfigurationImplTest() throws Exception {
        Boolean post = null;
        Boolean apply = null;
        Boolean delete = null;
        String action = null;
        String $location = null;
        List<String> propertylist = null;
        String usersPath = null;
        String groupsPath = null;
        String systemRelativePath = null;
        Integer defaultDepth = null;
        String importBehavior = null;
        String passwordHashAlgorithm = null;
        Integer passwordHashIterations = null;
        Integer passwordSaltSize = null;
        Boolean omitAdminPw = null;
        Boolean supportAutoSave = null;
        Integer passwordMaxAge = null;
        Boolean initialPasswordChange = null;
        Integer passwordHistorySize = null;
        Boolean passwordExpiryForAdmin = null;
        Integer cacheExpiration = null;
        Boolean enableRFC7613UsercaseMappedProfile = null;
    ResponseEntity<OrgApacheJackrabbitOakSecurityUserUserConfigurationImplInfo> response = api.orgApacheJackrabbitOakSecurityUserUserConfigurationImpl(post, apply, delete, action, $location, propertylist, usersPath, groupsPath, systemRelativePath, defaultDepth, importBehavior, passwordHashAlgorithm, passwordHashIterations, passwordSaltSize, omitAdminPw, supportAutoSave, passwordMaxAge, initialPasswordChange, passwordHistorySize, passwordExpiryForAdmin, cacheExpiration, enableRFC7613UsercaseMappedProfile , accept);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void orgApacheJackrabbitOakSegmentAzureAzureSegmentStoreServiceTest() throws Exception {
        Boolean post = null;
        Boolean apply = null;
        Boolean delete = null;
        String action = null;
        String $location = null;
        List<String> propertylist = null;
        String accountName = null;
        String containerName = null;
        String accessKey = null;
        String rootPath = null;
        String connectionURL = null;
    ResponseEntity<OrgApacheJackrabbitOakSegmentAzureAzureSegmentStoreServiceInfo> response = api.orgApacheJackrabbitOakSegmentAzureAzureSegmentStoreService(post, apply, delete, action, $location, propertylist, accountName, containerName, accessKey, rootPath, connectionURL , accept);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void orgApacheJackrabbitOakSegmentSegmentNodeStoreFactoryTest() throws Exception {
        Boolean post = null;
        Boolean apply = null;
        Boolean delete = null;
        String action = null;
        String $location = null;
        List<String> propertylist = null;
        String repositoryHome = null;
        String tarmkMode = null;
        Integer tarmkSize = null;
        Integer segmentCacheSize = null;
        Integer stringCacheSize = null;
        Integer templateCacheSize = null;
        Integer stringDeduplicationCacheSize = null;
        Integer templateDeduplicationCacheSize = null;
        Integer nodeDeduplicationCacheSize = null;
        Boolean pauseCompaction = null;
        Integer compactionRetryCount = null;
        Integer compactionForceTimeout = null;
        Integer compactionSizeDeltaEstimation = null;
        Boolean compactionDisableEstimation = null;
        Integer compactionRetainedGenerations = null;
        Integer compactionMemoryThreshold = null;
        Integer compactionProgressLog = null;
        Boolean standby = null;
        Boolean customBlobStore = null;
        Boolean customSegmentStore = null;
        Boolean splitPersistence = null;
        String repositoryBackupDir = null;
        Integer blobGcMaxAgeInSecs = null;
        Integer blobTrackSnapshotIntervalInSecs = null;
        String role = null;
        Boolean registerDescriptors = null;
        Boolean dispatchChanges = null;
    ResponseEntity<OrgApacheJackrabbitOakSegmentSegmentNodeStoreFactoryInfo> response = api.orgApacheJackrabbitOakSegmentSegmentNodeStoreFactory(post, apply, delete, action, $location, propertylist, repositoryHome, tarmkMode, tarmkSize, segmentCacheSize, stringCacheSize, templateCacheSize, stringDeduplicationCacheSize, templateDeduplicationCacheSize, nodeDeduplicationCacheSize, pauseCompaction, compactionRetryCount, compactionForceTimeout, compactionSizeDeltaEstimation, compactionDisableEstimation, compactionRetainedGenerations, compactionMemoryThreshold, compactionProgressLog, standby, customBlobStore, customSegmentStore, splitPersistence, repositoryBackupDir, blobGcMaxAgeInSecs, blobTrackSnapshotIntervalInSecs, role, registerDescriptors, dispatchChanges , accept);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void orgApacheJackrabbitOakSegmentSegmentNodeStoreMonitorServiceTest() throws Exception {
        Boolean post = null;
        Boolean apply = null;
        Boolean delete = null;
        String action = null;
        String $location = null;
        List<String> propertylist = null;
        List<String> commitsTrackerWriterGroups = null;
    ResponseEntity<OrgApacheJackrabbitOakSegmentSegmentNodeStoreMonitorServiceInfo> response = api.orgApacheJackrabbitOakSegmentSegmentNodeStoreMonitorService(post, apply, delete, action, $location, propertylist, commitsTrackerWriterGroups , accept);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void orgApacheJackrabbitOakSegmentSegmentNodeStoreServiceTest() throws Exception {
        Boolean post = null;
        Boolean apply = null;
        Boolean delete = null;
        String action = null;
        String $location = null;
        List<String> propertylist = null;
        String repositoryHome = null;
        String tarmkMode = null;
        Integer tarmkSize = null;
        Integer segmentCacheSize = null;
        Integer stringCacheSize = null;
        Integer templateCacheSize = null;
        Integer stringDeduplicationCacheSize = null;
        Integer templateDeduplicationCacheSize = null;
        Integer nodeDeduplicationCacheSize = null;
        Boolean pauseCompaction = null;
        Integer compactionRetryCount = null;
        Integer compactionForceTimeout = null;
        Integer compactionSizeDeltaEstimation = null;
        Boolean compactionDisableEstimation = null;
        Integer compactionRetainedGenerations = null;
        Integer compactionMemoryThreshold = null;
        Integer compactionProgressLog = null;
        Boolean standby = null;
        Boolean customBlobStore = null;
        Boolean customSegmentStore = null;
        Boolean splitPersistence = null;
        String repositoryBackupDir = null;
        Integer blobGcMaxAgeInSecs = null;
        Integer blobTrackSnapshotIntervalInSecs = null;
    ResponseEntity<OrgApacheJackrabbitOakSegmentSegmentNodeStoreServiceInfo> response = api.orgApacheJackrabbitOakSegmentSegmentNodeStoreService(post, apply, delete, action, $location, propertylist, repositoryHome, tarmkMode, tarmkSize, segmentCacheSize, stringCacheSize, templateCacheSize, stringDeduplicationCacheSize, templateDeduplicationCacheSize, nodeDeduplicationCacheSize, pauseCompaction, compactionRetryCount, compactionForceTimeout, compactionSizeDeltaEstimation, compactionDisableEstimation, compactionRetainedGenerations, compactionMemoryThreshold, compactionProgressLog, standby, customBlobStore, customSegmentStore, splitPersistence, repositoryBackupDir, blobGcMaxAgeInSecs, blobTrackSnapshotIntervalInSecs , accept);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void orgApacheJackrabbitOakSegmentStandbyStoreStandbyStoreServiceTest() throws Exception {
        Boolean post = null;
        Boolean apply = null;
        Boolean delete = null;
        String action = null;
        String $location = null;
        List<String> propertylist = null;
        Boolean orgApacheSlingInstallerConfigurationPersist = null;
        String mode = null;
        Integer port = null;
        String primaryHost = null;
        Integer interval = null;
        List<String> primaryAllowedClientIpRanges = null;
        Boolean secure = null;
        Integer standbyReadtimeout = null;
        Boolean standbyAutoclean = null;
    ResponseEntity<OrgApacheJackrabbitOakSegmentStandbyStoreStandbyStoreServiceInfo> response = api.orgApacheJackrabbitOakSegmentStandbyStoreStandbyStoreService(post, apply, delete, action, $location, propertylist, orgApacheSlingInstallerConfigurationPersist, mode, port, primaryHost, interval, primaryAllowedClientIpRanges, secure, standbyReadtimeout, standbyAutoclean , accept);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void orgApacheJackrabbitOakSpiSecurityAuthenticationExternalImplDeTest() throws Exception {
        Boolean post = null;
        Boolean apply = null;
        Boolean delete = null;
        String action = null;
        String $location = null;
        List<String> propertylist = null;
        String handlerName = null;
        String userExpirationTime = null;
        List<String> userAutoMembership = null;
        List<String> userPropertyMapping = null;
        String userPathPrefix = null;
        String userMembershipExpTime = null;
        Integer userMembershipNestingDepth = null;
        Boolean userDynamicMembership = null;
        Boolean userDisableMissing = null;
        String groupExpirationTime = null;
        List<String> groupAutoMembership = null;
        List<String> groupPropertyMapping = null;
        String groupPathPrefix = null;
        Boolean enableRFC7613UsercaseMappedProfile = null;
    ResponseEntity<OrgApacheJackrabbitOakSpiSecurityAuthenticationExternalImplDeInfo> response = api.orgApacheJackrabbitOakSpiSecurityAuthenticationExternalImplDe(post, apply, delete, action, $location, propertylist, handlerName, userExpirationTime, userAutoMembership, userPropertyMapping, userPathPrefix, userMembershipExpTime, userMembershipNestingDepth, userDynamicMembership, userDisableMissing, groupExpirationTime, groupAutoMembership, groupPropertyMapping, groupPathPrefix, enableRFC7613UsercaseMappedProfile , accept);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void orgApacheJackrabbitOakSpiSecurityAuthenticationExternalImplExTest() throws Exception {
        Boolean post = null;
        Boolean apply = null;
        Boolean delete = null;
        String action = null;
        String $location = null;
        List<String> propertylist = null;
        Integer jaasRanking = null;
        String jaasControlFlag = null;
        String jaasRealmName = null;
        String idpName = null;
        String syncHandlerName = null;
    ResponseEntity<OrgApacheJackrabbitOakSpiSecurityAuthenticationExternalImplExInfo> response = api.orgApacheJackrabbitOakSpiSecurityAuthenticationExternalImplEx(post, apply, delete, action, $location, propertylist, jaasRanking, jaasControlFlag, jaasRealmName, idpName, syncHandlerName , accept);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void orgApacheJackrabbitOakSpiSecurityAuthenticationExternalImplPrTest() throws Exception {
        Boolean post = null;
        Boolean apply = null;
        Boolean delete = null;
        String action = null;
        String $location = null;
        List<String> propertylist = null;
        Boolean protectExternalId = null;
    ResponseEntity<OrgApacheJackrabbitOakSpiSecurityAuthenticationExternalImplPrInfo> response = api.orgApacheJackrabbitOakSpiSecurityAuthenticationExternalImplPr(post, apply, delete, action, $location, propertylist, protectExternalId , accept);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void orgApacheJackrabbitOakSpiSecurityAuthorizationCugImplCugConfiTest() throws Exception {
        Boolean post = null;
        Boolean apply = null;
        Boolean delete = null;
        String action = null;
        String $location = null;
        List<String> propertylist = null;
        List<String> cugSupportedPaths = null;
        Boolean cugEnabled = null;
        Integer configurationRanking = null;
    ResponseEntity<OrgApacheJackrabbitOakSpiSecurityAuthorizationCugImplCugConfiInfo> response = api.orgApacheJackrabbitOakSpiSecurityAuthorizationCugImplCugConfi(post, apply, delete, action, $location, propertylist, cugSupportedPaths, cugEnabled, configurationRanking , accept);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void orgApacheJackrabbitOakSpiSecurityAuthorizationCugImplCugExcluTest() throws Exception {
        Boolean post = null;
        Boolean apply = null;
        Boolean delete = null;
        String action = null;
        String $location = null;
        List<String> propertylist = null;
        List<String> principalNames = null;
    ResponseEntity<OrgApacheJackrabbitOakSpiSecurityAuthorizationCugImplCugExcluInfo> response = api.orgApacheJackrabbitOakSpiSecurityAuthorizationCugImplCugExclu(post, apply, delete, action, $location, propertylist, principalNames , accept);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void orgApacheJackrabbitOakSpiSecurityUserActionDefaultAuthorizableTest() throws Exception {
        Boolean post = null;
        Boolean apply = null;
        Boolean delete = null;
        String action = null;
        String $location = null;
        List<String> propertylist = null;
        String enabledActions = null;
        List<String> userPrivilegeNames = null;
        List<String> groupPrivilegeNames = null;
        String constraint = null;
    ResponseEntity<OrgApacheJackrabbitOakSpiSecurityUserActionDefaultAuthorizableInfo> response = api.orgApacheJackrabbitOakSpiSecurityUserActionDefaultAuthorizable(post, apply, delete, action, $location, propertylist, enabledActions, userPrivilegeNames, groupPrivilegeNames, constraint , accept);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void orgApacheJackrabbitVaultPackagingImplPackagingImplTest() throws Exception {
        Boolean post = null;
        Boolean apply = null;
        Boolean delete = null;
        String action = null;
        String $location = null;
        List<String> propertylist = null;
        List<String> packageRoots = null;
    ResponseEntity<OrgApacheJackrabbitVaultPackagingImplPackagingImplInfo> response = api.orgApacheJackrabbitVaultPackagingImplPackagingImpl(post, apply, delete, action, $location, propertylist, packageRoots , accept);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void orgApacheJackrabbitVaultPackagingRegistryImplFSPackageRegistryTest() throws Exception {
        Boolean post = null;
        Boolean apply = null;
        Boolean delete = null;
        String action = null;
        String $location = null;
        List<String> propertylist = null;
        String homePath = null;
    ResponseEntity<OrgApacheJackrabbitVaultPackagingRegistryImplFSPackageRegistryInfo> response = api.orgApacheJackrabbitVaultPackagingRegistryImplFSPackageRegistry(post, apply, delete, action, $location, propertylist, homePath , accept);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void orgApacheSlingAuthCoreImplLogoutServletTest() throws Exception {
        Boolean post = null;
        Boolean apply = null;
        Boolean delete = null;
        String action = null;
        String $location = null;
        List<String> propertylist = null;
        List<String> slingServletMethods = null;
        String slingServletPaths = null;
    ResponseEntity<OrgApacheSlingAuthCoreImplLogoutServletInfo> response = api.orgApacheSlingAuthCoreImplLogoutServlet(post, apply, delete, action, $location, propertylist, slingServletMethods, slingServletPaths , accept);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void orgApacheSlingCaconfigImplConfigurationBindingsValueProviderTest() throws Exception {
        Boolean post = null;
        Boolean apply = null;
        Boolean delete = null;
        String action = null;
        String $location = null;
        List<String> propertylist = null;
        Boolean enabled = null;
    ResponseEntity<OrgApacheSlingCaconfigImplConfigurationBindingsValueProviderInfo> response = api.orgApacheSlingCaconfigImplConfigurationBindingsValueProvider(post, apply, delete, action, $location, propertylist, enabled , accept);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void orgApacheSlingCaconfigImplConfigurationResolverImplTest() throws Exception {
        Boolean post = null;
        Boolean apply = null;
        Boolean delete = null;
        String action = null;
        String $location = null;
        List<String> propertylist = null;
        List<String> configBucketNames = null;
    ResponseEntity<OrgApacheSlingCaconfigImplConfigurationResolverImplInfo> response = api.orgApacheSlingCaconfigImplConfigurationResolverImpl(post, apply, delete, action, $location, propertylist, configBucketNames , accept);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void orgApacheSlingCaconfigImplDefDefaultConfigurationInheritanceStraTest() throws Exception {
        Boolean post = null;
        Boolean apply = null;
        Boolean delete = null;
        String action = null;
        String $location = null;
        List<String> propertylist = null;
        Boolean enabled = null;
        List<String> configPropertyInheritancePropertyNames = null;
    ResponseEntity<OrgApacheSlingCaconfigImplDefDefaultConfigurationInheritanceStraInfo> response = api.orgApacheSlingCaconfigImplDefDefaultConfigurationInheritanceStra(post, apply, delete, action, $location, propertylist, enabled, configPropertyInheritancePropertyNames , accept);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void orgApacheSlingCaconfigImplDefDefaultConfigurationPersistenceStraTest() throws Exception {
        Boolean post = null;
        Boolean apply = null;
        Boolean delete = null;
        String action = null;
        String $location = null;
        List<String> propertylist = null;
        Boolean enabled = null;
    ResponseEntity<OrgApacheSlingCaconfigImplDefDefaultConfigurationPersistenceStraInfo> response = api.orgApacheSlingCaconfigImplDefDefaultConfigurationPersistenceStra(post, apply, delete, action, $location, propertylist, enabled , accept);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void orgApacheSlingCaconfigImplOverrideOsgiConfigurationOverrideProviTest() throws Exception {
        Boolean post = null;
        Boolean apply = null;
        Boolean delete = null;
        String action = null;
        String $location = null;
        List<String> propertylist = null;
        String description = null;
        List<String> overrides = null;
        Boolean enabled = null;
        Integer serviceRanking = null;
    ResponseEntity<OrgApacheSlingCaconfigImplOverrideOsgiConfigurationOverrideProviInfo> response = api.orgApacheSlingCaconfigImplOverrideOsgiConfigurationOverrideProvi(post, apply, delete, action, $location, propertylist, description, overrides, enabled, serviceRanking , accept);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void orgApacheSlingCaconfigImplOverrideSystemPropertyConfigurationOveTest() throws Exception {
        Boolean post = null;
        Boolean apply = null;
        Boolean delete = null;
        String action = null;
        String $location = null;
        List<String> propertylist = null;
        Boolean enabled = null;
        Integer serviceRanking = null;
    ResponseEntity<OrgApacheSlingCaconfigImplOverrideSystemPropertyConfigurationOveInfo> response = api.orgApacheSlingCaconfigImplOverrideSystemPropertyConfigurationOve(post, apply, delete, action, $location, propertylist, enabled, serviceRanking , accept);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void orgApacheSlingCaconfigManagementImplConfigurationManagementSettiTest() throws Exception {
        Boolean post = null;
        Boolean apply = null;
        Boolean delete = null;
        String action = null;
        String $location = null;
        List<String> propertylist = null;
        List<String> ignorePropertyNameRegex = null;
        List<String> configCollectionPropertiesResourceNames = null;
    ResponseEntity<OrgApacheSlingCaconfigManagementImplConfigurationManagementSettiInfo> response = api.orgApacheSlingCaconfigManagementImplConfigurationManagementSetti(post, apply, delete, action, $location, propertylist, ignorePropertyNameRegex, configCollectionPropertiesResourceNames , accept);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void orgApacheSlingCaconfigResourceImplDefDefaultConfigurationResourTest() throws Exception {
        Boolean post = null;
        Boolean apply = null;
        Boolean delete = null;
        String action = null;
        String $location = null;
        List<String> propertylist = null;
        Boolean enabled = null;
        String configPath = null;
        List<String> fallbackPaths = null;
        List<String> configCollectionInheritancePropertyNames = null;
    ResponseEntity<OrgApacheSlingCaconfigResourceImplDefDefaultConfigurationResourInfo> response = api.orgApacheSlingCaconfigResourceImplDefDefaultConfigurationResour(post, apply, delete, action, $location, propertylist, enabled, configPath, fallbackPaths, configCollectionInheritancePropertyNames , accept);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void orgApacheSlingCaconfigResourceImplDefDefaultContextPathStrategyTest() throws Exception {
        Boolean post = null;
        Boolean apply = null;
        Boolean delete = null;
        String action = null;
        String $location = null;
        List<String> propertylist = null;
        Boolean enabled = null;
        List<String> configRefResourceNames = null;
        List<String> configRefPropertyNames = null;
        Integer serviceRanking = null;
    ResponseEntity<OrgApacheSlingCaconfigResourceImplDefDefaultContextPathStrategyInfo> response = api.orgApacheSlingCaconfigResourceImplDefDefaultContextPathStrategy(post, apply, delete, action, $location, propertylist, enabled, configRefResourceNames, configRefPropertyNames, serviceRanking , accept);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void orgApacheSlingCommonsHtmlInternalTagsoupHtmlParserTest() throws Exception {
        Boolean post = null;
        Boolean apply = null;
        Boolean delete = null;
        String action = null;
        String $location = null;
        List<String> propertylist = null;
        List<String> parserFeatures = null;
    ResponseEntity<OrgApacheSlingCommonsHtmlInternalTagsoupHtmlParserInfo> response = api.orgApacheSlingCommonsHtmlInternalTagsoupHtmlParser(post, apply, delete, action, $location, propertylist, parserFeatures , accept);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void orgApacheSlingCommonsLogLogManagerTest() throws Exception {
        Boolean post = null;
        Boolean apply = null;
        Boolean delete = null;
        String action = null;
        String $location = null;
        List<String> propertylist = null;
        String orgApacheSlingCommonsLogLevel = null;
        String orgApacheSlingCommonsLogFile = null;
        Integer orgApacheSlingCommonsLogFileNumber = null;
        String orgApacheSlingCommonsLogFileSize = null;
        String orgApacheSlingCommonsLogPattern = null;
        String orgApacheSlingCommonsLogConfigurationFile = null;
        Boolean orgApacheSlingCommonsLogPackagingDataEnabled = null;
        Integer orgApacheSlingCommonsLogMaxCallerDataDepth = null;
        Integer orgApacheSlingCommonsLogMaxOldFileCountInDump = null;
        Integer orgApacheSlingCommonsLogNumOfLines = null;
    ResponseEntity<OrgApacheSlingCommonsLogLogManagerInfo> response = api.orgApacheSlingCommonsLogLogManager(post, apply, delete, action, $location, propertylist, orgApacheSlingCommonsLogLevel, orgApacheSlingCommonsLogFile, orgApacheSlingCommonsLogFileNumber, orgApacheSlingCommonsLogFileSize, orgApacheSlingCommonsLogPattern, orgApacheSlingCommonsLogConfigurationFile, orgApacheSlingCommonsLogPackagingDataEnabled, orgApacheSlingCommonsLogMaxCallerDataDepth, orgApacheSlingCommonsLogMaxOldFileCountInDump, orgApacheSlingCommonsLogNumOfLines , accept);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void orgApacheSlingCommonsLogLogManagerFactoryConfigTest() throws Exception {
        Boolean post = null;
        Boolean apply = null;
        Boolean delete = null;
        String action = null;
        String $location = null;
        List<String> propertylist = null;
        String orgApacheSlingCommonsLogLevel = null;
        String orgApacheSlingCommonsLogFile = null;
        String orgApacheSlingCommonsLogPattern = null;
        List<String> orgApacheSlingCommonsLogNames = null;
        Boolean orgApacheSlingCommonsLogAdditiv = null;
    ResponseEntity<OrgApacheSlingCommonsLogLogManagerFactoryConfigInfo> response = api.orgApacheSlingCommonsLogLogManagerFactoryConfig(post, apply, delete, action, $location, propertylist, orgApacheSlingCommonsLogLevel, orgApacheSlingCommonsLogFile, orgApacheSlingCommonsLogPattern, orgApacheSlingCommonsLogNames, orgApacheSlingCommonsLogAdditiv , accept);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void orgApacheSlingCommonsLogLogManagerFactoryWriterTest() throws Exception {
        Boolean post = null;
        Boolean apply = null;
        Boolean delete = null;
        String action = null;
        String $location = null;
        List<String> propertylist = null;
        String orgApacheSlingCommonsLogFile = null;
        Integer orgApacheSlingCommonsLogFileNumber = null;
        String orgApacheSlingCommonsLogFileSize = null;
        Boolean orgApacheSlingCommonsLogFileBuffered = null;
    ResponseEntity<OrgApacheSlingCommonsLogLogManagerFactoryWriterInfo> response = api.orgApacheSlingCommonsLogLogManagerFactoryWriter(post, apply, delete, action, $location, propertylist, orgApacheSlingCommonsLogFile, orgApacheSlingCommonsLogFileNumber, orgApacheSlingCommonsLogFileSize, orgApacheSlingCommonsLogFileBuffered , accept);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void orgApacheSlingCommonsMetricsInternalLogReporterTest() throws Exception {
        Boolean post = null;
        Boolean apply = null;
        Boolean delete = null;
        String action = null;
        String $location = null;
        List<String> propertylist = null;
        Integer period = null;
        String timeUnit = null;
        String level = null;
        String loggerName = null;
        String prefix = null;
        String pattern = null;
        String registryName = null;
    ResponseEntity<OrgApacheSlingCommonsMetricsInternalLogReporterInfo> response = api.orgApacheSlingCommonsMetricsInternalLogReporter(post, apply, delete, action, $location, propertylist, period, timeUnit, level, loggerName, prefix, pattern, registryName , accept);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void orgApacheSlingCommonsMetricsRrd4jImplCodahaleMetricsReporterTest() throws Exception {
        Boolean post = null;
        Boolean apply = null;
        Boolean delete = null;
        String action = null;
        String $location = null;
        List<String> propertylist = null;
        List<String> datasources = null;
        Integer step = null;
        List<String> archives = null;
        String path = null;
    ResponseEntity<OrgApacheSlingCommonsMetricsRrd4jImplCodahaleMetricsReporterInfo> response = api.orgApacheSlingCommonsMetricsRrd4jImplCodahaleMetricsReporter(post, apply, delete, action, $location, propertylist, datasources, step, archives, path , accept);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void orgApacheSlingCommonsMimeInternalMimeTypeServiceImplTest() throws Exception {
        Boolean post = null;
        Boolean apply = null;
        Boolean delete = null;
        String action = null;
        String $location = null;
        List<String> propertylist = null;
        List<String> mimeTypes = null;
    ResponseEntity<OrgApacheSlingCommonsMimeInternalMimeTypeServiceImplInfo> response = api.orgApacheSlingCommonsMimeInternalMimeTypeServiceImpl(post, apply, delete, action, $location, propertylist, mimeTypes , accept);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void orgApacheSlingCommonsSchedulerImplQuartzSchedulerTest() throws Exception {
        Boolean post = null;
        Boolean apply = null;
        Boolean delete = null;
        String action = null;
        String $location = null;
        List<String> propertylist = null;
        String poolName = null;
        List<String> allowedPoolNames = null;
        Boolean schedulerUseleaderforsingle = null;
        List<String> metricsFilters = null;
        Integer slowThresholdMillis = null;
    ResponseEntity<OrgApacheSlingCommonsSchedulerImplQuartzSchedulerInfo> response = api.orgApacheSlingCommonsSchedulerImplQuartzScheduler(post, apply, delete, action, $location, propertylist, poolName, allowedPoolNames, schedulerUseleaderforsingle, metricsFilters, slowThresholdMillis , accept);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void orgApacheSlingCommonsSchedulerImplSchedulerHealthCheckTest() throws Exception {
        Boolean post = null;
        Boolean apply = null;
        Boolean delete = null;
        String action = null;
        String $location = null;
        List<String> propertylist = null;
        Integer maxQuartzJobDurationAcceptable = null;
    ResponseEntity<OrgApacheSlingCommonsSchedulerImplSchedulerHealthCheckInfo> response = api.orgApacheSlingCommonsSchedulerImplSchedulerHealthCheck(post, apply, delete, action, $location, propertylist, maxQuartzJobDurationAcceptable , accept);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void orgApacheSlingCommonsThreadsImplDefaultThreadPoolFactoryTest() throws Exception {
        Boolean post = null;
        Boolean apply = null;
        Boolean delete = null;
        String action = null;
        String $location = null;
        List<String> propertylist = null;
        String name = null;
        Integer minPoolSize = null;
        Integer maxPoolSize = null;
        Integer queueSize = null;
        Integer maxThreadAge = null;
        Integer keepAliveTime = null;
        String blockPolicy = null;
        Boolean shutdownGraceful = null;
        Boolean daemon = null;
        Integer shutdownWaitTime = null;
        String priority = null;
    ResponseEntity<OrgApacheSlingCommonsThreadsImplDefaultThreadPoolFactoryInfo> response = api.orgApacheSlingCommonsThreadsImplDefaultThreadPoolFactory(post, apply, delete, action, $location, propertylist, name, minPoolSize, maxPoolSize, queueSize, maxThreadAge, keepAliveTime, blockPolicy, shutdownGraceful, daemon, shutdownWaitTime, priority , accept);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void orgApacheSlingDatasourceDataSourceFactoryTest() throws Exception {
        Boolean post = null;
        Boolean apply = null;
        Boolean delete = null;
        String action = null;
        String $location = null;
        List<String> propertylist = null;
        String datasourceName = null;
        String datasourceSvcPropName = null;
        String driverClassName = null;
        String url = null;
        String username = null;
        String password = null;
        String defaultAutoCommit = null;
        String defaultReadOnly = null;
        String defaultTransactionIsolation = null;
        String defaultCatalog = null;
        Integer maxActive = null;
        Integer maxIdle = null;
        Integer minIdle = null;
        Integer initialSize = null;
        Integer maxWait = null;
        Integer maxAge = null;
        Boolean testOnBorrow = null;
        Boolean testOnReturn = null;
        Boolean testWhileIdle = null;
        String validationQuery = null;
        Integer validationQueryTimeout = null;
        Integer timeBetweenEvictionRunsMillis = null;
        Integer minEvictableIdleTimeMillis = null;
        String connectionProperties = null;
        String initSQL = null;
        String jdbcInterceptors = null;
        Integer validationInterval = null;
        Boolean logValidationErrors = null;
        List<String> datasourceSvcProperties = null;
    ResponseEntity<OrgApacheSlingDatasourceDataSourceFactoryInfo> response = api.orgApacheSlingDatasourceDataSourceFactory(post, apply, delete, action, $location, propertylist, datasourceName, datasourceSvcPropName, driverClassName, url, username, password, defaultAutoCommit, defaultReadOnly, defaultTransactionIsolation, defaultCatalog, maxActive, maxIdle, minIdle, initialSize, maxWait, maxAge, testOnBorrow, testOnReturn, testWhileIdle, validationQuery, validationQueryTimeout, timeBetweenEvictionRunsMillis, minEvictableIdleTimeMillis, connectionProperties, initSQL, jdbcInterceptors, validationInterval, logValidationErrors, datasourceSvcProperties , accept);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void orgApacheSlingDatasourceJNDIDataSourceFactoryTest() throws Exception {
        Boolean post = null;
        Boolean apply = null;
        Boolean delete = null;
        String action = null;
        String $location = null;
        List<String> propertylist = null;
        String datasourceName = null;
        String datasourceSvcPropName = null;
        String datasourceJndiName = null;
        List<String> jndiProperties = null;
    ResponseEntity<OrgApacheSlingDatasourceJNDIDataSourceFactoryInfo> response = api.orgApacheSlingDatasourceJNDIDataSourceFactory(post, apply, delete, action, $location, propertylist, datasourceName, datasourceSvcPropName, datasourceJndiName, jndiProperties , accept);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void orgApacheSlingDiscoveryOakConfigTest() throws Exception {
        Boolean post = null;
        Boolean apply = null;
        Boolean delete = null;
        String action = null;
        String $location = null;
        List<String> propertylist = null;
        Integer connectorPingTimeout = null;
        Integer connectorPingInterval = null;
        Integer discoveryLiteCheckInterval = null;
        Integer clusterSyncServiceTimeout = null;
        Integer clusterSyncServiceInterval = null;
        Boolean enableSyncToken = null;
        Integer minEventDelay = null;
        Integer socketConnectTimeout = null;
        Integer soTimeout = null;
        List<String> topologyConnectorUrls = null;
        List<String> topologyConnectorWhitelist = null;
        Boolean autoStopLocalLoopEnabled = null;
        Boolean gzipConnectorRequestsEnabled = null;
        Boolean hmacEnabled = null;
        Boolean enableEncryption = null;
        String sharedKey = null;
        Integer hmacSharedKeyTTL = null;
        String backoffStandbyFactor = null;
        String backoffStableFactor = null;
    ResponseEntity<OrgApacheSlingDiscoveryOakConfigInfo> response = api.orgApacheSlingDiscoveryOakConfig(post, apply, delete, action, $location, propertylist, connectorPingTimeout, connectorPingInterval, discoveryLiteCheckInterval, clusterSyncServiceTimeout, clusterSyncServiceInterval, enableSyncToken, minEventDelay, socketConnectTimeout, soTimeout, topologyConnectorUrls, topologyConnectorWhitelist, autoStopLocalLoopEnabled, gzipConnectorRequestsEnabled, hmacEnabled, enableEncryption, sharedKey, hmacSharedKeyTTL, backoffStandbyFactor, backoffStableFactor , accept);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void orgApacheSlingDiscoveryOakSynchronizedClocksHealthCheckTest() throws Exception {
        Boolean post = null;
        Boolean apply = null;
        Boolean delete = null;
        String action = null;
        String $location = null;
        List<String> propertylist = null;
        String hcName = null;
        List<String> hcTags = null;
        String hcMbeanName = null;
    ResponseEntity<OrgApacheSlingDiscoveryOakSynchronizedClocksHealthCheckInfo> response = api.orgApacheSlingDiscoveryOakSynchronizedClocksHealthCheck(post, apply, delete, action, $location, propertylist, hcName, hcTags, hcMbeanName , accept);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void orgApacheSlingDistributionAgentImplForwardDistributionAgentFactoTest() throws Exception {
        Boolean post = null;
        Boolean apply = null;
        Boolean delete = null;
        String action = null;
        String $location = null;
        List<String> propertylist = null;
        String name = null;
        String title = null;
        String details = null;
        Boolean enabled = null;
        String serviceName = null;
        String logLevel = null;
        List<String> allowedRoots = null;
        Boolean queueProcessingEnabled = null;
        List<String> packageImporterEndpoints = null;
        List<String> passiveQueues = null;
        List<String> priorityQueues = null;
        String retryStrategy = null;
        Integer retryAttempts = null;
        String requestAuthorizationStrategyTarget = null;
        String transportSecretProviderTarget = null;
        String packageBuilderTarget = null;
        String triggersTarget = null;
        String queueProvider = null;
        Boolean asyncDelivery = null;
        Integer httpConnTimeout = null;
    ResponseEntity<OrgApacheSlingDistributionAgentImplForwardDistributionAgentFactoInfo> response = api.orgApacheSlingDistributionAgentImplForwardDistributionAgentFacto(post, apply, delete, action, $location, propertylist, name, title, details, enabled, serviceName, logLevel, allowedRoots, queueProcessingEnabled, packageImporterEndpoints, passiveQueues, priorityQueues, retryStrategy, retryAttempts, requestAuthorizationStrategyTarget, transportSecretProviderTarget, packageBuilderTarget, triggersTarget, queueProvider, asyncDelivery, httpConnTimeout , accept);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void orgApacheSlingDistributionAgentImplPrivilegeDistributionRequestATest() throws Exception {
        Boolean post = null;
        Boolean apply = null;
        Boolean delete = null;
        String action = null;
        String $location = null;
        List<String> propertylist = null;
        String name = null;
        String jcrPrivilege = null;
    ResponseEntity<OrgApacheSlingDistributionAgentImplPrivilegeDistributionRequestAInfo> response = api.orgApacheSlingDistributionAgentImplPrivilegeDistributionRequestA(post, apply, delete, action, $location, propertylist, name, jcrPrivilege , accept);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void orgApacheSlingDistributionAgentImplQueueDistributionAgentFactoryTest() throws Exception {
        Boolean post = null;
        Boolean apply = null;
        Boolean delete = null;
        String action = null;
        String $location = null;
        List<String> propertylist = null;
        String name = null;
        String title = null;
        String details = null;
        Boolean enabled = null;
        String serviceName = null;
        String logLevel = null;
        List<String> allowedRoots = null;
        String requestAuthorizationStrategyTarget = null;
        String queueProviderFactoryTarget = null;
        String packageBuilderTarget = null;
        String triggersTarget = null;
        List<String> priorityQueues = null;
    ResponseEntity<OrgApacheSlingDistributionAgentImplQueueDistributionAgentFactoryInfo> response = api.orgApacheSlingDistributionAgentImplQueueDistributionAgentFactory(post, apply, delete, action, $location, propertylist, name, title, details, enabled, serviceName, logLevel, allowedRoots, requestAuthorizationStrategyTarget, queueProviderFactoryTarget, packageBuilderTarget, triggersTarget, priorityQueues , accept);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void orgApacheSlingDistributionAgentImplReverseDistributionAgentFactoTest() throws Exception {
        Boolean post = null;
        Boolean apply = null;
        Boolean delete = null;
        String action = null;
        String $location = null;
        List<String> propertylist = null;
        String name = null;
        String title = null;
        String details = null;
        Boolean enabled = null;
        String serviceName = null;
        String logLevel = null;
        Boolean queueProcessingEnabled = null;
        List<String> packageExporterEndpoints = null;
        Integer pullItems = null;
        Integer httpConnTimeout = null;
        String requestAuthorizationStrategyTarget = null;
        String transportSecretProviderTarget = null;
        String packageBuilderTarget = null;
        String triggersTarget = null;
    ResponseEntity<OrgApacheSlingDistributionAgentImplReverseDistributionAgentFactoInfo> response = api.orgApacheSlingDistributionAgentImplReverseDistributionAgentFacto(post, apply, delete, action, $location, propertylist, name, title, details, enabled, serviceName, logLevel, queueProcessingEnabled, packageExporterEndpoints, pullItems, httpConnTimeout, requestAuthorizationStrategyTarget, transportSecretProviderTarget, packageBuilderTarget, triggersTarget , accept);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void orgApacheSlingDistributionAgentImplSimpleDistributionAgentFactorTest() throws Exception {
        Boolean post = null;
        Boolean apply = null;
        Boolean delete = null;
        String action = null;
        String $location = null;
        List<String> propertylist = null;
        String name = null;
        String title = null;
        String details = null;
        Boolean enabled = null;
        String serviceName = null;
        String logLevel = null;
        Boolean queueProcessingEnabled = null;
        String packageExporterTarget = null;
        String packageImporterTarget = null;
        String requestAuthorizationStrategyTarget = null;
        String triggersTarget = null;
    ResponseEntity<OrgApacheSlingDistributionAgentImplSimpleDistributionAgentFactorInfo> response = api.orgApacheSlingDistributionAgentImplSimpleDistributionAgentFactor(post, apply, delete, action, $location, propertylist, name, title, details, enabled, serviceName, logLevel, queueProcessingEnabled, packageExporterTarget, packageImporterTarget, requestAuthorizationStrategyTarget, triggersTarget , accept);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void orgApacheSlingDistributionAgentImplSyncDistributionAgentFactoryTest() throws Exception {
        Boolean post = null;
        Boolean apply = null;
        Boolean delete = null;
        String action = null;
        String $location = null;
        List<String> propertylist = null;
        String name = null;
        String title = null;
        String details = null;
        Boolean enabled = null;
        String serviceName = null;
        String logLevel = null;
        Boolean queueProcessingEnabled = null;
        List<String> passiveQueues = null;
        List<String> packageExporterEndpoints = null;
        List<String> packageImporterEndpoints = null;
        String retryStrategy = null;
        Integer retryAttempts = null;
        Integer pullItems = null;
        Integer httpConnTimeout = null;
        String requestAuthorizationStrategyTarget = null;
        String transportSecretProviderTarget = null;
        String packageBuilderTarget = null;
        String triggersTarget = null;
    ResponseEntity<OrgApacheSlingDistributionAgentImplSyncDistributionAgentFactoryInfo> response = api.orgApacheSlingDistributionAgentImplSyncDistributionAgentFactory(post, apply, delete, action, $location, propertylist, name, title, details, enabled, serviceName, logLevel, queueProcessingEnabled, passiveQueues, packageExporterEndpoints, packageImporterEndpoints, retryStrategy, retryAttempts, pullItems, httpConnTimeout, requestAuthorizationStrategyTarget, transportSecretProviderTarget, packageBuilderTarget, triggersTarget , accept);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void orgApacheSlingDistributionMonitorDistributionQueueHealthCheckTest() throws Exception {
        Boolean post = null;
        Boolean apply = null;
        Boolean delete = null;
        String action = null;
        String $location = null;
        List<String> propertylist = null;
        String hcName = null;
        List<String> hcTags = null;
        String hcMbeanName = null;
        Integer numberOfRetriesAllowed = null;
    ResponseEntity<OrgApacheSlingDistributionMonitorDistributionQueueHealthCheckInfo> response = api.orgApacheSlingDistributionMonitorDistributionQueueHealthCheck(post, apply, delete, action, $location, propertylist, hcName, hcTags, hcMbeanName, numberOfRetriesAllowed , accept);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void orgApacheSlingDistributionPackagingImplExporterAgentDistributioTest() throws Exception {
        Boolean post = null;
        Boolean apply = null;
        Boolean delete = null;
        String action = null;
        String $location = null;
        List<String> propertylist = null;
        String name = null;
        String queue = null;
        Boolean dropInvalidItems = null;
        String agentTarget = null;
    ResponseEntity<OrgApacheSlingDistributionPackagingImplExporterAgentDistributioInfo> response = api.orgApacheSlingDistributionPackagingImplExporterAgentDistributio(post, apply, delete, action, $location, propertylist, name, queue, dropInvalidItems, agentTarget , accept);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void orgApacheSlingDistributionPackagingImplExporterLocalDistributioTest() throws Exception {
        Boolean post = null;
        Boolean apply = null;
        Boolean delete = null;
        String action = null;
        String $location = null;
        List<String> propertylist = null;
        String name = null;
        String packageBuilderTarget = null;
    ResponseEntity<OrgApacheSlingDistributionPackagingImplExporterLocalDistributioInfo> response = api.orgApacheSlingDistributionPackagingImplExporterLocalDistributio(post, apply, delete, action, $location, propertylist, name, packageBuilderTarget , accept);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void orgApacheSlingDistributionPackagingImplExporterRemoteDistributiTest() throws Exception {
        Boolean post = null;
        Boolean apply = null;
        Boolean delete = null;
        String action = null;
        String $location = null;
        List<String> propertylist = null;
        String name = null;
        List<String> endpoints = null;
        Integer pullItems = null;
        String packageBuilderTarget = null;
        String transportSecretProviderTarget = null;
    ResponseEntity<OrgApacheSlingDistributionPackagingImplExporterRemoteDistributiInfo> response = api.orgApacheSlingDistributionPackagingImplExporterRemoteDistributi(post, apply, delete, action, $location, propertylist, name, endpoints, pullItems, packageBuilderTarget, transportSecretProviderTarget , accept);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void orgApacheSlingDistributionPackagingImplImporterLocalDistributioTest() throws Exception {
        Boolean post = null;
        Boolean apply = null;
        Boolean delete = null;
        String action = null;
        String $location = null;
        List<String> propertylist = null;
        String name = null;
        String packageBuilderTarget = null;
    ResponseEntity<OrgApacheSlingDistributionPackagingImplImporterLocalDistributioInfo> response = api.orgApacheSlingDistributionPackagingImplImporterLocalDistributio(post, apply, delete, action, $location, propertylist, name, packageBuilderTarget , accept);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void orgApacheSlingDistributionPackagingImplImporterRemoteDistributiTest() throws Exception {
        Boolean post = null;
        Boolean apply = null;
        Boolean delete = null;
        String action = null;
        String $location = null;
        List<String> propertylist = null;
        String name = null;
        List<String> endpoints = null;
        String transportSecretProviderTarget = null;
    ResponseEntity<OrgApacheSlingDistributionPackagingImplImporterRemoteDistributiInfo> response = api.orgApacheSlingDistributionPackagingImplImporterRemoteDistributi(post, apply, delete, action, $location, propertylist, name, endpoints, transportSecretProviderTarget , accept);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void orgApacheSlingDistributionPackagingImplImporterRepositoryDistriTest() throws Exception {
        Boolean post = null;
        Boolean apply = null;
        Boolean delete = null;
        String action = null;
        String $location = null;
        List<String> propertylist = null;
        String name = null;
        String serviceName = null;
        String path = null;
        String privilegeName = null;
    ResponseEntity<OrgApacheSlingDistributionPackagingImplImporterRepositoryDistriInfo> response = api.orgApacheSlingDistributionPackagingImplImporterRepositoryDistri(post, apply, delete, action, $location, propertylist, name, serviceName, path, privilegeName , accept);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void orgApacheSlingDistributionResourcesImplDistributionConfigurationTest() throws Exception {
        Boolean post = null;
        Boolean apply = null;
        Boolean delete = null;
        String action = null;
        String $location = null;
        List<String> propertylist = null;
        String providerRoots = null;
        String kind = null;
    ResponseEntity<OrgApacheSlingDistributionResourcesImplDistributionConfigurationInfo> response = api.orgApacheSlingDistributionResourcesImplDistributionConfiguration(post, apply, delete, action, $location, propertylist, providerRoots, kind , accept);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void orgApacheSlingDistributionResourcesImplDistributionServiceResourTest() throws Exception {
        Boolean post = null;
        Boolean apply = null;
        Boolean delete = null;
        String action = null;
        String $location = null;
        List<String> propertylist = null;
        String providerRoots = null;
        String kind = null;
    ResponseEntity<OrgApacheSlingDistributionResourcesImplDistributionServiceResourInfo> response = api.orgApacheSlingDistributionResourcesImplDistributionServiceResour(post, apply, delete, action, $location, propertylist, providerRoots, kind , accept);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void orgApacheSlingDistributionSerializationImplDistributionPackageBuTest() throws Exception {
        Boolean post = null;
        Boolean apply = null;
        Boolean delete = null;
        String action = null;
        String $location = null;
        List<String> propertylist = null;
        String name = null;
        String type = null;
        String formatTarget = null;
        String tempFsFolder = null;
        Integer fileThreshold = null;
        String memoryUnit = null;
        Boolean useOffHeapMemory = null;
        String digestAlgorithm = null;
        Integer monitoringQueueSize = null;
        Integer cleanupDelay = null;
        List<String> packageFilters = null;
        List<String> propertyFilters = null;
    ResponseEntity<OrgApacheSlingDistributionSerializationImplDistributionPackageBuInfo> response = api.orgApacheSlingDistributionSerializationImplDistributionPackageBu(post, apply, delete, action, $location, propertylist, name, type, formatTarget, tempFsFolder, fileThreshold, memoryUnit, useOffHeapMemory, digestAlgorithm, monitoringQueueSize, cleanupDelay, packageFilters, propertyFilters , accept);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void orgApacheSlingDistributionSerializationImplVltVaultDistributionTest() throws Exception {
        Boolean post = null;
        Boolean apply = null;
        Boolean delete = null;
        String action = null;
        String $location = null;
        List<String> propertylist = null;
        String name = null;
        String type = null;
        String importMode = null;
        String aclHandling = null;
        String packageRoots = null;
        List<String> packageFilters = null;
        List<String> propertyFilters = null;
        String tempFsFolder = null;
        Boolean useBinaryReferences = null;
        Integer autoSaveThreshold = null;
        Integer cleanupDelay = null;
        Integer fileThreshold = null;
        String MEGA_BYTES = null;
        Boolean useOffHeapMemory = null;
        String digestAlgorithm = null;
        Integer monitoringQueueSize = null;
        List<String> pathsMapping = null;
        Boolean strictImport = null;
    ResponseEntity<OrgApacheSlingDistributionSerializationImplVltVaultDistributionInfo> response = api.orgApacheSlingDistributionSerializationImplVltVaultDistribution(post, apply, delete, action, $location, propertylist, name, type, importMode, aclHandling, packageRoots, packageFilters, propertyFilters, tempFsFolder, useBinaryReferences, autoSaveThreshold, cleanupDelay, fileThreshold, MEGA_BYTES, useOffHeapMemory, digestAlgorithm, monitoringQueueSize, pathsMapping, strictImport , accept);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void orgApacheSlingDistributionTransportImplUserCredentialsDistributiTest() throws Exception {
        Boolean post = null;
        Boolean apply = null;
        Boolean delete = null;
        String action = null;
        String $location = null;
        List<String> propertylist = null;
        String name = null;
        String username = null;
        String password = null;
    ResponseEntity<OrgApacheSlingDistributionTransportImplUserCredentialsDistributiInfo> response = api.orgApacheSlingDistributionTransportImplUserCredentialsDistributi(post, apply, delete, action, $location, propertylist, name, username, password , accept);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void orgApacheSlingDistributionTriggerImplDistributionEventDistributeTest() throws Exception {
        Boolean post = null;
        Boolean apply = null;
        Boolean delete = null;
        String action = null;
        String $location = null;
        List<String> propertylist = null;
        String name = null;
        String path = null;
    ResponseEntity<OrgApacheSlingDistributionTriggerImplDistributionEventDistributeInfo> response = api.orgApacheSlingDistributionTriggerImplDistributionEventDistribute(post, apply, delete, action, $location, propertylist, name, path , accept);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void orgApacheSlingDistributionTriggerImplJcrEventDistributionTriggerTest() throws Exception {
        Boolean post = null;
        Boolean apply = null;
        Boolean delete = null;
        String action = null;
        String $location = null;
        List<String> propertylist = null;
        String name = null;
        String path = null;
        List<String> ignoredPathsPatterns = null;
        String serviceName = null;
        Boolean deep = null;
    ResponseEntity<OrgApacheSlingDistributionTriggerImplJcrEventDistributionTriggerInfo> response = api.orgApacheSlingDistributionTriggerImplJcrEventDistributionTrigger(post, apply, delete, action, $location, propertylist, name, path, ignoredPathsPatterns, serviceName, deep , accept);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void orgApacheSlingDistributionTriggerImplPersistedJcrEventDistributiTest() throws Exception {
        Boolean post = null;
        Boolean apply = null;
        Boolean delete = null;
        String action = null;
        String $location = null;
        List<String> propertylist = null;
        String name = null;
        String path = null;
        String serviceName = null;
        String nuggetsPath = null;
    ResponseEntity<OrgApacheSlingDistributionTriggerImplPersistedJcrEventDistributiInfo> response = api.orgApacheSlingDistributionTriggerImplPersistedJcrEventDistributi(post, apply, delete, action, $location, propertylist, name, path, serviceName, nuggetsPath , accept);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void orgApacheSlingDistributionTriggerImplRemoteEventDistributionTrigTest() throws Exception {
        Boolean post = null;
        Boolean apply = null;
        Boolean delete = null;
        String action = null;
        String $location = null;
        List<String> propertylist = null;
        String name = null;
        String endpoint = null;
        String transportSecretProviderTarget = null;
    ResponseEntity<OrgApacheSlingDistributionTriggerImplRemoteEventDistributionTrigInfo> response = api.orgApacheSlingDistributionTriggerImplRemoteEventDistributionTrig(post, apply, delete, action, $location, propertylist, name, endpoint, transportSecretProviderTarget , accept);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void orgApacheSlingDistributionTriggerImplResourceEventDistributionTrTest() throws Exception {
        Boolean post = null;
        Boolean apply = null;
        Boolean delete = null;
        String action = null;
        String $location = null;
        List<String> propertylist = null;
        String name = null;
        String path = null;
    ResponseEntity<OrgApacheSlingDistributionTriggerImplResourceEventDistributionTrInfo> response = api.orgApacheSlingDistributionTriggerImplResourceEventDistributionTr(post, apply, delete, action, $location, propertylist, name, path , accept);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void orgApacheSlingDistributionTriggerImplScheduledDistributionTriggeTest() throws Exception {
        Boolean post = null;
        Boolean apply = null;
        Boolean delete = null;
        String action = null;
        String $location = null;
        List<String> propertylist = null;
        String name = null;
        String path = null;
        String seconds = null;
        String serviceName = null;
    ResponseEntity<OrgApacheSlingDistributionTriggerImplScheduledDistributionTriggeInfo> response = api.orgApacheSlingDistributionTriggerImplScheduledDistributionTrigge(post, apply, delete, action, $location, propertylist, name, path, seconds, serviceName , accept);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void orgApacheSlingEngineImplAuthSlingAuthenticatorTest() throws Exception {
        Boolean post = null;
        Boolean apply = null;
        Boolean delete = null;
        String action = null;
        String $location = null;
        List<String> propertylist = null;
        String osgiHttpWhiteboardContextSelect = null;
        String osgiHttpWhiteboardListener = null;
        String authSudoCookie = null;
        String authSudoParameter = null;
        Boolean authAnnonymous = null;
        List<String> slingAuthRequirements = null;
        String slingAuthAnonymousUser = null;
        String slingAuthAnonymousPassword = null;
        String authHttp = null;
        String authHttpRealm = null;
        List<String> authUriSuffix = null;
    ResponseEntity<OrgApacheSlingEngineImplAuthSlingAuthenticatorInfo> response = api.orgApacheSlingEngineImplAuthSlingAuthenticator(post, apply, delete, action, $location, propertylist, osgiHttpWhiteboardContextSelect, osgiHttpWhiteboardListener, authSudoCookie, authSudoParameter, authAnnonymous, slingAuthRequirements, slingAuthAnonymousUser, slingAuthAnonymousPassword, authHttp, authHttpRealm, authUriSuffix , accept);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void orgApacheSlingEngineImplDebugRequestProgressTrackerLogFilterTest() throws Exception {
        Boolean post = null;
        Boolean apply = null;
        Boolean delete = null;
        String action = null;
        String $location = null;
        List<String> propertylist = null;
        List<String> extensions = null;
        Integer minDurationMs = null;
        Integer maxDurationMs = null;
        Boolean compactLogFormat = null;
    ResponseEntity<OrgApacheSlingEngineImplDebugRequestProgressTrackerLogFilterInfo> response = api.orgApacheSlingEngineImplDebugRequestProgressTrackerLogFilter(post, apply, delete, action, $location, propertylist, extensions, minDurationMs, maxDurationMs, compactLogFormat , accept);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void orgApacheSlingEngineImplLogRequestLoggerTest() throws Exception {
        Boolean post = null;
        Boolean apply = null;
        Boolean delete = null;
        String action = null;
        String $location = null;
        List<String> propertylist = null;
        String requestLogOutput = null;
        Integer requestLogOutputtype = null;
        Boolean requestLogEnabled = null;
        String accessLogOutput = null;
        Integer accessLogOutputtype = null;
        Boolean accessLogEnabled = null;
    ResponseEntity<OrgApacheSlingEngineImplLogRequestLoggerInfo> response = api.orgApacheSlingEngineImplLogRequestLogger(post, apply, delete, action, $location, propertylist, requestLogOutput, requestLogOutputtype, requestLogEnabled, accessLogOutput, accessLogOutputtype, accessLogEnabled , accept);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void orgApacheSlingEngineImplLogRequestLoggerServiceTest() throws Exception {
        Boolean post = null;
        Boolean apply = null;
        Boolean delete = null;
        String action = null;
        String $location = null;
        List<String> propertylist = null;
        String requestLogServiceFormat = null;
        String requestLogServiceOutput = null;
        Integer requestLogServiceOutputtype = null;
        Boolean requestLogServiceOnentry = null;
    ResponseEntity<OrgApacheSlingEngineImplLogRequestLoggerServiceInfo> response = api.orgApacheSlingEngineImplLogRequestLoggerService(post, apply, delete, action, $location, propertylist, requestLogServiceFormat, requestLogServiceOutput, requestLogServiceOutputtype, requestLogServiceOnentry , accept);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void orgApacheSlingEngineImplSlingMainServletTest() throws Exception {
        Boolean post = null;
        Boolean apply = null;
        Boolean delete = null;
        String action = null;
        String $location = null;
        List<String> propertylist = null;
        Integer slingMaxCalls = null;
        Integer slingMaxInclusions = null;
        Boolean slingTraceAllow = null;
        Integer slingMaxRecordRequests = null;
        List<String> slingStorePatternRequests = null;
        String slingServerinfo = null;
        List<String> slingAdditionalResponseHeaders = null;
    ResponseEntity<OrgApacheSlingEngineImplSlingMainServletInfo> response = api.orgApacheSlingEngineImplSlingMainServlet(post, apply, delete, action, $location, propertylist, slingMaxCalls, slingMaxInclusions, slingTraceAllow, slingMaxRecordRequests, slingStorePatternRequests, slingServerinfo, slingAdditionalResponseHeaders , accept);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void orgApacheSlingEngineParametersTest() throws Exception {
        Boolean post = null;
        Boolean apply = null;
        Boolean delete = null;
        String action = null;
        String $location = null;
        List<String> propertylist = null;
        String slingDefaultParameterEncoding = null;
        Integer slingDefaultMaxParameters = null;
        String fileLocation = null;
        Integer fileThreshold = null;
        Integer fileMax = null;
        Integer requestMax = null;
        Boolean slingDefaultParameterCheckForAdditionalContainerParameters = null;
    ResponseEntity<OrgApacheSlingEngineParametersInfo> response = api.orgApacheSlingEngineParameters(post, apply, delete, action, $location, propertylist, slingDefaultParameterEncoding, slingDefaultMaxParameters, fileLocation, fileThreshold, fileMax, requestMax, slingDefaultParameterCheckForAdditionalContainerParameters , accept);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void orgApacheSlingEventImplEventingThreadPoolTest() throws Exception {
        Boolean post = null;
        Boolean apply = null;
        Boolean delete = null;
        String action = null;
        String $location = null;
        List<String> propertylist = null;
        Integer minPoolSize = null;
    ResponseEntity<OrgApacheSlingEventImplEventingThreadPoolInfo> response = api.orgApacheSlingEventImplEventingThreadPool(post, apply, delete, action, $location, propertylist, minPoolSize , accept);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void orgApacheSlingEventImplJobsDefaultJobManagerTest() throws Exception {
        Boolean post = null;
        Boolean apply = null;
        Boolean delete = null;
        String action = null;
        String $location = null;
        List<String> propertylist = null;
        String queuePriority = null;
        Integer queueRetries = null;
        Integer queueRetrydelay = null;
        Integer queueMaxparallel = null;
    ResponseEntity<OrgApacheSlingEventImplJobsDefaultJobManagerInfo> response = api.orgApacheSlingEventImplJobsDefaultJobManager(post, apply, delete, action, $location, propertylist, queuePriority, queueRetries, queueRetrydelay, queueMaxparallel , accept);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void orgApacheSlingEventImplJobsJcrPersistenceHandlerTest() throws Exception {
        Boolean post = null;
        Boolean apply = null;
        Boolean delete = null;
        String action = null;
        String $location = null;
        List<String> propertylist = null;
        Boolean jobConsumermanagerDisableDistribution = null;
        Integer startupDelay = null;
        Integer cleanupPeriod = null;
    ResponseEntity<OrgApacheSlingEventImplJobsJcrPersistenceHandlerInfo> response = api.orgApacheSlingEventImplJobsJcrPersistenceHandler(post, apply, delete, action, $location, propertylist, jobConsumermanagerDisableDistribution, startupDelay, cleanupPeriod , accept);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void orgApacheSlingEventImplJobsJobConsumerManagerTest() throws Exception {
        Boolean post = null;
        Boolean apply = null;
        Boolean delete = null;
        String action = null;
        String $location = null;
        List<String> propertylist = null;
        Boolean orgApacheSlingInstallerConfigurationPersist = null;
        List<String> jobConsumermanagerWhitelist = null;
        List<String> jobConsumermanagerBlacklist = null;
    ResponseEntity<OrgApacheSlingEventImplJobsJobConsumerManagerInfo> response = api.orgApacheSlingEventImplJobsJobConsumerManager(post, apply, delete, action, $location, propertylist, orgApacheSlingInstallerConfigurationPersist, jobConsumermanagerWhitelist, jobConsumermanagerBlacklist , accept);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void orgApacheSlingEventJobsQueueConfigurationTest() throws Exception {
        Boolean post = null;
        Boolean apply = null;
        Boolean delete = null;
        String action = null;
        String $location = null;
        List<String> propertylist = null;
        String queueName = null;
        List<String> queueTopics = null;
        String queueType = null;
        String queuePriority = null;
        Integer queueRetries = null;
        Integer queueRetrydelay = null;
        BigDecimal queueMaxparallel = null;
        Boolean queueKeepJobs = null;
        Boolean queuePreferRunOnCreationInstance = null;
        Integer queueThreadPoolSize = null;
        Integer serviceRanking = null;
    ResponseEntity<OrgApacheSlingEventJobsQueueConfigurationInfo> response = api.orgApacheSlingEventJobsQueueConfiguration(post, apply, delete, action, $location, propertylist, queueName, queueTopics, queueType, queuePriority, queueRetries, queueRetrydelay, queueMaxparallel, queueKeepJobs, queuePreferRunOnCreationInstance, queueThreadPoolSize, serviceRanking , accept);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void orgApacheSlingExtensionsWebconsolesecurityproviderInternalSlingWTest() throws Exception {
        Boolean post = null;
        Boolean apply = null;
        Boolean delete = null;
        String action = null;
        String $location = null;
        List<String> propertylist = null;
        List<String> users = null;
        List<String> groups = null;
    ResponseEntity<OrgApacheSlingExtensionsWebconsolesecurityproviderInternalSlingWInfo> response = api.orgApacheSlingExtensionsWebconsolesecurityproviderInternalSlingW(post, apply, delete, action, $location, propertylist, users, groups , accept);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void orgApacheSlingFeatureflagsFeatureTest() throws Exception {
        Boolean post = null;
        Boolean apply = null;
        Boolean delete = null;
        String action = null;
        String $location = null;
        List<String> propertylist = null;
        String name = null;
        String description = null;
        Boolean enabled = null;
    ResponseEntity<OrgApacheSlingFeatureflagsFeatureInfo> response = api.orgApacheSlingFeatureflagsFeature(post, apply, delete, action, $location, propertylist, name, description, enabled , accept);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void orgApacheSlingFeatureflagsImplConfiguredFeatureTest() throws Exception {
        Boolean post = null;
        Boolean apply = null;
        Boolean delete = null;
        String action = null;
        String $location = null;
        List<String> propertylist = null;
        String name = null;
        String description = null;
        Boolean enabled = null;
    ResponseEntity<OrgApacheSlingFeatureflagsImplConfiguredFeatureInfo> response = api.orgApacheSlingFeatureflagsImplConfiguredFeature(post, apply, delete, action, $location, propertylist, name, description, enabled , accept);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void orgApacheSlingHapiImplHApiUtilImplTest() throws Exception {
        Boolean post = null;
        Boolean apply = null;
        Boolean delete = null;
        String action = null;
        String $location = null;
        List<String> propertylist = null;
        String orgApacheSlingHapiToolsResourcetype = null;
        String orgApacheSlingHapiToolsCollectionresourcetype = null;
        List<String> orgApacheSlingHapiToolsSearchpaths = null;
        String orgApacheSlingHapiToolsExternalurl = null;
        Boolean orgApacheSlingHapiToolsEnabled = null;
    ResponseEntity<OrgApacheSlingHapiImplHApiUtilImplInfo> response = api.orgApacheSlingHapiImplHApiUtilImpl(post, apply, delete, action, $location, propertylist, orgApacheSlingHapiToolsResourcetype, orgApacheSlingHapiToolsCollectionresourcetype, orgApacheSlingHapiToolsSearchpaths, orgApacheSlingHapiToolsExternalurl, orgApacheSlingHapiToolsEnabled , accept);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void orgApacheSlingHcCoreImplCompositeHealthCheckTest() throws Exception {
        Boolean post = null;
        Boolean apply = null;
        Boolean delete = null;
        String action = null;
        String $location = null;
        List<String> propertylist = null;
        String hcName = null;
        List<String> hcTags = null;
        String hcMbeanName = null;
        List<String> filterTags = null;
        Boolean filterCombineTagsWithOr = null;
    ResponseEntity<OrgApacheSlingHcCoreImplCompositeHealthCheckInfo> response = api.orgApacheSlingHcCoreImplCompositeHealthCheck(post, apply, delete, action, $location, propertylist, hcName, hcTags, hcMbeanName, filterTags, filterCombineTagsWithOr , accept);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void orgApacheSlingHcCoreImplExecutorHealthCheckExecutorImplTest() throws Exception {
        Boolean post = null;
        Boolean apply = null;
        Boolean delete = null;
        String action = null;
        String $location = null;
        List<String> propertylist = null;
        Integer timeoutInMs = null;
        Integer longRunningFutureThresholdForCriticalMs = null;
        Integer resultCacheTtlInMs = null;
    ResponseEntity<OrgApacheSlingHcCoreImplExecutorHealthCheckExecutorImplInfo> response = api.orgApacheSlingHcCoreImplExecutorHealthCheckExecutorImpl(post, apply, delete, action, $location, propertylist, timeoutInMs, longRunningFutureThresholdForCriticalMs, resultCacheTtlInMs , accept);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void orgApacheSlingHcCoreImplJmxAttributeHealthCheckTest() throws Exception {
        Boolean post = null;
        Boolean apply = null;
        Boolean delete = null;
        String action = null;
        String $location = null;
        List<String> propertylist = null;
        String hcName = null;
        List<String> hcTags = null;
        String hcMbeanName = null;
        String mbeanName = null;
        String attributeName = null;
        String attributeValueConstraint = null;
    ResponseEntity<OrgApacheSlingHcCoreImplJmxAttributeHealthCheckInfo> response = api.orgApacheSlingHcCoreImplJmxAttributeHealthCheck(post, apply, delete, action, $location, propertylist, hcName, hcTags, hcMbeanName, mbeanName, attributeName, attributeValueConstraint , accept);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void orgApacheSlingHcCoreImplScriptableHealthCheckTest() throws Exception {
        Boolean post = null;
        Boolean apply = null;
        Boolean delete = null;
        String action = null;
        String $location = null;
        List<String> propertylist = null;
        String hcName = null;
        List<String> hcTags = null;
        String hcMbeanName = null;
        String expression = null;
        String languageExtension = null;
    ResponseEntity<OrgApacheSlingHcCoreImplScriptableHealthCheckInfo> response = api.orgApacheSlingHcCoreImplScriptableHealthCheck(post, apply, delete, action, $location, propertylist, hcName, hcTags, hcMbeanName, expression, languageExtension , accept);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void orgApacheSlingHcCoreImplServletHealthCheckExecutorServletTest() throws Exception {
        Boolean post = null;
        Boolean apply = null;
        Boolean delete = null;
        String action = null;
        String $location = null;
        List<String> propertylist = null;
        String servletPath = null;
        Boolean disabled = null;
        String corsAccessControlAllowOrigin = null;
    ResponseEntity<OrgApacheSlingHcCoreImplServletHealthCheckExecutorServletInfo> response = api.orgApacheSlingHcCoreImplServletHealthCheckExecutorServlet(post, apply, delete, action, $location, propertylist, servletPath, disabled, corsAccessControlAllowOrigin , accept);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void orgApacheSlingHcCoreImplServletResultTxtVerboseSerializerTest() throws Exception {
        Boolean post = null;
        Boolean apply = null;
        Boolean delete = null;
        String action = null;
        String $location = null;
        List<String> propertylist = null;
        Integer totalWidth = null;
        Integer colWidthName = null;
        Integer colWidthResult = null;
        Integer colWidthTiming = null;
    ResponseEntity<OrgApacheSlingHcCoreImplServletResultTxtVerboseSerializerInfo> response = api.orgApacheSlingHcCoreImplServletResultTxtVerboseSerializer(post, apply, delete, action, $location, propertylist, totalWidth, colWidthName, colWidthResult, colWidthTiming , accept);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void orgApacheSlingI18nImplI18NFilterTest() throws Exception {
        Boolean post = null;
        Boolean apply = null;
        Boolean delete = null;
        String action = null;
        String $location = null;
        List<String> propertylist = null;
        Integer serviceRanking = null;
        List<String> slingFilterScope = null;
    ResponseEntity<OrgApacheSlingI18nImplI18NFilterInfo> response = api.orgApacheSlingI18nImplI18NFilter(post, apply, delete, action, $location, propertylist, serviceRanking, slingFilterScope , accept);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void orgApacheSlingI18nImplJcrResourceBundleProviderTest() throws Exception {
        Boolean post = null;
        Boolean apply = null;
        Boolean delete = null;
        String action = null;
        String $location = null;
        List<String> propertylist = null;
        String localeDefault = null;
        Boolean preloadBundles = null;
        Integer invalidationDelay = null;
    ResponseEntity<OrgApacheSlingI18nImplJcrResourceBundleProviderInfo> response = api.orgApacheSlingI18nImplJcrResourceBundleProvider(post, apply, delete, action, $location, propertylist, localeDefault, preloadBundles, invalidationDelay , accept);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void orgApacheSlingInstallerProviderJcrImplJcrInstallerTest() throws Exception {
        Boolean post = null;
        Boolean apply = null;
        Boolean delete = null;
        String action = null;
        String $location = null;
        List<String> propertylist = null;
        List<String> handlerSchemes = null;
        String slingJcrinstallFolderNameRegexp = null;
        Integer slingJcrinstallFolderMaxDepth = null;
        List<String> slingJcrinstallSearchPath = null;
        String slingJcrinstallNewConfigPath = null;
        String slingJcrinstallSignalPath = null;
        Boolean slingJcrinstallEnableWriteback = null;
    ResponseEntity<OrgApacheSlingInstallerProviderJcrImplJcrInstallerInfo> response = api.orgApacheSlingInstallerProviderJcrImplJcrInstaller(post, apply, delete, action, $location, propertylist, handlerSchemes, slingJcrinstallFolderNameRegexp, slingJcrinstallFolderMaxDepth, slingJcrinstallSearchPath, slingJcrinstallNewConfigPath, slingJcrinstallSignalPath, slingJcrinstallEnableWriteback , accept);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void orgApacheSlingJcrBaseInternalLoginAdminWhitelistTest() throws Exception {
        Boolean post = null;
        Boolean apply = null;
        Boolean delete = null;
        String action = null;
        String $location = null;
        List<String> propertylist = null;
        Boolean whitelistBypass = null;
        String whitelistBundlesRegexp = null;
    ResponseEntity<OrgApacheSlingJcrBaseInternalLoginAdminWhitelistInfo> response = api.orgApacheSlingJcrBaseInternalLoginAdminWhitelist(post, apply, delete, action, $location, propertylist, whitelistBypass, whitelistBundlesRegexp , accept);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void orgApacheSlingJcrBaseInternalLoginAdminWhitelistFragmentTest() throws Exception {
        Boolean post = null;
        Boolean apply = null;
        Boolean delete = null;
        String action = null;
        String $location = null;
        List<String> propertylist = null;
        String whitelistName = null;
        List<String> whitelistBundles = null;
    ResponseEntity<OrgApacheSlingJcrBaseInternalLoginAdminWhitelistFragmentInfo> response = api.orgApacheSlingJcrBaseInternalLoginAdminWhitelistFragment(post, apply, delete, action, $location, propertylist, whitelistName, whitelistBundles , accept);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void orgApacheSlingJcrDavexImplServletsSlingDavExServletTest() throws Exception {
        Boolean post = null;
        Boolean apply = null;
        Boolean delete = null;
        String action = null;
        String $location = null;
        List<String> propertylist = null;
        String alias = null;
        Boolean davCreateAbsoluteUri = null;
        String davProtectedhandlers = null;
    ResponseEntity<OrgApacheSlingJcrDavexImplServletsSlingDavExServletInfo> response = api.orgApacheSlingJcrDavexImplServletsSlingDavExServlet(post, apply, delete, action, $location, propertylist, alias, davCreateAbsoluteUri, davProtectedhandlers , accept);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void orgApacheSlingJcrJackrabbitServerJndiRegistrationSupportTest() throws Exception {
        Boolean post = null;
        Boolean apply = null;
        Boolean delete = null;
        String action = null;
        String $location = null;
        List<String> propertylist = null;
        String javaNamingFactoryInitial = null;
        String javaNamingProviderUrl = null;
    ResponseEntity<OrgApacheSlingJcrJackrabbitServerJndiRegistrationSupportInfo> response = api.orgApacheSlingJcrJackrabbitServerJndiRegistrationSupport(post, apply, delete, action, $location, propertylist, javaNamingFactoryInitial, javaNamingProviderUrl , accept);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void orgApacheSlingJcrJackrabbitServerRmiRegistrationSupportTest() throws Exception {
        Boolean post = null;
        Boolean apply = null;
        Boolean delete = null;
        String action = null;
        String $location = null;
        List<String> propertylist = null;
        Integer port = null;
    ResponseEntity<OrgApacheSlingJcrJackrabbitServerRmiRegistrationSupportInfo> response = api.orgApacheSlingJcrJackrabbitServerRmiRegistrationSupport(post, apply, delete, action, $location, propertylist, port , accept);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void orgApacheSlingJcrRepoinitImplRepositoryInitializerTest() throws Exception {
        Boolean post = null;
        Boolean apply = null;
        Boolean delete = null;
        String action = null;
        String $location = null;
        List<String> propertylist = null;
        List<String> references = null;
    ResponseEntity<OrgApacheSlingJcrRepoinitImplRepositoryInitializerInfo> response = api.orgApacheSlingJcrRepoinitImplRepositoryInitializer(post, apply, delete, action, $location, propertylist, references , accept);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void orgApacheSlingJcrRepoinitRepositoryInitializerTest() throws Exception {
        Boolean post = null;
        Boolean apply = null;
        Boolean delete = null;
        String action = null;
        String $location = null;
        List<String> propertylist = null;
        List<String> references = null;
        List<String> scripts = null;
    ResponseEntity<OrgApacheSlingJcrRepoinitRepositoryInitializerInfo> response = api.orgApacheSlingJcrRepoinitRepositoryInitializer(post, apply, delete, action, $location, propertylist, references, scripts , accept);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void orgApacheSlingJcrResourceInternalJcrResourceResolverFactoryImplTest() throws Exception {
        Boolean post = null;
        Boolean apply = null;
        Boolean delete = null;
        String action = null;
        String $location = null;
        List<String> propertylist = null;
        List<String> resourceResolverSearchpath = null;
        Boolean resourceResolverManglenamespaces = null;
        Boolean resourceResolverAllowDirect = null;
        List<String> resourceResolverRequiredProviders = null;
        List<String> resourceResolverRequiredProvidernames = null;
        List<String> resourceResolverVirtual = null;
        List<String> resourceResolverMapping = null;
        String resourceResolverMapLocation = null;
        List<String> resourceResolverMapObservation = null;
        Integer resourceResolverDefaultVanityRedirectStatus = null;
        Boolean resourceResolverEnableVanitypath = null;
        Integer resourceResolverVanitypathMaxEntries = null;
        Boolean resourceResolverVanitypathMaxEntriesStartup = null;
        Integer resourceResolverVanitypathBloomfilterMaxBytes = null;
        Boolean resourceResolverOptimizeAliasResolution = null;
        List<String> resourceResolverVanitypathWhitelist = null;
        List<String> resourceResolverVanitypathBlacklist = null;
        Boolean resourceResolverVanityPrecedence = null;
        Boolean resourceResolverProviderhandlingParanoid = null;
        Boolean resourceResolverLogClosing = null;
        Boolean resourceResolverLogUnclosed = null;
    ResponseEntity<OrgApacheSlingJcrResourceInternalJcrResourceResolverFactoryImplInfo> response = api.orgApacheSlingJcrResourceInternalJcrResourceResolverFactoryImpl(post, apply, delete, action, $location, propertylist, resourceResolverSearchpath, resourceResolverManglenamespaces, resourceResolverAllowDirect, resourceResolverRequiredProviders, resourceResolverRequiredProvidernames, resourceResolverVirtual, resourceResolverMapping, resourceResolverMapLocation, resourceResolverMapObservation, resourceResolverDefaultVanityRedirectStatus, resourceResolverEnableVanitypath, resourceResolverVanitypathMaxEntries, resourceResolverVanitypathMaxEntriesStartup, resourceResolverVanitypathBloomfilterMaxBytes, resourceResolverOptimizeAliasResolution, resourceResolverVanitypathWhitelist, resourceResolverVanitypathBlacklist, resourceResolverVanityPrecedence, resourceResolverProviderhandlingParanoid, resourceResolverLogClosing, resourceResolverLogUnclosed , accept);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void orgApacheSlingJcrResourceInternalJcrSystemUserValidatorTest() throws Exception {
        Boolean post = null;
        Boolean apply = null;
        Boolean delete = null;
        String action = null;
        String $location = null;
        List<String> propertylist = null;
        Boolean allowOnlySystemUser = null;
    ResponseEntity<OrgApacheSlingJcrResourceInternalJcrSystemUserValidatorInfo> response = api.orgApacheSlingJcrResourceInternalJcrSystemUserValidator(post, apply, delete, action, $location, propertylist, allowOnlySystemUser , accept);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void orgApacheSlingJcrResourcesecurityImplResourceAccessGateFactoryTest() throws Exception {
        Boolean post = null;
        Boolean apply = null;
        Boolean delete = null;
        String action = null;
        String $location = null;
        List<String> propertylist = null;
        String path = null;
        String checkpathPrefix = null;
        String jcrPath = null;
    ResponseEntity<OrgApacheSlingJcrResourcesecurityImplResourceAccessGateFactoryInfo> response = api.orgApacheSlingJcrResourcesecurityImplResourceAccessGateFactory(post, apply, delete, action, $location, propertylist, path, checkpathPrefix, jcrPath , accept);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void orgApacheSlingJcrWebdavImplHandlerDefaultHandlerServiceTest() throws Exception {
        Boolean post = null;
        Boolean apply = null;
        Boolean delete = null;
        String action = null;
        String $location = null;
        List<String> propertylist = null;
        Integer serviceRanking = null;
        String typeCollections = null;
        String typeNoncollections = null;
        String typeContent = null;
    ResponseEntity<OrgApacheSlingJcrWebdavImplHandlerDefaultHandlerServiceInfo> response = api.orgApacheSlingJcrWebdavImplHandlerDefaultHandlerService(post, apply, delete, action, $location, propertylist, serviceRanking, typeCollections, typeNoncollections, typeContent , accept);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void orgApacheSlingJcrWebdavImplHandlerDirListingExportHandlerServicTest() throws Exception {
        Boolean post = null;
        Boolean apply = null;
        Boolean delete = null;
        String action = null;
        String $location = null;
        List<String> propertylist = null;
        Integer serviceRanking = null;
    ResponseEntity<OrgApacheSlingJcrWebdavImplHandlerDirListingExportHandlerServicInfo> response = api.orgApacheSlingJcrWebdavImplHandlerDirListingExportHandlerServic(post, apply, delete, action, $location, propertylist, serviceRanking , accept);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void orgApacheSlingJcrWebdavImplServletsSimpleWebDavServletTest() throws Exception {
        Boolean post = null;
        Boolean apply = null;
        Boolean delete = null;
        String action = null;
        String $location = null;
        List<String> propertylist = null;
        String davRoot = null;
        Boolean davCreateAbsoluteUri = null;
        String davRealm = null;
        List<String> collectionTypes = null;
        List<String> filterPrefixes = null;
        String filterTypes = null;
        String filterUris = null;
        String typeCollections = null;
        String typeNoncollections = null;
        String typeContent = null;
    ResponseEntity<OrgApacheSlingJcrWebdavImplServletsSimpleWebDavServletInfo> response = api.orgApacheSlingJcrWebdavImplServletsSimpleWebDavServlet(post, apply, delete, action, $location, propertylist, davRoot, davCreateAbsoluteUri, davRealm, collectionTypes, filterPrefixes, filterTypes, filterUris, typeCollections, typeNoncollections, typeContent , accept);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void orgApacheSlingJmxProviderImplJMXResourceProviderTest() throws Exception {
        Boolean post = null;
        Boolean apply = null;
        Boolean delete = null;
        String action = null;
        String $location = null;
        List<String> propertylist = null;
        String providerRoots = null;
    ResponseEntity<OrgApacheSlingJmxProviderImplJMXResourceProviderInfo> response = api.orgApacheSlingJmxProviderImplJMXResourceProvider(post, apply, delete, action, $location, propertylist, providerRoots , accept);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void orgApacheSlingModelsImplModelAdapterFactoryTest() throws Exception {
        Boolean post = null;
        Boolean apply = null;
        Boolean delete = null;
        String action = null;
        String $location = null;
        List<String> propertylist = null;
        String osgiHttpWhiteboardListener = null;
        String osgiHttpWhiteboardContextSelect = null;
        Integer maxRecursionDepth = null;
        Integer cleanupJobPeriod = null;
    ResponseEntity<OrgApacheSlingModelsImplModelAdapterFactoryInfo> response = api.orgApacheSlingModelsImplModelAdapterFactory(post, apply, delete, action, $location, propertylist, osgiHttpWhiteboardListener, osgiHttpWhiteboardContextSelect, maxRecursionDepth, cleanupJobPeriod , accept);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void orgApacheSlingModelsJacksonexporterImplResourceModuleProviderTest() throws Exception {
        Boolean post = null;
        Boolean apply = null;
        Boolean delete = null;
        String action = null;
        String $location = null;
        List<String> propertylist = null;
        Integer maxRecursionLevels = null;
    ResponseEntity<OrgApacheSlingModelsJacksonexporterImplResourceModuleProviderInfo> response = api.orgApacheSlingModelsJacksonexporterImplResourceModuleProvider(post, apply, delete, action, $location, propertylist, maxRecursionLevels , accept);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void orgApacheSlingResourceInventoryImplResourceInventoryPrinterFactoTest() throws Exception {
        Boolean post = null;
        Boolean apply = null;
        Boolean delete = null;
        String action = null;
        String $location = null;
        List<String> propertylist = null;
        String felixInventoryPrinterName = null;
        String felixInventoryPrinterTitle = null;
        String path = null;
    ResponseEntity<OrgApacheSlingResourceInventoryImplResourceInventoryPrinterFactoInfo> response = api.orgApacheSlingResourceInventoryImplResourceInventoryPrinterFacto(post, apply, delete, action, $location, propertylist, felixInventoryPrinterName, felixInventoryPrinterTitle, path , accept);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void orgApacheSlingResourcemergerImplMergedResourceProviderFactoryTest() throws Exception {
        Boolean post = null;
        Boolean apply = null;
        Boolean delete = null;
        String action = null;
        String $location = null;
        List<String> propertylist = null;
        String mergeRoot = null;
        Boolean mergeReadOnly = null;
    ResponseEntity<OrgApacheSlingResourcemergerImplMergedResourceProviderFactoryInfo> response = api.orgApacheSlingResourcemergerImplMergedResourceProviderFactory(post, apply, delete, action, $location, propertylist, mergeRoot, mergeReadOnly , accept);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void orgApacheSlingResourcemergerPickerOverridingTest() throws Exception {
        Boolean post = null;
        Boolean apply = null;
        Boolean delete = null;
        String action = null;
        String $location = null;
        List<String> propertylist = null;
        String mergeRoot = null;
        Boolean mergeReadOnly = null;
    ResponseEntity<OrgApacheSlingResourcemergerPickerOverridingInfo> response = api.orgApacheSlingResourcemergerPickerOverriding(post, apply, delete, action, $location, propertylist, mergeRoot, mergeReadOnly , accept);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void orgApacheSlingScriptingCoreImplScriptCacheImplTest() throws Exception {
        Boolean post = null;
        Boolean apply = null;
        Boolean delete = null;
        String action = null;
        String $location = null;
        List<String> propertylist = null;
        Integer orgApacheSlingScriptingCacheSize = null;
        List<String> orgApacheSlingScriptingCacheAdditionalExtensions = null;
    ResponseEntity<OrgApacheSlingScriptingCoreImplScriptCacheImplInfo> response = api.orgApacheSlingScriptingCoreImplScriptCacheImpl(post, apply, delete, action, $location, propertylist, orgApacheSlingScriptingCacheSize, orgApacheSlingScriptingCacheAdditionalExtensions , accept);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void orgApacheSlingScriptingCoreImplScriptingResourceResolverProviderTest() throws Exception {
        Boolean post = null;
        Boolean apply = null;
        Boolean delete = null;
        String action = null;
        String $location = null;
        List<String> propertylist = null;
        Boolean logStacktraceOnclose = null;
    ResponseEntity<OrgApacheSlingScriptingCoreImplScriptingResourceResolverProviderInfo> response = api.orgApacheSlingScriptingCoreImplScriptingResourceResolverProvider(post, apply, delete, action, $location, propertylist, logStacktraceOnclose , accept);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void orgApacheSlingScriptingJavaImplJavaScriptEngineFactoryTest() throws Exception {
        Boolean post = null;
        Boolean apply = null;
        Boolean delete = null;
        String action = null;
        String $location = null;
        List<String> propertylist = null;
        Boolean javaClassdebuginfo = null;
        String javaJavaEncoding = null;
        String javaCompilerSourceVM = null;
        String javaCompilerTargetVM = null;
    ResponseEntity<OrgApacheSlingScriptingJavaImplJavaScriptEngineFactoryInfo> response = api.orgApacheSlingScriptingJavaImplJavaScriptEngineFactory(post, apply, delete, action, $location, propertylist, javaClassdebuginfo, javaJavaEncoding, javaCompilerSourceVM, javaCompilerTargetVM , accept);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void orgApacheSlingScriptingJavascriptInternalRhinoJavaScriptEngineFaTest() throws Exception {
        Boolean post = null;
        Boolean apply = null;
        Boolean delete = null;
        String action = null;
        String $location = null;
        List<String> propertylist = null;
        Integer orgApacheSlingScriptingJavascriptRhinoOptLevel = null;
    ResponseEntity<OrgApacheSlingScriptingJavascriptInternalRhinoJavaScriptEngineFaInfo> response = api.orgApacheSlingScriptingJavascriptInternalRhinoJavaScriptEngineFa(post, apply, delete, action, $location, propertylist, orgApacheSlingScriptingJavascriptRhinoOptLevel , accept);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void orgApacheSlingScriptingJspJspScriptEngineFactoryTest() throws Exception {
        Boolean post = null;
        Boolean apply = null;
        Boolean delete = null;
        String action = null;
        String $location = null;
        List<String> propertylist = null;
        String jasperCompilerTargetVM = null;
        String jasperCompilerSourceVM = null;
        Boolean jasperClassdebuginfo = null;
        Boolean jasperEnablePooling = null;
        String jasperIeClassId = null;
        Boolean jasperGenStringAsCharArray = null;
        Boolean jasperKeepgenerated = null;
        Boolean jasperMappedfile = null;
        Boolean jasperTrimSpaces = null;
        Boolean jasperDisplaySourceFragments = null;
        Boolean defaultIsSession = null;
    ResponseEntity<OrgApacheSlingScriptingJspJspScriptEngineFactoryInfo> response = api.orgApacheSlingScriptingJspJspScriptEngineFactory(post, apply, delete, action, $location, propertylist, jasperCompilerTargetVM, jasperCompilerSourceVM, jasperClassdebuginfo, jasperEnablePooling, jasperIeClassId, jasperGenStringAsCharArray, jasperKeepgenerated, jasperMappedfile, jasperTrimSpaces, jasperDisplaySourceFragments, defaultIsSession , accept);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void orgApacheSlingScriptingSightlyJsImplJsapiSlyBindingsValuesProvTest() throws Exception {
        Boolean post = null;
        Boolean apply = null;
        Boolean delete = null;
        String action = null;
        String $location = null;
        List<String> propertylist = null;
        List<String> orgApacheSlingScriptingSightlyJsBindings = null;
    ResponseEntity<OrgApacheSlingScriptingSightlyJsImplJsapiSlyBindingsValuesProvInfo> response = api.orgApacheSlingScriptingSightlyJsImplJsapiSlyBindingsValuesProv(post, apply, delete, action, $location, propertylist, orgApacheSlingScriptingSightlyJsBindings , accept);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void orgApacheSlingSecurityImplContentDispositionFilterTest() throws Exception {
        Boolean post = null;
        Boolean apply = null;
        Boolean delete = null;
        String action = null;
        String $location = null;
        List<String> propertylist = null;
        List<String> slingContentDispositionPaths = null;
        List<String> slingContentDispositionExcludedPaths = null;
        Boolean slingContentDispositionAllPaths = null;
    ResponseEntity<OrgApacheSlingSecurityImplContentDispositionFilterInfo> response = api.orgApacheSlingSecurityImplContentDispositionFilter(post, apply, delete, action, $location, propertylist, slingContentDispositionPaths, slingContentDispositionExcludedPaths, slingContentDispositionAllPaths , accept);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void orgApacheSlingSecurityImplReferrerFilterTest() throws Exception {
        Boolean post = null;
        Boolean apply = null;
        Boolean delete = null;
        String action = null;
        String $location = null;
        List<String> propertylist = null;
        Boolean allowEmpty = null;
        List<String> allowHosts = null;
        List<String> allowHostsRegexp = null;
        List<String> filterMethods = null;
        List<String> excludeAgentsRegexp = null;
    ResponseEntity<OrgApacheSlingSecurityImplReferrerFilterInfo> response = api.orgApacheSlingSecurityImplReferrerFilter(post, apply, delete, action, $location, propertylist, allowEmpty, allowHosts, allowHostsRegexp, filterMethods, excludeAgentsRegexp , accept);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void orgApacheSlingServiceusermappingImplServiceUserMapperImplTest() throws Exception {
        Boolean post = null;
        Boolean apply = null;
        Boolean delete = null;
        String action = null;
        String $location = null;
        List<String> propertylist = null;
        List<String> userMapping = null;
        String userDefault = null;
        Boolean userEnableDefaultMapping = null;
        Boolean requireValidation = null;
    ResponseEntity<OrgApacheSlingServiceusermappingImplServiceUserMapperImplInfo> response = api.orgApacheSlingServiceusermappingImplServiceUserMapperImpl(post, apply, delete, action, $location, propertylist, userMapping, userDefault, userEnableDefaultMapping, requireValidation , accept);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void orgApacheSlingServiceusermappingImplServiceUserMapperImplAmendedTest() throws Exception {
        Boolean post = null;
        Boolean apply = null;
        Boolean delete = null;
        String action = null;
        String $location = null;
        List<String> propertylist = null;
        Integer serviceRanking = null;
        List<String> userMapping = null;
    ResponseEntity<OrgApacheSlingServiceusermappingImplServiceUserMapperImplAmendedInfo> response = api.orgApacheSlingServiceusermappingImplServiceUserMapperImplAmended(post, apply, delete, action, $location, propertylist, serviceRanking, userMapping , accept);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void orgApacheSlingServletsGetDefaultGetServletTest() throws Exception {
        Boolean post = null;
        Boolean apply = null;
        Boolean delete = null;
        String action = null;
        String $location = null;
        List<String> propertylist = null;
        List<String> aliases = null;
        Boolean index = null;
        List<String> indexFiles = null;
        Boolean enableHtml = null;
        Boolean enableJson = null;
        Boolean enableTxt = null;
        Boolean enableXml = null;
        Integer jsonMaximumresults = null;
        Boolean ecmaSuport = null;
    ResponseEntity<OrgApacheSlingServletsGetDefaultGetServletInfo> response = api.orgApacheSlingServletsGetDefaultGetServlet(post, apply, delete, action, $location, propertylist, aliases, index, indexFiles, enableHtml, enableJson, enableTxt, enableXml, jsonMaximumresults, ecmaSuport , accept);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void orgApacheSlingServletsGetImplVersionVersionInfoServletTest() throws Exception {
        Boolean post = null;
        Boolean apply = null;
        Boolean delete = null;
        String action = null;
        String $location = null;
        List<String> propertylist = null;
        List<String> slingServletSelectors = null;
        Boolean ecmaSuport = null;
    ResponseEntity<OrgApacheSlingServletsGetImplVersionVersionInfoServletInfo> response = api.orgApacheSlingServletsGetImplVersionVersionInfoServlet(post, apply, delete, action, $location, propertylist, slingServletSelectors, ecmaSuport , accept);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void orgApacheSlingServletsPostImplHelperChunkCleanUpTaskTest() throws Exception {
        Boolean post = null;
        Boolean apply = null;
        Boolean delete = null;
        String action = null;
        String $location = null;
        List<String> propertylist = null;
        String schedulerExpression = null;
        Boolean schedulerConcurrent = null;
        Integer chunkCleanupAge = null;
    ResponseEntity<OrgApacheSlingServletsPostImplHelperChunkCleanUpTaskInfo> response = api.orgApacheSlingServletsPostImplHelperChunkCleanUpTask(post, apply, delete, action, $location, propertylist, schedulerExpression, schedulerConcurrent, chunkCleanupAge , accept);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void orgApacheSlingServletsPostImplSlingPostServletTest() throws Exception {
        Boolean post = null;
        Boolean apply = null;
        Boolean delete = null;
        String action = null;
        String $location = null;
        List<String> propertylist = null;
        List<String> servletPostDateFormats = null;
        List<String> servletPostNodeNameHints = null;
        Integer servletPostNodeNameMaxLength = null;
        Boolean servletPostCheckinNewVersionableNodes = null;
        Boolean servletPostAutoCheckout = null;
        Boolean servletPostAutoCheckin = null;
        String servletPostIgnorePattern = null;
    ResponseEntity<OrgApacheSlingServletsPostImplSlingPostServletInfo> response = api.orgApacheSlingServletsPostImplSlingPostServlet(post, apply, delete, action, $location, propertylist, servletPostDateFormats, servletPostNodeNameHints, servletPostNodeNameMaxLength, servletPostCheckinNewVersionableNodes, servletPostAutoCheckout, servletPostAutoCheckin, servletPostIgnorePattern , accept);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void orgApacheSlingServletsResolverSlingServletResolverTest() throws Exception {
        Boolean post = null;
        Boolean apply = null;
        Boolean delete = null;
        String action = null;
        String $location = null;
        List<String> propertylist = null;
        String servletresolverServletRoot = null;
        Integer servletresolverCacheSize = null;
        List<String> servletresolverPaths = null;
        List<String> servletresolverDefaultExtensions = null;
    ResponseEntity<OrgApacheSlingServletsResolverSlingServletResolverInfo> response = api.orgApacheSlingServletsResolverSlingServletResolver(post, apply, delete, action, $location, propertylist, servletresolverServletRoot, servletresolverCacheSize, servletresolverPaths, servletresolverDefaultExtensions , accept);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void orgApacheSlingSettingsImplSlingSettingsServiceImplTest() throws Exception {
        Boolean post = null;
        Boolean apply = null;
        Boolean delete = null;
        String action = null;
        String $location = null;
        List<String> propertylist = null;
        String slingName = null;
        String slingDescription = null;
    ResponseEntity<OrgApacheSlingSettingsImplSlingSettingsServiceImplInfo> response = api.orgApacheSlingSettingsImplSlingSettingsServiceImpl(post, apply, delete, action, $location, propertylist, slingName, slingDescription , accept);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void orgApacheSlingStartupfilterImplStartupFilterImplTest() throws Exception {
        Boolean post = null;
        Boolean apply = null;
        Boolean delete = null;
        String action = null;
        String $location = null;
        List<String> propertylist = null;
        Boolean activeByDefault = null;
        String defaultMessage = null;
    ResponseEntity<OrgApacheSlingStartupfilterImplStartupFilterImplInfo> response = api.orgApacheSlingStartupfilterImplStartupFilterImpl(post, apply, delete, action, $location, propertylist, activeByDefault, defaultMessage , accept);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void orgApacheSlingTenantInternalTenantProviderImplTest() throws Exception {
        Boolean post = null;
        Boolean apply = null;
        Boolean delete = null;
        String action = null;
        String $location = null;
        List<String> propertylist = null;
        String tenantRoot = null;
        List<String> tenantPathMatcher = null;
    ResponseEntity<OrgApacheSlingTenantInternalTenantProviderImplInfo> response = api.orgApacheSlingTenantInternalTenantProviderImpl(post, apply, delete, action, $location, propertylist, tenantRoot, tenantPathMatcher , accept);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void orgApacheSlingTracerInternalLogTracerTest() throws Exception {
        Boolean post = null;
        Boolean apply = null;
        Boolean delete = null;
        String action = null;
        String $location = null;
        List<String> propertylist = null;
        List<String> tracerSets = null;
        Boolean enabled = null;
        Boolean servletEnabled = null;
        Integer recordingCacheSizeInMB = null;
        Integer recordingCacheDurationInSecs = null;
        Boolean recordingCompressionEnabled = null;
        Boolean gzipResponse = null;
    ResponseEntity<OrgApacheSlingTracerInternalLogTracerInfo> response = api.orgApacheSlingTracerInternalLogTracer(post, apply, delete, action, $location, propertylist, tracerSets, enabled, servletEnabled, recordingCacheSizeInMB, recordingCacheDurationInSecs, recordingCompressionEnabled, gzipResponse , accept);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void orgApacheSlingXssImplXSSFilterImplTest() throws Exception {
        Boolean post = null;
        Boolean apply = null;
        Boolean delete = null;
        String action = null;
        String $location = null;
        List<String> propertylist = null;
        String policyPath = null;
    ResponseEntity<OrgApacheSlingXssImplXSSFilterImplInfo> response = api.orgApacheSlingXssImplXSSFilterImpl(post, apply, delete, action, $location, propertylist, policyPath , accept);

        // TODO: test validations
    }
    
}
