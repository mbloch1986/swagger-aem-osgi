/**
 * Adobe Experience Manager OSGI config (AEM) API
 * Swagger AEM OSGI is an OpenAPI specification for Adobe Experience Manager (AEM) OSGI Configurations API
 *
 * OpenAPI spec version: 1.0.0-pre.0
 * Contact: opensource@shinesolutions.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


#include "OAIComAdobeGraniteRepositoryImplCommitStatsConfigProperties.h"

#include "OAIHelpers.h"

#include <QJsonDocument>
#include <QJsonArray>
#include <QObject>
#include <QDebug>

namespace OpenAPI {

OAIComAdobeGraniteRepositoryImplCommitStatsConfigProperties::OAIComAdobeGraniteRepositoryImplCommitStatsConfigProperties(QString json) {
    this->fromJson(json);
}

OAIComAdobeGraniteRepositoryImplCommitStatsConfigProperties::OAIComAdobeGraniteRepositoryImplCommitStatsConfigProperties() {
    this->init();
}

OAIComAdobeGraniteRepositoryImplCommitStatsConfigProperties::~OAIComAdobeGraniteRepositoryImplCommitStatsConfigProperties() {
    
}

void
OAIComAdobeGraniteRepositoryImplCommitStatsConfigProperties::init() {
    m_enabled_isSet = false;
    m_interval_seconds_isSet = false;
    m_commits_per_interval_threshold_isSet = false;
    m_max_location_length_isSet = false;
    m_max_details_shown_isSet = false;
    m_min_details_percentage_isSet = false;
    m_thread_matchers_isSet = false;
    m_max_greedy_depth_isSet = false;
    m_greedy_stack_matchers_isSet = false;
    m_stack_filters_isSet = false;
    m_stack_matchers_isSet = false;
    m_stack_categorizers_isSet = false;
    m_stack_shorteners_isSet = false;
}

void
OAIComAdobeGraniteRepositoryImplCommitStatsConfigProperties::fromJson(QString jsonString) {
    QByteArray array (jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void
OAIComAdobeGraniteRepositoryImplCommitStatsConfigProperties::fromJsonObject(QJsonObject json) {
    ::OpenAPI::fromJsonValue(enabled, json[QString("enabled")]);
    
    ::OpenAPI::fromJsonValue(interval_seconds, json[QString("intervalSeconds")]);
    
    ::OpenAPI::fromJsonValue(commits_per_interval_threshold, json[QString("commitsPerIntervalThreshold")]);
    
    ::OpenAPI::fromJsonValue(max_location_length, json[QString("maxLocationLength")]);
    
    ::OpenAPI::fromJsonValue(max_details_shown, json[QString("maxDetailsShown")]);
    
    ::OpenAPI::fromJsonValue(min_details_percentage, json[QString("minDetailsPercentage")]);
    
    ::OpenAPI::fromJsonValue(thread_matchers, json[QString("threadMatchers")]);
    
    ::OpenAPI::fromJsonValue(max_greedy_depth, json[QString("maxGreedyDepth")]);
    
    ::OpenAPI::fromJsonValue(greedy_stack_matchers, json[QString("greedyStackMatchers")]);
    
    ::OpenAPI::fromJsonValue(stack_filters, json[QString("stackFilters")]);
    
    ::OpenAPI::fromJsonValue(stack_matchers, json[QString("stackMatchers")]);
    
    ::OpenAPI::fromJsonValue(stack_categorizers, json[QString("stackCategorizers")]);
    
    ::OpenAPI::fromJsonValue(stack_shorteners, json[QString("stackShorteners")]);
    
}

QString
OAIComAdobeGraniteRepositoryImplCommitStatsConfigProperties::asJson () const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject
OAIComAdobeGraniteRepositoryImplCommitStatsConfigProperties::asJsonObject() const {
    QJsonObject obj;
	if(enabled.isSet()){
        obj.insert(QString("enabled"), ::OpenAPI::toJsonValue(enabled));
    }
	if(interval_seconds.isSet()){
        obj.insert(QString("intervalSeconds"), ::OpenAPI::toJsonValue(interval_seconds));
    }
	if(commits_per_interval_threshold.isSet()){
        obj.insert(QString("commitsPerIntervalThreshold"), ::OpenAPI::toJsonValue(commits_per_interval_threshold));
    }
	if(max_location_length.isSet()){
        obj.insert(QString("maxLocationLength"), ::OpenAPI::toJsonValue(max_location_length));
    }
	if(max_details_shown.isSet()){
        obj.insert(QString("maxDetailsShown"), ::OpenAPI::toJsonValue(max_details_shown));
    }
	if(min_details_percentage.isSet()){
        obj.insert(QString("minDetailsPercentage"), ::OpenAPI::toJsonValue(min_details_percentage));
    }
	if(thread_matchers.isSet()){
        obj.insert(QString("threadMatchers"), ::OpenAPI::toJsonValue(thread_matchers));
    }
	if(max_greedy_depth.isSet()){
        obj.insert(QString("maxGreedyDepth"), ::OpenAPI::toJsonValue(max_greedy_depth));
    }
	if(greedy_stack_matchers.isSet()){
        obj.insert(QString("greedyStackMatchers"), ::OpenAPI::toJsonValue(greedy_stack_matchers));
    }
	if(stack_filters.isSet()){
        obj.insert(QString("stackFilters"), ::OpenAPI::toJsonValue(stack_filters));
    }
	if(stack_matchers.isSet()){
        obj.insert(QString("stackMatchers"), ::OpenAPI::toJsonValue(stack_matchers));
    }
	if(stack_categorizers.isSet()){
        obj.insert(QString("stackCategorizers"), ::OpenAPI::toJsonValue(stack_categorizers));
    }
	if(stack_shorteners.isSet()){
        obj.insert(QString("stackShorteners"), ::OpenAPI::toJsonValue(stack_shorteners));
    }
    return obj;
}

OAIConfigNodePropertyBoolean
OAIComAdobeGraniteRepositoryImplCommitStatsConfigProperties::getEnabled() const {
    return enabled;
}
void
OAIComAdobeGraniteRepositoryImplCommitStatsConfigProperties::setEnabled(const OAIConfigNodePropertyBoolean &enabled) {
    this->enabled = enabled;
    this->m_enabled_isSet = true;
}

OAIConfigNodePropertyInteger
OAIComAdobeGraniteRepositoryImplCommitStatsConfigProperties::getIntervalSeconds() const {
    return interval_seconds;
}
void
OAIComAdobeGraniteRepositoryImplCommitStatsConfigProperties::setIntervalSeconds(const OAIConfigNodePropertyInteger &interval_seconds) {
    this->interval_seconds = interval_seconds;
    this->m_interval_seconds_isSet = true;
}

OAIConfigNodePropertyInteger
OAIComAdobeGraniteRepositoryImplCommitStatsConfigProperties::getCommitsPerIntervalThreshold() const {
    return commits_per_interval_threshold;
}
void
OAIComAdobeGraniteRepositoryImplCommitStatsConfigProperties::setCommitsPerIntervalThreshold(const OAIConfigNodePropertyInteger &commits_per_interval_threshold) {
    this->commits_per_interval_threshold = commits_per_interval_threshold;
    this->m_commits_per_interval_threshold_isSet = true;
}

OAIConfigNodePropertyInteger
OAIComAdobeGraniteRepositoryImplCommitStatsConfigProperties::getMaxLocationLength() const {
    return max_location_length;
}
void
OAIComAdobeGraniteRepositoryImplCommitStatsConfigProperties::setMaxLocationLength(const OAIConfigNodePropertyInteger &max_location_length) {
    this->max_location_length = max_location_length;
    this->m_max_location_length_isSet = true;
}

OAIConfigNodePropertyInteger
OAIComAdobeGraniteRepositoryImplCommitStatsConfigProperties::getMaxDetailsShown() const {
    return max_details_shown;
}
void
OAIComAdobeGraniteRepositoryImplCommitStatsConfigProperties::setMaxDetailsShown(const OAIConfigNodePropertyInteger &max_details_shown) {
    this->max_details_shown = max_details_shown;
    this->m_max_details_shown_isSet = true;
}

OAIConfigNodePropertyInteger
OAIComAdobeGraniteRepositoryImplCommitStatsConfigProperties::getMinDetailsPercentage() const {
    return min_details_percentage;
}
void
OAIComAdobeGraniteRepositoryImplCommitStatsConfigProperties::setMinDetailsPercentage(const OAIConfigNodePropertyInteger &min_details_percentage) {
    this->min_details_percentage = min_details_percentage;
    this->m_min_details_percentage_isSet = true;
}

OAIConfigNodePropertyArray
OAIComAdobeGraniteRepositoryImplCommitStatsConfigProperties::getThreadMatchers() const {
    return thread_matchers;
}
void
OAIComAdobeGraniteRepositoryImplCommitStatsConfigProperties::setThreadMatchers(const OAIConfigNodePropertyArray &thread_matchers) {
    this->thread_matchers = thread_matchers;
    this->m_thread_matchers_isSet = true;
}

OAIConfigNodePropertyInteger
OAIComAdobeGraniteRepositoryImplCommitStatsConfigProperties::getMaxGreedyDepth() const {
    return max_greedy_depth;
}
void
OAIComAdobeGraniteRepositoryImplCommitStatsConfigProperties::setMaxGreedyDepth(const OAIConfigNodePropertyInteger &max_greedy_depth) {
    this->max_greedy_depth = max_greedy_depth;
    this->m_max_greedy_depth_isSet = true;
}

OAIConfigNodePropertyString
OAIComAdobeGraniteRepositoryImplCommitStatsConfigProperties::getGreedyStackMatchers() const {
    return greedy_stack_matchers;
}
void
OAIComAdobeGraniteRepositoryImplCommitStatsConfigProperties::setGreedyStackMatchers(const OAIConfigNodePropertyString &greedy_stack_matchers) {
    this->greedy_stack_matchers = greedy_stack_matchers;
    this->m_greedy_stack_matchers_isSet = true;
}

OAIConfigNodePropertyArray
OAIComAdobeGraniteRepositoryImplCommitStatsConfigProperties::getStackFilters() const {
    return stack_filters;
}
void
OAIComAdobeGraniteRepositoryImplCommitStatsConfigProperties::setStackFilters(const OAIConfigNodePropertyArray &stack_filters) {
    this->stack_filters = stack_filters;
    this->m_stack_filters_isSet = true;
}

OAIConfigNodePropertyArray
OAIComAdobeGraniteRepositoryImplCommitStatsConfigProperties::getStackMatchers() const {
    return stack_matchers;
}
void
OAIComAdobeGraniteRepositoryImplCommitStatsConfigProperties::setStackMatchers(const OAIConfigNodePropertyArray &stack_matchers) {
    this->stack_matchers = stack_matchers;
    this->m_stack_matchers_isSet = true;
}

OAIConfigNodePropertyArray
OAIComAdobeGraniteRepositoryImplCommitStatsConfigProperties::getStackCategorizers() const {
    return stack_categorizers;
}
void
OAIComAdobeGraniteRepositoryImplCommitStatsConfigProperties::setStackCategorizers(const OAIConfigNodePropertyArray &stack_categorizers) {
    this->stack_categorizers = stack_categorizers;
    this->m_stack_categorizers_isSet = true;
}

OAIConfigNodePropertyArray
OAIComAdobeGraniteRepositoryImplCommitStatsConfigProperties::getStackShorteners() const {
    return stack_shorteners;
}
void
OAIComAdobeGraniteRepositoryImplCommitStatsConfigProperties::setStackShorteners(const OAIConfigNodePropertyArray &stack_shorteners) {
    this->stack_shorteners = stack_shorteners;
    this->m_stack_shorteners_isSet = true;
}


bool
OAIComAdobeGraniteRepositoryImplCommitStatsConfigProperties::isSet() const {
    bool isObjectUpdated = false;
    do{ 
        if(enabled.isSet()){ isObjectUpdated = true; break;}
    
        if(interval_seconds.isSet()){ isObjectUpdated = true; break;}
    
        if(commits_per_interval_threshold.isSet()){ isObjectUpdated = true; break;}
    
        if(max_location_length.isSet()){ isObjectUpdated = true; break;}
    
        if(max_details_shown.isSet()){ isObjectUpdated = true; break;}
    
        if(min_details_percentage.isSet()){ isObjectUpdated = true; break;}
    
        if(thread_matchers.isSet()){ isObjectUpdated = true; break;}
    
        if(max_greedy_depth.isSet()){ isObjectUpdated = true; break;}
    
        if(greedy_stack_matchers.isSet()){ isObjectUpdated = true; break;}
    
        if(stack_filters.isSet()){ isObjectUpdated = true; break;}
    
        if(stack_matchers.isSet()){ isObjectUpdated = true; break;}
    
        if(stack_categorizers.isSet()){ isObjectUpdated = true; break;}
    
        if(stack_shorteners.isSet()){ isObjectUpdated = true; break;}
    }while(false);
    return isObjectUpdated;
}

}

