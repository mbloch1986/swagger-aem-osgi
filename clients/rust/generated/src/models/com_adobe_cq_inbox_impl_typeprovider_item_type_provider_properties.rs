/* 
 * Adobe Experience Manager OSGI config (AEM) API
 *
 * Swagger AEM OSGI is an OpenAPI specification for Adobe Experience Manager (AEM) OSGI Configurations API
 *
 * OpenAPI spec version: 1.0.0-pre.0
 * Contact: opensource@shinesolutions.com
 * Generated by: https://openapi-generator.tech
 */


#[allow(unused_imports)]
use serde_json::Value;

#[derive(Debug, Serialize, Deserialize)]
pub struct ComAdobeCqInboxImplTypeproviderItemTypeProviderProperties {
  #[serde(rename = "inbox.impl.typeprovider.registrypaths")]
  inbox_impl_typeprovider_registrypaths: Option<::models::ConfigNodePropertyArray>,
  #[serde(rename = "inbox.impl.typeprovider.legacypaths")]
  inbox_impl_typeprovider_legacypaths: Option<::models::ConfigNodePropertyArray>,
  #[serde(rename = "inbox.impl.typeprovider.defaulturl.failureitem")]
  inbox_impl_typeprovider_defaulturl_failureitem: Option<::models::ConfigNodePropertyString>,
  #[serde(rename = "inbox.impl.typeprovider.defaulturl.workitem")]
  inbox_impl_typeprovider_defaulturl_workitem: Option<::models::ConfigNodePropertyString>,
  #[serde(rename = "inbox.impl.typeprovider.defaulturl.task")]
  inbox_impl_typeprovider_defaulturl_task: Option<::models::ConfigNodePropertyString>
}

impl ComAdobeCqInboxImplTypeproviderItemTypeProviderProperties {
  pub fn new() -> ComAdobeCqInboxImplTypeproviderItemTypeProviderProperties {
    ComAdobeCqInboxImplTypeproviderItemTypeProviderProperties {
      inbox_impl_typeprovider_registrypaths: None,
      inbox_impl_typeprovider_legacypaths: None,
      inbox_impl_typeprovider_defaulturl_failureitem: None,
      inbox_impl_typeprovider_defaulturl_workitem: None,
      inbox_impl_typeprovider_defaulturl_task: None
    }
  }

  pub fn set_inbox_impl_typeprovider_registrypaths(&mut self, inbox_impl_typeprovider_registrypaths: ::models::ConfigNodePropertyArray) {
    self.inbox_impl_typeprovider_registrypaths = Some(inbox_impl_typeprovider_registrypaths);
  }

  pub fn with_inbox_impl_typeprovider_registrypaths(mut self, inbox_impl_typeprovider_registrypaths: ::models::ConfigNodePropertyArray) -> ComAdobeCqInboxImplTypeproviderItemTypeProviderProperties {
    self.inbox_impl_typeprovider_registrypaths = Some(inbox_impl_typeprovider_registrypaths);
    self
  }

  pub fn inbox_impl_typeprovider_registrypaths(&self) -> Option<&::models::ConfigNodePropertyArray> {
    self.inbox_impl_typeprovider_registrypaths.as_ref()
  }

  pub fn reset_inbox_impl_typeprovider_registrypaths(&mut self) {
    self.inbox_impl_typeprovider_registrypaths = None;
  }

  pub fn set_inbox_impl_typeprovider_legacypaths(&mut self, inbox_impl_typeprovider_legacypaths: ::models::ConfigNodePropertyArray) {
    self.inbox_impl_typeprovider_legacypaths = Some(inbox_impl_typeprovider_legacypaths);
  }

  pub fn with_inbox_impl_typeprovider_legacypaths(mut self, inbox_impl_typeprovider_legacypaths: ::models::ConfigNodePropertyArray) -> ComAdobeCqInboxImplTypeproviderItemTypeProviderProperties {
    self.inbox_impl_typeprovider_legacypaths = Some(inbox_impl_typeprovider_legacypaths);
    self
  }

  pub fn inbox_impl_typeprovider_legacypaths(&self) -> Option<&::models::ConfigNodePropertyArray> {
    self.inbox_impl_typeprovider_legacypaths.as_ref()
  }

  pub fn reset_inbox_impl_typeprovider_legacypaths(&mut self) {
    self.inbox_impl_typeprovider_legacypaths = None;
  }

  pub fn set_inbox_impl_typeprovider_defaulturl_failureitem(&mut self, inbox_impl_typeprovider_defaulturl_failureitem: ::models::ConfigNodePropertyString) {
    self.inbox_impl_typeprovider_defaulturl_failureitem = Some(inbox_impl_typeprovider_defaulturl_failureitem);
  }

  pub fn with_inbox_impl_typeprovider_defaulturl_failureitem(mut self, inbox_impl_typeprovider_defaulturl_failureitem: ::models::ConfigNodePropertyString) -> ComAdobeCqInboxImplTypeproviderItemTypeProviderProperties {
    self.inbox_impl_typeprovider_defaulturl_failureitem = Some(inbox_impl_typeprovider_defaulturl_failureitem);
    self
  }

  pub fn inbox_impl_typeprovider_defaulturl_failureitem(&self) -> Option<&::models::ConfigNodePropertyString> {
    self.inbox_impl_typeprovider_defaulturl_failureitem.as_ref()
  }

  pub fn reset_inbox_impl_typeprovider_defaulturl_failureitem(&mut self) {
    self.inbox_impl_typeprovider_defaulturl_failureitem = None;
  }

  pub fn set_inbox_impl_typeprovider_defaulturl_workitem(&mut self, inbox_impl_typeprovider_defaulturl_workitem: ::models::ConfigNodePropertyString) {
    self.inbox_impl_typeprovider_defaulturl_workitem = Some(inbox_impl_typeprovider_defaulturl_workitem);
  }

  pub fn with_inbox_impl_typeprovider_defaulturl_workitem(mut self, inbox_impl_typeprovider_defaulturl_workitem: ::models::ConfigNodePropertyString) -> ComAdobeCqInboxImplTypeproviderItemTypeProviderProperties {
    self.inbox_impl_typeprovider_defaulturl_workitem = Some(inbox_impl_typeprovider_defaulturl_workitem);
    self
  }

  pub fn inbox_impl_typeprovider_defaulturl_workitem(&self) -> Option<&::models::ConfigNodePropertyString> {
    self.inbox_impl_typeprovider_defaulturl_workitem.as_ref()
  }

  pub fn reset_inbox_impl_typeprovider_defaulturl_workitem(&mut self) {
    self.inbox_impl_typeprovider_defaulturl_workitem = None;
  }

  pub fn set_inbox_impl_typeprovider_defaulturl_task(&mut self, inbox_impl_typeprovider_defaulturl_task: ::models::ConfigNodePropertyString) {
    self.inbox_impl_typeprovider_defaulturl_task = Some(inbox_impl_typeprovider_defaulturl_task);
  }

  pub fn with_inbox_impl_typeprovider_defaulturl_task(mut self, inbox_impl_typeprovider_defaulturl_task: ::models::ConfigNodePropertyString) -> ComAdobeCqInboxImplTypeproviderItemTypeProviderProperties {
    self.inbox_impl_typeprovider_defaulturl_task = Some(inbox_impl_typeprovider_defaulturl_task);
    self
  }

  pub fn inbox_impl_typeprovider_defaulturl_task(&self) -> Option<&::models::ConfigNodePropertyString> {
    self.inbox_impl_typeprovider_defaulturl_task.as_ref()
  }

  pub fn reset_inbox_impl_typeprovider_defaulturl_task(&mut self) {
    self.inbox_impl_typeprovider_defaulturl_task = None;
  }

}



