/**
* Adobe Experience Manager OSGI config (AEM) API
* Swagger AEM OSGI is an OpenAPI specification for Adobe Experience Manager (AEM) OSGI Configurations API
*
* OpenAPI spec version: 1.0.0-pre.0
* Contact: opensource@shinesolutions.com
*
* NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
* https://openapi-generator.tech
* Do not edit the class manually.
*/


#include "ComAdobeGraniteRestImplServletDefaultGETServletProperties.h"

namespace org {
namespace openapitools {
namespace server {
namespace model {

ComAdobeGraniteRestImplServletDefaultGETServletProperties::ComAdobeGraniteRestImplServletDefaultGETServletProperties()
{
    m_Default_limitIsSet = false;
    m_Use_absolute_uriIsSet = false;
    
}

ComAdobeGraniteRestImplServletDefaultGETServletProperties::~ComAdobeGraniteRestImplServletDefaultGETServletProperties()
{
}

void ComAdobeGraniteRestImplServletDefaultGETServletProperties::validate()
{
    // TODO: implement validation
}

nlohmann::json ComAdobeGraniteRestImplServletDefaultGETServletProperties::toJson() const
{
    nlohmann::json val = nlohmann::json::object();

    if(m_Default_limitIsSet)
    {
        val["default.limit"] = ModelBase::toJson(m_Default_limit);
    }
    if(m_Use_absolute_uriIsSet)
    {
        val["use.absolute.uri"] = ModelBase::toJson(m_Use_absolute_uri);
    }
    

    return val;
}

void ComAdobeGraniteRestImplServletDefaultGETServletProperties::fromJson(nlohmann::json& val)
{
    if(val.find("default.limit") != val.end())
    {
        if(!val["default.limit"].is_null())
        {
            ConfigNodePropertyInteger newItem;
            newItem.fromJson(val["default.limit"]);
            setDefaultLimit( newItem );
        }
        
    }
    if(val.find("use.absolute.uri") != val.end())
    {
        if(!val["use.absolute.uri"].is_null())
        {
            ConfigNodePropertyBoolean newItem;
            newItem.fromJson(val["use.absolute.uri"]);
            setUseAbsoluteUri( newItem );
        }
        
    }
    
}


ConfigNodePropertyInteger ComAdobeGraniteRestImplServletDefaultGETServletProperties::getDefaultLimit() const
{
    return m_Default_limit;
}
void ComAdobeGraniteRestImplServletDefaultGETServletProperties::setDefaultLimit(ConfigNodePropertyInteger const& value)
{
    m_Default_limit = value;
    m_Default_limitIsSet = true;
}
bool ComAdobeGraniteRestImplServletDefaultGETServletProperties::defaultLimitIsSet() const
{
    return m_Default_limitIsSet;
}
void ComAdobeGraniteRestImplServletDefaultGETServletProperties::unsetDefault_limit()
{
    m_Default_limitIsSet = false;
}
ConfigNodePropertyBoolean ComAdobeGraniteRestImplServletDefaultGETServletProperties::getUseAbsoluteUri() const
{
    return m_Use_absolute_uri;
}
void ComAdobeGraniteRestImplServletDefaultGETServletProperties::setUseAbsoluteUri(ConfigNodePropertyBoolean const& value)
{
    m_Use_absolute_uri = value;
    m_Use_absolute_uriIsSet = true;
}
bool ComAdobeGraniteRestImplServletDefaultGETServletProperties::useAbsoluteUriIsSet() const
{
    return m_Use_absolute_uriIsSet;
}
void ComAdobeGraniteRestImplServletDefaultGETServletProperties::unsetUse_absolute_uri()
{
    m_Use_absolute_uriIsSet = false;
}

}
}
}
}

