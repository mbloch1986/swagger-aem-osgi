/**
 * Adobe Experience Manager OSGI config (AEM) API
 * Swagger AEM OSGI is an OpenAPI specification for Adobe Experience Manager (AEM) OSGI Configurations API
 *
 * OpenAPI spec version: 1.0.0-pre.0
 * Contact: opensource@shinesolutions.com
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 3.2.1-SNAPSHOT.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */



#include "ComDayCqWcmMobileCoreImplDeviceDeviceInfoTransformerFactoryInfo.h"

namespace org {
namespace openapitools {
namespace client {
namespace model {

ComDayCqWcmMobileCoreImplDeviceDeviceInfoTransformerFactoryInfo::ComDayCqWcmMobileCoreImplDeviceDeviceInfoTransformerFactoryInfo()
{
    m_Pid = utility::conversions::to_string_t("");
    m_PidIsSet = false;
    m_Title = utility::conversions::to_string_t("");
    m_TitleIsSet = false;
    m_Description = utility::conversions::to_string_t("");
    m_DescriptionIsSet = false;
    m_PropertiesIsSet = false;
    m_Bundle_location = utility::conversions::to_string_t("");
    m_Bundle_locationIsSet = false;
    m_Service_location = utility::conversions::to_string_t("");
    m_Service_locationIsSet = false;
}

ComDayCqWcmMobileCoreImplDeviceDeviceInfoTransformerFactoryInfo::~ComDayCqWcmMobileCoreImplDeviceDeviceInfoTransformerFactoryInfo()
{
}

void ComDayCqWcmMobileCoreImplDeviceDeviceInfoTransformerFactoryInfo::validate()
{
    // TODO: implement validation
}

web::json::value ComDayCqWcmMobileCoreImplDeviceDeviceInfoTransformerFactoryInfo::toJson() const
{
    web::json::value val = web::json::value::object();

    if(m_PidIsSet)
    {
        val[utility::conversions::to_string_t("pid")] = ModelBase::toJson(m_Pid);
    }
    if(m_TitleIsSet)
    {
        val[utility::conversions::to_string_t("title")] = ModelBase::toJson(m_Title);
    }
    if(m_DescriptionIsSet)
    {
        val[utility::conversions::to_string_t("description")] = ModelBase::toJson(m_Description);
    }
    if(m_PropertiesIsSet)
    {
        val[utility::conversions::to_string_t("properties")] = ModelBase::toJson(m_Properties);
    }
    if(m_Bundle_locationIsSet)
    {
        val[utility::conversions::to_string_t("bundle_location")] = ModelBase::toJson(m_Bundle_location);
    }
    if(m_Service_locationIsSet)
    {
        val[utility::conversions::to_string_t("service_location")] = ModelBase::toJson(m_Service_location);
    }

    return val;
}

void ComDayCqWcmMobileCoreImplDeviceDeviceInfoTransformerFactoryInfo::fromJson(web::json::value& val)
{
    if(val.has_field(utility::conversions::to_string_t("pid")))
    {
        setPid(ModelBase::stringFromJson(val[utility::conversions::to_string_t("pid")]));
    }
    if(val.has_field(utility::conversions::to_string_t("title")))
    {
        setTitle(ModelBase::stringFromJson(val[utility::conversions::to_string_t("title")]));
    }
    if(val.has_field(utility::conversions::to_string_t("description")))
    {
        setDescription(ModelBase::stringFromJson(val[utility::conversions::to_string_t("description")]));
    }
    if(val.has_field(utility::conversions::to_string_t("properties")))
    {
        if(!val[utility::conversions::to_string_t("properties")].is_null())
        {
            std::shared_ptr<ComDayCqWcmMobileCoreImplDeviceDeviceInfoTransformerFactoryProperties> newItem(new ComDayCqWcmMobileCoreImplDeviceDeviceInfoTransformerFactoryProperties());
            newItem->fromJson(val[utility::conversions::to_string_t("properties")]);
            setProperties( newItem );
        }
    }
    if(val.has_field(utility::conversions::to_string_t("bundle_location")))
    {
        setBundleLocation(ModelBase::stringFromJson(val[utility::conversions::to_string_t("bundle_location")]));
    }
    if(val.has_field(utility::conversions::to_string_t("service_location")))
    {
        setServiceLocation(ModelBase::stringFromJson(val[utility::conversions::to_string_t("service_location")]));
    }
}

void ComDayCqWcmMobileCoreImplDeviceDeviceInfoTransformerFactoryInfo::toMultipart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix) const
{
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t("."))
    {
        namePrefix += utility::conversions::to_string_t(".");
    }

    if(m_PidIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("pid"), m_Pid));
    }
    if(m_TitleIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("title"), m_Title));
    }
    if(m_DescriptionIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("description"), m_Description));
    }
    if(m_PropertiesIsSet)
    {
        if (m_Properties.get())
        {
            m_Properties->toMultipart(multipart, utility::conversions::to_string_t("properties."));
        }
    }
    if(m_Bundle_locationIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("bundle_location"), m_Bundle_location));
    }
    if(m_Service_locationIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("service_location"), m_Service_location));
    }
}

void ComDayCqWcmMobileCoreImplDeviceDeviceInfoTransformerFactoryInfo::fromMultiPart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix)
{
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t("."))
    {
        namePrefix += utility::conversions::to_string_t(".");
    }

    if(multipart->hasContent(utility::conversions::to_string_t("pid")))
    {
        setPid(ModelBase::stringFromHttpContent(multipart->getContent(utility::conversions::to_string_t("pid"))));
    }
    if(multipart->hasContent(utility::conversions::to_string_t("title")))
    {
        setTitle(ModelBase::stringFromHttpContent(multipart->getContent(utility::conversions::to_string_t("title"))));
    }
    if(multipart->hasContent(utility::conversions::to_string_t("description")))
    {
        setDescription(ModelBase::stringFromHttpContent(multipart->getContent(utility::conversions::to_string_t("description"))));
    }
    if(multipart->hasContent(utility::conversions::to_string_t("properties")))
    {
        if(multipart->hasContent(utility::conversions::to_string_t("properties")))
        {
            std::shared_ptr<ComDayCqWcmMobileCoreImplDeviceDeviceInfoTransformerFactoryProperties> newItem(new ComDayCqWcmMobileCoreImplDeviceDeviceInfoTransformerFactoryProperties());
            newItem->fromMultiPart(multipart, utility::conversions::to_string_t("properties."));
            setProperties( newItem );
        }
    }
    if(multipart->hasContent(utility::conversions::to_string_t("bundle_location")))
    {
        setBundleLocation(ModelBase::stringFromHttpContent(multipart->getContent(utility::conversions::to_string_t("bundle_location"))));
    }
    if(multipart->hasContent(utility::conversions::to_string_t("service_location")))
    {
        setServiceLocation(ModelBase::stringFromHttpContent(multipart->getContent(utility::conversions::to_string_t("service_location"))));
    }
}

utility::string_t ComDayCqWcmMobileCoreImplDeviceDeviceInfoTransformerFactoryInfo::getPid() const
{
    return m_Pid;
}


void ComDayCqWcmMobileCoreImplDeviceDeviceInfoTransformerFactoryInfo::setPid(utility::string_t value)
{
    m_Pid = value;
    m_PidIsSet = true;
}
bool ComDayCqWcmMobileCoreImplDeviceDeviceInfoTransformerFactoryInfo::pidIsSet() const
{
    return m_PidIsSet;
}

void ComDayCqWcmMobileCoreImplDeviceDeviceInfoTransformerFactoryInfo::unsetPid()
{
    m_PidIsSet = false;
}

utility::string_t ComDayCqWcmMobileCoreImplDeviceDeviceInfoTransformerFactoryInfo::getTitle() const
{
    return m_Title;
}


void ComDayCqWcmMobileCoreImplDeviceDeviceInfoTransformerFactoryInfo::setTitle(utility::string_t value)
{
    m_Title = value;
    m_TitleIsSet = true;
}
bool ComDayCqWcmMobileCoreImplDeviceDeviceInfoTransformerFactoryInfo::titleIsSet() const
{
    return m_TitleIsSet;
}

void ComDayCqWcmMobileCoreImplDeviceDeviceInfoTransformerFactoryInfo::unsetTitle()
{
    m_TitleIsSet = false;
}

utility::string_t ComDayCqWcmMobileCoreImplDeviceDeviceInfoTransformerFactoryInfo::getDescription() const
{
    return m_Description;
}


void ComDayCqWcmMobileCoreImplDeviceDeviceInfoTransformerFactoryInfo::setDescription(utility::string_t value)
{
    m_Description = value;
    m_DescriptionIsSet = true;
}
bool ComDayCqWcmMobileCoreImplDeviceDeviceInfoTransformerFactoryInfo::descriptionIsSet() const
{
    return m_DescriptionIsSet;
}

void ComDayCqWcmMobileCoreImplDeviceDeviceInfoTransformerFactoryInfo::unsetDescription()
{
    m_DescriptionIsSet = false;
}

std::shared_ptr<ComDayCqWcmMobileCoreImplDeviceDeviceInfoTransformerFactoryProperties> ComDayCqWcmMobileCoreImplDeviceDeviceInfoTransformerFactoryInfo::getProperties() const
{
    return m_Properties;
}


void ComDayCqWcmMobileCoreImplDeviceDeviceInfoTransformerFactoryInfo::setProperties(std::shared_ptr<ComDayCqWcmMobileCoreImplDeviceDeviceInfoTransformerFactoryProperties> value)
{
    m_Properties = value;
    m_PropertiesIsSet = true;
}
bool ComDayCqWcmMobileCoreImplDeviceDeviceInfoTransformerFactoryInfo::propertiesIsSet() const
{
    return m_PropertiesIsSet;
}

void ComDayCqWcmMobileCoreImplDeviceDeviceInfoTransformerFactoryInfo::unsetProperties()
{
    m_PropertiesIsSet = false;
}

utility::string_t ComDayCqWcmMobileCoreImplDeviceDeviceInfoTransformerFactoryInfo::getBundleLocation() const
{
    return m_Bundle_location;
}


void ComDayCqWcmMobileCoreImplDeviceDeviceInfoTransformerFactoryInfo::setBundleLocation(utility::string_t value)
{
    m_Bundle_location = value;
    m_Bundle_locationIsSet = true;
}
bool ComDayCqWcmMobileCoreImplDeviceDeviceInfoTransformerFactoryInfo::bundleLocationIsSet() const
{
    return m_Bundle_locationIsSet;
}

void ComDayCqWcmMobileCoreImplDeviceDeviceInfoTransformerFactoryInfo::unsetBundle_location()
{
    m_Bundle_locationIsSet = false;
}

utility::string_t ComDayCqWcmMobileCoreImplDeviceDeviceInfoTransformerFactoryInfo::getServiceLocation() const
{
    return m_Service_location;
}


void ComDayCqWcmMobileCoreImplDeviceDeviceInfoTransformerFactoryInfo::setServiceLocation(utility::string_t value)
{
    m_Service_location = value;
    m_Service_locationIsSet = true;
}
bool ComDayCqWcmMobileCoreImplDeviceDeviceInfoTransformerFactoryInfo::serviceLocationIsSet() const
{
    return m_Service_locationIsSet;
}

void ComDayCqWcmMobileCoreImplDeviceDeviceInfoTransformerFactoryInfo::unsetService_location()
{
    m_Service_locationIsSet = false;
}

}
}
}
}

