/**
 * Adobe Experience Manager OSGI config (AEM) API
 * Swagger AEM OSGI is an OpenAPI specification for Adobe Experience Manager (AEM) OSGI Configurations API
 *
 * OpenAPI spec version: 1.0.0-pre.0
 * Contact: opensource@shinesolutions.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


#include "OAIComAdobeCqUiWcmCommonsInternalServletsRteRTEFilterServletFactProperties.h"

#include "OAIHelpers.h"

#include <QJsonDocument>
#include <QJsonArray>
#include <QObject>
#include <QDebug>

namespace OpenAPI {

OAIComAdobeCqUiWcmCommonsInternalServletsRteRTEFilterServletFactProperties::OAIComAdobeCqUiWcmCommonsInternalServletsRteRTEFilterServletFactProperties(QString json) {
    init();
    this->fromJson(json);
}

OAIComAdobeCqUiWcmCommonsInternalServletsRteRTEFilterServletFactProperties::OAIComAdobeCqUiWcmCommonsInternalServletsRteRTEFilterServletFactProperties() {
    init();
}

OAIComAdobeCqUiWcmCommonsInternalServletsRteRTEFilterServletFactProperties::~OAIComAdobeCqUiWcmCommonsInternalServletsRteRTEFilterServletFactProperties() {
    this->cleanup();
}

void
OAIComAdobeCqUiWcmCommonsInternalServletsRteRTEFilterServletFactProperties::init() {
    resource_types = new OAIConfigNodePropertyArray();
    m_resource_types_isSet = false;
}

void
OAIComAdobeCqUiWcmCommonsInternalServletsRteRTEFilterServletFactProperties::cleanup() {
    if(resource_types != nullptr) { 
        delete resource_types;
    }
}

OAIComAdobeCqUiWcmCommonsInternalServletsRteRTEFilterServletFactProperties*
OAIComAdobeCqUiWcmCommonsInternalServletsRteRTEFilterServletFactProperties::fromJson(QString json) {
    QByteArray array (json.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
    return this;
}

void
OAIComAdobeCqUiWcmCommonsInternalServletsRteRTEFilterServletFactProperties::fromJsonObject(QJsonObject pJson) {
    ::OpenAPI::setValue(&resource_types, pJson["resource.types"], "OAIConfigNodePropertyArray", "OAIConfigNodePropertyArray");
    
}

QString
OAIComAdobeCqUiWcmCommonsInternalServletsRteRTEFilterServletFactProperties::asJson ()
{
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject
OAIComAdobeCqUiWcmCommonsInternalServletsRteRTEFilterServletFactProperties::asJsonObject() {
    QJsonObject obj;
    if((resource_types != nullptr) && (resource_types->isSet())){
        toJsonValue(QString("resource.types"), resource_types, obj, QString("OAIConfigNodePropertyArray"));
    }

    return obj;
}

OAIConfigNodePropertyArray*
OAIComAdobeCqUiWcmCommonsInternalServletsRteRTEFilterServletFactProperties::getResourceTypes() {
    return resource_types;
}
void
OAIComAdobeCqUiWcmCommonsInternalServletsRteRTEFilterServletFactProperties::setResourceTypes(OAIConfigNodePropertyArray* resource_types) {
    this->resource_types = resource_types;
    this->m_resource_types_isSet = true;
}


bool
OAIComAdobeCqUiWcmCommonsInternalServletsRteRTEFilterServletFactProperties::isSet(){
    bool isObjectUpdated = false;
    do{
        if(resource_types != nullptr && resource_types->isSet()){ isObjectUpdated = true; break;}
    }while(false);
    return isObjectUpdated;
}
}

