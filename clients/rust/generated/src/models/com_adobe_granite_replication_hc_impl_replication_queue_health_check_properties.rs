/* 
 * Adobe Experience Manager OSGI config (AEM) API
 *
 * Swagger AEM OSGI is an OpenAPI specification for Adobe Experience Manager (AEM) OSGI Configurations API
 *
 * OpenAPI spec version: 1.0.0-pre.0
 * Contact: opensource@shinesolutions.com
 * Generated by: https://openapi-generator.tech
 */


#[allow(unused_imports)]
use serde_json::Value;

#[derive(Debug, Serialize, Deserialize)]
pub struct ComAdobeGraniteReplicationHcImplReplicationQueueHealthCheckProperties {
  #[serde(rename = "number.of.retries.allowed")]
  number_of_retries_allowed: Option<::models::ConfigNodePropertyInteger>,
  #[serde(rename = "hc.tags")]
  hc_tags: Option<::models::ConfigNodePropertyArray>
}

impl ComAdobeGraniteReplicationHcImplReplicationQueueHealthCheckProperties {
  pub fn new() -> ComAdobeGraniteReplicationHcImplReplicationQueueHealthCheckProperties {
    ComAdobeGraniteReplicationHcImplReplicationQueueHealthCheckProperties {
      number_of_retries_allowed: None,
      hc_tags: None
    }
  }

  pub fn set_number_of_retries_allowed(&mut self, number_of_retries_allowed: ::models::ConfigNodePropertyInteger) {
    self.number_of_retries_allowed = Some(number_of_retries_allowed);
  }

  pub fn with_number_of_retries_allowed(mut self, number_of_retries_allowed: ::models::ConfigNodePropertyInteger) -> ComAdobeGraniteReplicationHcImplReplicationQueueHealthCheckProperties {
    self.number_of_retries_allowed = Some(number_of_retries_allowed);
    self
  }

  pub fn number_of_retries_allowed(&self) -> Option<&::models::ConfigNodePropertyInteger> {
    self.number_of_retries_allowed.as_ref()
  }

  pub fn reset_number_of_retries_allowed(&mut self) {
    self.number_of_retries_allowed = None;
  }

  pub fn set_hc_tags(&mut self, hc_tags: ::models::ConfigNodePropertyArray) {
    self.hc_tags = Some(hc_tags);
  }

  pub fn with_hc_tags(mut self, hc_tags: ::models::ConfigNodePropertyArray) -> ComAdobeGraniteReplicationHcImplReplicationQueueHealthCheckProperties {
    self.hc_tags = Some(hc_tags);
    self
  }

  pub fn hc_tags(&self) -> Option<&::models::ConfigNodePropertyArray> {
    self.hc_tags.as_ref()
  }

  pub fn reset_hc_tags(&mut self) {
    self.hc_tags = None;
  }

}



