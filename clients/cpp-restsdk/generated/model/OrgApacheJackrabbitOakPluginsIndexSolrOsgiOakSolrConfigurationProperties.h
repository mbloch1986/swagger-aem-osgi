/**
 * Adobe Experience Manager OSGI config (AEM) API
 * Swagger AEM OSGI is an OpenAPI specification for Adobe Experience Manager (AEM) OSGI Configurations API
 *
 * OpenAPI spec version: 1.0.0-pre.0
 * Contact: opensource@shinesolutions.com
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 3.2.1-SNAPSHOT.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * OrgApacheJackrabbitOakPluginsIndexSolrOsgiOakSolrConfigurationProperties.h
 *
 * 
 */

#ifndef ORG_OPENAPITOOLS_CLIENT_MODEL_OrgApacheJackrabbitOakPluginsIndexSolrOsgiOakSolrConfigurationProperties_H_
#define ORG_OPENAPITOOLS_CLIENT_MODEL_OrgApacheJackrabbitOakPluginsIndexSolrOsgiOakSolrConfigurationProperties_H_


#include "../ModelBase.h"

#include "ConfigNodePropertyBoolean.h"
#include "ConfigNodePropertyDropDown.h"
#include "ConfigNodePropertyInteger.h"
#include "ConfigNodePropertyArray.h"
#include "ConfigNodePropertyString.h"

namespace org {
namespace openapitools {
namespace client {
namespace model {

/// <summary>
/// 
/// </summary>
class  OrgApacheJackrabbitOakPluginsIndexSolrOsgiOakSolrConfigurationProperties
    : public ModelBase
{
public:
    OrgApacheJackrabbitOakPluginsIndexSolrOsgiOakSolrConfigurationProperties();
    virtual ~OrgApacheJackrabbitOakPluginsIndexSolrOsgiOakSolrConfigurationProperties();

    /////////////////////////////////////////////
    /// ModelBase overrides

    void validate() override;

    web::json::value toJson() const override;
    void fromJson(web::json::value& json) override;

    void toMultipart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& namePrefix) const override;
    void fromMultiPart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& namePrefix) override;

    /////////////////////////////////////////////
    /// OrgApacheJackrabbitOakPluginsIndexSolrOsgiOakSolrConfigurationProperties members

    /// <summary>
    /// 
    /// </summary>
    std::shared_ptr<ConfigNodePropertyString> getPathDescField() const;
    bool pathDescFieldIsSet() const;
    void unsetPath_desc_field();
    void setPathDescField(std::shared_ptr<ConfigNodePropertyString> value);
    /// <summary>
    /// 
    /// </summary>
    std::shared_ptr<ConfigNodePropertyString> getPathChildField() const;
    bool pathChildFieldIsSet() const;
    void unsetPath_child_field();
    void setPathChildField(std::shared_ptr<ConfigNodePropertyString> value);
    /// <summary>
    /// 
    /// </summary>
    std::shared_ptr<ConfigNodePropertyString> getPathParentField() const;
    bool pathParentFieldIsSet() const;
    void unsetPath_parent_field();
    void setPathParentField(std::shared_ptr<ConfigNodePropertyString> value);
    /// <summary>
    /// 
    /// </summary>
    std::shared_ptr<ConfigNodePropertyString> getPathExactField() const;
    bool pathExactFieldIsSet() const;
    void unsetPath_exact_field();
    void setPathExactField(std::shared_ptr<ConfigNodePropertyString> value);
    /// <summary>
    /// 
    /// </summary>
    std::shared_ptr<ConfigNodePropertyString> getCatchAllField() const;
    bool catchAllFieldIsSet() const;
    void unsetCatch_all_field();
    void setCatchAllField(std::shared_ptr<ConfigNodePropertyString> value);
    /// <summary>
    /// 
    /// </summary>
    std::shared_ptr<ConfigNodePropertyString> getCollapsedPathField() const;
    bool collapsedPathFieldIsSet() const;
    void unsetCollapsed_path_field();
    void setCollapsedPathField(std::shared_ptr<ConfigNodePropertyString> value);
    /// <summary>
    /// 
    /// </summary>
    std::shared_ptr<ConfigNodePropertyString> getPathDepthField() const;
    bool pathDepthFieldIsSet() const;
    void unsetPath_depth_field();
    void setPathDepthField(std::shared_ptr<ConfigNodePropertyString> value);
    /// <summary>
    /// 
    /// </summary>
    std::shared_ptr<ConfigNodePropertyDropDown> getCommitPolicy() const;
    bool commitPolicyIsSet() const;
    void unsetCommit_policy();
    void setCommitPolicy(std::shared_ptr<ConfigNodePropertyDropDown> value);
    /// <summary>
    /// 
    /// </summary>
    std::shared_ptr<ConfigNodePropertyInteger> getRows() const;
    bool rowsIsSet() const;
    void unsetRows();
    void setRows(std::shared_ptr<ConfigNodePropertyInteger> value);
    /// <summary>
    /// 
    /// </summary>
    std::shared_ptr<ConfigNodePropertyBoolean> getPathRestrictions() const;
    bool pathRestrictionsIsSet() const;
    void unsetPath_restrictions();
    void setPathRestrictions(std::shared_ptr<ConfigNodePropertyBoolean> value);
    /// <summary>
    /// 
    /// </summary>
    std::shared_ptr<ConfigNodePropertyBoolean> getPropertyRestrictions() const;
    bool propertyRestrictionsIsSet() const;
    void unsetProperty_restrictions();
    void setPropertyRestrictions(std::shared_ptr<ConfigNodePropertyBoolean> value);
    /// <summary>
    /// 
    /// </summary>
    std::shared_ptr<ConfigNodePropertyBoolean> getPrimarytypesRestrictions() const;
    bool primarytypesRestrictionsIsSet() const;
    void unsetPrimarytypes_restrictions();
    void setPrimarytypesRestrictions(std::shared_ptr<ConfigNodePropertyBoolean> value);
    /// <summary>
    /// 
    /// </summary>
    std::shared_ptr<ConfigNodePropertyArray> getIgnoredProperties() const;
    bool ignoredPropertiesIsSet() const;
    void unsetIgnored_properties();
    void setIgnoredProperties(std::shared_ptr<ConfigNodePropertyArray> value);
    /// <summary>
    /// 
    /// </summary>
    std::shared_ptr<ConfigNodePropertyArray> getUsedProperties() const;
    bool usedPropertiesIsSet() const;
    void unsetUsed_properties();
    void setUsedProperties(std::shared_ptr<ConfigNodePropertyArray> value);
    /// <summary>
    /// 
    /// </summary>
    std::shared_ptr<ConfigNodePropertyArray> getTypeMappings() const;
    bool typeMappingsIsSet() const;
    void unsetType_mappings();
    void setTypeMappings(std::shared_ptr<ConfigNodePropertyArray> value);
    /// <summary>
    /// 
    /// </summary>
    std::shared_ptr<ConfigNodePropertyArray> getPropertyMappings() const;
    bool propertyMappingsIsSet() const;
    void unsetProperty_mappings();
    void setPropertyMappings(std::shared_ptr<ConfigNodePropertyArray> value);
    /// <summary>
    /// 
    /// </summary>
    std::shared_ptr<ConfigNodePropertyBoolean> getCollapseJcrcontentNodes() const;
    bool collapseJcrcontentNodesIsSet() const;
    void unsetCollapse_jcrcontent_nodes();
    void setCollapseJcrcontentNodes(std::shared_ptr<ConfigNodePropertyBoolean> value);

protected:
    std::shared_ptr<ConfigNodePropertyString> m_Path_desc_field;
    bool m_Path_desc_fieldIsSet;
    std::shared_ptr<ConfigNodePropertyString> m_Path_child_field;
    bool m_Path_child_fieldIsSet;
    std::shared_ptr<ConfigNodePropertyString> m_Path_parent_field;
    bool m_Path_parent_fieldIsSet;
    std::shared_ptr<ConfigNodePropertyString> m_Path_exact_field;
    bool m_Path_exact_fieldIsSet;
    std::shared_ptr<ConfigNodePropertyString> m_Catch_all_field;
    bool m_Catch_all_fieldIsSet;
    std::shared_ptr<ConfigNodePropertyString> m_Collapsed_path_field;
    bool m_Collapsed_path_fieldIsSet;
    std::shared_ptr<ConfigNodePropertyString> m_Path_depth_field;
    bool m_Path_depth_fieldIsSet;
    std::shared_ptr<ConfigNodePropertyDropDown> m_Commit_policy;
    bool m_Commit_policyIsSet;
    std::shared_ptr<ConfigNodePropertyInteger> m_Rows;
    bool m_RowsIsSet;
    std::shared_ptr<ConfigNodePropertyBoolean> m_Path_restrictions;
    bool m_Path_restrictionsIsSet;
    std::shared_ptr<ConfigNodePropertyBoolean> m_Property_restrictions;
    bool m_Property_restrictionsIsSet;
    std::shared_ptr<ConfigNodePropertyBoolean> m_Primarytypes_restrictions;
    bool m_Primarytypes_restrictionsIsSet;
    std::shared_ptr<ConfigNodePropertyArray> m_Ignored_properties;
    bool m_Ignored_propertiesIsSet;
    std::shared_ptr<ConfigNodePropertyArray> m_Used_properties;
    bool m_Used_propertiesIsSet;
    std::shared_ptr<ConfigNodePropertyArray> m_Type_mappings;
    bool m_Type_mappingsIsSet;
    std::shared_ptr<ConfigNodePropertyArray> m_Property_mappings;
    bool m_Property_mappingsIsSet;
    std::shared_ptr<ConfigNodePropertyBoolean> m_Collapse_jcrcontent_nodes;
    bool m_Collapse_jcrcontent_nodesIsSet;
};

}
}
}
}

#endif /* ORG_OPENAPITOOLS_CLIENT_MODEL_OrgApacheJackrabbitOakPluginsIndexSolrOsgiOakSolrConfigurationProperties_H_ */
