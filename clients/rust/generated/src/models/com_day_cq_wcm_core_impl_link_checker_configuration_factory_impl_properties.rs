/* 
 * Adobe Experience Manager OSGI config (AEM) API
 *
 * Swagger AEM OSGI is an OpenAPI specification for Adobe Experience Manager (AEM) OSGI Configurations API
 *
 * OpenAPI spec version: 1.0.0-pre.0
 * Contact: opensource@shinesolutions.com
 * Generated by: https://openapi-generator.tech
 */


#[allow(unused_imports)]
use serde_json::Value;

#[derive(Debug, Serialize, Deserialize)]
pub struct ComDayCqWcmCoreImplLinkCheckerConfigurationFactoryImplProperties {
  #[serde(rename = "link.expired.prefix")]
  link_expired_prefix: Option<::models::ConfigNodePropertyString>,
  #[serde(rename = "link.expired.remove")]
  link_expired_remove: Option<::models::ConfigNodePropertyBoolean>,
  #[serde(rename = "link.expired.suffix")]
  link_expired_suffix: Option<::models::ConfigNodePropertyString>,
  #[serde(rename = "link.invalid.prefix")]
  link_invalid_prefix: Option<::models::ConfigNodePropertyString>,
  #[serde(rename = "link.invalid.remove")]
  link_invalid_remove: Option<::models::ConfigNodePropertyBoolean>,
  #[serde(rename = "link.invalid.suffix")]
  link_invalid_suffix: Option<::models::ConfigNodePropertyString>,
  #[serde(rename = "link.predated.prefix")]
  link_predated_prefix: Option<::models::ConfigNodePropertyString>,
  #[serde(rename = "link.predated.remove")]
  link_predated_remove: Option<::models::ConfigNodePropertyBoolean>,
  #[serde(rename = "link.predated.suffix")]
  link_predated_suffix: Option<::models::ConfigNodePropertyString>,
  #[serde(rename = "link.wcmmodes")]
  link_wcmmodes: Option<::models::ConfigNodePropertyArray>
}

impl ComDayCqWcmCoreImplLinkCheckerConfigurationFactoryImplProperties {
  pub fn new() -> ComDayCqWcmCoreImplLinkCheckerConfigurationFactoryImplProperties {
    ComDayCqWcmCoreImplLinkCheckerConfigurationFactoryImplProperties {
      link_expired_prefix: None,
      link_expired_remove: None,
      link_expired_suffix: None,
      link_invalid_prefix: None,
      link_invalid_remove: None,
      link_invalid_suffix: None,
      link_predated_prefix: None,
      link_predated_remove: None,
      link_predated_suffix: None,
      link_wcmmodes: None
    }
  }

  pub fn set_link_expired_prefix(&mut self, link_expired_prefix: ::models::ConfigNodePropertyString) {
    self.link_expired_prefix = Some(link_expired_prefix);
  }

  pub fn with_link_expired_prefix(mut self, link_expired_prefix: ::models::ConfigNodePropertyString) -> ComDayCqWcmCoreImplLinkCheckerConfigurationFactoryImplProperties {
    self.link_expired_prefix = Some(link_expired_prefix);
    self
  }

  pub fn link_expired_prefix(&self) -> Option<&::models::ConfigNodePropertyString> {
    self.link_expired_prefix.as_ref()
  }

  pub fn reset_link_expired_prefix(&mut self) {
    self.link_expired_prefix = None;
  }

  pub fn set_link_expired_remove(&mut self, link_expired_remove: ::models::ConfigNodePropertyBoolean) {
    self.link_expired_remove = Some(link_expired_remove);
  }

  pub fn with_link_expired_remove(mut self, link_expired_remove: ::models::ConfigNodePropertyBoolean) -> ComDayCqWcmCoreImplLinkCheckerConfigurationFactoryImplProperties {
    self.link_expired_remove = Some(link_expired_remove);
    self
  }

  pub fn link_expired_remove(&self) -> Option<&::models::ConfigNodePropertyBoolean> {
    self.link_expired_remove.as_ref()
  }

  pub fn reset_link_expired_remove(&mut self) {
    self.link_expired_remove = None;
  }

  pub fn set_link_expired_suffix(&mut self, link_expired_suffix: ::models::ConfigNodePropertyString) {
    self.link_expired_suffix = Some(link_expired_suffix);
  }

  pub fn with_link_expired_suffix(mut self, link_expired_suffix: ::models::ConfigNodePropertyString) -> ComDayCqWcmCoreImplLinkCheckerConfigurationFactoryImplProperties {
    self.link_expired_suffix = Some(link_expired_suffix);
    self
  }

  pub fn link_expired_suffix(&self) -> Option<&::models::ConfigNodePropertyString> {
    self.link_expired_suffix.as_ref()
  }

  pub fn reset_link_expired_suffix(&mut self) {
    self.link_expired_suffix = None;
  }

  pub fn set_link_invalid_prefix(&mut self, link_invalid_prefix: ::models::ConfigNodePropertyString) {
    self.link_invalid_prefix = Some(link_invalid_prefix);
  }

  pub fn with_link_invalid_prefix(mut self, link_invalid_prefix: ::models::ConfigNodePropertyString) -> ComDayCqWcmCoreImplLinkCheckerConfigurationFactoryImplProperties {
    self.link_invalid_prefix = Some(link_invalid_prefix);
    self
  }

  pub fn link_invalid_prefix(&self) -> Option<&::models::ConfigNodePropertyString> {
    self.link_invalid_prefix.as_ref()
  }

  pub fn reset_link_invalid_prefix(&mut self) {
    self.link_invalid_prefix = None;
  }

  pub fn set_link_invalid_remove(&mut self, link_invalid_remove: ::models::ConfigNodePropertyBoolean) {
    self.link_invalid_remove = Some(link_invalid_remove);
  }

  pub fn with_link_invalid_remove(mut self, link_invalid_remove: ::models::ConfigNodePropertyBoolean) -> ComDayCqWcmCoreImplLinkCheckerConfigurationFactoryImplProperties {
    self.link_invalid_remove = Some(link_invalid_remove);
    self
  }

  pub fn link_invalid_remove(&self) -> Option<&::models::ConfigNodePropertyBoolean> {
    self.link_invalid_remove.as_ref()
  }

  pub fn reset_link_invalid_remove(&mut self) {
    self.link_invalid_remove = None;
  }

  pub fn set_link_invalid_suffix(&mut self, link_invalid_suffix: ::models::ConfigNodePropertyString) {
    self.link_invalid_suffix = Some(link_invalid_suffix);
  }

  pub fn with_link_invalid_suffix(mut self, link_invalid_suffix: ::models::ConfigNodePropertyString) -> ComDayCqWcmCoreImplLinkCheckerConfigurationFactoryImplProperties {
    self.link_invalid_suffix = Some(link_invalid_suffix);
    self
  }

  pub fn link_invalid_suffix(&self) -> Option<&::models::ConfigNodePropertyString> {
    self.link_invalid_suffix.as_ref()
  }

  pub fn reset_link_invalid_suffix(&mut self) {
    self.link_invalid_suffix = None;
  }

  pub fn set_link_predated_prefix(&mut self, link_predated_prefix: ::models::ConfigNodePropertyString) {
    self.link_predated_prefix = Some(link_predated_prefix);
  }

  pub fn with_link_predated_prefix(mut self, link_predated_prefix: ::models::ConfigNodePropertyString) -> ComDayCqWcmCoreImplLinkCheckerConfigurationFactoryImplProperties {
    self.link_predated_prefix = Some(link_predated_prefix);
    self
  }

  pub fn link_predated_prefix(&self) -> Option<&::models::ConfigNodePropertyString> {
    self.link_predated_prefix.as_ref()
  }

  pub fn reset_link_predated_prefix(&mut self) {
    self.link_predated_prefix = None;
  }

  pub fn set_link_predated_remove(&mut self, link_predated_remove: ::models::ConfigNodePropertyBoolean) {
    self.link_predated_remove = Some(link_predated_remove);
  }

  pub fn with_link_predated_remove(mut self, link_predated_remove: ::models::ConfigNodePropertyBoolean) -> ComDayCqWcmCoreImplLinkCheckerConfigurationFactoryImplProperties {
    self.link_predated_remove = Some(link_predated_remove);
    self
  }

  pub fn link_predated_remove(&self) -> Option<&::models::ConfigNodePropertyBoolean> {
    self.link_predated_remove.as_ref()
  }

  pub fn reset_link_predated_remove(&mut self) {
    self.link_predated_remove = None;
  }

  pub fn set_link_predated_suffix(&mut self, link_predated_suffix: ::models::ConfigNodePropertyString) {
    self.link_predated_suffix = Some(link_predated_suffix);
  }

  pub fn with_link_predated_suffix(mut self, link_predated_suffix: ::models::ConfigNodePropertyString) -> ComDayCqWcmCoreImplLinkCheckerConfigurationFactoryImplProperties {
    self.link_predated_suffix = Some(link_predated_suffix);
    self
  }

  pub fn link_predated_suffix(&self) -> Option<&::models::ConfigNodePropertyString> {
    self.link_predated_suffix.as_ref()
  }

  pub fn reset_link_predated_suffix(&mut self) {
    self.link_predated_suffix = None;
  }

  pub fn set_link_wcmmodes(&mut self, link_wcmmodes: ::models::ConfigNodePropertyArray) {
    self.link_wcmmodes = Some(link_wcmmodes);
  }

  pub fn with_link_wcmmodes(mut self, link_wcmmodes: ::models::ConfigNodePropertyArray) -> ComDayCqWcmCoreImplLinkCheckerConfigurationFactoryImplProperties {
    self.link_wcmmodes = Some(link_wcmmodes);
    self
  }

  pub fn link_wcmmodes(&self) -> Option<&::models::ConfigNodePropertyArray> {
    self.link_wcmmodes.as_ref()
  }

  pub fn reset_link_wcmmodes(&mut self) {
    self.link_wcmmodes = None;
  }

}



