/* 
 * Adobe Experience Manager OSGI config (AEM) API
 *
 * Swagger AEM OSGI is an OpenAPI specification for Adobe Experience Manager (AEM) OSGI Configurations API
 *
 * OpenAPI spec version: 1.0.0-pre.0
 * Contact: opensource@shinesolutions.com
 * Generated by: https://openapi-generator.tech
 */


#[allow(unused_imports)]
use serde_json::Value;

#[derive(Debug, Serialize, Deserialize)]
pub struct OrgApacheSlingCommonsMetricsRrd4jImplCodahaleMetricsReporterProperties {
  #[serde(rename = "datasources")]
  datasources: Option<::models::ConfigNodePropertyArray>,
  #[serde(rename = "step")]
  step: Option<::models::ConfigNodePropertyInteger>,
  #[serde(rename = "archives")]
  archives: Option<::models::ConfigNodePropertyArray>,
  #[serde(rename = "path")]
  path: Option<::models::ConfigNodePropertyString>
}

impl OrgApacheSlingCommonsMetricsRrd4jImplCodahaleMetricsReporterProperties {
  pub fn new() -> OrgApacheSlingCommonsMetricsRrd4jImplCodahaleMetricsReporterProperties {
    OrgApacheSlingCommonsMetricsRrd4jImplCodahaleMetricsReporterProperties {
      datasources: None,
      step: None,
      archives: None,
      path: None
    }
  }

  pub fn set_datasources(&mut self, datasources: ::models::ConfigNodePropertyArray) {
    self.datasources = Some(datasources);
  }

  pub fn with_datasources(mut self, datasources: ::models::ConfigNodePropertyArray) -> OrgApacheSlingCommonsMetricsRrd4jImplCodahaleMetricsReporterProperties {
    self.datasources = Some(datasources);
    self
  }

  pub fn datasources(&self) -> Option<&::models::ConfigNodePropertyArray> {
    self.datasources.as_ref()
  }

  pub fn reset_datasources(&mut self) {
    self.datasources = None;
  }

  pub fn set_step(&mut self, step: ::models::ConfigNodePropertyInteger) {
    self.step = Some(step);
  }

  pub fn with_step(mut self, step: ::models::ConfigNodePropertyInteger) -> OrgApacheSlingCommonsMetricsRrd4jImplCodahaleMetricsReporterProperties {
    self.step = Some(step);
    self
  }

  pub fn step(&self) -> Option<&::models::ConfigNodePropertyInteger> {
    self.step.as_ref()
  }

  pub fn reset_step(&mut self) {
    self.step = None;
  }

  pub fn set_archives(&mut self, archives: ::models::ConfigNodePropertyArray) {
    self.archives = Some(archives);
  }

  pub fn with_archives(mut self, archives: ::models::ConfigNodePropertyArray) -> OrgApacheSlingCommonsMetricsRrd4jImplCodahaleMetricsReporterProperties {
    self.archives = Some(archives);
    self
  }

  pub fn archives(&self) -> Option<&::models::ConfigNodePropertyArray> {
    self.archives.as_ref()
  }

  pub fn reset_archives(&mut self) {
    self.archives = None;
  }

  pub fn set_path(&mut self, path: ::models::ConfigNodePropertyString) {
    self.path = Some(path);
  }

  pub fn with_path(mut self, path: ::models::ConfigNodePropertyString) -> OrgApacheSlingCommonsMetricsRrd4jImplCodahaleMetricsReporterProperties {
    self.path = Some(path);
    self
  }

  pub fn path(&self) -> Option<&::models::ConfigNodePropertyString> {
    self.path.as_ref()
  }

  pub fn reset_path(&mut self) {
    self.path = None;
  }

}



