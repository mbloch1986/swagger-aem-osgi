/**
 * Adobe Experience Manager OSGI config (AEM) API
 * Swagger AEM OSGI is an OpenAPI specification for Adobe Experience Manager (AEM) OSGI Configurations API
 *
 * OpenAPI spec version: 1.0.0-pre.0
 * Contact: opensource@shinesolutions.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


#include "OAIOrgApacheSlingJcrRepoinitRepositoryInitializerProperties.h"

#include "OAIHelpers.h"

#include <QJsonDocument>
#include <QJsonArray>
#include <QObject>
#include <QDebug>

namespace OpenAPI {

OAIOrgApacheSlingJcrRepoinitRepositoryInitializerProperties::OAIOrgApacheSlingJcrRepoinitRepositoryInitializerProperties(QString json) {
    this->fromJson(json);
}

OAIOrgApacheSlingJcrRepoinitRepositoryInitializerProperties::OAIOrgApacheSlingJcrRepoinitRepositoryInitializerProperties() {
    this->init();
}

OAIOrgApacheSlingJcrRepoinitRepositoryInitializerProperties::~OAIOrgApacheSlingJcrRepoinitRepositoryInitializerProperties() {
    
}

void
OAIOrgApacheSlingJcrRepoinitRepositoryInitializerProperties::init() {
    m_references_isSet = false;
    m_scripts_isSet = false;
}

void
OAIOrgApacheSlingJcrRepoinitRepositoryInitializerProperties::fromJson(QString jsonString) {
    QByteArray array (jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void
OAIOrgApacheSlingJcrRepoinitRepositoryInitializerProperties::fromJsonObject(QJsonObject json) {
    ::OpenAPI::fromJsonValue(references, json[QString("references")]);
    
    ::OpenAPI::fromJsonValue(scripts, json[QString("scripts")]);
    
}

QString
OAIOrgApacheSlingJcrRepoinitRepositoryInitializerProperties::asJson () const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject
OAIOrgApacheSlingJcrRepoinitRepositoryInitializerProperties::asJsonObject() const {
    QJsonObject obj;
	if(references.isSet()){
        obj.insert(QString("references"), ::OpenAPI::toJsonValue(references));
    }
	if(scripts.isSet()){
        obj.insert(QString("scripts"), ::OpenAPI::toJsonValue(scripts));
    }
    return obj;
}

OAIConfigNodePropertyArray
OAIOrgApacheSlingJcrRepoinitRepositoryInitializerProperties::getReferences() const {
    return references;
}
void
OAIOrgApacheSlingJcrRepoinitRepositoryInitializerProperties::setReferences(const OAIConfigNodePropertyArray &references) {
    this->references = references;
    this->m_references_isSet = true;
}

OAIConfigNodePropertyArray
OAIOrgApacheSlingJcrRepoinitRepositoryInitializerProperties::getScripts() const {
    return scripts;
}
void
OAIOrgApacheSlingJcrRepoinitRepositoryInitializerProperties::setScripts(const OAIConfigNodePropertyArray &scripts) {
    this->scripts = scripts;
    this->m_scripts_isSet = true;
}


bool
OAIOrgApacheSlingJcrRepoinitRepositoryInitializerProperties::isSet() const {
    bool isObjectUpdated = false;
    do{ 
        if(references.isSet()){ isObjectUpdated = true; break;}
    
        if(scripts.isSet()){ isObjectUpdated = true; break;}
    }while(false);
    return isObjectUpdated;
}

}

