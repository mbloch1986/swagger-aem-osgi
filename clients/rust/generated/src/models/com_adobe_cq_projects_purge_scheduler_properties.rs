/* 
 * Adobe Experience Manager OSGI config (AEM) API
 *
 * Swagger AEM OSGI is an OpenAPI specification for Adobe Experience Manager (AEM) OSGI Configurations API
 *
 * OpenAPI spec version: 1.0.0-pre.0
 * Contact: opensource@shinesolutions.com
 * Generated by: https://openapi-generator.tech
 */


#[allow(unused_imports)]
use serde_json::Value;

#[derive(Debug, Serialize, Deserialize)]
pub struct ComAdobeCqProjectsPurgeSchedulerProperties {
  #[serde(rename = "scheduledpurge.name")]
  scheduledpurge_name: Option<::models::ConfigNodePropertyString>,
  #[serde(rename = "scheduledpurge.purgeActive")]
  scheduledpurge_purge_active: Option<::models::ConfigNodePropertyBoolean>,
  #[serde(rename = "scheduledpurge.templates")]
  scheduledpurge_templates: Option<::models::ConfigNodePropertyArray>,
  #[serde(rename = "scheduledpurge.purgeGroups")]
  scheduledpurge_purge_groups: Option<::models::ConfigNodePropertyBoolean>,
  #[serde(rename = "scheduledpurge.purgeAssets")]
  scheduledpurge_purge_assets: Option<::models::ConfigNodePropertyBoolean>,
  #[serde(rename = "scheduledpurge.terminateRunningWorkflows")]
  scheduledpurge_terminate_running_workflows: Option<::models::ConfigNodePropertyBoolean>,
  #[serde(rename = "scheduledpurge.daysold")]
  scheduledpurge_daysold: Option<::models::ConfigNodePropertyInteger>,
  #[serde(rename = "scheduledpurge.saveThreshold")]
  scheduledpurge_save_threshold: Option<::models::ConfigNodePropertyInteger>
}

impl ComAdobeCqProjectsPurgeSchedulerProperties {
  pub fn new() -> ComAdobeCqProjectsPurgeSchedulerProperties {
    ComAdobeCqProjectsPurgeSchedulerProperties {
      scheduledpurge_name: None,
      scheduledpurge_purge_active: None,
      scheduledpurge_templates: None,
      scheduledpurge_purge_groups: None,
      scheduledpurge_purge_assets: None,
      scheduledpurge_terminate_running_workflows: None,
      scheduledpurge_daysold: None,
      scheduledpurge_save_threshold: None
    }
  }

  pub fn set_scheduledpurge_name(&mut self, scheduledpurge_name: ::models::ConfigNodePropertyString) {
    self.scheduledpurge_name = Some(scheduledpurge_name);
  }

  pub fn with_scheduledpurge_name(mut self, scheduledpurge_name: ::models::ConfigNodePropertyString) -> ComAdobeCqProjectsPurgeSchedulerProperties {
    self.scheduledpurge_name = Some(scheduledpurge_name);
    self
  }

  pub fn scheduledpurge_name(&self) -> Option<&::models::ConfigNodePropertyString> {
    self.scheduledpurge_name.as_ref()
  }

  pub fn reset_scheduledpurge_name(&mut self) {
    self.scheduledpurge_name = None;
  }

  pub fn set_scheduledpurge_purge_active(&mut self, scheduledpurge_purge_active: ::models::ConfigNodePropertyBoolean) {
    self.scheduledpurge_purge_active = Some(scheduledpurge_purge_active);
  }

  pub fn with_scheduledpurge_purge_active(mut self, scheduledpurge_purge_active: ::models::ConfigNodePropertyBoolean) -> ComAdobeCqProjectsPurgeSchedulerProperties {
    self.scheduledpurge_purge_active = Some(scheduledpurge_purge_active);
    self
  }

  pub fn scheduledpurge_purge_active(&self) -> Option<&::models::ConfigNodePropertyBoolean> {
    self.scheduledpurge_purge_active.as_ref()
  }

  pub fn reset_scheduledpurge_purge_active(&mut self) {
    self.scheduledpurge_purge_active = None;
  }

  pub fn set_scheduledpurge_templates(&mut self, scheduledpurge_templates: ::models::ConfigNodePropertyArray) {
    self.scheduledpurge_templates = Some(scheduledpurge_templates);
  }

  pub fn with_scheduledpurge_templates(mut self, scheduledpurge_templates: ::models::ConfigNodePropertyArray) -> ComAdobeCqProjectsPurgeSchedulerProperties {
    self.scheduledpurge_templates = Some(scheduledpurge_templates);
    self
  }

  pub fn scheduledpurge_templates(&self) -> Option<&::models::ConfigNodePropertyArray> {
    self.scheduledpurge_templates.as_ref()
  }

  pub fn reset_scheduledpurge_templates(&mut self) {
    self.scheduledpurge_templates = None;
  }

  pub fn set_scheduledpurge_purge_groups(&mut self, scheduledpurge_purge_groups: ::models::ConfigNodePropertyBoolean) {
    self.scheduledpurge_purge_groups = Some(scheduledpurge_purge_groups);
  }

  pub fn with_scheduledpurge_purge_groups(mut self, scheduledpurge_purge_groups: ::models::ConfigNodePropertyBoolean) -> ComAdobeCqProjectsPurgeSchedulerProperties {
    self.scheduledpurge_purge_groups = Some(scheduledpurge_purge_groups);
    self
  }

  pub fn scheduledpurge_purge_groups(&self) -> Option<&::models::ConfigNodePropertyBoolean> {
    self.scheduledpurge_purge_groups.as_ref()
  }

  pub fn reset_scheduledpurge_purge_groups(&mut self) {
    self.scheduledpurge_purge_groups = None;
  }

  pub fn set_scheduledpurge_purge_assets(&mut self, scheduledpurge_purge_assets: ::models::ConfigNodePropertyBoolean) {
    self.scheduledpurge_purge_assets = Some(scheduledpurge_purge_assets);
  }

  pub fn with_scheduledpurge_purge_assets(mut self, scheduledpurge_purge_assets: ::models::ConfigNodePropertyBoolean) -> ComAdobeCqProjectsPurgeSchedulerProperties {
    self.scheduledpurge_purge_assets = Some(scheduledpurge_purge_assets);
    self
  }

  pub fn scheduledpurge_purge_assets(&self) -> Option<&::models::ConfigNodePropertyBoolean> {
    self.scheduledpurge_purge_assets.as_ref()
  }

  pub fn reset_scheduledpurge_purge_assets(&mut self) {
    self.scheduledpurge_purge_assets = None;
  }

  pub fn set_scheduledpurge_terminate_running_workflows(&mut self, scheduledpurge_terminate_running_workflows: ::models::ConfigNodePropertyBoolean) {
    self.scheduledpurge_terminate_running_workflows = Some(scheduledpurge_terminate_running_workflows);
  }

  pub fn with_scheduledpurge_terminate_running_workflows(mut self, scheduledpurge_terminate_running_workflows: ::models::ConfigNodePropertyBoolean) -> ComAdobeCqProjectsPurgeSchedulerProperties {
    self.scheduledpurge_terminate_running_workflows = Some(scheduledpurge_terminate_running_workflows);
    self
  }

  pub fn scheduledpurge_terminate_running_workflows(&self) -> Option<&::models::ConfigNodePropertyBoolean> {
    self.scheduledpurge_terminate_running_workflows.as_ref()
  }

  pub fn reset_scheduledpurge_terminate_running_workflows(&mut self) {
    self.scheduledpurge_terminate_running_workflows = None;
  }

  pub fn set_scheduledpurge_daysold(&mut self, scheduledpurge_daysold: ::models::ConfigNodePropertyInteger) {
    self.scheduledpurge_daysold = Some(scheduledpurge_daysold);
  }

  pub fn with_scheduledpurge_daysold(mut self, scheduledpurge_daysold: ::models::ConfigNodePropertyInteger) -> ComAdobeCqProjectsPurgeSchedulerProperties {
    self.scheduledpurge_daysold = Some(scheduledpurge_daysold);
    self
  }

  pub fn scheduledpurge_daysold(&self) -> Option<&::models::ConfigNodePropertyInteger> {
    self.scheduledpurge_daysold.as_ref()
  }

  pub fn reset_scheduledpurge_daysold(&mut self) {
    self.scheduledpurge_daysold = None;
  }

  pub fn set_scheduledpurge_save_threshold(&mut self, scheduledpurge_save_threshold: ::models::ConfigNodePropertyInteger) {
    self.scheduledpurge_save_threshold = Some(scheduledpurge_save_threshold);
  }

  pub fn with_scheduledpurge_save_threshold(mut self, scheduledpurge_save_threshold: ::models::ConfigNodePropertyInteger) -> ComAdobeCqProjectsPurgeSchedulerProperties {
    self.scheduledpurge_save_threshold = Some(scheduledpurge_save_threshold);
    self
  }

  pub fn scheduledpurge_save_threshold(&self) -> Option<&::models::ConfigNodePropertyInteger> {
    self.scheduledpurge_save_threshold.as_ref()
  }

  pub fn reset_scheduledpurge_save_threshold(&mut self) {
    self.scheduledpurge_save_threshold = None;
  }

}



