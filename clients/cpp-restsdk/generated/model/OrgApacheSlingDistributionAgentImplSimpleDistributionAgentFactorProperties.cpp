/**
 * Adobe Experience Manager OSGI config (AEM) API
 * Swagger AEM OSGI is an OpenAPI specification for Adobe Experience Manager (AEM) OSGI Configurations API
 *
 * OpenAPI spec version: 1.0.0-pre.0
 * Contact: opensource@shinesolutions.com
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 3.2.1-SNAPSHOT.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */



#include "OrgApacheSlingDistributionAgentImplSimpleDistributionAgentFactorProperties.h"

namespace org {
namespace openapitools {
namespace client {
namespace model {

OrgApacheSlingDistributionAgentImplSimpleDistributionAgentFactorProperties::OrgApacheSlingDistributionAgentImplSimpleDistributionAgentFactorProperties()
{
    m_NameIsSet = false;
    m_TitleIsSet = false;
    m_DetailsIsSet = false;
    m_EnabledIsSet = false;
    m_ServiceNameIsSet = false;
    m_Log_levelIsSet = false;
    m_Queue_processing_enabledIsSet = false;
    m_PackageExporter_targetIsSet = false;
    m_PackageImporter_targetIsSet = false;
    m_RequestAuthorizationStrategy_targetIsSet = false;
    m_Triggers_targetIsSet = false;
}

OrgApacheSlingDistributionAgentImplSimpleDistributionAgentFactorProperties::~OrgApacheSlingDistributionAgentImplSimpleDistributionAgentFactorProperties()
{
}

void OrgApacheSlingDistributionAgentImplSimpleDistributionAgentFactorProperties::validate()
{
    // TODO: implement validation
}

web::json::value OrgApacheSlingDistributionAgentImplSimpleDistributionAgentFactorProperties::toJson() const
{
    web::json::value val = web::json::value::object();

    if(m_NameIsSet)
    {
        val[utility::conversions::to_string_t("name")] = ModelBase::toJson(m_Name);
    }
    if(m_TitleIsSet)
    {
        val[utility::conversions::to_string_t("title")] = ModelBase::toJson(m_Title);
    }
    if(m_DetailsIsSet)
    {
        val[utility::conversions::to_string_t("details")] = ModelBase::toJson(m_Details);
    }
    if(m_EnabledIsSet)
    {
        val[utility::conversions::to_string_t("enabled")] = ModelBase::toJson(m_Enabled);
    }
    if(m_ServiceNameIsSet)
    {
        val[utility::conversions::to_string_t("serviceName")] = ModelBase::toJson(m_ServiceName);
    }
    if(m_Log_levelIsSet)
    {
        val[utility::conversions::to_string_t("log.level")] = ModelBase::toJson(m_Log_level);
    }
    if(m_Queue_processing_enabledIsSet)
    {
        val[utility::conversions::to_string_t("queue.processing.enabled")] = ModelBase::toJson(m_Queue_processing_enabled);
    }
    if(m_PackageExporter_targetIsSet)
    {
        val[utility::conversions::to_string_t("packageExporter.target")] = ModelBase::toJson(m_PackageExporter_target);
    }
    if(m_PackageImporter_targetIsSet)
    {
        val[utility::conversions::to_string_t("packageImporter.target")] = ModelBase::toJson(m_PackageImporter_target);
    }
    if(m_RequestAuthorizationStrategy_targetIsSet)
    {
        val[utility::conversions::to_string_t("requestAuthorizationStrategy.target")] = ModelBase::toJson(m_RequestAuthorizationStrategy_target);
    }
    if(m_Triggers_targetIsSet)
    {
        val[utility::conversions::to_string_t("triggers.target")] = ModelBase::toJson(m_Triggers_target);
    }

    return val;
}

void OrgApacheSlingDistributionAgentImplSimpleDistributionAgentFactorProperties::fromJson(web::json::value& val)
{
    if(val.has_field(utility::conversions::to_string_t("name")))
    {
        if(!val[utility::conversions::to_string_t("name")].is_null())
        {
            std::shared_ptr<ConfigNodePropertyString> newItem(new ConfigNodePropertyString());
            newItem->fromJson(val[utility::conversions::to_string_t("name")]);
            setName( newItem );
        }
    }
    if(val.has_field(utility::conversions::to_string_t("title")))
    {
        if(!val[utility::conversions::to_string_t("title")].is_null())
        {
            std::shared_ptr<ConfigNodePropertyString> newItem(new ConfigNodePropertyString());
            newItem->fromJson(val[utility::conversions::to_string_t("title")]);
            setTitle( newItem );
        }
    }
    if(val.has_field(utility::conversions::to_string_t("details")))
    {
        if(!val[utility::conversions::to_string_t("details")].is_null())
        {
            std::shared_ptr<ConfigNodePropertyString> newItem(new ConfigNodePropertyString());
            newItem->fromJson(val[utility::conversions::to_string_t("details")]);
            setDetails( newItem );
        }
    }
    if(val.has_field(utility::conversions::to_string_t("enabled")))
    {
        if(!val[utility::conversions::to_string_t("enabled")].is_null())
        {
            std::shared_ptr<ConfigNodePropertyBoolean> newItem(new ConfigNodePropertyBoolean());
            newItem->fromJson(val[utility::conversions::to_string_t("enabled")]);
            setEnabled( newItem );
        }
    }
    if(val.has_field(utility::conversions::to_string_t("serviceName")))
    {
        if(!val[utility::conversions::to_string_t("serviceName")].is_null())
        {
            std::shared_ptr<ConfigNodePropertyString> newItem(new ConfigNodePropertyString());
            newItem->fromJson(val[utility::conversions::to_string_t("serviceName")]);
            setServiceName( newItem );
        }
    }
    if(val.has_field(utility::conversions::to_string_t("log.level")))
    {
        if(!val[utility::conversions::to_string_t("log.level")].is_null())
        {
            std::shared_ptr<ConfigNodePropertyDropDown> newItem(new ConfigNodePropertyDropDown());
            newItem->fromJson(val[utility::conversions::to_string_t("log.level")]);
            setLogLevel( newItem );
        }
    }
    if(val.has_field(utility::conversions::to_string_t("queue.processing.enabled")))
    {
        if(!val[utility::conversions::to_string_t("queue.processing.enabled")].is_null())
        {
            std::shared_ptr<ConfigNodePropertyBoolean> newItem(new ConfigNodePropertyBoolean());
            newItem->fromJson(val[utility::conversions::to_string_t("queue.processing.enabled")]);
            setQueueProcessingEnabled( newItem );
        }
    }
    if(val.has_field(utility::conversions::to_string_t("packageExporter.target")))
    {
        if(!val[utility::conversions::to_string_t("packageExporter.target")].is_null())
        {
            std::shared_ptr<ConfigNodePropertyString> newItem(new ConfigNodePropertyString());
            newItem->fromJson(val[utility::conversions::to_string_t("packageExporter.target")]);
            setPackageExporterTarget( newItem );
        }
    }
    if(val.has_field(utility::conversions::to_string_t("packageImporter.target")))
    {
        if(!val[utility::conversions::to_string_t("packageImporter.target")].is_null())
        {
            std::shared_ptr<ConfigNodePropertyString> newItem(new ConfigNodePropertyString());
            newItem->fromJson(val[utility::conversions::to_string_t("packageImporter.target")]);
            setPackageImporterTarget( newItem );
        }
    }
    if(val.has_field(utility::conversions::to_string_t("requestAuthorizationStrategy.target")))
    {
        if(!val[utility::conversions::to_string_t("requestAuthorizationStrategy.target")].is_null())
        {
            std::shared_ptr<ConfigNodePropertyString> newItem(new ConfigNodePropertyString());
            newItem->fromJson(val[utility::conversions::to_string_t("requestAuthorizationStrategy.target")]);
            setRequestAuthorizationStrategyTarget( newItem );
        }
    }
    if(val.has_field(utility::conversions::to_string_t("triggers.target")))
    {
        if(!val[utility::conversions::to_string_t("triggers.target")].is_null())
        {
            std::shared_ptr<ConfigNodePropertyString> newItem(new ConfigNodePropertyString());
            newItem->fromJson(val[utility::conversions::to_string_t("triggers.target")]);
            setTriggersTarget( newItem );
        }
    }
}

void OrgApacheSlingDistributionAgentImplSimpleDistributionAgentFactorProperties::toMultipart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix) const
{
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t("."))
    {
        namePrefix += utility::conversions::to_string_t(".");
    }

    if(m_NameIsSet)
    {
        if (m_Name.get())
        {
            m_Name->toMultipart(multipart, utility::conversions::to_string_t("name."));
        }
    }
    if(m_TitleIsSet)
    {
        if (m_Title.get())
        {
            m_Title->toMultipart(multipart, utility::conversions::to_string_t("title."));
        }
    }
    if(m_DetailsIsSet)
    {
        if (m_Details.get())
        {
            m_Details->toMultipart(multipart, utility::conversions::to_string_t("details."));
        }
    }
    if(m_EnabledIsSet)
    {
        if (m_Enabled.get())
        {
            m_Enabled->toMultipart(multipart, utility::conversions::to_string_t("enabled."));
        }
    }
    if(m_ServiceNameIsSet)
    {
        if (m_ServiceName.get())
        {
            m_ServiceName->toMultipart(multipart, utility::conversions::to_string_t("serviceName."));
        }
    }
    if(m_Log_levelIsSet)
    {
        if (m_Log_level.get())
        {
            m_Log_level->toMultipart(multipart, utility::conversions::to_string_t("log.level."));
        }
    }
    if(m_Queue_processing_enabledIsSet)
    {
        if (m_Queue_processing_enabled.get())
        {
            m_Queue_processing_enabled->toMultipart(multipart, utility::conversions::to_string_t("queue.processing.enabled."));
        }
    }
    if(m_PackageExporter_targetIsSet)
    {
        if (m_PackageExporter_target.get())
        {
            m_PackageExporter_target->toMultipart(multipart, utility::conversions::to_string_t("packageExporter.target."));
        }
    }
    if(m_PackageImporter_targetIsSet)
    {
        if (m_PackageImporter_target.get())
        {
            m_PackageImporter_target->toMultipart(multipart, utility::conversions::to_string_t("packageImporter.target."));
        }
    }
    if(m_RequestAuthorizationStrategy_targetIsSet)
    {
        if (m_RequestAuthorizationStrategy_target.get())
        {
            m_RequestAuthorizationStrategy_target->toMultipart(multipart, utility::conversions::to_string_t("requestAuthorizationStrategy.target."));
        }
    }
    if(m_Triggers_targetIsSet)
    {
        if (m_Triggers_target.get())
        {
            m_Triggers_target->toMultipart(multipart, utility::conversions::to_string_t("triggers.target."));
        }
    }
}

void OrgApacheSlingDistributionAgentImplSimpleDistributionAgentFactorProperties::fromMultiPart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix)
{
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t("."))
    {
        namePrefix += utility::conversions::to_string_t(".");
    }

    if(multipart->hasContent(utility::conversions::to_string_t("name")))
    {
        if(multipart->hasContent(utility::conversions::to_string_t("name")))
        {
            std::shared_ptr<ConfigNodePropertyString> newItem(new ConfigNodePropertyString());
            newItem->fromMultiPart(multipart, utility::conversions::to_string_t("name."));
            setName( newItem );
        }
    }
    if(multipart->hasContent(utility::conversions::to_string_t("title")))
    {
        if(multipart->hasContent(utility::conversions::to_string_t("title")))
        {
            std::shared_ptr<ConfigNodePropertyString> newItem(new ConfigNodePropertyString());
            newItem->fromMultiPart(multipart, utility::conversions::to_string_t("title."));
            setTitle( newItem );
        }
    }
    if(multipart->hasContent(utility::conversions::to_string_t("details")))
    {
        if(multipart->hasContent(utility::conversions::to_string_t("details")))
        {
            std::shared_ptr<ConfigNodePropertyString> newItem(new ConfigNodePropertyString());
            newItem->fromMultiPart(multipart, utility::conversions::to_string_t("details."));
            setDetails( newItem );
        }
    }
    if(multipart->hasContent(utility::conversions::to_string_t("enabled")))
    {
        if(multipart->hasContent(utility::conversions::to_string_t("enabled")))
        {
            std::shared_ptr<ConfigNodePropertyBoolean> newItem(new ConfigNodePropertyBoolean());
            newItem->fromMultiPart(multipart, utility::conversions::to_string_t("enabled."));
            setEnabled( newItem );
        }
    }
    if(multipart->hasContent(utility::conversions::to_string_t("serviceName")))
    {
        if(multipart->hasContent(utility::conversions::to_string_t("serviceName")))
        {
            std::shared_ptr<ConfigNodePropertyString> newItem(new ConfigNodePropertyString());
            newItem->fromMultiPart(multipart, utility::conversions::to_string_t("serviceName."));
            setServiceName( newItem );
        }
    }
    if(multipart->hasContent(utility::conversions::to_string_t("log.level")))
    {
        if(multipart->hasContent(utility::conversions::to_string_t("log.level")))
        {
            std::shared_ptr<ConfigNodePropertyDropDown> newItem(new ConfigNodePropertyDropDown());
            newItem->fromMultiPart(multipart, utility::conversions::to_string_t("log.level."));
            setLogLevel( newItem );
        }
    }
    if(multipart->hasContent(utility::conversions::to_string_t("queue.processing.enabled")))
    {
        if(multipart->hasContent(utility::conversions::to_string_t("queue.processing.enabled")))
        {
            std::shared_ptr<ConfigNodePropertyBoolean> newItem(new ConfigNodePropertyBoolean());
            newItem->fromMultiPart(multipart, utility::conversions::to_string_t("queue.processing.enabled."));
            setQueueProcessingEnabled( newItem );
        }
    }
    if(multipart->hasContent(utility::conversions::to_string_t("packageExporter.target")))
    {
        if(multipart->hasContent(utility::conversions::to_string_t("packageExporter.target")))
        {
            std::shared_ptr<ConfigNodePropertyString> newItem(new ConfigNodePropertyString());
            newItem->fromMultiPart(multipart, utility::conversions::to_string_t("packageExporter.target."));
            setPackageExporterTarget( newItem );
        }
    }
    if(multipart->hasContent(utility::conversions::to_string_t("packageImporter.target")))
    {
        if(multipart->hasContent(utility::conversions::to_string_t("packageImporter.target")))
        {
            std::shared_ptr<ConfigNodePropertyString> newItem(new ConfigNodePropertyString());
            newItem->fromMultiPart(multipart, utility::conversions::to_string_t("packageImporter.target."));
            setPackageImporterTarget( newItem );
        }
    }
    if(multipart->hasContent(utility::conversions::to_string_t("requestAuthorizationStrategy.target")))
    {
        if(multipart->hasContent(utility::conversions::to_string_t("requestAuthorizationStrategy.target")))
        {
            std::shared_ptr<ConfigNodePropertyString> newItem(new ConfigNodePropertyString());
            newItem->fromMultiPart(multipart, utility::conversions::to_string_t("requestAuthorizationStrategy.target."));
            setRequestAuthorizationStrategyTarget( newItem );
        }
    }
    if(multipart->hasContent(utility::conversions::to_string_t("triggers.target")))
    {
        if(multipart->hasContent(utility::conversions::to_string_t("triggers.target")))
        {
            std::shared_ptr<ConfigNodePropertyString> newItem(new ConfigNodePropertyString());
            newItem->fromMultiPart(multipart, utility::conversions::to_string_t("triggers.target."));
            setTriggersTarget( newItem );
        }
    }
}

std::shared_ptr<ConfigNodePropertyString> OrgApacheSlingDistributionAgentImplSimpleDistributionAgentFactorProperties::getName() const
{
    return m_Name;
}


void OrgApacheSlingDistributionAgentImplSimpleDistributionAgentFactorProperties::setName(std::shared_ptr<ConfigNodePropertyString> value)
{
    m_Name = value;
    m_NameIsSet = true;
}
bool OrgApacheSlingDistributionAgentImplSimpleDistributionAgentFactorProperties::nameIsSet() const
{
    return m_NameIsSet;
}

void OrgApacheSlingDistributionAgentImplSimpleDistributionAgentFactorProperties::unsetName()
{
    m_NameIsSet = false;
}

std::shared_ptr<ConfigNodePropertyString> OrgApacheSlingDistributionAgentImplSimpleDistributionAgentFactorProperties::getTitle() const
{
    return m_Title;
}


void OrgApacheSlingDistributionAgentImplSimpleDistributionAgentFactorProperties::setTitle(std::shared_ptr<ConfigNodePropertyString> value)
{
    m_Title = value;
    m_TitleIsSet = true;
}
bool OrgApacheSlingDistributionAgentImplSimpleDistributionAgentFactorProperties::titleIsSet() const
{
    return m_TitleIsSet;
}

void OrgApacheSlingDistributionAgentImplSimpleDistributionAgentFactorProperties::unsetTitle()
{
    m_TitleIsSet = false;
}

std::shared_ptr<ConfigNodePropertyString> OrgApacheSlingDistributionAgentImplSimpleDistributionAgentFactorProperties::getDetails() const
{
    return m_Details;
}


void OrgApacheSlingDistributionAgentImplSimpleDistributionAgentFactorProperties::setDetails(std::shared_ptr<ConfigNodePropertyString> value)
{
    m_Details = value;
    m_DetailsIsSet = true;
}
bool OrgApacheSlingDistributionAgentImplSimpleDistributionAgentFactorProperties::detailsIsSet() const
{
    return m_DetailsIsSet;
}

void OrgApacheSlingDistributionAgentImplSimpleDistributionAgentFactorProperties::unsetDetails()
{
    m_DetailsIsSet = false;
}

std::shared_ptr<ConfigNodePropertyBoolean> OrgApacheSlingDistributionAgentImplSimpleDistributionAgentFactorProperties::getEnabled() const
{
    return m_Enabled;
}


void OrgApacheSlingDistributionAgentImplSimpleDistributionAgentFactorProperties::setEnabled(std::shared_ptr<ConfigNodePropertyBoolean> value)
{
    m_Enabled = value;
    m_EnabledIsSet = true;
}
bool OrgApacheSlingDistributionAgentImplSimpleDistributionAgentFactorProperties::enabledIsSet() const
{
    return m_EnabledIsSet;
}

void OrgApacheSlingDistributionAgentImplSimpleDistributionAgentFactorProperties::unsetEnabled()
{
    m_EnabledIsSet = false;
}

std::shared_ptr<ConfigNodePropertyString> OrgApacheSlingDistributionAgentImplSimpleDistributionAgentFactorProperties::getServiceName() const
{
    return m_ServiceName;
}


void OrgApacheSlingDistributionAgentImplSimpleDistributionAgentFactorProperties::setServiceName(std::shared_ptr<ConfigNodePropertyString> value)
{
    m_ServiceName = value;
    m_ServiceNameIsSet = true;
}
bool OrgApacheSlingDistributionAgentImplSimpleDistributionAgentFactorProperties::serviceNameIsSet() const
{
    return m_ServiceNameIsSet;
}

void OrgApacheSlingDistributionAgentImplSimpleDistributionAgentFactorProperties::unsetServiceName()
{
    m_ServiceNameIsSet = false;
}

std::shared_ptr<ConfigNodePropertyDropDown> OrgApacheSlingDistributionAgentImplSimpleDistributionAgentFactorProperties::getLogLevel() const
{
    return m_Log_level;
}


void OrgApacheSlingDistributionAgentImplSimpleDistributionAgentFactorProperties::setLogLevel(std::shared_ptr<ConfigNodePropertyDropDown> value)
{
    m_Log_level = value;
    m_Log_levelIsSet = true;
}
bool OrgApacheSlingDistributionAgentImplSimpleDistributionAgentFactorProperties::logLevelIsSet() const
{
    return m_Log_levelIsSet;
}

void OrgApacheSlingDistributionAgentImplSimpleDistributionAgentFactorProperties::unsetLog_level()
{
    m_Log_levelIsSet = false;
}

std::shared_ptr<ConfigNodePropertyBoolean> OrgApacheSlingDistributionAgentImplSimpleDistributionAgentFactorProperties::getQueueProcessingEnabled() const
{
    return m_Queue_processing_enabled;
}


void OrgApacheSlingDistributionAgentImplSimpleDistributionAgentFactorProperties::setQueueProcessingEnabled(std::shared_ptr<ConfigNodePropertyBoolean> value)
{
    m_Queue_processing_enabled = value;
    m_Queue_processing_enabledIsSet = true;
}
bool OrgApacheSlingDistributionAgentImplSimpleDistributionAgentFactorProperties::queueProcessingEnabledIsSet() const
{
    return m_Queue_processing_enabledIsSet;
}

void OrgApacheSlingDistributionAgentImplSimpleDistributionAgentFactorProperties::unsetQueue_processing_enabled()
{
    m_Queue_processing_enabledIsSet = false;
}

std::shared_ptr<ConfigNodePropertyString> OrgApacheSlingDistributionAgentImplSimpleDistributionAgentFactorProperties::getPackageExporterTarget() const
{
    return m_PackageExporter_target;
}


void OrgApacheSlingDistributionAgentImplSimpleDistributionAgentFactorProperties::setPackageExporterTarget(std::shared_ptr<ConfigNodePropertyString> value)
{
    m_PackageExporter_target = value;
    m_PackageExporter_targetIsSet = true;
}
bool OrgApacheSlingDistributionAgentImplSimpleDistributionAgentFactorProperties::packageExporterTargetIsSet() const
{
    return m_PackageExporter_targetIsSet;
}

void OrgApacheSlingDistributionAgentImplSimpleDistributionAgentFactorProperties::unsetPackageExporter_target()
{
    m_PackageExporter_targetIsSet = false;
}

std::shared_ptr<ConfigNodePropertyString> OrgApacheSlingDistributionAgentImplSimpleDistributionAgentFactorProperties::getPackageImporterTarget() const
{
    return m_PackageImporter_target;
}


void OrgApacheSlingDistributionAgentImplSimpleDistributionAgentFactorProperties::setPackageImporterTarget(std::shared_ptr<ConfigNodePropertyString> value)
{
    m_PackageImporter_target = value;
    m_PackageImporter_targetIsSet = true;
}
bool OrgApacheSlingDistributionAgentImplSimpleDistributionAgentFactorProperties::packageImporterTargetIsSet() const
{
    return m_PackageImporter_targetIsSet;
}

void OrgApacheSlingDistributionAgentImplSimpleDistributionAgentFactorProperties::unsetPackageImporter_target()
{
    m_PackageImporter_targetIsSet = false;
}

std::shared_ptr<ConfigNodePropertyString> OrgApacheSlingDistributionAgentImplSimpleDistributionAgentFactorProperties::getRequestAuthorizationStrategyTarget() const
{
    return m_RequestAuthorizationStrategy_target;
}


void OrgApacheSlingDistributionAgentImplSimpleDistributionAgentFactorProperties::setRequestAuthorizationStrategyTarget(std::shared_ptr<ConfigNodePropertyString> value)
{
    m_RequestAuthorizationStrategy_target = value;
    m_RequestAuthorizationStrategy_targetIsSet = true;
}
bool OrgApacheSlingDistributionAgentImplSimpleDistributionAgentFactorProperties::requestAuthorizationStrategyTargetIsSet() const
{
    return m_RequestAuthorizationStrategy_targetIsSet;
}

void OrgApacheSlingDistributionAgentImplSimpleDistributionAgentFactorProperties::unsetRequestAuthorizationStrategy_target()
{
    m_RequestAuthorizationStrategy_targetIsSet = false;
}

std::shared_ptr<ConfigNodePropertyString> OrgApacheSlingDistributionAgentImplSimpleDistributionAgentFactorProperties::getTriggersTarget() const
{
    return m_Triggers_target;
}


void OrgApacheSlingDistributionAgentImplSimpleDistributionAgentFactorProperties::setTriggersTarget(std::shared_ptr<ConfigNodePropertyString> value)
{
    m_Triggers_target = value;
    m_Triggers_targetIsSet = true;
}
bool OrgApacheSlingDistributionAgentImplSimpleDistributionAgentFactorProperties::triggersTargetIsSet() const
{
    return m_Triggers_targetIsSet;
}

void OrgApacheSlingDistributionAgentImplSimpleDistributionAgentFactorProperties::unsetTriggers_target()
{
    m_Triggers_targetIsSet = false;
}

}
}
}
}

