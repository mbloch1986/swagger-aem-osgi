/**
 * Adobe Experience Manager OSGI config (AEM) API
 * Swagger AEM OSGI is an OpenAPI specification for Adobe Experience Manager (AEM) OSGI Configurations API
 *
 * OpenAPI spec version: 1.0.0-pre.0
 * Contact: opensource@shinesolutions.com
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 3.2.1-SNAPSHOT.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */



#include "ComAdobeCqSocialReportingAnalyticsServicesImplAnalyticsReportIProperties.h"

namespace org {
namespace openapitools {
namespace client {
namespace model {

ComAdobeCqSocialReportingAnalyticsServicesImplAnalyticsReportIProperties::ComAdobeCqSocialReportingAnalyticsServicesImplAnalyticsReportIProperties()
{
    m_Cq_social_reporting_analytics_polling_importer_intervalIsSet = false;
    m_Cq_social_reporting_analytics_polling_importer_pageSizeIsSet = false;
}

ComAdobeCqSocialReportingAnalyticsServicesImplAnalyticsReportIProperties::~ComAdobeCqSocialReportingAnalyticsServicesImplAnalyticsReportIProperties()
{
}

void ComAdobeCqSocialReportingAnalyticsServicesImplAnalyticsReportIProperties::validate()
{
    // TODO: implement validation
}

web::json::value ComAdobeCqSocialReportingAnalyticsServicesImplAnalyticsReportIProperties::toJson() const
{
    web::json::value val = web::json::value::object();

    if(m_Cq_social_reporting_analytics_polling_importer_intervalIsSet)
    {
        val[utility::conversions::to_string_t("cq.social.reporting.analytics.polling.importer.interval")] = ModelBase::toJson(m_Cq_social_reporting_analytics_polling_importer_interval);
    }
    if(m_Cq_social_reporting_analytics_polling_importer_pageSizeIsSet)
    {
        val[utility::conversions::to_string_t("cq.social.reporting.analytics.polling.importer.pageSize")] = ModelBase::toJson(m_Cq_social_reporting_analytics_polling_importer_pageSize);
    }

    return val;
}

void ComAdobeCqSocialReportingAnalyticsServicesImplAnalyticsReportIProperties::fromJson(web::json::value& val)
{
    if(val.has_field(utility::conversions::to_string_t("cq.social.reporting.analytics.polling.importer.interval")))
    {
        if(!val[utility::conversions::to_string_t("cq.social.reporting.analytics.polling.importer.interval")].is_null())
        {
            std::shared_ptr<ConfigNodePropertyInteger> newItem(new ConfigNodePropertyInteger());
            newItem->fromJson(val[utility::conversions::to_string_t("cq.social.reporting.analytics.polling.importer.interval")]);
            setCqSocialReportingAnalyticsPollingImporterInterval( newItem );
        }
    }
    if(val.has_field(utility::conversions::to_string_t("cq.social.reporting.analytics.polling.importer.pageSize")))
    {
        if(!val[utility::conversions::to_string_t("cq.social.reporting.analytics.polling.importer.pageSize")].is_null())
        {
            std::shared_ptr<ConfigNodePropertyInteger> newItem(new ConfigNodePropertyInteger());
            newItem->fromJson(val[utility::conversions::to_string_t("cq.social.reporting.analytics.polling.importer.pageSize")]);
            setCqSocialReportingAnalyticsPollingImporterPageSize( newItem );
        }
    }
}

void ComAdobeCqSocialReportingAnalyticsServicesImplAnalyticsReportIProperties::toMultipart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix) const
{
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t("."))
    {
        namePrefix += utility::conversions::to_string_t(".");
    }

    if(m_Cq_social_reporting_analytics_polling_importer_intervalIsSet)
    {
        if (m_Cq_social_reporting_analytics_polling_importer_interval.get())
        {
            m_Cq_social_reporting_analytics_polling_importer_interval->toMultipart(multipart, utility::conversions::to_string_t("cq.social.reporting.analytics.polling.importer.interval."));
        }
    }
    if(m_Cq_social_reporting_analytics_polling_importer_pageSizeIsSet)
    {
        if (m_Cq_social_reporting_analytics_polling_importer_pageSize.get())
        {
            m_Cq_social_reporting_analytics_polling_importer_pageSize->toMultipart(multipart, utility::conversions::to_string_t("cq.social.reporting.analytics.polling.importer.pageSize."));
        }
    }
}

void ComAdobeCqSocialReportingAnalyticsServicesImplAnalyticsReportIProperties::fromMultiPart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix)
{
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t("."))
    {
        namePrefix += utility::conversions::to_string_t(".");
    }

    if(multipart->hasContent(utility::conversions::to_string_t("cq.social.reporting.analytics.polling.importer.interval")))
    {
        if(multipart->hasContent(utility::conversions::to_string_t("cq.social.reporting.analytics.polling.importer.interval")))
        {
            std::shared_ptr<ConfigNodePropertyInteger> newItem(new ConfigNodePropertyInteger());
            newItem->fromMultiPart(multipart, utility::conversions::to_string_t("cq.social.reporting.analytics.polling.importer.interval."));
            setCqSocialReportingAnalyticsPollingImporterInterval( newItem );
        }
    }
    if(multipart->hasContent(utility::conversions::to_string_t("cq.social.reporting.analytics.polling.importer.pageSize")))
    {
        if(multipart->hasContent(utility::conversions::to_string_t("cq.social.reporting.analytics.polling.importer.pageSize")))
        {
            std::shared_ptr<ConfigNodePropertyInteger> newItem(new ConfigNodePropertyInteger());
            newItem->fromMultiPart(multipart, utility::conversions::to_string_t("cq.social.reporting.analytics.polling.importer.pageSize."));
            setCqSocialReportingAnalyticsPollingImporterPageSize( newItem );
        }
    }
}

std::shared_ptr<ConfigNodePropertyInteger> ComAdobeCqSocialReportingAnalyticsServicesImplAnalyticsReportIProperties::getCqSocialReportingAnalyticsPollingImporterInterval() const
{
    return m_Cq_social_reporting_analytics_polling_importer_interval;
}


void ComAdobeCqSocialReportingAnalyticsServicesImplAnalyticsReportIProperties::setCqSocialReportingAnalyticsPollingImporterInterval(std::shared_ptr<ConfigNodePropertyInteger> value)
{
    m_Cq_social_reporting_analytics_polling_importer_interval = value;
    m_Cq_social_reporting_analytics_polling_importer_intervalIsSet = true;
}
bool ComAdobeCqSocialReportingAnalyticsServicesImplAnalyticsReportIProperties::cqSocialReportingAnalyticsPollingImporterIntervalIsSet() const
{
    return m_Cq_social_reporting_analytics_polling_importer_intervalIsSet;
}

void ComAdobeCqSocialReportingAnalyticsServicesImplAnalyticsReportIProperties::unsetCq_social_reporting_analytics_polling_importer_interval()
{
    m_Cq_social_reporting_analytics_polling_importer_intervalIsSet = false;
}

std::shared_ptr<ConfigNodePropertyInteger> ComAdobeCqSocialReportingAnalyticsServicesImplAnalyticsReportIProperties::getCqSocialReportingAnalyticsPollingImporterPageSize() const
{
    return m_Cq_social_reporting_analytics_polling_importer_pageSize;
}


void ComAdobeCqSocialReportingAnalyticsServicesImplAnalyticsReportIProperties::setCqSocialReportingAnalyticsPollingImporterPageSize(std::shared_ptr<ConfigNodePropertyInteger> value)
{
    m_Cq_social_reporting_analytics_polling_importer_pageSize = value;
    m_Cq_social_reporting_analytics_polling_importer_pageSizeIsSet = true;
}
bool ComAdobeCqSocialReportingAnalyticsServicesImplAnalyticsReportIProperties::cqSocialReportingAnalyticsPollingImporterPageSizeIsSet() const
{
    return m_Cq_social_reporting_analytics_polling_importer_pageSizeIsSet;
}

void ComAdobeCqSocialReportingAnalyticsServicesImplAnalyticsReportIProperties::unsetCq_social_reporting_analytics_polling_importer_pageSize()
{
    m_Cq_social_reporting_analytics_polling_importer_pageSizeIsSet = false;
}

}
}
}
}

