/**
 * Adobe Experience Manager OSGI config (AEM) API
 * Swagger AEM OSGI is an OpenAPI specification for Adobe Experience Manager (AEM) OSGI Configurations API
 *
 * OpenAPI spec version: 1.0.0-pre.0
 * Contact: opensource@shinesolutions.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


#include "OAIComDayCqRewriterLinkcheckerImplLinkInfoStorageImplProperties.h"

#include "OAIHelpers.h"

#include <QJsonDocument>
#include <QJsonArray>
#include <QObject>
#include <QDebug>

namespace OpenAPI {

OAIComDayCqRewriterLinkcheckerImplLinkInfoStorageImplProperties::OAIComDayCqRewriterLinkcheckerImplLinkInfoStorageImplProperties(QString json) {
    this->fromJson(json);
}

OAIComDayCqRewriterLinkcheckerImplLinkInfoStorageImplProperties::OAIComDayCqRewriterLinkcheckerImplLinkInfoStorageImplProperties() {
    this->init();
}

OAIComDayCqRewriterLinkcheckerImplLinkInfoStorageImplProperties::~OAIComDayCqRewriterLinkcheckerImplLinkInfoStorageImplProperties() {
    
}

void
OAIComDayCqRewriterLinkcheckerImplLinkInfoStorageImplProperties::init() {
    m_service_max_links_per_host_isSet = false;
    m_service_save_external_link_references_isSet = false;
}

void
OAIComDayCqRewriterLinkcheckerImplLinkInfoStorageImplProperties::fromJson(QString jsonString) {
    QByteArray array (jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void
OAIComDayCqRewriterLinkcheckerImplLinkInfoStorageImplProperties::fromJsonObject(QJsonObject json) {
    ::OpenAPI::fromJsonValue(service_max_links_per_host, json[QString("service.max_links_per_host")]);
    
    ::OpenAPI::fromJsonValue(service_save_external_link_references, json[QString("service.save_external_link_references")]);
    
}

QString
OAIComDayCqRewriterLinkcheckerImplLinkInfoStorageImplProperties::asJson () const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject
OAIComDayCqRewriterLinkcheckerImplLinkInfoStorageImplProperties::asJsonObject() const {
    QJsonObject obj;
	if(service_max_links_per_host.isSet()){
        obj.insert(QString("service.max_links_per_host"), ::OpenAPI::toJsonValue(service_max_links_per_host));
    }
	if(service_save_external_link_references.isSet()){
        obj.insert(QString("service.save_external_link_references"), ::OpenAPI::toJsonValue(service_save_external_link_references));
    }
    return obj;
}

OAIConfigNodePropertyInteger
OAIComDayCqRewriterLinkcheckerImplLinkInfoStorageImplProperties::getServiceMaxLinksPerHost() const {
    return service_max_links_per_host;
}
void
OAIComDayCqRewriterLinkcheckerImplLinkInfoStorageImplProperties::setServiceMaxLinksPerHost(const OAIConfigNodePropertyInteger &service_max_links_per_host) {
    this->service_max_links_per_host = service_max_links_per_host;
    this->m_service_max_links_per_host_isSet = true;
}

OAIConfigNodePropertyBoolean
OAIComDayCqRewriterLinkcheckerImplLinkInfoStorageImplProperties::getServiceSaveExternalLinkReferences() const {
    return service_save_external_link_references;
}
void
OAIComDayCqRewriterLinkcheckerImplLinkInfoStorageImplProperties::setServiceSaveExternalLinkReferences(const OAIConfigNodePropertyBoolean &service_save_external_link_references) {
    this->service_save_external_link_references = service_save_external_link_references;
    this->m_service_save_external_link_references_isSet = true;
}


bool
OAIComDayCqRewriterLinkcheckerImplLinkInfoStorageImplProperties::isSet() const {
    bool isObjectUpdated = false;
    do{ 
        if(service_max_links_per_host.isSet()){ isObjectUpdated = true; break;}
    
        if(service_save_external_link_references.isSet()){ isObjectUpdated = true; break;}
    }while(false);
    return isObjectUpdated;
}

}

