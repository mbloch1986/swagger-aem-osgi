/**
 * Adobe Experience Manager OSGI config (AEM) API
 * Swagger AEM OSGI is an OpenAPI specification for Adobe Experience Manager (AEM) OSGI Configurations API
 *
 * OpenAPI spec version: 1.0.0-pre.0
 * Contact: opensource@shinesolutions.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


#include "OAIComDayCqRewriterLinkcheckerImplLinkCheckerTaskProperties.h"

#include "OAIHelpers.h"

#include <QJsonDocument>
#include <QJsonArray>
#include <QObject>
#include <QDebug>

namespace OpenAPI {

OAIComDayCqRewriterLinkcheckerImplLinkCheckerTaskProperties::OAIComDayCqRewriterLinkcheckerImplLinkCheckerTaskProperties(QString json) {
    init();
    this->fromJson(json);
}

OAIComDayCqRewriterLinkcheckerImplLinkCheckerTaskProperties::OAIComDayCqRewriterLinkcheckerImplLinkCheckerTaskProperties() {
    init();
}

OAIComDayCqRewriterLinkcheckerImplLinkCheckerTaskProperties::~OAIComDayCqRewriterLinkcheckerImplLinkCheckerTaskProperties() {
    this->cleanup();
}

void
OAIComDayCqRewriterLinkcheckerImplLinkCheckerTaskProperties::init() {
    scheduler_period = new OAIConfigNodePropertyInteger();
    m_scheduler_period_isSet = false;
    scheduler_concurrent = new OAIConfigNodePropertyBoolean();
    m_scheduler_concurrent_isSet = false;
    good_link_test_interval = new OAIConfigNodePropertyInteger();
    m_good_link_test_interval_isSet = false;
    bad_link_test_interval = new OAIConfigNodePropertyInteger();
    m_bad_link_test_interval_isSet = false;
    link_unused_interval = new OAIConfigNodePropertyInteger();
    m_link_unused_interval_isSet = false;
    connection_timeout = new OAIConfigNodePropertyInteger();
    m_connection_timeout_isSet = false;
}

void
OAIComDayCqRewriterLinkcheckerImplLinkCheckerTaskProperties::cleanup() {
    if(scheduler_period != nullptr) { 
        delete scheduler_period;
    }
    if(scheduler_concurrent != nullptr) { 
        delete scheduler_concurrent;
    }
    if(good_link_test_interval != nullptr) { 
        delete good_link_test_interval;
    }
    if(bad_link_test_interval != nullptr) { 
        delete bad_link_test_interval;
    }
    if(link_unused_interval != nullptr) { 
        delete link_unused_interval;
    }
    if(connection_timeout != nullptr) { 
        delete connection_timeout;
    }
}

OAIComDayCqRewriterLinkcheckerImplLinkCheckerTaskProperties*
OAIComDayCqRewriterLinkcheckerImplLinkCheckerTaskProperties::fromJson(QString json) {
    QByteArray array (json.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
    return this;
}

void
OAIComDayCqRewriterLinkcheckerImplLinkCheckerTaskProperties::fromJsonObject(QJsonObject pJson) {
    ::OpenAPI::setValue(&scheduler_period, pJson["scheduler.period"], "OAIConfigNodePropertyInteger", "OAIConfigNodePropertyInteger");
    
    ::OpenAPI::setValue(&scheduler_concurrent, pJson["scheduler.concurrent"], "OAIConfigNodePropertyBoolean", "OAIConfigNodePropertyBoolean");
    
    ::OpenAPI::setValue(&good_link_test_interval, pJson["good_link_test_interval"], "OAIConfigNodePropertyInteger", "OAIConfigNodePropertyInteger");
    
    ::OpenAPI::setValue(&bad_link_test_interval, pJson["bad_link_test_interval"], "OAIConfigNodePropertyInteger", "OAIConfigNodePropertyInteger");
    
    ::OpenAPI::setValue(&link_unused_interval, pJson["link_unused_interval"], "OAIConfigNodePropertyInteger", "OAIConfigNodePropertyInteger");
    
    ::OpenAPI::setValue(&connection_timeout, pJson["connection.timeout"], "OAIConfigNodePropertyInteger", "OAIConfigNodePropertyInteger");
    
}

QString
OAIComDayCqRewriterLinkcheckerImplLinkCheckerTaskProperties::asJson ()
{
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject
OAIComDayCqRewriterLinkcheckerImplLinkCheckerTaskProperties::asJsonObject() {
    QJsonObject obj;
    if((scheduler_period != nullptr) && (scheduler_period->isSet())){
        toJsonValue(QString("scheduler.period"), scheduler_period, obj, QString("OAIConfigNodePropertyInteger"));
    }
    if((scheduler_concurrent != nullptr) && (scheduler_concurrent->isSet())){
        toJsonValue(QString("scheduler.concurrent"), scheduler_concurrent, obj, QString("OAIConfigNodePropertyBoolean"));
    }
    if((good_link_test_interval != nullptr) && (good_link_test_interval->isSet())){
        toJsonValue(QString("good_link_test_interval"), good_link_test_interval, obj, QString("OAIConfigNodePropertyInteger"));
    }
    if((bad_link_test_interval != nullptr) && (bad_link_test_interval->isSet())){
        toJsonValue(QString("bad_link_test_interval"), bad_link_test_interval, obj, QString("OAIConfigNodePropertyInteger"));
    }
    if((link_unused_interval != nullptr) && (link_unused_interval->isSet())){
        toJsonValue(QString("link_unused_interval"), link_unused_interval, obj, QString("OAIConfigNodePropertyInteger"));
    }
    if((connection_timeout != nullptr) && (connection_timeout->isSet())){
        toJsonValue(QString("connection.timeout"), connection_timeout, obj, QString("OAIConfigNodePropertyInteger"));
    }

    return obj;
}

OAIConfigNodePropertyInteger*
OAIComDayCqRewriterLinkcheckerImplLinkCheckerTaskProperties::getSchedulerPeriod() {
    return scheduler_period;
}
void
OAIComDayCqRewriterLinkcheckerImplLinkCheckerTaskProperties::setSchedulerPeriod(OAIConfigNodePropertyInteger* scheduler_period) {
    this->scheduler_period = scheduler_period;
    this->m_scheduler_period_isSet = true;
}

OAIConfigNodePropertyBoolean*
OAIComDayCqRewriterLinkcheckerImplLinkCheckerTaskProperties::getSchedulerConcurrent() {
    return scheduler_concurrent;
}
void
OAIComDayCqRewriterLinkcheckerImplLinkCheckerTaskProperties::setSchedulerConcurrent(OAIConfigNodePropertyBoolean* scheduler_concurrent) {
    this->scheduler_concurrent = scheduler_concurrent;
    this->m_scheduler_concurrent_isSet = true;
}

OAIConfigNodePropertyInteger*
OAIComDayCqRewriterLinkcheckerImplLinkCheckerTaskProperties::getGoodLinkTestInterval() {
    return good_link_test_interval;
}
void
OAIComDayCqRewriterLinkcheckerImplLinkCheckerTaskProperties::setGoodLinkTestInterval(OAIConfigNodePropertyInteger* good_link_test_interval) {
    this->good_link_test_interval = good_link_test_interval;
    this->m_good_link_test_interval_isSet = true;
}

OAIConfigNodePropertyInteger*
OAIComDayCqRewriterLinkcheckerImplLinkCheckerTaskProperties::getBadLinkTestInterval() {
    return bad_link_test_interval;
}
void
OAIComDayCqRewriterLinkcheckerImplLinkCheckerTaskProperties::setBadLinkTestInterval(OAIConfigNodePropertyInteger* bad_link_test_interval) {
    this->bad_link_test_interval = bad_link_test_interval;
    this->m_bad_link_test_interval_isSet = true;
}

OAIConfigNodePropertyInteger*
OAIComDayCqRewriterLinkcheckerImplLinkCheckerTaskProperties::getLinkUnusedInterval() {
    return link_unused_interval;
}
void
OAIComDayCqRewriterLinkcheckerImplLinkCheckerTaskProperties::setLinkUnusedInterval(OAIConfigNodePropertyInteger* link_unused_interval) {
    this->link_unused_interval = link_unused_interval;
    this->m_link_unused_interval_isSet = true;
}

OAIConfigNodePropertyInteger*
OAIComDayCqRewriterLinkcheckerImplLinkCheckerTaskProperties::getConnectionTimeout() {
    return connection_timeout;
}
void
OAIComDayCqRewriterLinkcheckerImplLinkCheckerTaskProperties::setConnectionTimeout(OAIConfigNodePropertyInteger* connection_timeout) {
    this->connection_timeout = connection_timeout;
    this->m_connection_timeout_isSet = true;
}


bool
OAIComDayCqRewriterLinkcheckerImplLinkCheckerTaskProperties::isSet(){
    bool isObjectUpdated = false;
    do{
        if(scheduler_period != nullptr && scheduler_period->isSet()){ isObjectUpdated = true; break;}
        if(scheduler_concurrent != nullptr && scheduler_concurrent->isSet()){ isObjectUpdated = true; break;}
        if(good_link_test_interval != nullptr && good_link_test_interval->isSet()){ isObjectUpdated = true; break;}
        if(bad_link_test_interval != nullptr && bad_link_test_interval->isSet()){ isObjectUpdated = true; break;}
        if(link_unused_interval != nullptr && link_unused_interval->isSet()){ isObjectUpdated = true; break;}
        if(connection_timeout != nullptr && connection_timeout->isSet()){ isObjectUpdated = true; break;}
    }while(false);
    return isObjectUpdated;
}
}

