/**
 * Adobe Experience Manager OSGI config (AEM) API
 * Swagger AEM OSGI is an OpenAPI specification for Adobe Experience Manager (AEM) OSGI Configurations API
 *
 * OpenAPI spec version: 1.0.0-pre.0
 * Contact: opensource@shinesolutions.com
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 3.2.1-SNAPSHOT.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */



#include "OrgApacheFelixScrScrServiceProperties.h"

namespace org {
namespace openapitools {
namespace client {
namespace model {

OrgApacheFelixScrScrServiceProperties::OrgApacheFelixScrScrServiceProperties()
{
    m_Ds_loglevelIsSet = false;
    m_Ds_factory_enabledIsSet = false;
    m_Ds_delayed_keepInstancesIsSet = false;
    m_Ds_lock_timeout_millisecondsIsSet = false;
    m_Ds_stop_timeout_millisecondsIsSet = false;
    m_Ds_global_extenderIsSet = false;
}

OrgApacheFelixScrScrServiceProperties::~OrgApacheFelixScrScrServiceProperties()
{
}

void OrgApacheFelixScrScrServiceProperties::validate()
{
    // TODO: implement validation
}

web::json::value OrgApacheFelixScrScrServiceProperties::toJson() const
{
    web::json::value val = web::json::value::object();

    if(m_Ds_loglevelIsSet)
    {
        val[utility::conversions::to_string_t("ds.loglevel")] = ModelBase::toJson(m_Ds_loglevel);
    }
    if(m_Ds_factory_enabledIsSet)
    {
        val[utility::conversions::to_string_t("ds.factory.enabled")] = ModelBase::toJson(m_Ds_factory_enabled);
    }
    if(m_Ds_delayed_keepInstancesIsSet)
    {
        val[utility::conversions::to_string_t("ds.delayed.keepInstances")] = ModelBase::toJson(m_Ds_delayed_keepInstances);
    }
    if(m_Ds_lock_timeout_millisecondsIsSet)
    {
        val[utility::conversions::to_string_t("ds.lock.timeout.milliseconds")] = ModelBase::toJson(m_Ds_lock_timeout_milliseconds);
    }
    if(m_Ds_stop_timeout_millisecondsIsSet)
    {
        val[utility::conversions::to_string_t("ds.stop.timeout.milliseconds")] = ModelBase::toJson(m_Ds_stop_timeout_milliseconds);
    }
    if(m_Ds_global_extenderIsSet)
    {
        val[utility::conversions::to_string_t("ds.global.extender")] = ModelBase::toJson(m_Ds_global_extender);
    }

    return val;
}

void OrgApacheFelixScrScrServiceProperties::fromJson(web::json::value& val)
{
    if(val.has_field(utility::conversions::to_string_t("ds.loglevel")))
    {
        if(!val[utility::conversions::to_string_t("ds.loglevel")].is_null())
        {
            std::shared_ptr<ConfigNodePropertyDropDown> newItem(new ConfigNodePropertyDropDown());
            newItem->fromJson(val[utility::conversions::to_string_t("ds.loglevel")]);
            setDsLoglevel( newItem );
        }
    }
    if(val.has_field(utility::conversions::to_string_t("ds.factory.enabled")))
    {
        if(!val[utility::conversions::to_string_t("ds.factory.enabled")].is_null())
        {
            std::shared_ptr<ConfigNodePropertyBoolean> newItem(new ConfigNodePropertyBoolean());
            newItem->fromJson(val[utility::conversions::to_string_t("ds.factory.enabled")]);
            setDsFactoryEnabled( newItem );
        }
    }
    if(val.has_field(utility::conversions::to_string_t("ds.delayed.keepInstances")))
    {
        if(!val[utility::conversions::to_string_t("ds.delayed.keepInstances")].is_null())
        {
            std::shared_ptr<ConfigNodePropertyBoolean> newItem(new ConfigNodePropertyBoolean());
            newItem->fromJson(val[utility::conversions::to_string_t("ds.delayed.keepInstances")]);
            setDsDelayedKeepInstances( newItem );
        }
    }
    if(val.has_field(utility::conversions::to_string_t("ds.lock.timeout.milliseconds")))
    {
        if(!val[utility::conversions::to_string_t("ds.lock.timeout.milliseconds")].is_null())
        {
            std::shared_ptr<ConfigNodePropertyInteger> newItem(new ConfigNodePropertyInteger());
            newItem->fromJson(val[utility::conversions::to_string_t("ds.lock.timeout.milliseconds")]);
            setDsLockTimeoutMilliseconds( newItem );
        }
    }
    if(val.has_field(utility::conversions::to_string_t("ds.stop.timeout.milliseconds")))
    {
        if(!val[utility::conversions::to_string_t("ds.stop.timeout.milliseconds")].is_null())
        {
            std::shared_ptr<ConfigNodePropertyInteger> newItem(new ConfigNodePropertyInteger());
            newItem->fromJson(val[utility::conversions::to_string_t("ds.stop.timeout.milliseconds")]);
            setDsStopTimeoutMilliseconds( newItem );
        }
    }
    if(val.has_field(utility::conversions::to_string_t("ds.global.extender")))
    {
        if(!val[utility::conversions::to_string_t("ds.global.extender")].is_null())
        {
            std::shared_ptr<ConfigNodePropertyBoolean> newItem(new ConfigNodePropertyBoolean());
            newItem->fromJson(val[utility::conversions::to_string_t("ds.global.extender")]);
            setDsGlobalExtender( newItem );
        }
    }
}

void OrgApacheFelixScrScrServiceProperties::toMultipart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix) const
{
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t("."))
    {
        namePrefix += utility::conversions::to_string_t(".");
    }

    if(m_Ds_loglevelIsSet)
    {
        if (m_Ds_loglevel.get())
        {
            m_Ds_loglevel->toMultipart(multipart, utility::conversions::to_string_t("ds.loglevel."));
        }
    }
    if(m_Ds_factory_enabledIsSet)
    {
        if (m_Ds_factory_enabled.get())
        {
            m_Ds_factory_enabled->toMultipart(multipart, utility::conversions::to_string_t("ds.factory.enabled."));
        }
    }
    if(m_Ds_delayed_keepInstancesIsSet)
    {
        if (m_Ds_delayed_keepInstances.get())
        {
            m_Ds_delayed_keepInstances->toMultipart(multipart, utility::conversions::to_string_t("ds.delayed.keepInstances."));
        }
    }
    if(m_Ds_lock_timeout_millisecondsIsSet)
    {
        if (m_Ds_lock_timeout_milliseconds.get())
        {
            m_Ds_lock_timeout_milliseconds->toMultipart(multipart, utility::conversions::to_string_t("ds.lock.timeout.milliseconds."));
        }
    }
    if(m_Ds_stop_timeout_millisecondsIsSet)
    {
        if (m_Ds_stop_timeout_milliseconds.get())
        {
            m_Ds_stop_timeout_milliseconds->toMultipart(multipart, utility::conversions::to_string_t("ds.stop.timeout.milliseconds."));
        }
    }
    if(m_Ds_global_extenderIsSet)
    {
        if (m_Ds_global_extender.get())
        {
            m_Ds_global_extender->toMultipart(multipart, utility::conversions::to_string_t("ds.global.extender."));
        }
    }
}

void OrgApacheFelixScrScrServiceProperties::fromMultiPart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix)
{
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t("."))
    {
        namePrefix += utility::conversions::to_string_t(".");
    }

    if(multipart->hasContent(utility::conversions::to_string_t("ds.loglevel")))
    {
        if(multipart->hasContent(utility::conversions::to_string_t("ds.loglevel")))
        {
            std::shared_ptr<ConfigNodePropertyDropDown> newItem(new ConfigNodePropertyDropDown());
            newItem->fromMultiPart(multipart, utility::conversions::to_string_t("ds.loglevel."));
            setDsLoglevel( newItem );
        }
    }
    if(multipart->hasContent(utility::conversions::to_string_t("ds.factory.enabled")))
    {
        if(multipart->hasContent(utility::conversions::to_string_t("ds.factory.enabled")))
        {
            std::shared_ptr<ConfigNodePropertyBoolean> newItem(new ConfigNodePropertyBoolean());
            newItem->fromMultiPart(multipart, utility::conversions::to_string_t("ds.factory.enabled."));
            setDsFactoryEnabled( newItem );
        }
    }
    if(multipart->hasContent(utility::conversions::to_string_t("ds.delayed.keepInstances")))
    {
        if(multipart->hasContent(utility::conversions::to_string_t("ds.delayed.keepInstances")))
        {
            std::shared_ptr<ConfigNodePropertyBoolean> newItem(new ConfigNodePropertyBoolean());
            newItem->fromMultiPart(multipart, utility::conversions::to_string_t("ds.delayed.keepInstances."));
            setDsDelayedKeepInstances( newItem );
        }
    }
    if(multipart->hasContent(utility::conversions::to_string_t("ds.lock.timeout.milliseconds")))
    {
        if(multipart->hasContent(utility::conversions::to_string_t("ds.lock.timeout.milliseconds")))
        {
            std::shared_ptr<ConfigNodePropertyInteger> newItem(new ConfigNodePropertyInteger());
            newItem->fromMultiPart(multipart, utility::conversions::to_string_t("ds.lock.timeout.milliseconds."));
            setDsLockTimeoutMilliseconds( newItem );
        }
    }
    if(multipart->hasContent(utility::conversions::to_string_t("ds.stop.timeout.milliseconds")))
    {
        if(multipart->hasContent(utility::conversions::to_string_t("ds.stop.timeout.milliseconds")))
        {
            std::shared_ptr<ConfigNodePropertyInteger> newItem(new ConfigNodePropertyInteger());
            newItem->fromMultiPart(multipart, utility::conversions::to_string_t("ds.stop.timeout.milliseconds."));
            setDsStopTimeoutMilliseconds( newItem );
        }
    }
    if(multipart->hasContent(utility::conversions::to_string_t("ds.global.extender")))
    {
        if(multipart->hasContent(utility::conversions::to_string_t("ds.global.extender")))
        {
            std::shared_ptr<ConfigNodePropertyBoolean> newItem(new ConfigNodePropertyBoolean());
            newItem->fromMultiPart(multipart, utility::conversions::to_string_t("ds.global.extender."));
            setDsGlobalExtender( newItem );
        }
    }
}

std::shared_ptr<ConfigNodePropertyDropDown> OrgApacheFelixScrScrServiceProperties::getDsLoglevel() const
{
    return m_Ds_loglevel;
}


void OrgApacheFelixScrScrServiceProperties::setDsLoglevel(std::shared_ptr<ConfigNodePropertyDropDown> value)
{
    m_Ds_loglevel = value;
    m_Ds_loglevelIsSet = true;
}
bool OrgApacheFelixScrScrServiceProperties::dsLoglevelIsSet() const
{
    return m_Ds_loglevelIsSet;
}

void OrgApacheFelixScrScrServiceProperties::unsetDs_loglevel()
{
    m_Ds_loglevelIsSet = false;
}

std::shared_ptr<ConfigNodePropertyBoolean> OrgApacheFelixScrScrServiceProperties::getDsFactoryEnabled() const
{
    return m_Ds_factory_enabled;
}


void OrgApacheFelixScrScrServiceProperties::setDsFactoryEnabled(std::shared_ptr<ConfigNodePropertyBoolean> value)
{
    m_Ds_factory_enabled = value;
    m_Ds_factory_enabledIsSet = true;
}
bool OrgApacheFelixScrScrServiceProperties::dsFactoryEnabledIsSet() const
{
    return m_Ds_factory_enabledIsSet;
}

void OrgApacheFelixScrScrServiceProperties::unsetDs_factory_enabled()
{
    m_Ds_factory_enabledIsSet = false;
}

std::shared_ptr<ConfigNodePropertyBoolean> OrgApacheFelixScrScrServiceProperties::getDsDelayedKeepInstances() const
{
    return m_Ds_delayed_keepInstances;
}


void OrgApacheFelixScrScrServiceProperties::setDsDelayedKeepInstances(std::shared_ptr<ConfigNodePropertyBoolean> value)
{
    m_Ds_delayed_keepInstances = value;
    m_Ds_delayed_keepInstancesIsSet = true;
}
bool OrgApacheFelixScrScrServiceProperties::dsDelayedKeepInstancesIsSet() const
{
    return m_Ds_delayed_keepInstancesIsSet;
}

void OrgApacheFelixScrScrServiceProperties::unsetDs_delayed_keepInstances()
{
    m_Ds_delayed_keepInstancesIsSet = false;
}

std::shared_ptr<ConfigNodePropertyInteger> OrgApacheFelixScrScrServiceProperties::getDsLockTimeoutMilliseconds() const
{
    return m_Ds_lock_timeout_milliseconds;
}


void OrgApacheFelixScrScrServiceProperties::setDsLockTimeoutMilliseconds(std::shared_ptr<ConfigNodePropertyInteger> value)
{
    m_Ds_lock_timeout_milliseconds = value;
    m_Ds_lock_timeout_millisecondsIsSet = true;
}
bool OrgApacheFelixScrScrServiceProperties::dsLockTimeoutMillisecondsIsSet() const
{
    return m_Ds_lock_timeout_millisecondsIsSet;
}

void OrgApacheFelixScrScrServiceProperties::unsetDs_lock_timeout_milliseconds()
{
    m_Ds_lock_timeout_millisecondsIsSet = false;
}

std::shared_ptr<ConfigNodePropertyInteger> OrgApacheFelixScrScrServiceProperties::getDsStopTimeoutMilliseconds() const
{
    return m_Ds_stop_timeout_milliseconds;
}


void OrgApacheFelixScrScrServiceProperties::setDsStopTimeoutMilliseconds(std::shared_ptr<ConfigNodePropertyInteger> value)
{
    m_Ds_stop_timeout_milliseconds = value;
    m_Ds_stop_timeout_millisecondsIsSet = true;
}
bool OrgApacheFelixScrScrServiceProperties::dsStopTimeoutMillisecondsIsSet() const
{
    return m_Ds_stop_timeout_millisecondsIsSet;
}

void OrgApacheFelixScrScrServiceProperties::unsetDs_stop_timeout_milliseconds()
{
    m_Ds_stop_timeout_millisecondsIsSet = false;
}

std::shared_ptr<ConfigNodePropertyBoolean> OrgApacheFelixScrScrServiceProperties::getDsGlobalExtender() const
{
    return m_Ds_global_extender;
}


void OrgApacheFelixScrScrServiceProperties::setDsGlobalExtender(std::shared_ptr<ConfigNodePropertyBoolean> value)
{
    m_Ds_global_extender = value;
    m_Ds_global_extenderIsSet = true;
}
bool OrgApacheFelixScrScrServiceProperties::dsGlobalExtenderIsSet() const
{
    return m_Ds_global_extenderIsSet;
}

void OrgApacheFelixScrScrServiceProperties::unsetDs_global_extender()
{
    m_Ds_global_extenderIsSet = false;
}

}
}
}
}

